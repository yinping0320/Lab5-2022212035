/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/upload-and-preview/file-order-drag.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, NgZone, Injector, Renderer2, ElementRef, Input, Output, EventEmitter, } from "@angular/core";
import { dropHandlers, smoothDnD as SmoothDndForVisible, constants, } from "@farris/smooth-dnd";
const { wrapperClass, animationClass } = constants;
SmoothDndForVisible.dropHandler = dropHandlers.reactDropHandler().handler;
SmoothDndForVisible.wrapChild = false;
/**
 * @record
 */
export function DragStartEndInfo() { }
if (false) {
    /** @type {?} */
    DragStartEndInfo.prototype.isSource;
    /** @type {?} */
    DragStartEndInfo.prototype.payload;
    /** @type {?} */
    DragStartEndInfo.prototype.willAcceptDrop;
}
export class UploadFileOrderDragDirective {
    /**
     * @param {?} ngzone
     * @param {?} injector
     * @param {?} render
     * @param {?} el
     */
    constructor(ngzone, injector, render, el) {
        this.ngzone = ngzone;
        this.injector = injector;
        this.render = render;
        this.el = el;
        this.enableDrag = false;
        this.drop = new EventEmitter();
        this.options = {
            behaviour: "move",
            dragHandleSelector: ".upfile-drag-handle",
            dropPlaceholder: {
                className: "drop-group-field",
            },
            getGhostParent: (/**
             * @return {?}
             */
            () => {
                return document.body;
            }),
            getChildPayload: this.getChildPayload.bind(this),
            shouldAcceptDrop: (/**
             * @param {?} sourceContainerOptions
             * @param {?} payload
             * @return {?}
             */
            (sourceContainerOptions, payload) => {
                return true;
            }),
            onDropReady: (/**
             * @param {?} dropResult
             * @return {?}
             */
            (dropResult) => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.onDropReady(dropResult);
                }));
            }),
            onDrop: (/**
             * @param {?} dropResult
             * @return {?}
             */
            (dropResult) => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.drop.emit(dropResult);
                }));
            }),
            onDragEnter: (/**
             * @return {?}
             */
            () => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.onDragEnter();
                }));
            }),
            onDragStart: (/**
             * @param {?} info
             * @return {?}
             */
            (info) => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.onDragStart(info);
                }));
            }),
            onDragEnd: (/**
             * @param {?} info
             * @return {?}
             */
            (info) => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.onDragEnd(info);
                }));
            }),
        };
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.enableDrag) {
            this.initDnD();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.disposeDnd();
    }
    /**
     * @private
     * @return {?}
     */
    disposeDnd() {
        if (this.container) {
            this.container.dispose();
            this.container = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    initDnD() {
        this.disposeDnd();
        this.container = SmoothDndForVisible(this.el.nativeElement, this.options);
    }
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    getChildPayload(index) {
        return index;
    }
    /**
     * @private
     * @param {?} dropResult
     * @return {?}
     */
    onDropReady(dropResult) {
        // console.log('DROP READY', dropResult);
    }
    /**
     * @private
     * @param {?} info
     * @return {?}
     */
    onDragStart(info) {
        // console.log("DRAG START", info);
    }
    /**
     * @private
     * @param {?} info
     * @return {?}
     */
    onDragEnd(info) {
        // console.log('DRAG END', info);
    }
    /**
     * @private
     * @return {?}
     */
    onDragEnter() {
        // console.log('DRAG ENTER');
    }
}
UploadFileOrderDragDirective.decorators = [
    { type: Directive, args: [{
                selector: "[upfile-order-drag]",
            },] }
];
/** @nocollapse */
UploadFileOrderDragDirective.ctorParameters = () => [
    { type: NgZone },
    { type: Injector },
    { type: Renderer2 },
    { type: ElementRef }
];
UploadFileOrderDragDirective.propDecorators = {
    enableDrag: [{ type: Input, args: ['upfile-order-drag',] }],
    drop: [{ type: Output }],
    options: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    UploadFileOrderDragDirective.prototype.container;
    /** @type {?} */
    UploadFileOrderDragDirective.prototype.enableDrag;
    /** @type {?} */
    UploadFileOrderDragDirective.prototype.drop;
    /** @type {?} */
    UploadFileOrderDragDirective.prototype.options;
    /**
     * @type {?}
     * @private
     */
    UploadFileOrderDragDirective.prototype.ngzone;
    /**
     * @type {?}
     * @private
     */
    UploadFileOrderDragDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    UploadFileOrderDragDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    UploadFileOrderDragDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,