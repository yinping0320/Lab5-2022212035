/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/preview-checkbox/preview-checkbox.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, HostBinding, } from "@angular/core";
var PreviewCheckboxComponent = /** @class */ (function () {
    function PreviewCheckboxComponent() {
        this.cls1 = true;
        this.cls2 = true;
        this.cls3 = true;
        this.checked = false;
        this.disabled = false;
        this.showDragBar = false;
        this.checkedChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    PreviewCheckboxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} event
     * @return {?}
     */
    PreviewCheckboxComponent.prototype.clickHandler = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        if (!this.disabled) {
            this.checked = !this.checked;
            this.checkedChange.emit({ checked: this.checked, id: this.id });
        }
    };
    PreviewCheckboxComponent.decorators = [
        { type: Component, args: [{
                    selector: "f-file-preview-checkbox",
                    template: "\r\n<span class=\"f-icon f-icon-drag-vertical upfile-drag-handle\" *ngIf=\"showDragBar\"></span>\r\n\r\n<div class=\"custom-control custom-checkbox f-checkradio-single  m-0\" >\r\n  <input class=\"custom-control-input\" type=\"checkbox\"  [checked]=\"checked\" />\r\n  <label class=\"custom-control-label\" (click)=\"clickHandler($event)\" (mousedown)=\"$event.stopPropagation()\"></label>\r\n</div>"
                }] }
    ];
    /** @nocollapse */
    PreviewCheckboxComponent.ctorParameters = function () { return []; };
    PreviewCheckboxComponent.propDecorators = {
        cls1: [{ type: HostBinding, args: ["class.align-middle",] }],
        cls2: [{ type: HostBinding, args: ["class.d-inline-flex",] }],
        cls3: [{ type: HostBinding, args: ["class.preview-checkbox",] }],
        checked: [{ type: Input }],
        id: [{ type: Input }],
        disabled: [{ type: Input }],
        showDragBar: [{ type: Input }],
        checkedChange: [{ type: Output }]
    };
    return PreviewCheckboxComponent;
}());
export { PreviewCheckboxComponent };
if (false) {
    /** @type {?} */
    PreviewCheckboxComponent.prototype.cls1;
    /** @type {?} */
    PreviewCheckboxComponent.prototype.cls2;
    /** @type {?} */
    PreviewCheckboxComponent.prototype.cls3;
    /** @type {?} */
    PreviewCheckboxComponent.prototype.checked;
    /** @type {?} */
    PreviewCheckboxComponent.prototype.id;
    /** @type {?} */
    PreviewCheckboxComponent.prototype.disabled;
    /** @type {?} */
    PreviewCheckboxComponent.prototype.showDragBar;
    /** @type {?} */
    PreviewCheckboxComponent.prototype.checkedChange;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJldmlldy1jaGVja2JveC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2V4dGVuZC1maWxlLXVwbG9hZC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3ByZXZpZXctY2hlY2tib3gvcHJldmlldy1jaGVja2JveC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUVULEtBQUssRUFDTCxNQUFNLEVBQ04sWUFBWSxFQUNaLFdBQVcsR0FDZCxNQUFNLGVBQWUsQ0FBQztBQUV2QjtJQWtCSTtRQVptQyxTQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ1gsU0FBSSxHQUFHLElBQUksQ0FBQztRQUNULFNBQUksR0FBRyxJQUFJLENBQUM7UUFFMUMsWUFBTyxHQUFZLEtBQUssQ0FBQztRQUV6QixhQUFRLEdBQVksS0FBSyxDQUFDO1FBRTFCLGdCQUFXLEdBQUcsS0FBSyxDQUFDO1FBRW5CLGtCQUFhLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUU3QixDQUFDOzs7O0lBRWpCLDJDQUFROzs7SUFBUixjQUFhLENBQUM7Ozs7O0lBRWQsK0NBQVk7Ozs7SUFBWixVQUFhLEtBQUs7UUFDZCxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDN0IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDbkU7SUFDTCxDQUFDOztnQkE1QkosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSx5QkFBeUI7b0JBQ25DLDJaQUFnRDtpQkFFbkQ7Ozs7O3VCQUVJLFdBQVcsU0FBQyxvQkFBb0I7dUJBQ2hDLFdBQVcsU0FBQyxxQkFBcUI7dUJBQ2pDLFdBQVcsU0FBQyx3QkFBd0I7MEJBRXBDLEtBQUs7cUJBQ0wsS0FBSzsyQkFDTCxLQUFLOzhCQUVMLEtBQUs7Z0NBRUwsTUFBTTs7SUFhWCwrQkFBQztDQUFBLEFBN0JELElBNkJDO1NBeEJZLHdCQUF3Qjs7O0lBQ2pDLHdDQUErQzs7SUFDL0Msd0NBQWdEOztJQUNoRCx3Q0FBbUQ7O0lBRW5ELDJDQUFrQzs7SUFDbEMsc0NBQW9COztJQUNwQiw0Q0FBbUM7O0lBRW5DLCtDQUE2Qjs7SUFFN0IsaURBQTZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICAgIENvbXBvbmVudCxcclxuICAgIE9uSW5pdCxcclxuICAgIElucHV0LFxyXG4gICAgT3V0cHV0LFxyXG4gICAgRXZlbnRFbWl0dGVyLFxyXG4gICAgSG9zdEJpbmRpbmcsXHJcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6IFwiZi1maWxlLXByZXZpZXctY2hlY2tib3hcIixcclxuICAgIHRlbXBsYXRlVXJsOiBcIi4vcHJldmlldy1jaGVja2JveC5jb21wb25lbnQuaHRtbFwiLFxyXG4gICAgc3R5bGVVcmxzOiBbXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIFByZXZpZXdDaGVja2JveENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgICBASG9zdEJpbmRpbmcoXCJjbGFzcy5hbGlnbi1taWRkbGVcIikgY2xzMSA9IHRydWU7XHJcbiAgICBASG9zdEJpbmRpbmcoXCJjbGFzcy5kLWlubGluZS1mbGV4XCIpIGNsczIgPSB0cnVlO1xyXG4gICAgQEhvc3RCaW5kaW5nKFwiY2xhc3MucHJldmlldy1jaGVja2JveFwiKSBjbHMzID0gdHJ1ZTtcclxuXHJcbiAgICBASW5wdXQoKSBjaGVja2VkOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBASW5wdXQoKSBpZDogc3RyaW5nO1xyXG4gICAgQElucHV0KCkgZGlzYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBASW5wdXQoKSBzaG93RHJhZ0JhciA9IGZhbHNlO1xyXG5cclxuICAgIEBPdXRwdXQoKSBjaGVja2VkQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkgeyB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7IH1cclxuXHJcbiAgICBjbGlja0hhbmRsZXIoZXZlbnQpIHtcclxuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICBpZiAoIXRoaXMuZGlzYWJsZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja2VkID0gIXRoaXMuY2hlY2tlZDtcclxuICAgICAgICAgICAgdGhpcy5jaGVja2VkQ2hhbmdlLmVtaXQoeyBjaGVja2VkOiB0aGlzLmNoZWNrZWQsIGlkOiB0aGlzLmlkIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=