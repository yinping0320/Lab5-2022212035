{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@farris/extend-file-upload/lib/service/f-file-upload-api.service.ts","ng://@farris/extend-file-upload/lib/model/f-file-upload.model.ts","ng://@farris/extend-file-upload/lib/locale.ts","ng://@farris/extend-file-upload/lib/utils/f-file.utils.ts","ng://@farris/extend-file-upload/lib/service/f-file-uploader.service.ts","ng://@farris/extend-file-upload/lib/service/f-file-upload-default.service.ts","ng://@farris/extend-file-upload/lib/directive/f-file-drop.directive.ts","ng://@farris/extend-file-upload/lib/directive/f-file-select.directive.ts","ng://@farris/extend-file-upload/lib/directive/f-file-preview.directive.ts","ng://@farris/extend-file-upload/lib/directive/f-file-upload.directive.ts","ng://@farris/extend-file-upload/lib/pipe/index.ts","ng://@farris/extend-file-upload/lib/components/view-image/f-file-view-image.component.ts","ng://@farris/extend-file-upload/lib/components/upload/f-file-upload.component.ts","ng://@farris/extend-file-upload/lib/components/preview/f-file-preview.component.ts","ng://@farris/extend-file-upload/lib/components/preview-checkbox/preview-checkbox.component.ts","ng://@farris/extend-file-upload/lib/components/multi-download-info/multi-download-info.component.ts","ng://@farris/extend-file-upload/lib/components/upload-and-preview/upload-and-preview.component.ts","ng://@farris/extend-file-upload/lib/components/upload-progress/upload-progress.component.ts","ng://@farris/extend-file-upload/lib/components/upload-and-preview/file-order-drag.directive.ts","ng://@farris/extend-file-upload/lib/f-file-upload.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","__spread","arguments","length","concat","FFileUploadAPIServiceToken","InjectionToken","FFileUploadAPIService","exConfig","_this","this","apiArray","config","upload","remove","commonAPI","type","url","timeout","headers","data","key","forEach","item","assign","combinUrl","prototype","typeUrl","getAPI","getAssignAPI","object","infoMap","removeAll","uploadAll","multipartUpload","Injectable","args","providedIn","Optional","Inject","UploadStatus","Queue","Uploading","Done","Cancelled","Remove","Error","FARRIS_UPLOADFILE_LOCALEDATA","en","uploadAndPreview","downloadTitle","downloadCount","ok","cancel","uploadSelectText","newName","filesCount","selectCount","download","delete","authMsg","nofiles","uploading","uploadSuccess","successed","supportType","maxSize","maxFileCount","maxCountShow","notAallowedChars","columns","name","size","createTime","state","action","tips","preview","edit","notedit","uploadService","failedSameName","failedType","failedName","failedCount","failedSize","failedEmpty","removed","cancelUpload","deleteSuccess","drop","select","back","orText","hasUploaded","delText","waitUpload","numFile","continueAdd","mutilUpload","selectAll","selected","modifyName","multiDownload","zh-CHS","zh-CHT","isObject","isArray","localSerStorage","deepCloneObject","src","target","v","humanizeBytes","bytes","Math","floor","log","parseFloat","pow","toFixed","generateId","random","toString","substring","makeUploadFile","file","index","fileIndex","id","form","FormData","progress","status","percentage","speed","speedHuman","startTime","endTime","eta","etaHuman","lastModifiedDate","Date","lastModified","sub","undefined","nativeFile","allMineTypes",".pdf",".gif",".png",".txt",".htm",".html",".jpe",".jpeg",".jpg",".js",".json",".pps",".ppt",".doc",".xml",".zip",".xlsx",".wps",".3gpp",".ac3",".asf",".au",".css",".csv",".dot",".dtd",".dwg",".dxf",".jp2",".mp2",".mp3",".mp4",".mpeg",".mpg",".mpp",".ogg",".pot",".rtf",".svf",".tif",".tiff",".wdb",".xhtml",".xlc",".xlm",".xls",".xlt",".xlw","findMineTypeBySuffix","suffix","changeUploadFileToFileExtend","files","result","preExtend","extend","extendStatus","extendHeaders","resultProp","tempProp","replace","getLocalState","localSer","setLocaleData","replaceStr","_i","getLocalStr","lanKey","replaceInfo","defaultLocalId","getValue","localStorage","getItem","split","reduce","obj","FFileUtils","FFileUploaderService","uploadServerSer","inject","allowedContentTypes","maxUploads","maxFileSize","concurrency","Number","POSITIVE_INFINITY","uploadedCount","notAllowedCharsInFileName","extendServerConfig","hasLocalSer","queue","serviceEvents","EventEmitter","get","LocaleService","uploadScheduler","Subject","subs","pipe","mergeMap","serverMethod","subscribe","uploadOutput","filter","queueItem","findIndex","emit","setOptions","options","prop","handleFiles","incomingFiles","allowedIncomingFiles","acc","checkFile","futureQueueLength","judgeResult","rejectedReason","allowed","rejectedFile","message","map","uploadFile","queuelength","isContentTypeAllowed","isNameAllowed","isFileSizeAllowed","notAllowedLen_1","tMssage_1","notAllowItem","curIndex","join","initInputEvents","input","event","_files","uploadFileIndex","id_1","splice","ids_1","tId","queueFiles","removeIndex","removeQueueFiles","setExtendServerConfig","extendSer","Observable","observer","ids","fileItem","finalize","closed","complete","output","err","reset","setContentTypes","contentTypes","find","allContentTypesAllowed","lastIndexOf","namesuffix","substr","toLowerCase","purName","indexOf","fileSize","UploadServerService","decorators","Injector","FFileUploadDefaultService","__","constructor","create","tslib_1.__extends","extendService","method","xhr","XMLHttpRequest","time","getTime","progressStartTime","addEventListener","lengthComputable","round","loaded","total","diff","ceil","secondsToHuman","onreadystatechange","readyState","DONE","speedAverage","responseStatus","response","JSON","parse","responseHeaders","parseResponseHeaders","getAllResponseHeaders","open","withCredentials","keys","setRequestHeader","bodyToSend","includeWebKitFormBoundary","append","fieldName","send","abort","sec","toISOString","httpHeaders","x","FFileDropDirective","elementRef","tDisabled","dropListener","dragOverListener","dragLeaveListener","dragEnterListener","onDropEnter","stopPropagation","preventDefault","defineProperty","unbindDragAndDropEvent","bindDragAndDropEvent","ngOnInit","_sub","el","nativeElement","uploadInput","disabled","ngOnDestroy","unsubscribe","onDrop","bind","onDragOver","onDragLeave","removeEventListener","dataTransfer","Directive","selector","ElementRef","Input","Output","FFileSelectDirective","changeListener","onChange","unbindEvent","bindEvent","FFilePreviewListTypeTemplateDirective","template","TemplateRef","FFilePreviewToolbarTemplateDirective","FFileUploadDirective","templateRef","FFileSizePipe","transform","tvalue","parseInt","Pipe","FFileDatePipe","dateSer","returnFormat","formatTo","DateTimeHelperService","FormatCellDataPipe","cfs","injector","localeId","column","rowData","rowIndex","settings","field","getRealDataValue","formatterFn","formatter","thousand","precision","format","fieldArray","curItemVal","k","pure","ColumnFormatService","UPLocalePipe","replaceVal","UPLocaleDefaultPipe","realValue","compareTxt","localeName","FFileViewImageComponent","maxHeight","maxWidth","cls","selfHeight","tFile","fileContent","createImageByCanvas","changeImageSize","originWidth","originHeight","targetWidth","targetHeight","width","height","reader","FileReader","tImage","Image","canvas","context","getContext","onload","imgSize","clearRect","drawImage","ev","onerror","readAsDataURL","Component","HostBinding","ViewChild","FFileUploadComponent","uploadAPISer","fileUploaderSer","notifyService","ngZone","enableImagePreview","uploadImmediately","uploadedThenHide","enableSliceUpload","chunkSize","tVisible","needReset","enableDrop","dropText","enableSelect","selectText","multiple","widthThreshold","fUploadDoneEvent","fUploadRemovedEvent","selfUploadOpts","showAppendPanel","showLoading","visible","uploadSelectInput","uploadDragInput","localeService","fFileUploadDir","uploadOpts","computeWidthThreshold","ngAfterViewInit","triggerFileSelect","fileUpload","click","selectUploadOutput","uploadOutputHandler","dropUploadOutput","startUpload","updateFilesState","hideAfterLoaded","allFileUploaded","fileOutput","showNotify","notifyType","msg","eventType","startFiles","extendDatas","inputUploadEventEmit","startUploadAll","setTimeout","removelAllUpload","removeFile","formateBytes","isImage","judgeContentTypeLimit","judegeFileSizeLimit","appendNewFiles","closeAppendPanel","fileDropUpload","runOutsideAngular","self","assistEl","fFileUploadAssist","parentElement","classList","providers","animations","trigger","style","opacity","transition","animate","NotifyService","NgZone","ContentChild","FFilePreviewComponent","cd","readonly","_defaultItemCls","enableMulti","itemCls","headerCls","canRename","defaultRename","enableCardAreaResponse","showRenameInput","_fileInfos","filePreviewEvent","fileDownloadEvent","multiSelectedEvent","fileRemoveEvent","multiSelected","selectAllBtnChecked","listTypeTemplate","val","formatDatas","ngOnChanges","changes","formatValue","filePreviewHandler","fileInfo","stopImmediatePropagation","fileDownloadHandler","fileInfos","fileMultiDownloadHandler","rename","multiRenameRef","multiSelectChange","hasInArray","findInArray","fileRemoveHandler","getFileTypeClassName","fileName","clsName","lastDotIndex","fileSuffix","toLocaleLowerCase","hasFileName","selectOrCancelAllHandler","checked","detectChanges","toggleRenameInput","encapsulation","ViewEncapsulation","None","ChangeDetectorRef","read","PreviewCheckboxComponent","cls1","cls2","cls3","showDragBar","checkedChange","clickHandler","MultiDownloadInfoComponent","_downloadInfos","_downloadName","fileTypeCls","downloadName","getName","getDownloadName","filename","DocModeType","Normal","RevisionOnly","Admin","UploadAndPreviewComponent","modalSer","_this_1","contentFill","enableOrder","orderField","editfile","_docMode","_renameFromDialog","_previewColumnsFields","_presetPreviewColumns","title","_previewColumns","previewDateFormat","previewReadonly","previewVisible","previewEnableMulti","previewShowType","previewEnableRename","previewDefaultRename","previewShowComments","previewModeless","fPreviewMultiSelectedEvent","fSelectedEvent","previewSelectAllBtnChecked","previewMultiSelected","previewCurrent","uploadDisabled","tUploadVisible","uploadNeedReset","uploadEnableSelect","uploadEnableMulti","noDownload","noPreview","noDelete","enableSorting","afterOrdered","uploadAndPreviewTableHeader","uploadAndPreviewTableHeaderCreated$","ro","perfixStr","includes","valueToFind","fromIndex","TypeError","len","y","max","abs","isNaN","WEBAPI_PREFIX_TOKEN","uploadFiles","uploadReset","ResizeObserver","setColumnWidth","col","dateHlp","getFieldsFromColumns","formatPreviewDatas","enableRename","tNotAllowed","th","observe","disconnect","uploadVisible","previewColumns","previewUpdateRefresh","sort","sortPreviewData","newFormatValue","tslib_1.__spread","a","oDate1","oDate2","getColumnTemplate","columnInfo","previewMultiSelectChange","fileSelected","newAddFiles","getUploadProgress","uploadInfo","tPercentage","getUploadFileSizeProgress","showDownload","showComments","modeless","multiFileRemoveHandler","self_1","dlgRef_1","show","showMaxButton","initialState","downloadInfos","showButtons","buttons","text","handle","close","contentRef","showPreviewStateColumn","onOrderFileDrop","$event","removedIndex","addedIndex","removedItem","payload","_a","apply","newOrderItems","tableWidth_1","offsetWidth","cols_1","querySelectorAll","trs","uploadAndPreviewTbodyRef","flexDirection","display","from","tr","tds","querySelector","editFileHandler","window","docMode","canEdit","extendName","getPreviewCtx","previewIndex","colIndex","curRowData","getRowData","previewSettings","extendInfos","canUpdateSelfColumn","BsModalService","UploadProgressComponent","showInfo","percent","cachedStatus","inferredStatus","successPercent","isNotNil","smoothDnd","constants","wrapperClass","animationClass","SmoothDndForVisible","dropHandler","dropHandlers","reactDropHandler","handler","wrapChild","UploadFileOrderDragDirective","ngzone","render","enableDrag","behaviour","dragHandleSelector","dropPlaceholder","className","getGhostParent","document","body","getChildPayload","shouldAcceptDrop","sourceContainerOptions","onDropReady","dropResult","run","onDragEnter","onDragStart","info","onDragEnd","initDnD","disposeDnd","container","dispose","Renderer2","FFileUploadModule","forRoot","uploadSer","ngModule","provide","useValue","useClass","NgModule","declarations","exports","imports","CommonModule","NotifyModule","MessagerModule","FAreaResponseModule","FarrisCommonModule","DateHelperModule","ModalModule","LocaleModule","DataColumnModule","entryComponents"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable, Optional, Inject, InjectionToken } from '@angular/core';\r\nimport { UploadInput, UploadConfig } from '../model/index';\r\n\r\n\r\nexport interface FFileUploadServerConfig extends UploadConfig {\r\n    upload?: UploadInput | null;\r\n    remove?: UploadInput | null;\r\n}\r\n\r\nexport const FFileUploadAPIServiceToken = new InjectionToken<FFileUploadServerConfig>('MFFileUploadServerConfig');\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class FFileUploadAPIService {\r\n    private config: FFileUploadServerConfig;\r\n    private commonAPI: UploadInput;\r\n    private apiArray = ['upload','remove'];\r\n    constructor(@Optional() @Inject(FFileUploadAPIServiceToken) exConfig: FFileUploadServerConfig) {\r\n\r\n        this.config = { upload: null,  remove: null };\r\n        this.commonAPI = { type: 'config', url: '', timeout: 0, headers: null, data: {} };\r\n        if (exConfig) {\r\n            for (const key in this.commonAPI) {\r\n                if (exConfig.hasOwnProperty(key)) {\r\n                    this.commonAPI[key] = exConfig[key];\r\n                }\r\n            }\r\n        }\r\n        this.apiArray.forEach(item => {\r\n            this.config[item] = Object.assign({}, this.commonAPI);\r\n            if (exConfig && exConfig.hasOwnProperty(item)) {\r\n                if (exConfig[item].hasOwnProperty('url')) {\r\n                    this.config[item] = Object.assign({}, this.config[item], exConfig[item], { url: this.combinUrl(exConfig[item].url) });\r\n                }\r\n            }\r\n        });\r\n\r\n        // if (exConfig) {\r\n        //     Object.assign(this.config, exConfig);\r\n        // }\r\n    }\r\n    private combinUrl(typeUrl) {\r\n        let result = typeUrl;\r\n        result = this.commonAPI.url + typeUrl;\r\n        return result;\r\n    }\r\n    /**\r\n     * 获取API定义\r\n     */\r\n    getAPI() {\r\n        return this.config;\r\n    }\r\n    /**\r\n     * \r\n     * @param type \r\n     * @param object \r\n     */\r\n    getAssignAPI(type, object) {\r\n        // removeAll,uploadAll 用于内部传递使用，应当传递的是remove和upload对应的参数\r\n        // 通过设置对应关系\r\n        const infoMap = { 'removeAll': 'remove', 'uploadAll': 'upload','multipartUpload':'upload' };\r\n        if(infoMap.hasOwnProperty(type)){\r\n            type=infoMap[type];\r\n        }\r\n        if (this.config[type] && object) {\r\n            return Object.assign({}, this.config[type], object);\r\n        }\r\n        if (this.config[type]) {\r\n            return this.config[type];\r\n        }\r\n        if (object) {\r\n            return object;\r\n        }\r\n        return null;\r\n\r\n    }\r\n}\r\n","import { Subscription, Observable } from 'rxjs';\r\n\r\nexport interface UploaderOptions {\r\n    concurrency?: number;\r\n    allowedContentTypes?: string[];\r\n    maxUploads?: number;\r\n    maxFileSize?: number;//MB为单位\r\n    uploadedCount?: number;\r\n}\r\n\r\nexport interface BlobFile extends Blob {\r\n    name: string;\r\n}\r\n\r\nexport enum UploadStatus {\r\n    Queue,\r\n    Uploading,\r\n    Done,\r\n    Cancelled,\r\n    Remove,// 正在删除\r\n    Error\r\n}\r\n\r\nexport interface UploadProgress {\r\n    status: UploadStatus;\r\n    data?: {\r\n        percentage: number;\r\n        speed?: number;\r\n        speedHuman?: string;\r\n        startTime?: number | null;\r\n        endTime?: number | null;\r\n        eta?: number | null;\r\n        etaHuman?: string | null;\r\n    };\r\n}\r\nexport interface FUploadFileExtend {\r\n    id: string;\r\n    name: string;\r\n    disabled?: boolean;\r\n    checked?: boolean;\r\n    size?: number | undefined;//文件大小\r\n    createTime?: string | undefined;//创建日期\r\n    type?: string;\r\n    extend?: any | null;//记录返回数据\r\n    extendStatus?: number;\r\n    extendHeaders?: { [key: string]: string } | null;\r\n    showDownload?: boolean;\r\n    showComments?:boolean;// 预览是否显示修订记录\r\n    modeless?:boolean;//预览是否在非模态框\r\n}\r\n\r\nexport interface UploadFile {\r\n    id: string;\r\n    fileIndex: number;\r\n    lastModifiedDate: Date;\r\n    name: string;\r\n    size: number;\r\n    type: string;\r\n    form: FormData;\r\n    progress: UploadProgress;//\r\n    response?: any;//记录返回数据\r\n    responseStatus?: number;\r\n    sub?: Subscription | any;\r\n    nativeFile?: File;\r\n    responseHeaders?: { [key: string]: string };\r\n}\r\n\r\n\r\nexport interface UploadOutput {\r\n    type: 'addedToQueue' | 'allAddedToQueue' | 'uploading' | 'done' | 'start' | 'cancelled' | 'dragOver'\r\n    | 'dragOut' | 'drop' | 'removed' | 'allRemoved' | 'rejected' | 'allDone' | 'allStart' | 'allCancelled' | 'error';\r\n    file?: UploadFile;\r\n    nativeFile?: File;\r\n    message?: String;\r\n    files?: UploadFile[];\r\n}\r\nexport interface UploadConfig {\r\n    url?: string;\r\n    method?: string;// POST，GET \r\n    id?: string;\r\n    fieldName?: string;\r\n    fileIndex?: number;\r\n    file?: UploadFile;\r\n    data?: {\r\n        [key: string]: any,\r\n        extProperty?: DocMetaProperty | null //\r\n    };\r\n    headers?: { [key: string]: string } | null;\r\n    includeWebKitFormBoundary?: boolean; // If false, only the file is send trough xhr.send (WebKitFormBoundary is omit)\r\n    withCredentials?: boolean;\r\n    timeout?: number;// 暂不支持\r\n}\r\n\r\nexport interface UploadInput extends UploadConfig {\r\n    type: 'upload' | 'uploadAll' | 'cancel' | 'cancelAll' | 'remove' | 'removeAll' | 'config' | 'hide' | 'multipartUpload' | 'sliceUpload';\r\n    /** 分块上传时，每块大小默认为 1M */\r\n    chunkSize?: number\r\n}\r\n\r\n\r\nexport abstract class UploadServerService {\r\n    constructor() {\r\n\r\n    }\r\n    abstract upload(files: UploadFile[], event: UploadInput, extendService: any): Observable<any>;\r\n    abstract remove(files: UploadFile[], event: UploadInput, extendService: any): Observable<any>;\r\n    abstract multipartUpload(file: UploadFile, event: UploadInput, extendService: any): Observable<any>;\r\n}\r\n\r\nexport interface DocMetaProperty {\r\n    extProperties1?: string;\r\n    extProperties2?: string;\r\n    extProperties3?: string;\r\n    extProperties4?: string;\r\n    extProperties5?: string;\r\n}\r\n\r\n","export const FARRIS_UPLOADFILE_LOCALEDATA = {\r\n    en: {\r\n        uploadAndPreview: {\r\n            downloadTitle: 'Download Files',\r\n            downloadCount: '{0} files in total.',\r\n            ok: 'Ok',\r\n            cancel: 'Cancel',\r\n            uploadSelectText: 'Select Files',\r\n            newName: 'New name',\r\n            filesCount: '<span class=\"count\">{0}</span> files in total.',\r\n            selectCount: '（<span class=\"count-selected\">{0}</span> files selected.）',\r\n            download: 'Download',\r\n            delete: 'Delete',\r\n            authMsg: 'You are not authorized to operate attachments',\r\n            nofiles: 'No attachment information',\r\n            uploading: 'Uploading...',\r\n            uploadSuccess: 'Upload succeeded',\r\n            successed: 'Uploaded',\r\n            supportType: 'Support Type',\r\n            maxSize: 'Maximum size of a single file',\r\n            maxFileCount: 'Maximum number of files',\r\n            maxCountShow:' files',\r\n            notAallowedChars: 'Characters not allowed in attachment names',\r\n            columns: {\r\n                name: 'File name',\r\n                size: 'Size',\r\n                createTime: 'Date',\r\n                state: 'Status',\r\n                action: 'Action'\r\n            },\r\n            tips: {\r\n                download: 'Download',\r\n                preview: 'Preview',\r\n                remove: 'Delete',\r\n                edit: 'Edit',\r\n                notedit: 'This type of file does not support online editing'\r\n            }\r\n        },\r\n        uploadService: {\r\n            failedSameName: 'Upload failed: a file with the same name already exists',\r\n            failedType: 'Upload failed: only documents of type {0} are allowed to be uploaded',\r\n            failedName: 'Upload failed: {0} characters are not allowed in the attachment name',\r\n            failedCount: 'Upload failed: total number of files exceeds {0} limit',\r\n            failedSize: 'Upload failed: file size exceeds {0}MB limit',\r\n            failedEmpty: 'Upload failed: file not allowed to be empty',\r\n            removed: 'Deleted',                \r\n            cancelUpload:'Uploaded Canceled',\r\n            deleteSuccess:'Delete Successful'\r\n        },\r\n        upload: {\r\n            drop: 'Drag File Here',\r\n            select: 'Click to upload',\r\n            back: 'Return',\r\n            orText: 'or',\r\n            hasUploaded: 'Uploaded',\r\n            delText: 'Delete',\r\n            uploading: 'Uploading',\r\n            waitUpload: 'Wait',\r\n            upload: 'Upload',\r\n            remove: 'Remove',\r\n            numFile: 'files',\r\n            continueAdd: 'Continue selecting',\r\n            mutilUpload: 'Batch upload',\r\n            cancelUpload: 'Cancel upload'\r\n        },\r\n        preview: {\r\n            selectAll: 'Select All',\r\n            selected: 'Selected',\r\n            modifyName: 'Modify Name',\r\n            multiDownload: 'Batch Download'\r\n        }\r\n    },\r\n    'zh-CHS': {\r\n        uploadAndPreview: {\r\n            downloadTitle: '附件下载',\r\n            downloadCount: '等{0}个文件',\r\n            ok: '确定',\r\n            cancel: '取消',\r\n            newName: '文件名',\r\n            uploadSelectText: '上传附件',\r\n            filesCount: '共<span class=\"count\">{0}</span>个附件',\r\n            selectCount: '（已选<span class=\"count-selected\">{0}</span>个）',\r\n            download: '下载',\r\n            delete: '删除',\r\n            authMsg: '您无权操作附件',\r\n            nofiles: '无附件信息',\r\n            uploading: '正在上传...',\r\n            uploadSuccess: '上传成功',\r\n            successed: '已上传',\r\n            supportType: '支持类型',\r\n            maxSize: '单个文件限制',\r\n            maxFileCount: '文件总数限制',\r\n            maxCountShow:'个',\r\n            notAallowedChars: '附件名称中不允许包含的字符',\r\n            columns: {\r\n                name: '文件名',\r\n                size: '大小',\r\n                createTime: '日期',\r\n                state: '状态',\r\n                action: '操作'\r\n            },\r\n            tips: {\r\n                download: '下载',\r\n                preview: '预览',\r\n                remove: '删除',\r\n                edit: '编辑',\r\n                notedit: '此类型文件不支持在线编辑'\r\n            }\r\n        },\r\n        uploadService: {\r\n            failedSameName: '上传失败：已存在同名文件',\r\n            failedType: '上传失败：只允许上传{0}类型的文档',\r\n            failedName: '上传失败：附件名称中不允许{0}这些字符',\r\n            failedCount: '上传失败：文件总个数超出{0}限制',\r\n            failedSize: '上传失败：单个文件大小超出{0}MB的限制',\r\n            failedEmpty: '上传失败：不允许文件为空',\r\n            removed: '被删除',\r\n            cancelUpload:'已取消附件上传',\r\n            deleteSuccess:'删除附件成功'\r\n        },\r\n        upload: {\r\n            drop: '可将文件拖拽此处',\r\n            select: '点击上传',\r\n            back: '返回',\r\n            orText: '或',\r\n            hasUploaded: '已上传',\r\n            delText: '删除',\r\n            uploading: '上传中',\r\n            waitUpload: '待上传',\r\n            upload: '上传',\r\n            remove: '移除',\r\n            numFile: '个文件',\r\n            continueAdd: '继续添加',\r\n            mutilUpload: '批量上传',\r\n            cancelUpload: '取消上传'\r\n        },\r\n        preview: {\r\n            selectAll: '全选',\r\n            selected: '已选',\r\n            modifyName: '修改名称',\r\n            multiDownload: '批量下载'\r\n        }\r\n    },\r\n    'zh-CHT': {\r\n        uploadAndPreview: {\r\n            downloadTitle: '附件下載',\r\n            downloadCount: '等{0}個文件',\r\n            ok: '確定',\r\n            cancel: '取消',\r\n            newName: '文件名',\r\n            uploadSelectText: '上傳附件',\r\n            filesCount: '共<span class=\"count\">{0}</span>個附件',\r\n            selectCount: '（已選<span class=\"count-selected\">{0}</span>個）',\r\n            download: '下載',\r\n            delete: '刪除',\r\n            authMsg: '您無權操作附件',\r\n            nofiles: '無附件信息',\r\n            uploading: '正在上傳...',\r\n            uploadSuccess: '上傳成功',\r\n            successed: '已上傳',\r\n            supportType: '支持類型',\r\n            maxSize: '單個文件限制',\r\n            maxFileCount: '文件總數限制',\r\n            maxCountShow:'個',\r\n            notAallowedChars: '附件名稱中不允許包含的字元',\r\n            columns: {\r\n                name: '文件名',\r\n                size: '大小',\r\n                createTime: '日期',\r\n                state: '狀態',\r\n                action: '操作'\r\n            },\r\n            tips: {\r\n                download: '下載',\r\n                preview: '預覽',\r\n                remove: '删除',\r\n                edit: '編輯',\r\n                notedit: '此類型文件不支持在線編輯'\r\n            }\r\n        },\r\n        uploadService: {\r\n            failedSameName: '上傳失敗：已存在同名檔案',\r\n            failedType: '上傳失敗：只允許上傳{0}類型的檔案',\r\n            failedName: '上傳失敗：附件名稱中不允許{0}這些字元',\r\n            failedCount: '上傳失敗：檔案總個數超出{0}限制',\r\n            failedSize: '上傳失敗：單個文件大小超出 {0}mb 的限制',\r\n            failedEmpty: '上傳失敗：不允許檔案為空',\r\n            removed: '被删除',            \r\n            cancelUpload:'已取消附件上傳',\r\n            deleteSuccess:'删除附件成功'\r\n        },\r\n        upload: {\r\n            drop: '可將檔案拖拽此處',\r\n            select: '點擊上傳',\r\n            back: '返回',\r\n            orText: '或',\r\n            hasUploaded: '已上傳',\r\n            delText: '删除',\r\n            uploading: '上傳中',\r\n            waitUpload: '待上傳',\r\n            upload: '上傳',\r\n            remove: '移除',\r\n            numFile: '個檔案',\r\n            continueAdd: '繼續添加',\r\n            mutilUpload: '批量上傳',\r\n            cancelUpload: '取消上傳'\r\n        },\r\n\r\n        preview: {\r\n            selectAll: '全選',\r\n            selected: '已選',\r\n            modifyName: '修改名稱',\r\n            multiDownload: '批量下載'\r\n\r\n        }\r\n    }\r\n}","import { LocaleService } from '@farris/ui-locale';\r\nimport { UploadFile, UploadStatus, FUploadFileExtend } from '../model';\r\nimport { FARRIS_UPLOADFILE_LOCALEDATA } from '../locale';\r\nconst isObject = value => typeof value === 'object' && value !== null;\r\nconst isArray = value => Array.isArray(value);\r\nlet localSerStorage=null;\r\n// 暂时用不到\r\nconst deepCloneObject = (src) => {\r\n    if (!isObject(src)) return src;\r\n    const target = isArray(src) ? [] : {};\r\n    for (const key in src) {\r\n        if (!src.hasOwnProperty(key)) continue;\r\n        const v = src[key];\r\n        target[key] = v && isObject(v) ? deepCloneObject(v) : v;\r\n    }\r\n    return target;\r\n}\r\n\r\nconst humanizeBytes = (bytes: number): string => {\r\n    if (bytes === 0) {\r\n        return '0 Byte';\r\n    }\r\n\r\n    const k = 1024;\r\n    const sizes: string[] = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];\r\n    const i: number = Math.floor(Math.log(bytes) / Math.log(k));\r\n\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n}\r\nconst generateId = (): string => {\r\n    return Math.random().toString(36).substring(7);\r\n}\r\nconst makeUploadFile = (file: File, index: number): UploadFile => {\r\n    return {\r\n        fileIndex: index,\r\n        id: generateId(),\r\n        name: file.name,\r\n        size: file.size,\r\n        type: file.type,\r\n        form: new FormData(),\r\n        progress: {\r\n            status: UploadStatus.Queue,\r\n            data: {\r\n                percentage: 0,\r\n                speed: 0,\r\n                speedHuman: `${humanizeBytes(0)}/s`,\r\n                startTime: null,\r\n                endTime: null,\r\n                eta: null,\r\n                etaHuman: null\r\n            }\r\n        },\r\n        lastModifiedDate: new Date(file.lastModified),\r\n        sub: undefined,\r\n        nativeFile: file\r\n    };\r\n}\r\n\r\nconst allMineTypes = {\r\n    '.pdf': 'application/pdf',\r\n    '.gif': 'image/gif',\r\n    '.png': 'image/png',\r\n    '.txt': 'text/plain',\r\n    '.htm': 'text/html',\r\n    '.html': 'text/html',\r\n    '.jpe': 'image/jpeg',\r\n    '.jpeg': 'image/jpeg',\r\n    '.jpg': 'image/jpeg',\r\n    '.js': 'text/javascript,application/javascript',\r\n    '.json': 'application/json',\r\n    '.pps': 'application/vnd.ms-powerpoint',\r\n    '.ppt': 'application/vnd.ms-powerpoint',\r\n    '.doc': 'application/msword',\r\n    '.xml': 'text/xml,application/xml',\r\n    '.zip': 'aplication/zip',\r\n    '.xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n    '.wps': 'application/vnd.ms-works',\r\n    '.3gpp': 'audio/3gpp, video/3gpp',\r\n    '.ac3': 'audio/ac3',\r\n    '.asf': 'allpication/vnd.ms-asf',\r\n    '.au': 'audio/basic',\r\n    '.css': 'text/css',\r\n    '.csv': 'text/csv',\r\n    '.dot': 'application/msword',\r\n    '.dtd': 'application/xml-dtd',\r\n    '.dwg': 'image/vnd.dwg',\r\n    '.dxf': 'image/vnd.dxf',\r\n    '.jp2': 'image/jp2',\r\n    '.mp2': 'audio/mpeg, video/mpeg',\r\n    '.mp3': ' audio/mpeg',\r\n    '.mp4': 'audio/mp4, video/mp4',\r\n    '.mpeg': 'video/mpeg',\r\n    '.mpg': 'video/mpeg',\r\n    '.mpp': 'application/vnd.ms-project',\r\n    '.ogg': 'application/ogg, audio/ogg',\r\n    '.pot': 'application/vnd.ms-powerpoint',\r\n    '.rtf': 'application/rtf,text/rtf',\r\n    '.svf': 'image/vnd.svf',\r\n    '.tif': 'image/tiff',\r\n    '.tiff': 'image/tiff',\r\n    '.wdb': 'application/vnd.ms-works',\r\n    '.xhtml': 'application/xhtml+xml',\r\n    '.xlc': 'application/vnd.ms-excel',\r\n    '.xlm': 'application/vnd.ms-excel',\r\n    '.xls': 'application/vnd.ms-excel',\r\n    '.xlt': 'application/vnd.ms-excel',\r\n    '.xlw': 'application/vnd.ms-excel'\r\n};\r\nconst findMineTypeBySuffix = (suffix: string): string => {\r\n    if (allMineTypes.hasOwnProperty(suffix)) {\r\n        return allMineTypes[suffix];\r\n    }\r\n    return '';\r\n}\r\n\r\nconst changeUploadFileToFileExtend = (files: UploadFile[]): FUploadFileExtend[] => {\r\n    // 如果是数组\r\n    let result=[];\r\n    files.forEach(file=>{\r\n        let preExtend = { id: '', name: '', size: 0, type: '', extend: null, extendStatus: 0, extendHeaders: null } as FUploadFileExtend;\r\n        for (let resultProp in preExtend) {\r\n            let tempProp = resultProp.replace('extend', 'response');\r\n            if (file.hasOwnProperty(tempProp)) {\r\n                preExtend[resultProp] = file[tempProp];\r\n            }\r\n        }\r\n        result.push(preExtend);\r\n    });\r\n    \r\n    return result;\r\n}\r\n/**\r\n * 标记是否已处理多语言\r\n * 解决\r\n * 1、f-file-uploader.service.ts和f-file-preview.component.ts 构造函数中没有引入多语言，\r\n * 要支持多语言就必须重新编译的问题\r\n * 2、引入通用处理的类，在类中进行保存服务\r\n */\r\nconst getLocalState=(localSer:LocaleService)=>{\r\n    if(localSerStorage){\r\n        return true;\r\n    }\r\n    if(localSer&&!localSerStorage){\r\n            localSer.setLocaleData(FARRIS_UPLOADFILE_LOCALEDATA);\r\n            localSerStorage=localSer;\r\n            return true;\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * 替换字符串\r\n * @param value \r\n * @param args \r\n * @returns \r\n */\r\nconst  replaceStr=(value: any, ...args: any[]):string =>{\r\n    args.forEach((v, i) => {\r\n        value = value.replace(`{${i}}`, v);\r\n    });\r\n    return value;\r\n}\r\n/**\r\n * 获取多语言数据\r\n * 某些组件没有重新生成，要支持多语言\r\n * @param key \r\n * @param replaceInfo \r\n */\r\nconst getLocalStr=(lanKey:string,replaceInfo:Array<string>=[])=>{\r\n    let result=\"\";\r\n    let defaultLocalId='zh-CHS';\r\n    if(localSerStorage){\r\n        result=localSerStorage.getValue(lanKey);\r\n    }else{\r\n        defaultLocalId= localStorage.getItem('languageCode')||'zh-CHS';\r\n    }\r\n    if(!result){\r\n    //说明前面的语言环境没有取到\r\n        result = lanKey.split('.').reduce((obj, key) => {\r\n            if (obj) {\r\n                return obj[key];\r\n            } else {\r\n                return null;\r\n            }\r\n        }, FARRIS_UPLOADFILE_LOCALEDATA[defaultLocalId]);\r\n    }\r\n    if(result&&replaceInfo.length>0){\r\n        return replaceStr(result,replaceInfo);\r\n    }\r\n    return result;\r\n}\r\n\r\n\r\nexport const FFileUtils = {\r\n    isObject,\r\n    isArray,\r\n    deepCloneObject,\r\n    humanizeBytes,\r\n    makeUploadFile,\r\n    findMineTypeBySuffix,\r\n    changeUploadFileToFileExtend,\r\n    getLocalState,\r\n    getLocalStr\r\n}","import { EventEmitter, Injector, Optional } from \"@angular/core\";\r\nimport { Observable, Subject, Subscription, of } from \"rxjs\";\r\nimport { mergeMap, finalize } from \"rxjs/operators\";\r\nimport { FFileUtils } from \"../utils/index\";\r\nimport {\r\n    UploadFile,\r\n    UploadOutput,\r\n    UploadInput,\r\n    UploadStatus,\r\n    BlobFile,\r\n    UploadServerService,\r\n    UploaderOptions,\r\n} from \"../model/index\";\r\nimport { LocaleService } from \"@farris/ui-locale\";\r\nimport { FARRIS_UPLOADFILE_LOCALEDATA } from \"../locale\";\r\n\r\nexport class FFileUploaderService {\r\n    queue: UploadFile[];\r\n    serviceEvents: EventEmitter<UploadOutput>;\r\n    uploadScheduler: Subject<{\r\n        file: UploadFile;\r\n        event: UploadInput;\r\n        files?: UploadFile[];\r\n    }>;\r\n    subs: { id: string; sub: Subscription; ids?: string[] }[];\r\n    allowedContentTypes: string[] = [\"*\"];\r\n    //默认不限制,0代表不限制 Number.POSITIVE_INFINITY\r\n    maxUploads: number = 0;\r\n    /** 单位M，默认是12M,0代表不限制 */\r\n    maxFileSize: number = 12;\r\n    concurrency: number = Number.POSITIVE_INFINITY;\r\n    uploadedCount: number = 0;\r\n    // 不允许名称中包含特殊字符\r\n    notAllowedCharsInFileName=[];\r\n    private extendServerConfig = null;\r\n    private hasLocalSer=false;\r\n    constructor(@Optional() private uploadServerSer: UploadServerService,@Optional() private inject:Injector ) {\r\n        this.queue = [];\r\n        this.serviceEvents = new EventEmitter<UploadOutput>();\r\n        // 看是否多语言服务已更新\r\n        this.hasLocalSer=FFileUtils.getLocalState(null);\r\n        // 为多语言服务赋值\r\n        if(this.inject&&!this.hasLocalSer){\r\n           this.hasLocalSer=FFileUtils.getLocalState(this.inject.get(LocaleService));\r\n        }\r\n        this.uploadScheduler = new Subject();\r\n        this.subs = [];      \r\n        this.uploadScheduler\r\n            .pipe(\r\n                mergeMap((upload) => {\r\n                    return this.serverMethod(upload);\r\n                }, this.concurrency)\r\n            )\r\n            .subscribe((uploadOutput) => {\r\n                // if (uploadOutput.type == 'removed' || uploadOutput.type == 'done') {\r\n                //   // 删除或者done移除\r\n                //   const subIndex = this.subs.findIndex(sub => sub.id === uploadOutput.file.id);\r\n                //   if (subIndex > -1 && this.subs[subIndex].sub) {\r\n                //     this.subs[subIndex].sub.unsubscribe();\r\n                //   }\r\n                //   this.subs.splice(subIndex, 1);\r\n                // }\r\n                if (uploadOutput.type == \"removed\") {\r\n                    // 事件中返回的都是\r\n                    this.queue = this.queue.filter(\r\n                        (item) => item.progress.status !== UploadStatus.Remove\r\n                    );\r\n                    if (!uploadOutput.hasOwnProperty(\"message\")) {\r\n                        uploadOutput[\"message\"] =FFileUtils.getLocalStr(\"uploadService.removed\");\r\n                    }\r\n                }\r\n                if (uploadOutput.type == \"error\") {\r\n                    // 上传失败的附件移除\r\n                    this.queue = this.queue.filter((queueItem) => {\r\n                        return (\r\n                            uploadOutput.files.findIndex((item) => queueItem.id == item.id) <\r\n                            0\r\n                        );\r\n                    });\r\n                }\r\n                this.serviceEvents.emit(uploadOutput);\r\n            });\r\n    }\r\n    setOptions(options: UploaderOptions) {\r\n        // 重置文件大小、类型、个数限制\r\n        if (options) {\r\n            for (let prop in options) {\r\n                this[prop] = options[prop];\r\n            }\r\n        }\r\n    }\r\n    handleFiles(incomingFiles: FileList): void {\r\n        const allowedIncomingFiles: File[] = [].reduce.call(\r\n            incomingFiles,\r\n            (acc: File[], checkFile: File, i: number) => {\r\n                const futureQueueLength = acc.length + this.queue.length + 1;\r\n                let judgeResult = this.rejectedReason(\r\n                    checkFile.name,\r\n                    checkFile.type,\r\n                    futureQueueLength,\r\n                    checkFile.size\r\n                );\r\n                if (judgeResult.allowed) {\r\n                    acc = acc.concat(checkFile);\r\n                } else {\r\n                    // 不符合当前文件类型或者内容超出限制，抛出事件\r\n                    const rejectedFile: UploadFile = FFileUtils.makeUploadFile(\r\n                        checkFile,\r\n                        i\r\n                    );\r\n                    this.serviceEvents.emit({\r\n                        type: \"rejected\",\r\n                        file: rejectedFile,\r\n                        message: judgeResult.message,\r\n                    });\r\n                }\r\n                return acc;\r\n            },\r\n            []\r\n        );\r\n\r\n        // 构造文件结构，并单个抛出事件\r\n        [].map.call(allowedIncomingFiles, (file: File, i: number) => {\r\n            const uploadFile: UploadFile = FFileUtils.makeUploadFile(file, i);\r\n            this.queue.push(uploadFile);\r\n            this.serviceEvents.emit({ type: \"addedToQueue\", file: uploadFile });\r\n        });\r\n\r\n        // 所有的文件都已经添加，抛出事件\r\n        this.serviceEvents.emit({ type: \"allAddedToQueue\" });\r\n    }\r\n    private rejectedReason(name, type, queuelength, size) {\r\n        let allowed = false;\r\n        let message = \"\";\r\n        // 已存在同名文件\r\n        let findDuplicateIndex = this.queue.findIndex((file) => file.name == name);\r\n        if (findDuplicateIndex > -1) {\r\n            message =FFileUtils.getLocalStr(\"uploadService.failedSameName\");\r\n        } else if (!this.isContentTypeAllowed(name)) {\r\n            message =FFileUtils.getLocalStr(\"uploadService.failedType\",[this.allowedContentTypes.join(\",\")]);\r\n        } else if(!this.isNameAllowed(name)){\r\n            let notAllowedLen=this.notAllowedCharsInFileName.length;\r\n            let tMssage='';\r\n            this.notAllowedCharsInFileName.map((notAllowItem,curIndex)=>{\r\n                tMssage +=`<b style=\"display:inline-block;margin:0 4px;min-width:8px;text-align: center;\">${notAllowItem?notAllowItem:\"&nbsp;\"}</b>`;\r\n                if(curIndex!=notAllowedLen-1){\r\n                    tMssage+=\",\"\r\n                }\r\n            });\r\n            message=FFileUtils.getLocalStr(\"uploadService.failedName\",[tMssage]);\r\n        }\r\n        else if (\r\n            this.maxUploads > 0 &&\r\n            (this.maxUploads <= this.uploadedCount ||\r\n                queuelength + this.uploadedCount > this.maxUploads)\r\n        ) {\r\n            message =FFileUtils.getLocalStr(\"uploadService.failedCount\",[this.maxUploads+'']);\r\n        } else if (!this.isFileSizeAllowed(size)) {\r\n            message =FFileUtils.getLocalStr(\"uploadService.failedSize\",[this.maxFileSize+'']);\r\n        } else if (size == 0) {\r\n            message =FFileUtils.getLocalStr(\"uploadService.failedEmpty\");\r\n        } else {\r\n            allowed = true;\r\n        }\r\n        return {\r\n            allowed,\r\n            message,\r\n        };\r\n    }\r\n    /**\r\n     * 从前端传来事件，进行服务器端方法类型判断\r\n     * @param input\r\n     */\r\n    initInputEvents(input: EventEmitter<UploadInput>): Subscription {\r\n        return input.subscribe((event: UploadInput) => {\r\n            switch (event.type) {\r\n                case 'sliceUpload':\r\n                    const _files = this.queue.filter(\r\n                        (file) => file.progress.status === UploadStatus.Queue && (!event.file || file.fileIndex === event.file.fileIndex )\r\n                    );\r\n\r\n                    if (_files.length > 0) {\r\n                        this.uploadScheduler.next({\r\n                            files: _files,\r\n                            event: event,\r\n                            file: null,\r\n                        });\r\n                    }\r\n                    break;\r\n                case \"upload\":\r\n                case \"multipartUpload\":\r\n                    const uploadFileIndex = this.queue.findIndex(\r\n                        (file) => file === event.file\r\n                    );\r\n                    if (uploadFileIndex !== -1 && event.file) {\r\n                        this.uploadScheduler.next({\r\n                            files: [this.queue[uploadFileIndex]],\r\n                            event: event,\r\n                            file: null,\r\n                        });\r\n                    }\r\n                    break;\r\n                case \"uploadAll\":\r\n                    const files = this.queue.filter(\r\n                        (file) => file.progress.status === UploadStatus.Queue\r\n                    );\r\n                    if (files.length > 0) {\r\n                        event.type = \"upload\";\r\n                        this.uploadScheduler.next({\r\n                            files: files,\r\n                            event: event,\r\n                            file: null,\r\n                        });\r\n                    }\r\n                    break;\r\n                case \"cancel\":\r\n                    const id = event.id || null;\r\n                    if (!id) {\r\n                        return;\r\n                    }\r\n                    const fileIndex = this.queue.findIndex((file) => file.id === id);\r\n                    if (fileIndex !== -1) {\r\n                        this.serviceEvents.emit({\r\n                            type: \"cancelled\",\r\n                            files: [this.queue[fileIndex]],\r\n                            message: FFileUtils.getLocalStr(\"uploadService.cancelUpload\")\r\n                        });\r\n                        this.queue.splice(fileIndex, 1);\r\n                    }\r\n                    break;\r\n                    // case 'cancel':\r\n                    // const id = event.id || null;\r\n                    // if (!id) {\r\n                    //   return;\r\n                    // }\r\n                    // const subs = this.subs.filter(sub => sub.id === id);\r\n                    // subs.forEach(sub => {\r\n                    //   if (sub.sub) {\r\n                    //     sub.sub.unsubscribe();\r\n                    //     const fileIndex = this.queue.findIndex(file => file.id === id);\r\n                    //     if (fileIndex !== -1) {\r\n                    //       this.queue[fileIndex].progress.status = UploadStatus.Cancelled;\r\n                    //       this.serviceEvents.emit({ type: 'cancelled', file: this.queue[fileIndex] });\r\n                    //     }\r\n                    //   }\r\n                    // });\r\n                    break;\r\n                // case 'cancelAll':\r\n                //   this.subs.forEach(sub => {\r\n                //     if (sub.sub) {\r\n                //       sub.sub.unsubscribe();\r\n                //     }\r\n\r\n                //     const file = this.queue.find(uploadFile => uploadFile.id === sub.id);\r\n                //     if (file) {\r\n                //       file.progress.status = UploadStatus.Cancelled;\r\n                //       this.serviceEvents.emit({ type: 'cancelled', file: file });\r\n                //     }\r\n                //   });\r\n                //   break;\r\n                case \"hide\":\r\n                    if (!event.id) {\r\n                        return;\r\n                    }\r\n                    let ids = event.id.split(\",\");\r\n                    this.queue = this.queue.filter((file) => {\r\n                        let tIndex = ids.findIndex((tId) => tId == file.id);\r\n                        return tIndex > -1 ? false : true;\r\n                    });\r\n                    break;\r\n                case \"cancelAll\":\r\n                    // 取消，直接从队列中移除，不用修改状态\r\n                    const queueFiles = this.queue.filter(\r\n                        (uploadFile) => uploadFile.progress.status === UploadStatus.Queue\r\n                    );\r\n                    if (queueFiles.length) {\r\n                        this.serviceEvents.emit({\r\n                            type: \"cancelled\",\r\n                            files: queueFiles,\r\n                            message:FFileUtils.getLocalStr(\"uploadService.cancelUpload\"),\r\n                        });\r\n                        this.queue = this.queue.filter(\r\n                            (uploadFile) => uploadFile.progress.status != UploadStatus.Queue\r\n                        );\r\n                    }\r\n                    break;\r\n                case \"remove\":\r\n                    if (!event.id) {\r\n                        return;\r\n                    }\r\n                    const removeIndex = this.queue.findIndex(\r\n                        (file) => file.id === event.id\r\n                    );\r\n                    if (removeIndex !== -1) {\r\n                        // 得有个开始删除和已经删除\r\n                        this.queue[removeIndex].progress.status = UploadStatus.Remove;\r\n                        this.uploadScheduler.next({\r\n                            files: [this.queue[removeIndex]],\r\n                            event: event,\r\n                            file: null,\r\n                        });\r\n                    }\r\n                    break;\r\n                case \"removeAll\":\r\n                    const removeQueueFiles = this.queue.filter(\r\n                        (uploadFile) => uploadFile.progress.status === UploadStatus.Queue\r\n                    );\r\n                    if (removeQueueFiles.length) {\r\n                        this.serviceEvents.emit({\r\n                            type: \"cancelled\",\r\n                            files: removeQueueFiles,\r\n                            message: FFileUtils.getLocalStr(\"uploadService.deleteSuccess\"),\r\n                        });\r\n                        this.queue = this.queue.filter(\r\n                            (uploadFile) => uploadFile.progress.status != UploadStatus.Queue\r\n                        );\r\n                    }\r\n                    // 正在上传的附件是如何处理\r\n                    // const doneFiles = this.queue.filter(uploadFile => uploadFile.progress.status === UploadStatus.Done);\r\n                    if (this.queue.length) {\r\n                        event.type = \"remove\";\r\n                        this.queue.map(\r\n                            (item) => (item.progress.status = UploadStatus.Remove)\r\n                        );\r\n                        this.uploadScheduler.next({\r\n                            files: this.queue,\r\n                            event: event,\r\n                            file: null,\r\n                        });\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    setExtendServerConfig(extendSer) {\r\n        this.extendServerConfig = extendSer;\r\n    }\r\n\r\n    serverMethod(upload: {\r\n        file: UploadFile;\r\n        event: UploadInput;\r\n        files?: UploadFile[];\r\n    }): Observable<UploadOutput> {\r\n        return new Observable((observer) => {\r\n            let sub;\r\n            let ids = upload.files.map((fileItem) => fileItem.id);\r\n            switch (upload.event.type) {\r\n                case 'sliceUpload':\r\n                    sub = this.upload(upload.files, upload.event);\r\n                    break;\r\n                case \"upload\":\r\n                    sub = this.upload(upload.files, upload.event);\r\n                    break;\r\n                case \"multipartUpload\":\r\n                    sub = this.multipartUpload(upload.files[0], upload.event);\r\n                    break;\r\n                // case 'uploadAll':\r\n                //   ids = upload.files.map(fileItem => fileItem.id);\r\n                //   sub = this.uploadAll(upload.files, upload.event);\r\n                //   break;\r\n                case \"remove\":\r\n                    sub = this.remove(upload.files, upload.event);\r\n                    break;\r\n                // case 'removeAll':\r\n                //   ids = upload.files.map(fileItem => fileItem.id);\r\n                //   sub = this.removeAll(upload.files, upload.event);\r\n                //   break;\r\n                default:\r\n                    sub = null;\r\n            }\r\n            if (!sub) {\r\n                return;\r\n            }\r\n            sub.pipe(finalize(() => {\r\n                if (!observer.closed) {\r\n                    observer.complete();\r\n                }\r\n            })).subscribe(\r\n                    (output) => {\r\n                        observer.next(output);\r\n                    },\r\n                    (err) => {\r\n                        observer.next(err);\r\n                    },\r\n                    () => {\r\n                        observer.complete();\r\n                    }\r\n                );\r\n            this.subs.push({ ids: ids, sub: sub, id: \"\" });\r\n            // switch (upload.event.type) {\r\n            //   case 'uploadAll':\r\n            //     this.subs.push({ ids: ids, sub: sub, id: '' });\r\n            //     break;\r\n            //   case 'removeAll':\r\n            //     this.subs.push({ ids: ids, sub: sub, id: '' });\r\n            //     break;\r\n            //   default:\r\n\r\n            // }\r\n        });\r\n    }\r\n    /**\r\n     * 单个文件上传\r\n     * @param file\r\n     * @param event\r\n     */\r\n    // uploadFile(file: UploadFile, event: UploadInput): Observable<UploadOutput> {\r\n    //   const uploadFile = <BlobFile>file.nativeFile;\r\n    //   const uploadIndex = this.queue.findIndex(outFile => outFile.nativeFile === uploadFile);\r\n\r\n    //   // 已经被取消的不能被上传\r\n    //   if (this.queue[uploadIndex].progress.status === UploadStatus.Cancelled) {\r\n    //     return new Observable(observer => {\r\n    //       observer.complete();\r\n    //     });\r\n    //   }\r\n    //   // 抛出开始上传的事件\r\n    //   this.serviceEvents.emit({ type: 'start', files: [file] });\r\n    //   return this.uploadServerSer.upload(file, event, this.extendServerConfig);\r\n    // }\r\n    multipartUpload(\r\n        file: UploadFile,\r\n        event: UploadInput\r\n    ): Observable<UploadOutput> {\r\n        // 抛出开始上传的事件\r\n        this.serviceEvents.emit({ type: \"start\", files: [file] });\r\n        return this.uploadServerSer.multipartUpload(\r\n            file,\r\n            event,\r\n            this.extendServerConfig\r\n        );\r\n    }\r\n    upload(files: UploadFile[], event: UploadInput): Observable<UploadOutput> {\r\n        // 抛出开始上传的事件\r\n        this.serviceEvents.emit({ type: \"start\", files: files });\r\n        return this.uploadServerSer.upload(files, event, this.extendServerConfig);\r\n    }\r\n\r\n    remove(files: UploadFile[], event: UploadInput): Observable<UploadOutput> {\r\n        return this.uploadServerSer.remove(files, event, this.extendServerConfig);\r\n    }\r\n    // removeAll(files: UploadFile[], event: UploadInput): Observable<UploadOutput> {\r\n    //   return this.uploadServerSer.removeAll(files, event, this.extendServerConfig);\r\n    // }\r\n    // 重置\r\n    reset() {\r\n        this.queue = [];\r\n        //this.uploadScheduler = new Subject();\r\n        // this.subs.forEach(sub => {\r\n        //   if (sub.sub) {\r\n        //     sub.sub.unsubscribe();\r\n        //   }\r\n        // });\r\n        this.subs = [];\r\n    }\r\n\r\n    // 暂时\r\n    setContentTypes(contentTypes: string[]): void {\r\n        if (typeof contentTypes !== \"undefined\" && contentTypes instanceof Array) {\r\n            if (contentTypes.find((type: string) => type === \"*\") !== undefined) {\r\n                this.allowedContentTypes = [\"*\"];\r\n            } else {\r\n                this.allowedContentTypes = contentTypes;\r\n            }\r\n            return;\r\n        }\r\n        this.allowedContentTypes = [\"*\"];\r\n    }\r\n\r\n    allContentTypesAllowed(): boolean {\r\n        return (\r\n            this.allowedContentTypes.find((type: string) => type === \"*\") !==\r\n            undefined\r\n        );\r\n    }\r\n    /**\r\n     *\r\n     * @param name\r\n     */\r\n    isContentTypeAllowed(name: string): boolean {\r\n        if (this.allContentTypesAllowed()) {\r\n            return true;\r\n        }\r\n        // 附件没有后缀\r\n        if (name.lastIndexOf(\".\") < 0) {\r\n            return false;\r\n        }\r\n        let namesuffix = name.substr(name.lastIndexOf(\".\"));\r\n        // 简化计算\r\n        return (\r\n            this.allowedContentTypes.findIndex(\r\n                (item) => item.toLowerCase() == namesuffix.toLowerCase()\r\n            ) > -1\r\n        );\r\n    }\r\n    private isNameAllowed(name:string):boolean{\r\n        if(!this.notAllowedCharsInFileName||this.notAllowedCharsInFileName.length==0){\r\n            return true;\r\n        }\r\n        let purName=name.lastIndexOf(\".\")>-1? name.substr(0,name.lastIndexOf(\".\")):name;\r\n         // 简化计算\r\n         return !(\r\n            this.notAllowedCharsInFileName.findIndex(\r\n                (item) => purName.indexOf(item)>-1\r\n            ) > -1\r\n        );\r\n    }\r\n\r\n    isFileSizeAllowed(fileSize: number): boolean {\r\n        if (!this.maxFileSize) {\r\n            return true;\r\n        }\r\n        // fileSize是b单位 maxFileSize是MB单位\r\n        return fileSize <= this.maxFileSize * 1024 * 1024; // * 8\r\n    }\r\n}\r\n","\r\nimport { UploadFile, UploadOutput, UploadInput, UploadStatus, BlobFile, UploadServerService } from '../model/index';\r\nimport { Observable } from 'rxjs';\r\nimport { FFileUtils } from '../utils/index';\r\nexport class FFileUploadDefaultService extends UploadServerService {\r\n    /**\r\n     * 2019年3月2日，先假定一个一个传入\r\n     * @param file \r\n     * @param event \r\n     */\r\n    upload(files: UploadFile[], event: UploadInput,extendService:any): Observable<UploadOutput> {\r\n        let file = files[0];\r\n        return new Observable(observer => {\r\n            const url = event.url ||extendService.url|| '';\r\n\r\n            const method = event.method || 'POST';\r\n            const data = event.data || {};\r\n            const headers = event.headers || {};\r\n\r\n            const xhr = new XMLHttpRequest();\r\n            const time: number = new Date().getTime();\r\n            let progressStartTime: number = (file.progress.data && file.progress.data.startTime) || time;\r\n            let speed = 0;\r\n            let eta: number | null = null;\r\n\r\n            xhr.upload.addEventListener('progress', (e: ProgressEvent) => {\r\n                if (e.lengthComputable) {\r\n                    const percentage = Math.round((e.loaded * 100) / e.total);\r\n                    const diff = new Date().getTime() - time;\r\n                    speed = Math.round(e.loaded / diff * 1000);\r\n                    progressStartTime = (file.progress.data && file.progress.data.startTime) || new Date().getTime();\r\n                    eta = Math.ceil((e.total - e.loaded) / speed);\r\n\r\n                    file.progress = {\r\n                        status: UploadStatus.Uploading,\r\n                        data: {\r\n                            percentage: percentage,\r\n                            speed: speed,\r\n                            speedHuman: `${FFileUtils.humanizeBytes(speed)}/s`,\r\n                            startTime: progressStartTime,\r\n                            endTime: null,\r\n                            eta: eta,\r\n                            etaHuman: this.secondsToHuman(eta)\r\n                        }\r\n                    };\r\n\r\n                    observer.next({ type: 'uploading', file: file });\r\n                }\r\n            }, false);\r\n\r\n            xhr.upload.addEventListener('error', (e: Event) => {\r\n                observer.error(e);\r\n                observer.complete();\r\n            });\r\n\r\n            xhr.onreadystatechange = () => {\r\n                if (xhr.readyState === XMLHttpRequest.DONE) {\r\n                    const speedAverage = Math.round(file.size / (new Date().getTime() - progressStartTime) * 1000);\r\n                    file.progress = {\r\n                        status: UploadStatus.Done,\r\n                        data: {\r\n                            percentage: 100,\r\n                            speed: speedAverage,\r\n                            speedHuman: `${FFileUtils.humanizeBytes(speedAverage)}/s`,\r\n                            startTime: progressStartTime,\r\n                            endTime: new Date().getTime(),\r\n                            eta: eta,\r\n                            etaHuman: this.secondsToHuman(eta || 0)\r\n                        }\r\n                    };\r\n\r\n                    file.responseStatus = xhr.status;\r\n\r\n                    try {\r\n                        file.response = JSON.parse(xhr.response);\r\n                    } catch (e) {\r\n                        file.response = xhr.response;\r\n                    }\r\n\r\n                    file.responseHeaders = this.parseResponseHeaders(xhr.getAllResponseHeaders());\r\n\r\n                    observer.next({ type: 'done', files: [file] });\r\n\r\n                    observer.complete();\r\n                }\r\n            };\r\n\r\n            xhr.open(method, url, true);\r\n            xhr.withCredentials = event.withCredentials ? true : false;\r\n\r\n            try {\r\n                const uploadFile = <BlobFile>file.nativeFile;\r\n                // const uploadIndex = this.queue.findIndex(outFile => outFile.nativeFile === uploadFile);\r\n\r\n                // if (this.queue[uploadIndex].progress.status === UploadStatus.Cancelled) {\r\n                //     observer.complete();\r\n                // }\r\n\r\n                Object.keys(headers).forEach(key => xhr.setRequestHeader(key, headers[key]));\r\n\r\n                let bodyToSend: FormData | BlobFile;\r\n\r\n                if (event.includeWebKitFormBoundary !== false) {\r\n                    Object.keys(data).forEach(key => file.form.append(key, data[key]));\r\n                    file.form.append(event.fieldName || 'file', uploadFile, uploadFile.name);\r\n                    bodyToSend = file.form;\r\n                } else {\r\n                    bodyToSend = uploadFile;\r\n                }\r\n\r\n                //this.serviceEvents.emit({ type: 'start', file: file });\r\n                xhr.send(bodyToSend);\r\n            } catch (e) {\r\n                observer.complete();\r\n            }\r\n\r\n            return () => {\r\n                xhr.abort();\r\n            };\r\n        });\r\n    }\r\n    // 删除附件\r\n    remove(files: UploadFile[], event: UploadInput, extendService: any): Observable<UploadOutput> {\r\n        return new Observable(observer => {\r\n            observer.next({ type: 'removed', files: files });\r\n            observer.complete();\r\n        });\r\n    }\r\n    multipartUpload(file: UploadFile, event: UploadInput, extendService: any): Observable<any>{\r\n        return new Observable(observer => {\r\n            observer.complete();\r\n        });\r\n    };\r\n\r\n    private secondsToHuman(sec: number): string {\r\n        return new Date(sec * 1000).toISOString().substr(11, 8);\r\n    }\r\n    private parseResponseHeaders(httpHeaders: string) {\r\n        if (!httpHeaders) {\r\n            return;\r\n        }\r\n\r\n        return httpHeaders.split('\\n')\r\n            .map((x: string) => x.split(/: */, 2))\r\n            .filter((x: string[]) => x[0])\r\n            .reduce((acc: Object, x: string[]) => {\r\n                acc[x[0]] = x[1];\r\n                return acc;\r\n            }, {});\r\n    }\r\n}","import { Directive, ElementRef, EventEmitter, Input, Output, OnInit, OnDestroy } from '@angular/core';\r\nimport { UploadOutput, UploadInput, UploaderOptions } from '../model/index';\r\nimport { FFileUploaderService } from '../service/index';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Directive({\r\n    selector: '[FFileDrop]'\r\n})\r\nexport class FFileDropDirective implements OnInit, OnDestroy {\r\n    private tDisabled = false;\r\n    // 是否禁用\r\n    @Input()\r\n    set disabled(value: boolean) {\r\n        if (this.tDisabled !== value) {\r\n            this.tDisabled = value;\r\n            if (value) {\r\n                this.unbindDragAndDropEvent();\r\n            } else {\r\n                this.bindDragAndDropEvent();\r\n            }\r\n        }\r\n    };\r\n    get disabled(): boolean {\r\n        return this.tDisabled;\r\n    }\r\n    // 配置\r\n    @Input()\r\n    set options(value: UploaderOptions) {\r\n        this.upload.setOptions(value);\r\n    };\r\n    // 已上传\r\n    @Input()\r\n    set uploadedCount(value){\r\n        this.upload.setOptions({'uploadedCount':value});\r\n    }\r\n    // 传递\r\n    @Input() uploadInput: EventEmitter<UploadInput>;\r\n    @Output() uploadOutput: EventEmitter<UploadOutput>;\r\n\r\n    //upload: FFileUploaderService;\r\n    el: HTMLInputElement;\r\n\r\n    _sub: Subscription[];\r\n\r\n    // eventListener\r\n    dropListener: any = null;\r\n    dragOverListener: any = null;\r\n    dragLeaveListener: any = null;\r\n    dragEnterListener: any = null;\r\n\r\n    constructor(public elementRef: ElementRef, private upload: FFileUploaderService) {\r\n        this.uploadOutput = new EventEmitter<UploadOutput>();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this._sub = [];\r\n        this.el = this.elementRef.nativeElement;\r\n\r\n        this._sub.push(\r\n            this.upload.serviceEvents.subscribe((event: UploadOutput) => {\r\n                this.uploadOutput.emit(event);\r\n            })\r\n        );\r\n\r\n        if (this.uploadInput instanceof EventEmitter) {\r\n            this._sub.push(this.upload.initInputEvents(this.uploadInput));\r\n        }\r\n        // 绑定事件\r\n        if (!this.disabled) {\r\n            this.bindDragAndDropEvent();\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.unbindDragAndDropEvent();\r\n        this._sub.forEach(sub => sub.unsubscribe());\r\n    }\r\n    private bindDragAndDropEvent() {\r\n        // this.ngzone.runOutsideAngular(() => {\r\n        this.dropListener = this.onDrop.bind(this);\r\n        this.el.addEventListener('drop', this.dropListener);\r\n        this.dragOverListener = this.onDragOver.bind(this);\r\n        this.el.addEventListener('dragover', this.dragOverListener);\r\n        this.dragLeaveListener = this.onDragLeave.bind(this);\r\n        this.el.addEventListener('dragleave', this.dragLeaveListener);\r\n        this.dragEnterListener = this.onDropEnter.bind(this);\r\n        this.el.addEventListener('dragenter', this.dragEnterListener);\r\n        //  });\r\n    }\r\n    private unbindDragAndDropEvent() {\r\n        this.dropListener && this.el.removeEventListener('drop', this.dropListener);\r\n        this.dragOverListener && this.el.removeEventListener('dragover', this.dragOverListener);\r\n        this.dragLeaveListener && this.el.removeEventListener('dragleave', this.dragLeaveListener);\r\n        this.dragEnterListener && this.el.removeEventListener('dragenter', this.dragEnterListener);\r\n    }\r\n\r\n    onDropEnter = (e: Event) => {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n    }\r\n\r\n\r\n    // @HostListener('drop', ['$event'])\r\n    public onDrop(e) {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        const event: UploadOutput = { type: 'drop' };\r\n        // console.log('dorp Events');\r\n        this.uploadOutput.emit(event);\r\n        this.upload.handleFiles(e.dataTransfer.files);\r\n    }\r\n\r\n    // @HostListener('dragover', ['$event'])\r\n    public onDragOver(e: Event) {\r\n        if (!e) {\r\n            return;\r\n        }\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        const event: UploadOutput = { type: 'dragOver' };\r\n        this.uploadOutput.emit(event);\r\n    }\r\n\r\n    // @HostListener('dragleave', ['$event'])\r\n    public onDragLeave(e: Event) {\r\n        if (!e) {\r\n            return;\r\n        }\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        const event: UploadOutput = { type: 'dragOut' };\r\n        this.uploadOutput.emit(event);\r\n    }\r\n    /**\r\n     * 重置\r\n     */\r\n    reset() {\r\n       /*if (this.el) {\r\n            this._sub.forEach(sub => sub.unsubscribe());\r\n            this._sub = [];\r\n            this.upload.reset();\r\n        }*/\r\n        this.upload.reset();\r\n    }\r\n}\r\n","import { Directive, ElementRef, EventEmitter, Input, Output, OnInit, OnDestroy } from '@angular/core';\r\nimport { UploadOutput, UploaderOptions } from '../model/f-file-upload.model';\r\nimport { FFileUploaderService } from '../service/f-file-uploader.service';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Directive({\r\n  selector: '[FFileSelect]'\r\n})\r\nexport class FFileSelectDirective implements OnInit, OnDestroy {\r\n  private tDisabled = false;\r\n  @Input()\r\n  set disabled(value: boolean) {\r\n    if (this.tDisabled !== value) {\r\n      this.tDisabled = value;\r\n      if (value) {\r\n        this.unbindEvent();\r\n      } else {\r\n        this.bindEvent();\r\n      }\r\n    }\r\n  }\r\n  get disabled(): boolean {\r\n    return this.tDisabled;\r\n  }\r\n  @Input()\r\n  set options(value: UploaderOptions) {\r\n    if (value) {\r\n      this.upload.setOptions(value);\r\n    }\r\n  };\r\n   // 已上传\r\n   @Input()\r\n   set uploadedCount(value){\r\n       this.upload.setOptions({'uploadedCount':value});\r\n   }\r\n  @Input() uploadInput: EventEmitter<any>;\r\n  @Output() uploadOutput: EventEmitter<UploadOutput>;\r\n\r\n  //upload: FFileUploaderService;\r\n  el: HTMLInputElement;\r\n  private _sub: Subscription[];\r\n  private changeListener: any = null;\r\n\r\n  constructor(public elementRef: ElementRef, private upload: FFileUploaderService) {\r\n    this.uploadOutput = new EventEmitter<UploadOutput>();\r\n    this.el = this.elementRef.nativeElement;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._sub = [];\r\n    // 对外抛出事件\r\n    this._sub.push(\r\n      this.upload.serviceEvents.subscribe((event: UploadOutput) => {\r\n        this.uploadOutput.emit(event);\r\n      })\r\n    );\r\n    // 对内的事件\r\n    if (this.uploadInput instanceof EventEmitter) {\r\n      this._sub.push(this.upload.initInputEvents(this.uploadInput));\r\n    }\r\n    if (!this.disabled) {\r\n      this.bindEvent();\r\n    }\r\n  }\r\n  private bindEvent() {\r\n    this.changeListener = this.onChange.bind(this);\r\n    this.el.addEventListener('change', this.changeListener);\r\n  }\r\n  private unbindEvent() {\r\n    this.changeListener = null;\r\n    this.el.removeEventListener('change', this.changeListener);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.el) {\r\n      this._sub.forEach(sub => sub.unsubscribe());\r\n    }\r\n  }\r\n\r\n  onChange = () => {\r\n    if (this.el.files) {\r\n      this.upload.handleFiles(this.el.files);\r\n      this.el.value=null;\r\n    }\r\n  }\r\n  /**\r\n   * 重置\r\n   */\r\n  reset(){\r\n    // if (this.el) {\r\n    //   //this._sub.forEach(sub => sub.unsubscribe());\r\n    //   //this._sub=[];\r\n    //   this.upload.reset();\r\n    // }    \r\n    this.upload.reset();\r\n  }\r\n}\r\n","import {  Directive, TemplateRef, Input } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[filePreviewListTypeTemplate]'\r\n})\r\nexport class FFilePreviewListTypeTemplateDirective {\r\n    constructor(public template: TemplateRef<any>) { }\r\n}\r\n\r\n@Directive({\r\n    selector: '[filePreviewToolbarTemplate]'\r\n})\r\nexport class FFilePreviewToolbarTemplateDirective {\r\n    constructor(public template: TemplateRef<any>) { }\r\n}\r\n","import { Directive, TemplateRef, Input } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[fFielUpload],[fFileUpload]',\r\n})\r\nexport class FFileUploadDirective {\r\n  constructor(\r\n    public templateRef: TemplateRef<any>\r\n  ) { \r\n  }\r\n\r\n}","import { Pipe, PipeTransform } from \"@angular/core\";\r\nimport { Injector, ElementRef, LOCALE_ID } from \"@angular/core\";\r\nimport { ColumnFormatService } from \"@farris/ui-common/column\";\r\nimport { FFileUtils } from \"../utils/f-file.utils\";\r\nimport { DateTimeHelperService } from \"@farris/ui-common/date\";\r\n/**\r\n * 文件大小格式化\r\n */\r\n@Pipe({\r\n    name: \"fFileSize\",\r\n})\r\nexport class FFileSizePipe implements PipeTransform {\r\n    transform(value: any, args?: any): any {\r\n        // 如果是字符串\r\n        let tvalue = value;\r\n        if (!value) {\r\n            return \"0 Byte\";\r\n        }\r\n        if (typeof value == \"string\") {\r\n            tvalue = parseInt(value);\r\n        }\r\n        return FFileUtils.humanizeBytes(tvalue);\r\n    }\r\n}\r\n/**\r\n * 日期格式化\r\n */\r\n@Pipe({\r\n    name: \"fFileDate\",\r\n})\r\nexport class FFileDatePipe implements PipeTransform {\r\n    constructor(private dateSer: DateTimeHelperService) { }\r\n    transform(value: any, returnFormat: string = \"yyyy-MM-dd\"): any {\r\n        if(!value) return '';\r\n        return this.dateSer.formatTo(value, returnFormat);\r\n    }\r\n}\r\n\r\n/**\r\n * 格式化自定义数据\r\n */\r\n\r\n@Pipe({ name: \"formatCellData\", pure: false })\r\nexport class FormatCellDataPipe implements PipeTransform {\r\n    private elRef: ElementRef;\r\n    // 先不处理多语言\r\n    private localeId = \"ZH-CHS\";\r\n    constructor(private cfs: ColumnFormatService, private injector: Injector) { }\r\n    /**\r\n     * 格式化数据\r\n     * @param column:列信息\r\n     * @param rowData:当前数据\r\n     * @param settings:配置信息\r\n     * @param state: 状态\r\n     * @returns\r\n     */\r\n    transform(column, rowData, rowIndex, settings, state = \"preview\"): any {\r\n        if (rowData && column && column.field) {\r\n            // 值\r\n            let value =this.getRealDataValue(rowData,column.field);\r\n            let formatterFn = column.formatter;\r\n            if (formatterFn) {\r\n                if (formatterFn.type === \"number\") {\r\n                    if (\r\n                        !formatterFn.options ||\r\n                        !Object.keys(formatterFn.options).length\r\n                    ) {\r\n                        formatterFn.options = {\r\n                            thousand: \",\",\r\n                            precision: 2,\r\n                        };\r\n                    }\r\n                }\r\n                // 不需要特殊处理\r\n                // if (formatterFn.type === \"datetime\") {\r\n                // }\r\n            }\r\n            //参数1： 值，参数2：行数据 参数3：格式化方法\r\n            return this.cfs.format(value, rowData, formatterFn, { rowIndex, settings });\r\n        }\r\n        return \"\";\r\n    }\r\n    /**\r\n     * 获取真正的数据\r\n     * @param rowData \r\n     * @param field \r\n     * @returns \r\n     */\r\n    private getRealDataValue(rowData, field) {\r\n        if (!field||!rowData) return '';\r\n        let fieldArray = field.split('.');\r\n        if (fieldArray.length == 1) {\r\n            return rowData[fieldArray[0]];\r\n        }\r\n        let curItemVal = rowData;\r\n        for (var k = 0; k < fieldArray.length; k++) {\r\n            curItemVal = curItemVal[fieldArray[k]];\r\n            // 没有值或者没有此属性\r\n            if (curItemVal == null || curItemVal == undefined) {\r\n                break;\r\n            }\r\n        }\r\n        if (k == fieldArray.length) {\r\n            return curItemVal == null || curItemVal == undefined?\"\":curItemVal;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n    \r\n}\r\n/**\r\n * 附件可能之前生成的单据中并没有多语言服务\r\n * 调用附件的公共服务\r\n */\r\n@Pipe({name: 'upLocale'})\r\nexport class UPLocalePipe implements PipeTransform {\r\n    constructor() {}\r\n    transform(name: any, ...replaceVal: any[]): any {\r\n          return  FFileUtils.getLocalStr(name,replaceVal);\r\n    }\r\n}\r\n\r\n/**\r\n * 解决变量有个默认的文字，变量最终可能是默认值也可能不是\r\n */\r\n@Pipe({name: 'upLocaleDefault'})\r\nexport class UPLocaleDefaultPipe implements PipeTransform {\r\n    constructor() {}\r\n    transform(realValue: any,compareTxt:string,localeName:string): any {\r\n        if(realValue==compareTxt){\r\n            return  FFileUtils.getLocalStr(localeName);\r\n        }\r\n        return realValue;\r\n    }         \r\n}\r\n\r\n\r\n","import { Component, OnInit, HostBinding, Input, ViewChild, ElementRef, Host } from '@angular/core';\r\n@Component({\r\n  selector: 'f-file-view-image',\r\n  templateUrl: './f-file-view-image.component.html',\r\n  styleUrls: ['./f-file-view-image.component.css']\r\n})\r\nexport class FFileViewImageComponent implements OnInit {\r\n  @Input() maxHeight = 200;\r\n  @Input() maxWidth = 300;\r\n  @HostBinding('class.f-file-view-image') cls = true;\r\n  @HostBinding('style.height') selfHeight='50px';\r\n  @ViewChild('canvas') canvas: ElementRef;\r\n  private tFile: File;\r\n  @Input()\r\n  set file(fileContent: File) {\r\n    this.tFile = fileContent;\r\n    this.createImageByCanvas();\r\n  }\r\n  get file(): File {\r\n    return this.tFile;\r\n  }\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n  private changeImageSize(originWidth,originHeight) {\r\n\r\n    // 图片原始尺寸\r\n\r\n    // 目标尺寸\r\n    var targetWidth = originWidth, targetHeight = originHeight;\r\n    // 图片尺寸超过400x400的限制\r\n    if (originWidth > this.maxWidth || originHeight > this.maxHeight) {\r\n      if (originWidth / originHeight > this.maxWidth / this.maxHeight) {\r\n        // 更宽，按照宽度限定尺寸\r\n        targetWidth = this.maxWidth;\r\n        targetHeight = Math.round(this.maxWidth * (originHeight / originWidth));\r\n      } else {\r\n        targetHeight = this.maxHeight;\r\n        targetWidth = Math.round(this.maxHeight * (originWidth / originHeight));\r\n      }\r\n    }\r\n    this.selfHeight=targetHeight+\"px\";\r\n    return {\r\n      width: targetWidth,\r\n      height: targetHeight\r\n    }\r\n  }\r\n  // 压缩图片需要的一些元素和对象\r\n\r\n  private createImageByCanvas() {\r\n    let reader = new FileReader();\r\n    let tImage = new Image();\r\n    let canvas = this.canvas.nativeElement;\r\n    let context = canvas.getContext('2d');\r\n    // base64地址图片加载完毕后\r\n    tImage.onload = () => {\r\n      let imgSize = this.changeImageSize(tImage.width,tImage.height);\r\n      // canvas对图片进行缩放\r\n      canvas.width = imgSize.width;\r\n      canvas.height = imgSize.height;\r\n      // 清除画布\r\n      context.clearRect(0, 0,this.maxWidth,this.maxHeight);\r\n      // 图片压缩\r\n      context.drawImage(tImage, 0, 0, imgSize.width, imgSize.height);\r\n    };\r\n\r\n    // 文件base64化，以便获知图片原始尺寸\r\n    reader.onload =(ev)=>{\r\n      tImage.src = reader.result as string;\r\n    };\r\n    reader.onerror = function (e) {\r\n    }\r\n    reader.readAsDataURL(this.file);\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n","import {\r\n    Component,\r\n    OnInit,\r\n    Input,\r\n    HostBinding,\r\n    ViewChild,\r\n    EventEmitter,\r\n    Output,\r\n    ContentChild,\r\n    ElementRef,\r\n    AfterViewInit,\r\n} from \"@angular/core\";\r\nimport {\r\n    FFileSelectDirective,\r\n    FFileDropDirective,\r\n    FFileUploadDirective,\r\n} from \"../../directive/index\";\r\nimport {\r\n    UploadOutput,\r\n    UploadInput,\r\n    UploadFile,\r\n    UploaderOptions,\r\n    FUploadFileExtend,\r\n    DocMetaProperty,\r\n} from \"../../model/index\";\r\nimport { FFileUtils } from \"../../utils/index\";\r\nimport {\r\n    FFileUploadAPIService,\r\n    FFileUploaderService,\r\n} from \"../../service/index\";\r\nimport { NotifyService, NotifyOptions } from \"@farris/ui-notify\";\r\nimport { Observable, Subject } from \"rxjs\";\r\n\r\nimport { trigger,style,state,animate,transition } from \"@angular/animations\";\r\nimport { NgZone } from \"@angular/core\";\r\nimport { LocaleService } from \"@farris/ui-locale\";\r\n\r\n@Component({\r\n    selector: \"f-file-upload\",\r\n    templateUrl: \"./f-file-upload.component.html\",\r\n    styleUrls: [\"./f-file-upload.component.css\"],\r\n    providers: [FFileUploaderService],\r\n    animations: [\r\n        trigger(\"hideUploaded\", [\r\n            state(\"show\", style({ opacity: 1, height: \"*\" })),\r\n            state(\"hide\", style({ opacity: 0, height: 0 })),\r\n            // transition('* => void', [\r\n            //   style({ opacity: 1}),\r\n            //   animate(200, style({ opacity: 0}))\r\n            // ])\r\n            transition(\"* => hide\", animate(\"0.5s\")),\r\n        ]),\r\n    ],\r\n})\r\nexport class FFileUploadComponent implements OnInit, AfterViewInit {\r\n    @HostBinding(\"class.ffileupload\") cls = true;\r\n    // 不可见\r\n    @HostBinding(\"class.ffileupload-unvisible\") get visibleState() {\r\n        return !this.visible;\r\n    }\r\n    // 自定义样式\r\n    @HostBinding(\"class.ffileupload-selfdefine\") get selfDirectiveDefine() {\r\n        if (this.fFileUploadDir) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    @HostBinding(\"class.ffileupload-uploading\") get uploading() {\r\n        return this.files.length > 0;\r\n    }\r\n\r\n    // 不能在Construct里追加el\r\n    @ViewChild(\"uploadAssist\") fFileUploadAssist: ElementRef;\r\n    // 自定义指令\r\n    @ContentChild(FFileUploadDirective) fFileUploadDir: any;\r\n    //\r\n    @ViewChild(FFileSelectDirective) fileUpload: FFileSelectDirective;\r\n    @ViewChild(FFileDropDirective) fileDropUpload: FFileDropDirective;\r\n    // 启用图片预览\r\n    @Input() enableImagePreview = true;\r\n    // 启用立即上传\r\n    @Input() uploadImmediately = false;\r\n    // 上传完成后隐藏\r\n    @Input() uploadedThenHide = true;\r\n    // 禁用状态\r\n    @Input() disabled = false;\r\n    /** 启用分块上传 */\r\n    @Input() enableSliceUpload = true;\r\n    /** 分块上传每片大小，单位：M, 默认 1M/块 */\r\n    @Input() chunkSize = 1;\r\n\r\n    private tVisible = true;\r\n    // 是否可见\r\n    @Input()\r\n    set visible(value) {\r\n        this.tVisible = value;\r\n        if (!value) {\r\n            this.reset();\r\n        }\r\n    }\r\n    get visible() {\r\n        return this.tVisible;\r\n    }\r\n    // 需要重置,通过不断的赋值来改变\r\n    @Input() needReset: Observable<any> = new Subject();\r\n    // 启用拖拽\r\n    @Input() enableDrop = false;\r\n    @Input() dropText = \"可将文件拖拽此处\";\r\n    // 启用选择文件按钮\r\n    @Input() enableSelect = true;\r\n    @Input() selectText = \"点击上传\";\r\n    // 启用多选\r\n    @Input() multiple = true;\r\n    // 已经上传文件\r\n    @Input() uploadedCount = 0;\r\n    // 公共的扩展数据\r\n    @Input() extendDatas: {\r\n        [key: string]: any;\r\n        extProperty?: DocMetaProperty | null; //\r\n    };\r\n    // 宽度阈值，当宽度超过760时候，没有附件上传时，宽度是固定值，有附件上传时，有最大宽度值\r\n    @Input() widthThreshold = 760;\r\n    // 上传和删除对外抛出的事件\r\n    @Output() fUploadDoneEvent = new EventEmitter<FUploadFileExtend[]>();\r\n    @Output() fUploadRemovedEvent = new EventEmitter<FUploadFileExtend[]>();\r\n\r\n    // 允许上传的文件类型\r\n    allowedContentTypes = \"*\";\r\n    // 默认不限制附件上传个数\r\n    maxUploads = 0;\r\n    // 单位KB，默认是12M\r\n    maxFileSize = \"12MB\";\r\n\r\n    private selfUploadOpts: UploaderOptions = {};\r\n    // 上传配置项\r\n    @Input()\r\n    set options(uploadOpts: UploaderOptions) {\r\n        if (uploadOpts) {\r\n            if (uploadOpts.hasOwnProperty(\"allowedContentTypes\")) {\r\n                this.allowedContentTypes = uploadOpts.allowedContentTypes.join(\",\");\r\n                this.allowedContentTypes =\r\n                    this.allowedContentTypes == \"\" ? \"*\" : this.allowedContentTypes;\r\n            }\r\n            if (uploadOpts.hasOwnProperty(\"maxUploads\")) {\r\n                this.maxUploads = uploadOpts.maxUploads;\r\n            }\r\n            if (uploadOpts.hasOwnProperty(\"maxFileSize\")) {\r\n                this.maxFileSize = FFileUtils.humanizeBytes(\r\n                    1024 * 1024 * uploadOpts.maxFileSize\r\n                );\r\n            }\r\n            this.selfUploadOpts = Object.assign(this.selfUploadOpts, uploadOpts);\r\n        }\r\n    }\r\n    get options() {\r\n        return this.selfUploadOpts;\r\n    }\r\n    /**\r\n     * 每个组可以设置特殊服务参数，来覆盖默认的统一模块级配置\r\n     */\r\n    @Input()\r\n    set extendServerConfig(config: any) {\r\n        if (config) {\r\n            this.fileUploaderSer.setExtendServerConfig(config);\r\n        }\r\n    }\r\n    // 记录文件个数\r\n    files: UploadOutput[];\r\n    // 标记通过选择按钮处理的事件\r\n    uploadSelectInput: EventEmitter<UploadInput>;\r\n    // 标记通过拖拽处理的事件\r\n    uploadDragInput: EventEmitter<UploadInput>;\r\n    // 控制是否显示追加附件的面板\r\n    showAppendPanel = false;\r\n    // 显示loading\r\n    showLoading = false;\r\n\r\n    settings = {\r\n        disabled: this.disabled,\r\n        visible: this.visible,\r\n    };\r\n    // 多语言信息\r\n    localInfo\r\n    constructor(\r\n        private uploadAPISer: FFileUploadAPIService,\r\n        private fileUploaderSer: FFileUploaderService,\r\n        private notifyService: NotifyService,\r\n        private ngZone: NgZone\r\n    ) {\r\n        this.files = [];\r\n        this.uploadSelectInput = new EventEmitter<UploadInput>();\r\n        this.uploadDragInput = new EventEmitter<UploadInput>();\r\n        // 重置\r\n        this.needReset.subscribe((data) => {\r\n            this.reset();\r\n        });\r\n        FFileUtils.getLocalState(this.notifyService.localeService);        \r\n    }\r\n\r\n    ngOnInit() {\r\n        // 模板的情况下只能是立即上传\r\n        if (this.fFileUploadDir) {\r\n            this.uploadImmediately = true;\r\n        }\r\n        this.computeWidthThreshold();\r\n    }\r\n    /**\r\n     * 视图初始化后\r\n     */\r\n    ngAfterViewInit() { }\r\n    /**\r\n     * 触发绑定\r\n     */\r\n    triggerFileSelect(ev) {\r\n        ev && ev.stopPropagation();\r\n        // 禁用时\r\n        if (this.disabled) {\r\n            return false;\r\n        }\r\n        this.fileUpload.elementRef.nativeElement.click();\r\n    }\r\n    /**\r\n     * 选择附件按钮，处理抛出事件\r\n     * @param output\r\n     */\r\n    selectUploadOutput(output: UploadOutput): void {\r\n        this.uploadOutputHandler(output);\r\n    }\r\n    /**\r\n     * 拖拽区域处理抛出事件\r\n     * @param output\r\n     */\r\n    dropUploadOutput(output: UploadOutput): void {\r\n        if (this.enableSelect) {\r\n            return;\r\n        }\r\n        // 暂不处理拖拽的事件\r\n        if (\r\n            output.type !== \"dragOver\" &&\r\n            output.type !== \"dragOut\" &&\r\n            output.type !== \"drop\"\r\n        ) {\r\n            this.uploadOutputHandler(output);\r\n        }\r\n    }\r\n    /**\r\n     * allAddedToQueue 选中文件追加到队列\r\n     * @param output\r\n     */\r\n    private uploadOutputHandler(output: UploadOutput): void {\r\n        // 显示追加面板\r\n        if (this.showAppendPanel) {\r\n            this.showAppendPanel = false;\r\n        }\r\n\r\n        if (output.type === \"addedToQueue\" && typeof output.file !== \"undefined\") {\r\n            this.files.push({ type: output.type, file: output.file });\r\n            // 如果启用立即上传\r\n            if (this.uploadImmediately) {\r\n                this.showLoading = true;\r\n                this.startUpload(output.file);\r\n            }\r\n        } else if (output.type === \"start\") {\r\n            // 开始上传\r\n            this.updateFilesState(output, \"\");\r\n        } else if (output.type == \"done\") {\r\n            // 上传完成\r\n            this.updateFilesState(output, \"done\");\r\n            this.fUploadDoneEvent.emit(\r\n                FFileUtils.changeUploadFileToFileExtend(output.files)\r\n            );\r\n            this.hideAfterLoaded(output);\r\n            // 隐藏正在加载\r\n            if (\r\n                this.uploadImmediately &&\r\n                this.showLoading &&\r\n                this.allFileUploaded()\r\n            ) {\r\n                this.showLoading = false;\r\n            }\r\n        } else if (\r\n            output.type === \"cancelled\" ||\r\n            output.type === \"removed\" ||\r\n            output.type == \"error\"\r\n        ) {\r\n            // 删除或者移除文件\r\n            this.files = this.files.filter((fileOutput: UploadOutput) => {\r\n                return (\r\n                    output.files.findIndex((item) => fileOutput.file.id == item.id) < 0\r\n                );\r\n            });\r\n            // 隐藏正在加载\r\n            if (\r\n                this.uploadImmediately &&\r\n                this.showLoading &&\r\n                this.allFileUploaded()\r\n            ) {\r\n                this.showLoading = false;\r\n            }\r\n            this.showNotify(output);\r\n        } else if (\r\n            output.type === \"rejected\" &&\r\n            typeof output.file !== \"undefined\"\r\n        ) {\r\n            // 上传被拒绝\r\n            this.showNotify(output);\r\n            // 隐藏正在加载\r\n            if (\r\n                this.uploadImmediately &&\r\n                this.showLoading &&\r\n                this.allFileUploaded()\r\n            ) {\r\n                this.showLoading = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    private showNotify(output) {\r\n        let notifyType = \"warning\";\r\n        if (output.type == \"cancelled\" || output.type == \"removed\") {\r\n            notifyType = \"success\";\r\n        }\r\n        let message = output.hasOwnProperty(\"message\") ? output[\"message\"] : \"\";\r\n        this.notifyService[notifyType](<NotifyOptions>{\r\n            msg: message,\r\n            timeout: 3000,\r\n        });\r\n    }\r\n    // 判断是否所有文件都已上传\r\n    private allFileUploaded() {\r\n        let findNotDoneIndex = this.files.findIndex((item) => {\r\n            let doneTypes = [\"done\", \"cancelled\", \"removed\"];\r\n            let findTypeIndex = doneTypes.findIndex((type) => {\r\n                return type == item.type;\r\n            });\r\n            return findTypeIndex == -1;\r\n        });\r\n        return findNotDoneIndex == -1 ? true : false;\r\n    }\r\n    /**\r\n     * 更新附件的状态\r\n     * @param output\r\n     * @param eventType\r\n     */\r\n    private updateFilesState(output: UploadOutput, eventType) {\r\n        let startFiles = [];\r\n        if (output.hasOwnProperty(\"files\") && output.files.length > 0) {\r\n            // 此处更新界面可能有性能问题\r\n            startFiles = output.files;\r\n        } else if (typeof output.file !== \"undefined\") {\r\n            startFiles = [output.file];\r\n        }\r\n        eventType = eventType ? eventType : output.type;\r\n        startFiles.map((item) => {\r\n            const index = this.files.findIndex(\r\n                (fileOutput) =>\r\n                    typeof item !== \"undefined\" && fileOutput.file.id === item.id\r\n            );\r\n            // 变更状态\r\n            if (index > -1) {\r\n                this.files[index] = { type: eventType, file: item };\r\n            }\r\n        });\r\n    }\r\n\r\n    /**单个文件上传 */\r\n    startUpload(file: UploadFile): void {\r\n        /**\r\n         * Todo:后续可以从上传区块上取内容进行扩展\r\n         */\r\n        const event: UploadInput = this.uploadAPISer.getAssignAPI(\"upload\", {\r\n            file: file,\r\n            type: this.enableSliceUpload ? 'sliceUpload': 'upload',\r\n            data: this.extendDatas,\r\n            chunkSize: this.chunkSize\r\n        });\r\n        this.inputUploadEventEmit(event);\r\n    }\r\n    /**\r\n     * 上传所有\r\n     */\r\n    startUploadAll(): void {\r\n        /**\r\n         *  Todo：后续，如果每个数据不一样，此处的数据得重新归集\r\n         */\r\n        const event: UploadInput = this.uploadAPISer.getAssignAPI(\"uploadAll\", {\r\n            type: this.enableSliceUpload ? 'sliceUpload': \"uploadAll\",\r\n            files: [],\r\n            data: this.extendDatas,\r\n            chunkSize: this.chunkSize\r\n        });\r\n        this.inputUploadEventEmit(event);\r\n    }\r\n    /**\r\n     * 已上传隐藏属性\r\n     */\r\n    hideAfterLoaded(output: UploadOutput): void {\r\n        //上传完成后删除\r\n        if (this.uploadedThenHide) {\r\n            // this.ngZone.runOutsideAngular(() => {\r\n            setTimeout(() => {\r\n                // 删除或者移除文件\r\n                let ids = output.files.map((fileItem) => fileItem.id);\r\n                this.files = this.files.filter((fileOutput: UploadOutput) => {\r\n                    let tIndex = ids.findIndex((tId) => tId == fileOutput.file.id);\r\n                    return tIndex > -1 ? false : true;\r\n                });\r\n\r\n                const event: UploadInput = this.uploadAPISer.getAssignAPI(\"hide\", {\r\n                    type: \"hide\",\r\n                    id: ids.join(\",\"),\r\n                });\r\n                this.inputUploadEventEmit(event);\r\n            }, 1000);\r\n            // });\r\n        }\r\n    }\r\n    /**\r\n     * 取消上传\r\n     */\r\n    cancelUpload(id: string): void {\r\n        const event: UploadInput = this.uploadAPISer.getAssignAPI(\"cancel\", {\r\n            id: id,\r\n            type: \"cancel\",\r\n        });\r\n        this.inputUploadEventEmit(event);\r\n    }\r\n    /**\r\n     * 删除已上传文件\r\n     */\r\n    removelAllUpload(): void {\r\n        const event: UploadInput = this.uploadAPISer.getAssignAPI(\"removeAll\", {\r\n            type: \"removeAll\",\r\n            files: [],\r\n        });\r\n        this.inputUploadEventEmit(event);\r\n    }\r\n    /**\r\n     * 删除已上传文件\r\n     */\r\n    removeFile(id: string): void {\r\n        const event: UploadInput = this.uploadAPISer.getAssignAPI(\"remove\", {\r\n            id: id,\r\n            type: \"remove\",\r\n        });\r\n        this.inputUploadEventEmit(event);\r\n    }\r\n    /** */\r\n    /**\r\n     *\r\n     * @param bytes\r\n     */\r\n    formateBytes(bytes) {\r\n        return FFileUtils.humanizeBytes(bytes);\r\n    }\r\n    /**\r\n     * 判断是图片\r\n     * @param type\r\n     */\r\n    isImage(type) {\r\n        return type.indexOf(\"image\") > -1;\r\n    }\r\n    // inProgress(progress) {\r\n    //   console.log('进入inProgress');\r\n    //   if (progress.data.percentage == 100) {\r\n    //     return 'done'\r\n    //   }\r\n    //   if (progress.data.percentage == 0) {\r\n    //     return 'uploadi';\r\n    //   }\r\n    //   return 'progress';\r\n    // }\r\n\r\n    /**\r\n     * 是否判断有类型限制\r\n     */\r\n    judgeContentTypeLimit() {\r\n        let tTypes = this.allowedContentTypes.split(\",\");\r\n        let hasAllIndex = tTypes.findIndex((item) => {\r\n            return item == \"*\";\r\n        });\r\n        return hasAllIndex == -1;\r\n    }\r\n    /**\r\n     * 判断是否有文件大小的限制\r\n     */\r\n    judegeFileSizeLimit() {\r\n        return this.maxFileSize != \"0 Byte\";\r\n    }\r\n    /**\r\n     * 追加\r\n     */\r\n    appendNewFiles(ev) {\r\n        //启用拖拽\r\n        if (this.enableDrop) {\r\n            this.showAppendPanel = true;\r\n        } else {\r\n            ev && ev.stopPropagation();\r\n            this.triggerFileSelect(ev);\r\n        }\r\n    }\r\n    /**\r\n     * 关闭追加面板\r\n     */\r\n    closeAppendPanel() {\r\n        this.showAppendPanel = false;\r\n    }\r\n    /**\r\n     * 统一触发 附件选择和拖拽附件的事件\r\n     * @param ev\r\n     */\r\n    private inputUploadEventEmit(ev: UploadInput) {\r\n        // 如果文件上传启用\r\n        if (this.enableSelect) {\r\n            this.uploadSelectInput.emit(ev);\r\n        } else {\r\n            this.uploadDragInput.emit(ev);\r\n        }\r\n    }\r\n    // 重置方法\r\n    reset() {\r\n        this.files = [];\r\n        // 如果文件上传启用\r\n        if (this.enableSelect) {\r\n            this.fileUpload && this.fileUpload.reset();\r\n        } else {\r\n            this.fileDropUpload && this.fileDropUpload.reset();\r\n        }\r\n        this.computeWidthThreshold();\r\n    }\r\n    /**\r\n     * 计算阈值\r\n     */\r\n    private computeWidthThreshold() {\r\n        //\r\n        this.ngZone.runOutsideAngular(() => {\r\n            let self = this;\r\n            setTimeout(() => {\r\n                let tNeedComputedCls = false;\r\n                if (self.fFileUploadDir || !self.visible) {\r\n                    tNeedComputedCls = false;\r\n                }\r\n                // 计算元素\r\n                let assistEl = self.fFileUploadAssist\r\n                    ? self.fFileUploadAssist.nativeElement\r\n                    : null;\r\n\r\n                if (assistEl) {\r\n                    assistEl.parentElement.classList[\"add\"](\"ffileupload-default\");\r\n                }\r\n\r\n                return;\r\n\r\n                // // 超过阈值\r\n                // if (assistEl && assistEl.getBoundingClientRect().width > self.widthThreshold) {\r\n                //   tNeedComputedCls = true;\r\n                // } else {\r\n                //   tNeedComputedCls = false;\r\n                // }\r\n                // if (assistEl) {\r\n                //   let actionFun = tNeedComputedCls ? 'add' : 'remove';\r\n                //   assistEl.parentElement.classList[actionFun]('ffileupload-default');\r\n                // }\r\n            }, 0);\r\n        });\r\n    }\r\n}\r\n","import { Component, OnInit, Input, HostBinding, Output, EventEmitter, ContentChild, TemplateRef, ViewEncapsulation, SimpleChanges, OnChanges, ChangeDetectorRef, ViewChildren, ElementRef, ViewChild, Optional, inject, Injector } from '@angular/core';\r\nimport { FUploadFileExtend } from '../../model/index';\r\nimport { FFilePreviewListTypeTemplateDirective, FFilePreviewToolbarTemplateDirective } from '../../directive/index';\r\nimport { FFileUtils } from '../../utils';\r\nimport { LocaleService } from '@farris/ui-locale';\r\n\r\n@Component({\r\n    selector: 'f-file-preview',\r\n    templateUrl: './f-file-preview.component.html',\r\n    styleUrls: ['./f-file-preview.component.css'],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class FFilePreviewComponent implements OnInit, OnChanges {\r\n    @HostBinding('class.ffilepreview--wrapper') cls = true;\r\n    @HostBinding('class.ffilepreview-unvisible') get visibleState() {\r\n        return !this.visible;\r\n    }\r\n    // 只读的状态，控制附件是否可删除\r\n    @Input() readonly = true;\r\n    private _defaultItemCls = '';\r\n    @Input()\r\n    set defaultItemCls(value: string) {\r\n        this._defaultItemCls = value;\r\n    }\r\n    get defaultItemCls(): string {\r\n        //如果有自定义的值\r\n        if (this._defaultItemCls) {\r\n            return this._defaultItemCls + ' ';\r\n        }\r\n        // 如果有自定义模板\r\n        if (this.listTypeTemplate) {\r\n            return 'ffilepreview--item ';\r\n        }\r\n        return this.type == 'list' ? 'ffilepreview--item ' : 'ffilepreview--item col-sm-12 col-md-6 col-xl-3 col-el-2 ';\r\n    }\r\n    @Input() visible = true;\r\n    // 是否启用批量操作\r\n    @Input() enableMulti = false;\r\n    // list类型 card类型\r\n    @Input() type = \"list\";\r\n    // 列项上的class\r\n    @Input() itemCls = \"\";\r\n    // Header的class\r\n    @Input() headerCls = '';\r\n    // 启用重命名\r\n    @Input() canRename = false;\r\n    // 默认重命名\r\n    @Input() defaultRename = '';\r\n    // \r\n    @Input() enableCardAreaResponse = true;\r\n    // 标记是否显示重命名输入框\r\n    showRenameInput = false;\r\n    @ViewChild('multiRenameInput') multiRenameRef: ElementRef;\r\n    //@Input() fileInfos:FUploadFileExtend[]=[];\r\n    private _fileInfos: FUploadFileExtend[] = [];\r\n    @Input()\r\n    set fileInfos(val: FUploadFileExtend[]) {\r\n        this._fileInfos = this.formatDatas(val);;\r\n    }\r\n    get fileInfos(): FUploadFileExtend[] {\r\n        return this._fileInfos;\r\n    };\r\n    // 附件预览信息，抛出对象给第三方处理\r\n    @Output() filePreviewEvent = new EventEmitter<FUploadFileExtend>();\r\n    // 附件下载事件，抛出对象给第三方处理\r\n    @Output() fileDownloadEvent = new EventEmitter<{ fileInfos: FUploadFileExtend[], name: string }>();\r\n    @Output() multiSelectedEvent = new EventEmitter<FUploadFileExtend[]>();\r\n    // 附件删除事件，抛出对象给第三方处理\r\n    @Output() fileRemoveEvent = new EventEmitter<FUploadFileExtend>();\r\n    @ContentChild(FFilePreviewListTypeTemplateDirective, { read: TemplateRef }) listTypeTemplate: TemplateRef<any>;\r\n    @ContentChild(FFilePreviewToolbarTemplateDirective, { read: TemplateRef }) toolbarTemplate: TemplateRef<any>;\r\n    multiSelected: FUploadFileExtend[] = [];\r\n    // 全选状态\r\n    selectAllBtnChecked = false;\r\n    settings = {\r\n        readonly: this.readonly,\r\n        visible: this.visible,\r\n        enableMulti: this.enableMulti\r\n    };\r\n    /**2023年12月23日，标记\r\n     * 预览组件，没有多语言服务相关的，\r\n     * 如果只有预览组件，重新生成、编译，也会获取多语言服务。\r\n     */\r\n    private hasLocalSer=false;\r\n    constructor(private cd: ChangeDetectorRef,@Optional() private inject:Injector) {\r\n         // 看是否多语言服务已更新\r\n         this.hasLocalSer=FFileUtils.getLocalState(null);\r\n         // 为多语言服务赋值\r\n         if(this.inject&&!this.hasLocalSer){\r\n            this.hasLocalSer=FFileUtils.getLocalState(this.inject.get(LocaleService));\r\n         }\r\n    }\r\n    ngOnInit() {\r\n\r\n    }\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        // if (changes['enableMultiDownload']) {\r\n        //     this.formatDatas(this.fileInfos);\r\n        // }\r\n    }\r\n    /**\r\n     * 格式化数据\r\n     * @param val \r\n     */\r\n    formatDatas(val) {\r\n        if (this.enableMulti) {\r\n            let formatValue= val.map((item: FUploadFileExtend) => {\r\n                // if (!item.hasOwnProperty('checked')) {\r\n                //     //\r\n                //     let findItem = this._fileInfos.find(olditem => {\r\n                //         return item.id == olditem.id;\r\n                //     });\r\n                //     if (findItem && findItem.hasOwnProperty('checked')) {\r\n                //         item['checked'] = findItem['checked'];\r\n                //     } else {\r\n                //         item['checked'] = this.selectAllBtnChecked;\r\n                //     }\r\n                // }\r\n                item['checked'] = this.selectAllBtnChecked;\r\n                return item;\r\n            });\r\n            // 归集已选数据\r\n            if(this.selectAllBtnChecked){\r\n                this.multiSelected=[...formatValue];\r\n            }else{\r\n                this.multiSelected=[];\r\n            }\r\n            // 返回格式化数据\r\n            return formatValue;\r\n        } else {\r\n            return val;\r\n        }\r\n    }\r\n    /**\r\n     * 预览\r\n     * @param ev \r\n     * @param fileInfo \r\n     */\r\n    filePreviewHandler(ev: Event, fileInfo: FUploadFileExtend) {\r\n        ev.stopImmediatePropagation();\r\n        this.filePreviewEvent.emit(fileInfo);\r\n    }\r\n    /**\r\n     * 下载\r\n     * @param ev \r\n     * @param fileInfo \r\n     */\r\n    fileDownloadHandler(ev: Event, fileInfo: FUploadFileExtend) {\r\n        ev.stopImmediatePropagation();\r\n        this.fileDownloadEvent.emit({ fileInfos: [fileInfo], name: '' });\r\n    }\r\n    fileMultiDownloadHandler(ev: Event) {\r\n        ev.stopImmediatePropagation();\r\n        let rename = '';\r\n        if (this.showRenameInput) {\r\n            rename = this.multiRenameRef.nativeElement.value;\r\n        }\r\n        if (rename == '') {\r\n            rename = this.defaultRename;\r\n        }\r\n        this.fileDownloadEvent.emit({ fileInfos: this.multiSelected, name: rename });\r\n    }\r\n    /**\r\n     * checkbox多选\r\n     * @param ev \r\n     */\r\n    multiSelectChange(ev) {\r\n        let hasInArray = this.multiSelected.findIndex(item => item['id'] == ev['id']);\r\n        let findInArray = this.fileInfos.findIndex(item => item['id'] == ev['id']);\r\n        if (findInArray > -1) {\r\n            this.fileInfos[findInArray]['checked'] = ev['checked'];\r\n        }\r\n\r\n        if (ev['checked']) {\r\n            //选入\r\n            if (hasInArray == -1) {\r\n                if (findInArray > -1) {\r\n                    this.multiSelected.push(this.fileInfos[findInArray]);\r\n                }\r\n            }\r\n        } else {\r\n            //移出\r\n            if (hasInArray > -1) {\r\n                this.multiSelected.splice(hasInArray, 1);\r\n            }\r\n        }\r\n        // 判断是否全选\r\n        if (this.fileInfos.length > 0) {\r\n            if (this.multiSelected.length == this.fileInfos.length) {\r\n                //都全选\r\n                this.selectAllBtnChecked = true;\r\n            } else {\r\n                // 未全选\r\n                this.selectAllBtnChecked = false;\r\n            }\r\n        }\r\n        // 抛出多选\r\n        this.multiSelectedEvent.emit(this.multiSelected);\r\n    }\r\n    /**\r\n     * 删除数据\r\n     * @param ev \r\n     * @param fileInfo \r\n     */\r\n    fileRemoveHandler(ev: Event, fileInfo: FUploadFileExtend) {\r\n        ev.stopImmediatePropagation();\r\n        this.fileRemoveEvent.emit(fileInfo);\r\n    }\r\n    /**\r\n     * 获取文档类型对应的class\r\n     * @param fileName \r\n     */\r\n    getFileTypeClassName(fileName) {\r\n        let clsName = 'ffilepreview--filetype';\r\n        // 如果名称为空\r\n        if (!fileName) {\r\n            return clsName + '-any';\r\n        }\r\n        let lastDotIndex = fileName.lastIndexOf(\".\");\r\n        let fileSuffix = '';\r\n        if (lastDotIndex > -1) {\r\n            fileSuffix = fileName.substring(lastDotIndex + 1).toLocaleLowerCase();\r\n        }\r\n        switch (fileSuffix) {\r\n            case 'pdf':\r\n                clsName += '-pdf';\r\n                break;\r\n            case 'jpeg':\r\n            case 'jpg':\r\n            case 'gif':\r\n            case 'svg':\r\n            case 'png':\r\n            case 'bmp':\r\n                clsName += '-img';\r\n                break;\r\n            case 'ppt':\r\n            case 'pptx':\r\n                clsName += '-ppt';\r\n                break;\r\n            case 'doc':\r\n            case 'docx':\r\n                clsName += '-doc';\r\n                break;\r\n            case 'xls':\r\n            case 'xlsx':\r\n                clsName += '-xls';\r\n                break;\r\n            case 'txt':\r\n                clsName += '-txt';\r\n                break;\r\n            case 'zip':\r\n                clsName += '-zip';\r\n                break;\r\n            default:\r\n                clsName += '-any';\r\n        }\r\n        return clsName;\r\n    }\r\n    \r\n    /**\r\n     * 是不是有附件名称\r\n     * @param name \r\n     */\r\n    hasFileName(name): boolean {\r\n        if (!name) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * 选择或取消所有\r\n     * @param ev \r\n     */\r\n    selectOrCancelAllHandler(ev) {\r\n        if (ev['checked']) {\r\n            // 全选\r\n            this.fileInfos.forEach(item => {\r\n                item.checked = true;\r\n            });\r\n            this.multiSelected = [...this.fileInfos];\r\n            this.selectAllBtnChecked = true;\r\n\r\n        } else {\r\n            // 取消\r\n            this.multiSelected = [];\r\n            this.fileInfos.forEach(item => {\r\n                item.checked = false;\r\n            });\r\n            this.selectAllBtnChecked = false;\r\n        }\r\n        this.cd.detectChanges();\r\n    }\r\n    /**\r\n     * 显示隐藏输入名称\r\n     */\r\n    toggleRenameInput(ev) {\r\n        ev.stopPropagation();\r\n        this.showRenameInput = !this.showRenameInput;\r\n        if (!this.multiRenameRef.nativeElement.value) {\r\n            this.multiRenameRef.nativeElement.value = this.defaultRename;\r\n        }\r\n    }\r\n}\r\n","import {\r\n    Component,\r\n    OnInit,\r\n    Input,\r\n    Output,\r\n    EventEmitter,\r\n    HostBinding,\r\n} from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: \"f-file-preview-checkbox\",\r\n    templateUrl: \"./preview-checkbox.component.html\",\r\n    styleUrls: [],\r\n})\r\nexport class PreviewCheckboxComponent implements OnInit {\r\n    @HostBinding(\"class.align-middle\") cls1 = true;\r\n    @HostBinding(\"class.d-inline-flex\") cls2 = true;\r\n    @HostBinding(\"class.preview-checkbox\") cls3 = true;\r\n\r\n    @Input() checked: boolean = false;\r\n    @Input() id: string;\r\n    @Input() disabled: boolean = false;\r\n\r\n    @Input() showDragBar = false;\r\n\r\n    @Output() checkedChange = new EventEmitter();\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit() { }\r\n\r\n    clickHandler(event) {\r\n        event.stopPropagation();\r\n        if (!this.disabled) {\r\n            this.checked = !this.checked;\r\n            this.checkedChange.emit({ checked: this.checked, id: this.id });\r\n        }\r\n    }\r\n}\r\n","import { Component, OnInit, Input, ElementRef, ViewChild, AfterViewInit, HostBinding, SimpleChange } from '@angular/core';\r\nimport { FUploadFileExtend } from '../../model';\r\n\r\n@Component({\r\n  selector: 'ffile-multi-download-info',\r\n  templateUrl: './multi-download-info.component.html',\r\n  styleUrls: ['./multi-download-info.component.css']\r\n})\r\nexport class MultiDownloadInfoComponent implements OnInit,AfterViewInit {\r\n  @HostBinding('class.ffile-multi-download-info') cls=true;\r\n  @ViewChild('multiRenameInput') multiRenameRef: ElementRef;\r\n  // 记载下载数据\r\n  private _downloadInfos: FUploadFileExtend[] = [];\r\n  @Input()\r\n  set downloadInfos(value) {\r\n    if (value && value.length > 0) {\r\n      this._downloadInfos = value;\r\n      if (!this._downloadName) {\r\n        this.downloadName = this.getName(this._downloadInfos[0]['name']);\r\n      }\r\n    }\r\n  }\r\n  get downloadInfos() {\r\n    return this._downloadInfos;\r\n  }\r\n  // 默认名称\r\n  private _downloadName = '';\r\n  @Input()\r\n  set downloadName(value: string) {\r\n    this._downloadName=value;    \r\n  }\r\n  get downloadName() {\r\n    if(!this._downloadName&&this._downloadInfos.length>0){\r\n      this._downloadName = this.getName(this._downloadInfos[0]['name']);\r\n    }    \r\n    return this._downloadName;\r\n  }\r\n\r\n  fileTypeCls = '';\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n   \r\n  }\r\n  ngAfterViewInit(){\r\n    //this.multiRenameRef.nativeElement.value = this.downloadName;\r\n  }\r\n  /**\r\n   * 获取下载名称\r\n   */\r\n  getDownloadName() {\r\n    return  this.multiRenameRef.nativeElement.value;\r\n  }\r\n  private getName(name: string) {\r\n    if (name.lastIndexOf('.') > 0) {\r\n      return name.substring(0, name.lastIndexOf('.'));\r\n    }\r\n    return '';\r\n  }\r\n\r\n  getFileTypeClassName(filename: string) {\r\n\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  AfterViewInit,\r\n  ElementRef,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  HostBinding,\r\n  ViewChild,\r\n  TemplateRef,\r\n  NgZone,\r\n  ChangeDetectorRef,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ViewEncapsulation,\r\n  Optional,\r\n  Injector,\r\n} from \"@angular/core\";\r\nimport { NotifyService, NotifyOptions } from \"@farris/ui-notify\";\r\nimport { BsModalService } from \"@farris/ui-modal\";\r\nimport {\r\n  FFileUploadAPIService,\r\n  FFileUploaderService,\r\n} from \"../../service/index\";\r\nimport { FFileSelectDirective } from \"../../directive/index\";\r\nimport { MultiDownloadInfoComponent } from \"../multi-download-info/multi-download-info.component\";\r\nimport {\r\n  UploadOutput,\r\n  UploadInput,\r\n  UploadFile,\r\n  UploaderOptions,\r\n  FUploadFileExtend,\r\n  DocMetaProperty,\r\n  UploadStatus,\r\n  ColumnData,\r\n} from \"../../model/index\";\r\nimport { Observable, Subject } from \"rxjs\";\r\nimport { FFileUtils } from \"../../utils/index\";\r\nimport {\r\n  trigger,\r\n  style,\r\n  state,\r\n  animate,\r\n  transition,\r\n} from \"@angular/animations\";\r\n\r\nimport ResizeObserver from \"resize-observer-polyfill\";\r\nimport { LocaleService } from \"@farris/ui-locale\";\r\nimport { DateTimeHelperService } from \"@farris/ui-common/date\";\r\nimport { WEBAPI_PREFIX_TOKEN } from \"@farris/ui-common\";\r\n\r\nexport type CanEditableFn = (fileInfo: any) => boolean;\r\nexport type FileCanEditable = CanEditableFn | boolean;\r\nexport enum DocModeType {\r\n  Normal = \"normal\", //默认模式，不开启修订模式，隐藏标记\r\n  RevisionOnly = \"revisionOnly\", //仅修订模式，开启修订模式，但是用户不可接受或拒绝修订、不可接受所有修订\r\n  Admin = \"admin\", //开启修订，用户可接受或拒绝修订、可接受所有修订\r\n}\r\n\r\n@Component({\r\n  selector: \"f-file-upload-and-preview\",\r\n  templateUrl: \"./upload-and-preview.component.html\",\r\n  styleUrls: [\"./upload-and-preview.component.css\"],\r\n  providers: [FFileUploaderService],\r\n  animations: [\r\n    trigger(\"hideUploaded\", [\r\n      state(\"show\", style({ opacity: 1, height: \"*\" })),\r\n      state(\"hide\", style({ opacity: 0, height: 0 })),\r\n      // transition('* => void', [\r\n      //   style({ opacity: 1}),\r\n      //   animate(200, style({ opacity: 0}))\r\n      // ])\r\n      transition(\"* => hide\", animate(\"0.5s\")),\r\n    ]),\r\n  ],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class UploadAndPreviewComponent\r\n  implements OnInit, AfterViewInit, OnChanges {\r\n  @HostBinding(\"class.ffileUploadAndPreview\") cls = true;\r\n  @HostBinding(\"class.ffileUploadAndPreview-content-fill\") get fillState() {\r\n    return this.contentFill;\r\n  }\r\n  // 预览模板\r\n  @ViewChild(\"previewFileNameTmpl\") previewFileNameTmpl: TemplateRef<void>;\r\n  // 文件大小模板\r\n  @ViewChild(\"fileSizeTmpl\") fileSizeTmpl: TemplateRef<void>;\r\n  // 文件状态模板\r\n  @ViewChild(\"uapStateTmpl\") uapStateTmpl: TemplateRef<void>;\r\n  // 预览操作模板\r\n  @ViewChild(\"previewActionTmpl\") previewActionTmpl: TemplateRef<void>;\r\n  // 预览操作模板\r\n  @ViewChild(\"previewDateTmpl\") previewDateTmpl: TemplateRef<void>;\r\n  // 上传操作模板\r\n  @ViewChild(\"uploadFileNameTmpl\") uploadFileNameTmpl: TemplateRef<void>;\r\n  /**\r\n   * 每个组可以设置特殊服务参数，来覆盖默认的统一模块级配置\r\n   */\r\n  @Input()\r\n  set extendServerConfig(config: any) {\r\n    if (config) {\r\n      this.fileUploaderSer.setExtendServerConfig(config);\r\n    }\r\n  }\r\n  // 内容区域填充\r\n  @Input() contentFill = false;\r\n  /** 启用手动调整展示顺序 */\r\n  @Input() enableOrder = false;\r\n  /** 排序字段 */\r\n  @Input() orderField = \"order\";\r\n  /** 是否允许编辑文档，默认为 false */\r\n  @Input() editfile: FileCanEditable = false;\r\n  // doc文档打开模式，预设3种模式，默认normal\r\n  private _docMode = DocModeType.Normal;\r\n  @Input()\r\n  set docMode(value) {\r\n    switch (value) {\r\n      case DocModeType.Normal:\r\n      case DocModeType.Admin:\r\n      case DocModeType.RevisionOnly:\r\n        this._docMode = value;\r\n        break;\r\n      default:\r\n        this._docMode = DocModeType.Normal;\r\n    }\r\n  }\r\n  get docMode() {\r\n    return this._docMode;\r\n  }\r\n  private _renameFromDialog = \"\";\r\n  // 记录列字段\r\n  private _previewColumnsFields = [];\r\n  /**\r\n   * 预置列信息\r\n   * 调整：\r\n   * 1、把列上的checkbox属性去掉，改为只有启用批量选择时，第一列才会有多选，不允许其他列有多选\r\n   * 2、解决field重名问题，通过判断是否extend=true来判断，是否是自定义列，如果是自定义列，不使用默认的模版\r\n   */\r\n  private _presetPreviewColumns:Array<ColumnData> = [\r\n    { field: \"name\", width: 200, title: \"文件名\"},\r\n    { field: \"size\", width: 100, title: \"大小\" },\r\n    { field: \"createTime\", width: 100, title: \"日期\" },\r\n    { field: \"state\", width: 100, title: \"状态\" },\r\n    { field: \"action\", width: 120, title: \"操作\" },\r\n  ];\r\n  // 内部记录列信息,与命令构件约定\r\n  private _previewColumns = [];\r\n  @Input()\r\n  set previewColumns(value) {\r\n    if (value) {\r\n      this._previewColumns = [...value];\r\n    } else {\r\n      this._presetPreviewColumns = [...this._presetPreviewColumns];\r\n    }\r\n    this.getFieldsFromColumns();\r\n  }\r\n  get previewColumns() {\r\n    return this._previewColumns;\r\n  }\r\n  // 格式化预览数据\r\n  private _fileInfos: FUploadFileExtend[] = [];\r\n  // 处理扩展数据 数组\r\n  @Input() extendInfos;\r\n\r\n  @Input()\r\n  set fileInfos(val: FUploadFileExtend[]) {\r\n    this._fileInfos = this.formatPreviewDatas(val);\r\n    this._renameFromDialog = \"\";\r\n  }\r\n  get fileInfos(): FUploadFileExtend[] {\r\n    return this._fileInfos;\r\n  }\r\n  /**\r\n   * 附件预览配置---------------------------------------开始\r\n   */\r\n  @Input() previewDateFormat = \"yyyy-MM-dd\";\r\n  // 只读的状态，控制附件是否可删除\r\n  // 默认处于查看状态\r\n  @Input() previewReadonly = true;\r\n\r\n  @Input() previewVisible = true;\r\n  // 是否启用批量操作\r\n  @Input() previewEnableMulti = true;\r\n  // 预览显示类别\r\n  @Input() previewShowType = \"list\";\r\n  // 启用重命名\r\n  @Input() previewEnableRename = true;\r\n  // 默认重命名\r\n  @Input() previewDefaultRename = \"\";\r\n  // 预览是否显示修订记录\r\n  @Input() previewShowComments = false;\r\n  // 预览是否在非模态窗口\r\n  @Input() previewModeless=false;\r\n  // 附件预览，预览事件\r\n  @Output() filePreviewEvent = new EventEmitter<FUploadFileExtend>();\r\n  // 附件预览，下载事件，抛出对象给第三方处理\r\n  @Output() fileDownloadEvent = new EventEmitter<{\r\n    fileInfos: FUploadFileExtend[];\r\n    name: string;\r\n  }>();\r\n  // 附件预览，多选事件\r\n  @Output() fPreviewMultiSelectedEvent = new EventEmitter<\r\n    FUploadFileExtend[]\r\n  >();\r\n  // 当前行\r\n  @Output() fSelectedEvent=new EventEmitter<FUploadFileExtend>();\r\n  // 附件预览，删除事件，抛出对象给第三方处理\r\n  @Output() fileRemoveEvent = new EventEmitter<FUploadFileExtend[]>();\r\n  // 全选状态\r\n  previewSelectAllBtnChecked = false;\r\n  // 记录选中数据\r\n  previewMultiSelected: FUploadFileExtend[] = [];\r\n  // 记录当前行数据\r\n  previewCurrent:string=\"\";\r\n  // 构造预览的配置数据\r\n  get previewSettings() {\r\n    return {\r\n      readonly: this.previewReadonly,\r\n      visible: this.previewVisible,\r\n      enableMulti: this.previewEnableMulti,\r\n      enableRename: this.previewEnableRename,\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * 下载或者删除的状态，应用在如下场景\r\n   * 比如：只要允许下载或者删除，就可以显示多选框\r\n   */\r\n  get downloadOrDeleteState(){\r\n    //删除没有单独控制的时候跟着下载的状态走\r\n    if(this.noDelete=='default') return !this.noDownload;\r\n    return !this.noDownload||!this.noDelete;\r\n  }\r\n  /**\r\n   * 附件预览配置---------------------------------------结束\r\n   */\r\n\r\n  /**\r\n   * 附件上传配置---------------------------------------开始\r\n   */\r\n  // 附件上传选择指令\r\n  @ViewChild(FFileSelectDirective) fileUpload: FFileSelectDirective;\r\n  // 附件上传部分禁用状态\r\n  @Input() uploadDisabled = false;\r\n  private tUploadVisible = true;\r\n\r\n  // 附件上传部分是否可见\r\n  @Input()\r\n  set uploadVisible(value) {\r\n    this.tUploadVisible = value;\r\n    if (!value) {\r\n      this.uploadReset();\r\n    }\r\n  }\r\n  get uploadVisible() {\r\n    return this.tUploadVisible;\r\n  }\r\n  // 需要重置,通过不断的赋值来改变\r\n  @Input() uploadNeedReset: Observable<any> = new Subject();\r\n  // 启用选择文件按钮\r\n  @Input() uploadEnableSelect = true;\r\n  // 选择文件按钮上传问题\r\n  @Input() uploadSelectText = \"上传附件\";\r\n  // 启用多选\r\n  @Input() uploadEnableMulti = true;\r\n  // 已经上传文件\r\n  @Input() uploadedCount = 0;\r\n  // 公共的扩展数据\r\n  @Input() extendDatas: {\r\n    [key: string]: any;\r\n    extProperty?: DocMetaProperty | null; //\r\n  };\r\n\r\n  /** 整个控件禁用 */\r\n  @Input() disabled = false;\r\n  /** 禁止下载 */\r\n  @Input() noDownload = false;\r\n  /** 禁止预览 */\r\n  @Input() noPreview = false;\r\n  /**禁止删除,约定default是默认，按照noDownload的状态走 */\r\n  @Input() noDelete='default';\r\n  /**\r\n   * 是否内部排序\r\n   * 目的：命令构件会根据新指令指定字段进行排序，不需要进行内部排序。为了区分内外排序。\r\n   */\r\n @Input() enableSorting=true;\r\n\r\n  @Input()\r\n  set uploadOptions(uploadOpts: UploaderOptions) {\r\n    if (uploadOpts) {\r\n      if (uploadOpts.hasOwnProperty(\"allowedContentTypes\")) {\r\n        this.allowedContentTypes = uploadOpts.allowedContentTypes.join(\",\");\r\n        this.allowedContentTypes =\r\n          this.allowedContentTypes == \"\" ? \"*\" : this.allowedContentTypes;\r\n      }\r\n      if (uploadOpts.hasOwnProperty(\"maxUploads\")) {\r\n        this.maxUploads = uploadOpts.maxUploads;\r\n      }\r\n      if (uploadOpts.hasOwnProperty(\"maxFileSize\")) {\r\n        this.maxFileSize = FFileUtils.humanizeBytes(\r\n          1024 * 1024 * uploadOpts.maxFileSize\r\n        );\r\n      }\r\n      if(uploadOpts.hasOwnProperty(\"notAllowedCharsInFileName\")){\r\n        let tNotAllowed=uploadOpts['notAllowedCharsInFileName'];\r\n        this.notAllowedCharsInFileName=tNotAllowed&&tNotAllowed.length>0?[...tNotAllowed]:[];\r\n      }\r\n      this.selfUploadOpts = Object.assign(this.selfUploadOpts, uploadOpts);\r\n    }\r\n  }\r\n  get uploadOptions() {\r\n    return this.selfUploadOpts;\r\n  }\r\n   /** 启用分块上传 */\r\n   @Input() enableSliceUpload = false;\r\n   /** 分块上传每片大小，单位：M, 默认 1M/块 */\r\n   @Input() chunkSize = 1;\r\n  // 展示用户自定义的信息\r\n  @Input() customInfo: any;\r\n  // 附件上传中，上传完成抛出的事件\r\n  @Output() fUploadDoneEvent = new EventEmitter<FUploadFileExtend[]>();\r\n  // 附件上传中，删除附件事件\r\n  @Output() fUploadRemovedEvent = new EventEmitter<FUploadFileExtend[]>();\r\n\r\n  /** 文件放下事件 */\r\n  @Output() afterOrdered = new EventEmitter();\r\n\r\n  @ViewChild(\"uaptb\") uploadAndPreviewTbodyRef: ElementRef<any>;\r\n\r\n  private uploadAndPreviewTableHeader: ElementRef = null;\r\n  private uploadAndPreviewTableHeaderCreated$ = new Subject();\r\n  @ViewChild(\"uapth\") set uploadAndPreviewTheadRef(th: ElementRef) {\r\n    if (th) {\r\n      this.uploadAndPreviewTableHeader = th;\r\n      this.setColumnWidth();\r\n      this.ro.observe(th.nativeElement);\r\n      this.uploadAndPreviewTableHeaderCreated$.next(th);\r\n    } else {\r\n      this.uploadAndPreviewTableHeader = null;\r\n      if (this.ro) {\r\n        this.ro.disconnect();\r\n      }\r\n      this.uploadAndPreviewTableHeaderCreated$.next(null);\r\n    }\r\n  }\r\n  get uploadSettings() {\r\n    return {\r\n      disabled: this.uploadDisabled,\r\n      visible: this.uploadVisible,\r\n      enableMulti: this.uploadEnableMulti,\r\n      extendDatas: this.extendDatas,\r\n    };\r\n  }\r\n  // 允许上传的文件类型\r\n  allowedContentTypes = \"*\";\r\n  // 默认不限制附件上传个数\r\n  maxUploads = 0;\r\n  // 单位KB，默认是12M\r\n  maxFileSize = \"12MB\";\r\n  // 记录文件个数\r\n  uploadFiles: UploadOutput[];\r\n  // 附件名称中不允许的字符\r\n  notAllowedCharsInFileName=[];\r\n  // 标记通过选择按钮处理的事件\r\n  uploadSelectInput: EventEmitter<UploadInput>;\r\n  private selfUploadOpts: UploaderOptions = {};\r\n\r\n  private ro: ResizeObserver | null = null;\r\n\r\n  private localSer: LocaleService = null;\r\n\r\n  private dateHlp: DateTimeHelperService;\r\n\r\n  tips = {\r\n    download: \"下载\",\r\n    preview: \"预览\",\r\n    remove: \"删除\",\r\n    edit: \"编辑\",\r\n    notedit: \"此类型文件不支持在线编辑\",\r\n  };\r\n  // 处理基路径\r\n  perfixStr='';\r\n  /**\r\n   * 附件上传配置---------------------------------------结束\r\n   */\r\n\r\n  /**\r\n   *\r\n   * @param el\r\n   * @param uploadAPISer\r\n   * @param fileUploaderSer\r\n   * @param notifyService\r\n   * @param ngZone\r\n   */\r\n  constructor(\r\n    private el: ElementRef,\r\n    private uploadAPISer: FFileUploadAPIService,\r\n    private fileUploaderSer: FFileUploaderService,\r\n    private notifyService: NotifyService,\r\n    private ngZone: NgZone,\r\n    private modalSer: BsModalService,\r\n    private cd: ChangeDetectorRef,\r\n    @Optional() private inject:Injector\r\n  ) {\r\n    if (!Array.prototype.includes) {\r\n      Object.defineProperty(Array.prototype, \"includes\", {\r\n        value: function (valueToFind, fromIndex) {\r\n          if (this == null) {\r\n            throw new TypeError('\"this\" is null or not defined');\r\n          }\r\n          var o = Object(this);\r\n          var len = o.length >>> 0;\r\n          if (len === 0) {\r\n            return false;\r\n          }\r\n          var n = fromIndex | 0;\r\n          var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\r\n          function sameValueZero(x, y) {\r\n            return (\r\n              x === y ||\r\n              (typeof x === \"number\" &&\r\n                typeof y === \"number\" &&\r\n                isNaN(x) &&\r\n                isNaN(y))\r\n            );\r\n          }\r\n          while (k < len) {\r\n            if (sameValueZero(o[k], valueToFind)) {\r\n              return true;\r\n            }\r\n            k++;\r\n          }\r\n          return false;\r\n        },\r\n      });\r\n    }\r\n    if(this.inject){\r\n      if(WEBAPI_PREFIX_TOKEN){\r\n          this.perfixStr = this.inject.get(WEBAPI_PREFIX_TOKEN, '');\r\n      }\r\n   }\r\n    this.uploadFiles = [];\r\n    this.uploadSelectInput = new EventEmitter<UploadInput>();\r\n    // 重置----------可能有问题\r\n    this.uploadNeedReset.subscribe((data) => {\r\n      this.uploadReset();\r\n    });\r\n\r\n    this.ro = new ResizeObserver((e) => {\r\n      this.setColumnWidth();\r\n    });\r\n    this.localSer = this.notifyService.localeService;\r\n    FFileUtils.getLocalState(this.localSer);\r\n    this._presetPreviewColumns.forEach((col) => {\r\n      col.title = FFileUtils.getLocalStr(`uploadAndPreview.columns.${col.field}`);\r\n    });\r\n\r\n    this.tips.download =FFileUtils.getLocalStr(\"uploadAndPreview.tips.download\");\r\n    this.tips.preview =FFileUtils.getLocalStr(\"uploadAndPreview.tips.preview\");\r\n    this.tips.remove = FFileUtils.getLocalStr(\"uploadAndPreview.tips.remove\");\r\n    this.tips.edit =FFileUtils.getLocalStr(\"uploadAndPreview.tips.edit\");\r\n    this.tips.notedit =FFileUtils.getLocalStr(\"uploadAndPreview.tips.notedit\");\r\n\r\n    this.dateHlp = new DateTimeHelperService();\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this._previewColumns.length == 0) {\r\n      this.previewColumns = [...this._presetPreviewColumns];\r\n    }\r\n  }\r\n  ngAfterViewInit() { }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    const {\r\n      previewReadonly,\r\n      previewVisible,\r\n      previewEnableMulti,\r\n      previewDefaultRename,\r\n    } = changes;\r\n    if (previewReadonly || previewVisible || previewEnableMulti) {\r\n      this.previewUpdateRefresh();\r\n    }\r\n    if (previewDefaultRename) {\r\n      // 重置预览重命名记录\r\n      this._renameFromDialog = \"\";\r\n    }\r\n  }\r\n  /**\r\n   * 选择或取消所有\r\n   * @param ev\r\n   */\r\n  selectOrCancelAllHandler(ev) {\r\n    if (ev[\"checked\"]) {\r\n      // 全选\r\n      this.fileInfos.forEach((item) => {\r\n        item.checked = true;\r\n      });\r\n      this.previewMultiSelected = [...this.fileInfos];\r\n      this.previewSelectAllBtnChecked = true;\r\n    } else {\r\n      // 取消\r\n      this.previewMultiSelected = [];\r\n      this.fileInfos.forEach((item) => {\r\n        item.checked = false;\r\n      });\r\n      this.previewSelectAllBtnChecked = false;\r\n    }\r\n    // 抛出多选\r\n    this.fPreviewMultiSelectedEvent.emit(this.previewMultiSelected);\r\n    // 解决附件在丛丛表时，从表处于编辑状态时，勾选附件界面不变更的问题\r\n    this.cd.detectChanges();\r\n  }\r\n  /**\r\n   * 格式化文件大小\r\n   * @param bytes\r\n   */\r\n  formateBytes(bytes) {\r\n    return FFileUtils.humanizeBytes(bytes);\r\n  }\r\n  /**\r\n   * 获取文档类型对应的class\r\n   * @param fileName\r\n   */\r\n  getFileTypeClassName(fileName) {\r\n    let clsName = \"ffilepreview--filetype\";\r\n    // 如果名称为空\r\n    if (!fileName) {\r\n      return clsName + \"-any\";\r\n    }\r\n    let lastDotIndex = fileName.lastIndexOf(\".\");\r\n    let fileSuffix = \"\";\r\n    if (lastDotIndex > -1) {\r\n      fileSuffix = fileName.substring(lastDotIndex + 1).toLocaleLowerCase();\r\n    }\r\n    switch (fileSuffix) {\r\n      case \"pdf\":\r\n        clsName += \"-pdf\";\r\n        break;\r\n      case \"jpeg\":\r\n      case \"jpg\":\r\n      case \"gif\":\r\n      case \"svg\":\r\n      case \"png\":\r\n      case \"bmp\":\r\n        clsName += \"-img\";\r\n        break;\r\n      case \"ppt\":\r\n      case \"pptx\":\r\n        clsName += \"-ppt\";\r\n        break;\r\n      case \"doc\":\r\n      case \"docx\":\r\n        clsName += \"-doc\";\r\n        break;\r\n      case \"xls\":\r\n      case \"xlsx\":\r\n        clsName += \"-xls\";\r\n        break;\r\n      case \"txt\":\r\n        clsName += \"-txt\";\r\n        break;\r\n      case \"zip\":\r\n        clsName += \"-zip\";\r\n        break;\r\n      case \"wps\":\r\n        clsName += \"-wps\";\r\n        break;\r\n      case \"wpt\":\r\n        clsName += \"-wpt\";\r\n        break;\r\n      default:\r\n        clsName += \"-any\";\r\n    }\r\n    return clsName;\r\n  }\r\n  /**\r\n   * 格式化预览数据\r\n   * @param val\r\n   */\r\n  private formatPreviewDatas(val) {\r\n    if (!val.length || this.previewMultiSelected.length !== val.length) {\r\n      this.previewSelectAllBtnChecked = false;\r\n    }\r\n\r\n    let formatValue = val.map((item: FUploadFileExtend) => {\r\n      if (!item.hasOwnProperty(\"size\")) {\r\n        item[\"size\"] = undefined;\r\n      }\r\n      if (!item.hasOwnProperty(\"createTime\")) {\r\n        item[\"createTime\"] = undefined;\r\n      }\r\n\r\n      return item;\r\n    });\r\n\r\n    if (this.enableOrder && this.orderField) {\r\n      formatValue.sort(this.sortPreviewData(this.orderField));\r\n    } else if(this.enableSorting){\r\n      formatValue.sort(this.sortPreviewData(\"createTime\"));\r\n    }\r\n    if (this.previewEnableMulti) {\r\n      let newFormatValue = formatValue.map((item: FUploadFileExtend) => {\r\n        item[\"checked\"] =\r\n          !!this.previewMultiSelected.find((n) => n.id === item.id) ||\r\n          this.previewSelectAllBtnChecked;\r\n        return item;\r\n      });\r\n      // 归集已选数据\r\n      // if (this.previewSelectAllBtnChecked) {\r\n      //     this.previewMultiSelected = [...newFormatValue].filter(n => n.checked);\r\n      // } else {\r\n      //     this.previewMultiSelected = [];\r\n      // }\r\n      this.previewMultiSelected = [...newFormatValue].filter((n) => n.checked);\r\n      // 返回格式化数据\r\n      return newFormatValue;\r\n    } else {\r\n      return formatValue;\r\n    }\r\n  }\r\n\r\n  private getValue(field: string, data: any) {\r\n    if (!data) {\r\n      return \"\";\r\n    }\r\n    let resultVal = \"\";\r\n    if (field.indexOf(\".\") === -1 && data.hasOwnProperty(field)) {\r\n      resultVal = data[field];\r\n    } else {\r\n      resultVal = field.split(\".\").reduce((obj, key) => {\r\n        if (obj) {\r\n          return obj[key];\r\n        } else {\r\n          return null;\r\n        }\r\n      }, data);\r\n    }\r\n    return resultVal;\r\n  }\r\n\r\n  private sortPreviewData(key) {\r\n    const _this = this;\r\n    return (x, y) => {\r\n      // 如果没有这个key属性\r\n      if (!x.hasOwnProperty(key)||x[key]===undefined||x[key]===null) {\r\n        return 1;\r\n      }\r\n      if (!y.hasOwnProperty(key)||y[key]===undefined||y[key]===null) {\r\n        return -1;\r\n      }\r\n\r\n      if (_this[\"orderField\"] && key === _this[\"orderField\"]) {\r\n        let a = \"\";\r\n        let b = \"\";\r\n        if (key.indexOf(\".\") > -1) {\r\n          a = _this.getValue(key, x);\r\n          b = _this.getValue(key, y);\r\n        } else {\r\n          a = x[key];\r\n          b = y[key];\r\n        }\r\n        return a > b ? 1 : -1;\r\n      } else {\r\n        var oDate1 = new Date(x[key]);\r\n        var oDate2 = new Date(y[key]);\r\n        return oDate1.getTime() > oDate2.getTime() ? -1 : 1;\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 格式化处理数据\r\n   */\r\n  private getFieldsFromColumns() {\r\n    this._previewColumnsFields = this._previewColumns.map(\r\n      (item) => item[\"field\"]\r\n    );\r\n  }\r\n  /**\r\n   * 根据列获取对应的列模板\r\n   * @param columnInfo\r\n   */\r\n  getColumnTemplate(columnInfo, type = \"preview\") {\r\n    let result;\r\n    if(columnInfo.hasOwnProperty('extend')&&columnInfo.extend){\r\n      return \"\";\r\n    }\r\n    if (type == \"preview\") {\r\n      switch (columnInfo[\"field\"]) {\r\n        case \"state\":\r\n          result = this[\"uapStateTmpl\"];\r\n          break;\r\n        case \"name\":\r\n          result = this[\"previewFileNameTmpl\"];\r\n          break;\r\n        case \"action\":\r\n          result = this[\"previewActionTmpl\"];\r\n          break;\r\n        case \"size\":\r\n          result = this[\"fileSizeTmpl\"];\r\n          break;\r\n        case \"createTime\":\r\n          result = this[\"previewDateTmpl\"];\r\n          break;\r\n        default:\r\n          result = \"\";\r\n      }\r\n    } else {\r\n      switch (columnInfo[\"field\"]) {\r\n        case \"state\":\r\n          result = this[\"uapStateTmpl\"];\r\n          break;\r\n        case \"name\":\r\n          result = this[\"uploadFileNameTmpl\"];\r\n          break;\r\n        case \"size\":\r\n          result = this[\"fileSizeTmpl\"];\r\n          break;\r\n        default:\r\n          result = \"\";\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  /**\r\n   * 多选变更\r\n   */\r\n  previewMultiSelectChange(ev) {\r\n    let hasInArray = this.previewMultiSelected.findIndex(\r\n      (item) => item[\"id\"] == ev[\"id\"]\r\n    );\r\n    let findInArray = this.fileInfos.findIndex(\r\n      (item) => item[\"id\"] == ev[\"id\"]\r\n    );\r\n    if (findInArray > -1) {\r\n      this.fileInfos[findInArray][\"checked\"] = ev[\"checked\"];\r\n    }\r\n\r\n    if (ev[\"checked\"]) {\r\n      //选入\r\n      if (hasInArray == -1) {\r\n        if (findInArray > -1) {\r\n          this.previewMultiSelected.push(this.fileInfos[findInArray]);\r\n        }\r\n        \r\n      }\r\n    } else {\r\n      //移出\r\n      if (hasInArray > -1) {\r\n        this.previewMultiSelected.splice(hasInArray, 1);\r\n      }\r\n    }\r\n    // 判断是否全选\r\n    if (this.fileInfos.length > 0) {\r\n      if (this.previewMultiSelected.length == this.fileInfos.length) {\r\n        //都全选\r\n        this.previewSelectAllBtnChecked = true;\r\n      } else {\r\n        // 未全选\r\n        this.previewSelectAllBtnChecked = false;\r\n      }\r\n    }\r\n    // 只要点击就有当前行 此处肯定有值\r\n    this.fileSelected(null,this.fileInfos[findInArray]);\r\n    // 抛出多选\r\n    this.fPreviewMultiSelectedEvent.emit(this.previewMultiSelected);\r\n    // 解决附件在丛丛表时，从表处于编辑状态时，勾选附件界面不变更的问题\r\n    this.cd.detectChanges();\r\n  }\r\n  /**处理附件上传---------------------------------------------------------开始-- */\r\n  /**\r\n   * 统一触发 附件选择和拖拽附件的事件\r\n   * @param ev\r\n   */\r\n  private inputUploadEventEmit(ev: UploadInput) {\r\n    // 如果文件上传启用\r\n    if (this.uploadEnableSelect) {\r\n      this.uploadSelectInput.emit(ev);\r\n    }\r\n    // this.uploadDragInput.emit(ev);\r\n  }\r\n  /**单个文件上传 */\r\n  startUpload(file: UploadFile): void {\r\n    /**\r\n     * Todo:后续可以从上传区块上取内容进行扩展\r\n     */\r\n    const event: UploadInput = this.uploadAPISer.getAssignAPI(\r\n      \"multipartUpload\",\r\n      {\r\n        file: file,\r\n        type: this.enableSliceUpload ? 'sliceUpload': 'multipartUpload',\r\n        data: this.extendDatas,\r\n        chunkSize: this.chunkSize\r\n      }\r\n    );\r\n    this.inputUploadEventEmit(event);\r\n  }\r\n  /**\r\n   * 当主从表切换数据当前行时，\r\n   * 解决刷新时候已勾选数据的问题\r\n   */\r\n  previewUpdateRefresh(){\r\n      this.previewMultiSelected = [];    \r\n      this.previewSelectAllBtnChecked = false;\r\n      this._renameFromDialog = \"\";\r\n      this.fileInfos.forEach((item) => {\r\n        item.checked = false;\r\n      });\r\n  }\r\n  // 重置方法\r\n  uploadReset() {\r\n    this.uploadFiles = [];\r\n    // 如果文件上传启用\r\n    if (this.uploadEnableSelect) {\r\n      this.fileUpload && this.fileUpload.reset();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 触发绑定\r\n   */\r\n  triggerFileSelect(ev) {\r\n    ev && ev.stopPropagation();\r\n    // 禁用时\r\n    if (this.uploadDisabled) {\r\n      return false;\r\n    }\r\n    this.fileUpload.elementRef.nativeElement.click();\r\n  }\r\n  /**\r\n   * 选择附件按钮，处理抛出事件\r\n   * @param output\r\n   */\r\n  selectUploadOutput(output: UploadOutput): void {\r\n    this.uploadOutputHandler(output);\r\n  }\r\n  /**\r\n   * allAddedToQueue 选中文件追加到队列\r\n   * @param output\r\n   */\r\n  private uploadOutputHandler(output: UploadOutput): void {\r\n    if (output.type === \"addedToQueue\" && typeof output.file !== \"undefined\") {\r\n      this.uploadFiles.push({ type: output.type, file: output.file });\r\n      // 开始上传\r\n      this.startUpload(output.file);\r\n    } else if (output.type === \"start\") {\r\n      // 开始上传\r\n      this.updateFilesState(output, \"\");\r\n    } else if (output.type == \"done\") {\r\n      // 上传完成\r\n      this.updateFilesState(output, \"done\");\r\n      this.fUploadDoneEvent.emit(\r\n        FFileUtils.changeUploadFileToFileExtend(output.files)\r\n      );\r\n\r\n      const newAddFiles = output.files.map((n) => {\r\n        return {\r\n          checked: false,\r\n          id: n.id,\r\n          name: n.name,\r\n          size: n.size,\r\n          createTime: this.dateHlp.formatTo(new Date(), \"yyyy-MM-dd HH:mm:ss\"),\r\n        };\r\n      });\r\n\r\n      this.fileInfos = [...newAddFiles, ...this.fileInfos];\r\n\r\n      // 上传完成后不在当前页面上显示\r\n      this.hideAfterLoaded(output);\r\n    } else if (\r\n      output.type === \"cancelled\" ||\r\n      output.type === \"removed\" ||\r\n      output.type == \"error\"\r\n    ) {\r\n      // 删除或者移除文件\r\n      this.uploadFiles = this.uploadFiles.filter((fileOutput: UploadOutput) => {\r\n        return (\r\n          output.files.findIndex((item) => fileOutput.file.id == item.id) < 0\r\n        );\r\n      });\r\n      // 给出提示\r\n      this.showNotify(output);\r\n    } else if (\r\n      output.type === \"rejected\" &&\r\n      typeof output.file !== \"undefined\"\r\n    ) {\r\n      // 上传被拒绝\r\n      this.showNotify(output);\r\n    }\r\n  }\r\n  /**\r\n   * 临时删除附件\r\n   * @param output\r\n   */\r\n  private hideAfterLoaded(output: UploadOutput): void {\r\n    // 删除或者移除文件\r\n    let ids = output.files.map((fileItem) => fileItem.id);\r\n    this.uploadFiles = this.uploadFiles.filter((fileOutput: UploadOutput) => {\r\n      let tIndex = ids.findIndex((tId) => tId == fileOutput.file.id);\r\n      return tIndex > -1 ? false : true;\r\n    });\r\n    const event: UploadInput = this.uploadAPISer.getAssignAPI(\"hide\", {\r\n      type: \"hide\",\r\n      id: ids.join(\",\"),\r\n    });\r\n    this.inputUploadEventEmit(event);\r\n  }\r\n  /**\r\n   * 处理上传\r\n   * @param output\r\n   */\r\n  private showNotify(output) {\r\n    let notifyType = \"warning\";\r\n    if (output.type == \"cancelled\" || output.type == \"removed\") {\r\n      notifyType = \"success\";\r\n    }\r\n    let message = output.hasOwnProperty(\"message\") ? output[\"message\"] : \"\";\r\n    this.notifyService[notifyType](<NotifyOptions>{\r\n      msg: message,\r\n      timeout: 3000,\r\n    });\r\n  }\r\n  /**\r\n   * 更新附件的状态\r\n   * @param output\r\n   * @param eventType\r\n   */\r\n  private updateFilesState(output: UploadOutput, eventType) {\r\n    let startFiles = [];\r\n    if (output.hasOwnProperty(\"files\") && output.files.length > 0) {\r\n      // 此处更新界面可能有性能问题\r\n      startFiles = output.files;\r\n    } else if (typeof output.file !== \"undefined\") {\r\n      startFiles = [output.file];\r\n    }\r\n    eventType = eventType ? eventType : output.type;\r\n    startFiles.map((item) => {\r\n      const index = this.uploadFiles.findIndex(\r\n        (fileOutput) =>\r\n          typeof item !== \"undefined\" && fileOutput.file.id === item.id\r\n      );\r\n      // 变更状态\r\n      if (index > -1) {\r\n        this.uploadFiles[index] = { type: eventType, file: item };\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * 是否判断有类型限制\r\n   */\r\n  judgeContentTypeLimit() {\r\n    let tTypes = this.allowedContentTypes.split(\",\");\r\n    let hasAllIndex = tTypes.findIndex((item) => {\r\n      return item == \"*\";\r\n    });\r\n    return hasAllIndex == -1;\r\n  }\r\n  /**\r\n   * 判断是否有文件大小的限制\r\n   */\r\n  judegeFileSizeLimit() {\r\n    return this.maxFileSize != \"0 Byte\";\r\n  }\r\n  /**\r\n   * 获取上传进度\r\n   */\r\n  getUploadProgress(uploadInfo: UploadOutput) {\r\n    if (uploadInfo[\"type\"] == \"done\") {\r\n      return 100;\r\n    }\r\n    if (uploadInfo[\"file\"][\"progress\"] && uploadInfo[\"file\"][\"progress\"]) {\r\n      if (uploadInfo[\"file\"][\"progress\"][\"status\"] == UploadStatus.Uploading) {\r\n        let tPercentage = uploadInfo[\"file\"][\"progress\"][\"data\"][\"percentage\"];\r\n        return tPercentage > 5 ? tPercentage : 5;\r\n      }\r\n      return 5;\r\n    }\r\n    return 5;\r\n  }\r\n  /**\r\n   * 处理显示\r\n   * @param ev\r\n   * @param fileInfo\r\n   */\r\n  getUploadFileSizeProgress(uploadInfo: UploadOutput) {\r\n    if (!uploadInfo) {\r\n      return \"\";\r\n    }\r\n    if (uploadInfo[\"type\"] == \"done\") {\r\n      return FFileUtils.humanizeBytes(uploadInfo.file.size);\r\n    }\r\n    let tPercentage = 5;\r\n    if (uploadInfo[\"file\"][\"progress\"] && uploadInfo[\"file\"][\"progress\"]) {\r\n      if (uploadInfo[\"file\"][\"progress\"][\"status\"] == UploadStatus.Uploading) {\r\n        tPercentage = uploadInfo[\"file\"][\"progress\"][\"data\"][\"percentage\"];\r\n        tPercentage = tPercentage > 5 ? tPercentage : 5;\r\n      }\r\n    }\r\n    return (\r\n      FFileUtils.humanizeBytes((uploadInfo.file.size * tPercentage) / 100) +\r\n      \"/\" +\r\n      FFileUtils.humanizeBytes(uploadInfo.file.size)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 处理附件上传---------------------------------------------------------结束--\r\n   */\r\n\r\n  /**\r\n   * 预览\r\n   * @param ev\r\n   * @param fileInfo\r\n   */\r\n  filePreviewHandler(ev: Event, fileInfo: FUploadFileExtend) {\r\n    // ev.stopImmediatePropagation();\r\n    //------------------------------TODO\r\n    if (this.noPreview) {\r\n      return;\r\n    }\r\n    fileInfo.showDownload = !this.noDownload;\r\n    fileInfo.showComments = this.previewShowComments;\r\n    fileInfo.modeless=this.previewModeless;\r\n    this.filePreviewEvent.emit(fileInfo);\r\n  }\r\n  /**\r\n   * 下载\r\n   * @param ev\r\n   * @param fileInfo\r\n   */\r\n  fileDownloadHandler(ev: Event, fileInfo: FUploadFileExtend) {\r\n   // ev.stopImmediatePropagation();\r\n    this.fileDownloadEvent.emit({ fileInfos: [fileInfo], name: \"\" });\r\n  }\r\n  /**\r\n   * 删除数据\r\n   * @param ev\r\n   * @param fileInfo\r\n   */\r\n  fileRemoveHandler(ev: Event, fileInfo: FUploadFileExtend) {\r\n   //ev.stopImmediatePropagation();\r\n    if (fileInfo.checked) {\r\n      this.previewMultiSelected = this.previewMultiSelected.filter(\r\n        (n) => n.id !== fileInfo.id\r\n      );\r\n    }\r\n    this.fileRemoveEvent.emit([fileInfo]);\r\n  }\r\n  /**\r\n   * 批量删除\r\n   * @param ev\r\n   */\r\n  multiFileRemoveHandler(ev: Event) {\r\n    ev.stopImmediatePropagation();\r\n    this.fileRemoveEvent.emit(this.previewMultiSelected);\r\n  }\r\n  fileMultiDownloadHandler(ev: Event) {\r\n    ev.stopImmediatePropagation();\r\n    let rename = \"\";\r\n    if (this.previewMultiSelected.length == 1) {\r\n      this.fileDownloadEvent.emit({\r\n        fileInfos: this.previewMultiSelected,\r\n        name: rename,\r\n      });\r\n      return;\r\n    }\r\n    // 启用了重命名\r\n    if (this.previewEnableRename) {\r\n      let self = this;\r\n      const dlgRef = this.modalSer.show(MultiDownloadInfoComponent, {\r\n        width: 440,\r\n        height: 200,\r\n        showMaxButton: false,\r\n        title:FFileUtils.getLocalStr(\"uploadAndPreview.downloadTitle\"),\r\n        initialState: {\r\n          fileTypeCls: this.getFileTypeClassName(\r\n            self.previewMultiSelected[0].name\r\n          ),\r\n          downloadInfos: self.previewMultiSelected,\r\n          downloadName:\r\n            self._renameFromDialog && !self.previewDefaultRename\r\n              ? self._renameFromDialog\r\n              : self.previewDefaultRename,\r\n        },\r\n        showButtons: true,\r\n        buttons: [\r\n          {\r\n            text: FFileUtils.getLocalStr(\"uploadAndPreview.cancel\"),\r\n            cls: \"btn btn-secondary\",\r\n            handle: () => {\r\n              dlgRef.close();\r\n            },\r\n          },\r\n          {\r\n            text: FFileUtils.getLocalStr(\"uploadAndPreview.ok\"),\r\n            cls: \"btn btn-primary\",\r\n            handle: () => {\r\n              const contentRef = dlgRef.content as MultiDownloadInfoComponent;\r\n              rename = contentRef.getDownloadName();\r\n              self.fileDownloadEvent.emit({\r\n                fileInfos: self.previewMultiSelected,\r\n                name: rename,\r\n              });\r\n              dlgRef.close();\r\n            },\r\n          },\r\n        ],\r\n      });\r\n    } else {\r\n      //未启用重命名\r\n      rename = this.getName(this.previewMultiSelected[0][\"name\"]);\r\n      this.fileDownloadEvent.emit({\r\n        fileInfos: this.previewMultiSelected,\r\n        name: rename,\r\n      });\r\n    }\r\n  }\r\n  private getName(name: string) {\r\n    if (name.lastIndexOf(\".\") > 0) {\r\n      return name.substring(0, name.lastIndexOf(\".\"));\r\n    }\r\n    return \"\";\r\n  }\r\n  showPreviewStateColumn(columnInfo) {\r\n    if (\r\n      columnInfo[\"field\"] == \"state\" &&\r\n      (this.uploadDisabled || !this.uploadVisible || this.noDownload)\r\n    ) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** 拖拽排序后事件 */\r\n  onOrderFileDrop($event) {\r\n    const { removedIndex, addedIndex, payload } = $event;\r\n\r\n    const removedItem = this.fileInfos.splice(removedIndex, 1);\r\n    this.fileInfos.splice(addedIndex, 0, ...removedItem);\r\n\r\n    this.cd.detectChanges();\r\n\r\n    const newOrderItems = this.fileInfos.map((n) => n.id);\r\n    this.afterOrdered.emit({ data: newOrderItems });\r\n  }\r\n\r\n  private setColumnWidth() {\r\n    if (this.uploadAndPreviewTableHeader && this.enableOrder) {\r\n      const tableWidth =\r\n        this.uploadAndPreviewTableHeader.nativeElement.offsetWidth;\r\n      const cols =\r\n        this.uploadAndPreviewTableHeader.nativeElement.querySelectorAll(\"th\");\r\n      const trs =\r\n        this.uploadAndPreviewTbodyRef.nativeElement.querySelectorAll(\"tr\");\r\n\r\n      this.uploadAndPreviewTbodyRef.nativeElement.style.flexDirection =\r\n        \"column\";\r\n      this.uploadAndPreviewTbodyRef.nativeElement.style.display = \"flex\";\r\n      this.uploadAndPreviewTbodyRef.nativeElement.style.width =\r\n        tableWidth + \"px\";\r\n\r\n      Array.from(trs).forEach((tr: any) => {\r\n        tr.style.width = tableWidth + \"px\";\r\n        const tds = tr.querySelectorAll(\"td\");\r\n        Array.from(cols).forEach((th: any, index: number) => {\r\n          tds[index].style.width = th.offsetWidth + \"px\";\r\n\r\n          if (index === 0) {\r\n            tds[index].querySelector(\r\n              \".uploadAndpreview--title-container\"\r\n            ).style.width = th.offsetWidth - 56 + \"px\";\r\n          }\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  editFileHandler($event, fileInfo: FUploadFileExtend) {\r\n    // console.log($event, fileInfo);\r\n\r\n    window.open(\r\n      `${this.perfixStr}/platform/runtime/dfs/editpage/index.html?id=${fileInfo.id}&docMode=${this.docMode}`\r\n    );\r\n  }\r\n\r\n  canEdit(fileInfo: FUploadFileExtend) {\r\n    if (!fileInfo||!fileInfo.name) {\r\n      return false;\r\n    }\r\n    const editType = [\r\n      \"doc\",\r\n      \"docx\",\r\n      \"xls\",\r\n      \"xlsx\",\r\n      \"ppt\",\r\n      \"pptx\",\r\n      \"txt\",\r\n      \"wps\",\r\n      \"wpt\",\r\n    ];\r\n    const extendName = fileInfo.name\r\n      .substr(fileInfo.name.lastIndexOf(\".\") + 1)\r\n      .toLowerCase();\r\n    if (extendName) {\r\n      return editType.includes(extendName);\r\n    }\r\n\r\n    return false;\r\n  }\r\n  /**\r\n   * 点击当前行\r\n   * @param ev \r\n   * @param fileInfo \r\n   */\r\n  fileSelected(ev: Event,fileInfo:FUploadFileExtend){\r\n    if(ev){\r\n      ev.stopImmediatePropagation();\r\n      ev.stopPropagation();\r\n    }\r\n    if(!this.previewCurrent||fileInfo.id!=this.previewCurrent){\r\n      this.previewCurrent = fileInfo.id;\r\n      // 抛出当前行数据\r\n      this.fSelectedEvent.emit(fileInfo);\r\n    }\r\n  }\r\n  /**\r\n   * 返回模板上下文\r\n   * @param previewIndex \r\n   * @param colIndex \r\n   * @returns \r\n   */\r\n  getPreviewCtx(previewIndex,colIndex){\r\n    let curRowData=this.getRowData(previewIndex);\r\n    let columnInfo=this.previewColumns[colIndex];\r\n    let curValue=this.getRealDataValue(previewIndex,columnInfo['field'],curRowData);\r\n    return {\r\n      value:curValue,\r\n      rowData: curRowData,\r\n      settings:this.previewSettings,\r\n      column: columnInfo,\r\n      state: 'preview'\r\n    }\r\n  }\r\n  /**\r\n   * 放回当前行数据\r\n   * @param previewIndex \r\n   * @returns \r\n   */\r\n  getRowData(previewIndex){\r\n    return this.extendInfos&&this.extendInfos[previewIndex]?this.extendInfos[previewIndex]:this.fileInfos[previewIndex];\r\n  }\r\n  /**\r\n   * 获取真正的值\r\n   * @param previewIndex \r\n   * @param field \r\n   * @returns \r\n   */\r\n  getRealDataValue(previewIndex,field,rowData=null){\r\n    if(!rowData){\r\n      rowData=this.getRowData(previewIndex);\r\n    }   \r\n    if(!field||!rowData) return '';\r\n    let fieldArray=field.split('.');\r\n    if(fieldArray.length==1){\r\n      return rowData[fieldArray[0]];\r\n    }\r\n    let curItemVal=rowData;\r\n    for(var k=0;k<fieldArray.length;k++){\r\n      curItemVal=curItemVal[fieldArray[k]];\r\n      // 没有值或者没有此属性\r\n      if(curItemVal==null||curItemVal==undefined){\r\n        break;\r\n      }\r\n    }\r\n    if(k==fieldArray.length){\r\n      return curItemVal == null || curItemVal == undefined?\"\":curItemVal;\r\n    }else{\r\n      return '';\r\n    }\r\n  }\r\n  /**\r\n   * 解决附件上传更新时，自定义列没有字段值或者是预置列有自定义的情况\r\n   */\r\n  canUpdateSelfColumn(previewIndex,column){\r\n    let rowData=this.getRowData(previewIndex);\r\n    let field=column['field'];\r\n    if(!field||!rowData) return false;\r\n    let fieldArray=field.split('.');\r\n    // 假定A.B这种字段，只要A字段在，B一定在\r\n    if(rowData.hasOwnProperty(fieldArray[0])){\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n","import { Component, OnInit, Input, SimpleChanges, OnChanges } from '@angular/core';\r\n//进度条状态 默认normal\r\nexport type UploadProgressStatusType = 'success' | 'error' | 'active' | 'normal';\r\n\r\n// const statusColorMap = new Map([\r\n//   ['normal', '#388fff'],\r\n//   ['exception', '#f24645'],\r\n//   ['success', '#51bd78']\r\n// ]);\r\n@Component({\r\n  selector: 'upload-progress',\r\n  templateUrl: './upload-progress.component.html',\r\n  styleUrls: ['./upload-progress.component.css']\r\n})\r\nexport class UploadProgressComponent implements OnInit, OnChanges {\r\n  //是否显示进度条信息\r\n  @Input() showInfo: boolean = true;\r\n  //进度条状态 默认'normal'\r\n  @Input() status: UploadProgressStatusType;\r\n  //已完成的分段百分比\r\n  @Input() successPercent: number;\r\n  @Input() percent = 0;\r\n  @Input() maxWidth =0;\r\n  //存储的状态\r\n  private cachedStatus: UploadProgressStatusType = 'normal';\r\n  //计算的状态\r\n  private inferredStatus: UploadProgressStatusType = 'normal';\r\n\r\n  //获得进度条状态\r\n  get progressStatus(): UploadProgressStatusType {\r\n    return this.status || this.inferredStatus;\r\n  }\r\n  constructor() { }\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    const { status, percent, successPercent } = changes;\r\n    //状态变化\r\n    if (status) {\r\n      this.cachedStatus = this.status || this.cachedStatus;\r\n    }\r\n    //进度 已完成的分段百分比 变化\r\n    if (percent || successPercent) {\r\n      const fillAll = parseInt(this.percent.toString(), 10) >= 100;\r\n      if (fillAll) {\r\n        if ((this.isNotNil(this.successPercent) && this.successPercent! >= 100) || this.successPercent === undefined) {\r\n          this.inferredStatus = 'success';\r\n          // this.status = this.inferredStatus;\r\n        }\r\n      } else {\r\n        this.inferredStatus = this.cachedStatus;\r\n      }\r\n      this.status = this.inferredStatus;\r\n    }\r\n  }\r\n  ngOnInit() {\r\n  }\r\n\r\n  isNotNil<T>(value: T): value is NonNullable<T> {\r\n    return typeof value !== 'undefined' && value !== null;\r\n  }\r\n\r\n}\r\n","import {\r\n  Directive,\r\n  NgZone,\r\n  Injector,\r\n  Renderer2,\r\n  ElementRef,\r\n  AfterViewInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  OnDestroy,\r\n} from \"@angular/core\";\r\nimport {\r\n  dropHandlers,\r\n  smoothDnD as SmoothDndForVisible,\r\n  DropResult,\r\n  ContainerOptions,\r\n  constants,\r\n} from \"@farris/smooth-dnd\";\r\n\r\nconst { wrapperClass, animationClass } = constants;\r\nSmoothDndForVisible.dropHandler = dropHandlers.reactDropHandler().handler;\r\nSmoothDndForVisible.wrapChild = false;\r\n\r\nexport interface DragStartEndInfo {\r\n  isSource: boolean;\r\n  payload: any;\r\n  willAcceptDrop: boolean;\r\n}\r\n\r\n@Directive({\r\n  selector: \"[upfile-order-drag]\",\r\n})\r\nexport class UploadFileOrderDragDirective implements AfterViewInit, OnDestroy {\r\n  private container: any;\r\n  @Input('upfile-order-drag') enableDrag = false;\r\n  @Output() drop = new EventEmitter();\r\n  @Input() options: ContainerOptions = {\r\n    behaviour: \"move\",\r\n    dragHandleSelector: \".upfile-drag-handle\",\r\n    dropPlaceholder: {\r\n      className: \"drop-group-field\",\r\n    },\r\n    getGhostParent: () => {\r\n      return document.body;\r\n    },\r\n    getChildPayload: this.getChildPayload.bind(this),\r\n    shouldAcceptDrop: (sourceContainerOptions, payload) => {\r\n      return true;\r\n    },\r\n    onDropReady: (dropResult: DropResult) => {\r\n      this.ngzone.run(() => {\r\n        this.onDropReady(dropResult);\r\n      });\r\n    },\r\n    onDrop: (dropResult: DropResult) => {\r\n      this.ngzone.run(() => {\r\n        this.drop.emit(dropResult);\r\n      });\r\n    },\r\n    onDragEnter: () => {\r\n      this.ngzone.run(() => {\r\n        this.onDragEnter();\r\n      });\r\n    },\r\n    onDragStart: (info: DragStartEndInfo) => {\r\n      this.ngzone.run(() => {\r\n        this.onDragStart(info);\r\n      });\r\n    },\r\n    onDragEnd: (info: DragStartEndInfo) => {\r\n      this.ngzone.run(() => {\r\n        this.onDragEnd(info);\r\n      });\r\n    },\r\n  };\r\n\r\n  constructor(\r\n    private ngzone: NgZone,\r\n    private injector: Injector,\r\n    private render: Renderer2,\r\n    private el: ElementRef\r\n  ) {}\r\n  ngAfterViewInit() {\r\n    if (this.enableDrag) {\r\n        this.initDnD();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.disposeDnd();\r\n  }\r\n\r\n  private disposeDnd() {\r\n    if (this.container) {\r\n      this.container.dispose();\r\n      this.container = null;\r\n    }\r\n  }\r\n\r\n  private initDnD() {\r\n    this.disposeDnd();\r\n    this.container = SmoothDndForVisible(this.el.nativeElement, this.options);\r\n  }\r\n\r\n  private getChildPayload(index) {\r\n    return index;\r\n  }\r\n\r\n  private onDropReady(dropResult) {\r\n    // console.log('DROP READY', dropResult);\r\n  }\r\n\r\n  private onDragStart(info) {\r\n    // console.log(\"DRAG START\", info);\r\n  }\r\n\r\n  private onDragEnd(info) {\r\n    // console.log('DRAG END', info);\r\n  }\r\n\r\n  private onDragEnter() {\r\n    // console.log('DRAG ENTER');\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FFileDropDirective, FFileSelectDirective, FFilePreviewListTypeTemplateDirective, FFileUploadDirective, FFilePreviewToolbarTemplateDirective } from './directive/index';\r\nimport { FFileUploadComponent, FFileViewImageComponent, FFilePreviewComponent, PreviewCheckboxComponent } from './components/index';\r\nimport { UploadServerService } from './model/index';\r\nimport { FFileSizePipe, FFileDatePipe,FormatCellDataPipe,UPLocalePipe,UPLocaleDefaultPipe } from './pipe/index';\r\nimport { FFileUploadServerConfig, FFileUploadAPIServiceToken, FFileUploadDefaultService, FFileUploaderService } from './service/index';\r\nimport { NotifyModule } from '@farris/ui-notify';\r\nimport { ModalModule } from '@farris/ui-modal';\r\nimport { DateHelperModule } from '@farris/ui-common/date';\r\nimport { MessagerModule } from '@farris/ui-messager';\r\nimport { FAreaResponseModule } from '@farris/ui-area-response';\r\nimport { UploadAndPreviewComponent } from './components/upload-and-preview/upload-and-preview.component';\r\nimport { UploadProgressComponent } from './components/upload-progress/upload-progress.component';\r\nimport { MultiDownloadInfoComponent } from './components/multi-download-info/multi-download-info.component';\r\nimport { UploadFileOrderDragDirective } from './components/upload-and-preview/file-order-drag.directive';\r\nimport { LocaleModule } from '@farris/ui-locale';\r\nimport { FarrisCommonModule } from '@farris/ui-common';\r\nimport { DataColumnModule } from '@farris/ui-common/column';\r\n\r\n\r\n@NgModule({\r\n  declarations: [FFileDropDirective, FFileSelectDirective, FFileUploadComponent, \r\n    FFileViewImageComponent, FFilePreviewComponent, FFilePreviewListTypeTemplateDirective, FFileUploadDirective, \r\n    PreviewCheckboxComponent, FFilePreviewToolbarTemplateDirective, FFileSizePipe, UploadAndPreviewComponent, UploadProgressComponent, \r\n    FFileDatePipe,MultiDownloadInfoComponent, UploadFileOrderDragDirective,FormatCellDataPipe,UPLocalePipe,UPLocaleDefaultPipe\r\n  ],\r\n  exports: [FFileDropDirective, FFileSelectDirective, FFileUploadComponent, FFileViewImageComponent, \r\n    FFilePreviewComponent, FFilePreviewListTypeTemplateDirective, FFileUploadDirective, FFilePreviewToolbarTemplateDirective, FFileSizePipe,\r\n    UploadAndPreviewComponent, UploadProgressComponent, FFileDatePipe, UploadFileOrderDragDirective],\r\n  imports: [\r\n    CommonModule,\r\n    NotifyModule, \r\n    MessagerModule,\r\n    FAreaResponseModule, \r\n    FarrisCommonModule,\r\n    DateHelperModule.forRoot(), \r\n    ModalModule.forRoot(),\r\n    LocaleModule.forRoot(),\r\n    DataColumnModule.forRoot()\r\n  ],\r\n  providers: [\r\n    FFileUploaderService,\r\n    {\r\n      provide: UploadServerService,\r\n      useClass: FFileUploadDefaultService\r\n    }\r\n  ],\r\n  entryComponents:[\r\n    MultiDownloadInfoComponent\r\n  ]\r\n})\r\nexport class FFileUploadModule {\r\n  static forRoot(config?: FFileUploadServerConfig, uploadSer?: any): ModuleWithProviders {\r\n    return {\r\n      ngModule: FFileUploadModule,\r\n      providers: [\r\n        { provide: FFileUploadAPIServiceToken, useValue: config },\r\n        FFileUploaderService,\r\n        {\r\n          provide: UploadServerService,\r\n          useClass: uploadSer || FFileUploadDefaultService\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n"]}