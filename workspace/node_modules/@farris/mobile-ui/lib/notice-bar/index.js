import Icon from '../icon';
import { resolveComponent, openBlock, createBlock, createVNode, renderSlot, createCommentVNode } from 'vue';

var _components;
var script = {
  name: 'fm-notice-bar',
  components: (_components = {}, _components[Icon.name] = Icon, _components),
  props: {
    mode: {
      type: String,
      "default": ''
    },
    time: {
      type: Number,
      "default": 0
    },
    multiRows: {
      type: Boolean,
      "default": false
    },
    scrollable: {
      type: Boolean,
      "default": true
    },
    icon: {
      type: String,
      "default": ''
    },
    closable: {
      type: Boolean,
      "default": false
    },
    duration: {
      type: Number,
      "default": 16
    }
  },
  data: function data() {
    return {
      isShow: true,
      overflow: false
    };
  },
  computed: {
    customLeft: function customLeft() {
      return !!this.$slots.left;
    },
    customRight: function customRight() {
      return !!this.$slots.right;
    },
    rightIcon: function rightIcon() {
      var icon = this.mode === 'link' ? 's-arrow' : 's-cross';
      return icon;
    }
  },
  updated: function updated() {
    this.$_checkOverflow();
  },
  mounted: function mounted() {
    if (this.time) {
      this.$_hide(this.time);
    }

    this.$_checkOverflow();
  },
  methods: {
    $_hide: function $_hide(time) {
      var _this = this;

      setTimeout(function () {
        _this.isShow = false;
      }, time);
    },
    $_close: function $_close() {
      if (this.mode === 'closable' || this.closable) {
        this.isShow = false;
      }

      this.$emit('close');
    },
    $_checkOverflow: function $_checkOverflow() {
      if (!this.scrollable) {
        return;
      }

      var _this$$refs = this.$refs,
          wrap = _this$$refs.wrap,
          content = _this$$refs.content;
      /* istanbul ignore if */

      if (!wrap || !content) {
        return;
      }
      /**
       * 计算 padding-left 对宽度的影响
       * 替换 clientWidth 为 getBoundingClientRect
       */


      var paddingLeft = window.getComputedStyle(content, null).getPropertyValue('padding').split(' ')[3] || '0px';
      var left = +paddingLeft.match(/\d+/g)[0];
      this.overflow = content.scrollWidth - left > Math.ceil(wrap.getBoundingClientRect().width);
    }
  }
};

var _hoisted_1 = {
  key: 0,
  "class": "fm-notice-bar"
};
var _hoisted_2 = {
  "class": "fm-notice-bar-right"
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_fm_icon = resolveComponent("fm-icon");

  return $data.isShow ? (openBlock(), createBlock("div", _hoisted_1, [createVNode("div", {
    "class": ["fm-notice-bar-left", [!$options.customLeft && !$props.icon && 'fm-notice-bar-empty']]
  }, [$options.customLeft ? renderSlot(_ctx.$slots, "left", {
    key: 0
  }) : $props.icon ? (openBlock(), createBlock(_component_fm_icon, {
    key: 1,
    "class": "fm-notice-icon",
    name: $props.icon
  }, null, 8
  /* PROPS */
  , ["name"])) : createCommentVNode("v-if", true)], 2
  /* CLASS */
  ), createVNode("div", {
    "class": ["fm-notice-bar-content", [$props.multiRows && 'fm-notice-bar-multi-content']],
    ref: "wrap"
  }, [createVNode("div", {
    "class": [$data.overflow && $props.scrollable && 'fm-notice-bar-content-animate'],
    style: {
      animationDuration: $props.duration + "s"
    },
    ref: "content"
  }, [renderSlot(_ctx.$slots, "default")], 6
  /* CLASS, STYLE */
  )], 2
  /* CLASS */
  ), createVNode("div", _hoisted_2, [$options.customRight ? renderSlot(_ctx.$slots, "right", {
    key: 0
  }) : $props.mode || $props.closable ? (openBlock(), createBlock(_component_fm_icon, {
    key: 1,
    "class": "fm-notice-icon fm-notice-icon-right",
    name: $options.rightIcon,
    onClick: $options.$_close
  }, null, 8
  /* PROPS */
  , ["name", "onClick"])) : createCommentVNode("v-if", true)])])) : createCommentVNode("v-if", true);
}

script.render = render;
script.__file = "packages/notice-bar/src/notice-bar.vue";

script.install = function (app) {
  app.component(script.name, script);
};

export default script;
export { script as NoticeBar };
