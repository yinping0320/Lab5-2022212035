import { resolveComponent, openBlock, createBlock, Fragment, createCommentVNode, createVNode, computed, unref, renderList, toDisplayString, ref, watch, provide, defineComponent, withCtx, renderSlot, reactive, resolveDynamicComponent, createTextVNode, createSlots } from 'vue';
import { useBem } from '../hook';
import DatePicker from '../datetime-picker';
import { parse, format, toMultidimensional, isArray, isDef } from '../utils';
import Input from '../input';

var script = {
  name: 'field-check',
  props: {
    fieldProps: Object,
    id: String,
    code: String,
    name: String,
    modelValue: Boolean
  },
  emits: ['update:modelValue'],
  data: function data() {
    var _this$fieldProps;

    return {
      placeholder: (_this$fieldProps = this.fieldProps) != null && _this$fieldProps.placeholder ? this.fieldProps.placeholder : ''
    };
  },
  computed: {
    innerValue: {
      set: function set(val) {
        this.$emit('update:modelValue', val);
      },
      get: function get() {
        return this.modelValue;
      }
    }
  }
};

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_fm_switch = resolveComponent("fm-switch");

  return openBlock(), createBlock(Fragment, null, [createCommentVNode(" <fm-input\r\n    :name=\"code\"\r\n    :placeholder=\"placeholder\"\r\n    input-align=\"left\"\r\n    class=\"pl-0 pr-0\"\r\n  >\r\n    <template #input>\r\n    </template>\r\n  </fm-input> "), createVNode(_component_fm_switch, {
    modelValue: $options.innerValue,
    "onUpdate:modelValue": _cache[1] || (_cache[1] = function ($event) {
      return $options.innerValue = $event;
    })
  }, null, 8
  /* PROPS */
  , ["modelValue"])], 2112
  /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
  );
}

script.render = render;
script.__file = "packages/filter-panel/src/components/check.vue";

var _components;
var currentYear = new Date().getFullYear();
var script$1 = {
  name: 'field-date',
  inheritAttrs: false,
  components: (_components = {}, _components[DatePicker.name] = DatePicker, _components),
  props: {
    fieldProps: Object,
    id: String,
    code: String,
    name: String,
    // eslint-disable-next-line vue/require-prop-type-constructor
    modelValue: [String, Date]
  },
  emits: ['update:modelValue'],
  data: function data() {
    var _this$fieldProps, _this$fieldProps2, _this$fieldProps3, _this$fieldProps4, _this$fieldProps5;

    return {
      placeholder: (_this$fieldProps = this.fieldProps) != null && _this$fieldProps.placeholder ? this.fieldProps.placeholder : '点击输入日期',
      format: (_this$fieldProps2 = this.fieldProps) != null && _this$fieldProps2.format ? this.fieldProps.format : 'yyyy-MM-dd',
      type: (_this$fieldProps3 = this.fieldProps) != null && _this$fieldProps3.type ? this.fieldProps.type : 'date',
      minValue: (_this$fieldProps4 = this.fieldProps) != null && _this$fieldProps4.minValue ? parse(this.fieldProps.minValue) : new Date(currentYear - 10, 0, 1),
      maxValue: (_this$fieldProps5 = this.fieldProps) != null && _this$fieldProps5.maxValue ? parse(this.fieldProps.maxValue) : new Date(currentYear + 10, 11, 31)
    };
  },
  watch: {
    fieldProps: function fieldProps() {
      var _this$fieldProps6, _this$fieldProps7;

      this.minValue = (_this$fieldProps6 = this.fieldProps) != null && _this$fieldProps6.minValue ? parse(this.fieldProps.minValue) : new Date(currentYear - 10, 0, 1);
      this.maxValue = (_this$fieldProps7 = this.fieldProps) != null && _this$fieldProps7.maxValue ? parse(this.fieldProps.maxValue) : new Date(currentYear + 10, 11, 31);
    }
  },
  computed: {
    innerValue: {
      set: function set(val) {
        this.$emit('update:modelValue', this.formatDate(val));
      },
      get: function get() {
        if (this.type === 'date' && this.modelValue) {
          return this.formatDate(parse(this.modelValue));
        }

        return this.modelValue;
      }
    }
  },
  methods: {
    onConfirm: function onConfirm(value) {
      this.innerValue = value;
    },
    formatDate: function formatDate(date) {
      if (date instanceof Date) {
        return format(date, this.format);
      } else {
        return date;
      }
    }
  }
};

function render$1(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_fm_datetime_picker = resolveComponent("fm-datetime-picker");

  return openBlock(), createBlock(_component_fm_datetime_picker, {
    "class": "fm-picker-row",
    modelValue: $options.innerValue,
    "onUpdate:modelValue": _cache[1] || (_cache[1] = function ($event) {
      return $options.innerValue = $event;
    }),
    type: $data.type,
    placeholder: $data.placeholder,
    format: $data.format,
    "min-date": $data.minValue,
    "max-date": $data.maxValue,
    inputClass: "fm-filter-panel-field-input",
    inputAlign: "center",
    rightIcon: false,
    teleport: "body",
    zIndex: "100"
  }, null, 8
  /* PROPS */
  , ["modelValue", "type", "placeholder", "format", "min-date", "max-date"]);
}

script$1.render = render$1;
script$1.__file = "packages/filter-panel/src/components/date.vue";

var _components$1;
var currentYear$1 = new Date().getFullYear();
var script$2 = {
  name: 'field-date-range',
  components: (_components$1 = {}, _components$1[script$1.name] = script$1, _components$1),
  props: {
    fieldProps: Object,
    id: String,
    code: String,
    name: String,
    // eslint-disable-next-line vue/require-prop-type-constructor
    modelValue: [Object, String]
  },
  emits: ['update:modelValue'],
  data: function data() {
    var _this$fieldProps, _this$fieldProps2, _this$fieldProps3, _this$fieldProps4, _this$fieldProps5;

    return {
      active: [this.id],
      firstValue: null,
      secondValue: null,
      placeholder: (_this$fieldProps = this.fieldProps) != null && _this$fieldProps.placeholder ? this.fieldProps.placeholder : '',
      format: (_this$fieldProps2 = this.fieldProps) != null && _this$fieldProps2.format ? this.fieldProps.format : 'yyyy-MM-dd',
      type: (_this$fieldProps3 = this.fieldProps) != null && _this$fieldProps3.type ? this.fieldProps.type : 'date',
      minValue: (_this$fieldProps4 = this.fieldProps) != null && _this$fieldProps4.minValue ? parse(this.fieldProps.minValue) : new Date(currentYear$1 - 10, 0, 1),
      maxValue: (_this$fieldProps5 = this.fieldProps) != null && _this$fieldProps5.maxValue ? parse(this.fieldProps.maxValue) : new Date(currentYear$1 + 10, 11, 31)
    };
  },
  computed: {
    preMaxVlaue: function preMaxVlaue() {
      return this.secondValue ? parse(this.secondValue) : this.maxValue;
    },
    nextMinValue: function nextMinValue() {
      return this.firstValue ? parse(this.firstValue) : this.minValue;
    }
  },
  watch: {
    modelValue: {
      handler: function handler(value) {
        if (!value) {
          return;
        }

        this.firstValue = value.firstValue ? value.firstValue : null;
        this.secondValue = value.secondValue ? value.secondValue : null; // this.innerShow = value;
      },
      immediate: true,
      deep: true
    }
  },
  methods: {
    onConfirmFirst: function onConfirmFirst(value) {
      this.firstValue = value;
      this.onInput();
    },
    onConfirmSecond: function onConfirmSecond(value) {
      this.secondValue = value;
      this.onInput();
    },
    onInput: function onInput() {
      this.$emit('update:modelValue', {
        firstValue: this.formatDate(this.firstValue),
        secondValue: this.formatDate(this.secondValue, true)
      });
    },
    formatDate: function formatDate(date, isEnd) {
      var formater = this.format;

      if (this.type === 'date' && date) {
        date = parse(date);
        formater = formater + ' HH:mm:ss';

        if (isEnd) {
          date.setHours(23);
          date.setMinutes(59);
          date.setSeconds(59);
        } else {
          date.setHours(0);
        }

        console.log(date);
      }

      if (date instanceof Date) {
        return format(date, formater);
      } else {
        return date;
      }
    }
  }
};

var _hoisted_1 = {
  "class": "fm-filter-panel-field-range"
};

var _hoisted_2 = /*#__PURE__*/createVNode("span", {
  "class": "fm-filter-panel-field-split"
}, null, -1
/* HOISTED */
);

function render$2(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_field_date = resolveComponent("field-date");

  return openBlock(), createBlock("div", _hoisted_1, [createVNode(_component_field_date, {
    fieldProps: {
      placeholder: $data.placeholder,
      format: $data.format,
      type: $data.type,
      minValue: $data.minValue,
      maxValue: $options.preMaxVlaue
    },
    code: $props.code,
    modelValue: $data.firstValue,
    "onUpdate:modelValue": [_cache[1] || (_cache[1] = function ($event) {
      return $data.firstValue = $event;
    }), $options.onConfirmFirst]
  }, null, 8
  /* PROPS */
  , ["fieldProps", "code", "modelValue", "onUpdate:modelValue"]), _hoisted_2, createVNode(_component_field_date, {
    fieldProps: {
      placeholder: $data.placeholder,
      format: $data.format,
      type: $data.type,
      minValue: $options.nextMinValue,
      maxValue: $data.maxValue
    },
    code: $props.code,
    modelValue: $data.secondValue,
    "onUpdate:modelValue": [_cache[2] || (_cache[2] = function ($event) {
      return $data.secondValue = $event;
    }), $options.onConfirmSecond]
  }, null, 8
  /* PROPS */
  , ["fieldProps", "code", "modelValue", "onUpdate:modelValue"])]);
}

script$2.render = render$2;
script$2.__file = "packages/filter-panel/src/components/date-range.vue";

var script$3 = {
  name: 'panel-list',
  props: {
    modelValue: {
      type: String,
      "default": ''
    },
    text: {
      type: String,
      "default": ''
    },
    data: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    textField: {
      type: String,
      "default": 'name'
    },
    valueField: {
      type: String,
      "default": 'value'
    },
    multiSelect: {
      type: Boolean,
      "default": false
    }
  },
  setup: function setup(props, _ref) {
    var emit = _ref.emit;
    var innerData = computed(function () {
      return props.data ? toMultidimensional(props.data, 3) : [];
    });
    var selected = computed(function () {
      return props.modelValue ? props.modelValue.split(',') : [];
    });

    var isSelected = function isSelected(value) {
      return unref(selected).includes(value);
    };

    var onItemClick = function onItemClick(item) {
      emit('item-click', item);
      onModelChange(item[props.valueField]);
    };

    var onModelChange = function onModelChange(value) {
      var tmpValue = '';

      if (isSelected(value)) {
        if (props.multiSelect) {
          tmpValue = unref(selected).filter(function (el) {
            return el !== value;
          }).join(',');
        }
      } else {
        if (props.multiSelect) {
          tmpValue = [].concat(unref(selected), [value]).join(',');
        } else {
          tmpValue = value;
        }
      }

      emit('update:modelValue', tmpValue);
      emit('update:text', getText(tmpValue));
    };

    var getText = function getText(vlaue) {
      if (vlaue === void 0) {
        vlaue = '';
      }

      return vlaue.split(',').map(function (v) {
        var target = props.data.find(function (item) {
          return item[props.valueField] === v;
        });
        return target ? target[props.textField] : v;
      }).join(',');
    };

    var bem = useBem('fm-filter-panel');
    return {
      innerData: innerData,
      onItemClick: onItemClick,
      bem: bem,
      isSelected: isSelected
    };
  }
};

function render$3(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock("div", {
    "class": $setup.bem('list')
  }, [(openBlock(true), createBlock(Fragment, null, renderList($setup.innerData, function (lineData, index) {
    return openBlock(), createBlock("div", {
      "class": $setup.bem('list-line'),
      key: index
    }, [(openBlock(true), createBlock(Fragment, null, renderList(lineData, function (item) {
      return openBlock(), createBlock("div", {
        "class": [$setup.bem('list-item'), $setup.isSelected(item[$props.valueField]) ? $setup.bem('list-item-selected') : ''],
        key: item[$props.valueField],
        onClick: function onClick($event) {
          return $setup.onItemClick(item);
        }
      }, [createVNode("span", null, toDisplayString(item[$props.textField]), 1
      /* TEXT */
      )], 10
      /* CLASS, PROPS */
      , ["onClick"]);
    }), 128
    /* KEYED_FRAGMENT */
    ))], 2
    /* CLASS */
    );
  }), 128
  /* KEYED_FRAGMENT */
  ))], 2
  /* CLASS */
  );
}

script$3.render = render$3;
script$3.__file = "packages/filter-panel/src/components/list.vue";

var _components$2;
var script$4 = {
  name: 'field-dropdown',
  components: (_components$2 = {}, _components$2[script$3.name] = script$3, _components$2),
  props: {
    fieldProps: Object,
    id: String,
    code: String,
    name: String,
    modelValue: String
  },
  emits: ['update:modelValue', 'update:text'],
  setup: function setup(props, _ref) {
    var emit = _ref.emit;
    var multiSelect = computed(function () {
      var _props$fieldProps;

      return (_props$fieldProps = props.fieldProps) != null && _props$fieldProps.multiSelect ? props.fieldProps.multiSelect : false;
    });
    var enumData = computed(function () {
      var _props$fieldProps2;

      return (_props$fieldProps2 = props.fieldProps) != null && _props$fieldProps2.enumValues ? props.fieldProps.enumValues : [];
    });
    var innerValue = ref(props.modelValue);
    watch(function () {
      return props.modelValue;
    }, function (value) {
      return innerValue.value = value;
    });

    var modelChange = function modelChange(value) {
      emit('update:modelValue', value ? value : null);
    };

    var textChange = function textChange(value) {
      emit('update:text', value);
    };

    return {
      multiSelect: multiSelect,
      enumData: enumData,
      innerValue: innerValue,
      modelChange: modelChange,
      textChange: textChange
    };
  }
};

function render$4(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_panel_list = resolveComponent("panel-list");

  return openBlock(), createBlock(_component_panel_list, {
    modelValue: $setup.innerValue,
    data: $setup.enumData,
    multiSelect: $setup.multiSelect,
    "onUpdate:modelValue": $setup.modelChange,
    "onUpdate:text": $setup.textChange
  }, null, 8
  /* PROPS */
  , ["modelValue", "data", "multiSelect", "onUpdate:modelValue", "onUpdate:text"]);
}

script$4.render = render$4;
script$4.__file = "packages/filter-panel/src/components/dropdown.vue";

var _components$3;
var script$5 = {
  name: 'field-lookup',
  components: (_components$3 = {}, _components$3[script$3.name] = script$3, _components$3),
  props: {
    fieldProps: Object,
    id: String,
    type: String,
    code: String,
    name: String,
    selecteds: String,
    modelValue: String
  },
  emits: ['update:modelValue', 'update:text', 'update:value'],
  setup: function setup(props, _ref) {
    var emit = _ref.emit;
    var multiSelect = computed(function () {
      var _props$fieldProps;

      return (_props$fieldProps = props.fieldProps) != null && _props$fieldProps.multiSelect ? props.fieldProps.multiSelect : false;
    });
    var enumData = computed(function () {
      var _props$fieldProps2;

      return (_props$fieldProps2 = props.fieldProps) != null && _props$fieldProps2.enumValues ? props.fieldProps.enumValues : [];
    });
    var innerValue = ref(props.selecteds);
    watch(function () {
      return props.selecteds;
    }, function (value) {
      return innerValue.value = value;
    });

    var modelChange = function modelChange(value) {
      emit('update:value', value);
    };

    var textChange = function textChange(value) {
      emit('update:modelValue', value);
      emit('update:text', value);
    };

    return {
      multiSelect: multiSelect,
      enumData: enumData,
      innerValue: innerValue,
      modelChange: modelChange,
      textChange: textChange
    };
  }
};

function render$5(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_panel_list = resolveComponent("panel-list");

  return openBlock(), createBlock(_component_panel_list, {
    modelValue: $setup.innerValue,
    data: $setup.enumData,
    multiSelect: $setup.multiSelect,
    "onUpdate:modelValue": $setup.modelChange,
    "onUpdate:text": $setup.textChange
  }, null, 8
  /* PROPS */
  , ["modelValue", "data", "multiSelect", "onUpdate:modelValue", "onUpdate:text"]);
}

script$5.render = render$5;
script$5.__file = "packages/filter-panel/src/components/lookup.vue";

var ExpressCompareType;

(function (ExpressCompareType) {
  ExpressCompareType[ExpressCompareType["Equal"] = 0] = "Equal";
  ExpressCompareType[ExpressCompareType["NotEqual"] = 1] = "NotEqual";
  ExpressCompareType[ExpressCompareType["Greater"] = 2] = "Greater";
  ExpressCompareType[ExpressCompareType["GreaterOrEqual"] = 3] = "GreaterOrEqual";
  ExpressCompareType[ExpressCompareType["Less"] = 4] = "Less";
  ExpressCompareType[ExpressCompareType["LessOrEqual"] = 5] = "LessOrEqual";
  ExpressCompareType[ExpressCompareType["Like"] = 6] = "Like";
  ExpressCompareType[ExpressCompareType["LikeStartWith"] = 7] = "LikeStartWith";
  ExpressCompareType[ExpressCompareType["LikeEndWith"] = 8] = "LikeEndWith";
  ExpressCompareType[ExpressCompareType["NotLike"] = 9] = "NotLike";
  ExpressCompareType[ExpressCompareType["NotLikeStartWith"] = 10] = "NotLikeStartWith";
  ExpressCompareType[ExpressCompareType["NotLikeEndWith"] = 11] = "NotLikeEndWith";
  ExpressCompareType[ExpressCompareType["Is"] = 12] = "Is";
  ExpressCompareType[ExpressCompareType["IsNot"] = 13] = "IsNot";
  ExpressCompareType[ExpressCompareType["In"] = 14] = "In";
  ExpressCompareType[ExpressCompareType["NotIn"] = 15] = "NotIn";
})(ExpressCompareType || (ExpressCompareType = {}));

var ExpressRelationType;

(function (ExpressRelationType) {
  ExpressRelationType[ExpressRelationType["Empty"] = 0] = "Empty";
  ExpressRelationType[ExpressRelationType["And"] = 1] = "And";
  ExpressRelationType[ExpressRelationType["Or"] = 2] = "Or";
})(ExpressRelationType || (ExpressRelationType = {}));

var ExpressValueType;

(function (ExpressValueType) {
  ExpressValueType[ExpressValueType["Value"] = 0] = "Value";
  ExpressValueType[ExpressValueType["Expression"] = 1] = "Expression";
})(ExpressValueType || (ExpressValueType = {}));

var CONDITIONS = {
  FilterConditions: []
};

var TYPES;

(function (TYPES) {
  TYPES["Text"] = "text";
  TYPES["Dropdown"] = "dropdown";
  TYPES["Help"] = "help";
  TYPES["BoolCheck"] = "bool-check";
  TYPES["Date"] = "date";
  TYPES["DateTime"] = "date-time";
  TYPES["SingleDate"] = "single-date";
  TYPES["SingleYear"] = "single-year";
  TYPES["Number"] = "number";
  TYPES["SingleNumber"] = "single-number";
})(TYPES || (TYPES = {}));

var TypeMapping = {
  text: {
    type: TYPES.Text,
    component: 'field-text'
  },
  dropdown: {
    type: TYPES.Dropdown,
    component: 'field-dropdown'
  },
  help: {
    type: TYPES.Help,
    component: 'field-lookup'
  },
  'bool-check': {
    type: TYPES.BoolCheck,
    component: 'field-check'
  },
  date: {
    type: TYPES.Date,
    component: 'field-date-range'
  },
  'date-time': {
    type: TYPES.DateTime,
    component: 'field-date-range',
    fieldProps: {
      type: 'date-time'
    }
  },
  'single-date': {
    type: TYPES.SingleDate,
    component: 'field-date',
    fieldProps: {
      type: 'date'
    }
  },
  'single-year': {
    type: TYPES.SingleYear,
    component: 'field-date',
    fieldProps: {
      type: 'year-month'
    }
  },
  number: {
    type: TYPES.Number,
    component: 'field-number-range'
  },
  'single-number': {
    type: TYPES.SingleNumber,
    component: 'field-number'
  }
};

var useLookupMapping = function useLookupMapping(idField) {
  idField = idField ? idField : 'id';
  var idValue = ref('');
  var LookupMapping = {
    mapFields: function mapFields(data) {
      console.log('mapFields');
      idValue.value = isArray(data) ? data.map(function (item) {
        return item[idField];
      }).join(',') : data[idField];
    },
    getFieldValue: function getFieldValue() {
      console.log('getIdValue');
      return idValue.value;
    }
  };
  provide('LookupMappingFn', LookupMapping);
  return {
    idValue: idValue,
    LookupMapping: LookupMapping
  };
};

var formatField = function formatField(field) {
  var target = TypeMapping[field.control.controltype];
  var fieldProps = Object.assign(Object.assign({}, target.fieldProps), field.control);
  return {
    component: target.component,
    type: target.type,
    fieldProps: fieldProps,
    id: field.id,
    code: field.labelCode,
    name: field.name
  };
};

function reset(data, initValue) {
  if (initValue === void 0) {
    initValue = null;
  }

  if (data instanceof Object) {
    for (var prop in data) {
      if (data[prop] instanceof Object) {
        reset(data[prop]);
      }

      data[prop] = initValue ? initValue[prop] : initValue;
    }
  }
}

function genFilterCondition(target, value) {
  var resultTemplate = {
    FilterField: target.labelCode,
    Compare: ExpressCompareType.Like,
    Value: value,
    Relation: ExpressRelationType.And,
    Expresstype: ExpressValueType.Value,
    Lbracket: '',
    Rbracket: ''
  };
  var result = {};
  var type = target.control.controltype;

  switch (type) {
    case TYPES.Date:
    case TYPES.DateTime:
    case TYPES.Number:
      var tmp = [];

      if (isDef(value.firstValue)) {
        tmp.push({
          Compare: ExpressCompareType.GreaterOrEqual,
          Value: value.firstValue
        });
      }

      if (isDef(value.secondValue)) {
        tmp.push({
          Compare: ExpressCompareType.LessOrEqual,
          Value: value.secondValue
        });
      }

      result = tmp;
      break;

    case TYPES.SingleDate:
    case TYPES.SingleYear:
    case TYPES.SingleNumber:
    case TYPES.Dropdown:
    case TYPES.Help:
    case TYPES.BoolCheck:
      result = {
        Compare: ExpressCompareType.Equal
      };
      break;

    case TYPES.Text:
  }

  if (isArray(result)) {
    if (result[1]) {
      return [Object.assign(Object.assign({}, resultTemplate), result[0]), Object.assign(Object.assign({}, resultTemplate), result[1])];
    }

    return Object.assign(Object.assign({}, resultTemplate), result[0]);
  }

  return Object.assign(Object.assign({}, resultTemplate), result);
}

function getFilterConditions(filterData, fieldConfigs) {
  var conditions = [];
  var keys = Object.keys(filterData);
  keys.forEach(function (key) {
    if (isDef(filterData[key])) {
      var target = fieldConfigs.find(function (field) {
        return field.labelCode === key;
      });

      if (target) {
        var condition = genFilterCondition(target, filterData[key]);

        if (condition instanceof Array) {
          conditions = [].concat(conditions, condition);
        } else {
          conditions.push(condition);
        }
      }
    }
  });
  formatCondition(conditions);
  return conditions;
}

function addFilterConditions(filterConditions, newFilterConditions) {
  var count = filterConditions.length;
  var newCount = newFilterConditions.length;

  if (count == 0) {
    return newFilterConditions;
  }

  if (newCount == 0) {
    return filterConditions;
  }

  filterConditions[0].Lbracket += '(';
  filterConditions[count - 1].Rbracket += ')';
  filterConditions[count - 1].Relation = 1;
  newFilterConditions[0].Lbracket += '(';
  newFilterConditions[newCount - 1].Rbracket += ')';
  return [].concat(filterConditions, newFilterConditions);
}

function formatCondition(conditions) {
  if (conditions && conditions.length > 0) {
    conditions[0].Lbracket = '(';
    conditions[conditions.length - 1].Rbracket = ')';
    conditions[conditions.length - 1].Relation = 0;
  }
}

var getFilterEnyity = function getFilterEnyity(filterData, fieldConfigs, extraConditions) {
  if (extraConditions === void 0) {
    extraConditions = [];
  }

  return Object.assign(Object.assign({}, CONDITIONS), {
    FilterConditions: addFilterConditions(getFilterConditions(filterData, fieldConfigs), extraConditions)
  });
};

var _components$4;
var script$6 = defineComponent({
  name: 'field-lookup-input',
  components: (_components$4 = {}, _components$4[script$3.name] = script$3, _components$4),
  props: {
    fieldProps: {
      type: Object,
      "default": function _default() {
        return {};
      }
    },
    id: String,
    modelValue: String,
    type: String,
    code: String,
    name: String,
    selecteds: {
      type: String,
      "default": ''
    }
  },
  emits: ['update:modelValue', 'change-text', 'change-value'],
  setup: function setup(props, _ref) {
    var _props$fieldProps;

    var emit = _ref.emit;

    var _useLookupMapping = useLookupMapping((_props$fieldProps = props.fieldProps) == null ? void 0 : _props$fieldProps.idField),
        idValue = _useLookupMapping.idValue;

    idValue.value = props.selecteds ? props.selecteds : '';
    watch(function () {
      return props.selecteds;
    }, function (value) {
      console.log(value);
      idValue.value = value;
    });
    var bem = useBem('fm-filter-panel-field');

    var onModelChange = function onModelChange(value) {
      emit('update:modelValue', value);
    };

    var onTextChange = function onTextChange(value) {
      emit('change-text', value);
      emit('change-value', idValue.value);
    };

    return {
      idValue: idValue,
      bem: bem,
      onModelChange: onModelChange,
      onTextChange: onTextChange
    };
  }
});

function render$6(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_fm_lookup_input = resolveComponent("fm-lookup-input");

  return openBlock(), createBlock(_component_fm_lookup_input, {
    name: _ctx.code,
    type: _ctx.fieldProps.displayType,
    modelValue: _ctx.modelValue,
    selectedValues: _ctx.idValue,
    label: _ctx.name,
    placeholder: _ctx.fieldProps.placeholder,
    idField: _ctx.fieldProps.idField,
    textField: _ctx.fieldProps.textField,
    url: _ctx.fieldProps.uri,
    multiSelect: _ctx.fieldProps.multiSelect,
    required: _ctx.fieldProps.require,
    fullPath: _ctx.fieldProps.fullPath,
    avatarField: _ctx.fieldProps.avatarField,
    avatarPrefix: _ctx.fieldProps.avatarPrefix,
    avatarSuffix: _ctx.fieldProps.avatarSuffix,
    usePersonal: _ctx.fieldProps.usePersonal,
    personalConfig: _ctx.fieldProps.personalConfig,
    position: "left",
    panelClass: _ctx.bem('lookup-panel'),
    "onUpdate:modelValue": _ctx.onModelChange,
    onConfirm: _ctx.onTextChange
  }, {
    template: withCtx(function (slotProps) {
      return [createVNode("span", {
        "class": _ctx.bem('title-sub-button-text'),
        onClick: slotProps.click
      }, " 更多 ", 10
      /* CLASS, PROPS */
      , ["onClick"])];
    }),
    cell: withCtx(function (slotProps) {
      return [renderSlot(_ctx.$slots, "cell", {
        listData: slotProps.listData,
        item: slotProps.item,
        idField: slotProps.idField,
        textField: slotProps.textField
      })];
    }),
    _: 1
    /* STABLE */

  }, 8
  /* PROPS */
  , ["name", "type", "modelValue", "selectedValues", "label", "placeholder", "idField", "textField", "url", "multiSelect", "required", "fullPath", "avatarField", "avatarPrefix", "avatarSuffix", "usePersonal", "personalConfig", "panelClass", "onUpdate:modelValue", "onConfirm"]);
}

script$6.render = render$6;
script$6.__file = "packages/filter-panel/src/components/lookup-input.vue";

var script$7 = defineComponent({
  name: 'field-number',
  props: {
    fieldProps: Object,
    id: String,
    code: String,
    name: String,
    modelValue: [Number, String]
  },
  emits: ['update:modelValue', 'click'],
  setup: function setup(props, _ref) {
    var emit = _ref.emit;

    var handleChange = function handleChange(value) {
      console.log(value);
      emit('update:modelValue', value);
    };

    var placeholder = computed(function () {
      var _props$fieldProps;

      return (_props$fieldProps = props.fieldProps) != null && _props$fieldProps.placeholder ? props.fieldProps.placeholder : '请输入数字';
    });
    var precision = computed(function () {
      return props.fieldProps && isDef(props.fieldProps.precision) ? props.fieldProps.precision : 2;
    });
    return {
      placeholder: placeholder,
      precision: precision,
      handleChange: handleChange
    };
  }
});

function render$7(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_fm_input = resolveComponent("fm-input");

  return openBlock(), createBlock("div", null, [createVNode(_component_fm_input, {
    "class": "fm-filter-panel-field-input",
    modelValue: _ctx.modelValue,
    name: _ctx.code,
    placeholder: _ctx.placeholder,
    precision: _ctx.precision,
    enableNull: "",
    inputAlign: "center",
    type: "number",
    "onUpdate:modelValue": _ctx.handleChange
  }, null, 8
  /* PROPS */
  , ["modelValue", "name", "placeholder", "precision", "onUpdate:modelValue"])]);
}

script$7.render = render$7;
script$7.__file = "packages/filter-panel/src/components/number.vue";

var _components$5;
var script$8 = {
  name: 'field-number-range',
  components: (_components$5 = {}, _components$5[script$7.name] = script$7, _components$5),
  props: {
    fieldProps: {},
    id: String,
    code: String,
    name: String,
    // eslint-disable-next-line vue/require-prop-type-constructor
    modelValue: [String, Object]
  },
  emits: ['update:modelValue'],
  data: function data() {
    return {
      active: [this.id],
      firstValue: null,
      secondValue: null,
      firstKeyboardShow: false,
      secondKeyboardShow: false
    };
  },
  watch: {
    modelValue: {
      handler: function handler(value) {
        if (!value) {
          return;
        }

        this.firstValue = value.firstValue;
        this.secondValue = value.secondValue; // this.innerShow = value;
      },
      immediate: true,
      deep: true
    }
  },
  methods: {
    onConfirmFirst: function onConfirmFirst(value) {
      this.firstValue = value;
      this.onInput();
    },
    onConfirmSecond: function onConfirmSecond(value) {
      this.secondValue = value;
      this.onInput();
    },
    onInput: function onInput() {
      this.$emit('update:modelValue', {
        firstValue: this.firstValue,
        secondValue: this.secondValue
      });
    },
    onFirstKeyboardShow: function onFirstKeyboardShow() {
      this.firstKeyboardShow = true;
      this.secondKeyboardShow = false;
    },
    onSecondKeyboardShow: function onSecondKeyboardShow() {
      this.firstKeyboardShow = false;
      this.secondKeyboardShow = true;
    }
  }
};

var _hoisted_1$1 = {
  "class": "fm-filter-panel-field-range"
};

var _hoisted_2$1 = /*#__PURE__*/createVNode("span", {
  "class": "fm-filter-panel-field-split"
}, null, -1
/* HOISTED */
);

function render$8(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_field_number = resolveComponent("field-number");

  return openBlock(), createBlock("div", _hoisted_1$1, [createVNode(_component_field_number, {
    modelValue: $data.firstValue,
    "onUpdate:modelValue": [_cache[1] || (_cache[1] = function ($event) {
      return $data.firstValue = $event;
    }), $options.onConfirmFirst],
    fieldProps: $props.fieldProps,
    code: $props.code
  }, null, 8
  /* PROPS */
  , ["modelValue", "fieldProps", "code", "onUpdate:modelValue"]), _hoisted_2$1, createVNode(_component_field_number, {
    fieldProps: $props.fieldProps,
    code: $props.code,
    modelValue: $data.secondValue,
    "onUpdate:modelValue": [_cache[2] || (_cache[2] = function ($event) {
      return $data.secondValue = $event;
    }), $options.onConfirmSecond]
  }, null, 8
  /* PROPS */
  , ["fieldProps", "code", "modelValue", "onUpdate:modelValue"])]);
}

script$8.render = render$8;
script$8.__file = "packages/filter-panel/src/components/number-range.vue";

var _components$6;
var script$9 = {
  name: 'field-text',
  components: (_components$6 = {}, _components$6[Input.name] = Input, _components$6),
  props: {
    fieldProps: Object,
    id: String,
    code: String,
    name: String,
    modelValue: String
  },
  emits: ['update:modelValue'],
  setup: function setup(props, _ref) {
    var emit = _ref.emit;
    var placeholder = computed(function () {
      var _props$fieldProps, _props$fieldProps2;

      return (_props$fieldProps = props.fieldProps) != null && _props$fieldProps.placeholder ? (_props$fieldProps2 = props.fieldProps) == null ? void 0 : _props$fieldProps2.placeholder : '';
    });
    var required = computed(function () {
      var _props$fieldProps3;

      return (_props$fieldProps3 = props.fieldProps) == null ? void 0 : _props$fieldProps3.require;
    });
    var innerValue = ref(props.modelValue);
    watch(function () {
      return props.modelValue;
    }, function (value) {
      innerValue.value = value;
    });

    var modelChange = function modelChange(val) {
      emit('update:modelValue', val);
    };

    return {
      placeholder: placeholder,
      required: required,
      innerValue: innerValue,
      modelChange: modelChange
    };
  }
};

function render$9(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_fm_input = resolveComponent("fm-input");

  return openBlock(), createBlock(_component_fm_input, {
    "class": "fm-filter-panel-field-input",
    name: $props.code,
    placeholder: $setup.placeholder,
    required: $setup.required,
    modelValue: $setup.innerValue,
    "onUpdate:modelValue": [_cache[1] || (_cache[1] = function ($event) {
      return $setup.innerValue = $event;
    }), $setup.modelChange],
    inputAlign: "left"
  }, null, 8
  /* PROPS */
  , ["name", "placeholder", "required", "modelValue", "onUpdate:modelValue"]);
}

script$9.render = render$9;
script$9.__file = "packages/filter-panel/src/components/text.vue";

var _components$7;
var script$a = defineComponent({
  name: 'component-panel',
  components: (_components$7 = {}, _components$7[script.name] = script, _components$7[script$2.name] = script$2, _components$7[script$1.name] = script$1, _components$7[script$5.name] = script$5, _components$7[script$8.name] = script$8, _components$7[script$7.name] = script$7, _components$7[script$9.name] = script$9, _components$7[script$4.name] = script$4, _components$7[script$6.name] = script$6, _components$7),
  props: {
    filterList: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    filterData: {
      type: Object,
      "default": function _default() {
        return {};
      }
    },
    hasClear: Boolean,
    text: String,
    value: String
  },
  emits: ['change'],
  setup: function setup(props, _ref) {
    var emit = _ref.emit;
    watch(function () {
      return props.hasClear;
    }, function () {
      resetSubTitleData(subTitleDatas);
      resetSubTitleData(selecteds);
    }); // 副标题组

    var subTitleDatas = reactive({}); // 帮助已选中值组

    var selecteds = reactive({}); // 重置对象属性值为空函数

    var resetSubTitleData = function resetSubTitleData(data) {
      for (var key in data) {
        data[key] = '';
      }
    };

    var onIdChange = function onIdChange(value, code) {
      selecteds[code] = value;
    };

    var onTextChange = function onTextChange(value, code) {
      subTitleDatas[code] = value;
    };

    var onChange = function onChange(value, code) {
      var _emit;

      emit('change', (_emit = {}, _emit[code] = value, _emit));
    };

    var bem = useBem('fm-filter-panel');

    var showSubTitle = function showSubTitle(type) {
      var types = ['dropdown', 'help'];
      return types.includes(type);
    };

    var showContent = computed(function () {
      var result = reactive({});
      props.filterList.forEach(function (item) {
        result[item.code] = true;
      });
      return result;
    });

    var toggleContentShow = function toggleContentShow(key) {
      showContent.value[key] = !showContent.value[key];
    };

    return {
      bem: bem,
      onChange: onChange,
      onTextChange: onTextChange,
      subTitleDatas: subTitleDatas,
      showSubTitle: showSubTitle,
      onIdChange: onIdChange,
      selecteds: selecteds,
      showContent: showContent,
      toggleContentShow: toggleContentShow
    };
  }
});

function render$a(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_field_lookup_input = resolveComponent("field-lookup-input");

  var _component_field_check = resolveComponent("field-check");

  var _component_fm_icon = resolveComponent("fm-icon");

  return openBlock(true), createBlock(Fragment, null, renderList(_ctx.filterList, function (filter) {
    return openBlock(), createBlock("div", {
      "class": _ctx.bem('field'),
      key: filter.id
    }, [createVNode("div", {
      "class": _ctx.bem('field-title')
    }, [createVNode("span", {
      "class": _ctx.bem('field-title-text')
    }, toDisplayString(filter.name), 3
    /* TEXT, CLASS */
    ), createVNode("div", {
      "class": _ctx.bem('field-title-sub')
    }, [createVNode("span", {
      "class": _ctx.bem('field-title-sub-text')
    }, toDisplayString(_ctx.subTitleDatas[filter.code]), 3
    /* TEXT, CLASS */
    ), createVNode("div", {
      "class": _ctx.bem('field-title-sub-button')
    }, [filter.type === 'help' ? (openBlock(), createBlock(_component_field_lookup_input, {
      key: 0,
      code: filter.code,
      name: filter.name,
      fieldProps: filter.fieldProps,
      modelValue: _ctx.filterData[filter.code],
      "onUpdate:modelValue": function onUpdateModelValue($event) {
        return _ctx.filterData[filter.code] = $event;
      },
      selecteds: _ctx.selecteds[filter.code],
      teleport: "body",
      zIndex: "100",
      onChangeText: function onChangeText($event) {
        return _ctx.onTextChange($event, filter.code);
      },
      onChangeValue: function onChangeValue($event) {
        return _ctx.onIdChange($event, filter.code);
      }
    }, {
      cell: withCtx(function (slotProps) {
        return [renderSlot(_ctx.$slots, "lookup-cell", {
          listData: slotProps.listData,
          item: slotProps.item,
          idField: slotProps.idField,
          textField: slotProps.textField
        })];
      }),
      _: 2
      /* DYNAMIC */

    }, 1032
    /* PROPS, DYNAMIC_SLOTS */
    , ["code", "name", "fieldProps", "modelValue", "onUpdate:modelValue", "selecteds", "onChangeText", "onChangeValue"])) : createCommentVNode("v-if", true), filter.type === 'bool-check' ? (openBlock(), createBlock(_component_field_check, {
      key: 1,
      modelValue: _ctx.filterData[filter.code],
      "onUpdate:modelValue": [function ($event) {
        return _ctx.filterData[filter.code] = $event;
      }, function ($event) {
        return _ctx.onChange($event, filter.code);
      }],
      fieldProps: filter.fieldProps,
      id: filter.id,
      code: filter.code,
      name: filter.name
    }, null, 8
    /* PROPS */
    , ["modelValue", "onUpdate:modelValue", "fieldProps", "id", "code", "name"])) : createCommentVNode("v-if", true), _ctx.showSubTitle(filter.type) ? (openBlock(), createBlock(_component_fm_icon, {
      key: 2,
      name: _ctx.showContent[filter.code] ? 's-arrow-up' : 's-arrow-down',
      "class": _ctx.bem('field-title-sub-icon'),
      onClick: function onClick($event) {
        return _ctx.toggleContentShow(filter.code);
      }
    }, null, 8
    /* PROPS */
    , ["name", "class", "onClick"])) : createCommentVNode("v-if", true)], 2
    /* CLASS */
    )], 2
    /* CLASS */
    )], 2
    /* CLASS */
    ), _ctx.showContent[filter.code] && filter.type !== 'bool-check' ? (openBlock(), createBlock("div", {
      key: 0,
      "class": _ctx.bem('field-content')
    }, [(openBlock(), createBlock(resolveDynamicComponent(filter.component), {
      type: filter.type,
      fieldProps: filter.fieldProps,
      id: filter.id,
      code: filter.code,
      name: filter.name,
      selecteds: _ctx.selecteds[filter.code],
      "onUpdate:modelValue": [function ($event) {
        return _ctx.onChange($event, filter.code);
      }, function ($event) {
        return _ctx.filterData[filter.code] = $event;
      }],
      "onUpdate:text": function onUpdateText($event) {
        return _ctx.onTextChange($event, filter.code);
      },
      "onUpdate:value": function onUpdateValue($event) {
        return _ctx.onIdChange($event, filter.code);
      },
      modelValue: _ctx.filterData[filter.code]
    }, null, 8
    /* PROPS */
    , ["type", "fieldProps", "id", "code", "name", "selecteds", "onUpdate:modelValue", "onUpdate:text", "onUpdate:value", "modelValue"]))], 2
    /* CLASS */
    )) : createCommentVNode("v-if", true)], 2
    /* CLASS */
    );
  }), 128
  /* KEYED_FRAGMENT */
  );
}

script$a.render = render$a;
script$a.__file = "packages/filter-panel/src/components/panel.vue";

var _components$8;
var script$b = {
  name: 'fm-filter-panel',
  components: (_components$8 = {}, _components$8[script$a.name] = script$a, _components$8),
  props: {
    fieldConfigs: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    extraConditions: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    modelValue: {
      type: Object,
      "default": function _default() {
        return {};
      }
    },
    query: Function
  },
  setup: function setup(props, _ref) {
    var emit = _ref.emit;
    var filterData = reactive({});
    var filterList = computed(function () {
      return props.fieldConfigs.filter(function (field) {
        return field && field.control && TypeMapping[field.control.controltype];
      }).map(formatField);
    });
    filterList.value.forEach(function (filed) {
      // 动态添加响应数据
      var code = filed.code;
      filterData[code] = props.modelValue[code] ? props.modelValue[code] : null;
    });
    var hasClear = ref(false);

    var onReset = function onReset() {
      reset(filterData);
      hasClear.value = !hasClear.value;
      onChange();
      emit('clear');
    };

    var onChange = function onChange() {
      emit('change', filterData);
    };

    var onConfirm = function onConfirm() {
      var filterEnyity = getFilterEnyity(filterData, props.fieldConfigs, props.extraConditions);
      emit('confirm', {
        filterData: filterData,
        filterEnyity: filterEnyity
      });
      props.query && props.query(filterEnyity);
    };

    return {
      filterList: filterList,
      filterData: filterData,
      onReset: onReset,
      onChange: onChange,
      onConfirm: onConfirm,
      hasClear: hasClear
    };
  }
};

var _hoisted_1$2 = {
  "class": "fm-filter-panel"
};
var _hoisted_2$2 = {
  "class": "fm-filter-panel-content"
};
var _hoisted_3 = {
  "class": "fm-filter-panel-footer"
};
var _hoisted_4 = {
  "class": "button-wrapper"
};

var _hoisted_5 = /*#__PURE__*/createTextVNode("重置");

var _hoisted_6 = /*#__PURE__*/createTextVNode("确定");

function render$b(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_component_panel = resolveComponent("component-panel");

  var _component_fm_button = resolveComponent("fm-button");

  return openBlock(), createBlock("div", _hoisted_1$2, [createVNode("div", _hoisted_2$2, [createVNode(_component_component_panel, {
    filterList: $setup.filterList,
    filterData: $setup.filterData,
    hasClear: $setup.hasClear,
    onChange: $setup.onChange
  }, {
    "lookup-cell": withCtx(function (slotProps) {
      return [renderSlot(_ctx.$slots, "lookup-cell", {
        listData: slotProps.listData,
        item: slotProps.item,
        idField: slotProps.idField,
        textField: slotProps.textField
      })];
    }),
    _: 1
    /* STABLE */

  }, 8
  /* PROPS */
  , ["filterList", "filterData", "hasClear", "onChange"])]), createVNode("div", _hoisted_3, [createCommentVNode(" <div class=\"button\" @click=\"onReset\">重置</div>\r\n      <div class=\"button bgc-blue\" @click=\"onConfirm\">确定</div> "), createVNode("div", _hoisted_4, [createVNode(_component_fm_button, {
    "class": "button",
    plain: "",
    round: "",
    onClick: $setup.onReset
  }, {
    "default": withCtx(function () {
      return [_hoisted_5];
    }),
    _: 1
    /* STABLE */

  }, 8
  /* PROPS */
  , ["onClick"]), createVNode(_component_fm_button, {
    "class": "button",
    round: "",
    onClick: $setup.onConfirm
  }, {
    "default": withCtx(function () {
      return [_hoisted_6];
    }),
    _: 1
    /* STABLE */

  }, 8
  /* PROPS */
  , ["onClick"])])])]);
}

script$b.render = render$b;
script$b.__file = "packages/filter-panel/src/filter-panel.vue";

var script$c = defineComponent({
  name: 'fm-filter-simple-panel',
  props: {
    modelValue: {
      type: Object,
      "default": function _default() {
        return {};
      }
    },
    fieldConfigs: {
      type: Array,
      "default": function _default() {
        return [];
      }
    }
  },
  setup: function setup(props, _ref) {
    var emit = _ref.emit;
    var filterData = reactive({});
    var menuData = computed(function () {
      return props.fieldConfigs.length > 1 ? props.fieldConfigs.filter(function (item) {
        return item.control.controltype === 'dropdown';
      }).map(formatField) : [];
    });
    var currentMenuItem = ref();
    watch(menuData, function () {
      currentMenuItem.value = menuData.value[0];
      menuData.value.forEach(function (filed) {
        // 动态添加响应数据
        var code = filed.code;
        filterData[code] = props.modelValue[code] ? props.modelValue[code] : null;
      });
    }, {
      immediate: true
    });
    var listData = computed(function () {
      var _targetData$fieldProp;

      var targetData = menuData.value.find(function (item) {
        var _currentMenuItem$valu;

        return item.id === ((_currentMenuItem$valu = currentMenuItem.value) == null ? void 0 : _currentMenuItem$valu.id);
      });
      return targetData != null && (_targetData$fieldProp = targetData.fieldProps) != null && _targetData$fieldProp.enumValues ? targetData.fieldProps.enumValues : [];
    });

    var onMenuItemClick = function onMenuItemClick(item) {
      currentMenuItem.value = item;
    };

    var onListItemClick = function onListItemClick(item) {
      var _currentMenuItem$valu2;

      var code = (_currentMenuItem$valu2 = currentMenuItem.value) == null ? void 0 : _currentMenuItem$valu2.code;

      if (!code) {
        return;
      }

      filterData[code] = filterData[code] === item.value ? null : item.value;
      var filterEnyity = getFilterEnyity(filterData, props.fieldConfigs);
      emit('change', filterData);
      emit('confirm', {
        filterData: filterData,
        filterEnyity: filterEnyity
      });
    };

    var isListItemSelected = function isListItemSelected(item) {
      var _currentMenuItem$valu3;

      var code = (_currentMenuItem$valu3 = currentMenuItem.value) == null ? void 0 : _currentMenuItem$valu3.code;

      if (!code) {
        return false;
      }

      var selectedValue = filterData[code];
      return item.value === selectedValue;
    };

    var isMenuItemSelected = function isMenuItemSelected(item) {
      var _currentMenuItem$valu4;

      return item.id === ((_currentMenuItem$valu4 = currentMenuItem.value) == null ? void 0 : _currentMenuItem$valu4.id);
    };

    var getMenuClass = function getMenuClass(item, index) {
      var currentIndex = menuData.value.findIndex(function (menuItem) {
        var _currentMenuItem$valu5;

        return menuItem.id === ((_currentMenuItem$valu5 = currentMenuItem.value) == null ? void 0 : _currentMenuItem$valu5.id);
      });
      return {
        'menu-item-selected': isMenuItemSelected(item),
        'menu-item-selected-prev': currentIndex - index === 1,
        'menu-item-selected-next': index - currentIndex === 1
      };
    };

    return {
      menuData: menuData,
      listData: listData,
      onMenuItemClick: onMenuItemClick,
      onListItemClick: onListItemClick,
      isMenuItemSelected: isMenuItemSelected,
      isListItemSelected: isListItemSelected,
      getMenuClass: getMenuClass
    };
  }
});

var _hoisted_1$3 = {
  "class": "fm-filter-simple-panel"
};
var _hoisted_2$3 = {
  "class": "content"
};
var _hoisted_3$1 = {
  key: 0,
  "class": "menu"
};
var _hoisted_4$1 = {
  "class": "list"
};
function render$c(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_fm_cell = resolveComponent("fm-cell");

  var _component_fm_icon = resolveComponent("fm-icon");

  return openBlock(), createBlock("div", _hoisted_1$3, [createVNode("div", _hoisted_2$3, [_ctx.menuData.length > 1 ? (openBlock(), createBlock("div", _hoisted_3$1, [(openBlock(true), createBlock(Fragment, null, renderList(_ctx.menuData, function (menuItem, index) {
    return openBlock(), createBlock("div", {
      "class": ["menu-item", _ctx.getMenuClass(menuItem, index)],
      onClick: function onClick($event) {
        return _ctx.onMenuItemClick(menuItem);
      }
    }, [createVNode(_component_fm_cell, {
      "class": "menu-item-cell",
      title: menuItem.name
    }, null, 8
    /* PROPS */
    , ["title"])], 10
    /* CLASS, PROPS */
    , ["onClick"]);
  }), 256
  /* UNKEYED_FRAGMENT */
  ))])) : createCommentVNode("v-if", true), createVNode("div", _hoisted_4$1, [(openBlock(true), createBlock(Fragment, null, renderList(_ctx.listData, function (item) {
    return openBlock(), createBlock("div", {
      "class": "list-item",
      onClick: function onClick($event) {
        return _ctx.onListItemClick(item);
      }
    }, [createVNode(_component_fm_cell, {
      title: item.name
    }, createSlots({
      _: 2
      /* DYNAMIC */

    }, [_ctx.isListItemSelected(item) ? {
      name: "right-icon",
      fn: withCtx(function () {
        return [createVNode(_component_fm_icon, {
          "class": "list-item-icon",
          name: "s-success"
        })];
      })
    } : undefined]), 1032
    /* PROPS, DYNAMIC_SLOTS */
    , ["title"])], 8
    /* PROPS */
    , ["onClick"]);
  }), 256
  /* UNKEYED_FRAGMENT */
  ))])])]);
}

script$c.render = render$c;
script$c.__file = "packages/filter-panel/src/filter-simple-panel.vue";

script$b.install = function (app) {
  app.component(script$b.name, script$b);
};

script$c.install = function (app) {
  app.component(script$c.name, script$c);
};

export { script$b as FilterPanel, script$c as FilterSimplePanel };
