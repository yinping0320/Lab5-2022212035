import { ref, watch, defineComponent, createVNode, Transition, isVNode, withDirectives, vShow } from 'vue';
import '../utils';
import '@vue/compiler-core';
import 'dayjs';

function useLazyRender(show) {
  var inited = ref(false);
  watch(show, function (value) {
    if (value) {
      inited.value = value;
    }
  }, {
    immediate: true
  });
  return function (render) {
    return function () {
      return inited.value ? render() : null;
    };
  };
}

var DragStatus;

(function (DragStatus) {
  DragStatus[DragStatus["NotStarted"] = 0] = "NotStarted";
  DragStatus[DragStatus["Started"] = 1] = "Started";
  DragStatus[DragStatus["Dragging"] = 2] = "Dragging";
  DragStatus[DragStatus["End"] = 3] = "End";
})(DragStatus || (DragStatus = {}));

var dynamicTemplate = defineComponent({
  name: 'dynamic-template',
  props: {
    props: {
      type: Object,
      "default": function _default() {
        return {};
      }
    }
  },
  render: function render() {}
});

function stopPropagation(event) {
  event.stopPropagation();
}
function preventDefault(event, isStopPropagation) {
  if (typeof event.cancelable !== 'boolean' || event.cancelable) {
    event.preventDefault();
  }

  if (isStopPropagation) {
    stopPropagation(event);
  }
}

function noop() {}
function makeMap(str, expectsLowerCase) {
  if (expectsLowerCase === void 0) {
    expectsLowerCase = false;
  }

  var map = Object.create(null);
  var list = str.split(',');

  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }

  return expectsLowerCase ? function (val) {
    return !!map[val.toLowerCase()];
  } : function (val) {
    return !!map[val];
  };
}

var HTML_TAGS = 'html,body,base,head,link,meta,style,title,address,article,aside,footer,' + 'header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,' + 'figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,' + 'data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,' + 'time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,' + 'canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,' + 'th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,' + 'option,output,progress,select,textarea,details,dialog,menu,' + 'summary,template,blockquote,iframe,tfoot';
var isHTMLTag = makeMap(HTML_TAGS);

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}

var Overlay = defineComponent({
  name: 'fm-overlay',
  props: {
    show: Boolean,
    zIndex: [Number, String],
    duration: [Number, String],
    className: null,
    customStyle: Object,
    lockScroll: {
      type: Boolean,
      "default": true
    }
  },
  setup: function setup(props, _ref) {
    var slots = _ref.slots;
    var lazyRender = useLazyRender(function () {
      return props.show;
    });

    var preventTouchMove = function preventTouchMove(event) {
      preventDefault(event, true);
    };

    var renderOverlay = lazyRender(function () {
      var _a;

      var style = Object.assign({
        zIndex: props.zIndex !== undefined ? +props.zIndex : undefined,
        animationDuration: props.duration ? props.duration + "s" : ''
      }, props.customStyle);
      return withDirectives(createVNode("div", {
        "style": style,
        "class": ['fm-overlay', props.className],
        "onTouchmove": props.lockScroll ? preventTouchMove : noop
      }, [(_a = slots["default"]) === null || _a === void 0 ? void 0 : _a.call(slots)]), [[vShow, props.show]]);
    });
    return function () {
      var _slot;

      return createVNode(Transition, {
        "name": "fm-fade"
      }, _isSlot(_slot = renderOverlay()) ? _slot : {
        "default": function _default() {
          return [_slot];
        }
      });
    };
  }
});

Overlay.install = function (app) {
  app.component(Overlay.name, Overlay);
};

export default Overlay;
export { Overlay };
