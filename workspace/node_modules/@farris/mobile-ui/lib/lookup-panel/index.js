import { ref, inject, unref, reactive, defineComponent, watch, computed, resolveComponent, openBlock, createBlock, createVNode, toDisplayString, createCommentVNode, Fragment, renderList, withCtx, withModifiers, renderSlot, createSlots, createTextVNode, withDirectives, vShow } from 'vue';
import Cell from '../cell';
import Icon from '../icon';
import Button from '../button';
import { isDef, toUpperCase, isArray, getValue, isString, isFunction, toLowerCase, debounce, preventDefault } from '../utils';
import Loading from '../loading';
import { useMd5, useRootProps, useBem, dynamicTemplate, useDynamicTemplate } from '../hook';
import { Notify } from '../notify';
import Input from '../input';
import { List } from 'vant';
import Navbar from '../navbar';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
function __rest(s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}

var useGetTreeData = function useGetTreeData(defaultIdField) {
  var treeData = [];
  var parentData = [];

  var getTreeData = function getTreeData(data, id, idField) {
    if (id === void 0) {
      id = '';
    }

    if (!data) {
      return treeData;
    }

    idField = idField ? idField : defaultIdField;
    parentData = [];
    var finished = false;

    if (!id) {
      treeData = data.map(function (el) {
        var data = el.data,
            others = __rest(el, ["data"]);

        return Object.assign(Object.assign({}, data), {
          __meta: others
        });
      });
    } else {

      (function each(data, id) {
        var len = data.length;
        var index = 0;

        while (len > index && !finished) {
          var el = data[index];
          index++;

          if (el.data[idField] === id) {
            var _data = el.data,
                others = __rest(el, ["data"]);

            parentData.push(Object.assign(Object.assign({}, _data), {
              __meta: others
            }));
            treeData = el.children.map(function (item) {
              var data = item.data,
                  others = __rest(item, ["data"]);

              return Object.assign(Object.assign({}, data), {
                __meta: others
              });
            });
            finished = true;
          } else if (el.children && el.children.length) {
            var flag = each(el.children, id);

            if (flag) {
              var _data2 = el.data,
                  _others = __rest(el, ["data"]);

              parentData.push(Object.assign(Object.assign({}, _data2), {
                __meta: _others
              }));
            }
          }
        }

        return finished;
      })(data, id);
    }

    parentData.reverse();
    return treeData;
  };

  var getParentData = function getParentData() {
    return [].concat(parentData);
  };

  return {
    getTreeData: getTreeData,
    getParentData: getParentData
  };
};

var KEYLIST = ['customData', 'pageIndex', 'pageSize', 'pageInfo', 'search', 'enableFullTree', 'selectedInfo', 'relationFilter', 'loadTreeDataType', 'useFullTree'];
function buildQueryParams(rawParams, type) {
  if (type === void 0) {
    type = 'all';
  }

  var params = {};
  var searchParam = {
    category: type
  };
  Object.keys(rawParams).forEach(function (paramName) {
    if (KEYLIST.includes(paramName) && isDef(rawParams[paramName])) {
      if (paramName === 'search') {
        Object.keys(rawParams.search).forEach(function (searchParamName) {
          isDef(rawParams.search[searchParamName]) && (searchParam[searchParamName] = rawParams.search[searchParamName]);
        });
      } else {
        params[paramName] = rawParams[paramName];
      }
    }
  });
  params.searchValue = JSON.stringify(searchParam);
  return params;
}
var useLoadParam = function useLoadParam(params) {
  if (params === void 0) {
    params = {
      pageIndex: 1,
      pageSize: 20
    };
  }

  var innerParams = ref({});
  var defaultParams = params;

  var setParam = function setParam(key, value) {
    innerParams.value[key] = value;
  };

  var getParam = function getParam(key) {
    return innerParams.value[key];
  };

  var setParams = function setParams(params, enableNUll) {
    if (enableNUll === void 0) {
      enableNUll = false;
    }

    KEYLIST.forEach(function (key) {
      return (isDef(params[key]) || enableNUll) && setParam(key, params[key]);
    });
  };

  var getParams = function getParams() {
    return Object.assign({}, innerParams.value);
  };

  var buildParams = function buildParams(type) {
    if (type === void 0) {
      type = 'all';
    }

    return buildQueryParams(innerParams.value, type);
  };

  var resetParams = function resetParams() {
    innerParams.value = {};
    setParams(defaultParams);
  };

  var gotoPage = function gotoPage(index) {
    if (index === void 0) {
      index = 1;
    }

    innerParams.value.pageIndex && (innerParams.value.pageIndex = innerParams.value.pageIndex + index);
  };

  var setDefaultParams = function setDefaultParams(params) {
    defaultParams = params;
    setParams(defaultParams, true);
  };

  setParams(defaultParams);
  return {
    params: innerParams,
    setParam: setParam,
    getParam: getParam,
    setParams: setParams,
    getParams: getParams,
    buildParams: buildParams,
    resetParams: resetParams,
    gotoPage: gotoPage,
    setDefaultParams: setDefaultParams
  };
};

var useHttpService = function useHttpService(url) {
  if (url === void 0) {
    url = '';
  }

  var LookupHttpService = inject('LookupHttpService', {});

  var initHttp = function initHttp(cb) {
    return new Promise(function (resolve, reject) {
      var asyncTarget = cb();
      Loading.show('加载中');

      if (asyncTarget instanceof Promise) {
        asyncTarget.then(function (res) {
          Loading.hide();
          resolve(res);
        });
      } else if (asyncTarget && asyncTarget.subscribe) {
        asyncTarget.subscribe(function (res) {
          Loading.hide();
          resolve(res);
        });
      } else {
        Loading.hide();
        console.warn('Http服务返回值异常！');
        reject('Http服务返回值异常');
      }
    });
  };

  var getData = function getData(params) {
    return initHttp(function () {
      return LookupHttpService.getData(url, params);
    });
  };

  var request = function request(method, url, config) {
    if (config === void 0) {
      config = {};
    }

    return initHttp(function () {
      return LookupHttpService.request(method, url, config);
    });
  };

  return {
    getData: getData,
    request: request
  };
};

var memoizedKeys = [];
var memoizedRecentData = [];
var memoizedFavoriteData = [];
var index = 0;
var personalConfig = {};

var _useMd = useMd5(),
    md5 = _useMd.md5;

var URL = '/api/runtime/bcc/v1.0/datagrid/settings';
var usePresonal = function usePresonal(props) {
  var _a, _b, _c;

  var _useLoadParam = useLoadParam({
    pageIndex: 1,
    pageSize: 0
  }),
      setParams = _useLoadParam.setParams,
      setParam = _useLoadParam.setParam,
      buildParams = _useLoadParam.buildParams;

  var currentPage = ref('list');
  var currentIndex = index;

  if (props) {
    var _key = ((_a = props.personalConfig) === null || _a === void 0 ? void 0 : _a.key) ? props.personalConfig.key : props.url;

    memoizedKeys[currentIndex] = encrypt(_key, !((_b = props.personalConfig) === null || _b === void 0 ? void 0 : _b.key));
    memoizedRecentData[currentIndex] = ref([]);
    memoizedFavoriteData[currentIndex] = ref([]);
    index++;
  } else {
    currentIndex = index - 1;

    var _useRootProps = useRootProps('lookup-panel'),
        getProps = _useRootProps.getProps;

    props = getProps();
  }

  var _useHttpService = useHttpService(props === null || props === void 0 ? void 0 : props.url),
      getData = _useHttpService.getData;

  var key = memoizedKeys[currentIndex];
  var recentData = memoizedRecentData[currentIndex];
  var favoriteData = memoizedFavoriteData[currentIndex];

  var _ref = ((_c = props === null || props === void 0 ? void 0 : props.personalConfig) === null || _c === void 0 ? void 0 : _c.type) === 'remote' ? remotePresonal(key) : LocalPresonal(key),
      getPersonalConfig = _ref.getPersonalConfig,
      setPersonalConfig = _ref.setPersonalConfig;

  var initPersonal = function initPersonal() {
    setParams({
      enableFullTree: false,
      useFullTree: false,
      loadTreeDataType: 'default'
    });
    getPersonalConfig().then(function (config) {
      getRecentData();
      getFavoriteData();
      currentPage.value = getConfigValue('currentPage', toUpperCase(props === null || props === void 0 ? void 0 : props.type) === 'NAVTREELIST' ? 'recent' : 'list');
    });
  };

  var getConfigValue = function getConfigValue(name, defaultValue) {
    if (defaultValue === void 0) {
      defaultValue = [];
    }

    return personalConfig[name] ? personalConfig[name] : defaultValue;
  };

  var setRecentData = function setRecentData(data) {
    var _a, _b;

    var _recentData = isArray(recentData.value) ? recentData.value.filter(function (item) {
      return !data.find(function (dataItem) {
        return getValue(props === null || props === void 0 ? void 0 : props.idField, dataItem) === getValue(props === null || props === void 0 ? void 0 : props.idField, item);
      });
    }) : [];

    var maxRecentData = ((_a = props === null || props === void 0 ? void 0 : props.personalConfig) === null || _a === void 0 ? void 0 : _a.maxRecentData) ? props.personalConfig.maxRecentData : 5;
    var result = [].concat(data, _recentData).slice(0, maxRecentData);
    recentData.value = result;

    if ((_b = props === null || props === void 0 ? void 0 : props.personalConfig) === null || _b === void 0 ? void 0 : _b.disableGetRecentData) {
      return;
    }

    setPersonalConfig({
      recentData: result.map(function (item) {
        return getValue(props === null || props === void 0 ? void 0 : props.idField, item);
      })
    });
  };

  var getRecentData = function getRecentData() {
    var _a;

    if ((_a = props === null || props === void 0 ? void 0 : props.personalConfig) === null || _a === void 0 ? void 0 : _a.disableGetRecentData) {
      return;
    }

    var ids = getConfigValue('recentData');

    if (ids && ids.length <= 0) {
      recentData.value = [];
      return;
    }

    setParam('search', {
      favoriteIds: ids
    });
    getData(buildParams('fav')).then(function (res) {
      var items = (res === null || res === void 0 ? void 0 : res.items) ? res.items : [];
      recentData.value = items;
    });
  };

  var setFavoriteData = function setFavoriteData(data) {
    var result = [];

    if (isFavorited(data)) {
      result = favoriteData.value.filter(function (item) {
        return getValue(props === null || props === void 0 ? void 0 : props.idField, item) !== getValue(props === null || props === void 0 ? void 0 : props.idField, data);
      });
    } else {
      result = [].concat(favoriteData.value, [data]);
    }

    favoriteData.value = result;
    setPersonalConfig({
      favoriteData: result.map(function (item) {
        return getValue(props === null || props === void 0 ? void 0 : props.idField, item);
      })
    });
  };

  var getFavoriteData = function getFavoriteData() {
    var ids = getConfigValue('favoriteData');

    if (ids && ids.length <= 0) {
      favoriteData.value = [];
      return;
    }

    setParam('search', {
      favoriteIds: ids
    });
    getData(buildParams('fav')).then(function (res) {
      var items = (res === null || res === void 0 ? void 0 : res.items) ? res.items : [];
      favoriteData.value = items;
    });
  };

  var isFavorited = function isFavorited(item) {
    return favoriteData.value.find(function (elment) {
      return getValue(props === null || props === void 0 ? void 0 : props.idField, elment) === getValue(props === null || props === void 0 ? void 0 : props.idField, item);
    });
  };

  return {
    recentData: recentData,
    favoriteData: favoriteData,
    currentPage: currentPage,
    initPersonal: initPersonal,
    setRecentData: setRecentData,
    setFavoriteData: setFavoriteData,
    isFavorited: isFavorited
  };
};

var LocalPresonal = function LocalPresonal(key) {
  var getPersonalConfig = function getPersonalConfig() {
    var personalConfigStr = localStorage.getItem(key);
    personalConfig = personalConfigStr ? JSON.parse(personalConfigStr) : {};
    return Promise.resolve(personalConfig);
  };

  var setPersonalConfig = function setPersonalConfig(config) {
    if (!config) {
      return;
    }

    personalConfig = Object.assign(Object.assign({}, personalConfig), config);
    var personalConfigStr = JSON.stringify(personalConfig);
    localStorage.setItem(key, personalConfigStr);
  };

  return {
    getPersonalConfig: getPersonalConfig,
    setPersonalConfig: setPersonalConfig
  };
};

var remotePresonal = function remotePresonal(key) {
  var _useHttpService2 = useHttpService(),
      request = _useHttpService2.request;

  var getPersonalConfig = function getPersonalConfig() {
    return new Promise(function (resolve) {
      request('GET', URL + '/' + key).then(function (res) {
        var personalConfigStr = (res === null || res === void 0 ? void 0 : res.textValue) ? res.textValue : '';
        personalConfig = personalConfigStr ? JSON.parse(personalConfigStr) : {};
        resolve(personalConfig);
      });
    });
  };

  var setPersonalConfig = function setPersonalConfig(config) {
    if (!config) {
      return;
    }

    personalConfig = Object.assign(Object.assign({}, personalConfig), config);
    var personalConfigStr = JSON.stringify(personalConfig);
    var body = {
      configkey1: key,
      configkey2: '',
      configkey3: '',
      textvalue: personalConfigStr
    };
    request('POST', URL, {
      body: body
    }).then(function (res) {
      console.log('personal config save success');
    });
  };

  return {
    getPersonalConfig: getPersonalConfig,
    setPersonalConfig: setPersonalConfig
  };
};

var encrypt = function encrypt(str, isPrefix) {
  if (isPrefix === void 0) {
    isPrefix = true;
  }

  if (!isPrefix) {
    return md5(str);
  }

  var prefix = location.pathname;

  if (location.hash) {
    var pathArr = location.hash.split('?');
    prefix = prefix + (pathArr ? pathArr[0] : '');
  }

  return md5(prefix + '~' + str);
};

var emptySelected = {
  value: '',
  values: [],
  text: '',
  texts: [],
  items: []
};
var memoizedSelecteds = [];
var memoizedProps = [];
var index$1 = 0;
var historySelected = null;
var useSelect = function useSelect(props) {
  var currentIndex = index$1;

  if (props) {
    memoizedSelecteds[currentIndex] = ref(emptySelected);
    memoizedProps[currentIndex] = props;
    historySelected = null;
    index$1++;
  } else {
    currentIndex = index$1 - 1;
  }

  var selected = memoizedSelecteds[currentIndex];
  props = memoizedProps[currentIndex];
  var LookupMappingFn = inject('LookupMappingFn', {});

  var getSelectedValues = function getSelectedValues(ignorMapValue) {
    if (ignorMapValue === void 0) {
      ignorMapValue = false;
    }

    var _selected = unref(selected);

    var innerSelectedValues = _selected.value ? _selected.value : props.selectedValues;
    var mapIdField = props.mapFields && props.mapFields[props.idField];

    if (!ignorMapValue && (LookupMappingFn === null || LookupMappingFn === void 0 ? void 0 : LookupMappingFn.getFieldValue) && mapIdField) {
      innerSelectedValues = LookupMappingFn.getFieldValue(mapIdField);
    }

    return isString(innerSelectedValues) ? innerSelectedValues.split(',') : [];
  };

  var initSelected = function initSelected(dataList) {
    if (!isArray(dataList)) {
      return;
    }

    var values = dataList.map(function (item) {
      return getValue(props.idField, item);
    });
    var value = values.join(',');
    var texts = dataList.map(function (item) {
      return getValue(props.textField, item);
    });
    var text = texts.join(',');
    selected.value = {
      value: value,
      values: values,
      texts: texts,
      text: text,
      items: dataList
    };
  };

  var mapping = function mapping(items) {
    (LookupMappingFn === null || LookupMappingFn === void 0 ? void 0 : LookupMappingFn.mapFields) && LookupMappingFn.mapFields(items, props.mapFields);
  };

  var isSelected = function isSelected(value, ignorMapValue) {
    if (ignorMapValue === void 0) {
      ignorMapValue = true;
    }

    return getSelectedValues(ignorMapValue).includes(value);
  };

  var toggleSelecte = function toggleSelecte(item) {
    var _a;

    var idValue = getValue(props.idField, item);
    var items = [];

    var _selected = unref(selected);

    if (props.multiSelect) {
      if (isSelected(idValue)) {
        items = _selected.items.filter(function (el) {
          return getValue(props.idField, el) !== idValue;
        });
      } else {
        if (props.selectedLimit > 0 && ((_a = _selected.items) === null || _a === void 0 ? void 0 : _a.length) >= props.selectedLimit) {
          Notify.warning("\u6700\u591A\u9009\u4E2D" + props.selectedLimit + "\u6761");
          return selected.value.limited = true;
        }

        items = [].concat(_selected.items, [item]);
      }
    } else {
      items = isSelected(idValue) ? [] : [item];
    }

    var values = items.map(function (el) {
      return getValue(props.idField, el);
    });
    var value = values.join(',');
    var texts = items.map(function (el) {
      return getValue(props.textField, el);
    });
    var text = texts.join(',');
    selected.value = {
      value: value,
      values: values,
      text: text,
      texts: texts,
      items: items,
      limited: props.selectedLimit > 0 && items.length >= props.selectedLimit
    };
  };

  var toggleSelecteAll = function toggleSelecteAll(items) {
    var _items = [];

    var _selected = unref(selected);

    var _isSelectedAll = isSelectedAll(items);

    if (_isSelectedAll) {
      _items = _selected.items.filter(function (el) {
        return !items.some(function (item) {
          return getValue(props.idField, el) === getValue(props.idField, item);
        });
      });
    } else if (isArray(items)) {
      _items = [].concat(_selected.items);

      for (var i = 0; i < items.length; i++) {
        if (_selected.limited || props.selectedLimit > 0 && _items.length >= props.selectedLimit) {
          Notify.warning("\u6700\u591A\u9009\u4E2D" + props.selectedLimit + "\u6761");
          break;
        }

        var _value = getValue(props.idField, items[i]);

        if (!isSelected(_value)) {
          _items.push(items[i]);
        }
      }
    }

    console.log('toggleSelecteAll');

    var values = _items.map(function (el) {
      return getValue(props.idField, el);
    });

    var value = values.join(',');

    var texts = _items.map(function (el) {
      return getValue(props.textField, el);
    });

    var text = texts.join(',');
    selected.value = {
      value: value,
      values: values,
      text: text,
      texts: texts,
      items: _items,
      limited: props.selectedLimit > 0 && items.length >= props.selectedLimit
    };
  };

  var clearSelected = function clearSelected() {
    selected.value = emptySelected;
  };

  var isSelectedAll = function isSelectedAll(items) {
    return items.every(function (item) {
      return isSelected(getValue(props.idField, item));
    });
  };

  var recordHistorySelected = function recordHistorySelected() {
    historySelected = !historySelected ? selected.value : historySelected;
  };

  var backHistorySelected = function backHistorySelected() {
    if (historySelected) {
      selected.value = historySelected;
    }

    clearHistorySelected();
  };

  var clearHistorySelected = function clearHistorySelected() {
    historySelected = null;
  };

  return {
    selected: selected,
    initSelected: initSelected,
    getSelectedValues: getSelectedValues,
    mapping: mapping,
    isSelected: isSelected,
    isSelectedAll: isSelectedAll,
    toggleSelecte: toggleSelecte,
    toggleSelecteAll: toggleSelecteAll,
    clearSelected: clearSelected,
    recordHistorySelected: recordHistorySelected,
    backHistorySelected: backHistorySelected,
    clearHistorySelected: clearHistorySelected
  };
};

var DisplayType;

(function (DisplayType) {
  DisplayType["LIST"] = "LIST";
  DisplayType["TREELIST"] = "TREELIST";
  DisplayType["NAVLIST"] = "NAVLIST";
  DisplayType["NAVTREELIST"] = "NAVTREELIST";
})(DisplayType || (DisplayType = {}));

var LoadDataFrom;

(function (LoadDataFrom) {
  LoadDataFrom["INIT"] = "init";
  LoadDataFrom["SEARCH"] = "search";
  LoadDataFrom["PULL"] = "pull";
})(LoadDataFrom || (LoadDataFrom = {}));

var LoadTreeDataType;

(function (LoadTreeDataType) {
  LoadTreeDataType["DEFAULT"] = "default";
  LoadTreeDataType["ALL"] = "loadall";
  LoadTreeDataType["LAYER"] = "layerload";
})(LoadTreeDataType || (LoadTreeDataType = {}));

var useLoadData = function useLoadData(props) {
  var _useLoadParam = useLoadParam({
    pageIndex: 1,
    pageSize: isDef(props.pageSize) ? props.pageSize : 20
  }),
      setParam = _useLoadParam.setParam,
      getParam = _useLoadParam.getParam,
      setParams = _useLoadParam.setParams,
      getParams = _useLoadParam.getParams,
      buildParams = _useLoadParam.buildParams,
      resetParams = _useLoadParam.resetParams,
      gotoPage = _useLoadParam.gotoPage,
      setDefaultParams = _useLoadParam.setDefaultParams;

  var loadFinished = toUpperCase(props.type) !== DisplayType.TREELIST && !props.usePullDownLoad;
  var loadState = reactive({
    loadDataFrom: LoadDataFrom.INIT,
    loading: false,
    finished: loadFinished,
    totalPage: 0,
    pullLoading: false,
    searchLoading: false,
    searchFinished: false,
    searchTotalPage: 1,
    searchValue: '',
    searchFields: [],
    displayType: props.type ? toUpperCase(props.type) : DisplayType.LIST
  });

  var initLoadState = function initLoadState() {
    loadState.loadDataFrom = LoadDataFrom.INIT;
    loadState.loading = false;
    loadState.finished = loadFinished;
    loadState.totalPage = 0;
    loadState.pullLoading = false;
    loadState.searchLoading = false;
    loadState.searchFinished = false;
    loadState.searchTotalPage = 1;
    loadState.searchValue = '';
    loadState.searchFields = [];
    loadState.isShowHome = loadState.displayType === DisplayType.NAVTREELIST && props.usePersonal ? true : false;
  };

  var innerDataList = [];
  var innerParentData = [];
  var dataList = ref([]);
  var serverTemplate = ref('');

  var _useHttpService = useHttpService(props.url),
      getData = _useHttpService.getData;

  var _useSelect = useSelect(),
      getSelectedValues = _useSelect.getSelectedValues,
      initSelected = _useSelect.initSelected,
      clearSelected = _useSelect.clearSelected;

  var _usePresonal = usePresonal(),
      setRecentData = _usePresonal.setRecentData;

  var ListParams = {};
  var SearchParams = {};

  var initLoad = function initLoad() {
    resetParams();
    initLoadState();
    clearSelected();
    onBeforeGetData().then(function (result) {
      var _a;

      var selectedData = (result === null || result === void 0 ? void 0 : result.selectedData) ? result.selectedData : (_a = result === null || result === void 0 ? void 0 : result.items) === null || _a === void 0 ? void 0 : _a.filter(function (item) {
        return getSelectedValues().includes(getValue(props.idField, item));
      });
      initSelected(selectedData);
    });
  };

  var onSearch = function onSearch(value, isPullLoad) {
    if (isPullLoad === void 0) {
      isPullLoad = false;
    }

    var _a, _b;

    loadState.searchValue = value;

    if (!value) {
      return initSearchDataList({});
    }

    if (!props.url) {
      return filterData(value);
    }

    if (loadState.searchLoading) {
      return;
    }

    loadState.loadDataFrom = LoadDataFrom.SEARCH;
    loadState.searchLoading = true;

    if (isPullLoad) {
      gotoPage();
    } else {
      var field = (_b = (_a = loadState.searchFields) === null || _a === void 0 ? void 0 : _a.find(function (item) {
        return item.label === props.textField;
      })) === null || _b === void 0 ? void 0 : _b.value;
      var searchParams = {
        search: {
          searchField: '*',
          searchValue: value
        }
      };
      var loadDateTypeParams = {};

      if (loadState.displayType.includes('TREE')) {
        loadDateTypeParams.loadTreeDataType = LoadTreeDataType.ALL;
        loadDateTypeParams.enableFullTree = false;
        loadDateTypeParams.useFullTree = false;
      }

      var pageInfo = {
        pageIndex: 1,
        pageSize: 20
      };
      resetParams();
      setParams(Object.assign(Object.assign(Object.assign({}, pageInfo), searchParams), loadDateTypeParams));
      loadState.searchFinished = false;
    }

    SearchParams = getParams();
    var params = loadState.displayType === DisplayType.NAVTREELIST ? buildParams('list') : buildParams('search');

    if (loadState.searchTotalPage >= SearchParams.pageIndex || !isPullLoad) {
      getData(params).then(function (res) {
        initSearchDataList(res, isPullLoad);
        loadState.searchLoading = false;
        loadState.searchValue !== value && onSearch(loadState.searchValue);
      });
    } else {
      loadState.searchLoading = false;
      loadState.searchFinished = true;
    }
  };

  var filterData = function filterData(value) {
    searchDataList.value = innerDataList.filter(function (item) {
      return getValue(props.textField, item).includes(value);
    });
  };

  var searchDataList = ref([]);

  var initSearchDataList = function initSearchDataList(result, isPullLoad) {
    if (isPullLoad === void 0) {
      isPullLoad = false;
    }

    var _a;

    var data = result.returnValue ? result.returnValue : result;
    var items = (data === null || data === void 0 ? void 0 : data.items) ? data.items : [];
    searchDataList.value = isPullLoad ? [].concat(searchDataList.value, items) : items;

    if (data.total && ((_a = data.pageInfo) === null || _a === void 0 ? void 0 : _a.pageSize)) {
      loadState.searchTotalPage = Math.ceil(data.total / data.pageInfo.pageSize);
    }
  };

  var onPullLoad = function onPullLoad() {
    if (loadState.totalPage > ListParams.pageIndex) {
      if (loadState.pullLoading) {
        return;
      }

      console.log('pullLoad');
      loadState.loadDataFrom = LoadDataFrom.PULL;
      loadState.pullLoading = true;
      resetParams();
      setParams(ListParams);
      gotoPage();
      ListParams = getParams();
      var params = loadState.displayType === DisplayType.LIST ? buildParams() : buildParams('list');
      getData(params).then(function (res) {
        initData(res);
        loadState.pullLoading = false;
      });
    } else {
      loadState.finished = true;
    }
  };

  var onBeforeGetData = function onBeforeGetData() {
    return new Promise(function (resolve, reject) {
      if (!props.url) {
        initData(props.data);
        resolve(props.data);
        return;
      }

      try {
        var callBack = function callBack(res) {
          (res === null || res === void 0 ? void 0 : res.data) && setParam('customData', res.data);
          (res === null || res === void 0 ? void 0 : res.recentData) && setRecentData(res.recentData);

          if (loadState.displayType === DisplayType.TREELIST) {
            setDefaultParams({
              pageIndex: null,
              pageSize: null,
              loadTreeDataType: props.loadTreeDataType,
              enableFullTree: props.enableFullTree
            });
          } else if (loadState.displayType === DisplayType.NAVTREELIST) {
            setDefaultParams({
              pageIndex: 1,
              pageSize: 0,
              loadTreeDataType: props.loadTreeDataType
            });
          }

          setParams({
            selectedInfo: {
              selectedIds: getSelectedValues(),
              selected: true
            },
            pageSize: loadState.displayType === DisplayType.NAVTREELIST ? 1 : null
          });
          ListParams = getParams();
          var params = buildParams();
          getData(params).then(function (res) {
            initData(res);
            resolve(res);
          });
        };

        var asyncTarget = isFunction(props.beforeGetData) && props.beforeGetData();

        if (asyncTarget instanceof Promise) {
          asyncTarget.then(callBack);
        } else if (asyncTarget && asyncTarget.subscribe) {
          console.log('subscribe');
          asyncTarget.subscribe(callBack);
        } else {
          callBack();
        }
      } catch (error) {
        reject(error);
      }
    });
  };

  var initData = function initData(result) {
    var data = result.returnValue ? result.returnValue : result;
    loadState.searchFields = data.searchFields ? data.searchFields : loadState.searchFields;
    loadState.displayType = (data === null || data === void 0 ? void 0 : data.displayType) ? toUpperCase(data.displayType) : loadState.displayType;

    if (props.useServerTemplate) {
      serverTemplate.value = data.listTemplate ? data.listTemplate : '';
    }

    if (data.treeInfo) {
      loadState.treeInfo = data.treeInfo;
    }

    switch (loadState.displayType) {
      case DisplayType.LIST:
        {
          initListData(data);
          break;
        }

      case DisplayType.TREELIST:
        {
          initTreeListData(data);
          break;
        }

      case DisplayType.NAVTREELIST:
        {
          initNavTreeListData(data);
          break;
        }
    }
  };

  var initListData = function initListData(data) {
    var _a;

    if (isPullLoad()) {
      innerDataList = [].concat(innerDataList, data.items);
      loadState.loading = false;
    } else {
      innerDataList = data.items;
    }

    if (data.total && ((_a = data.pageInfo) === null || _a === void 0 ? void 0 : _a.pageSize)) {
      var floorTotal = Math.floor(data.total / data.pageInfo.pageSize);
      loadState.totalPage = data.total % data.pageInfo.pageSize ? floorTotal + 1 : floorTotal;
    }

    dataList.value = [].concat(innerDataList);
  };

  var _useGetTreeData = useGetTreeData(props.idField),
      getTreeData = _useGetTreeData.getTreeData,
      getParentData = _useGetTreeData.getParentData;

  var parentData = ref([]);

  var initTreeListData = function initTreeListData(data) {
    innerDataList = data.items;
    loadTreeData();
  };

  var initNavTreeListData = function initNavTreeListData(data) {
    var items = data.items,
        navigation = data.navigation;

    if (navigation) {
      innerParentData = navigation.items;
      loadState.relations = navigation.relations;
      loadState.treeInfo = navigation.treeInfo;
    }

    innerDataList = items;
    loadTreeData();
  };

  var loadTreeData = function loadTreeData(item) {
    var cb = function cb(res) {
      dataList.value = res.dataList;
      parentData.value = res.parentData;
    };

    if (loadState.displayType === DisplayType.TREELIST) {
      getTreeListData(item).then(cb);
    } else if (loadState.displayType === DisplayType.NAVTREELIST) {
      getNvaTreeData(item).then(cb);
    }
  };

  var getTreeListData = function getTreeListData(item) {
    var _a;

    if (item && isAsyncLoad()) {
      var nodeInfo = loadState.treeInfo && item[loadState.treeInfo.dataField];
      resetParams();
      setParams({
        search: {
          parentLayer: nodeInfo.layer,
          parentPath: nodeInfo.path,
          parentID: ((_a = loadState.treeInfo) === null || _a === void 0 ? void 0 : _a.layerType) === 'parentId' ? item.id : null
        },
        loadTreeDataType: props.loadTreeDataType
      });
      var params = buildParams('children');
      return new Promise(function (resolve) {
        getData(params).then(function (res) {
          var datas = res.items.map(function (item) {
            item.data.__meta = item;
            return item.data;
          });

          if (parentData.value.find(function (el) {
            return el[props.idField] === item[props.idField];
          })) {
            parentData.value.splice(-2, 2);
          }

          resolve({
            dataList: datas,
            parentData: [].concat(parentData.value, [item])
          });
        });
      });
    }

    var id = item ? item[props.idField] : '';
    return Promise.resolve({
      dataList: getTreeData(innerDataList, id),
      parentData: getParentData()
    });
  };

  var getNvaTreeData = function getNvaTreeData(item, isMerge) {
    if (isMerge === void 0) {
      isMerge = true;
    }

    var id = item ? item[props.idField] : '';
    var navDataList = getTreeData(innerParentData, id).map(function (data) {
      data.__isNav = true;
      return data;
    });

    if (id || item && isAsyncLoad()) {
      return new Promise(function (resolve) {
        getNvaTreeChildrenData(item).then(function (res) {
          var _a;

          var items = id ? res.items : [];
          innerDataList = items;

          if (isAsyncLoad()) {
            innerParentData = ((_a = res === null || res === void 0 ? void 0 : res.navigation) === null || _a === void 0 ? void 0 : _a.items) && res.navigation.items.length > 0 ? res.navigation.items : innerParentData;
            navDataList = getTreeData(innerParentData, id).map(function (data) {
              data.__isNav = true;
              return data;
            });
          }

          resolve({
            dataList: isMerge ? [].concat(items, navDataList) : items,
            parentData: getParentData()
          });
        });
      });
    }

    return Promise.resolve({
      dataList: navDataList,
      parentData: getParentData()
    });
  };

  var getNvaTreeChildrenData = function getNvaTreeChildrenData(item) {
    var relation = loadState.relations && loadState.relations[0];
    var groupField = relation === null || relation === void 0 ? void 0 : relation.groupField;
    var helpField = relation === null || relation === void 0 ? void 0 : relation.helpField;
    var groupFieldValue = groupField ? getValue(groupField, item) : '';
    resetParams();
    var params = {};

    if (isAsyncLoad()) {
      var nodeInfo = loadState.treeInfo && item && item[toLowerCase(loadState.treeInfo.dataField, 0, 1)];
      var isRoot = !nodeInfo;
      var navParams = isRoot ? {} : {
        search: {
          parentLayer: nodeInfo.layer,
          parentPath: nodeInfo.path
        },
        relationFilter: [{
          fieldName: helpField,
          fieldValue: groupFieldValue
        }]
      };
      setParams(Object.assign(Object.assign({}, navParams), {
        loadTreeDataType: props.loadTreeDataType,
        pageSize: isRoot ? 1 : 0
      }));
      params = buildParams();
    } else {
      setParams({
        enableFullTree: false,
        relationFilter: [{
          fieldName: helpField,
          fieldValue: groupFieldValue
        }],
        pageIndex: isPullLoad() ? getParam('pageIndex') : 1,
        pageSize: 0
      });
      params = buildParams('list');
    }

    return getData(params);
  };

  var isAsyncLoad = function isAsyncLoad() {
    var _a;

    return ((_a = loadState.treeInfo) === null || _a === void 0 ? void 0 : _a.loadDataType) === 'async' || props.loadTreeDataType === LoadTreeDataType.LAYER;
  };

  var isPullLoad = function isPullLoad() {
    return loadState.loadDataFrom === LoadDataFrom.PULL;
  };

  var resetData = function resetData() {
    loadState.currentItem = undefined;

    if (loadState.displayType.includes('TREE')) {
      loadTreeData();
    }

    dataList.value = [];
    searchDataList.value = [];
  };

  return {
    serverTemplate: serverTemplate,
    dataList: dataList,
    parentData: parentData,
    searchDataList: searchDataList,
    loadState: loadState,
    onSearch: onSearch,
    onPullLoad: onPullLoad,
    initLoad: initLoad,
    resetData: resetData,
    loadTreeData: loadTreeData,
    getNvaTreeData: getNvaTreeData
  };
};

var _components;
var script = defineComponent({
  name: 'lookup-header',
  components: (_components = {}, _components[Input.name] = Input, _components),
  props: {
    subTitle: {
      type: String,
      "default": ''
    },
    searchFocused: Boolean,
    isHome: Boolean,
    searchValue: String
  },
  setup: function setup(props, _ref) {
    var emit = _ref.emit;

    var _useRootProps = useRootProps('lookup-panel'),
        rootProps = _useRootProps.rootProps;

    var innerSearchValue = ref(props.searchValue);
    watch(function () {
      return props.searchValue;
    }, function (val) {
      return innerSearchValue.value = val;
    });

    var _useSelect = useSelect(),
        selected = _useSelect.selected,
        toggleSelecte = _useSelect.toggleSelecte,
        backHistorySelected = _useSelect.backHistorySelected;

    var onBack = function onBack() {
      if (props.searchFocused) {
        emit('update:searchFocused', false);
        emit('update:searchValue', '');
        emit('search', '');
        backHistorySelected();
      } else {
        emit('back');
      }
    };

    var onConfirm = function onConfirm() {
      emit('confirm');
    };

    var onSearch = function onSearch(value, type) {

      emit('update:searchValue', value);
      emit('search', value);
    };

    var onKeypress = function onKeypress(event) {
      if (event.code === 'Enter') {
        preventDefault(event);
      }
    };

    var isFocus = ref(false);

    var onBlur = function onBlur() {
      if (!innerSearchValue.value) {
        isFocus.value = false;
        emit('update:searchFocused', false);
      }
    };

    var onFocus = function onFocus() {
      isFocus.value = true;
      emit('update:searchFocused', true);
    };

    var selectedLength = computed(function () {
      return selected.value.items.length;
    });
    var showAvatar = computed(function () {
      return toUpperCase(rootProps.type) === DisplayType.NAVTREELIST;
    });

    var getAvatarText = function getAvatarText(text) {
      return isString(text) ? text.slice(-2) : '';
    };

    var showRoot = computed(function () {
      return props.isHome && !isFocus.value;
    });
    var inputRef = ref();

    var focus = function focus() {
      var _inputRef$value;

      (_inputRef$value = inputRef.value) == null ? void 0 : _inputRef$value.focus();
    };

    var showPortal = ref(true);

    var onPortalClick = function onPortalClick() {
      console.log('portal-click');
      showPortal.value = false;
      emit('portal-click');
    };

    return {
      rootProps: rootProps,
      selectedLength: selectedLength,
      showAvatar: showAvatar,
      showRoot: showRoot,
      selected: selected,
      innerSearchValue: innerSearchValue,
      showPortal: showPortal,
      inputRef: inputRef,
      getAvatarText: getAvatarText,
      focus: focus,
      onBack: onBack,
      onConfirm: onConfirm,
      onSearch: debounce(onSearch, 300),
      onKeypress: onKeypress,
      onBlur: onBlur,
      onFocus: onFocus,
      toggleSelecte: toggleSelecte,
      getValue: getValue,
      onPortalClick: onPortalClick
    };
  }
});

var _hoisted_1 = {
  "class": "fm-lookup-panel-header"
};
var _hoisted_2 = {
  "class": "nav-bar"
};
var _hoisted_3 = {
  "class": "nav-title"
};
var _hoisted_4 = {
  "class": "nav-sub-title"
};
var _hoisted_5 = {
  "class": ['search-wrapper', 'search-wrapper-vertical']
};
var _hoisted_6 = {
  key: 0,
  "class": "search-selected"
};
var _hoisted_7 = {
  "class": "search-selected-item-text"
};
var _hoisted_8 = {
  key: 1,
  "class": "search-selected-item-wrapper"
};
var _hoisted_9 = {
  "class": "search-selected-item-text"
};
var _hoisted_10 = {
  "class": "avatar-wrapper"
};
var _hoisted_11 = {
  key: 1
};
var _hoisted_12 = {
  key: 0,
  "class": "header-portal"
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_fm_icon = resolveComponent("fm-icon");

  var _component_fm_image = resolveComponent("fm-image");

  var _component_fm_input = resolveComponent("fm-input");

  var _component_fm_cell = resolveComponent("fm-cell");

  return openBlock(), createBlock("div", _hoisted_1, [createVNode("div", _hoisted_2, [createVNode("div", {
    "class": "nav-left",
    onClick: _cache[1] || (_cache[1] = function () {
      return _ctx.onBack && _ctx.onBack.apply(_ctx, arguments);
    })
  }, [createVNode(_component_fm_icon, {
    name: "s-arrow-left"
  })]), createVNode("div", {
    "class": "nav-content",
    style: {
      alignItems: _ctx.subTitle ? '' : 'center'
    }
  }, [createVNode("div", _hoisted_3, toDisplayString(_ctx.rootProps.title), 1
  /* TEXT */
  ), createVNode("div", _hoisted_4, toDisplayString(_ctx.subTitle), 1
  /* TEXT */
  )], 4
  /* STYLE */
  )]), createCommentVNode(" <fm-search\r\n      v-if=\"showSearch\"\r\n      :modelValue=\"searchValue\"\r\n      placeholder=\"请输入搜索关键词\"\r\n      @search=\"onSearch\"\r\n      @update:modelValue=\"onSearch($event, 'input')\"\r\n      @clear=\"onSearch('', 'clear')\"\r\n    >\r\n      <template #left-icon>\r\n        \r\n      </template>\r\n    </fm-search> "), createVNode("div", _hoisted_5, [_ctx.selectedLength > 0 ? (openBlock(), createBlock("div", _hoisted_6, [!_ctx.showAvatar ? (openBlock(), createBlock(Fragment, {
    key: 0
  }, [_ctx.selectedLength > _ctx.rootProps.collapseLimit ? (openBlock(), createBlock("div", {
    key: 0,
    "class": "search-selected-item",
    onClick: _cache[2] || (_cache[2] = function ($event) {
      return _ctx.$emit('seclected-click');
    })
  }, [createVNode("span", _hoisted_7, toDisplayString("" + _ctx.selected.texts[0]), 1
  /* TEXT */
  ), createVNode("span", null, toDisplayString("\u7B49" + _ctx.selectedLength + "\u4E2A"), 1
  /* TEXT */
  )])) : (openBlock(), createBlock("div", _hoisted_8, [(openBlock(true), createBlock(Fragment, null, renderList(_ctx.selected.items, function (item, index) {
    return openBlock(), createBlock("div", {
      "class": "search-selected-item",
      onClick: function onClick($event) {
        return _ctx.toggleSelecte(item);
      }
    }, [createVNode("span", _hoisted_9, toDisplayString(_ctx.selected.texts[index]), 1
    /* TEXT */
    )], 8
    /* PROPS */
    , ["onClick"]);
  }), 256
  /* UNKEYED_FRAGMENT */
  ))]))], 64
  /* STABLE_FRAGMENT */
  )) : (openBlock(), createBlock(Fragment, {
    key: 1
  }, [createVNode("div", _hoisted_10, [(openBlock(true), createBlock(Fragment, null, renderList(_ctx.selected.items, function (item, index) {
    return openBlock(), createBlock("div", {
      "class": "avatar",
      onClick: function onClick($event) {
        return _ctx.toggleSelecte(item);
      }
    }, [_ctx.getValue(_ctx.rootProps.avatarField, item) ? (openBlock(), createBlock(_component_fm_image, {
      key: 0,
      "class": "avatar-image",
      src: _ctx.rootProps.avatarPrefix + _ctx.getValue(_ctx.rootProps.avatarField, item) + _ctx.rootProps.avatarSuffix,
      round: ""
    }, {
      error: withCtx(function () {
        return [createVNode("span", null, toDisplayString(_ctx.getAvatarText(_ctx.selected.texts[index])), 1
        /* TEXT */
        )];
      }),
      _: 2
      /* DYNAMIC */

    }, 1032
    /* PROPS, DYNAMIC_SLOTS */
    , ["src"])) : (openBlock(), createBlock("span", _hoisted_11, toDisplayString(_ctx.getAvatarText(_ctx.selected.texts[index])), 1
    /* TEXT */
    ))], 8
    /* PROPS */
    , ["onClick"]);
  }), 256
  /* UNKEYED_FRAGMENT */
  ))]), createVNode("div", {
    "class": "search-selected-item",
    onClick: _cache[3] || (_cache[3] = function ($event) {
      return _ctx.$emit('seclected-click');
    })
  }, [createVNode("span", null, toDisplayString("\u5171" + _ctx.selectedLength + "\u4E2A"), 1
  /* TEXT */
  )])], 64
  /* STABLE_FRAGMENT */
  ))])) : createCommentVNode("v-if", true), _ctx.rootProps.useSearch ? (openBlock(), createBlock(_component_fm_input, {
    key: 1,
    ref: "inputRef",
    "class": "search-input",
    placeholder: "搜索",
    modelValue: _ctx.innerSearchValue,
    "onUpdate:modelValue": [_cache[4] || (_cache[4] = function ($event) {
      return _ctx.innerSearchValue = $event;
    }), _cache[5] || (_cache[5] = function ($event) {
      return _ctx.onSearch($event, 'input');
    })],
    "left-icon": _ctx.searchFocused ? '' : 's-search-o',
    inputAlign: "left",
    clearable: true,
    onKeypress: _ctx.onKeypress,
    onClear: _cache[6] || (_cache[6] = function ($event) {
      return _ctx.onSearch('', 'clear');
    }),
    onBlur: _ctx.onBlur,
    onFocus: _ctx.onFocus
  }, null, 8
  /* PROPS */
  , ["modelValue", "left-icon", "onKeypress", "onBlur", "onFocus"])) : createCommentVNode("v-if", true)]), _ctx.showRoot ? (openBlock(), createBlock("div", _hoisted_12, [createVNode(_component_fm_icon, {
    "class": "header-portal-icon",
    name: "s-processflow"
  }), createVNode(_component_fm_cell, {
    title: _ctx.rootProps.navTitle,
    isLink: "",
    onClick: withModifiers(_ctx.onPortalClick, ["stop"])
  }, null, 8
  /* PROPS */
  , ["title", "onClick"])])) : createCommentVNode("v-if", true)]);
}

script.render = render;
script.__file = "packages/lookup-panel/src/components/header.vue";

var _components$1;
var script$1 = defineComponent({
  name: 'lookup-list',
  components: (_components$1 = {}, _components$1[List.name] = List, _components$1),
  props: {
    dataList: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    parentData: {
      type: Object,
      "default": function _default() {
        return {};
      }
    },
    loading: {
      type: Boolean,
      "default": false
    },
    finished: {
      type: Boolean,
      "default": false
    }
  },
  setup: function setup(props, _ref) {
    var emit = _ref.emit;

    var _useRootProps = useRootProps('lookup-panel'),
        rootProps = _useRootProps.rootProps;

    var upperCaseType = computed(function () {
      return toUpperCase(rootProps.type);
    });

    var showAvatar = function showAvatar(item) {
      return upperCaseType.value === DisplayType.NAVTREELIST && !item.__isNav;
    };

    var showChecker = function showChecker(item) {
      return rootProps.multiSelect && !item.__isNav;
    };

    var showArrow = function showArrow(item) {
      return isNav(item) || !(isLeaf(item) || isParent(item));
    };

    var showStar = function showStar(item) {
      return upperCaseType.value !== DisplayType.NAVTREELIST ? rootProps.useFavorite : !showArrow(item) && rootProps.useFavorite;
    };

    var getAvatarText = function getAvatarText(item) {
      var text = getValue$1(item, 'text');
      return isString(text) ? text.slice(-2) : '';
    };

    var isLeaf = function isLeaf(item) {
      var _item$__meta;

      if (upperCaseType.value !== DisplayType.TREELIST) {
        return true;
      }

      return ((_item$__meta = item.__meta) == null ? void 0 : _item$__meta.leaf) || rootProps.customLeaf && rootProps.customLeaf(item);
    };

    var isNav = function isNav(item) {
      return upperCaseType.value === DisplayType.NAVTREELIST && item.__isNav;
    };

    var isParent = function isParent(item) {
      return isChildren.value && props.parentData[rootProps.idField] === item[rootProps.idField];
    };

    var isSelectable = function isSelectable(item) {
      return (!rootProps.onlySelectLeaf || rootProps.onlySelectLeaf && isLeaf(item)) && (rootProps.customSelectable ? rootProps.customSelectable(item) : true);
    };

    var isChildren = computed(function () {
      return props.parentData && props.parentData[rootProps.idField];
    });
    var bem = useBem('fm-lookup-panel-content');
    var allDataList = computed(function () {
      return props.parentData && props.parentData[rootProps.idField] ? [props.parentData].concat(props.dataList) : props.dataList;
    });

    var _usePresonal = usePresonal(),
        setFavoriteData = _usePresonal.setFavoriteData;

    var onIconClick = function onIconClick(item, type) {
      if (type === void 0) {
        type = 'arrow';
      }

      if (type === 'arrow') {
        emit('icon-click', item);
      } else {
        console.log('favorite');
        setFavoriteData(item);
      }
    };

    var _useSelect = useSelect(),
        isSelected = _useSelect.isSelected;

    var onCellClick = function onCellClick(item) {
      if (rootProps.onlySelectLeaf) {
        if (isLeaf(item)) {
          isSelectable(item) && emit('cell-click', item);
        } else {
          emit('icon-click', item);
        }
      } else if (isNav(item)) {
        emit('icon-click', item);
      } else {
        if (isSelectable(item)) {
          emit('cell-click', item);
        } else if (!isLeaf(item)) {
          emit('icon-click', item);
        }
      }
    };

    var loadingChange = function loadingChange(value) {
      return emit('update:loading', value);
    };

    var getValue$1 = function getValue$1(data, field) {
      if (field === void 0) {
        field = 'id';
      }

      var fieldName = field === 'text' ? data.__isNav ? rootProps.navTextField : rootProps.textField : field;
      return getValue(fieldName, data);
    };

    var listRef = ref();

    var checkLoad = function checkLoad() {
      listRef.value && listRef.value.check();
    };

    watch(function () {
      return props.dataList;
    }, checkLoad);

    var _usePresonal2 = usePresonal(),
        isFavorited = _usePresonal2.isFavorited;

    return {
      rootProps: rootProps,
      bem: bem,
      listRef: listRef,
      allDataList: allDataList,
      isSelected: isSelected,
      isLeaf: isLeaf,
      isChildren: isChildren,
      isSelectable: isSelectable,
      showAvatar: showAvatar,
      showChecker: showChecker,
      getAvatarText: getAvatarText,
      onCellClick: onCellClick,
      getValue: getValue$1,
      showArrow: showArrow,
      showStar: showStar,
      onIconClick: onIconClick,
      loadingChange: loadingChange,
      isFavorited: isFavorited
    };
  }
});

var _hoisted_1$1 = {
  "class": "list-checker-wrapper"
};
var _hoisted_2$1 = {
  key: 0,
  "class": "avatar-wrapper"
};
var _hoisted_3$1 = {
  "class": "avatar"
};
var _hoisted_4$1 = {
  key: 1
};
var _hoisted_5$1 = {
  key: 1,
  "class": "fm-lookup-list-empty"
};

var _hoisted_6$1 = /*#__PURE__*/createVNode("span", {
  "class": "fm-lookup-list-empty-text"
}, "暂无数据", -1
/* HOISTED */
);

function render$1(_ctx, _cache, $props, $setup, $data, $options) {
  var _this = this;

  var _component_fm_checker = resolveComponent("fm-checker");

  var _component_fm_image = resolveComponent("fm-image");

  var _component_fm_icon = resolveComponent("fm-icon");

  var _component_fm_cell = resolveComponent("fm-cell");

  var _component_van_list = resolveComponent("van-list");

  return _ctx.allDataList && _ctx.allDataList.length > 0 ? (openBlock(), createBlock(_component_van_list, {
    key: 0,
    "class": "list",
    loading: _ctx.loading,
    finished: _ctx.finished,
    ref: "listRef",
    "onUpdate:loading": _ctx.loadingChange,
    onLoad: _cache[1] || (_cache[1] = function ($event) {
      return _ctx.$emit('load');
    })
  }, {
    "default": withCtx(function () {
      return [(openBlock(true), createBlock(Fragment, null, renderList(_ctx.allDataList, function (item, index) {
        return openBlock(), createBlock("div", {
          key: item[_ctx.rootProps.idField],
          "class": [_ctx.bem('list-item'), _ctx.isSelected(item[_ctx.rootProps.idField]) ? _ctx.bem('list-item-selected') : '', _ctx.rootProps.multiSelect || _ctx.showAvatar(item) ? _ctx.bem('list-item-checker') : '', _ctx.isChildren && index > 0 ? _ctx.bem('list-item-children') : ''],
          onClick: function onClick($event) {
            return _ctx.onCellClick(item);
          }
        }, [createVNode("div", _hoisted_1$1, [_ctx.showChecker(item) ? (openBlock(), createBlock(_component_fm_checker, {
          key: 0,
          disabled: !_ctx.isSelectable(item),
          "class": _ctx.bem('list-item-icon'),
          checked: _ctx.isSelected(item[_ctx.rootProps.idField])
        }, null, 8
        /* PROPS */
        , ["disabled", "class", "checked"])) : createCommentVNode("v-if", true)]), _ctx.showAvatar(item) ? (openBlock(), createBlock("div", _hoisted_2$1, [createVNode("div", _hoisted_3$1, [_ctx.getValue(item, _ctx.rootProps.avatarField) ? (openBlock(), createBlock(_component_fm_image, {
          key: 0,
          "class": "avatar-image",
          src: _ctx.rootProps.avatarPrefix + _ctx.getValue(item, _ctx.rootProps.avatarField) + _ctx.rootProps.avatarSuffix,
          round: ""
        }, {
          error: withCtx(function () {
            return [createVNode("span", null, toDisplayString(_ctx.getAvatarText(item)), 1
            /* TEXT */
            )];
          }),
          _: 2
          /* DYNAMIC */

        }, 1032
        /* PROPS, DYNAMIC_SLOTS */
        , ["src"])) : (openBlock(), createBlock("span", _hoisted_4$1, toDisplayString(_ctx.getAvatarText(item)), 1
        /* TEXT */
        ))])])) : createCommentVNode("v-if", true), createVNode("div", {
          "class": _ctx.bem('list-item-cell-warpper')
        }, [renderSlot(_ctx.$slots, "default", {
          listData: _ctx.dataList,
          item: item,
          idField: _ctx.rootProps.idField,
          textField: _ctx.rootProps.textField,
          instance: _this
        }, function () {
          return [createVNode(_component_fm_cell, {
            title: _ctx.getValue(item, 'text'),
            "class": ["list-item-cell", {
              'list-item-cell-disabled': !_ctx.isSelectable(item)
            }]
          }, createSlots({
            _: 2
            /* DYNAMIC */

          }, [_ctx.showArrow(item) || _ctx.rootProps.useFavorite ? {
            name: "right-icon",
            fn: withCtx(function () {
              return [_ctx.showStar(item) ? (openBlock(), createBlock("div", {
                key: 0,
                "class": "list-item-cell-favorite",
                onClick: withModifiers(function ($event) {
                  return _ctx.onIconClick(item, 'fav');
                }, ["stop"])
              }, [createVNode(_component_fm_icon, {
                name: _ctx.isFavorited(item) ? 's-star' : 's-star-o'
              }, null, 8
              /* PROPS */
              , ["name"])], 8
              /* PROPS */
              , ["onClick"])) : createCommentVNode("v-if", true), _ctx.showArrow(item) ? (openBlock(), createBlock("div", {
                key: 1,
                "class": "list-item-cell-arrow",
                onClick: withModifiers(function ($event) {
                  return _ctx.onIconClick(item);
                }, ["stop"])
              }, [createVNode(_component_fm_icon, {
                name: "s-arrow"
              })], 8
              /* PROPS */
              , ["onClick"])) : createCommentVNode("v-if", true)];
            })
          } : undefined]), 1032
          /* PROPS, DYNAMIC_SLOTS */
          , ["title", "class"])];
        })], 2
        /* CLASS */
        )], 10
        /* CLASS, PROPS */
        , ["onClick"]);
      }), 128
      /* KEYED_FRAGMENT */
      ))];
    }),
    _: 1
    /* STABLE */

  }, 8
  /* PROPS */
  , ["loading", "finished", "onUpdate:loading"])) : (openBlock(), createBlock("div", _hoisted_5$1, [createCommentVNode(" <slot name=\"listviewEmpty\">\r\n    </slot> "), _hoisted_6$1]));
}

script$1.render = render$1;
script$1.__file = "packages/lookup-panel/src/components/list.vue";

var script$2 = defineComponent({
  name: 'lookup-footer',
  props: {
    leftText: {
      type: String,
      "default": ''
    },
    rightText: {
      type: String,
      "default": ''
    }
  },
  setup: function setup() {
    var _useSelect = useSelect(),
        selected = _useSelect.selected;

    var selectedTexts = computed(function () {
      return selected.value.texts;
    });
    var selectedLength = computed(function () {
      return selectedTexts.value.length;
    });
    return {
      selectedLength: selectedLength,
      selectedTexts: selectedTexts
    };
  }
});

var _hoisted_1$2 = {
  "class": "fm-lookup-panel-footer"
};
function render$2(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_fm_button = resolveComponent("fm-button");

  return openBlock(), createBlock("div", _hoisted_1$2, [createVNode("div", null, [renderSlot(_ctx.$slots, "left", {}, function () {
    return [_ctx.leftText ? (openBlock(), createBlock("span", {
      key: 0,
      style: {
        "font-size": "16px",
        "color": "#3A90FF"
      },
      onClick: _cache[1] || (_cache[1] = function ($event) {
        return _ctx.$emit('left-click');
      })
    }, toDisplayString(_ctx.leftText), 1
    /* TEXT */
    )) : createCommentVNode("v-if", true)];
  })]), createVNode(_component_fm_button, {
    round: "",
    size: "small",
    onClick: _cache[2] || (_cache[2] = function ($event) {
      return _ctx.$emit('right-click');
    })
  }, {
    "default": withCtx(function () {
      return [createTextVNode(toDisplayString(_ctx.rightText), 1
      /* TEXT */
      )];
    }),
    _: 1
    /* STABLE */

  })]);
}

script$2.render = render$2;
script$2.__file = "packages/lookup-panel/src/components/footer.vue";

var _components$2;
var script$3 = defineComponent({
  name: 'lookup-selected-panel',
  components: (_components$2 = {}, _components$2[Navbar.name] = Navbar, _components$2[Navbar.name] = Navbar, _components$2[script$1.name] = script$1, _components$2),
  props: {
    show: {
      type: Boolean,
      "default": false
    },
    dataList: {
      type: Array,
      "default": function _default() {
        return [];
      }
    }
  },
  setup: function setup() {
    var _useRootProps = useRootProps('lookup-panel'),
        rootProps = _useRootProps.rootProps;

    var _useSelect = useSelect(),
        selected = _useSelect.selected,
        toggleSelecte = _useSelect.toggleSelecte;

    var onClear = function onClear(item) {
      toggleSelecte(item);
    };

    return {
      rootProps: rootProps,
      onClear: onClear,
      getValue: getValue,
      selected: selected
    };
  }
});

var _hoisted_1$3 = {
  "class": "selected-panel"
};
var _hoisted_2$2 = {
  "class": "list-wrapper"
};
function render$3(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_fm_navbar = resolveComponent("fm-navbar");

  var _component_fm_icon = resolveComponent("fm-icon");

  var _component_fm_cell = resolveComponent("fm-cell");

  var _component_lookup_list = resolveComponent("lookup-list");

  var _component_fm_popup = resolveComponent("fm-popup");

  return openBlock(), createBlock("div", _hoisted_1$3, [createVNode(_component_fm_popup, {
    "class": "popup-wrapper",
    show: _ctx.show,
    position: "right",
    zIndex: 100,
    overlay: false
  }, {
    "default": withCtx(function () {
      return [createVNode(_component_fm_navbar, {
        "class": "nav-bar",
        title: "已选择",
        "left-arrow": "",
        onClickLeft: _cache[1] || (_cache[1] = function ($event) {
          return _ctx.$emit('update:show', false);
        })
      }), createVNode("div", _hoisted_2$2, [createVNode(_component_lookup_list, {
        dataList: _ctx.selected.items
      }, {
        "default": withCtx(function (slotProps) {
          return [createVNode(_component_fm_cell, {
            title: _ctx.getValue(_ctx.rootProps.textField, slotProps.item),
            label: _ctx.getValue(_ctx.rootProps.fullPath, slotProps.item)
          }, {
            "right-icon": withCtx(function () {
              return [createVNode(_component_fm_icon, {
                name: "s-clear-o",
                style: {
                  "font-size": "20px",
                  "color": "#c6c6c6"
                },
                onClick: function onClick($event) {
                  return _ctx.onClear(slotProps.item);
                }
              }, null, 8
              /* PROPS */
              , ["onClick"])];
            }),
            _: 2
            /* DYNAMIC */

          }, 1032
          /* PROPS, DYNAMIC_SLOTS */
          , ["title", "label"])];
        }),
        _: 1
        /* STABLE */

      }, 8
      /* PROPS */
      , ["dataList"])])];
    }),
    _: 1
    /* STABLE */

  }, 8
  /* PROPS */
  , ["show"])]);
}

script$3.render = render$3;
script$3.__file = "packages/lookup-panel/src/components/selected-panel.vue";

var _components$3;
var script$4 = defineComponent({
  name: 'lookup-search-panel',
  components: (_components$3 = {}, _components$3[script$1.name] = script$1, _components$3),
  props: {
    finished: {
      type: Boolean,
      "default": false
    },
    loading: {
      type: Boolean,
      "default": false
    },
    dataList: {
      type: Array,
      "default": function _default() {
        return [];
      }
    }
  },
  setup: function setup(props, _ref) {
    var emit = _ref.emit;

    var _useRootProps = useRootProps('lookup-panel'),
        rootProps = _useRootProps.rootProps;

    var showTitle = computed(function () {
      return toUpperCase(rootProps.type) === DisplayType.NAVTREELIST && props.dataList && props.dataList.length > 0;
    });
    var innerLoading = ref(props.loading);
    watch(function () {
      return props.loading;
    }, function (newValue) {
      innerLoading.value = newValue;
    });

    var onUpdateLoading = function onUpdateLoading(value) {
      emit('update:loading', value);
    };

    var onCellClick = function onCellClick(item) {
      emit('cell-click', item);
    };

    return {
      rootProps: rootProps,
      showTitle: showTitle,
      getValue: getValue,
      innerLoading: innerLoading,
      onUpdateLoading: onUpdateLoading,
      onCellClick: onCellClick
    };
  }
});

var _hoisted_1$4 = {
  "class": "search-panel"
};
function render$4(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_fm_cell = resolveComponent("fm-cell");

  var _component_lookup_list = resolveComponent("lookup-list");

  return openBlock(), createBlock("div", _hoisted_1$4, [_ctx.showTitle ? (openBlock(), createBlock(_component_fm_cell, {
    key: 0,
    title: _ctx.rootProps.title
  }, null, 8
  /* PROPS */
  , ["title"])) : createCommentVNode("v-if", true), createVNode("div", {
    "class": "list-wrapper",
    style: {
      top: _ctx.showTitle ? '44px' : 0
    }
  }, [createVNode(_component_lookup_list, {
    dataList: _ctx.dataList,
    finished: _ctx.finished,
    loading: _ctx.innerLoading,
    "onUpdate:loading": _ctx.onUpdateLoading,
    onCellClick: _ctx.onCellClick,
    onLoad: _cache[1] || (_cache[1] = function ($event) {
      return _ctx.$emit('load');
    })
  }, {
    "default": withCtx(function (slotProps) {
      return [createVNode(_component_fm_cell, {
        title: _ctx.getValue(_ctx.rootProps.textField, slotProps['item']),
        label: _ctx.getValue(_ctx.rootProps.fullPath, slotProps['item'])
      }, null, 8
      /* PROPS */
      , ["title", "label"])];
    }),
    _: 1
    /* STABLE */

  }, 8
  /* PROPS */
  , ["dataList", "finished", "loading", "onUpdate:loading", "onCellClick"])], 4
  /* STYLE */
  )]);
}

script$4.render = render$4;
script$4.__file = "packages/lookup-panel/src/components/search-panel.vue";

var script$5 = defineComponent({
  name: 'lookup-breadcrumb',
  props: {
    items: {
      type: Array,
      "default": function _default() {
        return [];
      }
    }
  },
  setup: function setup(props, _ref) {
    var emit = _ref.emit;
    var bem = useBem('fm-lookup');

    var onClick = function onClick(event) {
      if (isLast(event.value)) {
        return;
      }

      emit('item-click', event);
    };

    var isLast = function isLast(value) {
      return props.items[props.items.length - 1].value === value;
    };

    return {
      bem: bem,
      onClick: onClick,
      isLast: isLast
    };
  }
});

function render$5(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_fm_icon = resolveComponent("fm-icon");

  return openBlock(), createBlock("div", {
    "class": _ctx.bem('breadcrumb')
  }, [(openBlock(true), createBlock(Fragment, null, renderList(_ctx.items, function (item) {
    return openBlock(), createBlock("div", {
      "class": _ctx.bem('breadcrumb-item'),
      key: item.value,
      onClick: function onClick($event) {
        return _ctx.onClick(item);
      }
    }, [createVNode("span", {
      "class": _ctx.bem('breadcrumb-item-text')
    }, toDisplayString(item.text), 3
    /* TEXT, CLASS */
    ), !_ctx.isLast(item.value) ? (openBlock(), createBlock(_component_fm_icon, {
      key: 0,
      name: "s-arrow",
      "class": _ctx.bem('breadcrumb-item-icon')
    }, null, 8
    /* PROPS */
    , ["class"])) : createCommentVNode("v-if", true)], 10
    /* CLASS, PROPS */
    , ["onClick"]);
  }), 128
  /* KEYED_FRAGMENT */
  ))], 2
  /* CLASS */
  );
}

script$5.render = render$5;
script$5.__file = "packages/lookup-panel/src/components/breadcrumb.vue";

var _components$4;
var script$6 = defineComponent({
  name: 'lookup-personal-panel',
  components: (_components$4 = {}, _components$4[script$1.name] = script$1, _components$4),
  props: {
    currentPage: {
      type: String,
      "default": ''
    }
  },
  setup: function setup(props) {
    var _useRootProps = useRootProps('lookup-panel'),
        rootProps = _useRootProps.rootProps;

    var _usePresonal = usePresonal(),
        recentData = _usePresonal.recentData,
        favoriteData = _usePresonal.favoriteData,
        setFavoriteData = _usePresonal.setFavoriteData,
        isFavorited = _usePresonal.isFavorited; // const dataList:Ref<any[]> = ref([])
    // watch(()=>props.currentPage, ()=>{
    //   dataList.value = props.currentPage === 'recent' ? recentData.value : favoriteData.value
    // })


    var dataList = computed(function () {
      return props.currentPage === 'recent' ? recentData.value : favoriteData.value;
    });

    var onIconClick = function onIconClick(item) {
      setFavoriteData(item);
    };

    return {
      getValue: getValue,
      dataList: dataList,
      rootProps: rootProps,
      isFavorited: isFavorited,
      onIconClick: onIconClick
    };
  }
});

var _hoisted_1$5 = {
  "class": "list-wrapper"
};
function render$6(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_fm_icon = resolveComponent("fm-icon");

  var _component_fm_cell = resolveComponent("fm-cell");

  var _component_lookup_list = resolveComponent("lookup-list");

  return openBlock(), createBlock("div", _hoisted_1$5, [createVNode(_component_lookup_list, {
    dataList: _ctx.dataList,
    onCellClick: _cache[1] || (_cache[1] = function (item) {
      return _ctx.$emit('cell-click', item);
    })
  }, {
    "default": withCtx(function (slotProps) {
      return [createVNode(_component_fm_cell, {
        "class": "list-item-cell",
        title: _ctx.getValue(_ctx.rootProps.textField, slotProps['item']),
        label: _ctx.getValue(_ctx.rootProps.fullPath, slotProps['item'])
      }, createSlots({
        _: 2
        /* DYNAMIC */

      }, [_ctx.rootProps.useFavorite ? {
        name: "right-icon",
        fn: withCtx(function () {
          return [createVNode("div", {
            onClick: withModifiers(function ($event) {
              return _ctx.onIconClick(slotProps['item']);
            }, ["stop"])
          }, [createVNode(_component_fm_icon, {
            style: {
              "color": "#FBB902"
            },
            name: _ctx.isFavorited(slotProps['item']) ? 's-star' : 's-star-o'
          }, null, 8
          /* PROPS */
          , ["name"])], 8
          /* PROPS */
          , ["onClick"])];
        })
      } : undefined]), 1032
      /* PROPS, DYNAMIC_SLOTS */
      , ["title", "label"])];
    }),
    _: 1
    /* STABLE */

  }, 8
  /* PROPS */
  , ["dataList"])]);
}

script$6.render = render$6;
script$6.__file = "packages/lookup-panel/src/components/personal-panel.vue";

var script$7 = defineComponent({
  name: 'lookup-tabbar',
  components: {},
  props: {
    modelValue: {
      type: String,
      "default": ''
    },
    items: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    currentPage: {
      type: String,
      "default": ''
    }
  },
  setup: function setup(props, _ref) {
    var emit = _ref.emit;

    var onItemClick = function onItemClick(id) {
      emit('update:currentPage', id);
    };

    return {
      onItemClick: onItemClick
    };
  }
});

var _hoisted_1$6 = {
  "class": "lookup-tabbar"
};
function render$7(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock("div", _hoisted_1$6, [(openBlock(true), createBlock(Fragment, null, renderList(_ctx.items, function (item) {
    return openBlock(), createBlock("span", {
      "class": ["tabbar-item", {
        selected: _ctx.currentPage === item.id
      }],
      onClick: function onClick($event) {
        return _ctx.onItemClick(item.id);
      }
    }, toDisplayString(item.text), 11
    /* TEXT, CLASS, PROPS */
    , ["onClick"]);
  }), 256
  /* UNKEYED_FRAGMENT */
  )), createCommentVNode(" <span class=\"nav-title selected\">我的收藏</span> ")]);
}

script$7.render = render$7;
script$7.__file = "packages/lookup-panel/src/components/tabbar.vue";

var lookupListProps = {
  type: {
    type: String,
    "default": 'LIST'
  },
  idField: {
    type: String,
    "default": '',
    required: true
  },
  valueField: {
    type: String,
    "default": ''
  },
  textField: {
    type: String,
    "default": '',
    required: true
  },
  navTextField: {
    type: String,
    "default": ''
  },
  fullPath: {
    type: String,
    "default": ''
  },
  avatarField: {
    type: String,
    "default": ''
  },
  avatarPrefix: {
    type: String,
    "default": '/api/runtime/sys/v1.0/userinfos/setting/img/users/'
  },
  avatarSuffix: {
    type: String,
    "default": '/96/96/36'
  },
  multiSelect: {
    type: Boolean,
    "default": false
  },
  onlySelectLeaf: {
    type: Boolean,
    "default": false
  },
  useFavorite: {
    type: Boolean,
    "default": false
  },
  useAvatar: {
    type: Boolean,
    "default": false
  },
  customLeaf: Function,
  customSelectable: Function
};
var LookupProps = Object.assign(Object.assign({}, lookupListProps), {
  title: {
    type: String,
    "default": '帮助'
  },
  navTitle: {
    type: String,
    "default": ''
  },
  url: {
    type: String,
    "default": ''
  },
  selectedValues: {
    type: String,
    "default": ''
  },
  selectedTexts: {
    type: String,
    "default": ''
  },
  searchWhen: {
    type: String,
    "default": 'all'
  },
  loadTreeDataType: {
    type: String,
    "default": 'default'
  },
  enableFullTree: {
    type: Boolean,
    "default": true
  },
  pageSize: {
    type: Number,
    "default": 20
  },
  collapseLimit: {
    type: Number,
    "default": 3
  },
  selectedLimit: {
    type: Number,
    "default": -1
  },
  useSearch: {
    type: Boolean,
    "default": true
  },
  usePullDownLoad: {
    type: Boolean,
    "default": true
  },
  useServerTemplate: Boolean,
  usePersonal: Boolean,
  beforeGetData: Function,
  afterConfirm: Function,
  personalConfig: Object,
  mapFields: {
    type: Object,
    "default": function _default() {
      return {};
    }
  },
  data: {
    type: [Array, Object],
    "default": function _default() {
      return [];
    }
  }
});

var _components$5;
var script$8 = defineComponent({
  name: 'fm-lookup-panel',
  components: (_components$5 = {}, _components$5[Cell.name] = Cell, _components$5[Icon.name] = Icon, _components$5[Button.name] = Button, _components$5[script.name] = script, _components$5[script$1.name] = script$1, _components$5[script$2.name] = script$2, _components$5[script$3.name] = script$3, _components$5[script$4.name] = script$4, _components$5[script$6.name] = script$6, _components$5[script$5.name] = script$5, _components$5[script$7.name] = script$7, _components$5[dynamicTemplate.name] = dynamicTemplate, _components$5),
  props: LookupProps,
  setup: function setup(props, _ref) {
    var emit = _ref.emit;
    useRootProps('lookup-panel', props);

    var _useSelect = useSelect(props),
        innerSelected = _useSelect.selected,
        mapping = _useSelect.mapping,
        toggleSelecte = _useSelect.toggleSelecte,
        toggleSelecteAll = _useSelect.toggleSelecteAll,
        isSelectedAll = _useSelect.isSelectedAll,
        clearSelected = _useSelect.clearSelected;

    var _usePresonal = usePresonal(props),
        currentPage = _usePresonal.currentPage,
        initPersonal = _usePresonal.initPersonal,
        setRecentData = _usePresonal.setRecentData;

    var _useLoadData = useLoadData(props),
        serverTemplate = _useLoadData.serverTemplate,
        dataList = _useLoadData.dataList,
        parentData = _useLoadData.parentData,
        searchDataList = _useLoadData.searchDataList,
        loadState = _useLoadData.loadState,
        onSearch = _useLoadData.onSearch,
        onPullLoad = _useLoadData.onPullLoad,
        initLoad = _useLoadData.initLoad,
        resetData = _useLoadData.resetData,
        loadTreeData = _useLoadData.loadTreeData;

    watch(function () {
      return serverTemplate.value;
    }, function (template) {
      return template && useDynamicTemplate(template);
    });
    var lastParentData = computed(function () {
      return loadState.displayType !== DisplayType.NAVTREELIST ? parentData.value && parentData.value[parentData.value.length - 1] : null;
    });
    var subTitle = computed(function () {
      return lastParentData ? lastParentData[props.textField] : '';
    });
    var selectedPanelShow = ref(false);

    var init = function init() {
      props.usePersonal && initPersonal();
      initLoad();
    };

    var getTreeData = function getTreeData(item) {
      loadState.loadDataFrom = 'init';
      loadState.currentItem = item;
      loadTreeData(item);
    }; // const setSelected = (item: Record<string, any>) => {
    //   return new Promise<Selected>((resolve) => {
    //     console.log('setSelected');
    //     if (item.__isNav) {
    //       getNvaTreeData(item, false).then(({ dataList }) => {
    //         console.log(dataList)
    //         toggleSelecteAll(dataList)
    //         resolve(innerSelected.value)
    //       })
    //     } else {
    //       toggleSelecte(item)
    //       resolve(innerSelected.value)
    //     }
    //   })
    // }


    var onSelect = function onSelect(item) {
      // setSelected(item).then((selected) => {
      // })
      toggleSelecte(item);
      emit('selectChange', innerSelected.value);

      if (!props.multiSelect) {
        onConfirm(innerSelected.value);
      }
    };

    var onConfirm = function onConfirm(selected) {
      var _ref2 = selected ? selected : innerSelected.value,
          value = _ref2.value,
          text = _ref2.text,
          items = _ref2.items;

      mapping(items);
      emit('update:selectedValues', value);
      emit('update:modelValue', text);
      emit('valueChange', {
        value: value,
        text: text,
        items: items
      });
      emit('confirm', text);
      onBack();
      props.usePersonal && setRecentData(items);
    };

    var breadcrumbItems = computed(function () {
      var items = parentData.value.map(function (item) {
        return {
          text: getValue(props.navTextField, item),
          value: getValue(props.idField, item),
          item: item
        };
      });
      return [{
        text: props.navTitle,
        value: '',
        item: {}
      }].concat(items);
    });
    var breadcrumbShow = computed(function () {
      return loadState.displayType === 'NAVTREELIST';
    });

    var onBreadcrumbClick = function onBreadcrumbClick(_ref3) {
      var item = _ref3.item;
      // const id = item.value
      loadState.loadDataFrom = 'init';
      loadState.currentItem = item;
      loadTreeData(item);
    };

    var onHeaderLeftClick = function onHeaderLeftClick() {
      if (lastParentData.value) {
        var __parent = parentData.value[parentData.value.length - 2];
        loadTreeData(__parent);
      } else {
        onBack();
      }
    };

    var tabsData = computed(function () {
      var tmp = [];

      if (props.usePersonal && loadState.displayType === DisplayType.NAVTREELIST) {
        tmp.push({
          text: '最近联系人',
          id: 'recent'
        });
      } else if (props.type !== DisplayType.NAVTREELIST) {
        tmp.push({
          text: props.title,
          id: 'list'
        });
      }

      if (props.usePersonal && props.useFavorite) {
        tmp.push({
          text: '我的收藏',
          id: 'fav'
        });
      }

      return tmp;
    });
    var tabbarShow = computed(function () {
      // return true
      return props.usePersonal ? loadState.displayType === DisplayType.NAVTREELIST ? loadState.isShowHome : props.useFavorite : false;
    });

    var onPortalClick = function onPortalClick() {
      loadState.isShowHome = false;
      currentPage.value = 'list';
    };

    var searchListShow = ref(false);
    var headerRef = ref();
    var searchValue = ref('');

    var onSearchCellClick = function onSearchCellClick(item) {
      var _headerRef$value;

      // searchValue.value = ''
      // onSearch('')
      onSelect(item);
      (_headerRef$value = headerRef.value) == null ? void 0 : _headerRef$value.focus();
    };

    var onFooterLeftClick = function onFooterLeftClick() {
      if (currentPanel.value === 'selected') {
        selectedPanelShow.value = false;
        clearSelected();
      }
    };

    var onFooterRightClick = function onFooterRightClick() {
      // if (currentPanel.value === 'search') {
      //   searchListShow.value = false
      //   searchValue.value = ''
      //   onSearch('')
      //   // clearHistorySelected()
      // } else {
      // }
      onConfirm();
    };

    var currentPanel = computed(function () {
      if (selectedPanelShow.value) {
        return 'selected';
      } else if (searchListShow.value) {
        return 'search';
      } else if (loadState.isShowHome) {
        return 'home';
      }

      return 'list';
    });
    var footerProps = computed(function () {
      var _innerSelected$value, _innerSelected$value$;

      var rightText = "\u786E\u8BA4(" + ((_innerSelected$value = innerSelected.value) != null && (_innerSelected$value$ = _innerSelected$value.items) != null && _innerSelected$value$.length ? innerSelected.value.items.length : 0) + ")";
      var leftText = '';
      var leftClick = onFooterLeftClick;
      var rightClick = onFooterRightClick;
      var showChecker = false;

      if (currentPanel.value === 'selected') {
        leftText = '清空选择';
      } else if (currentPanel.value === 'list') {
        showChecker = loadState.displayType === DisplayType.NAVTREELIST;
        leftText = showChecker ? checkAll.value ? '取消全选' : '全选' : '';
      }

      return {
        leftText: leftText,
        rightText: rightText,
        leftClick: leftClick,
        rightClick: rightClick,
        showChecker: showChecker
      };
    });

    var _checkAll = ref(false);

    var checkAll = computed({
      get: function get() {
        var listData = dataList.value.filter(function (item) {
          return !item.__isNav;
        });
        _checkAll.value = listData.length > 0 ? isSelectedAll(listData) : false;
        return _checkAll.value;
      },
      set: function set(value) {
        var listData = dataList.value.filter(function (item) {
          return !item.__isNav;
        });
        toggleSelecteAll(listData);
        _checkAll.value = value;
      }
    });

    var onBack = function onBack() {
      setTimeout(function () {
        searchValue.value = '';
        searchListShow.value = false;
        selectedPanelShow.value = false;
        resetData();
      }, 300);
      emit('back');
      loadState.finished = true;
    };

    return {
      serverTemplate: serverTemplate,
      dataList: dataList,
      parentData: parentData,
      lastParentData: lastParentData,
      searchDataList: searchDataList,
      subTitle: subTitle,
      breadcrumbItems: breadcrumbItems,
      innerSelected: innerSelected,
      searchValue: searchValue,
      loadState: loadState,
      selectedPanelShow: selectedPanelShow,
      searchListShow: searchListShow,
      breadcrumbShow: breadcrumbShow,
      tabbarShow: tabbarShow,
      headerRef: headerRef,
      footerProps: footerProps,
      checkAll: checkAll,
      tabsData: tabsData,
      currentPage: currentPage,
      onPortalClick: onPortalClick,
      onPullLoad: onPullLoad,
      init: init,
      onSelect: onSelect,
      onSearch: onSearch,
      onSearchCellClick: onSearchCellClick,
      onBack: onBack,
      toUpperCase: toUpperCase,
      getValue: getValue,
      getTreeData: getTreeData,
      onHeaderLeftClick: onHeaderLeftClick,
      onBreadcrumbClick: onBreadcrumbClick
    };
  }
});

var _hoisted_1$7 = {
  "class": "fm-lookup-panel"
};
var _hoisted_2$3 = {
  "class": "fm-lookup-panel-content"
};
var _hoisted_3$2 = {
  "class": "content-tabs"
};
var _hoisted_4$2 = {
  "class": "content-tab-data"
};
var _hoisted_5$2 = {
  key: 0,
  "class": "breadcrumb-wrapper"
};
var _hoisted_6$2 = {
  "class": "content-tab-personal"
};
function render$8(_ctx, _cache, $props, $setup, $data, $options) {
  var _this = this;

  var _component_lookup_header = resolveComponent("lookup-header");

  var _component_lookup_tabbar = resolveComponent("lookup-tabbar");

  var _component_lookup_breadcrumb = resolveComponent("lookup-breadcrumb");

  var _component_dynamic_template = resolveComponent("dynamic-template");

  var _component_lookup_list = resolveComponent("lookup-list");

  var _component_lookup_personal_panel = resolveComponent("lookup-personal-panel");

  var _component_lookup_search_panel = resolveComponent("lookup-search-panel");

  var _component_fm_checker = resolveComponent("fm-checker");

  var _component_lookup_footer = resolveComponent("lookup-footer");

  var _component_lookup_selected_panel = resolveComponent("lookup-selected-panel");

  return openBlock(), createBlock("div", _hoisted_1$7, [createVNode(_component_lookup_header, {
    ref: "headerRef",
    searchValue: _ctx.searchValue,
    "onUpdate:searchValue": _cache[1] || (_cache[1] = function ($event) {
      return _ctx.searchValue = $event;
    }),
    searchFocused: _ctx.searchListShow,
    "onUpdate:searchFocused": _cache[2] || (_cache[2] = function ($event) {
      return _ctx.searchListShow = $event;
    }),
    subTitle: _ctx.lastParentData ? _ctx.lastParentData[_ctx.textField] : '',
    isHome: _ctx.loadState.isShowHome,
    onSeclectedClick: _cache[3] || (_cache[3] = function ($event) {
      return _ctx.selectedPanelShow = true;
    }),
    onSearch: _ctx.onSearch,
    onBack: _ctx.onHeaderLeftClick,
    onPortalClick: _ctx.onPortalClick
  }, null, 8
  /* PROPS */
  , ["searchValue", "searchFocused", "subTitle", "isHome", "onSearch", "onBack", "onPortalClick"]), createVNode("div", _hoisted_2$3, [withDirectives(createVNode("div", _hoisted_3$2, [_ctx.tabbarShow ? (openBlock(), createBlock(_component_lookup_tabbar, {
    key: 0,
    items: _ctx.tabsData,
    currentPage: _ctx.currentPage,
    "onUpdate:currentPage": _cache[4] || (_cache[4] = function ($event) {
      return _ctx.currentPage = $event;
    })
  }, null, 8
  /* PROPS */
  , ["items", "currentPage"])) : createCommentVNode("v-if", true), withDirectives(createVNode("div", _hoisted_4$2, [_ctx.breadcrumbShow ? (openBlock(), createBlock("div", _hoisted_5$2, [createVNode(_component_lookup_breadcrumb, {
    items: _ctx.breadcrumbItems,
    onItemClick: _ctx.onBreadcrumbClick
  }, null, 8
  /* PROPS */
  , ["items", "onItemClick"])])) : createCommentVNode("v-if", true), createVNode("div", {
    "class": "list-wrapper",
    style: "top: " + (_ctx.breadcrumbShow ? '42px' : 0)
  }, [createVNode(_component_lookup_list, {
    loading: _ctx.loadState.loading,
    "onUpdate:loading": _cache[5] || (_cache[5] = function ($event) {
      return _ctx.loadState.loading = $event;
    }),
    dataList: _ctx.dataList,
    parentData: _ctx.lastParentData,
    finished: _ctx.loadState.finished,
    onCellClick: _ctx.onSelect,
    onIconClick: _ctx.getTreeData,
    onLoad: _ctx.onPullLoad
  }, {
    "default": withCtx(function (slotProps) {
      return [renderSlot(_ctx.$slots, "cell", {
        listData: _ctx.dataList,
        item: slotProps.item,
        idField: _ctx.idField,
        textField: _ctx.textField
      }, function () {
        return [_ctx.serverTemplate ? (openBlock(), createBlock(_component_dynamic_template, {
          key: 0,
          props: {
            item: slotProps.item,
            instance: _this
          }
        }, null, 8
        /* PROPS */
        , ["props"])) : createCommentVNode("v-if", true)];
      })];
    }),
    _: 1
    /* STABLE */

  }, 8
  /* PROPS */
  , ["loading", "dataList", "parentData", "finished", "onCellClick", "onIconClick", "onLoad"])], 4
  /* STYLE */
  )], 512
  /* NEED_PATCH */
  ), [[vShow, !_ctx.loadState.isShowHome && _ctx.currentPage === 'list']]), withDirectives(createVNode("div", _hoisted_6$2, [createVNode(_component_lookup_personal_panel, {
    currentPage: _ctx.currentPage,
    onCellClick: _ctx.onSelect
  }, null, 8
  /* PROPS */
  , ["currentPage", "onCellClick"])], 512
  /* NEED_PATCH */
  ), [[vShow, _ctx.loadState.isShowHome || _ctx.currentPage !== 'list']])], 512
  /* NEED_PATCH */
  ), [[vShow, !_ctx.searchListShow]]), withDirectives(createVNode(_component_lookup_search_panel, {
    loading: _ctx.loadState.searchLoading,
    dataList: _ctx.searchDataList,
    finished: _ctx.loadState.searchFinished,
    onCellClick: _ctx.onSearchCellClick,
    onLoad: _cache[6] || (_cache[6] = function ($event) {
      return _ctx.onSearch(_ctx.loadState.searchValue, true);
    })
  }, null, 8
  /* PROPS */
  , ["loading", "dataList", "finished", "onCellClick"]), [[vShow, _ctx.searchListShow]])]), _ctx.multiSelect ? (openBlock(), createBlock(_component_lookup_footer, {
    key: 0,
    leftText: _ctx.footerProps.leftText,
    rightText: _ctx.footerProps.rightText,
    onLeftClick: _ctx.footerProps.leftClick,
    onRightClick: _ctx.footerProps.rightClick
  }, createSlots({
    _: 2
    /* DYNAMIC */

  }, [_ctx.footerProps.showChecker ? {
    name: "left",
    fn: withCtx(function () {
      return [createVNode(_component_fm_checker, {
        label: _ctx.footerProps.leftText,
        disabled: _ctx.innerSelected.limited && !_ctx.checkAll,
        checked: _ctx.checkAll,
        "onUpdate:checked": _cache[7] || (_cache[7] = function ($event) {
          return _ctx.checkAll = $event;
        })
      }, null, 8
      /* PROPS */
      , ["label", "disabled", "checked"])];
    })
  } : undefined]), 1032
  /* PROPS, DYNAMIC_SLOTS */
  , ["leftText", "rightText", "onLeftClick", "onRightClick"])) : createCommentVNode("v-if", true), createVNode(_component_lookup_selected_panel, {
    show: _ctx.selectedPanelShow,
    "onUpdate:show": _cache[8] || (_cache[8] = function ($event) {
      return _ctx.selectedPanelShow = $event;
    }),
    dataList: _ctx.innerSelected.items
  }, null, 8
  /* PROPS */
  , ["show", "dataList"])]);
}

script$8.render = render$8;
script$8.__file = "packages/lookup-panel/src/lookup-panel.vue";

script$8.install = function (app) {
  app.component(script$8.name, script$8);
};

export default script$8;
export { LookupProps };
