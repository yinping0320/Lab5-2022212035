import { resolveComponent, openBlock, createBlock, createVNode, Fragment, renderList, toDisplayString, createCommentVNode, withDirectives, vModelText } from 'vue';

var script = {
  name: 'fm-tags',
  props: {
    modelValue: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    checkable: {
      type: Boolean,
      "default": false
    },
    addable: {
      type: Boolean,
      "default": false
    },
    className: {
      type: String
    }
  },
  data: function data() {
    return {
      addTagValue: '',
      placeholder: '请输入',
      addInput: false
    };
  },
  computed: {
    innerValue: function innerValue() {
      if (this.checkable && this.modelValue && this.modelValue.length) {
        this.modelValue.forEach(function (tag) {
          if (tag.hasOwnProperty('checkable')) return;
          tag.checkable = true;
        });
      }

      return this.modelValue;
    }
  },
  mounted: function mounted() {// this.$_tagInit();
  },
  methods: {
    //点击添加
    $_addHander: function $_addHander() {
      var _this = this;

      if (!this.addable) return;
      this.addInput = true;
      this.addTagValue = '';
      setTimeout(function () {
        _this.$refs.addInputText.focus();
      });
    },
    //删除tag
    $_closeHandler: function $_closeHandler(e, tag, index) {
      e.preventDefault();
      this.modelValue.splice(index, 1);
      this.$emit('closeTag', tag);
      this.$emit('tagChange', this.modelValue);
    },
    //添加标签失去焦点
    $_addInputBlur: function $_addInputBlur() {
      if (!this.addable || !this.addInput) return;

      if (this.addTagValue) {
        var tag = {
          text: this.addTagValue,
          closable: true
        };
        this.modelValue.push(tag);
        this.$emit('tagChange', this.modelValue);
      }

      this.addInput = false;
    },
    //点击tag
    $_clickHandler: function $_clickHandler(e, tag) {
      e.preventDefault();
      if (!this.checkable || !tag.checkable) return;

      if (tag.hasOwnProperty('checked')) {
        tag.checked = !tag.checked;
      } else {
        tag.checked = true;
      }

      this.$emit('tagCheckedChange', tag);
      this.$emit('checkedChange', this.modelValue);
      this.$forceUpdate();
    }
  }
};

const _hoisted_1 = { class: "fm-tags-item-container" };
const _hoisted_2 = { class: "tag-box" };
const _hoisted_3 = {
  key: 0,
  class: "tag-delete"
};
const _hoisted_4 = /*#__PURE__*/createVNode("span", { class: "fm-tag-add-text" }, "添加", -1 /* HOISTED */);
const _hoisted_5 = {
  key: 1,
  class: "fm-tag-input-box"
};

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_fm_icon = resolveComponent("fm-icon");

  return (openBlock(), createBlock("div", {
    class: ["fm-tags", [
  $props.className,
  $props.checkable?'fm-tags-checkable':''
  ]]
  }, [
    createVNode("ul", _hoisted_1, [
      (openBlock(true), createBlock(Fragment, null, renderList($options.innerValue, (tag, index) => {
        return (openBlock(), createBlock("li", {
          key: index,
          class: ["fm-tag-item", [
        tag.type?' fm-tag-item-' + tag.type:'',
        ($props.checkable && tag.checked) ? 'fm-tag-item-checked': '',
        ($props.checkable && tag.checkable) ? 'fm-tag-item-checkable' : '',
        ($props.checkable && !tag.checkable) ? 'fm-tag-item-checkdisabled': '',
        tag.color? 'fm-tag-item-has-color' : ''
      ]],
          style: {'background': tag.color},
          onClick: $event => ($options.$_clickHandler($event,tag))
        }, [
          createVNode("span", _hoisted_2, toDisplayString(tag.text), 1 /* TEXT */),
          (tag.closable)
            ? (openBlock(), createBlock("span", _hoisted_3, [
                createVNode(_component_fm_icon, {
                  name: "s-clear",
                  onClick: $event => ($options.$_closeHandler($event,tag,index))
                }, null, 8 /* PROPS */, ["onClick"])
              ]))
            : createCommentVNode("v-if", true)
        ], 14 /* CLASS, STYLE, PROPS */, ["onClick"]))
      }), 128 /* KEYED_FRAGMENT */)),
      ($props.addable && !$data.addInput)
        ? (openBlock(), createBlock("li", {
            key: 0,
            class: "fm-tag-item fm-tag-add-button",
            onClick: _cache[1] || (_cache[1] = $event => ($options.$_addHander()))
          }, [
            createVNode(_component_fm_icon, { name: "s-plus" }),
            _hoisted_4
          ]))
        : createCommentVNode("v-if", true),
      ($props.addable && $data.addInput)
        ? (openBlock(), createBlock("li", _hoisted_5, [
            withDirectives(createVNode("input", {
              type: "text",
              class: "fm-form-control",
              onBlur: _cache[2] || (_cache[2] = $event => ($options.$_addInputBlur($event))),
              ref: "addInputText",
              "onUpdate:modelValue": _cache[3] || (_cache[3] = $event => ($data.addTagValue = $event)),
              placeholder: $data.placeholder
            }, null, 40 /* PROPS, HYDRATE_EVENTS */, ["placeholder"]), [
              [vModelText, $data.addTagValue]
            ])
          ]))
        : createCommentVNode("v-if", true)
    ])
  ], 2 /* CLASS */))
}

script.render = render;
script.__file = "packages/tags/src/index.vue";

script.install = function (app) {
  app.component(script.name, script);
};

export default script;
export { script as Tags };
