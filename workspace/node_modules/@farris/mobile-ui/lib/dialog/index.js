import { defineComponent, ref, watch, createVNode, mergeProps, resolveComponent, isVNode } from 'vue';
import Popup from '../popup';
import FmButton from '../button';
import { preventDefault, inBrowser, isObject } from '../utils';
import { mountComponent, usePopupState } from '../hook';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
function __rest(s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}

var _components;

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}

var FMDialog = defineComponent({
  name: 'fm-dialog',
  components: (_components = {}, _components[FmButton.name] = FmButton, _components),
  props: {
    title: String,
    message: String,
    messageAlign: {
      type: String,
      "default": 'center'
    },
    show: Boolean,
    overlay: {
      type: Boolean,
      "default": true
    },
    lockScroll: {
      type: Boolean,
      "default": true
    },
    teleport: {
      type: String,
      "default": 'body'
    },
    buttonLayout: {
      type: String,
      "default": 'row'
    },
    btns: Array,
    className: {
      type: String
    },
    showClose: {
      type: Boolean,
      "default": false
    }
  },
  emits: ["update:show", "open", "close"],
  setup: function setup(props, _ref) {
    var attrs = _ref.attrs,
        slots = _ref.slots,
        emit = _ref.emit;
    var isOpen = ref(props.show);
    watch(function () {
      return props.show;
    }, function (show) {
      isOpen.value = show;

      if (show) {
        emit('open');
      } else {
        emit('close');
      }
    });

    var close = function close() {
      isOpen.value = false;
      emit('close');
      emit('update:show', false);
    };

    var renderHeader = function renderHeader() {
      return props.title ? createVNode("div", {
        "class": "fm-dialog-header"
      }, [slots.header ? slots.header() : props.title]) : '';
    };

    var renderContent = function renderContent() {
      var className = ['fm-dialog-content-message'];
      var style = {
        textAlign: props.messageAlign
      };

      if (props.title) {
        className.push('fm-dialog-content-message-has-title');
      }

      var contentClass = ['fm-dialog-content', props.className];
      return createVNode("div", {
        "class": contentClass
      }, [slots["default"] ? slots["default"]() : createVNode("div", {
        "class": className,
        "style": style
      }, [props.message])]);
    };

    var onButtonClick = function onButtonClick(event, button) {
      preventDefault(event, true);

      if (button.disabled || button.loading) {
        return;
      }

      if (typeof button.handler === 'function') {
        button.handler.call(null, button);
      } else {
        isOpen.value = false;
        emit('update:show', false);
      }
    };

    var renderFooter = function renderFooter() {
      var _a;

      var className = ['fm-dialog-footer'];

      if (props.buttonLayout === 'column') {
        className.push('fm-dialog-footer-is-column');
      }

      return createVNode("div", {
        "class": className
      }, [slots.footer ? slots.footer() : (_a = props.btns) === null || _a === void 0 ? void 0 : _a.map(function (button) {
        return createVNode(resolveComponent("fm-button"), {
          "type": button.type ? button.type : 'info',
          "plain": true,
          "block": true,
          "size": "large",
          "disabled": !!button.disabled,
          "onClick": function onClick(event) {
            onButtonClick(event, button);
          }
        }, {
          "default": function _default() {
            return [button.text];
          }
        });
      })]);
    };

    var renderClose = function renderClose() {
      var className = ['fm-dialog-close'];

      if (props.showClose) {
        return createVNode("div", {
          "class": className,
          "onClick": close
        }, [createVNode("span", {
          "class": "fm-icon fm-icon-s-cross"
        }, null)]);
      }
    };

    var renderDialog = function renderDialog() {
      var className = ['fm-dialog'];

      if (props.showClose) {
        className.push('fm-dialog-relative');
      }

      return createVNode("div", mergeProps({
        "class": className
      }, attrs), [renderHeader(), renderContent(), renderFooter(), renderClose()]);
    };

    return function () {
      var _slot;

      var overlay = props.overlay,
          lockScroll = props.lockScroll;
      return createVNode(Popup, {
        "show": isOpen.value,
        "overlay": overlay,
        "position": "center",
        "lockScroll": lockScroll,
        "style": "border-radius: 14px;"
      }, _isSlot(_slot = renderDialog()) ? _slot : {
        "default": function _default() {
          return [_slot];
        }
      });
    };
  }
});

var instance;

function defaultOptions() {
  return {
    title: '',
    message: '',
    messageAlign: 'center',
    overlay: true,
    lockScroll: true,
    teleport: 'body',
    buttonLayout: 'row',
    btns: [],
    showClose: false
  };
}

function parseOptions(message) {
  return isObject(message) ? message : {
    message: message
  };
}

var initInstance = function initInstance() {

  var _mountComponent = mountComponent({
    setup: function setup() {
      var _usePopupState = usePopupState(),
          state = _usePopupState.state,
          toggle = _usePopupState.toggle;

      return function () {
        return createVNode(FMDialog, Object.assign(Object.assign({}, state), {
          'onUpdate:show': toggle
        }), null);
      };
    }
  });

  instance = _mountComponent.instance;
};

function Dialog(options) {
  if (!inBrowser) {
    return;
  }

  if (!instance) {
    initInstance();
  }

  options = Object.assign(Object.assign({}, Dialog.currentOptions), parseOptions(options));
  instance.open(options);
  return instance;
}

Dialog.clear = function () {
  if (instance) {
    instance.toggle(false);
  }
};

Dialog.confirm = function (options) {
  var _options$cancelText = options.cancelText,
      cancelText = _options$cancelText === void 0 ? '取消' : _options$cancelText,
      _options$confirmText = options.confirmText,
      confirmText = _options$confirmText === void 0 ? '确定' : _options$confirmText,
      _options$onConfirm = options.onConfirm,
      onConfirm = _options$onConfirm === void 0 ? function () {} : _options$onConfirm,
      _options$onCancel = options.onCancel,
      onCancel = _options$onCancel === void 0 ? function () {} : _options$onCancel,
      others = __rest(options, ["cancelText", "confirmText", "onConfirm", "onCancel"]);

  var _options = Object.assign({
    btns: [{
      text: cancelText,
      type: 'default',
      handler: function handler() {
        onCancel();
        instance.close();
      }
    }, {
      text: confirmText,
      handler: function handler() {
        onConfirm();
        instance.close();
      }
    }]
  }, others);

  Dialog(_options);
};

Dialog.alert = function (options) {
  var _options$confirmText2 = options.confirmText,
      confirmText = _options$confirmText2 === void 0 ? '确定' : _options$confirmText2,
      _options$onConfirm2 = options.onConfirm,
      onConfirm = _options$onConfirm2 === void 0 ? function () {} : _options$onConfirm2,
      others = __rest(options, ["confirmText", "onConfirm"]);

  var _options = Object.assign({
    btns: [{
      text: confirmText,
      handler: function handler() {
        onConfirm();
        instance.close();
      }
    }]
  }, others);

  Dialog(_options);
};

Dialog.currentOptions = defaultOptions();

Dialog.setDefaultOptions = function (options) {
  Object.assign(Dialog.currentOptions, options);
};

Dialog.resetDefaultOptions = function () {
  Dialog.currentOptions = defaultOptions();
};

Dialog.install = function (app) {
  app.component(FMDialog.name, FMDialog);
  app.config.globalProperties.$dialog = Dialog;
};

Dialog.Component = FMDialog;

export default Dialog;
export { Dialog };
