import FmIcon from '../icon';
import { ref, watch, onMounted, unref, computed, resolveComponent, openBlock, createBlock, renderSlot, createVNode, createSlots, withCtx, createCommentVNode, Fragment, renderList, toDisplayString } from 'vue';
import { isFunction } from '../utils';

var _components;
var script = {
  name: 'fm-card',
  components: (_components = {}, _components[FmIcon.name] = FmIcon, _components),
  props: {
    title: {
      type: String,
      "default": ''
    },
    icon: {
      type: String,
      "default": 's-list'
    },
    collapse: {
      type: Boolean,
      "default": false
    },
    collapsible: {
      type: Boolean,
      "default": true
    },
    actions: {
      type: Array,
      "default": function _default() {
        return [];
      }
    }
  },
  setup: function setup(props, _ref) {
    var slots = _ref.slots;
    var contentStyle = ref({});
    var contentRef = ref();
    var show = ref(!props.collapse);
    watch(function () {
      return props.collapse;
    }, function (value) {
      toggleShow(!value);
    });

    var setContentStyle = function setContentStyle(animatable) {
      if (animatable === void 0) {
        animatable = true;
      }

      var contentEl = unref(contentRef);
      var contentHeight = '';

      if (contentEl) {
        contentHeight = contentEl.getBoundingClientRect().height + 'px';
      }

      contentStyle.value = {
        height: contentHeight
      };

      if (animatable) {
        setTimeout(function () {
          contentStyle.value = show.value ? {} : {
            height: 0
          };
        }, show.value ? 300 : 0);
      } else {
        contentStyle.value = show.value ? {} : {
          height: 0
        };
      }
    };

    onMounted(function () {
      setContentStyle(false);
    });

    var toggleShow = function toggleShow(value) {
      var contentEl = unref(contentRef);

      if (!props.collapsible || !contentEl) {
        return;
      }

      show.value = value;
      setContentStyle();
    };

    var isFn = function isFn(cb) {
      return isFunction(cb) ? cb : function () {};
    };

    var showHeader = computed(function () {
      return slots.header || props.title;
    });
    var showFooter = computed(function () {
      var _props$actions;

      return slots.footer || ((_props$actions = props.actions) == null ? void 0 : _props$actions.length) > 0;
    });
    return {
      contentRef: contentRef,
      show: show,
      contentStyle: contentStyle,
      toggleShow: toggleShow,
      isFn: isFn,
      showHeader: showHeader,
      showFooter: showFooter
    };
  }
};

var _hoisted_1 = {
  "class": "fm-card"
};
var _hoisted_2 = {
  key: 0,
  "class": "fm-card-header"
};
var _hoisted_3 = {
  "class": "fm-card-content",
  ref: "contentRef"
};
var _hoisted_4 = {
  key: 1,
  "class": "fm-card-footer"
};
var _hoisted_5 = {
  "class": "fm-card-footer-btn-text"
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_fm_icon = resolveComponent("fm-icon");

  var _component_fm_cell = resolveComponent("fm-cell");

  var _component_fm_button = resolveComponent("fm-button");

  return openBlock(), createBlock("div", _hoisted_1, [$setup.showHeader ? (openBlock(), createBlock("div", _hoisted_2, [renderSlot(_ctx.$slots, "header", {
    title: $props.title,
    icon: $props.icon,
    toggle: $setup.toggleShow
  }, function () {
    return [createVNode(_component_fm_cell, {
      title: $props.title,
      "class": "fm-card-header-cell",
      onClick: _cache[1] || (_cache[1] = function ($event) {
        return $setup.toggleShow(!$setup.show);
      })
    }, createSlots({
      _: 2
      /* DYNAMIC */

    }, [$props.icon ? {
      name: "left-icon",
      fn: withCtx(function () {
        return [createVNode(_component_fm_icon, {
          name: $props.icon,
          "class": "fm-card-header-left-icon"
        }, null, 8
        /* PROPS */
        , ["name"])];
      })
    } : undefined, $props.collapsible ? {
      name: "right-icon",
      fn: withCtx(function () {
        return [createVNode(_component_fm_icon, {
          name: "s-arrow-down",
          style: {
            transform: $setup.show ? 'rotate(0turn)' : 'rotate(0.5turn)'
          },
          "class": "fm-card-header-right-icon"
        }, null, 8
        /* PROPS */
        , ["style"])];
      })
    } : undefined]), 1032
    /* PROPS, DYNAMIC_SLOTS */
    , ["title"])];
  })])) : createCommentVNode("v-if", true), createVNode("div", {
    "class": "fm-card-content-wrapper",
    style: $setup.contentStyle
  }, [createVNode("div", _hoisted_3, [renderSlot(_ctx.$slots, "default")], 512
  /* NEED_PATCH */
  )], 4
  /* STYLE */
  ), $setup.showFooter ? (openBlock(), createBlock("div", _hoisted_4, [renderSlot(_ctx.$slots, "footer", {}, function () {
    return [(openBlock(true), createBlock(Fragment, null, renderList($props.actions, function (action) {
      return openBlock(), createBlock(_component_fm_button, {
        type: "action.type",
        block: "",
        plain: "",
        noBorder: "",
        className: "fm-card-footer-btn",
        key: action.id,
        onClick: function onClick($event) {
          return $setup.isFn(action.click)($event);
        }
      }, {
        "default": withCtx(function () {
          return [createVNode(_component_fm_icon, {
            "class": "fm-card-footer-btn-icon",
            name: action.icon
          }, null, 8
          /* PROPS */
          , ["name"]), createVNode("span", _hoisted_5, toDisplayString(action.text), 1
          /* TEXT */
          )];
        }),
        _: 2
        /* DYNAMIC */

      }, 1032
      /* PROPS, DYNAMIC_SLOTS */
      , ["onClick"]);
    }), 128
    /* KEYED_FRAGMENT */
    ))];
  })])) : createCommentVNode("v-if", true)]);
}

script.render = render;
script.__file = "packages/card/src/card.vue";

script.install = function (app) {
  app.component(script.name, script);
};

export default script;
export { script as Card };
