import Button from '../button';
import Icon from '../icon';
import Popover from '../popover';
import { resolveComponent, openBlock, createBlock, renderSlot, createVNode, Fragment, renderList, toDisplayString, withCtx, createCommentVNode } from 'vue';

var _components;
var script = {
  name: 'fm-action-bar',
  components: (_components = {}, _components[Button.name] = Button, _components[Icon.name] = Icon, _components[Popover.name] = Popover, _components),
  props: {
    btns: {
      type: Array
    }
  },
  data: function data() {
    return {
      offset: {
        top: -6,
        left: -8
      },
      showPopover: false,
      innerBtns: []
    };
  },
  mounted: function mounted() {},
  watch: {
    btns: {
      handler: function handler(val) {
        if (val && val.length) {
          this.innerBtns = val.filter(function (btn) {
            return !btn.hasOwnProperty('visible') || btn.hasOwnProperty('visible') && btn['visible'];
          });
        }
      },
      immediate: true
    }
  },
  computed: {
    showBtns: function showBtns() {
      if (this.innerBtns && this.innerBtns.length <= 4) {
        return this.innerBtns;
      } else if (this.innerBtns && this.innerBtns.length > 4) {
        return this.innerBtns.slice(0, 3);
      } else {
        return [];
      }
    },
    extendBtns: function extendBtns() {
      if (this.innerBtns && this.innerBtns.length > 4) {
        return this.innerBtns.slice(3);
      } else {
        return [];
      }
    }
  },
  methods: {
    $_itemHandler: function $_itemHandler(btn) {
      if (btn.disabled) return;

      if (typeof btn.handler === 'function') {
        btn.handler();
      }
    },
    $_btnOnClick: function $_btnOnClick(btn) {
      if (btn.disabled) return;

      if (typeof btn.handler === 'function') {
        btn.handler();
      }
    }
  }
};

const _hoisted_1 = { class: "fm-action-bar" };
const _hoisted_2 = { class: "fm-action-bar-btns" };
const _hoisted_3 = { class: "btn-item-icon" };
const _hoisted_4 = { class: "btn-item-text" };
const _hoisted_5 = { class: "btn-item-icon" };
const _hoisted_6 = /*#__PURE__*/createVNode("span", { class: "btn-item-text" }, " 更多 ", -1 /* HOISTED */);
const _hoisted_7 = { class: "fm-action-bar-popover" };
const _hoisted_8 = { class: "fm-popover-item-icon" };
const _hoisted_9 = { class: "fm-popover-item-content" };

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_fm_icon = resolveComponent("fm-icon");
  const _component_fm_popover = resolveComponent("fm-popover");

  return (openBlock(), createBlock("div", _hoisted_1, [
    renderSlot(_ctx.$slots, "default", {}, () => [
      createVNode("ul", _hoisted_2, [
        (openBlock(true), createBlock(Fragment, null, renderList($options.showBtns, (btn, index) => {
          return (openBlock(), createBlock("li", {
            class: ["fm-action-bar-btn-item", [
            btn.color ? 'fm-action-bar-btn-item-has-color' : '',
            btn.type ? 'fm-action-bar-btn-item-'+ btn.type: '',
            btn.disabled ? 'fm-action-bar-btn-item-disabled' : ''
          ]],
            style: {'background': btn.color},
            key: index,
            onClick: $event => ($options.$_btnOnClick(btn))
          }, [
            renderSlot(_ctx.$slots, "btn", {
              btn: btn,
              btns: $props.btns,
              showbtns: $options.showBtns,
              index: "index"
            }, () => [
              createVNode("span", _hoisted_3, [
                createVNode(_component_fm_icon, {
                  name: btn.icon
                }, null, 8 /* PROPS */, ["name"])
              ]),
              createVNode("span", _hoisted_4, toDisplayString(btn.text), 1 /* TEXT */)
            ])
          ], 14 /* CLASS, STYLE, PROPS */, ["onClick"]))
        }), 128 /* KEYED_FRAGMENT */)),
        ($options.extendBtns.length)
          ? (openBlock(), createBlock(_component_fm_popover, {
              key: 0,
              ref: "popover",
              placement: "topRight",
              offset: $data.offset,
              className: "fm-action-bar-popover fm-action-bar-btn-item",
              hasArrow: true,
              hasMask: false
            }, {
              content: withCtx(() => [
                createVNode("div", _hoisted_7, [
                  (openBlock(true), createBlock(Fragment, null, renderList($options.extendBtns, (extendBtn, index) => {
                    return (openBlock(), createBlock("div", {
                      class: "fm-popover-item",
                      onClick: $event => ($options.$_itemHandler(extendBtn)),
                      key: index
                    }, [
                      renderSlot(_ctx.$slots, "extendBtn", {
                        btn: extendBtn,
                        index: index,
                        btns: $props.btns,
                        extendBtns: $options.extendBtns
                      }, () => [
                        createVNode("div", {
                          class: ["fm-popover-item-container", [
                        extendBtn.type ? 'fm-popover-item-container-'+ extendBtn.type: '',
                        extendBtn.disabled ? 'fm-popover-item-container-disabled' : ''
                        ]]
                        }, [
                          createVNode("div", _hoisted_8, [
                            createVNode(_component_fm_icon, {
                              name: extendBtn.icon
                            }, null, 8 /* PROPS */, ["name"])
                          ]),
                          createVNode("div", _hoisted_9, toDisplayString(extendBtn.text), 1 /* TEXT */)
                        ], 2 /* CLASS */)
                      ])
                    ], 8 /* PROPS */, ["onClick"]))
                  }), 128 /* KEYED_FRAGMENT */))
                ])
              ]),
              default: withCtx(() => [
                renderSlot(_ctx.$slots, "more", { btns: $props.btns }, () => [
                  createVNode("span", _hoisted_5, [
                    createVNode(_component_fm_icon, { name: "s-more-o" })
                  ]),
                  _hoisted_6
                ])
              ]),
              _: 3 /* FORWARDED */
            }, 8 /* PROPS */, ["offset"]))
          : createCommentVNode("v-if", true)
      ])
    ])
  ]))
}

script.render = render;
script.__file = "packages/action-bar/src/index.vue";

script.install = function (app) {
  app.component(script.name, script);
};

export default script;
export { script as ActionBar };
