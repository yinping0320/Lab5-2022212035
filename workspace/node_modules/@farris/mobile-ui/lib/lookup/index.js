import Input from '../input';
import Popup from '../popup';
import LookupPanel, { LookupProps } from '../lookup-panel';
import { defineComponent, ref, watch, computed, resolveComponent, openBlock, createBlock, renderSlot, createVNode, createSlots, withCtx } from 'vue';
import { useBack } from '../hook';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var _components;
var script = defineComponent({
  name: 'fm-lookup-input',
  components: (_components = {}, _components[Popup.name] = Popup, _components[Input.name] = Input, _components[LookupPanel.name] = LookupPanel, _components),
  props: _extends({}, LookupProps, {
    modelValue: String,
    name: String,
    label: String,
    placeholder: {
      type: String,
      "default": '点击选择'
    },
    required: {
      type: Boolean,
      "default": false
    },
    clearable: {
      type: Boolean,
      "default": false
    },
    readonly: {
      type: Boolean,
      "default": false
    },
    errorMessage: String,
    errorMessageAlign: String,
    position: {
      type: String,
      "default": 'right'
    },
    panelClass: String,
    inputAlign: {
      type: String,
      "default": 'right'
    },
    teleport: {
      type: String,
      "default": ''
    },
    zIndex: [Number, String]
  }),
  setup: function setup(props, _ref) {
    var emit = _ref.emit;
    var displayText = ref(props.modelValue);
    watch(function () {
      return props.modelValue;
    }, function (value, oldValue) {
      if (value !== oldValue) {
        displayText.value = value;
      }
    });
    var displayTexts = computed(function () {
      return displayText.value ? String(displayText.value).split(',') : [];
    });
    var displayValue = computed(function () {
      return props.selectedValues;
    });
    var selecteds = ref({});
    var lookupPanelRef = ref();
    var enableShow = ref(false);
    watch(enableShow, function (value) {
      value && lookupPanelRef.value && lookupPanelRef.value.init();
    });

    var _useBack = useBack(enableShow),
        pushOrPop = _useBack.pushOrPop;

    var onToggle = function onToggle() {
      if (props.readonly) {
        return;
      }

      enableShow.value = !enableShow.value;
      pushOrPop();
    };

    var onConfirm = function onConfirm(value) {
      displayText.value = value;
      emit('confirm', value);
      emit('update:modelValue', value);
    };

    var onSelectChange = function onSelectChange(value) {
      emit('selectChange', value);
    };

    var onValueChange = function onValueChange(value) {
      selecteds.value = value;
      emit('valueChange', value);
    };

    var onBack = function onBack() {
      onToggle();
      emit('back');
    };

    return {
      enableShow: enableShow,
      displayText: displayText,
      displayValue: displayValue,
      selecteds: selecteds,
      displayTexts: displayTexts,
      lookupPanelRef: lookupPanelRef,
      onToggle: onToggle,
      onConfirm: onConfirm,
      onSelectChange: onSelectChange,
      onValueChange: onValueChange,
      onBack: onBack,
      pushOrPop: pushOrPop
    };
  }
});

var _hoisted_1 = {
  "class": "fm-lookup-input"
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_fm_input = resolveComponent("fm-input");

  var _component_fm_lookup_panel = resolveComponent("fm-lookup-panel");

  var _component_fm_popup = resolveComponent("fm-popup");

  return openBlock(), createBlock("div", _hoisted_1, [renderSlot(_ctx.$slots, "template", {
    displayText: _ctx.displayText,
    click: _ctx.onToggle
  }, function () {
    return [createVNode(_component_fm_input, {
      modelValue: _ctx.displayText,
      "onUpdate:modelValue": _cache[1] || (_cache[1] = function ($event) {
        return _ctx.displayText = $event;
      }),
      editable: false,
      clickable: !_ctx.readonly,
      required: _ctx.required,
      readonly: _ctx.readonly,
      isLink: !_ctx.readonly,
      name: _ctx.name,
      label: _ctx.label,
      placeholder: _ctx.placeholder,
      clearable: _ctx.clearable,
      "input-align": _ctx.inputAlign,
      "error-message-align": _ctx.errorMessageAlign,
      "error-message": _ctx.errorMessage,
      onClick: _ctx.onToggle
    }, createSlots({
      _: 2
      /* DYNAMIC */

    }, [_ctx.$slots['left-icon'] ? {
      name: "left-icon",
      fn: withCtx(function () {
        return [renderSlot(_ctx.$slots, "left-icon")];
      })
    } : undefined, _ctx.$slots['right-icon'] && !_ctx.readonly ? {
      name: "right-icon",
      fn: withCtx(function () {
        return [renderSlot(_ctx.$slots, "right-icon")];
      })
    } : undefined, _ctx.$slots.extra ? {
      name: "extra",
      fn: withCtx(function () {
        return [renderSlot(_ctx.$slots, "extra")];
      })
    } : undefined, _ctx.$slots.input ? {
      name: "input",
      fn: withCtx(function () {
        return [renderSlot(_ctx.$slots, "input", {
          selecteds: _ctx.selecteds,
          displayTexts: _ctx.displayTexts
        })];
      })
    } : undefined]), 1032
    /* PROPS, DYNAMIC_SLOTS */
    , ["modelValue", "clickable", "required", "readonly", "isLink", "name", "label", "placeholder", "clearable", "input-align", "error-message-align", "error-message", "onClick"])];
  }), createVNode(_component_fm_popup, {
    show: _ctx.enableShow,
    "onUpdate:show": [_cache[2] || (_cache[2] = function ($event) {
      return _ctx.enableShow = $event;
    }), _ctx.pushOrPop],
    position: _ctx.position,
    "class": ["fm-lookup-popup-box", _ctx.panelClass],
    zIndex: _ctx.zIndex,
    teleport: _ctx.teleport
  }, {
    "default": withCtx(function () {
      return [createVNode(_component_fm_lookup_panel, {
        ref: "lookupPanelRef",
        type: _ctx.type,
        title: _ctx.title,
        navTitle: _ctx.navTitle,
        idField: _ctx.idField,
        valueField: _ctx.valueField,
        textField: _ctx.textField,
        navTextField: _ctx.navTextField,
        mapFields: _ctx.mapFields,
        data: _ctx.data,
        multiSelect: _ctx.multiSelect,
        useSearch: _ctx.useSearch,
        url: _ctx.url,
        beforeGetData: _ctx.beforeGetData,
        selectedValues: _ctx.displayValue,
        selectedTexts: _ctx.displayText,
        onlySelectLeaf: _ctx.onlySelectLeaf,
        usePullDownLoad: _ctx.usePullDownLoad,
        useServerTemplate: _ctx.useServerTemplate,
        loadTreeDataType: _ctx.loadTreeDataType,
        enableFullTree: _ctx.enableFullTree,
        pageSize: _ctx.pageSize,
        collapseLimit: _ctx.collapseLimit,
        customLeaf: _ctx.customLeaf,
        fullPath: _ctx.fullPath,
        avatarField: _ctx.avatarField,
        avatarPrefix: _ctx.avatarPrefix,
        avatarSuffix: _ctx.avatarSuffix,
        usePersonal: _ctx.usePersonal,
        useFavorite: _ctx.useFavorite,
        personalConfig: _ctx.personalConfig,
        selectedLimit: _ctx.selectedLimit,
        customSelectable: _ctx.customSelectable,
        onConfirm: _ctx.onConfirm,
        onBack: _ctx.onBack,
        onSelectChange: _ctx.onSelectChange,
        onValueChange: _ctx.onValueChange
      }, {
        cell: withCtx(function (slotProps) {
          return [renderSlot(_ctx.$slots, "cell", {
            slotProps: slotProps,
            listData: slotProps.listData,
            item: slotProps.item,
            idField: slotProps.idField,
            textField: slotProps.textField
          })];
        }),
        _: 1
        /* STABLE */

      }, 8
      /* PROPS */
      , ["type", "title", "navTitle", "idField", "valueField", "textField", "navTextField", "mapFields", "data", "multiSelect", "useSearch", "url", "beforeGetData", "selectedValues", "selectedTexts", "onlySelectLeaf", "usePullDownLoad", "useServerTemplate", "loadTreeDataType", "enableFullTree", "pageSize", "collapseLimit", "customLeaf", "fullPath", "avatarField", "avatarPrefix", "avatarSuffix", "usePersonal", "useFavorite", "personalConfig", "selectedLimit", "customSelectable", "onConfirm", "onBack", "onSelectChange", "onValueChange"])];
    }),
    _: 1
    /* STABLE */

  }, 8
  /* PROPS */
  , ["show", "position", "class", "zIndex", "teleport", "onUpdate:show"])]);
}

script.render = render;
script.__file = "packages/lookup/src/lookup-input.vue";

var _components$1;
var script$1 = defineComponent({
  name: 'fm-lookup-employee',
  components: (_components$1 = {}, _components$1[Popup.name] = Popup, _components$1[Input.name] = Input, _components$1[LookupPanel.name] = LookupPanel, _components$1),
  props: _extends({}, LookupProps, {
    modelValue: String,
    name: String,
    label: String,
    placeholder: {
      type: String,
      "default": '点击选择'
    },
    required: {
      type: Boolean,
      "default": false
    },
    clearable: {
      type: Boolean,
      "default": false
    },
    readonly: {
      type: Boolean,
      "default": false
    },
    errorMessage: String,
    errorMessageAlign: String,
    position: {
      type: String,
      "default": 'right'
    },
    panelClass: String,
    inputAlign: {
      type: String,
      "default": 'right'
    },
    teleport: {
      type: String,
      "default": ''
    },
    zIndex: [Number, String]
  }),
  setup: function setup(props, _ref) {
    var emit = _ref.emit;
    var displayText = ref(props.modelValue);
    watch(function () {
      return props.modelValue;
    }, function (value, oldValue) {
      if (value !== oldValue) {
        displayText.value = value;
      }
    });
    var displayTexts = computed(function () {
      return displayText.value ? String(displayText.value).split(',') : [];
    });
    var displayValue = computed(function () {
      return props.selectedValues;
    });
    var selecteds = ref({});
    var lookupPanelRef = ref();
    var enableShow = ref(false);
    watch(enableShow, function (value) {
      value && lookupPanelRef.value && lookupPanelRef.value.init();
    });

    var onToggle = function onToggle() {
      if (props.readonly) {
        return;
      }

      enableShow.value = !enableShow.value;
    };

    var onConfirm = function onConfirm(value) {
      displayText.value = value;
      enableShow.value = false;
      emit('confirm', value);
      emit('update:modelValue', value);
    };

    var onSelectChange = function onSelectChange(value) {
      emit('selectChange', value);
    };

    var onValueChange = function onValueChange(value) {
      selecteds.value = value;
      emit('valueChange', value);
    };

    var onBack = function onBack() {
      enableShow.value = false;
      emit('back');
    };

    return {
      enableShow: enableShow,
      displayText: displayText,
      displayValue: displayValue,
      selecteds: selecteds,
      displayTexts: displayTexts,
      lookupPanelRef: lookupPanelRef,
      onToggle: onToggle,
      onConfirm: onConfirm,
      onSelectChange: onSelectChange,
      onValueChange: onValueChange,
      onBack: onBack
    };
  }
});

var _hoisted_1$1 = {
  "class": "fm-lookup-input"
};
function render$1(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_fm_input = resolveComponent("fm-input");

  var _component_fm_lookup_panel = resolveComponent("fm-lookup-panel");

  var _component_fm_popup = resolveComponent("fm-popup");

  return openBlock(), createBlock("div", _hoisted_1$1, [renderSlot(_ctx.$slots, "template", {
    displayText: _ctx.displayText,
    click: _ctx.onToggle
  }, function () {
    return [createVNode(_component_fm_input, {
      modelValue: _ctx.displayText,
      "onUpdate:modelValue": _cache[1] || (_cache[1] = function ($event) {
        return _ctx.displayText = $event;
      }),
      editable: false,
      clickable: !_ctx.readonly,
      required: _ctx.required,
      readonly: _ctx.readonly,
      isLink: !_ctx.readonly,
      name: _ctx.name,
      label: _ctx.label,
      placeholder: _ctx.placeholder,
      clearable: _ctx.clearable,
      "input-align": _ctx.inputAlign,
      "error-message-align": _ctx.errorMessageAlign,
      "error-message": _ctx.errorMessage,
      onClick: _ctx.onToggle
    }, createSlots({
      _: 2
      /* DYNAMIC */

    }, [_ctx.$slots['left-icon'] ? {
      name: "left-icon",
      fn: withCtx(function () {
        return [renderSlot(_ctx.$slots, "left-icon")];
      })
    } : undefined, _ctx.$slots['right-icon'] && !_ctx.readonly ? {
      name: "right-icon",
      fn: withCtx(function () {
        return [renderSlot(_ctx.$slots, "right-icon")];
      })
    } : undefined, _ctx.$slots.extra ? {
      name: "extra",
      fn: withCtx(function () {
        return [renderSlot(_ctx.$slots, "extra")];
      })
    } : undefined, _ctx.$slots.input ? {
      name: "input",
      fn: withCtx(function () {
        return [renderSlot(_ctx.$slots, "input", {
          selecteds: _ctx.selecteds,
          displayTexts: _ctx.displayTexts
        })];
      })
    } : undefined]), 1032
    /* PROPS, DYNAMIC_SLOTS */
    , ["modelValue", "clickable", "required", "readonly", "isLink", "name", "label", "placeholder", "clearable", "input-align", "error-message-align", "error-message", "onClick"])];
  }), createVNode(_component_fm_popup, {
    show: _ctx.enableShow,
    "onUpdate:show": _cache[2] || (_cache[2] = function ($event) {
      return _ctx.enableShow = $event;
    }),
    position: _ctx.position,
    "class": ["fm-lookup-popup-box", _ctx.panelClass],
    zIndex: _ctx.zIndex,
    teleport: _ctx.teleport
  }, {
    "default": withCtx(function () {
      return [createVNode(_component_fm_lookup_panel, {
        ref: "lookupPanelRef",
        type: _ctx.type,
        title: _ctx.title,
        navTitle: _ctx.navTitle,
        idField: _ctx.idField,
        valueField: _ctx.valueField,
        textField: _ctx.textField,
        navTextField: _ctx.navTextField,
        mapFields: _ctx.mapFields,
        data: _ctx.data,
        multiSelect: _ctx.multiSelect,
        showSearch: _ctx.showSearch,
        showFavorite: _ctx.showFavorite,
        url: _ctx.url,
        beforeGetData: _ctx.beforeGetData,
        selectedValues: _ctx.displayValue,
        selectedTexts: _ctx.displayText,
        onlySelectLeaf: _ctx.onlySelectLeaf,
        enablePullDownLoad: _ctx.enablePullDownLoad,
        useServerTemplate: _ctx.useServerTemplate,
        loadTreeDataType: _ctx.loadTreeDataType,
        pageSize: _ctx.pageSize,
        collapseLimit: _ctx.collapseLimit,
        customLeaf: _ctx.customLeaf,
        fullPath: _ctx.fullPath,
        onConfirm: _ctx.onConfirm,
        onBack: _ctx.onBack,
        onSelectChange: _ctx.onSelectChange,
        onValueChange: _ctx.onValueChange
      }, {
        cell: withCtx(function (slotProps) {
          return [renderSlot(_ctx.$slots, "cell", {
            slotProps: slotProps,
            listData: slotProps.listData,
            item: slotProps.item,
            idField: slotProps.idField,
            textField: slotProps.textField
          })];
        }),
        _: 1
        /* STABLE */

      }, 8
      /* PROPS */
      , ["type", "title", "navTitle", "idField", "valueField", "textField", "navTextField", "mapFields", "data", "multiSelect", "showSearch", "showFavorite", "url", "beforeGetData", "selectedValues", "selectedTexts", "onlySelectLeaf", "enablePullDownLoad", "useServerTemplate", "loadTreeDataType", "pageSize", "collapseLimit", "customLeaf", "fullPath", "onConfirm", "onBack", "onSelectChange", "onValueChange"])];
    }),
    _: 1
    /* STABLE */

  }, 8
  /* PROPS */
  , ["show", "position", "class", "zIndex", "teleport"])]);
}

script$1.render = render$1;
script$1.__file = "packages/lookup/src/lookup-employee.vue";

script.install = function (app) {
  app.component(script.name, script);
};

script$1.install = function (app) {
  app.component(script$1.name, script$1);
};
var index = {
  name: 'LookupInstall',
  install: function install() {
    script.install();
  }
};

export default index;
export { script as LookupInput };
