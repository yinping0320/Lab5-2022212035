import Icon from '../icon';
import { isDef, addUnit } from '../utils';
import { resolveComponent, openBlock, createBlock, withDirectives, createVNode, vShow, renderSlot, createCommentVNode } from 'vue';

var _components;
var script = {
  name: 'fm-image',
  components: (_components = {}, _components[Icon.name] = Icon, _components),
  props: {
    src: {
      type: String
    },
    fit: {
      type: String
    },
    alt: {
      type: String
    },
    width: {
      type: [String, Number]
    },
    height: {
      type: [String, Number]
    },
    radius: {
      type: [String, Number],
      "default": 0
    },
    round: {
      type: Boolean,
      "default": false
    },
    showError: {
      type: Boolean,
      "default": true
    },
    errorIcon: {
      type: String,
      "default": 'addpicture'
    },
    loadingIcon: {
      type: String,
      "default": 's-my'
    }
  },
  data: function data() {
    return {
      isLoadError: false,
      isLoaded: false
    };
  },
  computed: {
    style: function style() {
      var style = {};

      if (isDef(this.width)) {
        style.width = addUnit(this.width);
      }

      if (isDef(this.height)) {
        style.height = addUnit(this.height);
      }

      if (isDef(this.radius) && !this.round) {
        style.overflow = 'hidden';
        style.borderRadius = addUnit(this.radius);
      }

      return style;
    },
    error: function error() {
      return this.src ? this.isLoadError ? true : false : true;
    }
  },
  methods: {
    onClick: function onClick(event) {
      this.$emit('click', event);
    },
    onLoad: function onLoad() {
      this.isLoaded = true;
    },
    onError: function onError() {
      this.isLoadError = true;
      this.isLoaded = true;
    }
  }
};

const _hoisted_1 = {
  key: 0,
  class: "fm-image-loading"
};
const _hoisted_2 = {
  key: 1,
  class: "fm-image-error"
};

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_fm_icon = resolveComponent("fm-icon");

  return (openBlock(), createBlock("div", {
    class: ["fm-image", {'fm-image-round':$props.round}],
    style: $options.style,
    onClick: _cache[3] || (_cache[3] = $event => ($options.onClick()))
  }, [
    withDirectives(createVNode("img", {
      src: $props.src,
      alt: $props.alt,
      style: {'object-fit':$props.fit},
      class: "fm-image-img",
      onError: _cache[1] || (_cache[1] = (...args) => ($options.onError && $options.onError(...args))),
      onLoad: _cache[2] || (_cache[2] = (...args) => ($options.onLoad && $options.onLoad(...args)))
    }, null, 44 /* STYLE, PROPS, HYDRATE_EVENTS */, ["src", "alt"]), [
      [vShow, $data.isLoaded]
    ]),
    (!$data.isLoaded)
      ? (openBlock(), createBlock("div", _hoisted_1, [
          renderSlot(_ctx.$slots, "loading", {}, () => [
            createVNode(_component_fm_icon, {
              name: $props.loadingIcon,
              class: "fm-image-icon"
            }, null, 8 /* PROPS */, ["name"])
          ])
        ]))
      : ($options.error && $props.showError)
        ? (openBlock(), createBlock("div", _hoisted_2, [
            renderSlot(_ctx.$slots, "error", {}, () => [
              createVNode(_component_fm_icon, {
                name: $props.errorIcon,
                class: "fm-image-icon"
              }, null, 8 /* PROPS */, ["name"])
            ])
          ]))
        : createCommentVNode("v-if", true)
  ], 6 /* CLASS, STYLE */))
}

script.render = render;
script.__file = "packages/image/src/index.vue";

script.install = function (app) {
  app.component(script.name, script);
};

export default script;
export { script as Image };
