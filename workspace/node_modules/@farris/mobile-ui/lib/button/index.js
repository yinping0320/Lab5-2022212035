import Icon from '../icon';
import { resolveComponent, openBlock, createBlock, createCommentVNode, renderSlot, toDisplayString, createVNode } from 'vue';

var _components;
var script = {
  name: 'fm-button',
  components: (_components = {}, _components[Icon.name] = Icon, _components),
  emits: ['click'],
  props: {
    type: {
      type: String,
      "default": 'primary'
    },
    size: {
      type: String
    },
    color: {
      type: String
    },
    block: {
      type: Boolean,
      "default": false
    },
    noBorder: {
      type: Boolean,
      "default": false
    },
    plain: {
      type: Boolean,
      "default": false
    },
    // square: {
    //   type: Boolean,
    //   default: false
    // },
    round: {
      type: Boolean,
      "default": false
    },
    disabled: {
      type: Boolean,
      "default": false
    },
    className: {
      type: String
    },
    icon: {
      type: String
    },
    loading: {
      type: Boolean,
      "default": false
    },
    loadingText: {
      type: String
    }
  },
  data: function data() {
    return {
      typeClass: ''
    };
  },
  computed: {
    buttonStyle: function buttonStyle() {
      var style = {};

      if (this.color) {
        style.color = this.plain ? this.color : '#fff';

        if (!this.plain) {
          style.background = this.color;
        }

        if (this.color.indexOf('gradient') !== -1) {
          style.border = 0;
        } else {
          style.borderColor = this.color;
        }

        style.boxShadow = 'none';
      }

      return style;
    }
  },
  mounted: function mounted() {
    this.typeClass = 'fm-button-' + this.type;
  },
  methods: {
    click: function click(event) {
      if (!this.disabled) {
        this.$emit('click', event);
      }
    }
  }
};

var _hoisted_1 = {
  key: 1,
  "class": "fm-button-loading"
};

var _hoisted_2 = /*#__PURE__*/createVNode("svg", {
  viewBox: "25 25 50 50",
  "class": "fm-button-loading-icon-circular"
}, [/*#__PURE__*/createVNode("circle", {
  cx: "50",
  cy: "50",
  r: "20",
  fill: "none"
})], -1
/* HOISTED */
);

var _hoisted_3 = {
  key: 0,
  "class": "fm-button-loading-text"
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_fm_icon = resolveComponent("fm-icon");

  return openBlock(), createBlock("button", {
    "class": ["fm-button", [$props.className, $data.typeClass, $props.disabled ? 'fm-button-disabled' : '', $props.block ? 'fm-button-block' : '', $props.round ? 'fm-button-round' : '', $props.plain ? 'fm-button-plain' : '', $props.noBorder ? 'fm-button-noborder' : '', $props.size === 'small' ? 'fm-button-small' : '', $props.size === 'large' ? 'fm-button-large' : '', $props.size === 'mini' ? 'fm-button-mini' : '', $props.loading ? 'fm-button-loading' : '']],
    style: $options.buttonStyle,
    onClick: _cache[1] || (_cache[1] = function () {
      return $options.click && $options.click.apply($options, arguments);
    })
  }, [$props.icon ? (openBlock(), createBlock(_component_fm_icon, {
    key: 0,
    name: $props.icon
  }, null, 8
  /* PROPS */
  , ["name"])) : createCommentVNode("v-if", true), $props.loading ? (openBlock(), createBlock("span", _hoisted_1, [_hoisted_2])) : createCommentVNode("v-if", true), renderSlot(_ctx.$slots, "default", {}, function () {
    return [$props.loading && $props.loadingText ? (openBlock(), createBlock("span", _hoisted_3, toDisplayString($props.loadingText), 1
    /* TEXT */
    )) : createCommentVNode("v-if", true), $props.type === 'add' ? (openBlock(), createBlock(_component_fm_icon, {
      key: 1,
      name: "s-plus"
    })) : createCommentVNode("v-if", true)];
  })], 6
  /* CLASS, STYLE */
  );
}

script.render = render;
script.__file = "packages/button/src/button.vue";

script.install = function (app) {
  app.component(script.name, script);
};

export default script;
export { script as Button };
