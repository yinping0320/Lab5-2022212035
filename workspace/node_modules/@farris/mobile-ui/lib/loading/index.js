import { defineComponent, openBlock, createBlock, Fragment, createCommentVNode, createVNode, toDisplayString } from 'vue';
import { inBrowser, isObject } from '../utils';
import { mountComponent, usePopupState } from '../hook';

var script = defineComponent({
  name: 'fm-loading',
  props: {
    color: {
      type: String,
      "default": '#c9c9c9'
    },
    size: {
      type: Number,
      "default": 28
    },
    textSize: {
      type: Number,
      "default": 16
    },
    vertical: {
      type: Boolean,
      "default": false
    },
    show: Boolean,
    message: {
      type: String,
      "default": '加载中...'
    }
  } // data() {
  //   return {
  //     visible: false
  //   }
  // },
  // beforeDestroy() {
  //   this.hideLoading();
  // },
  // deactivated() {
  //   this.hideLoading();
  // },
  // methods: {
  //   showLoading() {
  //     this.visible = true;
  //   },
  //   hideLoading() {
  //     this.visible = false;
  //   }
  // }

});

var _hoisted_1 = {
  key: 0,
  "class": "fm-loading-mask"
};

var _hoisted_2 = /*#__PURE__*/createVNode("circle", {
  cx: "50",
  cy: "50",
  r: "20",
  fill: "none"
}, null, -1
/* HOISTED */
);

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock(Fragment, null, [_ctx.show ? (openBlock(), createBlock("div", _hoisted_1)) : createCommentVNode("v-if", true), _ctx.show ? (openBlock(), createBlock("div", {
    key: 1,
    "class": ["fm-loading", {
      'fm-loading-vertical': _ctx.vertical
    }]
  }, [createVNode("span", {
    "class": "fm-loading-icon",
    style: {
      width: _ctx.size + 'px',
      height: _ctx.size + 'px'
    }
  }, [(openBlock(), createBlock("svg", {
    viewBox: "25 25 50 50",
    "class": "fm-loading-icon-circular",
    style: {
      color: _ctx.color
    }
  }, [_hoisted_2], 4
  /* STYLE */
  ))], 4
  /* STYLE */
  ), _ctx.message ? (openBlock(), createBlock("span", {
    key: 0,
    "class": "fm-loading-text",
    style: {
      fontSize: _ctx.textSize + 'px'
    }
  }, toDisplayString(_ctx.message), 5
  /* TEXT, STYLE */
  )) : createCommentVNode("v-if", true)], 2
  /* CLASS */
  )) : createCommentVNode("v-if", true)], 64
  /* STABLE_FRAGMENT */
  );
}

script.render = render;
script.__file = "packages/loading/src/loading.vue";

var instance;

function defaultOptions() {
  return {
    color: '#c9c9c9',
    size: 28,
    textSize: 16,
    vertical: false,
    show: true,
    message: '加载中...'
  };
}

function parseOptions(message) {
  return isObject(message) ? message : {
    message: message
  };
}

var initInstance = function initInstance() {

  var _mountComponent = mountComponent({
    setup: function setup() {
      var _usePopupState = usePopupState(),
          state = _usePopupState.state,
          toggle = _usePopupState.toggle;

      return function () {
        return createVNode(script, Object.assign(Object.assign({}, state), {
          'onUpdate:show': toggle
        }), null);
      };
    }
  });

  instance = _mountComponent.instance;
};

function Loading(options) {
  if (!inBrowser) {
    return;
  }

  if (!instance) {
    initInstance();
  }

  options = Object.assign(Object.assign({}, Loading.currentOptions), parseOptions(options));
  instance.open(options);
  return instance;
}

Loading.clear = function () {
  if (instance) {
    instance.toggle(false);
  }
};

Loading.show = function (options) {
  return Loading(Object.assign({}, parseOptions(options)));
};

Loading.hide = function () {
  if (instance) {
    instance.toggle(false);
  }
};

Loading.currentOptions = defaultOptions();

Loading.setDefaultOptions = function (options) {
  Object.assign(Loading.currentOptions, options);
};

Loading.resetDefaultOptions = function () {
  Loading.currentOptions = defaultOptions();
};

Loading.install = function (app) {
  app.component(script.name, script);
  app.config.globalProperties.$loading = Loading;
};

Loading.Component = script;

export default Loading;
export { Loading };
