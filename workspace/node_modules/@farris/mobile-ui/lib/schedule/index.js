import { reactive, ref, onMounted, watch, computed, openBlock, createBlock, createVNode, renderSlot, toDisplayString, Fragment, renderList, createCommentVNode } from 'vue';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var script = {
  name: 'fm-scheadule',
  props: {
    startTime: {
      type: Number,
      "default": 7
    },
    endTime: {
      type: Number,
      "default": 22
    },
    events: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    eventColor: {
      type: String,
      "default": '#36a5f6'
    }
  },
  setup: function setup(props, _ref) {
    var emit = _ref.emit;
    var hourList = reactive([]);
    var currentSelectedEvent = ref({});
    var currentSelectedAllEvent = ref({});
    var eventInfoRef = ref(null);
    var showEventInfo = ref(false);

    var genHourList = function genHourList() {
      for (var i = props.startTime; i <= props.endTime; i++) {
        hourList.push(i);
      }
    };

    onMounted(function () {
      genHourList();
    });
    var allDateEvents = ref([]);
    var hourEvents = ref([]);
    watch(function () {
      return props.events;
    }, function () {
      allDateEvents.value = props.events.filter(function (event) {
        return event.allDate;
      });
      hourEvents.value = props.events.filter(function (event) {
        return !event.allDate;
      });
    }, {
      immediate: true
    });
    var eventList = computed(function () {
      if (!Array.isArray(props.events)) {
        return [];
      }

      return sortEvents(hourEvents.value).map(function (event, index) {
        var start = event.start,
            end = event.end;
        var startArr = start.split(':');
        var endArr = end.split(':');
        var startNum = Number(startArr[0]) + Number(startArr[1]) / 60;
        var endNum = Number(endArr[0]) + Number(endArr[1]) / 60;
        var height = (endNum - startNum) * 40 - 1;
        var top = (startNum - props.startTime) * 40;

        var _getWidth = getWidth({
          start: startNum,
          end: endNum,
          index: index
        }),
            width = _getWidth.width,
            left = _getWidth.left;

        console.log(width, left);
        return _extends({
          height: height,
          width: width,
          top: top,
          left: left
        }, event);
      }); // return (
      //   Array.isArray(props.events) &&
      //   props.events.map((event: any, index: number) => {
      //     const { start, end } = event
      //     const startArr = start.split(':')
      //     const endArr = end.split(':')
      //     const startNum = Number(startArr[0]) + Number(startArr[1]) / 60
      //     const endNum = Number(endArr[0]) + Number(endArr[1]) / 60
      //     const height = (endNum - startNum) * 40 - 1
      //     const top = 28 + (startNum - props.startTime) * 40
      //     const { width, left } = getWidth({
      //       start: startNum,
      //       end: endNum,
      //       index,
      //     })
      //     console.log(width, left)
      //     return {
      //       height,
      //       width,
      //       top,
      //       left,
      //       ...event,
      //     }
      //   })
      // )
    });

    var eventClick = function eventClick(event, index, type) {
      if (type === void 0) {
        type = 'common';
      }

      if (type === 'all') {
        currentSelectedAllEvent.value = _extends({
          index: index
        }, event);
        currentSelectedEvent.value = {};
      } else {
        currentSelectedEvent.value = _extends({
          index: index
        }, event);
        currentSelectedAllEvent.value = {};
      }

      var top = event.top,
          left = event.left,
          height = event.height,
          width = event.width,
          others = _objectWithoutPropertiesLoose(event, ["top", "left", "height", "width"]);

      emit('event-click', others); // setEventInfoPosition(event)
    }; // const style = ref()
    // const setEventInfoPosition = event => {
    //   const eventInfoEl = unref(eventInfoRef)
    //   if (eventInfoEl) {
    //     showEventInfo.value = true
    //     eventInfoEl.style.top = event.top + event.height + 8 + 'px'
    //     style.value = { top: event.top + event.height + 8 + 'px' }
    //   }
    // }


    var genEventStyle = function genEventStyle(event) {
      var eventColor = event.color || props.eventColor;
      return {
        top: event.top + "px",
        width: event.width,
        left: event.left,
        height: event.height + "px",
        borderLeft: "2px solid " + eventColor
      }; // `top:${event.top}px;height:${
      //   event.height
      // }px;borderLeft: 2px solid ${
      //   event.color ? event.color : props.eventColor
      // };`
    };

    var getHourState = function getHourState(hour) {
      if (props.startTime < 7 && props.startTime === hour) {
        return '凌晨';
      } else if (props.startTime < 13 && props.startTime === hour || hour === 7) {
        return '上午';
      } else if (props.startTime === hour || 13 === hour) {
        return '下午';
      }
    }; // const onClickEdit = event => {
    //   emit('edit', event)
    // }
    // const onClickDelete = event => {
    //   emit('delete', event)
    // }


    var getWidth = function getWidth(range) {
      var proportion = 0;
      var offsetX = 0;
      sortEvents(hourEvents.value).forEach(function (event, index) {
        var start = event.start,
            end = event.end;
        var startArr = start.split(':');
        var endArr = end.split(':');
        var startNum = Number(startArr[0]) + Number(startArr[1]) / 60;
        var endNum = Number(endArr[0]) + Number(endArr[1]) / 60;
        var maxStart = Math.max(range.start, startNum);
        var minEnd = Math.min(range.end, endNum);

        if (minEnd - maxStart > 0) {
          proportion = proportion + 1;
          offsetX = range.index > index ? offsetX + 1 : offsetX;
        }
      });
      return {
        width: Math.floor(100 / proportion) + '%',
        left: 100 * offsetX / proportion + '%'
      };
    };

    var sortEvents = function sortEvents(events) {
      var targetEvents = [].concat(events);
      return targetEvents.sort(function (firstEl, secondEl) {
        var _formtTime = formtTime(firstEl),
            fStart = _formtTime.start,
            fEnd = _formtTime.end;

        var _formtTime2 = formtTime(secondEl),
            SStart = _formtTime2.start,
            SEnd = _formtTime2.end;

        if (fStart >= SStart && fEnd <= SEnd) {
          return 1;
        } else if (fStart > SStart) {
          return 1;
        }

        return -1;
      });
    };

    var formtTime = function formtTime(event) {
      var start = event.start,
          end = event.end;
      var startArr = start.split(':');
      var endArr = end.split(':');
      var startNum = Number(startArr[0]) + Number(startArr[1]) / 60;
      var endNum = Number(endArr[0]) + Number(endArr[1]) / 60;
      return {
        start: startNum,
        end: endNum
      };
    };

    return {
      hourList: hourList,
      eventList: eventList,
      allDateEvents: allDateEvents,
      currentSelectedEvent: currentSelectedEvent,
      currentSelectedAllEvent: currentSelectedAllEvent,
      eventClick: eventClick,
      showEventInfo: showEventInfo,
      // style,
      eventInfoRef: eventInfoRef,
      genEventStyle: genEventStyle,
      getHourState: getHourState // onClickEdit,
      // onClickDelete,

    };
  }
};

var _hoisted_1 = {
  "class": "fm-scheadule"
};
var _hoisted_2 = {
  "class": "header"
};
var _hoisted_3 = {
  "class": "title boder-bottom"
};
var _hoisted_4 = {
  "class": "content"
};
var _hoisted_5 = {
  "class": "allDate boder-bottom"
};

var _hoisted_6 = /*#__PURE__*/createVNode("div", {
  "class": "label"
}, [/*#__PURE__*/createVNode("span", null, "全天")], -1
/* HOISTED */
);

var _hoisted_7 = {
  "class": "event-list-all"
};
var _hoisted_8 = {
  "class": "event"
};

var _hoisted_9 = /*#__PURE__*/createVNode("div", {
  "class": "left"
}, [/*#__PURE__*/createVNode("i", {
  "class": "fm-icon fm-icon-photograph"
})], -1
/* HOISTED */
);

var _hoisted_10 = {
  "class": "right"
};
var _hoisted_11 = {
  "class": "event-title"
};
var _hoisted_12 = {
  "class": "event-content"
};
var _hoisted_13 = {
  "class": "hour-list"
};
var _hoisted_14 = {
  "class": "label-container"
};
var _hoisted_15 = {
  "class": "label hour-cell-label"
};
var _hoisted_16 = {
  "class": "label",
  style: {
    "height": "50%"
  }
};
var _hoisted_17 = {
  "class": "event-list"
};
var _hoisted_18 = {
  "class": "event"
};

var _hoisted_19 = /*#__PURE__*/createVNode("div", {
  "class": "left"
}, [/*#__PURE__*/createVNode("i", {
  "class": "fm-icon fm-icon-photograph"
})], -1
/* HOISTED */
);

var _hoisted_20 = {
  "class": "right"
};
var _hoisted_21 = {
  "class": "event-title"
};
var _hoisted_22 = {
  "class": "event-content"
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock("div", _hoisted_1, [createVNode("div", _hoisted_2, [createVNode("div", _hoisted_3, [renderSlot(_ctx.$slots, "title", {
    events: $props.events
  }, function () {
    return [createVNode("span", null, toDisplayString($props.events ? $props.events.length : 0) + "项日程", 1
    /* TEXT */
    )];
  })])]), createVNode("div", _hoisted_4, [createVNode("div", _hoisted_5, [_hoisted_6, createVNode("div", _hoisted_7, [(openBlock(true), createBlock(Fragment, null, renderList($setup.allDateEvents, function (event, index) {
    return openBlock(), createBlock("div", {
      key: event.id,
      "class": {
        'event-container': true,
        'event-container-focus': $setup.currentSelectedAllEvent.index === index
      },
      style: {
        "border-left": "2px solid rgb(54, 165, 246)"
      },
      onClick: function onClick($event) {
        return $setup.eventClick(event, index, 'all');
      }
    }, [createVNode("div", {
      "class": "event-bg",
      style: "background:" + (event.color ? event.color : $props.eventColor) + ";"
    }, null, 4
    /* STYLE */
    ), createVNode("div", _hoisted_8, [renderSlot(_ctx.$slots, "event", {
      event: event
    }, function () {
      return [_hoisted_9, createVNode("div", _hoisted_10, [createVNode("div", _hoisted_11, [createVNode("span", null, toDisplayString(event.title), 1
      /* TEXT */
      )]), createVNode("div", _hoisted_12, [createVNode("span", null, toDisplayString(event.content), 1
      /* TEXT */
      )])])];
    })])], 10
    /* CLASS, PROPS */
    , ["onClick"]);
  }), 128
  /* KEYED_FRAGMENT */
  ))])]), createVNode("div", _hoisted_13, [(openBlock(true), createBlock(Fragment, null, renderList($setup.hourList, function (hour) {
    return openBlock(), createBlock("div", {
      "class": "hour-cell boder-bottom",
      key: hour
    }, [createVNode("div", _hoisted_14, [createVNode("div", _hoisted_15, [createVNode("span", null, toDisplayString(hour > 12 ? hour - 12 : hour), 1
    /* TEXT */
    )]), createVNode("div", _hoisted_16, toDisplayString($setup.getHourState(hour)), 1
    /* TEXT */
    )])]);
  }), 128
  /* KEYED_FRAGMENT */
  )), createVNode("div", _hoisted_17, [(openBlock(true), createBlock(Fragment, null, renderList($setup.eventList, function (event, index) {
    return openBlock(), createBlock("div", {
      key: event.id,
      "class": $setup.currentSelectedEvent.index === index ? 'event-container event-container-absolute event-container-focus' : 'event-container event-container-absolute',
      style: $setup.genEventStyle(event),
      onClick: function onClick($event) {
        return $setup.eventClick(event, index);
      }
    }, [createVNode("div", {
      "class": "event-bg",
      style: "background:" + (event.color ? event.color : $props.eventColor) + ";"
    }, null, 4
    /* STYLE */
    ), createVNode("div", _hoisted_18, [renderSlot(_ctx.$slots, "event", {
      event: event
    }, function () {
      return [_hoisted_19, createVNode("div", _hoisted_20, [createVNode("div", _hoisted_21, [createVNode("span", null, toDisplayString(event.title), 1
      /* TEXT */
      )]), createVNode("div", _hoisted_22, [createVNode("span", null, toDisplayString(event.content), 1
      /* TEXT */
      )])])];
    })])], 14
    /* CLASS, STYLE, PROPS */
    , ["onClick"]);
  }), 128
  /* KEYED_FRAGMENT */
  )), createCommentVNode(" <fm-overlay\r\n            :show=\"showEventInfo\"\r\n            @click=\"() => (showEventInfo = false)\"\r\n            style=\"background-color: rgba(0, 0, 0, 0.0);\"\r\n          ></fm-overlay>\r\n          <div class=\"event-info\" ref=\"eventInfoRef\" v-show=\"showEventInfo\">\r\n            <div class=\"event-info-content\">\r\n              <slot name=\"event-info\" :event=\"currentSelectedEvent\">\r\n                <div class=\"event-info-item\">\r\n                  <span>{{ currentSelectedEvent.title }}</span>\r\n                </div>\r\n                <div class=\"event-info-item\">\r\n                  <span>{{\r\n                    currentSelectedEvent.start + '-' + currentSelectedEvent.end\r\n                  }}</span>\r\n                </div>\r\n                <div class=\"event-info-item\">\r\n                  <span>{{ currentSelectedEvent.content }}</span>\r\n                </div>\r\n              </slot>\r\n            </div>\r\n            <div class=\"event-info-footer\">\r\n              <div class=\"button\" @click=\"onClickEdit(currentSelectedEvent)\">edit</div>\r\n              <div class=\"button\" @click=\"onClickDelete(currentSelectedEvent)\">delete</div>\r\n            </div>\r\n            <div class=\"triangle\"></div>\r\n          </div> ")])])])]);
}

script.render = render;
script.__file = "packages/schedule/src/scheadule.vue";

script.install = function (app) {
  app.component(script.name, script);
};

export default script;
export { script as Schedule };
