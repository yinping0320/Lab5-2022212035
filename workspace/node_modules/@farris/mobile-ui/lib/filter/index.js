import { defineComponent, ref, watch, computed, resolveComponent, openBlock, createBlock, createVNode, renderSlot, createCommentVNode, withCtx } from 'vue';
import { FilterPanel, FilterSimplePanel } from '../filter-panel';
import Popup from '../popup';
import { getDeviation } from '../utils';
import { addFilterConditions, genSearchFilterConditions, CONDITIONS } from '../filter-panel/src/util';
import { useBack } from '../hook';
import Search from '../search';
import Icon from '../icon';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var _components;
var script = defineComponent({
  name: 'fm-filter-search',
  components: (_components = {}, _components[Search.name] = Search, _components[Icon.name] = Icon, _components),
  props: {
    placeholder: {
      type: String,
      "default": '搜索'
    },
    show: Boolean,
    searchFields: {
      type: [String, Array],
      "default": ''
    },
    searchBoxValue: {
      type: String,
      "default": ''
    },
    icon: {
      type: String,
      "default": 'screening'
    },
    useSearch: {
      type: Boolean,
      "default": false
    }
  },
  setup: function setup(props, _ref) {
    var emit = _ref.emit;
    var searchBoxValue = ref(props.searchBoxValue);
    watch(function () {
      return props.searchBoxValue;
    }, function (value) {
      return searchBoxValue.value = value;
    });

    var onToggle = function onToggle() {
      emit('toggle');
    };

    var onSearch = function onSearch(value) {
      console.log('onSearch');
      emit('search', value);
    };

    var className = computed(function () {
      return props.useSearch ? 'fm-filter-search-container' : 'fm-filter-only-icon';
    });
    return {
      searchBoxValue: searchBoxValue,
      className: className,
      onToggle: onToggle,
      onSearch: onSearch
    };
  }
});

var _hoisted_1 = {
  key: 0,
  "class": "fm-filter-search-right"
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_fm_icon = resolveComponent("fm-icon");

  var _component_fm_search = resolveComponent("fm-search");

  return openBlock(), createBlock("div", {
    "class": _ctx.className
  }, [createVNode("div", {
    onClick: _cache[1] || (_cache[1] = function () {
      return _ctx.onToggle && _ctx.onToggle.apply(_ctx, arguments);
    }),
    "class": ["fm-filter-search-left fm-filter-icon", {
      'fm-state-active': _ctx.show
    }]
  }, [renderSlot(_ctx.$slots, "left", {}, function () {
    return [createVNode(_component_fm_icon, {
      name: _ctx.icon
    }, null, 8
    /* PROPS */
    , ["name"])];
  })], 2
  /* CLASS */
  ), _ctx.useSearch ? (openBlock(), createBlock("div", _hoisted_1, [renderSlot(_ctx.$slots, "right", {}, function () {
    return [createVNode(_component_fm_search, {
      modelValue: _ctx.searchBoxValue,
      "onUpdate:modelValue": _cache[2] || (_cache[2] = function ($event) {
        return _ctx.searchBoxValue = $event;
      }),
      placeholder: _ctx.placeholder,
      onSearch: _ctx.onSearch,
      onClear: _cache[3] || (_cache[3] = function ($event) {
        return _ctx.onSearch('');
      })
    }, null, 8
    /* PROPS */
    , ["modelValue", "placeholder", "onSearch"])];
  })])) : createCommentVNode("v-if", true)], 2
  /* CLASS */
  );
}

script.render = render;
script.__file = "packages/filter/src/search-container.vue";

var _components$1;
var script$1 = defineComponent({
  name: 'fm-filter',
  inheritAttrs: false,
  components: (_components$1 = {}, _components$1[FilterPanel.name] = FilterPanel, _components$1[FilterSimplePanel.name] = FilterSimplePanel, _components$1[Popup.name] = Popup, _components$1[script.name] = script, _components$1),
  props: {
    type: {
      type: String,
      "default": 'normal'
    },
    fieldConfigs: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    placeholder: {
      type: String,
      "default": '搜索'
    },
    modelValue: Object,
    position: {
      type: String,
      "default": 'left'
    },
    searchFields: {
      type: [String, Array],
      "default": ''
    },
    searchBoxValue: {
      type: String,
      "default": ''
    },
    useSearch: {
      type: Boolean,
      "default": false
    },
    round: {
      type: Boolean,
      "default": true
    },
    extraConditions: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    icon: {
      type: String,
      "default": 'screening'
    },
    query: Function
  },
  setup: function setup(props, _ref) {
    var emit = _ref.emit;
    var filterPanelEnyity = CONDITIONS;
    var searchBoxValue = ref(props.searchBoxValue);
    watch(function () {
      return props.searchBoxValue;
    }, function (value) {
      return searchBoxValue.value = value;
    });
    var enableShow = ref(false);

    var _useBack = useBack(enableShow),
        pushOrPop = _useBack.pushOrPop;

    var onToggle = function onToggle() {
      enableShow.value = !enableShow.value;
      pushOrPop();

      if (props.type === 'simple') {
        var position = getDeviation(searchRef, 'bottom');
        popStyle.value = {
          top: position.top + 'px'
        };
      }
    };

    var getSearchConditions = function getSearchConditions(value) {
      return genSearchFilterConditions(props.searchFields, value);
    };

    var onSearch = function onSearch(value) {
      emit('searchBoxChange', value);
      emit('search', _extends({}, filterPanelEnyity, {
        FilterConditions: addFilterConditions(filterPanelEnyity.FilterConditions, getSearchConditions(value))
      }));
    };

    var onChange = function onChange(value) {
      // filterPanelConditions = value
      emit('change', value); // {...value, FilterConditions: addFilterConditions(value.FilterConditions, getSearchConditions(searchBoxValue.value))})
    };

    var onConfirm = function onConfirm(value) {
      filterPanelEnyity = value.filterEnyity;
      onToggle();
      emit('confirm', _extends({}, filterPanelEnyity, {
        FilterConditions: addFilterConditions(filterPanelEnyity.FilterConditions, getSearchConditions(searchBoxValue.value))
      }));
      emit('update:modelValue', value.filterData);
      console.log(value);
    };

    var transitionName = computed(function () {
      return props.type === 'simple' ? 'fm-drop-down' : '';
    });
    var silderPosition = computed(function () {
      return props.type === 'simple' ? 'top' : props.position;
    });
    var popClass = computed(function () {
      return props.type === 'simple' ? 'fm-filter-popup-drop' : 'fm-filter-popup';
    });
    var popStyle = ref({});
    var searchRef = ref();
    return {
      searchBoxValue: searchBoxValue,
      enableShow: enableShow,
      transitionName: transitionName,
      silderPosition: silderPosition,
      searchRef: searchRef,
      popClass: popClass,
      popStyle: popStyle,
      onToggle: onToggle,
      onSearch: onSearch,
      onChange: onChange,
      onConfirm: onConfirm,
      pushOrPop: pushOrPop
    };
  }
});

var _hoisted_1$1 = {
  "class": "fm-filter",
  ref: "searchRef"
};
function render$1(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_fm_filter_search = resolveComponent("fm-filter-search");

  var _component_fm_filter_panel = resolveComponent("fm-filter-panel");

  var _component_fm_filter_simple_panel = resolveComponent("fm-filter-simple-panel");

  var _component_fm_popup = resolveComponent("fm-popup");

  return openBlock(), createBlock("div", _hoisted_1$1, [renderSlot(_ctx.$slots, "default", {
    click: _ctx.onToggle
  }, function () {
    return [createVNode(_component_fm_filter_search, {
      show: _ctx.enableShow,
      searchFields: _ctx.searchFields,
      searchBoxValue: _ctx.searchBoxValue,
      useSearch: _ctx.useSearch,
      placeholder: _ctx.placeholder,
      icon: _ctx.icon,
      onToggle: _ctx.onToggle,
      onSearch: _ctx.onSearch
    }, {
      left: withCtx(function () {
        return [renderSlot(_ctx.$slots, "left")];
      }),
      right: withCtx(function () {
        return [renderSlot(_ctx.$slots, "right")];
      }),
      _: 1
      /* STABLE */

    }, 8
    /* PROPS */
    , ["show", "searchFields", "searchBoxValue", "useSearch", "placeholder", "icon", "onToggle", "onSearch"])];
  }), createVNode(_component_fm_popup, {
    "class": _ctx.popClass,
    style: _ctx.popStyle,
    overlayStyle: _ctx.popStyle,
    show: _ctx.enableShow,
    "onUpdate:show": [_cache[2] || (_cache[2] = function ($event) {
      return _ctx.enableShow = $event;
    }), _ctx.pushOrPop],
    position: _ctx.silderPosition,
    transition: _ctx.transitionName,
    round: _ctx.round
  }, {
    "default": withCtx(function () {
      return [_ctx.type === 'normal' ? (openBlock(), createBlock(_component_fm_filter_panel, {
        key: 0,
        modelValue: _ctx.modelValue,
        fieldConfigs: _ctx.fieldConfigs,
        query: _ctx.query,
        extraConditions: _ctx.extraConditions,
        onConfirm: _ctx.onConfirm,
        onChange: _ctx.onChange,
        onClear: _cache[1] || (_cache[1] = function ($event) {
          return _ctx.$emit('clear');
        })
      }, {
        "lookup-cell": withCtx(function (slotProps) {
          return [renderSlot(_ctx.$slots, "lookup-cell", {
            listData: slotProps.listData,
            item: slotProps.item,
            idField: slotProps.idField,
            textField: slotProps.textField
          })];
        }),
        _: 1
        /* STABLE */

      }, 8
      /* PROPS */
      , ["modelValue", "fieldConfigs", "query", "extraConditions", "onConfirm", "onChange"])) : (openBlock(), createBlock(_component_fm_filter_simple_panel, {
        key: 1,
        fieldConfigs: _ctx.fieldConfigs,
        onChange: _ctx.onChange,
        onConfirm: _ctx.onConfirm
      }, null, 8
      /* PROPS */
      , ["fieldConfigs", "onChange", "onConfirm"]))];
    }),
    _: 1
    /* STABLE */

  }, 8
  /* PROPS */
  , ["class", "style", "overlayStyle", "show", "position", "transition", "round", "onUpdate:show"])], 512
  /* NEED_PATCH */
  );
}

script$1.render = render$1;
script$1.__file = "packages/filter/src/filter.vue";

script$1.install = function (app) {
  app.component(script$1.name, script$1);
};

export default script$1;
export { script$1 as Filter };
