import { resolveComponent, openBlock, createBlock, withCtx, createVNode, toDisplayString, renderSlot, createCommentVNode, Fragment, renderList } from 'vue';
import Popup from '../popup';

var _components;
var script = {
  name: 'fm-action-sheet',
  components: (_components = {}, _components[Popup.name] = Popup, _components),
  props: {
    show: {
      type: Boolean,
      "default": false
    },
    actions: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    title: {
      type: String
    },
    cancelText: {
      type: String
    },
    description: {
      type: String
    },
    closeable: {
      //是否显示关闭图标
      type: Boolean,
      "default": false
    },
    round: {
      type: Boolean,
      "default": true
    },
    duration: {
      //动画时长，单位秒
      type: [Number, String],
      "default": 0.3
    },
    overlay: {
      //是否显示遮罩层
      type: Boolean,
      "default": true
    },
    lockScroll: {
      //是否锁定背景滚动
      type: Boolean,
      "default": true
    },
    closeOnClickOverlay: {
      //是否在点击遮罩层后关闭
      type: Boolean,
      "default": true
    },
    closeOnClickAction: {
      //是否在点击选项后关闭
      type: Boolean,
      "default": false
    }
  },
  emits: ['select', 'cancel', 'update:show'],
  setup: function setup(props, _ref) {
    var emit = _ref.emit;

    var onUpdateShow = function onUpdateShow(show) {
      emit('update:show', show);
    };

    var onCancel = function onCancel() {
      onUpdateShow(false);
      emit('cancel');
    };

    var itemClick = function itemClick(item, index) {
      if (item.disabled) return;

      if (item.callback) {
        item.callback();
      }

      emit('select', item, index);

      if (props.closeOnClickAction) {
        onUpdateShow(false);
      }
    };

    var popupShow = function popupShow(event) {
      onUpdateShow(event);

      if (!event) {
        emit('cancel');
      }
    };

    return {
      itemClick: itemClick,
      onCancel: onCancel,
      onUpdateShow: onUpdateShow,
      popupShow: popupShow
    };
  }
};

const _hoisted_1 = {
  key: 0,
  class: "fm-actionsheet-header"
};
const _hoisted_2 = { class: "fm-actionsheet-header-title" };
const _hoisted_3 = {
  key: 1,
  class: "fm-actionsheet-description"
};
const _hoisted_4 = { class: "fm-actionsheet-description-inner" };
const _hoisted_5 = { class: "fm-actionsheet-content" };
const _hoisted_6 = {
  key: 0,
  class: "fm-actionsheet-item-subname"
};
const _hoisted_7 = { class: "fm-actionsheet-cancel-inner" };

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_fm_icon = resolveComponent("fm-icon");
  const _component_fm_popup = resolveComponent("fm-popup");

  return (openBlock(), createBlock(_component_fm_popup, {
    show: $props.show,
    "onUpdate:show": _cache[3] || (_cache[3] = $event => ($setup.popupShow($event))),
    position: "bottom",
    class: ["fm-actionsheet", {
    'fm-actionsheet-round':$props.round
  }],
    overlay: $props.overlay,
    lockScroll: $props.lockScroll,
    closeOnClickOverlay: $props.closeOnClickOverlay,
    duration: $props.duration
  }, {
    default: withCtx(() => [
      ($props.title || $props.closeable)
        ? (openBlock(), createBlock("div", _hoisted_1, [
            createVNode("span", _hoisted_2, toDisplayString($props.title), 1 /* TEXT */),
            createVNode("div", {
              class: "fm-actionsheet-header-close",
              onClick: _cache[1] || (_cache[1] = (...args) => ($setup.onCancel && $setup.onCancel(...args)))
            }, [
              renderSlot(_ctx.$slots, "cancel", {}, () => [
                createVNode(_component_fm_icon, { name: "s-cross" })
              ])
            ])
          ]))
        : createCommentVNode("v-if", true),
      ($props.description)
        ? (openBlock(), createBlock("div", _hoisted_3, [
            renderSlot(_ctx.$slots, "description", {}, () => [
              createVNode("div", _hoisted_4, toDisplayString($props.description), 1 /* TEXT */)
            ])
          ]))
        : createCommentVNode("v-if", true),
      createVNode("div", _hoisted_5, [
        renderSlot(_ctx.$slots, "default", {}, () => [
          (openBlock(true), createBlock(Fragment, null, renderList($props.actions, (action, index) => {
            return (openBlock(), createBlock("div", {
              class: ["fm-actionsheet-item", [
        action.disabled ? 'fm-actionsheet-item-disabled':null,
        action.className
      ]],
              key: index,
              onClick: $event => ($setup.itemClick(action,index))
            }, [
              createVNode("div", {
                class: "fm-actionsheet-item-name",
                style: {'color': action.color}
              }, toDisplayString(action.name), 5 /* TEXT, STYLE */),
              (action.subname)
                ? (openBlock(), createBlock("div", _hoisted_6, toDisplayString(action.subname), 1 /* TEXT */))
                : createCommentVNode("v-if", true)
            ], 10 /* CLASS, PROPS */, ["onClick"]))
          }), 128 /* KEYED_FRAGMENT */))
        ])
      ]),
      ($props.cancelText)
        ? (openBlock(), createBlock("div", {
            key: 2,
            class: "fm-actionsheet-cancel",
            onClick: _cache[2] || (_cache[2] = (...args) => ($setup.onCancel && $setup.onCancel(...args)))
          }, [
            createVNode("div", _hoisted_7, toDisplayString($props.cancelText), 1 /* TEXT */)
          ]))
        : createCommentVNode("v-if", true)
    ]),
    _: 3 /* FORWARDED */
  }, 8 /* PROPS */, ["show", "overlay", "lockScroll", "closeOnClickOverlay", "duration", "class"]))
}

script.render = render;
script.__file = "packages/action-sheet/src/index.vue";

script.install = function (app) {
  app.component(script.name, script);
};

export default script;
export { script as ActionSheet };
