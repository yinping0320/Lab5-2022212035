import { computed, resolveComponent, openBlock, createBlock, renderSlot, createVNode, createCommentVNode, toDisplayString, Fragment, renderList, withCtx } from 'vue';
import { getType } from '../utils';

var script = {
  name: 'fm-checker',
  props: {
    label: {
      type: String,
      "default": ''
    },
    disabled: {
      type: Boolean,
      "default": false
    },
    readonly: {
      type: Boolean,
      "default": false
    },
    shape: {
      type: String,
      "default": 'round'
    },
    checked: {
      type: Boolean,
      "default": false
    },
    modelValue: Boolean,
    checkedColor: {
      type: String,
      "default": '#3A90FF'
    },
    role: String,
    labelClass: String,
    type: {
      type: String,
      "default": 'check'
    },
    size: {
      type: [String, Boolean],
      "default": false
    }
  },
  setup: function setup(props, _ref) {
    var emit = _ref.emit;
    var iconName = computed(function () {
      return props.shape === 'round' ? 's-checked' : 's-checkbox-checked';
    });
    var checkClass = computed(function () {
      var _ref2;

      return _ref2 = {
        'fm-check-readonly': props.readonly,
        'fm-check-disabled': props.disabled
      }, _ref2["fm-check-" + props.size] = !!props.size, _ref2;
    });

    var onClick = function onClick() {
      if (props.readonly || props.disabled) {
        return;
      }

      emit('update:checked', !props.checked);
    };

    return {
      iconName: iconName,
      checkClass: checkClass,
      onClick: onClick
    };
  }
};

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_fm_icon = resolveComponent("fm-icon");

  return openBlock(), createBlock("div", {
    "class": ["fm-check", $setup.checkClass],
    onClick: _cache[1] || (_cache[1] = function () {
      return $setup.onClick && $setup.onClick.apply($setup, arguments);
    })
  }, [renderSlot(_ctx.$slots, "default", {}, function () {
    return [$props.type === 'check' ? (openBlock(), createBlock("div", {
      key: 0,
      "class": ["fm-check-icon", {
        'fm-check-icon-checked': $props.checked,
        'fm-check-icon-round': $props.shape === 'round'
      }]
    }, [createVNode(_component_fm_icon, {
      name: "s-success"
    })], 2
    /* CLASS */
    )) : createCommentVNode("v-if", true), createVNode("div", {
      "class": ["fm-check-label", ['fm-check-' + $props.type, $props.checked && $props.type === 'button' ? 'fm-check-button-checked' : '', $props.labelClass]]
    }, [createVNode("span", null, toDisplayString($props.label), 1
    /* TEXT */
    )], 2
    /* CLASS */
    )];
  })], 2
  /* CLASS */
  );
}

script.render = render;
script.__file = "packages/checkbox/src/check.vue";

var _components;
var script$1 = {
  name: 'fm-checkbox-group',
  components: (_components = {}, _components[script.name] = script, _components),
  props: {
    disabled: {
      type: Boolean,
      "default": false
    },
    readonly: {
      type: Boolean,
      "default": false
    },
    shape: {
      type: String,
      "default": 'square'
    },
    checked: {
      type: Boolean,
      "default": true
    },
    modelValue: {
      type: [String, Array],
      "default": []
    },
    checkedColor: {
      type: String,
      "default": '#3A90FF'
    },
    role: String,
    labelClass: String,
    direction: {
      type: String,
      "default": 'vertical'
    },
    items: Array,
    valueField: {
      type: String,
      "default": 'value'
    },
    textField: {
      type: String,
      "default": 'text'
    },
    type: {
      type: String,
      "default": 'check'
    },
    size: {
      type: String,
      "default": 'normal'
    }
  },
  setup: function setup(props, _ref) {
    var emit = _ref.emit;

    var onCheckedChange = function onCheckedChange(checked, value) {
      var modelValue = handlerModeChange(checked, value);
      emit('update:modelValue', modelValue);
    };

    var handlerModeChange = function handlerModeChange(checked, value) {
      var type = getType(props.modelValue);
      var checkeds = type === 'array' ? [].concat(props.modelValue) : props.modelValue ? props.modelValue.split(',') : [];

      if (checked) {
        checkeds.push(value);
      } else {
        checkeds = checkeds.filter(function (item) {
          return item !== value;
        });
      }

      return type === 'array' ? checkeds : checkeds.join(',');
    };

    var getCheckedIndex = function getCheckedIndex(value) {
      var type = getType(props.modelValue);

      if (type === 'string') {
        return props.modelValue.split(',').findIndex(function (item) {
          return item === value;
        });
      } else if (type === 'array') {
        return props.modelValue.findIndex(function (item) {
          return item === value;
        });
      }

      return -1;
    };

    var isChecked = function isChecked(value) {
      return getCheckedIndex(value) > -1 ? true : false;
    };

    return {
      isChecked: isChecked,
      onCheckedChange: onCheckedChange
    };
  }
};

function render$1(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_fm_checker = resolveComponent("fm-checker");

  var _component_fm_cell = resolveComponent("fm-cell");

  return openBlock(), createBlock("div", {
    "class": "fm-checkbox-group",
    role: $props.role
  }, [$props.direction === 'vertical' ? (openBlock(true), createBlock(Fragment, {
    key: 0
  }, renderList($props.items, function (item) {
    return openBlock(), createBlock(_component_fm_cell, {
      key: item[$props.valueField],
      "class": "fm-checkbox-vertical"
    }, {
      "default": withCtx(function () {
        return [createVNode(_component_fm_checker, {
          label: item[$props.textField],
          disabled: $props.disabled,
          readonly: $props.readonly,
          shape: $props.shape,
          checked: $setup.isChecked(item[$props.valueField]),
          checkedColor: $props.checkedColor,
          type: $props.type,
          "onUpdate:checked": function onUpdateChecked($event) {
            return $setup.onCheckedChange($event, item[$props.valueField]);
          }
        }, null, 8
        /* PROPS */
        , ["label", "disabled", "readonly", "shape", "checked", "checkedColor", "type", "onUpdate:checked"])];
      }),
      _: 2
      /* DYNAMIC */

    }, 1024
    /* DYNAMIC_SLOTS */
    );
  }), 128
  /* KEYED_FRAGMENT */
  )) : createCommentVNode("v-if", true), $props.direction === 'horizontal' ? (openBlock(), createBlock("div", {
    key: 1,
    "class": 'fm-checkbox-' + $props.direction
  }, [(openBlock(true), createBlock(Fragment, null, renderList($props.items, function (item) {
    return openBlock(), createBlock(_component_fm_checker, {
      "class": "fm-checkbox",
      key: item[$props.valueField],
      label: item[$props.textField],
      disabled: $props.disabled,
      readonly: $props.readonly,
      shape: $props.shape,
      checked: $setup.isChecked(item[$props.valueField]),
      checkedColor: $props.checkedColor,
      type: $props.type,
      size: $props.size,
      "onUpdate:checked": function onUpdateChecked($event) {
        return $setup.onCheckedChange($event, item[$props.valueField]);
      }
    }, null, 8
    /* PROPS */
    , ["label", "disabled", "readonly", "shape", "checked", "checkedColor", "type", "size", "onUpdate:checked"]);
  }), 128
  /* KEYED_FRAGMENT */
  ))], 2
  /* CLASS */
  )) : createCommentVNode("v-if", true)], 8
  /* PROPS */
  , ["role"]);
}

script$1.render = render$1;
script$1.__file = "packages/checkbox/src/checkbox-group.vue";

script$1.install = function (app) {
  app.component(script$1.name, script$1);
};

script.install = function (app) {
  app.component(script.name, script);
};

export default script$1;
export { script as Check, script$1 as CheckboxGroup };
