import Icon from '../icon';
import { resolveComponent, openBlock, createBlock, createVNode, Fragment, renderList, toDisplayString, renderSlot, createCommentVNode } from 'vue';

var _components;
var script = {
  name: 'fm-steps',
  components: (_components = {}, _components[Icon.name] = Icon, _components),
  props: {
    steps: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    direction: {
      type: String,
      "default": 'horizontal'
    },
    current: {
      type: Number,
      "default": 0,
      validator: function validator(val) {
        return val >= 0;
      }
    },
    fill: {
      type: Boolean,
      "default": false
    }
  }
};

const _hoisted_1 = { class: "fm-steps-list" };
const _hoisted_2 = { class: "item-icon" };
const _hoisted_3 = {
  key: 1,
  class: "fm-icon fm-icon-s-success"
};
const _hoisted_4 = {
  key: 2,
  class: "item-icon-text"
};
const _hoisted_5 = { class: "item-text" };
const _hoisted_6 = { class: "name" };
const _hoisted_7 = {
  key: 0,
  class: "desc"
};
const _hoisted_8 = {
  key: 1,
  class: "sub-desc"
};
const _hoisted_9 = {
  key: 0,
  class: "item-line"
};
const _hoisted_10 = /*#__PURE__*/createVNode("span", { class: "line-inner" }, null, -1 /* HOISTED */);

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_fm_icon = resolveComponent("fm-icon");

  return (openBlock(), createBlock("div", {
    class: ["fm-steps", {
  'fm-steps-vertical': $props.direction == 'vertical',
  'fm-steps-horizontal': $props.direction == 'horizontal',
  'fm-steps-fill': $props.fill
}]
  }, [
    createVNode("ul", _hoisted_1, [
      (openBlock(true), createBlock(Fragment, null, renderList($props.steps, (step, index) => {
        return (openBlock(), createBlock(Fragment, null, [
          createVNode("li", {
            class: ["fm-steps-item", {
        'fm-steps-item-finish': index < $props.current,
        'fm-steps-item-current': index == $props.current
      }]
          }, [
            createVNode("div", _hoisted_2, [
              (step.icon)
                ? (openBlock(), createBlock(_component_fm_icon, {
                    key: 0,
                    name: step.icon
                  }, null, 8 /* PROPS */, ["name"]))
                : (index < $props.current)
                  ? (openBlock(), createBlock("span", _hoisted_3))
                  : (openBlock(), createBlock("span", _hoisted_4, toDisplayString(index+1), 1 /* TEXT */))
            ]),
            createVNode("div", _hoisted_5, [
              renderSlot(_ctx.$slots, "default", {
                step: step,
                index: index,
                currentIndex: $props.current
              }, () => [
                createVNode("div", _hoisted_6, toDisplayString(step.name), 1 /* TEXT */),
                (step.desc)
                  ? (openBlock(), createBlock("div", _hoisted_7, toDisplayString(step.desc), 1 /* TEXT */))
                  : createCommentVNode("v-if", true),
                (step.subDesc)
                  ? (openBlock(), createBlock("div", _hoisted_8, toDisplayString(step.subDesc), 1 /* TEXT */))
                  : createCommentVNode("v-if", true)
              ])
            ]),
            ($props.direction == 'vertical' && index < ($props.steps.length - 1))
              ? (openBlock(), createBlock("div", _hoisted_9))
              : createCommentVNode("v-if", true)
          ], 2 /* CLASS */),
          ($props.direction == 'horizontal' && index < ($props.steps.length - 1))
            ? (openBlock(), createBlock("li", {
                key: 0,
                class: ["fm-steps-line", {
      'fm-steps-line-horizontal':$props.direction == 'horizontal',
      'fm-steps-line-finish':index < $props.current}]
              }, [
                _hoisted_10
              ], 2 /* CLASS */))
            : createCommentVNode("v-if", true)
        ], 64 /* STABLE_FRAGMENT */))
      }), 256 /* UNKEYED_FRAGMENT */))
    ])
  ], 2 /* CLASS */))
}

script.render = render;
script.__file = "packages/steps/src/index.vue";

script.install = function (app) {
  app.component(script.name, script);
};

export default script;
export { script as Steps };
