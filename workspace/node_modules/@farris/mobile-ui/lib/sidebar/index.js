import { ref, reactive, computed, watch, onMounted, provide, onBeforeUpdate, openBlock, createBlock, createVNode, Fragment, renderList, toDisplayString, renderSlot, inject, getCurrentInstance, onBeforeMount, onUnmounted } from 'vue';

//   text: string
//   url?: string
//   dot?: boolean
//   badge?: string | number
//   disable?: boolean
//   to?: string
// }

var script = {
  name: 'fm-sidebar',
  props: {
    modelValue: [String, Number],
    sidebarWidth: {
      type: Number,
      "default": 90
    }
  },
  emits: ['change'],
  setup: function setup(props, _ref) {
    var emit = _ref.emit;
    var currentName = ref(props.modelValue);
    var currentIndex = ref(0);
    var items = reactive([]);
    var itemDoms = reactive([]);
    var sidebarContent = ref(null);
    var sidebarList = ref(null);
    var clickChange = ref(false);
    var itemRefs = [];
    var menus = computed(function () {
      return items.map(function (pane) {
        return {
          name: pane.props.name,
          title: pane.props.title
        };
      });
    });
    watch(currentIndex, function (value) {
      if (itemRefs && itemRefs.length) {
        var sidebarListH = sidebarList.value.getBoundingClientRect().height,
            sidebarListScroll = sidebarList.value.scrollTop,
            itemOffsetTop = itemRefs[value].offsetTop,
            itemH = itemRefs[value].getBoundingClientRect().height;

        if (sidebarListH + sidebarListScroll < itemOffsetTop + itemH) {
          sidebarList.value.scrollTop = itemOffsetTop - sidebarListH + itemH;
        } else if (sidebarListScroll > itemOffsetTop) {
          sidebarList.value.scrollTop = itemOffsetTop;
        }
      }
    });
    onMounted(function () {
      if (!currentName.value && menus.value.length) {
        currentName.value = menus.value[0].name;
      }

      currentIndex.value = getCurrentIndex(currentName.value);
      scrollTopTo(currentName.value);
      sidebarScroll();
    });

    var addPane = function addPane(pane) {
      var sidebarItem = items.find(function (item) {
        return item.props.name == pane.props.name;
      });

      if (!sidebarItem) {
        items.push(pane);
      }
    };

    var removePane = function removePane(pane) {
      var sidebarItemIndex = items.findIndex(function (item) {
        return item.props.name == pane.props.name;
      });

      if (sidebarItemIndex >= 0) {
        items.splice(sidebarItemIndex, 1);
      }
    };

    var getCurrentIndex = function getCurrentIndex(currentName) {
      for (var i = 0, len = menus.value.length; i < len; i++) {
        if (menus.value[i].name === currentName) {
          return i;
        }
      }

      return 0;
    };

    var sidebarClick = function sidebarClick(item, index) {
      if (currentName.value == item.name) return;
      currentName.value = item.name;
      currentIndex.value = getCurrentIndex(currentName.value);
      scrollTopTo(item.name);
      emit('change', item);
      clickChange.value = true;
    };

    var scrollTopTo = function scrollTopTo(name) {
      var sidebarItem = items.find(function (sidebaritem) {
        return sidebaritem.props.name == name;
      });

      if (sidebarItem) {
        sidebarContent.value.scrollTop = sidebarItem.proxy.root.offsetTop;
      }
    };

    var debounce = function debounce(func, wait) {
      // 定时器变量
      var timeout;
      return function () {
        if (timeout !== null) clearTimeout(timeout);
        timeout = setTimeout(func, wait);
      };
    };

    var sidebarScroll = function sidebarScroll(event) {
      if (sidebarContent.value) {
        sidebarContent.value.addEventListener('scroll', debounce(function () {
          if (clickChange.value) {
            clickChange.value = false;
            return;
          }
          var scrollTop = sidebarContent.value.scrollTop;
          var topElementInView = items.filter(function (el) {
            return el.proxy.root.offsetTop <= scrollTop;
          });

          if (!topElementInView || !topElementInView.length) {
            return;
          }
          var topElement = topElementInView[topElementInView.length - 1];
          currentName.value = topElement.props.name;
          currentIndex.value = getCurrentIndex(currentName.value);
          clickChange.value = false;
        }), 500);
      }
    };

    provide('rootSidebar', {
      addPane: addPane,
      removePane: removePane,
      currentName: currentName
    });

    var sidebarItemRef = function sidebarItemRef(el) {
      if (el) {
        itemRefs.push(el);
      }
    };

    onBeforeUpdate(function () {
      itemRefs = [];
    });
    return {
      currentIndex: currentIndex,
      getCurrentIndex: getCurrentIndex,
      menus: menus,
      currentName: currentName,
      sidebarClick: sidebarClick,
      sidebarContent: sidebarContent,
      sidebarList: sidebarList,
      itemDoms: itemDoms,
      sidebarScroll: sidebarScroll,
      debounce: debounce,
      scrollTopTo: scrollTopTo,
      sidebarItemRef: sidebarItemRef,
      itemRefs: itemRefs,
      clickChange: clickChange
    };
  }
};

var _hoisted_1 = {
  "class": "fm-sidebar"
};
var _hoisted_2 = {
  "class": "fm-sidebar-item-text"
};
var _hoisted_3 = {
  "class": "fm-sidebar-content",
  ref: "sidebarContent"
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock("div", _hoisted_1, [createVNode("div", {
    "class": "fm-sidebar-list",
    style: {
      'width': $props.sidebarWidth + 'px'
    },
    ref: "sidebarList"
  }, [(openBlock(true), createBlock(Fragment, null, renderList($setup.menus, function (item, index) {
    return openBlock(), createBlock("div", {
      "class": ["fm-sidebar-item", {
        'fm-sidebar-item-active': $setup.currentName == item.name
      }],
      key: index,
      onClick: function onClick($event) {
        return $setup.sidebarClick(item, index);
      },
      ref: $setup.sidebarItemRef
    }, [createVNode("span", _hoisted_2, toDisplayString(item.title), 1
    /* TEXT */
    )], 10
    /* CLASS, PROPS */
    , ["onClick"]);
  }), 128
  /* KEYED_FRAGMENT */
  ))], 4
  /* STYLE */
  ), createVNode("div", _hoisted_3, [renderSlot(_ctx.$slots, "default")], 512
  /* NEED_PATCH */
  )]);
}

script.render = render;
script.__file = "packages/sidebar/src/sidebar.vue";

var script$1 = {
  name: 'fm-sidebar-item',
  props: {
    title: {
      type: String
    },
    name: {
      type: [String, Number]
    }
  },
  setup: function setup(props, _ref) {
    var emit = _ref.emit;
    var rootSideBar = inject('rootSidebar');
    var internalInstance = getCurrentInstance();
    var root = ref(null);
    onBeforeMount(function () {
      rootSideBar.addPane(internalInstance, root.value);
    });
    onMounted(function () {// console.log(root.value)
    });
    onUnmounted(function () {
      rootSideBar.removePane(internalInstance, root.value);
    });
    var active = computed(function () {
      var itemActive = rootSideBar.currentName.value === props.name;
      return itemActive;
    });
    return {
      active: active,
      root: root
    };
  }
};

function render$1(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock("div", {
    "class": ["fm-sidebar-pane", {
      'fm-sidebar-pane-active': $setup.active
    }],
    ref: "root"
  }, [renderSlot(_ctx.$slots, "default")], 2
  /* CLASS */
  );
}

script$1.render = render$1;
script$1.__file = "packages/sidebar/src/sidebar-item.vue";

script.install = function (app) {
  app.component(script.name, script);
};

script$1.install = function (app) {
  app.component(script$1.name, script$1);
};

export default script;
export { script as Sidebar, script$1 as SidebarItem };
