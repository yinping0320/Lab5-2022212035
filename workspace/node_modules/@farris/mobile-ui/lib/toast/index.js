import { defineComponent, openBlock, createBlock, createCommentVNode, createVNode, toDisplayString } from 'vue';
import { inBrowser, isObject } from '../utils';
import { mountComponent, usePopupState } from '../hook';

var script = defineComponent({
  name: 'fm-toast',
  props: {
    show: {
      type: Boolean,
      "default": false
    },
    type: {
      type: String,
      "default": 'info',
      validator: function validator(value) {
        // 这个值必须匹配下列字符串中的一个
        return ['success', 'warning', 'error', 'info', 'default', "loading"].indexOf(value) !== -1;
      }
    },
    position: {
      type: String,
      "default": 'middle'
    },
    message: String,
    duration: {
      type: Number,
      "default": 3000
    },
    className: String
  } // data() {
  //   return {
  //     visible: false
  //   }
  // },
  // beforeDestroy() {
  //   if (this.$_timer) {
  //     clearTimeout(this.$_timer);
  //   }
  // },
  // deactivated() {
  //   if (this.$_timer) {
  //     clearTimeout(this.$_timer);
  //   }
  // },
  // methods: {
  //   showToast() {
  //     this.visible = true;
  //     this.fire();
  //   },
  //   hideToast() {
  //     this.visible = false;
  //   },
  //   /**
  //    * toast计时
  //    */
  //   fire() {
  //     if (this.$_timer) {
  //       clearTimeout(this.$_timer)
  //     }
  //     if (this.visible && this.duration) {
  //       this.$_timer = setTimeout(() => {
  //         this.hideToast();
  //       }, this.duration)
  //     }
  //   }
  // }

});

const _hoisted_1 = {
  key: 1,
  class: "fm-toast-loading-icon"
};
const _hoisted_2 = /*#__PURE__*/createVNode("svg", {
  viewBox: "25 25 50 50",
  class: "fm-toast-loading-icon-circular",
  style: {"color":"#fff"}
}, [
  /*#__PURE__*/createVNode("circle", {
    cx: "50",
    cy: "50",
    r: "20",
    fill: "none"
  })
], -1 /* HOISTED */);
const _hoisted_3 = { class: "fm-toast-text" };

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return (_ctx.show)
    ? (openBlock(), createBlock("div", {
        key: 0,
        class: ["fm-toast", ['fm-toast-' + this.type, 'fm-toast-' + this.position, _ctx.className]]
      }, [
        (this.type == 'success' || this.type == 'error' || this.type == 'warning' || this.type == 'info')
          ? (openBlock(), createBlock("span", {
              key: 0,
              class: ["fm-toast-icon fm-icon", {
      'fm-icon-successfulhints': this.type == 'success',
      'fm-icon-failureprompt': this.type == 'error',
      'fm-icon-warningmessage': (this.type == 'warning' || this.type == 'info')
    }]
            }, null, 2 /* CLASS */))
          : createCommentVNode("v-if", true),
        (this.type == 'loading')
          ? (openBlock(), createBlock("span", _hoisted_1, [
              _hoisted_2
            ]))
          : createCommentVNode("v-if", true),
        createVNode("span", _hoisted_3, toDisplayString(_ctx.message), 1 /* TEXT */)
      ], 2 /* CLASS */))
    : createCommentVNode("v-if", true)
}

script.render = render;
script.__file = "packages/toast/src/toast.vue";

var instance;
var timer;

function defaultOptions() {
  return {
    type: 'default',
    message: '',
    duration: 3000,
    position: 'middle'
  };
}

function parseOptions(message) {
  return isObject(message) ? message : {
    message: message
  };
}

var initInstance = function initInstance() {

  var _mountComponent = mountComponent({
    setup: function setup() {
      var _usePopupState = usePopupState(),
          state = _usePopupState.state,
          toggle = _usePopupState.toggle;

      return function () {
        return createVNode(script, Object.assign(Object.assign({}, state), {
          'onUpdate:show': toggle
        }), null);
      };
    }
  });

  instance = _mountComponent.instance;
};

function Toast(options) {
  if (!inBrowser) {
    return;
  }

  if (!instance) {
    initInstance();
  }

  options = Object.assign(Object.assign({}, Toast.currentOptions), parseOptions(options));
  instance.open(options);
  clearTimeout(timer);

  if (options.duration > 0) {
    timer = setTimeout(Toast.clear, options.duration);
  }

  return instance;
}

Toast.clear = function () {
  if (instance) {
    instance.toggle(false);
  }
};

Toast.info = function (options) {
  Toast.resetDefaultOptions();
  return Toast(Object.assign(Object.assign({}, parseOptions(options)), {
    type: 'info'
  }));
};

Toast.success = function (options) {
  Toast.resetDefaultOptions();
  return Toast(Object.assign(Object.assign({}, parseOptions(options)), {
    type: 'success'
  }));
};

Toast.error = function (options) {
  Toast.resetDefaultOptions();
  return Toast(Object.assign(Object.assign({}, parseOptions(options)), {
    type: 'error'
  }));
};

Toast.warning = function (options) {
  Toast.resetDefaultOptions();
  return Toast(Object.assign(Object.assign({}, parseOptions(options)), {
    type: 'warning'
  }));
};

Toast.loading = function (options) {
  Toast.resetDefaultOptions();
  return Toast(Object.assign(Object.assign({}, parseOptions(options)), {
    type: 'loading',
    duration: 0
  }));
};

Toast.currentOptions = defaultOptions();

Toast.setDefaultOptions = function (options) {
  Object.assign(Toast.currentOptions, options);
};

Toast.resetDefaultOptions = function () {
  Toast.currentOptions = defaultOptions();
};

Toast.install = function (app) {
  app.component(script.name, script);
  app.config.globalProperties.$toast = Toast;
};

Toast.Component = script;

export default Toast;
export { Toast };
