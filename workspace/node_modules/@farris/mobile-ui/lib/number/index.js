import { resolveComponent, openBlock, createBlock, createCommentVNode, createVNode, createTextVNode, toDisplayString } from 'vue';

var script = {
  name: 'fm-number',
  mounted: function mounted() {
    var nextEle = this.$el.nextElementSibling;
    this.ifHaveBottomBorder = nextEle && (nextEle.classList.contains('van-cell') || nextEle.classList.contains('number-field')) ? {
      'border-bottom': '1px solid #f4f4f4'
    } : {};
    this.innerValue = this.format(this.innerValue);
    this.innerValue = this.precisionHandler(this.innerValue);
  },
  props: {
    modelValue: {
      type: Number
    },
    name: {
      type: String
    },
    label: {
      type: String
    },
    disabled: {
      type: Boolean,
      "default": false
    },
    readonly: {
      type: Boolean,
      "default": false
    },
    required: {
      type: Boolean,
      "default": false
    },
    placeholder: {
      type: String
    },
    step: {
      type: Number,
      "default": 0
    },
    maxValue: {
      type: Number,
      "default": Number.MAX_VALUE
    },
    minValue: {
      type: Number,
      "default": -1 * Number.MAX_VALUE
    },
    enableThousands: {
      type: Boolean,
      "default": false
    },
    precision: {
      type: Number,
      "default": -1,
      validator: function validator(p) {
        return p === parseInt(p) && p >= -1;
      }
    },
    prefix: {
      type: String,
      "default": ''
    },
    suffix: {
      type: String,
      "default": ''
    },
    inputAlign: {
      type: String,
      "default": 'right'
    },
    errorMessage: String,
    errorMessageAlign: String
  },
  data: function data() {
    return {
      innerValue: this.modelValue ? String(this.initValue(this.modelValue)) : '',
      ifHaveBottomBorder: {},
      minusDisable: false,
      plusDisable: false
    };
  },
  computed: {
    styles: function styles() {
      var title, minusLabel, prefix, content, suffix, plusLabel;
      title = this.label ? 22 : 0;
      minusLabel = plusLabel = this.step ? 14 : 0;
      prefix = this.prefix ? 14 : 0;
      suffix = this.suffix ? 14 : 0;
      content = 100 - title - minusLabel - plusLabel - prefix - suffix;
      var ratios = {
        title: title,
        minusLabel: minusLabel,
        prefix: prefix,
        content: content,
        suffix: suffix,
        plusLabel: plusLabel
      };
      var rtnObj = {};

      for (var i in ratios) {
        var _rtnObj$i;

        rtnObj[i] = (_rtnObj$i = {
          width: ratios[i] + '%',
          display: 'inline-block',
          'align-items': 'center'
        }, _rtnObj$i["display"] = 'flex', _rtnObj$i);
      }

      return rtnObj;
    }
  },
  watch: {
    value: function value(v) {
      this.innerValue = v === null ? '' : String(this.initValue(v));
    }
  },
  methods: {
    format: function format(value) {
      if (!this.enableThousands) {
        return value;
      }

      var minus = '';

      if (value[0] === '-') {
        minus = '-';
        value = value.slice(1);
      }

      if (value.length === 0) return minus + '';
      if (value.length === 1 && value[0] === '.') return minus + '.';

      var _value$split = value.split('.'),
          intenger = _value$split[0],
          fraction = _value$split[1];

      intenger = intenger.split('').reverse().reduce(function (pre, cur, index) {
        return index % 3 === 0 ? cur + ',' + pre : cur + pre;
      });
      if (!fraction) return minus + intenger;
      fraction = fraction.split('').reduce(function (pre, cur, index) {
        return index % 3 === 0 ? pre + ',' + cur : pre + cur;
      });
      return minus + intenger + '.' + fraction;
    },
    unformat: function unformat(value) {
      return value.replace(/,/g, '');
    },
    charValidator: function charValidator(value) {
      if (value == '') return value;
      return /^-?[0-9]*\.?[0-9]*$/.test(value) ? value : this.innerValue;
    },
    rangeValidator: function rangeValidator(value) {
      if (Number(value) >= this.maxValue) {
        value = this.maxValue.toString();
        console.log(value);
        this.plusDisable = true;
      } else if (Number(value) <= this.minValue) {
        value = this.minValue.toString();
        this.minusDisable = true;
      } else {
        this.plusDisable = false;
        this.minusDisable = false;
      }

      return value;
    },
    precisionHandler: function precisionHandler(value) {
      if (this.precision >= 0) {
        value = Math.round(Math.pow(10, this.precision) * Number(value)) / Math.pow(10, this.precision);
        value = value.toString();

        if (this.precision === 0) {
          value = value.split('.')[0];
        } else {
          if (!value.includes('.')) value = value + '.';
          var length = value.indexOf('.') + this.precision;
          value = value.slice(0, length + 1);

          for (var i = value.length; i < length + 1; i++) {
            value = value + '0';
          }
        }
      }

      return value;
    },
    input: function input(event) {
      var v = this.charValidator(event);
      console.log(v);

      if (Number(v) === Number(this.innerValue) //消除诸如'1q'这样的输入，需要一次强制更新把q字符删掉
      ) {
          this.innerValue = v;
          this.$emit('update:modelValue', v === '' ? null : Number(v));
        } else if (isNaN(Number(v)) //只要是NaN，就说明是-和.的问题，用户还未输入完全，不往外抛input事件
      ) {
          this.innerValue = v;
          this.$forceUpdate();
        } else {
        console.log(v);
        this.$emit('update:modelValue', v === '' ? null : Number(v));
      }
    },
    change: function change(event) {
      var v = this.rangeValidator(event.target.value);

      if (isNaN(Number(v)) //带有.或-符号未输入完全，可能导致NaN的情况，不会向外抛出change事件
      ) {
          return;
        }

      v = this.precisionHandler(v);
      this.innerValue = v;
      this.$emit('change', v === '' ? null : Number(v));
    },
    focus: function focus() {
      this.innerValue = this.unformat(this.innerValue);
      this.$emit('focus');
    },
    blur: function blur() {
      this.innerValue = this.format(this.innerValue);
      this.$emit('blur');
    },
    minus: function minus() {
      var v = Number(this.unformat(this.innerValue)) - this.step;
      v = v.toString();
      v = this.rangeValidator(v);
      this.innerValue = this.format(v);
      this.$emit('update:modelValue', Number(v));
      this.$emit('change', Number(v));
    },
    plus: function plus() {
      var v = Number(this.unformat(this.innerValue)) + this.step;
      v = v.toString();
      v = this.rangeValidator(v);
      this.innerValue = this.format(v);
      this.$emit('update:modelValue', Number(v));
      this.$emit('change', Number(v));
    },
    initValue: function initValue(value) {
      return Number.isNaN(Number(value)) ? '' : Number(value);
    }
  }
};

const _hoisted_1 = {
  key: 0,
  class: "fm-number-field-label"
};
const _hoisted_2 = { class: "fm-number-field-title" };
const _hoisted_3 = {
  key: 0,
  class: "fm-number-required-tip"
};
const _hoisted_4 = { class: "fm-number-field-inner" };
const _hoisted_5 = /*#__PURE__*/createTextVNode(" - ");
const _hoisted_6 = { class: "fm-number-field-content" };
const _hoisted_7 = {
  key: 0,
  class: "fm-number-field-fix fm-number-field-fix-pre"
};
const _hoisted_8 = {
  key: 1,
  class: "fm-number-field-fix fm-number-field-fix-suf"
};
const _hoisted_9 = /*#__PURE__*/createTextVNode(" + ");

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_van_field = resolveComponent("van-field");

  return (openBlock(), createBlock("div", {
    class: ["fm-number-field", {'fm-number-field-required': $props.required}]
  }, [
    ($props.label)
      ? (openBlock(), createBlock("div", _hoisted_1, [
          createCommentVNode(" <span class=\"required\" v-if=\"required\">*</span> :style=\"styles.title\" "),
          createVNode("div", _hoisted_2, [
            createTextVNode(toDisplayString($props.label), 1 /* TEXT */),
            ($props.required)
              ? (openBlock(), createBlock("span", _hoisted_3, "*"))
              : createCommentVNode("v-if", true)
          ])
        ]))
      : createCommentVNode("v-if", true),
    createVNode("div", _hoisted_4, [
      ($props.step)
        ? (openBlock(), createBlock("div", {
            key: 0,
            class: ["fm-number-field-btn fm-number-field-btn-minus", {'fm-number-field-btn-disabled': $data.minusDisable}],
            onClick: _cache[1] || (_cache[1] = $event => ($options.minus()))
          }, [
            createCommentVNode(" label-parent "),
            createCommentVNode(" <input type=\"button\" class=\"label-button\" @click=\"minus\" value=\"-\"> "),
            _hoisted_5
          ], 2 /* CLASS */))
        : createCommentVNode("v-if", true),
      createVNode("div", _hoisted_6, [
        ($props.prefix)
          ? (openBlock(), createBlock("div", _hoisted_7, toDisplayString($props.prefix), 1 /* TEXT */))
          : createCommentVNode("v-if", true),
        createVNode(_component_van_field, {
          "input-align": $props.inputAlign,
          value: $data.innerValue,
          name: $props.name,
          disabled: $props.disabled,
          readonly: $props.readonly,
          placeholder: $props.placeholder,
          "error-message-align": $props.errorMessageAlign,
          "error-message": $props.errorMessage,
          onInput: $options.input,
          onChange: $options.change,
          onFocus: $options.focus,
          onBlur: $options.blur
        }, null, 8 /* PROPS */, ["input-align", "value", "name", "disabled", "readonly", "placeholder", "error-message-align", "error-message", "onInput", "onChange", "onFocus", "onBlur"]),
        ($props.suffix)
          ? (openBlock(), createBlock("div", _hoisted_8, toDisplayString($props.suffix), 1 /* TEXT */))
          : createCommentVNode("v-if", true)
      ]),
      createCommentVNode(" <div class=\"fm-number-field-fix fm-number-field-fix-pre\"  v-if=\"prefix\">\r\n            <div class=\"fix\">{{prefix}}</div>\r\n        </div> "),
      createCommentVNode(" <div class=\"fm-number-field-content\">\r\n            <van-field\r\n            input-align=\"right\"\r\n            :value=\"innerValue\"\r\n            :name=\"name\"\r\n            :disabled=\"disabled\"\r\n            :readonly=\"readonly\"\r\n            :placeholder=\"placeholder\"\r\n            @input=\"input\"\r\n            @change=\"change\"\r\n            @focus=\"focus\"\r\n            @blur=\"blur\"\r\n            />\r\n        </div>\r\n        <div class=\"fm-number-field-fix fm-number-field-fix-suf\" v-if=\"suffix\">\r\n            <div class=\"fix\">{{suffix}}</div>\r\n        </div> "),
      ($props.step)
        ? (openBlock(), createBlock("div", {
            key: 1,
            class: ["fm-number-field-btn fm-number-field-btn-plus", {'fm-number-field-btn-disabled': $data.plusDisable}],
            onClick: _cache[2] || (_cache[2] = $event => ($options.plus()))
          }, [
            createCommentVNode(" <input type=\"button\" class=\"label-button\" @click=\"plus\" value=\"+\"> "),
            _hoisted_9
          ], 2 /* CLASS */))
        : createCommentVNode("v-if", true)
    ])
  ], 2 /* CLASS */))
}

script.render = render;
script.__file = "packages/number/src/index.vue";

script.install = function (Vue) {
  Vue.component(script.name, script);
};

export default script;
