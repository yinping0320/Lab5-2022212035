import { defineComponent, ref, inject, watch, computed, createVNode, resolveComponent, mergeProps, isVNode } from 'vue';
import 'dayjs';
import '@vue/compiler-core';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
function __rest(s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}

var isArray = Array.isArray;
function isObject(val) {
  return val !== null && typeof val === 'object';
}

function makeMap(str, expectsLowerCase) {
  if (expectsLowerCase === void 0) {
    expectsLowerCase = false;
  }

  var map = Object.create(null);
  var list = str.split(',');

  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }

  return expectsLowerCase ? function (val) {
    return !!map[val.toLowerCase()];
  } : function (val) {
    return !!map[val];
  };
}
var getValue = function getValue(field, data, safe) {
  if (safe === void 0) {
    safe = false;
  }

  if (!data) {
    return '';
  }

  var resultVal = '';

  if (field.indexOf('.') === -1) {
    resultVal = data[field];
  } else {
    resultVal = field.split('.').reduce(function (obj, key) {
      if (obj) {
        return obj[key];
      } else {
        return null;
      }
    }, data);
  }

  if (safe) {
    return formatterValue(resultVal);
  } else {
    return resultVal;
  }
};
var escapeHtml = function escapeHtml(str) {
  return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/\'/g, '&#39;').replace(/\//g, '&#x2F;');
};

var formatterValue = function formatterValue(val) {
  if (val === null || val === undefined || val === '') {
    return '';
  }

  if (typeof val === 'string') {
    return escapeHtml(val);
  }

  return val;
};

var HTML_TAGS = 'html,body,base,head,link,meta,style,title,address,article,aside,footer,' + 'header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,' + 'figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,' + 'data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,' + 'time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,' + 'canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,' + 'th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,' + 'option,output,progress,select,textarea,details,dialog,menu,' + 'summary,template,blockquote,iframe,tfoot';
var isHTMLTag = makeMap(HTML_TAGS);

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}

var Picker = defineComponent({
  name: 'fm-picker',
  inheritAttrs: false,
  props: {
    modelValue: [String, Number, Boolean],
    placeholder: {
      type: String,
      "default": '点击选择'
    },
    readonly: {
      type: Boolean,
      "default": false
    },
    disabled: {
      type: Boolean,
      "default": false
    },
    valueField: {
      type: String,
      "default": 'value'
    },
    textField: {
      type: String,
      "default": 'text'
    },
    childrenField: {
      type: String,
      "default": 'children'
    },
    mapFields: Object,
    data: {
      type: [Array, Object],
      "default": function _default() {
        return [];
      }
    },
    rightIcon: {
      type: [String, Boolean],
      "default": 's-arrow'
    }
  },
  setup: function setup(props, _ref) {
    var attrs = _ref.attrs,
        emit = _ref.emit,
        slots = _ref.slots;
    var enableShow = ref(false);
    var lookupMappingFn = inject('LookupMappingFn', null);

    var getInnerValue = function getInnerValue(value) {
      if (value && props.data && props.data.length > 0) {
        var target = props.data.find(function (el) {
          return getValue(props.valueField, el) === value;
        });
        return getValue(props.textField, target);
      }

      return props.modelValue;
    };

    var innerValue = ref(getInnerValue(props.modelValue));
    watch(function () {
      return props.modelValue;
    }, function (value) {
      innerValue.value = getInnerValue(value);
    });

    var getColumns = function getColumns(data) {
      console.log('getColumns');

      if (isArray(data)) {
        return data.map(function (item) {
          var children = undefined;

          if (item[props.childrenField]) {
            children = getColumns(item[props.childrenField]);
            return {
              text: item[props.textField],
              children: children
            };
          }

          return item[props.textField];
        });
      } else if (isObject(data)) {
        return Object.keys(data).map(function (key) {
          var values = getColumns(data[key]);
          return {
            values: values
          };
        });
      }
    };

    var columns = ref(getColumns(props.data));
    watch(function () {
      return props.data;
    }, function (data) {
      columns.value = getColumns(data);
      console.log(columns.value);
    });
    var isEditable = computed(function () {
      return !(props.readonly || props.disabled);
    });

    var handleClick = function handleClick(event) {
      if (!isEditable.value) {
        return;
      }

      emit('click', event);
      enableShow.value = true;
    };

    var getValueByIndex = function getValueByIndex(field, index) {
      if (isArray(index)) {
        if (isArray(props.data)) {
          var data = props.data;
          return index.map(function (i) {
            var result = getValue(field, data ? data[i] : {});
            data = data[i][props.childrenField];
            return result;
          }).pop();
        } else if (isObject(props.data)) {
          var keyIndex = 0;
          return index.map(function (i) {
            var result = getValue(field, props.data ? props.data[keyIndex][i] : {});
            keyIndex++;
            return result;
          }).join('-');
        }
      } else {
        return getValue(field, props.data ? props.data[index] : {});
      }
    };

    var handleConfirm = function handleConfirm(value, index) {
      enableShow.value = false;
      innerValue.value = getValueByIndex(props.textField, index);
      var newValue = getValueByIndex(props.valueField, index);
      emit('change', newValue);
      emit('update:modelValue', newValue);
      lookupMappingFn && lookupMappingFn.mapFields && lookupMappingFn.mapFields(props.data ? props.data[index] : {}, props.mapFields);
    };

    var renderInput = function renderInput(fieldProps) {
      return createVNode("div", {
        "class": "fm-picker-input",
        "onClick": handleClick
      }, [slots.input ? slots.input(Object.assign(Object.assign({}, fieldProps), {
        modelValue: innerValue.value
      })) : createVNode(resolveComponent("fm-input"), mergeProps({
        "modelValue": innerValue.value
      }, fieldProps), _extends({}, slots))]);
    };

    return function () {
      var _slot;

      var name = attrs.name,
          label = attrs.label,
          _attrs$required = attrs.required,
          required = _attrs$required === void 0 ? false : _attrs$required,
          _attrs$inputAlign = attrs.inputAlign,
          inputAlign = _attrs$inputAlign === void 0 ? 'right' : _attrs$inputAlign,
          errorMessage = attrs['error-message'],
          errorMessageAlign = attrs['error-message-align'],
          onClick = attrs.onClick,
          onConfirm = attrs.onConfirm,
          onCancel = attrs.onCancel,
          onFocus = attrs.onFocus,
          onClear = attrs.onClear,
          onChange = attrs.onChange,
          slotAttrs = __rest(attrs, ["name", "label", "required", "inputAlign", 'error-message', 'error-message-align', "onClick", "onConfirm", "onCancel", "onFocus", "onClear", "onChange"]);

      var fieldProps = {
        editable: false,
        clickable: isEditable.value,
        readonly: props.readonly,
        disabled: props.disabled,
        name: name,
        label: label,
        placeholder: props.placeholder,
        required: required,
        inputAlign: inputAlign,
        errorMessage: errorMessage,
        errorMessageAlign: errorMessageAlign,
        onFocus: onFocus,
        onClear: onClear,
        rightIcon: isEditable.value ? props.rightIcon : ''
      };
      var slotProps = Object.assign(Object.assign({}, slotAttrs), {
        onConfirm: handleConfirm,
        onCancel: function onCancel() {
          return enableShow.value = false, emit('cancel');
        }
      });
      return createVNode("div", {
        "class": "fm-picker"
      }, [createVNode(resolveComponent("fm-popup"), {
        "show": enableShow.value,
        "onUpdate:show": function onUpdateShow($event) {
          return enableShow.value = $event;
        },
        "position": "bottom"
      }, _isSlot(_slot = createVNode(resolveComponent("van-picker"), mergeProps(slotProps, {
        "columns": columns.value,
        "class": "fm-picker-panel"
      }), null)) ? _slot : {
        "default": function _default() {
          return [_slot];
        }
      }), renderInput(fieldProps)]);
    };
  }
});

Picker.install = function (app) {
  app.component(Picker.name, Picker);
};

export default Picker;
export { Picker };
