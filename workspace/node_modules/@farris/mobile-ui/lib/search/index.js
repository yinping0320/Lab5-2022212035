import Input from '../input';
import { preventDefault } from '../utils';
import { ref, watch, resolveComponent, openBlock, createBlock, renderSlot, createVNode, createTextVNode, toDisplayString, createCommentVNode, withCtx } from 'vue';

var _components;
var script = {
  name: 'fm-search',
  components: (_components = {}, _components[Input.name] = Input, _components),
  props: {
    label: {
      type: String
    },
    actionText: {
      type: String
    },
    shape: {
      type: String,
      "default": 'round'
    },
    modelValue: {
      type: String
    },
    clearable: {
      type: Boolean,
      "default": true
    },
    background: {
      type: String
    },
    showAction: {
      type: Boolean,
      "default": false
    },
    placeholder: {
      type: String,
      "default": '请输入搜索关键词'
    },
    inputAlign: {
      type: String,
      "default": 'left'
    },
    disabled: {
      type: Boolean,
      "default": false
    },
    readonly: {
      type: Boolean,
      "default": false
    }
  },
  setup: function setup(props, _ref) {
    var emit = _ref.emit;
    var innerValue = ref(props.modelValue);
    watch(function () {
      return props.modelValue;
    }, function (value) {
      innerValue.value = value;
    });

    var onInput = function onInput(event) {
      emit('input', event);
    };

    var onFocus = function onFocus(event) {
      emit('focus', event);
    };

    var onBlur = function onBlur(event) {
      emit('blur', event);
    };

    var onClear = function onClear(event) {
      emit('clear', event);
    };

    var onCancel = function onCancel(event) {
      emit('cancel', event);
    };

    var onKeypress = function onKeypress(event) {
      if (event.code === 'Enter') {
        preventDefault(event);
        emit('search', innerValue.value);
      }

      emit('keypress', event);
    };

    var onUpdateModelValue = function onUpdateModelValue(event) {
      emit('update:modelValue', event);
    };

    return {
      innerValue: innerValue,
      onInput: onInput,
      onFocus: onFocus,
      onBlur: onBlur,
      onClear: onClear,
      onCancel: onCancel,
      onKeypress: onKeypress,
      onUpdateModelValue: onUpdateModelValue
    };
  }
};

const _hoisted_1 = {
  key: 0,
  class: "fm-search-label"
};
const _hoisted_2 = { class: "fm-search-left-icon" };
const _hoisted_3 = /*#__PURE__*/createVNode("span", { class: "fm-icon fm-icon-s-search-o" }, null, -1 /* HOISTED */);
const _hoisted_4 = {
  key: 0,
  class: "fm-search-action"
};
const _hoisted_5 = {
  key: 0,
  class: "fm-search-action-text"
};

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_fm_input = resolveComponent("fm-input");

  return (openBlock(), createBlock("div", {
    class: "fm-search",
    style: {'background': $props.background}
  }, [
    renderSlot(_ctx.$slots, "left"),
    createVNode("div", {
      class: ["fm-search-content", ['fm-search-content-'+ $props.shape]]
    }, [
      (_ctx.$slots.label || $props.label)
        ? (openBlock(), createBlock("div", _hoisted_1, [
            renderSlot(_ctx.$slots, "label", {}, () => [
              createTextVNode(toDisplayString($props.label), 1 /* TEXT */)
            ])
          ]))
        : createCommentVNode("v-if", true),
      createVNode(_component_fm_input, {
        class: "fm-no-hairline",
        type: "text",
        modelValue: $setup.innerValue,
        "onUpdate:modelValue": [
          _cache[1] || (_cache[1] = $event => ($setup.innerValue = $event)),
          $setup.onUpdateModelValue
        ],
        clearable: $props.clearable,
        placeholder: $props.placeholder,
        inputAlign: $props.inputAlign,
        disabled: $props.disabled,
        readonly: $props.readonly,
        onInput: $setup.onInput,
        onFocus: $setup.onFocus,
        onBlur: $setup.onBlur,
        onClear: $setup.onClear,
        onKeypress: $setup.onKeypress
      }, {
        "left-icon": withCtx(() => [
          createVNode("div", _hoisted_2, [
            renderSlot(_ctx.$slots, "lefticon", {}, () => [
              _hoisted_3
            ])
          ])
        ]),
        _: 1 /* STABLE */
      }, 8 /* PROPS */, ["modelValue", "clearable", "placeholder", "inputAlign", "disabled", "readonly", "onInput", "onFocus", "onBlur", "onClear", "onKeypress", "onUpdate:modelValue"])
    ], 2 /* CLASS */),
    ($props.showAction)
      ? (openBlock(), createBlock("div", _hoisted_4, [
          renderSlot(_ctx.$slots, "action", {}, () => [
            ($props.actionText)
              ? (openBlock(), createBlock("span", _hoisted_5, toDisplayString($props.actionText), 1 /* TEXT */))
              : (openBlock(), createBlock("span", {
                  key: 1,
                  class: "fm-search-action-cancel",
                  onClick: _cache[2] || (_cache[2] = (...args) => ($setup.onCancel && $setup.onCancel(...args)))
                }, "取消"))
          ])
        ]))
      : createCommentVNode("v-if", true)
  ], 4 /* STYLE */))
}

script.render = render;
script.__file = "packages/search/src/index.vue";

script.install = function (app) {
  app.component(script.name, script);
};

export default script;
export { script as Search };
