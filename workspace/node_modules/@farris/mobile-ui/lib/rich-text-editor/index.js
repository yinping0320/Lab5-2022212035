import Quill from 'quill';
import { defineComponent, inject, ref, watch, unref, resolveComponent, openBlock, createBlock, createVNode, withModifiers, Fragment, renderList, createStaticVNode, provide, onMounted, onUnmounted, withDirectives, vShow, createCommentVNode } from 'vue';
import { useClickAway } from '../hook';
import { isDef } from '../utils';

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

var Parchment = Quill["import"]('parchment');
var SizeStyle = new Parchment.Attributor.Style('customSize', 'font-size', {
  scope: Parchment.Scope.INLINE
});

var ColorAttributor = /*#__PURE__*/function (_Parchment$Attributor) {
  _inheritsLoose(ColorAttributor, _Parchment$Attributor);

  function ColorAttributor(format, type, value) {
    return _Parchment$Attributor.call(this, format, type, value) || this;
  }

  var _proto = ColorAttributor.prototype;

  _proto.value = function value(domNode) {
    var value = _Parchment$Attributor.prototype.value.call(this, domNode);

    if (!value.startsWith('rgb(')) return value;
    value = value.replace(/^[^\d]+/, '').replace(/[^\d]+$/, '');
    return '#' + value.split(',').map(function (component) {
      return ('00' + parseInt(component).toString(16)).slice(-2);
    }).join('');
  };

  return ColorAttributor;
}(Parchment.Attributor.Style);

var ColorStyle = new ColorAttributor('customColor', 'color', {
  scope: Parchment.Scope.INLINE
});
Quill.register('formats/customSize', SizeStyle);
Quill.register('formats/customColor', ColorStyle);
var toolbarHandlers = {
  customColor: function customColor(value) {
    value = value === '#000000' ? '' : value;
    this.quill.format('customColor', value, 'user');
  },
  customSize: function customSize(value) {
    value = value.includes('px') ? value : value + 'px';
    this.quill.format('customSize', value, 'user');
  }
};
var quillToken = Symbol('quill');

var script = defineComponent({
  name: 'fm-editor-toolbar',
  props: {
    hasFocus: {
      type: Boolean,
      "default": false
    }
  },
  setup: function setup(props) {
    var quillRef = inject(quillToken, ref(null));

    var handlerSelectionChange = function handlerSelectionChange(range, old) {
      if (!range && old && props.hasFocus) {
        return;
      }

      var quill = unref(quillRef);
      range = range ? range : quill.getSelection(true);
      var formats = quill.getFormat(range);

      if (formats.hasOwnProperty('customSize')) {
        fontSize.value = Number(formats.customSize.slice(0, -2));
      } else {
        fontSize.value = 14;
      }

      if (formats.hasOwnProperty('customColor') || formats.hasOwnProperty('color')) {
        currentColor.value = formats.customColor ? formats.customColor : formats.color;
      } else {
        currentColor.value = '#000000';
      }
    };

    watch(quillRef, function (quill) {
      quill == null ? void 0 : quill.on('selection-change', handlerSelectionChange);
    });
    var colorList = ref(['#000000', '#e60000', '#ff9900', '#008a00', '#0066cc', '#9933ff']);
    var currentColor = ref('#000000');
    var fontSize = ref(14);
    var sliderRef = ref(null); // 创建事件

    var event = new Event('click');

    var dispatchEvent = function dispatchEvent() {
      var _sliderRef$value;

      // 触发事件
      (_sliderRef$value = sliderRef.value) == null ? void 0 : _sliderRef$value.dispatchEvent(event);
    };

    var handlerClick = function handlerClick() {
      var _sliderRef$value2;

      (_sliderRef$value2 = sliderRef.value) == null ? void 0 : _sliderRef$value2.setAttribute('value', String(fontSize.value));
      dispatchEvent();
    };

    return {
      fontSize: fontSize,
      colorList: colorList,
      currentColor: currentColor,
      handlerClick: handlerClick,
      dispatchEvent: dispatchEvent,
      sliderRef: sliderRef
    };
  }
});

var _hoisted_1 = {
  "class": "fm-editor-toobar",
  ref: "toolbarRef"
};

var _hoisted_2 = /*#__PURE__*/createStaticVNode("<div class=\"fm-editor-toobar-row\"><button class=\"ql-bold\"></button><button class=\"ql-italic\"></button><button class=\"ql-underline\"></button><button class=\"ql-strike\"></button><button class=\"ql-header\" value=\"1\"></button><button class=\"ql-header\" value=\"2\"></button></div><div class=\"fm-editor-toobar-row\"><button class=\"ql-list\" value=\"ordered\"></button><button class=\"ql-list\" value=\"bullet\"></button><button class=\"ql-indent\" value=\"-1\"></button><button class=\"ql-indent\" value=\"+1\"></button><button class=\"ql-script\" value=\"sub\"></button><button class=\"ql-script\" value=\"super\"></button></div>", 2);

var _hoisted_4 = {
  "class": "fm-editor-toobar-row"
};

var _hoisted_5 = /*#__PURE__*/createVNode("button", {
  style: {
    "width": "35px",
    "font-size": "12px"
  }
}, "Aa", -1
/* HOISTED */
);

var _hoisted_6 = /*#__PURE__*/createVNode("button", {
  style: {
    "width": "35px"
  }
}, "Aa", -1
/* HOISTED */
);

var _hoisted_7 = {
  "class": "fm-editor-toobar-row"
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_van_slider = resolveComponent("van-slider");

  return openBlock(), createBlock("div", _hoisted_1, [_hoisted_2, createVNode("div", _hoisted_4, [_hoisted_5, createVNode("div", {
    "class": "fm-editor-font-slider fm-custom-change ql-customSize",
    style: {
      "width": "100px"
    },
    ref: "sliderRef",
    value: _ctx.fontSize,
    onClick: _cache[2] || (_cache[2] = withModifiers(function () {}, ["stop"])),
    onMousedown: _cache[3] || (_cache[3] = withModifiers(function () {}, ["stop"])),
    onMouseup: _cache[4] || (_cache[4] = withModifiers(function () {}, ["stop"]))
  }, [createVNode(_component_van_slider, {
    modelValue: _ctx.fontSize,
    "onUpdate:modelValue": _cache[1] || (_cache[1] = function ($event) {
      return _ctx.fontSize = $event;
    }),
    min: "12",
    max: "24",
    step: "2",
    onDragEnd: _ctx.dispatchEvent,
    onClick: _ctx.handlerClick
  }, null, 8
  /* PROPS */
  , ["modelValue", "onDragEnd", "onClick"])], 40
  /* PROPS, HYDRATE_EVENTS */
  , ["value"]), _hoisted_6]), createVNode("div", _hoisted_7, [(openBlock(true), createBlock(Fragment, null, renderList(_ctx.colorList, function (color, index) {
    return openBlock(), createBlock("button", {
      "class": ["fm-toolbar-color ql-customColor", color === _ctx.currentColor ? 'fm-active' : ''],
      key: index,
      value: color,
      style: "background-color:" + color + ";",
      onClick: function onClick($event) {
        return _ctx.currentColor = color;
      }
    }, null, 14
    /* CLASS, STYLE, PROPS */
    , ["value", "onClick"]);
  }), 128
  /* KEYED_FRAGMENT */
  ))])], 512
  /* NEED_PATCH */
  );
}

script.render = render;
script.__file = "packages/rich-text-editor/src/toolbar.vue";

var _components;
var script$1 = {
  name: 'fm-rich-editor',
  components: (_components = {}, _components[script.name] = script, _components),
  props: {
    modelValue: {
      type: String,
      "default": ''
    },
    theme: {
      type: String,
      "default": 'snow'
    },
    placeholder: {
      type: String,
      "default": ''
    },
    position: {
      type: String,
      "default": 'bottom'
    },
    readonly: {
      type: Boolean,
      "default": false
    },
    debug: {
      type: Boolean,
      "default": false
    },
    border: {
      type: Boolean,
      "default": true
    }
  },
  setup: function setup(props, _ref) {
    var emit = _ref.emit;
    var rootRef = ref();
    var editorRef = ref();
    var toolbarRef = ref();
    var hasFocus = ref(false);
    var editorContent = null;
    var compositionStatus = 'end';
    var quill;
    var quillRef = ref(null);
    provide(quillToken, quillRef);
    watch(function () {
      return props.modelValue;
    }, function (html) {
      var range = quill.getSelection();
      setContents(html);
      range && quill.setSelection(range);
    });
    watch(function () {
      return props.readonly;
    }, function (value) {
      if (value) {
        quill.disable();
      } else {
        quill.enable();
      }
    });
    onMounted(function () {
      initEditor();
    });
    onUnmounted(function () {
      removeCompositionListener();
    }); // 初始化编辑器

    var initEditor = function initEditor() {
      var _unref, _editorEl$querySelect;

      var editorEl = unref(editorRef);

      if (!editorEl) {
        return;
      }

      quillRef.value = quill = new Quill(editorEl, {
        theme: props.theme,
        readOnly: props.readonly,
        debug: props.debug,
        placeholder: props.placeholder,
        modules: {
          toolbar: {
            container: unref(toolbarRef),
            handlers: toolbarHandlers
          }
        }
      });
      editorContent = (_unref = unref(editorRef)) == null ? void 0 : _unref.querySelector('.ql-editor');
      setContents(props.modelValue);
      addCompositionListener();
      quill.on('text-change', handlerTextChange);
      quill.on('blur', toggle(false));
      (_editorEl$querySelect = editorEl.querySelector('.ql-editor')) == null ? void 0 : _editorEl$querySelect.addEventListener('blur', function () {//console.log('blur');
        // toggle(false)
      });
    }; // 设置编辑器内容


    var setContents = function setContents(value) {
      if (!isDef(value)) {
        return;
      } // editorContent!.innerHTML = value


      var delta = quill.clipboard.convert(value);
      quill.setContents(delta);
    }; // 编辑器文本变化事件 处理输入中文时重复触发变更


    var handlerTextChange = function handlerTextChange() {
      if ((arguments.length <= 2 ? undefined : arguments[2]) === 'api') {
        return;
      }

      var html = editorContent.innerHTML;
      html !== props.modelValue && compositionStatus === 'end' && emit('update:modelValue', html);
    }; // 标记输入中文开始结束状态


    var addCompositionListener = function addCompositionListener() {
      var _editorContent, _editorContent2;

      (_editorContent = editorContent) == null ? void 0 : _editorContent.addEventListener('compositionstart', handlerCompositionstart);
      (_editorContent2 = editorContent) == null ? void 0 : _editorContent2.addEventListener('compositionend', handlerCompositionend);
    }; // 移除 composition 监听


    var removeCompositionListener = function removeCompositionListener() {
      var _editorContent3, _editorContent4;

      // console.log('removeCompositionStatus')
      (_editorContent3 = editorContent) == null ? void 0 : _editorContent3.removeEventListener('compositionstart', handlerCompositionstart);
      (_editorContent4 = editorContent) == null ? void 0 : _editorContent4.removeEventListener('compositionend', handlerCompositionend);
    }; // compositionstart 处理函数，方便取消监听


    var handlerCompositionstart = function handlerCompositionstart() {
      compositionStatus = 'start';
    }; // compositionend 处理函数，方便取消监听


    var handlerCompositionend = function handlerCompositionend() {
      compositionStatus = 'end';
      var html = editorContent.innerHTML;
      html !== props.modelValue && emit('update:modelValue', html);
    }; // 点击根元素外关闭工具栏


    useClickAway(rootRef, function () {
      hasFocus.value && toggle(false);
    });

    var toggle = function toggle(value) {
      if (props.readonly) {
        return;
      } // console.log(value);


      hasFocus.value = value;
    };

    return {
      rootRef: rootRef,
      editorRef: editorRef,
      toolbarRef: toolbarRef,
      hasFocus: hasFocus,
      toggle: toggle
    };
  }
};

var _hoisted_1$1 = {
  "class": "fm-editor",
  ref: "rootRef"
};
var _hoisted_2$1 = {
  ref: "toolbarRef"
};
function render$1(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock("div", _hoisted_1$1, [createVNode("div", {
    "class": ["fm-editor-main", {
      'fm-editor-no-border': !$props.border
    }],
    ref: "editorRef",
    onClick: _cache[1] || (_cache[1] = function ($event) {
      return $setup.toggle(true);
    })
  }, null, 2
  /* CLASS */
  ), withDirectives(createVNode("div", _hoisted_2$1, null, 512
  /* NEED_PATCH */
  ), [[vShow, false]]), createCommentVNode(" <fm-popup\r\n      v-model:show=\"hasFocus\"\r\n      :overlay=\"false\"\r\n      :radius=\"true\"\r\n      :position=\"position\"\r\n    >\r\n      <div class=\"fm-editor-toobar-wrapper\" ref=\"toolbarRef\">\r\n        <fm-editor-toolbar :hasFocus=\"hasFocus\"></fm-editor-toolbar>\r\n      </div>\r\n    </fm-popup> ")], 512
  /* NEED_PATCH */
  );
}

script$1.render = render$1;
script$1.__file = "packages/rich-text-editor/src/rich-text-editor.vue";

script$1.install = function (app) {
  app.component(script$1.name, script$1);
};

export default script$1;
export { script$1 as RichTextEditor };
