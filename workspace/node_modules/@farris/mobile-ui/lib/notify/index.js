import { defineComponent, computed, withDirectives, openBlock, createBlock, toDisplayString, vShow, createVNode } from 'vue';
import { inBrowser, isObject } from '../utils';
import { mountComponent, usePopupState } from '../hook';

var script = defineComponent({
  name: 'fm-notify',
  props: {
    show: {
      type: Boolean,
      "default": false
    },
    type: {
      type: String,
      //as PropType<'info' | 'success' | 'danger' | 'warning'>,
      "default": 'info'
    },
    color: {
      type: String,
      "default": '#fff'
    },
    message: {
      type: String
    },
    duration: {
      type: Number,
      "default": 3000
    },
    className: {
      type: String
    },
    background: {
      type: String
    }
  },
  emits: [''],
  setup: function setup(props, _ref) {
    var attrs = _ref.attrs,
        slots = _ref.slots,
        emit = _ref.emit;
    var style = computed(function () {
      return {
        color: props.color,
        background: props.background
      };
    });
    return {
      style: style
    };
  }
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return withDirectives((openBlock(), createBlock("div", {
    "class": ["fm-notify", ['fm-notify-' + this.type, _ctx.className]],
    style: _ctx.style
  }, toDisplayString(_ctx.message), 7
  /* TEXT, CLASS, STYLE */
  )), [[vShow, _ctx.show]]);
}

script.render = render;
script.__file = "packages/notify/src/notify.vue";

var instance;
var timer;

function defaultOptions() {
  return {
    type: 'info',
    message: '',
    duration: 3000,
    color: '#fff',
    background: ''
  };
}

function parseOptions(message) {
  return isObject(message) ? message : {
    message: message
  };
}

var initInstance = function initInstance() {

  var _mountComponent = mountComponent({
    setup: function setup() {
      var _usePopupState = usePopupState(),
          state = _usePopupState.state,
          toggle = _usePopupState.toggle;

      return function () {
        return createVNode(script, Object.assign(Object.assign({}, state), {
          'onUpdate:show': toggle
        }), null);
      };
    }
  });

  instance = _mountComponent.instance;
};

function Notify(options) {
  if (!inBrowser) {
    return;
  }

  if (!instance) {
    initInstance();
  }

  options = Object.assign(Object.assign({}, Notify.currentOptions), parseOptions(options));
  instance.open(options);
  clearTimeout(timer);

  if (options.duration > 0) {
    timer = setTimeout(Notify.clear, options.duration);
  }

  return instance;
}

Notify.clear = function () {
  if (instance) {
    instance.toggle(false);
  }
};

Notify.info = function (options) {
  Notify.resetDefaultOptions();
  return Notify(Object.assign(Object.assign({}, parseOptions(options)), {
    type: 'info'
  }));
};

Notify.success = function (options) {
  Notify.resetDefaultOptions();
  return Notify(Object.assign(Object.assign({}, parseOptions(options)), {
    type: 'success'
  }));
};

Notify.error = function (options) {
  Notify.resetDefaultOptions();
  return Notify(Object.assign(Object.assign({}, parseOptions(options)), {
    type: 'error'
  }));
};

Notify.warning = function (options) {
  Notify.resetDefaultOptions();
  return Notify(Object.assign(Object.assign({}, parseOptions(options)), {
    type: 'warning'
  }));
};

Notify.currentOptions = defaultOptions();

Notify.setDefaultOptions = function (options) {
  Object.assign(Notify.currentOptions, options);
};

Notify.resetDefaultOptions = function () {
  Notify.currentOptions = defaultOptions();
};

Notify.install = function (app) {
  app.component(script.name, script);
  app.config.globalProperties.$notify = Notify;
};

Notify.Component = script;

export default Notify;
export { Notify };
