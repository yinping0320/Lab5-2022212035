import TabBar from '../tab-bar';
import Icon from '../icon';
import { resolveComponent, openBlock, createBlock, renderSlot, createCommentVNode, createVNode, withCtx } from 'vue';

var _components;
var script = {
  name: 'fm-tabs',
  components: (_components = {}, _components[TabBar.name] = TabBar, _components[Icon.name] = Icon, _components),
  props: {
    value: String,
    border: {
      type: Boolean,
      "default": true
    },
    inkLength: {
      type: Number,
      "default": 100
    },
    immediate: Boolean,
    animated: {
      type: Boolean,
      "default": false
    },
    type: {
      type: String,
      "default": 'line'
    },
    fill: {
      type: Boolean,
      "default": false
    },
    lazyRender: {
      type: Boolean,
      "default": true
    }
  },
  data: function data() {
    return {
      currentName: this.value,
      prevIndex: 0,
      panes: [],
      tabBarClassName: 'fm-tab-bar-tabs'
    };
  },
  watch: {
    value: function value(val) {
      if (val !== this.currentName) {
        this.currentName = val;
      }
    }
  },
  computed: {
    menus: function menus() {
      return this.panes.map(function (pane) {
        return {
          name: pane.name,
          title: pane.title,
          disabled: pane.disabled,
          icon: pane.icon,
          iconColor: pane.iconColor,
          dot: pane.dot,
          badge: pane.badge,
          activeIcon: pane.activeIcon,
          activeIconColor: pane.activeIconColor,
          iconPrefix: pane.iconPrefix
        };
      });
    },
    currentIndex: function currentIndex() {
      for (var i = 0, len = this.menus.length; i < len; i++) {
        if (this.menus[i].name === this.currentName) {
          return i;
        }
      }

      return 0;
    }
  },
  provide: function provide() {
    return {
      rootTabs: this
    };
  },
  mounted: function mounted() {
    if (!this.currentName && this.menus.length) {
      this.currentName = this.menus[0].name;
    }
  },
  methods: {
    //tab切换
    $_handleTabClick: function $_handleTabClick(tab, index, prevIndex) {
      this.currentName = tab.name;
      this.prevIndex = prevIndex;
      this.$emit('input', tab.name);
      this.$emit('change', tab);
    },
    //添加tab
    $_addPane: function $_addPane(pane) {
      if (this.panes.indexOf(pane) === -1) {
        this.panes.push(pane);
      }
    },
    $_removePane: function $_removePane(pane) {
      var index = this.panes.indexOf(pane);

      if (index >= 0) {
        this.panes.splice(index, 1);
      }
    },
    resize: function resize() {
      this.$refs.tabBar.reflow();
    }
  }
};

const _hoisted_1 = {
  key: 0,
  class: "fm-tabs-content"
};
const _hoisted_2 = {
  key: 1,
  class: "fm-tabs-content"
};

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_fm_tab_bar = resolveComponent("fm-tab-bar");

  return (openBlock(), createBlock("div", {
    class: ["fm-tabs", {'fm-tabs-fill': $props.fill || $props.type === 'nav', 'fm-tabs-nav': $props.type === 'nav'}]
  }, [
    ($props.type === 'nav')
      ? (openBlock(), createBlock("div", _hoisted_1, [
          renderSlot(_ctx.$slots, "default")
        ]))
      : createCommentVNode("v-if", true),
    createVNode(_component_fm_tab_bar, {
      ref: "tabBar",
      items: $options.menus,
      value: $data.currentName,
      border: $props.type === 'line' && $props.border,
      "ink-length": $props.inkLength,
      immediate: $props.immediate,
      className: $data.tabBarClassName,
      type: $props.type,
      onChange: $options.$_handleTabClick
    }, {
      item: withCtx((props) => [
        renderSlot(_ctx.$slots, "title", {
          item: props.item,
          items: props.items,
          index: props.index,
          currentName: props.currentName
        })
      ]),
      _: 1 /* STABLE */
    }, 8 /* PROPS */, ["items", "value", "border", "ink-length", "immediate", "className", "type", "onChange"]),
    ($props.type !== 'nav')
      ? (openBlock(), createBlock("div", _hoisted_2, [
          renderSlot(_ctx.$slots, "default")
        ]))
      : createCommentVNode("v-if", true)
  ], 2 /* CLASS */))
}

script.render = render;
script.__file = "packages/tabs/src/index.vue";

script.install = function (app) {
  app.component(script.name, script);
};

export default script;
export { script as Tabs };
