import { resolveComponent, openBlock, createBlock, withCtx, createVNode } from 'vue';

var script = {
  name: 'fm-switch-cell',
  props: {
    modelValue: {
      type: Boolean || String,
      "default": false
    },
    disabled: {
      type: Boolean,
      "default": false
    },
    readonly: {
      type: Boolean,
      "default": false
    },
    required: {
      type: Boolean,
      "default": false
    },
    loading: {
      type: Boolean,
      "default": false
    },
    size: {
      type: Number,
      "default": 28
    },
    activeColor: {
      type: String
    },
    inactiveColor: {
      type: String
    },
    activeValue: {
      "default": true
    },
    inactiveValue: {
      "default": false
    },
    title: {
      type: String
    },
    border: {
      type: Boolean
    },
    errorMessage: String,
    errorMessageAlign: String
  },
  data: function data() {
    return {
      inValue: false
    };
  },
  mounted: function mounted() {
    this.inValue = this.modelValue;
  },
  watch: {
    modelValue: function modelValue(newValue) {
      this.inValue = newValue;
    }
  },
  methods: {
    change: function change(event) {
      this.inValue = event;
      var newValue = this.inValue ? this.activeValue : this.inactiveValue;
      this.$emit('change', newValue);
      this.$emit('update:modelValue', newValue);
    }
  }
};

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_fm_switch = resolveComponent("fm-switch");

  var _component_fm_input = resolveComponent("fm-input");

  return openBlock(), createBlock(_component_fm_input, {
    center: "",
    required: $props.required,
    label: $props.title,
    "input-align": "right",
    "error-message-align": $props.errorMessageAlign,
    "error-message": $props.errorMessage
  }, {
    input: withCtx(function () {
      return [createVNode(_component_fm_switch, {
        modelValue: $data.inValue,
        "onUpdate:modelValue": _cache[1] || (_cache[1] = function ($event) {
          return $data.inValue = $event;
        }),
        disabled: $props.disabled,
        readonly: $props.readonly,
        loading: $props.loading,
        size: $props.size,
        activeColor: $props.activeColor,
        inactiveColor: $props.inactiveColor,
        activeValue: $props.activeValue,
        inactiveValue: $props.inactiveValue,
        onChange: _cache[2] || (_cache[2] = function ($event) {
          return $options.change($event);
        })
      }, null, 8
      /* PROPS */
      , ["modelValue", "disabled", "readonly", "loading", "size", "activeColor", "inactiveColor", "activeValue", "inactiveValue"])];
    }),
    _: 1
    /* STABLE */

  }, 8
  /* PROPS */
  , ["required", "label", "error-message-align", "error-message"]);
}

script.render = render;
script.__file = "packages/switch-cell/src/index.vue";

script.install = function (app) {
  app.component(script.name, script);
};

export default script;
export { script as SwitchCell };
