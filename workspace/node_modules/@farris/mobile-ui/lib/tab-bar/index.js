import ScrollView from '../scroll-view';
import { nextTick, resolveComponent, openBlock, createBlock, createVNode, Fragment, withDirectives, vShow, createCommentVNode, withCtx, renderList, renderSlot, toDisplayString } from 'vue';

var _components;
var script = {
  name: 'fm-tab-bar',
  components: (_components = {}, _components[ScrollView.name] = ScrollView, _components),
  props: {
    value: {
      type: [String, Number],
      "default": ''
    },
    items: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    border: {
      type: Boolean,
      "default": true
    },
    inkLength: {
      type: Number,
      "default": 100
    },
    immediate: {
      type: Boolean,
      "default": false
    },
    className: {
      type: String
    },
    type: {
      type: String,
      "default": 'line'
    }
  },
  data: function data() {
    return {
      currentName: '',
      wrapperW: 0,
      contentW: 0,
      inkWidth: 0,
      inkPos: 0,
      scrollerTmpKey: Date.now(),
      maskStartShown: false,
      maskEndShown: true,
      itemRefs: []
    };
  },
  computed: {
    scrollable: function scrollable() {
      return this.contentW > this.wrapperW;
    },
    currentIndex: function currentIndex() {
      for (var i = 0, len = this.items.length; i < len; i++) {
        if (this.items[i].name === this.currentName) {
          return i;
        }
      }
    },
    currentTab: function currentTab() {
      if (this.currentIndex) {
        return this.items[this.currentIndex];
      }
    }
  },
  watch: {
    value: {
      immediate: true,
      handler: function handler(val) {
        if (val !== this.currentName) {
          this.currentName = val;
        }
      }
    },
    inkWidth: function inkWidth() {
      var _this = this;

      /* istanbul ignore next */
      nextTick(function () {
        _this.reflow();
      });
    },
    items: function items() {
      /* istanbul ignore next */
      //nextTick(() => {
      this.reflow2(); //});
    },
    currentIndex: function currentIndex() {
      var _this2 = this;

      nextTick(function () {
        _this2.reflow();
      });
    },
    scrollable: function scrollable() {
      /* istanbul ignore next */
      this.scrollerTmpKey = Date.now();
    }
  },
  created: function created() {
    if (this.currentName === '' && this.items.length) {
      this.currentName = this.items[0].name;
      this.$emit('change', this.items[0], 0, 0);
    }
  },
  mounted: function mounted() {
    // console.log(this.items);
    this.$_resizeEnterBehavior();
  },
  activated: function activated() {
    this.$_resizeEnterBehavior();
  },
  deactivated: function deactivated() {
    this.$_resizeLeaveBehavior();
  },
  beforeUnmount: function beforeUnmount() {
    this.$_resizeLeaveBehavior();
  },
  beforeUpdate: function beforeUpdate() {
    this.itemRefs = [];
  },
  // updated() {
  //   console.log('update');
  //   console.log(this.items);
  //   console.log(this.itemRefs);
  // },
  methods: {
    $_onScroll: function $_onScroll(_ref)
    /* istanbul ignore next */
    {
      var scrollLeft = _ref.scrollLeft;

      if (scrollLeft > 0) {
        this.maskStartShown = true;
      } else {
        this.maskStartShown = false;
      }

      if (scrollLeft >= this.$refs.scroller.contentW - this.$refs.scroller.containerW) {
        this.maskEndShown = false;
      } else {
        this.maskEndShown = true;
      }

      this.maskEndShown = true;
    },
    $_onClick: function $_onClick(item, index) {
      if (item.disabled) {
        return;
      }

      this.$emit('change', item, index, this.currentIndex);
      this.currentName = item.name;
      this.$emit('input', item.name);
    },
    $_resizeEnterBehavior: function $_resizeEnterBehavior() {
      var _this3 = this;

      window.addEventListener('resize', this.reflow2);
      this.reflow();
      /* istanbul ignore next */

      if (this.immediate) {
        nextTick(function () {
          _this3.$emit('change', _this3.items[_this3.currentIndex], _this3.currentIndex);
        });
      }
    },
    $_resizeLeaveBehavior: function $_resizeLeaveBehavior() {
      window.removeEventListener('resize', this.reflow2);
    },
    reflow: function reflow() {
      var _this4 = this;

      /* istanbul ignore next */
      if (!this.itemRefs || this.itemRefs.length === 0) {
        return;
      }

      var wrapperReact = this.$refs.wrapper.getBoundingClientRect();
      this.wrapperW = wrapperReact.width; // this.contentW = contentWidth;
      //解决dky问题 向下取整

      this.contentW = this.wrapperW;
      var contentWidth = 0;

      for (var i = 0, len = this.items.length; i < len; i++) {
        var _this$itemRefs$i$getB = this.itemRefs[i].getBoundingClientRect(),
            width = _this$itemRefs$i$getB.width;

        contentWidth += width;
      }

      this.contentW = Math.floor(contentWidth);
      this.$refs.scroller.reflowScroller();
      nextTick(function () {
        _this4.reflowCalculate();
      });
    },
    reflow2: function reflow2() {
      var _this5 = this;

      /* istanbul ignore next */
      if (!this.itemRefs || this.itemRefs.length === 0) {
        return;
      }

      var wrapperReact = this.$refs.wrapper.getBoundingClientRect();
      this.wrapperW = wrapperReact.width; //解决dky问题 向下取整

      this.contentW = this.wrapperW;
      nextTick(function () {
        var contentWidth = 0;

        for (var i = 0, len = _this5.items.length; i < len; i++) {
          var _this5$itemRefs$i$get = _this5.itemRefs[i].getBoundingClientRect(),
              width = _this5$itemRefs$i$get.width;

          contentWidth += width;
        }

        _this5.contentW = Math.floor(contentWidth);

        _this5.$refs.scroller.reflowScroller();

        _this5.reflowCalculate();
      });
    },
    reflowCalculate: function reflowCalculate() {
      /* istanbul ignore next */
      if (!this.itemRefs || !this.itemRefs[this.currentIndex]) {
        return;
      }

      var target = this.itemRefs[this.currentIndex];
      var targetContent = target.getElementsByClassName('fm-tab-bar-item-content')[0];

      if (targetContent) {
        this.inkWidth = targetContent.offsetWidth * this.inkLength / 100;
      } else {
        this.inkWidth = target.offsetWidth * this.inkLength / 100;
      }

      this.inkPos = target.offsetLeft + (target.offsetWidth - this.inkWidth) / 2;
      var prevTarget = this.itemRefs[this.currentIndex - 1];
      var nextTarget = this.itemRefs[this.currentIndex + 1];

      if (!prevTarget) {
        this.$refs.scroller.scrollTo(0, 0, true);
        return;
      }
      /* istanbul ignore next */


      if (!nextTarget) {
        this.$refs.scroller.scrollTo(this.contentW, 0, true);
        return;
      }

      var wrapperRect = this.$refs.wrapper.getBoundingClientRect();
      var prevTargetRect = prevTarget.getBoundingClientRect();
      var nextTargetRect = nextTarget.getBoundingClientRect();
      /* istanbul ignore next */

      if (prevTargetRect && prevTargetRect.left < wrapperRect.left) {
        this.$refs.scroller.scrollTo(prevTarget.offsetLeft, 0, true);
      } else if (nextTargetRect && nextTargetRect.right > wrapperRect.right) {
        this.$refs.scroller.scrollTo(nextTarget.offsetLeft + nextTarget.offsetWidth - this.wrapperW, 0, true);
      }
    },
    setItemRef: function setItemRef(el) {
      if (el) {
        this.itemRefs.push(el);
      }
    }
  }
};

const _hoisted_1 = {
  class: "fm-tab-bar-inner",
  ref: "wrapper"
};
const _hoisted_2 = { class: "fm-tab-bar-start" };
const _hoisted_3 = { class: "fm-tab-bar-end" };
const _hoisted_4 = {
  key: 0,
  class: "fm-tab-bar-item-content fm-tab-bar-item-line"
};
const _hoisted_5 = { class: "fm-tab-bar-icon" };
const _hoisted_6 = {
  key: 2,
  class: "fm-tab-bar-info fm-tab-bar-dot"
};
const _hoisted_7 = {
  key: 3,
  class: "fm-tab-bar-info"
};
const _hoisted_8 = { class: "fm-tab-bar-icon" };
const _hoisted_9 = {
  key: 2,
  class: "fm-tab-bar-info fm-tab-bar-dot"
};
const _hoisted_10 = {
  key: 3,
  class: "fm-tab-bar-info"
};
const _hoisted_11 = {
  key: 3,
  class: "fm-tab-bar-item-content fm-tab-bar-item-line"
};

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_fm_icon = resolveComponent("fm-icon");
  const _component_fm_scroll_view = resolveComponent("fm-scroll-view");

  return (openBlock(), createBlock("nav", {
    class: ["fm-tab-bar", [
 $props.className,
 $options.scrollable?'fm-tab-bar-scrollable':null,
 $props.type === 'nav'?'fm-tab-bar-nav':null
 ]]
  }, [
    createVNode("div", _hoisted_1, [
      ($options.scrollable)
        ? (openBlock(), createBlock(Fragment, { key: 0 }, [
            withDirectives(createVNode("div", _hoisted_2, null, 512 /* NEED_PATCH */), [
              [vShow, $data.maskStartShown]
            ]),
            withDirectives(createVNode("div", _hoisted_3, null, 512 /* NEED_PATCH */), [
              [vShow, $data.maskEndShown]
            ])
          ], 64 /* STABLE_FRAGMENT */))
        : createCommentVNode("v-if", true),
      createVNode(_component_fm_scroll_view, {
        ref: "scroller",
        "scrolling-x": $options.scrollable,
        "scrolling-y": false,
        key: $data.scrollerTmpKey,
        onScroll: $options.$_onScroll
      }, {
        default: withCtx(() => [
          createVNode("div", {
            class: "fm-tab-bar-list",
            style: {width: $data.contentW + 'px'}
          }, [
            (openBlock(true), createBlock(Fragment, null, renderList($props.items, (item, index) => {
              return (openBlock(), createBlock("a", {
                class: ["fm-tab-bar-item", {
            'is-active': $data.currentName === item.name,
            'is-disabled': !!item.disabled
          }],
                ref: $options.setItemRef,
                onClick: $event => ($options.$_onClick(item, index))
              }, [
                renderSlot(_ctx.$slots, "item", {
                  item: item,
                  items: $props.items,
                  index: index,
                  currentName: $data.currentName
                }, () => [
                  ($props.type === 'line')
                    ? (openBlock(), createBlock("div", _hoisted_4, [
                        createVNode("span", {
                          textContent: toDisplayString(item.title)
                        }, null, 8 /* PROPS */, ["textContent"])
                      ]))
                    : ($props.type === 'tab')
                      ? (openBlock(), createBlock("div", {
                          key: 1,
                          class: ["fm-tab-bar-item-content fm-tab-bar-item-tab", {'fm-tab-bar-item-tab-active': item.name === $data.currentName }]
                        }, [
                          createVNode("div", _hoisted_5, [
                            (item.name !== $data.currentName || !item.activeIcon)
                              ? (openBlock(), createBlock(_component_fm_icon, {
                                  key: 0,
                                  name: item.icon,
                                  color: item.iconColor,
                                  classPrefix: item.iconPrefix
                                }, null, 8 /* PROPS */, ["name", "color", "classPrefix"]))
                              : createCommentVNode("v-if", true),
                            (item.activeIcon && item.name === $data.currentName)
                              ? (openBlock(), createBlock(_component_fm_icon, {
                                  key: 1,
                                  name: item.activeIcon,
                                  color: item.activeIconColor,
                                  classPrefix: item.iconPrefix
                                }, null, 8 /* PROPS */, ["name", "color", "classPrefix"]))
                              : createCommentVNode("v-if", true),
                            (item.dot)
                              ? (openBlock(), createBlock("div", _hoisted_6))
                              : createCommentVNode("v-if", true),
                            (item.badge)
                              ? (openBlock(), createBlock("div", _hoisted_7, toDisplayString(item.badge), 1 /* TEXT */))
                              : createCommentVNode("v-if", true)
                          ]),
                          createVNode("div", {
                            class: "text",
                            textContent: toDisplayString(item.title)
                          }, null, 8 /* PROPS */, ["textContent"])
                        ], 2 /* CLASS */))
                      : ($props.type === 'nav')
                        ? (openBlock(), createBlock("div", {
                            key: 2,
                            class: ["fm-tab-bar-item-content fm-tab-bar-item-nav", {'fm-tab-bar-item-nav-active': item.name === $data.currentName }]
                          }, [
                            createVNode("div", _hoisted_8, [
                              (item.name !== $data.currentName || !item.activeIcon)
                                ? (openBlock(), createBlock(_component_fm_icon, {
                                    key: 0,
                                    name: item.icon,
                                    color: item.iconColor,
                                    classPrefix: item.iconPrefix
                                  }, null, 8 /* PROPS */, ["name", "color", "classPrefix"]))
                                : createCommentVNode("v-if", true),
                              (item.activeIcon && item.name === $data.currentName)
                                ? (openBlock(), createBlock(_component_fm_icon, {
                                    key: 1,
                                    name: item.activeIcon,
                                    color: item.activeIconColor,
                                    classPrefix: item.iconPrefix
                                  }, null, 8 /* PROPS */, ["name", "color", "classPrefix"]))
                                : createCommentVNode("v-if", true),
                              (item.dot)
                                ? (openBlock(), createBlock("div", _hoisted_9))
                                : createCommentVNode("v-if", true),
                              (item.badge)
                                ? (openBlock(), createBlock("div", _hoisted_10, toDisplayString(item.badge), 1 /* TEXT */))
                                : createCommentVNode("v-if", true)
                            ]),
                            createVNode("div", {
                              class: "text",
                              textContent: toDisplayString(item.title)
                            }, null, 8 /* PROPS */, ["textContent"])
                          ], 2 /* CLASS */))
                        : (openBlock(), createBlock("div", _hoisted_11, [
                            createVNode("span", {
                              textContent: toDisplayString(item.title)
                            }, null, 8 /* PROPS */, ["textContent"])
                          ]))
                ])
              ], 10 /* CLASS, PROPS */, ["onClick"]))
            }), 256 /* UNKEYED_FRAGMENT */))
          ], 4 /* STYLE */),
          ($props.type === 'line' && $props.border)
            ? (openBlock(), createBlock("span", {
                key: 0,
                class: ["fm-tab-bar-ink", {
          'is-disabled': $options.currentTab && $options.currentTab.disabled
        }],
                style: {
          width: $data.inkWidth + 'px',
          transform: 'translateX(' + $data.inkPos + 'px)',
        }
              }, null, 6 /* CLASS, STYLE */))
            : createCommentVNode("v-if", true)
        ]),
        _: 1 /* STABLE */
      }, 8 /* PROPS */, ["scrolling-x", "onScroll"])
    ], 512 /* NEED_PATCH */)
  ], 2 /* CLASS */))
}

script.render = render;
script.__file = "packages/tab-bar/src/index.vue";

script.install = function (app) {
  app.component(script.name, script);
};

export default script;
export { script as TabBar };
