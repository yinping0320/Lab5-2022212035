import Popup from '../popup';
import LookupPanel from '../lookup';
import { resolveComponent, openBlock, createBlock, renderSlot, createVNode, createSlots, withCtx } from 'vue';

var _components;
var script = {
  name: 'fm-lookup-input',
  components: (_components = {}, _components[Popup.name] = Popup, _components[LookupPanel.name] = LookupPanel, _components),
  props: {
    name: String,
    label: String,
    placeholder: String,
    required: {
      type: Boolean,
      "default": false
    },
    clearable: {
      type: Boolean,
      "default": false
    },
    modelValue: String,
    title: {
      type: String,
      "default": '帮助'
    },
    type: {
      type: String,
      "default": 'LIST'
    },
    idField: {
      type: String,
      "default": '',
      required: true
    },
    valueField: {
      type: String,
      "default": ''
    },
    textField: {
      type: String,
      "default": '',
      required: true
    },
    readonly: {
      type: Boolean,
      "default": false
    },
    errorMessage: String,
    errorMessageAlign: String,
    mapFields: {
      type: Object,
      "default": function _default() {
        return {};
      }
    },
    data: {
      // eslint-disable-next-line vue/require-prop-type-constructor
      type: [Array, Object],
      "default": function _default() {
        return [];
      }
    },
    url: {
      type: String,
      "default": ''
    },
    selectedValues: {
      type: String,
      "default": ''
    },
    multiSelect: {
      type: Boolean,
      "default": false
    },
    showSearch: {
      type: Boolean,
      "default": true
    },
    showFavorite: {
      type: Boolean,
      "default": false
    },
    onlySelectLeaf: {
      type: Boolean,
      "default": false
    },
    enablePullDownLoad: {
      type: Boolean,
      "default": true
    },
    useServerTemplate: false,
    beforeGetData: {
      type: Function,
      "default": function _default() {
        return Promise.resolve('');
      }
    },
    position: {
      type: String,
      "default": 'right'
    },
    panelClass: String,
    inputAlign: {
      type: String,
      "default": 'right'
    },
    teleport: {
      type: String,
      "default": ''
    },
    zIndex: [Number, String]
  },
  data: function data() {
    return {
      enableShow: false,
      displayText: '',
      displayValue: this.selectedValues,
      selecteds: {}
    };
  },
  mounted: function mounted() {
    this.displayText = this.modelValue;
  },
  computed: {
    displayTexts: function displayTexts() {
      return this.displayText ? String(this.displayText).split(',') : [];
    }
  },
  methods: {
    onToggle: function onToggle() {
      if (this.readonly) {
        return;
      }

      this.enableShow = !this.enableShow;
    },
    onConfirm: function onConfirm(event) {
      this.displayText = event;
      this.enableShow = false;
      this.$emit('confirm', event);
      this.$emit('update:modelValue', event);
    },
    onBack: function onBack() {
      this.enableShow = false;
      this.$emit('back');
    },
    onSelectChange: function onSelectChange(event) {
      this.$emit('selectChange', event);
    },
    onValueChange: function onValueChange(event) {
      console.log(event);
      this.selecteds = event;
      this.$emit('valueChange', event);
    },
    onClear: function onClear() {
      this.$refs.lookupPanel.clear();
    },
    setDisplyValue: function setDisplyValue() {}
  },
  watch: {
    modelValue: function modelValue(val, oldVal) {
      if (val !== oldVal) {
        this.displayText = val;
      }
    },
    enableShow: function enableShow(value) {
      value && this.$refs.lookupPanel && this.$refs.lookupPanel.init();
    },
    selectedValues: function selectedValues(value) {
      this.displayValue = value;
    }
  }
};

var _hoisted_1 = {
  "class": "fm-lookup-input"
};
var _hoisted_2 = {
  style: {
    "display": "flex"
  },
  "class": "fm-lookup-input-right-icon"
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_fm_icon = resolveComponent("fm-icon");

  var _component_fm_input = resolveComponent("fm-input");

  var _component_fm_lookup_panel = resolveComponent("fm-lookup-panel");

  var _component_fm_popup = resolveComponent("fm-popup");

  return openBlock(), createBlock("div", _hoisted_1, [renderSlot(_ctx.$slots, "template", {
    displayText: $data.displayText,
    click: $options.onToggle
  }, function () {
    return [createVNode(_component_fm_input, {
      modelValue: $data.displayText,
      "onUpdate:modelValue": _cache[1] || (_cache[1] = function ($event) {
        return $data.displayText = $event;
      }),
      editable: false,
      clickable: !$props.readonly,
      required: $props.required,
      readonly: $props.readonly,
      name: $props.name,
      label: $props.label,
      placeholder: $props.placeholder,
      clearable: $props.clearable,
      "input-align": $props.inputAlign,
      "error-message-align": $props.errorMessageAlign,
      "error-message": $props.errorMessage,
      onClick: $options.onToggle
    }, createSlots({
      _: 2
      /* DYNAMIC */

    }, [_ctx.$slots['left-icon'] ? {
      name: "left-icon",
      fn: withCtx(function () {
        return [renderSlot(_ctx.$slots, "left-icon")];
      })
    } : undefined, !$props.readonly || _ctx.$slots['right-icon'] ? {
      name: "right-icon",
      fn: withCtx(function () {
        return [createVNode("div", _hoisted_2, [renderSlot(_ctx.$slots, "right-icon", {}, function () {
          return [createVNode(_component_fm_icon, {
            name: "s-arrow"
          })];
        })])];
      })
    } : undefined, _ctx.$slots.extra ? {
      name: "extra",
      fn: withCtx(function () {
        return [renderSlot(_ctx.$slots, "extra")];
      })
    } : undefined, _ctx.$slots.input ? {
      name: "input",
      fn: withCtx(function () {
        return [renderSlot(_ctx.$slots, "input", {
          selecteds: $data.selecteds,
          displayTexts: $options.displayTexts
        })];
      })
    } : undefined]), 1032
    /* PROPS, DYNAMIC_SLOTS */
    , ["modelValue", "clickable", "required", "readonly", "name", "label", "placeholder", "clearable", "input-align", "error-message-align", "error-message", "onClick"])];
  }), createVNode(_component_fm_popup, {
    show: $data.enableShow,
    "onUpdate:show": _cache[2] || (_cache[2] = function ($event) {
      return $data.enableShow = $event;
    }),
    position: $props.position,
    "class": ["fm-lookup-popup-box", $props.panelClass],
    zIndex: $props.zIndex,
    teleport: $props.teleport
  }, {
    "default": withCtx(function () {
      return [createVNode(_component_fm_lookup_panel, {
        ref: "lookupPanel",
        type: $props.type,
        title: $props.title,
        idField: $props.idField,
        valueField: $props.valueField,
        textField: $props.textField,
        mapFields: $props.mapFields,
        data: $props.data,
        multiSelect: $props.multiSelect,
        showSearch: $props.showSearch,
        showFavorite: $props.showFavorite,
        url: $props.url,
        beforeGetData: $props.beforeGetData,
        selectedValues: $data.displayValue,
        onlySelectLeaf: $props.onlySelectLeaf,
        enablePullDownLoad: $props.enablePullDownLoad,
        useServerTemplate: $props.useServerTemplate,
        onConfirm: $options.onConfirm,
        onBack: $options.onBack,
        onSelectChange: $options.onSelectChange,
        onValueChange: $options.onValueChange
      }, {
        cell: withCtx(function (slotProps) {
          return [renderSlot(_ctx.$slots, "cell", {
            slotProps: slotProps
          })];
        }),
        _: 1
        /* STABLE */

      }, 8
      /* PROPS */
      , ["type", "title", "idField", "valueField", "textField", "mapFields", "data", "multiSelect", "showSearch", "showFavorite", "url", "beforeGetData", "selectedValues", "onlySelectLeaf", "enablePullDownLoad", "useServerTemplate", "onConfirm", "onBack", "onSelectChange", "onValueChange"])];
    }),
    _: 1
    /* STABLE */

  }, 8
  /* PROPS */
  , ["show", "position", "class", "zIndex", "teleport"])]);
}

script.render = render;
script.__file = "packages/lookup-input/src/lookup-input.vue";

script.install = function (app) {
  app.component(script.name, script);
};

export default script;
export { script as LookupInput };
