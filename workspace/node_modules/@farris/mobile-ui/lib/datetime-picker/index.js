import { defineComponent, ref, watch, computed, createVNode, resolveComponent, mergeProps } from 'vue';
import Popup from '../popup';
import { Input } from '../input';
import { DatetimePicker } from 'vant';
import { parse, format } from '../utils';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
function __rest(s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}

var _components;
var DatePicker = defineComponent({
  name: 'fm-datetime-picker',
  inheritAttrs: false,
  components: (_components = {}, _components[Input.name] = Input, _components[Popup.name] = Popup, _components[DatetimePicker.name] = DatetimePicker, _components),
  props: {
    format: {
      type: String,
      "default": 'YYYY-MM-DD HH:mm:ss'
    },
    modelValue: {
      type: [String, Date],
      "default": ''
    },
    placeholder: {
      type: String,
      "default": '点击选择日期'
    },
    readonly: {
      type: Boolean,
      "default": false
    },
    disabled: {
      type: Boolean,
      "default": false
    },
    rightIcon: {
      type: [String, Boolean],
      "default": 's-arrow'
    },
    teleport: {
      type: String,
      "default": ''
    },
    "class": {
      type: String,
      "default": ''
    },
    zIndex: [Number, String],
    useCurrentSecond: {
      type: Boolean,
      "default": false
    }
  },
  emits: ['click', 'update:modelValue', 'change', 'cancel'],
  setup: function setup(props, _ref) {
    var attrs = _ref.attrs,
        emit = _ref.emit,
        slots = _ref.slots;
    var enableShow = ref(false);
    var enableShowDate = ref(false);
    watch(enableShow, function (value) {
      if (!value) {
        setTimeout(function () {
          return enableShowDate.value = value;
        }, 300);
      } else {
        enableShowDate.value = value;
      }
    });

    var formatDate = function formatDate(date) {
      if (date instanceof Date) {
        return format(date, props.format);
      } else {
        return date;
      }
    };

    var parseDate = function parseDate(date) {
      var valueType = attrs.type === 'time' ? 'string' : 'date';

      if (date instanceof Date) {
        return valueType === 'date' ? date : formatDate(date);
      } else {
        return valueType === 'date' ? parse(date) : date;
      }
    };

    var defaultValue = parseDate(props.modelValue ? formatDate(props.modelValue) : new Date());
    var innerValue = ref(formatDate(props.modelValue));
    watch(function () {
      return props.modelValue;
    }, function (value) {
      innerValue.value = formatDate(value);
      defaultValue = parseDate(props.modelValue ? formatDate(props.modelValue) : new Date());
    });
    var isEditable = computed(function () {
      return !(props.readonly || props.disabled);
    });

    var handleClick = function handleClick(event) {
      if (!isEditable.value) {
        return;
      }

      emit('click', event);
      enableShow.value = true;
      defaultValue = parseDate(props.modelValue ? formatDate(props.modelValue) : defaultValue);
    };

    var handleConfirm = function handleConfirm(value) {
      if (value instanceof Date && props.useCurrentSecond) {
        var seconds = new Date().getSeconds();
        value.setSeconds(seconds);
      }

      innerValue.value = formatDate(value);
      enableShow.value = false;
      emit('change', value);
      emit('update:modelValue', value);
    };

    var handleClose = function handleClose() {
      enableShow.value = false;
      emit('cancel');
    };

    return function () {
      var name = attrs.name,
          label = attrs.label,
          inputClass = attrs.inputClass,
          _attrs$required = attrs.required,
          required = _attrs$required === void 0 ? false : _attrs$required,
          disabled = attrs.disabled,
          _attrs$inputAlign = attrs.inputAlign,
          inputAlign = _attrs$inputAlign === void 0 ? 'right' : _attrs$inputAlign,
          errorMessage = attrs['error-message'],
          errorMessageAlign = attrs['error-message-align'],
          onClick = attrs.onClick,
          onConfirm = attrs.onConfirm,
          onCancel = attrs.onCancel,
          onFocus = attrs.onFocus,
          onClear = attrs.onClear,
          maxValue = attrs.maxValue,
          minValue = attrs.minValue,
          slotAttrs = __rest(attrs, ["name", "label", "inputClass", "required", "disabled", "inputAlign", 'error-message', 'error-message-align', "onClick", "onConfirm", "onCancel", "onFocus", "onClear", "maxValue", "minValue"]);

      var inputProps = {
        editable: false,
        clickable: isEditable.value,
        readonly: props.readonly,
        disabled: props.disabled,
        name: name,
        label: label,
        placeholder: props.placeholder,
        required: required,
        inputAlign: inputAlign,
        errorMessage: errorMessage,
        errorMessageAlign: errorMessageAlign,
        onFocus: onFocus,
        onClear: onClear,
        "class": inputClass,
        rightIcon: isEditable.value ? props.rightIcon : ''
      };

      var renderInput = function renderInput() {
        return createVNode("div", {
          "class": "fm-datetimepicker-input fm-picker-input",
          "onClick": handleClick
        }, [slots.input ? slots.input(Object.assign(Object.assign({}, inputProps), {
          modelValue: innerValue.value
        })) : createVNode(resolveComponent("fm-input"), mergeProps({
          "modelValue": innerValue.value
        }, inputProps), _extends({}, slots))]);
      };

      var slotProps = Object.assign({
        onConfirm: handleConfirm,
        onCancel: handleClose
      }, slotAttrs);

      if (minValue) {
        slotProps.minDate = parse(minValue);
      }

      if (maxValue) {
        slotProps.maxDate = parse(maxValue);
      }

      return createVNode("div", {
        "class": "fm-datetimepicker fm-picker" + props["class"]
      }, [createVNode(Popup, {
        "show": enableShow.value,
        "onUpdate:show": function onUpdateShow($event) {
          return enableShow.value = $event;
        },
        "position": "bottom",
        "teleport": props.teleport,
        "zIndex": props.zIndex
      }, {
        "default": function _default() {
          return [enableShowDate.value ? createVNode(resolveComponent("van-datetime-picker"), mergeProps({
            "modelValue": defaultValue
          }, slotProps, {
            "class": "fm-picker-panel"
          }), null) : null];
        }
      }), renderInput()]);
    };
  }
});

DatePicker.install = function (app) {
  app.component(DatePicker.name, DatePicker);
};

export default DatePicker;
export { DatePicker };
