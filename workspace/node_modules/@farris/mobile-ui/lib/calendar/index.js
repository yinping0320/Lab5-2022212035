import { unref, reactive, defineComponent, inject, computed, openBlock, createBlock, withModifiers, createVNode, toDisplayString, createCommentVNode, watch, resolveComponent, Fragment, renderList, renderSlot, ref, useContext, withCtx, createTextVNode } from 'vue';
import { useExpose, useTouchMove } from '../hook';
import { isEqualDate, isSameDay, isAfter, isBefore, isArray, isValidDate, parse, isString, isDate, format } from '../utils';
import FmInput, { InputCommonProps } from '../input';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var _DAYLABELS;

var MO = 'monday';
var TU = 'tuesday';
var WE = 'wednesday';
var TH = 'thursday';
var FR = 'friday';
var SA = 'saturday';
var SU = 'sunday';
var WEEK = [MO, TU, WE, TH, FR, SA, SU];
var DAYLABELS = (_DAYLABELS = {}, _DAYLABELS[MO] = '一', _DAYLABELS[TU] = '二', _DAYLABELS[WE] = '三', _DAYLABELS[TH] = '四', _DAYLABELS[FR] = '五', _DAYLABELS[SA] = '六', _DAYLABELS[SU] = '日', _DAYLABELS);
var VIEW = ['week', 'month'];

var LunarDate = /*#__PURE__*/function () {
  function LunarDate(date) {
    this._data = [0x04bd8, 0x04ae0, 0x0a570, 0x054d5, 0x0d260, 0x0d950, 0x16554, 0x056a0, 0x09ad0, 0x055d2, 0x04ae0, 0x0a5b6, 0x0a4d0, 0x0d250, 0x1d255, 0x0b540, 0x0d6a0, 0x0ada2, 0x095b0, 0x14977, 0x04970, 0x0a4b0, 0x0b4b5, 0x06a50, 0x06d40, 0x1ab54, 0x02b60, 0x09570, 0x052f2, 0x04970, 0x06566, 0x0d4a0, 0x0ea50, 0x06e95, 0x05ad0, 0x02b60, 0x186e3, 0x092e0, 0x1c8d7, 0x0c950, 0x0d4a0, 0x1d8a6, 0x0b550, 0x056a0, 0x1a5b4, 0x025d0, 0x092d0, 0x0d2b2, 0x0a950, 0x0b557, 0x06ca0, 0x0b550, 0x15355, 0x04da0, 0x0a5b0, 0x14573, 0x052b0, 0x0a9a8, 0x0e950, 0x06aa0, 0x0aea6, 0x0ab50, 0x04b60, 0x0aae4, 0x0a570, 0x05260, 0x0f263, 0x0d950, 0x05b57, 0x056a0, 0x096d0, 0x04dd5, 0x04ad0, 0x0a4d0, 0x0d4d4, 0x0d250, 0x0d558, 0x0b540, 0x0b6a0, 0x195a6, 0x095b0, 0x049b0, 0x0a974, 0x0a4b0, 0x0b27a, 0x06a50, 0x06d40, 0x0af46, 0x0ab60, 0x09570, 0x04af5, 0x04970, 0x064b0, 0x074a3, 0x0ea50, 0x06b58, 0x055c0, 0x0ab60, 0x096d5, 0x092e0, 0x0c960, 0x0d954, 0x0d4a0, 0x0da50, 0x07552, 0x056a0, 0x0abb7, 0x025d0, 0x092d0, 0x0cab5, 0x0a950, 0x0b4a0, 0x0baa4, 0x0ad50, 0x055d9, 0x04ba0, 0x0a5b0, 0x15176, 0x052b0, 0x0a930, 0x07954, 0x06aa0, 0x0ad50, 0x05b52, 0x04b60, 0x0a6e6, 0x0a4e0, 0x0d260, 0x0ea65, 0x0d530, 0x05aa0, 0x076a3, 0x096d0, 0x04bd7, 0x04ad0, 0x0a4d0, 0x1d0b6, 0x0d250, 0x0d520, 0x0dd45, 0x0b5a0, 0x056d0, 0x055b2, 0x049b0, 0x0a577, 0x0a4b0, 0x0aa50, 0x1b255, 0x06d20, 0x0ada0, 0x14b63];
    date = date ? date : new Date();
    this.value = this.toLunar(date);
  }

  var _proto = LunarDate.prototype;

  _proto.getData = function getData(year) {
    return this._data[year - 1900];
  };

  _proto.getLeapMonth = function getLeapMonth(year, lunarData) {
    lunarData = lunarData || this.getData(year);
    return lunarData & 0xf;
  };

  _proto.getLeapDays = function getLeapDays(year, lunarData) {
    lunarData = lunarData || this.getData(year);

    if (this.getLeapMonth(year, lunarData)) {
      return lunarData & 0x10000 ? 30 : 29;
    } else {
      return 0;
    }
  };

  _proto.getMonthDays = function getMonthDays(year, month, lunarData) {
    lunarData = lunarData || this.getData(year);
    return lunarData & 0x10000 >> month ? 30 : 29;
  };

  _proto.getLunarDays = function getLunarDays(year, lunarData) {
    lunarData = lunarData || this.getData(year);
    var days = 348;

    for (var monthIndex = 0x8000; monthIndex > 0x8; monthIndex >>= 1) {
      days += lunarData & monthIndex ? 1 : 0;
    }

    return days + this.getLeapDays(year, lunarData);
  };

  _proto.toLunar = function toLunar(date) {
    var isLeap = false;
    var currentYear = 2020;
    var lunarData = this.getData(currentYear);
    var lunarDays = this.getLunarDays(currentYear, lunarData);
    var daysOffset = (Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) - Date.UTC(2020, 0, 25)) / 86400000;

    if (daysOffset >= lunarDays) {
      while (daysOffset >= lunarDays) {
        daysOffset -= lunarDays;
        lunarData = this.getData(++currentYear);
        lunarDays = this.getLunarDays(currentYear, lunarData);
      }
    } else if (daysOffset < 0) {
      while (daysOffset < 0) {
        lunarData = this.getData(--currentYear);
        lunarDays = this.getLunarDays(currentYear, lunarData);
        daysOffset += lunarDays;
      }
    }

    daysOffset++;
    var leapMonth = this.getLeapMonth(currentYear, lunarData);
    var currentMonth, currentMonthDays;

    for (currentMonth = 1; currentMonth < 12; currentMonth++) {
      currentMonthDays = this.getMonthDays(currentYear, currentMonth);
      isLeap = false;

      if (leapMonth) {
        if (currentMonth > leapMonth) {
          currentMonth--;
          currentMonthDays = this.getLeapDays(currentYear, lunarData);
          leapMonth = 0;
          isLeap = true;
        }
      }

      if (daysOffset > currentMonthDays) {
        daysOffset -= currentMonthDays;
      } else {
        break;
      }
    }

    return Object.assign({
      lunarYear: currentYear,
      lunarMonth: currentMonth,
      lunarDay: daysOffset,
      isLeap: isLeap
    }, this.getChineseDay(currentYear, currentMonth, daysOffset, isLeap));
  };

  _proto.getChineseDay = function getChineseDay(year, month, day, isLeap) {
    var nStr1 = new Array('日', '一', '二', '三', '四', '五', '六', '七', '八', '九', '十');
    var nStr2 = new Array('初', '十', '廿', '卅', '　');
    var lunarDayText = '';
    var lunarMonthText = isLeap ? '闰' : '';
    var lunarYearText = year;

    if (month > 10) {
      lunarMonthText = lunarMonthText + '十' + nStr1[month % 10] + '月';
    } else {
      lunarMonthText = lunarMonthText + nStr1[month] + '月';
    }

    switch (day) {
      case 10:
        lunarDayText += '初十';
        break;

      case 20:
        lunarDayText += '二十';
        break;

      case 30:
        lunarDayText += '三十';
        break;

      default:
        lunarDayText += nStr2[Math.floor(day / 10)];
        lunarDayText += nStr1[day % 10];
    }

    return {
      lunarYearText: lunarYearText,
      lunarMonthText: lunarMonthText,
      lunarDayText: lunarDayText
    };
  };

  return LunarDate;
}();

function getDateObj(dateRef) {
  var dateValue = unref(dateRef);
  var year = dateValue.getFullYear();
  var month = dateValue.getMonth();
  var date = dateValue.getDate();
  var day = dateValue.getDay() === 0 ? 7 : dateValue.getDay();
  var startDayInWeek = new Date(year, month, 1).getDay();
  var weekInMonth = Math.ceil((date + (startDayInWeek === 0 ? 7 : startDayInWeek) - 1) / 7);
  return {
    year: year,
    month: month,
    date: date,
    weekInMonth: weekInMonth,
    day: day
  };
}
function genWeeks(_ref, view, firstDay, selected) {
  var year = _ref.year,
      month = _ref.month,
      _ref$weekInMonth = _ref.weekInMonth,
      weekInMonth = _ref$weekInMonth === void 0 ? 1 : _ref$weekInMonth;

  if (firstDay === void 0) {
    firstDay = MO;
  }

  if (selected === void 0) {
    selected = new Date();
  }

  var weeks = reactive([]);
  var week = {
    days: [],
    num: 1
  };
  var totalDay = getMonthEndDay(year, month);
  var startDayInWeek = new Date(year, month, 1).getDay();
  var startDay = getStartDay(firstDay, startDayInWeek);
  var endDay = getEndDay(startDay, totalDay);

  for (var day = startDay; day <= endDay; day++) {
    var _date = new Date(year, month, day);

    if (week.days.length >= 7) {
      weeks.push(week);
      week = {
        days: [],
        num: week.num + 1
      };
    }

    var lunarDate = new LunarDate(_date).value;
    week.days.push(Object.assign({
      date: _date,
      disabled: isDisabled(),
      selected: selected instanceof Date ? isEqualDate(_date, selected) : !!(selected.begin && isEqualDate(_date, selected.begin) || selected.end && isEqualDate(_date, selected.end)),
      type: day < 1 ? 'prev' : day > totalDay ? 'next' : 'current',
      text: _date.getDate(),
      day: _date.getDay()
    }, lunarDate));
  }

  weeks.push(week);

  if (view === 'week') {
    return [weeks[weekInMonth - 1]];
  }

  return weeks;
}

function getStartDay(firstDay, startDayInWeek) {
  startDayInWeek = startDayInWeek === 0 ? 7 : startDayInWeek;
  var index = WEEK.findIndex(function (day) {
    return firstDay === day;
  });
  return index + 2 - startDayInWeek > 1 ? index + 2 - startDayInWeek - 7 : index + 2 - startDayInWeek;
}

function getEndDay(startDay, totalDay) {
  var total = 1 - startDay + totalDay;
  return total % 7 === 0 ? totalDay : totalDay + (7 - total % 7);
}

function getMonthEndDay(year, month) {
  return 32 - new Date(year, month, 32).getDate();
}
function genDayLabels(firstDay) {
  var index = WEEK.findIndex(function (day) {
    return firstDay === day;
  });
  var week = [].concat(WEEK.slice(index), WEEK.slice(0, index));
  return week.map(function (day) {
    return DAYLABELS[day];
  });
}

function isDisabled() {
  return false;
}

function clearSelected(weeks) {
  weeks.forEach(function (week) {
    week.days.forEach(function (day) {
      return day.selected = false;
    });
  });
}

var script = defineComponent({
  name: 'fm-calendar-day',
  inject: ['calendar'],
  props: {
    day: {
      type: Object,
      "default": function _default() {
        return {};
      }
    }
  },
  setup: function setup(props, _ref) {
    var emit = _ref.emit;
    var calendar = inject('calendar', undefined);

    var mark = function mark() {
      var initValue = {
        containerClass: '',
        containerStyle: '',
        html: ''
      };

      if (props.day && calendar && calendar.mark) {
        var target = calendar.mark(props.day);

        if (target) {
          return typeof target === 'string' ? _extends({}, initValue, {
            html: target
          }) : _extends({}, initValue, target);
        } else {
          return initValue;
        }
      }
    };

    var markOption = computed(mark);

    var onDayClick = function onDayClick(day) {
      emit('dayClick', day);
    };

    var event = function event() {
      if (calendar.events) {
        var flag = calendar.events.find(function (event) {
          return isSameDay(new Date(event), props.day.date);
        });

        if (flag) {
          return true;
        }
      }

      return calendar && calendar.event ? calendar.event(props.day) : false;
    };

    var hasEvent = computed(event);

    var isCurrentDay = function isCurrentDay(date) {
      return isEqualDate(date, new Date());
    };

    var isInRange = function isInRange(date) {
      var selectedRange = calendar.selectedRange;
      return selectedRange.begin && selectedRange.end && isAfter(date, selectedRange.begin, 'date') && isBefore(date, selectedRange.end, 'date');
    };

    var isBegin = function isBegin(date) {
      var selectedRange = calendar.selectedRange;
      return selectedRange.end && !isEqualDate(selectedRange.begin, selectedRange.end) && isEqualDate(date, selectedRange.begin);
    };

    var isEnd = function isEnd(date) {
      var selectedRange = calendar.selectedRange;
      return selectedRange.begin && !isEqualDate(selectedRange.begin, selectedRange.end) && isEqualDate(date, selectedRange.end);
    };

    var showLunar = computed(function () {
      return calendar.useLunar;
    });
    return {
      markOption: markOption,
      isCurrentDay: isCurrentDay,
      onDayClick: onDayClick,
      isInRange: isInRange,
      isBegin: isBegin,
      isEnd: isEnd,
      hasEvent: hasEvent,
      showLunar: showLunar
    };
  }
});

var _hoisted_1 = {
  "class": "text"
};
var _hoisted_2 = {
  "class": "day"
};
var _hoisted_3 = {
  key: 0,
  "class": "day-lunar"
};
var _hoisted_4 = {
  key: 0,
  "class": "event"
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock("div", {
    "class": ["fm-calendar-day-cell", {
      'fm-calendar-day-cell-selected': _ctx.day.selected,
      'fm-calendar-day-cell-current': _ctx.isCurrentDay(_ctx.day.date),
      'fm-calendar-day-cell-opacity': _ctx.day.type !== 'current',
      'fm-calendar-day-cell-disabled': _ctx.day.disabled,
      'fm-calendar-day-cell-range': _ctx.isInRange(_ctx.day.date),
      'fm-calendar-day-cell-begin': _ctx.isBegin(_ctx.day.date),
      'fm-calendar-day-cell-end': _ctx.isEnd(_ctx.day.date)
    }],
    onClick: _cache[1] || (_cache[1] = withModifiers(function ($event) {
      return _ctx.onDayClick(_ctx.day);
    }, ["stop"]))
  }, [createVNode("div", _hoisted_1, [createVNode("div", _hoisted_2, [createVNode("span", null, toDisplayString(_ctx.isCurrentDay(_ctx.day.date) ? '今' : _ctx.day.text), 1
  /* TEXT */
  )]), _ctx.showLunar ? (openBlock(), createBlock("div", _hoisted_3, [createVNode("span", null, toDisplayString(_ctx.day.lunarDay === 1 ? _ctx.day.lunarMonthText : _ctx.day.lunarDayText), 1
  /* TEXT */
  )])) : createCommentVNode("v-if", true)]), createVNode("div", {
    "class": "mark " + _ctx.markOption.containerClass,
    style: _ctx.markOption.containerStyle,
    innerHTML: _ctx.markOption.html
  }, null, 14
  /* CLASS, STYLE, PROPS */
  , ["innerHTML"]), _ctx.hasEvent ? (openBlock(), createBlock("div", _hoisted_4)) : createCommentVNode("v-if", true)], 2
  /* CLASS */
  );
}

script.render = render;
script.__file = "packages/calendar/src/day.vue";

var _components;
var script$1 = defineComponent({
  name: 'fm-calendar-week',
  components: (_components = {}, _components[script.name] = script, _components),
  props: {
    week: {
      type: Object,
      "default": function _default() {
        return {};
      }
    }
  },
  setup: function setup(props, _ref) {
    var emit = _ref.emit;

    var onRender = function onRender() {
      var _props$week;

      var _days = isArray((_props$week = props.week) == null ? void 0 : _props$week.days) ? [].concat(props.week.days) : [];

      var days = [];

      _days.forEach(function (day) {
        days.push(day.date);
      });

      var begin = days[0];
      var end = days[days.length - 1];
      emit('render', {
        begin: begin,
        end: end,
        days: days
      });
    };

    watch(function () {
      return props.week;
    }, onRender, {
      immediate: true
    });

    var onDayClick = function onDayClick(day) {
      emit('dayClick', day);
    };

    return {
      onDayClick: onDayClick
    };
  }
});

var _hoisted_1$1 = {
  "class": "fm-calendar-week"
};
function render$1(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_fm_calendar_day = resolveComponent("fm-calendar-day");

  return openBlock(), createBlock("div", _hoisted_1$1, [(openBlock(true), createBlock(Fragment, null, renderList(_ctx.week.days, function (day, index) {
    return openBlock(), createBlock(_component_fm_calendar_day, {
      key: index,
      day: day,
      onDayClick: _ctx.onDayClick
    }, null, 8
    /* PROPS */
    , ["day", "onDayClick"]);
  }), 128
  /* KEYED_FRAGMENT */
  ))]);
}

script$1.render = render$1;
script$1.__file = "packages/calendar/src/week.vue";

var _components$1;
var script$2 = defineComponent({
  name: 'fm-calendar-month',
  components: (_components$1 = {}, _components$1[script$1.name] = script$1, _components$1),
  props: {
    weeks: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    collapsed: {
      type: Boolean,
      "default": false
    },
    mark: {
      type: Function,
      "default": function _default() {}
    },
    event: {
      type: Function,
      "default": function _default() {}
    }
  },
  setup: function setup(props, _ref) {
    var emit = _ref.emit;

    var onRender = function onRender() {
      var weeks = isArray(props.weeks) ? [].concat(props.weeks) : [];
      var days = [];
      weeks.forEach(function (week) {
        week == null ? void 0 : week.days.forEach(function (day) {
          days.push(day.date);
        });
      });
      var begin = days[0];
      var end = days[days.length - 1];
      emit('render', {
        begin: begin,
        end: end,
        days: days
      });
    };

    watch(function () {
      return props.weeks;
    }, onRender, {
      immediate: true
    });
    var firstWeek = computed(function () {
      return props.weeks[0];
    });
    var othersWeeks = computed(function () {
      return props.weeks.slice(1);
    });

    var onDayClick = function onDayClick(day) {
      emit('dayClick', day);
    };

    return {
      firstWeek: firstWeek,
      othersWeeks: othersWeeks,
      onDayClick: onDayClick
    };
  }
});

var _hoisted_1$2 = {
  "class": "fm-calendar-month"
};
var _hoisted_2$1 = {
  key: 0,
  "class": "fm-calendar-day-line-others"
};
function render$2(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_fm_calendar_week = resolveComponent("fm-calendar-week");

  return openBlock(), createBlock("div", _hoisted_1$2, [createVNode(_component_fm_calendar_week, {
    "class": "fm-calendar-week-first",
    week: _ctx.firstWeek,
    onDayClick: _ctx.onDayClick
  }, null, 8
  /* PROPS */
  , ["week", "onDayClick"]), !_ctx.collapsed ? (openBlock(), createBlock("div", _hoisted_2$1, [(openBlock(true), createBlock(Fragment, null, renderList(_ctx.othersWeeks, function (week) {
    return openBlock(), createBlock(_component_fm_calendar_week, {
      week: week,
      key: week.num,
      onDayClick: _ctx.onDayClick
    }, null, 8
    /* PROPS */
    , ["week", "onDayClick"]);
  }), 128
  /* KEYED_FRAGMENT */
  ))])) : createCommentVNode("v-if", true)]);
}

script$2.render = render$2;
script$2.__file = "packages/calendar/src/month.vue";

var _components$2;
var script$3 = defineComponent({
  name: 'fm-calendar-header',
  components: (_components$2 = {}, _components$2[script.name] = script, _components$2),
  props: {
    title: String,
    view: String,
    prevText: String,
    nextText: String,
    theme: String,
    currentDate: {
      type: Object,
      "default": function _default() {
        return {};
      }
    },
    dayLabels: {
      type: Array,
      "default": function _default() {
        return [];
      }
    }
  }
});

var _hoisted_1$3 = {
  "class": "fm-calendar-header"
};
var _hoisted_2$2 = {
  key: 0,
  "class": "fm-calendar-header-title"
};
var _hoisted_3$1 = {
  "class": "fm-calendar-header-subtitle"
};
var _hoisted_4$1 = {
  "class": "left"
};
var _hoisted_5 = {
  key: 0
};
var _hoisted_6 = {
  "class": "fm-calendar-header-text"
};
var _hoisted_7 = {
  "class": "right"
};
var _hoisted_8 = {
  key: 0
};
var _hoisted_9 = {
  "class": "fm-calendar-header-weekdays"
};
function render$3(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_fm_icon = resolveComponent("fm-icon");

  return openBlock(), createBlock("div", _hoisted_1$3, [_ctx.title ? (openBlock(), createBlock("div", _hoisted_2$2, toDisplayString(_ctx.title), 1
  /* TEXT */
  )) : createCommentVNode("v-if", true), createVNode("div", _hoisted_3$1, [createVNode("div", _hoisted_4$1, [_ctx.theme === 'form' ? (openBlock(), createBlock("div", {
    key: 0,
    "class": "fm-calendar-header-button",
    onClick: _cache[1] || (_cache[1] = function ($event) {
      return _ctx.$emit('db-prev-click');
    })
  }, [renderSlot(_ctx.$slots, "db-prev", {}, function () {
    return [createVNode(_component_fm_icon, {
      name: "s-rewind"
    })];
  })])) : createCommentVNode("v-if", true), createVNode("div", {
    "class": "fm-calendar-header-button",
    onClick: _cache[2] || (_cache[2] = function ($event) {
      return _ctx.$emit('prev-click');
    })
  }, [_ctx.prevText ? (openBlock(), createBlock("span", _hoisted_5, toDisplayString(_ctx.prevText), 1
  /* TEXT */
  )) : renderSlot(_ctx.$slots, "prev", {
    key: 1
  }, function () {
    return [createVNode(_component_fm_icon, {
      name: "s-arrow-left"
    })];
  })])]), createVNode("div", _hoisted_6, [renderSlot(_ctx.$slots, "title", {
    currentDate: _ctx.currentDate
  }, function () {
    return [createVNode("span", null, toDisplayString(_ctx.currentDate.year + "\u5E74" + (_ctx.currentDate.month + 1) + "\u6708"), 1
    /* TEXT */
    )];
  })]), createVNode("div", _hoisted_7, [createVNode("div", {
    "class": "fm-calendar-header-button",
    onClick: _cache[3] || (_cache[3] = function ($event) {
      return _ctx.$emit('next-click');
    })
  }, [_ctx.nextText ? (openBlock(), createBlock("span", _hoisted_8, toDisplayString(_ctx.nextText), 1
  /* TEXT */
  )) : renderSlot(_ctx.$slots, "next", {
    key: 1
  }, function () {
    return [createVNode(_component_fm_icon, {
      name: "s-arrow"
    })];
  })]), _ctx.theme === 'form' ? (openBlock(), createBlock("div", {
    key: 0,
    "class": "fm-calendar-header-button",
    onClick: _cache[4] || (_cache[4] = function ($event) {
      return _ctx.$emit('db-next-click');
    })
  }, [renderSlot(_ctx.$slots, "db-next", {}, function () {
    return [createVNode(_component_fm_icon, {
      name: "s-forword"
    })];
  })])) : createCommentVNode("v-if", true)])]), createVNode("div", _hoisted_9, [(openBlock(true), createBlock(Fragment, null, renderList(_ctx.dayLabels, function (dayLabel) {
    return openBlock(), createBlock("span", {
      "class": "fm-calendar-weekday",
      key: dayLabel
    }, toDisplayString(dayLabel), 1
    /* TEXT */
    );
  }), 128
  /* KEYED_FRAGMENT */
  ))])]);
}

script$3.render = render$3;
script$3.__file = "packages/calendar/src/header.vue";

var CalendarProps = {
  type: {
    type: String,
    "default": 'single'
  },
  modelValue: {
    type: Object,
    "default": function _default() {
      return new Date();
    }
  },
  firstDay: {
    type: String,
    "default": 'monday',
    validator: function validator(val) {
      return WEEK.includes(val);
    }
  },
  view: {
    type: String,
    "default": 'month',
    validator: function validator(val) {
      return VIEW.includes(val);
    }
  },
  title: String,
  prevText: String,
  nextText: String,
  theme: {
    type: String,
    "default": 'card'
  },
  mark: {
    type: Function,
    "default": function _default() {}
  },
  event: {
    type: Function,
    "default": function _default() {}
  },
  events: {
    type: Array,
    "default": function _default() {
      return [];
    }
  },
  useCollapse: {
    type: Boolean,
    "default": false
  },
  useLunar: {
    type: Boolean,
    "default": true
  }
};

var _components$3;
var script$4 = defineComponent({
  name: 'fm-calendar',
  components: (_components$3 = {}, _components$3[script$1.name] = script$1, _components$3[script$2.name] = script$2, _components$3[script$3.name] = script$3, _components$3),
  provide: function provide() {
    return {
      calendar: this
    };
  },
  props: CalendarProps,
  emits: ['update:modelValue', 'dayClick', 'prev-click', 'next-click', 'render'],
  setup: function setup(props, _ref) {
    var emit = _ref.emit;
    var selecteds = [];
    var selectedRange = reactive({});
    useExpose({
      selecteds: selecteds,
      selectedRange: selectedRange
    });
    var dayLabels = computed(function () {
      return genDayLabels(props.firstDay);
    });
    var innerValue = ref(props.modelValue);
    var current = ref(new Date());

    var _goto = function _goto(date) {
      current.value = date instanceof Date ? date : date != null && date.begin && isValidDate(date.begin) ? date.begin : current.value;
      weeks.value = getWeeks(current.value);
    };

    var currentDate = computed(function () {
      return getDateObj(current);
    });
    var weeks = ref([]);

    var getWeeks = function getWeeks(value) {
      return genWeeks(getDateObj(value), props.view, props.firstDay, innerValue.value);
    };

    watch(function () {
      return props.modelValue;
    }, function (value) {
      innerValue.value = value;

      _goto(value);

      if (!(value instanceof Date)) {
        selectedRange.begin = value.begin;
        selectedRange.end = value.end;
      }
    }, {
      immediate: true
    });

    var gotoByClick = function gotoByClick(gotoType, clickType) {
      if (gotoType === void 0) {
        gotoType = 'prev';
      }

      var _unref = unref(currentDate),
          year = _unref.year,
          month = _unref.month,
          date = _unref.date;

      if (clickType === 'db') {
        if (props.view === 'week') {
          _goto(new Date(year, gotoType === 'prev' ? month - 1 : month + 1));
        } else if (props.view === 'month') {
          _goto(new Date(gotoType === 'prev' ? year - 1 : year + 1, month));
        }
      } else {
        if (props.view === 'week') {
          _goto(new Date(year, month, gotoType === 'prev' ? date - 7 : date + 7));
        } else if (props.view === 'month') {
          _goto(new Date(year, gotoType === 'prev' ? month - 1 : month + 1));
        }
      }
    };

    var next = function next(type) {
      gotoByClick('next', type);
      emit('next-click', unref(currentDate));
    };

    var prev = function prev(type) {
      gotoByClick('prev', type);
      emit('prev-click', unref(currentDate));
    };

    var onDayClick = function onDayClick(day) {
      onSelected(day);
      emit('dayClick', day);
    };

    var onSelected = function onSelected(day) {
      if (props.type === 'single') {
        clearSelected(weeks.value);
        emit('update:modelValue', day.date);
      } else if (props.type === 'range') {
        if (selectedRange.begin && selectedRange.end) {
          selectedRange.begin = day.date;
          selectedRange.end = undefined;
          clearSelected(weeks.value);
        } else if (selectedRange.begin) {
          if (isAfter(selectedRange.begin, day.date)) {
            selectedRange.begin = day.date;
            clearSelected(weeks.value);
          } else {
            selectedRange.end = day.date;
            emit('update:modelValue', {
              begin: selectedRange.begin,
              end: selectedRange.end
            });
          }
        } else {
          clearSelected(weeks.value);
          selectedRange.begin = day.date;
        }

        innerValue.value = _extends({}, selectedRange);
      }

      day.selected = true;
    };

    var bodyRef = ref();
    var bodyStyle = ref({});

    var onTouchEnd = function onTouchEnd() {
      bodyStyle.value = {
        transform: "translateX(0)",
        transition: 'transform 0.3s'
      };
      var startX = offset.startX,
          endX = offset.endX;
      resetTouchStatus();

      if (!endX) {
        return;
      }

      var offsetX = startX - endX;

      if (offsetX > 50) {
        next();
      } else if (offsetX < -50) {
        prev();
      }
    };

    var onTouchMove = function onTouchMove() {
      bodyStyle.value = {
        transform: "translateX(" + offset.offsetX + "px)"
      };
    };

    var _useTouchMove = useTouchMove(bodyRef, {
      onTouchMove: onTouchMove,
      onTouchEnd: onTouchEnd
    }, 0),
        offset = _useTouchMove.offset,
        resetTouchStatus = _useTouchMove.resetTouchStatus;

    var onRender = function onRender(range) {
      emit('render', range);
    };

    var collapsed = ref(false);

    var toggle = function toggle() {
      collapsed.value = !collapsed.value;
    };

    return {
      collapsed: collapsed,
      dayLabels: dayLabels,
      currentDate: currentDate,
      bodyStyle: bodyStyle,
      offset: offset,
      weeks: weeks,
      prev: prev,
      next: next,
      onDayClick: onDayClick,
      bodyRef: bodyRef,
      toggle: toggle,
      onRender: onRender
    };
  }
});

var _hoisted_1$4 = {
  "class": "fm-calendar-body",
  ref: "bodyRef"
};
var _hoisted_2$3 = {
  key: 0,
  "class": "left"
};
var _hoisted_3$2 = {
  key: 1,
  "class": "right"
};
var _hoisted_4$2 = {
  key: 2,
  "class": "back-ground"
};
var _hoisted_5$1 = {
  key: 3,
  "class": "fm-calendar-collapse"
};

var _hoisted_6$1 = /*#__PURE__*/createVNode("div", {
  "class": "fm-calendar-footer"
}, null, -1
/* HOISTED */
);

function render$4(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_fm_calendar_header = resolveComponent("fm-calendar-header");

  var _component_fm_calendar_month = resolveComponent("fm-calendar-month");

  var _component_fm_calendar_week = resolveComponent("fm-calendar-week");

  return openBlock(), createBlock("div", {
    "class": ["fm-calendar", 'fm-calendar-theme-' + _ctx.theme]
  }, [createVNode(_component_fm_calendar_header, {
    theme: _ctx.theme,
    currentDate: _ctx.currentDate,
    title: _ctx.title,
    view: _ctx.view,
    prevText: _ctx.prevText,
    nextText: _ctx.nextText,
    dayLabels: _ctx.dayLabels,
    onPrevClick: _ctx.prev,
    onDbPrevClick: _cache[1] || (_cache[1] = function ($event) {
      return _ctx.prev('db');
    }),
    onNextClick: _ctx.next,
    onDbNextClick: _cache[2] || (_cache[2] = function ($event) {
      return _ctx.next('db');
    })
  }, null, 8
  /* PROPS */
  , ["theme", "currentDate", "title", "view", "prevText", "nextText", "dayLabels", "onPrevClick", "onNextClick"]), createVNode("div", _hoisted_1$4, [_ctx.offset.offsetX > 50 ? (openBlock(), createBlock("div", _hoisted_2$3, "上一页")) : createCommentVNode("v-if", true), createVNode("div", {
    "class": "fm-calendar-body-slide-wrapper",
    style: _ctx.bodyStyle
  }, [_ctx.view === 'month' ? (openBlock(), createBlock(_component_fm_calendar_month, {
    key: 0,
    weeks: _ctx.weeks,
    collapsed: _ctx.collapsed,
    onDayClick: _ctx.onDayClick,
    onRender: _ctx.onRender
  }, null, 8
  /* PROPS */
  , ["weeks", "collapsed", "onDayClick", "onRender"])) : createCommentVNode("v-if", true), _ctx.view === 'week' ? (openBlock(), createBlock(_component_fm_calendar_week, {
    key: 1,
    week: _ctx.weeks[0],
    onDayClick: _ctx.onDayClick,
    onRender: _ctx.onRender
  }, null, 8
  /* PROPS */
  , ["week", "onDayClick", "onRender"])) : createCommentVNode("v-if", true)], 4
  /* STYLE */
  ), _ctx.offset.offsetX < -50 ? (openBlock(), createBlock("div", _hoisted_3$2, "下一页")) : createCommentVNode("v-if", true), _ctx.theme === 'form' ? (openBlock(), createBlock("div", _hoisted_4$2, toDisplayString(_ctx.currentDate.month + 1), 1
  /* TEXT */
  )) : createCommentVNode("v-if", true), _ctx.view === 'month' && _ctx.useCollapse ? (openBlock(), createBlock("div", _hoisted_5$1, [_ctx.collapsed ? (openBlock(), createBlock("span", {
    key: 0,
    onClick: _cache[3] || (_cache[3] = function () {
      return _ctx.toggle && _ctx.toggle.apply(_ctx, arguments);
    })
  }, "展开")) : createCommentVNode("v-if", true), !_ctx.collapsed ? (openBlock(), createBlock("span", {
    key: 1,
    onClick: _cache[4] || (_cache[4] = function () {
      return _ctx.toggle && _ctx.toggle.apply(_ctx, arguments);
    })
  }, "收起")) : createCommentVNode("v-if", true)])) : createCommentVNode("v-if", true)], 512
  /* NEED_PATCH */
  ), _hoisted_6$1], 2
  /* CLASS */
  );
}

script$4.render = render$4;
script$4.__file = "packages/calendar/src/calendar-panel.vue";

var _hoisted_1$5 = {
  key: 0,
  "class": "footer"
};

var _hoisted_2$4 = /*#__PURE__*/createTextVNode(" 确定 ");
var __default__ = {
  name: 'fm-calendar-input'
};
var script$5 = defineComponent(_extends({}, __default__, {
  expose: [],
  props: _extends({}, InputCommonProps, CalendarProps, {
    modelValue: {
      type: [String, Object],
      "default": ''
    },
    theme: {
      type: String,
      "default": 'form'
    },
    label: {
      type: String,
      "default": ''
    },
    format: {
      type: String,
      "default": 'yyyy-MM-dd'
    }
  }),
  setup: function setup(__props) {
    var props = __props;

    var _useContext = useContext(),
        emit = _useContext.emit;

    var show = ref(false);

    var onInputClick = function onInputClick() {
      if (props.readonly || props.disabled) {
        return;
      }

      show.value = true;
      innerValue.value = getInnerValue(props.modelValue, props.format);
    };

    var getInnerValue = function getInnerValue(value, _format) {
      if (props.type === 'single') {
        return value ? parse(value, _format) : new Date();
      } else {
        var _ref = isString(value) ? value.split('~') : value != null && value.begin && value != null && value.end ? Object.values(value) : [],
            begin = _ref[0],
            end = _ref[1];

        return {
          begin: begin ? parse(begin, _format) : undefined,
          end: end ? parse(end, _format) : undefined
        };
      }
    };

    var getTextValue = function getTextValue(value, _format) {
      if (!value) {
        return '';
      }

      if (props.type === 'single') {
        return isDate(value) ? format(value, _format) : value;
      } else {
        return value.begin && value.end ? format(value.begin, _format) + '~' + format(value.end, _format) : '';
      }
    };

    var innerValue = ref(getInnerValue(props.modelValue, props.format));
    var innerText = ref(getTextValue(innerValue.value, props.format));
    watch(function () {
      return props.modelValue;
    }, function (newValue) {
      innerValue.value = newValue !== innerText.value ? getInnerValue(newValue, props.format) : innerValue.value;
      innerText.value = getTextValue(innerValue.value, props.format);
    });

    var onUpdateModelValue = function onUpdateModelValue() {
      if (props.type === 'single') {
        onConirm();
      }
    };

    var onConirm = function onConirm() {
      innerText.value = getTextValue(innerValue.value, props.format);
      var modelValue = '';

      if (props.type === 'single') {
        modelValue = isDate(props.modelValue) ? innerValue.value : innerText.value;
      } else {
        modelValue = isDate(props.modelValue['begin']) ? innerValue.value : innerText.value;
      }

      emit('update:modelValue', modelValue);
      show.value = false;
    };

    return function (_ctx, _cache) {
      var _component_fm_calendar = resolveComponent("fm-calendar");

      var _component_fm_button = resolveComponent("fm-button");

      var _component_fm_popup = resolveComponent("fm-popup");

      return openBlock(), createBlock(Fragment, null, [createVNode(unref(FmInput), {
        modelValue: innerText.value,
        label: __props.label,
        placeholder: _ctx.placeholder,
        required: _ctx.required,
        editable: false,
        readonly: _ctx.readonly,
        disabled: _ctx.disabled,
        clickable: !(props.readonly || props.disabled),
        inputAlign: _ctx.inputAlign,
        errorMessage: _ctx.errorMessage,
        errorMessageAlign: _ctx.errorMessageAlign,
        rightIcon: !(props.readonly || props.disabled) ? _ctx.rightIcon : '',
        onClick: onInputClick
      }, null, 8
      /* PROPS */
      , ["modelValue", "label", "placeholder", "required", "readonly", "disabled", "clickable", "inputAlign", "errorMessage", "errorMessageAlign", "rightIcon"]), createVNode(_component_fm_popup, {
        show: show.value,
        "onUpdate:show": _cache[3] || (_cache[3] = function ($event) {
          return show.value = $event;
        }),
        position: "bottom",
        "class": "fm-calendar-pop-wrapper",
        round: ""
      }, {
        "default": withCtx(function () {
          return [createVNode(_component_fm_calendar, {
            modelValue: innerValue.value,
            "onUpdate:modelValue": [_cache[1] || (_cache[1] = function ($event) {
              return innerValue.value = $event;
            }), onUpdateModelValue],
            theme: __props.theme,
            type: _ctx.type,
            title: __props.label,
            useLunar: _ctx.useLunar,
            firstDay: _ctx.firstDay,
            view: _ctx.view,
            mark: _ctx.mark,
            event: _ctx.event,
            events: _ctx.events,
            onRender: _cache[2] || (_cache[2] = function ($event) {
              return _ctx.$emit('render', $event);
            })
          }, null, 8
          /* PROPS */
          , ["modelValue", "theme", "type", "title", "useLunar", "firstDay", "view", "mark", "event", "events"]), _ctx.type !== 'single' ? (openBlock(), createBlock("div", _hoisted_1$5, [createVNode(_component_fm_button, {
            "class": "confirm",
            type: "primary",
            size: "large",
            round: "",
            onClick: onConirm
          }, {
            "default": withCtx(function () {
              return [_hoisted_2$4];
            }),
            _: 1
            /* STABLE */

          })])) : createCommentVNode("v-if", true)];
        }),
        _: 1
        /* STABLE */

      }, 8
      /* PROPS */
      , ["show"])], 64
      /* STABLE_FRAGMENT */
      );
    };
  }
}));

script$5.__file = "packages/calendar/src/calendar-input.vue";

script$4.install = function (app) {
  app.component(script$4.name, script$4);
};

script$5.install = function (app) {
  app.component(script$5.name, script$5);
};

export default script$4;
export { script$4 as Calendar, script$5 as CalendarInput };
