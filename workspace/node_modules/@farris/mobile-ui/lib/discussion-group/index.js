import { computed, openBlock, createBlock, Fragment, renderList, createVNode, createCommentVNode, toDisplayString, createTextVNode, ref, onMounted, watch, resolveComponent, withCtx } from 'vue';
import Input from '../input';
import Icon from '../icon';
import Button from '../button';
import Toast from '../toast';
import Lookup from '../lookup-panel';
import LookupInput from '../lookup';

function resetData(data) {
  var results = [];

  if (data && data.commentIds && data.commentIds.length) {
    data.commentIds.forEach(function (commentId) {
      var item = data['comments'].find(function (comment) {
        return comment["id"] === commentId;
      });

      if (item) {
        var id = item["id"],
            userId = item["userId"],
            userName = item['user']["name"],
            imgData = item['user'].hasOwnProperty('imgData') ? item['user']["imgData"] : '',
            commentDate = item["commentDate"],
            text = item["text"],
            attachFiles = item.hasOwnProperty('attachFiles') ? item["attachFiles"] : [],
            parentData;

        if (item.hasOwnProperty('parentId')) {
          var parentItem = data['comments'].find(function (i) {
            return i.id === item.parentId;
          });

          if (parentItem) {
            var parid = parentItem["id"],
                paruserId = parentItem["userId"],
                paruserName = parentItem['user']["name"],
                parimgData = parentItem['user'].hasOwnProperty('imgData') ? parentItem['user']["imgData"] : '',
                parcommentDate = parentItem["commentDate"],
                partext = parentItem["text"],
                parattachFiles = parentItem.hasOwnProperty('attachFiles') ? parentItem["attachFiles"] : [];
            parentData = {
              id: parid,
              userId: paruserId,
              userName: paruserName,
              imgData: parimgData,
              commentDate: parcommentDate,
              text: partext,
              attachFiles: parattachFiles
            };
          }
        }

        var thisData = {
          id: id,
          userId: userId,
          userName: userName,
          imgData: imgData,
          commentDate: commentDate,
          text: text,
          attachFiles: attachFiles,
          parentData: parentData
        };
        results.push(thisData);
      } else {
        return;
      }
    });
  }

  return results;
}
function dateFormate(value) {
  if (value) {
    var date = new Date(value);

    if (isValidDate(date)) {
      var Y = date.getFullYear() + '-';
      var M = (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1) + '-';
      var D = date.getDate() < 10 ? '0' + date.getDate() + ' ' : date.getDate() + ' ';
      var h = date.getHours() < 10 ? '0' + date.getHours() + ':' : date.getHours() + ':';
      var m = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes();
      return Y + M + D + h + m;
    } else {
      return value;
    }
  } else {
    return '';
  }
}

function isValidDate(date) {
  return date instanceof Date && !isNaN(date.getTime());
}

var script = {
  name: 'fm-discussion-list',
  props: {
    discussionListData: {
      type: Object
    }
  },
  emits: ['reply'],
  setup: function setup(props, _ref) {
    var emit = _ref.emit;
    var dateFormateFun = dateFormate;
    var innerDiscussionListData = computed(function () {
      if (props.discussionListData) {
        return resetData(props.discussionListData);
      } else {
        return [];
      }
    });

    var getAvatar = function getAvatar(item) {
      if (item && item['userName']) {
        var str = item['userName'];
        return str.substring(str.length - 2, str.length);
      } else {
        return '';
      }
    };

    var replyMessage = function replyMessage(item) {
      emit('reply', item);
    };

    return {
      replyMessage: replyMessage,
      innerDiscussionListData: innerDiscussionListData,
      getAvatar: getAvatar,
      dateFormateFun: dateFormateFun
    };
  }
};

const _hoisted_1 = { class: "fm-discussion-list" };
const _hoisted_2 = { class: "list-item-avatar" };
const _hoisted_3 = { class: "list-item-content" };
const _hoisted_4 = { class: "list-item-name" };
const _hoisted_5 = {
  key: 0,
  class: "list-item-reply"
};
const _hoisted_6 = { class: "list-item-reply-title" };
const _hoisted_7 = /*#__PURE__*/createTextVNode(" 回复 ");
const _hoisted_8 = { class: "list-item-reply-name" };
const _hoisted_9 = /*#__PURE__*/createTextVNode("： ");
const _hoisted_10 = { class: "list-item-buttom" };

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return (openBlock(), createBlock("div", _hoisted_1, [
    (openBlock(true), createBlock(Fragment, null, renderList($setup.innerDiscussionListData, (item, index) => {
      return (openBlock(), createBlock("div", {
        class: "fm-discussion-list-item",
        key: item.id
      }, [
        createVNode("div", _hoisted_2, [
          (item.imgData)
            ? (openBlock(), createBlock("img", {
                key: 0,
                src: item.imgData,
                alt: "",
                class: "list-item-avatar-image"
              }, null, 8 /* PROPS */, ["src"]))
            : createCommentVNode("v-if", true),
          (!item.imgData)
            ? (openBlock(), createBlock("div", {
                key: 1,
                class: "list-item-avatar-image-tip",
                innerHTML: $setup.getAvatar(item)
              }, null, 8 /* PROPS */, ["innerHTML"]))
            : createCommentVNode("v-if", true)
        ]),
        createVNode("div", _hoisted_3, [
          createVNode("div", _hoisted_4, toDisplayString(item.userName), 1 /* TEXT */),
          createVNode("div", {
            class: "list-item-text",
            innerHTML: item.text
          }, null, 8 /* PROPS */, ["innerHTML"]),
          (item.parentData)
            ? (openBlock(), createBlock("div", _hoisted_5, [
                createVNode("span", _hoisted_6, [
                  _hoisted_7,
                  createVNode("span", _hoisted_8, toDisplayString(item.parentData.userName), 1 /* TEXT */),
                  _hoisted_9
                ]),
                createVNode("span", {
                  class: "list-item-reply-content",
                  innerHTML: item.parentData.text
                }, null, 8 /* PROPS */, ["innerHTML"])
              ]))
            : createCommentVNode("v-if", true),
          createVNode("div", _hoisted_10, [
            (item.commentDate && item.commentDate.length)
              ? (openBlock(), createBlock("span", {
                  key: 0,
                  class: "list-item-date",
                  innerHTML: $setup.dateFormateFun(item.commentDate)
                }, null, 8 /* PROPS */, ["innerHTML"]))
              : createCommentVNode("v-if", true),
            createVNode("div", {
              class: "list-item-btn",
              onClick: $event => ($setup.replyMessage(item))
            }, "回复", 8 /* PROPS */, ["onClick"])
          ])
        ])
      ]))
    }), 128 /* KEYED_FRAGMENT */))
  ]))
}

script.render = render;
script.__file = "packages/discussion-group/src/discussion-list/index.vue";

var _components;
var script$1 = {
  name: 'fm-discussion-editor',
  components: (_components = {}, _components[Input.name] = Input, _components[Icon.name] = Icon, _components[Button.name] = Button, _components[Toast.name] = Toast, _components[Lookup.name] = Lookup, _components[LookupInput.name] = LookupInput, _components),
  props: {
    placeholder: {
      type: String,
      "default": '请输入评论'
    },
    replyUser: {
      type: Object
    },
    personnelsData: {
      type: Object
    },
    editHeight: {
      type: Number,
      "default": 130
    },
    idField: {
      type: String,
      "default": '',
      required: true
    },
    textField: {
      type: String,
      "default": '',
      required: true
    }
  },
  emits: ['submit', 'change'],
  setup: function setup(props, _ref) {
    var emit = _ref.emit;
    var editorValue = ref(''); //评论内容

    var editorData = {
      //提交格式
      text: '',
      replyUser: props.replyUser,
      mailTos: []
    };
    var personnelsPrimaryKey = 'id';
    var personnelsDisplayKey = 'name';
    var selectedPersonnels = []; //@人员列表

    var editorContent = ref(null); //评论ref dom

    var lookupValue = ref(''); //人员帮助数据

    onMounted(function () {
      if (props.replyUser && props.replyUser['id']) {
        editorContent.value.focus();
      }
    });
    /**
     * 评论内容变化
     */

    var modelValueChange = function modelValueChange(event) {
      if (event.target.composing) {
        return;
      }

      var children = event.target.children;
      var childrenId = [];

      for (var i = 0; i < children.length; i++) {
        childrenId.push(children[i].id);
      }

      selectedPersonnels.forEach(function (personnel, index) {
        if (!childrenId.includes(personnel[personnelsPrimaryKey])) {
          selectedPersonnels.splice(index, 1);
        }
      });

      if (selectedPersonnels.length) {
        var text = [];
        selectedPersonnels.forEach(function (personnel) {
          text.push(personnel[props.idField]);
        });
        lookupValue.value = text.join(',');
      } else {
        lookupValue.value = '';
      } //console.log(lookupValue.value)


      emit('change', editorValue.value);
    };

    watch(function () {
      return props.replyUser;
    }, function (value) {
      editorData.replyUser = value;

      if (value && value['id']) {
        editorContent.value.focus();
      }
    });
    /**
     * 提交评论
     */

    var submitHandler = function submitHandler() {
      if (!editorContent.value.innerHTML.length) {
        Toast('评论区内容不能为空');
      } else {
        editorData.text = editorContent.value.innerHTML;
        editorData.mailTos = selectedPersonnels;
        emit('submit', editorData);
        editorValue.value = '';
        editorContent.value.innerHTML = '';
        selectedPersonnels = [];
      }
    };
    /**
     * 选中人员变化
     */


    var personnelsChange = function personnelsChange(event) {
      var selectedList = event.items;
      editorValue.value = editorContent.value.innerHTML;

      if (selectedList.length) {
        var tempValue = '';
        selectedList.forEach(function (item) {
          if (selectedPersonnels.length && isInArray(item[personnelsPrimaryKey], personnelsPrimaryKey, selectedPersonnels)) {
            return;
          } else {
            tempValue += '<a name="personnel" contenteditable="false" class="at-user" id="' + item[personnelsPrimaryKey] + '" userid="' + item[personnelsPrimaryKey] + '">@' + item[personnelsDisplayKey] + '</a>&nbsp;';
            selectedPersonnels.push(item);
          }
        });
        editorValue.value += tempValue;
      }
    };
    /**
     * 是否在数组中
     */


    var isInArray = function isInArray(value, fieldInArray, array) {
      if (!value || !fieldInArray) {
        return false;
      }

      return array.findIndex(function (item) {
        return value === item[fieldInArray];
      }) === -1 ? false : true;
    };

    return {
      submitHandler: submitHandler,
      modelValueChange: modelValueChange,
      editorValue: editorValue,
      personnelsChange: personnelsChange,
      editorContent: editorContent,
      lookupValue: lookupValue
    };
  }
};

const _hoisted_1$1 = { class: "fm-discussion-editor" };
const _hoisted_2$1 = {
  key: 0,
  class: "fm-discussion-editor-reply"
};
const _hoisted_3$1 = /*#__PURE__*/createTextVNode(" 回复: ");
const _hoisted_4$1 = { class: "editor-reply-text" };
const _hoisted_5$1 = { class: "fm-discussion-editor-input" };
const _hoisted_6$1 = { class: "fm-discussion-editor-buttom" };
const _hoisted_7$1 = /*#__PURE__*/createTextVNode("提交");

function render$1(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_fm_lookup_input = resolveComponent("fm-lookup-input");
  const _component_fm_button = resolveComponent("fm-button");

  return (openBlock(), createBlock("div", _hoisted_1$1, [
    ($props.replyUser && $props.replyUser.id)
      ? (openBlock(), createBlock("div", _hoisted_2$1, [
          _hoisted_3$1,
          createVNode("span", _hoisted_4$1, toDisplayString($props.replyUser.userName), 1 /* TEXT */)
        ]))
      : createCommentVNode("v-if", true),
    createVNode("div", _hoisted_5$1, [
      createVNode("div", {
        class: "fm-discussion-editor-textarea",
        contenteditable: "true",
        innerHTML: $setup.editorValue,
        placeholder: $props.placeholder,
        onInput: _cache[1] || (_cache[1] = $event => ($setup.modelValueChange($event))),
        ref: "editorContent",
        style: {
                'height': $props.editHeight+'px'
            }
      }, null, 44 /* STYLE, PROPS, HYDRATE_EVENTS */, ["innerHTML", "placeholder"]),
      createVNode("div", _hoisted_6$1, [
        createVNode(_component_fm_lookup_input, {
          selectedValues: $setup.lookupValue,
          idField: $props.idField,
          textField: $props.textField,
          multiSelect: true,
          data: $props.personnelsData,
          onValueChange: _cache[2] || (_cache[2] = $event => ($setup.personnelsChange($event)))
        }, {
          template: withCtx((slotProps) => [
            createVNode("div", {
              class: "fm-discussion-editor-toolbar",
              onClick: slotProps.click
            }, " @人员 ", 8 /* PROPS */, ["onClick"])
          ]),
          _: 1 /* STABLE */
        }, 8 /* PROPS */, ["selectedValues", "idField", "textField", "data"]),
        createVNode(_component_fm_button, {
          type: "primary",
          size: "mini",
          onClick: _cache[3] || (_cache[3] = $event => ($setup.submitHandler()))
        }, {
          default: withCtx(() => [
            _hoisted_7$1
          ]),
          _: 1 /* STABLE */
        })
      ])
    ])
  ]))
}

script$1.render = render$1;
script$1.__file = "packages/discussion-group/src/discussion-editor/index.vue";

script.install = function (app) {
  app.component(script.name, script);
};

script$1.install = function (app) {
  app.component(script$1.name, script$1);
};

export default script;
export { script$1 as DiscussionEditor, script as DiscussionList };
