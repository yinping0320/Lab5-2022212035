import Button from '../button';
import { resolveComponent, openBlock, createBlock, withCtx, createVNode, createCommentVNode, renderSlot, Fragment, renderList, toDisplayString, withModifiers, createTextVNode } from 'vue';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var overflowScrollReg = /scroll|auto/i;
function getScroller(el) {
  var root = window;
  var node = el;

  while (node && node.tagName !== 'HTML' && node.nodeType === 1 && node !== root) {
    var _window$getComputedSt = window.getComputedStyle(node),
        overflowY = _window$getComputedSt.overflowY;

    if (overflowScrollReg.test(overflowY)) {
      if (node.tagName !== 'BODY') {
        return node;
      }

      var _window$getComputedSt2 = window.getComputedStyle(node.parentNode),
          htmlOverflowY = _window$getComputedSt2.overflowY;

      if (overflowScrollReg.test(htmlOverflowY)) {
        return node;
      }
    }

    node = node.parentNode;
  }

  return root;
}

var _components;
var script = {
  name: 'fm-listview',
  props: {
    listData: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    error: {
      type: Boolean,
      "default": false
    },
    finished: {
      type: Boolean,
      "default": false
    },
    loading: {
      type: Boolean,
      "default": false
    },
    errorText: {
      type: String,
      "default": '请求失败，点击重新加载'
    },
    loadingText: {
      type: String,
      "default": '加载中...'
    },
    finishedText: {
      type: String,
      "default": '没有更多了'
    },
    showFinishedText: {
      type: Boolean,
      "default": false
    },
    immediateCheck: {
      type: Boolean,
      "default": true
    },
    offset: {
      type: [Number, String],
      "default": 30
    },
    direction: {
      type: String,
      "default": 'down'
    },
    multiple: {
      type: Boolean,
      "default": false
    },
    btns: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    showSubmitBtn: {
      type: Boolean,
      "default": true
    },
    className: {
      type: String
    },
    listidName: {
      type: String,
      "default": 'id'
    },
    fill: {
      type: Boolean,
      "default": false
    },
    initMultiSelect: {
      type: Boolean,
      "default": false
    },
    enablePullRefresh: {
      type: Boolean,
      "default": false
    },
    listRefreshing: {
      type: Boolean,
      "default": false
    }
  },
  components: (_components = {}, _components[Button.name] = Button, _components),
  data: function data() {
    return {
      innerLoading: this.loading,
      scroller: null,
      longPressTimer: 0,
      listMultiple: false,
      storageListData: [],
      inListData: [],
      currentListItem: {},
      //当前选中行
      selectDataList: [],
      //多选选中项
      throttleLoad: null,
      refreshdisabled: false,
      innerRefreshing: this.listRefreshing,
      initMultiList: false
    };
  },
  computed: {
    innerListData: {
      // getter
      get: function get() {
        var _this = this;

        var data = [];

        if (this.listData && this.listData.length) {
          if (!this.multiple) {
            data = this.listData.map(function (o) {
              return _extends({}, o);
            });
          } else {
            //判断传入数据是否带checked属性
            var initSelectData = false;
            var initData = this.listData.filter(function (item) {
              return item.hasOwnProperty('checked');
            });

            if (initData && initData.length) {
              initSelectData = true;
            }

            data = this.listData.map(function (item, index) {
              if (initSelectData) {
                if (!item.hasOwnProperty('checked')) {
                  item.checked = false;
                }
              } else {
                if (_this.selectDataList && _this.selectDataList.length) {
                  var result = _this.selectDataList.find(function (selectItem, i) {
                    return _this.getKey(selectItem, i) === _this.getKey(item, index);
                  });

                  if (result) {
                    item.checked = true;
                  }
                }
              }

              return item;
            });
            this.selectDataList = data.map(function (o) {
              return _extends({}, o);
            }).filter(function (item) {
              return item.checked;
            });
          }
        }

        this.inListData = data;
        return data;
      },
      // setter
      set: function set(newValue) {
        this.inListData = newValue;
      }
    }
  },
  updated: function updated() {
    this.innerLoading = this.loading;
    this.innerRefreshing = this.listRefreshing;
  },
  mounted: function mounted() {
    if (this.fill) {
      this.scroller = getScroller(this.$refs.listviewMain);
    } else {
      this.scroller = getScroller(this.$el);
    }

    var _this = this;

    this.throttleLoad = this.throttle(function () {
      _this.check();
    }, 200); // this.scroller.addEventListener('scroll', this.check);

    this.scroller.addEventListener('scroll', this.throttleLoad);

    if (this.immediateCheck) {
      this.check();
    }

    window.addEventListener('contextmenu', function (e) {
      e.preventDefault();
    });

    if (this.initMultiSelect) {
      this.initMultiList = true;
      this.listCheckStart();
    }
  },
  activated: function activated() {
    // this.scroller.addEventListener('scroll', this.check);
    this.scroller.addEventListener('scroll', this.throttleLoad);
  },
  beforeUnmount: function beforeUnmount() {
    this.scroller.removeEventListener('scroll', this.throttleLoad);
  },
  deactivated: function deactivated() {
    this.scroller.removeEventListener('scroll', this.throttleLoad);
  },
  watch: {
    loading: 'check',
    finished: 'check',
    innerListData: {
      handler: function handler(newVal) {
        this.inListData = newVal;
      },
      deep: true
    },
    initMultiSelect: {
      handler: function handler(val, oldVal) {
        if (val == oldVal) return;
        if (val) this.listCheckStart();else this.listMultiple = false;
      }
    }
  },
  methods: {
    /**判断是否需要取数据 */
    check: function check() {
      var _this2 = this;

      this.$nextTick(function () {
        var scroller = _this2.scroller,
            offset = _this2.offset,
            direction = _this2.direction;
        var scrollerRect;

        if (scroller.getBoundingClientRect) {
          scrollerRect = scroller.getBoundingClientRect();
        } else {
          scrollerRect = {
            top: 0,
            bottom: scroller.innerHeight
          };
        }

        var isReachTop = false;

        var topPlaceholderRect = _this2.$refs.topPlaceholder.getBoundingClientRect();

        isReachTop = scrollerRect.top <= topPlaceholderRect.top;

        _this2.$emit('reachTop', isReachTop);

        _this2.refreshdisabled = isReachTop ? false : true;

        if (_this2.innerLoading || _this2.finished || _this2.error) {
          return;
        }

        var scrollerHeight = scrollerRect.bottom - scrollerRect.top;

        if (!scrollerHeight) {
          return false;
        }

        var isReachEdge = false;

        var placeholderRect = _this2.$refs.placeholder.getBoundingClientRect();

        if (direction === 'up') {
          isReachEdge = scrollerRect.top - placeholderRect.top <= offset;
        } else {
          isReachEdge = placeholderRect.bottom - scrollerRect.bottom <= offset;
        }

        if (isReachEdge) {
          _this2.innerLoading = true;

          _this2.$emit('update:loading', true);

          _this2.$emit('load');
        }
      });
    },
    throttle: function throttle(fn, delay) {
      var _this3 = this;

      if (delay === void 0) {
        delay = 500;
      }

      // 设置变量默认为true
      var flag = true; // 为了保证this指向，返回一个箭头函数

      return function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        // 判断如果已经在执行就直接return
        if (!flag) return; // 否则就是没有执行，将状态赋值为false

        flag = false; // 设置定时器，设置时间

        setTimeout(function () {
          // 调用apply方法确保this指向问题
          fn.apply(_this3, args); // 最后将状态重新更改为true，以便程序下次执行

          flag = true;
        }, delay);
      };
    },

    /**点击错误文字 */
    clickErrorText: function clickErrorText() {
      this.$emit('update:error', false);
      this.check();
    },

    /**长按开始 */
    goTouchStart: function goTouchStart(item, index) {
      var _this4 = this;

      this.$emit('selectChange', {
        'data': item,
        'index': index
      });
      clearTimeout(this.longPressTimer);
      this.longPressTimer = 0;

      var _this = this;

      this.longPressTimer = setTimeout(function () {
        if (_this.multiple && !_this.listMultiple) {
          _this.storageListData = _this4.inListData.map(function (o) {
            return _extends({}, o);
          });
          _this.listMultiple = true;

          _this.$emit('listMultipleChange', true);
        }
      }, 1000);
    },
    goTouchEnd: function goTouchEnd() {
      clearTimeout(this.longPressTimer);
    },
    goTouchMove: function goTouchMove() {
      clearTimeout(this.longPressTimer);
      this.longPressTimer = 0;
    },

    /**触发多选 */
    listCheckStart: function listCheckStart() {
      if (this.multiple && !this.listMultiple) {
        this.storageListData = this.inListData.map(function (o) {
          return _extends({}, o);
        });
        this.listMultiple = true;
      }
    },

    /**多选取消 */
    listCheckCancel: function listCheckCancel() {
      this.listMultiple = false;
      this.innerListData = this.storageListData;
      this.$emit('multipleCancel', true);
    },

    /**全选*/
    listCheckAll: function listCheckAll() {
      if (this.multiple && this.listMultiple) {
        this.inListData.forEach(function (item) {
          item.checked = true;
        });
        this.$forceUpdate();
      }
    },

    /**取消全选 */
    listCheckAllCancel: function listCheckAllCancel() {
      if (this.multiple && this.listMultiple) {
        this.inListData.forEach(function (item) {
          item.checked = false;
        });
        this.$forceUpdate();
      }
    },

    /**多选提交 */
    checkSubmit: function checkSubmit() {
      var data = this.inListData.filter(function (item) {
        return item.checked;
      });
      this.$emit('multipleSubmit', data);
      this.listMultiple = false;
      return data;
    },

    /**点击某一列 */
    listItemClick: function listItemClick(e, item, index) {
      var _this5 = this;

      // this.$emit('selectChange',{'data': item,'index':index});
      if (this.listMultiple && (item.isLink || item.to || item.url)) {
        e.preventDefault();
      }

      if (this.multiple && this.listMultiple && item && !item.disabled) {
        if (item['checked']) {
          var selectItemIndex = this.selectDataList.findIndex(function (selectItem, i) {
            return _this5.getKey(selectItem, i) === _this5.getKey(item, index);
          });
          this.selectDataList.splice(selectItemIndex, 1);
        } else {
          var result = this.selectDataList.find(function (selectItem, i) {
            return _this5.getKey(selectItem, i) === _this5.getKey(item, index);
          });

          if (!result) {
            this.selectDataList.unshift(item);
          }
        }

        item['checked'] = !item['checked'];
        this.$forceUpdate();
      } //抛出当前点击行


      if (item && !item.disabled) {
        this.currentListItem = item;
        this.$emit('itemClick', {
          'data': this.currentListItem,
          'index': index
        });
      }
    },
    getKey: function getKey(list, index) {
      if (this.listidName && list.hasOwnProperty(this.listidName)) {
        return list[this.listidName];
      } else {
        return index;
      }
    },
    $_onClick: function $_onClick(btn) {
      // if (btn.disabled || btn.loading) {
      //   return;
      // }
      if (typeof btn.handler === 'function') {
        // if(btn.canSubmit){
        btn.handler(btn, this.checkSubmit()); // }
        // else{
        //   btn.handler(btn);
        // }
      } // else {
      //   this.close();
      // }

    },

    /**获得当前点击行 */
    getCurrentListItem: function getCurrentListItem() {
      return this.currentListItem;
    },

    /**获得当前多选选中行 */
    getSelectDataList: function getSelectDataList() {
      if (this.multiple) {
        return this.selectDataList;
      }
    },
    onRefresh: function onRefresh() {
      this.$emit('refresh');
    }
  }
};

const _hoisted_1 = {
  key: 0,
  ref: "topPlaceholder",
  class: "fm-listview-topplaceholder"
};
const _hoisted_2 = {
  key: 1,
  ref: "placeholder",
  class: "fm-listview-placeholder"
};
const _hoisted_3 = {
  key: 2,
  class: "fm-listview-header"
};
const _hoisted_4 = {
  class: "fm-listview-main",
  ref: "listviewMain"
};
const _hoisted_5 = {
  key: 0,
  ref: "topPlaceholder",
  class: "fm-listview-topplaceholder"
};
const _hoisted_6 = {
  key: 1,
  ref: "placeholder",
  class: "fm-listview-placeholder"
};
const _hoisted_7 = {
  key: 0,
  class: "fm-checkbox"
};
const _hoisted_8 = /*#__PURE__*/createVNode("span", { class: "fm-icon fm-icon-singlechoice" }, null, -1 /* HOISTED */);
const _hoisted_9 = { class: "fm-listview-item-content" };
const _hoisted_10 = { class: "fm-cell" };
const _hoisted_11 = { class: "fm-cell-title" };
const _hoisted_12 = { class: "fm-cell-title-text" };
const _hoisted_13 = { class: "fm-cell-title-label" };
const _hoisted_14 = /*#__PURE__*/createVNode("div", { class: "fm-cell-right-icon" }, [
  /*#__PURE__*/createVNode("span", null, ">")
], -1 /* HOISTED */);
const _hoisted_15 = {
  key: 3,
  class: "fm-listview-empty"
};
const _hoisted_16 = /*#__PURE__*/createVNode("span", { class: "fm-listview-empty-text" }, "暂无数据", -1 /* HOISTED */);
const _hoisted_17 = { class: "fm-listview-error-text" };
const _hoisted_18 = {
  key: 5,
  class: "fm-listview-more"
};
const _hoisted_19 = { key: 0 };
const _hoisted_20 = { class: "fm-listview-loading" };
const _hoisted_21 = { class: "fm-listview-loading-text" };
const _hoisted_22 = { key: 1 };
const _hoisted_23 = { class: "fm-listview-finished" };
const _hoisted_24 = { class: "fm-listview-finished-text" };
const _hoisted_25 = {
  key: 6,
  ref: "placeholder",
  class: "fm-listview-placeholder"
};
const _hoisted_26 = {
  key: 3,
  class: "fm-listview-btns"
};
const _hoisted_27 = {
  key: 0,
  class: "fm-listview-btns"
};
const _hoisted_28 = {
  key: 4,
  class: "fm-listview-footer"
};
const _hoisted_29 = {
  key: 5,
  ref: "placeholder",
  class: "fm-listview-placeholder"
};

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_fm_button = resolveComponent("fm-button");
  const _component_van_pull_refresh = resolveComponent("van-pull-refresh");

  return (openBlock(), createBlock(_component_van_pull_refresh, {
    modelValue: $data.innerRefreshing,
    "onUpdate:modelValue": _cache[5] || (_cache[5] = $event => ($data.innerRefreshing = $event)),
    onRefresh: _cache[6] || (_cache[6] = $event => ($options.onRefresh())),
    disabled: $data.refreshdisabled || !$props.enablePullRefresh,
    class: "fm-listview-wrapper"
  }, {
    default: withCtx(() => [
      createVNode("div", {
        class: ["fm-listview-container", {'fm-listview-container-multiple': $props.showSubmitBtn && $props.multiple && $data.listMultiple, 'fm-listview-container-fill': $props.fill}]
      }, [
        (!$props.fill)
          ? (openBlock(), createBlock("div", _hoisted_1, null, 512 /* NEED_PATCH */))
          : createCommentVNode("v-if", true),
        (!$props.fill && $props.direction === 'up')
          ? (openBlock(), createBlock("div", _hoisted_2, null, 512 /* NEED_PATCH */))
          : createCommentVNode("v-if", true),
        (_ctx.$slots['listViewHeader'])
          ? (openBlock(), createBlock("div", _hoisted_3, [
              renderSlot(_ctx.$slots, "listViewHeader")
            ]))
          : createCommentVNode("v-if", true),
        createVNode("div", _hoisted_4, [
          ($props.fill)
            ? (openBlock(), createBlock("div", _hoisted_5, null, 512 /* NEED_PATCH */))
            : createCommentVNode("v-if", true),
          ($props.fill && $props.direction === 'up')
            ? (openBlock(), createBlock("div", _hoisted_6, null, 512 /* NEED_PATCH */))
            : createCommentVNode("v-if", true),
          ($data.inListData && $data.inListData.length)
            ? (openBlock(), createBlock("div", {
                key: 2,
                class: ["fm-listview-content", [$props.className]]
              }, [
                (openBlock(true), createBlock(Fragment, null, renderList($data.inListData, (listItem, index) => {
                  return (openBlock(), createBlock("div", {
                    class: ["fm-listview-item", {
              'fm-listview-item-padding': $props.multiple && $data.listMultiple, 
              'fm-listview-item-checked': listItem.checked && $props.multiple && $data.listMultiple,
              'fm-listview-item-padding-none': $props.multiple && $data.listMultiple && $data.initMultiList
            }],
                    onTouchstart: $event => ($options.goTouchStart(listItem, index)),
                    onTouchmove: _cache[1] || (_cache[1] = (...args) => ($options.goTouchMove && $options.goTouchMove(...args))),
                    onTouchend: _cache[2] || (_cache[2] = (...args) => ($options.goTouchEnd && $options.goTouchEnd(...args))),
                    onClick: $event => ($options.listItemClick($event,listItem,index))
                  }, [
                    ($props.multiple && $data.listMultiple)
                      ? (openBlock(), createBlock("div", _hoisted_7, [
                          createVNode("div", {
                            class: ["fm-checbox-icon", {'fm-checbox-icon-checked': listItem.checked}]
                          }, [
                            _hoisted_8
                          ], 2 /* CLASS */)
                        ]))
                      : createCommentVNode("v-if", true),
                    createVNode("div", _hoisted_9, [
                      renderSlot(_ctx.$slots, "default", {
                        item: listItem,
                        last: index === $data.inListData.length - 1,
                        first: index === 0,
                        index: index,
                        disabled: $data.listMultiple
                      }, () => [
                        createVNode("div", _hoisted_10, [
                          createVNode("div", _hoisted_11, [
                            createVNode("span", _hoisted_12, toDisplayString(listItem.title), 1 /* TEXT */),
                            createVNode("div", _hoisted_13, toDisplayString(listItem.label), 1 /* TEXT */)
                          ]),
                          _hoisted_14,
                          renderSlot(_ctx.$slots, "cell-extra")
                        ])
                      ])
                    ])
                  ], 42 /* CLASS, PROPS, HYDRATE_EVENTS */, ["onTouchstart", "onClick"]))
                }), 256 /* UNKEYED_FRAGMENT */))
              ], 2 /* CLASS */))
            : (openBlock(), createBlock("div", _hoisted_15, [
                renderSlot(_ctx.$slots, "listviewEmpty", {}, () => [
                  _hoisted_16
                ])
              ])),
          ($props.error)
            ? (openBlock(), createBlock("div", {
                key: 4,
                onClick: _cache[3] || (_cache[3] = $event => ($options.clickErrorText())),
                class: "fm-listview-error"
              }, [
                renderSlot(_ctx.$slots, "error", {}, () => [
                  createVNode("span", _hoisted_17, toDisplayString($props.errorText), 1 /* TEXT */)
                ])
              ]))
            : createCommentVNode("v-if", true),
          (!$props.error)
            ? (openBlock(), createBlock("div", _hoisted_18, [
                (!$props.listRefreshing && $data.innerLoading && !$props.finished)
                  ? (openBlock(), createBlock("div", _hoisted_19, [
                      createVNode("div", _hoisted_20, [
                        renderSlot(_ctx.$slots, "loading", {}, () => [
                          createVNode("span", _hoisted_21, toDisplayString($props.loadingText), 1 /* TEXT */)
                        ])
                      ])
                    ]))
                  : createCommentVNode("v-if", true),
                ($props.finished && $props.showFinishedText && $data.inListData && $data.inListData.length)
                  ? (openBlock(), createBlock("div", _hoisted_22, [
                      createVNode("div", _hoisted_23, [
                        renderSlot(_ctx.$slots, "finished", {}, () => [
                          createVNode("span", _hoisted_24, toDisplayString($props.finishedText), 1 /* TEXT */)
                        ])
                      ])
                    ]))
                  : createCommentVNode("v-if", true)
              ]))
            : createCommentVNode("v-if", true),
          ($props.fill && $props.direction === 'down')
            ? (openBlock(), createBlock("div", _hoisted_25, null, 512 /* NEED_PATCH */))
            : createCommentVNode("v-if", true)
        ], 512 /* NEED_PATCH */),
        ($props.showSubmitBtn && $props.multiple && $data.listMultiple)
          ? (openBlock(), createBlock("div", _hoisted_26, [
              ($props.btns && $props.btns.length)
                ? (openBlock(), createBlock("div", _hoisted_27, [
                    (openBlock(true), createBlock(Fragment, null, renderList($props.btns, (btn, index) => {
                      return (openBlock(), createBlock(_component_fm_button, {
                        type: btn.type?btn.type:'primary',
                        plain: !!btn.plain?btn.plain:false,
                        block: "",
                        disabled: !!btn.disabled,
                        onClick: $event => ($options.$_onClick(btn)),
                        onTouchmove: _cache[4] || (_cache[4] = withModifiers(() => {}, ["prevent"])),
                        class: "fm-listview-btns-item"
                      }, {
                        default: withCtx(() => [
                          createTextVNode(toDisplayString(btn.text), 1 /* TEXT */)
                        ]),
                        _: 2 /* DYNAMIC */
                      }, 1032 /* PROPS, DYNAMIC_SLOTS */, ["type", "plain", "disabled", "onClick"]))
                    }), 256 /* UNKEYED_FRAGMENT */))
                  ]))
                : createCommentVNode("v-if", true)
            ]))
          : createCommentVNode("v-if", true),
        (_ctx.$slots['listViewFooter'])
          ? (openBlock(), createBlock("div", _hoisted_28, [
              renderSlot(_ctx.$slots, "listViewFooter")
            ]))
          : createCommentVNode("v-if", true),
        (!$props.fill && $props.direction === 'down')
          ? (openBlock(), createBlock("div", _hoisted_29, null, 512 /* NEED_PATCH */))
          : createCommentVNode("v-if", true)
      ], 2 /* CLASS */)
    ]),
    _: 1 /* STABLE */
  }, 8 /* PROPS */, ["modelValue", "disabled"]))
}

script.render = render;
script.__file = "packages/listview/src/listview.vue";

script.install = function (app) {
  app.component(script.name, script);
};

export default script;
export { script as Listview };
