import { defineComponent, ref, watch, createVNode, Teleport, Transition, withDirectives, mergeProps, vShow, isVNode, Fragment, resolveComponent } from 'vue';
import { useLockScroll, useClickAway } from '../hook';
import Overlay from '../overlay';

var _components;

function _isSlot(s) {
  return typeof s === 'function' || Object.prototype.toString.call(s) === '[object Object]' && !isVNode(s);
}

var Popup = defineComponent({
  name: 'fm-popup',
  components: (_components = {}, _components[Overlay.name] = Overlay, _components),
  props: {
    show: Boolean,
    zIndex: [Number, String],
    duration: [Number, String],
    teleport: String,
    position: String,
    overlay: {
      type: Boolean,
      "default": true
    },
    closeOnClickOverlay: {
      type: Boolean,
      "default": true
    },
    lockScroll: {
      type: Boolean,
      "default": true
    },
    round: {
      type: Boolean,
      "default": false
    },
    transition: String,
    overlayStyle: Object
  },
  emit: ['click', 'opened', 'closed', 'update:show'],
  setup: function setup(props, _ref) {
    var _className;

    var emit = _ref.emit,
        attrs = _ref.attrs,
        slots = _ref.slots;

    var getTransitionName = function getTransitionName(position) {
      switch (position) {
        case 'bottom':
          return 'fm-slide-up';

        case 'top':
          return 'fm-slide-down';

        case 'left':
          return 'fm-slide-left';

        case 'right':
          return 'fm-slide-right';

        default:
          return 'fm-fade';
      }
    };

    var className = (_className = {
      'fm-popup': true,
      'fm-popup-round': props.round
    }, _className["fm-popup-" + props.position] = props.position, _className);

    var _useLockScroll = useLockScroll(function () {
      return props.lockScroll;
    }),
        lockScroll = _useLockScroll[0],
        unlockScroll = _useLockScroll[1];

    var close = function close() {
      props.show && emit('update:show', false);
    };

    var clickAwayActive = ref(false);
    var popupRef = ref();
    useClickAway(popupRef, close, {
      active: clickAwayActive
    });
    watch(function () {
      return props.show;
    }, function (value) {
      if (value) {
        lockScroll();
        setTimeout(function () {
          clickAwayActive.value = true;
        });
      } else {
        unlockScroll();
        clickAwayActive.value = false;
      }
    });

    var renderTransition = function renderTransition() {
      var _slot;

      var _a;

      var name = getTransitionName(props.position);
      var style = {
        zIndex: props.zIndex !== undefined ? +props.zIndex : undefined,
        transitionDuration: props.duration + "s"
      };
      return createVNode(Transition, {
        "name": props.transition || name,
        "onAfterEnter": function onAfterEnter() {
          return emit('opened');
        },
        "onAfterLeave": function onAfterLeave() {
          return emit('closed');
        }
      }, _isSlot(_slot = withDirectives(createVNode("div", mergeProps({
        "ref": popupRef,
        "style": style,
        "class": className,
        "onClick": function onClick() {
          return emit('click');
        }
      }, attrs), [(_a = slots["default"]) === null || _a === void 0 ? void 0 : _a.call(slots)]), [[vShow, props.show]])) ? _slot : {
        "default": function _default() {
          return [_slot];
        }
      });
    };

    var onOverlayClick = function onOverlayClick(event) {
      event.stopPropagation();
      props.closeOnClickOverlay && close();
    };

    var renderOverlay = function renderOverlay() {
      var overlayIndex = props.zIndex !== undefined ? Number(props.zIndex) - 1 : undefined;

      if (props.overlay) {
        return createVNode(resolveComponent("fm-overlay"), {
          "style": props.overlayStyle,
          "show": props.show,
          "zIndex": overlayIndex,
          "duration": props.duration,
          "onClick": onOverlayClick
        }, null);
      }
    };

    return function () {
      if (props.teleport) {
        return createVNode(Teleport, {
          "to": props.teleport
        }, {
          "default": function _default() {
            return [renderOverlay(), renderTransition()];
          }
        });
      }

      return createVNode(Fragment, null, [renderOverlay(), renderTransition()]);
    };
  }
});

Popup.install = function (app) {
  app.component(Popup.name, Popup);
};

export default Popup;
export { Popup };
