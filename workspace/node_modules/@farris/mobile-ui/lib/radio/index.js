import { Check } from '../checkbox';
import { resolveComponent, openBlock, createBlock, Fragment, renderList, withCtx, createVNode, createCommentVNode } from 'vue';

var _components;
var script = {
  name: 'fm-radio-group',
  components: (_components = {}, _components[Check.name] = Check, _components),
  props: {
    disabled: {
      type: Boolean,
      "default": false
    },
    readonly: {
      type: Boolean,
      "default": false
    },
    shape: {
      type: String,
      "default": 'round'
    },
    checked: {
      type: Boolean,
      "default": true
    },
    modelValue: null,
    checkedColor: {
      type: String,
      "default": '#3A90FF'
    },
    role: String,
    labelClass: String,
    direction: {
      type: String,
      "default": 'vertical'
    },
    items: Array,
    valueField: {
      type: String,
      "default": 'value'
    },
    textField: {
      type: String,
      "default": 'text'
    },
    type: {
      type: String,
      "default": 'check'
    },
    size: {
      type: String,
      "default": 'normal'
    }
  },
  setup: function setup(props, _ref) {
    var emit = _ref.emit;

    var onCheckedChange = function onCheckedChange(val) {
      emit('update:modelValue', val);
    };

    return {
      onCheckedChange: onCheckedChange
    };
  }
};

function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_fm_checker = resolveComponent("fm-checker");

  var _component_fm_cell = resolveComponent("fm-cell");

  return openBlock(), createBlock("div", {
    "class": "fm-radio-group",
    role: $props.role
  }, [$props.direction === 'vertical' ? (openBlock(true), createBlock(Fragment, {
    key: 0
  }, renderList($props.items, function (item) {
    return openBlock(), createBlock(_component_fm_cell, {
      key: item[$props.valueField],
      "class": "fm-radio-vertical"
    }, {
      "default": withCtx(function () {
        return [createVNode(_component_fm_checker, {
          label: item[$props.textField],
          disabled: $props.disabled,
          readonly: $props.readonly,
          shape: $props.shape,
          checked: $props.modelValue === item[$props.valueField],
          checkedColor: $props.checkedColor,
          type: $props.type,
          "onUpdate:checked": function onUpdateChecked($event) {
            return $setup.onCheckedChange(item[$props.valueField]);
          }
        }, null, 8
        /* PROPS */
        , ["label", "disabled", "readonly", "shape", "checked", "checkedColor", "type", "onUpdate:checked"])];
      }),
      _: 2
      /* DYNAMIC */

    }, 1024
    /* DYNAMIC_SLOTS */
    );
  }), 128
  /* KEYED_FRAGMENT */
  )) : createCommentVNode("v-if", true), $props.direction === 'horizontal' ? (openBlock(), createBlock("div", {
    key: 1,
    "class": 'fm-radio-' + $props.direction
  }, [(openBlock(true), createBlock(Fragment, null, renderList($props.items, function (item) {
    return openBlock(), createBlock(_component_fm_checker, {
      "class": "fm-radio",
      key: item[$props.valueField],
      label: item[$props.textField],
      disabled: $props.disabled,
      readonly: $props.readonly,
      shape: $props.shape,
      checked: $props.modelValue === item[$props.valueField],
      checkedColor: $props.checkedColor,
      type: $props.type,
      size: $props.size,
      "onUpdate:checked": function onUpdateChecked($event) {
        return $setup.onCheckedChange(item[$props.valueField]);
      }
    }, null, 8
    /* PROPS */
    , ["label", "disabled", "readonly", "shape", "checked", "checkedColor", "type", "size", "onUpdate:checked"]);
  }), 128
  /* KEYED_FRAGMENT */
  ))], 2
  /* CLASS */
  )) : createCommentVNode("v-if", true)], 8
  /* PROPS */
  , ["role"]);
}

script.render = render;
script.__file = "packages/radio/src/radio-group.vue";

script.install = function (app) {
  app.component(script.name, script);
};

export default script;
export { script as RadioGroup };
