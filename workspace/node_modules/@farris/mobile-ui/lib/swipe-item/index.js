import { inject, getCurrentInstance, onBeforeMount, reactive, computed, onMounted, nextTick, openBlock, createBlock, renderSlot, createCommentVNode } from 'vue';
import { useExpose } from '../hook';

var script = {
  name: 'fm-swipe-item',
  setup: function setup() {
    var rootSwipe = inject('rootSwipe');
    var internalInstance = getCurrentInstance();
    onBeforeMount(function () {
      rootSwipe.addSwipe(internalInstance.ctx);
    });
    var rendered;
    var state = reactive({
      offset: 0,
      inited: false,
      mounted: false
    });
    var style = computed(function () {
      var style = {};
      var vertical = rootSwipe.props.vertical;
      style[vertical ? 'height' : 'width'] = rootSwipe.size.value + "px";

      if (state.offset) {
        style.transform = "translate" + (vertical ? 'Y' : 'X') + "(" + state.offset + "px)";
      }

      return style;
    });
    var shouldRender = computed(function () {
      var _rootSwipe$props = rootSwipe.props,
          loop = _rootSwipe$props.loop,
          lazyRender = _rootSwipe$props.lazyRender;

      if (!lazyRender || rendered) {
        return true;
      } // wait for all item to mount, so we can get the exact count


      if (!state.mounted) {
        return false;
      }

      var active = rootSwipe.activeIndicator.value;
      var maxActive = rootSwipe.count.value - 1;
      var prevActive = active === 0 && loop ? maxActive : active - 1;
      var nextActive = active === maxActive && loop ? 0 : active + 1;
      var index = 0;

      if (rootSwipe.children.length) {
        index = rootSwipe.children.findIndex(function (child) {
          return child.$el == internalInstance.ctx.$el;
        });
      }

      rendered = index === active || index === prevActive || index === nextActive;
      return rendered;
    });

    var setOffset = function setOffset(offset) {
      state.offset = offset;
    };

    onMounted(function () {
      nextTick(function () {
        state.mounted = true;
      });
    });
    useExpose({
      setOffset: setOffset
    });
    return {
      state: state,
      style: style,
      shouldRender: shouldRender,
      setOffset: setOffset
    };
  }
};

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock("div", {
    "class": "fm-swipe-item",
    style: $setup.style
  }, [$setup.shouldRender ? renderSlot(_ctx.$slots, "default", {
    key: 0
  }) : createCommentVNode("v-if", true)], 4
  /* STYLE */
  );
}

script.render = render;
script.__file = "packages/swipe/src/swipe-item.vue";

script.install = function (app) {
  app.component(script.name, script);
};

export default script;
export { script as SwipeItem };
