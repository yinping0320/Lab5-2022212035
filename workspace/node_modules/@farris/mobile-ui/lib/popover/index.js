import { defineComponent, ref, onMounted, computed, resolveComponent, openBlock, createBlock, Fragment, createVNode, renderSlot, withCtx, createCommentVNode } from 'vue';
import { getDeviation, isDef, preventDefault } from '../utils';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var script = defineComponent({
  name: 'fm-popover',
  props: {
    value: {
      type: Boolean,
      "default": false
    },
    placement: {
      type: String,
      "default": 'bottomRight'
    },
    teleport: {
      type: String,
      "default": 'body'
    },
    hasMask: {
      type: Boolean,
      "default": true
    },
    maskClosable: {
      type: Boolean,
      "default": false
    },
    offset: {
      type: Object,
      "default": function _default() {
        return {
          top: 0,
          left: 0
        };
      }
    },
    className: {
      type: String
    },
    hasArrow: {
      type: Boolean,
      "default": true
    }
  },
  setup: function setup(props, _ref) {
    var attrs = _ref.attrs,
        emit = _ref.emit;
    var popover = ref();
    var show = ref(false);

    var open = function open(event) {
      setPosition();
      show.value = true;
      preventDefault(event, true);
    }; // useClickAway(popover, (event) => {
    //   if (show.value) {
    //     show.value = false
    //   }
    // })
    // 定位


    var style = ref({});
    var root = ref();
    onMounted(function () {
      setPosition();
    });

    var setPosition = function setPosition() {
      var position = getDeviation(root, props.placement);
      var offset = initOffset(position);
      style.value = {
        top: isDef(position.top) ? position.top + offset.top + 'px' : '',
        bottom: isDef(position.bottom) ? position.bottom - offset.top + 'px' : '',
        left: isDef(position.left) ? position.left + offset.left + 'px' : '',
        right: isDef(position.right) ? position.right - offset.left + 'px' : ''
      };
    };

    var initOffset = function initOffset(position) {
      var offset = props.offset ? _extends({
        top: 0,
        left: 0
      }, props.offset) : {
        top: 0,
        left: 0
      };

      if (props.placement.includes('left') || props.placement.includes('right')) {
        if (position.top) {
          offset.top = offset.top - 10;
        }

        return offset;
      } else {
        if (position.left) {
          offset.left = offset.left - 10;
        } else {
          offset.left = offset.left + 10;
        }
      }

      return offset;
    };

    var wrapperCls = computed(function () {
      var _ref2;

      return _ref2 = {}, _ref2["fm-popover-placement-" + props.placement] = ['left', 'right', 'top', 'bottom', 'topLeft', 'topRight', 'bottomLeft', 'bottomRight'].indexOf(props.placement) !== -1, _ref2;
    });

    var onContentClick = function onContentClick(event) {
      event.preventDefault();
      emit('contentClick');

      if (show.value) {
        show.value = false;
      }
    };

    return {
      show: show,
      root: root,
      popover: popover,
      style: style,
      wrapperCls: wrapperCls,
      open: open,
      onContentClick: onContentClick
    };
  }
});

var _hoisted_1 = /*#__PURE__*/createVNode("span", {
  "class": "fm-icon fm-icon-other"
}, null, -1
/* HOISTED */
);

var _hoisted_2 = {
  "class": "fm-popover-content",
  ref: "popover"
};
var _hoisted_3 = {
  key: 0,
  "class": "fm-popover-arrow"
};
var _hoisted_4 = {
  "class": "fm-popover-inner"
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_fm_popup = resolveComponent("fm-popup");

  return openBlock(), createBlock(Fragment, null, [createVNode("div", {
    onClick: _cache[1] || (_cache[1] = function () {
      return _ctx.open && _ctx.open.apply(_ctx, arguments);
    }),
    ref: "root",
    "class": ["fm-popover-template", _ctx.className]
  }, [renderSlot(_ctx.$slots, "default", {}, function () {
    return [_hoisted_1];
  })], 2
  /* CLASS */
  ), createVNode(_component_fm_popup, {
    show: _ctx.show,
    "onUpdate:show": _cache[3] || (_cache[3] = function ($event) {
      return _ctx.show = $event;
    }),
    "class": ["fm-popover", _ctx.wrapperCls],
    style: _ctx.style,
    overlay: _ctx.hasMask,
    teleport: _ctx.teleport
  }, {
    "default": withCtx(function () {
      return [createVNode("div", _hoisted_2, [_ctx.hasArrow ? (openBlock(), createBlock("div", _hoisted_3)) : createCommentVNode("v-if", true), createVNode("div", _hoisted_4, [createVNode("div", {
        "class": "fm-popover-inner-wrapper",
        onClick: _cache[2] || (_cache[2] = function () {
          return _ctx.onContentClick && _ctx.onContentClick.apply(_ctx, arguments);
        })
      }, [renderSlot(_ctx.$slots, "content")])])], 512
      /* NEED_PATCH */
      )];
    }),
    _: 3
    /* FORWARDED */

  }, 8
  /* PROPS */
  , ["show", "style", "class", "overlay", "teleport"])], 64
  /* STABLE_FRAGMENT */
  );
}

script.render = render;
script.__file = "packages/popover/src/popover.vue";

script.install = function (app) {
  app.component(script.name, script);
};

export default script;
export { script as Popover };
