import { format } from '../utils';
import { openBlock, createBlock, createVNode, toDisplayString } from 'vue';

var DATE = 'date';
var NUMBER = 'number';
var ENUM = 'enum';
var BOOLEAN = 'boolean';
var TRUR = '是';
var FALSE = '否';
var EMPTYSTRING = '';

function formatNumber(value, formatOption) {
  var _formatOption$enableT = formatOption.enableThousands,
      enableThousands = _formatOption$enableT === void 0 ? true : _formatOption$enableT,
      _formatOption$prefix = formatOption.prefix,
      prefix = _formatOption$prefix === void 0 ? '' : _formatOption$prefix,
      _formatOption$suffix = formatOption.suffix,
      suffix = _formatOption$suffix === void 0 ? '' : _formatOption$suffix,
      _formatOption$precisi = formatOption.precision,
      precision = _formatOption$precisi === void 0 ? -1 : _formatOption$precisi;
  value = precision > 0 ? Number.parseFloat(value).toFixed(precision) : value;
  value = enableThousands ? toThousands(value) : value;
  value = "" + prefix + value + suffix;
  return value;
}

function formatDate(value, formatOption) {
  var _formatOption$dateFor = formatOption.dateFormat,
      dateFormat = _formatOption$dateFor === void 0 ? 'YYYY-MM-DD' : _formatOption$dateFor;
  return format(value, dateFormat);
}

function formatBoolean(value, formatOption) {
  var _formatOption$StringO = formatOption.StringOfTrue,
      StringOfTrue = _formatOption$StringO === void 0 ? TRUR : _formatOption$StringO,
      _formatOption$StringO2 = formatOption.StringOfFalse,
      StringOfFalse = _formatOption$StringO2 === void 0 ? FALSE : _formatOption$StringO2;

  if (value === true) {
    return StringOfTrue;
  } else if (value === false) {
    return StringOfFalse;
  } else {
    return EMPTYSTRING;
  }
}

function formatString(value) {
  return value;
}

function formatEnum(value, formatOption) {
  var _formatOption$enumDat = formatOption.enumData,
      enumData = _formatOption$enumDat === void 0 ? [] : _formatOption$enumDat,
      _formatOption$textFie = formatOption.textField,
      textField = _formatOption$textFie === void 0 ? 'name' : _formatOption$textFie,
      _formatOption$valueFi = formatOption.valueField,
      valueField = _formatOption$valueFi === void 0 ? 'value' : _formatOption$valueFi;
  var target = enumData.find(function (item) {
    return item[valueField] === value;
  });
  return target ? target[textField] : '';
}

function toThousands(value) {
  if (!value) {
    return '';
  }

  var _String$split = String(value).split('.'),
      integer = _String$split[0],
      decimal = _String$split[1];

  integer = String(integer).split('').reduce(function (pre, cur, index) {
    return index % 3 === 0 ? pre + ',' + cur : pre + cur;
  });
  decimal = String(decimal).split('').reduce(function (pre, cur, index) {
    return index % 3 === 0 ? pre + ',' + cur : pre + cur;
  });
  return integer + "." + decimal;
}

function getformater(type) {
  switch (type) {
    case NUMBER:
      return formatNumber;

    case DATE:
      return formatDate;

    case BOOLEAN:
      return formatBoolean;

    case ENUM:
      return formatEnum;

    default:
      return formatString;
  }
}

var script = {
  name: 'fm-text',
  props: {
    label: String,
    type: {
      type: String,
      "default": 'string'
    },
    // eslint-disable-next-line vue/require-prop-type-constructor
    format: String | Object,
    // eslint-disable-next-line vue/require-prop-type-constructor
    value: String | Date | Number | Boolean
  },
  computed: {
    innnerValue: function innnerValue() {
      return this.getInnerValue();
    }
  },
  methods: {
    getInnerValue: function getInnerValue() {
      if (!this.format) {
        return this.value;
      }

      if (typeof this.format === 'function') {
        return this.format(this.value);
      } else {
        var formater = getformater(this.type);
        return formater(this.value, this.format);
      }
    }
  }
};

var _hoisted_1 = {
  "class": "fm-text"
};
var _hoisted_2 = {
  "class": "label"
};
var _hoisted_3 = {
  "class": "text"
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock("div", _hoisted_1, [createVNode("div", _hoisted_2, toDisplayString($props.label), 1
  /* TEXT */
  ), createVNode("div", _hoisted_3, toDisplayString($options.innnerValue), 1
  /* TEXT */
  )]);
}

script.render = render;
script.__file = "packages/text/src/index.vue";

script.install = function (app) {
  app.component(script.name, script);
};

export default script;
export { script as Text };
