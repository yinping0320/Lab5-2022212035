import * as Vue from 'vue';
import { ref, watch, onUnmounted, onDeactivated, unref, getCurrentInstance, reactive, createApp, nextTick, defineComponent, inject, provide } from 'vue';
import { inBrowser, onMountedOrActivated, throttle, isHTMLTag, VueCodeGenerate } from '../utils';
import { baseParse, getBaseTransformPreset, transform } from '@vue/compiler-core';

function useLazyRender(show) {
  var inited = ref(false);
  watch(show, function (value) {
    if (value) {
      inited.value = value;
    }
  }, {
    immediate: true
  });
  return function (render) {
    return function () {
      return inited.value ? render() : null;
    };
  };
}

var supportsPassive = false;
function useEventListener(type, listener, options) {
  if (options === void 0) {
    options = {};
  }

  if (!inBrowser) {
    return;
  }

  var _options = options,
      _options$target = _options.target,
      target = _options$target === void 0 ? window : _options$target,
      _options$passive = _options.passive,
      _options$capture = _options.capture,
      capture = _options$capture === void 0 ? false : _options$capture;
  var attached = false;

  var add = function add() {
    var element = unref(target);

    if (element && !attached) {
      element.addEventListener(type, listener,  capture);
      attached = true;
    }
  };

  var remove = function remove() {
    var element = unref(target);

    if (element && attached) {
      element.removeEventListener(type, listener, capture);
      attached = false;
    }
  };

  onUnmounted(remove);
  onDeactivated(remove);
  onMountedOrActivated(add);
}

function useClickAway(target, listener, options) {
  if (options === void 0) {
    options = {};
  }

  if (!inBrowser) {
    return;
  }

  var _options = options,
      _options$eventName = _options.eventName,
      eventName = _options$eventName === void 0 ? 'click' : _options$eventName,
      _options$active = _options.active,
      active = _options$active === void 0 ? true : _options$active;

  var onClick = function onClick(event) {
    var _active = unref(active);

    var element = unref(target);

    if (_active && element && !element.contains(event.target)) {
      listener(event);
    }
  };

  useEventListener(eventName, onClick, {
    target: document
  });
}

var count = 0;
var CLASSNAME = 'fm-overflow-hidden';
function useLockScroll(shouldLock) {
  var lock = function lock() {
    if (shouldLock()) {
      if (!count) {
        document.body.classList.add(CLASSNAME);
      }

      count++;
    }
  };

  var unlock = function unlock() {
    if (shouldLock() && count) {
      count--;

      if (!count) {
        document.body.classList.remove(CLASSNAME);
      }
    }
  };

  return [lock, unlock];
}

function useExpose(apis) {
  var instance = getCurrentInstance();

  if (instance) {
    Object.assign(instance.proxy, apis);
  }
}

function usePopupState() {
  var state = reactive({
    show: false
  });

  var toggle = function toggle(show) {
    state.show = show;
  };

  var open = function open(props) {
    Object.assign(state, props);
    nextTick(function () {
      toggle(true);
    });
  };

  var close = function close() {
    toggle(false);
  };

  useExpose({
    open: open,
    close: close,
    toggle: toggle
  });
  return {
    open: open,
    close: close,
    state: state,
    toggle: toggle
  };
}
function mountComponent(RootComponent) {
  var app = createApp(RootComponent);
  var root = document.createElement('div');
  document.body.appendChild(root);
  return {
    instance: app.mount(root),
    unmount: function unmount() {
      app.unmount(root);
      document.body.removeChild(root);
    }
  };
}

var MIN_DISTANCE = 10;

function getDirection(x, y) {
  if (x > y && x > MIN_DISTANCE) {
    return 'horizontal';
  }

  if (y > x && y > MIN_DISTANCE) {
    return 'vertical';
  }

  return '';
}

var defaultTouchOffset = function defaultTouchOffset() {
  return {
    startX: 0,
    startY: 0,
    endX: 0,
    endY: 0,
    offsetX: 0,
    offsetY: 0,
    direction: ''
  };
};

var DragStatus;

(function (DragStatus) {
  DragStatus[DragStatus["NotStarted"] = 0] = "NotStarted";
  DragStatus[DragStatus["Started"] = 1] = "Started";
  DragStatus[DragStatus["Dragging"] = 2] = "Dragging";
  DragStatus[DragStatus["End"] = 3] = "End";
})(DragStatus || (DragStatus = {}));

function useTouchMove(target, listener, wait) {
  if (wait === void 0) {
    wait = 100;
  }

  var beginOffset = {
    offsetX: 0,
    offsetY: 0
  };
  var offset = reactive(defaultTouchOffset());
  var dragStatus = ref(DragStatus.NotStarted);

  var touchStart = function touchStart(event) {
    if (!event.touches || !event.touches[0]) {
      return;
    }

    offset.startX = event.touches[0].clientX;
    offset.startY = event.touches[0].clientY;
    (listener === null || listener === void 0 ? void 0 : listener.onTouchStart) && listener.onTouchStart(event);
    dragStatus.value = DragStatus.Started;
  };

  var touchMove = function touchMove(event) {
    if (!event.touches || !event.touches[0]) {
      return;
    }

    var touch = event.touches[0];
    offset.offsetX = touch.clientX - offset.startX + beginOffset.offsetX;
    offset.offsetY = touch.clientY - offset.startY + beginOffset.offsetY;
    offset.endX = event.touches[0].clientX;
    offset.endY = event.touches[0].clientY;
    offset.direction = getDirection(offset.offsetX, offset.offsetY);
    (listener === null || listener === void 0 ? void 0 : listener.onTouchMove) && listener.onTouchMove(event);
    dragStatus.value = DragStatus.Dragging;
  };

  var touchEnd = function touchEnd(event) {
    beginOffset = {
      offsetX: offset.offsetX,
      offsetY: offset.offsetY
    };
    (listener === null || listener === void 0 ? void 0 : listener.onTouchEnd) && listener.onTouchEnd(event);
    (listener === null || listener === void 0 ? void 0 : listener.onTouchCancel) && listener.onTouchCancel(event);
    dragStatus.value = DragStatus.End;
  };

  var resetTouchStatus = function resetTouchStatus() {
    offset.endX = 0;
    offset.endY = 0;
    offset.offsetX = 0;
    offset.offsetY = 0;
    offset.direction = '';
    beginOffset = {
      offsetX: 0,
      offsetY: 0
    };
    dragStatus.value = DragStatus.NotStarted;
  };

  if (!target) {
    return {
      offset: offset,
      resetTouchStatus: resetTouchStatus
    };
  }

  useEventListener('touchstart', touchStart, {
    target: target
  });
  useEventListener('touchmove', throttle(touchMove, wait), {
    target: target
  });
  useEventListener('touchend', touchEnd, {
    target: target
  });
  return {
    offset: offset,
    dragStatus: dragStatus,
    resetTouchStatus: resetTouchStatus
  };
}

var useElementRect = function useElementRect(el) {
  var rect = ref();

  var hook = function hook() {
    var target = unref(el);
    rect.value = target === null || target === void 0 ? void 0 : target.getBoundingClientRect();
  };

  onMountedOrActivated(hook);
  return {
    rect: rect
  };
};

var dynamicTemplate = defineComponent({
  name: 'dynamic-template',
  props: {
    props: {
      type: Object,
      "default": function _default() {
        return {};
      }
    }
  },
  render: function render() {}
});

function createFunction(code) {
  try {
    return new Function('Vue', code);
  } catch (err) {
    console.warn(err, code);
    return function () {};
  }
}

function useDynamicTemplate(template) {
  var ast = baseParse(template, {
    isNativeTag: isHTMLTag
  });
  var prefixIdentifiers = true;

  var _getBaseTransformPres = getBaseTransformPreset(prefixIdentifiers),
      nodeTransforms = _getBaseTransformPres[0],
      directiveTransforms = _getBaseTransformPres[1];

  transform(ast, {
    prefixIdentifiers: prefixIdentifiers,
    nodeTransforms: [].concat(nodeTransforms),
    directiveTransforms: directiveTransforms
  });
  var dynamicRender = VueCodeGenerate(ast);
  dynamicTemplate.render = createFunction(dynamicRender.code)(Vue);
  console.log(dynamicRender);
  return {
    dynamicRender: dynamicRender,
    dynamicTemplate: dynamicTemplate
  };
}

function useBem(prefix) {
  return function (className) {
    return prefix + "-" + className;
  };
}

var MIN_DISTANCE$1 = 10;

function getDirection$1(x, y) {
  if (x > y && x > MIN_DISTANCE$1) {
    return 'horizontal';
  }

  if (y > x && y > MIN_DISTANCE$1) {
    return 'vertical';
  }

  return '';
}

function useTouch() {
  var startX = ref(0);
  var startY = ref(0);
  var deltaX = ref(0);
  var deltaY = ref(0);
  var offsetX = ref(0);
  var offsetY = ref(0);
  var direction = ref('');

  var isVertical = function isVertical() {
    return direction.value === 'vertical';
  };

  var isHorizontal = function isHorizontal() {
    return direction.value === 'horizontal';
  };

  var reset = function reset() {
    deltaX.value = 0;
    deltaY.value = 0;
    offsetX.value = 0;
    offsetY.value = 0;
    direction.value = '';
  };

  var start = function start(event) {
    reset();
    startX.value = event.touches[0].clientX;
    startY.value = event.touches[0].clientY;
  };

  var move = function move(event) {
    var touch = event.touches[0];
    deltaX.value = touch.clientX - startX.value;
    deltaY.value = touch.clientY - startY.value;
    offsetX.value = Math.abs(deltaX.value);
    offsetY.value = Math.abs(deltaY.value);

    if (!direction.value) {
      direction.value = getDirection$1(offsetX.value, offsetY.value);
    }
  };

  return {
    move: move,
    start: start,
    reset: reset,
    startX: startX,
    startY: startY,
    deltaX: deltaX,
    deltaY: deltaY,
    offsetX: offsetX,
    offsetY: offsetY,
    direction: direction,
    isVertical: isVertical,
    isHorizontal: isHorizontal
  };
}

function useBack(enableShow) {
  var pushBack = function pushBack(cb) {
    window['MOBILE_ORIGIN_BACK'] && window['MOBILE_ORIGIN_BACK'].pushOriginGoback(cb);
  };

  var popBack = function popBack() {
    window['MOBILE_ORIGIN_BACK'] && window['MOBILE_ORIGIN_BACK'].popOriginGoback();
  };

  var pushOrPop = function pushOrPop(cb) {
    if (cb === void 0) {
      cb = function cb() {
        return enableShow.value = false;
      };
    }

    if (enableShow.value) {
      pushBack(cb);
    } else {
      popBack();
    }
  };

  return {
    pushBack: pushBack,
    popBack: popBack,
    pushOrPop: pushOrPop
  };
}

var stateSymbol = Symbol('state');
var createState = function createState(initState) {
  return reactive(initState);
};
var useState = function useState(key) {
  return inject(key ? key : stateSymbol);
};
var provideState = function provideState(key, initState) {
  if (initState === void 0) {
    initState = {};
  }

  return provide(key ? key : stateSymbol, createState(initState));
};

var b64pad = '';
var chrsz = 8;
var useMd5 = function useMd5() {
  return {
    md5: md5,
    hex_md5: hex_md5,
    b64_md5: b64_md5,
    str_md5: str_md5,
    hex_hmac_md5: hex_hmac_md5,
    b64_hmac_md5: b64_hmac_md5,
    str_hmac_md5: str_hmac_md5
  };
};

var md5 = function md5(s, type) {
  if (type === void 0) {
    type = 'hex';
  }

  var result = '';

  switch (type) {
    case 'hex':
      result = hex_md5(s);
      break;

    case 'b64':
      result = b64_md5(s);
      break;

    case 'str':
      result = str_md5(s);

    default:
      result = hex_md5(s);
      break;
  }

  return result;
};

function hex_md5(s) {
  return binl2hex(core_md5(str2binl(s), s.length * chrsz));
}

function b64_md5(s) {
  return binl2b64(core_md5(str2binl(s), s.length * chrsz));
}

function str_md5(s) {
  return binl2str(core_md5(str2binl(s), s.length * chrsz));
}

function hex_hmac_md5(key, data) {
  return binl2hex(core_hmac_md5(key, data));
}

function b64_hmac_md5(key, data) {
  return binl2b64(core_hmac_md5(key, data));
}

function str_hmac_md5(key, data) {
  return binl2str(core_hmac_md5(key, data));
}

function core_md5(x, len) {
  x[len >> 5] |= 0x80 << len % 32;
  x[(len + 64 >>> 9 << 4) + 14] = len;
  var a = 1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d = 271733878;

  for (var i = 0; i < x.length; i += 16) {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;
    a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);
    d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);
    a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);
    c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);
    d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safe_add(a, olda);
    b = safe_add(b, oldb);
    c = safe_add(c, oldc);
    d = safe_add(d, oldd);
  }

  return Array(a, b, c, d);
}

function md5_cmn(q, a, b, x, s, t) {
  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);
}

function md5_ff(a, b, c, d, x, s, t) {
  return md5_cmn(b & c | ~b & d, a, b, x, s, t);
}

function md5_gg(a, b, c, d, x, s, t) {
  return md5_cmn(b & d | c & ~d, a, b, x, s, t);
}

function md5_hh(a, b, c, d, x, s, t) {
  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
}

function md5_ii(a, b, c, d, x, s, t) {
  return md5_cmn(c ^ (b | ~d), a, b, x, s, t);
}

function core_hmac_md5(key, data) {
  var bkey = str2binl(key);

  if (bkey.length > 16) {
    bkey = core_md5(bkey, key.length * chrsz);
  }

  var ipad = Array(16);
  var opad = Array(16);

  for (var i = 0; i < 16; i++) {
    ipad[i] = bkey[i] ^ 0x36363636;
    opad[i] = bkey[i] ^ 0x5c5c5c5c;
  }

  var hash = core_md5(ipad.concat(str2binl(data)), 512 + data.length * chrsz);
  return core_md5(opad.concat(hash), 512 + 128);
}

function safe_add(x, y) {
  var lsw = (x & 0xffff) + (y & 0xffff);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 0xffff;
}

function bit_rol(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}

function str2binl(str) {
  var bin = [];
  var mask = (1 << chrsz) - 1;

  for (var i = 0; i < str.length * chrsz; i += chrsz) {
    bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << i % 32;
  }

  return bin;
}

function binl2str(bin) {
  var str = '';
  var mask = (1 << chrsz) - 1;

  for (var i = 0; i < bin.length * 32; i += chrsz) {
    str += String.fromCharCode(bin[i >> 5] >>> i % 32 & mask);
  }

  return str;
}

function binl2hex(binarray) {
  var hex_tab =  '0123456789abcdef';
  var str = '';

  for (var i = 0; i < binarray.length * 4; i++) {
    str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xf) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xf);
  }

  return str;
}

function binl2b64(binarray) {
  var tab = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
  var str = '';

  for (var i = 0; i < binarray.length * 4; i += 3) {
    var triplet = (binarray[i >> 2] >> 8 * (i % 4) & 0xff) << 16 | (binarray[i + 1 >> 2] >> 8 * ((i + 1) % 4) & 0xff) << 8 | binarray[i + 2 >> 2] >> 8 * ((i + 2) % 4) & 0xff;

    for (var j = 0; j < 4; j++) {
      if (i * 8 + j * 6 > binarray.length * 32) str += b64pad;else str += tab.charAt(triplet >> 6 * (3 - j) & 0x3f);
    }
  }

  return str;
}

var useRootProps = function useRootProps(key, props) {
  var setProps = function setProps(value) {
    provide(key, value);
  };

  var getProps = function getProps(defaultValue) {
    if (defaultValue === void 0) {
      defaultValue = {};
    }

    return inject(key, defaultValue);
  };

  if (props) {
    setProps(props);
  }

  var rootProps = props ? props : getProps();
  return {
    rootProps: rootProps,
    setProps: setProps,
    getProps: getProps
  };
};

export { DragStatus, createState, dynamicTemplate, mountComponent, provideState, stateSymbol, supportsPassive, useBack, useBem, useClickAway, useDynamicTemplate, useElementRect, useEventListener, useExpose, useLazyRender, useLockScroll, useMd5, usePopupState, useRootProps, useState, useTouch, useTouchMove };
