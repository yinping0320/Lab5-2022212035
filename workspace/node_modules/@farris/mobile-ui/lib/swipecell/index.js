import { getCurrentInstance, ref, watch, openBlock, createBlock, createVNode, renderSlot } from 'vue';
import { useClickAway, useTouchMove, DragStatus } from '../hook';
import { stopPropagation, getRectByRef, isNumber } from '../utils';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var script = {
  name: 'fm-swipecell',
  props: {
    name: {
      type: [Number, String],
      "default": ''
    },
    disabled: {
      type: Boolean,
      "default": false
    },
    leftWidth: {
      type: [Number, String],
      "default": 'auto'
    },
    rightWidth: {
      type: [Number, String],
      "default": 'auto'
    },
    stopPropagation: {
      type: Boolean,
      "default": true
    },
    beforeClose: {
      type: Function
    }
  },
  emits: ['click', 'open', 'close'],
  setup: function setup(props, _ref) {
    var emit = _ref.emit,
        slots = _ref.slots;
    var instance = getCurrentInstance();
    var innerOffsetX = ref(0);
    var root = ref();
    var leftEl = ref();
    var rightEl = ref();
    var leftElWidth = 0;
    var rightElWidth = 0;

    var setSwipeWidth = function setSwipeWidth() {
      var LeftElRect = getRectByRef(leftEl);
      var rightElRect = getRectByRef(rightEl);
      leftElWidth = isNumber(props.leftWidth) ? props.leftWidth : LeftElRect != null && LeftElRect.width ? LeftElRect.width : 0;
      rightElWidth = isNumber(props.rightWidth) ? props.rightWidth : rightElRect != null && rightElRect.width ? rightElRect.width : 0;
    };

    var open = function open(type) {
      emit('open', _extends({}, offset));
    };

    var close = function close(type) {
      closed.value = false;
      innerOffsetX.value = 0;
      resetTouchStatus();
      emit('close', type);
    };

    var handleBeforeClose = function handleBeforeClose(type) {
      if ((dragStatus == null ? void 0 : dragStatus.value) === DragStatus.NotStarted) {
        return;
      }

      if (!props.beforeClose || !(props.beforeClose instanceof Function)) {
        close(type);
        return;
      }

      var result = props.beforeClose(type);

      if (result instanceof Promise) {
        result.then(function (res) {
          close(type);
        });
      } else {
        close(type);
      }
    };

    useClickAway(root, function () {
      handleBeforeClose('outside');
    });
    var closed = ref(false);
    watch(closed, function (value) {
      value && handleBeforeClose('inner');
    });

    var onTouchEnd = function onTouchEnd() {
      if (innerOffsetX.value > 0) {
        innerOffsetX.value = innerOffsetX.value > leftElWidth / 3 ? leftElWidth : 0;
      } else {
        innerOffsetX.value = Math.abs(innerOffsetX.value) > rightElWidth / 3 ? -rightElWidth : 0;
      }

      if (innerOffsetX.value !== 0) {
        open();
      }
    };

    var _useTouchMove = useTouchMove(root, {
      onTouchEnd: onTouchEnd
    }),
        offset = _useTouchMove.offset,
        resetTouchStatus = _useTouchMove.resetTouchStatus,
        dragStatus = _useTouchMove.dragStatus;

    var getOffsetX = function getOffsetX(offsetX) {
      setSwipeWidth();

      if (offsetX > 0) {
        return offsetX > leftElWidth ? leftElWidth : offsetX;
      }

      return Math.abs(offsetX) > rightElWidth ? -rightElWidth : offsetX;
    };

    watch(offset, function (_ref2) {
      var offsetX = _ref2.offsetX;
      innerOffsetX.value = getOffsetX(offsetX);
    });

    var getClickHandler = function getClickHandler(type, event) {
      props.stopPropagation && stopPropagation(event);
      emit('click', {
        type: type,
        event: event,
        closed: closed
      });
    };

    return {
      root: root,
      rightEl: rightEl,
      leftEl: leftEl,
      instance: instance,
      innerOffsetX: innerOffsetX,
      getClickHandler: getClickHandler,
      close: close,
      closed: closed
    };
  }
};

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock("div", {
    "class": "fm-swipe-cell",
    ref: "root",
    onClick: _cache[3] || (_cache[3] = function ($event) {
      return $setup.getClickHandler('cell', $event);
    })
  }, [createVNode("div", {
    "class": "fm-swipe-cell-wrapper",
    style: {
      transform: "translate3d(" + $setup.innerOffsetX + "px, 0, 0)",
      transitionDuration: ".6s"
    }
  }, [createVNode("div", {
    "class": "fm-swipe-cell-left",
    ref: "leftEl",
    onClick: _cache[1] || (_cache[1] = function ($event) {
      return $setup.getClickHandler('left', $event);
    })
  }, [renderSlot(_ctx.$slots, "left", {
    instance: $setup.instance,
    close: function close() {
      return $setup.closed = true;
    }
  })], 512
  /* NEED_PATCH */
  ), renderSlot(_ctx.$slots, "default"), createVNode("div", {
    "class": "fm-swipe-cell-right",
    ref: "rightEl",
    onClick: _cache[2] || (_cache[2] = function ($event) {
      return $setup.getClickHandler('right', $event);
    })
  }, [renderSlot(_ctx.$slots, "right", {
    instance: $setup.instance,
    close: function close() {
      return $setup.closed = true;
    }
  })], 512
  /* NEED_PATCH */
  )], 4
  /* STYLE */
  )], 512
  /* NEED_PATCH */
  );
}

script.render = render;
script.__file = "packages/swipecell/src/swipecell.vue";

script.install = function (app) {
  app.component(script.name, script);
};

export default script;
export { script as SwipeCell };
