import { DomSanitizer } from '@angular/platform-browser';
import { Utils } from '@farris/ui-modal/utils';
import { of, Subject } from 'rxjs';
import { CommonUtils } from '@farris/ui-common';
import { Injectable, Component, ElementRef, Renderer2, HostListener, ViewChild, Output, EventEmitter, Input, HostBinding, RendererFactory2, NgZone, Injector, Optional, NgModule, defineInjectable, inject, INJECTOR } from '@angular/core';
import { CommonModule } from '@angular/common';
import { PerfectScrollbarModule } from '@farris/ui-perfect-scrollbar';
import { AngularDraggableDirective, AngularDraggableModule } from '@farris/ui-draggable';
import { PositioningService } from '@farris/ui-modal/positioning';
import { ComponentLoaderFactory } from '@farris/ui-modal/component-loader';
import { FAreaResponseModule } from '@farris/ui-area-response';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/page-modal-ref.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FEPageModalRef {
    constructor() {
        /**
         * Hides the modal
         */
        this.close = Function;
    }
}
FEPageModalRef.decorators = [
    { type: Injectable }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/page-modal-options.class.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FEPageModalOptions {
}
FEPageModalOptions.decorators = [
    { type: Injectable }
];
/** @type {?} */
const FEPModalConfigDefaults = {
    backdrop: 'static',
    keyboard: true,
    focus: true,
    show: false,
    ignoreBackdropClick: true,
    class: '',
    animated: true,
    initialState: {},
    width: 600,
    height: 450,
    showCloseButton: true,
    minHeight: null,
    minWidth: null,
    maxHeight: null,
    maxWidth: null,
    draggable: true,
    resizable: true,
    enableScroll: true,
    beforeOpen: (/**
     * @return {?}
     */
    () => of(true)),
    beforeClose: (/**
     * @return {?}
     */
    () => of(true)),
    dialogType: 'modal',
    fitContent: false,
    areaResponse: true,
    sidebar: {
        showPos: 'right',
        parentCls: ''
    }
};
/** @type {?} */
const FEPageModalCLASS_NAME = {
    SCROLLBAR_MEASURER: 'modal-scrollbar-measure',
    BACKDROP: 'modal-backdrop',
    OPEN: 'modal-open',
    FADE: 'fade',
    IN: 'in',
    // bs3
    SHOW: 'show' // bs4
};
/** @type {?} */
const FPageModalTRANSITION_DURATIONS = {
    MODAL: 300,
    BACKDROP: 150
};
/** @type {?} */
const FPageModalDISMISS_REASONS = {
    BACKRDOP: 'backdrop-click',
    ESC: 'esc'
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/page-modal-backdrop.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * This component will be added as background layout for modals if enabled
 */
class FEModalBackdropComponent {
    /**
     * @param {?} element
     * @param {?} renderer
     */
    constructor(element, renderer) {
        this._isShown = false;
        this._dialogType = 'modal';
        this.element = element;
        this.renderer = renderer;
    }
    /**
     * @return {?}
     */
    get isAnimated() {
        return this._isAnimated;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set isAnimated(value) {
        this._isAnimated = value;
        // this.renderer.setElementClass(this.element.nativeElement, `${ClassName.FADE}`, value);
    }
    /**
     * @return {?}
     */
    get isShown() {
        return this._isShown;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set isShown(value) {
        this._isShown = value;
        if (value) {
            this.renderer.addClass(this.element.nativeElement, `${FEPageModalCLASS_NAME.IN}`);
        }
        else {
            this.renderer.removeClass(this.element.nativeElement, `${FEPageModalCLASS_NAME.IN}`);
        }
        if (value) {
            this.renderer.addClass(this.element.nativeElement, `${FEPageModalCLASS_NAME.SHOW}`);
        }
        else {
            this.renderer.removeClass(this.element.nativeElement, `${FEPageModalCLASS_NAME.SHOW}`);
        }
    }
    /**
     * @return {?}
     */
    get dialogType() {
        return this._dialogType;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set dialogType(value) {
        // 只有一次显示，不考虑其他
        if (value) {
            this.renderer.addClass(this.element.nativeElement, 'fe-modal-backdrop-' + value);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.isAnimated) {
            this.renderer.addClass(this.element.nativeElement, `${FEPageModalCLASS_NAME.FADE}`);
            Utils.reflow(this.element.nativeElement);
        }
        this.isShown = true;
    }
}
FEModalBackdropComponent.decorators = [
    { type: Component, args: [{
                selector: 'fe-modal-backdrop',
                template: ' ',
                host: { class: FEPageModalCLASS_NAME.BACKDROP }
            }] }
];
/** @nocollapse */
FEModalBackdropComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/page-modal.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FEPageModalComponent {
    /**
     * @param {?} options
     * @param {?} el
     * @param {?} _renderer
     * @param {?} sanitizer
     */
    constructor(options, el, _renderer, sanitizer) {
        this.el = el;
        this._renderer = _renderer;
        this.sanitizer = sanitizer;
        this.isShown = false;
        this.isModalHiding = false;
        this.isMax = false;
        this.closed = new EventEmitter();
        this.opened = new EventEmitter();
        this.resized = new EventEmitter();
        this.modalID = `MODALID_${Date.now().toPrecision()}`;
        this.config = Object.assign({}, options);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set iframe(value) {
        if (this.sanitizer) {
            this.iframeSrc = this.sanitizer.bypassSecurityTrustResourceUrl(value);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.boundsElement = this.el.nativeElement;
        if (this.config.fitContent) {
            this._renderer.addClass(this.el.nativeElement, 'f-modal-fitContent');
        }
        if (this.isAnimated) {
            this._renderer.addClass(this.el.nativeElement, FEPageModalCLASS_NAME.FADE);
        }
        // this.ngZone.runOutsideAngular(() => {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.isShown = true;
            this._renderer.addClass(this.el.nativeElement, FEPageModalCLASS_NAME.SHOW);
            this._renderer.setStyle(this.el.nativeElement, 'display', 'block');
            if (this.config.fitContent && this.el.nativeElement.className.indexOf('f-modal-fitContent-scroll') > -1) {
                this.el.nativeElement.scrollTop = 0;
            }
            if (document && document.body) {
                /** @type {?} */
                const modalLen = this.bsModalService.getModalsCount();
                if (modalLen === 1) {
                    this.bsModalService.checkScrollbar();
                    this.bsModalService.setScrollbar();
                }
                if (!document.body.classList.contains(FEPageModalCLASS_NAME.OPEN)) {
                    this._renderer.addClass(document.body, FEPageModalCLASS_NAME.OPEN);
                }
            }
            this.opened.emit({ modal: this });
        }), this.isAnimated ? FPageModalTRANSITION_DURATIONS.BACKDROP : 0);
        // });
        if (this.el.nativeElement) {
            this.el.nativeElement.focus();
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this._renderer.setStyle(this.el.nativeElement, 'display', 'block');
        // 如果内容适应宽度
        if (this.config.fitContent) {
            /** @type {?} */
            let initElRect = this.el.nativeElement.getBoundingClientRect();
            /** @type {?} */
            let initBodySize = this.getContainerSize();
            if (initElRect.height < initBodySize.height + 30) {
                this._renderer.addClass(this.el.nativeElement, 'f-modal-fitContent-scroll');
            }
        }
    }
    // 获取内容区域的尺寸
    /**
     * @return {?}
     */
    getContainerSize() {
        /** @type {?} */
        const bodyTarget = this.el.nativeElement.querySelector('.modal-body');
        /** @type {?} */
        const height = bodyTarget.offsetHeight;
        /** @type {?} */
        const width = bodyTarget.offsetWidth;
        return { width, height };
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        /** @type {?} */
        const tag = (/** @type {?} */ (event.target));
        if (this.config.ignoreBackdropClick || this.config.backdrop === 'static' || event.target !== this.el.nativeElement) {
            event.stopPropagation();
            return;
        }
        this.bsModalService.setDismissReason(FPageModalDISMISS_REASONS.BACKRDOP);
        this.close();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onEsc(event) {
        if (!this.isShown) {
            return;
        }
        if (event.keyCode === 27) {
            event.preventDefault();
        }
        if (this.config.keyboard &&
            this.level === this.bsModalService.getModalsCount()) {
            this.bsModalService.setDismissReason(FPageModalDISMISS_REASONS.ESC);
            this.close(event);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.isShown) {
            this.close();
        }
    }
    /**
     * @param {?=} e
     * @param {?=} isCloseButton
     * @return {?}
     */
    close(e, isCloseButton = false) {
        if (e) {
            e.stopPropagation();
        }
        if (this.isModalHiding || !this.isShown) {
            return;
        }
        this.config.beforeClose(this).subscribe((/**
         * @param {?} r
         * @return {?}
         */
        r => {
            if (!r) {
                return false;
            }
            this.isModalHiding = true;
            this._renderer.removeClass(this.el.nativeElement, FEPageModalCLASS_NAME.SHOW);
            // this.ngZone.runOutsideAngular(() => {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.isShown = false;
                if (document &&
                    document.body) {
                    if (this.bsModalService.getModalsCount() === 1) {
                        this._renderer.removeClass(document.body, FEPageModalCLASS_NAME.OPEN);
                    }
                }
                this.bsModalService.hide(this.level);
                this.isModalHiding = false;
                if (this.config.closed) {
                    this.config.closed(isCloseButton);
                }
                this.closed.emit(this.level);
            }), this.isAnimated ? FPageModalTRANSITION_DURATIONS.MODAL : 0);
            // });
        }));
    }
    /**
     * @return {?}
     */
    toCenter() {
        /** @type {?} */
        const marginLeft = parseInt('' + -this.config.width / 2, 10) + 'px';
        /** @type {?} */
        const marginTop = parseInt('' + -this.config.height / 2, 10) + 'px';
        /** @type {?} */
        const dialogEl = this.el.nativeElement.querySelector('.modal-dialog');
        /** @type {?} */
        const contentEl = this.el.nativeElement.querySelector('.modal-body');
        this._renderer.setStyle(dialogEl, 'margin-left', marginLeft);
        this._renderer.setStyle(dialogEl, 'margin-top', marginTop);
        /** @type {?} */
        let contentHeight = parseInt('' + this.config.height, 10) - 38;
        if (!this.config.fitContent) {
            this._renderer.setStyle(contentEl, 'height', contentHeight + 'px');
        }
        this._renderer.setStyle(contentEl, 'overflow', 'hidden');
        this._renderer.setStyle(dialogEl, 'transform', `translate3d(0px, 0px, 0px)`);
        setTimeout((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const container = this.getContainerSize();
            const { width: containerWidth, height: containerHeight } = container;
            this.resized.emit({ width: this.config.width, height: this.config.height, containerWidth, containerHeight });
        }));
    }
    /**
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    moveTo(x, y) {
        /** @type {?} */
        const dialogEl = this.el.nativeElement.querySelector('.modal-dialog');
        this._renderer.setStyle(dialogEl, 'transform', `translate3d(${x}px, ${y}px, 0px)`);
        this.draggbar.position = { x, y };
        this.draggbar.resetPosition();
    }
    /**
     * @return {?}
     */
    maxDialog() {
        this.originalWidth = this.config.width;
        this.originalHeight = this.config.height;
        this.config.width = document.scrollingElement.clientWidth - 20;
        this.config.height = document.scrollingElement.clientHeight - 20;
        this.config.draggable = false;
        this.config.resizable = false;
        /** @type {?} */
        const dialogEl = this.el.nativeElement.querySelector('.modal-dialog');
        this._renderer.addClass(dialogEl, 'model-dialog-maximize');
        this._renderer.setStyle(dialogEl, 'top', '50%');
        this._renderer.setStyle(dialogEl, 'left', '50%');
        this.isMax = true;
        this.toCenter();
    }
    /**
     * @param {?} el
     * @return {?}
     */
    dropdown(el) {
    }
    /**
     * @return {?}
     */
    revertDialog() {
        this.isMax = false;
        this.config.width = this.originalWidth;
        this.config.height = this.originalHeight;
        this.config.draggable = true;
        this.config.resizable = true;
        /** @type {?} */
        const dialogEl = this.el.nativeElement.querySelector('.modal-dialog');
        this._renderer.removeClass(dialogEl, 'model-dialog-maximize');
        this.toCenter();
        this.draggbar.resetPosition();
    }
    /**
     * @return {?}
     */
    changeDialogSize() {
        if (this.isMax) {
            this.revertDialog();
        }
        else {
            this.maxDialog();
        }
    }
    /**
     * @param {?} opts
     * @return {?}
     */
    resizeStop(opts) {
        this.config.width = opts.size.width;
        this.config.height = opts.size.height;
        /** @type {?} */
        const container = this.getContainerSize();
        const { width: containerWidth, height: containerHeight } = container;
        this.resized.emit(Object.assign({}, opts.size, { containerWidth, containerHeight }));
    }
}
FEPageModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'fe-page-modal',
                template: `
  <div [attr.id]="modalID"
  [ngDraggable]="config.draggable"
  [ngResizable]="config.resizable"
  [rzMinWidth]="config.minWidth"
  [rzMaxWidth]="config.maxWidth"
  [rzMinHeight]="config.minHeight"
  [rzMaxHeight]="config.maxHeight"
  rzHandles="all" [handle]="dragEl"
  (stopped)="dropdown($event)"
  (rzStop)="resizeStop($event)"
  [inBounds]="true" [bounds]="boundsElement"
  [class]="'modal-dialog' + (config.class ? ' ' + config.class : '')" role="document"
  [style.width]="config.width + 'px'" [style.height]="config.fitContent?'auto':(config.height + 'px')"
  style="position: absolute;top: 50%;left: 50%;">
  <div class="modal-content">   
      <ng-container *ngIf="config.showCloseButton&&!config.showMaxButton">
        <div class="action-wrapper">
          <span class="close-icon" (click)="close($event, true)">
            <i class="f-icon f-icon-close"></i>
          </span>
          </div>
      </ng-container> 
      <ng-container *ngIf="config.showMaxButton">
        <ul class="action-list" [ngDraggable]="true" [handle]="actionListDrag" [inBounds]="true" [bounds]="boundsElement">
            <li class="action-list--item" *ngIf="config.showCloseButton">
                <span class="action-list--icon close-icon"  (click)="close($event, true)">
                  <i class="f-icon f-icon-close"></i>
                </span>
            </li>
            <li *ngIf="config.showMaxButton" class="action-list--item">
                  <span class="action-list--icon max-icon"  (click)="changeDialogSize()" >                
                    <i class="f-icon modal_maximize" [class.modalrevert]="isMax"></i>
                  </span>
            </li>
            <div #actionListDrag class="action-list--drag"></div>
        </ul>     
    </ng-container>   
 
    <div #dragEl class="f-utils-absolute-all" style="height:10px;z-index: 1;"></div>
        <div class="modal-body" [class.f-utils-flex-column]="dialogType === 'iframe'" [f-area-response]="config.areaResponse">
            <perfect-scrollbar [config]="{}" [disabled]="!config.enableScroll||config.fitContent"  *ngIf="dialogType!=='iframe'">
                <ng-content ></ng-content>
            </perfect-scrollbar>
            <iframe *ngIf="dialogType === 'iframe'" class="f-utils-fill" width="100%" frameborder="0" [src]="iframeSrc"></iframe>
        </div>
    </div>
</div>
  `,
                host: {
                    class: 'modal farris-modal fe-cmp-page-modal',
                    role: 'dialog',
                    tabindex: '-1',
                    '[attr.aria-modal]': 'true'
                }
            }] }
];
/** @nocollapse */
FEPageModalComponent.ctorParameters = () => [
    { type: FEPageModalOptions },
    { type: ElementRef },
    { type: Renderer2 },
    { type: DomSanitizer }
];
FEPageModalComponent.propDecorators = {
    iframe: [{ type: Input }],
    draggbar: [{ type: ViewChild, args: [AngularDraggableDirective,] }],
    modalHeader: [{ type: ViewChild, args: ['header',] }],
    closed: [{ type: Output }],
    opened: [{ type: Output }],
    resized: [{ type: Output }],
    modalID: [{ type: HostBinding, args: ['id',] }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }],
    onEsc: [{ type: HostListener, args: ['window:keydown.esc', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/page-sidebar.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FEPageModalSidebarComponent {
    /**
     * @param {?} options
     * @param {?} el
     * @param {?} _renderer
     * @param {?} sanitizer
     */
    constructor(options, el, _renderer, sanitizer) {
        this.el = el;
        this._renderer = _renderer;
        this.sanitizer = sanitizer;
        this.isShown = false;
        this.closed = new EventEmitter();
        this.opened = new EventEmitter();
        this.resized = new EventEmitter();
        this.modalID = `MODALID_${Date.now().toPrecision()}`;
        this.iframeSrc = '';
        this._iframe = '';
        this.isModalHiding = false;
        this.canRemoveInitNoAnimateCls = true;
        this.sidebarCls = {
            'parent': 'f-sidebar-parent',
            'openParent': 'f-sidebar-parent-expand',
            'closeParent': 'f-sidebar-parent-collapse',
            'init': 'animated-none'
        };
        this.isOpen = false;
        this.config = Object.assign({}, options);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set iframe(value) {
        if (this.sanitizer) {
            this._iframe = value;
            this.iframeSrc = this.sanitizer.bypassSecurityTrustResourceUrl(value);
        }
    }
    /**
     * @return {?}
     */
    get iframe() {
        return this._iframe;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        /** @type {?} */
        const tag = (/** @type {?} */ (event.target));
        if (this.config.ignoreBackdropClick || this.config.backdrop === 'static' || event.target !== this.el.nativeElement) {
            event.stopPropagation();
            return;
        }
        this.bsModalService.setDismissReason(FPageModalDISMISS_REASONS.BACKRDOP);
        this.close();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onEsc(event) {
        if (!this.isShown) {
            return;
        }
        if (event.keyCode === 27) {
            event.preventDefault();
        }
        if (this.config.keyboard &&
            this.level === this.bsModalService.getModalsCount()) {
            this.bsModalService.setDismissReason(FPageModalDISMISS_REASONS.ESC);
            this.close(event);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.parentEl = this.el.nativeElement.parentElement;
        this._renderer.addClass(this.parentEl, this.sidebarCls.parent);
        this.removeNoneAnimateCls();
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.isShown = true;
            this.isOpen = true;
            // this._renderer.addClass(
            //     this.el.nativeElement, FEPageModalCLASS_NAME.SHOW
            // );
            // Parent
            this._renderer.removeClass(this.parentEl, this.sidebarCls.closeParent);
            this._renderer.addClass(this.parentEl, this.sidebarCls.openParent);
            // this._renderer.setStyle(this.el.nativeElement, 'display', 'block');
            // if (this.config.fitContent && this.el.nativeElement.className.indexOf('f-modal-fitContent-scroll') > -1) {
            //   this.el.nativeElement.scrollTop = 0;
            // }
            // if (document && document.body) {
            //     const modalLen = this.bsModalService.getModalsCount();
            //     if (modalLen === 1) {
            //         this.bsModalService.checkScrollbar();
            //         this.bsModalService.setScrollbar();
            //     }
            //     if (!document.body.classList.contains(FEPageModalCLASS_NAME.OPEN)) {
            //         this._renderer.addClass(document.body, FEPageModalCLASS_NAME.OPEN);
            //     }
            // }
            this.opened.emit({ modal: this });
        }), 0);
        if (this.el.nativeElement) {
            this.el.nativeElement.focus();
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.isShown) {
            this.close();
        }
    }
    /**
     * @return {?}
     */
    hasIframe() {
        return this._iframe != '';
    }
    /**
     * @return {?}
     */
    closeSideBar() {
        // this.removeNoneAnimateCls();
        // if (this.beforeClose) {
        //     this.beforeClose().subscribe((isOpen: boolean) => {
        //         this.isOpen = !isOpen;
        //     })
        // } else {
        //     this.isOpen = false;
        // }
        this._renderer.removeClass(this.parentEl, this.sidebarCls.openParent);
        this._renderer.addClass(this.parentEl, this.sidebarCls.closeParent);
    }
    /**
     * @return {?}
     */
    openSideBar() {
        this.removeNoneAnimateCls();
        this.isOpen = true;
        this._renderer.removeClass(this.parentEl, this.sidebarCls.closeParent);
        this._renderer.addClass(this.parentEl, this.sidebarCls.openParent);
    }
    /*侧边栏初始因为动画收起时，会被看到, 移除 */
    /**
     * @private
     * @return {?}
     */
    removeNoneAnimateCls() {
        if (!this.canRemoveInitNoAnimateCls) {
            return;
        }
        if (this.sidebarMainEl) {
            this._renderer.removeClass(this.sidebarMainEl.nativeElement, this.sidebarCls.init);
            this.canRemoveInitNoAnimateCls = false;
        }
    }
    // 侧边栏宽度计算
    /**
     * @return {?}
     */
    getSidebarWidth() {
        if (typeof this.config['width'] == 'string') {
            return this.config['width'];
        }
        else {
            return this.config['width'] + 'px';
        }
    }
    // 必须带的方法
    /**
     * @param {?=} e
     * @param {?=} isCloseButton
     * @return {?}
     */
    close(e, isCloseButton = false) {
        if (e) {
            e.stopPropagation();
        }
        if (this.isModalHiding || !this.isShown) {
            return;
        }
        this.config.beforeClose(this).subscribe((/**
         * @param {?} r
         * @return {?}
         */
        r => {
            if (!r) {
                return false;
            }
            //动画结束执行其他操作
            this.sidebarMainEl.nativeElement.parentElement.addEventListener('transitionend', (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                this.bsModalService.hide(this.level);
                this.isModalHiding = false;
                if (this.config.closed) {
                    this.config.closed(isCloseButton);
                }
                this.closed.emit(this.level);
            }), false);
            this.isModalHiding = true;
            this.isShown = false;
            this._renderer.removeClass(this.parentEl, this.sidebarCls.openParent);
            this._renderer.addClass(this.parentEl, this.sidebarCls.closeParent);
        }));
    }
    /**
     * @return {?}
     */
    toCenter() {
    }
}
FEPageModalSidebarComponent.decorators = [
    { type: Component, args: [{
                selector: 'fe-page-sidebar',
                template: "<div [attr.id]=\"modalID\" class=\"f-cmp-sidebar f-sidebar-slide fe-page-sidebar\" [class]=\"config.class+' '+'f-sidebar-pos-'+config.sidebar['showPos']\"\r\n  [ngClass]=\"{'f-sidebar-show': isShown||isOpen, 'f-sidebar-collapse': !isShown||!isOpen}\">\r\n  <div class=\"f-sidebar-main animated-none\" [ngClass]=\"{'f-sidebar-main--has-actions':config.showCloseButton}\" #sidebarMain [ngStyle]=\"{width:config.width}\"\r\n    [f-area-response]=\"!iframe&&config.areaResponse\">\r\n    <perfect-scrollbar [config]=\"{}\" [disabled]=\"!config.enableScroll||config.fitContent\" *ngIf=\"!iframe\">\r\n      <ng-content></ng-content>\r\n    </perfect-scrollbar>\r\n    <iframe *ngIf=\"iframe\" class=\"f-utils-fill\" width=\"100%\" frameborder=\"0\" [src]=\"iframeSrc\"></iframe>\r\n    <div class=\"f-sidebar--action-list\" *ngIf=\"config.showCloseButton\">\r\n      <div class=\"action-list--item\" (click)=\"close($event,true)\">\r\n        <span class=\"action-list--icon close-icon\">\r\n          <i class=\"f-icon f-icon-close\"></i>\r\n        </span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>",
                host: {
                    class: 'fe-cmp-page-modal'
                }
            }] }
];
/** @nocollapse */
FEPageModalSidebarComponent.ctorParameters = () => [
    { type: FEPageModalOptions },
    { type: ElementRef },
    { type: Renderer2 },
    { type: DomSanitizer }
];
FEPageModalSidebarComponent.propDecorators = {
    closed: [{ type: Output }],
    opened: [{ type: Output }],
    resized: [{ type: Output }],
    modalID: [{ type: HostBinding, args: ['id',] }],
    iframe: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }],
    onEsc: [{ type: HostListener, args: ['window:keydown.esc', ['$event'],] }],
    sidebarMainEl: [{ type: ViewChild, args: ['sidebarMain',] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/page-modal.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FEPageModalService {
    /**
     * @param {?} rendererFactory
     * @param {?} clf
     * @param {?} _injector
     * @param {?} ngZone
     */
    constructor(rendererFactory, clf, _injector, ngZone) {
        this.clf = clf;
        this._injector = _injector;
        this.ngZone = ngZone;
        this.version = '0.0.6';
        this.config = FEPModalConfigDefaults;
        this.onShow = new EventEmitter();
        this.onShown = new EventEmitter();
        this.onHide = new EventEmitter();
        this.onHidden = new EventEmitter();
        this.isBodyOverflowing = false;
        this.originalBodyPadding = 0;
        this.scrollbarWidth = 0;
        this.modalsCount = 0;
        this.lastDismissReason = '';
        this.loaders = [];
        this.commonUtils = null;
        this._renderer = rendererFactory.createRenderer(null, null);
        this.commonUtils = new CommonUtils();
    }
    /**
     * @return {?}
     */
    showByComponent() { }
    /**
     * @param {?} content
     * @param {?=} config
     * @return {?}
     */
    showByUrl(content, config) {
        /** @type {?} */
        let subject = new Subject();
        System.import(content).then((/**
         * @param {?} moduleFactorys
         * @return {?}
         */
        (moduleFactorys) => {
            /** @type {?} */
            const moduleFactory = Object.values(moduleFactorys)[0];
            /** @type {?} */
            let moduleRef = moduleFactory.create(this._injector);
            if (moduleRef._bootstrapComponents.length > 0) {
                /** @type {?} */
                const entryComponent = moduleRef._bootstrapComponents[0];
                /** @type {?} */
                const compFactory = moduleRef.componentFactoryResolver.resolveComponentFactory(entryComponent);
                /** @type {?} */
                let compRef = compFactory.create(this._injector);
                /** @type {?} */
                let fpm = this.show(compRef, config);
                subject.next(fpm);
            }
            else {
                subject.next(null);
            }
        }));
        return subject;
    }
    /**
     * Shows a modal
     * @param {?} content
     * @param {?=} config
     * @return {?}
     */
    show(content, config) {
        if (!this.clf) {
            this.clf = this._injector.get(ComponentLoaderFactory);
        }
        if (!this.clf) {
            throw new Error("FEPageModalService Can't Load ComponentLoaderFactory!");
        }
        this.modalsCount++;
        /** @type {?} */
        let tempConfig = { dialogType: 'modal' };
        // 
        if (config.hasOwnProperty('dialogType') && config['dialogType'] == 'sidebar') {
            tempConfig['width'] = '60%';
        }
        this.config = Object.assign({}, FEPModalConfigDefaults, tempConfig, config);
        this._createLoaders(this.config['dialogType']);
        if (config['dialogType'] != 'sidebar') {
            this.checkDialogSize();
        }
        this._showBackdrop();
        this.lastDismissReason = null;
        return this._showModal(content);
    }
    /**
     * @param {?} level
     * @return {?}
     */
    hide(level) {
        if (this.modalsCount === 1) {
            this._hideBackdrop();
            this.resetScrollbar();
        }
        this.modalsCount = this.modalsCount >= 1 ? this.modalsCount - 1 : 0;
        this._hideModal(level);
        this.removeLoaders(level);
    }
    /**
     * 确保当前窗口在最上层
     * @private
     * @param {?} _modalRef
     * @return {?}
     */
    updateZIndex(_modalRef) {
        /** @type {?} */
        const maxZIndex = this.commonUtils.getFloatingLayerIndex();
        _modalRef.dialog.location.nativeElement.style.zIndex = maxZIndex;
    }
    /**
     * @return {?}
     */
    _showBackdrop() {
        /** @type {?} */
        const isBackdropEnabled = this.config.backdrop || this.config.backdrop === 'static';
        /** @type {?} */
        const isBackdropInDOM = !this.backdropRef || !this.backdropRef.instance.isShown;
        this._backdropLoader = this.clf.createLoader(null, null, this._renderer);
        if (this.modalsCount === 1) {
            this.removeBackdrop();
            if (isBackdropEnabled && isBackdropInDOM) {
                this._backdropLoader
                    .attach(FEModalBackdropComponent)
                    .to('body')
                    .show({ isAnimated: this.config.animated, dialogType: this.config['dialogType'] });
                this.backdropRef = this._backdropLoader._componentRef;
            }
        }
    }
    /**
     * @return {?}
     */
    _hideBackdrop() {
        if (!this.backdropRef) {
            return;
        }
        this.backdropRef.instance.isShown = false;
        /** @type {?} */
        const duration = this.config.animated ? FPageModalTRANSITION_DURATIONS.BACKDROP : 0;
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            setTimeout((/**
             * @return {?}
             */
            () => this.removeBackdrop()), duration);
        }));
    }
    /**
     * @param {?} content
     * @return {?}
     */
    _showModal(content) {
        /** @type {?} */
        const modalLoader = this.loaders[this.loaders.length - 1];
        /** @type {?} */
        const bsModalRef = new FEPageModalRef();
        // 修改showType
        this.config.initialState['showType'] = this.config.dialogType;
        /** @type {?} */
        const modalContainerRef = modalLoader
            .provide({ provide: FEPageModalOptions, useValue: this.config })
            .provide({ provide: FEPageModalRef, useValue: FEPageModalRef })
            .attach(this.config.dialogType == 'sidebar' ? FEPageModalSidebarComponent : FEPageModalComponent)
            .to('body')
            .show({ content, isAnimated: this.config.animated, initialState: this.config.initialState, bsModalService: this });
        modalContainerRef.instance.level = this.getModalsCount();
        modalContainerRef.instance.dialogType = this.config.dialogType;
        modalContainerRef.instance.iframe = '';
        if (this.config.dialogType === 'iframe') {
            modalContainerRef.instance.iframe = content;
        }
        bsModalRef.close = (/**
         * @return {?}
         */
        () => {
            modalContainerRef.instance.close();
        });
        // 如果是消息类型的，出现滚动条就不响应动画了
        if (!this.config.fitContent) {
            modalContainerRef.instance.toCenter();
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                document.body.addEventListener('mousedown', this._onMouseDown.bind(this));
            }));
        }
        bsModalRef.content = modalLoader.getInnerComponent() || null;
        bsModalRef.dialog = modalContainerRef;
        modalContainerRef.instance['modalRef'] = bsModalRef;
        if (this.config.opened) {
            this.config.opened();
        }
        this.updateZIndex(bsModalRef);
        return bsModalRef;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    _onMouseDown(e) {
        if (e.target.localName === 'modal-container' || e.target.classList.contains('farris-modal')) {
            this._renderer.addClass(e.target, 'animated');
            this._renderer.addClass(e.target, 'shake');
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this._renderer.removeClass(e.target, 'animated');
                    this._renderer.removeClass(e.target, 'shake');
                }), 650);
            }));
            return false;
        }
    }
    /**
     * @param {?} level
     * @return {?}
     */
    _hideModal(level) {
        /** @type {?} */
        const modalLoader = this.loaders[level - 1];
        if (modalLoader) {
            modalLoader.hide();
        }
    }
    /**
     * @return {?}
     */
    getModalsCount() {
        return this.modalsCount;
    }
    /**
     * @return {?}
     */
    getCurrentModalContainer() {
        return this.loaders[this.getModalsCount() - 1];
    }
    /**
     * @param {?} reason
     * @return {?}
     */
    setDismissReason(reason) {
        this.lastDismissReason = reason;
    }
    /**
     * @return {?}
     */
    removeBackdrop() {
        if (this._backdropLoader) {
            this._backdropLoader.hide();
        }
        this.backdropRef = null;
    }
    /** AFTER PR MERGE MODAL.COMPONENT WILL BE USING THIS CODE */
    /** Scroll bar tricks */
    /**
     * \@internal
     * @return {?}
     */
    checkScrollbar() {
        this.isBodyOverflowing = document.body.clientWidth < window.innerWidth;
        this.scrollbarWidth = this.getScrollbarWidth();
    }
    /**
     * @return {?}
     */
    setScrollbar() {
        if (!document) {
            return;
        }
        this.originalBodyPadding = parseInt(window
            .getComputedStyle(document.body)
            .getPropertyValue('padding-right') || '0', 10);
        if (this.isBodyOverflowing) {
            document.body.style.paddingRight = `${this.originalBodyPadding +
                this.scrollbarWidth}px`;
        }
    }
    /**
     * @private
     * @return {?}
     */
    resetScrollbar() {
        document.body.style.paddingRight = `${this.originalBodyPadding}px`;
    }
    // thx d.walsh
    /**
     * @private
     * @return {?}
     */
    getScrollbarWidth() {
        /** @type {?} */
        const scrollDiv = this._renderer.createElement('div');
        this._renderer.addClass(scrollDiv, FEPageModalCLASS_NAME.SCROLLBAR_MEASURER);
        this._renderer.appendChild(document.body, scrollDiv);
        /** @type {?} */
        const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        this._renderer.removeChild(document.body, scrollDiv);
        return scrollbarWidth;
    }
    /**
     * @private
     * @param {?=} dialogType
     * @return {?}
     */
    _createLoaders(dialogType = 'modal') {
        /** @type {?} */
        let loader;
        if (dialogType == 'sidebar') {
            loader = this.clf.createLoader(null, null, this._renderer);
        }
        else {
            loader = this.clf.createLoader(null, null, this._renderer);
        }
        this.copyEvent(loader.onBeforeShow, this.onShow);
        this.copyEvent(loader.onShown, this.onShown);
        this.copyEvent(loader.onBeforeHide, this.onHide);
        this.copyEvent(loader.onHidden, this.onHidden);
        this.loaders.push(loader);
    }
    /**
     * @private
     * @param {?} level
     * @return {?}
     */
    removeLoaders(level) {
        this.loaders.splice(level - 1, 1);
        this.loaders.forEach((/**
         * @param {?} loader
         * @param {?} i
         * @return {?}
         */
        (loader, i) => {
            loader.instance.level = i + 1;
        }));
    }
    /**
     * @private
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    copyEvent(from, to) {
        from.subscribe((/**
         * @return {?}
         */
        () => {
            to.emit(this.lastDismissReason);
        }));
    }
    /**
     * @private
     * @return {?}
     */
    checkDialogSize() {
        /** @type {?} */
        const newSize = Utils.checkDialogSize(parseInt(this.config.width + '', 10), parseInt(this.config.height + '', 10));
        if (this.config.width !== newSize.width) {
            this.config.width = newSize.width - 20;
        }
        if (this.config.height !== newSize.height) {
            this.config.height = newSize.height - 20;
        }
    }
}
FEPageModalService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
FEPageModalService.ctorParameters = () => [
    { type: RendererFactory2 },
    { type: ComponentLoaderFactory, decorators: [{ type: Optional }] },
    { type: Injector },
    { type: NgZone }
];
/** @nocollapse */ FEPageModalService.ngInjectableDef = defineInjectable({ factory: function FEPageModalService_Factory() { return new FEPageModalService(inject(RendererFactory2), inject(ComponentLoaderFactory, 8), inject(INJECTOR), inject(NgZone)); }, token: FEPageModalService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * Generated from: lib/page-modal.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FEPageModalModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: FEPageModalModule,
            providers: [
                ComponentLoaderFactory,
                FEPageModalService,
                PositioningService
            ]
        };
    }
}
FEPageModalModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FEPageModalComponent, FEModalBackdropComponent, FEPageModalSidebarComponent],
                imports: [
                    CommonModule,
                    PerfectScrollbarModule,
                    AngularDraggableModule,
                    FAreaResponseModule
                ],
                exports: [FEModalBackdropComponent],
                entryComponents: [FEPageModalComponent, FEModalBackdropComponent, FEPageModalSidebarComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: farris-extend-page-modal.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FEPageModalOptions, FEPageModalCLASS_NAME, FEPageModalRef, FEPageModalService, FEModalBackdropComponent, FEPageModalComponent, FEPageModalModule, FEPageModalSidebarComponent as ɵa };

//# sourceMappingURL=farris-extend-page-modal.js.map