import { __assign } from 'tslib';
import { DomSanitizer } from '@angular/platform-browser';
import { Utils } from '@farris/ui-modal/utils';
import { of, Subject } from 'rxjs';
import { CommonUtils } from '@farris/ui-common';
import { Injectable, Component, ElementRef, Renderer2, HostListener, ViewChild, Output, EventEmitter, Input, HostBinding, RendererFactory2, NgZone, Injector, Optional, NgModule, defineInjectable, inject, INJECTOR } from '@angular/core';
import { CommonModule } from '@angular/common';
import { PerfectScrollbarModule } from '@farris/ui-perfect-scrollbar';
import { AngularDraggableDirective, AngularDraggableModule } from '@farris/ui-draggable';
import { PositioningService } from '@farris/ui-modal/positioning';
import { ComponentLoaderFactory } from '@farris/ui-modal/component-loader';
import { FAreaResponseModule } from '@farris/ui-area-response';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/page-modal-ref.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FEPageModalRef = /** @class */ (function () {
    function FEPageModalRef() {
        /**
         * Hides the modal
         */
        this.close = Function;
    }
    FEPageModalRef.decorators = [
        { type: Injectable }
    ];
    return FEPageModalRef;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/page-modal-options.class.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FEPageModalOptions = /** @class */ (function () {
    function FEPageModalOptions() {
    }
    FEPageModalOptions.decorators = [
        { type: Injectable }
    ];
    return FEPageModalOptions;
}());
/** @type {?} */
var FEPModalConfigDefaults = {
    backdrop: 'static',
    keyboard: true,
    focus: true,
    show: false,
    ignoreBackdropClick: true,
    class: '',
    animated: true,
    initialState: {},
    width: 600,
    height: 450,
    showCloseButton: true,
    minHeight: null,
    minWidth: null,
    maxHeight: null,
    maxWidth: null,
    draggable: true,
    resizable: true,
    enableScroll: true,
    beforeOpen: (/**
     * @return {?}
     */
    function () { return of(true); }),
    beforeClose: (/**
     * @return {?}
     */
    function () { return of(true); }),
    dialogType: 'modal',
    fitContent: false,
    areaResponse: true,
    sidebar: {
        showPos: 'right',
        parentCls: ''
    }
};
/** @type {?} */
var FEPageModalCLASS_NAME = {
    SCROLLBAR_MEASURER: 'modal-scrollbar-measure',
    BACKDROP: 'modal-backdrop',
    OPEN: 'modal-open',
    FADE: 'fade',
    IN: 'in',
    // bs3
    SHOW: 'show' // bs4
};
/** @type {?} */
var FPageModalTRANSITION_DURATIONS = {
    MODAL: 300,
    BACKDROP: 150
};
/** @type {?} */
var FPageModalDISMISS_REASONS = {
    BACKRDOP: 'backdrop-click',
    ESC: 'esc'
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/page-modal-backdrop.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * This component will be added as background layout for modals if enabled
 */
var FEModalBackdropComponent = /** @class */ (function () {
    function FEModalBackdropComponent(element, renderer) {
        this._isShown = false;
        this._dialogType = 'modal';
        this.element = element;
        this.renderer = renderer;
    }
    Object.defineProperty(FEModalBackdropComponent.prototype, "isAnimated", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isAnimated;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._isAnimated = value;
            // this.renderer.setElementClass(this.element.nativeElement, `${ClassName.FADE}`, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FEModalBackdropComponent.prototype, "isShown", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isShown;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._isShown = value;
            if (value) {
                this.renderer.addClass(this.element.nativeElement, "" + FEPageModalCLASS_NAME.IN);
            }
            else {
                this.renderer.removeClass(this.element.nativeElement, "" + FEPageModalCLASS_NAME.IN);
            }
            if (value) {
                this.renderer.addClass(this.element.nativeElement, "" + FEPageModalCLASS_NAME.SHOW);
            }
            else {
                this.renderer.removeClass(this.element.nativeElement, "" + FEPageModalCLASS_NAME.SHOW);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FEModalBackdropComponent.prototype, "dialogType", {
        get: /**
         * @return {?}
         */
        function () {
            return this._dialogType;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            // 只有一次显示，不考虑其他
            if (value) {
                this.renderer.addClass(this.element.nativeElement, 'fe-modal-backdrop-' + value);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FEModalBackdropComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.isAnimated) {
            this.renderer.addClass(this.element.nativeElement, "" + FEPageModalCLASS_NAME.FADE);
            Utils.reflow(this.element.nativeElement);
        }
        this.isShown = true;
    };
    FEModalBackdropComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fe-modal-backdrop',
                    template: ' ',
                    host: { class: FEPageModalCLASS_NAME.BACKDROP }
                }] }
    ];
    /** @nocollapse */
    FEModalBackdropComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    return FEModalBackdropComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/page-modal.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FEPageModalComponent = /** @class */ (function () {
    function FEPageModalComponent(options, el, _renderer, sanitizer) {
        this.el = el;
        this._renderer = _renderer;
        this.sanitizer = sanitizer;
        this.isShown = false;
        this.isModalHiding = false;
        this.isMax = false;
        this.closed = new EventEmitter();
        this.opened = new EventEmitter();
        this.resized = new EventEmitter();
        this.modalID = "MODALID_" + Date.now().toPrecision();
        this.config = Object.assign({}, options);
    }
    Object.defineProperty(FEPageModalComponent.prototype, "iframe", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this.sanitizer) {
                this.iframeSrc = this.sanitizer.bypassSecurityTrustResourceUrl(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FEPageModalComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.boundsElement = this.el.nativeElement;
        if (this.config.fitContent) {
            this._renderer.addClass(this.el.nativeElement, 'f-modal-fitContent');
        }
        if (this.isAnimated) {
            this._renderer.addClass(this.el.nativeElement, FEPageModalCLASS_NAME.FADE);
        }
        // this.ngZone.runOutsideAngular(() => {
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.isShown = true;
            _this._renderer.addClass(_this.el.nativeElement, FEPageModalCLASS_NAME.SHOW);
            _this._renderer.setStyle(_this.el.nativeElement, 'display', 'block');
            if (_this.config.fitContent && _this.el.nativeElement.className.indexOf('f-modal-fitContent-scroll') > -1) {
                _this.el.nativeElement.scrollTop = 0;
            }
            if (document && document.body) {
                /** @type {?} */
                var modalLen = _this.bsModalService.getModalsCount();
                if (modalLen === 1) {
                    _this.bsModalService.checkScrollbar();
                    _this.bsModalService.setScrollbar();
                }
                if (!document.body.classList.contains(FEPageModalCLASS_NAME.OPEN)) {
                    _this._renderer.addClass(document.body, FEPageModalCLASS_NAME.OPEN);
                }
            }
            _this.opened.emit({ modal: _this });
        }), this.isAnimated ? FPageModalTRANSITION_DURATIONS.BACKDROP : 0);
        // });
        if (this.el.nativeElement) {
            this.el.nativeElement.focus();
        }
    };
    /**
     * @return {?}
     */
    FEPageModalComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this._renderer.setStyle(this.el.nativeElement, 'display', 'block');
        // 如果内容适应宽度
        if (this.config.fitContent) {
            /** @type {?} */
            var initElRect = this.el.nativeElement.getBoundingClientRect();
            /** @type {?} */
            var initBodySize = this.getContainerSize();
            if (initElRect.height < initBodySize.height + 30) {
                this._renderer.addClass(this.el.nativeElement, 'f-modal-fitContent-scroll');
            }
        }
    };
    // 获取内容区域的尺寸
    // 获取内容区域的尺寸
    /**
     * @return {?}
     */
    FEPageModalComponent.prototype.getContainerSize = 
    // 获取内容区域的尺寸
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var bodyTarget = this.el.nativeElement.querySelector('.modal-body');
        /** @type {?} */
        var height = bodyTarget.offsetHeight;
        /** @type {?} */
        var width = bodyTarget.offsetWidth;
        return { width: width, height: height };
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FEPageModalComponent.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var tag = (/** @type {?} */ (event.target));
        if (this.config.ignoreBackdropClick || this.config.backdrop === 'static' || event.target !== this.el.nativeElement) {
            event.stopPropagation();
            return;
        }
        this.bsModalService.setDismissReason(FPageModalDISMISS_REASONS.BACKRDOP);
        this.close();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FEPageModalComponent.prototype.onEsc = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.isShown) {
            return;
        }
        if (event.keyCode === 27) {
            event.preventDefault();
        }
        if (this.config.keyboard &&
            this.level === this.bsModalService.getModalsCount()) {
            this.bsModalService.setDismissReason(FPageModalDISMISS_REASONS.ESC);
            this.close(event);
        }
    };
    /**
     * @return {?}
     */
    FEPageModalComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.isShown) {
            this.close();
        }
    };
    /**
     * @param {?=} e
     * @param {?=} isCloseButton
     * @return {?}
     */
    FEPageModalComponent.prototype.close = /**
     * @param {?=} e
     * @param {?=} isCloseButton
     * @return {?}
     */
    function (e, isCloseButton) {
        var _this = this;
        if (isCloseButton === void 0) { isCloseButton = false; }
        if (e) {
            e.stopPropagation();
        }
        if (this.isModalHiding || !this.isShown) {
            return;
        }
        this.config.beforeClose(this).subscribe((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            if (!r) {
                return false;
            }
            _this.isModalHiding = true;
            _this._renderer.removeClass(_this.el.nativeElement, FEPageModalCLASS_NAME.SHOW);
            // this.ngZone.runOutsideAngular(() => {
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.isShown = false;
                if (document &&
                    document.body) {
                    if (_this.bsModalService.getModalsCount() === 1) {
                        _this._renderer.removeClass(document.body, FEPageModalCLASS_NAME.OPEN);
                    }
                }
                _this.bsModalService.hide(_this.level);
                _this.isModalHiding = false;
                if (_this.config.closed) {
                    _this.config.closed(isCloseButton);
                }
                _this.closed.emit(_this.level);
            }), _this.isAnimated ? FPageModalTRANSITION_DURATIONS.MODAL : 0);
            // });
        }));
    };
    /**
     * @return {?}
     */
    FEPageModalComponent.prototype.toCenter = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var marginLeft = parseInt('' + -this.config.width / 2, 10) + 'px';
        /** @type {?} */
        var marginTop = parseInt('' + -this.config.height / 2, 10) + 'px';
        /** @type {?} */
        var dialogEl = this.el.nativeElement.querySelector('.modal-dialog');
        /** @type {?} */
        var contentEl = this.el.nativeElement.querySelector('.modal-body');
        this._renderer.setStyle(dialogEl, 'margin-left', marginLeft);
        this._renderer.setStyle(dialogEl, 'margin-top', marginTop);
        /** @type {?} */
        var contentHeight = parseInt('' + this.config.height, 10) - 38;
        if (!this.config.fitContent) {
            this._renderer.setStyle(contentEl, 'height', contentHeight + 'px');
        }
        this._renderer.setStyle(contentEl, 'overflow', 'hidden');
        this._renderer.setStyle(dialogEl, 'transform', "translate3d(0px, 0px, 0px)");
        setTimeout((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var container = _this.getContainerSize();
            var containerWidth = container.width, containerHeight = container.height;
            _this.resized.emit({ width: _this.config.width, height: _this.config.height, containerWidth: containerWidth, containerHeight: containerHeight });
        }));
    };
    /**
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    FEPageModalComponent.prototype.moveTo = /**
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    function (x, y) {
        /** @type {?} */
        var dialogEl = this.el.nativeElement.querySelector('.modal-dialog');
        this._renderer.setStyle(dialogEl, 'transform', "translate3d(" + x + "px, " + y + "px, 0px)");
        this.draggbar.position = { x: x, y: y };
        this.draggbar.resetPosition();
    };
    /**
     * @return {?}
     */
    FEPageModalComponent.prototype.maxDialog = /**
     * @return {?}
     */
    function () {
        this.originalWidth = this.config.width;
        this.originalHeight = this.config.height;
        this.config.width = document.scrollingElement.clientWidth - 20;
        this.config.height = document.scrollingElement.clientHeight - 20;
        this.config.draggable = false;
        this.config.resizable = false;
        /** @type {?} */
        var dialogEl = this.el.nativeElement.querySelector('.modal-dialog');
        this._renderer.addClass(dialogEl, 'model-dialog-maximize');
        this._renderer.setStyle(dialogEl, 'top', '50%');
        this._renderer.setStyle(dialogEl, 'left', '50%');
        this.isMax = true;
        this.toCenter();
    };
    /**
     * @param {?} el
     * @return {?}
     */
    FEPageModalComponent.prototype.dropdown = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
    };
    /**
     * @return {?}
     */
    FEPageModalComponent.prototype.revertDialog = /**
     * @return {?}
     */
    function () {
        this.isMax = false;
        this.config.width = this.originalWidth;
        this.config.height = this.originalHeight;
        this.config.draggable = true;
        this.config.resizable = true;
        /** @type {?} */
        var dialogEl = this.el.nativeElement.querySelector('.modal-dialog');
        this._renderer.removeClass(dialogEl, 'model-dialog-maximize');
        this.toCenter();
        this.draggbar.resetPosition();
    };
    /**
     * @return {?}
     */
    FEPageModalComponent.prototype.changeDialogSize = /**
     * @return {?}
     */
    function () {
        if (this.isMax) {
            this.revertDialog();
        }
        else {
            this.maxDialog();
        }
    };
    /**
     * @param {?} opts
     * @return {?}
     */
    FEPageModalComponent.prototype.resizeStop = /**
     * @param {?} opts
     * @return {?}
     */
    function (opts) {
        this.config.width = opts.size.width;
        this.config.height = opts.size.height;
        /** @type {?} */
        var container = this.getContainerSize();
        var containerWidth = container.width, containerHeight = container.height;
        this.resized.emit(__assign({}, opts.size, { containerWidth: containerWidth, containerHeight: containerHeight }));
    };
    FEPageModalComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fe-page-modal',
                    template: "\n  <div [attr.id]=\"modalID\"\n  [ngDraggable]=\"config.draggable\"\n  [ngResizable]=\"config.resizable\"\n  [rzMinWidth]=\"config.minWidth\"\n  [rzMaxWidth]=\"config.maxWidth\"\n  [rzMinHeight]=\"config.minHeight\"\n  [rzMaxHeight]=\"config.maxHeight\"\n  rzHandles=\"all\" [handle]=\"dragEl\"\n  (stopped)=\"dropdown($event)\"\n  (rzStop)=\"resizeStop($event)\"\n  [inBounds]=\"true\" [bounds]=\"boundsElement\"\n  [class]=\"'modal-dialog' + (config.class ? ' ' + config.class : '')\" role=\"document\"\n  [style.width]=\"config.width + 'px'\" [style.height]=\"config.fitContent?'auto':(config.height + 'px')\"\n  style=\"position: absolute;top: 50%;left: 50%;\">\n  <div class=\"modal-content\">   \n      <ng-container *ngIf=\"config.showCloseButton&&!config.showMaxButton\">\n        <div class=\"action-wrapper\">\n          <span class=\"close-icon\" (click)=\"close($event, true)\">\n            <i class=\"f-icon f-icon-close\"></i>\n          </span>\n          </div>\n      </ng-container> \n      <ng-container *ngIf=\"config.showMaxButton\">\n        <ul class=\"action-list\" [ngDraggable]=\"true\" [handle]=\"actionListDrag\" [inBounds]=\"true\" [bounds]=\"boundsElement\">\n            <li class=\"action-list--item\" *ngIf=\"config.showCloseButton\">\n                <span class=\"action-list--icon close-icon\"  (click)=\"close($event, true)\">\n                  <i class=\"f-icon f-icon-close\"></i>\n                </span>\n            </li>\n            <li *ngIf=\"config.showMaxButton\" class=\"action-list--item\">\n                  <span class=\"action-list--icon max-icon\"  (click)=\"changeDialogSize()\" >                \n                    <i class=\"f-icon modal_maximize\" [class.modalrevert]=\"isMax\"></i>\n                  </span>\n            </li>\n            <div #actionListDrag class=\"action-list--drag\"></div>\n        </ul>     \n    </ng-container>   \n \n    <div #dragEl class=\"f-utils-absolute-all\" style=\"height:10px;z-index: 1;\"></div>\n        <div class=\"modal-body\" [class.f-utils-flex-column]=\"dialogType === 'iframe'\" [f-area-response]=\"config.areaResponse\">\n            <perfect-scrollbar [config]=\"{}\" [disabled]=\"!config.enableScroll||config.fitContent\"  *ngIf=\"dialogType!=='iframe'\">\n                <ng-content ></ng-content>\n            </perfect-scrollbar>\n            <iframe *ngIf=\"dialogType === 'iframe'\" class=\"f-utils-fill\" width=\"100%\" frameborder=\"0\" [src]=\"iframeSrc\"></iframe>\n        </div>\n    </div>\n</div>\n  ",
                    host: {
                        class: 'modal farris-modal fe-cmp-page-modal',
                        role: 'dialog',
                        tabindex: '-1',
                        '[attr.aria-modal]': 'true'
                    }
                }] }
    ];
    /** @nocollapse */
    FEPageModalComponent.ctorParameters = function () { return [
        { type: FEPageModalOptions },
        { type: ElementRef },
        { type: Renderer2 },
        { type: DomSanitizer }
    ]; };
    FEPageModalComponent.propDecorators = {
        iframe: [{ type: Input }],
        draggbar: [{ type: ViewChild, args: [AngularDraggableDirective,] }],
        modalHeader: [{ type: ViewChild, args: ['header',] }],
        closed: [{ type: Output }],
        opened: [{ type: Output }],
        resized: [{ type: Output }],
        modalID: [{ type: HostBinding, args: ['id',] }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }],
        onEsc: [{ type: HostListener, args: ['window:keydown.esc', ['$event'],] }]
    };
    return FEPageModalComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/page-sidebar.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FEPageModalSidebarComponent = /** @class */ (function () {
    function FEPageModalSidebarComponent(options, el, _renderer, sanitizer) {
        this.el = el;
        this._renderer = _renderer;
        this.sanitizer = sanitizer;
        this.isShown = false;
        this.closed = new EventEmitter();
        this.opened = new EventEmitter();
        this.resized = new EventEmitter();
        this.modalID = "MODALID_" + Date.now().toPrecision();
        this.iframeSrc = '';
        this._iframe = '';
        this.isModalHiding = false;
        this.canRemoveInitNoAnimateCls = true;
        this.sidebarCls = {
            'parent': 'f-sidebar-parent',
            'openParent': 'f-sidebar-parent-expand',
            'closeParent': 'f-sidebar-parent-collapse',
            'init': 'animated-none'
        };
        this.isOpen = false;
        this.config = Object.assign({}, options);
    }
    Object.defineProperty(FEPageModalSidebarComponent.prototype, "iframe", {
        get: /**
         * @return {?}
         */
        function () {
            return this._iframe;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this.sanitizer) {
                this._iframe = value;
                this.iframeSrc = this.sanitizer.bypassSecurityTrustResourceUrl(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    FEPageModalSidebarComponent.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var tag = (/** @type {?} */ (event.target));
        if (this.config.ignoreBackdropClick || this.config.backdrop === 'static' || event.target !== this.el.nativeElement) {
            event.stopPropagation();
            return;
        }
        this.bsModalService.setDismissReason(FPageModalDISMISS_REASONS.BACKRDOP);
        this.close();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FEPageModalSidebarComponent.prototype.onEsc = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.isShown) {
            return;
        }
        if (event.keyCode === 27) {
            event.preventDefault();
        }
        if (this.config.keyboard &&
            this.level === this.bsModalService.getModalsCount()) {
            this.bsModalService.setDismissReason(FPageModalDISMISS_REASONS.ESC);
            this.close(event);
        }
    };
    /**
     * @return {?}
     */
    FEPageModalSidebarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.parentEl = this.el.nativeElement.parentElement;
        this._renderer.addClass(this.parentEl, this.sidebarCls.parent);
        this.removeNoneAnimateCls();
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.isShown = true;
            _this.isOpen = true;
            // this._renderer.addClass(
            //     this.el.nativeElement, FEPageModalCLASS_NAME.SHOW
            // );
            // Parent
            _this._renderer.removeClass(_this.parentEl, _this.sidebarCls.closeParent);
            _this._renderer.addClass(_this.parentEl, _this.sidebarCls.openParent);
            // this._renderer.setStyle(this.el.nativeElement, 'display', 'block');
            // if (this.config.fitContent && this.el.nativeElement.className.indexOf('f-modal-fitContent-scroll') > -1) {
            //   this.el.nativeElement.scrollTop = 0;
            // }
            // if (document && document.body) {
            //     const modalLen = this.bsModalService.getModalsCount();
            //     if (modalLen === 1) {
            //         this.bsModalService.checkScrollbar();
            //         this.bsModalService.setScrollbar();
            //     }
            //     if (!document.body.classList.contains(FEPageModalCLASS_NAME.OPEN)) {
            //         this._renderer.addClass(document.body, FEPageModalCLASS_NAME.OPEN);
            //     }
            // }
            _this.opened.emit({ modal: _this });
        }), 0);
        if (this.el.nativeElement) {
            this.el.nativeElement.focus();
        }
    };
    /**
     * @return {?}
     */
    FEPageModalSidebarComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    FEPageModalSidebarComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.isShown) {
            this.close();
        }
    };
    /**
     * @return {?}
     */
    FEPageModalSidebarComponent.prototype.hasIframe = /**
     * @return {?}
     */
    function () {
        return this._iframe != '';
    };
    /**
     * @return {?}
     */
    FEPageModalSidebarComponent.prototype.closeSideBar = /**
     * @return {?}
     */
    function () {
        // this.removeNoneAnimateCls();
        // if (this.beforeClose) {
        //     this.beforeClose().subscribe((isOpen: boolean) => {
        //         this.isOpen = !isOpen;
        //     })
        // } else {
        //     this.isOpen = false;
        // }
        this._renderer.removeClass(this.parentEl, this.sidebarCls.openParent);
        this._renderer.addClass(this.parentEl, this.sidebarCls.closeParent);
    };
    /**
     * @return {?}
     */
    FEPageModalSidebarComponent.prototype.openSideBar = /**
     * @return {?}
     */
    function () {
        this.removeNoneAnimateCls();
        this.isOpen = true;
        this._renderer.removeClass(this.parentEl, this.sidebarCls.closeParent);
        this._renderer.addClass(this.parentEl, this.sidebarCls.openParent);
    };
    /*侧边栏初始因为动画收起时，会被看到, 移除 */
    /*侧边栏初始因为动画收起时，会被看到, 移除 */
    /**
     * @private
     * @return {?}
     */
    FEPageModalSidebarComponent.prototype.removeNoneAnimateCls = /*侧边栏初始因为动画收起时，会被看到, 移除 */
    /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.canRemoveInitNoAnimateCls) {
            return;
        }
        if (this.sidebarMainEl) {
            this._renderer.removeClass(this.sidebarMainEl.nativeElement, this.sidebarCls.init);
            this.canRemoveInitNoAnimateCls = false;
        }
    };
    // 侧边栏宽度计算
    // 侧边栏宽度计算
    /**
     * @return {?}
     */
    FEPageModalSidebarComponent.prototype.getSidebarWidth = 
    // 侧边栏宽度计算
    /**
     * @return {?}
     */
    function () {
        if (typeof this.config['width'] == 'string') {
            return this.config['width'];
        }
        else {
            return this.config['width'] + 'px';
        }
    };
    // 必须带的方法
    // 必须带的方法
    /**
     * @param {?=} e
     * @param {?=} isCloseButton
     * @return {?}
     */
    FEPageModalSidebarComponent.prototype.close = 
    // 必须带的方法
    /**
     * @param {?=} e
     * @param {?=} isCloseButton
     * @return {?}
     */
    function (e, isCloseButton) {
        var _this = this;
        if (isCloseButton === void 0) { isCloseButton = false; }
        if (e) {
            e.stopPropagation();
        }
        if (this.isModalHiding || !this.isShown) {
            return;
        }
        this.config.beforeClose(this).subscribe((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            if (!r) {
                return false;
            }
            //动画结束执行其他操作
            _this.sidebarMainEl.nativeElement.parentElement.addEventListener('transitionend', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                _this.bsModalService.hide(_this.level);
                _this.isModalHiding = false;
                if (_this.config.closed) {
                    _this.config.closed(isCloseButton);
                }
                _this.closed.emit(_this.level);
            }), false);
            _this.isModalHiding = true;
            _this.isShown = false;
            _this._renderer.removeClass(_this.parentEl, _this.sidebarCls.openParent);
            _this._renderer.addClass(_this.parentEl, _this.sidebarCls.closeParent);
        }));
    };
    /**
     * @return {?}
     */
    FEPageModalSidebarComponent.prototype.toCenter = /**
     * @return {?}
     */
    function () {
    };
    FEPageModalSidebarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'fe-page-sidebar',
                    template: "<div [attr.id]=\"modalID\" class=\"f-cmp-sidebar f-sidebar-slide fe-page-sidebar\" [class]=\"config.class+' '+'f-sidebar-pos-'+config.sidebar['showPos']\"\r\n  [ngClass]=\"{'f-sidebar-show': isShown||isOpen, 'f-sidebar-collapse': !isShown||!isOpen}\">\r\n  <div class=\"f-sidebar-main animated-none\" [ngClass]=\"{'f-sidebar-main--has-actions':config.showCloseButton}\" #sidebarMain [ngStyle]=\"{width:config.width}\"\r\n    [f-area-response]=\"!iframe&&config.areaResponse\">\r\n    <perfect-scrollbar [config]=\"{}\" [disabled]=\"!config.enableScroll||config.fitContent\" *ngIf=\"!iframe\">\r\n      <ng-content></ng-content>\r\n    </perfect-scrollbar>\r\n    <iframe *ngIf=\"iframe\" class=\"f-utils-fill\" width=\"100%\" frameborder=\"0\" [src]=\"iframeSrc\"></iframe>\r\n    <div class=\"f-sidebar--action-list\" *ngIf=\"config.showCloseButton\">\r\n      <div class=\"action-list--item\" (click)=\"close($event,true)\">\r\n        <span class=\"action-list--icon close-icon\">\r\n          <i class=\"f-icon f-icon-close\"></i>\r\n        </span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>",
                    host: {
                        class: 'fe-cmp-page-modal'
                    }
                }] }
    ];
    /** @nocollapse */
    FEPageModalSidebarComponent.ctorParameters = function () { return [
        { type: FEPageModalOptions },
        { type: ElementRef },
        { type: Renderer2 },
        { type: DomSanitizer }
    ]; };
    FEPageModalSidebarComponent.propDecorators = {
        closed: [{ type: Output }],
        opened: [{ type: Output }],
        resized: [{ type: Output }],
        modalID: [{ type: HostBinding, args: ['id',] }],
        iframe: [{ type: Input }],
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }],
        onEsc: [{ type: HostListener, args: ['window:keydown.esc', ['$event'],] }],
        sidebarMainEl: [{ type: ViewChild, args: ['sidebarMain',] }]
    };
    return FEPageModalSidebarComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/page-modal.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FEPageModalService = /** @class */ (function () {
    function FEPageModalService(rendererFactory, clf, _injector, ngZone) {
        this.clf = clf;
        this._injector = _injector;
        this.ngZone = ngZone;
        this.version = '0.0.6';
        this.config = FEPModalConfigDefaults;
        this.onShow = new EventEmitter();
        this.onShown = new EventEmitter();
        this.onHide = new EventEmitter();
        this.onHidden = new EventEmitter();
        this.isBodyOverflowing = false;
        this.originalBodyPadding = 0;
        this.scrollbarWidth = 0;
        this.modalsCount = 0;
        this.lastDismissReason = '';
        this.loaders = [];
        this.commonUtils = null;
        this._renderer = rendererFactory.createRenderer(null, null);
        this.commonUtils = new CommonUtils();
    }
    /**
     * @return {?}
     */
    FEPageModalService.prototype.showByComponent = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} content
     * @param {?=} config
     * @return {?}
     */
    FEPageModalService.prototype.showByUrl = /**
     * @param {?} content
     * @param {?=} config
     * @return {?}
     */
    function (content, config) {
        var _this = this;
        /** @type {?} */
        var subject = new Subject();
        System.import(content).then((/**
         * @param {?} moduleFactorys
         * @return {?}
         */
        function (moduleFactorys) {
            /** @type {?} */
            var moduleFactory = Object.values(moduleFactorys)[0];
            /** @type {?} */
            var moduleRef = moduleFactory.create(_this._injector);
            if (moduleRef._bootstrapComponents.length > 0) {
                /** @type {?} */
                var entryComponent = moduleRef._bootstrapComponents[0];
                /** @type {?} */
                var compFactory = moduleRef.componentFactoryResolver.resolveComponentFactory(entryComponent);
                /** @type {?} */
                var compRef = compFactory.create(_this._injector);
                /** @type {?} */
                var fpm = _this.show(compRef, config);
                subject.next(fpm);
            }
            else {
                subject.next(null);
            }
        }));
        return subject;
    };
    /** Shows a modal */
    /**
     * Shows a modal
     * @param {?} content
     * @param {?=} config
     * @return {?}
     */
    FEPageModalService.prototype.show = /**
     * Shows a modal
     * @param {?} content
     * @param {?=} config
     * @return {?}
     */
    function (content, config) {
        if (!this.clf) {
            this.clf = this._injector.get(ComponentLoaderFactory);
        }
        if (!this.clf) {
            throw new Error("FEPageModalService Can't Load ComponentLoaderFactory!");
        }
        this.modalsCount++;
        /** @type {?} */
        var tempConfig = { dialogType: 'modal' };
        // 
        if (config.hasOwnProperty('dialogType') && config['dialogType'] == 'sidebar') {
            tempConfig['width'] = '60%';
        }
        this.config = Object.assign({}, FEPModalConfigDefaults, tempConfig, config);
        this._createLoaders(this.config['dialogType']);
        if (config['dialogType'] != 'sidebar') {
            this.checkDialogSize();
        }
        this._showBackdrop();
        this.lastDismissReason = null;
        return this._showModal(content);
    };
    /**
     * @param {?} level
     * @return {?}
     */
    FEPageModalService.prototype.hide = /**
     * @param {?} level
     * @return {?}
     */
    function (level) {
        if (this.modalsCount === 1) {
            this._hideBackdrop();
            this.resetScrollbar();
        }
        this.modalsCount = this.modalsCount >= 1 ? this.modalsCount - 1 : 0;
        this._hideModal(level);
        this.removeLoaders(level);
    };
    /**
     * 确保当前窗口在最上层
     * @param _modalRef
     */
    /**
     * 确保当前窗口在最上层
     * @private
     * @param {?} _modalRef
     * @return {?}
     */
    FEPageModalService.prototype.updateZIndex = /**
     * 确保当前窗口在最上层
     * @private
     * @param {?} _modalRef
     * @return {?}
     */
    function (_modalRef) {
        /** @type {?} */
        var maxZIndex = this.commonUtils.getFloatingLayerIndex();
        _modalRef.dialog.location.nativeElement.style.zIndex = maxZIndex;
    };
    /**
     * @return {?}
     */
    FEPageModalService.prototype._showBackdrop = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var isBackdropEnabled = this.config.backdrop || this.config.backdrop === 'static';
        /** @type {?} */
        var isBackdropInDOM = !this.backdropRef || !this.backdropRef.instance.isShown;
        this._backdropLoader = this.clf.createLoader(null, null, this._renderer);
        if (this.modalsCount === 1) {
            this.removeBackdrop();
            if (isBackdropEnabled && isBackdropInDOM) {
                this._backdropLoader
                    .attach(FEModalBackdropComponent)
                    .to('body')
                    .show({ isAnimated: this.config.animated, dialogType: this.config['dialogType'] });
                this.backdropRef = this._backdropLoader._componentRef;
            }
        }
    };
    /**
     * @return {?}
     */
    FEPageModalService.prototype._hideBackdrop = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.backdropRef) {
            return;
        }
        this.backdropRef.instance.isShown = false;
        /** @type {?} */
        var duration = this.config.animated ? FPageModalTRANSITION_DURATIONS.BACKDROP : 0;
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            setTimeout((/**
             * @return {?}
             */
            function () { return _this.removeBackdrop(); }), duration);
        }));
    };
    /**
     * @param {?} content
     * @return {?}
     */
    FEPageModalService.prototype._showModal = /**
     * @param {?} content
     * @return {?}
     */
    function (content) {
        var _this = this;
        /** @type {?} */
        var modalLoader = this.loaders[this.loaders.length - 1];
        /** @type {?} */
        var bsModalRef = new FEPageModalRef();
        // 修改showType
        this.config.initialState['showType'] = this.config.dialogType;
        /** @type {?} */
        var modalContainerRef = modalLoader
            .provide({ provide: FEPageModalOptions, useValue: this.config })
            .provide({ provide: FEPageModalRef, useValue: FEPageModalRef })
            .attach(this.config.dialogType == 'sidebar' ? FEPageModalSidebarComponent : FEPageModalComponent)
            .to('body')
            .show({ content: content, isAnimated: this.config.animated, initialState: this.config.initialState, bsModalService: this });
        modalContainerRef.instance.level = this.getModalsCount();
        modalContainerRef.instance.dialogType = this.config.dialogType;
        modalContainerRef.instance.iframe = '';
        if (this.config.dialogType === 'iframe') {
            modalContainerRef.instance.iframe = content;
        }
        bsModalRef.close = (/**
         * @return {?}
         */
        function () {
            modalContainerRef.instance.close();
        });
        // 如果是消息类型的，出现滚动条就不响应动画了
        if (!this.config.fitContent) {
            modalContainerRef.instance.toCenter();
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                document.body.addEventListener('mousedown', _this._onMouseDown.bind(_this));
            }));
        }
        bsModalRef.content = modalLoader.getInnerComponent() || null;
        bsModalRef.dialog = modalContainerRef;
        modalContainerRef.instance['modalRef'] = bsModalRef;
        if (this.config.opened) {
            this.config.opened();
        }
        this.updateZIndex(bsModalRef);
        return bsModalRef;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    FEPageModalService.prototype._onMouseDown = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        if (e.target.localName === 'modal-container' || e.target.classList.contains('farris-modal')) {
            this._renderer.addClass(e.target, 'animated');
            this._renderer.addClass(e.target, 'shake');
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this._renderer.removeClass(e.target, 'animated');
                    _this._renderer.removeClass(e.target, 'shake');
                }), 650);
            }));
            return false;
        }
    };
    /**
     * @param {?} level
     * @return {?}
     */
    FEPageModalService.prototype._hideModal = /**
     * @param {?} level
     * @return {?}
     */
    function (level) {
        /** @type {?} */
        var modalLoader = this.loaders[level - 1];
        if (modalLoader) {
            modalLoader.hide();
        }
    };
    /**
     * @return {?}
     */
    FEPageModalService.prototype.getModalsCount = /**
     * @return {?}
     */
    function () {
        return this.modalsCount;
    };
    /**
     * @return {?}
     */
    FEPageModalService.prototype.getCurrentModalContainer = /**
     * @return {?}
     */
    function () {
        return this.loaders[this.getModalsCount() - 1];
    };
    /**
     * @param {?} reason
     * @return {?}
     */
    FEPageModalService.prototype.setDismissReason = /**
     * @param {?} reason
     * @return {?}
     */
    function (reason) {
        this.lastDismissReason = reason;
    };
    /**
     * @return {?}
     */
    FEPageModalService.prototype.removeBackdrop = /**
     * @return {?}
     */
    function () {
        if (this._backdropLoader) {
            this._backdropLoader.hide();
        }
        this.backdropRef = null;
    };
    /** AFTER PR MERGE MODAL.COMPONENT WILL BE USING THIS CODE */
    /** Scroll bar tricks */
    /** @internal */
    /** AFTER PR MERGE MODAL.COMPONENT WILL BE USING THIS CODE */
    /** Scroll bar tricks */
    /**
     * \@internal
     * @return {?}
     */
    FEPageModalService.prototype.checkScrollbar = /** AFTER PR MERGE MODAL.COMPONENT WILL BE USING THIS CODE */
    /** Scroll bar tricks */
    /**
     * \@internal
     * @return {?}
     */
    function () {
        this.isBodyOverflowing = document.body.clientWidth < window.innerWidth;
        this.scrollbarWidth = this.getScrollbarWidth();
    };
    /**
     * @return {?}
     */
    FEPageModalService.prototype.setScrollbar = /**
     * @return {?}
     */
    function () {
        if (!document) {
            return;
        }
        this.originalBodyPadding = parseInt(window
            .getComputedStyle(document.body)
            .getPropertyValue('padding-right') || '0', 10);
        if (this.isBodyOverflowing) {
            document.body.style.paddingRight = this.originalBodyPadding +
                this.scrollbarWidth + "px";
        }
    };
    /**
     * @private
     * @return {?}
     */
    FEPageModalService.prototype.resetScrollbar = /**
     * @private
     * @return {?}
     */
    function () {
        document.body.style.paddingRight = this.originalBodyPadding + "px";
    };
    // thx d.walsh
    // thx d.walsh
    /**
     * @private
     * @return {?}
     */
    FEPageModalService.prototype.getScrollbarWidth = 
    // thx d.walsh
    /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var scrollDiv = this._renderer.createElement('div');
        this._renderer.addClass(scrollDiv, FEPageModalCLASS_NAME.SCROLLBAR_MEASURER);
        this._renderer.appendChild(document.body, scrollDiv);
        /** @type {?} */
        var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
        this._renderer.removeChild(document.body, scrollDiv);
        return scrollbarWidth;
    };
    /**
     * @private
     * @param {?=} dialogType
     * @return {?}
     */
    FEPageModalService.prototype._createLoaders = /**
     * @private
     * @param {?=} dialogType
     * @return {?}
     */
    function (dialogType) {
        if (dialogType === void 0) { dialogType = 'modal'; }
        /** @type {?} */
        var loader;
        if (dialogType == 'sidebar') {
            loader = this.clf.createLoader(null, null, this._renderer);
        }
        else {
            loader = this.clf.createLoader(null, null, this._renderer);
        }
        this.copyEvent(loader.onBeforeShow, this.onShow);
        this.copyEvent(loader.onShown, this.onShown);
        this.copyEvent(loader.onBeforeHide, this.onHide);
        this.copyEvent(loader.onHidden, this.onHidden);
        this.loaders.push(loader);
    };
    /**
     * @private
     * @param {?} level
     * @return {?}
     */
    FEPageModalService.prototype.removeLoaders = /**
     * @private
     * @param {?} level
     * @return {?}
     */
    function (level) {
        this.loaders.splice(level - 1, 1);
        this.loaders.forEach((/**
         * @param {?} loader
         * @param {?} i
         * @return {?}
         */
        function (loader, i) {
            loader.instance.level = i + 1;
        }));
    };
    /**
     * @private
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    FEPageModalService.prototype.copyEvent = /**
     * @private
     * @param {?} from
     * @param {?} to
     * @return {?}
     */
    function (from, to) {
        var _this = this;
        from.subscribe((/**
         * @return {?}
         */
        function () {
            to.emit(_this.lastDismissReason);
        }));
    };
    /**
     * @private
     * @return {?}
     */
    FEPageModalService.prototype.checkDialogSize = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var newSize = Utils.checkDialogSize(parseInt(this.config.width + '', 10), parseInt(this.config.height + '', 10));
        if (this.config.width !== newSize.width) {
            this.config.width = newSize.width - 20;
        }
        if (this.config.height !== newSize.height) {
            this.config.height = newSize.height - 20;
        }
    };
    FEPageModalService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    FEPageModalService.ctorParameters = function () { return [
        { type: RendererFactory2 },
        { type: ComponentLoaderFactory, decorators: [{ type: Optional }] },
        { type: Injector },
        { type: NgZone }
    ]; };
    /** @nocollapse */ FEPageModalService.ngInjectableDef = defineInjectable({ factory: function FEPageModalService_Factory() { return new FEPageModalService(inject(RendererFactory2), inject(ComponentLoaderFactory, 8), inject(INJECTOR), inject(NgZone)); }, token: FEPageModalService, providedIn: "root" });
    return FEPageModalService;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/page-modal.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FEPageModalModule = /** @class */ (function () {
    function FEPageModalModule() {
    }
    /**
     * @return {?}
     */
    FEPageModalModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: FEPageModalModule,
            providers: [
                ComponentLoaderFactory,
                FEPageModalService,
                PositioningService
            ]
        };
    };
    FEPageModalModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [FEPageModalComponent, FEModalBackdropComponent, FEPageModalSidebarComponent],
                    imports: [
                        CommonModule,
                        PerfectScrollbarModule,
                        AngularDraggableModule,
                        FAreaResponseModule
                    ],
                    exports: [FEModalBackdropComponent],
                    entryComponents: [FEPageModalComponent, FEModalBackdropComponent, FEPageModalSidebarComponent]
                },] }
    ];
    return FEPageModalModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: farris-extend-page-modal.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FEPageModalOptions, FEPageModalCLASS_NAME, FEPageModalRef, FEPageModalService, FEModalBackdropComponent, FEPageModalComponent, FEPageModalModule, FEPageModalSidebarComponent as ɵa };

//# sourceMappingURL=farris-extend-page-modal.js.map