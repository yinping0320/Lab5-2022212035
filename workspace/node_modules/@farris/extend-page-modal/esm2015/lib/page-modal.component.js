/**
 * @fileoverview added by tsickle
 * Generated from: lib/page-modal.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, HostListener, Renderer2, ViewChild, Output, EventEmitter, Input, HostBinding } from '@angular/core';
import { AngularDraggableDirective } from '@farris/ui-draggable';
import { DomSanitizer } from "@angular/platform-browser";
import { FEPageModalCLASS_NAME, FPageModalDISMISS_REASONS, FEPageModalOptions, FPageModalTRANSITION_DURATIONS } from './page-modal-options.class';
export class FEPageModalComponent {
    /**
     * @param {?} options
     * @param {?} el
     * @param {?} _renderer
     * @param {?} sanitizer
     */
    constructor(options, el, _renderer, sanitizer) {
        this.el = el;
        this._renderer = _renderer;
        this.sanitizer = sanitizer;
        this.isShown = false;
        this.isModalHiding = false;
        this.isMax = false;
        this.closed = new EventEmitter();
        this.opened = new EventEmitter();
        this.resized = new EventEmitter();
        this.modalID = `MODALID_${Date.now().toPrecision()}`;
        this.config = Object.assign({}, options);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set iframe(value) {
        if (this.sanitizer) {
            this.iframeSrc = this.sanitizer.bypassSecurityTrustResourceUrl(value);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.boundsElement = this.el.nativeElement;
        if (this.config.fitContent) {
            this._renderer.addClass(this.el.nativeElement, 'f-modal-fitContent');
        }
        if (this.isAnimated) {
            this._renderer.addClass(this.el.nativeElement, FEPageModalCLASS_NAME.FADE);
        }
        // this.ngZone.runOutsideAngular(() => {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.isShown = true;
            this._renderer.addClass(this.el.nativeElement, FEPageModalCLASS_NAME.SHOW);
            this._renderer.setStyle(this.el.nativeElement, 'display', 'block');
            if (this.config.fitContent && this.el.nativeElement.className.indexOf('f-modal-fitContent-scroll') > -1) {
                this.el.nativeElement.scrollTop = 0;
            }
            if (document && document.body) {
                /** @type {?} */
                const modalLen = this.bsModalService.getModalsCount();
                if (modalLen === 1) {
                    this.bsModalService.checkScrollbar();
                    this.bsModalService.setScrollbar();
                }
                if (!document.body.classList.contains(FEPageModalCLASS_NAME.OPEN)) {
                    this._renderer.addClass(document.body, FEPageModalCLASS_NAME.OPEN);
                }
            }
            this.opened.emit({ modal: this });
        }), this.isAnimated ? FPageModalTRANSITION_DURATIONS.BACKDROP : 0);
        // });
        if (this.el.nativeElement) {
            this.el.nativeElement.focus();
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this._renderer.setStyle(this.el.nativeElement, 'display', 'block');
        // 如果内容适应宽度
        if (this.config.fitContent) {
            /** @type {?} */
            let initElRect = this.el.nativeElement.getBoundingClientRect();
            /** @type {?} */
            let initBodySize = this.getContainerSize();
            if (initElRect.height < initBodySize.height + 30) {
                this._renderer.addClass(this.el.nativeElement, 'f-modal-fitContent-scroll');
            }
        }
    }
    // 获取内容区域的尺寸
    /**
     * @return {?}
     */
    getContainerSize() {
        /** @type {?} */
        const bodyTarget = this.el.nativeElement.querySelector('.modal-body');
        /** @type {?} */
        const height = bodyTarget.offsetHeight;
        /** @type {?} */
        const width = bodyTarget.offsetWidth;
        return { width, height };
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        /** @type {?} */
        const tag = (/** @type {?} */ (event.target));
        if (this.config.ignoreBackdropClick || this.config.backdrop === 'static' || event.target !== this.el.nativeElement) {
            event.stopPropagation();
            return;
        }
        this.bsModalService.setDismissReason(FPageModalDISMISS_REASONS.BACKRDOP);
        this.close();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onEsc(event) {
        if (!this.isShown) {
            return;
        }
        if (event.keyCode === 27) {
            event.preventDefault();
        }
        if (this.config.keyboard &&
            this.level === this.bsModalService.getModalsCount()) {
            this.bsModalService.setDismissReason(FPageModalDISMISS_REASONS.ESC);
            this.close(event);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.isShown) {
            this.close();
        }
    }
    /**
     * @param {?=} e
     * @param {?=} isCloseButton
     * @return {?}
     */
    close(e, isCloseButton = false) {
        if (e) {
            e.stopPropagation();
        }
        if (this.isModalHiding || !this.isShown) {
            return;
        }
        this.config.beforeClose(this).subscribe((/**
         * @param {?} r
         * @return {?}
         */
        r => {
            if (!r) {
                return false;
            }
            this.isModalHiding = true;
            this._renderer.removeClass(this.el.nativeElement, FEPageModalCLASS_NAME.SHOW);
            // this.ngZone.runOutsideAngular(() => {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.isShown = false;
                if (document &&
                    document.body) {
                    if (this.bsModalService.getModalsCount() === 1) {
                        this._renderer.removeClass(document.body, FEPageModalCLASS_NAME.OPEN);
                    }
                }
                this.bsModalService.hide(this.level);
                this.isModalHiding = false;
                if (this.config.closed) {
                    this.config.closed(isCloseButton);
                }
                this.closed.emit(this.level);
            }), this.isAnimated ? FPageModalTRANSITION_DURATIONS.MODAL : 0);
            // });
        }));
    }
    /**
     * @return {?}
     */
    toCenter() {
        /** @type {?} */
        const marginLeft = parseInt('' + -this.config.width / 2, 10) + 'px';
        /** @type {?} */
        const marginTop = parseInt('' + -this.config.height / 2, 10) + 'px';
        /** @type {?} */
        const dialogEl = this.el.nativeElement.querySelector('.modal-dialog');
        /** @type {?} */
        const contentEl = this.el.nativeElement.querySelector('.modal-body');
        this._renderer.setStyle(dialogEl, 'margin-left', marginLeft);
        this._renderer.setStyle(dialogEl, 'margin-top', marginTop);
        /** @type {?} */
        let contentHeight = parseInt('' + this.config.height, 10) - 38;
        if (!this.config.fitContent) {
            this._renderer.setStyle(contentEl, 'height', contentHeight + 'px');
        }
        this._renderer.setStyle(contentEl, 'overflow', 'hidden');
        this._renderer.setStyle(dialogEl, 'transform', `translate3d(0px, 0px, 0px)`);
        setTimeout((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const container = this.getContainerSize();
            const { width: containerWidth, height: containerHeight } = container;
            this.resized.emit({ width: this.config.width, height: this.config.height, containerWidth, containerHeight });
        }));
    }
    /**
     * @param {?} x
     * @param {?} y
     * @return {?}
     */
    moveTo(x, y) {
        /** @type {?} */
        const dialogEl = this.el.nativeElement.querySelector('.modal-dialog');
        this._renderer.setStyle(dialogEl, 'transform', `translate3d(${x}px, ${y}px, 0px)`);
        this.draggbar.position = { x, y };
        this.draggbar.resetPosition();
    }
    /**
     * @return {?}
     */
    maxDialog() {
        this.originalWidth = this.config.width;
        this.originalHeight = this.config.height;
        this.config.width = document.scrollingElement.clientWidth - 20;
        this.config.height = document.scrollingElement.clientHeight - 20;
        this.config.draggable = false;
        this.config.resizable = false;
        /** @type {?} */
        const dialogEl = this.el.nativeElement.querySelector('.modal-dialog');
        this._renderer.addClass(dialogEl, 'model-dialog-maximize');
        this._renderer.setStyle(dialogEl, 'top', '50%');
        this._renderer.setStyle(dialogEl, 'left', '50%');
        this.isMax = true;
        this.toCenter();
    }
    /**
     * @param {?} el
     * @return {?}
     */
    dropdown(el) {
    }
    /**
     * @return {?}
     */
    revertDialog() {
        this.isMax = false;
        this.config.width = this.originalWidth;
        this.config.height = this.originalHeight;
        this.config.draggable = true;
        this.config.resizable = true;
        /** @type {?} */
        const dialogEl = this.el.nativeElement.querySelector('.modal-dialog');
        this._renderer.removeClass(dialogEl, 'model-dialog-maximize');
        this.toCenter();
        this.draggbar.resetPosition();
    }
    /**
     * @return {?}
     */
    changeDialogSize() {
        if (this.isMax) {
            this.revertDialog();
        }
        else {
            this.maxDialog();
        }
    }
    /**
     * @param {?} opts
     * @return {?}
     */
    resizeStop(opts) {
        this.config.width = opts.size.width;
        this.config.height = opts.size.height;
        /** @type {?} */
        const container = this.getContainerSize();
        const { width: containerWidth, height: containerHeight } = container;
        this.resized.emit(Object.assign({}, opts.size, { containerWidth, containerHeight }));
    }
}
FEPageModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'fe-page-modal',
                template: `
  <div [attr.id]="modalID"
  [ngDraggable]="config.draggable"
  [ngResizable]="config.resizable"
  [rzMinWidth]="config.minWidth"
  [rzMaxWidth]="config.maxWidth"
  [rzMinHeight]="config.minHeight"
  [rzMaxHeight]="config.maxHeight"
  rzHandles="all" [handle]="dragEl"
  (stopped)="dropdown($event)"
  (rzStop)="resizeStop($event)"
  [inBounds]="true" [bounds]="boundsElement"
  [class]="'modal-dialog' + (config.class ? ' ' + config.class : '')" role="document"
  [style.width]="config.width + 'px'" [style.height]="config.fitContent?'auto':(config.height + 'px')"
  style="position: absolute;top: 50%;left: 50%;">
  <div class="modal-content">   
      <ng-container *ngIf="config.showCloseButton&&!config.showMaxButton">
        <div class="action-wrapper">
          <span class="close-icon" (click)="close($event, true)">
            <i class="f-icon f-icon-close"></i>
          </span>
          </div>
      </ng-container> 
      <ng-container *ngIf="config.showMaxButton">
        <ul class="action-list" [ngDraggable]="true" [handle]="actionListDrag" [inBounds]="true" [bounds]="boundsElement">
            <li class="action-list--item" *ngIf="config.showCloseButton">
                <span class="action-list--icon close-icon"  (click)="close($event, true)">
                  <i class="f-icon f-icon-close"></i>
                </span>
            </li>
            <li *ngIf="config.showMaxButton" class="action-list--item">
                  <span class="action-list--icon max-icon"  (click)="changeDialogSize()" >                
                    <i class="f-icon modal_maximize" [class.modalrevert]="isMax"></i>
                  </span>
            </li>
            <div #actionListDrag class="action-list--drag"></div>
        </ul>     
    </ng-container>   
 
    <div #dragEl class="f-utils-absolute-all" style="height:10px;z-index: 1;"></div>
        <div class="modal-body" [class.f-utils-flex-column]="dialogType === 'iframe'" [f-area-response]="config.areaResponse">
            <perfect-scrollbar [config]="{}" [disabled]="!config.enableScroll||config.fitContent"  *ngIf="dialogType!=='iframe'">
                <ng-content ></ng-content>
            </perfect-scrollbar>
            <iframe *ngIf="dialogType === 'iframe'" class="f-utils-fill" width="100%" frameborder="0" [src]="iframeSrc"></iframe>
        </div>
    </div>
</div>
  `,
                host: {
                    class: 'modal farris-modal fe-cmp-page-modal',
                    role: 'dialog',
                    tabindex: '-1',
                    '[attr.aria-modal]': 'true'
                }
            }] }
];
/** @nocollapse */
FEPageModalComponent.ctorParameters = () => [
    { type: FEPageModalOptions },
    { type: ElementRef },
    { type: Renderer2 },
    { type: DomSanitizer }
];
FEPageModalComponent.propDecorators = {
    iframe: [{ type: Input }],
    draggbar: [{ type: ViewChild, args: [AngularDraggableDirective,] }],
    modalHeader: [{ type: ViewChild, args: ['header',] }],
    closed: [{ type: Output }],
    opened: [{ type: Output }],
    resized: [{ type: Output }],
    modalID: [{ type: HostBinding, args: ['id',] }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }],
    onEsc: [{ type: HostListener, args: ['window:keydown.esc', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    FEPageModalComponent.prototype.config;
    /** @type {?} */
    FEPageModalComponent.prototype.isShown;
    /** @type {?} */
    FEPageModalComponent.prototype.level;
    /** @type {?} */
    FEPageModalComponent.prototype.isAnimated;
    /** @type {?} */
    FEPageModalComponent.prototype.bsModalService;
    /** @type {?} */
    FEPageModalComponent.prototype.dialogType;
    /** @type {?} */
    FEPageModalComponent.prototype.iframeSrc;
    /**
     * @type {?}
     * @private
     */
    FEPageModalComponent.prototype.isModalHiding;
    /**
     * @type {?}
     * @private
     */
    FEPageModalComponent.prototype.originalWidth;
    /**
     * @type {?}
     * @private
     */
    FEPageModalComponent.prototype.originalHeight;
    /** @type {?} */
    FEPageModalComponent.prototype.isMax;
    /** @type {?} */
    FEPageModalComponent.prototype.draggbar;
    /** @type {?} */
    FEPageModalComponent.prototype.modalHeader;
    /** @type {?} */
    FEPageModalComponent.prototype.boundsElement;
    /** @type {?} */
    FEPageModalComponent.prototype.closed;
    /** @type {?} */
    FEPageModalComponent.prototype.opened;
    /** @type {?} */
    FEPageModalComponent.prototype.resized;
    /** @type {?} */
    FEPageModalComponent.prototype.modalID;
    /** @type {?} */
    FEPageModalComponent.prototype.dlgHeaderLineHeight;
    /**
     * @type {?}
     * @protected
     */
    FEPageModalComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FEPageModalComponent.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    FEPageModalComponent.prototype.sanitizer;
}
//# sourceMappingURL=data:application/json;base64,