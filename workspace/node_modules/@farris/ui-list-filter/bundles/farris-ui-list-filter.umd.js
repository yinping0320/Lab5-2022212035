(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('lodash-es'), require('@farris/ui-common'), require('rxjs'), require('@angular/common'), require('@farris/ui-input-group'), require('@farris/ui-datepicker'), require('@farris/ui-datalist'), require('@farris/ui-combo-list'), require('@farris/ui-lookup'), require('@farris/ui-forms'), require('@farris/ui-perfect-scrollbar'), require('@farris/ui-number-spinner'), require('@farris/ui-locale'), require('@angular/core'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('@farris/ui-list-filter', ['exports', 'lodash-es', '@farris/ui-common', 'rxjs', '@angular/common', '@farris/ui-input-group', '@farris/ui-datepicker', '@farris/ui-datalist', '@farris/ui-combo-list', '@farris/ui-lookup', '@farris/ui-forms', '@farris/ui-perfect-scrollbar', '@farris/ui-number-spinner', '@farris/ui-locale', '@angular/core', '@angular/forms'], factory) :
    (factory((global.farris = global.farris || {}, global.farris['ui-list-filter'] = {}),global.lodashEs,global.uiCommon,global.rxjs,global.ng.common,global.uiInputGroup,global.uiDatepicker,global.uiDatalist,global.uiComboList,global.uiLookup,global.uiForms,global.uiPerfectScrollbar,global.uiNumberSpinner,global.uiLocale,global.ng.core,global.ng.forms));
}(this, (function (exports,lodashEs,uiCommon,rxjs,common,uiInputGroup,uiDatepicker,uiDatalist,uiComboList,uiLookup,uiForms,uiPerfectScrollbar,uiNumberSpinner,uiLocale,i0,forms) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 字段配置
     */
    var /**
     * 字段配置
     */ FieldConfig = /** @class */ (function () {
        function FieldConfig() {
        }
        return FieldConfig;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var ControlType = {
        Text: 0,
        //DateTime=1,
        Help: 1,
        DropDown: 2,
        DateRange: 3,
        NumberRange: 4,
        Search: 5,
        Date: 6,
        CheckboxGroup: 7,
        DateRangeTime: 8,
        Radio: 9,
        Year: 10,
        Month: 11,
        MonthRange: 12,
        YearRange: 13,
        InputGroup: 14,
    };
    ControlType[ControlType.Text] = 'Text';
    ControlType[ControlType.Help] = 'Help';
    ControlType[ControlType.DropDown] = 'DropDown';
    ControlType[ControlType.DateRange] = 'DateRange';
    ControlType[ControlType.NumberRange] = 'NumberRange';
    ControlType[ControlType.Search] = 'Search';
    ControlType[ControlType.Date] = 'Date';
    ControlType[ControlType.CheckboxGroup] = 'CheckboxGroup';
    ControlType[ControlType.DateRangeTime] = 'DateRangeTime';
    ControlType[ControlType.Radio] = 'Radio';
    ControlType[ControlType.Year] = 'Year';
    ControlType[ControlType.Month] = 'Month';
    ControlType[ControlType.MonthRange] = 'MonthRange';
    ControlType[ControlType.YearRange] = 'YearRange';
    ControlType[ControlType.InputGroup] = 'InputGroup';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 文本控件
     */
    var /**
     * 文本控件
     */ TextControl = /** @class */ (function () {
        function TextControl() {
        }
        /**
         * 获取控件类型，返回值：文本控件类型
         */
        /**
         * 获取控件类型，返回值：文本控件类型
         * @return {?}
         */
        TextControl.prototype.getControlType = /**
         * 获取控件类型，返回值：文本控件类型
         * @return {?}
         */
            function () {
                return ControlType.Text;
            };
        return TextControl;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 搜索控件
     */
    var /**
     * 搜索控件
     */ SearchControl = /** @class */ (function () {
        function SearchControl() {
        }
        /**
         * 获取控件类型，返回值：搜索控件类型
         */
        /**
         * 获取控件类型，返回值：搜索控件类型
         * @return {?}
         */
        SearchControl.prototype.getControlType = /**
         * 获取控件类型，返回值：搜索控件类型
         * @return {?}
         */
            function () {
                return ControlType.Search;
            };
        return SearchControl;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 日期控件
     */
    var /**
     * 日期控件
     */ DateControl = /** @class */ (function () {
        function DateControl() {
        }
        /**
         * 获取控件类型
         */
        /**
         * 获取控件类型
         * @return {?}
         */
        DateControl.prototype.getControlType = /**
         * 获取控件类型
         * @return {?}
         */
            function () {
                return ControlType.Date;
            };
        return DateControl;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var EnumType = {
        IntType: 0,
        StringType: 1,
        BoolType: 2,
    };
    EnumType[EnumType.IntType] = 'IntType';
    EnumType[EnumType.StringType] = 'StringType';
    EnumType[EnumType.BoolType] = 'BoolType';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 下拉列表Integer类型
     */
    var /**
     * 下拉列表Integer类型
     */ EnumIntegerValue = /** @class */ (function () {
        function EnumIntegerValue() {
        }
        /**
         * @return {?}
         */
        EnumIntegerValue.prototype.getEnumType = /**
         * @return {?}
         */
            function () {
                return EnumType.IntType;
            };
        /**
         * @return {?}
         */
        EnumIntegerValue.prototype.getEnumValueName = /**
         * @return {?}
         */
            function () {
                return this.name;
            };
        /**
         * @return {?}
         */
        EnumIntegerValue.prototype.getEnumValue = /**
         * @return {?}
         */
            function () {
                return this.value;
            };
        return EnumIntegerValue;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 下拉列表String类型
     */
    var /**
     * 下拉列表String类型
     */ EnumStringValue = /** @class */ (function () {
        function EnumStringValue() {
        }
        /**
         * @return {?}
         */
        EnumStringValue.prototype.getEnumType = /**
         * @return {?}
         */
            function () {
                return EnumType.StringType;
            };
        /**
         * @return {?}
         */
        EnumStringValue.prototype.getEnumValueName = /**
         * @return {?}
         */
            function () {
                return this.name;
            };
        /**
         * @return {?}
         */
        EnumStringValue.prototype.getEnumValue = /**
         * @return {?}
         */
            function () {
                return this.value;
            };
        return EnumStringValue;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 下拉列表Bool类型
     */
    var /**
     * 下拉列表Bool类型
     */ EnumBoolValue = /** @class */ (function () {
        function EnumBoolValue() {
        }
        /**
         * @return {?}
         */
        EnumBoolValue.prototype.getEnumType = /**
         * @return {?}
         */
            function () {
                return EnumType.BoolType;
            };
        /**
         * @return {?}
         */
        EnumBoolValue.prototype.getEnumValueName = /**
         * @return {?}
         */
            function () {
                return this.name;
            };
        /**
         * @return {?}
         */
        EnumBoolValue.prototype.getEnumValue = /**
         * @return {?}
         */
            function () {
                return this.value;
            };
        return EnumBoolValue;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var EnumValueConvert = /** @class */ (function () {
        function EnumValueConvert() {
        }
        /**
         * @param {?} obj
         * @return {?}
         */
        EnumValueConvert.prototype.convertJObject = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                /** @type {?} */
                var enumValue = ( /** @type {?} */(obj));
                /** @type {?} */
                var enumType = enumValue.getEnumType();
                /** @type {?} */
                var jobj = new Object();
                jobj["Type"] = enumType;
                jobj["Content"] = enumValue;
                return jobj;
            };
        /**
         * @param {?} jobj
         * @return {?}
         */
        EnumValueConvert.prototype.initFromJobject = /**
         * @param {?} jobj
         * @return {?}
         */
            function (jobj) {
                /** @type {?} */
                var enumType = ( /** @type {?} */(jobj["Type"]));
                /** @type {?} */
                var content = ( /** @type {?} */(jobj["Content"]));
                if (enumType == EnumType.IntType) {
                    return Object.assign(new EnumIntegerValue(), content);
                }
                else if (enumType == EnumType.BoolType) {
                    return Object.assign(new EnumBoolValue(), content);
                }
                else {
                    return Object.assign(new EnumStringValue(), content);
                }
            };
        return EnumValueConvert;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 下拉列表控件
     */
    var /**
     * 下拉列表控件
     */ DropDownControl = /** @class */ (function () {
        function DropDownControl() {
        }
        /**
         * 获取控件类型
         */
        /**
         * 获取控件类型
         * @return {?}
         */
        DropDownControl.prototype.getControlType = /**
         * 获取控件类型
         * @return {?}
         */
            function () {
                return ControlType.DropDown;
            };
        return DropDownControl;
    }());
    /**
     * 下拉列表控件序列化与反序列化器
     */
    var /**
     * 下拉列表控件序列化与反序列化器
     */ DropDownListControlConvert = /** @class */ (function () {
        function DropDownListControlConvert() {
        }
        /**
         * 序列化
         * @param obj 下拉列表控件实体
         */
        /**
         * 序列化
         * @param {?} obj 下拉列表控件实体
         * @return {?}
         */
        DropDownListControlConvert.prototype.convertToObject = /**
         * 序列化
         * @param {?} obj 下拉列表控件实体
         * @return {?}
         */
            function (obj) {
                /** @type {?} */
                var dropDownListControl = ( /** @type {?} */(obj));
                /** @type {?} */
                var jobj = new Object();
                jobj["valueType"] = dropDownListControl.valueType;
                if (dropDownListControl.enumValues != null) {
                    /** @type {?} */
                    var jarray_1 = jobj["enumValues"] = [];
                    /** @type {?} */
                    var convertor_1 = new EnumValueConvert();
                    dropDownListControl.enumValues.forEach(( /**
                     * @param {?} element
                     * @return {?}
                     */function (element) {
                        if (dropDownListControl.valueType == EnumType.BoolType) {
                            jarray_1.push(convertor_1.convertJObject(Object.assign(new EnumBoolValue(), element)));
                        }
                        else if (dropDownListControl.valueType == EnumType.IntType) {
                            jarray_1.push(convertor_1.convertJObject(Object.assign(new EnumIntegerValue(), element)));
                        }
                        else {
                            jarray_1.push(convertor_1.convertJObject(Object.assign(new EnumStringValue(), element)));
                        }
                    }));
                }
                return jobj;
            };
        /**
         * 反序列化
         * @param jobj 下拉列表控件实体序列化后的JSON对象
         */
        /**
         * 反序列化
         * @param {?} jobj 下拉列表控件实体序列化后的JSON对象
         * @return {?}
         */
        DropDownListControlConvert.prototype.initFromObject = /**
         * 反序列化
         * @param {?} jobj 下拉列表控件实体序列化后的JSON对象
         * @return {?}
         */
            function (jobj) {
                /** @type {?} */
                var control = new DropDownControl();
                if (jobj["valueType"] != null) {
                    control.valueType = ( /** @type {?} */(jobj["valueType"]));
                }
                if (jobj["enumValues"] != null) {
                    control.enumValues = new Array();
                    jobj["enumValues"].forEach(( /**
                     * @param {?} element
                     * @return {?}
                     */function (element) {
                        /** @type {?} */
                        var convertor = new EnumValueConvert();
                        control.enumValues.push(convertor.initFromJobject(element));
                    }));
                }
                return control;
            };
        return DropDownListControlConvert;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 数字区间控件
     */
    var /**
     * 数字区间控件
     */ NumberRangeControl = /** @class */ (function () {
        function NumberRangeControl() {
        }
        /**
         * 获取控件类型
         */
        /**
         * 获取控件类型
         * @return {?}
         */
        NumberRangeControl.prototype.getControlType = /**
         * 获取控件类型
         * @return {?}
         */
            function () {
                return ControlType.NumberRange;
            };
        return NumberRangeControl;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 帮助控件
     */
    var /**
     * 帮助控件
     */ HelpContol = /** @class */ (function () {
        function HelpContol() {
        }
        /**
         * 获取控件类型
         */
        /**
         * 获取控件类型
         * @return {?}
         */
        HelpContol.prototype.getControlType = /**
         * 获取控件类型
         * @return {?}
         */
            function () {
                return ControlType.Help;
            };
        return HelpContol;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 多选组控件
     */
    var /**
     * 多选组控件
     */ CheckboxGroupControl = /** @class */ (function () {
        function CheckboxGroupControl() {
        }
        /**
         * 获取控件类型
         */
        /**
         * 获取控件类型
         * @return {?}
         */
        CheckboxGroupControl.prototype.getControlType = /**
         * 获取控件类型
         * @return {?}
         */
            function () {
                return ControlType.CheckboxGroup;
            };
        return CheckboxGroupControl;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 日期区间控件
     */
    var /**
     * 日期区间控件
     */ DateRangeControl = /** @class */ (function () {
        function DateRangeControl() {
        }
        /**
         * 获取控件类型
         */
        /**
         * 获取控件类型
         * @return {?}
         */
        DateRangeControl.prototype.getControlType = /**
         * 获取控件类型
         * @return {?}
         */
            function () {
                return ControlType.DateRange;
            };
        return DateRangeControl;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 年份控件
     */
    var /**
     * 年份控件
     */ YearControl = /** @class */ (function () {
        function YearControl() {
        }
        /**
         * 获取控件类型
         */
        /**
         * 获取控件类型
         * @return {?}
         */
        YearControl.prototype.getControlType = /**
         * 获取控件类型
         * @return {?}
         */
            function () {
                return ControlType.Year;
            };
        return YearControl;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DateRangeValue = /** @class */ (function () {
        function DateRangeValue(value) {
            if (value === void 0) {
                value = { startTime: '', endTime: '' };
            }
            this.clear$ = new i0.EventEmitter();
            this.startTime = value.startTime;
            this.endTime = value.endTime;
        }
        /**
         * @return {?}
         */
        DateRangeValue.prototype.isEmpty = /**
         * @return {?}
         */
            function () {
                return !this.startTime || !this.endTime;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        DateRangeValue.prototype.setOriginalValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (value.formatted) {
                    this.startTime = value.formatted.split(value.delimiter)[0];
                    this.endTime = value.formatted.split(value.delimiter)[1];
                }
                else {
                    this.clearValue();
                }
            };
        /**
         * @return {?}
         */
        DateRangeValue.prototype.getOriginalValue = /**
         * @return {?}
         */
            function () {
                return this.startTime + "~" + this.endTime;
            };
        /**
         * @return {?}
         */
        DateRangeValue.prototype.getControlType = /**
         * @return {?}
         */
            function () {
                return ControlType.DateRange;
            };
        /**
         * @return {?}
         */
        DateRangeValue.prototype.clearValue = /**
         * @return {?}
         */
            function () {
                this.startTime = undefined;
                this.endTime = undefined;
                this.clear$.emit();
            };
        return DateRangeValue;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TextValue = /** @class */ (function () {
        function TextValue(data) {
            if (data === void 0) {
                data = '';
            }
            this.clear$ = new i0.EventEmitter();
            this.value = data;
        }
        /**
         * @return {?}
         */
        TextValue.prototype.getControlType = /**
         * @return {?}
         */
            function () {
                return ControlType.Text;
            };
        /**
         * @return {?}
         */
        TextValue.prototype.clearValue = /**
         * @return {?}
         */
            function () {
                this.value = undefined;
                this.clear$.emit();
            };
        /**
         * @param {?} value
         * @return {?}
         */
        TextValue.prototype.setOriginalValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                throw new Error('Method not implemented.');
            };
        /**
         * @return {?}
         */
        TextValue.prototype.getOriginalValue = /**
         * @return {?}
         */
            function () {
                return this.value;
            };
        /**
         * @return {?}
         */
        TextValue.prototype.isEmpty = /**
         * @return {?}
         */
            function () {
                return !this.value;
            };
        return TextValue;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SearchValue = /** @class */ (function () {
        function SearchValue(data) {
            if (data === void 0) {
                data = '';
            }
            this.clear$ = new i0.EventEmitter();
            this.value = data;
        }
        /**
         * @return {?}
         */
        SearchValue.prototype.getControlType = /**
         * @return {?}
         */
            function () {
                return ControlType.Search;
            };
        /**
         * @return {?}
         */
        SearchValue.prototype.clearValue = /**
         * @return {?}
         */
            function () {
                this.value = '';
                this.clear$.emit();
            };
        /**
         * @param {?} value
         * @return {?}
         */
        SearchValue.prototype.setOriginalValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                throw new Error("Method not implemented.");
            };
        /**
         * @return {?}
         */
        SearchValue.prototype.getOriginalValue = /**
         * @return {?}
         */
            function () {
                return this.value;
            };
        /**
         * @return {?}
         */
        SearchValue.prototype.isEmpty = /**
         * @return {?}
         */
            function () {
                return !this.value;
            };
        return SearchValue;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DateValue = /** @class */ (function () {
        function DateValue(date) {
            if (date === void 0) {
                date = '';
            }
            this.clear$ = new i0.EventEmitter();
            this.value = date;
        }
        /**
         * @param {?} value
         * @return {?}
         */
        DateValue.prototype.setOriginalValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.value = value.formatted;
            };
        /**
         * @return {?}
         */
        DateValue.prototype.getOriginalValue = /**
         * @return {?}
         */
            function () {
                return this.value;
            };
        /**
         * @return {?}
         */
        DateValue.prototype.getControlType = /**
         * @return {?}
         */
            function () {
                return ControlType.Date;
            };
        /**
         * @return {?}
         */
        DateValue.prototype.isEmpty = /**
         * @return {?}
         */
            function () {
                return !this.value;
            };
        /**
         * @return {?}
         */
        DateValue.prototype.clearValue = /**
         * @return {?}
         */
            function () {
                this.value = undefined;
                this.clear$.emit();
            };
        return DateValue;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NumberRangeValue = /** @class */ (function () {
        function NumberRangeValue(data) {
            if (data === void 0) {
                data = { startValue: '', endValue: '' };
            }
            this.clear$ = new i0.EventEmitter();
            this.startValue = data.startValue ? parseFloat(data.startValue) : null;
            this.endValue = data.endValue ? parseFloat(data.endValue) : null;
        }
        /**
         * @return {?}
         */
        NumberRangeValue.prototype.isEmpty = /**
         * @return {?}
         */
            function () {
                return (this.startValue == null && this.endValue == null);
            };
        /**
         * @return {?}
         */
        NumberRangeValue.prototype.getControlType = /**
         * @return {?}
         */
            function () {
                return ControlType.NumberRange;
            };
        /**
         * @return {?}
         */
        NumberRangeValue.prototype.clearValue = /**
         * @return {?}
         */
            function () {
                this.startValue = undefined;
                this.endValue = undefined;
                this.clear$.emit();
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NumberRangeValue.prototype.setOriginalValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                throw new Error("Method not implemented.");
            };
        /**
         * @return {?}
         */
        NumberRangeValue.prototype.getOriginalValue = /**
         * @return {?}
         */
            function () {
                return {
                    begin: this.startValue,
                    end: this.endValue
                };
            };
        return NumberRangeValue;
    }());
    var NumberRangeValueConvertor = /** @class */ (function () {
        function NumberRangeValueConvertor() {
        }
        /**
         * @param {?} obj
         * @return {?}
         */
        NumberRangeValueConvertor.prototype.convertToObject = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                /** @type {?} */
                var dropDownListValue = ( /** @type {?} */(obj));
                /** @type {?} */
                var jobj = new Object();
                jobj["startValue"] = dropDownListValue.startValue;
                jobj["endValue"] = dropDownListValue.endValue;
                return jobj;
            };
        /**
         * @param {?} jobj
         * @return {?}
         */
        NumberRangeValueConvertor.prototype.initFromObject = /**
         * @param {?} jobj
         * @return {?}
         */
            function (jobj) {
                /** @type {?} */
                var numberRangeValue = new NumberRangeValue();
                if (!!(jobj["startValue"])) {
                    numberRangeValue.startValue = ( /** @type {?} */(jobj["startValue"]));
                }
                if (!!(jobj["endValue"])) {
                    numberRangeValue.endValue = ( /** @type {?} */(jobj["endValue"]));
                }
                return numberRangeValue;
            };
        return NumberRangeValueConvertor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DropDownListValue = /** @class */ (function () {
        function DropDownListValue(data) {
            if (data === void 0) {
                data = '';
            }
            this.clear$ = new i0.EventEmitter();
            this.value = data;
        }
        /**
         * @return {?}
         */
        DropDownListValue.prototype.clearValue = /**
         * @return {?}
         */
            function () {
                this.value = undefined;
                this.clear$.emit();
            };
        /**
         * @param {?} value
         * @return {?}
         */
        DropDownListValue.prototype.setOriginalValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.value = value;
            };
        /**
         * @return {?}
         */
        DropDownListValue.prototype.getOriginalValue = /**
         * @return {?}
         */
            function () {
                return this.value;
            };
        /**
         * @return {?}
         */
        DropDownListValue.prototype.getControlType = /**
         * @return {?}
         */
            function () {
                return ControlType.DropDown;
            };
        /**
         * @return {?}
         */
        DropDownListValue.prototype.isEmpty = /**
         * @return {?}
         */
            function () {
                return !this.value;
            };
        return DropDownListValue;
    }());
    var DropDownListValueConvert = /** @class */ (function () {
        function DropDownListValueConvert() {
        }
        /**
         * @param {?} obj
         * @return {?}
         */
        DropDownListValueConvert.prototype.convertToObject = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                /** @type {?} */
                var dropDownListValue = ( /** @type {?} */(obj));
                /** @type {?} */
                var jobj = new Object();
                /** @type {?} */
                var convertor = new EnumValueConvert();
                if (!!(dropDownListValue.value)) {
                    // jobj["value"]=convertor.convertJObject(dropDownListValue.value);
                    jobj["value"] = dropDownListValue.value;
                }
                return jobj;
            };
        /**
         * @param {?} jobj
         * @return {?}
         */
        DropDownListValueConvert.prototype.initFromObject = /**
         * @param {?} jobj
         * @return {?}
         */
            function (jobj) {
                /** @type {?} */
                var dropDownListValue = new DropDownListValue();
                if (!!(jobj["value"])) {
                    /** @type {?} */
                    var convertor = new EnumValueConvert();
                    // dropDownListValue.value=convertor.initFromJobject(jobj["value"]);
                    dropDownListValue.value = jobj["value"];
                }
                return dropDownListValue;
            };
        return DropDownListValueConvert;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var HelpValue = /** @class */ (function () {
        function HelpValue(data) {
            if (data === void 0) {
                data = { value: [], valueField: undefined, textValue: undefined };
            }
            this.clear$ = new i0.EventEmitter();
            if (data.hasOwnProperty('textValue')) { // 新结构，value是数组
                this.valueField = data.valueField;
                this.value = data.value;
                this.textValue = data.textValue;
            }
            else { // 旧结构，value是对象
                this.valueField = data.valueField;
                this.value = data.value ? [data.value] : [];
                this.textValue = 'help-text-value-null'; // 旧结构无textValue属性
            }
        }
        /**
         * @param {?} helpItem
         * @param {?} args
         * @return {?}
         */
        HelpValue.getPropValue = /**
         * @param {?} helpItem
         * @param {?} args
         * @return {?}
         */
            function (helpItem, args) {
                if (args.length > 1) {
                    /** @type {?} */
                    var arg = args.shift();
                    return helpItem[arg] ? this.getPropValue(helpItem[arg], args) : null;
                }
                return helpItem[args[0]];
            };
        /**
         * @return {?}
         */
        HelpValue.prototype.clearValue = /**
         * @return {?}
         */
            function () {
                this.value = [];
                this.valueField = undefined;
                this.textValue = undefined;
                this.clear$.emit();
            };
        /**
         * @param {?} value
         * @return {?}
         */
        HelpValue.prototype.setOriginalValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                throw new Error('Method not implemented.');
            };
        /**
         * @return {?}
         */
        HelpValue.prototype.getOriginalValue = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var args = this.valueField.split('.');
                /** @type {?} */
                var valueArr = this.value.map(( /**
                 * @param {?} helpItem
                 * @return {?}
                 */function (helpItem) { return HelpValue.getPropValue(helpItem, lodashEs.cloneDeep(args)); }));
                return valueArr && valueArr.length ? valueArr.join(',') : '';
            };
        /**
         * @return {?}
         */
        HelpValue.prototype.getControlType = /**
         * @return {?}
         */
            function () {
                return ControlType.Help;
            };
        /**
         * @return {?}
         */
        HelpValue.prototype.isEmpty = /**
         * @return {?}
         */
            function () {
                return !this.valueField;
            };
        /**
         * @param {?} textField
         * @return {?}
         */
        HelpValue.prototype.getTextValue = /**
         * @param {?} textField
         * @return {?}
         */
            function (textField) {
                /** @type {?} */
                var args = textField.split('.');
                /** @type {?} */
                var textArr = this.value.map(( /**
                 * @param {?} helpItem
                 * @return {?}
                 */function (helpItem) { return HelpValue.getPropValue(helpItem, lodashEs.cloneDeep(args)); }));
                return textArr && textArr.length ? textArr.join(',') : '';
            };
        return HelpValue;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CheckboxGroupValue = /** @class */ (function () {
        function CheckboxGroupValue(value) {
            if (value === void 0) {
                value = [];
            }
            this.clear$ = new i0.EventEmitter();
            this.valueChanged = new i0.EventEmitter();
            this.value = value;
        }
        /**
         * @return {?}
         */
        CheckboxGroupValue.prototype.isEmpty = /**
         * @return {?}
         */
            function () {
                return this.value.length == 0;
            };
        /**
         * @return {?}
         */
        CheckboxGroupValue.prototype.clearValue = /**
         * @return {?}
         */
            function () {
                this.value = [];
                this.clear$.emit();
            };
        /**
         * @param {?} value
         * @return {?}
         */
        CheckboxGroupValue.prototype.setOriginalValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.value = value;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        CheckboxGroupValue.prototype.setValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.value = value;
                this.valueChanged.emit(this.value);
            };
        /**
         * @return {?}
         */
        CheckboxGroupValue.prototype.getOriginalValue = /**
         * @return {?}
         */
            function () {
                return this.value;
            };
        /**
         * @return {?}
         */
        CheckboxGroupValue.prototype.getControlType = /**
         * @return {?}
         */
            function () {
                return ControlType.CheckboxGroup;
            };
        return CheckboxGroupValue;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DateRangeTimeValue = /** @class */ (function () {
        function DateRangeTimeValue(value) {
            if (value === void 0) {
                value = { startTime: '', endTime: '' };
            }
            this.clear$ = new i0.EventEmitter();
            this.startTime = value.startTime;
            this.endTime = value.endTime;
        }
        /**
         * @return {?}
         */
        DateRangeTimeValue.prototype.isEmpty = /**
         * @return {?}
         */
            function () {
                return !this.startTime || !this.endTime;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        DateRangeTimeValue.prototype.setOriginalValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (value.formatted) {
                    this.startTime = value.formatted.split(value.delimiter)[0];
                    this.endTime = value.formatted.split(value.delimiter)[1];
                }
                else {
                    this.clearValue();
                }
            };
        /**
         * @return {?}
         */
        DateRangeTimeValue.prototype.getOriginalValue = /**
         * @return {?}
         */
            function () {
                return this.startTime + "~" + this.endTime;
            };
        /**
         * @return {?}
         */
        DateRangeTimeValue.prototype.getControlType = /**
         * @return {?}
         */
            function () {
                return ControlType.DateRangeTime;
            };
        /**
         * @return {?}
         */
        DateRangeTimeValue.prototype.clearValue = /**
         * @return {?}
         */
            function () {
                this.startTime = undefined;
                this.endTime = undefined;
                this.clear$.emit();
            };
        return DateRangeTimeValue;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 日期区间带时间控件
     */
    var /**
     * 日期区间带时间控件
     */ DateRangeTimeControl = /** @class */ (function () {
        function DateRangeTimeControl() {
        }
        /**
         * 获取控件类型
         */
        /**
         * 获取控件类型
         * @return {?}
         */
        DateRangeTimeControl.prototype.getControlType = /**
         * 获取控件类型
         * @return {?}
         */
            function () {
                return ControlType.DateRangeTime;
            };
        return DateRangeTimeControl;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RadioGroupValue = /** @class */ (function () {
        function RadioGroupValue(data) {
            if (data === void 0) {
                data = '';
            }
            this.clear$ = new i0.EventEmitter();
            this.value = data;
        }
        /**
         * @return {?}
         */
        RadioGroupValue.prototype.clearValue = /**
         * @return {?}
         */
            function () {
                this.value = undefined;
                this.clear$.emit();
            };
        /**
         * @param {?} value
         * @return {?}
         */
        RadioGroupValue.prototype.setOriginalValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                throw new Error("Method not implemented.");
            };
        /**
         * @return {?}
         */
        RadioGroupValue.prototype.getOriginalValue = /**
         * @return {?}
         */
            function () {
                return this.value;
            };
        /**
         * @return {?}
         */
        RadioGroupValue.prototype.getControlType = /**
         * @return {?}
         */
            function () {
                return ControlType.Radio;
            };
        /**
         * @return {?}
         */
        RadioGroupValue.prototype.isEmpty = /**
         * @return {?}
         */
            function () {
                return !this.value;
            };
        /**
         * @return {?}
         */
        RadioGroupValue.prototype.getValueText = /**
         * @return {?}
         */
            function () {
                return this.value;
            };
        return RadioGroupValue;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 多选组控件
     */
    var /**
     * 多选组控件
     */ RadioControl = /** @class */ (function () {
        function RadioControl() {
        }
        /**
         * 获取控件类型
         */
        /**
         * 获取控件类型
         * @return {?}
         */
        RadioControl.prototype.getControlType = /**
         * 获取控件类型
         * @return {?}
         */
            function () {
                return ControlType.Radio;
            };
        return RadioControl;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var YearValue = /** @class */ (function () {
        function YearValue(date) {
            if (date === void 0) {
                date = '';
            }
            this.clear$ = new i0.EventEmitter();
            this.value = date;
        }
        /**
         * @param {?} value
         * @return {?}
         */
        YearValue.prototype.setOriginalValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.value = value.formatted;
            };
        /**
         * @return {?}
         */
        YearValue.prototype.getOriginalValue = /**
         * @return {?}
         */
            function () {
                return this.value;
            };
        /**
         * @return {?}
         */
        YearValue.prototype.getControlType = /**
         * @return {?}
         */
            function () {
                return ControlType.Date;
            };
        /**
         * @return {?}
         */
        YearValue.prototype.isEmpty = /**
         * @return {?}
         */
            function () {
                return !this.value;
            };
        /**
         * @return {?}
         */
        YearValue.prototype.clearValue = /**
         * @return {?}
         */
            function () {
                this.value = undefined;
                this.clear$.emit();
            };
        return YearValue;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 年月控件
     */
    var /**
     * 年月控件
     */ MonthControl = /** @class */ (function () {
        function MonthControl() {
        }
        /**
         * 获取控件类型
         */
        /**
         * 获取控件类型
         * @return {?}
         */
        MonthControl.prototype.getControlType = /**
         * 获取控件类型
         * @return {?}
         */
            function () {
                return ControlType.Month;
            };
        return MonthControl;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MonthValue = /** @class */ (function () {
        function MonthValue(date) {
            if (date === void 0) {
                date = '';
            }
            this.clear$ = new i0.EventEmitter();
            this.value = date;
        }
        /**
         * @param {?} value
         * @return {?}
         */
        MonthValue.prototype.setOriginalValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.value = value.formatted;
            };
        /**
         * @return {?}
         */
        MonthValue.prototype.getOriginalValue = /**
         * @return {?}
         */
            function () {
                return this.value;
            };
        /**
         * @return {?}
         */
        MonthValue.prototype.getControlType = /**
         * @return {?}
         */
            function () {
                return ControlType.Date;
            };
        /**
         * @return {?}
         */
        MonthValue.prototype.isEmpty = /**
         * @return {?}
         */
            function () {
                return !this.value;
            };
        /**
         * @return {?}
         */
        MonthValue.prototype.clearValue = /**
         * @return {?}
         */
            function () {
                this.value = undefined;
                this.clear$.emit();
            };
        return MonthValue;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var YearRangeValue = /** @class */ (function () {
        function YearRangeValue(value) {
            if (value === void 0) {
                value = { startTime: '', endTime: '' };
            }
            this.clear$ = new i0.EventEmitter();
            this.startTime = value.startTime;
            this.endTime = value.endTime;
        }
        /**
         * @param {?} value
         * @return {?}
         */
        YearRangeValue.prototype.setOriginalValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (value.formatted) {
                    this.startTime = value.formatted.split(value.delimiter)[0];
                    this.endTime = value.formatted.split(value.delimiter)[1];
                }
                else {
                    this.clearValue();
                }
            };
        /**
         * @return {?}
         */
        YearRangeValue.prototype.getOriginalValue = /**
         * @return {?}
         */
            function () {
                return this.startTime + "~" + this.endTime;
            };
        /**
         * @return {?}
         */
        YearRangeValue.prototype.getControlType = /**
         * @return {?}
         */
            function () {
                return ControlType.DateRange;
            };
        /**
         * @return {?}
         */
        YearRangeValue.prototype.clearValue = /**
         * @return {?}
         */
            function () {
                this.startTime = undefined;
                this.endTime = undefined;
                this.clear$.emit();
            };
        /**
         * @return {?}
         */
        YearRangeValue.prototype.isEmpty = /**
         * @return {?}
         */
            function () {
                return !this.startTime || !this.endTime;
            };
        return YearRangeValue;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 年度区间控件
     */
    var /**
     * 年度区间控件
     */ YearRangeControl = /** @class */ (function () {
        function YearRangeControl() {
        }
        /**
         * 获取控件类型
         */
        /**
         * 获取控件类型
         * @return {?}
         */
        YearRangeControl.prototype.getControlType = /**
         * 获取控件类型
         * @return {?}
         */
            function () {
                return ControlType.YearRange;
            };
        return YearRangeControl;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MonthRangeValue = /** @class */ (function () {
        function MonthRangeValue(value) {
            if (value === void 0) {
                value = { startTime: '', endTime: '' };
            }
            this.clear$ = new i0.EventEmitter();
            this.startTime = value.startTime;
            this.endTime = value.endTime;
        }
        /**
         * @return {?}
         */
        MonthRangeValue.prototype.isEmpty = /**
         * @return {?}
         */
            function () {
                return !this.startTime || !this.endTime;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        MonthRangeValue.prototype.setOriginalValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (value.formatted) {
                    this.startTime = value.formatted.split(value.delimiter)[0];
                    this.endTime = value.formatted.split(value.delimiter)[1];
                }
                else {
                    this.clearValue();
                }
            };
        /**
         * @return {?}
         */
        MonthRangeValue.prototype.getOriginalValue = /**
         * @return {?}
         */
            function () {
                return this.startTime + "~" + this.endTime;
            };
        /**
         * @return {?}
         */
        MonthRangeValue.prototype.getControlType = /**
         * @return {?}
         */
            function () {
                return ControlType.DateRange;
            };
        /**
         * @return {?}
         */
        MonthRangeValue.prototype.clearValue = /**
         * @return {?}
         */
            function () {
                this.startTime = undefined;
                this.endTime = undefined;
                this.clear$.emit();
            };
        return MonthRangeValue;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 年月区间控件
     */
    var /**
     * 年月区间控件
     */ MonthRangeControl = /** @class */ (function () {
        function MonthRangeControl() {
        }
        /**
         * 获取控件类型
         */
        /**
         * 获取控件类型
         * @return {?}
         */
        MonthRangeControl.prototype.getControlType = /**
         * 获取控件类型
         * @return {?}
         */
            function () {
                return ControlType.MonthRange;
            };
        return MonthRangeControl;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var InputGroupValue = /** @class */ (function () {
        function InputGroupValue(data) {
            if (data === void 0) {
                data = { value: [], textValue: undefined, textField: undefined, isInputText: undefined };
            }
            this.clear$ = new i0.EventEmitter();
            this.value = data.value;
            this.textValue = data.textValue ? data.textValue.trim() : '';
            this.textField = data.textField;
            this.isInputText = data.isInputText;
        }
        /**
         * @param {?} targetField
         * @return {?}
         */
        InputGroupValue.prototype.getTextValue = /**
         * @param {?} targetField
         * @return {?}
         */
            function (targetField) {
                var _this = this;
                /** @type {?} */
                var args = targetField.split('.');
                /** @type {?} */
                var textArr = this.value.map(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) { return _this.getPropValue(item, lodashEs.cloneDeep(args)); }));
                return textArr && textArr.length ? textArr.join(',') : '';
            };
        /**
         * @param {?} item
         * @param {?} args
         * @return {?}
         */
        InputGroupValue.prototype.getPropValue = /**
         * @param {?} item
         * @param {?} args
         * @return {?}
         */
            function (item, args) {
                if (args.length > 1) {
                    /** @type {?} */
                    var arg = args.shift();
                    if (arg) {
                        return item[arg] ? this.getPropValue(item[arg], args) : '';
                    }
                    else {
                        return '';
                    }
                }
                return item[args[0]];
            };
        /**
         * @return {?}
         */
        InputGroupValue.prototype.getControlType = /**
         * @return {?}
         */
            function () {
                return ControlType.InputGroup;
            };
        /**
         * @param {?} value
         * @return {?}
         */
        InputGroupValue.prototype.setOriginalValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                throw new Error("Method not implemented.");
            };
        /**
         * @return {?}
         */
        InputGroupValue.prototype.getOriginalValue = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var args = this.textField.split('.');
                /** @type {?} */
                var textArr = this.value.map(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) { return _this.getPropValue(item, lodashEs.cloneDeep(args)); }));
                return textArr && textArr.length ? textArr.join(',') : '';
            };
        /**
         * @return {?}
         */
        InputGroupValue.prototype.clearValue = /**
         * @return {?}
         */
            function () {
                this.value = [];
                this.textValue = undefined;
                this.textField = undefined;
                this.isInputText = undefined;
                this.clear$.emit();
            };
        /**
         * @return {?}
         */
        InputGroupValue.prototype.isEmpty = /**
         * @return {?}
         */
            function () {
                return !this.textValue;
            };
        return InputGroupValue;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 智能输入框控件
     */
    var /**
     * 智能输入框控件
     */ InputGroupControl = /** @class */ (function () {
        function InputGroupControl() {
        }
        /**
         * 获取控件类型，返回值：智能输入框控件类型
         */
        /**
         * 获取控件类型，返回值：智能输入框控件类型
         * @return {?}
         */
        InputGroupControl.prototype.getControlType = /**
         * 获取控件类型，返回值：智能输入框控件类型
         * @return {?}
         */
            function () {
                return ControlType.InputGroup;
            };
        /**
         * @return {?}
         */
        InputGroupControl.prototype.isRequired = /**
         * @return {?}
         */
            function () {
                return !!this.required;
            };
        return InputGroupControl;
    }());
    var DialogConfig = /** @class */ (function () {
        function DialogConfig() {
        }
        return DialogConfig;
    }());
    var DialogButtonConfig = /** @class */ (function () {
        function DialogButtonConfig() {
        }
        return DialogButtonConfig;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ListFilterService = /** @class */ (function () {
        function ListFilterService() {
        }
        /**
         * @param {?} filedSchemas
         * @return {?}
         */
        ListFilterService.prototype.fieldSchemasConvert = /**
         * @param {?} filedSchemas
         * @return {?}
         */
            function (filedSchemas) {
                var _this = this;
                /** @type {?} */
                var fieldConfigs = new Array();
                if (!(filedSchemas) || filedSchemas.length <= 0) {
                    return fieldConfigs;
                }
                else {
                    filedSchemas.forEach(( /**
                     * @param {?} filedSchema
                     * @return {?}
                     */function (filedSchema) {
                        /** @type {?} */
                        var fieldConfig = new FieldConfig();
                        fieldConfig.id = filedSchema.hasOwnProperty('id') ? filedSchema.id : '';
                        fieldConfig.labelCode = filedSchema.labelCode;
                        fieldConfig.code = filedSchema.hasOwnProperty('code') ? filedSchema.code : '';
                        fieldConfig.placeHolder = filedSchema.placeHolder;
                        fieldConfig.beginPlaceHolder = filedSchema.beginPlaceHolder;
                        fieldConfig.endPlaceHolder = filedSchema.endPlaceHolder;
                        fieldConfig.name = filedSchema.name;
                        if (!(filedSchema.control) || !(filedSchema.control.controltype)) {
                            fieldConfig.control = new TextControl();
                            fieldConfig.value = new TextValue(filedSchema.value);
                        }
                        else {
                            if (filedSchema.control.controltype == 'text') {
                                fieldConfig.control = _this.getTextControl(filedSchema);
                                fieldConfig.value = new TextValue(filedSchema.value);
                            }
                            else if (filedSchema.control.controltype == 'search') {
                                fieldConfig.control = _this.getSearchControl(filedSchema);
                                fieldConfig.value = new SearchValue(filedSchema.value);
                            }
                            else if (filedSchema.control.controltype == 'singleDate') {
                                fieldConfig.control = _this.getDateControl(filedSchema);
                                fieldConfig.value = new DateValue(filedSchema.value);
                            }
                            else if (filedSchema.control.controltype == 'date') {
                                fieldConfig.control = _this.getDateRangeControl(filedSchema);
                                fieldConfig.value = new DateRangeValue(filedSchema.value);
                            }
                            else if (filedSchema.control.controltype == 'yearRange') {
                                fieldConfig.control = _this.getYearRangeControl(filedSchema);
                                fieldConfig.value = new YearRangeValue(filedSchema.value);
                            }
                            else if (filedSchema.control.controltype == 'monthRange') {
                                fieldConfig.control = _this.getMonthRangeControl(filedSchema);
                                fieldConfig.value = new MonthRangeValue(filedSchema.value);
                            }
                            else if (filedSchema.control.controltype == 'datetime') {
                                fieldConfig.control = _this.getDateRangeTimeControl(filedSchema);
                                fieldConfig.value = new DateRangeTimeValue(filedSchema.value);
                            }
                            else if (filedSchema.control.controltype == 'year') {
                                fieldConfig.control = _this.getYearControl(filedSchema);
                                fieldConfig.value = new YearValue(filedSchema.value);
                            }
                            else if (filedSchema.control.controltype == 'month') {
                                fieldConfig.control = _this.getMonthControl(filedSchema);
                                fieldConfig.value = new MonthValue(filedSchema.value);
                            }
                            else if (filedSchema.control.controltype == 'dropdown') {
                                fieldConfig.control = _this.getDropDownControl(filedSchema);
                                fieldConfig.value = new DropDownListValue(filedSchema.value);
                            }
                            else if (filedSchema.control.controltype == 'number') {
                                fieldConfig.control = _this.getNumberRangeControl(filedSchema);
                                fieldConfig.value = new NumberRangeValue(filedSchema.value);
                            }
                            else if (filedSchema.control.controltype == 'help') {
                                fieldConfig.control = _this.getLookUpEditControl(filedSchema);
                                fieldConfig.value = new HelpValue(filedSchema.value);
                            }
                            else if (filedSchema.control.controltype == 'checkboxgroup') {
                                fieldConfig.control = _this.getCheckboxGroupControl(filedSchema);
                                fieldConfig.value = new CheckboxGroupValue(filedSchema.value);
                            }
                            else if (filedSchema.control.controltype == 'radio') {
                                fieldConfig.control = _this.getRadioControl(filedSchema);
                                fieldConfig.value = new RadioGroupValue(filedSchema.value);
                            }
                            else if (filedSchema.control.controltype == 'input-group') {
                                fieldConfig.control = _this.getInputGroupControl(filedSchema);
                                fieldConfig.value = new InputGroupValue(filedSchema.value);
                            }
                            else {
                                fieldConfig.control = _this.getTextControl(filedSchema);
                                fieldConfig.value = new TextValue(filedSchema.value);
                            }
                            if (filedSchema.control.enableClear === undefined) {
                                fieldConfig.control.enableClear = true;
                            }
                            else {
                                fieldConfig.control.enableClear = filedSchema.control.enableClear;
                            }
                        }
                        fieldConfigs.push(fieldConfig);
                    }));
                }
                return fieldConfigs;
            };
        /**
         * @private
         * @param {?} filedSchema
         * @return {?}
         */
        ListFilterService.prototype.getTextControl = /**
         * @private
         * @param {?} filedSchema
         * @return {?}
         */
            function (filedSchema) {
                /** @type {?} */
                var textControl = new TextControl();
                textControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
                textControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
                textControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
                textControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
                return textControl;
            };
        /**
         * @private
         * @param {?} filedSchema
         * @return {?}
         */
        ListFilterService.prototype.getInputGroupControl = /**
         * @private
         * @param {?} filedSchema
         * @return {?}
         */
            function (filedSchema) {
                /** @type {?} */
                var inputGroupControl = new InputGroupControl();
                inputGroupControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
                inputGroupControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
                inputGroupControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
                inputGroupControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
                inputGroupControl.editable = filedSchema.control.hasOwnProperty('editable') ? filedSchema.control.editable : true;
                inputGroupControl.groupText = filedSchema.control.hasOwnProperty('groupText') ? filedSchema.control.groupText : '<span class="f-icon f-icon-lookup"></span>';
                inputGroupControl.usageMode = filedSchema.control.usageMode;
                inputGroupControl.dialogOptions = this.setInputGroupDialog(filedSchema.control.usageMode, filedSchema.control.modalConfig, filedSchema.id);
                inputGroupControl.click = filedSchema.control.click;
                return inputGroupControl;
            };
        /**
         * @private
         * @param {?} filedSchema
         * @return {?}
         */
        ListFilterService.prototype.getDateControl = /**
         * @private
         * @param {?} filedSchema
         * @return {?}
         */
            function (filedSchema) {
                /** @type {?} */
                var dateControl = new DateControl();
                dateControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
                dateControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
                dateControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
                dateControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
                dateControl.format = filedSchema.control.hasOwnProperty('format') ? filedSchema.control.format : '';
                dateControl.compareType = filedSchema.control.hasOwnProperty('compareType') ? filedSchema.control.compareType : 0;
                // dateControl.showType = filedSchema.control.hasOwnProperty('showType')? filedSchema.control.showType : '';
                return dateControl;
            };
        /**
         * @private
         * @param {?} filedSchema
         * @return {?}
         */
        ListFilterService.prototype.getYearControl = /**
         * @private
         * @param {?} filedSchema
         * @return {?}
         */
            function (filedSchema) {
                /** @type {?} */
                var yearControl = new YearControl();
                yearControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
                yearControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
                yearControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
                yearControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
                yearControl.format = filedSchema.control.hasOwnProperty('format') ? filedSchema.control.format : '';
                yearControl.compareType = filedSchema.control.hasOwnProperty('compareType') ? filedSchema.control.compareType : 0;
                // yearControl.showType = filedSchema.control.hasOwnProperty('showType')? filedSchema.control.showType : '';
                return yearControl;
            };
        /**
         * @private
         * @param {?} filedSchema
         * @return {?}
         */
        ListFilterService.prototype.getMonthControl = /**
         * @private
         * @param {?} filedSchema
         * @return {?}
         */
            function (filedSchema) {
                /** @type {?} */
                var monthControl = new MonthControl();
                monthControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
                monthControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
                monthControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
                monthControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
                monthControl.format = filedSchema.control.hasOwnProperty('format') ? filedSchema.control.format : '';
                monthControl.compareType = filedSchema.control.hasOwnProperty('compareType') ? filedSchema.control.compareType : 0;
                // yearControl.showType = filedSchema.control.hasOwnProperty('showType')? filedSchema.control.showType : '';
                return monthControl;
            };
        /**
         * @private
         * @param {?} filedSchema
         * @return {?}
         */
        ListFilterService.prototype.getNumberRangeControl = /**
         * @private
         * @param {?} filedSchema
         * @return {?}
         */
            function (filedSchema) {
                /** @type {?} */
                var numberRangeControl = new NumberRangeControl();
                numberRangeControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
                numberRangeControl.beginPlaceHolder = filedSchema.control.beginPlaceHolder ? filedSchema.control.beginPlaceHolder : '';
                numberRangeControl.endPlaceHolder = filedSchema.control.endPlaceHolder ? filedSchema.control.endPlaceHolder : '';
                numberRangeControl.precision = filedSchema.control.hasOwnProperty('precision') ? filedSchema.control.precision : 2;
                numberRangeControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
                numberRangeControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
                numberRangeControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
                numberRangeControl.bigNumber = filedSchema.control.hasOwnProperty('bigNumber') ? filedSchema.control.bigNumber : false;
                return numberRangeControl;
            };
        /**
         * @private
         * @param {?} filedSchema
         * @return {?}
         */
        ListFilterService.prototype.getSearchControl = /**
         * @private
         * @param {?} filedSchema
         * @return {?}
         */
            function (filedSchema) {
                /** @type {?} */
                var searchControl = new SearchControl();
                searchControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
                searchControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
                searchControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
                searchControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
                return searchControl;
            };
        /**
         * @private
         * @param {?} filedSchema
         * @return {?}
         */
        ListFilterService.prototype.getDropDownControl = /**
         * @private
         * @param {?} filedSchema
         * @return {?}
         */
            function (filedSchema) {
                /** @type {?} */
                var dropdowncontrol = new DropDownControl();
                dropdowncontrol.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
                filedSchema.control.valueType = filedSchema.control.valueType ? filedSchema.control.valueType : '1';
                dropdowncontrol.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
                dropdowncontrol.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
                dropdowncontrol.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
                if (filedSchema.control.valueType == "1") {
                    dropdowncontrol.valueType = EnumType.StringType;
                    dropdowncontrol.enumValues = ( /** @type {?} */(filedSchema.control.enumValues));
                }
                else if (filedSchema.control.valueType == "2") {
                    dropdowncontrol.valueType = EnumType.BoolType;
                    dropdowncontrol.enumValues = ( /** @type {?} */(filedSchema.control.enumValues));
                }
                else if (filedSchema.control.valueType == "0") {
                    dropdowncontrol.valueType = EnumType.IntType;
                    dropdowncontrol.enumValues = ( /** @type {?} */(filedSchema.control.enumValues));
                }
                return dropdowncontrol;
            };
        /**
         * @private
         * @param {?} filedSchema
         * @return {?}
         */
        ListFilterService.prototype.getLookUpEditControl = /**
         * @private
         * @param {?} filedSchema
         * @return {?}
         */
            function (filedSchema) {
                /** @type {?} */
                var lookupEdit = new HelpContol();
                if (!!(filedSchema.control.uri)) {
                    lookupEdit.uri = filedSchema.control.uri;
                }
                lookupEdit.textField = filedSchema.control.textField;
                lookupEdit.valueField = filedSchema.control.valueField;
                lookupEdit.idField = filedSchema.control.idField;
                lookupEdit.helpId = filedSchema.control.helpId;
                lookupEdit.mapFields = filedSchema.control.mapFields;
                lookupEdit.context = filedSchema.control.context;
                lookupEdit.preEventCmd = filedSchema.control.preEventCmd;
                lookupEdit.postEventCmd = filedSchema.control.postEventCmd;
                lookupEdit.enableFullTree = filedSchema.control.enableFullTree;
                lookupEdit.loadTreeDataType = filedSchema.control.loadTreeDataType;
                //新增
                lookupEdit.singleSelect = filedSchema.control.hasOwnProperty('singleSelect') ? filedSchema.control.singleSelect : true;
                lookupEdit.expandLevel = filedSchema.control.expandLevel;
                lookupEdit.enableCascade = filedSchema.control.enableCascade;
                lookupEdit.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
                lookupEdit.displayType = filedSchema.control.hasOwnProperty('displayType') ? filedSchema.control.displayType : "LIST";
                lookupEdit.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
                lookupEdit.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
                lookupEdit.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
                lookupEdit.clearFields = filedSchema.control.hasOwnProperty('clearFields') ? filedSchema.control.clearFields : '';
                lookupEdit.editable = filedSchema.control.hasOwnProperty('editable') ? filedSchema.control.editable : false;
                lookupEdit.enableMultiFieldSearch = filedSchema.control.hasOwnProperty('enableMultiFieldSearch') ? filedSchema.control.enableMultiFieldSearch : false;
                return lookupEdit;
            };
        /**
         * @private
         * @param {?} filedSchema
         * @return {?}
         */
        ListFilterService.prototype.getCheckboxGroupControl = /**
         * @private
         * @param {?} filedSchema
         * @return {?}
         */
            function (filedSchema) {
                /** @type {?} */
                var checkboxGroupcontrol = new CheckboxGroupControl();
                checkboxGroupcontrol.enumValues = ( /** @type {?} */(filedSchema.control.enumValues));
                checkboxGroupcontrol.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
                checkboxGroupcontrol.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
                checkboxGroupcontrol.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
                return checkboxGroupcontrol;
            };
        /**
         * @private
         * @param {?} filedSchema
         * @return {?}
         */
        ListFilterService.prototype.getDateRangeControl = /**
         * @private
         * @param {?} filedSchema
         * @return {?}
         */
            function (filedSchema) {
                /** @type {?} */
                var dateRangeControl = new DateRangeControl();
                dateRangeControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
                dateRangeControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
                dateRangeControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
                dateRangeControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
                dateRangeControl.beginPlaceHolder = filedSchema.control.beginPlaceHolder ? filedSchema.control.beginPlaceHolder : '';
                dateRangeControl.endPlaceHolder = filedSchema.control.endPlaceHolder ? filedSchema.control.endPlaceHolder : '';
                dateRangeControl.format = filedSchema.control.hasOwnProperty('format') ? filedSchema.control.format : '';
                // dateRangeControl.showType = filedSchema.control.hasOwnProperty('showType')? filedSchema.control.showType : '';
                return dateRangeControl;
            };
        /**
         * @private
         * @param {?} filedSchema
         * @return {?}
         */
        ListFilterService.prototype.getYearRangeControl = /**
         * @private
         * @param {?} filedSchema
         * @return {?}
         */
            function (filedSchema) {
                /** @type {?} */
                var yearRangeControl = new YearRangeControl();
                yearRangeControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
                yearRangeControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
                yearRangeControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
                yearRangeControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
                yearRangeControl.beginPlaceHolder = filedSchema.control.beginPlaceHolder ? filedSchema.control.beginPlaceHolder : '';
                yearRangeControl.endPlaceHolder = filedSchema.control.endPlaceHolder ? filedSchema.control.endPlaceHolder : '';
                yearRangeControl.format = filedSchema.control.hasOwnProperty('format') ? filedSchema.control.format : '';
                return yearRangeControl;
            };
        /**
         * @private
         * @param {?} filedSchema
         * @return {?}
         */
        ListFilterService.prototype.getMonthRangeControl = /**
         * @private
         * @param {?} filedSchema
         * @return {?}
         */
            function (filedSchema) {
                /** @type {?} */
                var monthRangeControl = new MonthRangeControl();
                monthRangeControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
                monthRangeControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
                monthRangeControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
                monthRangeControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
                monthRangeControl.beginPlaceHolder = filedSchema.control.beginPlaceHolder ? filedSchema.control.beginPlaceHolder : '';
                monthRangeControl.endPlaceHolder = filedSchema.control.endPlaceHolder ? filedSchema.control.endPlaceHolder : '';
                monthRangeControl.format = filedSchema.control.hasOwnProperty('format') ? filedSchema.control.format : '';
                return monthRangeControl;
            };
        /**
         * @private
         * @param {?} filedSchema
         * @return {?}
         */
        ListFilterService.prototype.getDateRangeTimeControl = /**
         * @private
         * @param {?} filedSchema
         * @return {?}
         */
            function (filedSchema) {
                /** @type {?} */
                var dateRangeControl = new DateRangeTimeControl();
                dateRangeControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
                dateRangeControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
                dateRangeControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
                dateRangeControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
                dateRangeControl.beginPlaceHolder = filedSchema.control.beginPlaceHolder ? filedSchema.control.beginPlaceHolder : '';
                dateRangeControl.endPlaceHolder = filedSchema.control.endPlaceHolder ? filedSchema.control.endPlaceHolder : '';
                dateRangeControl.format = filedSchema.control.hasOwnProperty('format') ? filedSchema.control.format : '';
                return dateRangeControl;
            };
        /**
         * @private
         * @param {?} filedSchema
         * @return {?}
         */
        ListFilterService.prototype.getRadioControl = /**
         * @private
         * @param {?} filedSchema
         * @return {?}
         */
            function (filedSchema) {
                /** @type {?} */
                var checkboxGroupcontrol = new RadioControl();
                checkboxGroupcontrol.enumValues = ( /** @type {?} */(filedSchema.control.enumValues));
                checkboxGroupcontrol.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
                checkboxGroupcontrol.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
                checkboxGroupcontrol.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
                return checkboxGroupcontrol;
            };
        //根据类型，new value值
        //根据类型，new value值
        /**
         * @param {?} controltype
         * @param {?} value
         * @return {?}
         */
        ListFilterService.prototype.setValues =
            //根据类型，new value值
            /**
             * @param {?} controltype
             * @param {?} value
             * @return {?}
             */
            function (controltype, value) {
                if (controltype == 'input') {
                    return new TextValue(value);
                }
                else if (controltype == 'search') {
                    return new SearchValue(value);
                }
                else if (controltype == 'date') {
                    return new DateValue(value);
                }
                else if (controltype == 'year') {
                    return new YearValue(value);
                }
                else if (controltype == 'month') {
                    return new MonthValue(value);
                }
                else if (controltype == 'daterange') {
                    return new DateRangeValue(value);
                }
                else if (controltype == 'daterangetime') {
                    return new DateRangeTimeValue(value);
                }
                else if (controltype == 'yearrange') {
                    return new YearRangeValue(value);
                }
                else if (controltype == 'monthrange') {
                    return new MonthRangeValue(value);
                }
                else if (controltype == 'dropdown') {
                    return new DropDownListValue(value);
                }
                else if (controltype == 'number') {
                    return new NumberRangeValue(value);
                }
                else if (controltype == 'help') {
                    return new HelpValue(value);
                }
                else if (controltype == 'checkboxgroup') {
                    return new CheckboxGroupValue(value);
                }
                else if (controltype == 'radio') {
                    return new RadioGroupValue(value);
                }
                else if (controltype == 'input-group') {
                    return new InputGroupValue(value);
                }
                else {
                    return new TextValue(value);
                }
            };
        /**
     * 智能输入框控件需要弹出表单时，将表单配置JSON描述转换为弹出表单命令可接收的弹窗参数
     * @param usageMode 智能输入框控件使用模式
     * @param modalConfigData 表单配置JSON描述
     * @returns 弹出表单命令可接收的弹窗参数
     */
        /**
         * 智能输入框控件需要弹出表单时，将表单配置JSON描述转换为弹出表单命令可接收的弹窗参数
         * @private
         * @param {?} usageMode 智能输入框控件使用模式
         * @param {?} modalConfigData 表单配置JSON描述
         * @param {?} id
         * @return {?} 弹出表单命令可接收的弹窗参数
         */
        ListFilterService.prototype.setInputGroupDialog = /**
         * 智能输入框控件需要弹出表单时，将表单配置JSON描述转换为弹出表单命令可接收的弹窗参数
         * @private
         * @param {?} usageMode 智能输入框控件使用模式
         * @param {?} modalConfigData 表单配置JSON描述
         * @param {?} id
         * @return {?} 弹出表单命令可接收的弹窗参数
         */
            function (usageMode, modalConfigData, id) {
                if (usageMode == 'text' || usageMode == undefined || modalConfigData == undefined || id == undefined) {
                    return undefined;
                }
                /** @type {?} */
                var dialogConfig = new DialogConfig();
                //dialogConfig.modalId = modalConfigData.modalId;
                dialogConfig.modalId = id;
                if (modalConfigData.mapFields) {
                    dialogConfig.mapFields = JSON.parse(modalConfigData.mapFields.replace(/'/g, '"'));
                }
                if (modalConfigData.showHeader) {
                    dialogConfig.title = modalConfigData.title;
                }
                dialogConfig.width = modalConfigData.width;
                dialogConfig.height = modalConfigData.height;
                // dialogConfig.showButtons = modalConfigData.showFooterButtons;
                // dialogConfig.buttons = this.setInputGroupDialogButtons(modalConfigData.footerButtons);
                return dialogConfig;
            };
        /**
         * 智能输入框控件需要弹出表单时，将弹窗按钮组配置JSON描述转换为弹出表单命令可接收的弹窗按钮组参数
         * @param buttonData 弹窗按钮组配置JSON描述
         * @returns 弹出表单命令可接收的弹窗按钮组参数
         */
        /**
         * 智能输入框控件需要弹出表单时，将弹窗按钮组配置JSON描述转换为弹出表单命令可接收的弹窗按钮组参数
         * @private
         * @param {?} buttonData 弹窗按钮组配置JSON描述
         * @return {?} 弹出表单命令可接收的弹窗按钮组参数
         */
        ListFilterService.prototype.setInputGroupDialogButtons = /**
         * 智能输入框控件需要弹出表单时，将弹窗按钮组配置JSON描述转换为弹出表单命令可接收的弹窗按钮组参数
         * @private
         * @param {?} buttonData 弹窗按钮组配置JSON描述
         * @return {?} 弹出表单命令可接收的弹窗按钮组参数
         */
            function (buttonData) {
                if (!buttonData) {
                    return [];
                }
                /** @type {?} */
                var button;
                return buttonData.map(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) {
                    button = new DialogButtonConfig();
                    button.text = item.text;
                    if (item.appearance && item.appearance.class) {
                        button.cls = item.appearance.class;
                    }
                    button.handle = item.click;
                    return button;
                }));
            };
        ListFilterService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ListFilterService.ctorParameters = function () { return []; };
        /** @nocollapse */ ListFilterService.ngInjectableDef = i0.defineInjectable({ factory: function ListFilterService_Factory() { return new ListFilterService(); }, token: ListFilterService, providedIn: "root" });
        return ListFilterService;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var CompareType = {
        /**
         * 等于
         */
        // Equal=1,
        Equal: 0,
        /**
         * 大于
         */
        GreaterThan: 2,
        /**
         * 大于或等于
         */
        GreaterThanOrEqual: 3,
        /**
         * 小于
         */
        LessThan: 4,
        /**
         * 小于或等于
         */
        LessThanOrEqual: 5,
        /**
         * 之间
         */
        // BetWeen=6
        Like: 6,
        /**
         * 包含
         */
        In: 14,
    };
    CompareType[CompareType.Equal] = 'Equal';
    CompareType[CompareType.GreaterThan] = 'GreaterThan';
    CompareType[CompareType.GreaterThanOrEqual] = 'GreaterThanOrEqual';
    CompareType[CompareType.LessThan] = 'LessThan';
    CompareType[CompareType.LessThanOrEqual] = 'LessThanOrEqual';
    CompareType[CompareType.Like] = 'Like';
    CompareType[CompareType.In] = 'In';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var ValueType = {
        /**
         *值类型
         */
        Value: 0,
        /**
         * 表达式
         */
        Express: 1,
    };
    ValueType[ValueType.Value] = 'Value';
    ValueType[ValueType.Express] = 'Express';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var RelationType = {
        /**
         * 与
         */
        // And=0,
        And: 1,
        /**
         * 或
         */
        // Or=1
        Or: 2,
    };
    RelationType[RelationType.And] = 'And';
    RelationType[RelationType.Or] = 'Or';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TextHandler = /** @class */ (function () {
        function TextHandler() {
        }
        /**
         * @param {?} qc
         * @return {?}
         */
        TextHandler.prototype.convert = /**
         * @param {?} qc
         * @return {?}
         */
            function (qc) {
                /** @type {?} */
                var tv = (( /** @type {?} */(qc.value)));
                return Object.keys(tv).length > 0 && tv.value ? [{
                        'FilterField': qc.fieldCode,
                        'Compare': CompareType.Like,
                        //like CompareType.like undefined
                        'Value': tv.value,
                        'Relation': RelationType.And,
                        //and undefined
                        'Expresstype': ValueType.Value
                    }] : [];
            };
        return TextHandler;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DateRangeHandler = /** @class */ (function () {
        function DateRangeHandler() {
        }
        /**
         * @param {?} qc
         * @return {?}
         */
        DateRangeHandler.prototype.convert = /**
         * @param {?} qc
         * @return {?}
         */
            function (qc) {
                /** @type {?} */
                var arr = [];
                /** @type {?} */
                var drv = (( /** @type {?} */(qc.value)));
                if (Object.keys(drv).length === 0 || (!drv.startTime && !drv.endTime))
                    return arr;
                drv.startTime && arr.push({
                    'FilterField': qc.fieldCode,
                    'Compare': CompareType.GreaterThanOrEqual,
                    //GreaterOrEqual
                    'Value': drv.startTime,
                    'Relation': RelationType.And,
                    //and
                    'Expresstype': ValueType.Value
                });
                drv.endTime && arr.push({
                    'FilterField': qc.fieldCode,
                    'Compare': CompareType.LessThanOrEqual,
                    //LessOrEqual
                    'Value': drv.endTime,
                    'Relation': RelationType.And,
                    //and
                    'Expresstype': ValueType.Value
                });
                return arr;
            };
        return DateRangeHandler;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DropDownHandler = /** @class */ (function () {
        function DropDownHandler() {
        }
        /**
         * @param {?} qc
         * @return {?}
         */
        DropDownHandler.prototype.convert = /**
         * @param {?} qc
         * @return {?}
         */
            function (qc) {
                /** @type {?} */
                var ddv = (( /** @type {?} */(qc.value)));
                if (ddv === undefined || ddv === null || Object.keys(ddv).length === 0 || Object.keys(ddv.value || {}).length === 0)
                    return [];
                return [{
                        'FilterField': qc.fieldCode,
                        'Compare': CompareType.Equal,
                        //equal
                        // 'Value' : (ddv.value.getEnumValue() as EnumStringValue),
                        'Value': ddv.value,
                        'Relation': RelationType.And,
                        //and
                        'Expresstype': ValueType.Value
                    }];
            };
        return DropDownHandler;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NumberRangeHandler = /** @class */ (function () {
        function NumberRangeHandler() {
        }
        /**
         * @param {?} qc
         * @return {?}
         */
        NumberRangeHandler.prototype.convert = /**
         * @param {?} qc
         * @return {?}
         */
            function (qc) {
                /** @type {?} */
                var arr = [];
                /** @type {?} */
                var nrv = (( /** @type {?} */(qc.value)));
                if (Object.keys(nrv).length === 0)
                    return arr;
                (nrv.startValue != null) && arr.push({
                    'FilterField': qc.fieldCode,
                    'Compare': CompareType.GreaterThanOrEqual,
                    //GreaterOrEqual
                    'Value': nrv.startValue,
                    'Relation': RelationType.And,
                    //and
                    'Expresstype': ValueType.Value
                });
                (nrv.endValue != null) && arr.push({
                    'FilterField': qc.fieldCode,
                    'Compare': CompareType.LessThanOrEqual,
                    //LessOrEqual
                    'Value': nrv.endValue,
                    'Relation': RelationType.And,
                    //and
                    'Expresstype': ValueType.Value
                });
                return arr;
            };
        return NumberRangeHandler;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SmartHelpHandler = /** @class */ (function () {
        function SmartHelpHandler() {
        }
        // convert(qc: QueryCondition) {
        //     const shv = (qc.value as HelpValue);
        //     if(Object.keys(shv).length === 0 || !shv.value || !shv.valueField){
        //         return [];
        //     }else{
        //         // return [{
        //         //     'FilterField' : qc.fieldCode,
        //         //     'Compare' : CompareType.Equal, //equal
        //         //     'Value' : (shv.value)[shv.valueField],
        //         //     'Relation' : RelationType.And,
        //         //     'Expresstype': ValueType.Value
        //         // }];
        //         return [{
        //             'FilterField' : qc.fieldCode,
        //             'Compare' : CompareType.Equal, //equal
        //             'Value' : HelpValue.getPropValues(shv.value, shv.valueField.split('.')),
        //             'Relation' : RelationType.And,
        //             'Expresstype': ValueType.Value
        //         }];
        //     }
        // }
        // convert(qc: QueryCondition) {
        //     const shv = (qc.value as HelpValue);
        //     if(Object.keys(shv).length === 0 || !shv.value || !shv.valueField){
        //         return [];
        //     }else{
        //         // return [{
        //         //     'FilterField' : qc.fieldCode,
        //         //     'Compare' : CompareType.Equal, //equal
        //         //     'Value' : (shv.value)[shv.valueField],
        //         //     'Relation' : RelationType.And,
        //         //     'Expresstype': ValueType.Value
        //         // }];
        //         return [{
        //             'FilterField' : qc.fieldCode,
        //             'Compare' : CompareType.Equal, //equal
        //             'Value' : HelpValue.getPropValues(shv.value, shv.valueField.split('.')),
        //             'Relation' : RelationType.And,
        //             'Expresstype': ValueType.Value
        //         }];
        //     }
        // }
        /**
         * @param {?} qc
         * @return {?}
         */
        SmartHelpHandler.prototype.convert =
            // convert(qc: QueryCondition) {
            //     const shv = (qc.value as HelpValue);
            //     if(Object.keys(shv).length === 0 || !shv.value || !shv.valueField){
            //         return [];
            //     }else{
            //         // return [{
            //         //     'FilterField' : qc.fieldCode,
            //         //     'Compare' : CompareType.Equal, //equal
            //         //     'Value' : (shv.value)[shv.valueField],
            //         //     'Relation' : RelationType.And,
            //         //     'Expresstype': ValueType.Value
            //         // }];
            //         return [{
            //             'FilterField' : qc.fieldCode,
            //             'Compare' : CompareType.Equal, //equal
            //             'Value' : HelpValue.getPropValues(shv.value, shv.valueField.split('.')),
            //             'Relation' : RelationType.And,
            //             'Expresstype': ValueType.Value
            //         }];
            //     }
            // }
            /**
             * @param {?} qc
             * @return {?}
             */
            function (qc) {
                /** @type {?} */
                var shv = (( /** @type {?} */(qc.value)));
                if (shv.value.length == 0 || !shv.valueField) {
                    return [];
                }
                else {
                    /** @type {?} */
                    var arr_1 = [];
                    shv.getOriginalValue().split(',').forEach(( /**
                     * @param {?} id
                     * @return {?}
                     */function (id) {
                        id && arr_1.push({
                            'FilterField': qc.fieldCode,
                            'Compare': CompareType.Equal,
                            'Value': id,
                            'Relation': RelationType.Or,
                            'Expresstype': ValueType.Value
                        });
                    }));
                    if (arr_1.length > 0) {
                        arr_1[0]['Lbracket'] = '(';
                        arr_1[arr_1.length - 1]['Rbracket'] = ')';
                        arr_1[arr_1.length - 1]['Relation'] = RelationType.And;
                        return arr_1;
                    }
                    else {
                        return [];
                    }
                }
            };
        return SmartHelpHandler;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SearchHandler = /** @class */ (function () {
        function SearchHandler() {
        }
        /**
         * @param {?} qc
         * @return {?}
         */
        SearchHandler.prototype.convert = /**
         * @param {?} qc
         * @return {?}
         */
            function (qc) {
                /** @type {?} */
                var tv = (( /** @type {?} */(qc.value)));
                return Object.keys(tv).length > 0 && tv.value ? [{
                        'FilterField': qc.fieldCode,
                        'Compare': CompareType.Like,
                        //like CompareType.like undefined
                        'Value': tv.value,
                        'Relation': RelationType.And,
                        //and undefined
                        'Expresstype': ValueType.Value
                    }] : [];
            };
        return SearchHandler;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DateHandler = /** @class */ (function () {
        function DateHandler() {
        }
        /**
         * @param {?} qc
         * @return {?}
         */
        DateHandler.prototype.convert = /**
         * @param {?} qc
         * @return {?}
         */
            function (qc) {
                /** @type {?} */
                var drv = (( /** @type {?} */(qc.value)));
                return Object.keys(drv).length > 0 && drv.value ? [{
                        'FilterField': qc.fieldCode,
                        'Compare': qc.control.compareType,
                        //自定义
                        'Value': drv.value,
                        'Relation': RelationType.And,
                        'Expresstype': ValueType.Value
                    }] : [];
            };
        return DateHandler;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CheckboxGroupHandler = /** @class */ (function () {
        function CheckboxGroupHandler() {
        }
        /**
         * @param {?} qc
         * @return {?}
         */
        CheckboxGroupHandler.prototype.convert = /**
         * @param {?} qc
         * @return {?}
         */
            function (qc) {
                /** @type {?} */
                var cbgv = (( /** @type {?} */(qc.value)));
                if (Object.keys(cbgv).length === 0 || Object.keys(cbgv.value).length === 0)
                    return [];
                /** @type {?} */
                var CheckboxArr = [];
                if (cbgv.value.length === 1) {
                    return [{
                            'FilterField': qc.fieldCode,
                            'Compare': CompareType.Equal,
                            'Value': (cbgv.value[0]),
                            'Relation': RelationType.And,
                            'Expresstype': ValueType.Value
                        }];
                }
                cbgv.value.forEach(( /**
                 * @param {?} value
                 * @return {?}
                 */function (value) {
                    CheckboxArr.push({
                        'FilterField': qc.fieldCode,
                        'Compare': CompareType.Equal,
                        'Value': value,
                        'Relation': RelationType.Or,
                        'Expresstype': ValueType.Value
                    });
                }));
                CheckboxArr[0]['Lbracket'] = '(';
                CheckboxArr[CheckboxArr.length - 1]['Rbracket'] = ')';
                CheckboxArr[CheckboxArr.length - 1]['Relation'] = RelationType.And;
                return CheckboxArr;
            };
        return CheckboxGroupHandler;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DateRangeTimeHandler = /** @class */ (function () {
        function DateRangeTimeHandler() {
        }
        /**
         * @param {?} qc
         * @return {?}
         */
        DateRangeTimeHandler.prototype.convert = /**
         * @param {?} qc
         * @return {?}
         */
            function (qc) {
                /** @type {?} */
                var arr = [];
                /** @type {?} */
                var drv = (( /** @type {?} */(qc.value)));
                if (Object.keys(drv).length === 0 || (!drv.startTime && !drv.endTime))
                    return arr;
                drv.startTime && arr.push({
                    'FilterField': qc.fieldCode,
                    'Compare': CompareType.GreaterThanOrEqual,
                    //GreaterOrEqual
                    'Value': drv.startTime,
                    'Relation': RelationType.And,
                    //and
                    'Expresstype': ValueType.Value
                });
                drv.endTime && arr.push({
                    'FilterField': qc.fieldCode,
                    'Compare': CompareType.LessThanOrEqual,
                    //LessOrEqual
                    'Value': drv.endTime,
                    'Relation': RelationType.And,
                    //and
                    'Expresstype': ValueType.Value
                });
                return arr;
            };
        return DateRangeTimeHandler;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RadioHandler = /** @class */ (function () {
        function RadioHandler() {
        }
        /**
         * @param {?} qc
         * @return {?}
         */
        RadioHandler.prototype.convert = /**
         * @param {?} qc
         * @return {?}
         */
            function (qc) {
                /** @type {?} */
                var radiov = (( /** @type {?} */(qc.value)));
                if (radiov.value === undefined || radiov.value === null || Object.keys(radiov).length === 0 || Object.keys(radiov.value).length === 0)
                    return [];
                return [{
                        'FilterField': qc.fieldCode,
                        'Compare': CompareType.Equal,
                        //equal
                        'Value': radiov.value,
                        'Relation': RelationType.And,
                        //and
                        'Expresstype': ValueType.Value
                    }];
            };
        return RadioHandler;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MonthRangeHandler = /** @class */ (function () {
        function MonthRangeHandler() {
        }
        /**
         * @param {?} qc
         * @return {?}
         */
        MonthRangeHandler.prototype.convert = /**
         * @param {?} qc
         * @return {?}
         */
            function (qc) {
                /** @type {?} */
                var arr = [];
                /** @type {?} */
                var drv = (( /** @type {?} */(qc.value)));
                if (Object.keys(drv).length === 0 || (!drv.startTime && !drv.endTime))
                    return arr;
                drv.startTime && arr.push({
                    'FilterField': qc.fieldCode,
                    'Compare': CompareType.GreaterThanOrEqual,
                    //GreaterOrEqual
                    'Value': drv.startTime,
                    'Relation': RelationType.And,
                    //and
                    'Expresstype': ValueType.Value
                });
                drv.endTime && arr.push({
                    'FilterField': qc.fieldCode,
                    'Compare': CompareType.LessThanOrEqual,
                    //LessOrEqual
                    'Value': drv.endTime,
                    'Relation': RelationType.And,
                    //and
                    'Expresstype': ValueType.Value
                });
                return arr;
            };
        return MonthRangeHandler;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var YearRangeHandler = /** @class */ (function () {
        function YearRangeHandler() {
        }
        /**
         * @param {?} qc
         * @return {?}
         */
        YearRangeHandler.prototype.convert = /**
         * @param {?} qc
         * @return {?}
         */
            function (qc) {
                /** @type {?} */
                var arr = [];
                /** @type {?} */
                var drv = (( /** @type {?} */(qc.value)));
                if (Object.keys(drv).length === 0 || (!drv.startTime && !drv.endTime))
                    return arr;
                drv.startTime && arr.push({
                    'FilterField': qc.fieldCode,
                    'Compare': CompareType.GreaterThanOrEqual,
                    //GreaterOrEqual
                    'Value': drv.startTime,
                    'Relation': RelationType.And,
                    //and
                    'Expresstype': ValueType.Value
                });
                drv.endTime && arr.push({
                    'FilterField': qc.fieldCode,
                    'Compare': CompareType.LessThanOrEqual,
                    //LessOrEqual
                    'Value': drv.endTime,
                    'Relation': RelationType.And,
                    //and
                    'Expresstype': ValueType.Value
                });
                return arr;
            };
        return YearRangeHandler;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MonthHandler = /** @class */ (function () {
        function MonthHandler() {
        }
        /**
         * @param {?} qc
         * @return {?}
         */
        MonthHandler.prototype.convert = /**
         * @param {?} qc
         * @return {?}
         */
            function (qc) {
                /** @type {?} */
                var drv = (( /** @type {?} */(qc.value)));
                return Object.keys(drv).length > 0 && drv.value ? [{
                        'FilterField': qc.fieldCode,
                        'Compare': qc.control.compareType,
                        //自定义
                        'Value': drv.value,
                        'Relation': RelationType.And,
                        'Expresstype': ValueType.Value
                    }] : [];
            };
        return MonthHandler;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var YearHandler = /** @class */ (function () {
        function YearHandler() {
        }
        /**
         * @param {?} qc
         * @return {?}
         */
        YearHandler.prototype.convert = /**
         * @param {?} qc
         * @return {?}
         */
            function (qc) {
                /** @type {?} */
                var drv = (( /** @type {?} */(qc.value)));
                return Object.keys(drv).length > 0 && drv.value ? [{
                        'FilterField': qc.fieldCode,
                        'Compare': qc.control.compareType,
                        //自定义
                        'Value': drv.value,
                        'Relation': RelationType.And,
                        'Expresstype': ValueType.Value
                    }] : [];
            };
        return YearHandler;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var InputGroupHandler = /** @class */ (function () {
        function InputGroupHandler() {
        }
        /**
         * @param {?} qc
         * @return {?}
         */
        InputGroupHandler.prototype.convert = /**
         * @param {?} qc
         * @return {?}
         */
            function (qc) {
                /** @type {?} */
                var igv = (( /** @type {?} */(qc.value)));
                /** @type {?} */
                var arr = [];
                if (igv.textValue === undefined || igv.textValue === null || igv.textValue.length == 0) {
                    return [];
                }
                else if (igv.isInputText) {
                    arr.push({
                        'FilterField': qc.fieldCode,
                        'Compare': CompareType.Like,
                        'Value': igv.textValue,
                        'Relation': RelationType.And,
                        'Expresstype': ValueType.Value
                    });
                    return arr;
                }
                else {
                    igv.getOriginalValue().split(',').forEach(( /**
                     * @param {?} itemValue
                     * @return {?}
                     */function (itemValue) {
                        itemValue && arr.push({
                            'FilterField': qc.fieldCode,
                            'Compare': CompareType.Equal,
                            'Value': itemValue,
                            'Relation': RelationType.Or,
                            'Expresstype': ValueType.Value
                        });
                    }));
                    if (arr.length > 0) {
                        arr[0]['Lbracket'] = '(';
                        arr[arr.length - 1]['Rbracket'] = ')';
                        arr[arr.length - 1]['Relation'] = RelationType.And;
                        return arr;
                    }
                    else {
                        return [];
                    }
                }
            };
        return InputGroupHandler;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var QueryConditionHandlerFactory = /** @class */ (function () {
        function QueryConditionHandlerFactory() {
            this.queryConditionHandlerMapping = new Map();
            this.queryConditionHandlerMapping.set(ControlType.Text, new TextHandler());
            this.queryConditionHandlerMapping.set(ControlType.DateRange, new DateRangeHandler());
            this.queryConditionHandlerMapping.set(ControlType.DateRangeTime, new DateRangeTimeHandler());
            this.queryConditionHandlerMapping.set(ControlType.MonthRange, new MonthRangeHandler());
            this.queryConditionHandlerMapping.set(ControlType.YearRange, new YearRangeHandler());
            this.queryConditionHandlerMapping.set(ControlType.DropDown, new DropDownHandler());
            this.queryConditionHandlerMapping.set(ControlType.NumberRange, new NumberRangeHandler());
            this.queryConditionHandlerMapping.set(ControlType.Help, new SmartHelpHandler());
            this.queryConditionHandlerMapping.set(ControlType.Search, new SearchHandler());
            this.queryConditionHandlerMapping.set(ControlType.Date, new DateHandler());
            this.queryConditionHandlerMapping.set(ControlType.Month, new MonthHandler());
            this.queryConditionHandlerMapping.set(ControlType.Year, new YearHandler());
            this.queryConditionHandlerMapping.set(ControlType.CheckboxGroup, new CheckboxGroupHandler());
            this.queryConditionHandlerMapping.set(ControlType.Radio, new RadioHandler());
            this.queryConditionHandlerMapping.set(ControlType.InputGroup, new InputGroupHandler());
        }
        /**
         * @return {?}
         */
        QueryConditionHandlerFactory.getInstance = /**
         * @return {?}
         */
            function () {
                if (!QueryConditionHandlerFactory._instance) {
                    QueryConditionHandlerFactory._instance = new QueryConditionHandlerFactory();
                }
                return QueryConditionHandlerFactory._instance;
            };
        /**
         * @param {?} controlType
         * @return {?}
         */
        QueryConditionHandlerFactory.prototype.getHandler = /**
         * @param {?} controlType
         * @return {?}
         */
            function (controlType) {
                return this.queryConditionHandlerMapping.get(controlType);
            };
        QueryConditionHandlerFactory._instance = null;
        return QueryConditionHandlerFactory;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // import { FrameContext } from '@farris/devkit';
    // import { IQuerySolutionHandler } from './IQuerySolutionHandler';
    // import { FrameworkSessionService } from '@farris/bef';
    var QuerySolutionService = /** @class */ (function () {
        function QuerySolutionService() {
        }
        // private frameContext: FrameContext,
        // private frameworkSessionService: FrameworkSessionService
        // getUserSessionId(): string {
        //     return this.frameworkSessionService.getUserSessionId();
        // }
        // private frameContext: FrameContext,
        // private frameworkSessionService: FrameworkSessionService
        // getUserSessionId(): string {
        //     return this.frameworkSessionService.getUserSessionId();
        // }
        /**
         * @param {?} params
         * @return {?}
         */
        QuerySolutionService.prototype.setFilterConditions =
            // private frameContext: FrameContext,
            // private frameworkSessionService: FrameworkSessionService
            // getUserSessionId(): string {
            //     return this.frameworkSessionService.getUserSessionId();
            // }
            /**
             * @param {?} params
             * @return {?}
             */
            function (params) {
                /** @type {?} */
                var queryConditionHandler;
                /** @type {?} */
                var filterConditionList = [];
                params.forEach(( /**
                 * @param {?} qc
                 * @return {?}
                 */function (qc) {
                    queryConditionHandler = QueryConditionHandlerFactory.getInstance().getHandler(qc.control.getControlType());
                    filterConditionList.push.apply(filterConditionList, __spread(queryConditionHandler.convert(qc)));
                }));
                // 设置到NgCommand params.filter属性上：{UISTATE~/root-component/filterConditionList}
                // this.frameContext.uiState['filterConditionList'] = JSON.stringify(filterConditionList);
                // return JSON.stringify(filterConditionList);
                return filterConditionList;
            };
        QuerySolutionService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        QuerySolutionService.ctorParameters = function () { return []; };
        return QuerySolutionService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 查询条件实体类
     */
    var /**
     * 查询条件实体类
     */ QueryCondition = /** @class */ (function () {
        function QueryCondition() {
        }
        return QueryCondition;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var CompareType$1 = {
        /**
         * 等于
         */
        // Equal=1,
        Equal: 0,
        /**
         * 大于
         */
        GreaterThan: 2,
        /**
         * 大于或等于
         */
        GreaterThanOrEqual: 3,
        /**
         * 小于
         */
        LessThan: 4,
        /**
         * 小于或等于
         */
        LessThanOrEqual: 5,
        /**
         * 之间
         */
        BetWeen: 6,
    };
    CompareType$1[CompareType$1.Equal] = 'Equal';
    CompareType$1[CompareType$1.GreaterThan] = 'GreaterThan';
    CompareType$1[CompareType$1.GreaterThanOrEqual] = 'GreaterThanOrEqual';
    CompareType$1[CompareType$1.LessThan] = 'LessThan';
    CompareType$1[CompareType$1.LessThanOrEqual] = 'LessThanOrEqual';
    CompareType$1[CompareType$1.BetWeen] = 'BetWeen';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var ValueType$1 = {
        /**
         *值类型
         */
        Value: 0,
        /**
         * 帮助类型
         */
        SmartHelp: 1,
        /**
         * 枚举类型
         */
        Enum: 2,
        /**
         * 表达式
         */
        Express: 3,
    };
    ValueType$1[ValueType$1.Value] = 'Value';
    ValueType$1[ValueType$1.SmartHelp] = 'SmartHelp';
    ValueType$1[ValueType$1.Enum] = 'Enum';
    ValueType$1[ValueType$1.Express] = 'Express';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var RelationType$1 = {
        /**
         * 与
         */
        // And=0,
        And: 1,
        /**
         * 或
         */
        // Or=1
        Or: 2,
    };
    RelationType$1[RelationType$1.And] = 'And';
    RelationType$1[RelationType$1.Or] = 'Or';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CheckboxEnumValue = /** @class */ (function () {
        function CheckboxEnumValue() {
        }
        /**
         * @return {?}
         */
        CheckboxEnumValue.prototype.getEnumValueName = /**
         * @return {?}
         */
            function () {
                return this.name;
            };
        /**
         * @return {?}
         */
        CheckboxEnumValue.prototype.getEnumValue = /**
         * @return {?}
         */
            function () {
                return this.value;
            };
        return CheckboxEnumValue;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ConvertorService = /** @class */ (function () {
        function ConvertorService() {
        }
        // private solutionservice:SolutionService
        /**
        * 获取已选择的字段配置
        * @param selectedConditions
        */
        // private solutionservice:SolutionService
        /**
         * 获取已选择的字段配置
         * @param {?} selectedConditions
         * @return {?}
         */
        ConvertorService.prototype.getFeildConfigs =
            // private solutionservice:SolutionService
            /**
             * 获取已选择的字段配置
             * @param {?} selectedConditions
             * @return {?}
             */
            function (selectedConditions) {
                /** @type {?} */
                var fieldsConfigs = new Array();
                if (!selectedConditions || selectedConditions.length <= 0) {
                    return fieldsConfigs;
                }
                else {
                    selectedConditions.forEach(( /**
                     * @param {?} condition
                     * @return {?}
                     */function (condition) {
                        /** @type {?} */
                        var fieldConfig = new FieldConfig();
                        fieldConfig.id = condition.id;
                        fieldConfig.labelCode = condition.fieldCode;
                        fieldConfig.name = condition.fieldName;
                        fieldConfig.control = condition.control;
                        fieldsConfigs.push(fieldConfig);
                    }));
                }
                return fieldsConfigs;
            };
        /**
         * @param {?} fileds
         * @param {?} selectedFieldConditions
         * @return {?}
         */
        ConvertorService.prototype.getSelectedFieldConditions = /**
         * @param {?} fileds
         * @param {?} selectedFieldConditions
         * @return {?}
         */
            function (fileds, selectedFieldConditions) {
                var _this = this;
                // console.log(selectedFieldConditions);
                /** @type {?} */
                var tempSelectedFieldConditions = new Array();
                tempSelectedFieldConditions = this.arrayClone(selectedFieldConditions);
                selectedFieldConditions = new Array();
                fileds.forEach(( /**
                 * @param {?} filed
                 * @return {?}
                 */function (filed) {
                    filed.control = _this.getDropListEnumValues(( /** @type {?} */(filed.control)));
                    // filed.control = this.getCheckGroupEnumValues(filed.control as CheckboxGroupControl);
                    if (tempSelectedFieldConditions.length > 0) {
                        /** @type {?} */
                        var tempIndex = tempSelectedFieldConditions.findIndex(( /**
                         * @param {?} x
                         * @return {?}
                         */function (x) { return x.id == filed.id; }));
                        if (tempIndex != (-1)) {
                            selectedFieldConditions.push(tempSelectedFieldConditions[tempIndex]);
                        }
                        else {
                            selectedFieldConditions = _this.getNewFieldConditions(filed, selectedFieldConditions);
                        }
                    }
                    else {
                        selectedFieldConditions = _this.getNewFieldConditions(filed, selectedFieldConditions);
                    }
                }));
                return selectedFieldConditions;
            };
        /**
         * @private
         * @param {?} control
         * @return {?}
         */
        ConvertorService.prototype.getDropListEnumValues = /**
         * @private
         * @param {?} control
         * @return {?}
         */
            function (control) {
                if (control.valueType == EnumType.BoolType) {
                    /** @type {?} */
                    var enumValues_1 = new Array();
                    control.enumValues.forEach(( /**
                     * @param {?} element
                     * @return {?}
                     */function (element) {
                        enumValues_1.push(Object.assign(new EnumBoolValue(), element));
                    }));
                    control.enumValues = enumValues_1;
                }
                else if (control.valueType == EnumType.IntType) {
                    /** @type {?} */
                    var enumValues_2 = new Array();
                    control.enumValues.forEach(( /**
                     * @param {?} element
                     * @return {?}
                     */function (element) {
                        enumValues_2.push(Object.assign(new EnumIntegerValue(), element));
                    }));
                    control.enumValues = enumValues_2;
                }
                else if (control.valueType == EnumType.StringType) {
                    /** @type {?} */
                    var enumValues_3 = new Array();
                    control.enumValues.forEach(( /**
                     * @param {?} element
                     * @return {?}
                     */function (element) {
                        enumValues_3.push(Object.assign(new EnumStringValue(), element));
                    }));
                    control.enumValues = enumValues_3;
                }
                return control;
            };
        /**
         * @private
         * @param {?} control
         * @return {?}
         */
        ConvertorService.prototype.getCheckGroupEnumValues = /**
         * @private
         * @param {?} control
         * @return {?}
         */
            function (control) {
                /** @type {?} */
                var enumValues = new Array();
                control.enumValues.forEach(( /**
                 * @param {?} element
                 * @return {?}
                 */function (element) {
                    enumValues.push(Object.assign(new CheckboxEnumValue(), element));
                }));
                control.enumValues = enumValues;
                return control;
            };
        /**
         * @param {?} filed
         * @param {?} selectedFieldConditions
         * @return {?}
         */
        ConvertorService.prototype.getNewFieldConditions = /**
         * @param {?} filed
         * @param {?} selectedFieldConditions
         * @return {?}
         */
            function (filed, selectedFieldConditions) {
                /** @type {?} */
                var selectedFieldCondition = new QueryCondition();
                if (filed.control.getControlType() == ControlType.Text) {
                    selectedFieldConditions = this.getTextValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
                }
                else if (filed.control.getControlType() == ControlType.DateRange) {
                    selectedFieldConditions = this.getDateRangeValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
                }
                else if (filed.control.getControlType() == ControlType.DateRangeTime) {
                    selectedFieldConditions = this.getDateRangeTimeValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
                }
                else if (filed.control.getControlType() == ControlType.MonthRange) {
                    selectedFieldConditions = this.getDateRangeValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
                }
                else if (filed.control.getControlType() == ControlType.YearRange) {
                    selectedFieldConditions = this.getDateRangeValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
                }
                else if (filed.control.getControlType() == ControlType.NumberRange) {
                    selectedFieldConditions = this.getNumberRangeValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
                }
                else if (filed.control.getControlType() == ControlType.Help) {
                    selectedFieldConditions = this.getSmartHelpValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
                }
                else if (filed.control.getControlType() == ControlType.DropDown) {
                    selectedFieldConditions = this.getDropDownListValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
                }
                else if (filed.control.getControlType() == ControlType.Search) {
                    selectedFieldConditions = this.getSearchValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
                }
                else if (filed.control.getControlType() == ControlType.Date) {
                    selectedFieldConditions = this.getDateValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
                }
                else if (filed.control.getControlType() == ControlType.Year) {
                    selectedFieldConditions = this.getDateValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
                }
                else if (filed.control.getControlType() == ControlType.Month) {
                    selectedFieldConditions = this.getDateValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
                }
                else if (filed.control.getControlType() == ControlType.CheckboxGroup) {
                    selectedFieldConditions = this.getCheckboxGroupValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
                }
                else if (filed.control.getControlType() == ControlType.Radio) {
                    selectedFieldConditions = this.getRadioValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
                }
                else if (filed.control.getControlType() == ControlType.InputGroup) {
                    selectedFieldConditions = this.getInputGroupValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
                }
                return selectedFieldConditions;
            };
        /**
         * @private
         * @param {?} selectedFieldCondition
         * @param {?} filed
         * @param {?} selectedFieldConditions
         * @return {?}
         */
        ConvertorService.prototype.getDropDownListValueFieldCondition = /**
         * @private
         * @param {?} selectedFieldCondition
         * @param {?} filed
         * @param {?} selectedFieldConditions
         * @return {?}
         */
            function (selectedFieldCondition, filed, selectedFieldConditions) {
                selectedFieldCondition.id = filed.id;
                selectedFieldCondition.fieldCode = filed.labelCode;
                selectedFieldCondition.placeHolder = filed.placeHolder;
                selectedFieldCondition.fieldName = filed.name;
                selectedFieldCondition.compareType = CompareType$1.Equal;
                selectedFieldCondition.valueType = ValueType$1.Value;
                selectedFieldCondition.value = filed.value;
                selectedFieldCondition.relationType = RelationType$1.And;
                selectedFieldCondition.control = filed.control;
                this.getDropListEnumValues(( /** @type {?} */(selectedFieldCondition.control)));
                selectedFieldConditions.push(selectedFieldCondition);
                return selectedFieldConditions;
            };
        /**
         * @private
         * @param {?} selectedFieldCondition
         * @param {?} filed
         * @param {?} selectedFieldConditions
         * @return {?}
         */
        ConvertorService.prototype.getCheckboxGroupValueFieldCondition = /**
         * @private
         * @param {?} selectedFieldCondition
         * @param {?} filed
         * @param {?} selectedFieldConditions
         * @return {?}
         */
            function (selectedFieldCondition, filed, selectedFieldConditions) {
                selectedFieldCondition.id = filed.id;
                selectedFieldCondition.fieldCode = filed.labelCode;
                selectedFieldCondition.placeHolder = filed.placeHolder;
                selectedFieldCondition.fieldName = filed.name;
                selectedFieldCondition.compareType = CompareType$1.Equal;
                selectedFieldCondition.valueType = ValueType$1.Value;
                selectedFieldCondition.value = filed.value;
                selectedFieldCondition.relationType = RelationType$1.And;
                selectedFieldCondition.control = filed.control;
                this.getCheckGroupEnumValues(( /** @type {?} */(selectedFieldCondition.control)));
                selectedFieldConditions.push(selectedFieldCondition);
                return selectedFieldConditions;
            };
        /**
         * @private
         * @param {?} selectedFieldCondition
         * @param {?} filed
         * @param {?} selectedFieldConditions
         * @return {?}
         */
        ConvertorService.prototype.getRadioValueFieldCondition = /**
         * @private
         * @param {?} selectedFieldCondition
         * @param {?} filed
         * @param {?} selectedFieldConditions
         * @return {?}
         */
            function (selectedFieldCondition, filed, selectedFieldConditions) {
                selectedFieldCondition.id = filed.id;
                selectedFieldCondition.fieldCode = filed.labelCode;
                selectedFieldCondition.placeHolder = filed.placeHolder;
                selectedFieldCondition.fieldName = filed.name;
                selectedFieldCondition.compareType = CompareType$1.Equal;
                selectedFieldCondition.valueType = ValueType$1.Value;
                selectedFieldCondition.value = filed.value;
                selectedFieldCondition.relationType = RelationType$1.And;
                selectedFieldCondition.control = filed.control;
                this.getCheckGroupEnumValues(( /** @type {?} */(selectedFieldCondition.control)));
                selectedFieldConditions.push(selectedFieldCondition);
                return selectedFieldConditions;
            };
        /**
         * @private
         * @param {?} selectedFieldCondition
         * @param {?} filed
         * @param {?} selectedFieldConditions
         * @return {?}
         */
        ConvertorService.prototype.getSmartHelpValueFieldCondition = /**
         * @private
         * @param {?} selectedFieldCondition
         * @param {?} filed
         * @param {?} selectedFieldConditions
         * @return {?}
         */
            function (selectedFieldCondition, filed, selectedFieldConditions) {
                selectedFieldCondition.id = filed.id;
                selectedFieldCondition.fieldCode = filed.labelCode;
                selectedFieldCondition.placeHolder = filed.placeHolder;
                selectedFieldCondition.fieldName = filed.name;
                selectedFieldCondition.compareType = CompareType$1.Equal;
                selectedFieldCondition.valueType = ValueType$1.Value;
                selectedFieldCondition.value = filed.value;
                selectedFieldCondition.relationType = RelationType$1.And;
                selectedFieldCondition.control = filed.control;
                selectedFieldConditions.push(selectedFieldCondition);
                return selectedFieldConditions;
            };
        /**
         * @private
         * @param {?} selectedFieldCondition
         * @param {?} filed
         * @param {?} selectedFieldConditions
         * @return {?}
         */
        ConvertorService.prototype.getNumberRangeValueFieldCondition = /**
         * @private
         * @param {?} selectedFieldCondition
         * @param {?} filed
         * @param {?} selectedFieldConditions
         * @return {?}
         */
            function (selectedFieldCondition, filed, selectedFieldConditions) {
                selectedFieldCondition.id = filed.id;
                selectedFieldCondition.fieldCode = filed.labelCode;
                selectedFieldCondition.placeHolder = filed.placeHolder;
                selectedFieldCondition.beginPlaceHolder = filed.beginPlaceHolder;
                selectedFieldCondition.endPlaceHolder = filed.endPlaceHolder;
                selectedFieldCondition.fieldName = filed.name;
                selectedFieldCondition.compareType = CompareType$1.BetWeen;
                selectedFieldCondition.valueType = ValueType$1.Value;
                selectedFieldCondition.value = filed.value;
                selectedFieldCondition.relationType = RelationType$1.And;
                selectedFieldCondition.control = filed.control;
                selectedFieldConditions.push(selectedFieldCondition);
                return selectedFieldConditions;
            };
        /**
         * @private
         * @param {?} selectedFieldCondition
         * @param {?} filed
         * @param {?} selectedFieldConditions
         * @return {?}
         */
        ConvertorService.prototype.getDateRangeValueFieldCondition = /**
         * @private
         * @param {?} selectedFieldCondition
         * @param {?} filed
         * @param {?} selectedFieldConditions
         * @return {?}
         */
            function (selectedFieldCondition, filed, selectedFieldConditions) {
                selectedFieldCondition.id = filed.id;
                selectedFieldCondition.fieldCode = filed.labelCode;
                selectedFieldCondition.placeHolder = filed.placeHolder;
                selectedFieldCondition.beginPlaceHolder = filed.beginPlaceHolder;
                selectedFieldCondition.endPlaceHolder = filed.endPlaceHolder;
                selectedFieldCondition.fieldName = filed.name;
                selectedFieldCondition.compareType = CompareType$1.BetWeen;
                selectedFieldCondition.valueType = ValueType$1.Value;
                selectedFieldCondition.value = filed.value;
                selectedFieldCondition.relationType = RelationType$1.And;
                selectedFieldCondition.control = filed.control;
                selectedFieldConditions.push(selectedFieldCondition);
                return selectedFieldConditions;
            };
        /**
         * @private
         * @param {?} selectedFieldCondition
         * @param {?} filed
         * @param {?} selectedFieldConditions
         * @return {?}
         */
        ConvertorService.prototype.getDateRangeTimeValueFieldCondition = /**
         * @private
         * @param {?} selectedFieldCondition
         * @param {?} filed
         * @param {?} selectedFieldConditions
         * @return {?}
         */
            function (selectedFieldCondition, filed, selectedFieldConditions) {
                selectedFieldCondition.id = filed.id;
                selectedFieldCondition.fieldCode = filed.labelCode;
                selectedFieldCondition.placeHolder = filed.placeHolder;
                selectedFieldCondition.fieldName = filed.name;
                selectedFieldCondition.compareType = CompareType$1.BetWeen;
                selectedFieldCondition.valueType = ValueType$1.Value;
                selectedFieldCondition.value = filed.value;
                selectedFieldCondition.relationType = RelationType$1.And;
                selectedFieldCondition.control = filed.control;
                selectedFieldConditions.push(selectedFieldCondition);
                return selectedFieldConditions;
            };
        /**
         * @private
         * @param {?} selectedFieldCondition
         * @param {?} filed
         * @param {?} selectedFieldConditions
         * @return {?}
         */
        ConvertorService.prototype.getTextValueFieldCondition = /**
         * @private
         * @param {?} selectedFieldCondition
         * @param {?} filed
         * @param {?} selectedFieldConditions
         * @return {?}
         */
            function (selectedFieldCondition, filed, selectedFieldConditions) {
                selectedFieldCondition.id = filed.id;
                selectedFieldCondition.fieldCode = filed.labelCode;
                selectedFieldCondition.placeHolder = filed.placeHolder;
                selectedFieldCondition.fieldName = filed.name;
                selectedFieldCondition.compareType = CompareType$1.Equal;
                selectedFieldCondition.valueType = ValueType$1.Value;
                selectedFieldCondition.value = filed.value;
                selectedFieldCondition.relationType = RelationType$1.And;
                selectedFieldCondition.control = filed.control;
                selectedFieldConditions.push(selectedFieldCondition);
                return selectedFieldConditions;
            };
        /**
         * @private
         * @param {?} selectedFieldCondition
         * @param {?} filed
         * @param {?} selectedFieldConditions
         * @return {?}
         */
        ConvertorService.prototype.getInputGroupValueFieldCondition = /**
         * @private
         * @param {?} selectedFieldCondition
         * @param {?} filed
         * @param {?} selectedFieldConditions
         * @return {?}
         */
            function (selectedFieldCondition, filed, selectedFieldConditions) {
                selectedFieldCondition.id = filed.id;
                selectedFieldCondition.fieldCode = filed.labelCode;
                selectedFieldCondition.placeHolder = filed.placeHolder;
                selectedFieldCondition.fieldName = filed.name;
                selectedFieldCondition.compareType = CompareType$1.Equal;
                selectedFieldCondition.valueType = ValueType$1.Value;
                selectedFieldCondition.value = filed.value;
                selectedFieldCondition.relationType = RelationType$1.And;
                selectedFieldCondition.control = filed.control;
                selectedFieldConditions.push(selectedFieldCondition);
                return selectedFieldConditions;
            };
        /**
         * @private
         * @param {?} selectedFieldCondition
         * @param {?} filed
         * @param {?} selectedFieldConditions
         * @return {?}
         */
        ConvertorService.prototype.getDateValueFieldCondition = /**
         * @private
         * @param {?} selectedFieldCondition
         * @param {?} filed
         * @param {?} selectedFieldConditions
         * @return {?}
         */
            function (selectedFieldCondition, filed, selectedFieldConditions) {
                selectedFieldCondition.id = filed.id;
                selectedFieldCondition.fieldCode = filed.labelCode;
                selectedFieldCondition.placeHolder = filed.placeHolder;
                selectedFieldCondition.fieldName = filed.name;
                selectedFieldCondition.compareType = CompareType$1.Equal;
                selectedFieldCondition.valueType = ValueType$1.Value;
                selectedFieldCondition.value = filed.value;
                selectedFieldCondition.relationType = RelationType$1.And;
                selectedFieldCondition.control = filed.control;
                selectedFieldConditions.push(selectedFieldCondition);
                return selectedFieldConditions;
            };
        /**
         * @private
         * @param {?} selectedFieldCondition
         * @param {?} filed
         * @param {?} selectedFieldConditions
         * @return {?}
         */
        ConvertorService.prototype.getSearchValueFieldCondition = /**
         * @private
         * @param {?} selectedFieldCondition
         * @param {?} filed
         * @param {?} selectedFieldConditions
         * @return {?}
         */
            function (selectedFieldCondition, filed, selectedFieldConditions) {
                selectedFieldCondition.id = filed.id;
                selectedFieldCondition.fieldCode = filed.labelCode;
                selectedFieldCondition.placeHolder = filed.placeHolder;
                selectedFieldCondition.fieldName = filed.name;
                selectedFieldCondition.compareType = CompareType$1.Equal;
                selectedFieldCondition.valueType = ValueType$1.Value;
                selectedFieldCondition.value = filed.value;
                selectedFieldCondition.relationType = RelationType$1.And;
                selectedFieldCondition.control = filed.control;
                selectedFieldConditions.push(selectedFieldCondition);
                return selectedFieldConditions;
            };
        /**
         * @private
         * @param {?} input
         * @return {?}
         */
        ConvertorService.prototype.arrayClone = /**
         * @private
         * @param {?} input
         * @return {?}
         */
            function (input) {
                /** @type {?} */
                var result = new Array();
                if (input && input.length > 0) {
                    input.forEach(( /**
                     * @param {?} element
                     * @return {?}
                     */function (element) {
                        result.push(Object.assign({}, element));
                    }));
                }
                return result;
            };
        ConvertorService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        ConvertorService.ctorParameters = function () { return []; };
        return ConvertorService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LISTFILTER_HANDLER_TOKEN = new i0.InjectionToken('gsp-cmp/LISTFILTER_HANDLER');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ListFilterComponent = /** @class */ (function () {
        function ListFilterComponent(filterService, cd, handler, convertorService, render, injector) {
            this.filterService = filterService;
            this.cd = cd;
            this.handler = handler;
            this.convertorService = convertorService;
            this.render = render;
            this.injector = injector;
            //  表单左对齐
            this.alLeft = false;
            //  平分空间
            this.autoWidth = true;
            //  实时搜索
            this.liveSearch = false;
            //  label的宽度是否自适应
            this.autoLabel = false;
            //  是否禁用
            this.disabled = false;
            this.filterPaddingNone = false;
            // 默认值是空值时执行查询，兼容旧方式
            this.defaultEmptyValueSearch = true;
            this.query = new i0.EventEmitter();
            this.clear = new i0.EventEmitter();
            this.searchChange = new i0.EventEmitter();
            this.conditionsChange = new i0.EventEmitter();
            //  filterWidth:number = 1000;
            //  标记是否有滚动条
            //  hasScroll = true;
            //  需要监听收折的表单
            //  resizeGroups: listFilterGroup;
            // 筛选icon部分小红点
            this.showExpandTag = false;
            /**
             * 是否需要显示展开更多icon
             */
            this.showMoreIcon = false;
            //  moreIconWidth:number = 0;
            this.showFilter = false;
            // 是否展现出的只有一个搜索控件
            this.formExpand = false;
            // 提交表单数据
            //  queryList;
            // 隐藏提交表单数据
            //  extendqueryList;
            /**
             * 循环表单
             */
            this.listFilterConditions = new Array();
            /**
             * 用来存储setvalue前数据
             */
            this.stagListFilterConditions = new Array();
            /**
             * 记录默认收起的搜索表单列表
             */
            this.extendFilterList = [];
            /**
             * 记录显示的搜索表单列表
             */
            this.showFilterList = [];
            /**
             * 显示中表单的必填项
             */
            this.requiredListFilter = [];
            /** 隐藏中表单的必填项 */
            //  extendRequiredListFilter: Array<QueryCondition> = [];
            /**
             * 表单是否允许提交
             */
            this.canSubmit = false;
            /**
             * 扩展表单是否允许提交
             */
            //  extendCanSubmit:boolean = false;
            this.localeIds = {
                en: 'en',
                'zh-CHS': 'zh-CHS'
            };
            this.currentLocale = 'zh-CHS';
            this.isControlInline = true;
            this.fieldCodeOfClearFields = [];
            this.UPDATE_FILTER_VALUES_TIMER = null;
            this.overLayService = null;
            if (this.injector) {
                this.currentLocale = this.injector.get(i0.LOCALE_ID);
                this.listfilterHandler = this.injector.get(LISTFILTER_HANDLER_TOKEN, null, i0.InjectFlags.Optional);
                this.idService = this.injector.get(uiCommon.IdService);
                this.overLayService = this.injector.get(uiCommon.OverLayHiddenService, null);
            }
            if (!this.overLayService) {
                this.overLayService = new uiCommon.OverLayHiddenService();
            }
        }
        Object.defineProperty(ListFilterComponent.prototype, "defaultValue", {
            get: /**
             * @return {?}
             */ function () {
                return this._defaultValue;
            },
            set: /**
             * @param {?} configs
             * @return {?}
             */ function (configs) {
                var _this = this;
                this._defaultValue = configs;
                /** @type {?} */
                var canFilter = this.defaultEmptyValueSearch || configs && configs.length > 0;
                if (canFilter) {
                    setTimeout(( /**
                     * @return {?}
                     */function () {
                        _this.setFilterValue(_this._defaultValue);
                    }));
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ListFilterComponent.prototype, "filterList", {
            get: /**
             * @return {?}
             */ function () {
                return this._filterList;
            },
            set: /**
             * @param {?} filterList
             * @return {?}
             */ function (filterList) {
                this._filterList = filterList;
                this.initFilterList();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ListFilterComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                // if (this.currentLocale === this.localeIds['en']) {
                //     this.isControlInline = false;
                // } else {
                //     this.isControlInline = true;
                // }
                this.canShowMoreIcon();
            };
        /**
         * @return {?}
         */
        ListFilterComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                if (this.autoWidth && !this.formExpand && this.filterMainBasisRef) {
                    /** @type {?} */
                    var basicList = this.filterMainBasisRef.nativeElement.querySelectorAll('.filter-input-list');
                    /** @type {?} */
                    var basicWidth = 0;
                    if (basicList && basicList.length) {
                        for (var k = 0; k < basicList.length; k++) {
                            /** @type {?} */
                            var offW = Math.ceil(parseFloat(basicList[k].offsetWidth || 0));
                            if (offW > 0) {
                                basicWidth += offW;
                            }
                        }
                    }
                    if (basicWidth > 0) {
                        this.render.setStyle(this.filterMainBasisRef.nativeElement, 'width', basicWidth + 'px');
                    }
                }
            };
        /**
         * @return {?}
         */
        ListFilterComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.floatPanel) {
                    this.overLayService.destory(this.floatPanel.nativeElement);
                }
            };
        /** 初始化处理表单数据 */
        /**
         * 初始化处理表单数据
         * @return {?}
         */
        ListFilterComponent.prototype.initFilterList = /**
         * 初始化处理表单数据
         * @return {?}
         */
            function () {
                var _this = this;
                this.listFilterConditions = new Array();
                this.extendFilterList = [];
                this.showFilterList = [];
                this.filterDatas = this.filterService.fieldSchemasConvert(this._filterList);
                if (this.filterDatas && this.filterDatas.length) {
                    this.listFilterConditions = this.convertorService.getSelectedFieldConditions(this.filterDatas, this.listFilterConditions);
                    this.stagListFilterConditions = this.listFilterConditions.map(( /**
                     * @param {?} o
                     * @return {?}
                     */function (o) { return (__assign({}, o)); }));
                    // 存储扩展项和默认展示表单
                    this.listFilterConditions.forEach(( /**
                     * @param {?} field
                     * @return {?}
                     */function (field) {
                        if (field.control.isExtend) {
                            _this.extendFilterList.push(field);
                        }
                        else {
                            _this.showFilterList.push(field);
                        }
                    }));
                    // 判断是否是左对齐 只有一个搜索
                    /** @type {?} */
                    var _basisFilterList = this.listFilterConditions.filter(( /**
                     * @param {?} field
                     * @return {?}
                     */function (field) {
                        return !field.control.isExtend;
                    }));
                    if (_basisFilterList && _basisFilterList.length === 1 && this.getControlType(_basisFilterList[0]) === 'search') {
                        this.formExpand = true;
                    }
                    this.conditionChangeHandler();
                    this.inSetCurrentFilterConditions();
                    // 存储默认展示中必填项
                    this.requiredListInit();
                    this.canShowMoreIcon();
                    //  this.listSearch();
                    this.cd.detectChanges();
                }
            };
        /**
         * @return {?}
         */
        ListFilterComponent.prototype.inSetCurrentFilterConditions = /**
         * @return {?}
         */
            function () {
                if (this.listfilterHandler) {
                    this.listfilterHandler.setCurrentFilterConditions(this.listFilterConditions);
                }
            };
        /**
         * 获取控件类型
         * @param selectedFieldCondition
         */
        /**
         * 获取控件类型
         * @param {?} selectedFieldCondition
         * @return {?}
         */
        ListFilterComponent.prototype.getControlType = /**
         * 获取控件类型
         * @param {?} selectedFieldCondition
         * @return {?}
         */
            function (selectedFieldCondition) {
                if (selectedFieldCondition) {
                    if (selectedFieldCondition.control.getControlType() == ControlType.Text) {
                        return 'input';
                    }
                    else if (selectedFieldCondition.control.getControlType() == ControlType.Search) {
                        return 'search';
                    }
                    else if (selectedFieldCondition.control.getControlType() == ControlType.Date) {
                        return 'date';
                    }
                    else if (selectedFieldCondition.control.getControlType() == ControlType.Month) {
                        return 'month';
                    }
                    else if (selectedFieldCondition.control.getControlType() == ControlType.Year) {
                        return 'year';
                    }
                    else if (selectedFieldCondition.control.getControlType() == ControlType.DateRange) {
                        return 'daterange';
                    }
                    else if (selectedFieldCondition.control.getControlType() == ControlType.DateRangeTime) {
                        return 'daterangetime';
                    }
                    else if (selectedFieldCondition.control.getControlType() == ControlType.MonthRange) {
                        return 'monthrange';
                    }
                    else if (selectedFieldCondition.control.getControlType() == ControlType.YearRange) {
                        return 'yearrange';
                    }
                    else if (selectedFieldCondition.control.getControlType() == ControlType.DropDown) {
                        return 'dropdown';
                    }
                    else if (selectedFieldCondition.control.getControlType() == ControlType.NumberRange) {
                        return 'number';
                    }
                    else if (selectedFieldCondition.control.getControlType() == ControlType.Help) {
                        return 'help';
                    }
                    else if (selectedFieldCondition.control.getControlType() == ControlType.CheckboxGroup) {
                        return 'checkboxgroup';
                    }
                    else if (selectedFieldCondition.control.getControlType() == ControlType.Radio) {
                        return 'radio';
                    }
                    else if (selectedFieldCondition.control.getControlType() == ControlType.InputGroup) {
                        return 'input-group';
                    }
                    else {
                        return 'input';
                    }
                }
            };
        /** 获得类名 */
        /**
         * 获得类名
         * @param {?} currentItem
         * @return {?}
         */
        ListFilterComponent.prototype.getStyle = /**
         * 获得类名
         * @param {?} currentItem
         * @return {?}
         */
            function (currentItem) {
                /** @type {?} */
                var defaultCondtionStyle = 'col-12 col-md-6 col-xl-3 col-el-2';
                return (this.filterClass && !this.autoWidth) ? this.filterClass : defaultCondtionStyle;
            };
        /** 判断是否需要显示更多按钮 */
        /**
         * 判断是否需要显示更多按钮
         * @return {?}
         */
        ListFilterComponent.prototype.canShowMoreIcon = /**
         * 判断是否需要显示更多按钮
         * @return {?}
         */
            function () {
                if (this.extendFilterList.length > 0) {
                    this.showMoreIcon = true;
                }
                else {
                    this.showMoreIcon = false;
                }
            };
        /** 判断是否所有必填项都填写完毕 */
        /**
         * 判断是否所有必填项都填写完毕
         * @param {?} requirelist
         * @return {?}
         */
        ListFilterComponent.prototype.canSubmitFilter = /**
         * 判断是否所有必填项都填写完毕
         * @param {?} requirelist
         * @return {?}
         */
            function (requirelist) {
                /** @type {?} */
                var formCanSubmit = false;
                if (!requirelist || !requirelist.length) {
                    formCanSubmit = true;
                    return formCanSubmit;
                }
                else {
                    for (var i = 0; i < requirelist.length; i++) {
                        /** @type {?} */
                        var item = requirelist[i];
                        if (item.control.getControlType() === ControlType.Text) {
                            /** @type {?} */
                            var tv = (( /** @type {?} */(item.value)));
                            if (Object.keys(tv).length < 0 || !tv.value) {
                                formCanSubmit = false;
                                return false;
                            }
                            else {
                                formCanSubmit = true;
                            }
                        }
                        else if (item.control.getControlType() === ControlType.Help) {
                            /** @type {?} */
                            var shv = (( /** @type {?} */(item.value)));
                            if (Object.keys(shv).length === 0 || !shv.value || !shv.valueField) {
                                formCanSubmit = false;
                                return false;
                            }
                            else {
                                formCanSubmit = true;
                            }
                        }
                        else if (item.control.getControlType() === ControlType.DropDown) {
                            /** @type {?} */
                            var ddv = (( /** @type {?} */(item.value)));
                            if (Object.keys(ddv).length === 0 || !ddv.value) {
                                formCanSubmit = false;
                                return false;
                            }
                            else {
                                formCanSubmit = true;
                            }
                        }
                        else if (item.control.getControlType() === ControlType.DateRange) {
                            /** @type {?} */
                            var drv = (( /** @type {?} */(item.value)));
                            if (Object.keys(drv).length === 0 || (!drv.startTime && !drv.endTime)) {
                                formCanSubmit = false;
                                return false;
                            }
                            else {
                                formCanSubmit = true;
                            }
                        }
                        else if (item.control.getControlType() === ControlType.DateRangeTime) {
                            /** @type {?} */
                            var drv = (( /** @type {?} */(item.value)));
                            if (Object.keys(drv).length === 0 || (!drv.startTime && !drv.endTime)) {
                                formCanSubmit = false;
                                return false;
                            }
                            else {
                                formCanSubmit = true;
                            }
                        }
                        else if (item.control.getControlType() === ControlType.MonthRange) {
                            /** @type {?} */
                            var mrv = (( /** @type {?} */(item.value)));
                            if (Object.keys(mrv).length === 0 || (!mrv.startTime && !mrv.endTime)) {
                                formCanSubmit = false;
                                return false;
                            }
                            else {
                                formCanSubmit = true;
                            }
                        }
                        else if (item.control.getControlType() === ControlType.YearRange) {
                            /** @type {?} */
                            var yrv = (( /** @type {?} */(item.value)));
                            if (Object.keys(yrv).length === 0 || (!yrv.startTime && !yrv.endTime)) {
                                formCanSubmit = false;
                                return false;
                            }
                            else {
                                formCanSubmit = true;
                            }
                        }
                        else if (item.control.getControlType() === ControlType.NumberRange) {
                            /** @type {?} */
                            var nrv = (( /** @type {?} */(item.value)));
                            if (Object.keys(nrv).length === 0 || (!nrv.startValue && !nrv.endValue)) {
                                formCanSubmit = false;
                                return false;
                            }
                            else {
                                formCanSubmit = true;
                            }
                        }
                        else if (item.control.getControlType() === ControlType.Search) {
                            /** @type {?} */
                            var sv = (( /** @type {?} */(item.value)));
                            if (Object.keys(sv).length < 0 || !sv.value) {
                                formCanSubmit = false;
                                return false;
                            }
                            else {
                                formCanSubmit = true;
                            }
                        }
                        else if (item.control.getControlType() === ControlType.Date) {
                            /** @type {?} */
                            var dv = (( /** @type {?} */(item.value)));
                            if (Object.keys(dv).length < 0 || !dv.value) {
                                formCanSubmit = false;
                                return false;
                            }
                            else {
                                formCanSubmit = true;
                            }
                        }
                        else if (item.control.getControlType() === ControlType.Month) {
                            /** @type {?} */
                            var mv = (( /** @type {?} */(item.value)));
                            if (Object.keys(mv).length < 0 || !mv.value) {
                                formCanSubmit = false;
                                return false;
                            }
                            else {
                                formCanSubmit = true;
                            }
                        }
                        else if (item.control.getControlType() === ControlType.Year) {
                            /** @type {?} */
                            var yv = (( /** @type {?} */(item.value)));
                            if (Object.keys(yv).length < 0 || !yv.value) {
                                formCanSubmit = false;
                                return false;
                            }
                            else {
                                formCanSubmit = true;
                            }
                        }
                        else if (item.control.getControlType() === ControlType.CheckboxGroup) {
                            /** @type {?} */
                            var cbgv = (( /** @type {?} */(item.value)));
                            if (Object.keys(cbgv).length === 0 || Object.keys(cbgv.value).length === 0) {
                                formCanSubmit = false;
                                return false;
                            }
                            else {
                                formCanSubmit = true;
                            }
                        }
                        else if (item.control.getControlType() === ControlType.Radio) {
                            /** @type {?} */
                            var ddv = (( /** @type {?} */(item.value)));
                            if (Object.keys(ddv).length === 0 || !ddv.value) {
                                formCanSubmit = false;
                                return false;
                            }
                            else {
                                formCanSubmit = true;
                            }
                        }
                        else if (item.control.getControlType() === ControlType.InputGroup) {
                            /** @type {?} */
                            var sv = (( /** @type {?} */(item.value)));
                            if (Object.keys(sv).length < 0 || !sv.textValue) {
                                formCanSubmit = false;
                                return false;
                            }
                            else {
                                formCanSubmit = true;
                            }
                        }
                    }
                    return formCanSubmit;
                }
            };
        /** 搜索表单变化 */
        /**
         * 搜索表单变化
         * @param {?} $event
         * @param {?} item
         * @return {?}
         */
        ListFilterComponent.prototype.onSearch = /**
         * 搜索表单变化
         * @param {?} $event
         * @param {?} item
         * @return {?}
         */
            function ($event, item) {
                if (this.disabled) {
                    return;
                }
                this.conditionChangeHandler(false);
                this.searchChange.emit({ item: item, conditions: this.listFilterConditions, instance: this });
                this.inSetCurrentFilterConditions();
                this.canSubmit = this.canSubmitFilter(this.requiredListFilter);
                if (item.control.isExtend || !this.canSubmit || !this.liveSearch) {
                    return;
                }
                this.submit('showFormData', this.listFilterConditions);
            };
        /** 开始筛选 */
        /**
         * 开始筛选
         * @return {?}
         */
        ListFilterComponent.prototype.filterClick = /**
         * 开始筛选
         * @return {?}
         */
            function () {
                if (this.disabled || !this.canSubmit) {
                    return;
                }
                this.submit('showFormData', this.listFilterConditions);
            };
        /** 收折部分点击确定提交 */
        /**
         * 收折部分点击确定提交
         * @return {?}
         */
        ListFilterComponent.prototype.listSearch = /**
         * 收折部分点击确定提交
         * @return {?}
         */
            function () {
                if (this.disabled || !this.canSubmit) {
                    return;
                }
                this.showFilter = false;
                this.submit('extendFormData', this.listFilterConditions);
            };
        /** 取消搜索 */
        /**
         * 取消搜索
         * @return {?}
         */
        ListFilterComponent.prototype.listSearchCancel = /**
         * 取消搜索
         * @return {?}
         */
            function () {
                this.showFilter = false;
            };
        /** 提交表单 */
        /**
         * 提交表单
         * @param {?} type
         * @param {?} filterlist
         * @return {?}
         */
        ListFilterComponent.prototype.submit = /**
         * 提交表单
         * @param {?} type
         * @param {?} filterlist
         * @return {?}
         */
            function (type, filterlist) {
                /** @type {?} */
                var queryList;
                queryList = this.handler.setFilterConditions(filterlist);
                if (type == 'extendFormData') {
                    if (queryList.length > 0) {
                        this.showExpandTag = true;
                    }
                    else {
                        this.showExpandTag = false;
                    }
                }
                this.query.emit({ type: type, data: JSON.stringify(queryList) });
            };
        /** 对外提供获得表单搜索数据 */
        /**
         * 对外提供获得表单搜索数据
         * @return {?}
         */
        ListFilterComponent.prototype.getFilterData = /**
         * 对外提供获得表单搜索数据
         * @return {?}
         */
            function () {
                /** @type {?} */
                var queryList;
                queryList = this.handler.setFilterConditions(this.listFilterConditions);
                return JSON.stringify(queryList);
            };
        /** 获取展示在外部的表单长度 */
        /**
         * 获取展示在外部的表单长度
         * @return {?}
         */
        ListFilterComponent.prototype.getShowLength = /**
         * 获取展示在外部的表单长度
         * @return {?}
         */
            function () {
                if (this.showFilterList) {
                    return this.showFilterList.length;
                }
            };
        /** 清空条件 */
        /**
         * 清空条件
         * @return {?}
         */
        ListFilterComponent.prototype.resetSearch = /**
         * 清空条件
         * @return {?}
         */
            function () {
                if (this.disabled) {
                    return;
                }
                if (this.listFilterConditions && this.listFilterConditions.length) {
                    this.listFilterConditions.forEach(( /**
                     * @param {?} listFilterCondition
                     * @return {?}
                     */function (listFilterCondition) {
                        if (listFilterCondition.control.getControlType() == ControlType.Text) {
                            listFilterCondition.value = new TextValue();
                        }
                        else if (listFilterCondition.control.getControlType() == ControlType.Search) {
                            listFilterCondition.value = new SearchValue();
                        }
                        else if (listFilterCondition.control.getControlType() == ControlType.Date) {
                            listFilterCondition.value = new DateValue();
                        }
                        else if (listFilterCondition.control.getControlType() == ControlType.Month) {
                            listFilterCondition.value = new MonthValue();
                        }
                        else if (listFilterCondition.control.getControlType() == ControlType.Year) {
                            listFilterCondition.value = new YearValue();
                        }
                        else if (listFilterCondition.control.getControlType() == ControlType.DateRange) {
                            listFilterCondition.value = new DateRangeValue();
                        }
                        else if (listFilterCondition.control.getControlType() == ControlType.MonthRange) {
                            listFilterCondition.value = new MonthRangeValue();
                        }
                        else if (listFilterCondition.control.getControlType() == ControlType.YearRange) {
                            listFilterCondition.value = new YearRangeValue();
                        }
                        else if (listFilterCondition.control.getControlType() == ControlType.DropDown) {
                            listFilterCondition.value = new DropDownListValue();
                        }
                        else if (listFilterCondition.control.getControlType() == ControlType.NumberRange) {
                            listFilterCondition.value = new NumberRangeValue();
                        }
                        else if (listFilterCondition.control.getControlType() == ControlType.Help) {
                            listFilterCondition.value = new HelpValue();
                        }
                        else if (listFilterCondition.control.getControlType() == ControlType.CheckboxGroup) {
                            listFilterCondition.value = new CheckboxGroupValue();
                        }
                        else if (listFilterCondition.control.getControlType() == ControlType.Radio) {
                            listFilterCondition.value = new RadioGroupValue();
                        }
                        else if (listFilterCondition.control.getControlType() == ControlType.InputGroup) {
                            listFilterCondition.value = new InputGroupValue();
                        }
                        else {
                            listFilterCondition.value = new TextValue();
                        }
                    }));
                    //  let listFilter = this.listFilterConditions.map(o => Object.assign({}, o));
                    /** @type {?} */
                    var listFilter = this.listFilterConditions.map(( /**
                     * @param {?} o
                     * @return {?}
                     */function (o) { return (__assign({}, o)); }));
                    this.listFilterConditions = listFilter;
                    this.stagListFilterConditions = this.listFilterConditions.map(( /**
                     * @param {?} o
                     * @return {?}
                     */function (o) { return (__assign({}, o)); }));
                    this.requiredListInit();
                    //  this.cd.markForCheck();
                }
                this.conditionChangeHandler(false);
                this.clear.emit();
            };
        // 设置默认值
        // 设置默认值
        /**
         * @param {?} fieldConfigs
         * @return {?}
         */
        ListFilterComponent.prototype.setFilterValue =
            // 设置默认值
            /**
             * @param {?} fieldConfigs
             * @return {?}
             */
            function (fieldConfigs) {
                var _this = this;
                if (this.UPDATE_FILTER_VALUES_TIMER) {
                    clearTimeout(this.UPDATE_FILTER_VALUES_TIMER);
                }
                this.UPDATE_FILTER_VALUES_TIMER = setTimeout(( /**
                 * @return {?}
                 */function () {
                    /** @type {?} */
                    var _filters = _this.stagListFilterConditions.map(( /**
                     * @param {?} o
                     * @return {?}
                     */function (o) { return (__assign({}, o)); }));
                    if (_filters && _filters.length) {
                        _this.setValues(_filters, fieldConfigs);
                        /** @type {?} */
                        var listFilter = _filters.map(( /**
                         * @param {?} o
                         * @return {?}
                         */function (o) { return (__assign({}, o)); }));
                        _this.listFilterConditions = listFilter;
                        _this.requiredListInit();
                        _this.conditionChangeHandler();
                        _this.inSetCurrentFilterConditions();
                        //  this.listSearch();
                        _this.cd.detectChanges();
                        _this.cd.markForCheck();
                        _this.canSubmit = _this.canSubmitFilter(_this.requiredListFilter);
                        if (!_this.canSubmit) {
                            return;
                        }
                        _this.submit('showFormData', _this.listFilterConditions);
                    }
                }));
                // this.listFilterConditions = this.stagListFilterConditions.map(o => ({ ...o }));
                // if (this.listFilterConditions && this.listFilterConditions.length) {
                //     this.setValues(this.listFilterConditions, fieldConfigs);
                //     const listFilter = this.listFilterConditions.map(o => ({ ...o }));
                //     this.listFilterConditions = listFilter;
                //     this.requiredListInit();
                //     this.searchChange.emit(this.listFilterConditions);
                //     this.inSetCurrentFilterConditions();
                //     //  this.listSearch();
                //     this.cd.detectChanges();
                //     this.cd.markForCheck();
                //     this.canSubmit = this.canSubmitFilter(this.requiredListFilter);
                //     if (!this.canSubmit) {
                //         return;
                //     }
                //     this.submit('showFormData', this.listFilterConditions);
                // }
            };
        // 设置value
        // 设置value
        /**
         * @param {?} conditions
         * @param {?} fieldConfigs
         * @return {?}
         */
        ListFilterComponent.prototype.setValues =
            // 设置value
            /**
             * @param {?} conditions
             * @param {?} fieldConfigs
             * @return {?}
             */
            function (conditions, fieldConfigs) {
                var _this = this;
                /** @type {?} */
                var qc;
                /** @type {?} */
                var controlType;
                if (fieldConfigs && fieldConfigs.length) {
                    fieldConfigs.forEach(( /**
                     * @param {?} v
                     * @return {?}
                     */function (v) {
                        qc = conditions.find(( /**
                         * @param {?} c
                         * @return {?}
                         */function (c) { return c.fieldCode == v.labelCode; }));
                        if (qc) {
                            controlType = _this.getControlType(qc);
                            qc.value = _this.filterService.setValues(controlType, v.value);
                        }
                    }));
                }
            };
        /**
         * @param {?} fieldName
         * @return {?}
         */
        ListFilterComponent.prototype.getValue = /**
         * @param {?} fieldName
         * @return {?}
         */
            function (fieldName) {
                /** @type {?} */
                var queryList = this.handler.setFilterConditions(this.listFilterConditions);
                /** @type {?} */
                var item = queryList.find(( /**
                 * @param {?} n
                 * @return {?}
                 */function (n) { return n['FilterField'] === fieldName; }));
                if (item) {
                    return item.value;
                }
                return undefined;
            };
        // 必填项初始化
        // 必填项初始化
        /**
         * @return {?}
         */
        ListFilterComponent.prototype.requiredListInit =
            // 必填项初始化
            /**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var requiredList = this.listFilterConditions.filter(( /**
                 * @param {?} listitem
                 * @return {?}
                 */function (listitem) {
                    return listitem.control.required;
                }));
                if (requiredList && requiredList.length) {
                    this.requiredListFilter = requiredList;
                    this.canSubmit = this.canSubmitFilter(this.requiredListFilter);
                }
                else {
                    this.requiredListFilter = [];
                    this.canSubmit = true;
                }
            };
        /**
         * @param {?} fields
         * @return {?}
         */
        ListFilterComponent.prototype.clearFilterValue = /**
         * @param {?} fields
         * @return {?}
         */
            function (fields) {
                if (fields && fields.length) {
                    if (typeof fields === 'string') {
                        fields = fields.split(',');
                    }
                    fields = fields.map(( /**
                     * @param {?} n
                     * @return {?}
                     */function (n) {
                        return n.toLowerCase();
                    }));
                    this.listFilterConditions.forEach(( /**
                     * @param {?} n
                     * @return {?}
                     */function (n) {
                        if (fields.indexOf(n.fieldCode.toLowerCase()) > -1) {
                            n.value.clearValue();
                        }
                    }));
                }
            };
        /**
         * @param {?} values
         * @return {?}
         */
        ListFilterComponent.prototype.updateValues = /**
         * @param {?} values
         * @return {?}
         */
            function (values) {
                var _this = this;
                if (values && Object.keys(values)) {
                    /** @type {?} */
                    var fields_1 = Object.keys(values);
                    fields_1.forEach(( /**
                     * @param {?} f
                     * @return {?}
                     */function (f) {
                        _this.listFilterConditions.forEach(( /**
                         * @param {?} n
                         * @return {?}
                         */function (n) {
                            if (fields_1.indexOf(n.fieldCode.toLowerCase()) > -1) {
                                n.value['value'] = values[f];
                            }
                        }));
                    }));
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        ListFilterComponent.prototype.buildSmartHelpKey = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (this.idService) {
                    /** @type {?} */
                    var prefix = '';
                    if (location.hash) {
                        /** @type {?} */
                        var pathArr = location.hash.split('?');
                        prefix = pathArr ? pathArr[0] : '';
                    }
                    else {
                        /** @type {?} */
                        var pathArr = location.pathname.split('/');
                        prefix = pathArr ? pathArr[pathArr.length - 1] : '';
                    }
                    return this.idService.encrypt(prefix + '/list-filter/' + value);
                }
                else {
                    return 'list-filter/' + value;
                }
            };
        /**
         * @private
         * @param {?=} searchEmit
         * @return {?}
         */
        ListFilterComponent.prototype.conditionChangeHandler = /**
         * @private
         * @param {?=} searchEmit
         * @return {?}
         */
            function (searchEmit) {
                if (searchEmit === void 0) {
                    searchEmit = true;
                }
                /** @type {?} */
                var queryList = this.handler.setFilterConditions(this.listFilterConditions);
                this.conditionsChange.emit({ data: JSON.stringify(queryList) });
                if (searchEmit) {
                    this.searchChange.emit(this.listFilterConditions);
                }
            };
        /**
         * 浮动筛选面板通过方法展开和关闭
         * @param evt
         */
        /**
         * 浮动筛选面板通过方法展开和关闭
         * @param {?} evt
         * @return {?}
         */
        ListFilterComponent.prototype.floatFilterOpen = /**
         * 浮动筛选面板通过方法展开和关闭
         * @param {?} evt
         * @return {?}
         */
            function (evt) {
                var _this = this;
                this.showFilter = !this.showFilter;
                if (this.showFilter) {
                    this.overLayService.registerMouseEvent(this.floatPanel.nativeElement, ( /**
                     * @param {?} e
                     * @return {?}
                     */function (e) {
                        if (_this.floatPanel.nativeElement.contains(e.target)) {
                            return;
                        }
                        else {
                            if (e.target.nodeName === 'SPAN' && e.target.className.indexOf('f-icon-filtrate')) {
                                return;
                            }
                            /** @type {?} */
                            var cls = ['.f-datepicker-container', '.farris-timer-picker', '.farris-modal', '.f-combo-lookup', '.date-overlay-container'];
                            if (cls.find(( /**
                             * @param {?} k
                             * @return {?}
                             */function (k) { return e.target.closest(k); }))) {
                                return;
                            }
                        }
                        _this.showFilter = false;
                        _this.overLayService.destory(_this.floatPanel.nativeElement);
                        _this.cd.detectChanges();
                    }));
                }
                else {
                    this.overLayService.destory(this.floatPanel.nativeElement);
                }
            };
        ListFilterComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'farris-list-filter',
                        template: "<app-filter-common></app-filter-common>\r\n<div class=\"f-list-filter position-relative\"\r\n    [ngClass]=\"{'list-filter-padding': showMoreIcon,'list-filter-autoWidth': autoWidth,'list-filter-paddingnone': filterPaddingNone}\">\r\n    <ng-container *ngIf=\"filterType === 'list';else filterLayout\">\r\n        <div class=\"filter-inputs-main filter-inputs-main-list f-form-layout farris-form farris-form-controls-inline\">\r\n            <ng-container *ngFor=\"let formItem of listFilterConditions;let last = last;\">\r\n                <div class=\"col-12\"\r\n                    [ngClass]=\"{'filter-list-item': showFilterList && showFilterList.length && showFilterList[showFilterList.length-1]['id'] == formItem.id}\"\r\n                    *ngIf=\"!formItem.control.isExtend\">\r\n                    <div class=\"filter-input-list farris-group-wrap\"\r\n                        [ngClass]=\"{'filter-input-list-autolabel': autoLabel,'filter-input-list-checkbox': getControlType(formItem) === 'checkboxgroup'}\"\r\n                        [id]=\"'filter-'+formItem.id\">\r\n                        <ng-container [ngTemplateOutlet]=\"filterInputTemplate\"\r\n                            [ngTemplateOutletContext]=\"{ item: formItem }\"></ng-container>\r\n                        <div class=\"filter-search-btn\"\r\n                            *ngIf=\"!liveSearch && showFilterList && showFilterList.length && showFilterList[showFilterList.length-1]['id'] == formItem.id\">\r\n                            <button class=\"btn btn-primary\" [ngClass]=\"{'disabled': disabled || !canSubmit}\"\r\n                                (click)=\"filterClick()\">{{ 'listFilter.filter' | locale }}</button>\r\n                            <button class=\"btn btn-secondary filter-search-btn-reset\" *ngIf=\"!showMoreIcon\"\r\n                                (click)=\"resetSearch()\">\r\n                                <span class=\"f-icon f-icon-remove\"></span>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </ng-container>\r\n        </div>\r\n    </ng-container>\r\n    <ng-template #filterLayout>\r\n        <ng-container *ngIf=\"autoWidth;else gridLayout\">\r\n            <div class=\"filter-inputs-main-basis-wrapper\"\r\n                [ngClass]=\"{'list-filter-wrapper-show-btn': !liveSearch,'list-filter-wrapper-show-btn-remove': !liveSearch && !showMoreIcon}\">\r\n                <div class=\"filter-inputs-main-basis-wrapper-inner\">\r\n                    <div class=\"filter-inputs-main filter-inputs-main-basis farris-form d-flex\"\r\n                        [ngClass]=\"{'justify-content-end': !alLeft,'farris-form-controls-inline':isControlInline}\"\r\n                        #filterMainBasis>\r\n                        <ng-container *ngFor=\"let formItem of listFilterConditions\">\r\n                            <div *ngIf=\"!formItem.control.isExtend\" class=\"filter-input-list farris-group-wrap\"\r\n                                [ngClass]=\"{'filter-input-list-autolabel': autoLabel,'filter-input-list-checkbox': getControlType(formItem) === 'checkboxgroup', 'filter-input-list-expand':formExpand,'filter-input-list-left': alLeft,'filter-input-list-radio': getControlType(formItem) === 'radio','filter-input-list-hasrange':getControlType(formItem).indexOf('range')>-1}\"\r\n                                [id]=\"'filter-'+formItem.id\">\r\n                                <ng-container [ngTemplateOutlet]=\"filterInputTemplate\"\r\n                                    [ngTemplateOutletContext]=\"{ item: formItem }\"></ng-container>\r\n                            </div>\r\n                        </ng-container>\r\n                    </div>\r\n                </div>\r\n                <div class=\"filter-search-btn\" [ngClass]=\"{'filter-search-btn-remove': !showMoreIcon}\"\r\n                    *ngIf=\"!liveSearch\">\r\n                    <button class=\"btn btn-primary\" [ngClass]=\"{'disabled': disabled || !canSubmit}\"\r\n                        (click)=\"filterClick()\">{{ 'listFilter.filter' | locale }}</button>\r\n                    <button class=\"btn btn-secondary filter-search-btn-reset\" *ngIf=\"!showMoreIcon\"\r\n                        (click)=\"resetSearch()\">\r\n                        <span class=\"f-icon f-icon-remove\"></span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </ng-container>\r\n        <ng-template #gridLayout>\r\n            <div class=\"filter-inputs-main f-form-layout farris-form\" [ngClass]=\"\r\n                {'list-filter-type-1': getShowLength() === 1,\r\n                'list-filter-type-2': getShowLength() === 2,\r\n                'list-filter-type-3': getShowLength() === 3,\r\n                'list-filter-type-4': getShowLength() === 4,\r\n                'list-filter-type-5': getShowLength() === 5,\r\n                'list-filter-type-6': getShowLength() >= 6,\r\n                'list-filter-custom-type': this.filterClass,\r\n                'list-filter-show-reset': !showMoreIcon,\r\n                'list-filter-padding-none': liveSearch,\r\n                'farris-form-controls-inline':isControlInline}\">\r\n                <ng-container *ngFor=\"let formItem of listFilterConditions\">\r\n                    <div [ngClass]=\"getStyle(formItem)\" *ngIf=\"!formItem.control.isExtend\">\r\n                        <div class=\"filter-input-list farris-group-wrap\"\r\n                            [ngClass]=\"{'filter-input-list-autolabel': autoLabel,'filter-input-list-checkbox': getControlType(formItem) === 'checkboxgroup'}\"\r\n                            [id]=\"'filter-'+formItem.id\">\r\n                            <ng-container [ngTemplateOutlet]=\"filterInputTemplate\"\r\n                                [ngTemplateOutletContext]=\"{ item: formItem }\"></ng-container>\r\n                        </div>\r\n                    </div>\r\n                </ng-container>\r\n                <div class=\"filter-search-btn\" [ngClass]=\"{\r\n                    'filter-search-btn-type-1': getShowLength() === 1,\r\n                    'filter-search-btn-type-2': getShowLength() === 2,\r\n                    'filter-search-btn-type-3': getShowLength() === 3,\r\n                    'filter-search-btn-type-4': getShowLength() === 4,\r\n                    'filter-search-btn-type-5': getShowLength() === 5,\r\n                    'filter-search-custom-type': this.filterClass,\r\n                    'filter-search-btn-type-6': getShowLength() >= 6}\" *ngIf=\"!liveSearch\">\r\n                    <button class=\"btn btn-primary\" [ngClass]=\"{'disabled': disabled || !canSubmit}\"\r\n                        (click)=\"filterClick()\">{{ 'listFilter.filter' | locale }}</button>\r\n                    <button class=\"btn btn-secondary filter-search-btn-reset\" *ngIf=\"!showMoreIcon\"\r\n                        (click)=\"resetSearch()\">\r\n                        <span class=\"f-icon f-icon-remove\"></span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </ng-template>\r\n    </ng-template>\r\n    <div class=\"filter-expand position-absolute\" [class.active]=\"showFilter\" (click)=\"floatFilterOpen($event)\"\r\n        *ngIf=\"showMoreIcon\">\r\n        <span class=\"f-icon f-icon-filtrate\"></span>\r\n        <span class=\"filter-expand-tag\" *ngIf=\"showExpandTag\"></span>\r\n    </div>\r\n    <div class=\"filter-inputs-extend position-absolute\" [hidden]=\"!showFilter\" *ngIf=\"showMoreIcon\" #floatPanel>\r\n        <div class=\"filter-typelist-arrow\"></div>\r\n        <div class=\"farris-form farris-form-auto\" [ngClass]=\"{'farris-form-controls-inline':isControlInline}\">\r\n            <fieldset class=\"f-section-formgroup\">\r\n                <div class=\"f-section-formgroup-inputs\">\r\n                    <div class=\"col-12\">\r\n                        <ng-container *ngFor=\"let formItem of listFilterConditions\">\r\n                            <div class=\"filter-input-list farris-group-wrap\" *ngIf=\"formItem.control.isExtend\">\r\n                                <ng-container [ngTemplateOutlet]=\"filterInputTemplate\"\r\n                                    [ngTemplateOutletContext]=\"{ item: formItem }\"></ng-container>\r\n                            </div>\r\n                        </ng-container>\r\n                    </div>\r\n                </div>\r\n            </fieldset>\r\n            <!-- bugNum:456508 -->\r\n            <div class=\"filter-form-btns text-right\">\r\n                <button class=\"btn btn-link filter-form-btn-reset\" (click)=\"resetSearch()\">{{ 'listFilter.reset' |\r\n                    locale }}</button>\r\n                <button class=\"btn btn-secondary\" (click)=\"listSearchCancel()\">{{ 'listFilter.cancel' | locale\r\n                    }}</button>\r\n                <button class=\"btn btn-primary\" [ngClass]=\"{'disabled': disabled || !canSubmit}\"\r\n                    (click)=\"listSearch()\">{{ 'listFilter.confirm' | locale }}</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #filterInputTemplate let-item=\"item\">\r\n    <ng-container [ngSwitch]=\"item | controlType\">\r\n        <div class=\"filter-input-item filter-type-input\" *ngSwitchCase=\"'input'\">\r\n            <app-filter-input [item]=\"item\" [autoLabel]=\"autoLabel\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-input>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-search\" *ngSwitchCase=\"'search'\">\r\n            <app-filter-search [item]=\"item\" [autoLabel]=\"autoLabel\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-search>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-date\" *ngSwitchCase=\"'date'\">\r\n            <app-filter-date [changeFields]=\"fieldCodeOfClearFields\" [item]=\"item\" [autoLabel]=\"autoLabel\"\r\n                [disabled]=\"disabled\" (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\">\r\n            </app-filter-date>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-year\" *ngSwitchCase=\"'year'\">\r\n            <app-filter-date [changeFields]=\"fieldCodeOfClearFields\" [item]=\"item\" [autoLabel]=\"autoLabel\"\r\n                [disabled]=\"disabled\" [showType]=\"'3'\" (searchHandle)=\"onSearch($event,item)\"\r\n                class=\"form-group farris-form-group\"></app-filter-date>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-month\" *ngSwitchCase=\"'month'\">\r\n            <app-filter-date [changeFields]=\"fieldCodeOfClearFields\" [item]=\"item\" [autoLabel]=\"autoLabel\"\r\n                [disabled]=\"disabled\" [showType]=\"'2'\" (searchHandle)=\"onSearch($event,item)\"\r\n                class=\"form-group farris-form-group\"></app-filter-date>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-date\" *ngSwitchCase=\"'daterange'\">\r\n            <app-filter-daterange [changeFields]=\"fieldCodeOfClearFields\" [item]=\"item\" [autoLabel]=\"autoLabel\"\r\n                [disabled]=\"disabled\" (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\">\r\n            </app-filter-daterange>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-date\" *ngSwitchCase=\"'daterangetime'\">\r\n            <app-filter-daterange [changeFields]=\"fieldCodeOfClearFields\" [item]=\"item\" [autoLabel]=\"autoLabel\"\r\n                [disabled]=\"disabled\" [showTime]=\"true\" (searchHandle)=\"onSearch($event,item)\"\r\n                class=\"form-group farris-form-group\"></app-filter-daterange>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-monthrange\" *ngSwitchCase=\"'monthrange'\">\r\n            <app-filter-daterange [changeFields]=\"fieldCodeOfClearFields\" [item]=\"item\" [autoLabel]=\"autoLabel\"\r\n                [disabled]=\"disabled\" [showType]=\"'2'\" (searchHandle)=\"onSearch($event,item)\"\r\n                class=\"form-group farris-form-group\"></app-filter-daterange>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-yearrange\" *ngSwitchCase=\"'yearrange'\">\r\n            <app-filter-daterange [changeFields]=\"fieldCodeOfClearFields\" [item]=\"item\" [autoLabel]=\"autoLabel\"\r\n                [disabled]=\"disabled\" [showType]=\"'3'\" (searchHandle)=\"onSearch($event,item)\"\r\n                class=\"form-group farris-form-group\"></app-filter-daterange>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-dropdown\" *ngSwitchCase=\"'dropdown'\">\r\n            <app-filter-dropdown [changeFields]=\"fieldCodeOfClearFields\" [item]=\"item\" [autoLabel]=\"autoLabel\"\r\n                [disabled]=\"disabled\" (searchHandle)=\"onSearch($event,item)\" [enableClear]=\"item?.control?.enableClear\" class=\"form-group farris-form-group\">\r\n            </app-filter-dropdown>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-number\" *ngSwitchCase=\"'number'\">\r\n            <app-filter-number [changeFields]=\"fieldCodeOfClearFields\" [item]=\"item\" [autoLabel]=\"autoLabel\"\r\n                [disabled]=\"disabled\" (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\">\r\n            </app-filter-number>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-help\" *ngSwitchCase=\"'help'\">\r\n            <app-filter-help [changeFields]=\"fieldCodeOfClearFields\" [item]=\"item\" [autoLabel]=\"autoLabel\"\r\n                [instanceId]=\"buildSmartHelpKey(item.fieldCode)\"\r\n                [disabled]=\"disabled\" [hostRef]=\"this\" (searchHandle)=\"onSearch($event,item)\"\r\n                class=\"form-group farris-form-group\"></app-filter-help>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-checkboxgroup\" *ngSwitchCase=\"'checkboxgroup'\">\r\n            <app-filter-checkbox [changeFields]=\"fieldCodeOfClearFields\" [item]=\"item\" [autoLabel]=\"autoLabel\"\r\n                [disabled]=\"disabled\" (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"\r\n                style=\"white-space: nowrap;\"></app-filter-checkbox>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-radio\" *ngSwitchCase=\"'radio'\">\r\n            <app-filter-radio [changeFields]=\"fieldCodeOfClearFields\" [item]=\"item\" [autoLabel]=\"autoLabel\"\r\n                [disabled]=\"disabled\" (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"\r\n                style=\"white-space: nowrap;\"></app-filter-radio>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-input-group\" *ngSwitchCase=\"'input-group'\">\r\n            <app-filter-inputgroup [item]=\"item\" [autoLabel]=\"autoLabel\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\">\r\n            </app-filter-inputgroup>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-default\" *ngSwitchDefault>\r\n            <app-filter-input [item]=\"item\" [autoLabel]=\"autoLabel\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-input>\r\n        </div>\r\n    </ng-container>\r\n</ng-template>",
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        styles: ["::-webkit-scrollbar{width:6px;height:6px;background-color:#eee}::-webkit-scrollbar-track{border-radius:0}::-webkit-scrollbar-thumb{background-color:rgba(0,0,0,.15);-webkit-transition:.2s;transition:.2s;border-radius:6px}::-webkit-scrollbar-thumb:hover{background-color:rgba(0,0,0,.45)}.filter-search-btn-col{flex-basis:0;-webkit-box-flex:1;flex-grow:1;max-width:100%}.filter-search-btn-absoulte{position:absolute;right:0;top:0}.f-list-filter .filter-inputs-main-basis-wrapper{width:100%;overflow:hidden}.f-list-filter .filter-inputs-main-basis-wrapper.list-filter-wrapper-show-btn{position:relative;padding-right:84px}.f-list-filter .filter-inputs-main-basis-wrapper.list-filter-wrapper-show-btn.list-filter-wrapper-show-btn-remove{padding-right:124px}.f-list-filter .filter-inputs-main-basis-wrapper.list-filter-wrapper-show-btn .filter-search-btn{position:absolute;right:0;top:0}.f-list-filter .filter-inputs-main-basis-wrapper.list-filter-wrapper-show-btn .filter-search-btn .btn{margin-left:6px}.f-list-filter .filter-inputs-main-basis-wrapper.list-filter-wrapper-show-btn .filter-search-btn .btn:first-child{margin-left:0}.f-list-filter .filter-inputs-main-basis-wrapper .filter-inputs-main-basis-wrapper-inner{width:100%;overflow:auto}.f-list-filter .filter-inputs-main-basis-wrapper .filter-inputs-main-basis-wrapper-inner .filter-inputs-main-basis.justify-content-end{margin-left:auto}.f-list-filter.list-filter-padding{padding-right:45px}.f-list-filter.list-filter-autoWidth{padding-bottom:8px}.f-list-filter.list-filter-autoWidth.list-filter-paddingnone{padding-bottom:0}@media (min-width:768px){.f-list-filter .list-filter-type-1{position:static;padding-right:0}.f-list-filter .list-filter-type-2,.f-list-filter .list-filter-type-3{position:relative;padding-right:70px}}@media (max-width:767px){.f-list-filter .list-filter-type-1{position:relative;padding-right:70px}.f-list-filter .list-filter-type-1.list-filter-show-reset{padding-right:110px}.f-list-filter .list-filter-type-2,.f-list-filter .list-filter-type-3{position:relative;padding-right:70px}.f-list-filter .list-filter-type-2.list-filter-show-reset,.f-list-filter .list-filter-type-3.list-filter-show-reset{position:relative;padding-right:110px}}@media (min-width:1200px){.f-list-filter .list-filter-type-2,.f-list-filter .list-filter-type-3{position:static;padding-right:0}.f-list-filter .list-filter-type-4,.f-list-filter .list-filter-type-5{position:relative;padding-right:70px}}@media (max-width:767px){.f-list-filter .list-filter-type-4,.f-list-filter .list-filter-type-5{position:relative;padding-right:70px}.f-list-filter .list-filter-type-4.list-filter-show-reset,.f-list-filter .list-filter-type-5.list-filter-show-reset{position:relative;padding-right:110px}}@media (min-width:768px){.f-list-filter .list-filter-type-2.list-filter-show-reset,.f-list-filter .list-filter-type-3.list-filter-show-reset{position:relative;padding-right:110px}.f-list-filter .list-filter-type-4,.f-list-filter .list-filter-type-5{position:relative;padding-right:70px}.f-list-filter .list-filter-type-4.list-filter-show-reset,.f-list-filter .list-filter-type-5.list-filter-show-reset{position:relative;padding-right:110px}}@media (min-width:1690px){.f-list-filter .list-filter-type-4,.f-list-filter .list-filter-type-5{position:static;padding-right:0}}@media (min-width:1200px){.f-list-filter .list-filter-type-4.list-filter-show-reset,.f-list-filter .list-filter-type-5.list-filter-show-reset{position:relative;padding-right:110px}}.f-list-filter .list-filter-custom-type,.f-list-filter .list-filter-type-6{position:relative;padding-right:70px}.f-list-filter .list-filter-custom-type.list-filter-show-reset,.f-list-filter .list-filter-type-6.list-filter-show-reset{padding-right:110px}.f-list-filter .list-filter-padding-none{padding-right:0}.f-list-filter .filter-inputs-main{width:100%;overflow:hidden}.f-list-filter .filter-inputs-main .col-12{padding-left:0}.f-list-filter .filter-inputs-main.filter-inputs-main-padding{padding-right:70px;position:relative}.f-list-filter .filter-inputs-main .filter-input-list.filter-input-list-autolabel{padding-right:14px}.f-list-filter .filter-inputs-main .filter-input-list.filter-input-list-autolabel:last-child{padding-right:0}.f-list-filter .filter-inputs-main .filter-input-list.filter-input-list-checkbox{max-width:none;-webkit-box-flex:inherit;flex:inherit}@media (max-width:767px){.f-list-filter .filter-inputs-main .filter-search-btn.filter-search-btn-type-1{position:absolute;right:0;top:0}}@media (min-width:768px){.f-list-filter .filter-inputs-main .filter-search-btn.filter-search-btn-type-1{flex-basis:0;-webkit-box-flex:1;flex-grow:1;max-width:100%;position:static}.f-list-filter .filter-inputs-main .filter-search-btn.filter-search-btn-type-2,.f-list-filter .filter-inputs-main .filter-search-btn.filter-search-btn-type-3{position:absolute;right:0;top:0}}@media (max-width:767px){.f-list-filter .filter-inputs-main .filter-search-btn.filter-search-btn-type-2,.f-list-filter .filter-inputs-main .filter-search-btn.filter-search-btn-type-3{position:absolute;right:0;top:0}}@media (min-width:1200px){.f-list-filter .filter-inputs-main .filter-search-btn.filter-search-btn-type-2,.f-list-filter .filter-inputs-main .filter-search-btn.filter-search-btn-type-3{flex-basis:0;-webkit-box-flex:1;flex-grow:1;max-width:100%;position:static}.f-list-filter .filter-inputs-main .filter-search-btn.filter-search-btn-type-4,.f-list-filter .filter-inputs-main .filter-search-btn.filter-search-btn-type-5{position:absolute;right:0;top:0}}@media (max-width:767px){.f-list-filter .filter-inputs-main .filter-search-btn.filter-search-btn-type-4,.f-list-filter .filter-inputs-main .filter-search-btn.filter-search-btn-type-5{position:absolute;right:0;top:0}}@media (min-width:768px){.f-list-filter .filter-inputs-main .filter-search-btn.filter-search-btn-type-4,.f-list-filter .filter-inputs-main .filter-search-btn.filter-search-btn-type-5{position:absolute;right:0;top:0}}@media (min-width:1690px){.f-list-filter .filter-inputs-main .filter-search-btn.filter-search-btn-type-4,.f-list-filter .filter-inputs-main .filter-search-btn.filter-search-btn-type-5{flex-basis:0;-webkit-box-flex:1;flex-grow:1;max-width:100%;position:static}}.f-list-filter .filter-inputs-main .filter-search-btn.filter-search-btn-type-6,.f-list-filter .filter-inputs-main .filter-search-btn.filter-search-custom-type{position:absolute;right:0;top:0}.f-list-filter .filter-inputs-main .filter-search-btn .btn{margin-left:6px}.f-list-filter .filter-inputs-main .filter-search-btn .btn:first-child{margin-left:0}.f-list-filter .filter-inputs-main.filter-inputs-main-basis .filter-input-list{min-width:200px}.f-list-filter .filter-inputs-main.filter-inputs-main-basis .filter-input-list .filter-input-item .form-group{margin-bottom:0}.f-list-filter .filter-inputs-main.filter-inputs-main-basis .filter-input-list.filter-input-list-left{-webkit-box-flex:1;flex:1 1 auto;width:0}.f-list-filter .filter-inputs-main.filter-inputs-main-basis .filter-input-list.filter-input-list-expand{max-width:none}.f-list-filter .filter-inputs-main.filter-inputs-main-basis .filter-input-list-hasrange.filter-input-list-left,.f-list-filter .filter-inputs-main.filter-inputs-main-basis .filter-input-list-radio.filter-input-list-left{width:auto}.f-list-filter .filter-inputs-main.filter-inputs-main-basis.justify-content-end .filter-input-list:not(.filter-input-list-checkbox){-webkit-box-flex:1;flex:auto}.f-list-filter .filter-expand{right:0;top:0;width:24px;margin-left:21px;height:24px;line-height:24px;cursor:pointer}.f-list-filter .filter-expand.active{border-radius:2px}.f-list-filter .filter-expand .f-icon{display:block;line-height:24px;margin:0 auto;font-size:18px}.f-list-filter .filter-expand .filter-expand-tag{position:absolute;right:0;top:0;display:block;width:6px;height:6px;border-radius:50%}.f-list-filter .filter-inputs-extend{width:429px;right:0;top:34px;background-color:#fff;box-shadow:0 2px 3px 0 rgba(0,0,0,.15);z-index:900;padding:20px 0}.f-list-filter .filter-inputs-extend .filter-typelist-arrow{display:block;position:absolute;right:7px;top:-4px;width:8.48528137px;height:8.48528137px;background:0 0;border-style:solid;border-width:4.24264069px;box-shadow:-2px -2px 5px rgba(0,0,0,.08);-webkit-transform:translateX(-50%) rotate(45deg);transform:translateX(-50%) rotate(45deg);border-color:#fff transparent transparent #fff}.f-list-filter .filter-inputs-extend .filter-form-btns{margin-top:6px;padding:0 14px}.f-list-filter .filter-inputs-extend .filter-form-btns .btn{margin-left:6px}.f-list-filter .filter-inputs-extend .filter-form-btns .filter-form-btn-reset{position:relative;padding-right:10px;margin-right:4px}.f-list-filter .filter-inputs-extend .filter-form-btns .filter-form-btn-reset::after{content:'';position:absolute;right:0;top:50%;width:1px;height:16px;margin-top:-8px;background:#d9d9d9}.f-list-filter .filter-search-btn-reset{padding-left:4px;padding-right:4px;color:rgba(0,0,0,.65)}.f-list-filter .filter-input-list .form-group{display:block}.f-list-filter .farris-form-controls-inline .filter-input-list .form-group{display:-webkit-box;display:flex}.f-list-filter .filter-inputs-main-list .filter-input-item .farris-form-group{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row}.f-list-filter .filter-inputs-main-list .filter-list-item{padding-right:100px}.f-list-filter .filter-inputs-main-list .filter-list-item .filter-input-list{position:relative}.f-list-filter .filter-inputs-main-list .filter-list-item .filter-search-btn{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;position:absolute;top:50%;left:calc(100% + 20px);-webkit-transform:translateY(-50%);transform:translateY(-50%)}.filter-expand-simulate{opacity:0;display:inline-block;width:24px;height:24px;padding-left:21px}.filter-expand-simulate .f-icon{font-size:24px}"]
                    }] }
        ];
        /** @nocollapse */
        ListFilterComponent.ctorParameters = function () {
            return [
                { type: ListFilterService },
                { type: i0.ChangeDetectorRef },
                { type: QuerySolutionService },
                { type: ConvertorService },
                { type: i0.Renderer2 },
                { type: i0.Injector, decorators: [{ type: i0.Optional }] }
            ];
        };
        ListFilterComponent.propDecorators = {
            filterMainBasisRef: [{ type: i0.ViewChild, args: ['filterMainBasis',] }],
            floatPanel: [{ type: i0.ViewChild, args: ['floatPanel',] }],
            alLeft: [{ type: i0.Input }],
            autoWidth: [{ type: i0.Input }],
            liveSearch: [{ type: i0.Input }],
            autoLabel: [{ type: i0.Input }],
            disabled: [{ type: i0.Input }],
            filterClass: [{ type: i0.Input }],
            filterPaddingNone: [{ type: i0.Input }],
            filterType: [{ type: i0.Input }],
            defaultEmptyValueSearch: [{ type: i0.Input }],
            defaultValue: [{ type: i0.Input }],
            query: [{ type: i0.Output }],
            clear: [{ type: i0.Output }],
            searchChange: [{ type: i0.Output }],
            conditionsChange: [{ type: i0.Output }],
            isControlInline: [{ type: i0.Input }],
            filterList: [{ type: i0.Input }]
        };
        return ListFilterComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SolutionService = /** @class */ (function () {
        function SolutionService() {
            this.filterEditors = {};
        }
        /**
         * @return {?}
         */
        SolutionService.prototype.getGuid = /**
         * @return {?}
         */
            function () {
                return (this.s4() + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + this.s4() + this.s4());
            };
        /**
         * @private
         * @return {?}
         */
        SolutionService.prototype.s4 = /**
         * @private
         * @return {?}
         */
            function () {
                return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
            };
        /**
         * 根据字段获取Lable控件的Title
         * @param field
         */
        /**
         * 根据字段获取Lable控件的Title
         * @param {?} field
         * @return {?}
         */
        SolutionService.prototype.getConditionItemTitle = /**
         * 根据字段获取Lable控件的Title
         * @param {?} field
         * @return {?}
         */
            function (field) {
                if (field.id && field.id !== '') {
                    return field.fieldName;
                }
            };
        /**
         * 数组克隆 也可使用JSON.Parse(JSON.Stringify([input])),前提类结构中没有借口
         * @param input
         */
        /**
         * 数组克隆 也可使用JSON.Parse(JSON.Stringify([input])),前提类结构中没有借口
         * @param {?} input
         * @return {?}
         */
        SolutionService.prototype.arrayClone = /**
         * 数组克隆 也可使用JSON.Parse(JSON.Stringify([input])),前提类结构中没有借口
         * @param {?} input
         * @return {?}
         */
            function (input) {
                /** @type {?} */
                var result = new Array();
                if (input && input.length > 0) {
                    input.forEach(( /**
                     * @param {?} element
                     * @return {?}
                     */function (element) {
                        result.push(Object.assign({}, element));
                    }));
                }
                return result;
            };
        /**
         * @param {?} fieldName
         * @param {?} cmpIns
         * @return {?}
         */
        SolutionService.prototype.addFilterEditorInstance = /**
         * @param {?} fieldName
         * @param {?} cmpIns
         * @return {?}
         */
            function (fieldName, cmpIns) {
                this.filterEditors[fieldName] = cmpIns;
            };
        SolutionService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        SolutionService.ctorParameters = function () { return []; };
        return SolutionService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var InputComponent = /** @class */ (function () {
        function InputComponent(solutionService, element) {
            this.solutionService = solutionService;
            this.element = element;
            this.searchHandle = new i0.EventEmitter();
            /**
             * 判断是否是在扩展区域展示
             */
            this.extend = false;
            /**
             * 判断是否显示label
             */
            this.showlabel = true;
        }
        Object.defineProperty(InputComponent.prototype, "isExtend", {
            get: /**
             * @return {?}
             */ function () {
                return !this.extend && this.autoLabel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputComponent.prototype, "hidenLabel", {
            get: /**
             * @return {?}
             */ function () {
                return !this.showlabel;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        InputComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                //console.log(this.item);
                if (this.item) {
                    /** @type {?} */
                    var type = Object.prototype.toString.call(this.item.placeHolder);
                    if (type == '[object Undefined]') {
                        if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {
                            this.placeholder = this.item.control.placeholder;
                        }
                    }
                    else {
                        this.placeholder = this.item.placeHolder;
                    }
                }
                if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
                    this.extend = this.item.control.isExtend;
                    if (!this.extend) {
                        this.showlabel = this.item.control.showLabel;
                    }
                }
                this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);
                // (this.item.value as HelpValue).clear$.subscribe(() => {
                //     this.textValue = '';
                // });
            };
        /**
         * @return {?}
         */
        InputComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                // if(!this.extend){
                //     const El = this.element.nativeElement;
                //     const itemWidth = El.clientWidth;
                //     El.querySelector('.list-filter-input-item').style.width = itemWidth + 'px';
                //     El.querySelector('.input-item-btns').style.width = itemWidth + 100 + 'px';
                // }
            };
        /**
         * @return {?}
         */
        InputComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
            };
        // getConditionItemStyle(field: QueryCondition, controlType: any) {
        //     return this.solutionService.getConditionItemStyle(field,controlType);
        // }
        // getConditionItemStyle(field: QueryCondition, controlType: any) {
        //     return this.solutionService.getConditionItemStyle(field,controlType);
        // }
        /**
         * @param {?} field
         * @return {?}
         */
        InputComponent.prototype.getConditionItemTitle =
            // getConditionItemStyle(field: QueryCondition, controlType: any) {
            //     return this.solutionService.getConditionItemStyle(field,controlType);
            // }
            /**
             * @param {?} field
             * @return {?}
             */
            function (field) {
                return this.solutionService.getConditionItemTitle(field);
            };
        /**
         * @param {?} e
         * @return {?}
         */
        InputComponent.prototype.InputChanged = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                // let keycode = window.event ? e.keyCode : e.which;
                // if(keycode == 13){//回车键
                //     this.searchHandle.emit(this.item.value.value);
                // }
                if (this.disabled) {
                    return;
                }
                this.searchHandle.emit(this.item.value.value);
            };
        InputComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-filter-input',
                        template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <input class=\"form-control\" \r\n    type=\"text\" \r\n    [disabled]=\"disabled\"\r\n    [(ngModel)]=\"item.value.value\" \r\n    [placeholder]=\"placeholder\"\r\n    (keyup.enter)=\"InputChanged($event)\"\r\n    (blur)=\"InputChanged($event)\"\r\n    >\r\n</div>",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        InputComponent.ctorParameters = function () {
            return [
                { type: SolutionService },
                { type: i0.ElementRef }
            ];
        };
        InputComponent.propDecorators = {
            item: [{ type: i0.Input }],
            autoLabel: [{ type: i0.Input }],
            disabled: [{ type: i0.Input }],
            searchHandle: [{ type: i0.Output, args: ['searchHandle',] }],
            isExtend: [{ type: i0.HostBinding, args: ['class.filter-item-wrap',] }],
            hidenLabel: [{ type: i0.HostBinding, args: ['class.filter-item-hiddenlabel',] }]
        };
        return InputComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SearchComponent = /** @class */ (function () {
        function SearchComponent(solutionService) {
            this.solutionService = solutionService;
            this.searchHandle = new i0.EventEmitter();
            /**
             * 判断是否是在扩展区域展示
             */
            this.extend = false;
            /**
             * 判断是否显示label
             */
            this.showlabel = true;
            this.groupIcon = '<span class="k-icon k-i-search"></span>';
        }
        Object.defineProperty(SearchComponent.prototype, "isExtend", {
            get: /**
             * @return {?}
             */ function () {
                return !this.extend && this.autoLabel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SearchComponent.prototype, "hidenLabel", {
            get: /**
             * @return {?}
             */ function () {
                return !this.showlabel;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        SearchComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (this.item) {
                    /** @type {?} */
                    var type = Object.prototype.toString.call(this.item.placeHolder);
                    if (type == '[object Undefined]') {
                        if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {
                            this.placeholder = this.item.control.placeholder;
                        }
                    }
                    else {
                        this.placeholder = this.item.placeHolder;
                    }
                }
                if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
                    this.extend = this.item.control.isExtend;
                    if (!this.extend) {
                        this.showlabel = this.item.control.showLabel;
                    }
                }
                this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        SearchComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
            };
        // getConditionItemStyle(field: QueryCondition, controlType: any) {
        //     return this.solutionService.getConditionItemStyle(field,controlType);
        // }
        // getConditionItemStyle(field: QueryCondition, controlType: any) {
        //     return this.solutionService.getConditionItemStyle(field,controlType);
        // }
        /**
         * @param {?} field
         * @return {?}
         */
        SearchComponent.prototype.getConditionItemTitle =
            // getConditionItemStyle(field: QueryCondition, controlType: any) {
            //     return this.solutionService.getConditionItemStyle(field,controlType);
            // }
            /**
             * @param {?} field
             * @return {?}
             */
            function (field) {
                return this.solutionService.getConditionItemTitle(field);
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        SearchComponent.prototype.onSearch = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if (this.disabled) {
                    return;
                }
                this.searchHandle.emit($event);
            };
        SearchComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-filter-search',
                        template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <input-group [groupText]=\"groupIcon\" [readonly]=\"disabled\" [(ngModel)]=\"item.value.value\" \r\n    (clear)=\"onSearch($event)\" (enterHandle)=\"onSearch($event)\" \r\n    (clickHandle)=\"onSearch($event)\"  [placeholder]=\"placeholder\"></input-group>\r\n</div>"
                    }] }
        ];
        /** @nocollapse */
        SearchComponent.ctorParameters = function () {
            return [
                { type: SolutionService }
            ];
        };
        SearchComponent.propDecorators = {
            item: [{ type: i0.Input }],
            autoLabel: [{ type: i0.Input }],
            disabled: [{ type: i0.Input }],
            searchHandle: [{ type: i0.Output, args: ['searchHandle',] }],
            isExtend: [{ type: i0.HostBinding, args: ['class.filter-item-wrap',] }],
            hidenLabel: [{ type: i0.HostBinding, args: ['class.filter-item-hiddenlabel',] }]
        };
        return SearchComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var HelpComponent = /** @class */ (function () {
        function HelpComponent(solutionService) {
            var _this = this;
            this.solutionService = solutionService;
            this.searchHandle = new i0.EventEmitter();
            /**
             * 判断是否是在扩展区域展示
             */
            this.extend = false;
            /**
             * 判断是否显示label
             */
            this.showlabel = true;
            this.editable = false;
            /**
             * 多字段查询
             */
            this.enableMultiFieldSearch = false;
            /**
             * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
             */
            this.changeFields = [];
            this.onSearch = ( /**
             * @return {?}
             */function () {
                if (_this.disabled) {
                    return;
                }
                _this.searchHandle.emit();
                return rxjs.of(true);
            });
        }
        Object.defineProperty(HelpComponent.prototype, "isExtend", {
            get: /**
             * @return {?}
             */ function () {
                return !this.extend && this.autoLabel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HelpComponent.prototype, "hidenLabel", {
            get: /**
             * @return {?}
             */ function () {
                return !this.showlabel;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        HelpComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.item) {
                    /** @type {?} */
                    var type = Object.prototype.toString.call(this.item.placeHolder);
                    if (type == '[object Undefined]') {
                        if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {
                            this.placeholder = this.item.control.placeholder;
                        }
                    }
                    else {
                        this.placeholder = this.item.placeHolder;
                    }
                }
                this.getHelpBindingInfo();
                if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
                    this.extend = this.item.control.isExtend;
                    if (!this.extend) {
                        this.showlabel = this.item.control.showLabel;
                    }
                }
                this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);
                (( /** @type {?} */(this.item.value))).clear$.subscribe(( /**
                 * @return {?}
                 */function () {
                    _this.textValue = '';
                }));
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        HelpComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                var _this = this;
                this.getHelpBindingInfo();
                if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
                    /** @type {?} */
                    var isChange = changes['changeFields'].currentValue.some(( /**
                     * @param {?} field
                     * @return {?}
                     */function (field) { return field == _this.item.fieldCode; }));
                    if (isChange) {
                        this.textValue = (( /** @type {?} */(this.item.value))).textValue;
                    }
                }
            };
        /**
         * @param {?} selectedItem
         * @return {?}
         */
        HelpComponent.prototype.selectedDataHandler = /**
         * @param {?} selectedItem
         * @return {?}
         */
            function (selectedItem) {
                // console.log(selectedItem);
                //    let mapFields=new Function('return'+(this.item.control as HelpContol).mapFields);
                //    let mapFieldsKeys=Object.keys(mapFields());
                //    (this.item.value as HelpValue).value=new Object();
                //    mapFieldsKeys.forEach(mapFeildKey => {
                //     (this.item.value as HelpValue).value[mapFeildKey]=selectedItem[mapFeildKey];
                //    });
                //    (this.item.value as HelpValue).valueField=(this.item.control as HelpContol).valueField;
                //    let textField=(this.item.control as HelpContol).textField;
                //    this.textValue=(this.item.value as HelpValue).value[textField];
                // console.log(selectedItem);
                //    let mapFields=new Function('return'+(this.item.control as HelpContol).mapFields);
                //    let mapFieldsKeys=Object.keys(mapFields());
                //    (this.item.value as HelpValue).value=new Object();
                //    mapFieldsKeys.forEach(mapFeildKey => {
                //     (this.item.value as HelpValue).value[mapFeildKey]=selectedItem[mapFeildKey];
                //    });
                //    (this.item.value as HelpValue).valueField=(this.item.control as HelpContol).valueField;
                //    let textField=(this.item.control as HelpContol).textField;
                //    this.textValue=(this.item.value as HelpValue).value[textField];
                /** @type {?} */
                var helpValue = (( /** @type {?} */(this.item.value)));
                helpValue.value = this.singleSelect ? [selectedItem] : selectedItem; // 单选返回对象，多选返回数组
                helpValue.valueField = this.valueField;
                helpValue.textValue = helpValue.getTextValue(this.textField);
                this.textValue = helpValue.textValue;
                // this.conditionChange.emit();
                if (this.disabled) {
                    return;
                }
                this.searchHandle.emit();
            };
        /**
         * @return {?}
         */
        HelpComponent.prototype.getHelpBindingInfo = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.item && this.item.control && this.item.control.getControlType() == ControlType.Help) {
                    /** @type {?} */
                    var helpList_1 = (( /** @type {?} */(this.item.control)));
                    this.uri = helpList_1.uri;
                    this.textField = helpList_1.textField;
                    this.valueField = helpList_1.valueField;
                    this.idField = helpList_1.idField;
                    this.mapFields = helpList_1.mapFields;
                    this.context = helpList_1.context;
                    if (helpList_1.preEventCmd) {
                        this.preEventCmd = ( /**
                         * @param {?} e
                         * @return {?}
                         */function (e) {
                            e['hostRef'] = _this.hostRef;
                            return helpList_1.preEventCmd(e);
                        });
                    }
                    if (helpList_1.postEventCmd) {
                        this.postEventCmd = ( /**
                         * @param {?} e
                         * @return {?}
                         */function (e) {
                            e['hostRef'] = _this.hostRef;
                            return helpList_1.postEventCmd(e);
                        });
                    }
                    this.singleSelect = helpList_1.singleSelect;
                    this.enableFullTree = helpList_1.enableFullTree;
                    this.loadTreeDataType = helpList_1.loadTreeDataType;
                    this.expandLevel = helpList_1.expandLevel;
                    this.enableCascade = helpList_1.enableCascade;
                    this.helpId = helpList_1.helpId;
                    this.title = helpList_1.title;
                    /** @type {?} */
                    var helpValue = (( /** @type {?} */(this.item.value)));
                    this.clearFields = helpList_1.clearFields;
                    // if (helpValue && helpValue.value) {
                    //     // this.textValue = (this.item.value as HelpValue).value[this.textField];
                    //     this.textValue = HelpValue.getPropValue(helpValue.value, this.textField.split('.'));
                    // }
                    this.displayType = helpList_1.displayType;
                    if (helpValue.textValue == 'help-text-value-null') { // 旧数据兼容
                        this.textValue = helpValue.getTextValue(this.textField);
                    }
                    else {
                        this.textValue = helpValue.textValue;
                    }
                    this.editable = !!helpList_1.editable;
                    this.enableMultiFieldSearch = !!helpList_1.enableMultiFieldSearch;
                }
            };
        // getConditionItemStyle(field: QueryCondition, controlType: any) {
        //     return this.solutionService.getConditionItemStyle(field,controlType);
        // }
        // getConditionItemStyle(field: QueryCondition, controlType: any) {
        //     return this.solutionService.getConditionItemStyle(field,controlType);
        // }
        /**
         * @param {?} field
         * @return {?}
         */
        HelpComponent.prototype.getConditionItemTitle =
            // getConditionItemStyle(field: QueryCondition, controlType: any) {
            //     return this.solutionService.getConditionItemStyle(field,controlType);
            // }
            /**
             * @param {?} field
             * @return {?}
             */
            function (field) {
                return this.solutionService.getConditionItemTitle(field);
            };
        /**
         * @param {?} data
         * @return {?}
         */
        HelpComponent.prototype.clearData = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                (( /** @type {?} */(this.item.value))).clearValue();
                this.searchHandle.emit();
            };
        HelpComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-filter-help',
                        template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <farris-lookup-grid\r\n        id=\"{{instanceId}}\"\r\n        [uri]=\"uri\"\r\n        [title]=\"title\"\r\n        [idField]=\"idField\" \r\n        [textField]=\"textField\" \r\n        [valueField]=\"valueField\" \r\n        [(ngModel)]=\"textValue\"\r\n        [displayType]=\"displayType\"\r\n        [editable]=\"editable\"\r\n        [readonly]=\"disabled\"\r\n        (clear)=\"clearData($event)\"\r\n        (selectedData)=\"selectedDataHandler($event)\"\r\n        [placeholder]=\"placeholder\"\r\n        [mapFields]=\"mapFields\"\r\n        [dictPicking]=\"preEventCmd\"\r\n        [dictPicked]=\"postEventCmd\"\r\n        [context]=\"context\"\r\n        [enableFullTree]=\"enableFullTree\"\r\n        [loadTreeDataType]=\"loadTreeDataType\"\r\n        [singleSelect]=\"singleSelect\"\r\n        [expandLevel]=\"expandLevel\"\r\n        [enableCascade]=\"enableCascade\"\r\n        [clear-fields]=\"clearFields\"\r\n        [useFavorite]=\"true\"\r\n        [enableMultiFieldSearch]=\"enableMultiFieldSearch\"\r\n    >\r\n    </farris-lookup-grid>\r\n\r\n    <!-- [dictPicked]=\"onSearch\" -->\r\n    <!-- (selectedData)=\"selectedDataHandler($event)\" -->\r\n</div>"
                        // providers: [{ provide: ServerSideToken, useClass: LookupHttpBeQueryService }]
                    }] }
        ];
        /** @nocollapse */
        HelpComponent.ctorParameters = function () {
            return [
                { type: SolutionService }
            ];
        };
        HelpComponent.propDecorators = {
            item: [{ type: i0.Input }],
            autoLabel: [{ type: i0.Input }],
            disabled: [{ type: i0.Input }],
            hostRef: [{ type: i0.Input }],
            instanceId: [{ type: i0.Input }],
            searchHandle: [{ type: i0.Output }],
            isExtend: [{ type: i0.HostBinding, args: ['class.filter-item-wrap',] }],
            hidenLabel: [{ type: i0.HostBinding, args: ['class.filter-item-hiddenlabel',] }],
            changeFields: [{ type: i0.Input }]
        };
        return HelpComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DateComponent = /** @class */ (function () {
        function DateComponent(solutionService) {
            this.solutionService = solutionService;
            this.searchHandle = new i0.EventEmitter();
            /**
             * 判断是否是在扩展区域展示
             */
            this.extend = false;
            /**
             * 判断是否显示label
             */
            this.showlabel = true;
            /**
             * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
             */
            this.changeFields = [];
        }
        Object.defineProperty(DateComponent.prototype, "isExtend", {
            get: /**
             * @return {?}
             */ function () {
                return !this.extend && this.autoLabel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateComponent.prototype, "hidenLabel", {
            get: /**
             * @return {?}
             */ function () {
                return !this.showlabel;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        DateComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // console.log(this.showType);
                this.initDate();
                if (this.item) {
                    /** @type {?} */
                    var type = Object.prototype.toString.call(this.item.placeHolder);
                    if (type == '[object Undefined]') {
                        if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {
                            this.placeholder = this.item.control.placeholder;
                        }
                    }
                    else {
                        this.placeholder = this.item.placeHolder;
                    }
                }
                if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
                    this.extend = this.item.control.isExtend;
                    if (!this.extend) {
                        this.showlabel = this.item.control.showLabel;
                    }
                }
                this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);
                (( /** @type {?} */(this.item.value))).clear$.subscribe(( /**
                 * @return {?}
                 */function () {
                    _this.date = '';
                }));
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        DateComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                var _this = this;
                this.initDate();
                if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
                    /** @type {?} */
                    var isChange = changes['changeFields'].currentValue.some(( /**
                     * @param {?} field
                     * @return {?}
                     */function (field) { return field == _this.item.fieldCode; }));
                    if (isChange) {
                        this.date = this.item.value.getOriginalValue();
                    }
                }
            };
        /**
         * @return {?}
         */
        DateComponent.prototype.initDate = /**
         * @return {?}
         */
            function () {
                // if(this.item && this.item.value.value){
                //     //this.time = this.getDate((this.item.value as DateValue).value);
                //     this.time = (this.item.value as DateValue).value;
                // }
                if (this.item && this.item.value
                    && (( /** @type {?} */(this.item.value))).value) {
                    this.date = this.item.value.getOriginalValue();
                }
                else {
                    this.date = undefined;
                }
                /** @type {?} */
                var format = this.showType == '2' ? 'yyyy-MM' : (this.showType == '3' ? 'yyyy' : 'yyyy-MM-dd');
                this.returnFormat = format;
                this.dateFormat = this.item.control.format ? this.item.control.format : format;
                // console.log('格式',this.dateFormat);
            };
        // getDate(dateString:string):Date{
        //     let arr1:Array<any> = dateString.split(" "); 
        //     let sdate = arr1[0].split('-'); 
        //     let date = new Date(sdate[0], sdate[1]-1, sdate[2]); 
        //     return date;
        // }
        // getDate(dateString:string):Date{
        //     let arr1:Array<any> = dateString.split(" "); 
        //     let sdate = arr1[0].split('-'); 
        //     let date = new Date(sdate[0], sdate[1]-1, sdate[2]); 
        //     return date;
        // }
        /**
         * @param {?} event
         * @return {?}
         */
        DateComponent.prototype.onDateChange =
            // getDate(dateString:string):Date{
            //     let arr1:Array<any> = dateString.split(" "); 
            //     let sdate = arr1[0].split('-'); 
            //     let date = new Date(sdate[0], sdate[1]-1, sdate[2]); 
            //     return date;
            // }
            /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                // console.log(event);
                if (event) {
                    (( /** @type {?} */(this.item.value))).value = event.returnFormatted;
                }
                else {
                    (( /** @type {?} */(this.item.value))).value = '';
                    // this.item.value = new DateValue();
                }
                if (this.disabled) {
                    return;
                }
                this.searchHandle.emit(event);
            };
        // getConditionItemStyle(field: QueryCondition, controlType: any) {
        //     return this.solutionService.getConditionItemStyle(field,controlType);
        // }
        // getConditionItemStyle(field: QueryCondition, controlType: any) {
        //     return this.solutionService.getConditionItemStyle(field,controlType);
        // }
        /**
         * @param {?} field
         * @return {?}
         */
        DateComponent.prototype.getConditionItemTitle =
            // getConditionItemStyle(field: QueryCondition, controlType: any) {
            //     return this.solutionService.getConditionItemStyle(field,controlType);
            // }
            /**
             * @param {?} field
             * @return {?}
             */
            function (field) {
                return this.solutionService.getConditionItemTitle(field);
            };
        DateComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-filter-date',
                        template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <farris-datepicker [(ngModel)]=\"date\" [returnFormat]=\"showType == '2'? 'yyyy-MM': (showType == '3'? 'yyyy':'yyyy-MM-dd')\" [editable]=\"false\" [dateFormat]=\"dateFormat\" [readonly]=\"disabled\" (valueChange)=\"onDateChange($event)\" [showType]=\"showType\" [placeholder]=\"placeholder\"></farris-datepicker>\r\n    <!-- <farris-datepicker [ngModel]=\"date\"  (ngModelChange)=\"onDateChange($event)\"></farris-datepicker> -->\r\n</div>"
                    }] }
        ];
        /** @nocollapse */
        DateComponent.ctorParameters = function () {
            return [
                { type: SolutionService }
            ];
        };
        DateComponent.propDecorators = {
            item: [{ type: i0.Input }],
            autoLabel: [{ type: i0.Input }],
            disabled: [{ type: i0.Input }],
            showType: [{ type: i0.Input }],
            searchHandle: [{ type: i0.Output }],
            isExtend: [{ type: i0.HostBinding, args: ['class.filter-item-wrap',] }],
            hidenLabel: [{ type: i0.HostBinding, args: ['class.filter-item-hiddenlabel',] }],
            changeFields: [{ type: i0.Input }]
        };
        return DateComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DropDownComponent = /** @class */ (function () {
        function DropDownComponent(solutionService) {
            this.solutionService = solutionService;
            this.enableClear = true;
            this.searchHandle = new i0.EventEmitter();
            this.dropDownListDataSource = new Array();
            /**
             * 判断是否是在扩展区域展示
             */
            this.extend = false;
            /**
             * 判断是否显示label
             */
            this.showlabel = true;
            /**
             * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
             */
            this.changeFields = [];
        }
        Object.defineProperty(DropDownComponent.prototype, "isExtend", {
            get: /**
             * @return {?}
             */ function () {
                return !this.extend && this.autoLabel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DropDownComponent.prototype, "hidenLabel", {
            get: /**
             * @return {?}
             */ function () {
                return !this.showlabel;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        DropDownComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // this.getDataSource();
                // const initialValue = this.item.value as DropDownListValue;
                // initialValue.value && (this.selectedItemId = initialValue.value.getEnumValue());
                if (this.item) {
                    /** @type {?} */
                    var type = Object.prototype.toString.call(this.item.placeHolder);
                    if (type == '[object Undefined]') {
                        if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {
                            this.placeholder = this.item.control.placeholder;
                        }
                    }
                    else {
                        this.placeholder = this.item.placeHolder;
                    }
                }
                this.getDataSource();
                /** @type {?} */
                var initialValue = ( /** @type {?} */(this.item.value));
                initialValue.value && (this.selectedItemId = initialValue.value);
                if (this.item && this.item.control) {
                    if (this.item.control.hasOwnProperty('isExtend')) {
                        this.extend = this.item.control.isExtend;
                        if (!this.extend) {
                            this.showlabel = this.item.control.showLabel;
                        }
                    }
                }
                this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);
                (( /** @type {?} */(this.item.value))).clear$.subscribe(( /**
                 * @return {?}
                 */function () {
                    _this.selectedItemId = '';
                }));
                // this.testId = this.solutionService.getGuid();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        DropDownComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                var _this = this;
                this.getDataSource();
                if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
                    /** @type {?} */
                    var isChange = changes['changeFields'].currentValue.some(( /**
                     * @param {?} field
                     * @return {?}
                     */function (field) { return field == _this.item.fieldCode; }));
                    if (isChange) {
                        this.selectedItemId = (( /** @type {?} */(this.item.value))).value;
                    }
                }
                //console.log(this.dropDownListDataSource);
            };
        /**
         * @return {?}
         */
        DropDownComponent.prototype.getDataSource = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.item && this.item.value
                    && this.item.control && this.item.control.getControlType() == ControlType.DropDown) {
                    /** @type {?} */
                    var dropDownList = (( /** @type {?} */(this.item.control)));
                    if (dropDownList.valueType == EnumType.BoolType) {
                        this.dropDownListDataSource = Array();
                        if (dropDownList.enumValues && dropDownList.enumValues.length > 0) {
                            dropDownList.enumValues.forEach(( /**
                             * @param {?} element
                             * @return {?}
                             */function (element) {
                                _this.dropDownListDataSource.push(Object.assign(new EnumBoolValue(), element));
                            }));
                        }
                    }
                    else if (dropDownList.valueType == EnumType.IntType) {
                        this.dropDownListDataSource = Array();
                        if (dropDownList.enumValues && dropDownList.enumValues.length > 0) {
                            dropDownList.enumValues.forEach(( /**
                             * @param {?} element
                             * @return {?}
                             */function (element) {
                                _this.dropDownListDataSource.push(Object.assign(new EnumIntegerValue(), element));
                            }));
                        }
                    }
                    else if (dropDownList.valueType == EnumType.StringType) {
                        this.dropDownListDataSource = Array();
                        if (dropDownList.enumValues && dropDownList.enumValues.length > 0) {
                            dropDownList.enumValues.forEach(( /**
                             * @param {?} element
                             * @return {?}
                             */function (element) {
                                _this.dropDownListDataSource.push(Object.assign(new EnumStringValue(), element));
                            }));
                        }
                    }
                }
            };
        // getConditionItemStyle(field: QueryCondition, controlType: any) {
        //     return this.solutionService.getConditionItemStyle(field,controlType);
        // }
        // getConditionItemStyle(field: QueryCondition, controlType: any) {
        //     return this.solutionService.getConditionItemStyle(field,controlType);
        // }
        /**
         * @param {?} field
         * @return {?}
         */
        DropDownComponent.prototype.getConditionItemTitle =
            // getConditionItemStyle(field: QueryCondition, controlType: any) {
            //     return this.solutionService.getConditionItemStyle(field,controlType);
            // }
            /**
             * @param {?} field
             * @return {?}
             */
            function (field) {
                return this.solutionService.getConditionItemTitle(field);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        DropDownComponent.prototype.onSearch = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (event) {
                    (( /** @type {?} */(this.item.value))).value = event.data.value;
                }
                else {
                    (( /** @type {?} */(this.item.value))).value = '';
                }
                if (this.disabled) {
                    return;
                }
                this.searchHandle.emit();
            };
        /**
         * @param {?} event
         * @return {?}
         */
        DropDownComponent.prototype.onClear = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                (( /** @type {?} */(this.item.value))).value = '';
                this.searchHandle.emit();
            };
        DropDownComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-filter-dropdown',
                        template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <farris-combo-list\r\n        [idField]=\"'value'\"\r\n        [textField]=\"'name'\"\r\n        [data]=\"dropDownListDataSource\"\r\n        [(ngModel)]=\"selectedItemId\"\r\n        [readonly]=\"disabled\"\r\n        [editable]=\"false\"\r\n        (selectChange)=\"onSearch($event)\"\r\n        (clear)=\"onClear($event)\"\r\n        [placeholder]=\"placeholder\"\r\n        [enableClear]=\"enableClear\"\r\n    ></farris-combo-list>\r\n\r\n</div>\r\n\r\n<!-- (valueChange)=\"onSearch($event)\" -->"
                    }] }
        ];
        /** @nocollapse */
        DropDownComponent.ctorParameters = function () {
            return [
                { type: SolutionService }
            ];
        };
        DropDownComponent.propDecorators = {
            item: [{ type: i0.Input }],
            autoLabel: [{ type: i0.Input }],
            disabled: [{ type: i0.Input }],
            enableClear: [{ type: i0.Input }],
            searchHandle: [{ type: i0.Output, args: ['searchHandle',] }],
            isExtend: [{ type: i0.HostBinding, args: ['class.filter-item-wrap',] }],
            hidenLabel: [{ type: i0.HostBinding, args: ['class.filter-item-hiddenlabel',] }],
            changeFields: [{ type: i0.Input }]
        };
        return DropDownComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // import { NumberRangeValue } from '../../entity/conditionvalue/numberrangevaue';
    var NumberComponent = /** @class */ (function () {
        function NumberComponent(solutionService, element) {
            this.solutionService = solutionService;
            this.element = element;
            this.searchHandle = new i0.EventEmitter();
            /**
             * 判断是否是在扩展区域展示
             */
            this.extend = false;
            /**
             * 判断是否显示label
             */
            this.showlabel = true;
            this.canNull = true;
            /**
             * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
             */
            this.changeFields = [];
        }
        Object.defineProperty(NumberComponent.prototype, "isExtend", {
            get: /**
             * @return {?}
             */ function () {
                return !this.extend && this.autoLabel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NumberComponent.prototype, "hidenLabel", {
            get: /**
             * @return {?}
             */ function () {
                return !this.showlabel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NumberComponent.prototype, "item", {
            get: /**
             * @return {?}
             */ function () {
                return this._item;
            },
            set: /**
             * @param {?} nr
             * @return {?}
             */ function (nr) {
                this._item = nr;
                this.precision = nr.control.precision;
                this.bigNumber = nr.control.bigNumber;
                this.constructMultiFieldNumberRange(( /** @type {?} */(nr.value)));
                if (this._item && this._item.control && this._item.control.hasOwnProperty('isExtend')) {
                    this.extend = this._item.control.isExtend;
                    if (!this.extend) {
                        this.showlabel = this._item.control.showLabel;
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NumberComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.item) {
                    /** @type {?} */
                    var type = Object.prototype.toString.call(this.item.placeHolder);
                    if (type == '[object Undefined]') {
                        if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {
                            this.placeholder = this.item.control.placeholder;
                        }
                    }
                    else {
                        this.placeholder = this.item.placeHolder;
                    }
                    /** @type {?} */
                    var beginplac = Object.prototype.toString.call(this.item.beginPlaceHolder);
                    if (beginplac == '[object Undefined]') {
                        if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {
                            this.beginPlaceHolder = this.item.control.beginPlaceHolder;
                        }
                    }
                    else {
                        this.beginPlaceHolder = this.item.beginPlaceHolder;
                    }
                    /** @type {?} */
                    var endplac = Object.prototype.toString.call(this.item.beginPlaceHolder);
                    if (endplac == '[object Undefined]') {
                        if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {
                            this.endPlaceHolder = this.item.control.endPlaceHolder;
                        }
                    }
                    else {
                        this.endPlaceHolder = this.item.endPlaceHolder;
                    }
                    if (!this.bigNumber) {
                        this.min = -2147483648;
                        this.max = 2147483647;
                    }
                }
                (( /** @type {?} */(this.item.value))).clear$.subscribe(( /**
                 * @return {?}
                 */function () {
                    _this.beginValue = '';
                    _this.endValue = '';
                }));
                this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        NumberComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                var _this = this;
                if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
                    /** @type {?} */
                    var isChange = changes['changeFields'].currentValue.some(( /**
                     * @param {?} field
                     * @return {?}
                     */function (field) { return field == _this.item.fieldCode; }));
                    if (isChange) {
                        this.constructMultiFieldNumberRange(( /** @type {?} */(this.item.value)));
                    }
                }
            };
        /**
         * @return {?}
         */
        NumberComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                // if(!this.extend){
                //     const El = this.element.nativeElement;
                //     const itemWidth = El.clientWidth;
                //     El.querySelector('.list-filter-number-item').style.width = itemWidth + 'px';
                //     El.querySelector('.number-item-btns').style.width = itemWidth + 100 + 'px';
                // }
            };
        // getConditionItemStyle(field: QueryCondition, controlType: any) {
        //     return this.solutionService.getConditionItemStyle(field,controlType);
        // }
        // getConditionItemStyle(field: QueryCondition, controlType: any) {
        //     return this.solutionService.getConditionItemStyle(field,controlType);
        // }
        /**
         * @param {?} field
         * @return {?}
         */
        NumberComponent.prototype.getConditionItemTitle =
            // getConditionItemStyle(field: QueryCondition, controlType: any) {
            //     return this.solutionService.getConditionItemStyle(field,controlType);
            // }
            /**
             * @param {?} field
             * @return {?}
             */
            function (field) {
                return this.solutionService.getConditionItemTitle(field);
            };
        // constructNumberRange(value: NumberRangeValue): string{
        //     return "a~b".replace(/a/,value.startValue?value.startValue.toString().trim():"").replace(/b/,value.endValue?value.endValue.toString().trim():"");
        // }
        // constructNumberRange(value: NumberRangeValue): string{
        //     return "a~b".replace(/a/,value.startValue?value.startValue.toString().trim():"").replace(/b/,value.endValue?value.endValue.toString().trim():"");
        // }
        /**
         * @param {?} value
         * @return {?}
         */
        NumberComponent.prototype.constructMultiFieldNumberRange =
            // constructNumberRange(value: NumberRangeValue): string{
            //     return "a~b".replace(/a/,value.startValue?value.startValue.toString().trim():"").replace(/b/,value.endValue?value.endValue.toString().trim():"");
            // }
            /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                // this.beginValue = value && value.startValue ? value.startValue.toString().trim() : '';
                // this.endValue = value && value.endValue ? value.endValue.toString().trim() : '';
                this.beginValue = value.startValue == null ? null : value.startValue;
                this.endValue = value.endValue == null ? null : value.endValue;
            };
        /**
         * @param {?} event
         * @return {?}
         */
        NumberComponent.prototype.numberChange = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (event) {
                    // const dataArray = event.split("~");
                    // console.log(dataArray);
                    // this._item.value = (new NumberRangeValueConvertor).initFromObject({startValue: dataArray[0], endValue: dataArray[1]});
                    /** @type {?} */
                    var dataArray = event.split("~");
                    this.item.value.startValue = dataArray[0] ? dataArray[0] : null;
                    this.item.value.endValue = dataArray[1] ? dataArray[1] : null;
                }
                else {
                    this._item.value.startValue = null;
                    this._item.value.endValue = null;
                }
                // const dataArray = event.split("~");
                // this._item.value = (new NumberRangeValueConvertor).initFromObject({startValue: dataArray[0], endValue: dataArray[1]});
                if (this.disabled) {
                    return;
                }
                this.searchHandle.emit();
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        NumberComponent.prototype.beginValueChange = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.beginValue = $event;
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        NumberComponent.prototype.endValueChange = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.endValue = $event;
            };
        NumberComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-filter-number',
                        template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap d-flex\">\r\n    <farris-number-range class=\"f-utils-fill-flex-row\" [canNull]=\"canNull\" [disabled]=\"disabled\" [beginValue]=\"beginValue\" [endValue]=\"endValue\" \r\n    (beginValueChange)=\"beginValueChange($event)\" (endValueChange)=\"endValueChange($event)\" (valueChange)=\"numberChange($event)\" \r\n    [min]=\"min\" [max]=\"max\"\r\n    [beginPlaceHolder]=\"beginPlaceHolder\" [endPlaceHolder]=\"endPlaceHolder\" [placeholder]=\"placeholder\" [precision]=\"precision\" [bigNumber]=\"bigNumber\"></farris-number-range>\r\n</div>",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        NumberComponent.ctorParameters = function () {
            return [
                { type: SolutionService },
                { type: i0.ElementRef }
            ];
        };
        NumberComponent.propDecorators = {
            autoLabel: [{ type: i0.Input }],
            disabled: [{ type: i0.Input }],
            searchHandle: [{ type: i0.Output, args: ['searchHandle',] }],
            isExtend: [{ type: i0.HostBinding, args: ['class.filter-item-wrap',] }],
            hidenLabel: [{ type: i0.HostBinding, args: ['class.filter-item-hiddenlabel',] }],
            item: [{ type: i0.Input }],
            changeFields: [{ type: i0.Input }]
        };
        return NumberComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * checboxgroup类型
     */
    var /**
     * checboxgroup类型
     */ CheckboxValue = /** @class */ (function () {
        function CheckboxValue() {
        }
        /**
         * @return {?}
         */
        CheckboxValue.prototype.getEnumValueName = /**
         * @return {?}
         */
            function () {
                return this.name;
            };
        /**
         * @return {?}
         */
        CheckboxValue.prototype.getEnumValue = /**
         * @return {?}
         */
            function () {
                return this.value;
            };
        return CheckboxValue;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FilterCheckboxComponent = /** @class */ (function () {
        function FilterCheckboxComponent(solutionService) {
            this.solutionService = solutionService;
            this.searchHandle = new i0.EventEmitter();
            /**
             * 判断是否是在扩展区域展示
             */
            this.extend = false;
            /**
             * 判断是否显示label
             */
            this.showlabel = true;
            this.selectCheck = [];
            this.cla = true;
            this.checkboxDataSource = new Array();
            /**
             * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
             */
            this.changeFields = [];
        }
        Object.defineProperty(FilterCheckboxComponent.prototype, "isExtend", {
            get: /**
             * @return {?}
             */ function () {
                return !this.extend && this.autoLabel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FilterCheckboxComponent.prototype, "isCheckExtend", {
            get: /**
             * @return {?}
             */ function () {
                return !this.extend;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FilterCheckboxComponent.prototype, "hidenLabel", {
            get: /**
             * @return {?}
             */ function () {
                return !this.showlabel;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        FilterCheckboxComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.getDataSource();
                this.checkValue = this.item.value.getOriginalValue();
                if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
                    this.extend = this.item.control.isExtend;
                    if (!this.extend) {
                        this.showlabel = this.item.control.showLabel;
                    }
                }
                this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);
                (( /** @type {?} */(this.item.value))).clear$.subscribe(( /**
                 * @return {?}
                 */function () {
                    _this.checkValue = [];
                }));
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        FilterCheckboxComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                var _this = this;
                this.getDataSource();
                if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
                    /** @type {?} */
                    var isChange = changes['changeFields'].currentValue.some(( /**
                     * @param {?} field
                     * @return {?}
                     */function (field) { return field == _this.item.fieldCode; }));
                    if (isChange) {
                        this.checkValue = (( /** @type {?} */(this.item.value))).getOriginalValue();
                    }
                }
            };
        /**
         * @return {?}
         */
        FilterCheckboxComponent.prototype.getDataSource = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.item && this.item.control && this.item.control.getControlType() == ControlType.CheckboxGroup) {
                    /** @type {?} */
                    var checkboxList = (( /** @type {?} */(this.item.control)));
                    this.checkboxDataSource = Array();
                    if (checkboxList.enumValues && checkboxList.enumValues.length > 0) {
                        checkboxList.enumValues.forEach(( /**
                         * @param {?} element
                         * @return {?}
                         */function (element) {
                            _this.checkboxDataSource.push(Object.assign(new CheckboxValue(), element));
                        }));
                    }
                }
                // if(this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')){
                //     this.extend = this.item.control.isExtend;
                // }
            };
        // getConditionItemStyle(field: QueryCondition, controlType: any) {
        //     return this.solutionService.getConditionItemStyle(field,controlType);
        // }
        // getConditionItemStyle(field: QueryCondition, controlType: any) {
        //     return this.solutionService.getConditionItemStyle(field,controlType);
        // }
        /**
         * @param {?} field
         * @return {?}
         */
        FilterCheckboxComponent.prototype.getConditionItemTitle =
            // getConditionItemStyle(field: QueryCondition, controlType: any) {
            //     return this.solutionService.getConditionItemStyle(field,controlType);
            // }
            /**
             * @param {?} field
             * @return {?}
             */
            function (field) {
                return this.solutionService.getConditionItemTitle(field);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        FilterCheckboxComponent.prototype.onSearch = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var checkboxValue = [];
                if (event) {
                    // let checkboxList = event.split(',');
                    /** @type {?} */
                    var checkboxList = event;
                    if (checkboxList && checkboxList.length) {
                        checkboxValue = checkboxList;
                    }
                    this.item.value.value = checkboxValue;
                }
                else {
                    this.item.value.value = new CheckboxGroupValue();
                }
                if (this.disabled) {
                    return;
                }
                this.searchHandle.emit();
            };
        FilterCheckboxComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-filter-checkbox',
                        template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <farris-checkboxgroup [value]=\"checkValue\" [horizontal]=\"true\" [disable]=\"disabled\"\r\n        [data]=\"checkboxDataSource\" [isStringValue]=\"false\" (changeValue)=\"onSearch($event)\">\r\n    </farris-checkboxgroup>\r\n</div>",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        FilterCheckboxComponent.ctorParameters = function () {
            return [
                { type: SolutionService }
            ];
        };
        FilterCheckboxComponent.propDecorators = {
            item: [{ type: i0.Input }],
            autoLabel: [{ type: i0.Input }],
            disabled: [{ type: i0.Input }],
            searchHandle: [{ type: i0.Output }],
            isExtend: [{ type: i0.HostBinding, args: ['class.filter-item-wrap',] }],
            isCheckExtend: [{ type: i0.HostBinding, args: ['class.filter-item-checbox-wrap',] }],
            cla: [{ type: i0.HostBinding, args: ['class.filter-item-checkboxgroup',] }],
            hidenLabel: [{ type: i0.HostBinding, args: ['class.filter-item-hiddenlabel',] }],
            changeFields: [{ type: i0.Input }]
        };
        return FilterCheckboxComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DateRangeComponent = /** @class */ (function () {
        function DateRangeComponent(solutionService, injector, cdr) {
            this.solutionService = solutionService;
            this.injector = injector;
            this.cdr = cdr;
            this.searchHandle = new i0.EventEmitter();
            //TODO: need 2 placeholder text for date range
            // rangeDate = {
            //     begin:null,
            //     end:null
            // };
            /**
             * 判断是否是在扩展区域展示
             */
            this.extend = false;
            /**
             * 判断是否显示label
             */
            this.showlabel = true;
            /**
             * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
             */
            this.changeFields = [];
        }
        Object.defineProperty(DateRangeComponent.prototype, "isExtend", {
            // showType:string;
            get: 
            // showType:string;
            /**
             * @return {?}
             */
            function () {
                return !this.extend && this.autoLabel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DateRangeComponent.prototype, "hidenLabel", {
            get: /**
             * @return {?}
             */ function () {
                return !this.showlabel;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        DateRangeComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.initDate();
                if (this.item) {
                    /** @type {?} */
                    var type = Object.prototype.toString.call(this.item.placeHolder);
                    if (type == '[object Undefined]') {
                        if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {
                            this.placeholder = this.item.control.placeholder;
                        }
                    }
                    else {
                        this.placeholder = this.item.placeHolder;
                    }
                    /** @type {?} */
                    var beginplac = Object.prototype.toString.call(this.item.beginPlaceHolder);
                    if (beginplac == '[object Undefined]') {
                        if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {
                            this.beginPlaceHolder = this.item.control.beginPlaceHolder;
                        }
                    }
                    else {
                        this.beginPlaceHolder = this.item.beginPlaceHolder;
                    }
                    /** @type {?} */
                    var endplac = Object.prototype.toString.call(this.item.endPlaceHolder);
                    if (endplac == '[object Undefined]') {
                        if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {
                            this.endPlaceHolder = this.item.control.endPlaceHolder;
                        }
                    }
                    else {
                        this.endPlaceHolder = this.item.endPlaceHolder;
                    }
                    // this.showType = this.item.control.showType;
                }
                if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
                    this.extend = this.item.control.isExtend;
                    if (!this.extend) {
                        this.showlabel = this.item.control.showLabel;
                    }
                }
                this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);
                (( /** @type {?} */(this.item.value))).clear$.subscribe(( /**
                 * @return {?}
                 */function () {
                    _this.rangeDate = '';
                }));
                // this.cdr.detectChanges();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        DateRangeComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                var _this = this;
                // this.initDate();
                if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
                    /** @type {?} */
                    var isChange = changes['changeFields'].currentValue.some(( /**
                     * @param {?} field
                     * @return {?}
                     */function (field) { return field == _this.item.fieldCode; }));
                    if (isChange) {
                        /** @type {?} */
                        var beginValue = this.item.value && this.item.value.startTime ? this.item.value.startTime.toString().trim() : '';
                        /** @type {?} */
                        var endValue = this.item.value && this.item.value.endTime ? this.item.value.endTime.toString().trim() : '';
                        this.rangeDate = beginValue + "~" + endValue;
                    }
                }
            };
        /**
         * @return {?}
         */
        DateRangeComponent.prototype.initDate = /**
         * @return {?}
         */
            function () {
                if (this.item && this.item.control && this.item.control.hasOwnProperty('format')) {
                    /** @type {?} */
                    var itemDateFormat = this.item.control.format;
                    if (this.showTime) {
                        if (itemDateFormat.length > 0 && itemDateFormat.indexOf('HH:mm') == -1) {
                            itemDateFormat = itemDateFormat + ' HH:mm:ss';
                        }
                    }
                    /** @type {?} */
                    var format = this.showTime ? 'yyyy-MM-dd HH:mm:ss' : (this.showType == '2' ? 'yyyy-MM' : (this.showType == '3' ? 'yyyy' : 'yyyy-MM-dd'));
                    this.returnFormat = format;
                    this.dateFormat = itemDateFormat ? itemDateFormat : format;
                }
                /** @type {?} */
                var rangeDateValue = this.item && this.item.value;
                if (rangeDateValue.startTime && rangeDateValue.endTime) {
                    this.rangeDate = rangeDateValue.startTime + "~" + rangeDateValue.endTime;
                }
            };
        /**
         * @param {?} dateString
         * @return {?}
         */
        DateRangeComponent.prototype.getDate = /**
         * @param {?} dateString
         * @return {?}
         */
            function (dateString) {
                // let arr1:Array<any> = dateString.split(" "); 
                // let sdate = arr1[0].split('-'); 
                // let date = new Date(sdate[0], sdate[1]-1, sdate[2]);
                /** @type {?} */
                var date = new Date(dateString);
                return date;
            };
        /**
         * @param {?} event
         * @return {?}
         */
        DateRangeComponent.prototype.onDateChange = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (event) {
                    (( /** @type {?} */(this.item.value))).startTime = event.returnFormatted.split('~')[0];
                    (( /** @type {?} */(this.item.value))).endTime = event.returnFormatted.split('~')[1];
                }
                else {
                    // this.item.value = new DateRangeValue();
                    this.item.value.startTime = '';
                    this.item.value.endTime = '';
                }
                if (this.disabled) {
                    return;
                }
                this.searchHandle.emit(event);
            };
        /**
         * @param {?} field
         * @return {?}
         */
        DateRangeComponent.prototype.getConditionItemTitle = /**
         * @param {?} field
         * @return {?}
         */
            function (field) {
                return this.solutionService.getConditionItemTitle(field);
            };
        DateRangeComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-filter-daterange',
                        template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <ng-container *ngIf=\"showTime;else defaultdate\">\r\n        <farris-datepicker [(ngModel)]=\"rangeDate\" [dateRange]=\"true\" [readonly]=\"disabled\"\r\n         [editable]=\"false\" [returnFormat]=\"showTime ? 'yyyy-MM-dd HH:mm:ss' : 'yyyy-MM-dd'\"\r\n          [dateFormat]=\"dateFormat\" (valueChange)=\"onDateChange($event)\" [beginPlaceholder]=\"beginPlaceHolder\"\r\n           [endPlaceholder]=\"endPlaceHolder\" [placeholder]=\"placeholder\" [showTime]=\"showTime\"></farris-datepicker>\r\n    </ng-container>\r\n    <ng-template #defaultdate>\r\n        <farris-datepicker [(ngModel)]=\"rangeDate\" [dateRange]=\"true\" [readonly]=\"disabled\"\r\n         [editable]=\"false\" [returnFormat]=\"showTime ? 'yyyy-MM-dd HH:mm:ss': (showType == '2'? 'yyyy-MM': (showType == '3'? 'yyyy':'yyyy-MM-dd'))\"\r\n          [dateFormat]=\"dateFormat\" (valueChange)=\"onDateChange($event)\" [beginPlaceholder]=\"beginPlaceHolder\" [endPlaceholder]=\"endPlaceHolder\" [placeholder]=\"placeholder\" [showType]=\"showType\"></farris-datepicker>\r\n    </ng-template>\r\n    \r\n\r\n    <!-- <farris-datepicker [ngModel]=\"rangeDate\" [dateRange]=\"true\" [returnFormat]=\"'yyyy-MM-dd'\" [dateFormat]=\"item.control.format\" (ngModelChange)=\"onDateChange($event)\"></farris-datepicker> -->\r\n</div>\r\n<!-- [(ngModel)]=\"rangeDate\" -->"
                    }] }
        ];
        /** @nocollapse */
        DateRangeComponent.ctorParameters = function () {
            return [
                { type: SolutionService },
                { type: i0.Injector },
                { type: i0.ChangeDetectorRef }
            ];
        };
        DateRangeComponent.propDecorators = {
            item: [{ type: i0.Input }],
            autoLabel: [{ type: i0.Input }],
            disabled: [{ type: i0.Input }],
            showTime: [{ type: i0.Input }],
            showType: [{ type: i0.Input }],
            searchHandle: [{ type: i0.Output, args: ['searchHandle',] }],
            isExtend: [{ type: i0.HostBinding, args: ['class.filter-item-wrap',] }],
            hidenLabel: [{ type: i0.HostBinding, args: ['class.filter-item-hiddenlabel',] }],
            changeFields: [{ type: i0.Input }]
        };
        return DateRangeComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ListFilterCommonComponent = /** @class */ (function () {
        function ListFilterCommonComponent() {
        }
        ListFilterCommonComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-filter-common',
                        template: "",
                        encapsulation: i0.ViewEncapsulation.None,
                        styles: [".filter-item-wrap .col-form-label{width:auto!important;max-width:6rem}.filter-item-hiddenlabel{padding-left:14px}.f-list-filter .filter-inputs-main .filter-input-list:first-child .filter-item-hiddenlabel{padding-left:0}.filter-item-checbox-wrap .farris-checkradio-hor{flex-wrap:nowrap!important}.filter-item-checbox-wrap .farris-checkradio-hor .custom-control{flex-shrink:0}.filter-item-checbox-wrap .farris-checkradio-hor .custom-checkbox{max-width:177px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.filter-item-checbox-wrap .farris-checkradio-hor .custom-checkbox:last-child{padding-right:0}.filter-item-checbox-wrap .farris-input-wrap{overflow:auto}.filter-item-checbox-wrap .farris-input-wrap::-webkit-scrollbar{width:6px;height:6px}.filter-item-checbox-wrap .farris-input-wrap::-webkit-scrollbar-track{border-radius:0}.filter-item-checbox-wrap .farris-input-wrap::-webkit-scrollbar-thumb{-webkit-transition:.2s;transition:.2s;border-radius:6px}.filter-inputs-main-list.farris-form-controls-inline .farris-group-wrap .col-form-label{-webkit-box-pack:start!important;justify-content:flex-start!important;width:8rem}.filter-inputs-main-list.farris-form-controls-inline .farris-group-wrap .form-group{margin-bottom:1rem}.filter-inputs-main-list.farris-form-controls-inline .filter-list-item .farris-group-wrap .form-group{margin-bottom:0}"]
                    }] }
        ];
        return ListFilterCommonComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ControlTypeXPipe = /** @class */ (function () {
        function ControlTypeXPipe() {
        }
        /**
         * @param {?} value
         * @return {?}
         */
        ControlTypeXPipe.prototype.transform = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                /** @type {?} */
                var type;
                switch (value.control.getControlType()) {
                    case ControlType.Text:
                        type = 'input';
                        break;
                    case ControlType.Search:
                        type = 'search';
                        break;
                    case ControlType.Date:
                        type = 'date';
                        break;
                    case ControlType.Year:
                        type = 'year';
                        break;
                    case ControlType.Month:
                        type = 'month';
                        break;
                    case ControlType.MonthRange:
                        type = 'monthrange';
                        break;
                    case ControlType.YearRange:
                        type = 'yearrange';
                        break;
                    case ControlType.DateRange:
                        type = 'daterange';
                        break;
                    case ControlType.DateRangeTime:
                        type = 'daterangetime';
                        break;
                    case ControlType.DropDown:
                        type = 'dropdown';
                        break;
                    case ControlType.NumberRange:
                        type = 'number';
                        break;
                    case ControlType.Help:
                        type = 'help';
                        break;
                    case ControlType.CheckboxGroup:
                        type = 'checkboxgroup';
                        break;
                    case ControlType.Radio:
                        type = 'radio';
                        break;
                    case ControlType.InputGroup:
                        type = 'input-group';
                        break;
                    default:
                        type = 'input';
                        break;
                }
                return type;
            };
        ControlTypeXPipe.decorators = [
            { type: i0.Pipe, args: [{ name: 'controlType' },] }
        ];
        return ControlTypeXPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * checboxgroup类型
     */
    var /**
     * checboxgroup类型
     */ RadioValue = /** @class */ (function () {
        function RadioValue() {
        }
        /**
         * @return {?}
         */
        RadioValue.prototype.getEnumValueName = /**
         * @return {?}
         */
            function () {
                return this.name;
            };
        /**
         * @return {?}
         */
        RadioValue.prototype.getEnumValue = /**
         * @return {?}
         */
            function () {
                return this.value;
            };
        return RadioValue;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FilterRadioComponent = /** @class */ (function () {
        function FilterRadioComponent(solutionService) {
            this.solutionService = solutionService;
            this.searchHandle = new i0.EventEmitter();
            /**
             * 判断是否是在扩展区域展示
             */
            this.extend = false;
            /**
             * 判断是否显示label
             */
            this.showlabel = true;
            this.selectCheck = [];
            this.cla = true;
            this.radioDataSource = new Array();
            /**
             * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
             */
            this.changeFields = [];
        }
        Object.defineProperty(FilterRadioComponent.prototype, "isExtend", {
            get: /**
             * @return {?}
             */ function () {
                return !this.extend && this.autoLabel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FilterRadioComponent.prototype, "isCheckExtend", {
            get: /**
             * @return {?}
             */ function () {
                return !this.extend;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FilterRadioComponent.prototype, "hidenLabel", {
            get: /**
             * @return {?}
             */ function () {
                return !this.showlabel;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        FilterRadioComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.getDataSource();
                this.radioValue = this.item.value.getOriginalValue();
                if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
                    this.extend = this.item.control.isExtend;
                    if (!this.extend) {
                        this.showlabel = this.item.control.showLabel;
                    }
                }
                this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);
                (( /** @type {?} */(this.item.value))).clear$.subscribe(( /**
                 * @return {?}
                 */function () {
                    _this.radioValue = [];
                }));
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        FilterRadioComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                var _this = this;
                this.getDataSource();
                if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
                    /** @type {?} */
                    var isChange = changes['changeFields'].currentValue.some(( /**
                     * @param {?} field
                     * @return {?}
                     */function (field) { return field == _this.item.fieldCode; }));
                    if (isChange) {
                        /** @type {?} */
                        var orginalValue = this.item.value.getOriginalValue();
                        this.radioValue = orginalValue == undefined ? [] : orginalValue;
                    }
                }
            };
        /**
         * @return {?}
         */
        FilterRadioComponent.prototype.getDataSource = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.item && this.item.control && this.item.control.getControlType() == ControlType.Radio) {
                    /** @type {?} */
                    var radioList = (( /** @type {?} */(this.item.control)));
                    this.radioDataSource = Array();
                    if (radioList.enumValues && radioList.enumValues.length > 0) {
                        radioList.enumValues.forEach(( /**
                         * @param {?} element
                         * @return {?}
                         */function (element) {
                            _this.radioDataSource.push(Object.assign(new RadioValue(), element));
                        }));
                    }
                }
                // if(this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')){
                //     this.extend = this.item.control.isExtend;
                // }
            };
        // getConditionItemStyle(field: QueryCondition, controlType: any) {
        //     return this.solutionService.getConditionItemStyle(field,controlType);
        // }
        // getConditionItemStyle(field: QueryCondition, controlType: any) {
        //     return this.solutionService.getConditionItemStyle(field,controlType);
        // }
        /**
         * @param {?} field
         * @return {?}
         */
        FilterRadioComponent.prototype.getConditionItemTitle =
            // getConditionItemStyle(field: QueryCondition, controlType: any) {
            //     return this.solutionService.getConditionItemStyle(field,controlType);
            // }
            /**
             * @param {?} field
             * @return {?}
             */
            function (field) {
                return this.solutionService.getConditionItemTitle(field);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        FilterRadioComponent.prototype.onSearch = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (event) {
                    this.item.value.value = event;
                }
                else {
                    this.item.value.value = new RadioGroupValue();
                }
                if (this.disabled) {
                    return;
                }
                this.searchHandle.emit();
            };
        FilterRadioComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-filter-radio',
                        template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <!-- <farris-checkboxgroup [value]=\"checkValue\" [horizontal]=\"true\" [disable]=\"disabled\"\r\n        [data]=\"checkboxDataSource\" [isStringValue]=\"false\" (changeValue)=\"onSearch($event)\">\r\n    </farris-checkboxgroup> -->\r\n    <farris-radiogroup \r\n    [value]=\"radioValue\" \r\n    [horizontal]=\"true\" \r\n    [data]=\"radioDataSource\"\r\n    [disabled]=\"disabled\"\r\n    (changeValue)=\"onSearch($event)\">\r\n    </farris-radiogroup>\r\n</div>",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        FilterRadioComponent.ctorParameters = function () {
            return [
                { type: SolutionService }
            ];
        };
        FilterRadioComponent.propDecorators = {
            item: [{ type: i0.Input }],
            autoLabel: [{ type: i0.Input }],
            disabled: [{ type: i0.Input }],
            searchHandle: [{ type: i0.Output, args: ['searchHandle',] }],
            isExtend: [{ type: i0.HostBinding, args: ['class.filter-item-wrap',] }],
            isCheckExtend: [{ type: i0.HostBinding, args: ['class.filter-item-checbox-wrap',] }],
            cla: [{ type: i0.HostBinding, args: ['class.filter-item-radio',] }],
            hidenLabel: [{ type: i0.HostBinding, args: ['class.filter-item-hiddenlabel',] }],
            changeFields: [{ type: i0.Input }]
        };
        return FilterRadioComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FilterInputGroupComponent = /** @class */ (function () {
        function FilterInputGroupComponent(solutionService) {
            this.solutionService = solutionService;
            /**
             * 判断是否是在扩展区域展示
             */
            this.extend = false;
            /**
             * 判断是否显示label
             */
            this.showlabel = true;
            this.searchHandle = new i0.EventEmitter();
            this.isTextFromDialog = false;
        }
        Object.defineProperty(FilterInputGroupComponent.prototype, "item", {
            get: /**
             * @return {?}
             */ function () {
                return this.constructTextItem(this._inputItem);
            },
            set: /**
             * @param {?} textItem
             * @return {?}
             */ function (textItem) {
                this._inputItem = textItem;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FilterInputGroupComponent.prototype, "isExtend", {
            get: /**
             * @return {?}
             */ function () {
                return !this.extend && this.autoLabel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FilterInputGroupComponent.prototype, "hidenLabel", {
            get: /**
             * @return {?}
             */ function () {
                return !this.showlabel;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} textItem
         * @return {?}
         */
        FilterInputGroupComponent.prototype.constructTextItem = /**
         * @param {?} textItem
         * @return {?}
         */
            function (textItem) {
                /** @type {?} */
                var textValueObj = ( /** @type {?} */(textItem.value));
                textValueObj.textValue = textValueObj.textValue && textValueObj.textValue.trim();
                textItem.value = textValueObj;
                return textItem;
            };
        /**
         * @return {?}
         */
        FilterInputGroupComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.testId = this.solutionService.getGuid();
                this.getInputGroupBindingInfo();
                if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
                    this.extend = this.item.control.isExtend;
                    if (!this.extend) {
                        this.showlabel = this.item.control.showLabel;
                    }
                }
                this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);
            };
        /**
         * @return {?}
         */
        FilterInputGroupComponent.prototype.getInputGroupBindingInfo = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var inputGroupControl = (( /** @type {?} */(this.item.control)));
                this.usageMode = inputGroupControl.usageMode;
                if (this.usageMode == 'open-modal' || this.usageMode == 'open-remote-modal') {
                    this.dialogOptions = inputGroupControl.dialogOptions;
                    /*
                        example of dialogOptions = {
                           modalId: "1e011720-eb0f-4c9c-82b6-6844c89b2303"
                           mapFields: {hDepartment: "Name"}
                           title: "测试标题栏"
                           width: 800
                           height: 600
                        }
                     */
                    if (this.dialogOptions.mapFields) {
                        this.textField = JSON.stringify(this.dialogOptions.mapFields).split('"')[1];
                    }
                }
            };
        /**
         * @param {?} field
         * @return {?}
         */
        FilterInputGroupComponent.prototype.getConditionItemTitle = /**
         * @param {?} field
         * @return {?}
         */
            function (field) {
                return this.solutionService.getConditionItemTitle(field);
            };
        /*
            dialogOptions = {
                modalId: "ae011720-eb0f-4c9c-82b6-6844c89b2303"
                mapFields: {hDepartment: "Name"}
                title: "测试标题栏"
                width: 800
                height: 600
                showButtons: true
                buttons: [
                    { text: "确定", cls: "btn-primary", handle: _this.viewModel.rootviewmodelconfirm1 },
                    { text: "取消", cls: "btn-secondary", handle: _this.viewModel.rootviewmodelcancel1}
                ]
            }
        */
        /*
                dialogOptions = {
                    modalId: "ae011720-eb0f-4c9c-82b6-6844c89b2303"
                    mapFields: {hDepartment: "Name"}
                    title: "测试标题栏"
                    width: 800
                    height: 600
                    showButtons: true
                    buttons: [
                        { text: "确定", cls: "btn-primary", handle: _this.viewModel.rootviewmodelconfirm1 },
                        { text: "取消", cls: "btn-secondary", handle: _this.viewModel.rootviewmodelcancel1}
                    ]
                }
            */
        /**
         * @param {?} event
         * @return {?}
         */
        FilterInputGroupComponent.prototype.onClick = /*
                dialogOptions = {
                    modalId: "ae011720-eb0f-4c9c-82b6-6844c89b2303"
                    mapFields: {hDepartment: "Name"}
                    title: "测试标题栏"
                    width: 800
                    height: 600
                    showButtons: true
                    buttons: [
                        { text: "确定", cls: "btn-primary", handle: _this.viewModel.rootviewmodelconfirm1 },
                        { text: "取消", cls: "btn-secondary", handle: _this.viewModel.rootviewmodelcancel1}
                    ]
                }
            */
            /**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                var _this = this;
                if (this.usageMode == 'text') {
                    this.item.control.click();
                }
                else {
                    /** @type {?} */
                    var options = this.dialogOptions;
                    options.handle = ( /**
                     * @param {?} selectedItem
                     * @return {?}
                     */function (selectedItem) {
                        // let modalData = item[0];
                        // this.item.value.value = modalData[this.targetField];
                        /** @type {?} */
                        var selectedItems = selectedItem.filter(( /**
                         * @param {?} n
                         * @return {?}
                         */function (n) { return n; }));
                        if (selectedItems && _this.textField) {
                            _this.item.value.value = selectedItems;
                            _this.item.value.textValue = _this.item.value.getTextValue(_this.textField);
                            _this.item.value.textField = _this.textField;
                            _this.item.value.isInputText = false;
                            if (_this.inputgroup) {
                                _this.inputgroup.cd.detectChanges();
                                _this.inputgroup.value = _this.item.value.textValue;
                            }
                            _this.isTextFromDialog = true;
                            _this.textFormDialog = _this.item.value.textValue;
                            _this.onBlur();
                        }
                    });
                    this.item.control.click({ event: event, options: options });
                }
            };
        /**
         * @return {?}
         */
        FilterInputGroupComponent.prototype.onBlur = /**
         * @return {?}
         */
            function () {
                if (this.disabled) {
                    return;
                }
                if (this.usageMode == 'text') {
                    this.item.value.isInputText = true;
                }
                if (this.usageMode == 'open-modal' || this.usageMode == 'open-remote-modal') {
                    if (!this.isTextFromDialog) {
                        this.item.value.isInputText = true;
                    }
                    if (this.item.value.textValue != this.textFormDialog) {
                        this.isTextFromDialog = false;
                        this.item.value.value = [];
                        this.item.value.textField = undefined;
                        this.item.value.isInputText = true;
                    }
                }
                this.searchHandle.emit();
            };
        /**
         * @return {?}
         */
        FilterInputGroupComponent.prototype.onClear = /**
         * @return {?}
         */
            function () {
                (( /** @type {?} */(this.item.value))).clearValue();
                this.searchHandle.emit();
            };
        FilterInputGroupComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'app-filter-inputgroup',
                        template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <input-group #inputgroup\r\n        [(ngModel)]=\"item.value.textValue\" \r\n        name=\"{{item.fieldName}}\" \r\n        id=\"{{testId}}\"\r\n        [readonly]=\"disabled\"\r\n        [groupText]=\"item.control.groupText\"\r\n        [editable]=\"item.control.editable\"\r\n        [placeholder]=\"item.placeHolder\"\r\n        (clickHandle)=\"onClick($event)\"\r\n        (blurHandle)=\"onBlur()\"\r\n        (clear)=\"onClear()\"\r\n        >\r\n    </input-group>\r\n</div>\r\n"
                    }] }
        ];
        /** @nocollapse */
        FilterInputGroupComponent.ctorParameters = function () {
            return [
                { type: SolutionService }
            ];
        };
        FilterInputGroupComponent.propDecorators = {
            item: [{ type: i0.Input }],
            autoLabel: [{ type: i0.Input }],
            disabled: [{ type: i0.Input }],
            isExtend: [{ type: i0.HostBinding, args: ['class.filter-item-wrap',] }],
            hidenLabel: [{ type: i0.HostBinding, args: ['class.filter-item-hiddenlabel',] }],
            searchHandle: [{ type: i0.Output, args: ['searchHandle',] }],
            inputgroup: [{ type: i0.ViewChild, args: ['inputgroup',] }]
        };
        return FilterInputGroupComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ClearFieldsDirective = /** @class */ (function () {
        function ClearFieldsDirective(ngCtrl, listFilterCmp, inject) {
            this.ngCtrl = ngCtrl;
            this.listFilterCmp = listFilterCmp;
            this.inject = inject;
            this.clearFields = '';
        }
        /**
         * @return {?}
         */
        ClearFieldsDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.clearFields && this.ngCtrl) {
                    this.ngCtrl.valueChanges.subscribe(( /**
                     * @param {?} v
                     * @return {?}
                     */function (v) {
                        if (!_this.ngCtrl.dirty) {
                            return;
                        }
                        _this.listFilterCmp.fieldCodeOfClearFields = [];
                        _this.clearFields.split(',').forEach(( /**
                         * @param {?} n
                         * @return {?}
                         */function (n) {
                            // 字段编号
                            /** @type {?} */
                            var conditionItem = _this.listFilterCmp.listFilterConditions.find(( /**
                             * @param {?} c
                             * @return {?}
                             */function (c) { return c.fieldCode === n; }));
                            if (conditionItem) {
                                // 触发清空字段列表变更，特殊控件类型的清空，不能只是清空值
                                _this.listFilterCmp.fieldCodeOfClearFields.push(n);
                                // 清空字段
                                conditionItem.value.clearValue();
                            }
                        }));
                    }));
                }
            };
        ClearFieldsDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[clear-fields]'
                    },] }
        ];
        /** @nocollapse */
        ClearFieldsDirective.ctorParameters = function () {
            return [
                { type: forms.NgControl, decorators: [{ type: i0.Optional }, { type: i0.Self }] },
                { type: ListFilterComponent },
                { type: i0.Injector }
            ];
        };
        ClearFieldsDirective.propDecorators = {
            clearFields: [{ type: i0.Input, args: ['clear-fields',] }]
        };
        return ClearFieldsDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ListFilterModule = /** @class */ (function () {
        function ListFilterModule() {
        }
        ListFilterModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [
                            ListFilterComponent,
                            DateComponent,
                            NumberComponent,
                            HelpComponent,
                            InputComponent,
                            DropDownComponent,
                            SearchComponent,
                            FilterCheckboxComponent,
                            DateRangeComponent,
                            ListFilterCommonComponent,
                            FilterRadioComponent,
                            FilterInputGroupComponent,
                            ControlTypeXPipe,
                            ClearFieldsDirective
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            uiInputGroup.InputGroupModule,
                            uiDatepicker.FarrisDatePickerModule,
                            uiDatalist.DatalistModule,
                            uiComboList.ComboListModule,
                            uiLookup.LookupModule,
                            uiForms.FarrisFormsModule,
                            uiNumberSpinner.NumberSpinnerModule,
                            uiPerfectScrollbar.PerfectScrollbarModule,
                            uiLocale.LocaleModule.forRoot()
                            // InputsModule
                        ],
                        providers: [
                            ConvertorService,
                            SolutionService,
                            QuerySolutionService
                        ],
                        exports: [
                            ListFilterComponent,
                            DateComponent,
                            NumberComponent,
                            HelpComponent,
                            InputComponent,
                            DropDownComponent,
                            SearchComponent,
                            FilterCheckboxComponent,
                            DateRangeComponent,
                            ListFilterCommonComponent,
                            FilterRadioComponent,
                            FilterInputGroupComponent,
                            ControlTypeXPipe
                        ]
                    },] }
        ];
        return ListFilterModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var listFilterItem = /** @class */ (function () {
        function listFilterItem(_id, _groupName) {
            this.id = _id;
            this.name = _groupName;
            this.width = 0;
            this.isExtend = false;
        }
        // 设置宽度
        // 设置宽度
        /**
         * @param {?} value
         * @return {?}
         */
        listFilterItem.prototype.setWidth =
            // 设置宽度
            /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this.width = parseInt(value, 10);
            };
        // 获取宽度
        // 获取宽度
        /**
         * @return {?}
         */
        listFilterItem.prototype.getWidth =
            // 获取宽度
            /**
             * @return {?}
             */
            function () {
                return this.width;
            };
        return listFilterItem;
    }());
    var listFilterGroup = /** @class */ (function () {
        function listFilterGroup() {
            this.responsedIndex = 0;
            this.listItems = [];
        }
        return listFilterGroup;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ConditionValueConvert = /** @class */ (function () {
        function ConditionValueConvert() {
        }
        /**
         * @param {?} obj
         * @return {?}
         */
        ConditionValueConvert.prototype.convertToObject = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                /** @type {?} */
                var conditionValue = ( /** @type {?} */(obj));
                /** @type {?} */
                var controlType = conditionValue.getControlType();
                /** @type {?} */
                var jobj = new Object();
                jobj['Type'] = controlType;
                if (controlType == ControlType.DropDown) {
                    /** @type {?} */
                    var convertor = new DropDownListValueConvert();
                    jobj['Content'] = convertor.convertToObject(conditionValue);
                }
                else if (controlType == ControlType.NumberRange) {
                    /** @type {?} */
                    var convertor = new NumberRangeValueConvertor();
                    jobj['Content'] = convertor.convertToObject(conditionValue);
                }
                else {
                    jobj['Content'] = conditionValue;
                }
                return jobj;
            };
        /**
         * @param {?} jobj
         * @return {?}
         */
        ConditionValueConvert.prototype.initFromObject = /**
         * @param {?} jobj
         * @return {?}
         */
            function (jobj) {
                /** @type {?} */
                var controlType = ( /** @type {?} */(jobj['Type']));
                /** @type {?} */
                var content = jobj['Content'];
                if (controlType == ControlType.Text) {
                    return Object.assign(new TextValue(), ( /** @type {?} */(content)));
                }
                else if (controlType == ControlType.NumberRange) {
                    /** @type {?} */
                    var convertor = new NumberRangeValueConvertor();
                    return convertor.initFromObject(content);
                }
                else if (controlType == ControlType.DateRange) {
                    return Object.assign(new DateRangeValue(), ( /** @type {?} */(content)));
                }
                else if (controlType == ControlType.DropDown) {
                    /** @type {?} */
                    var convertor = new DropDownListValueConvert();
                    return convertor.initFromObject(content);
                }
                else if (controlType == ControlType.Help) {
                    return Object.assign(new HelpValue(), ( /** @type {?} */(content)));
                }
            };
        return ConditionValueConvert;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RadioEnumValue = /** @class */ (function () {
        function RadioEnumValue() {
        }
        /**
         * @return {?}
         */
        RadioEnumValue.prototype.getEnumValueName = /**
         * @return {?}
         */
            function () {
                return this.name;
            };
        /**
         * @return {?}
         */
        RadioEnumValue.prototype.getEnumValue = /**
         * @return {?}
         */
            function () {
                return this.value;
            };
        return RadioEnumValue;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var DisplayType = {
        LIST: 0,
        TREELIST: 1,
    };
    DisplayType[DisplayType.LIST] = 'LIST';
    DisplayType[DisplayType.TREELIST] = 'TREELIST';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ControlConvert = /** @class */ (function () {
        function ControlConvert() {
        }
        /**
         * @param {?} obj
         * @return {?}
         */
        ControlConvert.prototype.convertJObject = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                /** @type {?} */
                var control = ( /** @type {?} */(obj));
                /** @type {?} */
                var controlType = control.getControlType();
                /** @type {?} */
                var jobj = new Object();
                jobj["Type"] = controlType;
                if (controlType != ControlType.DropDown) {
                    jobj["Content"] = control;
                }
                else {
                    /** @type {?} */
                    var convertor = new DropDownListControlConvert();
                    jobj["Content"] = convertor.convertToObject(( /** @type {?} */(control)));
                }
                return jobj;
            };
        /**
         * @param {?} jobj
         * @return {?}
         */
        ControlConvert.prototype.initFromJobject = /**
         * @param {?} jobj
         * @return {?}
         */
            function (jobj) {
                /** @type {?} */
                var controlType = ( /** @type {?} */(jobj["Type"]));
                /** @type {?} */
                var content = jobj["Content"];
                if (controlType == ControlType.Text) {
                    return Object.assign(new TextControl(), ( /** @type {?} */(content)));
                }
                else if (controlType == ControlType.Search) {
                    return Object.assign(new SearchControl(), ( /** @type {?} */(content)));
                }
                else if (controlType == ControlType.DateRange) {
                    return Object.assign(new DateRangeControl(), ( /** @type {?} */(content)));
                }
                else if (controlType == ControlType.NumberRange) {
                    return Object.assign(new NumberRangeControl(), ( /** @type {?} */(content)));
                }
                // else if(controlType==ControlType.DateTime){
                //     return Object.assign(new DateControl(),content as DateControl);
                // }
                else if (controlType == ControlType.DropDown) {
                    /** @type {?} */
                    var convert = new DropDownListControlConvert();
                    return convert.initFromObject(content);
                }
                else if (controlType == ControlType.Help) {
                    return Object.assign(new HelpContol(), ( /** @type {?} */(content)));
                }
            };
        return ControlConvert;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.SolutionService = SolutionService;
    exports.ConvertorService = ConvertorService;
    exports.QuerySolutionService = QuerySolutionService;
    exports.CompareType = CompareType;
    exports.RelationType = RelationType;
    exports.ValueType = ValueType;
    exports.ListFilterCommonComponent = ListFilterCommonComponent;
    exports.ListFilterService = ListFilterService;
    exports.ListFilterComponent = ListFilterComponent;
    exports.ListFilterModule = ListFilterModule;
    exports.FilterCheckboxComponent = FilterCheckboxComponent;
    exports.DateComponent = DateComponent;
    exports.DateRangeComponent = DateRangeComponent;
    exports.DropDownComponent = DropDownComponent;
    exports.HelpComponent = HelpComponent;
    exports.InputComponent = InputComponent;
    exports.NumberComponent = NumberComponent;
    exports.SearchComponent = SearchComponent;
    exports.FilterRadioComponent = FilterRadioComponent;
    exports.FilterInputGroupComponent = FilterInputGroupComponent;
    exports.listFilterItem = listFilterItem;
    exports.listFilterGroup = listFilterGroup;
    exports.DateRangeValue = DateRangeValue;
    exports.DropDownListValue = DropDownListValue;
    exports.DropDownListValueConvert = DropDownListValueConvert;
    exports.ConditionValueConvert = ConditionValueConvert;
    exports.NumberRangeValue = NumberRangeValue;
    exports.NumberRangeValueConvertor = NumberRangeValueConvertor;
    exports.HelpValue = HelpValue;
    exports.TextValue = TextValue;
    exports.CheckboxGroupValue = CheckboxGroupValue;
    exports.DateValue = DateValue;
    exports.SearchValue = SearchValue;
    exports.DateRangeTimeValue = DateRangeTimeValue;
    exports.RadioGroupValue = RadioGroupValue;
    exports.MonthValue = MonthValue;
    exports.MonthRangeValue = MonthRangeValue;
    exports.YearRangeValue = YearRangeValue;
    exports.YearValue = YearValue;
    exports.InputGroupValue = InputGroupValue;
    exports.CheckboxEnumValue = CheckboxEnumValue;
    exports.CheckboxGroupControl = CheckboxGroupControl;
    exports.CheckboxValue = CheckboxValue;
    exports.DateRangeControl = DateRangeControl;
    exports.DateControl = DateControl;
    exports.DateRangeTimeControl = DateRangeTimeControl;
    exports.DropDownControl = DropDownControl;
    exports.DropDownListControlConvert = DropDownListControlConvert;
    exports.EnumBoolValue = EnumBoolValue;
    exports.EnumType = EnumType;
    exports.EnumValueConvert = EnumValueConvert;
    exports.EnumIntegerValue = EnumIntegerValue;
    exports.EnumStringValue = EnumStringValue;
    exports.RadioEnumValue = RadioEnumValue;
    exports.RadioControl = RadioControl;
    exports.RadioValue = RadioValue;
    exports.HelpContol = HelpContol;
    exports.DisplayType = DisplayType;
    exports.MonthControl = MonthControl;
    exports.MonthRangeControl = MonthRangeControl;
    exports.YearControl = YearControl;
    exports.YearRangeControl = YearRangeControl;
    exports.InputGroupControl = InputGroupControl;
    exports.DialogConfig = DialogConfig;
    exports.DialogButtonConfig = DialogButtonConfig;
    exports.NumberRangeControl = NumberRangeControl;
    exports.SearchControl = SearchControl;
    exports.TextControl = TextControl;
    exports.ControlConvert = ControlConvert;
    exports.FieldConfig = FieldConfig;
    exports.ControlType = ControlType;
    exports.QueryCondition = QueryCondition;
    exports.ControlTypeXPipe = ControlTypeXPipe;
    exports.CheckboxGroupHandler = CheckboxGroupHandler;
    exports.DateHandler = DateHandler;
    exports.DateRangeHandler = DateRangeHandler;
    exports.DateRangeTimeHandler = DateRangeTimeHandler;
    exports.DropDownHandler = DropDownHandler;
    exports.NumberRangeHandler = NumberRangeHandler;
    exports.SearchHandler = SearchHandler;
    exports.SmartHelpHandler = SmartHelpHandler;
    exports.TextHandler = TextHandler;
    exports.QueryConditionHandlerFactory = QueryConditionHandlerFactory;
    exports.RadioHandler = RadioHandler;
    exports.MonthHandler = MonthHandler;
    exports.MonthRangeHandler = MonthRangeHandler;
    exports.YearHandler = YearHandler;
    exports.YearRangeHandler = YearRangeHandler;
    exports.InputGroupHandler = InputGroupHandler;
    exports.LISTFILTER_HANDLER_TOKEN = LISTFILTER_HANDLER_TOKEN;
    exports.ɵa = ClearFieldsDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=farris-ui-list-filter.umd.js.map