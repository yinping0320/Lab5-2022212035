{"version":3,"sources":["ng://@farris/ui-list-filter/lib/entity/fieldconfig/fieldconfig.ts","ng://@farris/ui-list-filter/lib/entity/controltype.ts","ng://@farris/ui-list-filter/lib/entity/controltype/text/textcontrol.ts","ng://@farris/ui-list-filter/lib/entity/controltype/search/searchcontrol.ts","ng://@farris/ui-list-filter/lib/entity/controltype/date/datecontrol.ts","ng://@farris/ui-list-filter/lib/entity/controltype/dropdownlist/enumtype.ts","ng://@farris/ui-list-filter/lib/entity/controltype/dropdownlist/integerenumvalue.ts","ng://@farris/ui-list-filter/lib/entity/controltype/dropdownlist/stringenumvalue.ts","ng://@farris/ui-list-filter/lib/entity/controltype/dropdownlist/boolenumvalue.ts","ng://@farris/ui-list-filter/lib/entity/controltype/dropdownlist/ienumvalue.ts","ng://@farris/ui-list-filter/lib/entity/controltype/dropdownlist/dropdowncontrol.ts","ng://@farris/ui-list-filter/lib/entity/controltype/numberrange/numberrangecontrol.ts","ng://@farris/ui-list-filter/lib/entity/controltype/help/helpcontrol.ts","ng://@farris/ui-list-filter/lib/entity/controltype/checkbox/checkboxcontrol.ts","ng://@farris/ui-list-filter/lib/entity/controltype/datarange/daterangecontrol.ts","ng://@farris/ui-list-filter/lib/entity/controltype/year/yearcontrol.ts","ng://@farris/ui-list-filter/lib/entity/conditionvalue/daterangevalue.ts","ng://@farris/ui-list-filter/lib/entity/conditionvalue/textvalue.ts","ng://@farris/ui-list-filter/lib/entity/conditionvalue/searchvalue.ts","ng://@farris/ui-list-filter/lib/entity/conditionvalue/datevalue.ts","ng://@farris/ui-list-filter/lib/entity/conditionvalue/numberrangevaue.ts","ng://@farris/ui-list-filter/lib/entity/conditionvalue/dropdownlistvalue.ts","ng://@farris/ui-list-filter/lib/entity/conditionvalue/helpvalue.ts","ng://@farris/ui-list-filter/lib/entity/conditionvalue/checkboxgroupvalue.ts","ng://@farris/ui-list-filter/lib/entity/conditionvalue/daterangetimevalue.ts","ng://@farris/ui-list-filter/lib/entity/controltype/datarangetime/daterangetimecontrol.ts","ng://@farris/ui-list-filter/lib/entity/conditionvalue/radiovalue.ts","ng://@farris/ui-list-filter/lib/entity/controltype/radio/radiocontrol.ts","ng://@farris/ui-list-filter/lib/entity/conditionvalue/yearvalue.ts","ng://@farris/ui-list-filter/lib/entity/controltype/month/monthcontrol.ts","ng://@farris/ui-list-filter/lib/entity/conditionvalue/month.ts","ng://@farris/ui-list-filter/lib/entity/conditionvalue/yearrange.ts","ng://@farris/ui-list-filter/lib/entity/controltype/yearrange/yearrangecontrol.ts","ng://@farris/ui-list-filter/lib/entity/conditionvalue/monthrange.ts","ng://@farris/ui-list-filter/lib/entity/controltype/monthrange/monthrangecontrol.ts","ng://@farris/ui-list-filter/lib/entity/conditionvalue/inputgroup.ts","ng://@farris/ui-list-filter/lib/entity/controltype/input-group/inputgroupcontrol.ts","ng://@farris/ui-list-filter/lib/service/list-filter.service.ts","node_modules/tslib/tslib.es6.js","ng://@farris/ui-list-filter/lib/submithandlers/enum/compare-type.enum.ts","ng://@farris/ui-list-filter/lib/submithandlers/enum/value-type.enum.ts","ng://@farris/ui-list-filter/lib/submithandlers/enum/relation-type.enum.ts","ng://@farris/ui-list-filter/lib/submithandlers/handlers/text.handler.ts","ng://@farris/ui-list-filter/lib/submithandlers/handlers/daterage.handler.ts","ng://@farris/ui-list-filter/lib/submithandlers/handlers/dropdown.handler.ts","ng://@farris/ui-list-filter/lib/submithandlers/handlers/numberrage.handler.ts","ng://@farris/ui-list-filter/lib/submithandlers/handlers/smarthelp.handler.ts","ng://@farris/ui-list-filter/lib/submithandlers/handlers/search.handler.ts","ng://@farris/ui-list-filter/lib/submithandlers/handlers/date.handler.ts","ng://@farris/ui-list-filter/lib/submithandlers/handlers/checkboxgroup.handler.ts","ng://@farris/ui-list-filter/lib/submithandlers/handlers/dateragetime.handler.ts","ng://@farris/ui-list-filter/lib/submithandlers/handlers/radio.handler.ts","ng://@farris/ui-list-filter/lib/submithandlers/handlers/monthrage.handler.ts","ng://@farris/ui-list-filter/lib/submithandlers/handlers/yearrage.handler.ts","ng://@farris/ui-list-filter/lib/submithandlers/handlers/month.handler.ts","ng://@farris/ui-list-filter/lib/submithandlers/handlers/year.handler.ts","ng://@farris/ui-list-filter/lib/submithandlers/handlers/inputgroup.handler.ts","ng://@farris/ui-list-filter/lib/submithandlers/querycondition.handler.factory.ts","ng://@farris/ui-list-filter/lib/submithandlers/query-solution.service.ts","ng://@farris/ui-list-filter/lib/entity/querycondition.ts","ng://@farris/ui-list-filter/lib/entity/comparetype.ts","ng://@farris/ui-list-filter/lib/entity/valuetype.ts","ng://@farris/ui-list-filter/lib/entity/relationtype.ts","ng://@farris/ui-list-filter/lib/entity/controltype/checkbox/ienumvalue.ts","ng://@farris/ui-list-filter/lib/service/convertorservice.ts","ng://@farris/ui-list-filter/lib/interface/IistFilterHandler.ts","ng://@farris/ui-list-filter/lib/list-filter.component.ts","ng://@farris/ui-list-filter/lib/service/solution.service.ts","ng://@farris/ui-list-filter/lib/controlcomponent/inputcomponent/input.component.ts","ng://@farris/ui-list-filter/lib/controlcomponent/searchcomponent/search.component.ts","ng://@farris/ui-list-filter/lib/controlcomponent/helpcomponent.ts/help.component.ts","ng://@farris/ui-list-filter/lib/controlcomponent/datecomponent/date.component.ts","ng://@farris/ui-list-filter/lib/controlcomponent/dropdowncomponent/dropdown.component.ts","ng://@farris/ui-list-filter/lib/controlcomponent/numbercomponent/number.component.ts","ng://@farris/ui-list-filter/lib/entity/controltype/checkbox/checkboxvalue.ts","ng://@farris/ui-list-filter/lib/controlcomponent/checkboxcomponent/checkbox.component.ts","ng://@farris/ui-list-filter/lib/controlcomponent/daterangecomponent/daterange.component.ts","ng://@farris/ui-list-filter/lib/list-filter-common.ts","ng://@farris/ui-list-filter/lib/controlType.pipe.ts","ng://@farris/ui-list-filter/lib/entity/controltype/radio/radiovalue.ts","ng://@farris/ui-list-filter/lib/controlcomponent/radiocomponent/radio.component.ts","ng://@farris/ui-list-filter/lib/controlcomponent/inputgroupcomponent/inputgroup.component.ts","ng://@farris/ui-list-filter/lib/directives/clear-fields.directive.ts","ng://@farris/ui-list-filter/lib/list-filter.module.ts","ng://@farris/ui-list-filter/lib/entity/list-filter.model.ts","ng://@farris/ui-list-filter/lib/entity/conditionvalue/ivalue.ts","ng://@farris/ui-list-filter/lib/entity/controltype/radio/ienumvalue.ts","ng://@farris/ui-list-filter/lib/entity/controltype/help/displayType.ts","ng://@farris/ui-list-filter/lib/entity/controltype/icontrol.ts"],"names":["FieldConfig","Text","Help","DropDown","DateRange","NumberRange","Search","Date","CheckboxGroup","DateRangeTime","Radio","Year","Month","MonthRange","YearRange","InputGroup","TextControl","prototype","getControlType","ControlType","SearchControl","DateControl","IntType","StringType","BoolType","EnumIntegerValue","getEnumType","EnumType","getEnumValueName","this","name","getEnumValue","value","EnumStringValue","EnumBoolValue","EnumValueConvert","convertJObject","obj","enumValue","enumType","jobj","Object","initFromJobject","content","assign","DropDownControl","DropDownListControlConvert","convertToObject","dropDownListControl","valueType","enumValues","jarray_1","convertor_1","forEach","element","push","initFromObject","control","Array","convertor","NumberRangeControl","HelpContol","CheckboxGroupControl","DateRangeControl","YearControl","DateRangeValue","isEmpty","startTime","endTime","setOriginalValue","formatted","split","delimiter","clearValue","getOriginalValue","undefined","clear$","emit","EventEmitter","TextValue","Error","data","SearchValue","DateValue","date","NumberRangeValue","startValue","endValue","begin","end","parseFloat","NumberRangeValueConvertor","dropDownListValue","numberRangeValue","DropDownListValue","DropDownListValueConvert","HelpValue","getPropValue","helpItem","args","length","arg","shift","valueField","textValue","valueArr","map","cloneDeep","join","getTextValue","textField","textArr","hasOwnProperty","CheckboxGroupValue","setValue","valueChanged","DateRangeTimeValue","DateRangeTimeControl","RadioGroupValue","getValueText","RadioControl","YearValue","MonthControl","MonthValue","YearRangeValue","YearRangeControl","MonthRangeValue","MonthRangeControl","InputGroupValue","targetField","_this","item","isInputText","trim","InputGroupControl","isRequired","required","DialogConfig","DialogButtonConfig","ListFilterService","fieldSchemasConvert","filedSchemas","fieldConfigs","filedSchema","fieldConfig","id","labelCode","code","placeHolder","beginPlaceHolder","endPlaceHolder","controltype","getTextControl","getSearchControl","getDateControl","getDateRangeControl","getYearRangeControl","getMonthRangeControl","getDateRangeTimeControl","getYearControl","getMonthControl","getDropDownControl","getNumberRangeControl","getLookUpEditControl","getCheckboxGroupControl","getRadioControl","getInputGroupControl","enableClear","textControl","placeholder","isExtend","showLabel","inputGroupControl","editable","groupText","usageMode","dialogOptions","setInputGroupDialog","modalConfig","click","dateControl","format","compareType","yearControl","monthControl","numberRangeControl","precision","bigNumber","searchControl","dropdowncontrol","lookupEdit","uri","idField","helpId","mapFields","context","preEventCmd","postEventCmd","enableFullTree","loadTreeDataType","singleSelect","expandLevel","enableCascade","displayType","clearFields","enableMultiFieldSearch","checkboxGroupcontrol","dateRangeControl","yearRangeControl","monthRangeControl","setValues","modalConfigData","dialogConfig","modalId","JSON","parse","replace","showHeader","title","width","height","setInputGroupDialogButtons","buttonData","button","text","appearance","class","cls","handle","Injectable","providedIn","__assign","t","s","i","n","arguments","p","call","apply","__read","o","m","Symbol","iterator","r","e","ar","next","done","error","Equal","GreaterThan","GreaterThanOrEqual","LessThan","LessThanOrEqual","Like","In","Value","Express","And","Or","TextHandler","convert","qc","tv","keys","FilterField","fieldCode","Compare","CompareType","Relation","RelationType","Expresstype","ValueType","DateRangeHandler","arr","drv","DropDownHandler","ddv","NumberRangeHandler","nrv","SmartHelpHandler","shv","arr_1","SearchHandler","DateHandler","CheckboxGroupHandler","cbgv","CheckboxArr","DateRangeTimeHandler","RadioHandler","radiov","MonthRangeHandler","YearRangeHandler","MonthHandler","YearHandler","InputGroupHandler","igv","itemValue","QueryConditionHandlerFactory","getInstance","_instance","getHandler","controlType","queryConditionHandlerMapping","get","Map","set","QuerySolutionService","setFilterConditions","params","queryConditionHandler","filterConditionList","__spread","concat","QueryCondition","BetWeen","SmartHelp","Enum","CheckboxEnumValue","ConvertorService","getFeildConfigs","selectedConditions","fieldsConfigs","condition","fieldName","getSelectedFieldConditions","fileds","selectedFieldConditions","tempSelectedFieldConditions","arrayClone","filed","getDropListEnumValues","tempIndex","findIndex","x","getNewFieldConditions","enumValues_1","enumValues_2","enumValues_3","getCheckGroupEnumValues","selectedFieldCondition","getTextValueFieldCondition","getDateRangeValueFieldCondition","getDateRangeTimeValueFieldCondition","getNumberRangeValueFieldCondition","getSmartHelpValueFieldCondition","getDropDownListValueFieldCondition","getSearchValueFieldCondition","getDateValueFieldCondition","getCheckboxGroupValueFieldCondition","getRadioValueFieldCondition","getInputGroupValueFieldCondition","relationType","input","result","LISTFILTER_HANDLER_TOKEN","InjectionToken","defineProperty","ListFilterComponent","_defaultValue","configs","defaultEmptyValueSearch","setTimeout","setFilterValue","_filterList","filterList","initFilterList","ngOnInit","canShowMoreIcon","ngAfterViewInit","autoWidth","formExpand","filterMainBasisRef","basicList","nativeElement","querySelectorAll","basicWidth","k","offW","Math","ceil","offsetWidth","render","setStyle","ngOnDestroy","floatPanel","overLayService","destory","listFilterConditions","extendFilterList","showFilterList","filterDatas","filterService","convertorService","stagListFilterConditions","field","_basisFilterList","filter","conditionChangeHandler","inSetCurrentFilterConditions","requiredListInit","cd","detectChanges","listfilterHandler","setCurrentFilterConditions","getStyle","currentItem","filterClass","showMoreIcon","canSubmitFilter","requirelist","formCanSubmit","mrv","yrv","sv","dv","mv","yv","onSearch","$event","disabled","searchChange","conditions","instance","canSubmit","requiredListFilter","liveSearch","submit","filterClick","listSearch","showFilter","listSearchCancel","type","filterlist","queryList","handler","showExpandTag","query","stringify","getFilterData","getShowLength","resetSearch","listFilterCondition","listFilter","clear","UPDATE_FILTER_VALUES_TIMER","clearTimeout","_filters","markForCheck","v","find","c","getValue","requiredList","listitem","clearFilterValue","fields","toLowerCase","indexOf","updateValues","values","fields_1","f","buildSmartHelpKey","idService","pathArr","prefix","location","hash","pathname","encrypt","searchEmit","conditionsChange","floatFilterOpen","evt","registerMouseEvent","contains","target","nodeName","className","closest","Component","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","Renderer2","Injector","decorators","Optional","ViewChild","Input","Output","injector","alLeft","autoLabel","filterPaddingNone","localeIds","en","zh-CHS","currentLocale","isControlInline","fieldCodeOfClearFields","LOCALE_ID","InjectFlags","IdService","OverLayHiddenService","SolutionService","getGuid","s4","random","toString","substring","getConditionItemTitle","addFilterEditorInstance","cmpIns","filterEditors","InputComponent","extend","showlabel","solutionService","ngOnChanges","InputChanged","searchHandle","ElementRef","HostBinding","SearchComponent","changes","groupIcon","HelpComponent","getHelpBindingInfo","subscribe","currentValue","firstChange","some","selectedDataHandler","selectedItem","helpValue","helpList_1","hostRef","clearData","changeFields","of","DateComponent","initDate","showType","returnFormat","dateFormat","onDateChange","event","returnFormatted","DropDownComponent","getDataSource","initialValue","selectedItemId","dropDownList","dropDownListDataSource","onClear","NumberComponent","_item","nr","constructMultiFieldNumberRange","min","max","beginValue","numberChange","dataArray","beginValueChange","endValueChange","canNull","CheckboxValue","FilterCheckboxComponent","checkValue","checkboxList","checkboxDataSource","checkboxValue","selectCheck","cla","DateRangeComponent","rangeDate","itemDateFormat","showTime","rangeDateValue","getDate","dateString","cdr","ListFilterCommonComponent","encapsulation","ViewEncapsulation","None","ControlTypeXPipe","transform","Pipe","RadioValue","FilterRadioComponent","radioValue","orginalValue","radioList","radioDataSource","FilterInputGroupComponent","constructTextItem","_inputItem","textItem","textValueObj","testId","getInputGroupBindingInfo","onClick","options","selectedItems","inputgroup","isTextFromDialog","textFormDialog","onBlur","ClearFieldsDirective","ngCtrl","valueChanges","dirty","listFilterCmp","conditionItem","Directive","NgControl","Self","inject","ListFilterModule","NgModule","declarations","imports","CommonModule","FormsModule","InputGroupModule","FarrisDatePickerModule","DatalistModule","ComboListModule","LookupModule","FarrisFormsModule","NumberSpinnerModule","PerfectScrollbarModule","LocaleModule","forRoot","providers","exports","listFilterItem","setWidth","parseInt","getWidth","_id","_groupName","listFilterGroup","responsedIndex","listItems","ConditionValueConvert","conditionValue","RadioEnumValue","LIST","TREELIST","ControlConvert"],"mappings":"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","sourcesContent":["import { IControl } from \"../controltype/icontrol\";\r\nimport { IValue } from '../conditionvalue/ivalue';\r\n\r\n/**\r\n * å­æ®µéç½®\r\n */\r\nexport class FieldConfig {\r\n\r\n    /**\r\n     * å­æ®µID\r\n     */\r\n    id?: string;\r\n\r\n    /**\r\n     * å­æ®µæ ç­¾ï¼å­æ®µç¼å·çå¯ä¸æ è¯\r\n     */\r\n    labelCode: string;\r\n\r\n    /**\r\n     * å­æ®µç¼å·\r\n     */\r\n    code?: string;\r\n\r\n    /**\r\n     * å­æ®µåç§°\r\n     */\r\n    name?: string;\r\n\r\n    /**\r\n     * æ§ä»¶ç±»åï¼ç®ååæ¬ææ¬ç±»åï¼ä¸æåè¡¨ï¼æ¥æåºé´ï¼æ°å­åºé´ï¼å¸®å©ç±»å\r\n     * æ§ä»¶ç±»åä¸ºIControlæ¥å£ï¼æ ¹æ®ä¸åçæ§ä»¶ç±»åå¯¹åºä¸åçå®ç°ç±»ï¼å·ä½å¦ä¸ï¼\r\n     * 1. ææ¬ç±»åï¼TextControl\r\n     * 2. ä¸æåè¡¨ï¼DropDownListControl\r\n     * 3. æ¥æåºé´ï¼DateRangeControl\r\n     * 4. æ°å­åºé´ï¼NumberRangeControl\r\n     * 5. å¸®å©ç±»åï¼SmartHelpContol\r\n     */\r\n    control?: IControl;\r\n\r\n    /** è¡¨åæ°æ® */\r\n    value?: any;\r\n\r\n    // é»è®¤æ¾ç¤º\r\n    placeHolder?: string;\r\n    beginPlaceHolder?: string;\r\n    endPlaceHolder?: string;\r\n}\r\n","export enum ControlType {\r\n    Text = 0,\r\n    //DateTime=1,\r\n    Help = 1,\r\n    DropDown = 2,\r\n    DateRange = 3,\r\n    NumberRange = 4,\r\n    Search = 5,\r\n    Date = 6,\r\n    CheckboxGroup = 7,\r\n    DateRangeTime = 8,\r\n    Radio = 9,\r\n    Year = 10,\r\n    Month = 11,\r\n    MonthRange = 12,\r\n    YearRange = 13,\r\n    InputGroup = 14\r\n}\r\n","import { IControl } from \"../icontrol\";\r\nimport { ControlType } from \"../../controltype\";\r\n\r\n/**\r\n * ææ¬æ§ä»¶\r\n */\r\nexport class TextControl implements IControl{\r\n    \r\n    /**\r\n     * è·åæ§ä»¶ç±»åï¼è¿åå¼ï¼ææ¬æ§ä»¶ç±»å\r\n     */\r\n    getControlType(): ControlType {\r\n        return ControlType.Text;\r\n    }\r\n\r\n    /**\r\n     * é»è®¤æ¾ç¤º\r\n     */\r\n    placeholder:string;\r\n    /**\r\n     * æ¯å¦æ¯å±ç¤ºå¨æ©å±åºååç\r\n     */\r\n    isExtend:boolean;\r\n    /**æ¯å¦æ¾ç¤ºlabel */\r\n    showLabel:boolean;\r\n    /**æ¯å¦å¿å¡« */\r\n    required:boolean;\r\n}","import { IControl } from \"../icontrol\";\r\nimport { ControlType } from \"../../controltype\";\r\n\r\n/**\r\n * æç´¢æ§ä»¶\r\n */\r\nexport class SearchControl implements IControl{\r\n    \r\n    /**\r\n     * è·åæ§ä»¶ç±»åï¼è¿åå¼ï¼æç´¢æ§ä»¶ç±»å\r\n     */\r\n    getControlType(): ControlType {\r\n        return ControlType.Search;\r\n    }\r\n\r\n    /**\r\n     * æç´¢æ¡é»è®¤æ¾ç¤º\r\n     */\r\n    placeholder:string;\r\n    \r\n    /**\r\n     * æ¯å¦æ¯å±ç¤ºå¨æ©å±åºååç\r\n     */\r\n    isExtend:boolean;\r\n\r\n    /**æ¯å¦æ¾ç¤ºlabel */\r\n    showLabel:boolean;\r\n\r\n    /**æ¯å¦å¿å¡« */\r\n    required:boolean;\r\n}","import { IControl } from \"../icontrol\";\r\nimport { ControlType } from \"../../controltype\";\r\nimport { CompareType } from '../../comparetype';\r\n\r\n/**\r\n * æ¥ææ§ä»¶\r\n */\r\nexport class DateControl implements IControl{\r\n\r\n    /**\r\n     * è·åæ§ä»¶ç±»å\r\n     */\r\n    getControlType(): ControlType {\r\n        return ControlType.Date;\r\n    }\r\n\r\n    /**\r\n     * æ¥ææ ¼å¼\r\n     */\r\n    //format:string;\r\n    /**\r\n     * é»è®¤æ¾ç¤º\r\n     */\r\n    placeholder:string;\r\n    /**\r\n     * æ¯å¦æ¯å±ç¤ºå¨æ©å±åºååç\r\n     */\r\n    isExtend:boolean;\r\n\r\n    /**æ¯å¦æ¾ç¤ºlabel */\r\n    showLabel:boolean;\r\n    /**æ¯å¦å¿å¡« */\r\n    required:boolean;\r\n    /**\r\n     * æ¥ææ ¼å¼\r\n     */\r\n    format:string;\r\n    /**\r\n     * æç´¢æ¥æç±»å\r\n     */\r\n    compareType:CompareType;\r\n    showType:string;\r\n}","export enum EnumType {\r\n    IntType = 0,\r\n    StringType = 1,\r\n    BoolType = 2\r\n}\r\n","import { IEnumValue } from \"./ienumvalue\";\r\nimport { EnumType } from \"./enumtype\";\r\n\r\n/**\r\n * ä¸æåè¡¨Integerç±»å\r\n */\r\nexport class EnumIntegerValue implements IEnumValue{\r\n    getEnumType(): EnumType {\r\n        return EnumType.IntType;\r\n    }\r\n    \r\n    getEnumValueName():string{\r\n        return this.name;\r\n    }\r\n\r\n    getEnumValue():any{\r\n        return this.value;\r\n    }\r\n\r\n    /**\r\n     * ææ¬æ¾ç¤º\r\n     */\r\n    name:string;\r\n\r\n    /**\r\n     * å¼æ¾ç¤º\r\n     */\r\n    value:number;\r\n}","import { IEnumValue } from \"./ienumvalue\";\r\nimport { EnumType } from \"./enumtype\";\r\n\r\n/**\r\n * ä¸æåè¡¨Stringç±»å\r\n */\r\nexport class EnumStringValue implements IEnumValue{\r\n    getEnumType(): EnumType {\r\n        return  EnumType.StringType;\r\n    }\r\n\r\n    getEnumValueName():string{\r\n        return this.name;\r\n    }\r\n\r\n    getEnumValue():any{\r\n        return this.value;\r\n    }\r\n    \r\n    /**\r\n     * ææ¬æ¾ç¤º\r\n     */\r\n    name:string;\r\n\r\n    /**\r\n     * å¼æ¾ç¤º\r\n     */\r\n    value:string;\r\n}","import { IEnumValue } from \"./ienumvalue\";\r\nimport { EnumType } from \"./enumtype\";\r\n\r\n/**\r\n * ä¸æåè¡¨Boolç±»å\r\n */\r\nexport class EnumBoolValue implements IEnumValue{\r\n    \r\n    getEnumType(): EnumType {\r\n        return  EnumType.BoolType;\r\n    }\r\n\r\n    getEnumValueName():string{\r\n        return this.name;\r\n    }\r\n\r\n    getEnumValue():any{\r\n        return this.value;\r\n    }\r\n\r\n    /**\r\n     * ææ¬æ¾ç¤º\r\n     */\r\n    name:string;\r\n\r\n    /**\r\n     * å¼æ¾ç¤º\r\n     */\r\n    value:boolean;\r\n}","import { EnumType } from \"./enumtype\";\r\nimport { EnumIntegerValue } from \"./integerenumvalue\";\r\nimport { EnumStringValue } from \"./stringenumvalue\";\r\nimport { EnumBoolValue } from \"./boolenumvalue\";\r\n\r\nexport interface IEnumValue{\r\n    getEnumType():EnumType;\r\n    getEnumValueName():string;\r\n    getEnumValue():any;\r\n}\r\n\r\nexport class EnumValueConvert{\r\n\r\n    convertJObject(obj:IEnumValue):Object{\r\n        let enumValue=obj as IEnumValue;\r\n        let enumType=enumValue.getEnumType();\r\n        let jobj=new Object();\r\n        jobj[\"Type\"]=enumType;\r\n        jobj[\"Content\"]=enumValue;\r\n        return jobj;\r\n    }\r\n\r\n    initFromJobject(jobj:Object):IEnumValue{\r\n        let enumType=jobj[\"Type\"] as EnumType;\r\n        let content=jobj[\"Content\"] as IEnumValue;\r\n        if(enumType==EnumType.IntType){\r\n            return Object.assign(new EnumIntegerValue(),content) ;\r\n        }\r\n        else if(enumType==EnumType.BoolType){\r\n            return Object.assign(new EnumBoolValue(),content) ;\r\n        }\r\n        else{\r\n            return Object.assign(new EnumStringValue(),content) ;\r\n        }\r\n    }\r\n}","import { IControl } from \"../icontrol\";\r\nimport { ControlType } from \"../../controltype\";\r\nimport { EnumType } from \"./enumtype\";\r\nimport { IEnumValue, EnumValueConvert } from \"./ienumvalue\";\r\nimport { EnumStringValue } from \"./stringenumvalue\";\r\nimport { EnumBoolValue } from \"./boolenumvalue\";\r\nimport { EnumIntegerValue } from \"./integerenumvalue\";\r\n\r\n/**\r\n * ä¸æåè¡¨æ§ä»¶\r\n */\r\nexport class DropDownControl implements IControl{\r\n\r\n    /**\r\n     * è·åæ§ä»¶ç±»å\r\n     */\r\n    getControlType(): ControlType {\r\n        return ControlType.DropDown;\r\n    }\r\n\r\n    /**\r\n     * ä¸æå¼ç±»å\r\n     */\r\n    valueType:EnumType;\r\n    /**\r\n     * é»è®¤æ¾ç¤º\r\n     */\r\n    placeholder:string;\r\n    /**\r\n     * ä¸ææ°æ®æºåè¡¨\r\n     * è¯¥å±æ§ä¸ºIEnumValueæ¥å£ç±»åï¼å·ä½å®ç°ç±»å¦ä¸ï¼\r\n     * 1.å¸å°ç±»åï¼EnumBoolValue,å¸å°ç±»åçæ§ä»¶ä¼è½¬æä¸æåè¡¨ï¼å®ç°ç±»ä½¿ç¨EnumBoolValue\r\n     * 2.å­ç¬¦ä¸²ç±»åï¼EnumStringValue\r\n     * 3.æ´åç±»åï¼EnumIntegerValue ä¾å¦Radio Buttonç±»åéè¦ä½¿ç¨EnumIntegerValueå®ç°ç±»\r\n     */\r\n    enumValues:Array<IEnumValue>;\r\n\r\n    /**\r\n     * æ¯å¦æ¯å±ç¤ºå¨æ©å±åºååç\r\n     */\r\n    isExtend:boolean;\r\n\r\n    /**æ¯å¦æ¾ç¤ºlabel */\r\n    showLabel:boolean;\r\n    /**æ¯å¦å¿å¡« */\r\n    required:boolean;\r\n}\r\n\r\n/**\r\n * ä¸æåè¡¨æ§ä»¶åºååä¸ååºååå¨\r\n */\r\nexport class DropDownListControlConvert{\r\n\r\n    /**\r\n     * åºåå\r\n     * @param obj ä¸æåè¡¨æ§ä»¶å®ä½\r\n     */\r\n    convertToObject(obj:DropDownControl){\r\n        let dropDownListControl= obj as DropDownControl;\r\n        let jobj=new Object();\r\n        jobj[\"valueType\"]=dropDownListControl.valueType;\r\n        if(dropDownListControl.enumValues!=null){\r\n            let jarray=jobj[\"enumValues\"]=[];\r\n            let convertor=new EnumValueConvert();\r\n            dropDownListControl.enumValues.forEach(element => {\r\n                if(dropDownListControl.valueType==EnumType.BoolType){\r\n                    jarray.push(convertor.convertJObject(Object.assign(new EnumBoolValue(),element)));\r\n                }\r\n                else if(dropDownListControl.valueType==EnumType.IntType){\r\n                    jarray.push(convertor.convertJObject(Object.assign(new EnumIntegerValue(),element)));\r\n                }\r\n                else{\r\n                    jarray.push(convertor.convertJObject(Object.assign(new EnumStringValue(),element)));\r\n                }\r\n            });\r\n        }\r\n        return jobj;\r\n    }\r\n\r\n    /**\r\n     * ååºåå\r\n     * @param jobj ä¸æåè¡¨æ§ä»¶å®ä½åºåååçJSONå¯¹è±¡\r\n     */\r\n    initFromObject(jobj:Object):DropDownControl{\r\n        let control=new DropDownControl();\r\n        if(jobj[\"valueType\"]!=null){\r\n            control.valueType=jobj[\"valueType\"] as number;\r\n        }\r\n        if(jobj[\"enumValues\"]!=null){\r\n            control.enumValues=new Array<IEnumValue>();\r\n            jobj[\"enumValues\"].forEach(element => {\r\n                let convertor=new EnumValueConvert();\r\n                control.enumValues.push(convertor.initFromJobject(element));\r\n            });\r\n        }\r\n        return control;\r\n    }\r\n}","import { IControl } from \"../icontrol\";\r\nimport { ControlType } from \"../../controltype\";\r\n\r\n/**\r\n * æ°å­åºé´æ§ä»¶\r\n */\r\nexport class NumberRangeControl implements IControl{\r\n\r\n    /**\r\n     * è·åæ§ä»¶ç±»å\r\n     */\r\n    getControlType(): ControlType {\r\n        return ControlType.NumberRange;\r\n    }\r\n\r\n    /**\r\n     * é¿åº¦\r\n     */\r\n    length:number;\r\n\r\n    /**\r\n     * ç²¾åº¦\r\n     */\r\n    precision:number;\r\n    /**\r\n     * é»è®¤æ¾ç¤º\r\n     */\r\n    placeholder:string;\r\n    beginPlaceHolder:string;\r\n    endPlaceHolder:string;\r\n    /**\r\n     * æ¯å¦æ¯å±ç¤ºå¨æ©å±åºååç\r\n     */\r\n    isExtend:boolean;\r\n\r\n    /**æ¯å¦æ¾ç¤ºlabel */\r\n    showLabel:boolean;\r\n\r\n    /**æ¯å¦å¿å¡« */\r\n    required:boolean;\r\n    /**æ¯å¦æ¯å¤§æ° */\r\n    bigNumber:boolean;\r\n}","import { IControl } from '../icontrol';\r\nimport { ControlType } from '../../controltype';\r\nimport { DisplayType } from './displayType';\r\n\r\n/**\r\n * å¸®å©æ§ä»¶\r\n */\r\nexport class HelpContol implements IControl {\r\n    /**\r\n     * é»è®¤æ¾ç¤º\r\n     */\r\n    placeholder: string;\r\n    /**\r\n     * å¸®å©æ°æ®æº\r\n     */\r\n    uri: string;\r\n\r\n    /**\r\n     * å¸®å©çææ¬æ¾ç¤ºå­æ®µ\r\n     */\r\n    textField: string;\r\n\r\n    /**\r\n     * å¸®å©å¼å­æ®µ\r\n     */\r\n    valueField: string;\r\n\r\n    idField: string;\r\n    helpId: string;\r\n    displayType: DisplayType;\r\n\r\n    /**\r\n     * å­æ®µæ å°ä¿¡æ¯\r\n     */\r\n    mapFields: any;\r\n\r\n    /**\r\n     * æ¯å¦æ¯å±ç¤ºå¨æ©å±åºååç\r\n     */\r\n    isExtend: boolean;\r\n\r\n    /** æ¯å¦æ¾ç¤ºlabel */\r\n    showLabel: boolean;\r\n\r\n    /** æ¯å¦å¿å¡« */\r\n    required: boolean;\r\n\r\n    /**\r\n     * å¸®å©åäºä»¶\r\n     */\r\n    preEventCmd: any;\r\n\r\n    title: string;\r\n\r\n    /**\r\n     * å¸®å©åäºä»¶\r\n     */\r\n    postEventCmd: any;\r\n\r\n    /**\r\n     * è¿è¡æ¶åæ°éç½®ä¼ é\r\n     */\r\n    context: any;\r\n\r\n    /** å¯ç¨æé å®æ´æ è¿æ»¤ */\r\n    enableFullTree: boolean;\r\n    /** æ å½¢å¸®å©æ°æ®å è½½æ¹å¼ï¼ default: åç½®åæ°ï¼ loadall: å è½½ææ layerloadï¼åå±å è½½ */\r\n    loadTreeDataType: 'default' | 'loadall' | 'layerload';\r\n    /** æ¯å¦æ¯æå¤é */\r\n    singleSelect: boolean;\r\n    /** å±å¼å°æå®çº§æ° */\r\n    expandLevel: number;\r\n    /** æ¯å¦å¯ç¨çº§èéæ©æ§å¶éé¡¹ */\r\n    enableCascade: boolean;\r\n    /**\r\n     * è·åæ§ä»¶ç±»å\r\n     */\r\n    getControlType(): ControlType {\r\n        return ControlType.Help;\r\n    }\r\n    /**\r\n  * å¼ååæ¶ï¼éè¦æ¸ç©ºåªäºå­æ®µ\r\n  */\r\n    clearFields: string;\r\n    /** åè®¸ç¼è¾ */\r\n    editable?: boolean;\r\n    /** å¤å­æ®µæ¥è¯¢ */\r\n    enableMultiFieldSearch?: boolean;\r\n}\r\n","import { IControl } from \"../icontrol\";\r\nimport { ControlType } from \"../../controltype\";\r\nimport { CheckboxIEnumValue } from './ienumvalue';\r\n\r\n/**\r\n * å¤éç»æ§ä»¶\r\n */\r\nexport class CheckboxGroupControl implements IControl{\r\n\r\n    /**\r\n     * è·åæ§ä»¶ç±»å\r\n     */\r\n    getControlType(): ControlType {\r\n        return ControlType.CheckboxGroup;\r\n    }\r\n\r\n    /**\r\n     * å¤éç»æ°æ®æºåè¡¨\r\n     */\r\n    enumValues:Array<CheckboxIEnumValue>;\r\n    /**\r\n     * æ¯å¦æ¯å±ç¤ºå¨æ©å±åºååç\r\n     */\r\n    isExtend:boolean;\r\n\r\n    /**æ¯å¦æ¾ç¤ºlabel */\r\n    showLabel:boolean;\r\n    /**æ¯å¦å¿å¡« */\r\n    required:boolean;\r\n}","import { IControl } from \"../icontrol\";\r\nimport { ControlType } from \"../../controltype\";\r\n\r\n/**\r\n * æ¥æåºé´æ§ä»¶\r\n */\r\nexport class DateRangeControl implements IControl{\r\n\r\n    /**\r\n     * è·åæ§ä»¶ç±»å\r\n     */\r\n    getControlType(): ControlType {\r\n        return ControlType.DateRange;\r\n    }\r\n\r\n    /**\r\n     * é»è®¤æ¾ç¤º\r\n     */\r\n    placeholder:string;\r\n    beginPlaceHolder:string;\r\n    endPlaceHolder:string;\r\n    /**\r\n     * æ¥ææ ¼å¼\r\n     */\r\n    format:string;\r\n    /**\r\n     * æ¯å¦æ¯å±ç¤ºå¨æ©å±åºååç\r\n     */\r\n    isExtend:boolean;\r\n    \r\n    /**æ¯å¦æ¾ç¤ºlabel */\r\n    showLabel:boolean;\r\n    /**æ¯å¦å¿å¡« */\r\n    required:boolean;\r\n    showType:string;\r\n}","import { IControl } from \"../icontrol\";\r\nimport { ControlType } from \"../../controltype\";\r\nimport { CompareType } from '../../comparetype';\r\n\r\n/**\r\n * å¹´ä»½æ§ä»¶\r\n */\r\nexport class YearControl implements IControl{\r\n\r\n    /**\r\n     * è·åæ§ä»¶ç±»å\r\n     */\r\n    getControlType(): ControlType {\r\n        return ControlType.Year;\r\n    }\r\n\r\n    /**\r\n     * æ¥ææ ¼å¼\r\n     */\r\n    //format:string;\r\n    /**\r\n     * é»è®¤æ¾ç¤º\r\n     */\r\n    placeholder:string;\r\n    /**\r\n     * æ¯å¦æ¯å±ç¤ºå¨æ©å±åºååç\r\n     */\r\n    isExtend:boolean;\r\n\r\n    /**æ¯å¦æ¾ç¤ºlabel */\r\n    showLabel:boolean;\r\n    /**æ¯å¦å¿å¡« */\r\n    required:boolean;\r\n    /**\r\n     * æ¥ææ ¼å¼\r\n     */\r\n    format:string;\r\n    /**\r\n     * æç´¢æ¥æç±»å\r\n     */\r\n    compareType:CompareType;\r\n    showType:string;\r\n}","import { EventEmitter } from '@angular/core';\r\nimport { IValue } from \"./ivalue\";\r\nimport { ControlType } from \"../controltype\";\r\n\r\nexport class DateRangeValue implements IValue {\r\n    clear$ = new EventEmitter();\r\n\r\n\r\n    startTime: string;\r\n    endTime: string;\r\n\r\n    constructor(value: { startTime: string, endTime: string } = { startTime: '', endTime: '' }) {\r\n        this.startTime = value.startTime;\r\n        this.endTime = value.endTime;\r\n    }\r\n    isEmpty(): boolean {\r\n        return !this.startTime || !this.endTime;\r\n    }\r\n\r\n    setOriginalValue(value: { formatted: string, delimiter: string }): void {\r\n        if (value.formatted) {\r\n            this.startTime = value.formatted.split(value.delimiter)[0];\r\n            this.endTime = value.formatted.split(value.delimiter)[1];\r\n        } else {\r\n            this.clearValue();\r\n        }\r\n    }\r\n    getOriginalValue() {\r\n        return `${this.startTime}~${this.endTime}`;\r\n    }\r\n    getControlType(): ControlType {\r\n        return ControlType.DateRange;\r\n    }\r\n    clearValue(): void {\r\n        this.startTime = undefined;\r\n        this.endTime = undefined;\r\n\r\n        this.clear$.emit();\r\n    }\r\n}","import { IValue } from './ivalue';\r\nimport { ControlType } from '../controltype';\r\nimport { EventEmitter } from '@angular/core';\r\n\r\nexport class TextValue implements IValue {\r\n    value: string;\r\n    clear$ = new EventEmitter();\r\n    constructor(data: string = '') {\r\n        this.value = data;\r\n    }\r\n    getControlType(): ControlType {\r\n        return ControlType.Text;\r\n    }\r\n    clearValue(): void {\r\n        this.value = undefined;\r\n        this.clear$.emit();\r\n    }\r\n    setOriginalValue(value: any): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    getOriginalValue() {\r\n        return this.value;\r\n    }\r\n    isEmpty(): boolean {\r\n        return !this.value;\r\n    }\r\n}\r\n","import { IValue } from \"./ivalue\";\r\nimport { ControlType } from \"../controltype\";\r\nimport { EventEmitter } from \"@angular/core\";\r\n\r\nexport class SearchValue implements IValue {\r\n\r\n    value: string;\r\n    clear$ = new EventEmitter();\r\n    constructor(data: string = '') {\r\n        this.value = data;\r\n    }\r\n\r\n    \r\n    getControlType(): ControlType {\r\n        return ControlType.Search;\r\n    }\r\n\r\n    clearValue(): void {\r\n        this.value = '';\r\n        this.clear$.emit();\r\n    }\r\n\r\n    setOriginalValue(value: any): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    getOriginalValue() {\r\n        return this.value;\r\n    }\r\n\r\n    isEmpty(): boolean {\r\n        return !this.value;\r\n    }\r\n}\r\n","import { IValue } from \"./ivalue\";\r\nimport { ControlType } from \"../controltype\";\r\nimport { EventEmitter } from \"@angular/core\";\r\n\r\nexport class DateValue implements IValue{\r\n \r\n    clear$ = new EventEmitter();\r\n    value: string;\r\n    \r\n    constructor(date: string = ''){\r\n        this.value = date;\r\n    }\r\n\r\n    setOriginalValue(value: any): void {\r\n        this.value = value.formatted;\r\n    }\r\n    getOriginalValue() {\r\n        return this.value;\r\n    }\r\n    getControlType(): ControlType {\r\n        return ControlType.Date;\r\n    }\r\n \r\n    isEmpty(): boolean {\r\n        return !this.value;\r\n    }\r\n    clearValue(): void {\r\n        this.value = undefined;\r\n        this.clear$.emit();\r\n    }\r\n}","import { IValue } from \"./ivalue\";\r\nimport { ControlType } from \"../controltype\";\r\nimport { EventEmitter } from \"@angular/core\";\r\n\r\nexport class NumberRangeValue implements IValue {\r\n\r\n    startValue: number;\r\n    endValue: number;\r\n\r\n    clear$ = new EventEmitter();\r\n\r\n    constructor(data: { startValue: string, endValue: string } = { startValue: '', endValue: '' }) {\r\n        this.startValue = data.startValue ? parseFloat(data.startValue) : null;\r\n        this.endValue = data.endValue ? parseFloat(data.endValue) : null;\r\n    }\r\n\r\n\r\n    isEmpty(): boolean {\r\n        return (this.startValue == null && this.endValue == null);\r\n    }\r\n\r\n    getControlType(): ControlType {\r\n        return ControlType.NumberRange;\r\n    }\r\n\r\n    clearValue(): void {\r\n        this.startValue = undefined;\r\n        this.endValue = undefined;\r\n        this.clear$.emit();\r\n    }\r\n    setOriginalValue(value: any): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    getOriginalValue() {\r\n        return {\r\n            begin: this.startValue,\r\n            end: this.endValue\r\n        };\r\n    }\r\n\r\n}\r\n\r\nexport class NumberRangeValueConvertor {\r\n    convertToObject(obj: IValue): Object {\r\n        let dropDownListValue = obj as NumberRangeValue;\r\n        let jobj = new Object();\r\n        jobj[\"startValue\"] = dropDownListValue.startValue;\r\n        jobj[\"endValue\"] = dropDownListValue.endValue;\r\n        return jobj;\r\n    }\r\n\r\n    initFromObject(jobj: Object): NumberRangeValue {\r\n        let numberRangeValue = new NumberRangeValue();\r\n        if (!!(jobj[\"startValue\"])) {\r\n            numberRangeValue.startValue = jobj[\"startValue\"] as number;\r\n        }\r\n        if (!!(jobj[\"endValue\"])) {\r\n            numberRangeValue.endValue = jobj[\"endValue\"] as number;\r\n        }\r\n        return numberRangeValue;\r\n    }\r\n}","import { IValue } from \"./ivalue\";\r\nimport { ControlType } from \"../controltype\";\r\nimport { IEnumValue, EnumValueConvert } from \"../controltype/dropdownlist/ienumvalue\";\r\nimport { EventEmitter } from \"@angular/core\";\r\n\r\nexport class DropDownListValue implements IValue{\r\n\r\n    clear$ = new EventEmitter();\r\n\r\n    clearValue(): void {\r\n        this.value = undefined;\r\n        this.clear$.emit();\r\n    }\r\n    setOriginalValue(value: any): void {\r\n        this.value = value;\r\n    }\r\n    getOriginalValue() {\r\n        return this.value;\r\n    }\r\n    getControlType(): ControlType {\r\n        return ControlType.DropDown;\r\n    }\r\n    value: string;\r\n    constructor(data: string = ''){\r\n        this.value = data;\r\n    }\r\n    isEmpty(): boolean {\r\n        return !this.value;\r\n    }\r\n}\r\n\r\nexport class DropDownListValueConvert{\r\n    convertToObject(obj:IValue):Object{\r\n        let dropDownListValue=obj as DropDownListValue;\r\n        let jobj=new Object();\r\n        let convertor=new EnumValueConvert();\r\n        if(!!(dropDownListValue.value)){\r\n            // jobj[\"value\"]=convertor.convertJObject(dropDownListValue.value);\r\n            jobj[\"value\"] = dropDownListValue.value;\r\n        }\r\n        return jobj;\r\n    }\r\n\r\n    initFromObject(jobj:Object):DropDownListValue{\r\n        let dropDownListValue=new DropDownListValue();\r\n        if(!!(jobj[\"value\"])){\r\n            let convertor=new EnumValueConvert();\r\n            // dropDownListValue.value=convertor.initFromJobject(jobj[\"value\"]);\r\n            dropDownListValue.value = jobj[\"value\"];\r\n        }\r\n        return dropDownListValue;\r\n    }\r\n}\r\n\r\n","import { IValue } from \"./ivalue\";\r\nimport { ControlType } from \"../controltype\";\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { EventEmitter } from \"@angular/core\";\r\n\r\nexport class HelpValue implements IValue {\r\n\r\n    valueField: string;\r\n    value: any[];\r\n    textValue: string;\r\n    clear$ = new EventEmitter();\r\n\r\n    static getPropValue(helpItem: any, args: Array<string>): any {\r\n        if (args.length > 1) {\r\n            const arg = args.shift();\r\n            return helpItem[arg] ? this.getPropValue(helpItem[arg], args) : null;\r\n        }\r\n        return helpItem[args[0]];\r\n    }\r\n\r\n    clearValue(): void {\r\n        this.value = [];\r\n        this.valueField = undefined;\r\n        this.textValue = undefined;\r\n\r\n        this.clear$.emit();\r\n    }\r\n    setOriginalValue(value: any): void {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    getOriginalValue(): string {\r\n        const args = this.valueField.split('.');\r\n        const valueArr = this.value.map(helpItem => HelpValue.getPropValue(helpItem, cloneDeep(args)));\r\n        return valueArr && valueArr.length ? valueArr.join(',') : '';\r\n    }\r\n    getControlType(): ControlType {\r\n        return ControlType.Help;\r\n    }\r\n\r\n\r\n    constructor(data: {\r\n        value: any,\r\n        valueField: string,\r\n        textValue: string;\r\n    } = { value: [], valueField: undefined, textValue: undefined }) {\r\n        if (data.hasOwnProperty('textValue')) {// æ°ç»æï¼valueæ¯æ°ç»\r\n            this.valueField = data.valueField;\r\n            this.value = data.value;\r\n            this.textValue = data.textValue;\r\n        } else {// æ§ç»æï¼valueæ¯å¯¹è±¡\r\n            this.valueField = data.valueField;\r\n            this.value = data.value ? [data.value] : [];\r\n            this.textValue = 'help-text-value-null'; // æ§ç»ææ textValueå±æ§\r\n        }\r\n\r\n    }\r\n    isEmpty(): boolean {\r\n        return !this.valueField;\r\n    }\r\n\r\n    getTextValue(textField: string): string {\r\n        const args = textField.split('.');\r\n        const textArr = this.value.map(helpItem => HelpValue.getPropValue(helpItem, cloneDeep(args)));\r\n        return textArr && textArr.length ? textArr.join(',') : '';\r\n    }\r\n\r\n}\r\n","import { IValue } from './ivalue';\r\nimport { ControlType } from '../controltype';\r\nimport { EventEmitter } from '@angular/core';\r\nexport class CheckboxGroupValue implements IValue {\r\n    clear$ = new EventEmitter();\r\n    valueChanged = new EventEmitter();\r\n    value: any[];\r\n    constructor(value: any[] = []) {\r\n        this.value = value;\r\n    }\r\n    isEmpty(): boolean {\r\n        return this.value.length == 0;\r\n    }\r\n\r\n    clearValue(): void {\r\n        this.value = [];\r\n        this.clear$.emit();\r\n    }\r\n    setOriginalValue(value: any[]): void {\r\n        this.value = value;\r\n    }\r\n\r\n    setValue(value: any) {\r\n        this.value = value;\r\n        this.valueChanged.emit(this.value);\r\n    }\r\n\r\n    getOriginalValue() {\r\n        return this.value;\r\n    }\r\n    getControlType(): ControlType {\r\n        return ControlType.CheckboxGroup;\r\n    }\r\n}\r\n","import { IValue } from './ivalue';\r\nimport { ControlType } from '../controltype';\r\nimport { EventEmitter } from '@angular/core';\r\n\r\nexport class DateRangeTimeValue implements IValue {\r\n    startTime: string;\r\n    endTime: string;\r\n    clear$ = new EventEmitter();\r\n\r\n    constructor(value: { startTime: string, endTime: string } = { startTime: '', endTime: '' }) {\r\n        this.startTime = value.startTime;\r\n        this.endTime = value.endTime;\r\n    }\r\n    isEmpty(): boolean {\r\n        return !this.startTime || !this.endTime;\r\n    }\r\n\r\n    setOriginalValue(value: { formatted: string, delimiter: string }): void {\r\n        if (value.formatted) {\r\n            this.startTime = value.formatted.split(value.delimiter)[0];\r\n            this.endTime = value.formatted.split(value.delimiter)[1];\r\n        } else {\r\n            this.clearValue();\r\n        }\r\n    }\r\n    getOriginalValue() {\r\n        return `${this.startTime}~${this.endTime}`;\r\n    }\r\n    getControlType(): ControlType {\r\n        return ControlType.DateRangeTime;\r\n    }\r\n    clearValue(): void {\r\n        this.startTime = undefined;\r\n        this.endTime = undefined;\r\n\r\n        this.clear$.emit();\r\n    }\r\n}\r\n\r\n","import { IControl } from \"../icontrol\";\r\nimport { ControlType } from \"../../controltype\";\r\n\r\n/**\r\n * æ¥æåºé´å¸¦æ¶é´æ§ä»¶\r\n */\r\nexport class DateRangeTimeControl implements IControl{\r\n\r\n    /**\r\n     * è·åæ§ä»¶ç±»å\r\n     */\r\n    getControlType(): ControlType {\r\n        return ControlType.DateRangeTime;\r\n    }\r\n\r\n    /**\r\n     * é»è®¤æ¾ç¤º\r\n     */\r\n    placeholder:string;\r\n    beginPlaceHolder:string;\r\n    endPlaceHolder:string;\r\n    /**\r\n     * æ¥ææ ¼å¼\r\n     */\r\n    format:string;\r\n    /**\r\n     * æ¯å¦æ¯å±ç¤ºå¨æ©å±åºååç\r\n     */\r\n    isExtend:boolean;\r\n    \r\n    /**æ¯å¦æ¾ç¤ºlabel */\r\n    showLabel:boolean;\r\n    /**æ¯å¦å¿å¡« */\r\n    required:boolean;\r\n}","import { IValue } from \"./ivalue\";\r\nimport { ControlType } from \"../controltype\";\r\nimport { EventEmitter } from \"@angular/core\";\r\n\r\nexport class RadioGroupValue implements IValue {\r\n    value: string;\r\n    clear$ = new EventEmitter();\r\n    constructor(data: string = '') {\r\n        this.value = data;\r\n    }\r\n    clearValue(): void {\r\n        this.value = undefined;\r\n        this.clear$.emit();\r\n    }\r\n    setOriginalValue(value: any): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    getOriginalValue() {\r\n        return this.value;\r\n    }\r\n    getControlType(): ControlType {\r\n        return ControlType.Radio;\r\n    }\r\n\r\n    isEmpty(): boolean {\r\n        return !this.value;\r\n    }\r\n    getValueText(): string {\r\n        return this.value;\r\n    }\r\n}\r\n","import { IControl } from \"../icontrol\";\r\nimport { ControlType } from \"../../controltype\";\r\nimport { RadioIEnumValue } from './ienumvalue';\r\n\r\n/**\r\n * å¤éç»æ§ä»¶\r\n */\r\nexport class RadioControl implements IControl{\r\n\r\n    /**\r\n     * è·åæ§ä»¶ç±»å\r\n     */\r\n    getControlType(): ControlType {\r\n        return ControlType.Radio;\r\n    }\r\n\r\n    /**\r\n     * å¤éç»æ°æ®æºåè¡¨\r\n     */\r\n    enumValues:Array<RadioIEnumValue>;\r\n    /**\r\n     * æ¯å¦æ¯å±ç¤ºå¨æ©å±åºååç\r\n     */\r\n    isExtend:boolean;\r\n\r\n    /**æ¯å¦æ¾ç¤ºlabel */\r\n    showLabel:boolean;\r\n    /**æ¯å¦å¿å¡« */\r\n    required:boolean;\r\n}","import { IValue } from \"./ivalue\";\r\nimport { ControlType } from \"../controltype\";\r\nimport { EventEmitter } from \"@angular/core\";\r\n\r\nexport class YearValue implements IValue {\r\n\r\n    value: string;\r\n    clear$ = new EventEmitter();\r\n    constructor(date: string = '') {\r\n        this.value = date;\r\n    }\r\n\r\n    setOriginalValue(value: any): void {\r\n        this.value = value.formatted;\r\n    }\r\n    getOriginalValue() {\r\n        return this.value;\r\n    }\r\n    getControlType(): ControlType {\r\n        return ControlType.Date;\r\n    }\r\n\r\n    isEmpty(): boolean {\r\n        return !this.value;\r\n    }\r\n    clearValue(): void {\r\n        this.value = undefined;\r\n        this.clear$.emit();\r\n    }\r\n}\r\n","import { IControl } from \"../icontrol\";\r\nimport { ControlType } from \"../../controltype\";\r\nimport { CompareType } from '../../comparetype';\r\n\r\n/**\r\n * å¹´ææ§ä»¶\r\n */\r\nexport class MonthControl implements IControl{\r\n\r\n    /**\r\n     * è·åæ§ä»¶ç±»å\r\n     */\r\n    getControlType(): ControlType {\r\n        return ControlType.Month;\r\n    }\r\n\r\n    /**\r\n     * æ¥ææ ¼å¼\r\n     */\r\n    //format:string;\r\n    /**\r\n     * é»è®¤æ¾ç¤º\r\n     */\r\n    placeholder:string;\r\n    /**\r\n     * æ¯å¦æ¯å±ç¤ºå¨æ©å±åºååç\r\n     */\r\n    isExtend:boolean;\r\n\r\n    /**æ¯å¦æ¾ç¤ºlabel */\r\n    showLabel:boolean;\r\n    /**æ¯å¦å¿å¡« */\r\n    required:boolean;\r\n    /**\r\n     * æ¥ææ ¼å¼\r\n     */\r\n    format:string;\r\n    /**\r\n     * æç´¢æ¥æç±»å\r\n     */\r\n    compareType:CompareType;\r\n    showType:string;\r\n}","import { IValue } from \"./ivalue\";\r\nimport { ControlType } from \"../controltype\";\r\nimport { EventEmitter } from \"@angular/core\";\r\n\r\nexport class MonthValue implements IValue {\r\n    value: string;\r\n    clear$ = new EventEmitter();\r\n\r\n    constructor(date: string = '') {\r\n        this.value = date;\r\n    }\r\n    setOriginalValue(value: any): void {\r\n        this.value = value.formatted;\r\n    }\r\n    getOriginalValue() {\r\n        return this.value;\r\n    }\r\n    getControlType(): ControlType {\r\n        return ControlType.Date;\r\n    }\r\n\r\n    isEmpty(): boolean {\r\n        return !this.value;\r\n    }\r\n    clearValue(): void {\r\n        this.value = undefined;\r\n        this.clear$.emit();\r\n    }\r\n}\r\n","import { IValue } from \"./ivalue\";\r\nimport { ControlType } from \"../controltype\";\r\nimport { EventEmitter } from \"@angular/core\";\r\n\r\nexport class YearRangeValue implements IValue {\r\n    startTime: string;\r\n    endTime: string;\r\n    clear$ = new EventEmitter();\r\n    constructor(value: { startTime: string, endTime: string } = { startTime: '', endTime: '' }) {\r\n        this.startTime = value.startTime;\r\n        this.endTime = value.endTime;\r\n    }\r\n    setOriginalValue(value: { formatted: string, delimiter: string }): void {\r\n        if (value.formatted) {\r\n            this.startTime = value.formatted.split(value.delimiter)[0];\r\n            this.endTime = value.formatted.split(value.delimiter)[1];\r\n        } else {\r\n            this.clearValue();\r\n        }\r\n    }\r\n    getOriginalValue() {\r\n        return `${this.startTime}~${this.endTime}`;\r\n    }\r\n    getControlType(): ControlType {\r\n        return ControlType.DateRange;\r\n    }\r\n    clearValue(): void {\r\n        this.startTime = undefined;\r\n        this.endTime = undefined;\r\n        this.clear$.emit();\r\n    }\r\n\r\n    isEmpty(): boolean {\r\n        return !this.startTime || !this.endTime;\r\n    }\r\n}\r\n","import { IControl } from \"../icontrol\";\r\nimport { ControlType } from \"../../controltype\";\r\n\r\n/**\r\n * å¹´åº¦åºé´æ§ä»¶\r\n */\r\nexport class YearRangeControl implements IControl{\r\n\r\n    /**\r\n     * è·åæ§ä»¶ç±»å\r\n     */\r\n    getControlType(): ControlType {\r\n        return ControlType.YearRange;\r\n    }\r\n\r\n    /**\r\n     * é»è®¤æ¾ç¤º\r\n     */\r\n    placeholder:string;\r\n    beginPlaceHolder:string;\r\n    endPlaceHolder:string;\r\n    /**\r\n     * æ¥ææ ¼å¼\r\n     */\r\n    format:string;\r\n    /**\r\n     * æ¯å¦æ¯å±ç¤ºå¨æ©å±åºååç\r\n     */\r\n    isExtend:boolean;\r\n    \r\n    /**æ¯å¦æ¾ç¤ºlabel */\r\n    showLabel:boolean;\r\n    /**æ¯å¦å¿å¡« */\r\n    required:boolean;\r\n    showType:string;\r\n}","import { IValue } from \"./ivalue\";\r\nimport { ControlType } from \"../controltype\";\r\nimport { EventEmitter } from \"@angular/core\";\r\n\r\nexport class MonthRangeValue implements IValue {\r\n    clear$ = new EventEmitter();\r\n\r\n    startTime: string;\r\n    endTime: string;\r\n\r\n    constructor(value: { startTime: string, endTime: string } = { startTime: '', endTime: '' }) {\r\n        this.startTime = value.startTime;\r\n        this.endTime = value.endTime;\r\n    }\r\n    isEmpty(): boolean {\r\n        return !this.startTime || !this.endTime;\r\n    }\r\n\r\n    setOriginalValue(value: { formatted: string, delimiter: string }): void {\r\n        if (value.formatted) {\r\n            this.startTime = value.formatted.split(value.delimiter)[0];\r\n            this.endTime = value.formatted.split(value.delimiter)[1];\r\n        } else {\r\n            this.clearValue();\r\n        }\r\n    }\r\n    getOriginalValue() {\r\n        return `${this.startTime}~${this.endTime}`;\r\n    }\r\n    getControlType(): ControlType {\r\n        return ControlType.DateRange;\r\n    }\r\n    clearValue(): void {\r\n        this.startTime = undefined;\r\n        this.endTime = undefined;\r\n        this.clear$.emit();\r\n    }\r\n}\r\n\r\n","import { IControl } from \"../icontrol\";\r\nimport { ControlType } from \"../../controltype\";\r\n\r\n/**\r\n * å¹´æåºé´æ§ä»¶\r\n */\r\nexport class MonthRangeControl implements IControl{\r\n\r\n    /**\r\n     * è·åæ§ä»¶ç±»å\r\n     */\r\n    getControlType(): ControlType {\r\n        return ControlType.MonthRange;\r\n    }\r\n\r\n    /**\r\n     * é»è®¤æ¾ç¤º\r\n     */\r\n    placeholder:string;\r\n    beginPlaceHolder:string;\r\n    endPlaceHolder:string;\r\n    /**\r\n     * æ¥ææ ¼å¼\r\n     */\r\n    format:string;\r\n    /**\r\n     * æ¯å¦æ¯å±ç¤ºå¨æ©å±åºååç\r\n     */\r\n    isExtend:boolean;\r\n    \r\n    /**æ¯å¦æ¾ç¤ºlabel */\r\n    showLabel:boolean;\r\n    /**æ¯å¦å¿å¡« */\r\n    required:boolean;\r\n    showType:string;\r\n}","import { IValue } from \"./ivalue\";\r\nimport { ControlType } from \"../controltype\";\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { EventEmitter } from \"@angular/core\";\r\n\r\nexport class InputGroupValue implements IValue{\r\n\r\n    // å¯è½æ¯ç¨æ·æå¨è¾å¥çå­ç¬¦ä¸²ï¼ä¹å¯è½æ¯éè¿å¼¹çªè¿åçå¤ä¸ªå¼\r\n    value: any[];\r\n    // æ§ä»¶åæ¾ç¤ºçå¼\r\n    textValue: string;\r\n    // å¼¹çªæ¨¡å¼ä¸ï¼åå¼¹çªåè¡¨ååªä¸ªå­æ®µçå¼æ å°å°å½åå­æ®µ\r\n    textField: string;\r\n    // æ¯å¦æ¯æå¨è¾å¥çå¼\r\n    isInputText: boolean;\r\n\r\n    clear$ = new EventEmitter();\r\n\r\n    constructor(data: {\r\n        value: any,\r\n        textValue: string,\r\n        textField: string,\r\n        isInputText: boolean\r\n    } = {value: [], textValue: undefined, textField: undefined, isInputText: undefined}){\r\n        this.value = data.value;\r\n        this.textValue = data.textValue ? data.textValue.trim() : '';\r\n        this.textField = data.textField;\r\n        this.isInputText = data.isInputText;\r\n    }\r\n\r\n    getTextValue(targetField: string): string {\r\n        const args = targetField.split('.');\r\n        const textArr = this.value.map(item => this.getPropValue(item, cloneDeep(args)));\r\n        return textArr && textArr.length ? textArr.join(','): '';\r\n    }\r\n\r\n    getPropValue(item: any, args: Array<string>): any{\r\n        if(args.length > 1){\r\n            const arg = args.shift();\r\n            if(arg){\r\n                return item[arg] ? this.getPropValue(item[arg], args) : '';\r\n            }\r\n            else {\r\n                return '';\r\n            }\r\n        }\r\n        return item[args[0]];\r\n    }\r\n    getControlType(): ControlType {\r\n        return ControlType.InputGroup;\r\n    }\r\n\r\n    setOriginalValue(value: any) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    getOriginalValue(): string {\r\n        const args = this.textField.split('.');\r\n        const textArr = this.value.map(item => this.getPropValue(item, cloneDeep(args)));\r\n        return textArr && textArr.length ? textArr.join(','): '';\r\n    }\r\n\r\n    clearValue(): void {\r\n        this.value = [];\r\n        this.textValue = undefined;\r\n        this.textField = undefined;\r\n        this.isInputText = undefined;\r\n\r\n        this.clear$.emit();\r\n    }\r\n\r\n    isEmpty(): boolean {\r\n        return !this.textValue;\r\n    }\r\n\r\n}\r\n","import { IControl } from \"../icontrol\";\r\nimport { ControlType } from \"../../controltype\";\r\n\r\n/**\r\n * æºè½è¾å¥æ¡æ§ä»¶\r\n */\r\nexport class InputGroupControl implements IControl {\r\n\r\n    /**\r\n     * è·åæ§ä»¶ç±»åï¼è¿åå¼ï¼æºè½è¾å¥æ¡æ§ä»¶ç±»å\r\n     */\r\n    getControlType(): ControlType {\r\n        return ControlType.InputGroup;\r\n    }\r\n    isRequired(): boolean {\r\n        return !!this.required;\r\n    }\r\n\r\n    /**\r\n     * æ¯å¦åè®¸è¾å¥\r\n     */\r\n    editable: boolean;\r\n\r\n    /**\r\n     * æé®æ¾ç¤ºææ¬\r\n     */\r\n    groupText: string;\r\n\r\n    /**\r\n     * ä½¿ç¨æ¨¡å¼ï¼ææ¬ãå¼¹åºè¡¨åï¼\r\n     */\r\n    usageMode: string;\r\n\r\n    /**\r\n     * å¼¹åºè¡¨åç¸å³éç½®\r\n     */\r\n    dialogOptions: DialogConfig;\r\n\r\n    /**\r\n     * æé®ç¹å»äºä»¶\r\n     */\r\n    click: any;\r\n    /**\r\n     * æ¯å¦æ¯å±ç¤ºå¨æ©å±åºååç\r\n     */\r\n    isExtend:boolean;\r\n    /**æ¯å¦æ¾ç¤ºlabel */\r\n    showLabel:boolean;\r\n    /**æ¯å¦å¿å¡« */\r\n    required:boolean;\r\n    /**\r\n     * é»è®¤æ¾ç¤º\r\n     */\r\n    placeholder:string;\r\n}\r\n\r\nexport class DialogConfig {\r\n    modalId: string;\r\n    mapFields: any;\r\n    title: string;\r\n    width: number;\r\n    height: number;\r\n    // showButtons: boolean;\r\n    // buttons: DialogButtonConfig[];\r\n}\r\n\r\nexport class DialogButtonConfig {\r\n    text: string;\r\n    cls: any;\r\n    handle: any;\r\n}","import { Injectable } from '@angular/core';\r\nimport { FieldConfig } from '../entity/fieldconfig/fieldconfig';\r\nimport { TextControl } from '../entity/controltype/text/textcontrol';\r\nimport { SearchControl } from '../entity/controltype/search/searchcontrol';\r\nimport { DateControl } from '../entity/controltype/date/datecontrol';\r\nimport { DropDownControl } from '../entity/controltype/dropdownlist/dropdowncontrol';\r\nimport { NumberRangeControl } from '../entity/controltype/numberrange/numberrangecontrol';\r\nimport { HelpContol } from '../entity/controltype/help/helpcontrol';\r\nimport { CheckboxGroupControl } from '../entity/controltype/checkbox/checkboxcontrol';\r\n\r\n\r\nimport { IControl } from '../entity/controltype/icontrol';\r\nimport { DateRangeControl } from '../entity/controltype/datarange/daterangecontrol';\r\n\r\nimport { EnumType } from '../entity/controltype/dropdownlist/enumtype';\r\nimport { EnumStringValue } from '../entity/controltype/dropdownlist/stringenumvalue';\r\nimport { CheckboxValue } from '../entity/controltype/checkbox/checkboxvalue';\r\nimport { YearControl } from '../entity/controltype/year/yearcontrol';\r\n\r\nimport { EnumBoolValue } from '../entity/controltype/dropdownlist/boolenumvalue';\r\nimport { EnumIntegerValue } from '../entity/controltype/dropdownlist/integerenumvalue';\r\nimport { DateRangeValue } from '../entity/conditionvalue/daterangevalue';\r\n\r\nimport { TextValue } from '../entity/conditionvalue/textvalue';\r\nimport { SearchValue } from '../entity/conditionvalue/searchvalue';\r\nimport { DateValue } from '../entity/conditionvalue/datevalue';\r\nimport { NumberRangeValue } from '../entity/conditionvalue/numberrangevaue';\r\nimport { DropDownListValue } from '../entity/conditionvalue/dropdownlistvalue';\r\nimport { HelpValue } from '../entity/conditionvalue/helpvalue';\r\nimport { CheckboxGroupValue } from '../entity/conditionvalue/checkboxgroupvalue';\r\nimport { DateRangeTimeValue } from '../entity/conditionvalue/daterangetimevalue';\r\nimport { DateRangeTimeControl } from '../entity/controltype/datarangetime/daterangetimecontrol';\r\nimport { ControlType } from '../entity/controltype';\r\nimport { RadioGroupValue } from '../entity/conditionvalue/radiovalue';\r\nimport { RadioControl } from '../entity/controltype/radio/radiocontrol';\r\nimport { RadioIEnumValue } from '../entity/controltype/radio/ienumvalue';\r\nimport { YearValue } from '../entity/conditionvalue/yearvalue';\r\nimport { MonthControl } from '../entity/controltype/month/monthcontrol';\r\nimport { MonthValue } from '../entity/conditionvalue/month';\r\nimport { YearRangeValue } from '../entity/conditionvalue/yearrange';\r\nimport { YearRangeControl } from '../entity/controltype/yearrange/yearrangecontrol';\r\nimport { MonthRangeValue } from '../entity/conditionvalue/monthrange';\r\nimport { MonthRangeControl } from '../entity/controltype/monthrange/monthrangecontrol';\r\nimport { InputGroupValue } from '../entity/conditionvalue/inputgroup';\r\nimport { DialogButtonConfig, DialogConfig, InputGroupControl } from '../entity/controltype/input-group/inputgroupcontrol';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ListFilterService {\r\n    constructor() { }\r\n    fieldSchemasConvert(filedSchemas: Array<any>): Array<FieldConfig> {\r\n        let fieldConfigs = new Array<FieldConfig>();\r\n        if (!(filedSchemas) || filedSchemas.length <= 0) {\r\n            return fieldConfigs;\r\n        }\r\n        else {\r\n            filedSchemas.forEach(filedSchema => {\r\n                let fieldConfig = new FieldConfig();\r\n                fieldConfig.id = filedSchema.hasOwnProperty('id') ? filedSchema.id : '';\r\n                fieldConfig.labelCode = filedSchema.labelCode;\r\n                fieldConfig.code = filedSchema.hasOwnProperty('code') ? filedSchema.code : '';\r\n                fieldConfig.placeHolder = filedSchema.placeHolder;\r\n                fieldConfig.beginPlaceHolder = filedSchema.beginPlaceHolder;\r\n                fieldConfig.endPlaceHolder = filedSchema.endPlaceHolder;\r\n                fieldConfig.name = filedSchema.name;\r\n                if (!(filedSchema.control) || !(filedSchema.control.controltype)) {\r\n                    fieldConfig.control = new TextControl();\r\n                    fieldConfig.value = new TextValue(filedSchema.value);\r\n                }\r\n                else {\r\n                    if (filedSchema.control.controltype == 'text') {\r\n                        fieldConfig.control = this.getTextControl(filedSchema);\r\n                        fieldConfig.value = new TextValue(filedSchema.value);\r\n                    }\r\n                    else if (filedSchema.control.controltype == 'search') {\r\n                        fieldConfig.control = this.getSearchControl(filedSchema);\r\n                        fieldConfig.value = new SearchValue(filedSchema.value);\r\n                    }\r\n                    else if (filedSchema.control.controltype == 'singleDate') {\r\n                        fieldConfig.control = this.getDateControl(filedSchema);\r\n                        fieldConfig.value = new DateValue(filedSchema.value);\r\n                    }\r\n                    else if (filedSchema.control.controltype == 'date') {\r\n                        fieldConfig.control = this.getDateRangeControl(filedSchema);\r\n                        fieldConfig.value = new DateRangeValue(filedSchema.value);\r\n                    }\r\n                    else if (filedSchema.control.controltype == 'yearRange') {\r\n                        fieldConfig.control = this.getYearRangeControl(filedSchema);\r\n                        fieldConfig.value = new YearRangeValue(filedSchema.value);\r\n                    }\r\n                    else if (filedSchema.control.controltype == 'monthRange') {\r\n                        fieldConfig.control = this.getMonthRangeControl(filedSchema);\r\n                        fieldConfig.value = new MonthRangeValue(filedSchema.value);\r\n                    }\r\n                    else if (filedSchema.control.controltype == 'datetime') {\r\n                        fieldConfig.control = this.getDateRangeTimeControl(filedSchema);\r\n                        fieldConfig.value = new DateRangeTimeValue(filedSchema.value);\r\n                    }\r\n                    else if (filedSchema.control.controltype == 'year') {\r\n                        fieldConfig.control = this.getYearControl(filedSchema);\r\n                        fieldConfig.value = new YearValue(filedSchema.value);\r\n                    }\r\n                    else if (filedSchema.control.controltype == 'month') {\r\n                        fieldConfig.control = this.getMonthControl(filedSchema);\r\n                        fieldConfig.value = new MonthValue(filedSchema.value);\r\n                    }\r\n                    else if (filedSchema.control.controltype == 'dropdown') {\r\n                        fieldConfig.control = this.getDropDownControl(filedSchema);\r\n                        fieldConfig.value = new DropDownListValue(filedSchema.value);\r\n                    }\r\n                    else if (filedSchema.control.controltype == 'number') {\r\n                        fieldConfig.control = this.getNumberRangeControl(filedSchema);\r\n                        fieldConfig.value = new NumberRangeValue(filedSchema.value);\r\n                    }\r\n                    else if (filedSchema.control.controltype == 'help') {\r\n                        fieldConfig.control = this.getLookUpEditControl(filedSchema);\r\n                        fieldConfig.value = new HelpValue(filedSchema.value);\r\n                    }\r\n                    else if (filedSchema.control.controltype == 'checkboxgroup') {\r\n                        fieldConfig.control = this.getCheckboxGroupControl(filedSchema);\r\n                        fieldConfig.value = new CheckboxGroupValue(filedSchema.value);\r\n                    }\r\n                    else if (filedSchema.control.controltype == 'radio') {\r\n                        fieldConfig.control = this.getRadioControl(filedSchema);\r\n                        fieldConfig.value = new RadioGroupValue(filedSchema.value);\r\n                    }\r\n                    else if (filedSchema.control.controltype == 'input-group') {\r\n                        fieldConfig.control = this.getInputGroupControl(filedSchema);\r\n                        fieldConfig.value = new InputGroupValue(filedSchema.value);\r\n                    }\r\n                    else {\r\n                        fieldConfig.control = this.getTextControl(filedSchema);\r\n                        fieldConfig.value = new TextValue(filedSchema.value);\r\n                    }\r\n\r\n                    if (filedSchema.control.enableClear === undefined) {\r\n                        fieldConfig.control.enableClear = true;\r\n                    } else {\r\n                        fieldConfig.control.enableClear = filedSchema.control.enableClear;\r\n                    }\r\n                }\r\n                fieldConfigs.push(fieldConfig);\r\n            });\r\n        }\r\n        return fieldConfigs;\r\n    }\r\n\r\n    private getTextControl(filedSchema: any): IControl {\r\n        let textControl = new TextControl();\r\n        textControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';\r\n        textControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;\r\n        textControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;\r\n        textControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;\r\n        return textControl;\r\n    }\r\n    private getInputGroupControl(filedSchema: any): IControl {\r\n        let inputGroupControl = new InputGroupControl();\r\n        inputGroupControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';\r\n        inputGroupControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;\r\n        inputGroupControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;\r\n        inputGroupControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;\r\n        inputGroupControl.editable = filedSchema.control.hasOwnProperty('editable') ? filedSchema.control.editable : true;\r\n        inputGroupControl.groupText = filedSchema.control.hasOwnProperty('groupText') ? filedSchema.control.groupText : '<span class=\"f-icon f-icon-lookup\"></span>';\r\n        inputGroupControl.usageMode = filedSchema.control.usageMode;\r\n        inputGroupControl.dialogOptions = this.setInputGroupDialog(filedSchema.control.usageMode, filedSchema.control.modalConfig,filedSchema.id);\r\n        inputGroupControl.click = filedSchema.control.click;\r\n        return inputGroupControl;\r\n    }\r\n    private getDateControl(filedSchema: any): IControl {\r\n        let dateControl = new DateControl();\r\n        dateControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';\r\n        dateControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;\r\n        dateControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;\r\n        dateControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;\r\n        dateControl.format = filedSchema.control.hasOwnProperty('format') ? filedSchema.control.format : '';\r\n        dateControl.compareType = filedSchema.control.hasOwnProperty('compareType') ? filedSchema.control.compareType : 0;\r\n        // dateControl.showType = filedSchema.control.hasOwnProperty('showType')? filedSchema.control.showType : '';\r\n        return dateControl;\r\n    }\r\n    private getYearControl(filedSchema: any): IControl {\r\n        let yearControl = new YearControl();\r\n        yearControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';\r\n        yearControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;\r\n        yearControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;\r\n        yearControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;\r\n        yearControl.format = filedSchema.control.hasOwnProperty('format') ? filedSchema.control.format : '';\r\n        yearControl.compareType = filedSchema.control.hasOwnProperty('compareType') ? filedSchema.control.compareType : 0;\r\n        // yearControl.showType = filedSchema.control.hasOwnProperty('showType')? filedSchema.control.showType : '';\r\n        return yearControl;\r\n    }\r\n    private getMonthControl(filedSchema: any): IControl {\r\n        let monthControl = new MonthControl();\r\n        monthControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';\r\n        monthControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;\r\n        monthControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;\r\n        monthControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;\r\n        monthControl.format = filedSchema.control.hasOwnProperty('format') ? filedSchema.control.format : '';\r\n        monthControl.compareType = filedSchema.control.hasOwnProperty('compareType') ? filedSchema.control.compareType : 0;\r\n        // yearControl.showType = filedSchema.control.hasOwnProperty('showType')? filedSchema.control.showType : '';\r\n        return monthControl;\r\n    }\r\n    private getNumberRangeControl(filedSchema: any): IControl {\r\n        let numberRangeControl = new NumberRangeControl();\r\n        numberRangeControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';\r\n        numberRangeControl.beginPlaceHolder = filedSchema.control.beginPlaceHolder ? filedSchema.control.beginPlaceHolder : '';\r\n        numberRangeControl.endPlaceHolder = filedSchema.control.endPlaceHolder ? filedSchema.control.endPlaceHolder : '';\r\n        numberRangeControl.precision = filedSchema.control.hasOwnProperty('precision') ? filedSchema.control.precision : 2;\r\n        numberRangeControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;\r\n        numberRangeControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;\r\n        numberRangeControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;\r\n        numberRangeControl.bigNumber = filedSchema.control.hasOwnProperty('bigNumber') ? filedSchema.control.bigNumber : false;\r\n        return numberRangeControl;\r\n    }\r\n\r\n    private getSearchControl(filedSchema: any): IControl {\r\n        let searchControl = new SearchControl();\r\n        searchControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';\r\n        searchControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;\r\n        searchControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;\r\n        searchControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;\r\n        return searchControl;\r\n    }\r\n    private getDropDownControl(filedSchema: any): IControl {\r\n        let dropdowncontrol = new DropDownControl();\r\n        dropdowncontrol.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';\r\n        filedSchema.control.valueType = filedSchema.control.valueType ? filedSchema.control.valueType : '1';\r\n        dropdowncontrol.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;\r\n        dropdowncontrol.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;\r\n        dropdowncontrol.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;\r\n        if (filedSchema.control.valueType == \"1\") {\r\n            dropdowncontrol.valueType = EnumType.StringType;\r\n            dropdowncontrol.enumValues = filedSchema.control.enumValues as Array<EnumStringValue>;\r\n        }\r\n        else if (filedSchema.control.valueType == \"2\") {\r\n            dropdowncontrol.valueType = EnumType.BoolType;\r\n            dropdowncontrol.enumValues = filedSchema.control.enumValues as Array<EnumBoolValue>;\r\n        }\r\n        else if (filedSchema.control.valueType == \"0\") {\r\n            dropdowncontrol.valueType = EnumType.IntType;\r\n            dropdowncontrol.enumValues = filedSchema.control.enumValues as Array<EnumIntegerValue>;\r\n        }\r\n        return dropdowncontrol;\r\n    }\r\n\r\n    private getLookUpEditControl(filedSchema: any): IControl {\r\n        let lookupEdit = new HelpContol();\r\n        if (!!(filedSchema.control.uri)) {\r\n            lookupEdit.uri = filedSchema.control.uri;\r\n        }\r\n        lookupEdit.textField = filedSchema.control.textField;\r\n        lookupEdit.valueField = filedSchema.control.valueField;\r\n        lookupEdit.idField = filedSchema.control.idField;\r\n        lookupEdit.helpId = filedSchema.control.helpId;\r\n        lookupEdit.mapFields = filedSchema.control.mapFields;\r\n        lookupEdit.context = filedSchema.control.context;\r\n        lookupEdit.preEventCmd = filedSchema.control.preEventCmd;\r\n        lookupEdit.postEventCmd = filedSchema.control.postEventCmd;\r\n        lookupEdit.enableFullTree = filedSchema.control.enableFullTree;\r\n        lookupEdit.loadTreeDataType = filedSchema.control.loadTreeDataType;\r\n        //æ°å¢\r\n        lookupEdit.singleSelect = filedSchema.control.hasOwnProperty('singleSelect') ? filedSchema.control.singleSelect : true;\r\n        lookupEdit.expandLevel = filedSchema.control.expandLevel;\r\n        lookupEdit.enableCascade = filedSchema.control.enableCascade;\r\n        lookupEdit.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;\r\n        lookupEdit.displayType = filedSchema.control.hasOwnProperty('displayType') ? filedSchema.control.displayType : \"LIST\";\r\n        lookupEdit.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;\r\n        lookupEdit.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;\r\n        lookupEdit.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';\r\n        lookupEdit.clearFields = filedSchema.control.hasOwnProperty('clearFields')?filedSchema.control.clearFields:'';\r\n        lookupEdit.editable =  filedSchema.control.hasOwnProperty('editable')?filedSchema.control.editable: false;\r\n        lookupEdit.enableMultiFieldSearch =  filedSchema.control.hasOwnProperty('enableMultiFieldSearch')?filedSchema.control.enableMultiFieldSearch: false;\r\n        \r\n        return lookupEdit;\r\n    }\r\n    private getCheckboxGroupControl(filedSchema: any): IControl {\r\n        let checkboxGroupcontrol = new CheckboxGroupControl();\r\n        checkboxGroupcontrol.enumValues = filedSchema.control.enumValues as Array<CheckboxValue>;\r\n        checkboxGroupcontrol.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;\r\n        checkboxGroupcontrol.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;\r\n        checkboxGroupcontrol.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;\r\n        return checkboxGroupcontrol;\r\n    }\r\n    private getDateRangeControl(filedSchema: any): IControl {\r\n        let dateRangeControl = new DateRangeControl();\r\n        dateRangeControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;\r\n        dateRangeControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;\r\n        dateRangeControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;\r\n        dateRangeControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';\r\n        dateRangeControl.beginPlaceHolder = filedSchema.control.beginPlaceHolder ? filedSchema.control.beginPlaceHolder : '';\r\n        dateRangeControl.endPlaceHolder = filedSchema.control.endPlaceHolder ? filedSchema.control.endPlaceHolder : '';\r\n        dateRangeControl.format = filedSchema.control.hasOwnProperty('format') ? filedSchema.control.format : '';\r\n        // dateRangeControl.showType = filedSchema.control.hasOwnProperty('showType')? filedSchema.control.showType : '';\r\n        return dateRangeControl;\r\n    }\r\n    private getYearRangeControl(filedSchema: any): IControl {\r\n        let yearRangeControl = new YearRangeControl();\r\n        yearRangeControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;\r\n        yearRangeControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;\r\n        yearRangeControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;\r\n        yearRangeControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';\r\n        yearRangeControl.beginPlaceHolder = filedSchema.control.beginPlaceHolder ? filedSchema.control.beginPlaceHolder : '';\r\n        yearRangeControl.endPlaceHolder = filedSchema.control.endPlaceHolder ? filedSchema.control.endPlaceHolder : '';\r\n        yearRangeControl.format = filedSchema.control.hasOwnProperty('format') ? filedSchema.control.format : '';\r\n        return yearRangeControl;\r\n    }\r\n    private getMonthRangeControl(filedSchema: any): IControl {\r\n        let monthRangeControl = new MonthRangeControl();\r\n        monthRangeControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;\r\n        monthRangeControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;\r\n        monthRangeControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;\r\n        monthRangeControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';\r\n        monthRangeControl.beginPlaceHolder = filedSchema.control.beginPlaceHolder ? filedSchema.control.beginPlaceHolder : '';\r\n        monthRangeControl.endPlaceHolder = filedSchema.control.endPlaceHolder ? filedSchema.control.endPlaceHolder : '';\r\n        monthRangeControl.format = filedSchema.control.hasOwnProperty('format') ? filedSchema.control.format : '';\r\n        return monthRangeControl;\r\n    }\r\n    private getDateRangeTimeControl(filedSchema: any): IControl {\r\n        let dateRangeControl = new DateRangeTimeControl();\r\n        dateRangeControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;\r\n        dateRangeControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;\r\n        dateRangeControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;\r\n        dateRangeControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';\r\n        dateRangeControl.beginPlaceHolder = filedSchema.control.beginPlaceHolder ? filedSchema.control.beginPlaceHolder : '';\r\n        dateRangeControl.endPlaceHolder = filedSchema.control.endPlaceHolder ? filedSchema.control.endPlaceHolder : '';\r\n        dateRangeControl.format = filedSchema.control.hasOwnProperty('format') ? filedSchema.control.format : '';\r\n        return dateRangeControl;\r\n    }\r\n    private getRadioControl(filedSchema: any): IControl {\r\n        let checkboxGroupcontrol = new RadioControl();\r\n        checkboxGroupcontrol.enumValues = filedSchema.control.enumValues as Array<RadioIEnumValue>;\r\n        checkboxGroupcontrol.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;\r\n        checkboxGroupcontrol.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;\r\n        checkboxGroupcontrol.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;\r\n        return checkboxGroupcontrol;\r\n    }\r\n    //æ ¹æ®ç±»åï¼new valueå¼\r\n    setValues(controltype, value) {\r\n        if (controltype == 'input') {\r\n            return new TextValue(value);\r\n        }\r\n        else if (controltype == 'search') {\r\n            return new SearchValue(value);\r\n        }\r\n        else if (controltype == 'date') {\r\n            return new DateValue(value);\r\n        }\r\n        else if (controltype == 'year') {\r\n            return new YearValue(value);\r\n        }\r\n        else if (controltype == 'month') {\r\n            return new MonthValue(value);\r\n        }\r\n        else if (controltype == 'daterange') {\r\n            return new DateRangeValue(value);\r\n        }\r\n        else if (controltype == 'daterangetime') {\r\n            return new DateRangeTimeValue(value);\r\n        }\r\n        else if (controltype == 'yearrange') {\r\n            return new YearRangeValue(value);\r\n        }\r\n        else if (controltype == 'monthrange') {\r\n            return new MonthRangeValue(value);\r\n        }\r\n        else if (controltype == 'dropdown') {\r\n            return new DropDownListValue(value);\r\n        }\r\n        else if (controltype == 'number') {\r\n            return new NumberRangeValue(value);\r\n        }\r\n        else if (controltype == 'help') {\r\n            return new HelpValue(value);\r\n        }\r\n        else if (controltype == 'checkboxgroup') {\r\n            return new CheckboxGroupValue(value);\r\n        }\r\n        else if (controltype == 'radio') {\r\n            return new RadioGroupValue(value);\r\n        }\r\n        else if (controltype == 'input-group') {\r\n            return new InputGroupValue(value);\r\n        }\r\n        else {\r\n            return new TextValue(value);\r\n        }\r\n    }\r\n\r\n    /**\r\n * æºè½è¾å¥æ¡æ§ä»¶éè¦å¼¹åºè¡¨åæ¶ï¼å°è¡¨åéç½®JSONæè¿°è½¬æ¢ä¸ºå¼¹åºè¡¨åå½ä»¤å¯æ¥æ¶çå¼¹çªåæ°\r\n * @param usageMode æºè½è¾å¥æ¡æ§ä»¶ä½¿ç¨æ¨¡å¼\r\n * @param modalConfigData è¡¨åéç½®JSONæè¿°\r\n * @returns å¼¹åºè¡¨åå½ä»¤å¯æ¥æ¶çå¼¹çªåæ°\r\n */\r\n    private setInputGroupDialog(usageMode: string, modalConfigData: any,id:string): DialogConfig {\r\n        if (usageMode == 'text' || usageMode == undefined || modalConfigData == undefined || id == undefined) {\r\n            return undefined;\r\n        }\r\n\r\n        let dialogConfig = new DialogConfig();\r\n        //dialogConfig.modalId = modalConfigData.modalId;\r\n        dialogConfig.modalId = id;\r\n        if(modalConfigData.mapFields){\r\n            dialogConfig.mapFields = JSON.parse(modalConfigData.mapFields.replace(/'/g, '\"'));\r\n        }\r\n        if (modalConfigData.showHeader) {\r\n            dialogConfig.title = modalConfigData.title;\r\n        }\r\n        dialogConfig.width = modalConfigData.width;\r\n        dialogConfig.height = modalConfigData.height;\r\n        // dialogConfig.showButtons = modalConfigData.showFooterButtons;\r\n        // dialogConfig.buttons = this.setInputGroupDialogButtons(modalConfigData.footerButtons);\r\n        return dialogConfig;\r\n    }\r\n\r\n    /**\r\n     * æºè½è¾å¥æ¡æ§ä»¶éè¦å¼¹åºè¡¨åæ¶ï¼å°å¼¹çªæé®ç»éç½®JSONæè¿°è½¬æ¢ä¸ºå¼¹åºè¡¨åå½ä»¤å¯æ¥æ¶çå¼¹çªæé®ç»åæ°\r\n     * @param buttonData å¼¹çªæé®ç»éç½®JSONæè¿°\r\n     * @returns å¼¹åºè¡¨åå½ä»¤å¯æ¥æ¶çå¼¹çªæé®ç»åæ°\r\n     */\r\n    private setInputGroupDialogButtons(buttonData: any): Array<DialogButtonConfig> {\r\n        if (!buttonData) {\r\n            return [];\r\n        }\r\n\r\n        let button: DialogButtonConfig;\r\n        return buttonData.map(item => {\r\n            button = new DialogButtonConfig();\r\n            button.text = item.text;\r\n            if (item.appearance && item.appearance.class) {\r\n                button.cls = item.appearance.class;\r\n            }\r\n            button.handle = item.click;\r\n            return button;\r\n        });\r\n    }\r\n\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\r\n * æ¯è¾ç¬¦\r\n */\r\nexport enum CompareType{\r\n\r\n    /**\r\n     * ç­äº\r\n     */\r\n    // Equal=1,\r\n    Equal = 0,\r\n\r\n    /**\r\n     * å¤§äº\r\n     */\r\n    GreaterThan = 2,\r\n\r\n    /**\r\n     * å¤§äºæç­äº\r\n     */\r\n    GreaterThanOrEqual = 3,\r\n\r\n    /**\r\n     * å°äº\r\n     */\r\n    LessThan = 4,\r\n\r\n    /**\r\n     * å°äºæç­äº\r\n     */\r\n    LessThanOrEqual = 5, \r\n\r\n    /**\r\n     * ä¹é´\r\n     */\r\n    // BetWeen=6\r\n    Like = 6,\r\n    /**\r\n     * åå«\r\n     */\r\n    In = 14\r\n}","export enum ValueType{\r\n\r\n    /**\r\n     *å¼ç±»å\r\n     */\r\n    Value = 0,\r\n\r\n    /**\r\n     * è¡¨è¾¾å¼\r\n     */\r\n    Express = 1\r\n}","export enum RelationType{\r\n\r\n    /**\r\n     * ä¸\r\n     */\r\n    // And=0,\r\n    And = 1,\r\n\r\n    /**\r\n     * æ\r\n     */\r\n    // Or=1\r\n    Or = 2\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\n\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\nimport { TextValue } from '../../entity/conditionvalue/textvalue';\r\nimport { QueryCondition } from '../../entity/querycondition';\r\n\r\nexport class TextHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const tv = (qc.value as TextValue);\r\n        return Object.keys(tv).length > 0 && tv.value ? [{\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.Like, //like CompareType.like undefined\r\n            'Value' : tv.value,\r\n            'Relation' : RelationType.And, //and undefined\r\n            'Expresstype':ValueType.Value\r\n        }] : [];\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\n\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\nimport { QueryCondition } from '../../entity/querycondition';\r\nimport { DateRangeValue } from '../../entity/conditionvalue/daterangevalue';\r\n\r\nexport class DateRangeHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const arr = [];\r\n        const drv = (qc.value as DateRangeValue);\r\n        if(Object.keys(drv).length === 0 || (!drv.startTime && !drv.endTime))\r\n            return arr;\r\n        drv.startTime && arr.push({\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.GreaterThanOrEqual, //GreaterOrEqual\r\n            'Value' : drv.startTime,\r\n            'Relation' : RelationType.And, //and\r\n            'Expresstype': ValueType.Value\r\n        });\r\n        drv.endTime && arr.push({\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.LessThanOrEqual, //LessOrEqual\r\n            'Value' : drv.endTime,\r\n            'Relation' : RelationType.And,//and\r\n            'Expresstype': ValueType.Value\r\n        });\r\n\r\n        return arr;\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\n\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\nimport { QueryCondition } from '../../entity/querycondition';\r\nimport { DropDownListValue } from '../../entity/conditionvalue/dropdownlistvalue';\r\nimport { EnumStringValue } from '../../entity/controltype/dropdownlist/stringenumvalue';\r\n\r\nexport class DropDownHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const ddv = (qc.value as DropDownListValue);\r\n        if(ddv === undefined || ddv === null || Object.keys(ddv).length === 0 || Object.keys(ddv.value || {}).length === 0)\r\n            return [];\r\n        return [{\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.Equal, //equal\r\n            // 'Value' : (ddv.value.getEnumValue() as EnumStringValue),\r\n            'Value' : ddv.value,\r\n            'Relation' : RelationType.And, //and\r\n            'Expresstype': ValueType.Value\r\n        }];\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\n\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\nimport { NumberRangeValue } from '../../entity/conditionvalue/numberrangevaue';\r\nimport { QueryCondition } from '../../entity/querycondition';\r\n\r\nexport class NumberRangeHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const arr = [];\r\n        const nrv = (qc.value as NumberRangeValue);\r\n        if(Object.keys(nrv).length === 0)\r\n            return arr;\r\n        (nrv.startValue != null) && arr.push({\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.GreaterThanOrEqual, //GreaterOrEqual\r\n            'Value' : nrv.startValue,\r\n            'Relation' : RelationType.And, //and\r\n            'Expresstype': ValueType.Value\r\n        });\r\n        (nrv.endValue != null) && arr.push({\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.LessThanOrEqual, //LessOrEqual\r\n            'Value' : nrv.endValue,\r\n            'Relation' : RelationType.And,//and\r\n            'Expresstype': ValueType.Value\r\n        });\r\n\r\n        return arr;\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\n\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\nimport { QueryCondition } from '../../entity/querycondition';\r\nimport { HelpValue } from '../../entity/conditionvalue/helpvalue';\r\n\r\nexport class SmartHelpHandler implements IQueryConditionHandler{\r\n    // convert(qc: QueryCondition) {\r\n    //     const shv = (qc.value as HelpValue);\r\n    //     if(Object.keys(shv).length === 0 || !shv.value || !shv.valueField){\r\n    //         return [];\r\n    //     }else{\r\n    //         // return [{\r\n    //         //     'FilterField' : qc.fieldCode,\r\n    //         //     'Compare' : CompareType.Equal, //equal\r\n    //         //     'Value' : (shv.value)[shv.valueField],\r\n    //         //     'Relation' : RelationType.And,\r\n    //         //     'Expresstype': ValueType.Value\r\n    //         // }];\r\n    //         return [{\r\n    //             'FilterField' : qc.fieldCode,\r\n    //             'Compare' : CompareType.Equal, //equal\r\n    //             'Value' : HelpValue.getPropValues(shv.value, shv.valueField.split('.')),\r\n    //             'Relation' : RelationType.And,\r\n    //             'Expresstype': ValueType.Value\r\n    //         }];\r\n    //     }\r\n    // }\r\n\r\n    convert(qc: QueryCondition) {\r\n        const shv = (qc.value as HelpValue);\r\n        if(shv.value.length == 0 || !shv.valueField){\r\n            return [];\r\n        }else{\r\n            const arr = [];\r\n            shv.getOriginalValue().split(',').forEach(id => {\r\n                id && arr.push({\r\n                    'FilterField' : qc.fieldCode,\r\n                    'Compare' : CompareType.Equal,\r\n                    'Value' : id,\r\n                    'Relation' : RelationType.Or,\r\n                    'Expresstype':ValueType.Value\r\n                });\r\n            });\r\n            if(arr.length > 0){\r\n                arr[0]['Lbracket'] = '(';\r\n                arr[arr.length -1]['Rbracket'] = ')';\r\n                arr[arr.length -1]['Relation'] = RelationType.And;\r\n                return arr;\r\n            }else{\r\n                return [];\r\n            }\r\n        }\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\n\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\nimport { QueryCondition } from '../../entity/querycondition';\r\nimport { SearchValue } from '../../entity/conditionvalue/searchvalue';\r\n\r\nexport class SearchHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const tv = (qc.value as SearchValue);\r\n        return Object.keys(tv).length > 0 && tv.value ? [{\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.Like, //like CompareType.like undefined\r\n            'Value' : tv.value,\r\n            'Relation' : RelationType.And, //and undefined\r\n            'Expresstype':ValueType.Value\r\n        }] : [];\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\n\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\nimport { QueryCondition } from '../../entity/querycondition';\r\nimport { DateValue } from '../../entity/conditionvalue/datevalue';\r\n\r\nexport class DateHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const drv = (qc.value as DateValue);\r\n        return Object.keys(drv).length > 0 && drv.value ? [{\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : qc.control.compareType, //èªå®ä¹\r\n            'Value' : drv.value,\r\n            'Relation' : RelationType.And,\r\n            'Expresstype':ValueType.Value\r\n        }] : [];\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\n\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\nimport { QueryCondition } from '../../entity/querycondition';\r\nimport { CheckboxGroupValue } from '../../entity/conditionvalue/checkboxgroupvalue';\r\nimport { CheckboxIEnumValue } from '../../entity/controltype/checkbox/ienumvalue';\r\n\r\nexport class CheckboxGroupHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const cbgv = (qc.value as CheckboxGroupValue);\r\n        if(Object.keys(cbgv).length === 0 || Object.keys(cbgv.value).length === 0)\r\n            return [];\r\n        let CheckboxArr = [];\r\n        if(cbgv.value.length === 1){\r\n            return [{\r\n                'FilterField' : qc.fieldCode,\r\n                'Compare' : CompareType.Equal,\r\n                'Value' : (cbgv.value[0]),\r\n                'Relation' : RelationType.And,\r\n                'Expresstype': ValueType.Value\r\n            }]\r\n        }\r\n        cbgv.value.forEach(value => {\r\n            CheckboxArr.push({\r\n                'FilterField' : qc.fieldCode,\r\n                'Compare' : CompareType.Equal,\r\n                'Value' : value,\r\n                'Relation' : RelationType.Or,\r\n                'Expresstype': ValueType.Value\r\n            })\r\n        });\r\n        CheckboxArr[0]['Lbracket'] = '(';\r\n        CheckboxArr[CheckboxArr.length - 1]['Rbracket'] = ')';\r\n        CheckboxArr[CheckboxArr.length -1]['Relation'] = RelationType.And;\r\n        return CheckboxArr;\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\n\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\nimport { QueryCondition } from '../../entity/querycondition';\r\nimport { DateRangeTimeValue } from '../../entity/conditionvalue/daterangetimevalue';\r\n\r\nexport class DateRangeTimeHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const arr = [];\r\n        const drv = (qc.value as DateRangeTimeValue);\r\n        if(Object.keys(drv).length === 0 || (!drv.startTime && !drv.endTime))\r\n            return arr;\r\n        drv.startTime && arr.push({\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.GreaterThanOrEqual, //GreaterOrEqual\r\n            'Value' : drv.startTime,\r\n            'Relation' : RelationType.And, //and\r\n            'Expresstype': ValueType.Value\r\n        });\r\n        drv.endTime && arr.push({\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.LessThanOrEqual, //LessOrEqual\r\n            'Value' : drv.endTime,\r\n            'Relation' : RelationType.And,//and\r\n            'Expresstype': ValueType.Value\r\n        });\r\n\r\n        return arr;\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\n\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\nimport { QueryCondition } from '../../entity/querycondition';\r\nimport { RadioGroupValue } from '../../entity/conditionvalue/radiovalue';\r\n\r\nexport class RadioHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const radiov = (qc.value as RadioGroupValue);\r\n        if(radiov.value === undefined || radiov.value === null ||  Object.keys(radiov).length === 0 || Object.keys(radiov.value).length === 0)\r\n            return [];\r\n        return [{\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.Equal, //equal\r\n            'Value' : radiov.value,\r\n            'Relation' : RelationType.And, //and\r\n            'Expresstype': ValueType.Value\r\n        }];\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\n\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\nimport { QueryCondition } from '../../entity/querycondition';\r\nimport { MonthRangeValue } from '../../entity/conditionvalue/monthrange';\r\n\r\nexport class MonthRangeHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const arr = [];\r\n        const drv = (qc.value as MonthRangeValue);\r\n        if(Object.keys(drv).length === 0 || (!drv.startTime && !drv.endTime))\r\n            return arr;\r\n        drv.startTime && arr.push({\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.GreaterThanOrEqual, //GreaterOrEqual\r\n            'Value' : drv.startTime,\r\n            'Relation' : RelationType.And, //and\r\n            'Expresstype': ValueType.Value\r\n        });\r\n        drv.endTime && arr.push({\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.LessThanOrEqual, //LessOrEqual\r\n            'Value' : drv.endTime,\r\n            'Relation' : RelationType.And,//and\r\n            'Expresstype': ValueType.Value\r\n        });\r\n\r\n        return arr;\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\n\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\nimport { QueryCondition } from '../../entity/querycondition';\r\nimport { YearRangeValue } from '../../entity/conditionvalue/yearrange';\r\n\r\nexport class YearRangeHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const arr = [];\r\n        const drv = (qc.value as YearRangeValue);\r\n        if(Object.keys(drv).length === 0 || (!drv.startTime && !drv.endTime))\r\n            return arr;\r\n        drv.startTime && arr.push({\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.GreaterThanOrEqual, //GreaterOrEqual\r\n            'Value' : drv.startTime,\r\n            'Relation' : RelationType.And, //and\r\n            'Expresstype': ValueType.Value\r\n        });\r\n        drv.endTime && arr.push({\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : CompareType.LessThanOrEqual, //LessOrEqual\r\n            'Value' : drv.endTime,\r\n            'Relation' : RelationType.And,//and\r\n            'Expresstype': ValueType.Value\r\n        });\r\n\r\n        return arr;\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\n\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\nimport { QueryCondition } from '../../entity/querycondition';\r\nimport { MonthValue } from '../../entity/conditionvalue/month';\r\n\r\nexport class MonthHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const drv = (qc.value as MonthValue);\r\n        return Object.keys(drv).length > 0 && drv.value ? [{\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : qc.control.compareType, //èªå®ä¹\r\n            'Value' : drv.value,\r\n            'Relation' : RelationType.And,\r\n            'Expresstype':ValueType.Value\r\n        }] : [];\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\n\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\nimport { QueryCondition } from '../../entity/querycondition';\r\nimport { YearValue } from '../../entity/conditionvalue/yearvalue';\r\n\r\nexport class YearHandler implements IQueryConditionHandler{\r\n    convert(qc: QueryCondition) {\r\n        const drv = (qc.value as YearValue);\r\n        return Object.keys(drv).length > 0 && drv.value ? [{\r\n            'FilterField' : qc.fieldCode,\r\n            'Compare' : qc.control.compareType, //èªå®ä¹\r\n            'Value' : drv.value,\r\n            'Relation' : RelationType.And,\r\n            'Expresstype':ValueType.Value\r\n        }] : [];\r\n    }\r\n}","import { IQueryConditionHandler } from \"./iquerycondition.handler\";\r\n\r\nimport { CompareType } from '../enum/compare-type.enum';\r\nimport { ValueType } from '../enum/value-type.enum';\r\nimport { RelationType } from '../enum/relation-type.enum';\r\nimport { QueryCondition } from '../../entity/querycondition';\r\nimport { InputGroupValue } from \"../../entity/conditionvalue/inputgroup\";\r\n\r\nexport class InputGroupHandler implements IQueryConditionHandler {\r\n    convert(qc: QueryCondition) {\r\n        const igv = (qc.value as InputGroupValue);\r\n        const arr = [];\r\n        if(igv.textValue === undefined || igv.textValue === null || igv.textValue.length == 0 ){\r\n            return [];\r\n        }\r\n        else if (igv.isInputText) {\r\n            arr.push({\r\n                'FilterField': qc.fieldCode,\r\n                'Compare': CompareType.Like,\r\n                'Value': igv.textValue,\r\n                'Relation': RelationType.And,\r\n                'Expresstype': ValueType.Value\r\n            });\r\n            return arr;\r\n        }\r\n        else {\r\n            igv.getOriginalValue().split(',').forEach(itemValue => {\r\n                itemValue && arr.push({\r\n                    'FilterField': qc.fieldCode,\r\n                    'Compare': CompareType.Equal,\r\n                    'Value': itemValue,\r\n                    'Relation': RelationType.Or,\r\n                    'Expresstype': ValueType.Value\r\n                });\r\n            });\r\n            if (arr.length > 0) {\r\n                arr[0]['Lbracket'] = '(';\r\n                arr[arr.length - 1]['Rbracket'] = ')';\r\n                arr[arr.length - 1]['Relation'] = RelationType.And;\r\n                return arr;\r\n            } else {\r\n                return [];\r\n            }\r\n        }\r\n    }\r\n}","\r\nimport { IQueryConditionHandler } from \"./handlers/iquerycondition.handler\";\r\nimport { TextHandler } from \"./handlers/text.handler\";\r\nimport { DateRangeHandler } from \"./handlers/daterage.handler\";\r\nimport { DropDownHandler } from \"./handlers/dropdown.handler\";\r\nimport { NumberRangeHandler } from \"./handlers/numberrage.handler\";\r\nimport { SmartHelpHandler } from \"./handlers/smarthelp.handler\";\r\nimport { ControlType } from '../entity/controltype';\r\nimport { SearchHandler } from './handlers/search.handler';\r\nimport { DateHandler } from './handlers/date.handler';\r\nimport { CheckboxGroupHandler } from './handlers/checkboxgroup.handler';\r\nimport { DateRangeTimeHandler } from './handlers/dateragetime.handler';\r\nimport { RadioHandler } from './handlers/radio.handler';\r\nimport { MonthRangeHandler } from './handlers/monthrage.handler';\r\nimport { YearRangeHandler } from './handlers/yearrage.handler';\r\nimport { MonthHandler } from './handlers/month.handler';\r\nimport { YearHandler } from './handlers/year.handler';\r\nimport { InputGroupHandler } from \"./handlers/inputgroup.handler\";\r\n\r\nexport class QueryConditionHandlerFactory {\r\n\r\n    private static _instance: QueryConditionHandlerFactory = null;\r\n    private queryConditionHandlerMapping: Map<ControlType, IQueryConditionHandler> = new Map<ControlType, IQueryConditionHandler>();\r\n    private constructor(){\r\n        this.queryConditionHandlerMapping.set(ControlType.Text, new TextHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.DateRange, new DateRangeHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.DateRangeTime, new DateRangeTimeHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.MonthRange, new MonthRangeHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.YearRange, new YearRangeHandler());\r\n\r\n        this.queryConditionHandlerMapping.set(ControlType.DropDown, new DropDownHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.NumberRange, new NumberRangeHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.Help, new SmartHelpHandler());\r\n\r\n        this.queryConditionHandlerMapping.set(ControlType.Search, new SearchHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.Date, new DateHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.Month, new MonthHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.Year, new YearHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.CheckboxGroup, new CheckboxGroupHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.Radio, new RadioHandler());\r\n        this.queryConditionHandlerMapping.set(ControlType.InputGroup, new InputGroupHandler());\r\n    }\r\n    public static getInstance(){\r\n        if(!QueryConditionHandlerFactory._instance){\r\n            QueryConditionHandlerFactory._instance = new QueryConditionHandlerFactory();\r\n        }\r\n        return QueryConditionHandlerFactory._instance;\r\n    }\r\n\r\n    getHandler(controlType: ControlType): IQueryConditionHandler{\r\n        return this.queryConditionHandlerMapping.get(controlType);\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { IQueryConditionHandler } from './handlers/iquerycondition.handler';\r\nimport { QueryConditionHandlerFactory } from './querycondition.handler.factory';\r\nimport { QueryCondition } from '../entity/querycondition';\r\n// import { FrameContext } from '@farris/devkit';\r\n// import { IQuerySolutionHandler } from './IQuerySolutionHandler';\r\n// import { FrameworkSessionService } from '@farris/bef';\r\n\r\n\r\n@Injectable()\r\nexport class QuerySolutionService {\r\n\r\n    constructor() {}\r\n\r\n    // private frameContext: FrameContext,\r\n        // private frameworkSessionService: FrameworkSessionService\r\n    // getUserSessionId(): string {\r\n    //     return this.frameworkSessionService.getUserSessionId();\r\n    // }\r\n\r\n    public setFilterConditions(params: Array<QueryCondition>) {\r\n        let queryConditionHandler: IQueryConditionHandler;\r\n        const filterConditionList = [];\r\n        params.forEach(qc => {\r\n            queryConditionHandler = QueryConditionHandlerFactory.getInstance().getHandler(qc.control.getControlType());\r\n            filterConditionList.push(...queryConditionHandler.convert(qc));\r\n        });\r\n        // è®¾ç½®å°NgCommand params.filterå±æ§ä¸ï¼{UISTATE~/root-component/filterConditionList}\r\n        // this.frameContext.uiState['filterConditionList'] = JSON.stringify(filterConditionList);\r\n        // return JSON.stringify(filterConditionList);\r\n        return filterConditionList;\r\n    }\r\n\r\n}\r\n","import { CompareType } from \"./comparetype\";\r\nimport { ValueType } from \"./valuetype\";\r\nimport { RelationType } from \"./relationtype\";\r\nimport { IControl, ControlConvert } from \"./controltype/icontrol\";\r\nimport { IValue, ConditionValueConvert } from \"./conditionvalue/ivalue\";\r\n\r\n/**\r\n * æ¥è¯¢æ¡ä»¶å®ä½ç±»\r\n */\r\nexport class QueryCondition{\r\n\r\n    /**\r\n     * å¯ä¸æ§æ è¯\r\n     */\r\n    id: string;\r\n\r\n    /**\r\n     * å·¦æ¬å·\r\n     */\r\n    leftBrackets: string;\r\n\r\n    /**\r\n     * å­æ®µç¼å·\r\n     */\r\n    fieldCode: string;\r\n\r\n    /**\r\n     * å­æ®µåç§°\r\n     */\r\n    fieldName: string;\r\n    name: string;\r\n\r\n    /**\r\n     * æ¯è¾ç¬¦\r\n     */\r\n    compareType: CompareType;\r\n\r\n    /**\r\n     * å¼ç±»å\r\n     */\r\n    valueType: ValueType;\r\n\r\n    /**\r\n     * å¼\r\n     * è¯¥å±æ§ä¸ºIValueæ¥å£ï¼æ ¹æ®ä¸åçæ§ä»¶ç±»åæä¸åçå®ç°ç±»ï¼å·ä½å¦ä¸ï¼\r\n     * 1. ææ¬ç±»åï¼TextValue\r\n     * 2. ä¸æåè¡¨ï¼DropDownListValue\r\n     * 3. æ¥æåºé´ï¼DateRangeValue\r\n     * 4. æ°å­åºé´ï¼NumberRangeValue\r\n     * 5. å¸®å©ç±»åï¼SmartHelpValue\r\n     */\r\n    value: IValue;\r\n\r\n    /**\r\n     * å³æ¬å·\r\n     */\r\n    rightBrackets: string;\r\n\r\n    /**\r\n     * å³ç³»ç¬¦\r\n     */\r\n    relationType: RelationType;\r\n\r\n    /**\r\n     * æ§ä»¶ç±»åï¼ç®ååæ¬ææ¬ç±»åï¼ä¸æåè¡¨ï¼æ¥æåºé´ï¼æ°å­åºé´ï¼å¸®å©ç±»å\r\n     * æ§ä»¶ç±»åä¸ºIControlæ¥å£ï¼æ ¹æ®ä¸åçæ§ä»¶ç±»åå¯¹åºä¸åçå®ç°ç±»ï¼å·ä½å¦ä¸ï¼\r\n     * 1. ææ¬ç±»åï¼TextControl\r\n     * 2. ä¸æåè¡¨ï¼DropDownListControl\r\n     * 3. æ¥æåºé´ï¼DateRangeControl\r\n     * 4. æ°å­åºé´ï¼NumberRangeControl\r\n     * 5. å¸®å©ç±»åï¼SmartHelpContol\r\n     */\r\n    control: IControl;\r\n    // é»è®¤æ¾ç¤º\r\n    placeHolder: string;\r\n    beginPlaceHolder?: string;\r\n    endPlaceHolder?: string;\r\n}\r\n\r\n/**\r\n * æ¥è¯¢æ¡ä»¶åºååä¸ååºååå¨\r\n */\r\n// export class QueryConditionConvert{\r\n\r\n//     /**\r\n//      * åºåå\r\n//      * @param obj æ¥è¯¢æ¡ä»¶å®ä½\r\n//      */\r\n//     convertJObject(obj:QueryCondition):Object{\r\n//         let queryCondition=obj as QueryCondition;\r\n//         let jobj=new Object();\r\n//         jobj[\"id\"]=queryCondition.id;\r\n//         jobj[\"leftBrackets\"]=queryCondition.leftBrackets;\r\n//         jobj[\"fieldCode\"]=queryCondition.fieldCode;\r\n//         jobj[\"fieldName\"]=queryCondition.fieldName;\r\n//         jobj[\"compareType\"]=queryCondition.compareType;\r\n//         jobj[\"valueType\"]=queryCondition.valueType;\r\n//         let valueConvert=new ConditionValueConvert();\r\n//         if(queryCondition.value){\r\n//             jobj[\"value\"]=valueConvert.convertToObject(queryCondition.value);\r\n//         }\r\n//         jobj[\"rightBrackets\"]=queryCondition.rightBrackets;\r\n//         jobj[\"relationType\"]=queryCondition.relationType;\r\n//         let controlConvertor=new ControlConvert();\r\n//         if(queryCondition.control){\r\n//             jobj[\"control\"]=controlConvertor.convertJObject(queryCondition.control);\r\n//         }\r\n//         return jobj;\r\n//     }\r\n\r\n//     /**\r\n//      * ååºåå\r\n//      * @param jobj æ¥è¯¢æ¡ä»¶å®ä½åºåååçJSONå¯¹è±¡\r\n//      */\r\n//     initFromJobject(jobj:Object):QueryCondition{\r\n//         let queryCondition=new QueryCondition();\r\n//         queryCondition.id=jobj[\"id\"];\r\n//         queryCondition.fieldCode=jobj[\"fieldCode\"];\r\n//         queryCondition.fieldName=jobj[\"fieldName\"];\r\n//         queryCondition.leftBrackets=jobj[\"leftBrackets\"];\r\n//         queryCondition.compareType=jobj[\"compareType\"] as CompareType;\r\n//         queryCondition.valueType=jobj[\"valueType\"] as ValueType;\r\n//         if(jobj[\"value\"]){\r\n//             let valueConvert=new ConditionValueConvert();\r\n//             queryCondition.value=valueConvert.initFromObject(jobj[\"value\"]);\r\n//         }\r\n//         queryCondition.rightBrackets=jobj[\"rightBrackets\"];\r\n//         queryCondition.relationType=jobj[\"relationType\"] as RelationType;\r\n//         if(jobj[\"control\"]){\r\n//             let controlConvertor=new ControlConvert();\r\n//             queryCondition.control=controlConvertor.initFromJobject(jobj[\"control\"]);\r\n//         }\r\n//         return queryCondition;\r\n//     }\r\n// }\r\n","/**\r\n * æ¯è¾ç¬¦\r\n */\r\nexport enum CompareType{\r\n\r\n    /**\r\n     * ç­äº\r\n     */\r\n    // Equal=1,\r\n    Equal = 0,\r\n\r\n    /**\r\n     * å¤§äº\r\n     */\r\n    GreaterThan=2,\r\n\r\n    /**\r\n     * å¤§äºæç­äº\r\n     */\r\n    GreaterThanOrEqual=3,\r\n\r\n    /**\r\n     * å°äº\r\n     */\r\n    LessThan =4,\r\n\r\n    /**\r\n     * å°äºæç­äº\r\n     */\r\n    LessThanOrEqual = 5, \r\n\r\n    /**\r\n     * ä¹é´\r\n     */\r\n    BetWeen=6\r\n}","export enum ValueType{\r\n\r\n    /**\r\n     *å¼ç±»å\r\n     */\r\n    Value=0,\r\n\r\n    /**\r\n     * å¸®å©ç±»å\r\n     */\r\n    SmartHelp=1,\r\n\r\n    /**\r\n     * æä¸¾ç±»å\r\n     */\r\n    Enum=2,\r\n\r\n    /**\r\n     * è¡¨è¾¾å¼\r\n     */\r\n    Express=3\r\n}","export enum RelationType{\r\n\r\n    /**\r\n     * ä¸\r\n     */\r\n    // And=0,\r\n    And = 1,\r\n\r\n    /**\r\n     * æ\r\n     */\r\n    // Or=1\r\n    Or = 2\r\n}","// import { EnumIntegerValue } from \"./integerenumvalue\";\r\n// import { EnumStringValue } from \"./stringenumvalue\";\r\n// import { EnumBoolValue } from \"./boolenumvalue\";\r\n\r\nexport interface CheckboxIEnumValue{\r\n    getEnumValueName():string;\r\n    getEnumValue():any;\r\n\r\n    /**\r\n     * å¼æ¾ç¤º\r\n     */\r\n    value:string;\r\n}\r\n\r\nexport class CheckboxEnumValue implements CheckboxIEnumValue{\r\n\r\n    getEnumValueName():string{\r\n        return this.name;\r\n    }\r\n\r\n    getEnumValue():any{\r\n        return this.value;\r\n    }\r\n    \r\n    /**\r\n     * ææ¬æ¾ç¤º\r\n     */\r\n    name:string;\r\n\r\n    /**\r\n     * å¼æ¾ç¤º\r\n     */\r\n    value:string;\r\n}","import { Injectable } from '@angular/core';\r\nimport { FieldConfig } from '../entity/fieldconfig/fieldconfig';\r\nimport { QueryCondition } from '../entity/querycondition';\r\n// import { SolutionService } from './solution.service';\r\nimport { EnumType } from '../entity/controltype/dropdownlist/enumtype';\r\nimport { EnumBoolValue } from '../entity/controltype/dropdownlist/boolenumvalue';\r\nimport { EnumIntegerValue } from '../entity/controltype/dropdownlist/integerenumvalue';\r\nimport { EnumStringValue } from '../entity/controltype/dropdownlist/stringenumvalue';\r\nimport { ControlType } from '../entity/controltype';\r\nimport { CompareType } from '../entity/comparetype';\r\nimport { DropDownListValue } from '../entity/conditionvalue/dropdownlistvalue';\r\nimport { ValueType } from '../entity/valuetype';\r\nimport { RelationType } from '../entity/relationtype';\r\nimport { NumberRangeValue } from '../entity/conditionvalue/numberrangevaue';\r\nimport { DateRangeValue } from '../entity/conditionvalue/daterangevalue';\r\nimport { TextValue } from '../entity/conditionvalue/textvalue';\r\nimport { DropDownControl } from '../entity/controltype/dropdownlist/dropdowncontrol';\r\nimport { HelpValue } from '../entity/conditionvalue/helpvalue';\r\nimport { CheckboxGroupControl } from '../entity/controltype/checkbox/checkboxcontrol';\r\nimport { SearchValue } from '../entity/conditionvalue/searchvalue';\r\nimport { CheckboxGroupValue } from '../entity/conditionvalue/checkboxgroupvalue';\r\nimport { DateValue } from '../entity/conditionvalue/datevalue';\r\nimport { CheckboxIEnumValue, CheckboxEnumValue } from '../entity/controltype/checkbox/ienumvalue';\r\nimport { DateRangeTimeValue } from '../entity/conditionvalue/daterangetimevalue';\r\n\r\n@Injectable()\r\nexport class ConvertorService {\r\n\r\n    constructor() { }\r\n    // private solutionservice:SolutionService\r\n    /**\r\n    * è·åå·²éæ©çå­æ®µéç½®\r\n    * @param selectedConditions \r\n    */\r\n    getFeildConfigs(selectedConditions: Array<QueryCondition>) {\r\n        let fieldsConfigs = new Array<FieldConfig>();\r\n        if (!selectedConditions || selectedConditions.length <= 0) {\r\n            return fieldsConfigs;\r\n        }\r\n        else {\r\n            selectedConditions.forEach(condition => {\r\n                let fieldConfig = new FieldConfig();\r\n                fieldConfig.id = condition.id;\r\n                fieldConfig.labelCode = condition.fieldCode;\r\n                fieldConfig.name = condition.fieldName;\r\n                fieldConfig.control = condition.control;\r\n                fieldsConfigs.push(fieldConfig);\r\n            });\r\n        }\r\n        return fieldsConfigs;\r\n    }\r\n\r\n    getSelectedFieldConditions(fileds: Array<FieldConfig>, selectedFieldConditions: Array<QueryCondition>) {\r\n        // console.log(selectedFieldConditions);\r\n        let tempSelectedFieldConditions = new Array<QueryCondition>();\r\n        tempSelectedFieldConditions = this.arrayClone(selectedFieldConditions);\r\n        selectedFieldConditions = new Array<QueryCondition>();\r\n        fileds.forEach(filed => {\r\n            filed.control = this.getDropListEnumValues(filed.control as DropDownControl);\r\n            // filed.control = this.getCheckGroupEnumValues(filed.control as CheckboxGroupControl);\r\n            if (tempSelectedFieldConditions.length > 0) {\r\n                let tempIndex = tempSelectedFieldConditions.findIndex(x => x.id == filed.id);\r\n                if (tempIndex != (-1)) {\r\n                    selectedFieldConditions.push(tempSelectedFieldConditions[tempIndex]);\r\n                }\r\n                else {\r\n                    selectedFieldConditions = this.getNewFieldConditions(filed, selectedFieldConditions);\r\n                }\r\n            } else {\r\n                selectedFieldConditions = this.getNewFieldConditions(filed, selectedFieldConditions);\r\n            }\r\n\r\n        });\r\n        return selectedFieldConditions;\r\n    }\r\n\r\n    private getDropListEnumValues(control: DropDownControl): DropDownControl {\r\n        if (control.valueType == EnumType.BoolType) {\r\n            let enumValues = new Array<EnumBoolValue>();\r\n            control.enumValues.forEach(element => {\r\n                enumValues.push(Object.assign(new EnumBoolValue(), element));\r\n            });\r\n            control.enumValues = enumValues;\r\n        }\r\n        else if (control.valueType == EnumType.IntType) {\r\n            let enumValues = new Array<EnumIntegerValue>();\r\n            control.enumValues.forEach(element => {\r\n                enumValues.push(Object.assign(new EnumIntegerValue(), element));\r\n            });\r\n            control.enumValues = enumValues;\r\n        }\r\n        else if (control.valueType == EnumType.StringType) {\r\n            let enumValues = new Array<EnumStringValue>();\r\n            control.enumValues.forEach(element => {\r\n                enumValues.push(Object.assign(new EnumStringValue(), element));\r\n            });\r\n            control.enumValues = enumValues;\r\n        }\r\n        return control;\r\n    }\r\n\r\n    private getCheckGroupEnumValues(control: CheckboxGroupControl): CheckboxGroupControl {\r\n        let enumValues = new Array<CheckboxIEnumValue>();\r\n        control.enumValues.forEach(element => {\r\n            enumValues.push(Object.assign(new CheckboxEnumValue(), element));\r\n        });\r\n        control.enumValues = enumValues;\r\n        return control;\r\n    }\r\n\r\n    public getNewFieldConditions(filed: FieldConfig, selectedFieldConditions: Array<QueryCondition>) {\r\n        let selectedFieldCondition = new QueryCondition();\r\n\r\n        if (filed.control.getControlType() == ControlType.Text) {\r\n            selectedFieldConditions = this.getTextValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);\r\n        }\r\n        else if (filed.control.getControlType() == ControlType.DateRange) {\r\n            selectedFieldConditions = this.getDateRangeValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);\r\n        }\r\n        else if (filed.control.getControlType() == ControlType.DateRangeTime) {\r\n            selectedFieldConditions = this.getDateRangeTimeValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);\r\n        }\r\n        else if (filed.control.getControlType() == ControlType.MonthRange) {\r\n            selectedFieldConditions = this.getDateRangeValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);\r\n        }\r\n        else if (filed.control.getControlType() == ControlType.YearRange) {\r\n            selectedFieldConditions = this.getDateRangeValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);\r\n        }\r\n        else if (filed.control.getControlType() == ControlType.NumberRange) {\r\n            selectedFieldConditions = this.getNumberRangeValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);\r\n        }\r\n        else if (filed.control.getControlType() == ControlType.Help) {\r\n            selectedFieldConditions = this.getSmartHelpValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);\r\n        }\r\n        else if (filed.control.getControlType() == ControlType.DropDown) {\r\n            selectedFieldConditions = this.getDropDownListValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);\r\n        }\r\n        else if (filed.control.getControlType() == ControlType.Search) {\r\n            selectedFieldConditions = this.getSearchValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);\r\n        }\r\n        else if (filed.control.getControlType() == ControlType.Date) {\r\n            selectedFieldConditions = this.getDateValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);\r\n        }\r\n        else if (filed.control.getControlType() == ControlType.Year) {\r\n            selectedFieldConditions = this.getDateValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);\r\n        }\r\n        else if (filed.control.getControlType() == ControlType.Month) {\r\n            selectedFieldConditions = this.getDateValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);\r\n        }\r\n        else if (filed.control.getControlType() == ControlType.CheckboxGroup) {\r\n            selectedFieldConditions = this.getCheckboxGroupValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);\r\n        }\r\n        else if (filed.control.getControlType() == ControlType.Radio) {\r\n            selectedFieldConditions = this.getRadioValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);\r\n        }\r\n        else if (filed.control.getControlType() == ControlType.InputGroup) {\r\n            selectedFieldConditions = this.getInputGroupValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);\r\n        }\r\n        return selectedFieldConditions;\r\n    }\r\n\r\n    private getDropDownListValueFieldCondition(selectedFieldCondition: QueryCondition, filed: FieldConfig, selectedFieldConditions: Array<QueryCondition>) {\r\n        selectedFieldCondition.id = filed.id;\r\n        selectedFieldCondition.fieldCode = filed.labelCode;\r\n        selectedFieldCondition.placeHolder = filed.placeHolder;\r\n        selectedFieldCondition.fieldName = filed.name;\r\n        selectedFieldCondition.compareType = CompareType.Equal;\r\n        selectedFieldCondition.valueType = ValueType.Value;\r\n        selectedFieldCondition.value = filed.value;\r\n        selectedFieldCondition.relationType = RelationType.And;\r\n        selectedFieldCondition.control = filed.control;\r\n        this.getDropListEnumValues(selectedFieldCondition.control as DropDownControl);\r\n        selectedFieldConditions.push(selectedFieldCondition);\r\n        return selectedFieldConditions;\r\n    }\r\n\r\n    private getCheckboxGroupValueFieldCondition(selectedFieldCondition: QueryCondition, filed: FieldConfig, selectedFieldConditions: Array<QueryCondition>) {\r\n        selectedFieldCondition.id = filed.id;\r\n        selectedFieldCondition.fieldCode = filed.labelCode;\r\n        selectedFieldCondition.placeHolder = filed.placeHolder;\r\n        selectedFieldCondition.fieldName = filed.name;\r\n        selectedFieldCondition.compareType = CompareType.Equal;\r\n        selectedFieldCondition.valueType = ValueType.Value;\r\n        selectedFieldCondition.value = filed.value;\r\n        selectedFieldCondition.relationType = RelationType.And;\r\n        selectedFieldCondition.control = filed.control;\r\n        this.getCheckGroupEnumValues(selectedFieldCondition.control as CheckboxGroupControl);\r\n        selectedFieldConditions.push(selectedFieldCondition);\r\n        return selectedFieldConditions;\r\n    }\r\n\r\n    private getRadioValueFieldCondition(selectedFieldCondition: QueryCondition, filed: FieldConfig, selectedFieldConditions: Array<QueryCondition>) {\r\n        selectedFieldCondition.id = filed.id;\r\n        selectedFieldCondition.fieldCode = filed.labelCode;\r\n        selectedFieldCondition.placeHolder = filed.placeHolder;\r\n        selectedFieldCondition.fieldName = filed.name;\r\n        selectedFieldCondition.compareType = CompareType.Equal;\r\n        selectedFieldCondition.valueType = ValueType.Value;\r\n        selectedFieldCondition.value = filed.value;\r\n        selectedFieldCondition.relationType = RelationType.And;\r\n        selectedFieldCondition.control = filed.control;\r\n        this.getCheckGroupEnumValues(selectedFieldCondition.control as CheckboxGroupControl);\r\n        selectedFieldConditions.push(selectedFieldCondition);\r\n        return selectedFieldConditions;\r\n    }\r\n\r\n    private getSmartHelpValueFieldCondition(selectedFieldCondition: QueryCondition, filed: FieldConfig, selectedFieldConditions: Array<QueryCondition>) {\r\n        selectedFieldCondition.id = filed.id;\r\n        selectedFieldCondition.fieldCode = filed.labelCode;\r\n        selectedFieldCondition.placeHolder = filed.placeHolder;\r\n        selectedFieldCondition.fieldName = filed.name;\r\n        selectedFieldCondition.compareType = CompareType.Equal;\r\n        selectedFieldCondition.valueType = ValueType.Value;\r\n        selectedFieldCondition.value = filed.value;\r\n        selectedFieldCondition.relationType = RelationType.And;\r\n        selectedFieldCondition.control = filed.control;\r\n        selectedFieldConditions.push(selectedFieldCondition);\r\n        return selectedFieldConditions;\r\n    }\r\n\r\n    private getNumberRangeValueFieldCondition(selectedFieldCondition: QueryCondition, filed: FieldConfig, selectedFieldConditions: Array<QueryCondition>) {\r\n        selectedFieldCondition.id = filed.id;\r\n        selectedFieldCondition.fieldCode = filed.labelCode;\r\n        selectedFieldCondition.placeHolder = filed.placeHolder;\r\n        selectedFieldCondition.beginPlaceHolder = filed.beginPlaceHolder;\r\n        selectedFieldCondition.endPlaceHolder = filed.endPlaceHolder;\r\n        selectedFieldCondition.fieldName = filed.name;\r\n        selectedFieldCondition.compareType = CompareType.BetWeen;\r\n        selectedFieldCondition.valueType = ValueType.Value;\r\n        selectedFieldCondition.value = filed.value;\r\n        selectedFieldCondition.relationType = RelationType.And;\r\n        selectedFieldCondition.control = filed.control;\r\n        selectedFieldConditions.push(selectedFieldCondition);\r\n        return selectedFieldConditions;\r\n    }\r\n\r\n    private getDateRangeValueFieldCondition(selectedFieldCondition: QueryCondition, filed: FieldConfig, selectedFieldConditions: Array<QueryCondition>) {\r\n        selectedFieldCondition.id = filed.id;\r\n        selectedFieldCondition.fieldCode = filed.labelCode;\r\n        selectedFieldCondition.placeHolder = filed.placeHolder;\r\n        selectedFieldCondition.beginPlaceHolder = filed.beginPlaceHolder;\r\n        selectedFieldCondition.endPlaceHolder = filed.endPlaceHolder;\r\n        selectedFieldCondition.fieldName = filed.name;\r\n        selectedFieldCondition.compareType = CompareType.BetWeen;\r\n        selectedFieldCondition.valueType = ValueType.Value;\r\n        selectedFieldCondition.value = filed.value;\r\n        selectedFieldCondition.relationType = RelationType.And;\r\n        selectedFieldCondition.control = filed.control;\r\n        selectedFieldConditions.push(selectedFieldCondition);\r\n        return selectedFieldConditions;\r\n    }\r\n\r\n    private getDateRangeTimeValueFieldCondition(selectedFieldCondition: QueryCondition, filed: FieldConfig, selectedFieldConditions: Array<QueryCondition>) {\r\n        selectedFieldCondition.id = filed.id;\r\n        selectedFieldCondition.fieldCode = filed.labelCode;\r\n        selectedFieldCondition.placeHolder = filed.placeHolder;\r\n        selectedFieldCondition.fieldName = filed.name;\r\n        selectedFieldCondition.compareType = CompareType.BetWeen;\r\n        selectedFieldCondition.valueType = ValueType.Value;\r\n        selectedFieldCondition.value = filed.value;\r\n        selectedFieldCondition.relationType = RelationType.And;\r\n        selectedFieldCondition.control = filed.control;\r\n        selectedFieldConditions.push(selectedFieldCondition);\r\n        return selectedFieldConditions;\r\n    }\r\n\r\n    private getTextValueFieldCondition(selectedFieldCondition: QueryCondition, filed: FieldConfig, selectedFieldConditions: Array<QueryCondition>) {\r\n        selectedFieldCondition.id = filed.id;\r\n        selectedFieldCondition.fieldCode = filed.labelCode;\r\n        selectedFieldCondition.placeHolder = filed.placeHolder;\r\n        selectedFieldCondition.fieldName = filed.name;\r\n        selectedFieldCondition.compareType = CompareType.Equal;\r\n        selectedFieldCondition.valueType = ValueType.Value;\r\n        selectedFieldCondition.value = filed.value;\r\n        selectedFieldCondition.relationType = RelationType.And;\r\n        selectedFieldCondition.control = filed.control;\r\n        selectedFieldConditions.push(selectedFieldCondition);\r\n        return selectedFieldConditions;\r\n    }\r\n    private getInputGroupValueFieldCondition(selectedFieldCondition: QueryCondition, filed: FieldConfig, selectedFieldConditions: Array<QueryCondition>) {\r\n        selectedFieldCondition.id = filed.id;\r\n        selectedFieldCondition.fieldCode = filed.labelCode;\r\n        selectedFieldCondition.placeHolder = filed.placeHolder;\r\n        selectedFieldCondition.fieldName = filed.name;\r\n        selectedFieldCondition.compareType = CompareType.Equal;\r\n        selectedFieldCondition.valueType = ValueType.Value;\r\n        selectedFieldCondition.value = filed.value;\r\n        selectedFieldCondition.relationType = RelationType.And;\r\n        selectedFieldCondition.control = filed.control;\r\n        selectedFieldConditions.push(selectedFieldCondition);\r\n        return selectedFieldConditions;\r\n    }\r\n\r\n    private getDateValueFieldCondition(selectedFieldCondition: QueryCondition, filed: FieldConfig, selectedFieldConditions: Array<QueryCondition>) {\r\n        selectedFieldCondition.id = filed.id;\r\n        selectedFieldCondition.fieldCode = filed.labelCode;\r\n        selectedFieldCondition.placeHolder = filed.placeHolder;\r\n        selectedFieldCondition.fieldName = filed.name;\r\n        selectedFieldCondition.compareType = CompareType.Equal;\r\n        selectedFieldCondition.valueType = ValueType.Value;\r\n        selectedFieldCondition.value = filed.value;\r\n        selectedFieldCondition.relationType = RelationType.And;\r\n        selectedFieldCondition.control = filed.control;\r\n        selectedFieldConditions.push(selectedFieldCondition);\r\n        return selectedFieldConditions;\r\n    }\r\n\r\n    private getSearchValueFieldCondition(selectedFieldCondition: QueryCondition, filed: FieldConfig, selectedFieldConditions: Array<QueryCondition>) {\r\n        selectedFieldCondition.id = filed.id;\r\n        selectedFieldCondition.fieldCode = filed.labelCode;\r\n        selectedFieldCondition.placeHolder = filed.placeHolder;\r\n        selectedFieldCondition.fieldName = filed.name;\r\n        selectedFieldCondition.compareType = CompareType.Equal;\r\n        selectedFieldCondition.valueType = ValueType.Value;\r\n        selectedFieldCondition.value = filed.value;\r\n        selectedFieldCondition.relationType = RelationType.And;\r\n        selectedFieldCondition.control = filed.control;\r\n        selectedFieldConditions.push(selectedFieldCondition);\r\n        return selectedFieldConditions;\r\n    }\r\n\r\n    private arrayClone(input: Array<any>): Array<any> {\r\n        let result = new Array<any>();\r\n        if (input && input.length > 0) {\r\n            input.forEach(element => {\r\n                result.push(Object.assign({}, element));\r\n            });\r\n        }\r\n        return result;\r\n    }\r\n}","import { InjectionToken } from '@angular/core';\r\nimport { QueryCondition } from '../entity/querycondition';\r\n\r\nexport interface ListFilterHandler{\r\n    setCurrentFilterConditions(conditions: QueryCondition[]): void;\r\n}\r\n\r\nexport const LISTFILTER_HANDLER_TOKEN = new InjectionToken<ListFilterHandler>('gsp-cmp/LISTFILTER_HANDLER');","import {\r\n    Component, OnInit, Input, ViewChild, AfterViewInit, ChangeDetectorRef,\r\n    ChangeDetectionStrategy, Output, EventEmitter, ElementRef,\r\n    Renderer2, Injector, LOCALE_ID, Optional, InjectFlags, OnDestroy\r\n} from '@angular/core';\r\nimport { FieldConfig } from './entity/fieldconfig/fieldconfig';\r\nimport { QueryCondition } from './entity/querycondition';\r\nimport { ControlType } from './entity/controltype';\r\nimport { ListFilterService } from './service/list-filter.service';\r\nimport { QuerySolutionService } from './submithandlers/query-solution.service';\r\nimport { ConvertorService } from './service/convertorservice';\r\nimport { TextValue } from './entity/conditionvalue/textvalue';\r\nimport { HelpValue } from './entity/conditionvalue/helpvalue';\r\nimport { DropDownListValue } from './entity/conditionvalue/dropdownlistvalue';\r\nimport { DateRangeValue } from './entity/conditionvalue/daterangevalue';\r\nimport { NumberRangeValue } from './entity/conditionvalue/numberrangevaue';\r\nimport { SearchValue } from './entity/conditionvalue/searchvalue';\r\nimport { DateValue } from './entity/conditionvalue/datevalue';\r\nimport { CheckboxGroupValue } from './entity/conditionvalue/checkboxgroupvalue';\r\nimport { DateRangeTimeValue } from './entity/conditionvalue/daterangetimevalue';\r\nimport { ListFilterHandler, LISTFILTER_HANDLER_TOKEN } from './interface/IistFilterHandler';\r\nimport { RadioGroupValue } from './entity/conditionvalue/radiovalue';\r\nimport { MonthValue } from './entity/conditionvalue/month';\r\nimport { YearValue } from './entity/conditionvalue/yearvalue';\r\nimport { YearRangeValue } from './entity/conditionvalue/yearrange';\r\nimport { MonthRangeValue } from './entity/conditionvalue/monthrange';\r\nimport { InputGroupValue } from './entity/conditionvalue/inputgroup';\r\nimport { IdService, OverLayHiddenService } from '@farris/ui-common';\r\n\r\n@Component({\r\n    selector: 'farris-list-filter',\r\n    templateUrl: './list-filter.component.html',\r\n    styleUrls: ['./list-filter.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ListFilterComponent implements OnInit, AfterViewInit,OnDestroy {\r\n\r\n    @ViewChild('filterMainBasis') filterMainBasisRef: ElementRef;\r\n    @ViewChild('floatPanel') floatPanel: ElementRef;\r\n    //  è¡¨åå·¦å¯¹é½\r\n    @Input() alLeft = false;\r\n    //  å¹³åç©ºé´\r\n    @Input() autoWidth = true;\r\n    //  å®æ¶æç´¢\r\n    @Input() liveSearch = false;\r\n    //  labelçå®½åº¦æ¯å¦èªéåº\r\n    @Input() autoLabel = false;\r\n    //  æ¯å¦ç¦ç¨\r\n    @Input() disabled = false;\r\n\r\n    @Input() filterClass: string;\r\n    @Input() filterPaddingNone = false;\r\n\r\n    @Input() filterType: string;\r\n    // åå§åå¼\r\n    _defaultValue: FieldConfig[];\r\n    // é»è®¤å¼æ¯ç©ºå¼æ¶æ§è¡æ¥è¯¢ï¼å¼å®¹æ§æ¹å¼\r\n    @Input() defaultEmptyValueSearch=true;\r\n    @Input()\r\n    set defaultValue(configs: FieldConfig[]) {\r\n        this._defaultValue = configs;\r\n        let canFilter=this.defaultEmptyValueSearch||configs&&configs.length>0;\r\n        if(canFilter){\r\n            setTimeout(() => {\r\n                this.setFilterValue(this._defaultValue);\r\n            });\r\n        }\r\n    }\r\n    get defaultValue() {\r\n        return this._defaultValue;\r\n    }\r\n\r\n    @Output() query = new EventEmitter();\r\n    @Output() clear = new EventEmitter();\r\n    @Output() searchChange = new EventEmitter();\r\n    @Output() conditionsChange = new EventEmitter();\r\n\r\n    filterDatas: Array<FieldConfig>;\r\n    //  filterWidth:number = 1000;\r\n    //  æ è®°æ¯å¦ææ»å¨æ¡\r\n    //  hasScroll = true;\r\n    //  éè¦çå¬æ¶æçè¡¨å\r\n    //  resizeGroups: listFilterGroup;\r\n    // ç­éiconé¨åå°çº¢ç¹\r\n    showExpandTag = false;\r\n    //  ååºå¼å®¹å¨\r\n    //  @ViewChild('resizedContainer') resizedContainerEl;\r\n    //  ååºå¼åå®¹å®¹å¨\r\n    //  @ViewChild('resizedContent') resizedContentEl;\r\n    //  @ViewChild('resizeLists') resizeListsEl;\r\n    //  @ViewChild('simulateExtend') simulateExtendEl;\r\n\r\n    //  @ViewChild('resizedContainer', { read: FResizedDirective })\r\n    //  resizedContainerDirective: FResizedDirective;\r\n\r\n    /** æç´¢è¡¨ååè¡¨ */\r\n    _filterList: Array<any>;\r\n\r\n    /** æ¯å¦éè¦æ¾ç¤ºå±å¼æ´å¤icon */\r\n    showMoreIcon = false;\r\n    //  moreIconWidth:number = 0;\r\n    showFilter = false;\r\n    // æ¯å¦å±ç°åºçåªæä¸ä¸ªæç´¢æ§ä»¶\r\n    formExpand = false;\r\n    // æäº¤è¡¨åæ°æ®\r\n    //  queryList;\r\n    // éèæäº¤è¡¨åæ°æ®\r\n    //  extendqueryList;\r\n    /** å¾ªç¯è¡¨å */\r\n    listFilterConditions: Array<QueryCondition> = new Array<QueryCondition>();\r\n    /** ç¨æ¥å­å¨setvalueåæ°æ® */\r\n    stagListFilterConditions: Array<QueryCondition> = new Array<QueryCondition>();\r\n    /** è®°å½é»è®¤æ¶èµ·çæç´¢è¡¨ååè¡¨ */\r\n    extendFilterList: Array<QueryCondition> = [];\r\n    /** è®°å½æ¾ç¤ºçæç´¢è¡¨ååè¡¨ */\r\n    showFilterList: Array<QueryCondition> = [];\r\n    /** æ¾ç¤ºä¸­è¡¨åçå¿å¡«é¡¹ */\r\n    requiredListFilter: Array<QueryCondition> = [];\r\n    /** éèä¸­è¡¨åçå¿å¡«é¡¹ */\r\n    //  extendRequiredListFilter: Array<QueryCondition> = [];\r\n    /** è¡¨åæ¯å¦åè®¸æäº¤ */\r\n    canSubmit = false;\r\n    /** æ©å±è¡¨åæ¯å¦åè®¸æäº¤ */\r\n    //  extendCanSubmit:boolean = false;\r\n\r\n    localeIds = {\r\n        en: 'en',\r\n        'zh-CHS': 'zh-CHS'\r\n    };\r\n    currentLocale = 'zh-CHS';\r\n    @Input() isControlInline = true;\r\n\r\n    @Input()\r\n    get filterList(): Array<any> {\r\n        return this._filterList;\r\n    }\r\n    set filterList(filterList: Array<any>) {\r\n        this._filterList = filterList;\r\n        this.initFilterList();\r\n    }\r\n\r\n    /**\r\n     * ç»ä»¶æå¡æ¥å£\r\n     */\r\n    listfilterHandler: ListFilterHandler;\r\n    \r\n    fieldCodeOfClearFields: Array<string> = [];\r\n\r\n    private idService: IdService;\r\n    UPDATE_FILTER_VALUES_TIMER = null;\r\n    private overLayService: OverLayHiddenService = null;\r\n    constructor(\r\n        private filterService: ListFilterService,\r\n        private cd: ChangeDetectorRef,\r\n        private handler: QuerySolutionService,\r\n        private convertorService: ConvertorService,\r\n        private render: Renderer2,\r\n        @Optional() private injector: Injector,\r\n    ) {\r\n        if (this.injector) {\r\n            this.currentLocale = this.injector.get(LOCALE_ID);\r\n            this.listfilterHandler = this.injector.get<ListFilterHandler>(LISTFILTER_HANDLER_TOKEN, null, InjectFlags.Optional);\r\n            this.idService = this.injector.get(IdService);\r\n            this.overLayService = this.injector.get(OverLayHiddenService, null);\r\n        }\r\n        if (!this.overLayService) {\r\n            this.overLayService = new OverLayHiddenService();\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        // if (this.currentLocale === this.localeIds['en']) {\r\n        //     this.isControlInline = false;\r\n        // } else {\r\n        //     this.isControlInline = true;\r\n        // }\r\n        this.canShowMoreIcon();\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.autoWidth && !this.formExpand && this.filterMainBasisRef) {\r\n            const basicList = this.filterMainBasisRef.nativeElement.querySelectorAll('.filter-input-list');\r\n            let basicWidth = 0;\r\n            if (basicList && basicList.length) {\r\n                for (let k = 0; k < basicList.length; k++) {\r\n                    const offW = Math.ceil(parseFloat(basicList[k].offsetWidth || 0));\r\n                    if (offW > 0) {\r\n                        basicWidth += offW;\r\n                    }\r\n                }\r\n            }\r\n            if (basicWidth > 0) {\r\n                this.render.setStyle(this.filterMainBasisRef.nativeElement, 'width', basicWidth + 'px');\r\n            }\r\n        }\r\n\r\n    }\r\n    ngOnDestroy(){\r\n        if (this.floatPanel) {\r\n            this.overLayService.destory(this.floatPanel.nativeElement);\r\n        }\r\n    }\r\n    /** åå§åå¤çè¡¨åæ°æ® */\r\n    initFilterList() {\r\n        this.listFilterConditions = new Array<QueryCondition>();\r\n        this.extendFilterList = [];\r\n        this.showFilterList = [];\r\n        this.filterDatas = this.filterService.fieldSchemasConvert(this._filterList);\r\n        if (this.filterDatas && this.filterDatas.length) {\r\n            this.listFilterConditions = this.convertorService.getSelectedFieldConditions(this.filterDatas, this.listFilterConditions);\r\n            this.stagListFilterConditions = this.listFilterConditions.map(o => ({ ...o }));\r\n            // å­å¨æ©å±é¡¹åé»è®¤å±ç¤ºè¡¨å\r\n            this.listFilterConditions.forEach(field => {\r\n                if (field.control.isExtend) {\r\n                    this.extendFilterList.push(field);\r\n                } else {\r\n                    this.showFilterList.push(field);\r\n                }\r\n            });\r\n            // å¤æ­æ¯å¦æ¯å·¦å¯¹é½ åªæä¸ä¸ªæç´¢\r\n            const _basisFilterList = this.listFilterConditions.filter((field) => {\r\n                return !field.control.isExtend;\r\n            })\r\n            if (_basisFilterList && _basisFilterList.length === 1 && this.getControlType(_basisFilterList[0]) === 'search') {\r\n                this.formExpand = true;\r\n            }\r\n            this.conditionChangeHandler();\r\n            this.inSetCurrentFilterConditions();\r\n            // å­å¨é»è®¤å±ç¤ºä¸­å¿å¡«é¡¹\r\n            this.requiredListInit();\r\n            this.canShowMoreIcon();\r\n            //  this.listSearch();\r\n            this.cd.detectChanges();\r\n        }\r\n    }\r\n\r\n    inSetCurrentFilterConditions() {\r\n        if (this.listfilterHandler) {\r\n            this.listfilterHandler.setCurrentFilterConditions(this.listFilterConditions);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * è·åæ§ä»¶ç±»å\r\n     * @param selectedFieldCondition\r\n     */\r\n    getControlType(selectedFieldCondition: QueryCondition): string {\r\n        if (selectedFieldCondition) {\r\n            if (selectedFieldCondition.control.getControlType() == ControlType.Text) {\r\n                return 'input';\r\n            } else if (selectedFieldCondition.control.getControlType() == ControlType.Search) {\r\n                return 'search';\r\n            } else if (selectedFieldCondition.control.getControlType() == ControlType.Date) {\r\n                return 'date';\r\n            } else if (selectedFieldCondition.control.getControlType() == ControlType.Month) {\r\n                return 'month';\r\n            } else if (selectedFieldCondition.control.getControlType() == ControlType.Year) {\r\n                return 'year';\r\n            } else if (selectedFieldCondition.control.getControlType() == ControlType.DateRange) {\r\n                return 'daterange';\r\n            } else if (selectedFieldCondition.control.getControlType() == ControlType.DateRangeTime) {\r\n                return 'daterangetime';\r\n            } else if (selectedFieldCondition.control.getControlType() == ControlType.MonthRange) {\r\n                return 'monthrange';\r\n            } else if (selectedFieldCondition.control.getControlType() == ControlType.YearRange) {\r\n                return 'yearrange';\r\n            } else if (selectedFieldCondition.control.getControlType() == ControlType.DropDown) {\r\n                return 'dropdown';\r\n            } else if (selectedFieldCondition.control.getControlType() == ControlType.NumberRange) {\r\n                return 'number';\r\n            } else if (selectedFieldCondition.control.getControlType() == ControlType.Help) {\r\n                return 'help';\r\n            } else if (selectedFieldCondition.control.getControlType() == ControlType.CheckboxGroup) {\r\n                return 'checkboxgroup';\r\n            } else if (selectedFieldCondition.control.getControlType() == ControlType.Radio) {\r\n                return 'radio';\r\n            } else if (selectedFieldCondition.control.getControlType() == ControlType.InputGroup) {\r\n                return 'input-group';\r\n            } else {\r\n                return 'input';\r\n            }\r\n        }\r\n\r\n    }\r\n    /** è·å¾ç±»å */\r\n    getStyle(currentItem: any): string {\r\n        const defaultCondtionStyle = 'col-12 col-md-6 col-xl-3 col-el-2';\r\n        return (this.filterClass && !this.autoWidth) ? this.filterClass : defaultCondtionStyle;\r\n    }\r\n\r\n    /** å¤æ­æ¯å¦éè¦æ¾ç¤ºæ´å¤æé® */\r\n    canShowMoreIcon() {\r\n        if (this.extendFilterList.length > 0) {\r\n            this.showMoreIcon = true;\r\n        } else {\r\n            this.showMoreIcon = false;\r\n        }\r\n    }\r\n\r\n    /** å¤æ­æ¯å¦ææå¿å¡«é¡¹é½å¡«åå®æ¯ */\r\n    canSubmitFilter(requirelist) {\r\n        let formCanSubmit = false;\r\n        if (!requirelist || !requirelist.length) {\r\n            formCanSubmit = true;\r\n            return formCanSubmit;\r\n        } else {\r\n            for (let i = 0; i < requirelist.length; i++) {\r\n                const item = requirelist[i];\r\n                if (item.control.getControlType() === ControlType.Text) {\r\n                    const tv = (item.value as TextValue);\r\n                    if (Object.keys(tv).length < 0 || !tv.value) {\r\n                        formCanSubmit = false;\r\n                        return false;\r\n                    } else {\r\n                        formCanSubmit = true;\r\n                    }\r\n                } else if (item.control.getControlType() === ControlType.Help) {\r\n                    const shv = (item.value as HelpValue);\r\n                    if (Object.keys(shv).length === 0 || !shv.value || !shv.valueField) {\r\n                        formCanSubmit = false;\r\n                        return false;\r\n                    } else {\r\n                        formCanSubmit = true;\r\n                    }\r\n                } else if (item.control.getControlType() === ControlType.DropDown) {\r\n                    const ddv = (item.value as DropDownListValue);\r\n                    if (Object.keys(ddv).length === 0 || !ddv.value) {\r\n                        formCanSubmit = false;\r\n                        return false;\r\n                    } else {\r\n                        formCanSubmit = true;\r\n                    }\r\n                } else if (item.control.getControlType() === ControlType.DateRange) {\r\n                    const drv = (item.value as DateRangeValue);\r\n                    if (Object.keys(drv).length === 0 || (!drv.startTime && !drv.endTime)) {\r\n                        formCanSubmit = false;\r\n                        return false;\r\n                    } else {\r\n                        formCanSubmit = true;\r\n                    }\r\n                } else if (item.control.getControlType() === ControlType.DateRangeTime) {\r\n                    const drv = (item.value as DateRangeTimeValue);\r\n                    if (Object.keys(drv).length === 0 || (!drv.startTime && !drv.endTime)) {\r\n                        formCanSubmit = false;\r\n                        return false;\r\n                    } else {\r\n                        formCanSubmit = true;\r\n                    }\r\n                } else if (item.control.getControlType() === ControlType.MonthRange) {\r\n                    const mrv = (item.value as MonthRangeValue);\r\n                    if (Object.keys(mrv).length === 0 || (!mrv.startTime && !mrv.endTime)) {\r\n                        formCanSubmit = false;\r\n                        return false;\r\n                    } else {\r\n                        formCanSubmit = true;\r\n                    }\r\n                } else if (item.control.getControlType() === ControlType.YearRange) {\r\n                    const yrv = (item.value as YearRangeValue);\r\n                    if (Object.keys(yrv).length === 0 || (!yrv.startTime && !yrv.endTime)) {\r\n                        formCanSubmit = false;\r\n                        return false;\r\n                    } else {\r\n                        formCanSubmit = true;\r\n                    }\r\n                } else if (item.control.getControlType() === ControlType.NumberRange) {\r\n                    const nrv = (item.value as NumberRangeValue);\r\n                    if (Object.keys(nrv).length === 0 || (!nrv.startValue && !nrv.endValue)) {\r\n                        formCanSubmit = false;\r\n                        return false;\r\n                    } else {\r\n                        formCanSubmit = true;\r\n                    }\r\n                } else if (item.control.getControlType() === ControlType.Search) {\r\n                    const sv = (item.value as SearchValue);\r\n                    if (Object.keys(sv).length < 0 || !sv.value) {\r\n                        formCanSubmit = false;\r\n                        return false;\r\n                    } else {\r\n                        formCanSubmit = true;\r\n                    }\r\n                } else if (item.control.getControlType() === ControlType.Date) {\r\n                    const dv = (item.value as DateValue);\r\n                    if (Object.keys(dv).length < 0 || !dv.value) {\r\n                        formCanSubmit = false;\r\n                        return false;\r\n                    } else {\r\n                        formCanSubmit = true;\r\n                    }\r\n                } else if (item.control.getControlType() === ControlType.Month) {\r\n                    const mv = (item.value as MonthValue);\r\n                    if (Object.keys(mv).length < 0 || !mv.value) {\r\n                        formCanSubmit = false;\r\n                        return false;\r\n                    } else {\r\n                        formCanSubmit = true;\r\n                    }\r\n                } else if (item.control.getControlType() === ControlType.Year) {\r\n                    const yv = (item.value as YearValue);\r\n                    if (Object.keys(yv).length < 0 || !yv.value) {\r\n                        formCanSubmit = false;\r\n                        return false;\r\n                    } else {\r\n                        formCanSubmit = true;\r\n                    }\r\n                } else if (item.control.getControlType() === ControlType.CheckboxGroup) {\r\n                    const cbgv = (item.value as CheckboxGroupValue);\r\n                    if (Object.keys(cbgv).length === 0 || Object.keys(cbgv.value).length === 0) {\r\n                        formCanSubmit = false;\r\n                        return false;\r\n                    } else {\r\n                        formCanSubmit = true;\r\n                    }\r\n                } else if (item.control.getControlType() === ControlType.Radio) {\r\n                    const ddv = (item.value as RadioGroupValue);\r\n                    if (Object.keys(ddv).length === 0 || !ddv.value) {\r\n                        formCanSubmit = false;\r\n                        return false;\r\n                    } else {\r\n                        formCanSubmit = true;\r\n                    }\r\n                } else if (item.control.getControlType() === ControlType.InputGroup) {\r\n                    const sv = (item.value as InputGroupValue);\r\n                    if (Object.keys(sv).length < 0 || !sv.textValue) {\r\n                        formCanSubmit = false;\r\n                        return false;\r\n                    } else {\r\n                        formCanSubmit = true;\r\n                    }\r\n                }\r\n\r\n            }\r\n            return formCanSubmit;\r\n        }\r\n\r\n    }\r\n    /** æç´¢è¡¨ååå */\r\n    onSearch($event, item) {\r\n        if (this.disabled) { return; }\r\n        this.conditionChangeHandler(false);\r\n        this.searchChange.emit({ item, conditions: this.listFilterConditions, instance: this});\r\n        this.inSetCurrentFilterConditions();\r\n        this.canSubmit = this.canSubmitFilter(this.requiredListFilter);\r\n        if (item.control.isExtend || !this.canSubmit || !this.liveSearch) {\r\n            return;\r\n        }\r\n        this.submit('showFormData', this.listFilterConditions);\r\n    }\r\n    /** å¼å§ç­é */\r\n    filterClick() {\r\n        if (this.disabled || !this.canSubmit) { return; }\r\n        this.submit('showFormData', this.listFilterConditions);\r\n    }\r\n    /** æ¶æé¨åç¹å»ç¡®å®æäº¤ */\r\n    listSearch() {\r\n        if (this.disabled || !this.canSubmit) { return; }\r\n        this.showFilter = false;\r\n        this.submit('extendFormData', this.listFilterConditions);\r\n    }\r\n    /** åæ¶æç´¢ */\r\n    listSearchCancel() {\r\n        this.showFilter = false;\r\n    }\r\n    /** æäº¤è¡¨å */\r\n    submit(type, filterlist) {\r\n        let queryList;\r\n        queryList = this.handler.setFilterConditions(filterlist);\r\n        if (type == 'extendFormData') {\r\n            if (queryList.length > 0) {\r\n                this.showExpandTag = true;\r\n            }\r\n            else {\r\n                this.showExpandTag = false;\r\n            }\r\n        }\r\n        this.query.emit({ type, data: JSON.stringify(queryList) });\r\n    }\r\n    /** å¯¹å¤æä¾è·å¾è¡¨åæç´¢æ°æ® */\r\n    getFilterData() {\r\n        let queryList;\r\n        queryList = this.handler.setFilterConditions(this.listFilterConditions);\r\n        return JSON.stringify(queryList);\r\n    }\r\n    /** è·åå±ç¤ºå¨å¤é¨çè¡¨åé¿åº¦ */\r\n    getShowLength() {\r\n        if (this.showFilterList) {\r\n            return this.showFilterList.length;\r\n        }\r\n    }\r\n    /** æ¸ç©ºæ¡ä»¶ */\r\n    resetSearch() {\r\n        if (this.disabled) { return; }\r\n        if (this.listFilterConditions && this.listFilterConditions.length) {\r\n            this.listFilterConditions.forEach(listFilterCondition => {\r\n                if (listFilterCondition.control.getControlType() == ControlType.Text) {\r\n                    listFilterCondition.value = new TextValue();\r\n                } else if (listFilterCondition.control.getControlType() == ControlType.Search) {\r\n                    listFilterCondition.value = new SearchValue();\r\n                } else if (listFilterCondition.control.getControlType() == ControlType.Date) {\r\n                    listFilterCondition.value = new DateValue();\r\n                } else if (listFilterCondition.control.getControlType() == ControlType.Month) {\r\n                    listFilterCondition.value = new MonthValue();\r\n                } else if (listFilterCondition.control.getControlType() == ControlType.Year) {\r\n                    listFilterCondition.value = new YearValue();\r\n                } else if (listFilterCondition.control.getControlType() == ControlType.DateRange) {\r\n                    listFilterCondition.value = new DateRangeValue();\r\n                } else if (listFilterCondition.control.getControlType() == ControlType.MonthRange) {\r\n                    listFilterCondition.value = new MonthRangeValue();\r\n                } else if (listFilterCondition.control.getControlType() == ControlType.YearRange) {\r\n                    listFilterCondition.value = new YearRangeValue();\r\n                } else if (listFilterCondition.control.getControlType() == ControlType.DropDown) {\r\n                    listFilterCondition.value = new DropDownListValue();\r\n                } else if (listFilterCondition.control.getControlType() == ControlType.NumberRange) {\r\n                    listFilterCondition.value = new NumberRangeValue();\r\n                } else if (listFilterCondition.control.getControlType() == ControlType.Help) {\r\n                    listFilterCondition.value = new HelpValue();\r\n                } else if (listFilterCondition.control.getControlType() == ControlType.CheckboxGroup) {\r\n                    listFilterCondition.value = new CheckboxGroupValue();\r\n                } else if (listFilterCondition.control.getControlType() == ControlType.Radio) {\r\n                    listFilterCondition.value = new RadioGroupValue();\r\n                } else if (listFilterCondition.control.getControlType() == ControlType.InputGroup) {\r\n                    listFilterCondition.value = new InputGroupValue();\r\n                } else {\r\n                    listFilterCondition.value = new TextValue();\r\n                }\r\n            });\r\n            //  let listFilter = this.listFilterConditions.map(o => Object.assign({}, o));\r\n            const listFilter = this.listFilterConditions.map(o => ({ ...o }));\r\n            this.listFilterConditions = listFilter;\r\n            this.stagListFilterConditions=this.listFilterConditions.map(o => ({ ...o }));\r\n            this.requiredListInit();\r\n            //  this.cd.markForCheck();\r\n        }\r\n        this.conditionChangeHandler(false);\r\n        this.clear.emit();\r\n    }\r\n\r\n    // è®¾ç½®é»è®¤å¼\r\n    setFilterValue(fieldConfigs: FieldConfig[]) {\r\n\r\n        if (this.UPDATE_FILTER_VALUES_TIMER) {\r\n            clearTimeout(this.UPDATE_FILTER_VALUES_TIMER);\r\n        }\r\n\r\n        this.UPDATE_FILTER_VALUES_TIMER = setTimeout(() => {\r\n\r\n            const _filters = this.stagListFilterConditions.map(o => ({ ...o }));\r\n            if (_filters && _filters.length) {\r\n                this.setValues(_filters, fieldConfigs);\r\n                const listFilter = _filters.map(o => ({ ...o }));\r\n                this.listFilterConditions = listFilter;\r\n                this.requiredListInit();\r\n                this.conditionChangeHandler();\r\n                this.inSetCurrentFilterConditions();\r\n                //  this.listSearch();\r\n                this.cd.detectChanges();\r\n                this.cd.markForCheck();\r\n                this.canSubmit = this.canSubmitFilter(this.requiredListFilter);\r\n                if (!this.canSubmit) {\r\n                    return;\r\n                }\r\n                this.submit('showFormData', this.listFilterConditions);\r\n            }\r\n        });\r\n\r\n\r\n        // this.listFilterConditions = this.stagListFilterConditions.map(o => ({ ...o }));\r\n        // if (this.listFilterConditions && this.listFilterConditions.length) {\r\n        //     this.setValues(this.listFilterConditions, fieldConfigs);\r\n        //     const listFilter = this.listFilterConditions.map(o => ({ ...o }));\r\n        //     this.listFilterConditions = listFilter;\r\n        //     this.requiredListInit();\r\n        //     this.searchChange.emit(this.listFilterConditions);\r\n        //     this.inSetCurrentFilterConditions();\r\n        //     //  this.listSearch();\r\n        //     this.cd.detectChanges();\r\n        //     this.cd.markForCheck();\r\n        //     this.canSubmit = this.canSubmitFilter(this.requiredListFilter);\r\n        //     if (!this.canSubmit) {\r\n        //         return;\r\n        //     }\r\n        //     this.submit('showFormData', this.listFilterConditions);\r\n        // }\r\n    }\r\n    // è®¾ç½®value\r\n    setValues(conditions, fieldConfigs: FieldConfig[]) {\r\n        let qc: QueryCondition;\r\n        let controlType: string;\r\n        if (fieldConfigs && fieldConfigs.length) {\r\n            fieldConfigs.forEach(v => {\r\n                qc = conditions.find(c => c.fieldCode == v.labelCode);\r\n                if (qc) {\r\n                    controlType = this.getControlType(qc);\r\n                    qc.value = this.filterService.setValues(controlType, v.value);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    getValue(fieldName: string) {\r\n        const queryList = this.handler.setFilterConditions(this.listFilterConditions);\r\n        const item = queryList.find((n: any) => n['FilterField'] === fieldName);\r\n        if (item) {\r\n            return item.value;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    // å¿å¡«é¡¹åå§å\r\n    requiredListInit() {\r\n        const requiredList = this.listFilterConditions.filter((listitem) => {\r\n            return listitem.control.required;\r\n        });\r\n        if (requiredList && requiredList.length) {\r\n            this.requiredListFilter = requiredList;\r\n            this.canSubmit = this.canSubmitFilter(this.requiredListFilter);\r\n        } else {\r\n            this.requiredListFilter = [];\r\n            this.canSubmit = true;\r\n        }\r\n    }\r\n\r\n    clearFilterValue(fields: any) {\r\n        if (fields && fields.length) {\r\n            if (typeof fields === 'string') {\r\n                fields = fields.split(',');\r\n            }\r\n            fields = fields.map(n => {\r\n                return n.toLowerCase();\r\n            });\r\n\r\n            this.listFilterConditions.forEach(n => {\r\n                if (fields.indexOf(n.fieldCode.toLowerCase()) > -1) {\r\n                    n.value.clearValue();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    updateValues(values: { [field: string]: any }) {\r\n        if (values && Object.keys(values)) {\r\n            const fields = Object.keys(values);\r\n            fields.forEach( f => {\r\n                this.listFilterConditions.forEach(n => {\r\n                    if (fields.indexOf(n.fieldCode.toLowerCase()) > -1) {\r\n                        n.value['value'] = values[f];\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    buildSmartHelpKey(value: string) {\r\n        if(this.idService) {\r\n            let prefix = '';\r\n            if (location.hash) {\r\n                const pathArr = location.hash.split('?');\r\n                prefix = pathArr ? pathArr[0] : '';\r\n            } else {\r\n                const pathArr  = location.pathname.split('/');\r\n                prefix = pathArr ? pathArr[pathArr.length - 1] : '';\r\n            }\r\n            return this.idService.encrypt(prefix + '/list-filter/' + value);\r\n        } else {\r\n            return 'list-filter/' + value;\r\n        }\r\n    }\r\n    private conditionChangeHandler(searchEmit=true){\r\n        const queryList = this.handler.setFilterConditions(this.listFilterConditions);\r\n        this.conditionsChange.emit({data:JSON.stringify(queryList)});\r\n        if(searchEmit){\r\n            this.searchChange.emit(this.listFilterConditions);\r\n        }\r\n    }\r\n    /**\r\n     * æµ®å¨ç­éé¢æ¿éè¿æ¹æ³å±å¼åå³é­\r\n     * @param evt \r\n     */\r\n   floatFilterOpen(evt: MouseEvent){\r\n    this.showFilter = !this.showFilter\r\n    if (this.showFilter) {\r\n        this.overLayService.registerMouseEvent(this.floatPanel.nativeElement, (e: any) => {           \r\n            if (this.floatPanel.nativeElement.contains(e.target)) {\r\n                return;\r\n            } else {\r\n                if (e.target.nodeName === 'SPAN' && e.target.className.indexOf('f-icon-filtrate')) {\r\n                    return;\r\n                }\r\n                const cls = ['.f-datepicker-container', '.farris-timer-picker', '.farris-modal', '.f-combo-lookup', '.date-overlay-container']\r\n                if (cls.find(k => e.target.closest(k))) {\r\n                    return;\r\n                }\r\n            }\r\n            this.showFilter = false;\r\n            this.overLayService.destory(this.floatPanel.nativeElement);\r\n            this.cd.detectChanges();\r\n        });\r\n    } else {\r\n        this.overLayService.destory(this.floatPanel.nativeElement);\r\n    }\r\n   }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { QueryCondition } from '../entity/querycondition';\r\n@Injectable()\r\nexport class SolutionService {\r\n\r\n    filterEditors = {};\r\n\r\n    constructor() { }\r\n\r\n    getGuid() {\r\n        return (this.s4() + this.s4() + \"-\" + this.s4() + \"-\" + this.s4() + \"-\" + this.s4() + \"-\" + this.s4() + this.s4() + this.s4());\r\n    }\r\n\r\n    private s4() {\r\n        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n    }\r\n\r\n    /**\r\n     * æ ¹æ®å­æ®µè·åLableæ§ä»¶çTitle\r\n     * @param field\r\n     */\r\n    getConditionItemTitle(field: QueryCondition) {\r\n        if (field.id && field.id !== '') {\r\n            return field.fieldName;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * æ°ç»åé ä¹å¯ä½¿ç¨JSON.Parse(JSON.Stringify([input])),åæç±»ç»æä¸­æ²¡æåå£\r\n     * @param input\r\n     */\r\n    arrayClone(input: Array<any>): Array<any> {\r\n        let result = new Array<any>();\r\n        if (input && input.length > 0) {\r\n            input.forEach(element => {\r\n                result.push(Object.assign({}, element));\r\n            });\r\n        }\r\n        return result;\r\n    }\r\n\r\n    addFilterEditorInstance(fieldName: string, cmpIns: any) {\r\n        this.filterEditors[fieldName] = cmpIns;\r\n    }\r\n}\r\n","import { Component, Input, OnInit, OnChanges, HostBinding, EventEmitter, Output, AfterViewInit, ElementRef, SimpleChanges } from '@angular/core';\r\nimport { QueryCondition } from '../../entity/querycondition';\r\nimport { SolutionService } from '../../service/solution.service';\r\n\r\n@Component({\r\n    selector: 'app-filter-input',\r\n    templateUrl: './input.component.html',\r\n    styleUrls: ['./input.component.scss']\r\n})\r\n\r\nexport class InputComponent implements OnInit, OnChanges, AfterViewInit {\r\n\r\n    /**\r\n     * QueryConditionç±»å\r\n     */\r\n    @Input() item: any;\r\n    @Input() autoLabel: boolean;\r\n    @Input() disabled: boolean;\r\n    @Output('searchHandle') searchHandle = new EventEmitter();\r\n\r\n    /**å¤æ­æ¯å¦æ¯å¨æ©å±åºåå±ç¤º */\r\n    extend: boolean = false;\r\n    /**å¤æ­æ¯å¦æ¾ç¤ºlabel */\r\n    showlabel: boolean = true;\r\n    placeholder: string;\r\n\r\n    @HostBinding('class.filter-item-wrap')\r\n    get isExtend(): boolean {\r\n        return !this.extend && this.autoLabel;\r\n    }\r\n    @HostBinding('class.filter-item-hiddenlabel')\r\n    get hidenLabel(): boolean {\r\n        return !this.showlabel;\r\n    }\r\n\r\n    constructor(private solutionService: SolutionService, private readonly element: ElementRef) { }\r\n\r\n    ngOnInit(): void {\r\n        //console.log(this.item);\r\n        if (this.item) {\r\n            const type = Object.prototype.toString.call(this.item.placeHolder);\r\n            if (type == '[object Undefined]') {\r\n                if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {\r\n                    this.placeholder = this.item.control.placeholder;\r\n                }\r\n            }\r\n            else {\r\n                this.placeholder = this.item.placeHolder;\r\n            }\r\n        }\r\n        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {\r\n            this.extend = this.item.control.isExtend;\r\n            if (!this.extend) {\r\n                this.showlabel = this.item.control.showLabel;\r\n            }\r\n        }\r\n        this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);\r\n\r\n        // (this.item.value as HelpValue).clear$.subscribe(() => {\r\n        //     this.textValue = '';\r\n        // });\r\n    }\r\n    ngAfterViewInit() {\r\n        // if(!this.extend){\r\n        //     const El = this.element.nativeElement;\r\n        //     const itemWidth = El.clientWidth;\r\n        //     El.querySelector('.list-filter-input-item').style.width = itemWidth + 'px';\r\n        //     El.querySelector('.input-item-btns').style.width = itemWidth + 100 + 'px';\r\n        // }\r\n    }\r\n    ngOnChanges(): void {\r\n    }\r\n\r\n    // getConditionItemStyle(field: QueryCondition, controlType: any) {\r\n    //     return this.solutionService.getConditionItemStyle(field,controlType);\r\n    // }\r\n\r\n    getConditionItemTitle(field: QueryCondition) {\r\n        return this.solutionService.getConditionItemTitle(field);\r\n    }\r\n\r\n    InputChanged(e) {\r\n        // let keycode = window.event ? e.keyCode : e.which;\r\n        // if(keycode == 13){//åè½¦é®\r\n        //     this.searchHandle.emit(this.item.value.value);\r\n        // }\r\n        if (this.disabled) { return; }\r\n        this.searchHandle.emit(this.item.value.value);\r\n    }\r\n}","import { Component, Input, OnInit, OnChanges, HostBinding, Output, EventEmitter, SimpleChanges} from '@angular/core';\r\nimport { QueryCondition } from '../../entity/querycondition';\r\nimport { SolutionService } from '../../service/solution.service';\r\n\r\n@Component({\r\n    selector: 'app-filter-search',\r\n    templateUrl: './search.component.html'\r\n})\r\n\r\nexport class SearchComponent implements OnInit,OnChanges{\r\n   \r\n    /**\r\n     * QueryConditionç±»å\r\n     */\r\n    @Input() item:any;\r\n    @Input() autoLabel:boolean;\r\n    @Input() disabled:boolean;\r\n    @Output('searchHandle') searchHandle = new EventEmitter();\r\n\r\n    /**å¤æ­æ¯å¦æ¯å¨æ©å±åºåå±ç¤º */\r\n    extend:boolean = false;\r\n    /**å¤æ­æ¯å¦æ¾ç¤ºlabel */\r\n    showlabel:boolean = true;\r\n    placeholder: string;\r\n\r\n    @HostBinding('class.filter-item-wrap')\r\n    get isExtend(): boolean {\r\n        return !this.extend && this.autoLabel;\r\n    }\r\n\r\n    @HostBinding('class.filter-item-hiddenlabel')\r\n    get hidenLabel(): boolean {\r\n        return !this.showlabel;\r\n    }\r\n\r\n    groupIcon = '<span class=\"k-icon k-i-search\"></span>';\r\n\r\n    constructor(private solutionService:SolutionService){}\r\n\r\n    ngOnInit(): void {\r\n        if(this.item){\r\n            const type = Object.prototype.toString.call(this.item.placeHolder);\r\n            if(type == '[object Undefined]'){\r\n                if(this.item.control && this.item.control.hasOwnProperty('placeholder')){\r\n                    this.placeholder = this.item.control.placeholder;\r\n                }\r\n            }\r\n            else{\r\n                this.placeholder = this.item.placeHolder;\r\n            }\r\n        }\r\n        if(this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')){\r\n            this.extend = this.item.control.isExtend;\r\n            if(!this.extend){\r\n                this.showlabel = this.item.control.showLabel;\r\n            }\r\n        }\r\n\r\n        this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n       \r\n    }\r\n\r\n    // getConditionItemStyle(field: QueryCondition, controlType: any) {\r\n    //     return this.solutionService.getConditionItemStyle(field,controlType);\r\n    // }\r\n\r\n    getConditionItemTitle(field:QueryCondition){\r\n        return this.solutionService.getConditionItemTitle(field);\r\n    }\r\n\r\n    onSearch($event){\r\n        if(this.disabled){return;}\r\n        this.searchHandle.emit($event);\r\n    }\r\n}","import { Component, Input, OnInit, OnChanges, HostBinding, Output, EventEmitter, SimpleChanges } from '@angular/core';\r\nimport { QueryCondition } from '../../entity/querycondition';\r\nimport { ControlType } from '../../entity/controltype';\r\nimport { HelpContol } from '../../entity/controltype/help/helpcontrol';\r\nimport { IControl } from '../../entity/controltype/icontrol';\r\nimport { SolutionService } from '../../service/solution.service';\r\nimport { HelpValue } from '../../entity/conditionvalue/helpvalue';\r\nimport { DisplayType } from '../../entity/controltype/help/displayType';\r\n\r\n// import { ServerSideToken } from '@farris/ui-lookup';\r\n// import { LookupHttpBeQueryService } from './service/Lookup-http.service';\r\nimport { of } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'app-filter-help',\r\n    templateUrl: './help.component.html'\r\n    // providers: [{ provide: ServerSideToken, useClass: LookupHttpBeQueryService }]\r\n})\r\n\r\nexport class HelpComponent implements OnInit, OnChanges {\r\n\r\n    /**\r\n     * QueryConditionç±»å\r\n     */\r\n    @Input() item: any;\r\n    @Input() autoLabel: boolean;\r\n    @Input() disabled: boolean;\r\n\r\n    @Input() hostRef: any;\r\n\r\n    @Input() instanceId: string;\r\n\r\n    @Output() searchHandle = new EventEmitter();\r\n\r\n    uri: string;\r\n    textField: string;\r\n    idField: string;\r\n    valueField: any;\r\n    textValue: any;\r\n    displayType: DisplayType;\r\n    mapFields: any;\r\n    context: any;\r\n    preEventCmd: any;\r\n    postEventCmd: any;\r\n    enableFullTree: boolean;\r\n    loadTreeDataType: 'default' | 'loadall' | 'layerload';\r\n    singleSelect: boolean;\r\n    expandLevel: number;\r\n    enableCascade: boolean;\r\n    helpId: string;\r\n    title: string;\r\n\r\n    /** å¤æ­æ¯å¦æ¯å¨æ©å±åºåå±ç¤º */\r\n    extend = false;\r\n    /** å¤æ­æ¯å¦æ¾ç¤ºlabel */\r\n    showlabel = true;\r\n    placeholder: string;\r\n\r\n    editable = false;\r\n    /** å¤å­æ®µæ¥è¯¢ */\r\n    enableMultiFieldSearch = false;\r\n\r\n    @HostBinding('class.filter-item-wrap')\r\n    get isExtend(): boolean {\r\n        return !this.extend && this.autoLabel;\r\n    }\r\n    @HostBinding('class.filter-item-hiddenlabel')\r\n    get hidenLabel(): boolean {\r\n        return !this.showlabel;\r\n    }\r\n      /**\r\n     * æä¸ªå­æ®µåçå¼ååäºä»¶æ¶ï¼éè¦åæ­¥æ¸ç©ºçå­æ®µï¼å¯è½ä¸æ¯å½åå­æ®µ\r\n     */\r\n    @Input() changeFields: Array<string> = [];\r\n    /**\r\n     * è¦æ¸ç©ºçå³èå­æ®µ\r\n     */\r\n    clearFields: string;\r\n    constructor(private solutionService: SolutionService) { }\r\n\r\n    ngOnInit(): void {\r\n        if (this.item) {\r\n            const type = Object.prototype.toString.call(this.item.placeHolder);\r\n            if (type == '[object Undefined]') {\r\n                if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {\r\n                    this.placeholder = this.item.control.placeholder;\r\n                }\r\n            } else {\r\n                this.placeholder = this.item.placeHolder;\r\n            }\r\n        }\r\n        this.getHelpBindingInfo();\r\n        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {\r\n            this.extend = this.item.control.isExtend;\r\n            if (!this.extend) {\r\n                this.showlabel = this.item.control.showLabel;\r\n            }\r\n        }\r\n\r\n        this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);\r\n\r\n        (this.item.value as HelpValue).clear$.subscribe(() => {\r\n            this.textValue = '';\r\n        });\r\n        \r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        this.getHelpBindingInfo();\r\n        if(changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {\r\n            const isChange = changes['changeFields'].currentValue.some(field => field == this.item.fieldCode);\r\n            if(isChange){\r\n                this.textValue = (this.item.value as HelpValue).textValue;\r\n            }\r\n        }\r\n    }\r\n\r\n    selectedDataHandler(selectedItem: any) {\r\n        // console.log(selectedItem);\r\n        //    let mapFields=new Function('return'+(this.item.control as HelpContol).mapFields);\r\n        //    let mapFieldsKeys=Object.keys(mapFields());\r\n        //    (this.item.value as HelpValue).value=new Object();\r\n        //    mapFieldsKeys.forEach(mapFeildKey => {\r\n        //     (this.item.value as HelpValue).value[mapFeildKey]=selectedItem[mapFeildKey];\r\n        //    });\r\n        //    (this.item.value as HelpValue).valueField=(this.item.control as HelpContol).valueField;\r\n        //    let textField=(this.item.control as HelpContol).textField;\r\n        //    this.textValue=(this.item.value as HelpValue).value[textField];\r\n\r\n        const helpValue = (this.item.value as HelpValue);\r\n        helpValue.value = this.singleSelect ? [selectedItem] : selectedItem; // åéè¿åå¯¹è±¡ï¼å¤éè¿åæ°ç»\r\n        helpValue.valueField = this.valueField;\r\n        helpValue.textValue = helpValue.getTextValue(this.textField);\r\n        this.textValue = helpValue.textValue;\r\n        // this.conditionChange.emit();\r\n        if (this.disabled) { return; }\r\n        this.searchHandle.emit();\r\n\r\n    }\r\n\r\n    getHelpBindingInfo() {\r\n        if (this.item && this.item.control && this.item.control.getControlType() == ControlType.Help) {\r\n            const helpList = (this.item.control as HelpContol);\r\n            this.uri = helpList.uri;\r\n            this.textField = helpList.textField;\r\n            this.valueField = helpList.valueField;\r\n            this.idField = helpList.idField;\r\n            this.mapFields = helpList.mapFields;\r\n            this.context = helpList.context;\r\n            if (helpList.preEventCmd) {\r\n                this.preEventCmd = (e) => {\r\n                    e['hostRef'] = this.hostRef;\r\n                    return helpList.preEventCmd(e);\r\n                };\r\n            }\r\n\r\n            if (helpList.postEventCmd) {\r\n                this.postEventCmd = (e) => {\r\n                    e['hostRef'] = this.hostRef;\r\n                    return helpList.postEventCmd(e);\r\n                };\r\n            }\r\n            this.singleSelect = helpList.singleSelect;\r\n            this.enableFullTree = helpList.enableFullTree;\r\n            this.loadTreeDataType = helpList.loadTreeDataType;\r\n            this.expandLevel = helpList.expandLevel;\r\n            this.enableCascade = helpList.enableCascade;\r\n            this.helpId = helpList.helpId;\r\n            this.title = helpList.title;\r\n            const helpValue = (this.item.value as HelpValue);\r\n            this.clearFields = helpList.clearFields;\r\n            // if (helpValue && helpValue.value) {\r\n            //     // this.textValue = (this.item.value as HelpValue).value[this.textField];\r\n            //     this.textValue = HelpValue.getPropValue(helpValue.value, this.textField.split('.'));\r\n            // }\r\n            this.displayType = helpList.displayType;\r\n            if (helpValue.textValue == 'help-text-value-null') {// æ§æ°æ®å¼å®¹\r\n                this.textValue = helpValue.getTextValue(this.textField);\r\n            } else {\r\n                this.textValue = helpValue.textValue;\r\n            }\r\n\r\n            this.editable = !!helpList.editable;\r\n            this.enableMultiFieldSearch = !!helpList.enableMultiFieldSearch;\r\n        }\r\n    }\r\n\r\n    // getConditionItemStyle(field: QueryCondition, controlType: any) {\r\n    //     return this.solutionService.getConditionItemStyle(field,controlType);\r\n    // }\r\n\r\n    getConditionItemTitle(field: QueryCondition) {\r\n        return this.solutionService.getConditionItemTitle(field);\r\n    }\r\n\r\n    onSearch = () => {\r\n        if (this.disabled) { return; }\r\n        this.searchHandle.emit();\r\n        return of(true);\r\n    }\r\n\r\n    clearData(data: any) {\r\n        (this.item.value as HelpValue).clearValue();\r\n        this.searchHandle.emit();\r\n    }\r\n\r\n}\r\n","import { Component, Input, OnInit, OnChanges, HostBinding, Output, EventEmitter, SimpleChanges } from '@angular/core';\r\nimport { QueryCondition } from '../../entity/querycondition';\r\nimport { SolutionService } from '../../service/solution.service';\r\nimport { DateValue } from '../../entity/conditionvalue/datevalue';\r\n\r\n@Component({\r\n    selector: 'app-filter-date',\r\n    templateUrl: './date.component.html'\r\n})\r\n\r\nexport class DateComponent implements OnInit, OnChanges {\r\n\r\n    /**\r\n     * QueryConditionç±»å\r\n     */\r\n    @Input() item: any;\r\n    @Input() autoLabel: boolean;\r\n    @Input() disabled: boolean;\r\n    @Input() showType: string;\r\n    @Output() searchHandle = new EventEmitter();\r\n\r\n    // time:Date;\r\n    date: string;\r\n    /** å¤æ­æ¯å¦æ¯å¨æ©å±åºåå±ç¤º */\r\n    extend = false;\r\n    /** å¤æ­æ¯å¦æ¾ç¤ºlabel */\r\n    showlabel = true;\r\n    placeholder: string;\r\n    dateFormat: string;\r\n    returnFormat: string;\r\n\r\n    @HostBinding('class.filter-item-wrap')\r\n    get isExtend(): boolean {\r\n        return !this.extend && this.autoLabel;\r\n    }\r\n    @HostBinding('class.filter-item-hiddenlabel')\r\n    get hidenLabel(): boolean {\r\n        return !this.showlabel;\r\n    }\r\n    /**\r\n   * æä¸ªå­æ®µåçå¼ååäºä»¶æ¶ï¼éè¦åæ­¥æ¸ç©ºçå­æ®µï¼å¯è½ä¸æ¯å½åå­æ®µ\r\n   */\r\n    @Input() changeFields: Array<string> = [];\r\n    constructor(private solutionService: SolutionService) { }\r\n\r\n    ngOnInit(): void {\r\n        // console.log(this.showType);\r\n        this.initDate();\r\n        if (this.item) {\r\n            const type = Object.prototype.toString.call(this.item.placeHolder);\r\n            if (type == '[object Undefined]') {\r\n                if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {\r\n                    this.placeholder = this.item.control.placeholder;\r\n                }\r\n            }\r\n            else {\r\n                this.placeholder = this.item.placeHolder;\r\n            }\r\n        }\r\n        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {\r\n            this.extend = this.item.control.isExtend;\r\n            if (!this.extend) {\r\n                this.showlabel = this.item.control.showLabel;\r\n            }\r\n        }\r\n\r\n        this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);\r\n\r\n\r\n        (this.item.value as DateValue).clear$.subscribe(() => {\r\n            this.date = '';\r\n        });\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        this.initDate();\r\n        if(changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {\r\n            const isChange = changes['changeFields'].currentValue.some(field => field == this.item.fieldCode);\r\n            if(isChange) {\r\n                this.date = this.item.value.getOriginalValue();             \r\n            }\r\n        }\r\n    }\r\n\r\n    initDate() {\r\n        // if(this.item && this.item.value.value){\r\n        //     //this.time = this.getDate((this.item.value as DateValue).value);\r\n        //     this.time = (this.item.value as DateValue).value;\r\n        // }\r\n\r\n        if (this.item && this.item.value\r\n            && (this.item.value as DateValue).value) {\r\n            this.date = this.item.value.getOriginalValue();\r\n        } else {\r\n            this.date = undefined;\r\n        }\r\n        const format = this.showType == '2' ? 'yyyy-MM' : (this.showType == '3' ? 'yyyy' : 'yyyy-MM-dd');\r\n        this.returnFormat = format;\r\n        this.dateFormat = this.item.control.format ? this.item.control.format : format;\r\n        // console.log('æ ¼å¼',this.dateFormat);\r\n\r\n    }\r\n\r\n    // getDate(dateString:string):Date{\r\n    //     let arr1:Array<any> = dateString.split(\" \"); \r\n    //     let sdate = arr1[0].split('-'); \r\n    //     let date = new Date(sdate[0], sdate[1]-1, sdate[2]); \r\n    //     return date;\r\n    // }\r\n\r\n    onDateChange(event: any) {\r\n        // console.log(event);\r\n        if (event) {\r\n            (this.item.value as DateValue).value = event.returnFormatted;\r\n        } else {\r\n            (this.item.value as DateValue).value = '';\r\n            // this.item.value = new DateValue();\r\n        }\r\n        if (this.disabled) { return; }\r\n        this.searchHandle.emit(event);\r\n    }\r\n\r\n    // getConditionItemStyle(field: QueryCondition, controlType: any) {\r\n    //     return this.solutionService.getConditionItemStyle(field,controlType);\r\n    // }\r\n\r\n    getConditionItemTitle(field: QueryCondition) {\r\n        return this.solutionService.getConditionItemTitle(field);\r\n    }\r\n}\r\n","import { Component, Input, OnInit, OnChanges, HostBinding, EventEmitter, Output, SimpleChanges } from '@angular/core';\r\nimport { QueryCondition } from '../../entity/querycondition';\r\nimport { ControlType } from '../../entity/controltype';\r\nimport { DropDownControl } from '../../entity/controltype/dropdownlist/dropdowncontrol';\r\nimport { EnumType } from '../../entity/controltype/dropdownlist/enumtype';\r\nimport { EnumIntegerValue } from '../../entity/controltype/dropdownlist/integerenumvalue';\r\nimport { EnumStringValue } from '../../entity/controltype/dropdownlist/stringenumvalue';\r\nimport { EnumBoolValue } from '../../entity/controltype/dropdownlist/boolenumvalue';\r\nimport { SolutionService } from '../../service/solution.service';\r\nimport { DropDownListValue } from '../../entity/conditionvalue/dropdownlistvalue';\r\n\r\n@Component({\r\n    selector: 'app-filter-dropdown',\r\n    templateUrl: './dropdown.component.html'\r\n})\r\n\r\nexport class DropDownComponent implements OnInit, OnChanges {\r\n\r\n    /**\r\n     * QueryConditionç±»å\r\n     */\r\n    @Input() item: any;\r\n    @Input() autoLabel: boolean;\r\n    @Input() disabled: boolean;\r\n    @Input() enableClear = true;\r\n    @Output('searchHandle') searchHandle = new EventEmitter();\r\n\r\n    dropDownListDataSource: Array<any> = new Array<any>();\r\n    /**å¤æ­æ¯å¦æ¯å¨æ©å±åºåå±ç¤º */\r\n    extend: boolean = false;\r\n    /**å¤æ­æ¯å¦æ¾ç¤ºlabel */\r\n    showlabel: boolean = true;\r\n\r\n    selectedItemId: any;\r\n    placeholder: string;\r\n\r\n\r\n    @HostBinding('class.filter-item-wrap')\r\n    get isExtend(): boolean {\r\n        return !this.extend && this.autoLabel;\r\n    }\r\n    @HostBinding('class.filter-item-hiddenlabel')\r\n    get hidenLabel(): boolean {\r\n        return !this.showlabel;\r\n    }\r\n    /**\r\n    * æä¸ªå­æ®µåçå¼ååäºä»¶æ¶ï¼éè¦åæ­¥æ¸ç©ºçå­æ®µï¼å¯è½ä¸æ¯å½åå­æ®µ\r\n    */\r\n    @Input() changeFields: Array<string> = [];\r\n    constructor(private solutionService: SolutionService) { }\r\n\r\n    ngOnInit(): void {\r\n        // this.getDataSource();\r\n        // const initialValue = this.item.value as DropDownListValue;\r\n        // initialValue.value && (this.selectedItemId = initialValue.value.getEnumValue());\r\n        if (this.item) {\r\n            const type = Object.prototype.toString.call(this.item.placeHolder);\r\n            if (type == '[object Undefined]') {\r\n                if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {\r\n                    this.placeholder = this.item.control.placeholder;\r\n                }\r\n            }\r\n            else {\r\n                this.placeholder = this.item.placeHolder;\r\n            }\r\n        }\r\n        this.getDataSource();\r\n        const initialValue = this.item.value as DropDownListValue;\r\n        initialValue.value && (this.selectedItemId = initialValue.value);\r\n        if (this.item && this.item.control) {\r\n            if (this.item.control.hasOwnProperty('isExtend')) {\r\n                this.extend = this.item.control.isExtend;\r\n                if (!this.extend) {\r\n                    this.showlabel = this.item.control.showLabel;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);\r\n\r\n\r\n        (this.item.value as DropDownListValue).clear$.subscribe(() => {\r\n            this.selectedItemId = '';\r\n        });\r\n        // this.testId = this.solutionService.getGuid();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        this.getDataSource();\r\n        if(changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {\r\n            const isChange = changes['changeFields'].currentValue.some(field => field == this.item.fieldCode);\r\n            if(isChange){\r\n                this.selectedItemId = (this.item.value as DropDownListValue).value;\r\n            }\r\n        }\r\n        //console.log(this.dropDownListDataSource);\r\n    }\r\n\r\n    getDataSource() {\r\n        if (this.item && this.item.value\r\n            && this.item.control && this.item.control.getControlType() == ControlType.DropDown) {\r\n            let dropDownList = (this.item.control as DropDownControl);\r\n            if (dropDownList.valueType == EnumType.BoolType) {\r\n                this.dropDownListDataSource = Array<EnumBoolValue>();\r\n                if (dropDownList.enumValues && dropDownList.enumValues.length > 0) {\r\n                    dropDownList.enumValues.forEach(element => {\r\n                        this.dropDownListDataSource.push(Object.assign(new EnumBoolValue(), element));\r\n                    });\r\n                }\r\n            }\r\n            else if (dropDownList.valueType == EnumType.IntType) {\r\n                this.dropDownListDataSource = Array<EnumIntegerValue>();\r\n                if (dropDownList.enumValues && dropDownList.enumValues.length > 0) {\r\n                    dropDownList.enumValues.forEach(element => {\r\n                        this.dropDownListDataSource.push(Object.assign(new EnumIntegerValue(), element));\r\n                    });\r\n                }\r\n            }\r\n            else if (dropDownList.valueType == EnumType.StringType) {\r\n                this.dropDownListDataSource = Array<EnumStringValue>();\r\n                if (dropDownList.enumValues && dropDownList.enumValues.length > 0) {\r\n                    dropDownList.enumValues.forEach(element => {\r\n                        this.dropDownListDataSource.push(Object.assign(new EnumStringValue(), element));\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // getConditionItemStyle(field: QueryCondition, controlType: any) {\r\n    //     return this.solutionService.getConditionItemStyle(field,controlType);\r\n    // }\r\n\r\n    getConditionItemTitle(field: QueryCondition) {\r\n        return this.solutionService.getConditionItemTitle(field);\r\n    }\r\n\r\n    onSearch(event) {\r\n        if (event) {\r\n            (this.item.value as DropDownListValue).value = event.data.value;\r\n        } else {\r\n            (this.item.value as DropDownListValue).value = '';\r\n        }\r\n\r\n        if (this.disabled) { return; }\r\n        this.searchHandle.emit();\r\n    }\r\n\r\n    onClear(event) {\r\n        (this.item.value as DropDownListValue).value = '';\r\n        this.searchHandle.emit();\r\n    }\r\n}\r\n","import { Component, Input, OnInit, HostBinding, EventEmitter, Output, AfterViewInit, ElementRef, SimpleChanges, OnChanges } from '@angular/core';\r\nimport { QueryCondition } from '../../entity/querycondition';\r\nimport { SolutionService } from '../../service/solution.service';\r\nimport { NumberRangeValue, NumberRangeValueConvertor } from '../../entity/conditionvalue/numberrangevaue';\r\nimport { BigNumber } from 'bignumber.js';\r\n// import { NumberRangeValue } from '../../entity/conditionvalue/numberrangevaue';\r\n\r\n\r\n@Component({\r\n    selector: 'app-filter-number',\r\n    templateUrl: './number.component.html',\r\n    styleUrls: ['./number.component.scss']\r\n})\r\n\r\nexport class NumberComponent implements OnInit, AfterViewInit,OnChanges {\r\n\r\n    // @Input() item:any;\r\n    @Input() autoLabel: boolean;\r\n    @Input() disabled: boolean;\r\n    @Output('searchHandle') searchHandle = new EventEmitter();\r\n\r\n    /**å¤æ­æ¯å¦æ¯å¨æ©å±åºåå±ç¤º */\r\n    extend: boolean = false;\r\n    /**å¤æ­æ¯å¦æ¾ç¤ºlabel */\r\n    showlabel: boolean = true;\r\n    canNull: boolean = true;\r\n\r\n    number: string;\r\n    beginValue: any;\r\n    endValue: any;\r\n    precision: number;\r\n    placeholder: string;\r\n    beginPlaceHolder: string;\r\n    endPlaceHolder: string;\r\n    bigNumber: boolean;\r\n    max: number;\r\n    min: number;\r\n\r\n    @HostBinding('class.filter-item-wrap')\r\n    get isExtend(): boolean {\r\n        return !this.extend && this.autoLabel;\r\n    }\r\n    @HostBinding('class.filter-item-hiddenlabel')\r\n    get hidenLabel(): boolean {\r\n        return !this.showlabel;\r\n    }\r\n\r\n    _item: any;\r\n    numberRange: string;\r\n    @Input()\r\n    set item(nr: any) {\r\n        this._item = nr;\r\n        this.precision = nr.control.precision;\r\n        this.bigNumber = nr.control.bigNumber;\r\n        this.constructMultiFieldNumberRange(nr.value as NumberRangeValue);\r\n        if (this._item && this._item.control && this._item.control.hasOwnProperty('isExtend')) {\r\n            this.extend = this._item.control.isExtend;\r\n            if (!this.extend) {\r\n                this.showlabel = this._item.control.showLabel;\r\n            }\r\n        }\r\n    }\r\n\r\n    get item() {\r\n        return this._item;\r\n    }\r\n\r\n    /**\r\n     * æä¸ªå­æ®µåçå¼ååäºä»¶æ¶ï¼éè¦åæ­¥æ¸ç©ºçå­æ®µï¼å¯è½ä¸æ¯å½åå­æ®µ\r\n     */\r\n    @Input() changeFields: Array<string> = [];\r\n    constructor(private solutionService: SolutionService, private readonly element: ElementRef) { }\r\n\r\n    ngOnInit(): void {\r\n        if (this.item) {\r\n            const type = Object.prototype.toString.call(this.item.placeHolder);\r\n            if (type == '[object Undefined]') {\r\n                if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {\r\n                    this.placeholder = this.item.control.placeholder;\r\n                }\r\n            }\r\n            else {\r\n                this.placeholder = this.item.placeHolder;\r\n            }\r\n            const beginplac = Object.prototype.toString.call(this.item.beginPlaceHolder);\r\n            if (beginplac == '[object Undefined]') {\r\n                if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {\r\n                    this.beginPlaceHolder = this.item.control.beginPlaceHolder;\r\n                }\r\n            }\r\n            else {\r\n                this.beginPlaceHolder = this.item.beginPlaceHolder;\r\n            }\r\n            const endplac = Object.prototype.toString.call(this.item.beginPlaceHolder);\r\n            if (endplac == '[object Undefined]') {\r\n                if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {\r\n                    this.endPlaceHolder = this.item.control.endPlaceHolder;\r\n                }\r\n            }\r\n            else {\r\n                this.endPlaceHolder = this.item.endPlaceHolder;\r\n            }\r\n\r\n            if (!this.bigNumber) {\r\n                this.min = -2147483648;\r\n                this.max = 2147483647;\r\n            }\r\n        }\r\n\r\n\r\n        (this.item.value as NumberRangeValue).clear$.subscribe(() => {\r\n            this.beginValue = '';\r\n            this.endValue = '';\r\n        });\r\n\r\n        this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if(changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {\r\n          const isChange = changes['changeFields'].currentValue.some(field => field == this.item.fieldCode);\r\n          if(isChange){\r\n            this.constructMultiFieldNumberRange(this.item.value as NumberRangeValue);\r\n          }\r\n      }\r\n      }\r\n    ngAfterViewInit() {\r\n        // if(!this.extend){\r\n        //     const El = this.element.nativeElement;\r\n        //     const itemWidth = El.clientWidth;\r\n        //     El.querySelector('.list-filter-number-item').style.width = itemWidth + 'px';\r\n        //     El.querySelector('.number-item-btns').style.width = itemWidth + 100 + 'px';\r\n        // }\r\n    }\r\n\r\n    // getConditionItemStyle(field: QueryCondition, controlType: any) {\r\n    //     return this.solutionService.getConditionItemStyle(field,controlType);\r\n    // }\r\n\r\n    getConditionItemTitle(field: QueryCondition) {\r\n        return this.solutionService.getConditionItemTitle(field);\r\n    }\r\n\r\n    // constructNumberRange(value: NumberRangeValue): string{\r\n    //     return \"a~b\".replace(/a/,value.startValue?value.startValue.toString().trim():\"\").replace(/b/,value.endValue?value.endValue.toString().trim():\"\");\r\n    // }\r\n    constructMultiFieldNumberRange(value: NumberRangeValue) {\r\n        // this.beginValue = value && value.startValue ? value.startValue.toString().trim() : '';\r\n        // this.endValue = value && value.endValue ? value.endValue.toString().trim() : '';\r\n        this.beginValue = value.startValue == null ? null : value.startValue;\r\n        this.endValue = value.endValue == null ? null : value.endValue;\r\n    }\r\n\r\n    numberChange(event) {\r\n        if (event) {\r\n            // const dataArray = event.split(\"~\");\r\n            // console.log(dataArray);\r\n            // this._item.value = (new NumberRangeValueConvertor).initFromObject({startValue: dataArray[0], endValue: dataArray[1]});\r\n            const dataArray = event.split(\"~\");\r\n            this.item.value.startValue = dataArray[0] ? dataArray[0] : null;\r\n            this.item.value.endValue = dataArray[1] ? dataArray[1] : null;\r\n        }\r\n        else {\r\n            this._item.value.startValue = null;\r\n            this._item.value.endValue = null;\r\n        }\r\n        // const dataArray = event.split(\"~\");\r\n        // this._item.value = (new NumberRangeValueConvertor).initFromObject({startValue: dataArray[0], endValue: dataArray[1]});\r\n        if (this.disabled) { return; }\r\n        this.searchHandle.emit();\r\n    }\r\n\r\n    beginValueChange($event) {\r\n        this.beginValue = $event;\r\n\r\n    }\r\n\r\n    endValueChange($event) {\r\n        this.endValue = $event;\r\n    }\r\n\r\n\r\n    // onSearch(){\r\n    //     if(this.disabled){return;}\r\n    //     this.searchHandle.emit();\r\n    // }\r\n}","import { CheckboxIEnumValue } from \"./ienumvalue\";\r\n\r\n/**\r\n * checboxgroupç±»å\r\n */\r\nexport class CheckboxValue implements CheckboxIEnumValue{\r\n\r\n    getEnumValueName():string{\r\n        return this.name;\r\n    }\r\n\r\n    getEnumValue():any{\r\n        return this.value;\r\n    }\r\n    \r\n    /**\r\n     * ææ¬æ¾ç¤º\r\n     */\r\n    name:string;\r\n\r\n    /**\r\n     * å¼æ¾ç¤º\r\n     */\r\n    value:string;\r\n}","import { Component, Input, OnInit, OnChanges, ViewEncapsulation, HostBinding, EventEmitter, Output, SimpleChanges } from '@angular/core';\r\nimport { QueryCondition } from '../../entity/querycondition';\r\nimport { ControlType } from '../../entity/controltype';\r\nimport { SolutionService } from '../../service/solution.service';\r\nimport { CheckboxGroupControl } from '../../entity/controltype/checkbox/checkboxcontrol';\r\nimport { CheckboxValue } from '../../entity/controltype/checkbox/checkboxvalue';\r\nimport { CheckboxGroupValue } from '../../entity/conditionvalue/checkboxgroupvalue';\r\n\r\n@Component({\r\n    selector: 'app-filter-checkbox',\r\n    templateUrl: './checkbox.component.html',\r\n    styleUrls: ['./checkbox.component.scss']\r\n    // encapsulation: ViewEncapsulation.None\r\n})\r\n\r\nexport class FilterCheckboxComponent implements OnInit, OnChanges {\r\n    /**\r\n     * QueryConditionç±»å\r\n     */\r\n    @Input() item: any;\r\n    @Input() autoLabel: boolean;\r\n    @Input() disabled: boolean;\r\n    @Output() searchHandle = new EventEmitter();\r\n    /** å¤æ­æ¯å¦æ¯å¨æ©å±åºåå±ç¤º */\r\n    extend = false;\r\n    /** å¤æ­æ¯å¦æ¾ç¤ºlabel */\r\n    showlabel = true;\r\n    checkValue: any[];\r\n\r\n    selectCheck = [];\r\n\r\n    @HostBinding('class.filter-item-wrap')\r\n    get isExtend(): boolean {\r\n        return !this.extend && this.autoLabel;\r\n    }\r\n\r\n    @HostBinding('class.filter-item-checbox-wrap')\r\n    get isCheckExtend(): boolean {\r\n        return !this.extend;\r\n    }\r\n\r\n    @HostBinding('class.filter-item-checkboxgroup') cla = true;\r\n    @HostBinding('class.filter-item-hiddenlabel')\r\n    get hidenLabel(): boolean {\r\n        return !this.showlabel;\r\n    }\r\n\r\n    checkboxDataSource: Array<any> = new Array<any>();\r\n    /**\r\n     * æä¸ªå­æ®µåçå¼ååäºä»¶æ¶ï¼éè¦åæ­¥æ¸ç©ºçå­æ®µï¼å¯è½ä¸æ¯å½åå­æ®µ\r\n     */\r\n    @Input() changeFields: Array<string> = [];\r\n    constructor(private solutionService: SolutionService) { }\r\n\r\n    ngOnInit(): void {\r\n        this.getDataSource();\r\n        this.checkValue = this.item.value.getOriginalValue();\r\n        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {\r\n            this.extend = this.item.control.isExtend;\r\n            if (!this.extend) {\r\n                this.showlabel = this.item.control.showLabel;\r\n            }\r\n        }\r\n\r\n        this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);\r\n\r\n\r\n        (this.item.value as CheckboxGroupValue).clear$.subscribe( () => {\r\n            this.checkValue = [];\r\n        });\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        this.getDataSource();\r\n        if(changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {\r\n            const isChange = changes['changeFields'].currentValue.some(field => field == this.item.fieldCode);\r\n            if(isChange){\r\n                this.checkValue = (this.item.value as CheckboxGroupValue).getOriginalValue();\r\n            }\r\n        }\r\n    }\r\n\r\n    getDataSource() {\r\n        if (this.item && this.item.control && this.item.control.getControlType() == ControlType.CheckboxGroup) {\r\n            let checkboxList = (this.item.control as CheckboxGroupControl);\r\n            this.checkboxDataSource = Array<CheckboxValue>();\r\n\r\n            if (checkboxList.enumValues && checkboxList.enumValues.length > 0) {\r\n                checkboxList.enumValues.forEach(element => {\r\n                    this.checkboxDataSource.push(Object.assign(new CheckboxValue(), element));\r\n                });\r\n            }\r\n        }\r\n        // if(this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')){\r\n        //     this.extend = this.item.control.isExtend;\r\n        // }\r\n    }\r\n\r\n    // getConditionItemStyle(field: QueryCondition, controlType: any) {\r\n    //     return this.solutionService.getConditionItemStyle(field,controlType);\r\n    // }\r\n\r\n    getConditionItemTitle(field: QueryCondition) {\r\n        return this.solutionService.getConditionItemTitle(field);\r\n    }\r\n\r\n    onSearch(event) {\r\n        let checkboxValue = [];\r\n        if (event) {\r\n            // let checkboxList = event.split(',');\r\n            let checkboxList = event;\r\n            if (checkboxList && checkboxList.length) {\r\n                checkboxValue = checkboxList;\r\n            }\r\n            this.item.value.value = checkboxValue;\r\n        }\r\n        else {\r\n            this.item.value.value = new CheckboxGroupValue();\r\n        }\r\n        if (this.disabled) { return; }\r\n        this.searchHandle.emit();\r\n    }\r\n}\r\n","import { Component, Input, OnInit, OnChanges, HostBinding, Output, EventEmitter, Injector, ChangeDetectorRef, SimpleChanges } from '@angular/core';\r\nimport { QueryCondition } from '../../entity/querycondition';\r\nimport { DateRangeValue } from '../../entity/conditionvalue/daterangevalue';\r\nimport { SolutionService } from '../../service/solution.service';\r\n\r\n@Component({\r\n    selector: 'app-filter-daterange',\r\n    templateUrl: './daterange.component.html'\r\n})\r\n\r\nexport class DateRangeComponent implements OnInit, OnChanges {\r\n\r\n    /**\r\n     * QueryConditionç±»å\r\n     */\r\n    @Input() item: any;\r\n    @Input() autoLabel: boolean;\r\n    @Input() disabled: boolean;\r\n    @Input() showTime: boolean;\r\n    @Input() showType: string;\r\n    @Output('searchHandle') searchHandle = new EventEmitter();\r\n\r\n    startTime: Date;\r\n    endTime: Date;\r\n    //TODO: need 2 placeholder text for date range\r\n    // rangeDate = {\r\n    //     begin:null,\r\n    //     end:null\r\n    // };\r\n    /**å¤æ­æ¯å¦æ¯å¨æ©å±åºåå±ç¤º */\r\n    extend: boolean = false;\r\n    /**å¤æ­æ¯å¦æ¾ç¤ºlabel */\r\n    showlabel: boolean = true;\r\n\r\n    rangeDate: string;\r\n    placeholder: string;\r\n    beginPlaceHolder: string;\r\n    endPlaceHolder: string;\r\n    dateFormat: string;\r\n    returnFormat: string;\r\n    // showType:string;\r\n\r\n    @HostBinding('class.filter-item-wrap')\r\n    get isExtend(): boolean {\r\n        return !this.extend && this.autoLabel;\r\n    }\r\n    @HostBinding('class.filter-item-hiddenlabel')\r\n    get hidenLabel(): boolean {\r\n        return !this.showlabel;\r\n    }\r\n     /**\r\n     * æä¸ªå­æ®µåçå¼ååäºä»¶æ¶ï¼éè¦åæ­¥æ¸ç©ºçå­æ®µï¼å¯è½ä¸æ¯å½åå­æ®µ\r\n     */\r\n    @Input() changeFields: Array<string> = [];\r\n    constructor(private solutionService: SolutionService, private injector: Injector, private cdr: ChangeDetectorRef) { }\r\n\r\n    ngOnInit(): void {\r\n        this.initDate();\r\n        if (this.item) {\r\n            const type = Object.prototype.toString.call(this.item.placeHolder);\r\n            if (type == '[object Undefined]') {\r\n                if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {\r\n                    this.placeholder = this.item.control.placeholder;\r\n                }\r\n            }\r\n            else {\r\n                this.placeholder = this.item.placeHolder;\r\n            }\r\n            const beginplac = Object.prototype.toString.call(this.item.beginPlaceHolder);\r\n            if (beginplac == '[object Undefined]') {\r\n                if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {\r\n                    this.beginPlaceHolder = this.item.control.beginPlaceHolder;\r\n                }\r\n            }\r\n            else {\r\n                this.beginPlaceHolder = this.item.beginPlaceHolder;\r\n            }\r\n            const endplac = Object.prototype.toString.call(this.item.endPlaceHolder);\r\n            if (endplac == '[object Undefined]') {\r\n                if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {\r\n                    this.endPlaceHolder = this.item.control.endPlaceHolder;\r\n                }\r\n            }\r\n            else {\r\n                this.endPlaceHolder = this.item.endPlaceHolder;\r\n            }\r\n            // this.showType = this.item.control.showType;\r\n        }\r\n        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {\r\n            this.extend = this.item.control.isExtend;\r\n            if (!this.extend) {\r\n                this.showlabel = this.item.control.showLabel;\r\n            }\r\n        }\r\n\r\n        this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);\r\n\r\n\r\n        (this.item.value as DateRangeValue).clear$.subscribe(() => {\r\n            this.rangeDate = '';\r\n        });\r\n\r\n        // this.cdr.detectChanges();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        // this.initDate();\r\n        if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {\r\n            const isChange = changes['changeFields'].currentValue.some(field => field == this.item.fieldCode);\r\n            if (isChange) {\r\n                let beginValue = this.item.value && this.item.value.startTime ? this.item.value.startTime.toString().trim() : '';\r\n                let endValue = this.item.value && this.item.value.endTime ? this.item.value.endTime.toString().trim() : '';\r\n                this.rangeDate = `${beginValue}~${endValue}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    initDate() {\r\n        if (this.item && this.item.control && this.item.control.hasOwnProperty('format')) {\r\n            let itemDateFormat = this.item.control.format;\r\n            if (this.showTime) {\r\n                if (itemDateFormat.length > 0 && itemDateFormat.indexOf('HH:mm') == -1) {\r\n                    itemDateFormat = itemDateFormat + ' HH:mm:ss';\r\n                }\r\n            }\r\n            const format = this.showTime ? 'yyyy-MM-dd HH:mm:ss' : (this.showType == '2' ? 'yyyy-MM' : (this.showType == '3' ? 'yyyy' : 'yyyy-MM-dd'));\r\n            this.returnFormat = format;\r\n            this.dateFormat = itemDateFormat ? itemDateFormat : format;\r\n        }\r\n        const rangeDateValue: DateRangeValue = this.item && this.item.value;\r\n        if (rangeDateValue.startTime && rangeDateValue.endTime) {\r\n            this.rangeDate = `${rangeDateValue.startTime}~${rangeDateValue.endTime}`;\r\n        }\r\n    }\r\n\r\n    getDate(dateString: Date): Date {\r\n        // let arr1:Array<any> = dateString.split(\" \"); \r\n        // let sdate = arr1[0].split('-'); \r\n        // let date = new Date(sdate[0], sdate[1]-1, sdate[2]);\r\n        let date = new Date(dateString);\r\n        return date;\r\n    }\r\n\r\n    onDateChange(event: any) {\r\n        if (event) {\r\n            (this.item.value as DateRangeValue).startTime = event.returnFormatted.split('~')[0];\r\n            (this.item.value as DateRangeValue).endTime = event.returnFormatted.split('~')[1];\r\n        } else {\r\n            // this.item.value = new DateRangeValue();\r\n            this.item.value.startTime = '';\r\n            this.item.value.endTime = '';\r\n        }\r\n        if (this.disabled) { return; }\r\n        this.searchHandle.emit(event);\r\n    }\r\n    getConditionItemTitle(field: QueryCondition) {\r\n        return this.solutionService.getConditionItemTitle(field);\r\n    }\r\n}\r\n","import { Component, ViewEncapsulation} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-filter-common',\r\n    template:``,\r\n    styleUrls:['./list-filter.common.scss'],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\n\r\nexport class ListFilterCommonComponent{}","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { QueryCondition } from './entity/querycondition';\r\nimport { ControlType } from './entity/controltype';\r\n\r\n@Pipe({name: 'controlType'})\r\nexport class ControlTypeXPipe implements PipeTransform {\r\n    transform(value: QueryCondition): Array<any> {\r\n        let type;\r\n        switch(value.control.getControlType()){\r\n            case ControlType.Text:\r\n                type = 'input';\r\n                break;\r\n            case ControlType.Search:\r\n                type = 'search';\r\n                break;\r\n            case ControlType.Date:\r\n                type = 'date';\r\n                break;\r\n            case ControlType.Year:\r\n                type = 'year';\r\n                break;\r\n            case ControlType.Month:\r\n                type = 'month';\r\n                break;\r\n            case ControlType.MonthRange:\r\n                type = 'monthrange';\r\n                break;\r\n            case ControlType.YearRange:\r\n                type = 'yearrange';\r\n                break;\r\n            case ControlType.DateRange:\r\n                type = 'daterange';\r\n                break;\r\n            case ControlType.DateRangeTime:\r\n                type = 'daterangetime';\r\n                break;\r\n            case ControlType.DropDown:\r\n                type = 'dropdown';\r\n                break;\r\n            case ControlType.NumberRange:\r\n                type = 'number';\r\n                break;\r\n            case ControlType.Help:\r\n                type = 'help';\r\n                break;\r\n            case ControlType.CheckboxGroup:\r\n                type = 'checkboxgroup';\r\n                break; \r\n            case ControlType.Radio:\r\n                type = 'radio';\r\n                break;\r\n            case ControlType.InputGroup:\r\n                type = 'input-group';\r\n                break;\r\n            default:\r\n                type = 'input';\r\n                break;     \r\n        }\r\n        return type;\r\n    }\r\n}\r\n","import { RadioIEnumValue } from \"./ienumvalue\";\r\n\r\n/**\r\n * checboxgroupç±»å\r\n */\r\nexport class RadioValue implements RadioIEnumValue{\r\n\r\n    getEnumValueName():string{\r\n        return this.name;\r\n    }\r\n\r\n    getEnumValue():any{\r\n        return this.value;\r\n    }\r\n    \r\n    /**\r\n     * ææ¬æ¾ç¤º\r\n     */\r\n    name:string;\r\n\r\n    /**\r\n     * å¼æ¾ç¤º\r\n     */\r\n    value:string;\r\n}","import { Component, Input, OnInit, OnChanges, ViewEncapsulation, HostBinding, EventEmitter, Output, SimpleChanges } from '@angular/core';\r\nimport { QueryCondition } from '../../entity/querycondition';\r\nimport { ControlType } from '../../entity/controltype';\r\nimport { SolutionService } from '../../service/solution.service';\r\nimport { RadioValue } from '../../entity/controltype/radio/radiovalue';\r\nimport { RadioControl } from '../../entity/controltype/radio/radiocontrol';\r\nimport { RadioGroupValue } from '../../entity/conditionvalue/radiovalue';\r\n\r\n@Component({\r\n    selector: 'app-filter-radio',\r\n    templateUrl: './radio.component.html',\r\n    styleUrls: ['./radio.component.scss']\r\n    // encapsulation: ViewEncapsulation.None\r\n})\r\n\r\nexport class FilterRadioComponent implements OnInit, OnChanges {\r\n\r\n    /**\r\n     * QueryConditionç±»å\r\n     */\r\n    @Input() item: any;\r\n    @Input() autoLabel: boolean;\r\n    @Input() disabled: boolean;\r\n    @Output('searchHandle') searchHandle = new EventEmitter();\r\n    /**å¤æ­æ¯å¦æ¯å¨æ©å±åºåå±ç¤º */\r\n    extend: boolean = false;\r\n    /**å¤æ­æ¯å¦æ¾ç¤ºlabel */\r\n    showlabel: boolean = true;\r\n    radioValue: any[];\r\n\r\n    selectCheck = [];\r\n\r\n    @HostBinding('class.filter-item-wrap')\r\n    get isExtend(): boolean {\r\n        return !this.extend && this.autoLabel;\r\n    }\r\n\r\n    @HostBinding('class.filter-item-checbox-wrap')\r\n    get isCheckExtend(): boolean {\r\n        return !this.extend;\r\n    }\r\n\r\n    @HostBinding('class.filter-item-radio') cla = true;\r\n    @HostBinding('class.filter-item-hiddenlabel')\r\n    get hidenLabel(): boolean {\r\n        return !this.showlabel;\r\n    }\r\n\r\n    radioDataSource: Array<any> = new Array<any>();\r\n    /**\r\n     * æä¸ªå­æ®µåçå¼ååäºä»¶æ¶ï¼éè¦åæ­¥æ¸ç©ºçå­æ®µï¼å¯è½ä¸æ¯å½åå­æ®µ\r\n     */\r\n    @Input() changeFields: Array<string> = [];\r\n\r\n    constructor(private solutionService: SolutionService) { }\r\n\r\n    ngOnInit(): void {\r\n        this.getDataSource();\r\n        this.radioValue = this.item.value.getOriginalValue();\r\n        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {\r\n            this.extend = this.item.control.isExtend;\r\n            if (!this.extend) {\r\n                this.showlabel = this.item.control.showLabel;\r\n            }\r\n        }\r\n\r\n        this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);\r\n\r\n        (this.item.value as RadioGroupValue).clear$.subscribe(() => {\r\n            this.radioValue = [];\r\n        });\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        this.getDataSource();\r\n        if(changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {\r\n            const isChange = changes['changeFields'].currentValue.some(field => field == this.item.fieldCode);\r\n            if(isChange){\r\n                let orginalValue=this.item.value.getOriginalValue()\r\n                this.radioValue =orginalValue==undefined?[]:orginalValue;\r\n            }\r\n        }\r\n    }\r\n\r\n    getDataSource() {\r\n        if (this.item && this.item.control && this.item.control.getControlType() == ControlType.Radio) {\r\n            let radioList = (this.item.control as RadioControl);\r\n            this.radioDataSource = Array<RadioValue>();\r\n\r\n            if (radioList.enumValues && radioList.enumValues.length > 0) {\r\n                radioList.enumValues.forEach(element => {\r\n                    this.radioDataSource.push(Object.assign(new RadioValue(), element));\r\n                });\r\n            }\r\n        }\r\n        // if(this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')){\r\n        //     this.extend = this.item.control.isExtend;\r\n        // }\r\n    }\r\n\r\n    // getConditionItemStyle(field: QueryCondition, controlType: any) {\r\n    //     return this.solutionService.getConditionItemStyle(field,controlType);\r\n    // }\r\n\r\n    getConditionItemTitle(field: QueryCondition) {\r\n        return this.solutionService.getConditionItemTitle(field);\r\n    }\r\n\r\n    onSearch(event) {\r\n        if (event) {\r\n            this.item.value.value = event;\r\n        }\r\n        else {\r\n            this.item.value.value = new RadioGroupValue();\r\n        }\r\n        if (this.disabled) { return; }\r\n        this.searchHandle.emit();\r\n    }\r\n}","import { Component, Input, OnInit, ViewChild, EventEmitter, Output, HostBinding } from '@angular/core';\r\nimport { QueryCondition } from '../../entity/querycondition';\r\nimport { SolutionService } from '../../service/solution.service';\r\nimport { InputGroupControl } from '../../entity/controltype/input-group/inputgroupcontrol';\r\nimport { InputGroupValue } from '../../entity/conditionvalue/inputgroup';\r\nimport { InputGroupComponent } from '@farris/ui-input-group';\r\n\r\n\r\n@Component({\r\n    selector: 'app-filter-inputgroup',\r\n    templateUrl: './inputgroup.component.html',\r\n})\r\n\r\nexport class FilterInputGroupComponent implements OnInit {\r\n    /**\r\n     * QueryConditionç±»å\r\n     */\r\n    _inputItem: QueryCondition;\r\n\r\n    testId: string;\r\n\r\n    usageMode: string;\r\n\r\n    dialogOptions: any;\r\n\r\n    @Input()\r\n    set item(textItem: any) {\r\n        this._inputItem = textItem;\r\n    }\r\n    get item(): any {\r\n        return this.constructTextItem(this._inputItem);\r\n    }\r\n    @Input() autoLabel: boolean;\r\n    @Input() disabled: boolean;\r\n\r\n    /**å¤æ­æ¯å¦æ¯å¨æ©å±åºåå±ç¤º */\r\n    extend: boolean = false;\r\n    /**å¤æ­æ¯å¦æ¾ç¤ºlabel */\r\n    showlabel: boolean = true;\r\n\r\n    @HostBinding('class.filter-item-wrap')\r\n    get isExtend(): boolean {\r\n        return !this.extend && this.autoLabel;\r\n    }\r\n    @HostBinding('class.filter-item-hiddenlabel')\r\n    get hidenLabel(): boolean {\r\n        return !this.showlabel;\r\n    }\r\n\r\n    @Output('searchHandle') searchHandle = new EventEmitter();\r\n\r\n    @ViewChild('inputgroup') inputgroup: InputGroupComponent;\r\n\r\n    textField: string;\r\n    isTextFromDialog = false;\r\n    textFormDialog: string;\r\n\r\n    constructTextItem(textItem: QueryCondition): QueryCondition {\r\n        const textValueObj = textItem.value as InputGroupValue;\r\n        textValueObj.textValue = textValueObj.textValue && textValueObj.textValue.trim();\r\n        textItem.value = textValueObj;\r\n        return textItem;\r\n    }\r\n\r\n    constructor(private solutionService: SolutionService) { }\r\n\r\n    ngOnInit(): void {\r\n        this.testId = this.solutionService.getGuid();\r\n        this.getInputGroupBindingInfo();\r\n\r\n        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {\r\n            this.extend = this.item.control.isExtend;\r\n            if (!this.extend) {\r\n                this.showlabel = this.item.control.showLabel;\r\n            }\r\n        }\r\n        this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);\r\n    }\r\n\r\n    getInputGroupBindingInfo() {\r\n        const inputGroupControl = (this.item.control as InputGroupControl);\r\n        this.usageMode = inputGroupControl.usageMode;\r\n        if (this.usageMode == 'open-modal' || this.usageMode == 'open-remote-modal') {\r\n            this.dialogOptions = inputGroupControl.dialogOptions;\r\n            /*\r\n                example of dialogOptions = {\r\n                   modalId: \"1e011720-eb0f-4c9c-82b6-6844c89b2303\"\r\n                   mapFields: {hDepartment: \"Name\"}\r\n                   title: \"æµè¯æ é¢æ \"\r\n                   width: 800\r\n                   height: 600\r\n                }\r\n             */\r\n            if (this.dialogOptions.mapFields) {\r\n                this.textField = JSON.stringify(this.dialogOptions.mapFields).split('\"')[1];\r\n            }\r\n        }\r\n    }\r\n\r\n    getConditionItemTitle(field: QueryCondition) {\r\n        return this.solutionService.getConditionItemTitle(field);\r\n    }\r\n\r\n    /*\r\n        dialogOptions = {\r\n            modalId: \"ae011720-eb0f-4c9c-82b6-6844c89b2303\"\r\n            mapFields: {hDepartment: \"Name\"}\r\n            title: \"æµè¯æ é¢æ \"\r\n            width: 800\r\n            height: 600\r\n            showButtons: true\r\n            buttons: [\r\n                { text: \"ç¡®å®\", cls: \"btn-primary\", handle: _this.viewModel.rootviewmodelconfirm1 },\r\n                { text: \"åæ¶\", cls: \"btn-secondary\", handle: _this.viewModel.rootviewmodelcancel1}\r\n            ]\r\n        }\r\n    */\r\n    onClick(event: any) {\r\n        if (this.usageMode == 'text') {\r\n            this.item.control.click();\r\n        }\r\n        else {\r\n            const options = this.dialogOptions;\r\n            options.handle = (selectedItem) => {\r\n                // let modalData = item[0];\r\n                // this.item.value.value = modalData[this.targetField];\r\n                let selectedItems = selectedItem.filter(n => n);\r\n                if (selectedItems && this.textField) {\r\n                    this.item.value.value = selectedItems;\r\n                    this.item.value.textValue = this.item.value.getTextValue(this.textField);\r\n                    this.item.value.textField = this.textField;\r\n                    this.item.value.isInputText = false;\r\n                    if (this.inputgroup) {\r\n                        this.inputgroup.cd.detectChanges();\r\n                        this.inputgroup.value = this.item.value.textValue;\r\n                    }\r\n                    this.isTextFromDialog = true;\r\n                    this.textFormDialog = this.item.value.textValue;\r\n                    this.onBlur();\r\n                }\r\n            }\r\n            this.item.control.click({ event, options });\r\n        }\r\n    }\r\n\r\n    onBlur() {\r\n        if (this.disabled) { return; }\r\n        if (this.usageMode == 'text') {\r\n            this.item.value.isInputText = true;\r\n        }\r\n        if (this.usageMode == 'open-modal' || this.usageMode == 'open-remote-modal') {\r\n            if (!this.isTextFromDialog) {\r\n                this.item.value.isInputText = true;\r\n            }\r\n            if (this.item.value.textValue != this.textFormDialog) {\r\n                this.isTextFromDialog = false;\r\n                this.item.value.value = [];\r\n                this.item.value.textField = undefined;\r\n                this.item.value.isInputText = true;\r\n            }\r\n        }\r\n        this.searchHandle.emit();\r\n    }\r\n\r\n    onClear() {\r\n        (this.item.value as InputGroupValue).clearValue();\r\n        this.searchHandle.emit();\r\n    }\r\n}","import { Directive, Input, OnInit, Optional, Self, Injector } from '@angular/core';\r\nimport { NgControl } from '@angular/forms';\r\nimport { ListFilterComponent } from '../list-filter.component';\r\n\r\n@Directive({\r\n    selector: '[clear-fields]'\r\n})\r\nexport class ClearFieldsDirective implements OnInit {\r\n    @Input('clear-fields') clearFields = '';\r\n\r\n    constructor(@Optional() @Self() private ngCtrl: NgControl, private listFilterCmp: ListFilterComponent, private inject: Injector) { }\r\n\r\n    ngOnInit() {\r\n        if (this.clearFields && this.ngCtrl) {\r\n            this.ngCtrl.valueChanges.subscribe((v) => {\r\n                if (!this.ngCtrl.dirty) {\r\n                    return;\r\n                }\r\n                this.listFilterCmp.fieldCodeOfClearFields = [];\r\n                this.clearFields.split(',').forEach(n => {\r\n                    // å­æ®µç¼å·\r\n                    const conditionItem = this.listFilterCmp.listFilterConditions.find(c => c.fieldCode === n);\r\n                    if (conditionItem) {\r\n                        // è§¦åæ¸ç©ºå­æ®µåè¡¨åæ´ï¼ç¹æ®æ§ä»¶ç±»åçæ¸ç©ºï¼ä¸è½åªæ¯æ¸ç©ºå¼\r\n                        this.listFilterCmp.fieldCodeOfClearFields.push(n);\r\n                        // æ¸ç©ºå­æ®µ\r\n                        conditionItem.value.clearValue();\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ListFilterComponent } from './list-filter.component';\r\n\r\nimport { InputComponent } from './controlcomponent/inputcomponent/input.component';\r\nimport { SearchComponent } from './controlcomponent/searchcomponent/search.component';\r\nimport { HelpComponent } from './controlcomponent/helpcomponent.ts/help.component';\r\nimport { DateComponent } from './controlcomponent/datecomponent/date.component';\r\nimport { DropDownComponent } from './controlcomponent/dropdowncomponent/dropdown.component';\r\nimport { NumberComponent } from './controlcomponent/numbercomponent/number.component';\r\nimport { FilterCheckboxComponent } from './controlcomponent/checkboxcomponent/checkbox.component';\r\nimport { DateRangeComponent } from './controlcomponent/daterangecomponent/daterange.component';\r\n\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { InputGroupModule } from '@farris/ui-input-group';\r\nimport { FarrisDatePickerModule } from '@farris/ui-datepicker';\r\nimport { DatalistModule } from '@farris/ui-datalist';\r\nimport { ComboListModule } from '@farris/ui-combo-list';\r\nimport { LookupModule } from '@farris/ui-lookup';\r\nimport { FarrisFormsModule } from '@farris/ui-forms';\r\nimport { PerfectScrollbarModule } from '@farris/ui-perfect-scrollbar';\r\n\r\n// import { InputsModule } from '@progress/kendo-angular-inputs';\r\nimport { SolutionService } from './service/solution.service';\r\nimport { NumberSpinnerModule } from '@farris/ui-number-spinner';\r\n\r\nimport { QuerySolutionService } from './submithandlers/query-solution.service';\r\nimport { ConvertorService } from './service/convertorservice';\r\nimport { ListFilterCommonComponent } from './list-filter-common';\r\n\r\nimport { LocaleModule } from '@farris/ui-locale';\r\nimport { ControlTypeXPipe } from './controlType.pipe';\r\nimport { FilterRadioComponent } from './controlcomponent/radiocomponent/radio.component';\r\nimport { FilterInputGroupComponent } from './controlcomponent/inputgroupcomponent/inputgroup.component';\r\nimport { ClearFieldsDirective } from './directives/clear-fields.directive';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ListFilterComponent,\r\n    DateComponent,\r\n    NumberComponent,\r\n    HelpComponent,\r\n    InputComponent,\r\n    DropDownComponent,\r\n    SearchComponent,\r\n    FilterCheckboxComponent,\r\n    DateRangeComponent,\r\n    ListFilterCommonComponent,\r\n    FilterRadioComponent,\r\n    FilterInputGroupComponent,\r\n    ControlTypeXPipe,\r\n    ClearFieldsDirective\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    InputGroupModule,\r\n    FarrisDatePickerModule,\r\n    DatalistModule,\r\n    ComboListModule,\r\n    LookupModule,\r\n    FarrisFormsModule,\r\n    NumberSpinnerModule,\r\n    PerfectScrollbarModule,\r\n    LocaleModule.forRoot()\r\n    // InputsModule\r\n  ],\r\n  providers:[\r\n    ConvertorService,\r\n    SolutionService,\r\n    QuerySolutionService\r\n  ],\r\n  exports: [\r\n    ListFilterComponent,\r\n    DateComponent,\r\n    NumberComponent,\r\n    HelpComponent,\r\n    InputComponent,\r\n    DropDownComponent,\r\n    SearchComponent,\r\n    FilterCheckboxComponent,\r\n    DateRangeComponent,\r\n    ListFilterCommonComponent,\r\n    FilterRadioComponent,\r\n    FilterInputGroupComponent,\r\n    ControlTypeXPipe\r\n  ]\r\n})\r\nexport class ListFilterModule { }\r\n","import { FieldConfig } from './fieldconfig/fieldconfig';\r\n\r\nexport class listFilterItem{\r\n    id: string;\r\n    name: string;\r\n    width: Number; // è®°å½å®½åº¦\r\n    isExtend: boolean\r\n    constructor(_id: string, _groupName: string) {\r\n        this.id = _id;\r\n        this.name = _groupName;\r\n        this.width = 0;\r\n        this.isExtend = false;\r\n    }\r\n    // è®¾ç½®å®½åº¦\r\n    setWidth(value: string) {\r\n        this.width = parseInt(value, 10);\r\n    }\r\n    // è·åå®½åº¦\r\n    getWidth(): any {\r\n        return this.width;\r\n    }\r\n}\r\nexport class listFilterGroup {\r\n    listItems:Array<listFilterItem>;\r\n    responsedIndex:number = 0;\r\n    constructor(){\r\n        this.listItems = [];\r\n    }\r\n}\r\n\r\n// export class listFilterGroup {\r\n//     id: string;\r\n//     name: string;\r\n//     presetId: Array<string> = []; // è®°å½åç´ çId\r\n//     responsedIndex: Array<Number> = []; // è®°å½è½¬åä¸ºä¸ææ¶åç´ çä½ç½®\r\n//     width: number; // è®°å½å®½åº¦\r\n//     constructor(_id: string, _groupName: string) {\r\n//         this.id = _id;\r\n//         this.name = _groupName;\r\n//         this.width = 0;\r\n//     }\r\n//     // è®¾ç½®å®½åº¦\r\n//     setWidth(value: any) {\r\n//         this.width = parseInt(value + '', 10);\r\n//     }\r\n//     // è·åå®½åº¦\r\n//     getWidth(): any {\r\n//         return this.width;\r\n//     }\r\n//     // æ´æ°presetIndex\r\n//     setPreset(value: Array<string> | string) {\r\n//         if (Array.isArray(value)) {\r\n//             this.presetId = this.presetId.concat(value);\r\n//         } else {\r\n//             this.presetId.push(value);\r\n//         }\r\n//     }\r\n//     // æ¸é¤preset\r\n//     delPreset(){\r\n//         this.presetId=[];\r\n//     }\r\n//     // å é¤\r\n//     removeResponsed(index) {\r\n//         this.responsedIndex.splice(index, 1);\r\n//     }\r\n//     // æ´æ°responsedIndex\r\n//     setResponsed(value: Array<Number> | Number) {\r\n//         if (Array.isArray(value)) {\r\n//             this.responsedIndex = this.responsedIndex.concat(value);\r\n//         } else {\r\n//             this.responsedIndex.push(value);\r\n//         }\r\n//     }\r\n//     // æ¯å¦å·²ç»å¼å§å¤çååºå¼\r\n//     isResponsing() {\r\n//         return this.responsedIndex.length > 0;\r\n//     }\r\n//     // æ¯å¦å·²ç»å¤çå®ååºå¼\r\n//     isResponsed() {\r\n//         return this.presetId.length === this.responsedIndex.length;\r\n//     }\r\n// }\r\n","import { ControlType } from '../controltype';\r\nimport { TextValue } from './textvalue';\r\nimport { NumberRangeValueConvertor } from './numberrangevaue';\r\nimport { DateRangeValue } from './daterangevalue';\r\nimport { HelpValue } from './helpvalue';\r\nimport { DropDownListValueConvert } from './dropdownlistvalue';\r\n\r\nexport interface IValue {\r\n    getControlType(): ControlType;\r\n    getOriginalValue(): any;\r\n    setOriginalValue(value: any): void;\r\n    clearValue(): void;\r\n    isEmpty(): boolean;\r\n}\r\n\r\nexport class ConditionValueConvert {\r\n    convertToObject(obj: IValue): Object {\r\n        let conditionValue = obj as IValue;\r\n        let controlType = conditionValue.getControlType();\r\n        let jobj = new Object();\r\n        jobj['Type'] = controlType;\r\n        if (controlType == ControlType.DropDown) {\r\n            let convertor = new DropDownListValueConvert();\r\n            jobj['Content'] = convertor.convertToObject(conditionValue);\r\n        }\r\n        else if (controlType == ControlType.NumberRange) {\r\n            let convertor = new NumberRangeValueConvertor();\r\n            jobj['Content'] = convertor.convertToObject(conditionValue);\r\n        }\r\n        else {\r\n            jobj['Content'] = conditionValue;\r\n        }\r\n        return jobj;\r\n    }\r\n\r\n    initFromObject(jobj: Object): IValue {\r\n        let controlType = jobj['Type'] as ControlType;\r\n        let content: IValue = jobj['Content'];\r\n        if (controlType == ControlType.Text) {\r\n            return Object.assign(new TextValue(), content as TextValue);\r\n        }\r\n        else if (controlType == ControlType.NumberRange) {\r\n            let convertor = new NumberRangeValueConvertor();\r\n            return convertor.initFromObject(content);\r\n        }\r\n        else if (controlType == ControlType.DateRange) {\r\n            return Object.assign(new DateRangeValue(), content as DateRangeValue);\r\n        }\r\n        else if (controlType == ControlType.DropDown) {\r\n            let convertor = new DropDownListValueConvert();\r\n            return convertor.initFromObject(content);\r\n        }\r\n        else if (controlType == ControlType.Help) {\r\n            return Object.assign(new HelpValue(), content as HelpValue);\r\n        }\r\n    }\r\n}","export interface RadioIEnumValue{\r\n    getEnumValueName():string;\r\n    getEnumValue():any;\r\n\r\n    /**\r\n     * å¼æ¾ç¤º\r\n     */\r\n    value:string;\r\n}\r\n\r\nexport class RadioEnumValue implements RadioIEnumValue{\r\n\r\n    getEnumValueName():string{\r\n        return this.name;\r\n    }\r\n\r\n    getEnumValue():any{\r\n        return this.value;\r\n    }\r\n    \r\n    /**\r\n     * ææ¬æ¾ç¤º\r\n     */\r\n    name:string;\r\n\r\n    /**\r\n     * å¼æ¾ç¤º\r\n     */\r\n    value:string;\r\n}","export enum DisplayType{\r\n    LIST=0,\r\n    TREELIST=1\r\n}","import { ControlType } from \"../controltype\";\r\nimport { DropDownControl, DropDownListControlConvert } from \"./dropdownlist/dropdowncontrol\";\r\nimport { TextControl } from \"./text/textcontrol\";\r\nimport { SearchControl } from './search/searchcontrol';\r\n\r\n\r\nimport { DateRangeControl } from \"./datarange/daterangecontrol\";\r\nimport { DateControl } from \"./date/datecontrol\";\r\nimport { HelpContol } from \"./help/helpcontrol\";\r\nimport { NumberRangeControl } from \"./numberrange/numberrangecontrol\";\r\nimport { CompareType } from '../comparetype';\r\n\r\n/**\r\n * æ§ä»¶æ¥å£\r\n */\r\nexport interface IControl{\r\n\r\n    /**\r\n     * è·åæ§ä»¶ç±»å\r\n     */\r\n    getControlType():ControlType;\r\n    \r\n    /**\r\n     * æ¯å¦æ¯å±ç¤ºå¨æ©å±åºååç\r\n     */\r\n    isExtend:boolean;\r\n    /**æ¯å¦å¿å¡« */\r\n    required:boolean;\r\n    /**æ¥æéè¦å¢å ç±»åæ¯è¾ */\r\n    compareType?:CompareType;\r\n    enableClear?: boolean;\r\n}\r\n\r\nexport class ControlConvert{\r\n    convertJObject(obj:IControl):Object{\r\n        let control=obj as IControl;\r\n        let controlType=control.getControlType();\r\n        let jobj=new Object();\r\n        jobj[\"Type\"]=controlType;\r\n        if(controlType!=ControlType.DropDown){\r\n            jobj[\"Content\"]=control;\r\n        }\r\n        else{\r\n            let convertor=new DropDownListControlConvert();\r\n            jobj[\"Content\"]=convertor.convertToObject(control as DropDownControl);\r\n        }\r\n        return jobj;\r\n    }\r\n\r\n    initFromJobject(jobj:Object):IControl{\r\n        let controlType=jobj[\"Type\"] as ControlType;\r\n        let content:IControl=jobj[\"Content\"];\r\n        if(controlType==ControlType.Text){\r\n            return Object.assign(new TextControl(),content as TextControl);\r\n        }\r\n        else if( controlType==ControlType.Search ){\r\n            return Object.assign(new SearchControl(),content as SearchControl);\r\n        }\r\n\r\n\r\n        else if(controlType==ControlType.DateRange){\r\n            return Object.assign(new DateRangeControl(),content as DateRangeControl);\r\n        }\r\n        else if(controlType==ControlType.NumberRange){\r\n            return Object.assign(new NumberRangeControl(),content as NumberRangeControl);\r\n        }\r\n        // else if(controlType==ControlType.DateTime){\r\n        //     return Object.assign(new DateControl(),content as DateControl);\r\n        // }\r\n        else if(controlType==ControlType.DropDown){\r\n            let convert=new DropDownListControlConvert();\r\n            return convert.initFromObject(content);\r\n        }\r\n        else if(controlType==ControlType.Help){\r\n            return Object.assign(new HelpContol(),content as HelpContol);\r\n        }\r\n    }\r\n}"]}