/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { ControlType } from './entity/controltype';
export class ControlTypeXPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        /** @type {?} */
        let type;
        switch (value.control.getControlType()) {
            case ControlType.Text:
                type = 'input';
                break;
            case ControlType.Search:
                type = 'search';
                break;
            case ControlType.Date:
                type = 'date';
                break;
            case ControlType.Year:
                type = 'year';
                break;
            case ControlType.Month:
                type = 'month';
                break;
            case ControlType.MonthRange:
                type = 'monthrange';
                break;
            case ControlType.YearRange:
                type = 'yearrange';
                break;
            case ControlType.DateRange:
                type = 'daterange';
                break;
            case ControlType.DateRangeTime:
                type = 'daterangetime';
                break;
            case ControlType.DropDown:
                type = 'dropdown';
                break;
            case ControlType.NumberRange:
                type = 'number';
                break;
            case ControlType.Help:
                type = 'help';
                break;
            case ControlType.CheckboxGroup:
                type = 'checkboxgroup';
                break;
            case ControlType.Radio:
                type = 'radio';
                break;
            case ControlType.InputGroup:
                type = 'input-group';
                break;
            default:
                type = 'input';
                break;
        }
        return type;
    }
}
ControlTypeXPipe.decorators = [
    { type: Pipe, args: [{ name: 'controlType' },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbFR5cGUucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktbGlzdC1maWx0ZXIvIiwic291cmNlcyI6WyJsaWIvY29udHJvbFR5cGUucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFFcEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBR25ELE1BQU0sT0FBTyxnQkFBZ0I7Ozs7O0lBQ3pCLFNBQVMsQ0FBQyxLQUFxQjs7WUFDdkIsSUFBSTtRQUNSLFFBQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsRUFBQztZQUNsQyxLQUFLLFdBQVcsQ0FBQyxJQUFJO2dCQUNqQixJQUFJLEdBQUcsT0FBTyxDQUFDO2dCQUNmLE1BQU07WUFDVixLQUFLLFdBQVcsQ0FBQyxNQUFNO2dCQUNuQixJQUFJLEdBQUcsUUFBUSxDQUFDO2dCQUNoQixNQUFNO1lBQ1YsS0FBSyxXQUFXLENBQUMsSUFBSTtnQkFDakIsSUFBSSxHQUFHLE1BQU0sQ0FBQztnQkFDZCxNQUFNO1lBQ1YsS0FBSyxXQUFXLENBQUMsSUFBSTtnQkFDakIsSUFBSSxHQUFHLE1BQU0sQ0FBQztnQkFDZCxNQUFNO1lBQ1YsS0FBSyxXQUFXLENBQUMsS0FBSztnQkFDbEIsSUFBSSxHQUFHLE9BQU8sQ0FBQztnQkFDZixNQUFNO1lBQ1YsS0FBSyxXQUFXLENBQUMsVUFBVTtnQkFDdkIsSUFBSSxHQUFHLFlBQVksQ0FBQztnQkFDcEIsTUFBTTtZQUNWLEtBQUssV0FBVyxDQUFDLFNBQVM7Z0JBQ3RCLElBQUksR0FBRyxXQUFXLENBQUM7Z0JBQ25CLE1BQU07WUFDVixLQUFLLFdBQVcsQ0FBQyxTQUFTO2dCQUN0QixJQUFJLEdBQUcsV0FBVyxDQUFDO2dCQUNuQixNQUFNO1lBQ1YsS0FBSyxXQUFXLENBQUMsYUFBYTtnQkFDMUIsSUFBSSxHQUFHLGVBQWUsQ0FBQztnQkFDdkIsTUFBTTtZQUNWLEtBQUssV0FBVyxDQUFDLFFBQVE7Z0JBQ3JCLElBQUksR0FBRyxVQUFVLENBQUM7Z0JBQ2xCLE1BQU07WUFDVixLQUFLLFdBQVcsQ0FBQyxXQUFXO2dCQUN4QixJQUFJLEdBQUcsUUFBUSxDQUFDO2dCQUNoQixNQUFNO1lBQ1YsS0FBSyxXQUFXLENBQUMsSUFBSTtnQkFDakIsSUFBSSxHQUFHLE1BQU0sQ0FBQztnQkFDZCxNQUFNO1lBQ1YsS0FBSyxXQUFXLENBQUMsYUFBYTtnQkFDMUIsSUFBSSxHQUFHLGVBQWUsQ0FBQztnQkFDdkIsTUFBTTtZQUNWLEtBQUssV0FBVyxDQUFDLEtBQUs7Z0JBQ2xCLElBQUksR0FBRyxPQUFPLENBQUM7Z0JBQ2YsTUFBTTtZQUNWLEtBQUssV0FBVyxDQUFDLFVBQVU7Z0JBQ3ZCLElBQUksR0FBRyxhQUFhLENBQUM7Z0JBQ3JCLE1BQU07WUFDVjtnQkFDSSxJQUFJLEdBQUcsT0FBTyxDQUFDO2dCQUNmLE1BQU07U0FDYjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7OztZQXZESixJQUFJLFNBQUMsRUFBQyxJQUFJLEVBQUUsYUFBYSxFQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBRdWVyeUNvbmRpdGlvbiB9IGZyb20gJy4vZW50aXR5L3F1ZXJ5Y29uZGl0aW9uJztcclxuaW1wb3J0IHsgQ29udHJvbFR5cGUgfSBmcm9tICcuL2VudGl0eS9jb250cm9sdHlwZSc7XHJcblxyXG5AUGlwZSh7bmFtZTogJ2NvbnRyb2xUeXBlJ30pXHJcbmV4cG9ydCBjbGFzcyBDb250cm9sVHlwZVhQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgICB0cmFuc2Zvcm0odmFsdWU6IFF1ZXJ5Q29uZGl0aW9uKTogQXJyYXk8YW55PiB7XHJcbiAgICAgICAgbGV0IHR5cGU7XHJcbiAgICAgICAgc3dpdGNoKHZhbHVlLmNvbnRyb2wuZ2V0Q29udHJvbFR5cGUoKSl7XHJcbiAgICAgICAgICAgIGNhc2UgQ29udHJvbFR5cGUuVGV4dDpcclxuICAgICAgICAgICAgICAgIHR5cGUgPSAnaW5wdXQnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ29udHJvbFR5cGUuU2VhcmNoOlxyXG4gICAgICAgICAgICAgICAgdHlwZSA9ICdzZWFyY2gnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ29udHJvbFR5cGUuRGF0ZTpcclxuICAgICAgICAgICAgICAgIHR5cGUgPSAnZGF0ZSc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDb250cm9sVHlwZS5ZZWFyOlxyXG4gICAgICAgICAgICAgICAgdHlwZSA9ICd5ZWFyJztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENvbnRyb2xUeXBlLk1vbnRoOlxyXG4gICAgICAgICAgICAgICAgdHlwZSA9ICdtb250aCc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDb250cm9sVHlwZS5Nb250aFJhbmdlOlxyXG4gICAgICAgICAgICAgICAgdHlwZSA9ICdtb250aHJhbmdlJztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENvbnRyb2xUeXBlLlllYXJSYW5nZTpcclxuICAgICAgICAgICAgICAgIHR5cGUgPSAneWVhcnJhbmdlJztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENvbnRyb2xUeXBlLkRhdGVSYW5nZTpcclxuICAgICAgICAgICAgICAgIHR5cGUgPSAnZGF0ZXJhbmdlJztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENvbnRyb2xUeXBlLkRhdGVSYW5nZVRpbWU6XHJcbiAgICAgICAgICAgICAgICB0eXBlID0gJ2RhdGVyYW5nZXRpbWUnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ29udHJvbFR5cGUuRHJvcERvd246XHJcbiAgICAgICAgICAgICAgICB0eXBlID0gJ2Ryb3Bkb3duJztcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENvbnRyb2xUeXBlLk51bWJlclJhbmdlOlxyXG4gICAgICAgICAgICAgICAgdHlwZSA9ICdudW1iZXInO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ29udHJvbFR5cGUuSGVscDpcclxuICAgICAgICAgICAgICAgIHR5cGUgPSAnaGVscCc7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBDb250cm9sVHlwZS5DaGVja2JveEdyb3VwOlxyXG4gICAgICAgICAgICAgICAgdHlwZSA9ICdjaGVja2JveGdyb3VwJztcclxuICAgICAgICAgICAgICAgIGJyZWFrOyBcclxuICAgICAgICAgICAgY2FzZSBDb250cm9sVHlwZS5SYWRpbzpcclxuICAgICAgICAgICAgICAgIHR5cGUgPSAncmFkaW8nO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ29udHJvbFR5cGUuSW5wdXRHcm91cDpcclxuICAgICAgICAgICAgICAgIHR5cGUgPSAnaW5wdXQtZ3JvdXAnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0eXBlID0gJ2lucHV0JztcclxuICAgICAgICAgICAgICAgIGJyZWFrOyAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0eXBlO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==