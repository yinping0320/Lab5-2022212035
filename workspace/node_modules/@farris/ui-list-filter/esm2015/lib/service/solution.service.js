/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
export class SolutionService {
    constructor() {
        this.filterEditors = {};
    }
    /**
     * @return {?}
     */
    getGuid() {
        return (this.s4() + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + this.s4() + this.s4());
    }
    /**
     * @private
     * @return {?}
     */
    s4() {
        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    }
    /**
     * 根据字段获取Lable控件的Title
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        if (field.id && field.id !== '') {
            return field.fieldName;
        }
    }
    /**
     * 数组克隆 也可使用JSON.Parse(JSON.Stringify([input])),前提类结构中没有借口
     * @param {?} input
     * @return {?}
     */
    arrayClone(input) {
        /** @type {?} */
        let result = new Array();
        if (input && input.length > 0) {
            input.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                result.push(Object.assign({}, element));
            }));
        }
        return result;
    }
    /**
     * @param {?} fieldName
     * @param {?} cmpIns
     * @return {?}
     */
    addFilterEditorInstance(fieldName, cmpIns) {
        this.filterEditors[fieldName] = cmpIns;
    }
}
SolutionService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SolutionService.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    SolutionService.prototype.filterEditors;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29sdXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktbGlzdC1maWx0ZXIvIiwic291cmNlcyI6WyJsaWIvc2VydmljZS9zb2x1dGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE1BQU0sT0FBTyxlQUFlO0lBSXhCO1FBRkEsa0JBQWEsR0FBRyxFQUFFLENBQUM7SUFFSCxDQUFDOzs7O0lBRWpCLE9BQU87UUFDSCxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNuSSxDQUFDOzs7OztJQUVPLEVBQUU7UUFDTixPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNFLENBQUM7Ozs7OztJQU1ELHFCQUFxQixDQUFDLEtBQXFCO1FBQ3ZDLElBQUksS0FBSyxDQUFDLEVBQUUsSUFBSSxLQUFLLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUM3QixPQUFPLEtBQUssQ0FBQyxTQUFTLENBQUM7U0FDMUI7SUFDTCxDQUFDOzs7Ozs7SUFNRCxVQUFVLENBQUMsS0FBaUI7O1lBQ3BCLE1BQU0sR0FBRyxJQUFJLEtBQUssRUFBTztRQUM3QixJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUMzQixLQUFLLENBQUMsT0FBTzs7OztZQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNwQixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDNUMsQ0FBQyxFQUFDLENBQUM7U0FDTjtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7Ozs7OztJQUVELHVCQUF1QixDQUFDLFNBQWlCLEVBQUUsTUFBVztRQUNsRCxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztJQUMzQyxDQUFDOzs7WUF6Q0osVUFBVTs7Ozs7O0lBR1Asd0NBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBRdWVyeUNvbmRpdGlvbiB9IGZyb20gJy4uL2VudGl0eS9xdWVyeWNvbmRpdGlvbic7XHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFNvbHV0aW9uU2VydmljZSB7XHJcblxyXG4gICAgZmlsdGVyRWRpdG9ycyA9IHt9O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkgeyB9XHJcblxyXG4gICAgZ2V0R3VpZCgpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuczQoKSArIHRoaXMuczQoKSArIFwiLVwiICsgdGhpcy5zNCgpICsgXCItXCIgKyB0aGlzLnM0KCkgKyBcIi1cIiArIHRoaXMuczQoKSArIFwiLVwiICsgdGhpcy5zNCgpICsgdGhpcy5zNCgpICsgdGhpcy5zNCgpKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHM0KCkge1xyXG4gICAgICAgIHJldHVybiAoKCgxICsgTWF0aC5yYW5kb20oKSkgKiAweDEwMDAwKSB8IDApLnRvU3RyaW5nKDE2KS5zdWJzdHJpbmcoMSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmoLnmja7lrZfmrrXojrflj5ZMYWJsZeaOp+S7tueahFRpdGxlXHJcbiAgICAgKiBAcGFyYW0gZmllbGRcclxuICAgICAqL1xyXG4gICAgZ2V0Q29uZGl0aW9uSXRlbVRpdGxlKGZpZWxkOiBRdWVyeUNvbmRpdGlvbikge1xyXG4gICAgICAgIGlmIChmaWVsZC5pZCAmJiBmaWVsZC5pZCAhPT0gJycpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZpZWxkLmZpZWxkTmFtZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmlbDnu4TlhYvpmoYg5Lmf5Y+v5L2/55SoSlNPTi5QYXJzZShKU09OLlN0cmluZ2lmeShbaW5wdXRdKSks5YmN5o+Q57G757uT5p6E5Lit5rKh5pyJ5YCf5Y+jXHJcbiAgICAgKiBAcGFyYW0gaW5wdXRcclxuICAgICAqL1xyXG4gICAgYXJyYXlDbG9uZShpbnB1dDogQXJyYXk8YW55Pik6IEFycmF5PGFueT4ge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBuZXcgQXJyYXk8YW55PigpO1xyXG4gICAgICAgIGlmIChpbnB1dCAmJiBpbnB1dC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGlucHV0LmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChPYmplY3QuYXNzaWduKHt9LCBlbGVtZW50KSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIGFkZEZpbHRlckVkaXRvckluc3RhbmNlKGZpZWxkTmFtZTogc3RyaW5nLCBjbXBJbnM6IGFueSkge1xyXG4gICAgICAgIHRoaXMuZmlsdGVyRWRpdG9yc1tmaWVsZE5hbWVdID0gY21wSW5zO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==