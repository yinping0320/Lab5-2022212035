/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { FieldConfig } from '../entity/fieldconfig/fieldconfig';
import { QueryCondition } from '../entity/querycondition';
// import { SolutionService } from './solution.service';
import { EnumType } from '../entity/controltype/dropdownlist/enumtype';
import { EnumBoolValue } from '../entity/controltype/dropdownlist/boolenumvalue';
import { EnumIntegerValue } from '../entity/controltype/dropdownlist/integerenumvalue';
import { EnumStringValue } from '../entity/controltype/dropdownlist/stringenumvalue';
import { ControlType } from '../entity/controltype';
import { CompareType } from '../entity/comparetype';
import { ValueType } from '../entity/valuetype';
import { RelationType } from '../entity/relationtype';
import { CheckboxEnumValue } from '../entity/controltype/checkbox/ienumvalue';
export class ConvertorService {
    constructor() { }
    // private solutionservice:SolutionService
    /**
     * 获取已选择的字段配置
     * @param {?} selectedConditions
     * @return {?}
     */
    getFeildConfigs(selectedConditions) {
        /** @type {?} */
        let fieldsConfigs = new Array();
        if (!selectedConditions || selectedConditions.length <= 0) {
            return fieldsConfigs;
        }
        else {
            selectedConditions.forEach((/**
             * @param {?} condition
             * @return {?}
             */
            condition => {
                /** @type {?} */
                let fieldConfig = new FieldConfig();
                fieldConfig.id = condition.id;
                fieldConfig.labelCode = condition.fieldCode;
                fieldConfig.name = condition.fieldName;
                fieldConfig.control = condition.control;
                fieldsConfigs.push(fieldConfig);
            }));
        }
        return fieldsConfigs;
    }
    /**
     * @param {?} fileds
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    getSelectedFieldConditions(fileds, selectedFieldConditions) {
        // console.log(selectedFieldConditions);
        /** @type {?} */
        let tempSelectedFieldConditions = new Array();
        tempSelectedFieldConditions = this.arrayClone(selectedFieldConditions);
        selectedFieldConditions = new Array();
        fileds.forEach((/**
         * @param {?} filed
         * @return {?}
         */
        filed => {
            filed.control = this.getDropListEnumValues((/** @type {?} */ (filed.control)));
            // filed.control = this.getCheckGroupEnumValues(filed.control as CheckboxGroupControl);
            if (tempSelectedFieldConditions.length > 0) {
                /** @type {?} */
                let tempIndex = tempSelectedFieldConditions.findIndex((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => x.id == filed.id));
                if (tempIndex != (-1)) {
                    selectedFieldConditions.push(tempSelectedFieldConditions[tempIndex]);
                }
                else {
                    selectedFieldConditions = this.getNewFieldConditions(filed, selectedFieldConditions);
                }
            }
            else {
                selectedFieldConditions = this.getNewFieldConditions(filed, selectedFieldConditions);
            }
        }));
        return selectedFieldConditions;
    }
    /**
     * @private
     * @param {?} control
     * @return {?}
     */
    getDropListEnumValues(control) {
        if (control.valueType == EnumType.BoolType) {
            /** @type {?} */
            let enumValues = new Array();
            control.enumValues.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                enumValues.push(Object.assign(new EnumBoolValue(), element));
            }));
            control.enumValues = enumValues;
        }
        else if (control.valueType == EnumType.IntType) {
            /** @type {?} */
            let enumValues = new Array();
            control.enumValues.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                enumValues.push(Object.assign(new EnumIntegerValue(), element));
            }));
            control.enumValues = enumValues;
        }
        else if (control.valueType == EnumType.StringType) {
            /** @type {?} */
            let enumValues = new Array();
            control.enumValues.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                enumValues.push(Object.assign(new EnumStringValue(), element));
            }));
            control.enumValues = enumValues;
        }
        return control;
    }
    /**
     * @private
     * @param {?} control
     * @return {?}
     */
    getCheckGroupEnumValues(control) {
        /** @type {?} */
        let enumValues = new Array();
        control.enumValues.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            enumValues.push(Object.assign(new CheckboxEnumValue(), element));
        }));
        control.enumValues = enumValues;
        return control;
    }
    /**
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    getNewFieldConditions(filed, selectedFieldConditions) {
        /** @type {?} */
        let selectedFieldCondition = new QueryCondition();
        if (filed.control.getControlType() == ControlType.Text) {
            selectedFieldConditions = this.getTextValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.DateRange) {
            selectedFieldConditions = this.getDateRangeValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.DateRangeTime) {
            selectedFieldConditions = this.getDateRangeTimeValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.MonthRange) {
            selectedFieldConditions = this.getDateRangeValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.YearRange) {
            selectedFieldConditions = this.getDateRangeValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.NumberRange) {
            selectedFieldConditions = this.getNumberRangeValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.Help) {
            selectedFieldConditions = this.getSmartHelpValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.DropDown) {
            selectedFieldConditions = this.getDropDownListValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.Search) {
            selectedFieldConditions = this.getSearchValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.Date) {
            selectedFieldConditions = this.getDateValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.Year) {
            selectedFieldConditions = this.getDateValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.Month) {
            selectedFieldConditions = this.getDateValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.CheckboxGroup) {
            selectedFieldConditions = this.getCheckboxGroupValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.Radio) {
            selectedFieldConditions = this.getRadioValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.InputGroup) {
            selectedFieldConditions = this.getInputGroupValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        return selectedFieldConditions;
    }
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    getDropDownListValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.id = filed.id;
        selectedFieldCondition.fieldCode = filed.labelCode;
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.fieldName = filed.name;
        selectedFieldCondition.compareType = CompareType.Equal;
        selectedFieldCondition.valueType = ValueType.Value;
        selectedFieldCondition.value = filed.value;
        selectedFieldCondition.relationType = RelationType.And;
        selectedFieldCondition.control = filed.control;
        this.getDropListEnumValues((/** @type {?} */ (selectedFieldCondition.control)));
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    }
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    getCheckboxGroupValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.id = filed.id;
        selectedFieldCondition.fieldCode = filed.labelCode;
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.fieldName = filed.name;
        selectedFieldCondition.compareType = CompareType.Equal;
        selectedFieldCondition.valueType = ValueType.Value;
        selectedFieldCondition.value = filed.value;
        selectedFieldCondition.relationType = RelationType.And;
        selectedFieldCondition.control = filed.control;
        this.getCheckGroupEnumValues((/** @type {?} */ (selectedFieldCondition.control)));
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    }
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    getRadioValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.id = filed.id;
        selectedFieldCondition.fieldCode = filed.labelCode;
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.fieldName = filed.name;
        selectedFieldCondition.compareType = CompareType.Equal;
        selectedFieldCondition.valueType = ValueType.Value;
        selectedFieldCondition.value = filed.value;
        selectedFieldCondition.relationType = RelationType.And;
        selectedFieldCondition.control = filed.control;
        this.getCheckGroupEnumValues((/** @type {?} */ (selectedFieldCondition.control)));
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    }
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    getSmartHelpValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.id = filed.id;
        selectedFieldCondition.fieldCode = filed.labelCode;
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.fieldName = filed.name;
        selectedFieldCondition.compareType = CompareType.Equal;
        selectedFieldCondition.valueType = ValueType.Value;
        selectedFieldCondition.value = filed.value;
        selectedFieldCondition.relationType = RelationType.And;
        selectedFieldCondition.control = filed.control;
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    }
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    getNumberRangeValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.id = filed.id;
        selectedFieldCondition.fieldCode = filed.labelCode;
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.beginPlaceHolder = filed.beginPlaceHolder;
        selectedFieldCondition.endPlaceHolder = filed.endPlaceHolder;
        selectedFieldCondition.fieldName = filed.name;
        selectedFieldCondition.compareType = CompareType.BetWeen;
        selectedFieldCondition.valueType = ValueType.Value;
        selectedFieldCondition.value = filed.value;
        selectedFieldCondition.relationType = RelationType.And;
        selectedFieldCondition.control = filed.control;
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    }
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    getDateRangeValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.id = filed.id;
        selectedFieldCondition.fieldCode = filed.labelCode;
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.beginPlaceHolder = filed.beginPlaceHolder;
        selectedFieldCondition.endPlaceHolder = filed.endPlaceHolder;
        selectedFieldCondition.fieldName = filed.name;
        selectedFieldCondition.compareType = CompareType.BetWeen;
        selectedFieldCondition.valueType = ValueType.Value;
        selectedFieldCondition.value = filed.value;
        selectedFieldCondition.relationType = RelationType.And;
        selectedFieldCondition.control = filed.control;
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    }
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    getDateRangeTimeValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.id = filed.id;
        selectedFieldCondition.fieldCode = filed.labelCode;
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.fieldName = filed.name;
        selectedFieldCondition.compareType = CompareType.BetWeen;
        selectedFieldCondition.valueType = ValueType.Value;
        selectedFieldCondition.value = filed.value;
        selectedFieldCondition.relationType = RelationType.And;
        selectedFieldCondition.control = filed.control;
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    }
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    getTextValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.id = filed.id;
        selectedFieldCondition.fieldCode = filed.labelCode;
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.fieldName = filed.name;
        selectedFieldCondition.compareType = CompareType.Equal;
        selectedFieldCondition.valueType = ValueType.Value;
        selectedFieldCondition.value = filed.value;
        selectedFieldCondition.relationType = RelationType.And;
        selectedFieldCondition.control = filed.control;
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    }
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    getInputGroupValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.id = filed.id;
        selectedFieldCondition.fieldCode = filed.labelCode;
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.fieldName = filed.name;
        selectedFieldCondition.compareType = CompareType.Equal;
        selectedFieldCondition.valueType = ValueType.Value;
        selectedFieldCondition.value = filed.value;
        selectedFieldCondition.relationType = RelationType.And;
        selectedFieldCondition.control = filed.control;
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    }
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    getDateValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.id = filed.id;
        selectedFieldCondition.fieldCode = filed.labelCode;
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.fieldName = filed.name;
        selectedFieldCondition.compareType = CompareType.Equal;
        selectedFieldCondition.valueType = ValueType.Value;
        selectedFieldCondition.value = filed.value;
        selectedFieldCondition.relationType = RelationType.And;
        selectedFieldCondition.control = filed.control;
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    }
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    getSearchValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.id = filed.id;
        selectedFieldCondition.fieldCode = filed.labelCode;
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.fieldName = filed.name;
        selectedFieldCondition.compareType = CompareType.Equal;
        selectedFieldCondition.valueType = ValueType.Value;
        selectedFieldCondition.value = filed.value;
        selectedFieldCondition.relationType = RelationType.And;
        selectedFieldCondition.control = filed.control;
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    }
    /**
     * @private
     * @param {?} input
     * @return {?}
     */
    arrayClone(input) {
        /** @type {?} */
        let result = new Array();
        if (input && input.length > 0) {
            input.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                result.push(Object.assign({}, element));
            }));
        }
        return result;
    }
}
ConvertorService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ConvertorService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,