/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, EventEmitter, Output, HostBinding } from '@angular/core';
import { SolutionService } from '../../service/solution.service';
import { InputGroupComponent } from '@farris/ui-input-group';
export class FilterInputGroupComponent {
    /**
     * @param {?} solutionService
     */
    constructor(solutionService) {
        this.solutionService = solutionService;
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
        this.searchHandle = new EventEmitter();
        this.isTextFromDialog = false;
    }
    /**
     * @param {?} textItem
     * @return {?}
     */
    set item(textItem) {
        this._inputItem = textItem;
    }
    /**
     * @return {?}
     */
    get item() {
        return this.constructTextItem(this._inputItem);
    }
    /**
     * @return {?}
     */
    get isExtend() {
        return !this.extend && this.autoLabel;
    }
    /**
     * @return {?}
     */
    get hidenLabel() {
        return !this.showlabel;
    }
    /**
     * @param {?} textItem
     * @return {?}
     */
    constructTextItem(textItem) {
        /** @type {?} */
        const textValueObj = (/** @type {?} */ (textItem.value));
        textValueObj.textValue = textValueObj.textValue && textValueObj.textValue.trim();
        textItem.value = textValueObj;
        return textItem;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.testId = this.solutionService.getGuid();
        this.getInputGroupBindingInfo();
        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
            this.extend = this.item.control.isExtend;
            if (!this.extend) {
                this.showlabel = this.item.control.showLabel;
            }
        }
        this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);
    }
    /**
     * @return {?}
     */
    getInputGroupBindingInfo() {
        /** @type {?} */
        const inputGroupControl = ((/** @type {?} */ (this.item.control)));
        this.usageMode = inputGroupControl.usageMode;
        if (this.usageMode == 'open-modal' || this.usageMode == 'open-remote-modal') {
            this.dialogOptions = inputGroupControl.dialogOptions;
            /*
                example of dialogOptions = {
                   modalId: "1e011720-eb0f-4c9c-82b6-6844c89b2303"
                   mapFields: {hDepartment: "Name"}
                   title: "测试标题栏"
                   width: 800
                   height: 600
                }
             */
            if (this.dialogOptions.mapFields) {
                this.textField = JSON.stringify(this.dialogOptions.mapFields).split('"')[1];
            }
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
    /*
            dialogOptions = {
                modalId: "ae011720-eb0f-4c9c-82b6-6844c89b2303"
                mapFields: {hDepartment: "Name"}
                title: "测试标题栏"
                width: 800
                height: 600
                showButtons: true
                buttons: [
                    { text: "确定", cls: "btn-primary", handle: _this.viewModel.rootviewmodelconfirm1 },
                    { text: "取消", cls: "btn-secondary", handle: _this.viewModel.rootviewmodelcancel1}
                ]
            }
        */
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        if (this.usageMode == 'text') {
            this.item.control.click();
        }
        else {
            /** @type {?} */
            const options = this.dialogOptions;
            options.handle = (/**
             * @param {?} selectedItem
             * @return {?}
             */
            (selectedItem) => {
                // let modalData = item[0];
                // this.item.value.value = modalData[this.targetField];
                /** @type {?} */
                let selectedItems = selectedItem.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n));
                if (selectedItems && this.textField) {
                    this.item.value.value = selectedItems;
                    this.item.value.textValue = this.item.value.getTextValue(this.textField);
                    this.item.value.textField = this.textField;
                    this.item.value.isInputText = false;
                    if (this.inputgroup) {
                        this.inputgroup.cd.detectChanges();
                        this.inputgroup.value = this.item.value.textValue;
                    }
                    this.isTextFromDialog = true;
                    this.textFormDialog = this.item.value.textValue;
                    this.onBlur();
                }
            });
            this.item.control.click({ event, options });
        }
    }
    /**
     * @return {?}
     */
    onBlur() {
        if (this.disabled) {
            return;
        }
        if (this.usageMode == 'text') {
            this.item.value.isInputText = true;
        }
        if (this.usageMode == 'open-modal' || this.usageMode == 'open-remote-modal') {
            if (!this.isTextFromDialog) {
                this.item.value.isInputText = true;
            }
            if (this.item.value.textValue != this.textFormDialog) {
                this.isTextFromDialog = false;
                this.item.value.value = [];
                this.item.value.textField = undefined;
                this.item.value.isInputText = true;
            }
        }
        this.searchHandle.emit();
    }
    /**
     * @return {?}
     */
    onClear() {
        ((/** @type {?} */ (this.item.value))).clearValue();
        this.searchHandle.emit();
    }
}
FilterInputGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-filter-inputgroup',
                template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <input-group #inputgroup\r\n        [(ngModel)]=\"item.value.textValue\" \r\n        name=\"{{item.fieldName}}\" \r\n        id=\"{{testId}}\"\r\n        [readonly]=\"disabled\"\r\n        [groupText]=\"item.control.groupText\"\r\n        [editable]=\"item.control.editable\"\r\n        [placeholder]=\"item.placeHolder\"\r\n        (clickHandle)=\"onClick($event)\"\r\n        (blurHandle)=\"onBlur()\"\r\n        (clear)=\"onClear()\"\r\n        >\r\n    </input-group>\r\n</div>\r\n"
            }] }
];
/** @nocollapse */
FilterInputGroupComponent.ctorParameters = () => [
    { type: SolutionService }
];
FilterInputGroupComponent.propDecorators = {
    item: [{ type: Input }],
    autoLabel: [{ type: Input }],
    disabled: [{ type: Input }],
    isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
    hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }],
    searchHandle: [{ type: Output, args: ['searchHandle',] }],
    inputgroup: [{ type: ViewChild, args: ['inputgroup',] }]
};
if (false) {
    /**
     * QueryCondition类型
     * @type {?}
     */
    FilterInputGroupComponent.prototype._inputItem;
    /** @type {?} */
    FilterInputGroupComponent.prototype.testId;
    /** @type {?} */
    FilterInputGroupComponent.prototype.usageMode;
    /** @type {?} */
    FilterInputGroupComponent.prototype.dialogOptions;
    /** @type {?} */
    FilterInputGroupComponent.prototype.autoLabel;
    /** @type {?} */
    FilterInputGroupComponent.prototype.disabled;
    /**
     * 判断是否是在扩展区域展示
     * @type {?}
     */
    FilterInputGroupComponent.prototype.extend;
    /**
     * 判断是否显示label
     * @type {?}
     */
    FilterInputGroupComponent.prototype.showlabel;
    /** @type {?} */
    FilterInputGroupComponent.prototype.searchHandle;
    /** @type {?} */
    FilterInputGroupComponent.prototype.inputgroup;
    /** @type {?} */
    FilterInputGroupComponent.prototype.textField;
    /** @type {?} */
    FilterInputGroupComponent.prototype.isTextFromDialog;
    /** @type {?} */
    FilterInputGroupComponent.prototype.textFormDialog;
    /**
     * @type {?}
     * @private
     */
    FilterInputGroupComponent.prototype.solutionService;
}
//# sourceMappingURL=data:application/json;base64,