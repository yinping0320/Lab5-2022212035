/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EnumType } from "./enumtype";
import { EnumIntegerValue } from "./integerenumvalue";
import { EnumStringValue } from "./stringenumvalue";
import { EnumBoolValue } from "./boolenumvalue";
/**
 * @record
 */
export function IEnumValue() { }
if (false) {
    /**
     * @return {?}
     */
    IEnumValue.prototype.getEnumType = function () { };
    /**
     * @return {?}
     */
    IEnumValue.prototype.getEnumValueName = function () { };
    /**
     * @return {?}
     */
    IEnumValue.prototype.getEnumValue = function () { };
}
export class EnumValueConvert {
    /**
     * @param {?} obj
     * @return {?}
     */
    convertJObject(obj) {
        /** @type {?} */
        let enumValue = (/** @type {?} */ (obj));
        /** @type {?} */
        let enumType = enumValue.getEnumType();
        /** @type {?} */
        let jobj = new Object();
        jobj["Type"] = enumType;
        jobj["Content"] = enumValue;
        return jobj;
    }
    /**
     * @param {?} jobj
     * @return {?}
     */
    initFromJobject(jobj) {
        /** @type {?} */
        let enumType = (/** @type {?} */ (jobj["Type"]));
        /** @type {?} */
        let content = (/** @type {?} */ (jobj["Content"]));
        if (enumType == EnumType.IntType) {
            return Object.assign(new EnumIntegerValue(), content);
        }
        else if (enumType == EnumType.BoolType) {
            return Object.assign(new EnumBoolValue(), content);
        }
        else {
            return Object.assign(new EnumStringValue(), content);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWVudW12YWx1ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktbGlzdC1maWx0ZXIvIiwic291cmNlcyI6WyJsaWIvZW50aXR5L2NvbnRyb2x0eXBlL2Ryb3Bkb3dubGlzdC9pZW51bXZhbHVlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7Ozs7QUFFaEQsZ0NBSUM7Ozs7O0lBSEcsbURBQXVCOzs7O0lBQ3ZCLHdEQUEwQjs7OztJQUMxQixvREFBbUI7O0FBR3ZCLE1BQU0sT0FBTyxnQkFBZ0I7Ozs7O0lBRXpCLGNBQWMsQ0FBQyxHQUFjOztZQUNyQixTQUFTLEdBQUMsbUJBQUEsR0FBRyxFQUFjOztZQUMzQixRQUFRLEdBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRTs7WUFDaEMsSUFBSSxHQUFDLElBQUksTUFBTSxFQUFFO1FBQ3JCLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBQyxRQUFRLENBQUM7UUFDdEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFDLFNBQVMsQ0FBQztRQUMxQixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDOzs7OztJQUVELGVBQWUsQ0FBQyxJQUFXOztZQUNuQixRQUFRLEdBQUMsbUJBQUEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFZOztZQUNqQyxPQUFPLEdBQUMsbUJBQUEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFjO1FBQ3pDLElBQUcsUUFBUSxJQUFFLFFBQVEsQ0FBQyxPQUFPLEVBQUM7WUFDMUIsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksZ0JBQWdCLEVBQUUsRUFBQyxPQUFPLENBQUMsQ0FBRTtTQUN6RDthQUNJLElBQUcsUUFBUSxJQUFFLFFBQVEsQ0FBQyxRQUFRLEVBQUM7WUFDaEMsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksYUFBYSxFQUFFLEVBQUMsT0FBTyxDQUFDLENBQUU7U0FDdEQ7YUFDRztZQUNBLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLGVBQWUsRUFBRSxFQUFDLE9BQU8sQ0FBQyxDQUFFO1NBQ3hEO0lBQ0wsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRW51bVR5cGUgfSBmcm9tIFwiLi9lbnVtdHlwZVwiO1xyXG5pbXBvcnQgeyBFbnVtSW50ZWdlclZhbHVlIH0gZnJvbSBcIi4vaW50ZWdlcmVudW12YWx1ZVwiO1xyXG5pbXBvcnQgeyBFbnVtU3RyaW5nVmFsdWUgfSBmcm9tIFwiLi9zdHJpbmdlbnVtdmFsdWVcIjtcclxuaW1wb3J0IHsgRW51bUJvb2xWYWx1ZSB9IGZyb20gXCIuL2Jvb2xlbnVtdmFsdWVcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUVudW1WYWx1ZXtcclxuICAgIGdldEVudW1UeXBlKCk6RW51bVR5cGU7XHJcbiAgICBnZXRFbnVtVmFsdWVOYW1lKCk6c3RyaW5nO1xyXG4gICAgZ2V0RW51bVZhbHVlKCk6YW55O1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRW51bVZhbHVlQ29udmVydHtcclxuXHJcbiAgICBjb252ZXJ0Sk9iamVjdChvYmo6SUVudW1WYWx1ZSk6T2JqZWN0e1xyXG4gICAgICAgIGxldCBlbnVtVmFsdWU9b2JqIGFzIElFbnVtVmFsdWU7XHJcbiAgICAgICAgbGV0IGVudW1UeXBlPWVudW1WYWx1ZS5nZXRFbnVtVHlwZSgpO1xyXG4gICAgICAgIGxldCBqb2JqPW5ldyBPYmplY3QoKTtcclxuICAgICAgICBqb2JqW1wiVHlwZVwiXT1lbnVtVHlwZTtcclxuICAgICAgICBqb2JqW1wiQ29udGVudFwiXT1lbnVtVmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIGpvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdEZyb21Kb2JqZWN0KGpvYmo6T2JqZWN0KTpJRW51bVZhbHVle1xyXG4gICAgICAgIGxldCBlbnVtVHlwZT1qb2JqW1wiVHlwZVwiXSBhcyBFbnVtVHlwZTtcclxuICAgICAgICBsZXQgY29udGVudD1qb2JqW1wiQ29udGVudFwiXSBhcyBJRW51bVZhbHVlO1xyXG4gICAgICAgIGlmKGVudW1UeXBlPT1FbnVtVHlwZS5JbnRUeXBlKXtcclxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IEVudW1JbnRlZ2VyVmFsdWUoKSxjb250ZW50KSA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYoZW51bVR5cGU9PUVudW1UeXBlLkJvb2xUeXBlKXtcclxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IEVudW1Cb29sVmFsdWUoKSxjb250ZW50KSA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBFbnVtU3RyaW5nVmFsdWUoKSxjb250ZW50KSA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il19