/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlType } from "../../controltype";
import { EnumType } from "./enumtype";
import { EnumValueConvert } from "./ienumvalue";
import { EnumStringValue } from "./stringenumvalue";
import { EnumBoolValue } from "./boolenumvalue";
import { EnumIntegerValue } from "./integerenumvalue";
/**
 * 下拉列表控件
 */
export class DropDownControl {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.DropDown;
    }
}
if (false) {
    /**
     * 下拉值类型
     * @type {?}
     */
    DropDownControl.prototype.valueType;
    /**
     * 默认显示
     * @type {?}
     */
    DropDownControl.prototype.placeholder;
    /**
     * 下拉数据源列表
     * 该属性为IEnumValue接口类型，具体实现类如下：
     * 1.布尔类型：EnumBoolValue,布尔类型的控件会转成下拉列表，实现类使用EnumBoolValue
     * 2.字符串类型：EnumStringValue
     * 3.整型类型：EnumIntegerValue 例如Radio Button类型需要使用EnumIntegerValue实现类
     * @type {?}
     */
    DropDownControl.prototype.enumValues;
    /**
     * 是否是展示在扩展区域内的
     * @type {?}
     */
    DropDownControl.prototype.isExtend;
    /**
     * 是否显示label
     * @type {?}
     */
    DropDownControl.prototype.showLabel;
    /**
     * 是否必填
     * @type {?}
     */
    DropDownControl.prototype.required;
}
/**
 * 下拉列表控件序列化与反序列化器
 */
export class DropDownListControlConvert {
    /**
     * 序列化
     * @param {?} obj 下拉列表控件实体
     * @return {?}
     */
    convertToObject(obj) {
        /** @type {?} */
        let dropDownListControl = (/** @type {?} */ (obj));
        /** @type {?} */
        let jobj = new Object();
        jobj["valueType"] = dropDownListControl.valueType;
        if (dropDownListControl.enumValues != null) {
            /** @type {?} */
            let jarray = jobj["enumValues"] = [];
            /** @type {?} */
            let convertor = new EnumValueConvert();
            dropDownListControl.enumValues.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                if (dropDownListControl.valueType == EnumType.BoolType) {
                    jarray.push(convertor.convertJObject(Object.assign(new EnumBoolValue(), element)));
                }
                else if (dropDownListControl.valueType == EnumType.IntType) {
                    jarray.push(convertor.convertJObject(Object.assign(new EnumIntegerValue(), element)));
                }
                else {
                    jarray.push(convertor.convertJObject(Object.assign(new EnumStringValue(), element)));
                }
            }));
        }
        return jobj;
    }
    /**
     * 反序列化
     * @param {?} jobj 下拉列表控件实体序列化后的JSON对象
     * @return {?}
     */
    initFromObject(jobj) {
        /** @type {?} */
        let control = new DropDownControl();
        if (jobj["valueType"] != null) {
            control.valueType = (/** @type {?} */ (jobj["valueType"]));
        }
        if (jobj["enumValues"] != null) {
            control.enumValues = new Array();
            jobj["enumValues"].forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                /** @type {?} */
                let convertor = new EnumValueConvert();
                control.enumValues.push(convertor.initFromJobject(element));
            }));
        }
        return control;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd25jb250cm9sLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1saXN0LWZpbHRlci8iLCJzb3VyY2VzIjpbImxpYi9lbnRpdHkvY29udHJvbHR5cGUvZHJvcGRvd25saXN0L2Ryb3Bkb3duY29udHJvbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDdEMsT0FBTyxFQUFjLGdCQUFnQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzVELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDaEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7Ozs7QUFLdEQsTUFBTSxPQUFPLGVBQWU7Ozs7O0lBS3hCLGNBQWM7UUFDVixPQUFPLFdBQVcsQ0FBQyxRQUFRLENBQUM7SUFDaEMsQ0FBQztDQTRCSjs7Ozs7O0lBdkJHLG9DQUFtQjs7Ozs7SUFJbkIsc0NBQW1COzs7Ozs7Ozs7SUFRbkIscUNBQTZCOzs7OztJQUs3QixtQ0FBaUI7Ozs7O0lBR2pCLG9DQUFrQjs7Ozs7SUFFbEIsbUNBQWlCOzs7OztBQU1yQixNQUFNLE9BQU8sMEJBQTBCOzs7Ozs7SUFNbkMsZUFBZSxDQUFDLEdBQW1COztZQUMzQixtQkFBbUIsR0FBRSxtQkFBQSxHQUFHLEVBQW1COztZQUMzQyxJQUFJLEdBQUMsSUFBSSxNQUFNLEVBQUU7UUFDckIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQztRQUNoRCxJQUFHLG1CQUFtQixDQUFDLFVBQVUsSUFBRSxJQUFJLEVBQUM7O2dCQUNoQyxNQUFNLEdBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFDLEVBQUU7O2dCQUM1QixTQUFTLEdBQUMsSUFBSSxnQkFBZ0IsRUFBRTtZQUNwQyxtQkFBbUIsQ0FBQyxVQUFVLENBQUMsT0FBTzs7OztZQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUM3QyxJQUFHLG1CQUFtQixDQUFDLFNBQVMsSUFBRSxRQUFRLENBQUMsUUFBUSxFQUFDO29CQUNoRCxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLGFBQWEsRUFBRSxFQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDckY7cUJBQ0ksSUFBRyxtQkFBbUIsQ0FBQyxTQUFTLElBQUUsUUFBUSxDQUFDLE9BQU8sRUFBQztvQkFDcEQsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxnQkFBZ0IsRUFBRSxFQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDeEY7cUJBQ0c7b0JBQ0EsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxlQUFlLEVBQUUsRUFBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ3ZGO1lBQ0wsQ0FBQyxFQUFDLENBQUM7U0FDTjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7Ozs7OztJQU1ELGNBQWMsQ0FBQyxJQUFXOztZQUNsQixPQUFPLEdBQUMsSUFBSSxlQUFlLEVBQUU7UUFDakMsSUFBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUUsSUFBSSxFQUFDO1lBQ3ZCLE9BQU8sQ0FBQyxTQUFTLEdBQUMsbUJBQUEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFVLENBQUM7U0FDakQ7UUFDRCxJQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBRSxJQUFJLEVBQUM7WUFDeEIsT0FBTyxDQUFDLFVBQVUsR0FBQyxJQUFJLEtBQUssRUFBYyxDQUFDO1lBQzNDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPOzs7O1lBQUMsT0FBTyxDQUFDLEVBQUU7O29CQUM3QixTQUFTLEdBQUMsSUFBSSxnQkFBZ0IsRUFBRTtnQkFDcEMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ2hFLENBQUMsRUFBQyxDQUFDO1NBQ047UUFDRCxPQUFPLE9BQU8sQ0FBQztJQUNuQixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJQ29udHJvbCB9IGZyb20gXCIuLi9pY29udHJvbFwiO1xyXG5pbXBvcnQgeyBDb250cm9sVHlwZSB9IGZyb20gXCIuLi8uLi9jb250cm9sdHlwZVwiO1xyXG5pbXBvcnQgeyBFbnVtVHlwZSB9IGZyb20gXCIuL2VudW10eXBlXCI7XHJcbmltcG9ydCB7IElFbnVtVmFsdWUsIEVudW1WYWx1ZUNvbnZlcnQgfSBmcm9tIFwiLi9pZW51bXZhbHVlXCI7XHJcbmltcG9ydCB7IEVudW1TdHJpbmdWYWx1ZSB9IGZyb20gXCIuL3N0cmluZ2VudW12YWx1ZVwiO1xyXG5pbXBvcnQgeyBFbnVtQm9vbFZhbHVlIH0gZnJvbSBcIi4vYm9vbGVudW12YWx1ZVwiO1xyXG5pbXBvcnQgeyBFbnVtSW50ZWdlclZhbHVlIH0gZnJvbSBcIi4vaW50ZWdlcmVudW12YWx1ZVwiO1xyXG5cclxuLyoqXHJcbiAqIOS4i+aLieWIl+ihqOaOp+S7tlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIERyb3BEb3duQ29udHJvbCBpbXBsZW1lbnRzIElDb250cm9se1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5o6n5Lu257G75Z6LXHJcbiAgICAgKi9cclxuICAgIGdldENvbnRyb2xUeXBlKCk6IENvbnRyb2xUeXBlIHtcclxuICAgICAgICByZXR1cm4gQ29udHJvbFR5cGUuRHJvcERvd247XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDkuIvmi4nlgLznsbvlnotcclxuICAgICAqL1xyXG4gICAgdmFsdWVUeXBlOkVudW1UeXBlO1xyXG4gICAgLyoqXHJcbiAgICAgKiDpu5jorqTmmL7npLpcclxuICAgICAqL1xyXG4gICAgcGxhY2Vob2xkZXI6c3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiDkuIvmi4nmlbDmja7mupDliJfooahcclxuICAgICAqIOivpeWxnuaAp+S4uklFbnVtVmFsdWXmjqXlj6PnsbvlnovvvIzlhbfkvZPlrp7njrDnsbvlpoLkuIvvvJpcclxuICAgICAqIDEu5biD5bCU57G75Z6L77yaRW51bUJvb2xWYWx1ZSzluIPlsJTnsbvlnovnmoTmjqfku7bkvJrovazmiJDkuIvmi4nliJfooajvvIzlrp7njrDnsbvkvb/nlKhFbnVtQm9vbFZhbHVlXHJcbiAgICAgKiAyLuWtl+espuS4suexu+Wei++8mkVudW1TdHJpbmdWYWx1ZVxyXG4gICAgICogMy7mlbTlnovnsbvlnovvvJpFbnVtSW50ZWdlclZhbHVlIOS+i+WmglJhZGlvIEJ1dHRvbuexu+Wei+mcgOimgeS9v+eUqEVudW1JbnRlZ2VyVmFsdWXlrp7njrDnsbtcclxuICAgICAqL1xyXG4gICAgZW51bVZhbHVlczpBcnJheTxJRW51bVZhbHVlPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOaYr+WQpuaYr+WxleekuuWcqOaJqeWxleWMuuWfn+WGheeahFxyXG4gICAgICovXHJcbiAgICBpc0V4dGVuZDpib29sZWFuO1xyXG5cclxuICAgIC8qKuaYr+WQpuaYvuekumxhYmVsICovXHJcbiAgICBzaG93TGFiZWw6Ym9vbGVhbjtcclxuICAgIC8qKuaYr+WQpuW/heWhqyAqL1xyXG4gICAgcmVxdWlyZWQ6Ym9vbGVhbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIOS4i+aLieWIl+ihqOaOp+S7tuW6j+WIl+WMluS4juWPjeW6j+WIl+WMluWZqFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIERyb3BEb3duTGlzdENvbnRyb2xDb252ZXJ0e1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5bqP5YiX5YyWXHJcbiAgICAgKiBAcGFyYW0gb2JqIOS4i+aLieWIl+ihqOaOp+S7tuWunuS9k1xyXG4gICAgICovXHJcbiAgICBjb252ZXJ0VG9PYmplY3Qob2JqOkRyb3BEb3duQ29udHJvbCl7XHJcbiAgICAgICAgbGV0IGRyb3BEb3duTGlzdENvbnRyb2w9IG9iaiBhcyBEcm9wRG93bkNvbnRyb2w7XHJcbiAgICAgICAgbGV0IGpvYmo9bmV3IE9iamVjdCgpO1xyXG4gICAgICAgIGpvYmpbXCJ2YWx1ZVR5cGVcIl09ZHJvcERvd25MaXN0Q29udHJvbC52YWx1ZVR5cGU7XHJcbiAgICAgICAgaWYoZHJvcERvd25MaXN0Q29udHJvbC5lbnVtVmFsdWVzIT1udWxsKXtcclxuICAgICAgICAgICAgbGV0IGphcnJheT1qb2JqW1wiZW51bVZhbHVlc1wiXT1bXTtcclxuICAgICAgICAgICAgbGV0IGNvbnZlcnRvcj1uZXcgRW51bVZhbHVlQ29udmVydCgpO1xyXG4gICAgICAgICAgICBkcm9wRG93bkxpc3RDb250cm9sLmVudW1WYWx1ZXMuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgICAgIGlmKGRyb3BEb3duTGlzdENvbnRyb2wudmFsdWVUeXBlPT1FbnVtVHlwZS5Cb29sVHlwZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgamFycmF5LnB1c2goY29udmVydG9yLmNvbnZlcnRKT2JqZWN0KE9iamVjdC5hc3NpZ24obmV3IEVudW1Cb29sVmFsdWUoKSxlbGVtZW50KSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZihkcm9wRG93bkxpc3RDb250cm9sLnZhbHVlVHlwZT09RW51bVR5cGUuSW50VHlwZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgamFycmF5LnB1c2goY29udmVydG9yLmNvbnZlcnRKT2JqZWN0KE9iamVjdC5hc3NpZ24obmV3IEVudW1JbnRlZ2VyVmFsdWUoKSxlbGVtZW50KSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICBqYXJyYXkucHVzaChjb252ZXJ0b3IuY29udmVydEpPYmplY3QoT2JqZWN0LmFzc2lnbihuZXcgRW51bVN0cmluZ1ZhbHVlKCksZWxlbWVudCkpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBqb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Y+N5bqP5YiX5YyWXHJcbiAgICAgKiBAcGFyYW0gam9iaiDkuIvmi4nliJfooajmjqfku7blrp7kvZPluo/liJfljJblkI7nmoRKU09O5a+56LGhXHJcbiAgICAgKi9cclxuICAgIGluaXRGcm9tT2JqZWN0KGpvYmo6T2JqZWN0KTpEcm9wRG93bkNvbnRyb2x7XHJcbiAgICAgICAgbGV0IGNvbnRyb2w9bmV3IERyb3BEb3duQ29udHJvbCgpO1xyXG4gICAgICAgIGlmKGpvYmpbXCJ2YWx1ZVR5cGVcIl0hPW51bGwpe1xyXG4gICAgICAgICAgICBjb250cm9sLnZhbHVlVHlwZT1qb2JqW1widmFsdWVUeXBlXCJdIGFzIG51bWJlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoam9ialtcImVudW1WYWx1ZXNcIl0hPW51bGwpe1xyXG4gICAgICAgICAgICBjb250cm9sLmVudW1WYWx1ZXM9bmV3IEFycmF5PElFbnVtVmFsdWU+KCk7XHJcbiAgICAgICAgICAgIGpvYmpbXCJlbnVtVmFsdWVzXCJdLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY29udmVydG9yPW5ldyBFbnVtVmFsdWVDb252ZXJ0KCk7XHJcbiAgICAgICAgICAgICAgICBjb250cm9sLmVudW1WYWx1ZXMucHVzaChjb252ZXJ0b3IuaW5pdEZyb21Kb2JqZWN0KGVsZW1lbnQpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjb250cm9sO1xyXG4gICAgfVxyXG59Il19