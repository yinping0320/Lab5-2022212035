/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlType } from "../controltype";
import { cloneDeep } from 'lodash-es';
import { EventEmitter } from "@angular/core";
export class InputGroupValue {
    /**
     * @param {?=} data
     */
    constructor(data = { value: [], textValue: undefined, textField: undefined, isInputText: undefined }) {
        this.clear$ = new EventEmitter();
        this.value = data.value;
        this.textValue = data.textValue ? data.textValue.trim() : '';
        this.textField = data.textField;
        this.isInputText = data.isInputText;
    }
    /**
     * @param {?} targetField
     * @return {?}
     */
    getTextValue(targetField) {
        /** @type {?} */
        const args = targetField.split('.');
        /** @type {?} */
        const textArr = this.value.map((/**
         * @param {?} item
         * @return {?}
         */
        item => this.getPropValue(item, cloneDeep(args))));
        return textArr && textArr.length ? textArr.join(',') : '';
    }
    /**
     * @param {?} item
     * @param {?} args
     * @return {?}
     */
    getPropValue(item, args) {
        if (args.length > 1) {
            /** @type {?} */
            const arg = args.shift();
            if (arg) {
                return item[arg] ? this.getPropValue(item[arg], args) : '';
            }
            else {
                return '';
            }
        }
        return item[args[0]];
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.InputGroup;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        throw new Error("Method not implemented.");
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        /** @type {?} */
        const args = this.textField.split('.');
        /** @type {?} */
        const textArr = this.value.map((/**
         * @param {?} item
         * @return {?}
         */
        item => this.getPropValue(item, cloneDeep(args))));
        return textArr && textArr.length ? textArr.join(',') : '';
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.value = [];
        this.textValue = undefined;
        this.textField = undefined;
        this.isInputText = undefined;
        this.clear$.emit();
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.textValue;
    }
}
if (false) {
    /** @type {?} */
    InputGroupValue.prototype.value;
    /** @type {?} */
    InputGroupValue.prototype.textValue;
    /** @type {?} */
    InputGroupValue.prototype.textField;
    /** @type {?} */
    InputGroupValue.prototype.isInputText;
    /** @type {?} */
    InputGroupValue.prototype.clear$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRncm91cC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktbGlzdC1maWx0ZXIvIiwic291cmNlcyI6WyJsaWIvZW50aXR5L2NvbmRpdGlvbnZhbHVlL2lucHV0Z3JvdXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFN0MsTUFBTSxPQUFPLGVBQWU7Ozs7SUFheEIsWUFBWSxPQUtSLEVBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBQztRQVBuRixXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQVF4QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDeEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDN0QsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUN4QyxDQUFDOzs7OztJQUVELFlBQVksQ0FBQyxXQUFtQjs7Y0FDdEIsSUFBSSxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDOztjQUM3QixPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHOzs7O1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQztRQUNoRixPQUFPLE9BQU8sSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDN0QsQ0FBQzs7Ozs7O0lBRUQsWUFBWSxDQUFDLElBQVMsRUFBRSxJQUFtQjtRQUN2QyxJQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFDOztrQkFDVCxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUN4QixJQUFHLEdBQUcsRUFBQztnQkFDSCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQzthQUM5RDtpQkFDSTtnQkFDRCxPQUFPLEVBQUUsQ0FBQzthQUNiO1NBQ0o7UUFDRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6QixDQUFDOzs7O0lBQ0QsY0FBYztRQUNWLE9BQU8sV0FBVyxDQUFDLFVBQVUsQ0FBQztJQUNsQyxDQUFDOzs7OztJQUVELGdCQUFnQixDQUFDLEtBQVU7UUFDdkIsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQy9DLENBQUM7Ozs7SUFFRCxnQkFBZ0I7O2NBQ04sSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQzs7Y0FDaEMsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRzs7OztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUM7UUFDaEYsT0FBTyxPQUFPLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQSxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzdELENBQUM7Ozs7SUFFRCxVQUFVO1FBQ04sSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxTQUFTLENBQUM7UUFFN0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN2QixDQUFDOzs7O0lBRUQsT0FBTztRQUNILE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzNCLENBQUM7Q0FFSjs7O0lBbkVHLGdDQUFhOztJQUViLG9DQUFrQjs7SUFFbEIsb0NBQWtCOztJQUVsQixzQ0FBcUI7O0lBRXJCLGlDQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElWYWx1ZSB9IGZyb20gXCIuL2l2YWx1ZVwiO1xyXG5pbXBvcnQgeyBDb250cm9sVHlwZSB9IGZyb20gXCIuLi9jb250cm9sdHlwZVwiO1xyXG5pbXBvcnQgeyBjbG9uZURlZXAgfSBmcm9tICdsb2Rhc2gtZXMnO1xyXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIElucHV0R3JvdXBWYWx1ZSBpbXBsZW1lbnRzIElWYWx1ZXtcclxuXHJcbiAgICAvLyDlj6/og73mmK/nlKjmiLfmiYvliqjovpPlhaXnmoTlrZfnrKbkuLLvvIzkuZ/lj6/og73mmK/pgJrov4flvLnnqpfov5Tlm57nmoTlpJrkuKrlgLxcclxuICAgIHZhbHVlOiBhbnlbXTtcclxuICAgIC8vIOaOp+S7tuWGheaYvuekuueahOWAvFxyXG4gICAgdGV4dFZhbHVlOiBzdHJpbmc7XHJcbiAgICAvLyDlvLnnqpfmqKHlvI/kuIvvvIzlj5blvLnnqpfliJfooajlhoXlk6rkuKrlrZfmrrXnmoTlgLzmmKDlsITliLDlvZPliY3lrZfmrrVcclxuICAgIHRleHRGaWVsZDogc3RyaW5nO1xyXG4gICAgLy8g5piv5ZCm5piv5omL5Yqo6L6T5YWl55qE5YC8XHJcbiAgICBpc0lucHV0VGV4dDogYm9vbGVhbjtcclxuXHJcbiAgICBjbGVhciQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgY29uc3RydWN0b3IoZGF0YToge1xyXG4gICAgICAgIHZhbHVlOiBhbnksXHJcbiAgICAgICAgdGV4dFZhbHVlOiBzdHJpbmcsXHJcbiAgICAgICAgdGV4dEZpZWxkOiBzdHJpbmcsXHJcbiAgICAgICAgaXNJbnB1dFRleHQ6IGJvb2xlYW5cclxuICAgIH0gPSB7dmFsdWU6IFtdLCB0ZXh0VmFsdWU6IHVuZGVmaW5lZCwgdGV4dEZpZWxkOiB1bmRlZmluZWQsIGlzSW5wdXRUZXh0OiB1bmRlZmluZWR9KXtcclxuICAgICAgICB0aGlzLnZhbHVlID0gZGF0YS52YWx1ZTtcclxuICAgICAgICB0aGlzLnRleHRWYWx1ZSA9IGRhdGEudGV4dFZhbHVlID8gZGF0YS50ZXh0VmFsdWUudHJpbSgpIDogJyc7XHJcbiAgICAgICAgdGhpcy50ZXh0RmllbGQgPSBkYXRhLnRleHRGaWVsZDtcclxuICAgICAgICB0aGlzLmlzSW5wdXRUZXh0ID0gZGF0YS5pc0lucHV0VGV4dDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRUZXh0VmFsdWUodGFyZ2V0RmllbGQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgYXJncyA9IHRhcmdldEZpZWxkLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgY29uc3QgdGV4dEFyciA9IHRoaXMudmFsdWUubWFwKGl0ZW0gPT4gdGhpcy5nZXRQcm9wVmFsdWUoaXRlbSwgY2xvbmVEZWVwKGFyZ3MpKSk7XHJcbiAgICAgICAgcmV0dXJuIHRleHRBcnIgJiYgdGV4dEFyci5sZW5ndGggPyB0ZXh0QXJyLmpvaW4oJywnKTogJyc7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UHJvcFZhbHVlKGl0ZW06IGFueSwgYXJnczogQXJyYXk8c3RyaW5nPik6IGFueXtcclxuICAgICAgICBpZihhcmdzLmxlbmd0aCA+IDEpe1xyXG4gICAgICAgICAgICBjb25zdCBhcmcgPSBhcmdzLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgIGlmKGFyZyl7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbVthcmddID8gdGhpcy5nZXRQcm9wVmFsdWUoaXRlbVthcmddLCBhcmdzKSA6ICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpdGVtW2FyZ3NbMF1dO1xyXG4gICAgfVxyXG4gICAgZ2V0Q29udHJvbFR5cGUoKTogQ29udHJvbFR5cGUge1xyXG4gICAgICAgIHJldHVybiBDb250cm9sVHlwZS5JbnB1dEdyb3VwO1xyXG4gICAgfVxyXG5cclxuICAgIHNldE9yaWdpbmFsVmFsdWUodmFsdWU6IGFueSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldE9yaWdpbmFsVmFsdWUoKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCBhcmdzID0gdGhpcy50ZXh0RmllbGQuc3BsaXQoJy4nKTtcclxuICAgICAgICBjb25zdCB0ZXh0QXJyID0gdGhpcy52YWx1ZS5tYXAoaXRlbSA9PiB0aGlzLmdldFByb3BWYWx1ZShpdGVtLCBjbG9uZURlZXAoYXJncykpKTtcclxuICAgICAgICByZXR1cm4gdGV4dEFyciAmJiB0ZXh0QXJyLmxlbmd0aCA/IHRleHRBcnIuam9pbignLCcpOiAnJztcclxuICAgIH1cclxuXHJcbiAgICBjbGVhclZhbHVlKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSBbXTtcclxuICAgICAgICB0aGlzLnRleHRWYWx1ZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLnRleHRGaWVsZCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLmlzSW5wdXRUZXh0ID0gdW5kZWZpbmVkO1xyXG5cclxuICAgICAgICB0aGlzLmNsZWFyJC5lbWl0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNFbXB0eSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gIXRoaXMudGV4dFZhbHVlO1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=