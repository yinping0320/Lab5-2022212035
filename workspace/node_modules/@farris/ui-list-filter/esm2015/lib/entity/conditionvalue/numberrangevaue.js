/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlType } from "../controltype";
import { EventEmitter } from "@angular/core";
export class NumberRangeValue {
    /**
     * @param {?=} data
     */
    constructor(data = { startValue: '', endValue: '' }) {
        this.clear$ = new EventEmitter();
        this.startValue = data.startValue ? parseFloat(data.startValue) : null;
        this.endValue = data.endValue ? parseFloat(data.endValue) : null;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return (this.startValue == null && this.endValue == null);
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.NumberRange;
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.startValue = undefined;
        this.endValue = undefined;
        this.clear$.emit();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        throw new Error("Method not implemented.");
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return {
            begin: this.startValue,
            end: this.endValue
        };
    }
}
if (false) {
    /** @type {?} */
    NumberRangeValue.prototype.startValue;
    /** @type {?} */
    NumberRangeValue.prototype.endValue;
    /** @type {?} */
    NumberRangeValue.prototype.clear$;
}
export class NumberRangeValueConvertor {
    /**
     * @param {?} obj
     * @return {?}
     */
    convertToObject(obj) {
        /** @type {?} */
        let dropDownListValue = (/** @type {?} */ (obj));
        /** @type {?} */
        let jobj = new Object();
        jobj["startValue"] = dropDownListValue.startValue;
        jobj["endValue"] = dropDownListValue.endValue;
        return jobj;
    }
    /**
     * @param {?} jobj
     * @return {?}
     */
    initFromObject(jobj) {
        /** @type {?} */
        let numberRangeValue = new NumberRangeValue();
        if (!!(jobj["startValue"])) {
            numberRangeValue.startValue = (/** @type {?} */ (jobj["startValue"]));
        }
        if (!!(jobj["endValue"])) {
            numberRangeValue.endValue = (/** @type {?} */ (jobj["endValue"]));
        }
        return numberRangeValue;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVycmFuZ2V2YXVlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1saXN0LWZpbHRlci8iLCJzb3VyY2VzIjpbImxpYi9lbnRpdHkvY29uZGl0aW9udmFsdWUvbnVtYmVycmFuZ2V2YXVlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU3QyxNQUFNLE9BQU8sZ0JBQWdCOzs7O0lBT3pCLFlBQVksT0FBaUQsRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUU7UUFGN0YsV0FBTSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFHeEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDdkUsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDckUsQ0FBQzs7OztJQUdELE9BQU87UUFDSCxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsQ0FBQztJQUM5RCxDQUFDOzs7O0lBRUQsY0FBYztRQUNWLE9BQU8sV0FBVyxDQUFDLFdBQVcsQ0FBQztJQUNuQyxDQUFDOzs7O0lBRUQsVUFBVTtRQUNOLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO1FBQzVCLElBQUksQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDO1FBQzFCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDdkIsQ0FBQzs7Ozs7SUFDRCxnQkFBZ0IsQ0FBQyxLQUFVO1FBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUMvQyxDQUFDOzs7O0lBQ0QsZ0JBQWdCO1FBQ1osT0FBTztZQUNILEtBQUssRUFBRSxJQUFJLENBQUMsVUFBVTtZQUN0QixHQUFHLEVBQUUsSUFBSSxDQUFDLFFBQVE7U0FDckIsQ0FBQztJQUNOLENBQUM7Q0FFSjs7O0lBbENHLHNDQUFtQjs7SUFDbkIsb0NBQWlCOztJQUVqQixrQ0FBNEI7O0FBaUNoQyxNQUFNLE9BQU8seUJBQXlCOzs7OztJQUNsQyxlQUFlLENBQUMsR0FBVzs7WUFDbkIsaUJBQWlCLEdBQUcsbUJBQUEsR0FBRyxFQUFvQjs7WUFDM0MsSUFBSSxHQUFHLElBQUksTUFBTSxFQUFFO1FBQ3ZCLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxpQkFBaUIsQ0FBQyxVQUFVLENBQUM7UUFDbEQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLGlCQUFpQixDQUFDLFFBQVEsQ0FBQztRQUM5QyxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDOzs7OztJQUVELGNBQWMsQ0FBQyxJQUFZOztZQUNuQixnQkFBZ0IsR0FBRyxJQUFJLGdCQUFnQixFQUFFO1FBQzdDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUU7WUFDeEIsZ0JBQWdCLENBQUMsVUFBVSxHQUFHLG1CQUFBLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBVSxDQUFDO1NBQzlEO1FBQ0QsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRTtZQUN0QixnQkFBZ0IsQ0FBQyxRQUFRLEdBQUcsbUJBQUEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFVLENBQUM7U0FDMUQ7UUFDRCxPQUFPLGdCQUFnQixDQUFDO0lBQzVCLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElWYWx1ZSB9IGZyb20gXCIuL2l2YWx1ZVwiO1xyXG5pbXBvcnQgeyBDb250cm9sVHlwZSB9IGZyb20gXCIuLi9jb250cm9sdHlwZVwiO1xyXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIE51bWJlclJhbmdlVmFsdWUgaW1wbGVtZW50cyBJVmFsdWUge1xyXG5cclxuICAgIHN0YXJ0VmFsdWU6IG51bWJlcjtcclxuICAgIGVuZFZhbHVlOiBudW1iZXI7XHJcblxyXG4gICAgY2xlYXIkID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGRhdGE6IHsgc3RhcnRWYWx1ZTogc3RyaW5nLCBlbmRWYWx1ZTogc3RyaW5nIH0gPSB7IHN0YXJ0VmFsdWU6ICcnLCBlbmRWYWx1ZTogJycgfSkge1xyXG4gICAgICAgIHRoaXMuc3RhcnRWYWx1ZSA9IGRhdGEuc3RhcnRWYWx1ZSA/IHBhcnNlRmxvYXQoZGF0YS5zdGFydFZhbHVlKSA6IG51bGw7XHJcbiAgICAgICAgdGhpcy5lbmRWYWx1ZSA9IGRhdGEuZW5kVmFsdWUgPyBwYXJzZUZsb2F0KGRhdGEuZW5kVmFsdWUpIDogbnVsbDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgaXNFbXB0eSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuc3RhcnRWYWx1ZSA9PSBudWxsICYmIHRoaXMuZW5kVmFsdWUgPT0gbnVsbCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q29udHJvbFR5cGUoKTogQ29udHJvbFR5cGUge1xyXG4gICAgICAgIHJldHVybiBDb250cm9sVHlwZS5OdW1iZXJSYW5nZTtcclxuICAgIH1cclxuXHJcbiAgICBjbGVhclZhbHVlKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuc3RhcnRWYWx1ZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLmVuZFZhbHVlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuY2xlYXIkLmVtaXQoKTtcclxuICAgIH1cclxuICAgIHNldE9yaWdpbmFsVmFsdWUodmFsdWU6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgZ2V0T3JpZ2luYWxWYWx1ZSgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBiZWdpbjogdGhpcy5zdGFydFZhbHVlLFxyXG4gICAgICAgICAgICBlbmQ6IHRoaXMuZW5kVmFsdWVcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE51bWJlclJhbmdlVmFsdWVDb252ZXJ0b3Ige1xyXG4gICAgY29udmVydFRvT2JqZWN0KG9iajogSVZhbHVlKTogT2JqZWN0IHtcclxuICAgICAgICBsZXQgZHJvcERvd25MaXN0VmFsdWUgPSBvYmogYXMgTnVtYmVyUmFuZ2VWYWx1ZTtcclxuICAgICAgICBsZXQgam9iaiA9IG5ldyBPYmplY3QoKTtcclxuICAgICAgICBqb2JqW1wic3RhcnRWYWx1ZVwiXSA9IGRyb3BEb3duTGlzdFZhbHVlLnN0YXJ0VmFsdWU7XHJcbiAgICAgICAgam9ialtcImVuZFZhbHVlXCJdID0gZHJvcERvd25MaXN0VmFsdWUuZW5kVmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIGpvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgaW5pdEZyb21PYmplY3Qoam9iajogT2JqZWN0KTogTnVtYmVyUmFuZ2VWYWx1ZSB7XHJcbiAgICAgICAgbGV0IG51bWJlclJhbmdlVmFsdWUgPSBuZXcgTnVtYmVyUmFuZ2VWYWx1ZSgpO1xyXG4gICAgICAgIGlmICghIShqb2JqW1wic3RhcnRWYWx1ZVwiXSkpIHtcclxuICAgICAgICAgICAgbnVtYmVyUmFuZ2VWYWx1ZS5zdGFydFZhbHVlID0gam9ialtcInN0YXJ0VmFsdWVcIl0gYXMgbnVtYmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoISEoam9ialtcImVuZFZhbHVlXCJdKSkge1xyXG4gICAgICAgICAgICBudW1iZXJSYW5nZVZhbHVlLmVuZFZhbHVlID0gam9ialtcImVuZFZhbHVlXCJdIGFzIG51bWJlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bWJlclJhbmdlVmFsdWU7XHJcbiAgICB9XHJcbn0iXX0=