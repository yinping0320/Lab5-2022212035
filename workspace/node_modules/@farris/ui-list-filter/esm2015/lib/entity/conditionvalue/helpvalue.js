/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlType } from "../controltype";
import { cloneDeep } from 'lodash-es';
import { EventEmitter } from "@angular/core";
export class HelpValue {
    /**
     * @param {?=} data
     */
    constructor(data = { value: [], valueField: undefined, textValue: undefined }) {
        this.clear$ = new EventEmitter();
        if (data.hasOwnProperty('textValue')) { // 新结构，value是数组
            this.valueField = data.valueField;
            this.value = data.value;
            this.textValue = data.textValue;
        }
        else { // 旧结构，value是对象
            this.valueField = data.valueField;
            this.value = data.value ? [data.value] : [];
            this.textValue = 'help-text-value-null'; // 旧结构无textValue属性
        }
    }
    /**
     * @param {?} helpItem
     * @param {?} args
     * @return {?}
     */
    static getPropValue(helpItem, args) {
        if (args.length > 1) {
            /** @type {?} */
            const arg = args.shift();
            return helpItem[arg] ? this.getPropValue(helpItem[arg], args) : null;
        }
        return helpItem[args[0]];
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.value = [];
        this.valueField = undefined;
        this.textValue = undefined;
        this.clear$.emit();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        throw new Error('Method not implemented.');
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        /** @type {?} */
        const args = this.valueField.split('.');
        /** @type {?} */
        const valueArr = this.value.map((/**
         * @param {?} helpItem
         * @return {?}
         */
        helpItem => HelpValue.getPropValue(helpItem, cloneDeep(args))));
        return valueArr && valueArr.length ? valueArr.join(',') : '';
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.Help;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.valueField;
    }
    /**
     * @param {?} textField
     * @return {?}
     */
    getTextValue(textField) {
        /** @type {?} */
        const args = textField.split('.');
        /** @type {?} */
        const textArr = this.value.map((/**
         * @param {?} helpItem
         * @return {?}
         */
        helpItem => HelpValue.getPropValue(helpItem, cloneDeep(args))));
        return textArr && textArr.length ? textArr.join(',') : '';
    }
}
if (false) {
    /** @type {?} */
    HelpValue.prototype.valueField;
    /** @type {?} */
    HelpValue.prototype.value;
    /** @type {?} */
    HelpValue.prototype.textValue;
    /** @type {?} */
    HelpValue.prototype.clear$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscHZhbHVlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1saXN0LWZpbHRlci8iLCJzb3VyY2VzIjpbImxpYi9lbnRpdHkvY29uZGl0aW9udmFsdWUvaGVscHZhbHVlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN0QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTdDLE1BQU0sT0FBTyxTQUFTOzs7O0lBbUNsQixZQUFZLE9BSVIsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRTtRQWxDOUQsV0FBTSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFtQ3hCLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFDLGVBQWU7WUFDbEQsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1lBQ2xDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUN4QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7U0FDbkM7YUFBTSxFQUFDLGVBQWU7WUFDbkIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1lBQ2xDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUM1QyxJQUFJLENBQUMsU0FBUyxHQUFHLHNCQUFzQixDQUFDLENBQUMsa0JBQWtCO1NBQzlEO0lBRUwsQ0FBQzs7Ozs7O0lBM0NELE1BQU0sQ0FBQyxZQUFZLENBQUMsUUFBYSxFQUFFLElBQW1CO1FBQ2xELElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7O2tCQUNYLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ3hCLE9BQU8sUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1NBQ3hFO1FBQ0QsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0IsQ0FBQzs7OztJQUVELFVBQVU7UUFDTixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFJLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQztRQUM1QixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUUzQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3ZCLENBQUM7Ozs7O0lBQ0QsZ0JBQWdCLENBQUMsS0FBVTtRQUN2QixNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7SUFDL0MsQ0FBQzs7OztJQUNELGdCQUFnQjs7Y0FDTixJQUFJLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDOztjQUNqQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHOzs7O1FBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQztRQUM5RixPQUFPLFFBQVEsSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDakUsQ0FBQzs7OztJQUNELGNBQWM7UUFDVixPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUM7SUFDNUIsQ0FBQzs7OztJQW1CRCxPQUFPO1FBQ0gsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDNUIsQ0FBQzs7Ozs7SUFFRCxZQUFZLENBQUMsU0FBaUI7O2NBQ3BCLElBQUksR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQzs7Y0FDM0IsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRzs7OztRQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUM7UUFDN0YsT0FBTyxPQUFPLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzlELENBQUM7Q0FFSjs7O0lBM0RHLCtCQUFtQjs7SUFDbkIsMEJBQWE7O0lBQ2IsOEJBQWtCOztJQUNsQiwyQkFBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJVmFsdWUgfSBmcm9tIFwiLi9pdmFsdWVcIjtcclxuaW1wb3J0IHsgQ29udHJvbFR5cGUgfSBmcm9tIFwiLi4vY29udHJvbHR5cGVcIjtcclxuaW1wb3J0IHsgY2xvbmVEZWVwIH0gZnJvbSAnbG9kYXNoLWVzJztcclxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBIZWxwVmFsdWUgaW1wbGVtZW50cyBJVmFsdWUge1xyXG5cclxuICAgIHZhbHVlRmllbGQ6IHN0cmluZztcclxuICAgIHZhbHVlOiBhbnlbXTtcclxuICAgIHRleHRWYWx1ZTogc3RyaW5nO1xyXG4gICAgY2xlYXIkID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICAgIHN0YXRpYyBnZXRQcm9wVmFsdWUoaGVscEl0ZW06IGFueSwgYXJnczogQXJyYXk8c3RyaW5nPik6IGFueSB7XHJcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICBjb25zdCBhcmcgPSBhcmdzLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgIHJldHVybiBoZWxwSXRlbVthcmddID8gdGhpcy5nZXRQcm9wVmFsdWUoaGVscEl0ZW1bYXJnXSwgYXJncykgOiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaGVscEl0ZW1bYXJnc1swXV07XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJWYWx1ZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnZhbHVlID0gW107XHJcbiAgICAgICAgdGhpcy52YWx1ZUZpZWxkID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMudGV4dFZhbHVlID0gdW5kZWZpbmVkO1xyXG5cclxuICAgICAgICB0aGlzLmNsZWFyJC5lbWl0KCk7XHJcbiAgICB9XHJcbiAgICBzZXRPcmlnaW5hbFZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XHJcbiAgICB9XHJcbiAgICBnZXRPcmlnaW5hbFZhbHVlKCk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgYXJncyA9IHRoaXMudmFsdWVGaWVsZC5zcGxpdCgnLicpO1xyXG4gICAgICAgIGNvbnN0IHZhbHVlQXJyID0gdGhpcy52YWx1ZS5tYXAoaGVscEl0ZW0gPT4gSGVscFZhbHVlLmdldFByb3BWYWx1ZShoZWxwSXRlbSwgY2xvbmVEZWVwKGFyZ3MpKSk7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlQXJyICYmIHZhbHVlQXJyLmxlbmd0aCA/IHZhbHVlQXJyLmpvaW4oJywnKSA6ICcnO1xyXG4gICAgfVxyXG4gICAgZ2V0Q29udHJvbFR5cGUoKTogQ29udHJvbFR5cGUge1xyXG4gICAgICAgIHJldHVybiBDb250cm9sVHlwZS5IZWxwO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhOiB7XHJcbiAgICAgICAgdmFsdWU6IGFueSxcclxuICAgICAgICB2YWx1ZUZpZWxkOiBzdHJpbmcsXHJcbiAgICAgICAgdGV4dFZhbHVlOiBzdHJpbmc7XHJcbiAgICB9ID0geyB2YWx1ZTogW10sIHZhbHVlRmllbGQ6IHVuZGVmaW5lZCwgdGV4dFZhbHVlOiB1bmRlZmluZWQgfSkge1xyXG4gICAgICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KCd0ZXh0VmFsdWUnKSkgey8vIOaWsOe7k+aehO+8jHZhbHVl5piv5pWw57uEXHJcbiAgICAgICAgICAgIHRoaXMudmFsdWVGaWVsZCA9IGRhdGEudmFsdWVGaWVsZDtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IGRhdGEudmFsdWU7XHJcbiAgICAgICAgICAgIHRoaXMudGV4dFZhbHVlID0gZGF0YS50ZXh0VmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIHsvLyDml6fnu5PmnoTvvIx2YWx1ZeaYr+WvueixoVxyXG4gICAgICAgICAgICB0aGlzLnZhbHVlRmllbGQgPSBkYXRhLnZhbHVlRmllbGQ7XHJcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBkYXRhLnZhbHVlID8gW2RhdGEudmFsdWVdIDogW107XHJcbiAgICAgICAgICAgIHRoaXMudGV4dFZhbHVlID0gJ2hlbHAtdGV4dC12YWx1ZS1udWxsJzsgLy8g5pen57uT5p6E5pegdGV4dFZhbHVl5bGe5oCnXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuICAgIGlzRW1wdHkoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuICF0aGlzLnZhbHVlRmllbGQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VGV4dFZhbHVlKHRleHRGaWVsZDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCBhcmdzID0gdGV4dEZpZWxkLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgY29uc3QgdGV4dEFyciA9IHRoaXMudmFsdWUubWFwKGhlbHBJdGVtID0+IEhlbHBWYWx1ZS5nZXRQcm9wVmFsdWUoaGVscEl0ZW0sIGNsb25lRGVlcChhcmdzKSkpO1xyXG4gICAgICAgIHJldHVybiB0ZXh0QXJyICYmIHRleHRBcnIubGVuZ3RoID8gdGV4dEFyci5qb2luKCcsJykgOiAnJztcclxuICAgIH1cclxuXHJcbn1cclxuIl19