/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { TextHandler } from "./handlers/text.handler";
import { DateRangeHandler } from "./handlers/daterage.handler";
import { DropDownHandler } from "./handlers/dropdown.handler";
import { NumberRangeHandler } from "./handlers/numberrage.handler";
import { SmartHelpHandler } from "./handlers/smarthelp.handler";
import { ControlType } from '../entity/controltype';
import { SearchHandler } from './handlers/search.handler';
import { DateHandler } from './handlers/date.handler';
import { CheckboxGroupHandler } from './handlers/checkboxgroup.handler';
import { DateRangeTimeHandler } from './handlers/dateragetime.handler';
import { RadioHandler } from './handlers/radio.handler';
import { MonthRangeHandler } from './handlers/monthrage.handler';
import { YearRangeHandler } from './handlers/yearrage.handler';
import { MonthHandler } from './handlers/month.handler';
import { YearHandler } from './handlers/year.handler';
import { InputGroupHandler } from "./handlers/inputgroup.handler";
export class QueryConditionHandlerFactory {
    /**
     * @private
     */
    constructor() {
        this.queryConditionHandlerMapping = new Map();
        this.queryConditionHandlerMapping.set(ControlType.Text, new TextHandler());
        this.queryConditionHandlerMapping.set(ControlType.DateRange, new DateRangeHandler());
        this.queryConditionHandlerMapping.set(ControlType.DateRangeTime, new DateRangeTimeHandler());
        this.queryConditionHandlerMapping.set(ControlType.MonthRange, new MonthRangeHandler());
        this.queryConditionHandlerMapping.set(ControlType.YearRange, new YearRangeHandler());
        this.queryConditionHandlerMapping.set(ControlType.DropDown, new DropDownHandler());
        this.queryConditionHandlerMapping.set(ControlType.NumberRange, new NumberRangeHandler());
        this.queryConditionHandlerMapping.set(ControlType.Help, new SmartHelpHandler());
        this.queryConditionHandlerMapping.set(ControlType.Search, new SearchHandler());
        this.queryConditionHandlerMapping.set(ControlType.Date, new DateHandler());
        this.queryConditionHandlerMapping.set(ControlType.Month, new MonthHandler());
        this.queryConditionHandlerMapping.set(ControlType.Year, new YearHandler());
        this.queryConditionHandlerMapping.set(ControlType.CheckboxGroup, new CheckboxGroupHandler());
        this.queryConditionHandlerMapping.set(ControlType.Radio, new RadioHandler());
        this.queryConditionHandlerMapping.set(ControlType.InputGroup, new InputGroupHandler());
    }
    /**
     * @return {?}
     */
    static getInstance() {
        if (!QueryConditionHandlerFactory._instance) {
            QueryConditionHandlerFactory._instance = new QueryConditionHandlerFactory();
        }
        return QueryConditionHandlerFactory._instance;
    }
    /**
     * @param {?} controlType
     * @return {?}
     */
    getHandler(controlType) {
        return this.queryConditionHandlerMapping.get(controlType);
    }
}
QueryConditionHandlerFactory._instance = null;
if (false) {
    /**
     * @type {?}
     * @private
     */
    QueryConditionHandlerFactory._instance;
    /**
     * @type {?}
     * @private
     */
    QueryConditionHandlerFactory.prototype.queryConditionHandlerMapping;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnljb25kaXRpb24uaGFuZGxlci5mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1saXN0LWZpbHRlci8iLCJzb3VyY2VzIjpbImxpYi9zdWJtaXRoYW5kbGVycy9xdWVyeWNvbmRpdGlvbi5oYW5kbGVyLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDbkUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDaEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDdEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDeEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDdkUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFFbEUsTUFBTSxPQUFPLDRCQUE0Qjs7OztJQUlyQztRQURRLGlDQUE0QixHQUE2QyxJQUFJLEdBQUcsRUFBdUMsQ0FBQztRQUU1SCxJQUFJLENBQUMsNEJBQTRCLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQzNFLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxJQUFJLGdCQUFnQixFQUFFLENBQUMsQ0FBQztRQUNyRixJQUFJLENBQUMsNEJBQTRCLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsSUFBSSxvQkFBb0IsRUFBRSxDQUFDLENBQUM7UUFDN0YsSUFBSSxDQUFDLDRCQUE0QixDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLElBQUksaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZGLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxJQUFJLGdCQUFnQixFQUFFLENBQUMsQ0FBQztRQUVyRixJQUFJLENBQUMsNEJBQTRCLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ25GLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxJQUFJLGtCQUFrQixFQUFFLENBQUMsQ0FBQztRQUN6RixJQUFJLENBQUMsNEJBQTRCLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7UUFFaEYsSUFBSSxDQUFDLDRCQUE0QixDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLElBQUksYUFBYSxFQUFFLENBQUMsQ0FBQztRQUMvRSxJQUFJLENBQUMsNEJBQTRCLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQzNFLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxJQUFJLFlBQVksRUFBRSxDQUFDLENBQUM7UUFDN0UsSUFBSSxDQUFDLDRCQUE0QixDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLElBQUksV0FBVyxFQUFFLENBQUMsQ0FBQztRQUMzRSxJQUFJLENBQUMsNEJBQTRCLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsSUFBSSxvQkFBb0IsRUFBRSxDQUFDLENBQUM7UUFDN0YsSUFBSSxDQUFDLDRCQUE0QixDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLElBQUksWUFBWSxFQUFFLENBQUMsQ0FBQztRQUM3RSxJQUFJLENBQUMsNEJBQTRCLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsSUFBSSxpQkFBaUIsRUFBRSxDQUFDLENBQUM7SUFDM0YsQ0FBQzs7OztJQUNNLE1BQU0sQ0FBQyxXQUFXO1FBQ3JCLElBQUcsQ0FBQyw0QkFBNEIsQ0FBQyxTQUFTLEVBQUM7WUFDdkMsNEJBQTRCLENBQUMsU0FBUyxHQUFHLElBQUksNEJBQTRCLEVBQUUsQ0FBQztTQUMvRTtRQUNELE9BQU8sNEJBQTRCLENBQUMsU0FBUyxDQUFDO0lBQ2xELENBQUM7Ozs7O0lBRUQsVUFBVSxDQUFDLFdBQXdCO1FBQy9CLE9BQU8sSUFBSSxDQUFDLDRCQUE0QixDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUM5RCxDQUFDOztBQTlCYyxzQ0FBUyxHQUFpQyxJQUFJLENBQUM7Ozs7OztJQUE5RCx1Q0FBOEQ7Ozs7O0lBQzlELG9FQUFnSSIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5pbXBvcnQgeyBJUXVlcnlDb25kaXRpb25IYW5kbGVyIH0gZnJvbSBcIi4vaGFuZGxlcnMvaXF1ZXJ5Y29uZGl0aW9uLmhhbmRsZXJcIjtcclxuaW1wb3J0IHsgVGV4dEhhbmRsZXIgfSBmcm9tIFwiLi9oYW5kbGVycy90ZXh0LmhhbmRsZXJcIjtcclxuaW1wb3J0IHsgRGF0ZVJhbmdlSGFuZGxlciB9IGZyb20gXCIuL2hhbmRsZXJzL2RhdGVyYWdlLmhhbmRsZXJcIjtcclxuaW1wb3J0IHsgRHJvcERvd25IYW5kbGVyIH0gZnJvbSBcIi4vaGFuZGxlcnMvZHJvcGRvd24uaGFuZGxlclwiO1xyXG5pbXBvcnQgeyBOdW1iZXJSYW5nZUhhbmRsZXIgfSBmcm9tIFwiLi9oYW5kbGVycy9udW1iZXJyYWdlLmhhbmRsZXJcIjtcclxuaW1wb3J0IHsgU21hcnRIZWxwSGFuZGxlciB9IGZyb20gXCIuL2hhbmRsZXJzL3NtYXJ0aGVscC5oYW5kbGVyXCI7XHJcbmltcG9ydCB7IENvbnRyb2xUeXBlIH0gZnJvbSAnLi4vZW50aXR5L2NvbnRyb2x0eXBlJztcclxuaW1wb3J0IHsgU2VhcmNoSGFuZGxlciB9IGZyb20gJy4vaGFuZGxlcnMvc2VhcmNoLmhhbmRsZXInO1xyXG5pbXBvcnQgeyBEYXRlSGFuZGxlciB9IGZyb20gJy4vaGFuZGxlcnMvZGF0ZS5oYW5kbGVyJztcclxuaW1wb3J0IHsgQ2hlY2tib3hHcm91cEhhbmRsZXIgfSBmcm9tICcuL2hhbmRsZXJzL2NoZWNrYm94Z3JvdXAuaGFuZGxlcic7XHJcbmltcG9ydCB7IERhdGVSYW5nZVRpbWVIYW5kbGVyIH0gZnJvbSAnLi9oYW5kbGVycy9kYXRlcmFnZXRpbWUuaGFuZGxlcic7XHJcbmltcG9ydCB7IFJhZGlvSGFuZGxlciB9IGZyb20gJy4vaGFuZGxlcnMvcmFkaW8uaGFuZGxlcic7XHJcbmltcG9ydCB7IE1vbnRoUmFuZ2VIYW5kbGVyIH0gZnJvbSAnLi9oYW5kbGVycy9tb250aHJhZ2UuaGFuZGxlcic7XHJcbmltcG9ydCB7IFllYXJSYW5nZUhhbmRsZXIgfSBmcm9tICcuL2hhbmRsZXJzL3llYXJyYWdlLmhhbmRsZXInO1xyXG5pbXBvcnQgeyBNb250aEhhbmRsZXIgfSBmcm9tICcuL2hhbmRsZXJzL21vbnRoLmhhbmRsZXInO1xyXG5pbXBvcnQgeyBZZWFySGFuZGxlciB9IGZyb20gJy4vaGFuZGxlcnMveWVhci5oYW5kbGVyJztcclxuaW1wb3J0IHsgSW5wdXRHcm91cEhhbmRsZXIgfSBmcm9tIFwiLi9oYW5kbGVycy9pbnB1dGdyb3VwLmhhbmRsZXJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBRdWVyeUNvbmRpdGlvbkhhbmRsZXJGYWN0b3J5IHtcclxuXHJcbiAgICBwcml2YXRlIHN0YXRpYyBfaW5zdGFuY2U6IFF1ZXJ5Q29uZGl0aW9uSGFuZGxlckZhY3RvcnkgPSBudWxsO1xyXG4gICAgcHJpdmF0ZSBxdWVyeUNvbmRpdGlvbkhhbmRsZXJNYXBwaW5nOiBNYXA8Q29udHJvbFR5cGUsIElRdWVyeUNvbmRpdGlvbkhhbmRsZXI+ID0gbmV3IE1hcDxDb250cm9sVHlwZSwgSVF1ZXJ5Q29uZGl0aW9uSGFuZGxlcj4oKTtcclxuICAgIHByaXZhdGUgY29uc3RydWN0b3IoKXtcclxuICAgICAgICB0aGlzLnF1ZXJ5Q29uZGl0aW9uSGFuZGxlck1hcHBpbmcuc2V0KENvbnRyb2xUeXBlLlRleHQsIG5ldyBUZXh0SGFuZGxlcigpKTtcclxuICAgICAgICB0aGlzLnF1ZXJ5Q29uZGl0aW9uSGFuZGxlck1hcHBpbmcuc2V0KENvbnRyb2xUeXBlLkRhdGVSYW5nZSwgbmV3IERhdGVSYW5nZUhhbmRsZXIoKSk7XHJcbiAgICAgICAgdGhpcy5xdWVyeUNvbmRpdGlvbkhhbmRsZXJNYXBwaW5nLnNldChDb250cm9sVHlwZS5EYXRlUmFuZ2VUaW1lLCBuZXcgRGF0ZVJhbmdlVGltZUhhbmRsZXIoKSk7XHJcbiAgICAgICAgdGhpcy5xdWVyeUNvbmRpdGlvbkhhbmRsZXJNYXBwaW5nLnNldChDb250cm9sVHlwZS5Nb250aFJhbmdlLCBuZXcgTW9udGhSYW5nZUhhbmRsZXIoKSk7XHJcbiAgICAgICAgdGhpcy5xdWVyeUNvbmRpdGlvbkhhbmRsZXJNYXBwaW5nLnNldChDb250cm9sVHlwZS5ZZWFyUmFuZ2UsIG5ldyBZZWFyUmFuZ2VIYW5kbGVyKCkpO1xyXG5cclxuICAgICAgICB0aGlzLnF1ZXJ5Q29uZGl0aW9uSGFuZGxlck1hcHBpbmcuc2V0KENvbnRyb2xUeXBlLkRyb3BEb3duLCBuZXcgRHJvcERvd25IYW5kbGVyKCkpO1xyXG4gICAgICAgIHRoaXMucXVlcnlDb25kaXRpb25IYW5kbGVyTWFwcGluZy5zZXQoQ29udHJvbFR5cGUuTnVtYmVyUmFuZ2UsIG5ldyBOdW1iZXJSYW5nZUhhbmRsZXIoKSk7XHJcbiAgICAgICAgdGhpcy5xdWVyeUNvbmRpdGlvbkhhbmRsZXJNYXBwaW5nLnNldChDb250cm9sVHlwZS5IZWxwLCBuZXcgU21hcnRIZWxwSGFuZGxlcigpKTtcclxuXHJcbiAgICAgICAgdGhpcy5xdWVyeUNvbmRpdGlvbkhhbmRsZXJNYXBwaW5nLnNldChDb250cm9sVHlwZS5TZWFyY2gsIG5ldyBTZWFyY2hIYW5kbGVyKCkpO1xyXG4gICAgICAgIHRoaXMucXVlcnlDb25kaXRpb25IYW5kbGVyTWFwcGluZy5zZXQoQ29udHJvbFR5cGUuRGF0ZSwgbmV3IERhdGVIYW5kbGVyKCkpO1xyXG4gICAgICAgIHRoaXMucXVlcnlDb25kaXRpb25IYW5kbGVyTWFwcGluZy5zZXQoQ29udHJvbFR5cGUuTW9udGgsIG5ldyBNb250aEhhbmRsZXIoKSk7XHJcbiAgICAgICAgdGhpcy5xdWVyeUNvbmRpdGlvbkhhbmRsZXJNYXBwaW5nLnNldChDb250cm9sVHlwZS5ZZWFyLCBuZXcgWWVhckhhbmRsZXIoKSk7XHJcbiAgICAgICAgdGhpcy5xdWVyeUNvbmRpdGlvbkhhbmRsZXJNYXBwaW5nLnNldChDb250cm9sVHlwZS5DaGVja2JveEdyb3VwLCBuZXcgQ2hlY2tib3hHcm91cEhhbmRsZXIoKSk7XHJcbiAgICAgICAgdGhpcy5xdWVyeUNvbmRpdGlvbkhhbmRsZXJNYXBwaW5nLnNldChDb250cm9sVHlwZS5SYWRpbywgbmV3IFJhZGlvSGFuZGxlcigpKTtcclxuICAgICAgICB0aGlzLnF1ZXJ5Q29uZGl0aW9uSGFuZGxlck1hcHBpbmcuc2V0KENvbnRyb2xUeXBlLklucHV0R3JvdXAsIG5ldyBJbnB1dEdyb3VwSGFuZGxlcigpKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UoKXtcclxuICAgICAgICBpZighUXVlcnlDb25kaXRpb25IYW5kbGVyRmFjdG9yeS5faW5zdGFuY2Upe1xyXG4gICAgICAgICAgICBRdWVyeUNvbmRpdGlvbkhhbmRsZXJGYWN0b3J5Ll9pbnN0YW5jZSA9IG5ldyBRdWVyeUNvbmRpdGlvbkhhbmRsZXJGYWN0b3J5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBRdWVyeUNvbmRpdGlvbkhhbmRsZXJGYWN0b3J5Ll9pbnN0YW5jZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRIYW5kbGVyKGNvbnRyb2xUeXBlOiBDb250cm9sVHlwZSk6IElRdWVyeUNvbmRpdGlvbkhhbmRsZXJ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucXVlcnlDb25kaXRpb25IYW5kbGVyTWFwcGluZy5nZXQoY29udHJvbFR5cGUpO1xyXG4gICAgfVxyXG59Il19