/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CompareType } from '../enum/compare-type.enum';
import { ValueType } from '../enum/value-type.enum';
import { RelationType } from '../enum/relation-type.enum';
export class InputGroupHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const igv = ((/** @type {?} */ (qc.value)));
        /** @type {?} */
        const arr = [];
        if (igv.textValue === undefined || igv.textValue === null || igv.textValue.length == 0) {
            return [];
        }
        else if (igv.isInputText) {
            arr.push({
                'FilterField': qc.fieldCode,
                'Compare': CompareType.Like,
                'Value': igv.textValue,
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value
            });
            return arr;
        }
        else {
            igv.getOriginalValue().split(',').forEach((/**
             * @param {?} itemValue
             * @return {?}
             */
            itemValue => {
                itemValue && arr.push({
                    'FilterField': qc.fieldCode,
                    'Compare': CompareType.Equal,
                    'Value': itemValue,
                    'Relation': RelationType.Or,
                    'Expresstype': ValueType.Value
                });
            }));
            if (arr.length > 0) {
                arr[0]['Lbracket'] = '(';
                arr[arr.length - 1]['Rbracket'] = ')';
                arr[arr.length - 1]['Relation'] = RelationType.And;
                return arr;
            }
            else {
                return [];
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRncm91cC5oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1saXN0LWZpbHRlci8iLCJzb3VyY2VzIjpbImxpYi9zdWJtaXRoYW5kbGVycy9oYW5kbGVycy9pbnB1dGdyb3VwLmhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBSTFELE1BQU0sT0FBTyxpQkFBaUI7Ozs7O0lBQzFCLE9BQU8sQ0FBQyxFQUFrQjs7Y0FDaEIsR0FBRyxHQUFHLENBQUMsbUJBQUEsRUFBRSxDQUFDLEtBQUssRUFBbUIsQ0FBQzs7Y0FDbkMsR0FBRyxHQUFHLEVBQUU7UUFDZCxJQUFHLEdBQUcsQ0FBQyxTQUFTLEtBQUssU0FBUyxJQUFJLEdBQUcsQ0FBQyxTQUFTLEtBQUssSUFBSSxJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtZQUNuRixPQUFPLEVBQUUsQ0FBQztTQUNiO2FBQ0ksSUFBSSxHQUFHLENBQUMsV0FBVyxFQUFFO1lBQ3RCLEdBQUcsQ0FBQyxJQUFJLENBQUM7Z0JBQ0wsYUFBYSxFQUFFLEVBQUUsQ0FBQyxTQUFTO2dCQUMzQixTQUFTLEVBQUUsV0FBVyxDQUFDLElBQUk7Z0JBQzNCLE9BQU8sRUFBRSxHQUFHLENBQUMsU0FBUztnQkFDdEIsVUFBVSxFQUFFLFlBQVksQ0FBQyxHQUFHO2dCQUM1QixhQUFhLEVBQUUsU0FBUyxDQUFDLEtBQUs7YUFDakMsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxHQUFHLENBQUM7U0FDZDthQUNJO1lBQ0QsR0FBRyxDQUFDLGdCQUFnQixFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU87Ozs7WUFBQyxTQUFTLENBQUMsRUFBRTtnQkFDbEQsU0FBUyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUM7b0JBQ2xCLGFBQWEsRUFBRSxFQUFFLENBQUMsU0FBUztvQkFDM0IsU0FBUyxFQUFFLFdBQVcsQ0FBQyxLQUFLO29CQUM1QixPQUFPLEVBQUUsU0FBUztvQkFDbEIsVUFBVSxFQUFFLFlBQVksQ0FBQyxFQUFFO29CQUMzQixhQUFhLEVBQUUsU0FBUyxDQUFDLEtBQUs7aUJBQ2pDLENBQUMsQ0FBQztZQUNQLENBQUMsRUFBQyxDQUFDO1lBQ0gsSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDaEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztnQkFDekIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsR0FBRyxDQUFDO2dCQUN0QyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxZQUFZLENBQUMsR0FBRyxDQUFDO2dCQUNuRCxPQUFPLEdBQUcsQ0FBQzthQUNkO2lCQUFNO2dCQUNILE9BQU8sRUFBRSxDQUFDO2FBQ2I7U0FDSjtJQUNMLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElRdWVyeUNvbmRpdGlvbkhhbmRsZXIgfSBmcm9tIFwiLi9pcXVlcnljb25kaXRpb24uaGFuZGxlclwiO1xyXG5cclxuaW1wb3J0IHsgQ29tcGFyZVR5cGUgfSBmcm9tICcuLi9lbnVtL2NvbXBhcmUtdHlwZS5lbnVtJztcclxuaW1wb3J0IHsgVmFsdWVUeXBlIH0gZnJvbSAnLi4vZW51bS92YWx1ZS10eXBlLmVudW0nO1xyXG5pbXBvcnQgeyBSZWxhdGlvblR5cGUgfSBmcm9tICcuLi9lbnVtL3JlbGF0aW9uLXR5cGUuZW51bSc7XHJcbmltcG9ydCB7IFF1ZXJ5Q29uZGl0aW9uIH0gZnJvbSAnLi4vLi4vZW50aXR5L3F1ZXJ5Y29uZGl0aW9uJztcclxuaW1wb3J0IHsgSW5wdXRHcm91cFZhbHVlIH0gZnJvbSBcIi4uLy4uL2VudGl0eS9jb25kaXRpb252YWx1ZS9pbnB1dGdyb3VwXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgSW5wdXRHcm91cEhhbmRsZXIgaW1wbGVtZW50cyBJUXVlcnlDb25kaXRpb25IYW5kbGVyIHtcclxuICAgIGNvbnZlcnQocWM6IFF1ZXJ5Q29uZGl0aW9uKSB7XHJcbiAgICAgICAgY29uc3QgaWd2ID0gKHFjLnZhbHVlIGFzIElucHV0R3JvdXBWYWx1ZSk7XHJcbiAgICAgICAgY29uc3QgYXJyID0gW107XHJcbiAgICAgICAgaWYoaWd2LnRleHRWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8IGlndi50ZXh0VmFsdWUgPT09IG51bGwgfHwgaWd2LnRleHRWYWx1ZS5sZW5ndGggPT0gMCApe1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGlndi5pc0lucHV0VGV4dCkge1xyXG4gICAgICAgICAgICBhcnIucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAnRmlsdGVyRmllbGQnOiBxYy5maWVsZENvZGUsXHJcbiAgICAgICAgICAgICAgICAnQ29tcGFyZSc6IENvbXBhcmVUeXBlLkxpa2UsXHJcbiAgICAgICAgICAgICAgICAnVmFsdWUnOiBpZ3YudGV4dFZhbHVlLFxyXG4gICAgICAgICAgICAgICAgJ1JlbGF0aW9uJzogUmVsYXRpb25UeXBlLkFuZCxcclxuICAgICAgICAgICAgICAgICdFeHByZXNzdHlwZSc6IFZhbHVlVHlwZS5WYWx1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIGFycjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlndi5nZXRPcmlnaW5hbFZhbHVlKCkuc3BsaXQoJywnKS5mb3JFYWNoKGl0ZW1WYWx1ZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpdGVtVmFsdWUgJiYgYXJyLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICdGaWx0ZXJGaWVsZCc6IHFjLmZpZWxkQ29kZSxcclxuICAgICAgICAgICAgICAgICAgICAnQ29tcGFyZSc6IENvbXBhcmVUeXBlLkVxdWFsLFxyXG4gICAgICAgICAgICAgICAgICAgICdWYWx1ZSc6IGl0ZW1WYWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAnUmVsYXRpb24nOiBSZWxhdGlvblR5cGUuT3IsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0V4cHJlc3N0eXBlJzogVmFsdWVUeXBlLlZhbHVlXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmIChhcnIubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgYXJyWzBdWydMYnJhY2tldCddID0gJygnO1xyXG4gICAgICAgICAgICAgICAgYXJyW2Fyci5sZW5ndGggLSAxXVsnUmJyYWNrZXQnXSA9ICcpJztcclxuICAgICAgICAgICAgICAgIGFyclthcnIubGVuZ3RoIC0gMV1bJ1JlbGF0aW9uJ10gPSBSZWxhdGlvblR5cGUuQW5kO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFycjtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==