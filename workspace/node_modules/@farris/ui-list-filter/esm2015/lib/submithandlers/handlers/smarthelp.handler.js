/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CompareType } from '../enum/compare-type.enum';
import { ValueType } from '../enum/value-type.enum';
import { RelationType } from '../enum/relation-type.enum';
export class SmartHelpHandler {
    // convert(qc: QueryCondition) {
    //     const shv = (qc.value as HelpValue);
    //     if(Object.keys(shv).length === 0 || !shv.value || !shv.valueField){
    //         return [];
    //     }else{
    //         // return [{
    //         //     'FilterField' : qc.fieldCode,
    //         //     'Compare' : CompareType.Equal, //equal
    //         //     'Value' : (shv.value)[shv.valueField],
    //         //     'Relation' : RelationType.And,
    //         //     'Expresstype': ValueType.Value
    //         // }];
    //         return [{
    //             'FilterField' : qc.fieldCode,
    //             'Compare' : CompareType.Equal, //equal
    //             'Value' : HelpValue.getPropValues(shv.value, shv.valueField.split('.')),
    //             'Relation' : RelationType.And,
    //             'Expresstype': ValueType.Value
    //         }];
    //     }
    // }
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const shv = ((/** @type {?} */ (qc.value)));
        if (shv.value.length == 0 || !shv.valueField) {
            return [];
        }
        else {
            /** @type {?} */
            const arr = [];
            shv.getOriginalValue().split(',').forEach((/**
             * @param {?} id
             * @return {?}
             */
            id => {
                id && arr.push({
                    'FilterField': qc.fieldCode,
                    'Compare': CompareType.Equal,
                    'Value': id,
                    'Relation': RelationType.Or,
                    'Expresstype': ValueType.Value
                });
            }));
            if (arr.length > 0) {
                arr[0]['Lbracket'] = '(';
                arr[arr.length - 1]['Rbracket'] = ')';
                arr[arr.length - 1]['Relation'] = RelationType.And;
                return arr;
            }
            else {
                return [];
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21hcnRoZWxwLmhhbmRsZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWxpc3QtZmlsdGVyLyIsInNvdXJjZXMiOlsibGliL3N1Ym1pdGhhbmRsZXJzL2hhbmRsZXJzL3NtYXJ0aGVscC5oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUkxRCxNQUFNLE9BQU8sZ0JBQWdCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQXVCekIsT0FBTyxDQUFDLEVBQWtCOztjQUNoQixHQUFHLEdBQUcsQ0FBQyxtQkFBQSxFQUFFLENBQUMsS0FBSyxFQUFhLENBQUM7UUFDbkMsSUFBRyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFDO1lBQ3hDLE9BQU8sRUFBRSxDQUFDO1NBQ2I7YUFBSTs7a0JBQ0ssR0FBRyxHQUFHLEVBQUU7WUFDZCxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTzs7OztZQUFDLEVBQUUsQ0FBQyxFQUFFO2dCQUMzQyxFQUFFLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQztvQkFDWCxhQUFhLEVBQUcsRUFBRSxDQUFDLFNBQVM7b0JBQzVCLFNBQVMsRUFBRyxXQUFXLENBQUMsS0FBSztvQkFDN0IsT0FBTyxFQUFHLEVBQUU7b0JBQ1osVUFBVSxFQUFHLFlBQVksQ0FBQyxFQUFFO29CQUM1QixhQUFhLEVBQUMsU0FBUyxDQUFDLEtBQUs7aUJBQ2hDLENBQUMsQ0FBQztZQUNQLENBQUMsRUFBQyxDQUFDO1lBQ0gsSUFBRyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBQztnQkFDZCxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsR0FBRyxDQUFDO2dCQUN6QixHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxHQUFHLENBQUM7Z0JBQ3JDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUM7Z0JBQ2xELE9BQU8sR0FBRyxDQUFDO2FBQ2Q7aUJBQUk7Z0JBQ0QsT0FBTyxFQUFFLENBQUM7YUFDYjtTQUNKO0lBQ0wsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVF1ZXJ5Q29uZGl0aW9uSGFuZGxlciB9IGZyb20gXCIuL2lxdWVyeWNvbmRpdGlvbi5oYW5kbGVyXCI7XHJcblxyXG5pbXBvcnQgeyBDb21wYXJlVHlwZSB9IGZyb20gJy4uL2VudW0vY29tcGFyZS10eXBlLmVudW0nO1xyXG5pbXBvcnQgeyBWYWx1ZVR5cGUgfSBmcm9tICcuLi9lbnVtL3ZhbHVlLXR5cGUuZW51bSc7XHJcbmltcG9ydCB7IFJlbGF0aW9uVHlwZSB9IGZyb20gJy4uL2VudW0vcmVsYXRpb24tdHlwZS5lbnVtJztcclxuaW1wb3J0IHsgUXVlcnlDb25kaXRpb24gfSBmcm9tICcuLi8uLi9lbnRpdHkvcXVlcnljb25kaXRpb24nO1xyXG5pbXBvcnQgeyBIZWxwVmFsdWUgfSBmcm9tICcuLi8uLi9lbnRpdHkvY29uZGl0aW9udmFsdWUvaGVscHZhbHVlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBTbWFydEhlbHBIYW5kbGVyIGltcGxlbWVudHMgSVF1ZXJ5Q29uZGl0aW9uSGFuZGxlcntcclxuICAgIC8vIGNvbnZlcnQocWM6IFF1ZXJ5Q29uZGl0aW9uKSB7XHJcbiAgICAvLyAgICAgY29uc3Qgc2h2ID0gKHFjLnZhbHVlIGFzIEhlbHBWYWx1ZSk7XHJcbiAgICAvLyAgICAgaWYoT2JqZWN0LmtleXMoc2h2KS5sZW5ndGggPT09IDAgfHwgIXNodi52YWx1ZSB8fCAhc2h2LnZhbHVlRmllbGQpe1xyXG4gICAgLy8gICAgICAgICByZXR1cm4gW107XHJcbiAgICAvLyAgICAgfWVsc2V7XHJcbiAgICAvLyAgICAgICAgIC8vIHJldHVybiBbe1xyXG4gICAgLy8gICAgICAgICAvLyAgICAgJ0ZpbHRlckZpZWxkJyA6IHFjLmZpZWxkQ29kZSxcclxuICAgIC8vICAgICAgICAgLy8gICAgICdDb21wYXJlJyA6IENvbXBhcmVUeXBlLkVxdWFsLCAvL2VxdWFsXHJcbiAgICAvLyAgICAgICAgIC8vICAgICAnVmFsdWUnIDogKHNodi52YWx1ZSlbc2h2LnZhbHVlRmllbGRdLFxyXG4gICAgLy8gICAgICAgICAvLyAgICAgJ1JlbGF0aW9uJyA6IFJlbGF0aW9uVHlwZS5BbmQsXHJcbiAgICAvLyAgICAgICAgIC8vICAgICAnRXhwcmVzc3R5cGUnOiBWYWx1ZVR5cGUuVmFsdWVcclxuICAgIC8vICAgICAgICAgLy8gfV07XHJcbiAgICAvLyAgICAgICAgIHJldHVybiBbe1xyXG4gICAgLy8gICAgICAgICAgICAgJ0ZpbHRlckZpZWxkJyA6IHFjLmZpZWxkQ29kZSxcclxuICAgIC8vICAgICAgICAgICAgICdDb21wYXJlJyA6IENvbXBhcmVUeXBlLkVxdWFsLCAvL2VxdWFsXHJcbiAgICAvLyAgICAgICAgICAgICAnVmFsdWUnIDogSGVscFZhbHVlLmdldFByb3BWYWx1ZXMoc2h2LnZhbHVlLCBzaHYudmFsdWVGaWVsZC5zcGxpdCgnLicpKSxcclxuICAgIC8vICAgICAgICAgICAgICdSZWxhdGlvbicgOiBSZWxhdGlvblR5cGUuQW5kLFxyXG4gICAgLy8gICAgICAgICAgICAgJ0V4cHJlc3N0eXBlJzogVmFsdWVUeXBlLlZhbHVlXHJcbiAgICAvLyAgICAgICAgIH1dO1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vIH1cclxuXHJcbiAgICBjb252ZXJ0KHFjOiBRdWVyeUNvbmRpdGlvbikge1xyXG4gICAgICAgIGNvbnN0IHNodiA9IChxYy52YWx1ZSBhcyBIZWxwVmFsdWUpO1xyXG4gICAgICAgIGlmKHNodi52YWx1ZS5sZW5ndGggPT0gMCB8fCAhc2h2LnZhbHVlRmllbGQpe1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgIGNvbnN0IGFyciA9IFtdO1xyXG4gICAgICAgICAgICBzaHYuZ2V0T3JpZ2luYWxWYWx1ZSgpLnNwbGl0KCcsJykuZm9yRWFjaChpZCA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZCAmJiBhcnIucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgJ0ZpbHRlckZpZWxkJyA6IHFjLmZpZWxkQ29kZSxcclxuICAgICAgICAgICAgICAgICAgICAnQ29tcGFyZScgOiBDb21wYXJlVHlwZS5FcXVhbCxcclxuICAgICAgICAgICAgICAgICAgICAnVmFsdWUnIDogaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1JlbGF0aW9uJyA6IFJlbGF0aW9uVHlwZS5PcixcclxuICAgICAgICAgICAgICAgICAgICAnRXhwcmVzc3R5cGUnOlZhbHVlVHlwZS5WYWx1ZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZihhcnIubGVuZ3RoID4gMCl7XHJcbiAgICAgICAgICAgICAgICBhcnJbMF1bJ0xicmFja2V0J10gPSAnKCc7XHJcbiAgICAgICAgICAgICAgICBhcnJbYXJyLmxlbmd0aCAtMV1bJ1JicmFja2V0J10gPSAnKSc7XHJcbiAgICAgICAgICAgICAgICBhcnJbYXJyLmxlbmd0aCAtMV1bJ1JlbGF0aW9uJ10gPSBSZWxhdGlvblR5cGUuQW5kO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFycjtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0=