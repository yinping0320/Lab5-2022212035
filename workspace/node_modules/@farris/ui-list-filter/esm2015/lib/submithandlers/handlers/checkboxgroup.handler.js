/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CompareType } from '../enum/compare-type.enum';
import { ValueType } from '../enum/value-type.enum';
import { RelationType } from '../enum/relation-type.enum';
export class CheckboxGroupHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const cbgv = ((/** @type {?} */ (qc.value)));
        if (Object.keys(cbgv).length === 0 || Object.keys(cbgv.value).length === 0)
            return [];
        /** @type {?} */
        let CheckboxArr = [];
        if (cbgv.value.length === 1) {
            return [{
                    'FilterField': qc.fieldCode,
                    'Compare': CompareType.Equal,
                    'Value': (cbgv.value[0]),
                    'Relation': RelationType.And,
                    'Expresstype': ValueType.Value
                }];
        }
        cbgv.value.forEach((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            CheckboxArr.push({
                'FilterField': qc.fieldCode,
                'Compare': CompareType.Equal,
                'Value': value,
                'Relation': RelationType.Or,
                'Expresstype': ValueType.Value
            });
        }));
        CheckboxArr[0]['Lbracket'] = '(';
        CheckboxArr[CheckboxArr.length - 1]['Rbracket'] = ')';
        CheckboxArr[CheckboxArr.length - 1]['Relation'] = RelationType.And;
        return CheckboxArr;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3hncm91cC5oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1saXN0LWZpbHRlci8iLCJzb3VyY2VzIjpbImxpYi9zdWJtaXRoYW5kbGVycy9oYW5kbGVycy9jaGVja2JveGdyb3VwLmhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBSzFELE1BQU0sT0FBTyxvQkFBb0I7Ozs7O0lBQzdCLE9BQU8sQ0FBQyxFQUFrQjs7Y0FDaEIsSUFBSSxHQUFHLENBQUMsbUJBQUEsRUFBRSxDQUFDLEtBQUssRUFBc0IsQ0FBQztRQUM3QyxJQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQztZQUNyRSxPQUFPLEVBQUUsQ0FBQzs7WUFDVixXQUFXLEdBQUcsRUFBRTtRQUNwQixJQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBQztZQUN2QixPQUFPLENBQUM7b0JBQ0osYUFBYSxFQUFHLEVBQUUsQ0FBQyxTQUFTO29CQUM1QixTQUFTLEVBQUcsV0FBVyxDQUFDLEtBQUs7b0JBQzdCLE9BQU8sRUFBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3pCLFVBQVUsRUFBRyxZQUFZLENBQUMsR0FBRztvQkFDN0IsYUFBYSxFQUFFLFNBQVMsQ0FBQyxLQUFLO2lCQUNqQyxDQUFDLENBQUE7U0FDTDtRQUNELElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTzs7OztRQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3ZCLFdBQVcsQ0FBQyxJQUFJLENBQUM7Z0JBQ2IsYUFBYSxFQUFHLEVBQUUsQ0FBQyxTQUFTO2dCQUM1QixTQUFTLEVBQUcsV0FBVyxDQUFDLEtBQUs7Z0JBQzdCLE9BQU8sRUFBRyxLQUFLO2dCQUNmLFVBQVUsRUFBRyxZQUFZLENBQUMsRUFBRTtnQkFDNUIsYUFBYSxFQUFFLFNBQVMsQ0FBQyxLQUFLO2FBQ2pDLENBQUMsQ0FBQTtRQUNOLENBQUMsRUFBQyxDQUFDO1FBQ0gsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUNqQyxXQUFXLENBQUMsV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDdEQsV0FBVyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEdBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsWUFBWSxDQUFDLEdBQUcsQ0FBQztRQUNsRSxPQUFPLFdBQVcsQ0FBQztJQUN2QixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJUXVlcnlDb25kaXRpb25IYW5kbGVyIH0gZnJvbSBcIi4vaXF1ZXJ5Y29uZGl0aW9uLmhhbmRsZXJcIjtcclxuXHJcbmltcG9ydCB7IENvbXBhcmVUeXBlIH0gZnJvbSAnLi4vZW51bS9jb21wYXJlLXR5cGUuZW51bSc7XHJcbmltcG9ydCB7IFZhbHVlVHlwZSB9IGZyb20gJy4uL2VudW0vdmFsdWUtdHlwZS5lbnVtJztcclxuaW1wb3J0IHsgUmVsYXRpb25UeXBlIH0gZnJvbSAnLi4vZW51bS9yZWxhdGlvbi10eXBlLmVudW0nO1xyXG5pbXBvcnQgeyBRdWVyeUNvbmRpdGlvbiB9IGZyb20gJy4uLy4uL2VudGl0eS9xdWVyeWNvbmRpdGlvbic7XHJcbmltcG9ydCB7IENoZWNrYm94R3JvdXBWYWx1ZSB9IGZyb20gJy4uLy4uL2VudGl0eS9jb25kaXRpb252YWx1ZS9jaGVja2JveGdyb3VwdmFsdWUnO1xyXG5pbXBvcnQgeyBDaGVja2JveElFbnVtVmFsdWUgfSBmcm9tICcuLi8uLi9lbnRpdHkvY29udHJvbHR5cGUvY2hlY2tib3gvaWVudW12YWx1ZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgQ2hlY2tib3hHcm91cEhhbmRsZXIgaW1wbGVtZW50cyBJUXVlcnlDb25kaXRpb25IYW5kbGVye1xyXG4gICAgY29udmVydChxYzogUXVlcnlDb25kaXRpb24pIHtcclxuICAgICAgICBjb25zdCBjYmd2ID0gKHFjLnZhbHVlIGFzIENoZWNrYm94R3JvdXBWYWx1ZSk7XHJcbiAgICAgICAgaWYoT2JqZWN0LmtleXMoY2JndikubGVuZ3RoID09PSAwIHx8IE9iamVjdC5rZXlzKGNiZ3YudmFsdWUpLmxlbmd0aCA9PT0gMClcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIGxldCBDaGVja2JveEFyciA9IFtdO1xyXG4gICAgICAgIGlmKGNiZ3YudmFsdWUubGVuZ3RoID09PSAxKXtcclxuICAgICAgICAgICAgcmV0dXJuIFt7XHJcbiAgICAgICAgICAgICAgICAnRmlsdGVyRmllbGQnIDogcWMuZmllbGRDb2RlLFxyXG4gICAgICAgICAgICAgICAgJ0NvbXBhcmUnIDogQ29tcGFyZVR5cGUuRXF1YWwsXHJcbiAgICAgICAgICAgICAgICAnVmFsdWUnIDogKGNiZ3YudmFsdWVbMF0pLFxyXG4gICAgICAgICAgICAgICAgJ1JlbGF0aW9uJyA6IFJlbGF0aW9uVHlwZS5BbmQsXHJcbiAgICAgICAgICAgICAgICAnRXhwcmVzc3R5cGUnOiBWYWx1ZVR5cGUuVmFsdWVcclxuICAgICAgICAgICAgfV1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2Jndi52YWx1ZS5mb3JFYWNoKHZhbHVlID0+IHtcclxuICAgICAgICAgICAgQ2hlY2tib3hBcnIucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAnRmlsdGVyRmllbGQnIDogcWMuZmllbGRDb2RlLFxyXG4gICAgICAgICAgICAgICAgJ0NvbXBhcmUnIDogQ29tcGFyZVR5cGUuRXF1YWwsXHJcbiAgICAgICAgICAgICAgICAnVmFsdWUnIDogdmFsdWUsXHJcbiAgICAgICAgICAgICAgICAnUmVsYXRpb24nIDogUmVsYXRpb25UeXBlLk9yLFxyXG4gICAgICAgICAgICAgICAgJ0V4cHJlc3N0eXBlJzogVmFsdWVUeXBlLlZhbHVlXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgQ2hlY2tib3hBcnJbMF1bJ0xicmFja2V0J10gPSAnKCc7XHJcbiAgICAgICAgQ2hlY2tib3hBcnJbQ2hlY2tib3hBcnIubGVuZ3RoIC0gMV1bJ1JicmFja2V0J10gPSAnKSc7XHJcbiAgICAgICAgQ2hlY2tib3hBcnJbQ2hlY2tib3hBcnIubGVuZ3RoIC0xXVsnUmVsYXRpb24nXSA9IFJlbGF0aW9uVHlwZS5BbmQ7XHJcbiAgICAgICAgcmV0dXJuIENoZWNrYm94QXJyO1xyXG4gICAgfVxyXG59Il19