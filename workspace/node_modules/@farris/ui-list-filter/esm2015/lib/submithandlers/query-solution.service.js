/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { QueryConditionHandlerFactory } from './querycondition.handler.factory';
// import { FrameContext } from '@farris/devkit';
// import { IQuerySolutionHandler } from './IQuerySolutionHandler';
// import { FrameworkSessionService } from '@farris/bef';
export class QuerySolutionService {
    constructor() { }
    // private frameContext: FrameContext,
    // private frameworkSessionService: FrameworkSessionService
    // getUserSessionId(): string {
    //     return this.frameworkSessionService.getUserSessionId();
    // }
    /**
     * @param {?} params
     * @return {?}
     */
    setFilterConditions(params) {
        /** @type {?} */
        let queryConditionHandler;
        /** @type {?} */
        const filterConditionList = [];
        params.forEach((/**
         * @param {?} qc
         * @return {?}
         */
        qc => {
            queryConditionHandler = QueryConditionHandlerFactory.getInstance().getHandler(qc.control.getControlType());
            filterConditionList.push(...queryConditionHandler.convert(qc));
        }));
        // 设置到NgCommand params.filter属性上：{UISTATE~/root-component/filterConditionList}
        // this.frameContext.uiState['filterConditionList'] = JSON.stringify(filterConditionList);
        // return JSON.stringify(filterConditionList);
        return filterConditionList;
    }
}
QuerySolutionService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
QuerySolutionService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnktc29sdXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktbGlzdC1maWx0ZXIvIiwic291cmNlcyI6WyJsaWIvc3VibWl0aGFuZGxlcnMvcXVlcnktc29sdXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQzs7OztBQVFoRixNQUFNLE9BQU8sb0JBQW9CO0lBRTdCLGdCQUFlLENBQUM7Ozs7Ozs7Ozs7SUFRVCxtQkFBbUIsQ0FBQyxNQUE2Qjs7WUFDaEQscUJBQTZDOztjQUMzQyxtQkFBbUIsR0FBRyxFQUFFO1FBQzlCLE1BQU0sQ0FBQyxPQUFPOzs7O1FBQUMsRUFBRSxDQUFDLEVBQUU7WUFDaEIscUJBQXFCLEdBQUcsNEJBQTRCLENBQUMsV0FBVyxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQztZQUMzRyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNuRSxDQUFDLEVBQUMsQ0FBQztRQUNILDhFQUE4RTtRQUM5RSwwRkFBMEY7UUFDMUYsOENBQThDO1FBQzlDLE9BQU8sbUJBQW1CLENBQUM7SUFDL0IsQ0FBQzs7O1lBdEJKLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IElRdWVyeUNvbmRpdGlvbkhhbmRsZXIgfSBmcm9tICcuL2hhbmRsZXJzL2lxdWVyeWNvbmRpdGlvbi5oYW5kbGVyJztcclxuaW1wb3J0IHsgUXVlcnlDb25kaXRpb25IYW5kbGVyRmFjdG9yeSB9IGZyb20gJy4vcXVlcnljb25kaXRpb24uaGFuZGxlci5mYWN0b3J5JztcclxuaW1wb3J0IHsgUXVlcnlDb25kaXRpb24gfSBmcm9tICcuLi9lbnRpdHkvcXVlcnljb25kaXRpb24nO1xyXG4vLyBpbXBvcnQgeyBGcmFtZUNvbnRleHQgfSBmcm9tICdAZmFycmlzL2RldmtpdCc7XHJcbi8vIGltcG9ydCB7IElRdWVyeVNvbHV0aW9uSGFuZGxlciB9IGZyb20gJy4vSVF1ZXJ5U29sdXRpb25IYW5kbGVyJztcclxuLy8gaW1wb3J0IHsgRnJhbWV3b3JrU2Vzc2lvblNlcnZpY2UgfSBmcm9tICdAZmFycmlzL2JlZic7XHJcblxyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgUXVlcnlTb2x1dGlvblNlcnZpY2Uge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge31cclxuXHJcbiAgICAvLyBwcml2YXRlIGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0LFxyXG4gICAgICAgIC8vIHByaXZhdGUgZnJhbWV3b3JrU2Vzc2lvblNlcnZpY2U6IEZyYW1ld29ya1Nlc3Npb25TZXJ2aWNlXHJcbiAgICAvLyBnZXRVc2VyU2Vzc2lvbklkKCk6IHN0cmluZyB7XHJcbiAgICAvLyAgICAgcmV0dXJuIHRoaXMuZnJhbWV3b3JrU2Vzc2lvblNlcnZpY2UuZ2V0VXNlclNlc3Npb25JZCgpO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIHB1YmxpYyBzZXRGaWx0ZXJDb25kaXRpb25zKHBhcmFtczogQXJyYXk8UXVlcnlDb25kaXRpb24+KSB7XHJcbiAgICAgICAgbGV0IHF1ZXJ5Q29uZGl0aW9uSGFuZGxlcjogSVF1ZXJ5Q29uZGl0aW9uSGFuZGxlcjtcclxuICAgICAgICBjb25zdCBmaWx0ZXJDb25kaXRpb25MaXN0ID0gW107XHJcbiAgICAgICAgcGFyYW1zLmZvckVhY2gocWMgPT4ge1xyXG4gICAgICAgICAgICBxdWVyeUNvbmRpdGlvbkhhbmRsZXIgPSBRdWVyeUNvbmRpdGlvbkhhbmRsZXJGYWN0b3J5LmdldEluc3RhbmNlKCkuZ2V0SGFuZGxlcihxYy5jb250cm9sLmdldENvbnRyb2xUeXBlKCkpO1xyXG4gICAgICAgICAgICBmaWx0ZXJDb25kaXRpb25MaXN0LnB1c2goLi4ucXVlcnlDb25kaXRpb25IYW5kbGVyLmNvbnZlcnQocWMpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyDorr7nva7liLBOZ0NvbW1hbmQgcGFyYW1zLmZpbHRlcuWxnuaAp+S4iu+8mntVSVNUQVRFfi9yb290LWNvbXBvbmVudC9maWx0ZXJDb25kaXRpb25MaXN0fVxyXG4gICAgICAgIC8vIHRoaXMuZnJhbWVDb250ZXh0LnVpU3RhdGVbJ2ZpbHRlckNvbmRpdGlvbkxpc3QnXSA9IEpTT04uc3RyaW5naWZ5KGZpbHRlckNvbmRpdGlvbkxpc3QpO1xyXG4gICAgICAgIC8vIHJldHVybiBKU09OLnN0cmluZ2lmeShmaWx0ZXJDb25kaXRpb25MaXN0KTtcclxuICAgICAgICByZXR1cm4gZmlsdGVyQ29uZGl0aW9uTGlzdDtcclxuICAgIH1cclxuXHJcbn1cclxuIl19