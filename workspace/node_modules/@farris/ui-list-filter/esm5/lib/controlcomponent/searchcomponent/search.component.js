/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, Output, EventEmitter } from '@angular/core';
import { SolutionService } from '../../service/solution.service';
var SearchComponent = /** @class */ (function () {
    function SearchComponent(solutionService) {
        this.solutionService = solutionService;
        this.searchHandle = new EventEmitter();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
        this.groupIcon = '<span class="k-icon k-i-search"></span>';
    }
    Object.defineProperty(SearchComponent.prototype, "isExtend", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.extend && this.autoLabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchComponent.prototype, "hidenLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.showlabel;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SearchComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.item) {
            /** @type {?} */
            var type = Object.prototype.toString.call(this.item.placeHolder);
            if (type == '[object Undefined]') {
                if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {
                    this.placeholder = this.item.control.placeholder;
                }
            }
            else {
                this.placeholder = this.item.placeHolder;
            }
        }
        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
            this.extend = this.item.control.isExtend;
            if (!this.extend) {
                this.showlabel = this.item.control.showLabel;
            }
        }
        this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    SearchComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
    };
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    SearchComponent.prototype.getConditionItemTitle = 
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return this.solutionService.getConditionItemTitle(field);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SearchComponent.prototype.onSearch = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit($event);
    };
    SearchComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-filter-search',
                    template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <input-group [groupText]=\"groupIcon\" [readonly]=\"disabled\" [(ngModel)]=\"item.value.value\" \r\n    (clear)=\"onSearch($event)\" (enterHandle)=\"onSearch($event)\" \r\n    (clickHandle)=\"onSearch($event)\"  [placeholder]=\"placeholder\"></input-group>\r\n</div>"
                }] }
    ];
    /** @nocollapse */
    SearchComponent.ctorParameters = function () { return [
        { type: SolutionService }
    ]; };
    SearchComponent.propDecorators = {
        item: [{ type: Input }],
        autoLabel: [{ type: Input }],
        disabled: [{ type: Input }],
        searchHandle: [{ type: Output, args: ['searchHandle',] }],
        isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
        hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }]
    };
    return SearchComponent;
}());
export { SearchComponent };
if (false) {
    /**
     * QueryCondition类型
     * @type {?}
     */
    SearchComponent.prototype.item;
    /** @type {?} */
    SearchComponent.prototype.autoLabel;
    /** @type {?} */
    SearchComponent.prototype.disabled;
    /** @type {?} */
    SearchComponent.prototype.searchHandle;
    /**
     * 判断是否是在扩展区域展示
     * @type {?}
     */
    SearchComponent.prototype.extend;
    /**
     * 判断是否显示label
     * @type {?}
     */
    SearchComponent.prototype.showlabel;
    /** @type {?} */
    SearchComponent.prototype.placeholder;
    /** @type {?} */
    SearchComponent.prototype.groupIcon;
    /**
     * @type {?}
     * @private
     */
    SearchComponent.prototype.solutionService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktbGlzdC1maWx0ZXIvIiwic291cmNlcyI6WyJsaWIvY29udHJvbGNvbXBvbmVudC9zZWFyY2hjb21wb25lbnQvc2VhcmNoLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQXFCLFdBQVcsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFnQixNQUFNLGVBQWUsQ0FBQztBQUVySCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFakU7SUFpQ0kseUJBQW9CLGVBQStCO1FBQS9CLG9CQUFlLEdBQWYsZUFBZSxDQUFnQjtRQXBCM0IsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDOzs7O1FBRzFELFdBQU0sR0FBVyxLQUFLLENBQUM7Ozs7UUFFdkIsY0FBUyxHQUFXLElBQUksQ0FBQztRQWF6QixjQUFTLEdBQUcseUNBQXlDLENBQUM7SUFFRCxDQUFDO0lBWnRELHNCQUNJLHFDQUFROzs7O1FBRFo7WUFFSSxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQzFDLENBQUM7OztPQUFBO0lBRUQsc0JBQ0ksdUNBQVU7Ozs7UUFEZDtZQUVJLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQzNCLENBQUM7OztPQUFBOzs7O0lBTUQsa0NBQVE7OztJQUFSO1FBQ0ksSUFBRyxJQUFJLENBQUMsSUFBSSxFQUFDOztnQkFDSCxJQUFJLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO1lBQ2xFLElBQUcsSUFBSSxJQUFJLG9CQUFvQixFQUFDO2dCQUM1QixJQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsRUFBQztvQkFDcEUsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUM7aUJBQ3BEO2FBQ0o7aUJBQ0c7Z0JBQ0EsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQzthQUM1QztTQUNKO1FBQ0QsSUFBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsRUFBQztZQUM5RSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQztZQUN6QyxJQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBQztnQkFDWixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQzthQUNoRDtTQUNKO1FBRUQsSUFBSSxDQUFDLGVBQWUsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM1RSxDQUFDOzs7OztJQUVELHFDQUFXOzs7O0lBQVgsVUFBWSxPQUFzQjtJQUVsQyxDQUFDO0lBRUQsbUVBQW1FO0lBQ25FLDRFQUE0RTtJQUM1RSxJQUFJOzs7Ozs7OztJQUVKLCtDQUFxQjs7Ozs7Ozs7SUFBckIsVUFBc0IsS0FBb0I7UUFDdEMsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdELENBQUM7Ozs7O0lBRUQsa0NBQVE7Ozs7SUFBUixVQUFTLE1BQU07UUFDWCxJQUFHLElBQUksQ0FBQyxRQUFRLEVBQUM7WUFBQyxPQUFPO1NBQUM7UUFDMUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbkMsQ0FBQzs7Z0JBeEVKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsbUJBQW1CO29CQUM3QixxbUJBQXNDO2lCQUN6Qzs7OztnQkFMUSxlQUFlOzs7dUJBWW5CLEtBQUs7NEJBQ0wsS0FBSzsyQkFDTCxLQUFLOytCQUNMLE1BQU0sU0FBQyxjQUFjOzJCQVFyQixXQUFXLFNBQUMsd0JBQXdCOzZCQUtwQyxXQUFXLFNBQUMsK0JBQStCOztJQStDaEQsc0JBQUM7Q0FBQSxBQXpFRCxJQXlFQztTQXBFWSxlQUFlOzs7Ozs7SUFLeEIsK0JBQWtCOztJQUNsQixvQ0FBMkI7O0lBQzNCLG1DQUEwQjs7SUFDMUIsdUNBQTBEOzs7OztJQUcxRCxpQ0FBdUI7Ozs7O0lBRXZCLG9DQUF5Qjs7SUFDekIsc0NBQW9COztJQVlwQixvQ0FBc0Q7Ozs7O0lBRTFDLDBDQUF1QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uSW5pdCwgT25DaGFuZ2VzLCBIb3N0QmluZGluZywgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIFNpbXBsZUNoYW5nZXN9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBRdWVyeUNvbmRpdGlvbiB9IGZyb20gJy4uLy4uL2VudGl0eS9xdWVyeWNvbmRpdGlvbic7XHJcbmltcG9ydCB7IFNvbHV0aW9uU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2Uvc29sdXRpb24uc2VydmljZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnYXBwLWZpbHRlci1zZWFyY2gnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcuL3NlYXJjaC5jb21wb25lbnQuaHRtbCdcclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBTZWFyY2hDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsT25DaGFuZ2Vze1xyXG4gICBcclxuICAgIC8qKlxyXG4gICAgICogUXVlcnlDb25kaXRpb27nsbvlnotcclxuICAgICAqL1xyXG4gICAgQElucHV0KCkgaXRlbTphbnk7XHJcbiAgICBASW5wdXQoKSBhdXRvTGFiZWw6Ym9vbGVhbjtcclxuICAgIEBJbnB1dCgpIGRpc2FibGVkOmJvb2xlYW47XHJcbiAgICBAT3V0cHV0KCdzZWFyY2hIYW5kbGUnKSBzZWFyY2hIYW5kbGUgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgLyoq5Yik5pat5piv5ZCm5piv5Zyo5omp5bGV5Yy65Z+f5bGV56S6ICovXHJcbiAgICBleHRlbmQ6Ym9vbGVhbiA9IGZhbHNlO1xyXG4gICAgLyoq5Yik5pat5piv5ZCm5pi+56S6bGFiZWwgKi9cclxuICAgIHNob3dsYWJlbDpib29sZWFuID0gdHJ1ZTtcclxuICAgIHBsYWNlaG9sZGVyOiBzdHJpbmc7XHJcblxyXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5maWx0ZXItaXRlbS13cmFwJylcclxuICAgIGdldCBpc0V4dGVuZCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gIXRoaXMuZXh0ZW5kICYmIHRoaXMuYXV0b0xhYmVsO1xyXG4gICAgfVxyXG5cclxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuZmlsdGVyLWl0ZW0taGlkZGVubGFiZWwnKVxyXG4gICAgZ2V0IGhpZGVuTGFiZWwoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuICF0aGlzLnNob3dsYWJlbDtcclxuICAgIH1cclxuXHJcbiAgICBncm91cEljb24gPSAnPHNwYW4gY2xhc3M9XCJrLWljb24gay1pLXNlYXJjaFwiPjwvc3Bhbj4nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc29sdXRpb25TZXJ2aWNlOlNvbHV0aW9uU2VydmljZSl7fVxyXG5cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIGlmKHRoaXMuaXRlbSl7XHJcbiAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodGhpcy5pdGVtLnBsYWNlSG9sZGVyKTtcclxuICAgICAgICAgICAgaWYodHlwZSA9PSAnW29iamVjdCBVbmRlZmluZWRdJyl7XHJcbiAgICAgICAgICAgICAgICBpZih0aGlzLml0ZW0uY29udHJvbCAmJiB0aGlzLml0ZW0uY29udHJvbC5oYXNPd25Qcm9wZXJ0eSgncGxhY2Vob2xkZXInKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGFjZWhvbGRlciA9IHRoaXMuaXRlbS5jb250cm9sLnBsYWNlaG9sZGVyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsYWNlaG9sZGVyID0gdGhpcy5pdGVtLnBsYWNlSG9sZGVyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKHRoaXMuaXRlbSAmJiB0aGlzLml0ZW0uY29udHJvbCAmJiB0aGlzLml0ZW0uY29udHJvbC5oYXNPd25Qcm9wZXJ0eSgnaXNFeHRlbmQnKSl7XHJcbiAgICAgICAgICAgIHRoaXMuZXh0ZW5kID0gdGhpcy5pdGVtLmNvbnRyb2wuaXNFeHRlbmQ7XHJcbiAgICAgICAgICAgIGlmKCF0aGlzLmV4dGVuZCl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dsYWJlbCA9IHRoaXMuaXRlbS5jb250cm9sLnNob3dMYWJlbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zb2x1dGlvblNlcnZpY2UuYWRkRmlsdGVyRWRpdG9ySW5zdGFuY2UodGhpcy5pdGVtLmZpZWxkQ29kZSwgdGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgLy8gZ2V0Q29uZGl0aW9uSXRlbVN0eWxlKGZpZWxkOiBRdWVyeUNvbmRpdGlvbiwgY29udHJvbFR5cGU6IGFueSkge1xyXG4gICAgLy8gICAgIHJldHVybiB0aGlzLnNvbHV0aW9uU2VydmljZS5nZXRDb25kaXRpb25JdGVtU3R5bGUoZmllbGQsY29udHJvbFR5cGUpO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIGdldENvbmRpdGlvbkl0ZW1UaXRsZShmaWVsZDpRdWVyeUNvbmRpdGlvbil7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc29sdXRpb25TZXJ2aWNlLmdldENvbmRpdGlvbkl0ZW1UaXRsZShmaWVsZCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25TZWFyY2goJGV2ZW50KXtcclxuICAgICAgICBpZih0aGlzLmRpc2FibGVkKXtyZXR1cm47fVxyXG4gICAgICAgIHRoaXMuc2VhcmNoSGFuZGxlLmVtaXQoJGV2ZW50KTtcclxuICAgIH1cclxufSJdfQ==