/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, EventEmitter, Output, ElementRef } from '@angular/core';
import { SolutionService } from '../../service/solution.service';
var InputComponent = /** @class */ (function () {
    function InputComponent(solutionService, element) {
        this.solutionService = solutionService;
        this.element = element;
        this.searchHandle = new EventEmitter();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
    }
    Object.defineProperty(InputComponent.prototype, "isExtend", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.extend && this.autoLabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputComponent.prototype, "hidenLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return !this.showlabel;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    InputComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        //console.log(this.item);
        if (this.item) {
            /** @type {?} */
            var type = Object.prototype.toString.call(this.item.placeHolder);
            if (type == '[object Undefined]') {
                if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {
                    this.placeholder = this.item.control.placeholder;
                }
            }
            else {
                this.placeholder = this.item.placeHolder;
            }
        }
        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
            this.extend = this.item.control.isExtend;
            if (!this.extend) {
                this.showlabel = this.item.control.showLabel;
            }
        }
        this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);
        // (this.item.value as HelpValue).clear$.subscribe(() => {
        //     this.textValue = '';
        // });
    };
    /**
     * @return {?}
     */
    InputComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        // if(!this.extend){
        //     const El = this.element.nativeElement;
        //     const itemWidth = El.clientWidth;
        //     El.querySelector('.list-filter-input-item').style.width = itemWidth + 'px';
        //     El.querySelector('.input-item-btns').style.width = itemWidth + 100 + 'px';
        // }
    };
    /**
     * @return {?}
     */
    InputComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
    };
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    InputComponent.prototype.getConditionItemTitle = 
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return this.solutionService.getConditionItemTitle(field);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    InputComponent.prototype.InputChanged = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        // let keycode = window.event ? e.keyCode : e.which;
        // if(keycode == 13){//回车键
        //     this.searchHandle.emit(this.item.value.value);
        // }
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit(this.item.value.value);
    };
    InputComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-filter-input',
                    template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <input class=\"form-control\" \r\n    type=\"text\" \r\n    [disabled]=\"disabled\"\r\n    [(ngModel)]=\"item.value.value\" \r\n    [placeholder]=\"placeholder\"\r\n    (keyup.enter)=\"InputChanged($event)\"\r\n    (blur)=\"InputChanged($event)\"\r\n    >\r\n</div>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    InputComponent.ctorParameters = function () { return [
        { type: SolutionService },
        { type: ElementRef }
    ]; };
    InputComponent.propDecorators = {
        item: [{ type: Input }],
        autoLabel: [{ type: Input }],
        disabled: [{ type: Input }],
        searchHandle: [{ type: Output, args: ['searchHandle',] }],
        isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
        hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }]
    };
    return InputComponent;
}());
export { InputComponent };
if (false) {
    /**
     * QueryCondition类型
     * @type {?}
     */
    InputComponent.prototype.item;
    /** @type {?} */
    InputComponent.prototype.autoLabel;
    /** @type {?} */
    InputComponent.prototype.disabled;
    /** @type {?} */
    InputComponent.prototype.searchHandle;
    /**
     * 判断是否是在扩展区域展示
     * @type {?}
     */
    InputComponent.prototype.extend;
    /**
     * 判断是否显示label
     * @type {?}
     */
    InputComponent.prototype.showlabel;
    /** @type {?} */
    InputComponent.prototype.placeholder;
    /**
     * @type {?}
     * @private
     */
    InputComponent.prototype.solutionService;
    /**
     * @type {?}
     * @private
     */
    InputComponent.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1saXN0LWZpbHRlci8iLCJzb3VyY2VzIjpbImxpYi9jb250cm9sY29tcG9uZW50L2lucHV0Y29tcG9uZW50L2lucHV0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQXFCLFdBQVcsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFpQixVQUFVLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBRWpKLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUVqRTtJQStCSSx3QkFBb0IsZUFBZ0MsRUFBbUIsT0FBbUI7UUFBdEUsb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBQW1CLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFqQmxFLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQzs7OztRQUcxRCxXQUFNLEdBQVksS0FBSyxDQUFDOzs7O1FBRXhCLGNBQVMsR0FBWSxJQUFJLENBQUM7SUFZb0UsQ0FBQztJQVQvRixzQkFDSSxvQ0FBUTs7OztRQURaO1lBRUksT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUMxQyxDQUFDOzs7T0FBQTtJQUNELHNCQUNJLHNDQUFVOzs7O1FBRGQ7WUFFSSxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUMzQixDQUFDOzs7T0FBQTs7OztJQUlELGlDQUFROzs7SUFBUjtRQUNJLHlCQUF5QjtRQUN6QixJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7O2dCQUNMLElBQUksR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7WUFDbEUsSUFBSSxJQUFJLElBQUksb0JBQW9CLEVBQUU7Z0JBQzlCLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxFQUFFO29CQUN0RSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQztpQkFDcEQ7YUFDSjtpQkFDSTtnQkFDRCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO2FBQzVDO1NBQ0o7UUFDRCxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ2hGLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO1lBQ3pDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNkLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO2FBQ2hEO1NBQ0o7UUFDRCxJQUFJLENBQUMsZUFBZSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRXhFLDBEQUEwRDtRQUMxRCwyQkFBMkI7UUFDM0IsTUFBTTtJQUNWLENBQUM7Ozs7SUFDRCx3Q0FBZTs7O0lBQWY7UUFDSSxvQkFBb0I7UUFDcEIsNkNBQTZDO1FBQzdDLHdDQUF3QztRQUN4QyxrRkFBa0Y7UUFDbEYsaUZBQWlGO1FBQ2pGLElBQUk7SUFDUixDQUFDOzs7O0lBQ0Qsb0NBQVc7OztJQUFYO0lBQ0EsQ0FBQztJQUVELG1FQUFtRTtJQUNuRSw0RUFBNEU7SUFDNUUsSUFBSTs7Ozs7Ozs7SUFFSiw4Q0FBcUI7Ozs7Ozs7O0lBQXJCLFVBQXNCLEtBQXFCO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3RCxDQUFDOzs7OztJQUVELHFDQUFZOzs7O0lBQVosVUFBYSxDQUFDO1FBQ1Ysb0RBQW9EO1FBQ3BELDBCQUEwQjtRQUMxQixxREFBcUQ7UUFDckQsSUFBSTtRQUNKLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUFFLE9BQU87U0FBRTtRQUM5QixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsRCxDQUFDOztnQkFwRkosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLG9tQkFBcUM7O2lCQUV4Qzs7OztnQkFOUSxlQUFlO2dCQUZ3RSxVQUFVOzs7dUJBZXJHLEtBQUs7NEJBQ0wsS0FBSzsyQkFDTCxLQUFLOytCQUNMLE1BQU0sU0FBQyxjQUFjOzJCQVFyQixXQUFXLFNBQUMsd0JBQXdCOzZCQUlwQyxXQUFXLFNBQUMsK0JBQStCOztJQTJEaEQscUJBQUM7Q0FBQSxBQXJGRCxJQXFGQztTQS9FWSxjQUFjOzs7Ozs7SUFLdkIsOEJBQW1COztJQUNuQixtQ0FBNEI7O0lBQzVCLGtDQUEyQjs7SUFDM0Isc0NBQTBEOzs7OztJQUcxRCxnQ0FBd0I7Ozs7O0lBRXhCLG1DQUEwQjs7SUFDMUIscUNBQW9COzs7OztJQVdSLHlDQUF3Qzs7Ozs7SUFBRSxpQ0FBb0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkluaXQsIE9uQ2hhbmdlcywgSG9zdEJpbmRpbmcsIEV2ZW50RW1pdHRlciwgT3V0cHV0LCBBZnRlclZpZXdJbml0LCBFbGVtZW50UmVmLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFF1ZXJ5Q29uZGl0aW9uIH0gZnJvbSAnLi4vLi4vZW50aXR5L3F1ZXJ5Y29uZGl0aW9uJztcclxuaW1wb3J0IHsgU29sdXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZS9zb2x1dGlvbi5zZXJ2aWNlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdhcHAtZmlsdGVyLWlucHV0JyxcclxuICAgIHRlbXBsYXRlVXJsOiAnLi9pbnB1dC5jb21wb25lbnQuaHRtbCcsXHJcbiAgICBzdHlsZVVybHM6IFsnLi9pbnB1dC5jb21wb25lbnQuc2NzcyddXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgSW5wdXRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBRdWVyeUNvbmRpdGlvbuexu+Wei1xyXG4gICAgICovXHJcbiAgICBASW5wdXQoKSBpdGVtOiBhbnk7XHJcbiAgICBASW5wdXQoKSBhdXRvTGFiZWw6IGJvb2xlYW47XHJcbiAgICBASW5wdXQoKSBkaXNhYmxlZDogYm9vbGVhbjtcclxuICAgIEBPdXRwdXQoJ3NlYXJjaEhhbmRsZScpIHNlYXJjaEhhbmRsZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgICAvKirliKTmlq3mmK/lkKbmmK/lnKjmianlsZXljLrln5/lsZXnpLogKi9cclxuICAgIGV4dGVuZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgLyoq5Yik5pat5piv5ZCm5pi+56S6bGFiZWwgKi9cclxuICAgIHNob3dsYWJlbDogYm9vbGVhbiA9IHRydWU7XHJcbiAgICBwbGFjZWhvbGRlcjogc3RyaW5nO1xyXG5cclxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuZmlsdGVyLWl0ZW0td3JhcCcpXHJcbiAgICBnZXQgaXNFeHRlbmQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuICF0aGlzLmV4dGVuZCAmJiB0aGlzLmF1dG9MYWJlbDtcclxuICAgIH1cclxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuZmlsdGVyLWl0ZW0taGlkZGVubGFiZWwnKVxyXG4gICAgZ2V0IGhpZGVuTGFiZWwoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuICF0aGlzLnNob3dsYWJlbDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNvbHV0aW9uU2VydmljZTogU29sdXRpb25TZXJ2aWNlLCBwcml2YXRlIHJlYWRvbmx5IGVsZW1lbnQ6IEVsZW1lbnRSZWYpIHsgfVxyXG5cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIC8vY29uc29sZS5sb2codGhpcy5pdGVtKTtcclxuICAgICAgICBpZiAodGhpcy5pdGVtKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodGhpcy5pdGVtLnBsYWNlSG9sZGVyKTtcclxuICAgICAgICAgICAgaWYgKHR5cGUgPT0gJ1tvYmplY3QgVW5kZWZpbmVkXScpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLml0ZW0uY29udHJvbCAmJiB0aGlzLml0ZW0uY29udHJvbC5oYXNPd25Qcm9wZXJ0eSgncGxhY2Vob2xkZXInKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSB0aGlzLml0ZW0uY29udHJvbC5wbGFjZWhvbGRlcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSB0aGlzLml0ZW0ucGxhY2VIb2xkZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuaXRlbSAmJiB0aGlzLml0ZW0uY29udHJvbCAmJiB0aGlzLml0ZW0uY29udHJvbC5oYXNPd25Qcm9wZXJ0eSgnaXNFeHRlbmQnKSkge1xyXG4gICAgICAgICAgICB0aGlzLmV4dGVuZCA9IHRoaXMuaXRlbS5jb250cm9sLmlzRXh0ZW5kO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuZXh0ZW5kKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dsYWJlbCA9IHRoaXMuaXRlbS5jb250cm9sLnNob3dMYWJlbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNvbHV0aW9uU2VydmljZS5hZGRGaWx0ZXJFZGl0b3JJbnN0YW5jZSh0aGlzLml0ZW0uZmllbGRDb2RlLCB0aGlzKTtcclxuXHJcbiAgICAgICAgLy8gKHRoaXMuaXRlbS52YWx1ZSBhcyBIZWxwVmFsdWUpLmNsZWFyJC5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICAgIC8vICAgICB0aGlzLnRleHRWYWx1ZSA9ICcnO1xyXG4gICAgICAgIC8vIH0pO1xyXG4gICAgfVxyXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgICAgIC8vIGlmKCF0aGlzLmV4dGVuZCl7XHJcbiAgICAgICAgLy8gICAgIGNvbnN0IEVsID0gdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgICAgLy8gICAgIGNvbnN0IGl0ZW1XaWR0aCA9IEVsLmNsaWVudFdpZHRoO1xyXG4gICAgICAgIC8vICAgICBFbC5xdWVyeVNlbGVjdG9yKCcubGlzdC1maWx0ZXItaW5wdXQtaXRlbScpLnN0eWxlLndpZHRoID0gaXRlbVdpZHRoICsgJ3B4JztcclxuICAgICAgICAvLyAgICAgRWwucXVlcnlTZWxlY3RvcignLmlucHV0LWl0ZW0tYnRucycpLnN0eWxlLndpZHRoID0gaXRlbVdpZHRoICsgMTAwICsgJ3B4JztcclxuICAgICAgICAvLyB9XHJcbiAgICB9XHJcbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkIHtcclxuICAgIH1cclxuXHJcbiAgICAvLyBnZXRDb25kaXRpb25JdGVtU3R5bGUoZmllbGQ6IFF1ZXJ5Q29uZGl0aW9uLCBjb250cm9sVHlwZTogYW55KSB7XHJcbiAgICAvLyAgICAgcmV0dXJuIHRoaXMuc29sdXRpb25TZXJ2aWNlLmdldENvbmRpdGlvbkl0ZW1TdHlsZShmaWVsZCxjb250cm9sVHlwZSk7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgZ2V0Q29uZGl0aW9uSXRlbVRpdGxlKGZpZWxkOiBRdWVyeUNvbmRpdGlvbikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNvbHV0aW9uU2VydmljZS5nZXRDb25kaXRpb25JdGVtVGl0bGUoZmllbGQpO1xyXG4gICAgfVxyXG5cclxuICAgIElucHV0Q2hhbmdlZChlKSB7XHJcbiAgICAgICAgLy8gbGV0IGtleWNvZGUgPSB3aW5kb3cuZXZlbnQgPyBlLmtleUNvZGUgOiBlLndoaWNoO1xyXG4gICAgICAgIC8vIGlmKGtleWNvZGUgPT0gMTMpey8v5Zue6L2m6ZSuXHJcbiAgICAgICAgLy8gICAgIHRoaXMuc2VhcmNoSGFuZGxlLmVtaXQodGhpcy5pdGVtLnZhbHVlLnZhbHVlKTtcclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWQpIHsgcmV0dXJuOyB9XHJcbiAgICAgICAgdGhpcy5zZWFyY2hIYW5kbGUuZW1pdCh0aGlzLml0ZW0udmFsdWUudmFsdWUpO1xyXG4gICAgfVxyXG59Il19