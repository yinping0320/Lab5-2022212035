/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlType } from '../controltype';
import { EventEmitter } from '@angular/core';
var CheckboxGroupValue = /** @class */ (function () {
    function CheckboxGroupValue(value) {
        if (value === void 0) { value = []; }
        this.clear$ = new EventEmitter();
        this.valueChanged = new EventEmitter();
        this.value = value;
    }
    /**
     * @return {?}
     */
    CheckboxGroupValue.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return this.value.length == 0;
    };
    /**
     * @return {?}
     */
    CheckboxGroupValue.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.value = [];
        this.clear$.emit();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    CheckboxGroupValue.prototype.setOriginalValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    CheckboxGroupValue.prototype.setValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value;
        this.valueChanged.emit(this.value);
    };
    /**
     * @return {?}
     */
    CheckboxGroupValue.prototype.getOriginalValue = /**
     * @return {?}
     */
    function () {
        return this.value;
    };
    /**
     * @return {?}
     */
    CheckboxGroupValue.prototype.getControlType = /**
     * @return {?}
     */
    function () {
        return ControlType.CheckboxGroup;
    };
    return CheckboxGroupValue;
}());
export { CheckboxGroupValue };
if (false) {
    /** @type {?} */
    CheckboxGroupValue.prototype.clear$;
    /** @type {?} */
    CheckboxGroupValue.prototype.valueChanged;
    /** @type {?} */
    CheckboxGroupValue.prototype.value;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3hncm91cHZhbHVlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1saXN0LWZpbHRlci8iLCJzb3VyY2VzIjpbImxpYi9lbnRpdHkvY29uZGl0aW9udmFsdWUvY2hlY2tib3hncm91cHZhbHVlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3QztJQUlJLDRCQUFZLEtBQWlCO1FBQWpCLHNCQUFBLEVBQUEsVUFBaUI7UUFIN0IsV0FBTSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDNUIsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRzlCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3ZCLENBQUM7Ozs7SUFDRCxvQ0FBTzs7O0lBQVA7UUFDSSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQztJQUNsQyxDQUFDOzs7O0lBRUQsdUNBQVU7OztJQUFWO1FBQ0ksSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN2QixDQUFDOzs7OztJQUNELDZDQUFnQjs7OztJQUFoQixVQUFpQixLQUFZO1FBQ3pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3ZCLENBQUM7Ozs7O0lBRUQscUNBQVE7Ozs7SUFBUixVQUFTLEtBQVU7UUFDZixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkMsQ0FBQzs7OztJQUVELDZDQUFnQjs7O0lBQWhCO1FBQ0ksT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3RCLENBQUM7Ozs7SUFDRCwyQ0FBYzs7O0lBQWQ7UUFDSSxPQUFPLFdBQVcsQ0FBQyxhQUFhLENBQUM7SUFDckMsQ0FBQztJQUNMLHlCQUFDO0FBQUQsQ0FBQyxBQTlCRCxJQThCQzs7OztJQTdCRyxvQ0FBNEI7O0lBQzVCLDBDQUFrQzs7SUFDbEMsbUNBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJVmFsdWUgfSBmcm9tICcuL2l2YWx1ZSc7XHJcbmltcG9ydCB7IENvbnRyb2xUeXBlIH0gZnJvbSAnLi4vY29udHJvbHR5cGUnO1xyXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuZXhwb3J0IGNsYXNzIENoZWNrYm94R3JvdXBWYWx1ZSBpbXBsZW1lbnRzIElWYWx1ZSB7XHJcbiAgICBjbGVhciQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICB2YWx1ZUNoYW5nZWQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICB2YWx1ZTogYW55W107XHJcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZTogYW55W10gPSBbXSkge1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuICAgIH1cclxuICAgIGlzRW1wdHkoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUubGVuZ3RoID09IDA7XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJWYWx1ZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnZhbHVlID0gW107XHJcbiAgICAgICAgdGhpcy5jbGVhciQuZW1pdCgpO1xyXG4gICAgfVxyXG4gICAgc2V0T3JpZ2luYWxWYWx1ZSh2YWx1ZTogYW55W10pOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VmFsdWUodmFsdWU6IGFueSkge1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlZC5lbWl0KHRoaXMudmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldE9yaWdpbmFsVmFsdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XHJcbiAgICB9XHJcbiAgICBnZXRDb250cm9sVHlwZSgpOiBDb250cm9sVHlwZSB7XHJcbiAgICAgICAgcmV0dXJuIENvbnRyb2xUeXBlLkNoZWNrYm94R3JvdXA7XHJcbiAgICB9XHJcbn1cclxuIl19