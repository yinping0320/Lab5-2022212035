/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter } from '@angular/core';
import { ControlType } from "../controltype";
var DateRangeValue = /** @class */ (function () {
    function DateRangeValue(value) {
        if (value === void 0) { value = { startTime: '', endTime: '' }; }
        this.clear$ = new EventEmitter();
        this.startTime = value.startTime;
        this.endTime = value.endTime;
    }
    /**
     * @return {?}
     */
    DateRangeValue.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return !this.startTime || !this.endTime;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DateRangeValue.prototype.setOriginalValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value.formatted) {
            this.startTime = value.formatted.split(value.delimiter)[0];
            this.endTime = value.formatted.split(value.delimiter)[1];
        }
        else {
            this.clearValue();
        }
    };
    /**
     * @return {?}
     */
    DateRangeValue.prototype.getOriginalValue = /**
     * @return {?}
     */
    function () {
        return this.startTime + "~" + this.endTime;
    };
    /**
     * @return {?}
     */
    DateRangeValue.prototype.getControlType = /**
     * @return {?}
     */
    function () {
        return ControlType.DateRange;
    };
    /**
     * @return {?}
     */
    DateRangeValue.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.startTime = undefined;
        this.endTime = undefined;
        this.clear$.emit();
    };
    return DateRangeValue;
}());
export { DateRangeValue };
if (false) {
    /** @type {?} */
    DateRangeValue.prototype.clear$;
    /** @type {?} */
    DateRangeValue.prototype.startTime;
    /** @type {?} */
    DateRangeValue.prototype.endTime;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXJhbmdldmFsdWUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWxpc3QtZmlsdGVyLyIsInNvdXJjZXMiOlsibGliL2VudGl0eS9jb25kaXRpb252YWx1ZS9kYXRlcmFuZ2V2YWx1ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU3QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFN0M7SUFPSSx3QkFBWSxLQUE4RTtRQUE5RSxzQkFBQSxFQUFBLFVBQWtELFNBQVMsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRTtRQU4xRixXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQU94QixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUM7UUFDakMsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDO0lBQ2pDLENBQUM7Ozs7SUFDRCxnQ0FBTzs7O0lBQVA7UUFDSSxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDNUMsQ0FBQzs7Ozs7SUFFRCx5Q0FBZ0I7Ozs7SUFBaEIsVUFBaUIsS0FBK0M7UUFDNUQsSUFBSSxLQUFLLENBQUMsU0FBUyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNELElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzVEO2FBQU07WUFDSCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7U0FDckI7SUFDTCxDQUFDOzs7O0lBQ0QseUNBQWdCOzs7SUFBaEI7UUFDSSxPQUFVLElBQUksQ0FBQyxTQUFTLFNBQUksSUFBSSxDQUFDLE9BQVMsQ0FBQztJQUMvQyxDQUFDOzs7O0lBQ0QsdUNBQWM7OztJQUFkO1FBQ0ksT0FBTyxXQUFXLENBQUMsU0FBUyxDQUFDO0lBQ2pDLENBQUM7Ozs7SUFDRCxtQ0FBVTs7O0lBQVY7UUFDSSxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQztRQUV6QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFDTCxxQkFBQztBQUFELENBQUMsQUFuQ0QsSUFtQ0M7Ozs7SUFsQ0csZ0NBQTRCOztJQUc1QixtQ0FBa0I7O0lBQ2xCLGlDQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBJVmFsdWUgfSBmcm9tIFwiLi9pdmFsdWVcIjtcclxuaW1wb3J0IHsgQ29udHJvbFR5cGUgfSBmcm9tIFwiLi4vY29udHJvbHR5cGVcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBEYXRlUmFuZ2VWYWx1ZSBpbXBsZW1lbnRzIElWYWx1ZSB7XHJcbiAgICBjbGVhciQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG5cclxuICAgIHN0YXJ0VGltZTogc3RyaW5nO1xyXG4gICAgZW5kVGltZTogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHZhbHVlOiB7IHN0YXJ0VGltZTogc3RyaW5nLCBlbmRUaW1lOiBzdHJpbmcgfSA9IHsgc3RhcnRUaW1lOiAnJywgZW5kVGltZTogJycgfSkge1xyXG4gICAgICAgIHRoaXMuc3RhcnRUaW1lID0gdmFsdWUuc3RhcnRUaW1lO1xyXG4gICAgICAgIHRoaXMuZW5kVGltZSA9IHZhbHVlLmVuZFRpbWU7XHJcbiAgICB9XHJcbiAgICBpc0VtcHR5KCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiAhdGhpcy5zdGFydFRpbWUgfHwgIXRoaXMuZW5kVGltZTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRPcmlnaW5hbFZhbHVlKHZhbHVlOiB7IGZvcm1hdHRlZDogc3RyaW5nLCBkZWxpbWl0ZXI6IHN0cmluZyB9KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHZhbHVlLmZvcm1hdHRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXJ0VGltZSA9IHZhbHVlLmZvcm1hdHRlZC5zcGxpdCh2YWx1ZS5kZWxpbWl0ZXIpWzBdO1xyXG4gICAgICAgICAgICB0aGlzLmVuZFRpbWUgPSB2YWx1ZS5mb3JtYXR0ZWQuc3BsaXQodmFsdWUuZGVsaW1pdGVyKVsxXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmNsZWFyVmFsdWUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXRPcmlnaW5hbFZhbHVlKCkge1xyXG4gICAgICAgIHJldHVybiBgJHt0aGlzLnN0YXJ0VGltZX1+JHt0aGlzLmVuZFRpbWV9YDtcclxuICAgIH1cclxuICAgIGdldENvbnRyb2xUeXBlKCk6IENvbnRyb2xUeXBlIHtcclxuICAgICAgICByZXR1cm4gQ29udHJvbFR5cGUuRGF0ZVJhbmdlO1xyXG4gICAgfVxyXG4gICAgY2xlYXJWYWx1ZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnN0YXJ0VGltZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLmVuZFRpbWUgPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgIHRoaXMuY2xlYXIkLmVtaXQoKTtcclxuICAgIH1cclxufSJdfQ==