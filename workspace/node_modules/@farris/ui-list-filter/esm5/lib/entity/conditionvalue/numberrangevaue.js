/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlType } from "../controltype";
import { EventEmitter } from "@angular/core";
var NumberRangeValue = /** @class */ (function () {
    function NumberRangeValue(data) {
        if (data === void 0) { data = { startValue: '', endValue: '' }; }
        this.clear$ = new EventEmitter();
        this.startValue = data.startValue ? parseFloat(data.startValue) : null;
        this.endValue = data.endValue ? parseFloat(data.endValue) : null;
    }
    /**
     * @return {?}
     */
    NumberRangeValue.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return (this.startValue == null && this.endValue == null);
    };
    /**
     * @return {?}
     */
    NumberRangeValue.prototype.getControlType = /**
     * @return {?}
     */
    function () {
        return ControlType.NumberRange;
    };
    /**
     * @return {?}
     */
    NumberRangeValue.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.startValue = undefined;
        this.endValue = undefined;
        this.clear$.emit();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NumberRangeValue.prototype.setOriginalValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        throw new Error("Method not implemented.");
    };
    /**
     * @return {?}
     */
    NumberRangeValue.prototype.getOriginalValue = /**
     * @return {?}
     */
    function () {
        return {
            begin: this.startValue,
            end: this.endValue
        };
    };
    return NumberRangeValue;
}());
export { NumberRangeValue };
if (false) {
    /** @type {?} */
    NumberRangeValue.prototype.startValue;
    /** @type {?} */
    NumberRangeValue.prototype.endValue;
    /** @type {?} */
    NumberRangeValue.prototype.clear$;
}
var NumberRangeValueConvertor = /** @class */ (function () {
    function NumberRangeValueConvertor() {
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    NumberRangeValueConvertor.prototype.convertToObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var dropDownListValue = (/** @type {?} */ (obj));
        /** @type {?} */
        var jobj = new Object();
        jobj["startValue"] = dropDownListValue.startValue;
        jobj["endValue"] = dropDownListValue.endValue;
        return jobj;
    };
    /**
     * @param {?} jobj
     * @return {?}
     */
    NumberRangeValueConvertor.prototype.initFromObject = /**
     * @param {?} jobj
     * @return {?}
     */
    function (jobj) {
        /** @type {?} */
        var numberRangeValue = new NumberRangeValue();
        if (!!(jobj["startValue"])) {
            numberRangeValue.startValue = (/** @type {?} */ (jobj["startValue"]));
        }
        if (!!(jobj["endValue"])) {
            numberRangeValue.endValue = (/** @type {?} */ (jobj["endValue"]));
        }
        return numberRangeValue;
    };
    return NumberRangeValueConvertor;
}());
export { NumberRangeValueConvertor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVycmFuZ2V2YXVlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1saXN0LWZpbHRlci8iLCJzb3VyY2VzIjpbImxpYi9lbnRpdHkvY29uZGl0aW9udmFsdWUvbnVtYmVycmFuZ2V2YXVlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU3QztJQU9JLDBCQUFZLElBQWlGO1FBQWpGLHFCQUFBLEVBQUEsU0FBbUQsVUFBVSxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFO1FBRjdGLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBR3hCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3JFLENBQUM7Ozs7SUFHRCxrQ0FBTzs7O0lBQVA7UUFDSSxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsQ0FBQztJQUM5RCxDQUFDOzs7O0lBRUQseUNBQWM7OztJQUFkO1FBQ0ksT0FBTyxXQUFXLENBQUMsV0FBVyxDQUFDO0lBQ25DLENBQUM7Ozs7SUFFRCxxQ0FBVTs7O0lBQVY7UUFDSSxJQUFJLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQztRQUM1QixJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQztRQUMxQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3ZCLENBQUM7Ozs7O0lBQ0QsMkNBQWdCOzs7O0lBQWhCLFVBQWlCLEtBQVU7UUFDdkIsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQy9DLENBQUM7Ozs7SUFDRCwyQ0FBZ0I7OztJQUFoQjtRQUNJLE9BQU87WUFDSCxLQUFLLEVBQUUsSUFBSSxDQUFDLFVBQVU7WUFDdEIsR0FBRyxFQUFFLElBQUksQ0FBQyxRQUFRO1NBQ3JCLENBQUM7SUFDTixDQUFDO0lBRUwsdUJBQUM7QUFBRCxDQUFDLEFBcENELElBb0NDOzs7O0lBbENHLHNDQUFtQjs7SUFDbkIsb0NBQWlCOztJQUVqQixrQ0FBNEI7O0FBaUNoQztJQUFBO0lBbUJBLENBQUM7Ozs7O0lBbEJHLG1EQUFlOzs7O0lBQWYsVUFBZ0IsR0FBVzs7WUFDbkIsaUJBQWlCLEdBQUcsbUJBQUEsR0FBRyxFQUFvQjs7WUFDM0MsSUFBSSxHQUFHLElBQUksTUFBTSxFQUFFO1FBQ3ZCLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxpQkFBaUIsQ0FBQyxVQUFVLENBQUM7UUFDbEQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLGlCQUFpQixDQUFDLFFBQVEsQ0FBQztRQUM5QyxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDOzs7OztJQUVELGtEQUFjOzs7O0lBQWQsVUFBZSxJQUFZOztZQUNuQixnQkFBZ0IsR0FBRyxJQUFJLGdCQUFnQixFQUFFO1FBQzdDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUU7WUFDeEIsZ0JBQWdCLENBQUMsVUFBVSxHQUFHLG1CQUFBLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBVSxDQUFDO1NBQzlEO1FBQ0QsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRTtZQUN0QixnQkFBZ0IsQ0FBQyxRQUFRLEdBQUcsbUJBQUEsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFVLENBQUM7U0FDMUQ7UUFDRCxPQUFPLGdCQUFnQixDQUFDO0lBQzVCLENBQUM7SUFDTCxnQ0FBQztBQUFELENBQUMsQUFuQkQsSUFtQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJVmFsdWUgfSBmcm9tIFwiLi9pdmFsdWVcIjtcclxuaW1wb3J0IHsgQ29udHJvbFR5cGUgfSBmcm9tIFwiLi4vY29udHJvbHR5cGVcIjtcclxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBOdW1iZXJSYW5nZVZhbHVlIGltcGxlbWVudHMgSVZhbHVlIHtcclxuXHJcbiAgICBzdGFydFZhbHVlOiBudW1iZXI7XHJcbiAgICBlbmRWYWx1ZTogbnVtYmVyO1xyXG5cclxuICAgIGNsZWFyJCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhOiB7IHN0YXJ0VmFsdWU6IHN0cmluZywgZW5kVmFsdWU6IHN0cmluZyB9ID0geyBzdGFydFZhbHVlOiAnJywgZW5kVmFsdWU6ICcnIH0pIHtcclxuICAgICAgICB0aGlzLnN0YXJ0VmFsdWUgPSBkYXRhLnN0YXJ0VmFsdWUgPyBwYXJzZUZsb2F0KGRhdGEuc3RhcnRWYWx1ZSkgOiBudWxsO1xyXG4gICAgICAgIHRoaXMuZW5kVmFsdWUgPSBkYXRhLmVuZFZhbHVlID8gcGFyc2VGbG9hdChkYXRhLmVuZFZhbHVlKSA6IG51bGw7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGlzRW1wdHkoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLnN0YXJ0VmFsdWUgPT0gbnVsbCAmJiB0aGlzLmVuZFZhbHVlID09IG51bGwpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldENvbnRyb2xUeXBlKCk6IENvbnRyb2xUeXBlIHtcclxuICAgICAgICByZXR1cm4gQ29udHJvbFR5cGUuTnVtYmVyUmFuZ2U7XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJWYWx1ZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnN0YXJ0VmFsdWUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5lbmRWYWx1ZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLmNsZWFyJC5lbWl0KCk7XHJcbiAgICB9XHJcbiAgICBzZXRPcmlnaW5hbFZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuICAgIH1cclxuICAgIGdldE9yaWdpbmFsVmFsdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgYmVnaW46IHRoaXMuc3RhcnRWYWx1ZSxcclxuICAgICAgICAgICAgZW5kOiB0aGlzLmVuZFZhbHVlXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBOdW1iZXJSYW5nZVZhbHVlQ29udmVydG9yIHtcclxuICAgIGNvbnZlcnRUb09iamVjdChvYmo6IElWYWx1ZSk6IE9iamVjdCB7XHJcbiAgICAgICAgbGV0IGRyb3BEb3duTGlzdFZhbHVlID0gb2JqIGFzIE51bWJlclJhbmdlVmFsdWU7XHJcbiAgICAgICAgbGV0IGpvYmogPSBuZXcgT2JqZWN0KCk7XHJcbiAgICAgICAgam9ialtcInN0YXJ0VmFsdWVcIl0gPSBkcm9wRG93bkxpc3RWYWx1ZS5zdGFydFZhbHVlO1xyXG4gICAgICAgIGpvYmpbXCJlbmRWYWx1ZVwiXSA9IGRyb3BEb3duTGlzdFZhbHVlLmVuZFZhbHVlO1xyXG4gICAgICAgIHJldHVybiBqb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIGluaXRGcm9tT2JqZWN0KGpvYmo6IE9iamVjdCk6IE51bWJlclJhbmdlVmFsdWUge1xyXG4gICAgICAgIGxldCBudW1iZXJSYW5nZVZhbHVlID0gbmV3IE51bWJlclJhbmdlVmFsdWUoKTtcclxuICAgICAgICBpZiAoISEoam9ialtcInN0YXJ0VmFsdWVcIl0pKSB7XHJcbiAgICAgICAgICAgIG51bWJlclJhbmdlVmFsdWUuc3RhcnRWYWx1ZSA9IGpvYmpbXCJzdGFydFZhbHVlXCJdIGFzIG51bWJlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCEhKGpvYmpbXCJlbmRWYWx1ZVwiXSkpIHtcclxuICAgICAgICAgICAgbnVtYmVyUmFuZ2VWYWx1ZS5lbmRWYWx1ZSA9IGpvYmpbXCJlbmRWYWx1ZVwiXSBhcyBudW1iZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudW1iZXJSYW5nZVZhbHVlO1xyXG4gICAgfVxyXG59Il19