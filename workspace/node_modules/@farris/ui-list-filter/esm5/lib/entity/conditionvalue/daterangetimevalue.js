/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlType } from '../controltype';
import { EventEmitter } from '@angular/core';
var DateRangeTimeValue = /** @class */ (function () {
    function DateRangeTimeValue(value) {
        if (value === void 0) { value = { startTime: '', endTime: '' }; }
        this.clear$ = new EventEmitter();
        this.startTime = value.startTime;
        this.endTime = value.endTime;
    }
    /**
     * @return {?}
     */
    DateRangeTimeValue.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return !this.startTime || !this.endTime;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DateRangeTimeValue.prototype.setOriginalValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value.formatted) {
            this.startTime = value.formatted.split(value.delimiter)[0];
            this.endTime = value.formatted.split(value.delimiter)[1];
        }
        else {
            this.clearValue();
        }
    };
    /**
     * @return {?}
     */
    DateRangeTimeValue.prototype.getOriginalValue = /**
     * @return {?}
     */
    function () {
        return this.startTime + "~" + this.endTime;
    };
    /**
     * @return {?}
     */
    DateRangeTimeValue.prototype.getControlType = /**
     * @return {?}
     */
    function () {
        return ControlType.DateRangeTime;
    };
    /**
     * @return {?}
     */
    DateRangeTimeValue.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.startTime = undefined;
        this.endTime = undefined;
        this.clear$.emit();
    };
    return DateRangeTimeValue;
}());
export { DateRangeTimeValue };
if (false) {
    /** @type {?} */
    DateRangeTimeValue.prototype.startTime;
    /** @type {?} */
    DateRangeTimeValue.prototype.endTime;
    /** @type {?} */
    DateRangeTimeValue.prototype.clear$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXJhbmdldGltZXZhbHVlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1saXN0LWZpbHRlci8iLCJzb3VyY2VzIjpbImxpYi9lbnRpdHkvY29uZGl0aW9udmFsdWUvZGF0ZXJhbmdldGltZXZhbHVlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU3QztJQUtJLDRCQUFZLEtBQThFO1FBQTlFLHNCQUFBLEVBQUEsVUFBa0QsU0FBUyxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFO1FBRjFGLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBR3hCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUNqQyxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7SUFDakMsQ0FBQzs7OztJQUNELG9DQUFPOzs7SUFBUDtRQUNJLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUM1QyxDQUFDOzs7OztJQUVELDZDQUFnQjs7OztJQUFoQixVQUFpQixLQUErQztRQUM1RCxJQUFJLEtBQUssQ0FBQyxTQUFTLEVBQUU7WUFDakIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDM0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDNUQ7YUFBTTtZQUNILElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztTQUNyQjtJQUNMLENBQUM7Ozs7SUFDRCw2Q0FBZ0I7OztJQUFoQjtRQUNJLE9BQVUsSUFBSSxDQUFDLFNBQVMsU0FBSSxJQUFJLENBQUMsT0FBUyxDQUFDO0lBQy9DLENBQUM7Ozs7SUFDRCwyQ0FBYzs7O0lBQWQ7UUFDSSxPQUFPLFdBQVcsQ0FBQyxhQUFhLENBQUM7SUFDckMsQ0FBQzs7OztJQUNELHVDQUFVOzs7SUFBVjtRQUNJLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDO1FBRXpCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUNMLHlCQUFDO0FBQUQsQ0FBQyxBQWpDRCxJQWlDQzs7OztJQWhDRyx1Q0FBa0I7O0lBQ2xCLHFDQUFnQjs7SUFDaEIsb0NBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVZhbHVlIH0gZnJvbSAnLi9pdmFsdWUnO1xyXG5pbXBvcnQgeyBDb250cm9sVHlwZSB9IGZyb20gJy4uL2NvbnRyb2x0eXBlJztcclxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgRGF0ZVJhbmdlVGltZVZhbHVlIGltcGxlbWVudHMgSVZhbHVlIHtcclxuICAgIHN0YXJ0VGltZTogc3RyaW5nO1xyXG4gICAgZW5kVGltZTogc3RyaW5nO1xyXG4gICAgY2xlYXIkID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHZhbHVlOiB7IHN0YXJ0VGltZTogc3RyaW5nLCBlbmRUaW1lOiBzdHJpbmcgfSA9IHsgc3RhcnRUaW1lOiAnJywgZW5kVGltZTogJycgfSkge1xyXG4gICAgICAgIHRoaXMuc3RhcnRUaW1lID0gdmFsdWUuc3RhcnRUaW1lO1xyXG4gICAgICAgIHRoaXMuZW5kVGltZSA9IHZhbHVlLmVuZFRpbWU7XHJcbiAgICB9XHJcbiAgICBpc0VtcHR5KCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiAhdGhpcy5zdGFydFRpbWUgfHwgIXRoaXMuZW5kVGltZTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRPcmlnaW5hbFZhbHVlKHZhbHVlOiB7IGZvcm1hdHRlZDogc3RyaW5nLCBkZWxpbWl0ZXI6IHN0cmluZyB9KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHZhbHVlLmZvcm1hdHRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXJ0VGltZSA9IHZhbHVlLmZvcm1hdHRlZC5zcGxpdCh2YWx1ZS5kZWxpbWl0ZXIpWzBdO1xyXG4gICAgICAgICAgICB0aGlzLmVuZFRpbWUgPSB2YWx1ZS5mb3JtYXR0ZWQuc3BsaXQodmFsdWUuZGVsaW1pdGVyKVsxXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmNsZWFyVmFsdWUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXRPcmlnaW5hbFZhbHVlKCkge1xyXG4gICAgICAgIHJldHVybiBgJHt0aGlzLnN0YXJ0VGltZX1+JHt0aGlzLmVuZFRpbWV9YDtcclxuICAgIH1cclxuICAgIGdldENvbnRyb2xUeXBlKCk6IENvbnRyb2xUeXBlIHtcclxuICAgICAgICByZXR1cm4gQ29udHJvbFR5cGUuRGF0ZVJhbmdlVGltZTtcclxuICAgIH1cclxuICAgIGNsZWFyVmFsdWUoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zdGFydFRpbWUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5lbmRUaW1lID0gdW5kZWZpbmVkO1xyXG5cclxuICAgICAgICB0aGlzLmNsZWFyJC5lbWl0KCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbiJdfQ==