/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlType } from "../controltype";
import { cloneDeep } from 'lodash-es';
import { EventEmitter } from "@angular/core";
var InputGroupValue = /** @class */ (function () {
    function InputGroupValue(data) {
        if (data === void 0) { data = { value: [], textValue: undefined, textField: undefined, isInputText: undefined }; }
        this.clear$ = new EventEmitter();
        this.value = data.value;
        this.textValue = data.textValue ? data.textValue.trim() : '';
        this.textField = data.textField;
        this.isInputText = data.isInputText;
    }
    /**
     * @param {?} targetField
     * @return {?}
     */
    InputGroupValue.prototype.getTextValue = /**
     * @param {?} targetField
     * @return {?}
     */
    function (targetField) {
        var _this = this;
        /** @type {?} */
        var args = targetField.split('.');
        /** @type {?} */
        var textArr = this.value.map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return _this.getPropValue(item, cloneDeep(args)); }));
        return textArr && textArr.length ? textArr.join(',') : '';
    };
    /**
     * @param {?} item
     * @param {?} args
     * @return {?}
     */
    InputGroupValue.prototype.getPropValue = /**
     * @param {?} item
     * @param {?} args
     * @return {?}
     */
    function (item, args) {
        if (args.length > 1) {
            /** @type {?} */
            var arg = args.shift();
            if (arg) {
                return item[arg] ? this.getPropValue(item[arg], args) : '';
            }
            else {
                return '';
            }
        }
        return item[args[0]];
    };
    /**
     * @return {?}
     */
    InputGroupValue.prototype.getControlType = /**
     * @return {?}
     */
    function () {
        return ControlType.InputGroup;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    InputGroupValue.prototype.setOriginalValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        throw new Error("Method not implemented.");
    };
    /**
     * @return {?}
     */
    InputGroupValue.prototype.getOriginalValue = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var args = this.textField.split('.');
        /** @type {?} */
        var textArr = this.value.map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return _this.getPropValue(item, cloneDeep(args)); }));
        return textArr && textArr.length ? textArr.join(',') : '';
    };
    /**
     * @return {?}
     */
    InputGroupValue.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.value = [];
        this.textValue = undefined;
        this.textField = undefined;
        this.isInputText = undefined;
        this.clear$.emit();
    };
    /**
     * @return {?}
     */
    InputGroupValue.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return !this.textValue;
    };
    return InputGroupValue;
}());
export { InputGroupValue };
if (false) {
    /** @type {?} */
    InputGroupValue.prototype.value;
    /** @type {?} */
    InputGroupValue.prototype.textValue;
    /** @type {?} */
    InputGroupValue.prototype.textField;
    /** @type {?} */
    InputGroupValue.prototype.isInputText;
    /** @type {?} */
    InputGroupValue.prototype.clear$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRncm91cC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktbGlzdC1maWx0ZXIvIiwic291cmNlcyI6WyJsaWIvZW50aXR5L2NvbmRpdGlvbnZhbHVlL2lucHV0Z3JvdXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFN0M7SUFhSSx5QkFBWSxJQUt1RTtRQUx2RSxxQkFBQSxFQUFBLFNBS1AsS0FBSyxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBQztRQVBuRixXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQVF4QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDeEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDN0QsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUN4QyxDQUFDOzs7OztJQUVELHNDQUFZOzs7O0lBQVosVUFBYSxXQUFtQjtRQUFoQyxpQkFJQzs7WUFIUyxJQUFJLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7O1lBQzdCLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUc7Ozs7UUFBQyxVQUFBLElBQUksSUFBSSxPQUFBLEtBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUF4QyxDQUF3QyxFQUFDO1FBQ2hGLE9BQU8sT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUM3RCxDQUFDOzs7Ozs7SUFFRCxzQ0FBWTs7Ozs7SUFBWixVQUFhLElBQVMsRUFBRSxJQUFtQjtRQUN2QyxJQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFDOztnQkFDVCxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUN4QixJQUFHLEdBQUcsRUFBQztnQkFDSCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQzthQUM5RDtpQkFDSTtnQkFDRCxPQUFPLEVBQUUsQ0FBQzthQUNiO1NBQ0o7UUFDRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6QixDQUFDOzs7O0lBQ0Qsd0NBQWM7OztJQUFkO1FBQ0ksT0FBTyxXQUFXLENBQUMsVUFBVSxDQUFDO0lBQ2xDLENBQUM7Ozs7O0lBRUQsMENBQWdCOzs7O0lBQWhCLFVBQWlCLEtBQVU7UUFDdkIsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQy9DLENBQUM7Ozs7SUFFRCwwQ0FBZ0I7OztJQUFoQjtRQUFBLGlCQUlDOztZQUhTLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7O1lBQ2hDLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUc7Ozs7UUFBQyxVQUFBLElBQUksSUFBSSxPQUFBLEtBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUF4QyxDQUF3QyxFQUFDO1FBQ2hGLE9BQU8sT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUM3RCxDQUFDOzs7O0lBRUQsb0NBQVU7OztJQUFWO1FBQ0ksSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxTQUFTLENBQUM7UUFFN0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN2QixDQUFDOzs7O0lBRUQsaUNBQU87OztJQUFQO1FBQ0ksT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDM0IsQ0FBQztJQUVMLHNCQUFDO0FBQUQsQ0FBQyxBQXRFRCxJQXNFQzs7OztJQW5FRyxnQ0FBYTs7SUFFYixvQ0FBa0I7O0lBRWxCLG9DQUFrQjs7SUFFbEIsc0NBQXFCOztJQUVyQixpQ0FBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJVmFsdWUgfSBmcm9tIFwiLi9pdmFsdWVcIjtcclxuaW1wb3J0IHsgQ29udHJvbFR5cGUgfSBmcm9tIFwiLi4vY29udHJvbHR5cGVcIjtcclxuaW1wb3J0IHsgY2xvbmVEZWVwIH0gZnJvbSAnbG9kYXNoLWVzJztcclxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBJbnB1dEdyb3VwVmFsdWUgaW1wbGVtZW50cyBJVmFsdWV7XHJcblxyXG4gICAgLy8g5Y+v6IO95piv55So5oi35omL5Yqo6L6T5YWl55qE5a2X56ym5Liy77yM5Lmf5Y+v6IO95piv6YCa6L+H5by556qX6L+U5Zue55qE5aSa5Liq5YC8XHJcbiAgICB2YWx1ZTogYW55W107XHJcbiAgICAvLyDmjqfku7blhoXmmL7npLrnmoTlgLxcclxuICAgIHRleHRWYWx1ZTogc3RyaW5nO1xyXG4gICAgLy8g5by556qX5qih5byP5LiL77yM5Y+W5by556qX5YiX6KGo5YaF5ZOq5Liq5a2X5q6155qE5YC85pig5bCE5Yiw5b2T5YmN5a2X5q61XHJcbiAgICB0ZXh0RmllbGQ6IHN0cmluZztcclxuICAgIC8vIOaYr+WQpuaYr+aJi+WKqOi+k+WFpeeahOWAvFxyXG4gICAgaXNJbnB1dFRleHQ6IGJvb2xlYW47XHJcblxyXG4gICAgY2xlYXIkID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGRhdGE6IHtcclxuICAgICAgICB2YWx1ZTogYW55LFxyXG4gICAgICAgIHRleHRWYWx1ZTogc3RyaW5nLFxyXG4gICAgICAgIHRleHRGaWVsZDogc3RyaW5nLFxyXG4gICAgICAgIGlzSW5wdXRUZXh0OiBib29sZWFuXHJcbiAgICB9ID0ge3ZhbHVlOiBbXSwgdGV4dFZhbHVlOiB1bmRlZmluZWQsIHRleHRGaWVsZDogdW5kZWZpbmVkLCBpc0lucHV0VGV4dDogdW5kZWZpbmVkfSl7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IGRhdGEudmFsdWU7XHJcbiAgICAgICAgdGhpcy50ZXh0VmFsdWUgPSBkYXRhLnRleHRWYWx1ZSA/IGRhdGEudGV4dFZhbHVlLnRyaW0oKSA6ICcnO1xyXG4gICAgICAgIHRoaXMudGV4dEZpZWxkID0gZGF0YS50ZXh0RmllbGQ7XHJcbiAgICAgICAgdGhpcy5pc0lucHV0VGV4dCA9IGRhdGEuaXNJbnB1dFRleHQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VGV4dFZhbHVlKHRhcmdldEZpZWxkOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IGFyZ3MgPSB0YXJnZXRGaWVsZC5zcGxpdCgnLicpO1xyXG4gICAgICAgIGNvbnN0IHRleHRBcnIgPSB0aGlzLnZhbHVlLm1hcChpdGVtID0+IHRoaXMuZ2V0UHJvcFZhbHVlKGl0ZW0sIGNsb25lRGVlcChhcmdzKSkpO1xyXG4gICAgICAgIHJldHVybiB0ZXh0QXJyICYmIHRleHRBcnIubGVuZ3RoID8gdGV4dEFyci5qb2luKCcsJyk6ICcnO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFByb3BWYWx1ZShpdGVtOiBhbnksIGFyZ3M6IEFycmF5PHN0cmluZz4pOiBhbnl7XHJcbiAgICAgICAgaWYoYXJncy5sZW5ndGggPiAxKXtcclxuICAgICAgICAgICAgY29uc3QgYXJnID0gYXJncy5zaGlmdCgpO1xyXG4gICAgICAgICAgICBpZihhcmcpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW1bYXJnXSA/IHRoaXMuZ2V0UHJvcFZhbHVlKGl0ZW1bYXJnXSwgYXJncykgOiAnJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaXRlbVthcmdzWzBdXTtcclxuICAgIH1cclxuICAgIGdldENvbnRyb2xUeXBlKCk6IENvbnRyb2xUeXBlIHtcclxuICAgICAgICByZXR1cm4gQ29udHJvbFR5cGUuSW5wdXRHcm91cDtcclxuICAgIH1cclxuXHJcbiAgICBzZXRPcmlnaW5hbFZhbHVlKHZhbHVlOiBhbnkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRPcmlnaW5hbFZhbHVlKCk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgYXJncyA9IHRoaXMudGV4dEZpZWxkLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgY29uc3QgdGV4dEFyciA9IHRoaXMudmFsdWUubWFwKGl0ZW0gPT4gdGhpcy5nZXRQcm9wVmFsdWUoaXRlbSwgY2xvbmVEZWVwKGFyZ3MpKSk7XHJcbiAgICAgICAgcmV0dXJuIHRleHRBcnIgJiYgdGV4dEFyci5sZW5ndGggPyB0ZXh0QXJyLmpvaW4oJywnKTogJyc7XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJWYWx1ZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnZhbHVlID0gW107XHJcbiAgICAgICAgdGhpcy50ZXh0VmFsdWUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy50ZXh0RmllbGQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5pc0lucHV0VGV4dCA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICAgICAgdGhpcy5jbGVhciQuZW1pdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGlzRW1wdHkoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuICF0aGlzLnRleHRWYWx1ZTtcclxuICAgIH1cclxuXHJcbn1cclxuIl19