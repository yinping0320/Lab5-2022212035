/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EnumType } from "./enumtype";
import { EnumIntegerValue } from "./integerenumvalue";
import { EnumStringValue } from "./stringenumvalue";
import { EnumBoolValue } from "./boolenumvalue";
/**
 * @record
 */
export function IEnumValue() { }
if (false) {
    /**
     * @return {?}
     */
    IEnumValue.prototype.getEnumType = function () { };
    /**
     * @return {?}
     */
    IEnumValue.prototype.getEnumValueName = function () { };
    /**
     * @return {?}
     */
    IEnumValue.prototype.getEnumValue = function () { };
}
var EnumValueConvert = /** @class */ (function () {
    function EnumValueConvert() {
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    EnumValueConvert.prototype.convertJObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var enumValue = (/** @type {?} */ (obj));
        /** @type {?} */
        var enumType = enumValue.getEnumType();
        /** @type {?} */
        var jobj = new Object();
        jobj["Type"] = enumType;
        jobj["Content"] = enumValue;
        return jobj;
    };
    /**
     * @param {?} jobj
     * @return {?}
     */
    EnumValueConvert.prototype.initFromJobject = /**
     * @param {?} jobj
     * @return {?}
     */
    function (jobj) {
        /** @type {?} */
        var enumType = (/** @type {?} */ (jobj["Type"]));
        /** @type {?} */
        var content = (/** @type {?} */ (jobj["Content"]));
        if (enumType == EnumType.IntType) {
            return Object.assign(new EnumIntegerValue(), content);
        }
        else if (enumType == EnumType.BoolType) {
            return Object.assign(new EnumBoolValue(), content);
        }
        else {
            return Object.assign(new EnumStringValue(), content);
        }
    };
    return EnumValueConvert;
}());
export { EnumValueConvert };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWVudW12YWx1ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktbGlzdC1maWx0ZXIvIiwic291cmNlcyI6WyJsaWIvZW50aXR5L2NvbnRyb2x0eXBlL2Ryb3Bkb3dubGlzdC9pZW51bXZhbHVlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0saUJBQWlCLENBQUM7Ozs7QUFFaEQsZ0NBSUM7Ozs7O0lBSEcsbURBQXVCOzs7O0lBQ3ZCLHdEQUEwQjs7OztJQUMxQixvREFBbUI7O0FBR3ZCO0lBQUE7SUF3QkEsQ0FBQzs7Ozs7SUF0QkcseUNBQWM7Ozs7SUFBZCxVQUFlLEdBQWM7O1lBQ3JCLFNBQVMsR0FBQyxtQkFBQSxHQUFHLEVBQWM7O1lBQzNCLFFBQVEsR0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFOztZQUNoQyxJQUFJLEdBQUMsSUFBSSxNQUFNLEVBQUU7UUFDckIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFDLFFBQVEsQ0FBQztRQUN0QixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUMsU0FBUyxDQUFDO1FBQzFCLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7Ozs7O0lBRUQsMENBQWU7Ozs7SUFBZixVQUFnQixJQUFXOztZQUNuQixRQUFRLEdBQUMsbUJBQUEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFZOztZQUNqQyxPQUFPLEdBQUMsbUJBQUEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFjO1FBQ3pDLElBQUcsUUFBUSxJQUFFLFFBQVEsQ0FBQyxPQUFPLEVBQUM7WUFDMUIsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksZ0JBQWdCLEVBQUUsRUFBQyxPQUFPLENBQUMsQ0FBRTtTQUN6RDthQUNJLElBQUcsUUFBUSxJQUFFLFFBQVEsQ0FBQyxRQUFRLEVBQUM7WUFDaEMsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksYUFBYSxFQUFFLEVBQUMsT0FBTyxDQUFDLENBQUU7U0FDdEQ7YUFDRztZQUNBLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLGVBQWUsRUFBRSxFQUFDLE9BQU8sQ0FBQyxDQUFFO1NBQ3hEO0lBQ0wsQ0FBQztJQUNMLHVCQUFDO0FBQUQsQ0FBQyxBQXhCRCxJQXdCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVudW1UeXBlIH0gZnJvbSBcIi4vZW51bXR5cGVcIjtcclxuaW1wb3J0IHsgRW51bUludGVnZXJWYWx1ZSB9IGZyb20gXCIuL2ludGVnZXJlbnVtdmFsdWVcIjtcclxuaW1wb3J0IHsgRW51bVN0cmluZ1ZhbHVlIH0gZnJvbSBcIi4vc3RyaW5nZW51bXZhbHVlXCI7XHJcbmltcG9ydCB7IEVudW1Cb29sVmFsdWUgfSBmcm9tIFwiLi9ib29sZW51bXZhbHVlXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElFbnVtVmFsdWV7XHJcbiAgICBnZXRFbnVtVHlwZSgpOkVudW1UeXBlO1xyXG4gICAgZ2V0RW51bVZhbHVlTmFtZSgpOnN0cmluZztcclxuICAgIGdldEVudW1WYWx1ZSgpOmFueTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEVudW1WYWx1ZUNvbnZlcnR7XHJcblxyXG4gICAgY29udmVydEpPYmplY3Qob2JqOklFbnVtVmFsdWUpOk9iamVjdHtcclxuICAgICAgICBsZXQgZW51bVZhbHVlPW9iaiBhcyBJRW51bVZhbHVlO1xyXG4gICAgICAgIGxldCBlbnVtVHlwZT1lbnVtVmFsdWUuZ2V0RW51bVR5cGUoKTtcclxuICAgICAgICBsZXQgam9iaj1uZXcgT2JqZWN0KCk7XHJcbiAgICAgICAgam9ialtcIlR5cGVcIl09ZW51bVR5cGU7XHJcbiAgICAgICAgam9ialtcIkNvbnRlbnRcIl09ZW51bVZhbHVlO1xyXG4gICAgICAgIHJldHVybiBqb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIGluaXRGcm9tSm9iamVjdChqb2JqOk9iamVjdCk6SUVudW1WYWx1ZXtcclxuICAgICAgICBsZXQgZW51bVR5cGU9am9ialtcIlR5cGVcIl0gYXMgRW51bVR5cGU7XHJcbiAgICAgICAgbGV0IGNvbnRlbnQ9am9ialtcIkNvbnRlbnRcIl0gYXMgSUVudW1WYWx1ZTtcclxuICAgICAgICBpZihlbnVtVHlwZT09RW51bVR5cGUuSW50VHlwZSl7XHJcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBFbnVtSW50ZWdlclZhbHVlKCksY29udGVudCkgO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKGVudW1UeXBlPT1FbnVtVHlwZS5Cb29sVHlwZSl7XHJcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBFbnVtQm9vbFZhbHVlKCksY29udGVudCkgO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgRW51bVN0cmluZ1ZhbHVlKCksY29udGVudCkgO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==