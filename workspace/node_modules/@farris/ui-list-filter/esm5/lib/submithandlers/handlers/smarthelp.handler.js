/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CompareType } from '../enum/compare-type.enum';
import { ValueType } from '../enum/value-type.enum';
import { RelationType } from '../enum/relation-type.enum';
var SmartHelpHandler = /** @class */ (function () {
    function SmartHelpHandler() {
    }
    // convert(qc: QueryCondition) {
    //     const shv = (qc.value as HelpValue);
    //     if(Object.keys(shv).length === 0 || !shv.value || !shv.valueField){
    //         return [];
    //     }else{
    //         // return [{
    //         //     'FilterField' : qc.fieldCode,
    //         //     'Compare' : CompareType.Equal, //equal
    //         //     'Value' : (shv.value)[shv.valueField],
    //         //     'Relation' : RelationType.And,
    //         //     'Expresstype': ValueType.Value
    //         // }];
    //         return [{
    //             'FilterField' : qc.fieldCode,
    //             'Compare' : CompareType.Equal, //equal
    //             'Value' : HelpValue.getPropValues(shv.value, shv.valueField.split('.')),
    //             'Relation' : RelationType.And,
    //             'Expresstype': ValueType.Value
    //         }];
    //     }
    // }
    // convert(qc: QueryCondition) {
    //     const shv = (qc.value as HelpValue);
    //     if(Object.keys(shv).length === 0 || !shv.value || !shv.valueField){
    //         return [];
    //     }else{
    //         // return [{
    //         //     'FilterField' : qc.fieldCode,
    //         //     'Compare' : CompareType.Equal, //equal
    //         //     'Value' : (shv.value)[shv.valueField],
    //         //     'Relation' : RelationType.And,
    //         //     'Expresstype': ValueType.Value
    //         // }];
    //         return [{
    //             'FilterField' : qc.fieldCode,
    //             'Compare' : CompareType.Equal, //equal
    //             'Value' : HelpValue.getPropValues(shv.value, shv.valueField.split('.')),
    //             'Relation' : RelationType.And,
    //             'Expresstype': ValueType.Value
    //         }];
    //     }
    // }
    /**
     * @param {?} qc
     * @return {?}
     */
    SmartHelpHandler.prototype.convert = 
    // convert(qc: QueryCondition) {
    //     const shv = (qc.value as HelpValue);
    //     if(Object.keys(shv).length === 0 || !shv.value || !shv.valueField){
    //         return [];
    //     }else{
    //         // return [{
    //         //     'FilterField' : qc.fieldCode,
    //         //     'Compare' : CompareType.Equal, //equal
    //         //     'Value' : (shv.value)[shv.valueField],
    //         //     'Relation' : RelationType.And,
    //         //     'Expresstype': ValueType.Value
    //         // }];
    //         return [{
    //             'FilterField' : qc.fieldCode,
    //             'Compare' : CompareType.Equal, //equal
    //             'Value' : HelpValue.getPropValues(shv.value, shv.valueField.split('.')),
    //             'Relation' : RelationType.And,
    //             'Expresstype': ValueType.Value
    //         }];
    //     }
    // }
    /**
     * @param {?} qc
     * @return {?}
     */
    function (qc) {
        /** @type {?} */
        var shv = ((/** @type {?} */ (qc.value)));
        if (shv.value.length == 0 || !shv.valueField) {
            return [];
        }
        else {
            /** @type {?} */
            var arr_1 = [];
            shv.getOriginalValue().split(',').forEach((/**
             * @param {?} id
             * @return {?}
             */
            function (id) {
                id && arr_1.push({
                    'FilterField': qc.fieldCode,
                    'Compare': CompareType.Equal,
                    'Value': id,
                    'Relation': RelationType.Or,
                    'Expresstype': ValueType.Value
                });
            }));
            if (arr_1.length > 0) {
                arr_1[0]['Lbracket'] = '(';
                arr_1[arr_1.length - 1]['Rbracket'] = ')';
                arr_1[arr_1.length - 1]['Relation'] = RelationType.And;
                return arr_1;
            }
            else {
                return [];
            }
        }
    };
    return SmartHelpHandler;
}());
export { SmartHelpHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21hcnRoZWxwLmhhbmRsZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWxpc3QtZmlsdGVyLyIsInNvdXJjZXMiOlsibGliL3N1Ym1pdGhhbmRsZXJzL2hhbmRsZXJzL3NtYXJ0aGVscC5oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUkxRDtJQUFBO0lBZ0RBLENBQUM7SUEvQ0csZ0NBQWdDO0lBQ2hDLDJDQUEyQztJQUMzQywwRUFBMEU7SUFDMUUscUJBQXFCO0lBQ3JCLGFBQWE7SUFDYix1QkFBdUI7SUFDdkIsK0NBQStDO0lBQy9DLHdEQUF3RDtJQUN4RCx3REFBd0Q7SUFDeEQsZ0RBQWdEO0lBQ2hELGdEQUFnRDtJQUNoRCxpQkFBaUI7SUFDakIsb0JBQW9CO0lBQ3BCLDRDQUE0QztJQUM1QyxxREFBcUQ7SUFDckQsdUZBQXVGO0lBQ3ZGLDZDQUE2QztJQUM3Qyw2Q0FBNkM7SUFDN0MsY0FBYztJQUNkLFFBQVE7SUFDUixJQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQUVKLGtDQUFPOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQUFQLFVBQVEsRUFBa0I7O1lBQ2hCLEdBQUcsR0FBRyxDQUFDLG1CQUFBLEVBQUUsQ0FBQyxLQUFLLEVBQWEsQ0FBQztRQUNuQyxJQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUM7WUFDeEMsT0FBTyxFQUFFLENBQUM7U0FDYjthQUFJOztnQkFDSyxLQUFHLEdBQUcsRUFBRTtZQUNkLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPOzs7O1lBQUMsVUFBQSxFQUFFO2dCQUN4QyxFQUFFLElBQUksS0FBRyxDQUFDLElBQUksQ0FBQztvQkFDWCxhQUFhLEVBQUcsRUFBRSxDQUFDLFNBQVM7b0JBQzVCLFNBQVMsRUFBRyxXQUFXLENBQUMsS0FBSztvQkFDN0IsT0FBTyxFQUFHLEVBQUU7b0JBQ1osVUFBVSxFQUFHLFlBQVksQ0FBQyxFQUFFO29CQUM1QixhQUFhLEVBQUMsU0FBUyxDQUFDLEtBQUs7aUJBQ2hDLENBQUMsQ0FBQztZQUNQLENBQUMsRUFBQyxDQUFDO1lBQ0gsSUFBRyxLQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBQztnQkFDZCxLQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsR0FBRyxDQUFDO2dCQUN6QixLQUFHLENBQUMsS0FBRyxDQUFDLE1BQU0sR0FBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxHQUFHLENBQUM7Z0JBQ3JDLEtBQUcsQ0FBQyxLQUFHLENBQUMsTUFBTSxHQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUM7Z0JBQ2xELE9BQU8sS0FBRyxDQUFDO2FBQ2Q7aUJBQUk7Z0JBQ0QsT0FBTyxFQUFFLENBQUM7YUFDYjtTQUNKO0lBQ0wsQ0FBQztJQUNMLHVCQUFDO0FBQUQsQ0FBQyxBQWhERCxJQWdEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElRdWVyeUNvbmRpdGlvbkhhbmRsZXIgfSBmcm9tIFwiLi9pcXVlcnljb25kaXRpb24uaGFuZGxlclwiO1xyXG5cclxuaW1wb3J0IHsgQ29tcGFyZVR5cGUgfSBmcm9tICcuLi9lbnVtL2NvbXBhcmUtdHlwZS5lbnVtJztcclxuaW1wb3J0IHsgVmFsdWVUeXBlIH0gZnJvbSAnLi4vZW51bS92YWx1ZS10eXBlLmVudW0nO1xyXG5pbXBvcnQgeyBSZWxhdGlvblR5cGUgfSBmcm9tICcuLi9lbnVtL3JlbGF0aW9uLXR5cGUuZW51bSc7XHJcbmltcG9ydCB7IFF1ZXJ5Q29uZGl0aW9uIH0gZnJvbSAnLi4vLi4vZW50aXR5L3F1ZXJ5Y29uZGl0aW9uJztcclxuaW1wb3J0IHsgSGVscFZhbHVlIH0gZnJvbSAnLi4vLi4vZW50aXR5L2NvbmRpdGlvbnZhbHVlL2hlbHB2YWx1ZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgU21hcnRIZWxwSGFuZGxlciBpbXBsZW1lbnRzIElRdWVyeUNvbmRpdGlvbkhhbmRsZXJ7XHJcbiAgICAvLyBjb252ZXJ0KHFjOiBRdWVyeUNvbmRpdGlvbikge1xyXG4gICAgLy8gICAgIGNvbnN0IHNodiA9IChxYy52YWx1ZSBhcyBIZWxwVmFsdWUpO1xyXG4gICAgLy8gICAgIGlmKE9iamVjdC5rZXlzKHNodikubGVuZ3RoID09PSAwIHx8ICFzaHYudmFsdWUgfHwgIXNodi52YWx1ZUZpZWxkKXtcclxuICAgIC8vICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgLy8gICAgIH1lbHNle1xyXG4gICAgLy8gICAgICAgICAvLyByZXR1cm4gW3tcclxuICAgIC8vICAgICAgICAgLy8gICAgICdGaWx0ZXJGaWVsZCcgOiBxYy5maWVsZENvZGUsXHJcbiAgICAvLyAgICAgICAgIC8vICAgICAnQ29tcGFyZScgOiBDb21wYXJlVHlwZS5FcXVhbCwgLy9lcXVhbFxyXG4gICAgLy8gICAgICAgICAvLyAgICAgJ1ZhbHVlJyA6IChzaHYudmFsdWUpW3Nodi52YWx1ZUZpZWxkXSxcclxuICAgIC8vICAgICAgICAgLy8gICAgICdSZWxhdGlvbicgOiBSZWxhdGlvblR5cGUuQW5kLFxyXG4gICAgLy8gICAgICAgICAvLyAgICAgJ0V4cHJlc3N0eXBlJzogVmFsdWVUeXBlLlZhbHVlXHJcbiAgICAvLyAgICAgICAgIC8vIH1dO1xyXG4gICAgLy8gICAgICAgICByZXR1cm4gW3tcclxuICAgIC8vICAgICAgICAgICAgICdGaWx0ZXJGaWVsZCcgOiBxYy5maWVsZENvZGUsXHJcbiAgICAvLyAgICAgICAgICAgICAnQ29tcGFyZScgOiBDb21wYXJlVHlwZS5FcXVhbCwgLy9lcXVhbFxyXG4gICAgLy8gICAgICAgICAgICAgJ1ZhbHVlJyA6IEhlbHBWYWx1ZS5nZXRQcm9wVmFsdWVzKHNodi52YWx1ZSwgc2h2LnZhbHVlRmllbGQuc3BsaXQoJy4nKSksXHJcbiAgICAvLyAgICAgICAgICAgICAnUmVsYXRpb24nIDogUmVsYXRpb25UeXBlLkFuZCxcclxuICAgIC8vICAgICAgICAgICAgICdFeHByZXNzdHlwZSc6IFZhbHVlVHlwZS5WYWx1ZVxyXG4gICAgLy8gICAgICAgICB9XTtcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyB9XHJcblxyXG4gICAgY29udmVydChxYzogUXVlcnlDb25kaXRpb24pIHtcclxuICAgICAgICBjb25zdCBzaHYgPSAocWMudmFsdWUgYXMgSGVscFZhbHVlKTtcclxuICAgICAgICBpZihzaHYudmFsdWUubGVuZ3RoID09IDAgfHwgIXNodi52YWx1ZUZpZWxkKXtcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICBjb25zdCBhcnIgPSBbXTtcclxuICAgICAgICAgICAgc2h2LmdldE9yaWdpbmFsVmFsdWUoKS5zcGxpdCgnLCcpLmZvckVhY2goaWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWQgJiYgYXJyLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICdGaWx0ZXJGaWVsZCcgOiBxYy5maWVsZENvZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0NvbXBhcmUnIDogQ29tcGFyZVR5cGUuRXF1YWwsXHJcbiAgICAgICAgICAgICAgICAgICAgJ1ZhbHVlJyA6IGlkLFxyXG4gICAgICAgICAgICAgICAgICAgICdSZWxhdGlvbicgOiBSZWxhdGlvblR5cGUuT3IsXHJcbiAgICAgICAgICAgICAgICAgICAgJ0V4cHJlc3N0eXBlJzpWYWx1ZVR5cGUuVmFsdWVcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYoYXJyLmxlbmd0aCA+IDApe1xyXG4gICAgICAgICAgICAgICAgYXJyWzBdWydMYnJhY2tldCddID0gJygnO1xyXG4gICAgICAgICAgICAgICAgYXJyW2Fyci5sZW5ndGggLTFdWydSYnJhY2tldCddID0gJyknO1xyXG4gICAgICAgICAgICAgICAgYXJyW2Fyci5sZW5ndGggLTFdWydSZWxhdGlvbiddID0gUmVsYXRpb25UeXBlLkFuZDtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhcnI7XHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il19