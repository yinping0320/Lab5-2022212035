/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CompareType } from '../enum/compare-type.enum';
import { ValueType } from '../enum/value-type.enum';
import { RelationType } from '../enum/relation-type.enum';
var YearRangeHandler = /** @class */ (function () {
    function YearRangeHandler() {
    }
    /**
     * @param {?} qc
     * @return {?}
     */
    YearRangeHandler.prototype.convert = /**
     * @param {?} qc
     * @return {?}
     */
    function (qc) {
        /** @type {?} */
        var arr = [];
        /** @type {?} */
        var drv = ((/** @type {?} */ (qc.value)));
        if (Object.keys(drv).length === 0 || (!drv.startTime && !drv.endTime))
            return arr;
        drv.startTime && arr.push({
            'FilterField': qc.fieldCode,
            'Compare': CompareType.GreaterThanOrEqual,
            //GreaterOrEqual
            'Value': drv.startTime,
            'Relation': RelationType.And,
            //and
            'Expresstype': ValueType.Value
        });
        drv.endTime && arr.push({
            'FilterField': qc.fieldCode,
            'Compare': CompareType.LessThanOrEqual,
            //LessOrEqual
            'Value': drv.endTime,
            'Relation': RelationType.And,
            //and
            'Expresstype': ValueType.Value
        });
        return arr;
    };
    return YearRangeHandler;
}());
export { YearRangeHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWVhcnJhZ2UuaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktbGlzdC1maWx0ZXIvIiwic291cmNlcyI6WyJsaWIvc3VibWl0aGFuZGxlcnMvaGFuZGxlcnMveWVhcnJhZ2UuaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFJMUQ7SUFBQTtJQXVCQSxDQUFDOzs7OztJQXRCRyxrQ0FBTzs7OztJQUFQLFVBQVEsRUFBa0I7O1lBQ2hCLEdBQUcsR0FBRyxFQUFFOztZQUNSLEdBQUcsR0FBRyxDQUFDLG1CQUFBLEVBQUUsQ0FBQyxLQUFLLEVBQWtCLENBQUM7UUFDeEMsSUFBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDO1lBQ2hFLE9BQU8sR0FBRyxDQUFDO1FBQ2YsR0FBRyxDQUFDLFNBQVMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDO1lBQ3RCLGFBQWEsRUFBRyxFQUFFLENBQUMsU0FBUztZQUM1QixTQUFTLEVBQUcsV0FBVyxDQUFDLGtCQUFrQjs7WUFDMUMsT0FBTyxFQUFHLEdBQUcsQ0FBQyxTQUFTO1lBQ3ZCLFVBQVUsRUFBRyxZQUFZLENBQUMsR0FBRzs7WUFDN0IsYUFBYSxFQUFFLFNBQVMsQ0FBQyxLQUFLO1NBQ2pDLENBQUMsQ0FBQztRQUNILEdBQUcsQ0FBQyxPQUFPLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQztZQUNwQixhQUFhLEVBQUcsRUFBRSxDQUFDLFNBQVM7WUFDNUIsU0FBUyxFQUFHLFdBQVcsQ0FBQyxlQUFlOztZQUN2QyxPQUFPLEVBQUcsR0FBRyxDQUFDLE9BQU87WUFDckIsVUFBVSxFQUFHLFlBQVksQ0FBQyxHQUFHOztZQUM3QixhQUFhLEVBQUUsU0FBUyxDQUFDLEtBQUs7U0FDakMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0wsdUJBQUM7QUFBRCxDQUFDLEFBdkJELElBdUJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVF1ZXJ5Q29uZGl0aW9uSGFuZGxlciB9IGZyb20gXCIuL2lxdWVyeWNvbmRpdGlvbi5oYW5kbGVyXCI7XHJcblxyXG5pbXBvcnQgeyBDb21wYXJlVHlwZSB9IGZyb20gJy4uL2VudW0vY29tcGFyZS10eXBlLmVudW0nO1xyXG5pbXBvcnQgeyBWYWx1ZVR5cGUgfSBmcm9tICcuLi9lbnVtL3ZhbHVlLXR5cGUuZW51bSc7XHJcbmltcG9ydCB7IFJlbGF0aW9uVHlwZSB9IGZyb20gJy4uL2VudW0vcmVsYXRpb24tdHlwZS5lbnVtJztcclxuaW1wb3J0IHsgUXVlcnlDb25kaXRpb24gfSBmcm9tICcuLi8uLi9lbnRpdHkvcXVlcnljb25kaXRpb24nO1xyXG5pbXBvcnQgeyBZZWFyUmFuZ2VWYWx1ZSB9IGZyb20gJy4uLy4uL2VudGl0eS9jb25kaXRpb252YWx1ZS95ZWFycmFuZ2UnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFllYXJSYW5nZUhhbmRsZXIgaW1wbGVtZW50cyBJUXVlcnlDb25kaXRpb25IYW5kbGVye1xyXG4gICAgY29udmVydChxYzogUXVlcnlDb25kaXRpb24pIHtcclxuICAgICAgICBjb25zdCBhcnIgPSBbXTtcclxuICAgICAgICBjb25zdCBkcnYgPSAocWMudmFsdWUgYXMgWWVhclJhbmdlVmFsdWUpO1xyXG4gICAgICAgIGlmKE9iamVjdC5rZXlzKGRydikubGVuZ3RoID09PSAwIHx8ICghZHJ2LnN0YXJ0VGltZSAmJiAhZHJ2LmVuZFRpbWUpKVxyXG4gICAgICAgICAgICByZXR1cm4gYXJyO1xyXG4gICAgICAgIGRydi5zdGFydFRpbWUgJiYgYXJyLnB1c2goe1xyXG4gICAgICAgICAgICAnRmlsdGVyRmllbGQnIDogcWMuZmllbGRDb2RlLFxyXG4gICAgICAgICAgICAnQ29tcGFyZScgOiBDb21wYXJlVHlwZS5HcmVhdGVyVGhhbk9yRXF1YWwsIC8vR3JlYXRlck9yRXF1YWxcclxuICAgICAgICAgICAgJ1ZhbHVlJyA6IGRydi5zdGFydFRpbWUsXHJcbiAgICAgICAgICAgICdSZWxhdGlvbicgOiBSZWxhdGlvblR5cGUuQW5kLCAvL2FuZFxyXG4gICAgICAgICAgICAnRXhwcmVzc3R5cGUnOiBWYWx1ZVR5cGUuVmFsdWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBkcnYuZW5kVGltZSAmJiBhcnIucHVzaCh7XHJcbiAgICAgICAgICAgICdGaWx0ZXJGaWVsZCcgOiBxYy5maWVsZENvZGUsXHJcbiAgICAgICAgICAgICdDb21wYXJlJyA6IENvbXBhcmVUeXBlLkxlc3NUaGFuT3JFcXVhbCwgLy9MZXNzT3JFcXVhbFxyXG4gICAgICAgICAgICAnVmFsdWUnIDogZHJ2LmVuZFRpbWUsXHJcbiAgICAgICAgICAgICdSZWxhdGlvbicgOiBSZWxhdGlvblR5cGUuQW5kLC8vYW5kXHJcbiAgICAgICAgICAgICdFeHByZXNzdHlwZSc6IFZhbHVlVHlwZS5WYWx1ZVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gYXJyO1xyXG4gICAgfVxyXG59Il19