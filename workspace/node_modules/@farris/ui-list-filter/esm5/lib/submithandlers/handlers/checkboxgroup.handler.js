/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CompareType } from '../enum/compare-type.enum';
import { ValueType } from '../enum/value-type.enum';
import { RelationType } from '../enum/relation-type.enum';
var CheckboxGroupHandler = /** @class */ (function () {
    function CheckboxGroupHandler() {
    }
    /**
     * @param {?} qc
     * @return {?}
     */
    CheckboxGroupHandler.prototype.convert = /**
     * @param {?} qc
     * @return {?}
     */
    function (qc) {
        /** @type {?} */
        var cbgv = ((/** @type {?} */ (qc.value)));
        if (Object.keys(cbgv).length === 0 || Object.keys(cbgv.value).length === 0)
            return [];
        /** @type {?} */
        var CheckboxArr = [];
        if (cbgv.value.length === 1) {
            return [{
                    'FilterField': qc.fieldCode,
                    'Compare': CompareType.Equal,
                    'Value': (cbgv.value[0]),
                    'Relation': RelationType.And,
                    'Expresstype': ValueType.Value
                }];
        }
        cbgv.value.forEach((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            CheckboxArr.push({
                'FilterField': qc.fieldCode,
                'Compare': CompareType.Equal,
                'Value': value,
                'Relation': RelationType.Or,
                'Expresstype': ValueType.Value
            });
        }));
        CheckboxArr[0]['Lbracket'] = '(';
        CheckboxArr[CheckboxArr.length - 1]['Rbracket'] = ')';
        CheckboxArr[CheckboxArr.length - 1]['Relation'] = RelationType.And;
        return CheckboxArr;
    };
    return CheckboxGroupHandler;
}());
export { CheckboxGroupHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3hncm91cC5oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1saXN0LWZpbHRlci8iLCJzb3VyY2VzIjpbImxpYi9zdWJtaXRoYW5kbGVycy9oYW5kbGVycy9jaGVja2JveGdyb3VwLmhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBSzFEO0lBQUE7SUE2QkEsQ0FBQzs7Ozs7SUE1Qkcsc0NBQU87Ozs7SUFBUCxVQUFRLEVBQWtCOztZQUNoQixJQUFJLEdBQUcsQ0FBQyxtQkFBQSxFQUFFLENBQUMsS0FBSyxFQUFzQixDQUFDO1FBQzdDLElBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDO1lBQ3JFLE9BQU8sRUFBRSxDQUFDOztZQUNWLFdBQVcsR0FBRyxFQUFFO1FBQ3BCLElBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFDO1lBQ3ZCLE9BQU8sQ0FBQztvQkFDSixhQUFhLEVBQUcsRUFBRSxDQUFDLFNBQVM7b0JBQzVCLFNBQVMsRUFBRyxXQUFXLENBQUMsS0FBSztvQkFDN0IsT0FBTyxFQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDekIsVUFBVSxFQUFHLFlBQVksQ0FBQyxHQUFHO29CQUM3QixhQUFhLEVBQUUsU0FBUyxDQUFDLEtBQUs7aUJBQ2pDLENBQUMsQ0FBQTtTQUNMO1FBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPOzs7O1FBQUMsVUFBQSxLQUFLO1lBQ3BCLFdBQVcsQ0FBQyxJQUFJLENBQUM7Z0JBQ2IsYUFBYSxFQUFHLEVBQUUsQ0FBQyxTQUFTO2dCQUM1QixTQUFTLEVBQUcsV0FBVyxDQUFDLEtBQUs7Z0JBQzdCLE9BQU8sRUFBRyxLQUFLO2dCQUNmLFVBQVUsRUFBRyxZQUFZLENBQUMsRUFBRTtnQkFDNUIsYUFBYSxFQUFFLFNBQVMsQ0FBQyxLQUFLO2FBQ2pDLENBQUMsQ0FBQTtRQUNOLENBQUMsRUFBQyxDQUFDO1FBQ0gsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUNqQyxXQUFXLENBQUMsV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDdEQsV0FBVyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEdBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsWUFBWSxDQUFDLEdBQUcsQ0FBQztRQUNsRSxPQUFPLFdBQVcsQ0FBQztJQUN2QixDQUFDO0lBQ0wsMkJBQUM7QUFBRCxDQUFDLEFBN0JELElBNkJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVF1ZXJ5Q29uZGl0aW9uSGFuZGxlciB9IGZyb20gXCIuL2lxdWVyeWNvbmRpdGlvbi5oYW5kbGVyXCI7XHJcblxyXG5pbXBvcnQgeyBDb21wYXJlVHlwZSB9IGZyb20gJy4uL2VudW0vY29tcGFyZS10eXBlLmVudW0nO1xyXG5pbXBvcnQgeyBWYWx1ZVR5cGUgfSBmcm9tICcuLi9lbnVtL3ZhbHVlLXR5cGUuZW51bSc7XHJcbmltcG9ydCB7IFJlbGF0aW9uVHlwZSB9IGZyb20gJy4uL2VudW0vcmVsYXRpb24tdHlwZS5lbnVtJztcclxuaW1wb3J0IHsgUXVlcnlDb25kaXRpb24gfSBmcm9tICcuLi8uLi9lbnRpdHkvcXVlcnljb25kaXRpb24nO1xyXG5pbXBvcnQgeyBDaGVja2JveEdyb3VwVmFsdWUgfSBmcm9tICcuLi8uLi9lbnRpdHkvY29uZGl0aW9udmFsdWUvY2hlY2tib3hncm91cHZhbHVlJztcclxuaW1wb3J0IHsgQ2hlY2tib3hJRW51bVZhbHVlIH0gZnJvbSAnLi4vLi4vZW50aXR5L2NvbnRyb2x0eXBlL2NoZWNrYm94L2llbnVtdmFsdWUnO1xyXG5cclxuZXhwb3J0IGNsYXNzIENoZWNrYm94R3JvdXBIYW5kbGVyIGltcGxlbWVudHMgSVF1ZXJ5Q29uZGl0aW9uSGFuZGxlcntcclxuICAgIGNvbnZlcnQocWM6IFF1ZXJ5Q29uZGl0aW9uKSB7XHJcbiAgICAgICAgY29uc3QgY2JndiA9IChxYy52YWx1ZSBhcyBDaGVja2JveEdyb3VwVmFsdWUpO1xyXG4gICAgICAgIGlmKE9iamVjdC5rZXlzKGNiZ3YpLmxlbmd0aCA9PT0gMCB8fCBPYmplY3Qua2V5cyhjYmd2LnZhbHVlKS5sZW5ndGggPT09IDApXHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICBsZXQgQ2hlY2tib3hBcnIgPSBbXTtcclxuICAgICAgICBpZihjYmd2LnZhbHVlLmxlbmd0aCA9PT0gMSl7XHJcbiAgICAgICAgICAgIHJldHVybiBbe1xyXG4gICAgICAgICAgICAgICAgJ0ZpbHRlckZpZWxkJyA6IHFjLmZpZWxkQ29kZSxcclxuICAgICAgICAgICAgICAgICdDb21wYXJlJyA6IENvbXBhcmVUeXBlLkVxdWFsLFxyXG4gICAgICAgICAgICAgICAgJ1ZhbHVlJyA6IChjYmd2LnZhbHVlWzBdKSxcclxuICAgICAgICAgICAgICAgICdSZWxhdGlvbicgOiBSZWxhdGlvblR5cGUuQW5kLFxyXG4gICAgICAgICAgICAgICAgJ0V4cHJlc3N0eXBlJzogVmFsdWVUeXBlLlZhbHVlXHJcbiAgICAgICAgICAgIH1dXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNiZ3YudmFsdWUuZm9yRWFjaCh2YWx1ZSA9PiB7XHJcbiAgICAgICAgICAgIENoZWNrYm94QXJyLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgJ0ZpbHRlckZpZWxkJyA6IHFjLmZpZWxkQ29kZSxcclxuICAgICAgICAgICAgICAgICdDb21wYXJlJyA6IENvbXBhcmVUeXBlLkVxdWFsLFxyXG4gICAgICAgICAgICAgICAgJ1ZhbHVlJyA6IHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgJ1JlbGF0aW9uJyA6IFJlbGF0aW9uVHlwZS5PcixcclxuICAgICAgICAgICAgICAgICdFeHByZXNzdHlwZSc6IFZhbHVlVHlwZS5WYWx1ZVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIENoZWNrYm94QXJyWzBdWydMYnJhY2tldCddID0gJygnO1xyXG4gICAgICAgIENoZWNrYm94QXJyW0NoZWNrYm94QXJyLmxlbmd0aCAtIDFdWydSYnJhY2tldCddID0gJyknO1xyXG4gICAgICAgIENoZWNrYm94QXJyW0NoZWNrYm94QXJyLmxlbmd0aCAtMV1bJ1JlbGF0aW9uJ10gPSBSZWxhdGlvblR5cGUuQW5kO1xyXG4gICAgICAgIHJldHVybiBDaGVja2JveEFycjtcclxuICAgIH1cclxufSJdfQ==