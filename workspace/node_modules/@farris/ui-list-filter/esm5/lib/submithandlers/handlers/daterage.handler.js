/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CompareType } from '../enum/compare-type.enum';
import { ValueType } from '../enum/value-type.enum';
import { RelationType } from '../enum/relation-type.enum';
var DateRangeHandler = /** @class */ (function () {
    function DateRangeHandler() {
    }
    /**
     * @param {?} qc
     * @return {?}
     */
    DateRangeHandler.prototype.convert = /**
     * @param {?} qc
     * @return {?}
     */
    function (qc) {
        /** @type {?} */
        var arr = [];
        /** @type {?} */
        var drv = ((/** @type {?} */ (qc.value)));
        if (Object.keys(drv).length === 0 || (!drv.startTime && !drv.endTime))
            return arr;
        drv.startTime && arr.push({
            'FilterField': qc.fieldCode,
            'Compare': CompareType.GreaterThanOrEqual,
            //GreaterOrEqual
            'Value': drv.startTime,
            'Relation': RelationType.And,
            //and
            'Expresstype': ValueType.Value
        });
        drv.endTime && arr.push({
            'FilterField': qc.fieldCode,
            'Compare': CompareType.LessThanOrEqual,
            //LessOrEqual
            'Value': drv.endTime,
            'Relation': RelationType.And,
            //and
            'Expresstype': ValueType.Value
        });
        return arr;
    };
    return DateRangeHandler;
}());
export { DateRangeHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXJhZ2UuaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktbGlzdC1maWx0ZXIvIiwic291cmNlcyI6WyJsaWIvc3VibWl0aGFuZGxlcnMvaGFuZGxlcnMvZGF0ZXJhZ2UuaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFJMUQ7SUFBQTtJQXVCQSxDQUFDOzs7OztJQXRCRyxrQ0FBTzs7OztJQUFQLFVBQVEsRUFBa0I7O1lBQ2hCLEdBQUcsR0FBRyxFQUFFOztZQUNSLEdBQUcsR0FBRyxDQUFDLG1CQUFBLEVBQUUsQ0FBQyxLQUFLLEVBQWtCLENBQUM7UUFDeEMsSUFBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDO1lBQ2hFLE9BQU8sR0FBRyxDQUFDO1FBQ2YsR0FBRyxDQUFDLFNBQVMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDO1lBQ3RCLGFBQWEsRUFBRyxFQUFFLENBQUMsU0FBUztZQUM1QixTQUFTLEVBQUcsV0FBVyxDQUFDLGtCQUFrQjs7WUFDMUMsT0FBTyxFQUFHLEdBQUcsQ0FBQyxTQUFTO1lBQ3ZCLFVBQVUsRUFBRyxZQUFZLENBQUMsR0FBRzs7WUFDN0IsYUFBYSxFQUFFLFNBQVMsQ0FBQyxLQUFLO1NBQ2pDLENBQUMsQ0FBQztRQUNILEdBQUcsQ0FBQyxPQUFPLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQztZQUNwQixhQUFhLEVBQUcsRUFBRSxDQUFDLFNBQVM7WUFDNUIsU0FBUyxFQUFHLFdBQVcsQ0FBQyxlQUFlOztZQUN2QyxPQUFPLEVBQUcsR0FBRyxDQUFDLE9BQU87WUFDckIsVUFBVSxFQUFHLFlBQVksQ0FBQyxHQUFHOztZQUM3QixhQUFhLEVBQUUsU0FBUyxDQUFDLEtBQUs7U0FDakMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0wsdUJBQUM7QUFBRCxDQUFDLEFBdkJELElBdUJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVF1ZXJ5Q29uZGl0aW9uSGFuZGxlciB9IGZyb20gXCIuL2lxdWVyeWNvbmRpdGlvbi5oYW5kbGVyXCI7XHJcblxyXG5pbXBvcnQgeyBDb21wYXJlVHlwZSB9IGZyb20gJy4uL2VudW0vY29tcGFyZS10eXBlLmVudW0nO1xyXG5pbXBvcnQgeyBWYWx1ZVR5cGUgfSBmcm9tICcuLi9lbnVtL3ZhbHVlLXR5cGUuZW51bSc7XHJcbmltcG9ydCB7IFJlbGF0aW9uVHlwZSB9IGZyb20gJy4uL2VudW0vcmVsYXRpb24tdHlwZS5lbnVtJztcclxuaW1wb3J0IHsgUXVlcnlDb25kaXRpb24gfSBmcm9tICcuLi8uLi9lbnRpdHkvcXVlcnljb25kaXRpb24nO1xyXG5pbXBvcnQgeyBEYXRlUmFuZ2VWYWx1ZSB9IGZyb20gJy4uLy4uL2VudGl0eS9jb25kaXRpb252YWx1ZS9kYXRlcmFuZ2V2YWx1ZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgRGF0ZVJhbmdlSGFuZGxlciBpbXBsZW1lbnRzIElRdWVyeUNvbmRpdGlvbkhhbmRsZXJ7XHJcbiAgICBjb252ZXJ0KHFjOiBRdWVyeUNvbmRpdGlvbikge1xyXG4gICAgICAgIGNvbnN0IGFyciA9IFtdO1xyXG4gICAgICAgIGNvbnN0IGRydiA9IChxYy52YWx1ZSBhcyBEYXRlUmFuZ2VWYWx1ZSk7XHJcbiAgICAgICAgaWYoT2JqZWN0LmtleXMoZHJ2KS5sZW5ndGggPT09IDAgfHwgKCFkcnYuc3RhcnRUaW1lICYmICFkcnYuZW5kVGltZSkpXHJcbiAgICAgICAgICAgIHJldHVybiBhcnI7XHJcbiAgICAgICAgZHJ2LnN0YXJ0VGltZSAmJiBhcnIucHVzaCh7XHJcbiAgICAgICAgICAgICdGaWx0ZXJGaWVsZCcgOiBxYy5maWVsZENvZGUsXHJcbiAgICAgICAgICAgICdDb21wYXJlJyA6IENvbXBhcmVUeXBlLkdyZWF0ZXJUaGFuT3JFcXVhbCwgLy9HcmVhdGVyT3JFcXVhbFxyXG4gICAgICAgICAgICAnVmFsdWUnIDogZHJ2LnN0YXJ0VGltZSxcclxuICAgICAgICAgICAgJ1JlbGF0aW9uJyA6IFJlbGF0aW9uVHlwZS5BbmQsIC8vYW5kXHJcbiAgICAgICAgICAgICdFeHByZXNzdHlwZSc6IFZhbHVlVHlwZS5WYWx1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGRydi5lbmRUaW1lICYmIGFyci5wdXNoKHtcclxuICAgICAgICAgICAgJ0ZpbHRlckZpZWxkJyA6IHFjLmZpZWxkQ29kZSxcclxuICAgICAgICAgICAgJ0NvbXBhcmUnIDogQ29tcGFyZVR5cGUuTGVzc1RoYW5PckVxdWFsLCAvL0xlc3NPckVxdWFsXHJcbiAgICAgICAgICAgICdWYWx1ZScgOiBkcnYuZW5kVGltZSxcclxuICAgICAgICAgICAgJ1JlbGF0aW9uJyA6IFJlbGF0aW9uVHlwZS5BbmQsLy9hbmRcclxuICAgICAgICAgICAgJ0V4cHJlc3N0eXBlJzogVmFsdWVUeXBlLlZhbHVlXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiBhcnI7XHJcbiAgICB9XHJcbn0iXX0=