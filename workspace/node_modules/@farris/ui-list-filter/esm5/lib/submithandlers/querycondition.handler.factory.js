/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { TextHandler } from "./handlers/text.handler";
import { DateRangeHandler } from "./handlers/daterage.handler";
import { DropDownHandler } from "./handlers/dropdown.handler";
import { NumberRangeHandler } from "./handlers/numberrage.handler";
import { SmartHelpHandler } from "./handlers/smarthelp.handler";
import { ControlType } from '../entity/controltype';
import { SearchHandler } from './handlers/search.handler';
import { DateHandler } from './handlers/date.handler';
import { CheckboxGroupHandler } from './handlers/checkboxgroup.handler';
import { DateRangeTimeHandler } from './handlers/dateragetime.handler';
import { RadioHandler } from './handlers/radio.handler';
import { MonthRangeHandler } from './handlers/monthrage.handler';
import { YearRangeHandler } from './handlers/yearrage.handler';
import { MonthHandler } from './handlers/month.handler';
import { YearHandler } from './handlers/year.handler';
import { InputGroupHandler } from "./handlers/inputgroup.handler";
var QueryConditionHandlerFactory = /** @class */ (function () {
    function QueryConditionHandlerFactory() {
        this.queryConditionHandlerMapping = new Map();
        this.queryConditionHandlerMapping.set(ControlType.Text, new TextHandler());
        this.queryConditionHandlerMapping.set(ControlType.DateRange, new DateRangeHandler());
        this.queryConditionHandlerMapping.set(ControlType.DateRangeTime, new DateRangeTimeHandler());
        this.queryConditionHandlerMapping.set(ControlType.MonthRange, new MonthRangeHandler());
        this.queryConditionHandlerMapping.set(ControlType.YearRange, new YearRangeHandler());
        this.queryConditionHandlerMapping.set(ControlType.DropDown, new DropDownHandler());
        this.queryConditionHandlerMapping.set(ControlType.NumberRange, new NumberRangeHandler());
        this.queryConditionHandlerMapping.set(ControlType.Help, new SmartHelpHandler());
        this.queryConditionHandlerMapping.set(ControlType.Search, new SearchHandler());
        this.queryConditionHandlerMapping.set(ControlType.Date, new DateHandler());
        this.queryConditionHandlerMapping.set(ControlType.Month, new MonthHandler());
        this.queryConditionHandlerMapping.set(ControlType.Year, new YearHandler());
        this.queryConditionHandlerMapping.set(ControlType.CheckboxGroup, new CheckboxGroupHandler());
        this.queryConditionHandlerMapping.set(ControlType.Radio, new RadioHandler());
        this.queryConditionHandlerMapping.set(ControlType.InputGroup, new InputGroupHandler());
    }
    /**
     * @return {?}
     */
    QueryConditionHandlerFactory.getInstance = /**
     * @return {?}
     */
    function () {
        if (!QueryConditionHandlerFactory._instance) {
            QueryConditionHandlerFactory._instance = new QueryConditionHandlerFactory();
        }
        return QueryConditionHandlerFactory._instance;
    };
    /**
     * @param {?} controlType
     * @return {?}
     */
    QueryConditionHandlerFactory.prototype.getHandler = /**
     * @param {?} controlType
     * @return {?}
     */
    function (controlType) {
        return this.queryConditionHandlerMapping.get(controlType);
    };
    QueryConditionHandlerFactory._instance = null;
    return QueryConditionHandlerFactory;
}());
export { QueryConditionHandlerFactory };
if (false) {
    /**
     * @type {?}
     * @private
     */
    QueryConditionHandlerFactory._instance;
    /**
     * @type {?}
     * @private
     */
    QueryConditionHandlerFactory.prototype.queryConditionHandlerMapping;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnljb25kaXRpb24uaGFuZGxlci5mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1saXN0LWZpbHRlci8iLCJzb3VyY2VzIjpbImxpYi9zdWJtaXRoYW5kbGVycy9xdWVyeWNvbmRpdGlvbi5oYW5kbGVyLmZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDbkUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDaEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDdEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDeEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDdkUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFFbEU7SUFJSTtRQURRLGlDQUE0QixHQUE2QyxJQUFJLEdBQUcsRUFBdUMsQ0FBQztRQUU1SCxJQUFJLENBQUMsNEJBQTRCLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQzNFLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxJQUFJLGdCQUFnQixFQUFFLENBQUMsQ0FBQztRQUNyRixJQUFJLENBQUMsNEJBQTRCLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsSUFBSSxvQkFBb0IsRUFBRSxDQUFDLENBQUM7UUFDN0YsSUFBSSxDQUFDLDRCQUE0QixDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLElBQUksaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZGLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxJQUFJLGdCQUFnQixFQUFFLENBQUMsQ0FBQztRQUVyRixJQUFJLENBQUMsNEJBQTRCLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsSUFBSSxlQUFlLEVBQUUsQ0FBQyxDQUFDO1FBQ25GLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxJQUFJLGtCQUFrQixFQUFFLENBQUMsQ0FBQztRQUN6RixJQUFJLENBQUMsNEJBQTRCLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7UUFFaEYsSUFBSSxDQUFDLDRCQUE0QixDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLElBQUksYUFBYSxFQUFFLENBQUMsQ0FBQztRQUMvRSxJQUFJLENBQUMsNEJBQTRCLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBQzNFLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxJQUFJLFlBQVksRUFBRSxDQUFDLENBQUM7UUFDN0UsSUFBSSxDQUFDLDRCQUE0QixDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLElBQUksV0FBVyxFQUFFLENBQUMsQ0FBQztRQUMzRSxJQUFJLENBQUMsNEJBQTRCLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsSUFBSSxvQkFBb0IsRUFBRSxDQUFDLENBQUM7UUFDN0YsSUFBSSxDQUFDLDRCQUE0QixDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLElBQUksWUFBWSxFQUFFLENBQUMsQ0FBQztRQUM3RSxJQUFJLENBQUMsNEJBQTRCLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsSUFBSSxpQkFBaUIsRUFBRSxDQUFDLENBQUM7SUFDM0YsQ0FBQzs7OztJQUNhLHdDQUFXOzs7SUFBekI7UUFDSSxJQUFHLENBQUMsNEJBQTRCLENBQUMsU0FBUyxFQUFDO1lBQ3ZDLDRCQUE0QixDQUFDLFNBQVMsR0FBRyxJQUFJLDRCQUE0QixFQUFFLENBQUM7U0FDL0U7UUFDRCxPQUFPLDRCQUE0QixDQUFDLFNBQVMsQ0FBQztJQUNsRCxDQUFDOzs7OztJQUVELGlEQUFVOzs7O0lBQVYsVUFBVyxXQUF3QjtRQUMvQixPQUFPLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQTlCYyxzQ0FBUyxHQUFpQyxJQUFJLENBQUM7SUErQmxFLG1DQUFDO0NBQUEsQUFqQ0QsSUFpQ0M7U0FqQ1ksNEJBQTRCOzs7Ozs7SUFFckMsdUNBQThEOzs7OztJQUM5RCxvRUFBZ0kiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuaW1wb3J0IHsgSVF1ZXJ5Q29uZGl0aW9uSGFuZGxlciB9IGZyb20gXCIuL2hhbmRsZXJzL2lxdWVyeWNvbmRpdGlvbi5oYW5kbGVyXCI7XHJcbmltcG9ydCB7IFRleHRIYW5kbGVyIH0gZnJvbSBcIi4vaGFuZGxlcnMvdGV4dC5oYW5kbGVyXCI7XHJcbmltcG9ydCB7IERhdGVSYW5nZUhhbmRsZXIgfSBmcm9tIFwiLi9oYW5kbGVycy9kYXRlcmFnZS5oYW5kbGVyXCI7XHJcbmltcG9ydCB7IERyb3BEb3duSGFuZGxlciB9IGZyb20gXCIuL2hhbmRsZXJzL2Ryb3Bkb3duLmhhbmRsZXJcIjtcclxuaW1wb3J0IHsgTnVtYmVyUmFuZ2VIYW5kbGVyIH0gZnJvbSBcIi4vaGFuZGxlcnMvbnVtYmVycmFnZS5oYW5kbGVyXCI7XHJcbmltcG9ydCB7IFNtYXJ0SGVscEhhbmRsZXIgfSBmcm9tIFwiLi9oYW5kbGVycy9zbWFydGhlbHAuaGFuZGxlclwiO1xyXG5pbXBvcnQgeyBDb250cm9sVHlwZSB9IGZyb20gJy4uL2VudGl0eS9jb250cm9sdHlwZSc7XHJcbmltcG9ydCB7IFNlYXJjaEhhbmRsZXIgfSBmcm9tICcuL2hhbmRsZXJzL3NlYXJjaC5oYW5kbGVyJztcclxuaW1wb3J0IHsgRGF0ZUhhbmRsZXIgfSBmcm9tICcuL2hhbmRsZXJzL2RhdGUuaGFuZGxlcic7XHJcbmltcG9ydCB7IENoZWNrYm94R3JvdXBIYW5kbGVyIH0gZnJvbSAnLi9oYW5kbGVycy9jaGVja2JveGdyb3VwLmhhbmRsZXInO1xyXG5pbXBvcnQgeyBEYXRlUmFuZ2VUaW1lSGFuZGxlciB9IGZyb20gJy4vaGFuZGxlcnMvZGF0ZXJhZ2V0aW1lLmhhbmRsZXInO1xyXG5pbXBvcnQgeyBSYWRpb0hhbmRsZXIgfSBmcm9tICcuL2hhbmRsZXJzL3JhZGlvLmhhbmRsZXInO1xyXG5pbXBvcnQgeyBNb250aFJhbmdlSGFuZGxlciB9IGZyb20gJy4vaGFuZGxlcnMvbW9udGhyYWdlLmhhbmRsZXInO1xyXG5pbXBvcnQgeyBZZWFyUmFuZ2VIYW5kbGVyIH0gZnJvbSAnLi9oYW5kbGVycy95ZWFycmFnZS5oYW5kbGVyJztcclxuaW1wb3J0IHsgTW9udGhIYW5kbGVyIH0gZnJvbSAnLi9oYW5kbGVycy9tb250aC5oYW5kbGVyJztcclxuaW1wb3J0IHsgWWVhckhhbmRsZXIgfSBmcm9tICcuL2hhbmRsZXJzL3llYXIuaGFuZGxlcic7XHJcbmltcG9ydCB7IElucHV0R3JvdXBIYW5kbGVyIH0gZnJvbSBcIi4vaGFuZGxlcnMvaW5wdXRncm91cC5oYW5kbGVyXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgUXVlcnlDb25kaXRpb25IYW5kbGVyRmFjdG9yeSB7XHJcblxyXG4gICAgcHJpdmF0ZSBzdGF0aWMgX2luc3RhbmNlOiBRdWVyeUNvbmRpdGlvbkhhbmRsZXJGYWN0b3J5ID0gbnVsbDtcclxuICAgIHByaXZhdGUgcXVlcnlDb25kaXRpb25IYW5kbGVyTWFwcGluZzogTWFwPENvbnRyb2xUeXBlLCBJUXVlcnlDb25kaXRpb25IYW5kbGVyPiA9IG5ldyBNYXA8Q29udHJvbFR5cGUsIElRdWVyeUNvbmRpdGlvbkhhbmRsZXI+KCk7XHJcbiAgICBwcml2YXRlIGNvbnN0cnVjdG9yKCl7XHJcbiAgICAgICAgdGhpcy5xdWVyeUNvbmRpdGlvbkhhbmRsZXJNYXBwaW5nLnNldChDb250cm9sVHlwZS5UZXh0LCBuZXcgVGV4dEhhbmRsZXIoKSk7XHJcbiAgICAgICAgdGhpcy5xdWVyeUNvbmRpdGlvbkhhbmRsZXJNYXBwaW5nLnNldChDb250cm9sVHlwZS5EYXRlUmFuZ2UsIG5ldyBEYXRlUmFuZ2VIYW5kbGVyKCkpO1xyXG4gICAgICAgIHRoaXMucXVlcnlDb25kaXRpb25IYW5kbGVyTWFwcGluZy5zZXQoQ29udHJvbFR5cGUuRGF0ZVJhbmdlVGltZSwgbmV3IERhdGVSYW5nZVRpbWVIYW5kbGVyKCkpO1xyXG4gICAgICAgIHRoaXMucXVlcnlDb25kaXRpb25IYW5kbGVyTWFwcGluZy5zZXQoQ29udHJvbFR5cGUuTW9udGhSYW5nZSwgbmV3IE1vbnRoUmFuZ2VIYW5kbGVyKCkpO1xyXG4gICAgICAgIHRoaXMucXVlcnlDb25kaXRpb25IYW5kbGVyTWFwcGluZy5zZXQoQ29udHJvbFR5cGUuWWVhclJhbmdlLCBuZXcgWWVhclJhbmdlSGFuZGxlcigpKTtcclxuXHJcbiAgICAgICAgdGhpcy5xdWVyeUNvbmRpdGlvbkhhbmRsZXJNYXBwaW5nLnNldChDb250cm9sVHlwZS5Ecm9wRG93biwgbmV3IERyb3BEb3duSGFuZGxlcigpKTtcclxuICAgICAgICB0aGlzLnF1ZXJ5Q29uZGl0aW9uSGFuZGxlck1hcHBpbmcuc2V0KENvbnRyb2xUeXBlLk51bWJlclJhbmdlLCBuZXcgTnVtYmVyUmFuZ2VIYW5kbGVyKCkpO1xyXG4gICAgICAgIHRoaXMucXVlcnlDb25kaXRpb25IYW5kbGVyTWFwcGluZy5zZXQoQ29udHJvbFR5cGUuSGVscCwgbmV3IFNtYXJ0SGVscEhhbmRsZXIoKSk7XHJcblxyXG4gICAgICAgIHRoaXMucXVlcnlDb25kaXRpb25IYW5kbGVyTWFwcGluZy5zZXQoQ29udHJvbFR5cGUuU2VhcmNoLCBuZXcgU2VhcmNoSGFuZGxlcigpKTtcclxuICAgICAgICB0aGlzLnF1ZXJ5Q29uZGl0aW9uSGFuZGxlck1hcHBpbmcuc2V0KENvbnRyb2xUeXBlLkRhdGUsIG5ldyBEYXRlSGFuZGxlcigpKTtcclxuICAgICAgICB0aGlzLnF1ZXJ5Q29uZGl0aW9uSGFuZGxlck1hcHBpbmcuc2V0KENvbnRyb2xUeXBlLk1vbnRoLCBuZXcgTW9udGhIYW5kbGVyKCkpO1xyXG4gICAgICAgIHRoaXMucXVlcnlDb25kaXRpb25IYW5kbGVyTWFwcGluZy5zZXQoQ29udHJvbFR5cGUuWWVhciwgbmV3IFllYXJIYW5kbGVyKCkpO1xyXG4gICAgICAgIHRoaXMucXVlcnlDb25kaXRpb25IYW5kbGVyTWFwcGluZy5zZXQoQ29udHJvbFR5cGUuQ2hlY2tib3hHcm91cCwgbmV3IENoZWNrYm94R3JvdXBIYW5kbGVyKCkpO1xyXG4gICAgICAgIHRoaXMucXVlcnlDb25kaXRpb25IYW5kbGVyTWFwcGluZy5zZXQoQ29udHJvbFR5cGUuUmFkaW8sIG5ldyBSYWRpb0hhbmRsZXIoKSk7XHJcbiAgICAgICAgdGhpcy5xdWVyeUNvbmRpdGlvbkhhbmRsZXJNYXBwaW5nLnNldChDb250cm9sVHlwZS5JbnB1dEdyb3VwLCBuZXcgSW5wdXRHcm91cEhhbmRsZXIoKSk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCl7XHJcbiAgICAgICAgaWYoIVF1ZXJ5Q29uZGl0aW9uSGFuZGxlckZhY3RvcnkuX2luc3RhbmNlKXtcclxuICAgICAgICAgICAgUXVlcnlDb25kaXRpb25IYW5kbGVyRmFjdG9yeS5faW5zdGFuY2UgPSBuZXcgUXVlcnlDb25kaXRpb25IYW5kbGVyRmFjdG9yeSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gUXVlcnlDb25kaXRpb25IYW5kbGVyRmFjdG9yeS5faW5zdGFuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0SGFuZGxlcihjb250cm9sVHlwZTogQ29udHJvbFR5cGUpOiBJUXVlcnlDb25kaXRpb25IYW5kbGVye1xyXG4gICAgICAgIHJldHVybiB0aGlzLnF1ZXJ5Q29uZGl0aW9uSGFuZGxlck1hcHBpbmcuZ2V0KGNvbnRyb2xUeXBlKTtcclxuICAgIH1cclxufSJdfQ==