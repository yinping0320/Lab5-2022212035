/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { QueryConditionHandlerFactory } from './querycondition.handler.factory';
// import { FrameContext } from '@farris/devkit';
// import { IQuerySolutionHandler } from './IQuerySolutionHandler';
// import { FrameworkSessionService } from '@farris/bef';
var QuerySolutionService = /** @class */ (function () {
    function QuerySolutionService() {
    }
    // private frameContext: FrameContext,
    // private frameworkSessionService: FrameworkSessionService
    // getUserSessionId(): string {
    //     return this.frameworkSessionService.getUserSessionId();
    // }
    // private frameContext: FrameContext,
    // private frameworkSessionService: FrameworkSessionService
    // getUserSessionId(): string {
    //     return this.frameworkSessionService.getUserSessionId();
    // }
    /**
     * @param {?} params
     * @return {?}
     */
    QuerySolutionService.prototype.setFilterConditions = 
    // private frameContext: FrameContext,
    // private frameworkSessionService: FrameworkSessionService
    // getUserSessionId(): string {
    //     return this.frameworkSessionService.getUserSessionId();
    // }
    /**
     * @param {?} params
     * @return {?}
     */
    function (params) {
        /** @type {?} */
        var queryConditionHandler;
        /** @type {?} */
        var filterConditionList = [];
        params.forEach((/**
         * @param {?} qc
         * @return {?}
         */
        function (qc) {
            queryConditionHandler = QueryConditionHandlerFactory.getInstance().getHandler(qc.control.getControlType());
            filterConditionList.push.apply(filterConditionList, tslib_1.__spread(queryConditionHandler.convert(qc)));
        }));
        // 设置到NgCommand params.filter属性上：{UISTATE~/root-component/filterConditionList}
        // this.frameContext.uiState['filterConditionList'] = JSON.stringify(filterConditionList);
        // return JSON.stringify(filterConditionList);
        return filterConditionList;
    };
    QuerySolutionService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    QuerySolutionService.ctorParameters = function () { return []; };
    return QuerySolutionService;
}());
export { QuerySolutionService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnktc29sdXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktbGlzdC1maWx0ZXIvIiwic291cmNlcyI6WyJsaWIvc3VibWl0aGFuZGxlcnMvcXVlcnktc29sdXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sa0NBQWtDLENBQUM7Ozs7QUFPaEY7SUFHSTtJQUFlLENBQUM7SUFFaEIsc0NBQXNDO0lBQ2xDLDJEQUEyRDtJQUMvRCwrQkFBK0I7SUFDL0IsOERBQThEO0lBQzlELElBQUk7Ozs7Ozs7Ozs7SUFFRyxrREFBbUI7Ozs7Ozs7Ozs7SUFBMUIsVUFBMkIsTUFBNkI7O1lBQ2hELHFCQUE2Qzs7WUFDM0MsbUJBQW1CLEdBQUcsRUFBRTtRQUM5QixNQUFNLENBQUMsT0FBTzs7OztRQUFDLFVBQUEsRUFBRTtZQUNiLHFCQUFxQixHQUFHLDRCQUE0QixDQUFDLFdBQVcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7WUFDM0csbUJBQW1CLENBQUMsSUFBSSxPQUF4QixtQkFBbUIsbUJBQVMscUJBQXFCLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxHQUFFO1FBQ25FLENBQUMsRUFBQyxDQUFDO1FBQ0gsOEVBQThFO1FBQzlFLDBGQUEwRjtRQUMxRiw4Q0FBOEM7UUFDOUMsT0FBTyxtQkFBbUIsQ0FBQztJQUMvQixDQUFDOztnQkF0QkosVUFBVTs7OztJQXdCWCwyQkFBQztDQUFBLEFBeEJELElBd0JDO1NBdkJZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSVF1ZXJ5Q29uZGl0aW9uSGFuZGxlciB9IGZyb20gJy4vaGFuZGxlcnMvaXF1ZXJ5Y29uZGl0aW9uLmhhbmRsZXInO1xyXG5pbXBvcnQgeyBRdWVyeUNvbmRpdGlvbkhhbmRsZXJGYWN0b3J5IH0gZnJvbSAnLi9xdWVyeWNvbmRpdGlvbi5oYW5kbGVyLmZhY3RvcnknO1xyXG5pbXBvcnQgeyBRdWVyeUNvbmRpdGlvbiB9IGZyb20gJy4uL2VudGl0eS9xdWVyeWNvbmRpdGlvbic7XHJcbi8vIGltcG9ydCB7IEZyYW1lQ29udGV4dCB9IGZyb20gJ0BmYXJyaXMvZGV2a2l0JztcclxuLy8gaW1wb3J0IHsgSVF1ZXJ5U29sdXRpb25IYW5kbGVyIH0gZnJvbSAnLi9JUXVlcnlTb2x1dGlvbkhhbmRsZXInO1xyXG4vLyBpbXBvcnQgeyBGcmFtZXdvcmtTZXNzaW9uU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvYmVmJztcclxuXHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBRdWVyeVNvbHV0aW9uU2VydmljZSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7fVxyXG5cclxuICAgIC8vIHByaXZhdGUgZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQsXHJcbiAgICAgICAgLy8gcHJpdmF0ZSBmcmFtZXdvcmtTZXNzaW9uU2VydmljZTogRnJhbWV3b3JrU2Vzc2lvblNlcnZpY2VcclxuICAgIC8vIGdldFVzZXJTZXNzaW9uSWQoKTogc3RyaW5nIHtcclxuICAgIC8vICAgICByZXR1cm4gdGhpcy5mcmFtZXdvcmtTZXNzaW9uU2VydmljZS5nZXRVc2VyU2Vzc2lvbklkKCk7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgcHVibGljIHNldEZpbHRlckNvbmRpdGlvbnMocGFyYW1zOiBBcnJheTxRdWVyeUNvbmRpdGlvbj4pIHtcclxuICAgICAgICBsZXQgcXVlcnlDb25kaXRpb25IYW5kbGVyOiBJUXVlcnlDb25kaXRpb25IYW5kbGVyO1xyXG4gICAgICAgIGNvbnN0IGZpbHRlckNvbmRpdGlvbkxpc3QgPSBbXTtcclxuICAgICAgICBwYXJhbXMuZm9yRWFjaChxYyA9PiB7XHJcbiAgICAgICAgICAgIHF1ZXJ5Q29uZGl0aW9uSGFuZGxlciA9IFF1ZXJ5Q29uZGl0aW9uSGFuZGxlckZhY3RvcnkuZ2V0SW5zdGFuY2UoKS5nZXRIYW5kbGVyKHFjLmNvbnRyb2wuZ2V0Q29udHJvbFR5cGUoKSk7XHJcbiAgICAgICAgICAgIGZpbHRlckNvbmRpdGlvbkxpc3QucHVzaCguLi5xdWVyeUNvbmRpdGlvbkhhbmRsZXIuY29udmVydChxYykpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIOiuvue9ruWIsE5nQ29tbWFuZCBwYXJhbXMuZmlsdGVy5bGe5oCn5LiK77yae1VJU1RBVEV+L3Jvb3QtY29tcG9uZW50L2ZpbHRlckNvbmRpdGlvbkxpc3R9XHJcbiAgICAgICAgLy8gdGhpcy5mcmFtZUNvbnRleHQudWlTdGF0ZVsnZmlsdGVyQ29uZGl0aW9uTGlzdCddID0gSlNPTi5zdHJpbmdpZnkoZmlsdGVyQ29uZGl0aW9uTGlzdCk7XHJcbiAgICAgICAgLy8gcmV0dXJuIEpTT04uc3RyaW5naWZ5KGZpbHRlckNvbmRpdGlvbkxpc3QpO1xyXG4gICAgICAgIHJldHVybiBmaWx0ZXJDb25kaXRpb25MaXN0O1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=