/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { FieldConfig } from '../entity/fieldconfig/fieldconfig';
import { QueryCondition } from '../entity/querycondition';
// import { SolutionService } from './solution.service';
import { EnumType } from '../entity/controltype/dropdownlist/enumtype';
import { EnumBoolValue } from '../entity/controltype/dropdownlist/boolenumvalue';
import { EnumIntegerValue } from '../entity/controltype/dropdownlist/integerenumvalue';
import { EnumStringValue } from '../entity/controltype/dropdownlist/stringenumvalue';
import { ControlType } from '../entity/controltype';
import { CompareType } from '../entity/comparetype';
import { ValueType } from '../entity/valuetype';
import { RelationType } from '../entity/relationtype';
import { CheckboxEnumValue } from '../entity/controltype/checkbox/ienumvalue';
var ConvertorService = /** @class */ (function () {
    function ConvertorService() {
    }
    // private solutionservice:SolutionService
    /**
    * 获取已选择的字段配置
    * @param selectedConditions
    */
    // private solutionservice:SolutionService
    /**
     * 获取已选择的字段配置
     * @param {?} selectedConditions
     * @return {?}
     */
    ConvertorService.prototype.getFeildConfigs = 
    // private solutionservice:SolutionService
    /**
     * 获取已选择的字段配置
     * @param {?} selectedConditions
     * @return {?}
     */
    function (selectedConditions) {
        /** @type {?} */
        var fieldsConfigs = new Array();
        if (!selectedConditions || selectedConditions.length <= 0) {
            return fieldsConfigs;
        }
        else {
            selectedConditions.forEach((/**
             * @param {?} condition
             * @return {?}
             */
            function (condition) {
                /** @type {?} */
                var fieldConfig = new FieldConfig();
                fieldConfig.id = condition.id;
                fieldConfig.labelCode = condition.fieldCode;
                fieldConfig.name = condition.fieldName;
                fieldConfig.control = condition.control;
                fieldsConfigs.push(fieldConfig);
            }));
        }
        return fieldsConfigs;
    };
    /**
     * @param {?} fileds
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    ConvertorService.prototype.getSelectedFieldConditions = /**
     * @param {?} fileds
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    function (fileds, selectedFieldConditions) {
        var _this = this;
        // console.log(selectedFieldConditions);
        /** @type {?} */
        var tempSelectedFieldConditions = new Array();
        tempSelectedFieldConditions = this.arrayClone(selectedFieldConditions);
        selectedFieldConditions = new Array();
        fileds.forEach((/**
         * @param {?} filed
         * @return {?}
         */
        function (filed) {
            filed.control = _this.getDropListEnumValues((/** @type {?} */ (filed.control)));
            // filed.control = this.getCheckGroupEnumValues(filed.control as CheckboxGroupControl);
            if (tempSelectedFieldConditions.length > 0) {
                /** @type {?} */
                var tempIndex = tempSelectedFieldConditions.findIndex((/**
                 * @param {?} x
                 * @return {?}
                 */
                function (x) { return x.id == filed.id; }));
                if (tempIndex != (-1)) {
                    selectedFieldConditions.push(tempSelectedFieldConditions[tempIndex]);
                }
                else {
                    selectedFieldConditions = _this.getNewFieldConditions(filed, selectedFieldConditions);
                }
            }
            else {
                selectedFieldConditions = _this.getNewFieldConditions(filed, selectedFieldConditions);
            }
        }));
        return selectedFieldConditions;
    };
    /**
     * @private
     * @param {?} control
     * @return {?}
     */
    ConvertorService.prototype.getDropListEnumValues = /**
     * @private
     * @param {?} control
     * @return {?}
     */
    function (control) {
        if (control.valueType == EnumType.BoolType) {
            /** @type {?} */
            var enumValues_1 = new Array();
            control.enumValues.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                enumValues_1.push(Object.assign(new EnumBoolValue(), element));
            }));
            control.enumValues = enumValues_1;
        }
        else if (control.valueType == EnumType.IntType) {
            /** @type {?} */
            var enumValues_2 = new Array();
            control.enumValues.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                enumValues_2.push(Object.assign(new EnumIntegerValue(), element));
            }));
            control.enumValues = enumValues_2;
        }
        else if (control.valueType == EnumType.StringType) {
            /** @type {?} */
            var enumValues_3 = new Array();
            control.enumValues.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                enumValues_3.push(Object.assign(new EnumStringValue(), element));
            }));
            control.enumValues = enumValues_3;
        }
        return control;
    };
    /**
     * @private
     * @param {?} control
     * @return {?}
     */
    ConvertorService.prototype.getCheckGroupEnumValues = /**
     * @private
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var enumValues = new Array();
        control.enumValues.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            enumValues.push(Object.assign(new CheckboxEnumValue(), element));
        }));
        control.enumValues = enumValues;
        return control;
    };
    /**
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    ConvertorService.prototype.getNewFieldConditions = /**
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    function (filed, selectedFieldConditions) {
        /** @type {?} */
        var selectedFieldCondition = new QueryCondition();
        if (filed.control.getControlType() == ControlType.Text) {
            selectedFieldConditions = this.getTextValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.DateRange) {
            selectedFieldConditions = this.getDateRangeValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.DateRangeTime) {
            selectedFieldConditions = this.getDateRangeTimeValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.MonthRange) {
            selectedFieldConditions = this.getDateRangeValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.YearRange) {
            selectedFieldConditions = this.getDateRangeValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.NumberRange) {
            selectedFieldConditions = this.getNumberRangeValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.Help) {
            selectedFieldConditions = this.getSmartHelpValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.DropDown) {
            selectedFieldConditions = this.getDropDownListValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.Search) {
            selectedFieldConditions = this.getSearchValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.Date) {
            selectedFieldConditions = this.getDateValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.Year) {
            selectedFieldConditions = this.getDateValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.Month) {
            selectedFieldConditions = this.getDateValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.CheckboxGroup) {
            selectedFieldConditions = this.getCheckboxGroupValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.Radio) {
            selectedFieldConditions = this.getRadioValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.InputGroup) {
            selectedFieldConditions = this.getInputGroupValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        return selectedFieldConditions;
    };
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    ConvertorService.prototype.getDropDownListValueFieldCondition = /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    function (selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.id = filed.id;
        selectedFieldCondition.fieldCode = filed.labelCode;
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.fieldName = filed.name;
        selectedFieldCondition.compareType = CompareType.Equal;
        selectedFieldCondition.valueType = ValueType.Value;
        selectedFieldCondition.value = filed.value;
        selectedFieldCondition.relationType = RelationType.And;
        selectedFieldCondition.control = filed.control;
        this.getDropListEnumValues((/** @type {?} */ (selectedFieldCondition.control)));
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    };
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    ConvertorService.prototype.getCheckboxGroupValueFieldCondition = /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    function (selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.id = filed.id;
        selectedFieldCondition.fieldCode = filed.labelCode;
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.fieldName = filed.name;
        selectedFieldCondition.compareType = CompareType.Equal;
        selectedFieldCondition.valueType = ValueType.Value;
        selectedFieldCondition.value = filed.value;
        selectedFieldCondition.relationType = RelationType.And;
        selectedFieldCondition.control = filed.control;
        this.getCheckGroupEnumValues((/** @type {?} */ (selectedFieldCondition.control)));
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    };
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    ConvertorService.prototype.getRadioValueFieldCondition = /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    function (selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.id = filed.id;
        selectedFieldCondition.fieldCode = filed.labelCode;
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.fieldName = filed.name;
        selectedFieldCondition.compareType = CompareType.Equal;
        selectedFieldCondition.valueType = ValueType.Value;
        selectedFieldCondition.value = filed.value;
        selectedFieldCondition.relationType = RelationType.And;
        selectedFieldCondition.control = filed.control;
        this.getCheckGroupEnumValues((/** @type {?} */ (selectedFieldCondition.control)));
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    };
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    ConvertorService.prototype.getSmartHelpValueFieldCondition = /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    function (selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.id = filed.id;
        selectedFieldCondition.fieldCode = filed.labelCode;
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.fieldName = filed.name;
        selectedFieldCondition.compareType = CompareType.Equal;
        selectedFieldCondition.valueType = ValueType.Value;
        selectedFieldCondition.value = filed.value;
        selectedFieldCondition.relationType = RelationType.And;
        selectedFieldCondition.control = filed.control;
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    };
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    ConvertorService.prototype.getNumberRangeValueFieldCondition = /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    function (selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.id = filed.id;
        selectedFieldCondition.fieldCode = filed.labelCode;
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.beginPlaceHolder = filed.beginPlaceHolder;
        selectedFieldCondition.endPlaceHolder = filed.endPlaceHolder;
        selectedFieldCondition.fieldName = filed.name;
        selectedFieldCondition.compareType = CompareType.BetWeen;
        selectedFieldCondition.valueType = ValueType.Value;
        selectedFieldCondition.value = filed.value;
        selectedFieldCondition.relationType = RelationType.And;
        selectedFieldCondition.control = filed.control;
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    };
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    ConvertorService.prototype.getDateRangeValueFieldCondition = /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    function (selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.id = filed.id;
        selectedFieldCondition.fieldCode = filed.labelCode;
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.beginPlaceHolder = filed.beginPlaceHolder;
        selectedFieldCondition.endPlaceHolder = filed.endPlaceHolder;
        selectedFieldCondition.fieldName = filed.name;
        selectedFieldCondition.compareType = CompareType.BetWeen;
        selectedFieldCondition.valueType = ValueType.Value;
        selectedFieldCondition.value = filed.value;
        selectedFieldCondition.relationType = RelationType.And;
        selectedFieldCondition.control = filed.control;
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    };
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    ConvertorService.prototype.getDateRangeTimeValueFieldCondition = /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    function (selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.id = filed.id;
        selectedFieldCondition.fieldCode = filed.labelCode;
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.fieldName = filed.name;
        selectedFieldCondition.compareType = CompareType.BetWeen;
        selectedFieldCondition.valueType = ValueType.Value;
        selectedFieldCondition.value = filed.value;
        selectedFieldCondition.relationType = RelationType.And;
        selectedFieldCondition.control = filed.control;
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    };
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    ConvertorService.prototype.getTextValueFieldCondition = /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    function (selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.id = filed.id;
        selectedFieldCondition.fieldCode = filed.labelCode;
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.fieldName = filed.name;
        selectedFieldCondition.compareType = CompareType.Equal;
        selectedFieldCondition.valueType = ValueType.Value;
        selectedFieldCondition.value = filed.value;
        selectedFieldCondition.relationType = RelationType.And;
        selectedFieldCondition.control = filed.control;
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    };
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    ConvertorService.prototype.getInputGroupValueFieldCondition = /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    function (selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.id = filed.id;
        selectedFieldCondition.fieldCode = filed.labelCode;
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.fieldName = filed.name;
        selectedFieldCondition.compareType = CompareType.Equal;
        selectedFieldCondition.valueType = ValueType.Value;
        selectedFieldCondition.value = filed.value;
        selectedFieldCondition.relationType = RelationType.And;
        selectedFieldCondition.control = filed.control;
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    };
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    ConvertorService.prototype.getDateValueFieldCondition = /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    function (selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.id = filed.id;
        selectedFieldCondition.fieldCode = filed.labelCode;
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.fieldName = filed.name;
        selectedFieldCondition.compareType = CompareType.Equal;
        selectedFieldCondition.valueType = ValueType.Value;
        selectedFieldCondition.value = filed.value;
        selectedFieldCondition.relationType = RelationType.And;
        selectedFieldCondition.control = filed.control;
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    };
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    ConvertorService.prototype.getSearchValueFieldCondition = /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    function (selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.id = filed.id;
        selectedFieldCondition.fieldCode = filed.labelCode;
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.fieldName = filed.name;
        selectedFieldCondition.compareType = CompareType.Equal;
        selectedFieldCondition.valueType = ValueType.Value;
        selectedFieldCondition.value = filed.value;
        selectedFieldCondition.relationType = RelationType.And;
        selectedFieldCondition.control = filed.control;
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    };
    /**
     * @private
     * @param {?} input
     * @return {?}
     */
    ConvertorService.prototype.arrayClone = /**
     * @private
     * @param {?} input
     * @return {?}
     */
    function (input) {
        /** @type {?} */
        var result = new Array();
        if (input && input.length > 0) {
            input.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                result.push(Object.assign({}, element));
            }));
        }
        return result;
    };
    ConvertorService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ConvertorService.ctorParameters = function () { return []; };
    return ConvertorService;
}());
export { ConvertorService };
//# sourceMappingURL=data:application/json;base64,