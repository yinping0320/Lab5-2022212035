import { cloneDeep } from 'lodash-es';
import { IdService, OverLayHiddenService } from '@farris/ui-common';
import { of } from 'rxjs';
import { CommonModule } from '@angular/common';
import { FarrisDatePickerModule } from '@farris/ui-datepicker';
import { DatalistModule } from '@farris/ui-datalist';
import { ComboListModule } from '@farris/ui-combo-list';
import { LookupModule } from '@farris/ui-lookup';
import { FarrisFormsModule } from '@farris/ui-forms';
import { PerfectScrollbarModule } from '@farris/ui-perfect-scrollbar';
import { NumberSpinnerModule } from '@farris/ui-number-spinner';
import { LocaleModule } from '@farris/ui-locale';
import { InputGroupModule } from '@farris/ui-input-group';
import { EventEmitter, Injectable, Directive, Input, Optional, Self, Injector, NgModule, Pipe, Component, ViewChild, ChangeDetectorRef, ChangeDetectionStrategy, Output, ElementRef, Renderer2, LOCALE_ID, InjectFlags, ViewEncapsulation, HostBinding, InjectionToken, defineInjectable } from '@angular/core';
import { NgControl, FormsModule } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 字段配置
 */
class FieldConfig {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const ControlType = {
    Text: 0,
    //DateTime=1,
    Help: 1,
    DropDown: 2,
    DateRange: 3,
    NumberRange: 4,
    Search: 5,
    Date: 6,
    CheckboxGroup: 7,
    DateRangeTime: 8,
    Radio: 9,
    Year: 10,
    Month: 11,
    MonthRange: 12,
    YearRange: 13,
    InputGroup: 14,
};
ControlType[ControlType.Text] = 'Text';
ControlType[ControlType.Help] = 'Help';
ControlType[ControlType.DropDown] = 'DropDown';
ControlType[ControlType.DateRange] = 'DateRange';
ControlType[ControlType.NumberRange] = 'NumberRange';
ControlType[ControlType.Search] = 'Search';
ControlType[ControlType.Date] = 'Date';
ControlType[ControlType.CheckboxGroup] = 'CheckboxGroup';
ControlType[ControlType.DateRangeTime] = 'DateRangeTime';
ControlType[ControlType.Radio] = 'Radio';
ControlType[ControlType.Year] = 'Year';
ControlType[ControlType.Month] = 'Month';
ControlType[ControlType.MonthRange] = 'MonthRange';
ControlType[ControlType.YearRange] = 'YearRange';
ControlType[ControlType.InputGroup] = 'InputGroup';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 文本控件
 */
class TextControl {
    /**
     * 获取控件类型，返回值：文本控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.Text;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 搜索控件
 */
class SearchControl {
    /**
     * 获取控件类型，返回值：搜索控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.Search;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 日期控件
 */
class DateControl {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.Date;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const EnumType = {
    IntType: 0,
    StringType: 1,
    BoolType: 2,
};
EnumType[EnumType.IntType] = 'IntType';
EnumType[EnumType.StringType] = 'StringType';
EnumType[EnumType.BoolType] = 'BoolType';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 下拉列表Integer类型
 */
class EnumIntegerValue {
    /**
     * @return {?}
     */
    getEnumType() {
        return EnumType.IntType;
    }
    /**
     * @return {?}
     */
    getEnumValueName() {
        return this.name;
    }
    /**
     * @return {?}
     */
    getEnumValue() {
        return this.value;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 下拉列表String类型
 */
class EnumStringValue {
    /**
     * @return {?}
     */
    getEnumType() {
        return EnumType.StringType;
    }
    /**
     * @return {?}
     */
    getEnumValueName() {
        return this.name;
    }
    /**
     * @return {?}
     */
    getEnumValue() {
        return this.value;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 下拉列表Bool类型
 */
class EnumBoolValue {
    /**
     * @return {?}
     */
    getEnumType() {
        return EnumType.BoolType;
    }
    /**
     * @return {?}
     */
    getEnumValueName() {
        return this.name;
    }
    /**
     * @return {?}
     */
    getEnumValue() {
        return this.value;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class EnumValueConvert {
    /**
     * @param {?} obj
     * @return {?}
     */
    convertJObject(obj) {
        /** @type {?} */
        let enumValue = (/** @type {?} */ (obj));
        /** @type {?} */
        let enumType = enumValue.getEnumType();
        /** @type {?} */
        let jobj = new Object();
        jobj["Type"] = enumType;
        jobj["Content"] = enumValue;
        return jobj;
    }
    /**
     * @param {?} jobj
     * @return {?}
     */
    initFromJobject(jobj) {
        /** @type {?} */
        let enumType = (/** @type {?} */ (jobj["Type"]));
        /** @type {?} */
        let content = (/** @type {?} */ (jobj["Content"]));
        if (enumType == EnumType.IntType) {
            return Object.assign(new EnumIntegerValue(), content);
        }
        else if (enumType == EnumType.BoolType) {
            return Object.assign(new EnumBoolValue(), content);
        }
        else {
            return Object.assign(new EnumStringValue(), content);
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 下拉列表控件
 */
class DropDownControl {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.DropDown;
    }
}
/**
 * 下拉列表控件序列化与反序列化器
 */
class DropDownListControlConvert {
    /**
     * 序列化
     * @param {?} obj 下拉列表控件实体
     * @return {?}
     */
    convertToObject(obj) {
        /** @type {?} */
        let dropDownListControl = (/** @type {?} */ (obj));
        /** @type {?} */
        let jobj = new Object();
        jobj["valueType"] = dropDownListControl.valueType;
        if (dropDownListControl.enumValues != null) {
            /** @type {?} */
            let jarray = jobj["enumValues"] = [];
            /** @type {?} */
            let convertor = new EnumValueConvert();
            dropDownListControl.enumValues.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                if (dropDownListControl.valueType == EnumType.BoolType) {
                    jarray.push(convertor.convertJObject(Object.assign(new EnumBoolValue(), element)));
                }
                else if (dropDownListControl.valueType == EnumType.IntType) {
                    jarray.push(convertor.convertJObject(Object.assign(new EnumIntegerValue(), element)));
                }
                else {
                    jarray.push(convertor.convertJObject(Object.assign(new EnumStringValue(), element)));
                }
            }));
        }
        return jobj;
    }
    /**
     * 反序列化
     * @param {?} jobj 下拉列表控件实体序列化后的JSON对象
     * @return {?}
     */
    initFromObject(jobj) {
        /** @type {?} */
        let control = new DropDownControl();
        if (jobj["valueType"] != null) {
            control.valueType = (/** @type {?} */ (jobj["valueType"]));
        }
        if (jobj["enumValues"] != null) {
            control.enumValues = new Array();
            jobj["enumValues"].forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                /** @type {?} */
                let convertor = new EnumValueConvert();
                control.enumValues.push(convertor.initFromJobject(element));
            }));
        }
        return control;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 数字区间控件
 */
class NumberRangeControl {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.NumberRange;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 帮助控件
 */
class HelpContol {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.Help;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 多选组控件
 */
class CheckboxGroupControl {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.CheckboxGroup;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 日期区间控件
 */
class DateRangeControl {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.DateRange;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 年份控件
 */
class YearControl {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.Year;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DateRangeValue {
    /**
     * @param {?=} value
     */
    constructor(value = { startTime: '', endTime: '' }) {
        this.clear$ = new EventEmitter();
        this.startTime = value.startTime;
        this.endTime = value.endTime;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.startTime || !this.endTime;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        if (value.formatted) {
            this.startTime = value.formatted.split(value.delimiter)[0];
            this.endTime = value.formatted.split(value.delimiter)[1];
        }
        else {
            this.clearValue();
        }
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return `${this.startTime}~${this.endTime}`;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.DateRange;
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.startTime = undefined;
        this.endTime = undefined;
        this.clear$.emit();
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TextValue {
    /**
     * @param {?=} data
     */
    constructor(data = '') {
        this.clear$ = new EventEmitter();
        this.value = data;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.Text;
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.value = undefined;
        this.clear$.emit();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        throw new Error('Method not implemented.');
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return this.value;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.value;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SearchValue {
    /**
     * @param {?=} data
     */
    constructor(data = '') {
        this.clear$ = new EventEmitter();
        this.value = data;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.Search;
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.value = '';
        this.clear$.emit();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        throw new Error("Method not implemented.");
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return this.value;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.value;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DateValue {
    /**
     * @param {?=} date
     */
    constructor(date = '') {
        this.clear$ = new EventEmitter();
        this.value = date;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        this.value = value.formatted;
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return this.value;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.Date;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.value;
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.value = undefined;
        this.clear$.emit();
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NumberRangeValue {
    /**
     * @param {?=} data
     */
    constructor(data = { startValue: '', endValue: '' }) {
        this.clear$ = new EventEmitter();
        this.startValue = data.startValue ? parseFloat(data.startValue) : null;
        this.endValue = data.endValue ? parseFloat(data.endValue) : null;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return (this.startValue == null && this.endValue == null);
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.NumberRange;
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.startValue = undefined;
        this.endValue = undefined;
        this.clear$.emit();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        throw new Error("Method not implemented.");
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return {
            begin: this.startValue,
            end: this.endValue
        };
    }
}
class NumberRangeValueConvertor {
    /**
     * @param {?} obj
     * @return {?}
     */
    convertToObject(obj) {
        /** @type {?} */
        let dropDownListValue = (/** @type {?} */ (obj));
        /** @type {?} */
        let jobj = new Object();
        jobj["startValue"] = dropDownListValue.startValue;
        jobj["endValue"] = dropDownListValue.endValue;
        return jobj;
    }
    /**
     * @param {?} jobj
     * @return {?}
     */
    initFromObject(jobj) {
        /** @type {?} */
        let numberRangeValue = new NumberRangeValue();
        if (!!(jobj["startValue"])) {
            numberRangeValue.startValue = (/** @type {?} */ (jobj["startValue"]));
        }
        if (!!(jobj["endValue"])) {
            numberRangeValue.endValue = (/** @type {?} */ (jobj["endValue"]));
        }
        return numberRangeValue;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DropDownListValue {
    /**
     * @param {?=} data
     */
    constructor(data = '') {
        this.clear$ = new EventEmitter();
        this.value = data;
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.value = undefined;
        this.clear$.emit();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        this.value = value;
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return this.value;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.DropDown;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.value;
    }
}
class DropDownListValueConvert {
    /**
     * @param {?} obj
     * @return {?}
     */
    convertToObject(obj) {
        /** @type {?} */
        let dropDownListValue = (/** @type {?} */ (obj));
        /** @type {?} */
        let jobj = new Object();
        if (!!(dropDownListValue.value)) {
            // jobj["value"]=convertor.convertJObject(dropDownListValue.value);
            jobj["value"] = dropDownListValue.value;
        }
        return jobj;
    }
    /**
     * @param {?} jobj
     * @return {?}
     */
    initFromObject(jobj) {
        /** @type {?} */
        let dropDownListValue = new DropDownListValue();
        if (!!(jobj["value"])) {
            // dropDownListValue.value=convertor.initFromJobject(jobj["value"]);
            dropDownListValue.value = jobj["value"];
        }
        return dropDownListValue;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class HelpValue {
    /**
     * @param {?=} data
     */
    constructor(data = { value: [], valueField: undefined, textValue: undefined }) {
        this.clear$ = new EventEmitter();
        if (data.hasOwnProperty('textValue')) { // 新结构，value是数组
            this.valueField = data.valueField;
            this.value = data.value;
            this.textValue = data.textValue;
        }
        else { // 旧结构，value是对象
            this.valueField = data.valueField;
            this.value = data.value ? [data.value] : [];
            this.textValue = 'help-text-value-null'; // 旧结构无textValue属性
        }
    }
    /**
     * @param {?} helpItem
     * @param {?} args
     * @return {?}
     */
    static getPropValue(helpItem, args) {
        if (args.length > 1) {
            /** @type {?} */
            const arg = args.shift();
            return helpItem[arg] ? this.getPropValue(helpItem[arg], args) : null;
        }
        return helpItem[args[0]];
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.value = [];
        this.valueField = undefined;
        this.textValue = undefined;
        this.clear$.emit();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        throw new Error('Method not implemented.');
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        /** @type {?} */
        const args = this.valueField.split('.');
        /** @type {?} */
        const valueArr = this.value.map((/**
         * @param {?} helpItem
         * @return {?}
         */
        helpItem => HelpValue.getPropValue(helpItem, cloneDeep(args))));
        return valueArr && valueArr.length ? valueArr.join(',') : '';
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.Help;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.valueField;
    }
    /**
     * @param {?} textField
     * @return {?}
     */
    getTextValue(textField) {
        /** @type {?} */
        const args = textField.split('.');
        /** @type {?} */
        const textArr = this.value.map((/**
         * @param {?} helpItem
         * @return {?}
         */
        helpItem => HelpValue.getPropValue(helpItem, cloneDeep(args))));
        return textArr && textArr.length ? textArr.join(',') : '';
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CheckboxGroupValue {
    /**
     * @param {?=} value
     */
    constructor(value = []) {
        this.clear$ = new EventEmitter();
        this.valueChanged = new EventEmitter();
        this.value = value;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return this.value.length == 0;
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.value = [];
        this.clear$.emit();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        this.value = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setValue(value) {
        this.value = value;
        this.valueChanged.emit(this.value);
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return this.value;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.CheckboxGroup;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DateRangeTimeValue {
    /**
     * @param {?=} value
     */
    constructor(value = { startTime: '', endTime: '' }) {
        this.clear$ = new EventEmitter();
        this.startTime = value.startTime;
        this.endTime = value.endTime;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.startTime || !this.endTime;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        if (value.formatted) {
            this.startTime = value.formatted.split(value.delimiter)[0];
            this.endTime = value.formatted.split(value.delimiter)[1];
        }
        else {
            this.clearValue();
        }
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return `${this.startTime}~${this.endTime}`;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.DateRangeTime;
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.startTime = undefined;
        this.endTime = undefined;
        this.clear$.emit();
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 日期区间带时间控件
 */
class DateRangeTimeControl {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.DateRangeTime;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RadioGroupValue {
    /**
     * @param {?=} data
     */
    constructor(data = '') {
        this.clear$ = new EventEmitter();
        this.value = data;
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.value = undefined;
        this.clear$.emit();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        throw new Error("Method not implemented.");
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return this.value;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.Radio;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.value;
    }
    /**
     * @return {?}
     */
    getValueText() {
        return this.value;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 多选组控件
 */
class RadioControl {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.Radio;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class YearValue {
    /**
     * @param {?=} date
     */
    constructor(date = '') {
        this.clear$ = new EventEmitter();
        this.value = date;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        this.value = value.formatted;
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return this.value;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.Date;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.value;
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.value = undefined;
        this.clear$.emit();
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 年月控件
 */
class MonthControl {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.Month;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MonthValue {
    /**
     * @param {?=} date
     */
    constructor(date = '') {
        this.clear$ = new EventEmitter();
        this.value = date;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        this.value = value.formatted;
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return this.value;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.Date;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.value;
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.value = undefined;
        this.clear$.emit();
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class YearRangeValue {
    /**
     * @param {?=} value
     */
    constructor(value = { startTime: '', endTime: '' }) {
        this.clear$ = new EventEmitter();
        this.startTime = value.startTime;
        this.endTime = value.endTime;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        if (value.formatted) {
            this.startTime = value.formatted.split(value.delimiter)[0];
            this.endTime = value.formatted.split(value.delimiter)[1];
        }
        else {
            this.clearValue();
        }
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return `${this.startTime}~${this.endTime}`;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.DateRange;
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.startTime = undefined;
        this.endTime = undefined;
        this.clear$.emit();
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.startTime || !this.endTime;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 年度区间控件
 */
class YearRangeControl {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.YearRange;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MonthRangeValue {
    /**
     * @param {?=} value
     */
    constructor(value = { startTime: '', endTime: '' }) {
        this.clear$ = new EventEmitter();
        this.startTime = value.startTime;
        this.endTime = value.endTime;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.startTime || !this.endTime;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        if (value.formatted) {
            this.startTime = value.formatted.split(value.delimiter)[0];
            this.endTime = value.formatted.split(value.delimiter)[1];
        }
        else {
            this.clearValue();
        }
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return `${this.startTime}~${this.endTime}`;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.DateRange;
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.startTime = undefined;
        this.endTime = undefined;
        this.clear$.emit();
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 年月区间控件
 */
class MonthRangeControl {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.MonthRange;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class InputGroupValue {
    /**
     * @param {?=} data
     */
    constructor(data = { value: [], textValue: undefined, textField: undefined, isInputText: undefined }) {
        this.clear$ = new EventEmitter();
        this.value = data.value;
        this.textValue = data.textValue ? data.textValue.trim() : '';
        this.textField = data.textField;
        this.isInputText = data.isInputText;
    }
    /**
     * @param {?} targetField
     * @return {?}
     */
    getTextValue(targetField) {
        /** @type {?} */
        const args = targetField.split('.');
        /** @type {?} */
        const textArr = this.value.map((/**
         * @param {?} item
         * @return {?}
         */
        item => this.getPropValue(item, cloneDeep(args))));
        return textArr && textArr.length ? textArr.join(',') : '';
    }
    /**
     * @param {?} item
     * @param {?} args
     * @return {?}
     */
    getPropValue(item, args) {
        if (args.length > 1) {
            /** @type {?} */
            const arg = args.shift();
            if (arg) {
                return item[arg] ? this.getPropValue(item[arg], args) : '';
            }
            else {
                return '';
            }
        }
        return item[args[0]];
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.InputGroup;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        throw new Error("Method not implemented.");
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        /** @type {?} */
        const args = this.textField.split('.');
        /** @type {?} */
        const textArr = this.value.map((/**
         * @param {?} item
         * @return {?}
         */
        item => this.getPropValue(item, cloneDeep(args))));
        return textArr && textArr.length ? textArr.join(',') : '';
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.value = [];
        this.textValue = undefined;
        this.textField = undefined;
        this.isInputText = undefined;
        this.clear$.emit();
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.textValue;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 智能输入框控件
 */
class InputGroupControl {
    /**
     * 获取控件类型，返回值：智能输入框控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.InputGroup;
    }
    /**
     * @return {?}
     */
    isRequired() {
        return !!this.required;
    }
}
class DialogConfig {
}
class DialogButtonConfig {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ListFilterService {
    constructor() { }
    /**
     * @param {?} filedSchemas
     * @return {?}
     */
    fieldSchemasConvert(filedSchemas) {
        /** @type {?} */
        let fieldConfigs = new Array();
        if (!(filedSchemas) || filedSchemas.length <= 0) {
            return fieldConfigs;
        }
        else {
            filedSchemas.forEach((/**
             * @param {?} filedSchema
             * @return {?}
             */
            filedSchema => {
                /** @type {?} */
                let fieldConfig = new FieldConfig();
                fieldConfig.id = filedSchema.hasOwnProperty('id') ? filedSchema.id : '';
                fieldConfig.labelCode = filedSchema.labelCode;
                fieldConfig.code = filedSchema.hasOwnProperty('code') ? filedSchema.code : '';
                fieldConfig.placeHolder = filedSchema.placeHolder;
                fieldConfig.beginPlaceHolder = filedSchema.beginPlaceHolder;
                fieldConfig.endPlaceHolder = filedSchema.endPlaceHolder;
                fieldConfig.name = filedSchema.name;
                if (!(filedSchema.control) || !(filedSchema.control.controltype)) {
                    fieldConfig.control = new TextControl();
                    fieldConfig.value = new TextValue(filedSchema.value);
                }
                else {
                    if (filedSchema.control.controltype == 'text') {
                        fieldConfig.control = this.getTextControl(filedSchema);
                        fieldConfig.value = new TextValue(filedSchema.value);
                    }
                    else if (filedSchema.control.controltype == 'search') {
                        fieldConfig.control = this.getSearchControl(filedSchema);
                        fieldConfig.value = new SearchValue(filedSchema.value);
                    }
                    else if (filedSchema.control.controltype == 'singleDate') {
                        fieldConfig.control = this.getDateControl(filedSchema);
                        fieldConfig.value = new DateValue(filedSchema.value);
                    }
                    else if (filedSchema.control.controltype == 'date') {
                        fieldConfig.control = this.getDateRangeControl(filedSchema);
                        fieldConfig.value = new DateRangeValue(filedSchema.value);
                    }
                    else if (filedSchema.control.controltype == 'yearRange') {
                        fieldConfig.control = this.getYearRangeControl(filedSchema);
                        fieldConfig.value = new YearRangeValue(filedSchema.value);
                    }
                    else if (filedSchema.control.controltype == 'monthRange') {
                        fieldConfig.control = this.getMonthRangeControl(filedSchema);
                        fieldConfig.value = new MonthRangeValue(filedSchema.value);
                    }
                    else if (filedSchema.control.controltype == 'datetime') {
                        fieldConfig.control = this.getDateRangeTimeControl(filedSchema);
                        fieldConfig.value = new DateRangeTimeValue(filedSchema.value);
                    }
                    else if (filedSchema.control.controltype == 'year') {
                        fieldConfig.control = this.getYearControl(filedSchema);
                        fieldConfig.value = new YearValue(filedSchema.value);
                    }
                    else if (filedSchema.control.controltype == 'month') {
                        fieldConfig.control = this.getMonthControl(filedSchema);
                        fieldConfig.value = new MonthValue(filedSchema.value);
                    }
                    else if (filedSchema.control.controltype == 'dropdown') {
                        fieldConfig.control = this.getDropDownControl(filedSchema);
                        fieldConfig.value = new DropDownListValue(filedSchema.value);
                    }
                    else if (filedSchema.control.controltype == 'number') {
                        fieldConfig.control = this.getNumberRangeControl(filedSchema);
                        fieldConfig.value = new NumberRangeValue(filedSchema.value);
                    }
                    else if (filedSchema.control.controltype == 'help') {
                        fieldConfig.control = this.getLookUpEditControl(filedSchema);
                        fieldConfig.value = new HelpValue(filedSchema.value);
                    }
                    else if (filedSchema.control.controltype == 'checkboxgroup') {
                        fieldConfig.control = this.getCheckboxGroupControl(filedSchema);
                        fieldConfig.value = new CheckboxGroupValue(filedSchema.value);
                    }
                    else if (filedSchema.control.controltype == 'radio') {
                        fieldConfig.control = this.getRadioControl(filedSchema);
                        fieldConfig.value = new RadioGroupValue(filedSchema.value);
                    }
                    else if (filedSchema.control.controltype == 'input-group') {
                        fieldConfig.control = this.getInputGroupControl(filedSchema);
                        fieldConfig.value = new InputGroupValue(filedSchema.value);
                    }
                    else {
                        fieldConfig.control = this.getTextControl(filedSchema);
                        fieldConfig.value = new TextValue(filedSchema.value);
                    }
                    if (filedSchema.control.enableClear === undefined) {
                        fieldConfig.control.enableClear = true;
                    }
                    else {
                        fieldConfig.control.enableClear = filedSchema.control.enableClear;
                    }
                }
                fieldConfigs.push(fieldConfig);
            }));
        }
        return fieldConfigs;
    }
    /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    getTextControl(filedSchema) {
        /** @type {?} */
        let textControl = new TextControl();
        textControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
        textControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
        textControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
        textControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
        return textControl;
    }
    /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    getInputGroupControl(filedSchema) {
        /** @type {?} */
        let inputGroupControl = new InputGroupControl();
        inputGroupControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
        inputGroupControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
        inputGroupControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
        inputGroupControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
        inputGroupControl.editable = filedSchema.control.hasOwnProperty('editable') ? filedSchema.control.editable : true;
        inputGroupControl.groupText = filedSchema.control.hasOwnProperty('groupText') ? filedSchema.control.groupText : '<span class="f-icon f-icon-lookup"></span>';
        inputGroupControl.usageMode = filedSchema.control.usageMode;
        inputGroupControl.dialogOptions = this.setInputGroupDialog(filedSchema.control.usageMode, filedSchema.control.modalConfig, filedSchema.id);
        inputGroupControl.click = filedSchema.control.click;
        return inputGroupControl;
    }
    /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    getDateControl(filedSchema) {
        /** @type {?} */
        let dateControl = new DateControl();
        dateControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
        dateControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
        dateControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
        dateControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
        dateControl.format = filedSchema.control.hasOwnProperty('format') ? filedSchema.control.format : '';
        dateControl.compareType = filedSchema.control.hasOwnProperty('compareType') ? filedSchema.control.compareType : 0;
        // dateControl.showType = filedSchema.control.hasOwnProperty('showType')? filedSchema.control.showType : '';
        return dateControl;
    }
    /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    getYearControl(filedSchema) {
        /** @type {?} */
        let yearControl = new YearControl();
        yearControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
        yearControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
        yearControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
        yearControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
        yearControl.format = filedSchema.control.hasOwnProperty('format') ? filedSchema.control.format : '';
        yearControl.compareType = filedSchema.control.hasOwnProperty('compareType') ? filedSchema.control.compareType : 0;
        // yearControl.showType = filedSchema.control.hasOwnProperty('showType')? filedSchema.control.showType : '';
        return yearControl;
    }
    /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    getMonthControl(filedSchema) {
        /** @type {?} */
        let monthControl = new MonthControl();
        monthControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
        monthControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
        monthControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
        monthControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
        monthControl.format = filedSchema.control.hasOwnProperty('format') ? filedSchema.control.format : '';
        monthControl.compareType = filedSchema.control.hasOwnProperty('compareType') ? filedSchema.control.compareType : 0;
        // yearControl.showType = filedSchema.control.hasOwnProperty('showType')? filedSchema.control.showType : '';
        return monthControl;
    }
    /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    getNumberRangeControl(filedSchema) {
        /** @type {?} */
        let numberRangeControl = new NumberRangeControl();
        numberRangeControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
        numberRangeControl.beginPlaceHolder = filedSchema.control.beginPlaceHolder ? filedSchema.control.beginPlaceHolder : '';
        numberRangeControl.endPlaceHolder = filedSchema.control.endPlaceHolder ? filedSchema.control.endPlaceHolder : '';
        numberRangeControl.precision = filedSchema.control.hasOwnProperty('precision') ? filedSchema.control.precision : 2;
        numberRangeControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
        numberRangeControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
        numberRangeControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
        numberRangeControl.bigNumber = filedSchema.control.hasOwnProperty('bigNumber') ? filedSchema.control.bigNumber : false;
        return numberRangeControl;
    }
    /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    getSearchControl(filedSchema) {
        /** @type {?} */
        let searchControl = new SearchControl();
        searchControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
        searchControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
        searchControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
        searchControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
        return searchControl;
    }
    /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    getDropDownControl(filedSchema) {
        /** @type {?} */
        let dropdowncontrol = new DropDownControl();
        dropdowncontrol.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
        filedSchema.control.valueType = filedSchema.control.valueType ? filedSchema.control.valueType : '1';
        dropdowncontrol.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
        dropdowncontrol.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
        dropdowncontrol.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
        if (filedSchema.control.valueType == "1") {
            dropdowncontrol.valueType = EnumType.StringType;
            dropdowncontrol.enumValues = (/** @type {?} */ (filedSchema.control.enumValues));
        }
        else if (filedSchema.control.valueType == "2") {
            dropdowncontrol.valueType = EnumType.BoolType;
            dropdowncontrol.enumValues = (/** @type {?} */ (filedSchema.control.enumValues));
        }
        else if (filedSchema.control.valueType == "0") {
            dropdowncontrol.valueType = EnumType.IntType;
            dropdowncontrol.enumValues = (/** @type {?} */ (filedSchema.control.enumValues));
        }
        return dropdowncontrol;
    }
    /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    getLookUpEditControl(filedSchema) {
        /** @type {?} */
        let lookupEdit = new HelpContol();
        if (!!(filedSchema.control.uri)) {
            lookupEdit.uri = filedSchema.control.uri;
        }
        lookupEdit.textField = filedSchema.control.textField;
        lookupEdit.valueField = filedSchema.control.valueField;
        lookupEdit.idField = filedSchema.control.idField;
        lookupEdit.helpId = filedSchema.control.helpId;
        lookupEdit.mapFields = filedSchema.control.mapFields;
        lookupEdit.context = filedSchema.control.context;
        lookupEdit.preEventCmd = filedSchema.control.preEventCmd;
        lookupEdit.postEventCmd = filedSchema.control.postEventCmd;
        lookupEdit.enableFullTree = filedSchema.control.enableFullTree;
        lookupEdit.loadTreeDataType = filedSchema.control.loadTreeDataType;
        //新增
        lookupEdit.singleSelect = filedSchema.control.hasOwnProperty('singleSelect') ? filedSchema.control.singleSelect : true;
        lookupEdit.expandLevel = filedSchema.control.expandLevel;
        lookupEdit.enableCascade = filedSchema.control.enableCascade;
        lookupEdit.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
        lookupEdit.displayType = filedSchema.control.hasOwnProperty('displayType') ? filedSchema.control.displayType : "LIST";
        lookupEdit.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
        lookupEdit.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
        lookupEdit.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
        lookupEdit.clearFields = filedSchema.control.hasOwnProperty('clearFields') ? filedSchema.control.clearFields : '';
        lookupEdit.editable = filedSchema.control.hasOwnProperty('editable') ? filedSchema.control.editable : false;
        lookupEdit.enableMultiFieldSearch = filedSchema.control.hasOwnProperty('enableMultiFieldSearch') ? filedSchema.control.enableMultiFieldSearch : false;
        return lookupEdit;
    }
    /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    getCheckboxGroupControl(filedSchema) {
        /** @type {?} */
        let checkboxGroupcontrol = new CheckboxGroupControl();
        checkboxGroupcontrol.enumValues = (/** @type {?} */ (filedSchema.control.enumValues));
        checkboxGroupcontrol.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
        checkboxGroupcontrol.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
        checkboxGroupcontrol.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
        return checkboxGroupcontrol;
    }
    /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    getDateRangeControl(filedSchema) {
        /** @type {?} */
        let dateRangeControl = new DateRangeControl();
        dateRangeControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
        dateRangeControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
        dateRangeControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
        dateRangeControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
        dateRangeControl.beginPlaceHolder = filedSchema.control.beginPlaceHolder ? filedSchema.control.beginPlaceHolder : '';
        dateRangeControl.endPlaceHolder = filedSchema.control.endPlaceHolder ? filedSchema.control.endPlaceHolder : '';
        dateRangeControl.format = filedSchema.control.hasOwnProperty('format') ? filedSchema.control.format : '';
        // dateRangeControl.showType = filedSchema.control.hasOwnProperty('showType')? filedSchema.control.showType : '';
        return dateRangeControl;
    }
    /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    getYearRangeControl(filedSchema) {
        /** @type {?} */
        let yearRangeControl = new YearRangeControl();
        yearRangeControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
        yearRangeControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
        yearRangeControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
        yearRangeControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
        yearRangeControl.beginPlaceHolder = filedSchema.control.beginPlaceHolder ? filedSchema.control.beginPlaceHolder : '';
        yearRangeControl.endPlaceHolder = filedSchema.control.endPlaceHolder ? filedSchema.control.endPlaceHolder : '';
        yearRangeControl.format = filedSchema.control.hasOwnProperty('format') ? filedSchema.control.format : '';
        return yearRangeControl;
    }
    /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    getMonthRangeControl(filedSchema) {
        /** @type {?} */
        let monthRangeControl = new MonthRangeControl();
        monthRangeControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
        monthRangeControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
        monthRangeControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
        monthRangeControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
        monthRangeControl.beginPlaceHolder = filedSchema.control.beginPlaceHolder ? filedSchema.control.beginPlaceHolder : '';
        monthRangeControl.endPlaceHolder = filedSchema.control.endPlaceHolder ? filedSchema.control.endPlaceHolder : '';
        monthRangeControl.format = filedSchema.control.hasOwnProperty('format') ? filedSchema.control.format : '';
        return monthRangeControl;
    }
    /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    getDateRangeTimeControl(filedSchema) {
        /** @type {?} */
        let dateRangeControl = new DateRangeTimeControl();
        dateRangeControl.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
        dateRangeControl.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
        dateRangeControl.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
        dateRangeControl.placeholder = filedSchema.control.placeholder ? filedSchema.control.placeholder : '';
        dateRangeControl.beginPlaceHolder = filedSchema.control.beginPlaceHolder ? filedSchema.control.beginPlaceHolder : '';
        dateRangeControl.endPlaceHolder = filedSchema.control.endPlaceHolder ? filedSchema.control.endPlaceHolder : '';
        dateRangeControl.format = filedSchema.control.hasOwnProperty('format') ? filedSchema.control.format : '';
        return dateRangeControl;
    }
    /**
     * @private
     * @param {?} filedSchema
     * @return {?}
     */
    getRadioControl(filedSchema) {
        /** @type {?} */
        let checkboxGroupcontrol = new RadioControl();
        checkboxGroupcontrol.enumValues = (/** @type {?} */ (filedSchema.control.enumValues));
        checkboxGroupcontrol.isExtend = filedSchema.control.hasOwnProperty('isExtend') ? filedSchema.control.isExtend : false;
        checkboxGroupcontrol.showLabel = filedSchema.control.hasOwnProperty('showLabel') ? filedSchema.control.showLabel : true;
        checkboxGroupcontrol.required = filedSchema.control.hasOwnProperty('required') ? filedSchema.control.required : false;
        return checkboxGroupcontrol;
    }
    //根据类型，new value值
    /**
     * @param {?} controltype
     * @param {?} value
     * @return {?}
     */
    setValues(controltype, value) {
        if (controltype == 'input') {
            return new TextValue(value);
        }
        else if (controltype == 'search') {
            return new SearchValue(value);
        }
        else if (controltype == 'date') {
            return new DateValue(value);
        }
        else if (controltype == 'year') {
            return new YearValue(value);
        }
        else if (controltype == 'month') {
            return new MonthValue(value);
        }
        else if (controltype == 'daterange') {
            return new DateRangeValue(value);
        }
        else if (controltype == 'daterangetime') {
            return new DateRangeTimeValue(value);
        }
        else if (controltype == 'yearrange') {
            return new YearRangeValue(value);
        }
        else if (controltype == 'monthrange') {
            return new MonthRangeValue(value);
        }
        else if (controltype == 'dropdown') {
            return new DropDownListValue(value);
        }
        else if (controltype == 'number') {
            return new NumberRangeValue(value);
        }
        else if (controltype == 'help') {
            return new HelpValue(value);
        }
        else if (controltype == 'checkboxgroup') {
            return new CheckboxGroupValue(value);
        }
        else if (controltype == 'radio') {
            return new RadioGroupValue(value);
        }
        else if (controltype == 'input-group') {
            return new InputGroupValue(value);
        }
        else {
            return new TextValue(value);
        }
    }
    /**
     * 智能输入框控件需要弹出表单时，将表单配置JSON描述转换为弹出表单命令可接收的弹窗参数
     * @private
     * @param {?} usageMode 智能输入框控件使用模式
     * @param {?} modalConfigData 表单配置JSON描述
     * @param {?} id
     * @return {?} 弹出表单命令可接收的弹窗参数
     */
    setInputGroupDialog(usageMode, modalConfigData, id) {
        if (usageMode == 'text' || usageMode == undefined || modalConfigData == undefined || id == undefined) {
            return undefined;
        }
        /** @type {?} */
        let dialogConfig = new DialogConfig();
        //dialogConfig.modalId = modalConfigData.modalId;
        dialogConfig.modalId = id;
        if (modalConfigData.mapFields) {
            dialogConfig.mapFields = JSON.parse(modalConfigData.mapFields.replace(/'/g, '"'));
        }
        if (modalConfigData.showHeader) {
            dialogConfig.title = modalConfigData.title;
        }
        dialogConfig.width = modalConfigData.width;
        dialogConfig.height = modalConfigData.height;
        // dialogConfig.showButtons = modalConfigData.showFooterButtons;
        // dialogConfig.buttons = this.setInputGroupDialogButtons(modalConfigData.footerButtons);
        return dialogConfig;
    }
    /**
     * 智能输入框控件需要弹出表单时，将弹窗按钮组配置JSON描述转换为弹出表单命令可接收的弹窗按钮组参数
     * @private
     * @param {?} buttonData 弹窗按钮组配置JSON描述
     * @return {?} 弹出表单命令可接收的弹窗按钮组参数
     */
    setInputGroupDialogButtons(buttonData) {
        if (!buttonData) {
            return [];
        }
        /** @type {?} */
        let button;
        return buttonData.map((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            button = new DialogButtonConfig();
            button.text = item.text;
            if (item.appearance && item.appearance.class) {
                button.cls = item.appearance.class;
            }
            button.handle = item.click;
            return button;
        }));
    }
}
ListFilterService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ListFilterService.ctorParameters = () => [];
/** @nocollapse */ ListFilterService.ngInjectableDef = defineInjectable({ factory: function ListFilterService_Factory() { return new ListFilterService(); }, token: ListFilterService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const CompareType = {
    /**
     * 等于
     */
    // Equal=1,
    Equal: 0,
    /**
     * 大于
     */
    GreaterThan: 2,
    /**
     * 大于或等于
     */
    GreaterThanOrEqual: 3,
    /**
     * 小于
     */
    LessThan: 4,
    /**
     * 小于或等于
     */
    LessThanOrEqual: 5,
    /**
     * 之间
     */
    // BetWeen=6
    Like: 6,
    /**
     * 包含
     */
    In: 14,
};
CompareType[CompareType.Equal] = 'Equal';
CompareType[CompareType.GreaterThan] = 'GreaterThan';
CompareType[CompareType.GreaterThanOrEqual] = 'GreaterThanOrEqual';
CompareType[CompareType.LessThan] = 'LessThan';
CompareType[CompareType.LessThanOrEqual] = 'LessThanOrEqual';
CompareType[CompareType.Like] = 'Like';
CompareType[CompareType.In] = 'In';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const ValueType = {
    /**
     *值类型
     */
    Value: 0,
    /**
     * 表达式
     */
    Express: 1,
};
ValueType[ValueType.Value] = 'Value';
ValueType[ValueType.Express] = 'Express';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const RelationType = {
    /**
     * 与
     */
    // And=0,
    And: 1,
    /**
     * 或
     */
    // Or=1
    Or: 2,
};
RelationType[RelationType.And] = 'And';
RelationType[RelationType.Or] = 'Or';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TextHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const tv = ((/** @type {?} */ (qc.value)));
        return Object.keys(tv).length > 0 && tv.value ? [{
                'FilterField': qc.fieldCode,
                'Compare': CompareType.Like,
                //like CompareType.like undefined
                'Value': tv.value,
                'Relation': RelationType.And,
                //and undefined
                'Expresstype': ValueType.Value
            }] : [];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DateRangeHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const arr = [];
        /** @type {?} */
        const drv = ((/** @type {?} */ (qc.value)));
        if (Object.keys(drv).length === 0 || (!drv.startTime && !drv.endTime))
            return arr;
        drv.startTime && arr.push({
            'FilterField': qc.fieldCode,
            'Compare': CompareType.GreaterThanOrEqual,
            //GreaterOrEqual
            'Value': drv.startTime,
            'Relation': RelationType.And,
            //and
            'Expresstype': ValueType.Value
        });
        drv.endTime && arr.push({
            'FilterField': qc.fieldCode,
            'Compare': CompareType.LessThanOrEqual,
            //LessOrEqual
            'Value': drv.endTime,
            'Relation': RelationType.And,
            //and
            'Expresstype': ValueType.Value
        });
        return arr;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DropDownHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const ddv = ((/** @type {?} */ (qc.value)));
        if (ddv === undefined || ddv === null || Object.keys(ddv).length === 0 || Object.keys(ddv.value || {}).length === 0)
            return [];
        return [{
                'FilterField': qc.fieldCode,
                'Compare': CompareType.Equal,
                //equal
                // 'Value' : (ddv.value.getEnumValue() as EnumStringValue),
                'Value': ddv.value,
                'Relation': RelationType.And,
                //and
                'Expresstype': ValueType.Value
            }];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NumberRangeHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const arr = [];
        /** @type {?} */
        const nrv = ((/** @type {?} */ (qc.value)));
        if (Object.keys(nrv).length === 0)
            return arr;
        (nrv.startValue != null) && arr.push({
            'FilterField': qc.fieldCode,
            'Compare': CompareType.GreaterThanOrEqual,
            //GreaterOrEqual
            'Value': nrv.startValue,
            'Relation': RelationType.And,
            //and
            'Expresstype': ValueType.Value
        });
        (nrv.endValue != null) && arr.push({
            'FilterField': qc.fieldCode,
            'Compare': CompareType.LessThanOrEqual,
            //LessOrEqual
            'Value': nrv.endValue,
            'Relation': RelationType.And,
            //and
            'Expresstype': ValueType.Value
        });
        return arr;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SmartHelpHandler {
    // convert(qc: QueryCondition) {
    //     const shv = (qc.value as HelpValue);
    //     if(Object.keys(shv).length === 0 || !shv.value || !shv.valueField){
    //         return [];
    //     }else{
    //         // return [{
    //         //     'FilterField' : qc.fieldCode,
    //         //     'Compare' : CompareType.Equal, //equal
    //         //     'Value' : (shv.value)[shv.valueField],
    //         //     'Relation' : RelationType.And,
    //         //     'Expresstype': ValueType.Value
    //         // }];
    //         return [{
    //             'FilterField' : qc.fieldCode,
    //             'Compare' : CompareType.Equal, //equal
    //             'Value' : HelpValue.getPropValues(shv.value, shv.valueField.split('.')),
    //             'Relation' : RelationType.And,
    //             'Expresstype': ValueType.Value
    //         }];
    //     }
    // }
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const shv = ((/** @type {?} */ (qc.value)));
        if (shv.value.length == 0 || !shv.valueField) {
            return [];
        }
        else {
            /** @type {?} */
            const arr = [];
            shv.getOriginalValue().split(',').forEach((/**
             * @param {?} id
             * @return {?}
             */
            id => {
                id && arr.push({
                    'FilterField': qc.fieldCode,
                    'Compare': CompareType.Equal,
                    'Value': id,
                    'Relation': RelationType.Or,
                    'Expresstype': ValueType.Value
                });
            }));
            if (arr.length > 0) {
                arr[0]['Lbracket'] = '(';
                arr[arr.length - 1]['Rbracket'] = ')';
                arr[arr.length - 1]['Relation'] = RelationType.And;
                return arr;
            }
            else {
                return [];
            }
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SearchHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const tv = ((/** @type {?} */ (qc.value)));
        return Object.keys(tv).length > 0 && tv.value ? [{
                'FilterField': qc.fieldCode,
                'Compare': CompareType.Like,
                //like CompareType.like undefined
                'Value': tv.value,
                'Relation': RelationType.And,
                //and undefined
                'Expresstype': ValueType.Value
            }] : [];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DateHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const drv = ((/** @type {?} */ (qc.value)));
        return Object.keys(drv).length > 0 && drv.value ? [{
                'FilterField': qc.fieldCode,
                'Compare': qc.control.compareType,
                //自定义
                'Value': drv.value,
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value
            }] : [];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CheckboxGroupHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const cbgv = ((/** @type {?} */ (qc.value)));
        if (Object.keys(cbgv).length === 0 || Object.keys(cbgv.value).length === 0)
            return [];
        /** @type {?} */
        let CheckboxArr = [];
        if (cbgv.value.length === 1) {
            return [{
                    'FilterField': qc.fieldCode,
                    'Compare': CompareType.Equal,
                    'Value': (cbgv.value[0]),
                    'Relation': RelationType.And,
                    'Expresstype': ValueType.Value
                }];
        }
        cbgv.value.forEach((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            CheckboxArr.push({
                'FilterField': qc.fieldCode,
                'Compare': CompareType.Equal,
                'Value': value,
                'Relation': RelationType.Or,
                'Expresstype': ValueType.Value
            });
        }));
        CheckboxArr[0]['Lbracket'] = '(';
        CheckboxArr[CheckboxArr.length - 1]['Rbracket'] = ')';
        CheckboxArr[CheckboxArr.length - 1]['Relation'] = RelationType.And;
        return CheckboxArr;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DateRangeTimeHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const arr = [];
        /** @type {?} */
        const drv = ((/** @type {?} */ (qc.value)));
        if (Object.keys(drv).length === 0 || (!drv.startTime && !drv.endTime))
            return arr;
        drv.startTime && arr.push({
            'FilterField': qc.fieldCode,
            'Compare': CompareType.GreaterThanOrEqual,
            //GreaterOrEqual
            'Value': drv.startTime,
            'Relation': RelationType.And,
            //and
            'Expresstype': ValueType.Value
        });
        drv.endTime && arr.push({
            'FilterField': qc.fieldCode,
            'Compare': CompareType.LessThanOrEqual,
            //LessOrEqual
            'Value': drv.endTime,
            'Relation': RelationType.And,
            //and
            'Expresstype': ValueType.Value
        });
        return arr;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RadioHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const radiov = ((/** @type {?} */ (qc.value)));
        if (radiov.value === undefined || radiov.value === null || Object.keys(radiov).length === 0 || Object.keys(radiov.value).length === 0)
            return [];
        return [{
                'FilterField': qc.fieldCode,
                'Compare': CompareType.Equal,
                //equal
                'Value': radiov.value,
                'Relation': RelationType.And,
                //and
                'Expresstype': ValueType.Value
            }];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MonthRangeHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const arr = [];
        /** @type {?} */
        const drv = ((/** @type {?} */ (qc.value)));
        if (Object.keys(drv).length === 0 || (!drv.startTime && !drv.endTime))
            return arr;
        drv.startTime && arr.push({
            'FilterField': qc.fieldCode,
            'Compare': CompareType.GreaterThanOrEqual,
            //GreaterOrEqual
            'Value': drv.startTime,
            'Relation': RelationType.And,
            //and
            'Expresstype': ValueType.Value
        });
        drv.endTime && arr.push({
            'FilterField': qc.fieldCode,
            'Compare': CompareType.LessThanOrEqual,
            //LessOrEqual
            'Value': drv.endTime,
            'Relation': RelationType.And,
            //and
            'Expresstype': ValueType.Value
        });
        return arr;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class YearRangeHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const arr = [];
        /** @type {?} */
        const drv = ((/** @type {?} */ (qc.value)));
        if (Object.keys(drv).length === 0 || (!drv.startTime && !drv.endTime))
            return arr;
        drv.startTime && arr.push({
            'FilterField': qc.fieldCode,
            'Compare': CompareType.GreaterThanOrEqual,
            //GreaterOrEqual
            'Value': drv.startTime,
            'Relation': RelationType.And,
            //and
            'Expresstype': ValueType.Value
        });
        drv.endTime && arr.push({
            'FilterField': qc.fieldCode,
            'Compare': CompareType.LessThanOrEqual,
            //LessOrEqual
            'Value': drv.endTime,
            'Relation': RelationType.And,
            //and
            'Expresstype': ValueType.Value
        });
        return arr;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MonthHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const drv = ((/** @type {?} */ (qc.value)));
        return Object.keys(drv).length > 0 && drv.value ? [{
                'FilterField': qc.fieldCode,
                'Compare': qc.control.compareType,
                //自定义
                'Value': drv.value,
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value
            }] : [];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class YearHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const drv = ((/** @type {?} */ (qc.value)));
        return Object.keys(drv).length > 0 && drv.value ? [{
                'FilterField': qc.fieldCode,
                'Compare': qc.control.compareType,
                //自定义
                'Value': drv.value,
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value
            }] : [];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class InputGroupHandler {
    /**
     * @param {?} qc
     * @return {?}
     */
    convert(qc) {
        /** @type {?} */
        const igv = ((/** @type {?} */ (qc.value)));
        /** @type {?} */
        const arr = [];
        if (igv.textValue === undefined || igv.textValue === null || igv.textValue.length == 0) {
            return [];
        }
        else if (igv.isInputText) {
            arr.push({
                'FilterField': qc.fieldCode,
                'Compare': CompareType.Like,
                'Value': igv.textValue,
                'Relation': RelationType.And,
                'Expresstype': ValueType.Value
            });
            return arr;
        }
        else {
            igv.getOriginalValue().split(',').forEach((/**
             * @param {?} itemValue
             * @return {?}
             */
            itemValue => {
                itemValue && arr.push({
                    'FilterField': qc.fieldCode,
                    'Compare': CompareType.Equal,
                    'Value': itemValue,
                    'Relation': RelationType.Or,
                    'Expresstype': ValueType.Value
                });
            }));
            if (arr.length > 0) {
                arr[0]['Lbracket'] = '(';
                arr[arr.length - 1]['Rbracket'] = ')';
                arr[arr.length - 1]['Relation'] = RelationType.And;
                return arr;
            }
            else {
                return [];
            }
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class QueryConditionHandlerFactory {
    /**
     * @private
     */
    constructor() {
        this.queryConditionHandlerMapping = new Map();
        this.queryConditionHandlerMapping.set(ControlType.Text, new TextHandler());
        this.queryConditionHandlerMapping.set(ControlType.DateRange, new DateRangeHandler());
        this.queryConditionHandlerMapping.set(ControlType.DateRangeTime, new DateRangeTimeHandler());
        this.queryConditionHandlerMapping.set(ControlType.MonthRange, new MonthRangeHandler());
        this.queryConditionHandlerMapping.set(ControlType.YearRange, new YearRangeHandler());
        this.queryConditionHandlerMapping.set(ControlType.DropDown, new DropDownHandler());
        this.queryConditionHandlerMapping.set(ControlType.NumberRange, new NumberRangeHandler());
        this.queryConditionHandlerMapping.set(ControlType.Help, new SmartHelpHandler());
        this.queryConditionHandlerMapping.set(ControlType.Search, new SearchHandler());
        this.queryConditionHandlerMapping.set(ControlType.Date, new DateHandler());
        this.queryConditionHandlerMapping.set(ControlType.Month, new MonthHandler());
        this.queryConditionHandlerMapping.set(ControlType.Year, new YearHandler());
        this.queryConditionHandlerMapping.set(ControlType.CheckboxGroup, new CheckboxGroupHandler());
        this.queryConditionHandlerMapping.set(ControlType.Radio, new RadioHandler());
        this.queryConditionHandlerMapping.set(ControlType.InputGroup, new InputGroupHandler());
    }
    /**
     * @return {?}
     */
    static getInstance() {
        if (!QueryConditionHandlerFactory._instance) {
            QueryConditionHandlerFactory._instance = new QueryConditionHandlerFactory();
        }
        return QueryConditionHandlerFactory._instance;
    }
    /**
     * @param {?} controlType
     * @return {?}
     */
    getHandler(controlType) {
        return this.queryConditionHandlerMapping.get(controlType);
    }
}
QueryConditionHandlerFactory._instance = null;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// import { FrameContext } from '@farris/devkit';
// import { IQuerySolutionHandler } from './IQuerySolutionHandler';
// import { FrameworkSessionService } from '@farris/bef';
class QuerySolutionService {
    constructor() { }
    // private frameContext: FrameContext,
    // private frameworkSessionService: FrameworkSessionService
    // getUserSessionId(): string {
    //     return this.frameworkSessionService.getUserSessionId();
    // }
    /**
     * @param {?} params
     * @return {?}
     */
    setFilterConditions(params) {
        /** @type {?} */
        let queryConditionHandler;
        /** @type {?} */
        const filterConditionList = [];
        params.forEach((/**
         * @param {?} qc
         * @return {?}
         */
        qc => {
            queryConditionHandler = QueryConditionHandlerFactory.getInstance().getHandler(qc.control.getControlType());
            filterConditionList.push(...queryConditionHandler.convert(qc));
        }));
        // 设置到NgCommand params.filter属性上：{UISTATE~/root-component/filterConditionList}
        // this.frameContext.uiState['filterConditionList'] = JSON.stringify(filterConditionList);
        // return JSON.stringify(filterConditionList);
        return filterConditionList;
    }
}
QuerySolutionService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
QuerySolutionService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 查询条件实体类
 */
class QueryCondition {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const CompareType$1 = {
    /**
     * 等于
     */
    // Equal=1,
    Equal: 0,
    /**
     * 大于
     */
    GreaterThan: 2,
    /**
     * 大于或等于
     */
    GreaterThanOrEqual: 3,
    /**
     * 小于
     */
    LessThan: 4,
    /**
     * 小于或等于
     */
    LessThanOrEqual: 5,
    /**
     * 之间
     */
    BetWeen: 6,
};
CompareType$1[CompareType$1.Equal] = 'Equal';
CompareType$1[CompareType$1.GreaterThan] = 'GreaterThan';
CompareType$1[CompareType$1.GreaterThanOrEqual] = 'GreaterThanOrEqual';
CompareType$1[CompareType$1.LessThan] = 'LessThan';
CompareType$1[CompareType$1.LessThanOrEqual] = 'LessThanOrEqual';
CompareType$1[CompareType$1.BetWeen] = 'BetWeen';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const ValueType$1 = {
    /**
     *值类型
     */
    Value: 0,
    /**
     * 帮助类型
     */
    SmartHelp: 1,
    /**
     * 枚举类型
     */
    Enum: 2,
    /**
     * 表达式
     */
    Express: 3,
};
ValueType$1[ValueType$1.Value] = 'Value';
ValueType$1[ValueType$1.SmartHelp] = 'SmartHelp';
ValueType$1[ValueType$1.Enum] = 'Enum';
ValueType$1[ValueType$1.Express] = 'Express';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const RelationType$1 = {
    /**
     * 与
     */
    // And=0,
    And: 1,
    /**
     * 或
     */
    // Or=1
    Or: 2,
};
RelationType$1[RelationType$1.And] = 'And';
RelationType$1[RelationType$1.Or] = 'Or';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CheckboxEnumValue {
    /**
     * @return {?}
     */
    getEnumValueName() {
        return this.name;
    }
    /**
     * @return {?}
     */
    getEnumValue() {
        return this.value;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ConvertorService {
    constructor() { }
    // private solutionservice:SolutionService
    /**
     * 获取已选择的字段配置
     * @param {?} selectedConditions
     * @return {?}
     */
    getFeildConfigs(selectedConditions) {
        /** @type {?} */
        let fieldsConfigs = new Array();
        if (!selectedConditions || selectedConditions.length <= 0) {
            return fieldsConfigs;
        }
        else {
            selectedConditions.forEach((/**
             * @param {?} condition
             * @return {?}
             */
            condition => {
                /** @type {?} */
                let fieldConfig = new FieldConfig();
                fieldConfig.id = condition.id;
                fieldConfig.labelCode = condition.fieldCode;
                fieldConfig.name = condition.fieldName;
                fieldConfig.control = condition.control;
                fieldsConfigs.push(fieldConfig);
            }));
        }
        return fieldsConfigs;
    }
    /**
     * @param {?} fileds
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    getSelectedFieldConditions(fileds, selectedFieldConditions) {
        // console.log(selectedFieldConditions);
        /** @type {?} */
        let tempSelectedFieldConditions = new Array();
        tempSelectedFieldConditions = this.arrayClone(selectedFieldConditions);
        selectedFieldConditions = new Array();
        fileds.forEach((/**
         * @param {?} filed
         * @return {?}
         */
        filed => {
            filed.control = this.getDropListEnumValues((/** @type {?} */ (filed.control)));
            // filed.control = this.getCheckGroupEnumValues(filed.control as CheckboxGroupControl);
            if (tempSelectedFieldConditions.length > 0) {
                /** @type {?} */
                let tempIndex = tempSelectedFieldConditions.findIndex((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => x.id == filed.id));
                if (tempIndex != (-1)) {
                    selectedFieldConditions.push(tempSelectedFieldConditions[tempIndex]);
                }
                else {
                    selectedFieldConditions = this.getNewFieldConditions(filed, selectedFieldConditions);
                }
            }
            else {
                selectedFieldConditions = this.getNewFieldConditions(filed, selectedFieldConditions);
            }
        }));
        return selectedFieldConditions;
    }
    /**
     * @private
     * @param {?} control
     * @return {?}
     */
    getDropListEnumValues(control) {
        if (control.valueType == EnumType.BoolType) {
            /** @type {?} */
            let enumValues = new Array();
            control.enumValues.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                enumValues.push(Object.assign(new EnumBoolValue(), element));
            }));
            control.enumValues = enumValues;
        }
        else if (control.valueType == EnumType.IntType) {
            /** @type {?} */
            let enumValues = new Array();
            control.enumValues.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                enumValues.push(Object.assign(new EnumIntegerValue(), element));
            }));
            control.enumValues = enumValues;
        }
        else if (control.valueType == EnumType.StringType) {
            /** @type {?} */
            let enumValues = new Array();
            control.enumValues.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                enumValues.push(Object.assign(new EnumStringValue(), element));
            }));
            control.enumValues = enumValues;
        }
        return control;
    }
    /**
     * @private
     * @param {?} control
     * @return {?}
     */
    getCheckGroupEnumValues(control) {
        /** @type {?} */
        let enumValues = new Array();
        control.enumValues.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            enumValues.push(Object.assign(new CheckboxEnumValue(), element));
        }));
        control.enumValues = enumValues;
        return control;
    }
    /**
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    getNewFieldConditions(filed, selectedFieldConditions) {
        /** @type {?} */
        let selectedFieldCondition = new QueryCondition();
        if (filed.control.getControlType() == ControlType.Text) {
            selectedFieldConditions = this.getTextValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.DateRange) {
            selectedFieldConditions = this.getDateRangeValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.DateRangeTime) {
            selectedFieldConditions = this.getDateRangeTimeValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.MonthRange) {
            selectedFieldConditions = this.getDateRangeValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.YearRange) {
            selectedFieldConditions = this.getDateRangeValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.NumberRange) {
            selectedFieldConditions = this.getNumberRangeValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.Help) {
            selectedFieldConditions = this.getSmartHelpValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.DropDown) {
            selectedFieldConditions = this.getDropDownListValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.Search) {
            selectedFieldConditions = this.getSearchValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.Date) {
            selectedFieldConditions = this.getDateValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.Year) {
            selectedFieldConditions = this.getDateValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.Month) {
            selectedFieldConditions = this.getDateValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.CheckboxGroup) {
            selectedFieldConditions = this.getCheckboxGroupValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.Radio) {
            selectedFieldConditions = this.getRadioValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        else if (filed.control.getControlType() == ControlType.InputGroup) {
            selectedFieldConditions = this.getInputGroupValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions);
        }
        return selectedFieldConditions;
    }
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    getDropDownListValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.id = filed.id;
        selectedFieldCondition.fieldCode = filed.labelCode;
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.fieldName = filed.name;
        selectedFieldCondition.compareType = CompareType$1.Equal;
        selectedFieldCondition.valueType = ValueType$1.Value;
        selectedFieldCondition.value = filed.value;
        selectedFieldCondition.relationType = RelationType$1.And;
        selectedFieldCondition.control = filed.control;
        this.getDropListEnumValues((/** @type {?} */ (selectedFieldCondition.control)));
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    }
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    getCheckboxGroupValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.id = filed.id;
        selectedFieldCondition.fieldCode = filed.labelCode;
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.fieldName = filed.name;
        selectedFieldCondition.compareType = CompareType$1.Equal;
        selectedFieldCondition.valueType = ValueType$1.Value;
        selectedFieldCondition.value = filed.value;
        selectedFieldCondition.relationType = RelationType$1.And;
        selectedFieldCondition.control = filed.control;
        this.getCheckGroupEnumValues((/** @type {?} */ (selectedFieldCondition.control)));
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    }
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    getRadioValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.id = filed.id;
        selectedFieldCondition.fieldCode = filed.labelCode;
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.fieldName = filed.name;
        selectedFieldCondition.compareType = CompareType$1.Equal;
        selectedFieldCondition.valueType = ValueType$1.Value;
        selectedFieldCondition.value = filed.value;
        selectedFieldCondition.relationType = RelationType$1.And;
        selectedFieldCondition.control = filed.control;
        this.getCheckGroupEnumValues((/** @type {?} */ (selectedFieldCondition.control)));
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    }
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    getSmartHelpValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.id = filed.id;
        selectedFieldCondition.fieldCode = filed.labelCode;
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.fieldName = filed.name;
        selectedFieldCondition.compareType = CompareType$1.Equal;
        selectedFieldCondition.valueType = ValueType$1.Value;
        selectedFieldCondition.value = filed.value;
        selectedFieldCondition.relationType = RelationType$1.And;
        selectedFieldCondition.control = filed.control;
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    }
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    getNumberRangeValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.id = filed.id;
        selectedFieldCondition.fieldCode = filed.labelCode;
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.beginPlaceHolder = filed.beginPlaceHolder;
        selectedFieldCondition.endPlaceHolder = filed.endPlaceHolder;
        selectedFieldCondition.fieldName = filed.name;
        selectedFieldCondition.compareType = CompareType$1.BetWeen;
        selectedFieldCondition.valueType = ValueType$1.Value;
        selectedFieldCondition.value = filed.value;
        selectedFieldCondition.relationType = RelationType$1.And;
        selectedFieldCondition.control = filed.control;
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    }
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    getDateRangeValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.id = filed.id;
        selectedFieldCondition.fieldCode = filed.labelCode;
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.beginPlaceHolder = filed.beginPlaceHolder;
        selectedFieldCondition.endPlaceHolder = filed.endPlaceHolder;
        selectedFieldCondition.fieldName = filed.name;
        selectedFieldCondition.compareType = CompareType$1.BetWeen;
        selectedFieldCondition.valueType = ValueType$1.Value;
        selectedFieldCondition.value = filed.value;
        selectedFieldCondition.relationType = RelationType$1.And;
        selectedFieldCondition.control = filed.control;
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    }
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    getDateRangeTimeValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.id = filed.id;
        selectedFieldCondition.fieldCode = filed.labelCode;
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.fieldName = filed.name;
        selectedFieldCondition.compareType = CompareType$1.BetWeen;
        selectedFieldCondition.valueType = ValueType$1.Value;
        selectedFieldCondition.value = filed.value;
        selectedFieldCondition.relationType = RelationType$1.And;
        selectedFieldCondition.control = filed.control;
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    }
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    getTextValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.id = filed.id;
        selectedFieldCondition.fieldCode = filed.labelCode;
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.fieldName = filed.name;
        selectedFieldCondition.compareType = CompareType$1.Equal;
        selectedFieldCondition.valueType = ValueType$1.Value;
        selectedFieldCondition.value = filed.value;
        selectedFieldCondition.relationType = RelationType$1.And;
        selectedFieldCondition.control = filed.control;
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    }
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    getInputGroupValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.id = filed.id;
        selectedFieldCondition.fieldCode = filed.labelCode;
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.fieldName = filed.name;
        selectedFieldCondition.compareType = CompareType$1.Equal;
        selectedFieldCondition.valueType = ValueType$1.Value;
        selectedFieldCondition.value = filed.value;
        selectedFieldCondition.relationType = RelationType$1.And;
        selectedFieldCondition.control = filed.control;
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    }
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    getDateValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.id = filed.id;
        selectedFieldCondition.fieldCode = filed.labelCode;
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.fieldName = filed.name;
        selectedFieldCondition.compareType = CompareType$1.Equal;
        selectedFieldCondition.valueType = ValueType$1.Value;
        selectedFieldCondition.value = filed.value;
        selectedFieldCondition.relationType = RelationType$1.And;
        selectedFieldCondition.control = filed.control;
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    }
    /**
     * @private
     * @param {?} selectedFieldCondition
     * @param {?} filed
     * @param {?} selectedFieldConditions
     * @return {?}
     */
    getSearchValueFieldCondition(selectedFieldCondition, filed, selectedFieldConditions) {
        selectedFieldCondition.id = filed.id;
        selectedFieldCondition.fieldCode = filed.labelCode;
        selectedFieldCondition.placeHolder = filed.placeHolder;
        selectedFieldCondition.fieldName = filed.name;
        selectedFieldCondition.compareType = CompareType$1.Equal;
        selectedFieldCondition.valueType = ValueType$1.Value;
        selectedFieldCondition.value = filed.value;
        selectedFieldCondition.relationType = RelationType$1.And;
        selectedFieldCondition.control = filed.control;
        selectedFieldConditions.push(selectedFieldCondition);
        return selectedFieldConditions;
    }
    /**
     * @private
     * @param {?} input
     * @return {?}
     */
    arrayClone(input) {
        /** @type {?} */
        let result = new Array();
        if (input && input.length > 0) {
            input.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                result.push(Object.assign({}, element));
            }));
        }
        return result;
    }
}
ConvertorService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ConvertorService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const LISTFILTER_HANDLER_TOKEN = new InjectionToken('gsp-cmp/LISTFILTER_HANDLER');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ListFilterComponent {
    /**
     * @param {?} filterService
     * @param {?} cd
     * @param {?} handler
     * @param {?} convertorService
     * @param {?} render
     * @param {?} injector
     */
    constructor(filterService, cd, handler, convertorService, render, injector) {
        this.filterService = filterService;
        this.cd = cd;
        this.handler = handler;
        this.convertorService = convertorService;
        this.render = render;
        this.injector = injector;
        //  表单左对齐
        this.alLeft = false;
        //  平分空间
        this.autoWidth = true;
        //  实时搜索
        this.liveSearch = false;
        //  label的宽度是否自适应
        this.autoLabel = false;
        //  是否禁用
        this.disabled = false;
        this.filterPaddingNone = false;
        // 默认值是空值时执行查询，兼容旧方式
        this.defaultEmptyValueSearch = true;
        this.query = new EventEmitter();
        this.clear = new EventEmitter();
        this.searchChange = new EventEmitter();
        this.conditionsChange = new EventEmitter();
        //  filterWidth:number = 1000;
        //  标记是否有滚动条
        //  hasScroll = true;
        //  需要监听收折的表单
        //  resizeGroups: listFilterGroup;
        // 筛选icon部分小红点
        this.showExpandTag = false;
        /**
         * 是否需要显示展开更多icon
         */
        this.showMoreIcon = false;
        //  moreIconWidth:number = 0;
        this.showFilter = false;
        // 是否展现出的只有一个搜索控件
        this.formExpand = false;
        // 提交表单数据
        //  queryList;
        // 隐藏提交表单数据
        //  extendqueryList;
        /**
         * 循环表单
         */
        this.listFilterConditions = new Array();
        /**
         * 用来存储setvalue前数据
         */
        this.stagListFilterConditions = new Array();
        /**
         * 记录默认收起的搜索表单列表
         */
        this.extendFilterList = [];
        /**
         * 记录显示的搜索表单列表
         */
        this.showFilterList = [];
        /**
         * 显示中表单的必填项
         */
        this.requiredListFilter = [];
        /** 隐藏中表单的必填项 */
        //  extendRequiredListFilter: Array<QueryCondition> = [];
        /**
         * 表单是否允许提交
         */
        this.canSubmit = false;
        /**
         * 扩展表单是否允许提交
         */
        //  extendCanSubmit:boolean = false;
        this.localeIds = {
            en: 'en',
            'zh-CHS': 'zh-CHS'
        };
        this.currentLocale = 'zh-CHS';
        this.isControlInline = true;
        this.fieldCodeOfClearFields = [];
        this.UPDATE_FILTER_VALUES_TIMER = null;
        this.overLayService = null;
        if (this.injector) {
            this.currentLocale = this.injector.get(LOCALE_ID);
            this.listfilterHandler = this.injector.get(LISTFILTER_HANDLER_TOKEN, null, InjectFlags.Optional);
            this.idService = this.injector.get(IdService);
            this.overLayService = this.injector.get(OverLayHiddenService, null);
        }
        if (!this.overLayService) {
            this.overLayService = new OverLayHiddenService();
        }
    }
    /**
     * @param {?} configs
     * @return {?}
     */
    set defaultValue(configs) {
        this._defaultValue = configs;
        /** @type {?} */
        let canFilter = this.defaultEmptyValueSearch || configs && configs.length > 0;
        if (canFilter) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.setFilterValue(this._defaultValue);
            }));
        }
    }
    /**
     * @return {?}
     */
    get defaultValue() {
        return this._defaultValue;
    }
    /**
     * @return {?}
     */
    get filterList() {
        return this._filterList;
    }
    /**
     * @param {?} filterList
     * @return {?}
     */
    set filterList(filterList) {
        this._filterList = filterList;
        this.initFilterList();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // if (this.currentLocale === this.localeIds['en']) {
        //     this.isControlInline = false;
        // } else {
        //     this.isControlInline = true;
        // }
        this.canShowMoreIcon();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.autoWidth && !this.formExpand && this.filterMainBasisRef) {
            /** @type {?} */
            const basicList = this.filterMainBasisRef.nativeElement.querySelectorAll('.filter-input-list');
            /** @type {?} */
            let basicWidth = 0;
            if (basicList && basicList.length) {
                for (let k = 0; k < basicList.length; k++) {
                    /** @type {?} */
                    const offW = Math.ceil(parseFloat(basicList[k].offsetWidth || 0));
                    if (offW > 0) {
                        basicWidth += offW;
                    }
                }
            }
            if (basicWidth > 0) {
                this.render.setStyle(this.filterMainBasisRef.nativeElement, 'width', basicWidth + 'px');
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.floatPanel) {
            this.overLayService.destory(this.floatPanel.nativeElement);
        }
    }
    /**
     * 初始化处理表单数据
     * @return {?}
     */
    initFilterList() {
        this.listFilterConditions = new Array();
        this.extendFilterList = [];
        this.showFilterList = [];
        this.filterDatas = this.filterService.fieldSchemasConvert(this._filterList);
        if (this.filterDatas && this.filterDatas.length) {
            this.listFilterConditions = this.convertorService.getSelectedFieldConditions(this.filterDatas, this.listFilterConditions);
            this.stagListFilterConditions = this.listFilterConditions.map((/**
             * @param {?} o
             * @return {?}
             */
            o => (Object.assign({}, o))));
            // 存储扩展项和默认展示表单
            this.listFilterConditions.forEach((/**
             * @param {?} field
             * @return {?}
             */
            field => {
                if (field.control.isExtend) {
                    this.extendFilterList.push(field);
                }
                else {
                    this.showFilterList.push(field);
                }
            }));
            // 判断是否是左对齐 只有一个搜索
            /** @type {?} */
            const _basisFilterList = this.listFilterConditions.filter((/**
             * @param {?} field
             * @return {?}
             */
            (field) => {
                return !field.control.isExtend;
            }));
            if (_basisFilterList && _basisFilterList.length === 1 && this.getControlType(_basisFilterList[0]) === 'search') {
                this.formExpand = true;
            }
            this.conditionChangeHandler();
            this.inSetCurrentFilterConditions();
            // 存储默认展示中必填项
            this.requiredListInit();
            this.canShowMoreIcon();
            //  this.listSearch();
            this.cd.detectChanges();
        }
    }
    /**
     * @return {?}
     */
    inSetCurrentFilterConditions() {
        if (this.listfilterHandler) {
            this.listfilterHandler.setCurrentFilterConditions(this.listFilterConditions);
        }
    }
    /**
     * 获取控件类型
     * @param {?} selectedFieldCondition
     * @return {?}
     */
    getControlType(selectedFieldCondition) {
        if (selectedFieldCondition) {
            if (selectedFieldCondition.control.getControlType() == ControlType.Text) {
                return 'input';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.Search) {
                return 'search';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.Date) {
                return 'date';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.Month) {
                return 'month';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.Year) {
                return 'year';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.DateRange) {
                return 'daterange';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.DateRangeTime) {
                return 'daterangetime';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.MonthRange) {
                return 'monthrange';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.YearRange) {
                return 'yearrange';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.DropDown) {
                return 'dropdown';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.NumberRange) {
                return 'number';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.Help) {
                return 'help';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.CheckboxGroup) {
                return 'checkboxgroup';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.Radio) {
                return 'radio';
            }
            else if (selectedFieldCondition.control.getControlType() == ControlType.InputGroup) {
                return 'input-group';
            }
            else {
                return 'input';
            }
        }
    }
    /**
     * 获得类名
     * @param {?} currentItem
     * @return {?}
     */
    getStyle(currentItem) {
        /** @type {?} */
        const defaultCondtionStyle = 'col-12 col-md-6 col-xl-3 col-el-2';
        return (this.filterClass && !this.autoWidth) ? this.filterClass : defaultCondtionStyle;
    }
    /**
     * 判断是否需要显示更多按钮
     * @return {?}
     */
    canShowMoreIcon() {
        if (this.extendFilterList.length > 0) {
            this.showMoreIcon = true;
        }
        else {
            this.showMoreIcon = false;
        }
    }
    /**
     * 判断是否所有必填项都填写完毕
     * @param {?} requirelist
     * @return {?}
     */
    canSubmitFilter(requirelist) {
        /** @type {?} */
        let formCanSubmit = false;
        if (!requirelist || !requirelist.length) {
            formCanSubmit = true;
            return formCanSubmit;
        }
        else {
            for (let i = 0; i < requirelist.length; i++) {
                /** @type {?} */
                const item = requirelist[i];
                if (item.control.getControlType() === ControlType.Text) {
                    /** @type {?} */
                    const tv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(tv).length < 0 || !tv.value) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.Help) {
                    /** @type {?} */
                    const shv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(shv).length === 0 || !shv.value || !shv.valueField) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.DropDown) {
                    /** @type {?} */
                    const ddv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(ddv).length === 0 || !ddv.value) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.DateRange) {
                    /** @type {?} */
                    const drv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(drv).length === 0 || (!drv.startTime && !drv.endTime)) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.DateRangeTime) {
                    /** @type {?} */
                    const drv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(drv).length === 0 || (!drv.startTime && !drv.endTime)) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.MonthRange) {
                    /** @type {?} */
                    const mrv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(mrv).length === 0 || (!mrv.startTime && !mrv.endTime)) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.YearRange) {
                    /** @type {?} */
                    const yrv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(yrv).length === 0 || (!yrv.startTime && !yrv.endTime)) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.NumberRange) {
                    /** @type {?} */
                    const nrv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(nrv).length === 0 || (!nrv.startValue && !nrv.endValue)) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.Search) {
                    /** @type {?} */
                    const sv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(sv).length < 0 || !sv.value) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.Date) {
                    /** @type {?} */
                    const dv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(dv).length < 0 || !dv.value) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.Month) {
                    /** @type {?} */
                    const mv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(mv).length < 0 || !mv.value) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.Year) {
                    /** @type {?} */
                    const yv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(yv).length < 0 || !yv.value) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.CheckboxGroup) {
                    /** @type {?} */
                    const cbgv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(cbgv).length === 0 || Object.keys(cbgv.value).length === 0) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.Radio) {
                    /** @type {?} */
                    const ddv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(ddv).length === 0 || !ddv.value) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
                else if (item.control.getControlType() === ControlType.InputGroup) {
                    /** @type {?} */
                    const sv = ((/** @type {?} */ (item.value)));
                    if (Object.keys(sv).length < 0 || !sv.textValue) {
                        formCanSubmit = false;
                        return false;
                    }
                    else {
                        formCanSubmit = true;
                    }
                }
            }
            return formCanSubmit;
        }
    }
    /**
     * 搜索表单变化
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    onSearch($event, item) {
        if (this.disabled) {
            return;
        }
        this.conditionChangeHandler(false);
        this.searchChange.emit({ item, conditions: this.listFilterConditions, instance: this });
        this.inSetCurrentFilterConditions();
        this.canSubmit = this.canSubmitFilter(this.requiredListFilter);
        if (item.control.isExtend || !this.canSubmit || !this.liveSearch) {
            return;
        }
        this.submit('showFormData', this.listFilterConditions);
    }
    /**
     * 开始筛选
     * @return {?}
     */
    filterClick() {
        if (this.disabled || !this.canSubmit) {
            return;
        }
        this.submit('showFormData', this.listFilterConditions);
    }
    /**
     * 收折部分点击确定提交
     * @return {?}
     */
    listSearch() {
        if (this.disabled || !this.canSubmit) {
            return;
        }
        this.showFilter = false;
        this.submit('extendFormData', this.listFilterConditions);
    }
    /**
     * 取消搜索
     * @return {?}
     */
    listSearchCancel() {
        this.showFilter = false;
    }
    /**
     * 提交表单
     * @param {?} type
     * @param {?} filterlist
     * @return {?}
     */
    submit(type, filterlist) {
        /** @type {?} */
        let queryList;
        queryList = this.handler.setFilterConditions(filterlist);
        if (type == 'extendFormData') {
            if (queryList.length > 0) {
                this.showExpandTag = true;
            }
            else {
                this.showExpandTag = false;
            }
        }
        this.query.emit({ type, data: JSON.stringify(queryList) });
    }
    /**
     * 对外提供获得表单搜索数据
     * @return {?}
     */
    getFilterData() {
        /** @type {?} */
        let queryList;
        queryList = this.handler.setFilterConditions(this.listFilterConditions);
        return JSON.stringify(queryList);
    }
    /**
     * 获取展示在外部的表单长度
     * @return {?}
     */
    getShowLength() {
        if (this.showFilterList) {
            return this.showFilterList.length;
        }
    }
    /**
     * 清空条件
     * @return {?}
     */
    resetSearch() {
        if (this.disabled) {
            return;
        }
        if (this.listFilterConditions && this.listFilterConditions.length) {
            this.listFilterConditions.forEach((/**
             * @param {?} listFilterCondition
             * @return {?}
             */
            listFilterCondition => {
                if (listFilterCondition.control.getControlType() == ControlType.Text) {
                    listFilterCondition.value = new TextValue();
                }
                else if (listFilterCondition.control.getControlType() == ControlType.Search) {
                    listFilterCondition.value = new SearchValue();
                }
                else if (listFilterCondition.control.getControlType() == ControlType.Date) {
                    listFilterCondition.value = new DateValue();
                }
                else if (listFilterCondition.control.getControlType() == ControlType.Month) {
                    listFilterCondition.value = new MonthValue();
                }
                else if (listFilterCondition.control.getControlType() == ControlType.Year) {
                    listFilterCondition.value = new YearValue();
                }
                else if (listFilterCondition.control.getControlType() == ControlType.DateRange) {
                    listFilterCondition.value = new DateRangeValue();
                }
                else if (listFilterCondition.control.getControlType() == ControlType.MonthRange) {
                    listFilterCondition.value = new MonthRangeValue();
                }
                else if (listFilterCondition.control.getControlType() == ControlType.YearRange) {
                    listFilterCondition.value = new YearRangeValue();
                }
                else if (listFilterCondition.control.getControlType() == ControlType.DropDown) {
                    listFilterCondition.value = new DropDownListValue();
                }
                else if (listFilterCondition.control.getControlType() == ControlType.NumberRange) {
                    listFilterCondition.value = new NumberRangeValue();
                }
                else if (listFilterCondition.control.getControlType() == ControlType.Help) {
                    listFilterCondition.value = new HelpValue();
                }
                else if (listFilterCondition.control.getControlType() == ControlType.CheckboxGroup) {
                    listFilterCondition.value = new CheckboxGroupValue();
                }
                else if (listFilterCondition.control.getControlType() == ControlType.Radio) {
                    listFilterCondition.value = new RadioGroupValue();
                }
                else if (listFilterCondition.control.getControlType() == ControlType.InputGroup) {
                    listFilterCondition.value = new InputGroupValue();
                }
                else {
                    listFilterCondition.value = new TextValue();
                }
            }));
            //  let listFilter = this.listFilterConditions.map(o => Object.assign({}, o));
            /** @type {?} */
            const listFilter = this.listFilterConditions.map((/**
             * @param {?} o
             * @return {?}
             */
            o => (Object.assign({}, o))));
            this.listFilterConditions = listFilter;
            this.stagListFilterConditions = this.listFilterConditions.map((/**
             * @param {?} o
             * @return {?}
             */
            o => (Object.assign({}, o))));
            this.requiredListInit();
            //  this.cd.markForCheck();
        }
        this.conditionChangeHandler(false);
        this.clear.emit();
    }
    // 设置默认值
    /**
     * @param {?} fieldConfigs
     * @return {?}
     */
    setFilterValue(fieldConfigs) {
        if (this.UPDATE_FILTER_VALUES_TIMER) {
            clearTimeout(this.UPDATE_FILTER_VALUES_TIMER);
        }
        this.UPDATE_FILTER_VALUES_TIMER = setTimeout((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const _filters = this.stagListFilterConditions.map((/**
             * @param {?} o
             * @return {?}
             */
            o => (Object.assign({}, o))));
            if (_filters && _filters.length) {
                this.setValues(_filters, fieldConfigs);
                /** @type {?} */
                const listFilter = _filters.map((/**
                 * @param {?} o
                 * @return {?}
                 */
                o => (Object.assign({}, o))));
                this.listFilterConditions = listFilter;
                this.requiredListInit();
                this.conditionChangeHandler();
                this.inSetCurrentFilterConditions();
                //  this.listSearch();
                this.cd.detectChanges();
                this.cd.markForCheck();
                this.canSubmit = this.canSubmitFilter(this.requiredListFilter);
                if (!this.canSubmit) {
                    return;
                }
                this.submit('showFormData', this.listFilterConditions);
            }
        }));
        // this.listFilterConditions = this.stagListFilterConditions.map(o => ({ ...o }));
        // if (this.listFilterConditions && this.listFilterConditions.length) {
        //     this.setValues(this.listFilterConditions, fieldConfigs);
        //     const listFilter = this.listFilterConditions.map(o => ({ ...o }));
        //     this.listFilterConditions = listFilter;
        //     this.requiredListInit();
        //     this.searchChange.emit(this.listFilterConditions);
        //     this.inSetCurrentFilterConditions();
        //     //  this.listSearch();
        //     this.cd.detectChanges();
        //     this.cd.markForCheck();
        //     this.canSubmit = this.canSubmitFilter(this.requiredListFilter);
        //     if (!this.canSubmit) {
        //         return;
        //     }
        //     this.submit('showFormData', this.listFilterConditions);
        // }
    }
    // 设置value
    /**
     * @param {?} conditions
     * @param {?} fieldConfigs
     * @return {?}
     */
    setValues(conditions, fieldConfigs) {
        /** @type {?} */
        let qc;
        /** @type {?} */
        let controlType;
        if (fieldConfigs && fieldConfigs.length) {
            fieldConfigs.forEach((/**
             * @param {?} v
             * @return {?}
             */
            v => {
                qc = conditions.find((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.fieldCode == v.labelCode));
                if (qc) {
                    controlType = this.getControlType(qc);
                    qc.value = this.filterService.setValues(controlType, v.value);
                }
            }));
        }
    }
    /**
     * @param {?} fieldName
     * @return {?}
     */
    getValue(fieldName) {
        /** @type {?} */
        const queryList = this.handler.setFilterConditions(this.listFilterConditions);
        /** @type {?} */
        const item = queryList.find((/**
         * @param {?} n
         * @return {?}
         */
        (n) => n['FilterField'] === fieldName));
        if (item) {
            return item.value;
        }
        return undefined;
    }
    // 必填项初始化
    /**
     * @return {?}
     */
    requiredListInit() {
        /** @type {?} */
        const requiredList = this.listFilterConditions.filter((/**
         * @param {?} listitem
         * @return {?}
         */
        (listitem) => {
            return listitem.control.required;
        }));
        if (requiredList && requiredList.length) {
            this.requiredListFilter = requiredList;
            this.canSubmit = this.canSubmitFilter(this.requiredListFilter);
        }
        else {
            this.requiredListFilter = [];
            this.canSubmit = true;
        }
    }
    /**
     * @param {?} fields
     * @return {?}
     */
    clearFilterValue(fields) {
        if (fields && fields.length) {
            if (typeof fields === 'string') {
                fields = fields.split(',');
            }
            fields = fields.map((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                return n.toLowerCase();
            }));
            this.listFilterConditions.forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                if (fields.indexOf(n.fieldCode.toLowerCase()) > -1) {
                    n.value.clearValue();
                }
            }));
        }
    }
    /**
     * @param {?} values
     * @return {?}
     */
    updateValues(values) {
        if (values && Object.keys(values)) {
            /** @type {?} */
            const fields = Object.keys(values);
            fields.forEach((/**
             * @param {?} f
             * @return {?}
             */
            f => {
                this.listFilterConditions.forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    if (fields.indexOf(n.fieldCode.toLowerCase()) > -1) {
                        n.value['value'] = values[f];
                    }
                }));
            }));
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    buildSmartHelpKey(value) {
        if (this.idService) {
            /** @type {?} */
            let prefix = '';
            if (location.hash) {
                /** @type {?} */
                const pathArr = location.hash.split('?');
                prefix = pathArr ? pathArr[0] : '';
            }
            else {
                /** @type {?} */
                const pathArr = location.pathname.split('/');
                prefix = pathArr ? pathArr[pathArr.length - 1] : '';
            }
            return this.idService.encrypt(prefix + '/list-filter/' + value);
        }
        else {
            return 'list-filter/' + value;
        }
    }
    /**
     * @private
     * @param {?=} searchEmit
     * @return {?}
     */
    conditionChangeHandler(searchEmit = true) {
        /** @type {?} */
        const queryList = this.handler.setFilterConditions(this.listFilterConditions);
        this.conditionsChange.emit({ data: JSON.stringify(queryList) });
        if (searchEmit) {
            this.searchChange.emit(this.listFilterConditions);
        }
    }
    /**
     * 浮动筛选面板通过方法展开和关闭
     * @param {?} evt
     * @return {?}
     */
    floatFilterOpen(evt) {
        this.showFilter = !this.showFilter;
        if (this.showFilter) {
            this.overLayService.registerMouseEvent(this.floatPanel.nativeElement, (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                if (this.floatPanel.nativeElement.contains(e.target)) {
                    return;
                }
                else {
                    if (e.target.nodeName === 'SPAN' && e.target.className.indexOf('f-icon-filtrate')) {
                        return;
                    }
                    /** @type {?} */
                    const cls = ['.f-datepicker-container', '.farris-timer-picker', '.farris-modal', '.f-combo-lookup', '.date-overlay-container'];
                    if (cls.find((/**
                     * @param {?} k
                     * @return {?}
                     */
                    k => e.target.closest(k)))) {
                        return;
                    }
                }
                this.showFilter = false;
                this.overLayService.destory(this.floatPanel.nativeElement);
                this.cd.detectChanges();
            }));
        }
        else {
            this.overLayService.destory(this.floatPanel.nativeElement);
        }
    }
}
ListFilterComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-list-filter',
                template: "<app-filter-common></app-filter-common>\r\n<div class=\"f-list-filter position-relative\"\r\n    [ngClass]=\"{'list-filter-padding': showMoreIcon,'list-filter-autoWidth': autoWidth,'list-filter-paddingnone': filterPaddingNone}\">\r\n    <ng-container *ngIf=\"filterType === 'list';else filterLayout\">\r\n        <div class=\"filter-inputs-main filter-inputs-main-list f-form-layout farris-form farris-form-controls-inline\">\r\n            <ng-container *ngFor=\"let formItem of listFilterConditions;let last = last;\">\r\n                <div class=\"col-12\"\r\n                    [ngClass]=\"{'filter-list-item': showFilterList && showFilterList.length && showFilterList[showFilterList.length-1]['id'] == formItem.id}\"\r\n                    *ngIf=\"!formItem.control.isExtend\">\r\n                    <div class=\"filter-input-list farris-group-wrap\"\r\n                        [ngClass]=\"{'filter-input-list-autolabel': autoLabel,'filter-input-list-checkbox': getControlType(formItem) === 'checkboxgroup'}\"\r\n                        [id]=\"'filter-'+formItem.id\">\r\n                        <ng-container [ngTemplateOutlet]=\"filterInputTemplate\"\r\n                            [ngTemplateOutletContext]=\"{ item: formItem }\"></ng-container>\r\n                        <div class=\"filter-search-btn\"\r\n                            *ngIf=\"!liveSearch && showFilterList && showFilterList.length && showFilterList[showFilterList.length-1]['id'] == formItem.id\">\r\n                            <button class=\"btn btn-primary\" [ngClass]=\"{'disabled': disabled || !canSubmit}\"\r\n                                (click)=\"filterClick()\">{{ 'listFilter.filter' | locale }}</button>\r\n                            <button class=\"btn btn-secondary filter-search-btn-reset\" *ngIf=\"!showMoreIcon\"\r\n                                (click)=\"resetSearch()\">\r\n                                <span class=\"f-icon f-icon-remove\"></span>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </ng-container>\r\n        </div>\r\n    </ng-container>\r\n    <ng-template #filterLayout>\r\n        <ng-container *ngIf=\"autoWidth;else gridLayout\">\r\n            <div class=\"filter-inputs-main-basis-wrapper\"\r\n                [ngClass]=\"{'list-filter-wrapper-show-btn': !liveSearch,'list-filter-wrapper-show-btn-remove': !liveSearch && !showMoreIcon}\">\r\n                <div class=\"filter-inputs-main-basis-wrapper-inner\">\r\n                    <div class=\"filter-inputs-main filter-inputs-main-basis farris-form d-flex\"\r\n                        [ngClass]=\"{'justify-content-end': !alLeft,'farris-form-controls-inline':isControlInline}\"\r\n                        #filterMainBasis>\r\n                        <ng-container *ngFor=\"let formItem of listFilterConditions\">\r\n                            <div *ngIf=\"!formItem.control.isExtend\" class=\"filter-input-list farris-group-wrap\"\r\n                                [ngClass]=\"{'filter-input-list-autolabel': autoLabel,'filter-input-list-checkbox': getControlType(formItem) === 'checkboxgroup', 'filter-input-list-expand':formExpand,'filter-input-list-left': alLeft,'filter-input-list-radio': getControlType(formItem) === 'radio','filter-input-list-hasrange':getControlType(formItem).indexOf('range')>-1}\"\r\n                                [id]=\"'filter-'+formItem.id\">\r\n                                <ng-container [ngTemplateOutlet]=\"filterInputTemplate\"\r\n                                    [ngTemplateOutletContext]=\"{ item: formItem }\"></ng-container>\r\n                            </div>\r\n                        </ng-container>\r\n                    </div>\r\n                </div>\r\n                <div class=\"filter-search-btn\" [ngClass]=\"{'filter-search-btn-remove': !showMoreIcon}\"\r\n                    *ngIf=\"!liveSearch\">\r\n                    <button class=\"btn btn-primary\" [ngClass]=\"{'disabled': disabled || !canSubmit}\"\r\n                        (click)=\"filterClick()\">{{ 'listFilter.filter' | locale }}</button>\r\n                    <button class=\"btn btn-secondary filter-search-btn-reset\" *ngIf=\"!showMoreIcon\"\r\n                        (click)=\"resetSearch()\">\r\n                        <span class=\"f-icon f-icon-remove\"></span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </ng-container>\r\n        <ng-template #gridLayout>\r\n            <div class=\"filter-inputs-main f-form-layout farris-form\" [ngClass]=\"\r\n                {'list-filter-type-1': getShowLength() === 1,\r\n                'list-filter-type-2': getShowLength() === 2,\r\n                'list-filter-type-3': getShowLength() === 3,\r\n                'list-filter-type-4': getShowLength() === 4,\r\n                'list-filter-type-5': getShowLength() === 5,\r\n                'list-filter-type-6': getShowLength() >= 6,\r\n                'list-filter-custom-type': this.filterClass,\r\n                'list-filter-show-reset': !showMoreIcon,\r\n                'list-filter-padding-none': liveSearch,\r\n                'farris-form-controls-inline':isControlInline}\">\r\n                <ng-container *ngFor=\"let formItem of listFilterConditions\">\r\n                    <div [ngClass]=\"getStyle(formItem)\" *ngIf=\"!formItem.control.isExtend\">\r\n                        <div class=\"filter-input-list farris-group-wrap\"\r\n                            [ngClass]=\"{'filter-input-list-autolabel': autoLabel,'filter-input-list-checkbox': getControlType(formItem) === 'checkboxgroup'}\"\r\n                            [id]=\"'filter-'+formItem.id\">\r\n                            <ng-container [ngTemplateOutlet]=\"filterInputTemplate\"\r\n                                [ngTemplateOutletContext]=\"{ item: formItem }\"></ng-container>\r\n                        </div>\r\n                    </div>\r\n                </ng-container>\r\n                <div class=\"filter-search-btn\" [ngClass]=\"{\r\n                    'filter-search-btn-type-1': getShowLength() === 1,\r\n                    'filter-search-btn-type-2': getShowLength() === 2,\r\n                    'filter-search-btn-type-3': getShowLength() === 3,\r\n                    'filter-search-btn-type-4': getShowLength() === 4,\r\n                    'filter-search-btn-type-5': getShowLength() === 5,\r\n                    'filter-search-custom-type': this.filterClass,\r\n                    'filter-search-btn-type-6': getShowLength() >= 6}\" *ngIf=\"!liveSearch\">\r\n                    <button class=\"btn btn-primary\" [ngClass]=\"{'disabled': disabled || !canSubmit}\"\r\n                        (click)=\"filterClick()\">{{ 'listFilter.filter' | locale }}</button>\r\n                    <button class=\"btn btn-secondary filter-search-btn-reset\" *ngIf=\"!showMoreIcon\"\r\n                        (click)=\"resetSearch()\">\r\n                        <span class=\"f-icon f-icon-remove\"></span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </ng-template>\r\n    </ng-template>\r\n    <div class=\"filter-expand position-absolute\" [class.active]=\"showFilter\" (click)=\"floatFilterOpen($event)\"\r\n        *ngIf=\"showMoreIcon\">\r\n        <span class=\"f-icon f-icon-filtrate\"></span>\r\n        <span class=\"filter-expand-tag\" *ngIf=\"showExpandTag\"></span>\r\n    </div>\r\n    <div class=\"filter-inputs-extend position-absolute\" [hidden]=\"!showFilter\" *ngIf=\"showMoreIcon\" #floatPanel>\r\n        <div class=\"filter-typelist-arrow\"></div>\r\n        <div class=\"farris-form farris-form-auto\" [ngClass]=\"{'farris-form-controls-inline':isControlInline}\">\r\n            <fieldset class=\"f-section-formgroup\">\r\n                <div class=\"f-section-formgroup-inputs\">\r\n                    <div class=\"col-12\">\r\n                        <ng-container *ngFor=\"let formItem of listFilterConditions\">\r\n                            <div class=\"filter-input-list farris-group-wrap\" *ngIf=\"formItem.control.isExtend\">\r\n                                <ng-container [ngTemplateOutlet]=\"filterInputTemplate\"\r\n                                    [ngTemplateOutletContext]=\"{ item: formItem }\"></ng-container>\r\n                            </div>\r\n                        </ng-container>\r\n                    </div>\r\n                </div>\r\n            </fieldset>\r\n            <!-- bugNum:456508 -->\r\n            <div class=\"filter-form-btns text-right\">\r\n                <button class=\"btn btn-link filter-form-btn-reset\" (click)=\"resetSearch()\">{{ 'listFilter.reset' |\r\n                    locale }}</button>\r\n                <button class=\"btn btn-secondary\" (click)=\"listSearchCancel()\">{{ 'listFilter.cancel' | locale\r\n                    }}</button>\r\n                <button class=\"btn btn-primary\" [ngClass]=\"{'disabled': disabled || !canSubmit}\"\r\n                    (click)=\"listSearch()\">{{ 'listFilter.confirm' | locale }}</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #filterInputTemplate let-item=\"item\">\r\n    <ng-container [ngSwitch]=\"item | controlType\">\r\n        <div class=\"filter-input-item filter-type-input\" *ngSwitchCase=\"'input'\">\r\n            <app-filter-input [item]=\"item\" [autoLabel]=\"autoLabel\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-input>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-search\" *ngSwitchCase=\"'search'\">\r\n            <app-filter-search [item]=\"item\" [autoLabel]=\"autoLabel\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-search>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-date\" *ngSwitchCase=\"'date'\">\r\n            <app-filter-date [changeFields]=\"fieldCodeOfClearFields\" [item]=\"item\" [autoLabel]=\"autoLabel\"\r\n                [disabled]=\"disabled\" (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\">\r\n            </app-filter-date>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-year\" *ngSwitchCase=\"'year'\">\r\n            <app-filter-date [changeFields]=\"fieldCodeOfClearFields\" [item]=\"item\" [autoLabel]=\"autoLabel\"\r\n                [disabled]=\"disabled\" [showType]=\"'3'\" (searchHandle)=\"onSearch($event,item)\"\r\n                class=\"form-group farris-form-group\"></app-filter-date>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-month\" *ngSwitchCase=\"'month'\">\r\n            <app-filter-date [changeFields]=\"fieldCodeOfClearFields\" [item]=\"item\" [autoLabel]=\"autoLabel\"\r\n                [disabled]=\"disabled\" [showType]=\"'2'\" (searchHandle)=\"onSearch($event,item)\"\r\n                class=\"form-group farris-form-group\"></app-filter-date>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-date\" *ngSwitchCase=\"'daterange'\">\r\n            <app-filter-daterange [changeFields]=\"fieldCodeOfClearFields\" [item]=\"item\" [autoLabel]=\"autoLabel\"\r\n                [disabled]=\"disabled\" (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\">\r\n            </app-filter-daterange>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-date\" *ngSwitchCase=\"'daterangetime'\">\r\n            <app-filter-daterange [changeFields]=\"fieldCodeOfClearFields\" [item]=\"item\" [autoLabel]=\"autoLabel\"\r\n                [disabled]=\"disabled\" [showTime]=\"true\" (searchHandle)=\"onSearch($event,item)\"\r\n                class=\"form-group farris-form-group\"></app-filter-daterange>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-monthrange\" *ngSwitchCase=\"'monthrange'\">\r\n            <app-filter-daterange [changeFields]=\"fieldCodeOfClearFields\" [item]=\"item\" [autoLabel]=\"autoLabel\"\r\n                [disabled]=\"disabled\" [showType]=\"'2'\" (searchHandle)=\"onSearch($event,item)\"\r\n                class=\"form-group farris-form-group\"></app-filter-daterange>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-yearrange\" *ngSwitchCase=\"'yearrange'\">\r\n            <app-filter-daterange [changeFields]=\"fieldCodeOfClearFields\" [item]=\"item\" [autoLabel]=\"autoLabel\"\r\n                [disabled]=\"disabled\" [showType]=\"'3'\" (searchHandle)=\"onSearch($event,item)\"\r\n                class=\"form-group farris-form-group\"></app-filter-daterange>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-dropdown\" *ngSwitchCase=\"'dropdown'\">\r\n            <app-filter-dropdown [changeFields]=\"fieldCodeOfClearFields\" [item]=\"item\" [autoLabel]=\"autoLabel\"\r\n                [disabled]=\"disabled\" (searchHandle)=\"onSearch($event,item)\" [enableClear]=\"item?.control?.enableClear\" class=\"form-group farris-form-group\">\r\n            </app-filter-dropdown>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-number\" *ngSwitchCase=\"'number'\">\r\n            <app-filter-number [changeFields]=\"fieldCodeOfClearFields\" [item]=\"item\" [autoLabel]=\"autoLabel\"\r\n                [disabled]=\"disabled\" (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\">\r\n            </app-filter-number>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-help\" *ngSwitchCase=\"'help'\">\r\n            <app-filter-help [changeFields]=\"fieldCodeOfClearFields\" [item]=\"item\" [autoLabel]=\"autoLabel\"\r\n                [instanceId]=\"buildSmartHelpKey(item.fieldCode)\"\r\n                [disabled]=\"disabled\" [hostRef]=\"this\" (searchHandle)=\"onSearch($event,item)\"\r\n                class=\"form-group farris-form-group\"></app-filter-help>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-checkboxgroup\" *ngSwitchCase=\"'checkboxgroup'\">\r\n            <app-filter-checkbox [changeFields]=\"fieldCodeOfClearFields\" [item]=\"item\" [autoLabel]=\"autoLabel\"\r\n                [disabled]=\"disabled\" (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"\r\n                style=\"white-space: nowrap;\"></app-filter-checkbox>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-radio\" *ngSwitchCase=\"'radio'\">\r\n            <app-filter-radio [changeFields]=\"fieldCodeOfClearFields\" [item]=\"item\" [autoLabel]=\"autoLabel\"\r\n                [disabled]=\"disabled\" (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"\r\n                style=\"white-space: nowrap;\"></app-filter-radio>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-input-group\" *ngSwitchCase=\"'input-group'\">\r\n            <app-filter-inputgroup [item]=\"item\" [autoLabel]=\"autoLabel\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\">\r\n            </app-filter-inputgroup>\r\n        </div>\r\n        <div class=\"filter-input-item filter-type-default\" *ngSwitchDefault>\r\n            <app-filter-input [item]=\"item\" [autoLabel]=\"autoLabel\" [disabled]=\"disabled\"\r\n                (searchHandle)=\"onSearch($event,item)\" class=\"form-group farris-form-group\"></app-filter-input>\r\n        </div>\r\n    </ng-container>\r\n</ng-template>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: ["::-webkit-scrollbar{width:6px;height:6px;background-color:#eee}::-webkit-scrollbar-track{border-radius:0}::-webkit-scrollbar-thumb{background-color:rgba(0,0,0,.15);-webkit-transition:.2s;transition:.2s;border-radius:6px}::-webkit-scrollbar-thumb:hover{background-color:rgba(0,0,0,.45)}.filter-search-btn-col{flex-basis:0;-webkit-box-flex:1;flex-grow:1;max-width:100%}.filter-search-btn-absoulte{position:absolute;right:0;top:0}.f-list-filter .filter-inputs-main-basis-wrapper{width:100%;overflow:hidden}.f-list-filter .filter-inputs-main-basis-wrapper.list-filter-wrapper-show-btn{position:relative;padding-right:84px}.f-list-filter .filter-inputs-main-basis-wrapper.list-filter-wrapper-show-btn.list-filter-wrapper-show-btn-remove{padding-right:124px}.f-list-filter .filter-inputs-main-basis-wrapper.list-filter-wrapper-show-btn .filter-search-btn{position:absolute;right:0;top:0}.f-list-filter .filter-inputs-main-basis-wrapper.list-filter-wrapper-show-btn .filter-search-btn .btn{margin-left:6px}.f-list-filter .filter-inputs-main-basis-wrapper.list-filter-wrapper-show-btn .filter-search-btn .btn:first-child{margin-left:0}.f-list-filter .filter-inputs-main-basis-wrapper .filter-inputs-main-basis-wrapper-inner{width:100%;overflow:auto}.f-list-filter .filter-inputs-main-basis-wrapper .filter-inputs-main-basis-wrapper-inner .filter-inputs-main-basis.justify-content-end{margin-left:auto}.f-list-filter.list-filter-padding{padding-right:45px}.f-list-filter.list-filter-autoWidth{padding-bottom:8px}.f-list-filter.list-filter-autoWidth.list-filter-paddingnone{padding-bottom:0}@media (min-width:768px){.f-list-filter .list-filter-type-1{position:static;padding-right:0}.f-list-filter .list-filter-type-2,.f-list-filter .list-filter-type-3{position:relative;padding-right:70px}}@media (max-width:767px){.f-list-filter .list-filter-type-1{position:relative;padding-right:70px}.f-list-filter .list-filter-type-1.list-filter-show-reset{padding-right:110px}.f-list-filter .list-filter-type-2,.f-list-filter .list-filter-type-3{position:relative;padding-right:70px}.f-list-filter .list-filter-type-2.list-filter-show-reset,.f-list-filter .list-filter-type-3.list-filter-show-reset{position:relative;padding-right:110px}}@media (min-width:1200px){.f-list-filter .list-filter-type-2,.f-list-filter .list-filter-type-3{position:static;padding-right:0}.f-list-filter .list-filter-type-4,.f-list-filter .list-filter-type-5{position:relative;padding-right:70px}}@media (max-width:767px){.f-list-filter .list-filter-type-4,.f-list-filter .list-filter-type-5{position:relative;padding-right:70px}.f-list-filter .list-filter-type-4.list-filter-show-reset,.f-list-filter .list-filter-type-5.list-filter-show-reset{position:relative;padding-right:110px}}@media (min-width:768px){.f-list-filter .list-filter-type-2.list-filter-show-reset,.f-list-filter .list-filter-type-3.list-filter-show-reset{position:relative;padding-right:110px}.f-list-filter .list-filter-type-4,.f-list-filter .list-filter-type-5{position:relative;padding-right:70px}.f-list-filter .list-filter-type-4.list-filter-show-reset,.f-list-filter .list-filter-type-5.list-filter-show-reset{position:relative;padding-right:110px}}@media (min-width:1690px){.f-list-filter .list-filter-type-4,.f-list-filter .list-filter-type-5{position:static;padding-right:0}}@media (min-width:1200px){.f-list-filter .list-filter-type-4.list-filter-show-reset,.f-list-filter .list-filter-type-5.list-filter-show-reset{position:relative;padding-right:110px}}.f-list-filter .list-filter-custom-type,.f-list-filter .list-filter-type-6{position:relative;padding-right:70px}.f-list-filter .list-filter-custom-type.list-filter-show-reset,.f-list-filter .list-filter-type-6.list-filter-show-reset{padding-right:110px}.f-list-filter .list-filter-padding-none{padding-right:0}.f-list-filter .filter-inputs-main{width:100%;overflow:hidden}.f-list-filter .filter-inputs-main .col-12{padding-left:0}.f-list-filter .filter-inputs-main.filter-inputs-main-padding{padding-right:70px;position:relative}.f-list-filter .filter-inputs-main .filter-input-list.filter-input-list-autolabel{padding-right:14px}.f-list-filter .filter-inputs-main .filter-input-list.filter-input-list-autolabel:last-child{padding-right:0}.f-list-filter .filter-inputs-main .filter-input-list.filter-input-list-checkbox{max-width:none;-webkit-box-flex:inherit;flex:inherit}@media (max-width:767px){.f-list-filter .filter-inputs-main .filter-search-btn.filter-search-btn-type-1{position:absolute;right:0;top:0}}@media (min-width:768px){.f-list-filter .filter-inputs-main .filter-search-btn.filter-search-btn-type-1{flex-basis:0;-webkit-box-flex:1;flex-grow:1;max-width:100%;position:static}.f-list-filter .filter-inputs-main .filter-search-btn.filter-search-btn-type-2,.f-list-filter .filter-inputs-main .filter-search-btn.filter-search-btn-type-3{position:absolute;right:0;top:0}}@media (max-width:767px){.f-list-filter .filter-inputs-main .filter-search-btn.filter-search-btn-type-2,.f-list-filter .filter-inputs-main .filter-search-btn.filter-search-btn-type-3{position:absolute;right:0;top:0}}@media (min-width:1200px){.f-list-filter .filter-inputs-main .filter-search-btn.filter-search-btn-type-2,.f-list-filter .filter-inputs-main .filter-search-btn.filter-search-btn-type-3{flex-basis:0;-webkit-box-flex:1;flex-grow:1;max-width:100%;position:static}.f-list-filter .filter-inputs-main .filter-search-btn.filter-search-btn-type-4,.f-list-filter .filter-inputs-main .filter-search-btn.filter-search-btn-type-5{position:absolute;right:0;top:0}}@media (max-width:767px){.f-list-filter .filter-inputs-main .filter-search-btn.filter-search-btn-type-4,.f-list-filter .filter-inputs-main .filter-search-btn.filter-search-btn-type-5{position:absolute;right:0;top:0}}@media (min-width:768px){.f-list-filter .filter-inputs-main .filter-search-btn.filter-search-btn-type-4,.f-list-filter .filter-inputs-main .filter-search-btn.filter-search-btn-type-5{position:absolute;right:0;top:0}}@media (min-width:1690px){.f-list-filter .filter-inputs-main .filter-search-btn.filter-search-btn-type-4,.f-list-filter .filter-inputs-main .filter-search-btn.filter-search-btn-type-5{flex-basis:0;-webkit-box-flex:1;flex-grow:1;max-width:100%;position:static}}.f-list-filter .filter-inputs-main .filter-search-btn.filter-search-btn-type-6,.f-list-filter .filter-inputs-main .filter-search-btn.filter-search-custom-type{position:absolute;right:0;top:0}.f-list-filter .filter-inputs-main .filter-search-btn .btn{margin-left:6px}.f-list-filter .filter-inputs-main .filter-search-btn .btn:first-child{margin-left:0}.f-list-filter .filter-inputs-main.filter-inputs-main-basis .filter-input-list{min-width:200px}.f-list-filter .filter-inputs-main.filter-inputs-main-basis .filter-input-list .filter-input-item .form-group{margin-bottom:0}.f-list-filter .filter-inputs-main.filter-inputs-main-basis .filter-input-list.filter-input-list-left{-webkit-box-flex:1;flex:1 1 auto;width:0}.f-list-filter .filter-inputs-main.filter-inputs-main-basis .filter-input-list.filter-input-list-expand{max-width:none}.f-list-filter .filter-inputs-main.filter-inputs-main-basis .filter-input-list-hasrange.filter-input-list-left,.f-list-filter .filter-inputs-main.filter-inputs-main-basis .filter-input-list-radio.filter-input-list-left{width:auto}.f-list-filter .filter-inputs-main.filter-inputs-main-basis.justify-content-end .filter-input-list:not(.filter-input-list-checkbox){-webkit-box-flex:1;flex:auto}.f-list-filter .filter-expand{right:0;top:0;width:24px;margin-left:21px;height:24px;line-height:24px;cursor:pointer}.f-list-filter .filter-expand.active{border-radius:2px}.f-list-filter .filter-expand .f-icon{display:block;line-height:24px;margin:0 auto;font-size:18px}.f-list-filter .filter-expand .filter-expand-tag{position:absolute;right:0;top:0;display:block;width:6px;height:6px;border-radius:50%}.f-list-filter .filter-inputs-extend{width:429px;right:0;top:34px;background-color:#fff;box-shadow:0 2px 3px 0 rgba(0,0,0,.15);z-index:900;padding:20px 0}.f-list-filter .filter-inputs-extend .filter-typelist-arrow{display:block;position:absolute;right:7px;top:-4px;width:8.48528137px;height:8.48528137px;background:0 0;border-style:solid;border-width:4.24264069px;box-shadow:-2px -2px 5px rgba(0,0,0,.08);-webkit-transform:translateX(-50%) rotate(45deg);transform:translateX(-50%) rotate(45deg);border-color:#fff transparent transparent #fff}.f-list-filter .filter-inputs-extend .filter-form-btns{margin-top:6px;padding:0 14px}.f-list-filter .filter-inputs-extend .filter-form-btns .btn{margin-left:6px}.f-list-filter .filter-inputs-extend .filter-form-btns .filter-form-btn-reset{position:relative;padding-right:10px;margin-right:4px}.f-list-filter .filter-inputs-extend .filter-form-btns .filter-form-btn-reset::after{content:'';position:absolute;right:0;top:50%;width:1px;height:16px;margin-top:-8px;background:#d9d9d9}.f-list-filter .filter-search-btn-reset{padding-left:4px;padding-right:4px;color:rgba(0,0,0,.65)}.f-list-filter .filter-input-list .form-group{display:block}.f-list-filter .farris-form-controls-inline .filter-input-list .form-group{display:-webkit-box;display:flex}.f-list-filter .filter-inputs-main-list .filter-input-item .farris-form-group{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row}.f-list-filter .filter-inputs-main-list .filter-list-item{padding-right:100px}.f-list-filter .filter-inputs-main-list .filter-list-item .filter-input-list{position:relative}.f-list-filter .filter-inputs-main-list .filter-list-item .filter-search-btn{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;position:absolute;top:50%;left:calc(100% + 20px);-webkit-transform:translateY(-50%);transform:translateY(-50%)}.filter-expand-simulate{opacity:0;display:inline-block;width:24px;height:24px;padding-left:21px}.filter-expand-simulate .f-icon{font-size:24px}"]
            }] }
];
/** @nocollapse */
ListFilterComponent.ctorParameters = () => [
    { type: ListFilterService },
    { type: ChangeDetectorRef },
    { type: QuerySolutionService },
    { type: ConvertorService },
    { type: Renderer2 },
    { type: Injector, decorators: [{ type: Optional }] }
];
ListFilterComponent.propDecorators = {
    filterMainBasisRef: [{ type: ViewChild, args: ['filterMainBasis',] }],
    floatPanel: [{ type: ViewChild, args: ['floatPanel',] }],
    alLeft: [{ type: Input }],
    autoWidth: [{ type: Input }],
    liveSearch: [{ type: Input }],
    autoLabel: [{ type: Input }],
    disabled: [{ type: Input }],
    filterClass: [{ type: Input }],
    filterPaddingNone: [{ type: Input }],
    filterType: [{ type: Input }],
    defaultEmptyValueSearch: [{ type: Input }],
    defaultValue: [{ type: Input }],
    query: [{ type: Output }],
    clear: [{ type: Output }],
    searchChange: [{ type: Output }],
    conditionsChange: [{ type: Output }],
    isControlInline: [{ type: Input }],
    filterList: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SolutionService {
    constructor() {
        this.filterEditors = {};
    }
    /**
     * @return {?}
     */
    getGuid() {
        return (this.s4() + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + this.s4() + this.s4());
    }
    /**
     * @private
     * @return {?}
     */
    s4() {
        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    }
    /**
     * 根据字段获取Lable控件的Title
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        if (field.id && field.id !== '') {
            return field.fieldName;
        }
    }
    /**
     * 数组克隆 也可使用JSON.Parse(JSON.Stringify([input])),前提类结构中没有借口
     * @param {?} input
     * @return {?}
     */
    arrayClone(input) {
        /** @type {?} */
        let result = new Array();
        if (input && input.length > 0) {
            input.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                result.push(Object.assign({}, element));
            }));
        }
        return result;
    }
    /**
     * @param {?} fieldName
     * @param {?} cmpIns
     * @return {?}
     */
    addFilterEditorInstance(fieldName, cmpIns) {
        this.filterEditors[fieldName] = cmpIns;
    }
}
SolutionService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SolutionService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class InputComponent {
    /**
     * @param {?} solutionService
     * @param {?} element
     */
    constructor(solutionService, element) {
        this.solutionService = solutionService;
        this.element = element;
        this.searchHandle = new EventEmitter();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
    }
    /**
     * @return {?}
     */
    get isExtend() {
        return !this.extend && this.autoLabel;
    }
    /**
     * @return {?}
     */
    get hidenLabel() {
        return !this.showlabel;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        //console.log(this.item);
        if (this.item) {
            /** @type {?} */
            const type = Object.prototype.toString.call(this.item.placeHolder);
            if (type == '[object Undefined]') {
                if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {
                    this.placeholder = this.item.control.placeholder;
                }
            }
            else {
                this.placeholder = this.item.placeHolder;
            }
        }
        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
            this.extend = this.item.control.isExtend;
            if (!this.extend) {
                this.showlabel = this.item.control.showLabel;
            }
        }
        this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);
        // (this.item.value as HelpValue).clear$.subscribe(() => {
        //     this.textValue = '';
        // });
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // if(!this.extend){
        //     const El = this.element.nativeElement;
        //     const itemWidth = El.clientWidth;
        //     El.querySelector('.list-filter-input-item').style.width = itemWidth + 'px';
        //     El.querySelector('.input-item-btns').style.width = itemWidth + 100 + 'px';
        // }
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
    }
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    InputChanged(e) {
        // let keycode = window.event ? e.keyCode : e.which;
        // if(keycode == 13){//回车键
        //     this.searchHandle.emit(this.item.value.value);
        // }
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit(this.item.value.value);
    }
}
InputComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-filter-input',
                template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <input class=\"form-control\" \r\n    type=\"text\" \r\n    [disabled]=\"disabled\"\r\n    [(ngModel)]=\"item.value.value\" \r\n    [placeholder]=\"placeholder\"\r\n    (keyup.enter)=\"InputChanged($event)\"\r\n    (blur)=\"InputChanged($event)\"\r\n    >\r\n</div>",
                styles: [""]
            }] }
];
/** @nocollapse */
InputComponent.ctorParameters = () => [
    { type: SolutionService },
    { type: ElementRef }
];
InputComponent.propDecorators = {
    item: [{ type: Input }],
    autoLabel: [{ type: Input }],
    disabled: [{ type: Input }],
    searchHandle: [{ type: Output, args: ['searchHandle',] }],
    isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
    hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SearchComponent {
    /**
     * @param {?} solutionService
     */
    constructor(solutionService) {
        this.solutionService = solutionService;
        this.searchHandle = new EventEmitter();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
        this.groupIcon = '<span class="k-icon k-i-search"></span>';
    }
    /**
     * @return {?}
     */
    get isExtend() {
        return !this.extend && this.autoLabel;
    }
    /**
     * @return {?}
     */
    get hidenLabel() {
        return !this.showlabel;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.item) {
            /** @type {?} */
            const type = Object.prototype.toString.call(this.item.placeHolder);
            if (type == '[object Undefined]') {
                if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {
                    this.placeholder = this.item.control.placeholder;
                }
            }
            else {
                this.placeholder = this.item.placeHolder;
            }
        }
        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
            this.extend = this.item.control.isExtend;
            if (!this.extend) {
                this.showlabel = this.item.control.showLabel;
            }
        }
        this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSearch($event) {
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit($event);
    }
}
SearchComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-filter-search',
                template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <input-group [groupText]=\"groupIcon\" [readonly]=\"disabled\" [(ngModel)]=\"item.value.value\" \r\n    (clear)=\"onSearch($event)\" (enterHandle)=\"onSearch($event)\" \r\n    (clickHandle)=\"onSearch($event)\"  [placeholder]=\"placeholder\"></input-group>\r\n</div>"
            }] }
];
/** @nocollapse */
SearchComponent.ctorParameters = () => [
    { type: SolutionService }
];
SearchComponent.propDecorators = {
    item: [{ type: Input }],
    autoLabel: [{ type: Input }],
    disabled: [{ type: Input }],
    searchHandle: [{ type: Output, args: ['searchHandle',] }],
    isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
    hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class HelpComponent {
    /**
     * @param {?} solutionService
     */
    constructor(solutionService) {
        this.solutionService = solutionService;
        this.searchHandle = new EventEmitter();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
        this.editable = false;
        /**
         * 多字段查询
         */
        this.enableMultiFieldSearch = false;
        /**
         * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
         */
        this.changeFields = [];
        this.onSearch = (/**
         * @return {?}
         */
        () => {
            if (this.disabled) {
                return;
            }
            this.searchHandle.emit();
            return of(true);
        });
    }
    /**
     * @return {?}
     */
    get isExtend() {
        return !this.extend && this.autoLabel;
    }
    /**
     * @return {?}
     */
    get hidenLabel() {
        return !this.showlabel;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.item) {
            /** @type {?} */
            const type = Object.prototype.toString.call(this.item.placeHolder);
            if (type == '[object Undefined]') {
                if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {
                    this.placeholder = this.item.control.placeholder;
                }
            }
            else {
                this.placeholder = this.item.placeHolder;
            }
        }
        this.getHelpBindingInfo();
        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
            this.extend = this.item.control.isExtend;
            if (!this.extend) {
                this.showlabel = this.item.control.showLabel;
            }
        }
        this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);
        ((/** @type {?} */ (this.item.value))).clear$.subscribe((/**
         * @return {?}
         */
        () => {
            this.textValue = '';
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.getHelpBindingInfo();
        if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
            /** @type {?} */
            const isChange = changes['changeFields'].currentValue.some((/**
             * @param {?} field
             * @return {?}
             */
            field => field == this.item.fieldCode));
            if (isChange) {
                this.textValue = ((/** @type {?} */ (this.item.value))).textValue;
            }
        }
    }
    /**
     * @param {?} selectedItem
     * @return {?}
     */
    selectedDataHandler(selectedItem) {
        // console.log(selectedItem);
        //    let mapFields=new Function('return'+(this.item.control as HelpContol).mapFields);
        //    let mapFieldsKeys=Object.keys(mapFields());
        //    (this.item.value as HelpValue).value=new Object();
        //    mapFieldsKeys.forEach(mapFeildKey => {
        //     (this.item.value as HelpValue).value[mapFeildKey]=selectedItem[mapFeildKey];
        //    });
        //    (this.item.value as HelpValue).valueField=(this.item.control as HelpContol).valueField;
        //    let textField=(this.item.control as HelpContol).textField;
        //    this.textValue=(this.item.value as HelpValue).value[textField];
        // console.log(selectedItem);
        //    let mapFields=new Function('return'+(this.item.control as HelpContol).mapFields);
        //    let mapFieldsKeys=Object.keys(mapFields());
        //    (this.item.value as HelpValue).value=new Object();
        //    mapFieldsKeys.forEach(mapFeildKey => {
        //     (this.item.value as HelpValue).value[mapFeildKey]=selectedItem[mapFeildKey];
        //    });
        //    (this.item.value as HelpValue).valueField=(this.item.control as HelpContol).valueField;
        //    let textField=(this.item.control as HelpContol).textField;
        //    this.textValue=(this.item.value as HelpValue).value[textField];
        /** @type {?} */
        const helpValue = ((/** @type {?} */ (this.item.value)));
        helpValue.value = this.singleSelect ? [selectedItem] : selectedItem; // 单选返回对象，多选返回数组
        helpValue.valueField = this.valueField;
        helpValue.textValue = helpValue.getTextValue(this.textField);
        this.textValue = helpValue.textValue;
        // this.conditionChange.emit();
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit();
    }
    /**
     * @return {?}
     */
    getHelpBindingInfo() {
        if (this.item && this.item.control && this.item.control.getControlType() == ControlType.Help) {
            /** @type {?} */
            const helpList = ((/** @type {?} */ (this.item.control)));
            this.uri = helpList.uri;
            this.textField = helpList.textField;
            this.valueField = helpList.valueField;
            this.idField = helpList.idField;
            this.mapFields = helpList.mapFields;
            this.context = helpList.context;
            if (helpList.preEventCmd) {
                this.preEventCmd = (/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    e['hostRef'] = this.hostRef;
                    return helpList.preEventCmd(e);
                });
            }
            if (helpList.postEventCmd) {
                this.postEventCmd = (/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    e['hostRef'] = this.hostRef;
                    return helpList.postEventCmd(e);
                });
            }
            this.singleSelect = helpList.singleSelect;
            this.enableFullTree = helpList.enableFullTree;
            this.loadTreeDataType = helpList.loadTreeDataType;
            this.expandLevel = helpList.expandLevel;
            this.enableCascade = helpList.enableCascade;
            this.helpId = helpList.helpId;
            this.title = helpList.title;
            /** @type {?} */
            const helpValue = ((/** @type {?} */ (this.item.value)));
            this.clearFields = helpList.clearFields;
            // if (helpValue && helpValue.value) {
            //     // this.textValue = (this.item.value as HelpValue).value[this.textField];
            //     this.textValue = HelpValue.getPropValue(helpValue.value, this.textField.split('.'));
            // }
            this.displayType = helpList.displayType;
            if (helpValue.textValue == 'help-text-value-null') { // 旧数据兼容
                this.textValue = helpValue.getTextValue(this.textField);
            }
            else {
                this.textValue = helpValue.textValue;
            }
            this.editable = !!helpList.editable;
            this.enableMultiFieldSearch = !!helpList.enableMultiFieldSearch;
        }
    }
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    clearData(data) {
        ((/** @type {?} */ (this.item.value))).clearValue();
        this.searchHandle.emit();
    }
}
HelpComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-filter-help',
                template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <farris-lookup-grid\r\n        id=\"{{instanceId}}\"\r\n        [uri]=\"uri\"\r\n        [title]=\"title\"\r\n        [idField]=\"idField\" \r\n        [textField]=\"textField\" \r\n        [valueField]=\"valueField\" \r\n        [(ngModel)]=\"textValue\"\r\n        [displayType]=\"displayType\"\r\n        [editable]=\"editable\"\r\n        [readonly]=\"disabled\"\r\n        (clear)=\"clearData($event)\"\r\n        (selectedData)=\"selectedDataHandler($event)\"\r\n        [placeholder]=\"placeholder\"\r\n        [mapFields]=\"mapFields\"\r\n        [dictPicking]=\"preEventCmd\"\r\n        [dictPicked]=\"postEventCmd\"\r\n        [context]=\"context\"\r\n        [enableFullTree]=\"enableFullTree\"\r\n        [loadTreeDataType]=\"loadTreeDataType\"\r\n        [singleSelect]=\"singleSelect\"\r\n        [expandLevel]=\"expandLevel\"\r\n        [enableCascade]=\"enableCascade\"\r\n        [clear-fields]=\"clearFields\"\r\n        [useFavorite]=\"true\"\r\n        [enableMultiFieldSearch]=\"enableMultiFieldSearch\"\r\n    >\r\n    </farris-lookup-grid>\r\n\r\n    <!-- [dictPicked]=\"onSearch\" -->\r\n    <!-- (selectedData)=\"selectedDataHandler($event)\" -->\r\n</div>"
                // providers: [{ provide: ServerSideToken, useClass: LookupHttpBeQueryService }]
            }] }
];
/** @nocollapse */
HelpComponent.ctorParameters = () => [
    { type: SolutionService }
];
HelpComponent.propDecorators = {
    item: [{ type: Input }],
    autoLabel: [{ type: Input }],
    disabled: [{ type: Input }],
    hostRef: [{ type: Input }],
    instanceId: [{ type: Input }],
    searchHandle: [{ type: Output }],
    isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
    hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }],
    changeFields: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DateComponent {
    /**
     * @param {?} solutionService
     */
    constructor(solutionService) {
        this.solutionService = solutionService;
        this.searchHandle = new EventEmitter();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
        /**
         * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
         */
        this.changeFields = [];
    }
    /**
     * @return {?}
     */
    get isExtend() {
        return !this.extend && this.autoLabel;
    }
    /**
     * @return {?}
     */
    get hidenLabel() {
        return !this.showlabel;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // console.log(this.showType);
        this.initDate();
        if (this.item) {
            /** @type {?} */
            const type = Object.prototype.toString.call(this.item.placeHolder);
            if (type == '[object Undefined]') {
                if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {
                    this.placeholder = this.item.control.placeholder;
                }
            }
            else {
                this.placeholder = this.item.placeHolder;
            }
        }
        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
            this.extend = this.item.control.isExtend;
            if (!this.extend) {
                this.showlabel = this.item.control.showLabel;
            }
        }
        this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);
        ((/** @type {?} */ (this.item.value))).clear$.subscribe((/**
         * @return {?}
         */
        () => {
            this.date = '';
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.initDate();
        if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
            /** @type {?} */
            const isChange = changes['changeFields'].currentValue.some((/**
             * @param {?} field
             * @return {?}
             */
            field => field == this.item.fieldCode));
            if (isChange) {
                this.date = this.item.value.getOriginalValue();
            }
        }
    }
    /**
     * @return {?}
     */
    initDate() {
        // if(this.item && this.item.value.value){
        //     //this.time = this.getDate((this.item.value as DateValue).value);
        //     this.time = (this.item.value as DateValue).value;
        // }
        if (this.item && this.item.value
            && ((/** @type {?} */ (this.item.value))).value) {
            this.date = this.item.value.getOriginalValue();
        }
        else {
            this.date = undefined;
        }
        /** @type {?} */
        const format = this.showType == '2' ? 'yyyy-MM' : (this.showType == '3' ? 'yyyy' : 'yyyy-MM-dd');
        this.returnFormat = format;
        this.dateFormat = this.item.control.format ? this.item.control.format : format;
        // console.log('格式',this.dateFormat);
    }
    // getDate(dateString:string):Date{
    //     let arr1:Array<any> = dateString.split(" "); 
    //     let sdate = arr1[0].split('-'); 
    //     let date = new Date(sdate[0], sdate[1]-1, sdate[2]); 
    //     return date;
    // }
    /**
     * @param {?} event
     * @return {?}
     */
    onDateChange(event) {
        // console.log(event);
        if (event) {
            ((/** @type {?} */ (this.item.value))).value = event.returnFormatted;
        }
        else {
            ((/** @type {?} */ (this.item.value))).value = '';
            // this.item.value = new DateValue();
        }
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit(event);
    }
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
}
DateComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-filter-date',
                template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <farris-datepicker [(ngModel)]=\"date\" [returnFormat]=\"showType == '2'? 'yyyy-MM': (showType == '3'? 'yyyy':'yyyy-MM-dd')\" [editable]=\"false\" [dateFormat]=\"dateFormat\" [readonly]=\"disabled\" (valueChange)=\"onDateChange($event)\" [showType]=\"showType\" [placeholder]=\"placeholder\"></farris-datepicker>\r\n    <!-- <farris-datepicker [ngModel]=\"date\"  (ngModelChange)=\"onDateChange($event)\"></farris-datepicker> -->\r\n</div>"
            }] }
];
/** @nocollapse */
DateComponent.ctorParameters = () => [
    { type: SolutionService }
];
DateComponent.propDecorators = {
    item: [{ type: Input }],
    autoLabel: [{ type: Input }],
    disabled: [{ type: Input }],
    showType: [{ type: Input }],
    searchHandle: [{ type: Output }],
    isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
    hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }],
    changeFields: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DropDownComponent {
    /**
     * @param {?} solutionService
     */
    constructor(solutionService) {
        this.solutionService = solutionService;
        this.enableClear = true;
        this.searchHandle = new EventEmitter();
        this.dropDownListDataSource = new Array();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
        /**
         * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
         */
        this.changeFields = [];
    }
    /**
     * @return {?}
     */
    get isExtend() {
        return !this.extend && this.autoLabel;
    }
    /**
     * @return {?}
     */
    get hidenLabel() {
        return !this.showlabel;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // this.getDataSource();
        // const initialValue = this.item.value as DropDownListValue;
        // initialValue.value && (this.selectedItemId = initialValue.value.getEnumValue());
        if (this.item) {
            /** @type {?} */
            const type = Object.prototype.toString.call(this.item.placeHolder);
            if (type == '[object Undefined]') {
                if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {
                    this.placeholder = this.item.control.placeholder;
                }
            }
            else {
                this.placeholder = this.item.placeHolder;
            }
        }
        this.getDataSource();
        /** @type {?} */
        const initialValue = (/** @type {?} */ (this.item.value));
        initialValue.value && (this.selectedItemId = initialValue.value);
        if (this.item && this.item.control) {
            if (this.item.control.hasOwnProperty('isExtend')) {
                this.extend = this.item.control.isExtend;
                if (!this.extend) {
                    this.showlabel = this.item.control.showLabel;
                }
            }
        }
        this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);
        ((/** @type {?} */ (this.item.value))).clear$.subscribe((/**
         * @return {?}
         */
        () => {
            this.selectedItemId = '';
        }));
        // this.testId = this.solutionService.getGuid();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.getDataSource();
        if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
            /** @type {?} */
            const isChange = changes['changeFields'].currentValue.some((/**
             * @param {?} field
             * @return {?}
             */
            field => field == this.item.fieldCode));
            if (isChange) {
                this.selectedItemId = ((/** @type {?} */ (this.item.value))).value;
            }
        }
        //console.log(this.dropDownListDataSource);
    }
    /**
     * @return {?}
     */
    getDataSource() {
        if (this.item && this.item.value
            && this.item.control && this.item.control.getControlType() == ControlType.DropDown) {
            /** @type {?} */
            let dropDownList = ((/** @type {?} */ (this.item.control)));
            if (dropDownList.valueType == EnumType.BoolType) {
                this.dropDownListDataSource = Array();
                if (dropDownList.enumValues && dropDownList.enumValues.length > 0) {
                    dropDownList.enumValues.forEach((/**
                     * @param {?} element
                     * @return {?}
                     */
                    element => {
                        this.dropDownListDataSource.push(Object.assign(new EnumBoolValue(), element));
                    }));
                }
            }
            else if (dropDownList.valueType == EnumType.IntType) {
                this.dropDownListDataSource = Array();
                if (dropDownList.enumValues && dropDownList.enumValues.length > 0) {
                    dropDownList.enumValues.forEach((/**
                     * @param {?} element
                     * @return {?}
                     */
                    element => {
                        this.dropDownListDataSource.push(Object.assign(new EnumIntegerValue(), element));
                    }));
                }
            }
            else if (dropDownList.valueType == EnumType.StringType) {
                this.dropDownListDataSource = Array();
                if (dropDownList.enumValues && dropDownList.enumValues.length > 0) {
                    dropDownList.enumValues.forEach((/**
                     * @param {?} element
                     * @return {?}
                     */
                    element => {
                        this.dropDownListDataSource.push(Object.assign(new EnumStringValue(), element));
                    }));
                }
            }
        }
    }
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onSearch(event) {
        if (event) {
            ((/** @type {?} */ (this.item.value))).value = event.data.value;
        }
        else {
            ((/** @type {?} */ (this.item.value))).value = '';
        }
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClear(event) {
        ((/** @type {?} */ (this.item.value))).value = '';
        this.searchHandle.emit();
    }
}
DropDownComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-filter-dropdown',
                template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <farris-combo-list\r\n        [idField]=\"'value'\"\r\n        [textField]=\"'name'\"\r\n        [data]=\"dropDownListDataSource\"\r\n        [(ngModel)]=\"selectedItemId\"\r\n        [readonly]=\"disabled\"\r\n        [editable]=\"false\"\r\n        (selectChange)=\"onSearch($event)\"\r\n        (clear)=\"onClear($event)\"\r\n        [placeholder]=\"placeholder\"\r\n        [enableClear]=\"enableClear\"\r\n    ></farris-combo-list>\r\n\r\n</div>\r\n\r\n<!-- (valueChange)=\"onSearch($event)\" -->"
            }] }
];
/** @nocollapse */
DropDownComponent.ctorParameters = () => [
    { type: SolutionService }
];
DropDownComponent.propDecorators = {
    item: [{ type: Input }],
    autoLabel: [{ type: Input }],
    disabled: [{ type: Input }],
    enableClear: [{ type: Input }],
    searchHandle: [{ type: Output, args: ['searchHandle',] }],
    isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
    hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }],
    changeFields: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// import { NumberRangeValue } from '../../entity/conditionvalue/numberrangevaue';
class NumberComponent {
    /**
     * @param {?} solutionService
     * @param {?} element
     */
    constructor(solutionService, element) {
        this.solutionService = solutionService;
        this.element = element;
        this.searchHandle = new EventEmitter();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
        this.canNull = true;
        /**
         * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
         */
        this.changeFields = [];
    }
    /**
     * @return {?}
     */
    get isExtend() {
        return !this.extend && this.autoLabel;
    }
    /**
     * @return {?}
     */
    get hidenLabel() {
        return !this.showlabel;
    }
    /**
     * @param {?} nr
     * @return {?}
     */
    set item(nr) {
        this._item = nr;
        this.precision = nr.control.precision;
        this.bigNumber = nr.control.bigNumber;
        this.constructMultiFieldNumberRange((/** @type {?} */ (nr.value)));
        if (this._item && this._item.control && this._item.control.hasOwnProperty('isExtend')) {
            this.extend = this._item.control.isExtend;
            if (!this.extend) {
                this.showlabel = this._item.control.showLabel;
            }
        }
    }
    /**
     * @return {?}
     */
    get item() {
        return this._item;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.item) {
            /** @type {?} */
            const type = Object.prototype.toString.call(this.item.placeHolder);
            if (type == '[object Undefined]') {
                if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {
                    this.placeholder = this.item.control.placeholder;
                }
            }
            else {
                this.placeholder = this.item.placeHolder;
            }
            /** @type {?} */
            const beginplac = Object.prototype.toString.call(this.item.beginPlaceHolder);
            if (beginplac == '[object Undefined]') {
                if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {
                    this.beginPlaceHolder = this.item.control.beginPlaceHolder;
                }
            }
            else {
                this.beginPlaceHolder = this.item.beginPlaceHolder;
            }
            /** @type {?} */
            const endplac = Object.prototype.toString.call(this.item.beginPlaceHolder);
            if (endplac == '[object Undefined]') {
                if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {
                    this.endPlaceHolder = this.item.control.endPlaceHolder;
                }
            }
            else {
                this.endPlaceHolder = this.item.endPlaceHolder;
            }
            if (!this.bigNumber) {
                this.min = -2147483648;
                this.max = 2147483647;
            }
        }
        ((/** @type {?} */ (this.item.value))).clear$.subscribe((/**
         * @return {?}
         */
        () => {
            this.beginValue = '';
            this.endValue = '';
        }));
        this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
            /** @type {?} */
            const isChange = changes['changeFields'].currentValue.some((/**
             * @param {?} field
             * @return {?}
             */
            field => field == this.item.fieldCode));
            if (isChange) {
                this.constructMultiFieldNumberRange((/** @type {?} */ (this.item.value)));
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // if(!this.extend){
        //     const El = this.element.nativeElement;
        //     const itemWidth = El.clientWidth;
        //     El.querySelector('.list-filter-number-item').style.width = itemWidth + 'px';
        //     El.querySelector('.number-item-btns').style.width = itemWidth + 100 + 'px';
        // }
    }
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
    // constructNumberRange(value: NumberRangeValue): string{
    //     return "a~b".replace(/a/,value.startValue?value.startValue.toString().trim():"").replace(/b/,value.endValue?value.endValue.toString().trim():"");
    // }
    /**
     * @param {?} value
     * @return {?}
     */
    constructMultiFieldNumberRange(value) {
        // this.beginValue = value && value.startValue ? value.startValue.toString().trim() : '';
        // this.endValue = value && value.endValue ? value.endValue.toString().trim() : '';
        this.beginValue = value.startValue == null ? null : value.startValue;
        this.endValue = value.endValue == null ? null : value.endValue;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    numberChange(event) {
        if (event) {
            // const dataArray = event.split("~");
            // console.log(dataArray);
            // this._item.value = (new NumberRangeValueConvertor).initFromObject({startValue: dataArray[0], endValue: dataArray[1]});
            /** @type {?} */
            const dataArray = event.split("~");
            this.item.value.startValue = dataArray[0] ? dataArray[0] : null;
            this.item.value.endValue = dataArray[1] ? dataArray[1] : null;
        }
        else {
            this._item.value.startValue = null;
            this._item.value.endValue = null;
        }
        // const dataArray = event.split("~");
        // this._item.value = (new NumberRangeValueConvertor).initFromObject({startValue: dataArray[0], endValue: dataArray[1]});
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    beginValueChange($event) {
        this.beginValue = $event;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    endValueChange($event) {
        this.endValue = $event;
    }
}
NumberComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-filter-number',
                template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap d-flex\">\r\n    <farris-number-range class=\"f-utils-fill-flex-row\" [canNull]=\"canNull\" [disabled]=\"disabled\" [beginValue]=\"beginValue\" [endValue]=\"endValue\" \r\n    (beginValueChange)=\"beginValueChange($event)\" (endValueChange)=\"endValueChange($event)\" (valueChange)=\"numberChange($event)\" \r\n    [min]=\"min\" [max]=\"max\"\r\n    [beginPlaceHolder]=\"beginPlaceHolder\" [endPlaceHolder]=\"endPlaceHolder\" [placeholder]=\"placeholder\" [precision]=\"precision\" [bigNumber]=\"bigNumber\"></farris-number-range>\r\n</div>",
                styles: [""]
            }] }
];
/** @nocollapse */
NumberComponent.ctorParameters = () => [
    { type: SolutionService },
    { type: ElementRef }
];
NumberComponent.propDecorators = {
    autoLabel: [{ type: Input }],
    disabled: [{ type: Input }],
    searchHandle: [{ type: Output, args: ['searchHandle',] }],
    isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
    hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }],
    item: [{ type: Input }],
    changeFields: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * checboxgroup类型
 */
class CheckboxValue {
    /**
     * @return {?}
     */
    getEnumValueName() {
        return this.name;
    }
    /**
     * @return {?}
     */
    getEnumValue() {
        return this.value;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FilterCheckboxComponent {
    /**
     * @param {?} solutionService
     */
    constructor(solutionService) {
        this.solutionService = solutionService;
        this.searchHandle = new EventEmitter();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
        this.selectCheck = [];
        this.cla = true;
        this.checkboxDataSource = new Array();
        /**
         * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
         */
        this.changeFields = [];
    }
    /**
     * @return {?}
     */
    get isExtend() {
        return !this.extend && this.autoLabel;
    }
    /**
     * @return {?}
     */
    get isCheckExtend() {
        return !this.extend;
    }
    /**
     * @return {?}
     */
    get hidenLabel() {
        return !this.showlabel;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getDataSource();
        this.checkValue = this.item.value.getOriginalValue();
        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
            this.extend = this.item.control.isExtend;
            if (!this.extend) {
                this.showlabel = this.item.control.showLabel;
            }
        }
        this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);
        ((/** @type {?} */ (this.item.value))).clear$.subscribe((/**
         * @return {?}
         */
        () => {
            this.checkValue = [];
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.getDataSource();
        if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
            /** @type {?} */
            const isChange = changes['changeFields'].currentValue.some((/**
             * @param {?} field
             * @return {?}
             */
            field => field == this.item.fieldCode));
            if (isChange) {
                this.checkValue = ((/** @type {?} */ (this.item.value))).getOriginalValue();
            }
        }
    }
    /**
     * @return {?}
     */
    getDataSource() {
        if (this.item && this.item.control && this.item.control.getControlType() == ControlType.CheckboxGroup) {
            /** @type {?} */
            let checkboxList = ((/** @type {?} */ (this.item.control)));
            this.checkboxDataSource = Array();
            if (checkboxList.enumValues && checkboxList.enumValues.length > 0) {
                checkboxList.enumValues.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                element => {
                    this.checkboxDataSource.push(Object.assign(new CheckboxValue(), element));
                }));
            }
        }
        // if(this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')){
        //     this.extend = this.item.control.isExtend;
        // }
    }
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onSearch(event) {
        /** @type {?} */
        let checkboxValue = [];
        if (event) {
            // let checkboxList = event.split(',');
            /** @type {?} */
            let checkboxList = event;
            if (checkboxList && checkboxList.length) {
                checkboxValue = checkboxList;
            }
            this.item.value.value = checkboxValue;
        }
        else {
            this.item.value.value = new CheckboxGroupValue();
        }
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit();
    }
}
FilterCheckboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-filter-checkbox',
                template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <farris-checkboxgroup [value]=\"checkValue\" [horizontal]=\"true\" [disable]=\"disabled\"\r\n        [data]=\"checkboxDataSource\" [isStringValue]=\"false\" (changeValue)=\"onSearch($event)\">\r\n    </farris-checkboxgroup>\r\n</div>",
                styles: [""]
            }] }
];
/** @nocollapse */
FilterCheckboxComponent.ctorParameters = () => [
    { type: SolutionService }
];
FilterCheckboxComponent.propDecorators = {
    item: [{ type: Input }],
    autoLabel: [{ type: Input }],
    disabled: [{ type: Input }],
    searchHandle: [{ type: Output }],
    isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
    isCheckExtend: [{ type: HostBinding, args: ['class.filter-item-checbox-wrap',] }],
    cla: [{ type: HostBinding, args: ['class.filter-item-checkboxgroup',] }],
    hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }],
    changeFields: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DateRangeComponent {
    /**
     * @param {?} solutionService
     * @param {?} injector
     * @param {?} cdr
     */
    constructor(solutionService, injector, cdr) {
        this.solutionService = solutionService;
        this.injector = injector;
        this.cdr = cdr;
        this.searchHandle = new EventEmitter();
        //TODO: need 2 placeholder text for date range
        // rangeDate = {
        //     begin:null,
        //     end:null
        // };
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
        /**
         * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
         */
        this.changeFields = [];
    }
    // showType:string;
    /**
     * @return {?}
     */
    get isExtend() {
        return !this.extend && this.autoLabel;
    }
    /**
     * @return {?}
     */
    get hidenLabel() {
        return !this.showlabel;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initDate();
        if (this.item) {
            /** @type {?} */
            const type = Object.prototype.toString.call(this.item.placeHolder);
            if (type == '[object Undefined]') {
                if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {
                    this.placeholder = this.item.control.placeholder;
                }
            }
            else {
                this.placeholder = this.item.placeHolder;
            }
            /** @type {?} */
            const beginplac = Object.prototype.toString.call(this.item.beginPlaceHolder);
            if (beginplac == '[object Undefined]') {
                if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {
                    this.beginPlaceHolder = this.item.control.beginPlaceHolder;
                }
            }
            else {
                this.beginPlaceHolder = this.item.beginPlaceHolder;
            }
            /** @type {?} */
            const endplac = Object.prototype.toString.call(this.item.endPlaceHolder);
            if (endplac == '[object Undefined]') {
                if (this.item.control && this.item.control.hasOwnProperty('placeholder')) {
                    this.endPlaceHolder = this.item.control.endPlaceHolder;
                }
            }
            else {
                this.endPlaceHolder = this.item.endPlaceHolder;
            }
            // this.showType = this.item.control.showType;
        }
        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
            this.extend = this.item.control.isExtend;
            if (!this.extend) {
                this.showlabel = this.item.control.showLabel;
            }
        }
        this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);
        ((/** @type {?} */ (this.item.value))).clear$.subscribe((/**
         * @return {?}
         */
        () => {
            this.rangeDate = '';
        }));
        // this.cdr.detectChanges();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        // this.initDate();
        if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
            /** @type {?} */
            const isChange = changes['changeFields'].currentValue.some((/**
             * @param {?} field
             * @return {?}
             */
            field => field == this.item.fieldCode));
            if (isChange) {
                /** @type {?} */
                let beginValue = this.item.value && this.item.value.startTime ? this.item.value.startTime.toString().trim() : '';
                /** @type {?} */
                let endValue = this.item.value && this.item.value.endTime ? this.item.value.endTime.toString().trim() : '';
                this.rangeDate = `${beginValue}~${endValue}`;
            }
        }
    }
    /**
     * @return {?}
     */
    initDate() {
        if (this.item && this.item.control && this.item.control.hasOwnProperty('format')) {
            /** @type {?} */
            let itemDateFormat = this.item.control.format;
            if (this.showTime) {
                if (itemDateFormat.length > 0 && itemDateFormat.indexOf('HH:mm') == -1) {
                    itemDateFormat = itemDateFormat + ' HH:mm:ss';
                }
            }
            /** @type {?} */
            const format = this.showTime ? 'yyyy-MM-dd HH:mm:ss' : (this.showType == '2' ? 'yyyy-MM' : (this.showType == '3' ? 'yyyy' : 'yyyy-MM-dd'));
            this.returnFormat = format;
            this.dateFormat = itemDateFormat ? itemDateFormat : format;
        }
        /** @type {?} */
        const rangeDateValue = this.item && this.item.value;
        if (rangeDateValue.startTime && rangeDateValue.endTime) {
            this.rangeDate = `${rangeDateValue.startTime}~${rangeDateValue.endTime}`;
        }
    }
    /**
     * @param {?} dateString
     * @return {?}
     */
    getDate(dateString) {
        // let arr1:Array<any> = dateString.split(" "); 
        // let sdate = arr1[0].split('-'); 
        // let date = new Date(sdate[0], sdate[1]-1, sdate[2]);
        /** @type {?} */
        let date = new Date(dateString);
        return date;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDateChange(event) {
        if (event) {
            ((/** @type {?} */ (this.item.value))).startTime = event.returnFormatted.split('~')[0];
            ((/** @type {?} */ (this.item.value))).endTime = event.returnFormatted.split('~')[1];
        }
        else {
            // this.item.value = new DateRangeValue();
            this.item.value.startTime = '';
            this.item.value.endTime = '';
        }
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit(event);
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
}
DateRangeComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-filter-daterange',
                template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <ng-container *ngIf=\"showTime;else defaultdate\">\r\n        <farris-datepicker [(ngModel)]=\"rangeDate\" [dateRange]=\"true\" [readonly]=\"disabled\"\r\n         [editable]=\"false\" [returnFormat]=\"showTime ? 'yyyy-MM-dd HH:mm:ss' : 'yyyy-MM-dd'\"\r\n          [dateFormat]=\"dateFormat\" (valueChange)=\"onDateChange($event)\" [beginPlaceholder]=\"beginPlaceHolder\"\r\n           [endPlaceholder]=\"endPlaceHolder\" [placeholder]=\"placeholder\" [showTime]=\"showTime\"></farris-datepicker>\r\n    </ng-container>\r\n    <ng-template #defaultdate>\r\n        <farris-datepicker [(ngModel)]=\"rangeDate\" [dateRange]=\"true\" [readonly]=\"disabled\"\r\n         [editable]=\"false\" [returnFormat]=\"showTime ? 'yyyy-MM-dd HH:mm:ss': (showType == '2'? 'yyyy-MM': (showType == '3'? 'yyyy':'yyyy-MM-dd'))\"\r\n          [dateFormat]=\"dateFormat\" (valueChange)=\"onDateChange($event)\" [beginPlaceholder]=\"beginPlaceHolder\" [endPlaceholder]=\"endPlaceHolder\" [placeholder]=\"placeholder\" [showType]=\"showType\"></farris-datepicker>\r\n    </ng-template>\r\n    \r\n\r\n    <!-- <farris-datepicker [ngModel]=\"rangeDate\" [dateRange]=\"true\" [returnFormat]=\"'yyyy-MM-dd'\" [dateFormat]=\"item.control.format\" (ngModelChange)=\"onDateChange($event)\"></farris-datepicker> -->\r\n</div>\r\n<!-- [(ngModel)]=\"rangeDate\" -->"
            }] }
];
/** @nocollapse */
DateRangeComponent.ctorParameters = () => [
    { type: SolutionService },
    { type: Injector },
    { type: ChangeDetectorRef }
];
DateRangeComponent.propDecorators = {
    item: [{ type: Input }],
    autoLabel: [{ type: Input }],
    disabled: [{ type: Input }],
    showTime: [{ type: Input }],
    showType: [{ type: Input }],
    searchHandle: [{ type: Output, args: ['searchHandle',] }],
    isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
    hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }],
    changeFields: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ListFilterCommonComponent {
}
ListFilterCommonComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-filter-common',
                template: ``,
                encapsulation: ViewEncapsulation.None,
                styles: [".filter-item-wrap .col-form-label{width:auto!important;max-width:6rem}.filter-item-hiddenlabel{padding-left:14px}.f-list-filter .filter-inputs-main .filter-input-list:first-child .filter-item-hiddenlabel{padding-left:0}.filter-item-checbox-wrap .farris-checkradio-hor{flex-wrap:nowrap!important}.filter-item-checbox-wrap .farris-checkradio-hor .custom-control{flex-shrink:0}.filter-item-checbox-wrap .farris-checkradio-hor .custom-checkbox{max-width:177px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.filter-item-checbox-wrap .farris-checkradio-hor .custom-checkbox:last-child{padding-right:0}.filter-item-checbox-wrap .farris-input-wrap{overflow:auto}.filter-item-checbox-wrap .farris-input-wrap::-webkit-scrollbar{width:6px;height:6px}.filter-item-checbox-wrap .farris-input-wrap::-webkit-scrollbar-track{border-radius:0}.filter-item-checbox-wrap .farris-input-wrap::-webkit-scrollbar-thumb{-webkit-transition:.2s;transition:.2s;border-radius:6px}.filter-inputs-main-list.farris-form-controls-inline .farris-group-wrap .col-form-label{-webkit-box-pack:start!important;justify-content:flex-start!important;width:8rem}.filter-inputs-main-list.farris-form-controls-inline .farris-group-wrap .form-group{margin-bottom:1rem}.filter-inputs-main-list.farris-form-controls-inline .filter-list-item .farris-group-wrap .form-group{margin-bottom:0}"]
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ControlTypeXPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        /** @type {?} */
        let type;
        switch (value.control.getControlType()) {
            case ControlType.Text:
                type = 'input';
                break;
            case ControlType.Search:
                type = 'search';
                break;
            case ControlType.Date:
                type = 'date';
                break;
            case ControlType.Year:
                type = 'year';
                break;
            case ControlType.Month:
                type = 'month';
                break;
            case ControlType.MonthRange:
                type = 'monthrange';
                break;
            case ControlType.YearRange:
                type = 'yearrange';
                break;
            case ControlType.DateRange:
                type = 'daterange';
                break;
            case ControlType.DateRangeTime:
                type = 'daterangetime';
                break;
            case ControlType.DropDown:
                type = 'dropdown';
                break;
            case ControlType.NumberRange:
                type = 'number';
                break;
            case ControlType.Help:
                type = 'help';
                break;
            case ControlType.CheckboxGroup:
                type = 'checkboxgroup';
                break;
            case ControlType.Radio:
                type = 'radio';
                break;
            case ControlType.InputGroup:
                type = 'input-group';
                break;
            default:
                type = 'input';
                break;
        }
        return type;
    }
}
ControlTypeXPipe.decorators = [
    { type: Pipe, args: [{ name: 'controlType' },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * checboxgroup类型
 */
class RadioValue {
    /**
     * @return {?}
     */
    getEnumValueName() {
        return this.name;
    }
    /**
     * @return {?}
     */
    getEnumValue() {
        return this.value;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FilterRadioComponent {
    /**
     * @param {?} solutionService
     */
    constructor(solutionService) {
        this.solutionService = solutionService;
        this.searchHandle = new EventEmitter();
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
        this.selectCheck = [];
        this.cla = true;
        this.radioDataSource = new Array();
        /**
         * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
         */
        this.changeFields = [];
    }
    /**
     * @return {?}
     */
    get isExtend() {
        return !this.extend && this.autoLabel;
    }
    /**
     * @return {?}
     */
    get isCheckExtend() {
        return !this.extend;
    }
    /**
     * @return {?}
     */
    get hidenLabel() {
        return !this.showlabel;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getDataSource();
        this.radioValue = this.item.value.getOriginalValue();
        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
            this.extend = this.item.control.isExtend;
            if (!this.extend) {
                this.showlabel = this.item.control.showLabel;
            }
        }
        this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);
        ((/** @type {?} */ (this.item.value))).clear$.subscribe((/**
         * @return {?}
         */
        () => {
            this.radioValue = [];
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.getDataSource();
        if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
            /** @type {?} */
            const isChange = changes['changeFields'].currentValue.some((/**
             * @param {?} field
             * @return {?}
             */
            field => field == this.item.fieldCode));
            if (isChange) {
                /** @type {?} */
                let orginalValue = this.item.value.getOriginalValue();
                this.radioValue = orginalValue == undefined ? [] : orginalValue;
            }
        }
    }
    /**
     * @return {?}
     */
    getDataSource() {
        if (this.item && this.item.control && this.item.control.getControlType() == ControlType.Radio) {
            /** @type {?} */
            let radioList = ((/** @type {?} */ (this.item.control)));
            this.radioDataSource = Array();
            if (radioList.enumValues && radioList.enumValues.length > 0) {
                radioList.enumValues.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                element => {
                    this.radioDataSource.push(Object.assign(new RadioValue(), element));
                }));
            }
        }
        // if(this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')){
        //     this.extend = this.item.control.isExtend;
        // }
    }
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onSearch(event) {
        if (event) {
            this.item.value.value = event;
        }
        else {
            this.item.value.value = new RadioGroupValue();
        }
        if (this.disabled) {
            return;
        }
        this.searchHandle.emit();
    }
}
FilterRadioComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-filter-radio',
                template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <!-- <farris-checkboxgroup [value]=\"checkValue\" [horizontal]=\"true\" [disable]=\"disabled\"\r\n        [data]=\"checkboxDataSource\" [isStringValue]=\"false\" (changeValue)=\"onSearch($event)\">\r\n    </farris-checkboxgroup> -->\r\n    <farris-radiogroup \r\n    [value]=\"radioValue\" \r\n    [horizontal]=\"true\" \r\n    [data]=\"radioDataSource\"\r\n    [disabled]=\"disabled\"\r\n    (changeValue)=\"onSearch($event)\">\r\n    </farris-radiogroup>\r\n</div>",
                styles: [""]
            }] }
];
/** @nocollapse */
FilterRadioComponent.ctorParameters = () => [
    { type: SolutionService }
];
FilterRadioComponent.propDecorators = {
    item: [{ type: Input }],
    autoLabel: [{ type: Input }],
    disabled: [{ type: Input }],
    searchHandle: [{ type: Output, args: ['searchHandle',] }],
    isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
    isCheckExtend: [{ type: HostBinding, args: ['class.filter-item-checbox-wrap',] }],
    cla: [{ type: HostBinding, args: ['class.filter-item-radio',] }],
    hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }],
    changeFields: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FilterInputGroupComponent {
    /**
     * @param {?} solutionService
     */
    constructor(solutionService) {
        this.solutionService = solutionService;
        /**
         * 判断是否是在扩展区域展示
         */
        this.extend = false;
        /**
         * 判断是否显示label
         */
        this.showlabel = true;
        this.searchHandle = new EventEmitter();
        this.isTextFromDialog = false;
    }
    /**
     * @param {?} textItem
     * @return {?}
     */
    set item(textItem) {
        this._inputItem = textItem;
    }
    /**
     * @return {?}
     */
    get item() {
        return this.constructTextItem(this._inputItem);
    }
    /**
     * @return {?}
     */
    get isExtend() {
        return !this.extend && this.autoLabel;
    }
    /**
     * @return {?}
     */
    get hidenLabel() {
        return !this.showlabel;
    }
    /**
     * @param {?} textItem
     * @return {?}
     */
    constructTextItem(textItem) {
        /** @type {?} */
        const textValueObj = (/** @type {?} */ (textItem.value));
        textValueObj.textValue = textValueObj.textValue && textValueObj.textValue.trim();
        textItem.value = textValueObj;
        return textItem;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.testId = this.solutionService.getGuid();
        this.getInputGroupBindingInfo();
        if (this.item && this.item.control && this.item.control.hasOwnProperty('isExtend')) {
            this.extend = this.item.control.isExtend;
            if (!this.extend) {
                this.showlabel = this.item.control.showLabel;
            }
        }
        this.solutionService.addFilterEditorInstance(this.item.fieldCode, this);
    }
    /**
     * @return {?}
     */
    getInputGroupBindingInfo() {
        /** @type {?} */
        const inputGroupControl = ((/** @type {?} */ (this.item.control)));
        this.usageMode = inputGroupControl.usageMode;
        if (this.usageMode == 'open-modal' || this.usageMode == 'open-remote-modal') {
            this.dialogOptions = inputGroupControl.dialogOptions;
            /*
                example of dialogOptions = {
                   modalId: "1e011720-eb0f-4c9c-82b6-6844c89b2303"
                   mapFields: {hDepartment: "Name"}
                   title: "测试标题栏"
                   width: 800
                   height: 600
                }
             */
            if (this.dialogOptions.mapFields) {
                this.textField = JSON.stringify(this.dialogOptions.mapFields).split('"')[1];
            }
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
    /*
            dialogOptions = {
                modalId: "ae011720-eb0f-4c9c-82b6-6844c89b2303"
                mapFields: {hDepartment: "Name"}
                title: "测试标题栏"
                width: 800
                height: 600
                showButtons: true
                buttons: [
                    { text: "确定", cls: "btn-primary", handle: _this.viewModel.rootviewmodelconfirm1 },
                    { text: "取消", cls: "btn-secondary", handle: _this.viewModel.rootviewmodelcancel1}
                ]
            }
        */
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        if (this.usageMode == 'text') {
            this.item.control.click();
        }
        else {
            /** @type {?} */
            const options = this.dialogOptions;
            options.handle = (/**
             * @param {?} selectedItem
             * @return {?}
             */
            (selectedItem) => {
                // let modalData = item[0];
                // this.item.value.value = modalData[this.targetField];
                /** @type {?} */
                let selectedItems = selectedItem.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n));
                if (selectedItems && this.textField) {
                    this.item.value.value = selectedItems;
                    this.item.value.textValue = this.item.value.getTextValue(this.textField);
                    this.item.value.textField = this.textField;
                    this.item.value.isInputText = false;
                    if (this.inputgroup) {
                        this.inputgroup.cd.detectChanges();
                        this.inputgroup.value = this.item.value.textValue;
                    }
                    this.isTextFromDialog = true;
                    this.textFormDialog = this.item.value.textValue;
                    this.onBlur();
                }
            });
            this.item.control.click({ event, options });
        }
    }
    /**
     * @return {?}
     */
    onBlur() {
        if (this.disabled) {
            return;
        }
        if (this.usageMode == 'text') {
            this.item.value.isInputText = true;
        }
        if (this.usageMode == 'open-modal' || this.usageMode == 'open-remote-modal') {
            if (!this.isTextFromDialog) {
                this.item.value.isInputText = true;
            }
            if (this.item.value.textValue != this.textFormDialog) {
                this.isTextFromDialog = false;
                this.item.value.value = [];
                this.item.value.textField = undefined;
                this.item.value.isInputText = true;
            }
        }
        this.searchHandle.emit();
    }
    /**
     * @return {?}
     */
    onClear() {
        ((/** @type {?} */ (this.item.value))).clearValue();
        this.searchHandle.emit();
    }
}
FilterInputGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-filter-inputgroup',
                template: "<label class=\"col-form-label\" *ngIf=\"item && showlabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n    <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.required\">*</span>\r\n    <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n</label>\r\n<div class=\"farris-input-wrap\" *ngIf=\"item\">\r\n    <input-group #inputgroup\r\n        [(ngModel)]=\"item.value.textValue\" \r\n        name=\"{{item.fieldName}}\" \r\n        id=\"{{testId}}\"\r\n        [readonly]=\"disabled\"\r\n        [groupText]=\"item.control.groupText\"\r\n        [editable]=\"item.control.editable\"\r\n        [placeholder]=\"item.placeHolder\"\r\n        (clickHandle)=\"onClick($event)\"\r\n        (blurHandle)=\"onBlur()\"\r\n        (clear)=\"onClear()\"\r\n        >\r\n    </input-group>\r\n</div>\r\n"
            }] }
];
/** @nocollapse */
FilterInputGroupComponent.ctorParameters = () => [
    { type: SolutionService }
];
FilterInputGroupComponent.propDecorators = {
    item: [{ type: Input }],
    autoLabel: [{ type: Input }],
    disabled: [{ type: Input }],
    isExtend: [{ type: HostBinding, args: ['class.filter-item-wrap',] }],
    hidenLabel: [{ type: HostBinding, args: ['class.filter-item-hiddenlabel',] }],
    searchHandle: [{ type: Output, args: ['searchHandle',] }],
    inputgroup: [{ type: ViewChild, args: ['inputgroup',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ClearFieldsDirective {
    /**
     * @param {?} ngCtrl
     * @param {?} listFilterCmp
     * @param {?} inject
     */
    constructor(ngCtrl, listFilterCmp, inject) {
        this.ngCtrl = ngCtrl;
        this.listFilterCmp = listFilterCmp;
        this.inject = inject;
        this.clearFields = '';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.clearFields && this.ngCtrl) {
            this.ngCtrl.valueChanges.subscribe((/**
             * @param {?} v
             * @return {?}
             */
            (v) => {
                if (!this.ngCtrl.dirty) {
                    return;
                }
                this.listFilterCmp.fieldCodeOfClearFields = [];
                this.clearFields.split(',').forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    // 字段编号
                    /** @type {?} */
                    const conditionItem = this.listFilterCmp.listFilterConditions.find((/**
                     * @param {?} c
                     * @return {?}
                     */
                    c => c.fieldCode === n));
                    if (conditionItem) {
                        // 触发清空字段列表变更，特殊控件类型的清空，不能只是清空值
                        this.listFilterCmp.fieldCodeOfClearFields.push(n);
                        // 清空字段
                        conditionItem.value.clearValue();
                    }
                }));
            }));
        }
    }
}
ClearFieldsDirective.decorators = [
    { type: Directive, args: [{
                selector: '[clear-fields]'
            },] }
];
/** @nocollapse */
ClearFieldsDirective.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },
    { type: ListFilterComponent },
    { type: Injector }
];
ClearFieldsDirective.propDecorators = {
    clearFields: [{ type: Input, args: ['clear-fields',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ListFilterModule {
}
ListFilterModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    ListFilterComponent,
                    DateComponent,
                    NumberComponent,
                    HelpComponent,
                    InputComponent,
                    DropDownComponent,
                    SearchComponent,
                    FilterCheckboxComponent,
                    DateRangeComponent,
                    ListFilterCommonComponent,
                    FilterRadioComponent,
                    FilterInputGroupComponent,
                    ControlTypeXPipe,
                    ClearFieldsDirective
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    InputGroupModule,
                    FarrisDatePickerModule,
                    DatalistModule,
                    ComboListModule,
                    LookupModule,
                    FarrisFormsModule,
                    NumberSpinnerModule,
                    PerfectScrollbarModule,
                    LocaleModule.forRoot()
                    // InputsModule
                ],
                providers: [
                    ConvertorService,
                    SolutionService,
                    QuerySolutionService
                ],
                exports: [
                    ListFilterComponent,
                    DateComponent,
                    NumberComponent,
                    HelpComponent,
                    InputComponent,
                    DropDownComponent,
                    SearchComponent,
                    FilterCheckboxComponent,
                    DateRangeComponent,
                    ListFilterCommonComponent,
                    FilterRadioComponent,
                    FilterInputGroupComponent,
                    ControlTypeXPipe
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class listFilterItem {
    /**
     * @param {?} _id
     * @param {?} _groupName
     */
    constructor(_id, _groupName) {
        this.id = _id;
        this.name = _groupName;
        this.width = 0;
        this.isExtend = false;
    }
    // 设置宽度
    /**
     * @param {?} value
     * @return {?}
     */
    setWidth(value) {
        this.width = parseInt(value, 10);
    }
    // 获取宽度
    /**
     * @return {?}
     */
    getWidth() {
        return this.width;
    }
}
class listFilterGroup {
    constructor() {
        this.responsedIndex = 0;
        this.listItems = [];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ConditionValueConvert {
    /**
     * @param {?} obj
     * @return {?}
     */
    convertToObject(obj) {
        /** @type {?} */
        let conditionValue = (/** @type {?} */ (obj));
        /** @type {?} */
        let controlType = conditionValue.getControlType();
        /** @type {?} */
        let jobj = new Object();
        jobj['Type'] = controlType;
        if (controlType == ControlType.DropDown) {
            /** @type {?} */
            let convertor = new DropDownListValueConvert();
            jobj['Content'] = convertor.convertToObject(conditionValue);
        }
        else if (controlType == ControlType.NumberRange) {
            /** @type {?} */
            let convertor = new NumberRangeValueConvertor();
            jobj['Content'] = convertor.convertToObject(conditionValue);
        }
        else {
            jobj['Content'] = conditionValue;
        }
        return jobj;
    }
    /**
     * @param {?} jobj
     * @return {?}
     */
    initFromObject(jobj) {
        /** @type {?} */
        let controlType = (/** @type {?} */ (jobj['Type']));
        /** @type {?} */
        let content = jobj['Content'];
        if (controlType == ControlType.Text) {
            return Object.assign(new TextValue(), (/** @type {?} */ (content)));
        }
        else if (controlType == ControlType.NumberRange) {
            /** @type {?} */
            let convertor = new NumberRangeValueConvertor();
            return convertor.initFromObject(content);
        }
        else if (controlType == ControlType.DateRange) {
            return Object.assign(new DateRangeValue(), (/** @type {?} */ (content)));
        }
        else if (controlType == ControlType.DropDown) {
            /** @type {?} */
            let convertor = new DropDownListValueConvert();
            return convertor.initFromObject(content);
        }
        else if (controlType == ControlType.Help) {
            return Object.assign(new HelpValue(), (/** @type {?} */ (content)));
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RadioEnumValue {
    /**
     * @return {?}
     */
    getEnumValueName() {
        return this.name;
    }
    /**
     * @return {?}
     */
    getEnumValue() {
        return this.value;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const DisplayType = {
    LIST: 0,
    TREELIST: 1,
};
DisplayType[DisplayType.LIST] = 'LIST';
DisplayType[DisplayType.TREELIST] = 'TREELIST';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ControlConvert {
    /**
     * @param {?} obj
     * @return {?}
     */
    convertJObject(obj) {
        /** @type {?} */
        let control = (/** @type {?} */ (obj));
        /** @type {?} */
        let controlType = control.getControlType();
        /** @type {?} */
        let jobj = new Object();
        jobj["Type"] = controlType;
        if (controlType != ControlType.DropDown) {
            jobj["Content"] = control;
        }
        else {
            /** @type {?} */
            let convertor = new DropDownListControlConvert();
            jobj["Content"] = convertor.convertToObject((/** @type {?} */ (control)));
        }
        return jobj;
    }
    /**
     * @param {?} jobj
     * @return {?}
     */
    initFromJobject(jobj) {
        /** @type {?} */
        let controlType = (/** @type {?} */ (jobj["Type"]));
        /** @type {?} */
        let content = jobj["Content"];
        if (controlType == ControlType.Text) {
            return Object.assign(new TextControl(), (/** @type {?} */ (content)));
        }
        else if (controlType == ControlType.Search) {
            return Object.assign(new SearchControl(), (/** @type {?} */ (content)));
        }
        else if (controlType == ControlType.DateRange) {
            return Object.assign(new DateRangeControl(), (/** @type {?} */ (content)));
        }
        else if (controlType == ControlType.NumberRange) {
            return Object.assign(new NumberRangeControl(), (/** @type {?} */ (content)));
        }
        // else if(controlType==ControlType.DateTime){
        //     return Object.assign(new DateControl(),content as DateControl);
        // }
        else if (controlType == ControlType.DropDown) {
            /** @type {?} */
            let convert = new DropDownListControlConvert();
            return convert.initFromObject(content);
        }
        else if (controlType == ControlType.Help) {
            return Object.assign(new HelpContol(), (/** @type {?} */ (content)));
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { SolutionService, ConvertorService, QuerySolutionService, CompareType, RelationType, ValueType, ListFilterCommonComponent, ListFilterService, ListFilterComponent, ListFilterModule, FilterCheckboxComponent, DateComponent, DateRangeComponent, DropDownComponent, HelpComponent, InputComponent, NumberComponent, SearchComponent, FilterRadioComponent, FilterInputGroupComponent, listFilterItem, listFilterGroup, DateRangeValue, DropDownListValue, DropDownListValueConvert, ConditionValueConvert, NumberRangeValue, NumberRangeValueConvertor, HelpValue, TextValue, CheckboxGroupValue, DateValue, SearchValue, DateRangeTimeValue, RadioGroupValue, MonthValue, MonthRangeValue, YearRangeValue, YearValue, InputGroupValue, CheckboxEnumValue, CheckboxGroupControl, CheckboxValue, DateRangeControl, DateControl, DateRangeTimeControl, DropDownControl, DropDownListControlConvert, EnumBoolValue, EnumType, EnumValueConvert, EnumIntegerValue, EnumStringValue, RadioEnumValue, RadioControl, RadioValue, HelpContol, DisplayType, MonthControl, MonthRangeControl, YearControl, YearRangeControl, InputGroupControl, DialogConfig, DialogButtonConfig, NumberRangeControl, SearchControl, TextControl, ControlConvert, FieldConfig, ControlType, QueryCondition, ControlTypeXPipe, CheckboxGroupHandler, DateHandler, DateRangeHandler, DateRangeTimeHandler, DropDownHandler, NumberRangeHandler, SearchHandler, SmartHelpHandler, TextHandler, QueryConditionHandlerFactory, RadioHandler, MonthHandler, MonthRangeHandler, YearHandler, YearRangeHandler, InputGroupHandler, LISTFILTER_HANDLER_TOKEN, ClearFieldsDirective as ɵa };

//# sourceMappingURL=farris-ui-list-filter.js.map