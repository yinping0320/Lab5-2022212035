import { isFunction } from 'lodash-es';
import { Subject } from 'rxjs';
import { CommonModule } from '@angular/common';
import { Injectable, Component, Input, Output, EventEmitter, ViewChild, NgZone, ViewChildren, ComponentFactoryResolver, Injector, ApplicationRef, NgModule } from '@angular/core';
import { FarrisCommonModule } from '@farris/ui-common';
import { LocaleService, LocaleModule } from '@farris/ui-locale';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NotifyOptions {
}
NotifyOptions.decorators = [
    { type: Injectable }
];
class NotifyData extends NotifyOptions {
}
class NotifyConfig {
    constructor() {
        // Maximum number of toasties to show at once
        this.limit = 5;
        // Whether to show the 'X' icon to close the toast
        this.showClose = true;
        // The window position where the toast pops up
        this.position = 'top-center';
        // How long (in miliseconds) the toasty shows before it's removed. Set to null/0 to turn off.
        this.timeout = 3000;
        // What theme to use
        this.theme = 'bootstrap';
    }
}
NotifyConfig.decorators = [
    { type: Injectable }
];
/** @enum {number} */
const NotifyEventType = {
    ADD: 0,
    CLEAR: 1,
    CLEAR_ALL: 2,
};
NotifyEventType[NotifyEventType.ADD] = 'ADD';
NotifyEventType[NotifyEventType.CLEAR] = 'CLEAR';
NotifyEventType[NotifyEventType.CLEAR_ALL] = 'CLEAR_ALL';
class NotifyEvent {
    /**
     * @param {?} type
     * @param {?=} value
     */
    constructor(type, value) {
        this.type = type;
        this.value = value;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NotifyComponent {
    /**
     * @param {?} ngZone
     */
    constructor(ngZone) {
        this.ngZone = ngZone;
        this.close = new EventEmitter();
        this._state = false;
        this.outCls = '';
        this.inCls = {};
    }
    /**
     * @return {?}
     */
    get state() {
        return this._state;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set state(value) {
        this._state = value;
        if (value) {
            this.inCls[this.animateCls] = false;
            this.inCls['animated'] = value;
            this.inCls[this.outCls] = value;
            // this.ngZone.runOutsideAngular(() => {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.close.next(this.toast);
            }), 200);
            // });
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.getAnimateCls(changes.animateCls.currentValue);
    }
    /**
     * @param {?=} cls
     * @return {?}
     */
    getAnimateCls(cls) {
        cls = cls || 'bounceInRight';
        // this.outCls = 'bounceOut' + cls.substr(8);
        // switch (cls.substr(8)) {
        //     case 'Up':
        //         this.outCls = 'bounceOutDown';
        //         break;
        //     case 'Down':
        //         this.outCls = 'bounceOutUp';
        //         break;
        // }
        this.outCls = 'fadeOut';
        // outCls += tmp;
        this.inCls = {
            [this.toast.type]: true,
            [this.toast.theme]: true,
            'animated': false,
            [cls]: true,
            [this.outCls]: this.state
        };
    }
    /**
     * @param {?} event
     * @return {?}
     */
    closeToast(event) {
        event.preventDefault();
        this.state = true;
    }
    /**
     * @return {?}
     */
    getPurType() {
        if (this.toast && this.toast.type) {
            return 'f-icon-' + this.toast.type.replace('toasty-type-', '');
        }
        return 'f-icon-default';
    }
}
NotifyComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-notify',
                template: `
        <div #notifyDiv class="toast" [ngClass]="inCls">
            <button *ngIf="toast.showClose" class="toast-close f-btn-icon f-bare" (click)="closeToast($event)">
                <span class="f-icon modal_close"></span>
            </button>
            <section class="modal-tips"  *ngIf="toast.title || toast.msg">
                <div class="float-left modal-tips-iconwrap">
                    <span class="f-icon" [ngClass]=" getPurType()"></span>
                </div>
                <div class="modal-tips-content">
                    <ng-container *ngIf="toast.title&&toast.msg">
                        <h5 class="toast-title modal-tips-title" [innerHTML]="toast.title | safe: 'html'"></h5>
                        <p class="toast-msg" [innerHtml]="toast.msg | safe:'html'"></p>
                    </ng-container>
                    <ng-container *ngIf="!toast.title&&toast.msg">
                     <h5 class="toast-title modal-tips-title only-toast-msg" [innerHtml]="toast.msg | safe:'html'"></h5>
                    </ng-container>
                </div>
            </section>
        </div>
    `,
                styles: [`
            @-webkit-keyframes farrisMoveUpIn {
                0% {
                    transform: translateY(-100%);
                    transform-origin: 0 0;
                    opacity: 0
                }
            
                100% {
                    transform: translateY(0);
                    transform-origin: 0 0;
                    opacity: 1
                }
            }
            @keyframes farrisMoveUpIn {
                0% {
                    transform: translateY(-100%);
                    transform-origin: 0 0;
                    opacity: 0
                }
            
                100% {
                    transform: translateY(0);
                    transform-origin: 0 0;
                    opacity: 1
                }
            }
            @-webkit-keyframes farrisMoveUpOut {
                0% {
                    transform: translateY(0);
                    transform-origin: 0 0;
                    opacity: 1
                }
            
                100% {
                    transform: translateY(-100%);
                    transform-origin: 0 0;
                    opacity: 0
                }
            }
            @keyframes farrisMoveUpOut {
                0% {
                    transform: translateY(0);
                    transform-origin: 0 0;
                    opacity: 1
                }
            
                100% {
                    transform: translateY(-100%);
                    transform-origin: 0 0;
                    opacity: 0
                }
            }
            .toast.fadeIn {
                -webkit-animation: farrisMoveUpIn 0.2s linear;
                animation: farrisMoveUpIn 0.2s linear;
            }
            .toast.fadeOut {
                -webkit-animation: farrisMoveUpOut 0.2s linear;
                animation: farrisMoveUpOut 0.2s linear;
            }
        `]
            }] }
];
/** @nocollapse */
NotifyComponent.ctorParameters = () => [
    { type: NgZone }
];
NotifyComponent.propDecorators = {
    toast: [{ type: Input }],
    close: [{ type: Output }],
    notifyDiv: [{ type: ViewChild, args: ['notifyDiv',] }],
    animateCls: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NotifyContainerComponent {
    /**
     * @param {?} ngZone
     */
    constructor(ngZone) {
        this.ngZone = ngZone;
        this._position = '';
        this.style = {
            'left': '',
            'right': '',
            'top': '',
            'bottom': ''
        };
        this.notifyDistance = {
            'left': 12,
            'right': 12,
            'top': 136,
            'bottom': 12
        };
        this.animateCls = 'fadeIn';
        this.id = '';
        this.empty = new EventEmitter();
        this.toasts = [];
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set position(value) {
        if (value) {
            /** @type {?} */
            let notFound = true;
            for (let i = 0; i < NotifyContainerComponent.POSITIONS.length; i++) {
                if (NotifyContainerComponent.POSITIONS[i] === value) {
                    notFound = false;
                    break;
                }
            }
            if (notFound) {
                value = this.config.position;
            }
        }
        else {
            value = this.config.position;
        }
        // console.log(this.config);
        // if (value === 'center-center') {
        //     this.animateCls = 'bounceIn';
        // } else {
        /** @type {?} */
        const i = NotifyContainerComponent.POSITIONS.indexOf(value);
        //this.animateCls = NotifyContainerComponent.ANIMATES[i];
        this.animateCls = 'fadeIn';
        //}
        this._position = 'toasty-position-' + value;
        if (this.config.left) {
            this.notifyDistance.left = this.config.left;
        }
        if (this.config.right) {
            this.notifyDistance.right = this.config.right;
        }
        if (this.config.top) {
            this.notifyDistance.top = this.config.top;
        }
        if (this.config.bottom) {
            this.notifyDistance.bottom = this.config.bottom;
        }
        this.initstyle();
        if (value === 'top-left') {
            this.style.left = `${this.notifyDistance.left}px`;
            this.style.top = `${this.notifyDistance.top}px`;
        }
        else if (value === 'top-center') {
            this.style.top = `${this.notifyDistance.top}px`;
        }
        else if (value === 'top-right') {
            this.style.right = `${this.notifyDistance.right}px`;
            this.style.top = `${this.notifyDistance.top}px`;
        }
        else if (value === 'bottom-left') {
            this.style.left = `${this.notifyDistance.left}px`;
            this.style.bottom = `${this.notifyDistance.bottom}px`;
        }
        else if (value === 'bottom-center') {
            this.style.bottom = `${this.notifyDistance.bottom}px`;
        }
        else if (value === 'bottom-right') {
            this.style.right = `${this.notifyDistance.right}px`;
            this.style.bottom = `${this.notifyDistance.bottom}px`;
        }
    }
    /**
     * @return {?}
     */
    get position() {
        if (this._position) {
            return this._position;
        }
        else {
            return 'toasty-position-top-center';
        }
    }
    /**
     * @return {?}
     */
    initstyle() {
        this.style = {
            'left': '',
            'right': '',
            'top': '',
            'bottom': ''
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        if (this.notifyCmpList && this.notifyCmpList.length) {
            this.notifyCmpList.forEach((/**
             * @param {?} cmp
             * @return {?}
             */
            cmp => {
                cmp.close.subscribe((/**
                 * @return {?}
                 */
                () => {
                    this.clear(cmp.toast.id);
                }));
            }));
        }
    }
    /**
     * @param {?} toast
     * @return {?}
     */
    closeToast(toast) {
        this.clear(toast.id);
    }
    /**
     * @param {?} notify
     * @return {?}
     */
    add(notify) {
        if (this.toasts.length >= this.config.limit) {
            this.toasts.shift();
        }
        this.toasts.push(notify);
        if (notify.timeout) {
            this._setTimeout(notify);
        }
    }
    /**
     * @param {?} id
     * @return {?}
     */
    clear(id) {
        if (id) {
            this.toasts.forEach((/**
             * @param {?} value
             * @param {?} key
             * @return {?}
             */
            (value, key) => {
                if (value.id === id) {
                    if (value.onRemove && isFunction(value.onRemove)) {
                        value.onRemove.call(this, value);
                    }
                    this.toasts.splice(key, 1);
                }
            }));
            if (this.toasts.length === 0) {
                this.empty.emit();
            }
        }
        else {
            throw new Error('Please provide id of Toast to close');
        }
    }
    /**
     * @return {?}
     */
    clearAll() {
        this.toasts.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        (value, key) => {
            if (value.onRemove && isFunction(value.onRemove)) {
                value.onRemove.call(this, value);
            }
        }));
        this.toasts = [];
        this.empty.emit();
    }
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    findNotifyComponent(id) {
        return this.notifyCmpList.find((/**
         * @param {?} item
         * @return {?}
         */
        item => item.toast.id === id));
    }
    /**
     * @private
     * @param {?} notify
     * @return {?}
     */
    _setTimeout(notify) {
        // this.ngZone.runOutsideAngular(() => {
        window.setTimeout((/**
         * @return {?}
         */
        () => {
            // this.clear(notify.id);
            /** @type {?} */
            const cmp = this.findNotifyComponent(notify.id);
            if (cmp) {
                cmp.state = true;
                cmp.inCls[cmp.animateCls] = false;
            }
        }), notify.timeout);
        // });
    }
}
NotifyContainerComponent.POSITIONS = ['bottom-right', 'bottom-left',
    'top-right', 'top-left', 'top-center', 'bottom-center', 'center-center'];
NotifyContainerComponent.ANIMATES = ['bounceInRight', 'bounceInLeft',
    'bounceInRight', 'bounceInLeft', 'bounceInDown', 'bounceInUp', 'bounceIn'];
NotifyContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-notify-container',
                template: `
    <div [id]="id" class="farris-notify" [ngClass]="[position]" [ngStyle]="style">
        <farris-notify *ngFor="let toast of toasts" [toast]="toast" [animateCls]="animateCls" (close)="closeToast(toast)"></farris-notify>
    </div>
    `
            }] }
];
/** @nocollapse */
NotifyContainerComponent.ctorParameters = () => [
    { type: NgZone }
];
NotifyContainerComponent.propDecorators = {
    notifyCmpList: [{ type: ViewChildren, args: [NotifyComponent,] }],
    empty: [{ type: Output }],
    position: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Check and return true if an object is type of string
 * @param {?} obj Analyse has to object the string type
 * @return {?} result of analysis
 */
function isString(obj) {
    return typeof obj === 'string';
}
/**
 * Check and return true if an object is type of number
 * @param {?} obj Analyse has to object the boolean type
 * @return {?} result of analysis
 */
function isNumber(obj) {
    return typeof obj === 'number';
}
/**
 * Check and return true if an object is type of Function
 * @param {?} obj Analyse has to object the function type
 * @return {?} result of analysis
 */
function isFunction$1(obj) {
    return typeof obj === 'function';
}
class NotifyService {
    /**
     * @param {?} cfr
     * @param {?} injector
     * @param {?} appRef
     */
    constructor(cfr, injector, appRef) {
        this.cfr = cfr;
        this.injector = injector;
        this.appRef = appRef;
        // Init the counter
        this.uniqueCounter = 0;
        this.eventSource = new Subject();
        this.events = this.eventSource.asObservable();
        this.config = new NotifyConfig();
        this.localeService = this.injector.get(LocaleService);
    }
    /**
     * @param {?} options
     * @return {?}
     */
    default(options) {
        this.show(options, 'default');
    }
    /**
     * @param {?} options
     * @return {?}
     */
    info(options) {
        this.show(options, 'info');
    }
    /**
     * @param {?} options
     * @return {?}
     */
    success(options) {
        this.show(options, 'success');
    }
    /**
     * @param {?} options
     * @return {?}
     */
    warning(options) {
        this.show(options, 'warning');
    }
    /**
     * @param {?} options
     * @return {?}
     */
    error(options) {
        this.show(options, 'danger');
    }
    /**
     * @return {?}
     */
    clearAll() {
        // this.eventSource.next(new NotifyEvent(NotifyEventType.CLEAR_ALL));
        this.notifyContainer.instance.clearAll();
    }
    /**
     * @param {?} id
     * @return {?}
     */
    clear(id) {
        // this.eventSource.next(new NotifyEvent(NotifyEventType.CLEAR, id));
        this.notifyContainer.instance.clear(id);
    }
    /**
     * @private
     * @return {?}
     */
    createContainer() {
        if (!this.notifyContainer) {
            /** @type {?} */
            const containerFac = this.cfr.resolveComponentFactory(NotifyContainerComponent);
            /** @type {?} */
            const cmpRef = containerFac.create(this.injector);
            // cmpRef.instance.id = 'Farris-Notify-Container';
            this.appRef.attachView(cmpRef.hostView);
            document.querySelector('body').appendChild(cmpRef.location.nativeElement);
            this.notifyContainer = cmpRef;
        }
    }
    /**
     * @private
     * @param {?} options
     * @param {?} type
     * @return {?}
     */
    show(options, type) {
        this.createContainer();
        /** @type {?} */
        let notifyOptions;
        if (isString(options) && options !== '' || isNumber(options)) {
            notifyOptions = (/** @type {?} */ ({
                //20191129 去除默认标题
                //title: this.localeService.getValue('notify.title'),
                msg: options.toString()
            }));
        }
        else {
            notifyOptions = (/** @type {?} */ (options));
        }
        if (!notifyOptions || !notifyOptions.title && !notifyOptions.msg) {
            throw new Error('Farris-Notify: No notify title or message specified!');
        }
        type = type || 'default';
        this.uniqueCounter++;
        /** @type {?} */
        const showClose = this._checkConfigItem(this.config, notifyOptions, 'showClose');
        /** @type {?} */
        let theme;
        if (notifyOptions.theme) {
            theme = NotifyService.THEMES.indexOf(notifyOptions.theme) > -1 ? notifyOptions.theme : this.config.theme;
        }
        else {
            theme = this.config.theme;
        }
        //判断success类型 展示时间为1.5s
        if (type === 'success') {
            if (!notifyOptions.hasOwnProperty('timeout')) {
                notifyOptions.timeout = 1500;
            }
        }
        /** @type {?} */
        const newNotifyOpts = {
            id: this.uniqueCounter,
            title: notifyOptions.title,
            msg: notifyOptions.msg,
            showClose,
            type: 'toasty-type-' + type,
            theme: 'toasty-theme-' + theme,
            onAdd: notifyOptions.onAdd && isFunction$1(notifyOptions.onAdd) ? notifyOptions.onAdd : null,
            onRemove: notifyOptions.onRemove && isFunction$1(notifyOptions.onRemove) ? notifyOptions.onRemove : null
        };
        newNotifyOpts.timeout = notifyOptions.hasOwnProperty('timeout') ? notifyOptions.timeout : this.config.timeout;
        // this.eventSource.next(new NotifyEvent(NotifyEventType.ADD, newNotifyOpts));
        this.notifyContainer.instance.config = this.config;
        this.notifyContainer.instance.position = this.config.position;
        this.notifyContainer.instance.add(newNotifyOpts);
        ((/** @type {?} */ (this.notifyContainer.instance))).empty.subscribe((/**
         * @return {?}
         */
        () => {
            this.clearDom();
        }));
        this.notifyContainer.changeDetectorRef.markForCheck();
        this.notifyContainer.changeDetectorRef.detectChanges();
        if (notifyOptions.onAdd && isFunction$1(notifyOptions.onAdd)) {
            notifyOptions.onAdd.call(this, newNotifyOpts);
        }
    }
    /**
     * @private
     * @param {?} config
     * @param {?} options
     * @param {?} property
     * @return {?}
     */
    _checkConfigItem(config, options, property) {
        if (options[property] === false) {
            return false;
        }
        else if (!options[property]) {
            return config[property];
        }
        else {
            return true;
        }
    }
    /**
     * @private
     * @return {?}
     */
    clearDom() {
        if (this.notifyContainer) {
            /** @type {?} */
            const el = this.notifyContainer.location.nativeElement;
            if (el.parentNode) {
                el.parentNode.removeChild(el);
            }
            this.notifyContainer.destroy();
            this.notifyContainer = undefined;
        }
    }
}
NotifyService.THEMES = ['default', 'material', 'bootstrap'];
NotifyService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NotifyService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: ApplicationRef }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NotifyModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: NotifyModule,
            providers: [NotifyService]
        };
    }
}
NotifyModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FarrisCommonModule,
                    LocaleModule
                ],
                declarations: [NotifyComponent, NotifyContainerComponent],
                providers: [
                    NotifyService
                ],
                exports: [
                    NotifyComponent,
                    NotifyContainerComponent
                ],
                entryComponents: [NotifyContainerComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NotifyConfig, NotifyData, NotifyEvent, NotifyEventType, NotifyOptions, NotifyContainerComponent, NotifyComponent, isString, isNumber, isFunction$1 as isFunction, NotifyService, NotifyModule };

//# sourceMappingURL=farris-ui-notify.js.map