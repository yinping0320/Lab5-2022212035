/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChildren, QueryList, Output, EventEmitter, NgZone } from '@angular/core';
import { isFunction } from 'lodash-es';
import { NotifyComponent } from './notify.component';
var NotifyContainerComponent = /** @class */ (function () {
    function NotifyContainerComponent(ngZone) {
        this.ngZone = ngZone;
        this._position = '';
        this.style = {
            'left': '',
            'right': '',
            'top': '',
            'bottom': ''
        };
        this.notifyDistance = {
            'left': 12,
            'right': 12,
            'top': 136,
            'bottom': 12
        };
        this.animateCls = 'fadeIn';
        this.id = '';
        this.empty = new EventEmitter();
        this.toasts = [];
    }
    Object.defineProperty(NotifyContainerComponent.prototype, "position", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._position) {
                return this._position;
            }
            else {
                return 'toasty-position-top-center';
            }
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                /** @type {?} */
                var notFound = true;
                for (var i_1 = 0; i_1 < NotifyContainerComponent.POSITIONS.length; i_1++) {
                    if (NotifyContainerComponent.POSITIONS[i_1] === value) {
                        notFound = false;
                        break;
                    }
                }
                if (notFound) {
                    value = this.config.position;
                }
            }
            else {
                value = this.config.position;
            }
            // console.log(this.config);
            // if (value === 'center-center') {
            //     this.animateCls = 'bounceIn';
            // } else {
            /** @type {?} */
            var i = NotifyContainerComponent.POSITIONS.indexOf(value);
            //this.animateCls = NotifyContainerComponent.ANIMATES[i];
            this.animateCls = 'fadeIn';
            //}
            this._position = 'toasty-position-' + value;
            if (this.config.left) {
                this.notifyDistance.left = this.config.left;
            }
            if (this.config.right) {
                this.notifyDistance.right = this.config.right;
            }
            if (this.config.top) {
                this.notifyDistance.top = this.config.top;
            }
            if (this.config.bottom) {
                this.notifyDistance.bottom = this.config.bottom;
            }
            this.initstyle();
            if (value === 'top-left') {
                this.style.left = this.notifyDistance.left + "px";
                this.style.top = this.notifyDistance.top + "px";
            }
            else if (value === 'top-center') {
                this.style.top = this.notifyDistance.top + "px";
            }
            else if (value === 'top-right') {
                this.style.right = this.notifyDistance.right + "px";
                this.style.top = this.notifyDistance.top + "px";
            }
            else if (value === 'bottom-left') {
                this.style.left = this.notifyDistance.left + "px";
                this.style.bottom = this.notifyDistance.bottom + "px";
            }
            else if (value === 'bottom-center') {
                this.style.bottom = this.notifyDistance.bottom + "px";
            }
            else if (value === 'bottom-right') {
                this.style.right = this.notifyDistance.right + "px";
                this.style.bottom = this.notifyDistance.bottom + "px";
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NotifyContainerComponent.prototype.initstyle = /**
     * @return {?}
     */
    function () {
        this.style = {
            'left': '',
            'right': '',
            'top': '',
            'bottom': ''
        };
    };
    /**
     * @return {?}
     */
    NotifyContainerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    NotifyContainerComponent.prototype.ngAfterContentChecked = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.notifyCmpList && this.notifyCmpList.length) {
            this.notifyCmpList.forEach((/**
             * @param {?} cmp
             * @return {?}
             */
            function (cmp) {
                cmp.close.subscribe((/**
                 * @return {?}
                 */
                function () {
                    _this.clear(cmp.toast.id);
                }));
            }));
        }
    };
    /**
     * @param {?} toast
     * @return {?}
     */
    NotifyContainerComponent.prototype.closeToast = /**
     * @param {?} toast
     * @return {?}
     */
    function (toast) {
        this.clear(toast.id);
    };
    /**
     * @param {?} notify
     * @return {?}
     */
    NotifyContainerComponent.prototype.add = /**
     * @param {?} notify
     * @return {?}
     */
    function (notify) {
        if (this.toasts.length >= this.config.limit) {
            this.toasts.shift();
        }
        this.toasts.push(notify);
        if (notify.timeout) {
            this._setTimeout(notify);
        }
    };
    /**
     * @param {?} id
     * @return {?}
     */
    NotifyContainerComponent.prototype.clear = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        if (id) {
            this.toasts.forEach((/**
             * @param {?} value
             * @param {?} key
             * @return {?}
             */
            function (value, key) {
                if (value.id === id) {
                    if (value.onRemove && isFunction(value.onRemove)) {
                        value.onRemove.call(_this, value);
                    }
                    _this.toasts.splice(key, 1);
                }
            }));
            if (this.toasts.length === 0) {
                this.empty.emit();
            }
        }
        else {
            throw new Error('Please provide id of Toast to close');
        }
    };
    /**
     * @return {?}
     */
    NotifyContainerComponent.prototype.clearAll = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.toasts.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        function (value, key) {
            if (value.onRemove && isFunction(value.onRemove)) {
                value.onRemove.call(_this, value);
            }
        }));
        this.toasts = [];
        this.empty.emit();
    };
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    NotifyContainerComponent.prototype.findNotifyComponent = /**
     * @private
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.notifyCmpList.find((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.toast.id === id; }));
    };
    /**
     * @private
     * @param {?} notify
     * @return {?}
     */
    NotifyContainerComponent.prototype._setTimeout = /**
     * @private
     * @param {?} notify
     * @return {?}
     */
    function (notify) {
        var _this = this;
        // this.ngZone.runOutsideAngular(() => {
        window.setTimeout((/**
         * @return {?}
         */
        function () {
            // this.clear(notify.id);
            /** @type {?} */
            var cmp = _this.findNotifyComponent(notify.id);
            if (cmp) {
                cmp.state = true;
                cmp.inCls[cmp.animateCls] = false;
            }
        }), notify.timeout);
        // });
    };
    NotifyContainerComponent.POSITIONS = ['bottom-right', 'bottom-left',
        'top-right', 'top-left', 'top-center', 'bottom-center', 'center-center'];
    NotifyContainerComponent.ANIMATES = ['bounceInRight', 'bounceInLeft',
        'bounceInRight', 'bounceInLeft', 'bounceInDown', 'bounceInUp', 'bounceIn'];
    NotifyContainerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-notify-container',
                    template: "\n    <div [id]=\"id\" class=\"farris-notify\" [ngClass]=\"[position]\" [ngStyle]=\"style\">\n        <farris-notify *ngFor=\"let toast of toasts\" [toast]=\"toast\" [animateCls]=\"animateCls\" (close)=\"closeToast(toast)\"></farris-notify>\n    </div>\n    "
                }] }
    ];
    /** @nocollapse */
    NotifyContainerComponent.ctorParameters = function () { return [
        { type: NgZone }
    ]; };
    NotifyContainerComponent.propDecorators = {
        notifyCmpList: [{ type: ViewChildren, args: [NotifyComponent,] }],
        empty: [{ type: Output }],
        position: [{ type: Input }]
    };
    return NotifyContainerComponent;
}());
export { NotifyContainerComponent };
if (false) {
    /** @type {?} */
    NotifyContainerComponent.POSITIONS;
    /** @type {?} */
    NotifyContainerComponent.ANIMATES;
    /**
     * @type {?}
     * @private
     */
    NotifyContainerComponent.prototype._position;
    /** @type {?} */
    NotifyContainerComponent.prototype.style;
    /** @type {?} */
    NotifyContainerComponent.prototype.notifyDistance;
    /** @type {?} */
    NotifyContainerComponent.prototype.animateCls;
    /** @type {?} */
    NotifyContainerComponent.prototype.config;
    /** @type {?} */
    NotifyContainerComponent.prototype.id;
    /** @type {?} */
    NotifyContainerComponent.prototype.notifyCmpList;
    /** @type {?} */
    NotifyContainerComponent.prototype.empty;
    /** @type {?} */
    NotifyContainerComponent.prototype.toasts;
    /**
     * @type {?}
     * @private
     */
    NotifyContainerComponent.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,