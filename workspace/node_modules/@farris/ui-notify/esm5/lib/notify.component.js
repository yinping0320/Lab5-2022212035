/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ViewChild, ElementRef, NgZone } from '@angular/core';
import { NotifyData } from './notifiy.options';
var NotifyComponent = /** @class */ (function () {
    function NotifyComponent(ngZone) {
        this.ngZone = ngZone;
        this.close = new EventEmitter();
        this._state = false;
        this.outCls = '';
        this.inCls = {};
    }
    Object.defineProperty(NotifyComponent.prototype, "state", {
        get: /**
         * @return {?}
         */
        function () {
            return this._state;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            this._state = value;
            if (value) {
                this.inCls[this.animateCls] = false;
                this.inCls['animated'] = value;
                this.inCls[this.outCls] = value;
                // this.ngZone.runOutsideAngular(() => {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.close.next(_this.toast);
                }), 200);
                // });
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NotifyComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NotifyComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.getAnimateCls(changes.animateCls.currentValue);
    };
    /**
     * @param {?=} cls
     * @return {?}
     */
    NotifyComponent.prototype.getAnimateCls = /**
     * @param {?=} cls
     * @return {?}
     */
    function (cls) {
        var _a;
        cls = cls || 'bounceInRight';
        // this.outCls = 'bounceOut' + cls.substr(8);
        // switch (cls.substr(8)) {
        //     case 'Up':
        //         this.outCls = 'bounceOutDown';
        //         break;
        //     case 'Down':
        //         this.outCls = 'bounceOutUp';
        //         break;
        // }
        this.outCls = 'fadeOut';
        // outCls += tmp;
        this.inCls = (_a = {},
            _a[this.toast.type] = true,
            _a[this.toast.theme] = true,
            _a['animated'] = false,
            _a[cls] = true,
            _a[this.outCls] = this.state,
            _a);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NotifyComponent.prototype.closeToast = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        this.state = true;
    };
    /**
     * @return {?}
     */
    NotifyComponent.prototype.getPurType = /**
     * @return {?}
     */
    function () {
        if (this.toast && this.toast.type) {
            return 'f-icon-' + this.toast.type.replace('toasty-type-', '');
        }
        return 'f-icon-default';
    };
    NotifyComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-notify',
                    template: "\n        <div #notifyDiv class=\"toast\" [ngClass]=\"inCls\">\n            <button *ngIf=\"toast.showClose\" class=\"toast-close f-btn-icon f-bare\" (click)=\"closeToast($event)\">\n                <span class=\"f-icon modal_close\"></span>\n            </button>\n            <section class=\"modal-tips\"  *ngIf=\"toast.title || toast.msg\">\n                <div class=\"float-left modal-tips-iconwrap\">\n                    <span class=\"f-icon\" [ngClass]=\" getPurType()\"></span>\n                </div>\n                <div class=\"modal-tips-content\">\n                    <ng-container *ngIf=\"toast.title&&toast.msg\">\n                        <h5 class=\"toast-title modal-tips-title\" [innerHTML]=\"toast.title | safe: 'html'\"></h5>\n                        <p class=\"toast-msg\" [innerHtml]=\"toast.msg | safe:'html'\"></p>\n                    </ng-container>\n                    <ng-container *ngIf=\"!toast.title&&toast.msg\">\n                     <h5 class=\"toast-title modal-tips-title only-toast-msg\" [innerHtml]=\"toast.msg | safe:'html'\"></h5>\n                    </ng-container>\n                </div>\n            </section>\n        </div>\n    ",
                    styles: ["\n            @-webkit-keyframes farrisMoveUpIn {\n                0% {\n                    transform: translateY(-100%);\n                    transform-origin: 0 0;\n                    opacity: 0\n                }\n            \n                100% {\n                    transform: translateY(0);\n                    transform-origin: 0 0;\n                    opacity: 1\n                }\n            }\n            @keyframes farrisMoveUpIn {\n                0% {\n                    transform: translateY(-100%);\n                    transform-origin: 0 0;\n                    opacity: 0\n                }\n            \n                100% {\n                    transform: translateY(0);\n                    transform-origin: 0 0;\n                    opacity: 1\n                }\n            }\n            @-webkit-keyframes farrisMoveUpOut {\n                0% {\n                    transform: translateY(0);\n                    transform-origin: 0 0;\n                    opacity: 1\n                }\n            \n                100% {\n                    transform: translateY(-100%);\n                    transform-origin: 0 0;\n                    opacity: 0\n                }\n            }\n            @keyframes farrisMoveUpOut {\n                0% {\n                    transform: translateY(0);\n                    transform-origin: 0 0;\n                    opacity: 1\n                }\n            \n                100% {\n                    transform: translateY(-100%);\n                    transform-origin: 0 0;\n                    opacity: 0\n                }\n            }\n            .toast.fadeIn {\n                -webkit-animation: farrisMoveUpIn 0.2s linear;\n                animation: farrisMoveUpIn 0.2s linear;\n            }\n            .toast.fadeOut {\n                -webkit-animation: farrisMoveUpOut 0.2s linear;\n                animation: farrisMoveUpOut 0.2s linear;\n            }\n        "]
                }] }
    ];
    /** @nocollapse */
    NotifyComponent.ctorParameters = function () { return [
        { type: NgZone }
    ]; };
    NotifyComponent.propDecorators = {
        toast: [{ type: Input }],
        close: [{ type: Output }],
        notifyDiv: [{ type: ViewChild, args: ['notifyDiv',] }],
        animateCls: [{ type: Input }]
    };
    return NotifyComponent;
}());
export { NotifyComponent };
if (false) {
    /** @type {?} */
    NotifyComponent.prototype.toast;
    /** @type {?} */
    NotifyComponent.prototype.close;
    /** @type {?} */
    NotifyComponent.prototype.notifyDiv;
    /** @type {?} */
    NotifyComponent.prototype._state;
    /** @type {?} */
    NotifyComponent.prototype.animateCls;
    /** @type {?} */
    NotifyComponent.prototype.outCls;
    /** @type {?} */
    NotifyComponent.prototype.inCls;
    /**
     * @type {?}
     * @private
     */
    NotifyComponent.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,