import { __extends } from 'tslib';
import { isFunction } from 'lodash-es';
import { Subject } from 'rxjs';
import { CommonModule } from '@angular/common';
import { Injectable, Component, Input, Output, EventEmitter, ViewChild, NgZone, ViewChildren, ComponentFactoryResolver, Injector, ApplicationRef, NgModule } from '@angular/core';
import { FarrisCommonModule } from '@farris/ui-common';
import { LocaleService, LocaleModule } from '@farris/ui-locale';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NotifyOptions = /** @class */ (function () {
    function NotifyOptions() {
    }
    NotifyOptions.decorators = [
        { type: Injectable }
    ];
    return NotifyOptions;
}());
var NotifyData = /** @class */ (function (_super) {
    __extends(NotifyData, _super);
    function NotifyData() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NotifyData;
}(NotifyOptions));
var NotifyConfig = /** @class */ (function () {
    function NotifyConfig() {
        // Maximum number of toasties to show at once
        this.limit = 5;
        // Whether to show the 'X' icon to close the toast
        this.showClose = true;
        // The window position where the toast pops up
        this.position = 'top-center';
        // How long (in miliseconds) the toasty shows before it's removed. Set to null/0 to turn off.
        this.timeout = 3000;
        // What theme to use
        this.theme = 'bootstrap';
    }
    NotifyConfig.decorators = [
        { type: Injectable }
    ];
    return NotifyConfig;
}());
/** @enum {number} */
var NotifyEventType = {
    ADD: 0,
    CLEAR: 1,
    CLEAR_ALL: 2,
};
NotifyEventType[NotifyEventType.ADD] = 'ADD';
NotifyEventType[NotifyEventType.CLEAR] = 'CLEAR';
NotifyEventType[NotifyEventType.CLEAR_ALL] = 'CLEAR_ALL';
var NotifyEvent = /** @class */ (function () {
    function NotifyEvent(type, value) {
        this.type = type;
        this.value = value;
    }
    return NotifyEvent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NotifyComponent = /** @class */ (function () {
    function NotifyComponent(ngZone) {
        this.ngZone = ngZone;
        this.close = new EventEmitter();
        this._state = false;
        this.outCls = '';
        this.inCls = {};
    }
    Object.defineProperty(NotifyComponent.prototype, "state", {
        get: /**
         * @return {?}
         */
        function () {
            return this._state;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            this._state = value;
            if (value) {
                this.inCls[this.animateCls] = false;
                this.inCls['animated'] = value;
                this.inCls[this.outCls] = value;
                // this.ngZone.runOutsideAngular(() => {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.close.next(_this.toast);
                }), 200);
                // });
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NotifyComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NotifyComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.getAnimateCls(changes.animateCls.currentValue);
    };
    /**
     * @param {?=} cls
     * @return {?}
     */
    NotifyComponent.prototype.getAnimateCls = /**
     * @param {?=} cls
     * @return {?}
     */
    function (cls) {
        var _a;
        cls = cls || 'bounceInRight';
        // this.outCls = 'bounceOut' + cls.substr(8);
        // switch (cls.substr(8)) {
        //     case 'Up':
        //         this.outCls = 'bounceOutDown';
        //         break;
        //     case 'Down':
        //         this.outCls = 'bounceOutUp';
        //         break;
        // }
        this.outCls = 'fadeOut';
        // outCls += tmp;
        this.inCls = (_a = {},
            _a[this.toast.type] = true,
            _a[this.toast.theme] = true,
            _a['animated'] = false,
            _a[cls] = true,
            _a[this.outCls] = this.state,
            _a);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NotifyComponent.prototype.closeToast = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        this.state = true;
    };
    /**
     * @return {?}
     */
    NotifyComponent.prototype.getPurType = /**
     * @return {?}
     */
    function () {
        if (this.toast && this.toast.type) {
            return 'f-icon-' + this.toast.type.replace('toasty-type-', '');
        }
        return 'f-icon-default';
    };
    NotifyComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-notify',
                    template: "\n        <div #notifyDiv class=\"toast\" [ngClass]=\"inCls\">\n            <button *ngIf=\"toast.showClose\" class=\"toast-close f-btn-icon f-bare\" (click)=\"closeToast($event)\">\n                <span class=\"f-icon modal_close\"></span>\n            </button>\n            <section class=\"modal-tips\"  *ngIf=\"toast.title || toast.msg\">\n                <div class=\"float-left modal-tips-iconwrap\">\n                    <span class=\"f-icon\" [ngClass]=\" getPurType()\"></span>\n                </div>\n                <div class=\"modal-tips-content\">\n                    <ng-container *ngIf=\"toast.title&&toast.msg\">\n                        <h5 class=\"toast-title modal-tips-title\" [innerHTML]=\"toast.title | safe: 'html'\"></h5>\n                        <p class=\"toast-msg\" [innerHtml]=\"toast.msg | safe:'html'\"></p>\n                    </ng-container>\n                    <ng-container *ngIf=\"!toast.title&&toast.msg\">\n                     <h5 class=\"toast-title modal-tips-title only-toast-msg\" [innerHtml]=\"toast.msg | safe:'html'\"></h5>\n                    </ng-container>\n                </div>\n            </section>\n        </div>\n    ",
                    styles: ["\n            @-webkit-keyframes farrisMoveUpIn {\n                0% {\n                    transform: translateY(-100%);\n                    transform-origin: 0 0;\n                    opacity: 0\n                }\n            \n                100% {\n                    transform: translateY(0);\n                    transform-origin: 0 0;\n                    opacity: 1\n                }\n            }\n            @keyframes farrisMoveUpIn {\n                0% {\n                    transform: translateY(-100%);\n                    transform-origin: 0 0;\n                    opacity: 0\n                }\n            \n                100% {\n                    transform: translateY(0);\n                    transform-origin: 0 0;\n                    opacity: 1\n                }\n            }\n            @-webkit-keyframes farrisMoveUpOut {\n                0% {\n                    transform: translateY(0);\n                    transform-origin: 0 0;\n                    opacity: 1\n                }\n            \n                100% {\n                    transform: translateY(-100%);\n                    transform-origin: 0 0;\n                    opacity: 0\n                }\n            }\n            @keyframes farrisMoveUpOut {\n                0% {\n                    transform: translateY(0);\n                    transform-origin: 0 0;\n                    opacity: 1\n                }\n            \n                100% {\n                    transform: translateY(-100%);\n                    transform-origin: 0 0;\n                    opacity: 0\n                }\n            }\n            .toast.fadeIn {\n                -webkit-animation: farrisMoveUpIn 0.2s linear;\n                animation: farrisMoveUpIn 0.2s linear;\n            }\n            .toast.fadeOut {\n                -webkit-animation: farrisMoveUpOut 0.2s linear;\n                animation: farrisMoveUpOut 0.2s linear;\n            }\n        "]
                }] }
    ];
    /** @nocollapse */
    NotifyComponent.ctorParameters = function () { return [
        { type: NgZone }
    ]; };
    NotifyComponent.propDecorators = {
        toast: [{ type: Input }],
        close: [{ type: Output }],
        notifyDiv: [{ type: ViewChild, args: ['notifyDiv',] }],
        animateCls: [{ type: Input }]
    };
    return NotifyComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NotifyContainerComponent = /** @class */ (function () {
    function NotifyContainerComponent(ngZone) {
        this.ngZone = ngZone;
        this._position = '';
        this.style = {
            'left': '',
            'right': '',
            'top': '',
            'bottom': ''
        };
        this.notifyDistance = {
            'left': 12,
            'right': 12,
            'top': 136,
            'bottom': 12
        };
        this.animateCls = 'fadeIn';
        this.id = '';
        this.empty = new EventEmitter();
        this.toasts = [];
    }
    Object.defineProperty(NotifyContainerComponent.prototype, "position", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._position) {
                return this._position;
            }
            else {
                return 'toasty-position-top-center';
            }
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                /** @type {?} */
                var notFound = true;
                for (var i_1 = 0; i_1 < NotifyContainerComponent.POSITIONS.length; i_1++) {
                    if (NotifyContainerComponent.POSITIONS[i_1] === value) {
                        notFound = false;
                        break;
                    }
                }
                if (notFound) {
                    value = this.config.position;
                }
            }
            else {
                value = this.config.position;
            }
            // console.log(this.config);
            // if (value === 'center-center') {
            //     this.animateCls = 'bounceIn';
            // } else {
            /** @type {?} */
            var i = NotifyContainerComponent.POSITIONS.indexOf(value);
            //this.animateCls = NotifyContainerComponent.ANIMATES[i];
            this.animateCls = 'fadeIn';
            //}
            this._position = 'toasty-position-' + value;
            if (this.config.left) {
                this.notifyDistance.left = this.config.left;
            }
            if (this.config.right) {
                this.notifyDistance.right = this.config.right;
            }
            if (this.config.top) {
                this.notifyDistance.top = this.config.top;
            }
            if (this.config.bottom) {
                this.notifyDistance.bottom = this.config.bottom;
            }
            this.initstyle();
            if (value === 'top-left') {
                this.style.left = this.notifyDistance.left + "px";
                this.style.top = this.notifyDistance.top + "px";
            }
            else if (value === 'top-center') {
                this.style.top = this.notifyDistance.top + "px";
            }
            else if (value === 'top-right') {
                this.style.right = this.notifyDistance.right + "px";
                this.style.top = this.notifyDistance.top + "px";
            }
            else if (value === 'bottom-left') {
                this.style.left = this.notifyDistance.left + "px";
                this.style.bottom = this.notifyDistance.bottom + "px";
            }
            else if (value === 'bottom-center') {
                this.style.bottom = this.notifyDistance.bottom + "px";
            }
            else if (value === 'bottom-right') {
                this.style.right = this.notifyDistance.right + "px";
                this.style.bottom = this.notifyDistance.bottom + "px";
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NotifyContainerComponent.prototype.initstyle = /**
     * @return {?}
     */
    function () {
        this.style = {
            'left': '',
            'right': '',
            'top': '',
            'bottom': ''
        };
    };
    /**
     * @return {?}
     */
    NotifyContainerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    NotifyContainerComponent.prototype.ngAfterContentChecked = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.notifyCmpList && this.notifyCmpList.length) {
            this.notifyCmpList.forEach((/**
             * @param {?} cmp
             * @return {?}
             */
            function (cmp) {
                cmp.close.subscribe((/**
                 * @return {?}
                 */
                function () {
                    _this.clear(cmp.toast.id);
                }));
            }));
        }
    };
    /**
     * @param {?} toast
     * @return {?}
     */
    NotifyContainerComponent.prototype.closeToast = /**
     * @param {?} toast
     * @return {?}
     */
    function (toast) {
        this.clear(toast.id);
    };
    /**
     * @param {?} notify
     * @return {?}
     */
    NotifyContainerComponent.prototype.add = /**
     * @param {?} notify
     * @return {?}
     */
    function (notify) {
        if (this.toasts.length >= this.config.limit) {
            this.toasts.shift();
        }
        this.toasts.push(notify);
        if (notify.timeout) {
            this._setTimeout(notify);
        }
    };
    /**
     * @param {?} id
     * @return {?}
     */
    NotifyContainerComponent.prototype.clear = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        if (id) {
            this.toasts.forEach((/**
             * @param {?} value
             * @param {?} key
             * @return {?}
             */
            function (value, key) {
                if (value.id === id) {
                    if (value.onRemove && isFunction(value.onRemove)) {
                        value.onRemove.call(_this, value);
                    }
                    _this.toasts.splice(key, 1);
                }
            }));
            if (this.toasts.length === 0) {
                this.empty.emit();
            }
        }
        else {
            throw new Error('Please provide id of Toast to close');
        }
    };
    /**
     * @return {?}
     */
    NotifyContainerComponent.prototype.clearAll = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.toasts.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        function (value, key) {
            if (value.onRemove && isFunction(value.onRemove)) {
                value.onRemove.call(_this, value);
            }
        }));
        this.toasts = [];
        this.empty.emit();
    };
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    NotifyContainerComponent.prototype.findNotifyComponent = /**
     * @private
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.notifyCmpList.find((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.toast.id === id; }));
    };
    /**
     * @private
     * @param {?} notify
     * @return {?}
     */
    NotifyContainerComponent.prototype._setTimeout = /**
     * @private
     * @param {?} notify
     * @return {?}
     */
    function (notify) {
        var _this = this;
        // this.ngZone.runOutsideAngular(() => {
        window.setTimeout((/**
         * @return {?}
         */
        function () {
            // this.clear(notify.id);
            /** @type {?} */
            var cmp = _this.findNotifyComponent(notify.id);
            if (cmp) {
                cmp.state = true;
                cmp.inCls[cmp.animateCls] = false;
            }
        }), notify.timeout);
        // });
    };
    NotifyContainerComponent.POSITIONS = ['bottom-right', 'bottom-left',
        'top-right', 'top-left', 'top-center', 'bottom-center', 'center-center'];
    NotifyContainerComponent.ANIMATES = ['bounceInRight', 'bounceInLeft',
        'bounceInRight', 'bounceInLeft', 'bounceInDown', 'bounceInUp', 'bounceIn'];
    NotifyContainerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-notify-container',
                    template: "\n    <div [id]=\"id\" class=\"farris-notify\" [ngClass]=\"[position]\" [ngStyle]=\"style\">\n        <farris-notify *ngFor=\"let toast of toasts\" [toast]=\"toast\" [animateCls]=\"animateCls\" (close)=\"closeToast(toast)\"></farris-notify>\n    </div>\n    "
                }] }
    ];
    /** @nocollapse */
    NotifyContainerComponent.ctorParameters = function () { return [
        { type: NgZone }
    ]; };
    NotifyContainerComponent.propDecorators = {
        notifyCmpList: [{ type: ViewChildren, args: [NotifyComponent,] }],
        empty: [{ type: Output }],
        position: [{ type: Input }]
    };
    return NotifyContainerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Check and return true if an object is type of string
 * @param {?} obj Analyse has to object the string type
 * @return {?} result of analysis
 */
function isString(obj) {
    return typeof obj === 'string';
}
/**
 * Check and return true if an object is type of number
 * @param {?} obj Analyse has to object the boolean type
 * @return {?} result of analysis
 */
function isNumber(obj) {
    return typeof obj === 'number';
}
/**
 * Check and return true if an object is type of Function
 * @param {?} obj Analyse has to object the function type
 * @return {?} result of analysis
 */
function isFunction$1(obj) {
    return typeof obj === 'function';
}
var NotifyService = /** @class */ (function () {
    function NotifyService(cfr, injector, appRef) {
        this.cfr = cfr;
        this.injector = injector;
        this.appRef = appRef;
        // Init the counter
        this.uniqueCounter = 0;
        this.eventSource = new Subject();
        this.events = this.eventSource.asObservable();
        this.config = new NotifyConfig();
        this.localeService = this.injector.get(LocaleService);
    }
    /**
     * @param {?} options
     * @return {?}
     */
    NotifyService.prototype.default = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this.show(options, 'default');
    };
    /**
     * @param {?} options
     * @return {?}
     */
    NotifyService.prototype.info = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this.show(options, 'info');
    };
    /**
     * @param {?} options
     * @return {?}
     */
    NotifyService.prototype.success = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this.show(options, 'success');
    };
    /**
     * @param {?} options
     * @return {?}
     */
    NotifyService.prototype.warning = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this.show(options, 'warning');
    };
    /**
     * @param {?} options
     * @return {?}
     */
    NotifyService.prototype.error = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this.show(options, 'danger');
    };
    /**
     * @return {?}
     */
    NotifyService.prototype.clearAll = /**
     * @return {?}
     */
    function () {
        // this.eventSource.next(new NotifyEvent(NotifyEventType.CLEAR_ALL));
        this.notifyContainer.instance.clearAll();
    };
    /**
     * @param {?} id
     * @return {?}
     */
    NotifyService.prototype.clear = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        // this.eventSource.next(new NotifyEvent(NotifyEventType.CLEAR, id));
        this.notifyContainer.instance.clear(id);
    };
    /**
     * @private
     * @return {?}
     */
    NotifyService.prototype.createContainer = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.notifyContainer) {
            /** @type {?} */
            var containerFac = this.cfr.resolveComponentFactory(NotifyContainerComponent);
            /** @type {?} */
            var cmpRef = containerFac.create(this.injector);
            // cmpRef.instance.id = 'Farris-Notify-Container';
            this.appRef.attachView(cmpRef.hostView);
            document.querySelector('body').appendChild(cmpRef.location.nativeElement);
            this.notifyContainer = cmpRef;
        }
    };
    /**
     * @private
     * @param {?} options
     * @param {?} type
     * @return {?}
     */
    NotifyService.prototype.show = /**
     * @private
     * @param {?} options
     * @param {?} type
     * @return {?}
     */
    function (options, type) {
        var _this = this;
        this.createContainer();
        /** @type {?} */
        var notifyOptions;
        if (isString(options) && options !== '' || isNumber(options)) {
            notifyOptions = (/** @type {?} */ ({
                //20191129 去除默认标题
                //title: this.localeService.getValue('notify.title'),
                msg: options.toString()
            }));
        }
        else {
            notifyOptions = (/** @type {?} */ (options));
        }
        if (!notifyOptions || !notifyOptions.title && !notifyOptions.msg) {
            throw new Error('Farris-Notify: No notify title or message specified!');
        }
        type = type || 'default';
        this.uniqueCounter++;
        /** @type {?} */
        var showClose = this._checkConfigItem(this.config, notifyOptions, 'showClose');
        /** @type {?} */
        var theme;
        if (notifyOptions.theme) {
            theme = NotifyService.THEMES.indexOf(notifyOptions.theme) > -1 ? notifyOptions.theme : this.config.theme;
        }
        else {
            theme = this.config.theme;
        }
        //判断success类型 展示时间为1.5s
        if (type === 'success') {
            if (!notifyOptions.hasOwnProperty('timeout')) {
                notifyOptions.timeout = 1500;
            }
        }
        /** @type {?} */
        var newNotifyOpts = {
            id: this.uniqueCounter,
            title: notifyOptions.title,
            msg: notifyOptions.msg,
            showClose: showClose,
            type: 'toasty-type-' + type,
            theme: 'toasty-theme-' + theme,
            onAdd: notifyOptions.onAdd && isFunction$1(notifyOptions.onAdd) ? notifyOptions.onAdd : null,
            onRemove: notifyOptions.onRemove && isFunction$1(notifyOptions.onRemove) ? notifyOptions.onRemove : null
        };
        newNotifyOpts.timeout = notifyOptions.hasOwnProperty('timeout') ? notifyOptions.timeout : this.config.timeout;
        // this.eventSource.next(new NotifyEvent(NotifyEventType.ADD, newNotifyOpts));
        this.notifyContainer.instance.config = this.config;
        this.notifyContainer.instance.position = this.config.position;
        this.notifyContainer.instance.add(newNotifyOpts);
        ((/** @type {?} */ (this.notifyContainer.instance))).empty.subscribe((/**
         * @return {?}
         */
        function () {
            _this.clearDom();
        }));
        this.notifyContainer.changeDetectorRef.markForCheck();
        this.notifyContainer.changeDetectorRef.detectChanges();
        if (notifyOptions.onAdd && isFunction$1(notifyOptions.onAdd)) {
            notifyOptions.onAdd.call(this, newNotifyOpts);
        }
    };
    /**
     * @private
     * @param {?} config
     * @param {?} options
     * @param {?} property
     * @return {?}
     */
    NotifyService.prototype._checkConfigItem = /**
     * @private
     * @param {?} config
     * @param {?} options
     * @param {?} property
     * @return {?}
     */
    function (config, options, property) {
        if (options[property] === false) {
            return false;
        }
        else if (!options[property]) {
            return config[property];
        }
        else {
            return true;
        }
    };
    /**
     * @private
     * @return {?}
     */
    NotifyService.prototype.clearDom = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.notifyContainer) {
            /** @type {?} */
            var el = this.notifyContainer.location.nativeElement;
            if (el.parentNode) {
                el.parentNode.removeChild(el);
            }
            this.notifyContainer.destroy();
            this.notifyContainer = undefined;
        }
    };
    NotifyService.THEMES = ['default', 'material', 'bootstrap'];
    NotifyService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NotifyService.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: ApplicationRef }
    ]; };
    return NotifyService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NotifyModule = /** @class */ (function () {
    function NotifyModule() {
    }
    /**
     * @return {?}
     */
    NotifyModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: NotifyModule,
            providers: [NotifyService]
        };
    };
    NotifyModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        FarrisCommonModule,
                        LocaleModule
                    ],
                    declarations: [NotifyComponent, NotifyContainerComponent],
                    providers: [
                        NotifyService
                    ],
                    exports: [
                        NotifyComponent,
                        NotifyContainerComponent
                    ],
                    entryComponents: [NotifyContainerComponent]
                },] }
    ];
    return NotifyModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NotifyConfig, NotifyData, NotifyEvent, NotifyEventType, NotifyOptions, NotifyContainerComponent, NotifyComponent, isString, isNumber, isFunction$1 as isFunction, NotifyService, NotifyModule };

//# sourceMappingURL=farris-ui-notify.js.map