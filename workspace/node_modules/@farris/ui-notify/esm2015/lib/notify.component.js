/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ViewChild, ElementRef, NgZone } from '@angular/core';
import { NotifyData } from './notifiy.options';
export class NotifyComponent {
    /**
     * @param {?} ngZone
     */
    constructor(ngZone) {
        this.ngZone = ngZone;
        this.close = new EventEmitter();
        this._state = false;
        this.outCls = '';
        this.inCls = {};
    }
    /**
     * @return {?}
     */
    get state() {
        return this._state;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set state(value) {
        this._state = value;
        if (value) {
            this.inCls[this.animateCls] = false;
            this.inCls['animated'] = value;
            this.inCls[this.outCls] = value;
            // this.ngZone.runOutsideAngular(() => {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.close.next(this.toast);
            }), 200);
            // });
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.getAnimateCls(changes.animateCls.currentValue);
    }
    /**
     * @param {?=} cls
     * @return {?}
     */
    getAnimateCls(cls) {
        cls = cls || 'bounceInRight';
        // this.outCls = 'bounceOut' + cls.substr(8);
        // switch (cls.substr(8)) {
        //     case 'Up':
        //         this.outCls = 'bounceOutDown';
        //         break;
        //     case 'Down':
        //         this.outCls = 'bounceOutUp';
        //         break;
        // }
        this.outCls = 'fadeOut';
        // outCls += tmp;
        this.inCls = {
            [this.toast.type]: true,
            [this.toast.theme]: true,
            'animated': false,
            [cls]: true,
            [this.outCls]: this.state
        };
    }
    /**
     * @param {?} event
     * @return {?}
     */
    closeToast(event) {
        event.preventDefault();
        this.state = true;
    }
    /**
     * @return {?}
     */
    getPurType() {
        if (this.toast && this.toast.type) {
            return 'f-icon-' + this.toast.type.replace('toasty-type-', '');
        }
        return 'f-icon-default';
    }
}
NotifyComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-notify',
                template: `
        <div #notifyDiv class="toast" [ngClass]="inCls">
            <button *ngIf="toast.showClose" class="toast-close f-btn-icon f-bare" (click)="closeToast($event)">
                <span class="f-icon modal_close"></span>
            </button>
            <section class="modal-tips"  *ngIf="toast.title || toast.msg">
                <div class="float-left modal-tips-iconwrap">
                    <span class="f-icon" [ngClass]=" getPurType()"></span>
                </div>
                <div class="modal-tips-content">
                    <ng-container *ngIf="toast.title&&toast.msg">
                        <h5 class="toast-title modal-tips-title" [innerHTML]="toast.title | safe: 'html'"></h5>
                        <p class="toast-msg" [innerHtml]="toast.msg | safe:'html'"></p>
                    </ng-container>
                    <ng-container *ngIf="!toast.title&&toast.msg">
                     <h5 class="toast-title modal-tips-title only-toast-msg" [innerHtml]="toast.msg | safe:'html'"></h5>
                    </ng-container>
                </div>
            </section>
        </div>
    `,
                styles: [`
            @-webkit-keyframes farrisMoveUpIn {
                0% {
                    transform: translateY(-100%);
                    transform-origin: 0 0;
                    opacity: 0
                }
            
                100% {
                    transform: translateY(0);
                    transform-origin: 0 0;
                    opacity: 1
                }
            }
            @keyframes farrisMoveUpIn {
                0% {
                    transform: translateY(-100%);
                    transform-origin: 0 0;
                    opacity: 0
                }
            
                100% {
                    transform: translateY(0);
                    transform-origin: 0 0;
                    opacity: 1
                }
            }
            @-webkit-keyframes farrisMoveUpOut {
                0% {
                    transform: translateY(0);
                    transform-origin: 0 0;
                    opacity: 1
                }
            
                100% {
                    transform: translateY(-100%);
                    transform-origin: 0 0;
                    opacity: 0
                }
            }
            @keyframes farrisMoveUpOut {
                0% {
                    transform: translateY(0);
                    transform-origin: 0 0;
                    opacity: 1
                }
            
                100% {
                    transform: translateY(-100%);
                    transform-origin: 0 0;
                    opacity: 0
                }
            }
            .toast.fadeIn {
                -webkit-animation: farrisMoveUpIn 0.2s linear;
                animation: farrisMoveUpIn 0.2s linear;
            }
            .toast.fadeOut {
                -webkit-animation: farrisMoveUpOut 0.2s linear;
                animation: farrisMoveUpOut 0.2s linear;
            }
        `]
            }] }
];
/** @nocollapse */
NotifyComponent.ctorParameters = () => [
    { type: NgZone }
];
NotifyComponent.propDecorators = {
    toast: [{ type: Input }],
    close: [{ type: Output }],
    notifyDiv: [{ type: ViewChild, args: ['notifyDiv',] }],
    animateCls: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NotifyComponent.prototype.toast;
    /** @type {?} */
    NotifyComponent.prototype.close;
    /** @type {?} */
    NotifyComponent.prototype.notifyDiv;
    /** @type {?} */
    NotifyComponent.prototype._state;
    /** @type {?} */
    NotifyComponent.prototype.animateCls;
    /** @type {?} */
    NotifyComponent.prototype.outCls;
    /** @type {?} */
    NotifyComponent.prototype.inCls;
    /**
     * @type {?}
     * @private
     */
    NotifyComponent.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,