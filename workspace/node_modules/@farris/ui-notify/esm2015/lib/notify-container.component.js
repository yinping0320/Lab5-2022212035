/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChildren, QueryList, Output, EventEmitter, NgZone } from '@angular/core';
import { isFunction } from 'lodash-es';
import { NotifyComponent } from './notify.component';
export class NotifyContainerComponent {
    /**
     * @param {?} ngZone
     */
    constructor(ngZone) {
        this.ngZone = ngZone;
        this._position = '';
        this.style = {
            'left': '',
            'right': '',
            'top': '',
            'bottom': ''
        };
        this.notifyDistance = {
            'left': 12,
            'right': 12,
            'top': 136,
            'bottom': 12
        };
        this.animateCls = 'fadeIn';
        this.id = '';
        this.empty = new EventEmitter();
        this.toasts = [];
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set position(value) {
        if (value) {
            /** @type {?} */
            let notFound = true;
            for (let i = 0; i < NotifyContainerComponent.POSITIONS.length; i++) {
                if (NotifyContainerComponent.POSITIONS[i] === value) {
                    notFound = false;
                    break;
                }
            }
            if (notFound) {
                value = this.config.position;
            }
        }
        else {
            value = this.config.position;
        }
        // console.log(this.config);
        // if (value === 'center-center') {
        //     this.animateCls = 'bounceIn';
        // } else {
        /** @type {?} */
        const i = NotifyContainerComponent.POSITIONS.indexOf(value);
        //this.animateCls = NotifyContainerComponent.ANIMATES[i];
        this.animateCls = 'fadeIn';
        //}
        this._position = 'toasty-position-' + value;
        if (this.config.left) {
            this.notifyDistance.left = this.config.left;
        }
        if (this.config.right) {
            this.notifyDistance.right = this.config.right;
        }
        if (this.config.top) {
            this.notifyDistance.top = this.config.top;
        }
        if (this.config.bottom) {
            this.notifyDistance.bottom = this.config.bottom;
        }
        this.initstyle();
        if (value === 'top-left') {
            this.style.left = `${this.notifyDistance.left}px`;
            this.style.top = `${this.notifyDistance.top}px`;
        }
        else if (value === 'top-center') {
            this.style.top = `${this.notifyDistance.top}px`;
        }
        else if (value === 'top-right') {
            this.style.right = `${this.notifyDistance.right}px`;
            this.style.top = `${this.notifyDistance.top}px`;
        }
        else if (value === 'bottom-left') {
            this.style.left = `${this.notifyDistance.left}px`;
            this.style.bottom = `${this.notifyDistance.bottom}px`;
        }
        else if (value === 'bottom-center') {
            this.style.bottom = `${this.notifyDistance.bottom}px`;
        }
        else if (value === 'bottom-right') {
            this.style.right = `${this.notifyDistance.right}px`;
            this.style.bottom = `${this.notifyDistance.bottom}px`;
        }
    }
    /**
     * @return {?}
     */
    get position() {
        if (this._position) {
            return this._position;
        }
        else {
            return 'toasty-position-top-center';
        }
    }
    /**
     * @return {?}
     */
    initstyle() {
        this.style = {
            'left': '',
            'right': '',
            'top': '',
            'bottom': ''
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        if (this.notifyCmpList && this.notifyCmpList.length) {
            this.notifyCmpList.forEach((/**
             * @param {?} cmp
             * @return {?}
             */
            cmp => {
                cmp.close.subscribe((/**
                 * @return {?}
                 */
                () => {
                    this.clear(cmp.toast.id);
                }));
            }));
        }
    }
    /**
     * @param {?} toast
     * @return {?}
     */
    closeToast(toast) {
        this.clear(toast.id);
    }
    /**
     * @param {?} notify
     * @return {?}
     */
    add(notify) {
        if (this.toasts.length >= this.config.limit) {
            this.toasts.shift();
        }
        this.toasts.push(notify);
        if (notify.timeout) {
            this._setTimeout(notify);
        }
    }
    /**
     * @param {?} id
     * @return {?}
     */
    clear(id) {
        if (id) {
            this.toasts.forEach((/**
             * @param {?} value
             * @param {?} key
             * @return {?}
             */
            (value, key) => {
                if (value.id === id) {
                    if (value.onRemove && isFunction(value.onRemove)) {
                        value.onRemove.call(this, value);
                    }
                    this.toasts.splice(key, 1);
                }
            }));
            if (this.toasts.length === 0) {
                this.empty.emit();
            }
        }
        else {
            throw new Error('Please provide id of Toast to close');
        }
    }
    /**
     * @return {?}
     */
    clearAll() {
        this.toasts.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        (value, key) => {
            if (value.onRemove && isFunction(value.onRemove)) {
                value.onRemove.call(this, value);
            }
        }));
        this.toasts = [];
        this.empty.emit();
    }
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    findNotifyComponent(id) {
        return this.notifyCmpList.find((/**
         * @param {?} item
         * @return {?}
         */
        item => item.toast.id === id));
    }
    /**
     * @private
     * @param {?} notify
     * @return {?}
     */
    _setTimeout(notify) {
        // this.ngZone.runOutsideAngular(() => {
        window.setTimeout((/**
         * @return {?}
         */
        () => {
            // this.clear(notify.id);
            /** @type {?} */
            const cmp = this.findNotifyComponent(notify.id);
            if (cmp) {
                cmp.state = true;
                cmp.inCls[cmp.animateCls] = false;
            }
        }), notify.timeout);
        // });
    }
}
NotifyContainerComponent.POSITIONS = ['bottom-right', 'bottom-left',
    'top-right', 'top-left', 'top-center', 'bottom-center', 'center-center'];
NotifyContainerComponent.ANIMATES = ['bounceInRight', 'bounceInLeft',
    'bounceInRight', 'bounceInLeft', 'bounceInDown', 'bounceInUp', 'bounceIn'];
NotifyContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-notify-container',
                template: `
    <div [id]="id" class="farris-notify" [ngClass]="[position]" [ngStyle]="style">
        <farris-notify *ngFor="let toast of toasts" [toast]="toast" [animateCls]="animateCls" (close)="closeToast(toast)"></farris-notify>
    </div>
    `
            }] }
];
/** @nocollapse */
NotifyContainerComponent.ctorParameters = () => [
    { type: NgZone }
];
NotifyContainerComponent.propDecorators = {
    notifyCmpList: [{ type: ViewChildren, args: [NotifyComponent,] }],
    empty: [{ type: Output }],
    position: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NotifyContainerComponent.POSITIONS;
    /** @type {?} */
    NotifyContainerComponent.ANIMATES;
    /**
     * @type {?}
     * @private
     */
    NotifyContainerComponent.prototype._position;
    /** @type {?} */
    NotifyContainerComponent.prototype.style;
    /** @type {?} */
    NotifyContainerComponent.prototype.notifyDistance;
    /** @type {?} */
    NotifyContainerComponent.prototype.animateCls;
    /** @type {?} */
    NotifyContainerComponent.prototype.config;
    /** @type {?} */
    NotifyContainerComponent.prototype.id;
    /** @type {?} */
    NotifyContainerComponent.prototype.notifyCmpList;
    /** @type {?} */
    NotifyContainerComponent.prototype.empty;
    /** @type {?} */
    NotifyContainerComponent.prototype.toasts;
    /**
     * @type {?}
     * @private
     */
    NotifyContainerComponent.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,