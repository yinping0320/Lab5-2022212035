/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, ComponentFactoryResolver, Injector, ApplicationRef } from '@angular/core';
import { Subject } from 'rxjs';
import { NotifyConfig } from './notifiy.options';
import { NotifyContainerComponent } from './notify-container.component';
import { LocaleService } from '@farris/ui-locale';
/**
 * Check and return true if an object is type of string
 * @param {?} obj Analyse has to object the string type
 * @return {?} result of analysis
 */
export function isString(obj) {
    return typeof obj === 'string';
}
/**
 * Check and return true if an object is type of number
 * @param {?} obj Analyse has to object the boolean type
 * @return {?} result of analysis
 */
export function isNumber(obj) {
    return typeof obj === 'number';
}
/**
 * Check and return true if an object is type of Function
 * @param {?} obj Analyse has to object the function type
 * @return {?} result of analysis
 */
export function isFunction(obj) {
    return typeof obj === 'function';
}
export class NotifyService {
    /**
     * @param {?} cfr
     * @param {?} injector
     * @param {?} appRef
     */
    constructor(cfr, injector, appRef) {
        this.cfr = cfr;
        this.injector = injector;
        this.appRef = appRef;
        // Init the counter
        this.uniqueCounter = 0;
        this.eventSource = new Subject();
        this.events = this.eventSource.asObservable();
        this.config = new NotifyConfig();
        this.localeService = this.injector.get(LocaleService);
    }
    /**
     * @param {?} options
     * @return {?}
     */
    default(options) {
        this.show(options, 'default');
    }
    /**
     * @param {?} options
     * @return {?}
     */
    info(options) {
        this.show(options, 'info');
    }
    /**
     * @param {?} options
     * @return {?}
     */
    success(options) {
        this.show(options, 'success');
    }
    /**
     * @param {?} options
     * @return {?}
     */
    warning(options) {
        this.show(options, 'warning');
    }
    /**
     * @param {?} options
     * @return {?}
     */
    error(options) {
        this.show(options, 'danger');
    }
    /**
     * @return {?}
     */
    clearAll() {
        // this.eventSource.next(new NotifyEvent(NotifyEventType.CLEAR_ALL));
        this.notifyContainer.instance.clearAll();
    }
    /**
     * @param {?} id
     * @return {?}
     */
    clear(id) {
        // this.eventSource.next(new NotifyEvent(NotifyEventType.CLEAR, id));
        this.notifyContainer.instance.clear(id);
    }
    /**
     * @private
     * @return {?}
     */
    createContainer() {
        if (!this.notifyContainer) {
            /** @type {?} */
            const containerFac = this.cfr.resolveComponentFactory(NotifyContainerComponent);
            /** @type {?} */
            const cmpRef = containerFac.create(this.injector);
            // cmpRef.instance.id = 'Farris-Notify-Container';
            this.appRef.attachView(cmpRef.hostView);
            document.querySelector('body').appendChild(cmpRef.location.nativeElement);
            this.notifyContainer = cmpRef;
        }
    }
    /**
     * @private
     * @param {?} options
     * @param {?} type
     * @return {?}
     */
    show(options, type) {
        this.createContainer();
        /** @type {?} */
        let notifyOptions;
        if (isString(options) && options !== '' || isNumber(options)) {
            notifyOptions = (/** @type {?} */ ({
                //20191129 去除默认标题
                //title: this.localeService.getValue('notify.title'),
                msg: options.toString()
            }));
        }
        else {
            notifyOptions = (/** @type {?} */ (options));
        }
        if (!notifyOptions || !notifyOptions.title && !notifyOptions.msg) {
            throw new Error('Farris-Notify: No notify title or message specified!');
        }
        type = type || 'default';
        this.uniqueCounter++;
        /** @type {?} */
        const showClose = this._checkConfigItem(this.config, notifyOptions, 'showClose');
        /** @type {?} */
        let theme;
        if (notifyOptions.theme) {
            theme = NotifyService.THEMES.indexOf(notifyOptions.theme) > -1 ? notifyOptions.theme : this.config.theme;
        }
        else {
            theme = this.config.theme;
        }
        //判断success类型 展示时间为1.5s
        if (type === 'success') {
            if (!notifyOptions.hasOwnProperty('timeout')) {
                notifyOptions.timeout = 1500;
            }
        }
        /** @type {?} */
        const newNotifyOpts = {
            id: this.uniqueCounter,
            title: notifyOptions.title,
            msg: notifyOptions.msg,
            showClose,
            type: 'toasty-type-' + type,
            theme: 'toasty-theme-' + theme,
            onAdd: notifyOptions.onAdd && isFunction(notifyOptions.onAdd) ? notifyOptions.onAdd : null,
            onRemove: notifyOptions.onRemove && isFunction(notifyOptions.onRemove) ? notifyOptions.onRemove : null
        };
        newNotifyOpts.timeout = notifyOptions.hasOwnProperty('timeout') ? notifyOptions.timeout : this.config.timeout;
        // this.eventSource.next(new NotifyEvent(NotifyEventType.ADD, newNotifyOpts));
        this.notifyContainer.instance.config = this.config;
        this.notifyContainer.instance.position = this.config.position;
        this.notifyContainer.instance.add(newNotifyOpts);
        ((/** @type {?} */ (this.notifyContainer.instance))).empty.subscribe((/**
         * @return {?}
         */
        () => {
            this.clearDom();
        }));
        this.notifyContainer.changeDetectorRef.markForCheck();
        this.notifyContainer.changeDetectorRef.detectChanges();
        if (notifyOptions.onAdd && isFunction(notifyOptions.onAdd)) {
            notifyOptions.onAdd.call(this, newNotifyOpts);
        }
    }
    /**
     * @private
     * @param {?} config
     * @param {?} options
     * @param {?} property
     * @return {?}
     */
    _checkConfigItem(config, options, property) {
        if (options[property] === false) {
            return false;
        }
        else if (!options[property]) {
            return config[property];
        }
        else {
            return true;
        }
    }
    /**
     * @private
     * @return {?}
     */
    clearDom() {
        if (this.notifyContainer) {
            /** @type {?} */
            const el = this.notifyContainer.location.nativeElement;
            if (el.parentNode) {
                el.parentNode.removeChild(el);
            }
            this.notifyContainer.destroy();
            this.notifyContainer = undefined;
        }
    }
}
NotifyService.THEMES = ['default', 'material', 'bootstrap'];
NotifyService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NotifyService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: ApplicationRef }
];
if (false) {
    /** @type {?} */
    NotifyService.THEMES;
    /** @type {?} */
    NotifyService.prototype.uniqueCounter;
    /**
     * @type {?}
     * @private
     */
    NotifyService.prototype.eventSource;
    /** @type {?} */
    NotifyService.prototype.events;
    /** @type {?} */
    NotifyService.prototype.notifyContainer;
    /** @type {?} */
    NotifyService.prototype.config;
    /** @type {?} */
    NotifyService.prototype.localeService;
    /**
     * @type {?}
     * @private
     */
    NotifyService.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    NotifyService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    NotifyService.prototype.appRef;
}
//# sourceMappingURL=data:application/json;base64,