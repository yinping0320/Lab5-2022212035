import { Observable } from 'rxjs';
import { Entity } from '@farris/mobile-devkit';
import { BefRepository } from './bef_repository';
/**
 * Bef数据访问服务
 */
declare class BefDataService<T extends Entity> {
    /**
     * 实体仓库
     */
    private repository;
    /**
     * Api代理类
     */
    private readonly apiProxy;
    /**
     * 构造函数
     */
    constructor(repository: BefRepository<T>);
    /**
     * 获取实体集合
     */
    getList(filter: any[], sort: any[], pageSize: number | null, pageIndex: number | null): Observable<T[]>;
    /**
     * 根据当前页判断是否追加
     */
    determineIsAppend(pageIndex: number): boolean;
    /**
     * 获取单个实体
     */
    getById(id: string): Observable<T>;
    /**
     * 更新并对实体加锁
     */
    editById(id: string): Observable<T>;
    /**
     * 根据id更新实体
     * @param id 实体id
     */
    updateById(id: string): Observable<T>;
    /**
     * 重新加载实体数据
     */
    private reloadEntityData;
    /**
     * 创建新实体，并加载
     */
    create(defaultValue?: any): Observable<T>;
    /**
     * 追加实体
     */
    append(defaultValue?: any): Observable<T>;
    /**
     * 创建子实体，并追加
     * @param fpath 父路径，格式形如：/1/edus（从表）或/1/edus/2/grades（从从表）
     */
    appendByPath(fpath: string): Observable<Entity>;
    /**
     * 根据id删除实体
     * @param id 内码
     */
    removeById(id: string, ifSave?: boolean): Observable<boolean>;
    /**
     * 删除并保存
     * @param id 要删除的实体id
     */
    removeAndSaveById(id: string): Observable<boolean>;
    /**
     * 批量删除
     * @param id 内码
     */
    removeByIds(ids: string[]): Observable<boolean>;
    /**
     * 检测实体的主键值是否存在于数组中，如果存在返回true
     * @param array 待遍历数组
     */
    private checkEntityValueExists;
    /**
     * 删除子级
     * @param path 路径
     * @param id   内码
     */
    removeByPath(fpath: string, id: string): Observable<boolean>;
    /**
     * 将id对应的实体的变更提交的服务器端
     */
    updateChangesById(id: string): Observable<boolean>;
    /**
     * 提交所有变更
     */
    updateAllChanges(): Observable<boolean>;
    /**
     * 应用变更
     */
    applyChanges(): Observable<boolean>;
    /**
     * 应用idArray对应数据的变更
     */
    applyChangesByIdArray(ids: string[]): Observable<boolean>;
    /**
     * 应用id对应数据的变更
     */
    applyChangesById(id: string): Observable<boolean>;
    /**
     * 取消变更
     */
    cancelChanges(): Observable<boolean>;
    /**
     * 构造EntityFilter
     */
    private buildEntityFilter;
}
export { BefDataService };
