import { Observable } from 'rxjs';
import { Type, Entity, AppContext, Repository, Injector } from '@farris/mobile-devkit';
import { BefEntityManager } from './bef_entity_manager';
import { BefVariableManager } from './bef_variable_manager';
import { BefProxy } from './bef_proxy';
import { BefSessionService } from './session/index';
import { BefDataService } from './bef_data_service';
/**
 * Bef实体仓库实现类
 */
declare abstract class BefRepository<T extends Entity> extends Repository<T> {
    protected injector: Injector;
    /**
     * 名称
     */
    abstract name: string;
    /**
     * Bef代理
     */
    abstract apiProxyType: Type<BefProxy>;
    /**
     * 应用上下文
     */
    appContext: AppContext;
    /**
     * 实体管理器
     */
    entityManager: BefEntityManager<T>;
    /**
     * 变量管理器
     */
    variableManager: BefVariableManager;
    /**
     * API代理
     */
    apiProxy: BefProxy;
    /**
     * Bef会话管理
     */
    sessionService: BefSessionService;
    /**
     * Bef数据操作
     */
    dataService: BefDataService<T>;
    /**
     * 构造函数
     */
    constructor(injector: Injector);
    /**
     * 初始化
     * @summary
     * 实现类的构造函数中调用才能正确获取apiProxy
     */
    protected init(): void;
    /**
     * 获取注入器
     */
    getInjector(): Injector;
    /**
     * 获取实体数组
     */
    getEntities(filter: any[], sort: any[], pageSize: number | null, pageIndex: number | null): Observable<T[]>;
    /**
     * 获取主键为id的实体
     * @param id 实体id
     */
    getEntityById(id: string): Observable<T>;
    /**
     * 更新实体数据
     */
    updateEntityById(id: string): Observable<T>;
    /**
     * 更新实体数据并加锁
     */
    editEntityById(id: string): Observable<T>;
    /**
     * 创建实体
     */
    createEntity(defaultValue?: any): Observable<T>;
    /**
     * 追加实体
     */
    appendEntity(defaultValue?: any): Observable<T>;
    /**
     * 创建子实体，并追加
     * @param fpath 父路径，格式形如：/1/edus（从表）或/1/edus/2/grades（从从表）
     */
    appendEntityByPath(fpath: string): Observable<Entity>;
    /**
     * 根据id删除实体
     */
    removeEntityById(id: string, ifSave?: boolean): Observable<boolean>;
    /**
     * 根据ids批量删除实体
     */
    removeEntitiesByIds(ids: string[]): Observable<boolean>;
    /**
     * 根据id删除实体并执行保存
     */
    removeEntityAndSaveById(id: string): Observable<boolean>;
    /**
     * 删除子级
     */
    removeEntityByPath(fpath: string, id: string): Observable<boolean>;
    /**
     * 保存主键为id的实体
     */
    saveEntityById(id: string): Observable<boolean>;
    /**
     * 批量保存
     */
    saveEntities(): Observable<boolean>;
    /**
     * 取消实体变更
     */
    cancelEntityChanges(): Observable<boolean>;
    /**
     * 清空Repositoy内的数据和变量
     */
    reset(): void;
}
export { BefRepository };
