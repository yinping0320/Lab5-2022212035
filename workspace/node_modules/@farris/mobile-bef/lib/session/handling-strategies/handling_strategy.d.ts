import { Observable, Subject } from 'rxjs';
import { HttpHeaders, HttpClient } from '@farris/mobile-devkit';
import { FrameworkSessionService } from '../../framework_session_service';
import { BeSessionStorageStrategy } from '../storage-strategies/index';
/**
 * BefSession处理策略类
 */
declare abstract class BefSessionHandlingStrategy {
    /**
     * 存储策略
     */
    protected storageStrategy: BeSessionStorageStrategy;
    /**
     * 框架Session服务
     */
    protected frmSessionService: FrameworkSessionService;
    /**
     * Http客户端
     */
    protected httpClient: HttpClient;
    /**
     * 创建Session的的EAPI地址
     */
    protected beBaseUrl: string;
    /**
     * 创建BeSession接口地址
     */
    protected beCreateSessionUrl: string;
    /**
     * 关闭BeSession接口地址
     */
    protected beCloseSessionUrl: string;
    /**
     * 框架SessionId（用户的或者功能菜单的）
     */
    protected readonly frmSessionId: string;
    /**
     * 清空的BeSessionId
     */
    protected oldBeSessionId: string;
    /**
     * BeSession是否存在
     */
    private beSessionExisted;
    /**
     * BeSession是否存在流
     */
    private beSessionExisted$;
    /**
     * 构造函数
     */
    constructor(storageStrategy: BeSessionStorageStrategy, frmSessionService: FrameworkSessionService, httpClient: HttpClient, beBaseUrl: string);
    abstract getSessionId(): Observable<string>;
    abstract setSessionId(sessionId: any): void;
    abstract clearSessionId(): void;
    abstract handleRequestHeaders(headers: HttpHeaders): HttpHeaders;
    abstract handleReponseHeaders(headers: HttpHeaders): void;
    protected abstract getSessionStorageKey(): string;
    /**
     * 获取框架SessionId
     */
    getFrameworkSessionId(): string;
    /**
     * 从缓存中获取BeSession
     */
    protected getSessionIdFromStorage(): string;
    /**
     * 创建BeSessionId
     */
    protected createSession(): Observable<string>;
    clear(formToken: any): Subject<unknown>;
    test(): Observable<string>;
    /**
     * 关闭BeSessionId
     */
    protected closeOldSession(): Observable<boolean>;
    /**
     * 设置BeSession存在状态，并发出通知
     */
    protected setBesessionExisted(beSessionExisted: boolean): void;
    /**
     * 获取BeSession是否存在状态
     */
    getBeSessionExisted(): Observable<boolean>;
}
export { BefSessionHandlingStrategy };
