/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef-lookup-data.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { map } from 'rxjs/operators';
import { HttpMethods } from '@farris/mobile-devkit';
import { RequestInfoUtil } from './utils/index';
/**
 * Bef帮助取数服务
 */
export class BefLookupDataService {
    /**
     * 构造函数
     * @param {?} viewModelContext
     */
    constructor(viewModelContext) {
        this.viewModelContext = viewModelContext;
        this.befRepository = (/** @type {?} */ (this.viewModelContext.repository));
    }
    /**
     * 帮助取数
     * @param {?} helpMetadataId
     * @param {?=} queryParam
     * @return {?}
     */
    getData(helpMetadataId, queryParam) {
        /** @type {?} */
        const tableName = helpMetadataId.split('.')[0];
        /** @type {?} */
        const labelId = helpMetadataId.split('.')[1];
        queryParam = queryParam || {};
        return this.extendGetHelpData(labelId, tableName, queryParam);
    }
    /**
     * 扩展的帮助取数
     * @private
     * @param {?} labelId
     * @param {?} tableName
     * @param {?} queryParam
     * @return {?}
     */
    extendGetHelpData(labelId, tableName, queryParam) {
        /** @type {?} */
        const url = `${this.befRepository.apiProxy.baseUrl}/extension/elementhelps`;
        /** @type {?} */
        const requestInfo = RequestInfoUtil.buildRequestInfo(this.befRepository);
        /** @type {?} */
        const body = {
            labelId: labelId,
            nodeCode: tableName,
            queryParam: queryParam,
            requestInfo: requestInfo
        };
        /** @type {?} */
        const requestConfig = {
            body: body
        };
        /** @type {?} */
        const result$ = this.befRepository.apiProxy.request(HttpMethods.PUT, url, requestConfig);
        return result$.pipe(map((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            return result;
        })));
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    BefLookupDataService.prototype.viewModelContext;
    /**
     * @type {?}
     * @private
     */
    BefLookupDataService.prototype.befRepository;
    /** @type {?} */
    BefLookupDataService.prototype.context;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVmLWxvb2t1cC1kYXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1iZWYvIiwic291cmNlcyI6WyJsaWIvYmVmLWxvb2t1cC1kYXRhLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFVLFdBQVcsRUFBdUMsTUFBTSx1QkFBdUIsQ0FBQztBQUVqRyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7O0FBTWhELE1BQU0sT0FBTyxvQkFBb0I7Ozs7O0lBVy9CLFlBQVksZ0JBQWtDO1FBQzVDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztRQUN6QyxJQUFJLENBQUMsYUFBYSxHQUFHLG1CQUFBLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQXlCLENBQUE7SUFDaEYsQ0FBQzs7Ozs7OztJQUtNLE9BQU8sQ0FBQyxjQUFzQixFQUFFLFVBQWdCOztjQUMvQyxTQUFTLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7O2NBQ3hDLE9BQU8sR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1QyxVQUFVLEdBQUcsVUFBVSxJQUFJLEVBQUUsQ0FBQztRQUM5QixPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7Ozs7Ozs7OztJQUtPLGlCQUFpQixDQUFDLE9BQWUsRUFBRSxTQUFpQixFQUFFLFVBQWU7O2NBQ3JFLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLE9BQU8seUJBQXlCOztjQUNyRSxXQUFXLEdBQUcsZUFBZSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUM7O2NBQ2xFLElBQUksR0FBRztZQUNYLE9BQU8sRUFBRSxPQUFPO1lBQ2hCLFFBQVEsRUFBRSxTQUFTO1lBQ25CLFVBQVUsRUFBRSxVQUFVO1lBQ3RCLFdBQVcsRUFBRSxXQUFXO1NBQ3pCOztjQUNLLGFBQWEsR0FBc0I7WUFDdkMsSUFBSSxFQUFFLElBQUk7U0FDWDs7Y0FFSyxPQUFPLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLGFBQWEsQ0FBQztRQUN4RixPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQ2pCLEdBQUc7Ozs7UUFBQyxDQUFDLE1BQVcsRUFBRSxFQUFFO1lBQ2xCLE9BQU8sTUFBTSxDQUFDO1FBQ2hCLENBQUMsRUFBQyxDQUNILENBQUM7SUFDSixDQUFDO0NBQ0Y7Ozs7OztJQS9DQyxnREFBMkM7Ozs7O0lBRTNDLDZDQUE2Qzs7SUFFN0MsdUNBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IEVudGl0eSwgSHR0cE1ldGhvZHMsIEh0dHBSZXF1ZXN0Q29uZmlnLCBWaWV3TW9kZWxDb250ZXh0IH0gZnJvbSAnQGZhcnJpcy9tb2JpbGUtZGV2a2l0JztcclxuaW1wb3J0IHsgUmVzcG9uc2VJbmZvIH0gZnJvbSAnLi90eXBlcyc7XHJcbmltcG9ydCB7IFJlcXVlc3RJbmZvVXRpbCB9IGZyb20gJy4vdXRpbHMvaW5kZXgnO1xyXG5pbXBvcnQgeyBCZWZSZXBvc2l0b3J5IH0gZnJvbSAnLi9iZWZfcmVwb3NpdG9yeSc7XHJcblxyXG4vKipcclxuICogQmVm5biu5Yqp5Y+W5pWw5pyN5YqhXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQmVmTG9va3VwRGF0YVNlcnZpY2Uge1xyXG5cclxuICBwcml2YXRlIHZpZXdNb2RlbENvbnRleHQ6IFZpZXdNb2RlbENvbnRleHQ7XHJcblxyXG4gIHByaXZhdGUgYmVmUmVwb3NpdG9yeTogQmVmUmVwb3NpdG9yeTxFbnRpdHk+O1xyXG5cclxuICBwdWJsaWMgY29udGV4dDogYW55O1xyXG5cclxuICAvKipcclxuICAgKiDmnoTpgKDlh73mlbBcclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcih2aWV3TW9kZWxDb250ZXh0OiBWaWV3TW9kZWxDb250ZXh0KSB7XHJcbiAgICB0aGlzLnZpZXdNb2RlbENvbnRleHQgPSB2aWV3TW9kZWxDb250ZXh0O1xyXG4gICAgdGhpcy5iZWZSZXBvc2l0b3J5ID0gdGhpcy52aWV3TW9kZWxDb250ZXh0LnJlcG9zaXRvcnkgYXMgQmVmUmVwb3NpdG9yeTxFbnRpdHk+XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDluK7liqnlj5bmlbBcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0RGF0YShoZWxwTWV0YWRhdGFJZDogc3RyaW5nLCBxdWVyeVBhcmFtPzogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGNvbnN0IHRhYmxlTmFtZSA9IGhlbHBNZXRhZGF0YUlkLnNwbGl0KCcuJylbMF07XHJcbiAgICBjb25zdCBsYWJlbElkID0gaGVscE1ldGFkYXRhSWQuc3BsaXQoJy4nKVsxXTtcclxuICAgIHF1ZXJ5UGFyYW0gPSBxdWVyeVBhcmFtIHx8IHt9O1xyXG4gICAgcmV0dXJuIHRoaXMuZXh0ZW5kR2V0SGVscERhdGEobGFiZWxJZCwgdGFibGVOYW1lLCBxdWVyeVBhcmFtKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaJqeWxleeahOW4ruWKqeWPluaVsFxyXG4gICAqL1xyXG4gIHByaXZhdGUgZXh0ZW5kR2V0SGVscERhdGEobGFiZWxJZDogc3RyaW5nLCB0YWJsZU5hbWU6IHN0cmluZywgcXVlcnlQYXJhbTogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGNvbnN0IHVybCA9IGAke3RoaXMuYmVmUmVwb3NpdG9yeS5hcGlQcm94eS5iYXNlVXJsfS9leHRlbnNpb24vZWxlbWVudGhlbHBzYDtcclxuICAgIGNvbnN0IHJlcXVlc3RJbmZvID0gUmVxdWVzdEluZm9VdGlsLmJ1aWxkUmVxdWVzdEluZm8odGhpcy5iZWZSZXBvc2l0b3J5KTtcclxuICAgIGNvbnN0IGJvZHkgPSB7XHJcbiAgICAgIGxhYmVsSWQ6IGxhYmVsSWQsXHJcbiAgICAgIG5vZGVDb2RlOiB0YWJsZU5hbWUsXHJcbiAgICAgIHF1ZXJ5UGFyYW06IHF1ZXJ5UGFyYW0sXHJcbiAgICAgIHJlcXVlc3RJbmZvOiByZXF1ZXN0SW5mb1xyXG4gICAgfTtcclxuICAgIGNvbnN0IHJlcXVlc3RDb25maWc6IEh0dHBSZXF1ZXN0Q29uZmlnID0ge1xyXG4gICAgICBib2R5OiBib2R5XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IHJlc3VsdCQgPSB0aGlzLmJlZlJlcG9zaXRvcnkuYXBpUHJveHkucmVxdWVzdChIdHRwTWV0aG9kcy5QVVQsIHVybCwgcmVxdWVzdENvbmZpZyk7XHJcbiAgICByZXR1cm4gcmVzdWx0JC5waXBlKFxyXG4gICAgICBtYXAoKHJlc3VsdDogYW55KSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG59Il19