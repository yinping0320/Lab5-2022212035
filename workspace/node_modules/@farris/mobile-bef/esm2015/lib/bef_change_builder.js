/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_change_builder.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ModifyType } from '@farris/mobile-devkit';
import { ChangeDetailType } from './types';
import { EntityUtil } from './utils/index';
/**
 * BEF变更集构造器
 */
class BefChangeBuilder {
    /**
     * 构造函数
     * @param {?} entityType 实体类型
     * @param {?} entityCollection
     */
    constructor(entityType, entityCollection) {
        this.entityType = entityType;
        this.entityCollection = entityCollection;
    }
    /**
     * 构造Bef变更集
     * @param {?} modifications
     * @return {?}
     */
    build(modifications) {
        // 重置changeDetail
        this.changeDetail = {
            ChangeType: ChangeDetailType.Modify,
            ChangeInfo: {
                DataId: ''
            }
        };
        modifications.forEach((/**
         * @param {?} modification
         * @return {?}
         */
        modification => {
            this.buildChangeDetail(modification);
        }));
        return this.changeDetail;
    }
    /**
     * 构造Bef变更详情
     * @param {?} modification
     * @return {?}
     */
    buildChangeDetail(modification) {
        /** @type {?} */
        const paths = modification.path.concat();
        // 设置根节点DataId
        if (!this.changeDetail.ChangeInfo.DataId) {
            this.changeDetail.ChangeInfo.DataId = paths[0].split(':')[1];
        }
        /** @type {?} */
        let parentChangeDetail = this.changeDetail;
        /** @type {?} */
        let parentEntityType = this.entityType;
        for (let i = 1; i < paths.length && parentChangeDetail; i = i + 2) {
            /** @type {?} */
            const parentChangeInfo = this.getChangeInfo(parentChangeDetail);
            /** @type {?} */
            const propName = paths[i];
            const { propType, propEntityType, propMetadata } = EntityUtil.getPropInfo(parentEntityType, propName);
            /** @type {?} */
            const dataField = propMetadata.dataField || propName;
            if (propType === 'NgField') {
                // 不支持主键变更，忽略
                /** @type {?} */
                const primaryKey = EntityUtil.getPrimaryKey(parentEntityType);
                if (propName === primaryKey) {
                    continue;
                }
                if (modification.type !== ModifyType.ValueChange) {
                    throw Error('简单类型的属性上不支持ValueChange类型之外的变更');
                }
                // NgField类型：说明是最后一级
                parentChangeInfo[dataField] = modification.value;
                parentChangeDetail = null;
            }
            else if (propType === 'NgObject') {
                // NgObject属性本身无法触发变更，只有它的子节点才能触发，所以它上边的变更永远是Modify类型的。
                /** @type {?} */
                const childId = paths[i + 1].split(':')[1];
                /** @type {?} */
                const childIdName = paths[i + 1].split(':')[0];
                if (childIdName) {
                    // 有主键（关联对象）：是一个普通的对象
                    /** @type {?} */
                    let changeObject = parentChangeInfo[dataField];
                    // 获取数据
                    /** @type {?} */
                    const entityPath = paths.slice(0, i + 1);
                    /** @type {?} */
                    const changedEntity = this.entityCollection.getEntityByPath(entityPath);
                    changeObject = changedEntity ? changedEntity.toJSON() : {};
                    parentChangeInfo[dataField] = changeObject;
                    parentChangeDetail = null;
                    parentEntityType = null;
                }
                else {
                    // 没有主键（值对象）：是一个完整的ChangeDetail
                    /** @type {?} */
                    let changeDetail = (/** @type {?} */ (parentChangeInfo[dataField]));
                    if (!changeDetail) {
                        changeDetail = {
                            ChangeType: ChangeDetailType.Modify,
                            ChangeInfo: {}
                        };
                    }
                    parentChangeInfo[dataField] = changeDetail;
                    parentChangeDetail = changeDetail;
                    parentEntityType = propEntityType;
                }
            }
            else if (propType === 'NgList') {
                // 如果不存在则创建一个空数组
                if (!parentChangeDetail.ChangeInfo[dataField]) {
                    parentChangeDetail.ChangeInfo[dataField] = [];
                }
                /** @type {?} */
                const changeDetails = (/** @type {?} */ (parentChangeDetail.ChangeInfo[dataField]));
                // 如果这个属性，不是叶子节点，需要查找当前属性是否已经存在对应ChangeDetail：
                // 1、不存在：创建一个Modify类型的ChangeDetail；
                // 2、存在：返回查找到的ChangeDetai，这个ChangeDetail可能是一个Add类型也可能是一个Modify类型；
                // 3、现状：目前BEF不支持Add类型的变更，肯定是一个Modify类型的变更。
                if (i !== paths.length - 1) {
                    // 遍历检查变更是否已经存在
                    /** @type {?} */
                    const dataId = paths[i + 1].split(':')[1];
                    /** @type {?} */
                    let changeDetail = changeDetails.find((/**
                     * @param {?} changeDetailItem
                     * @return {?}
                     */
                    changeDetailItem => {
                        return changeDetailItem.ChangeInfo.DataId === dataId;
                    }));
                    // 如果不存在，则创建并添加
                    if (!changeDetail) {
                        changeDetail = this.createEmptyChangeDetail(ChangeDetailType.Modify, dataId);
                        changeDetails.push(changeDetail);
                    }
                    parentChangeDetail = changeDetail;
                    parentEntityType = propEntityType;
                    continue;
                }
                // 重置
                parentChangeDetail = null;
                parentEntityType = null;
            }
            else if (propType === 'NgDynamic') {
                // 获取数据
                /** @type {?} */
                const entityPath = paths.slice(0, i + 1);
                /** @type {?} */
                const changedEntity = this.entityCollection.getEntityByPath(entityPath);
                parentChangeInfo[dataField] = {
                    ChangeType: ChangeDetailType.Modify,
                    ChangeInfo: changedEntity ? changedEntity.toJSON() : {}
                };
                parentChangeDetail = null;
                parentEntityType = null;
            }
        }
    }
    /**
     * 获取变更信息
     * 在整个ChangeDetail树上，存在两种类型的节点
     * ChangeDetail：实体变更、值对象变更（没有DataID）
     * PlainObject: 关联对象的变更
     * 从这两种节点上拿具体变更信息的时候，需要统一处理，屏蔽这个差异。
     * \@todo：为这两种节点封装ChangeNode基类来解决这个差异。
     * @private
     * @param {?} changeDetail
     * @return {?}
     */
    getChangeInfo(changeDetail) {
        // @todo：可能存在同名属性
        if (changeDetail.hasOwnProperty('ChangeInfo')) {
            return changeDetail.ChangeInfo;
        }
        else {
            return changeDetail;
        }
    }
    /**
     * 创建ChangeDetail
     * @private
     * @param {?} type BEF变更类型
     * @param {?} dataId 数据内码
     * @return {?}
     */
    createEmptyChangeDetail(type, dataId) {
        /** @type {?} */
        const changeDetail = {
            ChangeType: type,
            ChangeInfo: {
                DataId: dataId
            }
        };
        return changeDetail;
    }
}
if (false) {
    /**
     * Bef变更集
     * @type {?}
     */
    BefChangeBuilder.prototype.changeDetail;
    /**
     * @type {?}
     * @private
     */
    BefChangeBuilder.prototype.entityType;
    /**
     * @type {?}
     * @private
     */
    BefChangeBuilder.prototype.entityCollection;
}
export { BefChangeBuilder };
//# sourceMappingURL=data:application/json;base64,