/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_proxy.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { switchMap, map, catchError } from 'rxjs/operators';
import { HttpMethods } from '@farris/mobile-devkit';
import { BefDataPathUtil } from './utils/index';
/**
 * Bef API代理类
 * @abstract
 */
export class BefProxy {
    /**
     * 构造函数
     * @param {?} httpClient
     */
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.associatedUrlMap = new Map();
    }
    // 记录附件取跨Be url
    /**
     * @param {?} url
     * @return {?}
     */
    setAssociatedUrl(url) {
        this.associatedUrlMap.set(url, url);
    }
    /**
     * 设置扩展策略
     * @param {?} proxyExtend
     * @return {?}
     */
    setProxyExtend(proxyExtend) {
        this.proxyExtend = proxyExtend;
    }
    /**
     * 查询
     * @param {?=} entityFilter
     * @return {?}
     */
    query(entityFilter) {
        /** @type {?} */
        const url = this.baseUrl;
        /** @type {?} */
        const params = {};
        if (entityFilter) {
            /** @type {?} */
            const entityFilterString = JSON.stringify(entityFilter);
            params.entityFilter = entityFilterString;
        }
        /** @type {?} */
        const requestConfig = {
            params: params
        };
        return this.request(HttpMethods.GET, url, requestConfig);
    }
    /**
     * 列表数据查询（扩展）
     * @param {?} entityFilter
     * @return {?}
     */
    extendQuery(entityFilter) {
        /** @type {?} */
        const url = `${this.baseUrl}/extension/query`;
        /** @type {?} */
        const params = {};
        if (entityFilter) {
            /** @type {?} */
            const entityFilterString = JSON.stringify(entityFilter);
            params.entityFilter = entityFilterString;
        }
        /** @type {?} */
        const requestConfig = {
            params: params
        };
        return this.request(HttpMethods.PUT, url, requestConfig);
    }
    /**
     * 单条数据检索
     * @param {?} id
     * @return {?}
     */
    retrieve(id) {
        /** @type {?} */
        const url = `${this.baseUrl}/${id}`;
        return this.request(HttpMethods.GET, url);
    }
    /**
     * 单条数据检索（扩展）
     * @param {?} id
     * @return {?}
     */
    extendRetrieve(id) {
        /** @type {?} */
        const url = `${this.baseUrl}/extension/retrieve/${id}`;
        return this.request(HttpMethods.PUT, url);
    }
    /**
     * 单条数据检索（加锁）
     * @param {?} id
     * @return {?}
     */
    edit(id) {
        /** @type {?} */
        const url = `${this.baseUrl}/service/edit/${id}`;
        return this.request(HttpMethods.PUT, url);
    }
    /**
     * 新增数据
     * @param {?=} defaultValue
     * @param {?=} requestInfo
     * @return {?}
     */
    create(defaultValue, requestInfo) {
        /** @type {?} */
        const body = {
            defaultValue,
            requestInfo: requestInfo,
        };
        /** @type {?} */
        const requestConfig = {
            body: body
        };
        return this.request(HttpMethods.POST, this.baseUrl, requestConfig);
    }
    /**
     * 新增从表数据
     * \@path 新增路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）
     * @param {?} fpath
     * @return {?}
     */
    createByPath(fpath) {
        /** @type {?} */
        const pathUrl = BefDataPathUtil.convertPathToUrl(fpath);
        /** @type {?} */
        const url = `${this.baseUrl}${pathUrl}`;
        return this.request(HttpMethods.POST, url);
    }
    /**
     * 提交变更
     * @param {?} changeDetail
     * @return {?}
     */
    update(changeDetail) {
        /** @type {?} */
        const body = {
            changeDetail
        };
        /** @type {?} */
        const requestConfig = {
            body: body
        };
        return this.request(HttpMethods.PATCH, this.baseUrl, requestConfig);
    }
    /**
     * 执行保存
     * @return {?}
     */
    save() {
        return this.request(HttpMethods.PUT, this.baseUrl);
    }
    /**
     * 删除
     * @param {?} id
     * @return {?}
     */
    delete(id) {
        /** @type {?} */
        const url = `${this.baseUrl}/${id}`;
        return this.request(HttpMethods.DELETE, url);
    }
    /**
     * 删除（扩展）
     * @param {?} id
     * @return {?}
     */
    extendDelete(id) {
        /** @type {?} */
        const url = `${this.baseUrl}/extension/delete/${id}`;
        return this.request(HttpMethods.PUT, url);
    }
    /**
     * 删除并保存
     * @param {?} id
     * @return {?}
     */
    deleteAndSave(id) {
        /** @type {?} */
        const url = `${this.baseUrl}/service/delete/${id}`;
        /** @type {?} */
        const requestConfig = {};
        return this.request(HttpMethods.PUT, url, requestConfig);
    }
    /**
     * 删除后代
     * @param {?} fpath
     * @param {?} id
     * @return {?}
     */
    deletByPath(fpath, id) {
        /** @type {?} */
        const pathUrl = BefDataPathUtil.convertPathToUrl(fpath);
        /** @type {?} */
        const url = `${this.baseUrl}${pathUrl}/${id}`;
        return this.request(HttpMethods.DELETE, url);
    }
    /**
     * 删除后代（扩展）
     * @param {?} fpath
     * @param {?} id
     * @return {?}
     */
    extendDeletByPath(fpath, id) {
        /** @type {?} */
        const pathUrl = BefDataPathUtil.convertPathToUrl(fpath);
        /** @type {?} */
        const url = `${this.baseUrl}/extension${pathUrl}/${id}`;
        return this.request(HttpMethods.PUT, url);
    }
    /**
     * 批量删除
     * @param {?} ids 待删除的id数组
     * @return {?}
     */
    batchDelete(ids) {
        /** @type {?} */
        const params = {
            ids: ids.join(',')
        };
        /** @type {?} */
        const requestConfig = {
            params: params
        };
        return this.request(HttpMethods.DELETE, this.baseUrl, requestConfig);
    }
    /**
     * 批量删除（扩展）
     * @param {?} ids
     * @return {?}
     */
    extendBatchDelete(ids) {
        /** @type {?} */
        const url = `${this.baseUrl}/extension/batchdelete`;
        /** @type {?} */
        const params = {
            ids: ids.join(',')
        };
        /** @type {?} */
        const requestConfig = {
            params: params
        };
        return this.request(HttpMethods.PUT, url, requestConfig);
    }
    /**
     * 取消
     * @return {?}
     */
    cancel() {
        /** @type {?} */
        const url = `${this.baseUrl}/service/cancel`;
        return this.request(HttpMethods.POST, url);
    }
    /**
     * 调用httpclient取数
     * @param {?} method methods
     * @param {?} url url
     * @param {?=} requestConfigs options
     * @param {?=} ignoreHandlingChanges
     * @return {?}
     */
    request(method, url, requestConfigs, ignoreHandlingChanges = false) {
        requestConfigs = requestConfigs || {};
        // 扩展body
        if (ignoreHandlingChanges !== true) {
            if (method === HttpMethods.POST || method === HttpMethods.PUT || method === HttpMethods.PATCH) {
                /** @type {?} */
                const body = requestConfigs.body || {};
                requestConfigs.body = this.proxyExtend.extendBody(body);
            }
        }
        // 扩展headers
        /** @type {?} */
        const headers$ = this.proxyExtend.extendHeaders(requestConfigs.headers);
        // 发送请求
        return headers$.pipe(switchMap((/**
         * @param {?} headers
         * @return {?}
         */
        (headers) => {
            requestConfigs.headers = headers;
            requestConfigs.observe = 'response';
            return this.httpClient.request(method, url, requestConfigs).pipe(map((/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                if (ignoreHandlingChanges === true) {
                    return result && result.body && result.body.returnValue ? result.body.returnValue : result;
                }
                else {
                    return this.proxyExtend.onResponse(result);
                }
            })), catchError((/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                return this.proxyExtend.onError(error, false, false);
            })));
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            return this.proxyExtend.onError(error, false, false);
        })));
    }
}
if (false) {
    /**
     * API基路径
     * \@summary
     * 延迟到实现类确定，考虑使用注解指定。
     * @type {?}
     */
    BefProxy.prototype.baseUrl;
    /** @type {?} */
    BefProxy.prototype.associatedUrlMap;
    /**
     * 代理扩展
     * @type {?}
     * @protected
     */
    BefProxy.prototype.proxyExtend;
    /** @type {?} */
    BefProxy.prototype.httpClient;
}
//# sourceMappingURL=data:application/json;base64,