/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_data_service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { of, zip, EMPTY } from 'rxjs';
import { tap, map, switchMap } from 'rxjs/operators';
import { DataChangeType, } from '@farris/mobile-devkit';
/**
 * Bef数据访问服务
 * @template T
 */
class BefDataService {
    /**
     * 构造函数
     * @param {?} repository
     */
    constructor(repository) {
        this.repository = repository;
    }
    /**
     * Api代理类
     * @private
     * @return {?}
     */
    get apiProxy() {
        return this.repository.apiProxy;
    }
    /**
     * 获取实体集合
     * @param {?} filter
     * @param {?} sort
     * @param {?} pageSize
     * @param {?} pageIndex
     * @return {?}
     */
    getList(filter, sort, pageSize, pageIndex) {
        /** @type {?} */
        const entityFilter = this.buildEntityFilter(filter, sort, pageSize, pageIndex);
        /** @type {?} */
        const query$ = this.apiProxy.extendQuery(entityFilter);
        /** @type {?} */
        const result$ = query$.pipe(map((/**
         * @param {?} returnValue
         * @return {?}
         */
        (returnValue) => {
            this.repository.setPaginationInfo(((/** @type {?} */ (returnValue))).pagination);
            /** @type {?} */
            const listData = ((/** @type {?} */ (returnValue))).result;
            /** @type {?} */
            const entities = this.repository.buildEntities(listData);
            if (this.determineIsAppend(pageIndex)) {
                this.repository.entityCollection.addEntities(entities);
            }
            else {
                this.repository.entityCollection.loadEntities(entities);
            }
            return entities;
        })));
        return result$;
    }
    /**
     * 根据当前页判断是否追加
     * @param {?} pageIndex
     * @return {?}
     */
    determineIsAppend(pageIndex) {
        return pageIndex > 1;
    }
    /**
     * 获取单个实体
     * @param {?} id
     * @return {?}
     */
    getById(id) {
        /** @type {?} */
        const retrieve$ = this.apiProxy.extendRetrieve(id);
        /** @type {?} */
        const result$ = retrieve$.pipe(map((/**
         * @param {?} returnValue
         * @return {?}
         */
        (returnValue) => {
            /** @type {?} */
            const entityData = returnValue;
            /** @type {?} */
            const entity = this.repository.buildEntity(entityData);
            this.repository.entityCollection.loadEntities([entity]);
            return entity;
        })));
        return result$;
    }
    /**
     * 更新并对实体加锁
     * @param {?} id
     * @return {?}
     */
    editById(id) {
        /** @type {?} */
        const entity = this.repository.entityCollection.getEntityById(id);
        if (!entity) {
            return of(null);
        }
        /** @type {?} */
        const retrieve$ = this.apiProxy.edit(id);
        /** @type {?} */
        const result$ = retrieve$.pipe(map((/**
         * @param {?} returnValue
         * @return {?}
         */
        (returnValue) => {
            /** @type {?} */
            const entityData = returnValue.data;
            /** @type {?} */
            const entityToUpdate = this.repository.entityCollection.getEntityById(id);
            if (entityToUpdate && entityData) {
                this.reloadEntityData(entityToUpdate, entityData);
            }
            return entityToUpdate;
        })));
        return result$;
    }
    /**
     * 根据id更新实体
     * @param {?} id 实体id
     * @return {?}
     */
    updateById(id) {
        /** @type {?} */
        const entity = this.repository.entityCollection.getEntityById(id);
        if (!entity) {
            return EMPTY;
        }
        /** @type {?} */
        const retrieve$ = this.apiProxy.extendRetrieve(id);
        /** @type {?} */
        const result$ = retrieve$.pipe(map((/**
         * @param {?} returnValue
         * @return {?}
         */
        (returnValue) => {
            /** @type {?} */
            const entityData = returnValue;
            /** @type {?} */
            const entityToUpdate = this.repository.entityCollection.getEntityById(id);
            this.reloadEntityData(entityToUpdate, entityData);
            return entityToUpdate;
        })));
        return result$;
    }
    /**
     * 重新加载实体数据
     * @private
     * @param {?} entity
     * @param {?} entityData
     * @return {?}
     */
    reloadEntityData(entity, entityData) {
        if (!entity) {
            return;
        }
        entity.load(entityData);
        entity.changes.splice(0, entity.changes.length);
    }
    /**
     * 创建新实体，并加载
     * @param {?=} defaultValue
     * @return {?}
     */
    create(defaultValue) {
        /** @type {?} */
        const result$ = this.apiProxy.create(defaultValue);
        return result$.pipe(map((/**
         * @param {?} returnValue
         * @return {?}
         */
        (returnValue) => {
            /** @type {?} */
            const newEntityData = returnValue;
            /** @type {?} */
            const newEntity = this.repository.buildEntity(newEntityData);
            this.repository.entityCollection.loadEntities([newEntity]);
            this.repository.dataChangeHistory.addChange({ dataId: newEntity.primaryValue, changeType: DataChangeType.Add });
            return newEntity;
        })));
    }
    /**
     * 追加实体
     * @param {?=} defaultValue
     * @return {?}
     */
    append(defaultValue) {
        /** @type {?} */
        const append$ = this.apiProxy.create(defaultValue);
        return append$.pipe(map((/**
         * @param {?} returnValue
         * @return {?}
         */
        (returnValue) => {
            /** @type {?} */
            const newEntityData = returnValue;
            /** @type {?} */
            const newEntity = this.repository.buildEntity(newEntityData);
            this.repository.entityCollection.addEntity(newEntity);
            return newEntity;
        })));
    }
    /**
     * 创建子实体，并追加
     * @param {?} fpath 父路径，格式形如：/1/edus（从表）或/1/edus/2/grades（从从表）
     * @return {?}
     */
    appendByPath(fpath) {
        /** @type {?} */
        const append$ = this.apiProxy.createByPath(fpath);
        return append$.pipe(map((/**
         * @param {?} returnValue
         * @return {?}
         */
        (returnValue) => {
            /** @type {?} */
            const newEntityData = returnValue;
            /** @type {?} */
            const newEntity = this.repository.entityManager.appendEntityByPath(fpath, newEntityData, newEntityData);
            return newEntity;
        })));
    }
    /**
     * 根据id删除实体
     * @param {?} id 内码
     * @param {?=} ifSave
     * @return {?}
     */
    removeById(id, ifSave) {
        ifSave = (ifSave === undefined) ? true : ifSave;
        /** @type {?} */
        const delete$ = this.apiProxy.extendDelete(id);
        // 从本地实体集合中移除
        return delete$.pipe(switchMap((/**
         * @return {?}
         */
        () => {
            // 执行保存
            if (ifSave === true) {
                return this.applyChangesById(id).pipe(tap((/**
                 * @param {?} result
                 * @return {?}
                 */
                result => {
                    if (result) {
                        this.repository.entityCollection.removeEntityById(id);
                    }
                })));
            }
            else {
                // 从实体集合中删除
                this.repository.entityCollection.removeEntityById(id);
                this.repository.dataChangeHistory.addChange({ dataId: id, changeType: DataChangeType.Delete });
                return of(true);
            }
        })));
    }
    /**
     * 删除并保存
     * @param {?} id 要删除的实体id
     * @return {?}
     */
    removeAndSaveById(id) {
        /** @type {?} */
        const delete$ = this.apiProxy.deleteAndSave(id);
        /** @type {?} */
        const result$ = delete$.pipe(switchMap((/**
         * @return {?}
         */
        () => {
            this.repository.entityCollection.removeEntityById(id);
            return of(true);
        })));
        return result$;
    }
    /**
     * 批量删除
     * @param {?} ids
     * @return {?}
     */
    removeByIds(ids) {
        // 服务器端删除
        /** @type {?} */
        const delete$ = this.apiProxy.extendBatchDelete(ids);
        // 从本地实体集合中移除
        return delete$.pipe(switchMap((/**
         * @return {?}
         */
        () => {
            // 执行保存
            return this.applyChangesByIdArray(ids).pipe(tap((/**
             * @param {?} result
             * @return {?}
             */
            result => {
                if (result) {
                    // 从实体集合中删除
                    this.repository.entityCollection.removeEntities((/**
                     * @param {?} value
                     * @return {?}
                     */
                    (value) => {
                        return this.checkEntityValueExists(value, ids);
                    }));
                }
            })));
        })));
    }
    /**
     * 检测实体的主键值是否存在于数组中，如果存在返回true
     * @private
     * @param {?} entity
     * @param {?} primaryValueArray
     * @return {?}
     */
    checkEntityValueExists(entity, primaryValueArray) {
        /** @type {?} */
        let isExistInTargetArray = false;
        for (let i = 0; i < primaryValueArray.length; i++) {
            if (entity.primaryValue === primaryValueArray[i]) {
                isExistInTargetArray = true;
                break;
            }
        }
        return isExistInTargetArray;
    }
    /**
     * 删除子级
     * @param {?} fpath
     * @param {?} id   内码
     * @return {?}
     */
    removeByPath(fpath, id) {
        /** @type {?} */
        const delete$ = this.apiProxy.extendDeletByPath(fpath, id);
        // 从本地实体集合中移除
        return delete$.pipe(map((/**
         * @return {?}
         */
        () => {
            this.repository.entityManager.removeEntityByPath(fpath, id);
            this.repository.dataChangeHistory.addChange({ fpath, dataId: id, changeType: DataChangeType.Delete });
            return true;
        })));
    }
    /**
     * 将id对应的实体的变更提交的服务器端
     * @param {?} id
     * @return {?}
     */
    updateChangesById(id) {
        /** @type {?} */
        const entity = this.repository.entityCollection.getEntityById(id);
        // 变更集为空
        if (!entity.changes || entity.changes.length === 0) {
            return of(true);
        }
        /** @type {?} */
        const changeDetail = this.repository.entityManager.buildEntityChangeDetailById(id);
        /** @type {?} */
        const update$ = this.apiProxy.update(changeDetail);
        /** @type {?} */
        const result$ = update$.pipe(tap((/**
         * @return {?}
         */
        () => {
            this.repository.entityManager.clearEntityChangesById(id);
        })), map((/**
         * @return {?}
         */
        () => {
            return true;
        })));
        return result$;
    }
    /**
     * 提交所有变更
     * @return {?}
     */
    updateAllChanges() {
        // 遍历实体，提交变更
        /** @type {?} */
        const updateResults = [];
        /** @type {?} */
        const entities = this.repository.entityCollection.toArray();
        if (entities.length === 0) {
            return of(true);
        }
        entities.forEach((/**
         * @param {?} entity
         * @return {?}
         */
        (entity) => {
            /** @type {?} */
            const updateResult$ = this.updateChangesById(entity.primaryValue);
            updateResults.push(updateResult$);
        }));
        // 串联流
        /** @type {?} */
        const result$ = zip(...updateResults).pipe(map((/**
         * @return {?}
         */
        () => {
            return true;
        })));
        return result$;
    }
    /**
     * 应用变更
     * @return {?}
     */
    applyChanges() {
        /** @type {?} */
        const save$ = this.apiProxy.save();
        /** @type {?} */
        const result$ = save$.pipe(tap((/**
         * @return {?}
         */
        () => {
            this.repository.entityManager.clearAllEntityChanges();
            this.repository.dataChangeHistory.clear();
        })), map((/**
         * @return {?}
         */
        () => {
            return true;
        })));
        return result$;
    }
    /**
     * 应用idArray对应数据的变更
     * @param {?} ids
     * @return {?}
     */
    applyChangesByIdArray(ids) {
        /** @type {?} */
        const save$ = this.apiProxy.save();
        /** @type {?} */
        const result$ = save$.pipe(tap((/**
         * @return {?}
         */
        () => {
            this.repository.entityManager.clearEntityChangesByIds(ids);
            this.repository.dataChangeHistory.clearByIds(ids);
        })), map((/**
         * @return {?}
         */
        () => {
            return true;
        })));
        return result$;
    }
    /**
     * 应用id对应数据的变更
     * @param {?} id
     * @return {?}
     */
    applyChangesById(id) {
        /** @type {?} */
        const save$ = this.apiProxy.save();
        /** @type {?} */
        const result$ = save$.pipe(tap((/**
         * @return {?}
         */
        () => {
            this.repository.entityManager.clearEntityChangesById(id);
            this.repository.dataChangeHistory.clearByIds([id]);
        })), map((/**
         * @return {?}
         */
        () => {
            return true;
        })));
        return result$;
    }
    /**
     * 取消变更
     * @return {?}
     */
    cancelChanges() {
        /** @type {?} */
        const cancel$ = this.apiProxy.cancel();
        /** @type {?} */
        const result$ = cancel$.pipe(tap((/**
         * @return {?}
         */
        () => {
            this.repository.entityManager.clearAllEntityChanges();
            this.repository.dataChangeHistory.clear();
        })), map((/**
         * @return {?}
         */
        () => {
            return true;
        })));
        return result$;
    }
    /**
     * 构造EntityFilter
     * @private
     * @param {?} filter
     * @param {?} sort
     * @param {?} pageSize
     * @param {?} pageIndex
     * @return {?}
     */
    buildEntityFilter(filter, sort, pageSize, pageIndex) {
        /** @type {?} */
        const entityFilter = {
            FilterConditions: filter,
            SortConditions: sort,
            IsUsePagination: pageSize === 0 ? false : true,
            Pagination: {
                PageIndex: pageIndex,
                PageSize: pageSize,
                PageCount: 0,
                TotalCount: 0
            }
        };
        return entityFilter;
    }
}
if (false) {
    /**
     * 实体仓库
     * @type {?}
     * @private
     */
    BefDataService.prototype.repository;
}
export { BefDataService };
//# sourceMappingURL=data:application/json;base64,