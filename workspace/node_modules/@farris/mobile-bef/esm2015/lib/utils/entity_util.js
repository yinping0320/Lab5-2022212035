/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/entity_util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FieldMetadataUtil } from '@farris/mobile-devkit';
class EntityUtil {
    /**
     * 查找属性的类型
     * @param {?} entityType 实体类型
     * @param {?} targetPropName 属性名称
     * @return {?} 属性信息，包含属性类型（NgField、NgObject、NgList, NgDynamic）和属性对应的实体类型（当NgField类型时为null）
     */
    static getPropInfo(entityType, targetPropName) {
        /** @type {?} */
        let propType;
        /** @type {?} */
        let propEntityType;
        /** @type {?} */
        let propMetadata;
        // NgField
        /** @type {?} */
        const ngFieldProperties = FieldMetadataUtil.getNgFields(entityType);
        Object.keys(ngFieldProperties).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        (propName) => {
            if (propName === targetPropName) {
                propType = 'NgField';
                propEntityType = null;
                propMetadata = ngFieldProperties[propName];
            }
        }));
        // NgObject
        /** @type {?} */
        const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);
        Object.keys(ngObjectProperties).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        (propName) => {
            if (propName === targetPropName) {
                propType = 'NgObject';
                propEntityType = ngObjectProperties[propName].type;
                propMetadata = ngObjectProperties[propName];
            }
        }));
        // NgList
        /** @type {?} */
        const ngListProperties = FieldMetadataUtil.getNgList(entityType);
        Object.keys(ngListProperties).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        (propName) => {
            if (propName === targetPropName) {
                propType = 'NgList';
                propEntityType = ngListProperties[propName].type;
                propMetadata = ngListProperties[propName];
            }
        }));
        /** @type {?} */
        const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);
        Object.keys(ngDynamicProperties).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        (propName) => {
            if (propName === targetPropName) {
                propType = 'NgDynamic';
                propEntityType = ngDynamicProperties[propName].type;
                propMetadata = ngDynamicProperties[propName];
            }
        }));
        return { propType, propEntityType, propMetadata };
    }
    /**
     * 获取实体的主键名
     * @param {?} entityType 实体类型
     * @return {?}
     */
    static getPrimaryKey(entityType) {
        /** @type {?} */
        const primaryNgFiledProp = FieldMetadataUtil.getPrimaryFieldMetadata(entityType);
        if (primaryNgFiledProp) {
            return primaryNgFiledProp.dataField;
        }
        else {
            return '';
        }
    }
    /**
     * 是否为对象属性
     * @param {?} entityType
     * @param {?} targetPropName
     * @return {?}
     */
    static isObjectProp(entityType, targetPropName) {
        /** @type {?} */
        let isObjectProp = false;
        /** @type {?} */
        const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);
        Object.keys(ngObjectProperties).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        (propName) => {
            if (propName === targetPropName) {
                isObjectProp = true;
            }
        }));
        return isObjectProp;
    }
    /**
     * 检查是否是动态列属性
     * @param {?} entityType
     * @param {?} targetPropName
     * @return {?}
     */
    static isDynamicProp(entityType, targetPropName) {
        /** @type {?} */
        let isDynamicProp = false;
        /** @type {?} */
        const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);
        Object.keys(ngDynamicProperties).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        (propName) => {
            if (propName === targetPropName) {
                isDynamicProp = true;
            }
        }));
        return isDynamicProp;
    }
    /**
     * 为实体增加initialData属性
     * @param {?} entity 实体实例
     * @param {?} initialData 默认值对象
     * @return {?}
     */
    static appendInitialData(entity, initialData) {
        /** @type {?} */
        const data = Object.assign({}, initialData);
        delete data.id;
        delete data.parentID;
        entity['initialData'] = data;
    }
}
export { EntityUtil };
//# sourceMappingURL=data:application/json;base64,