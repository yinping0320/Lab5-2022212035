/**
 * @fileoverview added by tsickle
 * Generated from: lib/session/handling-strategies/separated_handling_strategy.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { of } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { BefHttpUtil, BefEnvUtil } from '../../utils/index';
import { BefSessionHandlingStrategy } from './handling_strategy';
/**
 * 隔离的BeSession处理策略
 */
class BefSeparatedSessionHandlingStrategy extends BefSessionHandlingStrategy {
    /**
     * 构造函数
     * @param {?} storageStrategy
     * @param {?} frmSessionService
     * @param {?} httpClient
     * @param {?} beBaseUrl
     */
    constructor(storageStrategy, frmSessionService, httpClient, beBaseUrl) {
        super(storageStrategy, frmSessionService, httpClient, beBaseUrl);
    }
    /**
     * 获取BeSessionId
     * @return {?}
     */
    getSessionId() {
        /** @type {?} */
        const beSessionId = this.getSessionIdFromStorage();
        /** @type {?} */
        let beSessionId$;
        if (beSessionId) {
            beSessionId$ = of(beSessionId);
            this.setBesessionExisted(true);
        }
        else {
            beSessionId$ = this.createSession();
        }
        /** @type {?} */
        const result$ = this.closeOldSession().pipe(switchMap((/**
         * @return {?}
         */
        () => {
            return beSessionId$;
        })));
        return result$;
    }
    /**
     * 设置BeSessionId
     * @param {?} sessionId
     * @return {?}
     */
    setSessionId(sessionId) {
        /** @type {?} */
        const sessionKey = this.getSessionStorageKey();
        this.storageStrategy.setItem(sessionKey, sessionId);
    }
    /**
     * 清空BeSessionId
     * @return {?}
     */
    clearSessionId() {
        if (BefEnvUtil.isInFramework() === true) {
            this.storageStrategy.removeItemsByScope(this.frmSessionId);
        }
        else {
            /** @type {?} */
            const sessionKey = this.getSessionStorageKey();
            this.oldBeSessionId = this.getSessionIdFromStorage();
            this.storageStrategy.removeItem(sessionKey);
        }
    }
    /**
     * 扩展BeSessionId相关头信息
     * @param {?} headers
     * @return {?}
     */
    handleRequestHeaders(headers) {
        /** @type {?} */
        const frmSessionId = this.getFrameworkSessionId();
        /** @type {?} */
        const beSessionId = this.getSessionIdFromStorage();
        if (frmSessionId) {
            headers = BefHttpUtil.appendCafRuntimeCommonVariable(headers, frmSessionId);
        }
        if (beSessionId) {
            headers = BefHttpUtil.appendCafRuntimeContext(headers, beSessionId);
            headers = BefHttpUtil.appendSessionId(headers, beSessionId);
        }
        return headers;
    }
    /**
     * 处理服务器端返回的headers
     * @param {?} headers
     * @return {?}
     */
    handleReponseHeaders(headers) {
    }
    /**
     * 获取某个Repository对应的BeSession的唯一key
     * @protected
     * @return {?}
     */
    getSessionStorageKey() {
        return `${this.frmSessionId}_${this.beBaseUrl}`;
    }
}
export { BefSeparatedSessionHandlingStrategy };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VwYXJhdGVkX2hhbmRsaW5nX3N0cmF0ZWd5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtYmVmLyIsInNvdXJjZXMiOlsibGliL3Nlc3Npb24vaGFuZGxpbmctc3RyYXRlZ2llcy9zZXBhcmF0ZWRfaGFuZGxpbmdfc3RyYXRlZ3kudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUczQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRzVELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHFCQUFxQixDQUFDOzs7O0FBS2pFLE1BQU0sbUNBQW9DLFNBQVEsMEJBQTBCOzs7Ozs7OztJQUsxRSxZQUNFLGVBQXlDLEVBQ3pDLGlCQUEwQyxFQUMxQyxVQUFzQixFQUN0QixTQUFpQjtRQUVqQixLQUFLLENBQUMsZUFBZSxFQUFFLGlCQUFpQixFQUFFLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNuRSxDQUFDOzs7OztJQUtNLFlBQVk7O2NBQ1gsV0FBVyxHQUFHLElBQUksQ0FBQyx1QkFBdUIsRUFBRTs7WUFDOUMsWUFBZ0M7UUFDcEMsSUFBSSxXQUFXLEVBQUU7WUFDZixZQUFZLEdBQUksRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ2hDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNoQzthQUFNO1lBQ0wsWUFBWSxHQUFHLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztTQUNyQzs7Y0FFSyxPQUFPLEdBQUcsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDLElBQUksQ0FDekMsU0FBUzs7O1FBQUMsR0FBRyxFQUFFO1lBQ2IsT0FBTyxZQUFZLENBQUM7UUFDdEIsQ0FBQyxFQUFDLENBQ0g7UUFFRCxPQUFPLE9BQU8sQ0FBQztJQUVqQixDQUFDOzs7Ozs7SUFLTSxZQUFZLENBQUMsU0FBaUI7O2NBQzdCLFVBQVUsR0FBRyxJQUFJLENBQUMsb0JBQW9CLEVBQUU7UUFDOUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3RELENBQUM7Ozs7O0lBS00sY0FBYztRQUNuQixJQUFJLFVBQVUsQ0FBQyxhQUFhLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDdkMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDNUQ7YUFBTTs7a0JBQ0MsVUFBVSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsRUFBRTtZQUM5QyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO1lBQ3JELElBQUksQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQzdDO0lBQ0gsQ0FBQzs7Ozs7O0lBS00sb0JBQW9CLENBQUMsT0FBb0I7O2NBQ3hDLFlBQVksR0FBRyxJQUFJLENBQUMscUJBQXFCLEVBQUU7O2NBQzNDLFdBQVcsR0FBRyxJQUFJLENBQUMsdUJBQXVCLEVBQUU7UUFFbEQsSUFBSSxZQUFZLEVBQUU7WUFDaEIsT0FBTyxHQUFHLFdBQVcsQ0FBQyw4QkFBOEIsQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUM7U0FDN0U7UUFFRCxJQUFJLFdBQVcsRUFBRTtZQUNmLE9BQU8sR0FBRyxXQUFXLENBQUMsdUJBQXVCLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBQ3BFLE9BQU8sR0FBRyxXQUFXLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsQ0FBQztTQUM3RDtRQUVELE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7Ozs7OztJQUtNLG9CQUFvQixDQUFDLE9BQVk7SUFDeEMsQ0FBQzs7Ozs7O0lBS1Msb0JBQW9CO1FBQzVCLE9BQU8sR0FBRyxJQUFJLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNsRCxDQUFDO0NBRUY7QUFFRCxPQUFPLEVBQUUsbUNBQW1DLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgSHR0cEhlYWRlcnMsIEh0dHBDbGllbnQgfSBmcm9tICdAZmFycmlzL21vYmlsZS1kZXZraXQnO1xyXG5cclxuaW1wb3J0IHsgQmVmSHR0cFV0aWwsIEJlZkVudlV0aWwgfSBmcm9tICcuLi8uLi91dGlscy9pbmRleCc7XHJcbmltcG9ydCB7IEZyYW1ld29ya1Nlc3Npb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vZnJhbWV3b3JrX3Nlc3Npb25fc2VydmljZSc7XHJcbmltcG9ydCB7IEJlU2Vzc2lvblN0b3JhZ2VTdHJhdGVneSB9IGZyb20gJy4uL3N0b3JhZ2Utc3RyYXRlZ2llcy9pbmRleCc7XHJcbmltcG9ydCB7IEJlZlNlc3Npb25IYW5kbGluZ1N0cmF0ZWd5IH0gZnJvbSAnLi9oYW5kbGluZ19zdHJhdGVneSc7XHJcblxyXG4vKipcclxuICog6ZqU56a755qEQmVTZXNzaW9u5aSE55CG562W55WlXHJcbiAqL1xyXG5jbGFzcyBCZWZTZXBhcmF0ZWRTZXNzaW9uSGFuZGxpbmdTdHJhdGVneSBleHRlbmRzIEJlZlNlc3Npb25IYW5kbGluZ1N0cmF0ZWd5IHtcclxuXHJcbiAgLyoqXHJcbiAgICog5p6E6YCg5Ye95pWwXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBzdG9yYWdlU3RyYXRlZ3k6IEJlU2Vzc2lvblN0b3JhZ2VTdHJhdGVneSxcclxuICAgIGZybVNlc3Npb25TZXJ2aWNlOiBGcmFtZXdvcmtTZXNzaW9uU2VydmljZSxcclxuICAgIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQsXHJcbiAgICBiZUJhc2VVcmw6IHN0cmluZ1xyXG4gICkge1xyXG4gICAgc3VwZXIoc3RvcmFnZVN0cmF0ZWd5LCBmcm1TZXNzaW9uU2VydmljZSwgaHR0cENsaWVudCwgYmVCYXNlVXJsKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPlkJlU2Vzc2lvbklkXHJcbiAgICovXHJcbiAgcHVibGljIGdldFNlc3Npb25JZCgpOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xyXG4gICAgY29uc3QgYmVTZXNzaW9uSWQgPSB0aGlzLmdldFNlc3Npb25JZEZyb21TdG9yYWdlKCk7XHJcbiAgICBsZXQgYmVTZXNzaW9uSWQkOiBPYnNlcnZhYmxlPHN0cmluZz47XHJcbiAgICBpZiAoYmVTZXNzaW9uSWQpIHtcclxuICAgICAgYmVTZXNzaW9uSWQkID0gIG9mKGJlU2Vzc2lvbklkKTtcclxuICAgICAgdGhpcy5zZXRCZXNlc3Npb25FeGlzdGVkKHRydWUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYmVTZXNzaW9uSWQkID0gdGhpcy5jcmVhdGVTZXNzaW9uKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcmVzdWx0JCA9IHRoaXMuY2xvc2VPbGRTZXNzaW9uKCkucGlwZShcclxuICAgICAgc3dpdGNoTWFwKCgpID0+IHtcclxuICAgICAgICByZXR1cm4gYmVTZXNzaW9uSWQkO1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0JDtcclxuXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDorr7nva5CZVNlc3Npb25JZFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRTZXNzaW9uSWQoc2Vzc2lvbklkOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIGNvbnN0IHNlc3Npb25LZXkgPSB0aGlzLmdldFNlc3Npb25TdG9yYWdlS2V5KCk7XHJcbiAgICB0aGlzLnN0b3JhZ2VTdHJhdGVneS5zZXRJdGVtKHNlc3Npb25LZXksIHNlc3Npb25JZCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmuIXnqbpCZVNlc3Npb25JZFxyXG4gICAqL1xyXG4gIHB1YmxpYyBjbGVhclNlc3Npb25JZCgpIHtcclxuICAgIGlmIChCZWZFbnZVdGlsLmlzSW5GcmFtZXdvcmsoKSA9PT0gdHJ1ZSkge1xyXG4gICAgICB0aGlzLnN0b3JhZ2VTdHJhdGVneS5yZW1vdmVJdGVtc0J5U2NvcGUodGhpcy5mcm1TZXNzaW9uSWQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3Qgc2Vzc2lvbktleSA9IHRoaXMuZ2V0U2Vzc2lvblN0b3JhZ2VLZXkoKTtcclxuICAgICAgdGhpcy5vbGRCZVNlc3Npb25JZCA9IHRoaXMuZ2V0U2Vzc2lvbklkRnJvbVN0b3JhZ2UoKTtcclxuICAgICAgdGhpcy5zdG9yYWdlU3RyYXRlZ3kucmVtb3ZlSXRlbShzZXNzaW9uS2V5KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaJqeWxlUJlU2Vzc2lvbklk55u45YWz5aS05L+h5oGvXHJcbiAgICovXHJcbiAgcHVibGljIGhhbmRsZVJlcXVlc3RIZWFkZXJzKGhlYWRlcnM6IEh0dHBIZWFkZXJzKTogSHR0cEhlYWRlcnMge1xyXG4gICAgY29uc3QgZnJtU2Vzc2lvbklkID0gdGhpcy5nZXRGcmFtZXdvcmtTZXNzaW9uSWQoKTtcclxuICAgIGNvbnN0IGJlU2Vzc2lvbklkID0gdGhpcy5nZXRTZXNzaW9uSWRGcm9tU3RvcmFnZSgpO1xyXG5cclxuICAgIGlmIChmcm1TZXNzaW9uSWQpIHtcclxuICAgICAgaGVhZGVycyA9IEJlZkh0dHBVdGlsLmFwcGVuZENhZlJ1bnRpbWVDb21tb25WYXJpYWJsZShoZWFkZXJzLCBmcm1TZXNzaW9uSWQpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChiZVNlc3Npb25JZCkge1xyXG4gICAgICBoZWFkZXJzID0gQmVmSHR0cFV0aWwuYXBwZW5kQ2FmUnVudGltZUNvbnRleHQoaGVhZGVycywgYmVTZXNzaW9uSWQpO1xyXG4gICAgICBoZWFkZXJzID0gQmVmSHR0cFV0aWwuYXBwZW5kU2Vzc2lvbklkKGhlYWRlcnMsIGJlU2Vzc2lvbklkKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gaGVhZGVycztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWkhOeQhuacjeWKoeWZqOerr+i/lOWbnueahGhlYWRlcnNcclxuICAgKi9cclxuICBwdWJsaWMgaGFuZGxlUmVwb25zZUhlYWRlcnMoaGVhZGVyczogYW55KTogdm9pZCB7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5bmn5DkuKpSZXBvc2l0b3J55a+55bqU55qEQmVTZXNzaW9u55qE5ZSv5LiAa2V5XHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIGdldFNlc3Npb25TdG9yYWdlS2V5KCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gYCR7dGhpcy5mcm1TZXNzaW9uSWR9XyR7dGhpcy5iZUJhc2VVcmx9YDtcclxuICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBCZWZTZXBhcmF0ZWRTZXNzaW9uSGFuZGxpbmdTdHJhdGVneSB9O1xyXG4iXX0=