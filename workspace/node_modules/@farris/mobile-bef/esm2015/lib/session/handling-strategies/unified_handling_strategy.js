/**
 * @fileoverview added by tsickle
 * Generated from: lib/session/handling-strategies/unified_handling_strategy.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { of } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { BefHttpUtil } from '../../utils/index';
import { BefSessionHandlingStrategy } from './handling_strategy';
/**
 * 统一的Session处理策略
 * \@todo
 * 1、目前Session其实还是隔离的，因为使用了beBaseUrl做了缓存；
 * 2、将来框架token问题解决了之后，使用token或者表单基url做缓存key；
 * 3、基于2缓存之后，如何closeSession，成为问题，除非appAcontext是一颗树，只有根AppContext初始化的时候，才去closeSession。
 */
class BefUnifiedSessionHandlingStrategy extends BefSessionHandlingStrategy {
    /**
     * 构造函数
     * @param {?} storageStrategy
     * @param {?} frmSessionService
     * @param {?} httpClient
     * @param {?} beBaseUrl
     */
    constructor(storageStrategy, frmSessionService, httpClient, beBaseUrl) {
        super(storageStrategy, frmSessionService, httpClient, beBaseUrl);
        this.beCloseSessionUrl = `${beBaseUrl}/service/closesession`;
    }
    /**
     * 获取BeSession
     * @return {?}
     */
    getSessionId() {
        /** @type {?} */
        const sessionKey = this.getSessionStorageKey();
        /** @type {?} */
        const sessionId = this.storageStrategy.getItem(sessionKey);
        /** @type {?} */
        const beSessionId$ = of(sessionId);
        /** @type {?} */
        const result$ = this.closeOldSession().pipe(switchMap((/**
         * @return {?}
         */
        () => {
            return beSessionId$;
        })));
        return result$;
    }
    /**
     * 设置BeSessionId
     * @param {?} sessionId
     * @return {?}
     */
    setSessionId(sessionId) {
        /** @type {?} */
        const sessionKey = this.getSessionStorageKey();
        this.storageStrategy.setItem(sessionKey, sessionId);
    }
    /**
     * 清空Sessionid
     * @return {?}
     */
    clearSessionId() {
        /** @type {?} */
        const sessionKey = this.getSessionStorageKey();
        this.oldBeSessionId = this.getSessionIdFromStorage();
        this.storageStrategy.removeItem(sessionKey);
    }
    /**
     * 扩展Session相关头信息
     * @param {?} headers
     * @return {?}
     */
    handleRequestHeaders(headers) {
        /** @type {?} */
        const frmSessionId = this.getFrameworkSessionId();
        if (frmSessionId) {
            headers = BefHttpUtil.appendCafRuntimeCommonVariable(headers, frmSessionId);
        }
        /** @type {?} */
        const beSessionId = this.getSessionIdFromStorage();
        if (beSessionId) {
            headers = BefHttpUtil.appendCafRuntimeContext(headers, beSessionId);
        }
        return headers;
    }
    /**
     * 处理服务器端返回的headers
     * @param {?} headers
     * @return {?}
     */
    handleReponseHeaders(headers) {
        /** @type {?} */
        const beSessionId = headers['befsessionid'];
        /** @type {?} */
        const oldBeSessionId = this.getSessionId();
        if (beSessionId && beSessionId !== oldBeSessionId) {
            this.setSessionId(beSessionId);
        }
    }
    /**
     * 获取某个Repository对应的BeSession的唯一key
     * @protected
     * @return {?}
     */
    getSessionStorageKey() {
        return this.beBaseUrl;
    }
}
export { BefUnifiedSessionHandlingStrategy };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pZmllZF9oYW5kbGluZ19zdHJhdGVneS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvbW9iaWxlLWJlZi8iLCJzb3VyY2VzIjpbImxpYi9zZXNzaW9uL2hhbmRsaW5nLXN0cmF0ZWdpZXMvdW5pZmllZF9oYW5kbGluZ19zdHJhdGVneS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBSTNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVoRCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7Ozs7Ozs7QUFVakUsTUFBTSxpQ0FBa0MsU0FBUSwwQkFBMEI7Ozs7Ozs7O0lBS3hFLFlBQ0UsZUFBeUMsRUFDekMsaUJBQTBDLEVBQzFDLFVBQXNCLEVBQ3RCLFNBQWlCO1FBRWpCLEtBQUssQ0FBQyxlQUFlLEVBQUUsaUJBQWlCLEVBQUUsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ2pFLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxHQUFHLFNBQVMsdUJBQXVCLENBQUM7SUFDL0QsQ0FBQzs7Ozs7SUFLTSxZQUFZOztjQUNYLFVBQVUsR0FBRyxJQUFJLENBQUMsb0JBQW9CLEVBQUU7O2NBQ3hDLFNBQVMsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7O2NBQ3BELFlBQVksR0FBSSxFQUFFLENBQUMsU0FBUyxDQUFDOztjQUU3QixPQUFPLEdBQUcsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDLElBQUksQ0FDekMsU0FBUzs7O1FBQUMsR0FBRyxFQUFFO1lBQ2IsT0FBTyxZQUFZLENBQUM7UUFDdEIsQ0FBQyxFQUFDLENBQ0g7UUFFRCxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDOzs7Ozs7SUFLTSxZQUFZLENBQUMsU0FBaUI7O2NBQzdCLFVBQVUsR0FBRyxJQUFJLENBQUMsb0JBQW9CLEVBQUU7UUFDOUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3RELENBQUM7Ozs7O0lBS00sY0FBYzs7Y0FDYixVQUFVLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixFQUFFO1FBQzlDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixFQUFFLENBQUM7UUFDckQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDOUMsQ0FBQzs7Ozs7O0lBS00sb0JBQW9CLENBQUMsT0FBWTs7Y0FDaEMsWUFBWSxHQUFHLElBQUksQ0FBQyxxQkFBcUIsRUFBRTtRQUNqRCxJQUFJLFlBQVksRUFBRTtZQUNoQixPQUFPLEdBQUcsV0FBVyxDQUFDLDhCQUE4QixDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztTQUM3RTs7Y0FFSyxXQUFXLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixFQUFFO1FBQ2xELElBQUksV0FBVyxFQUFFO1lBQ2YsT0FBTyxHQUFHLFdBQVcsQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUM7U0FDckU7UUFDRCxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDOzs7Ozs7SUFLTSxvQkFBb0IsQ0FBQyxPQUFZOztjQUNoQyxXQUFXLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQzs7Y0FDckMsY0FBYyxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDMUMsSUFBSSxXQUFXLElBQUksV0FBVyxLQUFLLGNBQWMsRUFBRTtZQUNqRCxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ2hDO0lBQ0gsQ0FBQzs7Ozs7O0lBS1Msb0JBQW9CO1FBQzVCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDO0NBRUY7QUFFRCxPQUFPLEVBQUUsaUNBQWlDLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAZmFycmlzL21vYmlsZS1kZXZraXQnO1xyXG5pbXBvcnQgeyBGcmFtZXdvcmtTZXNzaW9uU2VydmljZSB9IGZyb20gJy4uLy4uL2ZyYW1ld29ya19zZXNzaW9uX3NlcnZpY2UnO1xyXG5pbXBvcnQgeyBCZWZIdHRwVXRpbCB9IGZyb20gJy4uLy4uL3V0aWxzL2luZGV4JztcclxuaW1wb3J0IHsgQmVTZXNzaW9uU3RvcmFnZVN0cmF0ZWd5IH0gZnJvbSAnLi4vc3RvcmFnZS1zdHJhdGVnaWVzL2luZGV4JztcclxuaW1wb3J0IHsgQmVmU2Vzc2lvbkhhbmRsaW5nU3RyYXRlZ3kgfSBmcm9tICcuL2hhbmRsaW5nX3N0cmF0ZWd5JztcclxuXHJcblxyXG4vKipcclxuICog57uf5LiA55qEU2Vzc2lvbuWkhOeQhuetlueVpVxyXG4gKiBAdG9kb1xyXG4gKiAx44CB55uu5YmNU2Vzc2lvbuWFtuWunui/mOaYr+malOemu+eahO+8jOWboOS4uuS9v+eUqOS6hmJlQmFzZVVybOWBmuS6hue8k+WtmO+8m1xyXG4gKiAy44CB5bCG5p2l5qGG5p62dG9rZW7pl67popjop6PlhrPkuobkuYvlkI7vvIzkvb/nlKh0b2tlbuaIluiAheihqOWNleWfunVybOWBmue8k+WtmGtlee+8m1xyXG4gKiAz44CB5Z+65LqOMue8k+WtmOS5i+WQju+8jOWmguS9lWNsb3NlU2Vzc2lvbu+8jOaIkOS4uumXrumimO+8jOmZpOmdnmFwcEFjb250ZXh05piv5LiA6aKX5qCR77yM5Y+q5pyJ5qC5QXBwQ29udGV4dOWIneWni+WMlueahOaXtuWAme+8jOaJjeWOu2Nsb3NlU2Vzc2lvbuOAglxyXG4gKi9cclxuY2xhc3MgQmVmVW5pZmllZFNlc3Npb25IYW5kbGluZ1N0cmF0ZWd5IGV4dGVuZHMgQmVmU2Vzc2lvbkhhbmRsaW5nU3RyYXRlZ3kge1xyXG5cclxuICAvKipcclxuICAgKiDmnoTpgKDlh73mlbBcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHN0b3JhZ2VTdHJhdGVneTogQmVTZXNzaW9uU3RvcmFnZVN0cmF0ZWd5LFxyXG4gICAgZnJtU2Vzc2lvblNlcnZpY2U6IEZyYW1ld29ya1Nlc3Npb25TZXJ2aWNlLFxyXG4gICAgaHR0cENsaWVudDogSHR0cENsaWVudCxcclxuICAgIGJlQmFzZVVybDogc3RyaW5nXHJcbiAgKSB7XHJcbiAgICBzdXBlcihzdG9yYWdlU3RyYXRlZ3ksIGZybVNlc3Npb25TZXJ2aWNlLCBodHRwQ2xpZW50LCBiZUJhc2VVcmwpO1xyXG4gICAgdGhpcy5iZUNsb3NlU2Vzc2lvblVybCA9IGAke2JlQmFzZVVybH0vc2VydmljZS9jbG9zZXNlc3Npb25gO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+WQmVTZXNzaW9uXHJcbiAgICovXHJcbiAgcHVibGljIGdldFNlc3Npb25JZCgpOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xyXG4gICAgY29uc3Qgc2Vzc2lvbktleSA9IHRoaXMuZ2V0U2Vzc2lvblN0b3JhZ2VLZXkoKTtcclxuICAgIGNvbnN0IHNlc3Npb25JZCA9IHRoaXMuc3RvcmFnZVN0cmF0ZWd5LmdldEl0ZW0oc2Vzc2lvbktleSk7XHJcbiAgICBjb25zdCBiZVNlc3Npb25JZCQgPSAgb2Yoc2Vzc2lvbklkKTtcclxuXHJcbiAgICBjb25zdCByZXN1bHQkID0gdGhpcy5jbG9zZU9sZFNlc3Npb24oKS5waXBlKFxyXG4gICAgICBzd2l0Y2hNYXAoKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBiZVNlc3Npb25JZCQ7XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiByZXN1bHQkO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6K6+572uQmVTZXNzaW9uSWRcclxuICAgKi9cclxuICBwdWJsaWMgc2V0U2Vzc2lvbklkKHNlc3Npb25JZDogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBjb25zdCBzZXNzaW9uS2V5ID0gdGhpcy5nZXRTZXNzaW9uU3RvcmFnZUtleSgpO1xyXG4gICAgdGhpcy5zdG9yYWdlU3RyYXRlZ3kuc2V0SXRlbShzZXNzaW9uS2V5LCBzZXNzaW9uSWQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5riF56m6U2Vzc2lvbmlkXHJcbiAgICovXHJcbiAgcHVibGljIGNsZWFyU2Vzc2lvbklkKCkge1xyXG4gICAgY29uc3Qgc2Vzc2lvbktleSA9IHRoaXMuZ2V0U2Vzc2lvblN0b3JhZ2VLZXkoKTtcclxuICAgIHRoaXMub2xkQmVTZXNzaW9uSWQgPSB0aGlzLmdldFNlc3Npb25JZEZyb21TdG9yYWdlKCk7XHJcbiAgICB0aGlzLnN0b3JhZ2VTdHJhdGVneS5yZW1vdmVJdGVtKHNlc3Npb25LZXkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5omp5bGVU2Vzc2lvbuebuOWFs+WktOS/oeaBr1xyXG4gICAqL1xyXG4gIHB1YmxpYyBoYW5kbGVSZXF1ZXN0SGVhZGVycyhoZWFkZXJzOiBhbnkpOiBhbnkge1xyXG4gICAgY29uc3QgZnJtU2Vzc2lvbklkID0gdGhpcy5nZXRGcmFtZXdvcmtTZXNzaW9uSWQoKTtcclxuICAgIGlmIChmcm1TZXNzaW9uSWQpIHtcclxuICAgICAgaGVhZGVycyA9IEJlZkh0dHBVdGlsLmFwcGVuZENhZlJ1bnRpbWVDb21tb25WYXJpYWJsZShoZWFkZXJzLCBmcm1TZXNzaW9uSWQpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGJlU2Vzc2lvbklkID0gdGhpcy5nZXRTZXNzaW9uSWRGcm9tU3RvcmFnZSgpO1xyXG4gICAgaWYgKGJlU2Vzc2lvbklkKSB7XHJcbiAgICAgIGhlYWRlcnMgPSBCZWZIdHRwVXRpbC5hcHBlbmRDYWZSdW50aW1lQ29udGV4dChoZWFkZXJzLCBiZVNlc3Npb25JZCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaGVhZGVycztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWkhOeQhuacjeWKoeWZqOerr+i/lOWbnueahGhlYWRlcnNcclxuICAgKi9cclxuICBwdWJsaWMgaGFuZGxlUmVwb25zZUhlYWRlcnMoaGVhZGVyczogYW55KTogdm9pZCB7XHJcbiAgICBjb25zdCBiZVNlc3Npb25JZCA9IGhlYWRlcnNbJ2JlZnNlc3Npb25pZCddO1xyXG4gICAgY29uc3Qgb2xkQmVTZXNzaW9uSWQgPSB0aGlzLmdldFNlc3Npb25JZCgpO1xyXG4gICAgaWYgKGJlU2Vzc2lvbklkICYmIGJlU2Vzc2lvbklkICE9PSBvbGRCZVNlc3Npb25JZCkge1xyXG4gICAgICB0aGlzLnNldFNlc3Npb25JZChiZVNlc3Npb25JZCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5bmn5DkuKpSZXBvc2l0b3J55a+55bqU55qEQmVTZXNzaW9u55qE5ZSv5LiAa2V5XHJcbiAgICovXHJcbiAgcHJvdGVjdGVkIGdldFNlc3Npb25TdG9yYWdlS2V5KCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5iZUJhc2VVcmw7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgQmVmVW5pZmllZFNlc3Npb25IYW5kbGluZ1N0cmF0ZWd5IH07XHJcbiJdfQ==