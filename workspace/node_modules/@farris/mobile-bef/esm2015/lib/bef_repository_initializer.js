/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_repository_initializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { MetadataUtil, AppContext, InjectFlags, HttpClient } from '@farris/mobile-devkit';
import { VARIABLE_PROP_META } from './decorators';
import { BefEntityManager } from './bef_entity_manager';
import { BefVariableManager } from './bef_variable_manager';
import { BefSessionHandlingStrategyFactory, BefSessionService } from './session/index';
import { BefDataService } from './bef_data_service';
import { FrameworkSessionService } from './framework_session_service';
import { BE_SESSION_HANDLING_STRATEGY_TOKEN } from './tokens';
import { BefProxyExtend } from './bef_proxy_extend';
/**
 * BefRepository初始化器
 * \@summary
 * 为了抽离这部分路径，强制对外暴露了Repository的相关属性，待优化。
 */
class BefRepositoryInitializer {
    /**
     * 注入器
     * @private
     * @return {?}
     */
    get injector() {
        return this.repository.getInjector();
    }
    /**
     * 构造函数
     * @param {?} repository
     */
    constructor(repository) {
        this.repository = repository;
    }
    /**
     * 初始化
     * @return {?}
     */
    init() {
        this.initAppContext();
        this.initEntityManager();
        this.initVariableManager();
        this.initApiProxy();
        this.initSessionService();
        this.initDataService();
    }
    /**
     * 初始化应用上下文
     * @private
     * @return {?}
     */
    initAppContext() {
        this.repository.appContext = this.injector.get(AppContext);
    }
    /**
     * 初始化EntityManager
     * @private
     * @return {?}
     */
    initEntityManager() {
        this.repository.entityManager = new BefEntityManager(this.repository.entityCollection);
    }
    /**
     * 初始化VariableManager
     * @private
     * @return {?}
     */
    initVariableManager() {
        /** @type {?} */
        const ngVariables = MetadataUtil.getPropsMetadatasByName(this.repository.constructor, VARIABLE_PROP_META);
        this.repository.variableManager = new BefVariableManager(ngVariables);
    }
    /**
     * 初始化Proxy
     * @private
     * @return {?}
     */
    initApiProxy() {
        this.repository.apiProxy = this.injector.get(this.repository.apiProxyType);
        /** @type {?} */
        const apiProxyExtend = new BefProxyExtend(this.repository);
        this.repository.apiProxy.setProxyExtend(apiProxyExtend);
    }
    /**
     * 初始化SessionService
     * @private
     * @return {?}
     */
    initSessionService() {
        /** @type {?} */
        let handlingStrategyName = this.injector.get(BE_SESSION_HANDLING_STRATEGY_TOKEN, null, InjectFlags.Optional);
        handlingStrategyName = handlingStrategyName || 'SeparatedSession';
        /** @type {?} */
        const frmSessionService = this.injector.get(FrameworkSessionService);
        /** @type {?} */
        const httpClient = this.injector.get(HttpClient);
        /** @type {?} */
        const baseUrl = `${this.repository.apiProxy.baseUrl}`;
        /** @type {?} */
        const sessionHandlingStrategyFactory = new BefSessionHandlingStrategyFactory();
        /** @type {?} */
        const sessionHandlingStrategy = sessionHandlingStrategyFactory.create(handlingStrategyName, frmSessionService, baseUrl, httpClient);
        this.repository.sessionService = new BefSessionService(sessionHandlingStrategy);
    }
    /**
     * 初始化DataService
     * @private
     * @return {?}
     */
    initDataService() {
        this.repository.dataService = new BefDataService(this.repository);
    }
}
if (false) {
    /**
     * BefRepository实例
     * @type {?}
     * @private
     */
    BefRepositoryInitializer.prototype.repository;
}
export { BefRepositoryInitializer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVmX3JlcG9zaXRvcnlfaW5pdGlhbGl6ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1iZWYvIiwic291cmNlcyI6WyJsaWIvYmVmX3JlcG9zaXRvcnlfaW5pdGlhbGl6ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsWUFBWSxFQUFVLFVBQVUsRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFbEcsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ2xELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxpQ0FBaUMsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsa0NBQWtDLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFOUQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDOzs7Ozs7QUFPcEQsTUFBTSx3QkFBd0I7Ozs7OztJQVU1QixJQUFZLFFBQVE7UUFDbEIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3ZDLENBQUM7Ozs7O0lBS0QsWUFBWSxVQUFpQztRQUMzQyxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztJQUMvQixDQUFDOzs7OztJQUtNLElBQUk7UUFDVCxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdEIsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDekIsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDM0IsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBQzFCLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN6QixDQUFDOzs7Ozs7SUFLTyxjQUFjO1FBQ3BCLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFhLFVBQVUsQ0FBQyxDQUFDO0lBQ3pFLENBQUM7Ozs7OztJQUtPLGlCQUFpQjtRQUN2QixJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsR0FBRyxJQUFJLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUN6RixDQUFDOzs7Ozs7SUFLTyxtQkFBbUI7O2NBQ25CLFdBQVcsR0FBRyxZQUFZLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsa0JBQWtCLENBQUM7UUFDekcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxlQUFlLEdBQUcsSUFBSSxrQkFBa0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN4RSxDQUFDOzs7Ozs7SUFLTyxZQUFZO1FBQ2xCLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUM7O2NBQ3JFLGNBQWMsR0FBRyxJQUFJLGNBQWMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQzFELElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUMxRCxDQUFDOzs7Ozs7SUFLTyxrQkFBa0I7O1lBQ3BCLG9CQUFvQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFTLGtDQUFrQyxFQUFFLElBQUksRUFBRSxXQUFXLENBQUMsUUFBUSxDQUFDO1FBQ3BILG9CQUFvQixHQUFHLG9CQUFvQixJQUFJLGtCQUFrQixDQUFDOztjQUM1RCxpQkFBaUIsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBMEIsdUJBQXVCLENBQUM7O2NBQ3ZGLFVBQVUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBYSxVQUFVLENBQUM7O2NBQ3RELE9BQU8sR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRTs7Y0FDL0MsOEJBQThCLEdBQUcsSUFBSSxpQ0FBaUMsRUFBRTs7Y0FDeEUsdUJBQXVCLEdBQUcsOEJBQThCLENBQUMsTUFBTSxDQUFDLG9CQUFvQixFQUFFLGlCQUFpQixFQUFFLE9BQU8sRUFBRSxVQUFVLENBQUM7UUFDbkksSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLEdBQUcsSUFBSSxpQkFBaUIsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0lBQ2xGLENBQUM7Ozs7OztJQUtPLGVBQWU7UUFDckIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEdBQUcsSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7Q0FDRjs7Ozs7OztJQS9FQyw4Q0FBMEM7O0FBaUY1QyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5pbXBvcnQgeyBNZXRhZGF0YVV0aWwsIEVudGl0eSwgQXBwQ29udGV4dCwgSW5qZWN0RmxhZ3MsIEh0dHBDbGllbnQgfSBmcm9tICdAZmFycmlzL21vYmlsZS1kZXZraXQnO1xyXG5cclxuaW1wb3J0IHsgVkFSSUFCTEVfUFJPUF9NRVRBIH0gZnJvbSAnLi9kZWNvcmF0b3JzJztcclxuaW1wb3J0IHsgQmVmRW50aXR5TWFuYWdlciB9IGZyb20gJy4vYmVmX2VudGl0eV9tYW5hZ2VyJztcclxuaW1wb3J0IHsgQmVmVmFyaWFibGVNYW5hZ2VyIH0gZnJvbSAnLi9iZWZfdmFyaWFibGVfbWFuYWdlcic7XHJcbmltcG9ydCB7IEJlZlNlc3Npb25IYW5kbGluZ1N0cmF0ZWd5RmFjdG9yeSwgQmVmU2Vzc2lvblNlcnZpY2UgfSBmcm9tICcuL3Nlc3Npb24vaW5kZXgnO1xyXG5pbXBvcnQgeyBCZWZEYXRhU2VydmljZSB9IGZyb20gJy4vYmVmX2RhdGFfc2VydmljZSc7XHJcbmltcG9ydCB7IEZyYW1ld29ya1Nlc3Npb25TZXJ2aWNlIH0gZnJvbSAnLi9mcmFtZXdvcmtfc2Vzc2lvbl9zZXJ2aWNlJztcclxuaW1wb3J0IHsgQkVfU0VTU0lPTl9IQU5ETElOR19TVFJBVEVHWV9UT0tFTiB9IGZyb20gJy4vdG9rZW5zJztcclxuaW1wb3J0IHsgQmVmUmVwb3NpdG9yeSB9IGZyb20gJy4vYmVmX3JlcG9zaXRvcnknO1xyXG5pbXBvcnQgeyBCZWZQcm94eUV4dGVuZCB9IGZyb20gJy4vYmVmX3Byb3h5X2V4dGVuZCc7XHJcblxyXG4vKipcclxuICogQmVmUmVwb3NpdG9yeeWIneWni+WMluWZqFxyXG4gKiBAc3VtbWFyeVxyXG4gKiDkuLrkuobmir3nprvov5npg6jliIbot6/lvoTvvIzlvLrliLblr7nlpJbmmrTpnLLkuoZSZXBvc2l0b3J555qE55u45YWz5bGe5oCn77yM5b6F5LyY5YyW44CCXHJcbiAqL1xyXG5jbGFzcyBCZWZSZXBvc2l0b3J5SW5pdGlhbGl6ZXIge1xyXG5cclxuICAvKipcclxuICAgKiBCZWZSZXBvc2l0b3J55a6e5L6LXHJcbiAgICovXHJcbiAgcHJpdmF0ZSByZXBvc2l0b3J5OiBCZWZSZXBvc2l0b3J5PEVudGl0eT47XHJcblxyXG4gIC8qKlxyXG4gICAqIOazqOWFpeWZqFxyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0IGluamVjdG9yKCkge1xyXG4gICAgcmV0dXJuIHRoaXMucmVwb3NpdG9yeS5nZXRJbmplY3RvcigpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5p6E6YCg5Ye95pWwXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IocmVwb3NpdG9yeTogQmVmUmVwb3NpdG9yeTxFbnRpdHk+KSB7XHJcbiAgICB0aGlzLnJlcG9zaXRvcnkgPSByZXBvc2l0b3J5O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Yid5aeL5YyWXHJcbiAgICovXHJcbiAgcHVibGljIGluaXQoKSB7XHJcbiAgICB0aGlzLmluaXRBcHBDb250ZXh0KCk7XHJcbiAgICB0aGlzLmluaXRFbnRpdHlNYW5hZ2VyKCk7XHJcbiAgICB0aGlzLmluaXRWYXJpYWJsZU1hbmFnZXIoKTtcclxuICAgIHRoaXMuaW5pdEFwaVByb3h5KCk7XHJcbiAgICB0aGlzLmluaXRTZXNzaW9uU2VydmljZSgpO1xyXG4gICAgdGhpcy5pbml0RGF0YVNlcnZpY2UoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWIneWni+WMluW6lOeUqOS4iuS4i+aWh1xyXG4gICAqL1xyXG4gIHByaXZhdGUgaW5pdEFwcENvbnRleHQoKSB7XHJcbiAgICB0aGlzLnJlcG9zaXRvcnkuYXBwQ29udGV4dCA9IHRoaXMuaW5qZWN0b3IuZ2V0PEFwcENvbnRleHQ+KEFwcENvbnRleHQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Yid5aeL5YyWRW50aXR5TWFuYWdlclxyXG4gICAqL1xyXG4gIHByaXZhdGUgaW5pdEVudGl0eU1hbmFnZXIoKSB7XHJcbiAgICB0aGlzLnJlcG9zaXRvcnkuZW50aXR5TWFuYWdlciA9IG5ldyBCZWZFbnRpdHlNYW5hZ2VyKHRoaXMucmVwb3NpdG9yeS5lbnRpdHlDb2xsZWN0aW9uKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWIneWni+WMllZhcmlhYmxlTWFuYWdlclxyXG4gICAqL1xyXG4gIHByaXZhdGUgaW5pdFZhcmlhYmxlTWFuYWdlcigpIHtcclxuICAgIGNvbnN0IG5nVmFyaWFibGVzID0gTWV0YWRhdGFVdGlsLmdldFByb3BzTWV0YWRhdGFzQnlOYW1lKHRoaXMucmVwb3NpdG9yeS5jb25zdHJ1Y3RvciwgVkFSSUFCTEVfUFJPUF9NRVRBKTtcclxuICAgIHRoaXMucmVwb3NpdG9yeS52YXJpYWJsZU1hbmFnZXIgPSBuZXcgQmVmVmFyaWFibGVNYW5hZ2VyKG5nVmFyaWFibGVzKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWIneWni+WMllByb3h5XHJcbiAgICovXHJcbiAgcHJpdmF0ZSBpbml0QXBpUHJveHkoKSB7XHJcbiAgICB0aGlzLnJlcG9zaXRvcnkuYXBpUHJveHkgPSB0aGlzLmluamVjdG9yLmdldCh0aGlzLnJlcG9zaXRvcnkuYXBpUHJveHlUeXBlKTtcclxuICAgIGNvbnN0IGFwaVByb3h5RXh0ZW5kID0gbmV3IEJlZlByb3h5RXh0ZW5kKHRoaXMucmVwb3NpdG9yeSk7XHJcbiAgICB0aGlzLnJlcG9zaXRvcnkuYXBpUHJveHkuc2V0UHJveHlFeHRlbmQoYXBpUHJveHlFeHRlbmQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Yid5aeL5YyWU2Vzc2lvblNlcnZpY2VcclxuICAgKi9cclxuICBwcml2YXRlIGluaXRTZXNzaW9uU2VydmljZSgpIHtcclxuICAgIGxldCBoYW5kbGluZ1N0cmF0ZWd5TmFtZSA9IHRoaXMuaW5qZWN0b3IuZ2V0PHN0cmluZz4oQkVfU0VTU0lPTl9IQU5ETElOR19TVFJBVEVHWV9UT0tFTiwgbnVsbCwgSW5qZWN0RmxhZ3MuT3B0aW9uYWwpO1xyXG4gICAgaGFuZGxpbmdTdHJhdGVneU5hbWUgPSBoYW5kbGluZ1N0cmF0ZWd5TmFtZSB8fCAnU2VwYXJhdGVkU2Vzc2lvbic7XHJcbiAgICBjb25zdCBmcm1TZXNzaW9uU2VydmljZSA9IHRoaXMuaW5qZWN0b3IuZ2V0PEZyYW1ld29ya1Nlc3Npb25TZXJ2aWNlPihGcmFtZXdvcmtTZXNzaW9uU2VydmljZSk7XHJcbiAgICBjb25zdCBodHRwQ2xpZW50ID0gdGhpcy5pbmplY3Rvci5nZXQ8SHR0cENsaWVudD4oSHR0cENsaWVudCk7XHJcbiAgICBjb25zdCBiYXNlVXJsID0gYCR7dGhpcy5yZXBvc2l0b3J5LmFwaVByb3h5LmJhc2VVcmx9YDtcclxuICAgIGNvbnN0IHNlc3Npb25IYW5kbGluZ1N0cmF0ZWd5RmFjdG9yeSA9IG5ldyBCZWZTZXNzaW9uSGFuZGxpbmdTdHJhdGVneUZhY3RvcnkoKTtcclxuICAgIGNvbnN0IHNlc3Npb25IYW5kbGluZ1N0cmF0ZWd5ID0gc2Vzc2lvbkhhbmRsaW5nU3RyYXRlZ3lGYWN0b3J5LmNyZWF0ZShoYW5kbGluZ1N0cmF0ZWd5TmFtZSwgZnJtU2Vzc2lvblNlcnZpY2UsIGJhc2VVcmwsIGh0dHBDbGllbnQpO1xyXG4gICAgdGhpcy5yZXBvc2l0b3J5LnNlc3Npb25TZXJ2aWNlID0gbmV3IEJlZlNlc3Npb25TZXJ2aWNlKHNlc3Npb25IYW5kbGluZ1N0cmF0ZWd5KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWIneWni+WMlkRhdGFTZXJ2aWNlXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBpbml0RGF0YVNlcnZpY2UoKSB7XHJcbiAgICB0aGlzLnJlcG9zaXRvcnkuZGF0YVNlcnZpY2UgPSBuZXcgQmVmRGF0YVNlcnZpY2UodGhpcy5yZXBvc2l0b3J5KTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IEJlZlJlcG9zaXRvcnlJbml0aWFsaXplciB9O1xyXG4iXX0=