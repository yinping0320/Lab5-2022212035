{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@farris/mobile-bef/lib/types.ts","ng://@farris/mobile-bef/lib/tokens.ts","ng://@farris/mobile-bef/lib/utils/bef_http.util.ts","ng://@farris/mobile-bef/lib/utils/request_info.util.ts","ng://@farris/mobile-bef/lib/utils/response_info.util.ts","ng://@farris/mobile-bef/lib/utils/bef_change_util.ts","ng://@farris/mobile-bef/lib/utils/bef_data_path_util.ts","ng://@farris/mobile-bef/lib/utils/bef_proxy_util.ts","ng://@farris/mobile-bef/lib/utils/bef_repository_util.ts","ng://@farris/mobile-bef/lib/utils/entity_util.ts","ng://@farris/mobile-bef/lib/utils/bef_env_util.ts","ng://@farris/mobile-bef/lib/bef_change_builder.ts","ng://@farris/mobile-bef/lib/bef_change_handler.ts","ng://@farris/mobile-bef/lib/session/handling-strategies/handling_strategy.ts","ng://@farris/mobile-bef/lib/session/handling-strategies/separated_handling_strategy.ts","ng://@farris/mobile-bef/lib/session/handling-strategies/unified_handling_strategy.ts","ng://@farris/mobile-bef/lib/session/storage-strategies/session_storage_strategy.ts","ng://@farris/mobile-bef/lib/session/handling-strategies/handling_strategy_factory.ts","ng://@farris/mobile-bef/lib/session/bef_session_service.ts","ng://@farris/mobile-bef/lib/bef_proxy.ts","ng://@farris/mobile-bef/lib/decorators.ts","ng://@farris/mobile-bef/lib/bef_entity_manager.ts","ng://@farris/mobile-bef/lib/bef_variable_manager.ts","ng://@farris/mobile-bef/lib/bef_data_service.ts","ng://@farris/mobile-bef/lib/framework_session_service.ts","ng://@farris/mobile-bef/lib/bef_proxy_extend.ts","ng://@farris/mobile-bef/lib/bef_repository_initializer.ts","ng://@farris/mobile-bef/lib/bef_repository.ts","ng://@farris/mobile-bef/lib/bef-lookup-data.service.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","__read","n","r","e","ar","push","error","ChangeDetailType","Added","Modify","Deleted","BE_SERVER_URI_TOKEN","InjectionToken","BE_SESSION_HANDLING_STRATEGY_TOKEN","BE_ERROR_HANDLER__TOKEN","BefHttpUtil","appendSessionId","headers","sessionId","HttpUtil","appendHeader","appendCafRuntimeCommonVariable","commonVariable","appendCafRuntimeContext","context","appendContextType","contentType","RequestInfoUtil","buildRequestInfo","repository","dataChange","entityManager","buildAllEntityChangeDetails","variableChange","variableManager","buildChangeDetail","appendRequestInfoToBody","body","requestInfo","keys","assign","ResponseInfoUtil","unWrapResponseInfo","result","returnValue","BefChangeUtil","createEmpty","type","dataId","changeDetail","ChangeType","ChangeInfo","DataId","getChangeInfo","isChangeDetail","indexOf","BefDataPathUtil","convertToPathArray","bindingPath","bindingData","_this","bindingPathArray","BindingPathConverter","toBindingPathArray","pathArray","currentBindingObject","list","currentItem","primaryKeyValue","forEach","propName","propInfo","PropertyUtil","getPropertyByName","properties","BindingPropertyType","List","Error","name","currentBindingList","trimTrailingS","convertToPathUrl","pop","join","convertToObjectCodes","pathLen","objectCodes","convertToDataIdsForUpdate","dataIds","convertToDataIdsForAdd","convertPathToUrl","path","subPaths","split","endsWith","substr","toLowerCase","str","convertPathsToNodeCodes","paths","filter","item","node","convertPathsToIds","id","BefProxyUtil","befRepository","BefRepositoryUtil","isExistUnsaveData","hasUnsavedData","entityCollection","entityArray","toArray","dataChangeHistory","isChanged","changes","EntityUtil","getPropInfo","entityType","targetPropName","propType","propEntityType","propMetadata","ngFieldProperties","FieldMetadataUtil","getNgFields","ngObjectProperties","getNgObjects","ngListProperties","getNgList","ngDynamicProperties","getNgDynamic","getPrimaryKey","primaryNgFiledProp","getPrimaryFieldMetadata","dataField","isObjectProp","isDynamicProp","appendInitialData","entity","initialData","data","parentID","BefEnvUtil","isInFramework","hashString","window","location","hash","BefChangeBuilder","build","modifications","modification","concat","parentChangeDetail","parentEntityType","parentChangeInfo","this_1","_a","ModifyType","ValueChange","changeObject","entityPath","slice","changedEntity","getEntityByPath","toJSON","changeDetails","dataId_1","find","changeDetailItem","createEmptyChangeDetail","BefChangeHandler","handle","handleChangeDetails","entityList","getEntityById","handleChangeDetail","changeInfo","childEntity","primaryKey","childEntityData","load","childChangeDetail","childEntityList","childChangeDetails","EntityCollection","get","BefSessionHandlingStrategy","storageStrategy","frmSessionService","httpClient","beBaseUrl","beSessionExisted","beCreateSessionUrl","beCloseSessionUrl","beSessionExisted$","BehaviorSubject","defineProperty","getCurrentSessionId","getFrameworkSessionId","frmSessionId","getSessionIdFromStorage","sessionStorageKey","getSessionStorageKey","getItem","createSession","requestConfig","responseType","Content-Type","sessionStorage","clear","pipe","switchMap","setItem","post","tap","beSessionId","setSessionId","setBesessionExisted","formToken","subject","Subject","rtf","func","clearState","test","closeOldSession","oldBeSessionId","of","getBeSessionExisted","BefSeparatedSessionHandlingStrategy","_super","tslib_1.__extends","getSessionId","beSessionId$","sessionKey","clearSessionId","removeItemsByScope","removeItem","handleRequestHeaders","handleReponseHeaders","BefUnifiedSessionHandlingStrategy","SessionStorageBeSessionStorageStrategy","beSessionKey","getAllBeSessions","beSessions","setAllBeSessions","beSessionScope","startsWith","beSessionsJson","JSON","parse","beSessionsString","stringify","BefSessionHandlingStrategyFactory","handlingStrategyName","createStorageStrategy","BefSessionService","handlingStrategy","getBeSessionId","setBeSessionId","clearBeSessionId","extendRequestHeaders","handleResponseHeaders","BefProxy","associatedUrlMap","Map","setAssociatedUrl","url","set","setProxyExtend","proxyExtend","query","entityFilter","baseUrl","params","entityFilterString","request","HttpMethods","GET","extendQuery","PUT","retrieve","extendRetrieve","edit","defaultValue","POST","createByPath","fpath","pathUrl","update","PATCH","save","delete","DELETE","extendDelete","deleteAndSave","deletByPath","extendDeletByPath","batchDelete","ids","extendBatchDelete","cancel","method","requestConfigs","ignoreHandlingChanges","extendBody","extendHeaders","observe","map","onResponse","catchError","onError","VariablePropMeta","makePropDecorator","obj","BefEntityManager","changeBuilder","changeHandler","getAllEntities","buildEntityChangeDetailById","handleDataChangeDetails","reset","EntityManager","BefVariableManager","ngVariables","ngVariableMap","lastSyncValuesMap","latestVariableValues","setValue","has","getValue","ngVariable","varName","newValue","oldValue","isValueEqual","appendToChangeInfo","varValue","isUdtVariable","udtVarChangeDetail","srcValue","dstValue","toString","BefDataService","apiProxy","getList","sort","pageSize","pageIndex","buildEntityFilter","setPaginationInfo","pagination","listData","entities","buildEntities","determineIsAppend","addEntities","loadEntities","getById","entityData","buildEntity","editById","entityToUpdate","reloadEntityData","updateById","EMPTY","splice","newEntityData","newEntity","addChange","primaryValue","changeType","DataChangeType","Add","append","addEntity","appendByPath","appendEntityByPath","removeById","ifSave","undefined","applyChangesById","removeEntityById","Delete","removeAndSaveById","removeByIds","applyChangesByIdArray","removeEntities","checkEntityValueExists","primaryValueArray","isExistInTargetArray","removeByPath","removeEntityByPath","updateChangesById","clearEntityChangesById","updateAllChanges","updateResults","updateResult$","zip","apply","arguments","__spread","applyChanges","clearAllEntityChanges","clearEntityChangesByIds","clearByIds","cancelChanges","FilterConditions","SortConditions","IsUsePagination","Pagination","PageIndex","PageSize","PageCount","TotalCount","FrameworkSessionService","getUserSessionId","localStorage","getFuncSessionId","frmMobileService","funcSessionId","latestFuncSessionId","BefProxyExtend","getInjector","response","handleResponseBody","sessionService","responseInfo","innerDataChange","loadingServices","loadingServices_1","tslib_1.__values","loadingServices_1_1","loadingService","hide","exceptionService","injector","show","BefRepositoryInitializer","init","initAppContext","initEntityManager","initVariableManager","initApiProxy","initSessionService","initDataService","appContext","AppContext","MetadataUtil","getPropsMetadatasByName","apiProxyType","apiProxyExtend","InjectFlags","Optional","HttpClient","sessionHandlingStrategy","dataService","BefRepository","getEntities","updateEntityById","editEntityById","createEntity","appendEntity","removeEntitiesByIds","removeEntityAndSaveById","saveEntityById","saveEntities","cancelEntityChanges","Repository","BefLookupDataService","viewModelContext","getData","helpMetadataId","queryParam","tableName","labelId","extendGetHelpData","nodeCode"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","\r\n/**\r\n * 变更类型\r\n */\r\nexport class ChangeDetailType {\r\n\r\n  /**\r\n   * 新增\r\n   */\r\n  static Added = 'Added';\r\n\r\n  /**\r\n   * 修改\r\n   */\r\n  static Modify = 'Modify';\r\n\r\n  /**\r\n   * 删除\r\n   */\r\n  static Deleted = 'Deleted';\r\n}\r\n\r\n/**\r\n * 行变更信息\r\n * 必须包含：\r\n * 1、DataId   => 主键值；\r\n * 2、属性名   => 新的属性值；\r\n * 3、子表名+s => 子表行的ChangeDetail数组\r\n */\r\nexport interface ChangeDetailInfo {\r\n  DataId?: string;\r\n  [key: string]: number | string | boolean | null | ChangeDetail | ChangeDetail[] | { [key: string]: any };\r\n}\r\n\r\n/**\r\n * 行变更详情\r\n * 包含：\r\n * 1、变更类型；\r\n * 2、变更信息\r\n */\r\nexport interface ChangeDetail {\r\n  ChangeType: ChangeDetailType;\r\n  ChangeInfo: ChangeDetailInfo;\r\n}\r\n\r\n\r\n/**\r\n * 请求类型\r\n */\r\nexport interface RequestInfo {\r\n  dataChange: ChangeDetail[];\r\n  variableChange?: ChangeDetail;\r\n}\r\n\r\n\r\n/**\r\n * 分页信息\r\n */\r\nexport interface Pagination {\r\n  pageSize: number;\r\n  totalCount: number;\r\n  pageCount: number;\r\n  pageIndex: number;\r\n}\r\n\r\n/**\r\n * 查询结果\r\n */\r\nexport interface QueryResult {\r\n  result: any[];\r\n  pagination: Pagination;\r\n}\r\n\r\n/**\r\n * 返回结果类型\r\n */\r\nexport interface ResponseInfo {\r\n  returnValue: any;\r\n  message: any[];\r\n  innerDataChange: ChangeDetail[];\r\n  innerVariableChange: ChangeDetail;\r\n}\r\n\r\n/**\r\n * 带RequestInfo的body对象\r\n */\r\nexport interface BodyWithRequestInfo {\r\n  requestInfo: RequestInfo;\r\n  [key: string]: any;\r\n}\r\n\r\n/**\r\n * request option格式\r\n */\r\nexport interface RequestOption {\r\n  body: BodyWithRequestInfo;\r\n  [key: string]: any;\r\n}\r\n\r\n/**\r\n *  异常处理信息接口\r\n */\r\nexport interface IErrorServe {\r\n  show(error: any): any;\r\n}","import { InjectionToken } from '@farris/mobile-devkit';\r\nimport { IErrorServe } from './types';\r\n\r\nconst BE_SERVER_URI_TOKEN = new InjectionToken<string>('@farris/be BE_SERVER_URL');\r\n\r\n/**\r\n * 1、因为bef里，很多类都没有注入，BefSessionHandlingStragegy无法直接注入；\r\n * 2、通过一个字符串Token来间接做策略选择。\r\n */\r\nconst BE_SESSION_HANDLING_STRATEGY_TOKEN = new InjectionToken<boolean>('@farris/be BE_SESSION_HANDLING_STRATEGY_TOKEN');\r\n\r\n/**\r\n * 注入异常处理service\r\n */\r\nconst BE_ERROR_HANDLER__TOKEN = new InjectionToken<IErrorServe>('@farris/be BE_ERROR_HANDLER__TOKEN')\r\n\r\nexport { BE_SERVER_URI_TOKEN, BE_SESSION_HANDLING_STRATEGY_TOKEN, BE_ERROR_HANDLER__TOKEN };\r\n","import { HttpHeaders, HttpUtil } from '@farris/mobile-devkit';\r\n\r\n/**\r\n * BefHttp工具类\r\n */\r\nclass BefHttpUtil {\r\n\r\n  /**\r\n   * 追加SessionId头\r\n   */\r\n  public static appendSessionId(headers: HttpHeaders, sessionId: string): any {\r\n    headers = HttpUtil.appendHeader(headers, 'SessionId', sessionId);\r\n    return headers;\r\n  }\r\n\r\n  /**\r\n   * 追加CommonVariable头\r\n   * @summary\r\n   * 框架会话token，等价于原来的SessionId\r\n   */\r\n  public static appendCafRuntimeCommonVariable(headers: any, commonVariable: string): any {\r\n    headers = HttpUtil.appendHeader(headers, 'X-CAF-Runtime-CommonVariable', commonVariable);\r\n    return headers;\r\n  }\r\n\r\n  /**\r\n   * 追加X-CAF-Runtime-Context头\r\n   * @summary\r\n   * X-CAF-Runtime-Context等价于BeSessionId\r\n   */\r\n  public static appendCafRuntimeContext(headers: any, context: string): any {\r\n    headers = HttpUtil.appendHeader(headers, 'X-CAF-Runtime-Context', context);\r\n    return headers;\r\n  }\r\n\r\n  /**\r\n   * 追加Content-Type头\r\n   * @summary\r\n   * 提交内容的MIME类型，默认为application/json\r\n   */\r\n  public static appendContextType(headers: any, contentType?: string): any {\r\n    contentType = contentType ? contentType : 'application/json';\r\n    headers = HttpUtil.appendHeader(headers, 'Content-Type', contentType);\r\n    return headers;\r\n  }\r\n\r\n}\r\n\r\nexport { BefHttpUtil };\r\n","import { Entity } from '@farris/mobile-devkit';\r\nimport { BefRepository } from '../bef_repository';\r\nimport { RequestInfo } from '../types';\r\n\r\nclass RequestInfoUtil {\r\n\r\n  /**\r\n   * 构造RequestInfo\r\n   */\r\n  public static buildRequestInfo(repository: BefRepository<Entity>): RequestInfo {\r\n    const requestInfo: RequestInfo = {\r\n      dataChange: repository.entityManager.buildAllEntityChangeDetails(),\r\n      variableChange: repository.variableManager.buildChangeDetail()\r\n    };\r\n    return requestInfo;\r\n  }\r\n\r\n  /**\r\n   * 向body中添加RequestInfo\r\n   */\r\n  public static appendRequestInfoToBody(body: any, repository: BefRepository<Entity>): any {\r\n    if (body.requestInfo) {\r\n      return body;\r\n    }\r\n    const requestInfo = this.buildRequestInfo(repository);\r\n\r\n    // body不存在时，body=requestInfo\r\n    if (!body || Object.keys(body).length === 0) {\r\n      return requestInfo;\r\n    }\r\n\r\n    const bodyWithRequestInfo = Object.assign({}, body, { requestInfo: requestInfo });\r\n    return bodyWithRequestInfo;\r\n  }\r\n}\r\n\r\nexport { RequestInfoUtil };\r\n","class ResponseInfoUtil {\r\n\r\n  /**\r\n   * 将ResponseInfo转换为老接口的数据返回格式\r\n   */\r\n  public static unWrapResponseInfo(result: any) {\r\n\r\n    // 兼容cancel没有返回值的情况\r\n    if (!result) {\r\n      return result;\r\n    }\r\n\r\n    // 没有returnValue的情况下，兼容query取数的的格式\r\n    if (result.hasOwnProperty('returnValue') === false) {\r\n      if (result.hasOwnProperty('result') && result.hasOwnProperty('pagination')) {\r\n\r\n        // 兼容返回带分页的列表数据\r\n        return result.result;\r\n      }\r\n      return result;\r\n    }\r\n\r\n    // 其他：返回RequestInfo.returnValue的情况\r\n    const returnValue = result.returnValue;\r\n    if (returnValue && returnValue.hasOwnProperty('result') && returnValue.hasOwnProperty('pagination')) {\r\n\r\n      // 兼容返回带分页的列表数据\r\n      return returnValue.result;\r\n    }\r\n    return result.returnValue;\r\n\r\n  }\r\n}\r\n\r\nexport { ResponseInfoUtil };\r\n","import { ChangeDetailType, ChangeDetail } from '../types';\r\n\r\n/**\r\n * 变更集工具类\r\n */\r\nclass BefChangeUtil {\r\n\r\n  /**\r\n   * 创建空的ChangeDetail\r\n   * @param type   the type of change\r\n   * @param dataId the identity of the entity whose properties's values have changed\r\n   */\r\n  static createEmpty(type: ChangeDetailType, dataId?: string) {\r\n    const changeDetail: ChangeDetail = {\r\n      ChangeType: type,\r\n      ChangeInfo: {}\r\n    };\r\n\r\n    if (dataId) {\r\n      changeDetail.ChangeInfo.DataId = dataId ;\r\n    }\r\n    return changeDetail;\r\n  }\r\n\r\n  /**\r\n   * Get changes from an ChangeDetail object or an plain object\r\n   * @param changeDetail 变更详情\r\n   */\r\n  static getChangeInfo(changeDetail: any): any {\r\n\r\n    const isChangeDetail = this.isChangeDetail(changeDetail);\r\n    if (isChangeDetail === true) {\r\n      return changeDetail.ChangeInfo;\r\n    } else {\r\n      return changeDetail;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check whether the changeDetial object is an instance of the ChangeDetial class.\r\n   */\r\n  static isChangeDetail(changeDetail: any) {\r\n\r\n    // @todo: if the associated object has only two properties: ChangeType and ChangeInfo, it fails.\r\n    const keys = Object.keys(changeDetail);\r\n    return keys.length === 2 && keys.indexOf('ChangeType') > -1 && keys.indexOf('ChangeInfo') > -1;\r\n  }\r\n}\r\n\r\nexport { BefChangeUtil };\r\n","import {\r\n  BindingData, BindingPropertyType, PropertyUtil, BindingPathConverter\r\n} from '@farris/mobile-devkit';\r\n\r\n/**\r\n * Bef数据中各种Path的转换\r\n */\r\nclass BefDataPathUtil {\r\n\r\n  /**\r\n   * 转换成路径数组\r\n   * 返回结果：\r\n   * 主表（/）：[ parentId ]\r\n   * 从表（/childCodes）：[ parentId, childCodes, childId ]\r\n   * 从从表（/childCodes/grandCodes）： [ parentId, childCode, childId, grandCode, grandId ]\r\n   */\r\n  public static convertToPathArray(bindingPath: string | string[], bindingData: BindingData): string[] {\r\n    const bindingPathArray: string[] = BindingPathConverter.toBindingPathArray(bindingPath);\r\n    const pathArray: string[] = [];\r\n\r\n    let currentBindingObject = bindingData.list.currentItem;\r\n    pathArray.push(currentBindingObject.primaryKeyValue);\r\n\r\n    bindingPathArray.forEach((propName: string) => {\r\n      const propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);\r\n      if (propInfo.type !== BindingPropertyType.List) {\r\n        throw new Error(`${propInfo.name}不是子表对应的属性`);\r\n      }\r\n      const currentBindingList = currentBindingObject[propName];\r\n      currentBindingObject = currentBindingList.currentItem;\r\n      pathArray.push(this.trimTrailingS(propName));\r\n      pathArray.push(currentBindingObject.primaryKeyValue);\r\n    });\r\n\r\n    return pathArray;\r\n  }\r\n\r\n  /**\r\n   * 转换为RestUrl里的路径\r\n   *\r\n   * 返回结果：\r\n   * 主表（/）：/\r\n   * 从表（/jiwtEdus）：/xxx/jiwtEdu\r\n   * 从从表（/jiwtEdus/jiwtGrades）： /xxx/jiwtEdu/xxx/jiwtGrade\r\n   */\r\n  public static convertToPathUrl(bindingPath: string | string[], bindingData: BindingData): string {\r\n    const pathArray = this.convertToPathArray(bindingPath, bindingData);\r\n    pathArray.pop();\r\n    return '/' + pathArray.join('/');\r\n  }\r\n\r\n  /**\r\n   * 转换为表名数组\r\n   * 返回结果：\r\n   * 主表（/）：[]\r\n   * 从表（/childCodes）：[ childCodes ]\r\n   * 从从表（/childCodes/grandCodes [childCode ,grandCode]\r\n   */\r\n  public static convertToObjectCodes(bindingPath: string | string[], bindingData: BindingData) {\r\n    const pathArray = this.convertToPathArray(bindingPath, bindingData);\r\n    const pathLen = pathArray.length;\r\n\r\n    const objectCodes = [];\r\n    for (let i = 1; i < pathLen; i = i + 2) {\r\n      objectCodes.push(pathArray[i]);\r\n    }\r\n\r\n    return objectCodes;\r\n  }\r\n\r\n  /**\r\n   * 转换为id数组，包含最后一级的主键\r\n   * 主表（/）：[ parentId ]\r\n   * 从表（/childCodes）：[ parentId, childId ]\r\n   * 从从表（/childCodes/grandCodes）： [ parentId, childId, grandId]\r\n   */\r\n  public static convertToDataIdsForUpdate(bindingPath: string | string[], bindingData: BindingData) {\r\n    const pathArray = this.convertToPathArray(bindingPath, bindingData);\r\n    const pathLen = pathArray.length;\r\n\r\n    const dataIds = [];\r\n    for (let i = 0; i < pathLen; i = i + 2) {\r\n      dataIds.push(pathArray[i]);\r\n    }\r\n\r\n    return dataIds;\r\n  }\r\n\r\n  /**\r\n   * 转换为id数组，不包含最后一级的主键\r\n   * 主表（/）：[ ]\r\n   * 从表（/childCodes）：[ parentId ]\r\n   * 从从表（/childCodes/grandCodes）： [ parentId, childId]\r\n   */\r\n  public static convertToDataIdsForAdd(bindingPath: string | string[], bindingData: BindingData) {\r\n    const dataIds = this.convertToDataIdsForUpdate(bindingPath, bindingData);\r\n    dataIds.pop();\r\n    return dataIds;\r\n  }\r\n\r\n  /**\r\n   * 将EntityPathString转换为Url\r\n   * @deprecated\r\n   */\r\n  public static convertPathToUrl(path: string): string {\r\n    const subPaths = path.split('/');\r\n    for (let i = subPaths.length - 1; i > 0; i--) {\r\n      if (subPaths[i] && subPaths[i].endsWith('s')) {\r\n        subPaths[i] = subPaths[i].substr(0, subPaths[i].length - 1);\r\n      }\r\n    }\r\n    return subPaths.join('/').toLowerCase();\r\n  }\r\n\r\n  /**\r\n   * 去除最后的s\r\n   */\r\n  private static trimTrailingS(str: string) {\r\n    return str.substr(0, str.length - 1);\r\n  }\r\n  /**\r\n   * 转换通用路径为仅有表名的数组\r\n   *\r\n   * 1.['id:xxx','child1s','id:xx','prop'] => ['child1s','prop']\r\n   * 2.['prop1','prop2','prop3'] => ['prop1','prop2','prop3']\r\n   * 3.['prop1','id:xxx','prop2'] => ['prop1','prop2']\r\n   * @param paths 内置路径，格式:['id:xxx','child1s','id:xx','prop']\r\n   */\r\n  public static convertPathsToNodeCodes(paths: string[]) {\r\n    const result = [];\r\n    if (!paths || paths.length < 1) {\r\n      return result;\r\n    }\r\n    paths.filter(item => !!item && item.indexOf(':') === -1).forEach(node => {\r\n      result.push(node);\r\n    });\r\n    return result;\r\n  }\r\n  /**\r\n   * 转换通用路径为仅有实体主键值的数组\r\n   * @param paths 通用路径，格式:['id:xxx','child1s','id:xx','prop'] => ['xxx','xx']\r\n   */\r\n  public static convertPathsToIds(paths: string[]) {\r\n    const result = [];\r\n    if (!paths || paths.length < 1) {\r\n      return result;\r\n    }\r\n    paths.filter(item => !!item && item.indexOf(':') !== -1).forEach(id => {\r\n      result.push(id.split(':')[1]);\r\n    });\r\n    return result;\r\n  }\r\n}\r\n\r\nexport { BefDataPathUtil };\r\n","import { RequestInfo } from '../types';\r\nimport { BefRepository } from '../bef_repository';\r\n\r\n/**\r\n * BefProxy工具类\r\n * @summary\r\n * 1、BefProxy辅助工具类；\r\n * 2、暂时无法归类的代码封装；\r\n */\r\nclass BefProxyUtil {\r\n\r\n  /**\r\n   * 构造RequestInfo\r\n   */\r\n  public static buildRequestInfo(befRepository: BefRepository<any>): RequestInfo {\r\n    const requestInfo: RequestInfo = {\r\n      dataChange: befRepository.entityManager.buildAllEntityChangeDetails(),\r\n      variableChange: befRepository.variableManager.buildChangeDetail()\r\n    };\r\n    return requestInfo;\r\n  }\r\n}\r\n\r\nexport { BefProxyUtil };\r\n","import { BefRepository } from '../bef_repository';\r\n\r\nexport class BefRepositoryUtil {\r\n\r\n  /**\r\n   * isExistUnsaveData\r\n   */\r\n  public static isExistUnsaveData(befRepository: BefRepository<any>): boolean {\r\n    let hasUnsavedData = false;\r\n    if (!befRepository || !befRepository.entityCollection) {\r\n      throw new Error('Current Object is null or it\\'s entityCollection is null.');\r\n    }\r\n\r\n    const entityArray = befRepository.entityCollection.toArray();\r\n    if (befRepository.dataChangeHistory.isChanged()) {\r\n      return true;\r\n    }\r\n    for (let i = 0; i < entityArray.length; i++) {\r\n      if (entityArray[i].changes.length > 0) {\r\n        hasUnsavedData = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return hasUnsavedData;\r\n  }\r\n\r\n}\r\n","import { FieldMetadataUtil } from '@farris/mobile-devkit';\r\n\r\nclass EntityUtil {\r\n  /**\r\n   * 查找属性的类型\r\n   * @param entityType 实体类型\r\n   * @param targetPropName 属性名称\r\n   * @return 属性信息，包含属性类型（NgField、NgObject、NgList, NgDynamic）和属性对应的实体类型（当NgField类型时为null）\r\n   */\r\n  static getPropInfo(entityType: any, targetPropName: string): { propType: string, propEntityType: any, propMetadata: any} {\r\n\r\n    let propType: string;\r\n    let propEntityType: any;\r\n    let propMetadata: any;\r\n\r\n    // NgField\r\n    const ngFieldProperties = FieldMetadataUtil.getNgFields(entityType);\r\n    Object.keys(ngFieldProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgField';\r\n        propEntityType = null;\r\n        propMetadata = ngFieldProperties[propName];\r\n      }\r\n    });\r\n\r\n    // NgObject\r\n    const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);\r\n    Object.keys(ngObjectProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgObject';\r\n        propEntityType = ngObjectProperties[propName].type;\r\n        propMetadata = ngObjectProperties[propName];\r\n      }\r\n    });\r\n\r\n    // NgList\r\n    const ngListProperties = FieldMetadataUtil.getNgList(entityType);\r\n    Object.keys(ngListProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgList';\r\n        propEntityType = ngListProperties[propName].type;\r\n        propMetadata = ngListProperties[propName];\r\n      }\r\n    });\r\n\r\n    const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);\r\n    Object.keys(ngDynamicProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        propType = 'NgDynamic';\r\n        propEntityType = ngDynamicProperties[propName].type;\r\n        propMetadata = ngDynamicProperties[propName];\r\n      }\r\n    });\r\n\r\n    return { propType, propEntityType, propMetadata };\r\n  }\r\n\r\n  /**\r\n   * 获取实体的主键名\r\n   * @param entityType 实体类型\r\n   */\r\n  static getPrimaryKey(entityType: any) {\r\n    const primaryNgFiledProp = FieldMetadataUtil.getPrimaryFieldMetadata(entityType);\r\n    if (primaryNgFiledProp) {\r\n      return primaryNgFiledProp.dataField;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 是否为对象属性\r\n   */\r\n  static isObjectProp(entityType: any, targetPropName: string, ) {\r\n    let isObjectProp = false;\r\n    const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);\r\n    Object.keys(ngObjectProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        isObjectProp = true;\r\n      }\r\n    });\r\n    return isObjectProp;\r\n  }\r\n\r\n  /**\r\n   * 检查是否是动态列属性\r\n   */\r\n  static isDynamicProp(entityType: any, targetPropName: string) {\r\n    let isDynamicProp = false;\r\n    const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);\r\n    Object.keys(ngDynamicProperties).forEach((propName: string) => {\r\n      if (propName === targetPropName) {\r\n        isDynamicProp = true;\r\n      }\r\n    });\r\n    return isDynamicProp;\r\n  }\r\n\r\n  /**\r\n   * 为实体增加initialData属性\r\n   * @param entity 实体实例\r\n   * @param initialData 默认值对象\r\n   */\r\n  static appendInitialData (entity, initialData) {\r\n    const data = Object.assign({}, initialData);\r\n    delete data.id;\r\n    delete data.parentID;\r\n    entity['initialData'] = data;\r\n  }\r\n\r\n}\r\n\r\nexport { EntityUtil };\r\n","/**\r\n * Bef环境监测工具类\r\n */\r\nclass BefEnvUtil {\r\n\r\n  /**\r\n   * 是否在框架内运行\r\n   */\r\n  public static isInFramework(): boolean {\r\n    const hashString = window.location.hash;\r\n    if (!hashString) {\r\n      return false;\r\n    }\r\n    return hashString.indexOf('formToken=') !== -1;\r\n  }\r\n\r\n}\r\n\r\nexport { BefEnvUtil };\r\n","import { Type, Modification, ModifyType, Entity, EntityCollection } from '@farris/mobile-devkit';\r\nimport { ChangeDetailType, ChangeDetail } from './types';\r\nimport { EntityUtil } from './utils/index';\r\n\r\n\r\n/**\r\n * BEF变更集构造器\r\n */\r\nclass BefChangeBuilder {\r\n\r\n  /**\r\n   * Bef变更集\r\n   */\r\n  public changeDetail: ChangeDetail;\r\n\r\n  /**\r\n   * 构造函数\r\n   * @param entityType 实体类型\r\n   */\r\n  constructor(\r\n    private entityType: Type<Entity>,\r\n    private entityCollection: EntityCollection<Entity>\r\n  ) {\r\n  }\r\n\r\n  /**\r\n   * 构造Bef变更集\r\n   */\r\n  public build(modifications: Modification[]): ChangeDetail {\r\n\r\n    // 重置changeDetail\r\n    this.changeDetail = {\r\n      ChangeType: ChangeDetailType.Modify,\r\n      ChangeInfo: {\r\n        DataId: ''\r\n      }\r\n    };\r\n\r\n    modifications.forEach(modification => {\r\n      this.buildChangeDetail(modification);\r\n    });\r\n    return this.changeDetail;\r\n  }\r\n\r\n  /**\r\n   * 构造Bef变更详情\r\n   */\r\n  public buildChangeDetail(modification: Modification) {\r\n\r\n    const paths = modification.path.concat();\r\n\r\n    // 设置根节点DataId\r\n    if (!this.changeDetail.ChangeInfo.DataId) {\r\n      this.changeDetail.ChangeInfo.DataId = paths[0].split(':')[1];\r\n    }\r\n\r\n    let parentChangeDetail = this.changeDetail;\r\n    let parentEntityType = this.entityType;\r\n\r\n    for (let i = 1; i < paths.length && parentChangeDetail; i = i + 2) {\r\n\r\n      const parentChangeInfo = this.getChangeInfo(parentChangeDetail);\r\n      const propName = paths[i];\r\n      const { propType, propEntityType, propMetadata } = EntityUtil.getPropInfo(parentEntityType, propName);\r\n      const dataField = propMetadata.dataField || propName;\r\n\r\n      if (propType === 'NgField') {\r\n\r\n        // 不支持主键变更，忽略\r\n        const primaryKey = EntityUtil.getPrimaryKey(parentEntityType);\r\n        if (propName === primaryKey) {\r\n          continue;\r\n        }\r\n\r\n        if (modification.type !== ModifyType.ValueChange) {\r\n          throw Error('简单类型的属性上不支持ValueChange类型之外的变更');\r\n        }\r\n\r\n        // NgField类型：说明是最后一级\r\n        parentChangeInfo[dataField] = modification.value;\r\n        parentChangeDetail = null;\r\n\r\n      } else if (propType === 'NgObject') {\r\n\r\n        // NgObject属性本身无法触发变更，只有它的子节点才能触发，所以它上边的变更永远是Modify类型的。\r\n        const childId = paths[i + 1].split(':')[1];\r\n        const childIdName = paths[i + 1].split(':')[0];\r\n\r\n        if (childIdName) {\r\n\r\n          // 有主键（关联对象）：是一个普通的对象\r\n          let changeObject = parentChangeInfo[dataField];\r\n\r\n          // 获取数据\r\n          const entityPath = paths.slice(0, i + 1);\r\n          const changedEntity = this.entityCollection.getEntityByPath(entityPath);\r\n          changeObject = changedEntity ? changedEntity.toJSON() : {};\r\n          parentChangeInfo[dataField] = changeObject;\r\n          parentChangeDetail = null;\r\n          parentEntityType = null;\r\n\r\n        } else {\r\n\r\n          // 没有主键（值对象）：是一个完整的ChangeDetail\r\n          let changeDetail = parentChangeInfo[dataField] as ChangeDetail;\r\n          if (!changeDetail) {\r\n            changeDetail = {\r\n              ChangeType: ChangeDetailType.Modify,\r\n              ChangeInfo: {}\r\n            };\r\n          }\r\n          parentChangeInfo[dataField] = changeDetail;\r\n          parentChangeDetail = changeDetail;\r\n          parentEntityType = propEntityType;\r\n        }\r\n\r\n      } else if (propType === 'NgList') {\r\n\r\n        // 如果不存在则创建一个空数组\r\n        if (!parentChangeDetail.ChangeInfo[dataField]) {\r\n          parentChangeDetail.ChangeInfo[dataField] = [];\r\n        }\r\n        const changeDetails = parentChangeDetail.ChangeInfo[dataField] as ChangeDetail[];\r\n\r\n        // 如果这个属性，不是叶子节点，需要查找当前属性是否已经存在对应ChangeDetail：\r\n        // 1、不存在：创建一个Modify类型的ChangeDetail；\r\n        // 2、存在：返回查找到的ChangeDetai，这个ChangeDetail可能是一个Add类型也可能是一个Modify类型；\r\n        // 3、现状：目前BEF不支持Add类型的变更，肯定是一个Modify类型的变更。\r\n        if (i !== paths.length - 1) {\r\n\r\n          // 遍历检查变更是否已经存在\r\n          const dataId = paths[i + 1].split(':')[1];\r\n\r\n          let changeDetail = changeDetails.find(changeDetailItem => {\r\n            return changeDetailItem.ChangeInfo.DataId === dataId;\r\n          });\r\n\r\n          // 如果不存在，则创建并添加\r\n          if (!changeDetail) {\r\n            changeDetail = this.createEmptyChangeDetail(ChangeDetailType.Modify, dataId);\r\n            changeDetails.push(changeDetail);\r\n          }\r\n          parentChangeDetail = changeDetail;\r\n          parentEntityType = propEntityType;\r\n          continue;\r\n        }\r\n\r\n        // 重置\r\n        parentChangeDetail = null;\r\n        parentEntityType = null;\r\n\r\n      } else if (propType === 'NgDynamic') {\r\n        // 获取数据\r\n        const entityPath = paths.slice(0, i + 1);\r\n        const changedEntity = this.entityCollection.getEntityByPath(entityPath);\r\n        parentChangeInfo[dataField] = {\r\n          ChangeType: ChangeDetailType.Modify,\r\n          ChangeInfo: changedEntity ? changedEntity.toJSON() : {}\r\n        };\r\n        parentChangeDetail = null;\r\n        parentEntityType = null;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * 获取变更信息\r\n   * 在整个ChangeDetail树上，存在两种类型的节点\r\n   * ChangeDetail：实体变更、值对象变更（没有DataID）\r\n   * PlainObject: 关联对象的变更\r\n   * 从这两种节点上拿具体变更信息的时候，需要统一处理，屏蔽这个差异。\r\n   * @todo：为这两种节点封装ChangeNode基类来解决这个差异。\r\n   */\r\n  private getChangeInfo(changeDetail: any): any {\r\n\r\n    // @todo：可能存在同名属性\r\n    if (changeDetail.hasOwnProperty('ChangeInfo')) {\r\n      return changeDetail.ChangeInfo;\r\n    } else {\r\n      return changeDetail;\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * 创建ChangeDetail\r\n   * @param type BEF变更类型\r\n   * @param dataId 数据内码\r\n   */\r\n  private createEmptyChangeDetail(type: ChangeDetailType, dataId: string): ChangeDetail {\r\n    const changeDetail: ChangeDetail = {\r\n      ChangeType: type,\r\n      ChangeInfo: {\r\n        DataId: dataId\r\n      }\r\n    };\r\n    return changeDetail;\r\n  }\r\n\r\n}\r\n\r\nexport { BefChangeBuilder };\r\n","import { Type, Entity, EntityList, EntityCollection } from '@farris/mobile-devkit';\r\nimport { EntityUtil } from './utils/index';\r\nimport { ChangeDetailType, ChangeDetail } from './types';\r\n\r\n/**\r\n * 处理服务器端变更\r\n */\r\nclass BefChangeHandler {\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor() {\r\n  }\r\n\r\n  /**\r\n   * 处理Bef变更集\r\n   */\r\n  handle(\r\n    entityType: Type<Entity>,\r\n    entityCollection: EntityCollection<Entity>,\r\n    changeDetails: ChangeDetail[]\r\n  ) {\r\n    this.handleChangeDetails(entityType, entityCollection, changeDetails);\r\n  }\r\n\r\n  /**\r\n   * 处理Bef变更集（批量）\r\n   */\r\n  handleChangeDetails(\r\n    entityType: Type<Entity>,\r\n    entityList: EntityList<Entity> | EntityCollection<Entity>,\r\n    changeDetails: ChangeDetail[]\r\n  ) {\r\n    if (!changeDetails) {\r\n      return;\r\n    }\r\n\r\n    changeDetails.forEach((changeDetail: ChangeDetail) => {\r\n      const id = (changeDetail.ChangeInfo.dataId || changeDetail.ChangeInfo.DataId) as string;\r\n      const entity = this.getEntityById(entityList, id);\r\n      if (!entity) {\r\n        return;\r\n      }\r\n      this.handleChangeDetail(entityType, entity, changeDetail);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 处理Bef变更集（单条）\r\n   */\r\n  handleChangeDetail(\r\n    entityType: Type<Entity>,\r\n    entity: Entity,\r\n    changeDetail: ChangeDetail\r\n  ) {\r\n\r\n    if (!changeDetail || !entity) {\r\n      return;\r\n    }\r\n\r\n    // 只处理值变更，其他变更待进一步验证。\r\n    if (changeDetail.ChangeType !== ChangeDetailType.Modify) {\r\n      return;\r\n    }\r\n\r\n    const changeInfo = changeDetail.ChangeInfo;\r\n    Object.keys(changeInfo).forEach((propName: string) => {\r\n      const { propType, propEntityType } = EntityUtil.getPropInfo(entityType, propName);\r\n      if (propType === 'NgField') {\r\n\r\n        // 简单属性：更新值\r\n        entity[propName] = changeInfo[propName];\r\n      } else if (propType === 'NgObject') {\r\n        const childEntity = entity[propName] as Entity;\r\n        if (childEntity.primaryKey) {\r\n\r\n          // 关联对象：重新加载数据\r\n          const childEntityData = changeInfo[propName];\r\n          childEntity.load(childEntityData);\r\n\r\n        } else {\r\n\r\n          // 值对象：递归处理变更\r\n          const childChangeDetail = changeInfo[propName] as ChangeDetail;\r\n          this.handleChangeDetail(propEntityType, childEntity, childChangeDetail);\r\n        }\r\n\r\n      } else if (propType === 'NgList') {\r\n\r\n        // 子列表：递归处理变更集合\r\n        const childEntityList = entity[propName] as EntityList<Entity>;\r\n        const childChangeDetails = changeInfo[propName] as ChangeDetail[];\r\n        this.handleChangeDetails(propEntityType, childEntityList, childChangeDetails);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 根据id获取实体，屏蔽EntityCollection和EntityList之间的差异\r\n   */\r\n  private getEntityById(entityList: EntityList<Entity> | EntityCollection<Entity>, id: string): Entity {\r\n    let target: Entity;\r\n    if (entityList instanceof EntityCollection) {\r\n      target = entityList.getEntityById(id);\r\n    } else {\r\n      target = entityList.get(id);\r\n    }\r\n    return target ? target : null;\r\n  }\r\n\r\n\r\n}\r\n\r\nexport { BefChangeHandler };\r\n","import { Observable, BehaviorSubject, of, Subject } from 'rxjs';\r\nimport { switchMap, tap } from 'rxjs/operators';\r\nimport { HttpHeaders, HttpRequestConfig, HttpClient } from '@farris/mobile-devkit';\r\n\r\nimport { BefHttpUtil } from '../../utils/index';\r\nimport { FrameworkSessionService } from '../../framework_session_service';\r\nimport { BeSessionStorageStrategy } from '../storage-strategies/index';\r\n\r\n/**\r\n * BefSession处理策略类\r\n */\r\nabstract class BefSessionHandlingStrategy {\r\n\r\n  /**\r\n   * 存储策略\r\n   */\r\n  protected storageStrategy: BeSessionStorageStrategy;\r\n\r\n  /**\r\n   * 框架Session服务\r\n   */\r\n  protected frmSessionService: FrameworkSessionService;\r\n\r\n  /**\r\n   * Http客户端\r\n   */\r\n  protected httpClient: HttpClient;\r\n\r\n  /**\r\n   * 创建Session的的EAPI地址\r\n   */\r\n  protected beBaseUrl: string;\r\n\r\n  /**\r\n   * 创建BeSession接口地址\r\n   */\r\n  protected beCreateSessionUrl: string;\r\n\r\n  /**\r\n   * 关闭BeSession接口地址\r\n   */\r\n  protected beCloseSessionUrl: string;\r\n\r\n  /**\r\n   * 框架SessionId（用户的或者功能菜单的）\r\n   */\r\n  protected get frmSessionId(): string {\r\n    return this.frmSessionService.getCurrentSessionId();\r\n  }\r\n\r\n  /**\r\n   * 清空的BeSessionId\r\n   */\r\n  protected oldBeSessionId: string;\r\n\r\n  /**\r\n   * BeSession是否存在\r\n   */\r\n  private beSessionExisted = false;\r\n\r\n  /**\r\n   * BeSession是否存在流\r\n   */\r\n  private beSessionExisted$: BehaviorSubject<boolean>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(\r\n    storageStrategy: BeSessionStorageStrategy, frmSessionService: FrameworkSessionService,\r\n    httpClient: HttpClient, beBaseUrl: string\r\n  ) {\r\n    this.storageStrategy = storageStrategy;\r\n    this.frmSessionService = frmSessionService;\r\n    this.httpClient = httpClient;\r\n    this.beBaseUrl = beBaseUrl;\r\n    this.beCreateSessionUrl = `${beBaseUrl}/service/createsession`;\r\n    this.beCloseSessionUrl = `${beBaseUrl}/service/closesession`;\r\n    this.beSessionExisted$ = new BehaviorSubject<boolean>(this.beSessionExisted);\r\n  }\r\n\r\n  public abstract getSessionId(): Observable<string>;\r\n  public abstract setSessionId(sessionId): void;\r\n  public abstract clearSessionId(): void;\r\n  public abstract handleRequestHeaders(headers: HttpHeaders): HttpHeaders;\r\n  public abstract handleReponseHeaders(headers: HttpHeaders): void;\r\n  protected abstract getSessionStorageKey(): string;\r\n\r\n  /**\r\n   * 获取框架SessionId\r\n   */\r\n  public getFrameworkSessionId() {\r\n    return this.frmSessionId;\r\n  }\r\n\r\n  /**\r\n   * 从缓存中获取BeSession\r\n   */\r\n  protected getSessionIdFromStorage() {\r\n    const sessionStorageKey = this.getSessionStorageKey();\r\n    const beSessionId = this.storageStrategy.getItem(sessionStorageKey);\r\n    return beSessionId;\r\n  }\r\n\r\n  /**\r\n   * 创建BeSessionId\r\n   */\r\n  protected createSession(): Observable<string> {\r\n    const requestConfig: HttpRequestConfig = {\r\n      responseType: 'text',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    };\r\n    const frmSessionId = this.frmSessionId;\r\n    if (frmSessionId) {\r\n      requestConfig.headers = BefHttpUtil.appendSessionId(requestConfig.headers, this.frmSessionId);\r\n      requestConfig.headers = BefHttpUtil.appendCafRuntimeCommonVariable(requestConfig.headers, this.frmSessionId);\r\n    }\r\n    //创建前判断当前的frmsessionid是不是在当前会话下被清除过\r\n    const ClearItOnce = window.sessionStorage.getItem(\"ClearItOnce\");\r\n    if ('true' !== ClearItOnce  && frmSessionId) {\r\n      return this.clear(frmSessionId).pipe(\r\n        switchMap(() => {\r\n          window.sessionStorage.setItem(\"ClearItOnce\", 'true');\r\n          return this.httpClient.post(this.beCreateSessionUrl, null, requestConfig).pipe(\r\n            tap((beSessionId: string) => {\r\n              this.setSessionId(beSessionId);\r\n              this.setBesessionExisted(true);\r\n            })\r\n          );\r\n\r\n        })\r\n      )\r\n    }\r\n\r\n    return this.httpClient.post(this.beCreateSessionUrl, null, requestConfig).pipe(\r\n      tap((beSessionId: string) => {\r\n        this.setSessionId(beSessionId);\r\n        this.setBesessionExisted(true);\r\n      })\r\n    );\r\n  }\r\n\r\n  clear(formToken) {\r\n    const subject = new Subject();\r\n    if (formToken && window['frmMobileService']) {\r\n      window['frmMobileService'].rtf.func.clearState({ formToken }, () => { subject.next(true) },)\r\n    }\r\n    return subject;\r\n  }\r\n\r\n  test() {\r\n    const requestConfig: HttpRequestConfig = {\r\n      responseType: 'text',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    };\r\n\r\n    if (this.frmSessionId) {\r\n      requestConfig.headers = BefHttpUtil.appendSessionId(requestConfig.headers, this.frmSessionId);\r\n      requestConfig.headers = BefHttpUtil.appendCafRuntimeCommonVariable(requestConfig.headers, this.frmSessionId);\r\n    }\r\n\r\n    return this.httpClient.post(this.beCreateSessionUrl, null, requestConfig).pipe(\r\n      tap((beSessionId: string) => {\r\n        this.setSessionId(beSessionId);\r\n        this.setBesessionExisted(true);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 关闭BeSessionId\r\n   */\r\n  protected closeOldSession(): Observable<boolean> {\r\n    if (!this.oldBeSessionId) {\r\n      return of(true);\r\n    }\r\n\r\n    const requestConfig: HttpRequestConfig = {\r\n      responseType: 'text',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    };\r\n\r\n    // headers处理\r\n    requestConfig.headers = BefHttpUtil.appendCafRuntimeContext(requestConfig.headers, this.oldBeSessionId);\r\n    requestConfig.headers = BefHttpUtil.appendSessionId(requestConfig.headers, this.oldBeSessionId);\r\n    if (this.frmSessionId) {\r\n      requestConfig.headers = BefHttpUtil.appendCafRuntimeCommonVariable(requestConfig.headers, this.frmSessionId);\r\n    }\r\n\r\n    // 无论是否成功，统一置空cleardBeSessionId\r\n    return this.httpClient.post(this.beCloseSessionUrl, null, requestConfig).pipe(\r\n      tap(\r\n        () => {\r\n          this.oldBeSessionId = null;\r\n          return of(true);\r\n        },\r\n        () => {\r\n          this.oldBeSessionId = null;\r\n          return of(true);\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 设置BeSession存在状态，并发出通知\r\n   */\r\n  protected setBesessionExisted(beSessionExisted: boolean) {\r\n    if (this.beSessionExisted === beSessionExisted) {\r\n      return;\r\n    }\r\n    this.beSessionExisted = beSessionExisted;\r\n    this.beSessionExisted$.next(beSessionExisted);\r\n  }\r\n\r\n  /**\r\n   * 获取BeSession是否存在状态\r\n   */\r\n  public getBeSessionExisted(): Observable<boolean> {\r\n    return this.beSessionExisted$;\r\n  }\r\n\r\n}\r\n\r\nexport { BefSessionHandlingStrategy };\r\n","import { Observable, of } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { HttpHeaders, HttpClient } from '@farris/mobile-devkit';\r\n\r\nimport { BefHttpUtil, BefEnvUtil } from '../../utils/index';\r\nimport { FrameworkSessionService } from '../../framework_session_service';\r\nimport { BeSessionStorageStrategy } from '../storage-strategies/index';\r\nimport { BefSessionHandlingStrategy } from './handling_strategy';\r\n\r\n/**\r\n * 隔离的BeSession处理策略\r\n */\r\nclass BefSeparatedSessionHandlingStrategy extends BefSessionHandlingStrategy {\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(\r\n    storageStrategy: BeSessionStorageStrategy,\r\n    frmSessionService: FrameworkSessionService,\r\n    httpClient: HttpClient,\r\n    beBaseUrl: string\r\n  ) {\r\n    super(storageStrategy, frmSessionService, httpClient, beBaseUrl);\r\n  }\r\n\r\n  /**\r\n   * 获取BeSessionId\r\n   */\r\n  public getSessionId(): Observable<string> {\r\n    const beSessionId = this.getSessionIdFromStorage();\r\n    let beSessionId$: Observable<string>;\r\n    if (beSessionId) {\r\n      beSessionId$ =  of(beSessionId);\r\n      this.setBesessionExisted(true);\r\n    } else {\r\n      beSessionId$ = this.createSession();\r\n    }\r\n\r\n    const result$ = this.closeOldSession().pipe(\r\n      switchMap(() => {\r\n        return beSessionId$;\r\n      })\r\n    );\r\n\r\n    return result$;\r\n\r\n  }\r\n\r\n  /**\r\n   * 设置BeSessionId\r\n   */\r\n  public setSessionId(sessionId: string): void {\r\n    const sessionKey = this.getSessionStorageKey();\r\n    this.storageStrategy.setItem(sessionKey, sessionId);\r\n  }\r\n\r\n  /**\r\n   * 清空BeSessionId\r\n   */\r\n  public clearSessionId() {\r\n    if (BefEnvUtil.isInFramework() === true) {\r\n      this.storageStrategy.removeItemsByScope(this.frmSessionId);\r\n    } else {\r\n      const sessionKey = this.getSessionStorageKey();\r\n      this.oldBeSessionId = this.getSessionIdFromStorage();\r\n      this.storageStrategy.removeItem(sessionKey);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 扩展BeSessionId相关头信息\r\n   */\r\n  public handleRequestHeaders(headers: HttpHeaders): HttpHeaders {\r\n    const frmSessionId = this.getFrameworkSessionId();\r\n    const beSessionId = this.getSessionIdFromStorage();\r\n\r\n    if (frmSessionId) {\r\n      headers = BefHttpUtil.appendCafRuntimeCommonVariable(headers, frmSessionId);\r\n    }\r\n\r\n    if (beSessionId) {\r\n      headers = BefHttpUtil.appendCafRuntimeContext(headers, beSessionId);\r\n      headers = BefHttpUtil.appendSessionId(headers, beSessionId);\r\n    }\r\n\r\n    return headers;\r\n  }\r\n\r\n  /**\r\n   * 处理服务器端返回的headers\r\n   */\r\n  public handleReponseHeaders(headers: any): void {\r\n  }\r\n\r\n  /**\r\n   * 获取某个Repository对应的BeSession的唯一key\r\n   */\r\n  protected getSessionStorageKey(): string {\r\n    return `${this.frmSessionId}_${this.beBaseUrl}`;\r\n  }\r\n\r\n}\r\n\r\nexport { BefSeparatedSessionHandlingStrategy };\r\n","import { Observable, of } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\n\r\nimport { HttpClient } from '@farris/mobile-devkit';\r\nimport { FrameworkSessionService } from '../../framework_session_service';\r\nimport { BefHttpUtil } from '../../utils/index';\r\nimport { BeSessionStorageStrategy } from '../storage-strategies/index';\r\nimport { BefSessionHandlingStrategy } from './handling_strategy';\r\n\r\n\r\n/**\r\n * 统一的Session处理策略\r\n * @todo\r\n * 1、目前Session其实还是隔离的，因为使用了beBaseUrl做了缓存；\r\n * 2、将来框架token问题解决了之后，使用token或者表单基url做缓存key；\r\n * 3、基于2缓存之后，如何closeSession，成为问题，除非appAcontext是一颗树，只有根AppContext初始化的时候，才去closeSession。\r\n */\r\nclass BefUnifiedSessionHandlingStrategy extends BefSessionHandlingStrategy {\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(\r\n    storageStrategy: BeSessionStorageStrategy,\r\n    frmSessionService: FrameworkSessionService,\r\n    httpClient: HttpClient,\r\n    beBaseUrl: string\r\n  ) {\r\n    super(storageStrategy, frmSessionService, httpClient, beBaseUrl);\r\n    this.beCloseSessionUrl = `${beBaseUrl}/service/closesession`;\r\n  }\r\n\r\n  /**\r\n   * 获取BeSession\r\n   */\r\n  public getSessionId(): Observable<string> {\r\n    const sessionKey = this.getSessionStorageKey();\r\n    const sessionId = this.storageStrategy.getItem(sessionKey);\r\n    const beSessionId$ =  of(sessionId);\r\n\r\n    const result$ = this.closeOldSession().pipe(\r\n      switchMap(() => {\r\n        return beSessionId$;\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 设置BeSessionId\r\n   */\r\n  public setSessionId(sessionId: string): void {\r\n    const sessionKey = this.getSessionStorageKey();\r\n    this.storageStrategy.setItem(sessionKey, sessionId);\r\n  }\r\n\r\n  /**\r\n   * 清空Sessionid\r\n   */\r\n  public clearSessionId() {\r\n    const sessionKey = this.getSessionStorageKey();\r\n    this.oldBeSessionId = this.getSessionIdFromStorage();\r\n    this.storageStrategy.removeItem(sessionKey);\r\n  }\r\n\r\n  /**\r\n   * 扩展Session相关头信息\r\n   */\r\n  public handleRequestHeaders(headers: any): any {\r\n    const frmSessionId = this.getFrameworkSessionId();\r\n    if (frmSessionId) {\r\n      headers = BefHttpUtil.appendCafRuntimeCommonVariable(headers, frmSessionId);\r\n    }\r\n\r\n    const beSessionId = this.getSessionIdFromStorage();\r\n    if (beSessionId) {\r\n      headers = BefHttpUtil.appendCafRuntimeContext(headers, beSessionId);\r\n    }\r\n    return headers;\r\n  }\r\n\r\n  /**\r\n   * 处理服务器端返回的headers\r\n   */\r\n  public handleReponseHeaders(headers: any): void {\r\n    const beSessionId = headers['befsessionid'];\r\n    const oldBeSessionId = this.getSessionId();\r\n    if (beSessionId && beSessionId !== oldBeSessionId) {\r\n      this.setSessionId(beSessionId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取某个Repository对应的BeSession的唯一key\r\n   */\r\n  protected getSessionStorageKey(): string {\r\n    return this.beBaseUrl;\r\n  }\r\n\r\n}\r\n\r\nexport { BefUnifiedSessionHandlingStrategy };\r\n","import { BeSessionStorageStrategy } from './storage_strategy';\r\n\r\n/**\r\n * 基于浏览器SessionStorage的BeSession缓存\r\n * @summary\r\n * 1、SeparatedSession模式下：\r\n *  {\r\n *    BE_SESSION_ID: {\r\n *      frmSessionId1_beSessionUri1: beSessionId-1,\r\n *      frmSessionId2_beSessionUri2: beSessionId-2,\r\n *    }\r\n *  }\r\n * 2、UnifiedSession模式下（在Debug状态，同模式1）：\r\n * {\r\n *    BE_SESSION_ID: {\r\n *      frmSessionId1: beSessionId-1,\r\n *      frmSessionId2: beSessionId-2,\r\n *    }\r\n *  }\r\n */\r\nclass SessionStorageBeSessionStorageStrategy implements BeSessionStorageStrategy {\r\n\r\n  /**\r\n   * 缓存Token\r\n   */\r\n  private sessionStorageKey = 'BE_SESSION_ID';\r\n\r\n  /**\r\n   * 获取值\r\n   */\r\n  public getItem(beSessionKey: string): string {\r\n    const beSessions = this.getAllBeSessions();\r\n    return beSessions[beSessionKey];\r\n  }\r\n\r\n  /**\r\n   * 设置值\r\n   */\r\n  public setItem(beSessionKey: string, beSessionId: string) {\r\n    const beSessions = this.getAllBeSessions();\r\n    beSessions[beSessionKey] = beSessionId;\r\n    this.setAllBeSessions(beSessions);\r\n  }\r\n\r\n  /**\r\n   * 删除值\r\n   */\r\n  public removeItem(beSessionKey: string) {\r\n    const beSessions = this.getAllBeSessions();\r\n    if (beSessions[beSessionKey]) {\r\n      delete beSessions[beSessionKey];\r\n    }\r\n    this.setAllBeSessions(beSessions);\r\n  }\r\n\r\n  /**\r\n   * 根据scope删除值\r\n   */\r\n  public removeItemsByScope(beSessionScope: string) {\r\n    const beSessions = this.getAllBeSessions();\r\n    Object.keys(beSessions).forEach((beSessionKey: string) => {\r\n      if (beSessionKey.startsWith(beSessionScope) === true) {\r\n        delete beSessions[beSessionKey];\r\n      }\r\n    });\r\n    this.setAllBeSessions(beSessions);\r\n  }\r\n\r\n  /**\r\n   * 清空所有会话\r\n   */\r\n  public clear(): void {\r\n    window.sessionStorage.removeItem(this.sessionStorageKey);\r\n  }\r\n\r\n  /**\r\n   * 从SessionStorage中获取全部BeSessions\r\n   */\r\n  private getAllBeSessions(): any {\r\n    const beSessionsJson = window.sessionStorage.getItem(this.sessionStorageKey);\r\n    if (!beSessionsJson) {\r\n      return {};\r\n    }\r\n    return JSON.parse(beSessionsJson);\r\n  }\r\n\r\n  /**\r\n   * 设置全部BeSessions到SessionStorage\r\n   */\r\n  setAllBeSessions(beSessions: any): void {\r\n    const beSessionsString = JSON.stringify(beSessions);\r\n    window.sessionStorage.setItem(this.sessionStorageKey, beSessionsString);\r\n  }\r\n}\r\n\r\nexport { SessionStorageBeSessionStorageStrategy };","import { HttpClient } from '@farris/mobile-devkit';\r\nimport { FrameworkSessionService } from '../../framework_session_service';\r\nimport { BeSessionStorageStrategy, SessionStorageBeSessionStorageStrategy } from '../storage-strategies/index';\r\nimport { BefSessionHandlingStrategy } from './handling_strategy';\r\nimport { BefSeparatedSessionHandlingStrategy } from './separated_handling_strategy';\r\nimport { BefUnifiedSessionHandlingStrategy } from './unified_handling_strategy';\r\n\r\n\r\n/**\r\n * BeSession处理策略工厂\r\n */\r\nclass BefSessionHandlingStrategyFactory {\r\n\r\n  /**\r\n   * 创建BeSession处理策略\r\n   */\r\n  public create(\r\n    handlingStrategyName: string,\r\n    frmSessionService: FrameworkSessionService,\r\n    beBaseUrl: string,\r\n    httpClient: HttpClient\r\n  ): BefSessionHandlingStrategy {\r\n\r\n    const storageStrategy = this.createStorageStrategy();\r\n\r\n    if (handlingStrategyName === 'UnifiedSession') {\r\n      return new BefUnifiedSessionHandlingStrategy(storageStrategy, frmSessionService, httpClient, beBaseUrl);\r\n    } else {\r\n      return new BefSeparatedSessionHandlingStrategy(storageStrategy, frmSessionService, httpClient, beBaseUrl);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 创建BeSession缓存策略\r\n   */\r\n  private createStorageStrategy(): BeSessionStorageStrategy {\r\n    return new SessionStorageBeSessionStorageStrategy();\r\n  }\r\n\r\n}\r\n\r\nexport { BefSessionHandlingStrategyFactory };\r\n\r\n\r\n","import { Observable } from 'rxjs';\r\nimport { BefSessionHandlingStrategy } from './handling-strategies/index';\r\n\r\n/**\r\n * BefSessionService\r\n */\r\nclass BefSessionService {\r\n\r\n  /**\r\n   * Session处理策略类\r\n   */\r\n  private handlingStrategy: BefSessionHandlingStrategy;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(handlingStrategy: BefSessionHandlingStrategy) {\r\n    this.handlingStrategy = handlingStrategy;\r\n  }\r\n  /**\r\n   * 获取token\r\n   */\r\n  public get token() {\r\n    return this.handlingStrategy.getFrameworkSessionId();\r\n  }\r\n\r\n  /**\r\n   * 获取BeSessionId\r\n   */\r\n  public getBeSessionId(): Observable<string> {\r\n    return this.handlingStrategy.getSessionId();\r\n  }\r\n\r\n  /**\r\n   * 获取BeSession是否存在状态\r\n   */\r\n  public getBeSessionExisted(): Observable<boolean> {\r\n    return this.handlingStrategy.getBeSessionExisted();\r\n  }\r\n\r\n  /**\r\n   * 设置sessionId\r\n   * @param sessionId sessionId\r\n   */\r\n  public setBeSessionId(sessionId: string) {\r\n    this.handlingStrategy.setSessionId(sessionId);\r\n  }\r\n\r\n  /**\r\n   * 清空BeSessionId\r\n   */\r\n  public clearBeSessionId() {\r\n    this.handlingStrategy.clearSessionId();\r\n  }\r\n\r\n  /**\r\n   * 扩展请求header\r\n   */\r\n  public extendRequestHeaders(headers: any): any {\r\n    return this.handlingStrategy.handleRequestHeaders(headers);\r\n  }\r\n\r\n  /**\r\n   * 处理响应header\r\n   */\r\n  public handleResponseHeaders(headers: any): void {\r\n    return this.handlingStrategy.handleReponseHeaders(headers);\r\n  }\r\n}\r\n\r\nexport { BefSessionService };\r\n","import { Observable } from 'rxjs';\r\nimport { switchMap, map, catchError, tap } from 'rxjs/operators';\r\nimport { HttpHeaders, HttpParams, HttpMethod, HttpMethods, HttpRequestConfig, HttpResponse, HttpClient } from '@farris/mobile-devkit';\r\n\r\nimport { RequestInfo, ResponseInfo, ChangeDetail } from './types';\r\nimport { IProxyExtend } from './bef_proxy_extend';\r\nimport { BefDataPathUtil } from './utils/index';\r\n\r\n\r\n/**\r\n * Bef API代理类\r\n */\r\nexport abstract class BefProxy {\r\n\r\n  /**\r\n   * API基路径\r\n   * @summary\r\n   * 延迟到实现类确定，考虑使用注解指定。\r\n   */\r\n  public abstract baseUrl: string;\r\n\r\n\r\n  public associatedUrlMap: Map<string, string>;\r\n\r\n  /**\r\n   * 代理扩展\r\n   */\r\n  protected proxyExtend: IProxyExtend;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(public httpClient: HttpClient) {\r\n    this.associatedUrlMap = new Map();\r\n  }\r\n\r\n  // 记录附件取跨Be url\r\n  setAssociatedUrl(url){\r\n    this.associatedUrlMap.set(url,url)\r\n  }\r\n  /**\r\n   * 设置扩展策略\r\n   */\r\n  public setProxyExtend(proxyExtend: IProxyExtend) {\r\n    this.proxyExtend = proxyExtend;\r\n  }\r\n\r\n  /**\r\n   * 查询\r\n   */\r\n  public query(entityFilter?: any): Observable<any> {\r\n    const url = this.baseUrl;\r\n    const params: HttpParams = {};\r\n    if (entityFilter) {\r\n      const entityFilterString = JSON.stringify(entityFilter);\r\n      params.entityFilter = entityFilterString;\r\n    }\r\n    const requestConfig: HttpRequestConfig = {\r\n      params: params\r\n    };\r\n    return this.request(HttpMethods.GET, url, requestConfig);\r\n  }\r\n\r\n  /**\r\n   * 列表数据查询（扩展）\r\n   */\r\n  public extendQuery(entityFilter: any): Observable<ResponseInfo> {\r\n    const url = `${this.baseUrl}/extension/query`;\r\n    const params: HttpParams = {};\r\n    if (entityFilter) {\r\n      const entityFilterString = JSON.stringify(entityFilter);\r\n      params.entityFilter = entityFilterString;\r\n    }\r\n    const requestConfig: HttpRequestConfig = {\r\n      params: params\r\n    };\r\n    return this.request(HttpMethods.PUT, url, requestConfig);\r\n  }\r\n\r\n  /**\r\n   * 单条数据检索\r\n   */\r\n  public retrieve(id: string): Observable<any> {\r\n    const url = `${this.baseUrl}/${id}`;\r\n    return this.request(HttpMethods.GET, url);\r\n  }\r\n\r\n  /**\r\n   * 单条数据检索（扩展）\r\n   */\r\n  public extendRetrieve(id: string): Observable<ResponseInfo> {\r\n    const url = `${this.baseUrl}/extension/retrieve/${id}`;\r\n    return this.request(HttpMethods.PUT, url);\r\n  }\r\n\r\n  /**\r\n   * 单条数据检索（加锁）\r\n   */\r\n  public edit(id: string): Observable<ResponseInfo> {\r\n    const url = `${this.baseUrl}/service/edit/${id}`;\r\n    return this.request(HttpMethods.PUT, url);\r\n  }\r\n\r\n  /**\r\n   * 新增数据\r\n   */\r\n  public create(defaultValue?: any, requestInfo?: RequestInfo): Observable<any> {\r\n    const body = {\r\n      defaultValue,\r\n      requestInfo: requestInfo,\r\n    };\r\n    const requestConfig: HttpRequestConfig = {\r\n      body: body\r\n    };\r\n    return this.request(HttpMethods.POST, this.baseUrl, requestConfig);\r\n  }\r\n\r\n  /**\r\n   * 新增从表数据\r\n   * @path 新增路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）\r\n   */\r\n  public createByPath(fpath: string): Observable<any> {\r\n    const pathUrl = BefDataPathUtil.convertPathToUrl(fpath);\r\n    const url = `${this.baseUrl}${pathUrl}`;\r\n    return this.request(HttpMethods.POST, url);\r\n  }\r\n\r\n  /**\r\n   * 提交变更\r\n   */\r\n  update(changeDetail: ChangeDetail): Observable<any> {\r\n    const body = {\r\n      changeDetail\r\n    };\r\n    const requestConfig: HttpRequestConfig = {\r\n      body: body\r\n    };\r\n\r\n    return this.request(HttpMethods.PATCH, this.baseUrl, requestConfig);\r\n  }\r\n\r\n  /**\r\n   * 执行保存\r\n   */\r\n  public save(): Observable<any> {\r\n    return this.request( HttpMethods.PUT, this.baseUrl);\r\n  }\r\n\r\n  /**\r\n   * 删除\r\n   */\r\n  public delete(id: string): Observable<any> {\r\n    const url = `${this.baseUrl}/${id}`;\r\n    return this.request(HttpMethods.DELETE, url);\r\n  }\r\n\r\n  /**\r\n   * 删除（扩展）\r\n   */\r\n  public extendDelete(id: string): Observable<any> {\r\n    const url = `${this.baseUrl}/extension/delete/${id}`;\r\n    return this.request(HttpMethods.PUT, url);\r\n  }\r\n\r\n  /**\r\n   * 删除并保存\r\n   */\r\n  public deleteAndSave(id: any): Observable<any> {\r\n    const url = `${this.baseUrl}/service/delete/${id}`;\r\n    const requestConfig: HttpRequestConfig = {};\r\n    return this.request(HttpMethods.PUT, url, requestConfig);\r\n  }\r\n\r\n  /**\r\n   * 删除后代\r\n   */\r\n  public deletByPath(fpath: string, id: string): Observable<any> {\r\n    const pathUrl = BefDataPathUtil.convertPathToUrl(fpath);\r\n    const url = `${this.baseUrl}${pathUrl}/${id}`;\r\n    return this.request(HttpMethods.DELETE, url);\r\n  }\r\n\r\n  /**\r\n   * 删除后代（扩展）\r\n   */\r\n  public extendDeletByPath(fpath: string, id: string): Observable<any> {\r\n    const pathUrl = BefDataPathUtil.convertPathToUrl(fpath);\r\n    const url = `${this.baseUrl}/extension${pathUrl}/${id}`;\r\n    return this.request(HttpMethods.PUT, url);\r\n  }\r\n\r\n  /**\r\n   * 批量删除\r\n   * @param ids 待删除的id数组\r\n   */\r\n  public batchDelete(ids: string[]): Observable<any> {\r\n    const params = {\r\n      ids: ids.join(',')\r\n    };\r\n    const requestConfig: HttpRequestConfig = {\r\n      params: params\r\n    };\r\n    return this.request(HttpMethods.DELETE, this.baseUrl, requestConfig);\r\n  }\r\n\r\n  /**\r\n   * 批量删除（扩展）\r\n   */\r\n  public extendBatchDelete(ids: string[]): Observable<any> {\r\n    const url = `${this.baseUrl}/extension/batchdelete`;\r\n    const params = {\r\n      ids: ids.join(',')\r\n    };\r\n    const requestConfig: HttpRequestConfig = {\r\n      params: params\r\n    };\r\n    return this.request(HttpMethods.PUT, url, requestConfig);\r\n  }\r\n\r\n  /**\r\n   * 取消\r\n   */\r\n  public cancel(): Observable<any> {\r\n    const url = `${this.baseUrl}/service/cancel`;\r\n    return this.request(HttpMethods.POST, url);\r\n  }\r\n\r\n  /**\r\n   * 调用httpclient取数\r\n   * @param url url\r\n   * @param method methods\r\n   * @param requestConfigs options\r\n   */\r\n  public request(method: HttpMethod, url: string,  requestConfigs?: HttpRequestConfig, ignoreHandlingChanges = false) {\r\n\r\n    requestConfigs = requestConfigs || {};\r\n\r\n    // 扩展body\r\n    if (ignoreHandlingChanges !== true) {\r\n      if (method === HttpMethods.POST || method === HttpMethods.PUT || method === HttpMethods.PATCH) {\r\n        const body = requestConfigs.body || {};\r\n        requestConfigs.body = this.proxyExtend.extendBody(body);\r\n      }\r\n    }\r\n\r\n    // 扩展headers\r\n    const headers$ = this.proxyExtend.extendHeaders(requestConfigs.headers);\r\n\r\n    // 发送请求\r\n    return headers$.pipe(\r\n      switchMap((headers: HttpHeaders) => {\r\n        requestConfigs.headers = headers;\r\n        requestConfigs.observe = 'response';\r\n        return this.httpClient.request(method, url, requestConfigs).pipe(\r\n            map((result: any) => {\r\n              if (ignoreHandlingChanges === true) {\r\n                return result && result.body  && result.body.returnValue ? result.body.returnValue : result;\r\n              } else {\r\n                return  this.proxyExtend.onResponse(result);\r\n              }\r\n            }),\r\n            catchError((error: any) => {\r\n              return this.proxyExtend.onError(error, false, false);\r\n            })\r\n          );\r\n      }),\r\n      catchError((error: any) => {\r\n        return this.proxyExtend.onError(error, false, false);\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n","import { Type, makeDecorator, makePropDecorator } from '@farris/mobile-devkit';\r\n\r\n\r\n/**\r\n * 变量元数据名称\r\n */\r\nexport const VARIABLE_PROP_META = '@farris/bef VARIABLE_PROP_META';\r\n\r\n\r\n/**\r\n * NgVariable元数据接口\r\n */\r\nexport interface VariablePropMetadata {\r\n\r\n  /**\r\n   * 变量影射\r\n   */\r\n  mapping: string;\r\n\r\n}\r\n\r\n\r\n/**\r\n * NgVariable装饰器工厂接口\r\n */\r\nexport interface VariablePropDecorator {\r\n  (obj?: VariablePropMetadata): any;\r\n  new(obj?: VariablePropMetadata): any;\r\n}\r\n\r\n\r\n/**\r\n * NgVariable装饰工厂的工厂\r\n */\r\nexport const VariablePropMeta: VariablePropDecorator =\r\n  makePropDecorator(VARIABLE_PROP_META, (obj: VariablePropMetadata) => obj);\r\n","/*\r\n * @Author: Witt\r\n * @Date: 2019-03-07 17:24:38\r\n * @Last Modified by:   Witt\r\n * @Last Modified time: 2019-03-07 17:24:38\r\n */\r\n\r\nimport { Entity, EntityCollection, EntityManager } from '@farris/mobile-devkit';\r\nimport { ChangeDetail} from './types';\r\nimport { BefChangeBuilder } from './bef_change_builder';\r\nimport { BefChangeHandler } from './bef_change_handler';\r\n\r\n\r\n/**\r\n * 实体管理类：管理Entity和\r\n * @todo\r\n * 1、实体管理应该放在Devkit中；\r\n * 2、目前只是简单代码拆分，待进一步明确职责。\r\n */\r\nclass BefEntityManager<T extends Entity> extends EntityManager<T> {\r\n\r\n  /**\r\n   * ChangeDetail构造器\r\n   */\r\n  public changeBuilder: BefChangeBuilder;\r\n\r\n  /**\r\n   * ChangeDetail处理器\r\n   */\r\n  public changeHandler: BefChangeHandler;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(entityCollection: EntityCollection<T>) {\r\n    super(entityCollection);\r\n    this.changeBuilder = new BefChangeBuilder(this.entityCollection.entityType, this.entityCollection);\r\n    this.changeHandler = new BefChangeHandler();\r\n  }\r\n\r\n  /**\r\n   * 获取数据变更\r\n   */\r\n  public buildAllEntityChangeDetails(): ChangeDetail[] {\r\n    const changeDetails: ChangeDetail[] = [];\r\n    const entities = this.entityCollection.getAllEntities();\r\n    entities.forEach((entity: Entity) => {\r\n      if (entity.changes.length === 0) {\r\n        return;\r\n      }\r\n      const changeDetail = this.changeBuilder.build(entity.changes);\r\n\r\n      // 防止空id的变更被提交\r\n      // @todo：此处判断应该放到更底层，临时修复Bug。\r\n      if (changeDetail && changeDetail.ChangeInfo && changeDetail.ChangeInfo.DataId) {\r\n        changeDetails.push(changeDetail);\r\n      }\r\n    });\r\n    return changeDetails;\r\n  }\r\n\r\n  /**\r\n   * 获取单个实体\r\n   */\r\n  public buildEntityChangeDetailById(id: string): ChangeDetail {\r\n    const entity = this.entityCollection.getEntityById(id);\r\n    if (entity.changes.length === 0) {\r\n      return null;\r\n    }\r\n    const changeDetail = this.changeBuilder.build(entity.changes);\r\n    return changeDetail;\r\n  }\r\n\r\n  /**\r\n   * 应用数据变更\r\n   */\r\n  public handleDataChangeDetails(changeDetails: ChangeDetail[]): void {\r\n    this.changeHandler.handle(this.entityType, this.entityCollection, changeDetails);\r\n  }\r\n\r\n  // #endregion\r\n\r\n  /**\r\n   * 清空所有实体\r\n   */\r\n  public reset() {\r\n    this.entityCollection.clear();\r\n  }\r\n\r\n}\r\n\r\nexport { BefEntityManager };\r\n","import { format } from 'date-fns';\r\nimport { AppContext, UIState, Injector } from '@farris/mobile-devkit';\r\nimport { ChangeDetailType, ChangeDetail } from './types';\r\nimport { VariablePropMetadata } from './decorators';\r\nimport { BefChangeUtil } from './utils/index';\r\n\r\n/**\r\n * Be变量管理器\r\n */\r\nclass BefVariableManager {\r\n\r\n  /**\r\n   * 变量元数据\r\n   */\r\n  private ngVariableMap: Map<string, VariablePropMetadata>;\r\n\r\n  /**\r\n   * 最近向服务器端同步的变量值\r\n   */\r\n  private lastSyncValuesMap: Map<string, any>;\r\n\r\n  /**\r\n   * 当前最新的变量值\r\n   */\r\n  private latestVariableValues: Map<string, string>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(private ngVariables: any) {\r\n\r\n    this.ngVariableMap = new Map<string, VariablePropMetadata>();\r\n    this.lastSyncValuesMap = new Map<string, any>();\r\n    this.latestVariableValues = new Map<string, any>();\r\n\r\n    // 重新组织变量元数据\r\n    Object.keys(this.ngVariables).forEach((propName: string) => {\r\n      this.ngVariableMap.set(propName, ngVariables[propName]);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 设置变量值\r\n   */\r\n  public setValue(name: string, value: any) {\r\n    if (this.ngVariableMap.has(name) === false) {\r\n      throw new Error(`不存在名为${name}的变量`);\r\n    }\r\n    this.latestVariableValues.set(name, value);\r\n  }\r\n\r\n  /**\r\n   * 获取变量值\r\n   */\r\n  public getValue(name: string): any {\r\n    if (this.ngVariableMap.has(name) === false) {\r\n      throw new Error(`不存在名为${name}的变量`);\r\n    }\r\n    this.latestVariableValues.get(name);\r\n  }\r\n\r\n  /**\r\n   * 处理服务器端返回的变量变更\r\n   */\r\n  public handleChangeDetail(changeDetail: ChangeDetail): void {\r\n  }\r\n\r\n  /**\r\n   * Build ChangeDetail instance for all variables.\r\n   */\r\n  public buildChangeDetail(): ChangeDetail {\r\n    const changeDetail = BefChangeUtil.createEmpty(ChangeDetailType.Modify);\r\n    this.ngVariableMap.forEach((ngVariable: VariablePropMetadata, varName: string) => {\r\n      const newValue = this.latestVariableValues.get(varName);\r\n      const oldValue = this.lastSyncValuesMap.get(varName);\r\n      if (this.isValueEqual(newValue, oldValue) === false) {\r\n        this.lastSyncValuesMap.set(varName, newValue);\r\n        this.appendToChangeInfo(changeDetail, varName, newValue);\r\n      }\r\n    });\r\n\r\n    if (Object.keys(changeDetail.ChangeInfo).length === 0) {\r\n      return null;\r\n    }\r\n\r\n    return changeDetail;\r\n  }\r\n\r\n  /**\r\n   * Clear variable values cached in the innerValueMap property.\r\n   */\r\n  public reset() {\r\n    this.lastSyncValuesMap.clear();\r\n    this.latestVariableValues.clear();\r\n  }\r\n\r\n  /**\r\n   * Append changed variable to ChangeDetail instance.\r\n   */\r\n  private appendToChangeInfo(changeDetail: ChangeDetail, varName: string, varValue: any): void {\r\n    if (this.isUdtVariable(varValue) === true) {\r\n      const udtVarChangeDetail = BefChangeUtil.createEmpty(ChangeDetailType.Modify);\r\n      udtVarChangeDetail.ChangeInfo = varValue;\r\n      changeDetail.ChangeInfo[varName] = udtVarChangeDetail;\r\n    } else {\r\n      changeDetail.ChangeInfo[varName] = varValue;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 值比较\r\n   * @todo 临时采用这种方式\r\n   */\r\n  private isValueEqual(srcValue: any, dstValue: any): boolean {\r\n    return JSON.stringify(srcValue) === JSON.stringify(dstValue);\r\n  }\r\n\r\n  /**\r\n   * Check if the object is a plain object\r\n   */\r\n  private isUdtVariable(obj: any): boolean {\r\n    return obj && obj.constructor &&\r\n      obj.toString() === '[object Object]' &&\r\n      obj.constructor.prototype.hasOwnProperty('isPrototypeOf');\r\n  }\r\n\r\n}\r\n\r\nexport { BefVariableManager };\r\n","import { Observable, of, zip, EMPTY } from 'rxjs';\r\nimport { tap, map, switchMap } from 'rxjs/operators';\r\nimport { Entity, DataChangeType, } from '@farris/mobile-devkit';\r\n\r\nimport { QueryResult } from './types';\r\nimport { BefRepository } from './bef_repository';\r\nimport { BefProxy } from './bef_proxy';\r\n\r\n/**\r\n * Bef数据访问服务\r\n */\r\nclass BefDataService<T extends Entity> {\r\n\r\n  /**\r\n   * 实体仓库\r\n   */\r\n  private repository: BefRepository<T>;\r\n\r\n  /**\r\n   * Api代理类\r\n   */\r\n  private get apiProxy(): BefProxy {\r\n    return this.repository.apiProxy;\r\n  }\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(repository: BefRepository<T>) {\r\n    this.repository = repository;\r\n  }\r\n\r\n  /**\r\n   * 获取实体集合\r\n   */\r\n  public getList(filter: any[], sort: any[], pageSize: number | null, pageIndex: number | null): Observable<T[]> {\r\n    const entityFilter = this.buildEntityFilter(filter, sort, pageSize, pageIndex);\r\n    const query$ = this.apiProxy.extendQuery(entityFilter);\r\n    const result$ = query$.pipe(\r\n      map((returnValue: any) => {\r\n        this.repository.setPaginationInfo((returnValue as QueryResult).pagination)\r\n        const listData = (returnValue as QueryResult).result;\r\n        const entities = this.repository.buildEntities(listData);\r\n        if (this.determineIsAppend(pageIndex)) {\r\n          this.repository.entityCollection.addEntities(entities);\r\n        } else {\r\n          this.repository.entityCollection.loadEntities(entities);\r\n        }\r\n        return entities;\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 根据当前页判断是否追加\r\n   */\r\n  determineIsAppend(pageIndex: number): boolean {\r\n    return pageIndex > 1\r\n  }\r\n\r\n  /**\r\n   * 获取单个实体\r\n   */\r\n  public getById(id: string): Observable<T> {\r\n    const retrieve$ = this.apiProxy.extendRetrieve(id);\r\n    const result$ = retrieve$.pipe(\r\n      map((returnValue: any) => {\r\n        const entityData = returnValue;\r\n        const entity = this.repository.buildEntity(entityData);\r\n        this.repository.entityCollection.loadEntities([entity]);\r\n        return entity;\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 更新并对实体加锁\r\n   */\r\n  public editById(id: string): Observable<T> {\r\n    const entity = this.repository.entityCollection.getEntityById(id);\r\n    if (!entity) {\r\n      return of(null);\r\n    }\r\n\r\n    const retrieve$ = this.apiProxy.edit(id);\r\n    const result$ = retrieve$.pipe(\r\n      map((returnValue: any) => {\r\n        const entityData = returnValue.data;\r\n        const entityToUpdate = this.repository.entityCollection.getEntityById(id);\r\n        if (entityToUpdate && entityData) {\r\n          this.reloadEntityData(entityToUpdate, entityData);\r\n        }\r\n        return entityToUpdate;\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 根据id更新实体\r\n   * @param id 实体id\r\n   */\r\n  public updateById(id: string): Observable<T> {\r\n    const entity = this.repository.entityCollection.getEntityById(id);\r\n    if (!entity) {\r\n      return EMPTY;\r\n    }\r\n\r\n    const retrieve$ = this.apiProxy.extendRetrieve(id);\r\n    const result$ = retrieve$.pipe(\r\n      map((returnValue: any) => {\r\n        const entityData = returnValue;\r\n        const entityToUpdate = this.repository.entityCollection.getEntityById(id);\r\n        this.reloadEntityData(entityToUpdate, entityData);\r\n        return entityToUpdate;\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 重新加载实体数据\r\n   */\r\n  private reloadEntityData(entity: Entity, entityData: any): void {\r\n    if (!entity) {\r\n      return;\r\n    }\r\n    entity.load(entityData);\r\n    entity.changes.splice(0, entity.changes.length);\r\n  }\r\n\r\n  /**\r\n   * 创建新实体，并加载\r\n   */\r\n  public create(defaultValue?: any) {\r\n    const result$ = this.apiProxy.create(defaultValue);\r\n    return result$.pipe(\r\n      map((returnValue: any) => {\r\n        const newEntityData = returnValue;\r\n        const newEntity = this.repository.buildEntity(newEntityData);\r\n        this.repository.entityCollection.loadEntities([newEntity]);\r\n        this.repository.dataChangeHistory.addChange({ dataId: newEntity.primaryValue, changeType: DataChangeType.Add });\r\n        return newEntity;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 追加实体\r\n   */\r\n  public append(defaultValue?: any): Observable<T> {\r\n    const append$ = this.apiProxy.create(defaultValue);\r\n    return append$.pipe(\r\n      map((returnValue: any) => {\r\n        const newEntityData = returnValue;\r\n        const newEntity = this.repository.buildEntity(newEntityData);\r\n        this.repository.entityCollection.addEntity(newEntity);\r\n        return newEntity;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 创建子实体，并追加\r\n   * @param fpath 父路径，格式形如：/1/edus（从表）或/1/edus/2/grades（从从表）\r\n   */\r\n  public appendByPath(fpath: string): Observable<Entity> {\r\n    const append$ = this.apiProxy.createByPath(fpath);\r\n    return append$.pipe(\r\n      map((returnValue: any) => {\r\n        const newEntityData = returnValue;\r\n        const newEntity = this.repository.entityManager.appendEntityByPath(fpath, newEntityData, newEntityData);\r\n        return newEntity;\r\n      })\r\n    );\r\n  }\r\n\r\n\r\n  /**\r\n   * 根据id删除实体\r\n   * @param id 内码\r\n   */\r\n  public removeById(id: string, ifSave?: boolean): Observable<boolean> {\r\n\r\n    ifSave = (ifSave === undefined) ? true : ifSave;\r\n    const delete$ = this.apiProxy.extendDelete(id);\r\n\r\n    // 从本地实体集合中移除\r\n    return delete$.pipe(\r\n      switchMap(() => {\r\n        // 执行保存\r\n        if (ifSave === true) {\r\n          return this.applyChangesById(id).pipe(tap(result => {\r\n            if (result) {\r\n              this.repository.entityCollection.removeEntityById(id);\r\n            }\r\n          }));\r\n        } else {\r\n\r\n          // 从实体集合中删除\r\n          this.repository.entityCollection.removeEntityById(id);\r\n          this.repository.dataChangeHistory.addChange({ dataId: id, changeType: DataChangeType.Delete });\r\n          return of(true);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 删除并保存\r\n   * @param id 要删除的实体id\r\n   */\r\n  public removeAndSaveById(id: string) {\r\n    const delete$ = this.apiProxy.deleteAndSave(id);\r\n    const result$ = delete$.pipe(\r\n      switchMap(() => {\r\n        this.repository.entityCollection.removeEntityById(id);\r\n        return of(true);\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 批量删除\r\n   * @param id 内码\r\n   */\r\n  public removeByIds(ids: string[]): Observable<boolean> {\r\n\r\n    // 服务器端删除\r\n    const delete$ = this.apiProxy.extendBatchDelete(ids);\r\n\r\n    // 从本地实体集合中移除\r\n    return delete$.pipe(\r\n      switchMap(() => {\r\n        // 执行保存\r\n        return this.applyChangesByIdArray(ids).pipe(\r\n          tap(result => {\r\n            if (result) {\r\n              // 从实体集合中删除\r\n              this.repository.entityCollection.removeEntities(\r\n                (value) => {\r\n                  return this.checkEntityValueExists(value, ids);\r\n                }\r\n              );\r\n            }\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 检测实体的主键值是否存在于数组中，如果存在返回true\r\n   * @param array 待遍历数组\r\n   */\r\n  private checkEntityValueExists(entity: Entity, primaryValueArray: any[]): boolean {\r\n    let isExistInTargetArray = false;\r\n\r\n    for (let i = 0; i < primaryValueArray.length; i++) {\r\n      if (entity.primaryValue === primaryValueArray[i]) {\r\n        isExistInTargetArray = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return isExistInTargetArray;\r\n  }\r\n\r\n  /**\r\n   * 删除子级\r\n   * @param path 路径\r\n   * @param id   内码\r\n   */\r\n  public removeByPath(fpath: string, id: string): Observable<boolean> {\r\n\r\n    const delete$ = this.apiProxy.extendDeletByPath(fpath, id);\r\n\r\n    // 从本地实体集合中移除\r\n    return delete$.pipe(\r\n      map(() => {\r\n        this.repository.entityManager.removeEntityByPath(fpath, id);\r\n        this.repository.dataChangeHistory.addChange({ fpath, dataId: id, changeType: DataChangeType.Delete });\r\n        return true;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 将id对应的实体的变更提交的服务器端\r\n   */\r\n  public updateChangesById(id: string): Observable<boolean> {\r\n    const entity = this.repository.entityCollection.getEntityById(id);\r\n\r\n    // 变更集为空\r\n    if (!entity.changes || entity.changes.length === 0) {\r\n      return of(true);\r\n    }\r\n\r\n    const changeDetail = this.repository.entityManager.buildEntityChangeDetailById(id);\r\n    const update$ = this.apiProxy.update(changeDetail);\r\n    const result$ = update$.pipe(\r\n      tap(() => {\r\n        this.repository.entityManager.clearEntityChangesById(id);\r\n      }),\r\n      map(() => {\r\n        return true;\r\n      })\r\n    );\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 提交所有变更\r\n   */\r\n  public updateAllChanges(): Observable<boolean> {\r\n\r\n    // 遍历实体，提交变更\r\n    const updateResults: Observable<boolean>[] = [];\r\n    const entities: Entity[] = this.repository.entityCollection.toArray();\r\n    if (entities.length === 0) {\r\n      return of(true);\r\n    }\r\n\r\n    entities.forEach((entity: Entity) => {\r\n      const updateResult$ = this.updateChangesById(entity.primaryValue);\r\n      updateResults.push(updateResult$);\r\n    });\r\n\r\n    // 串联流\r\n    const result$ = zip(...updateResults).pipe(\r\n      map(() => {\r\n        return true;\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 应用变更\r\n   */\r\n  public applyChanges(): Observable<boolean> {\r\n    const save$ = this.apiProxy.save();\r\n    const result$ = save$.pipe(\r\n      tap(() => {\r\n        this.repository.entityManager.clearAllEntityChanges();\r\n        this.repository.dataChangeHistory.clear();\r\n      }),\r\n      map(() => {\r\n        return true;\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 应用idArray对应数据的变更\r\n   */\r\n  public applyChangesByIdArray(ids: string[]): Observable<boolean> {\r\n    const save$ = this.apiProxy.save();\r\n    const result$ = save$.pipe(\r\n      tap(() => {\r\n        this.repository.entityManager.clearEntityChangesByIds(ids);\r\n        this.repository.dataChangeHistory.clearByIds(ids);\r\n      }),\r\n      map(() => {\r\n        return true;\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 应用id对应数据的变更\r\n   */\r\n  public applyChangesById(id: string): Observable<boolean> {\r\n    const save$ = this.apiProxy.save();\r\n    const result$ = save$.pipe(\r\n      tap(() => {\r\n        this.repository.entityManager.clearEntityChangesById(id);\r\n        this.repository.dataChangeHistory.clearByIds([id]);\r\n      }),\r\n      map(() => {\r\n        return true;\r\n      })\r\n    );\r\n\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 取消变更\r\n   */\r\n  public cancelChanges(): Observable<boolean> {\r\n    const cancel$ = this.apiProxy.cancel();\r\n    const result$ = cancel$.pipe(\r\n      tap(() => {\r\n        this.repository.entityManager.clearAllEntityChanges();\r\n        this.repository.dataChangeHistory.clear();\r\n      }),\r\n      map(() => {\r\n        return true;\r\n      })\r\n    );\r\n    return result$;\r\n  }\r\n\r\n  /**\r\n   * 构造EntityFilter\r\n   */\r\n  private buildEntityFilter(filter: any[], sort: any[], pageSize: number, pageIndex: number) {\r\n    const entityFilter = {\r\n      FilterConditions: filter,\r\n      SortConditions: sort,\r\n      IsUsePagination: pageSize === 0 ? false : true,\r\n      Pagination: {\r\n        PageIndex: pageIndex,\r\n        PageSize: pageSize,\r\n        PageCount: 0,\r\n        TotalCount: 0\r\n      }\r\n    };\r\n\r\n    return entityFilter;\r\n  }\r\n}\r\n\r\nexport { BefDataService };\r\n","/**\r\n * 框架Session服务\r\n */\r\nclass FrameworkSessionService {\r\n\r\n  constructor() {\r\n  }\r\n\r\n  /**\r\n   * 获取用户SessionId\r\n   */\r\n  getUserSessionId(): string {\r\n    const userSessionId = window.localStorage.getItem('sessionId');\r\n    return userSessionId;\r\n  }\r\n\r\n  /**\r\n   * 获取框架菜单id\r\n   */\r\n  getFuncSessionId(): string {\r\n    const frmMobileService = window['frmMobileService'];\r\n    if (frmMobileService) {\r\n      return frmMobileService.rtf.commonVariable.formToken();\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 获取当前会话id\r\n   */\r\n  getCurrentSessionId(): string {\r\n\r\n    let funcSessionId = window.sessionStorage.getItem('FuncSessionId');\r\n    let latestFuncSessionId = this.getFuncSessionId();\r\n    if (latestFuncSessionId && latestFuncSessionId !== funcSessionId) {\r\n      \r\n      // 设置为空，触发后续逻辑更新最新FuncSessionId\r\n      funcSessionId = null;\r\n    }\r\n\r\n    if (!funcSessionId) {\r\n      funcSessionId = this.getFuncSessionId();\r\n      if (funcSessionId) {\r\n        window.sessionStorage.setItem('FuncSessionId', funcSessionId)\r\n      }\r\n    }\r\n    return funcSessionId;\r\n  }\r\n\r\n}\r\n\r\nexport { FrameworkSessionService };\r\n","import { Observable, of, EMPTY, throwError } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { Entity, HttpHeaders, InjectFlags, Injector } from '@farris/mobile-devkit';\r\nimport { IErrorServe, ResponseInfo } from './types';\r\nimport { BefRepository } from './bef_repository';\r\nimport { RequestInfoUtil } from './utils';\r\n\r\nimport { BE_ERROR_HANDLER__TOKEN } from './tokens';\r\n\r\n/**\r\n * 代理钩子\r\n */\r\nexport interface IProxyExtend {\r\n  extendBody(body: any): { [propName: string]: any };\r\n  extendHeaders(headers: { [propName: string]: any }): Observable<any>;\r\n  onResponse?(response: ResponseInfo, ignoreChanges?: boolean);\r\n  onError?(error: any, selfHandError: boolean, ignoreError: boolean): Observable<any>;\r\n}\r\n\r\n/**\r\n * Bef代理扩展类\r\n */\r\nexport class BefProxyExtend implements IProxyExtend {\r\n\r\n  /**\r\n * 注入器\r\n */\r\n  private get injector() {\r\n    return this.repository.getInjector();\r\n  }\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(private repository: BefRepository<Entity>) { }\r\n\r\n  /**\r\n   * 返回结果处理\r\n   */\r\n  public onResponse(response: any): ResponseInfo {\r\n    this.handleResponseHeaders(response.headers);\r\n    return this.handleResponseBody(response.body);\r\n  }\r\n\r\n  /**\r\n   * 处理服务器端返回的headers数据\r\n   */\r\n  private handleResponseHeaders(headers: any): void {\r\n    this.repository.sessionService.handleResponseHeaders(headers);\r\n  }\r\n\r\n  /**\r\n   * 处理服务器端返回的的body数据\r\n   */\r\n  private handleResponseBody(responseInfo: ResponseInfo): ResponseInfo {\r\n    if (responseInfo && responseInfo.innerDataChange) {\r\n      this.repository.entityManager.handleDataChangeDetails(responseInfo.innerDataChange);\r\n    }\r\n    this.repository.entityManager.clearAllEntityChanges();\r\n\r\n    if (responseInfo && responseInfo.hasOwnProperty('returnValue')) {\r\n      return responseInfo.returnValue;\r\n    } else {\r\n      return responseInfo;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 错误处理\r\n   */\r\n  public onError(error: any): Observable<any> {\r\n    // 获取所有load组件实例，消除\r\n    const loadingServices = window['DEVKIT_LOADING_SERVICE'];\r\n    if (loadingServices && loadingServices instanceof Array && loadingServices.length > 0) {\r\n      for (const loadingService of loadingServices) {\r\n        if (typeof (loadingService.hide) === 'function') {\r\n          loadingService.hide();\r\n        }\r\n      }\r\n    }\r\n    // 捕获到异常，处理异常信息\r\n    const exceptionService = this.injector.get<IErrorServe>(BE_ERROR_HANDLER__TOKEN, null)\r\n    if (!!exceptionService) {\r\n      exceptionService.show(error)\r\n      return EMPTY;\r\n    } else {\r\n      return EMPTY;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 扩展Headers\r\n   */\r\n  public extendHeaders(headers: HttpHeaders): Observable<{ [propName: string]: any }> {\r\n    const $getSessionId = this.repository.sessionService.getBeSessionId();\r\n    return $getSessionId.pipe(\r\n      switchMap(() => {\r\n        headers = this.repository.sessionService.extendRequestHeaders(headers);\r\n        return of(headers);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * 扩展Body\r\n   */\r\n  public extendBody(body: any): any {\r\n    return RequestInfoUtil.appendRequestInfoToBody(body, this.repository);\r\n  }\r\n\r\n}\r\n","\r\nimport { MetadataUtil, Entity, AppContext, InjectFlags, HttpClient } from '@farris/mobile-devkit';\r\n\r\nimport { VARIABLE_PROP_META } from './decorators';\r\nimport { BefEntityManager } from './bef_entity_manager';\r\nimport { BefVariableManager } from './bef_variable_manager';\r\nimport { BefSessionHandlingStrategyFactory, BefSessionService } from './session/index';\r\nimport { BefDataService } from './bef_data_service';\r\nimport { FrameworkSessionService } from './framework_session_service';\r\nimport { BE_SESSION_HANDLING_STRATEGY_TOKEN } from './tokens';\r\nimport { BefRepository } from './bef_repository';\r\nimport { BefProxyExtend } from './bef_proxy_extend';\r\n\r\n/**\r\n * BefRepository初始化器\r\n * @summary\r\n * 为了抽离这部分路径，强制对外暴露了Repository的相关属性，待优化。\r\n */\r\nclass BefRepositoryInitializer {\r\n\r\n  /**\r\n   * BefRepository实例\r\n   */\r\n  private repository: BefRepository<Entity>;\r\n\r\n  /**\r\n   * 注入器\r\n   */\r\n  private get injector() {\r\n    return this.repository.getInjector();\r\n  }\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(repository: BefRepository<Entity>) {\r\n    this.repository = repository;\r\n  }\r\n\r\n  /**\r\n   * 初始化\r\n   */\r\n  public init() {\r\n    this.initAppContext();\r\n    this.initEntityManager();\r\n    this.initVariableManager();\r\n    this.initApiProxy();\r\n    this.initSessionService();\r\n    this.initDataService();\r\n  }\r\n\r\n  /**\r\n   * 初始化应用上下文\r\n   */\r\n  private initAppContext() {\r\n    this.repository.appContext = this.injector.get<AppContext>(AppContext);\r\n  }\r\n\r\n  /**\r\n   * 初始化EntityManager\r\n   */\r\n  private initEntityManager() {\r\n    this.repository.entityManager = new BefEntityManager(this.repository.entityCollection);\r\n  }\r\n\r\n  /**\r\n   * 初始化VariableManager\r\n   */\r\n  private initVariableManager() {\r\n    const ngVariables = MetadataUtil.getPropsMetadatasByName(this.repository.constructor, VARIABLE_PROP_META);\r\n    this.repository.variableManager = new BefVariableManager(ngVariables);\r\n  }\r\n\r\n  /**\r\n   * 初始化Proxy\r\n   */\r\n  private initApiProxy() {\r\n    this.repository.apiProxy = this.injector.get(this.repository.apiProxyType);\r\n    const apiProxyExtend = new BefProxyExtend(this.repository);\r\n    this.repository.apiProxy.setProxyExtend(apiProxyExtend);\r\n  }\r\n\r\n  /**\r\n   * 初始化SessionService\r\n   */\r\n  private initSessionService() {\r\n    let handlingStrategyName = this.injector.get<string>(BE_SESSION_HANDLING_STRATEGY_TOKEN, null, InjectFlags.Optional);\r\n    handlingStrategyName = handlingStrategyName || 'SeparatedSession';\r\n    const frmSessionService = this.injector.get<FrameworkSessionService>(FrameworkSessionService);\r\n    const httpClient = this.injector.get<HttpClient>(HttpClient);\r\n    const baseUrl = `${this.repository.apiProxy.baseUrl}`;\r\n    const sessionHandlingStrategyFactory = new BefSessionHandlingStrategyFactory();\r\n    const sessionHandlingStrategy = sessionHandlingStrategyFactory.create(handlingStrategyName, frmSessionService, baseUrl, httpClient);\r\n    this.repository.sessionService = new BefSessionService(sessionHandlingStrategy);\r\n  }\r\n\r\n  /**\r\n   * 初始化DataService\r\n   */\r\n  private initDataService() {\r\n    this.repository.dataService = new BefDataService(this.repository);\r\n  }\r\n}\r\n\r\nexport { BefRepositoryInitializer };\r\n","import { Observable } from 'rxjs';\r\nimport { Type, Entity, AppContext, Repository, Injector} from '@farris/mobile-devkit';\r\n\r\nimport { BefEntityManager } from './bef_entity_manager';\r\nimport { BefVariableManager } from './bef_variable_manager';\r\nimport { BefProxy } from './bef_proxy';\r\nimport { BefSessionService } from './session/index';\r\nimport { BefDataService } from './bef_data_service';\r\nimport { BefRepositoryInitializer } from './bef_repository_initializer';\r\n\r\n/**\r\n * Bef实体仓库实现类\r\n */\r\nabstract class BefRepository<T extends Entity> extends Repository<T> {\r\n\r\n  /**\r\n   * 名称\r\n   */\r\n  public abstract name: string;\r\n\r\n  /**\r\n   * Bef代理\r\n   */\r\n  public abstract apiProxyType: Type<BefProxy>;\r\n\r\n  /**\r\n   * 应用上下文\r\n   */\r\n  public appContext: AppContext;\r\n\r\n  /**\r\n   * 实体管理器\r\n   */\r\n  public entityManager: BefEntityManager<T>;\r\n\r\n  /**\r\n   * 变量管理器\r\n   */\r\n  public variableManager: BefVariableManager;\r\n\r\n  /**\r\n   * API代理\r\n   */\r\n  public apiProxy: BefProxy;\r\n\r\n  /**\r\n   * Bef会话管理\r\n   */\r\n  public sessionService: BefSessionService;\r\n\r\n  /**\r\n   * Bef数据操作\r\n   */\r\n  public dataService: BefDataService<T>;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(protected injector: Injector) {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * 初始化\r\n   * @summary\r\n   * 实现类的构造函数中调用才能正确获取apiProxy\r\n   */\r\n  protected init() {\r\n    super.init();\r\n    const initializer = new BefRepositoryInitializer(this);\r\n    initializer.init();\r\n  }\r\n\r\n  /**\r\n   * 获取注入器\r\n   */\r\n  public getInjector() {\r\n    return this.injector;\r\n  }\r\n\r\n  /**\r\n   * 获取实体数组\r\n   */\r\n  public getEntities(filter: any[], sort: any[], pageSize: number | null, pageIndex: number | null): Observable<T[]> {\r\n    return this.dataService.getList(filter, sort, pageSize, pageIndex);\r\n  }\r\n\r\n  /**\r\n   * 获取主键为id的实体\r\n   * @param id 实体id\r\n   */\r\n  public getEntityById(id: string): Observable<T> {\r\n    return this.dataService.getById(id);\r\n  }\r\n\r\n  /**\r\n   * 更新实体数据\r\n   */\r\n  public updateEntityById(id: string): Observable<T> {\r\n    return this.dataService.updateById(id);\r\n  }\r\n\r\n  /**\r\n   * 更新实体数据并加锁\r\n   */\r\n  public editEntityById(id: string): Observable<T> {\r\n    return this.dataService.editById(id);\r\n  }\r\n\r\n  /**\r\n   * 创建实体\r\n   */\r\n  public createEntity(defaultValue?: any): Observable<T> {\r\n    return this.dataService.create(defaultValue);\r\n  }\r\n\r\n  /**\r\n   * 追加实体\r\n   */\r\n  public appendEntity(defaultValue?: any): Observable<T> {\r\n    return this.dataService.append(defaultValue);\r\n  }\r\n\r\n  /**\r\n   * 创建子实体，并追加\r\n   * @param fpath 父路径，格式形如：/1/edus（从表）或/1/edus/2/grades（从从表）\r\n   */\r\n  public appendEntityByPath(fpath: string): Observable<Entity> {\r\n    return this.dataService.appendByPath(fpath);\r\n  }\r\n\r\n  /**\r\n   * 根据id删除实体\r\n   */\r\n  public removeEntityById(id: string, ifSave?: boolean): Observable<boolean> {\r\n    return this.dataService.removeById(id, ifSave);\r\n  }\r\n\r\n  /**\r\n   * 根据ids批量删除实体\r\n   */\r\n  public removeEntitiesByIds(ids: string[]) {\r\n    return this.dataService.removeByIds(ids);\r\n  }\r\n\r\n  /**\r\n   * 根据id删除实体并执行保存\r\n   */\r\n  public removeEntityAndSaveById(id: string): Observable<boolean> {\r\n    return this.dataService.removeAndSaveById(id);\r\n  }\r\n\r\n  /**\r\n   * 删除子级\r\n   */\r\n  public removeEntityByPath(fpath: string, id: string): Observable<boolean> {\r\n    return this.dataService.removeByPath(fpath, id);\r\n  }\r\n\r\n  /**\r\n   * 保存主键为id的实体\r\n   */\r\n  public saveEntityById(id: string): Observable<boolean> {\r\n    return this.dataService.applyChangesById(id);\r\n  }\r\n\r\n  /**\r\n   * 批量保存\r\n   */\r\n  public saveEntities(): Observable<boolean> {\r\n    return this.dataService.applyChanges();\r\n  }\r\n\r\n  /**\r\n   * 取消实体变更\r\n   */\r\n  public cancelEntityChanges(): Observable<boolean> {\r\n    return this.dataService.cancelChanges();\r\n  }\r\n\r\n  /**\r\n   * 清空Repositoy内的数据和变量\r\n   */\r\n  public reset() {\r\n    this.entityManager.reset();\r\n    this.variableManager.reset();\r\n    this.sessionService.clearBeSessionId();\r\n  }\r\n}\r\n\r\nexport { BefRepository };\r\n","import { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Entity, HttpMethods, HttpRequestConfig, ViewModelContext } from '@farris/mobile-devkit';\r\nimport { ResponseInfo } from './types';\r\nimport { RequestInfoUtil } from './utils/index';\r\nimport { BefRepository } from './bef_repository';\r\n\r\n/**\r\n * Bef帮助取数服务\r\n */\r\nexport class BefLookupDataService {\r\n\r\n  private viewModelContext: ViewModelContext;\r\n\r\n  private befRepository: BefRepository<Entity>;\r\n\r\n  public context: any;\r\n\r\n  /**\r\n   * 构造函数\r\n   */\r\n  constructor(viewModelContext: ViewModelContext) {\r\n    this.viewModelContext = viewModelContext;\r\n    this.befRepository = this.viewModelContext.repository as BefRepository<Entity>\r\n  }\r\n\r\n  /**\r\n   * 帮助取数\r\n   */\r\n  public getData(helpMetadataId: string, queryParam?: any): Observable<any> {\r\n    const tableName = helpMetadataId.split('.')[0];\r\n    const labelId = helpMetadataId.split('.')[1];\r\n    queryParam = queryParam || {};\r\n    return this.extendGetHelpData(labelId, tableName, queryParam);\r\n  }\r\n\r\n  /**\r\n   * 扩展的帮助取数\r\n   */\r\n  private extendGetHelpData(labelId: string, tableName: string, queryParam: any): Observable<any> {\r\n    const url = `${this.befRepository.apiProxy.baseUrl}/extension/elementhelps`;\r\n    const requestInfo = RequestInfoUtil.buildRequestInfo(this.befRepository);\r\n    const body = {\r\n      labelId: labelId,\r\n      nodeCode: tableName,\r\n      queryParam: queryParam,\r\n      requestInfo: requestInfo\r\n    };\r\n    const requestConfig: HttpRequestConfig = {\r\n      body: body\r\n    };\r\n\r\n    const result$ = this.befRepository.apiProxy.request(HttpMethods.PUT, url, requestConfig);\r\n    return result$.pipe(\r\n      map((result: any) => {\r\n        return result;\r\n      })\r\n    );\r\n  }\r\n}"]}