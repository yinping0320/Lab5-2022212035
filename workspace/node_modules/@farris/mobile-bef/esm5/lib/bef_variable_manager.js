/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_variable_manager.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetailType } from './types';
import { BefChangeUtil } from './utils/index';
/**
 * Be变量管理器
 */
var /**
 * Be变量管理器
 */
BefVariableManager = /** @class */ (function () {
    /**
     * 构造函数
     */
    function BefVariableManager(ngVariables) {
        var _this = this;
        this.ngVariables = ngVariables;
        this.ngVariableMap = new Map();
        this.lastSyncValuesMap = new Map();
        this.latestVariableValues = new Map();
        // 重新组织变量元数据
        Object.keys(this.ngVariables).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        function (propName) {
            _this.ngVariableMap.set(propName, ngVariables[propName]);
        }));
    }
    /**
     * 设置变量值
     */
    /**
     * 设置变量值
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    BefVariableManager.prototype.setValue = /**
     * 设置变量值
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    function (name, value) {
        if (this.ngVariableMap.has(name) === false) {
            throw new Error("\u4E0D\u5B58\u5728\u540D\u4E3A" + name + "\u7684\u53D8\u91CF");
        }
        this.latestVariableValues.set(name, value);
    };
    /**
     * 获取变量值
     */
    /**
     * 获取变量值
     * @param {?} name
     * @return {?}
     */
    BefVariableManager.prototype.getValue = /**
     * 获取变量值
     * @param {?} name
     * @return {?}
     */
    function (name) {
        if (this.ngVariableMap.has(name) === false) {
            throw new Error("\u4E0D\u5B58\u5728\u540D\u4E3A" + name + "\u7684\u53D8\u91CF");
        }
        this.latestVariableValues.get(name);
    };
    /**
     * 处理服务器端返回的变量变更
     */
    /**
     * 处理服务器端返回的变量变更
     * @param {?} changeDetail
     * @return {?}
     */
    BefVariableManager.prototype.handleChangeDetail = /**
     * 处理服务器端返回的变量变更
     * @param {?} changeDetail
     * @return {?}
     */
    function (changeDetail) {
    };
    /**
     * Build ChangeDetail instance for all variables.
     */
    /**
     * Build ChangeDetail instance for all variables.
     * @return {?}
     */
    BefVariableManager.prototype.buildChangeDetail = /**
     * Build ChangeDetail instance for all variables.
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var changeDetail = BefChangeUtil.createEmpty(ChangeDetailType.Modify);
        this.ngVariableMap.forEach((/**
         * @param {?} ngVariable
         * @param {?} varName
         * @return {?}
         */
        function (ngVariable, varName) {
            /** @type {?} */
            var newValue = _this.latestVariableValues.get(varName);
            /** @type {?} */
            var oldValue = _this.lastSyncValuesMap.get(varName);
            if (_this.isValueEqual(newValue, oldValue) === false) {
                _this.lastSyncValuesMap.set(varName, newValue);
                _this.appendToChangeInfo(changeDetail, varName, newValue);
            }
        }));
        if (Object.keys(changeDetail.ChangeInfo).length === 0) {
            return null;
        }
        return changeDetail;
    };
    /**
     * Clear variable values cached in the innerValueMap property.
     */
    /**
     * Clear variable values cached in the innerValueMap property.
     * @return {?}
     */
    BefVariableManager.prototype.reset = /**
     * Clear variable values cached in the innerValueMap property.
     * @return {?}
     */
    function () {
        this.lastSyncValuesMap.clear();
        this.latestVariableValues.clear();
    };
    /**
     * Append changed variable to ChangeDetail instance.
     */
    /**
     * Append changed variable to ChangeDetail instance.
     * @private
     * @param {?} changeDetail
     * @param {?} varName
     * @param {?} varValue
     * @return {?}
     */
    BefVariableManager.prototype.appendToChangeInfo = /**
     * Append changed variable to ChangeDetail instance.
     * @private
     * @param {?} changeDetail
     * @param {?} varName
     * @param {?} varValue
     * @return {?}
     */
    function (changeDetail, varName, varValue) {
        if (this.isUdtVariable(varValue) === true) {
            /** @type {?} */
            var udtVarChangeDetail = BefChangeUtil.createEmpty(ChangeDetailType.Modify);
            udtVarChangeDetail.ChangeInfo = varValue;
            changeDetail.ChangeInfo[varName] = udtVarChangeDetail;
        }
        else {
            changeDetail.ChangeInfo[varName] = varValue;
        }
    };
    /**
     * 值比较
     * @todo 临时采用这种方式
     */
    /**
     * 值比较
     * \@todo 临时采用这种方式
     * @private
     * @param {?} srcValue
     * @param {?} dstValue
     * @return {?}
     */
    BefVariableManager.prototype.isValueEqual = /**
     * 值比较
     * \@todo 临时采用这种方式
     * @private
     * @param {?} srcValue
     * @param {?} dstValue
     * @return {?}
     */
    function (srcValue, dstValue) {
        return JSON.stringify(srcValue) === JSON.stringify(dstValue);
    };
    /**
     * Check if the object is a plain object
     */
    /**
     * Check if the object is a plain object
     * @private
     * @param {?} obj
     * @return {?}
     */
    BefVariableManager.prototype.isUdtVariable = /**
     * Check if the object is a plain object
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return obj && obj.constructor &&
            obj.toString() === '[object Object]' &&
            obj.constructor.prototype.hasOwnProperty('isPrototypeOf');
    };
    return BefVariableManager;
}());
if (false) {
    /**
     * 变量元数据
     * @type {?}
     * @private
     */
    BefVariableManager.prototype.ngVariableMap;
    /**
     * 最近向服务器端同步的变量值
     * @type {?}
     * @private
     */
    BefVariableManager.prototype.lastSyncValuesMap;
    /**
     * 当前最新的变量值
     * @type {?}
     * @private
     */
    BefVariableManager.prototype.latestVariableValues;
    /**
     * @type {?}
     * @private
     */
    BefVariableManager.prototype.ngVariables;
}
export { BefVariableManager };
//# sourceMappingURL=data:application/json;base64,