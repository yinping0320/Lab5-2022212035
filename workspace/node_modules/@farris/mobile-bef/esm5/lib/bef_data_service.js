/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_data_service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { of, zip, EMPTY } from 'rxjs';
import { tap, map, switchMap } from 'rxjs/operators';
import { DataChangeType, } from '@farris/mobile-devkit';
/**
 * Bef数据访问服务
 * @template T
 */
var /**
 * Bef数据访问服务
 * @template T
 */
BefDataService = /** @class */ (function () {
    /**
     * 构造函数
     */
    function BefDataService(repository) {
        this.repository = repository;
    }
    Object.defineProperty(BefDataService.prototype, "apiProxy", {
        /**
         * Api代理类
         */
        get: /**
         * Api代理类
         * @private
         * @return {?}
         */
        function () {
            return this.repository.apiProxy;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 获取实体集合
     */
    /**
     * 获取实体集合
     * @param {?} filter
     * @param {?} sort
     * @param {?} pageSize
     * @param {?} pageIndex
     * @return {?}
     */
    BefDataService.prototype.getList = /**
     * 获取实体集合
     * @param {?} filter
     * @param {?} sort
     * @param {?} pageSize
     * @param {?} pageIndex
     * @return {?}
     */
    function (filter, sort, pageSize, pageIndex) {
        var _this = this;
        /** @type {?} */
        var entityFilter = this.buildEntityFilter(filter, sort, pageSize, pageIndex);
        /** @type {?} */
        var query$ = this.apiProxy.extendQuery(entityFilter);
        /** @type {?} */
        var result$ = query$.pipe(map((/**
         * @param {?} returnValue
         * @return {?}
         */
        function (returnValue) {
            _this.repository.setPaginationInfo(((/** @type {?} */ (returnValue))).pagination);
            /** @type {?} */
            var listData = ((/** @type {?} */ (returnValue))).result;
            /** @type {?} */
            var entities = _this.repository.buildEntities(listData);
            if (_this.determineIsAppend(pageIndex)) {
                _this.repository.entityCollection.addEntities(entities);
            }
            else {
                _this.repository.entityCollection.loadEntities(entities);
            }
            return entities;
        })));
        return result$;
    };
    /**
     * 根据当前页判断是否追加
     */
    /**
     * 根据当前页判断是否追加
     * @param {?} pageIndex
     * @return {?}
     */
    BefDataService.prototype.determineIsAppend = /**
     * 根据当前页判断是否追加
     * @param {?} pageIndex
     * @return {?}
     */
    function (pageIndex) {
        return pageIndex > 1;
    };
    /**
     * 获取单个实体
     */
    /**
     * 获取单个实体
     * @param {?} id
     * @return {?}
     */
    BefDataService.prototype.getById = /**
     * 获取单个实体
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        /** @type {?} */
        var retrieve$ = this.apiProxy.extendRetrieve(id);
        /** @type {?} */
        var result$ = retrieve$.pipe(map((/**
         * @param {?} returnValue
         * @return {?}
         */
        function (returnValue) {
            /** @type {?} */
            var entityData = returnValue;
            /** @type {?} */
            var entity = _this.repository.buildEntity(entityData);
            _this.repository.entityCollection.loadEntities([entity]);
            return entity;
        })));
        return result$;
    };
    /**
     * 更新并对实体加锁
     */
    /**
     * 更新并对实体加锁
     * @param {?} id
     * @return {?}
     */
    BefDataService.prototype.editById = /**
     * 更新并对实体加锁
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        /** @type {?} */
        var entity = this.repository.entityCollection.getEntityById(id);
        if (!entity) {
            return of(null);
        }
        /** @type {?} */
        var retrieve$ = this.apiProxy.edit(id);
        /** @type {?} */
        var result$ = retrieve$.pipe(map((/**
         * @param {?} returnValue
         * @return {?}
         */
        function (returnValue) {
            /** @type {?} */
            var entityData = returnValue.data;
            /** @type {?} */
            var entityToUpdate = _this.repository.entityCollection.getEntityById(id);
            if (entityToUpdate && entityData) {
                _this.reloadEntityData(entityToUpdate, entityData);
            }
            return entityToUpdate;
        })));
        return result$;
    };
    /**
     * 根据id更新实体
     * @param id 实体id
     */
    /**
     * 根据id更新实体
     * @param {?} id 实体id
     * @return {?}
     */
    BefDataService.prototype.updateById = /**
     * 根据id更新实体
     * @param {?} id 实体id
     * @return {?}
     */
    function (id) {
        var _this = this;
        /** @type {?} */
        var entity = this.repository.entityCollection.getEntityById(id);
        if (!entity) {
            return EMPTY;
        }
        /** @type {?} */
        var retrieve$ = this.apiProxy.extendRetrieve(id);
        /** @type {?} */
        var result$ = retrieve$.pipe(map((/**
         * @param {?} returnValue
         * @return {?}
         */
        function (returnValue) {
            /** @type {?} */
            var entityData = returnValue;
            /** @type {?} */
            var entityToUpdate = _this.repository.entityCollection.getEntityById(id);
            _this.reloadEntityData(entityToUpdate, entityData);
            return entityToUpdate;
        })));
        return result$;
    };
    /**
     * 重新加载实体数据
     */
    /**
     * 重新加载实体数据
     * @private
     * @param {?} entity
     * @param {?} entityData
     * @return {?}
     */
    BefDataService.prototype.reloadEntityData = /**
     * 重新加载实体数据
     * @private
     * @param {?} entity
     * @param {?} entityData
     * @return {?}
     */
    function (entity, entityData) {
        if (!entity) {
            return;
        }
        entity.load(entityData);
        entity.changes.splice(0, entity.changes.length);
    };
    /**
     * 创建新实体，并加载
     */
    /**
     * 创建新实体，并加载
     * @param {?=} defaultValue
     * @return {?}
     */
    BefDataService.prototype.create = /**
     * 创建新实体，并加载
     * @param {?=} defaultValue
     * @return {?}
     */
    function (defaultValue) {
        var _this = this;
        /** @type {?} */
        var result$ = this.apiProxy.create(defaultValue);
        return result$.pipe(map((/**
         * @param {?} returnValue
         * @return {?}
         */
        function (returnValue) {
            /** @type {?} */
            var newEntityData = returnValue;
            /** @type {?} */
            var newEntity = _this.repository.buildEntity(newEntityData);
            _this.repository.entityCollection.loadEntities([newEntity]);
            _this.repository.dataChangeHistory.addChange({ dataId: newEntity.primaryValue, changeType: DataChangeType.Add });
            return newEntity;
        })));
    };
    /**
     * 追加实体
     */
    /**
     * 追加实体
     * @param {?=} defaultValue
     * @return {?}
     */
    BefDataService.prototype.append = /**
     * 追加实体
     * @param {?=} defaultValue
     * @return {?}
     */
    function (defaultValue) {
        var _this = this;
        /** @type {?} */
        var append$ = this.apiProxy.create(defaultValue);
        return append$.pipe(map((/**
         * @param {?} returnValue
         * @return {?}
         */
        function (returnValue) {
            /** @type {?} */
            var newEntityData = returnValue;
            /** @type {?} */
            var newEntity = _this.repository.buildEntity(newEntityData);
            _this.repository.entityCollection.addEntity(newEntity);
            return newEntity;
        })));
    };
    /**
     * 创建子实体，并追加
     * @param fpath 父路径，格式形如：/1/edus（从表）或/1/edus/2/grades（从从表）
     */
    /**
     * 创建子实体，并追加
     * @param {?} fpath 父路径，格式形如：/1/edus（从表）或/1/edus/2/grades（从从表）
     * @return {?}
     */
    BefDataService.prototype.appendByPath = /**
     * 创建子实体，并追加
     * @param {?} fpath 父路径，格式形如：/1/edus（从表）或/1/edus/2/grades（从从表）
     * @return {?}
     */
    function (fpath) {
        var _this = this;
        /** @type {?} */
        var append$ = this.apiProxy.createByPath(fpath);
        return append$.pipe(map((/**
         * @param {?} returnValue
         * @return {?}
         */
        function (returnValue) {
            /** @type {?} */
            var newEntityData = returnValue;
            /** @type {?} */
            var newEntity = _this.repository.entityManager.appendEntityByPath(fpath, newEntityData, newEntityData);
            return newEntity;
        })));
    };
    /**
     * 根据id删除实体
     * @param id 内码
     */
    /**
     * 根据id删除实体
     * @param {?} id 内码
     * @param {?=} ifSave
     * @return {?}
     */
    BefDataService.prototype.removeById = /**
     * 根据id删除实体
     * @param {?} id 内码
     * @param {?=} ifSave
     * @return {?}
     */
    function (id, ifSave) {
        var _this = this;
        ifSave = (ifSave === undefined) ? true : ifSave;
        /** @type {?} */
        var delete$ = this.apiProxy.extendDelete(id);
        // 从本地实体集合中移除
        return delete$.pipe(switchMap((/**
         * @return {?}
         */
        function () {
            // 执行保存
            if (ifSave === true) {
                return _this.applyChangesById(id).pipe(tap((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    if (result) {
                        _this.repository.entityCollection.removeEntityById(id);
                    }
                })));
            }
            else {
                // 从实体集合中删除
                _this.repository.entityCollection.removeEntityById(id);
                _this.repository.dataChangeHistory.addChange({ dataId: id, changeType: DataChangeType.Delete });
                return of(true);
            }
        })));
    };
    /**
     * 删除并保存
     * @param id 要删除的实体id
     */
    /**
     * 删除并保存
     * @param {?} id 要删除的实体id
     * @return {?}
     */
    BefDataService.prototype.removeAndSaveById = /**
     * 删除并保存
     * @param {?} id 要删除的实体id
     * @return {?}
     */
    function (id) {
        var _this = this;
        /** @type {?} */
        var delete$ = this.apiProxy.deleteAndSave(id);
        /** @type {?} */
        var result$ = delete$.pipe(switchMap((/**
         * @return {?}
         */
        function () {
            _this.repository.entityCollection.removeEntityById(id);
            return of(true);
        })));
        return result$;
    };
    /**
     * 批量删除
     * @param id 内码
     */
    /**
     * 批量删除
     * @param {?} ids
     * @return {?}
     */
    BefDataService.prototype.removeByIds = /**
     * 批量删除
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        var _this = this;
        // 服务器端删除
        /** @type {?} */
        var delete$ = this.apiProxy.extendBatchDelete(ids);
        // 从本地实体集合中移除
        return delete$.pipe(switchMap((/**
         * @return {?}
         */
        function () {
            // 执行保存
            return _this.applyChangesByIdArray(ids).pipe(tap((/**
             * @param {?} result
             * @return {?}
             */
            function (result) {
                if (result) {
                    // 从实体集合中删除
                    _this.repository.entityCollection.removeEntities((/**
                     * @param {?} value
                     * @return {?}
                     */
                    function (value) {
                        return _this.checkEntityValueExists(value, ids);
                    }));
                }
            })));
        })));
    };
    /**
     * 检测实体的主键值是否存在于数组中，如果存在返回true
     * @param array 待遍历数组
     */
    /**
     * 检测实体的主键值是否存在于数组中，如果存在返回true
     * @private
     * @param {?} entity
     * @param {?} primaryValueArray
     * @return {?}
     */
    BefDataService.prototype.checkEntityValueExists = /**
     * 检测实体的主键值是否存在于数组中，如果存在返回true
     * @private
     * @param {?} entity
     * @param {?} primaryValueArray
     * @return {?}
     */
    function (entity, primaryValueArray) {
        /** @type {?} */
        var isExistInTargetArray = false;
        for (var i = 0; i < primaryValueArray.length; i++) {
            if (entity.primaryValue === primaryValueArray[i]) {
                isExistInTargetArray = true;
                break;
            }
        }
        return isExistInTargetArray;
    };
    /**
     * 删除子级
     * @param path 路径
     * @param id   内码
     */
    /**
     * 删除子级
     * @param {?} fpath
     * @param {?} id   内码
     * @return {?}
     */
    BefDataService.prototype.removeByPath = /**
     * 删除子级
     * @param {?} fpath
     * @param {?} id   内码
     * @return {?}
     */
    function (fpath, id) {
        var _this = this;
        /** @type {?} */
        var delete$ = this.apiProxy.extendDeletByPath(fpath, id);
        // 从本地实体集合中移除
        return delete$.pipe(map((/**
         * @return {?}
         */
        function () {
            _this.repository.entityManager.removeEntityByPath(fpath, id);
            _this.repository.dataChangeHistory.addChange({ fpath: fpath, dataId: id, changeType: DataChangeType.Delete });
            return true;
        })));
    };
    /**
     * 将id对应的实体的变更提交的服务器端
     */
    /**
     * 将id对应的实体的变更提交的服务器端
     * @param {?} id
     * @return {?}
     */
    BefDataService.prototype.updateChangesById = /**
     * 将id对应的实体的变更提交的服务器端
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        /** @type {?} */
        var entity = this.repository.entityCollection.getEntityById(id);
        // 变更集为空
        if (!entity.changes || entity.changes.length === 0) {
            return of(true);
        }
        /** @type {?} */
        var changeDetail = this.repository.entityManager.buildEntityChangeDetailById(id);
        /** @type {?} */
        var update$ = this.apiProxy.update(changeDetail);
        /** @type {?} */
        var result$ = update$.pipe(tap((/**
         * @return {?}
         */
        function () {
            _this.repository.entityManager.clearEntityChangesById(id);
        })), map((/**
         * @return {?}
         */
        function () {
            return true;
        })));
        return result$;
    };
    /**
     * 提交所有变更
     */
    /**
     * 提交所有变更
     * @return {?}
     */
    BefDataService.prototype.updateAllChanges = /**
     * 提交所有变更
     * @return {?}
     */
    function () {
        var _this = this;
        // 遍历实体，提交变更
        /** @type {?} */
        var updateResults = [];
        /** @type {?} */
        var entities = this.repository.entityCollection.toArray();
        if (entities.length === 0) {
            return of(true);
        }
        entities.forEach((/**
         * @param {?} entity
         * @return {?}
         */
        function (entity) {
            /** @type {?} */
            var updateResult$ = _this.updateChangesById(entity.primaryValue);
            updateResults.push(updateResult$);
        }));
        // 串联流
        /** @type {?} */
        var result$ = zip.apply(void 0, tslib_1.__spread(updateResults)).pipe(map((/**
         * @return {?}
         */
        function () {
            return true;
        })));
        return result$;
    };
    /**
     * 应用变更
     */
    /**
     * 应用变更
     * @return {?}
     */
    BefDataService.prototype.applyChanges = /**
     * 应用变更
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var save$ = this.apiProxy.save();
        /** @type {?} */
        var result$ = save$.pipe(tap((/**
         * @return {?}
         */
        function () {
            _this.repository.entityManager.clearAllEntityChanges();
            _this.repository.dataChangeHistory.clear();
        })), map((/**
         * @return {?}
         */
        function () {
            return true;
        })));
        return result$;
    };
    /**
     * 应用idArray对应数据的变更
     */
    /**
     * 应用idArray对应数据的变更
     * @param {?} ids
     * @return {?}
     */
    BefDataService.prototype.applyChangesByIdArray = /**
     * 应用idArray对应数据的变更
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        var _this = this;
        /** @type {?} */
        var save$ = this.apiProxy.save();
        /** @type {?} */
        var result$ = save$.pipe(tap((/**
         * @return {?}
         */
        function () {
            _this.repository.entityManager.clearEntityChangesByIds(ids);
            _this.repository.dataChangeHistory.clearByIds(ids);
        })), map((/**
         * @return {?}
         */
        function () {
            return true;
        })));
        return result$;
    };
    /**
     * 应用id对应数据的变更
     */
    /**
     * 应用id对应数据的变更
     * @param {?} id
     * @return {?}
     */
    BefDataService.prototype.applyChangesById = /**
     * 应用id对应数据的变更
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        /** @type {?} */
        var save$ = this.apiProxy.save();
        /** @type {?} */
        var result$ = save$.pipe(tap((/**
         * @return {?}
         */
        function () {
            _this.repository.entityManager.clearEntityChangesById(id);
            _this.repository.dataChangeHistory.clearByIds([id]);
        })), map((/**
         * @return {?}
         */
        function () {
            return true;
        })));
        return result$;
    };
    /**
     * 取消变更
     */
    /**
     * 取消变更
     * @return {?}
     */
    BefDataService.prototype.cancelChanges = /**
     * 取消变更
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var cancel$ = this.apiProxy.cancel();
        /** @type {?} */
        var result$ = cancel$.pipe(tap((/**
         * @return {?}
         */
        function () {
            _this.repository.entityManager.clearAllEntityChanges();
            _this.repository.dataChangeHistory.clear();
        })), map((/**
         * @return {?}
         */
        function () {
            return true;
        })));
        return result$;
    };
    /**
     * 构造EntityFilter
     */
    /**
     * 构造EntityFilter
     * @private
     * @param {?} filter
     * @param {?} sort
     * @param {?} pageSize
     * @param {?} pageIndex
     * @return {?}
     */
    BefDataService.prototype.buildEntityFilter = /**
     * 构造EntityFilter
     * @private
     * @param {?} filter
     * @param {?} sort
     * @param {?} pageSize
     * @param {?} pageIndex
     * @return {?}
     */
    function (filter, sort, pageSize, pageIndex) {
        /** @type {?} */
        var entityFilter = {
            FilterConditions: filter,
            SortConditions: sort,
            IsUsePagination: pageSize === 0 ? false : true,
            Pagination: {
                PageIndex: pageIndex,
                PageSize: pageSize,
                PageCount: 0,
                TotalCount: 0
            }
        };
        return entityFilter;
    };
    return BefDataService;
}());
if (false) {
    /**
     * 实体仓库
     * @type {?}
     * @private
     */
    BefDataService.prototype.repository;
}
export { BefDataService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVmX2RhdGFfc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvbW9iaWxlLWJlZi8iLCJzb3VyY2VzIjpbImxpYi9iZWZfZGF0YV9zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBYyxFQUFFLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNsRCxPQUFPLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyRCxPQUFPLEVBQVUsY0FBYyxHQUFHLE1BQU0sdUJBQXVCLENBQUM7Ozs7O0FBU2hFOzs7OztJQWNFOztPQUVHO0lBQ0gsd0JBQVksVUFBNEI7UUFDdEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7SUFDL0IsQ0FBQztJQVRELHNCQUFZLG9DQUFRO1FBSHBCOztXQUVHOzs7Ozs7UUFDSDtZQUNFLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUM7UUFDbEMsQ0FBQzs7O09BQUE7SUFTRDs7T0FFRzs7Ozs7Ozs7O0lBQ0ksZ0NBQU87Ozs7Ozs7O0lBQWQsVUFBZSxNQUFhLEVBQUUsSUFBVyxFQUFFLFFBQXVCLEVBQUUsU0FBd0I7UUFBNUYsaUJBa0JDOztZQWpCTyxZQUFZLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQzs7WUFDeEUsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQzs7WUFDaEQsT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQ3pCLEdBQUc7Ozs7UUFBQyxVQUFDLFdBQWdCO1lBQ25CLEtBQUksQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxtQkFBQSxXQUFXLEVBQWUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFBOztnQkFDcEUsUUFBUSxHQUFHLENB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LFFBQVEsQ0FBQyxNQUFNLEVBQUU7O1lBQ2hDLE9BQU8sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUMxQixHQUFHOzs7UUFBQztZQUNGLEtBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLHFCQUFxQixFQUFFLENBQUM7WUFDdEQsS0FBSSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM1QyxDQUFDLEVBQUMsRUFDRixHQUFHOzs7UUFBQztZQUNGLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQyxFQUFDLENBQ0g7UUFDRCxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDO0lBRUQ7O09BRUc7Ozs7Ozs7Ozs7SUFDSywwQ0FBaUI7Ozs7Ozs7OztJQUF6QixVQUEwQixNQUFhLEVBQUUsSUFBVyxFQUFFLFFBQWdCLEVBQUUsU0FBaUI7O1lBQ2pGLFlBQVksR0FBRztZQUNuQixnQkFBZ0IsRUFBRSxNQUFNO1lBQ3hCLGNBQWMsRUFBRSxJQUFJO1lBQ3BCLGVBQWUsRUFBRSxRQUFRLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUk7WUFDOUMsVUFBVSxFQUFFO2dCQUNWLFNBQVMsRUFBRSxTQUFTO2dCQUNwQixRQUFRLEVBQUUsUUFBUTtnQkFDbEIsU0FBUyxFQUFFLENBQUM7Z0JBQ1osVUFBVSxFQUFFLENBQUM7YUFDZDtTQUNGO1FBRUQsT0FBTyxZQUFZLENBQUM7SUFDdEIsQ0FBQztJQUNILHFCQUFDO0FBQUQsQ0FBQyxBQXhhRCxJQXdhQzs7Ozs7OztJQW5hQyxvQ0FBcUM7O0FBcWF2QyxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiwgemlwLCBFTVBUWSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyB0YXAsIG1hcCwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBFbnRpdHksIERhdGFDaGFuZ2VUeXBlLCB9IGZyb20gJ0BmYXJyaXMvbW9iaWxlLWRldmtpdCc7XHJcblxyXG5pbXBvcnQgeyBRdWVyeVJlc3VsdCB9IGZyb20gJy4vdHlwZXMnO1xyXG5pbXBvcnQgeyBCZWZSZXBvc2l0b3J5IH0gZnJvbSAnLi9iZWZfcmVwb3NpdG9yeSc7XHJcbmltcG9ydCB7IEJlZlByb3h5IH0gZnJvbSAnLi9iZWZfcHJveHknO1xyXG5cclxuLyoqXHJcbiAqIEJlZuaVsOaNruiuv+mXruacjeWKoVxyXG4gKi9cclxuY2xhc3MgQmVmRGF0YVNlcnZpY2U8VCBleHRlbmRzIEVudGl0eT4ge1xyXG5cclxuICAvKipcclxuICAgKiDlrp7kvZPku5PlupNcclxuICAgKi9cclxuICBwcml2YXRlIHJlcG9zaXRvcnk6IEJlZlJlcG9zaXRvcnk8VD47XHJcblxyXG4gIC8qKlxyXG4gICAqIEFwaeS7o+eQhuexu1xyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0IGFwaVByb3h5KCk6IEJlZlByb3h5IHtcclxuICAgIHJldHVybiB0aGlzLnJlcG9zaXRvcnkuYXBpUHJveHk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmnoTpgKDlh73mlbBcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihyZXBvc2l0b3J5OiBCZWZSZXBvc2l0b3J5PFQ+KSB7XHJcbiAgICB0aGlzLnJlcG9zaXRvcnkgPSByZXBvc2l0b3J5O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+W5a6e5L2T6ZuG5ZCIXHJcbiAgICovXHJcbiAgcHVibGljIGdldExpc3QoZmlsdGVyOiBhbnlbXSwgc29ydDogYW55W10sIHBhZ2VTaXplOiBudW1iZXIgfCBudWxsLCBwYWdlSW5kZXg6IG51bWJlciB8IG51bGwpOiBPYnNlcnZhYmxlPFRbXT4ge1xyXG4gICAgY29uc3QgZW50aXR5RmlsdGVyID0gdGhpcy5idWlsZEVudGl0eUZpbHRlcihmaWx0ZXIsIHNvcnQsIHBhZ2VTaXplLCBwYWdlSW5kZXgpO1xyXG4gICAgY29uc3QgcXVlcnkkID0gdGhpcy5hcGlQcm94eS5leHRlbmRRdWVyeShlbnRpdHlGaWx0ZXIpO1xyXG4gICAgY29uc3QgcmVzdWx0JCA9IHF1ZXJ5JC5waXBlKFxyXG4gICAgICBtYXAoKHJldHVyblZhbHVlOiBhbnkpID0+IHtcclxuICAgICAgICB0aGlzLnJlcG9zaXRvcnkuc2V0UGFnaW5hdGlvbkluZm8oKHJldHVyblZhbHVlIGFzIFF1ZXJ5UmVzdWx0KS5wYWdpbmF0aW9uKVxyXG4gICAgICAgIGNvbnN0IGxpc3REYXRhID0gKHJldHVyblZhbHVlIGFzIFF1ZXJ5UmVzdWx0KS5yZXN1bHQ7XHJcbiAgICAgICAgY29uc3QgZW50aXRpZXMgPSB0aGlzLnJlcG9zaXRvcnkuYnVpbGRFbnRpdGllcyhsaXN0RGF0YSk7XHJcbiAgICAgICAgaWYgKHRoaXMuZGV0ZXJtaW5lSXNBcHBlbmQocGFnZUluZGV4KSkge1xyXG4gICAgICAgICAgdGhpcy5yZXBvc2l0b3J5LmVudGl0eUNvbGxlY3Rpb24uYWRkRW50aXRpZXMoZW50aXRpZXMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLnJlcG9zaXRvcnkuZW50aXR5Q29sbGVjdGlvbi5sb2FkRW50aXRpZXMoZW50aXRpZXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZW50aXRpZXM7XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiByZXN1bHQkO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5qC55o2u5b2T5YmN6aG15Yik5pat5piv5ZCm6L+95YqgXHJcbiAgICovXHJcbiAgZGV0ZXJtaW5lSXNBcHBlbmQocGFnZUluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgIHJldHVybiBwYWdlSW5kZXggPiAxXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5bljZXkuKrlrp7kvZNcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0QnlJZChpZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxUPiB7XHJcbiAgICBjb25zdCByZXRyaWV2ZSQgPSB0aGlzLmFwaVByb3h5LmV4dGVuZFJldHJpZXZlKGlkKTtcclxuICAgIGNvbnN0IHJlc3VsdCQgPSByZXRyaWV2ZSQucGlwZShcclxuICAgICAgbWFwKChyZXR1cm5WYWx1ZTogYW55KSA9PiB7XHJcbiAgICAgICAgY29uc3QgZW50aXR5RGF0YSA9IHJldHVyblZhbHVlO1xyXG4gICAgICAgIGNvbnN0IGVudGl0eSA9IHRoaXMucmVwb3NpdG9yeS5idWlsZEVudGl0eShlbnRpdHlEYXRhKTtcclxuICAgICAgICB0aGlzLnJlcG9zaXRvcnkuZW50aXR5Q29sbGVjdGlvbi5sb2FkRW50aXRpZXMoW2VudGl0eV0pO1xyXG4gICAgICAgIHJldHVybiBlbnRpdHk7XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiByZXN1bHQkO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5pu05paw5bm25a+55a6e5L2T5Yqg6ZSBXHJcbiAgICovXHJcbiAgcHVibGljIGVkaXRCeUlkKGlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPFQ+IHtcclxuICAgIGNvbnN0IGVudGl0eSA9IHRoaXMucmVwb3NpdG9yeS5lbnRpdHlDb2xsZWN0aW9uLmdldEVudGl0eUJ5SWQoaWQpO1xyXG4gICAgaWYgKCFlbnRpdHkpIHtcclxuICAgICAgcmV0dXJuIG9mKG51bGwpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHJldHJpZXZlJCA9IHRoaXMuYXBpUHJveHkuZWRpdChpZCk7XHJcbiAgICBjb25zdCByZXN1bHQkID0gcmV0cmlldmUkLnBpcGUoXHJcbiAgICAgIG1hcCgocmV0dXJuVmFsdWU6IGFueSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGVudGl0eURhdGEgPSByZXR1cm5WYWx1ZS5kYXRhO1xyXG4gICAgICAgIGNvbnN0IGVudGl0eVRvVXBkYXRlID0gdGhpcy5yZXBvc2l0b3J5LmVudGl0eUNvbGxlY3Rpb24uZ2V0RW50aXR5QnlJZChpZCk7XHJcbiAgICAgICAgaWYgKGVudGl0eVRvVXBkYXRlICYmIGVudGl0eURhdGEpIHtcclxuICAgICAgICAgIHRoaXMucmVsb2FkRW50aXR5RGF0YShlbnRpdHlUb1VwZGF0ZSwgZW50aXR5RGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBlbnRpdHlUb1VwZGF0ZTtcclxuICAgICAgfSlcclxuICAgICk7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdCQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmoLnmja5pZOabtOaWsOWunuS9k1xyXG4gICAqIEBwYXJhbSBpZCDlrp7kvZNpZFxyXG4gICAqL1xyXG4gIHB1YmxpYyB1cGRhdGVCeUlkKGlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPFQ+IHtcclxuICAgIGNvbnN0IGVudGl0eSA9IHRoaXMucmVwb3NpdG9yeS5lbnRpdHlDb2xsZWN0aW9uLmdldEVudGl0eUJ5SWQoaWQpO1xyXG4gICAgaWYgKCFlbnRpdHkpIHtcclxuICAgICAgcmV0dXJuIEVNUFRZO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHJldHJpZXZlJCA9IHRoaXMuYXBpUHJveHkuZXh0ZW5kUmV0cmlldmUoaWQpO1xyXG4gICAgY29uc3QgcmVzdWx0JCA9IHJldHJpZXZlJC5waXBlKFxyXG4gICAgICBtYXAoKHJldHVyblZhbHVlOiBhbnkpID0+IHtcclxuICAgICAgICBjb25zdCBlbnRpdHlEYXRhID0gcmV0dXJuVmFsdWU7XHJcbiAgICAgICAgY29uc3QgZW50aXR5VG9VcGRhdGUgPSB0aGlzLnJlcG9zaXRvcnkuZW50aXR5Q29sbGVjdGlvbi5nZXRFbnRpdHlCeUlkKGlkKTtcclxuICAgICAgICB0aGlzLnJlbG9hZEVudGl0eURhdGEoZW50aXR5VG9VcGRhdGUsIGVudGl0eURhdGEpO1xyXG4gICAgICAgIHJldHVybiBlbnRpdHlUb1VwZGF0ZTtcclxuICAgICAgfSlcclxuICAgICk7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdCQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDph43mlrDliqDovb3lrp7kvZPmlbDmja5cclxuICAgKi9cclxuICBwcml2YXRlIHJlbG9hZEVudGl0eURhdGEoZW50aXR5OiBFbnRpdHksIGVudGl0eURhdGE6IGFueSk6IHZvaWQge1xyXG4gICAgaWYgKCFlbnRpdHkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgZW50aXR5LmxvYWQoZW50aXR5RGF0YSk7XHJcbiAgICBlbnRpdHkuY2hhbmdlcy5zcGxpY2UoMCwgZW50aXR5LmNoYW5nZXMubGVuZ3RoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWIm+W7uuaWsOWunuS9k++8jOW5tuWKoOi9vVxyXG4gICAqL1xyXG4gIHB1YmxpYyBjcmVhdGUoZGVmYXVsdFZhbHVlPzogYW55KSB7XHJcbiAgICBjb25zdCByZXN1bHQkID0gdGhpcy5hcGlQcm94eS5jcmVhdGUoZGVmYXVsdFZhbHVlKTtcclxuICAgIHJldHVybiByZXN1bHQkLnBpcGUoXHJcbiAgICAgIG1hcCgocmV0dXJuVmFsdWU6IGFueSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IG5ld0VudGl0eURhdGEgPSByZXR1cm5WYWx1ZTtcclxuICAgICAgICBjb25zdCBuZXdFbnRpdHkgPSB0aGlzLnJlcG9zaXRvcnkuYnVpbGRFbnRpdHkobmV3RW50aXR5RGF0YSk7XHJcbiAgICAgICAgdGhpcy5yZXBvc2l0b3J5LmVudGl0eUNvbGxlY3Rpb24ubG9hZEVudGl0aWVzKFtuZXdFbnRpdHldKTtcclxuICAgICAgICB0aGlzLnJlcG9zaXRvcnkuZGF0YUNoYW5nZUhpc3RvcnkuYWRkQ2hhbmdlKHsgZGF0YUlkOiBuZXdFbnRpdHkucHJpbWFyeVZhbHVlLCBjaGFuZ2VUeXBlOiBEYXRhQ2hhbmdlVHlwZS5BZGQgfSk7XHJcbiAgICAgICAgcmV0dXJuIG5ld0VudGl0eTtcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDov73liqDlrp7kvZNcclxuICAgKi9cclxuICBwdWJsaWMgYXBwZW5kKGRlZmF1bHRWYWx1ZT86IGFueSk6IE9ic2VydmFibGU8VD4ge1xyXG4gICAgY29uc3QgYXBwZW5kJCA9IHRoaXMuYXBpUHJveHkuY3JlYXRlKGRlZmF1bHRWYWx1ZSk7XHJcbiAgICByZXR1cm4gYXBwZW5kJC5waXBlKFxyXG4gICAgICBtYXAoKHJldHVyblZhbHVlOiBhbnkpID0+IHtcclxuICAgICAgICBjb25zdCBuZXdFbnRpdHlEYXRhID0gcmV0dXJuVmFsdWU7XHJcbiAgICAgICAgY29uc3QgbmV3RW50aXR5ID0gdGhpcy5yZXBvc2l0b3J5LmJ1aWxkRW50aXR5KG5ld0VudGl0eURhdGEpO1xyXG4gICAgICAgIHRoaXMucmVwb3NpdG9yeS5lbnRpdHlDb2xsZWN0aW9uLmFkZEVudGl0eShuZXdFbnRpdHkpO1xyXG4gICAgICAgIHJldHVybiBuZXdFbnRpdHk7XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Yib5bu65a2Q5a6e5L2T77yM5bm26L+95YqgXHJcbiAgICogQHBhcmFtIGZwYXRoIOeItui3r+W+hO+8jOagvOW8j+W9ouWmgu+8mi8xL2VkdXPvvIjku47ooajvvInmiJYvMS9lZHVzLzIvZ3JhZGVz77yI5LuO5LuO6KGo77yJXHJcbiAgICovXHJcbiAgcHVibGljIGFwcGVuZEJ5UGF0aChmcGF0aDogc3RyaW5nKTogT2JzZXJ2YWJsZTxFbnRpdHk+IHtcclxuICAgIGNvbnN0IGFwcGVuZCQgPSB0aGlzLmFwaVByb3h5LmNyZWF0ZUJ5UGF0aChmcGF0aCk7XHJcbiAgICByZXR1cm4gYXBwZW5kJC5waXBlKFxyXG4gICAgICBtYXAoKHJldHVyblZhbHVlOiBhbnkpID0+IHtcclxuICAgICAgICBjb25zdCBuZXdFbnRpdHlEYXRhID0gcmV0dXJuVmFsdWU7XHJcbiAgICAgICAgY29uc3QgbmV3RW50aXR5ID0gdGhpcy5yZXBvc2l0b3J5LmVudGl0eU1hbmFnZXIuYXBwZW5kRW50aXR5QnlQYXRoKGZwYXRoLCBuZXdFbnRpdHlEYXRhLCBuZXdFbnRpdHlEYXRhKTtcclxuICAgICAgICByZXR1cm4gbmV3RW50aXR5O1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcblxyXG5cclxuICAvKipcclxuICAgKiDmoLnmja5pZOWIoOmZpOWunuS9k1xyXG4gICAqIEBwYXJhbSBpZCDlhoXnoIFcclxuICAgKi9cclxuICBwdWJsaWMgcmVtb3ZlQnlJZChpZDogc3RyaW5nLCBpZlNhdmU/OiBib29sZWFuKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XHJcblxyXG4gICAgaWZTYXZlID0gKGlmU2F2ZSA9PT0gdW5kZWZpbmVkKSA/IHRydWUgOiBpZlNhdmU7XHJcbiAgICBjb25zdCBkZWxldGUkID0gdGhpcy5hcGlQcm94eS5leHRlbmREZWxldGUoaWQpO1xyXG5cclxuICAgIC8vIOS7juacrOWcsOWunuS9k+mbhuWQiOS4reenu+mZpFxyXG4gICAgcmV0dXJuIGRlbGV0ZSQucGlwZShcclxuICAgICAgc3dpdGNoTWFwKCgpID0+IHtcclxuICAgICAgICAvLyDmiafooYzkv53lrZhcclxuICAgICAgICBpZiAoaWZTYXZlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICByZXR1cm4gdGhpcy5hcHBseUNoYW5nZXNCeUlkKGlkKS5waXBlKHRhcChyZXN1bHQgPT4ge1xyXG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5yZXBvc2l0b3J5LmVudGl0eUNvbGxlY3Rpb24ucmVtb3ZlRW50aXR5QnlJZChpZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgIC8vIOS7juWunuS9k+mbhuWQiOS4reWIoOmZpFxyXG4gICAgICAgICAgdGhpcy5yZXBvc2l0b3J5LmVudGl0eUNvbGxlY3Rpb24ucmVtb3ZlRW50aXR5QnlJZChpZCk7XHJcbiAgICAgICAgICB0aGlzLnJlcG9zaXRvcnkuZGF0YUNoYW5nZUhpc3RvcnkuYWRkQ2hhbmdlKHsgZGF0YUlkOiBpZCwgY2hhbmdlVHlwZTogRGF0YUNoYW5nZVR5cGUuRGVsZXRlIH0pO1xyXG4gICAgICAgICAgcmV0dXJuIG9mKHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDliKDpmaTlubbkv53lrZhcclxuICAgKiBAcGFyYW0gaWQg6KaB5Yig6Zmk55qE5a6e5L2TaWRcclxuICAgKi9cclxuICBwdWJsaWMgcmVtb3ZlQW5kU2F2ZUJ5SWQoaWQ6IHN0cmluZykge1xyXG4gICAgY29uc3QgZGVsZXRlJCA9IHRoaXMuYXBpUHJveHkuZGVsZXRlQW5kU2F2ZShpZCk7XHJcbiAgICBjb25zdCByZXN1bHQkID0gZGVsZXRlJC5waXBlKFxyXG4gICAgICBzd2l0Y2hNYXAoKCkgPT4ge1xyXG4gICAgICAgIHRoaXMucmVwb3NpdG9yeS5lbnRpdHlDb2xsZWN0aW9uLnJlbW92ZUVudGl0eUJ5SWQoaWQpO1xyXG4gICAgICAgIHJldHVybiBvZih0cnVlKTtcclxuICAgICAgfSlcclxuICAgICk7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdCQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmibnph4/liKDpmaRcclxuICAgKiBAcGFyYW0gaWQg5YaF56CBXHJcbiAgICovXHJcbiAgcHVibGljIHJlbW92ZUJ5SWRzKGlkczogc3RyaW5nW10pOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcclxuXHJcbiAgICAvLyDmnI3liqHlmajnq6/liKDpmaRcclxuICAgIGNvbnN0IGRlbGV0ZSQgPSB0aGlzLmFwaVByb3h5LmV4dGVuZEJhdGNoRGVsZXRlKGlkcyk7XHJcblxyXG4gICAgLy8g5LuO5pys5Zyw5a6e5L2T6ZuG5ZCI5Lit56e76ZmkXHJcbiAgICByZXR1cm4gZGVsZXRlJC5waXBlKFxyXG4gICAgICBzd2l0Y2hNYXAoKCkgPT4ge1xyXG4gICAgICAgIC8vIOaJp+ihjOS/neWtmFxyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5Q2hhbmdlc0J5SWRBcnJheShpZHMpLnBpcGUoXHJcbiAgICAgICAgICB0YXAocmVzdWx0ID0+IHtcclxuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgIC8vIOS7juWunuS9k+mbhuWQiOS4reWIoOmZpFxyXG4gICAgICAgICAgICAgIHRoaXMucmVwb3NpdG9yeS5lbnRpdHlDb2xsZWN0aW9uLnJlbW92ZUVudGl0aWVzKFxyXG4gICAgICAgICAgICAgICAgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNoZWNrRW50aXR5VmFsdWVFeGlzdHModmFsdWUsIGlkcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOajgOa1i+WunuS9k+eahOS4u+mUruWAvOaYr+WQpuWtmOWcqOS6juaVsOe7hOS4re+8jOWmguaenOWtmOWcqOi/lOWbnnRydWVcclxuICAgKiBAcGFyYW0gYXJyYXkg5b6F6YGN5Y6G5pWw57uEXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBjaGVja0VudGl0eVZhbHVlRXhpc3RzKGVudGl0eTogRW50aXR5LCBwcmltYXJ5VmFsdWVBcnJheTogYW55W10pOiBib29sZWFuIHtcclxuICAgIGxldCBpc0V4aXN0SW5UYXJnZXRBcnJheSA9IGZhbHNlO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJpbWFyeVZhbHVlQXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgaWYgKGVudGl0eS5wcmltYXJ5VmFsdWUgPT09IHByaW1hcnlWYWx1ZUFycmF5W2ldKSB7XHJcbiAgICAgICAgaXNFeGlzdEluVGFyZ2V0QXJyYXkgPSB0cnVlO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGlzRXhpc3RJblRhcmdldEFycmF5O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Yig6Zmk5a2Q57qnXHJcbiAgICogQHBhcmFtIHBhdGgg6Lev5b6EXHJcbiAgICogQHBhcmFtIGlkICAg5YaF56CBXHJcbiAgICovXHJcbiAgcHVibGljIHJlbW92ZUJ5UGF0aChmcGF0aDogc3RyaW5nLCBpZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XHJcblxyXG4gICAgY29uc3QgZGVsZXRlJCA9IHRoaXMuYXBpUHJveHkuZXh0ZW5kRGVsZXRCeVBhdGgoZnBhdGgsIGlkKTtcclxuXHJcbiAgICAvLyDku47mnKzlnLDlrp7kvZPpm4blkIjkuK3np7vpmaRcclxuICAgIHJldHVybiBkZWxldGUkLnBpcGUoXHJcbiAgICAgIG1hcCgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5yZXBvc2l0b3J5LmVudGl0eU1hbmFnZXIucmVtb3ZlRW50aXR5QnlQYXRoKGZwYXRoLCBpZCk7XHJcbiAgICAgICAgdGhpcy5yZXBvc2l0b3J5LmRhdGFDaGFuZ2VIaXN0b3J5LmFkZENoYW5nZSh7IGZwYXRoLCBkYXRhSWQ6IGlkLCBjaGFuZ2VUeXBlOiBEYXRhQ2hhbmdlVHlwZS5EZWxldGUgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5bCGaWTlr7nlupTnmoTlrp7kvZPnmoTlj5jmm7Tmj5DkuqTnmoTmnI3liqHlmajnq69cclxuICAgKi9cclxuICBwdWJsaWMgdXBkYXRlQ2hhbmdlc0J5SWQoaWQ6IHN0cmluZyk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xyXG4gICAgY29uc3QgZW50aXR5ID0gdGhpcy5yZXBvc2l0b3J5LmVudGl0eUNvbGxlY3Rpb24uZ2V0RW50aXR5QnlJZChpZCk7XHJcblxyXG4gICAgLy8g5Y+Y5pu06ZuG5Li656m6XHJcbiAgICBpZiAoIWVudGl0eS5jaGFuZ2VzIHx8IGVudGl0eS5jaGFuZ2VzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICByZXR1cm4gb2YodHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY2hhbmdlRGV0YWlsID0gdGhpcy5yZXBvc2l0b3J5LmVudGl0eU1hbmFnZXIuYnVpbGRFbnRpdHlDaGFuZ2VEZXRhaWxCeUlkKGlkKTtcclxuICAgIGNvbnN0IHVwZGF0ZSQgPSB0aGlzLmFwaVByb3h5LnVwZGF0ZShjaGFuZ2VEZXRhaWwpO1xyXG4gICAgY29uc3QgcmVzdWx0JCA9IHVwZGF0ZSQucGlwZShcclxuICAgICAgdGFwKCgpID0+IHtcclxuICAgICAgICB0aGlzLnJlcG9zaXRvcnkuZW50aXR5TWFuYWdlci5jbGVhckVudGl0eUNoYW5nZXNCeUlkKGlkKTtcclxuICAgICAgfSksXHJcbiAgICAgIG1hcCgoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gICAgcmV0dXJuIHJlc3VsdCQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmj5DkuqTmiYDmnInlj5jmm7RcclxuICAgKi9cclxuICBwdWJsaWMgdXBkYXRlQWxsQ2hhbmdlcygpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcclxuXHJcbiAgICAvLyDpgY3ljoblrp7kvZPvvIzmj5DkuqTlj5jmm7RcclxuICAgIGNvbnN0IHVwZGF0ZVJlc3VsdHM6IE9ic2VydmFibGU8Ym9vbGVhbj5bXSA9IFtdO1xyXG4gICAgY29uc3QgZW50aXRpZXM6IEVudGl0eVtdID0gdGhpcy5yZXBvc2l0b3J5LmVudGl0eUNvbGxlY3Rpb24udG9BcnJheSgpO1xyXG4gICAgaWYgKGVudGl0aWVzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICByZXR1cm4gb2YodHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZW50aXRpZXMuZm9yRWFjaCgoZW50aXR5OiBFbnRpdHkpID0+IHtcclxuICAgICAgY29uc3QgdXBkYXRlUmVzdWx0JCA9IHRoaXMudXBkYXRlQ2hhbmdlc0J5SWQoZW50aXR5LnByaW1hcnlWYWx1ZSk7XHJcbiAgICAgIHVwZGF0ZVJlc3VsdHMucHVzaCh1cGRhdGVSZXN1bHQkKTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIOS4suiBlOa1gVxyXG4gICAgY29uc3QgcmVzdWx0JCA9IHppcCguLi51cGRhdGVSZXN1bHRzKS5waXBlKFxyXG4gICAgICBtYXAoKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0JDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOW6lOeUqOWPmOabtFxyXG4gICAqL1xyXG4gIHB1YmxpYyBhcHBseUNoYW5nZXMoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XHJcbiAgICBjb25zdCBzYXZlJCA9IHRoaXMuYXBpUHJveHkuc2F2ZSgpO1xyXG4gICAgY29uc3QgcmVzdWx0JCA9IHNhdmUkLnBpcGUoXHJcbiAgICAgIHRhcCgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5yZXBvc2l0b3J5LmVudGl0eU1hbmFnZXIuY2xlYXJBbGxFbnRpdHlDaGFuZ2VzKCk7XHJcbiAgICAgICAgdGhpcy5yZXBvc2l0b3J5LmRhdGFDaGFuZ2VIaXN0b3J5LmNsZWFyKCk7XHJcbiAgICAgIH0pLFxyXG4gICAgICBtYXAoKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0JDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOW6lOeUqGlkQXJyYXnlr7nlupTmlbDmja7nmoTlj5jmm7RcclxuICAgKi9cclxuICBwdWJsaWMgYXBwbHlDaGFuZ2VzQnlJZEFycmF5KGlkczogc3RyaW5nW10pOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcclxuICAgIGNvbnN0IHNhdmUkID0gdGhpcy5hcGlQcm94eS5zYXZlKCk7XHJcbiAgICBjb25zdCByZXN1bHQkID0gc2F2ZSQucGlwZShcclxuICAgICAgdGFwKCgpID0+IHtcclxuICAgICAgICB0aGlzLnJlcG9zaXRvcnkuZW50aXR5TWFuYWdlci5jbGVhckVudGl0eUNoYW5nZXNCeUlkcyhpZHMpO1xyXG4gICAgICAgIHRoaXMucmVwb3NpdG9yeS5kYXRhQ2hhbmdlSGlzdG9yeS5jbGVhckJ5SWRzKGlkcyk7XHJcbiAgICAgIH0pLFxyXG4gICAgICBtYXAoKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0JDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOW6lOeUqGlk5a+55bqU5pWw5o2u55qE5Y+Y5pu0XHJcbiAgICovXHJcbiAgcHVibGljIGFwcGx5Q2hhbmdlc0J5SWQoaWQ6IHN0cmluZyk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xyXG4gICAgY29uc3Qgc2F2ZSQgPSB0aGlzLmFwaVByb3h5LnNhdmUoKTtcclxuICAgIGNvbnN0IHJlc3VsdCQgPSBzYXZlJC5waXBlKFxyXG4gICAgICB0YXAoKCkgPT4ge1xyXG4gICAgICAgIHRoaXMucmVwb3NpdG9yeS5lbnRpdHlNYW5hZ2VyLmNsZWFyRW50aXR5Q2hhbmdlc0J5SWQoaWQpO1xyXG4gICAgICAgIHRoaXMucmVwb3NpdG9yeS5kYXRhQ2hhbmdlSGlzdG9yeS5jbGVhckJ5SWRzKFtpZF0pO1xyXG4gICAgICB9KSxcclxuICAgICAgbWFwKCgpID0+IHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfSlcclxuICAgICk7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdCQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlj5bmtojlj5jmm7RcclxuICAgKi9cclxuICBwdWJsaWMgY2FuY2VsQ2hhbmdlcygpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcclxuICAgIGNvbnN0IGNhbmNlbCQgPSB0aGlzLmFwaVByb3h5LmNhbmNlbCgpO1xyXG4gICAgY29uc3QgcmVzdWx0JCA9IGNhbmNlbCQucGlwZShcclxuICAgICAgdGFwKCgpID0+IHtcclxuICAgICAgICB0aGlzLnJlcG9zaXRvcnkuZW50aXR5TWFuYWdlci5jbGVhckFsbEVudGl0eUNoYW5nZXMoKTtcclxuICAgICAgICB0aGlzLnJlcG9zaXRvcnkuZGF0YUNoYW5nZUhpc3RvcnkuY2xlYXIoKTtcclxuICAgICAgfSksXHJcbiAgICAgIG1hcCgoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gICAgcmV0dXJuIHJlc3VsdCQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmnoTpgKBFbnRpdHlGaWx0ZXJcclxuICAgKi9cclxuICBwcml2YXRlIGJ1aWxkRW50aXR5RmlsdGVyKGZpbHRlcjogYW55W10sIHNvcnQ6IGFueVtdLCBwYWdlU2l6ZTogbnVtYmVyLCBwYWdlSW5kZXg6IG51bWJlcikge1xyXG4gICAgY29uc3QgZW50aXR5RmlsdGVyID0ge1xyXG4gICAgICBGaWx0ZXJDb25kaXRpb25zOiBmaWx0ZXIsXHJcbiAgICAgIFNvcnRDb25kaXRpb25zOiBzb3J0LFxyXG4gICAgICBJc1VzZVBhZ2luYXRpb246IHBhZ2VTaXplID09PSAwID8gZmFsc2UgOiB0cnVlLFxyXG4gICAgICBQYWdpbmF0aW9uOiB7XHJcbiAgICAgICAgUGFnZUluZGV4OiBwYWdlSW5kZXgsXHJcbiAgICAgICAgUGFnZVNpemU6IHBhZ2VTaXplLFxyXG4gICAgICAgIFBhZ2VDb3VudDogMCxcclxuICAgICAgICBUb3RhbENvdW50OiAwXHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIGVudGl0eUZpbHRlcjtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IEJlZkRhdGFTZXJ2aWNlIH07XHJcbiJdfQ==