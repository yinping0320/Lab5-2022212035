/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef-lookup-data.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { map } from 'rxjs/operators';
import { HttpMethods } from '@farris/mobile-devkit';
import { RequestInfoUtil } from './utils/index';
/**
 * Bef帮助取数服务
 */
var /**
 * Bef帮助取数服务
 */
BefLookupDataService = /** @class */ (function () {
    /**
     * 构造函数
     */
    function BefLookupDataService(viewModelContext) {
        this.viewModelContext = viewModelContext;
        this.befRepository = (/** @type {?} */ (this.viewModelContext.repository));
    }
    /**
     * 帮助取数
     */
    /**
     * 帮助取数
     * @param {?} helpMetadataId
     * @param {?=} queryParam
     * @return {?}
     */
    BefLookupDataService.prototype.getData = /**
     * 帮助取数
     * @param {?} helpMetadataId
     * @param {?=} queryParam
     * @return {?}
     */
    function (helpMetadataId, queryParam) {
        /** @type {?} */
        var tableName = helpMetadataId.split('.')[0];
        /** @type {?} */
        var labelId = helpMetadataId.split('.')[1];
        queryParam = queryParam || {};
        return this.extendGetHelpData(labelId, tableName, queryParam);
    };
    /**
     * 扩展的帮助取数
     */
    /**
     * 扩展的帮助取数
     * @private
     * @param {?} labelId
     * @param {?} tableName
     * @param {?} queryParam
     * @return {?}
     */
    BefLookupDataService.prototype.extendGetHelpData = /**
     * 扩展的帮助取数
     * @private
     * @param {?} labelId
     * @param {?} tableName
     * @param {?} queryParam
     * @return {?}
     */
    function (labelId, tableName, queryParam) {
        /** @type {?} */
        var url = this.befRepository.apiProxy.baseUrl + "/extension/elementhelps";
        /** @type {?} */
        var requestInfo = RequestInfoUtil.buildRequestInfo(this.befRepository);
        /** @type {?} */
        var body = {
            labelId: labelId,
            nodeCode: tableName,
            queryParam: queryParam,
            requestInfo: requestInfo
        };
        /** @type {?} */
        var requestConfig = {
            body: body
        };
        /** @type {?} */
        var result$ = this.befRepository.apiProxy.request(HttpMethods.PUT, url, requestConfig);
        return result$.pipe(map((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            return result;
        })));
    };
    return BefLookupDataService;
}());
/**
 * Bef帮助取数服务
 */
export { BefLookupDataService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    BefLookupDataService.prototype.viewModelContext;
    /**
     * @type {?}
     * @private
     */
    BefLookupDataService.prototype.befRepository;
    /** @type {?} */
    BefLookupDataService.prototype.context;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVmLWxvb2t1cC1kYXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1iZWYvIiwic291cmNlcyI6WyJsaWIvYmVmLWxvb2t1cC1kYXRhLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFVLFdBQVcsRUFBdUMsTUFBTSx1QkFBdUIsQ0FBQztBQUVqRyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7O0FBTWhEOzs7O0lBUUU7O09BRUc7SUFDSCw4QkFBWSxnQkFBa0M7UUFDNUMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLGdCQUFnQixDQUFDO1FBQ3pDLElBQUksQ0FBQyxhQUFhLEdBQUcsbUJBQUEsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsRUFBeUIsQ0FBQTtJQUNoRixDQUFDO0lBRUQ7O09BRUc7Ozs7Ozs7SUFDSSxzQ0FBTzs7Ozs7O0lBQWQsVUFBZSxjQUFzQixFQUFFLFVBQWdCOztZQUMvQyxTQUFTLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7O1lBQ3hDLE9BQU8sR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1QyxVQUFVLEdBQUcsVUFBVSxJQUFJLEVBQUUsQ0FBQztRQUM5QixPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFRDs7T0FFRzs7Ozs7Ozs7O0lBQ0ssZ0RBQWlCOzs7Ozs7OztJQUF6QixVQUEwQixPQUFlLEVBQUUsU0FBaUIsRUFBRSxVQUFlOztZQUNyRSxHQUFHLEdBQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsT0FBTyw0QkFBeUI7O1lBQ3JFLFdBQVcsR0FBRyxlQUFlLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQzs7WUFDbEUsSUFBSSxHQUFHO1lBQ1gsT0FBTyxFQUFFLE9BQU87WUFDaEIsUUFBUSxFQUFFLFNBQVM7WUFDbkIsVUFBVSxFQUFFLFVBQVU7WUFDdEIsV0FBVyxFQUFFLFdBQVc7U0FDekI7O1lBQ0ssYUFBYSxHQUFzQjtZQUN2QyxJQUFJLEVBQUUsSUFBSTtTQUNYOztZQUVLLE9BQU8sR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsYUFBYSxDQUFDO1FBQ3hGLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FDakIsR0FBRzs7OztRQUFDLFVBQUMsTUFBVztZQUNkLE9BQU8sTUFBTSxDQUFDO1FBQ2hCLENBQUMsRUFBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBQ0gsMkJBQUM7QUFBRCxDQUFDLEFBakRELElBaURDOzs7Ozs7Ozs7O0lBL0NDLGdEQUEyQzs7Ozs7SUFFM0MsNkNBQTZDOztJQUU3Qyx1Q0FBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgRW50aXR5LCBIdHRwTWV0aG9kcywgSHR0cFJlcXVlc3RDb25maWcsIFZpZXdNb2RlbENvbnRleHQgfSBmcm9tICdAZmFycmlzL21vYmlsZS1kZXZraXQnO1xyXG5pbXBvcnQgeyBSZXNwb25zZUluZm8gfSBmcm9tICcuL3R5cGVzJztcclxuaW1wb3J0IHsgUmVxdWVzdEluZm9VdGlsIH0gZnJvbSAnLi91dGlscy9pbmRleCc7XHJcbmltcG9ydCB7IEJlZlJlcG9zaXRvcnkgfSBmcm9tICcuL2JlZl9yZXBvc2l0b3J5JztcclxuXHJcbi8qKlxyXG4gKiBCZWbluK7liqnlj5bmlbDmnI3liqFcclxuICovXHJcbmV4cG9ydCBjbGFzcyBCZWZMb29rdXBEYXRhU2VydmljZSB7XHJcblxyXG4gIHByaXZhdGUgdmlld01vZGVsQ29udGV4dDogVmlld01vZGVsQ29udGV4dDtcclxuXHJcbiAgcHJpdmF0ZSBiZWZSZXBvc2l0b3J5OiBCZWZSZXBvc2l0b3J5PEVudGl0eT47XHJcblxyXG4gIHB1YmxpYyBjb250ZXh0OiBhbnk7XHJcblxyXG4gIC8qKlxyXG4gICAqIOaehOmAoOWHveaVsFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHZpZXdNb2RlbENvbnRleHQ6IFZpZXdNb2RlbENvbnRleHQpIHtcclxuICAgIHRoaXMudmlld01vZGVsQ29udGV4dCA9IHZpZXdNb2RlbENvbnRleHQ7XHJcbiAgICB0aGlzLmJlZlJlcG9zaXRvcnkgPSB0aGlzLnZpZXdNb2RlbENvbnRleHQucmVwb3NpdG9yeSBhcyBCZWZSZXBvc2l0b3J5PEVudGl0eT5cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOW4ruWKqeWPluaVsFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXREYXRhKGhlbHBNZXRhZGF0YUlkOiBzdHJpbmcsIHF1ZXJ5UGFyYW0/OiBhbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgY29uc3QgdGFibGVOYW1lID0gaGVscE1ldGFkYXRhSWQuc3BsaXQoJy4nKVswXTtcclxuICAgIGNvbnN0IGxhYmVsSWQgPSBoZWxwTWV0YWRhdGFJZC5zcGxpdCgnLicpWzFdO1xyXG4gICAgcXVlcnlQYXJhbSA9IHF1ZXJ5UGFyYW0gfHwge307XHJcbiAgICByZXR1cm4gdGhpcy5leHRlbmRHZXRIZWxwRGF0YShsYWJlbElkLCB0YWJsZU5hbWUsIHF1ZXJ5UGFyYW0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5omp5bGV55qE5biu5Yqp5Y+W5pWwXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBleHRlbmRHZXRIZWxwRGF0YShsYWJlbElkOiBzdHJpbmcsIHRhYmxlTmFtZTogc3RyaW5nLCBxdWVyeVBhcmFtOiBhbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgY29uc3QgdXJsID0gYCR7dGhpcy5iZWZSZXBvc2l0b3J5LmFwaVByb3h5LmJhc2VVcmx9L2V4dGVuc2lvbi9lbGVtZW50aGVscHNgO1xyXG4gICAgY29uc3QgcmVxdWVzdEluZm8gPSBSZXF1ZXN0SW5mb1V0aWwuYnVpbGRSZXF1ZXN0SW5mbyh0aGlzLmJlZlJlcG9zaXRvcnkpO1xyXG4gICAgY29uc3QgYm9keSA9IHtcclxuICAgICAgbGFiZWxJZDogbGFiZWxJZCxcclxuICAgICAgbm9kZUNvZGU6IHRhYmxlTmFtZSxcclxuICAgICAgcXVlcnlQYXJhbTogcXVlcnlQYXJhbSxcclxuICAgICAgcmVxdWVzdEluZm86IHJlcXVlc3RJbmZvXHJcbiAgICB9O1xyXG4gICAgY29uc3QgcmVxdWVzdENvbmZpZzogSHR0cFJlcXVlc3RDb25maWcgPSB7XHJcbiAgICAgIGJvZHk6IGJvZHlcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgcmVzdWx0JCA9IHRoaXMuYmVmUmVwb3NpdG9yeS5hcGlQcm94eS5yZXF1ZXN0KEh0dHBNZXRob2RzLlBVVCwgdXJsLCByZXF1ZXN0Q29uZmlnKTtcclxuICAgIHJldHVybiByZXN1bHQkLnBpcGUoXHJcbiAgICAgIG1hcCgocmVzdWx0OiBhbnkpID0+IHtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcbn0iXX0=