/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_proxy_extend.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { of, EMPTY } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { RequestInfoUtil } from './utils';
import { BE_ERROR_HANDLER__TOKEN } from './tokens';
/**
 * 代理钩子
 * @record
 */
export function IProxyExtend() { }
if (false) {
    /**
     * @param {?} body
     * @return {?}
     */
    IProxyExtend.prototype.extendBody = function (body) { };
    /**
     * @param {?} headers
     * @return {?}
     */
    IProxyExtend.prototype.extendHeaders = function (headers) { };
    /**
     * @param {?} response
     * @param {?=} ignoreChanges
     * @return {?}
     */
    IProxyExtend.prototype.onResponse = function (response, ignoreChanges) { };
    /**
     * @param {?} error
     * @param {?} selfHandError
     * @param {?} ignoreError
     * @return {?}
     */
    IProxyExtend.prototype.onError = function (error, selfHandError, ignoreError) { };
}
/**
 * Bef代理扩展类
 */
var /**
 * Bef代理扩展类
 */
BefProxyExtend = /** @class */ (function () {
    /**
     * 构造函数
     */
    function BefProxyExtend(repository) {
        this.repository = repository;
    }
    Object.defineProperty(BefProxyExtend.prototype, "injector", {
        /**
       * 注入器
       */
        get: /**
         * 注入器
         * @private
         * @return {?}
         */
        function () {
            return this.repository.getInjector();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 返回结果处理
     */
    /**
     * 返回结果处理
     * @param {?} response
     * @return {?}
     */
    BefProxyExtend.prototype.onResponse = /**
     * 返回结果处理
     * @param {?} response
     * @return {?}
     */
    function (response) {
        this.handleResponseHeaders(response.headers);
        return this.handleResponseBody(response.body);
    };
    /**
     * 处理服务器端返回的headers数据
     */
    /**
     * 处理服务器端返回的headers数据
     * @private
     * @param {?} headers
     * @return {?}
     */
    BefProxyExtend.prototype.handleResponseHeaders = /**
     * 处理服务器端返回的headers数据
     * @private
     * @param {?} headers
     * @return {?}
     */
    function (headers) {
        this.repository.sessionService.handleResponseHeaders(headers);
    };
    /**
     * 处理服务器端返回的的body数据
     */
    /**
     * 处理服务器端返回的的body数据
     * @private
     * @param {?} responseInfo
     * @return {?}
     */
    BefProxyExtend.prototype.handleResponseBody = /**
     * 处理服务器端返回的的body数据
     * @private
     * @param {?} responseInfo
     * @return {?}
     */
    function (responseInfo) {
        if (responseInfo && responseInfo.innerDataChange) {
            this.repository.entityManager.handleDataChangeDetails(responseInfo.innerDataChange);
        }
        this.repository.entityManager.clearAllEntityChanges();
        if (responseInfo && responseInfo.hasOwnProperty('returnValue')) {
            return responseInfo.returnValue;
        }
        else {
            return responseInfo;
        }
    };
    /**
     * 错误处理
     */
    /**
     * 错误处理
     * @param {?} error
     * @return {?}
     */
    BefProxyExtend.prototype.onError = /**
     * 错误处理
     * @param {?} error
     * @return {?}
     */
    function (error) {
        var e_1, _a;
        // 获取所有load组件实例，消除
        /** @type {?} */
        var loadingServices = window['DEVKIT_LOADING_SERVICE'];
        if (loadingServices && loadingServices instanceof Array && loadingServices.length > 0) {
            try {
                for (var loadingServices_1 = tslib_1.__values(loadingServices), loadingServices_1_1 = loadingServices_1.next(); !loadingServices_1_1.done; loadingServices_1_1 = loadingServices_1.next()) {
                    var loadingService = loadingServices_1_1.value;
                    if (typeof (loadingService.hide) === 'function') {
                        loadingService.hide();
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (loadingServices_1_1 && !loadingServices_1_1.done && (_a = loadingServices_1.return)) _a.call(loadingServices_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        // 捕获到异常，处理异常信息
        /** @type {?} */
        var exceptionService = this.injector.get(BE_ERROR_HANDLER__TOKEN, null);
        if (!!exceptionService) {
            exceptionService.show(error);
            return EMPTY;
        }
        else {
            return EMPTY;
        }
    };
    /**
     * 扩展Headers
     */
    /**
     * 扩展Headers
     * @param {?} headers
     * @return {?}
     */
    BefProxyExtend.prototype.extendHeaders = /**
     * 扩展Headers
     * @param {?} headers
     * @return {?}
     */
    function (headers) {
        var _this = this;
        /** @type {?} */
        var $getSessionId = this.repository.sessionService.getBeSessionId();
        return $getSessionId.pipe(switchMap((/**
         * @return {?}
         */
        function () {
            headers = _this.repository.sessionService.extendRequestHeaders(headers);
            return of(headers);
        })));
    };
    /**
     * 扩展Body
     */
    /**
     * 扩展Body
     * @param {?} body
     * @return {?}
     */
    BefProxyExtend.prototype.extendBody = /**
     * 扩展Body
     * @param {?} body
     * @return {?}
     */
    function (body) {
        return RequestInfoUtil.appendRequestInfoToBody(body, this.repository);
    };
    return BefProxyExtend;
}());
/**
 * Bef代理扩展类
 */
export { BefProxyExtend };
if (false) {
    /**
     * @type {?}
     * @private
     */
    BefProxyExtend.prototype.repository;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVmX3Byb3h5X2V4dGVuZC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvbW9iaWxlLWJlZi8iLCJzb3VyY2VzIjpbImxpYi9iZWZfcHJveHlfZXh0ZW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBYyxFQUFFLEVBQUUsS0FBSyxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQ3pELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUkzQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRTFDLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLFVBQVUsQ0FBQzs7Ozs7QUFLbkQsa0NBS0M7Ozs7OztJQUpDLHdEQUFtRDs7Ozs7SUFDbkQsOERBQXFFOzs7Ozs7SUFDckUsMkVBQTZEOzs7Ozs7O0lBQzdELGtGQUFvRjs7Ozs7QUFNdEY7Ozs7SUFTRTs7T0FFRztJQUNILHdCQUFvQixVQUFpQztRQUFqQyxlQUFVLEdBQVYsVUFBVSxDQUF1QjtJQUFJLENBQUM7SUFQMUQsc0JBQVksb0NBQVE7UUFIcEI7O1NBRUM7Ozs7OztRQUNEO1lBQ0UsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3ZDLENBQUM7OztPQUFBO0lBT0Q7O09BRUc7Ozs7OztJQUNJLG1DQUFVOzs7OztJQUFqQixVQUFrQixRQUFhO1FBQzdCLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDN0MsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRDs7T0FFRzs7Ozs7OztJQUNLLDhDQUFxQjs7Ozs7O0lBQTdCLFVBQThCLE9BQVk7UUFDeEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMscUJBQXFCLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVEOztPQUVHOzs7Ozs7O0lBQ0ssMkNBQWtCOzs7Ozs7SUFBMUIsVUFBMkIsWUFBMEI7UUFDbkQsSUFBSSxZQUFZLElBQUksWUFBWSxDQUFDLGVBQWUsRUFBRTtZQUNoRCxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyx1QkFBdUIsQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLENBQUM7U0FDckY7UUFDRCxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1FBRXRELElBQUksWUFBWSxJQUFJLFlBQVksQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFDOUQsT0FBTyxZQUFZLENBQUMsV0FBVyxDQUFDO1NBQ2pDO2FBQU07WUFDTCxPQUFPLFlBQVksQ0FBQztTQUNyQjtJQUNILENBQUM7SUFFRDs7T0FFRzs7Ozs7O0lBQ0ksZ0NBQU87Ozs7O0lBQWQsVUFBZSxLQUFVOzs7O1lBRWpCLGVBQWUsR0FBRyxNQUFNLENBQUMsd0JBQXdCLENBQUM7UUFDeEQsSUFBSSxlQUFlLElBQUksZUFBZSxZQUFZLEtBQUssSUFBSSxlQUFlLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTs7Z0JBQ3JGLEtBQTZCLElBQUEsb0JBQUEsaUJBQUEsZUFBZSxDQUFBLGdEQUFBLDZFQUFFO29CQUF6QyxJQUFNLGNBQWMsNEJBQUE7b0JBQ3ZCLElBQUksT0FBTyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxVQUFVLEVBQUU7d0JBQy9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztxQkFDdkI7aUJBQ0Y7Ozs7Ozs7OztTQUNGOzs7WUFFSyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBYyx1QkFBdUIsRUFBRSxJQUFJLENBQUM7UUFDdEYsSUFBSSxDQUFDLENBQUMsZ0JBQWdCLEVBQUU7WUFDdEIsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO1lBQzVCLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7YUFBTTtZQUNMLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7SUFDSCxDQUFDO0lBRUQ7O09BRUc7Ozs7OztJQUNJLHNDQUFhOzs7OztJQUFwQixVQUFxQixPQUFvQjtRQUF6QyxpQkFRQzs7WUFQTyxhQUFhLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsY0FBYyxFQUFFO1FBQ3JFLE9BQU8sYUFBYSxDQUFDLElBQUksQ0FDdkIsU0FBUzs7O1FBQUM7WUFDUixPQUFPLEdBQUcsS0FBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDdkUsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckIsQ0FBQyxFQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFRDs7T0FFRzs7Ozs7O0lBQ0ksbUNBQVU7Ozs7O0lBQWpCLFVBQWtCLElBQVM7UUFDekIsT0FBTyxlQUFlLENBQUMsdUJBQXVCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRUgscUJBQUM7QUFBRCxDQUFDLEFBeEZELElBd0ZDOzs7Ozs7Ozs7O0lBNUVhLG9DQUF5QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIG9mLCBFTVBUWSwgdGhyb3dFcnJvciB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IEVudGl0eSwgSHR0cEhlYWRlcnMsIEluamVjdEZsYWdzLCBJbmplY3RvciB9IGZyb20gJ0BmYXJyaXMvbW9iaWxlLWRldmtpdCc7XHJcbmltcG9ydCB7IElFcnJvclNlcnZlLCBSZXNwb25zZUluZm8gfSBmcm9tICcuL3R5cGVzJztcclxuaW1wb3J0IHsgQmVmUmVwb3NpdG9yeSB9IGZyb20gJy4vYmVmX3JlcG9zaXRvcnknO1xyXG5pbXBvcnQgeyBSZXF1ZXN0SW5mb1V0aWwgfSBmcm9tICcuL3V0aWxzJztcclxuXHJcbmltcG9ydCB7IEJFX0VSUk9SX0hBTkRMRVJfX1RPS0VOIH0gZnJvbSAnLi90b2tlbnMnO1xyXG5cclxuLyoqXHJcbiAqIOS7o+eQhumSqeWtkFxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJUHJveHlFeHRlbmQge1xyXG4gIGV4dGVuZEJvZHkoYm9keTogYW55KTogeyBbcHJvcE5hbWU6IHN0cmluZ106IGFueSB9O1xyXG4gIGV4dGVuZEhlYWRlcnMoaGVhZGVyczogeyBbcHJvcE5hbWU6IHN0cmluZ106IGFueSB9KTogT2JzZXJ2YWJsZTxhbnk+O1xyXG4gIG9uUmVzcG9uc2U/KHJlc3BvbnNlOiBSZXNwb25zZUluZm8sIGlnbm9yZUNoYW5nZXM/OiBib29sZWFuKTtcclxuICBvbkVycm9yPyhlcnJvcjogYW55LCBzZWxmSGFuZEVycm9yOiBib29sZWFuLCBpZ25vcmVFcnJvcjogYm9vbGVhbik6IE9ic2VydmFibGU8YW55PjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEJlZuS7o+eQhuaJqeWxleexu1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEJlZlByb3h5RXh0ZW5kIGltcGxlbWVudHMgSVByb3h5RXh0ZW5kIHtcclxuXHJcbiAgLyoqXHJcbiAqIOazqOWFpeWZqFxyXG4gKi9cclxuICBwcml2YXRlIGdldCBpbmplY3RvcigpIHtcclxuICAgIHJldHVybiB0aGlzLnJlcG9zaXRvcnkuZ2V0SW5qZWN0b3IoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaehOmAoOWHveaVsFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVwb3NpdG9yeTogQmVmUmVwb3NpdG9yeTxFbnRpdHk+KSB7IH1cclxuXHJcbiAgLyoqXHJcbiAgICog6L+U5Zue57uT5p6c5aSE55CGXHJcbiAgICovXHJcbiAgcHVibGljIG9uUmVzcG9uc2UocmVzcG9uc2U6IGFueSk6IFJlc3BvbnNlSW5mbyB7XHJcbiAgICB0aGlzLmhhbmRsZVJlc3BvbnNlSGVhZGVycyhyZXNwb25zZS5oZWFkZXJzKTtcclxuICAgIHJldHVybiB0aGlzLmhhbmRsZVJlc3BvbnNlQm9keShyZXNwb25zZS5ib2R5KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWkhOeQhuacjeWKoeWZqOerr+i/lOWbnueahGhlYWRlcnPmlbDmja5cclxuICAgKi9cclxuICBwcml2YXRlIGhhbmRsZVJlc3BvbnNlSGVhZGVycyhoZWFkZXJzOiBhbnkpOiB2b2lkIHtcclxuICAgIHRoaXMucmVwb3NpdG9yeS5zZXNzaW9uU2VydmljZS5oYW5kbGVSZXNwb25zZUhlYWRlcnMoaGVhZGVycyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlpITnkIbmnI3liqHlmajnq6/ov5Tlm57nmoTnmoRib2R55pWw5o2uXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBoYW5kbGVSZXNwb25zZUJvZHkocmVzcG9uc2VJbmZvOiBSZXNwb25zZUluZm8pOiBSZXNwb25zZUluZm8ge1xyXG4gICAgaWYgKHJlc3BvbnNlSW5mbyAmJiByZXNwb25zZUluZm8uaW5uZXJEYXRhQ2hhbmdlKSB7XHJcbiAgICAgIHRoaXMucmVwb3NpdG9yeS5lbnRpdHlNYW5hZ2VyLmhhbmRsZURhdGFDaGFuZ2VEZXRhaWxzKHJlc3BvbnNlSW5mby5pbm5lckRhdGFDaGFuZ2UpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5yZXBvc2l0b3J5LmVudGl0eU1hbmFnZXIuY2xlYXJBbGxFbnRpdHlDaGFuZ2VzKCk7XHJcblxyXG4gICAgaWYgKHJlc3BvbnNlSW5mbyAmJiByZXNwb25zZUluZm8uaGFzT3duUHJvcGVydHkoJ3JldHVyblZhbHVlJykpIHtcclxuICAgICAgcmV0dXJuIHJlc3BvbnNlSW5mby5yZXR1cm5WYWx1ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiByZXNwb25zZUluZm87XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDplJnor6/lpITnkIZcclxuICAgKi9cclxuICBwdWJsaWMgb25FcnJvcihlcnJvcjogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIC8vIOiOt+WPluaJgOaciWxvYWTnu4Tku7blrp7kvovvvIzmtojpmaRcclxuICAgIGNvbnN0IGxvYWRpbmdTZXJ2aWNlcyA9IHdpbmRvd1snREVWS0lUX0xPQURJTkdfU0VSVklDRSddO1xyXG4gICAgaWYgKGxvYWRpbmdTZXJ2aWNlcyAmJiBsb2FkaW5nU2VydmljZXMgaW5zdGFuY2VvZiBBcnJheSAmJiBsb2FkaW5nU2VydmljZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICBmb3IgKGNvbnN0IGxvYWRpbmdTZXJ2aWNlIG9mIGxvYWRpbmdTZXJ2aWNlcykge1xyXG4gICAgICAgIGlmICh0eXBlb2YgKGxvYWRpbmdTZXJ2aWNlLmhpZGUpID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICBsb2FkaW5nU2VydmljZS5oaWRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyDmjZXojrfliLDlvILluLjvvIzlpITnkIblvILluLjkv6Hmga9cclxuICAgIGNvbnN0IGV4Y2VwdGlvblNlcnZpY2UgPSB0aGlzLmluamVjdG9yLmdldDxJRXJyb3JTZXJ2ZT4oQkVfRVJST1JfSEFORExFUl9fVE9LRU4sIG51bGwpXHJcbiAgICBpZiAoISFleGNlcHRpb25TZXJ2aWNlKSB7XHJcbiAgICAgIGV4Y2VwdGlvblNlcnZpY2Uuc2hvdyhlcnJvcilcclxuICAgICAgcmV0dXJuIEVNUFRZO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIEVNUFRZO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5omp5bGVSGVhZGVyc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBleHRlbmRIZWFkZXJzKGhlYWRlcnM6IEh0dHBIZWFkZXJzKTogT2JzZXJ2YWJsZTx7IFtwcm9wTmFtZTogc3RyaW5nXTogYW55IH0+IHtcclxuICAgIGNvbnN0ICRnZXRTZXNzaW9uSWQgPSB0aGlzLnJlcG9zaXRvcnkuc2Vzc2lvblNlcnZpY2UuZ2V0QmVTZXNzaW9uSWQoKTtcclxuICAgIHJldHVybiAkZ2V0U2Vzc2lvbklkLnBpcGUoXHJcbiAgICAgIHN3aXRjaE1hcCgoKSA9PiB7XHJcbiAgICAgICAgaGVhZGVycyA9IHRoaXMucmVwb3NpdG9yeS5zZXNzaW9uU2VydmljZS5leHRlbmRSZXF1ZXN0SGVhZGVycyhoZWFkZXJzKTtcclxuICAgICAgICByZXR1cm4gb2YoaGVhZGVycyk7XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5omp5bGVQm9keVxyXG4gICAqL1xyXG4gIHB1YmxpYyBleHRlbmRCb2R5KGJvZHk6IGFueSk6IGFueSB7XHJcbiAgICByZXR1cm4gUmVxdWVzdEluZm9VdGlsLmFwcGVuZFJlcXVlc3RJbmZvVG9Cb2R5KGJvZHksIHRoaXMucmVwb3NpdG9yeSk7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=