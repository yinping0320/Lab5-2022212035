/**
 * @fileoverview added by tsickle
 * Generated from: lib/session/handling-strategies/unified_handling_strategy.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { of } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { BefHttpUtil } from '../../utils/index';
import { BefSessionHandlingStrategy } from './handling_strategy';
/**
 * 统一的Session处理策略
 * \@todo
 * 1、目前Session其实还是隔离的，因为使用了beBaseUrl做了缓存；
 * 2、将来框架token问题解决了之后，使用token或者表单基url做缓存key；
 * 3、基于2缓存之后，如何closeSession，成为问题，除非appAcontext是一颗树，只有根AppContext初始化的时候，才去closeSession。
 */
var /**
 * 统一的Session处理策略
 * \@todo
 * 1、目前Session其实还是隔离的，因为使用了beBaseUrl做了缓存；
 * 2、将来框架token问题解决了之后，使用token或者表单基url做缓存key；
 * 3、基于2缓存之后，如何closeSession，成为问题，除非appAcontext是一颗树，只有根AppContext初始化的时候，才去closeSession。
 */
BefUnifiedSessionHandlingStrategy = /** @class */ (function (_super) {
    tslib_1.__extends(BefUnifiedSessionHandlingStrategy, _super);
    /**
     * 构造函数
     */
    function BefUnifiedSessionHandlingStrategy(storageStrategy, frmSessionService, httpClient, beBaseUrl) {
        var _this = _super.call(this, storageStrategy, frmSessionService, httpClient, beBaseUrl) || this;
        _this.beCloseSessionUrl = beBaseUrl + "/service/closesession";
        return _this;
    }
    /**
     * 获取BeSession
     */
    /**
     * 获取BeSession
     * @return {?}
     */
    BefUnifiedSessionHandlingStrategy.prototype.getSessionId = /**
     * 获取BeSession
     * @return {?}
     */
    function () {
        /** @type {?} */
        var sessionKey = this.getSessionStorageKey();
        /** @type {?} */
        var sessionId = this.storageStrategy.getItem(sessionKey);
        /** @type {?} */
        var beSessionId$ = of(sessionId);
        /** @type {?} */
        var result$ = this.closeOldSession().pipe(switchMap((/**
         * @return {?}
         */
        function () {
            return beSessionId$;
        })));
        return result$;
    };
    /**
     * 设置BeSessionId
     */
    /**
     * 设置BeSessionId
     * @param {?} sessionId
     * @return {?}
     */
    BefUnifiedSessionHandlingStrategy.prototype.setSessionId = /**
     * 设置BeSessionId
     * @param {?} sessionId
     * @return {?}
     */
    function (sessionId) {
        /** @type {?} */
        var sessionKey = this.getSessionStorageKey();
        this.storageStrategy.setItem(sessionKey, sessionId);
    };
    /**
     * 清空Sessionid
     */
    /**
     * 清空Sessionid
     * @return {?}
     */
    BefUnifiedSessionHandlingStrategy.prototype.clearSessionId = /**
     * 清空Sessionid
     * @return {?}
     */
    function () {
        /** @type {?} */
        var sessionKey = this.getSessionStorageKey();
        this.oldBeSessionId = this.getSessionIdFromStorage();
        this.storageStrategy.removeItem(sessionKey);
    };
    /**
     * 扩展Session相关头信息
     */
    /**
     * 扩展Session相关头信息
     * @param {?} headers
     * @return {?}
     */
    BefUnifiedSessionHandlingStrategy.prototype.handleRequestHeaders = /**
     * 扩展Session相关头信息
     * @param {?} headers
     * @return {?}
     */
    function (headers) {
        /** @type {?} */
        var frmSessionId = this.getFrameworkSessionId();
        if (frmSessionId) {
            headers = BefHttpUtil.appendCafRuntimeCommonVariable(headers, frmSessionId);
        }
        /** @type {?} */
        var beSessionId = this.getSessionIdFromStorage();
        if (beSessionId) {
            headers = BefHttpUtil.appendCafRuntimeContext(headers, beSessionId);
        }
        return headers;
    };
    /**
     * 处理服务器端返回的headers
     */
    /**
     * 处理服务器端返回的headers
     * @param {?} headers
     * @return {?}
     */
    BefUnifiedSessionHandlingStrategy.prototype.handleReponseHeaders = /**
     * 处理服务器端返回的headers
     * @param {?} headers
     * @return {?}
     */
    function (headers) {
        /** @type {?} */
        var beSessionId = headers['befsessionid'];
        /** @type {?} */
        var oldBeSessionId = this.getSessionId();
        if (beSessionId && beSessionId !== oldBeSessionId) {
            this.setSessionId(beSessionId);
        }
    };
    /**
     * 获取某个Repository对应的BeSession的唯一key
     */
    /**
     * 获取某个Repository对应的BeSession的唯一key
     * @protected
     * @return {?}
     */
    BefUnifiedSessionHandlingStrategy.prototype.getSessionStorageKey = /**
     * 获取某个Repository对应的BeSession的唯一key
     * @protected
     * @return {?}
     */
    function () {
        return this.beBaseUrl;
    };
    return BefUnifiedSessionHandlingStrategy;
}(BefSessionHandlingStrategy));
export { BefUnifiedSessionHandlingStrategy };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pZmllZF9oYW5kbGluZ19zdHJhdGVneS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvbW9iaWxlLWJlZi8iLCJzb3VyY2VzIjpbImxpYi9zZXNzaW9uL2hhbmRsaW5nLXN0cmF0ZWdpZXMvdW5pZmllZF9oYW5kbGluZ19zdHJhdGVneS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUkzQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFaEQsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0scUJBQXFCLENBQUM7Ozs7Ozs7O0FBVWpFOzs7Ozs7OztJQUFnRCw2REFBMEI7SUFFeEU7O09BRUc7SUFDSCwyQ0FDRSxlQUF5QyxFQUN6QyxpQkFBMEMsRUFDMUMsVUFBc0IsRUFDdEIsU0FBaUI7UUFKbkIsWUFNRSxrQkFBTSxlQUFlLEVBQUUsaUJBQWlCLEVBQUUsVUFBVSxFQUFFLFNBQVMsQ0FBQyxTQUVqRTtRQURDLEtBQUksQ0FBQyxpQkFBaUIsR0FBTSxTQUFTLDBCQUF1QixDQUFDOztJQUMvRCxDQUFDO0lBRUQ7O09BRUc7Ozs7O0lBQ0ksd0RBQVk7Ozs7SUFBbkI7O1lBQ1EsVUFBVSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsRUFBRTs7WUFDeEMsU0FBUyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQzs7WUFDcEQsWUFBWSxHQUFJLEVBQUUsQ0FBQyxTQUFTLENBQUM7O1lBRTdCLE9BQU8sR0FBRyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUMsSUFBSSxDQUN6QyxTQUFTOzs7UUFBQztZQUNSLE9BQU8sWUFBWSxDQUFDO1FBQ3RCLENBQUMsRUFBQyxDQUNIO1FBRUQsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQUVEOztPQUVHOzs7Ozs7SUFDSSx3REFBWTs7Ozs7SUFBbkIsVUFBb0IsU0FBaUI7O1lBQzdCLFVBQVUsR0FBRyxJQUFJLENBQUMsb0JBQW9CLEVBQUU7UUFDOUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRDs7T0FFRzs7Ozs7SUFDSSwwREFBYzs7OztJQUFyQjs7WUFDUSxVQUFVLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixFQUFFO1FBQzlDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixFQUFFLENBQUM7UUFDckQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVEOztPQUVHOzs7Ozs7SUFDSSxnRUFBb0I7Ozs7O0lBQTNCLFVBQTRCLE9BQVk7O1lBQ2hDLFlBQVksR0FBRyxJQUFJLENBQUMscUJBQXFCLEVBQUU7UUFDakQsSUFBSSxZQUFZLEVBQUU7WUFDaEIsT0FBTyxHQUFHLFdBQVcsQ0FBQyw4QkFBOEIsQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUM7U0FDN0U7O1lBRUssV0FBVyxHQUFHLElBQUksQ0FBQyx1QkFBdUIsRUFBRTtRQUNsRCxJQUFJLFdBQVcsRUFBRTtZQUNmLE9BQU8sR0FBRyxXQUFXLENBQUMsdUJBQXVCLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1NBQ3JFO1FBQ0QsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQUVEOztPQUVHOzs7Ozs7SUFDSSxnRUFBb0I7Ozs7O0lBQTNCLFVBQTRCLE9BQVk7O1lBQ2hDLFdBQVcsR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDOztZQUNyQyxjQUFjLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRTtRQUMxQyxJQUFJLFdBQVcsSUFBSSxXQUFXLEtBQUssY0FBYyxFQUFFO1lBQ2pELElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDaEM7SUFDSCxDQUFDO0lBRUQ7O09BRUc7Ozs7OztJQUNPLGdFQUFvQjs7Ozs7SUFBOUI7UUFDRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQztJQUVILHdDQUFDO0FBQUQsQ0FBQyxBQW5GRCxDQUFnRCwwQkFBMEIsR0FtRnpFO0FBRUQsT0FBTyxFQUFFLGlDQUFpQyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGZhcnJpcy9tb2JpbGUtZGV2a2l0JztcclxuaW1wb3J0IHsgRnJhbWV3b3JrU2Vzc2lvblNlcnZpY2UgfSBmcm9tICcuLi8uLi9mcmFtZXdvcmtfc2Vzc2lvbl9zZXJ2aWNlJztcclxuaW1wb3J0IHsgQmVmSHR0cFV0aWwgfSBmcm9tICcuLi8uLi91dGlscy9pbmRleCc7XHJcbmltcG9ydCB7IEJlU2Vzc2lvblN0b3JhZ2VTdHJhdGVneSB9IGZyb20gJy4uL3N0b3JhZ2Utc3RyYXRlZ2llcy9pbmRleCc7XHJcbmltcG9ydCB7IEJlZlNlc3Npb25IYW5kbGluZ1N0cmF0ZWd5IH0gZnJvbSAnLi9oYW5kbGluZ19zdHJhdGVneSc7XHJcblxyXG5cclxuLyoqXHJcbiAqIOe7n+S4gOeahFNlc3Npb27lpITnkIbnrZbnlaVcclxuICogQHRvZG9cclxuICogMeOAgeebruWJjVNlc3Npb27lhbblrp7ov5jmmK/pmpTnprvnmoTvvIzlm6DkuLrkvb/nlKjkuoZiZUJhc2VVcmzlgZrkuobnvJPlrZjvvJtcclxuICogMuOAgeWwhuadpeahhuaetnRva2Vu6Zeu6aKY6Kej5Yaz5LqG5LmL5ZCO77yM5L2/55SodG9rZW7miJbogIXooajljZXln7p1cmzlgZrnvJPlrZhrZXnvvJtcclxuICogM+OAgeWfuuS6jjLnvJPlrZjkuYvlkI7vvIzlpoLkvZVjbG9zZVNlc3Npb27vvIzmiJDkuLrpl67popjvvIzpmaTpnZ5hcHBBY29udGV4dOaYr+S4gOmil+agke+8jOWPquacieaguUFwcENvbnRleHTliJ3lp4vljJbnmoTml7blgJnvvIzmiY3ljrtjbG9zZVNlc3Npb27jgIJcclxuICovXHJcbmNsYXNzIEJlZlVuaWZpZWRTZXNzaW9uSGFuZGxpbmdTdHJhdGVneSBleHRlbmRzIEJlZlNlc3Npb25IYW5kbGluZ1N0cmF0ZWd5IHtcclxuXHJcbiAgLyoqXHJcbiAgICog5p6E6YCg5Ye95pWwXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBzdG9yYWdlU3RyYXRlZ3k6IEJlU2Vzc2lvblN0b3JhZ2VTdHJhdGVneSxcclxuICAgIGZybVNlc3Npb25TZXJ2aWNlOiBGcmFtZXdvcmtTZXNzaW9uU2VydmljZSxcclxuICAgIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQsXHJcbiAgICBiZUJhc2VVcmw6IHN0cmluZ1xyXG4gICkge1xyXG4gICAgc3VwZXIoc3RvcmFnZVN0cmF0ZWd5LCBmcm1TZXNzaW9uU2VydmljZSwgaHR0cENsaWVudCwgYmVCYXNlVXJsKTtcclxuICAgIHRoaXMuYmVDbG9zZVNlc3Npb25VcmwgPSBgJHtiZUJhc2VVcmx9L3NlcnZpY2UvY2xvc2VzZXNzaW9uYDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPlkJlU2Vzc2lvblxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRTZXNzaW9uSWQoKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcclxuICAgIGNvbnN0IHNlc3Npb25LZXkgPSB0aGlzLmdldFNlc3Npb25TdG9yYWdlS2V5KCk7XHJcbiAgICBjb25zdCBzZXNzaW9uSWQgPSB0aGlzLnN0b3JhZ2VTdHJhdGVneS5nZXRJdGVtKHNlc3Npb25LZXkpO1xyXG4gICAgY29uc3QgYmVTZXNzaW9uSWQkID0gIG9mKHNlc3Npb25JZCk7XHJcblxyXG4gICAgY29uc3QgcmVzdWx0JCA9IHRoaXMuY2xvc2VPbGRTZXNzaW9uKCkucGlwZShcclxuICAgICAgc3dpdGNoTWFwKCgpID0+IHtcclxuICAgICAgICByZXR1cm4gYmVTZXNzaW9uSWQkO1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0JDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiuvue9rkJlU2Vzc2lvbklkXHJcbiAgICovXHJcbiAgcHVibGljIHNldFNlc3Npb25JZChzZXNzaW9uSWQ6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgY29uc3Qgc2Vzc2lvbktleSA9IHRoaXMuZ2V0U2Vzc2lvblN0b3JhZ2VLZXkoKTtcclxuICAgIHRoaXMuc3RvcmFnZVN0cmF0ZWd5LnNldEl0ZW0oc2Vzc2lvbktleSwgc2Vzc2lvbklkKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOa4heepulNlc3Npb25pZFxyXG4gICAqL1xyXG4gIHB1YmxpYyBjbGVhclNlc3Npb25JZCgpIHtcclxuICAgIGNvbnN0IHNlc3Npb25LZXkgPSB0aGlzLmdldFNlc3Npb25TdG9yYWdlS2V5KCk7XHJcbiAgICB0aGlzLm9sZEJlU2Vzc2lvbklkID0gdGhpcy5nZXRTZXNzaW9uSWRGcm9tU3RvcmFnZSgpO1xyXG4gICAgdGhpcy5zdG9yYWdlU3RyYXRlZ3kucmVtb3ZlSXRlbShzZXNzaW9uS2V5KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaJqeWxlVNlc3Npb27nm7jlhbPlpLTkv6Hmga9cclxuICAgKi9cclxuICBwdWJsaWMgaGFuZGxlUmVxdWVzdEhlYWRlcnMoaGVhZGVyczogYW55KTogYW55IHtcclxuICAgIGNvbnN0IGZybVNlc3Npb25JZCA9IHRoaXMuZ2V0RnJhbWV3b3JrU2Vzc2lvbklkKCk7XHJcbiAgICBpZiAoZnJtU2Vzc2lvbklkKSB7XHJcbiAgICAgIGhlYWRlcnMgPSBCZWZIdHRwVXRpbC5hcHBlbmRDYWZSdW50aW1lQ29tbW9uVmFyaWFibGUoaGVhZGVycywgZnJtU2Vzc2lvbklkKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBiZVNlc3Npb25JZCA9IHRoaXMuZ2V0U2Vzc2lvbklkRnJvbVN0b3JhZ2UoKTtcclxuICAgIGlmIChiZVNlc3Npb25JZCkge1xyXG4gICAgICBoZWFkZXJzID0gQmVmSHR0cFV0aWwuYXBwZW5kQ2FmUnVudGltZUNvbnRleHQoaGVhZGVycywgYmVTZXNzaW9uSWQpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGhlYWRlcnM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlpITnkIbmnI3liqHlmajnq6/ov5Tlm57nmoRoZWFkZXJzXHJcbiAgICovXHJcbiAgcHVibGljIGhhbmRsZVJlcG9uc2VIZWFkZXJzKGhlYWRlcnM6IGFueSk6IHZvaWQge1xyXG4gICAgY29uc3QgYmVTZXNzaW9uSWQgPSBoZWFkZXJzWydiZWZzZXNzaW9uaWQnXTtcclxuICAgIGNvbnN0IG9sZEJlU2Vzc2lvbklkID0gdGhpcy5nZXRTZXNzaW9uSWQoKTtcclxuICAgIGlmIChiZVNlc3Npb25JZCAmJiBiZVNlc3Npb25JZCAhPT0gb2xkQmVTZXNzaW9uSWQpIHtcclxuICAgICAgdGhpcy5zZXRTZXNzaW9uSWQoYmVTZXNzaW9uSWQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+W5p+Q5LiqUmVwb3NpdG9yeeWvueW6lOeahEJlU2Vzc2lvbueahOWUr+S4gGtleVxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBnZXRTZXNzaW9uU3RvcmFnZUtleSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuYmVCYXNlVXJsO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IEJlZlVuaWZpZWRTZXNzaW9uSGFuZGxpbmdTdHJhdGVneSB9O1xyXG4iXX0=