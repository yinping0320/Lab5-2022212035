/**
 * @fileoverview added by tsickle
 * Generated from: lib/session/handling-strategies/separated_handling_strategy.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { of } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { BefHttpUtil, BefEnvUtil } from '../../utils/index';
import { BefSessionHandlingStrategy } from './handling_strategy';
/**
 * 隔离的BeSession处理策略
 */
var /**
 * 隔离的BeSession处理策略
 */
BefSeparatedSessionHandlingStrategy = /** @class */ (function (_super) {
    tslib_1.__extends(BefSeparatedSessionHandlingStrategy, _super);
    /**
     * 构造函数
     */
    function BefSeparatedSessionHandlingStrategy(storageStrategy, frmSessionService, httpClient, beBaseUrl) {
        return _super.call(this, storageStrategy, frmSessionService, httpClient, beBaseUrl) || this;
    }
    /**
     * 获取BeSessionId
     */
    /**
     * 获取BeSessionId
     * @return {?}
     */
    BefSeparatedSessionHandlingStrategy.prototype.getSessionId = /**
     * 获取BeSessionId
     * @return {?}
     */
    function () {
        /** @type {?} */
        var beSessionId = this.getSessionIdFromStorage();
        /** @type {?} */
        var beSessionId$;
        if (beSessionId) {
            beSessionId$ = of(beSessionId);
            this.setBesessionExisted(true);
        }
        else {
            beSessionId$ = this.createSession();
        }
        /** @type {?} */
        var result$ = this.closeOldSession().pipe(switchMap((/**
         * @return {?}
         */
        function () {
            return beSessionId$;
        })));
        return result$;
    };
    /**
     * 设置BeSessionId
     */
    /**
     * 设置BeSessionId
     * @param {?} sessionId
     * @return {?}
     */
    BefSeparatedSessionHandlingStrategy.prototype.setSessionId = /**
     * 设置BeSessionId
     * @param {?} sessionId
     * @return {?}
     */
    function (sessionId) {
        /** @type {?} */
        var sessionKey = this.getSessionStorageKey();
        this.storageStrategy.setItem(sessionKey, sessionId);
    };
    /**
     * 清空BeSessionId
     */
    /**
     * 清空BeSessionId
     * @return {?}
     */
    BefSeparatedSessionHandlingStrategy.prototype.clearSessionId = /**
     * 清空BeSessionId
     * @return {?}
     */
    function () {
        if (BefEnvUtil.isInFramework() === true) {
            this.storageStrategy.removeItemsByScope(this.frmSessionId);
        }
        else {
            /** @type {?} */
            var sessionKey = this.getSessionStorageKey();
            this.oldBeSessionId = this.getSessionIdFromStorage();
            this.storageStrategy.removeItem(sessionKey);
        }
    };
    /**
     * 扩展BeSessionId相关头信息
     */
    /**
     * 扩展BeSessionId相关头信息
     * @param {?} headers
     * @return {?}
     */
    BefSeparatedSessionHandlingStrategy.prototype.handleRequestHeaders = /**
     * 扩展BeSessionId相关头信息
     * @param {?} headers
     * @return {?}
     */
    function (headers) {
        /** @type {?} */
        var frmSessionId = this.getFrameworkSessionId();
        /** @type {?} */
        var beSessionId = this.getSessionIdFromStorage();
        if (frmSessionId) {
            headers = BefHttpUtil.appendCafRuntimeCommonVariable(headers, frmSessionId);
        }
        if (beSessionId) {
            headers = BefHttpUtil.appendCafRuntimeContext(headers, beSessionId);
            headers = BefHttpUtil.appendSessionId(headers, beSessionId);
        }
        return headers;
    };
    /**
     * 处理服务器端返回的headers
     */
    /**
     * 处理服务器端返回的headers
     * @param {?} headers
     * @return {?}
     */
    BefSeparatedSessionHandlingStrategy.prototype.handleReponseHeaders = /**
     * 处理服务器端返回的headers
     * @param {?} headers
     * @return {?}
     */
    function (headers) {
    };
    /**
     * 获取某个Repository对应的BeSession的唯一key
     */
    /**
     * 获取某个Repository对应的BeSession的唯一key
     * @protected
     * @return {?}
     */
    BefSeparatedSessionHandlingStrategy.prototype.getSessionStorageKey = /**
     * 获取某个Repository对应的BeSession的唯一key
     * @protected
     * @return {?}
     */
    function () {
        return this.frmSessionId + "_" + this.beBaseUrl;
    };
    return BefSeparatedSessionHandlingStrategy;
}(BefSessionHandlingStrategy));
export { BefSeparatedSessionHandlingStrategy };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VwYXJhdGVkX2hhbmRsaW5nX3N0cmF0ZWd5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtYmVmLyIsInNvdXJjZXMiOlsibGliL3Nlc3Npb24vaGFuZGxpbmctc3RyYXRlZ2llcy9zZXBhcmF0ZWRfaGFuZGxpbmdfc3RyYXRlZ3kudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUc1RCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7OztBQUtqRTs7OztJQUFrRCwrREFBMEI7SUFFMUU7O09BRUc7SUFDSCw2Q0FDRSxlQUF5QyxFQUN6QyxpQkFBMEMsRUFDMUMsVUFBc0IsRUFDdEIsU0FBaUI7ZUFFakIsa0JBQU0sZUFBZSxFQUFFLGlCQUFpQixFQUFFLFVBQVUsRUFBRSxTQUFTLENBQUM7SUFDbEUsQ0FBQztJQUVEOztPQUVHOzs7OztJQUNJLDBEQUFZOzs7O0lBQW5COztZQUNRLFdBQVcsR0FBRyxJQUFJLENBQUMsdUJBQXVCLEVBQUU7O1lBQzlDLFlBQWdDO1FBQ3BDLElBQUksV0FBVyxFQUFFO1lBQ2YsWUFBWSxHQUFJLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUNoQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDaEM7YUFBTTtZQUNMLFlBQVksR0FBRyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDckM7O1lBRUssT0FBTyxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxJQUFJLENBQ3pDLFNBQVM7OztRQUFDO1lBQ1IsT0FBTyxZQUFZLENBQUM7UUFDdEIsQ0FBQyxFQUFDLENBQ0g7UUFFRCxPQUFPLE9BQU8sQ0FBQztJQUVqQixDQUFDO0lBRUQ7O09BRUc7Ozs7OztJQUNJLDBEQUFZOzs7OztJQUFuQixVQUFvQixTQUFpQjs7WUFDN0IsVUFBVSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsRUFBRTtRQUM5QyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVEOztPQUVHOzs7OztJQUNJLDREQUFjOzs7O0lBQXJCO1FBQ0UsSUFBSSxVQUFVLENBQUMsYUFBYSxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3ZDLElBQUksQ0FBQyxlQUFlLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQzVEO2FBQU07O2dCQUNDLFVBQVUsR0FBRyxJQUFJLENBQUMsb0JBQW9CLEVBQUU7WUFDOUMsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztZQUNyRCxJQUFJLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUM3QztJQUNILENBQUM7SUFFRDs7T0FFRzs7Ozs7O0lBQ0ksa0VBQW9COzs7OztJQUEzQixVQUE0QixPQUFvQjs7WUFDeEMsWUFBWSxHQUFHLElBQUksQ0FBQyxxQkFBcUIsRUFBRTs7WUFDM0MsV0FBVyxHQUFHLElBQUksQ0FBQyx1QkFBdUIsRUFBRTtRQUVsRCxJQUFJLFlBQVksRUFBRTtZQUNoQixPQUFPLEdBQUcsV0FBVyxDQUFDLDhCQUE4QixDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztTQUM3RTtRQUVELElBQUksV0FBVyxFQUFFO1lBQ2YsT0FBTyxHQUFHLFdBQVcsQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFDcEUsT0FBTyxHQUFHLFdBQVcsQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1NBQzdEO1FBRUQsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQUVEOztPQUVHOzs7Ozs7SUFDSSxrRUFBb0I7Ozs7O0lBQTNCLFVBQTRCLE9BQVk7SUFDeEMsQ0FBQztJQUVEOztPQUVHOzs7Ozs7SUFDTyxrRUFBb0I7Ozs7O0lBQTlCO1FBQ0UsT0FBVSxJQUFJLENBQUMsWUFBWSxTQUFJLElBQUksQ0FBQyxTQUFXLENBQUM7SUFDbEQsQ0FBQztJQUVILDBDQUFDO0FBQUQsQ0FBQyxBQTFGRCxDQUFrRCwwQkFBMEIsR0EwRjNFO0FBRUQsT0FBTyxFQUFFLG1DQUFtQyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IEh0dHBIZWFkZXJzLCBIdHRwQ2xpZW50IH0gZnJvbSAnQGZhcnJpcy9tb2JpbGUtZGV2a2l0JztcclxuXHJcbmltcG9ydCB7IEJlZkh0dHBVdGlsLCBCZWZFbnZVdGlsIH0gZnJvbSAnLi4vLi4vdXRpbHMvaW5kZXgnO1xyXG5pbXBvcnQgeyBGcmFtZXdvcmtTZXNzaW9uU2VydmljZSB9IGZyb20gJy4uLy4uL2ZyYW1ld29ya19zZXNzaW9uX3NlcnZpY2UnO1xyXG5pbXBvcnQgeyBCZVNlc3Npb25TdG9yYWdlU3RyYXRlZ3kgfSBmcm9tICcuLi9zdG9yYWdlLXN0cmF0ZWdpZXMvaW5kZXgnO1xyXG5pbXBvcnQgeyBCZWZTZXNzaW9uSGFuZGxpbmdTdHJhdGVneSB9IGZyb20gJy4vaGFuZGxpbmdfc3RyYXRlZ3knO1xyXG5cclxuLyoqXHJcbiAqIOmalOemu+eahEJlU2Vzc2lvbuWkhOeQhuetlueVpVxyXG4gKi9cclxuY2xhc3MgQmVmU2VwYXJhdGVkU2Vzc2lvbkhhbmRsaW5nU3RyYXRlZ3kgZXh0ZW5kcyBCZWZTZXNzaW9uSGFuZGxpbmdTdHJhdGVneSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIOaehOmAoOWHveaVsFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgc3RvcmFnZVN0cmF0ZWd5OiBCZVNlc3Npb25TdG9yYWdlU3RyYXRlZ3ksXHJcbiAgICBmcm1TZXNzaW9uU2VydmljZTogRnJhbWV3b3JrU2Vzc2lvblNlcnZpY2UsXHJcbiAgICBodHRwQ2xpZW50OiBIdHRwQ2xpZW50LFxyXG4gICAgYmVCYXNlVXJsOiBzdHJpbmdcclxuICApIHtcclxuICAgIHN1cGVyKHN0b3JhZ2VTdHJhdGVneSwgZnJtU2Vzc2lvblNlcnZpY2UsIGh0dHBDbGllbnQsIGJlQmFzZVVybCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5ZCZVNlc3Npb25JZFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRTZXNzaW9uSWQoKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcclxuICAgIGNvbnN0IGJlU2Vzc2lvbklkID0gdGhpcy5nZXRTZXNzaW9uSWRGcm9tU3RvcmFnZSgpO1xyXG4gICAgbGV0IGJlU2Vzc2lvbklkJDogT2JzZXJ2YWJsZTxzdHJpbmc+O1xyXG4gICAgaWYgKGJlU2Vzc2lvbklkKSB7XHJcbiAgICAgIGJlU2Vzc2lvbklkJCA9ICBvZihiZVNlc3Npb25JZCk7XHJcbiAgICAgIHRoaXMuc2V0QmVzZXNzaW9uRXhpc3RlZCh0cnVlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGJlU2Vzc2lvbklkJCA9IHRoaXMuY3JlYXRlU2Vzc2lvbigpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHJlc3VsdCQgPSB0aGlzLmNsb3NlT2xkU2Vzc2lvbigpLnBpcGUoXHJcbiAgICAgIHN3aXRjaE1hcCgoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGJlU2Vzc2lvbklkJDtcclxuICAgICAgfSlcclxuICAgICk7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdCQ7XHJcblxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6K6+572uQmVTZXNzaW9uSWRcclxuICAgKi9cclxuICBwdWJsaWMgc2V0U2Vzc2lvbklkKHNlc3Npb25JZDogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBjb25zdCBzZXNzaW9uS2V5ID0gdGhpcy5nZXRTZXNzaW9uU3RvcmFnZUtleSgpO1xyXG4gICAgdGhpcy5zdG9yYWdlU3RyYXRlZ3kuc2V0SXRlbShzZXNzaW9uS2V5LCBzZXNzaW9uSWQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5riF56m6QmVTZXNzaW9uSWRcclxuICAgKi9cclxuICBwdWJsaWMgY2xlYXJTZXNzaW9uSWQoKSB7XHJcbiAgICBpZiAoQmVmRW52VXRpbC5pc0luRnJhbWV3b3JrKCkgPT09IHRydWUpIHtcclxuICAgICAgdGhpcy5zdG9yYWdlU3RyYXRlZ3kucmVtb3ZlSXRlbXNCeVNjb3BlKHRoaXMuZnJtU2Vzc2lvbklkKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IHNlc3Npb25LZXkgPSB0aGlzLmdldFNlc3Npb25TdG9yYWdlS2V5KCk7XHJcbiAgICAgIHRoaXMub2xkQmVTZXNzaW9uSWQgPSB0aGlzLmdldFNlc3Npb25JZEZyb21TdG9yYWdlKCk7XHJcbiAgICAgIHRoaXMuc3RvcmFnZVN0cmF0ZWd5LnJlbW92ZUl0ZW0oc2Vzc2lvbktleSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmianlsZVCZVNlc3Npb25JZOebuOWFs+WktOS/oeaBr1xyXG4gICAqL1xyXG4gIHB1YmxpYyBoYW5kbGVSZXF1ZXN0SGVhZGVycyhoZWFkZXJzOiBIdHRwSGVhZGVycyk6IEh0dHBIZWFkZXJzIHtcclxuICAgIGNvbnN0IGZybVNlc3Npb25JZCA9IHRoaXMuZ2V0RnJhbWV3b3JrU2Vzc2lvbklkKCk7XHJcbiAgICBjb25zdCBiZVNlc3Npb25JZCA9IHRoaXMuZ2V0U2Vzc2lvbklkRnJvbVN0b3JhZ2UoKTtcclxuXHJcbiAgICBpZiAoZnJtU2Vzc2lvbklkKSB7XHJcbiAgICAgIGhlYWRlcnMgPSBCZWZIdHRwVXRpbC5hcHBlbmRDYWZSdW50aW1lQ29tbW9uVmFyaWFibGUoaGVhZGVycywgZnJtU2Vzc2lvbklkKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoYmVTZXNzaW9uSWQpIHtcclxuICAgICAgaGVhZGVycyA9IEJlZkh0dHBVdGlsLmFwcGVuZENhZlJ1bnRpbWVDb250ZXh0KGhlYWRlcnMsIGJlU2Vzc2lvbklkKTtcclxuICAgICAgaGVhZGVycyA9IEJlZkh0dHBVdGlsLmFwcGVuZFNlc3Npb25JZChoZWFkZXJzLCBiZVNlc3Npb25JZCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGhlYWRlcnM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlpITnkIbmnI3liqHlmajnq6/ov5Tlm57nmoRoZWFkZXJzXHJcbiAgICovXHJcbiAgcHVibGljIGhhbmRsZVJlcG9uc2VIZWFkZXJzKGhlYWRlcnM6IGFueSk6IHZvaWQge1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+W5p+Q5LiqUmVwb3NpdG9yeeWvueW6lOeahEJlU2Vzc2lvbueahOWUr+S4gGtleVxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBnZXRTZXNzaW9uU3RvcmFnZUtleSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGAke3RoaXMuZnJtU2Vzc2lvbklkfV8ke3RoaXMuYmVCYXNlVXJsfWA7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgQmVmU2VwYXJhdGVkU2Vzc2lvbkhhbmRsaW5nU3RyYXRlZ3kgfTtcclxuIl19