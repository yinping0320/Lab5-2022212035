/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/bef_data_path_util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BindingPropertyType, PropertyUtil, BindingPathConverter } from '@farris/mobile-devkit';
/**
 * Bef数据中各种Path的转换
 */
var /**
 * Bef数据中各种Path的转换
 */
BefDataPathUtil = /** @class */ (function () {
    function BefDataPathUtil() {
    }
    /**
     * 转换成路径数组
     * 返回结果：
     * 主表（/）：[ parentId ]
     * 从表（/childCodes）：[ parentId, childCodes, childId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childCode, childId, grandCode, grandId ]
     */
    /**
     * 转换成路径数组
     * 返回结果：
     * 主表（/）：[ parentId ]
     * 从表（/childCodes）：[ parentId, childCodes, childId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childCode, childId, grandCode, grandId ]
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    BefDataPathUtil.convertToPathArray = /**
     * 转换成路径数组
     * 返回结果：
     * 主表（/）：[ parentId ]
     * 从表（/childCodes）：[ parentId, childCodes, childId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childCode, childId, grandCode, grandId ]
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    function (bindingPath, bindingData) {
        var _this = this;
        /** @type {?} */
        var bindingPathArray = BindingPathConverter.toBindingPathArray(bindingPath);
        /** @type {?} */
        var pathArray = [];
        /** @type {?} */
        var currentBindingObject = bindingData.list.currentItem;
        pathArray.push(currentBindingObject.primaryKeyValue);
        bindingPathArray.forEach((/**
         * @param {?} propName
         * @return {?}
         */
        function (propName) {
            /** @type {?} */
            var propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);
            if (propInfo.type !== BindingPropertyType.List) {
                throw new Error(propInfo.name + "\u4E0D\u662F\u5B50\u8868\u5BF9\u5E94\u7684\u5C5E\u6027");
            }
            /** @type {?} */
            var currentBindingList = currentBindingObject[propName];
            currentBindingObject = currentBindingList.currentItem;
            pathArray.push(_this.trimTrailingS(propName));
            pathArray.push(currentBindingObject.primaryKeyValue);
        }));
        return pathArray;
    };
    /**
     * 转换为RestUrl里的路径
     *
     * 返回结果：
     * 主表（/）：/
     * 从表（/jiwtEdus）：/xxx/jiwtEdu
     * 从从表（/jiwtEdus/jiwtGrades）： /xxx/jiwtEdu/xxx/jiwtGrade
     */
    /**
     * 转换为RestUrl里的路径
     *
     * 返回结果：
     * 主表（/）：/
     * 从表（/jiwtEdus）：/xxx/jiwtEdu
     * 从从表（/jiwtEdus/jiwtGrades）： /xxx/jiwtEdu/xxx/jiwtGrade
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    BefDataPathUtil.convertToPathUrl = /**
     * 转换为RestUrl里的路径
     *
     * 返回结果：
     * 主表（/）：/
     * 从表（/jiwtEdus）：/xxx/jiwtEdu
     * 从从表（/jiwtEdus/jiwtGrades）： /xxx/jiwtEdu/xxx/jiwtGrade
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    function (bindingPath, bindingData) {
        /** @type {?} */
        var pathArray = this.convertToPathArray(bindingPath, bindingData);
        pathArray.pop();
        return '/' + pathArray.join('/');
    };
    /**
     * 转换为表名数组
     * 返回结果：
     * 主表（/）：[]
     * 从表（/childCodes）：[ childCodes ]
     * 从从表（/childCodes/grandCodes [childCode ,grandCode]
     */
    /**
     * 转换为表名数组
     * 返回结果：
     * 主表（/）：[]
     * 从表（/childCodes）：[ childCodes ]
     * 从从表（/childCodes/grandCodes [childCode ,grandCode]
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    BefDataPathUtil.convertToObjectCodes = /**
     * 转换为表名数组
     * 返回结果：
     * 主表（/）：[]
     * 从表（/childCodes）：[ childCodes ]
     * 从从表（/childCodes/grandCodes [childCode ,grandCode]
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    function (bindingPath, bindingData) {
        /** @type {?} */
        var pathArray = this.convertToPathArray(bindingPath, bindingData);
        /** @type {?} */
        var pathLen = pathArray.length;
        /** @type {?} */
        var objectCodes = [];
        for (var i = 1; i < pathLen; i = i + 2) {
            objectCodes.push(pathArray[i]);
        }
        return objectCodes;
    };
    /**
     * 转换为id数组，包含最后一级的主键
     * 主表（/）：[ parentId ]
     * 从表（/childCodes）：[ parentId, childId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childId, grandId]
     */
    /**
     * 转换为id数组，包含最后一级的主键
     * 主表（/）：[ parentId ]
     * 从表（/childCodes）：[ parentId, childId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childId, grandId]
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    BefDataPathUtil.convertToDataIdsForUpdate = /**
     * 转换为id数组，包含最后一级的主键
     * 主表（/）：[ parentId ]
     * 从表（/childCodes）：[ parentId, childId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childId, grandId]
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    function (bindingPath, bindingData) {
        /** @type {?} */
        var pathArray = this.convertToPathArray(bindingPath, bindingData);
        /** @type {?} */
        var pathLen = pathArray.length;
        /** @type {?} */
        var dataIds = [];
        for (var i = 0; i < pathLen; i = i + 2) {
            dataIds.push(pathArray[i]);
        }
        return dataIds;
    };
    /**
     * 转换为id数组，不包含最后一级的主键
     * 主表（/）：[ ]
     * 从表（/childCodes）：[ parentId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childId]
     */
    /**
     * 转换为id数组，不包含最后一级的主键
     * 主表（/）：[ ]
     * 从表（/childCodes）：[ parentId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childId]
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    BefDataPathUtil.convertToDataIdsForAdd = /**
     * 转换为id数组，不包含最后一级的主键
     * 主表（/）：[ ]
     * 从表（/childCodes）：[ parentId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childId]
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    function (bindingPath, bindingData) {
        /** @type {?} */
        var dataIds = this.convertToDataIdsForUpdate(bindingPath, bindingData);
        dataIds.pop();
        return dataIds;
    };
    /**
     * 将EntityPathString转换为Url
     * @deprecated
     */
    /**
     * 将EntityPathString转换为Url
     * @deprecated
     * @param {?} path
     * @return {?}
     */
    BefDataPathUtil.convertPathToUrl = /**
     * 将EntityPathString转换为Url
     * @deprecated
     * @param {?} path
     * @return {?}
     */
    function (path) {
        /** @type {?} */
        var subPaths = path.split('/');
        for (var i = subPaths.length - 1; i > 0; i--) {
            if (subPaths[i] && subPaths[i].endsWith('s')) {
                subPaths[i] = subPaths[i].substr(0, subPaths[i].length - 1);
            }
        }
        return subPaths.join('/').toLowerCase();
    };
    /**
     * 去除最后的s
     */
    /**
     * 去除最后的s
     * @private
     * @param {?} str
     * @return {?}
     */
    BefDataPathUtil.trimTrailingS = /**
     * 去除最后的s
     * @private
     * @param {?} str
     * @return {?}
     */
    function (str) {
        return str.substr(0, str.length - 1);
    };
    /**
     * 转换通用路径为仅有表名的数组
     *
     * 1.['id:xxx','child1s','id:xx','prop'] => ['child1s','prop']
     * 2.['prop1','prop2','prop3'] => ['prop1','prop2','prop3']
     * 3.['prop1','id:xxx','prop2'] => ['prop1','prop2']
     * @param paths 内置路径，格式:['id:xxx','child1s','id:xx','prop']
     */
    /**
     * 转换通用路径为仅有表名的数组
     *
     * 1.['id:xxx','child1s','id:xx','prop'] => ['child1s','prop']
     * 2.['prop1','prop2','prop3'] => ['prop1','prop2','prop3']
     * 3.['prop1','id:xxx','prop2'] => ['prop1','prop2']
     * @param {?} paths 内置路径，格式:['id:xxx','child1s','id:xx','prop']
     * @return {?}
     */
    BefDataPathUtil.convertPathsToNodeCodes = /**
     * 转换通用路径为仅有表名的数组
     *
     * 1.['id:xxx','child1s','id:xx','prop'] => ['child1s','prop']
     * 2.['prop1','prop2','prop3'] => ['prop1','prop2','prop3']
     * 3.['prop1','id:xxx','prop2'] => ['prop1','prop2']
     * @param {?} paths 内置路径，格式:['id:xxx','child1s','id:xx','prop']
     * @return {?}
     */
    function (paths) {
        /** @type {?} */
        var result = [];
        if (!paths || paths.length < 1) {
            return result;
        }
        paths.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return !!item && item.indexOf(':') === -1; })).forEach((/**
         * @param {?} node
         * @return {?}
         */
        function (node) {
            result.push(node);
        }));
        return result;
    };
    /**
     * 转换通用路径为仅有实体主键值的数组
     * @param paths 通用路径，格式:['id:xxx','child1s','id:xx','prop'] => ['xxx','xx']
     */
    /**
     * 转换通用路径为仅有实体主键值的数组
     * @param {?} paths 通用路径，格式:['id:xxx','child1s','id:xx','prop'] => ['xxx','xx']
     * @return {?}
     */
    BefDataPathUtil.convertPathsToIds = /**
     * 转换通用路径为仅有实体主键值的数组
     * @param {?} paths 通用路径，格式:['id:xxx','child1s','id:xx','prop'] => ['xxx','xx']
     * @return {?}
     */
    function (paths) {
        /** @type {?} */
        var result = [];
        if (!paths || paths.length < 1) {
            return result;
        }
        paths.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return !!item && item.indexOf(':') !== -1; })).forEach((/**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            result.push(id.split(':')[1]);
        }));
        return result;
    };
    return BefDataPathUtil;
}());
export { BefDataPathUtil };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVmX2RhdGFfcGF0aF91dGlsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtYmVmLyIsInNvdXJjZXMiOlsibGliL3V0aWxzL2JlZl9kYXRhX3BhdGhfdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFDUSxtQkFBbUIsRUFBRSxZQUFZLEVBQUUsb0JBQW9CLEVBQ3JFLE1BQU0sdUJBQXVCLENBQUM7Ozs7QUFLL0I7Ozs7SUFBQTtJQWlKQSxDQUFDO0lBL0lDOzs7Ozs7T0FNRzs7Ozs7Ozs7Ozs7SUFDVyxrQ0FBa0I7Ozs7Ozs7Ozs7SUFBaEMsVUFBaUMsV0FBOEIsRUFBRSxXQUF3QjtRQUF6RixpQkFtQkM7O1lBbEJPLGdCQUFnQixHQUFhLG9CQUFvQixDQUFDLGtCQUFrQixDQUFDLFdBQVcsQ0FBQzs7WUFDakYsU0FBUyxHQUFhLEVBQUU7O1lBRTFCLG9CQUFvQixHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVztRQUN2RCxTQUFTLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBRXJELGdCQUFnQixDQUFDLE9BQU87Ozs7UUFBQyxVQUFDLFFBQWdCOztnQkFDbEMsUUFBUSxHQUFHLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDO1lBQzFGLElBQUksUUFBUSxDQUFDLElBQUksS0FBSyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUU7Z0JBQzlDLE1BQU0sSUFBSSxLQUFLLENBQUksUUFBUSxDQUFDLElBQUksMkRBQVcsQ0FBQyxDQUFDO2FBQzlDOztnQkFDSyxrQkFBa0IsR0FBRyxvQkFBb0IsQ0FBQyxRQUFRLENBQUM7WUFDekQsb0JBQW9CLEdBQUcsa0JBQWtCLENBQUMsV0FBVyxDQUFDO1lBQ3RELFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQzdDLFNB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QUFDLENBQUM7UUFDSCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBQ0gsc0JBQUM7QUFBRCxDQUFDLEFBakpELElBaUpDO0FBRUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBCaW5kaW5nRGF0YSwgQmluZGluZ1Byb3BlcnR5VHlwZSwgUHJvcGVydHlVdGlsLCBCaW5kaW5nUGF0aENvbnZlcnRlclxyXG59IGZyb20gJ0BmYXJyaXMvbW9iaWxlLWRldmtpdCc7XHJcblxyXG4vKipcclxuICogQmVm5pWw5o2u5Lit5ZCE56eNUGF0aOeahOi9rOaNolxyXG4gKi9cclxuY2xhc3MgQmVmRGF0YVBhdGhVdGlsIHtcclxuXHJcbiAgLyoqXHJcbiAgICog6L2s5o2i5oiQ6Lev5b6E5pWw57uEXHJcbiAgICog6L+U5Zue57uT5p6c77yaXHJcbiAgICog5Li76KGo77yIL++8ie+8mlsgcGFyZW50SWQgXVxyXG4gICAqIOS7juihqO+8iC9jaGlsZENvZGVz77yJ77yaWyBwYXJlbnRJZCwgY2hpbGRDb2RlcywgY2hpbGRJZCBdXHJcbiAgICog5LuO5LuO6KGo77yIL2NoaWxkQ29kZXMvZ3JhbmRDb2Rlc++8ie+8miBbIHBhcmVudElkLCBjaGlsZENvZGUsIGNoaWxkSWQsIGdyYW5kQ29kZSwgZ3JhbmRJZCBdXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBjb252ZXJ0VG9QYXRoQXJyYXkoYmluZGluZ1BhdGg6IHN0cmluZyB8IHN0cmluZ1tdLCBiaW5kaW5nRGF0YTogQmluZGluZ0RhdGEpOiBzdHJpbmdbXSB7XHJcbiAgICBjb25zdCBiaW5kaW5nUGF0aEFycmF5OiBzdHJpbmdbXSA9IEJpbmRpbmdQYXRoQ29udmVydGVyLnRvQmluZGluZ1BhdGhBcnJheShiaW5kaW5nUGF0aCk7XHJcbiAgICBjb25zdCBwYXRoQXJyYXk6IHN0cmluZ1tdID0gW107XHJcblxyXG4gICAgbGV0IGN1cnJlbnRCaW5kaW5nT2JqZWN0ID0gYmluZGluZ0RhdGEubGlzdC5jdXJyZW50SXRlbTtcclxuICAgIHBhdGhBcnJheS5wdXNoKGN1cnJlbnRCaW5kaW5nT2JqZWN0LnByaW1hcnlLZXlWYWx1ZSk7XHJcblxyXG4gICAgYmluZGluZ1BhdGhBcnJheS5mb3JFYWNoKChwcm9wTmFtZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgIGNvbnN0IHByb3BJbmZvID0gUHJvcGVydHlVdGlsLmdldFByb3BlcnR5QnlOYW1lKGN1cnJlbnRCaW5kaW5nT2JqZWN0LnByb3BlcnRpZXMsIHByb3BOYW1lKTtcclxuICAgICAgaWYgKHByb3BJbmZvLnR5cGUgIT09IEJpbmRpbmdQcm9wZXJ0eVR5cGUuTGlzdCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtwcm9wSW5mby5uYW1lfeS4jeaYr+WtkOihqOWvueW6lOeahOWxnuaAp2ApO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRCaW5kaW5nTGlzdCA9IGN1cnJlbnRCaW5kaW5nT2JqZWN0W3Byb3BOYW1lXTtcclxuICAgICAgY3VycmVudEJpbmRpbmdPYmplY3QgPSBjdXJyZW50QmluZGluZ0xpc3QuY3VycmVudEl0ZW07XHJcbiAgICAgIHBhdGhBcnJheS5wdXNoKHRoaXMudHJpbVRyYWlsaW5nUyhwcm9wTmFtZSkpO1xyXG4gICAgICBwYXRoQXJyYXkucHVzaChjdXJyZW50QmluZGluZ09iamVjdC5wcmltYXJ5S2V5VmFsdWUpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHBhdGhBcnJheTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOi9rOaNouS4ulJlc3RVcmzph4znmoTot6/lvoRcclxuICAgKlxyXG4gICAqIOi/lOWbnue7k+aenO+8mlxyXG4gICAqIOS4u+ihqO+8iC/vvInvvJovXHJcbiAgICog5LuO6KGo77yIL2ppd3RFZHVz77yJ77yaL3h4eC9qaXd0RWR1XHJcbiAgICog5LuO5LuO6KGo77yIL2ppd3RFZHVzL2ppd3RHcmFkZXPvvInvvJogL3h4eC9qaXd0RWR1L3h4eC9qaXd0R3JhZGVcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGNvbnZlcnRUb1BhdGhVcmwoYmluZGluZ1BhdGg6IHN0cmluZyB8IHN0cmluZ1tdLCBiaW5kaW5nRGF0YTogQmluZGluZ0RhdGEpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgcGF0aEFycmF5ID0gdGhpcy5jb252ZXJ0VG9QYXRoQXJyYXkoYmluZGluZ1BhdGgsIGJpbmRpbmdEYXRhKTtcclxuICAgIHBhdGhBcnJheS5wb3AoKTtcclxuICAgIHJldHVybiAnLycgKyBwYXRoQXJyYXkuam9pbignLycpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6L2s5o2i5Li66KGo5ZCN5pWw57uEXHJcbiAgICog6L+U5Zue57uT5p6c77yaXHJcbiAgICog5Li76KGo77yIL++8ie+8mltdXHJcbiAgICog5LuO6KGo77yIL2NoaWxkQ29kZXPvvInvvJpbIGNoaWxkQ29kZXMgXVxyXG4gICAqIOS7juS7juihqO+8iC9jaGlsZENvZGVzL2dyYW5kQ29kZXMgW2NoaWxkQ29kZSAsZ3JhbmRDb2RlXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY29udmVydFRvT2JqZWN0Q29kZXMoYmluZGluZ1BhdGg6IHN0cmluZyB8IHN0cmluZ1tdLCBiaW5kaW5nRGF0YTogQmluZGluZ0RhdGEpIHtcclxuICAgIGNvbnN0IHBhdGhBcnJheSA9IHRoaXMuY29udmVydFRvUGF0aEFycmF5KGJpbmRpbmdQYXRoLCBiaW5kaW5nRGF0YSk7XHJcbiAgICBjb25zdCBwYXRoTGVuID0gcGF0aEFycmF5Lmxlbmd0aDtcclxuXHJcbiAgICBjb25zdCBvYmplY3RDb2RlcyA9IFtdO1xyXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBwYXRoTGVuOyBpID0gaSArIDIpIHtcclxuICAgICAgb2JqZWN0Q29kZXMucHVzaChwYXRoQXJyYXlbaV0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBvYmplY3RDb2RlcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOi9rOaNouS4umlk5pWw57uE77yM5YyF5ZCr5pyA5ZCO5LiA57qn55qE5Li76ZSuXHJcbiAgICog5Li76KGo77yIL++8ie+8mlsgcGFyZW50SWQgXVxyXG4gICAqIOS7juihqO+8iC9jaGlsZENvZGVz77yJ77yaWyBwYXJlbnRJZCwgY2hpbGRJZCBdXHJcbiAgICog5LuO5LuO6KGo77yIL2NoaWxkQ29kZXMvZ3JhbmRDb2Rlc++8ie+8miBbIHBhcmVudElkLCBjaGlsZElkLCBncmFuZElkXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY29udmVydFRvRGF0YUlkc0ZvclVwZGF0ZShiaW5kaW5nUGF0aDogc3RyaW5nIHwgc3RyaW5nW10sIGJpbmRpbmdEYXRhOiBCaW5kaW5nRGF0YSkge1xyXG4gICAgY29uc3QgcGF0aEFycmF5ID0gdGhpcy5jb252ZXJ0VG9QYXRoQXJyYXkoYmluZGluZ1BhdGgsIGJpbmRpbmdEYXRhKTtcclxuICAgIGNvbnN0IHBhdGhMZW4gPSBwYXRoQXJyYXkubGVuZ3RoO1xyXG5cclxuICAgIGNvbnN0IGRhdGFJZHMgPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0aExlbjsgaSA9IGkgKyAyKSB7XHJcbiAgICAgIGRhdGFJZHMucHVzaChwYXRoQXJyYXlbaV0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBkYXRhSWRzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6L2s5o2i5Li6aWTmlbDnu4TvvIzkuI3ljIXlkKvmnIDlkI7kuIDnuqfnmoTkuLvplK5cclxuICAgKiDkuLvooajvvIgv77yJ77yaWyBdXHJcbiAgICog5LuO6KGo77yIL2NoaWxkQ29kZXPvvInvvJpbIHBhcmVudElkIF1cclxuICAgKiDku47ku47ooajvvIgvY2hpbGRDb2Rlcy9ncmFuZENvZGVz77yJ77yaIFsgcGFyZW50SWQsIGNoaWxkSWRdXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBjb252ZXJ0VG9EYXRhSWRzRm9yQWRkKGJpbmRpbmdQYXRoOiBzdHJpbmcgfCBzdHJpbmdbXSwgYmluZGluZ0RhdGE6IEJpbmRpbmdEYXRhKSB7XHJcbiAgICBjb25zdCBkYXRhSWRzID0gdGhpcy5jb252ZXJ0VG9EYXRhSWRzRm9yVXBkYXRlKGJpbmRpbmdQYXRoLCBiaW5kaW5nRGF0YSk7XHJcbiAgICBkYXRhSWRzLnBvcCgpO1xyXG4gICAgcmV0dXJuIGRhdGFJZHM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlsIZFbnRpdHlQYXRoU3RyaW5n6L2s5o2i5Li6VXJsXHJcbiAgICogQGRlcHJlY2F0ZWRcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGNvbnZlcnRQYXRoVG9VcmwocGF0aDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IHN1YlBhdGhzID0gcGF0aC5zcGxpdCgnLycpO1xyXG4gICAgZm9yIChsZXQgaSA9IHN1YlBhdGhzLmxlbmd0aCAtIDE7IGkgPiAwOyBpLS0pIHtcclxuICAgICAgaWYgKHN1YlBhdGhzW2ldICYmIHN1YlBhdGhzW2ldLmVuZHNXaXRoKCdzJykpIHtcclxuICAgICAgICBzdWJQYXRoc1tpXSA9IHN1YlBhdGhzW2ldLnN1YnN0cigwLCBzdWJQYXRoc1tpXS5sZW5ndGggLSAxKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHN1YlBhdGhzLmpvaW4oJy8nKS50b0xvd2VyQ2FzZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Y676Zmk5pyA5ZCO55qEc1xyXG4gICAqL1xyXG4gIHByaXZhdGUgc3RhdGljIHRyaW1UcmFpbGluZ1Moc3RyOiBzdHJpbmcpIHtcclxuICAgIHJldHVybiBzdHIuc3Vic3RyKDAsIHN0ci5sZW5ndGggLSAxKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog6L2s5o2i6YCa55So6Lev5b6E5Li65LuF5pyJ6KGo5ZCN55qE5pWw57uEXHJcbiAgICpcclxuICAgKiAxLlsnaWQ6eHh4JywnY2hpbGQxcycsJ2lkOnh4JywncHJvcCddID0+IFsnY2hpbGQxcycsJ3Byb3AnXVxyXG4gICAqIDIuWydwcm9wMScsJ3Byb3AyJywncHJvcDMnXSA9PiBbJ3Byb3AxJywncHJvcDInLCdwcm9wMyddXHJcbiAgICogMy5bJ3Byb3AxJywnaWQ6eHh4JywncHJvcDInXSA9PiBbJ3Byb3AxJywncHJvcDInXVxyXG4gICAqIEBwYXJhbSBwYXRocyDlhoXnva7ot6/lvoTvvIzmoLzlvI86WydpZDp4eHgnLCdjaGlsZDFzJywnaWQ6eHgnLCdwcm9wJ11cclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIGNvbnZlcnRQYXRoc1RvTm9kZUNvZGVzKHBhdGhzOiBzdHJpbmdbXSkge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gW107XHJcbiAgICBpZiAoIXBhdGhzIHx8IHBhdGhzLmxlbmd0aCA8IDEpIHtcclxuICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIHBhdGhzLmZpbHRlcihpdGVtID0+ICEhaXRlbSAmJiBpdGVtLmluZGV4T2YoJzonKSA9PT0gLTEpLmZvckVhY2gobm9kZSA9PiB7XHJcbiAgICAgIHJlc3VsdC5wdXNoKG5vZGUpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuICAvKipcclxuICAgKiDovazmjaLpgJrnlKjot6/lvoTkuLrku4XmnInlrp7kvZPkuLvplK7lgLznmoTmlbDnu4RcclxuICAgKiBAcGFyYW0gcGF0aHMg6YCa55So6Lev5b6E77yM5qC85byPOlsnaWQ6eHh4JywnY2hpbGQxcycsJ2lkOnh4JywncHJvcCddID0+IFsneHh4JywneHgnXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY29udmVydFBhdGhzVG9JZHMocGF0aHM6IHN0cmluZ1tdKSB7XHJcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcclxuICAgIGlmICghcGF0aHMgfHwgcGF0aHMubGVuZ3RoIDwgMSkge1xyXG4gICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgcGF0aHMuZmlsdGVyKGl0ZW0gPT4gISFpdGVtICYmIGl0ZW0uaW5kZXhPZignOicpICE9PSAtMSkuZm9yRWFjaChpZCA9PiB7XHJcbiAgICAgIHJlc3VsdC5wdXNoKGlkLnNwbGl0KCc6JylbMV0pO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgQmVmRGF0YVBhdGhVdGlsIH07XHJcbiJdfQ==