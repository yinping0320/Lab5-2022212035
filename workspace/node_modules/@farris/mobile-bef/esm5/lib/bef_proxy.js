/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_proxy.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { switchMap, map, catchError } from 'rxjs/operators';
import { HttpMethods } from '@farris/mobile-devkit';
import { BefDataPathUtil } from './utils/index';
/**
 * Bef API代理类
 * @abstract
 */
var /**
 * Bef API代理类
 * @abstract
 */
BefProxy = /** @class */ (function () {
    /**
     * 构造函数
     */
    function BefProxy(httpClient) {
        this.httpClient = httpClient;
        this.associatedUrlMap = new Map();
    }
    // 记录附件取跨Be url
    // 记录附件取跨Be url
    /**
     * @param {?} url
     * @return {?}
     */
    BefProxy.prototype.setAssociatedUrl = 
    // 记录附件取跨Be url
    /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        this.associatedUrlMap.set(url, url);
    };
    /**
     * 设置扩展策略
     */
    /**
     * 设置扩展策略
     * @param {?} proxyExtend
     * @return {?}
     */
    BefProxy.prototype.setProxyExtend = /**
     * 设置扩展策略
     * @param {?} proxyExtend
     * @return {?}
     */
    function (proxyExtend) {
        this.proxyExtend = proxyExtend;
    };
    /**
     * 查询
     */
    /**
     * 查询
     * @param {?=} entityFilter
     * @return {?}
     */
    BefProxy.prototype.query = /**
     * 查询
     * @param {?=} entityFilter
     * @return {?}
     */
    function (entityFilter) {
        /** @type {?} */
        var url = this.baseUrl;
        /** @type {?} */
        var params = {};
        if (entityFilter) {
            /** @type {?} */
            var entityFilterString = JSON.stringify(entityFilter);
            params.entityFilter = entityFilterString;
        }
        /** @type {?} */
        var requestConfig = {
            params: params
        };
        return this.request(HttpMethods.GET, url, requestConfig);
    };
    /**
     * 列表数据查询（扩展）
     */
    /**
     * 列表数据查询（扩展）
     * @param {?} entityFilter
     * @return {?}
     */
    BefProxy.prototype.extendQuery = /**
     * 列表数据查询（扩展）
     * @param {?} entityFilter
     * @return {?}
     */
    function (entityFilter) {
        /** @type {?} */
        var url = this.baseUrl + "/extension/query";
        /** @type {?} */
        var params = {};
        if (entityFilter) {
            /** @type {?} */
            var entityFilterString = JSON.stringify(entityFilter);
            params.entityFilter = entityFilterString;
        }
        /** @type {?} */
        var requestConfig = {
            params: params
        };
        return this.request(HttpMethods.PUT, url, requestConfig);
    };
    /**
     * 单条数据检索
     */
    /**
     * 单条数据检索
     * @param {?} id
     * @return {?}
     */
    BefProxy.prototype.retrieve = /**
     * 单条数据检索
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var url = this.baseUrl + "/" + id;
        return this.request(HttpMethods.GET, url);
    };
    /**
     * 单条数据检索（扩展）
     */
    /**
     * 单条数据检索（扩展）
     * @param {?} id
     * @return {?}
     */
    BefProxy.prototype.extendRetrieve = /**
     * 单条数据检索（扩展）
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var url = this.baseUrl + "/extension/retrieve/" + id;
        return this.request(HttpMethods.PUT, url);
    };
    /**
     * 单条数据检索（加锁）
     */
    /**
     * 单条数据检索（加锁）
     * @param {?} id
     * @return {?}
     */
    BefProxy.prototype.edit = /**
     * 单条数据检索（加锁）
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var url = this.baseUrl + "/service/edit/" + id;
        return this.request(HttpMethods.PUT, url);
    };
    /**
     * 新增数据
     */
    /**
     * 新增数据
     * @param {?=} defaultValue
     * @param {?=} requestInfo
     * @return {?}
     */
    BefProxy.prototype.create = /**
     * 新增数据
     * @param {?=} defaultValue
     * @param {?=} requestInfo
     * @return {?}
     */
    function (defaultValue, requestInfo) {
        /** @type {?} */
        var body = {
            defaultValue: defaultValue,
            requestInfo: requestInfo,
        };
        /** @type {?} */
        var requestConfig = {
            body: body
        };
        return this.request(HttpMethods.POST, this.baseUrl, requestConfig);
    };
    /**
     * 新增从表数据
     * @path 新增路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）
     */
    /**
     * 新增从表数据
     * \@path 新增路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）
     * @param {?} fpath
     * @return {?}
     */
    BefProxy.prototype.createByPath = /**
     * 新增从表数据
     * \@path 新增路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）
     * @param {?} fpath
     * @return {?}
     */
    function (fpath) {
        /** @type {?} */
        var pathUrl = BefDataPathUtil.convertPathToUrl(fpath);
        /** @type {?} */
        var url = "" + this.baseUrl + pathUrl;
        return this.request(HttpMethods.POST, url);
    };
    /**
     * 提交变更
     */
    /**
     * 提交变更
     * @param {?} changeDetail
     * @return {?}
     */
    BefProxy.prototype.update = /**
     * 提交变更
     * @param {?} changeDetail
     * @return {?}
     */
    function (changeDetail) {
        /** @type {?} */
        var body = {
            changeDetail: changeDetail
        };
        /** @type {?} */
        var requestConfig = {
            body: body
        };
        return this.request(HttpMethods.PATCH, this.baseUrl, requestConfig);
    };
    /**
     * 执行保存
     */
    /**
     * 执行保存
     * @return {?}
     */
    BefProxy.prototype.save = /**
     * 执行保存
     * @return {?}
     */
    function () {
        return this.request(HttpMethods.PUT, this.baseUrl);
    };
    /**
     * 删除
     */
    /**
     * 删除
     * @param {?} id
     * @return {?}
     */
    BefProxy.prototype.delete = /**
     * 删除
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var url = this.baseUrl + "/" + id;
        return this.request(HttpMethods.DELETE, url);
    };
    /**
     * 删除（扩展）
     */
    /**
     * 删除（扩展）
     * @param {?} id
     * @return {?}
     */
    BefProxy.prototype.extendDelete = /**
     * 删除（扩展）
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var url = this.baseUrl + "/extension/delete/" + id;
        return this.request(HttpMethods.PUT, url);
    };
    /**
     * 删除并保存
     */
    /**
     * 删除并保存
     * @param {?} id
     * @return {?}
     */
    BefProxy.prototype.deleteAndSave = /**
     * 删除并保存
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var url = this.baseUrl + "/service/delete/" + id;
        /** @type {?} */
        var requestConfig = {};
        return this.request(HttpMethods.PUT, url, requestConfig);
    };
    /**
     * 删除后代
     */
    /**
     * 删除后代
     * @param {?} fpath
     * @param {?} id
     * @return {?}
     */
    BefProxy.prototype.deletByPath = /**
     * 删除后代
     * @param {?} fpath
     * @param {?} id
     * @return {?}
     */
    function (fpath, id) {
        /** @type {?} */
        var pathUrl = BefDataPathUtil.convertPathToUrl(fpath);
        /** @type {?} */
        var url = "" + this.baseUrl + pathUrl + "/" + id;
        return this.request(HttpMethods.DELETE, url);
    };
    /**
     * 删除后代（扩展）
     */
    /**
     * 删除后代（扩展）
     * @param {?} fpath
     * @param {?} id
     * @return {?}
     */
    BefProxy.prototype.extendDeletByPath = /**
     * 删除后代（扩展）
     * @param {?} fpath
     * @param {?} id
     * @return {?}
     */
    function (fpath, id) {
        /** @type {?} */
        var pathUrl = BefDataPathUtil.convertPathToUrl(fpath);
        /** @type {?} */
        var url = this.baseUrl + "/extension" + pathUrl + "/" + id;
        return this.request(HttpMethods.PUT, url);
    };
    /**
     * 批量删除
     * @param ids 待删除的id数组
     */
    /**
     * 批量删除
     * @param {?} ids 待删除的id数组
     * @return {?}
     */
    BefProxy.prototype.batchDelete = /**
     * 批量删除
     * @param {?} ids 待删除的id数组
     * @return {?}
     */
    function (ids) {
        /** @type {?} */
        var params = {
            ids: ids.join(',')
        };
        /** @type {?} */
        var requestConfig = {
            params: params
        };
        return this.request(HttpMethods.DELETE, this.baseUrl, requestConfig);
    };
    /**
     * 批量删除（扩展）
     */
    /**
     * 批量删除（扩展）
     * @param {?} ids
     * @return {?}
     */
    BefProxy.prototype.extendBatchDelete = /**
     * 批量删除（扩展）
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        /** @type {?} */
        var url = this.baseUrl + "/extension/batchdelete";
        /** @type {?} */
        var params = {
            ids: ids.join(',')
        };
        /** @type {?} */
        var requestConfig = {
            params: params
        };
        return this.request(HttpMethods.PUT, url, requestConfig);
    };
    /**
     * 取消
     */
    /**
     * 取消
     * @return {?}
     */
    BefProxy.prototype.cancel = /**
     * 取消
     * @return {?}
     */
    function () {
        /** @type {?} */
        var url = this.baseUrl + "/service/cancel";
        return this.request(HttpMethods.POST, url);
    };
    /**
     * 调用httpclient取数
     * @param url url
     * @param method methods
     * @param requestConfigs options
     */
    /**
     * 调用httpclient取数
     * @param {?} method methods
     * @param {?} url url
     * @param {?=} requestConfigs options
     * @param {?=} ignoreHandlingChanges
     * @return {?}
     */
    BefProxy.prototype.request = /**
     * 调用httpclient取数
     * @param {?} method methods
     * @param {?} url url
     * @param {?=} requestConfigs options
     * @param {?=} ignoreHandlingChanges
     * @return {?}
     */
    function (method, url, requestConfigs, ignoreHandlingChanges) {
        var _this = this;
        if (ignoreHandlingChanges === void 0) { ignoreHandlingChanges = false; }
        requestConfigs = requestConfigs || {};
        // 扩展body
        if (ignoreHandlingChanges !== true) {
            if (method === HttpMethods.POST || method === HttpMethods.PUT || method === HttpMethods.PATCH) {
                /** @type {?} */
                var body = requestConfigs.body || {};
                requestConfigs.body = this.proxyExtend.extendBody(body);
            }
        }
        // 扩展headers
        /** @type {?} */
        var headers$ = this.proxyExtend.extendHeaders(requestConfigs.headers);
        // 发送请求
        return headers$.pipe(switchMap((/**
         * @param {?} headers
         * @return {?}
         */
        function (headers) {
            requestConfigs.headers = headers;
            requestConfigs.observe = 'response';
            return _this.httpClient.request(method, url, requestConfigs).pipe(map((/**
             * @param {?} result
             * @return {?}
             */
            function (result) {
                if (ignoreHandlingChanges === true) {
                    return result && result.body && result.body.returnValue ? result.body.returnValue : result;
                }
                else {
                    return _this.proxyExtend.onResponse(result);
                }
            })), catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                return _this.proxyExtend.onError(error, false, false);
            })));
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            return _this.proxyExtend.onError(error, false, false);
        })));
    };
    return BefProxy;
}());
/**
 * Bef API代理类
 * @abstract
 */
export { BefProxy };
if (false) {
    /**
     * API基路径
     * \@summary
     * 延迟到实现类确定，考虑使用注解指定。
     * @type {?}
     */
    BefProxy.prototype.baseUrl;
    /** @type {?} */
    BefProxy.prototype.associatedUrlMap;
    /**
     * 代理扩展
     * @type {?}
     * @protected
     */
    BefProxy.prototype.proxyExtend;
    /** @type {?} */
    BefProxy.prototype.httpClient;
}
//# sourceMappingURL=data:application/json;base64,