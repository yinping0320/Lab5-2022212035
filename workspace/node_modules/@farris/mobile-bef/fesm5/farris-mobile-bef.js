import { InjectionToken, HttpUtil, BindingPathConverter, PropertyUtil, BindingPropertyType, FieldMetadataUtil, ModifyType, EntityCollection, HttpMethods, makePropDecorator, EntityManager, DataChangeType, AppContext, MetadataUtil, InjectFlags, HttpClient, Repository } from '@farris/mobile-devkit';
import { BehaviorSubject, Subject, of, EMPTY, zip } from 'rxjs';
import { switchMap, tap, map, catchError } from 'rxjs/operators';
import { __extends, __spread, __values } from 'tslib';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/types.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 变更类型
 */
var ChangeDetailType = /** @class */ (function () {
    function ChangeDetailType() {
    }
    /**
     * 新增
     */
    ChangeDetailType.Added = 'Added';
    /**
     * 修改
     */
    ChangeDetailType.Modify = 'Modify';
    /**
     * 删除
     */
    ChangeDetailType.Deleted = 'Deleted';
    return ChangeDetailType;
}());
if (false) {
    /**
     * 新增
     * @type {?}
     */
    ChangeDetailType.Added;
    /**
     * 修改
     * @type {?}
     */
    ChangeDetailType.Modify;
    /**
     * 删除
     * @type {?}
     */
    ChangeDetailType.Deleted;
}
/**
 * 行变更信息
 * 必须包含：
 * 1、DataId   => 主键值；
 * 2、属性名   => 新的属性值；
 * 3、子表名+s => 子表行的ChangeDetail数组
 * @record
 */
function ChangeDetailInfo() { }
if (false) {
    /** @type {?|undefined} */
    ChangeDetailInfo.prototype.DataId;
    /* Skipping unhandled member: [key: string]: number | string | boolean | null | ChangeDetail | ChangeDetail[] | { [key: string]: any };*/
}
/**
 * 行变更详情
 * 包含：
 * 1、变更类型；
 * 2、变更信息
 * @record
 */
function ChangeDetail() { }
if (false) {
    /** @type {?} */
    ChangeDetail.prototype.ChangeType;
    /** @type {?} */
    ChangeDetail.prototype.ChangeInfo;
}
/**
 * 请求类型
 * @record
 */
function RequestInfo() { }
if (false) {
    /** @type {?} */
    RequestInfo.prototype.dataChange;
    /** @type {?|undefined} */
    RequestInfo.prototype.variableChange;
}
/**
 * 分页信息
 * @record
 */
function Pagination() { }
if (false) {
    /** @type {?} */
    Pagination.prototype.pageSize;
    /** @type {?} */
    Pagination.prototype.totalCount;
    /** @type {?} */
    Pagination.prototype.pageCount;
    /** @type {?} */
    Pagination.prototype.pageIndex;
}
/**
 * 查询结果
 * @record
 */
function QueryResult() { }
if (false) {
    /** @type {?} */
    QueryResult.prototype.result;
    /** @type {?} */
    QueryResult.prototype.pagination;
}
/**
 * 返回结果类型
 * @record
 */
function ResponseInfo() { }
if (false) {
    /** @type {?} */
    ResponseInfo.prototype.returnValue;
    /** @type {?} */
    ResponseInfo.prototype.message;
    /** @type {?} */
    ResponseInfo.prototype.innerDataChange;
    /** @type {?} */
    ResponseInfo.prototype.innerVariableChange;
}
/**
 * 带RequestInfo的body对象
 * @record
 */
function BodyWithRequestInfo() { }
if (false) {
    /** @type {?} */
    BodyWithRequestInfo.prototype.requestInfo;
    /* Skipping unhandled member: [key: string]: any;*/
}
/**
 * request option格式
 * @record
 */
function RequestOption() { }
if (false) {
    /** @type {?} */
    RequestOption.prototype.body;
    /* Skipping unhandled member: [key: string]: any;*/
}
/**
 *  异常处理信息接口
 * @record
 */
function IErrorServe() { }
if (false) {
    /**
     * @param {?} error
     * @return {?}
     */
    IErrorServe.prototype.show = function (error) { };
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/tokens.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var BE_SERVER_URI_TOKEN = new InjectionToken('@farris/be BE_SERVER_URL');
/**
 * 1、因为bef里，很多类都没有注入，BefSessionHandlingStragegy无法直接注入；
 * 2、通过一个字符串Token来间接做策略选择。
 * @type {?}
 */
var BE_SESSION_HANDLING_STRATEGY_TOKEN = new InjectionToken('@farris/be BE_SESSION_HANDLING_STRATEGY_TOKEN');
/**
 * 注入异常处理service
 * @type {?}
 */
var BE_ERROR_HANDLER__TOKEN = new InjectionToken('@farris/be BE_ERROR_HANDLER__TOKEN');

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/bef_http.util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * BefHttp工具类
 */
var  /**
 * BefHttp工具类
 */
BefHttpUtil = /** @class */ (function () {
    function BefHttpUtil() {
    }
    /**
     * 追加SessionId头
     */
    /**
     * 追加SessionId头
     * @param {?} headers
     * @param {?} sessionId
     * @return {?}
     */
    BefHttpUtil.appendSessionId = /**
     * 追加SessionId头
     * @param {?} headers
     * @param {?} sessionId
     * @return {?}
     */
    function (headers, sessionId) {
        headers = HttpUtil.appendHeader(headers, 'SessionId', sessionId);
        return headers;
    };
    /**
     * 追加CommonVariable头
     * @summary
     * 框架会话token，等价于原来的SessionId
     */
    /**
     * 追加CommonVariable头
     * \@summary
     * 框架会话token，等价于原来的SessionId
     * @param {?} headers
     * @param {?} commonVariable
     * @return {?}
     */
    BefHttpUtil.appendCafRuntimeCommonVariable = /**
     * 追加CommonVariable头
     * \@summary
     * 框架会话token，等价于原来的SessionId
     * @param {?} headers
     * @param {?} commonVariable
     * @return {?}
     */
    function (headers, commonVariable) {
        headers = HttpUtil.appendHeader(headers, 'X-CAF-Runtime-CommonVariable', commonVariable);
        return headers;
    };
    /**
     * 追加X-CAF-Runtime-Context头
     * @summary
     * X-CAF-Runtime-Context等价于BeSessionId
     */
    /**
     * 追加X-CAF-Runtime-Context头
     * \@summary
     * X-CAF-Runtime-Context等价于BeSessionId
     * @param {?} headers
     * @param {?} context
     * @return {?}
     */
    BefHttpUtil.appendCafRuntimeContext = /**
     * 追加X-CAF-Runtime-Context头
     * \@summary
     * X-CAF-Runtime-Context等价于BeSessionId
     * @param {?} headers
     * @param {?} context
     * @return {?}
     */
    function (headers, context) {
        headers = HttpUtil.appendHeader(headers, 'X-CAF-Runtime-Context', context);
        return headers;
    };
    /**
     * 追加Content-Type头
     * @summary
     * 提交内容的MIME类型，默认为application/json
     */
    /**
     * 追加Content-Type头
     * \@summary
     * 提交内容的MIME类型，默认为application/json
     * @param {?} headers
     * @param {?=} contentType
     * @return {?}
     */
    BefHttpUtil.appendContextType = /**
     * 追加Content-Type头
     * \@summary
     * 提交内容的MIME类型，默认为application/json
     * @param {?} headers
     * @param {?=} contentType
     * @return {?}
     */
    function (headers, contentType) {
        contentType = contentType ? contentType : 'application/json';
        headers = HttpUtil.appendHeader(headers, 'Content-Type', contentType);
        return headers;
    };
    return BefHttpUtil;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/request_info.util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var RequestInfoUtil = /** @class */ (function () {
    function RequestInfoUtil() {
    }
    /**
     * 构造RequestInfo
     */
    /**
     * 构造RequestInfo
     * @param {?} repository
     * @return {?}
     */
    RequestInfoUtil.buildRequestInfo = /**
     * 构造RequestInfo
     * @param {?} repository
     * @return {?}
     */
    function (repository) {
        /** @type {?} */
        var requestInfo = {
            dataChange: repository.entityManager.buildAllEntityChangeDetails(),
            variableChange: repository.variableManager.buildChangeDetail()
        };
        return requestInfo;
    };
    /**
     * 向body中添加RequestInfo
     */
    /**
     * 向body中添加RequestInfo
     * @param {?} body
     * @param {?} repository
     * @return {?}
     */
    RequestInfoUtil.appendRequestInfoToBody = /**
     * 向body中添加RequestInfo
     * @param {?} body
     * @param {?} repository
     * @return {?}
     */
    function (body, repository) {
        if (body.requestInfo) {
            return body;
        }
        /** @type {?} */
        var requestInfo = this.buildRequestInfo(repository);
        // body不存在时，body=requestInfo
        if (!body || Object.keys(body).length === 0) {
            return requestInfo;
        }
        /** @type {?} */
        var bodyWithRequestInfo = Object.assign({}, body, { requestInfo: requestInfo });
        return bodyWithRequestInfo;
    };
    return RequestInfoUtil;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/response_info.util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ResponseInfoUtil = /** @class */ (function () {
    function ResponseInfoUtil() {
    }
    /**
     * 将ResponseInfo转换为老接口的数据返回格式
     */
    /**
     * 将ResponseInfo转换为老接口的数据返回格式
     * @param {?} result
     * @return {?}
     */
    ResponseInfoUtil.unWrapResponseInfo = /**
     * 将ResponseInfo转换为老接口的数据返回格式
     * @param {?} result
     * @return {?}
     */
    function (result) {
        // 兼容cancel没有返回值的情况
        if (!result) {
            return result;
        }
        // 没有returnValue的情况下，兼容query取数的的格式
        if (result.hasOwnProperty('returnValue') === false) {
            if (result.hasOwnProperty('result') && result.hasOwnProperty('pagination')) {
                // 兼容返回带分页的列表数据
                return result.result;
            }
            return result;
        }
        // 其他：返回RequestInfo.returnValue的情况
        /** @type {?} */
        var returnValue = result.returnValue;
        if (returnValue && returnValue.hasOwnProperty('result') && returnValue.hasOwnProperty('pagination')) {
            // 兼容返回带分页的列表数据
            return returnValue.result;
        }
        return result.returnValue;
    };
    return ResponseInfoUtil;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/bef_change_util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 变更集工具类
 */
var  /**
 * 变更集工具类
 */
BefChangeUtil = /** @class */ (function () {
    function BefChangeUtil() {
    }
    /**
     * 创建空的ChangeDetail
     * @param type   the type of change
     * @param dataId the identity of the entity whose properties's values have changed
     */
    /**
     * 创建空的ChangeDetail
     * @param {?} type   the type of change
     * @param {?=} dataId the identity of the entity whose properties's values have changed
     * @return {?}
     */
    BefChangeUtil.createEmpty = /**
     * 创建空的ChangeDetail
     * @param {?} type   the type of change
     * @param {?=} dataId the identity of the entity whose properties's values have changed
     * @return {?}
     */
    function (type, dataId) {
        /** @type {?} */
        var changeDetail = {
            ChangeType: type,
            ChangeInfo: {}
        };
        if (dataId) {
            changeDetail.ChangeInfo.DataId = dataId;
        }
        return changeDetail;
    };
    /**
     * Get changes from an ChangeDetail object or an plain object
     * @param changeDetail 变更详情
     */
    /**
     * Get changes from an ChangeDetail object or an plain object
     * @param {?} changeDetail 变更详情
     * @return {?}
     */
    BefChangeUtil.getChangeInfo = /**
     * Get changes from an ChangeDetail object or an plain object
     * @param {?} changeDetail 变更详情
     * @return {?}
     */
    function (changeDetail) {
        /** @type {?} */
        var isChangeDetail = this.isChangeDetail(changeDetail);
        if (isChangeDetail === true) {
            return changeDetail.ChangeInfo;
        }
        else {
            return changeDetail;
        }
    };
    /**
     * Check whether the changeDetial object is an instance of the ChangeDetial class.
     */
    /**
     * Check whether the changeDetial object is an instance of the ChangeDetial class.
     * @param {?} changeDetail
     * @return {?}
     */
    BefChangeUtil.isChangeDetail = /**
     * Check whether the changeDetial object is an instance of the ChangeDetial class.
     * @param {?} changeDetail
     * @return {?}
     */
    function (changeDetail) {
        // @todo: if the associated object has only two properties: ChangeType and ChangeInfo, it fails.
        /** @type {?} */
        var keys = Object.keys(changeDetail);
        return keys.length === 2 && keys.indexOf('ChangeType') > -1 && keys.indexOf('ChangeInfo') > -1;
    };
    return BefChangeUtil;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/bef_data_path_util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Bef数据中各种Path的转换
 */
var  /**
 * Bef数据中各种Path的转换
 */
BefDataPathUtil = /** @class */ (function () {
    function BefDataPathUtil() {
    }
    /**
     * 转换成路径数组
     * 返回结果：
     * 主表（/）：[ parentId ]
     * 从表（/childCodes）：[ parentId, childCodes, childId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childCode, childId, grandCode, grandId ]
     */
    /**
     * 转换成路径数组
     * 返回结果：
     * 主表（/）：[ parentId ]
     * 从表（/childCodes）：[ parentId, childCodes, childId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childCode, childId, grandCode, grandId ]
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    BefDataPathUtil.convertToPathArray = /**
     * 转换成路径数组
     * 返回结果：
     * 主表（/）：[ parentId ]
     * 从表（/childCodes）：[ parentId, childCodes, childId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childCode, childId, grandCode, grandId ]
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    function (bindingPath, bindingData) {
        var _this = this;
        /** @type {?} */
        var bindingPathArray = BindingPathConverter.toBindingPathArray(bindingPath);
        /** @type {?} */
        var pathArray = [];
        /** @type {?} */
        var currentBindingObject = bindingData.list.currentItem;
        pathArray.push(currentBindingObject.primaryKeyValue);
        bindingPathArray.forEach((/**
         * @param {?} propName
         * @return {?}
         */
        function (propName) {
            /** @type {?} */
            var propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);
            if (propInfo.type !== BindingPropertyType.List) {
                throw new Error(propInfo.name + "\u4E0D\u662F\u5B50\u8868\u5BF9\u5E94\u7684\u5C5E\u6027");
            }
            /** @type {?} */
            var currentBindingList = currentBindingObject[propName];
            currentBindingObject = currentBindingList.currentItem;
            pathArray.push(_this.trimTrailingS(propName));
            pathArray.push(currentBindingObject.primaryKeyValue);
        }));
        return pathArray;
    };
    /**
     * 转换为RestUrl里的路径
     *
     * 返回结果：
     * 主表（/）：/
     * 从表（/jiwtEdus）：/xxx/jiwtEdu
     * 从从表（/jiwtEdus/jiwtGrades）： /xxx/jiwtEdu/xxx/jiwtGrade
     */
    /**
     * 转换为RestUrl里的路径
     *
     * 返回结果：
     * 主表（/）：/
     * 从表（/jiwtEdus）：/xxx/jiwtEdu
     * 从从表（/jiwtEdus/jiwtGrades）： /xxx/jiwtEdu/xxx/jiwtGrade
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    BefDataPathUtil.convertToPathUrl = /**
     * 转换为RestUrl里的路径
     *
     * 返回结果：
     * 主表（/）：/
     * 从表（/jiwtEdus）：/xxx/jiwtEdu
     * 从从表（/jiwtEdus/jiwtGrades）： /xxx/jiwtEdu/xxx/jiwtGrade
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    function (bindingPath, bindingData) {
        /** @type {?} */
        var pathArray = this.convertToPathArray(bindingPath, bindingData);
        pathArray.pop();
        return '/' + pathArray.join('/');
    };
    /**
     * 转换为表名数组
     * 返回结果：
     * 主表（/）：[]
     * 从表（/childCodes）：[ childCodes ]
     * 从从表（/childCodes/grandCodes [childCode ,grandCode]
     */
    /**
     * 转换为表名数组
     * 返回结果：
     * 主表（/）：[]
     * 从表（/childCodes）：[ childCodes ]
     * 从从表（/childCodes/grandCodes [childCode ,grandCode]
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    BefDataPathUtil.convertToObjectCodes = /**
     * 转换为表名数组
     * 返回结果：
     * 主表（/）：[]
     * 从表（/childCodes）：[ childCodes ]
     * 从从表（/childCodes/grandCodes [childCode ,grandCode]
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    function (bindingPath, bindingData) {
        /** @type {?} */
        var pathArray = this.convertToPathArray(bindingPath, bindingData);
        /** @type {?} */
        var pathLen = pathArray.length;
        /** @type {?} */
        var objectCodes = [];
        for (var i = 1; i < pathLen; i = i + 2) {
            objectCodes.push(pathArray[i]);
        }
        return objectCodes;
    };
    /**
     * 转换为id数组，包含最后一级的主键
     * 主表（/）：[ parentId ]
     * 从表（/childCodes）：[ parentId, childId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childId, grandId]
     */
    /**
     * 转换为id数组，包含最后一级的主键
     * 主表（/）：[ parentId ]
     * 从表（/childCodes）：[ parentId, childId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childId, grandId]
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    BefDataPathUtil.convertToDataIdsForUpdate = /**
     * 转换为id数组，包含最后一级的主键
     * 主表（/）：[ parentId ]
     * 从表（/childCodes）：[ parentId, childId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childId, grandId]
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    function (bindingPath, bindingData) {
        /** @type {?} */
        var pathArray = this.convertToPathArray(bindingPath, bindingData);
        /** @type {?} */
        var pathLen = pathArray.length;
        /** @type {?} */
        var dataIds = [];
        for (var i = 0; i < pathLen; i = i + 2) {
            dataIds.push(pathArray[i]);
        }
        return dataIds;
    };
    /**
     * 转换为id数组，不包含最后一级的主键
     * 主表（/）：[ ]
     * 从表（/childCodes）：[ parentId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childId]
     */
    /**
     * 转换为id数组，不包含最后一级的主键
     * 主表（/）：[ ]
     * 从表（/childCodes）：[ parentId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childId]
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    BefDataPathUtil.convertToDataIdsForAdd = /**
     * 转换为id数组，不包含最后一级的主键
     * 主表（/）：[ ]
     * 从表（/childCodes）：[ parentId ]
     * 从从表（/childCodes/grandCodes）： [ parentId, childId]
     * @param {?} bindingPath
     * @param {?} bindingData
     * @return {?}
     */
    function (bindingPath, bindingData) {
        /** @type {?} */
        var dataIds = this.convertToDataIdsForUpdate(bindingPath, bindingData);
        dataIds.pop();
        return dataIds;
    };
    /**
     * 将EntityPathString转换为Url
     * @deprecated
     */
    /**
     * 将EntityPathString转换为Url
     * @deprecated
     * @param {?} path
     * @return {?}
     */
    BefDataPathUtil.convertPathToUrl = /**
     * 将EntityPathString转换为Url
     * @deprecated
     * @param {?} path
     * @return {?}
     */
    function (path) {
        /** @type {?} */
        var subPaths = path.split('/');
        for (var i = subPaths.length - 1; i > 0; i--) {
            if (subPaths[i] && subPaths[i].endsWith('s')) {
                subPaths[i] = subPaths[i].substr(0, subPaths[i].length - 1);
            }
        }
        return subPaths.join('/').toLowerCase();
    };
    /**
     * 去除最后的s
     */
    /**
     * 去除最后的s
     * @private
     * @param {?} str
     * @return {?}
     */
    BefDataPathUtil.trimTrailingS = /**
     * 去除最后的s
     * @private
     * @param {?} str
     * @return {?}
     */
    function (str) {
        return str.substr(0, str.length - 1);
    };
    /**
     * 转换通用路径为仅有表名的数组
     *
     * 1.['id:xxx','child1s','id:xx','prop'] => ['child1s','prop']
     * 2.['prop1','prop2','prop3'] => ['prop1','prop2','prop3']
     * 3.['prop1','id:xxx','prop2'] => ['prop1','prop2']
     * @param paths 内置路径，格式:['id:xxx','child1s','id:xx','prop']
     */
    /**
     * 转换通用路径为仅有表名的数组
     *
     * 1.['id:xxx','child1s','id:xx','prop'] => ['child1s','prop']
     * 2.['prop1','prop2','prop3'] => ['prop1','prop2','prop3']
     * 3.['prop1','id:xxx','prop2'] => ['prop1','prop2']
     * @param {?} paths 内置路径，格式:['id:xxx','child1s','id:xx','prop']
     * @return {?}
     */
    BefDataPathUtil.convertPathsToNodeCodes = /**
     * 转换通用路径为仅有表名的数组
     *
     * 1.['id:xxx','child1s','id:xx','prop'] => ['child1s','prop']
     * 2.['prop1','prop2','prop3'] => ['prop1','prop2','prop3']
     * 3.['prop1','id:xxx','prop2'] => ['prop1','prop2']
     * @param {?} paths 内置路径，格式:['id:xxx','child1s','id:xx','prop']
     * @return {?}
     */
    function (paths) {
        /** @type {?} */
        var result = [];
        if (!paths || paths.length < 1) {
            return result;
        }
        paths.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return !!item && item.indexOf(':') === -1; })).forEach((/**
         * @param {?} node
         * @return {?}
         */
        function (node) {
            result.push(node);
        }));
        return result;
    };
    /**
     * 转换通用路径为仅有实体主键值的数组
     * @param paths 通用路径，格式:['id:xxx','child1s','id:xx','prop'] => ['xxx','xx']
     */
    /**
     * 转换通用路径为仅有实体主键值的数组
     * @param {?} paths 通用路径，格式:['id:xxx','child1s','id:xx','prop'] => ['xxx','xx']
     * @return {?}
     */
    BefDataPathUtil.convertPathsToIds = /**
     * 转换通用路径为仅有实体主键值的数组
     * @param {?} paths 通用路径，格式:['id:xxx','child1s','id:xx','prop'] => ['xxx','xx']
     * @return {?}
     */
    function (paths) {
        /** @type {?} */
        var result = [];
        if (!paths || paths.length < 1) {
            return result;
        }
        paths.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return !!item && item.indexOf(':') !== -1; })).forEach((/**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            result.push(id.split(':')[1]);
        }));
        return result;
    };
    return BefDataPathUtil;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/bef_proxy_util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * BefProxy工具类
 * \@summary
 * 1、BefProxy辅助工具类；
 * 2、暂时无法归类的代码封装；
 */
var  /**
 * BefProxy工具类
 * \@summary
 * 1、BefProxy辅助工具类；
 * 2、暂时无法归类的代码封装；
 */
BefProxyUtil = /** @class */ (function () {
    function BefProxyUtil() {
    }
    /**
     * 构造RequestInfo
     */
    /**
     * 构造RequestInfo
     * @param {?} befRepository
     * @return {?}
     */
    BefProxyUtil.buildRequestInfo = /**
     * 构造RequestInfo
     * @param {?} befRepository
     * @return {?}
     */
    function (befRepository) {
        /** @type {?} */
        var requestInfo = {
            dataChange: befRepository.entityManager.buildAllEntityChangeDetails(),
            variableChange: befRepository.variableManager.buildChangeDetail()
        };
        return requestInfo;
    };
    return BefProxyUtil;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/bef_repository_util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var BefRepositoryUtil = /** @class */ (function () {
    function BefRepositoryUtil() {
    }
    /**
     * isExistUnsaveData
     */
    /**
     * isExistUnsaveData
     * @param {?} befRepository
     * @return {?}
     */
    BefRepositoryUtil.isExistUnsaveData = /**
     * isExistUnsaveData
     * @param {?} befRepository
     * @return {?}
     */
    function (befRepository) {
        /** @type {?} */
        var hasUnsavedData = false;
        if (!befRepository || !befRepository.entityCollection) {
            throw new Error('Current Object is null or it\'s entityCollection is null.');
        }
        /** @type {?} */
        var entityArray = befRepository.entityCollection.toArray();
        if (befRepository.dataChangeHistory.isChanged()) {
            return true;
        }
        for (var i = 0; i < entityArray.length; i++) {
            if (entityArray[i].changes.length > 0) {
                hasUnsavedData = true;
                break;
            }
        }
        return hasUnsavedData;
    };
    return BefRepositoryUtil;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/entity_util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var EntityUtil = /** @class */ (function () {
    function EntityUtil() {
    }
    /**
     * 查找属性的类型
     * @param entityType 实体类型
     * @param targetPropName 属性名称
     * @return 属性信息，包含属性类型（NgField、NgObject、NgList, NgDynamic）和属性对应的实体类型（当NgField类型时为null）
     */
    /**
     * 查找属性的类型
     * @param {?} entityType 实体类型
     * @param {?} targetPropName 属性名称
     * @return {?} 属性信息，包含属性类型（NgField、NgObject、NgList, NgDynamic）和属性对应的实体类型（当NgField类型时为null）
     */
    EntityUtil.getPropInfo = /**
     * 查找属性的类型
     * @param {?} entityType 实体类型
     * @param {?} targetPropName 属性名称
     * @return {?} 属性信息，包含属性类型（NgField、NgObject、NgList, NgDynamic）和属性对应的实体类型（当NgField类型时为null）
     */
    function (entityType, targetPropName) {
        /** @type {?} */
        var propType;
        /** @type {?} */
        var propEntityType;
        /** @type {?} */
        var propMetadata;
        // NgField
        /** @type {?} */
        var ngFieldProperties = FieldMetadataUtil.getNgFields(entityType);
        Object.keys(ngFieldProperties).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        function (propName) {
            if (propName === targetPropName) {
                propType = 'NgField';
                propEntityType = null;
                propMetadata = ngFieldProperties[propName];
            }
        }));
        // NgObject
        /** @type {?} */
        var ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);
        Object.keys(ngObjectProperties).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        function (propName) {
            if (propName === targetPropName) {
                propType = 'NgObject';
                propEntityType = ngObjectProperties[propName].type;
                propMetadata = ngObjectProperties[propName];
            }
        }));
        // NgList
        /** @type {?} */
        var ngListProperties = FieldMetadataUtil.getNgList(entityType);
        Object.keys(ngListProperties).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        function (propName) {
            if (propName === targetPropName) {
                propType = 'NgList';
                propEntityType = ngListProperties[propName].type;
                propMetadata = ngListProperties[propName];
            }
        }));
        /** @type {?} */
        var ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);
        Object.keys(ngDynamicProperties).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        function (propName) {
            if (propName === targetPropName) {
                propType = 'NgDynamic';
                propEntityType = ngDynamicProperties[propName].type;
                propMetadata = ngDynamicProperties[propName];
            }
        }));
        return { propType: propType, propEntityType: propEntityType, propMetadata: propMetadata };
    };
    /**
     * 获取实体的主键名
     * @param entityType 实体类型
     */
    /**
     * 获取实体的主键名
     * @param {?} entityType 实体类型
     * @return {?}
     */
    EntityUtil.getPrimaryKey = /**
     * 获取实体的主键名
     * @param {?} entityType 实体类型
     * @return {?}
     */
    function (entityType) {
        /** @type {?} */
        var primaryNgFiledProp = FieldMetadataUtil.getPrimaryFieldMetadata(entityType);
        if (primaryNgFiledProp) {
            return primaryNgFiledProp.dataField;
        }
        else {
            return '';
        }
    };
    /**
     * 是否为对象属性
     */
    /**
     * 是否为对象属性
     * @param {?} entityType
     * @param {?} targetPropName
     * @return {?}
     */
    EntityUtil.isObjectProp = /**
     * 是否为对象属性
     * @param {?} entityType
     * @param {?} targetPropName
     * @return {?}
     */
    function (entityType, targetPropName) {
        /** @type {?} */
        var isObjectProp = false;
        /** @type {?} */
        var ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);
        Object.keys(ngObjectProperties).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        function (propName) {
            if (propName === targetPropName) {
                isObjectProp = true;
            }
        }));
        return isObjectProp;
    };
    /**
     * 检查是否是动态列属性
     */
    /**
     * 检查是否是动态列属性
     * @param {?} entityType
     * @param {?} targetPropName
     * @return {?}
     */
    EntityUtil.isDynamicProp = /**
     * 检查是否是动态列属性
     * @param {?} entityType
     * @param {?} targetPropName
     * @return {?}
     */
    function (entityType, targetPropName) {
        /** @type {?} */
        var isDynamicProp = false;
        /** @type {?} */
        var ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);
        Object.keys(ngDynamicProperties).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        function (propName) {
            if (propName === targetPropName) {
                isDynamicProp = true;
            }
        }));
        return isDynamicProp;
    };
    /**
     * 为实体增加initialData属性
     * @param entity 实体实例
     * @param initialData 默认值对象
     */
    /**
     * 为实体增加initialData属性
     * @param {?} entity 实体实例
     * @param {?} initialData 默认值对象
     * @return {?}
     */
    EntityUtil.appendInitialData = /**
     * 为实体增加initialData属性
     * @param {?} entity 实体实例
     * @param {?} initialData 默认值对象
     * @return {?}
     */
    function (entity, initialData) {
        /** @type {?} */
        var data = Object.assign({}, initialData);
        delete data.id;
        delete data.parentID;
        entity['initialData'] = data;
    };
    return EntityUtil;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/bef_env_util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Bef环境监测工具类
 */
var  /**
 * Bef环境监测工具类
 */
BefEnvUtil = /** @class */ (function () {
    function BefEnvUtil() {
    }
    /**
     * 是否在框架内运行
     */
    /**
     * 是否在框架内运行
     * @return {?}
     */
    BefEnvUtil.isInFramework = /**
     * 是否在框架内运行
     * @return {?}
     */
    function () {
        /** @type {?} */
        var hashString = window.location.hash;
        if (!hashString) {
            return false;
        }
        return hashString.indexOf('formToken=') !== -1;
    };
    return BefEnvUtil;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_change_builder.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * BEF变更集构造器
 */
var  /**
 * BEF变更集构造器
 */
BefChangeBuilder = /** @class */ (function () {
    /**
     * 构造函数
     * @param entityType 实体类型
     */
    function BefChangeBuilder(entityType, entityCollection) {
        this.entityType = entityType;
        this.entityCollection = entityCollection;
    }
    /**
     * 构造Bef变更集
     */
    /**
     * 构造Bef变更集
     * @param {?} modifications
     * @return {?}
     */
    BefChangeBuilder.prototype.build = /**
     * 构造Bef变更集
     * @param {?} modifications
     * @return {?}
     */
    function (modifications) {
        var _this = this;
        // 重置changeDetail
        this.changeDetail = {
            ChangeType: ChangeDetailType.Modify,
            ChangeInfo: {
                DataId: ''
            }
        };
        modifications.forEach((/**
         * @param {?} modification
         * @return {?}
         */
        function (modification) {
            _this.buildChangeDetail(modification);
        }));
        return this.changeDetail;
    };
    /**
     * 构造Bef变更详情
     */
    /**
     * 构造Bef变更详情
     * @param {?} modification
     * @return {?}
     */
    BefChangeBuilder.prototype.buildChangeDetail = /**
     * 构造Bef变更详情
     * @param {?} modification
     * @return {?}
     */
    function (modification) {
        /** @type {?} */
        var paths = modification.path.concat();
        // 设置根节点DataId
        if (!this.changeDetail.ChangeInfo.DataId) {
            this.changeDetail.ChangeInfo.DataId = paths[0].split(':')[1];
        }
        /** @type {?} */
        var parentChangeDetail = this.changeDetail;
        /** @type {?} */
        var parentEntityType = this.entityType;
        var _loop_1 = function (i) {
            /** @type {?} */
            var parentChangeInfo = this_1.getChangeInfo(parentChangeDetail);
            /** @type {?} */
            var propName = paths[i];
            var _a = EntityUtil.getPropInfo(parentEntityType, propName), propType = _a.propType, propEntityType = _a.propEntityType, propMetadata = _a.propMetadata;
            /** @type {?} */
            var dataField = propMetadata.dataField || propName;
            if (propType === 'NgField') {
                // 不支持主键变更，忽略
                /** @type {?} */
                var primaryKey = EntityUtil.getPrimaryKey(parentEntityType);
                if (propName === primaryKey) {
                    return "continue";
                }
                if (modification.type !== ModifyType.ValueChange) {
                    throw Error('简单类型的属性上不支持ValueChange类型之外的变更');
                }
                // NgField类型：说明是最后一级
                parentChangeInfo[dataField] = modification.value;
                parentChangeDetail = null;
            }
            else if (propType === 'NgObject') {
                // NgObject属性本身无法触发变更，只有它的子节点才能触发，所以它上边的变更永远是Modify类型的。
                /** @type {?} */
                var childId = paths[i + 1].split(':')[1];
                /** @type {?} */
                var childIdName = paths[i + 1].split(':')[0];
                if (childIdName) {
                    // 有主键（关联对象）：是一个普通的对象
                    /** @type {?} */
                    var changeObject = parentChangeInfo[dataField];
                    // 获取数据
                    /** @type {?} */
                    var entityPath = paths.slice(0, i + 1);
                    /** @type {?} */
                    var changedEntity = this_1.entityCollection.getEntityByPath(entityPath);
                    changeObject = changedEntity ? changedEntity.toJSON() : {};
                    parentChangeInfo[dataField] = changeObject;
                    parentChangeDetail = null;
                    parentEntityType = null;
                }
                else {
                    // 没有主键（值对象）：是一个完整的ChangeDetail
                    /** @type {?} */
                    var changeDetail = (/** @type {?} */ (parentChangeInfo[dataField]));
                    if (!changeDetail) {
                        changeDetail = {
                            ChangeType: ChangeDetailType.Modify,
                            ChangeInfo: {}
                        };
                    }
                    parentChangeInfo[dataField] = changeDetail;
                    parentChangeDetail = changeDetail;
                    parentEntityType = propEntityType;
                }
            }
            else if (propType === 'NgList') {
                // 如果不存在则创建一个空数组
                if (!parentChangeDetail.ChangeInfo[dataField]) {
                    parentChangeDetail.ChangeInfo[dataField] = [];
                }
                /** @type {?} */
                var changeDetails = (/** @type {?} */ (parentChangeDetail.ChangeInfo[dataField]));
                // 如果这个属性，不是叶子节点，需要查找当前属性是否已经存在对应ChangeDetail：
                // 1、不存在：创建一个Modify类型的ChangeDetail；
                // 2、存在：返回查找到的ChangeDetai，这个ChangeDetail可能是一个Add类型也可能是一个Modify类型；
                // 3、现状：目前BEF不支持Add类型的变更，肯定是一个Modify类型的变更。
                if (i !== paths.length - 1) {
                    // 遍历检查变更是否已经存在
                    /** @type {?} */
                    var dataId_1 = paths[i + 1].split(':')[1];
                    /** @type {?} */
                    var changeDetail = changeDetails.find((/**
                     * @param {?} changeDetailItem
                     * @return {?}
                     */
                    function (changeDetailItem) {
                        return changeDetailItem.ChangeInfo.DataId === dataId_1;
                    }));
                    // 如果不存在，则创建并添加
                    if (!changeDetail) {
                        changeDetail = this_1.createEmptyChangeDetail(ChangeDetailType.Modify, dataId_1);
                        changeDetails.push(changeDetail);
                    }
                    parentChangeDetail = changeDetail;
                    parentEntityType = propEntityType;
                    return "continue";
                }
                // 重置
                parentChangeDetail = null;
                parentEntityType = null;
            }
            else if (propType === 'NgDynamic') {
                // 获取数据
                /** @type {?} */
                var entityPath = paths.slice(0, i + 1);
                /** @type {?} */
                var changedEntity = this_1.entityCollection.getEntityByPath(entityPath);
                parentChangeInfo[dataField] = {
                    ChangeType: ChangeDetailType.Modify,
                    ChangeInfo: changedEntity ? changedEntity.toJSON() : {}
                };
                parentChangeDetail = null;
                parentEntityType = null;
            }
        };
        var this_1 = this;
        for (var i = 1; i < paths.length && parentChangeDetail; i = i + 2) {
            _loop_1(i);
        }
    };
    /**
     * 获取变更信息
     * 在整个ChangeDetail树上，存在两种类型的节点
     * ChangeDetail：实体变更、值对象变更（没有DataID）
     * PlainObject: 关联对象的变更
     * 从这两种节点上拿具体变更信息的时候，需要统一处理，屏蔽这个差异。
     * @todo：为这两种节点封装ChangeNode基类来解决这个差异。
     */
    /**
     * 获取变更信息
     * 在整个ChangeDetail树上，存在两种类型的节点
     * ChangeDetail：实体变更、值对象变更（没有DataID）
     * PlainObject: 关联对象的变更
     * 从这两种节点上拿具体变更信息的时候，需要统一处理，屏蔽这个差异。
     * \@todo：为这两种节点封装ChangeNode基类来解决这个差异。
     * @private
     * @param {?} changeDetail
     * @return {?}
     */
    BefChangeBuilder.prototype.getChangeInfo = /**
     * 获取变更信息
     * 在整个ChangeDetail树上，存在两种类型的节点
     * ChangeDetail：实体变更、值对象变更（没有DataID）
     * PlainObject: 关联对象的变更
     * 从这两种节点上拿具体变更信息的时候，需要统一处理，屏蔽这个差异。
     * \@todo：为这两种节点封装ChangeNode基类来解决这个差异。
     * @private
     * @param {?} changeDetail
     * @return {?}
     */
    function (changeDetail) {
        // @todo：可能存在同名属性
        if (changeDetail.hasOwnProperty('ChangeInfo')) {
            return changeDetail.ChangeInfo;
        }
        else {
            return changeDetail;
        }
    };
    /**
     * 创建ChangeDetail
     * @param type BEF变更类型
     * @param dataId 数据内码
     */
    /**
     * 创建ChangeDetail
     * @private
     * @param {?} type BEF变更类型
     * @param {?} dataId 数据内码
     * @return {?}
     */
    BefChangeBuilder.prototype.createEmptyChangeDetail = /**
     * 创建ChangeDetail
     * @private
     * @param {?} type BEF变更类型
     * @param {?} dataId 数据内码
     * @return {?}
     */
    function (type, dataId) {
        /** @type {?} */
        var changeDetail = {
            ChangeType: type,
            ChangeInfo: {
                DataId: dataId
            }
        };
        return changeDetail;
    };
    return BefChangeBuilder;
}());
if (false) {
    /**
     * Bef变更集
     * @type {?}
     */
    BefChangeBuilder.prototype.changeDetail;
    /**
     * @type {?}
     * @private
     */
    BefChangeBuilder.prototype.entityType;
    /**
     * @type {?}
     * @private
     */
    BefChangeBuilder.prototype.entityCollection;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_change_handler.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 处理服务器端变更
 */
var  /**
 * 处理服务器端变更
 */
BefChangeHandler = /** @class */ (function () {
    /**
     * 构造函数
     */
    function BefChangeHandler() {
    }
    /**
     * 处理Bef变更集
     */
    /**
     * 处理Bef变更集
     * @param {?} entityType
     * @param {?} entityCollection
     * @param {?} changeDetails
     * @return {?}
     */
    BefChangeHandler.prototype.handle = /**
     * 处理Bef变更集
     * @param {?} entityType
     * @param {?} entityCollection
     * @param {?} changeDetails
     * @return {?}
     */
    function (entityType, entityCollection, changeDetails) {
        this.handleChangeDetails(entityType, entityCollection, changeDetails);
    };
    /**
     * 处理Bef变更集（批量）
     */
    /**
     * 处理Bef变更集（批量）
     * @param {?} entityType
     * @param {?} entityList
     * @param {?} changeDetails
     * @return {?}
     */
    BefChangeHandler.prototype.handleChangeDetails = /**
     * 处理Bef变更集（批量）
     * @param {?} entityType
     * @param {?} entityList
     * @param {?} changeDetails
     * @return {?}
     */
    function (entityType, entityList, changeDetails) {
        var _this = this;
        if (!changeDetails) {
            return;
        }
        changeDetails.forEach((/**
         * @param {?} changeDetail
         * @return {?}
         */
        function (changeDetail) {
            /** @type {?} */
            var id = (/** @type {?} */ ((changeDetail.ChangeInfo.dataId || changeDetail.ChangeInfo.DataId)));
            /** @type {?} */
            var entity = _this.getEntityById(entityList, id);
            if (!entity) {
                return;
            }
            _this.handleChangeDetail(entityType, entity, changeDetail);
        }));
    };
    /**
     * 处理Bef变更集（单条）
     */
    /**
     * 处理Bef变更集（单条）
     * @param {?} entityType
     * @param {?} entity
     * @param {?} changeDetail
     * @return {?}
     */
    BefChangeHandler.prototype.handleChangeDetail = /**
     * 处理Bef变更集（单条）
     * @param {?} entityType
     * @param {?} entity
     * @param {?} changeDetail
     * @return {?}
     */
    function (entityType, entity, changeDetail) {
        var _this = this;
        if (!changeDetail || !entity) {
            return;
        }
        // 只处理值变更，其他变更待进一步验证。
        if (changeDetail.ChangeType !== ChangeDetailType.Modify) {
            return;
        }
        /** @type {?} */
        var changeInfo = changeDetail.ChangeInfo;
        Object.keys(changeInfo).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        function (propName) {
            var _a = EntityUtil.getPropInfo(entityType, propName), propType = _a.propType, propEntityType = _a.propEntityType;
            if (propType === 'NgField') {
                // 简单属性：更新值
                entity[propName] = changeInfo[propName];
            }
            else if (propType === 'NgObject') {
                /** @type {?} */
                var childEntity = (/** @type {?} */ (entity[propName]));
                if (childEntity.primaryKey) {
                    // 关联对象：重新加载数据
                    /** @type {?} */
                    var childEntityData = changeInfo[propName];
                    childEntity.load(childEntityData);
                }
                else {
                    // 值对象：递归处理变更
                    /** @type {?} */
                    var childChangeDetail = (/** @type {?} */ (changeInfo[propName]));
                    _this.handleChangeDetail(propEntityType, childEntity, childChangeDetail);
                }
            }
            else if (propType === 'NgList') {
                // 子列表：递归处理变更集合
                /** @type {?} */
                var childEntityList = (/** @type {?} */ (entity[propName]));
                /** @type {?} */
                var childChangeDetails = (/** @type {?} */ (changeInfo[propName]));
                _this.handleChangeDetails(propEntityType, childEntityList, childChangeDetails);
            }
        }));
    };
    /**
     * 根据id获取实体，屏蔽EntityCollection和EntityList之间的差异
     */
    /**
     * 根据id获取实体，屏蔽EntityCollection和EntityList之间的差异
     * @private
     * @param {?} entityList
     * @param {?} id
     * @return {?}
     */
    BefChangeHandler.prototype.getEntityById = /**
     * 根据id获取实体，屏蔽EntityCollection和EntityList之间的差异
     * @private
     * @param {?} entityList
     * @param {?} id
     * @return {?}
     */
    function (entityList, id) {
        /** @type {?} */
        var target;
        if (entityList instanceof EntityCollection) {
            target = entityList.getEntityById(id);
        }
        else {
            target = entityList.get(id);
        }
        return target ? target : null;
    };
    return BefChangeHandler;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/session/handling-strategies/handling_strategy.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * BefSession处理策略类
 * @abstract
 */
var  /**
 * BefSession处理策略类
 * @abstract
 */
BefSessionHandlingStrategy = /** @class */ (function () {
    /**
     * 构造函数
     */
    function BefSessionHandlingStrategy(storageStrategy, frmSessionService, httpClient, beBaseUrl) {
        /**
         * BeSession是否存在
         */
        this.beSessionExisted = false;
        this.storageStrategy = storageStrategy;
        this.frmSessionService = frmSessionService;
        this.httpClient = httpClient;
        this.beBaseUrl = beBaseUrl;
        this.beCreateSessionUrl = beBaseUrl + "/service/createsession";
        this.beCloseSessionUrl = beBaseUrl + "/service/closesession";
        this.beSessionExisted$ = new BehaviorSubject(this.beSessionExisted);
    }
    Object.defineProperty(BefSessionHandlingStrategy.prototype, "frmSessionId", {
        /**
         * 框架SessionId（用户的或者功能菜单的）
         */
        get: /**
         * 框架SessionId（用户的或者功能菜单的）
         * @protected
         * @return {?}
         */
        function () {
            return this.frmSessionService.getCurrentSessionId();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 获取框架SessionId
     */
    /**
     * 获取框架SessionId
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.getFrameworkSessionId = /**
     * 获取框架SessionId
     * @return {?}
     */
    function () {
        return this.frmSessionId;
    };
    /**
     * 从缓存中获取BeSession
     */
    /**
     * 从缓存中获取BeSession
     * @protected
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.getSessionIdFromStorage = /**
     * 从缓存中获取BeSession
     * @protected
     * @return {?}
     */
    function () {
        /** @type {?} */
        var sessionStorageKey = this.getSessionStorageKey();
        /** @type {?} */
        var beSessionId = this.storageStrategy.getItem(sessionStorageKey);
        return beSessionId;
    };
    /**
     * 创建BeSessionId
     */
    /**
     * 创建BeSessionId
     * @protected
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.createSession = /**
     * 创建BeSessionId
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var requestConfig = {
            responseType: 'text',
            headers: {
                'Content-Type': 'application/json'
            }
        };
        /** @type {?} */
        var frmSessionId = this.frmSessionId;
        if (frmSessionId) {
            requestConfig.headers = BefHttpUtil.appendSessionId(requestConfig.headers, this.frmSessionId);
            requestConfig.headers = BefHttpUtil.appendCafRuntimeCommonVariable(requestConfig.headers, this.frmSessionId);
        }
        //创建前判断当前的frmsessionid是不是在当前会话下被清除过
        /** @type {?} */
        var ClearItOnce = window.sessionStorage.getItem("ClearItOnce");
        if ('true' !== ClearItOnce && frmSessionId) {
            return this.clear(frmSessionId).pipe(switchMap((/**
             * @return {?}
             */
            function () {
                window.sessionStorage.setItem("ClearItOnce", 'true');
                return _this.httpClient.post(_this.beCreateSessionUrl, null, requestConfig).pipe(tap((/**
                 * @param {?} beSessionId
                 * @return {?}
                 */
                function (beSessionId) {
                    _this.setSessionId(beSessionId);
                    _this.setBesessionExisted(true);
                })));
            })));
        }
        return this.httpClient.post(this.beCreateSessionUrl, null, requestConfig).pipe(tap((/**
         * @param {?} beSessionId
         * @return {?}
         */
        function (beSessionId) {
            _this.setSessionId(beSessionId);
            _this.setBesessionExisted(true);
        })));
    };
    /**
     * @param {?} formToken
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.clear = /**
     * @param {?} formToken
     * @return {?}
     */
    function (formToken) {
        /** @type {?} */
        var subject = new Subject();
        if (formToken && window['frmMobileService']) {
            window['frmMobileService'].rtf.func.clearState({ formToken: formToken }, (/**
             * @return {?}
             */
            function () { subject.next(true); }));
        }
        return subject;
    };
    /**
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.test = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var requestConfig = {
            responseType: 'text',
            headers: {
                'Content-Type': 'application/json'
            }
        };
        if (this.frmSessionId) {
            requestConfig.headers = BefHttpUtil.appendSessionId(requestConfig.headers, this.frmSessionId);
            requestConfig.headers = BefHttpUtil.appendCafRuntimeCommonVariable(requestConfig.headers, this.frmSessionId);
        }
        return this.httpClient.post(this.beCreateSessionUrl, null, requestConfig).pipe(tap((/**
         * @param {?} beSessionId
         * @return {?}
         */
        function (beSessionId) {
            _this.setSessionId(beSessionId);
            _this.setBesessionExisted(true);
        })));
    };
    /**
     * 关闭BeSessionId
     */
    /**
     * 关闭BeSessionId
     * @protected
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.closeOldSession = /**
     * 关闭BeSessionId
     * @protected
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.oldBeSessionId) {
            return of(true);
        }
        /** @type {?} */
        var requestConfig = {
            responseType: 'text',
            headers: {
                'Content-Type': 'application/json'
            }
        };
        // headers处理
        requestConfig.headers = BefHttpUtil.appendCafRuntimeContext(requestConfig.headers, this.oldBeSessionId);
        requestConfig.headers = BefHttpUtil.appendSessionId(requestConfig.headers, this.oldBeSessionId);
        if (this.frmSessionId) {
            requestConfig.headers = BefHttpUtil.appendCafRuntimeCommonVariable(requestConfig.headers, this.frmSessionId);
        }
        // 无论是否成功，统一置空cleardBeSessionId
        return this.httpClient.post(this.beCloseSessionUrl, null, requestConfig).pipe(tap((/**
         * @return {?}
         */
        function () {
            _this.oldBeSessionId = null;
            return of(true);
        }), (/**
         * @return {?}
         */
        function () {
            _this.oldBeSessionId = null;
            return of(true);
        })));
    };
    /**
     * 设置BeSession存在状态，并发出通知
     */
    /**
     * 设置BeSession存在状态，并发出通知
     * @protected
     * @param {?} beSessionExisted
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.setBesessionExisted = /**
     * 设置BeSession存在状态，并发出通知
     * @protected
     * @param {?} beSessionExisted
     * @return {?}
     */
    function (beSessionExisted) {
        if (this.beSessionExisted === beSessionExisted) {
            return;
        }
        this.beSessionExisted = beSessionExisted;
        this.beSessionExisted$.next(beSessionExisted);
    };
    /**
     * 获取BeSession是否存在状态
     */
    /**
     * 获取BeSession是否存在状态
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.getBeSessionExisted = /**
     * 获取BeSession是否存在状态
     * @return {?}
     */
    function () {
        return this.beSessionExisted$;
    };
    return BefSessionHandlingStrategy;
}());
if (false) {
    /**
     * 存储策略
     * @type {?}
     * @protected
     */
    BefSessionHandlingStrategy.prototype.storageStrategy;
    /**
     * 框架Session服务
     * @type {?}
     * @protected
     */
    BefSessionHandlingStrategy.prototype.frmSessionService;
    /**
     * Http客户端
     * @type {?}
     * @protected
     */
    BefSessionHandlingStrategy.prototype.httpClient;
    /**
     * 创建Session的的EAPI地址
     * @type {?}
     * @protected
     */
    BefSessionHandlingStrategy.prototype.beBaseUrl;
    /**
     * 创建BeSession接口地址
     * @type {?}
     * @protected
     */
    BefSessionHandlingStrategy.prototype.beCreateSessionUrl;
    /**
     * 关闭BeSession接口地址
     * @type {?}
     * @protected
     */
    BefSessionHandlingStrategy.prototype.beCloseSessionUrl;
    /**
     * 清空的BeSessionId
     * @type {?}
     * @protected
     */
    BefSessionHandlingStrategy.prototype.oldBeSessionId;
    /**
     * BeSession是否存在
     * @type {?}
     * @private
     */
    BefSessionHandlingStrategy.prototype.beSessionExisted;
    /**
     * BeSession是否存在流
     * @type {?}
     * @private
     */
    BefSessionHandlingStrategy.prototype.beSessionExisted$;
    /**
     * @abstract
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.getSessionId = function () { };
    /**
     * @abstract
     * @param {?} sessionId
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.setSessionId = function (sessionId) { };
    /**
     * @abstract
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.clearSessionId = function () { };
    /**
     * @abstract
     * @param {?} headers
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.handleRequestHeaders = function (headers) { };
    /**
     * @abstract
     * @param {?} headers
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.handleReponseHeaders = function (headers) { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    BefSessionHandlingStrategy.prototype.getSessionStorageKey = function () { };
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/session/handling-strategies/separated_handling_strategy.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 隔离的BeSession处理策略
 */
var  /**
 * 隔离的BeSession处理策略
 */
BefSeparatedSessionHandlingStrategy = /** @class */ (function (_super) {
    __extends(BefSeparatedSessionHandlingStrategy, _super);
    /**
     * 构造函数
     */
    function BefSeparatedSessionHandlingStrategy(storageStrategy, frmSessionService, httpClient, beBaseUrl) {
        return _super.call(this, storageStrategy, frmSessionService, httpClient, beBaseUrl) || this;
    }
    /**
     * 获取BeSessionId
     */
    /**
     * 获取BeSessionId
     * @return {?}
     */
    BefSeparatedSessionHandlingStrategy.prototype.getSessionId = /**
     * 获取BeSessionId
     * @return {?}
     */
    function () {
        /** @type {?} */
        var beSessionId = this.getSessionIdFromStorage();
        /** @type {?} */
        var beSessionId$;
        if (beSessionId) {
            beSessionId$ = of(beSessionId);
            this.setBesessionExisted(true);
        }
        else {
            beSessionId$ = this.createSession();
        }
        /** @type {?} */
        var result$ = this.closeOldSession().pipe(switchMap((/**
         * @return {?}
         */
        function () {
            return beSessionId$;
        })));
        return result$;
    };
    /**
     * 设置BeSessionId
     */
    /**
     * 设置BeSessionId
     * @param {?} sessionId
     * @return {?}
     */
    BefSeparatedSessionHandlingStrategy.prototype.setSessionId = /**
     * 设置BeSessionId
     * @param {?} sessionId
     * @return {?}
     */
    function (sessionId) {
        /** @type {?} */
        var sessionKey = this.getSessionStorageKey();
        this.storageStrategy.setItem(sessionKey, sessionId);
    };
    /**
     * 清空BeSessionId
     */
    /**
     * 清空BeSessionId
     * @return {?}
     */
    BefSeparatedSessionHandlingStrategy.prototype.clearSessionId = /**
     * 清空BeSessionId
     * @return {?}
     */
    function () {
        if (BefEnvUtil.isInFramework() === true) {
            this.storageStrategy.removeItemsByScope(this.frmSessionId);
        }
        else {
            /** @type {?} */
            var sessionKey = this.getSessionStorageKey();
            this.oldBeSessionId = this.getSessionIdFromStorage();
            this.storageStrategy.removeItem(sessionKey);
        }
    };
    /**
     * 扩展BeSessionId相关头信息
     */
    /**
     * 扩展BeSessionId相关头信息
     * @param {?} headers
     * @return {?}
     */
    BefSeparatedSessionHandlingStrategy.prototype.handleRequestHeaders = /**
     * 扩展BeSessionId相关头信息
     * @param {?} headers
     * @return {?}
     */
    function (headers) {
        /** @type {?} */
        var frmSessionId = this.getFrameworkSessionId();
        /** @type {?} */
        var beSessionId = this.getSessionIdFromStorage();
        if (frmSessionId) {
            headers = BefHttpUtil.appendCafRuntimeCommonVariable(headers, frmSessionId);
        }
        if (beSessionId) {
            headers = BefHttpUtil.appendCafRuntimeContext(headers, beSessionId);
            headers = BefHttpUtil.appendSessionId(headers, beSessionId);
        }
        return headers;
    };
    /**
     * 处理服务器端返回的headers
     */
    /**
     * 处理服务器端返回的headers
     * @param {?} headers
     * @return {?}
     */
    BefSeparatedSessionHandlingStrategy.prototype.handleReponseHeaders = /**
     * 处理服务器端返回的headers
     * @param {?} headers
     * @return {?}
     */
    function (headers) {
    };
    /**
     * 获取某个Repository对应的BeSession的唯一key
     */
    /**
     * 获取某个Repository对应的BeSession的唯一key
     * @protected
     * @return {?}
     */
    BefSeparatedSessionHandlingStrategy.prototype.getSessionStorageKey = /**
     * 获取某个Repository对应的BeSession的唯一key
     * @protected
     * @return {?}
     */
    function () {
        return this.frmSessionId + "_" + this.beBaseUrl;
    };
    return BefSeparatedSessionHandlingStrategy;
}(BefSessionHandlingStrategy));

/**
 * @fileoverview added by tsickle
 * Generated from: lib/session/handling-strategies/unified_handling_strategy.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 统一的Session处理策略
 * \@todo
 * 1、目前Session其实还是隔离的，因为使用了beBaseUrl做了缓存；
 * 2、将来框架token问题解决了之后，使用token或者表单基url做缓存key；
 * 3、基于2缓存之后，如何closeSession，成为问题，除非appAcontext是一颗树，只有根AppContext初始化的时候，才去closeSession。
 */
var  /**
 * 统一的Session处理策略
 * \@todo
 * 1、目前Session其实还是隔离的，因为使用了beBaseUrl做了缓存；
 * 2、将来框架token问题解决了之后，使用token或者表单基url做缓存key；
 * 3、基于2缓存之后，如何closeSession，成为问题，除非appAcontext是一颗树，只有根AppContext初始化的时候，才去closeSession。
 */
BefUnifiedSessionHandlingStrategy = /** @class */ (function (_super) {
    __extends(BefUnifiedSessionHandlingStrategy, _super);
    /**
     * 构造函数
     */
    function BefUnifiedSessionHandlingStrategy(storageStrategy, frmSessionService, httpClient, beBaseUrl) {
        var _this = _super.call(this, storageStrategy, frmSessionService, httpClient, beBaseUrl) || this;
        _this.beCloseSessionUrl = beBaseUrl + "/service/closesession";
        return _this;
    }
    /**
     * 获取BeSession
     */
    /**
     * 获取BeSession
     * @return {?}
     */
    BefUnifiedSessionHandlingStrategy.prototype.getSessionId = /**
     * 获取BeSession
     * @return {?}
     */
    function () {
        /** @type {?} */
        var sessionKey = this.getSessionStorageKey();
        /** @type {?} */
        var sessionId = this.storageStrategy.getItem(sessionKey);
        /** @type {?} */
        var beSessionId$ = of(sessionId);
        /** @type {?} */
        var result$ = this.closeOldSession().pipe(switchMap((/**
         * @return {?}
         */
        function () {
            return beSessionId$;
        })));
        return result$;
    };
    /**
     * 设置BeSessionId
     */
    /**
     * 设置BeSessionId
     * @param {?} sessionId
     * @return {?}
     */
    BefUnifiedSessionHandlingStrategy.prototype.setSessionId = /**
     * 设置BeSessionId
     * @param {?} sessionId
     * @return {?}
     */
    function (sessionId) {
        /** @type {?} */
        var sessionKey = this.getSessionStorageKey();
        this.storageStrategy.setItem(sessionKey, sessionId);
    };
    /**
     * 清空Sessionid
     */
    /**
     * 清空Sessionid
     * @return {?}
     */
    BefUnifiedSessionHandlingStrategy.prototype.clearSessionId = /**
     * 清空Sessionid
     * @return {?}
     */
    function () {
        /** @type {?} */
        var sessionKey = this.getSessionStorageKey();
        this.oldBeSessionId = this.getSessionIdFromStorage();
        this.storageStrategy.removeItem(sessionKey);
    };
    /**
     * 扩展Session相关头信息
     */
    /**
     * 扩展Session相关头信息
     * @param {?} headers
     * @return {?}
     */
    BefUnifiedSessionHandlingStrategy.prototype.handleRequestHeaders = /**
     * 扩展Session相关头信息
     * @param {?} headers
     * @return {?}
     */
    function (headers) {
        /** @type {?} */
        var frmSessionId = this.getFrameworkSessionId();
        if (frmSessionId) {
            headers = BefHttpUtil.appendCafRuntimeCommonVariable(headers, frmSessionId);
        }
        /** @type {?} */
        var beSessionId = this.getSessionIdFromStorage();
        if (beSessionId) {
            headers = BefHttpUtil.appendCafRuntimeContext(headers, beSessionId);
        }
        return headers;
    };
    /**
     * 处理服务器端返回的headers
     */
    /**
     * 处理服务器端返回的headers
     * @param {?} headers
     * @return {?}
     */
    BefUnifiedSessionHandlingStrategy.prototype.handleReponseHeaders = /**
     * 处理服务器端返回的headers
     * @param {?} headers
     * @return {?}
     */
    function (headers) {
        /** @type {?} */
        var beSessionId = headers['befsessionid'];
        /** @type {?} */
        var oldBeSessionId = this.getSessionId();
        if (beSessionId && beSessionId !== oldBeSessionId) {
            this.setSessionId(beSessionId);
        }
    };
    /**
     * 获取某个Repository对应的BeSession的唯一key
     */
    /**
     * 获取某个Repository对应的BeSession的唯一key
     * @protected
     * @return {?}
     */
    BefUnifiedSessionHandlingStrategy.prototype.getSessionStorageKey = /**
     * 获取某个Repository对应的BeSession的唯一key
     * @protected
     * @return {?}
     */
    function () {
        return this.beBaseUrl;
    };
    return BefUnifiedSessionHandlingStrategy;
}(BefSessionHandlingStrategy));

/**
 * @fileoverview added by tsickle
 * Generated from: lib/session/storage-strategies/storage_strategy.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * BeSession缓存
 * @record
 */
function BeSessionStorageStrategy() { }
if (false) {
    /**
     * @param {?} beSessionKey
     * @return {?}
     */
    BeSessionStorageStrategy.prototype.getItem = function (beSessionKey) { };
    /**
     * @param {?} beSessionKey
     * @param {?} beSessionid
     * @return {?}
     */
    BeSessionStorageStrategy.prototype.setItem = function (beSessionKey, beSessionid) { };
    /**
     * @param {?} beSessionKey
     * @return {?}
     */
    BeSessionStorageStrategy.prototype.removeItem = function (beSessionKey) { };
    /**
     * @param {?} beSessionScope
     * @return {?}
     */
    BeSessionStorageStrategy.prototype.removeItemsByScope = function (beSessionScope) { };
    /**
     * @return {?}
     */
    BeSessionStorageStrategy.prototype.clear = function () { };
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/session/storage-strategies/session_storage_strategy.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 基于浏览器SessionStorage的BeSession缓存
 * \@summary
 * 1、SeparatedSession模式下：
 *  {
 *    BE_SESSION_ID: {
 *      frmSessionId1_beSessionUri1: beSessionId-1,
 *      frmSessionId2_beSessionUri2: beSessionId-2,
 *    }
 *  }
 * 2、UnifiedSession模式下（在Debug状态，同模式1）：
 * {
 *    BE_SESSION_ID: {
 *      frmSessionId1: beSessionId-1,
 *      frmSessionId2: beSessionId-2,
 *    }
 *  }
 */
var  /**
 * 基于浏览器SessionStorage的BeSession缓存
 * \@summary
 * 1、SeparatedSession模式下：
 *  {
 *    BE_SESSION_ID: {
 *      frmSessionId1_beSessionUri1: beSessionId-1,
 *      frmSessionId2_beSessionUri2: beSessionId-2,
 *    }
 *  }
 * 2、UnifiedSession模式下（在Debug状态，同模式1）：
 * {
 *    BE_SESSION_ID: {
 *      frmSessionId1: beSessionId-1,
 *      frmSessionId2: beSessionId-2,
 *    }
 *  }
 */
SessionStorageBeSessionStorageStrategy = /** @class */ (function () {
    function SessionStorageBeSessionStorageStrategy() {
        /**
         * 缓存Token
         */
        this.sessionStorageKey = 'BE_SESSION_ID';
    }
    /**
     * 获取值
     */
    /**
     * 获取值
     * @param {?} beSessionKey
     * @return {?}
     */
    SessionStorageBeSessionStorageStrategy.prototype.getItem = /**
     * 获取值
     * @param {?} beSessionKey
     * @return {?}
     */
    function (beSessionKey) {
        /** @type {?} */
        var beSessions = this.getAllBeSessions();
        return beSessions[beSessionKey];
    };
    /**
     * 设置值
     */
    /**
     * 设置值
     * @param {?} beSessionKey
     * @param {?} beSessionId
     * @return {?}
     */
    SessionStorageBeSessionStorageStrategy.prototype.setItem = /**
     * 设置值
     * @param {?} beSessionKey
     * @param {?} beSessionId
     * @return {?}
     */
    function (beSessionKey, beSessionId) {
        /** @type {?} */
        var beSessions = this.getAllBeSessions();
        beSessions[beSessionKey] = beSessionId;
        this.setAllBeSessions(beSessions);
    };
    /**
     * 删除值
     */
    /**
     * 删除值
     * @param {?} beSessionKey
     * @return {?}
     */
    SessionStorageBeSessionStorageStrategy.prototype.removeItem = /**
     * 删除值
     * @param {?} beSessionKey
     * @return {?}
     */
    function (beSessionKey) {
        /** @type {?} */
        var beSessions = this.getAllBeSessions();
        if (beSessions[beSessionKey]) {
            delete beSessions[beSessionKey];
        }
        this.setAllBeSessions(beSessions);
    };
    /**
     * 根据scope删除值
     */
    /**
     * 根据scope删除值
     * @param {?} beSessionScope
     * @return {?}
     */
    SessionStorageBeSessionStorageStrategy.prototype.removeItemsByScope = /**
     * 根据scope删除值
     * @param {?} beSessionScope
     * @return {?}
     */
    function (beSessionScope) {
        /** @type {?} */
        var beSessions = this.getAllBeSessions();
        Object.keys(beSessions).forEach((/**
         * @param {?} beSessionKey
         * @return {?}
         */
        function (beSessionKey) {
            if (beSessionKey.startsWith(beSessionScope) === true) {
                delete beSessions[beSessionKey];
            }
        }));
        this.setAllBeSessions(beSessions);
    };
    /**
     * 清空所有会话
     */
    /**
     * 清空所有会话
     * @return {?}
     */
    SessionStorageBeSessionStorageStrategy.prototype.clear = /**
     * 清空所有会话
     * @return {?}
     */
    function () {
        window.sessionStorage.removeItem(this.sessionStorageKey);
    };
    /**
     * 从SessionStorage中获取全部BeSessions
     */
    /**
     * 从SessionStorage中获取全部BeSessions
     * @private
     * @return {?}
     */
    SessionStorageBeSessionStorageStrategy.prototype.getAllBeSessions = /**
     * 从SessionStorage中获取全部BeSessions
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var beSessionsJson = window.sessionStorage.getItem(this.sessionStorageKey);
        if (!beSessionsJson) {
            return {};
        }
        return JSON.parse(beSessionsJson);
    };
    /**
     * 设置全部BeSessions到SessionStorage
     */
    /**
     * 设置全部BeSessions到SessionStorage
     * @param {?} beSessions
     * @return {?}
     */
    SessionStorageBeSessionStorageStrategy.prototype.setAllBeSessions = /**
     * 设置全部BeSessions到SessionStorage
     * @param {?} beSessions
     * @return {?}
     */
    function (beSessions) {
        /** @type {?} */
        var beSessionsString = JSON.stringify(beSessions);
        window.sessionStorage.setItem(this.sessionStorageKey, beSessionsString);
    };
    return SessionStorageBeSessionStorageStrategy;
}());
if (false) {
    /**
     * 缓存Token
     * @type {?}
     * @private
     */
    SessionStorageBeSessionStorageStrategy.prototype.sessionStorageKey;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/session/storage-strategies/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/session/handling-strategies/handling_strategy_factory.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * BeSession处理策略工厂
 */
var  /**
 * BeSession处理策略工厂
 */
BefSessionHandlingStrategyFactory = /** @class */ (function () {
    function BefSessionHandlingStrategyFactory() {
    }
    /**
     * 创建BeSession处理策略
     */
    /**
     * 创建BeSession处理策略
     * @param {?} handlingStrategyName
     * @param {?} frmSessionService
     * @param {?} beBaseUrl
     * @param {?} httpClient
     * @return {?}
     */
    BefSessionHandlingStrategyFactory.prototype.create = /**
     * 创建BeSession处理策略
     * @param {?} handlingStrategyName
     * @param {?} frmSessionService
     * @param {?} beBaseUrl
     * @param {?} httpClient
     * @return {?}
     */
    function (handlingStrategyName, frmSessionService, beBaseUrl, httpClient) {
        /** @type {?} */
        var storageStrategy = this.createStorageStrategy();
        if (handlingStrategyName === 'UnifiedSession') {
            return new BefUnifiedSessionHandlingStrategy(storageStrategy, frmSessionService, httpClient, beBaseUrl);
        }
        else {
            return new BefSeparatedSessionHandlingStrategy(storageStrategy, frmSessionService, httpClient, beBaseUrl);
        }
    };
    /**
     * 创建BeSession缓存策略
     */
    /**
     * 创建BeSession缓存策略
     * @private
     * @return {?}
     */
    BefSessionHandlingStrategyFactory.prototype.createStorageStrategy = /**
     * 创建BeSession缓存策略
     * @private
     * @return {?}
     */
    function () {
        return new SessionStorageBeSessionStorageStrategy();
    };
    return BefSessionHandlingStrategyFactory;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/session/handling-strategies/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/session/bef_session_service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * BefSessionService
 */
var  /**
 * BefSessionService
 */
BefSessionService = /** @class */ (function () {
    /**
     * 构造函数
     */
    function BefSessionService(handlingStrategy) {
        this.handlingStrategy = handlingStrategy;
    }
    Object.defineProperty(BefSessionService.prototype, "token", {
        /**
         * 获取token
         */
        get: /**
         * 获取token
         * @return {?}
         */
        function () {
            return this.handlingStrategy.getFrameworkSessionId();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 获取BeSessionId
     */
    /**
     * 获取BeSessionId
     * @return {?}
     */
    BefSessionService.prototype.getBeSessionId = /**
     * 获取BeSessionId
     * @return {?}
     */
    function () {
        return this.handlingStrategy.getSessionId();
    };
    /**
     * 获取BeSession是否存在状态
     */
    /**
     * 获取BeSession是否存在状态
     * @return {?}
     */
    BefSessionService.prototype.getBeSessionExisted = /**
     * 获取BeSession是否存在状态
     * @return {?}
     */
    function () {
        return this.handlingStrategy.getBeSessionExisted();
    };
    /**
     * 设置sessionId
     * @param sessionId sessionId
     */
    /**
     * 设置sessionId
     * @param {?} sessionId sessionId
     * @return {?}
     */
    BefSessionService.prototype.setBeSessionId = /**
     * 设置sessionId
     * @param {?} sessionId sessionId
     * @return {?}
     */
    function (sessionId) {
        this.handlingStrategy.setSessionId(sessionId);
    };
    /**
     * 清空BeSessionId
     */
    /**
     * 清空BeSessionId
     * @return {?}
     */
    BefSessionService.prototype.clearBeSessionId = /**
     * 清空BeSessionId
     * @return {?}
     */
    function () {
        this.handlingStrategy.clearSessionId();
    };
    /**
     * 扩展请求header
     */
    /**
     * 扩展请求header
     * @param {?} headers
     * @return {?}
     */
    BefSessionService.prototype.extendRequestHeaders = /**
     * 扩展请求header
     * @param {?} headers
     * @return {?}
     */
    function (headers) {
        return this.handlingStrategy.handleRequestHeaders(headers);
    };
    /**
     * 处理响应header
     */
    /**
     * 处理响应header
     * @param {?} headers
     * @return {?}
     */
    BefSessionService.prototype.handleResponseHeaders = /**
     * 处理响应header
     * @param {?} headers
     * @return {?}
     */
    function (headers) {
        return this.handlingStrategy.handleReponseHeaders(headers);
    };
    return BefSessionService;
}());
if (false) {
    /**
     * Session处理策略类
     * @type {?}
     * @private
     */
    BefSessionService.prototype.handlingStrategy;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/session/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_proxy.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Bef API代理类
 * @abstract
 */
var  /**
 * Bef API代理类
 * @abstract
 */
BefProxy = /** @class */ (function () {
    /**
     * 构造函数
     */
    function BefProxy(httpClient) {
        this.httpClient = httpClient;
        this.associatedUrlMap = new Map();
    }
    // 记录附件取跨Be url
    // 记录附件取跨Be url
    /**
     * @param {?} url
     * @return {?}
     */
    BefProxy.prototype.setAssociatedUrl = 
    // 记录附件取跨Be url
    /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        this.associatedUrlMap.set(url, url);
    };
    /**
     * 设置扩展策略
     */
    /**
     * 设置扩展策略
     * @param {?} proxyExtend
     * @return {?}
     */
    BefProxy.prototype.setProxyExtend = /**
     * 设置扩展策略
     * @param {?} proxyExtend
     * @return {?}
     */
    function (proxyExtend) {
        this.proxyExtend = proxyExtend;
    };
    /**
     * 查询
     */
    /**
     * 查询
     * @param {?=} entityFilter
     * @return {?}
     */
    BefProxy.prototype.query = /**
     * 查询
     * @param {?=} entityFilter
     * @return {?}
     */
    function (entityFilter) {
        /** @type {?} */
        var url = this.baseUrl;
        /** @type {?} */
        var params = {};
        if (entityFilter) {
            /** @type {?} */
            var entityFilterString = JSON.stringify(entityFilter);
            params.entityFilter = entityFilterString;
        }
        /** @type {?} */
        var requestConfig = {
            params: params
        };
        return this.request(HttpMethods.GET, url, requestConfig);
    };
    /**
     * 列表数据查询（扩展）
     */
    /**
     * 列表数据查询（扩展）
     * @param {?} entityFilter
     * @return {?}
     */
    BefProxy.prototype.extendQuery = /**
     * 列表数据查询（扩展）
     * @param {?} entityFilter
     * @return {?}
     */
    function (entityFilter) {
        /** @type {?} */
        var url = this.baseUrl + "/extension/query";
        /** @type {?} */
        var params = {};
        if (entityFilter) {
            /** @type {?} */
            var entityFilterString = JSON.stringify(entityFilter);
            params.entityFilter = entityFilterString;
        }
        /** @type {?} */
        var requestConfig = {
            params: params
        };
        return this.request(HttpMethods.PUT, url, requestConfig);
    };
    /**
     * 单条数据检索
     */
    /**
     * 单条数据检索
     * @param {?} id
     * @return {?}
     */
    BefProxy.prototype.retrieve = /**
     * 单条数据检索
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var url = this.baseUrl + "/" + id;
        return this.request(HttpMethods.GET, url);
    };
    /**
     * 单条数据检索（扩展）
     */
    /**
     * 单条数据检索（扩展）
     * @param {?} id
     * @return {?}
     */
    BefProxy.prototype.extendRetrieve = /**
     * 单条数据检索（扩展）
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var url = this.baseUrl + "/extension/retrieve/" + id;
        return this.request(HttpMethods.PUT, url);
    };
    /**
     * 单条数据检索（加锁）
     */
    /**
     * 单条数据检索（加锁）
     * @param {?} id
     * @return {?}
     */
    BefProxy.prototype.edit = /**
     * 单条数据检索（加锁）
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var url = this.baseUrl + "/service/edit/" + id;
        return this.request(HttpMethods.PUT, url);
    };
    /**
     * 新增数据
     */
    /**
     * 新增数据
     * @param {?=} defaultValue
     * @param {?=} requestInfo
     * @return {?}
     */
    BefProxy.prototype.create = /**
     * 新增数据
     * @param {?=} defaultValue
     * @param {?=} requestInfo
     * @return {?}
     */
    function (defaultValue, requestInfo) {
        /** @type {?} */
        var body = {
            defaultValue: defaultValue,
            requestInfo: requestInfo,
        };
        /** @type {?} */
        var requestConfig = {
            body: body
        };
        return this.request(HttpMethods.POST, this.baseUrl, requestConfig);
    };
    /**
     * 新增从表数据
     * @path 新增路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）
     */
    /**
     * 新增从表数据
     * \@path 新增路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）
     * @param {?} fpath
     * @return {?}
     */
    BefProxy.prototype.createByPath = /**
     * 新增从表数据
     * \@path 新增路径（从表形如：/1/edus，从从表形如：/1/edus/11/grades）
     * @param {?} fpath
     * @return {?}
     */
    function (fpath) {
        /** @type {?} */
        var pathUrl = BefDataPathUtil.convertPathToUrl(fpath);
        /** @type {?} */
        var url = "" + this.baseUrl + pathUrl;
        return this.request(HttpMethods.POST, url);
    };
    /**
     * 提交变更
     */
    /**
     * 提交变更
     * @param {?} changeDetail
     * @return {?}
     */
    BefProxy.prototype.update = /**
     * 提交变更
     * @param {?} changeDetail
     * @return {?}
     */
    function (changeDetail) {
        /** @type {?} */
        var body = {
            changeDetail: changeDetail
        };
        /** @type {?} */
        var requestConfig = {
            body: body
        };
        return this.request(HttpMethods.PATCH, this.baseUrl, requestConfig);
    };
    /**
     * 执行保存
     */
    /**
     * 执行保存
     * @return {?}
     */
    BefProxy.prototype.save = /**
     * 执行保存
     * @return {?}
     */
    function () {
        return this.request(HttpMethods.PUT, this.baseUrl);
    };
    /**
     * 删除
     */
    /**
     * 删除
     * @param {?} id
     * @return {?}
     */
    BefProxy.prototype.delete = /**
     * 删除
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var url = this.baseUrl + "/" + id;
        return this.request(HttpMethods.DELETE, url);
    };
    /**
     * 删除（扩展）
     */
    /**
     * 删除（扩展）
     * @param {?} id
     * @return {?}
     */
    BefProxy.prototype.extendDelete = /**
     * 删除（扩展）
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var url = this.baseUrl + "/extension/delete/" + id;
        return this.request(HttpMethods.PUT, url);
    };
    /**
     * 删除并保存
     */
    /**
     * 删除并保存
     * @param {?} id
     * @return {?}
     */
    BefProxy.prototype.deleteAndSave = /**
     * 删除并保存
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var url = this.baseUrl + "/service/delete/" + id;
        /** @type {?} */
        var requestConfig = {};
        return this.request(HttpMethods.PUT, url, requestConfig);
    };
    /**
     * 删除后代
     */
    /**
     * 删除后代
     * @param {?} fpath
     * @param {?} id
     * @return {?}
     */
    BefProxy.prototype.deletByPath = /**
     * 删除后代
     * @param {?} fpath
     * @param {?} id
     * @return {?}
     */
    function (fpath, id) {
        /** @type {?} */
        var pathUrl = BefDataPathUtil.convertPathToUrl(fpath);
        /** @type {?} */
        var url = "" + this.baseUrl + pathUrl + "/" + id;
        return this.request(HttpMethods.DELETE, url);
    };
    /**
     * 删除后代（扩展）
     */
    /**
     * 删除后代（扩展）
     * @param {?} fpath
     * @param {?} id
     * @return {?}
     */
    BefProxy.prototype.extendDeletByPath = /**
     * 删除后代（扩展）
     * @param {?} fpath
     * @param {?} id
     * @return {?}
     */
    function (fpath, id) {
        /** @type {?} */
        var pathUrl = BefDataPathUtil.convertPathToUrl(fpath);
        /** @type {?} */
        var url = this.baseUrl + "/extension" + pathUrl + "/" + id;
        return this.request(HttpMethods.PUT, url);
    };
    /**
     * 批量删除
     * @param ids 待删除的id数组
     */
    /**
     * 批量删除
     * @param {?} ids 待删除的id数组
     * @return {?}
     */
    BefProxy.prototype.batchDelete = /**
     * 批量删除
     * @param {?} ids 待删除的id数组
     * @return {?}
     */
    function (ids) {
        /** @type {?} */
        var params = {
            ids: ids.join(',')
        };
        /** @type {?} */
        var requestConfig = {
            params: params
        };
        return this.request(HttpMethods.DELETE, this.baseUrl, requestConfig);
    };
    /**
     * 批量删除（扩展）
     */
    /**
     * 批量删除（扩展）
     * @param {?} ids
     * @return {?}
     */
    BefProxy.prototype.extendBatchDelete = /**
     * 批量删除（扩展）
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        /** @type {?} */
        var url = this.baseUrl + "/extension/batchdelete";
        /** @type {?} */
        var params = {
            ids: ids.join(',')
        };
        /** @type {?} */
        var requestConfig = {
            params: params
        };
        return this.request(HttpMethods.PUT, url, requestConfig);
    };
    /**
     * 取消
     */
    /**
     * 取消
     * @return {?}
     */
    BefProxy.prototype.cancel = /**
     * 取消
     * @return {?}
     */
    function () {
        /** @type {?} */
        var url = this.baseUrl + "/service/cancel";
        return this.request(HttpMethods.POST, url);
    };
    /**
     * 调用httpclient取数
     * @param url url
     * @param method methods
     * @param requestConfigs options
     */
    /**
     * 调用httpclient取数
     * @param {?} method methods
     * @param {?} url url
     * @param {?=} requestConfigs options
     * @param {?=} ignoreHandlingChanges
     * @return {?}
     */
    BefProxy.prototype.request = /**
     * 调用httpclient取数
     * @param {?} method methods
     * @param {?} url url
     * @param {?=} requestConfigs options
     * @param {?=} ignoreHandlingChanges
     * @return {?}
     */
    function (method, url, requestConfigs, ignoreHandlingChanges) {
        var _this = this;
        if (ignoreHandlingChanges === void 0) { ignoreHandlingChanges = false; }
        requestConfigs = requestConfigs || {};
        // 扩展body
        if (ignoreHandlingChanges !== true) {
            if (method === HttpMethods.POST || method === HttpMethods.PUT || method === HttpMethods.PATCH) {
                /** @type {?} */
                var body = requestConfigs.body || {};
                requestConfigs.body = this.proxyExtend.extendBody(body);
            }
        }
        // 扩展headers
        /** @type {?} */
        var headers$ = this.proxyExtend.extendHeaders(requestConfigs.headers);
        // 发送请求
        return headers$.pipe(switchMap((/**
         * @param {?} headers
         * @return {?}
         */
        function (headers) {
            requestConfigs.headers = headers;
            requestConfigs.observe = 'response';
            return _this.httpClient.request(method, url, requestConfigs).pipe(map((/**
             * @param {?} result
             * @return {?}
             */
            function (result) {
                if (ignoreHandlingChanges === true) {
                    return result && result.body && result.body.returnValue ? result.body.returnValue : result;
                }
                else {
                    return _this.proxyExtend.onResponse(result);
                }
            })), catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                return _this.proxyExtend.onError(error, false, false);
            })));
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            return _this.proxyExtend.onError(error, false, false);
        })));
    };
    return BefProxy;
}());
if (false) {
    /**
     * API基路径
     * \@summary
     * 延迟到实现类确定，考虑使用注解指定。
     * @type {?}
     */
    BefProxy.prototype.baseUrl;
    /** @type {?} */
    BefProxy.prototype.associatedUrlMap;
    /**
     * 代理扩展
     * @type {?}
     * @protected
     */
    BefProxy.prototype.proxyExtend;
    /** @type {?} */
    BefProxy.prototype.httpClient;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/decorators.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 变量元数据名称
 * @type {?}
 */
var VARIABLE_PROP_META = '@farris/bef VARIABLE_PROP_META';
/**
 * NgVariable元数据接口
 * @record
 */
function VariablePropMetadata() { }
if (false) {
    /**
     * 变量影射
     * @type {?}
     */
    VariablePropMetadata.prototype.mapping;
}
/**
 * NgVariable装饰器工厂接口
 * @record
 */
function VariablePropDecorator() { }
var ɵ0 = /**
 * @param {?} obj
 * @return {?}
 */
function (obj) { return obj; };
/**
 * NgVariable装饰工厂的工厂
 * @type {?}
 */
var VariablePropMeta = makePropDecorator(VARIABLE_PROP_META, (ɵ0));

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_entity_manager.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 实体管理类：管理Entity和
 * \@todo
 * 1、实体管理应该放在Devkit中；
 * 2、目前只是简单代码拆分，待进一步明确职责。
 * @template T
 */
var /**
 * 实体管理类：管理Entity和
 * \@todo
 * 1、实体管理应该放在Devkit中；
 * 2、目前只是简单代码拆分，待进一步明确职责。
 * @template T
 */
BefEntityManager = /** @class */ (function (_super) {
    __extends(BefEntityManager, _super);
    /**
     * 构造函数
     */
    function BefEntityManager(entityCollection) {
        var _this = _super.call(this, entityCollection) || this;
        _this.changeBuilder = new BefChangeBuilder(_this.entityCollection.entityType, _this.entityCollection);
        _this.changeHandler = new BefChangeHandler();
        return _this;
    }
    /**
     * 获取数据变更
     */
    /**
     * 获取数据变更
     * @return {?}
     */
    BefEntityManager.prototype.buildAllEntityChangeDetails = /**
     * 获取数据变更
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var changeDetails = [];
        /** @type {?} */
        var entities = this.entityCollection.getAllEntities();
        entities.forEach((/**
         * @param {?} entity
         * @return {?}
         */
        function (entity) {
            if (entity.changes.length === 0) {
                return;
            }
            /** @type {?} */
            var changeDetail = _this.changeBuilder.build(entity.changes);
            // 防止空id的变更被提交
            // @todo：此处判断应该放到更底层，临时修复Bug。
            if (changeDetail && changeDetail.ChangeInfo && changeDetail.ChangeInfo.DataId) {
                changeDetails.push(changeDetail);
            }
        }));
        return changeDetails;
    };
    /**
     * 获取单个实体
     */
    /**
     * 获取单个实体
     * @param {?} id
     * @return {?}
     */
    BefEntityManager.prototype.buildEntityChangeDetailById = /**
     * 获取单个实体
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var entity = this.entityCollection.getEntityById(id);
        if (entity.changes.length === 0) {
            return null;
        }
        /** @type {?} */
        var changeDetail = this.changeBuilder.build(entity.changes);
        return changeDetail;
    };
    /**
     * 应用数据变更
     */
    /**
     * 应用数据变更
     * @param {?} changeDetails
     * @return {?}
     */
    BefEntityManager.prototype.handleDataChangeDetails = /**
     * 应用数据变更
     * @param {?} changeDetails
     * @return {?}
     */
    function (changeDetails) {
        this.changeHandler.handle(this.entityType, this.entityCollection, changeDetails);
    };
    // #endregion
    /**
     * 清空所有实体
     */
    // #endregion
    /**
     * 清空所有实体
     * @return {?}
     */
    BefEntityManager.prototype.reset = 
    // #endregion
    /**
     * 清空所有实体
     * @return {?}
     */
    function () {
        this.entityCollection.clear();
    };
    return BefEntityManager;
}(EntityManager));
if (false) {
    /**
     * ChangeDetail构造器
     * @type {?}
     */
    BefEntityManager.prototype.changeBuilder;
    /**
     * ChangeDetail处理器
     * @type {?}
     */
    BefEntityManager.prototype.changeHandler;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_variable_manager.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Be变量管理器
 */
var /**
 * Be变量管理器
 */
BefVariableManager = /** @class */ (function () {
    /**
     * 构造函数
     */
    function BefVariableManager(ngVariables) {
        var _this = this;
        this.ngVariables = ngVariables;
        this.ngVariableMap = new Map();
        this.lastSyncValuesMap = new Map();
        this.latestVariableValues = new Map();
        // 重新组织变量元数据
        Object.keys(this.ngVariables).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        function (propName) {
            _this.ngVariableMap.set(propName, ngVariables[propName]);
        }));
    }
    /**
     * 设置变量值
     */
    /**
     * 设置变量值
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    BefVariableManager.prototype.setValue = /**
     * 设置变量值
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    function (name, value) {
        if (this.ngVariableMap.has(name) === false) {
            throw new Error("\u4E0D\u5B58\u5728\u540D\u4E3A" + name + "\u7684\u53D8\u91CF");
        }
        this.latestVariableValues.set(name, value);
    };
    /**
     * 获取变量值
     */
    /**
     * 获取变量值
     * @param {?} name
     * @return {?}
     */
    BefVariableManager.prototype.getValue = /**
     * 获取变量值
     * @param {?} name
     * @return {?}
     */
    function (name) {
        if (this.ngVariableMap.has(name) === false) {
            throw new Error("\u4E0D\u5B58\u5728\u540D\u4E3A" + name + "\u7684\u53D8\u91CF");
        }
        this.latestVariableValues.get(name);
    };
    /**
     * 处理服务器端返回的变量变更
     */
    /**
     * 处理服务器端返回的变量变更
     * @param {?} changeDetail
     * @return {?}
     */
    BefVariableManager.prototype.handleChangeDetail = /**
     * 处理服务器端返回的变量变更
     * @param {?} changeDetail
     * @return {?}
     */
    function (changeDetail) {
    };
    /**
     * Build ChangeDetail instance for all variables.
     */
    /**
     * Build ChangeDetail instance for all variables.
     * @return {?}
     */
    BefVariableManager.prototype.buildChangeDetail = /**
     * Build ChangeDetail instance for all variables.
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var changeDetail = BefChangeUtil.createEmpty(ChangeDetailType.Modify);
        this.ngVariableMap.forEach((/**
         * @param {?} ngVariable
         * @param {?} varName
         * @return {?}
         */
        function (ngVariable, varName) {
            /** @type {?} */
            var newValue = _this.latestVariableValues.get(varName);
            /** @type {?} */
            var oldValue = _this.lastSyncValuesMap.get(varName);
            if (_this.isValueEqual(newValue, oldValue) === false) {
                _this.lastSyncValuesMap.set(varName, newValue);
                _this.appendToChangeInfo(changeDetail, varName, newValue);
            }
        }));
        if (Object.keys(changeDetail.ChangeInfo).length === 0) {
            return null;
        }
        return changeDetail;
    };
    /**
     * Clear variable values cached in the innerValueMap property.
     */
    /**
     * Clear variable values cached in the innerValueMap property.
     * @return {?}
     */
    BefVariableManager.prototype.reset = /**
     * Clear variable values cached in the innerValueMap property.
     * @return {?}
     */
    function () {
        this.lastSyncValuesMap.clear();
        this.latestVariableValues.clear();
    };
    /**
     * Append changed variable to ChangeDetail instance.
     */
    /**
     * Append changed variable to ChangeDetail instance.
     * @private
     * @param {?} changeDetail
     * @param {?} varName
     * @param {?} varValue
     * @return {?}
     */
    BefVariableManager.prototype.appendToChangeInfo = /**
     * Append changed variable to ChangeDetail instance.
     * @private
     * @param {?} changeDetail
     * @param {?} varName
     * @param {?} varValue
     * @return {?}
     */
    function (changeDetail, varName, varValue) {
        if (this.isUdtVariable(varValue) === true) {
            /** @type {?} */
            var udtVarChangeDetail = BefChangeUtil.createEmpty(ChangeDetailType.Modify);
            udtVarChangeDetail.ChangeInfo = varValue;
            changeDetail.ChangeInfo[varName] = udtVarChangeDetail;
        }
        else {
            changeDetail.ChangeInfo[varName] = varValue;
        }
    };
    /**
     * 值比较
     * @todo 临时采用这种方式
     */
    /**
     * 值比较
     * \@todo 临时采用这种方式
     * @private
     * @param {?} srcValue
     * @param {?} dstValue
     * @return {?}
     */
    BefVariableManager.prototype.isValueEqual = /**
     * 值比较
     * \@todo 临时采用这种方式
     * @private
     * @param {?} srcValue
     * @param {?} dstValue
     * @return {?}
     */
    function (srcValue, dstValue) {
        return JSON.stringify(srcValue) === JSON.stringify(dstValue);
    };
    /**
     * Check if the object is a plain object
     */
    /**
     * Check if the object is a plain object
     * @private
     * @param {?} obj
     * @return {?}
     */
    BefVariableManager.prototype.isUdtVariable = /**
     * Check if the object is a plain object
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return obj && obj.constructor &&
            obj.toString() === '[object Object]' &&
            obj.constructor.prototype.hasOwnProperty('isPrototypeOf');
    };
    return BefVariableManager;
}());
if (false) {
    /**
     * 变量元数据
     * @type {?}
     * @private
     */
    BefVariableManager.prototype.ngVariableMap;
    /**
     * 最近向服务器端同步的变量值
     * @type {?}
     * @private
     */
    BefVariableManager.prototype.lastSyncValuesMap;
    /**
     * 当前最新的变量值
     * @type {?}
     * @private
     */
    BefVariableManager.prototype.latestVariableValues;
    /**
     * @type {?}
     * @private
     */
    BefVariableManager.prototype.ngVariables;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_data_service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Bef数据访问服务
 * @template T
 */
var /**
 * Bef数据访问服务
 * @template T
 */
BefDataService = /** @class */ (function () {
    /**
     * 构造函数
     */
    function BefDataService(repository) {
        this.repository = repository;
    }
    Object.defineProperty(BefDataService.prototype, "apiProxy", {
        /**
         * Api代理类
         */
        get: /**
         * Api代理类
         * @private
         * @return {?}
         */
        function () {
            return this.repository.apiProxy;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 获取实体集合
     */
    /**
     * 获取实体集合
     * @param {?} filter
     * @param {?} sort
     * @param {?} pageSize
     * @param {?} pageIndex
     * @return {?}
     */
    BefDataService.prototype.getList = /**
     * 获取实体集合
     * @param {?} filter
     * @param {?} sort
     * @param {?} pageSize
     * @param {?} pageIndex
     * @return {?}
     */
    function (filter, sort, pageSize, pageIndex) {
        var _this = this;
        /** @type {?} */
        var entityFilter = this.buildEntityFilter(filter, sort, pageSize, pageIndex);
        /** @type {?} */
        var query$ = this.apiProxy.extendQuery(entityFilter);
        /** @type {?} */
        var result$ = query$.pipe(map((/**
         * @param {?} returnValue
         * @return {?}
         */
        function (returnValue) {
            _this.repository.setPaginationInfo(((/** @type {?} */ (returnValue))).pagination);
            /** @type {?} */
            var listData = ((/** @type {?} */ (returnValue))).result;
            /** @type {?} */
            var entities = _this.repository.buildEntities(listData);
            if (_this.determineIsAppend(pageIndex)) {
                _this.repository.entityCollection.addEntities(entities);
            }
            else {
                _this.repository.entityCollection.loadEntities(entities);
            }
            return entities;
        })));
        return result$;
    };
    /**
     * 根据当前页判断是否追加
     */
    /**
     * 根据当前页判断是否追加
     * @param {?} pageIndex
     * @return {?}
     */
    BefDataService.prototype.determineIsAppend = /**
     * 根据当前页判断是否追加
     * @param {?} pageIndex
     * @return {?}
     */
    function (pageIndex) {
        return pageIndex > 1;
    };
    /**
     * 获取单个实体
     */
    /**
     * 获取单个实体
     * @param {?} id
     * @return {?}
     */
    BefDataService.prototype.getById = /**
     * 获取单个实体
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        /** @type {?} */
        var retrieve$ = this.apiProxy.extendRetrieve(id);
        /** @type {?} */
        var result$ = retrieve$.pipe(map((/**
         * @param {?} returnValue
         * @return {?}
         */
        function (returnValue) {
            /** @type {?} */
            var entityData = returnValue;
            /** @type {?} */
            var entity = _this.repository.buildEntity(entityData);
            _this.repository.entityCollection.loadEntities([entity]);
            return entity;
        })));
        return result$;
    };
    /**
     * 更新并对实体加锁
     */
    /**
     * 更新并对实体加锁
     * @param {?} id
     * @return {?}
     */
    BefDataService.prototype.editById = /**
     * 更新并对实体加锁
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        /** @type {?} */
        var entity = this.repository.entityCollection.getEntityById(id);
        if (!entity) {
            return of(null);
        }
        /** @type {?} */
        var retrieve$ = this.apiProxy.edit(id);
        /** @type {?} */
        var result$ = retrieve$.pipe(map((/**
         * @param {?} returnValue
         * @return {?}
         */
        function (returnValue) {
            /** @type {?} */
            var entityData = returnValue.data;
            /** @type {?} */
            var entityToUpdate = _this.repository.entityCollection.getEntityById(id);
            if (entityToUpdate && entityData) {
                _this.reloadEntityData(entityToUpdate, entityData);
            }
            return entityToUpdate;
        })));
        return result$;
    };
    /**
     * 根据id更新实体
     * @param id 实体id
     */
    /**
     * 根据id更新实体
     * @param {?} id 实体id
     * @return {?}
     */
    BefDataService.prototype.updateById = /**
     * 根据id更新实体
     * @param {?} id 实体id
     * @return {?}
     */
    function (id) {
        var _this = this;
        /** @type {?} */
        var entity = this.repository.entityCollection.getEntityById(id);
        if (!entity) {
            return EMPTY;
        }
        /** @type {?} */
        var retrieve$ = this.apiProxy.extendRetrieve(id);
        /** @type {?} */
        var result$ = retrieve$.pipe(map((/**
         * @param {?} returnValue
         * @return {?}
         */
        function (returnValue) {
            /** @type {?} */
            var entityData = returnValue;
            /** @type {?} */
            var entityToUpdate = _this.repository.entityCollection.getEntityById(id);
            _this.reloadEntityData(entityToUpdate, entityData);
            return entityToUpdate;
        })));
        return result$;
    };
    /**
     * 重新加载实体数据
     */
    /**
     * 重新加载实体数据
     * @private
     * @param {?} entity
     * @param {?} entityData
     * @return {?}
     */
    BefDataService.prototype.reloadEntityData = /**
     * 重新加载实体数据
     * @private
     * @param {?} entity
     * @param {?} entityData
     * @return {?}
     */
    function (entity, entityData) {
        if (!entity) {
            return;
        }
        entity.load(entityData);
        entity.changes.splice(0, entity.changes.length);
    };
    /**
     * 创建新实体，并加载
     */
    /**
     * 创建新实体，并加载
     * @param {?=} defaultValue
     * @return {?}
     */
    BefDataService.prototype.create = /**
     * 创建新实体，并加载
     * @param {?=} defaultValue
     * @return {?}
     */
    function (defaultValue) {
        var _this = this;
        /** @type {?} */
        var result$ = this.apiProxy.create(defaultValue);
        return result$.pipe(map((/**
         * @param {?} returnValue
         * @return {?}
         */
        function (returnValue) {
            /** @type {?} */
            var newEntityData = returnValue;
            /** @type {?} */
            var newEntity = _this.repository.buildEntity(newEntityData);
            _this.repository.entityCollection.loadEntities([newEntity]);
            _this.repository.dataChangeHistory.addChange({ dataId: newEntity.primaryValue, changeType: DataChangeType.Add });
            return newEntity;
        })));
    };
    /**
     * 追加实体
     */
    /**
     * 追加实体
     * @param {?=} defaultValue
     * @return {?}
     */
    BefDataService.prototype.append = /**
     * 追加实体
     * @param {?=} defaultValue
     * @return {?}
     */
    function (defaultValue) {
        var _this = this;
        /** @type {?} */
        var append$ = this.apiProxy.create(defaultValue);
        return append$.pipe(map((/**
         * @param {?} returnValue
         * @return {?}
         */
        function (returnValue) {
            /** @type {?} */
            var newEntityData = returnValue;
            /** @type {?} */
            var newEntity = _this.repository.buildEntity(newEntityData);
            _this.repository.entityCollection.addEntity(newEntity);
            return newEntity;
        })));
    };
    /**
     * 创建子实体，并追加
     * @param fpath 父路径，格式形如：/1/edus（从表）或/1/edus/2/grades（从从表）
     */
    /**
     * 创建子实体，并追加
     * @param {?} fpath 父路径，格式形如：/1/edus（从表）或/1/edus/2/grades（从从表）
     * @return {?}
     */
    BefDataService.prototype.appendByPath = /**
     * 创建子实体，并追加
     * @param {?} fpath 父路径，格式形如：/1/edus（从表）或/1/edus/2/grades（从从表）
     * @return {?}
     */
    function (fpath) {
        var _this = this;
        /** @type {?} */
        var append$ = this.apiProxy.createByPath(fpath);
        return append$.pipe(map((/**
         * @param {?} returnValue
         * @return {?}
         */
        function (returnValue) {
            /** @type {?} */
            var newEntityData = returnValue;
            /** @type {?} */
            var newEntity = _this.repository.entityManager.appendEntityByPath(fpath, newEntityData, newEntityData);
            return newEntity;
        })));
    };
    /**
     * 根据id删除实体
     * @param id 内码
     */
    /**
     * 根据id删除实体
     * @param {?} id 内码
     * @param {?=} ifSave
     * @return {?}
     */
    BefDataService.prototype.removeById = /**
     * 根据id删除实体
     * @param {?} id 内码
     * @param {?=} ifSave
     * @return {?}
     */
    function (id, ifSave) {
        var _this = this;
        ifSave = (ifSave === undefined) ? true : ifSave;
        /** @type {?} */
        var delete$ = this.apiProxy.extendDelete(id);
        // 从本地实体集合中移除
        return delete$.pipe(switchMap((/**
         * @return {?}
         */
        function () {
            // 执行保存
            if (ifSave === true) {
                return _this.applyChangesById(id).pipe(tap((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    if (result) {
                        _this.repository.entityCollection.removeEntityById(id);
                    }
                })));
            }
            else {
                // 从实体集合中删除
                _this.repository.entityCollection.removeEntityById(id);
                _this.repository.dataChangeHistory.addChange({ dataId: id, changeType: DataChangeType.Delete });
                return of(true);
            }
        })));
    };
    /**
     * 删除并保存
     * @param id 要删除的实体id
     */
    /**
     * 删除并保存
     * @param {?} id 要删除的实体id
     * @return {?}
     */
    BefDataService.prototype.removeAndSaveById = /**
     * 删除并保存
     * @param {?} id 要删除的实体id
     * @return {?}
     */
    function (id) {
        var _this = this;
        /** @type {?} */
        var delete$ = this.apiProxy.deleteAndSave(id);
        /** @type {?} */
        var result$ = delete$.pipe(switchMap((/**
         * @return {?}
         */
        function () {
            _this.repository.entityCollection.removeEntityById(id);
            return of(true);
        })));
        return result$;
    };
    /**
     * 批量删除
     * @param id 内码
     */
    /**
     * 批量删除
     * @param {?} ids
     * @return {?}
     */
    BefDataService.prototype.removeByIds = /**
     * 批量删除
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        var _this = this;
        // 服务器端删除
        /** @type {?} */
        var delete$ = this.apiProxy.extendBatchDelete(ids);
        // 从本地实体集合中移除
        return delete$.pipe(switchMap((/**
         * @return {?}
         */
        function () {
            // 执行保存
            return _this.applyChangesByIdArray(ids).pipe(tap((/**
             * @param {?} result
             * @return {?}
             */
            function (result) {
                if (result) {
                    // 从实体集合中删除
                    _this.repository.entityCollection.removeEntities((/**
                     * @param {?} value
                     * @return {?}
                     */
                    function (value) {
                        return _this.checkEntityValueExists(value, ids);
                    }));
                }
            })));
        })));
    };
    /**
     * 检测实体的主键值是否存在于数组中，如果存在返回true
     * @param array 待遍历数组
     */
    /**
     * 检测实体的主键值是否存在于数组中，如果存在返回true
     * @private
     * @param {?} entity
     * @param {?} primaryValueArray
     * @return {?}
     */
    BefDataService.prototype.checkEntityValueExists = /**
     * 检测实体的主键值是否存在于数组中，如果存在返回true
     * @private
     * @param {?} entity
     * @param {?} primaryValueArray
     * @return {?}
     */
    function (entity, primaryValueArray) {
        /** @type {?} */
        var isExistInTargetArray = false;
        for (var i = 0; i < primaryValueArray.length; i++) {
            if (entity.primaryValue === primaryValueArray[i]) {
                isExistInTargetArray = true;
                break;
            }
        }
        return isExistInTargetArray;
    };
    /**
     * 删除子级
     * @param path 路径
     * @param id   内码
     */
    /**
     * 删除子级
     * @param {?} fpath
     * @param {?} id   内码
     * @return {?}
     */
    BefDataService.prototype.removeByPath = /**
     * 删除子级
     * @param {?} fpath
     * @param {?} id   内码
     * @return {?}
     */
    function (fpath, id) {
        var _this = this;
        /** @type {?} */
        var delete$ = this.apiProxy.extendDeletByPath(fpath, id);
        // 从本地实体集合中移除
        return delete$.pipe(map((/**
         * @return {?}
         */
        function () {
            _this.repository.entityManager.removeEntityByPath(fpath, id);
            _this.repository.dataChangeHistory.addChange({ fpath: fpath, dataId: id, changeType: DataChangeType.Delete });
            return true;
        })));
    };
    /**
     * 将id对应的实体的变更提交的服务器端
     */
    /**
     * 将id对应的实体的变更提交的服务器端
     * @param {?} id
     * @return {?}
     */
    BefDataService.prototype.updateChangesById = /**
     * 将id对应的实体的变更提交的服务器端
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        /** @type {?} */
        var entity = this.repository.entityCollection.getEntityById(id);
        // 变更集为空
        if (!entity.changes || entity.changes.length === 0) {
            return of(true);
        }
        /** @type {?} */
        var changeDetail = this.repository.entityManager.buildEntityChangeDetailById(id);
        /** @type {?} */
        var update$ = this.apiProxy.update(changeDetail);
        /** @type {?} */
        var result$ = update$.pipe(tap((/**
         * @return {?}
         */
        function () {
            _this.repository.entityManager.clearEntityChangesById(id);
        })), map((/**
         * @return {?}
         */
        function () {
            return true;
        })));
        return result$;
    };
    /**
     * 提交所有变更
     */
    /**
     * 提交所有变更
     * @return {?}
     */
    BefDataService.prototype.updateAllChanges = /**
     * 提交所有变更
     * @return {?}
     */
    function () {
        var _this = this;
        // 遍历实体，提交变更
        /** @type {?} */
        var updateResults = [];
        /** @type {?} */
        var entities = this.repository.entityCollection.toArray();
        if (entities.length === 0) {
            return of(true);
        }
        entities.forEach((/**
         * @param {?} entity
         * @return {?}
         */
        function (entity) {
            /** @type {?} */
            var updateResult$ = _this.updateChangesById(entity.primaryValue);
            updateResults.push(updateResult$);
        }));
        // 串联流
        /** @type {?} */
        var result$ = zip.apply(void 0, __spread(updateResults)).pipe(map((/**
         * @return {?}
         */
        function () {
            return true;
        })));
        return result$;
    };
    /**
     * 应用变更
     */
    /**
     * 应用变更
     * @return {?}
     */
    BefDataService.prototype.applyChanges = /**
     * 应用变更
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var save$ = this.apiProxy.save();
        /** @type {?} */
        var result$ = save$.pipe(tap((/**
         * @return {?}
         */
        function () {
            _this.repository.entityManager.clearAllEntityChanges();
            _this.repository.dataChangeHistory.clear();
        })), map((/**
         * @return {?}
         */
        function () {
            return true;
        })));
        return result$;
    };
    /**
     * 应用idArray对应数据的变更
     */
    /**
     * 应用idArray对应数据的变更
     * @param {?} ids
     * @return {?}
     */
    BefDataService.prototype.applyChangesByIdArray = /**
     * 应用idArray对应数据的变更
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        var _this = this;
        /** @type {?} */
        var save$ = this.apiProxy.save();
        /** @type {?} */
        var result$ = save$.pipe(tap((/**
         * @return {?}
         */
        function () {
            _this.repository.entityManager.clearEntityChangesByIds(ids);
            _this.repository.dataChangeHistory.clearByIds(ids);
        })), map((/**
         * @return {?}
         */
        function () {
            return true;
        })));
        return result$;
    };
    /**
     * 应用id对应数据的变更
     */
    /**
     * 应用id对应数据的变更
     * @param {?} id
     * @return {?}
     */
    BefDataService.prototype.applyChangesById = /**
     * 应用id对应数据的变更
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        /** @type {?} */
        var save$ = this.apiProxy.save();
        /** @type {?} */
        var result$ = save$.pipe(tap((/**
         * @return {?}
         */
        function () {
            _this.repository.entityManager.clearEntityChangesById(id);
            _this.repository.dataChangeHistory.clearByIds([id]);
        })), map((/**
         * @return {?}
         */
        function () {
            return true;
        })));
        return result$;
    };
    /**
     * 取消变更
     */
    /**
     * 取消变更
     * @return {?}
     */
    BefDataService.prototype.cancelChanges = /**
     * 取消变更
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var cancel$ = this.apiProxy.cancel();
        /** @type {?} */
        var result$ = cancel$.pipe(tap((/**
         * @return {?}
         */
        function () {
            _this.repository.entityManager.clearAllEntityChanges();
            _this.repository.dataChangeHistory.clear();
        })), map((/**
         * @return {?}
         */
        function () {
            return true;
        })));
        return result$;
    };
    /**
     * 构造EntityFilter
     */
    /**
     * 构造EntityFilter
     * @private
     * @param {?} filter
     * @param {?} sort
     * @param {?} pageSize
     * @param {?} pageIndex
     * @return {?}
     */
    BefDataService.prototype.buildEntityFilter = /**
     * 构造EntityFilter
     * @private
     * @param {?} filter
     * @param {?} sort
     * @param {?} pageSize
     * @param {?} pageIndex
     * @return {?}
     */
    function (filter, sort, pageSize, pageIndex) {
        /** @type {?} */
        var entityFilter = {
            FilterConditions: filter,
            SortConditions: sort,
            IsUsePagination: pageSize === 0 ? false : true,
            Pagination: {
                PageIndex: pageIndex,
                PageSize: pageSize,
                PageCount: 0,
                TotalCount: 0
            }
        };
        return entityFilter;
    };
    return BefDataService;
}());
if (false) {
    /**
     * 实体仓库
     * @type {?}
     * @private
     */
    BefDataService.prototype.repository;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/framework_session_service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 框架Session服务
 */
var  /**
 * 框架Session服务
 */
FrameworkSessionService = /** @class */ (function () {
    function FrameworkSessionService() {
    }
    /**
     * 获取用户SessionId
     */
    /**
     * 获取用户SessionId
     * @return {?}
     */
    FrameworkSessionService.prototype.getUserSessionId = /**
     * 获取用户SessionId
     * @return {?}
     */
    function () {
        /** @type {?} */
        var userSessionId = window.localStorage.getItem('sessionId');
        return userSessionId;
    };
    /**
     * 获取框架菜单id
     */
    /**
     * 获取框架菜单id
     * @return {?}
     */
    FrameworkSessionService.prototype.getFuncSessionId = /**
     * 获取框架菜单id
     * @return {?}
     */
    function () {
        /** @type {?} */
        var frmMobileService = window['frmMobileService'];
        if (frmMobileService) {
            return frmMobileService.rtf.commonVariable.formToken();
        }
        return null;
    };
    /**
     * 获取当前会话id
     */
    /**
     * 获取当前会话id
     * @return {?}
     */
    FrameworkSessionService.prototype.getCurrentSessionId = /**
     * 获取当前会话id
     * @return {?}
     */
    function () {
        /** @type {?} */
        var funcSessionId = window.sessionStorage.getItem('FuncSessionId');
        /** @type {?} */
        var latestFuncSessionId = this.getFuncSessionId();
        if (latestFuncSessionId && latestFuncSessionId !== funcSessionId) {
            // 设置为空，触发后续逻辑更新最新FuncSessionId
            funcSessionId = null;
        }
        if (!funcSessionId) {
            funcSessionId = this.getFuncSessionId();
            if (funcSessionId) {
                window.sessionStorage.setItem('FuncSessionId', funcSessionId);
            }
        }
        return funcSessionId;
    };
    return FrameworkSessionService;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_proxy_extend.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 代理钩子
 * @record
 */
function IProxyExtend() { }
if (false) {
    /**
     * @param {?} body
     * @return {?}
     */
    IProxyExtend.prototype.extendBody = function (body) { };
    /**
     * @param {?} headers
     * @return {?}
     */
    IProxyExtend.prototype.extendHeaders = function (headers) { };
    /**
     * @param {?} response
     * @param {?=} ignoreChanges
     * @return {?}
     */
    IProxyExtend.prototype.onResponse = function (response, ignoreChanges) { };
    /**
     * @param {?} error
     * @param {?} selfHandError
     * @param {?} ignoreError
     * @return {?}
     */
    IProxyExtend.prototype.onError = function (error, selfHandError, ignoreError) { };
}
/**
 * Bef代理扩展类
 */
var /**
 * Bef代理扩展类
 */
BefProxyExtend = /** @class */ (function () {
    /**
     * 构造函数
     */
    function BefProxyExtend(repository) {
        this.repository = repository;
    }
    Object.defineProperty(BefProxyExtend.prototype, "injector", {
        /**
       * 注入器
       */
        get: /**
         * 注入器
         * @private
         * @return {?}
         */
        function () {
            return this.repository.getInjector();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 返回结果处理
     */
    /**
     * 返回结果处理
     * @param {?} response
     * @return {?}
     */
    BefProxyExtend.prototype.onResponse = /**
     * 返回结果处理
     * @param {?} response
     * @return {?}
     */
    function (response) {
        this.handleResponseHeaders(response.headers);
        return this.handleResponseBody(response.body);
    };
    /**
     * 处理服务器端返回的headers数据
     */
    /**
     * 处理服务器端返回的headers数据
     * @private
     * @param {?} headers
     * @return {?}
     */
    BefProxyExtend.prototype.handleResponseHeaders = /**
     * 处理服务器端返回的headers数据
     * @private
     * @param {?} headers
     * @return {?}
     */
    function (headers) {
        this.repository.sessionService.handleResponseHeaders(headers);
    };
    /**
     * 处理服务器端返回的的body数据
     */
    /**
     * 处理服务器端返回的的body数据
     * @private
     * @param {?} responseInfo
     * @return {?}
     */
    BefProxyExtend.prototype.handleResponseBody = /**
     * 处理服务器端返回的的body数据
     * @private
     * @param {?} responseInfo
     * @return {?}
     */
    function (responseInfo) {
        if (responseInfo && responseInfo.innerDataChange) {
            this.repository.entityManager.handleDataChangeDetails(responseInfo.innerDataChange);
        }
        this.repository.entityManager.clearAllEntityChanges();
        if (responseInfo && responseInfo.hasOwnProperty('returnValue')) {
            return responseInfo.returnValue;
        }
        else {
            return responseInfo;
        }
    };
    /**
     * 错误处理
     */
    /**
     * 错误处理
     * @param {?} error
     * @return {?}
     */
    BefProxyExtend.prototype.onError = /**
     * 错误处理
     * @param {?} error
     * @return {?}
     */
    function (error) {
        var e_1, _a;
        // 获取所有load组件实例，消除
        /** @type {?} */
        var loadingServices = window['DEVKIT_LOADING_SERVICE'];
        if (loadingServices && loadingServices instanceof Array && loadingServices.length > 0) {
            try {
                for (var loadingServices_1 = __values(loadingServices), loadingServices_1_1 = loadingServices_1.next(); !loadingServices_1_1.done; loadingServices_1_1 = loadingServices_1.next()) {
                    var loadingService = loadingServices_1_1.value;
                    if (typeof (loadingService.hide) === 'function') {
                        loadingService.hide();
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (loadingServices_1_1 && !loadingServices_1_1.done && (_a = loadingServices_1.return)) _a.call(loadingServices_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        // 捕获到异常，处理异常信息
        /** @type {?} */
        var exceptionService = this.injector.get(BE_ERROR_HANDLER__TOKEN, null);
        if (!!exceptionService) {
            exceptionService.show(error);
            return EMPTY;
        }
        else {
            return EMPTY;
        }
    };
    /**
     * 扩展Headers
     */
    /**
     * 扩展Headers
     * @param {?} headers
     * @return {?}
     */
    BefProxyExtend.prototype.extendHeaders = /**
     * 扩展Headers
     * @param {?} headers
     * @return {?}
     */
    function (headers) {
        var _this = this;
        /** @type {?} */
        var $getSessionId = this.repository.sessionService.getBeSessionId();
        return $getSessionId.pipe(switchMap((/**
         * @return {?}
         */
        function () {
            headers = _this.repository.sessionService.extendRequestHeaders(headers);
            return of(headers);
        })));
    };
    /**
     * 扩展Body
     */
    /**
     * 扩展Body
     * @param {?} body
     * @return {?}
     */
    BefProxyExtend.prototype.extendBody = /**
     * 扩展Body
     * @param {?} body
     * @return {?}
     */
    function (body) {
        return RequestInfoUtil.appendRequestInfoToBody(body, this.repository);
    };
    return BefProxyExtend;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    BefProxyExtend.prototype.repository;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_repository_initializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * BefRepository初始化器
 * \@summary
 * 为了抽离这部分路径，强制对外暴露了Repository的相关属性，待优化。
 */
var /**
 * BefRepository初始化器
 * \@summary
 * 为了抽离这部分路径，强制对外暴露了Repository的相关属性，待优化。
 */
BefRepositoryInitializer = /** @class */ (function () {
    /**
     * 构造函数
     */
    function BefRepositoryInitializer(repository) {
        this.repository = repository;
    }
    Object.defineProperty(BefRepositoryInitializer.prototype, "injector", {
        /**
         * 注入器
         */
        get: /**
         * 注入器
         * @private
         * @return {?}
         */
        function () {
            return this.repository.getInjector();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 初始化
     */
    /**
     * 初始化
     * @return {?}
     */
    BefRepositoryInitializer.prototype.init = /**
     * 初始化
     * @return {?}
     */
    function () {
        this.initAppContext();
        this.initEntityManager();
        this.initVariableManager();
        this.initApiProxy();
        this.initSessionService();
        this.initDataService();
    };
    /**
     * 初始化应用上下文
     */
    /**
     * 初始化应用上下文
     * @private
     * @return {?}
     */
    BefRepositoryInitializer.prototype.initAppContext = /**
     * 初始化应用上下文
     * @private
     * @return {?}
     */
    function () {
        this.repository.appContext = this.injector.get(AppContext);
    };
    /**
     * 初始化EntityManager
     */
    /**
     * 初始化EntityManager
     * @private
     * @return {?}
     */
    BefRepositoryInitializer.prototype.initEntityManager = /**
     * 初始化EntityManager
     * @private
     * @return {?}
     */
    function () {
        this.repository.entityManager = new BefEntityManager(this.repository.entityCollection);
    };
    /**
     * 初始化VariableManager
     */
    /**
     * 初始化VariableManager
     * @private
     * @return {?}
     */
    BefRepositoryInitializer.prototype.initVariableManager = /**
     * 初始化VariableManager
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var ngVariables = MetadataUtil.getPropsMetadatasByName(this.repository.constructor, VARIABLE_PROP_META);
        this.repository.variableManager = new BefVariableManager(ngVariables);
    };
    /**
     * 初始化Proxy
     */
    /**
     * 初始化Proxy
     * @private
     * @return {?}
     */
    BefRepositoryInitializer.prototype.initApiProxy = /**
     * 初始化Proxy
     * @private
     * @return {?}
     */
    function () {
        this.repository.apiProxy = this.injector.get(this.repository.apiProxyType);
        /** @type {?} */
        var apiProxyExtend = new BefProxyExtend(this.repository);
        this.repository.apiProxy.setProxyExtend(apiProxyExtend);
    };
    /**
     * 初始化SessionService
     */
    /**
     * 初始化SessionService
     * @private
     * @return {?}
     */
    BefRepositoryInitializer.prototype.initSessionService = /**
     * 初始化SessionService
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var handlingStrategyName = this.injector.get(BE_SESSION_HANDLING_STRATEGY_TOKEN, null, InjectFlags.Optional);
        handlingStrategyName = handlingStrategyName || 'SeparatedSession';
        /** @type {?} */
        var frmSessionService = this.injector.get(FrameworkSessionService);
        /** @type {?} */
        var httpClient = this.injector.get(HttpClient);
        /** @type {?} */
        var baseUrl = "" + this.repository.apiProxy.baseUrl;
        /** @type {?} */
        var sessionHandlingStrategyFactory = new BefSessionHandlingStrategyFactory();
        /** @type {?} */
        var sessionHandlingStrategy = sessionHandlingStrategyFactory.create(handlingStrategyName, frmSessionService, baseUrl, httpClient);
        this.repository.sessionService = new BefSessionService(sessionHandlingStrategy);
    };
    /**
     * 初始化DataService
     */
    /**
     * 初始化DataService
     * @private
     * @return {?}
     */
    BefRepositoryInitializer.prototype.initDataService = /**
     * 初始化DataService
     * @private
     * @return {?}
     */
    function () {
        this.repository.dataService = new BefDataService(this.repository);
    };
    return BefRepositoryInitializer;
}());
if (false) {
    /**
     * BefRepository实例
     * @type {?}
     * @private
     */
    BefRepositoryInitializer.prototype.repository;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef_repository.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Bef实体仓库实现类
 * @abstract
 * @template T
 */
var  /**
 * Bef实体仓库实现类
 * @abstract
 * @template T
 */
BefRepository = /** @class */ (function (_super) {
    __extends(BefRepository, _super);
    /**
     * 构造函数
     */
    function BefRepository(injector) {
        var _this = _super.call(this) || this;
        _this.injector = injector;
        return _this;
    }
    /**
     * 初始化
     * @summary
     * 实现类的构造函数中调用才能正确获取apiProxy
     */
    /**
     * 初始化
     * \@summary
     * 实现类的构造函数中调用才能正确获取apiProxy
     * @protected
     * @return {?}
     */
    BefRepository.prototype.init = /**
     * 初始化
     * \@summary
     * 实现类的构造函数中调用才能正确获取apiProxy
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.init.call(this);
        /** @type {?} */
        var initializer = new BefRepositoryInitializer(this);
        initializer.init();
    };
    /**
     * 获取注入器
     */
    /**
     * 获取注入器
     * @return {?}
     */
    BefRepository.prototype.getInjector = /**
     * 获取注入器
     * @return {?}
     */
    function () {
        return this.injector;
    };
    /**
     * 获取实体数组
     */
    /**
     * 获取实体数组
     * @param {?} filter
     * @param {?} sort
     * @param {?} pageSize
     * @param {?} pageIndex
     * @return {?}
     */
    BefRepository.prototype.getEntities = /**
     * 获取实体数组
     * @param {?} filter
     * @param {?} sort
     * @param {?} pageSize
     * @param {?} pageIndex
     * @return {?}
     */
    function (filter, sort, pageSize, pageIndex) {
        return this.dataService.getList(filter, sort, pageSize, pageIndex);
    };
    /**
     * 获取主键为id的实体
     * @param id 实体id
     */
    /**
     * 获取主键为id的实体
     * @param {?} id 实体id
     * @return {?}
     */
    BefRepository.prototype.getEntityById = /**
     * 获取主键为id的实体
     * @param {?} id 实体id
     * @return {?}
     */
    function (id) {
        return this.dataService.getById(id);
    };
    /**
     * 更新实体数据
     */
    /**
     * 更新实体数据
     * @param {?} id
     * @return {?}
     */
    BefRepository.prototype.updateEntityById = /**
     * 更新实体数据
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.dataService.updateById(id);
    };
    /**
     * 更新实体数据并加锁
     */
    /**
     * 更新实体数据并加锁
     * @param {?} id
     * @return {?}
     */
    BefRepository.prototype.editEntityById = /**
     * 更新实体数据并加锁
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.dataService.editById(id);
    };
    /**
     * 创建实体
     */
    /**
     * 创建实体
     * @param {?=} defaultValue
     * @return {?}
     */
    BefRepository.prototype.createEntity = /**
     * 创建实体
     * @param {?=} defaultValue
     * @return {?}
     */
    function (defaultValue) {
        return this.dataService.create(defaultValue);
    };
    /**
     * 追加实体
     */
    /**
     * 追加实体
     * @param {?=} defaultValue
     * @return {?}
     */
    BefRepository.prototype.appendEntity = /**
     * 追加实体
     * @param {?=} defaultValue
     * @return {?}
     */
    function (defaultValue) {
        return this.dataService.append(defaultValue);
    };
    /**
     * 创建子实体，并追加
     * @param fpath 父路径，格式形如：/1/edus（从表）或/1/edus/2/grades（从从表）
     */
    /**
     * 创建子实体，并追加
     * @param {?} fpath 父路径，格式形如：/1/edus（从表）或/1/edus/2/grades（从从表）
     * @return {?}
     */
    BefRepository.prototype.appendEntityByPath = /**
     * 创建子实体，并追加
     * @param {?} fpath 父路径，格式形如：/1/edus（从表）或/1/edus/2/grades（从从表）
     * @return {?}
     */
    function (fpath) {
        return this.dataService.appendByPath(fpath);
    };
    /**
     * 根据id删除实体
     */
    /**
     * 根据id删除实体
     * @param {?} id
     * @param {?=} ifSave
     * @return {?}
     */
    BefRepository.prototype.removeEntityById = /**
     * 根据id删除实体
     * @param {?} id
     * @param {?=} ifSave
     * @return {?}
     */
    function (id, ifSave) {
        return this.dataService.removeById(id, ifSave);
    };
    /**
     * 根据ids批量删除实体
     */
    /**
     * 根据ids批量删除实体
     * @param {?} ids
     * @return {?}
     */
    BefRepository.prototype.removeEntitiesByIds = /**
     * 根据ids批量删除实体
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        return this.dataService.removeByIds(ids);
    };
    /**
     * 根据id删除实体并执行保存
     */
    /**
     * 根据id删除实体并执行保存
     * @param {?} id
     * @return {?}
     */
    BefRepository.prototype.removeEntityAndSaveById = /**
     * 根据id删除实体并执行保存
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.dataService.removeAndSaveById(id);
    };
    /**
     * 删除子级
     */
    /**
     * 删除子级
     * @param {?} fpath
     * @param {?} id
     * @return {?}
     */
    BefRepository.prototype.removeEntityByPath = /**
     * 删除子级
     * @param {?} fpath
     * @param {?} id
     * @return {?}
     */
    function (fpath, id) {
        return this.dataService.removeByPath(fpath, id);
    };
    /**
     * 保存主键为id的实体
     */
    /**
     * 保存主键为id的实体
     * @param {?} id
     * @return {?}
     */
    BefRepository.prototype.saveEntityById = /**
     * 保存主键为id的实体
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.dataService.applyChangesById(id);
    };
    /**
     * 批量保存
     */
    /**
     * 批量保存
     * @return {?}
     */
    BefRepository.prototype.saveEntities = /**
     * 批量保存
     * @return {?}
     */
    function () {
        return this.dataService.applyChanges();
    };
    /**
     * 取消实体变更
     */
    /**
     * 取消实体变更
     * @return {?}
     */
    BefRepository.prototype.cancelEntityChanges = /**
     * 取消实体变更
     * @return {?}
     */
    function () {
        return this.dataService.cancelChanges();
    };
    /**
     * 清空Repositoy内的数据和变量
     */
    /**
     * 清空Repositoy内的数据和变量
     * @return {?}
     */
    BefRepository.prototype.reset = /**
     * 清空Repositoy内的数据和变量
     * @return {?}
     */
    function () {
        this.entityManager.reset();
        this.variableManager.reset();
        this.sessionService.clearBeSessionId();
    };
    return BefRepository;
}(Repository));
if (false) {
    /**
     * 名称
     * @type {?}
     */
    BefRepository.prototype.name;
    /**
     * Bef代理
     * @type {?}
     */
    BefRepository.prototype.apiProxyType;
    /**
     * 应用上下文
     * @type {?}
     */
    BefRepository.prototype.appContext;
    /**
     * 实体管理器
     * @type {?}
     */
    BefRepository.prototype.entityManager;
    /**
     * 变量管理器
     * @type {?}
     */
    BefRepository.prototype.variableManager;
    /**
     * API代理
     * @type {?}
     */
    BefRepository.prototype.apiProxy;
    /**
     * Bef会话管理
     * @type {?}
     */
    BefRepository.prototype.sessionService;
    /**
     * Bef数据操作
     * @type {?}
     */
    BefRepository.prototype.dataService;
    /**
     * @type {?}
     * @protected
     */
    BefRepository.prototype.injector;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/bef-lookup-data.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Bef帮助取数服务
 */
var  /**
 * Bef帮助取数服务
 */
BefLookupDataService = /** @class */ (function () {
    /**
     * 构造函数
     */
    function BefLookupDataService(viewModelContext) {
        this.viewModelContext = viewModelContext;
        this.befRepository = (/** @type {?} */ (this.viewModelContext.repository));
    }
    /**
     * 帮助取数
     */
    /**
     * 帮助取数
     * @param {?} helpMetadataId
     * @param {?=} queryParam
     * @return {?}
     */
    BefLookupDataService.prototype.getData = /**
     * 帮助取数
     * @param {?} helpMetadataId
     * @param {?=} queryParam
     * @return {?}
     */
    function (helpMetadataId, queryParam) {
        /** @type {?} */
        var tableName = helpMetadataId.split('.')[0];
        /** @type {?} */
        var labelId = helpMetadataId.split('.')[1];
        queryParam = queryParam || {};
        return this.extendGetHelpData(labelId, tableName, queryParam);
    };
    /**
     * 扩展的帮助取数
     */
    /**
     * 扩展的帮助取数
     * @private
     * @param {?} labelId
     * @param {?} tableName
     * @param {?} queryParam
     * @return {?}
     */
    BefLookupDataService.prototype.extendGetHelpData = /**
     * 扩展的帮助取数
     * @private
     * @param {?} labelId
     * @param {?} tableName
     * @param {?} queryParam
     * @return {?}
     */
    function (labelId, tableName, queryParam) {
        /** @type {?} */
        var url = this.befRepository.apiProxy.baseUrl + "/extension/elementhelps";
        /** @type {?} */
        var requestInfo = RequestInfoUtil.buildRequestInfo(this.befRepository);
        /** @type {?} */
        var body = {
            labelId: labelId,
            nodeCode: tableName,
            queryParam: queryParam,
            requestInfo: requestInfo
        };
        /** @type {?} */
        var requestConfig = {
            body: body
        };
        /** @type {?} */
        var result$ = this.befRepository.apiProxy.request(HttpMethods.PUT, url, requestConfig);
        return result$.pipe(map((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            return result;
        })));
    };
    return BefLookupDataService;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    BefLookupDataService.prototype.viewModelContext;
    /**
     * @type {?}
     * @private
     */
    BefLookupDataService.prototype.befRepository;
    /** @type {?} */
    BefLookupDataService.prototype.context;
}

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: farris-mobile-bef.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { BE_ERROR_HANDLER__TOKEN, BE_SERVER_URI_TOKEN, BE_SESSION_HANDLING_STRATEGY_TOKEN, BefChangeBuilder, BefChangeHandler, BefChangeUtil, BefDataPathUtil, BefEnvUtil, BefHttpUtil, BefLookupDataService, BefProxy, BefProxyUtil, BefRepository, BefRepositoryUtil, BefSeparatedSessionHandlingStrategy, BefSessionHandlingStrategy, BefSessionHandlingStrategyFactory, BefSessionService, BefUnifiedSessionHandlingStrategy, ChangeDetailType, EntityUtil, FrameworkSessionService, RequestInfoUtil, ResponseInfoUtil, SessionStorageBeSessionStorageStrategy, VARIABLE_PROP_META, VariablePropMeta };
//# sourceMappingURL=farris-mobile-bef.js.map
