/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ListViewComponent } from './list-view.component';
import { Pipe } from '@angular/core';
var SelectedListFormatPipe = /** @class */ (function () {
    function SelectedListFormatPipe(listViewRef) {
        this.listViewRef = listViewRef;
    }
    /**
     * @param {?} data
     * @param {?} formatter
     * @return {?}
     */
    SelectedListFormatPipe.prototype.transform = /**
     * @param {?} data
     * @param {?} formatter
     * @return {?}
     */
    function (data, formatter) {
        if (data) {
            /** @type {?} */
            var idField_1 = this.listViewRef.listidName;
            if (formatter) {
                data = data.map((/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    return { id: d[idField_1], text: formatter(d) };
                }));
            }
            else {
                data = data.map((/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    /** @type {?} */
                    var txt = [];
                    /** @type {?} */
                    var keys = Object.keys(d);
                    keys.forEach((/**
                     * @param {?} k
                     * @return {?}
                     */
                    function (k) {
                        txt.push(d[k]);
                    }));
                    return { id: d[idField_1], text: txt.join(', ') };
                }));
            }
            return data;
        }
        return [];
    };
    SelectedListFormatPipe.decorators = [
        { type: Pipe, args: [{ name: 'formatItems' },] }
    ];
    /** @nocollapse */
    SelectedListFormatPipe.ctorParameters = function () { return [
        { type: ListViewComponent }
    ]; };
    return SelectedListFormatPipe;
}());
export { SelectedListFormatPipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SelectedListFormatPipe.prototype.listViewRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0ZWQtbGlzdGl0ZW0tZm9ybWF0dGVyLnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWxpc3Qtdmlldy8iLCJzb3VyY2VzIjpbImxpYi9zZWxlY3RlZC1saXN0aXRlbS1mb3JtYXR0ZXIucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDMUQsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFFcEQ7SUFHSSxnQ0FBcUIsV0FBOEI7UUFBOUIsZ0JBQVcsR0FBWCxXQUFXLENBQW1CO0lBQUksQ0FBQzs7Ozs7O0lBRXhELDBDQUFTOzs7OztJQUFULFVBQVUsSUFBUyxFQUFFLFNBQWM7UUFDL0IsSUFBSSxJQUFJLEVBQUU7O2dCQUVBLFNBQU8sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVU7WUFFM0MsSUFBSSxTQUFTLEVBQUU7Z0JBQ1gsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHOzs7O2dCQUFFLFVBQUEsQ0FBQztvQkFDZCxPQUFPLEVBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFPLENBQUMsRUFBRSxJQUFJLEVBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7Z0JBQ2xELENBQUMsRUFBQyxDQUFDO2FBQ047aUJBQU87Z0JBQ0osSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHOzs7O2dCQUFDLFVBQUMsQ0FBTTs7d0JBQ2IsR0FBRyxHQUFHLEVBQUU7O3dCQUNSLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztvQkFDM0IsSUFBSSxDQUFDLE9BQU87Ozs7b0JBQUMsVUFBQSxDQUFDO3dCQUNWLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ25CLENBQUMsRUFBQyxDQUFDO29CQUNILE9BQU8sRUFBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFNBQU8sQ0FBQyxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7Z0JBQ25ELENBQUMsRUFBQyxDQUFDO2FBQ047WUFFRCxPQUFPLElBQUksQ0FBQztTQUNmO1FBRUQsT0FBTyxFQUFFLENBQUM7SUFDZCxDQUFDOztnQkE3QkosSUFBSSxTQUFDLEVBQUMsSUFBSSxFQUFFLGFBQWEsRUFBQzs7OztnQkFIbEIsaUJBQWlCOztJQWlDMUIsNkJBQUM7Q0FBQSxBQTlCRCxJQThCQztTQTdCWSxzQkFBc0I7Ozs7OztJQUVsQiw2Q0FBc0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMaXN0Vmlld0NvbXBvbmVudCB9IGZyb20gJy4vbGlzdC12aWV3LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBQaXBlKHtuYW1lOiAnZm9ybWF0SXRlbXMnfSlcclxuZXhwb3J0IGNsYXNzIFNlbGVjdGVkTGlzdEZvcm1hdFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvciggcHJpdmF0ZSBsaXN0Vmlld1JlZjogTGlzdFZpZXdDb21wb25lbnQgKSB7fVxyXG5cclxuICAgIHRyYW5zZm9ybShkYXRhOiBhbnksIGZvcm1hdHRlcjogYW55KTogYW55IHtcclxuICAgICAgICBpZiAoZGF0YSkge1xyXG5cclxuICAgICAgICAgICAgY29uc3QgaWRGaWVsZCA9IHRoaXMubGlzdFZpZXdSZWYubGlzdGlkTmFtZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChmb3JtYXR0ZXIpIHtcclxuICAgICAgICAgICAgICAgIGRhdGEgPSBkYXRhLm1hcCggZCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtpZDogZFtpZEZpZWxkXSwgdGV4dDogIGZvcm1hdHRlcihkKSB9O1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSAge1xyXG4gICAgICAgICAgICAgICAgZGF0YSA9IGRhdGEubWFwKChkOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0eHQgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZCk7XHJcbiAgICAgICAgICAgICAgICAgICAga2V5cy5mb3JFYWNoKGsgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eHQucHVzaChkW2tdKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge2lkOiBkW2lkRmllbGRdLCB0ZXh0OiB0eHQuam9pbignLCAnKSB9O1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==