import { __extends } from 'tslib';
import { Subject } from 'rxjs';
import { throttleTime, debounceTime } from 'rxjs/operators';
import ResizeObserver from 'resize-observer-polyfill';
import { LocaleService, LocaleModule } from '@farris/ui-locale';
import { Directive, Output, EventEmitter, ElementRef, HostListener, Component, Input, ViewChild, Renderer2, ChangeDetectorRef, HostBinding, NgZone, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FDropdownDirectiveTypeModule } from '@farris/ui-dropdown';
import { FarrisTooltipModule } from '@farris/ui-tooltip';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ResponseToolbarBasic = /** @class */ (function () {
    function ResponseToolbarBasic(item) {
        var _this = this;
        /** @type {?} */
        var defaultData = {
            id: '',
            class: 'btn-secondary',
            icon: '',
            groupId: '',
            order: -1,
            asDropDownTop: false,
            text: '',
            isDP: false,
            disabled: false,
            visible: true,
            responsed: false,
            width: 0,
            tipsEnable: false,
            tipsText: ''
        };
        Object.keys(defaultData).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        function (propName) {
            _this[propName] = item.hasOwnProperty(propName)
                ? item[propName]
                : defaultData[propName];
        }));
    }
    // 设置宽度
    // 设置宽度
    /**
     * @param {?} value
     * @return {?}
     */
    ResponseToolbarBasic.prototype.setWidth = 
    // 设置宽度
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.width = parseInt(value, 10);
    };
    // 获取宽度
    // 获取宽度
    /**
     * @return {?}
     */
    ResponseToolbarBasic.prototype.getWidth = 
    // 获取宽度
    /**
     * @return {?}
     */
    function () {
        if (this.visible) {
            return this.width;
        }
        return false;
    };
    return ResponseToolbarBasic;
}());
var ResponseToolbarItem = /** @class */ (function (_super) {
    __extends(ResponseToolbarItem, _super);
    function ResponseToolbarItem(item) {
        var _this = _super.call(this, item) || this;
        /** @type {?} */
        var defaultData = {
            text: '',
            event: null,
            isDP: false
        };
        Object.keys(defaultData).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        function (propName) {
            _this[propName] = item.hasOwnProperty(propName)
                ? item[propName]
                : defaultData[propName];
        }));
        return _this;
    }
    return ResponseToolbarItem;
}(ResponseToolbarBasic));
var ResponseToolbarDropDown = /** @class */ (function (_super) {
    __extends(ResponseToolbarDropDown, _super);
    function ResponseToolbarDropDown(item) {
        var _this = _super.call(this, item) || this;
        /** @type {?} */
        var defaultData = {
            topItem: null,
            isDP: true,
            children: [],
            class: 'btn-secondary',
            dropdownCls: '',
            menuCls: '',
            placement: '',
            split: false
        };
        Object.keys(defaultData).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        function (propName) {
            _this[propName] = item.hasOwnProperty(propName)
                ? item[propName]
                : defaultData[propName];
        }));
        return _this;
    }
    /**
     * 是否有子项
     */
    /**
     * 是否有子项
     * @return {?}
     */
    ResponseToolbarDropDown.prototype.hasChild = /**
     * 是否有子项
     * @return {?}
     */
    function () {
        return this.children.length > 0 ? true : false;
    };
    /**
     * 追加子项,默认从开头插入
     * @param item
     */
    /**
     * 追加子项,默认从开头插入
     * @param {?} item
     * @return {?}
     */
    ResponseToolbarDropDown.prototype.addChild = /**
     * 追加子项,默认从开头插入
     * @param {?} item
     * @return {?}
     */
    function (item) {
        this.children.unshift(item);
    };
    // 从头部开始删除子元素
    // 从头部开始删除子元素
    /**
     * @return {?}
     */
    ResponseToolbarDropDown.prototype.removeChild = 
    // 从头部开始删除子元素
    /**
     * @return {?}
     */
    function () {
        this.children.shift();
    };
    return ResponseToolbarDropDown;
}(ResponseToolbarBasic));
var ResponseToolbarGroup = /** @class */ (function () {
    function ResponseToolbarGroup(_id, _groupName) {
        this.presetId = []; // 记录元素的Id
        // 记录元素的Id
        this.responsedIndex = []; // 记录转变为下拉时元素的位置
        this.id = _id;
        this.name = _groupName;
        this.width = 0;
    }
    // 设置宽度
    // 设置宽度
    /**
     * @param {?} value
     * @return {?}
     */
    ResponseToolbarGroup.prototype.setWidth = 
    // 设置宽度
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.width = parseInt(value + '', 10);
    };
    // 获取宽度
    // 获取宽度
    /**
     * @return {?}
     */
    ResponseToolbarGroup.prototype.getWidth = 
    // 获取宽度
    /**
     * @return {?}
     */
    function () {
        return this.width;
    };
    // 更新presetIndex
    // 更新presetIndex
    /**
     * @param {?} value
     * @return {?}
     */
    ResponseToolbarGroup.prototype.setPreset = 
    // 更新presetIndex
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (Array.isArray(value)) {
            this.presetId = this.presetId.concat(value);
        }
        else {
            this.presetId.push(value);
        }
    };
    // 清除preset
    // 清除preset
    /**
     * @return {?}
     */
    ResponseToolbarGroup.prototype.delPreset = 
    // 清除preset
    /**
     * @return {?}
     */
    function () {
        this.presetId = [];
    };
    // 删除
    // 删除
    /**
     * @param {?} index
     * @return {?}
     */
    ResponseToolbarGroup.prototype.removeResponsed = 
    // 删除
    /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.responsedIndex.splice(index, 1);
    };
    // 更新responsedIndex
    // 更新responsedIndex
    /**
     * @param {?} value
     * @return {?}
     */
    ResponseToolbarGroup.prototype.setResponsed = 
    // 更新responsedIndex
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (Array.isArray(value)) {
            this.responsedIndex = this.responsedIndex.concat(value);
        }
        else {
            this.responsedIndex.push(value);
        }
    };
    // 是否已经开始处理响应式
    // 是否已经开始处理响应式
    /**
     * @return {?}
     */
    ResponseToolbarGroup.prototype.isResponsing = 
    // 是否已经开始处理响应式
    /**
     * @return {?}
     */
    function () {
        return this.responsedIndex.length > 0;
    };
    // 是否已经处理完响应式
    // 是否已经处理完响应式
    /**
     * @return {?}
     */
    ResponseToolbarGroup.prototype.isResponsed = 
    // 是否已经处理完响应式
    /**
     * @return {?}
     */
    function () {
        return this.presetId.length === this.responsedIndex.length;
    };
    return ResponseToolbarGroup;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ResizedEvent = /** @class */ (function () {
    function ResizedEvent(element, newWidth, newHeight, oldWidth, oldHeight) {
        this.element = element;
        this.newWidth = newWidth;
        this.newHeight = newHeight;
        this.oldWidth = oldWidth;
        this.oldHeight = oldHeight;
    }
    return ResizedEvent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FResizedDirective = /** @class */ (function () {
    function FResizedDirective(element) {
        this.element = element;
        this.resizedEvent = new EventEmitter();
        this.resizeSubject = new Subject();
        this.resizeObservable = this.resizeSubject
            .asObservable()
            .pipe(throttleTime(200));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    FResizedDirective.prototype.onResize = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.resizeSubject.next(event);
    };
    /**
     * @return {?}
     */
    FResizedDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.resizeObservable.subscribe((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return _this.doWithResize(); }));
    };
    /**
     * @return {?}
     */
    FResizedDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.doWithResize();
    };
    /**
     * @private
     * @return {?}
     */
    FResizedDirective.prototype.doWithResize = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var newWidth = this.element.nativeElement.clientWidth;
        /** @type {?} */
        var newHeight = this.element.nativeElement.clientHeight;
        if (newWidth === this.oldWidth && newHeight === this.oldHeight) {
            return;
        }
        this.resizedEvent.next(new ResizedEvent(this.element, newWidth, newHeight, this.oldWidth, this.oldHeight));
        this.oldWidth = newWidth;
        this.oldHeight = newHeight;
    };
    FResizedDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[fResized]'
                },] }
    ];
    /** @nocollapse */
    FResizedDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    FResizedDirective.propDecorators = {
        resizedEvent: [{ type: Output }],
        onResize: [{ type: HostListener, args: ['window:resize', ['$event'],] }]
    };
    return FResizedDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ResponseToolbarComponent = /** @class */ (function () {
    function ResponseToolbarComponent(el, render, cd, localeService) {
        this.render = render;
        this.cd = cd;
        this.localeService = localeService;
        this.frtCls = true;
        this.prCls = true;
        // 传递点击事件
        this.rtClickEvent = new EventEmitter();
        // 辅助计算宽度数据
        this.auxiliaryDatas = [];
        // 控制父元素滚动的样式
        //  private _dpState = false;
        //
        this.ro = null;
        // 记录容器宽度
        this.containerWidthRecord = 0;
        // 记录变化
        this.needResponseChanges = 0;
        this.referEl = null;
        this.dpState = [false];
        // 用来内部记录
        this._auxiliary = -1;
        this.resizeGroups = [];
        // 记录格式化后的数据
        this.toolbarDatas = [];
        this.distanceThreshold = 20;
        this.isUpdateTBView = false;
        this._stateDatas = new Subject();
        this._btnVisibleDatas = new Subject();
        this.clickThrottleTime = 350;
        this.clickItems = new Subject();
        this.rtSize = "";
        /*强制方向，默认为空值，可以有top、bottom，朝上、朝下。
             * 使用场景：工具栏内部的下拉，需要朝上或者需要朝下展开，统一控制
             */
        this.popDirection = "";
        // right按钮靠右 left按钮靠左
        this.btnAlign = "right";
        this.ngZone = null;
        this._selfEl = el.nativeElement;
        if (el.nativeElement.parentElement) {
            this.referEl = el.nativeElement.parentElement;
        }
    }
    Object.defineProperty(ResponseToolbarComponent.prototype, "groups", {
        // 内部记录格式化后的初始数据-------------------------暂时不用
        // _toolbarDatas: Array<ResponseToolbarItem | ResponseToolbarDropDown> = [];
        set: 
        // 内部记录格式化后的初始数据-------------------------暂时不用
        // _toolbarDatas: Array<ResponseToolbarItem | ResponseToolbarDropDown> = [];
        /**
         * @param {?} values
         * @return {?}
         */
        function (values) {
            var _this = this;
            if (values) {
                this.resizeGroups = [];
                values.forEach((/**
                 * @param {?} group
                 * @return {?}
                 */
                function (group) {
                    _this.resizeGroups.push(new ResponseToolbarGroup(group.id, group.name));
                    // 还没有计算预置排序
                }));
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ResponseToolbarComponent.prototype, "datas", {
        set: /**
         * @param {?} values
         * @return {?}
         */
        function (values) {
            if (values) {
                this.toolbarDatas = this._formatData(values);
                this.needResponseChanges++;
                // 处理分组数据
                this._reOrganizeResizeGroups();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ResponseToolbarComponent.prototype, "btnState", {
        // 按钮的禁用状态
        set: 
        // 按钮的禁用状态
        /**
         * @param {?} values
         * @return {?}
         */
        function (values) {
            this._stateDatas = values;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ResponseToolbarComponent.prototype, "btnVisible", {
        // 按钮的查看状态
        set: 
        // 按钮的查看状态
        /**
         * @param {?} values
         * @return {?}
         */
        function (values) {
            this._btnVisibleDatas = values;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ResponseToolbarComponent.prototype, "buttonSize", {
        get: /**
         * @return {?}
         */
        function () {
            return this.rtSize;
        },
        /*尺寸：有sm,lg,空值，默认是空值 */
        set: /*尺寸：有sm,lg,空值，默认是空值 */
        /**
         * @param {?} btnSize
         * @return {?}
         */
        function (btnSize) {
            if (btnSize != this.rtSize) {
                this.rtSize &&
                    this.render.removeClass(this._selfEl, "f-response-toolbar-" + this.rtSize);
                this.rtSize = btnSize;
                this.rtSize &&
                    this.render.addClass(this._selfEl, "f-response-toolbar-" + this.rtSize);
            }
        },
        enumerable: true,
        configurable: true
    });
    // 因为旧模板带有这个方法
    // 因为旧模板带有这个方法
    /**
     * @return {?}
     */
    ResponseToolbarComponent.prototype.ngAfterViewInit = 
    // 因为旧模板带有这个方法
    /**
     * @return {?}
     */
    function () { };
    // 因为旧模板带有这个方法
    // 因为旧模板带有这个方法
    /**
     * @return {?}
     */
    ResponseToolbarComponent.prototype.ngDoCheck = 
    // 因为旧模板带有这个方法
    /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    ResponseToolbarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // 去掉overflow之后
        this.render.addClass(this.auxiliaryContainerEl.nativeElement, "response-toolbar-hidden-element");
        // 按钮的禁用状态
        this._stateDatas.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.changeState(data);
        }));
        // 按钮的可见状态
        this._btnVisibleDatas.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.changeVisible(data);
        }));
        this.observerElement();
        //处理表单加载后的按钮变化
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var selfObj = _this;
            setTimeout((/**
             * @return {?}
             */
            function () {
                selfObj.responseResize();
            }), 0);
        }));
        // 拦截点击事件只传递第一次点击事件的处理操作交给parent来处理
        this.clickSubscription = this.clickItems
            .pipe(debounceTime(this.clickThrottleTime))
            .subscribe((/**
         * @param {?} eventDatas
         * @return {?}
         */
        function (eventDatas) {
            _this.rtClickEvent.emit(eventDatas);
        }));
        if (this.popDirection === 'default') {
            this.popDirection = '';
        }
    };
    /**
     * @return {?}
     */
    ResponseToolbarComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.ro) {
            this.ro.unobserve(this.resizedContainerEl.nativeElement);
            this.ro = null;
        }
        if (this.clickSubscription) {
            this.clickSubscription.unsubscribe();
        }
    };
    // 这个方法有性能问题，待后期处理 TODO
    // 这个方法有性能问题，待后期处理 TODO
    /**
     * @return {?}
     */
    ResponseToolbarComponent.prototype.ngAfterViewChecked = 
    // 这个方法有性能问题，待后期处理 TODO
    /**
     * @return {?}
     */
    function () {
        if (this.needResponseChanges > 0) {
            this.needResponseChanges--;
            this.responseResize();
        }
        else if (this.auxiliaryDatas.length > 0) {
            this._calculate(true, this.auxiliaryContainerEl.nativeElement.offsetWidth);
        }
    };
    // 因为旧模板带有这个方法
    // 因为旧模板带有这个方法
    /**
     * @param {?} event
     * @return {?}
     */
    ResponseToolbarComponent.prototype.onResize = 
    // 因为旧模板带有这个方法
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) { };
    /**
     * 兼容旧模板旧方法
     * 在不存在ngZone的情况下，创建ngZone,然后绑定事件
     */
    /**
     * 兼容旧模板旧方法
     * 在不存在ngZone的情况下，创建ngZone,然后绑定事件
     * @private
     * @return {?}
     */
    ResponseToolbarComponent.prototype.observerElement = /**
     * 兼容旧模板旧方法
     * 在不存在ngZone的情况下，创建ngZone,然后绑定事件
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.ngZone) {
            /** @type {?} */
            var moduleInjector = this.cd["_view"].root.ngModule.injector;
            this.ngZone = moduleInjector.get(NgZone, null);
        }
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.ro = new ResizeObserver((/**
             * @param {?} entries
             * @param {?} observer
             * @return {?}
             */
            function (entries, observer) {
                /** @type {?} */
                var tempWidth = entries[0].contentRect.width;
                if (Math.abs(tempWidth - _this.containerWidthRecord) >
                    _this.distanceThreshold) {
                    _this.responseResize();
                    _this.containerWidthRecord = tempWidth;
                }
            }));
            _this.ro.observe(_this.resizedContainerEl.nativeElement);
        }));
    };
    /**
     * 强制转换方向
     * @param selfDefinePL
     * @param defaultPL
     */
    /**
     * 强制转换方向
     * @param {?} selfDefinePL
     * @param {?} defaultPL
     * @return {?}
     */
    ResponseToolbarComponent.prototype.getPlacement = /**
     * 强制转换方向
     * @param {?} selfDefinePL
     * @param {?} defaultPL
     * @return {?}
     */
    function (selfDefinePL, defaultPL) {
        /** @type {?} */
        var oldDirection = selfDefinePL ? selfDefinePL : defaultPL;
        if (!this.popDirection) {
            return oldDirection;
        }
        /** @type {?} */
        var plRelation = { bottom: "top", top: "bottom" };
        oldDirection = oldDirection == "left" ? "left-bottom" : oldDirection;
        oldDirection = oldDirection == "right" ? "right-bottom" : oldDirection;
        /** @type {?} */
        var newDirection = oldDirection.replace(plRelation[this.popDirection], this.popDirection);
        return newDirection;
    };
    /**
     * 调用此方法的场景
     * 1、界面拖拽自动触发
     * 2、显示调用
     */
    /**
     * 调用此方法的场景
     * 1、界面拖拽自动触发
     * 2、显示调用
     * @return {?}
     */
    ResponseToolbarComponent.prototype.responseResize = /**
     * 调用此方法的场景
     * 1、界面拖拽自动触发
     * 2、显示调用
     * @return {?}
     */
    function () {
        /** @type {?} */
        var _distance = this._getDistance();
        if (_distance > 0) {
            // 如果分组都已经处理完,再出现滚动条不管
            /** @type {?} */
            var _tempIndex = this._getFirstUnResponsedIndex();
            if (_tempIndex < 0) {
                return;
            }
            // 所有第一层下拉都収折
            this.dpState = [false];
            var _loop_1 = function (k) {
                /** @type {?} */
                var _tempGroup = this_1.resizeGroups[k];
                this_1._auxiliary = k;
                if (_tempGroup.isResponsing()) {
                    this_1._calculate();
                }
                else {
                    // 如果还未开始处理响应式
                    /** @type {?} */
                    var _tempDP_1 = new ResponseToolbarDropDown({
                        text: _tempGroup.name,
                        id: _tempGroup.id,
                        placement: this_1.popDirection
                            ? this_1.popDirection + "-left"
                            : "bottom-left",
                        width: _tempGroup.getWidth()
                    });
                    // 已经处理过宽度
                    if (_tempDP_1.getWidth()) {
                        this_1.auxiliaryDatas = [_tempDP_1];
                        this_1._calculate(true, _tempDP_1.getWidth());
                    }
                    else {
                        // 更新辅助数据
                        /** @type {?} */
                        var auxiliaryIndex = this_1.auxiliaryDatas.findIndex((/**
                         * @param {?} item
                         * @return {?}
                         */
                        function (item) {
                            return item.id == _tempDP_1.id;
                        }));
                        if (auxiliaryIndex == -1) {
                            this_1.auxiliaryDatas.push(_tempDP_1);
                        }
                        if (this_1.cd && !((/** @type {?} */ (this_1.cd))).destroyed) {
                            this_1.cd.detectChanges();
                        }
                    }
                }
            };
            var this_1 = this;
            for (var k = _tempIndex; k < this.resizeGroups.length; k++) {
                _loop_1(k);
            }
        }
        else {
            // 寻找最后一个处理响应式的元素
            /** @type {?} */
            var _tempIndex = this._getLastResponseIndex();
            if (_tempIndex < 0) {
                return;
            }
            // 临时存储数据
            /** @type {?} */
            var _tempToolbarDatas = [].concat(this.toolbarDatas);
            // 如果已经开始处理响应式
            for (var k = _tempIndex; k >= 0; k--) {
                /** @type {?} */
                var result = this._restitute(_tempToolbarDatas, k);
                _tempToolbarDatas = [].concat(result["data"]);
                if (!result["continueTo"]) {
                    break;
                }
            }
            // 更新数据
            this.toolbarDatas = [].concat(_tempToolbarDatas);
            // 所有第一层下拉都収折
            this.dpState = [false];
            if (this.cd && !((/** @type {?} */ (this.cd))).destroyed) {
                this.cd.detectChanges();
            }
        }
    };
    // 下拉的展开收起状态
    // 下拉的展开收起状态
    /**
     * @param {?} state
     * @param {?} id
     * @return {?}
     */
    ResponseToolbarComponent.prototype.dpSectionState = 
    // 下拉的展开收起状态
    /**
     * @param {?} state
     * @param {?} id
     * @return {?}
     */
    function (state, id) {
        if (state) {
            // 展开状态下
            /** @type {?} */
            var dropdowns = this.resizedContentEl.nativeElement.querySelectorAll("[fDropdown]");
            if (dropdowns && dropdowns.length > 1) {
                for (var k = 0; k < dropdowns.length; k++) {
                    if (dropdowns[k].className.indexOf("show") &&
                        dropdowns[k].id != id) {
                        // dropdowns[k].dispatchEvent(new Event('selfClose'));
                        this.compatibleDispatchEvent(dropdowns[k], "selfClose");
                    }
                }
            }
        }
    };
    /**
     * @private
     * @param {?} eventEl
     * @param {?} eventName
     * @return {?}
     */
    ResponseToolbarComponent.prototype.compatibleDispatchEvent = /**
     * @private
     * @param {?} eventEl
     * @param {?} eventName
     * @return {?}
     */
    function (eventEl, eventName) {
        /** @type {?} */
        var event;
        if (typeof Event === "function") {
            event = new Event(eventName);
        }
        else {
            event = document.createEvent("Event");
            event.initEvent(eventName, false, false);
        }
        eventEl.dispatchEvent(event);
    };
    // 修改启用禁用状态
    // 修改启用禁用状态
    /**
     * @param {?} values
     * @return {?}
     */
    ResponseToolbarComponent.prototype.changeState = 
    // 修改启用禁用状态
    /**
     * @param {?} values
     * @return {?}
     */
    function (values) {
        var _this = this;
        /** @type {?} */
        var idArray = Object.keys(values);
        idArray.forEach((/**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            /** @type {?} */
            var state = values[id];
            /** @type {?} */
            var item = _this._findItemByID(id, _this.toolbarDatas);
            if (item) {
                item["disabled"] = state;
            }
        }));
        if (this.cd && !((/** @type {?} */ (this.cd))).destroyed) {
            this.cd.detectChanges();
        }
    };
    /**
     * 修改显示状态
     * 如果是下拉按钮
     *   判断下面的子是否都隐藏
     * @param values
     */
    /**
     * 修改显示状态
     * 如果是下拉按钮
     *   判断下面的子是否都隐藏
     * @param {?} values
     * @return {?}
     */
    ResponseToolbarComponent.prototype.changeVisible = /**
     * 修改显示状态
     * 如果是下拉按钮
     *   判断下面的子是否都隐藏
     * @param {?} values
     * @return {?}
     */
    function (values) {
        var _this = this;
        /** @type {?} */
        var idArray = Object.keys(values);
        idArray.forEach((/**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            /** @type {?} */
            var visible = values[id];
            /** @type {?} */
            var item = _this._findItemByID(id, _this.toolbarDatas);
            if (item) {
                item["visible"] = visible;
            }
        }));
        // 遍历循环,更新数据
        this.toolbarDatas.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            // 如果是下拉
            if (item["isDP"]) {
                _this._checkDropdownVisible(values, item);
            }
        }));
        this.needResponseChanges++;
        // 更新
        //this.cd.markForCheck();
        if (this.cd && !((/** @type {?} */ (this.cd))).destroyed) {
            this.cd.detectChanges();
        }
    };
    /**
     * 如果是下拉按钮
     *   判断下面的子是否都隐藏
     *       A. 如果子都隐藏，那么整个下拉都被隐藏；
     *       B. 如果存在子没有隐藏，而且下拉没有被预置隐藏，下拉按钮显示
     * @param outsideVisibleArrays 从组件外传入的可见状态对象
     * @param dropdownItem 下拉元素
     */
    /**
     * 如果是下拉按钮
     *   判断下面的子是否都隐藏
     *       A. 如果子都隐藏，那么整个下拉都被隐藏；
     *       B. 如果存在子没有隐藏，而且下拉没有被预置隐藏，下拉按钮显示
     * @private
     * @param {?} outsideVisibleArrays 从组件外传入的可见状态对象
     * @param {?} dropdownItem 下拉元素
     * @return {?}
     */
    ResponseToolbarComponent.prototype._checkDropdownVisible = /**
     * 如果是下拉按钮
     *   判断下面的子是否都隐藏
     *       A. 如果子都隐藏，那么整个下拉都被隐藏；
     *       B. 如果存在子没有隐藏，而且下拉没有被预置隐藏，下拉按钮显示
     * @private
     * @param {?} outsideVisibleArrays 从组件外传入的可见状态对象
     * @param {?} dropdownItem 下拉元素
     * @return {?}
     */
    function (outsideVisibleArrays, dropdownItem) {
        var _this = this;
        //如果没有被强制设置状态
        if (!outsideVisibleArrays.hasOwnProperty(dropdownItem["id"])) {
            // 下拉元素不可见，判断是否有可见子元素
            if (!dropdownItem["visible"] &&
                this._hasVisibleItem(dropdownItem["children"], true)) {
                dropdownItem["visible"] = true;
            }
            // 下拉元素是可见，判断是否有子元素都不可见
            if (dropdownItem["visible"] &&
                !this._hasVisibleItem(dropdownItem["children"], true)) {
                dropdownItem["visible"] = false;
            }
        }
        dropdownItem.children.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (item["isDP"]) {
                _this._checkDropdownVisible(outsideVisibleArrays, item);
            }
        }));
    };
    /**
     * 在待检查数据中心，检查是否存在该可见状态的数据。
     * 如果有返回true,否则返回false
     * @param datas 待检查数据
     * @param visible 可见状态
     */
    /**
     * 在待检查数据中心，检查是否存在该可见状态的数据。
     * 如果有返回true,否则返回false
     * @private
     * @param {?} datas 待检查数据
     * @param {?} visible 可见状态
     * @return {?}
     */
    ResponseToolbarComponent.prototype._hasVisibleItem = /**
     * 在待检查数据中心，检查是否存在该可见状态的数据。
     * 如果有返回true,否则返回false
     * @private
     * @param {?} datas 待检查数据
     * @param {?} visible 可见状态
     * @return {?}
     */
    function (datas, visible) {
        /** @type {?} */
        var findIndex = datas.findIndex((/**
         * @param {?} childItem
         * @return {?}
         */
        function (childItem) {
            if (childItem["visible"] == visible) {
                return true;
            }
            return false;
        }));
        if (findIndex > -1) {
            return true;
        }
        return false;
    };
    /**
     * 捕获点击
     * @param ev
     */
    /**
     * 捕获点击
     * @param {?} ev
     * @param {?=} ddRef
     * @return {?}
     */
    ResponseToolbarComponent.prototype.clickItem = /**
     * 捕获点击
     * @param {?} ev
     * @param {?=} ddRef
     * @return {?}
     */
    function (ev, ddRef) {
        ev.stopPropagation();
        // 如果是分离的下拉按钮
        if (this.elhasSpecialCls(ev.target, "dropdown-toggle-split")) {
            ev.stopImmediatePropagation();
        }
        // 判断是否点击到需要处理事件的元素上,按钮、下拉按钮
        /** @type {?} */
        var clickEvEl = this.findBtnOrTogglerItemFromClick(ev.target);
        if (clickEvEl) {
            /** @type {?} */
            var tempID = clickEvEl["id"];
            // 修改模板，id调整到下拉整体上
            if (!tempID &&
                this.elhasSpecialCls(clickEvEl["parentNode"], "f-rt-dropdown")) {
                tempID = clickEvEl["parentNode"].id;
            }
            if (tempID) {
                /** @type {?} */
                var tempItem = this._findItemByID(tempID, this.toolbarDatas);
                // 如果元素禁用
                if (tempItem["disabled"]) {
                    // 禁止向上传递
                    ev.stopImmediatePropagation();
                }
                else {
                    this.clickItems.next({
                        id: tempID,
                        text: tempItem["text"],
                        hidden: tempItem["hidden"]
                    });
                    if (ddRef) {
                        ddRef.close();
                    }
                }
            }
        }
        else {
            ev.stopImmediatePropagation();
        }
    };
    /**
     * @private
     * @param {?} clickTarget
     * @return {?}
     */
    ResponseToolbarComponent.prototype.findBtnOrTogglerItemFromClick = /**
     * @private
     * @param {?} clickTarget
     * @return {?}
     */
    function (clickTarget) {
        // 父级标签是否是body,是着停止返回集合,反之继续
        if (this.elhasSpecialCls(clickTarget)) {
            return clickTarget;
        }
        else if (clickTarget.parentNode["className"] && clickTarget.parentNode["className"].indexOf("f-response-content") < 0) {
            /** @type {?} */
            var parentN = clickTarget.parentNode;
            if (this.elhasSpecialCls(parentN)) {
                return parentN;
            }
            else {
                return this.findBtnOrTogglerItemFromClick(parentN);
            }
        }
        // 返回集合,结束
        return null;
    };
    /**
     * @private
     * @param {?} el
     * @param {?=} clsName
     * @return {?}
     */
    ResponseToolbarComponent.prototype.elhasSpecialCls = /**
     * @private
     * @param {?} el
     * @param {?=} clsName
     * @return {?}
     */
    function (el, clsName) {
        if (clsName === void 0) { clsName = ""; }
        if (el) {
            /** @type {?} */
            var classNameList = el.classList;
            /** @type {?} */
            var findCls = false;
            for (var k = 0; k < classNameList.length; k++) {
                if (clsName) {
                    if (classNameList[k] == clsName) {
                        findCls = true;
                        break;
                    }
                }
                else {
                    if (classNameList[k] == "f-rt-btn" ||
                        classNameList[k] == "f-rt-toggle") {
                        findCls = true;
                        break;
                    }
                }
            }
            return findCls;
        }
        return false;
    };
    /**
     * 根据传递的数据重新组建分组
     * ToDo 暂时没有更复杂的分组，否则需要记录分组
     */
    /**
     * 根据传递的数据重新组建分组
     * ToDo 暂时没有更复杂的分组，否则需要记录分组
     * @private
     * @return {?}
     */
    ResponseToolbarComponent.prototype._reOrganizeResizeGroups = /**
     * 根据传递的数据重新组建分组
     * ToDo 暂时没有更复杂的分组，否则需要记录分组
     * @private
     * @return {?}
     */
    function () {
        // 处理分组数据
        //  if (this.resizeGroups.length === 0) {
        /** @type {?} */
        var moreText = "更多";
        if (this.localeService) {
            moreText = this.localeService.getValue("responseToolbar.more");
        }
        /** @type {?} */
        var defaultResizeGroup = new ResponseToolbarGroup("toolbar-group-1", moreText);
        for (var i = this.toolbarDatas.length - 1; i >= 0; i--) {
            defaultResizeGroup.setPreset(this.toolbarDatas[i]["id"]);
        }
        this.resizeGroups = [].concat(defaultResizeGroup);
        // this.cd.markForCheck();
        if (this.cd && !((/** @type {?} */ (this.cd))).destroyed) {
            this.cd.detectChanges();
        }
    };
    /**
     * 内容与容器的差值
     */
    /**
     * 内容与容器的差值
     * @private
     * @return {?}
     */
    ResponseToolbarComponent.prototype._getDistance = /**
     * 内容与容器的差值
     * @private
     * @return {?}
     */
    function () {
        return (this.resizedContentEl.nativeElement.offsetWidth -
            this.resizedContainerEl.nativeElement.offsetWidth);
    };
    /**
     * 根据返回结果判断是否继续
     * @param groupIndex
     */
    /**
     * 根据返回结果判断是否继续
     * @private
     * @param {?} originalData
     * @param {?} groupIndex
     * @return {?}
     */
    ResponseToolbarComponent.prototype._restitute = /**
     * 根据返回结果判断是否继续
     * @private
     * @param {?} originalData
     * @param {?} groupIndex
     * @return {?}
     */
    function (originalData, groupIndex) {
        /** @type {?} */
        var tempGroup = this.resizeGroups[groupIndex];
        // 滚动条和内容的距离
        /** @type {?} */
        var tempDistance = this._getDistance();
        // 计算最后一个下拉的宽度
        /** @type {?} */
        var tempGroupData = originalData[this._findIndexByID(originalData, tempGroup.id)];
        // 找到还原的位置
        /** @type {?} */
        var tempPresetIndex = [].concat(tempGroup.responsedIndex);
        // 排除原下拉子元素被计算
        for (var j = tempPresetIndex.length - 1; j >= 0; j--) {
            if (tempDistance >= 0) {
                break;
            }
            // 从下拉中移除
            /** @type {?} */
            var tempChildData = tempGroupData.children[0];
            /** @type {?} */
            var specialDistance = j === 0 ? tempGroupData.getWidth() : 0;
            tempDistance =
                tempDistance +
                    (tempChildData.getWidth() ? tempChildData.getWidth() : 0) -
                    specialDistance;
            if (tempDistance >= 0) {
                break;
            }
            else {
                // 更新下拉
                tempGroupData.removeChild();
                // 插入到原位置
                originalData.splice(tempPresetIndex[j], 0, tempChildData);
                // 更新位置
                tempGroup.removeResponsed(j);
                if (j === 0) {
                    originalData.splice(this._findIndexByID(originalData, tempGroup.id), 1);
                }
            }
        }
        return {
            continueTo: tempDistance > 0 ? true : false,
            data: originalData
        };
    };
    /**
     * 开始计算
     * @param datas
     */
    /**
     * 开始计算
     * @private
     * @param {?=} auxiliary
     * @param {?=} tGroupWidth
     * @return {?}
     */
    ResponseToolbarComponent.prototype._calculate = /**
     * 开始计算
     * @private
     * @param {?=} auxiliary
     * @param {?=} tGroupWidth
     * @return {?}
     */
    function (auxiliary, tGroupWidth) {
        if (auxiliary === void 0) { auxiliary = false; }
        if (tGroupWidth === void 0) { tGroupWidth = 0; }
        if (this._auxiliary < 0) {
            return;
        }
        // 记录需要修改的下拉
        /** @type {?} */
        var tempDP;
        // 滚动条和内容的距离
        /** @type {?} */
        var tempDistance = this._getDistance() + tGroupWidth;
        // 临时存储数据
        /** @type {?} */
        var tempToolbarDatas = [].concat(this.toolbarDatas);
        /** @type {?} */
        var tempGroup = this.resizeGroups[this._auxiliary];
        if (auxiliary) {
            tempDP = this.auxiliaryDatas.pop();
            tempDP.setWidth(tGroupWidth);
            tempGroup.setWidth(tGroupWidth);
        }
        else {
            tempDP =
                tempToolbarDatas[this._findIndexByID(tempToolbarDatas, tempGroup.id)];
        }
        // 当前剩余隐藏
        for (var j = tempGroup.responsedIndex.length; j < tempGroup.presetId.length; j++) {
            if (tempDistance <= 0) {
                break;
            }
            // 计算在当前数据中的位置，根据这个位置可以找宽度
            /** @type {?} */
            var tempOldIndex = (/** @type {?} */ (this._findIndexByID(this.toolbarDatas, tempGroup.presetId[j])));
            /** @type {?} */
            var tempNewIndex = (/** @type {?} */ (this._findIndexByID(tempToolbarDatas, tempGroup.presetId[j])));
            // 计算按钮宽度
            /** @type {?} */
            var tempWidth = (/** @type {?} */ (this.toolbarDatas[tempOldIndex].getWidth()));
            if (tempWidth === 0) {
                // 按钮宽度未曾被计算过
                tempWidth = this._getWidthFromElementsById(tempGroup.presetId[j]);
                tempToolbarDatas[tempNewIndex].setWidth(tempWidth);
            }
            else if (tempWidth === false) {
                // 按钮被隐藏
                tempWidth = 0;
            }
            tempDP.addChild(tempToolbarDatas[tempNewIndex]);
            // 移除
            tempToolbarDatas.splice(tempNewIndex, 1);
            // 保存位置用于还原
            tempGroup.setResponsed(tempNewIndex);
            tempDistance = tempDistance - tempWidth;
        }
        if (auxiliary && tempDP.hasChild()) {
            // 插入
            tempToolbarDatas.push(tempDP);
        }
        this._auxiliary = -1;
        this.toolbarDatas = [].concat(tempToolbarDatas);
        if (this.cd && !((/** @type {?} */ (this.cd))).destroyed) {
            this.cd.detectChanges();
        }
    };
    /**
     * 根据id找到实际显示元素的宽度
     * @param findId
     */
    /**
     * 根据id找到实际显示元素的宽度
     * @private
     * @param {?} findId
     * @return {?}
     */
    ResponseToolbarComponent.prototype._getWidthFromElementsById = /**
     * 根据id找到实际显示元素的宽度
     * @private
     * @param {?} findId
     * @return {?}
     */
    function (findId) {
        /** @type {?} */
        var parentEl = this.resizedContentEl.nativeElement;
        /** @type {?} */
        var childLen = parentEl.children.length;
        /** @type {?} */
        var result = 0;
        for (var k = 0; k < childLen; k++) {
            if (parentEl.children[k].id === findId) {
                /** @type {?} */
                var findEl = parentEl.children[k];
                /** @type {?} */
                var getComputedStyleEl = window.getComputedStyle(findEl, null);
                result = findEl.offsetWidth + parseFloat(getComputedStyleEl.marginLeft) + parseFloat(getComputedStyleEl.marginRight);
                break;
            }
        }
        return result;
    };
    /**
     * 格式化数据
     */
    /**
     * 格式化数据
     * @private
     * @param {?} datas
     * @param {?=} idPrefix
     * @return {?}
     */
    ResponseToolbarComponent.prototype._formatData = /**
     * 格式化数据
     * @private
     * @param {?} datas
     * @param {?=} idPrefix
     * @return {?}
     */
    function (datas, idPrefix) {
        var _this = this;
        if (idPrefix === void 0) { idPrefix = "response"; }
        /** @type {?} */
        var result = [];
        datas.forEach((/**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        function (item, index) {
            if (item.isDP) {
                // 如果是下拉
                if (item.hasOwnProperty("children") &&
                    item["children"].length) {
                    /** @type {?} */
                    var children = [].concat(item["children"]);
                    // item.children = []; // 应gzq要求20230529
                    /** @type {?} */
                    var dpItem = new ResponseToolbarDropDown(Object.assign({ id: idPrefix + "_" + index }, item));
                    result.push(dpItem);
                    dpItem.children = _this._formatData(children, idPrefix + "_" + index);
                }
                else {
                    result.push(new ResponseToolbarDropDown(Object.assign({ id: idPrefix + "_" + index }, item)));
                }
            }
            else {
                // 非下拉
                result.push(new ResponseToolbarItem(Object.assign({ id: idPrefix + "_" + index }, item)));
            }
        }));
        return result;
    };
    /**
     * 找到第一个未处理完响应式的元素
     */
    /**
     * 找到第一个未处理完响应式的元素
     * @private
     * @return {?}
     */
    ResponseToolbarComponent.prototype._getFirstUnResponsedIndex = /**
     * 找到第一个未处理完响应式的元素
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var tempUnResponsedIndex = this.resizeGroups.findIndex((/**
         * @param {?} group
         * @return {?}
         */
        function (group) {
            if (group.isResponsed()) {
                return false;
            }
            return true;
        }));
        return tempUnResponsedIndex;
    };
    /**
     * 寻找最后一个处理响应式的元素
     */
    /**
     * 寻找最后一个处理响应式的元素
     * @private
     * @return {?}
     */
    ResponseToolbarComponent.prototype._getLastResponseIndex = /**
     * 寻找最后一个处理响应式的元素
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var tempResponsingIndex = this.resizeGroups.findIndex((/**
         * @param {?} group
         * @return {?}
         */
        function (group) {
            if (!group.isResponsing()) {
                return true;
            }
            return false;
        }));
        // 所有组元素都已处理完响应式
        if (tempResponsingIndex === -1) {
            return this.resizeGroups.length - 1;
        }
        // 所有组元素都未开始处理响应式
        return tempResponsingIndex > 1 ? tempResponsingIndex - 1 : -1;
    };
    /**
     * 找到group形成的下拉，在数据中的位置
     */
    /**
     * 找到group形成的下拉，在数据中的位置
     * @private
     * @param {?} datas
     * @param {?} id
     * @return {?}
     */
    ResponseToolbarComponent.prototype._findIndexByID = /**
     * 找到group形成的下拉，在数据中的位置
     * @private
     * @param {?} datas
     * @param {?} id
     * @return {?}
     */
    function (datas, id) {
        /** @type {?} */
        var result = datas.findIndex((/**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        function (item, index) {
            if (item["id"] === id) {
                return true;
            }
            return false;
        }));
        return result;
    };
    /**
     * 根据ID寻找Item
     */
    /**
     * 根据ID寻找Item
     * @private
     * @param {?} id
     * @param {?} data
     * @return {?}
     */
    ResponseToolbarComponent.prototype._findItemByID = /**
     * 根据ID寻找Item
     * @private
     * @param {?} id
     * @param {?} data
     * @return {?}
     */
    function (id, data) {
        var _this = this;
        /** @type {?} */
        var tempResult = null;
        /** @type {?} */
        var tempIndex = data.findIndex((/**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        function (item, index) {
            if (item["id"] === id) {
                tempResult = item;
                return true;
            }
            // 如果是下拉，层级下拉
            if (item["isDP"]) {
                /** @type {?} */
                var tempItem = _this._findItemByID(id, item["children"]);
                if (tempItem) {
                    tempResult = tempItem;
                    return true;
                }
            }
            return false;
        }));
        return tempResult;
    };
    ResponseToolbarComponent.decorators = [
        { type: Component, args: [{
                    selector: "f-response-toolbar",
                    template: "<!-- <div class=\"border bg-primary\" style=\"height:40px;position: relative;\"> -->\r\n<div #auxiliaryContainer class=\"response-toolbar-hidden-element\">\r\n    <ng-container *ngFor=\"let dataItem of auxiliaryDatas\">\r\n        <div class=\"btn-group\" *ngIf=\"dataItem.visible&&dataItem.isDP\" id=\"{{ dataItem.id }}\">\r\n            <button type=\"button\" class=\"btn dropdown-toggle dropdown-toggle-split  f-rt-toggle\"\r\n                [class.f-btn-ml]=\"btnAlign=='right'\" [class.f-btn-mr]=\"btnAlign=='left'\" [ngClass]=\"dataItem.class\" [class.btn-icontext]=\"dataItem.icon&&dataItem.icon.trim()\">\r\n             <i class=\"f-icon\" [ngClass]=\"dataItem.icon&&dataItem.icon.trim()\" *ngIf=\"dataItem.icon&&dataItem.icon.trim()\"></i>{{ dataItem.text }}\r\n            </button>\r\n        </div>\r\n        <button type=\"button\" class=\"btn f-rt-btn\" [class.f-btn-ml]=\"btnAlign=='right'\"\r\n            [class.f-btn-mr]=\"btnAlign=='left'\" [ngClass]=\"dataItem.class\" id=\"{{ dataItem.id }}\"\r\n            *ngIf=\"dataItem.visible&&!dataItem.isDP\" [class.btn-icontext]=\"dataItem.icon&&dataItem.icon.trim()\">\r\n            <i class=\"f-icon\" [ngClass]=\"dataItem.icon&&dataItem.icon.trim()\" *ngIf=\"dataItem.icon&&dataItem.icon.trim()\"></i>{{ dataItem.text }}\r\n        </button>\r\n    </ng-container>\r\n</div>\r\n<div fResized #resizedContainer (resizedEvent)=\"onResize($event)\" class=\"d-flex flex-nowrap\"\r\n    [ngClass]=\"{'justify-content-end':btnAlign=='right','justify-content-start':btnAlign=='left'}\">\r\n    <div class=\"d-inline-block f-response-content\" style=\"white-space: nowrap;\" #resizedContent\r\n        (click)=\"clickItem($event, null)\">\r\n        <ng-container *ngFor=\"let dataItem of toolbarDatas\">\r\n            <ng-container *ngIf=\"dataItem.visible && dataItem.isDP\">\r\n                <ng-container *ngTemplateOutlet=\"\r\n                        dropdownTmpl;\r\n                        context: { $implicit: dataItem }\r\n                    \"></ng-container>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"dataItem.visible && !dataItem.isDP&&dataItem.tipsEnable\">\r\n                <button type=\"button\" class=\"btn f-rt-btn\"\r\n                    [class.f-btn-ml]=\"btnAlign=='right'\" [class.f-btn-mr]=\"btnAlign=='left'\" id=\"{{ dataItem.id }}\"\r\n                    [ngClass]=\"dataItem.class\" [class.disabled]=\"dataItem.disabled\" [class.btn-icontext]=\"dataItem.icon&&dataItem.icon.trim()\"\r\n                    [farrisTooltip]=\"dataItem.tipsEnable\" [content]=\"dataItem.tipsText\">\r\n                    <i class=\"f-icon\" [ngClass]=\"dataItem.icon&&dataItem.icon.trim()\" *ngIf=\"dataItem.icon&&dataItem.icon.trim()\"></i>{{ dataItem.text }}\r\n                </button>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"dataItem.visible && !dataItem.isDP&&!dataItem.tipsEnable\">\r\n                <button type=\"button\" class=\"btn f-rt-btn\"\r\n                    [class.f-btn-ml]=\"btnAlign=='right'\" [class.f-btn-mr]=\"btnAlign=='left'\" id=\"{{ dataItem.id }}\"\r\n                    [ngClass]=\"dataItem.class\" [class.disabled]=\"dataItem.disabled\"  [class.btn-icontext]=\"dataItem.icon&&dataItem.icon.trim()\">\r\n                    <i class=\"f-icon\" [ngClass]=\"dataItem.icon&&dataItem.icon.trim()\" *ngIf=\"dataItem.icon&&dataItem.icon.trim()\"></i>{{ dataItem.text }}\r\n                </button>\r\n            </ng-container>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n<!-- </div> -->\r\n\r\n<!--\u7B2C\u4E00\u5C42\u4E0B\u62C9-->\r\n<ng-template #dropdownTmpl let-data>\r\n    <div class=\"btn-group f-rt-dropdown\" id=\"{{ data.id }}\" fDropdown  #dd=\"fDropdown\"\r\n        [placement]=\"getPlacement(data['placement'],'bottom')\" (dpChangeEvent)=\"dpSectionState($event,data.id)\"\r\n        [rectifyReference]=\"referEl\" [forceState]=\"dpState\" [autoRectify]=\"true\" [class.f-btn-ml]=\"btnAlign=='right'\"\r\n        [class.f-btn-mr]=\"btnAlign=='left'\" [ngClass]=\"data['dropdownCls']\">\r\n        <!--\u542F\u7528\u4E0B\u62C9\u5206\u5F00\u6309\u94AE-->\r\n        <ng-container *ngIf=\"data.split\">\r\n            <ng-container *ngIf=\"data.tipsEnable\">\r\n                <button type=\"button\" class=\"btn f-rt-btn\" [ngClass]=\"data.class\" [class.disabled]=\"data.disabled\"\r\n                    [farrisTooltip]=\"data.tipsEnable\" [content]=\"data.tipsText\" [class.btn-icontext]=\"data.icon&&data.icon.trim()\">\r\n                    <i class=\"f-icon\" [ngClass]=\"data.icon&&data.icon.trim()\" *ngIf=\"data.icon&&data.icon.trim()\"></i>{{ data.text }}\r\n                </button>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"!data.tipsEnable\">\r\n                <button type=\"button\" class=\"btn f-rt-btn\" [ngClass]=\"data.class\" [class.disabled]=\"data.disabled\" [class.btn-icontext]=\"data.icon&&data.icon.trim()\">\r\n                    <i class=\"f-icon\" [ngClass]=\"data.icon&&data.icon.trim()\" *ngIf=\"data.icon&&data.icon.trim()\"></i>{{ data.text }}\r\n                </button>\r\n            </ng-container>\r\n            <button class=\"btn dropdown-toggle dropdown-toggle-split\" [ngClass]=\"data.class\" fDropdownToggle></button>\r\n        </ng-container>\r\n        <!--\u4E0D\u542F\u7528\u4E0B\u62C9\u5206\u5F00\u6309\u94AE-->\r\n        <ng-container *ngIf=\"!data.split&&data.tipsEnable\">\r\n            <button type=\"button\" fDropdownToggle class=\"btn f-rt-toggle\" [farrisTooltip]=\"data.tipsEnable\"\r\n                [content]=\"data.tipsText\" [ngClass]=\"data.class + ' dropdown-toggle'\" [dpDisabled]=\"data.disabled\" [class.btn-icontext]=\"data.icon&&data.icon.trim()\">\r\n                <i class=\"f-icon\" [ngClass]=\"data.icon&&data.icon.trim()\" *ngIf=\"data.icon&&data.icon.trim()\"></i>{{ data.text }}\r\n            </button>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!data.split&&!data.tipsEnable\">\r\n            <button type=\"button\" fDropdownToggle class=\"btn f-rt-toggle\" [ngClass]=\"data.class + ' dropdown-toggle'\"\r\n                [dpDisabled]=\"data.disabled\"  [class.btn-icontext]=\"data.icon&&data.icon.trim()\">\r\n                <i class=\"f-icon\" [ngClass]=\"data.icon&&data.icon.trim()\" *ngIf=\"data.icon&&data.icon.trim()\"></i>{{ data.text }}\r\n            </button>\r\n        </ng-container>\r\n        <ul class=\"dropdown-menu\" fDropdownMenu [ngClass]=\"data.menuCls\" id=\"{{ data.id }}_menu\">\r\n            <ng-container *ngFor=\"let item of data.children\">\r\n                <ng-container *ngIf=\"item.visible && item.isDP\">\r\n                    <ng-container *ngTemplateOutlet=\"\r\n                            dropdownSubTmpl;\r\n                            context: { $implicit: item, ddRef: dd }\r\n                        \"></ng-container>\r\n                </ng-container>\r\n                <ng-container *ngIf=\"item.visible&&!item.isDP&&item.tipsEnable\">\r\n                    <li class=\"dropdown-item  f-rt-btn\" id=\"{{ item.id }}\" [class.disabled]=\"item.disabled\"\r\n                        [farrisTooltip]=\"item.tipsEnable\" [content]=\"item.tipsText\"  (click)=\"clickItem($event, dd)\">\r\n                        {{ item.text }}\r\n                    </li>\r\n                </ng-container>\r\n                <ng-container *ngIf=\"item.visible&&!item.isDP&&!item.tipsEnable\">\r\n                    <li class=\"dropdown-item  f-rt-btn\" id=\"{{ item.id }}\" [class.disabled]=\"item.disabled\"  (click)=\"clickItem($event, dd)\">\r\n                        {{ item.text }}\r\n                    </li>\r\n                </ng-container>\r\n            </ng-container>\r\n        </ul>\r\n    </div>\r\n</ng-template>\r\n<!--\u7B2C\u4E8C\u5C42\u4E0B\u62C9-->\r\n<ng-template #dropdownSubTmpl let-subData let-dd=\"ddRef\">\r\n    <li class=\"dropdown-submenu f-rt-dropdown\" fDropdown [isSubDP]=\"true\" (click)=\"clickItem($event, dd)\"\r\n        [placement]=\"getPlacement(subData['placement'],'right')\" [autoRectify]=\"true\" [rectifyReference]=\"referEl\"\r\n        [ngClass]=\"subData['dropdownCls']\" id=\"{{ subData.id }}\">\r\n        <ng-container *ngIf=\"subData.split\">\r\n            <ng-container *ngIf=\"subData.tipsEnable\">\r\n                <span class=\"dropdown-item f-rt-btn\" [class.disabled]=\"subData['disabled']\" [ngClass]=\"subData['class']\"\r\n                    [farrisTooltip]=\"subData.tipsEnable\" [content]=\"subData.tipsText\">{{ subData.text }}</span>\r\n                <span class=\"dropdown-toggle dropdown-toggle-split f-rt-toggle\" fDropdownToggle></span>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"!subData.tipsEnable\">\r\n                <span class=\"dropdown-item f-rt-btn\" [class.disabled]=\"subData['disabled']\"\r\n                    [ngClass]=\"subData['class']\">{{ subData.text }}</span>\r\n                <span class=\"dropdown-toggle dropdown-toggle-split f-rt-toggle\" fDropdownToggle></span>\r\n            </ng-container>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!subData.split\">\r\n            <ng-container *ngIf=\"subData.tipsEnable\">\r\n                <span class=\"dropdown-item  dropdown-toggle f-rt-toggle\" [dpDisabled]=\"subData['disabled']\"\r\n                    [farrisTooltip]=\"subData.tipsEnable\" [content]=\"subData.tipsText\" [ngClass]=\"subData['class']\"\r\n                    fDropdownToggle>{{ subData.text }}</span>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"!subData.tipsEnable\">\r\n                <span class=\"dropdown-item  dropdown-toggle f-rt-toggle\" [dpDisabled]=\"subData['disabled']\"\r\n                    [ngClass]=\"subData['class']\" fDropdownToggle>{{ subData.text }}</span>\r\n            </ng-container>\r\n\r\n        </ng-container>\r\n\r\n        <ul class=\"dropdown-menu\" fDropdownMenu [ngClass]=\"subData.menuCls\" id=\"{{ subData.id }}_submenu\">\r\n            <ng-container *ngFor=\"let subItem of subData.children\">\r\n                <ng-container *ngIf=\"subItem.visible && subItem.isDP\">\r\n                    <ng-container *ngTemplateOutlet=\"\r\n                            dropdownSubTmpl;\r\n                            context: { $implicit: subItem, ddRef: dd }\r\n                        \"></ng-container>\r\n                </ng-container>\r\n                <ng-container *ngIf=\"subItem.visible && !subItem.isDP\">\r\n                    <ng-container *ngIf=\"subItem.tipsEnable\">\r\n                        <li [farrisTooltip]=\"subItem.tipsEnable\" [content]=\"subItem.tipsText\"  (click)=\"clickItem($event, dd)\"\r\n                            class=\"dropdown-item f-rt-btn\" id=\"{{ subItem.id }}\" [class.disabled]=\"subItem.disabled\">\r\n                            {{ subItem.text }}\r\n                        </li>\r\n                    </ng-container>\r\n                    <ng-container *ngIf=\"!subItem.tipsEnable\">\r\n                        <li class=\"dropdown-item f-rt-btn\" id=\"{{ subItem.id }}\" [class.disabled]=\"subItem.disabled\"  (click)=\"clickItem($event, dd)\">\r\n                            {{ subItem.text }}\r\n                        </li>\r\n                    </ng-container>\r\n                </ng-container>\r\n            </ng-container>\r\n        </ul>\r\n    </li>\r\n</ng-template>",
                    styles: [":host .response-toolbar-hidden-element{position:fixed;z-index:200;visibility:hidden;top:-87px}"]
                }] }
    ];
    /** @nocollapse */
    ResponseToolbarComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: ChangeDetectorRef },
        { type: LocaleService }
    ]; };
    ResponseToolbarComponent.propDecorators = {
        frtCls: [{ type: HostBinding, args: ["class.f-response-toolbar",] }],
        prCls: [{ type: HostBinding, args: ["class.position-relative",] }],
        resizedContainerEl: [{ type: ViewChild, args: ["resizedContainer",] }],
        auxiliaryContainerEl: [{ type: ViewChild, args: ["auxiliaryContainer",] }],
        resizedContentEl: [{ type: ViewChild, args: ["resizedContent",] }],
        resizedContainerDirective: [{ type: ViewChild, args: ["resizedContainer", { read: FResizedDirective },] }],
        rtClickEvent: [{ type: Output }],
        groups: [{ type: Input }],
        datas: [{ type: Input }],
        btnState: [{ type: Input }],
        btnVisible: [{ type: Input }],
        clickThrottleTime: [{ type: Input }],
        buttonSize: [{ type: Input }],
        popDirection: [{ type: Input }],
        btnAlign: [{ type: Input }]
    };
    return ResponseToolbarComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FResponseToolbarModule = /** @class */ (function () {
    function FResponseToolbarModule() {
    }
    FResponseToolbarModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        FDropdownDirectiveTypeModule,
                        FarrisTooltipModule,
                        LocaleModule
                    ],
                    declarations: [
                        FResizedDirective,
                        ResponseToolbarComponent
                    ],
                    exports: [ResponseToolbarComponent]
                },] }
    ];
    return FResponseToolbarModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FResizedDirective, ResponseToolbarComponent, FResponseToolbarModule, ResponseToolbarBasic, ResponseToolbarItem, ResponseToolbarDropDown, ResponseToolbarGroup };

//# sourceMappingURL=farris-ui-response-toolbar.js.map