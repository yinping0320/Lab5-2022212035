/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Output, EventEmitter, ElementRef, HostListener } from '@angular/core';
import { Subject } from 'rxjs';
import { throttleTime } from 'rxjs/operators';
import { ResizedEvent } from './f-resized.events';
export class FResizedDirective {
    /**
     * @param {?} element
     */
    constructor(element) {
        this.element = element;
        this.resizedEvent = new EventEmitter();
        this.resizeSubject = new Subject();
        this.resizeObservable = this.resizeSubject
            .asObservable()
            .pipe(throttleTime(200));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onResize(event) {
        this.resizeSubject.next(event);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.resizeObservable.subscribe((/**
         * @param {?} x
         * @return {?}
         */
        x => this.doWithResize()));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.doWithResize();
    }
    /**
     * @private
     * @return {?}
     */
    doWithResize() {
        /** @type {?} */
        const newWidth = this.element.nativeElement.clientWidth;
        /** @type {?} */
        const newHeight = this.element.nativeElement.clientHeight;
        if (newWidth === this.oldWidth && newHeight === this.oldHeight) {
            return;
        }
        this.resizedEvent.next(new ResizedEvent(this.element, newWidth, newHeight, this.oldWidth, this.oldHeight));
        this.oldWidth = newWidth;
        this.oldHeight = newHeight;
    }
}
FResizedDirective.decorators = [
    { type: Directive, args: [{
                selector: '[fResized]'
            },] }
];
/** @nocollapse */
FResizedDirective.ctorParameters = () => [
    { type: ElementRef }
];
FResizedDirective.propDecorators = {
    resizedEvent: [{ type: Output }],
    onResize: [{ type: HostListener, args: ['window:resize', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    FResizedDirective.prototype.resizedEvent;
    /**
     * @type {?}
     * @private
     */
    FResizedDirective.prototype.oldWidth;
    /**
     * @type {?}
     * @private
     */
    FResizedDirective.prototype.oldHeight;
    /**
     * @type {?}
     * @private
     */
    FResizedDirective.prototype.resizeSubject;
    /**
     * @type {?}
     * @private
     */
    FResizedDirective.prototype.resizeObservable;
    /**
     * @type {?}
     * @private
     */
    FResizedDirective.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZi1yZXNpemVkLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktcmVzcG9uc2UtdG9vbGJhci8iLCJzb3VyY2VzIjpbImxpYi9yZXNpemVkL2YtcmVzaXplZC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsTUFBTSxFQUNOLFlBQVksRUFDWixVQUFVLEVBRVYsWUFBWSxFQUViLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUtsRCxNQUFNLE9BQU8saUJBQWlCOzs7O0lBYTVCLFlBQTZCLE9BQW1CO1FBQW5CLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFaN0IsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBZ0IsQ0FBQztRQUczRCxrQkFBYSxHQUFHLElBQUksT0FBTyxFQUFVLENBQUM7UUFDdEMscUJBQWdCLEdBQUcsSUFBSSxDQUFDLGFBQWE7YUFDMUMsWUFBWSxFQUFFO2FBQ2QsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBTXdCLENBQUM7Ozs7O0lBSHBELFFBQVEsQ0FBQyxLQUFLO1FBQ1osSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDakMsQ0FBQzs7OztJQUdELFFBQVE7UUFDTixJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUzs7OztRQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxFQUFDLENBQUM7SUFDNUQsQ0FBQzs7OztJQUNELGVBQWU7UUFDYixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdEIsQ0FBQzs7Ozs7SUFFTyxZQUFZOztjQUNaLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxXQUFXOztjQUNqRCxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsWUFBWTtRQUV6RCxJQUFJLFFBQVEsS0FBSyxJQUFJLENBQUMsUUFBUSxJQUFJLFNBQVMsS0FBSyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQzlELE9BQU87U0FDUjtRQUNELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUNwQixJQUFJLFlBQVksQ0FDZCxJQUFJLENBQUMsT0FBTyxFQUNaLFFBQVEsRUFDUixTQUFTLEVBQ1QsSUFBSSxDQUFDLFFBQVEsRUFDYixJQUFJLENBQUMsU0FBUyxDQUNmLENBQ0YsQ0FBQztRQUVGLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO0lBQzdCLENBQUM7OztZQTVDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFlBQVk7YUFDdkI7Ozs7WUFYQyxVQUFVOzs7MkJBYVQsTUFBTTt1QkFRTixZQUFZLFNBQUMsZUFBZSxFQUFFLENBQUMsUUFBUSxDQUFDOzs7O0lBUnpDLHlDQUFtRTs7Ozs7SUFDbkUscUNBQXlCOzs7OztJQUN6QixzQ0FBMEI7Ozs7O0lBQzFCLDBDQUE4Qzs7Ozs7SUFDOUMsNkNBRTJCOzs7OztJQU1mLG9DQUFvQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgRGlyZWN0aXZlLFxyXG4gIE91dHB1dCxcclxuICBFdmVudEVtaXR0ZXIsXHJcbiAgRWxlbWVudFJlZixcclxuICBPbkluaXQsXHJcbiAgSG9zdExpc3RlbmVyLFxyXG4gIEFmdGVyVmlld0luaXRcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyB0aHJvdHRsZVRpbWUgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IFJlc2l6ZWRFdmVudCB9IGZyb20gJy4vZi1yZXNpemVkLmV2ZW50cyc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tmUmVzaXplZF0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGUmVzaXplZERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XHJcbiAgQE91dHB1dCgpIHJlYWRvbmx5IHJlc2l6ZWRFdmVudCA9IG5ldyBFdmVudEVtaXR0ZXI8UmVzaXplZEV2ZW50PigpO1xyXG4gIHByaXZhdGUgb2xkV2lkdGg6IG51bWJlcjtcclxuICBwcml2YXRlIG9sZEhlaWdodDogbnVtYmVyO1xyXG4gIHByaXZhdGUgcmVzaXplU3ViamVjdCA9IG5ldyBTdWJqZWN0PG51bWJlcj4oKTtcclxuICBwcml2YXRlIHJlc2l6ZU9ic2VydmFibGUgPSB0aGlzLnJlc2l6ZVN1YmplY3RcclxuICAgIC5hc09ic2VydmFibGUoKVxyXG4gICAgLnBpcGUodGhyb3R0bGVUaW1lKDIwMCkpO1xyXG5cclxuICBASG9zdExpc3RlbmVyKCd3aW5kb3c6cmVzaXplJywgWyckZXZlbnQnXSlcclxuICBvblJlc2l6ZShldmVudCkge1xyXG4gICAgdGhpcy5yZXNpemVTdWJqZWN0Lm5leHQoZXZlbnQpO1xyXG4gIH1cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGVsZW1lbnQ6IEVsZW1lbnRSZWYpIHt9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgdGhpcy5yZXNpemVPYnNlcnZhYmxlLnN1YnNjcmliZSh4ID0+IHRoaXMuZG9XaXRoUmVzaXplKCkpO1xyXG4gIH1cclxuICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICB0aGlzLmRvV2l0aFJlc2l6ZSgpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBkb1dpdGhSZXNpemUoKSB7XHJcbiAgICBjb25zdCBuZXdXaWR0aCA9IHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LmNsaWVudFdpZHRoO1xyXG4gICAgY29uc3QgbmV3SGVpZ2h0ID0gdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuY2xpZW50SGVpZ2h0O1xyXG5cclxuICAgIGlmIChuZXdXaWR0aCA9PT0gdGhpcy5vbGRXaWR0aCAmJiBuZXdIZWlnaHQgPT09IHRoaXMub2xkSGVpZ2h0KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMucmVzaXplZEV2ZW50Lm5leHQoXHJcbiAgICAgIG5ldyBSZXNpemVkRXZlbnQoXHJcbiAgICAgICAgdGhpcy5lbGVtZW50LFxyXG4gICAgICAgIG5ld1dpZHRoLFxyXG4gICAgICAgIG5ld0hlaWdodCxcclxuICAgICAgICB0aGlzLm9sZFdpZHRoLFxyXG4gICAgICAgIHRoaXMub2xkSGVpZ2h0XHJcbiAgICAgIClcclxuICAgICk7XHJcblxyXG4gICAgdGhpcy5vbGRXaWR0aCA9IG5ld1dpZHRoO1xyXG4gICAgdGhpcy5vbGRIZWlnaHQgPSBuZXdIZWlnaHQ7XHJcbiAgfVxyXG59XHJcbiJdfQ==