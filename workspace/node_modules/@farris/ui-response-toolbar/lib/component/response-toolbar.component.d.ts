import { OnInit, ElementRef, Renderer2, AfterViewInit, DoCheck, AfterViewChecked, ChangeDetectorRef, EventEmitter, OnDestroy } from "@angular/core";
import { ResponseToolbarDropDown, ResponseToolbarItem, ResponseToolbarGroup, ResponseToolbarClickEvent } from "../model/response-toolbar.model";
import { FResizedDirective } from "../resized/f-resized.directive";
import { Observable } from "rxjs";
import { LocaleService } from "@farris/ui-locale";
import { FDropdownDirective } from "@farris/ui-dropdown";
export declare class ResponseToolbarComponent implements OnInit, AfterViewInit, DoCheck, AfterViewChecked, OnDestroy {
    private render;
    private cd;
    localeService: LocaleService;
    frtCls: boolean;
    prCls: boolean;
    resizedContainerEl: any;
    auxiliaryContainerEl: any;
    resizedContentEl: any;
    resizedContainerDirective: FResizedDirective;
    rtClickEvent: EventEmitter<ResponseToolbarClickEvent>;
    auxiliaryDatas: Array<ResponseToolbarDropDown>;
    private ro;
    private containerWidthRecord;
    private needResponseChanges;
    referEl: any;
    dpState: boolean[];
    private _auxiliary;
    private _selfEl;
    resizeGroups: Array<ResponseToolbarGroup>;
    toolbarDatas: Array<ResponseToolbarItem | ResponseToolbarDropDown>;
    groups: Array<ResponseToolbarGroup>;
    private distanceThreshold;
    private isUpdateTBView;
    datas: Array<ResponseToolbarItem | ResponseToolbarDropDown>;
    _stateDatas: Observable<Array<any>>;
    btnState: Observable<Array<any>>;
    _btnVisibleDatas: Observable<Array<any>>;
    btnVisible: Observable<Array<any>>;
    clickThrottleTime: number;
    private clickItems;
    private clickSubscription;
    private rtSize;
    buttonSize: string;
    popDirection: string;
    btnAlign: string;
    private ngZone;
    constructor(el: ElementRef, render: Renderer2, cd: ChangeDetectorRef, localeService: LocaleService);
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterViewChecked(): void;
    onResize(event: any): void;
    /**
     * 兼容旧模板旧方法
     * 在不存在ngZone的情况下，创建ngZone,然后绑定事件
     */
    private observerElement;
    /**
     * 强制转换方向
     * @param selfDefinePL
     * @param defaultPL
     */
    getPlacement(selfDefinePL: string, defaultPL: string): string;
    /**
     * 调用此方法的场景
     * 1、界面拖拽自动触发
     * 2、显示调用
     */
    responseResize(): void;
    dpSectionState(state: boolean, id: any): void;
    private compatibleDispatchEvent;
    changeState(values: any): void;
    /**
     * 修改显示状态
     * 如果是下拉按钮
     *   判断下面的子是否都隐藏
     * @param values
     */
    changeVisible(values: any): void;
    /**
     * 如果是下拉按钮
     *   判断下面的子是否都隐藏
     *       A. 如果子都隐藏，那么整个下拉都被隐藏；
     *       B. 如果存在子没有隐藏，而且下拉没有被预置隐藏，下拉按钮显示
     * @param outsideVisibleArrays 从组件外传入的可见状态对象
     * @param dropdownItem 下拉元素
     */
    private _checkDropdownVisible;
    /**
     * 在待检查数据中心，检查是否存在该可见状态的数据。
     * 如果有返回true,否则返回false
     * @param datas 待检查数据
     * @param visible 可见状态
     */
    private _hasVisibleItem;
    /**
     * 捕获点击
     * @param ev
     */
    clickItem(ev: MouseEvent, ddRef?: FDropdownDirective): void;
    private findBtnOrTogglerItemFromClick;
    private elhasSpecialCls;
    /**
     * 根据传递的数据重新组建分组
     * ToDo 暂时没有更复杂的分组，否则需要记录分组
     */
    private _reOrganizeResizeGroups;
    /**
     * 内容与容器的差值
     */
    private _getDistance;
    /**
     * 根据返回结果判断是否继续
     * @param groupIndex
     */
    private _restitute;
    /**
     * 开始计算
     * @param datas
     */
    private _calculate;
    /**
     * 根据id找到实际显示元素的宽度
     * @param findId
     */
    private _getWidthFromElementsById;
    /**
     * 格式化数据
     */
    private _formatData;
    /**
     * 找到第一个未处理完响应式的元素
     */
    private _getFirstUnResponsedIndex;
    /**
     * 寻找最后一个处理响应式的元素
     */
    private _getLastResponseIndex;
    /**
     * 找到group形成的下拉，在数据中的位置
     */
    private _findIndexByID;
    /**
     * 根据ID寻找Item
     */
    private _findItemByID;
}
