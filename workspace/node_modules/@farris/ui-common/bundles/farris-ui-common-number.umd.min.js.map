{"version":3,"sources":["ng://@farris/ui-common/number/numer-helper.service.ts","ng://@farris/ui-common/number/number-helper.module.ts"],"names":["NumberHelperService","prototype","formatMoney","value","opts","this","formatValue","formatNumber","unformat","_unformat","max","n1","n2","Array","isArray","BigNumber","apply","toFixed","maximum","console","error","min","minimum","sum","avg","len","div","plus","multiplied","times","minus","eq","lt","gt","toNumber","precision","convertCurrency","money","integerNum","decimalNum","parts","cnNums","cnIntRadice","cnIntUnits","cnDecUnits","chineseStr","parseFloat","toString","indexOf","split","substr","parseInt","zeroCount","IntLen","length","i","p","q","m","n","decLen","Number","val","undefined","isNaN","String","prefix","replace","RegExp","suffix","bignum","fmt","decimalSeparator","decimal","groupSeparator","thousand","groupSize","toFormat","Injectable","args","providedIn","NumberHelperModule","forRoot","ngModule","providers","NgModule","imports","exports","declarations"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BigNumber } from 'bignumber.js';\r\n\r\nexport type NumberType = string | number;\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class NumberHelperService {\r\n    constructor() { }\r\n\r\n    formatMoney(value, opts: any = {}): string {\r\n        return this.formatValue(value, opts);\r\n    }\r\n\r\n    formatNumber(value, opts: any = {}): string {\r\n        return this.formatValue(value, opts);\r\n    }\r\n\r\n    unformat(value, opts: any = {}) {\r\n        return this._unformat(value, opts);\r\n    }\r\n\r\n    /** è·åæå¤§å¼ */\r\n    max(n1: any, n2 = null) {\r\n        if (Array.isArray(n1)) {\r\n            return BigNumber.max.apply(null, n1).toFixed();\r\n        } else {\r\n            if (n1 && n2) {\r\n                return BigNumber.maximum(n1, n2).toFixed();\r\n            } else {\r\n                console.error(`è¯·æä¾æ¯è¾çå¼n1ãn2.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** æå°å¼ */\r\n    min(n1: any, n2 = null) {\r\n        if (Array.isArray(n1)) {\r\n            return BigNumber.min.apply(null, n1).toFixed();\r\n        } else {\r\n            if (n1 && n2) {\r\n                return BigNumber.minimum(n1, n2).toFixed();\r\n            } else {\r\n                console.error(`è¯·æä¾æ¯è¾çå¼n1ãn2.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** æ±å */\r\n    sum(n1: NumberType[]) {\r\n        return BigNumber.sum.apply(null, n1).toFixed();\r\n    }\r\n\r\n    /** å¹³åæ° */\r\n    avg(n1: NumberType, len: number) {\r\n        return new BigNumber(n1).div(len).toFixed();\r\n    }\r\n\r\n    /**  å æ³ */\r\n    plus(n1: NumberType, n2: NumberType) {\r\n        return new BigNumber(n1).plus(n2).toFixed();\r\n    }\r\n\r\n    /** ä¹æ³ */\r\n    multiplied(n1: NumberType, n2: NumberType) {\r\n        new BigNumber(n1).times(n2).toFixed();\r\n    }\r\n\r\n    /** åæ³ */\r\n    minus(n1: NumberType, n2: NumberType) {\r\n        return new BigNumber(n1).minus(n2).toFixed();\r\n    }\r\n\r\n    /** æ¯å¦ç¸ç­ */\r\n    eq(n1: NumberType, n2: NumberType): boolean {\r\n        return new BigNumber(n1).eq(n2);\r\n    }\r\n\r\n    lt(n1: NumberType, n2: NumberType): boolean {\r\n        return new BigNumber(n1).lt(n2);\r\n    }\r\n    gt(n1: NumberType, n2: NumberType): boolean {\r\n        return new BigNumber(n1).gt(n2);\r\n    }\r\n\r\n    toNumber(n1: string) {\r\n        return new BigNumber(n1).toNumber();\r\n    }\r\n\r\n    toFixed(n1: string, precision: number = 0) {\r\n        return new BigNumber(n1).toFixed(precision);\r\n    }\r\n\r\n    convertCurrency(money) {\r\n        // æ±å­çæ°å­\r\n        const cnNums = new Array('é¶', 'å£¹', 'è´°', 'å', 'è', 'ä¼', 'é', 'æ', 'æ', 'ç');\r\n        // åºæ¬åä½\r\n        const cnIntRadice = new Array('', 'æ¾', 'ä½°', 'ä»');\r\n        // å¯¹åºæ´æ°é¨åæ©å±åä½\r\n        const cnIntUnits = new Array('', 'ä¸', 'äº¿', 'å');\r\n        // å¯¹åºå°æ°é¨ååä½\r\n        const cnDecUnits = new Array('è§', 'å', 'æ¯«', 'å');\r\n        // æ´æ°éé¢æ¶åé¢è·çå­ç¬¦\r\n        const cnInteger = 'æ´';\r\n        // æ´åå®ä»¥åçåä½\r\n        const cnIntLast = 'å';\r\n        // æå¤§å¤ççæ°å­\r\n        const maxNum = 999999999999999.9999;\r\n        // éé¢æ´æ°é¨å\r\n        let integerNum;\r\n        // éé¢å°æ°é¨å\r\n        let decimalNum;\r\n        // è¾åºçä¸­æéé¢å­ç¬¦ä¸²\r\n        let chineseStr = '';\r\n        // åç¦»éé¢åç¨çæ°ç»ï¼é¢å®ä¹\r\n        let parts;\r\n        if (money == '') { return ''; }\r\n        money = parseFloat(money);\r\n        if (money >= maxNum) {\r\n            // è¶åºæå¤§å¤çæ°å­\r\n            return '';\r\n        }\r\n        if (money === 0) {\r\n            chineseStr = cnNums[0] + cnIntLast + cnInteger;\r\n            return chineseStr;\r\n        }\r\n        // è½¬æ¢ä¸ºå­ç¬¦ä¸²\r\n        money = money.toString();\r\n        if (money.indexOf('.') === -1) {\r\n            integerNum = money;\r\n            decimalNum = '';\r\n        } else {\r\n            parts = money.split('.');\r\n            integerNum = parts[0];\r\n            decimalNum = parts[1].substr(0, 4);\r\n        }\r\n        // è·åæ´åé¨åè½¬æ¢\r\n        if (parseInt(integerNum, 10) > 0) {\r\n            let zeroCount = 0;\r\n            const IntLen = integerNum.length;\r\n            for (let i = 0; i < IntLen; i++) {\r\n                const n = integerNum.substr(i, 1);\r\n                const p = IntLen - i - 1;\r\n                const q = p / 4;\r\n                const m = p % 4;\r\n                if (n == '0') {\r\n                    zeroCount++;\r\n                } else {\r\n                    if (zeroCount > 0) {\r\n                        chineseStr += cnNums[0];\r\n                    }\r\n                    // å½é¶\r\n                    zeroCount = 0;\r\n                    chineseStr += cnNums[parseInt(n, 10)] + cnIntRadice[m];\r\n                }\r\n                if (m == 0 && zeroCount < 4) {\r\n                    chineseStr += cnIntUnits[q];\r\n                }\r\n            }\r\n            chineseStr += cnIntLast;\r\n        }\r\n        // å°æ°é¨å\r\n        if (decimalNum !== '') {\r\n            const decLen = decimalNum.length;\r\n            for (let i = 0; i < decLen; i++) {\r\n                let n = decimalNum.substr(i, 1);\r\n                if (n !== '0') {\r\n                    chineseStr += cnNums[Number(n)] + cnDecUnits[i];\r\n                }\r\n            }\r\n        }\r\n        if (chineseStr === '') {\r\n            chineseStr += cnNums[0] + cnIntLast + cnInteger;\r\n        } else if (decimalNum === '') {\r\n            chineseStr += cnInteger;\r\n        }\r\n        return chineseStr;\r\n\r\n    }\r\n\r\n    private _unformat(val, opts) {\r\n        val = (val === null || val === undefined || isNaN(val)) ? '' : String(val);\r\n        if (opts) {\r\n            // å»åç¼\r\n            if (opts.prefix) {\r\n                val = val.replace(new RegExp(opts.prefix, 'g'), '');\r\n            }\r\n\r\n            // å»åç¼\r\n            if (opts.suffix) {\r\n                val = val.replace(new RegExp(opts.suffix, 'g'), '');\r\n            }\r\n\r\n            // å»æååä½åéç¬¦\r\n            val = val.replace(/\\,/g, '');\r\n        }\r\n        return val;\r\n    }\r\n\r\n    private formatValue(value, opts: any) {\r\n        const bignum = new BigNumber(value);\r\n        const fmt = {\r\n            prefix: opts.prefix || '',\r\n            suffix: opts.suffix || '',\r\n            decimalSeparator: opts.decimal || '.',\r\n            groupSeparator: opts.thousand || '',\r\n            groupSize: 3\r\n        };\r\n\r\n        if (bignum.isNaN()) {\r\n            return '';\r\n        }\r\n\r\n        let precision = opts.precision || 0;\r\n        precision = Number(precision);\r\n\r\n        return bignum.toFormat(precision, fmt);\r\n    }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { NumberHelperService } from './numer-helper.service';\r\n\r\n\r\n@NgModule({\r\n    imports: [],\r\n    exports: [],\r\n    declarations: [],\r\n    providers: [],\r\n})\r\nexport class NumberHelperModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: NumberHelperModule,\r\n            providers: [\r\n                NumberHelperService\r\n            ]\r\n        };\r\n    }\r\n}\r\n"]}