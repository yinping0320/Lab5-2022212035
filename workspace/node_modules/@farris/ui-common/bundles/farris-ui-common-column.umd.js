(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@farris/ui-common/types'), require('@farris/ui-common/date'), require('@farris/ui-common/number'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('@farris/ui-common/column', ['exports', '@farris/ui-common/types', '@farris/ui-common/date', '@farris/ui-common/number', '@angular/core'], factory) :
    (factory((global.farris = global.farris || {}, global.farris['ui-common'] = global.farris['ui-common'] || {}, global.farris['ui-common'].column = {}),global.farris['ui-common'].types,global.farris['ui-common'].date,global.farris['ui-common'].number,global.ng.core));
}(this, (function (exports,types,i1,i2,i0) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /*
     * @Author: 疯狂秀才(Lucas Huang)
     * @Date: 2019-01-02 14:12:47
     * @LastEditors: 疯狂秀才(Lucas Huang)
     * @LastEditTime: 2019-10-18 13:59:34
     * @Company: Inspur
     * @Version: v0.0.1
     */
    var ColumnFormatService = /** @class */ (function () {
        function ColumnFormatService(datehelper, numberhelper) {
            this.datehelper = datehelper;
            this.numberhelper = numberhelper;
        }
        /**
         * @param {?} value
         * @param {?=} data
         * @param {?=} formatter
         * @param {?=} context
         * @return {?}
         */
        ColumnFormatService.prototype.format = /**
         * @param {?} value
         * @param {?=} data
         * @param {?=} formatter
         * @param {?=} context
         * @return {?}
         */
            function (value, data, formatter, context) {
                if (formatter) {
                    if (typeof (formatter) === 'function') {
                        context = context || {};
                        return formatter(value, data, __assign({ date: this.datehelper, number: this.numberhelper, format: this }, context));
                    }
                    else {
                        if (formatter['type']) {
                            /** @type {?} */
                            var fmt = ( /** @type {?} */(formatter));
                            switch (fmt.type) {
                                case 'datetime':
                                    return this.dateTimeFormat(value, fmt.options);
                                case 'timeago':
                                    var locale = fmt.options.locale;
                                    return this.datehelper.relativeTime(value, locale || 'zh-CHS');
                                case 'number':
                                    return this.numberFormat(value, fmt.options);
                                case 'enum':
                                    return this.enumFormat(value, fmt.options);
                                case 'image':
                                    return this.imageFormat(value, fmt.options);
                                case 'boolean':
                                case 'boolean2':
                                    return this.booleanFormat(value, fmt.options);
                                default:
                                    return value;
                            }
                        }
                    }
                }
                return value;
            };
        /**
         * @private
         * @param {?} value
         * @param {?} opts
         * @return {?}
         */
        ColumnFormatService.prototype.dateTimeFormat = /**
         * @private
         * @param {?} value
         * @param {?} opts
         * @return {?}
         */
            function (value, opts) {
                if (value) {
                    /** @type {?} */
                    var fmt = 'yyyy-MM-dd';
                    if (typeof (opts) === 'string') {
                        fmt = opts;
                    }
                    else if (typeof (opts) === 'object') {
                        fmt = opts.format || 'yyyy-MM-dd';
                    }
                    fmt = fmt.replace('YYYY', 'yyyy').replace('-DD', '-dd');
                    if (typeof (opts) === 'object' && opts.dateRange) {
                        /** @type {?} */
                        var splitStr = opts.dateRangeDatesDelimiter || '~';
                        var _a = __read(value.split(splitStr), 2), beginDate = _a[0], endDate = _a[1];
                        beginDate = this.datehelper.formatTo(beginDate, fmt);
                        endDate = this.datehelper.formatTo(endDate, fmt);
                        return beginDate + splitStr + endDate;
                    }
                    return this.datehelper.formatTo(value, fmt);
                }
                return value;
            };
        /**
         * @private
         * @param {?} value
         * @param {?=} opts
         * @return {?}
         */
        ColumnFormatService.prototype.numberFormat = /**
         * @private
         * @param {?} value
         * @param {?=} opts
         * @return {?}
         */
            function (value, opts) {
                return this.numberhelper.formatNumber(value, opts);
                // if (value !== undefined && value !== '' && value !== NaN) {
                //     return this.numberhelper.formatMoney(value, opts);
                // }
                // return value;
            };
        /**
         * @private
         * @param {?} value
         * @param {?=} opts
         * @return {?}
         */
        ColumnFormatService.prototype.enumFormat = /**
         * @private
         * @param {?} value
         * @param {?=} opts
         * @return {?}
         */
            function (value, opts) {
                if (value === undefined || value === null) {
                    value = '';
                }
                if (opts && opts.data && opts.data.length) {
                    /** @type {?} */
                    var val = value.toString();
                    /** @type {?} */
                    var arr = [val];
                    if (val.indexOf(',') > -1) { // 多选
                        arr = val.split(',');
                    }
                    /** @type {?} */
                    var str_1 = [];
                    arr.forEach(( /**
                     * @param {?} v
                     * @return {?}
                     */function (v) {
                        /** @type {?} */
                        var n = opts.data.find(( /**
                         * @param {?} item
                         * @return {?}
                         */function (item) { return item[opts.valueField].toString() == v; }));
                        if (n) {
                            str_1.push(n[opts.textField]);
                        }
                    }));
                    if (str_1.length) {
                        return str_1.join(',');
                    }
                    return value;
                }
                return value;
            };
        /**
         * @private
         * @param {?} value
         * @param {?=} opts
         * @return {?}
         */
        ColumnFormatService.prototype.imageFormat = /**
         * @private
         * @param {?} value
         * @param {?=} opts
         * @return {?}
         */
            function (value, opts) {
                if (value) {
                    if (opts) {
                        /** @type {?} */
                        var arrStr = ["<img src=\"" + value + "\" "];
                        if (opts.width) {
                            arrStr.push("width=\"" + opts.width + "\"");
                        }
                        if (opts.height) {
                            arrStr.push("height=\"" + opts.height + "\"");
                        }
                        arrStr.push('>');
                        return arrStr.join('');
                    }
                    else {
                        return "<img src=\"" + value + "\">";
                    }
                }
                return value;
            };
        /**
         * @private
         * @param {?} value
         * @param {?=} opts
         * @return {?}
         */
        ColumnFormatService.prototype.booleanFormat = /**
         * @private
         * @param {?} value
         * @param {?=} opts
         * @return {?}
         */
            function (value, opts) {
                if (value !== undefined) {
                    if (opts) {
                        /** @type {?} */
                        var val = value ? opts.trueText : opts.falseText;
                        if (val === null || val === undefined) {
                            return value;
                        }
                        return val;
                    }
                    else {
                        return value;
                    }
                }
                return '';
            };
        /**
         * @private
         * @param {?} val
         * @return {?}
         */
        ColumnFormatService.prototype.convertCompare = /**
         * @private
         * @param {?} val
         * @return {?}
         */
            function (val) {
                /** @type {?} */
                var op = types.CompareOperators.find(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) { return item.value === val; }));
                if (op) {
                    return op.label;
                }
            };
        /**
         * @param {?} sorts
         * @return {?}
         */
        ColumnFormatService.prototype.buildSortString = /**
         * @param {?} sorts
         * @return {?}
         */
            function (sorts) {
                if (sorts && sorts.length) {
                    /** @type {?} */
                    var str = sorts.map(( /**
                     * @param {?} s
                     * @return {?}
                     */function (s) {
                        return s.sortField + " " + types.SortType[s.sortType].toString().toLowerCase() + ",";
                    })).join(' ');
                    if (str) {
                        str = str.substr(0, str.length - 1);
                    }
                    return str;
                }
                return '';
            };
        /**
         * @param {?} conditions
         * @return {?}
         */
        ColumnFormatService.prototype.buildSqlWhere = /**
         * @param {?} conditions
         * @return {?}
         */
            function (conditions) {
                var _this = this;
                if (conditions && conditions.length) {
                    /** @type {?} */
                    var result_1 = [];
                    /** @type {?} */
                    var conditionList_1 = conditions.filter(( /**
                     * @param {?} c
                     * @return {?}
                     */function (c) { return c.filterField !== ''; }));
                    conditionList_1.forEach(( /**
                     * @param {?} condition
                     * @param {?} index
                     * @return {?}
                     */function (condition, index) {
                        if (!condition.filterField) {
                            return;
                        }
                        result_1.push(condition.lbracket);
                        result_1.push(condition.filterField);
                        /** @type {?} */
                        var opCode = parseInt(condition.compare.toString(), 10);
                        /** @type {?} */
                        var op = _this.convertCompare(opCode);
                        result_1.push(' ' + op.replace(/\%/g, '').replace('...', ''));
                        if (opCode === types.Compare.Like || opCode === types.Compare.NotLike
                            || opCode === types.Compare.NotLikeEndWith
                            || opCode === types.Compare.LikeEndWith) {
                            result_1.push('\'');
                            result_1.push('%');
                        }
                        else {
                            result_1.push(' ');
                            result_1.push('\'');
                        }
                        if (opCode === types.Compare.In || opCode === types.Compare.NotIn) {
                            result_1.push(condition.value.replace(/\r\n/g, ','));
                        }
                        else {
                            result_1.push(condition.value);
                        }
                        if (opCode === types.Compare.Like || opCode === types.Compare.NotLike
                            || opCode === types.Compare.LikeStartWith || opCode === types.Compare.NotLikeStartWith) {
                            result_1.push('%');
                        }
                        result_1.push('\'');
                        result_1.push(condition.rbracket);
                        result_1.push(' ');
                        if (index !== conditionList_1.length - 1) {
                            result_1.push(condition.relation === types.FilterRelation.Empty ? '' :
                                types.FilterRelation[condition.relation].toString().toLowerCase());
                            result_1.push(' ');
                        }
                    }));
                    return result_1.join('');
                }
                return '';
            };
        ColumnFormatService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ColumnFormatService.ctorParameters = function () {
            return [
                { type: i1.DateTimeHelperService },
                { type: i2.NumberHelperService }
            ];
        };
        /** @nocollapse */ ColumnFormatService.ngInjectableDef = i0.defineInjectable({ factory: function ColumnFormatService_Factory() { return new ColumnFormatService(i0.inject(i1.DateTimeHelperService), i0.inject(i2.NumberHelperService)); }, token: ColumnFormatService, providedIn: "root" });
        return ColumnFormatService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ColumnFormatterPipe = /** @class */ (function () {
        function ColumnFormatterPipe(injector, colmunFormatSer) {
            this.injector = injector;
            this.colmunFormatSer = colmunFormatSer;
        }
        /**
         * @param {?} value
         * @param {?} col
         * @param {...?} args
         * @return {?}
         */
        ColumnFormatterPipe.prototype.transform = /**
         * @param {?} value
         * @param {?} col
         * @param {...?} args
         * @return {?}
         */
            function (value, col) {
                var args = [];
                for (var _i = 2; _i < arguments.length; _i++) {
                    args[_i - 2] = arguments[_i];
                }
                /** @type {?} */
                var data = args[0];
                if (col) {
                    if (col.formatter) {
                        return this.colmunFormatSer.format(value, data, col.formatter);
                    }
                    return value;
                }
                return value;
            };
        ColumnFormatterPipe.decorators = [
            { type: i0.Pipe, args: [{
                        name: 'columnformatter'
                    },] }
        ];
        /** @nocollapse */
        ColumnFormatterPipe.ctorParameters = function () {
            return [
                { type: i0.Injector },
                { type: ColumnFormatService }
            ];
        };
        return ColumnFormatterPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DataColumnModule = /** @class */ (function () {
        function DataColumnModule() {
        }
        /**
         * @return {?}
         */
        DataColumnModule.forRoot = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: DataColumnModule,
                    providers: [
                        ColumnFormatService
                    ]
                };
            };
        DataColumnModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            i1.DateHelperModule.forRoot(),
                            i2.NumberHelperModule.forRoot()
                        ],
                        exports: [ColumnFormatterPipe],
                        declarations: [
                            ColumnFormatterPipe
                        ],
                        providers: [],
                    },] }
        ];
        return DataColumnModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.ColumnFormatService = ColumnFormatService;
    exports.DataColumnModule = DataColumnModule;
    exports.ColumnFormatterPipe = ColumnFormatterPipe;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=farris-ui-common-column.umd.js.map