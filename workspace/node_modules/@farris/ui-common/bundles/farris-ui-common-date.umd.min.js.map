{"version":3,"sources":["ng://@farris/ui-common/date/lib/myDateConverter.ts","ng://@farris/ui-common/date/lib/timeago/lang/en.ts","ng://@farris/ui-common/date/lib/timeago/lang/zh_CHS.ts","ng://@farris/ui-common/date/lib/timeago/timeago.ts","ng://@farris/ui-common/date/lib/timeago/lang/zh_CHT.ts","ng://@farris/ui-common/date/lib/date-helper.service.ts","ng://@farris/ui-common/date/lib/date-format.pipe.ts","ng://@farris/ui-common/date/lib/date-helper.module.ts"],"names":["MyDateConverter","prototype","makePattern","code","_this","this","replace","$0","$1","regexes","RegExp","getMonthByName","monthname","MONTHNAMES_LOOKUP","String","slice","toLowerCase","getWeekdayByName","dayname","DAYNAMES_LOOKUP","zeroPad","num","digits","length","create","date","Date","now","a","arguments","Object","toString","call","pattern","ms","obj","match","regex","fn","i","patterns","parse","isNaN","NaN","MONTHNAMES","split","jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec","ABBR_MONTHNAMES","DAYNAMES","sun","mon","tue","wed","thu","fri","sat","ABBR_DAYNAMES","YEAR","MONTH","MONTH2","MONTHNAME","DAYNAME","DAY","DAY2","TIMEZONE","H24","MIN","SEC","MS","H12","AMPM","UNIT","m","month","day","parseInt","d","setMilliseconds","setHours","parseFloat","setUTCOffsetString","hour","EN_US","ZH_CN","SEC_ARRAY","toDate","input","test","trim","format","locale","opts","formatDiff","diff","localeFunc","agoIn","totalSec","Math","abs","idx","floor","diffSec","relativeDate","getLocale","Locales","register","func","en","unit","zh_CHS","zh_CHT","number","index","DateTimeHelperService","relativeTime","timeagoFmt","addDays","days","subDays","differenceInMinutes","dateLeft","dateRight","formatTo","value","fmt","indexOf","_d","parseISO","createDate","isValid","_time","filter","n","join","fullDateTime","val","$D","formatDate","firstDayOfWeek","year","getFullYear","getMonth","getDate","weekDay","getDay","week","dateInfo","dateStr","padStart","isToday","today","setDate","step","weekData","_rangeDays","getDateByDate","push","range","getWeekDate","_a","_b","baselineDate","_c","_e","getYearWeek","date1","date2","round","valueOf","ceil","getMonthWeek","w","getYear","getWeek","getNowWeekTime","begin","end","_begin","Injectable","args","providedIn","DateTimeFormatPipe","transform","_i","dateSer","Pipe","name","DateHelperModule","forRoot","ngModule","providers","NgModule","declarations","imports","CommonModule","exports"],"mappings":"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","sourcesContent":["export class MyDateConverter {\r\n    private MONTHNAMES = 'January February March April May June July August September October November December'.split(' ');\r\n    private MONTHNAMES_LOOKUP = { 'jan': 1, 'feb': 2, 'mar': 3, 'apr': 4, 'may': 5, 'jun': 6, 'jul': 7, 'aug': 8, 'sep': 9, 'oct': 10, 'nov': 11, 'dec': 12 };\r\n    /**\r\n     * @var {Array}  Abbreviated names for the months of the year\r\n     */\r\n    private ABBR_MONTHNAMES = 'Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec'.split(' ');\r\n    /**\r\n     * @var {Array}  Names for the days of the week from Sunday to Saturday\r\n     */\r\n    private DAYNAMES = 'Sunday Monday Tuesday Wednesday Thursday Friday Saturday'.split(' ');\r\n    private DAYNAMES_LOOKUP = { 'sun': 0, 'mon': 1, 'tue': 2, 'wed': 3, 'thu': 4, 'fri': 5, 'sat': 6 };\r\n    /**\r\n     * @var {Array}  Abbreviated names for the days of the week from Sunday to Saturday\r\n     */\r\n    private ABBR_DAYNAMES = 'Sun Mon Tue Wed Thu Fri Sat'.split(' ');\r\n    regexes = {\r\n        YEAR: '[1-9]\\\\d{3}',\r\n        MONTH: '1[0-2]|0?[1-9]',\r\n        MONTH2: '1[0-2]|0[1-9]',\r\n        MONTHNAME: 'jan|january|feb|february|mar|march|apr|april|may|jun|june|jul|july|aug|august|sep|september|oct|october|nov|november|dec|december',\r\n        DAYNAME: 'mon|monday|tue|tuesday|wed|wednesday|thu|thursday|fri|friday|sat|saturday|sun|sunday',\r\n        DAY: '3[01]|[12]\\\\d|0?[1-9]',\r\n        DAY2: '3[01]|[12]\\\\d|0[1-9]',\r\n        TIMEZONE: '[+-][01]\\\\d\\\\:?[0-5]\\\\d',\r\n        H24: '[01]\\\\d|2[0-3]',\r\n        MIN: '[0-5]\\\\d',\r\n        SEC: '[0-5]\\\\d',\r\n        MS: '\\\\d{3,}',\r\n        H12: '0?[1-9]|1[012]',\r\n        AMPM: 'am|pm',\r\n        UNIT: 'year|month|week|day|hour|minute|second|millisecond'\r\n    };\r\n\r\n    patterns = [\r\n        // 2010-03-15\r\n        [\r\n            'iso_8601',\r\n            this.makePattern('^(_YEAR_)-(_MONTH_)-(_DAY_)$'),\r\n            '$2/$3/$1'\r\n        ],\r\n\r\n        // 3-15-2010\r\n        [\r\n            'us',\r\n            this.makePattern('^(_MONTH_)([\\\\/-])(_DAY_)\\\\2(_YEAR_)$'),\r\n            '$1/$3/$4'\r\n        ],\r\n\r\n        // 15.03.2010\r\n        [\r\n            'world',\r\n            this.makePattern('^(_DAY_)([\\\\/\\\\.])(_MONTH_)\\\\2(_YEAR_)$'),\r\n            '$3/$1/$4'\r\n        ],\r\n\r\n        // 15-Mar-2010, 8 Dec 2011, \"Thu, 8 Dec 2011\"\r\n        [\r\n            'chicago',\r\n            this.makePattern('^(?:(?:_DAYNAME_),? )?(_DAY_)([ -])(_MONTHNAME_)\\\\2(_YEAR_)$'),\r\n            '$3 $1, $4'\r\n        ],\r\n\r\n        // \"March 4, 2012\", \"Mar 4 2012\", \"Sun Mar 4 2012\"\r\n        [\r\n            'conversational',\r\n            this.makePattern('^(?:(?:_DAYNAME_),? )?(_MONTHNAME_) (_DAY_),? (_YEAR_)$'),\r\n            '$1 $2, $3'\r\n        ],\r\n\r\n        // Tue Jun 22 17:47:27 +0000 2010\r\n        [\r\n            'month_day_time_year',\r\n            this.makePattern('^(?:_DAYNAME_) (_MONTHNAME_) (_DAY_) ((?:_H24_)\\\\:(?:_MIN_)(?:\\\\:_SEC_)?) (_TIMEZONE_) (_YEAR_)$'),\r\n            (m) => {\r\n                const month = this.zeroPad(this.getMonthByName(m[1]), 2);\r\n                const day = this.zeroPad(m[2], 2);\r\n                const date: any = this.create(m[5] + '-' + month + '-' + day + 'T' + m[3] + m[4]);\r\n                if (isNaN(date)) {\r\n                    return false;\r\n                }\r\n                return date;\r\n            }\r\n        ],\r\n\r\n        // @123456789\r\n        [\r\n            'unix',\r\n            /^@(-?\\d+)$/,\r\n            (match) => {\r\n                return this.create(parseInt(match[1], 10) * 1000);\r\n            }\r\n        ],\r\n\r\n        // 24-hour time (This will help catch Date objects that are casted to a string)\r\n        [\r\n            '24_hour',\r\n            this.makePattern('^(?:(.+?)(?: |T))?(_H24_)\\\\:(_MIN_)(?:\\\\:(_SEC_)(?:\\\\.(_MS_))?)? ?(?:GMT)?(_TIMEZONE_)?(?: \\\\([A-Z]+\\\\))?$'),\r\n            (match) => {\r\n                let d;\r\n                if (match[1]) {\r\n                    d = this.create(match[1]);\r\n                    if (isNaN(d)) {\r\n                        return false;\r\n                    }\r\n                } else {\r\n                    d = new Date();\r\n                    d.setMilliseconds(0);\r\n                }\r\n                d.setHours(parseFloat(match[2]), parseFloat(match[3]), parseFloat(match[4] || 0));\r\n                if (match[5]) {\r\n                    d.setMilliseconds(+String(match[5]).slice(0, 3));\r\n                }\r\n                if (match[6]) {\r\n                    d.setUTCOffsetString(match[6]);\r\n                }\r\n                return d;\r\n            }\r\n        ],\r\n\r\n        // 12-hour time\r\n        [\r\n            '12_hour',\r\n            this.makePattern('^(?:(.+) )?(_H12_)(?:\\\\:(_MIN_)(?:\\\\:(_SEC_))?)? ?(_AMPM_)$'),\r\n            (match) => {\r\n                let d;\r\n                if (match[1]) {\r\n                    d = this.create(match[1]);\r\n                    if (isNaN(d)) {\r\n                        return false;\r\n                    }\r\n                } else {\r\n                    d = new Date();\r\n                    d.setMilliseconds(0);\r\n                }\r\n                let hour = parseFloat(match[2]);\r\n                hour = match[5].toLowerCase() == 'am' ? (hour == 12 ? 0 : hour) : (hour == 12 ? 12 : hour + 12);\r\n                d.setHours(hour, parseFloat(match[3] || 0), parseFloat(match[4] || 0));\r\n                return d;\r\n            }\r\n        ]\r\n\r\n    ];\r\n\r\n    makePattern(code) {\r\n        code = code.replace(/_([A-Z][A-Z0-9]+)_/g, ($0, $1) => {\r\n            return this.regexes[$1];\r\n        });\r\n        return new RegExp(code, 'i');\r\n    }\r\n\r\n    getMonthByName(monthname) {\r\n        return this.MONTHNAMES_LOOKUP[String(monthname).slice(0, 3).toLowerCase()];\r\n    }\r\n\r\n    getWeekdayByName(dayname) {\r\n        return this.DAYNAMES_LOOKUP[String(dayname).slice(0, 3).toLowerCase()];\r\n    }\r\n\r\n    private zeroPad(num, digits) {\r\n        switch (digits - String(num).length) {\r\n            case 2: return '00' + num;\r\n            case 1: return '0' + num;\r\n        }\r\n        return num;\r\n    }\r\n\r\n    create(date) {\r\n        // 0 arguments or date is undefined\r\n        if (typeof date == 'undefined') {\r\n            return Date.now();\r\n        }\r\n        // If the passed value is already a date object, return it\r\n        if (date instanceof Date) {\r\n            return date;\r\n        }\r\n        const a = arguments;\r\n        switch (a.length) {\r\n            case 1:\r\n                // If the passed value is an integer, interpret it as ms past epoch\r\n                if (Object.prototype.toString.call(date) == '[object Number]') {\r\n                    return new Date(date);\r\n                }\r\n                // trim the date\r\n                date = String(date).replace(/^\\s*(.*)\\s*$/, '$1');\r\n                // normalize whitespace\r\n                date = date.replace(/\\s{2,}/g, ' ');\r\n                if (date === '') {\r\n                    return Date.now();\r\n                }\r\n                var i = 0, pattern, ms, obj, match, regex, fn;\r\n                // try each of our patterns\r\n                while ((pattern = this.patterns[i++])) {\r\n                    if (typeof pattern[0] == 'string') {\r\n                        // pattern[0] is the name of the pattern\r\n                        regex = pattern[1];\r\n                        fn = pattern[2];\r\n                    } else {\r\n                        // backwards compatibility with version 3.1\r\n                        regex = pattern[0];\r\n                        fn = pattern[1];\r\n                    }\r\n                    if (!(match = date.match(regex))) {\r\n                        continue;\r\n                    }\r\n                    if (typeof fn == 'function') {\r\n                        obj = fn(match, date);\r\n                        if (obj instanceof Date) {\r\n                            return obj;\r\n                        }\r\n                    } else {\r\n                        // fn is not a function but a string replace command\r\n                        ms = Date.parse(date.replace(regex, fn));\r\n                        if (!isNaN(ms)) {\r\n                            return new Date(ms);\r\n                        }\r\n                    }\r\n                }\r\n                return NaN;\r\n            case 2: return new Date(a[0], a[1], 1);\r\n            case 3: return new Date(a[0], a[1], a[2]);\r\n            case 4: return new Date(a[0], a[1], a[2], a[3]);\r\n            case 5: return new Date(a[0], a[1], a[2], a[3], a[4]);\r\n            case 6: return new Date(a[0], a[1], a[2], a[3], a[4], a[5]);\r\n            default: return new Date(a[0], a[1], a[2], a[3], a[4], a[5], a[6]);\r\n        }\r\n    }\r\n}\r\n","const EN_US = ['second', 'minute', 'hour', 'day', 'week', 'month', 'year'];\r\n\r\nexport default function (diff: number, idx: number): [string, string] {\r\n    if (idx === 0) return ['just now', 'right now'];\r\n    let unit = EN_US[Math.floor(idx / 2)];\r\n    if (diff > 1) unit += 's';\r\n    return [`${diff} ${unit} ago`, `in ${diff} ${unit}`];\r\n}\r\n","const ZH_CN = ['ç§', 'åé', 'å°æ¶', 'å¤©', 'å¨', 'ä¸ªæ', 'å¹´'];\r\n\r\nexport default function (diff: number, idx: number): [string, string] {\r\n    if (idx === 0) return ['åå', 'çå»å'];\r\n    const unit = ZH_CN[~~(idx / 2)];\r\n    return [`${diff} ${unit}å`, `${diff} ${unit}å`];\r\n}\r\n","import {en, zh_CHS, zh_CHT} from './lang';\r\n\r\nexport type TDate = Date | string | number;\r\nexport type LocaleFunc = (diff: number, idx: number, totalSec?: number) => [string, string];\r\nexport type LocaleMap = Record<string, LocaleFunc>;\r\n\r\n/**\r\n * render / format options\r\n */\r\n export type Opts = {\r\n    /** the relative date */\r\n    readonly relativeDate?: TDate;\r\n    /** the realtime */\r\n    readonly minInterval?: number;\r\n  };\r\n  \r\n\r\nconst SEC_ARRAY = [\r\n    60, // 60 seconds in 1 min\r\n    60, // 60 mins in 1 hour\r\n    24, // 24 hours in 1 day\r\n    7, // 7 days in 1 week\r\n    365 / 7 / 12, // 4.345238095238096 weeks in 1 month\r\n    12, // 12 months in 1 year\r\n];\r\n\r\nexport function toDate(input?: Date | string | number): Date {\r\n    if (input instanceof Date) return input;\r\n    // @ts-ignore\r\n    if (!isNaN(input) || /^\\d+$/.test(input)) return new Date(parseInt(input));\r\n    input = (input || '')\r\n        // @ts-ignore\r\n        .trim()\r\n        .replace(/\\.\\d+/, '') // remove milliseconds\r\n        .replace(/-/, '/')\r\n        .replace(/-/, '/')\r\n        .replace(/(\\d)T(\\d)/, '$1 $2')\r\n        .replace(/Z/, ' UTC') // 2017-2-5T3:57:52Z -> 2017-2-5 3:57:52UTC\r\n        .replace(/([+-]\\d\\d):?(\\d\\d)/, ' $1$2'); // -04:00 -> -0400\r\n    return new Date(input);\r\n}\r\n\r\n/**\r\n * format the diff second to *** time ago, with setting locale\r\n * @param diff\r\n * @param localeFunc\r\n * @returns\r\n */\r\nexport function formatDiff(diff: number, localeFunc: LocaleFunc): string {\r\n    /**\r\n     * if locale is not exist, use defaultLocale.\r\n     * if defaultLocale is not exist, use build-in `en`.\r\n     * be sure of no error when locale is not exist.\r\n     *\r\n     * If `time in`, then 1\r\n     * If `time ago`, then 0\r\n     */\r\n    const agoIn = diff < 0 ? 1 : 0;\r\n\r\n    /**\r\n     * Get absolute value of number (|diff| is non-negative) value of x\r\n     * |diff| = diff if diff is positive\r\n     * |diff| = -diff if diff is negative\r\n     * |0| = 0\r\n     */\r\n    diff = Math.abs(diff);\r\n\r\n    /**\r\n     * Time in seconds\r\n     */\r\n    const totalSec = diff;\r\n\r\n    /**\r\n     * Unit of time\r\n     */\r\n    let idx = 0;\r\n\r\n    for (; diff >= SEC_ARRAY[idx] && idx < SEC_ARRAY.length; idx++) {\r\n        diff /= SEC_ARRAY[idx];\r\n    }\r\n\r\n    /**\r\n     * Math.floor() is alternative of ~~\r\n     *\r\n     * The differences and bugs:\r\n     * Math.floor(3.7) -> 4 but ~~3.7 -> 3\r\n     * Math.floor(1559125440000.6) -> 1559125440000 but ~~1559125440000.6 -> 52311552\r\n     *\r\n     * More information about the performance of algebraic:\r\n     * https://www.youtube.com/watch?v=65-RbBwZQdU\r\n     */\r\n    diff = Math.floor(diff);\r\n\r\n    idx *= 2;\r\n\r\n    if (diff > (idx === 0 ? 9 : 1)) idx += 1;\r\n\r\n    return localeFunc(diff, idx, totalSec)[agoIn].replace('%s', diff.toString());\r\n}\r\n\r\n/**\r\n * calculate the diff second between date to be formatted an now date.\r\n * @param date\r\n * @param relativeDate\r\n */\r\nexport function diffSec(date: TDate, relativeDate: TDate): number {\r\n    const relDate = relativeDate ? toDate(relativeDate) : new Date();\r\n    return (+relDate - +toDate(date)) / 1000;\r\n}\r\n\r\n/**\r\n * nextInterval: calculate the next interval time.\r\n * - diff: the diff sec between now and date to be formatted.\r\n *\r\n * What's the meaning?\r\n * diff = 61 then return 59\r\n * diff = 3601 (an hour + 1 second), then return 3599\r\n * make the interval with high performance.\r\n **/\r\nexport function nextInterval(diff: number): number {\r\n    let rst = 1,\r\n        i = 0,\r\n        d = Math.abs(diff);\r\n    for (; diff >= SEC_ARRAY[i] && i < SEC_ARRAY.length; i++) {\r\n        diff /= SEC_ARRAY[i];\r\n        rst *= SEC_ARRAY[i];\r\n    }\r\n    d = d % rst;\r\n    d = d ? rst - d : rst;\r\n    return Math.ceil(d);\r\n}\r\n\r\n\r\nexport const format = (date: TDate, locale?: string, opts?: Opts): string => {\r\n    // diff seconds\r\n    const sec = diffSec(date, opts && opts.relativeDate);\r\n    // format it with locale\r\n    return formatDiff(sec, getLocale(locale));\r\n};\r\n\r\n\r\n/**\r\n * All supported locales\r\n */\r\nconst Locales: LocaleMap = {};\r\n\r\n/**\r\n * register a locale\r\n * @param locale\r\n * @param func\r\n */\r\nexport const register = (locale: string, func: LocaleFunc) => {\r\n    Locales[locale] = func;\r\n};\r\n\r\n/**\r\n * get a locale, default is en_US\r\n * @param locale\r\n */\r\nexport const getLocale = (locale: string): LocaleFunc => {\r\n    return Locales[locale] || Locales['zh-CHS'];\r\n};\r\n\r\n\r\nregister('en', en);\r\nregister('zh-CHS', zh_CHS);\r\nregister('zh-CHT', zh_CHT);\r\n\r\n\r\n","export default function (number: number, index: number): [string, string] {\r\n    return [\r\n        ['åå', 'çå»å¾'],\r\n        ['%s ç§å', '%s ç§å¾'],\r\n        ['1 åéå', '1 åéå¾'],\r\n        ['%s åéå', '%s åéå¾'],\r\n        ['1 å°æå', '1 å°æå¾'],\r\n        ['%s å°æå', '%s å°æå¾'],\r\n        ['1 å¤©å', '1 å¤©å¾'],\r\n        ['%s å¤©å', '%s å¤©å¾'],\r\n        ['1 é±å', '1 é±å¾'],\r\n        ['%s é±å', '%s é±å¾'],\r\n        ['1 åæå', '1 åæå¾'],\r\n        ['%s åæå', '%s åæå¾'],\r\n        ['1 å¹´å', '1 å¹´å¾'],\r\n        ['%s å¹´å', '%s å¹´å¾'],\r\n    ][index] as [string, string];\r\n}\r\n","/*\r\n * @Author: ç¯çç§æ(Lucas Huang)\r\n * @Date: 2019-09-02 17:55:57\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-10-23 16:57:28\r\n * @QQ: 1055818239\r\n * @Version: v0.0.1\r\n */\r\nimport { addDays, differenceInMinutes, format, isValid, parseISO, subDays } from \"date-fns\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { MyDateConverter } from \"./myDateConverter\";\r\n\r\nimport { format as timeagoFmt, TDate } from './timeago/timeago';\r\n\r\n\r\nexport type FirstDayOfWeek = 'ä¸' | 'æ¥';\r\n\r\n@Injectable({\r\n    providedIn: \"root\",\r\n})\r\nexport class DateTimeHelperService {\r\n    private $D = null;\r\n\r\n    constructor() {\r\n        this.$D = new MyDateConverter();\r\n    }\r\n\r\n    relativeTime(date: TDate, locale: 'en'|'zh-CHS'|'zh-CHT' = 'zh-CHS') {\r\n        if (date) {\r\n            return timeagoFmt(date, locale);\r\n        }\r\n        return '';\r\n    }\r\n\r\n    addDays(date: Date, days: number) {\r\n        return addDays(date, days);\r\n    }\r\n\r\n    subDays(date: Date, days: number) {\r\n        return subDays(date, days);\r\n    }\r\n\r\n    differenceInMinutes(dateLeft: Date | number, dateRight: Date | number) {\r\n        return differenceInMinutes(dateLeft, dateRight);\r\n    }\r\n\r\n    /**\r\n     * @param value è¦è½¬æ¢æ ¼å¼çæ¥æ\r\n     * @param fmt æ ¼å¼åå­ç¬¦ä¸²\r\n     *\r\n     * æ´å¤çæ ¼å¼åè¯·åè\r\n     * [ç¹æç¹æ](https://date-fns.org/v1.30.1/docs/format)\r\n     */\r\n    formatTo(value: any, fmt: string = \"yyyy-MM-dd\") {\r\n        if (!value) {\r\n            return \"\";\r\n        }\r\n\r\n        if (typeof value === \"string\" && value.indexOf(\"0001\") === 0) {\r\n            return \"\";\r\n        }\r\n\r\n        if (value instanceof Date) {\r\n            return format(value, fmt);\r\n        }\r\n\r\n        let _d: any = parseISO(value);\r\n\r\n        if (_d == \"Invalid Date\") {\r\n            _d = this.createDate(value) || new Date(value);\r\n        }\r\n\r\n        // const d = parseISO(value);\r\n        if (isValid(_d)) {\r\n            const d = parseISO(format(_d, \"yyyy-MM-dd HH:mm:ss\"));\r\n            return format(d, fmt);\r\n        } else {\r\n            // console.error(`${value} è½¬æ¢ä¸ºDateæ¶å¤±è´¥ã`);\r\n            if (fmt.indexOf(\"HH\") === 0 || fmt.indexOf(\"hh\") === 0) {\r\n                // ä»ææ¶é´é¨å\r\n                // æåæ¶é´\r\n                const _time = value\r\n                    .match(/\\d*/g)\r\n                    .filter((n) => n !== \"\")\r\n                    .join(\":\");\r\n\r\n                if (fmt === \"HH\" || fmt === \"hh\") {\r\n                    fmt = fmt += \":mm\";\r\n                }\r\n\r\n                // const fullDateTime = new Date('2022-11-25 ' + _time);\r\n                const fullDateTime = parseISO(\"2022-11-25 \" + _time);\r\n                return format(fullDateTime, fmt);\r\n            }\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    private createDate(val) {\r\n        return this.$D.create(val);\r\n    }\r\n\r\n    // æ ¹æ®åæ°æ¥æè·åå·ä½æ¥æä¿¡æ¯\r\n    private formatDate(date = new Date(), firstDayOfWeek: FirstDayOfWeek = 'ä¸') {\r\n        let year = date.getFullYear();\r\n        let month = date.getMonth() + 1;\r\n        let day = date.getDate();\r\n\r\n        let weekDay = date.getDay();\r\n        if (firstDayOfWeek === 'ä¸') {\r\n            if (!weekDay) {\r\n                weekDay = 6;\r\n            } else {\r\n                weekDay = weekDay - 1;\r\n            }\r\n        }\r\n\r\n        let week = [\"ä¸\", \"äº\", \"ä¸\", \"å\", \"äº\", \"å­\", \"æ¥\"][weekDay];\r\n\r\n        const dateInfo = {\r\n            date: new Date(date),\r\n            dateStr: `${year}-${month.toString().padStart(2, \"0\")}-${day\r\n                .toString()\r\n                .padStart(2, \"0\")}`,\r\n            year,\r\n            month,\r\n            day,\r\n            week,\r\n            isToday: false,\r\n        };\r\n\r\n        const today = new Date();\r\n        // å¤æ­æ¯å¦ä¸ºå½å¤©\r\n        if (\r\n            today.getFullYear() === year &&\r\n            today.getMonth() + 1 === month &&\r\n            today.getDate() === day\r\n        ) {\r\n            dateInfo[\"isToday\"] = true;\r\n        }\r\n        return dateInfo;\r\n    }\r\n\r\n    // æ ¹æ®åºåæ¥æï¼è·åé¿åº¦ä¸ºdayLenthçæ¥ææ°ç»\r\n    private setDate(date = new Date(), step = 7, firstDayOfWeek: FirstDayOfWeek = 'ä¸') {\r\n        let weekData = [];\r\n        const week = date.getDay() - 1;\r\n\r\n\r\n        let _rangeDays = week * -1; // ä»¥å¨ä¸ä¸ºç¬¬1å¤©\r\n\r\n        if (firstDayOfWeek === 'æ¥') {\r\n            _rangeDays = _rangeDays - 1;\r\n        }\r\n        date = this.getDateByDate(date, _rangeDays); // ä»¥å¨æ¥ä¸ºç¬¬1å¤©æ¶ -1\r\n        for (let i = 0; i < step; i++) {\r\n            weekData.push(\r\n                this.formatDate(i == 0 ? date : this.getDateByDate(date, 1), firstDayOfWeek)\r\n            );\r\n        }\r\n        return weekData;\r\n    }\r\n\r\n    // æ ¹æ®åºåæ¥æè·åååæå¤©çæ¥æå¯¹è±¡\r\n    private getDateByDate(date = new Date(), range = 0) {\r\n        date.setDate(date.getDate() + range);\r\n        return date;\r\n    }\r\n\r\n    /* \r\n    è·åä»¥baselineDateæå¨å¨çä¸å¨ãåä¸å¨ãä¸ä¸å¨çæ¥æåææä¿¡æ¯(åæ¢å¨æä¹å¯éè¿åæ°dayLenthèªè¡è®¾ç½®)\r\n    baselineDate: è®¾ç½®çåºåæ¥æ(è¿åçæ¥æåè¡¨çç¬¬ä¸ä¸ªæ¥æ)\r\n    range: ä»¥ baselineDate ä¸ºåºåæ¥æçååå¤©æ°èå´(å¦åºåæ¥æçrangeä¸º0ï¼éè¦è¿åå7å¤©æ¥æï¼årangeä¸º-7ï¼å7å¤©årangeä¸º7)\r\n    step: éè¦è·åçæ¥æä¿¡æ¯å¨æå¤©æ°ï¼é»è®¤è·åbaselineDateæå¨å¨çä¸å¨æ¥æä¿¡æ¯\r\n    firstDayOfWeek: æ¯å¨ç¬¬ä¸å¤© æ¯ å¨ä¸ï¼è¿æ¯å¨æ¥ï¼é»è®¤ä¸º å¨ä¸\r\n   */\r\n    getWeekDate({ baselineDate = new Date(), range = 0, step = 7 }, firstDayOfWeek: FirstDayOfWeek = 'ä¸') {\r\n        return this.setDate(this.getDateByDate(baselineDate, range), step, firstDayOfWeek);\r\n    }\r\n\r\n    /** æ ¹æ®å½åæ¥æï¼è·åå½åæ¯æå¨å¹´çç¬¬å å¨ */\r\n    getYearWeek(year, month, day) {//aä¸ºå¹´ bä¸ºæ cä¸ºæ¥\r\n        /*  \r\n        date1æ¯å½åæ¥æ  \r\n        date2æ¯å½å¹´ç¬¬ä¸å¤©  \r\n        dæ¯å½åæ¥ææ¯ä»å¹´ç¬¬å¤å°å¤©  \r\n        ç¨d + å½åå¹´çç¬¬ä¸å¤©çå¨å·®è·çåå¨é¤ä»¥7å°±æ¯æ¬å¹´ç¬¬å å¨  \r\n        */\r\n        var date1 = new Date(year, parseInt(month) - 1, day),\r\n            date2 = new Date(year, 0, 1),\r\n            d = Math.round((date1.valueOf() - date2.valueOf()) / 86400000);\r\n        return Math.ceil((d + ((date2.getDay() + 1) - 1)) / 7);\r\n    }\r\n\r\n    getMonthWeek(year, month, day) {\r\n        /**\r\n        * a = d = å½åæ¥æ\r\n        * b = 6 - w = å½åå¨çè¿æå å¤©è¿å®(ä¸ç®ä»å¤©)\r\n        * a + b çåå¨é¤ä»¥7 å°±æ¯å½å¤©æ¯å½åæä»½çç¬¬å å¨\r\n        */\r\n        var date = new Date(year, parseInt(month) - 1, day),\r\n            w = date.getDay(),\r\n            d = date.getDate();\r\n        if (w == 0) {\r\n            w = 7;\r\n        }\r\n        var config = {\r\n            getMonth: date.getMonth() + 1,\r\n            getYear: date.getFullYear(),\r\n            getWeek: Math.ceil((d + 6 - w) / 7),\r\n        }\r\n        return config;\r\n    }\r\n\r\n\r\n    getNowWeekTime(date: Date, firstDayOfWeek: FirstDayOfWeek) {\r\n        date.setDate(date.getDate() - ((date.getDay() + 6) % 7));\r\n        const begin = {\r\n            year: date.getFullYear(),\r\n            month: date.getMonth() + 1,\r\n            day: date.getDate()\r\n        };\r\n        date.setDate(date.getDate() + 6);\r\n        const end = {\r\n            year: date.getFullYear(),\r\n            month: date.getMonth() + 1,\r\n            day: date.getDate()\r\n        };\r\n\r\n        if (firstDayOfWeek === 'ä¸') {\r\n            return { begin, end };\r\n        } else {\r\n            if (date.getDay() != 0) {\r\n                date.setDate(date.getDate() - date.getDay());\r\n            }\r\n\r\n            const _begin = {\r\n                year: date.getFullYear(),\r\n                month: date.getMonth() + 1,\r\n                day: date.getDate()\r\n            };\r\n\r\n            date.setDate(date.getDate() + 6 - date.getDay());\r\n            const _end = {\r\n                year: date.getFullYear(),\r\n                month: date.getMonth() + 1,\r\n                day: date.getDate()\r\n            }\r\n\r\n            return {\r\n                begin: _begin,\r\n                end: _end\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DateTimeHelperService } from './date-helper.service';\r\n\r\n@Pipe({\r\n    name: 'dateformat'\r\n})\r\nexport class DateTimeFormatPipe implements PipeTransform {\r\n    constructor(private dateSer: DateTimeHelperService) {}\r\n    transform(value: any, ...args: any[]): any {\r\n        if (value) {\r\n            let fmt = 'yyyy-MM-dd';\r\n            if (args && args.length) {\r\n                fmt = args[0];\r\n            }\r\n\r\n            if (fmt === 'timeago') {\r\n                const locale = args[1] || 'zh-CHS';\r\n                return this.dateSer.relativeTime(value, locale);\r\n            }\r\n\r\n            return this.dateSer.formatTo(value, fmt);\r\n        }\r\n    }\r\n}","import { DateTimeHelperService } from './date-helper.service';\r\nimport { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DateTimeFormatPipe } from './date-format.pipe';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        DateTimeFormatPipe\r\n    ],\r\n    imports: [ CommonModule ],\r\n    exports: [\r\n        DateTimeFormatPipe\r\n    ],\r\n    providers: [],\r\n})\r\nexport class DateHelperModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: DateHelperModule,\r\n            providers: [\r\n                DateTimeHelperService\r\n            ]\r\n        };\r\n    }\r\n}\r\n"]}