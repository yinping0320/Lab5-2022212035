{"version":3,"file":"farris-ui-common-number.umd.js.map","sources":["ng://@farris/ui-common/number/numer-helper.service.ts","ng://@farris/ui-common/number/number-helper.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BigNumber } from 'bignumber.js';\r\n\r\nexport type NumberType = string | number;\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class NumberHelperService {\r\n    constructor() { }\r\n\r\n    formatMoney(value, opts: any = {}): string {\r\n        return this.formatValue(value, opts);\r\n    }\r\n\r\n    formatNumber(value, opts: any = {}): string {\r\n        return this.formatValue(value, opts);\r\n    }\r\n\r\n    unformat(value, opts: any = {}) {\r\n        return this._unformat(value, opts);\r\n    }\r\n\r\n    /** è·åæå¤§å¼ */\r\n    max(n1: any, n2 = null) {\r\n        if (Array.isArray(n1)) {\r\n            return BigNumber.max.apply(null, n1).toFixed();\r\n        } else {\r\n            if (n1 && n2) {\r\n                return BigNumber.maximum(n1, n2).toFixed();\r\n            } else {\r\n                console.error(`è¯·æä¾æ¯è¾çå¼n1ãn2.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** æå°å¼ */\r\n    min(n1: any, n2 = null) {\r\n        if (Array.isArray(n1)) {\r\n            return BigNumber.min.apply(null, n1).toFixed();\r\n        } else {\r\n            if (n1 && n2) {\r\n                return BigNumber.minimum(n1, n2).toFixed();\r\n            } else {\r\n                console.error(`è¯·æä¾æ¯è¾çå¼n1ãn2.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** æ±å */\r\n    sum(n1: NumberType[]) {\r\n        return BigNumber.sum.apply(null, n1).toFixed();\r\n    }\r\n\r\n    /** å¹³åæ° */\r\n    avg(n1: NumberType, len: number) {\r\n        return new BigNumber(n1).div(len).toFixed();\r\n    }\r\n\r\n    /**  å æ³ */\r\n    plus(n1: NumberType, n2: NumberType) {\r\n        return new BigNumber(n1).plus(n2).toFixed();\r\n    }\r\n\r\n    /** ä¹æ³ */\r\n    multiplied(n1: NumberType, n2: NumberType) {\r\n        new BigNumber(n1).times(n2).toFixed();\r\n    }\r\n\r\n    /** åæ³ */\r\n    minus(n1: NumberType, n2: NumberType) {\r\n        return new BigNumber(n1).minus(n2).toFixed();\r\n    }\r\n\r\n    /** æ¯å¦ç¸ç­ */\r\n    eq(n1: NumberType, n2: NumberType): boolean {\r\n        return new BigNumber(n1).eq(n2);\r\n    }\r\n\r\n    lt(n1: NumberType, n2: NumberType): boolean {\r\n        return new BigNumber(n1).lt(n2);\r\n    }\r\n    gt(n1: NumberType, n2: NumberType): boolean {\r\n        return new BigNumber(n1).gt(n2);\r\n    }\r\n\r\n    toNumber(n1: string) {\r\n        return new BigNumber(n1).toNumber();\r\n    }\r\n\r\n    toFixed(n1: string, precision: number = 0) {\r\n        return new BigNumber(n1).toFixed(precision);\r\n    }\r\n\r\n    convertCurrency(money) {\r\n        // æ±å­çæ°å­\r\n        const cnNums = new Array('é¶', 'å£¹', 'è´°', 'å', 'è', 'ä¼', 'é', 'æ', 'æ', 'ç');\r\n        // åºæ¬åä½\r\n        const cnIntRadice = new Array('', 'æ¾', 'ä½°', 'ä»');\r\n        // å¯¹åºæ´æ°é¨åæ©å±åä½\r\n        const cnIntUnits = new Array('', 'ä¸', 'äº¿', 'å');\r\n        // å¯¹åºå°æ°é¨ååä½\r\n        const cnDecUnits = new Array('è§', 'å', 'æ¯«', 'å');\r\n        // æ´æ°éé¢æ¶åé¢è·çå­ç¬¦\r\n        const cnInteger = 'æ´';\r\n        // æ´åå®ä»¥åçåä½\r\n        const cnIntLast = 'å';\r\n        // æå¤§å¤ççæ°å­\r\n        const maxNum = 999999999999999.9999;\r\n        // éé¢æ´æ°é¨å\r\n        let integerNum;\r\n        // éé¢å°æ°é¨å\r\n        let decimalNum;\r\n        // è¾åºçä¸­æéé¢å­ç¬¦ä¸²\r\n        let chineseStr = '';\r\n        // åç¦»éé¢åç¨çæ°ç»ï¼é¢å®ä¹\r\n        let parts;\r\n        if (money == '') { return ''; }\r\n        money = parseFloat(money);\r\n        if (money >= maxNum) {\r\n            // è¶åºæå¤§å¤çæ°å­\r\n            return '';\r\n        }\r\n        if (money === 0) {\r\n            chineseStr = cnNums[0] + cnIntLast + cnInteger;\r\n            return chineseStr;\r\n        }\r\n        // è½¬æ¢ä¸ºå­ç¬¦ä¸²\r\n        money = money.toString();\r\n        if (money.indexOf('.') === -1) {\r\n            integerNum = money;\r\n            decimalNum = '';\r\n        } else {\r\n            parts = money.split('.');\r\n            integerNum = parts[0];\r\n            decimalNum = parts[1].substr(0, 4);\r\n        }\r\n        // è·åæ´åé¨åè½¬æ¢\r\n        if (parseInt(integerNum, 10) > 0) {\r\n            let zeroCount = 0;\r\n            const IntLen = integerNum.length;\r\n            for (let i = 0; i < IntLen; i++) {\r\n                const n = integerNum.substr(i, 1);\r\n                const p = IntLen - i - 1;\r\n                const q = p / 4;\r\n                const m = p % 4;\r\n                if (n == '0') {\r\n                    zeroCount++;\r\n                } else {\r\n                    if (zeroCount > 0) {\r\n                        chineseStr += cnNums[0];\r\n                    }\r\n                    // å½é¶\r\n                    zeroCount = 0;\r\n                    chineseStr += cnNums[parseInt(n, 10)] + cnIntRadice[m];\r\n                }\r\n                if (m == 0 && zeroCount < 4) {\r\n                    chineseStr += cnIntUnits[q];\r\n                }\r\n            }\r\n            chineseStr += cnIntLast;\r\n        }\r\n        // å°æ°é¨å\r\n        if (decimalNum !== '') {\r\n            const decLen = decimalNum.length;\r\n            for (let i = 0; i < decLen; i++) {\r\n                let n = decimalNum.substr(i, 1);\r\n                if (n !== '0') {\r\n                    chineseStr += cnNums[Number(n)] + cnDecUnits[i];\r\n                }\r\n            }\r\n        }\r\n        if (chineseStr === '') {\r\n            chineseStr += cnNums[0] + cnIntLast + cnInteger;\r\n        } else if (decimalNum === '') {\r\n            chineseStr += cnInteger;\r\n        }\r\n        return chineseStr;\r\n\r\n    }\r\n\r\n    private _unformat(val, opts) {\r\n        val = (val === null || val === undefined || isNaN(val)) ? '' : String(val);\r\n        if (opts) {\r\n            // å»åç¼\r\n            if (opts.prefix) {\r\n                val = val.replace(new RegExp(opts.prefix, 'g'), '');\r\n            }\r\n\r\n            // å»åç¼\r\n            if (opts.suffix) {\r\n                val = val.replace(new RegExp(opts.suffix, 'g'), '');\r\n            }\r\n\r\n            // å»æååä½åéç¬¦\r\n            val = val.replace(/\\,/g, '');\r\n        }\r\n        return val;\r\n    }\r\n\r\n    private formatValue(value, opts: any) {\r\n        const bignum = new BigNumber(value);\r\n        const fmt = {\r\n            prefix: opts.prefix || '',\r\n            suffix: opts.suffix || '',\r\n            decimalSeparator: opts.decimal || '.',\r\n            groupSeparator: opts.thousand || '',\r\n            groupSize: 3\r\n        };\r\n\r\n        if (bignum.isNaN()) {\r\n            return '';\r\n        }\r\n\r\n        let precision = opts.precision || 0;\r\n        precision = Number(precision);\r\n\r\n        return bignum.toFormat(precision, fmt);\r\n    }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { NumberHelperService } from './numer-helper.service';\r\n\r\n\r\n@NgModule({\r\n    imports: [],\r\n    exports: [],\r\n    declarations: [],\r\n    providers: [],\r\n})\r\nexport class NumberHelperModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: NumberHelperModule,\r\n            providers: [\r\n                NumberHelperService\r\n            ]\r\n        };\r\n    }\r\n}\r\n"],"names":["BigNumber","Injectable","NgModule"],"mappings":"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"}
