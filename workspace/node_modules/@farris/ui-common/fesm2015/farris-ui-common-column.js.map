{"version":3,"file":"farris-ui-common-column.js.map","sources":["ng://@farris/ui-common/column/column-format.service.ts","ng://@farris/ui-common/column/data-formatter.pipe.ts","ng://@farris/ui-common/column/data-column.module.ts"],"sourcesContent":["import { Injectable, Injector, Optional } from '@angular/core';\r\nimport { NumberHelperService } from '@farris/ui-common/number';\r\nimport { DateTimeHelperService } from '@farris/ui-common/date';\r\nimport { ColumnFormatter, NumberFormatOptions, EnumFormatOptions, ImageFormatOptions, BooleanFormatOptions, DataFormatter } from './column-format.options';\r\nimport { FilterCondition, Compare, FilterRelation, CompareOperators, SortCondition, SortType } from '@farris/ui-common/types';\r\n/*\r\n * @Author: ç¯çç§æ(Lucas Huang)\r\n * @Date: 2019-01-02 14:12:47\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-10-18 13:59:34\r\n * @Company: Inspur\r\n * @Version: v0.0.1\r\n */\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ColumnFormatService {\r\n    constructor(public datehelper: DateTimeHelperService, public numberhelper: NumberHelperService) {\r\n    }\r\n\r\n    format(value: any, data?: any, formatter?: DataFormatter, context?: any) {\r\n        if (formatter) {\r\n            if (typeof(formatter) === 'function') {\r\n                context = context || {};\r\n                return formatter(value, data, { date: this.datehelper, number: this.numberhelper, format: this, ...context });\r\n            } else {\r\n                if (formatter['type']) {\r\n                    const fmt = formatter as ColumnFormatter;\r\n                    switch (fmt.type) {\r\n                        case 'datetime':\r\n                            return this.dateTimeFormat(value, fmt.options);\r\n                        case 'timeago': \r\n                            const {locale} = fmt.options;\r\n                            return this.datehelper.relativeTime(value, locale || 'zh-CHS');\r\n                        case 'number':\r\n                            return this.numberFormat(value, fmt.options);\r\n                        case 'enum':\r\n                            return this.enumFormat(value, fmt.options);\r\n                        case 'image':\r\n                            return this.imageFormat(value, fmt.options);\r\n                        case 'boolean':\r\n                        case 'boolean2':\r\n                            return this.booleanFormat(value, fmt.options);\r\n                        default:\r\n                            return value;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n\r\n    private dateTimeFormat(value: any, opts: any) {\r\n        if (value) {\r\n            let fmt = 'yyyy-MM-dd';\r\n            if (typeof(opts) === 'string') {\r\n                fmt = opts;\r\n            } else if (typeof(opts) === 'object') {\r\n                fmt = opts.format || 'yyyy-MM-dd';\r\n            }\r\n\r\n            fmt = fmt.replace('YYYY', 'yyyy').replace('-DD', '-dd');\r\n\r\n            if (typeof(opts) === 'object' && opts.dateRange) {\r\n\r\n                const splitStr = opts.dateRangeDatesDelimiter || '~';\r\n\r\n                let [beginDate, endDate ] = value.split(splitStr);\r\n                beginDate = this.datehelper.formatTo(beginDate, fmt);\r\n                endDate = this.datehelper.formatTo(endDate, fmt);\r\n\r\n                return beginDate + splitStr +  endDate;\r\n            }\r\n\r\n            return this.datehelper.formatTo(value, fmt);\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    private numberFormat(value: any, opts?: NumberFormatOptions) {\r\n        return this.numberhelper.formatNumber(value, opts);\r\n        // if (value !== undefined && value !== '' && value !== NaN) {\r\n        //     return this.numberhelper.formatMoney(value, opts);\r\n        // }\r\n        // return value;\r\n    }\r\n\r\n    private enumFormat(value: any, opts?: EnumFormatOptions) {\r\n        if (value === undefined || value === null ) {\r\n            value = '';\r\n        }\r\n\r\n        if (opts && opts.data && opts.data.length) {\r\n            const val = value.toString();\r\n            let arr = [val];\r\n            if (val.indexOf(',') > -1) {  // å¤é\r\n                arr = val.split(',');\r\n            }\r\n\r\n            const str = [];\r\n            arr.forEach(v => {\r\n                const n = opts.data.find(item => item[opts.valueField].toString() == v);\r\n                if (n) {\r\n                    str.push(n[opts.textField]);\r\n                }\r\n            });\r\n\r\n            if (str.length) {\r\n                return str.join(',');\r\n            }\r\n\r\n            return value;\r\n        }\r\n        return value;\r\n    }\r\n\r\n    private imageFormat(value, opts?: ImageFormatOptions) {\r\n        if (value) {\r\n            if (opts) {\r\n                const arrStr = [ `<img src=\"${value}\" `];\r\n                if (opts.width) {\r\n                    arrStr.push(`width=\"${opts.width}\"`);\r\n                }\r\n                if (opts.height) {\r\n                    arrStr.push(`height=\"${opts.height}\"`);\r\n                }\r\n\r\n                arrStr.push('>');\r\n                return arrStr.join('');\r\n            } else {\r\n                return `<img src=\"${value}\">`;\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    private booleanFormat(value, opts?: BooleanFormatOptions) {\r\n        if (value !== undefined) {\r\n            if (opts) {\r\n                const val = value ? opts.trueText : opts.falseText;\r\n                if (val === null || val === undefined) {\r\n                    return value;\r\n                }\r\n\r\n                return val;\r\n            } else {\r\n                return value;\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n\r\n    private convertCompare(val: number) {\r\n        const op = CompareOperators.find( (item: any) => item.value === val);\r\n        if (op) {\r\n            return op.label;\r\n        }\r\n    }\r\n\r\n    buildSortString(sorts: SortCondition[]): string {\r\n        if (sorts && sorts.length) {\r\n            let str = sorts.map(s => {\r\n                return `${s.sortField} ${SortType[s.sortType].toString().toLowerCase()},`;\r\n            }).join(' ');\r\n\r\n            if (str) {\r\n                str = str.substr(0, str.length - 1);\r\n            }\r\n\r\n            return str;\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    buildSqlWhere(conditions: FilterCondition[]): string {\r\n        if (conditions && conditions.length) {\r\n            const result = [];\r\n            const conditionList = conditions.filter(c => c.filterField !== '');\r\n            conditionList.forEach((condition, index) => {\r\n                if (!condition.filterField) {\r\n                    return;\r\n                }\r\n                result.push(condition.lbracket);\r\n                result.push(condition.filterField);\r\n\r\n                const opCode = parseInt(condition.compare.toString(), 10);\r\n                const op = this.convertCompare(opCode);\r\n                result.push(' ' + op.replace(/\\%/g, '').replace('...', ''));\r\n\r\n                if (opCode === Compare.Like || opCode === Compare.NotLike\r\n                        || opCode === Compare.NotLikeEndWith\r\n                        || opCode === Compare.LikeEndWith) {\r\n                    result.push('\\'');\r\n                    result.push('%');\r\n                } else {\r\n                    result.push(' ');\r\n                    result.push('\\'');\r\n                }\r\n\r\n                if (opCode === Compare.In || opCode === Compare.NotIn) {\r\n                    result.push(condition.value.replace(/\\r\\n/g, ','));\r\n                } else {\r\n                    result.push(condition.value);\r\n                }\r\n\r\n                if (opCode === Compare.Like || opCode === Compare.NotLike\r\n                    || opCode === Compare.LikeStartWith || opCode === Compare.NotLikeStartWith) {\r\n                    result.push('%');\r\n                }\r\n                result.push('\\'');\r\n                result.push(condition.rbracket);\r\n                result.push(' ');\r\n\r\n                if (index !== conditionList.length - 1) {\r\n                    result.push(condition.relation === FilterRelation.Empty ? '' :\r\n                                                    FilterRelation[condition.relation].toString().toLowerCase());\r\n                    result.push(' ');\r\n                }\r\n            });\r\n\r\n            return result.join('');\r\n        }\r\n\r\n        return '';\r\n    }\r\n}\r\n","import { Injector, Pipe, PipeTransform } from '@angular/core';\r\nimport { ColumnFormatService } from './column-format.service';\r\n\r\n@Pipe({\r\n    name: 'columnformatter'\r\n})\r\nexport class ColumnFormatterPipe implements PipeTransform {\r\n\r\n    constructor( private injector: Injector, private colmunFormatSer: ColumnFormatService ) {}\r\n\r\n    transform(value: any, col: { field: string, formatter?: any }, ...args: any[]): any {\r\n        const data = args[0];\r\n        if(col) {\r\n            if(col.formatter) {\r\n                return this.colmunFormatSer.format(value, data, col.formatter);\r\n            }\r\n\r\n            return value;\r\n        }\r\n\r\n        return value;\r\n    }\r\n}","/*\r\n * @Author: ç¯çç§æ(Lucas Huang)\r\n * @Date: 2019-05-23 10:27:07\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-08-15 10:15:43\r\n * @QQ: 1055818239\r\n * @Version: v0.0.1\r\n */\r\nimport { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { DateHelperModule } from '@farris/ui-common/date';\r\nimport { NumberHelperModule } from '@farris/ui-common/number';\r\nimport { ColumnFormatService } from './column-format.service';\r\nimport { ColumnFormatterPipe } from './data-formatter.pipe';\r\n\r\n@NgModule({\r\n    imports: [\r\n        DateHelperModule.forRoot(),\r\n        NumberHelperModule.forRoot()\r\n    ],\r\n    exports: [ColumnFormatterPipe],\r\n    declarations: [\r\n        ColumnFormatterPipe\r\n    ],\r\n    providers: [],\r\n})\r\nexport class DataColumnModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: DataColumnModule,\r\n            providers: [\r\n                ColumnFormatService\r\n            ]\r\n        };\r\n    }\r\n}\r\n"],"names":[],"mappings":"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"}
