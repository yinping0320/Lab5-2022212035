/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injector, Pipe } from '@angular/core';
import { ColumnFormatService } from './column-format.service';
export class ColumnFormatterPipe {
    /**
     * @param {?} injector
     * @param {?} colmunFormatSer
     */
    constructor(injector, colmunFormatSer) {
        this.injector = injector;
        this.colmunFormatSer = colmunFormatSer;
    }
    /**
     * @param {?} value
     * @param {?} col
     * @param {...?} args
     * @return {?}
     */
    transform(value, col, ...args) {
        /** @type {?} */
        const data = args[0];
        if (col) {
            if (col.formatter) {
                return this.colmunFormatSer.format(value, data, col.formatter);
            }
            return value;
        }
        return value;
    }
}
ColumnFormatterPipe.decorators = [
    { type: Pipe, args: [{
                name: 'columnformatter'
            },] }
];
/** @nocollapse */
ColumnFormatterPipe.ctorParameters = () => [
    { type: Injector },
    { type: ColumnFormatService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ColumnFormatterPipe.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ColumnFormatterPipe.prototype.colmunFormatSer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1mb3JtYXR0ZXIucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktY29tbW9uL2NvbHVtbi8iLCJzb3VyY2VzIjpbImRhdGEtZm9ybWF0dGVyLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUs5RCxNQUFNLE9BQU8sbUJBQW1COzs7OztJQUU1QixZQUFxQixRQUFrQixFQUFVLGVBQW9DO1FBQWhFLGFBQVEsR0FBUixRQUFRLENBQVU7UUFBVSxvQkFBZSxHQUFmLGVBQWUsQ0FBcUI7SUFBSSxDQUFDOzs7Ozs7O0lBRTFGLFNBQVMsQ0FBQyxLQUFVLEVBQUUsR0FBdUMsRUFBRSxHQUFHLElBQVc7O2NBQ25FLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLElBQUcsR0FBRyxFQUFFO1lBQ0osSUFBRyxHQUFHLENBQUMsU0FBUyxFQUFFO2dCQUNkLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDbEU7WUFFRCxPQUFPLEtBQUssQ0FBQztTQUNoQjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7OztZQWxCSixJQUFJLFNBQUM7Z0JBQ0YsSUFBSSxFQUFFLGlCQUFpQjthQUMxQjs7OztZQUxRLFFBQVE7WUFDUixtQkFBbUI7Ozs7Ozs7SUFPWCx1Q0FBMEI7Ozs7O0lBQUUsOENBQTRDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0b3IsIFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29sdW1uRm9ybWF0U2VydmljZSB9IGZyb20gJy4vY29sdW1uLWZvcm1hdC5zZXJ2aWNlJztcclxuXHJcbkBQaXBlKHtcclxuICAgIG5hbWU6ICdjb2x1bW5mb3JtYXR0ZXInXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDb2x1bW5Gb3JtYXR0ZXJQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCBwcml2YXRlIGNvbG11bkZvcm1hdFNlcjogQ29sdW1uRm9ybWF0U2VydmljZSApIHt9XHJcblxyXG4gICAgdHJhbnNmb3JtKHZhbHVlOiBhbnksIGNvbDogeyBmaWVsZDogc3RyaW5nLCBmb3JtYXR0ZXI/OiBhbnkgfSwgLi4uYXJnczogYW55W10pOiBhbnkge1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBhcmdzWzBdO1xyXG4gICAgICAgIGlmKGNvbCkge1xyXG4gICAgICAgICAgICBpZihjb2wuZm9ybWF0dGVyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb2xtdW5Gb3JtYXRTZXIuZm9ybWF0KHZhbHVlLCBkYXRhLCBjb2wuZm9ybWF0dGVyKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG59Il19