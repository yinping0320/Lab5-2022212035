/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-06-16 13:44:59
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-24 13:49:33
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { NgModule } from '@angular/core';
import { FarrisSafePipe } from './safe.pipe';
import { FarrisTemplateDirective } from './directives/farris-template.directive';
import { IdService } from './id.service';
import { ResizeObserverDirective } from './directives/resize-observer.directive';
import { FarrisReplaceXPipe } from './replaceX.pipe';
import { RuntimeStateService } from './service/runtime-state.service';
import { CommonUtils } from './common.utils';
import { GetValuePipe } from './directives/getvalue.pipe';
import { FarrisComponentTemplateDirective } from './directives/component-template.directive';
import { OverLayHiddenService } from './service/overlay-hidden.service';
export class FarrisCommonModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: FarrisCommonModule,
            providers: [
                CommonUtils,
                RuntimeStateService,
                IdService,
                OverLayHiddenService
            ]
        };
    }
}
FarrisCommonModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    FarrisSafePipe,
                    FarrisTemplateDirective,
                    ResizeObserverDirective,
                    FarrisReplaceXPipe,
                    GetValuePipe,
                    FarrisComponentTemplateDirective
                ],
                imports: [],
                exports: [
                    FarrisSafePipe,
                    FarrisTemplateDirective,
                    ResizeObserverDirective,
                    FarrisReplaceXPipe,
                    GetValuePipe,
                    FarrisComponentTemplateDirective
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktY29tbW9uLyIsInNvdXJjZXMiOlsibGliL2NvbW1vbi5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBUUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUM3QyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUNqRixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ2pGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDN0YsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFzQnhFLE1BQU0sT0FBTyxrQkFBa0I7Ozs7SUFDM0IsTUFBTSxDQUFDLE9BQU87UUFDVixPQUFPO1lBQ0gsUUFBUSxFQUFFLGtCQUFrQjtZQUM1QixTQUFTLEVBQUU7Z0JBQ1AsV0FBVztnQkFDWCxtQkFBbUI7Z0JBQ25CLFNBQVM7Z0JBQ1Qsb0JBQW9CO2FBQ3ZCO1NBQ0osQ0FBQztJQUNOLENBQUM7OztZQS9CSixRQUFRLFNBQUM7Z0JBQ04sWUFBWSxFQUFFO29CQUNWLGNBQWM7b0JBQ2QsdUJBQXVCO29CQUN2Qix1QkFBdUI7b0JBQ3ZCLGtCQUFrQjtvQkFDbEIsWUFBWTtvQkFDWixnQ0FBZ0M7aUJBQ25DO2dCQUNELE9BQU8sRUFBRSxFQUNSO2dCQUNELE9BQU8sRUFBRTtvQkFDTCxjQUFjO29CQUNkLHVCQUF1QjtvQkFDdkIsdUJBQXVCO29CQUN2QixrQkFBa0I7b0JBQ2xCLFlBQVk7b0JBQ1osZ0NBQWdDO2lCQUNuQzthQUNKIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQEF1dGhvcjog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBARGF0ZTogMjAxOS0wNi0xNiAxMzo0NDo1OVxyXG4gKiBATGFzdEVkaXRvcnM6IOeWr+eLguengOaJjShMdWNhcyBIdWFuZylcclxuICogQExhc3RFZGl0VGltZTogMjAxOS0xMC0yNCAxMzo0OTozM1xyXG4gKiBAUVE6IDEwNTU4MTgyMzlcclxuICogQFZlcnNpb246IHYwLjAuMVxyXG4gKi9cclxuaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRmFycmlzU2FmZVBpcGUgfSBmcm9tICcuL3NhZmUucGlwZSc7XHJcbmltcG9ydCB7IEZhcnJpc1RlbXBsYXRlRGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL2ZhcnJpcy10ZW1wbGF0ZS5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBJZFNlcnZpY2UgfSBmcm9tICcuL2lkLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBSZXNpemVPYnNlcnZlckRpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy9yZXNpemUtb2JzZXJ2ZXIuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgRmFycmlzUmVwbGFjZVhQaXBlIH0gZnJvbSAnLi9yZXBsYWNlWC5waXBlJztcclxuaW1wb3J0IHsgUnVudGltZVN0YXRlU2VydmljZSB9IGZyb20gJy4vc2VydmljZS9ydW50aW1lLXN0YXRlLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBDb21tb25VdGlscyB9IGZyb20gJy4vY29tbW9uLnV0aWxzJztcclxuaW1wb3J0IHsgR2V0VmFsdWVQaXBlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL2dldHZhbHVlLnBpcGUnO1xyXG5pbXBvcnQgeyBGYXJyaXNDb21wb25lbnRUZW1wbGF0ZURpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy9jb21wb25lbnQtdGVtcGxhdGUuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgT3ZlckxheUhpZGRlblNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2Uvb3ZlcmxheS1oaWRkZW4uc2VydmljZSc7XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gICAgZGVjbGFyYXRpb25zOiBbXHJcbiAgICAgICAgRmFycmlzU2FmZVBpcGUsXHJcbiAgICAgICAgRmFycmlzVGVtcGxhdGVEaXJlY3RpdmUsXHJcbiAgICAgICAgUmVzaXplT2JzZXJ2ZXJEaXJlY3RpdmUsXHJcbiAgICAgICAgRmFycmlzUmVwbGFjZVhQaXBlLFxyXG4gICAgICAgIEdldFZhbHVlUGlwZSxcclxuICAgICAgICBGYXJyaXNDb21wb25lbnRUZW1wbGF0ZURpcmVjdGl2ZVxyXG4gICAgXSxcclxuICAgIGltcG9ydHM6IFtcclxuICAgIF0sXHJcbiAgICBleHBvcnRzOiBbXHJcbiAgICAgICAgRmFycmlzU2FmZVBpcGUsXHJcbiAgICAgICAgRmFycmlzVGVtcGxhdGVEaXJlY3RpdmUsXHJcbiAgICAgICAgUmVzaXplT2JzZXJ2ZXJEaXJlY3RpdmUsXHJcbiAgICAgICAgRmFycmlzUmVwbGFjZVhQaXBlLFxyXG4gICAgICAgIEdldFZhbHVlUGlwZSxcclxuICAgICAgICBGYXJyaXNDb21wb25lbnRUZW1wbGF0ZURpcmVjdGl2ZVxyXG4gICAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgRmFycmlzQ29tbW9uTW9kdWxlIHtcclxuICAgIHN0YXRpYyBmb3JSb290KCk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG5nTW9kdWxlOiBGYXJyaXNDb21tb25Nb2R1bGUsXHJcbiAgICAgICAgICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgICAgICAgICAgQ29tbW9uVXRpbHMsXHJcbiAgICAgICAgICAgICAgICBSdW50aW1lU3RhdGVTZXJ2aWNlLFxyXG4gICAgICAgICAgICAgICAgSWRTZXJ2aWNlLFxyXG4gICAgICAgICAgICAgICAgT3ZlckxheUhpZGRlblNlcnZpY2VcclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuIl19