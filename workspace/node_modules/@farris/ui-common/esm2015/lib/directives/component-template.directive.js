/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ComponentFactoryResolver, ComponentRef, Directive, ElementRef, Injector, Input } from '@angular/core';
/**
 * @record
 */
export function ITemplateComponent() { }
if (false) {
    /** @type {?} */
    ITemplateComponent.prototype.ctx;
    /** @type {?|undefined} */
    ITemplateComponent.prototype.renderContext;
}
export class FarrisComponentTemplateDirective {
    /**
     * @param {?} injector
     * @param {?} el
     * @param {?} cfr
     */
    constructor(injector, el, cfr) {
        this.injector = injector;
        this.el = el;
        this.cfr = cfr;
        this.cmpRef = null;
        this.templateType = 'cell';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.renderTemplate();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.ctx && !changes.ctx.isFirstChange()) {
            this._expandCtxToThis();
        }
    }
    /**
     * @private
     * @return {?}
     */
    _expandCtxToThis() {
        this.expandContext(this.ctx);
        this.expandContext(this.renderContext);
    }
    /**
     * @private
     * @param {?} ctx
     * @return {?}
     */
    expandContext(ctx) {
        if (this.templateComponentIns && ctx) {
            Object.keys(ctx).forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                this.templateComponentIns.instance[n] = ctx[n];
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    renderTemplate() {
        this.templateComponentIns = this._getCmpRef();
        if (this.templateComponentIns) {
            this._expandCtxToThis();
            this.templateComponentIns.instance.ctx = this.ctx;
            this.el.nativeElement.append(this.templateComponentIns.location.nativeElement);
            this.templateComponentIns.changeDetectorRef.detectChanges();
        }
    }
    /**
     * @private
     * @return {?}
     */
    _getCmpRef() {
        if (this.cmpRef) {
            return this.createInstance(this.cmpRef);
        }
        if (this.column) {
            if (this.templateType == 'cell') {
                if (this.column.componentType) {
                    return this.createInstance(this.column.componentType);
                }
            }
            else {
                if (this.column.headerComponentType) {
                    return this.createInstance(this.column.headerComponentType);
                }
            }
        }
        return null;
    }
    /**
     * @private
     * @param {?} cmptype
     * @return {?}
     */
    createInstance(cmptype) {
        if (!cmptype) {
            return null;
        }
        /** @type {?} */
        let templateComponentIns = null;
        if (!cmptype.ngBaseDef && typeof cmptype === 'function') {
            templateComponentIns = cmptype();
        }
        else {
            if (!cmptype['instance']) {
                /** @type {?} */
                const cellTemplateCmp = this.cfr.resolveComponentFactory((/** @type {?} */ (cmptype)));
                templateComponentIns = cellTemplateCmp.create(this.injector);
            }
            else {
                templateComponentIns = cmptype;
            }
        }
        return templateComponentIns;
    }
}
FarrisComponentTemplateDirective.decorators = [
    { type: Directive, args: [{ selector: '[component-template]' },] }
];
/** @nocollapse */
FarrisComponentTemplateDirective.ctorParameters = () => [
    { type: Injector },
    { type: ElementRef },
    { type: ComponentFactoryResolver }
];
FarrisComponentTemplateDirective.propDecorators = {
    column: [{ type: Input, args: ['component-template',] }],
    cmpRef: [{ type: Input }],
    ctx: [{ type: Input }],
    renderContext: [{ type: Input }],
    templateType: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FarrisComponentTemplateDirective.prototype.column;
    /** @type {?} */
    FarrisComponentTemplateDirective.prototype.cmpRef;
    /** @type {?} */
    FarrisComponentTemplateDirective.prototype.ctx;
    /** @type {?} */
    FarrisComponentTemplateDirective.prototype.renderContext;
    /** @type {?} */
    FarrisComponentTemplateDirective.prototype.templateType;
    /** @type {?} */
    FarrisComponentTemplateDirective.prototype.templateComponentIns;
    /**
     * @type {?}
     * @private
     */
    FarrisComponentTemplateDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    FarrisComponentTemplateDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FarrisComponentTemplateDirective.prototype.cfr;
}
//# sourceMappingURL=data:application/json;base64,