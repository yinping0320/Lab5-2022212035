/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Output, ElementRef, EventEmitter, Input } from '@angular/core';
import ResizeObserver from 'resize-observer-polyfill';
/** @type {?} */
const entriesMap = new WeakMap();
const ɵ0 = /**
 * @param {?} entries
 * @return {?}
 */
entries => {
    for (const entry of entries) {
        if (entriesMap.has(entry.target)) {
            /** @type {?} */
            const comp = entriesMap.get(entry.target);
            comp._resizeCallback(entry);
        }
    }
};
/** @type {?} */
const ro = new ResizeObserver((ɵ0));
export class ResizeObserverDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        this.resize = new EventEmitter();
    }
    /**
     * @param {?} entry
     * @return {?}
     */
    _resizeCallback(entry) {
        entry['bindintClientRect'] = entry.target.getBoundingClientRect();
        this.resize.emit(entry);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const target = this.target ? this.target.nativeElement : this.el.nativeElement;
        entriesMap.set(target, this);
        ro.observe(target);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        /** @type {?} */
        const target = this.el.nativeElement;
        ro.unobserve(target);
        entriesMap.delete(target);
    }
}
ResizeObserverDirective.decorators = [
    { type: Directive, args: [{
                selector: '[resizeObserver]'
            },] }
];
/** @nocollapse */
ResizeObserverDirective.ctorParameters = () => [
    { type: ElementRef }
];
ResizeObserverDirective.propDecorators = {
    target: [{ type: Input, args: ['resizeObserver',] }],
    resize: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    ResizeObserverDirective.prototype.target;
    /** @type {?} */
    ResizeObserverDirective.prototype.resize;
    /** @type {?} */
    ResizeObserverDirective.prototype.el;
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplLW9ic2VydmVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktY29tbW9uLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvcmVzaXplLW9ic2VydmVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFxQixZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RHLE9BQU8sY0FBYyxNQUFNLDBCQUEwQixDQUFDOztNQUdoRCxVQUFVLEdBQUcsSUFBSSxPQUFPLEVBQUU7Ozs7O0FBRUYsT0FBTyxDQUFDLEVBQUU7SUFDcEMsS0FBSyxNQUFNLEtBQUssSUFBSSxPQUFPLEVBQUU7UUFDekIsSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRTs7a0JBQ3hCLElBQUksR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7WUFDekMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMvQjtLQUNKO0FBQ0wsQ0FBQzs7TUFQSyxFQUFFLEdBQUcsSUFBSSxjQUFjLE1BTzNCO0FBS0YsTUFBTSxPQUFPLHVCQUF1Qjs7OztJQUtoQyxZQUFtQixFQUFjO1FBQWQsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUZ2QixXQUFNLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUd0QyxDQUFDOzs7OztJQUdELGVBQWUsQ0FBQyxLQUFLO1FBQ2pCLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUNsRSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1QixDQUFDOzs7O0lBRUQsUUFBUTs7Y0FDRSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYTtRQUMvRSxVQUFVLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM3QixFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7Ozs7SUFFRCxXQUFXOztjQUNELE1BQU0sR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWE7UUFDcEMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNyQixVQUFVLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzlCLENBQUM7OztZQTNCSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGtCQUFrQjthQUMvQjs7OztZQWpCMkIsVUFBVTs7O3FCQW1CakMsS0FBSyxTQUFDLGdCQUFnQjtxQkFFdEIsTUFBTTs7OztJQUZQLHlDQUE0Qzs7SUFFNUMseUNBQXNDOztJQUUxQixxQ0FBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIE91dHB1dCwgRWxlbWVudFJlZiwgT25EZXN0cm95LCBPbkluaXQsIEV2ZW50RW1pdHRlciwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IFJlc2l6ZU9ic2VydmVyIGZyb20gJ3Jlc2l6ZS1vYnNlcnZlci1wb2x5ZmlsbCc7XHJcblxyXG5cclxuY29uc3QgZW50cmllc01hcCA9IG5ldyBXZWFrTWFwKCk7XHJcblxyXG5jb25zdCBybyA9IG5ldyBSZXNpemVPYnNlcnZlcihlbnRyaWVzID0+IHtcclxuICAgIGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcykge1xyXG4gICAgICAgIGlmIChlbnRyaWVzTWFwLmhhcyhlbnRyeS50YXJnZXQpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbXAgPSBlbnRyaWVzTWFwLmdldChlbnRyeS50YXJnZXQpO1xyXG4gICAgICAgICAgICBjb21wLl9yZXNpemVDYWxsYmFjayhlbnRyeSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KTtcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbcmVzaXplT2JzZXJ2ZXJdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgUmVzaXplT2JzZXJ2ZXJEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XHJcbiAgICBASW5wdXQoJ3Jlc2l6ZU9ic2VydmVyJykgdGFyZ2V0OiBFbGVtZW50UmVmO1xyXG5cclxuICAgIEBPdXRwdXQoKSByZXNpemUgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHVibGljIGVsOiBFbGVtZW50UmVmKSB7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIF9yZXNpemVDYWxsYmFjayhlbnRyeSkge1xyXG4gICAgICAgIGVudHJ5WydiaW5kaW50Q2xpZW50UmVjdCddID0gZW50cnkudGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIHRoaXMucmVzaXplLmVtaXQoZW50cnkpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMudGFyZ2V0ID8gIHRoaXMudGFyZ2V0Lm5hdGl2ZUVsZW1lbnQgOiB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgICAgZW50cmllc01hcC5zZXQodGFyZ2V0LCB0aGlzKTtcclxuICAgICAgICByby5vYnNlcnZlKHRhcmdldCk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50O1xyXG4gICAgICAgIHJvLnVub2JzZXJ2ZSh0YXJnZXQpO1xyXG4gICAgICAgIGVudHJpZXNNYXAuZGVsZXRlKHRhcmdldCk7XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==