/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { fromEvent, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class DebugService {
    constructor() {
        this.isDebug = false;
        this.destroy$ = new Subject();
        this.debugSub = null;
    }
    /**
     * @return {?}
     */
    destroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * @private
     * @param {?} type
     * @param {...?} msg
     * @return {?}
     */
    writeMessage(type, ...msg) {
        if (this.isDebug) {
            console[type](...msg);
        }
    }
    /**
     * @param {...?} msg
     * @return {?}
     */
    log(...msg) {
        this.writeMessage('log', msg);
    }
    /**
     * @param {...?} msg
     * @return {?}
     */
    warn(...msg) {
        this.writeMessage('warn', msg);
    }
    /**
     * @param {...?} msg
     * @return {?}
     */
    error(...msg) {
        this.writeMessage('error', msg);
    }
    /**
     * @param {...?} msg
     * @return {?}
     */
    info(...msg) {
        this.writeMessage('info', msg);
    }
    /**
     * @return {?}
     */
    useDebugMode() {
        if (!this.debugSub) {
            this.debugSub = fromEvent(document.body, 'keydown').pipe(takeUntil(this.destroy$)).subscribe((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                if (e.ctrlKey && e.shiftKey && e.key === 'D') {
                    e.preventDefault();
                    e.stopPropagation();
                    this.isDebug = !this.isDebug;
                    // console.log(`%cðŸª² Farris debug mode is ${ this.isDebug ? 'startting' : 'stopped'}.ðŸª²`, 'color: blue; font-weight:bold;font-size:16px')
                    console.log(`%cðŸª² Farris debug mode is ${this.isDebug ? 'startting' : 'stopped'}.ðŸª²`, `color: ${this.isDebug ? 'green' : 'red'}; font-weight:bold;font-size:16px`);
                }
            }));
        }
        return this.debugSub;
    }
}
DebugService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
DebugService.ctorParameters = () => [];
/** @nocollapse */ DebugService.ngInjectableDef = i0.defineInjectable({ factory: function DebugService_Factory() { return new DebugService(); }, token: DebugService, providedIn: "root" });
if (false) {
    /** @type {?} */
    DebugService.prototype.isDebug;
    /**
     * @type {?}
     * @private
     */
    DebugService.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    DebugService.prototype.debugSub;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVidWcuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktY29tbW9uLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2UvZGVidWcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBa0IsTUFBTSxlQUFlLENBQUM7QUFDM0QsT0FBTyxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQWdCLE1BQU0sTUFBTSxDQUFDO0FBQ3hELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFNM0MsTUFBTSxPQUFPLFlBQVk7SUFNckI7UUFMQSxZQUFPLEdBQUcsS0FBSyxDQUFDO1FBRVIsYUFBUSxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7UUFDekIsYUFBUSxHQUFpQixJQUFJLENBQUM7SUFHdEMsQ0FBQzs7OztJQUVELE9BQU87UUFDSCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDN0IsQ0FBQzs7Ozs7OztJQUVPLFlBQVksQ0FBRSxJQUF1QyxFQUFFLEdBQUcsR0FBUTtRQUN0RSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDZCxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztTQUN6QjtJQUNMLENBQUM7Ozs7O0lBRUQsR0FBRyxDQUFDLEdBQUcsR0FBUTtRQUNYLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7Ozs7O0lBRUQsSUFBSSxDQUFDLEdBQUcsR0FBUTtRQUNaLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ25DLENBQUM7Ozs7O0lBRUQsS0FBSyxDQUFDLEdBQUcsR0FBUTtRQUNiLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7Ozs7O0lBRUQsSUFBSSxDQUFDLEdBQUcsR0FBUTtRQUNaLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ25DLENBQUM7Ozs7SUFFRCxZQUFZO1FBQ1IsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDaEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQ3BELFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQzNCLENBQUMsU0FBUzs7OztZQUFFLENBQUMsQ0FBZ0IsRUFBRSxFQUFFO2dCQUM5QixJQUFJLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDLFFBQVEsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLEdBQUcsRUFBRTtvQkFDMUMsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO29CQUNuQixDQUFDLENBQUMsZUFBZSxFQUFFLENBQUM7b0JBQ3BCLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO29CQUM3Qix5SUFBeUk7b0JBQ3pJLE9BQU8sQ0FBQyxHQUFHLENBQUMsNkJBQStCLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsU0FBUyxLQUFLLEVBQUUsVUFBWSxJQUFJLENBQUMsT0FBTyxDQUFBLENBQUMsQ0FBQyxPQUFPLENBQUEsQ0FBQyxDQUFDLEtBQU0sbUNBQW1DLENBQUMsQ0FBQTtpQkFDeEs7WUFDTCxDQUFDLEVBQUMsQ0FBQztTQUNOO1FBRUQsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3pCLENBQUM7OztZQXZESixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7Ozs7Ozs7SUFFRywrQkFBZ0I7Ozs7O0lBRWhCLGdDQUFpQzs7Ozs7SUFDakMsZ0NBQXNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgZnJvbUV2ZW50LCBTdWJqZWN0LCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICAgIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgRGVidWdTZXJ2aWNlIHtcclxuICAgIGlzRGVidWcgPSBmYWxzZTtcclxuICAgIFxyXG4gICAgcHJpdmF0ZSBkZXN0cm95JCA9IG5ldyBTdWJqZWN0KCk7XHJcbiAgICBwcml2YXRlIGRlYnVnU3ViOiBTdWJzY3JpcHRpb24gPSBudWxsO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgfVxyXG5cclxuICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5kZXN0cm95JC5uZXh0KCk7XHJcbiAgICAgICAgdGhpcy5kZXN0cm95JC5jb21wbGV0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgd3JpdGVNZXNzYWdlKCB0eXBlOiAnbG9nJyB8ICd3YXJuJyB8ICdlcnJvcicgfCAnaW5mbycsIC4uLm1zZzogYW55KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNEZWJ1Zykge1xyXG4gICAgICAgICAgICBjb25zb2xlW3R5cGVdKC4uLm1zZyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGxvZyguLi5tc2c6IGFueSkge1xyXG4gICAgICAgIHRoaXMud3JpdGVNZXNzYWdlKCdsb2cnLCBtc2cpO1xyXG4gICAgfVxyXG5cclxuICAgIHdhcm4oLi4ubXNnOiBhbnkpIHtcclxuICAgICAgICB0aGlzLndyaXRlTWVzc2FnZSgnd2FybicsIG1zZyk7XHJcbiAgICB9XHJcblxyXG4gICAgZXJyb3IoLi4ubXNnOiBhbnkpIHtcclxuICAgICAgICB0aGlzLndyaXRlTWVzc2FnZSgnZXJyb3InLCBtc2cpO1xyXG4gICAgfVxyXG5cclxuICAgIGluZm8oLi4ubXNnOiBhbnkpIHtcclxuICAgICAgICB0aGlzLndyaXRlTWVzc2FnZSgnaW5mbycsIG1zZyk7XHJcbiAgICB9XHJcblxyXG4gICAgdXNlRGVidWdNb2RlKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5kZWJ1Z1N1Yikge1xyXG4gICAgICAgICAgICB0aGlzLmRlYnVnU3ViID0gZnJvbUV2ZW50KGRvY3VtZW50LmJvZHksICdrZXlkb3duJykucGlwZShcclxuICAgICAgICAgICAgICAgIHRha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKVxyXG4gICAgICAgICAgICApLnN1YnNjcmliZSggKGU6IEtleWJvYXJkRXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChlLmN0cmxLZXkgJiYgZS5zaGlmdEtleSAmJiBlLmtleSA9PT0gJ0QnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0RlYnVnID0gIXRoaXMuaXNEZWJ1ZztcclxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgJWPwn6qyIEZhcnJpcyBkZWJ1ZyBtb2RlIGlzICR7IHRoaXMuaXNEZWJ1ZyA/ICdzdGFydHRpbmcnIDogJ3N0b3BwZWQnfS7wn6qyYCwgJ2NvbG9yOiBibHVlOyBmb250LXdlaWdodDpib2xkO2ZvbnQtc2l6ZToxNnB4JylcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgJWPwn6qyIEZhcnJpcyBkZWJ1ZyBtb2RlIGlzICR7ICB0aGlzLmlzRGVidWcgPyAnc3RhcnR0aW5nJyA6ICdzdG9wcGVkJ30u8J+qsmAsIGBjb2xvcjogJHsgIHRoaXMuaXNEZWJ1Zz8gJ2dyZWVuJzogJ3JlZCcgfTsgZm9udC13ZWlnaHQ6Ym9sZDtmb250LXNpemU6MTZweGApXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVidWdTdWI7XHJcbiAgICB9XHJcbn1cclxuIl19