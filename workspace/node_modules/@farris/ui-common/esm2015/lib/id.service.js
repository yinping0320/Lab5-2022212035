/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { encrypt } from './encrypt';
export class IdService {
    /**
     * @return {?}
     */
    generate() {
        return this.guid();
    }
    /**
     * @param {?} str
     * @param {?=} type
     * @return {?}
     */
    encrypt(str, type = 'hex') {
        return encrypt(str, type);
    }
    /**
     * @return {?}
     */
    guid() {
        /** @type {?} */
        const _crypto = window.crypto ? crypto : window['msCrypto'];
        if (_crypto) {
            return (((/** @type {?} */ ([1e7]))) + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (/**
             * @param {?} c
             * @return {?}
             */
            c => (c ^ (_crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16)));
        }
        else {
            return this.uuid();
        }
    }
    /**
     * @return {?}
     */
    uuid() {
        /** @type {?} */
        const timestamp = Date.now().valueOf();
        /** @type {?} */
        let uuid = 0;
        if (timestamp > IdService.previous) {
            IdService.previous = timestamp;
            uuid = timestamp;
        }
        else {
            IdService.previous = IdService.previous + 100;
            uuid = IdService.previous;
        }
        return uuid.toString(16);
    }
}
IdService.previous = 0;
IdService.decorators = [
    { type: Injectable }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    IdService.previous;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktY29tbW9uLyIsInNvdXJjZXMiOlsibGliL2lkLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUtwQyxNQUFNLE9BQU8sU0FBUzs7OztJQUVsQixRQUFRO1FBQ0osT0FBTyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDdkIsQ0FBQzs7Ozs7O0lBQ0QsT0FBTyxDQUFDLEdBQVcsRUFBRSxJQUFJLEdBQUcsS0FBSztRQUM3QixPQUFPLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUIsQ0FBQzs7OztJQUNELElBQUk7O2NBQ00sT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQztRQUMzRCxJQUFJLE9BQU8sRUFBRTtZQUNULE9BQU8sQ0FBQyxDQUFDLG1CQUFBLENBQUMsR0FBRyxDQUFDLEVBQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVE7Ozs7WUFBRSxDQUFDLENBQUMsRUFBRSxDQUN2RSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQ3ZGLENBQUM7U0FDTDthQUFNO1lBQ0gsT0FBTyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDdEI7SUFDTCxDQUFDOzs7O0lBRUQsSUFBSTs7Y0FDTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sRUFBRTs7WUFDbEMsSUFBSSxHQUFHLENBQUM7UUFFWixJQUFJLFNBQVMsR0FBRyxTQUFTLENBQUMsUUFBUSxFQUFFO1lBQ2hDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDO1lBQy9CLElBQUksR0FBRyxTQUFTLENBQUM7U0FDcEI7YUFBTTtZQUNILFNBQVMsQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUM7WUFDOUMsSUFBSSxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUM7U0FDN0I7UUFFRCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDN0IsQ0FBQzs7QUEvQmMsa0JBQVEsR0FBRyxDQUFDLENBQUM7O1lBRi9CLFVBQVU7Ozs7Ozs7SUFFUCxtQkFBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGVuY3J5cHQgfSBmcm9tICcuL2VuY3J5cHQnO1xyXG5cclxuXHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBJZFNlcnZpY2Uge1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgcHJldmlvdXMgPSAwO1xyXG4gICAgZ2VuZXJhdGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ3VpZCgpO1xyXG4gICAgfVxyXG4gICAgZW5jcnlwdChzdHI6IHN0cmluZywgdHlwZSA9ICdoZXgnKSB7XHJcbiAgICAgICAgcmV0dXJuIGVuY3J5cHQoc3RyLCB0eXBlKTtcclxuICAgIH1cclxuICAgIGd1aWQoKSB7XHJcbiAgICAgICAgY29uc3QgX2NyeXB0byA9IHdpbmRvdy5jcnlwdG8gPyBjcnlwdG8gOiB3aW5kb3dbJ21zQ3J5cHRvJ107XHJcbiAgICAgICAgaWYgKF9jcnlwdG8pIHtcclxuICAgICAgICAgICAgcmV0dXJuICgoWzFlN10gYXMgYW55KSArIC0xZTMgKyAtNGUzICsgLThlMyArIC0xZTExKS5yZXBsYWNlKC9bMDE4XS9nLCBjID0+XHJcbiAgICAgICAgICAgICAgICAoYyBeIChfY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheSgxKSlbMF0gJiAoMTUgPj4gKGMgLyA0KSkpKS50b1N0cmluZygxNilcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy51dWlkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHV1aWQoKSB7XHJcbiAgICAgICAgY29uc3QgdGltZXN0YW1wID0gRGF0ZS5ub3coKS52YWx1ZU9mKCk7XHJcbiAgICAgICAgbGV0IHV1aWQgPSAwO1xyXG5cclxuICAgICAgICBpZiAodGltZXN0YW1wID4gSWRTZXJ2aWNlLnByZXZpb3VzKSB7XHJcbiAgICAgICAgICAgIElkU2VydmljZS5wcmV2aW91cyA9IHRpbWVzdGFtcDtcclxuICAgICAgICAgICAgdXVpZCA9IHRpbWVzdGFtcDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBJZFNlcnZpY2UucHJldmlvdXMgPSBJZFNlcnZpY2UucHJldmlvdXMgKyAxMDA7XHJcbiAgICAgICAgICAgIHV1aWQgPSBJZFNlcnZpY2UucHJldmlvdXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdXVpZC50b1N0cmluZygxNik7XHJcbiAgICB9XHJcbn1cclxuIl19