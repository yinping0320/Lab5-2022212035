/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * Configurable variables. You may need to tweak these to be compatible with
 * the server-side, but the defaults work in most cases.
 */
/** @type {?} */
const hexcase = 0;
/* hex output format. 0 - lowercase; 1 - uppercase        */
/** @type {?} */
const b64pad = '';
/* base-64 pad character. "=" for strict RFC compliance   */
/** @type {?} */
const chrsz = 8;
/* bits per input character. 8 - ASCII; 16 - Unicode      */
/**
 * @param {?} s
 * @param {?=} type
 * @return {?}
 */
export function encrypt(s, type = 'hex') {
    if (type === 'hex') {
        return binl2hex(core_encrypt(str2binl(s), s.length * chrsz));
    }
    else if (type === 'b64') {
        return binl2b64(core_encrypt(str2binl(s), s.length * chrsz));
    }
    else {
        return binl2str(core_encrypt(str2binl(s), s.length * chrsz));
    }
}
/**
 * @param {?} key
 * @param {?} data
 * @param {?=} type
 * @return {?}
 */
export function hmac_encrypt(key, data, type = 'hex') {
    if (type === 'hex') {
        return binl2hex(core_hmac_encrypt(key, data));
    }
    else if (type === 'b64') {
        return binl2b64(core_hmac_encrypt(key, data));
    }
    else {
        return binl2str(core_hmac_encrypt(key, data));
    }
}
/*
 * These are the functions you'll usually want to call
 * They take string arguments and return either hex or base-64 encoded strings
 */
// export function hex_encrypt(s: string) {
//     return binl2hex(core_encrypt(str2binl(s), s.length * chrsz));
// }
// export function b64_encrypt(s: string) {
//     return binl2b64(core_encrypt(str2binl(s), s.length * chrsz));
// }
// export function str_encrypt(s: string) {
//     return binl2str(core_encrypt(str2binl(s), s.length * chrsz));
// }
// export function hex_hmac_encrypt(key, data) {
//     return binl2hex(core_hmac_encrypt(key, data));
// }
// export function b64_hmac_encrypt(key, data) {
//     return binl2b64(core_hmac_encrypt(key, data));
// }
// export function str_hmac_encrypt(key, data) {
//     return binl2str(core_hmac_encrypt(key, data));
// }
/*
 * Perform a simple self-test to see if the VM is working
 */
// function encrypt_vm_test() {
//     return hex_encrypt('abc') === '900150983cd24fb0d6963f7d28e17f72';
// }
/*
 * Calculate the encrypt of an array of little-endian words, and a bit length
 */
/**
 * @param {?} x
 * @param {?} len
 * @return {?}
 */
function core_encrypt(x, len) {
    /* append padding */
    x[len >> 5] |= 0x80 << len % 32;
    x[(((len + 64) >>> 9) << 4) + 14] = len;
    /** @type {?} */
    let a = 1732584193;
    /** @type {?} */
    let b = -271733879;
    /** @type {?} */
    let c = -1732584194;
    /** @type {?} */
    let d = 271733878;
    for (let i = 0; i < x.length; i += 16) {
        /** @type {?} */
        const olda = a;
        /** @type {?} */
        const oldb = b;
        /** @type {?} */
        const oldc = c;
        /** @type {?} */
        const oldd = d;
        a = encrypt_ff(a, b, c, d, x[i + 0], 7, -680876936);
        d = encrypt_ff(d, a, b, c, x[i + 1], 12, -389564586);
        c = encrypt_ff(c, d, a, b, x[i + 2], 17, 606105819);
        b = encrypt_ff(b, c, d, a, x[i + 3], 22, -1044525330);
        a = encrypt_ff(a, b, c, d, x[i + 4], 7, -176418897);
        d = encrypt_ff(d, a, b, c, x[i + 5], 12, 1200080426);
        c = encrypt_ff(c, d, a, b, x[i + 6], 17, -1473231341);
        b = encrypt_ff(b, c, d, a, x[i + 7], 22, -45705983);
        a = encrypt_ff(a, b, c, d, x[i + 8], 7, 1770035416);
        d = encrypt_ff(d, a, b, c, x[i + 9], 12, -1958414417);
        c = encrypt_ff(c, d, a, b, x[i + 10], 17, -42063);
        b = encrypt_ff(b, c, d, a, x[i + 11], 22, -1990404162);
        a = encrypt_ff(a, b, c, d, x[i + 12], 7, 1804603682);
        d = encrypt_ff(d, a, b, c, x[i + 13], 12, -40341101);
        c = encrypt_ff(c, d, a, b, x[i + 14], 17, -1502002290);
        b = encrypt_ff(b, c, d, a, x[i + 15], 22, 1236535329);
        a = encrypt_gg(a, b, c, d, x[i + 1], 5, -165796510);
        d = encrypt_gg(d, a, b, c, x[i + 6], 9, -1069501632);
        c = encrypt_gg(c, d, a, b, x[i + 11], 14, 643717713);
        b = encrypt_gg(b, c, d, a, x[i + 0], 20, -373897302);
        a = encrypt_gg(a, b, c, d, x[i + 5], 5, -701558691);
        d = encrypt_gg(d, a, b, c, x[i + 10], 9, 38016083);
        c = encrypt_gg(c, d, a, b, x[i + 15], 14, -660478335);
        b = encrypt_gg(b, c, d, a, x[i + 4], 20, -405537848);
        a = encrypt_gg(a, b, c, d, x[i + 9], 5, 568446438);
        d = encrypt_gg(d, a, b, c, x[i + 14], 9, -1019803690);
        c = encrypt_gg(c, d, a, b, x[i + 3], 14, -187363961);
        b = encrypt_gg(b, c, d, a, x[i + 8], 20, 1163531501);
        a = encrypt_gg(a, b, c, d, x[i + 13], 5, -1444681467);
        d = encrypt_gg(d, a, b, c, x[i + 2], 9, -51403784);
        c = encrypt_gg(c, d, a, b, x[i + 7], 14, 1735328473);
        b = encrypt_gg(b, c, d, a, x[i + 12], 20, -1926607734);
        a = encrypt_hh(a, b, c, d, x[i + 5], 4, -378558);
        d = encrypt_hh(d, a, b, c, x[i + 8], 11, -2022574463);
        c = encrypt_hh(c, d, a, b, x[i + 11], 16, 1839030562);
        b = encrypt_hh(b, c, d, a, x[i + 14], 23, -35309556);
        a = encrypt_hh(a, b, c, d, x[i + 1], 4, -1530992060);
        d = encrypt_hh(d, a, b, c, x[i + 4], 11, 1272893353);
        c = encrypt_hh(c, d, a, b, x[i + 7], 16, -155497632);
        b = encrypt_hh(b, c, d, a, x[i + 10], 23, -1094730640);
        a = encrypt_hh(a, b, c, d, x[i + 13], 4, 681279174);
        d = encrypt_hh(d, a, b, c, x[i + 0], 11, -358537222);
        c = encrypt_hh(c, d, a, b, x[i + 3], 16, -722521979);
        b = encrypt_hh(b, c, d, a, x[i + 6], 23, 76029189);
        a = encrypt_hh(a, b, c, d, x[i + 9], 4, -640364487);
        d = encrypt_hh(d, a, b, c, x[i + 12], 11, -421815835);
        c = encrypt_hh(c, d, a, b, x[i + 15], 16, 530742520);
        b = encrypt_hh(b, c, d, a, x[i + 2], 23, -995338651);
        a = encrypt_ii(a, b, c, d, x[i + 0], 6, -198630844);
        d = encrypt_ii(d, a, b, c, x[i + 7], 10, 1126891415);
        c = encrypt_ii(c, d, a, b, x[i + 14], 15, -1416354905);
        b = encrypt_ii(b, c, d, a, x[i + 5], 21, -57434055);
        a = encrypt_ii(a, b, c, d, x[i + 12], 6, 1700485571);
        d = encrypt_ii(d, a, b, c, x[i + 3], 10, -1894986606);
        c = encrypt_ii(c, d, a, b, x[i + 10], 15, -1051523);
        b = encrypt_ii(b, c, d, a, x[i + 1], 21, -2054922799);
        a = encrypt_ii(a, b, c, d, x[i + 8], 6, 1873313359);
        d = encrypt_ii(d, a, b, c, x[i + 15], 10, -30611744);
        c = encrypt_ii(c, d, a, b, x[i + 6], 15, -1560198380);
        b = encrypt_ii(b, c, d, a, x[i + 13], 21, 1309151649);
        a = encrypt_ii(a, b, c, d, x[i + 4], 6, -145523070);
        d = encrypt_ii(d, a, b, c, x[i + 11], 10, -1120210379);
        c = encrypt_ii(c, d, a, b, x[i + 2], 15, 718787259);
        b = encrypt_ii(b, c, d, a, x[i + 9], 21, -343485551);
        a = safe_add(a, olda);
        b = safe_add(b, oldb);
        c = safe_add(c, oldc);
        d = safe_add(d, oldd);
    }
    return Array(a, b, c, d);
}
/*
 * These functions implement the four basic operations the algorithm uses.
 */
/**
 * @param {?} q
 * @param {?} a
 * @param {?} b
 * @param {?} x
 * @param {?} s
 * @param {?} t
 * @return {?}
 */
function encrypt_cmn(q, a, b, x, s, t) {
    return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} c
 * @param {?} d
 * @param {?} x
 * @param {?} s
 * @param {?} t
 * @return {?}
 */
function encrypt_ff(a, b, c, d, x, s, t) {
    return encrypt_cmn((b & c) | (~b & d), a, b, x, s, t);
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} c
 * @param {?} d
 * @param {?} x
 * @param {?} s
 * @param {?} t
 * @return {?}
 */
function encrypt_gg(a, b, c, d, x, s, t) {
    return encrypt_cmn((b & d) | (c & ~d), a, b, x, s, t);
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} c
 * @param {?} d
 * @param {?} x
 * @param {?} s
 * @param {?} t
 * @return {?}
 */
function encrypt_hh(a, b, c, d, x, s, t) {
    return encrypt_cmn(b ^ c ^ d, a, b, x, s, t);
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} c
 * @param {?} d
 * @param {?} x
 * @param {?} s
 * @param {?} t
 * @return {?}
 */
function encrypt_ii(a, b, c, d, x, s, t) {
    return encrypt_cmn(c ^ (b | ~d), a, b, x, s, t);
}
/*
 * Calculate the HMAC-encrypt, of a key and some data
 */
/**
 * @param {?} key
 * @param {?} data
 * @return {?}
 */
function core_hmac_encrypt(key, data) {
    /** @type {?} */
    let bkey = str2binl(key);
    if (bkey.length > 16) {
        bkey = core_encrypt(bkey, key.length * chrsz);
    }
    /** @type {?} */
    const ipad = Array(16);
    /** @type {?} */
    const opad = Array(16);
    for (let i = 0; i < 16; i++) {
        ipad[i] = bkey[i] ^ 0x36363636;
        opad[i] = bkey[i] ^ 0x5c5c5c5c;
    }
    /** @type {?} */
    const hash = core_encrypt(ipad.concat(str2binl(data)), 512 + data.length * chrsz);
    return core_encrypt(opad.concat(hash), 512 + 128);
}
/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
/**
 * @param {?} x
 * @param {?} y
 * @return {?}
 */
function safe_add(x, y) {
    /** @type {?} */
    const lsw = (x & 0xffff) + (y & 0xffff);
    /** @type {?} */
    const msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    return (msw << 16) | (lsw & 0xffff);
}
/*
 * Bitwise rotate a 32-bit number to the left.
 */
/**
 * @param {?} num
 * @param {?} cnt
 * @return {?}
 */
function bit_rol(num, cnt) {
    return (num << cnt) | (num >>> (32 - cnt));
}
/*
 * Convert a string to an array of little-endian words
 * If chrsz is ASCII, characters >255 have their hi-byte silently ignored.
 */
/**
 * @param {?} str
 * @return {?}
 */
function str2binl(str) {
    /** @type {?} */
    const bin = Array();
    /** @type {?} */
    const mask = (1 << chrsz) - 1;
    for (let i = 0; i < str.length * chrsz; i += chrsz) {
        bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << i % 32;
    }
    return bin;
}
/*
 * Convert an array of little-endian words to a string
 */
/**
 * @param {?} bin
 * @return {?}
 */
function binl2str(bin) {
    /** @type {?} */
    let str = '';
    /** @type {?} */
    const mask = (1 << chrsz) - 1;
    for (let i = 0; i < bin.length * 32; i += chrsz) {
        str += String.fromCharCode((bin[i >> 5] >>> i % 32) & mask);
    }
    return str;
}
/*
 * Convert an array of little-endian words to a hex string.
 */
/**
 * @param {?} binarray
 * @return {?}
 */
function binl2hex(binarray) {
    // tslint:disable-next-line: variable-name
    /** @type {?} */
    const hex_tab = hexcase ? '0123456789ABCDEF' : '0123456789abcdef';
    /** @type {?} */
    let str = '';
    for (let i = 0; i < binarray.length * 4; i++) {
        str +=
            hex_tab.charAt((binarray[i >> 2] >> ((i % 4) * 8 + 4)) & 0xf) +
                hex_tab.charAt((binarray[i >> 2] >> ((i % 4) * 8)) & 0xf);
    }
    return str;
}
/*
 * Convert an array of little-endian words to a base-64 string
 */
/**
 * @param {?} binarray
 * @return {?}
 */
function binl2b64(binarray) {
    /** @type {?} */
    const tab = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    /** @type {?} */
    let str = '';
    for (let i = 0; i < binarray.length * 4; i += 3) {
        /** @type {?} */
        const triplet = (((binarray[i >> 2] >> (8 * (i % 4))) & 0xff) << 16) |
            (((binarray[(i + 1) >> 2] >> (8 * ((i + 1) % 4))) & 0xff) << 8) |
            ((binarray[(i + 2) >> 2] >> (8 * ((i + 2) % 4))) & 0xff);
        for (let j = 0; j < 4; j++) {
            if (i * 8 + j * 6 > binarray.length * 32) {
                str += b64pad;
            }
            else {
                str += tab.charAt((triplet >> (6 * (3 - j))) & 0x3f);
            }
        }
    }
    return str;
}
//# sourceMappingURL=data:application/json;base64,