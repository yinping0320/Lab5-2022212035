/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BigNumber } from 'bignumber.js';
import * as i0 from "@angular/core";
export class NumberHelperService {
    constructor() { }
    /**
     * @param {?} value
     * @param {?=} opts
     * @return {?}
     */
    formatMoney(value, opts = {}) {
        return this.formatValue(value, opts);
    }
    /**
     * @param {?} value
     * @param {?=} opts
     * @return {?}
     */
    formatNumber(value, opts = {}) {
        return this.formatValue(value, opts);
    }
    /**
     * @param {?} value
     * @param {?=} opts
     * @return {?}
     */
    unformat(value, opts = {}) {
        return this._unformat(value, opts);
    }
    /**
     * 获取最大值
     * @param {?} n1
     * @param {?=} n2
     * @return {?}
     */
    max(n1, n2 = null) {
        if (Array.isArray(n1)) {
            return BigNumber.max.apply(null, n1).toFixed();
        }
        else {
            if (n1 && n2) {
                return BigNumber.maximum(n1, n2).toFixed();
            }
            else {
                console.error(`请提供比较的值n1、n2.`);
            }
        }
    }
    /**
     * 最小值
     * @param {?} n1
     * @param {?=} n2
     * @return {?}
     */
    min(n1, n2 = null) {
        if (Array.isArray(n1)) {
            return BigNumber.min.apply(null, n1).toFixed();
        }
        else {
            if (n1 && n2) {
                return BigNumber.minimum(n1, n2).toFixed();
            }
            else {
                console.error(`请提供比较的值n1、n2.`);
            }
        }
    }
    /**
     * 求和
     * @param {?} n1
     * @return {?}
     */
    sum(n1) {
        return BigNumber.sum.apply(null, n1).toFixed();
    }
    /**
     * 平均数
     * @param {?} n1
     * @param {?} len
     * @return {?}
     */
    avg(n1, len) {
        return new BigNumber(n1).div(len).toFixed();
    }
    /**
     * 加法
     * @param {?} n1
     * @param {?} n2
     * @return {?}
     */
    plus(n1, n2) {
        return new BigNumber(n1).plus(n2).toFixed();
    }
    /**
     * 乘法
     * @param {?} n1
     * @param {?} n2
     * @return {?}
     */
    multiplied(n1, n2) {
        new BigNumber(n1).times(n2).toFixed();
    }
    /**
     * 减法
     * @param {?} n1
     * @param {?} n2
     * @return {?}
     */
    minus(n1, n2) {
        return new BigNumber(n1).minus(n2).toFixed();
    }
    /**
     * 是否相等
     * @param {?} n1
     * @param {?} n2
     * @return {?}
     */
    eq(n1, n2) {
        return new BigNumber(n1).eq(n2);
    }
    /**
     * @param {?} n1
     * @param {?} n2
     * @return {?}
     */
    lt(n1, n2) {
        return new BigNumber(n1).lt(n2);
    }
    /**
     * @param {?} n1
     * @param {?} n2
     * @return {?}
     */
    gt(n1, n2) {
        return new BigNumber(n1).gt(n2);
    }
    /**
     * @param {?} n1
     * @return {?}
     */
    toNumber(n1) {
        return new BigNumber(n1).toNumber();
    }
    /**
     * @param {?} n1
     * @param {?=} precision
     * @return {?}
     */
    toFixed(n1, precision = 0) {
        return new BigNumber(n1).toFixed(precision);
    }
    /**
     * @param {?} money
     * @return {?}
     */
    convertCurrency(money) {
        // 汉字的数字
        /** @type {?} */
        const cnNums = new Array('零', '壹', '贰', '叁', '肆', '伍', '陆', '柒', '捌', '玖');
        // 基本单位
        /** @type {?} */
        const cnIntRadice = new Array('', '拾', '佰', '仟');
        // 对应整数部分扩展单位
        /** @type {?} */
        const cnIntUnits = new Array('', '万', '亿', '兆');
        // 对应小数部分单位
        /** @type {?} */
        const cnDecUnits = new Array('角', '分', '毫', '厘');
        // 整数金额时后面跟的字符
        /** @type {?} */
        const cnInteger = '整';
        // 整型完以后的单位
        /** @type {?} */
        const cnIntLast = '元';
        // 最大处理的数字
        /** @type {?} */
        const maxNum = 999999999999999.9999;
        // 金额整数部分
        /** @type {?} */
        let integerNum;
        // 金额小数部分
        /** @type {?} */
        let decimalNum;
        // 输出的中文金额字符串
        /** @type {?} */
        let chineseStr = '';
        // 分离金额后用的数组，预定义
        /** @type {?} */
        let parts;
        if (money == '') {
            return '';
        }
        money = parseFloat(money);
        if (money >= maxNum) {
            // 超出最大处理数字
            return '';
        }
        if (money === 0) {
            chineseStr = cnNums[0] + cnIntLast + cnInteger;
            return chineseStr;
        }
        // 转换为字符串
        money = money.toString();
        if (money.indexOf('.') === -1) {
            integerNum = money;
            decimalNum = '';
        }
        else {
            parts = money.split('.');
            integerNum = parts[0];
            decimalNum = parts[1].substr(0, 4);
        }
        // 获取整型部分转换
        if (parseInt(integerNum, 10) > 0) {
            /** @type {?} */
            let zeroCount = 0;
            /** @type {?} */
            const IntLen = integerNum.length;
            for (let i = 0; i < IntLen; i++) {
                /** @type {?} */
                const n = integerNum.substr(i, 1);
                /** @type {?} */
                const p = IntLen - i - 1;
                /** @type {?} */
                const q = p / 4;
                /** @type {?} */
                const m = p % 4;
                if (n == '0') {
                    zeroCount++;
                }
                else {
                    if (zeroCount > 0) {
                        chineseStr += cnNums[0];
                    }
                    // 归零
                    zeroCount = 0;
                    chineseStr += cnNums[parseInt(n, 10)] + cnIntRadice[m];
                }
                if (m == 0 && zeroCount < 4) {
                    chineseStr += cnIntUnits[q];
                }
            }
            chineseStr += cnIntLast;
        }
        // 小数部分
        if (decimalNum !== '') {
            /** @type {?} */
            const decLen = decimalNum.length;
            for (let i = 0; i < decLen; i++) {
                /** @type {?} */
                let n = decimalNum.substr(i, 1);
                if (n !== '0') {
                    chineseStr += cnNums[Number(n)] + cnDecUnits[i];
                }
            }
        }
        if (chineseStr === '') {
            chineseStr += cnNums[0] + cnIntLast + cnInteger;
        }
        else if (decimalNum === '') {
            chineseStr += cnInteger;
        }
        return chineseStr;
    }
    /**
     * @private
     * @param {?} val
     * @param {?} opts
     * @return {?}
     */
    _unformat(val, opts) {
        val = (val === null || val === undefined || isNaN(val)) ? '' : String(val);
        if (opts) {
            // 去前缀
            if (opts.prefix) {
                val = val.replace(new RegExp(opts.prefix, 'g'), '');
            }
            // 去后缀
            if (opts.suffix) {
                val = val.replace(new RegExp(opts.suffix, 'g'), '');
            }
            // 去掉千分位分隔符
            val = val.replace(/\,/g, '');
        }
        return val;
    }
    /**
     * @private
     * @param {?} value
     * @param {?} opts
     * @return {?}
     */
    formatValue(value, opts) {
        /** @type {?} */
        const bignum = new BigNumber(value);
        /** @type {?} */
        const fmt = {
            prefix: opts.prefix || '',
            suffix: opts.suffix || '',
            decimalSeparator: opts.decimal || '.',
            groupSeparator: opts.thousand || '',
            groupSize: 3
        };
        if (bignum.isNaN()) {
            return '';
        }
        /** @type {?} */
        let precision = opts.precision || 0;
        precision = Number(precision);
        return bignum.toFormat(precision, fmt);
    }
}
NumberHelperService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NumberHelperService.ctorParameters = () => [];
/** @nocollapse */ NumberHelperService.ngInjectableDef = i0.defineInjectable({ factory: function NumberHelperService_Factory() { return new NumberHelperService(); }, token: NumberHelperService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,