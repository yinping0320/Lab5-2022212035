/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-09-02 17:55:57
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-23 16:57:28
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { addDays, differenceInMinutes, format, isValid, parseISO, subDays } from "date-fns";
import { Injectable } from "@angular/core";
import { MyDateConverter } from "./myDateConverter";
import { format as timeagoFmt } from './timeago/timeago';
import * as i0 from "@angular/core";
export class DateTimeHelperService {
    constructor() {
        this.$D = null;
        this.$D = new MyDateConverter();
    }
    /**
     * @param {?} date
     * @param {?=} locale
     * @return {?}
     */
    relativeTime(date, locale = 'zh-CHS') {
        if (date) {
            return timeagoFmt(date, locale);
        }
        return '';
    }
    /**
     * @param {?} date
     * @param {?} days
     * @return {?}
     */
    addDays(date, days) {
        return addDays(date, days);
    }
    /**
     * @param {?} date
     * @param {?} days
     * @return {?}
     */
    subDays(date, days) {
        return subDays(date, days);
    }
    /**
     * @param {?} dateLeft
     * @param {?} dateRight
     * @return {?}
     */
    differenceInMinutes(dateLeft, dateRight) {
        return differenceInMinutes(dateLeft, dateRight);
    }
    /**
     * @param {?} value 要转换格式的日期
     * @param {?=} fmt 格式化字符串
     *
     * 更多的格式化请参考
     * [点我点我](https://date-fns.org/v1.30.1/docs/format)
     * @return {?}
     */
    formatTo(value, fmt = "yyyy-MM-dd") {
        if (!value) {
            return "";
        }
        if (typeof value === "string" && value.indexOf("0001") === 0) {
            return "";
        }
        if (value instanceof Date) {
            return format(value, fmt);
        }
        /** @type {?} */
        let _d = parseISO(value);
        if (_d == "Invalid Date") {
            _d = this.createDate(value) || new Date(value);
        }
        // const d = parseISO(value);
        if (isValid(_d)) {
            /** @type {?} */
            const d = parseISO(format(_d, "yyyy-MM-dd HH:mm:ss"));
            return format(d, fmt);
        }
        else {
            // console.error(`${value} 转换为Date时失败。`);
            if (fmt.indexOf("HH") === 0 || fmt.indexOf("hh") === 0) {
                // 仅有时间部分
                // 提取时间
                /** @type {?} */
                const _time = value
                    .match(/\d*/g)
                    .filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                (n) => n !== ""))
                    .join(":");
                if (fmt === "HH" || fmt === "hh") {
                    fmt = fmt += ":mm";
                }
                // const fullDateTime = new Date('2022-11-25 ' + _time);
                /** @type {?} */
                const fullDateTime = parseISO("2022-11-25 " + _time);
                return format(fullDateTime, fmt);
            }
            return "";
        }
    }
    /**
     * @private
     * @param {?} val
     * @return {?}
     */
    createDate(val) {
        return this.$D.create(val);
    }
    // 根据参数日期获取具体日期信息
    /**
     * @private
     * @param {?=} date
     * @param {?=} firstDayOfWeek
     * @return {?}
     */
    formatDate(date = new Date(), firstDayOfWeek = '一') {
        /** @type {?} */
        let year = date.getFullYear();
        /** @type {?} */
        let month = date.getMonth() + 1;
        /** @type {?} */
        let day = date.getDate();
        /** @type {?} */
        let weekDay = date.getDay();
        if (firstDayOfWeek === '一') {
            if (!weekDay) {
                weekDay = 6;
            }
            else {
                weekDay = weekDay - 1;
            }
        }
        /** @type {?} */
        let week = ["一", "二", "三", "四", "五", "六", "日"][weekDay];
        /** @type {?} */
        const dateInfo = {
            date: new Date(date),
            dateStr: `${year}-${month.toString().padStart(2, "0")}-${day
                .toString()
                .padStart(2, "0")}`,
            year,
            month,
            day,
            week,
            isToday: false,
        };
        /** @type {?} */
        const today = new Date();
        // 判断是否为当天
        if (today.getFullYear() === year &&
            today.getMonth() + 1 === month &&
            today.getDate() === day) {
            dateInfo["isToday"] = true;
        }
        return dateInfo;
    }
    // 根据基准日期，获取长度为dayLenth的日期数组
    /**
     * @private
     * @param {?=} date
     * @param {?=} step
     * @param {?=} firstDayOfWeek
     * @return {?}
     */
    setDate(date = new Date(), step = 7, firstDayOfWeek = '一') {
        /** @type {?} */
        let weekData = [];
        /** @type {?} */
        const week = date.getDay() - 1;
        /** @type {?} */
        let _rangeDays = week * -1;
        if (firstDayOfWeek === '日') {
            _rangeDays = _rangeDays - 1;
        }
        date = this.getDateByDate(date, _rangeDays); // 以周日为第1天时 -1
        for (let i = 0; i < step; i++) {
            weekData.push(this.formatDate(i == 0 ? date : this.getDateByDate(date, 1), firstDayOfWeek));
        }
        return weekData;
    }
    // 根据基准日期获取前后某天的日期对象
    /**
     * @private
     * @param {?=} date
     * @param {?=} range
     * @return {?}
     */
    getDateByDate(date = new Date(), range = 0) {
        date.setDate(date.getDate() + range);
        return date;
    }
    /*
        获取以baselineDate所在周的一周、前一周、下一周的日期和星期信息(切换周期也可通过参数dayLenth自行设置)
        baselineDate: 设置的基准日期(返回的日期列表的第一个日期)
        range: 以 baselineDate 为基准日期的前后天数范围(如基准日期的range为0，需要返回前7天日期，则range为-7，后7天则range为7)
        step: 需要获取的日期信息周期天数，默认获取baselineDate所在周的一周日期信息
        firstDayOfWeek: 每周第一天 是 周一，还是周日，默认为 周一
       */
    /**
     * @param {?} __0
     * @param {?=} firstDayOfWeek
     * @return {?}
     */
    getWeekDate({ baselineDate = new Date(), range = 0, step = 7 }, firstDayOfWeek = '一') {
        return this.setDate(this.getDateByDate(baselineDate, range), step, firstDayOfWeek);
    }
    /**
     * 根据当前日期，获取当前是所在年的第几周
     * @param {?} year
     * @param {?} month
     * @param {?} day
     * @return {?}
     */
    getYearWeek(year, month, day) {
        //a为年 b为月 c为日
        /*
                date1是当前日期
                date2是当年第一天
                d是当前日期是今年第多少天
                用d + 当前年的第一天的周差距的和在除以7就是本年第几周
                */
        /** @type {?} */
        var date1 = new Date(year, parseInt(month) - 1, day);
        /** @type {?} */
        var date2 = new Date(year, 0, 1);
        /** @type {?} */
        var d = Math.round((date1.valueOf() - date2.valueOf()) / 86400000);
        return Math.ceil((d + ((date2.getDay() + 1) - 1)) / 7);
    }
    /**
     * @param {?} year
     * @param {?} month
     * @param {?} day
     * @return {?}
     */
    getMonthWeek(year, month, day) {
        /**
         * a = d = 当前日期
         * b = 6 - w = 当前周的还有几天过完(不算今天)
         * a + b 的和在除以7 就是当天是当前月份的第几周
         * @type {?}
         */
        var date = new Date(year, parseInt(month) - 1, day);
        /** @type {?} */
        var w = date.getDay();
        /** @type {?} */
        var d = date.getDate();
        if (w == 0) {
            w = 7;
        }
        /** @type {?} */
        var config = {
            getMonth: date.getMonth() + 1,
            getYear: date.getFullYear(),
            getWeek: Math.ceil((d + 6 - w) / 7),
        };
        return config;
    }
    /**
     * @param {?} date
     * @param {?} firstDayOfWeek
     * @return {?}
     */
    getNowWeekTime(date, firstDayOfWeek) {
        date.setDate(date.getDate() - ((date.getDay() + 6) % 7));
        /** @type {?} */
        const begin = {
            year: date.getFullYear(),
            month: date.getMonth() + 1,
            day: date.getDate()
        };
        date.setDate(date.getDate() + 6);
        /** @type {?} */
        const end = {
            year: date.getFullYear(),
            month: date.getMonth() + 1,
            day: date.getDate()
        };
        if (firstDayOfWeek === '一') {
            return { begin, end };
        }
        else {
            if (date.getDay() != 0) {
                date.setDate(date.getDate() - date.getDay());
            }
            /** @type {?} */
            const _begin = {
                year: date.getFullYear(),
                month: date.getMonth() + 1,
                day: date.getDate()
            };
            date.setDate(date.getDate() + 6 - date.getDay());
            /** @type {?} */
            const _end = {
                year: date.getFullYear(),
                month: date.getMonth() + 1,
                day: date.getDate()
            };
            return {
                begin: _begin,
                end: _end
            };
        }
    }
}
DateTimeHelperService.decorators = [
    { type: Injectable, args: [{
                providedIn: "root",
            },] }
];
/** @nocollapse */
DateTimeHelperService.ctorParameters = () => [];
/** @nocollapse */ DateTimeHelperService.ngInjectableDef = i0.defineInjectable({ factory: function DateTimeHelperService_Factory() { return new DateTimeHelperService(); }, token: DateTimeHelperService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    DateTimeHelperService.prototype.$D;
}
//# sourceMappingURL=data:application/json;base64,