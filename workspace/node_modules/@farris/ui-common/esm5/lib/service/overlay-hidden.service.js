/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from "@angular/core";
/**
 * @record
 */
export function OverLayOption() { }
if (false) {
    /**
     * 仅监听top Window 中的事件
     * @type {?|undefined}
     */
    OverLayOption.prototype.onlyTopWindow;
    /**
     * 仅处理滚轮滚动事件
     * @type {?|undefined}
     */
    OverLayOption.prototype.mouseWheel;
    /** @type {?|undefined} */
    OverLayOption.prototype.mouseDown;
    /** @type {?|undefined} */
    OverLayOption.prototype.scroll;
    /** @type {?|undefined} */
    OverLayOption.prototype.mouseUp;
    /** @type {?|undefined} */
    OverLayOption.prototype.click;
}
/** @type {?} */
var OverLayOptionDefaults = {
    onlyTopWindow: false,
    mouseWheel: true,
    mouseDown: true,
    scroll: false,
    mouseUp: false,
    click: false
};
var OverLayHiddenService = /** @class */ (function () {
    function OverLayHiddenService() {
        this.eventsMap = new WeakMap();
    }
    /**
     * @private
     * @param {?} el
     * @param {?} action
     * @return {?}
     */
    OverLayHiddenService.prototype.iframeEventHandle = /**
     * @private
     * @param {?} el
     * @param {?} action
     * @return {?}
     */
    function (el, action) {
        var e_1, _a;
        /** @type {?} */
        var iframes = Array.from(document.querySelectorAll('iframe'));
        if (iframes && iframes.length) {
            /** @type {?} */
            var _documentClickEvent = this.eventsMap.get(el);
            try {
                for (var iframes_1 = tslib_1.__values(iframes), iframes_1_1 = iframes_1.next(); !iframes_1_1.done; iframes_1_1 = iframes_1.next()) {
                    var iframe = iframes_1_1.value;
                    /** @type {?} */
                    var iframeDoc = iframe.contentDocument;
                    if (iframeDoc) {
                        iframeDoc[action]('mousedown', _documentClickEvent);
                        iframeDoc[action]('mousewheel', _documentClickEvent);
                        iframeDoc[action]('DOMMouseScroll', _documentClickEvent);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (iframes_1_1 && !iframes_1_1.done && (_a = iframes_1.return)) _a.call(iframes_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    };
    /**
     * @private
     * @param {?} el
     * @return {?}
     */
    OverLayHiddenService.prototype.removeMouseEvent = /**
     * @private
     * @param {?} el
     * @return {?}
     */
    function (el) {
        /** @type {?} */
        var _documentClickEvent = this.eventsMap.get(el);
        if (_documentClickEvent) {
            document.removeEventListener('mousedown', _documentClickEvent, true);
            document.removeEventListener('mousewheel', _documentClickEvent, true);
            document.removeEventListener('DOMMouseScroll', _documentClickEvent, true);
            if (top !== window) {
                top.document.body.removeEventListener('mousedown', _documentClickEvent, true);
            }
            this.iframeEventHandle(el, 'removeEventListener');
            _documentClickEvent = null;
            this.eventsMap.delete(el);
        }
    };
    /**
     * @param {?} el
     * @return {?}
     */
    OverLayHiddenService.prototype.destory = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        this.removeMouseEvent(el);
    };
    /**
     * @param {?} el
     * @param {?} _documentClickEvent
     * @param {?=} options
     * @return {?}
     */
    OverLayHiddenService.prototype.registerMouseEvent = /**
     * @param {?} el
     * @param {?} _documentClickEvent
     * @param {?=} options
     * @return {?}
     */
    function (el, _documentClickEvent, options) {
        // const _documentClickEvent1 = (e) => {
        //     if (e && e.target && e.target.nodeName.toLowerCase() == 'svg') {
        //         return;
        //     }
        var _this = this;
        //     _documentClickEvent(e);
        // }
        if (this.eventsMap.has(el)) {
            return;
        }
        else {
            this.eventsMap.set(el, _documentClickEvent);
        }
        if (!options) {
            options = OverLayOptionDefaults;
        }
        else {
            options = Object.assign({}, OverLayOptionDefaults, options);
        }
        if (options.onlyTopWindow && top !== window) {
            top.document.body.addEventListener('mousedown', _documentClickEvent, true);
        }
        else {
            if (options.mouseDown) {
                // 注册 mousedown 事件 隐藏panel
                document.addEventListener('mousedown', _documentClickEvent, true);
            }
            if (options.mouseWheel) {
                document.addEventListener('mousewheel', _documentClickEvent, true);
                document.addEventListener('DOMMouseScroll', _documentClickEvent, true);
            }
            if (options.scroll) {
                document.addEventListener('scroll', _documentClickEvent, true);
            }
            if (options.mouseUp) {
                document.addEventListener('mouseup', _documentClickEvent);
            }
            if (options.click) {
                document.addEventListener('click', _documentClickEvent);
            }
            if (top !== window) {
                top.document.body.addEventListener('mousedown', _documentClickEvent, true);
            }
            this.iframeEventHandle(el, 'addEventListener');
        }
        return (/**
         * @return {?}
         */
        function () {
            _this.destory(el);
        });
    };
    OverLayHiddenService.decorators = [
        { type: Injectable }
    ];
    return OverLayHiddenService;
}());
export { OverLayHiddenService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    OverLayHiddenService.prototype.eventsMap;
}
//# sourceMappingURL=data:application/json;base64,