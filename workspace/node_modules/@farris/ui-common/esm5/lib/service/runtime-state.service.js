/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { cloneDeep } from 'lodash-es';
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-06-16 13:44:59
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-08-15 09:47:34
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { BehaviorSubject } from 'rxjs';
import { Injectable } from '@angular/core';
import { merge } from 'lodash-es';
import { map } from 'rxjs/operators';
import { CommonUtils } from './../common.utils';
import * as i0 from "@angular/core";
import * as i1 from "../common.utils";
/**
 * @record
 */
export function RuntimeState() { }
if (false) {
    /** @type {?|undefined} */
    RuntimeState.prototype.form;
    /** @type {?|undefined} */
    RuntimeState.prototype.model;
}
/** @type {?} */
var DefaultRuntimeState = {
    form: {},
    model: {}
};
var RuntimeStateService = /** @class */ (function () {
    function RuntimeStateService(utils) {
        this.utils = utils;
        this.stateSubject = new BehaviorSubject({});
        this.state$ = this.stateSubject.asObservable();
        this.form$ = this.state$.pipe(map((/**
         * @param {?} state
         * @return {?}
         */
        function (state) { return state.form; })));
        this.lookupIsPending$ = this.form$.pipe(map((/**
         * @param {?} f
         * @return {?}
         */
        function (f) { return f.lookup.pending; })));
        this._state = cloneDeep(DefaultRuntimeState);
        this._formState = this._state.form;
        this._lookupState = this._formState.lookup;
    }
    /**
     * @private
     * @param {?} newVal
     * @return {?}
     */
    RuntimeStateService.prototype.setValue = /**
     * @private
     * @param {?} newVal
     * @return {?}
     */
    function (newVal) {
        if (newVal) {
            this._state = merge(this._state, newVal);
            this.stateSubject.next(this._state);
        }
    };
    /**
     * @private
     * @param {?} keyPath
     * @return {?}
     */
    RuntimeStateService.prototype.getValue = /**
     * @private
     * @param {?} keyPath
     * @return {?}
     */
    function (keyPath) {
        return this.utils.getValue(keyPath, this._state);
    };
    /**
     * @return {?}
     */
    RuntimeStateService.prototype.destroy = /**
     * @return {?}
     */
    function () {
        this._state = {
            form: {},
            model: {}
        };
        this._formState = this._state.form;
        this._lookupState = this._formState.lookup;
        this.stateSubject.next(this._state);
    };
    /**
     * @param {?} el
     * @return {?}
     */
    RuntimeStateService.prototype.setLookupInstance = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        this.setValue({ form: { lookup: { instance: el } } });
    };
    /**
     * @param {?} newVal
     * @return {?}
     */
    RuntimeStateService.prototype.updateFormState = /**
     * @param {?} newVal
     * @return {?}
     */
    function (newVal) {
        this.setValue({ form: newVal });
    };
    /**
     * @param {?} keyPath
     * @return {?}
     */
    RuntimeStateService.prototype.getFormState = /**
     * @param {?} keyPath
     * @return {?}
     */
    function (keyPath) {
        return this.getValue('form.' + keyPath);
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    RuntimeStateService.prototype.eventPath = /**
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        /** @type {?} */
        var path = (evt.composedPath && evt.composedPath()) || evt.path;
        /** @type {?} */
        var target = evt.target;
        if (path != null) {
            return (path.indexOf(window) < 0) ? path.concat(window) : path;
        }
        if (target === window) {
            return [window];
        }
        /** @type {?} */
        var getParents = (/**
         * @param {?} node
         * @param {?=} memo
         * @return {?}
         */
        function (node, memo) {
            if (memo === void 0) { memo = undefined; }
            memo = memo || [];
            /** @type {?} */
            var parentNode = node.parentNode;
            if (!parentNode) {
                return memo;
            }
            else {
                return getParents(parentNode, memo.concat(parentNode));
            }
        });
        return [target].concat(getParents(target), window);
    };
    RuntimeStateService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    RuntimeStateService.ctorParameters = function () { return [
        { type: CommonUtils }
    ]; };
    /** @nocollapse */ RuntimeStateService.ngInjectableDef = i0.defineInjectable({ factory: function RuntimeStateService_Factory() { return new RuntimeStateService(i0.inject(i1.CommonUtils)); }, token: RuntimeStateService, providedIn: "root" });
    return RuntimeStateService;
}());
export { RuntimeStateService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    RuntimeStateService.prototype._state;
    /**
     * @type {?}
     * @private
     */
    RuntimeStateService.prototype.stateSubject;
    /** @type {?} */
    RuntimeStateService.prototype.state$;
    /** @type {?} */
    RuntimeStateService.prototype.form$;
    /** @type {?} */
    RuntimeStateService.prototype.lookupIsPending$;
    /**
     * @type {?}
     * @private
     */
    RuntimeStateService.prototype._formState;
    /**
     * @type {?}
     * @private
     */
    RuntimeStateService.prototype._lookupState;
    /**
     * @type {?}
     * @private
     */
    RuntimeStateService.prototype.utils;
}
//# sourceMappingURL=data:application/json;base64,