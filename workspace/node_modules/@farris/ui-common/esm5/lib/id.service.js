/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { encrypt } from './encrypt';
var IdService = /** @class */ (function () {
    function IdService() {
    }
    /**
     * @return {?}
     */
    IdService.prototype.generate = /**
     * @return {?}
     */
    function () {
        return this.guid();
    };
    /**
     * @param {?} str
     * @param {?=} type
     * @return {?}
     */
    IdService.prototype.encrypt = /**
     * @param {?} str
     * @param {?=} type
     * @return {?}
     */
    function (str, type) {
        if (type === void 0) { type = 'hex'; }
        return encrypt(str, type);
    };
    /**
     * @return {?}
     */
    IdService.prototype.guid = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var _crypto = window.crypto ? crypto : window['msCrypto'];
        if (_crypto) {
            return (((/** @type {?} */ ([1e7]))) + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (/**
             * @param {?} c
             * @return {?}
             */
            function (c) {
                return (c ^ (_crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16);
            }));
        }
        else {
            return this.uuid();
        }
    };
    /**
     * @return {?}
     */
    IdService.prototype.uuid = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var timestamp = Date.now().valueOf();
        /** @type {?} */
        var uuid = 0;
        if (timestamp > IdService.previous) {
            IdService.previous = timestamp;
            uuid = timestamp;
        }
        else {
            IdService.previous = IdService.previous + 100;
            uuid = IdService.previous;
        }
        return uuid.toString(16);
    };
    IdService.previous = 0;
    IdService.decorators = [
        { type: Injectable }
    ];
    return IdService;
}());
export { IdService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IdService.previous;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktY29tbW9uLyIsInNvdXJjZXMiOlsibGliL2lkLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUlwQztJQUFBO0lBa0NBLENBQUM7Ozs7SUEvQkcsNEJBQVE7OztJQUFSO1FBQ0ksT0FBTyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDdkIsQ0FBQzs7Ozs7O0lBQ0QsMkJBQU87Ozs7O0lBQVAsVUFBUSxHQUFXLEVBQUUsSUFBWTtRQUFaLHFCQUFBLEVBQUEsWUFBWTtRQUM3QixPQUFPLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUIsQ0FBQzs7OztJQUNELHdCQUFJOzs7SUFBSjs7WUFDVSxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDO1FBQzNELElBQUksT0FBTyxFQUFFO1lBQ1QsT0FBTyxDQUFDLENBQUMsbUJBQUEsQ0FBQyxHQUFHLENBQUMsRUFBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUTs7OztZQUFFLFVBQUEsQ0FBQztnQkFDcEUsT0FBQSxDQUFDLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1lBQXBGLENBQW9GLEVBQ3ZGLENBQUM7U0FDTDthQUFNO1lBQ0gsT0FBTyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDdEI7SUFDTCxDQUFDOzs7O0lBRUQsd0JBQUk7OztJQUFKOztZQUNVLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxFQUFFOztZQUNsQyxJQUFJLEdBQUcsQ0FBQztRQUVaLElBQUksU0FBUyxHQUFHLFNBQVMsQ0FBQyxRQUFRLEVBQUU7WUFDaEMsU0FBUyxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUM7WUFDL0IsSUFBSSxHQUFHLFNBQVMsQ0FBQztTQUNwQjthQUFNO1lBQ0gsU0FBUyxDQUFDLFFBQVEsR0FBRyxTQUFTLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQztZQUM5QyxJQUFJLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQztTQUM3QjtRQUVELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBL0JjLGtCQUFRLEdBQUcsQ0FBQyxDQUFDOztnQkFGL0IsVUFBVTs7SUFrQ1gsZ0JBQUM7Q0FBQSxBQWxDRCxJQWtDQztTQWpDWSxTQUFTOzs7Ozs7SUFDbEIsbUJBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBlbmNyeXB0IH0gZnJvbSAnLi9lbmNyeXB0JztcclxuXHJcblxyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgSWRTZXJ2aWNlIHtcclxuICAgIHByaXZhdGUgc3RhdGljIHByZXZpb3VzID0gMDtcclxuICAgIGdlbmVyYXRlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmd1aWQoKTtcclxuICAgIH1cclxuICAgIGVuY3J5cHQoc3RyOiBzdHJpbmcsIHR5cGUgPSAnaGV4Jykge1xyXG4gICAgICAgIHJldHVybiBlbmNyeXB0KHN0ciwgdHlwZSk7XHJcbiAgICB9XHJcbiAgICBndWlkKCkge1xyXG4gICAgICAgIGNvbnN0IF9jcnlwdG8gPSB3aW5kb3cuY3J5cHRvID8gY3J5cHRvIDogd2luZG93Wydtc0NyeXB0byddO1xyXG4gICAgICAgIGlmIChfY3J5cHRvKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoKFsxZTddIGFzIGFueSkgKyAtMWUzICsgLTRlMyArIC04ZTMgKyAtMWUxMSkucmVwbGFjZSgvWzAxOF0vZywgYyA9PlxyXG4gICAgICAgICAgICAgICAgKGMgXiAoX2NyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoMSkpWzBdICYgKDE1ID4+IChjIC8gNCkpKSkudG9TdHJpbmcoMTYpXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudXVpZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1dWlkKCkge1xyXG4gICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IERhdGUubm93KCkudmFsdWVPZigpO1xyXG4gICAgICAgIGxldCB1dWlkID0gMDtcclxuXHJcbiAgICAgICAgaWYgKHRpbWVzdGFtcCA+IElkU2VydmljZS5wcmV2aW91cykge1xyXG4gICAgICAgICAgICBJZFNlcnZpY2UucHJldmlvdXMgPSB0aW1lc3RhbXA7XHJcbiAgICAgICAgICAgIHV1aWQgPSB0aW1lc3RhbXA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgSWRTZXJ2aWNlLnByZXZpb3VzID0gSWRTZXJ2aWNlLnByZXZpb3VzICsgMTAwO1xyXG4gICAgICAgICAgICB1dWlkID0gSWRTZXJ2aWNlLnByZXZpb3VzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHV1aWQudG9TdHJpbmcoMTYpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==