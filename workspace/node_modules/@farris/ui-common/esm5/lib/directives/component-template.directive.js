/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ComponentFactoryResolver, ComponentRef, Directive, ElementRef, Injector, Input } from '@angular/core';
/**
 * @record
 */
export function ITemplateComponent() { }
if (false) {
    /** @type {?} */
    ITemplateComponent.prototype.ctx;
    /** @type {?|undefined} */
    ITemplateComponent.prototype.renderContext;
}
var FarrisComponentTemplateDirective = /** @class */ (function () {
    function FarrisComponentTemplateDirective(injector, el, cfr) {
        this.injector = injector;
        this.el = el;
        this.cfr = cfr;
        this.cmpRef = null;
        this.templateType = 'cell';
    }
    /**
     * @return {?}
     */
    FarrisComponentTemplateDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.renderTemplate();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    FarrisComponentTemplateDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.ctx && !changes.ctx.isFirstChange()) {
            this._expandCtxToThis();
        }
    };
    /**
     * @private
     * @return {?}
     */
    FarrisComponentTemplateDirective.prototype._expandCtxToThis = /**
     * @private
     * @return {?}
     */
    function () {
        this.expandContext(this.ctx);
        this.expandContext(this.renderContext);
    };
    /**
     * @private
     * @param {?} ctx
     * @return {?}
     */
    FarrisComponentTemplateDirective.prototype.expandContext = /**
     * @private
     * @param {?} ctx
     * @return {?}
     */
    function (ctx) {
        var _this = this;
        if (this.templateComponentIns && ctx) {
            Object.keys(ctx).forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                _this.templateComponentIns.instance[n] = ctx[n];
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    FarrisComponentTemplateDirective.prototype.renderTemplate = /**
     * @private
     * @return {?}
     */
    function () {
        this.templateComponentIns = this._getCmpRef();
        if (this.templateComponentIns) {
            this._expandCtxToThis();
            this.templateComponentIns.instance.ctx = this.ctx;
            this.el.nativeElement.append(this.templateComponentIns.location.nativeElement);
            this.templateComponentIns.changeDetectorRef.detectChanges();
        }
    };
    /**
     * @private
     * @return {?}
     */
    FarrisComponentTemplateDirective.prototype._getCmpRef = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.cmpRef) {
            return this.createInstance(this.cmpRef);
        }
        if (this.column) {
            if (this.templateType == 'cell') {
                if (this.column.componentType) {
                    return this.createInstance(this.column.componentType);
                }
            }
            else {
                if (this.column.headerComponentType) {
                    return this.createInstance(this.column.headerComponentType);
                }
            }
        }
        return null;
    };
    /**
     * @private
     * @param {?} cmptype
     * @return {?}
     */
    FarrisComponentTemplateDirective.prototype.createInstance = /**
     * @private
     * @param {?} cmptype
     * @return {?}
     */
    function (cmptype) {
        if (!cmptype) {
            return null;
        }
        /** @type {?} */
        var templateComponentIns = null;
        if (!cmptype.ngBaseDef && typeof cmptype === 'function') {
            templateComponentIns = cmptype();
        }
        else {
            if (!cmptype['instance']) {
                /** @type {?} */
                var cellTemplateCmp = this.cfr.resolveComponentFactory((/** @type {?} */ (cmptype)));
                templateComponentIns = cellTemplateCmp.create(this.injector);
            }
            else {
                templateComponentIns = cmptype;
            }
        }
        return templateComponentIns;
    };
    FarrisComponentTemplateDirective.decorators = [
        { type: Directive, args: [{ selector: '[component-template]' },] }
    ];
    /** @nocollapse */
    FarrisComponentTemplateDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: ElementRef },
        { type: ComponentFactoryResolver }
    ]; };
    FarrisComponentTemplateDirective.propDecorators = {
        column: [{ type: Input, args: ['component-template',] }],
        cmpRef: [{ type: Input }],
        ctx: [{ type: Input }],
        renderContext: [{ type: Input }],
        templateType: [{ type: Input }]
    };
    return FarrisComponentTemplateDirective;
}());
export { FarrisComponentTemplateDirective };
if (false) {
    /** @type {?} */
    FarrisComponentTemplateDirective.prototype.column;
    /** @type {?} */
    FarrisComponentTemplateDirective.prototype.cmpRef;
    /** @type {?} */
    FarrisComponentTemplateDirective.prototype.ctx;
    /** @type {?} */
    FarrisComponentTemplateDirective.prototype.renderContext;
    /** @type {?} */
    FarrisComponentTemplateDirective.prototype.templateType;
    /** @type {?} */
    FarrisComponentTemplateDirective.prototype.templateComponentIns;
    /**
     * @type {?}
     * @private
     */
    FarrisComponentTemplateDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    FarrisComponentTemplateDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FarrisComponentTemplateDirective.prototype.cfr;
}
//# sourceMappingURL=data:application/json;base64,