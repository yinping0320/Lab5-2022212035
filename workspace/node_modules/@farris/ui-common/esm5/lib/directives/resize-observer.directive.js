/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, Output, ElementRef, EventEmitter, Input } from '@angular/core';
import ResizeObserver from 'resize-observer-polyfill';
/** @type {?} */
var entriesMap = new WeakMap();
var ɵ0 = /**
 * @param {?} entries
 * @return {?}
 */
function (entries) {
    var e_1, _a;
    try {
        for (var entries_1 = tslib_1.__values(entries), entries_1_1 = entries_1.next(); !entries_1_1.done; entries_1_1 = entries_1.next()) {
            var entry = entries_1_1.value;
            if (entriesMap.has(entry.target)) {
                /** @type {?} */
                var comp = entriesMap.get(entry.target);
                comp._resizeCallback(entry);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (entries_1_1 && !entries_1_1.done && (_a = entries_1.return)) _a.call(entries_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
};
/** @type {?} */
var ro = new ResizeObserver((ɵ0));
var ResizeObserverDirective = /** @class */ (function () {
    function ResizeObserverDirective(el) {
        this.el = el;
        this.resize = new EventEmitter();
    }
    /**
     * @param {?} entry
     * @return {?}
     */
    ResizeObserverDirective.prototype._resizeCallback = /**
     * @param {?} entry
     * @return {?}
     */
    function (entry) {
        entry['bindintClientRect'] = entry.target.getBoundingClientRect();
        this.resize.emit(entry);
    };
    /**
     * @return {?}
     */
    ResizeObserverDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var target = this.target ? this.target.nativeElement : this.el.nativeElement;
        entriesMap.set(target, this);
        ro.observe(target);
    };
    /**
     * @return {?}
     */
    ResizeObserverDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var target = this.el.nativeElement;
        ro.unobserve(target);
        entriesMap.delete(target);
    };
    ResizeObserverDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[resizeObserver]'
                },] }
    ];
    /** @nocollapse */
    ResizeObserverDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    ResizeObserverDirective.propDecorators = {
        target: [{ type: Input, args: ['resizeObserver',] }],
        resize: [{ type: Output }]
    };
    return ResizeObserverDirective;
}());
export { ResizeObserverDirective };
if (false) {
    /** @type {?} */
    ResizeObserverDirective.prototype.target;
    /** @type {?} */
    ResizeObserverDirective.prototype.resize;
    /** @type {?} */
    ResizeObserverDirective.prototype.el;
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplLW9ic2VydmVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktY29tbW9uLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvcmVzaXplLW9ic2VydmVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBcUIsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN0RyxPQUFPLGNBQWMsTUFBTSwwQkFBMEIsQ0FBQzs7SUFHaEQsVUFBVSxHQUFHLElBQUksT0FBTyxFQUFFOzs7OztBQUVGLFVBQUEsT0FBTzs7O1FBQ2pDLEtBQW9CLElBQUEsWUFBQSxpQkFBQSxPQUFPLENBQUEsZ0NBQUEscURBQUU7WUFBeEIsSUFBTSxLQUFLLG9CQUFBO1lBQ1osSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRTs7b0JBQ3hCLElBQUksR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7Z0JBQ3pDLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDL0I7U0FDSjs7Ozs7Ozs7O0FBQ0wsQ0FBQzs7SUFQSyxFQUFFLEdBQUcsSUFBSSxjQUFjLE1BTzNCO0FBRUY7SUFRSSxpQ0FBbUIsRUFBYztRQUFkLE9BQUUsR0FBRixFQUFFLENBQVk7UUFGdkIsV0FBTSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFHdEMsQ0FBQzs7Ozs7SUFHRCxpREFBZTs7OztJQUFmLFVBQWdCLEtBQUs7UUFDakIsS0FBSyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1FBQ2xFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzVCLENBQUM7Ozs7SUFFRCwwQ0FBUTs7O0lBQVI7O1lBQ1UsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWE7UUFDL0UsVUFBVSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDN0IsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN2QixDQUFDOzs7O0lBRUQsNkNBQVc7OztJQUFYOztZQUNVLE1BQU0sR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWE7UUFDcEMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNyQixVQUFVLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzlCLENBQUM7O2dCQTNCSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLGtCQUFrQjtpQkFDL0I7Ozs7Z0JBakIyQixVQUFVOzs7eUJBbUJqQyxLQUFLLFNBQUMsZ0JBQWdCO3lCQUV0QixNQUFNOztJQXVCWCw4QkFBQztDQUFBLEFBN0JELElBNkJDO1NBMUJZLHVCQUF1Qjs7O0lBQ2hDLHlDQUE0Qzs7SUFFNUMseUNBQXNDOztJQUUxQixxQ0FBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIE91dHB1dCwgRWxlbWVudFJlZiwgT25EZXN0cm95LCBPbkluaXQsIEV2ZW50RW1pdHRlciwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IFJlc2l6ZU9ic2VydmVyIGZyb20gJ3Jlc2l6ZS1vYnNlcnZlci1wb2x5ZmlsbCc7XHJcblxyXG5cclxuY29uc3QgZW50cmllc01hcCA9IG5ldyBXZWFrTWFwKCk7XHJcblxyXG5jb25zdCBybyA9IG5ldyBSZXNpemVPYnNlcnZlcihlbnRyaWVzID0+IHtcclxuICAgIGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcykge1xyXG4gICAgICAgIGlmIChlbnRyaWVzTWFwLmhhcyhlbnRyeS50YXJnZXQpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbXAgPSBlbnRyaWVzTWFwLmdldChlbnRyeS50YXJnZXQpO1xyXG4gICAgICAgICAgICBjb21wLl9yZXNpemVDYWxsYmFjayhlbnRyeSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KTtcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbcmVzaXplT2JzZXJ2ZXJdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgUmVzaXplT2JzZXJ2ZXJEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XHJcbiAgICBASW5wdXQoJ3Jlc2l6ZU9ic2VydmVyJykgdGFyZ2V0OiBFbGVtZW50UmVmO1xyXG5cclxuICAgIEBPdXRwdXQoKSByZXNpemUgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHVibGljIGVsOiBFbGVtZW50UmVmKSB7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIF9yZXNpemVDYWxsYmFjayhlbnRyeSkge1xyXG4gICAgICAgIGVudHJ5WydiaW5kaW50Q2xpZW50UmVjdCddID0gZW50cnkudGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIHRoaXMucmVzaXplLmVtaXQoZW50cnkpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMudGFyZ2V0ID8gIHRoaXMudGFyZ2V0Lm5hdGl2ZUVsZW1lbnQgOiB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgICAgZW50cmllc01hcC5zZXQodGFyZ2V0LCB0aGlzKTtcclxuICAgICAgICByby5vYnNlcnZlKHRhcmdldCk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50O1xyXG4gICAgICAgIHJvLnVub2JzZXJ2ZSh0YXJnZXQpO1xyXG4gICAgICAgIGVudHJpZXNNYXAuZGVsZXRlKHRhcmdldCk7XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==