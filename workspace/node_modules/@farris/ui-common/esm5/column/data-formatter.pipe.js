/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injector, Pipe } from '@angular/core';
import { ColumnFormatService } from './column-format.service';
var ColumnFormatterPipe = /** @class */ (function () {
    function ColumnFormatterPipe(injector, colmunFormatSer) {
        this.injector = injector;
        this.colmunFormatSer = colmunFormatSer;
    }
    /**
     * @param {?} value
     * @param {?} col
     * @param {...?} args
     * @return {?}
     */
    ColumnFormatterPipe.prototype.transform = /**
     * @param {?} value
     * @param {?} col
     * @param {...?} args
     * @return {?}
     */
    function (value, col) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        /** @type {?} */
        var data = args[0];
        if (col) {
            if (col.formatter) {
                return this.colmunFormatSer.format(value, data, col.formatter);
            }
            return value;
        }
        return value;
    };
    ColumnFormatterPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'columnformatter'
                },] }
    ];
    /** @nocollapse */
    ColumnFormatterPipe.ctorParameters = function () { return [
        { type: Injector },
        { type: ColumnFormatService }
    ]; };
    return ColumnFormatterPipe;
}());
export { ColumnFormatterPipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ColumnFormatterPipe.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ColumnFormatterPipe.prototype.colmunFormatSer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1mb3JtYXR0ZXIucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktY29tbW9uL2NvbHVtbi8iLCJzb3VyY2VzIjpbImRhdGEtZm9ybWF0dGVyLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUU5RDtJQUtJLDZCQUFxQixRQUFrQixFQUFVLGVBQW9DO1FBQWhFLGFBQVEsR0FBUixRQUFRLENBQVU7UUFBVSxvQkFBZSxHQUFmLGVBQWUsQ0FBcUI7SUFBSSxDQUFDOzs7Ozs7O0lBRTFGLHVDQUFTOzs7Ozs7SUFBVCxVQUFVLEtBQVUsRUFBRSxHQUF1QztRQUFFLGNBQWM7YUFBZCxVQUFjLEVBQWQscUJBQWMsRUFBZCxJQUFjO1lBQWQsNkJBQWM7OztZQUNuRSxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNwQixJQUFHLEdBQUcsRUFBRTtZQUNKLElBQUcsR0FBRyxDQUFDLFNBQVMsRUFBRTtnQkFDZCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQ2xFO1lBRUQsT0FBTyxLQUFLLENBQUM7U0FDaEI7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDOztnQkFsQkosSUFBSSxTQUFDO29CQUNGLElBQUksRUFBRSxpQkFBaUI7aUJBQzFCOzs7O2dCQUxRLFFBQVE7Z0JBQ1IsbUJBQW1COztJQXFCNUIsMEJBQUM7Q0FBQSxBQW5CRCxJQW1CQztTQWhCWSxtQkFBbUI7Ozs7OztJQUVmLHVDQUEwQjs7Ozs7SUFBRSw4Q0FBNEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RvciwgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb2x1bW5Gb3JtYXRTZXJ2aWNlIH0gZnJvbSAnLi9jb2x1bW4tZm9ybWF0LnNlcnZpY2UnO1xyXG5cclxuQFBpcGUoe1xyXG4gICAgbmFtZTogJ2NvbHVtbmZvcm1hdHRlcidcclxufSlcclxuZXhwb3J0IGNsYXNzIENvbHVtbkZvcm1hdHRlclBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvciggcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsIHByaXZhdGUgY29sbXVuRm9ybWF0U2VyOiBDb2x1bW5Gb3JtYXRTZXJ2aWNlICkge31cclxuXHJcbiAgICB0cmFuc2Zvcm0odmFsdWU6IGFueSwgY29sOiB7IGZpZWxkOiBzdHJpbmcsIGZvcm1hdHRlcj86IGFueSB9LCAuLi5hcmdzOiBhbnlbXSk6IGFueSB7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IGFyZ3NbMF07XHJcbiAgICAgICAgaWYoY29sKSB7XHJcbiAgICAgICAgICAgIGlmKGNvbC5mb3JtYXR0ZXIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbG11bkZvcm1hdFNlci5mb3JtYXQodmFsdWUsIGRhdGEsIGNvbC5mb3JtYXR0ZXIpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcbn0iXX0=