/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { en, zh_CHS, zh_CHT } from './lang';
/** @type {?} */
var SEC_ARRAY = [
    60,
    60,
    24,
    7,
    365 / 7 / 12,
    12,
];
/**
 * @param {?=} input
 * @return {?}
 */
export function toDate(input) {
    if (input instanceof Date)
        return input;
    // @ts-ignore
    if (!isNaN(input) || /^\d+$/.test(input))
        return new Date(parseInt(input));
    input = (input || '')
        // @ts-ignore
        .trim()
        .replace(/\.\d+/, '') // remove milliseconds
        .replace(/-/, '/')
        .replace(/-/, '/')
        .replace(/(\d)T(\d)/, '$1 $2')
        .replace(/Z/, ' UTC') // 2017-2-5T3:57:52Z -> 2017-2-5 3:57:52UTC
        .replace(/([+-]\d\d):?(\d\d)/, ' $1$2'); // -04:00 -> -0400
    return new Date(input);
}
/**
 * format the diff second to *** time ago, with setting locale
 * @param {?} diff
 * @param {?} localeFunc
 * @return {?}
 */
export function formatDiff(diff, localeFunc) {
    /**
     * if locale is not exist, use defaultLocale.
     * if defaultLocale is not exist, use build-in `en`.
     * be sure of no error when locale is not exist.
     *
     * If `time in`, then 1
     * If `time ago`, then 0
     * @type {?}
     */
    var agoIn = diff < 0 ? 1 : 0;
    /**
     * Get absolute value of number (|diff| is non-negative) value of x
     * |diff| = diff if diff is positive
     * |diff| = -diff if diff is negative
     * |0| = 0
     */
    diff = Math.abs(diff);
    /**
     * Time in seconds
     * @type {?}
     */
    var totalSec = diff;
    /**
     * Unit of time
     * @type {?}
     */
    var idx = 0;
    for (; diff >= SEC_ARRAY[idx] && idx < SEC_ARRAY.length; idx++) {
        diff /= SEC_ARRAY[idx];
    }
    /**
     * Math.floor() is alternative of ~~
     *
     * The differences and bugs:
     * Math.floor(3.7) -> 4 but ~~3.7 -> 3
     * Math.floor(1559125440000.6) -> 1559125440000 but ~~1559125440000.6 -> 52311552
     *
     * More information about the performance of algebraic:
     * https://www.youtube.com/watch?v=65-RbBwZQdU
     */
    diff = Math.floor(diff);
    idx *= 2;
    if (diff > (idx === 0 ? 9 : 1))
        idx += 1;
    return localeFunc(diff, idx, totalSec)[agoIn].replace('%s', diff.toString());
}
/**
 * calculate the diff second between date to be formatted an now date.
 * @param {?} date
 * @param {?} relativeDate
 * @return {?}
 */
export function diffSec(date, relativeDate) {
    /** @type {?} */
    var relDate = relativeDate ? toDate(relativeDate) : new Date();
    return (+relDate - +toDate(date)) / 1000;
}
/**
 * nextInterval: calculate the next interval time.
 * - diff: the diff sec between now and date to be formatted.
 *
 * What's the meaning?
 * diff = 61 then return 59
 * diff = 3601 (an hour + 1 second), then return 3599
 * make the interval with high performance.
 *
 * @param {?} diff
 * @return {?}
 */
export function nextInterval(diff) {
    /** @type {?} */
    var rst = 1;
    /** @type {?} */
    var i = 0;
    /** @type {?} */
    var d = Math.abs(diff);
    for (; diff >= SEC_ARRAY[i] && i < SEC_ARRAY.length; i++) {
        diff /= SEC_ARRAY[i];
        rst *= SEC_ARRAY[i];
    }
    d = d % rst;
    d = d ? rst - d : rst;
    return Math.ceil(d);
}
/** @type {?} */
export var format = (/**
 * @param {?} date
 * @param {?=} locale
 * @param {?=} opts
 * @return {?}
 */
function (date, locale, opts) {
    // diff seconds
    /** @type {?} */
    var sec = diffSec(date, opts && opts.relativeDate);
    // format it with locale
    return formatDiff(sec, getLocale(locale));
});
/**
 * All supported locales
 * @type {?}
 */
var Locales = {};
/**
 * register a locale
 * \@param locale
 * \@param func
 * @type {?}
 */
export var register = (/**
 * @param {?} locale
 * @param {?} func
 * @return {?}
 */
function (locale, func) {
    Locales[locale] = func;
});
/**
 * get a locale, default is en_US
 * \@param locale
 * @type {?}
 */
export var getLocale = (/**
 * @param {?} locale
 * @return {?}
 */
function (locale) {
    return Locales[locale] || Locales['zh-CHS'];
});
register('en', en);
register('zh-CHS', zh_CHS);
register('zh-CHT', zh_CHT);
//# sourceMappingURL=data:application/json;base64,