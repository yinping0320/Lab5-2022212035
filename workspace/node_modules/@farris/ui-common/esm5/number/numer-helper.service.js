/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BigNumber } from 'bignumber.js';
import * as i0 from "@angular/core";
var NumberHelperService = /** @class */ (function () {
    function NumberHelperService() {
    }
    /**
     * @param {?} value
     * @param {?=} opts
     * @return {?}
     */
    NumberHelperService.prototype.formatMoney = /**
     * @param {?} value
     * @param {?=} opts
     * @return {?}
     */
    function (value, opts) {
        if (opts === void 0) { opts = {}; }
        return this.formatValue(value, opts);
    };
    /**
     * @param {?} value
     * @param {?=} opts
     * @return {?}
     */
    NumberHelperService.prototype.formatNumber = /**
     * @param {?} value
     * @param {?=} opts
     * @return {?}
     */
    function (value, opts) {
        if (opts === void 0) { opts = {}; }
        return this.formatValue(value, opts);
    };
    /**
     * @param {?} value
     * @param {?=} opts
     * @return {?}
     */
    NumberHelperService.prototype.unformat = /**
     * @param {?} value
     * @param {?=} opts
     * @return {?}
     */
    function (value, opts) {
        if (opts === void 0) { opts = {}; }
        return this._unformat(value, opts);
    };
    /** 获取最大值 */
    /**
     * 获取最大值
     * @param {?} n1
     * @param {?=} n2
     * @return {?}
     */
    NumberHelperService.prototype.max = /**
     * 获取最大值
     * @param {?} n1
     * @param {?=} n2
     * @return {?}
     */
    function (n1, n2) {
        if (n2 === void 0) { n2 = null; }
        if (Array.isArray(n1)) {
            return BigNumber.max.apply(null, n1).toFixed();
        }
        else {
            if (n1 && n2) {
                return BigNumber.maximum(n1, n2).toFixed();
            }
            else {
                console.error("\u8BF7\u63D0\u4F9B\u6BD4\u8F83\u7684\u503Cn1\u3001n2.");
            }
        }
    };
    /** 最小值 */
    /**
     * 最小值
     * @param {?} n1
     * @param {?=} n2
     * @return {?}
     */
    NumberHelperService.prototype.min = /**
     * 最小值
     * @param {?} n1
     * @param {?=} n2
     * @return {?}
     */
    function (n1, n2) {
        if (n2 === void 0) { n2 = null; }
        if (Array.isArray(n1)) {
            return BigNumber.min.apply(null, n1).toFixed();
        }
        else {
            if (n1 && n2) {
                return BigNumber.minimum(n1, n2).toFixed();
            }
            else {
                console.error("\u8BF7\u63D0\u4F9B\u6BD4\u8F83\u7684\u503Cn1\u3001n2.");
            }
        }
    };
    /** 求和 */
    /**
     * 求和
     * @param {?} n1
     * @return {?}
     */
    NumberHelperService.prototype.sum = /**
     * 求和
     * @param {?} n1
     * @return {?}
     */
    function (n1) {
        return BigNumber.sum.apply(null, n1).toFixed();
    };
    /** 平均数 */
    /**
     * 平均数
     * @param {?} n1
     * @param {?} len
     * @return {?}
     */
    NumberHelperService.prototype.avg = /**
     * 平均数
     * @param {?} n1
     * @param {?} len
     * @return {?}
     */
    function (n1, len) {
        return new BigNumber(n1).div(len).toFixed();
    };
    /**  加法 */
    /**
     * 加法
     * @param {?} n1
     * @param {?} n2
     * @return {?}
     */
    NumberHelperService.prototype.plus = /**
     * 加法
     * @param {?} n1
     * @param {?} n2
     * @return {?}
     */
    function (n1, n2) {
        return new BigNumber(n1).plus(n2).toFixed();
    };
    /** 乘法 */
    /**
     * 乘法
     * @param {?} n1
     * @param {?} n2
     * @return {?}
     */
    NumberHelperService.prototype.multiplied = /**
     * 乘法
     * @param {?} n1
     * @param {?} n2
     * @return {?}
     */
    function (n1, n2) {
        new BigNumber(n1).times(n2).toFixed();
    };
    /** 减法 */
    /**
     * 减法
     * @param {?} n1
     * @param {?} n2
     * @return {?}
     */
    NumberHelperService.prototype.minus = /**
     * 减法
     * @param {?} n1
     * @param {?} n2
     * @return {?}
     */
    function (n1, n2) {
        return new BigNumber(n1).minus(n2).toFixed();
    };
    /** 是否相等 */
    /**
     * 是否相等
     * @param {?} n1
     * @param {?} n2
     * @return {?}
     */
    NumberHelperService.prototype.eq = /**
     * 是否相等
     * @param {?} n1
     * @param {?} n2
     * @return {?}
     */
    function (n1, n2) {
        return new BigNumber(n1).eq(n2);
    };
    /**
     * @param {?} n1
     * @param {?} n2
     * @return {?}
     */
    NumberHelperService.prototype.lt = /**
     * @param {?} n1
     * @param {?} n2
     * @return {?}
     */
    function (n1, n2) {
        return new BigNumber(n1).lt(n2);
    };
    /**
     * @param {?} n1
     * @param {?} n2
     * @return {?}
     */
    NumberHelperService.prototype.gt = /**
     * @param {?} n1
     * @param {?} n2
     * @return {?}
     */
    function (n1, n2) {
        return new BigNumber(n1).gt(n2);
    };
    /**
     * @param {?} n1
     * @return {?}
     */
    NumberHelperService.prototype.toNumber = /**
     * @param {?} n1
     * @return {?}
     */
    function (n1) {
        return new BigNumber(n1).toNumber();
    };
    /**
     * @param {?} n1
     * @param {?=} precision
     * @return {?}
     */
    NumberHelperService.prototype.toFixed = /**
     * @param {?} n1
     * @param {?=} precision
     * @return {?}
     */
    function (n1, precision) {
        if (precision === void 0) { precision = 0; }
        return new BigNumber(n1).toFixed(precision);
    };
    /**
     * @param {?} money
     * @return {?}
     */
    NumberHelperService.prototype.convertCurrency = /**
     * @param {?} money
     * @return {?}
     */
    function (money) {
        // 汉字的数字
        /** @type {?} */
        var cnNums = new Array('零', '壹', '贰', '叁', '肆', '伍', '陆', '柒', '捌', '玖');
        // 基本单位
        /** @type {?} */
        var cnIntRadice = new Array('', '拾', '佰', '仟');
        // 对应整数部分扩展单位
        /** @type {?} */
        var cnIntUnits = new Array('', '万', '亿', '兆');
        // 对应小数部分单位
        /** @type {?} */
        var cnDecUnits = new Array('角', '分', '毫', '厘');
        // 整数金额时后面跟的字符
        /** @type {?} */
        var cnInteger = '整';
        // 整型完以后的单位
        /** @type {?} */
        var cnIntLast = '元';
        // 最大处理的数字
        /** @type {?} */
        var maxNum = 999999999999999.9999;
        // 金额整数部分
        /** @type {?} */
        var integerNum;
        // 金额小数部分
        /** @type {?} */
        var decimalNum;
        // 输出的中文金额字符串
        /** @type {?} */
        var chineseStr = '';
        // 分离金额后用的数组，预定义
        /** @type {?} */
        var parts;
        if (money == '') {
            return '';
        }
        money = parseFloat(money);
        if (money >= maxNum) {
            // 超出最大处理数字
            return '';
        }
        if (money === 0) {
            chineseStr = cnNums[0] + cnIntLast + cnInteger;
            return chineseStr;
        }
        // 转换为字符串
        money = money.toString();
        if (money.indexOf('.') === -1) {
            integerNum = money;
            decimalNum = '';
        }
        else {
            parts = money.split('.');
            integerNum = parts[0];
            decimalNum = parts[1].substr(0, 4);
        }
        // 获取整型部分转换
        if (parseInt(integerNum, 10) > 0) {
            /** @type {?} */
            var zeroCount = 0;
            /** @type {?} */
            var IntLen = integerNum.length;
            for (var i = 0; i < IntLen; i++) {
                /** @type {?} */
                var n = integerNum.substr(i, 1);
                /** @type {?} */
                var p = IntLen - i - 1;
                /** @type {?} */
                var q = p / 4;
                /** @type {?} */
                var m = p % 4;
                if (n == '0') {
                    zeroCount++;
                }
                else {
                    if (zeroCount > 0) {
                        chineseStr += cnNums[0];
                    }
                    // 归零
                    zeroCount = 0;
                    chineseStr += cnNums[parseInt(n, 10)] + cnIntRadice[m];
                }
                if (m == 0 && zeroCount < 4) {
                    chineseStr += cnIntUnits[q];
                }
            }
            chineseStr += cnIntLast;
        }
        // 小数部分
        if (decimalNum !== '') {
            /** @type {?} */
            var decLen = decimalNum.length;
            for (var i = 0; i < decLen; i++) {
                /** @type {?} */
                var n = decimalNum.substr(i, 1);
                if (n !== '0') {
                    chineseStr += cnNums[Number(n)] + cnDecUnits[i];
                }
            }
        }
        if (chineseStr === '') {
            chineseStr += cnNums[0] + cnIntLast + cnInteger;
        }
        else if (decimalNum === '') {
            chineseStr += cnInteger;
        }
        return chineseStr;
    };
    /**
     * @private
     * @param {?} val
     * @param {?} opts
     * @return {?}
     */
    NumberHelperService.prototype._unformat = /**
     * @private
     * @param {?} val
     * @param {?} opts
     * @return {?}
     */
    function (val, opts) {
        val = (val === null || val === undefined || isNaN(val)) ? '' : String(val);
        if (opts) {
            // 去前缀
            if (opts.prefix) {
                val = val.replace(new RegExp(opts.prefix, 'g'), '');
            }
            // 去后缀
            if (opts.suffix) {
                val = val.replace(new RegExp(opts.suffix, 'g'), '');
            }
            // 去掉千分位分隔符
            val = val.replace(/\,/g, '');
        }
        return val;
    };
    /**
     * @private
     * @param {?} value
     * @param {?} opts
     * @return {?}
     */
    NumberHelperService.prototype.formatValue = /**
     * @private
     * @param {?} value
     * @param {?} opts
     * @return {?}
     */
    function (value, opts) {
        /** @type {?} */
        var bignum = new BigNumber(value);
        /** @type {?} */
        var fmt = {
            prefix: opts.prefix || '',
            suffix: opts.suffix || '',
            decimalSeparator: opts.decimal || '.',
            groupSeparator: opts.thousand || '',
            groupSize: 3
        };
        if (bignum.isNaN()) {
            return '';
        }
        /** @type {?} */
        var precision = opts.precision || 0;
        precision = Number(precision);
        return bignum.toFormat(precision, fmt);
    };
    NumberHelperService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    NumberHelperService.ctorParameters = function () { return []; };
    /** @nocollapse */ NumberHelperService.ngInjectableDef = i0.defineInjectable({ factory: function NumberHelperService_Factory() { return new NumberHelperService(); }, token: NumberHelperService, providedIn: "root" });
    return NumberHelperService;
}());
export { NumberHelperService };
//# sourceMappingURL=data:application/json;base64,