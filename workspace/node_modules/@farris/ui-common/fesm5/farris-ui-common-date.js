import { addDays, differenceInMinutes, format, isValid, parseISO, subDays } from 'date-fns';
import { CommonModule } from '@angular/common';
import { Injectable, Pipe, NgModule, defineInjectable } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MyDateConverter = /** @class */ (function () {
    function MyDateConverter() {
        var _this = this;
        this.MONTHNAMES = 'January February March April May June July August September October November December'.split(' ');
        this.MONTHNAMES_LOOKUP = { 'jan': 1, 'feb': 2, 'mar': 3, 'apr': 4, 'may': 5, 'jun': 6, 'jul': 7, 'aug': 8, 'sep': 9, 'oct': 10, 'nov': 11, 'dec': 12 };
        /**
         * \@var {Array}  Abbreviated names for the months of the year
         */
        this.ABBR_MONTHNAMES = 'Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec'.split(' ');
        /**
         * \@var {Array}  Names for the days of the week from Sunday to Saturday
         */
        this.DAYNAMES = 'Sunday Monday Tuesday Wednesday Thursday Friday Saturday'.split(' ');
        this.DAYNAMES_LOOKUP = { 'sun': 0, 'mon': 1, 'tue': 2, 'wed': 3, 'thu': 4, 'fri': 5, 'sat': 6 };
        /**
         * \@var {Array}  Abbreviated names for the days of the week from Sunday to Saturday
         */
        this.ABBR_DAYNAMES = 'Sun Mon Tue Wed Thu Fri Sat'.split(' ');
        this.regexes = {
            YEAR: '[1-9]\\d{3}',
            MONTH: '1[0-2]|0?[1-9]',
            MONTH2: '1[0-2]|0[1-9]',
            MONTHNAME: 'jan|january|feb|february|mar|march|apr|april|may|jun|june|jul|july|aug|august|sep|september|oct|october|nov|november|dec|december',
            DAYNAME: 'mon|monday|tue|tuesday|wed|wednesday|thu|thursday|fri|friday|sat|saturday|sun|sunday',
            DAY: '3[01]|[12]\\d|0?[1-9]',
            DAY2: '3[01]|[12]\\d|0[1-9]',
            TIMEZONE: '[+-][01]\\d\\:?[0-5]\\d',
            H24: '[01]\\d|2[0-3]',
            MIN: '[0-5]\\d',
            SEC: '[0-5]\\d',
            MS: '\\d{3,}',
            H12: '0?[1-9]|1[012]',
            AMPM: 'am|pm',
            UNIT: 'year|month|week|day|hour|minute|second|millisecond'
        };
        this.patterns = [
            // 2010-03-15
            [
                'iso_8601',
                this.makePattern('^(_YEAR_)-(_MONTH_)-(_DAY_)$'),
                '$2/$3/$1'
            ],
            // 3-15-2010
            [
                'us',
                this.makePattern('^(_MONTH_)([\\/-])(_DAY_)\\2(_YEAR_)$'),
                '$1/$3/$4'
            ],
            // 15.03.2010
            [
                'world',
                this.makePattern('^(_DAY_)([\\/\\.])(_MONTH_)\\2(_YEAR_)$'),
                '$3/$1/$4'
            ],
            // 15-Mar-2010, 8 Dec 2011, "Thu, 8 Dec 2011"
            [
                'chicago',
                this.makePattern('^(?:(?:_DAYNAME_),? )?(_DAY_)([ -])(_MONTHNAME_)\\2(_YEAR_)$'),
                '$3 $1, $4'
            ],
            // "March 4, 2012", "Mar 4 2012", "Sun Mar 4 2012"
            [
                'conversational',
                this.makePattern('^(?:(?:_DAYNAME_),? )?(_MONTHNAME_) (_DAY_),? (_YEAR_)$'),
                '$1 $2, $3'
            ],
            // Tue Jun 22 17:47:27 +0000 2010
            [
                'month_day_time_year',
                this.makePattern('^(?:_DAYNAME_) (_MONTHNAME_) (_DAY_) ((?:_H24_)\\:(?:_MIN_)(?:\\:_SEC_)?) (_TIMEZONE_) (_YEAR_)$'),
                (/**
                 * @param {?} m
                 * @return {?}
                 */
                function (m) {
                    /** @type {?} */
                    var month = _this.zeroPad(_this.getMonthByName(m[1]), 2);
                    /** @type {?} */
                    var day = _this.zeroPad(m[2], 2);
                    /** @type {?} */
                    var date = _this.create(m[5] + '-' + month + '-' + day + 'T' + m[3] + m[4]);
                    if (isNaN(date)) {
                        return false;
                    }
                    return date;
                })
            ],
            // @123456789
            [
                'unix',
                /^@(-?\d+)$/,
                (/**
                 * @param {?} match
                 * @return {?}
                 */
                function (match) {
                    return _this.create(parseInt(match[1], 10) * 1000);
                })
            ],
            // 24-hour time (This will help catch Date objects that are casted to a string)
            [
                '24_hour',
                this.makePattern('^(?:(.+?)(?: |T))?(_H24_)\\:(_MIN_)(?:\\:(_SEC_)(?:\\.(_MS_))?)? ?(?:GMT)?(_TIMEZONE_)?(?: \\([A-Z]+\\))?$'),
                (/**
                 * @param {?} match
                 * @return {?}
                 */
                function (match) {
                    /** @type {?} */
                    var d;
                    if (match[1]) {
                        d = _this.create(match[1]);
                        if (isNaN(d)) {
                            return false;
                        }
                    }
                    else {
                        d = new Date();
                        d.setMilliseconds(0);
                    }
                    d.setHours(parseFloat(match[2]), parseFloat(match[3]), parseFloat(match[4] || 0));
                    if (match[5]) {
                        d.setMilliseconds(+String(match[5]).slice(0, 3));
                    }
                    if (match[6]) {
                        d.setUTCOffsetString(match[6]);
                    }
                    return d;
                })
            ],
            // 12-hour time
            [
                '12_hour',
                this.makePattern('^(?:(.+) )?(_H12_)(?:\\:(_MIN_)(?:\\:(_SEC_))?)? ?(_AMPM_)$'),
                (/**
                 * @param {?} match
                 * @return {?}
                 */
                function (match) {
                    /** @type {?} */
                    var d;
                    if (match[1]) {
                        d = _this.create(match[1]);
                        if (isNaN(d)) {
                            return false;
                        }
                    }
                    else {
                        d = new Date();
                        d.setMilliseconds(0);
                    }
                    /** @type {?} */
                    var hour = parseFloat(match[2]);
                    hour = match[5].toLowerCase() == 'am' ? (hour == 12 ? 0 : hour) : (hour == 12 ? 12 : hour + 12);
                    d.setHours(hour, parseFloat(match[3] || 0), parseFloat(match[4] || 0));
                    return d;
                })
            ]
        ];
    }
    /**
     * @param {?} code
     * @return {?}
     */
    MyDateConverter.prototype.makePattern = /**
     * @param {?} code
     * @return {?}
     */
    function (code) {
        var _this = this;
        code = code.replace(/_([A-Z][A-Z0-9]+)_/g, (/**
         * @param {?} $0
         * @param {?} $1
         * @return {?}
         */
        function ($0, $1) {
            return _this.regexes[$1];
        }));
        return new RegExp(code, 'i');
    };
    /**
     * @param {?} monthname
     * @return {?}
     */
    MyDateConverter.prototype.getMonthByName = /**
     * @param {?} monthname
     * @return {?}
     */
    function (monthname) {
        return this.MONTHNAMES_LOOKUP[String(monthname).slice(0, 3).toLowerCase()];
    };
    /**
     * @param {?} dayname
     * @return {?}
     */
    MyDateConverter.prototype.getWeekdayByName = /**
     * @param {?} dayname
     * @return {?}
     */
    function (dayname) {
        return this.DAYNAMES_LOOKUP[String(dayname).slice(0, 3).toLowerCase()];
    };
    /**
     * @private
     * @param {?} num
     * @param {?} digits
     * @return {?}
     */
    MyDateConverter.prototype.zeroPad = /**
     * @private
     * @param {?} num
     * @param {?} digits
     * @return {?}
     */
    function (num, digits) {
        switch (digits - String(num).length) {
            case 2: return '00' + num;
            case 1: return '0' + num;
        }
        return num;
    };
    /**
     * @param {?} date
     * @return {?}
     */
    MyDateConverter.prototype.create = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        // 0 arguments or date is undefined
        if (typeof date == 'undefined') {
            return Date.now();
        }
        // If the passed value is already a date object, return it
        if (date instanceof Date) {
            return date;
        }
        /** @type {?} */
        var a = arguments;
        switch (a.length) {
            case 1:
                // If the passed value is an integer, interpret it as ms past epoch
                if (Object.prototype.toString.call(date) == '[object Number]') {
                    return new Date(date);
                }
                // trim the date
                date = String(date).replace(/^\s*(.*)\s*$/, '$1');
                // normalize whitespace
                date = date.replace(/\s{2,}/g, ' ');
                if (date === '') {
                    return Date.now();
                }
                /** @type {?} */
                var i = 0;
                /** @type {?} */
                var pattern;
                /** @type {?} */
                var ms;
                /** @type {?} */
                var obj;
                /** @type {?} */
                var match;
                /** @type {?} */
                var regex;
                /** @type {?} */
                var fn;
                // try each of our patterns
                while ((pattern = this.patterns[i++])) {
                    if (typeof pattern[0] == 'string') {
                        // pattern[0] is the name of the pattern
                        regex = pattern[1];
                        fn = pattern[2];
                    }
                    else {
                        // backwards compatibility with version 3.1
                        regex = pattern[0];
                        fn = pattern[1];
                    }
                    if (!(match = date.match(regex))) {
                        continue;
                    }
                    if (typeof fn == 'function') {
                        obj = fn(match, date);
                        if (obj instanceof Date) {
                            return obj;
                        }
                    }
                    else {
                        // fn is not a function but a string replace command
                        ms = Date.parse(date.replace(regex, fn));
                        if (!isNaN(ms)) {
                            return new Date(ms);
                        }
                    }
                }
                return NaN;
            case 2: return new Date(a[0], a[1], 1);
            case 3: return new Date(a[0], a[1], a[2]);
            case 4: return new Date(a[0], a[1], a[2], a[3]);
            case 5: return new Date(a[0], a[1], a[2], a[3], a[4]);
            case 6: return new Date(a[0], a[1], a[2], a[3], a[4], a[5]);
            default: return new Date(a[0], a[1], a[2], a[3], a[4], a[5], a[6]);
        }
    };
    return MyDateConverter;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var EN_US = ['second', 'minute', 'hour', 'day', 'week', 'month', 'year'];
/**
 * @param {?} diff
 * @param {?} idx
 * @return {?}
 */
function en (diff, idx) {
    if (idx === 0)
        return ['just now', 'right now'];
    /** @type {?} */
    var unit = EN_US[Math.floor(idx / 2)];
    if (diff > 1)
        unit += 's';
    return [diff + " " + unit + " ago", "in " + diff + " " + unit];
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var ZH_CN = ['秒', '分钟', '小时', '天', '周', '个月', '年'];
/**
 * @param {?} diff
 * @param {?} idx
 * @return {?}
 */
function zh_CHS (diff, idx) {
    if (idx === 0)
        return ['刚刚', '片刻后'];
    /** @type {?} */
    var unit = ZH_CN[~~(idx / 2)];
    return [diff + " " + unit + "\u524D", diff + " " + unit + "\u540E"];
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} number
 * @param {?} index
 * @return {?}
 */
function zh_CHT (number, index) {
    return (/** @type {?} */ ([
        ['剛剛', '片刻後'],
        ['%s 秒前', '%s 秒後'],
        ['1 分鐘前', '1 分鐘後'],
        ['%s 分鐘前', '%s 分鐘後'],
        ['1 小時前', '1 小時後'],
        ['%s 小時前', '%s 小時後'],
        ['1 天前', '1 天後'],
        ['%s 天前', '%s 天後'],
        ['1 週前', '1 週後'],
        ['%s 週前', '%s 週後'],
        ['1 個月前', '1 個月後'],
        ['%s 個月前', '%s 個月後'],
        ['1 年前', '1 年後'],
        ['%s 年前', '%s 年後'],
    ][index]));
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var SEC_ARRAY = [
    60,
    60,
    24,
    7,
    365 / 7 / 12,
    12,
];
/**
 * @param {?=} input
 * @return {?}
 */
function toDate(input) {
    if (input instanceof Date)
        return input;
    // @ts-ignore
    if (!isNaN(input) || /^\d+$/.test(input))
        return new Date(parseInt(input));
    input = (input || '')
        // @ts-ignore
        .trim()
        .replace(/\.\d+/, '') // remove milliseconds
        .replace(/-/, '/')
        .replace(/-/, '/')
        .replace(/(\d)T(\d)/, '$1 $2')
        .replace(/Z/, ' UTC') // 2017-2-5T3:57:52Z -> 2017-2-5 3:57:52UTC
        .replace(/([+-]\d\d):?(\d\d)/, ' $1$2'); // -04:00 -> -0400
    return new Date(input);
}
/**
 * format the diff second to *** time ago, with setting locale
 * @param {?} diff
 * @param {?} localeFunc
 * @return {?}
 */
function formatDiff(diff, localeFunc) {
    /**
     * if locale is not exist, use defaultLocale.
     * if defaultLocale is not exist, use build-in `en`.
     * be sure of no error when locale is not exist.
     *
     * If `time in`, then 1
     * If `time ago`, then 0
     * @type {?}
     */
    var agoIn = diff < 0 ? 1 : 0;
    /**
     * Get absolute value of number (|diff| is non-negative) value of x
     * |diff| = diff if diff is positive
     * |diff| = -diff if diff is negative
     * |0| = 0
     */
    diff = Math.abs(diff);
    /**
     * Time in seconds
     * @type {?}
     */
    var totalSec = diff;
    /**
     * Unit of time
     * @type {?}
     */
    var idx = 0;
    for (; diff >= SEC_ARRAY[idx] && idx < SEC_ARRAY.length; idx++) {
        diff /= SEC_ARRAY[idx];
    }
    /**
     * Math.floor() is alternative of ~~
     *
     * The differences and bugs:
     * Math.floor(3.7) -> 4 but ~~3.7 -> 3
     * Math.floor(1559125440000.6) -> 1559125440000 but ~~1559125440000.6 -> 52311552
     *
     * More information about the performance of algebraic:
     * https://www.youtube.com/watch?v=65-RbBwZQdU
     */
    diff = Math.floor(diff);
    idx *= 2;
    if (diff > (idx === 0 ? 9 : 1))
        idx += 1;
    return localeFunc(diff, idx, totalSec)[agoIn].replace('%s', diff.toString());
}
/**
 * calculate the diff second between date to be formatted an now date.
 * @param {?} date
 * @param {?} relativeDate
 * @return {?}
 */
function diffSec(date, relativeDate) {
    /** @type {?} */
    var relDate = relativeDate ? toDate(relativeDate) : new Date();
    return (+relDate - +toDate(date)) / 1000;
}
/** @type {?} */
var format$1 = (/**
 * @param {?} date
 * @param {?=} locale
 * @param {?=} opts
 * @return {?}
 */
function (date, locale, opts) {
    // diff seconds
    /** @type {?} */
    var sec = diffSec(date, opts && opts.relativeDate);
    // format it with locale
    return formatDiff(sec, getLocale(locale));
});
/**
 * All supported locales
 * @type {?}
 */
var Locales = {};
/**
 * register a locale
 * \@param locale
 * \@param func
 * @type {?}
 */
var register = (/**
 * @param {?} locale
 * @param {?} func
 * @return {?}
 */
function (locale, func) {
    Locales[locale] = func;
});
/**
 * get a locale, default is en_US
 * \@param locale
 * @type {?}
 */
var getLocale = (/**
 * @param {?} locale
 * @return {?}
 */
function (locale) {
    return Locales[locale] || Locales['zh-CHS'];
});
register('en', en);
register('zh-CHS', zh_CHS);
register('zh-CHT', zh_CHT);

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DateTimeHelperService = /** @class */ (function () {
    function DateTimeHelperService() {
        this.$D = null;
        this.$D = new MyDateConverter();
    }
    /**
     * @param {?} date
     * @param {?=} locale
     * @return {?}
     */
    DateTimeHelperService.prototype.relativeTime = /**
     * @param {?} date
     * @param {?=} locale
     * @return {?}
     */
    function (date, locale) {
        if (locale === void 0) { locale = 'zh-CHS'; }
        if (date) {
            return format$1(date, locale);
        }
        return '';
    };
    /**
     * @param {?} date
     * @param {?} days
     * @return {?}
     */
    DateTimeHelperService.prototype.addDays = /**
     * @param {?} date
     * @param {?} days
     * @return {?}
     */
    function (date, days) {
        return addDays(date, days);
    };
    /**
     * @param {?} date
     * @param {?} days
     * @return {?}
     */
    DateTimeHelperService.prototype.subDays = /**
     * @param {?} date
     * @param {?} days
     * @return {?}
     */
    function (date, days) {
        return subDays(date, days);
    };
    /**
     * @param {?} dateLeft
     * @param {?} dateRight
     * @return {?}
     */
    DateTimeHelperService.prototype.differenceInMinutes = /**
     * @param {?} dateLeft
     * @param {?} dateRight
     * @return {?}
     */
    function (dateLeft, dateRight) {
        return differenceInMinutes(dateLeft, dateRight);
    };
    /**
     * @param value 要转换格式的日期
     * @param fmt 格式化字符串
     *
     * 更多的格式化请参考
     * [点我点我](https://date-fns.org/v1.30.1/docs/format)
     */
    /**
     * @param {?} value 要转换格式的日期
     * @param {?=} fmt 格式化字符串
     *
     * 更多的格式化请参考
     * [点我点我](https://date-fns.org/v1.30.1/docs/format)
     * @return {?}
     */
    DateTimeHelperService.prototype.formatTo = /**
     * @param {?} value 要转换格式的日期
     * @param {?=} fmt 格式化字符串
     *
     * 更多的格式化请参考
     * [点我点我](https://date-fns.org/v1.30.1/docs/format)
     * @return {?}
     */
    function (value, fmt) {
        if (fmt === void 0) { fmt = "yyyy-MM-dd"; }
        if (!value) {
            return "";
        }
        if (typeof value === "string" && value.indexOf("0001") === 0) {
            return "";
        }
        if (value instanceof Date) {
            return format(value, fmt);
        }
        /** @type {?} */
        var _d = parseISO(value);
        if (_d == "Invalid Date") {
            _d = this.createDate(value) || new Date(value);
        }
        // const d = parseISO(value);
        if (isValid(_d)) {
            /** @type {?} */
            var d = parseISO(format(_d, "yyyy-MM-dd HH:mm:ss"));
            return format(d, fmt);
        }
        else {
            // console.error(`${value} 转换为Date时失败。`);
            if (fmt.indexOf("HH") === 0 || fmt.indexOf("hh") === 0) {
                // 仅有时间部分
                // 提取时间
                /** @type {?} */
                var _time = value
                    .match(/\d*/g)
                    .filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n !== ""; }))
                    .join(":");
                if (fmt === "HH" || fmt === "hh") {
                    fmt = fmt += ":mm";
                }
                // const fullDateTime = new Date('2022-11-25 ' + _time);
                /** @type {?} */
                var fullDateTime = parseISO("2022-11-25 " + _time);
                return format(fullDateTime, fmt);
            }
            return "";
        }
    };
    /**
     * @private
     * @param {?} val
     * @return {?}
     */
    DateTimeHelperService.prototype.createDate = /**
     * @private
     * @param {?} val
     * @return {?}
     */
    function (val) {
        return this.$D.create(val);
    };
    // 根据参数日期获取具体日期信息
    // 根据参数日期获取具体日期信息
    /**
     * @private
     * @param {?=} date
     * @param {?=} firstDayOfWeek
     * @return {?}
     */
    DateTimeHelperService.prototype.formatDate = 
    // 根据参数日期获取具体日期信息
    /**
     * @private
     * @param {?=} date
     * @param {?=} firstDayOfWeek
     * @return {?}
     */
    function (date, firstDayOfWeek) {
        if (date === void 0) { date = new Date(); }
        if (firstDayOfWeek === void 0) { firstDayOfWeek = '一'; }
        /** @type {?} */
        var year = date.getFullYear();
        /** @type {?} */
        var month = date.getMonth() + 1;
        /** @type {?} */
        var day = date.getDate();
        /** @type {?} */
        var weekDay = date.getDay();
        if (firstDayOfWeek === '一') {
            if (!weekDay) {
                weekDay = 6;
            }
            else {
                weekDay = weekDay - 1;
            }
        }
        /** @type {?} */
        var week = ["一", "二", "三", "四", "五", "六", "日"][weekDay];
        /** @type {?} */
        var dateInfo = {
            date: new Date(date),
            dateStr: year + "-" + month.toString().padStart(2, "0") + "-" + day
                .toString()
                .padStart(2, "0"),
            year: year,
            month: month,
            day: day,
            week: week,
            isToday: false,
        };
        /** @type {?} */
        var today = new Date();
        // 判断是否为当天
        if (today.getFullYear() === year &&
            today.getMonth() + 1 === month &&
            today.getDate() === day) {
            dateInfo["isToday"] = true;
        }
        return dateInfo;
    };
    // 根据基准日期，获取长度为dayLenth的日期数组
    // 根据基准日期，获取长度为dayLenth的日期数组
    /**
     * @private
     * @param {?=} date
     * @param {?=} step
     * @param {?=} firstDayOfWeek
     * @return {?}
     */
    DateTimeHelperService.prototype.setDate = 
    // 根据基准日期，获取长度为dayLenth的日期数组
    /**
     * @private
     * @param {?=} date
     * @param {?=} step
     * @param {?=} firstDayOfWeek
     * @return {?}
     */
    function (date, step, firstDayOfWeek) {
        if (date === void 0) { date = new Date(); }
        if (step === void 0) { step = 7; }
        if (firstDayOfWeek === void 0) { firstDayOfWeek = '一'; }
        /** @type {?} */
        var weekData = [];
        /** @type {?} */
        var week = date.getDay() - 1;
        /** @type {?} */
        var _rangeDays = week * -1;
        if (firstDayOfWeek === '日') {
            _rangeDays = _rangeDays - 1;
        }
        date = this.getDateByDate(date, _rangeDays); // 以周日为第1天时 -1
        for (var i = 0; i < step; i++) {
            weekData.push(this.formatDate(i == 0 ? date : this.getDateByDate(date, 1), firstDayOfWeek));
        }
        return weekData;
    };
    // 根据基准日期获取前后某天的日期对象
    // 根据基准日期获取前后某天的日期对象
    /**
     * @private
     * @param {?=} date
     * @param {?=} range
     * @return {?}
     */
    DateTimeHelperService.prototype.getDateByDate = 
    // 根据基准日期获取前后某天的日期对象
    /**
     * @private
     * @param {?=} date
     * @param {?=} range
     * @return {?}
     */
    function (date, range) {
        if (date === void 0) { date = new Date(); }
        if (range === void 0) { range = 0; }
        date.setDate(date.getDate() + range);
        return date;
    };
    /*
    获取以baselineDate所在周的一周、前一周、下一周的日期和星期信息(切换周期也可通过参数dayLenth自行设置)
    baselineDate: 设置的基准日期(返回的日期列表的第一个日期)
    range: 以 baselineDate 为基准日期的前后天数范围(如基准日期的range为0，需要返回前7天日期，则range为-7，后7天则range为7)
    step: 需要获取的日期信息周期天数，默认获取baselineDate所在周的一周日期信息
    firstDayOfWeek: 每周第一天 是 周一，还是周日，默认为 周一
   */
    /*
        获取以baselineDate所在周的一周、前一周、下一周的日期和星期信息(切换周期也可通过参数dayLenth自行设置)
        baselineDate: 设置的基准日期(返回的日期列表的第一个日期)
        range: 以 baselineDate 为基准日期的前后天数范围(如基准日期的range为0，需要返回前7天日期，则range为-7，后7天则range为7)
        step: 需要获取的日期信息周期天数，默认获取baselineDate所在周的一周日期信息
        firstDayOfWeek: 每周第一天 是 周一，还是周日，默认为 周一
       */
    /**
     * @param {?} __0
     * @param {?=} firstDayOfWeek
     * @return {?}
     */
    DateTimeHelperService.prototype.getWeekDate = /*
        获取以baselineDate所在周的一周、前一周、下一周的日期和星期信息(切换周期也可通过参数dayLenth自行设置)
        baselineDate: 设置的基准日期(返回的日期列表的第一个日期)
        range: 以 baselineDate 为基准日期的前后天数范围(如基准日期的range为0，需要返回前7天日期，则range为-7，后7天则range为7)
        step: 需要获取的日期信息周期天数，默认获取baselineDate所在周的一周日期信息
        firstDayOfWeek: 每周第一天 是 周一，还是周日，默认为 周一
       */
    /**
     * @param {?} __0
     * @param {?=} firstDayOfWeek
     * @return {?}
     */
    function (_a, firstDayOfWeek) {
        var _b = _a.baselineDate, baselineDate = _b === void 0 ? new Date() : _b, _c = _a.range, range = _c === void 0 ? 0 : _c, _e = _a.step, step = _e === void 0 ? 7 : _e;
        if (firstDayOfWeek === void 0) { firstDayOfWeek = '一'; }
        return this.setDate(this.getDateByDate(baselineDate, range), step, firstDayOfWeek);
    };
    /** 根据当前日期，获取当前是所在年的第几周 */
    /**
     * 根据当前日期，获取当前是所在年的第几周
     * @param {?} year
     * @param {?} month
     * @param {?} day
     * @return {?}
     */
    DateTimeHelperService.prototype.getYearWeek = /**
     * 根据当前日期，获取当前是所在年的第几周
     * @param {?} year
     * @param {?} month
     * @param {?} day
     * @return {?}
     */
    function (year, month, day) {
        //a为年 b为月 c为日
        /*
                date1是当前日期
                date2是当年第一天
                d是当前日期是今年第多少天
                用d + 当前年的第一天的周差距的和在除以7就是本年第几周
                */
        /** @type {?} */
        var date1 = new Date(year, parseInt(month) - 1, day);
        /** @type {?} */
        var date2 = new Date(year, 0, 1);
        /** @type {?} */
        var d = Math.round((date1.valueOf() - date2.valueOf()) / 86400000);
        return Math.ceil((d + ((date2.getDay() + 1) - 1)) / 7);
    };
    /**
     * @param {?} year
     * @param {?} month
     * @param {?} day
     * @return {?}
     */
    DateTimeHelperService.prototype.getMonthWeek = /**
     * @param {?} year
     * @param {?} month
     * @param {?} day
     * @return {?}
     */
    function (year, month, day) {
        /**
         * a = d = 当前日期
         * b = 6 - w = 当前周的还有几天过完(不算今天)
         * a + b 的和在除以7 就是当天是当前月份的第几周
         * @type {?}
         */
        var date = new Date(year, parseInt(month) - 1, day);
        /** @type {?} */
        var w = date.getDay();
        /** @type {?} */
        var d = date.getDate();
        if (w == 0) {
            w = 7;
        }
        /** @type {?} */
        var config = {
            getMonth: date.getMonth() + 1,
            getYear: date.getFullYear(),
            getWeek: Math.ceil((d + 6 - w) / 7),
        };
        return config;
    };
    /**
     * @param {?} date
     * @param {?} firstDayOfWeek
     * @return {?}
     */
    DateTimeHelperService.prototype.getNowWeekTime = /**
     * @param {?} date
     * @param {?} firstDayOfWeek
     * @return {?}
     */
    function (date, firstDayOfWeek) {
        date.setDate(date.getDate() - ((date.getDay() + 6) % 7));
        /** @type {?} */
        var begin = {
            year: date.getFullYear(),
            month: date.getMonth() + 1,
            day: date.getDate()
        };
        date.setDate(date.getDate() + 6);
        /** @type {?} */
        var end = {
            year: date.getFullYear(),
            month: date.getMonth() + 1,
            day: date.getDate()
        };
        if (firstDayOfWeek === '一') {
            return { begin: begin, end: end };
        }
        else {
            if (date.getDay() != 0) {
                date.setDate(date.getDate() - date.getDay());
            }
            /** @type {?} */
            var _begin = {
                year: date.getFullYear(),
                month: date.getMonth() + 1,
                day: date.getDate()
            };
            date.setDate(date.getDate() + 6 - date.getDay());
            /** @type {?} */
            var _end = {
                year: date.getFullYear(),
                month: date.getMonth() + 1,
                day: date.getDate()
            };
            return {
                begin: _begin,
                end: _end
            };
        }
    };
    DateTimeHelperService.decorators = [
        { type: Injectable, args: [{
                    providedIn: "root",
                },] }
    ];
    /** @nocollapse */
    DateTimeHelperService.ctorParameters = function () { return []; };
    /** @nocollapse */ DateTimeHelperService.ngInjectableDef = defineInjectable({ factory: function DateTimeHelperService_Factory() { return new DateTimeHelperService(); }, token: DateTimeHelperService, providedIn: "root" });
    return DateTimeHelperService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DateTimeFormatPipe = /** @class */ (function () {
    function DateTimeFormatPipe(dateSer) {
        this.dateSer = dateSer;
    }
    /**
     * @param {?} value
     * @param {...?} args
     * @return {?}
     */
    DateTimeFormatPipe.prototype.transform = /**
     * @param {?} value
     * @param {...?} args
     * @return {?}
     */
    function (value) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (value) {
            /** @type {?} */
            var fmt = 'yyyy-MM-dd';
            if (args && args.length) {
                fmt = args[0];
            }
            if (fmt === 'timeago') {
                /** @type {?} */
                var locale = args[1] || 'zh-CHS';
                return this.dateSer.relativeTime(value, locale);
            }
            return this.dateSer.formatTo(value, fmt);
        }
    };
    DateTimeFormatPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'dateformat'
                },] }
    ];
    /** @nocollapse */
    DateTimeFormatPipe.ctorParameters = function () { return [
        { type: DateTimeHelperService }
    ]; };
    return DateTimeFormatPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DateHelperModule = /** @class */ (function () {
    function DateHelperModule() {
    }
    /**
     * @return {?}
     */
    DateHelperModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: DateHelperModule,
            providers: [
                DateTimeHelperService
            ]
        };
    };
    DateHelperModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        DateTimeFormatPipe
                    ],
                    imports: [CommonModule],
                    exports: [
                        DateTimeFormatPipe
                    ],
                    providers: [],
                },] }
    ];
    return DateHelperModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { DateHelperModule, DateTimeHelperService, DateTimeFormatPipe };

//# sourceMappingURL=farris-ui-common-date.js.map