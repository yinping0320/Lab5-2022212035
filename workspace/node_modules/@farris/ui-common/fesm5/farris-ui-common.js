import ResizeObserver from 'resize-observer-polyfill';
import { ColumnFormatService } from '@farris/ui-common/column';
import { DomSanitizer } from '@angular/platform-browser';
import { cloneDeep, merge } from 'lodash-es';
import { __values, __spread, __assign } from 'tslib';
import { BehaviorSubject, fromEvent, Subject } from 'rxjs';
import { map, takeUntil } from 'rxjs/operators';
import { Directive, Input, TemplateRef, Output, ElementRef, EventEmitter, ComponentFactoryResolver, Injector, Injectable, Pipe, NgModule, InjectionToken, defineInjectable, inject } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FarrisTemplateDirective = /** @class */ (function () {
    function FarrisTemplateDirective(template) {
        this.template = template;
    }
    /**
     * @return {?}
     */
    FarrisTemplateDirective.prototype.getType = /**
     * @return {?}
     */
    function () {
        return this.name;
    };
    FarrisTemplateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farrisTemplate]'
                },] }
    ];
    /** @nocollapse */
    FarrisTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    FarrisTemplateDirective.propDecorators = {
        type: [{ type: Input }],
        name: [{ type: Input, args: ['farrisTemplate',] }]
    };
    return FarrisTemplateDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var entriesMap = new WeakMap();
var ɵ0 = /**
 * @param {?} entries
 * @return {?}
 */
function (entries) {
    var e_1, _a;
    try {
        for (var entries_1 = __values(entries), entries_1_1 = entries_1.next(); !entries_1_1.done; entries_1_1 = entries_1.next()) {
            var entry = entries_1_1.value;
            if (entriesMap.has(entry.target)) {
                /** @type {?} */
                var comp = entriesMap.get(entry.target);
                comp._resizeCallback(entry);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (entries_1_1 && !entries_1_1.done && (_a = entries_1.return)) _a.call(entries_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
};
/** @type {?} */
var ro = new ResizeObserver((ɵ0));
var ResizeObserverDirective = /** @class */ (function () {
    function ResizeObserverDirective(el) {
        this.el = el;
        this.resize = new EventEmitter();
    }
    /**
     * @param {?} entry
     * @return {?}
     */
    ResizeObserverDirective.prototype._resizeCallback = /**
     * @param {?} entry
     * @return {?}
     */
    function (entry) {
        entry['bindintClientRect'] = entry.target.getBoundingClientRect();
        this.resize.emit(entry);
    };
    /**
     * @return {?}
     */
    ResizeObserverDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var target = this.target ? this.target.nativeElement : this.el.nativeElement;
        entriesMap.set(target, this);
        ro.observe(target);
    };
    /**
     * @return {?}
     */
    ResizeObserverDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var target = this.el.nativeElement;
        ro.unobserve(target);
        entriesMap.delete(target);
    };
    ResizeObserverDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[resizeObserver]'
                },] }
    ];
    /** @nocollapse */
    ResizeObserverDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    ResizeObserverDirective.propDecorators = {
        target: [{ type: Input, args: ['resizeObserver',] }],
        resize: [{ type: Output }]
    };
    return ResizeObserverDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FarrisComponentTemplateDirective = /** @class */ (function () {
    function FarrisComponentTemplateDirective(injector, el, cfr) {
        this.injector = injector;
        this.el = el;
        this.cfr = cfr;
        this.cmpRef = null;
        this.templateType = 'cell';
    }
    /**
     * @return {?}
     */
    FarrisComponentTemplateDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.renderTemplate();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    FarrisComponentTemplateDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.ctx && !changes.ctx.isFirstChange()) {
            this._expandCtxToThis();
        }
    };
    /**
     * @private
     * @return {?}
     */
    FarrisComponentTemplateDirective.prototype._expandCtxToThis = /**
     * @private
     * @return {?}
     */
    function () {
        this.expandContext(this.ctx);
        this.expandContext(this.renderContext);
    };
    /**
     * @private
     * @param {?} ctx
     * @return {?}
     */
    FarrisComponentTemplateDirective.prototype.expandContext = /**
     * @private
     * @param {?} ctx
     * @return {?}
     */
    function (ctx) {
        var _this = this;
        if (this.templateComponentIns && ctx) {
            Object.keys(ctx).forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                _this.templateComponentIns.instance[n] = ctx[n];
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    FarrisComponentTemplateDirective.prototype.renderTemplate = /**
     * @private
     * @return {?}
     */
    function () {
        this.templateComponentIns = this._getCmpRef();
        if (this.templateComponentIns) {
            this._expandCtxToThis();
            this.templateComponentIns.instance.ctx = this.ctx;
            this.el.nativeElement.append(this.templateComponentIns.location.nativeElement);
            this.templateComponentIns.changeDetectorRef.detectChanges();
        }
    };
    /**
     * @private
     * @return {?}
     */
    FarrisComponentTemplateDirective.prototype._getCmpRef = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.cmpRef) {
            return this.createInstance(this.cmpRef);
        }
        if (this.column) {
            if (this.templateType == 'cell') {
                if (this.column.componentType) {
                    return this.createInstance(this.column.componentType);
                }
            }
            else {
                if (this.column.headerComponentType) {
                    return this.createInstance(this.column.headerComponentType);
                }
            }
        }
        return null;
    };
    /**
     * @private
     * @param {?} cmptype
     * @return {?}
     */
    FarrisComponentTemplateDirective.prototype.createInstance = /**
     * @private
     * @param {?} cmptype
     * @return {?}
     */
    function (cmptype) {
        if (!cmptype) {
            return null;
        }
        /** @type {?} */
        var templateComponentIns = null;
        if (!cmptype.ngBaseDef && typeof cmptype === 'function') {
            templateComponentIns = cmptype();
        }
        else {
            if (!cmptype['instance']) {
                /** @type {?} */
                var cellTemplateCmp = this.cfr.resolveComponentFactory((/** @type {?} */ (cmptype)));
                templateComponentIns = cellTemplateCmp.create(this.injector);
            }
            else {
                templateComponentIns = cmptype;
            }
        }
        return templateComponentIns;
    };
    FarrisComponentTemplateDirective.decorators = [
        { type: Directive, args: [{ selector: '[component-template]' },] }
    ];
    /** @nocollapse */
    FarrisComponentTemplateDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: ElementRef },
        { type: ComponentFactoryResolver }
    ]; };
    FarrisComponentTemplateDirective.propDecorators = {
        column: [{ type: Input, args: ['component-template',] }],
        cmpRef: [{ type: Input }],
        ctx: [{ type: Input }],
        renderContext: [{ type: Input }],
        templateType: [{ type: Input }]
    };
    return FarrisComponentTemplateDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CommonUtils = /** @class */ (function () {
    function CommonUtils() {
        this.cfs = null;
        if (!this.cfs) {
            this.cfs = new ColumnFormatService(null, null);
        }
    }
    /**
     * @param {?} field
     * @param {?} data
     * @return {?}
     */
    CommonUtils.prototype.keyIsInData = /**
     * @param {?} field
     * @param {?} data
     * @return {?}
     */
    function (field, data) {
        /** @type {?} */
        var noProperty = 'no property';
        /** @type {?} */
        var val = field.split('.').reduce((/**
         * @param {?} obj
         * @param {?} key
         * @return {?}
         */
        function (obj, key) {
            if (obj && obj.hasOwnProperty(key)) {
                return obj[key];
            }
            else {
                return noProperty;
            }
        }), data);
        return val != noProperty;
    };
    /**
     * 获取对象中指定字段的值。 field: 可以为带有层级结构的路径，如： user.firstName | name 等
     * data: 获取字段的数据源，一般为JSON对象
     * safe: 为true, 将html字符进行转码输出，默认为 false
     */
    /**
     * 获取对象中指定字段的值。 field: 可以为带有层级结构的路径，如： user.firstName | name 等
     * data: 获取字段的数据源，一般为JSON对象
     * safe: 为true, 将html字符进行转码输出，默认为 false
     * @param {?} field
     * @param {?} data
     * @param {?=} safe
     * @return {?}
     */
    CommonUtils.prototype.getValue = /**
     * 获取对象中指定字段的值。 field: 可以为带有层级结构的路径，如： user.firstName | name 等
     * data: 获取字段的数据源，一般为JSON对象
     * safe: 为true, 将html字符进行转码输出，默认为 false
     * @param {?} field
     * @param {?} data
     * @param {?=} safe
     * @return {?}
     */
    function (field, data, safe) {
        if (safe === void 0) { safe = false; }
        if (!data) {
            return '';
        }
        /** @type {?} */
        var resultVal = '';
        if (field.indexOf('.') === -1 && data.hasOwnProperty(field)) {
            resultVal = data[field];
        }
        else {
            resultVal = field.split('.').reduce((/**
             * @param {?} obj
             * @param {?} key
             * @return {?}
             */
            function (obj, key) {
                if (obj) {
                    return obj[key];
                }
                else {
                    return null;
                }
            }), data);
        }
        if (safe) {
            return this.formatterValue(resultVal);
        }
        else {
            return resultVal;
        }
    };
    /**
     * 更新指定对象中某个字段的值
     * @param obj 被更新对象
     * @param field 被更新字段
     * @param val 新值
     * @param nest 是否为嵌套，默认为 true
     */
    /**
     * 更新指定对象中某个字段的值
     * @param {?} obj 被更新对象
     * @param {?} field 被更新字段
     * @param {?} val 新值
     * @param {?=} nest 是否为嵌套，默认为 true
     * @return {?}
     */
    CommonUtils.prototype.setValue = /**
     * 更新指定对象中某个字段的值
     * @param {?} obj 被更新对象
     * @param {?} field 被更新字段
     * @param {?} val 新值
     * @param {?=} nest 是否为嵌套，默认为 true
     * @return {?}
     */
    function (obj, field, val, nest) {
        if (nest === void 0) { nest = true; }
        if (field) {
            if (field.indexOf('.') > -1 && nest) {
                /** @type {?} */
                var lastObj_1 = null;
                /** @type {?} */
                var _fields = field.split('.');
                _fields.reduce((/**
                 * @param {?} c
                 * @param {?} p
                 * @return {?}
                 */
                function (c, p) {
                    lastObj_1 = c;
                    return c[p];
                }), obj);
                if (lastObj_1) {
                    lastObj_1[_fields.pop()] = val;
                }
            }
            else {
                obj[field] = val;
            }
        }
    };
    /**
     * @param {?} value
     * @param {?} enumData
     * @param {?} valueField
     * @return {?}
     */
    CommonUtils.prototype.getEnumItem = /**
     * @param {?} value
     * @param {?} enumData
     * @param {?} valueField
     * @return {?}
     */
    function (value, enumData, valueField) {
        /** @type {?} */
        var item = enumData.find((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n[valueField] == value; }));
        return item;
    };
    /**
     * @private
     * @param {?} value
     * @param {?} col
     * @return {?}
     */
    CommonUtils.prototype._getEnumTitleFromColumn = /**
     * @private
     * @param {?} value
     * @param {?} col
     * @return {?}
     */
    function (value, col) {
        /** @type {?} */
        var _col = (/** @type {?} */ (col));
        /** @type {?} */
        var formatter = (/** @type {?} */ (_col.formatter));
        if (formatter && typeof formatter === 'object') {
            if (formatter.type === 'enum' && formatter.options) {
                return this.getEnumTitleFromColumnOptions(value, formatter.options);
            }
        }
        return value;
    };
    /**
     * @param {?} col
     * @param {?} data
     * @return {?}
     */
    CommonUtils.prototype.getEnumTitle = /**
     * @param {?} col
     * @param {?} data
     * @return {?}
     */
    function (col, data) {
        /** @type {?} */
        var val = this.getValue(col.field, data);
        return this._getEnumTitleFromColumn(val, col);
    };
    /**
     * @param {?} value
     * @param {?} opts
     * @return {?}
     */
    CommonUtils.prototype.getEnumTitleFromColumnOptions = /**
     * @param {?} value
     * @param {?} opts
     * @return {?}
     */
    function (value, opts) {
        var data = opts.data, valueField = opts.valueField, textField = opts.textField;
        /** @type {?} */
        var item = this.getEnumItem(value, data, valueField);
        if (item) {
            return item[textField];
        }
        else {
            return value;
        }
    };
    /**
     * @param {?} str
     * @return {?}
     */
    CommonUtils.prototype.escapeHtml = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        if (str === null || str === undefined) {
            return '';
        }
        return str
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/\"/g, '&quot;')
            .replace(/\'/g, '&#39;')
            .replace(/\//g, '&#x2F;');
    };
    /**
     * @param {?} str
     * @return {?}
     */
    CommonUtils.prototype.unescapeHtml = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        if (str === null || str === undefined) {
            return '';
        }
        return str
            .replace(/&amp;/g, '&')
            .replace(/&lt;/g, '<')
            .replace(/&gt;/g, '>')
            .replace(/&quot;/g, '"')
            .replace(/&#39;/g, '\'')
            .replace(/&#x2F;/g, '/');
    };
    /**
     * @private
     * @param {?} val
     * @return {?}
     */
    CommonUtils.prototype.formatterValue = /**
     * @private
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (val === null || val === undefined || val === '') {
            return '';
        }
        if (typeof val === 'string') {
            return this.escapeHtml(val);
        }
        return val;
    };
    /** 获取字符串在页面中的真实宽度 */
    /**
     * 获取字符串在页面中的真实宽度
     * @param {?} txt
     * @param {?} font
     * @return {?}
     */
    CommonUtils.prototype.getTextWidth = /**
     * 获取字符串在页面中的真实宽度
     * @param {?} txt
     * @param {?} font
     * @return {?}
     */
    function (txt, font) {
        // const frag = document.createDocumentFragment();
        /** @type {?} */
        var canvas = document.createElement('canvas');
        /** @type {?} */
        var context = canvas.getContext('2d');
        context.font = font;
        /** @type {?} */
        var metrics = context.measureText(txt);
        return Math.round(metrics.width);
    };
    /**
     * @param {?} id
     * @return {?}
     */
    CommonUtils.prototype.removeStyleSheet = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var styleElement = document.querySelector('#' + id);
        if (styleElement) {
            styleElement.remove();
        }
    };
    /**
     * @param {?} styleSheetId
     * @return {?}
     */
    CommonUtils.prototype.createStyleSheet = /**
     * @param {?} styleSheetId
     * @return {?}
     */
    function (styleSheetId) {
        /** @type {?} */
        var htmlHead = document.querySelector('head');
        /** @type {?} */
        var styleEleId = styleSheetId;
        /** @type {?} */
        var styleElement = null;
        if (document.querySelector('#' + styleEleId)) {
            styleElement = document.querySelector('#' + styleEleId);
            styleElement.innerText = '';
        }
        else {
            styleElement = document.createElement('style');
            styleElement.id = styleEleId;
            htmlHead.appendChild(styleElement);
        }
        return styleElement;
    };
    /**
     * @param {?} styleSheetId
     * @return {?}
     */
    CommonUtils.prototype.getStyleSheet = /**
     * @param {?} styleSheetId
     * @return {?}
     */
    function (styleSheetId) {
        var e_1, _a;
        /** @type {?} */
        var styleSheets = (/** @type {?} */ (document.styleSheets));
        /** @type {?} */
        var styleSheet = null;
        try {
            for (var styleSheets_1 = __values(styleSheets), styleSheets_1_1 = styleSheets_1.next(); !styleSheets_1_1.done; styleSheets_1_1 = styleSheets_1.next()) {
                var stylesheet = styleSheets_1_1.value;
                if ((stylesheet.ownerNode || stylesheet['owningElement']).id === styleSheetId) {
                    styleSheet = stylesheet;
                    break;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (styleSheets_1_1 && !styleSheets_1_1.done && (_a = styleSheets_1.return)) _a.call(styleSheets_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return styleSheet;
    };
    /** 与现有样式合并 */
    /**
     * 与现有样式合并
     * @param {?} rules
     * @param {?} styleSheet
     * @return {?}
     */
    CommonUtils.prototype.appendCssRules = /**
     * 与现有样式合并
     * @param {?} rules
     * @param {?} styleSheet
     * @return {?}
     */
    function (rules, styleSheet) {
        var e_2, _a;
        try {
            for (var rules_1 = __values(rules), rules_1_1 = rules_1.next(); !rules_1_1.done; rules_1_1 = rules_1.next()) {
                var rule = rules_1_1.value;
                /** @type {?} */
                var ruleName = rule.slice(0, rule.indexOf('{'));
                /** @type {?} */
                var removedCssRule = this.removeCssRule(ruleName, styleSheet);
                /** @type {?} */
                var cssText = '';
                if (removedCssRule) {
                    cssText += removedCssRule.cssText.slice(removedCssRule.cssText.indexOf('{') + 1, removedCssRule.cssText.indexOf('}'));
                }
                cssText += rule.slice(rule.indexOf('{') + 1, rule.indexOf('}')).replace(/"/g, '').replace(/,/g, ';') + ';';
                if (styleSheet.addRule) {
                    styleSheet.addRule(ruleName, cssText, 0);
                }
                else {
                    /** @type {?} */
                    var _newRule = ruleName + "{ " + cssText + " }";
                    styleSheet.insertRule(_newRule, 0);
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (rules_1_1 && !rules_1_1.done && (_a = rules_1.return)) _a.call(rules_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    /** 覆盖现有的样式 */
    /**
     * 覆盖现有的样式
     * @param {?} rules
     * @param {?} styleSheet
     * @return {?}
     */
    CommonUtils.prototype.appendCssRules2 = /**
     * 覆盖现有的样式
     * @param {?} rules
     * @param {?} styleSheet
     * @return {?}
     */
    function (rules, styleSheet) {
        var e_3, _a;
        try {
            for (var rules_2 = __values(rules), rules_2_1 = rules_2.next(); !rules_2_1.done; rules_2_1 = rules_2.next()) {
                var rule = rules_2_1.value;
                /** @type {?} */
                var ruleName = rule.slice(0, rule.indexOf('{'));
                /** @type {?} */
                var removedCssRule = this.removeCssRule(ruleName, styleSheet);
                /** @type {?} */
                var cssText = rule.slice(rule.indexOf('{') + 1, rule.indexOf('}')).replace(/"/g, '').replace(/,/g, ';') + ';';
                if (styleSheet.addRule) {
                    styleSheet.addRule(ruleName, cssText, 0);
                }
                else {
                    /** @type {?} */
                    var _newRule = ruleName + "{ " + cssText + " }";
                    styleSheet.insertRule(_newRule, 0);
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (rules_2_1 && !rules_2_1.done && (_a = rules_2.return)) _a.call(rules_2);
            }
            finally { if (e_3) throw e_3.error; }
        }
    };
    /**
     * @param {?} ruleName
     * @param {?} styleSheet
     * @return {?}
     */
    CommonUtils.prototype.getCssRule = /**
     * @param {?} ruleName
     * @param {?} styleSheet
     * @return {?}
     */
    function (ruleName, styleSheet) {
        var e_4, _a;
        /** @type {?} */
        var cssRules = (/** @type {?} */ ((styleSheet.cssRules || styleSheet.rules)));
        /** @type {?} */
        var r = null;
        try {
            for (var cssRules_1 = __values(cssRules), cssRules_1_1 = cssRules_1.next(); !cssRules_1_1.done; cssRules_1_1 = cssRules_1.next()) {
                var rule = cssRules_1_1.value;
                if (rule.selectorText == ruleName) {
                    r = rule;
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (cssRules_1_1 && !cssRules_1_1.done && (_a = cssRules_1.return)) _a.call(cssRules_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return r;
    };
    /**
     * @param {?} ruleName
     * @param {?} styleSheet
     * @return {?}
     */
    CommonUtils.prototype.removeCssRule = /**
     * @param {?} ruleName
     * @param {?} styleSheet
     * @return {?}
     */
    function (ruleName, styleSheet) {
        /** @type {?} */
        var cssRules = (/** @type {?} */ ((styleSheet.cssRules || styleSheet.rules)));
        /** @type {?} */
        var ii = 0;
        /** @type {?} */
        var cssRule = false;
        do {
            cssRule = cssRules[ii];
            if (cssRule) {
                if (cssRule.selectorText.toLowerCase() == ruleName.toLowerCase()) {
                    if (styleSheet.cssRules) {
                        styleSheet.deleteRule(ii);
                    }
                    else {
                        styleSheet.removeRule(ii);
                    }
                    return cssRule;
                }
            }
            ii++;
        } while (cssRule);
    };
    /**
     * @param {?} val
     * @return {?}
     */
    CommonUtils.prototype.isNullOrUndefined = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        return val === null || val === undefined;
    };
    /**
     * @return {?}
     */
    CommonUtils.prototype.isIE = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var uA = window.navigator.userAgent;
        return /msie\s|trident\/|edge\//i.test(uA) && !!('uniqueID' in document || 'documentMode' in document || ('ActiveXObject' in window) || 'MSInputMethodContext' in window);
    };
    /**
     * @param {?} sorts
     * @return {?}
     */
    CommonUtils.prototype.buildSortString = /**
     * @param {?} sorts
     * @return {?}
     */
    function (sorts) {
        return this.cfs.buildSortString(sorts);
    };
    /**
     * @param {?} conditions
     * @return {?}
     */
    CommonUtils.prototype.buildSqlWhere = /**
     * @param {?} conditions
     * @return {?}
     */
    function (conditions) {
        return this.cfs.buildSqlWhere(conditions);
    };
    /**
     * @return {?}
     */
    CommonUtils.prototype.getBrowserType = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var ua = navigator.userAgent.toLowerCase();
        // 获取用户端信息
        /** @type {?} */
        var info = {
            ie: /msie/.test(ua) && !/opera/.test(ua),
            //  匹配IE浏览器
            op: /opera/.test(ua),
            //  匹配Opera浏览器
            sa: /version.*safari/.test(ua),
            // 匹配Safari浏览器
            ch: /chrome/.test(ua),
            //  匹配Chrome浏览器
            ff: /gecko/.test(ua) && !/webkit/.test(ua) // 匹配Firefox浏览器
        };
        return info;
    };
    /**
     * @return {?}
     */
    CommonUtils.prototype.getFFVer = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var ua = navigator.userAgent;
        /** @type {?} */
        var b = ua.indexOf('Firefox/');
        if (b < 0) {
            return 0;
        }
        return parseFloat(ua.substring(b + 8, ua.lastIndexOf('\.')));
    };
    /**
     * @param {?} name
     * @param {?=} locationSearch
     * @return {?}
     */
    CommonUtils.prototype.getQueryString = /**
     * @param {?} name
     * @param {?=} locationSearch
     * @return {?}
     */
    function (name, locationSearch) {
        if (locationSearch === void 0) { locationSearch = ''; }
        /** @type {?} */
        var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
        /** @type {?} */
        var _search = window.location.search;
        if (locationSearch) {
            _search = locationSearch;
        }
        /** @type {?} */
        var r = _search.substring(1).match(reg);
        if (r != null)
            return (r[2]);
        return null;
    };
    /**
     * 获取页面中body下所有元素的zIndex, 并返回下个浮层的新zindex
     */
    /**
     * 获取页面中body下所有元素的zIndex, 并返回下个浮层的新zindex
     * @param {?=} upperLayers
     * @return {?}
     */
    CommonUtils.prototype.getFloatingLayerIndex = /**
     * 获取页面中body下所有元素的zIndex, 并返回下个浮层的新zindex
     * @param {?=} upperLayers
     * @return {?}
     */
    function (upperLayers) {
        if (upperLayers === void 0) { upperLayers = 1; }
        /** @type {?} */
        var selectors = [
            'body>.f-datagrid-settings-simple-host',
            'body>div',
            'body>farris-dialog>.farris-modal.show',
            'body>.farris-modal.show',
            'body>farris-filter-panel>.f-filter-panel-wrapper',
            'body .f-sidebar-show>.f-sidebar-main',
            'body>.popover.show',
            'body>filter-row-panel>.f-datagrid-filter-panel',
            'body>.f-section-maximize'
        ];
        /** @type {?} */
        var overlays = Array.from(document.body.querySelectorAll(selectors.join(','))).filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n; })).map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            var _a = window.getComputedStyle(n), display = _a.display, zIndex = _a.zIndex;
            if (display === 'none') {
                return 0;
            }
            return parseInt(zIndex, 10);
        })).filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n; }));
        /** @type {?} */
        var maxZindex = Math.max.apply(Math, __spread(overlays));
        if (maxZindex < 1040) {
            maxZindex = 1040;
        }
        return maxZindex + upperLayers;
    };
    /** 点击N次后，执行callback; 默认点击10次后执行 */
    /**
     * 点击N次后，执行callback; 默认点击10次后执行
     * @param {?} callback
     * @param {?=} clickTatgatNum
     * @return {?}
     */
    CommonUtils.prototype.clickContinuity = /**
     * 点击N次后，执行callback; 默认点击10次后执行
     * @param {?} callback
     * @param {?=} clickTatgatNum
     * @return {?}
     */
    function (callback, clickTatgatNum) {
        var _this = this;
        if (clickTatgatNum === void 0) { clickTatgatNum = 10; }
        if (this['clickCountNow'] === undefined) {
            this['clickCountNow'] = 0;
        }
        // 连续点击次数小于指定次数时
        if (this['clickCountNow'] < clickTatgatNum - 1) {
            // 清除定时器
            if (this['clickTimer']) {
                clearTimeout(this['clickTimer']);
                this['clickTimer'] = null;
            }
            // 点击次数+1
            this['clickCountNow']++;
            // 打印次数日志
            // console.log(`clickCountNow`, this['clickCountNow'])
            // 设置定时器，大于300毫秒点击不算连续点击
            this['clickTimer'] = setTimeout((/**
             * @return {?}
             */
            function () {
                _this['clickCountNow'] = 0;
            }), 300);
        }
        else {
            // 点击次数+1（此时已大于等于指定点击次数）
            this['clickCountNow']++;
            // 打印日志
            // console.log(`连续点击了${this['clickCountNow']}次`, `做点什么`)
            if (callback) {
                callback();
            }
            // 清除定时器
            if (this['clickTimer']) {
                clearTimeout(this['clickTimer']);
                this['clickTimer'] = null;
            }
            // 点击次数归零，重新计数
            this['clickCountNow'] = 0;
        }
    };
    /**
     * @param {?=} enterFn
     * @param {?=} escFn
     * @return {?}
     */
    CommonUtils.prototype.regBodyKeydownEvent = /**
     * @param {?=} enterFn
     * @param {?=} escFn
     * @return {?}
     */
    function (enterFn, escFn) {
        /** @type {?} */
        var keydownHandle = (/**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            if ($event.key !== 'Escape' && $event.key !== 'Enter') {
                return;
            }
            $event.preventDefault();
            $event.stopPropagation();
            if ($event.key == 'Enter' && enterFn) {
                // 执行查询
                enterFn();
            }
            else {
                escFn && escFn();
            }
        });
        document.body.addEventListener('keydown', keydownHandle, true);
        return (/**
         * @return {?}
         */
        function () {
            document.body.removeEventListener('keydown', keydownHandle, true);
        });
    };
    CommonUtils.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    CommonUtils.ctorParameters = function () { return []; };
    /** @nocollapse */ CommonUtils.ngInjectableDef = defineInjectable({ factory: function CommonUtils_Factory() { return new CommonUtils(); }, token: CommonUtils, providedIn: "root" });
    return CommonUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FarrisSafePipe = /** @class */ (function () {
    function FarrisSafePipe(sanitizer) {
        this.sanitizer = sanitizer;
    }
    /**
     * @param {?} value
     * @param {?} type
     * @return {?}
     */
    FarrisSafePipe.prototype.transform = /**
     * @param {?} value
     * @param {?} type
     * @return {?}
     */
    function (value, type) {
        switch (type) {
            case 'html': return this.sanitizer.bypassSecurityTrustHtml(value);
            case 'style': return this.sanitizer.bypassSecurityTrustStyle(value);
            case 'script': return this.sanitizer.bypassSecurityTrustScript(value);
            case 'url': return this.sanitizer.bypassSecurityTrustUrl(value);
            case 'resourceUrl': return this.sanitizer.bypassSecurityTrustResourceUrl(value);
            default: throw new Error("Invalid safe type specified: " + type);
        }
    };
    FarrisSafePipe.decorators = [
        { type: Pipe, args: [{
                    name: 'safe'
                },] }
    ];
    /** @nocollapse */
    FarrisSafePipe.ctorParameters = function () { return [
        { type: DomSanitizer }
    ]; };
    return FarrisSafePipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/* hex output format. 0 - lowercase; 1 - uppercase        */
/** @type {?} */
var b64pad = '';
/* base-64 pad character. "=" for strict RFC compliance   */
/** @type {?} */
var chrsz = 8;
/* bits per input character. 8 - ASCII; 16 - Unicode      */
/**
 * @param {?} s
 * @param {?=} type
 * @return {?}
 */
function encrypt(s, type) {
    if (type === void 0) { type = 'hex'; }
    if (type === 'hex') {
        return binl2hex(core_encrypt(str2binl(s), s.length * chrsz));
    }
    else if (type === 'b64') {
        return binl2b64(core_encrypt(str2binl(s), s.length * chrsz));
    }
    else {
        return binl2str(core_encrypt(str2binl(s), s.length * chrsz));
    }
}
/*
 * These are the functions you'll usually want to call
 * They take string arguments and return either hex or base-64 encoded strings
 */
// export function hex_encrypt(s: string) {
//     return binl2hex(core_encrypt(str2binl(s), s.length * chrsz));
// }
// export function b64_encrypt(s: string) {
//     return binl2b64(core_encrypt(str2binl(s), s.length * chrsz));
// }
// export function str_encrypt(s: string) {
//     return binl2str(core_encrypt(str2binl(s), s.length * chrsz));
// }
// export function hex_hmac_encrypt(key, data) {
//     return binl2hex(core_hmac_encrypt(key, data));
// }
// export function b64_hmac_encrypt(key, data) {
//     return binl2b64(core_hmac_encrypt(key, data));
// }
// export function str_hmac_encrypt(key, data) {
//     return binl2str(core_hmac_encrypt(key, data));
// }
/*
 * Perform a simple self-test to see if the VM is working
 */
// function encrypt_vm_test() {
//     return hex_encrypt('abc') === '900150983cd24fb0d6963f7d28e17f72';
// }
/*
 * Calculate the encrypt of an array of little-endian words, and a bit length
 */
/**
 * @param {?} x
 * @param {?} len
 * @return {?}
 */
function core_encrypt(x, len) {
    /* append padding */
    x[len >> 5] |= 0x80 << len % 32;
    x[(((len + 64) >>> 9) << 4) + 14] = len;
    /** @type {?} */
    var a = 1732584193;
    /** @type {?} */
    var b = -271733879;
    /** @type {?} */
    var c = -1732584194;
    /** @type {?} */
    var d = 271733878;
    for (var i = 0; i < x.length; i += 16) {
        /** @type {?} */
        var olda = a;
        /** @type {?} */
        var oldb = b;
        /** @type {?} */
        var oldc = c;
        /** @type {?} */
        var oldd = d;
        a = encrypt_ff(a, b, c, d, x[i + 0], 7, -680876936);
        d = encrypt_ff(d, a, b, c, x[i + 1], 12, -389564586);
        c = encrypt_ff(c, d, a, b, x[i + 2], 17, 606105819);
        b = encrypt_ff(b, c, d, a, x[i + 3], 22, -1044525330);
        a = encrypt_ff(a, b, c, d, x[i + 4], 7, -176418897);
        d = encrypt_ff(d, a, b, c, x[i + 5], 12, 1200080426);
        c = encrypt_ff(c, d, a, b, x[i + 6], 17, -1473231341);
        b = encrypt_ff(b, c, d, a, x[i + 7], 22, -45705983);
        a = encrypt_ff(a, b, c, d, x[i + 8], 7, 1770035416);
        d = encrypt_ff(d, a, b, c, x[i + 9], 12, -1958414417);
        c = encrypt_ff(c, d, a, b, x[i + 10], 17, -42063);
        b = encrypt_ff(b, c, d, a, x[i + 11], 22, -1990404162);
        a = encrypt_ff(a, b, c, d, x[i + 12], 7, 1804603682);
        d = encrypt_ff(d, a, b, c, x[i + 13], 12, -40341101);
        c = encrypt_ff(c, d, a, b, x[i + 14], 17, -1502002290);
        b = encrypt_ff(b, c, d, a, x[i + 15], 22, 1236535329);
        a = encrypt_gg(a, b, c, d, x[i + 1], 5, -165796510);
        d = encrypt_gg(d, a, b, c, x[i + 6], 9, -1069501632);
        c = encrypt_gg(c, d, a, b, x[i + 11], 14, 643717713);
        b = encrypt_gg(b, c, d, a, x[i + 0], 20, -373897302);
        a = encrypt_gg(a, b, c, d, x[i + 5], 5, -701558691);
        d = encrypt_gg(d, a, b, c, x[i + 10], 9, 38016083);
        c = encrypt_gg(c, d, a, b, x[i + 15], 14, -660478335);
        b = encrypt_gg(b, c, d, a, x[i + 4], 20, -405537848);
        a = encrypt_gg(a, b, c, d, x[i + 9], 5, 568446438);
        d = encrypt_gg(d, a, b, c, x[i + 14], 9, -1019803690);
        c = encrypt_gg(c, d, a, b, x[i + 3], 14, -187363961);
        b = encrypt_gg(b, c, d, a, x[i + 8], 20, 1163531501);
        a = encrypt_gg(a, b, c, d, x[i + 13], 5, -1444681467);
        d = encrypt_gg(d, a, b, c, x[i + 2], 9, -51403784);
        c = encrypt_gg(c, d, a, b, x[i + 7], 14, 1735328473);
        b = encrypt_gg(b, c, d, a, x[i + 12], 20, -1926607734);
        a = encrypt_hh(a, b, c, d, x[i + 5], 4, -378558);
        d = encrypt_hh(d, a, b, c, x[i + 8], 11, -2022574463);
        c = encrypt_hh(c, d, a, b, x[i + 11], 16, 1839030562);
        b = encrypt_hh(b, c, d, a, x[i + 14], 23, -35309556);
        a = encrypt_hh(a, b, c, d, x[i + 1], 4, -1530992060);
        d = encrypt_hh(d, a, b, c, x[i + 4], 11, 1272893353);
        c = encrypt_hh(c, d, a, b, x[i + 7], 16, -155497632);
        b = encrypt_hh(b, c, d, a, x[i + 10], 23, -1094730640);
        a = encrypt_hh(a, b, c, d, x[i + 13], 4, 681279174);
        d = encrypt_hh(d, a, b, c, x[i + 0], 11, -358537222);
        c = encrypt_hh(c, d, a, b, x[i + 3], 16, -722521979);
        b = encrypt_hh(b, c, d, a, x[i + 6], 23, 76029189);
        a = encrypt_hh(a, b, c, d, x[i + 9], 4, -640364487);
        d = encrypt_hh(d, a, b, c, x[i + 12], 11, -421815835);
        c = encrypt_hh(c, d, a, b, x[i + 15], 16, 530742520);
        b = encrypt_hh(b, c, d, a, x[i + 2], 23, -995338651);
        a = encrypt_ii(a, b, c, d, x[i + 0], 6, -198630844);
        d = encrypt_ii(d, a, b, c, x[i + 7], 10, 1126891415);
        c = encrypt_ii(c, d, a, b, x[i + 14], 15, -1416354905);
        b = encrypt_ii(b, c, d, a, x[i + 5], 21, -57434055);
        a = encrypt_ii(a, b, c, d, x[i + 12], 6, 1700485571);
        d = encrypt_ii(d, a, b, c, x[i + 3], 10, -1894986606);
        c = encrypt_ii(c, d, a, b, x[i + 10], 15, -1051523);
        b = encrypt_ii(b, c, d, a, x[i + 1], 21, -2054922799);
        a = encrypt_ii(a, b, c, d, x[i + 8], 6, 1873313359);
        d = encrypt_ii(d, a, b, c, x[i + 15], 10, -30611744);
        c = encrypt_ii(c, d, a, b, x[i + 6], 15, -1560198380);
        b = encrypt_ii(b, c, d, a, x[i + 13], 21, 1309151649);
        a = encrypt_ii(a, b, c, d, x[i + 4], 6, -145523070);
        d = encrypt_ii(d, a, b, c, x[i + 11], 10, -1120210379);
        c = encrypt_ii(c, d, a, b, x[i + 2], 15, 718787259);
        b = encrypt_ii(b, c, d, a, x[i + 9], 21, -343485551);
        a = safe_add(a, olda);
        b = safe_add(b, oldb);
        c = safe_add(c, oldc);
        d = safe_add(d, oldd);
    }
    return Array(a, b, c, d);
}
/*
 * These functions implement the four basic operations the algorithm uses.
 */
/**
 * @param {?} q
 * @param {?} a
 * @param {?} b
 * @param {?} x
 * @param {?} s
 * @param {?} t
 * @return {?}
 */
function encrypt_cmn(q, a, b, x, s, t) {
    return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} c
 * @param {?} d
 * @param {?} x
 * @param {?} s
 * @param {?} t
 * @return {?}
 */
function encrypt_ff(a, b, c, d, x, s, t) {
    return encrypt_cmn((b & c) | (~b & d), a, b, x, s, t);
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} c
 * @param {?} d
 * @param {?} x
 * @param {?} s
 * @param {?} t
 * @return {?}
 */
function encrypt_gg(a, b, c, d, x, s, t) {
    return encrypt_cmn((b & d) | (c & ~d), a, b, x, s, t);
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} c
 * @param {?} d
 * @param {?} x
 * @param {?} s
 * @param {?} t
 * @return {?}
 */
function encrypt_hh(a, b, c, d, x, s, t) {
    return encrypt_cmn(b ^ c ^ d, a, b, x, s, t);
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} c
 * @param {?} d
 * @param {?} x
 * @param {?} s
 * @param {?} t
 * @return {?}
 */
function encrypt_ii(a, b, c, d, x, s, t) {
    return encrypt_cmn(c ^ (b | ~d), a, b, x, s, t);
}
/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
/**
 * @param {?} x
 * @param {?} y
 * @return {?}
 */
function safe_add(x, y) {
    /** @type {?} */
    var lsw = (x & 0xffff) + (y & 0xffff);
    /** @type {?} */
    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    return (msw << 16) | (lsw & 0xffff);
}
/*
 * Bitwise rotate a 32-bit number to the left.
 */
/**
 * @param {?} num
 * @param {?} cnt
 * @return {?}
 */
function bit_rol(num, cnt) {
    return (num << cnt) | (num >>> (32 - cnt));
}
/*
 * Convert a string to an array of little-endian words
 * If chrsz is ASCII, characters >255 have their hi-byte silently ignored.
 */
/**
 * @param {?} str
 * @return {?}
 */
function str2binl(str) {
    /** @type {?} */
    var bin = Array();
    /** @type {?} */
    var mask = (1 << chrsz) - 1;
    for (var i = 0; i < str.length * chrsz; i += chrsz) {
        bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << i % 32;
    }
    return bin;
}
/*
 * Convert an array of little-endian words to a string
 */
/**
 * @param {?} bin
 * @return {?}
 */
function binl2str(bin) {
    /** @type {?} */
    var str = '';
    /** @type {?} */
    var mask = (1 << chrsz) - 1;
    for (var i = 0; i < bin.length * 32; i += chrsz) {
        str += String.fromCharCode((bin[i >> 5] >>> i % 32) & mask);
    }
    return str;
}
/*
 * Convert an array of little-endian words to a hex string.
 */
/**
 * @param {?} binarray
 * @return {?}
 */
function binl2hex(binarray) {
    // tslint:disable-next-line: variable-name
    /** @type {?} */
    var hex_tab = '0123456789abcdef';
    /** @type {?} */
    var str = '';
    for (var i = 0; i < binarray.length * 4; i++) {
        str +=
            hex_tab.charAt((binarray[i >> 2] >> ((i % 4) * 8 + 4)) & 0xf) +
                hex_tab.charAt((binarray[i >> 2] >> ((i % 4) * 8)) & 0xf);
    }
    return str;
}
/*
 * Convert an array of little-endian words to a base-64 string
 */
/**
 * @param {?} binarray
 * @return {?}
 */
function binl2b64(binarray) {
    /** @type {?} */
    var tab = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    /** @type {?} */
    var str = '';
    for (var i = 0; i < binarray.length * 4; i += 3) {
        /** @type {?} */
        var triplet = (((binarray[i >> 2] >> (8 * (i % 4))) & 0xff) << 16) |
            (((binarray[(i + 1) >> 2] >> (8 * ((i + 1) % 4))) & 0xff) << 8) |
            ((binarray[(i + 2) >> 2] >> (8 * ((i + 2) % 4))) & 0xff);
        for (var j = 0; j < 4; j++) {
            if (i * 8 + j * 6 > binarray.length * 32) {
                str += b64pad;
            }
            else {
                str += tab.charAt((triplet >> (6 * (3 - j))) & 0x3f);
            }
        }
    }
    return str;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var IdService = /** @class */ (function () {
    function IdService() {
    }
    /**
     * @return {?}
     */
    IdService.prototype.generate = /**
     * @return {?}
     */
    function () {
        return this.guid();
    };
    /**
     * @param {?} str
     * @param {?=} type
     * @return {?}
     */
    IdService.prototype.encrypt = /**
     * @param {?} str
     * @param {?=} type
     * @return {?}
     */
    function (str, type) {
        if (type === void 0) { type = 'hex'; }
        return encrypt(str, type);
    };
    /**
     * @return {?}
     */
    IdService.prototype.guid = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var _crypto = window.crypto ? crypto : window['msCrypto'];
        if (_crypto) {
            return (((/** @type {?} */ ([1e7]))) + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (/**
             * @param {?} c
             * @return {?}
             */
            function (c) {
                return (c ^ (_crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))).toString(16);
            }));
        }
        else {
            return this.uuid();
        }
    };
    /**
     * @return {?}
     */
    IdService.prototype.uuid = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var timestamp = Date.now().valueOf();
        /** @type {?} */
        var uuid = 0;
        if (timestamp > IdService.previous) {
            IdService.previous = timestamp;
            uuid = timestamp;
        }
        else {
            IdService.previous = IdService.previous + 100;
            uuid = IdService.previous;
        }
        return uuid.toString(16);
    };
    IdService.previous = 0;
    IdService.decorators = [
        { type: Injectable }
    ];
    return IdService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 使用说明
 * let message = "今天天气 {0}，处处好 {1}。"
 * template:
 * <h1>{{ message| replaceX: '晴朗', '风光' }}</h1>
 * resule:
 * <h1>今天天气 晴朗，处处好 风光。</h1>
 */
var FarrisReplaceXPipe = /** @class */ (function () {
    function FarrisReplaceXPipe() {
    }
    /**
     * @param {?} value
     * @param {...?} args
     * @return {?}
     */
    FarrisReplaceXPipe.prototype.transform = /**
     * @param {?} value
     * @param {...?} args
     * @return {?}
     */
    function (value) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        args.forEach((/**
         * @param {?} v
         * @param {?} i
         * @return {?}
         */
        function (v, i) {
            value = value.replace("{" + i + "}", v);
        }));
        return value;
    };
    FarrisReplaceXPipe.decorators = [
        { type: Pipe, args: [{ name: 'replaceX' },] }
    ];
    return FarrisReplaceXPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var DefaultRuntimeState = {
    form: {},
    model: {}
};
var RuntimeStateService = /** @class */ (function () {
    function RuntimeStateService(utils) {
        this.utils = utils;
        this.stateSubject = new BehaviorSubject({});
        this.state$ = this.stateSubject.asObservable();
        this.form$ = this.state$.pipe(map((/**
         * @param {?} state
         * @return {?}
         */
        function (state) { return state.form; })));
        this.lookupIsPending$ = this.form$.pipe(map((/**
         * @param {?} f
         * @return {?}
         */
        function (f) { return f.lookup.pending; })));
        this._state = cloneDeep(DefaultRuntimeState);
        this._formState = this._state.form;
        this._lookupState = this._formState.lookup;
    }
    /**
     * @private
     * @param {?} newVal
     * @return {?}
     */
    RuntimeStateService.prototype.setValue = /**
     * @private
     * @param {?} newVal
     * @return {?}
     */
    function (newVal) {
        if (newVal) {
            this._state = merge(this._state, newVal);
            this.stateSubject.next(this._state);
        }
    };
    /**
     * @private
     * @param {?} keyPath
     * @return {?}
     */
    RuntimeStateService.prototype.getValue = /**
     * @private
     * @param {?} keyPath
     * @return {?}
     */
    function (keyPath) {
        return this.utils.getValue(keyPath, this._state);
    };
    /**
     * @return {?}
     */
    RuntimeStateService.prototype.destroy = /**
     * @return {?}
     */
    function () {
        this._state = {
            form: {},
            model: {}
        };
        this._formState = this._state.form;
        this._lookupState = this._formState.lookup;
        this.stateSubject.next(this._state);
    };
    /**
     * @param {?} el
     * @return {?}
     */
    RuntimeStateService.prototype.setLookupInstance = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        this.setValue({ form: { lookup: { instance: el } } });
    };
    /**
     * @param {?} newVal
     * @return {?}
     */
    RuntimeStateService.prototype.updateFormState = /**
     * @param {?} newVal
     * @return {?}
     */
    function (newVal) {
        this.setValue({ form: newVal });
    };
    /**
     * @param {?} keyPath
     * @return {?}
     */
    RuntimeStateService.prototype.getFormState = /**
     * @param {?} keyPath
     * @return {?}
     */
    function (keyPath) {
        return this.getValue('form.' + keyPath);
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    RuntimeStateService.prototype.eventPath = /**
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        /** @type {?} */
        var path = (evt.composedPath && evt.composedPath()) || evt.path;
        /** @type {?} */
        var target = evt.target;
        if (path != null) {
            return (path.indexOf(window) < 0) ? path.concat(window) : path;
        }
        if (target === window) {
            return [window];
        }
        /** @type {?} */
        var getParents = (/**
         * @param {?} node
         * @param {?=} memo
         * @return {?}
         */
        function (node, memo) {
            if (memo === void 0) { memo = undefined; }
            memo = memo || [];
            /** @type {?} */
            var parentNode = node.parentNode;
            if (!parentNode) {
                return memo;
            }
            else {
                return getParents(parentNode, memo.concat(parentNode));
            }
        });
        return [target].concat(getParents(target), window);
    };
    RuntimeStateService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    RuntimeStateService.ctorParameters = function () { return [
        { type: CommonUtils }
    ]; };
    /** @nocollapse */ RuntimeStateService.ngInjectableDef = defineInjectable({ factory: function RuntimeStateService_Factory() { return new RuntimeStateService(inject(CommonUtils)); }, token: RuntimeStateService, providedIn: "root" });
    return RuntimeStateService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var GetValuePipe = /** @class */ (function () {
    function GetValuePipe(utils) {
        this.utils = utils;
    }
    /**
     * @param {?} field
     * @param {...?} args
     * @return {?}
     */
    GetValuePipe.prototype.transform = /**
     * @param {?} field
     * @param {...?} args
     * @return {?}
     */
    function (field) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return this.utils.getValue(field, args[0], args[1]);
    };
    GetValuePipe.decorators = [
        { type: Pipe, args: [{
                    name: 'getvalue'
                },] }
    ];
    /** @nocollapse */
    GetValuePipe.ctorParameters = function () { return [
        { type: CommonUtils }
    ]; };
    return GetValuePipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var OverLayOptionDefaults = {
    onlyTopWindow: false,
    mouseWheel: true,
    mouseDown: true,
    scroll: false,
    mouseUp: false,
    click: false
};
var OverLayHiddenService = /** @class */ (function () {
    function OverLayHiddenService() {
        this.eventsMap = new WeakMap();
    }
    /**
     * @private
     * @param {?} el
     * @param {?} action
     * @return {?}
     */
    OverLayHiddenService.prototype.iframeEventHandle = /**
     * @private
     * @param {?} el
     * @param {?} action
     * @return {?}
     */
    function (el, action) {
        var e_1, _a;
        /** @type {?} */
        var iframes = Array.from(document.querySelectorAll('iframe'));
        if (iframes && iframes.length) {
            /** @type {?} */
            var _documentClickEvent = this.eventsMap.get(el);
            try {
                for (var iframes_1 = __values(iframes), iframes_1_1 = iframes_1.next(); !iframes_1_1.done; iframes_1_1 = iframes_1.next()) {
                    var iframe = iframes_1_1.value;
                    /** @type {?} */
                    var iframeDoc = iframe.contentDocument;
                    if (iframeDoc) {
                        iframeDoc[action]('mousedown', _documentClickEvent);
                        iframeDoc[action]('mousewheel', _documentClickEvent);
                        iframeDoc[action]('DOMMouseScroll', _documentClickEvent);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (iframes_1_1 && !iframes_1_1.done && (_a = iframes_1.return)) _a.call(iframes_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    };
    /**
     * @private
     * @param {?} el
     * @return {?}
     */
    OverLayHiddenService.prototype.removeMouseEvent = /**
     * @private
     * @param {?} el
     * @return {?}
     */
    function (el) {
        /** @type {?} */
        var _documentClickEvent = this.eventsMap.get(el);
        if (_documentClickEvent) {
            document.removeEventListener('mousedown', _documentClickEvent, true);
            document.removeEventListener('mousewheel', _documentClickEvent, true);
            document.removeEventListener('DOMMouseScroll', _documentClickEvent, true);
            if (top !== window) {
                top.document.body.removeEventListener('mousedown', _documentClickEvent, true);
            }
            this.iframeEventHandle(el, 'removeEventListener');
            _documentClickEvent = null;
            this.eventsMap.delete(el);
        }
    };
    /**
     * @param {?} el
     * @return {?}
     */
    OverLayHiddenService.prototype.destory = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        this.removeMouseEvent(el);
    };
    /**
     * @param {?} el
     * @param {?} _documentClickEvent
     * @param {?=} options
     * @return {?}
     */
    OverLayHiddenService.prototype.registerMouseEvent = /**
     * @param {?} el
     * @param {?} _documentClickEvent
     * @param {?=} options
     * @return {?}
     */
    function (el, _documentClickEvent, options) {
        // const _documentClickEvent1 = (e) => {
        //     if (e && e.target && e.target.nodeName.toLowerCase() == 'svg') {
        //         return;
        //     }
        var _this = this;
        //     _documentClickEvent(e);
        // }
        if (this.eventsMap.has(el)) {
            return;
        }
        else {
            this.eventsMap.set(el, _documentClickEvent);
        }
        if (!options) {
            options = OverLayOptionDefaults;
        }
        else {
            options = Object.assign({}, OverLayOptionDefaults, options);
        }
        if (options.onlyTopWindow && top !== window) {
            top.document.body.addEventListener('mousedown', _documentClickEvent, true);
        }
        else {
            if (options.mouseDown) {
                // 注册 mousedown 事件 隐藏panel
                document.addEventListener('mousedown', _documentClickEvent, true);
            }
            if (options.mouseWheel) {
                document.addEventListener('mousewheel', _documentClickEvent, true);
                document.addEventListener('DOMMouseScroll', _documentClickEvent, true);
            }
            if (options.scroll) {
                document.addEventListener('scroll', _documentClickEvent, true);
            }
            if (options.mouseUp) {
                document.addEventListener('mouseup', _documentClickEvent);
            }
            if (options.click) {
                document.addEventListener('click', _documentClickEvent);
            }
            if (top !== window) {
                top.document.body.addEventListener('mousedown', _documentClickEvent, true);
            }
            this.iframeEventHandle(el, 'addEventListener');
        }
        return (/**
         * @return {?}
         */
        function () {
            _this.destory(el);
        });
    };
    OverLayHiddenService.decorators = [
        { type: Injectable }
    ];
    return OverLayHiddenService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FarrisCommonModule = /** @class */ (function () {
    function FarrisCommonModule() {
    }
    /**
     * @return {?}
     */
    FarrisCommonModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: FarrisCommonModule,
            providers: [
                CommonUtils,
                RuntimeStateService,
                IdService,
                OverLayHiddenService
            ]
        };
    };
    FarrisCommonModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        FarrisSafePipe,
                        FarrisTemplateDirective,
                        ResizeObserverDirective,
                        FarrisReplaceXPipe,
                        GetValuePipe,
                        FarrisComponentTemplateDirective
                    ],
                    imports: [],
                    exports: [
                        FarrisSafePipe,
                        FarrisTemplateDirective,
                        ResizeObserverDirective,
                        FarrisReplaceXPipe,
                        GetValuePipe,
                        FarrisComponentTemplateDirective
                    ]
                },] }
    ];
    return FarrisCommonModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 */
var  /**
 * @template T
 */
BaseDataFacadeService = /** @class */ (function () {
    function BaseDataFacadeService(_initState) {
        this._initState = _initState;
        this._state = this._initState;
        this.store = new BehaviorSubject(this._state);
        this.state$ = this.store.asObservable();
        this.data$ = this.state$.pipe(map((/**
         * @param {?} state
         * @return {?}
         */
        function (state) { return state.data; })));
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    BaseDataFacadeService.prototype.initData = /**
     * @private
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        return data.map((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            /** @type {?} */
            var _id = d[_this._state.idField];
            /** @type {?} */
            var disable = (/**
             * @return {?}
             */
            function () {
                return _this.disableExpress ? _this.disableExpress(d) : d[_this._state.disabledField] ? true : false;
            });
            return {
                id: _id,
                data: d,
                disabled: disable(),
            };
        }));
    };
    /**
     * @protected
     * @param {?} state
     * @return {?}
     */
    BaseDataFacadeService.prototype.updateState = /**
     * @protected
     * @param {?} state
     * @return {?}
     */
    function (state) {
        /** @type {?} */
        var newState = __assign({}, this._state, state);
        this.store.next(this._state = newState);
    };
    /**
     * @param {?} state
     * @return {?}
     */
    BaseDataFacadeService.prototype.initState = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        this.updateState(state);
    };
    /**
     * @param {?} id
     * @return {?}
     */
    BaseDataFacadeService.prototype.isSelect = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        if (this._state.selections && this._state.selections.length) {
            return this._state.selections.find((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return !!item ? item[_this._state.idField] == id : false; })) !== undefined;
        }
        return false;
    };
    /**
     * @param {?} data
     * @param {?=} selectValues
     * @param {?=} separator
     * @return {?}
     */
    BaseDataFacadeService.prototype.loadData = /**
     * @param {?} data
     * @param {?=} selectValues
     * @param {?=} separator
     * @return {?}
     */
    function (data, selectValues, separator) {
        if (selectValues === void 0) { selectValues = ''; }
        if (separator === void 0) { separator = ','; }
        if (data) {
            /** @type {?} */
            var _data = this.initData(data);
            this.updateState(__assign({}, this._state, { data: _data }));
            if (selectValues) {
                this.setSelections(selectValues, separator);
            }
            else {
                this._state.selections = [];
            }
        }
        else {
            this.updateState({ data: [], selections: [] });
        }
    };
    /**
     * @return {?}
     */
    BaseDataFacadeService.prototype.getSelections = /**
     * @return {?}
     */
    function () {
        return this._state.selections;
    };
    /**
     * @param {?} selectValues
     * @param {?=} separator
     * @return {?}
     */
    BaseDataFacadeService.prototype.setSelections = /**
     * @param {?} selectValues
     * @param {?=} separator
     * @return {?}
     */
    function (selectValues, separator) {
        var _this = this;
        if (separator === void 0) { separator = ','; }
        if (selectValues) {
            /** @type {?} */
            var selectedItems = [];
            if (this._state.multiSelect) {
                selectedItems = selectValues.split(separator).map((/**
                 * @param {?} val
                 * @return {?}
                 */
                function (val) {
                    return _this._state.data.find((/**
                     * @param {?} d
                     * @return {?}
                     */
                    function (d) { return d.data[_this._state.valueField] + '' == val; }));
                })).map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    return n ? n.data : '';
                })).filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n; }));
            }
            else {
                selectedItems = [this._state.data.find((/**
                     * @param {?} d
                     * @return {?}
                     */
                    function (d) { return d.data[_this._state.valueField] + '' == selectValues; }))];
            }
            this.updateState({ selections: selectedItems });
        }
    };
    /**
     * @return {?}
     */
    BaseDataFacadeService.prototype.selectAll = /**
     * @return {?}
     */
    function () {
        this.updateState({ selections: this._state.data.map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.data; })) });
    };
    /**
     * @return {?}
     */
    BaseDataFacadeService.prototype.unSelectAll = /**
     * @return {?}
     */
    function () {
        this.clearSelections();
    };
    /**
     * @param {?} data
     * @param {?=} index
     * @return {?}
     */
    BaseDataFacadeService.prototype.selectItem = /**
     * @param {?} data
     * @param {?=} index
     * @return {?}
     */
    function (data, index) {
        /** @type {?} */
        var idfield = this._state.idField;
        /** @type {?} */
        var selections = this.getSelections();
        /** @type {?} */
        var id = data[idfield];
        if (!this._state.multiSelect) {
            if (!this.isSelect(id)) {
                selections = [data];
            }
        }
        else {
            if (!this.isSelect(id)) {
                selections.push(data);
            }
        }
        /** @type {?} */
        var items = this.cloneArray(selections);
        this.updateState({ selections: items });
    };
    /**
     * @param {?} data
     * @return {?}
     */
    BaseDataFacadeService.prototype.unSelectItem = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var idfield = this._state.idField;
        /** @type {?} */
        var selections = this.getSelections();
        /** @type {?} */
        var id = data[idfield];
        if (!this._state.multiSelect) {
            selections = [];
        }
        else {
            selections = selections.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n[idfield] != id; }));
        }
        /** @type {?} */
        var items = this.cloneArray(selections);
        this.updateState({ selections: items });
    };
    /**
     * @return {?}
     */
    BaseDataFacadeService.prototype.clearSelections = /**
     * @return {?}
     */
    function () {
        this.updateState({ selections: [] });
    };
    /**
     * @private
     * @param {?} arr
     * @return {?}
     */
    BaseDataFacadeService.prototype.cloneArray = /**
     * @private
     * @param {?} arr
     * @return {?}
     */
    function (arr) {
        if (arr && arr.length) {
            return arr.map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n; }));
        }
        return arr;
    };
    return BaseDataFacadeService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FarrisComponentInstanceService = /** @class */ (function () {
    function FarrisComponentInstanceService() {
        this._state = new WeakMap();
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    FarrisComponentInstanceService.prototype.add = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        this._state.set(key, value);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    FarrisComponentInstanceService.prototype.get = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this._state.get(key);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    FarrisComponentInstanceService.prototype.destroy = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        this._state.set(key, null);
        this._state.delete(key);
    };
    FarrisComponentInstanceService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    FarrisComponentInstanceService.ctorParameters = function () { return []; };
    /** @nocollapse */ FarrisComponentInstanceService.ngInjectableDef = defineInjectable({ factory: function FarrisComponentInstanceService_Factory() { return new FarrisComponentInstanceService(); }, token: FarrisComponentInstanceService, providedIn: "root" });
    return FarrisComponentInstanceService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DebugService = /** @class */ (function () {
    function DebugService() {
        this.isDebug = false;
        this.destroy$ = new Subject();
        this.debugSub = null;
    }
    /**
     * @return {?}
     */
    DebugService.prototype.destroy = /**
     * @return {?}
     */
    function () {
        this.destroy$.next();
        this.destroy$.complete();
    };
    /**
     * @private
     * @param {?} type
     * @param {...?} msg
     * @return {?}
     */
    DebugService.prototype.writeMessage = /**
     * @private
     * @param {?} type
     * @param {...?} msg
     * @return {?}
     */
    function (type) {
        var msg = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            msg[_i - 1] = arguments[_i];
        }
        if (this.isDebug) {
            console[type].apply(console, __spread(msg));
        }
    };
    /**
     * @param {...?} msg
     * @return {?}
     */
    DebugService.prototype.log = /**
     * @param {...?} msg
     * @return {?}
     */
    function () {
        var msg = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            msg[_i] = arguments[_i];
        }
        this.writeMessage('log', msg);
    };
    /**
     * @param {...?} msg
     * @return {?}
     */
    DebugService.prototype.warn = /**
     * @param {...?} msg
     * @return {?}
     */
    function () {
        var msg = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            msg[_i] = arguments[_i];
        }
        this.writeMessage('warn', msg);
    };
    /**
     * @param {...?} msg
     * @return {?}
     */
    DebugService.prototype.error = /**
     * @param {...?} msg
     * @return {?}
     */
    function () {
        var msg = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            msg[_i] = arguments[_i];
        }
        this.writeMessage('error', msg);
    };
    /**
     * @param {...?} msg
     * @return {?}
     */
    DebugService.prototype.info = /**
     * @param {...?} msg
     * @return {?}
     */
    function () {
        var msg = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            msg[_i] = arguments[_i];
        }
        this.writeMessage('info', msg);
    };
    /**
     * @return {?}
     */
    DebugService.prototype.useDebugMode = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.debugSub) {
            this.debugSub = fromEvent(document.body, 'keydown').pipe(takeUntil(this.destroy$)).subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (e.ctrlKey && e.shiftKey && e.key === 'D') {
                    e.preventDefault();
                    e.stopPropagation();
                    _this.isDebug = !_this.isDebug;
                    // console.log(`%c🪲 Farris debug mode is ${ this.isDebug ? 'startting' : 'stopped'}.🪲`, 'color: blue; font-weight:bold;font-size:16px')
                    console.log("%c\uD83E\uDEB2 Farris debug mode is " + (_this.isDebug ? 'startting' : 'stopped') + ".\uD83E\uDEB2", "color: " + (_this.isDebug ? 'green' : 'red') + "; font-weight:bold;font-size:16px");
                }
            }));
        }
        return this.debugSub;
    };
    DebugService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    DebugService.ctorParameters = function () { return []; };
    /** @nocollapse */ DebugService.ngInjectableDef = defineInjectable({ factory: function DebugService_Factory() { return new DebugService(); }, token: DebugService, providedIn: "root" });
    return DebugService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:no-any typedef no-invalid-this
/** @type {?} */
var availablePrefixes = ['moz', 'ms', 'webkit'];
/**
 * @return {?}
 */
function requestAnimationFramePolyfill() {
    /** @type {?} */
    var lastTime = 0;
    return (/**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        /** @type {?} */
        var currTime = new Date().getTime();
        /** @type {?} */
        var timeToCall = Math.max(0, 16 - (currTime - lastTime));
        /** @type {?} */
        var id = setTimeout((/**
         * @return {?}
         */
        function () {
            callback(currTime + timeToCall);
        }), timeToCall);
        lastTime = currTime + timeToCall;
        return id;
    });
}
/**
 * @return {?}
 */
function getRequestAnimationFrame() {
    if (typeof window === 'undefined') {
        return (/**
         * @return {?}
         */
        function () { return 0; });
    }
    if (window.requestAnimationFrame) {
        // https://github.com/vuejs/vue/issues/4465
        return window.requestAnimationFrame.bind(window);
    }
    /** @type {?} */
    var prefix = availablePrefixes.filter((/**
     * @param {?} key
     * @return {?}
     */
    function (key) { return key + "RequestAnimationFrame" in window; }))[0];
    return prefix ? ((/** @type {?} */ (window)))[prefix + "RequestAnimationFrame"] : requestAnimationFramePolyfill();
}
/**
 * @param {?} id
 * @return {?}
 */
function cancelRequestAnimationFrame(id) {
    if (typeof window === 'undefined') {
        return null;
    }
    if (window.cancelAnimationFrame) {
        return window.cancelAnimationFrame(id);
    }
    /** @type {?} */
    var prefix = availablePrefixes.filter((/**
     * @param {?} key
     * @return {?}
     */
    function (key) { return key + "CancelAnimationFrame" in window || key + "CancelRequestAnimationFrame" in window; }))[0];
    return prefix
        ? (((/** @type {?} */ (window)))[prefix + "CancelAnimationFrame"] || ((/** @type {?} */ (window)))[prefix + "CancelRequestAnimationFrame"])
            // @ts-ignore
            .call(this, id)
        : clearTimeout(id);
}
/** @type {?} */
var reqAnimFrame = getRequestAnimationFrame();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// ['bold', 'italic', 'code-block', { header: 1 }, { header: 2 }, { list: 'ordered' }, { list: 'bullet' }, 'image']
/** @type {?} */
var RICH_COMMANDS = {
    concise: [
        // { visible: true, code: 'formatselect', cls: 'mr-1 f-icon f-icon-convert-lowercase', title: '段落&标题', value: [{ header: [1, 2, 3, 4, 5, 6, false] }] },
        // { visible: true, code: 'fontselect', cls: 'mr-1 f-icon f-icon-font-family', title: '字体', value: [{ font: ['Microsoft-YaHei', 'SimSun', 'SimHei', 'KaiTi', 'FangSong', 'Arial', 'Times', 'sans-serif'] }] },
        // { visible: true, code: 'fontsizeselect', cls: 'mr-1 f-icon f-icon-font-size', title: '字号', value: [{ size: ['small', false, 'large', 'huge'] }] },
        { visible: true, code: 'bold', cls: 'mr-1 rich-toolbar-icons rich-bold', title: '加粗', value: ['bold'] },
        { visible: true, code: 'italic', cls: 'mr-1 rich-toolbar-icons rich-italic', title: '倾斜', value: ['italic'] },
        { visible: true, code: 'underline', cls: 'mr-1 rich-toolbar-icons rich-underline', title: '下划线', value: ['underline'] },
        { visible: true, code: 'strike', cls: 'mr-1 rich-toolbar-icons rich-strike', title: '删除线', value: ['strike'] },
        { visible: true, code: 'numlist', cls: 'mr-1 rich-toolbar-icons rich-ordered', title: '有序列表', value: [{ list: 'ordered' }] },
        { visible: true, code: 'bullist', cls: 'mr-1 rich-toolbar-icons rich-bullet', title: '无序列表', value: [{ list: 'bullet' }] },
        // { visible: true, code: 'outdent', cls: 'mr-1 rich-toolbar-icons rich-indent-1', title: '取消缩进', value: [{ indent: '-1' }] },
        // { visible: true, code: 'indent', cls: 'mr-1 rich-toolbar-icons rich-indent1', title: '缩进', value: [{ indent: '+1' }] },
        // { visible: true, code: 'forecolor', cls: 'mr-1 rich-toolbar-icons rich-color', title: '文本颜色', value: [{ color: [] }] },
        // { visible: true, code: 'backcolor', cls: 'mr-1 rich-toolbar-icons rich-background', title: '背景色', value: [{ background: [] }] },
        // { visible: true, code: 'link', cls: 'mr-1 rich-toolbar-icons rich-link', title: '插入链接', value: ['link'] },
        // { visible: true, code: 'removeformat', cls: 'mr-1 rich-toolbar-icons rich-clear', title: '清除格式', value: ['clean'] },
        // { visible: true, code: 'blockquote', cls: 'mr-1 rich-toolbar-icons rich-blockquote', title: '引用', value: ['blockquote'] },
        { visible: true, code: 'code-block', cls: 'mr-1 rich-toolbar-icons rich-code-block', title: '代码块', value: ['code-block'] },
        { visible: true, code: 'header1', cls: 'mr-1 rich-toolbar-icons rich-header1', title: '标题 1', value: [{ header: 1 }] },
        { visible: true, code: 'header2', cls: 'mr-1 rich-toolbar-icons rich-header2', title: '标题 2', value: [{ header: 2 }] },
        { visible: true, code: 'image', cls: 'mr-1 rich-toolbar-icons rich-image', title: '插入图片', value: ['image'] },
    ],
    advanced: [
        {
            visible: true, code: 'undo',
            cls: 'mr-1 f-icon f-icon-undo',
            title: '撤消',
            value: 'undo'
        },
        {
            visible: true, code: 'redo',
            cls: 'mr-1 f-icon f-icon-redo',
            title: '重复',
            value: 'redo'
        },
        {
            visible: true, code: 'formatselect',
            cls: 'mr-1 f-icon f-icon-convert-lowercase',
            title: '段落&标题',
            value: 'formatselect'
        },
        {
            visible: true, code: 'fontselect',
            cls: 'mr-1 f-icon f-icon-font-family',
            title: '字体',
            value: 'fontselect'
        },
        {
            visible: true, code: 'fontsizeselect',
            cls: 'mr-1 f-icon f-icon-font-size',
            title: '字号',
            value: 'fontsizeselect'
        },
        {
            visible: true, code: 'bold',
            cls: 'mr-1 rich-toolbar-icons rich-bold',
            title: '加粗',
            value: 'bold'
        },
        {
            visible: true, code: 'italic',
            cls: 'mr-1 rich-toolbar-icons rich-italic',
            title: '倾斜',
            value: 'italic'
        },
        {
            visible: true, code: 'underline',
            cls: 'mr-1 rich-toolbar-icons rich-underline',
            title: '下划线',
            value: 'underline'
        },
        {
            visible: true, code: 'strike',
            cls: 'mr-1 rich-toolbar-icons rich-strike',
            title: '删除线',
            value: 'strikethrough'
        },
        {
            visible: true, code: 'numlist',
            cls: 'mr-1 rich-toolbar-icons rich-ordered',
            title: '有序列表',
            value: 'numlist'
        },
        {
            visible: true, code: 'bullist',
            cls: 'mr-1 rich-toolbar-icons rich-bullet',
            title: '无序列表',
            value: 'bullist'
        },
        {
            visible: true, code: 'outdent',
            cls: 'mr-1 rich-toolbar-icons rich-indent-1',
            title: '取消缩进',
            value: 'outdent'
        },
        {
            visible: true, code: 'indent',
            cls: 'mr-1 rich-toolbar-icons rich-indent1',
            title: '缩进',
            value: 'indent'
        },
        {
            visible: true, code: 'forecolor',
            cls: 'mr-1 rich-toolbar-icons rich-color',
            title: '文本颜色',
            value: 'forecolor'
        },
        {
            visible: true, code: 'backcolor',
            cls: 'mr-1 rich-toolbar-icons rich-background',
            title: '背景色',
            value: 'backcolor'
        },
        {
            visible: true, code: 'image',
            cls: 'mr-1 rich-toolbar-icons rich-image',
            title: '插入图片',
            value: 'image'
        },
        {
            visible: true, code: 'link',
            cls: 'mr-1 rich-toolbar-icons rich-link',
            title: '插入链接',
            value: 'link'
        },
        {
            visible: true, code: 'removeformat',
            cls: 'mr-1 rich-toolbar-icons rich-clear',
            title: '清除格式',
            value: 'removeformat'
        },
        {
            visible: true, code: 'alignleft',
            cls: 'mr-1 f-icon f-icon-align-left',
            title: '左对齐',
            value: 'alignleft'
        },
        {
            visible: true, code: 'aligncenter',
            cls: 'mr-1 f-icon f-icon-align-center',
            title: '居中对齐',
            value: 'aligncenter'
        },
        {
            visible: true, code: 'alignright',
            cls: 'mr-1 f-icon f-icon-align-right',
            title: '右对齐',
            value: 'alignright'
        },
        {
            visible: true, code: 'alignjustify',
            cls: 'mr-1 f-icon f-icon-align-justify',
            title: '两端对齐',
            value: 'alignjustify'
        },
        {
            visible: true, code: 'table',
            cls: 'mr-1 f-icon f-icon-table',
            title: '表格',
            value: 'table'
        }
    ]
};
/**
 * 将设计时的数据转换为运行时富文本编辑器工具栏所识别的格式
 * @param {?} type
 * @param {?} toolbars
 * @return {?}
 */
function Convert2HtmlEditorToolbars(type, toolbars) {
    if (!toolbars || !toolbars.length) {
        return null;
    }
    /** @type {?} */
    var typ = type.toLowerCase();
    /** @type {?} */
    var tools = toolbars;
    /** @type {?} */
    var allCMDs = RICH_COMMANDS[typ];
    /** @type {?} */
    var toolbarItems = tools.map((/**
     * @param {?} n
     * @return {?}
     */
    function (n) {
        if (typeof n === 'object') {
            n.values = n.values.map((/**
             * @param {?} s
             * @return {?}
             */
            function (s) {
                return allCMDs.find((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.code === s; }));
            })).filter((/**
             * @param {?} t
             * @return {?}
             */
            function (t) { return t; }));
            return n;
        }
        else {
            return allCMDs.find((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.code === n; }));
        }
    })).filter((/**
     * @param {?} t
     * @return {?}
     */
    function (t) { return t; }));
    /** @type {?} */
    var configs = toolbarItems.map((/**
     * @param {?} n
     * @return {?}
     */
    function (n) {
        if (n.groupName) {
            if (typ === 'concise') {
                return n.values.map((/**
                 * @param {?} v
                 * @return {?}
                 */
                function (v) { return v.value; })).flat();
            }
            return n.values.map((/**
             * @param {?} v
             * @return {?}
             */
            function (v) { return v.value; }));
        }
        return n.value;
    })).filter((/**
     * @param {?} n
     * @return {?}
     */
    function (n) { return n.length; }));
    if (typ === 'concise') {
        return configs;
    }
    else if (typ === 'advanced') {
        return configs.map((/**
         * @param {?} n
         * @param {?} i
         * @return {?}
         */
        function (n, i) {
            if (Array.isArray(n)) {
                if (i === 0) {
                    n.push('|');
                }
                if (i > 0) {
                    n.unshift('|');
                }
            }
            return n;
        })).flat().join(' ');
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var WEBAPI_PREFIX_TOKEN = new InjectionToken('web api prefix string.');
/**
 * @param {?} uri
 * @param {?=} perfix
 * @return {?}
 */
function appendPerfixForUri(uri, perfix) {
    if (perfix === void 0) { perfix = ''; }
    if (perfix) {
        perfix = perfix.replace(/\/\//g, '/').replace(/\\/g, '/');
        if (perfix[perfix.length - 1] == '/' && uri[0] == '/') {
            return perfix + uri.substring(1);
        }
        return perfix + uri;
    }
    return uri;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FarrisTemplateDirective, ResizeObserverDirective, FarrisComponentTemplateDirective, CommonUtils, FarrisSafePipe, FarrisCommonModule, IdService, BaseDataFacadeService, RuntimeStateService, FarrisComponentInstanceService, DebugService, OverLayHiddenService, FarrisReplaceXPipe, cancelRequestAnimationFrame, reqAnimFrame, Convert2HtmlEditorToolbars, RICH_COMMANDS, GetValuePipe, appendPerfixForUri, WEBAPI_PREFIX_TOKEN };

//# sourceMappingURL=farris-ui-common.js.map