import { Type } from '@angular/core';
import { EventBusProxy } from './event-bus-proxy';
import { IDisposable, IEmitable, IThenable } from './types';
import { Observable } from 'rxjs';
export declare class EventBus implements IEmitable {
    private proxyMap;
    private eventMap;
    private notificationMap;
    constructor();
    getProxy(ownerType: Type<any>, eventTokenValueProvider: () => any): EventBusProxy;
    /**
     * 发送事件，通知订阅者接收消息。
     */
    post(emitterType: Type<any> | string, tokenValue: string, eventName: string, eventArgs: any): void;
    /**
     * 订阅事件
     */
    on(target: string, tokenValue: string, eventName: string, caller: object, handler: (value: any) => void): IDisposable;
    /**
     * 订阅一次。接收到一次消息之后自动取消订阅
     */
    once(target: string, tokenValue: string, eventName: string, caller: object, handler: (value: any) => void): IDisposable;
    /**
     * 发送一个请求事件，获取监听者的响应并处理
     */
    requestFor(target: string, tokenValue: string, requestName: string, requestValue: any, success: (any: any) => any, fail?: (string: any) => any): void;
    /**
     * 监听一个请求事件，给出响应
     */
    responseOn(responseSubject: string, requestName: string, callback: (any: any) => any): void;
    notify(eventName: string, eventArgs: any): IThenable;
    listen(eventName: string, handler: (value: any) => Observable<boolean> | boolean | void, caller?: object): void;
    private getEventPipe;
    private findExistEventPipe;
}
