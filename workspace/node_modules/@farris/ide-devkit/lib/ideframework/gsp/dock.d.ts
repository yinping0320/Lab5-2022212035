import { Pane } from './pane';
import { Disposable } from './event-kit';
export declare enum DockStyle {
    none = 0,
    left = 1,
    right = 2,
    top = 3,
    bottom = 4
}
export declare class Dock {
    private location;
    private widthOrHeight;
    private viewRegistry;
    private didActivate;
    private paneContainer;
    private state;
    private emitter;
    constructor(params: any);
    elementAttached(): void;
    getElement(): void;
    getLocation(): any;
    destroy(): void;
    setHovered(hovered: any): void;
    setDraggingItem(draggingItem: any): void;
    activate(): void;
    show(): void;
    hide(): void;
    toggle(): void;
    isVisible(): any;
    setState(newState: any): void;
    render(state: any): void;
    handleDidAddPaneItem(): void;
    handleDidRemovePaneItem(): void;
    handleResizeHandleDragStart(): void;
    handleResizeToFit(): void;
    handleMouseMove(event: any): void;
    handleMouseUp(event: any): void;
    pointWithinHoverArea(point: any, detectingExit: any): void;
    getInitialSize(): any;
    serialize(): {
        deserializer: string;
        size: any;
        paneContainer: {
            deserializer: string;
            version: number;
            root: any;
            activePaneId: any;
        };
        visible: any;
    };
    deserialize(serialized: any, deserializerManager: any): void;
    onDidChangeVisible(callback: any): void;
    observeVisible(callback: any): void;
    observePaneItems(callback: any): void;
    onDidChangeActivePaneItem(callback: any): void;
    onDidStopChangingActivePaneItem(callback: any): void;
    observeActivePaneItem(callback: any): void;
    onDidAddPane(callback: any): void;
    onWillDestroyPane(callback: any): void;
    onDidDestroyPane(callback: any): void;
    observePanes(callback: any): void;
    onDidChangeActivePane(callback: any): void;
    observeActivePane(callback: any): void;
    onDidAddPaneItem(callback: any): void;
    onWillDestroyPaneItem(callback: any): void;
    onDidDestroyPaneItem(callback: any): void;
    onDidChangeHovered(callback: any): Disposable;
    getPaneItems(): any[];
    getActivePaneItem(): any;
    saveAll(): void;
    confirmClose(options: any): Promise<boolean>;
    getPanes(): Pane[];
    getActivePane(): Pane;
    activateNextPane(): boolean;
    activatePreviousPane(): boolean;
    paneForURI(uri: any): Pane;
    paneForItem(item: any): Pane;
    destroyActivePane(): void;
}
