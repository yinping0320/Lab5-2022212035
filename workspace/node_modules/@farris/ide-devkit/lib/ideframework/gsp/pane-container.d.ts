import { Pane } from './pane';
export declare class PaneContainer {
    itemRegistry: any;
    alive: boolean;
    viewRegistry: any;
    location: any;
    activePane: any;
    root: any;
    config: any;
    constructor(params: any);
    getLocation(): any;
    getElement(): void;
    destroy(): void;
    isAlive(): boolean;
    isDestroyed(): boolean;
    serialize(...params: any[]): {
        deserializer: string;
        version: number;
        root: any;
        activePaneId: any;
    };
    deserialize(state: any, deserializerManager: any): void;
    onDidChangeRoot(fn: any): void;
    observeRoot(fn: any): void;
    onDidAddPane(fn: any): void;
    observePanes(fn: any): void;
    onDidDestroyPane(fn: any): void;
    onWillDestroyPane(fn: any): void;
    onDidChangeActivePane(fn: any): void;
    onDidActivatePane(fn: any): void;
    observeActivePane(fn: any): void;
    onDidAddPaneItem(fn: any): void;
    observePaneItems(fn: any): void;
    onDidChangeActivePaneItem(fn: any): void;
    onDidStopChangingActivePaneItem(fn: any): void;
    observeActivePaneItem(fn: any): void;
    onWillDestroyPaneItem(fn: any): void;
    onDidDestroyPaneItem(fn: any): void;
    getRoot(): any;
    setRoot(root: any): void;
    replaceChild(oldChild: any, newChild: any): void;
    getPanes(): Pane[];
    getPaneItems(): any[];
    getActivePane(): Pane;
    getActivePaneItem(): any;
    paneForURI(uri: any): Pane;
    paneForItem(item: any): Pane;
    saveAll(): void;
    confirmClose(options: any): Promise<boolean>;
    activateNextPane(): boolean;
    activatePreviousPane(): boolean;
    moveActiveItemToPane(destPane: any): void;
    copyActiveItemToPane(destPane: any): void;
    destroyEmptyPanes(): void;
    didAddPane(event: any): void;
    willDestroyPane(event: any): void;
    didDestroyPane(event: any): void;
    didActivatePane(activePane: any): any;
    didAddPaneItem(item: any, pane: any, index: any): void;
    willDestroyPaneItem(event: any): void;
    didDestroyPaneItem(event: any): void;
    didChangeActiveItemOnPane(pane: any, activeItem: any): void;
    cancelStoppedChangingActivePaneItemTimeout(): void;
}
