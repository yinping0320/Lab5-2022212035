import { Disposable, CompositeDisposable } from './event-kit';
export declare class CommandRegistry {
    private rootNode;
    private registeredCommands;
    private selectorBasedListenersByCommandName;
    private inlineListenersByCommandName;
    private emitter;
    constructor();
    clear(): void;
    attach(rootNode: any): void;
    destroy(): void;
    add(target: any, commandName: any, listener: any, throwOnInvalidSelector?: boolean): Disposable | CompositeDisposable;
    addSelectorBasedListener(selector: any, commandName: any, listener: any): Disposable;
    addInlineListener(element: any, commandName: any, listener: any): Disposable;
    findCommands({ target }: {
        target: any;
    }): any[];
    dispatch(target: any, commandName: any, detail: any): Promise<any[]>;
    onWillDispatch(callback: any): Disposable;
    onDidDispatch(callback: any): Disposable;
    getSnapshot(): {};
    restoreSnapshot(snapshot: any): void;
    handleCommandEvent(event: any): Promise<any[]>;
    commandRegistered(commandName: any): boolean;
}
