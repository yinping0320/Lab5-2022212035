import { Disposable } from './event-kit';
export declare class Pane {
    id: any;
    activeItem: any;
    focused: any;
    applicationDelegate: any;
    notificationManager: any;
    config: any;
    deserializerManager: any;
    viewRegistry: any;
    private emitter;
    alive: boolean;
    subscriptionsPerItem: WeakMap<object, any>;
    items: any[];
    itemStack: any[];
    container: any;
    flexScale: any;
    parent: any;
    itemStackIndex: number;
    pendingItem: any;
    static deserialize(state: any, { deserializers, applicationDelegate, config, notifications, views }: {
        deserializers: any;
        applicationDelegate: any;
        config: any;
        notifications: any;
        views: any;
    }): Pane;
    inspect(): string;
    constructor(params: any);
    getElement(): void;
    serialize(): {
        deserializer: string;
        id: any;
        items: any[];
        itemStackIndices: any[];
        activeItemIndex: number;
        focused: any;
        flexScale: any;
    };
    getParent(): any;
    setParent(parent: any): void;
    getContainer(): any;
    setContainer(container: any): void;
    isItemAllowed(item: any): any;
    setFlexScale(flexScale: any): any;
    getFlexScale(): any;
    increaseSize(): void;
    decreaseSize(): void;
    onDidChangeFlexScale(callback: any): void;
    observeFlexScale(callback: any): void;
    onDidActivate(callback: any): void;
    onWillDestroy(callback: any): void;
    onDidDestroy(callback: any): void;
    onDidChangeActive(callback: any): any;
    observeActive(callback: any): any;
    onDidAddItem(callback: any): Disposable;
    onDidRemoveItem(callback: any): Disposable;
    onWillRemoveItem(callback: any): void;
    onDidMoveItem(callback: any): void;
    observeItems(callback: any): Disposable;
    onDoingChangeActiveItem(callback: any): Disposable;
    onDidChangeActiveItem(callback: any): Disposable;
    onChooseNextMRUItem(callback: any): void;
    onChooseLastMRUItem(callback: any): void;
    onDoneChoosingMRUItem(callback: any): void;
    observeActiveItem(callback: any): Disposable;
    onWillDestroyItem(callback: any): void;
    focus(): void;
    blur(): boolean;
    isFocused(): any;
    getPanes(): this[];
    unsubscribeFromItem(item: any): void;
    getItems(): any[];
    getActiveItem(): any;
    setActiveItem(activeItem?: any, options?: any): any;
    addItemsToStack(itemStackIndices: any): void;
    addItemToStack(newItem: any): number;
    itemAtIndex(index: any): any;
    activateNextRecentlyUsedItem(): void;
    activatePreviousRecentlyUsedItem(): void;
    moveActiveItemToTopOfStack(): void;
    activateNextItem(): void;
    activatePreviousItem(): void;
    activateLastItem(): void;
    moveItemRight(): void;
    moveItemLeft(): void;
    getActiveItemIndex(): number;
    activateItemAtIndex(index: any): any;
    activateItem(item: any, options?: any): void;
    addItem(item: any, options?: any): any;
    setPendingItem(item: any): void;
    getPendingItem(): any;
    clearPendingItem(): void;
    onItemDidTerminatePendingState(callback: any): void;
    addItems(items: any[], index?: number): any[];
    removeItem(item: any, moved?: boolean): void;
    removeItemFromStack(item: any): void;
    moveItem(item: any, newIndex: any): void;
    moveItemToPane(item?: any, pane?: any, index?: any): any;
    destroyActiveItem(): Promise<boolean>;
    destroyItem(item?: any, force?: any): Promise<boolean>;
    destroyItems(): Promise<boolean[]>;
    destroyInactiveItems(): Promise<boolean[]>;
    promptToSaveItem(item: any, options?: {}): Promise<boolean>;
    saveActiveItem(nextAction?: () => any): void | Promise<void>;
    saveActiveItemAs(nextAction?: () => any): void;
    saveItem(item: any, nextAction: any): void | Promise<void>;
    saveItemAs(item: any, nextAction: any): void;
    saveItems(): void;
    itemForURI(uri: any): any;
    activateItemForURI(uri: any): boolean;
    copyActiveItem(): any;
    isActive(): boolean;
    activate(): void;
    destroy(): void;
    isAlive(): boolean;
    isDestroyed(): boolean;
    splitLeft(params: any): Pane;
    splitRight(params: any): Pane;
    splitUp(params: any): Pane;
    splitDown(params: any): Pane;
    split(orientation: any, side: any, params: any): Pane;
    findLeftmostSibling(): any;
    findRightmostSibling(): any;
    findOrCreateRightmostSibling(): any;
    findTopmostSibling(): any;
    findBottommostSibling(): any;
    findOrCreateBottommostSibling(): any;
    close(): Promise<void>;
    handleSaveError(error: any, item: any): void;
    getMessageForErrorCode(errorCode: any): "Permission denied" | "Connection reset" | "Interrupted system call" | "I/O error writing file" | "No space left on device" | "Operation not supported on socket" | "No such device or address" | "Read-only file system" | "Invalid seek" | "Connection timed out";
}
