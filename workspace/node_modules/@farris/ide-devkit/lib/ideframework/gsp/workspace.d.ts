import { PanelContainer } from './panel-container';
import { Panel, PanelOptions } from './panel';
import { Dock } from './dock';
import { WorkspaceCenter } from './workspace-center';
import { PanelLocation } from './types';
import { PaneContainer } from './pane-container';
import { Pane } from './pane';
export interface PaneContainers {
    center: WorkspaceCenter;
    left: Dock;
    right: Dock;
    bottom: Dock;
}
export interface PanelContainers {
    [location: string]: PanelContainer;
}
export declare class Workspace {
    private paneContainers;
    private panelContainers;
    private activePaneContainer;
    private viewRegistry;
    private packageManager;
    private openers;
    private frmOpeners;
    private useFrmOpener;
    private notificationManager;
    private config;
    private destroyedItemURIs;
    private project;
    constructor(params: any);
    private initOptions;
    private initWorkspace;
    readonly paneContainer: PaneContainer;
    /**
     * 返回工作区元素
     */
    getElement(): void;
    /**
     * 创建主面板
     */
    createCenter(): WorkspaceCenter;
    /**
     * 创建停靠面板
     * @param location 停靠面板位置
     */
    createDock(location: any): Dock;
    /**
     * 重置工作区
     * @param packageManager 包管理器
     */
    reset(packageManager: any): void;
    /**
     * 序列化工作区配置
     */
    serialize(): void;
    /**
     * 反序列化工作区配置
     * @param state state
     * @param deserializerManager dm
     */
    deserialize(state: any, deserializerManager: any): void;
    updateWindowTitle(): void;
    open(itemOrURI: any, options?: any): any;
    hide(itemOrURI: any): boolean;
    toggle(itemOrURI: any): any;
    openSync(fileUri?: string, options?: {
        initialColumn: string;
        initialLine: string;
        activateItem: string;
        activatePane: string;
    }): any;
    openURIInPane(uri: any, pane: any): any;
    createItemForURI(uri: any, options: any): any;
    reopenItem(): any;
    addOpener(opener: any): void;
    addFrmOpener(opener: any): void;
    getOpeners(): any[];
    getPaneItems(): any[];
    getActivePaneItem(): any;
    saveAll(): void;
    confirmClose(options: any): Promise<boolean>;
    saveActivePaneItem(): void | Promise<void>;
    saveActivePaneItemAs(): void;
    destroyActivePaneItem(): Promise<boolean>;
    getActivePaneContainer(): Dock | WorkspaceCenter;
    getPanes(): any[];
    getVisiblePanes(): any[];
    getActivePane(): Pane;
    activateNextPane(): boolean;
    activatePreviousPane(): boolean;
    paneContainerForURI(uri: any): Dock | WorkspaceCenter;
    paneContainerForItem(uri: any): Dock | WorkspaceCenter;
    paneForURI(uri: any): Pane;
    paneForItem(item: any): Pane;
    destroyActivePane(): void;
    closeActivePaneItemOrEmptyPaneOrWindow(): void;
    itemOpened(item: any): void;
    destroyed(): void;
    getCenter(): WorkspaceCenter;
    getLeftDock(): Dock;
    getRightDock(): Dock;
    getBottomDock(): Dock;
    getPaneContainers(): (Dock | WorkspaceCenter)[];
    getVisiblePaneContainers(): (Dock | WorkspaceCenter)[];
    getBottomPanels(): Panel[];
    addBottomPanel(options: PanelOptions): Panel;
    getLeftPanels(): Panel[];
    addLeftPanel(options: PanelOptions): Panel;
    getRightPanels(): Panel[];
    addRightPanel(options: PanelOptions): Panel;
    getTopPanels(): Panel[];
    addTopPanel(options: PanelOptions): Panel;
    getHeaderPanels(): Panel[];
    addHeaderPanel(options: PanelOptions): Panel;
    getFooterPanels(): Panel[];
    addFooterPanel(options: PanelOptions): Panel;
    getModalPanels(): Panel[];
    addModalPanel(options: PanelOptions): Panel;
    panelForItem(item: any): Panel;
    getPanelContainer(location: PanelLocation): PanelContainer;
    getPanels(location: PanelLocation): Panel[];
    addPanel(location: PanelLocation, options: PanelOptions): Panel;
}
