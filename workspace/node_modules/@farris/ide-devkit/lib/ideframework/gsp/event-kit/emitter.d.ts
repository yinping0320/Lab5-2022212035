import { Disposable } from './disposable';
export declare class Emitter {
    static exceptionHandlers: any[];
    static dispatch: typeof Emitter.simpleDispatch;
    private disposed;
    private subscriptions;
    private handlersByEventName;
    static onEventHandlerException(exceptionHandler: any): Disposable;
    static simpleDispatch(handler: any, value: any): any;
    static exceptionHandlingDispatch(handler: any, value: any): any;
    constructor();
    clear(): {};
    dispose(): void;
    on(eventName: any, handler: any, unshift?: boolean): Disposable;
    once(eventName: any, handler: any, unshift?: boolean): Disposable;
    preempt(eventName: any, handler: any): void;
    off(eventName: any, handlerToRemove: any): void;
    emit(eventName: any, value: any): void;
    emitAsync(eventName: any, value: any): Promise<any>;
    getEventNames(): string[];
    listenerCountForEventName(eventName: any): any;
    getTotalListenerCount(): number;
}
