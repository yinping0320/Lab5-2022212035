import { TreeNode } from './tree-node';
import { TreeOptions } from './tree-options';
export declare class TreeModel {
    roots: TreeNode[];
    options: TreeOptions;
    static focusedTree: any;
    focusedNode: TreeNode;
    activeNode: TreeNode;
    private events;
    eventNames: string[];
    firstUpdate: boolean;
    _dragNode: {
        parentNode: TreeNode;
        index: number;
    };
    _dropLocation: {
        component: any;
        parentNode: TreeNode;
        index: number;
    };
    setData({ nodes, options, events }: {
        nodes: any;
        options: any;
        events: any;
    }): void;
    virtualRoot: TreeNode;
    update(nodes: any): void;
    addStaticTreeNode(): void;
    createAndAddTreeNode(data: any, parentNode: TreeNode, index?: any): void;
    createTreeNode(data: any, parent: TreeNode): TreeNode;
    addTreeNode(addedNode: TreeNode, parentNode: TreeNode, index?: any): void;
    removeFocusedTreeNode(): void;
    removeTreeNode(selectedTreeNode: TreeNode): void;
    /**
     * 定位指定树节点
     * @param needLocatedNode 待定位节点
     */
    locateTreeNode(needLocatedNode: TreeNode): void;
    /**
     * 通过ID定位树节点
     * @param nodeID 待查找并定位节点的ID
     */
    locateNodeByID(nodeID: string): boolean;
    /**
     * 查找指定树节点
     * @param nodeID 待查找节点ID
     */
    searchTreeNodeByID(nodeID: string): TreeNode;
    /**
     * 在指定集合中，根据ID查找树节点
     * @param nodes 树集合
     * @param nodeID 待查找节点ID
     */
    searchTreeNode(nodes: TreeNode[], nodeID: string): TreeNode;
    private _treeNodeContentComponent;
    readonly treeNodeContentComponent: any;
    _loadTreeNodeContentComponent(): void;
    readonly isFocused: boolean;
    setFocus(value: any): void;
    getFirstRoot(): any;
    getLastRoot(): any;
    focusNextNode(): void;
    focusPreviousNode(): void;
    focusDrillUp(): void;
    focusDrillDown(): void;
    fireEvent(event: any): void;
    /**
     * 判断是否执行移动节点操作，可以移动返回true，否则返回false
     * @param param0 param0.from 待移动节点的原有父节点
     *               param0.to 待移动节点的新父节点
     */
    canMoveNode({ from, to }: {
        from: any;
        to: any;
    }): boolean;
    /**
     * 移动节点
     * @param param0 param0.from 待移动节点的原有父节点
     *               param0.to 待移动节点的新父节点
     */
    moveNode({ from, to }: {
        from: any;
        to: any;
    }): void;
    setDragNode(dragNode: {
        parentNode: TreeNode;
        index: number;
    }): void;
    getDragNode(): {
        parentNode: TreeNode;
        index: number;
    };
    isDragging(): TreeNode;
    setDropLocation(dropLocation: {
        component: any;
        parentNode: TreeNode;
        index: number;
    }): void;
    getDropLocation(): {
        component: any;
        parentNode: TreeNode;
        index: number;
    };
    isDraggingOver(component: any): boolean;
    cancelDrag(): void;
}
