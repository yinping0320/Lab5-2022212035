import { ElementRef, EventEmitter } from '@angular/core';
import { TreeModel } from './tree-model';
import { TreeOptions } from './tree-options';
export declare class TreeNode {
    data: any;
    private _isExpanded;
    isExpanded: boolean;
    readonly isCollapsed: boolean;
    treeModel: TreeModel;
    parent: TreeNode;
    level: number;
    isVirtualRoot: boolean;
    elementRef: ElementRef;
    parentNode: TreeNode;
    _isActive: boolean;
    isActive: boolean;
    changeDisplayField: EventEmitter<any>;
    constructor(data: any, parent: TreeNode, treeModel: TreeModel);
    readonly options: TreeOptions;
    fireEvent(event: any): void;
    idField: any;
    childrenField: any;
    readonly displayField: any;
    typeField: any;
    isExpandedField: any;
    allowDrag(): boolean;
    enableCustomContextMenu(): boolean;
    readonly isRoot: boolean;
    readonly realParent: TreeNode;
    readonly isLeaf: boolean;
    readonly hasChildren: boolean;
    readonly isFocused: boolean;
    getFirstChild(): any;
    getLastChild(): any;
    private _getIndexInParent;
    findAdjacentSibling(steps: any): any;
    findNextSibling(): any;
    findPreviousSibling(): any;
    findNextNode(goInside?: boolean): any;
    findPreviousNode(): any;
    isDescendantOf(node: TreeNode): any;
    toggle(): void;
    private _activate;
    private _deactivate;
    toggleActivated(): void;
    focus(): void;
    blur(): void;
    doublClick(rawEvent: MouseEvent): void;
    contextMenu(rawEvent: MouseEvent): void;
    dropMouseAction($event: any, data?: any): void;
    private _dropEventHandler;
    rightMenuClicked(event: any): void;
}
