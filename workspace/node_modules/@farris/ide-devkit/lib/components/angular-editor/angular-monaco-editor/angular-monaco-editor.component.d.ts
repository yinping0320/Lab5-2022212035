import { NgZone } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { AngularMonacoEditorConfig } from '../model/config';
import { CodeEditorEventService } from '../service/code-editor.event.service';
import { AngularEditorModel } from '../model/types';
import { BaseMonacoEditor } from '../model/base-monaco-editor';
import { AngularMonacoEditorService } from '../service/angular-monaco-editor.service';
export declare const CODE_EDITOR_INPUT_VALUE_ACCESSOR: any;
export declare class AngularMonacoEditorComponent extends BaseMonacoEditor implements ControlValueAccessor {
    private angularMonacoEditorService;
    private zone;
    private editorEventService;
    private angularEditorconfig;
    model: AngularEditorModel;
    private _value;
    constructor(angularMonacoEditorService: AngularMonacoEditorService, zone: NgZone, editorEventService: CodeEditorEventService, angularEditorconfig: AngularMonacoEditorConfig);
    protected initMonaco(options: any): void;
    /**
     * refresh layout when resized the window
     */
    refreshLayoutWhenWindowResize(): void;
    onChangeModelContentHandler(e: any): void;
    onBlurEditorTextHandler(e: any): void;
    onLayoutChangeHandler(e: any): void;
    value: any;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    onControlValueChange: (_: any) => void;
    onControlTouched: () => void;
}
