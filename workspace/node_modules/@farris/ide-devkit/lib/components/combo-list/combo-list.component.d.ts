import { OnInit, EventEmitter, ElementRef, ChangeDetectorRef, Renderer2, AfterViewInit, OnDestroy, Injector } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { ComboService } from './combo.service';
import { InputGroupComponent } from '@farris/ui-input-group';
import { SelectItem } from './combo.interface';
export declare class ComboListComponent implements OnInit, AfterViewInit, OnDestroy, ControlValueAccessor {
    protected el: ElementRef;
    protected cdr: ChangeDetectorRef;
    protected document: any;
    protected render: Renderer2;
    protected comboService: ComboService;
    protected injector: Injector;
    disabled: boolean;
    readonly: boolean;
    editable: boolean;
    placeholder: string;
    panelWidth: number;
    panelHeight: number;
    autoWidth: boolean;
    enableClear: boolean;
    mappingField: string;
    data: any;
    idField: string;
    valueField: string;
    textField: string;
    showPanel: EventEmitter<{}>;
    hidePanel: EventEmitter<{}>;
    clear: EventEmitter<{}>;
    valueChange: EventEmitter<string>;
    selectChange: EventEmitter<any>;
    _cmbPanel: ElementRef;
    cmbPanel: ElementRef;
    input: InputGroupComponent;
    isOpen: boolean;
    groupIcon: string;
    private comboPanelCreated$;
    private destroy$;
    private documentClickEvent;
    ngControl: any;
    displayText: string;
    private value;
    onChange: (value: string | string[]) => void;
    onTouched: () => void;
    constructor(el: ElementRef, cdr: ChangeDetectorRef, document: any, render: Renderer2, comboService: ComboService, injector: Injector);
    onClick(): void;
    private removeDocumentListener;
    onBlur(e: any): void;
    blur(): void;
    focus(): void;
    onClear(): void;
    updateMappingFieldValue(): void;
    updateSelectedValues(): void;
    onValueChange(val: any): void;
    updatePosition(): {
        left: string;
        top: string;
        width: string;
        height: string;
    };
    contains(el: ElementRef, event: any): any;
    creatContainer(): any;
    creatPanel(host: HTMLElement): any;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState?(isDisabled: boolean): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    onSelect(value: SelectItem): void;
    onUnSelected(value: SelectItem): void;
}
