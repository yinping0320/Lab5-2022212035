/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, ViewContainerRef, ComponentFactoryResolver, Output, EventEmitter } from '@angular/core';
import { find, findIndex, merge } from 'lodash-es';
export class WizardComponent {
    /**
     * @param {?} viewContainerRef
     * @param {?} componentFactoryResolver
     */
    constructor(viewContainerRef, componentFactoryResolver) {
        this.viewContainerRef = viewContainerRef;
        this.componentFactoryResolver = componentFactoryResolver;
        this.clickCancelBtn = new EventEmitter();
        this.clickFinishBtn = new EventEmitter();
        this.title = '';
        this.steps = [];
        this.curStepIndex = 0;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.steps && this.steps.length > 0) {
            this.curStep = this.steps[this.curStepIndex];
            this.createStepComponent(this.steps[this.curStepIndex]);
        }
    }
    /**
     * @param {?} step
     * @return {?}
     */
    createStepComponent(step) {
        this.stepContainer.clear();
        /** @type {?} */
        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(step.component);
        this.curComponentRef = this.stepContainer.createComponent(componentFactory);
        this.curComponentRef.instance.data = step.data;
        // 新增步骤
        if (this.curComponentRef.instance.addStep) {
            this.curComponentRef.instance.addStep.subscribe((stepList) => {
                /** @type {?} */
                const curIndex = findIndex(this.steps, this.curStep);
                this.steps.splice(curIndex + 1, 0, ...stepList);
                this.curStep.nextStep = stepList[0].stepId;
                this.curStep.showFinishBtn = false;
                this.curStep.showNextStepBtn = true;
            });
        }
        // 删除步骤
        if (this.curComponentRef.instance.removeStep) {
            this.curComponentRef.instance.removeStep.subscribe((data) => {
                merge(this.curStep, data.curStep);
                data.removeSteps.forEach(removeStep => {
                    /** @type {?} */
                    const index = findIndex(this.steps, removeStep);
                    this.steps.splice(index, 1);
                });
            });
        }
        // 变更步骤
        if (this.curComponentRef.instance.changeStep) {
            this.curComponentRef.instance.changeStep.subscribe((stepList) => {
                stepList.forEach(changeStep => {
                    /** @type {?} */
                    const oldStep = find(this.steps, function (s) { return s.stepId === changeStep.stepId; });
                    merge(oldStep, changeStep);
                });
            });
        }
    }
    /**
     * @param {?} nextStep
     * @return {?}
     */
    jumpStep(nextStep) {
        // 判断跳转方向
        if (nextStep === this.curStep) {
            return;
        }
        /** @type {?} */
        const nextIndex = findIndex(this.steps, function (s) { return s.stepId === nextStep.stepId; });
        if (nextIndex === this.curStepIndex) {
            return;
        }
        if (nextIndex < this.curStepIndex) { // 向前跳
            this.curStep = nextStep;
            this.curStepIndex = nextIndex;
            this.createStepComponent(nextStep);
            return;
        }
        if (nextStep.stepId === this.curStep.nextStep) { // 下一步
            this.nextStep();
            return;
        }
        //  else if (this.finishedSteps.indexOf(nextStep.stepId) > -1) { // 已完成的后续步骤
        //   this.curStep = nextStep;
        //   this.curStepIndex = nextIndex;
        //   this.createStepComponent(nextStep);
        // }
    }
    /**
     * 点击上一步
     * @return {?}
     */
    lastStep() {
        /** @type {?} */
        const self = this;
        this.curStepIndex = findIndex(this.steps, function (s) { return s.nextStep === self.curStep.stepId; });
        this.curStep = this.steps[this.curStepIndex];
        this.createStepComponent(this.curStep);
    }
    /**
     * 点击下一步
     * @return {?}
     */
    nextStep() {
        // 校验
        /** @type {?} */
        const validationFunc = this.curComponentRef.instance.validation;
        if (validationFunc && typeof (validationFunc) === 'function') {
            /** @type {?} */
            const result = validationFunc();
            if (!result) {
                return;
            }
        }
        // 执行各Component定义的nextStepClick事件
        /** @type {?} */
        const clickNextStep = this.curComponentRef.instance.clickNextStep;
        if (clickNextStep && typeof (clickNextStep) === 'function') {
            /** @type {?} */
            const result = clickNextStep();
            if (typeof (result) === 'boolean') {
                this.moveToNextStep(result);
            }
            else {
                result.subscribe(data => {
                    this.moveToNextStep(data);
                });
            }
        }
        else {
            this.moveToNextStep(true);
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    moveToNextStep(data) {
        if (!data) {
            return;
        }
        /** @type {?} */
        const curStep = this.curStep;
        if (curStep.nextStep === '') {
            return;
        }
        // this.finishedSteps.push(curStep.stepId);
        this.curStepIndex = findIndex(this.steps, function (s) { return s.stepId === curStep.nextStep; });
        if (this.curStepIndex > -1) {
            this.curStep = this.steps[this.curStepIndex];
            this.createStepComponent(this.curStep);
        }
    }
    /**
     * 取消
     * @return {?}
     */
    clickCancel() {
        this.clickCancelBtn.emit();
    }
    /**
     * 完成
     * @return {?}
     */
    finishWizard() {
        /** @type {?} */
        const validationFunc = this.curComponentRef.instance.validation;
        if (validationFunc && typeof (validationFunc) === 'function') {
            /** @type {?} */
            const result = validationFunc();
            if (!result) {
                return;
            }
        }
        /** @type {?} */
        const beforeFinish = this.curComponentRef.instance.beforeFinish;
        if (beforeFinish && typeof (beforeFinish) === 'function') {
            /** @type {?} */
            const result = beforeFinish();
            if (!result) {
                return;
            }
        }
        this.clickFinishBtn.emit();
    }
}
WizardComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-wizard',
                template: "<div class=\"stepWizard\">\r\n  <div class=\"createNav d-flex flex-wrap\" *ngIf=\"steps.length>1\">\r\n    <div *ngFor=\"let step of steps\" class=\"d-flex step\" [class.active]=\"curStep.stepId===step.stepId\">\r\n      <div class=\"d-flex\" *ngIf=\"step.show\" (click)=\"jumpStep(step)\">\r\n        <div class=\"stepTitle\">{{step.title}}</div>\r\n        <div class=\"triangle_border_right\">\r\n          <span></span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"content\">\r\n    <perfect-scrollbar [config]=\"{suppressScrollX: true}\">\r\n      <ng-container #stepContainer></ng-container>\r\n    </perfect-scrollbar>\r\n  </div>\r\n\r\n\r\n\r\n  <div class=\"footBtns\">\r\n    <button type=\"button\" class=\"btn btn-outline-secondary btn-sm px-3 mx-2\" *ngIf=\"curStep.showCancelBtn\" (click)=\"clickCancel()\">\u53D6\u6D88</button>\r\n    <button type=\"button\" class=\"btn btn-outline-primary btn-sm px-3 mx-2\" *ngIf=\"curStep.showLastStepBtn\" (click)=\"lastStep()\"\r\n      type=\"submit\">\u4E0A\u4E00\u6B65</button>\r\n    <button type=\"button\" class=\"btn btn-outline-primary btn-sm px-3 mx-2\" *ngIf=\"curStep.showNextStepBtn\" (click)=\"nextStep()\"\r\n      type=\"submit\">\u4E0B\u4E00\u6B65</button>\r\n    <button type=\"button\" class=\"btn btn-outline-primary btn-sm px-3 mx-2\" *ngIf=\"curStep.showFinishBtn\" (click)=\"finishWizard()\">\u5B8C\u6210</button>\r\n  </div>\r\n</div>",
                styles: [":host{position:absolute;top:0;bottom:0;left:0;right:0}.stepWizard{height:100%;display:flex;flex-direction:column}.stepWizard .createNav{background:#e8edf2;height:40px;overflow:hidden}.stepWizard .createNav .stepTitle{padding:0 10px;color:#666;line-height:40px;cursor:pointer;font-size:.875rem}.stepWizard .createNav .step.active .stepTitle{color:#fff;background-color:#346180!important}.stepWizard .createNav .step:not(:first-child).active .stepTitle{margin-left:-17px;padding-left:25px}.stepWizard .createNav .stepTitle.disable{color:#cdcdcf}.stepWizard .createNav .step .triangle_border_right{width:0;height:0;border-width:20px 0 20px 18px;border-style:solid;border-color:transparent transparent transparent #ccc;position:relative}.stepWizard .createNav .step .triangle_border_right span{display:block;width:0;height:0;border-width:20px 0 20px 18px;border-style:solid;border-color:transparent transparent transparent #e8edf2;position:absolute;top:-20px;left:-20px}.stepWizard .createNav .step.active .triangle_border_right{width:0;height:0;border-width:20px 0 20px 20px;border-color:transparent transparent transparent #e8edf2}.stepWizard .createNav .step.active .triangle_border_right span{border-width:20px 0 20px 20px;border-color:transparent transparent transparent #346180!important}.stepWizard .content{flex:1;overflow:auto;font-size:.875rem}.stepWizard .content .ps-content{width:inherit;height:inherit}.stepWizard .footBtns{width:100%;display:flex;align-items:center;justify-content:flex-end;padding:10px 1rem;background:#f4f4f4;border-top:1px solid #ddd}"]
            }] }
];
/** @nocollapse */
WizardComponent.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: ComponentFactoryResolver }
];
WizardComponent.propDecorators = {
    clickCancelBtn: [{ type: Output }],
    clickFinishBtn: [{ type: Output }],
    title: [{ type: Input }],
    steps: [{ type: Input }],
    stepContainer: [{ type: ViewChild, args: ['stepContainer', { read: ViewContainerRef },] }]
};
if (false) {
    /** @type {?} */
    WizardComponent.prototype.clickCancelBtn;
    /** @type {?} */
    WizardComponent.prototype.clickFinishBtn;
    /** @type {?} */
    WizardComponent.prototype.title;
    /** @type {?} */
    WizardComponent.prototype.steps;
    /** @type {?} */
    WizardComponent.prototype.curStep;
    /** @type {?} */
    WizardComponent.prototype.curStepIndex;
    /** @type {?} */
    WizardComponent.prototype.curComponentRef;
    /** @type {?} */
    WizardComponent.prototype.stepContainer;
    /**
     * @type {?}
     * @private
     */
    WizardComponent.prototype.viewContainerRef;
    /**
     * @type {?}
     * @private
     */
    WizardComponent.prototype.componentFactoryResolver;
}
//# sourceMappingURL=data:application/json;base64,