/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, HostBinding, HostListener, Input } from '@angular/core';
import { BsDropdownState } from './dropdown.state';
export class DropdownButtonDirective {
    /**
     * @param {?} _state
     * @param {?} _element
     */
    constructor(_state, _element) {
        this._state = _state;
        this._element = _element;
        this._subscriptions = [];
        this.isDisabled = null;
        // 同步菜单的打开状态
        this._subscriptions.push(this._state.isOpenChange
            .subscribe((value) => this.isOpen = value));
        // 同步菜单的禁用状态
        this._subscriptions.push(this._state.isDisabledChange
            .subscribe((value) => this.isDisabled = value || null));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        if (this.isDisabled) {
            return;
        }
        this._state.onClick.emit(event);
    }
    /**
     * @return {?}
     */
    onHover() {
        if (this.isDisabled) {
            return;
        }
        this._state.onHover.emit();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        for (const sub of this._subscriptions) {
            sub.unsubscribe();
        }
    }
}
DropdownButtonDirective.decorators = [
    { type: Directive, args: [{
                selector: '[dropdownButton]'
            },] }
];
/** @nocollapse */
DropdownButtonDirective.ctorParameters = () => [
    { type: BsDropdownState },
    { type: ElementRef }
];
DropdownButtonDirective.propDecorators = {
    isDisabled: [{ type: HostBinding, args: ['class.disabled',] }, { type: Input }],
    isOpen: [{ type: HostBinding, args: ['attr.aria-expanded',] }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }],
    onHover: [{ type: HostListener, args: ['mouseover',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    DropdownButtonDirective.prototype._subscriptions;
    /** @type {?} */
    DropdownButtonDirective.prototype.isDisabled;
    /** @type {?} */
    DropdownButtonDirective.prototype.isOpen;
    /**
     * @type {?}
     * @private
     */
    DropdownButtonDirective.prototype._state;
    /**
     * @type {?}
     * @private
     */
    DropdownButtonDirective.prototype._element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24tYnV0dG9uLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvaWRlLWRldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2Ryb3Bkb3duL2Ryb3Bkb3duLWJ1dHRvbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFZLE1BQU0sZUFBZSxDQUFDO0FBRWpHLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUtqRCxNQUFNLE9BQU8sdUJBQXVCOzs7OztJQXVCbEMsWUFBb0IsTUFBdUIsRUFDdkIsUUFBb0I7UUFEcEIsV0FBTSxHQUFOLE1BQU0sQ0FBaUI7UUFDdkIsYUFBUSxHQUFSLFFBQVEsQ0FBWTtRQXRCaEMsbUJBQWMsR0FBbUIsRUFBRSxDQUFDO1FBRUosZUFBVSxHQUFZLElBQUksQ0FBQztRQXFCakUsWUFBWTtRQUNaLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWTthQUM5QyxTQUFTLENBQUMsQ0FBQyxLQUFjLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQ3BELENBQUM7UUFDRixZQUFZO1FBQ1osSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0I7YUFDbEQsU0FBUyxDQUFDLENBQUMsS0FBYyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssSUFBSSxJQUFJLENBQUMsQ0FDaEUsQ0FBQztJQUNKLENBQUM7Ozs7O0lBekJELE9BQU8sQ0FBQyxLQUFZO1FBQ2xCLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNuQixPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEMsQ0FBQzs7OztJQUdELE9BQU87UUFDTCxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDbkIsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDN0IsQ0FBQzs7OztJQWNELFdBQVc7UUFDVCxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDckMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ25CO0lBQ0gsQ0FBQzs7O1lBMUNGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsa0JBQWtCO2FBQzdCOzs7O1lBSk8sZUFBZTtZQUZKLFVBQVU7Ozt5QkFXMUIsV0FBVyxTQUFDLGdCQUFnQixjQUFHLEtBQUs7cUJBQ3BDLFdBQVcsU0FBQyxvQkFBb0I7c0JBRWhDLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7c0JBUWhDLFlBQVksU0FBQyxXQUFXOzs7Ozs7O0lBYnpCLGlEQUE0Qzs7SUFFNUMsNkNBQW1FOztJQUNuRSx5Q0FBbUQ7Ozs7O0lBa0J2Qyx5Q0FBK0I7Ozs7O0lBQy9CLDJDQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBFbGVtZW50UmVmLCBIb3N0QmluZGluZywgSG9zdExpc3RlbmVyLCBJbnB1dCwgT25EZXN0cm95fSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtTdWJzY3JpcHRpb259IGZyb20gJ3J4anMvU3Vic2NyaXB0aW9uJztcclxuaW1wb3J0IHtCc0Ryb3Bkb3duU3RhdGV9IGZyb20gJy4vZHJvcGRvd24uc3RhdGUnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbZHJvcGRvd25CdXR0b25dJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgRHJvcGRvd25CdXR0b25EaXJlY3RpdmUgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xyXG5cclxuICBwcml2YXRlIF9zdWJzY3JpcHRpb25zOiBTdWJzY3JpcHRpb25bXSA9IFtdO1xyXG5cclxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmRpc2FibGVkJykgQElucHV0KCkgaXNEaXNhYmxlZDogYm9vbGVhbiA9IG51bGw7XHJcbiAgQEhvc3RCaW5kaW5nKCdhdHRyLmFyaWEtZXhwYW5kZWQnKSBpc09wZW46IGJvb2xlYW47XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQnXSlcclxuICBvbkNsaWNrKGV2ZW50OiBFdmVudCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuaXNEaXNhYmxlZCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLl9zdGF0ZS5vbkNsaWNrLmVtaXQoZXZlbnQpO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignbW91c2VvdmVyJylcclxuICBvbkhvdmVyKCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuaXNEaXNhYmxlZCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLl9zdGF0ZS5vbkhvdmVyLmVtaXQoKTtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX3N0YXRlOiBCc0Ryb3Bkb3duU3RhdGUsXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSBfZWxlbWVudDogRWxlbWVudFJlZikge1xyXG4gICAgLy8g5ZCM5q2l6I+c5Y2V55qE5omT5byA54q25oCBXHJcbiAgICB0aGlzLl9zdWJzY3JpcHRpb25zLnB1c2godGhpcy5fc3RhdGUuaXNPcGVuQ2hhbmdlXHJcbiAgICAgIC5zdWJzY3JpYmUoKHZhbHVlOiBib29sZWFuKSA9PiB0aGlzLmlzT3BlbiA9IHZhbHVlKVxyXG4gICAgKTtcclxuICAgIC8vIOWQjOatpeiPnOWNleeahOemgeeUqOeKtuaAgVxyXG4gICAgdGhpcy5fc3Vic2NyaXB0aW9ucy5wdXNoKHRoaXMuX3N0YXRlLmlzRGlzYWJsZWRDaGFuZ2VcclxuICAgICAgLnN1YnNjcmliZSgodmFsdWU6IGJvb2xlYW4pID0+IHRoaXMuaXNEaXNhYmxlZCA9IHZhbHVlIHx8IG51bGwpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICBmb3IgKGNvbnN0IHN1YiBvZiB0aGlzLl9zdWJzY3JpcHRpb25zKSB7XHJcbiAgICAgIHN1Yi51bnN1YnNjcmliZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuIl19