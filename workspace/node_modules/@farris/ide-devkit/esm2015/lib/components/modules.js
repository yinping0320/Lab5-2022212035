/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { BsDropdownModule } from './dropdown';
import { NgbTabsetModule } from './tabset/tabset.module';
import { NgbNavTabsetModule } from './navtab/navtab.module';
import { NgbAccordionModule } from './accordion/accordion.module';
import { PanelModule } from './panel/panel.module';
/** @type {?} */
const MODULES = [
    BsDropdownModule
];
/** @type {?} */
const NGB_MODULES = [
    NgbTabsetModule,
    NgbNavTabsetModule,
    NgbAccordionModule
];
/** @type {?} */
const IDE_MODULES = [
    PanelModule
];
// @NgModule({
//   imports: [
//     BsDropdownModule.forRoot()
//   ],
//   exports: [BsDropdownModule],
//   schemas: [NO_ERRORS_SCHEMA]
// })
// export class MDBRootModule {
// }
// @NgModule({ exports: [BsDropdownModule] })
// export class MDBBootstrapModule {
//   public static forRoot(): ModuleWithProviders {
//     return { ngModule: MDBRootModule };
//   }
// }
export class NgbRootModule {
}
NgbRootModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    NgbTabsetModule.forRoot(),
                    NgbNavTabsetModule.forRoot(),
                    NgbAccordionModule.forRoot()
                ],
                exports: [
                    NGB_MODULES
                ]
            },] }
];
export class NgbModule {
    /**
     * @return {?}
     */
    static forRoot() { return { ngModule: NgbRootModule }; }
}
NgbModule.decorators = [
    { type: NgModule, args: [{},] }
];
export class IDERootModule {
}
IDERootModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    PanelModule.forRoot()
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvaWRlLWRldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL21vZHVsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBdUIsUUFBUSxFQUFvQixNQUFNLGVBQWUsQ0FBQztBQUNoRixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDOUMsT0FBTyxFQUFFLGVBQWUsRUFBcUIsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RSxPQUFPLEVBQUUsa0JBQWtCLEVBQXdCLE1BQU0sd0JBQXdCLENBQUM7QUFDbEYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDbEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDOztNQUU3QyxPQUFPLEdBQUc7SUFDZCxnQkFBZ0I7Q0FDakI7O01BRUssV0FBVyxHQUFHO0lBQ2xCLGVBQWU7SUFDZixrQkFBa0I7SUFDbEIsa0JBQWtCO0NBQ25COztNQUVLLFdBQVcsR0FBRztJQUNsQixXQUFXO0NBQ1o7Ozs7Ozs7Ozs7Ozs7Ozs7QUE2QkQsTUFBTSxPQUFPLGFBQWE7OztZQVZ6QixRQUFRLFNBQUM7Z0JBQ1IsT0FBTyxFQUFFO29CQUNQLGVBQWUsQ0FBQyxPQUFPLEVBQUU7b0JBQ3pCLGtCQUFrQixDQUFDLE9BQU8sRUFBRTtvQkFDNUIsa0JBQWtCLENBQUMsT0FBTyxFQUFFO2lCQUM3QjtnQkFDRCxPQUFPLEVBQUU7b0JBQ1AsV0FBVztpQkFDWjthQUNGOztBQUtELE1BQU0sT0FBTyxTQUFTOzs7O0lBQ3BCLE1BQU0sQ0FBQyxPQUFPLEtBQTBCLE9BQU8sRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQyxDQUFDOzs7WUFGOUUsUUFBUSxTQUFDLEVBQUU7O0FBVVosTUFBTSxPQUFPLGFBQWE7OztZQUx6QixRQUFRLFNBQUM7Z0JBQ1IsT0FBTyxFQUFFO29CQUNQLFdBQVcsQ0FBQyxPQUFPLEVBQUU7aUJBQ3RCO2FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50TW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSwgTk9fRVJST1JTX1NDSEVNQSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBCc0Ryb3Bkb3duTW9kdWxlIH0gZnJvbSAnLi9kcm9wZG93bic7XHJcbmltcG9ydCB7IE5nYlRhYnNldE1vZHVsZSwgTmdiVGFiQ2hhbmdlRXZlbnQgfSBmcm9tICcuL3RhYnNldC90YWJzZXQubW9kdWxlJztcclxuaW1wb3J0IHsgTmdiTmF2VGFic2V0TW9kdWxlLCBOZ2JOYXZUYWJDaGFuZ2VFdmVudCB9IGZyb20gJy4vbmF2dGFiL25hdnRhYi5tb2R1bGUnO1xyXG5pbXBvcnQgeyBOZ2JBY2NvcmRpb25Nb2R1bGUgfSBmcm9tICcuL2FjY29yZGlvbi9hY2NvcmRpb24ubW9kdWxlJztcclxuaW1wb3J0IHsgUGFuZWxNb2R1bGUgfSBmcm9tICcuL3BhbmVsL3BhbmVsLm1vZHVsZSc7XHJcblxyXG5jb25zdCBNT0RVTEVTID0gW1xyXG4gIEJzRHJvcGRvd25Nb2R1bGVcclxuXTtcclxuXHJcbmNvbnN0IE5HQl9NT0RVTEVTID0gW1xyXG4gIE5nYlRhYnNldE1vZHVsZSxcclxuICBOZ2JOYXZUYWJzZXRNb2R1bGUsXHJcbiAgTmdiQWNjb3JkaW9uTW9kdWxlXHJcbl07XHJcblxyXG5jb25zdCBJREVfTU9EVUxFUyA9IFtcclxuICBQYW5lbE1vZHVsZVxyXG5dO1xyXG5cclxuLy8gQE5nTW9kdWxlKHtcclxuLy8gICBpbXBvcnRzOiBbXHJcbi8vICAgICBCc0Ryb3Bkb3duTW9kdWxlLmZvclJvb3QoKVxyXG4vLyAgIF0sXHJcbi8vICAgZXhwb3J0czogW0JzRHJvcGRvd25Nb2R1bGVdLFxyXG4vLyAgIHNjaGVtYXM6IFtOT19FUlJPUlNfU0NIRU1BXVxyXG4vLyB9KVxyXG4vLyBleHBvcnQgY2xhc3MgTURCUm9vdE1vZHVsZSB7XHJcbi8vIH1cclxuXHJcbi8vIEBOZ01vZHVsZSh7IGV4cG9ydHM6IFtCc0Ryb3Bkb3duTW9kdWxlXSB9KVxyXG4vLyBleHBvcnQgY2xhc3MgTURCQm9vdHN0cmFwTW9kdWxlIHtcclxuLy8gICBwdWJsaWMgc3RhdGljIGZvclJvb3QoKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XHJcbi8vICAgICByZXR1cm4geyBuZ01vZHVsZTogTURCUm9vdE1vZHVsZSB9O1xyXG4vLyAgIH1cclxuLy8gfVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBpbXBvcnRzOiBbXHJcbiAgICBOZ2JUYWJzZXRNb2R1bGUuZm9yUm9vdCgpLFxyXG4gICAgTmdiTmF2VGFic2V0TW9kdWxlLmZvclJvb3QoKSxcclxuICAgIE5nYkFjY29yZGlvbk1vZHVsZS5mb3JSb290KClcclxuICBdLFxyXG4gIGV4cG9ydHM6IFtcclxuICAgIE5HQl9NT0RVTEVTXHJcbiAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdiUm9vdE1vZHVsZSB7XHJcbn1cclxuXHJcbkBOZ01vZHVsZSh7fSlcclxuZXhwb3J0IGNsYXNzIE5nYk1vZHVsZSB7XHJcbiAgc3RhdGljIGZvclJvb3QoKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7IHJldHVybiB7IG5nTW9kdWxlOiBOZ2JSb290TW9kdWxlIH07IH1cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBpbXBvcnRzOiBbXHJcbiAgICBQYW5lbE1vZHVsZS5mb3JSb290KClcclxuICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJREVSb290TW9kdWxlIHtcclxufVxyXG5cclxuLy8gQE5nTW9kdWxlKHsgaW1wb3J0czogSURFX01PRFVMRVMsIGV4cG9ydHM6IElERV9NT0RVTEVTIH0pXHJcbi8vIGV4cG9ydCBjbGFzcyBJREVNb2R1bGUge1xyXG4vLyAgIHN0YXRpYyBmb3JSb290KCk6IE1vZHVsZVdpdGhQcm92aWRlcnMgeyByZXR1cm4geyBuZ01vZHVsZTogSURFUm9vdE1vZHVsZSB9OyB9XHJcbi8vIH0iXX0=