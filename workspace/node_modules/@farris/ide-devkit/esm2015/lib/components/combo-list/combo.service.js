/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
export class ComboService {
    constructor() {
        this.innerData = [];
        this.selected$ = new Subject();
        this.isOpen$ = new BehaviorSubject(false);
        this.data$ = new BehaviorSubject('');
        // initData() {
        //     // this.loadDataTable(this.data || []);
        //     // switch (this.displayType) {
        //     //     case 'TreeList': {
        //     //         this.getData().subscribe(data => this.loadDataTree(data));
        //     //         break;
        //     //     }
        //     //     case 'LIST': {
        //     //         // List
        //     //         this.getData().subscribe(data => this.loadDataTable(data));
        //     //         break;
        //     //     }
        //     //     // case 'LOOKUPLIST': {
        //     //     //     // List
        //     //     //     this.getData().subscribe(data =>
        //     //     //         this.loadLookUpDataTable(data)
        //     //     //     );
        //     //     //     break;
        //     //     // }
        //     //     // case 'LOOKUPTREELIST': {
        //     //     //     // List
        //     //     //     this.getData().subscribe(data => this.loadLookUpDataTree(data));
        //     //     //     break;
        //     //     // }
        //     // }
        // }
        // getData(): Observable<any> {
        //     // if (this.uri) {
        //     //     const params = {};
        //     //     this.showLoading();
        //     //     if (this.comboHttp) {
        //     //         return this.comboHttp.getData(this.uri);
        //     //     } else {
        //     //         return this.http.get(this.uri);
        //     //     }
        //     // } else {
        //         if (this.data) {
        //             return of(this.data);
        //         } else {
        //             return of([]);
        //         }
        //     // }
        // }
        // loadDataTable(data: any) {
        //     if (data instanceof Array) {
        //         this.data = data;
        //     } else {
        //         this.data = data.returnValue;
        //     }
        //     this.loadData(this.data, this.selectedValues, (dataArr, val) => {
        //         // tslint:disable-next-line:triple-equals
        //         return dataArr.find(d => d[this.idField] + '' == val);
        //     });
        //     // this.closeLoading();
        // }
        // loadDataTree(data: any) {
        //     if (data instanceof Array) {
        //         this.data = data;
        //     } else {
        //         this.data = data.returnValue;
        //     }
        //     this.loadData(this.data, this.selectedValues, (dataArr, val) => {
        //         return eachData(dataArr, val, this.idField);
        //         function eachData(paramData, paramVal, idField) {
        //             let rtnData: any = '';
        //             paramData.find(d => {
        //                 // tslint:disable-next-line:triple-equals
        //                 if (d.data[idField] == paramVal) {
        //                     rtnData = d.data;
        //                     return true;
        //                 } else if (d.children && d.children.length) {
        //                     rtnData = eachData(d.children, paramVal, idField);
        //                 } else {
        //                     return false;
        //                 }
        //             });
        //             return rtnData;
        //         }
        //     });
        //     // this.closeLoading();
        // }
        // loadLookUpDataTable(resData: any) {
        //     if (resData.returnValue) {
        //         resData = resData.returnValue;
        //     }
        //     this.columns = resData.columns;
        //     this.pageInfo = resData.pageInfo;
        //     this.data = resData.items;
        //     this.loadData(this.data, this.selectedValues, (dataArr, val) => {
        //         // tslint:disable-next-line: triple-equals
        //         return dataArr.find(d => d[this.idField] + '' == val);
        //     });
        //     this.closeLoading();
        // }
        // loadLookUpDataTree(resData: any) {
        //     if (resData.returnValue) {
        //         resData = resData.returnValue;
        //     }
        //     this.columns = resData.columns;
        //     const treeInfo = resData.treeInfo;
        //     // tslint:disable-next-line: no-string-literal
        //     if (!treeInfo['treeDataIsInit']) {
        //         if (treeInfo.layerType.toLowerCase() === 'pathcode') {
        //             this.data = this.lookupUtils.makeTree(resData.items, treeInfo);
        //         } else {
        //             this.data = this.lookupUtils.makeTreeWithParentID(
        //                 resData.items,
        //                 '',
        //                 `${treeInfo.dataField}.${treeInfo.parentField}`,
        //                 this.idField
        //             );
        //         }
        //     }
        //     this.loadData(this.data, this.selectedValues, (dataArr, val) => {
        //         return eachData(dataArr, val, this.idField);
        //         function eachData(paramData, paramVal, idField) {
        //             let rtnData: any = '';
        //             paramData.find(d => {
        //                 // tslint:disable-next-line:triple-equals
        //                 if (d.data[idField] == paramVal) {
        //                     rtnData = d.data;
        //                     return true;
        //                 } else if (d.children && d.children.length) {
        //                     rtnData = eachData(d.children, paramVal, idField);
        //                 } else {
        //                     return false;
        //                 }
        //             });
        //             return rtnData;
        //         }
        //     });
        //     this.closeLoading();
        // }
        // private showLoading() {
        //     this.loading = this.loadingService.show();
        // }
        // closeLoading() {
        //     if (this.loading) {
        //         this.loading.close();
        //         this.loading = null;
        //     }
        // }
    }
    /**
     * @return {?}
     */
    get data() {
        return this.innerData;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set data(val) {
        this.innerData = val;
        this.data$.next(val);
    }
    // columns: any;
    // injectService() {
    //     if (this.injector && !this.comboHttp) {
    //         this.lookupUtils = this.injector.get(LookupUtils, null);
    //         if (this.displayType.indexOf('LOOKUP') > -1) {
    //             this.comboHttp = this.injector.get(ServerSideToken, null);
    //         } else {
    //             this.comboHttp = this.injector.get(ComboServerSideToken, null);
    //         }
    //     }
    // }
    /**
     * @param {?} value
     * @return {?}
     */
    toBoolean(value) {
        return value != null && `${value}` !== 'false';
    }
    /**
     * @param {?} data
     * @param {?=} index
     * @return {?}
     */
    selectItem(data, index) {
        this.isOpen$.next(false);
        this.selectedValue = data;
        this.selected$.next(this.selectedValue);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    unSelectItem(data) {
        this.selectedValue = null;
        this.selected$.next(null);
    }
    /**
     * @param {?} id
     * @return {?}
     */
    isSelect(id) {
        return false;
    }
    // loadData(data: any, selectValues: string = '', callback) {
    //     if (data) {
    //         if (selectValues) {
    //             if (selectValues.split) {
    //                 // key 是字符串，可能是拼起来的
    //                 const selectedItems = selectValues.split(',').map(val => {
    //                     return callback(data, val);
    //                 });
    //
    //                 this.selections = selectedItems;
    //             } else {
    //                 // key不可split
    //                 this.selections = [selectValues];
    //             }
    //         } else {
    //             this.selections = [];
    //         }
    //         // this.selections$.next(this.selections);
    //         // const _data = this.initData(data);
    //         // this.updateState({...this._state, data: _data});
    //     } else {
    //         // this.updateState({ data: [], selections: [] });
    //     }
    // }
    // filterData(val: string, filed: any = 'text') {
    //     if (val) {
    //         const data = this.data
    //             ? this.data.filter(item => {
    //                 if (item[filed]) {
    //                     return String(item[filed]).indexOf(val) > -1;
    //                 } else if (item.data && item.data[filed]) {
    //                     return String(item.data[filed]).indexOf(val) > -1;
    //                 }
    //               })
    //             : [];
    //         this.data$.next(data);
    //     }
    // }
    /**
     * @return {?}
     */
    getSelected() {
        return this.selectedValue;
    }
    // filterSelections(displayText: string) {
    //     if (displayText && this.selections) {
    //         const selections = displayText
    //             .split(',')
    //             .map(val => {
    //                 return this.selections.find(d => d[this.textField] === val);
    //             })
    //             .filter(val => !!val);
    //         this.selectedValues = this.getValue(this.valueField, selections);
    //         this.selections = selections;
    //     }
    // }
    // clearSelections() {
    //     this.selections = [];
    // }
    /**
     * @param {?} prop
     * @param {?=} selections
     * @return {?}
     */
    getValue(prop, selections) {
        // selections = selections ? selections : this.selections;
        // if (selections && selections.length) {
        //     // if (this.mapFields) {
        //     //     const helpFields = Object.keys(this.mapFields);
        //     //     helpFields.forEach( (f: any) => {
        //     //         if (this.mapFields[f] === prop) {
        //     //             prop = f;
        //     //             return;
        //     //         }
        //     //     });
        //     // }
        //
        //     // if (selections.length === 1) {
        //     //     return this.getValueByObj(prop, selections[0]);
        //     // }
        //
        //     const tmp = selections
        //         .map(item => {
        //             return this.getValueByObj(prop, item);
        //         })
        //         .join(',');
        //     return tmp;
        // }
        if (this.selectedValue) {
            return this.getValueByObj(prop, this.selectedValue);
        }
        return '';
    }
    /**
     * @param {?} field
     * @param {?} data
     * @return {?}
     */
    getValueByObj(field, data) {
        if (!data) {
            return '';
        }
        /** @type {?} */
        let resultVal = '';
        if (field.indexOf('.') === -1) {
            resultVal = data[field];
        }
        else {
            resultVal = field.split('.').reduce((obj, key) => {
                if (obj) {
                    return obj[key];
                }
                else {
                    return null;
                }
            }, data);
        }
        return resultVal;
    }
}
ComboService.decorators = [
    { type: Injectable }
];
if (false) {
    /** @type {?} */
    ComboService.prototype.idField;
    /** @type {?} */
    ComboService.prototype.valueField;
    /** @type {?} */
    ComboService.prototype.textField;
    /** @type {?} */
    ComboService.prototype.mapFields;
    /**
     * @type {?}
     * @private
     */
    ComboService.prototype.innerData;
    /** @type {?} */
    ComboService.prototype.selectedValue;
    /** @type {?} */
    ComboService.prototype.selected$;
    /** @type {?} */
    ComboService.prototype.isOpen$;
    /** @type {?} */
    ComboService.prototype.data$;
}
//# sourceMappingURL=data:application/json;base64,