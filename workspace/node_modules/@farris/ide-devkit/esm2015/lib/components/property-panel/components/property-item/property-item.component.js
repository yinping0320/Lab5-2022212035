/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ComponentFactoryResolver, Injector, ElementRef, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';
import { PropertyEntity } from '../../entity/property-entity';
import { BsModalService } from '@farris/ui-modal';
import { NotifyService } from '@farris/ui-notify';
export class PropertyItemComponent {
    /**
     * @param {?} resolver
     * @param {?} modalService
     * @param {?} injector
     * @param {?} notifyServ
     * @param {?} el
     */
    constructor(resolver, modalService, injector, notifyServ, el) {
        this.resolver = resolver;
        this.modalService = modalService;
        this.injector = injector;
        this.notifyServ = notifyServ;
        this.el = el;
        this.valueChanged = new EventEmitter();
        this.submitModal = new EventEmitter();
        // 向上触发整体面板刷新
        this.triggerRefreshPanel = new EventEmitter();
        // 下拉框的枚举项
        this.selectOptions = [];
        // 控件类型
        this.itemType = 'string';
        // 数字控件精度
        this.precision = 2;
        // 已废弃
        this.showClearButton = false;
        // 默认值
        this.showDefaultValue = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.refresh();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // this.refresh();
    }
    /**
     * @return {?}
     */
    refresh() {
        /** @type {?} */
        let tmpl;
        // 显示格式
        /** @type {?} */
        const propertyType = this.itemType = this.elementConfig.propertyType;
        switch (propertyType) {
            case 'boolean': {
                this.itemType = 'select';
                this.selectOptions = [{ key: true, value: 'true' }, { key: false, value: 'false' }];
                tmpl = this.selectTmpl;
                break;
            }
            case 'select': {
                this.selectOptions = this.elementConfig.iterator || [];
                tmpl = this.selectTmpl;
                break;
            }
            case 'multiSelect': {
                this.selectOptions = this.elementConfig.iterator || [];
                if (this.elementConfig.multiSelectDataType === 'array') {
                    this.elementValue = this.elementValue ? this.elementValue.toString() : '';
                }
                tmpl = this.multiSelectTmpl;
                break;
            }
            case 'modal': {
                this._convertModalShowValue(this.elementValue);
                tmpl = this.modalTmpl;
                break;
            }
            case 'number': {
                this.precision = this.elementConfig.decimals === undefined ? 2 : this.elementConfig.decimals;
                tmpl = this.numberTmpl;
                break;
            }
            case 'string': {
                if (this.elementConfig.readonly) {
                    this._convertModalShowValue(this.elementValue);
                }
                tmpl = this.stringTmpl;
                break;
            }
            case 'boolOrExp': {
                this.selectOptions = [{ key: true, value: 'true' }, { key: false, value: 'false' }];
                tmpl = this.boolOrExpTmpl;
                break;
            }
            case 'date': {
                tmpl = this.dateTmpl;
                break;
            }
            case 'datetime': {
                tmpl = this.datetimeTmpl;
                break;
            }
        }
        // 默认值
        if (Object.keys(this.elementConfig).indexOf('defaultValue') > -1) {
            if (this.elementValue === undefined || this.elementValue === null) {
                this.elementValue = this.elementConfig.defaultValue;
            }
            this.showDefaultValue = true;
        }
        // 是否显示
        if (Object.keys(this.elementConfig).indexOf('visible') < 0) {
            this.elementConfig.visible = true;
        }
        // 创建模板
        if (tmpl && (this.propItem.length === 0 || this.propertyOldType !== this.itemType)) {
            this.propItem.clear();
            this.propItem.createEmbeddedView(tmpl);
            this.propertyOldType = this.itemType;
        }
    }
    /**
     * 鼠标移入 --已废弃
     * @return {?}
     */
    onmouseover() {
        if (!this.elementConfig.showClearButton) {
            return;
        }
        if (!this.showClearButton) {
            this.showClearButton = true;
        }
    }
    /**
     * 鼠标离开 --已废弃
     * @return {?}
     */
    onmouseleave() {
        if (!this.elementConfig.showClearButton) {
            return;
        }
        this.showClearButton = false;
    }
    /**
     * 清除模态框内容
     * @return {?}
     */
    modalClear() {
        // 数据转换
        this._convertModalShowValue(null);
        // 若有清除后事件，先执行方法
        if (Object.keys(this.elementConfig).indexOf('afterClickClearButton') > -1 &&
            typeof (this.elementConfig.afterClickClearButton) === 'function') {
            this.elementConfig.afterClickClearButton(this.elementValue);
        }
        /** @type {?} */
        const changeObject = {
            propertyID: this.elementConfig.propertyID,
            propertyValue: null
        };
        this.submitModal.emit({ changeObject, parameters: null });
    }
    /**
     * 变更属性值
     * @param {?} e
     * @return {?}
     */
    changeValue(e) {
        /** @type {?} */
        let value = this.elementValue;
        // 文本控件限制输入字符
        if (value && this.elementConfig.propertyType === 'string' && !this.elementConfig.readonly &&
            this.elementConfig.notAllowedChars && this.elementConfig.notAllowedChars.length) {
            this.elementConfig.notAllowedChars.forEach((c) => {
                if (typeof (c) === 'object') {
                    value = value.replace(c, '');
                }
                else if (typeof (c) === 'string') {
                    value = value.replace(new RegExp(c, 'g'), '');
                }
            });
            this.elementValue = value;
        }
        // 多选控件返回数组格式的数据
        if (this.itemType === 'multiSelect' && this.elementConfig.multiSelectDataType === 'array') {
            value = this.elementValue ? this.elementValue.split(',') : '';
        }
        /** @type {?} */
        const changeObject = {
            propertyID: this.elementConfig.propertyID,
            propertyValue: value
        };
        this.valueChanged.emit({ changeObject });
        if (this.elementConfig.refreshPanelAfterChanged) {
            this.triggerRefreshPanel.emit();
        }
    }
    /**
     * farris 日期控件的变更事件
     * @param {?} e e
     * @return {?}
     */
    changeDateValue(e) {
        /** @type {?} */
        const value = e.formatted;
        /** @type {?} */
        const changeObject = {
            propertyID: this.elementConfig.propertyID,
            propertyValue: value
        };
        this.valueChanged.emit({ changeObject });
        if (this.elementConfig.refreshPanelAfterChanged) {
            this.triggerRefreshPanel.emit();
        }
    }
    /**
     * 自定义编辑器使用模态框打开
     * @return {?}
     */
    openModal() {
        if (this.elementConfig.readonly) {
            return;
        }
        if (Object.keys(this.elementConfig).indexOf('beforeOpenModal') > -1 && typeof (this.elementConfig.beforeOpenModal) === 'function') {
            /** @type {?} */
            const result = this.elementConfig.beforeOpenModal();
            if (result && !result.result) {
                this.notifyServ.warning((/** @type {?} */ ({
                    title: '系统提示', msg: result.message, timeout: 3000
                })));
                return;
            }
        }
        this.createEditorComponent();
    }
    /**
     * 创建自定义编辑器
     * @private
     * @return {?}
     */
    createEditorComponent() {
        /** @type {?} */
        const editor = this.elementConfig.editor;
        if (!editor) {
            return;
        }
        // 创建模态框组件
        /** @type {?} */
        const compFactory = this.resolver.resolveComponentFactory(editor);
        /** @type {?} */
        const compRef = compFactory.create(this.injector);
        compRef.instance.value = this.elementValue;
        if (this.elementConfig.editorParams) { // 编辑器需要的额外参数
            compRef.instance.editorParams = this.elementConfig.editorParams;
        }
        /** @type {?} */
        let modalConfig = compRef.instance.modalConfig;
        if (!modalConfig) {
            modalConfig = {
                title: '属性配置',
                width: 800,
                height: 400,
                showButtons: false
            };
        }
        else if (modalConfig.showButtons) {
            modalConfig.buttons = compRef.instance.modalFooter;
        }
        /** @type {?} */
        const dialog = this.modalService.show(compRef, modalConfig);
        // 监听关闭模态框
        if (compRef.instance.closeModal && compRef.instance.closeModal instanceof EventEmitter) {
            compRef.instance.closeModal.subscribe((data) => {
                // 数据转换
                if (data) {
                    this._convertModalShowValue(data);
                    /** @type {?} */
                    const changeObject = {
                        propertyID: this.elementConfig.propertyID,
                        propertyValue: data
                    };
                    this.valueChanged.emit({ changeObject });
                }
                dialog.close();
            });
        }
        // 弹出框关闭事件，带参数，格式为{ value, parameters }
        if (compRef.instance.submitModal && compRef.instance.submitModal instanceof EventEmitter) {
            compRef.instance.submitModal.subscribe(data => {
                if (!data) {
                    dialog.close();
                    return;
                }
                const { value, parameters } = data;
                // 数据转换
                this._convertModalShowValue(value);
                /** @type {?} */
                const changeObject = {
                    propertyID: this.elementConfig.propertyID,
                    propertyValue: value
                };
                this.submitModal.emit({ changeObject, parameters });
                dialog.close();
            });
        }
    }
    /**
     * 模态框场景下将属性值转换为输入框中显示的值
     * @private
     * @param {?} value
     * @return {?}
     */
    _convertModalShowValue(value) {
        if (this.elementConfig.converter) {
            this.elementShowValue = this.elementConfig.converter.convertTo(value);
            return;
        }
        if (value && value instanceof Object) {
            this.elementShowValue = JSON.stringify(value);
            return;
        }
        this.elementShowValue = value;
    }
}
PropertyItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'webide-property-item',
                template: "<div class=\"farris-group-wrap property-item\" [hidden]=\"!elementConfig.visible\">\r\n  <div class=\"form-group farris-form-group\">\r\n    <label class=\"col-form-label\">\r\n      <span class=\"farris-label-text\" [popover]=\"popTemplate\" [popoverTitle]=\"elementConfig.propertyName\"\r\n        container=\"body\" placement=\"left\" triggers=\"hover\">{{elementConfig.propertyName}}</span>\r\n    </label>\r\n    <!-- <label class=\"col-form-label\">\r\n      <span class=\"farris-label-text\" farrisPopover [popover]=\"popTemplate\" container=\"body\"\r\n        triggers=\"hover\">{{elementConfig.propertyName}}</span>\r\n    </label> -->\r\n    <!-- <label class=\"col-form-label\">\r\n      <span class=\"farris-label-text\">{{elementConfig.propertyName}}</span>\r\n    </label> -->\r\n\r\n\r\n    <ng-container #propItem> </ng-container>\r\n\r\n    <!--\u6587\u672C-->\r\n    <ng-template #stringTmpl>\r\n      <div class=\"farris-input-wrap\">\r\n        <input type=\"input\" class=\"form-control form-control-sm\" [(ngModel)]=\"elementValue\" (blur)=\"changeValue($event)\"\r\n          *ngIf=\"!elementConfig.readonly\">\r\n        <input type=\"input\" class=\"form-control form-control-sm\" [(ngModel)]=\"elementShowValue\" [readonly]=\"'readonly'\"\r\n          *ngIf=\"elementConfig.readonly\">\r\n      </div>\r\n    </ng-template>\r\n\r\n    <ng-template #numberTmpl>\r\n      <!-- \u6570\u5B57-->\r\n      <div class=\"farris-input-wrap\">\r\n        <farris-number-spinner [(ngModel)]=\"elementValue\" [readonly]=\"elementConfig.readonly\" [precision]=\"precision\"\r\n          [autoDecimal]=\"true\" [min]=\"elementConfig.min\" [max]=\"elementConfig.max\" [canNull]=\"true\"\r\n          [bigNumber]=\"elementConfig.isBigNumber\" (ngModelChange)=\"changeValue($event)\">\r\n        </farris-number-spinner>\r\n      </div>\r\n    </ng-template>\r\n\r\n    <!--\u4E0B\u62C9\u5217\u8868-->\r\n    <ng-template #selectTmpl>\r\n      <div class=\"farris-input-wrap\">\r\n        <farris-combo-list [(ngModel)]=\"elementValue\" [idField]=\"'key'\" [textField]=\"'value'\" [data]=\"selectOptions\"\r\n          [readonly]=\"elementConfig.readonly\" [editable]=\"false\" [enableClear]=\"false\" [enableCancelSelected]=\"false\"\r\n          (valueChange)=\"changeValue($event)\">\r\n        </farris-combo-list>\r\n      </div>\r\n    </ng-template>\r\n\r\n    <!--\u53EF\u7F16\u8F91\u7684\u4E0B\u62C9\u5217\u8868\uFF08\u6B64\u5904\u662F\u6539\u52A8\u540E\u7684farris combolist\uFF0Cfarris combolist\uFF09-->\r\n    <ng-template #boolOrExpTmpl>\r\n      <div class=\"farris-input-wrap\">\r\n        <farris-editable-combo-list [data]=\"selectOptions\" textField=\"value\" idField=\"key\" [(ngModel)]=\"elementValue\"\r\n          (valueChange)=\"changeValue($event)\" [editable]=\"true\" [readonly]=\"elementConfig.readonly?true:false\">\r\n        </farris-editable-combo-list>\r\n      </div>\r\n    </ng-template>\r\n\r\n    <!--\u4E0B\u62C9\u591A\u9009-->\r\n    <ng-template #multiSelectTmpl>\r\n      <div class=\"farris-input-wrap\">\r\n        <farris-combo-list [(ngModel)]=\"elementValue\" [idField]=\"'key'\" [textField]=\"'value'\" [data]=\"selectOptions\"\r\n          [readonly]=\"elementConfig.readonly\" [editable]=\"false\" [multiSelect]=\"true\" [enableClear]=\"false\"\r\n          (ngModelChange)=\"changeValue($event)\">\r\n        </farris-combo-list>\r\n      </div>\r\n    </ng-template>\r\n\r\n    <!--\u65E5\u671F-->\r\n    <ng-template #dateTmpl>\r\n      <div class=\"farris-input-wrap\">\r\n        <farris-datepicker [(ngModel)]=\"elementValue\" [editable]=\"false\" [showTime]=\"false\" [dateFormat]=\"'yyyy-MM-dd'\"\r\n          [readonly]=\"elementConfig.readonly\" (valueChange)=\"changeDateValue($event)\" [returnType]=\"'string'\"\r\n          [maxDate]=\"elementConfig.max\" [minDate]=\"elementConfig.min\">\r\n        </farris-datepicker>\r\n      </div>\r\n    </ng-template>\r\n\r\n\r\n    <!-- \u65E5\u671F\u65F6\u95F4 -->\r\n    <ng-template #datetimeTmpl>\r\n      <div class=\"farris-input-wrap\">\r\n        <farris-datepicker [(ngModel)]=\"elementValue\" [editable]=\"false\" [showTime]=\"true\"\r\n          [dateFormat]=\"'yyyy-MM-dd HH:mm:ss'\" [readonly]=\"elementConfig.readonly\"\r\n          (valueChange)=\"changeDateValue($event)\" [returnType]=\"'string'\" [maxDate]=\"elementConfig.max\"\r\n          [minDate]=\"elementConfig.min\">\r\n        </farris-datepicker>\r\n      </div>\r\n    </ng-template>\r\n\r\n\r\n    <!-- \u6A21\u6001\u6846 -->\r\n    <ng-template #modalTmpl>\r\n      <div class=\"farris-input-wrap modalIcon\">\r\n        <input type=\"input\" class=\"form-control form-control-sm\" [(ngModel)]=\"elementShowValue\" readonly>\r\n        <span *ngIf=\"elementConfig.showClearButton && !elementConfig.readonly\" class=\"showClearButton\"\r\n          (click)=\"modalClear()\">\r\n          <i class=\"material-icons clearIcon\">close</i>\r\n        </span>\r\n        <i class=\"material-icons moreIcon\" (click)=\"openModal()\">filter_none</i>\r\n      </div>\r\n    </ng-template>\r\n\r\n  </div>\r\n</div>\r\n\r\n\r\n<ng-template #popTemplate>\r\n  <div *ngIf=\"elementConfig.propertyID\">\r\n    <span>\u7F16\u53F7\uFF1A </span> {{elementConfig.propertyID}}</div>\r\n  <div *ngIf=\"elementConfig.description\">\r\n    <span>\u63CF\u8FF0\uFF1A </span> {{elementConfig.description}}</div>\r\n</ng-template>",
                styles: [".property-item .form-group{margin-bottom:2px}.property-item .modalIcon .showClearButton{display:none}.property-item .modalIcon:hover .showClearButton{display:block}.property-item .modalIcon input{padding-right:30px}.property-item .modalIcon .moreIcon{position:absolute;top:6px;right:6px;cursor:pointer;font-size:16px;color:#758a96}.property-item .modalIcon .clearIcon{position:absolute;top:5px;right:30px;cursor:pointer;font-size:19px;color:#758a96}.property-item .form-control[readonly]{background-color:#fff}.property-item .form-control:disabled,.property-item .form-control[readonly]{color:#4b4c4c}"]
            }] }
];
/** @nocollapse */
PropertyItemComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: BsModalService },
    { type: Injector },
    { type: NotifyService },
    { type: ElementRef }
];
PropertyItemComponent.propDecorators = {
    elementConfig: [{ type: Input }],
    elementValue: [{ type: Input }],
    valueChanged: [{ type: Output }],
    submitModal: [{ type: Output }],
    triggerRefreshPanel: [{ type: Output }],
    propItem: [{ type: ViewChild, args: ['propItem', { read: ViewContainerRef },] }],
    stringTmpl: [{ type: ViewChild, args: ['stringTmpl',] }],
    numberTmpl: [{ type: ViewChild, args: ['numberTmpl',] }],
    selectTmpl: [{ type: ViewChild, args: ['selectTmpl',] }],
    boolOrExpTmpl: [{ type: ViewChild, args: ['boolOrExpTmpl',] }],
    multiSelectTmpl: [{ type: ViewChild, args: ['multiSelectTmpl',] }],
    dateTmpl: [{ type: ViewChild, args: ['dateTmpl',] }],
    datetimeTmpl: [{ type: ViewChild, args: ['datetimeTmpl',] }],
    modalTmpl: [{ type: ViewChild, args: ['modalTmpl',] }]
};
if (false) {
    /** @type {?} */
    PropertyItemComponent.prototype.elementConfig;
    /** @type {?} */
    PropertyItemComponent.prototype.elementValue;
    /** @type {?} */
    PropertyItemComponent.prototype.valueChanged;
    /** @type {?} */
    PropertyItemComponent.prototype.submitModal;
    /** @type {?} */
    PropertyItemComponent.prototype.triggerRefreshPanel;
    /** @type {?} */
    PropertyItemComponent.prototype.propItem;
    /** @type {?} */
    PropertyItemComponent.prototype.stringTmpl;
    /** @type {?} */
    PropertyItemComponent.prototype.numberTmpl;
    /** @type {?} */
    PropertyItemComponent.prototype.selectTmpl;
    /** @type {?} */
    PropertyItemComponent.prototype.boolOrExpTmpl;
    /** @type {?} */
    PropertyItemComponent.prototype.multiSelectTmpl;
    /** @type {?} */
    PropertyItemComponent.prototype.dateTmpl;
    /** @type {?} */
    PropertyItemComponent.prototype.datetimeTmpl;
    /** @type {?} */
    PropertyItemComponent.prototype.modalTmpl;
    /** @type {?} */
    PropertyItemComponent.prototype.propertyOldType;
    /** @type {?} */
    PropertyItemComponent.prototype.elementShowValue;
    /** @type {?} */
    PropertyItemComponent.prototype.selectOptions;
    /** @type {?} */
    PropertyItemComponent.prototype.itemType;
    /** @type {?} */
    PropertyItemComponent.prototype.precision;
    /** @type {?} */
    PropertyItemComponent.prototype.showClearButton;
    /** @type {?} */
    PropertyItemComponent.prototype.showDefaultValue;
    /**
     * @type {?}
     * @private
     */
    PropertyItemComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    PropertyItemComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    PropertyItemComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    PropertyItemComponent.prototype.notifyServ;
    /** @type {?} */
    PropertyItemComponent.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVydHktaXRlbS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2lkZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wcm9wZXJ0eS1wYW5lbC9jb21wb25lbnRzL3Byb3BlcnR5LWl0ZW0vcHJvcGVydHktaXRlbS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQVUsS0FBSyxFQUFFLE1BQU0sRUFDaEMsWUFBWSxFQUFFLHdCQUF3QixFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQWtCLFdBQVcsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQ3ZILE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbEQsT0FBTyxFQUFFLGFBQWEsRUFBaUIsTUFBTSxtQkFBbUIsQ0FBQztBQU9qRSxNQUFNLE9BQU8scUJBQXFCOzs7Ozs7OztJQTRDaEMsWUFDVSxRQUFrQyxFQUFVLFlBQTRCLEVBQ3hFLFFBQWtCLEVBQVUsVUFBeUIsRUFBUyxFQUFjO1FBRDVFLGFBQVEsR0FBUixRQUFRLENBQTBCO1FBQVUsaUJBQVksR0FBWixZQUFZLENBQWdCO1FBQ3hFLGFBQVEsR0FBUixRQUFRLENBQVU7UUFBVSxlQUFVLEdBQVYsVUFBVSxDQUFlO1FBQVMsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQTNDNUUsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBQ3ZDLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQzs7UUFHdEMsd0JBQW1CLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQzs7UUF1QnhELGtCQUFhLEdBQUcsRUFBRSxDQUFDOztRQUduQixhQUFRLEdBQUcsUUFBUSxDQUFDOztRQUdwQixjQUFTLEdBQUcsQ0FBQyxDQUFDOztR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aUM7O0lBQUUsbUNBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIE91dHB1dCwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLFxyXG4gIEV2ZW50RW1pdHRlciwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBJbmplY3RvciwgRWxlbWVudFJlZiwgQXBwbGljYXRpb25SZWYsIFRlbXBsYXRlUmVmLCBWaWV3Q2hpbGQsIFZpZXdDb250YWluZXJSZWZcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUHJvcGVydHlFbnRpdHkgfSBmcm9tICcuLi8uLi9lbnRpdHkvcHJvcGVydHktZW50aXR5JztcclxuaW1wb3J0IHsgQnNNb2RhbFNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLW1vZGFsJztcclxuaW1wb3J0IHsgTm90aWZ5U2VydmljZSwgTm90aWZ5T3B0aW9ucyB9IGZyb20gJ0BmYXJyaXMvdWktbm90aWZ5JztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnd2ViaWRlLXByb3BlcnR5LWl0ZW0nLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9wcm9wZXJ0eS1pdGVtLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9wcm9wZXJ0eS1pdGVtLmNvbXBvbmVudC5jc3MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgUHJvcGVydHlJdGVtQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xyXG4gIEBJbnB1dCgpIGVsZW1lbnRDb25maWc6IFByb3BlcnR5RW50aXR5O1xyXG4gIEBJbnB1dCgpIGVsZW1lbnRWYWx1ZTogYW55O1xyXG4gIEBPdXRwdXQoKSB2YWx1ZUNoYW5nZWQgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICBAT3V0cHV0KCkgc3VibWl0TW9kYWwgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuXHJcbiAgLy8g5ZCR5LiK6Kem5Y+R5pW05L2T6Z2i5p2/5Yi35pawXHJcbiAgQE91dHB1dCgpIHRyaWdnZXJSZWZyZXNoUGFuZWwgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuXHJcbiAgLy8g5o6n5Lu25a655ZmoXHJcbiAgQFZpZXdDaGlsZCgncHJvcEl0ZW0nLCB7IHJlYWQ6IFZpZXdDb250YWluZXJSZWYgfSkgcHJvcEl0ZW06IFZpZXdDb250YWluZXJSZWY7XHJcblxyXG4gIC8vIOaOp+S7tuaooeadv1xyXG4gIEBWaWV3Q2hpbGQoJ3N0cmluZ1RtcGwnKSBzdHJpbmdUbXBsOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gIEBWaWV3Q2hpbGQoJ251bWJlclRtcGwnKSBudW1iZXJUbXBsOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gIEBWaWV3Q2hpbGQoJ3NlbGVjdFRtcGwnKSBzZWxlY3RUbXBsOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gIEBWaWV3Q2hpbGQoJ2Jvb2xPckV4cFRtcGwnKSBib29sT3JFeHBUbXBsOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gIEBWaWV3Q2hpbGQoJ211bHRpU2VsZWN0VG1wbCcpIG11bHRpU2VsZWN0VG1wbDogVGVtcGxhdGVSZWY8YW55PjtcclxuICBAVmlld0NoaWxkKCdkYXRlVG1wbCcpIGRhdGVUbXBsOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gIEBWaWV3Q2hpbGQoJ2RhdGV0aW1lVG1wbCcpIGRhdGV0aW1lVG1wbDogVGVtcGxhdGVSZWY8YW55PjtcclxuICBAVmlld0NoaWxkKCdtb2RhbFRtcGwnKSBtb2RhbFRtcGw6IFRlbXBsYXRlUmVmPGFueT47XHJcblxyXG5cclxuICAvLyDmjqfku7bnsbvlnostLeeUqOS6juWMuuWIhuWKqOaAgeWPmOabtOaOp+S7tuexu+Wei+eahOWcuuaZr++8mumcgOimgemHjeaWsOa4suafk+aooeadv1xyXG4gIHByb3BlcnR5T2xkVHlwZTogc3RyaW5nO1xyXG5cclxuICAvLyDmqKHmgIHmoYbnsbvlnovnmoTlsZ7mgKc65bGe5oCn5qGG55qE5bGV56S65YC8XHJcbiAgZWxlbWVudFNob3dWYWx1ZTogYW55O1xyXG5cclxuICAvLyDkuIvmi4nmoYbnmoTmnprkuL7poblcclxuICBzZWxlY3RPcHRpb25zID0gW107XHJcblxyXG4gIC8vIOaOp+S7tuexu+Wei1xyXG4gIGl0ZW1UeXBlID0gJ3N0cmluZyc7XHJcblxyXG4gIC8vIOaVsOWtl+aOp+S7tueyvuW6plxyXG4gIHByZWNpc2lvbiA9IDI7XHJcblxyXG4gIC8vIOW3suW6n+W8g1xyXG4gIHNob3dDbGVhckJ1dHRvbiA9IGZhbHNlO1xyXG5cclxuICAvLyDpu5jorqTlgLxcclxuICBzaG93RGVmYXVsdFZhbHVlID0gZmFsc2U7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSByZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBwcml2YXRlIG1vZGFsU2VydmljZTogQnNNb2RhbFNlcnZpY2UsXHJcbiAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvciwgcHJpdmF0ZSBub3RpZnlTZXJ2OiBOb3RpZnlTZXJ2aWNlLCBwdWJsaWMgZWw6IEVsZW1lbnRSZWYpIHtcclxuICB9XHJcblxyXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcclxuICAgIHRoaXMucmVmcmVzaCgpO1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICAvLyB0aGlzLnJlZnJlc2goKTtcclxuICB9XHJcblxyXG4gIHJlZnJlc2goKSB7XHJcblxyXG4gICAgbGV0IHRtcGw6IFRlbXBsYXRlUmVmPGFueT47XHJcbiAgICAvLyDmmL7npLrmoLzlvI9cclxuICAgIGNvbnN0IHByb3BlcnR5VHlwZSA9IHRoaXMuaXRlbVR5cGUgPSB0aGlzLmVsZW1lbnRDb25maWcucHJvcGVydHlUeXBlO1xyXG4gICAgc3dpdGNoIChwcm9wZXJ0eVR5cGUpIHtcclxuICAgICAgY2FzZSAnYm9vbGVhbic6IHtcclxuICAgICAgICB0aGlzLml0ZW1UeXBlID0gJ3NlbGVjdCc7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RPcHRpb25zID0gW3sga2V5OiB0cnVlLCB2YWx1ZTogJ3RydWUnIH0sIHsga2V5OiBmYWxzZSwgdmFsdWU6ICdmYWxzZScgfV07XHJcblxyXG4gICAgICAgIHRtcGwgPSB0aGlzLnNlbGVjdFRtcGw7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnc2VsZWN0Jzoge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0T3B0aW9ucyA9IHRoaXMuZWxlbWVudENvbmZpZy5pdGVyYXRvciB8fCBbXTtcclxuXHJcbiAgICAgICAgdG1wbCA9IHRoaXMuc2VsZWN0VG1wbDtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdtdWx0aVNlbGVjdCc6IHtcclxuICAgICAgICB0aGlzLnNlbGVjdE9wdGlvbnMgPSB0aGlzLmVsZW1lbnRDb25maWcuaXRlcmF0b3IgfHwgW107XHJcbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudENvbmZpZy5tdWx0aVNlbGVjdERhdGFUeXBlID09PSAnYXJyYXknKSB7XHJcbiAgICAgICAgICB0aGlzLmVsZW1lbnRWYWx1ZSA9IHRoaXMuZWxlbWVudFZhbHVlID8gdGhpcy5lbGVtZW50VmFsdWUudG9TdHJpbmcoKSA6ICcnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdG1wbCA9IHRoaXMubXVsdGlTZWxlY3RUbXBsO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgJ21vZGFsJzoge1xyXG4gICAgICAgIHRoaXMuX2NvbnZlcnRNb2RhbFNob3dWYWx1ZSh0aGlzLmVsZW1lbnRWYWx1ZSk7XHJcblxyXG4gICAgICAgIHRtcGwgPSB0aGlzLm1vZGFsVG1wbDtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdudW1iZXInOiB7XHJcbiAgICAgICAgdGhpcy5wcmVjaXNpb24gPSB0aGlzLmVsZW1lbnRDb25maWcuZGVjaW1hbHMgPT09IHVuZGVmaW5lZCA/IDIgOiB0aGlzLmVsZW1lbnRDb25maWcuZGVjaW1hbHM7XHJcblxyXG4gICAgICAgIHRtcGwgPSB0aGlzLm51bWJlclRtcGw7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnc3RyaW5nJzoge1xyXG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnRDb25maWcucmVhZG9ubHkpIHtcclxuICAgICAgICAgIHRoaXMuX2NvbnZlcnRNb2RhbFNob3dWYWx1ZSh0aGlzLmVsZW1lbnRWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRtcGwgPSB0aGlzLnN0cmluZ1RtcGw7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnYm9vbE9yRXhwJzoge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0T3B0aW9ucyA9IFt7IGtleTogdHJ1ZSwgdmFsdWU6ICd0cnVlJyB9LCB7IGtleTogZmFsc2UsIHZhbHVlOiAnZmFsc2UnIH1dO1xyXG5cclxuICAgICAgICB0bXBsID0gdGhpcy5ib29sT3JFeHBUbXBsO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgJ2RhdGUnOiB7XHJcbiAgICAgICAgdG1wbCA9IHRoaXMuZGF0ZVRtcGw7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnZGF0ZXRpbWUnOiB7XHJcbiAgICAgICAgdG1wbCA9IHRoaXMuZGF0ZXRpbWVUbXBsO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8g6buY6K6k5YC8XHJcbiAgICBpZiAoT2JqZWN0LmtleXModGhpcy5lbGVtZW50Q29uZmlnKS5pbmRleE9mKCdkZWZhdWx0VmFsdWUnKSA+IC0xKSB7XHJcbiAgICAgIGlmICh0aGlzLmVsZW1lbnRWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuZWxlbWVudFZhbHVlID09PSBudWxsKSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50VmFsdWUgPSB0aGlzLmVsZW1lbnRDb25maWcuZGVmYXVsdFZhbHVlO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuc2hvd0RlZmF1bHRWYWx1ZSA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5piv5ZCm5pi+56S6XHJcbiAgICBpZiAoT2JqZWN0LmtleXModGhpcy5lbGVtZW50Q29uZmlnKS5pbmRleE9mKCd2aXNpYmxlJykgPCAwKSB7XHJcbiAgICAgIHRoaXMuZWxlbWVudENvbmZpZy52aXNpYmxlID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDliJvlu7rmqKHmnb9cclxuICAgIGlmICh0bXBsICYmICh0aGlzLnByb3BJdGVtLmxlbmd0aCA9PT0gMCB8fCB0aGlzLnByb3BlcnR5T2xkVHlwZSAhPT0gdGhpcy5pdGVtVHlwZSkpIHtcclxuICAgICAgdGhpcy5wcm9wSXRlbS5jbGVhcigpO1xyXG4gICAgICB0aGlzLnByb3BJdGVtLmNyZWF0ZUVtYmVkZGVkVmlldyh0bXBsKTtcclxuICAgICAgdGhpcy5wcm9wZXJ0eU9sZFR5cGUgPSB0aGlzLml0ZW1UeXBlO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDpvKDmoIfnp7vlhaUgLS3lt7Llup/lvINcclxuICAgKi9cclxuICBvbm1vdXNlb3ZlcigpIHtcclxuICAgIGlmICghdGhpcy5lbGVtZW50Q29uZmlnLnNob3dDbGVhckJ1dHRvbikge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoIXRoaXMuc2hvd0NsZWFyQnV0dG9uKSB7XHJcbiAgICAgIHRoaXMuc2hvd0NsZWFyQnV0dG9uID0gdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOm8oOagh+emu+W8gCAtLeW3suW6n+W8g1xyXG4gICAqL1xyXG4gIG9ubW91c2VsZWF2ZSgpIHtcclxuICAgIGlmICghdGhpcy5lbGVtZW50Q29uZmlnLnNob3dDbGVhckJ1dHRvbikge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLnNob3dDbGVhckJ1dHRvbiA9IGZhbHNlO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIOa4hemZpOaooeaAgeahhuWGheWuuVxyXG4gICAqL1xyXG4gIG1vZGFsQ2xlYXIoKSB7XHJcbiAgICAvLyDmlbDmja7ovazmjaJcclxuICAgIHRoaXMuX2NvbnZlcnRNb2RhbFNob3dWYWx1ZShudWxsKTtcclxuXHJcbiAgICAvLyDoi6XmnInmuIXpmaTlkI7kuovku7bvvIzlhYjmiafooYzmlrnms5VcclxuICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLmVsZW1lbnRDb25maWcpLmluZGV4T2YoJ2FmdGVyQ2xpY2tDbGVhckJ1dHRvbicpID4gLTEgJiZcclxuICAgICAgdHlwZW9mICh0aGlzLmVsZW1lbnRDb25maWcuYWZ0ZXJDbGlja0NsZWFyQnV0dG9uKSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICB0aGlzLmVsZW1lbnRDb25maWcuYWZ0ZXJDbGlja0NsZWFyQnV0dG9uKHRoaXMuZWxlbWVudFZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjaGFuZ2VPYmplY3QgPSB7XHJcbiAgICAgIHByb3BlcnR5SUQ6IHRoaXMuZWxlbWVudENvbmZpZy5wcm9wZXJ0eUlELFxyXG4gICAgICBwcm9wZXJ0eVZhbHVlOiBudWxsXHJcbiAgICB9O1xyXG4gICAgdGhpcy5zdWJtaXRNb2RhbC5lbWl0KHsgY2hhbmdlT2JqZWN0LCBwYXJhbWV0ZXJzOiBudWxsIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Y+Y5pu05bGe5oCn5YC8XHJcbiAgICovXHJcbiAgY2hhbmdlVmFsdWUoZSkge1xyXG4gICAgbGV0IHZhbHVlID0gdGhpcy5lbGVtZW50VmFsdWU7XHJcblxyXG4gICAgLy8g5paH5pys5o6n5Lu26ZmQ5Yi26L6T5YWl5a2X56ymXHJcbiAgICBpZiAodmFsdWUgJiYgdGhpcy5lbGVtZW50Q29uZmlnLnByb3BlcnR5VHlwZSA9PT0gJ3N0cmluZycgJiYgIXRoaXMuZWxlbWVudENvbmZpZy5yZWFkb25seSAmJlxyXG4gICAgICB0aGlzLmVsZW1lbnRDb25maWcubm90QWxsb3dlZENoYXJzICYmIHRoaXMuZWxlbWVudENvbmZpZy5ub3RBbGxvd2VkQ2hhcnMubGVuZ3RoKSB7XHJcbiAgICAgIHRoaXMuZWxlbWVudENvbmZpZy5ub3RBbGxvd2VkQ2hhcnMuZm9yRWFjaCgoYzogYW55KSA9PiB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiAoYykgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoYywgJycpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIChjKSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKGMsICdnJyksICcnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy5lbGVtZW50VmFsdWUgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDlpJrpgInmjqfku7bov5Tlm57mlbDnu4TmoLzlvI/nmoTmlbDmja5cclxuICAgIGlmICh0aGlzLml0ZW1UeXBlID09PSAnbXVsdGlTZWxlY3QnICYmIHRoaXMuZWxlbWVudENvbmZpZy5tdWx0aVNlbGVjdERhdGFUeXBlID09PSAnYXJyYXknKSB7XHJcbiAgICAgIHZhbHVlID0gdGhpcy5lbGVtZW50VmFsdWUgPyB0aGlzLmVsZW1lbnRWYWx1ZS5zcGxpdCgnLCcpIDogJyc7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY2hhbmdlT2JqZWN0ID0ge1xyXG4gICAgICBwcm9wZXJ0eUlEOiB0aGlzLmVsZW1lbnRDb25maWcucHJvcGVydHlJRCxcclxuICAgICAgcHJvcGVydHlWYWx1ZTogdmFsdWVcclxuICAgIH07XHJcbiAgICB0aGlzLnZhbHVlQ2hhbmdlZC5lbWl0KHsgY2hhbmdlT2JqZWN0IH0pO1xyXG4gICAgaWYgKHRoaXMuZWxlbWVudENvbmZpZy5yZWZyZXNoUGFuZWxBZnRlckNoYW5nZWQpIHtcclxuICAgICAgdGhpcy50cmlnZ2VyUmVmcmVzaFBhbmVsLmVtaXQoKTtcclxuICAgIH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICogZmFycmlzIOaXpeacn+aOp+S7tueahOWPmOabtOS6i+S7tlxyXG4gICAqIEBwYXJhbSBlIGVcclxuICAgKi9cclxuICBjaGFuZ2VEYXRlVmFsdWUoZSkge1xyXG4gICAgY29uc3QgdmFsdWUgPSBlLmZvcm1hdHRlZDtcclxuXHJcbiAgICBjb25zdCBjaGFuZ2VPYmplY3QgPSB7XHJcbiAgICAgIHByb3BlcnR5SUQ6IHRoaXMuZWxlbWVudENvbmZpZy5wcm9wZXJ0eUlELFxyXG4gICAgICBwcm9wZXJ0eVZhbHVlOiB2YWx1ZVxyXG4gICAgfTtcclxuICAgIHRoaXMudmFsdWVDaGFuZ2VkLmVtaXQoeyBjaGFuZ2VPYmplY3QgfSk7XHJcbiAgICBpZiAodGhpcy5lbGVtZW50Q29uZmlnLnJlZnJlc2hQYW5lbEFmdGVyQ2hhbmdlZCkge1xyXG4gICAgICB0aGlzLnRyaWdnZXJSZWZyZXNoUGFuZWwuZW1pdCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6Ieq5a6a5LmJ57yW6L6R5Zmo5L2/55So5qih5oCB5qGG5omT5byAXHJcbiAgICovXHJcbiAgb3Blbk1vZGFsKCkge1xyXG4gICAgaWYgKHRoaXMuZWxlbWVudENvbmZpZy5yZWFkb25seSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoT2JqZWN0LmtleXModGhpcy5lbGVtZW50Q29uZmlnKS5pbmRleE9mKCdiZWZvcmVPcGVuTW9kYWwnKSA+IC0xICYmIHR5cGVvZiAodGhpcy5lbGVtZW50Q29uZmlnLmJlZm9yZU9wZW5Nb2RhbCkgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5lbGVtZW50Q29uZmlnLmJlZm9yZU9wZW5Nb2RhbCgpO1xyXG4gICAgICBpZiAocmVzdWx0ICYmICFyZXN1bHQucmVzdWx0KSB7XHJcbiAgICAgICAgdGhpcy5ub3RpZnlTZXJ2Lndhcm5pbmcoe1xyXG4gICAgICAgICAgdGl0bGU6ICfns7vnu5/mj5DnpLonLCBtc2c6IHJlc3VsdC5tZXNzYWdlLCB0aW1lb3V0OiAzMDAwXHJcbiAgICAgICAgfSBhcyBOb3RpZnlPcHRpb25zKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMuY3JlYXRlRWRpdG9yQ29tcG9uZW50KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDliJvlu7roh6rlrprkuYnnvJbovpHlmahcclxuICAgKi9cclxuICBwcml2YXRlIGNyZWF0ZUVkaXRvckNvbXBvbmVudCgpIHtcclxuICAgIGNvbnN0IGVkaXRvciA9IHRoaXMuZWxlbWVudENvbmZpZy5lZGl0b3I7XHJcbiAgICBpZiAoIWVkaXRvcikge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvLyDliJvlu7rmqKHmgIHmoYbnu4Tku7ZcclxuICAgIGNvbnN0IGNvbXBGYWN0b3J5ID0gdGhpcy5yZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShlZGl0b3IpO1xyXG4gICAgY29uc3QgY29tcFJlZiA9IGNvbXBGYWN0b3J5LmNyZWF0ZSh0aGlzLmluamVjdG9yKTtcclxuICAgIGNvbXBSZWYuaW5zdGFuY2UudmFsdWUgPSB0aGlzLmVsZW1lbnRWYWx1ZTtcclxuICAgIGlmICh0aGlzLmVsZW1lbnRDb25maWcuZWRpdG9yUGFyYW1zKSB7ICAvLyDnvJbovpHlmajpnIDopoHnmoTpop3lpJblj4LmlbBcclxuICAgICAgY29tcFJlZi5pbnN0YW5jZS5lZGl0b3JQYXJhbXMgPSB0aGlzLmVsZW1lbnRDb25maWcuZWRpdG9yUGFyYW1zO1xyXG4gICAgfVxyXG4gICAgbGV0IG1vZGFsQ29uZmlnID0gY29tcFJlZi5pbnN0YW5jZS5tb2RhbENvbmZpZztcclxuICAgIGlmICghbW9kYWxDb25maWcpIHtcclxuICAgICAgbW9kYWxDb25maWcgPSB7XHJcbiAgICAgICAgdGl0bGU6ICflsZ7mgKfphY3nva4nLFxyXG4gICAgICAgIHdpZHRoOiA4MDAsXHJcbiAgICAgICAgaGVpZ2h0OiA0MDAsXHJcbiAgICAgICAgc2hvd0J1dHRvbnM6IGZhbHNlXHJcbiAgICAgIH07XHJcbiAgICB9IGVsc2UgaWYgKG1vZGFsQ29uZmlnLnNob3dCdXR0b25zKSB7XHJcbiAgICAgIG1vZGFsQ29uZmlnLmJ1dHRvbnMgPSBjb21wUmVmLmluc3RhbmNlLm1vZGFsRm9vdGVyO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGRpYWxvZyA9IHRoaXMubW9kYWxTZXJ2aWNlLnNob3coY29tcFJlZiwgbW9kYWxDb25maWcpO1xyXG5cclxuICAgIC8vIOebkeWQrOWFs+mXreaooeaAgeahhlxyXG4gICAgaWYgKGNvbXBSZWYuaW5zdGFuY2UuY2xvc2VNb2RhbCAmJiBjb21wUmVmLmluc3RhbmNlLmNsb3NlTW9kYWwgaW5zdGFuY2VvZiBFdmVudEVtaXR0ZXIpIHtcclxuICAgICAgY29tcFJlZi5pbnN0YW5jZS5jbG9zZU1vZGFsLnN1YnNjcmliZSgoZGF0YSkgPT4ge1xyXG4gICAgICAgIC8vIOaVsOaNrui9rOaNolxyXG4gICAgICAgIGlmIChkYXRhKSB7XHJcbiAgICAgICAgICB0aGlzLl9jb252ZXJ0TW9kYWxTaG93VmFsdWUoZGF0YSk7XHJcblxyXG4gICAgICAgICAgY29uc3QgY2hhbmdlT2JqZWN0ID0ge1xyXG4gICAgICAgICAgICBwcm9wZXJ0eUlEOiB0aGlzLmVsZW1lbnRDb25maWcucHJvcGVydHlJRCxcclxuICAgICAgICAgICAgcHJvcGVydHlWYWx1ZTogZGF0YVxyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIHRoaXMudmFsdWVDaGFuZ2VkLmVtaXQoeyBjaGFuZ2VPYmplY3QgfSk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZGlhbG9nLmNsb3NlKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgLy8g5by55Ye65qGG5YWz6Zet5LqL5Lu277yM5bim5Y+C5pWw77yM5qC85byP5Li6eyB2YWx1ZSwgcGFyYW1ldGVycyB9XHJcbiAgICBpZiAoY29tcFJlZi5pbnN0YW5jZS5zdWJtaXRNb2RhbCAmJiBjb21wUmVmLmluc3RhbmNlLnN1Ym1pdE1vZGFsIGluc3RhbmNlb2YgRXZlbnRFbWl0dGVyKSB7XHJcbiAgICAgIGNvbXBSZWYuaW5zdGFuY2Uuc3VibWl0TW9kYWwuc3Vic2NyaWJlKGRhdGEgPT4ge1xyXG4gICAgICAgIGlmICghZGF0YSkge1xyXG4gICAgICAgICAgZGlhbG9nLmNsb3NlKCk7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHsgdmFsdWUsIHBhcmFtZXRlcnMgfSA9IGRhdGE7XHJcbiAgICAgICAgLy8g5pWw5o2u6L2s5o2iXHJcbiAgICAgICAgdGhpcy5fY29udmVydE1vZGFsU2hvd1ZhbHVlKHZhbHVlKTtcclxuXHJcbiAgICAgICAgY29uc3QgY2hhbmdlT2JqZWN0ID0ge1xyXG4gICAgICAgICAgcHJvcGVydHlJRDogdGhpcy5lbGVtZW50Q29uZmlnLnByb3BlcnR5SUQsXHJcbiAgICAgICAgICBwcm9wZXJ0eVZhbHVlOiB2YWx1ZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5zdWJtaXRNb2RhbC5lbWl0KHsgY2hhbmdlT2JqZWN0LCBwYXJhbWV0ZXJzIH0pO1xyXG5cclxuICAgICAgICBkaWFsb2cuY2xvc2UoKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5qih5oCB5qGG5Zy65pmv5LiL5bCG5bGe5oCn5YC86L2s5o2i5Li66L6T5YWl5qGG5Lit5pi+56S655qE5YC8XHJcbiAgICogQHBhcmFtIHZhbHVlXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBfY29udmVydE1vZGFsU2hvd1ZhbHVlKHZhbHVlKSB7XHJcbiAgICBpZiAodGhpcy5lbGVtZW50Q29uZmlnLmNvbnZlcnRlcikge1xyXG4gICAgICB0aGlzLmVsZW1lbnRTaG93VmFsdWUgPSB0aGlzLmVsZW1lbnRDb25maWcuY29udmVydGVyLmNvbnZlcnRUbyh2YWx1ZSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICh2YWx1ZSAmJiB2YWx1ZSBpbnN0YW5jZW9mIE9iamVjdCkge1xyXG4gICAgICB0aGlzLmVsZW1lbnRTaG93VmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMuZWxlbWVudFNob3dWYWx1ZSA9IHZhbHVlO1xyXG4gIH1cclxufVxyXG4iXX0=