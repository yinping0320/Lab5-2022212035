/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ContentChildren, Directive, HostListener, QueryList, ViewChildren } from '@angular/core';
import { NavbarState } from './navbar.state';
import { ElementRef } from '@angular/core';
import { BsDropdownConfig } from '../dropdown/dropdown.config';
import { BsDropdownDirective } from '../dropdown/index';
export class NavbarDirective {
    /**
     * @param {?} _elementRef
     * @param {?} _config
     * @param {?} _state
     */
    constructor(_elementRef, _config, _state) {
        this._elementRef = _elementRef;
        this._config = _config;
        this._state = _state;
        this._state.autoClose = this._config.autoClose;
        this.onItemClick = this._state.onItemClick;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDocumentClick(event) {
        this._state.hideAllDropdown();
    }
    /**
     * @return {?}
     */
    onEsc() {
        if (this._state.autoClose) {
            this._state.hideCurrentDropdown();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.childDropdowns.forEach((item) => this._state.addDropdown(item));
    }
}
NavbarDirective.decorators = [
    { type: Directive, args: [{
                selector: '[navbar]',
                exportAs: 'navbar',
                providers: [NavbarState]
            },] }
];
/** @nocollapse */
NavbarDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: BsDropdownConfig },
    { type: NavbarState }
];
NavbarDirective.propDecorators = {
    childDropdowns: [{ type: ContentChildren, args: [BsDropdownDirective,] }],
    childDropdowns2: [{ type: ViewChildren, args: [BsDropdownDirective,] }],
    onDocumentClick: [{ type: HostListener, args: ['document:click', ['$event'],] }],
    onEsc: [{ type: HostListener, args: ['keyup.esc',] }]
};
if (false) {
    /** @type {?} */
    NavbarDirective.prototype.onItemClick;
    /** @type {?} */
    NavbarDirective.prototype.childDropdowns;
    /** @type {?} */
    NavbarDirective.prototype.childDropdowns2;
    /**
     * @type {?}
     * @private
     */
    NavbarDirective.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    NavbarDirective.prototype._config;
    /**
     * @type {?}
     * @private
     */
    NavbarDirective.prototype._state;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2YmFyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvaWRlLWRldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL25hdmJhci9uYXZiYXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBR0wsZUFBZSxFQUNmLFNBQVMsRUFFVCxZQUFZLEVBRVosU0FBUyxFQUFFLFlBQVksRUFDeEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFDN0QsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFPdEQsTUFBTSxPQUFPLGVBQWU7Ozs7OztJQWtCMUIsWUFBb0IsV0FBdUIsRUFDdkIsT0FBeUIsRUFDekIsTUFBbUI7UUFGbkIsZ0JBQVcsR0FBWCxXQUFXLENBQVk7UUFDdkIsWUFBTyxHQUFQLE9BQU8sQ0FBa0I7UUFDekIsV0FBTSxHQUFOLE1BQU0sQ0FBYTtRQUNyQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztRQUMvQyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDO0lBQzdDLENBQUM7Ozs7O0lBaEJELGVBQWUsQ0FBQyxLQUFVO1FBQ3hCLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDaEMsQ0FBQzs7OztJQUdELEtBQUs7UUFDSCxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFO1lBQ3pCLElBQUksQ0FBQyxNQUFNLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztTQUNuQztJQUNILENBQUM7Ozs7SUFTRCxRQUFRO0lBQ1IsQ0FBQzs7OztJQUVELGVBQWU7UUFDYixJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQXlCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDNUYsQ0FBQzs7O1lBbkNGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsVUFBVTtnQkFDcEIsUUFBUSxFQUFFLFFBQVE7Z0JBQ2xCLFNBQVMsRUFBRSxDQUFDLFdBQVcsQ0FBQzthQUN6Qjs7OztZQVJPLFVBQVU7WUFDVixnQkFBZ0I7WUFGaEIsV0FBVzs7OzZCQWNoQixlQUFlLFNBQUMsbUJBQW1COzhCQUNuQyxZQUFZLFNBQUMsbUJBQW1COzhCQUNoQyxZQUFZLFNBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxRQUFRLENBQUM7b0JBS3pDLFlBQVksU0FBQyxXQUFXOzs7O0lBVHpCLHNDQUFrQzs7SUFFbEMseUNBQXFGOztJQUNyRiwwQ0FBbUY7Ozs7O0lBYXZFLHNDQUErQjs7Ozs7SUFDL0Isa0NBQWlDOzs7OztJQUNqQyxpQ0FBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIEFmdGVyQ29udGVudENoZWNrZWQsXHJcbiAgQWZ0ZXJWaWV3Q2hlY2tlZCwgQWZ0ZXJWaWV3SW5pdCxcclxuICBDb250ZW50Q2hpbGRyZW4sXHJcbiAgRGlyZWN0aXZlLFxyXG4gIEV2ZW50RW1pdHRlcixcclxuICBIb3N0TGlzdGVuZXIsIE9uQ2hhbmdlcyxcclxuICBPbkluaXQsXHJcbiAgUXVlcnlMaXN0LCBWaWV3Q2hpbGRyZW5cclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtOYXZiYXJTdGF0ZX0gZnJvbSAnLi9uYXZiYXIuc3RhdGUnO1xyXG5pbXBvcnQge0VsZW1lbnRSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0JzRHJvcGRvd25Db25maWd9IGZyb20gJy4uL2Ryb3Bkb3duL2Ryb3Bkb3duLmNvbmZpZyc7XHJcbmltcG9ydCB7QnNEcm9wZG93bkRpcmVjdGl2ZX0gZnJvbSAnLi4vZHJvcGRvd24vaW5kZXgnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbbmF2YmFyXScsXHJcbiAgZXhwb3J0QXM6ICduYXZiYXInLFxyXG4gIHByb3ZpZGVyczogW05hdmJhclN0YXRlXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmF2YmFyRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcclxuXHJcbiAgb25JdGVtQ2xpY2s6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xyXG5cclxuICBAQ29udGVudENoaWxkcmVuKEJzRHJvcGRvd25EaXJlY3RpdmUpIGNoaWxkRHJvcGRvd25zOiBRdWVyeUxpc3Q8QnNEcm9wZG93bkRpcmVjdGl2ZT47XHJcbiAgQFZpZXdDaGlsZHJlbihCc0Ryb3Bkb3duRGlyZWN0aXZlKSBjaGlsZERyb3Bkb3duczI6IFF1ZXJ5TGlzdDxCc0Ryb3Bkb3duRGlyZWN0aXZlPjtcclxuICBASG9zdExpc3RlbmVyKCdkb2N1bWVudDpjbGljaycsIFsnJGV2ZW50J10pXHJcbiAgb25Eb2N1bWVudENsaWNrKGV2ZW50OiBhbnkpOiB2b2lkIHtcclxuICAgIHRoaXMuX3N0YXRlLmhpZGVBbGxEcm9wZG93bigpO1xyXG4gIH1cclxuXHJcbiAgQEhvc3RMaXN0ZW5lcigna2V5dXAuZXNjJylcclxuICBvbkVzYygpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLl9zdGF0ZS5hdXRvQ2xvc2UpIHtcclxuICAgICAgdGhpcy5fc3RhdGUuaGlkZUN1cnJlbnREcm9wZG93bigpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfZWxlbWVudFJlZjogRWxlbWVudFJlZixcclxuICAgICAgICAgICAgICBwcml2YXRlIF9jb25maWc6IEJzRHJvcGRvd25Db25maWcsXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSBfc3RhdGU6IE5hdmJhclN0YXRlKSB7XHJcbiAgICB0aGlzLl9zdGF0ZS5hdXRvQ2xvc2UgPSB0aGlzLl9jb25maWcuYXV0b0Nsb3NlO1xyXG4gICAgdGhpcy5vbkl0ZW1DbGljayA9IHRoaXMuX3N0YXRlLm9uSXRlbUNsaWNrO1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgfVxyXG5cclxuICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICB0aGlzLmNoaWxkRHJvcGRvd25zLmZvckVhY2goKGl0ZW06IEJzRHJvcGRvd25EaXJlY3RpdmUpID0+IHRoaXMuX3N0YXRlLmFkZERyb3Bkb3duKGl0ZW0pKTtcclxuICB9XHJcbn1cclxuIl19