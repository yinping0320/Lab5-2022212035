/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ComponentFactoryResolver, ViewContainerRef, ViewChild } from '@angular/core';
export class TreeNodeContentComponent {
    /**
     * @param {?} componentFactoryResolver
     */
    constructor(componentFactoryResolver) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.rightMenuClicked = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // 右键菜单相关
        this.rightMenuContainer.clear();
        if (this.originData.hasRightClickMenu) {
            /** @type {?} */
            const componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.originData.rightClickMenuComponent);
            /** @type {?} */
            const componentRef = this.rightMenuContainer.createComponent(componentFactory);
            componentRef.instance['nodeData'] = this.originData;
            componentRef.instance['rightMenuClicked'].subscribe((event) => {
                this.rightMenuClicked.emit(event);
            });
        }
    }
}
TreeNodeContentComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng2tree-node-content',
                template: "<div class='tree-node-content' *ngIf=\"!originData.hasRightClickMenu\">\r\n  <span>{{ displayData }}</span>\r\n</div>\r\n<ng-container #rightMenuContainer>\r\n</ng-container>",
                styles: [".tree-node-content:hover{background:#a8daa7}"]
            }] }
];
/** @nocollapse */
TreeNodeContentComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver }
];
TreeNodeContentComponent.propDecorators = {
    displayData: [{ type: Input }],
    originData: [{ type: Input }],
    rightMenuClicked: [{ type: Output }],
    rightMenuContainer: [{ type: ViewChild, args: ['rightMenuContainer', { read: ViewContainerRef },] }]
};
if (false) {
    /** @type {?} */
    TreeNodeContentComponent.prototype.displayData;
    /** @type {?} */
    TreeNodeContentComponent.prototype.originData;
    /** @type {?} */
    TreeNodeContentComponent.prototype.rightMenuClicked;
    /** @type {?} */
    TreeNodeContentComponent.prototype.rightMenuContainer;
    /**
     * @type {?}
     * @private
     */
    TreeNodeContentComponent.prototype.componentFactoryResolver;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1ub2RlLWNvbnRlbnQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9pZGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvbmcydHJlZS1jb21tb24vY29tcG9uZW50cy90cmVlLW5vZGUtY29udGVudC90cmVlLW5vZGUtY29udGVudC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQVUsd0JBQXdCLEVBQUUsZ0JBQWdCLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBUXRJLE1BQU0sT0FBTyx3QkFBd0I7Ozs7SUFPbkMsWUFBb0Isd0JBQWtEO1FBQWxELDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FBMEI7UUFINUQscUJBQWdCLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztJQUtyRCxDQUFDOzs7O0lBQ0QsUUFBUTtRQUNOLFNBQVM7UUFDVCxJQUFJLENBQUMsa0JBQWtCLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDaEMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLGlCQUFpQixFQUFFOztrQkFDL0IsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsdUJBQXVCLENBQUM7O2tCQUNqSCxZQUFZLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQztZQUM5RSxZQUFZLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7WUFDcEQsWUFBWSxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUM1RCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3BDLENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDOzs7WUExQkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxzQkFBc0I7Z0JBQ2hDLDBMQUFpRDs7YUFFbEQ7Ozs7WUFQd0Qsd0JBQXdCOzs7MEJBVTlFLEtBQUs7eUJBQ0wsS0FBSzsrQkFDTCxNQUFNO2lDQUVOLFNBQVMsU0FBQyxvQkFBb0IsRUFBRSxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRTs7OztJQUozRCwrQ0FBMEI7O0lBQzFCLDhDQUF5Qjs7SUFDekIsb0RBQXFEOztJQUVyRCxzREFBa0c7Ozs7O0lBQ3RGLDREQUEwRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBPbkluaXQsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgVmlld0NvbnRhaW5lclJlZiwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IElUcmVlTm9kZUNvbnRlbnQgfSBmcm9tICcuL0lUcmVlTm9kZUNvbnRlbnQnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICduZzJ0cmVlLW5vZGUtY29udGVudCcsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL3RyZWUtbm9kZS1jb250ZW50LmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi90cmVlLW5vZGUtY29udGVudC5jb21wb25lbnQuY3NzJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIFRyZWVOb2RlQ29udGVudENvbXBvbmVudCBpbXBsZW1lbnRzIElUcmVlTm9kZUNvbnRlbnQsIE9uSW5pdCB7XHJcblxyXG4gIEBJbnB1dCgpIGRpc3BsYXlEYXRhOiBhbnk7XHJcbiAgQElucHV0KCkgb3JpZ2luRGF0YTogYW55O1xyXG4gIEBPdXRwdXQoKSByaWdodE1lbnVDbGlja2VkID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcblxyXG4gIEBWaWV3Q2hpbGQoJ3JpZ2h0TWVudUNvbnRhaW5lcicsIHsgcmVhZDogVmlld0NvbnRhaW5lclJlZiB9KSByaWdodE1lbnVDb250YWluZXI6IFZpZXdDb250YWluZXJSZWY7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcikge1xyXG5cclxuICB9XHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICAvLyDlj7PplK7oj5zljZXnm7jlhbNcclxuICAgIHRoaXMucmlnaHRNZW51Q29udGFpbmVyLmNsZWFyKCk7XHJcbiAgICBpZiAodGhpcy5vcmlnaW5EYXRhLmhhc1JpZ2h0Q2xpY2tNZW51KSB7XHJcbiAgICAgIGNvbnN0IGNvbXBvbmVudEZhY3RvcnkgPSB0aGlzLmNvbXBvbmVudEZhY3RvcnlSZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeSh0aGlzLm9yaWdpbkRhdGEucmlnaHRDbGlja01lbnVDb21wb25lbnQpO1xyXG4gICAgICBjb25zdCBjb21wb25lbnRSZWYgPSB0aGlzLnJpZ2h0TWVudUNvbnRhaW5lci5jcmVhdGVDb21wb25lbnQoY29tcG9uZW50RmFjdG9yeSk7XHJcbiAgICAgIGNvbXBvbmVudFJlZi5pbnN0YW5jZVsnbm9kZURhdGEnXSA9IHRoaXMub3JpZ2luRGF0YTtcclxuICAgICAgY29tcG9uZW50UmVmLmluc3RhbmNlWydyaWdodE1lbnVDbGlja2VkJ10uc3Vic2NyaWJlKChldmVudCkgPT4ge1xyXG4gICAgICAgIHRoaXMucmlnaHRNZW51Q2xpY2tlZC5lbWl0KGV2ZW50KTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==