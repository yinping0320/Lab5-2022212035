/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { TreeNode } from './tree-node';
import { TreeOptions } from './tree-options';
import { TREE_EVENTS } from '../constants/events';
import { first, last } from 'lodash-es';
export class TreeModel {
    constructor() {
        this.options = new TreeOptions();
        // focused Node may be not actived 
        // actived Node must be focused
        this.focusedNode = null; // be chosen node
        // be chosen node
        this.activeNode = null; // be chosen and actived node
        this.eventNames = Object.keys(TREE_EVENTS);
        this.firstUpdate = true;
        this._dragNode = null;
        this._dropLocation = null;
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    setData({ nodes, options, events }) {
        this.options = new TreeOptions(options);
        this.events = events;
        this.update(nodes);
    }
    /**
     * @param {?} nodes
     * @return {?}
     */
    update(nodes) {
        // Update the tree:
        this.virtualRoot = new TreeNode({ isVirtualRoot: true }, null, this);
        this.roots = nodes && nodes.map(child => new TreeNode(child, this.virtualRoot, this));
        this.virtualRoot[this.options.childrenField] = this.roots;
        this._loadTreeNodeContentComponent();
        // Fire event:
        if (this.firstUpdate) {
            if (this.roots) {
                this.fireEvent({ eventName: TREE_EVENTS.onInitialized });
                this.firstUpdate = false;
            }
        }
        else {
            this.fireEvent({ eventName: TREE_EVENTS.onUpdateData });
        }
    }
    //Used for code test
    /**
     * @return {?}
     */
    addStaticTreeNode() {
        this.createAndAddTreeNode({
            id: 1,
            name: 'root1',
            subTitle: 'the root',
            type: 'type1'
        }, this.focusedNode);
    }
    /**
     * @param {?} data
     * @param {?} parentNode
     * @param {?=} index
     * @return {?}
     */
    createAndAddTreeNode(data, parentNode, index) {
        /** @type {?} */
        const createdNode = this.createTreeNode(data, parentNode);
        this.addTreeNode(createdNode, parentNode, index);
    }
    /**
     * @param {?} data
     * @param {?} parent
     * @return {?}
     */
    createTreeNode(data, parent) {
        /** @type {?} */
        let createdNode = new TreeNode(data, parent, this);
        return createdNode;
    }
    /**
     * @param {?} addedNode
     * @param {?} parentNode
     * @param {?=} index
     * @return {?}
     */
    addTreeNode(addedNode, parentNode, index) {
        if (addedNode == null) {
            return;
        }
        if (parentNode == null) { // 增加顶级树节点（没有父节点的树节点）
            this.roots.push(addedNode);
        }
        else {
            if (index === null || index === undefined) {
                parentNode.childrenField.push(addedNode);
            }
            else {
                parentNode.childrenField.splice(index, 0, addedNode);
            }
        }
        this.update(this.roots);
        this.fireEvent({ eventName: TREE_EVENTS.onAddNode, addedNode, parentNode });
    }
    /**
     * @return {?}
     */
    removeFocusedTreeNode() {
        this.removeTreeNode(this.focusedNode);
    }
    //移除选中的已知节点
    /**
     * @param {?} selectedTreeNode
     * @return {?}
     */
    removeTreeNode(selectedTreeNode) {
        if (selectedTreeNode == null) {
            return;
        }
        /** @type {?} */
        const parent = selectedTreeNode.parent;
        if (parent == null) { //移除顶级树节点（没有父节点的树节点）
            //移除顶级树节点（没有父节点的树节点）
            /** @type {?} */
            let index = this.roots.indexOf(selectedTreeNode);
            this.roots.splice(index, 1); //移除数组中某一指定节点
        }
        else {
            if (parent.childrenField.length <= 0) {
                console.log("RemoveTreeNode Warning: it is impossible to remove element from an empty array");
                return;
            }
            //移除数组中某一指定节点
            /** @type {?} */
            let index = parent.childrenField.indexOf(selectedTreeNode);
            parent.childrenField.splice(index, 1);
        }
        this.update(this.roots);
        this.fireEvent({ eventName: TREE_EVENTS.onRemoveNode, selectedTreeNode, parent });
    }
    /**
     * 定位指定树节点
     * @param {?} needLocatedNode 待定位节点
     * @return {?}
     */
    locateTreeNode(needLocatedNode) {
        if (needLocatedNode == null) {
            return;
        }
        /** @type {?} */
        let parentNode = needLocatedNode.parent;
        while (parentNode != null) {
            parentNode.isExpanded = true;
            parentNode = parentNode.parent;
        }
        needLocatedNode.isActive = false;
        needLocatedNode.toggleActivated();
    }
    /**
     * 通过ID定位树节点
     * @param {?} nodeID 待查找并定位节点的ID
     * @return {?}
     */
    locateNodeByID(nodeID) {
        /** @type {?} */
        let node = this.searchTreeNodeByID(nodeID);
        if (node == null) {
            return false;
        }
        this.locateTreeNode(node);
        return true;
    }
    /**
     * 查找指定树节点
     * @param {?} nodeID 待查找节点ID
     * @return {?}
     */
    searchTreeNodeByID(nodeID) {
        return this.searchTreeNode(this.roots, nodeID);
    }
    /**
     * 在指定集合中，根据ID查找树节点
     * @param {?} nodes 树集合
     * @param {?} nodeID 待查找节点ID
     * @return {?}
     */
    searchTreeNode(nodes, nodeID) {
        if (nodes == null || nodes.length <= 0) {
            return null;
        }
        if (nodeID == null || nodeID.length < 0) {
            return null;
        }
        /** @type {?} */
        let searchedTreeNode = null;
        nodes.forEach(node => {
            if (node.idField == nodeID) { //回归
                searchedTreeNode = node;
                return;
            }
            if (node.childrenField == null || node.childrenField.length < 0) { //回归
                return;
            }
            /** @type {?} */
            const searchedNodeInChildren = this.searchTreeNode(node.childrenField, nodeID);
            if (searchedNodeInChildren != null) {
                searchedTreeNode = searchedNodeInChildren;
            }
            return; //回归
        });
        return searchedTreeNode; //返回
    }
    /**
     * @return {?}
     */
    get treeNodeContentComponent() { return this._treeNodeContentComponent; }
    ;
    // if treeNodeTemplate is a component - use it,
    // otherwise - it's a template, so wrap it with an AdHoc component
    /**
     * @return {?}
     */
    _loadTreeNodeContentComponent() {
        this._treeNodeContentComponent = this.options.treeNodeTemplate;
        if (typeof this._treeNodeContentComponent === 'string') {
            // this._treeNodeContentComponent = this._createAdHocComponent(this._treeNodeContentComponent);
        }
    }
    // _createAdHocComponent(templateStr) {
    //     @Component({
    //         selector: 'TreeNodeTemplate',
    //         template: templateStr
    //     })
    //     class AdHocTreeNodeTemplateComponent {
    //         @Input() node: TreeNode;
    //     }
    //     return AdHocTreeNodeTemplateComponent;
    // }
    /**
     * @return {?}
     */
    get isFocused() {
        return TreeModel.focusedTree === this;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setFocus(value) {
        TreeModel.focusedTree = value ? this : null;
    }
    /**
     * @return {?}
     */
    getFirstRoot() {
        return first(this.roots);
    }
    /**
     * @return {?}
     */
    getLastRoot() {
        return last(this.roots);
    }
    /**
     * @return {?}
     */
    focusNextNode() {
        /** @type {?} */
        let previousNode = this.focusedNode;
        /** @type {?} */
        let nextNode = previousNode ? previousNode.findNextNode() : this.getFirstRoot();
        nextNode && nextNode.focus(); // Short-circuit evaluation
    }
    /**
     * @return {?}
     */
    focusPreviousNode() {
        /** @type {?} */
        let previousNode = this.focusedNode;
        /** @type {?} */
        let nextNode = previousNode ? previousNode.findPreviousNode() : this.getLastRoot();
        nextNode && nextNode.focus();
    }
    /**
     * @return {?}
     */
    focusDrillUp() {
        /** @type {?} */
        let previousNode = this.focusedNode;
        /** @type {?} */
        let nextNode = previousNode && previousNode.realParent;
        nextNode && nextNode.focus();
    }
    /**
     * @return {?}
     */
    focusDrillDown() {
        /** @type {?} */
        let previousNode = this.focusedNode;
        /** @type {?} */
        let nextNode = previousNode && previousNode.getFirstChild();
        nextNode && nextNode.focus();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    fireEvent(event) {
        // https://stackoverflow.com/questions/35840576/differencse-between-eventemitter-next-and-eventemitter-emit-in-angular-2
        //  abandon next() function, begin to use emit() function
        // this.events[event.eventName].next(event);
        // this.events[event.eventName].emit(event,alert(event.eventName));//发射事件，并传递事件的对象
        this.events[event.eventName].emit(event);
    }
    /**
     * 判断是否执行移动节点操作，可以移动返回true，否则返回false
     * @param {?} __0
     * @return {?}
     */
    canMoveNode({ from, to }) {
        // same node
        if (from.parentNode === to.parentNode && from.index === to.index) {
            return false;
        }
        /** @type {?} */
        const fromChildren = from.parentNode.children;
        /** @type {?} */
        const fromNode = fromChildren[from.index];
        return !to.parentNode.isDescendantOf(fromNode);
    }
    /**
     * 移动节点
     * @param {?} __0
     * @return {?}
     */
    moveNode({ from, to }) {
        if (!this.canMoveNode({ from, to }))
            return;
        /** @type {?} */
        const fromChildren = from.parentNode.childrenField;
        // If node doesn't have children - create children array
        if (!to.parentNode.childrenField) {
            to.parentNode.childrenField = [];
        }
        /** @type {?} */
        const toChildren = to.parentNode.childrenField;
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice
        // The splice() method changes the contents of an array by removing existing elements and/or adding new elements.
        /** @type {?} */
        const node = fromChildren.splice(from.index, 1)[0];
        // Compensate for index if already removed from parent:
        /** @type {?} */
        let toIndex = (from.parentNode === to.parentNode && to.index > from.index) ? to.index - 1 : to.index;
        toChildren.splice(toIndex, 0, node);
        // console.log("toChildren:" + toChildren);
        // console.log("AfterMoveNode:" + this.roots);
        this.update(this.roots); // 实现node moved后，重新刷新这棵树
        this.fireEvent({ eventName: TREE_EVENTS.onMoveNode, node, to });
    }
    // TODO: move to a different service:
    /**
     * @param {?} dragNode
     * @return {?}
     */
    setDragNode(dragNode) {
        this._dragNode = dragNode;
    }
    /**
     * @return {?}
     */
    getDragNode() {
        return this._dragNode || { parentNode: null, index: null };
    }
    /**
     * @return {?}
     */
    isDragging() {
        return this.getDragNode().parentNode;
    }
    /**
     * @param {?} dropLocation
     * @return {?}
     */
    setDropLocation(dropLocation) {
        this._dropLocation = dropLocation;
    }
    /**
     * @return {?}
     */
    getDropLocation() {
        return this._dropLocation || { component: null, parentNode: null, index: null };
    }
    /**
     * @param {?} component
     * @return {?}
     */
    isDraggingOver(component) {
        return this.getDropLocation().component === component;
    }
    /**
     * @return {?}
     */
    cancelDrag() {
        this.setDropLocation(null);
        this.setDragNode(null);
    }
}
TreeModel.focusedTree = null;
TreeModel.decorators = [
    { type: Injectable }
];
if (false) {
    /** @type {?} */
    TreeModel.focusedTree;
    /** @type {?} */
    TreeModel.prototype.roots;
    /** @type {?} */
    TreeModel.prototype.options;
    /** @type {?} */
    TreeModel.prototype.focusedNode;
    /** @type {?} */
    TreeModel.prototype.activeNode;
    /**
     * @type {?}
     * @private
     */
    TreeModel.prototype.events;
    /** @type {?} */
    TreeModel.prototype.eventNames;
    /** @type {?} */
    TreeModel.prototype.firstUpdate;
    /** @type {?} */
    TreeModel.prototype._dragNode;
    /** @type {?} */
    TreeModel.prototype._dropLocation;
    /** @type {?} */
    TreeModel.prototype.virtualRoot;
    /**
     * @type {?}
     * @private
     */
    TreeModel.prototype._treeNodeContentComponent;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,