/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementRef, Input, Output, ViewChild, EventEmitter } from '@angular/core';
import { pick } from 'lodash-es';
/** @type {?} */
let loadedMonaco = false;
/** @type {?} */
let loadPromise;
/**
 * @abstract
 */
export class BaseMonacoEditor {
    /**
     * @param {?} codeEditorEventService
     * @param {?} config
     */
    constructor(codeEditorEventService, config) {
        this.codeEditorEventService = codeEditorEventService;
        this.config = config;
        // 初始化自定义事件
        /** @type {?} */
        const self = this;
        codeEditorEventService.eventNames.forEach((name) => {
            // 创建自定义事件，此处作用等效于: @Output() onInit = new EventEmitter<any>()
            self[name] = new EventEmitter();
            /** @type {?} */
            const eventPair = pick(self, name);
            codeEditorEventService.addEvent(eventPair);
        });
    }
    /**
     * @param {?} options
     * @return {?}
     */
    set options(options) {
        // 默认options(this.config.defaultOptions) + 自定义options(options)
        this._options = Object.assign({}, this.config.defaultOptions, options);
        if (this._editor) {
            this._editor.dispose();
            this.initMonaco(options);
        }
    }
    /**
     * @return {?}
     */
    get options() {
        return this._options;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (loadedMonaco) {
            // Wait until monaco editor is available
            loadPromise.then(() => {
                this.initMonaco(this.options);
            });
        }
        else {
            loadedMonaco = true;
            loadPromise = new Promise((resolve) => {
                /** @type {?} */
                const baseUrl = this.config.baseUrl || '/assets';
                // if (typeof((<any>window).monaco) === 'object') {
                //   resolve();
                //   return;
                // }
                /** @type {?} */
                const onGotAmdLoader = () => {
                    // Load monaco
                    ((/** @type {?} */ (window))).require.config({ paths: { 'vs': `${baseUrl}/monaco/vs` } });
                    ((/** @type {?} */ (window))).require(['vs/editor/editor.main'], () => {
                        if (typeof this.config.onMonacoLoad === 'function') {
                            this.config.onMonacoLoad();
                        }
                        this.initMonaco(this.options);
                        resolve();
                    });
                };
                // Load AMD loader if necessary
                if (!((/** @type {?} */ (window))).require) {
                    /** @type {?} */
                    const loaderScript = document.createElement('script');
                    loaderScript.type = 'text/javascript';
                    loaderScript.src = `${baseUrl}/monaco/vs/loader.js`;
                    loaderScript.addEventListener('load', onGotAmdLoader);
                    document.body.appendChild(loaderScript);
                }
                else {
                    onGotAmdLoader();
                }
            });
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._windowResizeSubscription) {
            this._windowResizeSubscription.unsubscribe();
        }
        if (this._editor) {
            this._editor.dispose();
            this._editor = undefined;
        }
    }
}
BaseMonacoEditor.propDecorators = {
    _editorComponent: [{ type: ViewChild, args: ['codeEditor',] }],
    onInit: [{ type: Output }],
    options: [{ type: Input, args: ['options',] }]
};
if (false) {
    /**
     * @type {?}
     * @protected
     */
    BaseMonacoEditor.prototype._editor;
    /**
     * @type {?}
     * @private
     */
    BaseMonacoEditor.prototype._options;
    /**
     * @type {?}
     * @protected
     */
    BaseMonacoEditor.prototype._windowResizeSubscription;
    /** @type {?} */
    BaseMonacoEditor.prototype._editorComponent;
    /** @type {?} */
    BaseMonacoEditor.prototype.onInit;
    /**
     * @type {?}
     * @private
     */
    BaseMonacoEditor.prototype.codeEditorEventService;
    /**
     * @type {?}
     * @private
     */
    BaseMonacoEditor.prototype.config;
    /**
     * @abstract
     * @protected
     * @param {?} options
     * @return {?}
     */
    BaseMonacoEditor.prototype.initMonaco = function (options) { };
}
//# sourceMappingURL=data:application/json;base64,