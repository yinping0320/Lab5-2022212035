/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { forwardRef, Inject, NgZone } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { fromEvent } from 'rxjs/observable/fromEvent';
import { ANGULAR_MONACO_EDITOR_CONFIG } from '../model/config';
import { CodeEditorEventService } from '../service/code-editor.event.service';
import { CODE_EDITOR_EVENTS } from '../constant/events';
import { BaseMonacoEditor } from '../model/base-monaco-editor';
import { AngularMonacoEditorService } from '../service/angular-monaco-editor.service';
// 自定义输入控件:1.封装ControlValueAccessor
// https://code-examples.net/zh-CN/q/2154761
/** @type {?} */
export const CODE_EDITOR_INPUT_VALUE_ACCESSOR = {
    // https://blog.csdn.net/wangdan_2013/article/details/81314959
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => AngularMonacoEditorComponent),
    multi: true
};
// 自定义输入控件 <-> Monaco Edtor
// 自定义输入控件:3.1 implements ControlValueAccessor
export class AngularMonacoEditorComponent extends BaseMonacoEditor {
    // tslint:disable-next-line:max-line-length
    /**
     * @param {?} angularMonacoEditorService
     * @param {?} zone
     * @param {?} editorEventService
     * @param {?} angularEditorconfig
     */
    constructor(angularMonacoEditorService, zone, editorEventService, angularEditorconfig) {
        super(editorEventService, angularEditorconfig);
        this.angularMonacoEditorService = angularMonacoEditorService;
        this.zone = zone;
        this.editorEventService = editorEventService;
        this.angularEditorconfig = angularEditorconfig;
        this._value = '';
        // ControlValueAccessor提供的事件回调
        this.onControlValueChange = (_) => {
        };
        // ControlValueAccessor提供的事件回调
        this.onControlTouched = () => {
        };
    }
    /**
     * @param {?} model
     * @return {?}
     */
    set model(model) {
        this.options.model = model;
        if (this._editor) {
            this._editor.dispose();
            this.initMonaco(this.options);
        }
    }
    // todo: 提取options公共类
    /**
     * @protected
     * @param {?} options
     * @return {?}
     */
    initMonaco(options) {
        /** @type {?} */
        const enableModel = !!options.model;
        if (enableModel) {
            /** @type {?} */
            const searchedModel = monaco.editor.getModel(options.model.uri);
            if (null !== searchedModel) {
                searchedModel.dispose();
            }
            options.model = monaco.editor.createModel(options.model.value, options.model.language, options.model.uri);
        }
        this._editor = monaco.editor.create(this._editorComponent.nativeElement, options);
        if (!enableModel) {
            this._editor.setValue(this._value);
        }
        if (enableModel) {
            this.angularMonacoEditorService.handleModelMarkers();
        }
        // monaco editor -> outside component
        this._editor.onDidChangeModelContent((e) => this.onChangeModelContentHandler(e));
        this._editor.onDidBlurEditorText((e) => this.onBlurEditorTextHandler(e));
        this._editor.onDidLayoutChange((e) => this.onLayoutChangeHandler(e));
        // refresh layout on resize event.
        this.refreshLayoutWhenWindowResize();
        this.editorEventService.fireEvent({
            eventName: CODE_EDITOR_EVENTS.onInit,
            target: this,
            editor: this._editor
        });
    }
    /**
     * refresh layout when resized the window
     * @return {?}
     */
    refreshLayoutWhenWindowResize() {
        if (this._windowResizeSubscription) {
            this._windowResizeSubscription.unsubscribe();
        }
        // fromEvent用于兼听事件，事件触发时，将事件event转成可流动的Observable进行传输
        // https://www.jianshu.com/p/46894deb870a
        this._windowResizeSubscription = fromEvent(window, 'resize').subscribe(() => this._editor.layout());
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onChangeModelContentHandler(e) {
        /** @type {?} */
        const _value = this._editor.getValue();
        // monaco editor -> outside component
        // https://github.com/JTangming/tm/issues/4 ngZone详解
        this.zone.run(() => this.value = _value); // value is not propagated to parent when executing outside zone.
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onBlurEditorTextHandler(e) {
        this.onControlTouched();
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onLayoutChangeHandler(e) {
        console.log('Layout changed:\n' + e);
    }
    // get accessor
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    // set accessor including call the onchange callback
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        if (v !== this.value) { // 注意这种写法，值得学习
            this._value = v;
        }
        this.onControlValueChange(this.value); // 在属性修饰器里调用onControlValueChange方法
    }
    // 自定义输入控件:3.2 implements ControlValueAccesso
    // outside component -> monaco editor
    // From ControlValueAccessor interface
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        /** @type {?} */
        const self = this;
        self.value = value || '';
        // Fix for value change while dispose in process.
        setTimeout(() => {
            if (self._editor /*&& !this.options.model*/) {
                self._editor.setValue(self._value);
            }
        });
    }
    // From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onControlValueChange = fn;
    }
    // From ControlValueAccessor interface
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onControlTouched = fn;
    }
}
AngularMonacoEditorComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'angular-monaco-editor',
                template: "<div class=\"editor\" #codeEditor></div>",
                // 自定义输入控件:2.引入依赖服务ControlValueAccessor
                providers: [
                    CODE_EDITOR_INPUT_VALUE_ACCESSOR,
                    CodeEditorEventService,
                    AngularMonacoEditorService
                ],
                styles: [":host{display:block;min-height:200px}.editor{width:100%;height:100%}"]
            }] }
];
/** @nocollapse */
AngularMonacoEditorComponent.ctorParameters = () => [
    { type: AngularMonacoEditorService },
    { type: NgZone },
    { type: CodeEditorEventService },
    { type: undefined, decorators: [{ type: Inject, args: [ANGULAR_MONACO_EDITOR_CONFIG,] }] }
];
AngularMonacoEditorComponent.propDecorators = {
    model: [{ type: Input, args: ['model',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    AngularMonacoEditorComponent.prototype._value;
    /** @type {?} */
    AngularMonacoEditorComponent.prototype.onControlValueChange;
    /** @type {?} */
    AngularMonacoEditorComponent.prototype.onControlTouched;
    /**
     * @type {?}
     * @private
     */
    AngularMonacoEditorComponent.prototype.angularMonacoEditorService;
    /**
     * @type {?}
     * @private
     */
    AngularMonacoEditorComponent.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    AngularMonacoEditorComponent.prototype.editorEventService;
    /**
     * @type {?}
     * @private
     */
    AngularMonacoEditorComponent.prototype.angularEditorconfig;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1tb25hY28tZWRpdG9yLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvaWRlLWRldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2FuZ3VsYXItZWRpdG9yL2FuZ3VsYXItbW9uYWNvLWVkaXRvci9hbmd1bGFyLW1vbmFjby1lZGl0b3IuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUN6RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0QsT0FBTyxFQUF3QixpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUV0RCxPQUFPLEVBQUUsNEJBQTRCLEVBQTZCLE1BQU0saUJBQWlCLENBQUM7QUFDMUYsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDOUUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFeEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDL0QsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sMENBQTBDLENBQUM7Ozs7QUFNdEYsTUFBTSxPQUFPLGdDQUFnQyxHQUFROztJQUVuRCxPQUFPLEVBQUUsaUJBQWlCO0lBQzFCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsNEJBQTRCLENBQUM7SUFDM0QsS0FBSyxFQUFFLElBQUk7Q0FDWjtBQWVELDJCQUEyQjtBQUUzQiw4Q0FBOEM7QUFDOUMsTUFBTSxPQUFPLDRCQUE2QixTQUFRLGdCQUFnQjs7Ozs7Ozs7SUFjaEUsWUFBb0IsMEJBQXNELEVBQ2hFLElBQVksRUFDWixrQkFBMEMsRUFDSixt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LFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsMEJBQTBCLEVBQUU7Z0JBQzNDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUNwQztRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7O0lBR0QsZ0JBQWdCLENBQUMsRUFBTztRQUN0QixJQUFJLENBQUMsb0JBQW9CLEdBQUcsRUFBRSxDQUFDO0lBQ2pDLENBQUM7Ozs7OztJQUdELGlCQUFpQixDQUFDLEVBQU87UUFDdkIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEVBQUUsQ0FBQztJQUM3QixDQUFDOzs7WUFoSkYsU0FBUyxTQUFDOztnQkFFVCxRQUFRLEVBQUUsdUJBQXVCO2dCQUNqQyxvREFBcUQ7O2dCQUdyRCxTQUFTLEVBQUU7b0JBQ1QsZ0NBQWdDO29CQUNoQyxzQkFBc0I7b0JBQ3RCLDBCQUEwQjtpQkFDM0I7O2FBQ0Y7Ozs7WUF4QlEsMEJBQTBCO1lBVE4sTUFBTTtZQUsxQixzQkFBc0I7NENBa0QxQixNQUFNLFNBQUMsNEJBQTRCOzs7b0JBZnJDLEtBQUssU0FBQyxPQUFPOzs7Ozs7O0lBU2QsOENBQW9COztJQXdIcEIsNERBQ0M7O0lBR0Qsd0RBQ0M7Ozs7O0lBMUhXLGtFQUE4RDs7Ozs7SUFDeEUsNENBQW9COzs7OztJQUNwQiwwREFBa0Q7Ozs7O0lBQ2xELDJEQUE0RiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBmb3J3YXJkUmVmLCBJbmplY3QsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IGZyb21FdmVudCB9IGZyb20gJ3J4anMvb2JzZXJ2YWJsZS9mcm9tRXZlbnQnO1xyXG5cclxuaW1wb3J0IHsgQU5HVUxBUl9NT05BQ09fRURJVE9SX0NPTkZJRywgQW5ndWxhck1vbmFjb0VkaXRvckNvbmZpZyB9IGZyb20gJy4uL21vZGVsL2NvbmZpZyc7XHJcbmltcG9ydCB7IENvZGVFZGl0b3JFdmVudFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlL2NvZGUtZWRpdG9yLmV2ZW50LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBDT0RFX0VESVRPUl9FVkVOVFMgfSBmcm9tICcuLi9jb25zdGFudC9ldmVudHMnO1xyXG5pbXBvcnQgeyBBbmd1bGFyRWRpdG9yTW9kZWwgfSBmcm9tICcuLi9tb2RlbC90eXBlcyc7XHJcbmltcG9ydCB7IEJhc2VNb25hY29FZGl0b3IgfSBmcm9tICcuLi9tb2RlbC9iYXNlLW1vbmFjby1lZGl0b3InO1xyXG5pbXBvcnQgeyBBbmd1bGFyTW9uYWNvRWRpdG9yU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2UvYW5ndWxhci1tb25hY28tZWRpdG9yLnNlcnZpY2UnO1xyXG5cclxuZGVjbGFyZSBjb25zdCBtb25hY286IGFueTtcclxuXHJcbi8vIOiHquWumuS5iei+k+WFpeaOp+S7tjoxLuWwgeijhUNvbnRyb2xWYWx1ZUFjY2Vzc29yXHJcbi8vIGh0dHBzOi8vY29kZS1leGFtcGxlcy5uZXQvemgtQ04vcS8yMTU0NzYxXHJcbmV4cG9ydCBjb25zdCBDT0RFX0VESVRPUl9JTlBVVF9WQUxVRV9BQ0NFU1NPUjogYW55ID0ge1xyXG4gIC8vIGh0dHBzOi8vYmxvZy5jc2RuLm5ldC93YW5nZGFuXzIwMTMvYXJ0aWNsZS9kZXRhaWxzLzgxMzE0OTU5XHJcbiAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXHJcbiAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gQW5ndWxhck1vbmFjb0VkaXRvckNvbXBvbmVudCksXHJcbiAgbXVsdGk6IHRydWVcclxufTtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjb21wb25lbnQtc2VsZWN0b3JcclxuICBzZWxlY3RvcjogJ2FuZ3VsYXItbW9uYWNvLWVkaXRvcicsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL2FuZ3VsYXItbW9uYWNvLWVkaXRvci5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJy4vYW5ndWxhci1tb25hY28tZWRpdG9yLmNvbXBvbmVudC5jc3MnXSxcclxuICAvLyDoh6rlrprkuYnovpPlhaXmjqfku7Y6Mi7lvJXlhaXkvp3otZbmnI3liqFDb250cm9sVmFsdWVBY2Nlc3NvclxyXG4gIHByb3ZpZGVyczogW1xyXG4gICAgQ09ERV9FRElUT1JfSU5QVVRfVkFMVUVfQUNDRVNTT1IsXHJcbiAgICBDb2RlRWRpdG9yRXZlbnRTZXJ2aWNlLFxyXG4gICAgQW5ndWxhck1vbmFjb0VkaXRvclNlcnZpY2VcclxuICBdXHJcbn0pXHJcblxyXG4vLyDoh6rlrprkuYnovpPlhaXmjqfku7YgPC0+IE1vbmFjbyBFZHRvclxyXG5cclxuLy8g6Ieq5a6a5LmJ6L6T5YWl5o6n5Lu2OjMuMSBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yXHJcbmV4cG9ydCBjbGFzcyBBbmd1bGFyTW9uYWNvRWRpdG9yQ29tcG9uZW50IGV4dGVuZHMgQmFzZU1vbmFjb0VkaXRvciBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcclxuXHJcbiAgQElucHV0KCdtb2RlbCcpXHJcbiAgc2V0IG1vZGVsKG1vZGVsOiBBbmd1bGFyRWRpdG9yTW9kZWwpIHtcclxuICAgIHRoaXMub3B0aW9ucy5tb2RlbCA9IG1vZGVsO1xyXG4gICAgaWYgKHRoaXMuX2VkaXRvcikge1xyXG4gICAgICB0aGlzLl9lZGl0b3IuZGlzcG9zZSgpO1xyXG4gICAgICB0aGlzLmluaXRNb25hY28odGhpcy5vcHRpb25zKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgX3ZhbHVlID0gJyc7XHJcblxyXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtbGluZS1sZW5ndGhcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFuZ3VsYXJNb25hY29FZGl0b3JTZXJ2aWNlOiBBbmd1bGFyTW9uYWNvRWRpdG9yU2VydmljZSxcclxuICAgIHByaXZhdGUgem9uZTogTmdab25lLFxyXG4gICAgcHJpdmF0ZSBlZGl0b3JFdmVudFNlcnZpY2U6IENvZGVFZGl0b3JFdmVudFNlcnZpY2UsXHJcbiAgICBASW5qZWN0KEFOR1VMQVJfTU9OQUNPX0VESVRPUl9DT05GSUcpIHByaXZhdGUgYW5ndWxhckVkaXRvcmNvbmZpZzogQW5ndWxhck1vbmFjb0VkaXRvckNvbmZpZykge1xyXG4gICAgc3VwZXIoZWRpdG9yRXZlbnRTZXJ2aWNlLCBhbmd1bGFyRWRpdG9yY29uZmlnKTtcclxuICB9XHJcblxyXG4gIC8vIHRvZG86IOaPkOWPlm9wdGlvbnPlhazlhbHnsbtcclxuICBwcm90ZWN0ZWQgaW5pdE1vbmFjbyhvcHRpb25zOiBhbnkpOiB2b2lkIHtcclxuICAgIGNvbnN0IGVuYWJsZU1vZGVsID0gISFvcHRpb25zLm1vZGVsO1xyXG4gICAgaWYgKGVuYWJsZU1vZGVsKSB7XHJcbiAgICAgIGNvbnN0IHNlYXJjaGVkTW9kZWwgPSBtb25hY28uZWRpdG9yLmdldE1vZGVsKG9wdGlvbnMubW9kZWwudXJpKTtcclxuICAgICAgaWYgKG51bGwgIT09IHNlYXJjaGVkTW9kZWwpIHtcclxuICAgICAgICBzZWFyY2hlZE1vZGVsLmRpc3Bvc2UoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgb3B0aW9ucy5tb2RlbCA9IG1vbmFjby5lZGl0b3IuY3JlYXRlTW9kZWwob3B0aW9ucy5tb2RlbC52YWx1ZSwgb3B0aW9ucy5tb2RlbC5sYW5ndWFnZSwgb3B0aW9ucy5tb2RlbC51cmkpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX2VkaXRvciA9IG1vbmFjby5lZGl0b3IuY3JlYXRlKHRoaXMuX2VkaXRvckNvbXBvbmVudC5uYXRpdmVFbGVtZW50LCBvcHRpb25zKTtcclxuXHJcbiAgICBpZiAoIWVuYWJsZU1vZGVsKSB7XHJcbiAgICAgIHRoaXMuX2VkaXRvci5zZXRWYWx1ZSh0aGlzLl92YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmIChlbmFibGVNb2RlbCkge1xyXG4gICAgICB0aGlzLmFuZ3VsYXJNb25hY29FZGl0b3JTZXJ2aWNlLmhhbmRsZU1vZGVsTWFya2VycygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIG1vbmFjbyBlZGl0b3IgLT4gb3V0c2lkZSBjb21wb25lbnRcclxuICAgIHRoaXMuX2VkaXRvci5vbkRpZENoYW5nZU1vZGVsQ29udGVudCgoZTogYW55KSA9PiB0aGlzLm9uQ2hhbmdlTW9kZWxDb250ZW50SGFuZGxlcihlKSk7XHJcblxyXG4gICAgdGhpcy5fZWRpdG9yLm9uRGlkQmx1ckVkaXRvclRleHQoKGU6IGFueSkgPT4gdGhpcy5vbkJsdXJFZGl0b3JUZXh0SGFuZGxlcihlKSk7XHJcblxyXG4gICAgdGhpcy5fZWRpdG9yLm9uRGlkTGF5b3V0Q2hhbmdlKChlOiBhbnkpID0+IHRoaXMub25MYXlvdXRDaGFuZ2VIYW5kbGVyKGUpKTtcclxuXHJcbiAgICAvLyByZWZyZXNoIGxheW91dCBvbiByZXNpemUgZXZlbnQuXHJcbiAgICB0aGlzLnJlZnJlc2hMYXlvdXRXaGVuV2luZG93UmVzaXplKCk7XHJcblxyXG4gICAgdGhpcy5lZGl0b3JFdmVudFNlcnZpY2UuZmlyZUV2ZW50KHtcclxuICAgICAgZXZlbnROYW1lOiBDT0RFX0VESVRPUl9FVkVOVFMub25Jbml0LFxyXG4gICAgICB0YXJnZXQ6IHRoaXMsXHJcbiAgICAgIGVkaXRvcjogdGhpcy5fZWRpdG9yXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIHJlZnJlc2ggbGF5b3V0IHdoZW4gcmVzaXplZCB0aGUgd2luZG93XHJcbiAgICovXHJcbiAgcmVmcmVzaExheW91dFdoZW5XaW5kb3dSZXNpemUoKSB7XHJcbiAgICBpZiAodGhpcy5fd2luZG93UmVzaXplU3Vic2NyaXB0aW9uKSB7XHJcbiAgICAgIHRoaXMuX3dpbmRvd1Jlc2l6ZVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgfVxyXG4gICAgLy8gZnJvbUV2ZW5055So5LqO5YW85ZCs5LqL5Lu277yM5LqL5Lu26Kem5Y+R5pe277yM5bCG5LqL5Lu2ZXZlbnTovazmiJDlj6/mtYHliqjnmoRPYnNlcnZhYmxl6L+b6KGM5Lyg6L6TXHJcbiAgICAvLyBodHRwczovL3d3dy5qaWFuc2h1LmNvbS9wLzQ2ODk0ZGViODcwYVxyXG4gICAgdGhpcy5fd2luZG93UmVzaXplU3Vic2NyaXB0aW9uID0gZnJvbUV2ZW50KHdpbmRvdywgJ3Jlc2l6ZScpLnN1YnNjcmliZSgoKSA9PiB0aGlzLl9lZGl0b3IubGF5b3V0KCkpO1xyXG4gIH1cclxuXHJcbiAgb25DaGFuZ2VNb2RlbENvbnRlbnRIYW5kbGVyKGUpIHtcclxuICAgIGNvbnN0IF92YWx1ZSA9IHRoaXMuX2VkaXRvci5nZXRWYWx1ZSgpO1xyXG5cclxuICAgIC8vIG1vbmFjbyBlZGl0b3IgLT4gb3V0c2lkZSBjb21wb25lbnRcclxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9KVGFuZ21pbmcvdG0vaXNzdWVzLzQgbmdab25l6K+m6KejXHJcbiAgICB0aGlzLnpvbmUucnVuKCgpID0+IHRoaXMudmFsdWUgPSBfdmFsdWUpOyAvLyB2YWx1ZSBpcyBub3QgcHJvcGFnYXRlZCB0byBwYXJlbnQgd2hlbiBleGVjdXRpbmcgb3V0c2lkZSB6b25lLlxyXG4gIH1cclxuXHJcbiAgb25CbHVyRWRpdG9yVGV4dEhhbmRsZXIoZSkge1xyXG5cclxuICAgIHRoaXMub25Db250cm9sVG91Y2hlZCgpO1xyXG4gIH1cclxuXHJcbiAgb25MYXlvdXRDaGFuZ2VIYW5kbGVyKGUpIHtcclxuICAgIGNvbnNvbGUubG9nKCdMYXlvdXQgY2hhbmdlZDpcXG4nICsgZSk7XHJcbiAgfVxyXG5cclxuICAvLyBnZXQgYWNjZXNzb3JcclxuICBnZXQgdmFsdWUoKTogYW55IHtcclxuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICB9XHJcblxyXG4gIC8vIHNldCBhY2Nlc3NvciBpbmNsdWRpbmcgY2FsbCB0aGUgb25jaGFuZ2UgY2FsbGJhY2tcclxuICBzZXQgdmFsdWUodjogYW55KSB7XHJcbiAgICBpZiAodiAhPT0gdGhpcy52YWx1ZSkgey8vIOazqOaEj+i/meenjeWGmeazle+8jOWAvOW+l+WtpuS5oFxyXG4gICAgICB0aGlzLl92YWx1ZSA9IHY7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5vbkNvbnRyb2xWYWx1ZUNoYW5nZSh0aGlzLnZhbHVlKTsgLy8g5Zyo5bGe5oCn5L+u6aWw5Zmo6YeM6LCD55Sob25Db250cm9sVmFsdWVDaGFuZ2Xmlrnms5VcclxuICB9XHJcblxyXG4gIC8vIOiHquWumuS5iei+k+WFpeaOp+S7tjozLjIgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvXHJcblxyXG4gIC8vIG91dHNpZGUgY29tcG9uZW50IC0+IG1vbmFjbyBlZGl0b3JcclxuXHJcbiAgLy8gRnJvbSBDb250cm9sVmFsdWVBY2Nlc3NvciBpbnRlcmZhY2VcclxuICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpIHtcclxuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgc2VsZi52YWx1ZSA9IHZhbHVlIHx8ICcnO1xyXG5cclxuICAgIC8vIEZpeCBmb3IgdmFsdWUgY2hhbmdlIHdoaWxlIGRpc3Bvc2UgaW4gcHJvY2Vzcy5cclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBpZiAoc2VsZi5fZWRpdG9yIC8qJiYgIXRoaXMub3B0aW9ucy5tb2RlbCovKSB7XHJcbiAgICAgICAgc2VsZi5fZWRpdG9yLnNldFZhbHVlKHNlbGYuX3ZhbHVlKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvLyBGcm9tIENvbnRyb2xWYWx1ZUFjY2Vzc29yIGludGVyZmFjZVxyXG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSkge1xyXG4gICAgdGhpcy5vbkNvbnRyb2xWYWx1ZUNoYW5nZSA9IGZuO1xyXG4gIH1cclxuXHJcbiAgLy8gRnJvbSBDb250cm9sVmFsdWVBY2Nlc3NvciBpbnRlcmZhY2VcclxuICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KSB7XHJcbiAgICB0aGlzLm9uQ29udHJvbFRvdWNoZWQgPSBmbjtcclxuICB9XHJcblxyXG4gIC8vIENvbnRyb2xWYWx1ZUFjY2Vzc29y5o+Q5L6b55qE5LqL5Lu25Zue6LCDXHJcbiAgb25Db250cm9sVmFsdWVDaGFuZ2UgPSAoXzogYW55KSA9PiB7XHJcbiAgfVxyXG5cclxuICAvLyBDb250cm9sVmFsdWVBY2Nlc3NvcuaPkOS+m+eahOS6i+S7tuWbnuiwg1xyXG4gIG9uQ29udHJvbFRvdWNoZWQgPSAoKSA9PiB7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=