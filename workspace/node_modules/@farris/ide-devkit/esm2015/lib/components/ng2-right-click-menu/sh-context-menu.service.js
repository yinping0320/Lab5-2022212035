/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Overlay } from '@angular/cdk/overlay';
import { TemplatePortal } from '@angular/cdk/portal';
import { fromEvent } from 'rxjs/observable/fromEvent';
export class ShContextMenuService {
    /**
     * @param {?} overlay
     */
    constructor(overlay) {
        this.overlay = overlay;
        this.activeOverlays = [];
    }
    /**
     * @param {?} ctxEvent
     * @return {?}
     */
    openMenu(ctxEvent) {
        this.closeCurrentOverlays();
        const { menu, mouseEvent, targetElement, data } = ctxEvent;
        this.activeMenu = menu;
        mouseEvent.preventDefault();
        mouseEvent.stopPropagation();
        this.overrideGetBoundingClientRect(targetElement, mouseEvent);
        /** @type {?} */
        const scrollStrategy = this.buildCloseScrollStrategy();
        /** @type {?} */
        const positionStrategy = this.buildConnectedPositionStrategy(targetElement);
        this.attachContextToItems(menu, data);
        /** @type {?} */
        const overlayRef = this.createAndAttachOverlay(positionStrategy, scrollStrategy, menu, true);
        this.attachOverlayRef(menu, overlayRef);
        this.registerBackdropEvents(overlayRef);
    }
    /**
     * @param {?} ctxEvent
     * @return {?}
     */
    openSubMenu(ctxEvent) {
        const { menu, mouseEvent, targetElement, data, parentMenu } = ctxEvent;
        mouseEvent.preventDefault();
        mouseEvent.stopPropagation();
        /** @type {?} */
        const scrollStrategy = this.buildCloseScrollStrategy();
        /** @type {?} */
        const positionStrategy = this.buildConnectedPositionStrategyForSubMenu(targetElement);
        /** @type {?} */
        const overlayRef = this.createAndAttachOverlay(positionStrategy, scrollStrategy, menu, false);
        this.attachContextToItems(menu, data);
        this.attachThisContext(menu, parentMenu);
        this.attachOverlayRef(menu, overlayRef);
    }
    /**
     * @return {?}
     */
    destroy() {
        this.closeCurrentOverlays();
        this.backDropSub.unsubscribe();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy();
    }
    /**
     * @param {?} menu
     * @return {?}
     */
    closeSubMenus(menu) {
        /** @type {?} */
        const itemsWithSubMenus = menu
            .menuItems
            .filter(i => !!i.subMenu && !!i.subMenu.overlayRef);
        if (itemsWithSubMenus.length) {
            itemsWithSubMenus.forEach(sm => this.closeSubMenus(sm.subMenu));
            /** @type {?} */
            const overlayRefs = itemsWithSubMenus
                .map(i => i.subMenu.overlayRef);
            overlayRefs.forEach(r => r.dispose());
        }
    }
    /**
     * @private
     * @param {?} overlayRef
     * @return {?}
     */
    registerBackdropEvents(overlayRef) {
        /** @type {?} */
        const elm = overlayRef.backdropElement;
        this.backDropSub = fromEvent(elm, 'mousedown')
            .subscribe(this.closeCurrentOverlays.bind(this));
    }
    /**
     * @private
     * @param {?} positionStrategy
     * @param {?} scrollStrategy
     * @param {?} menu
     * @param {?=} hasBackdrop
     * @return {?}
     */
    createAndAttachOverlay(positionStrategy, scrollStrategy, menu, hasBackdrop = true) {
        /** @type {?} */
        const overlayRef = this.overlay.create({
            positionStrategy,
            scrollStrategy,
            hasBackdrop: hasBackdrop,
            backdropClass: 'sh-backdrop'
        });
        /*
             TODO: try passing the TemplatePortal context (data)
             and then injecting it to the *ngTemplateOutlet in the component template
            */
        /** @type {?} */
        const menuPortal = new TemplatePortal(menu.menuTemplate, menu.menuContainer);
        overlayRef.attach(menuPortal);
        this.activeOverlays.push(overlayRef);
        return overlayRef;
    }
    /**
     * @private
     * @return {?}
     */
    buildCloseScrollStrategy() {
        return this.overlay.scrollStrategies.close();
    }
    /**
     * @private
     * @param {?} elm
     * @return {?}
     */
    buildConnectedPositionStrategy(elm) {
        return this
            .overlay
            .position()
            .connectedTo(elm, { originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' })
            .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' })
            .withFallbackPosition({ originX: 'end', originY: 'top' }, { overlayX: 'start', overlayY: 'top' })
            .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'end', overlayY: 'top' })
            .withFallbackPosition({ originX: 'end', originY: 'center' }, { overlayX: 'start', overlayY: 'center' })
            .withFallbackPosition({ originX: 'start', originY: 'center' }, { overlayX: 'end', overlayY: 'center' });
    }
    /**
     * @private
     * @param {?} elm
     * @return {?}
     */
    buildConnectedPositionStrategyForSubMenu(elm) {
        return this
            .overlay
            .position()
            .connectedTo(elm, { originX: 'end', originY: 'top' }, { overlayX: 'start', overlayY: 'top' })
            .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'end', overlayY: 'top' })
            .withFallbackPosition({ originX: 'end', originY: 'bottom' }, { overlayX: 'start', overlayY: 'bottom' })
            .withFallbackPosition({ originX: 'start', originY: 'bottom' }, { overlayX: 'end', overlayY: 'bottom' });
    }
    /*
        we need to override getBoundingClientRect() to return the position of the menu.
        this is done because @angular/cdk use this function internally to determine where the overlay should be positioned
        https://github.com/angular/material2/blob/master/src/cdk/overlay/position/connected-position-strategy.ts#L288
       */
    /**
     * @private
     * @param {?} elm
     * @param {?} event
     * @return {?}
     */
    overrideGetBoundingClientRect(elm, event) {
        const { clientX, clientY } = event;
        elm.nativeElement.getBoundingClientRect = () => {
            return {
                bottom: clientY,
                height: 0,
                left: clientX,
                right: clientX,
                top: clientY,
                width: 0
            };
        };
    }
    /**
     * @private
     * @return {?}
     */
    closeCurrentOverlays() {
        this.activeOverlays.forEach((o) => {
            o.detach();
            o.dispose();
        });
        this.activeOverlays = [];
        // TODO: create close subject and emit.
        // subscribe in component
        if (this.activeMenu) {
            this.activeMenu.close();
        }
    }
    /**
     * @private
     * @param {?} menu
     * @param {?} data
     * @return {?}
     */
    attachContextToItems(menu, data) {
        menu.menuItems.forEach(i => i.context.$implicit = data);
    }
    /**
     * @private
     * @param {?} menu
     * @param {?} parentMenu
     * @return {?}
     */
    attachThisContext(menu, parentMenu) {
        menu.thisContext = parentMenu.thisContext;
    }
    /**
     * @private
     * @param {?} menu
     * @param {?} overlayRef
     * @return {?}
     */
    attachOverlayRef(menu, overlayRef) {
        menu.overlayRef = overlayRef;
    }
}
ShContextMenuService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ShContextMenuService.ctorParameters = () => [
    { type: Overlay }
];
if (false) {
    /** @type {?} */
    ShContextMenuService.prototype.activeOverlays;
    /** @type {?} */
    ShContextMenuService.prototype.backDropSub;
    /** @type {?} */
    ShContextMenuService.prototype.activeMenu;
    /**
     * @type {?}
     * @private
     */
    ShContextMenuService.prototype.overlay;
}
//# sourceMappingURL=data:application/json;base64,