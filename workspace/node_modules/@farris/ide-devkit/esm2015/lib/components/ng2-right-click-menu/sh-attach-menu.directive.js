/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Input } from '@angular/core';
import { ShContextMenuService } from './sh-context-menu.service';
import { ShContextMenuComponent } from './sh-context-menu.component';
import { fromEvent } from 'rxjs/observable/fromEvent';
import { merge } from 'rxjs/observable/merge';
export class ShAttachMenuDirective {
    /**
     * @param {?} ctxService
     * @param {?} elm
     */
    constructor(ctxService, elm) {
        this.ctxService = ctxService;
        this.elm = elm;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setupEvents();
    }
    /**
     * @private
     * @return {?}
     */
    setupEvents() {
        /** @type {?} */
        const observables = [];
        if (!this.triggers) {
            observables.push(fromEvent(this.elm.nativeElement, 'contextmenu'));
        }
        else {
            this.triggers.forEach((t) => {
                observables.push(fromEvent(this.elm.nativeElement, t));
            });
        }
        this.sub = merge(...observables).subscribe(this.openMenu.bind(this));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    openMenu(event) {
        this.ctxService.openMenu({
            menu: this.menu,
            mouseEvent: event,
            targetElement: this.elm,
            data: this.data
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.sub.unsubscribe();
    }
}
ShAttachMenuDirective.decorators = [
    { type: Directive, args: [{
                selector: '[shAttachMenu]'
            },] }
];
/** @nocollapse */
ShAttachMenuDirective.ctorParameters = () => [
    { type: ShContextMenuService },
    { type: ElementRef }
];
ShAttachMenuDirective.propDecorators = {
    menu: [{ type: Input, args: ['shAttachMenu',] }],
    triggers: [{ type: Input, args: ['shMenuTriggers',] }],
    data: [{ type: Input, args: ['shMenuData',] }]
};
if (false) {
    /** @type {?} */
    ShAttachMenuDirective.prototype.menu;
    /** @type {?} */
    ShAttachMenuDirective.prototype.triggers;
    /** @type {?} */
    ShAttachMenuDirective.prototype.data;
    /** @type {?} */
    ShAttachMenuDirective.prototype.sub;
    /**
     * @type {?}
     * @private
     */
    ShAttachMenuDirective.prototype.ctxService;
    /**
     * @type {?}
     * @private
     */
    ShAttachMenuDirective.prototype.elm;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2gtYXR0YWNoLW1lbnUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9pZGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvbmcyLXJpZ2h0LWNsaWNrLW1lbnUvc2gtYXR0YWNoLW1lbnUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQW9CLE1BQU0sZUFBZSxDQUFDO0FBQzlFLE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQy9ELE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLDZCQUE2QixDQUFDO0FBRW5FLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUNwRCxPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFLNUMsTUFBTSxPQUFPLHFCQUFxQjs7Ozs7SUFNaEMsWUFBb0IsVUFBZ0MsRUFBVSxHQUFlO1FBQXpELGVBQVUsR0FBVixVQUFVLENBQXNCO1FBQVUsUUFBRyxHQUFILEdBQUcsQ0FBWTtJQUM3RSxDQUFDOzs7O0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNyQixDQUFDOzs7OztJQUVPLFdBQVc7O2NBQ1gsV0FBVyxHQUFHLEVBQUU7UUFFdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQztTQUNwRTthQUFNO1lBQ0wsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtnQkFDMUIsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6RCxDQUFDLENBQUMsQ0FBQztTQUNKO1FBRUQsSUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxXQUFXLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUN2RSxDQUFDOzs7OztJQUVELFFBQVEsQ0FBQyxLQUFpQjtRQUN4QixJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQztZQUN2QixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDZixVQUFVLEVBQUUsS0FBSztZQUNqQixhQUFhLEVBQUUsSUFBSSxDQUFDLEdBQUc7WUFDdkIsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1NBQ2hCLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN6QixDQUFDOzs7WUF6Q0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxnQkFBZ0I7YUFDM0I7Ozs7WUFSTyxvQkFBb0I7WUFEVCxVQUFVOzs7bUJBVzFCLEtBQUssU0FBQyxjQUFjO3VCQUNwQixLQUFLLFNBQUMsZ0JBQWdCO21CQUN0QixLQUFLLFNBQUMsWUFBWTs7OztJQUZuQixxQ0FBb0Q7O0lBQ3BELHlDQUE0Qzs7SUFDNUMscUNBQStCOztJQUMvQixvQ0FBa0I7Ozs7O0lBRU4sMkNBQXdDOzs7OztJQUFFLG9DQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgT25EZXN0cm95LCBPbkluaXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1NoQ29udGV4dE1lbnVTZXJ2aWNlfSBmcm9tICcuL3NoLWNvbnRleHQtbWVudS5zZXJ2aWNlJztcclxuaW1wb3J0IHtTaENvbnRleHRNZW51Q29tcG9uZW50fSBmcm9tICcuL3NoLWNvbnRleHQtbWVudS5jb21wb25lbnQnO1xyXG5pbXBvcnQge1N1YnNjcmlwdGlvbn0gZnJvbSAncnhqcy9TdWJzY3JpcHRpb24nO1xyXG5pbXBvcnQge2Zyb21FdmVudH0gZnJvbSAncnhqcy9vYnNlcnZhYmxlL2Zyb21FdmVudCc7XHJcbmltcG9ydCB7bWVyZ2V9IGZyb20gJ3J4anMvb2JzZXJ2YWJsZS9tZXJnZSc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tzaEF0dGFjaE1lbnVdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgU2hBdHRhY2hNZW51RGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95LCBPbkluaXQge1xyXG4gIEBJbnB1dCgnc2hBdHRhY2hNZW51JykgbWVudTogU2hDb250ZXh0TWVudUNvbXBvbmVudDtcclxuICBASW5wdXQoJ3NoTWVudVRyaWdnZXJzJykgdHJpZ2dlcnM6IHN0cmluZ1tdO1xyXG4gIEBJbnB1dCgnc2hNZW51RGF0YScpIGRhdGE6IGFueTtcclxuICBzdWI6IFN1YnNjcmlwdGlvbjtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjdHhTZXJ2aWNlOiBTaENvbnRleHRNZW51U2VydmljZSwgcHJpdmF0ZSBlbG06IEVsZW1lbnRSZWYpIHtcclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5zZXR1cEV2ZW50cygpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzZXR1cEV2ZW50cygpIHtcclxuICAgIGNvbnN0IG9ic2VydmFibGVzID0gW107XHJcblxyXG4gICAgaWYgKCF0aGlzLnRyaWdnZXJzKSB7XHJcbiAgICAgIG9ic2VydmFibGVzLnB1c2goZnJvbUV2ZW50KHRoaXMuZWxtLm5hdGl2ZUVsZW1lbnQsICdjb250ZXh0bWVudScpKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMudHJpZ2dlcnMuZm9yRWFjaCgodCkgPT4ge1xyXG4gICAgICAgIG9ic2VydmFibGVzLnB1c2goZnJvbUV2ZW50KHRoaXMuZWxtLm5hdGl2ZUVsZW1lbnQsIHQpKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5zdWIgPSBtZXJnZSguLi5vYnNlcnZhYmxlcykuc3Vic2NyaWJlKHRoaXMub3Blbk1lbnUuYmluZCh0aGlzKSk7XHJcbiAgfVxyXG5cclxuICBvcGVuTWVudShldmVudDogTW91c2VFdmVudCkge1xyXG4gICAgdGhpcy5jdHhTZXJ2aWNlLm9wZW5NZW51KHtcclxuICAgICAgbWVudTogdGhpcy5tZW51LFxyXG4gICAgICBtb3VzZUV2ZW50OiBldmVudCxcclxuICAgICAgdGFyZ2V0RWxlbWVudDogdGhpcy5lbG0sXHJcbiAgICAgIGRhdGE6IHRoaXMuZGF0YVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICAgIHRoaXMuc3ViLnVuc3Vic2NyaWJlKCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==