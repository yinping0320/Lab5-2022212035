/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, EventEmitter, Input, Optional, Output, TemplateRef } from '@angular/core';
export class MenuItemContext {
    constructor() {
        this.$implicit = {};
    }
}
if (false) {
    /** @type {?} */
    MenuItemContext.prototype.$implicit;
}
export class ShContextMenuItemDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
        this.closeOnClick = true;
        this.click = new EventEmitter();
        this.context = new MenuItemContext();
    }
    /**
     * @return {?}
     */
    setNotActive() {
        this._active = false;
        if (this.subMenu) {
            this.subMenu.setNotActive();
        }
    }
    /**
     * @return {?}
     */
    setActive() {
        this._active = true;
    }
}
ShContextMenuItemDirective.decorators = [
    { type: Directive, args: [{
                selector: '[shContextMenuItem]'
            },] }
];
/** @nocollapse */
ShContextMenuItemDirective.ctorParameters = () => [
    { type: TemplateRef, decorators: [{ type: Optional }] }
];
ShContextMenuItemDirective.propDecorators = {
    subMenu: [{ type: Input }],
    divider: [{ type: Input }],
    visible: [{ type: Input }],
    disabled: [{ type: Input }],
    closeOnClick: [{ type: Input }],
    click: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    ShContextMenuItemDirective.prototype.subMenu;
    /** @type {?} */
    ShContextMenuItemDirective.prototype.divider;
    /** @type {?} */
    ShContextMenuItemDirective.prototype.visible;
    /** @type {?} */
    ShContextMenuItemDirective.prototype.disabled;
    /** @type {?} */
    ShContextMenuItemDirective.prototype.closeOnClick;
    /** @type {?} */
    ShContextMenuItemDirective.prototype.click;
    /** @type {?} */
    ShContextMenuItemDirective.prototype.context;
    /**
     * @type {?}
     * @private
     */
    ShContextMenuItemDirective.prototype._active;
    /** @type {?} */
    ShContextMenuItemDirective.prototype.template;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2gtY29udGV4dC1tZW51LWl0ZW0uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9pZGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvbmcyLXJpZ2h0LWNsaWNrLW1lbnUvc2gtY29udGV4dC1tZW51LWl0ZW0uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFJNUYsTUFBTSxPQUFPLGVBQWU7SUFHMUI7UUFDRSxJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUN0QixDQUFDO0NBQ0Y7OztJQUxDLG9DQUFlOztBQVVqQixNQUFNLE9BQU8sMEJBQTBCOzs7O0lBYXJDLFlBQStCLFFBQXNDO1FBQXRDLGFBQVEsR0FBUixRQUFRLENBQThCO1FBUjVELGlCQUFZLEdBQUcsSUFBSSxDQUFDO1FBRW5CLFVBQUssR0FBRyxJQUFJLFlBQVksRUFBMkIsQ0FBQztRQUU5RCxZQUFPLEdBQW9CLElBQUksZUFBZSxFQUFFLENBQUM7SUFLakQsQ0FBQzs7OztJQUVELFlBQVk7UUFDVixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNyQixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQztTQUM3QjtJQUNILENBQUM7Ozs7SUFFRCxTQUFTO1FBQ1AsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7SUFDdEIsQ0FBQzs7O1lBNUJGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUscUJBQXFCO2FBQ2hDOzs7O1lBZHlELFdBQVcsdUJBNEJ0RCxRQUFROzs7c0JBWnBCLEtBQUs7c0JBQ0wsS0FBSztzQkFDTCxLQUFLO3VCQUNMLEtBQUs7MkJBQ0wsS0FBSztvQkFFTCxNQUFNOzs7O0lBTlAsNkNBQWlCOztJQUNqQiw2Q0FBMEI7O0lBQzFCLDZDQUE4RDs7SUFDOUQsOENBQStEOztJQUMvRCxrREFBNkI7O0lBRTdCLDJDQUE4RDs7SUFFOUQsNkNBQWlEOzs7OztJQUVqRCw2Q0FBeUI7O0lBRWIsOENBQXlEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9wdGlvbmFsLCBPdXRwdXQsIFRlbXBsYXRlUmVmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuLy8gaW1wb3J0IHtTaENvbnRleHRNZW51Q29tcG9uZW50fSBmcm9tICcuL3NoLWNvbnRleHQtbWVudS5jb21wb25lbnQnO1xyXG5pbXBvcnQge1NoQ29udGV4dE1lbnVDbGlja0V2ZW50fSBmcm9tICcuL3NoLWNvbnRleHQtbWVudS5tb2RlbHMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIE1lbnVJdGVtQ29udGV4dCB7XHJcbiAgJGltcGxpY2l0OiBhbnk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy4kaW1wbGljaXQgPSB7fTtcclxuICB9XHJcbn1cclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW3NoQ29udGV4dE1lbnVJdGVtXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIFNoQ29udGV4dE1lbnVJdGVtRGlyZWN0aXZlIHtcclxuICBASW5wdXQoKSBzdWJNZW51O1xyXG4gIEBJbnB1dCgpIGRpdmlkZXI6IGJvb2xlYW47XHJcbiAgQElucHV0KCkgdmlzaWJsZTogKGV2ZW50OiBTaENvbnRleHRNZW51Q2xpY2tFdmVudCkgPT4gYm9vbGVhbjtcclxuICBASW5wdXQoKSBkaXNhYmxlZDogKGV2ZW50OiBTaENvbnRleHRNZW51Q2xpY2tFdmVudCkgPT4gYm9vbGVhbjtcclxuICBASW5wdXQoKSBjbG9zZU9uQ2xpY2sgPSB0cnVlO1xyXG5cclxuICBAT3V0cHV0KCkgY2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyPFNoQ29udGV4dE1lbnVDbGlja0V2ZW50PigpO1xyXG5cclxuICBjb250ZXh0OiBNZW51SXRlbUNvbnRleHQgPSBuZXcgTWVudUl0ZW1Db250ZXh0KCk7XHJcblxyXG4gIHByaXZhdGUgX2FjdGl2ZTogYm9vbGVhbjtcclxuXHJcbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgcHVibGljIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxNZW51SXRlbUNvbnRleHQ+KSB7XHJcbiAgfVxyXG5cclxuICBzZXROb3RBY3RpdmUoKSB7XHJcbiAgICB0aGlzLl9hY3RpdmUgPSBmYWxzZTtcclxuICAgIGlmICh0aGlzLnN1Yk1lbnUpIHtcclxuICAgICAgdGhpcy5zdWJNZW51LnNldE5vdEFjdGl2ZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0QWN0aXZlKCkge1xyXG4gICAgdGhpcy5fYWN0aXZlID0gdHJ1ZTtcclxuICB9XHJcbn1cclxuIl19