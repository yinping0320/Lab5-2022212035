/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { CacheStorageAbstract } from './storage/cache.storage.abstract.service';
import { CacheSessionStorage } from './storage/sessionstorage/cache.sessionstorage.service';
import { CacheLocalStorage } from './storage/localstorage/cache.localstorage.service';
import { CacheMemoryStorage } from './storage/memory/cache.memory.service';
/** @type {?} */
const CACHE_PREFIX = 'CacheService';
/** @type {?} */
const DEFAULT_STORAGE = 2 /* MEMORY */;
/** @type {?} */
const DEFAULT_ENABLED_STORAGE = 1 /* SESSION_STORAGE */;
export class CacheService {
    /**
     * @param {?} _storage
     */
    constructor(_storage) {
        this._storage = _storage;
        /**
         * Default cache options
         */
        this._defaultOptions = {
            expires: Number.MAX_VALUE,
            maxAge: Number.MAX_VALUE
        };
        /**
         * Cache prefix
         */
        this._prefix = CACHE_PREFIX;
        this._validateStorage();
    }
    /**
     * Set data to cache
     * @param {?} key key
     * @param {?} value value
     * @param {?=} options options
     * @return {?}
     */
    set(key, value, options) {
        /** @type {?} */
        const storageKey = this._toStorageKey(key);
        options = options ? options : this._defaultOptions;
        if (this._storage.setItem(storageKey, this._toStorageValue(value, options))) {
            if (!this._isSystemKey(key) && options.tag) {
                this._saveTag(options.tag, storageKey);
            }
            return true;
        }
        return false;
    }
    /**
     * Get data from cache
     * @param {?} key key
     * @return {?} result
     */
    get(key) {
        /** @type {?} */
        const storageValue = this._storage.getItem(this._toStorageKey(key));
        /** @type {?} */
        let value = null;
        if (storageValue) {
            if (this._validateStorageValue(storageValue)) {
                value = storageValue.value;
            }
            else {
                this.remove(key);
            }
        }
        return value;
    }
    /**
     * Check if value exists
     * @param {?} key key
     * @return {?} result
     */
    exists(key) {
        return !!this.get(key);
    }
    /**
     * Remove item from cache
     * @param {?} key key
     * @return {?}
     */
    remove(key) {
        this._storage.removeItem(this._toStorageKey(key));
        this._removeFromTag(this._toStorageKey(key));
    }
    /**
     * Remove all from cache
     * @return {?}
     */
    removeAll() {
        this._storage.clear();
    }
    /**
     * Get all tag data
     * @param {?} tag tag
     * @return {?} result
     */
    getTagData(tag) {
        /** @type {?} */
        const tags = this.get(this._tagsStorageKey()) || {};
        /** @type {?} */
        const result = {};
        if (tags[tag]) {
            tags[tag].forEach((key) => {
                /** @type {?} */
                const data = this.get(this._fromStorageKey(key));
                if (data) {
                    result[this._fromStorageKey(key)] = data;
                }
            });
        }
        return result;
    }
    /**
     * Create a new instance of cache with needed storage
     * @param {?} type type
     * @return {?} result
     */
    useStorage(type) {
        /** @type {?} */
        const service = new CacheService(this._initStorage(type));
        service.setGlobalPrefix(this._getCachePrefix());
        return service;
    }
    /**
     * Remove all by tag
     * @param {?} tag tag
     * @return {?}
     */
    removeTag(tag) {
        /** @type {?} */
        const tags = this.get(this._tagsStorageKey()) || {};
        if (tags[tag]) {
            tags[tag].forEach((key) => {
                this._storage.removeItem(key);
            });
            delete tags[tag];
            this.set(this._tagsStorageKey(), tags);
        }
    }
    /**
     * Set global cache key prefix
     * @param {?} prefix prefix
     * @return {?}
     */
    setGlobalPrefix(prefix) {
        this._prefix = prefix;
    }
    /**
     * Validate cache storage
     * @private
     * @return {?}
     */
    _validateStorage() {
        if (!this._storage) {
            this._storage = this._initStorage(DEFAULT_STORAGE);
        }
        if (!this._storage.isEnabled()) {
            this._storage = this._initStorage(DEFAULT_ENABLED_STORAGE);
        }
    }
    /**
     * Remove key from tags keys list
     * @private
     * @param {?} key key
     * @return {?}
     */
    _removeFromTag(key) {
        // tslint:disable-next-line:prefer-const
        /** @type {?} */
        let tags = this.get(this._tagsStorageKey()) || {};
        /** @type {?} */
        let index;
        // tslint:disable-next-line:forin
        for (const tag in tags) {
            index = tags[tag].indexOf(key);
            if (index !== -1) {
                tags[tag].splice(index, 1);
                this.set(this._tagsStorageKey(), tags);
                break;
            }
        }
    }
    /**
     * Init storage by type
     * @private
     * @param {?} type type
     * @return {?}
     */
    _initStorage(type) {
        /** @type {?} */
        let storage;
        switch (type) {
            case 1 /* SESSION_STORAGE */:
                storage = new CacheSessionStorage();
                break;
            case 0 /* LOCAL_STORAGE */:
                storage = new CacheLocalStorage();
                break;
            default: storage = new CacheMemoryStorage();
        }
        return storage;
    }
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    _toStorageKey(key) {
        return this._getCachePrefix() + key;
    }
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    _fromStorageKey(key) {
        return key.replace(this._getCachePrefix(), '');
    }
    /**
     * Prepare value to set to storage
     * @private
     * @param {?} value value
     * @param {?} options options
     * @return {?} result
     */
    _toStorageValue(value, options) {
        return {
            value,
            options: this._toStorageOptions(options)
        };
    }
    /**
     * Prepare options to set to storage
     * @private
     * @param {?} options options
     * @return {?} result
     */
    _toStorageOptions(options) {
        /** @type {?} */
        const storageOptions = {};
        storageOptions.expires = options.expires ? options.expires :
            (options.maxAge ? Date.now() + (options.maxAge * 1000) : this._defaultOptions.expires);
        storageOptions.maxAge = options.maxAge ? options.maxAge : this._defaultOptions.maxAge;
        return storageOptions;
    }
    /**
     * Validate storage value
     * @private
     * @param {?} value value
     * @return {?} result
     */
    _validateStorageValue(value) {
        return !!value.options.expires && value.options.expires > Date.now();
    }
    /**
     * check if its system cache key
     * @private
     * @param {?} key key
     * @return {?} result
     */
    _isSystemKey(key) {
        return [this._tagsStorageKey()].indexOf(key) !== -1;
    }
    /**
     * Save tag to list of tags
     * @private
     * @param {?} tag tag
     * @param {?} key key
     * @return {?}
     */
    _saveTag(tag, key) {
        /** @type {?} */
        const tags = this.get(this._tagsStorageKey()) || {};
        if (!tags[tag]) {
            tags[tag] = [key];
        }
        else {
            tags[tag].push(key);
        }
        this.set(this._tagsStorageKey(), tags);
    }
    /**
     * Get global cache prefix
     * @private
     * @return {?} result
     */
    _getCachePrefix() {
        return this._prefix;
    }
    /**
     * @private
     * @return {?}
     */
    _tagsStorageKey() {
        return 'CacheService_tags';
    }
}
CacheService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CacheService.ctorParameters = () => [
    { type: CacheStorageAbstract, decorators: [{ type: Optional }] }
];
if (false) {
    /**
     * Default cache options
     * @type {?}
     * @private
     */
    CacheService.prototype._defaultOptions;
    /**
     * Cache prefix
     * @type {?}
     * @private
     */
    CacheService.prototype._prefix;
    /**
     * @type {?}
     * @private
     */
    CacheService.prototype._storage;
}
//# sourceMappingURL=data:application/json;base64,