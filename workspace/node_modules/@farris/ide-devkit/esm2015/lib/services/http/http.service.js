/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { CacheService } from '../cache/services/cache.service';
import { map } from 'rxjs/operators';
export class HttpService {
    /**
     * @param {?} http
     * @param {?} cache
     */
    constructor(http, cache) {
        this.http = http;
        this.cache = cache;
    }
    /**
     * @param {?} url
     * @return {?}
     */
    get(url) {
        return this.request('Get', url, this.setHeader({}));
    }
    /**
     * @param {?} url
     * @param {?} body
     * @return {?}
     */
    post(url, body) {
        return this.request('Post', url, this.setHeader({ body }));
    }
    /**
     * @param {?} url
     * @param {?} body
     * @return {?}
     */
    put(url, body) {
        return this.request('Put', url, this.setHeader({ body }));
    }
    /**
     * @param {?} url
     * @param {?} body
     * @return {?}
     */
    delete(url, body) {
        return this.request('Delete', url, this.setHeader({ body }));
    }
    /**
     * @param {?} url
     * @param {?} body
     * @return {?}
     */
    patch(url, body) {
        return this.request('Patch', url, this.setHeader({ body }));
    }
    /**
     * @param {?} options
     * @return {?}
     */
    setHeader(options) {
        options.headers = {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*'
        };
        if (this.cache.exists('sessionId') && this.cache.get('sessionId')) {
            options.headers['SessionId'] = this.cache.get('sessionId');
        }
        return options;
    }
    /**
     * @param {?} method
     * @param {?} url
     * @param {?} options
     * @return {?}
     */
    request(method, url, options) {
        if (options.body) {
            if (typeof options.body !== 'string') {
                options.body = JSON.stringify(options.body);
            }
        }
        return this.http.request(method, url, options)
            .pipe(map((data) => {
            console.log(data);
            return data;
        }));
    }
}
HttpService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
HttpService.ctorParameters = () => [
    { type: HttpClient },
    { type: CacheService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    HttpService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    HttpService.prototype.cache;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9pZGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2h0dHAvaHR0cC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDL0QsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBSXJDLE1BQU0sT0FBTyxXQUFXOzs7OztJQUV0QixZQUFvQixJQUFnQixFQUFVLEtBQW1CO1FBQTdDLFNBQUksR0FBSixJQUFJLENBQVk7UUFBVSxVQUFLLEdBQUwsS0FBSyxDQUFjO0lBQ2pFLENBQUM7Ozs7O0lBRUQsR0FBRyxDQUFDLEdBQVc7UUFDYixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdEQsQ0FBQzs7Ozs7O0lBRUQsSUFBSSxDQUFDLEdBQVcsRUFBRSxJQUFTO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0QsQ0FBQzs7Ozs7O0lBQ0QsR0FBRyxDQUFDLEdBQVcsRUFBRSxJQUFTO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUQsQ0FBQzs7Ozs7O0lBQ0QsTUFBTSxDQUFDLEdBQVcsRUFBRSxJQUFTO1FBQzNCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0QsQ0FBQzs7Ozs7O0lBQ0QsS0FBSyxDQUFDLEdBQVcsRUFBRSxJQUFTO1FBQzFCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUQsQ0FBQzs7Ozs7SUFFRCxTQUFTLENBQUMsT0FBWTtRQUVwQixPQUFPLENBQUMsT0FBTyxHQUFHO1lBQ2hCLGNBQWMsRUFBRSxrQkFBa0I7WUFDbEMsNkJBQTZCLEVBQUUsR0FBRztTQUNuQyxDQUFDO1FBQ0YsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRTtZQUNqRSxPQUFPLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQzVEO1FBQ0QsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQzs7Ozs7OztJQUNELE9BQU8sQ0FBQyxNQUFjLEVBQUUsR0FBVyxFQUFFLE9BQVk7UUFDL0MsSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFO1lBQ2hCLElBQUksT0FBTyxPQUFPLENBQUMsSUFBSSxLQUFLLFFBQVEsRUFBRTtnQkFDcEMsT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUM3QztTQUNGO1FBR0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQzthQUMzQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDakIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNsQixPQUFPLElBQUksQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDUixDQUFDOzs7WUEvQ0YsVUFBVTs7OztZQUxGLFVBQVU7WUFDVixZQUFZOzs7Ozs7O0lBT1AsMkJBQXdCOzs7OztJQUFFLDRCQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgQ2FjaGVTZXJ2aWNlIH0gZnJvbSAnLi4vY2FjaGUvc2VydmljZXMvY2FjaGUuc2VydmljZSc7XHJcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMvT2JzZXJ2YWJsZSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBIdHRwU2VydmljZSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCwgcHJpdmF0ZSBjYWNoZTogQ2FjaGVTZXJ2aWNlKSB7XHJcbiAgfVxyXG5cclxuICBnZXQodXJsOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCgnR2V0JywgdXJsLCB0aGlzLnNldEhlYWRlcih7fSkpO1xyXG4gIH1cclxuXHJcbiAgcG9zdCh1cmw6IHN0cmluZywgYm9keTogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLnJlcXVlc3QoJ1Bvc3QnLCB1cmwsIHRoaXMuc2V0SGVhZGVyKHtib2R5fSkpO1xyXG4gIH1cclxuICBwdXQodXJsOiBzdHJpbmcsIGJvZHk6IGFueSk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KCdQdXQnLCB1cmwsIHRoaXMuc2V0SGVhZGVyKHtib2R5fSkpO1xyXG4gIH1cclxuICBkZWxldGUodXJsOiBzdHJpbmcsIGJvZHk6IGFueSk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KCdEZWxldGUnLCB1cmwsIHRoaXMuc2V0SGVhZGVyKHtib2R5fSkpO1xyXG4gIH1cclxuICBwYXRjaCh1cmw6IHN0cmluZywgYm9keTogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLnJlcXVlc3QoJ1BhdGNoJywgdXJsLCB0aGlzLnNldEhlYWRlcih7Ym9keX0pKTtcclxuICB9XHJcblxyXG4gIHNldEhlYWRlcihvcHRpb25zOiBhbnkpIHtcclxuXHJcbiAgICBvcHRpb25zLmhlYWRlcnMgPSB7XHJcbiAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICdBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nOiAnKidcclxuICAgIH07XHJcbiAgICBpZiAodGhpcy5jYWNoZS5leGlzdHMoJ3Nlc3Npb25JZCcpICYmIHRoaXMuY2FjaGUuZ2V0KCdzZXNzaW9uSWQnKSkge1xyXG4gICAgICBvcHRpb25zLmhlYWRlcnNbJ1Nlc3Npb25JZCddID0gdGhpcy5jYWNoZS5nZXQoJ3Nlc3Npb25JZCcpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG9wdGlvbnM7XHJcbiAgfVxyXG4gIHJlcXVlc3QobWV0aG9kOiBzdHJpbmcsIHVybDogc3RyaW5nLCBvcHRpb25zOiBhbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgaWYgKG9wdGlvbnMuYm9keSkge1xyXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMuYm9keSAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgICBvcHRpb25zLmJvZHkgPSBKU09OLnN0cmluZ2lmeShvcHRpb25zLmJvZHkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHJldHVybiB0aGlzLmh0dHAucmVxdWVzdChtZXRob2QsIHVybCwgb3B0aW9ucylcclxuICAgICAgLnBpcGUobWFwKChkYXRhKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICAgIH0pKTtcclxuICB9XHJcbn1cclxuIl19