/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Emitter } from './event-kit';
/**
 * @record
 */
export function PanelOptions() { }
if (false) {
    /** @type {?} */
    PanelOptions.prototype.item;
    /** @type {?|undefined} */
    PanelOptions.prototype.autoFocus;
    /** @type {?|undefined} */
    PanelOptions.prototype.visible;
    /** @type {?|undefined} */
    PanelOptions.prototype.priority;
    /** @type {?|undefined} */
    PanelOptions.prototype.className;
}
export class Panel {
    /**
     * @param {?} options
     * @param {?} viewRegistry
     */
    constructor(options, viewRegistry) {
        this.destroyed = false;
        this.item = options.item;
        this.autoFocus = options.autoFocus == null ? false : options.autoFocus;
        this.visible = options.visible == null ? true : options.visible;
        this.priority = options.priority == null ? 100 : options.priority;
        this.className = options.className;
        this.viewRegistry = viewRegistry;
        this.emitter = new Emitter();
    }
    // Public: Destroy and remove this panel from the UI.
    /**
     * @return {?}
     */
    destroy() {
        if (this.destroyed) {
            return;
        }
        this.destroyed = true;
        this.hide();
        this.emitter.emit('did-destroy', this);
        return this.emitter.dispose();
    }
    /**
     * @return {?}
     */
    getElement() {
        return this.item.getElement(); // 直接返回item的视图，不再包装一层Panel
    }
    /*
      Section: Event Subscription
      */
    // Public: Invoke the given callback when the pane hidden or shown.
    //
    // * `callback` {Function} to be called when the pane is destroyed.
    //   * `visible` {Boolean} true when the panel has been shown
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    onDidChangeVisible(callback) {
        return this.emitter.on('did-change-visible', callback);
    }
    // Public: Invoke the given callback when the pane is destroyed.
    //
    // * `callback` {Function} to be called when the pane is destroyed.
    //   * `panel` {Panel} this panel
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    onDidDestroy(callback) {
        return this.emitter.once('did-destroy', callback);
    }
    /*
      Section: Panel Details
      */
    // Public: Returns the panel's item.
    /**
     * @return {?}
     */
    getItem() {
        return this.item;
    }
    // Public: Returns a {Number} indicating this panel's priority.
    /**
     * @return {?}
     */
    getPriority() {
        return this.priority;
    }
    /**
     * @return {?}
     */
    getClassName() {
        return this.className;
    }
    // Public: Returns a {Boolean} true when the panel is visible.
    /**
     * @return {?}
     */
    isVisible() {
        return this.visible;
    }
    // Public: Hide this panel
    /**
     * @return {?}
     */
    hide() {
        /** @type {?} */
        const wasVisible = this.visible;
        this.visible = false;
        if (wasVisible) {
            this.emitter.emit('did-change-visible', this.visible);
        }
    }
    // Public: Show this panel
    /**
     * @return {?}
     */
    show() {
        /** @type {?} */
        const wasVisible = this.visible;
        this.visible = true;
        if (!wasVisible) {
            this.emitter.emit('did-change-visible', this.visible);
        }
    }
}
if (false) {
    /** @type {?} */
    Panel.prototype.destroyed;
    /** @type {?} */
    Panel.prototype.item;
    /** @type {?} */
    Panel.prototype.autoFocus;
    /** @type {?} */
    Panel.prototype.visible;
    /** @type {?} */
    Panel.prototype.priority;
    /** @type {?} */
    Panel.prototype.className;
    /** @type {?} */
    Panel.prototype.viewRegistry;
    /**
     * @type {?}
     * @private
     */
    Panel.prototype.emitter;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFuZWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2lkZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvaWRlZnJhbWV3b3JrL2dzcC9wYW5lbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFFLE9BQU8sRUFBYyxNQUFNLGFBQWEsQ0FBQzs7OztBQUVsRCxrQ0FNQzs7O0lBTEMsNEJBQVU7O0lBQ1YsaUNBQW9COztJQUNwQiwrQkFBa0I7O0lBQ2xCLGdDQUFrQjs7SUFDbEIsaUNBQW1COztBQUdyQixNQUFNLE9BQU8sS0FBSzs7Ozs7SUFhaEIsWUFBWSxPQUFxQixFQUFFLFlBQTBCO1FBQzNELElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztRQUN6QixJQUFJLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFDdkUsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQztRQUNsRSxJQUFJLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFDbkMsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFDakMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO0lBQy9CLENBQUM7Ozs7O0lBR0QsT0FBTztRQUNMLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNsQixPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDWixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDdkMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2hDLENBQUM7Ozs7SUFFRCxVQUFVO1FBQ1IsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsMEJBQTBCO0lBQzNELENBQUM7Ozs7Ozs7Ozs7Ozs7O0lBWUQsa0JBQWtCLENBQUMsUUFBUTtRQUN6QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLG9CQUFvQixFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3pELENBQUM7Ozs7Ozs7Ozs7O0lBUUQsWUFBWSxDQUFDLFFBQVE7UUFDbkIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDcEQsQ0FBQzs7Ozs7Ozs7SUFPRCxPQUFPO1FBQ0wsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ25CLENBQUM7Ozs7O0lBR0QsV0FBVztRQUNULE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDOzs7O0lBRUQsWUFBWTtRQUNWLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDOzs7OztJQUdELFNBQVM7UUFDUCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQzs7Ozs7SUFHRCxJQUFJOztjQUNJLFVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTztRQUMvQixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNyQixJQUFJLFVBQVUsRUFBRTtZQUNkLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN2RDtJQUNILENBQUM7Ozs7O0lBR0QsSUFBSTs7Y0FDSSxVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU87UUFDL0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDcEIsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNmLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN2RDtJQUNILENBQUM7Q0FDRjs7O0lBbkdDLDBCQUFtQjs7SUFDbkIscUJBQVU7O0lBQ1YsMEJBQW1COztJQUNuQix3QkFBaUI7O0lBQ2pCLHlCQUFpQjs7SUFDakIsMEJBQWtCOztJQUNsQiw2QkFBa0I7Ozs7O0lBQ2xCLHdCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZpZXdSZWdpc3RyeSB9IGZyb20gJy4vdmlldy1yZWdpc3RyeSc7XHJcbmltcG9ydCB7IEVtaXR0ZXIsIERpc3Bvc2FibGUgfSBmcm9tICcuL2V2ZW50LWtpdCc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFBhbmVsT3B0aW9ucyB7XHJcbiAgaXRlbTogYW55O1xyXG4gIGF1dG9Gb2N1cz86IGJvb2xlYW47XHJcbiAgdmlzaWJsZT86IGJvb2xlYW47XHJcbiAgcHJpb3JpdHk/OiBudW1iZXI7XHJcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUGFuZWwge1xyXG4gIC8qXHJcbiAgU2VjdGlvbjogQ29uc3RydWN0aW9uIGFuZCBEZXN0cnVjdGlvblxyXG4gICovXHJcbiAgZGVzdHJveWVkOiBib29sZWFuO1xyXG4gIGl0ZW06IGFueTtcclxuICBhdXRvRm9jdXM6IGJvb2xlYW47XHJcbiAgdmlzaWJsZTogYm9vbGVhbjtcclxuICBwcmlvcml0eTogbnVtYmVyO1xyXG4gIGNsYXNzTmFtZTogc3RyaW5nO1xyXG4gIHZpZXdSZWdpc3RyeTogYW55O1xyXG4gIHByaXZhdGUgZW1pdHRlcjogRW1pdHRlcjtcclxuXHJcbiAgY29uc3RydWN0b3Iob3B0aW9uczogUGFuZWxPcHRpb25zLCB2aWV3UmVnaXN0cnk6IFZpZXdSZWdpc3RyeSkge1xyXG4gICAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTtcclxuICAgIHRoaXMuaXRlbSA9IG9wdGlvbnMuaXRlbTtcclxuICAgIHRoaXMuYXV0b0ZvY3VzID0gb3B0aW9ucy5hdXRvRm9jdXMgPT0gbnVsbCA/IGZhbHNlIDogb3B0aW9ucy5hdXRvRm9jdXM7XHJcbiAgICB0aGlzLnZpc2libGUgPSBvcHRpb25zLnZpc2libGUgPT0gbnVsbCA/IHRydWUgOiBvcHRpb25zLnZpc2libGU7XHJcbiAgICB0aGlzLnByaW9yaXR5ID0gb3B0aW9ucy5wcmlvcml0eSA9PSBudWxsID8gMTAwIDogb3B0aW9ucy5wcmlvcml0eTtcclxuICAgIHRoaXMuY2xhc3NOYW1lID0gb3B0aW9ucy5jbGFzc05hbWU7XHJcbiAgICB0aGlzLnZpZXdSZWdpc3RyeSA9IHZpZXdSZWdpc3RyeTtcclxuICAgIHRoaXMuZW1pdHRlciA9IG5ldyBFbWl0dGVyKCk7XHJcbiAgfVxyXG5cclxuICAvLyBQdWJsaWM6IERlc3Ryb3kgYW5kIHJlbW92ZSB0aGlzIHBhbmVsIGZyb20gdGhlIFVJLlxyXG4gIGRlc3Ryb3koKSB7XHJcbiAgICBpZiAodGhpcy5kZXN0cm95ZWQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlO1xyXG4gICAgdGhpcy5oaWRlKCk7XHJcbiAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnZGlkLWRlc3Ryb3knLCB0aGlzKTtcclxuICAgIHJldHVybiB0aGlzLmVtaXR0ZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgZ2V0RWxlbWVudCgpIHtcclxuICAgIHJldHVybiB0aGlzLml0ZW0uZ2V0RWxlbWVudCgpOyAvLyDnm7TmjqXov5Tlm55pdGVt55qE6KeG5Zu+77yM5LiN5YaN5YyF6KOF5LiA5bGCUGFuZWxcclxuICB9XHJcblxyXG4gIC8qXHJcbiAgU2VjdGlvbjogRXZlbnQgU3Vic2NyaXB0aW9uXHJcbiAgKi9cclxuXHJcbiAgLy8gUHVibGljOiBJbnZva2UgdGhlIGdpdmVuIGNhbGxiYWNrIHdoZW4gdGhlIHBhbmUgaGlkZGVuIG9yIHNob3duLlxyXG4gIC8vXHJcbiAgLy8gKiBgY2FsbGJhY2tgIHtGdW5jdGlvbn0gdG8gYmUgY2FsbGVkIHdoZW4gdGhlIHBhbmUgaXMgZGVzdHJveWVkLlxyXG4gIC8vICAgKiBgdmlzaWJsZWAge0Jvb2xlYW59IHRydWUgd2hlbiB0aGUgcGFuZWwgaGFzIGJlZW4gc2hvd25cclxuICAvL1xyXG4gIC8vIFJldHVybnMgYSB7RGlzcG9zYWJsZX0gb24gd2hpY2ggYC5kaXNwb3NlKClgIGNhbiBiZSBjYWxsZWQgdG8gdW5zdWJzY3JpYmUuXHJcbiAgb25EaWRDaGFuZ2VWaXNpYmxlKGNhbGxiYWNrKSB7XHJcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyLm9uKCdkaWQtY2hhbmdlLXZpc2libGUnLCBjYWxsYmFjayk7XHJcbiAgfVxyXG5cclxuICAvLyBQdWJsaWM6IEludm9rZSB0aGUgZ2l2ZW4gY2FsbGJhY2sgd2hlbiB0aGUgcGFuZSBpcyBkZXN0cm95ZWQuXHJcbiAgLy9cclxuICAvLyAqIGBjYWxsYmFja2Age0Z1bmN0aW9ufSB0byBiZSBjYWxsZWQgd2hlbiB0aGUgcGFuZSBpcyBkZXN0cm95ZWQuXHJcbiAgLy8gICAqIGBwYW5lbGAge1BhbmVsfSB0aGlzIHBhbmVsXHJcbiAgLy9cclxuICAvLyBSZXR1cm5zIGEge0Rpc3Bvc2FibGV9IG9uIHdoaWNoIGAuZGlzcG9zZSgpYCBjYW4gYmUgY2FsbGVkIHRvIHVuc3Vic2NyaWJlLlxyXG4gIG9uRGlkRGVzdHJveShjYWxsYmFjayk6IERpc3Bvc2FibGUge1xyXG4gICAgcmV0dXJuIHRoaXMuZW1pdHRlci5vbmNlKCdkaWQtZGVzdHJveScsIGNhbGxiYWNrKTtcclxuICB9XHJcblxyXG4gIC8qXHJcbiAgU2VjdGlvbjogUGFuZWwgRGV0YWlsc1xyXG4gICovXHJcblxyXG4gIC8vIFB1YmxpYzogUmV0dXJucyB0aGUgcGFuZWwncyBpdGVtLlxyXG4gIGdldEl0ZW0oKSB7XHJcbiAgICByZXR1cm4gdGhpcy5pdGVtO1xyXG4gIH1cclxuXHJcbiAgLy8gUHVibGljOiBSZXR1cm5zIGEge051bWJlcn0gaW5kaWNhdGluZyB0aGlzIHBhbmVsJ3MgcHJpb3JpdHkuXHJcbiAgZ2V0UHJpb3JpdHkoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5wcmlvcml0eTtcclxuICB9XHJcblxyXG4gIGdldENsYXNzTmFtZSgpIHtcclxuICAgIHJldHVybiB0aGlzLmNsYXNzTmFtZTtcclxuICB9XHJcblxyXG4gIC8vIFB1YmxpYzogUmV0dXJucyBhIHtCb29sZWFufSB0cnVlIHdoZW4gdGhlIHBhbmVsIGlzIHZpc2libGUuXHJcbiAgaXNWaXNpYmxlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMudmlzaWJsZTtcclxuICB9XHJcblxyXG4gIC8vIFB1YmxpYzogSGlkZSB0aGlzIHBhbmVsXHJcbiAgaGlkZSgpIHtcclxuICAgIGNvbnN0IHdhc1Zpc2libGUgPSB0aGlzLnZpc2libGU7XHJcbiAgICB0aGlzLnZpc2libGUgPSBmYWxzZTtcclxuICAgIGlmICh3YXNWaXNpYmxlKSB7XHJcbiAgICAgIHRoaXMuZW1pdHRlci5lbWl0KCdkaWQtY2hhbmdlLXZpc2libGUnLCB0aGlzLnZpc2libGUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gUHVibGljOiBTaG93IHRoaXMgcGFuZWxcclxuICBzaG93KCkge1xyXG4gICAgY29uc3Qgd2FzVmlzaWJsZSA9IHRoaXMudmlzaWJsZTtcclxuICAgIHRoaXMudmlzaWJsZSA9IHRydWU7XHJcbiAgICBpZiAoIXdhc1Zpc2libGUpIHtcclxuICAgICAgdGhpcy5lbWl0dGVyLmVtaXQoJ2RpZC1jaGFuZ2UtdmlzaWJsZScsIHRoaXMudmlzaWJsZSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==