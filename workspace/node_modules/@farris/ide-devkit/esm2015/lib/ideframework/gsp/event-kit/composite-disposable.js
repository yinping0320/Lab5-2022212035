/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Disposable } from './disposable';
// Essential: An object that aggregates multiple {Disposable} instances together
// into a single disposable, so they can all be disposed as a group.
//
// These are very useful when subscribing to multiple events.
//
// ## Examples
//
// ```coffee
// {CompositeDisposable} = require 'atom'
//
// class Something
//   constructor: ->
//     @disposables = new CompositeDisposable
//     editor = atom.workspace.getActiveTextEditor()
//     @disposables.add editor.onDidChange ->
//     @disposables.add editor.onDidChangePath ->
//
//   destroy: ->
//     @disposables.dispose()
// ```
export class CompositeDisposable {
    //////
    /// Section: Construction and Destruction
    //////
    // Public: Construct an instance, optionally with one or more disposables
    /**
     * @param {...?} disposables
     */
    constructor(...disposables) {
        this.disposed = false;
        this.disposables = new Set();
        this.add(...disposables);
    }
    // Public: Dispose all disposables added to this composite disposable.
    //
    // If this object has already been disposed, this method has no effect.
    /**
     * @return {?}
     */
    dispose() {
        if (!this.disposed) {
            this.disposed = true;
            this.disposables.forEach((disposable) => disposable.dispose());
            this.disposables = null;
        }
    }
    //////
    /// Section: Managing Disposables
    //////
    // Public: Add disposables to be disposed when the composite is disposed.
    //
    // If this object has already been disposed, this method has no effect.
    //
    // * `...disposables` {Disposable} instances or any objects with `.dispose()`
    //   methods.
    /**
     * @param {...?} disposables
     * @return {?}
     */
    add(...disposables) {
        if (!this.disposed) {
            for (const disposable of disposables) {
                if (this.assertDisposable(disposable)) {
                    this.disposables.add(disposable);
                }
            }
        }
    }
    // Public: Remove a previously added disposable.
    //
    // * `disposable` {Disposable} instance or any object with a `.dispose()`
    //   method.
    /**
     * @param {?} disposable
     * @return {?}
     */
    remove(disposable) {
        if (!this.disposed) {
            this.disposables.delete(disposable);
        }
    }
    // Public: Alias to {CompositeDisposable::remove}
    /**
     * @param {?} disposable
     * @return {?}
     */
    delete(disposable) {
        this.remove(disposable);
    }
    // Public: Clear all disposables. They will not be disposed by the next call
    // to dispose.
    /**
     * @return {?}
     */
    clear() {
        if (!this.disposed) {
            this.disposables.clear();
        }
    }
    /**
     * @param {?} disposable
     * @return {?}
     */
    assertDisposable(disposable) {
        if (!Disposable.isDisposable(disposable)) {
            throw new TypeError('Arguments to CompositeDisposable.add must have a .dispose() method');
        }
        return true;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    CompositeDisposable.prototype.disposed;
    /**
     * @type {?}
     * @private
     */
    CompositeDisposable.prototype.disposables;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9zaXRlLWRpc3Bvc2FibGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2lkZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvaWRlZnJhbWV3b3JrL2dzcC9ldmVudC1raXQvY29tcG9zaXRlLWRpc3Bvc2FibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNCMUMsTUFBTSxPQUFPLG1CQUFtQjs7Ozs7Ozs7SUFTOUIsWUFBWSxHQUFHLFdBQVc7UUFSbEIsYUFBUSxHQUFHLEtBQUssQ0FBQztRQVN2QixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7UUFDN0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxDQUFDO0lBQzNCLENBQUM7Ozs7Ozs7SUFJRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7WUFDckIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1lBQy9ELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7SUFXRCxHQUFHLENBQUMsR0FBRyxXQUFXO1FBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2xCLEtBQUssTUFBTSxVQUFVLElBQUksV0FBVyxFQUFFO2dCQUNwQyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsRUFBRTtvQkFDckMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7aUJBQ2xDO2FBQ0Y7U0FDRjtJQUNILENBQUM7Ozs7Ozs7OztJQUtELE1BQU0sQ0FBQyxVQUFVO1FBQ2YsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDckM7SUFDSCxDQUFDOzs7Ozs7SUFFRCxNQUFNLENBQUMsVUFBVTtRQUNmLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDMUIsQ0FBQzs7Ozs7O0lBR0QsS0FBSztRQUNILElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2xCLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDMUI7SUFDSCxDQUFDOzs7OztJQUVELGdCQUFnQixDQUFDLFVBQVU7UUFDekIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDeEMsTUFBTSxJQUFJLFNBQVMsQ0FBQyxvRUFBb0UsQ0FBQyxDQUFDO1NBQzNGO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0NBQ0Y7Ozs7OztJQXBFQyx1Q0FBeUI7Ozs7O0lBQ3pCLDBDQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpc3Bvc2FibGUgfSBmcm9tICcuL2Rpc3Bvc2FibGUnO1xyXG5cclxuLy8gRXNzZW50aWFsOiBBbiBvYmplY3QgdGhhdCBhZ2dyZWdhdGVzIG11bHRpcGxlIHtEaXNwb3NhYmxlfSBpbnN0YW5jZXMgdG9nZXRoZXJcclxuLy8gaW50byBhIHNpbmdsZSBkaXNwb3NhYmxlLCBzbyB0aGV5IGNhbiBhbGwgYmUgZGlzcG9zZWQgYXMgYSBncm91cC5cclxuLy9cclxuLy8gVGhlc2UgYXJlIHZlcnkgdXNlZnVsIHdoZW4gc3Vic2NyaWJpbmcgdG8gbXVsdGlwbGUgZXZlbnRzLlxyXG4vL1xyXG4vLyAjIyBFeGFtcGxlc1xyXG4vL1xyXG4vLyBgYGBjb2ZmZWVcclxuLy8ge0NvbXBvc2l0ZURpc3Bvc2FibGV9ID0gcmVxdWlyZSAnYXRvbSdcclxuLy9cclxuLy8gY2xhc3MgU29tZXRoaW5nXHJcbi8vICAgY29uc3RydWN0b3I6IC0+XHJcbi8vICAgICBAZGlzcG9zYWJsZXMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZVxyXG4vLyAgICAgZWRpdG9yID0gYXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlVGV4dEVkaXRvcigpXHJcbi8vICAgICBAZGlzcG9zYWJsZXMuYWRkIGVkaXRvci5vbkRpZENoYW5nZSAtPlxyXG4vLyAgICAgQGRpc3Bvc2FibGVzLmFkZCBlZGl0b3Iub25EaWRDaGFuZ2VQYXRoIC0+XHJcbi8vXHJcbi8vICAgZGVzdHJveTogLT5cclxuLy8gICAgIEBkaXNwb3NhYmxlcy5kaXNwb3NlKClcclxuLy8gYGBgXHJcbmV4cG9ydCBjbGFzcyBDb21wb3NpdGVEaXNwb3NhYmxlIHtcclxuICBwcml2YXRlIGRpc3Bvc2VkID0gZmFsc2U7XHJcbiAgcHJpdmF0ZSBkaXNwb3NhYmxlczogU2V0PGFueT47XHJcblxyXG4gIC8vLy8vL1xyXG4gIC8vLyBTZWN0aW9uOiBDb25zdHJ1Y3Rpb24gYW5kIERlc3RydWN0aW9uXHJcbiAgLy8vLy8vXHJcblxyXG4gIC8vIFB1YmxpYzogQ29uc3RydWN0IGFuIGluc3RhbmNlLCBvcHRpb25hbGx5IHdpdGggb25lIG9yIG1vcmUgZGlzcG9zYWJsZXNcclxuICBjb25zdHJ1Y3RvciguLi5kaXNwb3NhYmxlcykge1xyXG4gICAgdGhpcy5kaXNwb3NhYmxlcyA9IG5ldyBTZXQoKTtcclxuICAgIHRoaXMuYWRkKC4uLmRpc3Bvc2FibGVzKTtcclxuICB9XHJcbiAgLy8gUHVibGljOiBEaXNwb3NlIGFsbCBkaXNwb3NhYmxlcyBhZGRlZCB0byB0aGlzIGNvbXBvc2l0ZSBkaXNwb3NhYmxlLlxyXG4gIC8vXHJcbiAgLy8gSWYgdGhpcyBvYmplY3QgaGFzIGFscmVhZHkgYmVlbiBkaXNwb3NlZCwgdGhpcyBtZXRob2QgaGFzIG5vIGVmZmVjdC5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgaWYgKCF0aGlzLmRpc3Bvc2VkKSB7XHJcbiAgICAgIHRoaXMuZGlzcG9zZWQgPSB0cnVlO1xyXG4gICAgICB0aGlzLmRpc3Bvc2FibGVzLmZvckVhY2goKGRpc3Bvc2FibGUpID0+IGRpc3Bvc2FibGUuZGlzcG9zZSgpKTtcclxuICAgICAgdGhpcy5kaXNwb3NhYmxlcyA9IG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8vLy8vL1xyXG4gIC8vLyBTZWN0aW9uOiBNYW5hZ2luZyBEaXNwb3NhYmxlc1xyXG4gIC8vLy8vL1xyXG5cclxuICAvLyBQdWJsaWM6IEFkZCBkaXNwb3NhYmxlcyB0byBiZSBkaXNwb3NlZCB3aGVuIHRoZSBjb21wb3NpdGUgaXMgZGlzcG9zZWQuXHJcbiAgLy9cclxuICAvLyBJZiB0aGlzIG9iamVjdCBoYXMgYWxyZWFkeSBiZWVuIGRpc3Bvc2VkLCB0aGlzIG1ldGhvZCBoYXMgbm8gZWZmZWN0LlxyXG4gIC8vXHJcbiAgLy8gKiBgLi4uZGlzcG9zYWJsZXNgIHtEaXNwb3NhYmxlfSBpbnN0YW5jZXMgb3IgYW55IG9iamVjdHMgd2l0aCBgLmRpc3Bvc2UoKWBcclxuICAvLyAgIG1ldGhvZHMuXHJcbiAgYWRkKC4uLmRpc3Bvc2FibGVzKSB7XHJcbiAgICBpZiAoIXRoaXMuZGlzcG9zZWQpIHtcclxuICAgICAgZm9yIChjb25zdCBkaXNwb3NhYmxlIG9mIGRpc3Bvc2FibGVzKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXNzZXJ0RGlzcG9zYWJsZShkaXNwb3NhYmxlKSkge1xyXG4gICAgICAgICAgdGhpcy5kaXNwb3NhYmxlcy5hZGQoZGlzcG9zYWJsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8vIFB1YmxpYzogUmVtb3ZlIGEgcHJldmlvdXNseSBhZGRlZCBkaXNwb3NhYmxlLlxyXG4gIC8vXHJcbiAgLy8gKiBgZGlzcG9zYWJsZWAge0Rpc3Bvc2FibGV9IGluc3RhbmNlIG9yIGFueSBvYmplY3Qgd2l0aCBhIGAuZGlzcG9zZSgpYFxyXG4gIC8vICAgbWV0aG9kLlxyXG4gIHJlbW92ZShkaXNwb3NhYmxlKTogdm9pZCB7XHJcbiAgICBpZiAoIXRoaXMuZGlzcG9zZWQpIHtcclxuICAgICAgdGhpcy5kaXNwb3NhYmxlcy5kZWxldGUoZGlzcG9zYWJsZSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8vIFB1YmxpYzogQWxpYXMgdG8ge0NvbXBvc2l0ZURpc3Bvc2FibGU6OnJlbW92ZX1cclxuICBkZWxldGUoZGlzcG9zYWJsZSk6IHZvaWQge1xyXG4gICAgdGhpcy5yZW1vdmUoZGlzcG9zYWJsZSk7XHJcbiAgfVxyXG4gIC8vIFB1YmxpYzogQ2xlYXIgYWxsIGRpc3Bvc2FibGVzLiBUaGV5IHdpbGwgbm90IGJlIGRpc3Bvc2VkIGJ5IHRoZSBuZXh0IGNhbGxcclxuICAvLyB0byBkaXNwb3NlLlxyXG4gIGNsZWFyKCkge1xyXG4gICAgaWYgKCF0aGlzLmRpc3Bvc2VkKSB7XHJcbiAgICAgIHRoaXMuZGlzcG9zYWJsZXMuY2xlYXIoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzc2VydERpc3Bvc2FibGUoZGlzcG9zYWJsZSk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKCFEaXNwb3NhYmxlLmlzRGlzcG9zYWJsZShkaXNwb3NhYmxlKSkge1xyXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgdG8gQ29tcG9zaXRlRGlzcG9zYWJsZS5hZGQgbXVzdCBoYXZlIGEgLmRpc3Bvc2UoKSBtZXRob2QnKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxufVxyXG4iXX0=