/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { PanelContainer } from './panel-container';
import { Panel } from './panel';
import { Dock } from './dock';
import { WorkspaceCenter } from './workspace-center';
/**
 * @record
 */
export function PaneContainers() { }
if (false) {
    /** @type {?} */
    PaneContainers.prototype.center;
    /** @type {?} */
    PaneContainers.prototype.left;
    /** @type {?} */
    PaneContainers.prototype.right;
    /** @type {?} */
    PaneContainers.prototype.bottom;
}
/**
 * @record
 */
export function PanelContainers() { }
/** @type {?} */
const gsp = {};
/** @type {?} */
const ALL_LOCATIONS = ['center', 'left', 'right', 'bottom'];
export class Workspace {
    /**
     * @param {?} params
     */
    constructor(params) {
        this.initOptions(params);
        this.initWorkspace();
        this.openers = [];
        this.frmOpeners = [];
        this.useFrmOpener = false;
        this.viewRegistry = params.viewRegistry;
        // this.subscribeToEvents();
    }
    /**
     * @private
     * @param {?} params
     * @return {?}
     */
    initOptions(params) {
        this.config = params.config || {};
    }
    /**
     * @private
     * @return {?}
     */
    initWorkspace() {
        // 创建工作区停靠面板容器。
        this.paneContainers = {
            // 创建主区域。
            center: this.createCenter(),
            // 创建左侧面板。
            left: this.createDock('left'),
            // 创建右侧面板。
            right: this.createDock('right'),
            // 创建底部面板。
            bottom: this.createDock('bottom')
        };
        this.activePaneContainer = this.paneContainers.center;
        // 创建面板容器
        this.panelContainers = {
            top: new PanelContainer(this.viewRegistry, 'top'),
            left: new PanelContainer(this.viewRegistry, 'left', this.paneContainers.left),
            right: new PanelContainer(this.viewRegistry, 'right', this.paneContainers.right),
            bottom: new PanelContainer(this.viewRegistry, 'bottom', this.paneContainers.bottom),
            header: new PanelContainer(this.viewRegistry, 'header'),
            footer: new PanelContainer(this.viewRegistry, 'footer'),
            modal: new PanelContainer(this.viewRegistry, 'modal')
        };
    }
    /**
     * @return {?}
     */
    get paneContainer() {
        return this.paneContainers.center.paneContainer;
    }
    /**
     * 返回工作区元素
     * @return {?}
     */
    getElement() {
    }
    /**
     * 创建主面板
     * @return {?}
     */
    createCenter() {
        return new WorkspaceCenter({ viewRegistry: this.viewRegistry });
    }
    /**
     * 创建停靠面板
     * @param {?} location 停靠面板位置
     * @return {?}
     */
    createDock(location) {
        return new Dock({
            location,
            viewRegistry: this.viewRegistry
        });
    }
    /**
     * 重置工作区
     * @param {?} packageManager 包管理器
     * @return {?}
     */
    reset(packageManager) {
        this.packageManager = packageManager;
        this.destroyed();
        this.initWorkspace();
    }
    // Called by the Serializable mixin during serialization.
    /**
     * 序列化工作区配置
     * @return {?}
     */
    serialize() {
    }
    /**
     * 反序列化工作区配置
     * @param {?} state state
     * @param {?} deserializerManager dm
     * @return {?}
     */
    deserialize(state, deserializerManager) {
    }
    // Updates the application's title and proxy icon based on whichever file is
    // open.
    /**
     * @return {?}
     */
    updateWindowTitle() {
    }
    /**
     * @param {?} itemOrURI
     * @param {?=} options
     * @return {?}
     */
    open(itemOrURI, options = {}) {
        /** @type {?} */
        let uri;
        /** @type {?} */
        let item;
        if (typeof itemOrURI === 'string') {
            uri = itemOrURI; // this.project.resolvePath(itemOrURI);
        }
        else if (itemOrURI) {
            item = itemOrURI;
            if (typeof item.getURI === 'function') {
                uri = item.getURI();
            }
        }
        if (!this.config.get('core.allowPendingPaneItems')) {
            options.pending = false;
        }
        // Avoid adding URLs as recent documents to work-around this Spotlight crash:
        // https://github.com/atom/atom/issues/10071
        // if (uri && (!url.parse(uri).protocol || process.platform === 'win32')) {
        //   this.applicationDelegate.addRecentDocument(uri);
        // }
        /** @type {?} */
        let pane;
        /** @type {?} */
        let itemExistsInWorkspace;
        // Try to find an existing item in the workspace.
        if (item || uri) {
            if (options.pane) {
                pane = options.pane;
            }
            else if (options.searchAllPanes) {
                pane = item ? this.paneForItem(item) : this.paneForURI(uri);
            }
            else {
                // If an item with the given URI is already in the workspace, assume
                // that item's pane container is the preferred location for that URI.
                /** @type {?} */
                let container;
                if (uri) {
                    container = this.paneContainerForURI(uri);
                }
                if (!container) {
                    container = this.getActivePaneContainer();
                }
                // The `split` option affects where we search for the item.
                pane = container.getActivePane();
                switch (options.split) {
                    case 'left':
                        pane = pane.findLeftmostSibling();
                        break;
                    case 'right':
                        pane = pane.findRightmostSibling();
                        break;
                    case 'up':
                        pane = pane.findTopmostSibling();
                        break;
                    case 'down':
                        pane = pane.findBottommostSibling();
                        break;
                }
            }
            if (pane) {
                if (item) {
                    itemExistsInWorkspace = pane.getItems().includes(item);
                }
                else {
                    item = pane.itemForURI(uri);
                    itemExistsInWorkspace = item != null;
                }
            }
        }
        // If we already have an item at this stage, we won't need to do an async
        // lookup of the URI, so we yield the event loop to ensure this method
        // is consistently asynchronous.
        if (item) {
            Promise.resolve();
        }
        if (!itemExistsInWorkspace) {
            item = item || this.createItemForURI(uri, options);
            if (!item) {
                return;
            }
            if (options.pane) {
                pane = options.pane;
            }
            else {
                /** @type {?} */
                let location = options.location;
                // if (!location && !options.split && uri && this.enablePersistence) {
                //   // location = await;
                //   this.itemLocationStore.load(uri);
                // }
                if (!location && typeof item.getDefaultLocation === 'function') {
                    location = item.getDefaultLocation();
                }
                /** @type {?} */
                const allowedLocations = typeof item.getAllowedLocations === 'function' ? item.getAllowedLocations() : ALL_LOCATIONS;
                location = allowedLocations.includes(location) ? location : allowedLocations[0];
                /** @type {?} */
                const container = this.paneContainers[location] || this.getCenter();
                pane = container.getActivePane();
                switch (options.split) {
                    case 'left':
                        pane = pane.findLeftmostSibling();
                        break;
                    case 'right':
                        pane = pane.findOrCreateRightmostSibling();
                        break;
                    case 'up':
                        pane = pane.findTopmostSibling();
                        break;
                    case 'down':
                        pane = pane.findOrCreateBottommostSibling();
                        break;
                }
            }
        }
        if (!options.pending && (pane.getPendingItem() === item)) {
            pane.clearPendingItem();
        }
        this.itemOpened(item);
        if (options.activateItem === false) {
            pane.addItem(item, { pending: options.pending });
        }
        else {
            pane.activateItem(item, { pending: options.pending });
        }
        if (options.activatePane !== false) {
            pane.activate();
        }
        /** @type {?} */
        let initialColumn = 0;
        /** @type {?} */
        let initialLine = 0;
        if (!Number.isNaN(options.initialLine)) {
            initialLine = options.initialLine;
        }
        if (!Number.isNaN(options.initialColumn)) {
            initialColumn = options.initialColumn;
        }
        if (initialLine >= 0 || initialColumn >= 0) {
            if (typeof item.setCursorBufferPosition === 'function') {
                item.setCursorBufferPosition([initialLine, initialColumn]);
            }
        }
        /** @type {?} */
        const index = pane.getActiveItemIndex();
        return item;
    }
    /**
     * @param {?} itemOrURI
     * @return {?}
     */
    hide(itemOrURI) {
        /** @type {?} */
        let foundItems = false;
        // If any visible item has the given URI, hide it
        for (const container of this.getPaneContainers()) {
            /** @type {?} */
            const isCenter = container === this.getCenter();
            if (isCenter || ((/** @type {?} */ (container))).isVisible()) {
                for (const pane of container.getPanes()) {
                    /** @type {?} */
                    const activeItem = pane.getActiveItem();
                    /** @type {?} */
                    const foundItem = (activeItem != null && (activeItem === itemOrURI ||
                        typeof activeItem.getURI === 'function' && activeItem.getURI() === itemOrURI));
                    if (foundItem) {
                        foundItems = true;
                        // We can't really hide the center so we just destroy the item.
                        if (isCenter) {
                            pane.destroyItem(activeItem);
                        }
                        else {
                            ((/** @type {?} */ (container))).hide();
                        }
                    }
                }
            }
        }
        return foundItems;
    }
    /**
     * @param {?} itemOrURI
     * @return {?}
     */
    toggle(itemOrURI) {
        if (this.hide(itemOrURI)) {
            return Promise.resolve();
        }
        else {
            return this.open(itemOrURI, { searchAllPanes: true });
        }
    }
    /**
     * @param {?=} fileUri
     * @param {?=} options
     * @return {?}
     */
    openSync(fileUri = '', options = { initialColumn: '', initialLine: '', activateItem: '', activatePane: '' }) {
        const { initialLine, initialColumn } = options;
        /** @type {?} */
        const activatePane = options.activatePane != null ? options.activatePane : true;
        /** @type {?} */
        const activateItem = options.activateItem != null ? options.activateItem : true;
        /** @type {?} */
        const uri = fileUri;
        // this.project.resolvePath(uri_);
        /** @type {?} */
        let item = this.getActivePane().itemForURI(uri);
        if (uri && (item == null)) {
            for (const opener of this.getOpeners()) {
                item = opener(uri, options);
                if (item) {
                    break;
                }
            }
        }
        if (item == null) {
            item = this.project.openSync(uri, { initialLine, initialColumn });
        }
        if (activateItem) {
            this.getActivePane().activateItem(item);
        }
        this.itemOpened(item);
        if (activatePane) {
            this.getActivePane().activate();
        }
        return item;
    }
    /**
     * @param {?} uri
     * @param {?} pane
     * @return {?}
     */
    openURIInPane(uri, pane) {
        return this.open(uri, { pane });
    }
    /**
     * @param {?} uri
     * @param {?} options
     * @return {?}
     */
    createItemForURI(uri, options) {
        if (uri != null) {
            for (const opener of this.getOpeners()) {
                /** @type {?} */
                const item = opener(uri, options);
                if (item != null) {
                    if (!item.getURI || typeof item.getURI !== 'function' || !item.getUri || typeof item.getURI !== 'function') {
                        item.getUri = () => uri;
                    }
                    return item;
                }
            }
        }
        try {
            // return this.openTextFile(uri, options);
        }
        catch (error) {
            // switch (error.code) {
            //   case 'CANCELLED':
            //     return Promise.resolve();
            //   case 'EACCES':
            //     this.notificationManager.addWarning(`Permission denied '${error.path}'`);
            //     return Promise.resolve();
            //   case 'EPERM':
            //   case 'EBUSY':
            //   case 'ENXIO':
            //   case 'EIO':
            //   case 'ENOTCONN':
            //   case 'UNKNOWN':
            //   case 'ECONNRESET':
            //   case 'EINVAL':
            //   case 'EMFILE':
            //   case 'ENOTDIR':
            //   case 'EAGAIN':
            //     this.notificationManager.addWarning(
            //       `Unable to open '${error.path != null ? error.path : uri}'`,
            //       { detail: error.message }
            //     );
            //     return Promise.resolve();
            //   default:
            //     throw error;
            // }
        }
    }
    /**
     * @return {?}
     */
    reopenItem() {
        /** @type {?} */
        const uri = this.destroyedItemURIs.pop();
        if (uri) {
            return this.open(uri);
        }
        else {
            return Promise.resolve();
        }
    }
    /**
     * @param {?} opener
     * @return {?}
     */
    addOpener(opener) {
        this.openers.push(opener);
        // return new Disposable(() => { _.remove(this.openers, opener); });
    }
    /**
     * @param {?} opener
     * @return {?}
     */
    addFrmOpener(opener) {
        if (!this.useFrmOpener) {
            this.useFrmOpener = true;
        }
        this.frmOpeners.push(opener);
    }
    /**
     * @return {?}
     */
    getOpeners() {
        return this.useFrmOpener ? this.frmOpeners : this.openers;
    }
    /**
     * @return {?}
     */
    getPaneItems() {
        return new Array().concat(this.getPaneContainers().map(container => container.getPaneItems()));
    }
    /**
     * @return {?}
     */
    getActivePaneItem() {
        return this.getActivePaneContainer().getActivePaneItem();
    }
    /**
     * @return {?}
     */
    saveAll() {
        this.getPaneContainers().forEach(container => {
            container.saveAll();
        });
    }
    /**
     * @param {?} options
     * @return {?}
     */
    confirmClose(options) {
        return Promise.all(this.getPaneContainers().map(container => container.confirmClose(options))).then((results) => !results.find(item => item === false));
    }
    /**
     * @return {?}
     */
    saveActivePaneItem() {
        return this.getCenter().getActivePane().saveActiveItem();
    }
    /**
     * @return {?}
     */
    saveActivePaneItemAs() {
        this.getCenter().getActivePane().saveActiveItemAs();
    }
    /**
     * @return {?}
     */
    destroyActivePaneItem() {
        return this.getActivePane().destroyActiveItem();
    }
    /**
     * @return {?}
     */
    getActivePaneContainer() {
        return this.activePaneContainer;
    }
    /**
     * @return {?}
     */
    getPanes() {
        return new Array().concat(this.getPaneContainers().map(container => container.getPanes()));
    }
    /**
     * @return {?}
     */
    getVisiblePanes() {
        return new Array().concat(this.getVisiblePaneContainers().map(container => container.getPanes()));
    }
    /**
     * @return {?}
     */
    getActivePane() {
        return this.getActivePaneContainer().getActivePane();
    }
    /**
     * @return {?}
     */
    activateNextPane() {
        return this.getActivePaneContainer().activateNextPane();
    }
    /**
     * @return {?}
     */
    activatePreviousPane() {
        return this.getActivePaneContainer().activatePreviousPane();
    }
    /**
     * @param {?} uri
     * @return {?}
     */
    paneContainerForURI(uri) {
        return this.getPaneContainers().find(container => !!container.paneForURI(uri));
    }
    /**
     * @param {?} uri
     * @return {?}
     */
    paneContainerForItem(uri) {
        return this.getPaneContainers().find(container => !!container.paneForItem(uri));
    }
    /**
     * @param {?} uri
     * @return {?}
     */
    paneForURI(uri) {
        for (const location of this.getPaneContainers()) {
            /** @type {?} */
            const pane = location.paneForURI(uri);
            if (pane != null) {
                return pane;
            }
        }
    }
    /**
     * @param {?} item
     * @return {?}
     */
    paneForItem(item) {
        for (const location of this.getPaneContainers()) {
            /** @type {?} */
            const pane = location.paneForItem(item);
            if (pane != null) {
                return pane;
            }
        }
    }
    /**
     * @return {?}
     */
    destroyActivePane() {
        /** @type {?} */
        const activePane = this.getActivePane();
        if (activePane != null) {
            activePane.destroy();
        }
    }
    /**
     * @return {?}
     */
    closeActivePaneItemOrEmptyPaneOrWindow() {
        if (this.getCenter().getActivePaneItem() != null) {
            this.getCenter().getActivePane().destroyActiveItem();
        }
        else if (this.getCenter().getPanes().length > 1) {
            this.getCenter().destroyActivePane();
        }
        else if (this.config.get('core.closeEmptyWindows')) {
            // 原为关闭atom应用窗口。ide中暂不关闭整个窗口。
            // atom.close();
        }
    }
    /**
     * @param {?} item
     * @return {?}
     */
    itemOpened(item) {
    }
    /**
     * @return {?}
     */
    destroyed() {
        this.paneContainers.center.destroy();
        this.paneContainers.left.destroy();
        this.paneContainers.right.destroy();
        this.paneContainers.bottom.destroy();
        for (const panelLocation in this.panelContainers) {
            if (this.panelContainers.hasOwnProperty(panelLocation)) {
                /** @type {?} */
                const panelContainer = this.panelContainers[panelLocation];
                this.paneContainer.destroy();
            }
        }
    }
    /**
     * @return {?}
     */
    getCenter() {
        return this.paneContainers.center;
    }
    /**
     * @return {?}
     */
    getLeftDock() {
        return this.paneContainers.left;
    }
    /**
     * @return {?}
     */
    getRightDock() {
        return this.paneContainers.right;
    }
    /**
     * @return {?}
     */
    getBottomDock() {
        return this.paneContainers.bottom;
    }
    /**
     * @return {?}
     */
    getPaneContainers() {
        return [
            this.paneContainers.center,
            this.paneContainers.left,
            this.paneContainers.right,
            this.paneContainers.bottom
        ];
    }
    /**
     * @return {?}
     */
    getVisiblePaneContainers() {
        /** @type {?} */
        const center = this.getCenter();
        return this.getPaneContainers()
            .filter(container => container === center || ((/** @type {?} */ (container))).isVisible());
    }
    /**
     * @return {?}
     */
    getBottomPanels() {
        return this.getPanels('bottom');
    }
    /**
     * @param {?} options
     * @return {?}
     */
    addBottomPanel(options) {
        return this.addPanel('bottom', options);
    }
    /**
     * @return {?}
     */
    getLeftPanels() {
        return this.getPanels('left');
    }
    /**
     * @param {?} options
     * @return {?}
     */
    addLeftPanel(options) {
        return this.addPanel('left', options);
    }
    /**
     * @return {?}
     */
    getRightPanels() {
        return this.getPanels('right');
    }
    /**
     * @param {?} options
     * @return {?}
     */
    addRightPanel(options) {
        return this.addPanel('right', options);
    }
    /**
     * @return {?}
     */
    getTopPanels() {
        return this.getPanels('top');
    }
    /**
     * @param {?} options
     * @return {?}
     */
    addTopPanel(options) {
        return this.addPanel('top', options);
    }
    /**
     * @return {?}
     */
    getHeaderPanels() {
        return this.getPanels('header');
    }
    /**
     * @param {?} options
     * @return {?}
     */
    addHeaderPanel(options) {
        return this.addPanel('header', options);
    }
    /**
     * @return {?}
     */
    getFooterPanels() {
        return this.getPanels('footer');
    }
    /**
     * @param {?} options
     * @return {?}
     */
    addFooterPanel(options) {
        return this.addPanel('footer', options);
    }
    /**
     * @return {?}
     */
    getModalPanels() {
        return this.getPanels('modal');
    }
    /**
     * @param {?} options
     * @return {?}
     */
    addModalPanel(options) {
        return this.addPanel('modal', options);
    }
    /**
     * @param {?} item
     * @return {?}
     */
    panelForItem(item) {
        for (const location in this.panelContainers) {
            if (this.panelContainers.hasOwnProperty(location)) {
                /** @type {?} */
                const panel = this.panelContainers[location].panelForItem(item);
                if (panel != null) {
                    return panel;
                }
            }
        }
        return null;
    }
    /**
     * @param {?} location
     * @return {?}
     */
    getPanelContainer(location) {
        return this.panelContainers[location];
    }
    /**
     * @param {?} location
     * @return {?}
     */
    getPanels(location) {
        return this.panelContainers[location].getPanels();
    }
    /**
     * @param {?} location
     * @param {?} options
     * @return {?}
     */
    addPanel(location, options) {
        /** @type {?} */
        const panel = new Panel(options, this.viewRegistry);
        return this.panelContainers[location].addPanel(panel);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    Workspace.prototype.paneContainers;
    /**
     * @type {?}
     * @private
     */
    Workspace.prototype.panelContainers;
    /**
     * @type {?}
     * @private
     */
    Workspace.prototype.activePaneContainer;
    /**
     * @type {?}
     * @private
     */
    Workspace.prototype.viewRegistry;
    /**
     * @type {?}
     * @private
     */
    Workspace.prototype.packageManager;
    /**
     * @type {?}
     * @private
     */
    Workspace.prototype.openers;
    /**
     * @type {?}
     * @private
     */
    Workspace.prototype.frmOpeners;
    /**
     * @type {?}
     * @private
     */
    Workspace.prototype.useFrmOpener;
    /**
     * @type {?}
     * @private
     */
    Workspace.prototype.notificationManager;
    /**
     * @type {?}
     * @private
     */
    Workspace.prototype.config;
    /**
     * @type {?}
     * @private
     */
    Workspace.prototype.destroyedItemURIs;
    /**
     * @type {?}
     * @private
     */
    Workspace.prototype.project;
}
//# sourceMappingURL=data:application/json;base64,