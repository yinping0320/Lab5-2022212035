/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ModalFrm } from './modal-frm';
import { forkJoin, Observable, of } from 'rxjs';
import { map } from 'rxjs/operators';
/**
 * 提供ide运行所需的方法，供插件使用
 */
export class Ide {
    /**
     * @private
     * @return {?}
     */
    get isTop() {
        return window.top === window;
    }
    /**
     * @private
     * @template THIS
     * @this {THIS}
     * @return {THIS}
     */
    get parentInstance() {
        /** @type {?} */
        let instance = (/** @type {?} */ (this));
        /** @type {?} */
        const top = window.top;
        if (top && top['gsp']) {
            instance = top['gsp'].ide;
        }
        return instance;
    }
    /**
     * @return {?}
     */
    get messager() {
        return this.msgr;
    }
    /**
     * @param {?=} parent
     */
    constructor(parent) {
        this.events = new Map();
        this.modal = new ModalFrm();
        this.frameId = this.getParam('frameID');
        if (this.isTop) {
            this.commandData = new Map();
        }
        if (parent) {
            this.msgr = parent.messager;
        }
    }
    /* #region  frame util */
    /**
     * @param {?} key
     * @return {?}
     */
    getParam(key) {
        /** @type {?} */
        const params = new URLSearchParams(window.location.search);
        return unescape(params.get(key));
    }
    /**
     * @param {?=} frameId
     * @return {?}
     */
    getInitCommandData(frameId) {
        if (!this.isTop) {
            frameId = frameId || this.frameId;
            return this.parentInstance.getInitCommandData(frameId);
        }
        else {
            return this.commandData.get(frameId);
        }
    }
    /**
     * @param {?} frameId
     * @param {?} data
     * @return {?}
     */
    setInitCommandData(frameId, data) {
        if (!this.isTop) {
            this.parentInstance.setInitCommandData(frameId, data);
        }
        else {
            this.commandData.set(frameId, data);
        }
    }
    /**
     * @param {?} messager
     * @return {?}
     */
    setMessager(messager) {
        this.msgr = messager;
    }
    /* #endregion */
    /* #region  event */
    /**
     * @param {?} cb
     * @return {?}
     */
    onPanelAdded(cb) {
        this.on('panel-added', cb);
    }
    /**
     * @param {?} cb
     * @return {?}
     */
    onPanelRemoved(cb) {
        this.on('panel-removed', cb);
    }
    /**
     * @param {?} cb
     * @return {?}
     */
    onPanelShown(cb) {
        this.on('panel-shown', cb);
    }
    /**
     * @param {?} cb
     * @return {?}
     */
    onPanelHidden(cb) {
        this.on('panel-hidden', cb);
    }
    /**
     * @param {?} cb
     * @return {?}
     */
    onModalConfirming(cb) {
        if (this.parentInstance !== this) {
            this.parentInstance.onModalConfirming(cb);
        }
        else {
            this.on('confirm-modal', cb);
        }
    }
    /**
     * @param {?} cb
     * @return {?}
     */
    onModalCancelling(cb) {
        this.on('cancel-modal', cb);
    }
    /**
     * @param {?} cb
     * @return {?}
     */
    onLeftActivated(cb) {
        if (this.isTop) {
            this.on('activate-left', cb);
        }
        else {
            this.parentInstance.onLeftActivated(cb);
        }
    }
    /**
     * @param {?} cb
     * @return {?}
     */
    onNotifyShown(cb) {
        this.on('show-notify', cb);
    }
    /**
     * @param {?} cb
     * @return {?}
     */
    onLoadingShown(cb) {
        this.on('show-loading', cb);
    }
    /**
     * @param {?} cb
     * @return {?}
     */
    onLoadingHidden(cb) {
        this.on('hide-loading', cb);
    }
    /**
     * @param {?} cb
     * @return {?}
     */
    onDesignerStatusSet(cb) {
        this.on('set-designer-status', cb);
    }
    // onBeforeClose(id: string, cb: () => boolean) {
    //   this.on('on-before-close', ({metadataId}) => {
    //     if (id === metadataId) {
    //       return cb();
    //     }
    //     return true;
    //   });
    // }
    /**
     * @param {?} id
     * @param {?} cb
     * @return {?}
     */
    onCloseTab(id, cb) {
        if (!this.isTop) {
            return this.parentInstance.onCloseTab(id, cb);
        }
        this.on('close-tab', tabId => {
            if (id === tabId) {
                return cb();
            }
            return true;
        });
    }
    /* #endregion */
    /* #region  panel */
    /**
     * @param {?} options
     * @return {?}
     */
    addPanel(options) {
        this.emit('panel-added', options);
    }
    /* #endregion */
    /* #region  modal */
    /**
     * @param {?} options
     * @return {?}
     */
    addModal(options) {
        this.emit('panel-added', options, 'modal');
    }
    /**
     * @param {?=} id
     * @return {?}
     */
    closeModal(id) {
        if (this.parentInstance !== this) {
            this.parentInstance.closeModal(id);
        }
        this.emit('panel-removed', id, 'modal');
    }
    /**
     * @param {?} id
     * @return {?}
     */
    confirmModal(id) {
        /** @type {?} */
        let result = true;
        // if (this.parentInstance !== this) {
        //   result = this.parentInstance.confirmModal(id);
        // }
        result = result && (/** @type {?} */ (this.emit('confirm-modal', id)));
        return result;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    cancelModal(id) {
        /** @type {?} */
        let result = true;
        if (this.parentInstance !== this) {
            result = this.parentInstance.cancelModal(id);
        }
        result = result && (/** @type {?} */ (this.emit('cancel-modal', id)));
        return result;
    }
    // addLeft    registryOpener....
    /* #endregion */
    /* #region  left rigion */
    /**
     * @param {?=} frameId
     * @return {?}
     */
    activateLeft(frameId) {
        frameId = frameId || this.frameId;
        if (this.isTop) {
            this.emit('activate-left', frameId);
        }
        else {
            this.parentInstance.activateLeft(frameId);
        }
    }
    /* #endregion */
    /**
     * @param {?} level
     * @param {?} content
     * @return {?}
     */
    notify(level, content) {
        if (this.isTop) {
            this.emit('show-notify', level, content);
        }
        else {
            this.parentInstance.notify(level, content);
        }
    }
    /**
     * @param {?=} message
     * @return {?}
     */
    loading(message) {
        if (this.isTop) {
            this.emit('show-loading', message);
        }
        else {
            this.parentInstance.loading(message);
        }
    }
    /**
     * @return {?}
     */
    loaded() {
        if (this.isTop) {
            this.emit('hide-loading');
        }
        else {
            this.parentInstance.loaded();
        }
    }
    /**
     * @param {?} metadataId
     * @param {?} isDirty
     * @return {?}
     */
    setDesignerStatus(metadataId, isDirty) {
        if (this.isTop) {
            this.emit('set-designer-status', { id: metadataId, isDirty });
        }
        else {
            this.parentInstance.setDesignerStatus(metadataId, isDirty);
        }
    }
    // closeDesigner(metadataId: string) {
    //   if (this.isTop) {
    //     this.emit('close-designer', {id: metadataId});
    //   } else {
    //     this.parentInstance.closeDesigner(metadataId);
    //   }
    // }
    /**
     * @param {?} id
     * @return {?}
     */
    notifyCloseTab(id) {
        if (!this.isTop) {
            return this.parentInstance.notifyCloseTab(id);
        }
        /** @type {?} */
        const result = this.emit('close-tab', id);
        if (result == null) {
            return of(true);
        }
        else if (typeof result === 'boolean') {
            return of(result);
        }
        else {
            return result;
        }
    }
    /**
     * @param {?} workspace
     * @return {?}
     */
    registerIDE(workspace) {
        // 用来把ide view实例与gsp对象绑定。
        // TODO： view实例监听gsp对象的操作放在这里。
        if (typeof workspace.onCloseDesigner === 'function') {
            this.on('close-designer', workspace.onCloseDesigner.bind(workspace));
        }
    }
    /* #region  private method */
    /**
     * @private
     * @param {?} name
     * @param {?} cb
     * @return {?}
     */
    on(name, cb) {
        /** @type {?} */
        let callbacks = this.events.get(name);
        if (!callbacks) {
            callbacks = [cb];
            this.events.set(name, callbacks);
        }
        else {
            callbacks.push(cb);
        }
    }
    /**
     * @private
     * @param {?} name
     * @param {...?} params
     * @return {?}
     */
    emit(name, ...params) {
        /** @type {?} */
        const callbacks = this.events.get(name);
        if (!callbacks || !callbacks.length) {
            return;
        }
        /** @type {?} */
        let result = true;
        /** @type {?} */
        const observableResult = new Array();
        for (const cb of callbacks) {
            /** @type {?} */
            const cbResult = cb(...params);
            if (cbResult == null) {
                continue;
            }
            if (typeof cbResult === 'boolean') {
                result = result && cbResult;
            }
            else if (typeof cbResult.subscribe === 'function' && cbResult.constructor.name === Observable.name) {
                // 判断条件不能使用cbResult instanceof Observable,因为cb可能是来自于不同的iframe环境，导致跟这里的Observable构造函数不一样。
                observableResult.push(cbResult);
            }
        }
        if (observableResult.length) {
            return forkJoin([...observableResult, of(result)]).pipe(map(results => {
                return results.reduce((previous, current) => previous && current);
            }));
        }
        else {
            return result;
        }
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    Ide.prototype.frameId;
    /**
     * @type {?}
     * @private
     */
    Ide.prototype.events;
    /**
     * @type {?}
     * @private
     */
    Ide.prototype.modal;
    /**
     * @type {?}
     * @private
     */
    Ide.prototype.commandData;
    /**
     * @type {?}
     * @private
     */
    Ide.prototype.msgr;
}
//# sourceMappingURL=data:application/json;base64,