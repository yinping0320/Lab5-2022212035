/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CompositeDisposable, Emitter } from './event-kit';
export class PanelContainer {
    /**
     * @param {?} viewRegistry
     * @param {?} location
     * @param {?=} dock
     */
    constructor(viewRegistry, location, dock = null) {
        this.viewRegistry = viewRegistry;
        this.location = location;
        this.dock = dock;
        this.panels = [];
        this.emitter = new Emitter();
        this.subscriptions = new CompositeDisposable();
    }
    /**
     * @return {?}
     */
    destroy() {
        for (const panel of this.getPanels()) {
            panel.destroy();
        }
    }
    /**
     * @return {?}
     */
    getElement() {
    }
    /*
      Section: Event Subscription
      */
    /**
     * @param {?} callback
     * @return {?}
     */
    onDidAddPanel(callback) {
        return this.emitter.on('did-add-panel', callback);
    }
    /**
     * @param {?} callback
     * @return {?}
     */
    onDidRemovePanel(callback) {
        return this.emitter.on('did-remove-panel', callback);
    }
    /**
     * @param {?} callback
     * @return {?}
     */
    onDidDestroy(callback) {
        return this.emitter.once('did-destroy', callback);
    }
    /**
     * @return {?}
     */
    getLocation() {
        return this.location;
    }
    /**
     * @return {?}
     */
    isModal() { return this.location === 'modal'; }
    /**
     * @return {?}
     */
    getPanels() { return this.panels.slice(); }
    /**
     * @param {?} panel
     * @return {?}
     */
    addPanel(panel) {
        this.subscriptions.add(panel.onDidDestroy(this.panelDestroyed.bind(this)));
        /** @type {?} */
        const index = this.getPanelIndex(panel);
        if (index === this.panels.length) {
            this.panels.push(panel);
        }
        else {
            this.panels.splice(index, 0, panel);
        }
        this.emitter.emit('did-add-panel', { panel, index });
        return panel;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    panelForItem(item) {
        for (const panel of this.panels) {
            if (panel.getItem() === item) {
                return panel;
            }
        }
        return null;
    }
    /**
     * @param {?} panel
     * @return {?}
     */
    panelDestroyed(panel) {
        /** @type {?} */
        const index = this.panels.indexOf(panel);
        if (index > -1) {
            this.panels.splice(index, 1);
            this.emitter.emit('did-remove-panel', { panel, index });
        }
    }
    /**
     * @param {?} panel
     * @return {?}
     */
    getPanelIndex(panel) {
        /** @type {?} */
        const priority = panel.getPriority();
        if (['bottom', 'right'].find(item => item === this.location)) {
            for (let i = this.panels.length - 1; i >= 0; i--) {
                /** @type {?} */
                const p = this.panels[i];
                if (priority < p.getPriority()) {
                    return i + 1;
                }
            }
            return 0;
        }
        else {
            for (let i = 0; i < this.panels.length; i++) {
                /** @type {?} */
                const p = this.panels[i];
                if (priority < p.getPriority()) {
                    return i;
                }
            }
            return this.panels.length;
        }
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    PanelContainer.prototype.emitter;
    /**
     * @type {?}
     * @private
     */
    PanelContainer.prototype.subscriptions;
    /** @type {?} */
    PanelContainer.prototype.panels;
    /**
     * @type {?}
     * @private
     */
    PanelContainer.prototype.viewRegistry;
    /**
     * @type {?}
     * @private
     */
    PanelContainer.prototype.location;
    /**
     * @type {?}
     * @private
     */
    PanelContainer.prototype.dock;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFuZWwtY29udGFpbmVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9pZGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2lkZWZyYW1ld29yay9nc3AvcGFuZWwtY29udGFpbmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFJQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsT0FBTyxFQUFjLE1BQU0sYUFBYSxDQUFDO0FBRXZFLE1BQU0sT0FBTyxjQUFjOzs7Ozs7SUFNekIsWUFDVSxZQUEwQixFQUMxQixRQUF1QixFQUN2QixPQUFhLElBQUk7UUFGakIsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDMUIsYUFBUSxHQUFSLFFBQVEsQ0FBZTtRQUN2QixTQUFJLEdBQUosSUFBSSxDQUFhO1FBTDNCLFdBQU0sR0FBWSxFQUFFLENBQUM7UUFNakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQzdCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxtQkFBbUIsRUFBRSxDQUFDO0lBQ2pELENBQUM7Ozs7SUFFSCxPQUFPO1FBQ0wsS0FBSyxNQUFNLEtBQUssSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFLEVBQUU7WUFDcEMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQ2pCO0lBQ0gsQ0FBQzs7OztJQUVELFVBQVU7SUFDVixDQUFDOzs7Ozs7OztJQU1ELGFBQWEsQ0FBQyxRQUFRO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3BELENBQUM7Ozs7O0lBRUQsZ0JBQWdCLENBQUMsUUFBUTtRQUN2QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLGtCQUFrQixFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7Ozs7O0lBRUQsWUFBWSxDQUFDLFFBQVE7UUFDbkIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FB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aUJBQUU7YUFDOUM7WUFDRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1NBQzNCO0lBQ0gsQ0FBQztDQUNGOzs7Ozs7SUE3RkMsaUNBQXlCOzs7OztJQUN6Qix1Q0FBMkM7O0lBRTNDLGdDQUFxQjs7Ozs7SUFHbkIsc0NBQWtDOzs7OztJQUNsQyxrQ0FBK0I7Ozs7O0lBQy9CLDhCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhbmVsIH0gZnJvbSAnLi9wYW5lbCc7XHJcbmltcG9ydCB7IERvY2sgfSBmcm9tICcuL2RvY2snO1xyXG5pbXBvcnQgeyBQYW5lbExvY2F0aW9uIH0gZnJvbSAnLi90eXBlcyc7XHJcbmltcG9ydCB7IFZpZXdSZWdpc3RyeSB9IGZyb20gJy4vdmlldy1yZWdpc3RyeSc7XHJcbmltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUsIEVtaXR0ZXIsIERpc3Bvc2FibGUgfSBmcm9tICcuL2V2ZW50LWtpdCc7XHJcblxyXG5leHBvcnQgY2xhc3MgUGFuZWxDb250YWluZXIge1xyXG4gIHByaXZhdGUgZW1pdHRlcjogRW1pdHRlcjtcclxuICBwcml2YXRlIHN1YnNjcmlwdGlvbnM6IENvbXBvc2l0ZURpc3Bvc2FibGU7XHJcblxyXG4gIHBhbmVsczogUGFuZWxbXSA9IFtdO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgdmlld1JlZ2lzdHJ5OiBWaWV3UmVnaXN0cnksXHJcbiAgICBwcml2YXRlIGxvY2F0aW9uOiBQYW5lbExvY2F0aW9uLFxyXG4gICAgcHJpdmF0ZSBkb2NrOiBEb2NrID0gbnVsbCkge1xyXG4gICAgICB0aGlzLmVtaXR0ZXIgPSBuZXcgRW1pdHRlcigpO1xyXG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpO1xyXG4gICAgfVxyXG5cclxuICBkZXN0cm95KCkge1xyXG4gICAgZm9yIChjb25zdCBwYW5lbCBvZiB0aGlzLmdldFBhbmVscygpKSB7XHJcbiAgICAgIHBhbmVsLmRlc3Ryb3koKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldEVsZW1lbnQoKSB7XHJcbiAgfVxyXG5cclxuICAvKlxyXG4gIFNlY3Rpb246IEV2ZW50IFN1YnNjcmlwdGlvblxyXG4gICovXHJcblxyXG4gIG9uRGlkQWRkUGFuZWwoY2FsbGJhY2spOiBEaXNwb3NhYmxlIHtcclxuICAgIHJldHVybiB0aGlzLmVtaXR0ZXIub24oJ2RpZC1hZGQtcGFuZWwnLCBjYWxsYmFjayk7XHJcbiAgfVxyXG5cclxuICBvbkRpZFJlbW92ZVBhbmVsKGNhbGxiYWNrKTogRGlzcG9zYWJsZSB7XHJcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyLm9uKCdkaWQtcmVtb3ZlLXBhbmVsJywgY2FsbGJhY2spO1xyXG4gIH1cclxuXHJcbiAgb25EaWREZXN0cm95KGNhbGxiYWNrKTogRGlzcG9zYWJsZSB7XHJcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyLm9uY2UoJ2RpZC1kZXN0cm95JywgY2FsbGJhY2spO1xyXG4gIH1cclxuXHJcbiAgZ2V0TG9jYXRpb24oKTogUGFuZWxMb2NhdGlvbiB7XHJcbiAgICByZXR1cm4gdGhpcy5sb2NhdGlvbjtcclxuICB9XHJcblxyXG4gIGlzTW9kYWwoKSB7IHJldHVybiB0aGlzLmxvY2F0aW9uID09PSAnbW9kYWwnOyB9XHJcblxyXG4gIGdldFBhbmVscygpOiBQYW5lbFtdIHsgcmV0dXJuIHRoaXMucGFuZWxzLnNsaWNlKCk7IH1cclxuXHJcbiAgYWRkUGFuZWwocGFuZWw6IFBhbmVsKTogUGFuZWwge1xyXG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLmFkZChwYW5lbC5vbkRpZERlc3Ryb3kodGhpcy5wYW5lbERlc3Ryb3llZC5iaW5kKHRoaXMpKSk7XHJcblxyXG4gICAgY29uc3QgaW5kZXggPSB0aGlzLmdldFBhbmVsSW5kZXgocGFuZWwpO1xyXG4gICAgaWYgKGluZGV4ID09PSB0aGlzLnBhbmVscy5sZW5ndGgpIHtcclxuICAgICAgdGhpcy5wYW5lbHMucHVzaChwYW5lbCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnBhbmVscy5zcGxpY2UoaW5kZXgsIDAsIHBhbmVsKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnZGlkLWFkZC1wYW5lbCcsIHtwYW5lbCwgaW5kZXh9KTtcclxuICAgIHJldHVybiBwYW5lbDtcclxuICB9XHJcblxyXG4gIHBhbmVsRm9ySXRlbShpdGVtKSB7XHJcbiAgICBmb3IgKGNvbnN0IHBhbmVsIG9mIHRoaXMucGFuZWxzKSB7XHJcbiAgICAgIGlmIChwYW5lbC5nZXRJdGVtKCkgPT09IGl0ZW0pIHtcclxuICAgICAgICByZXR1cm4gcGFuZWw7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgcGFuZWxEZXN0cm95ZWQocGFuZWwpIHtcclxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5wYW5lbHMuaW5kZXhPZihwYW5lbCk7XHJcbiAgICBpZiAoaW5kZXggPiAtMSkge1xyXG4gICAgICB0aGlzLnBhbmVscy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnZGlkLXJlbW92ZS1wYW5lbCcsIHtwYW5lbCwgaW5kZXh9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldFBhbmVsSW5kZXgocGFuZWwpIHtcclxuICAgIGNvbnN0IHByaW9yaXR5ID0gcGFuZWwuZ2V0UHJpb3JpdHkoKTtcclxuICAgIGlmIChbJ2JvdHRvbScsICdyaWdodCddLmZpbmQoaXRlbSA9PiBpdGVtID09PSB0aGlzLmxvY2F0aW9uKSkge1xyXG4gICAgICBmb3IgKGxldCBpID0gdGhpcy5wYW5lbHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICBjb25zdCBwID0gdGhpcy5wYW5lbHNbaV07XHJcbiAgICAgICAgaWYgKHByaW9yaXR5IDwgcC5nZXRQcmlvcml0eSgpKSB7IHJldHVybiBpICsgMTsgfVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiAwO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBhbmVscy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IHAgPSB0aGlzLnBhbmVsc1tpXTtcclxuICAgICAgICBpZiAocHJpb3JpdHkgPCBwLmdldFByaW9yaXR5KCkpIHsgcmV0dXJuIGk7IH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdGhpcy5wYW5lbHMubGVuZ3RoO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=