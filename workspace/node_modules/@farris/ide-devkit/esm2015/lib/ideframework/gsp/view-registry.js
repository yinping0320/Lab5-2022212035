/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Disposable } from './event-kit';
import { ComponentRef } from '@angular/core';
// Essential: `ViewRegistry` handles the association between model and view
// types in Atom. We call this association a View Provider. As in, for a given
// model, this class can provide a view via {::getView}, as long as the
// model/view association was registered via {::addViewProvider}
//
// If you're adding your own kind of pane item, a good strategy for all but the
// simplest items is to separate the model and the view. The model handles
// application logic and is the primary point of API interaction. The view
// just handles presentation.
//
// Note: Models can be any object, but must implement a `getTitle()` function
// if they are to be displayed in a {Pane}
//
// View providers inform the workspace how your model objects should be
// presented in the DOM. A view provider must always return a DOM node, which
// makes [HTML 5 custom elements](http://www.html5rocks.com/en/tutorials/webcomponents/customelements/)
// an ideal tool for implementing views in Atom.
//
// You can access the `ViewRegistry` object via `atom.views`.
export class ViewRegistry {
    // private documentWriters: any;
    // private documentReaders: any;
    // private nextUpdatePromise: any;
    // private resolveNextUpdatePromise: (value?: {} | PromiseLike<{}>) => void;
    /**
     * @param {?} gspEnvironment
     */
    constructor(gspEnvironment) {
        // this.animationFrameRequest = null
        // this.documentReadInProgress = false
        // this.performDocumentUpdate = this.performDocumentUpdate.bind(this);
        this.gspEnvironment = gspEnvironment;
        this.clear();
    }
    /**
     * @return {?}
     */
    clear() {
        this.views = new WeakMap();
        this.providers = [];
        this.clearDocumentRequests();
    }
    // Essential: Add a provider that will be used to construct views in the
    // workspace's view layer based on model objects in its model layer.
    //
    // ## Examples
    //
    // Text editors are divided into a model and a view layer, so when you interact
    // with methods like `atom.workspace.getActiveTextEditor()` you're only going
    // to get the model object. We display text editors on screen by teaching the
    // workspace what view constructor it should use to represent them:
    //
    // ```coffee
    // atom.views.addViewProvider TextEditor, (textEditor) ->
    //   textEditorElement = new TextEditorElement
    //   textEditorElement.initialize(textEditor)
    //   textEditorElement
    // ```
    //
    // * `modelConstructor` (optional) Constructor {Function} for your model. If
    //   a constructor is given, the `createView` function will only be used
    //   for model objects inheriting from that constructor. Otherwise, it will
    //   will be called for any object.
    // * `createView` Factory {Function} that is passed an instance of your model
    //   and must return a subclass of `HTMLElement` or `undefined`. If it returns
    //   `undefined`, then the registry will continue to search for other view
    //   providers.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to remove the
    // added provider.
    /**
     * @param {?} modelConstructor
     * @param {?} createView
     * @return {?}
     */
    addViewProvider(modelConstructor, createView) {
        /** @type {?} */
        let provider;
        if (arguments.length === 1) {
            switch (typeof modelConstructor) {
                case 'function':
                    provider = { createView: modelConstructor, modelConstructor: null };
                    break;
                case 'object':
                    provider = modelConstructor;
                    break;
                default:
                    throw new TypeError('Arguments to addViewProvider must be functions');
            }
        }
        else {
            provider = { modelConstructor, createView };
        }
        this.providers.push(provider);
        return new Disposable(() => {
            this.providers = this.providers.filter(p => p !== provider);
        });
    }
    /**
     * @return {?}
     */
    getViewProviderCount() {
        return this.providers.length;
    }
    // Essential: Get the view associated with an object in the workspace.
    //
    // If you're just *using* the workspace, you shouldn't need to access the view
    // layer, but view layer access may be necessary if you want to perform DOM
    // manipulation that isn't supported via the model API.
    //
    // ## View Resolution Algorithm
    //
    // The view associated with the object is resolved using the following
    // sequence
    //
    //  1. Is the object an instance of `HTMLElement`? If true, return the object.
    //  2. Does the object have a method named `getElement` that returns an
    //     instance of `HTMLElement`? If true, return that value.
    //  3. Does the object have a property named `element` with a value which is
    //     an instance of `HTMLElement`? If true, return the property value.
    //  4. Is the object a jQuery object, indicated by the presence of a `jquery`
    //     property? If true, return the root DOM element (i.e. `object[0]`).
    //  5. Has a view provider been registered for the object? If true, use the
    //     provider to create a view associated with the object, and return the
    //     view.
    //
    // If no associated view is returned by the sequence an error is thrown.
    //
    // Returns a DOM element.
    /**
     * @param {?} object
     * @return {?}
     */
    getView(object) {
        if (object == null) {
            return;
        }
        /** @type {?} */
        let view = this.views.get(object);
        if (!view) {
            view = this.createView(object);
            this.views.set(object, view);
        }
        return view;
    }
    /**
     * @param {?} object
     * @return {?}
     */
    createView(object) {
        if (object instanceof ComponentRef) {
            return object;
        }
        /** @type {?} */
        let element;
        if (object && (typeof object.getElement === 'function')) {
            element = object.getElement();
            if (element instanceof ComponentRef) {
                return element;
            }
        }
        if (object && object.element instanceof ComponentRef) {
            return object.element;
        }
        // if (object && object.jquery) {
        //   return object[0];
        // }
        for (const provider of this.providers) {
            if (provider.modelConstructor === null) {
                element = provider.createView(object, this.gspEnvironment);
                if (element) {
                    return element;
                }
                continue;
            }
            if (object instanceof provider.modelConstructor) {
                element = provider.createView && provider.createView(object, this.gspEnvironment);
                if (element) {
                    return element;
                }
                /** @type {?} */
                const ViewConstructor = provider.viewConstructor;
                if (ViewConstructor) {
                    element = new ViewConstructor();
                    if (element.initialize) {
                        element.initialize(object);
                    }
                    else if (element.setModel) {
                        element.setModel(object);
                    }
                    return element;
                }
            }
        }
        if (object && object.getViewClass) {
            /** @type {?} */
            const ViewConstructor = object.getViewClass();
            if (ViewConstructor) {
                /** @type {?} */
                const view = new ViewConstructor(object);
                return view;
            }
        }
        throw new Error(`Can't create a view for ${object.constructor.name} instance. Please register a view provider.`);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    updateDocument(fn) {
        // this.documentWriters.push(fn)
        // if (!this.documentReadInProgress) { this.requestDocumentUpdate() }
        // return new Disposable(() => {
        //   this.documentWriters = this.documentWriters.filter(writer => writer !== fn)
        // })
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    readDocument(fn) {
        // this.documentReaders.push(fn)
        // this.requestDocumentUpdate()
        // return new Disposable(() => {
        //   this.documentReaders = this.documentReaders.filter(reader => reader !== fn)
        // })
    }
    /**
     * @return {?}
     */
    getNextUpdatePromise() {
        // if (this.nextUpdatePromise == null) {
        //   this.nextUpdatePromise = new Promise(resolve => {
        //     this.resolveNextUpdatePromise = resolve
        //   })
        // }
        // return this.nextUpdatePromise
    }
    /**
     * @return {?}
     */
    clearDocumentRequests() {
        // this.documentReaders = []
        // this.documentWriters = []
        // this.nextUpdatePromise = null
        // this.resolveNextUpdatePromise = null
        // if (this.animationFrameRequest != null) {
        //   cancelAnimationFrame(this.animationFrameRequest)
        //   this.animationFrameRequest = null
        // }
    }
    /**
     * @return {?}
     */
    requestDocumentUpdate() {
        // if (this.animationFrameRequest == null) {
        //   this.animationFrameRequest = requestAnimationFrame(this.performDocumentUpdate)
        // }
    }
    /**
     * @return {?}
     */
    performDocumentUpdate() {
        // const { resolveNextUpdatePromise } = this
        // this.animationFrameRequest = null
        // this.nextUpdatePromise = null
        // this.resolveNextUpdatePromise = null
        // var writer = this.documentWriters.shift()
        // while (writer) {
        //   writer()
        //   writer = this.documentWriters.shift()
        // }
        // var reader = this.documentReaders.shift()
        // this.documentReadInProgress = true
        // while (reader) {
        //   reader()
        //   reader = this.documentReaders.shift()
        // }
        // this.documentReadInProgress = false
        // // process updates requested as a result of reads
        // writer = this.documentWriters.shift()
        // while (writer) {
        //   writer()
        //   writer = this.documentWriters.shift()
        // }
        // if (resolveNextUpdatePromise) { resolveNextUpdatePromise() }
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    ViewRegistry.prototype.gspEnvironment;
    /**
     * @type {?}
     * @private
     */
    ViewRegistry.prototype.views;
    /**
     * @type {?}
     * @private
     */
    ViewRegistry.prototype.providers;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy1yZWdpc3RyeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvaWRlLWRldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9pZGVmcmFtZXdvcmsvZ3NwL3ZpZXctcmVnaXN0cnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFxQjdDLE1BQU0sT0FBTyxZQUFZOzs7Ozs7OztJQVV2QixZQUFhLGNBQWM7UUFDekIsb0NBQW9DO1FBQ3BDLHNDQUFzQztRQUN0QyxzRUFBc0U7UUFDdEUsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2YsQ0FBQzs7OztJQUVELEtBQUs7UUFDSCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7UUFDM0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7UUFDcEIsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7SUFDL0IsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQThCRCxlQUFlLENBQUUsZ0JBQWdCLEVBQUUsVUFBVTs7WUFDdkMsUUFBUTtRQUNaLElBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDMUIsUUFBUSxPQUFPLGdCQUFnQixFQUFFO2dCQUMvQixLQUFLLFVBQVU7b0JBQ2IsUUFBUSxHQUFHLEVBQUMsVUFBVSxFQUFFLGdCQUFnQixFQUFFLGdCQUFnQixFQUFFLElBQUksRUFBQyxDQUFDO29CQUNsRSxNQUFNO2dCQUNSLEtBQUssUUFBUTtvQkFDWCxRQUFRLEdBQUcsZ0JBQWdCLENBQUM7b0JBQzVCLE1BQU07Z0JBQ1I7b0JBQ0UsTUFBTSxJQUFJLFNBQVMsQ0FBQyxnREFBZ0QsQ0FB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MUMsSUFBSTtRQUNKLHNDQUFzQztRQUV0QyxvREFBb0Q7UUFDcEQsd0NBQXdDO1FBQ3hDLG1CQUFtQjtRQUNuQixhQUFhO1FBQ2IsMENBQTBDO1FBQzFDLElBQUk7UUFFSiwrREFBK0Q7SUFDakUsQ0FBQztDQUNGOzs7Ozs7SUE5T0Msc0NBQTRCOzs7OztJQUM1Qiw2QkFBa0Q7Ozs7O0lBQ2xELGlDQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpc3Bvc2FibGUgfSBmcm9tICcuL2V2ZW50LWtpdCc7XHJcbmltcG9ydCB7IENvbXBvbmVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuLy8gRXNzZW50aWFsOiBgVmlld1JlZ2lzdHJ5YCBoYW5kbGVzIHRoZSBhc3NvY2lhdGlvbiBiZXR3ZWVuIG1vZGVsIGFuZCB2aWV3XHJcbi8vIHR5cGVzIGluIEF0b20uIFdlIGNhbGwgdGhpcyBhc3NvY2lhdGlvbiBhIFZpZXcgUHJvdmlkZXIuIEFzIGluLCBmb3IgYSBnaXZlblxyXG4vLyBtb2RlbCwgdGhpcyBjbGFzcyBjYW4gcHJvdmlkZSBhIHZpZXcgdmlhIHs6OmdldFZpZXd9LCBhcyBsb25nIGFzIHRoZVxyXG4vLyBtb2RlbC92aWV3IGFzc29jaWF0aW9uIHdhcyByZWdpc3RlcmVkIHZpYSB7OjphZGRWaWV3UHJvdmlkZXJ9XHJcbi8vXHJcbi8vIElmIHlvdSdyZSBhZGRpbmcgeW91ciBvd24ga2luZCBvZiBwYW5lIGl0ZW0sIGEgZ29vZCBzdHJhdGVneSBmb3IgYWxsIGJ1dCB0aGVcclxuLy8gc2ltcGxlc3QgaXRlbXMgaXMgdG8gc2VwYXJhdGUgdGhlIG1vZGVsIGFuZCB0aGUgdmlldy4gVGhlIG1vZGVsIGhhbmRsZXNcclxuLy8gYXBwbGljYXRpb24gbG9naWMgYW5kIGlzIHRoZSBwcmltYXJ5IHBvaW50IG9mIEFQSSBpbnRlcmFjdGlvbi4gVGhlIHZpZXdcclxuLy8ganVzdCBoYW5kbGVzIHByZXNlbnRhdGlvbi5cclxuLy9cclxuLy8gTm90ZTogTW9kZWxzIGNhbiBiZSBhbnkgb2JqZWN0LCBidXQgbXVzdCBpbXBsZW1lbnQgYSBgZ2V0VGl0bGUoKWAgZnVuY3Rpb25cclxuLy8gaWYgdGhleSBhcmUgdG8gYmUgZGlzcGxheWVkIGluIGEge1BhbmV9XHJcbi8vXHJcbi8vIFZpZXcgcHJvdmlkZXJzIGluZm9ybSB0aGUgd29ya3NwYWNlIGhvdyB5b3VyIG1vZGVsIG9iamVjdHMgc2hvdWxkIGJlXHJcbi8vIHByZXNlbnRlZCBpbiB0aGUgRE9NLiBBIHZpZXcgcHJvdmlkZXIgbXVzdCBhbHdheXMgcmV0dXJuIGEgRE9NIG5vZGUsIHdoaWNoXHJcbi8vIG1ha2VzIFtIVE1MIDUgY3VzdG9tIGVsZW1lbnRzXShodHRwOi8vd3d3Lmh0bWw1cm9ja3MuY29tL2VuL3R1dG9yaWFscy93ZWJjb21wb25lbnRzL2N1c3RvbWVsZW1lbnRzLylcclxuLy8gYW4gaWRlYWwgdG9vbCBmb3IgaW1wbGVtZW50aW5nIHZpZXdzIGluIEF0b20uXHJcbi8vXHJcbi8vIFlvdSBjYW4gYWNjZXNzIHRoZSBgVmlld1JlZ2lzdHJ5YCBvYmplY3QgdmlhIGBhdG9tLnZpZXdzYC5cclxuZXhwb3J0IGNsYXNzIFZpZXdSZWdpc3RyeSB7XHJcbiAgLy8gcHJpdmF0ZSBhbmltYXRpb25GcmFtZVJlcXVlc3Q6IGFueTtcclxuICAvLyBwcml2YXRlIGRvY3VtZW50UmVhZEluUHJvZ3Jlc3M6IGJvb2xlYW47XHJcbiAgcHJpdmF0ZSBnc3BFbnZpcm9ubWVudDogYW55O1xyXG4gIHByaXZhdGUgdmlld3M6IFdlYWtNYXA8b2JqZWN0LCBDb21wb25lbnRSZWY8YW55Pj47XHJcbiAgcHJpdmF0ZSBwcm92aWRlcnM6IGFueVtdO1xyXG4gIC8vIHByaXZhdGUgZG9jdW1lbnRXcml0ZXJzOiBhbnk7XHJcbiAgLy8gcHJpdmF0ZSBkb2N1bWVudFJlYWRlcnM6IGFueTtcclxuICAvLyBwcml2YXRlIG5leHRVcGRhdGVQcm9taXNlOiBhbnk7XHJcbiAgLy8gcHJpdmF0ZSByZXNvbHZlTmV4dFVwZGF0ZVByb21pc2U6ICh2YWx1ZT86IHt9IHwgUHJvbWlzZUxpa2U8e30+KSA9PiB2b2lkO1xyXG4gIGNvbnN0cnVjdG9yIChnc3BFbnZpcm9ubWVudCkge1xyXG4gICAgLy8gdGhpcy5hbmltYXRpb25GcmFtZVJlcXVlc3QgPSBudWxsXHJcbiAgICAvLyB0aGlzLmRvY3VtZW50UmVhZEluUHJvZ3Jlc3MgPSBmYWxzZVxyXG4gICAgLy8gdGhpcy5wZXJmb3JtRG9jdW1lbnRVcGRhdGUgPSB0aGlzLnBlcmZvcm1Eb2N1bWVudFVwZGF0ZS5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5nc3BFbnZpcm9ubWVudCA9IGdzcEVudmlyb25tZW50O1xyXG4gICAgdGhpcy5jbGVhcigpO1xyXG4gIH1cclxuXHJcbiAgY2xlYXIgKCkge1xyXG4gICAgdGhpcy52aWV3cyA9IG5ldyBXZWFrTWFwKCk7XHJcbiAgICB0aGlzLnByb3ZpZGVycyA9IFtdO1xyXG4gICAgdGhpcy5jbGVhckRvY3VtZW50UmVxdWVzdHMoKTtcclxuICB9XHJcblxyXG4gIC8vIEVzc2VudGlhbDogQWRkIGEgcHJvdmlkZXIgdGhhdCB3aWxsIGJlIHVzZWQgdG8gY29uc3RydWN0IHZpZXdzIGluIHRoZVxyXG4gIC8vIHdvcmtzcGFjZSdzIHZpZXcgbGF5ZXIgYmFzZWQgb24gbW9kZWwgb2JqZWN0cyBpbiBpdHMgbW9kZWwgbGF5ZXIuXHJcbiAgLy9cclxuICAvLyAjIyBFeGFtcGxlc1xyXG4gIC8vXHJcbiAgLy8gVGV4dCBlZGl0b3JzIGFyZSBkaXZpZGVkIGludG8gYSBtb2RlbCBhbmQgYSB2aWV3IGxheWVyLCBzbyB3aGVuIHlvdSBpbnRlcmFjdFxyXG4gIC8vIHdpdGggbWV0aG9kcyBsaWtlIGBhdG9tLndvcmtzcGFjZS5nZXRBY3RpdmVUZXh0RWRpdG9yKClgIHlvdSdyZSBvbmx5IGdvaW5nXHJcbiAgLy8gdG8gZ2V0IHRoZSBtb2RlbCBvYmplY3QuIFdlIGRpc3BsYXkgdGV4dCBlZGl0b3JzIG9uIHNjcmVlbiBieSB0ZWFjaGluZyB0aGVcclxuICAvLyB3b3Jrc3BhY2Ugd2hhdCB2aWV3IGNvbnN0cnVjdG9yIGl0IHNob3VsZCB1c2UgdG8gcmVwcmVzZW50IHRoZW06XHJcbiAgLy9cclxuICAvLyBgYGBjb2ZmZWVcclxuICAvLyBhdG9tLnZpZXdzLmFkZFZpZXdQcm92aWRlciBUZXh0RWRpdG9yLCAodGV4dEVkaXRvcikgLT5cclxuICAvLyAgIHRleHRFZGl0b3JFbGVtZW50ID0gbmV3IFRleHRFZGl0b3JFbGVtZW50XHJcbiAgLy8gICB0ZXh0RWRpdG9yRWxlbWVudC5pbml0aWFsaXplKHRleHRFZGl0b3IpXHJcbiAgLy8gICB0ZXh0RWRpdG9yRWxlbWVudFxyXG4gIC8vIGBgYFxyXG4gIC8vXHJcbiAgLy8gKiBgbW9kZWxDb25zdHJ1Y3RvcmAgKG9wdGlvbmFsKSBDb25zdHJ1Y3RvciB7RnVuY3Rpb259IGZvciB5b3VyIG1vZGVsLiBJZlxyXG4gIC8vICAgYSBjb25zdHJ1Y3RvciBpcyBnaXZlbiwgdGhlIGBjcmVhdGVWaWV3YCBmdW5jdGlvbiB3aWxsIG9ubHkgYmUgdXNlZFxyXG4gIC8vICAgZm9yIG1vZGVsIG9iamVjdHMgaW5oZXJpdGluZyBmcm9tIHRoYXQgY29uc3RydWN0b3IuIE90aGVyd2lzZSwgaXQgd2lsbFxyXG4gIC8vICAgd2lsbCBiZSBjYWxsZWQgZm9yIGFueSBvYmplY3QuXHJcbiAgLy8gKiBgY3JlYXRlVmlld2AgRmFjdG9yeSB7RnVuY3Rpb259IHRoYXQgaXMgcGFzc2VkIGFuIGluc3RhbmNlIG9mIHlvdXIgbW9kZWxcclxuICAvLyAgIGFuZCBtdXN0IHJldHVybiBhIHN1YmNsYXNzIG9mIGBIVE1MRWxlbWVudGAgb3IgYHVuZGVmaW5lZGAuIElmIGl0IHJldHVybnNcclxuICAvLyAgIGB1bmRlZmluZWRgLCB0aGVuIHRoZSByZWdpc3RyeSB3aWxsIGNvbnRpbnVlIHRvIHNlYXJjaCBmb3Igb3RoZXIgdmlld1xyXG4gIC8vICAgcHJvdmlkZXJzLlxyXG4gIC8vXHJcbiAgLy8gUmV0dXJucyBhIHtEaXNwb3NhYmxlfSBvbiB3aGljaCBgLmRpc3Bvc2UoKWAgY2FuIGJlIGNhbGxlZCB0byByZW1vdmUgdGhlXHJcbiAgLy8gYWRkZWQgcHJvdmlkZXIuXHJcbiAgYWRkVmlld1Byb3ZpZGVyIChtb2RlbENvbnN0cnVjdG9yLCBjcmVhdGVWaWV3KSB7XHJcbiAgICBsZXQgcHJvdmlkZXI7XHJcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICBzd2l0Y2ggKHR5cGVvZiBtb2RlbENvbnN0cnVjdG9yKSB7XHJcbiAgICAgICAgY2FzZSAnZnVuY3Rpb24nOlxyXG4gICAgICAgICAgcHJvdmlkZXIgPSB7Y3JlYXRlVmlldzogbW9kZWxDb25zdHJ1Y3RvciwgbW9kZWxDb25zdHJ1Y3RvcjogbnVsbH07XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdvYmplY3QnOlxyXG4gICAgICAgICAgcHJvdmlkZXIgPSBtb2RlbENvbnN0cnVjdG9yO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyB0byBhZGRWaWV3UHJvdmlkZXIgbXVzdCBiZSBmdW5jdGlvbnMnKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcHJvdmlkZXIgPSB7bW9kZWxDb25zdHJ1Y3RvciwgY3JlYXRlVmlld307XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5wcm92aWRlcnMucHVzaChwcm92aWRlcik7XHJcbiAgICByZXR1cm4gbmV3IERpc3Bvc2FibGUoKCkgPT4ge1xyXG4gICAgICB0aGlzLnByb3ZpZGVycyA9IHRoaXMucHJvdmlkZXJzLmZpbHRlcihwID0+IHAgIT09IHByb3ZpZGVyKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZ2V0Vmlld1Byb3ZpZGVyQ291bnQgKCkge1xyXG4gICAgcmV0dXJuIHRoaXMucHJvdmlkZXJzLmxlbmd0aDtcclxuICB9XHJcblxyXG4gIC8vIEVzc2VudGlhbDogR2V0IHRoZSB2aWV3IGFzc29jaWF0ZWQgd2l0aCBhbiBvYmplY3QgaW4gdGhlIHdvcmtzcGFjZS5cclxuICAvL1xyXG4gIC8vIElmIHlvdSdyZSBqdXN0ICp1c2luZyogdGhlIHdvcmtzcGFjZSwgeW91IHNob3VsZG4ndCBuZWVkIHRvIGFjY2VzcyB0aGUgdmlld1xyXG4gIC8vIGxheWVyLCBidXQgdmlldyBsYXllciBhY2Nlc3MgbWF5IGJlIG5lY2Vzc2FyeSBpZiB5b3Ugd2FudCB0byBwZXJmb3JtIERPTVxyXG4gIC8vIG1hbmlwdWxhdGlvbiB0aGF0IGlzbid0IHN1cHBvcnRlZCB2aWEgdGhlIG1vZGVsIEFQSS5cclxuICAvL1xyXG4gIC8vICMjIFZpZXcgUmVzb2x1dGlvbiBBbGdvcml0aG1cclxuICAvL1xyXG4gIC8vIFRoZSB2aWV3IGFzc29jaWF0ZWQgd2l0aCB0aGUgb2JqZWN0IGlzIHJlc29sdmVkIHVzaW5nIHRoZSBmb2xsb3dpbmdcclxuICAvLyBzZXF1ZW5jZVxyXG4gIC8vXHJcbiAgLy8gIDEuIElzIHRoZSBvYmplY3QgYW4gaW5zdGFuY2Ugb2YgYEhUTUxFbGVtZW50YD8gSWYgdHJ1ZSwgcmV0dXJuIHRoZSBvYmplY3QuXHJcbiAgLy8gIDIuIERvZXMgdGhlIG9iamVjdCBoYXZlIGEgbWV0aG9kIG5hbWVkIGBnZXRFbGVtZW50YCB0aGF0IHJldHVybnMgYW5cclxuICAvLyAgICAgaW5zdGFuY2Ugb2YgYEhUTUxFbGVtZW50YD8gSWYgdHJ1ZSwgcmV0dXJuIHRoYXQgdmFsdWUuXHJcbiAgLy8gIDMuIERvZXMgdGhlIG9iamVjdCBoYXZlIGEgcHJvcGVydHkgbmFtZWQgYGVsZW1lbnRgIHdpdGggYSB2YWx1ZSB3aGljaCBpc1xyXG4gIC8vICAgICBhbiBpbnN0YW5jZSBvZiBgSFRNTEVsZW1lbnRgPyBJZiB0cnVlLCByZXR1cm4gdGhlIHByb3BlcnR5IHZhbHVlLlxyXG4gIC8vICA0LiBJcyB0aGUgb2JqZWN0IGEgalF1ZXJ5IG9iamVjdCwgaW5kaWNhdGVkIGJ5IHRoZSBwcmVzZW5jZSBvZiBhIGBqcXVlcnlgXHJcbiAgLy8gICAgIHByb3BlcnR5PyBJZiB0cnVlLCByZXR1cm4gdGhlIHJvb3QgRE9NIGVsZW1lbnQgKGkuZS4gYG9iamVjdFswXWApLlxyXG4gIC8vICA1LiBIYXMgYSB2aWV3IHByb3ZpZGVyIGJlZW4gcmVnaXN0ZXJlZCBmb3IgdGhlIG9iamVjdD8gSWYgdHJ1ZSwgdXNlIHRoZVxyXG4gIC8vICAgICBwcm92aWRlciB0byBjcmVhdGUgYSB2aWV3IGFzc29jaWF0ZWQgd2l0aCB0aGUgb2JqZWN0LCBhbmQgcmV0dXJuIHRoZVxyXG4gIC8vICAgICB2aWV3LlxyXG4gIC8vXHJcbiAgLy8gSWYgbm8gYXNzb2NpYXRlZCB2aWV3IGlzIHJldHVybmVkIGJ5IHRoZSBzZXF1ZW5jZSBhbiBlcnJvciBpcyB0aHJvd24uXHJcbiAgLy9cclxuICAvLyBSZXR1cm5zIGEgRE9NIGVsZW1lbnQuXHJcbiAgZ2V0VmlldyAob2JqZWN0KTogQ29tcG9uZW50UmVmPGFueT4ge1xyXG4gICAgaWYgKG9iamVjdCA9PSBudWxsKSB7IHJldHVybjsgfVxyXG5cclxuICAgIGxldCB2aWV3ID0gdGhpcy52aWV3cy5nZXQob2JqZWN0KTtcclxuICAgIGlmICghdmlldykge1xyXG4gICAgICB2aWV3ID0gdGhpcy5jcmVhdGVWaWV3KG9iamVjdCk7XHJcbiAgICAgIHRoaXMudmlld3Muc2V0KG9iamVjdCwgdmlldyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmlldztcclxuICB9XHJcblxyXG4gIGNyZWF0ZVZpZXcgKG9iamVjdCk6IENvbXBvbmVudFJlZjxhbnk+IHtcclxuICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBDb21wb25lbnRSZWYpIHsgcmV0dXJuIG9iamVjdDsgfVxyXG5cclxuICAgIGxldCBlbGVtZW50O1xyXG4gICAgaWYgKG9iamVjdCAmJiAodHlwZW9mIG9iamVjdC5nZXRFbGVtZW50ID09PSAnZnVuY3Rpb24nKSkge1xyXG4gICAgICBlbGVtZW50ID0gb2JqZWN0LmdldEVsZW1lbnQoKTtcclxuICAgICAgaWYgKGVsZW1lbnQgaW5zdGFuY2VvZiBDb21wb25lbnRSZWYpIHtcclxuICAgICAgICByZXR1cm4gZWxlbWVudDtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChvYmplY3QgJiYgb2JqZWN0LmVsZW1lbnQgaW5zdGFuY2VvZiBDb21wb25lbnRSZWYpIHtcclxuICAgICAgcmV0dXJuIG9iamVjdC5lbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGlmIChvYmplY3QgJiYgb2JqZWN0LmpxdWVyeSkge1xyXG4gICAgLy8gICByZXR1cm4gb2JqZWN0WzBdO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIGZvciAoY29uc3QgcHJvdmlkZXIgb2YgdGhpcy5wcm92aWRlcnMpIHtcclxuICAgICAgaWYgKHByb3ZpZGVyLm1vZGVsQ29uc3RydWN0b3IgPT09IG51bGwpIHtcclxuICAgICAgICBlbGVtZW50ID0gcHJvdmlkZXIuY3JlYXRlVmlldyhvYmplY3QsIHRoaXMuZ3NwRW52aXJvbm1lbnQpO1xyXG4gICAgICAgIGlmIChlbGVtZW50KSB7IHJldHVybiBlbGVtZW50OyB9XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBwcm92aWRlci5tb2RlbENvbnN0cnVjdG9yKSB7XHJcbiAgICAgICAgZWxlbWVudCA9IHByb3ZpZGVyLmNyZWF0ZVZpZXcgJiYgcHJvdmlkZXIuY3JlYXRlVmlldyhvYmplY3QsIHRoaXMuZ3NwRW52aXJvbm1lbnQpO1xyXG4gICAgICAgIGlmIChlbGVtZW50KSB7IHJldHVybiBlbGVtZW50OyB9XHJcblxyXG4gICAgICAgIGNvbnN0IFZpZXdDb25zdHJ1Y3RvciA9IHByb3ZpZGVyLnZpZXdDb25zdHJ1Y3RvcjtcclxuICAgICAgICBpZiAoVmlld0NvbnN0cnVjdG9yKSB7XHJcbiAgICAgICAgICBlbGVtZW50ID0gbmV3IFZpZXdDb25zdHJ1Y3RvcigpO1xyXG4gICAgICAgICAgaWYgKGVsZW1lbnQuaW5pdGlhbGl6ZSkge1xyXG4gICAgICAgICAgICBlbGVtZW50LmluaXRpYWxpemUob2JqZWN0KTtcclxuICAgICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC5zZXRNb2RlbCkge1xyXG4gICAgICAgICAgICBlbGVtZW50LnNldE1vZGVsKG9iamVjdCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gZWxlbWVudDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAob2JqZWN0ICYmIG9iamVjdC5nZXRWaWV3Q2xhc3MpIHtcclxuICAgICAgY29uc3QgVmlld0NvbnN0cnVjdG9yID0gb2JqZWN0LmdldFZpZXdDbGFzcygpO1xyXG4gICAgICBpZiAoVmlld0NvbnN0cnVjdG9yKSB7XHJcbiAgICAgICAgY29uc3QgdmlldyA9IG5ldyBWaWV3Q29uc3RydWN0b3Iob2JqZWN0KTtcclxuICAgICAgICByZXR1cm4gdmlldztcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRocm93IG5ldyBFcnJvcihgQ2FuJ3QgY3JlYXRlIGEgdmlldyBmb3IgJHtvYmplY3QuY29uc3RydWN0b3IubmFtZX0gaW5zdGFuY2UuIFBsZWFzZSByZWdpc3RlciBhIHZpZXcgcHJvdmlkZXIuYCk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVEb2N1bWVudCAoZm4pIHtcclxuICAgIC8vIHRoaXMuZG9jdW1lbnRXcml0ZXJzLnB1c2goZm4pXHJcbiAgICAvLyBpZiAoIXRoaXMuZG9jdW1lbnRSZWFkSW5Qcm9ncmVzcykgeyB0aGlzLnJlcXVlc3REb2N1bWVudFVwZGF0ZSgpIH1cclxuICAgIC8vIHJldHVybiBuZXcgRGlzcG9zYWJsZSgoKSA9PiB7XHJcbiAgICAvLyAgIHRoaXMuZG9jdW1lbnRXcml0ZXJzID0gdGhpcy5kb2N1bWVudFdyaXRlcnMuZmlsdGVyKHdyaXRlciA9PiB3cml0ZXIgIT09IGZuKVxyXG4gICAgLy8gfSlcclxuICB9XHJcblxyXG4gIHJlYWREb2N1bWVudCAoZm4pIHtcclxuICAgIC8vIHRoaXMuZG9jdW1lbnRSZWFkZXJzLnB1c2goZm4pXHJcbiAgICAvLyB0aGlzLnJlcXVlc3REb2N1bWVudFVwZGF0ZSgpXHJcbiAgICAvLyByZXR1cm4gbmV3IERpc3Bvc2FibGUoKCkgPT4ge1xyXG4gICAgLy8gICB0aGlzLmRvY3VtZW50UmVhZGVycyA9IHRoaXMuZG9jdW1lbnRSZWFkZXJzLmZpbHRlcihyZWFkZXIgPT4gcmVhZGVyICE9PSBmbilcclxuICAgIC8vIH0pXHJcbiAgfVxyXG5cclxuICBnZXROZXh0VXBkYXRlUHJvbWlzZSAoKSB7XHJcbiAgICAvLyBpZiAodGhpcy5uZXh0VXBkYXRlUHJvbWlzZSA9PSBudWxsKSB7XHJcbiAgICAvLyAgIHRoaXMubmV4dFVwZGF0ZVByb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgIC8vICAgICB0aGlzLnJlc29sdmVOZXh0VXBkYXRlUHJvbWlzZSA9IHJlc29sdmVcclxuICAgIC8vICAgfSlcclxuICAgIC8vIH1cclxuXHJcbiAgICAvLyByZXR1cm4gdGhpcy5uZXh0VXBkYXRlUHJvbWlzZVxyXG4gIH1cclxuXHJcbiAgY2xlYXJEb2N1bWVudFJlcXVlc3RzICgpIHtcclxuICAgIC8vIHRoaXMuZG9jdW1lbnRSZWFkZXJzID0gW11cclxuICAgIC8vIHRoaXMuZG9jdW1lbnRXcml0ZXJzID0gW11cclxuICAgIC8vIHRoaXMubmV4dFVwZGF0ZVByb21pc2UgPSBudWxsXHJcbiAgICAvLyB0aGlzLnJlc29sdmVOZXh0VXBkYXRlUHJvbWlzZSA9IG51bGxcclxuICAgIC8vIGlmICh0aGlzLmFuaW1hdGlvbkZyYW1lUmVxdWVzdCAhPSBudWxsKSB7XHJcbiAgICAvLyAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuYW5pbWF0aW9uRnJhbWVSZXF1ZXN0KVxyXG4gICAgLy8gICB0aGlzLmFuaW1hdGlvbkZyYW1lUmVxdWVzdCA9IG51bGxcclxuICAgIC8vIH1cclxuICB9XHJcblxyXG4gIHJlcXVlc3REb2N1bWVudFVwZGF0ZSAoKSB7XHJcbiAgICAvLyBpZiAodGhpcy5hbmltYXRpb25GcmFtZVJlcXVlc3QgPT0gbnVsbCkge1xyXG4gICAgLy8gICB0aGlzLmFuaW1hdGlvbkZyYW1lUmVxdWVzdCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLnBlcmZvcm1Eb2N1bWVudFVwZGF0ZSlcclxuICAgIC8vIH1cclxuICB9XHJcblxyXG4gIHBlcmZvcm1Eb2N1bWVudFVwZGF0ZSAoKSB7XHJcbiAgICAvLyBjb25zdCB7IHJlc29sdmVOZXh0VXBkYXRlUHJvbWlzZSB9ID0gdGhpc1xyXG4gICAgLy8gdGhpcy5hbmltYXRpb25GcmFtZVJlcXVlc3QgPSBudWxsXHJcbiAgICAvLyB0aGlzLm5leHRVcGRhdGVQcm9taXNlID0gbnVsbFxyXG4gICAgLy8gdGhpcy5yZXNvbHZlTmV4dFVwZGF0ZVByb21pc2UgPSBudWxsXHJcblxyXG4gICAgLy8gdmFyIHdyaXRlciA9IHRoaXMuZG9jdW1lbnRXcml0ZXJzLnNoaWZ0KClcclxuICAgIC8vIHdoaWxlICh3cml0ZXIpIHtcclxuICAgIC8vICAgd3JpdGVyKClcclxuICAgIC8vICAgd3JpdGVyID0gdGhpcy5kb2N1bWVudFdyaXRlcnMuc2hpZnQoKVxyXG4gICAgLy8gfVxyXG5cclxuICAgIC8vIHZhciByZWFkZXIgPSB0aGlzLmRvY3VtZW50UmVhZGVycy5zaGlmdCgpXHJcbiAgICAvLyB0aGlzLmRvY3VtZW50UmVhZEluUHJvZ3Jlc3MgPSB0cnVlXHJcbiAgICAvLyB3aGlsZSAocmVhZGVyKSB7XHJcbiAgICAvLyAgIHJlYWRlcigpXHJcbiAgICAvLyAgIHJlYWRlciA9IHRoaXMuZG9jdW1lbnRSZWFkZXJzLnNoaWZ0KClcclxuICAgIC8vIH1cclxuICAgIC8vIHRoaXMuZG9jdW1lbnRSZWFkSW5Qcm9ncmVzcyA9IGZhbHNlXHJcblxyXG4gICAgLy8gLy8gcHJvY2VzcyB1cGRhdGVzIHJlcXVlc3RlZCBhcyBhIHJlc3VsdCBvZiByZWFkc1xyXG4gICAgLy8gd3JpdGVyID0gdGhpcy5kb2N1bWVudFdyaXRlcnMuc2hpZnQoKVxyXG4gICAgLy8gd2hpbGUgKHdyaXRlcikge1xyXG4gICAgLy8gICB3cml0ZXIoKVxyXG4gICAgLy8gICB3cml0ZXIgPSB0aGlzLmRvY3VtZW50V3JpdGVycy5zaGlmdCgpXHJcbiAgICAvLyB9XHJcblxyXG4gICAgLy8gaWYgKHJlc29sdmVOZXh0VXBkYXRlUHJvbWlzZSkgeyByZXNvbHZlTmV4dFVwZGF0ZVByb21pc2UoKSB9XHJcbiAgfVxyXG59XHJcbiJdfQ==