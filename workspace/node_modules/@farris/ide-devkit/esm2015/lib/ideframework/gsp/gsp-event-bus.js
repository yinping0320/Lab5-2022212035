/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventBus } from '../eventbus';
export class GspEventBus extends EventBus {
    constructor() {
        super(...arguments);
        this.commands = [];
    }
    /**
     * @param {?} target
     * @param {?} tokenValue
     * @param {?} eventName
     * @param {?} caller
     * @param {?} handler
     * @return {?}
     */
    on(target, tokenValue, eventName, caller, handler) {
        // 如果有对应激活命令，监听事件时立即执行回调函数
        /** @type {?} */
        const command = this.commands.find(item => item.name === eventName);
        if (command) {
            handler.call(caller, command.eventeParams);
        }
        return super.on(target, tokenValue, eventName, caller, handler);
    }
    /**
     * @param {?} emitterType
     * @param {?} tokenValue
     * @param {?} eventName
     * @param {?} eventArgs
     * @return {?}
     */
    post(emitterType, tokenValue, eventName, eventArgs) {
        this.dispatchCommand(eventName, eventArgs);
        super.post(emitterType, tokenValue, eventName, eventArgs);
    }
    /**
     * @param {?} commandName
     * @param {?} plugin
     * @param {?} activateFn
     * @return {?}
     */
    registryActivateCommand(commandName, plugin, activateFn) {
        this.commands.push({
            name: commandName,
            plugin,
            activateFn
        });
    }
    /**
     * @private
     * @param {?} commandName
     * @param {?} args
     * @return {?}
     */
    dispatchCommand(commandName, args) {
        /** @type {?} */
        const command = this.commands.find(item => item.name === commandName);
        if (command) {
            command.activateFn(command.plugin);
            command.eventParams = args;
        }
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    GspEventBus.prototype.commands;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3NwLWV2ZW50LWJ1cy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvaWRlLWRldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9pZGVmcmFtZXdvcmsvZ3NwL2dzcC1ldmVudC1idXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQWUsTUFBTSxhQUFhLENBQUM7QUFJcEQsTUFBTSxPQUFPLFdBQVksU0FBUSxRQUFRO0lBQXpDOztRQUNVLGFBQVEsR0FBVSxFQUFFLENBQUM7SUErQi9CLENBQUM7Ozs7Ozs7OztJQTdCQyxFQUFFLENBQUMsTUFBYyxFQUFFLFVBQWtCLEVBQUUsU0FBaUIsRUFBRSxNQUFjLEVBQUUsT0FBNkI7OztjQUUvRixPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLFNBQVMsQ0FBQztRQUNuRSxJQUFJLE9BQU8sRUFBRTtZQUNYLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUM1QztRQUNELE9BQU8sS0FBSyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDbEUsQ0FBQzs7Ozs7Ozs7SUFFRCxJQUFJLENBQUMsV0FBK0IsRUFBRSxVQUFrQixFQUFFLFNBQWlCLEVBQUUsU0FBYztRQUN6RixJQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUMzQyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzVELENBQUM7Ozs7Ozs7SUFFRCx1QkFBdUIsQ0FBQyxXQUFtQixFQUFFLE1BQVcsRUFBRSxVQUErQjtRQUN2RixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztZQUNqQixJQUFJLEVBQUUsV0FBVztZQUNqQixNQUFNO1lBQ04sVUFBVTtTQUNYLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7Ozs7SUFFTyxlQUFlLENBQUMsV0FBbUIsRUFBRSxJQUFTOztjQUM5QyxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLFdBQVcsQ0FBQztRQUNyRSxJQUFJLE9BQU8sRUFBRTtZQUNYLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ25DLE9BQU8sQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1NBQzVCO0lBQ0gsQ0FBQztDQUNGOzs7Ozs7SUEvQkMsK0JBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRCdXMsIElEaXNwb3NhYmxlIH0gZnJvbSAnLi4vZXZlbnRidXMnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgR3NwRXZlbnRCdXMgZXh0ZW5kcyBFdmVudEJ1cyB7XHJcbiAgcHJpdmF0ZSBjb21tYW5kczogYW55W10gPSBbXTtcclxuXHJcbiAgb24odGFyZ2V0OiBzdHJpbmcsIHRva2VuVmFsdWU6IHN0cmluZywgZXZlbnROYW1lOiBzdHJpbmcsIGNhbGxlcjogb2JqZWN0LCBoYW5kbGVyOiAodmFsdWU6IGFueSkgPT4gdm9pZCkge1xyXG4gICAgLy8g5aaC5p6c5pyJ5a+55bqU5r+A5rS75ZG95Luk77yM55uR5ZCs5LqL5Lu25pe256uL5Y2z5omn6KGM5Zue6LCD5Ye95pWwXHJcbiAgICBjb25zdCBjb21tYW5kID0gdGhpcy5jb21tYW5kcy5maW5kKGl0ZW0gPT4gaXRlbS5uYW1lID09PSBldmVudE5hbWUpO1xyXG4gICAgaWYgKGNvbW1hbmQpIHtcclxuICAgICAgaGFuZGxlci5jYWxsKGNhbGxlciwgY29tbWFuZC5ldmVudGVQYXJhbXMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHN1cGVyLm9uKHRhcmdldCwgdG9rZW5WYWx1ZSwgZXZlbnROYW1lLCBjYWxsZXIsIGhhbmRsZXIpO1xyXG4gIH1cclxuXHJcbiAgcG9zdChlbWl0dGVyVHlwZTogVHlwZTxhbnk+IHwgc3RyaW5nLCB0b2tlblZhbHVlOiBzdHJpbmcsIGV2ZW50TmFtZTogc3RyaW5nLCBldmVudEFyZ3M6IGFueSk6IHZvaWQge1xyXG4gICAgdGhpcy5kaXNwYXRjaENvbW1hbmQoZXZlbnROYW1lLCBldmVudEFyZ3MpO1xyXG4gICAgc3VwZXIucG9zdChlbWl0dGVyVHlwZSwgdG9rZW5WYWx1ZSwgZXZlbnROYW1lLCBldmVudEFyZ3MpO1xyXG4gIH1cclxuXHJcbiAgcmVnaXN0cnlBY3RpdmF0ZUNvbW1hbmQoY29tbWFuZE5hbWU6IHN0cmluZywgcGx1Z2luOiBhbnksIGFjdGl2YXRlRm46IChhcmcwOiBhbnkpID0+IHZvaWQpIHtcclxuICAgIHRoaXMuY29tbWFuZHMucHVzaCh7XHJcbiAgICAgIG5hbWU6IGNvbW1hbmROYW1lLFxyXG4gICAgICBwbHVnaW4sXHJcbiAgICAgIGFjdGl2YXRlRm5cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBkaXNwYXRjaENvbW1hbmQoY29tbWFuZE5hbWU6IHN0cmluZywgYXJnczogYW55KSB7XHJcbiAgICBjb25zdCBjb21tYW5kID0gdGhpcy5jb21tYW5kcy5maW5kKGl0ZW0gPT4gaXRlbS5uYW1lID09PSBjb21tYW5kTmFtZSk7XHJcbiAgICBpZiAoY29tbWFuZCkge1xyXG4gICAgICBjb21tYW5kLmFjdGl2YXRlRm4oY29tbWFuZC5wbHVnaW4pO1xyXG4gICAgICBjb21tYW5kLmV2ZW50UGFyYW1zID0gYXJncztcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19