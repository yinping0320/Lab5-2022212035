/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pane } from './pane';
import { ItemRegistry } from './item-registry';
/** @type {?} */
const SERIALIZATION_VERSION = 1;
export class PaneContainer {
    /**
     * @param {?} params
     */
    constructor(params) {
        /** @type {?} */
        let applicationDelegate;
        /** @type {?} */
        let deserializerManager;
        /** @type {?} */
        let notificationManager;
        ({
            config: this.config,
            applicationDelegate,
            notificationManager,
            deserializerManager,
            viewRegistry: this.viewRegistry,
            location: this.location
        } = params);
        this.itemRegistry = new ItemRegistry();
        this.alive = true;
        this.setRoot(new Pane({
            container: this,
            config: this.config,
            applicationDelegate,
            notificationManager,
            deserializerManager,
            viewRegistry: this.viewRegistry
        }));
        this.didActivatePane(this.getRoot());
    }
    /**
     * @return {?}
     */
    getLocation() { return this.location; }
    /**
     * @return {?}
     */
    getElement() {
    }
    /**
     * @return {?}
     */
    destroy() {
        this.alive = false;
        for (const pane of this.getRoot().getPanes()) {
            pane.destroy();
        }
    }
    /**
     * @return {?}
     */
    isAlive() { return this.alive; }
    /**
     * @return {?}
     */
    isDestroyed() { return !this.isAlive(); }
    /**
     * @param {...?} params
     * @return {?}
     */
    serialize(...params) {
        return {
            deserializer: 'PaneContainer',
            version: SERIALIZATION_VERSION,
            root: this.root ? this.root.serialize() : null,
            activePaneId: this.activePane.id
        };
    }
    /**
     * @param {?} state
     * @param {?} deserializerManager
     * @return {?}
     */
    deserialize(state, deserializerManager) {
        if (state.version !== SERIALIZATION_VERSION) {
            return;
        }
        this.setRoot(deserializerManager.deserialize(state.root));
        this.activePane = this.getRoot().getPanes().find(pane => pane.id === state.activePaneId) || this.getPanes()[0];
        if (this.config && this.config.get && this.config.get('core.destroyEmptyPanes')) {
            this.destroyEmptyPanes();
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    onDidChangeRoot(fn) {
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    observeRoot(fn) {
        fn(this.getRoot());
        return this.onDidChangeRoot(fn);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    onDidAddPane(fn) {
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    observePanes(fn) {
        for (const pane of this.getPanes()) {
            fn(pane);
        }
        return this.onDidAddPane(({ pane }) => fn(pane));
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    onDidDestroyPane(fn) {
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    onWillDestroyPane(fn) {
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    onDidChangeActivePane(fn) {
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    onDidActivatePane(fn) {
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    observeActivePane(fn) {
        fn(this.getActivePane());
        return this.onDidChangeActivePane(fn);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    onDidAddPaneItem(fn) {
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    observePaneItems(fn) {
        for (const item of this.getPaneItems()) {
            fn(item);
        }
        return this.onDidAddPaneItem(({ item }) => fn(item));
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    onDidChangeActivePaneItem(fn) {
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    onDidStopChangingActivePaneItem(fn) {
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    observeActivePaneItem(fn) {
        fn(this.getActivePaneItem());
        return this.onDidChangeActivePaneItem(fn);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    onWillDestroyPaneItem(fn) {
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    onDidDestroyPaneItem(fn) {
    }
    /**
     * @return {?}
     */
    getRoot() { return this.root; }
    /**
     * @param {?} root
     * @return {?}
     */
    setRoot(root) {
        this.root = root;
        this.root.setParent(this);
        this.root.setContainer(this);
        if ((this.getActivePane() == null) && this.root instanceof Pane) {
            this.didActivatePane(this.root);
        }
    }
    /**
     * @param {?} oldChild
     * @param {?} newChild
     * @return {?}
     */
    replaceChild(oldChild, newChild) {
        if (oldChild !== this.root) {
            throw new Error('Replacing non-existent child');
        }
        this.setRoot(newChild);
    }
    /**
     * @return {?}
     */
    getPanes() {
        if (this.alive) {
            return this.getRoot().getPanes();
        }
        else {
            return [];
        }
    }
    /**
     * @return {?}
     */
    getPaneItems() {
        return this.getRoot().getItems();
    }
    /**
     * @return {?}
     */
    getActivePane() {
        return this.activePane;
    }
    /**
     * @return {?}
     */
    getActivePaneItem() {
        return this.getActivePane().getActiveItem();
    }
    /**
     * @param {?} uri
     * @return {?}
     */
    paneForURI(uri) {
        return this.getPanes().find(pane => pane.itemForURI(uri) != null);
    }
    /**
     * @param {?} item
     * @return {?}
     */
    paneForItem(item) {
        return this.getPanes().find(pane => pane.getItems().find(it => it === item));
    }
    /**
     * @return {?}
     */
    saveAll() {
        for (const pane of this.getPanes()) {
            pane.saveItems();
        }
    }
    /**
     * @param {?} options
     * @return {?}
     */
    confirmClose(options) {
        /** @type {?} */
        const promises = [];
        for (const pane of this.getPanes()) {
            for (const item of pane.getItems()) {
                promises.push(pane.promptToSaveItem(item, options));
            }
        }
        return Promise.all(promises).then((results) => !results.find(item => item === false));
    }
    /**
     * @return {?}
     */
    activateNextPane() {
        /** @type {?} */
        const panes = this.getPanes();
        if (panes.length > 1) {
            /** @type {?} */
            const currentIndex = panes.indexOf(this.activePane);
            /** @type {?} */
            const nextIndex = (currentIndex + 1) % panes.length;
            panes[nextIndex].activate();
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @return {?}
     */
    activatePreviousPane() {
        /** @type {?} */
        const panes = this.getPanes();
        if (panes.length > 1) {
            /** @type {?} */
            const currentIndex = panes.indexOf(this.activePane);
            /** @type {?} */
            let previousIndex = currentIndex - 1;
            if (previousIndex < 0) {
                previousIndex = panes.length - 1;
            }
            panes[previousIndex].activate();
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @param {?} destPane
     * @return {?}
     */
    moveActiveItemToPane(destPane) {
        /** @type {?} */
        const item = this.activePane.getActiveItem();
        if (!destPane.isItemAllowed(item)) {
            return;
        }
        this.activePane.moveItemToPane(item, destPane);
        destPane.setActiveItem(item);
    }
    /**
     * @param {?} destPane
     * @return {?}
     */
    copyActiveItemToPane(destPane) {
        /** @type {?} */
        const item = this.activePane.copyActiveItem();
        if (item && destPane.isItemAllowed(item)) {
            destPane.activateItem(item);
        }
    }
    /**
     * @return {?}
     */
    destroyEmptyPanes() {
        for (const pane of this.getPanes()) {
            if (pane.items.length === 0) {
                pane.destroy();
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    didAddPane(event) {
        /** @type {?} */
        const items = event.pane.getItems();
        for (let i = 0, length = items.length; i < length; i++) {
            /** @type {?} */
            const item = items[i];
            this.didAddPaneItem(item, event.pane, i);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    willDestroyPane(event) {
    }
    /**
     * @param {?} event
     * @return {?}
     */
    didDestroyPane(event) {
    }
    /**
     * @param {?} activePane
     * @return {?}
     */
    didActivatePane(activePane) {
        if (activePane !== this.activePane) {
            if (!this.getPanes().find(item => item === activePane)) {
                throw new Error('Setting active pane that is not present in pane container');
            }
            this.activePane = activePane;
            this.didChangeActiveItemOnPane(this.activePane, this.activePane.getActiveItem());
        }
        return this.activePane;
    }
    /**
     * @param {?} item
     * @param {?} pane
     * @param {?} index
     * @return {?}
     */
    didAddPaneItem(item, pane, index) {
        this.itemRegistry.addItem(item);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    willDestroyPaneItem(event) {
    }
    /**
     * @param {?} event
     * @return {?}
     */
    didDestroyPaneItem(event) {
        this.itemRegistry.removeItem(event.item);
        // this.emitter.emit('did-destroy-pane-item', event);
    }
    /**
     * @param {?} pane
     * @param {?} activeItem
     * @return {?}
     */
    didChangeActiveItemOnPane(pane, activeItem) {
        if (pane === this.getActivePane()) {
            this.cancelStoppedChangingActivePaneItemTimeout();
            // `setTimeout()` isn't available during the snapshotting phase, but that's okay.
        }
    }
    /**
     * @return {?}
     */
    cancelStoppedChangingActivePaneItemTimeout() {
    }
}
if (false) {
    /** @type {?} */
    PaneContainer.prototype.itemRegistry;
    /** @type {?} */
    PaneContainer.prototype.alive;
    /** @type {?} */
    PaneContainer.prototype.viewRegistry;
    /** @type {?} */
    PaneContainer.prototype.location;
    /** @type {?} */
    PaneContainer.prototype.activePane;
    /** @type {?} */
    PaneContainer.prototype.root;
    /** @type {?} */
    PaneContainer.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,