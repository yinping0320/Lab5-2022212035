/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Essential: A handle to a resource that can be disposed. For example,
// {Emitter::on} returns disposables representing subscriptions.
export class Disposable {
    //////
    /// Section: Construction and Destruction
    //////
    // Public: Construct a Disposable
    //
    // * `disposalAction` A {Function} to call when {::dispose} is called for the
    //   first time.
    /**
     * @param {?} disposalAction
     */
    constructor(disposalAction) {
        this.disposalAction = disposalAction;
        this.disposed = false;
    }
    // Public: Ensure that `object` correctly implements the `Disposable`
    // contract.
    //
    // * `object` An {Object} you want to perform the check against.
    //
    // Returns a {Boolean} indicating whether `object` is a valid `Disposable`.
    /**
     * @param {?} object
     * @return {?}
     */
    static isDisposable(object) {
        if (object && object.dispose && typeof (object.dispose) === 'function') {
            return true;
        }
        return false;
    }
    // Public: Perform the disposal action, indicating that the resource associated
    // with this disposable is no longer needed.
    //
    // You can call this method more than once, but the disposal action will only
    // be performed the first time.
    /**
     * @return {?}
     */
    dispose() {
        if (!this.disposed) {
            this.disposed = true;
            if (this.disposalAction) {
                this.disposalAction();
            }
            this.disposalAction = null;
        }
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    Disposable.prototype.disposed;
    /**
     * @type {?}
     * @private
     */
    Disposable.prototype.disposalAction;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzcG9zYWJsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvaWRlLWRldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9pZGVmcmFtZXdvcmsvZ3NwL2V2ZW50LWtpdC9kaXNwb3NhYmxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUdBLE1BQU0sT0FBTyxVQUFVOzs7Ozs7Ozs7OztJQXdCckIsWUFBb0IsY0FBeUI7UUFBekIsbUJBQWMsR0FBZCxjQUFjLENBQVc7UUF0QnJDLGFBQVEsR0FBRyxLQUFLLENBQUM7SUFzQndCLENBQUM7Ozs7Ozs7Ozs7O0lBZGxELE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTTtRQUN4QixJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsT0FBTyxJQUFJLE9BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssVUFBVSxFQUFFO1lBQ3JFLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Ozs7Ozs7OztJQWdCRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7WUFDckIsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFO2dCQUN2QixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7YUFDdkI7WUFDRCxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztTQUM1QjtJQUNILENBQUM7Q0FDRjs7Ozs7O0lBdENDLDhCQUF5Qjs7Ozs7SUFzQmIsb0NBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRXNzZW50aWFsOiBBIGhhbmRsZSB0byBhIHJlc291cmNlIHRoYXQgY2FuIGJlIGRpc3Bvc2VkLiBGb3IgZXhhbXBsZSxcclxuLy8ge0VtaXR0ZXI6Om9ufSByZXR1cm5zIGRpc3Bvc2FibGVzIHJlcHJlc2VudGluZyBzdWJzY3JpcHRpb25zLlxyXG5cclxuZXhwb3J0IGNsYXNzIERpc3Bvc2FibGUge1xyXG5cclxuICBwcml2YXRlIGRpc3Bvc2VkID0gZmFsc2U7XHJcblxyXG4gIC8vIFB1YmxpYzogRW5zdXJlIHRoYXQgYG9iamVjdGAgY29ycmVjdGx5IGltcGxlbWVudHMgdGhlIGBEaXNwb3NhYmxlYFxyXG4gIC8vIGNvbnRyYWN0LlxyXG4gIC8vXHJcbiAgLy8gKiBgb2JqZWN0YCBBbiB7T2JqZWN0fSB5b3Ugd2FudCB0byBwZXJmb3JtIHRoZSBjaGVjayBhZ2FpbnN0LlxyXG4gIC8vXHJcbiAgLy8gUmV0dXJucyBhIHtCb29sZWFufSBpbmRpY2F0aW5nIHdoZXRoZXIgYG9iamVjdGAgaXMgYSB2YWxpZCBgRGlzcG9zYWJsZWAuXHJcbiAgc3RhdGljIGlzRGlzcG9zYWJsZShvYmplY3QpOiBib29sZWFuIHtcclxuICAgIGlmIChvYmplY3QgJiYgb2JqZWN0LmRpc3Bvc2UgJiYgdHlwZW9mKG9iamVjdC5kaXNwb3NlKSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbiAgLy8vLy8vXHJcbiAgLy8vIFNlY3Rpb246IENvbnN0cnVjdGlvbiBhbmQgRGVzdHJ1Y3Rpb25cclxuICAvLy8vLy9cclxuXHJcbiAgLy8gUHVibGljOiBDb25zdHJ1Y3QgYSBEaXNwb3NhYmxlXHJcbiAgLy9cclxuICAvLyAqIGBkaXNwb3NhbEFjdGlvbmAgQSB7RnVuY3Rpb259IHRvIGNhbGwgd2hlbiB7OjpkaXNwb3NlfSBpcyBjYWxsZWQgZm9yIHRoZVxyXG4gIC8vICAgZmlyc3QgdGltZS5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRpc3Bvc2FsQWN0aW9uOiAoKSA9PiBhbnkpIHsgfVxyXG5cclxuICAvLyBQdWJsaWM6IFBlcmZvcm0gdGhlIGRpc3Bvc2FsIGFjdGlvbiwgaW5kaWNhdGluZyB0aGF0IHRoZSByZXNvdXJjZSBhc3NvY2lhdGVkXHJcbiAgLy8gd2l0aCB0aGlzIGRpc3Bvc2FibGUgaXMgbm8gbG9uZ2VyIG5lZWRlZC5cclxuICAvL1xyXG4gIC8vIFlvdSBjYW4gY2FsbCB0aGlzIG1ldGhvZCBtb3JlIHRoYW4gb25jZSwgYnV0IHRoZSBkaXNwb3NhbCBhY3Rpb24gd2lsbCBvbmx5XHJcbiAgLy8gYmUgcGVyZm9ybWVkIHRoZSBmaXJzdCB0aW1lLlxyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICBpZiAoIXRoaXMuZGlzcG9zZWQpIHtcclxuICAgICAgdGhpcy5kaXNwb3NlZCA9IHRydWU7XHJcbiAgICAgIGlmICh0aGlzLmRpc3Bvc2FsQWN0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5kaXNwb3NhbEFjdGlvbigpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuZGlzcG9zYWxBY3Rpb24gPSBudWxsO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=