/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Type } from '@angular/core';
import { EventBusProxy } from './event-bus-proxy';
import { EventPipe } from './event-pipe';
import { DuplexEventPipe } from './duplex-event-pipe';
export class EventBus {
    constructor() {
        this.proxyMap = new Map();
        this.eventMap = new Map();
        this.notificationMap = new Map();
    }
    /**
     * @param {?} ownerType
     * @param {?} eventTokenValueProvider
     * @return {?}
     */
    getProxy(ownerType, eventTokenValueProvider) {
        /** @type {?} */
        const ownerName = ownerType.constructor.name;
        if (!this.proxyMap.has(ownerName)) {
            this.proxyMap.set(ownerName, new EventBusProxy(this, ownerType, eventTokenValueProvider));
        }
        return this.proxyMap.get(ownerName);
    }
    /**
     * 发送事件，通知订阅者接收消息。
     * @param {?} emitterType
     * @param {?} tokenValue
     * @param {?} eventName
     * @param {?} eventArgs
     * @return {?}
     */
    post(emitterType, tokenValue, eventName, eventArgs) {
        /** @type {?} */
        const eventPipeList = this.eventMap.get(eventName);
        if (!eventPipeList) {
            return;
        }
        if (!emitterType) {
            console.error('post方法的参数emitterType不能为空。');
            return;
        }
        /** @type {?} */
        let emitter;
        if (emitterType instanceof Type) {
            emitter = emitterType.name;
        }
        else {
            emitter = emitterType;
        }
        for (const eventPipe of eventPipeList) {
            if (eventPipe.matchEmitterToken(emitter, tokenValue)) {
                eventPipe.post(eventArgs);
                eventPipe.unSubscribeForOnce();
            }
        }
    }
    /**
     * 订阅事件
     * @param {?} target
     * @param {?} tokenValue
     * @param {?} eventName
     * @param {?} caller
     * @param {?} handler
     * @return {?}
     */
    on(target, tokenValue, eventName, caller, handler) {
        return this.getEventPipe(eventName, target, tokenValue).subscribe(handler, caller);
    }
    /**
     * 订阅一次。接收到一次消息之后自动取消订阅
     * @param {?} target
     * @param {?} tokenValue
     * @param {?} eventName
     * @param {?} caller
     * @param {?} handler
     * @return {?}
     */
    once(target, tokenValue, eventName, caller, handler) {
        return this.getEventPipe(eventName, target, tokenValue).subscribeOnce(handler, caller);
    }
    /**
     * 发送一个请求事件，获取监听者的响应并处理
     * @param {?} target
     * @param {?} tokenValue
     * @param {?} requestName
     * @param {?} requestValue
     * @param {?} success
     * @param {?=} fail
     * @return {?}
     */
    requestFor(target, tokenValue, requestName, requestValue, success, fail) {
        /** @type {?} */
        const eventPipe = this.findExistEventPipe(requestName, 'RequestSubject', tokenValue);
        if (eventPipe) {
            this.once(target, tokenValue, requestName, this, (response) => {
                if (response.status === 'success') {
                    success(response.data);
                }
                else {
                    if (fail) {
                        fail('No target responser listening');
                    }
                }
            });
            eventPipe.post({ target, token: tokenValue, data: requestValue });
        }
        else {
            if (fail) {
                fail('No target responser listening.');
            }
        }
    }
    /**
     * 监听一个请求事件，给出响应
     * @param {?} responseSubject
     * @param {?} requestName
     * @param {?} callback
     * @return {?}
     */
    responseOn(responseSubject, requestName, callback) {
        this.on('RequestSubject', null, requestName, this, (requestObj) => {
            /** @type {?} */
            const response = { status: 'fail', data: null };
            if (responseSubject === requestObj.target) {
                response.data = callback(requestObj.data);
                response.status = 'success';
            }
            this.post(requestObj.target, requestObj.token, requestName, response);
        });
    }
    /**
     * @param {?} eventName
     * @param {?} eventArgs
     * @return {?}
     */
    notify(eventName, eventArgs) {
        /** @type {?} */
        let notification = this.notificationMap.get(eventName);
        if (!notification) {
            notification = new DuplexEventPipe(eventName);
            this.notificationMap.set(eventName, notification);
        }
        return notification.notify(eventArgs);
    }
    /**
     * @param {?} eventName
     * @param {?} handler
     * @param {?=} caller
     * @return {?}
     */
    listen(eventName, handler, caller) {
        /** @type {?} */
        let notification = this.notificationMap.get(eventName);
        if (!notification) {
            notification = new DuplexEventPipe(eventName);
            this.notificationMap.set(eventName, notification);
        }
        return notification.listen(handler, caller);
    }
    /**
     * @private
     * @param {?} eventName
     * @param {?} target
     * @param {?} tokenValue
     * @return {?}
     */
    getEventPipe(eventName, target, tokenValue) {
        /** @type {?} */
        let eventPipeList = this.eventMap.get(eventName);
        if (!eventPipeList) {
            eventPipeList = new Array();
            this.eventMap.set(eventName, eventPipeList);
        }
        /** @type {?} */
        let eventPipe = eventPipeList.find(item => item.examByTargetToken(target, tokenValue));
        if (!eventPipe) {
            eventPipe = new EventPipe(eventName, tokenValue, target, eventPipeList);
        }
        return eventPipe;
    }
    /**
     * @private
     * @param {?} eventName
     * @param {?} target
     * @param {?} tokenValue
     * @return {?}
     */
    findExistEventPipe(eventName, target, tokenValue) {
        /** @type {?} */
        const eventPipeList = this.eventMap.get(eventName);
        if (!eventPipeList) {
            return null;
        }
        // return eventPipeList.find(item => item.examByTargetToken(target, tokenValue));
        for (const eventPipe of eventPipeList) {
            if (eventPipe.matchEmitterToken(target, tokenValue)) {
                return eventPipe;
            }
        }
        return null;
    }
}
EventBus.decorators = [
    { type: Injectable }
];
/** @nocollapse */
EventBus.ctorParameters = () => [];
if (false) {
    /**
     * @type {?}
     * @private
     */
    EventBus.prototype.proxyMap;
    /**
     * @type {?}
     * @private
     */
    EventBus.prototype.eventMap;
    /**
     * @type {?}
     * @private
     */
    EventBus.prototype.notificationMap;
}
class RequestSubject {
}
class DataClass {
}
//# sourceMappingURL=data:application/json;base64,