/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Subject } from 'rxjs/Subject';
export class EventPipe {
    /**
     * @param {?} name
     * @param {?} tokenValue
     * @param {?} emitter
     * @param {?} parentEventPipeList
     */
    constructor(name, tokenValue, emitter, parentEventPipeList) {
        this.name = name;
        this.tokenValue = tokenValue;
        this.emitter = emitter;
        this.parentEventPipeList = parentEventPipeList;
        this.eventSubject = new Subject();
        this.subscriptionMap = new Map();
        this.onceSubscriptionMap = new Map();
        if (this.parentEventPipeList) {
            this.parentEventPipeList.push(this);
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    post(data) {
        this.eventSubject.next(data);
    }
    /**
     * @param {?} eventHandler
     * @param {?} caller
     * @return {?}
     */
    subscribe(eventHandler, caller) {
        /** @type {?} */
        const subscription = this.eventSubject.subscribe((value) => eventHandler.call(caller, value));
        this.subscriptionMap.set(caller, subscription);
        return this;
    }
    /**
     * @param {?} eventHandler
     * @param {?} caller
     * @return {?}
     */
    subscribeOnce(eventHandler, caller) {
        /** @type {?} */
        const subscription = this.eventSubject.subscribe((value) => eventHandler.call(caller, value));
        this.onceSubscriptionMap.set(caller, subscription);
        return this;
    }
    /**
     * @param {?} subscriber
     * @return {?}
     */
    unSubscribe(subscriber) {
        /** @type {?} */
        let subscription = this.subscriptionMap.get(subscriber);
        if (subscription) {
            subscription.unsubscribe();
            subscription = null;
            this.subscriptionMap.delete(subscriber);
        }
        else {
            subscription = this.onceSubscriptionMap.get(subscriber);
            if (subscription) {
                subscription.unsubscribe();
                subscription = null;
                this.onceSubscriptionMap.delete(subscriber);
            }
        }
    }
    // 注销使用once方法注册的订阅。
    /**
     * @return {?}
     */
    unSubscribeForOnce() {
        for (const subscriber of Array.from(this.onceSubscriptionMap.keys())) {
            this.unSubscribe(subscriber);
        }
    }
    /**
     * @param {?} emitter
     * @param {?} tokenValue
     * @return {?}
     */
    matchEmitterToken(emitter, tokenValue) {
        if (this.emitter && emitter && this.emitter !== emitter) {
            return false;
        }
        if (this.tokenValue && tokenValue && this.tokenValue !== tokenValue) {
            return false;
        }
        return true;
    }
    /**
     * @param {?} target
     * @param {?} tokenValue
     * @return {?}
     */
    examByTargetToken(target, tokenValue) {
        if (this.emitter !== target) {
            return false;
        }
        if (this.tokenValue !== tokenValue) {
            return false;
        }
        return true;
    }
    /**
     * @param {?} subscriber
     * @return {?}
     */
    dispose(subscriber) {
        this.unSubscribe(subscriber);
        if (this.subscriptionMap.size === 0 && this.parentEventPipeList) {
            /** @type {?} */
            const location = this.parentEventPipeList.findIndex(item => item === this);
            if (location !== -1) {
                this.parentEventPipeList.splice(location, 1);
            }
        }
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    EventPipe.prototype.eventSubject;
    /**
     * @type {?}
     * @private
     */
    EventPipe.prototype.subscriptionMap;
    /**
     * @type {?}
     * @private
     */
    EventPipe.prototype.onceSubscriptionMap;
    /**
     * @type {?}
     * @private
     */
    EventPipe.prototype.name;
    /**
     * @type {?}
     * @private
     */
    EventPipe.prototype.tokenValue;
    /**
     * @type {?}
     * @private
     */
    EventPipe.prototype.emitter;
    /**
     * @type {?}
     * @private
     */
    EventPipe.prototype.parentEventPipeList;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQtcGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvaWRlLWRldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9pZGVmcmFtZXdvcmsvZXZlbnRidXMvZXZlbnQtcGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUl2QyxNQUFNLE9BQU8sU0FBUzs7Ozs7OztJQU1wQixZQUFvQixJQUFZLEVBQ1gsVUFBa0IsRUFDbEIsT0FBZSxFQUNmLG1CQUFxQztRQUh0QyxTQUFJLEdBQUosSUFBSSxDQUFRO1FBQ1gsZUFBVSxHQUFWLFVBQVUsQ0FBUTtRQUNsQixZQUFPLEdBQVAsT0FBTyxDQUFRO1FBQ2Ysd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFrQjtRQUN4RCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksT0FBTyxFQUFPLENBQUM7UUFDdkMsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLEdBQUcsRUFBd0IsQ0FBQztRQUN2RCxJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxHQUFHLEVBQXdCLENBQUM7UUFDM0QsSUFBSSxJQUFJLENBQUMsbUJBQW1CLEVBQUU7WUFDNUIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNyQztJQUNILENBQUM7Ozs7O0lBRUQsSUFBSSxDQUFDLElBQVM7UUFDWixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvQixDQUFDOzs7Ozs7SUFFRCxTQUFTLENBQUMsWUFBa0MsRUFBRSxNQUFjOztjQUNwRCxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzdGLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUN0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K0JBQTBCOzs7OztJQUMxQiw0QkFBdUI7Ozs7O0lBQ3ZCLHdDQUE2QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzL1N1YmplY3QnO1xyXG5pbXBvcnQge0lEaXNwb3NhYmxlfSBmcm9tICcuL3R5cGVzJztcclxuaW1wb3J0IHtTdWJzY3JpcHRpb259IGZyb20gJ3J4anMvU3Vic2NyaXB0aW9uJztcclxuXHJcbmV4cG9ydCBjbGFzcyBFdmVudFBpcGUgaW1wbGVtZW50cyBJRGlzcG9zYWJsZSB7XHJcblxyXG4gIHByaXZhdGUgZXZlbnRTdWJqZWN0OiBTdWJqZWN0PGFueT47XHJcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb25NYXA6IE1hcDxvYmplY3QsIFN1YnNjcmlwdGlvbj47XHJcbiAgcHJpdmF0ZSBvbmNlU3Vic2NyaXB0aW9uTWFwOiBNYXA8b2JqZWN0LCBTdWJzY3JpcHRpb24+O1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5hbWU6IHN0cmluZyxcclxuICAgICAgICAgICAgICAgcHJpdmF0ZSB0b2tlblZhbHVlOiBzdHJpbmcsXHJcbiAgICAgICAgICAgICAgIHByaXZhdGUgZW1pdHRlcjogc3RyaW5nLFxyXG4gICAgICAgICAgICAgICBwcml2YXRlIHBhcmVudEV2ZW50UGlwZUxpc3Q6IEFycmF5PEV2ZW50UGlwZT4pIHtcclxuICAgIHRoaXMuZXZlbnRTdWJqZWN0ID0gbmV3IFN1YmplY3Q8YW55PigpO1xyXG4gICAgdGhpcy5zdWJzY3JpcHRpb25NYXAgPSBuZXcgTWFwPG9iamVjdCwgU3Vic2NyaXB0aW9uPigpO1xyXG4gICAgdGhpcy5vbmNlU3Vic2NyaXB0aW9uTWFwID0gbmV3IE1hcDxvYmplY3QsIFN1YnNjcmlwdGlvbj4oKTtcclxuICAgIGlmICh0aGlzLnBhcmVudEV2ZW50UGlwZUxpc3QpIHtcclxuICAgICAgdGhpcy5wYXJlbnRFdmVudFBpcGVMaXN0LnB1c2godGhpcyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwb3N0KGRhdGE6IGFueSkge1xyXG4gICAgdGhpcy5ldmVudFN1YmplY3QubmV4dChkYXRhKTtcclxuICB9XHJcblxyXG4gIHN1YnNjcmliZShldmVudEhhbmRsZXI6ICh2YWx1ZTogYW55KSA9PiB2b2lkLCBjYWxsZXI6IG9iamVjdCk6IElEaXNwb3NhYmxlIHtcclxuICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHRoaXMuZXZlbnRTdWJqZWN0LnN1YnNjcmliZSgodmFsdWUpID0+IGV2ZW50SGFuZGxlci5jYWxsKGNhbGxlciwgdmFsdWUpKTtcclxuICAgIHRoaXMuc3Vic2NyaXB0aW9uTWFwLnNldChcclxuICAgICAgY2FsbGVyLFxyXG4gICAgICBzdWJzY3JpcHRpb25cclxuICAgICk7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIHN1YnNjcmliZU9uY2UoZXZlbnRIYW5kbGVyOiAodmFsdWU6IGFueSkgPT4gdm9pZCwgY2FsbGVyOiBvYmplY3QpOiBJRGlzcG9zYWJsZSB7XHJcbiAgICBjb25zdCBzdWJzY3JpcHRpb24gPSB0aGlzLmV2ZW50U3ViamVjdC5zdWJzY3JpYmUoKHZhbHVlKSA9PiBldmVudEhhbmRsZXIuY2FsbChjYWxsZXIsIHZhbHVlKSk7XHJcbiAgICB0aGlzLm9uY2VTdWJzY3JpcHRpb25NYXAuc2V0KFxyXG4gICAgICBjYWxsZXIsXHJcbiAgICAgIHN1YnNjcmlwdGlvblxyXG4gICAgKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgdW5TdWJzY3JpYmUoc3Vic2NyaWJlcjogb2JqZWN0KSB7XHJcbiAgICBsZXQgc3Vic2NyaXB0aW9uID0gdGhpcy5zdWJzY3JpcHRpb25NYXAuZ2V0KHN1YnNjcmliZXIpO1xyXG4gICAgaWYgKHN1YnNjcmlwdGlvbikge1xyXG4gICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcclxuICAgICAgc3Vic2NyaXB0aW9uID0gbnVsbDtcclxuICAgICAgdGhpcy5zdWJzY3JpcHRpb25NYXAuZGVsZXRlKHN1YnNjcmliZXIpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc3Vic2NyaXB0aW9uID0gdGhpcy5vbmNlU3Vic2NyaXB0aW9uTWFwLmdldChzdWJzY3JpYmVyKTtcclxuICAgICAgaWYgKHN1YnNjcmlwdGlvbikge1xyXG4gICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgIHN1YnNjcmlwdGlvbiA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5vbmNlU3Vic2NyaXB0aW9uTWFwLmRlbGV0ZShzdWJzY3JpYmVyKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8g5rOo6ZSA5L2/55Sob25jZeaWueazleazqOWGjOeahOiuoumYheOAglxyXG4gIHVuU3Vic2NyaWJlRm9yT25jZSgpIHtcclxuICAgIGZvciAoY29uc3Qgc3Vic2NyaWJlciBvZiBBcnJheS5mcm9tKHRoaXMub25jZVN1YnNjcmlwdGlvbk1hcC5rZXlzKCkpKSB7XHJcbiAgICAgIHRoaXMudW5TdWJzY3JpYmUoc3Vic2NyaWJlcik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBtYXRjaEVtaXR0ZXJUb2tlbihlbWl0dGVyOiBzdHJpbmcsIHRva2VuVmFsdWU6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKHRoaXMuZW1pdHRlciAmJiBlbWl0dGVyICYmIHRoaXMuZW1pdHRlciAhPT0gZW1pdHRlcikge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy50b2tlblZhbHVlICYmIHRva2VuVmFsdWUgJiYgdGhpcy50b2tlblZhbHVlICE9PSB0b2tlblZhbHVlKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuXHJcbiAgZXhhbUJ5VGFyZ2V0VG9rZW4odGFyZ2V0OiBzdHJpbmcsIHRva2VuVmFsdWU6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKHRoaXMuZW1pdHRlciAhPT0gdGFyZ2V0KSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLnRva2VuVmFsdWUgIT09IHRva2VuVmFsdWUpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKHN1YnNjcmliZXI6IG9iamVjdCk6IHZvaWQge1xyXG4gICAgdGhpcy51blN1YnNjcmliZShzdWJzY3JpYmVyKTtcclxuICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbk1hcC5zaXplID09PSAwICYmIHRoaXMucGFyZW50RXZlbnRQaXBlTGlzdCkge1xyXG4gICAgICBjb25zdCBsb2NhdGlvbiA9IHRoaXMucGFyZW50RXZlbnRQaXBlTGlzdC5maW5kSW5kZXgoaXRlbSA9PiBpdGVtID09PSB0aGlzKTtcclxuICAgICAgaWYgKGxvY2F0aW9uICE9PSAtMSkge1xyXG4gICAgICAgIHRoaXMucGFyZW50RXZlbnRQaXBlTGlzdC5zcGxpY2UobG9jYXRpb24sIDEpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==