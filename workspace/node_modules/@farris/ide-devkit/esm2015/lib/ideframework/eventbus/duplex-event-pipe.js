/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { forkJoin, Observable, of, Subject, timer } from 'rxjs';
import { mapTo } from 'rxjs/operators';
export class DuplexEventPipe {
    /**
     * @param {?} eventName
     */
    constructor(eventName) {
        this.listenerResults = new Map();
        this.subject = new Subject();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    notify(value) {
        /** @type {?} */
        let thenFn = () => { };
        /** @type {?} */
        let catchFn = () => { };
        /** @type {?} */
        const timestamp = Date.now().toString();
        this.subject.next({ value, timestamp });
        // fooObservable无意义，有两个作用：
        // 1. 没有实际observable时能够让forkJoin输出值，进入subscriber.next
        // 2. 建立延迟的observable（跳出当前micro task），避免subscription未返回和thenFn未被设置。
        /** @type {?} */
        const fooObservable = timer(0).pipe(mapTo(true));
        /** @type {?} */
        let listenerResultArray = this.listenerResults.get(timestamp);
        if (!listenerResultArray) {
            listenerResultArray = [fooObservable];
        }
        else {
            listenerResultArray = listenerResultArray.concat(fooObservable);
            this.listenerResults.delete(timestamp);
        }
        /** @type {?} */
        const subscription = forkJoin(listenerResultArray).subscribe({ next: (results) => {
                /** @type {?} */
                const success = results.reduce((previous, current) => previous && current);
                if (success) {
                    thenFn();
                }
                else {
                    catchFn();
                }
                subscription.unsubscribe();
            }, error: () => {
                subscription.unsubscribe();
            } });
        return {
            /**
             * @param {?} callback
             * @return {?}
             */
            then(callback) {
                thenFn = callback;
                return this;
            },
            /**
             * @param {?} callback
             * @return {?}
             */
            catch(callback) {
                catchFn = callback;
                return this;
            }
        };
    }
    /**
     * @param {?} callback
     * @param {?=} caller
     * @return {?}
     */
    listen(callback, caller) {
        /** @type {?} */
        const listener = caller ? callback.bind(caller) : callback;
        this.subject.subscribe(({ value, timestamp }) => {
            /** @type {?} */
            let listenerResult;
            /** @type {?} */
            const invokeResult = listener(value);
            if (invokeResult instanceof Observable) {
                listenerResult = invokeResult;
            }
            else if (typeof invokeResult === 'boolean') {
                listenerResult = of(invokeResult);
            }
            else {
                listenerResult = of(true);
            }
            /** @type {?} */
            let listenerResultArray = this.listenerResults.get(timestamp);
            if (!listenerResultArray) {
                listenerResultArray = [];
                this.listenerResults.set(timestamp, listenerResultArray);
            }
            listenerResultArray.push(listenerResult);
        });
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    DuplexEventPipe.prototype.listenerResults;
    /**
     * @type {?}
     * @private
     */
    DuplexEventPipe.prototype.subject;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHVwbGV4LWV2ZW50LXBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2lkZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvaWRlZnJhbWV3b3JrL2V2ZW50YnVzL2R1cGxleC1ldmVudC1waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVoRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFdkMsTUFBTSxPQUFPLGVBQWU7Ozs7SUFHMUIsWUFBWSxTQUFpQjtRQUMzQixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksR0FBRyxFQUFpQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxPQUFPLEVBQVcsQ0FBQztJQUN4QyxDQUFDOzs7OztJQUVELE1BQU0sQ0FBQyxLQUFVOztZQUNYLE1BQU0sR0FBZSxHQUFHLEVBQUUsR0FBRSxDQUFDOztZQUM3QixPQUFPLEdBQWUsR0FBRyxFQUFFLEdBQUUsQ0FBQzs7Y0FDNUIsU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLEVBQUU7UUFDdkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQzs7Ozs7Y0FLbEMsYUFBYSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDOztZQUM1QyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUM7UUFDN0QsSUFBSSxDQUFDLG1CQUFtQixFQUFFO1lBQ3hCLG1CQUFtQixHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDdkM7YUFBTTtZQUNMLG1CQUFtQixHQUFHLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUNoRSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUN4Qzs7Y0FDSyxZQUFZLEdBQUcsUUFBUSxDQUFDLG1CQUFtQixDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUMsSUFBSSxFQUFFLENBQUMsT0FBa0IsRUFBRSxFQUFFOztzQkFDbkYsT0FBTyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxRQUFRLElBQUksT0FBTyxDQUFDO2dCQUMxRSxJQUFJLE9BQU8sRUFBRTtvQkFDWCxNQUFNLEVBQUUsQ0FBQztpQkFDVjtxQkFBTTtvQkFDTCxPQUFPLEVBQUUsQ0FBQztpQkFDWDtnQkFDRCxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDN0IsQ0FBQyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUU7Z0JBQ2IsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQzdCLENBQUMsRUFBQyxDQUFDO1FBQ0gsT0FBTzs7Ozs7WUFDTCxJQUFJLENBQUMsUUFBbUI7Z0JBQ3RCLE1BQU0sR0FBRyxRQUFRLENBQUM7Z0JBQ2xCLE9BQU8sSUFBSSxDQUFDO1lBQ2QsQ0FBQzs7Ozs7WUFDRCxLQUFLLENBQUMsUUFBb0I7Z0JBQ3hCLE9BQU8sR0FBRyxRQUFRLENBQUM7Z0JBQ25CLE9BQU8sSUFBSSxDQUFDO1lBQ2QsQ0FBQztTQUNGLENBQUM7SUFDSixDQUFDOzs7Ozs7SUFFRCxNQUFNLENBQUMsUUFBOEQsRUFBRSxNQUFZOztjQUMzRSxRQUFRLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRO1FBQzFELElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBQyxLQUFLLEVBQUUsU0FBUyxFQUFDLEVBQUUsRUFBRTs7Z0JBQ3hDLGNBQW1DOztrQkFDakMsWUFBWSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUM7WUFDcEMsSUFBSSxZQUFZLFlBQVksVUFBVSxFQUFFO2dCQUN0QyxjQUFjLEdBQUcsWUFBWSxDQUFDO2FBQy9CO2lCQUFNLElBQUksT0FBTyxZQUFZLEtBQUssU0FBUyxFQUFFO2dCQUM1QyxjQUFjLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDO2FBQ25DO2lCQUFNO2dCQUNMLGNBQWMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDM0I7O2dCQUVHLG1CQUFtQixHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQztZQUM3RCxJQUFJLENBQUMsbUJBQW1CLEVBQUU7Z0JBQ3hCLG1CQUFtQixHQUFHLEVBQUUsQ0FBQztnQkFDekIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLG1CQUFtQixDQUFDLENBQUM7YUFDMUQ7WUFDRCxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDM0MsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7Ozs7OztJQXBFQywwQ0FBNEQ7Ozs7O0lBQzVELGtDQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZvcmtKb2luLCBPYnNlcnZhYmxlLCBvZiwgU3ViamVjdCwgdGltZXIgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgSVRoZW5hYmxlIH0gZnJvbSAnLi90eXBlcyc7XHJcbmltcG9ydCB7IG1hcFRvIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIER1cGxleEV2ZW50UGlwZSB7XHJcbiAgcHJpdmF0ZSBsaXN0ZW5lclJlc3VsdHM6IE1hcDxzdHJpbmcsIE9ic2VydmFibGU8Ym9vbGVhbj5bXT47XHJcbiAgcHJpdmF0ZSBzdWJqZWN0OiBTdWJqZWN0PGFueT47XHJcbiAgY29uc3RydWN0b3IoZXZlbnROYW1lOiBzdHJpbmcpIHtcclxuICAgIHRoaXMubGlzdGVuZXJSZXN1bHRzID0gbmV3IE1hcDxzdHJpbmcsIE9ic2VydmFibGU8Ym9vbGVhbj5bXT4oKTtcclxuICAgIHRoaXMuc3ViamVjdCA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XHJcbiAgfVxyXG5cclxuICBub3RpZnkodmFsdWU6IGFueSk6IElUaGVuYWJsZSB7XHJcbiAgICBsZXQgdGhlbkZuOiAoKSA9PiB2b2lkID0gKCkgPT4ge307XHJcbiAgICBsZXQgY2F0Y2hGbjogKCkgPT4gdm9pZCA9ICgpID0+IHt9O1xyXG4gICAgY29uc3QgdGltZXN0YW1wID0gRGF0ZS5ub3coKS50b1N0cmluZygpO1xyXG4gICAgdGhpcy5zdWJqZWN0Lm5leHQoeyB2YWx1ZSwgdGltZXN0YW1wIH0pO1xyXG5cclxuICAgIC8vIGZvb09ic2VydmFibGXml6DmhI/kuYnvvIzmnInkuKTkuKrkvZznlKjvvJpcclxuICAgIC8vIDEuIOayoeacieWunumZhW9ic2VydmFibGXml7bog73lpJ/orqlmb3JrSm9pbui+k+WHuuWAvO+8jOi/m+WFpXN1YnNjcmliZXIubmV4dFxyXG4gICAgLy8gMi4g5bu656uL5bu26L+f55qEb2JzZXJ2YWJsZe+8iOi3s+WHuuW9k+WJjW1pY3JvIHRhc2vvvInvvIzpgb/lhY1zdWJzY3JpcHRpb27mnKrov5Tlm57lkox0aGVuRm7mnKrooqvorr7nva7jgIJcclxuICAgIGNvbnN0IGZvb09ic2VydmFibGUgPSB0aW1lcigwKS5waXBlKG1hcFRvKHRydWUpKTtcclxuICAgIGxldCBsaXN0ZW5lclJlc3VsdEFycmF5ID0gdGhpcy5saXN0ZW5lclJlc3VsdHMuZ2V0KHRpbWVzdGFtcCk7XHJcbiAgICBpZiAoIWxpc3RlbmVyUmVzdWx0QXJyYXkpIHtcclxuICAgICAgbGlzdGVuZXJSZXN1bHRBcnJheSA9IFtmb29PYnNlcnZhYmxlXTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGxpc3RlbmVyUmVzdWx0QXJyYXkgPSBsaXN0ZW5lclJlc3VsdEFycmF5LmNvbmNhdChmb29PYnNlcnZhYmxlKTtcclxuICAgICAgdGhpcy5saXN0ZW5lclJlc3VsdHMuZGVsZXRlKHRpbWVzdGFtcCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBmb3JrSm9pbihsaXN0ZW5lclJlc3VsdEFycmF5KS5zdWJzY3JpYmUoe25leHQ6IChyZXN1bHRzOiBib29sZWFuW10pID0+IHtcclxuICAgICAgY29uc3Qgc3VjY2VzcyA9IHJlc3VsdHMucmVkdWNlKChwcmV2aW91cywgY3VycmVudCkgPT4gcHJldmlvdXMgJiYgY3VycmVudCk7XHJcbiAgICAgIGlmIChzdWNjZXNzKSB7XHJcbiAgICAgICAgdGhlbkZuKCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY2F0Y2hGbigpO1xyXG4gICAgICB9XHJcbiAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgfSwgZXJyb3I6ICgpID0+IHtcclxuICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICB9fSk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0aGVuKGNhbGxiYWNrOiAoKSA9PiBhbnkpIHtcclxuICAgICAgICB0aGVuRm4gPSBjYWxsYmFjaztcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgfSxcclxuICAgICAgY2F0Y2goY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcclxuICAgICAgICBjYXRjaEZuID0gY2FsbGJhY2s7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBsaXN0ZW4oY2FsbGJhY2s6ICh2YWx1ZTogYW55KSA9PiBPYnNlcnZhYmxlPGJvb2xlYW4+IHwgYm9vbGVhbiB8IHZvaWQsIGNhbGxlcj86IGFueSkge1xyXG4gICAgY29uc3QgbGlzdGVuZXIgPSBjYWxsZXIgPyBjYWxsYmFjay5iaW5kKGNhbGxlcikgOiBjYWxsYmFjaztcclxuICAgIHRoaXMuc3ViamVjdC5zdWJzY3JpYmUoKHt2YWx1ZSwgdGltZXN0YW1wfSkgPT4ge1xyXG4gICAgICBsZXQgbGlzdGVuZXJSZXN1bHQ6IE9ic2VydmFibGU8Ym9vbGVhbj47XHJcbiAgICAgIGNvbnN0IGludm9rZVJlc3VsdCA9IGxpc3RlbmVyKHZhbHVlKTtcclxuICAgICAgaWYgKGludm9rZVJlc3VsdCBpbnN0YW5jZW9mIE9ic2VydmFibGUpIHtcclxuICAgICAgICBsaXN0ZW5lclJlc3VsdCA9IGludm9rZVJlc3VsdDtcclxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaW52b2tlUmVzdWx0ID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgICBsaXN0ZW5lclJlc3VsdCA9IG9mKGludm9rZVJlc3VsdCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbGlzdGVuZXJSZXN1bHQgPSBvZih0cnVlKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IGxpc3RlbmVyUmVzdWx0QXJyYXkgPSB0aGlzLmxpc3RlbmVyUmVzdWx0cy5nZXQodGltZXN0YW1wKTtcclxuICAgICAgaWYgKCFsaXN0ZW5lclJlc3VsdEFycmF5KSB7XHJcbiAgICAgICAgbGlzdGVuZXJSZXN1bHRBcnJheSA9IFtdO1xyXG4gICAgICAgIHRoaXMubGlzdGVuZXJSZXN1bHRzLnNldCh0aW1lc3RhbXAsIGxpc3RlbmVyUmVzdWx0QXJyYXkpO1xyXG4gICAgICB9XHJcbiAgICAgIGxpc3RlbmVyUmVzdWx0QXJyYXkucHVzaChsaXN0ZW5lclJlc3VsdCk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIl19