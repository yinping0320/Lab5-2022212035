/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
var Util = /** @class */ (function () {
    function Util() {
    }
    /**
     * @return {?}
     */
    Util.prototype.newGuid = /**
     * @return {?}
     */
    function () {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            // tslint:disable: no-bitwise
            /** @type {?} */
            var r = Math.random() * 16 | 0;
            /** @type {?} */
            var v = c === 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    };
    /**
     * 向url添加QueryParam
     * @param url 原始url
     * @param paramName 参数名
     * @param paramValue 参数值
     * @param override 是否覆盖。为True时，如果参数已存在，将覆盖已有参数，否则放弃处理。默认为False。
     */
    /**
     * 向url添加QueryParam
     * @param {?} url 原始url
     * @param {?} paramName 参数名
     * @param {?} paramValue 参数值
     * @param {?=} override 是否覆盖。为True时，如果参数已存在，将覆盖已有参数，否则放弃处理。默认为False。
     * @return {?}
     */
    Util.prototype.setUrlParam = /**
     * 向url添加QueryParam
     * @param {?} url 原始url
     * @param {?} paramName 参数名
     * @param {?} paramValue 参数值
     * @param {?=} override 是否覆盖。为True时，如果参数已存在，将覆盖已有参数，否则放弃处理。默认为False。
     * @return {?}
     */
    function (url, paramName, paramValue, override) {
        var _a = tslib_1.__read(url.split('?'), 2), path = _a[0], search = _a[1];
        /** @type {?} */
        var params = new URLSearchParams(search);
        if (params.has(paramName) && !override) {
            return url;
        }
        params.set(paramName, paramValue);
        return path + '?' + params.toString();
    };
    Util.decorators = [
        { type: Injectable }
    ];
    return Util;
}());
export { Util };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvaWRlLWRldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9pZGVmcmFtZXdvcmsvdXRpbC91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV6QztJQUFBO0lBNEJBLENBQUM7Ozs7SUExQkMsc0JBQU87OztJQUFQO1FBQ0UsT0FBTyxzQ0FBc0MsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQzs7O2dCQUVsRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDOztnQkFDMUIsQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztZQUN6QyxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDeEIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7Ozs7OztPQU1HOzs7Ozs7Ozs7SUFDSCwwQkFBVzs7Ozs7Ozs7SUFBWCxVQUFZLEdBQVcsRUFBRSxTQUFpQixFQUFFLFVBQWtCLEVBQUUsUUFBa0I7UUFDMUUsSUFBQSxzQ0FBK0IsRUFBOUIsWUFBSSxFQUFFLGNBQXdCOztZQUMvQixNQUFNLEdBQUcsSUFBSSxlQUFlLENBQUMsTUFBTSxDQUFDO1FBQzFDLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUN0QyxPQUFPLEdBQUcsQ0FBQztTQUNaO1FBRUQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDbEMsT0FBTyxJQUFJLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN4QyxDQUFDOztnQkEzQkYsVUFBVTs7SUE0QlgsV0FBQztDQUFBLEFBNUJELElBNEJDO1NBM0JZLElBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgVXRpbCB7XHJcbiAgbmV3R3VpZCgpIHtcclxuICAgIHJldHVybiAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uIChjKSB7XHJcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlOiBuby1iaXR3aXNlXHJcbiAgICAgIGNvbnN0IHIgPSBNYXRoLnJhbmRvbSgpICogMTYgfCAwO1xyXG4gICAgICBjb25zdCB2ID0gYyA9PT0gJ3gnID8gciA6IChyICYgMHgzIHwgMHg4KTtcclxuICAgICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlkJF1cmzmt7vliqBRdWVyeVBhcmFtXHJcbiAgICogQHBhcmFtIHVybCDljp/lp4t1cmxcclxuICAgKiBAcGFyYW0gcGFyYW1OYW1lIOWPguaVsOWQjVxyXG4gICAqIEBwYXJhbSBwYXJhbVZhbHVlIOWPguaVsOWAvFxyXG4gICAqIEBwYXJhbSBvdmVycmlkZSDmmK/lkKbopobnm5bjgILkuLpUcnVl5pe277yM5aaC5p6c5Y+C5pWw5bey5a2Y5Zyo77yM5bCG6KaG55uW5bey5pyJ5Y+C5pWw77yM5ZCm5YiZ5pS+5byD5aSE55CG44CC6buY6K6k5Li6RmFsc2XjgIJcclxuICAgKi9cclxuICBzZXRVcmxQYXJhbSh1cmw6IHN0cmluZywgcGFyYW1OYW1lOiBzdHJpbmcsIHBhcmFtVmFsdWU6IHN0cmluZywgb3ZlcnJpZGU/OiBib29sZWFuKSB7XHJcbiAgICBjb25zdCBbcGF0aCwgc2VhcmNoXSA9IHVybC5zcGxpdCgnPycpO1xyXG4gICAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhzZWFyY2gpO1xyXG4gICAgaWYgKHBhcmFtcy5oYXMocGFyYW1OYW1lKSAmJiAhb3ZlcnJpZGUpIHtcclxuICAgICAgcmV0dXJuIHVybDtcclxuICAgIH1cclxuXHJcbiAgICBwYXJhbXMuc2V0KHBhcmFtTmFtZSwgcGFyYW1WYWx1ZSk7XHJcbiAgICByZXR1cm4gcGF0aCArICc/JyArIHBhcmFtcy50b1N0cmluZygpO1xyXG4gIH1cclxufVxyXG4iXX0=