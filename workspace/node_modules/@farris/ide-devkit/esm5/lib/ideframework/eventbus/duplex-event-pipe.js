/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { forkJoin, Observable, of, Subject, timer } from 'rxjs';
import { mapTo } from 'rxjs/operators';
var DuplexEventPipe = /** @class */ (function () {
    function DuplexEventPipe(eventName) {
        this.listenerResults = new Map();
        this.subject = new Subject();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    DuplexEventPipe.prototype.notify = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var thenFn = function () { };
        /** @type {?} */
        var catchFn = function () { };
        /** @type {?} */
        var timestamp = Date.now().toString();
        this.subject.next({ value: value, timestamp: timestamp });
        // fooObservable无意义，有两个作用：
        // 1. 没有实际observable时能够让forkJoin输出值，进入subscriber.next
        // 2. 建立延迟的observable（跳出当前micro task），避免subscription未返回和thenFn未被设置。
        /** @type {?} */
        var fooObservable = timer(0).pipe(mapTo(true));
        /** @type {?} */
        var listenerResultArray = this.listenerResults.get(timestamp);
        if (!listenerResultArray) {
            listenerResultArray = [fooObservable];
        }
        else {
            listenerResultArray = listenerResultArray.concat(fooObservable);
            this.listenerResults.delete(timestamp);
        }
        /** @type {?} */
        var subscription = forkJoin(listenerResultArray).subscribe({ next: function (results) {
                /** @type {?} */
                var success = results.reduce(function (previous, current) { return previous && current; });
                if (success) {
                    thenFn();
                }
                else {
                    catchFn();
                }
                subscription.unsubscribe();
            }, error: function () {
                subscription.unsubscribe();
            } });
        return {
            then: /**
             * @param {?} callback
             * @return {?}
             */
            function (callback) {
                thenFn = callback;
                return this;
            },
            catch: /**
             * @param {?} callback
             * @return {?}
             */
            function (callback) {
                catchFn = callback;
                return this;
            }
        };
    };
    /**
     * @param {?} callback
     * @param {?=} caller
     * @return {?}
     */
    DuplexEventPipe.prototype.listen = /**
     * @param {?} callback
     * @param {?=} caller
     * @return {?}
     */
    function (callback, caller) {
        var _this = this;
        /** @type {?} */
        var listener = caller ? callback.bind(caller) : callback;
        this.subject.subscribe(function (_a) {
            var value = _a.value, timestamp = _a.timestamp;
            /** @type {?} */
            var listenerResult;
            /** @type {?} */
            var invokeResult = listener(value);
            if (invokeResult instanceof Observable) {
                listenerResult = invokeResult;
            }
            else if (typeof invokeResult === 'boolean') {
                listenerResult = of(invokeResult);
            }
            else {
                listenerResult = of(true);
            }
            /** @type {?} */
            var listenerResultArray = _this.listenerResults.get(timestamp);
            if (!listenerResultArray) {
                listenerResultArray = [];
                _this.listenerResults.set(timestamp, listenerResultArray);
            }
            listenerResultArray.push(listenerResult);
        });
    };
    return DuplexEventPipe;
}());
export { DuplexEventPipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DuplexEventPipe.prototype.listenerResults;
    /**
     * @type {?}
     * @private
     */
    DuplexEventPipe.prototype.subject;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHVwbGV4LWV2ZW50LXBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2lkZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvaWRlZnJhbWV3b3JrL2V2ZW50YnVzL2R1cGxleC1ldmVudC1waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVoRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFdkM7SUFHRSx5QkFBWSxTQUFpQjtRQUMzQixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksR0FBRyxFQUFpQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxPQUFPLEVBQVcsQ0FBQztJQUN4QyxDQUFDOzs7OztJQUVELGdDQUFNOzs7O0lBQU4sVUFBTyxLQUFVOztZQUNYLE1BQU0sR0FBZSxjQUFPLENBQUM7O1lBQzdCLE9BQU8sR0FBZSxjQUFPLENBQUM7O1lBQzVCLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxFQUFFO1FBQ3ZDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxPQUFBLEVBQUUsU0FBUyxXQUFBLEVBQUUsQ0FBQyxDQUFDOzs7OztZQUtsQyxhQUFhLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7O1lBQzVDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQztRQUM3RCxJQUFJLENBQUMsbUJBQW1CLEVBQUU7WUFDeEIsbUJBQW1CLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUN2QzthQUFNO1lBQ0wsbUJBQW1CLEdBQUcsbUJBQW1CLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ2hFLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ3hDOztZQUNLLFlBQVksR0FBRyxRQUFRLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBQyxJQUFJLEVBQUUsVUFBQyxPQUFrQjs7b0JBQy9FLE9BQU8sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLFVBQUMsUUFBUSxFQUFFLE9BQU8sSUFBSyxPQUFBLFFBQVEsSUFBSSxPQUFPLEVBQW5CLENBQW1CLENBQUM7Z0JBQzFFLElBQUksT0FBTyxFQUFFO29CQUNYLE1BQU0sRUFBRSxDQUFDO2lCQUNWO3FCQUFNO29CQUNMLE9BQU8sRUFBRSxDQUFDO2lCQUNYO2dCQUNELFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUM3QixDQUFDLEVBQUUsS0FBSyxFQUFFO2dCQUNSLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUM3QixDQUFDLEVBQUMsQ0FBQztRQUNILE9BQU87WUFDTCxJQUFJOzs7O3NCQUFDLFFBQW1CO2dCQUN0QixNQUFNLEdBQUcsUUFBUSxDQUFDO2dCQUNsQixPQUFPLElBQUksQ0FBQztZQUNkLENBQUM7WUFDRCxLQUFLOzs7O3NCQUFDLFFBQW9CO2dCQUN4QixPQUFPLEdBQUcsUUFBUSxDQUFDO2dCQUNuQixPQUFPLElBQUksQ0FBQztZQUNkLENBQUM7U0FDRixDQUFDO0lBQ0osQ0FBQzs7Ozs7O0lBRUQsZ0NBQU07Ozs7O0lBQU4sVUFBTyxRQUE4RCxFQUFFLE1BQVk7UUFBbkYsaUJBb0JDOztZQW5CTyxRQUFRLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRO1FBQzFELElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFVBQUMsRUFBa0I7Z0JBQWpCLGdCQUFLLEVBQUUsd0JBQVM7O2dCQUNuQyxjQUFtQzs7Z0JBQ2pDLFlBQVksR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDO1lBQ3BDLElBQUksWUFBWSxZQUFZLFVBQVUsRUFBRTtnQkFDdEMsY0FBYyxHQUFHLFlBQVksQ0FBQzthQUMvQjtpQkFBTSxJQUFJLE9BQU8sWUFBWSxLQUFLLFNBQVMsRUFBRTtnQkFDNUMsY0FBYyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQzthQUNuQztpQkFBTTtnQkFDTCxjQUFjLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQzNCOztnQkFFRyxtQkFBbUIsR0FBRyxLQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUM7WUFDN0QsSUFBSSxDQUFDLG1CQUFtQixFQUFFO2dCQUN4QixtQkFBbUIsR0FBRyxFQUFFLENBQUM7Z0JBQ3pCLEtBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO2FBQzFEO1lBQ0QsbUJBQW1CLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQzNDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUNILHNCQUFDO0FBQUQsQ0FBQyxBQXJFRCxJQXFFQzs7Ozs7OztJQXBFQywwQ0FBNEQ7Ozs7O0lBQzVELGtDQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZvcmtKb2luLCBPYnNlcnZhYmxlLCBvZiwgU3ViamVjdCwgdGltZXIgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgSVRoZW5hYmxlIH0gZnJvbSAnLi90eXBlcyc7XHJcbmltcG9ydCB7IG1hcFRvIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIER1cGxleEV2ZW50UGlwZSB7XHJcbiAgcHJpdmF0ZSBsaXN0ZW5lclJlc3VsdHM6IE1hcDxzdHJpbmcsIE9ic2VydmFibGU8Ym9vbGVhbj5bXT47XHJcbiAgcHJpdmF0ZSBzdWJqZWN0OiBTdWJqZWN0PGFueT47XHJcbiAgY29uc3RydWN0b3IoZXZlbnROYW1lOiBzdHJpbmcpIHtcclxuICAgIHRoaXMubGlzdGVuZXJSZXN1bHRzID0gbmV3IE1hcDxzdHJpbmcsIE9ic2VydmFibGU8Ym9vbGVhbj5bXT4oKTtcclxuICAgIHRoaXMuc3ViamVjdCA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XHJcbiAgfVxyXG5cclxuICBub3RpZnkodmFsdWU6IGFueSk6IElUaGVuYWJsZSB7XHJcbiAgICBsZXQgdGhlbkZuOiAoKSA9PiB2b2lkID0gKCkgPT4ge307XHJcbiAgICBsZXQgY2F0Y2hGbjogKCkgPT4gdm9pZCA9ICgpID0+IHt9O1xyXG4gICAgY29uc3QgdGltZXN0YW1wID0gRGF0ZS5ub3coKS50b1N0cmluZygpO1xyXG4gICAgdGhpcy5zdWJqZWN0Lm5leHQoeyB2YWx1ZSwgdGltZXN0YW1wIH0pO1xyXG5cclxuICAgIC8vIGZvb09ic2VydmFibGXml6DmhI/kuYnvvIzmnInkuKTkuKrkvZznlKjvvJpcclxuICAgIC8vIDEuIOayoeacieWunumZhW9ic2VydmFibGXml7bog73lpJ/orqlmb3JrSm9pbui+k+WHuuWAvO+8jOi/m+WFpXN1YnNjcmliZXIubmV4dFxyXG4gICAgLy8gMi4g5bu656uL5bu26L+f55qEb2JzZXJ2YWJsZe+8iOi3s+WHuuW9k+WJjW1pY3JvIHRhc2vvvInvvIzpgb/lhY1zdWJzY3JpcHRpb27mnKrov5Tlm57lkox0aGVuRm7mnKrooqvorr7nva7jgIJcclxuICAgIGNvbnN0IGZvb09ic2VydmFibGUgPSB0aW1lcigwKS5waXBlKG1hcFRvKHRydWUpKTtcclxuICAgIGxldCBsaXN0ZW5lclJlc3VsdEFycmF5ID0gdGhpcy5saXN0ZW5lclJlc3VsdHMuZ2V0KHRpbWVzdGFtcCk7XHJcbiAgICBpZiAoIWxpc3RlbmVyUmVzdWx0QXJyYXkpIHtcclxuICAgICAgbGlzdGVuZXJSZXN1bHRBcnJheSA9IFtmb29PYnNlcnZhYmxlXTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGxpc3RlbmVyUmVzdWx0QXJyYXkgPSBsaXN0ZW5lclJlc3VsdEFycmF5LmNvbmNhdChmb29PYnNlcnZhYmxlKTtcclxuICAgICAgdGhpcy5saXN0ZW5lclJlc3VsdHMuZGVsZXRlKHRpbWVzdGFtcCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBmb3JrSm9pbihsaXN0ZW5lclJlc3VsdEFycmF5KS5zdWJzY3JpYmUoe25leHQ6IChyZXN1bHRzOiBib29sZWFuW10pID0+IHtcclxuICAgICAgY29uc3Qgc3VjY2VzcyA9IHJlc3VsdHMucmVkdWNlKChwcmV2aW91cywgY3VycmVudCkgPT4gcHJldmlvdXMgJiYgY3VycmVudCk7XHJcbiAgICAgIGlmIChzdWNjZXNzKSB7XHJcbiAgICAgICAgdGhlbkZuKCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY2F0Y2hGbigpO1xyXG4gICAgICB9XHJcbiAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgfSwgZXJyb3I6ICgpID0+IHtcclxuICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICB9fSk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0aGVuKGNhbGxiYWNrOiAoKSA9PiBhbnkpIHtcclxuICAgICAgICB0aGVuRm4gPSBjYWxsYmFjaztcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgfSxcclxuICAgICAgY2F0Y2goY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcclxuICAgICAgICBjYXRjaEZuID0gY2FsbGJhY2s7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBsaXN0ZW4oY2FsbGJhY2s6ICh2YWx1ZTogYW55KSA9PiBPYnNlcnZhYmxlPGJvb2xlYW4+IHwgYm9vbGVhbiB8IHZvaWQsIGNhbGxlcj86IGFueSkge1xyXG4gICAgY29uc3QgbGlzdGVuZXIgPSBjYWxsZXIgPyBjYWxsYmFjay5iaW5kKGNhbGxlcikgOiBjYWxsYmFjaztcclxuICAgIHRoaXMuc3ViamVjdC5zdWJzY3JpYmUoKHt2YWx1ZSwgdGltZXN0YW1wfSkgPT4ge1xyXG4gICAgICBsZXQgbGlzdGVuZXJSZXN1bHQ6IE9ic2VydmFibGU8Ym9vbGVhbj47XHJcbiAgICAgIGNvbnN0IGludm9rZVJlc3VsdCA9IGxpc3RlbmVyKHZhbHVlKTtcclxuICAgICAgaWYgKGludm9rZVJlc3VsdCBpbnN0YW5jZW9mIE9ic2VydmFibGUpIHtcclxuICAgICAgICBsaXN0ZW5lclJlc3VsdCA9IGludm9rZVJlc3VsdDtcclxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaW52b2tlUmVzdWx0ID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgICBsaXN0ZW5lclJlc3VsdCA9IG9mKGludm9rZVJlc3VsdCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbGlzdGVuZXJSZXN1bHQgPSBvZih0cnVlKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IGxpc3RlbmVyUmVzdWx0QXJyYXkgPSB0aGlzLmxpc3RlbmVyUmVzdWx0cy5nZXQodGltZXN0YW1wKTtcclxuICAgICAgaWYgKCFsaXN0ZW5lclJlc3VsdEFycmF5KSB7XHJcbiAgICAgICAgbGlzdGVuZXJSZXN1bHRBcnJheSA9IFtdO1xyXG4gICAgICAgIHRoaXMubGlzdGVuZXJSZXN1bHRzLnNldCh0aW1lc3RhbXAsIGxpc3RlbmVyUmVzdWx0QXJyYXkpO1xyXG4gICAgICB9XHJcbiAgICAgIGxpc3RlbmVyUmVzdWx0QXJyYXkucHVzaChsaXN0ZW5lclJlc3VsdCk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIl19