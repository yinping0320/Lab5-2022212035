/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Type } from '@angular/core';
import { EventBusProxy } from './event-bus-proxy';
import { EventPipe } from './event-pipe';
import { DuplexEventPipe } from './duplex-event-pipe';
var EventBus = /** @class */ (function () {
    function EventBus() {
        this.proxyMap = new Map();
        this.eventMap = new Map();
        this.notificationMap = new Map();
    }
    /**
     * @param {?} ownerType
     * @param {?} eventTokenValueProvider
     * @return {?}
     */
    EventBus.prototype.getProxy = /**
     * @param {?} ownerType
     * @param {?} eventTokenValueProvider
     * @return {?}
     */
    function (ownerType, eventTokenValueProvider) {
        /** @type {?} */
        var ownerName = ownerType.constructor.name;
        if (!this.proxyMap.has(ownerName)) {
            this.proxyMap.set(ownerName, new EventBusProxy(this, ownerType, eventTokenValueProvider));
        }
        return this.proxyMap.get(ownerName);
    };
    /**
     * 发送事件，通知订阅者接收消息。
     */
    /**
     * 发送事件，通知订阅者接收消息。
     * @param {?} emitterType
     * @param {?} tokenValue
     * @param {?} eventName
     * @param {?} eventArgs
     * @return {?}
     */
    EventBus.prototype.post = /**
     * 发送事件，通知订阅者接收消息。
     * @param {?} emitterType
     * @param {?} tokenValue
     * @param {?} eventName
     * @param {?} eventArgs
     * @return {?}
     */
    function (emitterType, tokenValue, eventName, eventArgs) {
        var e_1, _a;
        /** @type {?} */
        var eventPipeList = this.eventMap.get(eventName);
        if (!eventPipeList) {
            return;
        }
        if (!emitterType) {
            console.error('post方法的参数emitterType不能为空。');
            return;
        }
        /** @type {?} */
        var emitter;
        if (emitterType instanceof Type) {
            emitter = emitterType.name;
        }
        else {
            emitter = emitterType;
        }
        try {
            for (var eventPipeList_1 = tslib_1.__values(eventPipeList), eventPipeList_1_1 = eventPipeList_1.next(); !eventPipeList_1_1.done; eventPipeList_1_1 = eventPipeList_1.next()) {
                var eventPipe = eventPipeList_1_1.value;
                if (eventPipe.matchEmitterToken(emitter, tokenValue)) {
                    eventPipe.post(eventArgs);
                    eventPipe.unSubscribeForOnce();
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (eventPipeList_1_1 && !eventPipeList_1_1.done && (_a = eventPipeList_1.return)) _a.call(eventPipeList_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * 订阅事件
     */
    /**
     * 订阅事件
     * @param {?} target
     * @param {?} tokenValue
     * @param {?} eventName
     * @param {?} caller
     * @param {?} handler
     * @return {?}
     */
    EventBus.prototype.on = /**
     * 订阅事件
     * @param {?} target
     * @param {?} tokenValue
     * @param {?} eventName
     * @param {?} caller
     * @param {?} handler
     * @return {?}
     */
    function (target, tokenValue, eventName, caller, handler) {
        return this.getEventPipe(eventName, target, tokenValue).subscribe(handler, caller);
    };
    /**
     * 订阅一次。接收到一次消息之后自动取消订阅
     */
    /**
     * 订阅一次。接收到一次消息之后自动取消订阅
     * @param {?} target
     * @param {?} tokenValue
     * @param {?} eventName
     * @param {?} caller
     * @param {?} handler
     * @return {?}
     */
    EventBus.prototype.once = /**
     * 订阅一次。接收到一次消息之后自动取消订阅
     * @param {?} target
     * @param {?} tokenValue
     * @param {?} eventName
     * @param {?} caller
     * @param {?} handler
     * @return {?}
     */
    function (target, tokenValue, eventName, caller, handler) {
        return this.getEventPipe(eventName, target, tokenValue).subscribeOnce(handler, caller);
    };
    /**
     * 发送一个请求事件，获取监听者的响应并处理
     */
    /**
     * 发送一个请求事件，获取监听者的响应并处理
     * @param {?} target
     * @param {?} tokenValue
     * @param {?} requestName
     * @param {?} requestValue
     * @param {?} success
     * @param {?=} fail
     * @return {?}
     */
    EventBus.prototype.requestFor = /**
     * 发送一个请求事件，获取监听者的响应并处理
     * @param {?} target
     * @param {?} tokenValue
     * @param {?} requestName
     * @param {?} requestValue
     * @param {?} success
     * @param {?=} fail
     * @return {?}
     */
    function (target, tokenValue, requestName, requestValue, success, fail) {
        /** @type {?} */
        var eventPipe = this.findExistEventPipe(requestName, 'RequestSubject', tokenValue);
        if (eventPipe) {
            this.once(target, tokenValue, requestName, this, function (response) {
                if (response.status === 'success') {
                    success(response.data);
                }
                else {
                    if (fail) {
                        fail('No target responser listening');
                    }
                }
            });
            eventPipe.post({ target: target, token: tokenValue, data: requestValue });
        }
        else {
            if (fail) {
                fail('No target responser listening.');
            }
        }
    };
    /**
     * 监听一个请求事件，给出响应
     */
    /**
     * 监听一个请求事件，给出响应
     * @param {?} responseSubject
     * @param {?} requestName
     * @param {?} callback
     * @return {?}
     */
    EventBus.prototype.responseOn = /**
     * 监听一个请求事件，给出响应
     * @param {?} responseSubject
     * @param {?} requestName
     * @param {?} callback
     * @return {?}
     */
    function (responseSubject, requestName, callback) {
        var _this = this;
        this.on('RequestSubject', null, requestName, this, function (requestObj) {
            /** @type {?} */
            var response = { status: 'fail', data: null };
            if (responseSubject === requestObj.target) {
                response.data = callback(requestObj.data);
                response.status = 'success';
            }
            _this.post(requestObj.target, requestObj.token, requestName, response);
        });
    };
    /**
     * @param {?} eventName
     * @param {?} eventArgs
     * @return {?}
     */
    EventBus.prototype.notify = /**
     * @param {?} eventName
     * @param {?} eventArgs
     * @return {?}
     */
    function (eventName, eventArgs) {
        /** @type {?} */
        var notification = this.notificationMap.get(eventName);
        if (!notification) {
            notification = new DuplexEventPipe(eventName);
            this.notificationMap.set(eventName, notification);
        }
        return notification.notify(eventArgs);
    };
    /**
     * @param {?} eventName
     * @param {?} handler
     * @param {?=} caller
     * @return {?}
     */
    EventBus.prototype.listen = /**
     * @param {?} eventName
     * @param {?} handler
     * @param {?=} caller
     * @return {?}
     */
    function (eventName, handler, caller) {
        /** @type {?} */
        var notification = this.notificationMap.get(eventName);
        if (!notification) {
            notification = new DuplexEventPipe(eventName);
            this.notificationMap.set(eventName, notification);
        }
        return notification.listen(handler, caller);
    };
    /**
     * @private
     * @param {?} eventName
     * @param {?} target
     * @param {?} tokenValue
     * @return {?}
     */
    EventBus.prototype.getEventPipe = /**
     * @private
     * @param {?} eventName
     * @param {?} target
     * @param {?} tokenValue
     * @return {?}
     */
    function (eventName, target, tokenValue) {
        /** @type {?} */
        var eventPipeList = this.eventMap.get(eventName);
        if (!eventPipeList) {
            eventPipeList = new Array();
            this.eventMap.set(eventName, eventPipeList);
        }
        /** @type {?} */
        var eventPipe = eventPipeList.find(function (item) { return item.examByTargetToken(target, tokenValue); });
        if (!eventPipe) {
            eventPipe = new EventPipe(eventName, tokenValue, target, eventPipeList);
        }
        return eventPipe;
    };
    /**
     * @private
     * @param {?} eventName
     * @param {?} target
     * @param {?} tokenValue
     * @return {?}
     */
    EventBus.prototype.findExistEventPipe = /**
     * @private
     * @param {?} eventName
     * @param {?} target
     * @param {?} tokenValue
     * @return {?}
     */
    function (eventName, target, tokenValue) {
        var e_2, _a;
        /** @type {?} */
        var eventPipeList = this.eventMap.get(eventName);
        if (!eventPipeList) {
            return null;
        }
        try {
            // return eventPipeList.find(item => item.examByTargetToken(target, tokenValue));
            for (var eventPipeList_2 = tslib_1.__values(eventPipeList), eventPipeList_2_1 = eventPipeList_2.next(); !eventPipeList_2_1.done; eventPipeList_2_1 = eventPipeList_2.next()) {
                var eventPipe = eventPipeList_2_1.value;
                if (eventPipe.matchEmitterToken(target, tokenValue)) {
                    return eventPipe;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (eventPipeList_2_1 && !eventPipeList_2_1.done && (_a = eventPipeList_2.return)) _a.call(eventPipeList_2);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return null;
    };
    EventBus.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    EventBus.ctorParameters = function () { return []; };
    return EventBus;
}());
export { EventBus };
if (false) {
    /**
     * @type {?}
     * @private
     */
    EventBus.prototype.proxyMap;
    /**
     * @type {?}
     * @private
     */
    EventBus.prototype.eventMap;
    /**
     * @type {?}
     * @private
     */
    EventBus.prototype.notificationMap;
}
var RequestSubject = /** @class */ (function () {
    function RequestSubject() {
    }
    return RequestSubject;
}());
var DataClass = /** @class */ (function () {
    function DataClass() {
    }
    return DataClass;
}());
//# sourceMappingURL=data:application/json;base64,