/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Subject } from 'rxjs/Subject';
var EventPipe = /** @class */ (function () {
    function EventPipe(name, tokenValue, emitter, parentEventPipeList) {
        this.name = name;
        this.tokenValue = tokenValue;
        this.emitter = emitter;
        this.parentEventPipeList = parentEventPipeList;
        this.eventSubject = new Subject();
        this.subscriptionMap = new Map();
        this.onceSubscriptionMap = new Map();
        if (this.parentEventPipeList) {
            this.parentEventPipeList.push(this);
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    EventPipe.prototype.post = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.eventSubject.next(data);
    };
    /**
     * @param {?} eventHandler
     * @param {?} caller
     * @return {?}
     */
    EventPipe.prototype.subscribe = /**
     * @param {?} eventHandler
     * @param {?} caller
     * @return {?}
     */
    function (eventHandler, caller) {
        /** @type {?} */
        var subscription = this.eventSubject.subscribe(function (value) { return eventHandler.call(caller, value); });
        this.subscriptionMap.set(caller, subscription);
        return this;
    };
    /**
     * @param {?} eventHandler
     * @param {?} caller
     * @return {?}
     */
    EventPipe.prototype.subscribeOnce = /**
     * @param {?} eventHandler
     * @param {?} caller
     * @return {?}
     */
    function (eventHandler, caller) {
        /** @type {?} */
        var subscription = this.eventSubject.subscribe(function (value) { return eventHandler.call(caller, value); });
        this.onceSubscriptionMap.set(caller, subscription);
        return this;
    };
    /**
     * @param {?} subscriber
     * @return {?}
     */
    EventPipe.prototype.unSubscribe = /**
     * @param {?} subscriber
     * @return {?}
     */
    function (subscriber) {
        /** @type {?} */
        var subscription = this.subscriptionMap.get(subscriber);
        if (subscription) {
            subscription.unsubscribe();
            subscription = null;
            this.subscriptionMap.delete(subscriber);
        }
        else {
            subscription = this.onceSubscriptionMap.get(subscriber);
            if (subscription) {
                subscription.unsubscribe();
                subscription = null;
                this.onceSubscriptionMap.delete(subscriber);
            }
        }
    };
    // 注销使用once方法注册的订阅。
    // 注销使用once方法注册的订阅。
    /**
     * @return {?}
     */
    EventPipe.prototype.unSubscribeForOnce = 
    // 注销使用once方法注册的订阅。
    /**
     * @return {?}
     */
    function () {
        var e_1, _a;
        try {
            for (var _b = tslib_1.__values(Array.from(this.onceSubscriptionMap.keys())), _c = _b.next(); !_c.done; _c = _b.next()) {
                var subscriber = _c.value;
                this.unSubscribe(subscriber);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * @param {?} emitter
     * @param {?} tokenValue
     * @return {?}
     */
    EventPipe.prototype.matchEmitterToken = /**
     * @param {?} emitter
     * @param {?} tokenValue
     * @return {?}
     */
    function (emitter, tokenValue) {
        if (this.emitter && emitter && this.emitter !== emitter) {
            return false;
        }
        if (this.tokenValue && tokenValue && this.tokenValue !== tokenValue) {
            return false;
        }
        return true;
    };
    /**
     * @param {?} target
     * @param {?} tokenValue
     * @return {?}
     */
    EventPipe.prototype.examByTargetToken = /**
     * @param {?} target
     * @param {?} tokenValue
     * @return {?}
     */
    function (target, tokenValue) {
        if (this.emitter !== target) {
            return false;
        }
        if (this.tokenValue !== tokenValue) {
            return false;
        }
        return true;
    };
    /**
     * @param {?} subscriber
     * @return {?}
     */
    EventPipe.prototype.dispose = /**
     * @param {?} subscriber
     * @return {?}
     */
    function (subscriber) {
        var _this = this;
        this.unSubscribe(subscriber);
        if (this.subscriptionMap.size === 0 && this.parentEventPipeList) {
            /** @type {?} */
            var location_1 = this.parentEventPipeList.findIndex(function (item) { return item === _this; });
            if (location_1 !== -1) {
                this.parentEventPipeList.splice(location_1, 1);
            }
        }
    };
    return EventPipe;
}());
export { EventPipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    EventPipe.prototype.eventSubject;
    /**
     * @type {?}
     * @private
     */
    EventPipe.prototype.subscriptionMap;
    /**
     * @type {?}
     * @private
     */
    EventPipe.prototype.onceSubscriptionMap;
    /**
     * @type {?}
     * @private
     */
    EventPipe.prototype.name;
    /**
     * @type {?}
     * @private
     */
    EventPipe.prototype.tokenValue;
    /**
     * @type {?}
     * @private
     */
    EventPipe.prototype.emitter;
    /**
     * @type {?}
     * @private
     */
    EventPipe.prototype.parentEventPipeList;
}
//# sourceMappingURL=data:application/json;base64,