/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { PaneAxis } from './pane-axis';
import { Emitter } from './event-kit';
// const Grim = require('grim')
// const {CompositeDisposable, Emitter} = require('event-kit')
// const PaneAxis = require('./pane-axis')
// const TextEditor = require('./text-editor')
// const PaneElement = require('./pane-element')
/** @type {?} */
var nextInstanceId = 1;
var SaveCancelledError = /** @class */ (function (_super) {
    tslib_1.__extends(SaveCancelledError, _super);
    function SaveCancelledError() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return SaveCancelledError;
}(Error));
// Extended: A container for presenting content in the center of the workspace.
// Panes can contain multiple items, one of which is *active* at a given time.
// The view corresponding to the active item is displayed in the interface. In
// the default configuration, tabs are also displayed for each item.
//
// Each pane may also contain one *pending* item. When a pending item is added
// to a pane, it will replace the currently pending item, if any, instead of
// simply being added. In the default configuration, the text in the tab for
// pending items is shown in italics.
var 
// Extended: A container for presenting content in the center of the workspace.
// Panes can contain multiple items, one of which is *active* at a given time.
// The view corresponding to the active item is displayed in the interface. In
// the default configuration, tabs are also displayed for each item.
//
// Each pane may also contain one *pending* item. When a pending item is added
// to a pane, it will replace the currently pending item, if any, instead of
// simply being added. In the default configuration, the text in the tab for
// pending items is shown in italics.
Pane = /** @class */ (function () {
    function Pane(params) {
        this.alive = true;
        this.subscriptionsPerItem = new WeakMap();
        this.items = [];
        this.itemStack = [];
        this.container = null;
        this.setPendingItem = this.setPendingItem.bind(this);
        this.getPendingItem = this.getPendingItem.bind(this);
        this.clearPendingItem = this.clearPendingItem.bind(this);
        this.onItemDidTerminatePendingState = this.onItemDidTerminatePendingState.bind(this);
        this.saveItem = this.saveItem.bind(this);
        this.saveItemAs = this.saveItemAs.bind(this);
        this.id = params.id;
        if (this.id != null) {
            nextInstanceId = Math.max(nextInstanceId, this.id + 1);
        }
        else {
            this.id = nextInstanceId++;
        }
        this.activeItem = params.activeItem;
        this.focused = params.focused != null ? params.focused : false;
        this.applicationDelegate = params.applicationDelegate;
        this.notificationManager = params.notificationManager;
        this.config = params.config;
        this.deserializerManager = params.deserializerManager;
        this.viewRegistry = params.viewRegistry;
        this.emitter = new Emitter();
        this.alive = true;
        this.subscriptionsPerItem = new WeakMap();
        this.items = [];
        this.itemStack = [];
        this.container = null;
        this.addItems((params.items || []).filter(function (item) { return item; }));
        if (!this.getActiveItem()) {
            this.setActiveItem(this.items[0]);
        }
        this.addItemsToStack(params.itemStackIndices || []);
        this.setFlexScale(params.flexScale || 1);
    }
    /**
     * @param {?} state
     * @param {?} __1
     * @return {?}
     */
    Pane.deserialize = /**
     * @param {?} state
     * @param {?} __1
     * @return {?}
     */
    function (state, _a) {
        var deserializers = _a.deserializers, applicationDelegate = _a.applicationDelegate, config = _a.config, notifications = _a.notifications, views = _a.views;
        var e_1, _b;
        var activeItemIndex = state.activeItemIndex;
        /** @type {?} */
        var activeItemURI = state.activeItemURI || state.activeItemUri;
        /** @type {?} */
        var items = [];
        try {
            for (var _c = tslib_1.__values(state.items), _d = _c.next(); !_d.done; _d = _c.next()) {
                var itemState = _d.value;
                /** @type {?} */
                var item = deserializers.deserialize(itemState);
                if (item) {
                    items.push(item);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
        state.items = items;
        state.activeItem = items[activeItemIndex];
        if (!state.activeItem && activeItemURI) {
            state.activeItem = state.items.find(function (item) {
                return typeof item.getURI === 'function' && item.getURI() === activeItemURI;
            });
        }
        return new Pane(Object.assign(state, {
            deserializerManager: deserializers,
            notificationManager: notifications,
            viewRegistry: views,
            config: config,
            applicationDelegate: applicationDelegate
        }));
    };
    /**
     * @return {?}
     */
    Pane.prototype.inspect = /**
     * @return {?}
     */
    function () {
        return "Pane " + this.id;
    };
    /**
     * @return {?}
     */
    Pane.prototype.getElement = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    Pane.prototype.serialize = /**
     * @return {?}
     */
    function () {
        var e_2, _a;
        /** @type {?} */
        var itemsToBeSerialized = this.items.filter(function (item) { return item && typeof item.serialize === 'function'; });
        /** @type {?} */
        var itemStackIndices = [];
        try {
            for (var _b = tslib_1.__values(this.itemStack), _c = _b.next(); !_c.done; _c = _b.next()) {
                var item = _c.value;
                if (typeof item.serialize === 'function') {
                    itemStackIndices.push(itemsToBeSerialized.indexOf(item));
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        /** @type {?} */
        var activeItemIndex = itemsToBeSerialized.indexOf(this.activeItem);
        return {
            deserializer: 'Pane',
            id: this.id,
            items: itemsToBeSerialized.map(function (item) { return item.serialize(); }),
            itemStackIndices: itemStackIndices,
            activeItemIndex: activeItemIndex,
            focused: this.focused,
            flexScale: this.flexScale
        };
    };
    /**
     * @return {?}
     */
    Pane.prototype.getParent = /**
     * @return {?}
     */
    function () { return this.parent; };
    /**
     * @param {?} parent
     * @return {?}
     */
    Pane.prototype.setParent = /**
     * @param {?} parent
     * @return {?}
     */
    function (parent) {
        this.parent = parent;
    };
    /**
     * @return {?}
     */
    Pane.prototype.getContainer = /**
     * @return {?}
     */
    function () { return this.container; };
    /**
     * @param {?} container
     * @return {?}
     */
    Pane.prototype.setContainer = /**
     * @param {?} container
     * @return {?}
     */
    function (container) {
        if (container && container !== this.container) {
            this.container = container;
            container.didAddPane({ pane: this });
        }
    };
    // Private: Determine whether the given item is allowed to exist in this pane.
    //
    // * `item` the Item
    //
    // Returns a {Boolean}.
    // Private: Determine whether the given item is allowed to exist in this pane.
    //
    // * `item` the Item
    //
    // Returns a {Boolean}.
    /**
     * @param {?} item
     * @return {?}
     */
    Pane.prototype.isItemAllowed = 
    // Private: Determine whether the given item is allowed to exist in this pane.
    //
    // * `item` the Item
    //
    // Returns a {Boolean}.
    /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (typeof item.getAllowedLocations !== 'function') {
            return true;
        }
        else {
            return item.getAllowedLocations().includes(this.getContainer().getLocation());
        }
    };
    /**
     * @param {?} flexScale
     * @return {?}
     */
    Pane.prototype.setFlexScale = /**
     * @param {?} flexScale
     * @return {?}
     */
    function (flexScale) {
        this.flexScale = flexScale;
        return this.flexScale;
    };
    /**
     * @return {?}
     */
    Pane.prototype.getFlexScale = /**
     * @return {?}
     */
    function () { return this.flexScale; };
    /**
     * @return {?}
     */
    Pane.prototype.increaseSize = /**
     * @return {?}
     */
    function () { this.setFlexScale(this.getFlexScale() * 1.1); };
    /**
     * @return {?}
     */
    Pane.prototype.decreaseSize = /**
     * @return {?}
     */
    function () { this.setFlexScale(this.getFlexScale() / 1.1); };
    /*
    Section: Event Subscription
    */
    // Public: Invoke the given callback when the pane resizes
    //
    // The callback will be invoked when pane's flexScale property changes.
    // Use {::getFlexScale} to get the current value.
    //
    // * `callback` {Function} to be called when the pane is resized
    //   * `flexScale` {Number} representing the panes `flex-grow`; ability for a
    //     flex item to grow if necessary.
    //
    // Returns a {Disposable} on which '.dispose()' can be called to unsubscribe.
    /*
      Section: Event Subscription
      */
    // Public: Invoke the given callback when the pane resizes
    //
    // The callback will be invoked when pane's flexScale property changes.
    // Use {::getFlexScale} to get the current value.
    //
    // * `callback` {Function} to be called when the pane is resized
    //   * `flexScale` {Number} representing the panes `flex-grow`; ability for a
    //     flex item to grow if necessary.
    //
    // Returns a {Disposable} on which '.dispose()' can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    Pane.prototype.onDidChangeFlexScale = /*
      Section: Event Subscription
      */
    // Public: Invoke the given callback when the pane resizes
    //
    // The callback will be invoked when pane's flexScale property changes.
    // Use {::getFlexScale} to get the current value.
    //
    // * `callback` {Function} to be called when the pane is resized
    //   * `flexScale` {Number} representing the panes `flex-grow`; ability for a
    //     flex item to grow if necessary.
    //
    // Returns a {Disposable} on which '.dispose()' can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
    };
    // Public: Invoke the given callback with the current and future values of
    // {::getFlexScale}.
    //
    // * `callback` {Function} to be called with the current and future values of
    //   the {::getFlexScale} property.
    //   * `flexScale` {Number} representing the panes `flex-grow`; ability for a
    //     flex item to grow if necessary.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Invoke the given callback with the current and future values of
    // {::getFlexScale}.
    //
    // * `callback` {Function} to be called with the current and future values of
    //   the {::getFlexScale} property.
    //   * `flexScale` {Number} representing the panes `flex-grow`; ability for a
    //     flex item to grow if necessary.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    Pane.prototype.observeFlexScale = 
    // Public: Invoke the given callback with the current and future values of
    // {::getFlexScale}.
    //
    // * `callback` {Function} to be called with the current and future values of
    //   the {::getFlexScale} property.
    //   * `flexScale` {Number} representing the panes `flex-grow`; ability for a
    //     flex item to grow if necessary.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        callback(this.flexScale);
        return this.onDidChangeFlexScale(callback);
    };
    // Public: Invoke the given callback when the pane is activated.
    //
    // The given callback will be invoked whenever {::activate} is called on the
    // pane, even if it is already active at the time.
    //
    // * `callback` {Function} to be called when the pane is activated.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Invoke the given callback when the pane is activated.
    //
    // The given callback will be invoked whenever {::activate} is called on the
    // pane, even if it is already active at the time.
    //
    // * `callback` {Function} to be called when the pane is activated.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    Pane.prototype.onDidActivate = 
    // Public: Invoke the given callback when the pane is activated.
    //
    // The given callback will be invoked whenever {::activate} is called on the
    // pane, even if it is already active at the time.
    //
    // * `callback` {Function} to be called when the pane is activated.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
    };
    // Public: Invoke the given callback before the pane is destroyed.
    //
    // * `callback` {Function} to be called before the pane is destroyed.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Invoke the given callback before the pane is destroyed.
    //
    // * `callback` {Function} to be called before the pane is destroyed.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    Pane.prototype.onWillDestroy = 
    // Public: Invoke the given callback before the pane is destroyed.
    //
    // * `callback` {Function} to be called before the pane is destroyed.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
    };
    // Public: Invoke the given callback when the pane is destroyed.
    //
    // * `callback` {Function} to be called when the pane is destroyed.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Invoke the given callback when the pane is destroyed.
    //
    // * `callback` {Function} to be called when the pane is destroyed.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    Pane.prototype.onDidDestroy = 
    // Public: Invoke the given callback when the pane is destroyed.
    //
    // * `callback` {Function} to be called when the pane is destroyed.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
    };
    // Public: Invoke the given callback when the value of the {::isActive}
    // property changes.
    //
    // * `callback` {Function} to be called when the value of the {::isActive}
    //   property changes.
    //   * `active` {Boolean} indicating whether the pane is active.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Invoke the given callback when the value of the {::isActive}
    // property changes.
    //
    // * `callback` {Function} to be called when the value of the {::isActive}
    //   property changes.
    //   * `active` {Boolean} indicating whether the pane is active.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    Pane.prototype.onDidChangeActive = 
    // Public: Invoke the given callback when the value of the {::isActive}
    // property changes.
    //
    // * `callback` {Function} to be called when the value of the {::isActive}
    //   property changes.
    //   * `active` {Boolean} indicating whether the pane is active.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        var _this = this;
        return this.container.onDidChangeActivePane(function (activePane) {
            /** @type {?} */
            var isActive = _this === activePane;
            callback(isActive);
        });
    };
    // Public: Invoke the given callback with the current and future values of the
    // {::isActive} property.
    //
    // * `callback` {Function} to be called with the current and future values of
    //   the {::isActive} property.
    //   * `active` {Boolean} indicating whether the pane is active.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Invoke the given callback with the current and future values of the
    // {::isActive} property.
    //
    // * `callback` {Function} to be called with the current and future values of
    //   the {::isActive} property.
    //   * `active` {Boolean} indicating whether the pane is active.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    Pane.prototype.observeActive = 
    // Public: Invoke the given callback with the current and future values of the
    // {::isActive} property.
    //
    // * `callback` {Function} to be called with the current and future values of
    //   the {::isActive} property.
    //   * `active` {Boolean} indicating whether the pane is active.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        callback(this.isActive());
        return this.onDidChangeActive(callback);
    };
    // Public: Invoke the given callback when an item is added to the pane.
    //
    // * `callback` {Function} to be called with when items are added.
    //   * `event` {Object} with the following keys:
    //     * `item` The added pane item.
    //     * `index` {Number} indicating where the item is located.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Invoke the given callback when an item is added to the pane.
    //
    // * `callback` {Function} to be called with when items are added.
    //   * `event` {Object} with the following keys:
    //     * `item` The added pane item.
    //     * `index` {Number} indicating where the item is located.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    Pane.prototype.onDidAddItem = 
    // Public: Invoke the given callback when an item is added to the pane.
    //
    // * `callback` {Function} to be called with when items are added.
    //   * `event` {Object} with the following keys:
    //     * `item` The added pane item.
    //     * `index` {Number} indicating where the item is located.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.emitter.on('did-add-item', callback);
    };
    // Public: Invoke the given callback when an item is removed from the pane.
    //
    // * `callback` {Function} to be called with when items are removed.
    //   * `event` {Object} with the following keys:
    //     * `item` The removed pane item.
    //     * `index` {Number} indicating where the item was located.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Invoke the given callback when an item is removed from the pane.
    //
    // * `callback` {Function} to be called with when items are removed.
    //   * `event` {Object} with the following keys:
    //     * `item` The removed pane item.
    //     * `index` {Number} indicating where the item was located.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    Pane.prototype.onDidRemoveItem = 
    // Public: Invoke the given callback when an item is removed from the pane.
    //
    // * `callback` {Function} to be called with when items are removed.
    //   * `event` {Object} with the following keys:
    //     * `item` The removed pane item.
    //     * `index` {Number} indicating where the item was located.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.emitter.on('did-remove-item', callback);
    };
    // Public: Invoke the given callback before an item is removed from the pane.
    //
    // * `callback` {Function} to be called with when items are removed.
    //   * `event` {Object} with the following keys:
    //     * `item` The pane item to be removed.
    //     * `index` {Number} indicating where the item is located.
    // Public: Invoke the given callback before an item is removed from the pane.
    //
    // * `callback` {Function} to be called with when items are removed.
    //   * `event` {Object} with the following keys:
    //     * `item` The pane item to be removed.
    //     * `index` {Number} indicating where the item is located.
    /**
     * @param {?} callback
     * @return {?}
     */
    Pane.prototype.onWillRemoveItem = 
    // Public: Invoke the given callback before an item is removed from the pane.
    //
    // * `callback` {Function} to be called with when items are removed.
    //   * `event` {Object} with the following keys:
    //     * `item` The pane item to be removed.
    //     * `index` {Number} indicating where the item is located.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
    };
    // Public: Invoke the given callback when an item is moved within the pane.
    //
    // * `callback` {Function} to be called with when items are moved.
    //   * `event` {Object} with the following keys:
    //     * `item` The removed pane item.
    //     * `oldIndex` {Number} indicating where the item was located.
    //     * `newIndex` {Number} indicating where the item is now located.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Invoke the given callback when an item is moved within the pane.
    //
    // * `callback` {Function} to be called with when items are moved.
    //   * `event` {Object} with the following keys:
    //     * `item` The removed pane item.
    //     * `oldIndex` {Number} indicating where the item was located.
    //     * `newIndex` {Number} indicating where the item is now located.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    Pane.prototype.onDidMoveItem = 
    // Public: Invoke the given callback when an item is moved within the pane.
    //
    // * `callback` {Function} to be called with when items are moved.
    //   * `event` {Object} with the following keys:
    //     * `item` The removed pane item.
    //     * `oldIndex` {Number} indicating where the item was located.
    //     * `newIndex` {Number} indicating where the item is now located.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
    };
    // Public: Invoke the given callback with all current and future items.
    //
    // * `callback` {Function} to be called with current and future items.
    //   * `item` An item that is present in {::getItems} at the time of
    //     subscription or that is added at some later time.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Invoke the given callback with all current and future items.
    //
    // * `callback` {Function} to be called with current and future items.
    //   * `item` An item that is present in {::getItems} at the time of
    //     subscription or that is added at some later time.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    Pane.prototype.observeItems = 
    // Public: Invoke the given callback with all current and future items.
    //
    // * `callback` {Function} to be called with current and future items.
    //   * `item` An item that is present in {::getItems} at the time of
    //     subscription or that is added at some later time.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        var e_3, _a;
        try {
            for (var _b = tslib_1.__values(this.getItems()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var item = _c.value;
                callback(item);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return this.onDidAddItem(function (_a) {
            var item = _a.item;
            return callback(item);
        });
    };
    // 公有方法： 当{::getActiveItem}值变换前调用。
    // 公有方法： 当{::getActiveItem}值变换前调用。
    /**
     * @param {?} callback
     * @return {?}
     */
    Pane.prototype.onDoingChangeActiveItem = 
    // 公有方法： 当{::getActiveItem}值变换前调用。
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.emitter.on('doing-change-active-item', callback);
    };
    // Public: Invoke the given callback when the value of {::getActiveItem}
    // changes.
    //
    // * `callback` {Function} to be called with when the active item changes.
    //   * `activeItem` The current active item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Invoke the given callback when the value of {::getActiveItem}
    // changes.
    //
    // * `callback` {Function} to be called with when the active item changes.
    //   * `activeItem` The current active item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    Pane.prototype.onDidChangeActiveItem = 
    // Public: Invoke the given callback when the value of {::getActiveItem}
    // changes.
    //
    // * `callback` {Function} to be called with when the active item changes.
    //   * `activeItem` The current active item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.emitter.on('did-change-active-item', callback);
    };
    // Public: Invoke the given callback when {::activateNextRecentlyUsedItem}
    // has been called, either initiating or continuing a forward MRU traversal of
    // pane items.
    //
    // * `callback` {Function} to be called with when the active item changes.
    //   * `nextRecentlyUsedItem` The next MRU item, now being set active
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Invoke the given callback when {::activateNextRecentlyUsedItem}
    // has been called, either initiating or continuing a forward MRU traversal of
    // pane items.
    //
    // * `callback` {Function} to be called with when the active item changes.
    //   * `nextRecentlyUsedItem` The next MRU item, now being set active
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    Pane.prototype.onChooseNextMRUItem = 
    // Public: Invoke the given callback when {::activateNextRecentlyUsedItem}
    // has been called, either initiating or continuing a forward MRU traversal of
    // pane items.
    //
    // * `callback` {Function} to be called with when the active item changes.
    //   * `nextRecentlyUsedItem` The next MRU item, now being set active
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
    };
    // Public: Invoke the given callback when {::activatePreviousRecentlyUsedItem}
    // has been called, either initiating or continuing a reverse MRU traversal of
    // pane items.
    //
    // * `callback` {Function} to be called with when the active item changes.
    //   * `previousRecentlyUsedItem` The previous MRU item, now being set active
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Invoke the given callback when {::activatePreviousRecentlyUsedItem}
    // has been called, either initiating or continuing a reverse MRU traversal of
    // pane items.
    //
    // * `callback` {Function} to be called with when the active item changes.
    //   * `previousRecentlyUsedItem` The previous MRU item, now being set active
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    Pane.prototype.onChooseLastMRUItem = 
    // Public: Invoke the given callback when {::activatePreviousRecentlyUsedItem}
    // has been called, either initiating or continuing a reverse MRU traversal of
    // pane items.
    //
    // * `callback` {Function} to be called with when the active item changes.
    //   * `previousRecentlyUsedItem` The previous MRU item, now being set active
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
    };
    // Public: Invoke the given callback when {::moveActiveItemToTopOfStack}
    // has been called, terminating an MRU traversal of pane items and moving the
    // current active item to the top of the stack. Typically bound to a modifier
    // (e.g. CTRL) key up event.
    //
    // * `callback` {Function} to be called with when the MRU traversal is done.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Invoke the given callback when {::moveActiveItemToTopOfStack}
    // has been called, terminating an MRU traversal of pane items and moving the
    // current active item to the top of the stack. Typically bound to a modifier
    // (e.g. CTRL) key up event.
    //
    // * `callback` {Function} to be called with when the MRU traversal is done.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    Pane.prototype.onDoneChoosingMRUItem = 
    // Public: Invoke the given callback when {::moveActiveItemToTopOfStack}
    // has been called, terminating an MRU traversal of pane items and moving the
    // current active item to the top of the stack. Typically bound to a modifier
    // (e.g. CTRL) key up event.
    //
    // * `callback` {Function} to be called with when the MRU traversal is done.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
    };
    // Public: Invoke the given callback with the current and future values of
    // {::getActiveItem}.
    //
    // * `callback` {Function} to be called with the current and future active
    //   items.
    //   * `activeItem` The current active item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Invoke the given callback with the current and future values of
    // {::getActiveItem}.
    //
    // * `callback` {Function} to be called with the current and future active
    //   items.
    //   * `activeItem` The current active item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    Pane.prototype.observeActiveItem = 
    // Public: Invoke the given callback with the current and future values of
    // {::getActiveItem}.
    //
    // * `callback` {Function} to be called with the current and future active
    //   items.
    //   * `activeItem` The current active item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        callback(this.getActiveItem());
        return this.onDidChangeActiveItem(callback);
    };
    // Public: Invoke the given callback before items are destroyed.
    //
    // * `callback` {Function} to be called before items are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `item` The item that will be destroyed.
    //     * `index` The location of the item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to
    // unsubscribe.
    // Public: Invoke the given callback before items are destroyed.
    //
    // * `callback` {Function} to be called before items are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `item` The item that will be destroyed.
    //     * `index` The location of the item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to
    // unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    Pane.prototype.onWillDestroyItem = 
    // Public: Invoke the given callback before items are destroyed.
    //
    // * `callback` {Function} to be called before items are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `item` The item that will be destroyed.
    //     * `index` The location of the item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to
    // unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
    };
    // Called by the view layer to indicate that the pane has gained focus.
    // Called by the view layer to indicate that the pane has gained focus.
    /**
     * @return {?}
     */
    Pane.prototype.focus = 
    // Called by the view layer to indicate that the pane has gained focus.
    /**
     * @return {?}
     */
    function () {
        this.focused = true;
        return this.activate();
    };
    // Called by the view layer to indicate that the pane has lost focus.
    // Called by the view layer to indicate that the pane has lost focus.
    /**
     * @return {?}
     */
    Pane.prototype.blur = 
    // Called by the view layer to indicate that the pane has lost focus.
    /**
     * @return {?}
     */
    function () {
        this.focused = false;
        return true; // if this is called from an event handler, don't cancel it
    };
    /**
     * @return {?}
     */
    Pane.prototype.isFocused = /**
     * @return {?}
     */
    function () { return this.focused; };
    /**
     * @return {?}
     */
    Pane.prototype.getPanes = /**
     * @return {?}
     */
    function () { return [this]; };
    /**
     * @param {?} item
     * @return {?}
     */
    Pane.prototype.unsubscribeFromItem = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        /** @type {?} */
        var subscription = this.subscriptionsPerItem.get(item);
        if (subscription) {
            subscription.dispose();
            this.subscriptionsPerItem.delete(item);
        }
    };
    /*
    Section: Items
    */
    // Public: Get the items in this pane.
    //
    // Returns an {Array} of items.
    /*
      Section: Items
      */
    // Public: Get the items in this pane.
    //
    // Returns an {Array} of items.
    /**
     * @return {?}
     */
    Pane.prototype.getItems = /*
      Section: Items
      */
    // Public: Get the items in this pane.
    //
    // Returns an {Array} of items.
    /**
     * @return {?}
     */
    function () {
        return this.items.slice();
    };
    // Public: Get the active pane item in this pane.
    //
    // Returns a pane item.
    // Public: Get the active pane item in this pane.
    //
    // Returns a pane item.
    /**
     * @return {?}
     */
    Pane.prototype.getActiveItem = 
    // Public: Get the active pane item in this pane.
    //
    // Returns a pane item.
    /**
     * @return {?}
     */
    function () { return this.activeItem; };
    /**
     * @param {?=} activeItem
     * @param {?=} options
     * @return {?}
     */
    Pane.prototype.setActiveItem = /**
     * @param {?=} activeItem
     * @param {?=} options
     * @return {?}
     */
    function (activeItem, options) {
        /** @type {?} */
        var modifyStack = options && options.modifyStack;
        if (activeItem !== this.activeItem) {
            if (modifyStack !== false) {
                this.addItemToStack(activeItem);
            }
            this.emitter.emit('doing-change-active-item', this.activeItem);
            this.activeItem = activeItem;
            this.emitter.emit('did-change-active-item', this.activeItem);
            if (this.container) {
                this.container.didChangeActiveItemOnPane(this, this.activeItem);
            }
        }
        return this.activeItem;
    };
    // Build the itemStack after deserializing
    // Build the itemStack after deserializing
    /**
     * @param {?} itemStackIndices
     * @return {?}
     */
    Pane.prototype.addItemsToStack = 
    // Build the itemStack after deserializing
    /**
     * @param {?} itemStackIndices
     * @return {?}
     */
    function (itemStackIndices) {
        var e_4, _a;
        if (this.items.length > 0) {
            if (itemStackIndices.length !== this.items.length || itemStackIndices.includes(-1)) {
                itemStackIndices = this.items.map(function (item, i) { return i; });
            }
            try {
                for (var itemStackIndices_1 = tslib_1.__values(itemStackIndices), itemStackIndices_1_1 = itemStackIndices_1.next(); !itemStackIndices_1_1.done; itemStackIndices_1_1 = itemStackIndices_1.next()) {
                    var itemIndex = itemStackIndices_1_1.value;
                    this.addItemToStack(this.items[itemIndex]);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (itemStackIndices_1_1 && !itemStackIndices_1_1.done && (_a = itemStackIndices_1.return)) _a.call(itemStackIndices_1);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
    };
    // Add item (or move item) to the end of the itemStack
    // Add item (or move item) to the end of the itemStack
    /**
     * @param {?} newItem
     * @return {?}
     */
    Pane.prototype.addItemToStack = 
    // Add item (or move item) to the end of the itemStack
    /**
     * @param {?} newItem
     * @return {?}
     */
    function (newItem) {
        if (newItem == null) {
            return;
        }
        /** @type {?} */
        var index = this.itemStack.indexOf(newItem);
        if (index !== -1) {
            this.itemStack.splice(index, 1);
        }
        return this.itemStack.push(newItem);
    };
    // Public: Return the item at the given index.
    //
    // * `index` {Number}
    //
    // Returns an item or `null` if no item exists at the given index.
    // Public: Return the item at the given index.
    //
    // * `index` {Number}
    //
    // Returns an item or `null` if no item exists at the given index.
    /**
     * @param {?} index
     * @return {?}
     */
    Pane.prototype.itemAtIndex = 
    // Public: Return the item at the given index.
    //
    // * `index` {Number}
    //
    // Returns an item or `null` if no item exists at the given index.
    /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return this.items[index];
    };
    // Makes the next item in the itemStack active.
    // Makes the next item in the itemStack active.
    /**
     * @return {?}
     */
    Pane.prototype.activateNextRecentlyUsedItem = 
    // Makes the next item in the itemStack active.
    /**
     * @return {?}
     */
    function () {
        if (this.items.length > 1) {
            if (this.itemStackIndex == null) {
                this.itemStackIndex = this.itemStack.length - 1;
            }
            if (this.itemStackIndex === 0) {
                this.itemStackIndex = this.itemStack.length;
            }
            this.itemStackIndex--;
            /** @type {?} */
            var nextRecentlyUsedItem = this.itemStack[this.itemStackIndex];
            this.setActiveItem(nextRecentlyUsedItem, { modifyStack: false });
        }
    };
    // Makes the previous item in the itemStack active.
    // Makes the previous item in the itemStack active.
    /**
     * @return {?}
     */
    Pane.prototype.activatePreviousRecentlyUsedItem = 
    // Makes the previous item in the itemStack active.
    /**
     * @return {?}
     */
    function () {
        if (this.items.length > 1) {
            if (this.itemStackIndex + 1 === this.itemStack.length || this.itemStackIndex == null) {
                this.itemStackIndex = -1;
            }
            this.itemStackIndex++;
            /** @type {?} */
            var previousRecentlyUsedItem = this.itemStack[this.itemStackIndex];
            this.setActiveItem(previousRecentlyUsedItem, { modifyStack: false });
        }
    };
    // Moves the active item to the end of the itemStack once the ctrl key is lifted
    // Moves the active item to the end of the itemStack once the ctrl key is lifted
    /**
     * @return {?}
     */
    Pane.prototype.moveActiveItemToTopOfStack = 
    // Moves the active item to the end of the itemStack once the ctrl key is lifted
    /**
     * @return {?}
     */
    function () {
        delete this.itemStackIndex;
        this.addItemToStack(this.activeItem);
    };
    // Public: Makes the next item active.
    // Public: Makes the next item active.
    /**
     * @return {?}
     */
    Pane.prototype.activateNextItem = 
    // Public: Makes the next item active.
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var index = this.getActiveItemIndex();
        if (index < (this.items.length - 1)) {
            this.activateItemAtIndex(index + 1);
        }
        else {
            this.activateItemAtIndex(0);
        }
    };
    // Public: Makes the previous item active.
    // Public: Makes the previous item active.
    /**
     * @return {?}
     */
    Pane.prototype.activatePreviousItem = 
    // Public: Makes the previous item active.
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var index = this.getActiveItemIndex();
        if (index > 0) {
            this.activateItemAtIndex(index - 1);
        }
        else {
            this.activateItemAtIndex(this.items.length - 1);
        }
    };
    /**
     * @return {?}
     */
    Pane.prototype.activateLastItem = /**
     * @return {?}
     */
    function () {
        this.activateItemAtIndex(this.items.length - 1);
    };
    // Public: Move the active tab to the right.
    // Public: Move the active tab to the right.
    /**
     * @return {?}
     */
    Pane.prototype.moveItemRight = 
    // Public: Move the active tab to the right.
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var index = this.getActiveItemIndex();
        /** @type {?} */
        var rightItemIndex = index + 1;
        if (rightItemIndex <= this.items.length - 1) {
            this.moveItem(this.getActiveItem(), rightItemIndex);
        }
    };
    // Public: Move the active tab to the left
    // Public: Move the active tab to the left
    /**
     * @return {?}
     */
    Pane.prototype.moveItemLeft = 
    // Public: Move the active tab to the left
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var index = this.getActiveItemIndex();
        /** @type {?} */
        var leftItemIndex = index - 1;
        if (leftItemIndex >= 0) {
            return this.moveItem(this.getActiveItem(), leftItemIndex);
        }
    };
    // Public: Get the index of the active item.
    //
    // Returns a {Number}.
    // Public: Get the index of the active item.
    //
    // Returns a {Number}.
    /**
     * @return {?}
     */
    Pane.prototype.getActiveItemIndex = 
    // Public: Get the index of the active item.
    //
    // Returns a {Number}.
    /**
     * @return {?}
     */
    function () {
        return this.items.indexOf(this.activeItem);
    };
    // Public: Activate the item at the given index.
    //
    // * `index` {Number}
    // Public: Activate the item at the given index.
    //
    // * `index` {Number}
    /**
     * @param {?} index
     * @return {?}
     */
    Pane.prototype.activateItemAtIndex = 
    // Public: Activate the item at the given index.
    //
    // * `index` {Number}
    /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        /** @type {?} */
        var item = this.itemAtIndex(index) || this.getActiveItem();
        return this.setActiveItem(item);
    };
    // Public: Make the given item *active*, causing it to be displayed by
    // the pane's view.
    //
    // * `item` The item to activate
    // * `options` (optional) {Object}
    //   * `pending` (optional) {Boolean} indicating that the item should be added
    //     in a pending state if it does not yet exist in the pane. Existing pending
    //     items in a pane are replaced with new pending items when they are opened.
    // Public: Make the given item *active*, causing it to be displayed by
    // the pane's view.
    //
    // * `item` The item to activate
    // * `options` (optional) {Object}
    //   * `pending` (optional) {Boolean} indicating that the item should be added
    //     in a pending state if it does not yet exist in the pane. Existing pending
    //     items in a pane are replaced with new pending items when they are opened.
    /**
     * @param {?} item
     * @param {?=} options
     * @return {?}
     */
    Pane.prototype.activateItem = 
    // Public: Make the given item *active*, causing it to be displayed by
    // the pane's view.
    //
    // * `item` The item to activate
    // * `options` (optional) {Object}
    //   * `pending` (optional) {Boolean} indicating that the item should be added
    //     in a pending state if it does not yet exist in the pane. Existing pending
    //     items in a pane are replaced with new pending items when they are opened.
    /**
     * @param {?} item
     * @param {?=} options
     * @return {?}
     */
    function (item, options) {
        if (options === void 0) { options = {}; }
        if (item) {
            /** @type {?} */
            var index = (this.getPendingItem() === this.activeItem)
                ? this.getActiveItemIndex()
                : this.getActiveItemIndex() + 1;
            this.addItem(item, Object.assign({}, options, { index: index }));
            this.setActiveItem(item);
        }
    };
    // Public: Add the given item to the pane.
    //
    // * `item` The item to add. It can be a model with an associated view or a
    //   view.
    // * `options` (optional) {Object}
    //   * `index` (optional) {Number} indicating the index at which to add the item.
    //     If omitted, the item is added after the current active item.
    //   * `pending` (optional) {Boolean} indicating that the item should be
    //     added in a pending state. Existing pending items in a pane are replaced with
    //     new pending items when they are opened.
    //
    // Returns the added item.
    // Public: Add the given item to the pane.
    //
    // * `item` The item to add. It can be a model with an associated view or a
    //   view.
    // * `options` (optional) {Object}
    //   * `index` (optional) {Number} indicating the index at which to add the item.
    //     If omitted, the item is added after the current active item.
    //   * `pending` (optional) {Boolean} indicating that the item should be
    //     added in a pending state. Existing pending items in a pane are replaced with
    //     new pending items when they are opened.
    //
    // Returns the added item.
    /**
     * @param {?} item
     * @param {?=} options
     * @return {?}
     */
    Pane.prototype.addItem = 
    // Public: Add the given item to the pane.
    //
    // * `item` The item to add. It can be a model with an associated view or a
    //   view.
    // * `options` (optional) {Object}
    //   * `index` (optional) {Number} indicating the index at which to add the item.
    //     If omitted, the item is added after the current active item.
    //   * `pending` (optional) {Boolean} indicating that the item should be
    //     added in a pending state. Existing pending items in a pane are replaced with
    //     new pending items when they are opened.
    //
    // Returns the added item.
    /**
     * @param {?} item
     * @param {?=} options
     * @return {?}
     */
    function (item, options) {
        if (options === void 0) { options = {}; }
        // Backward compat with old API:
        //   addItem(item, index=@getActiveItemIndex() + 1)
        if (typeof options === 'number') {
            options = { index: options };
        }
        /** @type {?} */
        var index = options.index != null ? options.index : this.getActiveItemIndex() + 1;
        /** @type {?} */
        var moved = options.moved != null ? options.moved : false;
        /** @type {?} */
        var pending = options.pending != null ? options.pending : false;
        if (!item || typeof item !== 'object') {
            throw new Error("Pane items must be objects. Attempted to add item " + item + ".");
        }
        if (typeof item.isDestroyed === 'function' && item.isDestroyed()) {
            throw new Error("Adding a pane item with URI\n      '" + (typeof item.getURI === 'function' && item.getURI()) + "' that has already been destroyed");
        }
        if (this.items.find(function (it) { return it === item; })) {
            return;
        }
        if (typeof item.onDidDestroy === 'function') {
        }
        this.items.splice(index, 0, item);
        /** @type {?} */
        var lastPendingItem = this.getPendingItem();
        /** @type {?} */
        var replacingPendingItem = lastPendingItem != null && !moved;
        if (replacingPendingItem) {
            this.pendingItem = null;
        }
        if (pending) {
            this.setPendingItem(item);
        }
        this.emitter.emit('did-add-item', { item: item, index: index, moved: moved });
        if (!moved) {
            if (this.container) {
                this.container.didAddPaneItem(item, this, index);
            }
        }
        if (replacingPendingItem) {
            this.destroyItem(lastPendingItem);
        }
        if (!this.getActiveItem()) {
            this.setActiveItem(item);
        }
        return item;
    };
    /**
     * @param {?} item
     * @return {?}
     */
    Pane.prototype.setPendingItem = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (this.pendingItem !== item) {
            /** @type {?} */
            var mostRecentPendingItem = this.pendingItem;
            this.pendingItem = item;
        }
    };
    /**
     * @return {?}
     */
    Pane.prototype.getPendingItem = /**
     * @return {?}
     */
    function () {
        return this.pendingItem || null;
    };
    /**
     * @return {?}
     */
    Pane.prototype.clearPendingItem = /**
     * @return {?}
     */
    function () {
        this.setPendingItem(null);
    };
    /**
     * @param {?} callback
     * @return {?}
     */
    Pane.prototype.onItemDidTerminatePendingState = /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
    };
    // Public: Add the given items to the pane.
    //
    // * `items` An {Array} of items to add. Items can be views or models with
    //   associated views. Any objects that are already present in the pane's
    //   current items will not be added again.
    // * `index` (optional) {Number} index at which to add the items. If omitted,
    //   the item is #   added after the current active item.
    //
    // Returns an {Array} of added items.
    // Public: Add the given items to the pane.
    //
    // * `items` An {Array} of items to add. Items can be views or models with
    //   associated views. Any objects that are already present in the pane's
    //   current items will not be added again.
    // * `index` (optional) {Number} index at which to add the items. If omitted,
    //   the item is #   added after the current active item.
    //
    // Returns an {Array} of added items.
    /**
     * @param {?} items
     * @param {?=} index
     * @return {?}
     */
    Pane.prototype.addItems = 
    // Public: Add the given items to the pane.
    //
    // * `items` An {Array} of items to add. Items can be views or models with
    //   associated views. Any objects that are already present in the pane's
    //   current items will not be added again.
    // * `index` (optional) {Number} index at which to add the items. If omitted,
    //   the item is #   added after the current active item.
    //
    // Returns an {Array} of added items.
    /**
     * @param {?} items
     * @param {?=} index
     * @return {?}
     */
    function (items, index) {
        var _this = this;
        if (index === void 0) { index = this.getActiveItemIndex() + 1; }
        items = items.filter(function (item) { return !_this.items.find(function (it) { return it === item; }); });
        for (var i = 0; i < items.length; i++) {
            /** @type {?} */
            var item = items[i];
            this.addItem(item, { index: index + i });
        }
        return items;
    };
    /**
     * @param {?} item
     * @param {?=} moved
     * @return {?}
     */
    Pane.prototype.removeItem = /**
     * @param {?} item
     * @param {?=} moved
     * @return {?}
     */
    function (item, moved) {
        if (moved === void 0) { moved = false; }
        /** @type {?} */
        var index = this.items.indexOf(item);
        if (index === -1) {
            return;
        }
        if (this.getPendingItem() === item) {
            this.pendingItem = null;
        }
        this.removeItemFromStack(item);
        // this.emitter.emit('will-remove-item', {item, index, destroyed: !moved, moved});
        this.unsubscribeFromItem(item);
        if (item === this.activeItem) {
            if (this.items.length === 1) {
                this.setActiveItem(undefined);
            }
            else if (index === 0) {
                this.activateNextItem();
            }
            else {
                this.activatePreviousItem();
            }
        }
        this.items.splice(index, 1);
        this.emitter.emit('did-remove-item', { item: item, index: index, destroyed: !moved, moved: moved });
        if (!moved && this.container) {
            this.container.didDestroyPaneItem({ item: item, index: index, pane: this });
        }
        if (this.items.length === 0 && this.config && this.config.get && this.config.get('core.destroyEmptyPanes')) {
            this.destroy();
        }
    };
    // Remove the given item from the itemStack.
    //
    // * `item` The item to remove.
    // * `index` {Number} indicating the index to which to remove the item from the itemStack.
    // Remove the given item from the itemStack.
    //
    // * `item` The item to remove.
    // * `index` {Number} indicating the index to which to remove the item from the itemStack.
    /**
     * @param {?} item
     * @return {?}
     */
    Pane.prototype.removeItemFromStack = 
    // Remove the given item from the itemStack.
    //
    // * `item` The item to remove.
    // * `index` {Number} indicating the index to which to remove the item from the itemStack.
    /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        /** @type {?} */
        var index = this.itemStack.indexOf(item);
        if (index !== -1) {
            this.itemStack.splice(index, 1);
        }
    };
    // Public: Move the given item to the given index.
    //
    // * `item` The item to move.
    // * `index` {Number} indicating the index to which to move the item.
    // Public: Move the given item to the given index.
    //
    // * `item` The item to move.
    // * `index` {Number} indicating the index to which to move the item.
    /**
     * @param {?} item
     * @param {?} newIndex
     * @return {?}
     */
    Pane.prototype.moveItem = 
    // Public: Move the given item to the given index.
    //
    // * `item` The item to move.
    // * `index` {Number} indicating the index to which to move the item.
    /**
     * @param {?} item
     * @param {?} newIndex
     * @return {?}
     */
    function (item, newIndex) {
        /** @type {?} */
        var oldIndex = this.items.indexOf(item);
        this.items.splice(oldIndex, 1);
        this.items.splice(newIndex, 0, item);
    };
    // Public: Move the given item to the given index on another pane.
    //
    // * `item` The item to move.
    // * `pane` {Pane} to which to move the item.
    // * `index` {Number} indicating the index to which to move the item in the
    //   given pane.
    // Public: Move the given item to the given index on another pane.
    //
    // * `item` The item to move.
    // * `pane` {Pane} to which to move the item.
    // * `index` {Number} indicating the index to which to move the item in the
    //   given pane.
    /**
     * @param {?=} item
     * @param {?=} pane
     * @param {?=} index
     * @return {?}
     */
    Pane.prototype.moveItemToPane = 
    // Public: Move the given item to the given index on another pane.
    //
    // * `item` The item to move.
    // * `pane` {Pane} to which to move the item.
    // * `index` {Number} indicating the index to which to move the item in the
    //   given pane.
    /**
     * @param {?=} item
     * @param {?=} pane
     * @param {?=} index
     * @return {?}
     */
    function (item, pane, index) {
        this.removeItem(item, true);
        return pane.addItem(item, { index: index, moved: true });
    };
    // Public: Destroy the active item and activate the next item.
    //
    // Returns a {Promise} that resolves when the item is destroyed.
    // Public: Destroy the active item and activate the next item.
    //
    // Returns a {Promise} that resolves when the item is destroyed.
    /**
     * @return {?}
     */
    Pane.prototype.destroyActiveItem = 
    // Public: Destroy the active item and activate the next item.
    //
    // Returns a {Promise} that resolves when the item is destroyed.
    /**
     * @return {?}
     */
    function () {
        return this.destroyItem(this.activeItem);
    };
    // Public: Destroy the given item.
    //
    // If the item is active, the next item will be activated. If the item is the
    // last item, the pane will be destroyed if the `core.destroyEmptyPanes` config
    // setting is `true`.
    //
    // * `item` Item to destroy
    // * `force` (optional) {Boolean} Destroy the item without prompting to save
    //    it, even if the item's `isPermanentDockItem` method returns true.
    //
    // Returns a {Promise} that resolves with a {Boolean} indicating whether or not
    // the item was destroyed.
    // Public: Destroy the given item.
    //
    // If the item is active, the next item will be activated. If the item is the
    // last item, the pane will be destroyed if the `core.destroyEmptyPanes` config
    // setting is `true`.
    //
    // * `item` Item to destroy
    // * `force` (optional) {Boolean} Destroy the item without prompting to save
    //    it, even if the item's `isPermanentDockItem` method returns true.
    //
    // Returns a {Promise} that resolves with a {Boolean} indicating whether or not
    // the item was destroyed.
    /**
     * @param {?=} item
     * @param {?=} force
     * @return {?}
     */
    Pane.prototype.destroyItem = 
    // Public: Destroy the given item.
    //
    // If the item is active, the next item will be activated. If the item is the
    // last item, the pane will be destroyed if the `core.destroyEmptyPanes` config
    // setting is `true`.
    //
    // * `item` Item to destroy
    // * `force` (optional) {Boolean} Destroy the item without prompting to save
    //    it, even if the item's `isPermanentDockItem` method returns true.
    //
    // Returns a {Promise} that resolves with a {Boolean} indicating whether or not
    // the item was destroyed.
    /**
     * @param {?=} item
     * @param {?=} force
     * @return {?}
     */
    function (item, force) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var index;
            return tslib_1.__generator(this, function (_a) {
                index = this.items.indexOf(item);
                if (index === -1) {
                    return [2 /*return*/, false];
                }
                if (!force &&
                    typeof item.isPermanentDockItem === 'function' && item.isPermanentDockItem() &&
                    (!this.container || this.container.getLocation() !== 'center')) {
                    return [2 /*return*/, false];
                }
                // In the case where there are no `onWillDestroyPaneItem` listeners, preserve the old behavior
                // where `Pane.destroyItem` and callers such as `Pane.close` take effect synchronously.
                this.removeItem(item, false);
                if (typeof item.destroy === 'function') {
                    item.destroy();
                }
                return [2 /*return*/, true];
            });
        });
    };
    // Public: Destroy all items.
    // Public: Destroy all items.
    /**
     * @return {?}
     */
    Pane.prototype.destroyItems = 
    // Public: Destroy all items.
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        return Promise.all(this.getItems().map(function (item) { return _this.destroyItem(item); }));
    };
    // Public: Destroy all items except for the active item.
    // Public: Destroy all items except for the active item.
    /**
     * @return {?}
     */
    Pane.prototype.destroyInactiveItems = 
    // Public: Destroy all items except for the active item.
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        return Promise.all(this.getItems()
            .filter(function (item) { return item !== _this.activeItem; })
            .map(function (item) { return _this.destroyItem(item); }));
    };
    /**
     * @param {?} item
     * @param {?=} options
     * @return {?}
     */
    Pane.prototype.promptToSaveItem = /**
     * @param {?} item
     * @param {?=} options
     * @return {?}
     */
    function (item, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        if (typeof item.shouldPromptToSave !== 'function' || !item.shouldPromptToSave(options)) {
            return Promise.resolve(true);
        }
        /** @type {?} */
        var uri;
        if (typeof item.getURI === 'function') {
            uri = item.getURI();
        }
        else if (typeof item.getUri === 'function') {
            uri = item.getUri();
        }
        else {
            return Promise.resolve(true);
        }
        /** @type {?} */
        var title = (typeof item.getTitle === 'function' && item.getTitle()) || uri;
        /** @type {?} */
        var saveDialog = function (saveButtonText, saveFn, message) {
            /** @type {?} */
            var chosen = _this.applicationDelegate.confirm({
                message: message,
                detailedMessage: 'Your changes will be lost if you close this item without saving.',
                buttons: [saveButtonText, 'Cancel', '&Don\'t Save']
            });
            switch (chosen) {
                case 0:
                    return new Promise(function (resolve) {
                        return saveFn(item, function (error) {
                            if (error instanceof SaveCancelledError) {
                                resolve(false);
                            }
                            else if (error) {
                                saveDialog('Save as', _this.saveItemAs, "'" + title + "' could not be saved.\nError: " + _this.getMessageForErrorCode(error.code)).then(resolve);
                            }
                            else {
                                resolve(true);
                            }
                        });
                    });
                case 1:
                    return Promise.resolve(false);
                case 2:
                    return Promise.resolve(true);
            }
        };
        return saveDialog('Save', this.saveItem, "'" + title + "' has changes, do you want to save them?");
    };
    // Public: Save the active item.
    // Public: Save the active item.
    /**
     * @param {?=} nextAction
     * @return {?}
     */
    Pane.prototype.saveActiveItem = 
    // Public: Save the active item.
    /**
     * @param {?=} nextAction
     * @return {?}
     */
    function (nextAction) {
        return this.saveItem(this.getActiveItem(), nextAction);
    };
    // Public: Prompt the user for a location and save the active item with the
    // path they select.
    //
    // * `nextAction` (optional) {Function} which will be called after the item is
    //   successfully saved.
    //
    // Returns a {Promise} that resolves when the save is complete
    // Public: Prompt the user for a location and save the active item with the
    // path they select.
    //
    // * `nextAction` (optional) {Function} which will be called after the item is
    //   successfully saved.
    //
    // Returns a {Promise} that resolves when the save is complete
    /**
     * @param {?=} nextAction
     * @return {?}
     */
    Pane.prototype.saveActiveItemAs = 
    // Public: Prompt the user for a location and save the active item with the
    // path they select.
    //
    // * `nextAction` (optional) {Function} which will be called after the item is
    //   successfully saved.
    //
    // Returns a {Promise} that resolves when the save is complete
    /**
     * @param {?=} nextAction
     * @return {?}
     */
    function (nextAction) {
        return this.saveItemAs(this.getActiveItem(), nextAction);
    };
    // Public: Save the given item.
    //
    // * `item` The item to save.
    // * `nextAction` (optional) {Function} which will be called with no argument
    //   after the item is successfully saved, or with the error if it failed.
    //   The return value will be that of `nextAction` or `undefined` if it was not
    //   provided
    //
    // Returns a {Promise} that resolves when the save is complete
    // Public: Save the given item.
    //
    // * `item` The item to save.
    // * `nextAction` (optional) {Function} which will be called with no argument
    //   after the item is successfully saved, or with the error if it failed.
    //   The return value will be that of `nextAction` or `undefined` if it was not
    //   provided
    //
    // Returns a {Promise} that resolves when the save is complete
    /**
     * @param {?} item
     * @param {?} nextAction
     * @return {?}
     */
    Pane.prototype.saveItem = 
    // Public: Save the given item.
    //
    // * `item` The item to save.
    // * `nextAction` (optional) {Function} which will be called with no argument
    //   after the item is successfully saved, or with the error if it failed.
    //   The return value will be that of `nextAction` or `undefined` if it was not
    //   provided
    //
    // Returns a {Promise} that resolves when the save is complete
    /**
     * @param {?} item
     * @param {?} nextAction
     * @return {?}
     */
    function (item, nextAction) {
        var _this = this;
        if (!item) {
            return Promise.resolve();
        }
        /** @type {?} */
        var itemURI;
        if (typeof item.getURI === 'function') {
            itemURI = item.getURI();
        }
        else if (typeof item.getUri === 'function') {
            itemURI = item.getUri();
        }
        if (itemURI != null) {
            if (typeof item.save === 'function') {
                return promisify(function () { return item.save(); })
                    .then(function () {
                    if (nextAction) {
                        nextAction();
                    }
                })
                    .catch(function (error) {
                    if (nextAction) {
                        nextAction(error);
                    }
                    else {
                        _this.handleSaveError(error, item);
                    }
                });
            }
            else if (nextAction) {
                nextAction();
                return Promise.resolve();
            }
        }
        else {
            return this.saveItemAs(item, nextAction);
        }
    };
    // Public: Prompt the user for a location and save the active item with the
    // path they select.
    //
    // * `item` The item to save.
    // * `nextAction` (optional) {Function} which will be called with no argument
    //   after the item is successfully saved, or with the error if it failed.
    //   The return value will be that of `nextAction` or `undefined` if it was not
    //   provided
    // Public: Prompt the user for a location and save the active item with the
    // path they select.
    //
    // * `item` The item to save.
    // * `nextAction` (optional) {Function} which will be called with no argument
    //   after the item is successfully saved, or with the error if it failed.
    //   The return value will be that of `nextAction` or `undefined` if it was not
    //   provided
    /**
     * @param {?} item
     * @param {?} nextAction
     * @return {?}
     */
    Pane.prototype.saveItemAs = 
    // Public: Prompt the user for a location and save the active item with the
    // path they select.
    //
    // * `item` The item to save.
    // * `nextAction` (optional) {Function} which will be called with no argument
    //   after the item is successfully saved, or with the error if it failed.
    //   The return value will be that of `nextAction` or `undefined` if it was not
    //   provided
    /**
     * @param {?} item
     * @param {?} nextAction
     * @return {?}
     */
    function (item, nextAction) {
    };
    // Public: Save all items.
    // Public: Save all items.
    /**
     * @return {?}
     */
    Pane.prototype.saveItems = 
    // Public: Save all items.
    /**
     * @return {?}
     */
    function () {
    };
    // Public: Return the first item that matches the given URI or undefined if
    // none exists.
    //
    // * `uri` {String} containing a URI.
    // Public: Return the first item that matches the given URI or undefined if
    // none exists.
    //
    // * `uri` {String} containing a URI.
    /**
     * @param {?} uri
     * @return {?}
     */
    Pane.prototype.itemForURI = 
    // Public: Return the first item that matches the given URI or undefined if
    // none exists.
    //
    // * `uri` {String} containing a URI.
    /**
     * @param {?} uri
     * @return {?}
     */
    function (uri) {
        return this.items.find(function (item) {
            if (typeof item.getURI === 'function') {
                return item.getURI() === uri;
            }
            else if (typeof item.getUri === 'function') {
                return item.getUri() === uri;
            }
        });
    };
    // Public: Activate the first item that matches the given URI.
    //
    // * `uri` {String} containing a URI.
    //
    // Returns a {Boolean} indicating whether an item matching the URI was found.
    // Public: Activate the first item that matches the given URI.
    //
    // * `uri` {String} containing a URI.
    //
    // Returns a {Boolean} indicating whether an item matching the URI was found.
    /**
     * @param {?} uri
     * @return {?}
     */
    Pane.prototype.activateItemForURI = 
    // Public: Activate the first item that matches the given URI.
    //
    // * `uri` {String} containing a URI.
    //
    // Returns a {Boolean} indicating whether an item matching the URI was found.
    /**
     * @param {?} uri
     * @return {?}
     */
    function (uri) {
        /** @type {?} */
        var item = this.itemForURI(uri);
        if (item) {
            this.activateItem(item);
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * @return {?}
     */
    Pane.prototype.copyActiveItem = /**
     * @return {?}
     */
    function () {
        if (this.activeItem && typeof this.activeItem.copy === 'function') {
            return this.activeItem.copy();
        }
    };
    /*
    Section: Lifecycle
    */
    // Public: Determine whether the pane is active.
    //
    // Returns a {Boolean}.
    /*
      Section: Lifecycle
      */
    // Public: Determine whether the pane is active.
    //
    // Returns a {Boolean}.
    /**
     * @return {?}
     */
    Pane.prototype.isActive = /*
      Section: Lifecycle
      */
    // Public: Determine whether the pane is active.
    //
    // Returns a {Boolean}.
    /**
     * @return {?}
     */
    function () {
        return this.container && this.container.getActivePane() === this;
    };
    // Public: Makes this pane the *active* pane, causing it to gain focus.
    // Public: Makes this pane the *active* pane, causing it to gain focus.
    /**
     * @return {?}
     */
    Pane.prototype.activate = 
    // Public: Makes this pane the *active* pane, causing it to gain focus.
    /**
     * @return {?}
     */
    function () {
    };
    // Public: Close the pane and destroy all its items.
    //
    // If this is the last pane, all the items will be destroyed but the pane
    // itself will not be destroyed.
    // Public: Close the pane and destroy all its items.
    //
    // If this is the last pane, all the items will be destroyed but the pane
    // itself will not be destroyed.
    /**
     * @return {?}
     */
    Pane.prototype.destroy = 
    // Public: Close the pane and destroy all its items.
    //
    // If this is the last pane, all the items will be destroyed but the pane
    // itself will not be destroyed.
    /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    Pane.prototype.isAlive = /**
     * @return {?}
     */
    function () { return this.alive; };
    // Public: Determine whether this pane has been destroyed.
    //
    // Returns a {Boolean}.
    // Public: Determine whether this pane has been destroyed.
    //
    // Returns a {Boolean}.
    /**
     * @return {?}
     */
    Pane.prototype.isDestroyed = 
    // Public: Determine whether this pane has been destroyed.
    //
    // Returns a {Boolean}.
    /**
     * @return {?}
     */
    function () { return !this.isAlive(); };
    /*
    Section: Splitting
    */
    // Public: Create a new pane to the left of this pane.
    //
    // * `params` (optional) {Object} with the following keys:
    //   * `items` (optional) {Array} of items to add to the new pane.
    //   * `copyActiveItem` (optional) {Boolean} true will copy the active item into the new split pane
    //
    // Returns the new {Pane}.
    /*
      Section: Splitting
      */
    // Public: Create a new pane to the left of this pane.
    //
    // * `params` (optional) {Object} with the following keys:
    //   * `items` (optional) {Array} of items to add to the new pane.
    //   * `copyActiveItem` (optional) {Boolean} true will copy the active item into the new split pane
    //
    // Returns the new {Pane}.
    /**
     * @param {?} params
     * @return {?}
     */
    Pane.prototype.splitLeft = /*
      Section: Splitting
      */
    // Public: Create a new pane to the left of this pane.
    //
    // * `params` (optional) {Object} with the following keys:
    //   * `items` (optional) {Array} of items to add to the new pane.
    //   * `copyActiveItem` (optional) {Boolean} true will copy the active item into the new split pane
    //
    // Returns the new {Pane}.
    /**
     * @param {?} params
     * @return {?}
     */
    function (params) {
        return this.split('horizontal', 'before', params);
    };
    // Public: Create a new pane to the right of this pane.
    //
    // * `params` (optional) {Object} with the following keys:
    //   * `items` (optional) {Array} of items to add to the new pane.
    //   * `copyActiveItem` (optional) {Boolean} true will copy the active item into the new split pane
    //
    // Returns the new {Pane}.
    // Public: Create a new pane to the right of this pane.
    //
    // * `params` (optional) {Object} with the following keys:
    //   * `items` (optional) {Array} of items to add to the new pane.
    //   * `copyActiveItem` (optional) {Boolean} true will copy the active item into the new split pane
    //
    // Returns the new {Pane}.
    /**
     * @param {?} params
     * @return {?}
     */
    Pane.prototype.splitRight = 
    // Public: Create a new pane to the right of this pane.
    //
    // * `params` (optional) {Object} with the following keys:
    //   * `items` (optional) {Array} of items to add to the new pane.
    //   * `copyActiveItem` (optional) {Boolean} true will copy the active item into the new split pane
    //
    // Returns the new {Pane}.
    /**
     * @param {?} params
     * @return {?}
     */
    function (params) {
        return this.split('horizontal', 'after', params);
    };
    // Public: Creates a new pane above the receiver.
    //
    // * `params` (optional) {Object} with the following keys:
    //   * `items` (optional) {Array} of items to add to the new pane.
    //   * `copyActiveItem` (optional) {Boolean} true will copy the active item into the new split pane
    //
    // Returns the new {Pane}.
    // Public: Creates a new pane above the receiver.
    //
    // * `params` (optional) {Object} with the following keys:
    //   * `items` (optional) {Array} of items to add to the new pane.
    //   * `copyActiveItem` (optional) {Boolean} true will copy the active item into the new split pane
    //
    // Returns the new {Pane}.
    /**
     * @param {?} params
     * @return {?}
     */
    Pane.prototype.splitUp = 
    // Public: Creates a new pane above the receiver.
    //
    // * `params` (optional) {Object} with the following keys:
    //   * `items` (optional) {Array} of items to add to the new pane.
    //   * `copyActiveItem` (optional) {Boolean} true will copy the active item into the new split pane
    //
    // Returns the new {Pane}.
    /**
     * @param {?} params
     * @return {?}
     */
    function (params) {
        return this.split('vertical', 'before', params);
    };
    // Public: Creates a new pane below the receiver.
    //
    // * `params` (optional) {Object} with the following keys:
    //   * `items` (optional) {Array} of items to add to the new pane.
    //   * `copyActiveItem` (optional) {Boolean} true will copy the active item into the new split pane
    //
    // Returns the new {Pane}.
    // Public: Creates a new pane below the receiver.
    //
    // * `params` (optional) {Object} with the following keys:
    //   * `items` (optional) {Array} of items to add to the new pane.
    //   * `copyActiveItem` (optional) {Boolean} true will copy the active item into the new split pane
    //
    // Returns the new {Pane}.
    /**
     * @param {?} params
     * @return {?}
     */
    Pane.prototype.splitDown = 
    // Public: Creates a new pane below the receiver.
    //
    // * `params` (optional) {Object} with the following keys:
    //   * `items` (optional) {Array} of items to add to the new pane.
    //   * `copyActiveItem` (optional) {Boolean} true will copy the active item into the new split pane
    //
    // Returns the new {Pane}.
    /**
     * @param {?} params
     * @return {?}
     */
    function (params) {
        return this.split('vertical', 'after', params);
    };
    /**
     * @param {?} orientation
     * @param {?} side
     * @param {?} params
     * @return {?}
     */
    Pane.prototype.split = /**
     * @param {?} orientation
     * @param {?} side
     * @param {?} params
     * @return {?}
     */
    function (orientation, side, params) {
        if (params && params.copyActiveItem) {
            if (!params.items) {
                params.items = [];
            }
            params.items.push(this.copyActiveItem());
        }
        if (this.parent.orientation !== orientation) {
            this.parent.replaceChild(this, new PaneAxis({
                container: this.container,
                orientation: orientation,
                children: [this],
                flexScale: this.flexScale
            }, this.viewRegistry));
            this.setFlexScale(1);
        }
        /** @type {?} */
        var newPane = new Pane(Object.assign({
            applicationDelegate: this.applicationDelegate,
            notificationManager: this.notificationManager,
            deserializerManager: this.deserializerManager,
            config: this.config,
            viewRegistry: this.viewRegistry
        }, params));
        switch (side) {
            case 'before':
                this.parent.insertChildBefore(this, newPane);
                break;
            case 'after':
                this.parent.insertChildAfter(this, newPane);
                break;
        }
        if (params && params.moveActiveItem && this.activeItem) {
            this.moveItemToPane(this.activeItem, newPane);
        }
        newPane.activate();
        return newPane;
    };
    // If the parent is a horizontal axis, returns its first child if it is a pane;
    // otherwise returns this pane.
    // If the parent is a horizontal axis, returns its first child if it is a pane;
    // otherwise returns this pane.
    /**
     * @return {?}
     */
    Pane.prototype.findLeftmostSibling = 
    // If the parent is a horizontal axis, returns its first child if it is a pane;
    // otherwise returns this pane.
    /**
     * @return {?}
     */
    function () {
        if (this.parent.orientation === 'horizontal') {
            var _a = tslib_1.__read(this.parent.children, 1), leftmostSibling = _a[0];
            if (leftmostSibling instanceof PaneAxis) {
                return this;
            }
            else {
                return leftmostSibling;
            }
        }
        else {
            return this;
        }
    };
    /**
     * @return {?}
     */
    Pane.prototype.findRightmostSibling = /**
     * @return {?}
     */
    function () {
        if (this.parent.orientation === 'horizontal') {
            /** @type {?} */
            var rightmostSibling = this.parent.children[this.parent.children.length - 1];
            if (rightmostSibling instanceof PaneAxis) {
                return this;
            }
            else {
                return rightmostSibling;
            }
        }
        else {
            return this;
        }
    };
    // If the parent is a horizontal axis, returns its last child if it is a pane;
    // otherwise returns a new pane created by splitting this pane rightward.
    // If the parent is a horizontal axis, returns its last child if it is a pane;
    // otherwise returns a new pane created by splitting this pane rightward.
    /**
     * @return {?}
     */
    Pane.prototype.findOrCreateRightmostSibling = 
    // If the parent is a horizontal axis, returns its last child if it is a pane;
    // otherwise returns a new pane created by splitting this pane rightward.
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var rightmostSibling = this.findRightmostSibling();
        if (rightmostSibling === this) {
            return this.splitRight({});
        }
        else {
            return rightmostSibling;
        }
    };
    // If the parent is a vertical axis, returns its first child if it is a pane;
    // otherwise returns this pane.
    // If the parent is a vertical axis, returns its first child if it is a pane;
    // otherwise returns this pane.
    /**
     * @return {?}
     */
    Pane.prototype.findTopmostSibling = 
    // If the parent is a vertical axis, returns its first child if it is a pane;
    // otherwise returns this pane.
    /**
     * @return {?}
     */
    function () {
        if (this.parent.orientation === 'vertical') {
            var _a = tslib_1.__read(this.parent.children, 1), topmostSibling = _a[0];
            if (topmostSibling instanceof PaneAxis) {
                return this;
            }
            else {
                return topmostSibling;
            }
        }
        else {
            return this;
        }
    };
    /**
     * @return {?}
     */
    Pane.prototype.findBottommostSibling = /**
     * @return {?}
     */
    function () {
        if (this.parent.orientation === 'vertical') {
            /** @type {?} */
            var bottommostSibling = this.parent.children[this.parent.children.length - 1];
            if (bottommostSibling instanceof PaneAxis) {
                return this;
            }
            else {
                return bottommostSibling;
            }
        }
        else {
            return this;
        }
    };
    // If the parent is a vertical axis, returns its last child if it is a pane;
    // otherwise returns a new pane created by splitting this pane bottomward.
    // If the parent is a vertical axis, returns its last child if it is a pane;
    // otherwise returns a new pane created by splitting this pane bottomward.
    /**
     * @return {?}
     */
    Pane.prototype.findOrCreateBottommostSibling = 
    // If the parent is a vertical axis, returns its last child if it is a pane;
    // otherwise returns a new pane created by splitting this pane bottomward.
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var bottommostSibling = this.findBottommostSibling();
        if (bottommostSibling === this) {
            return this.splitDown({});
        }
        else {
            return bottommostSibling;
        }
    };
    // Private: Close the pane unless the user cancels the action via a dialog.
    //
    // Returns a {Promise} that resolves once the pane is either closed, or the
    // closing has been cancelled.
    // Private: Close the pane unless the user cancels the action via a dialog.
    //
    // Returns a {Promise} that resolves once the pane is either closed, or the
    // closing has been cancelled.
    /**
     * @return {?}
     */
    Pane.prototype.close = 
    // Private: Close the pane unless the user cancels the action via a dialog.
    //
    // Returns a {Promise} that resolves once the pane is either closed, or the
    // closing has been cancelled.
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        return Promise.all(this.getItems().map(function (item) { return _this.promptToSaveItem(item); }))
            .then(function (results) {
            if (!results.find(function (item) { return item === false; })) {
                return _this.destroy();
            }
        });
    };
    /**
     * @param {?} error
     * @param {?} item
     * @return {?}
     */
    Pane.prototype.handleSaveError = /**
     * @param {?} error
     * @param {?} item
     * @return {?}
     */
    function (error, item) {
    };
    /**
     * @param {?} errorCode
     * @return {?}
     */
    Pane.prototype.getMessageForErrorCode = /**
     * @param {?} errorCode
     * @return {?}
     */
    function (errorCode) {
        switch (errorCode) {
            case 'EACCES': return 'Permission denied';
            case 'ECONNRESET': return 'Connection reset';
            case 'EINTR': return 'Interrupted system call';
            case 'EIO': return 'I/O error writing file';
            case 'ENOSPC': return 'No space left on device';
            case 'ENOTSUP': return 'Operation not supported on socket';
            case 'ENXIO': return 'No such device or address';
            case 'EROFS': return 'Read-only file system';
            case 'ESPIPE': return 'Invalid seek';
            case 'ETIMEDOUT': return 'Connection timed out';
        }
    };
    return Pane;
}());
// Extended: A container for presenting content in the center of the workspace.
// Panes can contain multiple items, one of which is *active* at a given time.
// The view corresponding to the active item is displayed in the interface. In
// the default configuration, tabs are also displayed for each item.
//
// Each pane may also contain one *pending* item. When a pending item is added
// to a pane, it will replace the currently pending item, if any, instead of
// simply being added. In the default configuration, the text in the tab for
// pending items is shown in italics.
export { Pane };
if (false) {
    /** @type {?} */
    Pane.prototype.id;
    /** @type {?} */
    Pane.prototype.activeItem;
    /** @type {?} */
    Pane.prototype.focused;
    /** @type {?} */
    Pane.prototype.applicationDelegate;
    /** @type {?} */
    Pane.prototype.notificationManager;
    /** @type {?} */
    Pane.prototype.config;
    /** @type {?} */
    Pane.prototype.deserializerManager;
    /** @type {?} */
    Pane.prototype.viewRegistry;
    /**
     * @type {?}
     * @private
     */
    Pane.prototype.emitter;
    /** @type {?} */
    Pane.prototype.alive;
    /** @type {?} */
    Pane.prototype.subscriptionsPerItem;
    /** @type {?} */
    Pane.prototype.items;
    /** @type {?} */
    Pane.prototype.itemStack;
    /** @type {?} */
    Pane.prototype.container;
    /** @type {?} */
    Pane.prototype.flexScale;
    /** @type {?} */
    Pane.prototype.parent;
    /** @type {?} */
    Pane.prototype.itemStackIndex;
    /** @type {?} */
    Pane.prototype.pendingItem;
}
/**
 * @param {?} callback
 * @return {?}
 */
function promisify(callback) {
    try {
        return Promise.resolve(callback());
    }
    catch (error) {
        return Promise.reject(error);
    }
}
//# sourceMappingURL=data:application/json;base64,