/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Disposable } from './disposable';
import { CompositeDisposable } from './composite-disposable';
// Essential: Utility class to be used when implementing event-based APIs that
// allows for handlers registered via `::on` to be invoked with calls to
// `::emit`. Instances of this class are intended to be used internally by
// classes that expose an event-based API.
//
// For example:
//
// ```coffee
// class User
//   constructor: ->
//     @emitter = new Emitter
//
//   onDidChangeName: (callback) ->
//     @emitter.on 'did-change-name', callback
//
//   setName: (name) ->
//     if name isnt @name
//       @name = name
//       @emitter.emit 'did-change-name', name
//     @name
// ```
var Emitter = /** @class */ (function () {
    //////
    /// Section: Construction and Destruction
    //////
    // Public: Construct an emitter.
    //
    // ```coffee
    // @emitter = new Emitter()
    // ```
    function Emitter() {
        this.disposed = false;
        this.clear();
    }
    /**
     * @param {?} exceptionHandler
     * @return {?}
     */
    Emitter.onEventHandlerException = /**
     * @param {?} exceptionHandler
     * @return {?}
     */
    function (exceptionHandler) {
        var _this = this;
        this.dispatch = this.simpleDispatch;
        if (this.exceptionHandlers.length === 0) {
            this.dispatch = this.exceptionHandlingDispatch;
        }
        this.exceptionHandlers.push(exceptionHandler);
        return new Disposable(function () {
            _this.exceptionHandlers.splice(_this.exceptionHandlers.indexOf(exceptionHandler), 1);
            if (_this.exceptionHandlers.length === 0) {
                return _this.dispatch = _this.simpleDispatch;
            }
        });
    };
    /**
     * @param {?} handler
     * @param {?} value
     * @return {?}
     */
    Emitter.simpleDispatch = /**
     * @param {?} handler
     * @param {?} value
     * @return {?}
     */
    function (handler, value) {
        return handler(value);
    };
    /**
     * @param {?} handler
     * @param {?} value
     * @return {?}
     */
    Emitter.exceptionHandlingDispatch = /**
     * @param {?} handler
     * @param {?} value
     * @return {?}
     */
    function (handler, value) {
        try {
            return handler(value);
        }
        catch (exception) {
            return this.exceptionHandlers.map(function (exceptionHandler) { return exceptionHandler(exception); });
        }
    };
    // Public: Clear out any existing subscribers.
    // Public: Clear out any existing subscribers.
    /**
     * @return {?}
     */
    Emitter.prototype.clear = 
    // Public: Clear out any existing subscribers.
    /**
     * @return {?}
     */
    function () {
        if (this.subscriptions) {
            this.subscriptions.dispose();
        }
        this.subscriptions = new CompositeDisposable();
        return this.handlersByEventName = {};
    };
    // Public: Unsubscribe all handlers.
    // Public: Unsubscribe all handlers.
    /**
     * @return {?}
     */
    Emitter.prototype.dispose = 
    // Public: Unsubscribe all handlers.
    /**
     * @return {?}
     */
    function () {
        this.subscriptions.dispose();
        this.handlersByEventName = null;
        this.disposed = true;
    };
    //////
    /// Section: Event Subscription
    //////
    // Public: Register the given handler function to be invoked whenever events by
    // the given name are emitted via {::emit}.
    //
    // * `eventName` {String} naming the event that you want to invoke the handler
    //   when emitted.
    // * `handler` {Function} to invoke when {::emit} is called with the given
    //   event name.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    //////
    /// Section: Event Subscription
    //////
    // Public: Register the given handler function to be invoked whenever events by
    // the given name are emitted via {::emit}.
    //
    // * `eventName` {String} naming the event that you want to invoke the handler
    //   when emitted.
    // * `handler` {Function} to invoke when {::emit} is called with the given
    //   event name.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} eventName
     * @param {?} handler
     * @param {?=} unshift
     * @return {?}
     */
    Emitter.prototype.on = 
    //////
    /// Section: Event Subscription
    //////
    // Public: Register the given handler function to be invoked whenever events by
    // the given name are emitted via {::emit}.
    //
    // * `eventName` {String} naming the event that you want to invoke the handler
    //   when emitted.
    // * `handler` {Function} to invoke when {::emit} is called with the given
    //   event name.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} eventName
     * @param {?} handler
     * @param {?=} unshift
     * @return {?}
     */
    function (eventName, handler, unshift) {
        var _this = this;
        if (unshift === void 0) { unshift = false; }
        if (this.disposed) {
            throw new Error('Emitter has been disposed');
        }
        if (typeof handler !== 'function') {
            throw new Error('Handler must be a function');
        }
        /** @type {?} */
        var currentHandlers = this.handlersByEventName[eventName];
        if (currentHandlers) {
            if (unshift) {
                this.handlersByEventName[eventName] = [handler].concat(currentHandlers);
            }
            else {
                this.handlersByEventName[eventName] = currentHandlers.concat(handler);
            }
        }
        else {
            this.handlersByEventName[eventName] = [handler];
        }
        // When the emitter is disposed, we want to dispose of all subscriptions.
        // However, we also need to stop tracking disposables when they're disposed
        // from outside, otherwise this class will hold references to all the
        // disposables it created (instead of just the active ones).
        /** @type {?} */
        var cleanup = new Disposable(function () {
            _this.subscriptions.remove(cleanup);
            return _this.off(eventName, handler);
        });
        this.subscriptions.add(cleanup);
        return cleanup;
    };
    // Public: Register the given handler function to be invoked the next time an
    // events with the given name is emitted via {::emit}.
    //
    // * `eventName` {String} naming the event that you want to invoke the handler
    //   when emitted.
    // * `handler` {Function} to invoke when {::emit} is called with the given
    //   event name.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Register the given handler function to be invoked the next time an
    // events with the given name is emitted via {::emit}.
    //
    // * `eventName` {String} naming the event that you want to invoke the handler
    //   when emitted.
    // * `handler` {Function} to invoke when {::emit} is called with the given
    //   event name.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} eventName
     * @param {?} handler
     * @param {?=} unshift
     * @return {?}
     */
    Emitter.prototype.once = 
    // Public: Register the given handler function to be invoked the next time an
    // events with the given name is emitted via {::emit}.
    //
    // * `eventName` {String} naming the event that you want to invoke the handler
    //   when emitted.
    // * `handler` {Function} to invoke when {::emit} is called with the given
    //   event name.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} eventName
     * @param {?} handler
     * @param {?=} unshift
     * @return {?}
     */
    function (eventName, handler, unshift) {
        if (unshift === void 0) { unshift = false; }
        /** @type {?} */
        var disposable;
        /** @type {?} */
        var wrapped = function (value) {
            disposable.dispose();
            handler(value);
        };
        disposable = this.on(eventName, wrapped, unshift);
        return disposable;
    };
    // Public: Register the given handler function to be invoked *before* all
    // other handlers existing at the time of subscription whenever events by the
    // given name are emitted via {::emit}.
    //
    // Use this method when you need to be the first to handle a given event. This
    // could be required when a data structure in a parent object needs to be
    // updated before third-party event handlers registered on a child object via a
    // public API are invoked. Your handler could itself be preempted via
    // subsequent calls to this method, but this can be controlled by keeping
    // methods based on `::preempt` private.
    //
    // * `eventName` {String} naming the event that you want to invoke the handler
    //   when emitted.
    // * `handler` {Function} to invoke when {::emit} is called with the given
    //   event name.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Register the given handler function to be invoked *before* all
    // other handlers existing at the time of subscription whenever events by the
    // given name are emitted via {::emit}.
    //
    // Use this method when you need to be the first to handle a given event. This
    // could be required when a data structure in a parent object needs to be
    // updated before third-party event handlers registered on a child object via a
    // public API are invoked. Your handler could itself be preempted via
    // subsequent calls to this method, but this can be controlled by keeping
    // methods based on `::preempt` private.
    //
    // * `eventName` {String} naming the event that you want to invoke the handler
    //   when emitted.
    // * `handler` {Function} to invoke when {::emit} is called with the given
    //   event name.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */
    Emitter.prototype.preempt = 
    // Public: Register the given handler function to be invoked *before* all
    // other handlers existing at the time of subscription whenever events by the
    // given name are emitted via {::emit}.
    //
    // Use this method when you need to be the first to handle a given event. This
    // could be required when a data structure in a parent object needs to be
    // updated before third-party event handlers registered on a child object via a
    // public API are invoked. Your handler could itself be preempted via
    // subsequent calls to this method, but this can be controlled by keeping
    // methods based on `::preempt` private.
    //
    // * `eventName` {String} naming the event that you want to invoke the handler
    //   when emitted.
    // * `handler` {Function} to invoke when {::emit} is called with the given
    //   event name.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */
    function (eventName, handler) {
        this.on(eventName, handler, true);
    };
    // Private: Used by the disposable.
    // Private: Used by the disposable.
    /**
     * @param {?} eventName
     * @param {?} handlerToRemove
     * @return {?}
     */
    Emitter.prototype.off = 
    // Private: Used by the disposable.
    /**
     * @param {?} eventName
     * @param {?} handlerToRemove
     * @return {?}
     */
    function (eventName, handlerToRemove) {
        var e_1, _a;
        if (this.disposed) {
            return;
        }
        /** @type {?} */
        var oldHandlers = this.handlersByEventName[eventName];
        if (oldHandlers) {
            /** @type {?} */
            var newHandlers = [];
            try {
                for (var oldHandlers_1 = tslib_1.__values(oldHandlers), oldHandlers_1_1 = oldHandlers_1.next(); !oldHandlers_1_1.done; oldHandlers_1_1 = oldHandlers_1.next()) {
                    var handler = oldHandlers_1_1.value;
                    if (handler !== handlerToRemove) {
                        newHandlers.push(handler);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (oldHandlers_1_1 && !oldHandlers_1_1.done && (_a = oldHandlers_1.return)) _a.call(oldHandlers_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (newHandlers.length > 0) {
                this.handlersByEventName[eventName] = newHandlers;
            }
            else {
                delete this.handlersByEventName[eventName];
            }
        }
    };
    //////
    /// Section: Event Emission
    //////
    // Public: Invoke handlers registered via {::on} for the given event name.
    //
    // * `eventName` The name of the event to emit. Handlers registered with {::on}
    //   for the same name will be invoked.
    // * `value` Callbacks will be invoked with this value as an argument.
    //////
    /// Section: Event Emission
    //////
    // Public: Invoke handlers registered via {::on} for the given event name.
    //
    // * `eventName` The name of the event to emit. Handlers registered with {::on}
    //   for the same name will be invoked.
    // * `value` Callbacks will be invoked with this value as an argument.
    /**
     * @param {?} eventName
     * @param {?} value
     * @return {?}
     */
    Emitter.prototype.emit = 
    //////
    /// Section: Event Emission
    //////
    // Public: Invoke handlers registered via {::on} for the given event name.
    //
    // * `eventName` The name of the event to emit. Handlers registered with {::on}
    //   for the same name will be invoked.
    // * `value` Callbacks will be invoked with this value as an argument.
    /**
     * @param {?} eventName
     * @param {?} value
     * @return {?}
     */
    function (eventName, value) {
        var e_2, _a;
        if (this.handlersByEventName && this.handlersByEventName[eventName]) {
            /** @type {?} */
            var handlers = this.handlersByEventName[eventName];
            try {
                for (var handlers_1 = tslib_1.__values(handlers), handlers_1_1 = handlers_1.next(); !handlers_1_1.done; handlers_1_1 = handlers_1.next()) {
                    var handler = handlers_1_1.value;
                    Emitter.dispatch(handler, value);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (handlers_1_1 && !handlers_1_1.done && (_a = handlers_1.return)) _a.call(handlers_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    };
    /**
     * @param {?} eventName
     * @param {?} value
     * @return {?}
     */
    Emitter.prototype.emitAsync = /**
     * @param {?} eventName
     * @param {?} value
     * @return {?}
     */
    function (eventName, value) {
        var e_3, _a;
        if (this.handlersByEventName && this.handlersByEventName[eventName]) {
            /** @type {?} */
            var results = [];
            try {
                for (var _b = tslib_1.__values(this.handlersByEventName[eventName]), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var handler = _c.value;
                    results.push(Emitter.dispatch(handler, value));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
            return Promise.all(results).then(function () { });
        }
        return Promise.resolve();
    };
    /**
     * @return {?}
     */
    Emitter.prototype.getEventNames = /**
     * @return {?}
     */
    function () {
        return Object.keys(this.handlersByEventName);
    };
    /**
     * @param {?} eventName
     * @return {?}
     */
    Emitter.prototype.listenerCountForEventName = /**
     * @param {?} eventName
     * @return {?}
     */
    function (eventName) {
        return this.handlersByEventName && this.handlersByEventName[eventName] ? this.handlersByEventName[eventName].length : 0;
    };
    /**
     * @return {?}
     */
    Emitter.prototype.getTotalListenerCount = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var result = 0;
        for (var eventName in this.handlersByEventName) {
            if (this.handlersByEventName.hasOwnProperty(eventName)) {
                result += this.handlersByEventName[eventName].length;
            }
        }
        return result;
    };
    Emitter.exceptionHandlers = [];
    Emitter.dispatch = Emitter.simpleDispatch;
    return Emitter;
}());
export { Emitter };
if (false) {
    /** @type {?} */
    Emitter.exceptionHandlers;
    /** @type {?} */
    Emitter.dispatch;
    /**
     * @type {?}
     * @private
     */
    Emitter.prototype.disposed;
    /**
     * @type {?}
     * @private
     */
    Emitter.prototype.subscriptions;
    /**
     * @type {?}
     * @private
     */
    Emitter.prototype.handlersByEventName;
}
//# sourceMappingURL=data:application/json;base64,