/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { EventBus } from '../eventbus';
var GspEventBus = /** @class */ (function (_super) {
    tslib_1.__extends(GspEventBus, _super);
    function GspEventBus() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.commands = [];
        return _this;
    }
    /**
     * @param {?} target
     * @param {?} tokenValue
     * @param {?} eventName
     * @param {?} caller
     * @param {?} handler
     * @return {?}
     */
    GspEventBus.prototype.on = /**
     * @param {?} target
     * @param {?} tokenValue
     * @param {?} eventName
     * @param {?} caller
     * @param {?} handler
     * @return {?}
     */
    function (target, tokenValue, eventName, caller, handler) {
        // 如果有对应激活命令，监听事件时立即执行回调函数
        /** @type {?} */
        var command = this.commands.find(function (item) { return item.name === eventName; });
        if (command) {
            handler.call(caller, command.eventeParams);
        }
        return _super.prototype.on.call(this, target, tokenValue, eventName, caller, handler);
    };
    /**
     * @param {?} emitterType
     * @param {?} tokenValue
     * @param {?} eventName
     * @param {?} eventArgs
     * @return {?}
     */
    GspEventBus.prototype.post = /**
     * @param {?} emitterType
     * @param {?} tokenValue
     * @param {?} eventName
     * @param {?} eventArgs
     * @return {?}
     */
    function (emitterType, tokenValue, eventName, eventArgs) {
        this.dispatchCommand(eventName, eventArgs);
        _super.prototype.post.call(this, emitterType, tokenValue, eventName, eventArgs);
    };
    /**
     * @param {?} commandName
     * @param {?} plugin
     * @param {?} activateFn
     * @return {?}
     */
    GspEventBus.prototype.registryActivateCommand = /**
     * @param {?} commandName
     * @param {?} plugin
     * @param {?} activateFn
     * @return {?}
     */
    function (commandName, plugin, activateFn) {
        this.commands.push({
            name: commandName,
            plugin: plugin,
            activateFn: activateFn
        });
    };
    /**
     * @private
     * @param {?} commandName
     * @param {?} args
     * @return {?}
     */
    GspEventBus.prototype.dispatchCommand = /**
     * @private
     * @param {?} commandName
     * @param {?} args
     * @return {?}
     */
    function (commandName, args) {
        /** @type {?} */
        var command = this.commands.find(function (item) { return item.name === commandName; });
        if (command) {
            command.activateFn(command.plugin);
            command.eventParams = args;
        }
    };
    return GspEventBus;
}(EventBus));
export { GspEventBus };
if (false) {
    /**
     * @type {?}
     * @private
     */
    GspEventBus.prototype.commands;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3NwLWV2ZW50LWJ1cy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvaWRlLWRldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9pZGVmcmFtZXdvcmsvZ3NwL2dzcC1ldmVudC1idXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFlLE1BQU0sYUFBYSxDQUFDO0FBSXBEO0lBQWlDLHVDQUFRO0lBQXpDO1FBQUEscUVBZ0NDO1FBL0JTLGNBQVEsR0FBVSxFQUFFLENBQUM7O0lBK0IvQixDQUFDOzs7Ozs7Ozs7SUE3QkMsd0JBQUU7Ozs7Ozs7O0lBQUYsVUFBRyxNQUFjLEVBQUUsVUFBa0IsRUFBRSxTQUFpQixFQUFFLE1BQWMsRUFBRSxPQUE2Qjs7O1lBRS9GLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksQ0FBQyxJQUFJLEtBQUssU0FBUyxFQUF2QixDQUF1QixDQUFDO1FBQ25FLElBQUksT0FBTyxFQUFFO1lBQ1gsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQzVDO1FBQ0QsT0FBTyxpQkFBTSxFQUFFLFlBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2xFLENBQUM7Ozs7Ozs7O0lBRUQsMEJBQUk7Ozs7Ozs7SUFBSixVQUFLLFdBQStCLEVBQUUsVUFBa0IsRUFBRSxTQUFpQixFQUFFLFNBQWM7UUFDekYsSUFBSSxDQUFDLGVBQWUsQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDM0MsaUJBQU0sSUFBSSxZQUFDLFdBQVcsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzVELENBQUM7Ozs7Ozs7SUFFRCw2Q0FBdUI7Ozs7OztJQUF2QixVQUF3QixXQUFtQixFQUFFLE1BQVcsRUFBRSxVQUErQjtRQUN2RixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztZQUNqQixJQUFJLEVBQUUsV0FBVztZQUNqQixNQUFNLFFBQUE7WUFDTixVQUFVLFlBQUE7U0FDWCxDQUFDLENBQUM7SUFDTCxDQUFDOzs7Ozs7O0lBRU8scUNBQWU7Ozs7OztJQUF2QixVQUF3QixXQUFtQixFQUFFLElBQVM7O1lBQzlDLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksQ0FBQyxJQUFJLEtBQUssV0FBVyxFQUF6QixDQUF5QixDQUFDO1FBQ3JFLElBQUksT0FBTyxFQUFFO1lBQ1gsT0FBTyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDbkMsT0FBTyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7U0FDNUI7SUFDSCxDQUFDO0lBQ0gsa0JBQUM7QUFBRCxDQUFDLEFBaENELENBQWlDLFFBQVEsR0FnQ3hDOzs7Ozs7O0lBL0JDLCtCQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50QnVzLCBJRGlzcG9zYWJsZSB9IGZyb20gJy4uL2V2ZW50YnVzJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEdzcEV2ZW50QnVzIGV4dGVuZHMgRXZlbnRCdXMge1xyXG4gIHByaXZhdGUgY29tbWFuZHM6IGFueVtdID0gW107XHJcblxyXG4gIG9uKHRhcmdldDogc3RyaW5nLCB0b2tlblZhbHVlOiBzdHJpbmcsIGV2ZW50TmFtZTogc3RyaW5nLCBjYWxsZXI6IG9iamVjdCwgaGFuZGxlcjogKHZhbHVlOiBhbnkpID0+IHZvaWQpIHtcclxuICAgIC8vIOWmguaenOacieWvueW6lOa/gOa0u+WRveS7pO+8jOebkeWQrOS6i+S7tuaXtueri+WNs+aJp+ihjOWbnuiwg+WHveaVsFxyXG4gICAgY29uc3QgY29tbWFuZCA9IHRoaXMuY29tbWFuZHMuZmluZChpdGVtID0+IGl0ZW0ubmFtZSA9PT0gZXZlbnROYW1lKTtcclxuICAgIGlmIChjb21tYW5kKSB7XHJcbiAgICAgIGhhbmRsZXIuY2FsbChjYWxsZXIsIGNvbW1hbmQuZXZlbnRlUGFyYW1zKTtcclxuICAgIH1cclxuICAgIHJldHVybiBzdXBlci5vbih0YXJnZXQsIHRva2VuVmFsdWUsIGV2ZW50TmFtZSwgY2FsbGVyLCBoYW5kbGVyKTtcclxuICB9XHJcblxyXG4gIHBvc3QoZW1pdHRlclR5cGU6IFR5cGU8YW55PiB8IHN0cmluZywgdG9rZW5WYWx1ZTogc3RyaW5nLCBldmVudE5hbWU6IHN0cmluZywgZXZlbnRBcmdzOiBhbnkpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzcGF0Y2hDb21tYW5kKGV2ZW50TmFtZSwgZXZlbnRBcmdzKTtcclxuICAgIHN1cGVyLnBvc3QoZW1pdHRlclR5cGUsIHRva2VuVmFsdWUsIGV2ZW50TmFtZSwgZXZlbnRBcmdzKTtcclxuICB9XHJcblxyXG4gIHJlZ2lzdHJ5QWN0aXZhdGVDb21tYW5kKGNvbW1hbmROYW1lOiBzdHJpbmcsIHBsdWdpbjogYW55LCBhY3RpdmF0ZUZuOiAoYXJnMDogYW55KSA9PiB2b2lkKSB7XHJcbiAgICB0aGlzLmNvbW1hbmRzLnB1c2goe1xyXG4gICAgICBuYW1lOiBjb21tYW5kTmFtZSxcclxuICAgICAgcGx1Z2luLFxyXG4gICAgICBhY3RpdmF0ZUZuXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZGlzcGF0Y2hDb21tYW5kKGNvbW1hbmROYW1lOiBzdHJpbmcsIGFyZ3M6IGFueSkge1xyXG4gICAgY29uc3QgY29tbWFuZCA9IHRoaXMuY29tbWFuZHMuZmluZChpdGVtID0+IGl0ZW0ubmFtZSA9PT0gY29tbWFuZE5hbWUpO1xyXG4gICAgaWYgKGNvbW1hbmQpIHtcclxuICAgICAgY29tbWFuZC5hY3RpdmF0ZUZuKGNvbW1hbmQucGx1Z2luKTtcclxuICAgICAgY29tbWFuZC5ldmVudFBhcmFtcyA9IGFyZ3M7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==