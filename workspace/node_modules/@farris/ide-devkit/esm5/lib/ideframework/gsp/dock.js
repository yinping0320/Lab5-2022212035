/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { PaneContainer } from './pane-container';
import { Emitter } from './event-kit';
/** @enum {number} */
var DockStyle = {
    none: 0,
    left: 1,
    right: 2,
    top: 3,
    bottom: 4,
};
export { DockStyle };
DockStyle[DockStyle.none] = 'none';
DockStyle[DockStyle.left] = 'left';
DockStyle[DockStyle.right] = 'right';
DockStyle[DockStyle.top] = 'top';
DockStyle[DockStyle.bottom] = 'bottom';
var Dock = /** @class */ (function () {
    function Dock(params) {
        this.handleResizeHandleDragStart = this.handleResizeHandleDragStart.bind(this);
        this.handleResizeToFit = this.handleResizeToFit.bind(this);
        this.handleMouseMove = this.handleMouseMove.bind(this);
        this.handleMouseUp = this.handleMouseUp.bind(this);
        this.location = params.location;
        this.widthOrHeight = getWidthOrHeight(this.location);
        this.viewRegistry = params.viewRegistry;
        this.didActivate = params.didActivate;
        this.emitter = new Emitter();
        this.paneContainer = new PaneContainer({
            location: this.location,
            viewRegistry: this.viewRegistry
        });
        this.state = {
            size: null,
            visible: false,
            shouldAnimate: false
        };
    }
    // This method is called explicitly by the object which adds the Dock to the document.
    // This method is called explicitly by the object which adds the Dock to the document.
    /**
     * @return {?}
     */
    Dock.prototype.elementAttached = 
    // This method is called explicitly by the object which adds the Dock to the document.
    /**
     * @return {?}
     */
    function () {
        // Re-render when the dock is attached to make sure we remeasure sizes defined in CSS.
        this.render(this.state);
    };
    /**
     * @return {?}
     */
    Dock.prototype.getElement = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    Dock.prototype.getLocation = /**
     * @return {?}
     */
    function () {
        return this.location;
    };
    /**
     * @return {?}
     */
    Dock.prototype.destroy = /**
     * @return {?}
     */
    function () {
        this.paneContainer.destroy();
        // window.removeEventListener('mousemove', this.handleMouseMove);
        // window.removeEventListener('mouseup', this.handleMouseUp);
        // window.removeEventListener('drag', this.handleDrag);
        // window.removeEventListener('dragend', this.handleDragEnd);
    };
    /**
     * @param {?} hovered
     * @return {?}
     */
    Dock.prototype.setHovered = /**
     * @param {?} hovered
     * @return {?}
     */
    function (hovered) {
        if (hovered === this.state.hovered) {
            return;
        }
        this.setState({ hovered: hovered });
    };
    /**
     * @param {?} draggingItem
     * @return {?}
     */
    Dock.prototype.setDraggingItem = /**
     * @param {?} draggingItem
     * @return {?}
     */
    function (draggingItem) {
        if (draggingItem === this.state.draggingItem) {
            return;
        }
        this.setState({ draggingItem: draggingItem });
    };
    // Extended: Show the dock and focus its active {Pane}.
    // Extended: Show the dock and focus its active {Pane}.
    /**
     * @return {?}
     */
    Dock.prototype.activate = 
    // Extended: Show the dock and focus its active {Pane}.
    /**
     * @return {?}
     */
    function () {
        this.getActivePane().activate();
    };
    // Extended: Show the dock without focusing it.
    // Extended: Show the dock without focusing it.
    /**
     * @return {?}
     */
    Dock.prototype.show = 
    // Extended: Show the dock without focusing it.
    /**
     * @return {?}
     */
    function () {
        this.setState({ visible: true });
    };
    // Extended: Hide the dock and activate the {WorkspaceCenter} if the dock was
    // was previously focused.
    // Extended: Hide the dock and activate the {WorkspaceCenter} if the dock was
    // was previously focused.
    /**
     * @return {?}
     */
    Dock.prototype.hide = 
    // Extended: Hide the dock and activate the {WorkspaceCenter} if the dock was
    // was previously focused.
    /**
     * @return {?}
     */
    function () {
        this.setState({ visible: false });
    };
    // Extended: Toggle the dock's visibility without changing the {Workspace}'s
    // active pane container.
    // Extended: Toggle the dock's visibility without changing the {Workspace}'s
    // active pane container.
    /**
     * @return {?}
     */
    Dock.prototype.toggle = 
    // Extended: Toggle the dock's visibility without changing the {Workspace}'s
    // active pane container.
    /**
     * @return {?}
     */
    function () {
        // const state = { visible: !this.state.visible };
        // if (!state.visible) { state.hovered = false; }
        // this.setState(state);
    };
    // Extended: Check if the dock is visible.
    //
    // Returns a {Boolean}.
    // Extended: Check if the dock is visible.
    //
    // Returns a {Boolean}.
    /**
     * @return {?}
     */
    Dock.prototype.isVisible = 
    // Extended: Check if the dock is visible.
    //
    // Returns a {Boolean}.
    /**
     * @return {?}
     */
    function () {
        return this.state.visible;
    };
    /**
     * @param {?} newState
     * @return {?}
     */
    Dock.prototype.setState = /**
     * @param {?} newState
     * @return {?}
     */
    function (newState) {
        /** @type {?} */
        var prevState = this.state;
        /** @type {?} */
        var nextState = Object.assign({}, prevState, newState);
        // Update the `shouldAnimate` state. This needs to be written to the DOM before updating the
        // class that changes the animated property. Normally we'd have to defer the class change a
        // frame to ensure the property is animated (or not) appropriately, however we luck out in this
        // case because the drag start always happens before the item is dragged into the toggle button.
        if (nextState.visible !== prevState.visible) {
            // Never animate toggling visibility...
            nextState.shouldAnimate = false;
        }
        else if (!nextState.visible && nextState.draggingItem && !prevState.draggingItem) {
            // ...but do animate if you start dragging while the panel is hidden.
            nextState.shouldAnimate = true;
        }
        this.state = nextState;
        this.render(this.state);
        var visible = this.state.visible;
        // if (visible !== prevState.visible) {
        //   this.emitter.emit('did-change-visible', visible);
        // }
    };
    /**
     * @param {?} state
     * @return {?}
     */
    Dock.prototype.render = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
    };
    /**
     * @return {?}
     */
    Dock.prototype.handleDidAddPaneItem = /**
     * @return {?}
     */
    function () {
        if (this.state.size == null) {
            this.setState({ size: this.getInitialSize() });
        }
    };
    /**
     * @return {?}
     */
    Dock.prototype.handleDidRemovePaneItem = /**
     * @return {?}
     */
    function () {
        // Hide the dock if you remove the last item.
        if (this.paneContainer.getPaneItems().length === 0) {
            this.setState({ visible: false, hovered: false, size: null });
        }
    };
    /**
     * @return {?}
     */
    Dock.prototype.handleResizeHandleDragStart = /**
     * @return {?}
     */
    function () {
        window.addEventListener('mousemove', this.handleMouseMove);
        window.addEventListener('mouseup', this.handleMouseUp);
        this.setState({ resizing: true });
    };
    /**
     * @return {?}
     */
    Dock.prototype.handleResizeToFit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var item = this.getActivePaneItem();
        if (item) {
            /** @type {?} */
            var size = getPreferredSize(item, this.getLocation());
            if (size != null) {
                this.setState({ size: size });
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    Dock.prototype.handleMouseMove = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.buttons === 0) { // We missed the mouseup event. For some reason it happens on Windows
            this.handleMouseUp(event);
            return;
        }
        /** @type {?} */
        var size = 0;
        // switch (this.location) {
        //   case 'left':
        //     size = event.pageX - this.element.getBoundingClientRect().left;
        //     break;
        //   case 'bottom':
        //     size = this.element.getBoundingClientRect().bottom - event.pageY;
        //     break;
        //   case 'right':
        //     size = this.element.getBoundingClientRect().right - event.pageX;
        //     break;
        // }
        this.setState({ size: size });
    };
    /**
     * @param {?} event
     * @return {?}
     */
    Dock.prototype.handleMouseUp = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        window.removeEventListener('mousemove', this.handleMouseMove);
        window.removeEventListener('mouseup', this.handleMouseUp);
        this.setState({ resizing: false });
    };
    // Determine whether the cursor is within the dock hover area. This isn't as simple as just using
    // mouseenter/leave because we want to be a little more forgiving. For example, if the cursor is
    // over the footer, we want to show the bottom dock's toggle button. Also note that our criteria
    // for detecting entry are different than detecting exit but, in order for us to avoid jitter, the
    // area considered when detecting exit MUST fully encompass the area considered when detecting
    // entry.
    // Determine whether the cursor is within the dock hover area. This isn't as simple as just using
    // mouseenter/leave because we want to be a little more forgiving. For example, if the cursor is
    // over the footer, we want to show the bottom dock's toggle button. Also note that our criteria
    // for detecting entry are different than detecting exit but, in order for us to avoid jitter, the
    // area considered when detecting exit MUST fully encompass the area considered when detecting
    // entry.
    /**
     * @param {?} point
     * @param {?} detectingExit
     * @return {?}
     */
    Dock.prototype.pointWithinHoverArea = 
    // Determine whether the cursor is within the dock hover area. This isn't as simple as just using
    // mouseenter/leave because we want to be a little more forgiving. For example, if the cursor is
    // over the footer, we want to show the bottom dock's toggle button. Also note that our criteria
    // for detecting entry are different than detecting exit but, in order for us to avoid jitter, the
    // area considered when detecting exit MUST fully encompass the area considered when detecting
    // entry.
    /**
     * @param {?} point
     * @param {?} detectingExit
     * @return {?}
     */
    function (point, detectingExit) {
    };
    /**
     * @return {?}
     */
    Dock.prototype.getInitialSize = /**
     * @return {?}
     */
    function () {
        // The item may not have been activated yet. If that's the case, just use the first item.
        /** @type {?} */
        var activePaneItem = this.paneContainer.getActivePaneItem() || this.paneContainer.getPaneItems()[0];
        // If there are items, we should have an explicit width; if not, we shouldn't.
        return activePaneItem
            ? getPreferredSize(activePaneItem, this.location)
            : null;
    };
    /**
     * @return {?}
     */
    Dock.prototype.serialize = /**
     * @return {?}
     */
    function () {
        return {
            deserializer: 'Dock',
            size: this.state.size,
            paneContainer: this.paneContainer.serialize({}),
            visible: this.state.visible
        };
    };
    /**
     * @param {?} serialized
     * @param {?} deserializerManager
     * @return {?}
     */
    Dock.prototype.deserialize = /**
     * @param {?} serialized
     * @param {?} deserializerManager
     * @return {?}
     */
    function (serialized, deserializerManager) {
        this.paneContainer.deserialize(serialized.paneContainer, deserializerManager);
        this.setState({
            size: serialized.size || this.getInitialSize(),
            // If no items could be deserialized, we don't want to show the dock (even if it was visible last time)
            visible: serialized.visible && (this.paneContainer.getPaneItems().length > 0)
        });
    };
    /*
    Section: Event Subscription
    */
    // Essential: Invoke the given callback when the visibility of the dock changes.
    //
    // * `callback` {Function} to be called when the visibility changes.
    //   * `visible` {Boolean} Is the dock now visible?
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /*
      Section: Event Subscription
      */
    // Essential: Invoke the given callback when the visibility of the dock changes.
    //
    // * `callback` {Function} to be called when the visibility changes.
    //   * `visible` {Boolean} Is the dock now visible?
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    Dock.prototype.onDidChangeVisible = /*
      Section: Event Subscription
      */
    // Essential: Invoke the given callback when the visibility of the dock changes.
    //
    // * `callback` {Function} to be called when the visibility changes.
    //   * `visible` {Boolean} Is the dock now visible?
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
    };
    // Essential: Invoke the given callback with the current and all future visibilities of the dock.
    //
    // * `callback` {Function} to be called when the visibility changes.
    //   * `visible` {Boolean} Is the dock now visible?
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Essential: Invoke the given callback with the current and all future visibilities of the dock.
    //
    // * `callback` {Function} to be called when the visibility changes.
    //   * `visible` {Boolean} Is the dock now visible?
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    Dock.prototype.observeVisible = 
    // Essential: Invoke the given callback with the current and all future visibilities of the dock.
    //
    // * `callback` {Function} to be called when the visibility changes.
    //   * `visible` {Boolean} Is the dock now visible?
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        callback(this.isVisible());
        return this.onDidChangeVisible(callback);
    };
    // Essential: Invoke the given callback with all current and future panes items
    // in the dock.
    //
    // * `callback` {Function} to be called with current and future pane items.
    //   * `item` An item that is present in {::getPaneItems} at the time of
    //      subscription or that is added at some later time.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Essential: Invoke the given callback with all current and future panes items
    // in the dock.
    //
    // * `callback` {Function} to be called with current and future pane items.
    //   * `item` An item that is present in {::getPaneItems} at the time of
    //      subscription or that is added at some later time.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    Dock.prototype.observePaneItems = 
    // Essential: Invoke the given callback with all current and future panes items
    // in the dock.
    //
    // * `callback` {Function} to be called with current and future pane items.
    //   * `item` An item that is present in {::getPaneItems} at the time of
    //      subscription or that is added at some later time.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.paneContainer.observePaneItems(callback);
    };
    // Essential: Invoke the given callback when the active pane item changes.
    //
    // Because observers are invoked synchronously, it's important not to perform
    // any expensive operations via this method. Consider
    // {::onDidStopChangingActivePaneItem} to delay operations until after changes
    // stop occurring.
    //
    // * `callback` {Function} to be called when the active pane item changes.
    //   * `item` The active pane item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Essential: Invoke the given callback when the active pane item changes.
    //
    // Because observers are invoked synchronously, it's important not to perform
    // any expensive operations via this method. Consider
    // {::onDidStopChangingActivePaneItem} to delay operations until after changes
    // stop occurring.
    //
    // * `callback` {Function} to be called when the active pane item changes.
    //   * `item` The active pane item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    Dock.prototype.onDidChangeActivePaneItem = 
    // Essential: Invoke the given callback when the active pane item changes.
    //
    // Because observers are invoked synchronously, it's important not to perform
    // any expensive operations via this method. Consider
    // {::onDidStopChangingActivePaneItem} to delay operations until after changes
    // stop occurring.
    //
    // * `callback` {Function} to be called when the active pane item changes.
    //   * `item` The active pane item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.paneContainer.onDidChangeActivePaneItem(callback);
    };
    // Essential: Invoke the given callback when the active pane item stops
    // changing.
    //
    // Observers are called asynchronously 100ms after the last active pane item
    // change. Handling changes here rather than in the synchronous
    // {::onDidChangeActivePaneItem} prevents unneeded work if the user is quickly
    // changing or closing tabs and ensures critical UI feedback, like changing the
    // highlighted tab, gets priority over work that can be done asynchronously.
    //
    // * `callback` {Function} to be called when the active pane item stopts
    //   changing.
    //   * `item` The active pane item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Essential: Invoke the given callback when the active pane item stops
    // changing.
    //
    // Observers are called asynchronously 100ms after the last active pane item
    // change. Handling changes here rather than in the synchronous
    // {::onDidChangeActivePaneItem} prevents unneeded work if the user is quickly
    // changing or closing tabs and ensures critical UI feedback, like changing the
    // highlighted tab, gets priority over work that can be done asynchronously.
    //
    // * `callback` {Function} to be called when the active pane item stopts
    //   changing.
    //   * `item` The active pane item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    Dock.prototype.onDidStopChangingActivePaneItem = 
    // Essential: Invoke the given callback when the active pane item stops
    // changing.
    //
    // Observers are called asynchronously 100ms after the last active pane item
    // change. Handling changes here rather than in the synchronous
    // {::onDidChangeActivePaneItem} prevents unneeded work if the user is quickly
    // changing or closing tabs and ensures critical UI feedback, like changing the
    // highlighted tab, gets priority over work that can be done asynchronously.
    //
    // * `callback` {Function} to be called when the active pane item stopts
    //   changing.
    //   * `item` The active pane item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.paneContainer.onDidStopChangingActivePaneItem(callback);
    };
    // Essential: Invoke the given callback with the current active pane item and
    // with all future active pane items in the dock.
    //
    // * `callback` {Function} to be called when the active pane item changes.
    //   * `item` The current active pane item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Essential: Invoke the given callback with the current active pane item and
    // with all future active pane items in the dock.
    //
    // * `callback` {Function} to be called when the active pane item changes.
    //   * `item` The current active pane item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    Dock.prototype.observeActivePaneItem = 
    // Essential: Invoke the given callback with the current active pane item and
    // with all future active pane items in the dock.
    //
    // * `callback` {Function} to be called when the active pane item changes.
    //   * `item` The current active pane item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.paneContainer.observeActivePaneItem(callback);
    };
    // Extended: Invoke the given callback when a pane is added to the dock.
    //
    // * `callback` {Function} to be called panes are added.
    //   * `event` {Object} with the following keys:
    //     * `pane` The added pane.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Extended: Invoke the given callback when a pane is added to the dock.
    //
    // * `callback` {Function} to be called panes are added.
    //   * `event` {Object} with the following keys:
    //     * `pane` The added pane.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    Dock.prototype.onDidAddPane = 
    // Extended: Invoke the given callback when a pane is added to the dock.
    //
    // * `callback` {Function} to be called panes are added.
    //   * `event` {Object} with the following keys:
    //     * `pane` The added pane.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.paneContainer.onDidAddPane(callback);
    };
    // Extended: Invoke the given callback before a pane is destroyed in the
    // dock.
    //
    // * `callback` {Function} to be called before panes are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `pane` The pane to be destroyed.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Extended: Invoke the given callback before a pane is destroyed in the
    // dock.
    //
    // * `callback` {Function} to be called before panes are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `pane` The pane to be destroyed.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    Dock.prototype.onWillDestroyPane = 
    // Extended: Invoke the given callback before a pane is destroyed in the
    // dock.
    //
    // * `callback` {Function} to be called before panes are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `pane` The pane to be destroyed.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.paneContainer.onWillDestroyPane(callback);
    };
    // Extended: Invoke the given callback when a pane is destroyed in the dock.
    //
    // * `callback` {Function} to be called panes are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `pane` The destroyed pane.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Extended: Invoke the given callback when a pane is destroyed in the dock.
    //
    // * `callback` {Function} to be called panes are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `pane` The destroyed pane.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    Dock.prototype.onDidDestroyPane = 
    // Extended: Invoke the given callback when a pane is destroyed in the dock.
    //
    // * `callback` {Function} to be called panes are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `pane` The destroyed pane.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.paneContainer.onDidDestroyPane(callback);
    };
    // Extended: Invoke the given callback with all current and future panes in the
    // dock.
    //
    // * `callback` {Function} to be called with current and future panes.
    //   * `pane` A {Pane} that is present in {::getPanes} at the time of
    //      subscription or that is added at some later time.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Extended: Invoke the given callback with all current and future panes in the
    // dock.
    //
    // * `callback` {Function} to be called with current and future panes.
    //   * `pane` A {Pane} that is present in {::getPanes} at the time of
    //      subscription or that is added at some later time.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    Dock.prototype.observePanes = 
    // Extended: Invoke the given callback with all current and future panes in the
    // dock.
    //
    // * `callback` {Function} to be called with current and future panes.
    //   * `pane` A {Pane} that is present in {::getPanes} at the time of
    //      subscription or that is added at some later time.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.paneContainer.observePanes(callback);
    };
    // Extended: Invoke the given callback when the active pane changes.
    //
    // * `callback` {Function} to be called when the active pane changes.
    //   * `pane` A {Pane} that is the current return value of {::getActivePane}.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Extended: Invoke the given callback when the active pane changes.
    //
    // * `callback` {Function} to be called when the active pane changes.
    //   * `pane` A {Pane} that is the current return value of {::getActivePane}.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    Dock.prototype.onDidChangeActivePane = 
    // Extended: Invoke the given callback when the active pane changes.
    //
    // * `callback` {Function} to be called when the active pane changes.
    //   * `pane` A {Pane} that is the current return value of {::getActivePane}.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.paneContainer.onDidChangeActivePane(callback);
    };
    // Extended: Invoke the given callback with the current active pane and when
    // the active pane changes.
    //
    // * `callback` {Function} to be called with the current and future active#
    //   panes.
    //   * `pane` A {Pane} that is the current return value of {::getActivePane}.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Extended: Invoke the given callback with the current active pane and when
    // the active pane changes.
    //
    // * `callback` {Function} to be called with the current and future active#
    //   panes.
    //   * `pane` A {Pane} that is the current return value of {::getActivePane}.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    Dock.prototype.observeActivePane = 
    // Extended: Invoke the given callback with the current active pane and when
    // the active pane changes.
    //
    // * `callback` {Function} to be called with the current and future active#
    //   panes.
    //   * `pane` A {Pane} that is the current return value of {::getActivePane}.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.paneContainer.observeActivePane(callback);
    };
    // Extended: Invoke the given callback when a pane item is added to the dock.
    //
    // * `callback` {Function} to be called when pane items are added.
    //   * `event` {Object} with the following keys:
    //     * `item` The added pane item.
    //     * `pane` {Pane} containing the added item.
    //     * `index` {Number} indicating the index of the added item in its pane.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Extended: Invoke the given callback when a pane item is added to the dock.
    //
    // * `callback` {Function} to be called when pane items are added.
    //   * `event` {Object} with the following keys:
    //     * `item` The added pane item.
    //     * `pane` {Pane} containing the added item.
    //     * `index` {Number} indicating the index of the added item in its pane.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    Dock.prototype.onDidAddPaneItem = 
    // Extended: Invoke the given callback when a pane item is added to the dock.
    //
    // * `callback` {Function} to be called when pane items are added.
    //   * `event` {Object} with the following keys:
    //     * `item` The added pane item.
    //     * `pane` {Pane} containing the added item.
    //     * `index` {Number} indicating the index of the added item in its pane.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.paneContainer.onDidAddPaneItem(callback);
    };
    // Extended: Invoke the given callback when a pane item is about to be
    // destroyed, before the user is prompted to save it.
    //
    // * `callback` {Function} to be called before pane items are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `item` The item to be destroyed.
    //     * `pane` {Pane} containing the item to be destroyed.
    //     * `index` {Number} indicating the index of the item to be destroyed in
    //       its pane.
    //
    // Returns a {Disposable} on which `.dispose` can be called to unsubscribe.
    // Extended: Invoke the given callback when a pane item is about to be
    // destroyed, before the user is prompted to save it.
    //
    // * `callback` {Function} to be called before pane items are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `item` The item to be destroyed.
    //     * `pane` {Pane} containing the item to be destroyed.
    //     * `index` {Number} indicating the index of the item to be destroyed in
    //       its pane.
    //
    // Returns a {Disposable} on which `.dispose` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    Dock.prototype.onWillDestroyPaneItem = 
    // Extended: Invoke the given callback when a pane item is about to be
    // destroyed, before the user is prompted to save it.
    //
    // * `callback` {Function} to be called before pane items are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `item` The item to be destroyed.
    //     * `pane` {Pane} containing the item to be destroyed.
    //     * `index` {Number} indicating the index of the item to be destroyed in
    //       its pane.
    //
    // Returns a {Disposable} on which `.dispose` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.paneContainer.onWillDestroyPaneItem(callback);
    };
    // Extended: Invoke the given callback when a pane item is destroyed.
    //
    // * `callback` {Function} to be called when pane items are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `item` The destroyed item.
    //     * `pane` {Pane} containing the destroyed item.
    //     * `index` {Number} indicating the index of the destroyed item in its
    //       pane.
    //
    // Returns a {Disposable} on which `.dispose` can be called to unsubscribe.
    // Extended: Invoke the given callback when a pane item is destroyed.
    //
    // * `callback` {Function} to be called when pane items are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `item` The destroyed item.
    //     * `pane` {Pane} containing the destroyed item.
    //     * `index` {Number} indicating the index of the destroyed item in its
    //       pane.
    //
    // Returns a {Disposable} on which `.dispose` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    Dock.prototype.onDidDestroyPaneItem = 
    // Extended: Invoke the given callback when a pane item is destroyed.
    //
    // * `callback` {Function} to be called when pane items are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `item` The destroyed item.
    //     * `pane` {Pane} containing the destroyed item.
    //     * `index` {Number} indicating the index of the destroyed item in its
    //       pane.
    //
    // Returns a {Disposable} on which `.dispose` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.paneContainer.onDidDestroyPaneItem(callback);
    };
    // Extended: Invoke the given callback when the hovered state of the dock changes.
    //
    // * `callback` {Function} to be called when the hovered state changes.
    //   * `hovered` {Boolean} Is the dock now hovered?
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Extended: Invoke the given callback when the hovered state of the dock changes.
    //
    // * `callback` {Function} to be called when the hovered state changes.
    //   * `hovered` {Boolean} Is the dock now hovered?
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    Dock.prototype.onDidChangeHovered = 
    // Extended: Invoke the given callback when the hovered state of the dock changes.
    //
    // * `callback` {Function} to be called when the hovered state changes.
    //   * `hovered` {Boolean} Is the dock now hovered?
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.emitter.on('did-change-hovered', callback);
    };
    /*
    Section: Pane Items
    */
    // Essential: Get all pane items in the dock.
    //
    // Returns an {Array} of items.
    /*
      Section: Pane Items
      */
    // Essential: Get all pane items in the dock.
    //
    // Returns an {Array} of items.
    /**
     * @return {?}
     */
    Dock.prototype.getPaneItems = /*
      Section: Pane Items
      */
    // Essential: Get all pane items in the dock.
    //
    // Returns an {Array} of items.
    /**
     * @return {?}
     */
    function () {
        return this.paneContainer.getPaneItems();
    };
    // Essential: Get the active {Pane}'s active item.
    //
    // Returns an pane item {Object}.
    // Essential: Get the active {Pane}'s active item.
    //
    // Returns an pane item {Object}.
    /**
     * @return {?}
     */
    Dock.prototype.getActivePaneItem = 
    // Essential: Get the active {Pane}'s active item.
    //
    // Returns an pane item {Object}.
    /**
     * @return {?}
     */
    function () {
        return this.paneContainer.getActivePaneItem();
    };
    // Save all pane items.
    // Save all pane items.
    /**
     * @return {?}
     */
    Dock.prototype.saveAll = 
    // Save all pane items.
    /**
     * @return {?}
     */
    function () {
        this.paneContainer.saveAll();
    };
    /**
     * @param {?} options
     * @return {?}
     */
    Dock.prototype.confirmClose = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        return this.paneContainer.confirmClose(options);
    };
    /*
    Section: Panes
    */
    // Extended: Get all panes in the dock.
    //
    // Returns an {Array} of {Pane}s.
    /*
      Section: Panes
      */
    // Extended: Get all panes in the dock.
    //
    // Returns an {Array} of {Pane}s.
    /**
     * @return {?}
     */
    Dock.prototype.getPanes = /*
      Section: Panes
      */
    // Extended: Get all panes in the dock.
    //
    // Returns an {Array} of {Pane}s.
    /**
     * @return {?}
     */
    function () {
        return this.paneContainer.getPanes();
    };
    // Extended: Get the active {Pane}.
    //
    // Returns a {Pane}.
    // Extended: Get the active {Pane}.
    //
    // Returns a {Pane}.
    /**
     * @return {?}
     */
    Dock.prototype.getActivePane = 
    // Extended: Get the active {Pane}.
    //
    // Returns a {Pane}.
    /**
     * @return {?}
     */
    function () {
        return this.paneContainer.getActivePane();
    };
    // Extended: Make the next pane active.
    // Extended: Make the next pane active.
    /**
     * @return {?}
     */
    Dock.prototype.activateNextPane = 
    // Extended: Make the next pane active.
    /**
     * @return {?}
     */
    function () {
        return this.paneContainer.activateNextPane();
    };
    // Extended: Make the previous pane active.
    // Extended: Make the previous pane active.
    /**
     * @return {?}
     */
    Dock.prototype.activatePreviousPane = 
    // Extended: Make the previous pane active.
    /**
     * @return {?}
     */
    function () {
        return this.paneContainer.activatePreviousPane();
    };
    /**
     * @param {?} uri
     * @return {?}
     */
    Dock.prototype.paneForURI = /**
     * @param {?} uri
     * @return {?}
     */
    function (uri) {
        return this.paneContainer.paneForURI(uri);
    };
    /**
     * @param {?} item
     * @return {?}
     */
    Dock.prototype.paneForItem = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return this.paneContainer.paneForItem(item);
    };
    // Destroy (close) the active pane.
    // Destroy (close) the active pane.
    /**
     * @return {?}
     */
    Dock.prototype.destroyActivePane = 
    // Destroy (close) the active pane.
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var activePane = this.getActivePane();
        if (activePane != null) {
            activePane.destroy();
        }
    };
    return Dock;
}());
export { Dock };
if (false) {
    /**
     * @type {?}
     * @private
     */
    Dock.prototype.location;
    /**
     * @type {?}
     * @private
     */
    Dock.prototype.widthOrHeight;
    /**
     * @type {?}
     * @private
     */
    Dock.prototype.viewRegistry;
    /**
     * @type {?}
     * @private
     */
    Dock.prototype.didActivate;
    /**
     * @type {?}
     * @private
     */
    Dock.prototype.paneContainer;
    /**
     * @type {?}
     * @private
     */
    Dock.prototype.state;
    /**
     * @type {?}
     * @private
     */
    Dock.prototype.emitter;
}
/**
 * @param {?} location
 * @return {?}
 */
function getWidthOrHeight(location) {
    return location === 'left' || location === 'right' ? 'width' : 'height';
}
/**
 * @param {?} item
 * @param {?} location
 * @return {?}
 */
function getPreferredSize(item, location) {
    switch (location) {
        case 'left':
        case 'right':
            return typeof item.getPreferredWidth === 'function'
                ? item.getPreferredWidth()
                : null;
        default:
            return typeof item.getPreferredHeight === 'function'
                ? item.getPreferredHeight()
                : null;
    }
}
/**
 * @param {?} location
 * @param {?} visible
 * @return {?}
 */
function getIconName(location, visible) {
    switch (location) {
        case 'right': return visible ? 'icon-chevron-right' : 'icon-chevron-left';
        case 'bottom': return visible ? 'icon-chevron-down' : 'icon-chevron-up';
        case 'left': return visible ? 'icon-chevron-left' : 'icon-chevron-right';
        default: throw new Error("Invalid location: " + location);
    }
}
/**
 * @param {?} rect
 * @param {?} point
 * @return {?}
 */
function rectContainsPoint(rect, point) {
    return (point.x >= rect.left &&
        point.y >= rect.top &&
        point.x <= rect.right &&
        point.y <= rect.bottom);
}
// Is the item allowed in the given location?
/**
 * @param {?} item
 * @param {?} location
 * @return {?}
 */
function isItemAllowed(item, location) {
    if (typeof item.getAllowedLocations !== 'function') {
        return true;
    }
    return item.getAllowedLocations().includes(location);
}
//# sourceMappingURL=data:application/json;base64,