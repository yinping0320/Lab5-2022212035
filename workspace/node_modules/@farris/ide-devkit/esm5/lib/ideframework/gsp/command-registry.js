/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
// tslint:disable: forin
import { Emitter, Disposable, CompositeDisposable } from './event-kit';
// import { calculateSpecificity, validateSelector } from 'clear-cut';
// const _ = require('underscore-plus')
/** @type {?} */
var SequenceCount = 0;
// Public: Associates listener functions with commands in a
// context-sensitive way using CSS selectors. You can access a global instance of
// this class via `atom.commands`, and commands registered there will be
// presented in the command palette.
//
// The global command registry facilitates a style of event handling known as
// *event delegation* that was popularized by jQuery. Atom commands are expressed
// as custom DOM events that can be invoked on the currently focused element via
// a key binding or manually via the command palette. Rather than binding
// listeners for command events directly to DOM nodes, you instead register
// command event listeners globally on `atom.commands` and constrain them to
// specific kinds of elements with CSS selectors.
//
// Command names must follow the `namespace:action` pattern, where `namespace`
// will typically be the name of your package, and `action` describes the
// behavior of your command. If either part consists of multiple words, these
// must be separated by hyphens. E.g. `awesome-package:turn-it-up-to-eleven`.
// All words should be lowercased.
//
// As the event bubbles upward through the DOM, all registered event listeners
// with matching selectors are invoked in order of specificity. In the event of a
// specificity tie, the most recently registered listener is invoked first. This
// mirrors the "cascade" semantics of CSS. Event listeners are invoked in the
// context of the current DOM node, meaning `this` always points at
// `event.currentTarget`. As is normally the case with DOM events,
// `stopPropagation` and `stopImmediatePropagation` can be used to terminate the
// bubbling process and prevent invocation of additional listeners.
//
// ## Example
//
// Here is a command that inserts the current date in an editor:
//
// ```coffee
// atom.commands.add 'atom-text-editor',
//   'user:insert-date': (event) ->
//     editor = @getModel()
//     editor.insertText(new Date().toLocaleString())
// ```
var 
// Public: Associates listener functions with commands in a
// context-sensitive way using CSS selectors. You can access a global instance of
// this class via `atom.commands`, and commands registered there will be
// presented in the command palette.
//
// The global command registry facilitates a style of event handling known as
// *event delegation* that was popularized by jQuery. Atom commands are expressed
// as custom DOM events that can be invoked on the currently focused element via
// a key binding or manually via the command palette. Rather than binding
// listeners for command events directly to DOM nodes, you instead register
// command event listeners globally on `atom.commands` and constrain them to
// specific kinds of elements with CSS selectors.
//
// Command names must follow the `namespace:action` pattern, where `namespace`
// will typically be the name of your package, and `action` describes the
// behavior of your command. If either part consists of multiple words, these
// must be separated by hyphens. E.g. `awesome-package:turn-it-up-to-eleven`.
// All words should be lowercased.
//
// As the event bubbles upward through the DOM, all registered event listeners
// with matching selectors are invoked in order of specificity. In the event of a
// specificity tie, the most recently registered listener is invoked first. This
// mirrors the "cascade" semantics of CSS. Event listeners are invoked in the
// context of the current DOM node, meaning `this` always points at
// `event.currentTarget`. As is normally the case with DOM events,
// `stopPropagation` and `stopImmediatePropagation` can be used to terminate the
// bubbling process and prevent invocation of additional listeners.
//
// ## Example
//
// Here is a command that inserts the current date in an editor:
//
// ```coffee
// atom.commands.add 'atom-text-editor',
//   'user:insert-date': (event) ->
//     editor = @getModel()
//     editor.insertText(new Date().toLocaleString())
// ```
CommandRegistry = /** @class */ (function () {
    function CommandRegistry() {
        this.handleCommandEvent = this.handleCommandEvent.bind(this);
        this.rootNode = null;
        this.clear();
    }
    /**
     * @return {?}
     */
    CommandRegistry.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.registeredCommands = {};
        this.selectorBasedListenersByCommandName = {};
        this.inlineListenersByCommandName = {};
        this.emitter = new Emitter();
    };
    /**
     * @param {?} rootNode
     * @return {?}
     */
    CommandRegistry.prototype.attach = /**
     * @param {?} rootNode
     * @return {?}
     */
    function (rootNode) {
        this.rootNode = rootNode;
        for (var command in this.selectorBasedListenersByCommandName) {
            this.commandRegistered(command);
        }
        for (var command in this.inlineListenersByCommandName) {
            this.commandRegistered(command);
        }
    };
    /**
     * @return {?}
     */
    CommandRegistry.prototype.destroy = /**
     * @return {?}
     */
    function () {
        for (var commandName in this.registeredCommands) {
            this.rootNode.removeEventListener(commandName, this.handleCommandEvent, true);
        }
    };
    // Public: Add one or more command listeners associated with a selector.
    //
    // ## Arguments: Registering One Command
    //
    // * `target` A {String} containing a CSS selector or a DOM element. If you
    //   pass a selector, the command will be globally associated with all matching
    //   elements. The `,` combinator is not currently supported. If you pass a
    //   DOM element, the command will be associated with just that element.
    // * `commandName` A {String} containing the name of a command you want to
    //   handle such as `user:insert-date`.
    // * `listener` A listener which handles the event.  Either a {Function} to
    //   call when the given command is invoked on an element matching the
    //   selector, or an {Object} with a `didDispatch` property which is such a
    //   function.
    //
    //   The function (`listener` itself if it is a function, or the `didDispatch`
    //   method if `listener` is an object) will be called with `this` referencing
    //   the matching DOM node and the following argument:
    //     * `event`: A standard DOM event instance. Call `stopPropagation` or
    //       `stopImmediatePropagation` to terminate bubbling early.
    //
    //   Additionally, `listener` may have additional properties which are returned
    //   to those who query using `atom.commands.findCommands`, as well as several
    //   meaningful metadata properties:
    //     * `displayName`: Overrides any generated `displayName` that would
    //       otherwise be generated from the event name.
    //     * `description`: Used by consumers to display detailed information about
    //       the command.
    //     * `hiddenInCommandPalette`: If `true`, this command will not appear in
    //       the bundled command palette by default, but can still be shown with.
    //       the `Command Palette: Show Hidden Commands` command. This is a good
    //       option when you need to register large numbers of commands that don't
    //       make sense to be executed from the command palette. Please use this
    //       option conservatively, as it could reduce the discoverability of your
    //       package's commands.
    //
    // ## Arguments: Registering Multiple Commands
    //
    // * `target` A {String} containing a CSS selector or a DOM element. If you
    //   pass a selector, the commands will be globally associated with all
    //   matching elements. The `,` combinator is not currently supported.
    //   If you pass a DOM element, the command will be associated with just that
    //   element.
    // * `commands` An {Object} mapping command names like `user:insert-date` to
    //   listener {Function}s.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to remove the
    // added command handler(s).
    // Public: Add one or more command listeners associated with a selector.
    //
    // ## Arguments: Registering One Command
    //
    // * `target` A {String} containing a CSS selector or a DOM element. If you
    //   pass a selector, the command will be globally associated with all matching
    //   elements. The `,` combinator is not currently supported. If you pass a
    //   DOM element, the command will be associated with just that element.
    // * `commandName` A {String} containing the name of a command you want to
    //   handle such as `user:insert-date`.
    // * `listener` A listener which handles the event.  Either a {Function} to
    //   call when the given command is invoked on an element matching the
    //   selector, or an {Object} with a `didDispatch` property which is such a
    //   function.
    //
    //   The function (`listener` itself if it is a function, or the `didDispatch`
    //   method if `listener` is an object) will be called with `this` referencing
    //   the matching DOM node and the following argument:
    //     * `event`: A standard DOM event instance. Call `stopPropagation` or
    //       `stopImmediatePropagation` to terminate bubbling early.
    //
    //   Additionally, `listener` may have additional properties which are returned
    //   to those who query using `atom.commands.findCommands`, as well as several
    //   meaningful metadata properties:
    //     * `displayName`: Overrides any generated `displayName` that would
    //       otherwise be generated from the event name.
    //     * `description`: Used by consumers to display detailed information about
    //       the command.
    //     * `hiddenInCommandPalette`: If `true`, this command will not appear in
    //       the bundled command palette by default, but can still be shown with.
    //       the `Command Palette: Show Hidden Commands` command. This is a good
    //       option when you need to register large numbers of commands that don't
    //       make sense to be executed from the command palette. Please use this
    //       option conservatively, as it could reduce the discoverability of your
    //       package's commands.
    //
    // ## Arguments: Registering Multiple Commands
    //
    // * `target` A {String} containing a CSS selector or a DOM element. If you
    //   pass a selector, the commands will be globally associated with all
    //   matching elements. The `,` combinator is not currently supported.
    //   If you pass a DOM element, the command will be associated with just that
    //   element.
    // * `commands` An {Object} mapping command names like `user:insert-date` to
    //   listener {Function}s.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to remove the
    // added command handler(s).
    /**
     * @param {?} target
     * @param {?} commandName
     * @param {?} listener
     * @param {?=} throwOnInvalidSelector
     * @return {?}
     */
    CommandRegistry.prototype.add = 
    // Public: Add one or more command listeners associated with a selector.
    //
    // ## Arguments: Registering One Command
    //
    // * `target` A {String} containing a CSS selector or a DOM element. If you
    //   pass a selector, the command will be globally associated with all matching
    //   elements. The `,` combinator is not currently supported. If you pass a
    //   DOM element, the command will be associated with just that element.
    // * `commandName` A {String} containing the name of a command you want to
    //   handle such as `user:insert-date`.
    // * `listener` A listener which handles the event.  Either a {Function} to
    //   call when the given command is invoked on an element matching the
    //   selector, or an {Object} with a `didDispatch` property which is such a
    //   function.
    //
    //   The function (`listener` itself if it is a function, or the `didDispatch`
    //   method if `listener` is an object) will be called with `this` referencing
    //   the matching DOM node and the following argument:
    //     * `event`: A standard DOM event instance. Call `stopPropagation` or
    //       `stopImmediatePropagation` to terminate bubbling early.
    //
    //   Additionally, `listener` may have additional properties which are returned
    //   to those who query using `atom.commands.findCommands`, as well as several
    //   meaningful metadata properties:
    //     * `displayName`: Overrides any generated `displayName` that would
    //       otherwise be generated from the event name.
    //     * `description`: Used by consumers to display detailed information about
    //       the command.
    //     * `hiddenInCommandPalette`: If `true`, this command will not appear in
    //       the bundled command palette by default, but can still be shown with.
    //       the `Command Palette: Show Hidden Commands` command. This is a good
    //       option when you need to register large numbers of commands that don't
    //       make sense to be executed from the command palette. Please use this
    //       option conservatively, as it could reduce the discoverability of your
    //       package's commands.
    //
    // ## Arguments: Registering Multiple Commands
    //
    // * `target` A {String} containing a CSS selector or a DOM element. If you
    //   pass a selector, the commands will be globally associated with all
    //   matching elements. The `,` combinator is not currently supported.
    //   If you pass a DOM element, the command will be associated with just that
    //   element.
    // * `commands` An {Object} mapping command names like `user:insert-date` to
    //   listener {Function}s.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to remove the
    // added command handler(s).
    /**
     * @param {?} target
     * @param {?} commandName
     * @param {?} listener
     * @param {?=} throwOnInvalidSelector
     * @return {?}
     */
    function (target, commandName, listener, throwOnInvalidSelector) {
        if (throwOnInvalidSelector === void 0) { throwOnInvalidSelector = true; }
        if (typeof commandName === 'object') {
            /** @type {?} */
            var commands = commandName;
            throwOnInvalidSelector = listener;
            /** @type {?} */
            var disposable = new CompositeDisposable();
            for (commandName in commands) {
                listener = commands[commandName];
                disposable.add(this.add(target, commandName, listener, throwOnInvalidSelector));
            }
            return disposable;
        }
        if (listener == null) {
            throw new Error('Cannot register a command with a null listener.');
        }
        // type Listener = ((e: CustomEvent) => void) | {
        //   displayName?: string,
        //   description?: string,
        //   didDispatch(e: CustomEvent): void,
        // }
        if ((typeof listener !== 'function') && (typeof listener.didDispatch !== 'function')) {
            throw new Error('Listener must be a callback function or an object with a didDispatch method.');
        }
        if (typeof target === 'string') {
            if (throwOnInvalidSelector) {
                validateSelector(target);
            }
            return this.addSelectorBasedListener(target, commandName, listener);
        }
        else {
            return this.addInlineListener(target, commandName, listener);
        }
    };
    /**
     * @param {?} selector
     * @param {?} commandName
     * @param {?} listener
     * @return {?}
     */
    CommandRegistry.prototype.addSelectorBasedListener = /**
     * @param {?} selector
     * @param {?} commandName
     * @param {?} listener
     * @return {?}
     */
    function (selector, commandName, listener) {
        var _this = this;
        if (this.selectorBasedListenersByCommandName[commandName] == null) {
            this.selectorBasedListenersByCommandName[commandName] = [];
        }
        /** @type {?} */
        var listenersForCommand = this.selectorBasedListenersByCommandName[commandName];
        /** @type {?} */
        var selectorListener = new SelectorBasedListener(selector, commandName, listener);
        listenersForCommand.push(selectorListener);
        this.commandRegistered(commandName);
        return new Disposable(function () {
            listenersForCommand.splice(listenersForCommand.indexOf(selectorListener), 1);
            if (listenersForCommand.length === 0) {
                delete _this.selectorBasedListenersByCommandName[commandName];
            }
        });
    };
    /**
     * @param {?} element
     * @param {?} commandName
     * @param {?} listener
     * @return {?}
     */
    CommandRegistry.prototype.addInlineListener = /**
     * @param {?} element
     * @param {?} commandName
     * @param {?} listener
     * @return {?}
     */
    function (element, commandName, listener) {
        if (this.inlineListenersByCommandName[commandName] == null) {
            this.inlineListenersByCommandName[commandName] = new WeakMap();
        }
        /** @type {?} */
        var listenersForCommand = this.inlineListenersByCommandName[commandName];
        /** @type {?} */
        var listenersForElement = listenersForCommand.get(element);
        if (!listenersForElement) {
            listenersForElement = [];
            listenersForCommand.set(element, listenersForElement);
        }
        /** @type {?} */
        var inlineListener = new InlineListener(commandName, listener);
        listenersForElement.push(inlineListener);
        this.commandRegistered(commandName);
        return new Disposable(function () {
            listenersForElement.splice(listenersForElement.indexOf(inlineListener), 1);
            if (listenersForElement.length === 0) {
                listenersForCommand.delete(element);
            }
        });
    };
    // Public: Find all registered commands matching a query.
    //
    // * `params` An {Object} containing one or more of the following keys:
    //   * `target` A DOM node that is the hypothetical target of a given command.
    //
    // Returns an {Array} of `CommandDescriptor` {Object}s containing the following keys:
    //  * `name` The name of the command. For example, `user:insert-date`.
    //  * `displayName` The display name of the command. For example,
    //    `User: Insert Date`.
    // Additional metadata may also be present in the returned descriptor:
    //  * `description` a {String} describing the function of the command in more
    //    detail than the title
    //  * `tags` an {Array} of {String}s that describe keywords related to the
    //    command
    //  Any additional nonstandard metadata provided when the command was `add`ed
    //  may also be present in the returned descriptor.
    // Public: Find all registered commands matching a query.
    //
    // * `params` An {Object} containing one or more of the following keys:
    //   * `target` A DOM node that is the hypothetical target of a given command.
    //
    // Returns an {Array} of `CommandDescriptor` {Object}s containing the following keys:
    //  * `name` The name of the command. For example, `user:insert-date`.
    //  * `displayName` The display name of the command. For example,
    //    `User: Insert Date`.
    // Additional metadata may also be present in the returned descriptor:
    //  * `description` a {String} describing the function of the command in more
    //    detail than the title
    //  * `tags` an {Array} of {String}s that describe keywords related to the
    //    command
    //  Any additional nonstandard metadata provided when the command was `add`ed
    //  may also be present in the returned descriptor.
    /**
     * @param {?} __0
     * @return {?}
     */
    CommandRegistry.prototype.findCommands = 
    // Public: Find all registered commands matching a query.
    //
    // * `params` An {Object} containing one or more of the following keys:
    //   * `target` A DOM node that is the hypothetical target of a given command.
    //
    // Returns an {Array} of `CommandDescriptor` {Object}s containing the following keys:
    //  * `name` The name of the command. For example, `user:insert-date`.
    //  * `displayName` The display name of the command. For example,
    //    `User: Insert Date`.
    // Additional metadata may also be present in the returned descriptor:
    //  * `description` a {String} describing the function of the command in more
    //    detail than the title
    //  * `tags` an {Array} of {String}s that describe keywords related to the
    //    command
    //  Any additional nonstandard metadata provided when the command was `add`ed
    //  may also be present in the returned descriptor.
    /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var target = _a.target;
        var e_1, _b;
        /** @type {?} */
        var commandNames = new Set();
        /** @type {?} */
        var commands = [];
        /** @type {?} */
        var currentTarget = target;
        while (true) {
            /** @type {?} */
            var listeners = void 0;
            for (var name_1 in this.inlineListenersByCommandName) {
                listeners = this.inlineListenersByCommandName[name_1];
                if (listeners.has(currentTarget) && !commandNames.has(name_1)) {
                    commandNames.add(name_1);
                    /** @type {?} */
                    var targetListeners = listeners.get(currentTarget);
                    commands.push.apply(commands, tslib_1.__spread(targetListeners.map(function (listener) { return listener.descriptor; })));
                }
            }
            for (var commandName in this.selectorBasedListenersByCommandName) {
                listeners = this.selectorBasedListenersByCommandName[commandName];
                try {
                    for (var listeners_1 = tslib_1.__values(listeners), listeners_1_1 = listeners_1.next(); !listeners_1_1.done; listeners_1_1 = listeners_1.next()) {
                        var listener = listeners_1_1.value;
                        if (listener.matchesTarget(currentTarget)) {
                            if (!commandNames.has(commandName)) {
                                commandNames.add(commandName);
                                commands.push(listener.descriptor);
                            }
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (listeners_1_1 && !listeners_1_1.done && (_b = listeners_1.return)) _b.call(listeners_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            if (currentTarget === window) {
                break;
            }
            currentTarget = currentTarget.parentNode || window;
        }
        return commands;
    };
    // Public: Simulate the dispatch of a command on a DOM node.
    //
    // This can be useful for testing when you want to simulate the invocation of a
    // command on a detached DOM node. Otherwise, the DOM node in question needs to
    // be attached to the document so the event bubbles up to the root node to be
    // processed.
    //
    // * `target` The DOM node at which to start bubbling the command event.
    // * `commandName` {String} indicating the name of the command to dispatch.
    // Public: Simulate the dispatch of a command on a DOM node.
    //
    // This can be useful for testing when you want to simulate the invocation of a
    // command on a detached DOM node. Otherwise, the DOM node in question needs to
    // be attached to the document so the event bubbles up to the root node to be
    // processed.
    //
    // * `target` The DOM node at which to start bubbling the command event.
    // * `commandName` {String} indicating the name of the command to dispatch.
    /**
     * @param {?} target
     * @param {?} commandName
     * @param {?} detail
     * @return {?}
     */
    CommandRegistry.prototype.dispatch = 
    // Public: Simulate the dispatch of a command on a DOM node.
    //
    // This can be useful for testing when you want to simulate the invocation of a
    // command on a detached DOM node. Otherwise, the DOM node in question needs to
    // be attached to the document so the event bubbles up to the root node to be
    // processed.
    //
    // * `target` The DOM node at which to start bubbling the command event.
    // * `commandName` {String} indicating the name of the command to dispatch.
    /**
     * @param {?} target
     * @param {?} commandName
     * @param {?} detail
     * @return {?}
     */
    function (target, commandName, detail) {
        /** @type {?} */
        var event = new CustomEvent(commandName, { bubbles: true, detail: detail });
        Object.defineProperty(event, 'target', { value: target });
        return this.handleCommandEvent(event);
    };
    // Public: Invoke the given callback before dispatching a command event.
    //
    // * `callback` {Function} to be called before dispatching each command
    //   * `event` The Event that will be dispatched
    // Public: Invoke the given callback before dispatching a command event.
    //
    // * `callback` {Function} to be called before dispatching each command
    //   * `event` The Event that will be dispatched
    /**
     * @param {?} callback
     * @return {?}
     */
    CommandRegistry.prototype.onWillDispatch = 
    // Public: Invoke the given callback before dispatching a command event.
    //
    // * `callback` {Function} to be called before dispatching each command
    //   * `event` The Event that will be dispatched
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.emitter.on('will-dispatch', callback);
    };
    // Public: Invoke the given callback after dispatching a command event.
    //
    // * `callback` {Function} to be called after dispatching each command
    //   * `event` The Event that was dispatched
    // Public: Invoke the given callback after dispatching a command event.
    //
    // * `callback` {Function} to be called after dispatching each command
    //   * `event` The Event that was dispatched
    /**
     * @param {?} callback
     * @return {?}
     */
    CommandRegistry.prototype.onDidDispatch = 
    // Public: Invoke the given callback after dispatching a command event.
    //
    // * `callback` {Function} to be called after dispatching each command
    //   * `event` The Event that was dispatched
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.emitter.on('did-dispatch', callback);
    };
    /**
     * @return {?}
     */
    CommandRegistry.prototype.getSnapshot = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var snapshot = {};
        for (var commandName in this.selectorBasedListenersByCommandName) {
            /** @type {?} */
            var listeners = this.selectorBasedListenersByCommandName[commandName];
            snapshot[commandName] = listeners.slice();
        }
        return snapshot;
    };
    /**
     * @param {?} snapshot
     * @return {?}
     */
    CommandRegistry.prototype.restoreSnapshot = /**
     * @param {?} snapshot
     * @return {?}
     */
    function (snapshot) {
        this.selectorBasedListenersByCommandName = {};
        for (var commandName in snapshot) {
            /** @type {?} */
            var listeners = snapshot[commandName];
            this.selectorBasedListenersByCommandName[commandName] = listeners.slice();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CommandRegistry.prototype.handleCommandEvent = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var e_2, _a;
        /** @type {?} */
        var propagationStopped = false;
        /** @type {?} */
        var immediatePropagationStopped = false;
        /** @type {?} */
        var matched = [];
        /** @type {?} */
        var currentTarget = event.target;
        /** @type {?} */
        var dispatchedEvent = new CustomEvent(event.type, {
            bubbles: true,
            detail: event.detail
        });
        Object.defineProperty(dispatchedEvent, 'eventPhase', {
            value: Event.BUBBLING_PHASE
        });
        Object.defineProperty(dispatchedEvent, 'currentTarget', {
            get: /**
             * @return {?}
             */
            function () {
                return currentTarget;
            }
        });
        Object.defineProperty(dispatchedEvent, 'target', { value: currentTarget });
        Object.defineProperty(dispatchedEvent, 'preventDefault', {
            value: /**
             * @return {?}
             */
            function () {
                return event.preventDefault();
            }
        });
        Object.defineProperty(dispatchedEvent, 'stopPropagation', {
            value: /**
             * @return {?}
             */
            function () {
                event.stopPropagation();
                propagationStopped = true;
            }
        });
        Object.defineProperty(dispatchedEvent, 'stopImmediatePropagation', {
            value: /**
             * @return {?}
             */
            function () {
                event.stopImmediatePropagation();
                propagationStopped = true;
                immediatePropagationStopped = true;
            }
        });
        Object.defineProperty(dispatchedEvent, 'abortKeyBinding', {
            value: /**
             * @return {?}
             */
            function () {
                if (typeof event.abortKeyBinding === 'function') {
                    event.abortKeyBinding();
                }
            }
        });
        try {
            for (var _b = tslib_1.__values(Object.keys(event)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var key = _c.value;
                if (!(key in dispatchedEvent)) {
                    dispatchedEvent[key] = event[key];
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        this.emitter.emit('will-dispatch', dispatchedEvent);
        while (true) {
            /** @type {?} */
            var commandInlineListeners = this.inlineListenersByCommandName[event.type]
                ? this.inlineListenersByCommandName[event.type].get(currentTarget)
                : null;
            /** @type {?} */
            var listeners = commandInlineListeners || [];
            if (currentTarget.webkitMatchesSelector != null) {
                /** @type {?} */
                var selectorBasedListeners = (this.selectorBasedListenersByCommandName[event.type] || [])
                    .filter(function (listener) { return listener.matchesTarget(currentTarget); })
                    .sort(function (a, b) { return a.compare(b); });
                listeners = selectorBasedListeners.concat(listeners);
            }
            // Call inline listeners first in reverse registration order,
            // and selector-based listeners by specificity and reverse
            // registration order.
            for (var i = listeners.length - 1; i >= 0; i--) {
                /** @type {?} */
                var listener = listeners[i];
                if (immediatePropagationStopped) {
                    break;
                }
                matched.push(listener.didDispatch.call(currentTarget, dispatchedEvent));
            }
            if (currentTarget === window) {
                break;
            }
            if (propagationStopped) {
                break;
            }
            currentTarget = currentTarget.parentNode || window;
        }
        this.emitter.emit('did-dispatch', dispatchedEvent);
        return (matched.length > 0 ? Promise.all(matched) : null);
    };
    /**
     * @param {?} commandName
     * @return {?}
     */
    CommandRegistry.prototype.commandRegistered = /**
     * @param {?} commandName
     * @return {?}
     */
    function (commandName) {
        if (this.rootNode != null && !this.registeredCommands[commandName]) {
            this.rootNode.addEventListener(commandName, this.handleCommandEvent, true);
            return (this.registeredCommands[commandName] = true);
        }
    };
    return CommandRegistry;
}());
// Public: Associates listener functions with commands in a
// context-sensitive way using CSS selectors. You can access a global instance of
// this class via `atom.commands`, and commands registered there will be
// presented in the command palette.
//
// The global command registry facilitates a style of event handling known as
// *event delegation* that was popularized by jQuery. Atom commands are expressed
// as custom DOM events that can be invoked on the currently focused element via
// a key binding or manually via the command palette. Rather than binding
// listeners for command events directly to DOM nodes, you instead register
// command event listeners globally on `atom.commands` and constrain them to
// specific kinds of elements with CSS selectors.
//
// Command names must follow the `namespace:action` pattern, where `namespace`
// will typically be the name of your package, and `action` describes the
// behavior of your command. If either part consists of multiple words, these
// must be separated by hyphens. E.g. `awesome-package:turn-it-up-to-eleven`.
// All words should be lowercased.
//
// As the event bubbles upward through the DOM, all registered event listeners
// with matching selectors are invoked in order of specificity. In the event of a
// specificity tie, the most recently registered listener is invoked first. This
// mirrors the "cascade" semantics of CSS. Event listeners are invoked in the
// context of the current DOM node, meaning `this` always points at
// `event.currentTarget`. As is normally the case with DOM events,
// `stopPropagation` and `stopImmediatePropagation` can be used to terminate the
// bubbling process and prevent invocation of additional listeners.
//
// ## Example
//
// Here is a command that inserts the current date in an editor:
//
// ```coffee
// atom.commands.add 'atom-text-editor',
//   'user:insert-date': (event) ->
//     editor = @getModel()
//     editor.insertText(new Date().toLocaleString())
// ```
export { CommandRegistry };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CommandRegistry.prototype.rootNode;
    /**
     * @type {?}
     * @private
     */
    CommandRegistry.prototype.registeredCommands;
    /**
     * @type {?}
     * @private
     */
    CommandRegistry.prototype.selectorBasedListenersByCommandName;
    /**
     * @type {?}
     * @private
     */
    CommandRegistry.prototype.inlineListenersByCommandName;
    /**
     * @type {?}
     * @private
     */
    CommandRegistry.prototype.emitter;
}
// type Listener = {
//   descriptor: CommandDescriptor,
//   extractDidDispatch: (e: CustomEvent) => void,
// };
var 
// type Listener = {
//   descriptor: CommandDescriptor,
//   extractDidDispatch: (e: CustomEvent) => void,
// };
SelectorBasedListener = /** @class */ (function () {
    function SelectorBasedListener(selector, commandName, listener) {
        this.selector = selector;
        this.didDispatch = extractDidDispatch(listener);
        this.descriptor = extractDescriptor(commandName, listener);
        this.specificity = calculateSpecificity(this.selector);
        this.sequenceNumber = SequenceCount++;
    }
    /**
     * @param {?} other
     * @return {?}
     */
    SelectorBasedListener.prototype.compare = /**
     * @param {?} other
     * @return {?}
     */
    function (other) {
        return (this.specificity - other.specificity ||
            this.sequenceNumber - other.sequenceNumber);
    };
    /**
     * @param {?} target
     * @return {?}
     */
    SelectorBasedListener.prototype.matchesTarget = /**
     * @param {?} target
     * @return {?}
     */
    function (target) {
        return target.webkitMatchesSelector && target.webkitMatchesSelector(this.selector);
    };
    return SelectorBasedListener;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    SelectorBasedListener.prototype.selector;
    /**
     * @type {?}
     * @private
     */
    SelectorBasedListener.prototype.didDispatch;
    /**
     * @type {?}
     * @private
     */
    SelectorBasedListener.prototype.descriptor;
    /**
     * @type {?}
     * @private
     */
    SelectorBasedListener.prototype.specificity;
    /**
     * @type {?}
     * @private
     */
    SelectorBasedListener.prototype.sequenceNumber;
}
var InlineListener = /** @class */ (function () {
    function InlineListener(commandName, listener) {
        this.didDispatch = extractDidDispatch(listener);
        this.descriptor = extractDescriptor(commandName, listener);
    }
    return InlineListener;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    InlineListener.prototype.didDispatch;
    /**
     * @type {?}
     * @private
     */
    InlineListener.prototype.descriptor;
}
// type CommandDescriptor = {
//   name: string,
//   displayName: string,
// };
/**
 * @param {?} name
 * @param {?} listener
 * @return {?}
 */
function extractDescriptor(name, listener) {
    return Object.assign(omit(listener, 'didDispatch'), {
        name: name,
        displayName: listener.displayName ? listener.displayName : humanizeEventName(name)
    });
}
/**
 * @param {?} listener
 * @return {?}
 */
function extractDidDispatch(listener) {
    return typeof listener === 'function' ? listener : listener.didDispatch;
}
/**
 * @param {?} selector
 * @return {?}
 */
function validateSelector(selector) {
    if (!isSelectorValid(selector)) {
        /** @type {?} */
        var error = new SyntaxError(selector + ' is not a valid selector');
        // error.code = 'EBADSELECTOR';
        throw error;
    }
}
/**
 * @param {?} selector
 * @return {?}
 */
function isSelectorValid(selector) {
    /** @type {?} */
    var valid;
    try {
        document.querySelector(selector);
        valid = true;
    }
    catch (error) {
        valid = false;
    }
    return valid;
}
/**
 * @param {?} selector
 * @return {?}
 */
function calculateSpecificity(selector) {
    /** @type {?} */
    var specificity = calculate(selector);
    return specificity;
}
/**
 * @param {?} selector
 * @return {?}
 */
function calculate(selector) {
    /** @type {?} */
    var commaIndex = selector.indexOf(',');
    if (commaIndex !== -1) {
        selector = selector.substring(0, commaIndex);
    }
    /** @type {?} */
    var types = {
        a: 0,
        b: 0,
        c: 0
    };
    // The following regular expressions assume that selectors matching the preceding regular expressions have been removed
    /** @type {?} */
    var attributeRegex = /(\[[^\]]+\])/g;
    /** @type {?} */
    var idRegex = /(#[^\s\+>~\.\[:]+)/g;
    /** @type {?} */
    var classRegex = /(\.[^\s\+>~\.\[:]+)/g;
    /** @type {?} */
    var pseudoElementRegex = /(::[^\s\+>~\.\[:]+|:first-line|:first-letter|:before|:after)/g;
    /** @type {?} */
    var pseudoClassRegex = /(:[^\s\+>~\.\[:]+)/g;
    /** @type {?} */
    var elementRegex = /([^\s\+>~\.\[:]+)/g;
    /** @type {?} */
    var notRegex = /:not\(([^\)]*)\)/g;
    /** @type {?} */
    var ruleRegex = /\{[^]*/gm;
    /** @type {?} */
    var separatorRegex = /[\*\s\+>~]/g;
    /** @type {?} */
    var straysRegex = /[#\.]/g;
    // Remove the negation psuedo-class (:not) but leave its argument because specificity is calculated on its argument
    selector = selector.replace(notRegex, ' $1 ');
    // Remove anything after a left brace in case a user has pasted in a rule, not just a selector
    selector = selector.replace(ruleRegex, ' ');
    // Add attribute selectors to parts collection (type b)
    selector = findMatch(attributeRegex, 'b', types, selector);
    // Add ID selectors to parts collection (type a)
    selector = findMatch(idRegex, 'a', types, selector);
    // Add class selectors to parts collection (type b)
    selector = findMatch(classRegex, 'b', types, selector);
    // Add pseudo-element selectors to parts collection (type c)
    selector = findMatch(pseudoElementRegex, 'c', types, selector);
    // Add pseudo-class selectors to parts collection (type b)
    selector = findMatch(pseudoClassRegex, 'b', types, selector);
    // Remove universal selector and separator characters
    selector = selector.replace(separatorRegex, ' ');
    // Remove any stray dots or hashes which aren't attached to words
    // These may be present if the user is live-editing this selector
    selector = selector.replace(straysRegex, ' ');
    // The only things left should be element selectors (type c)
    findMatch(elementRegex, 'c', types, selector);
    return (types.a * 100) + (types.b * 10) + (types.c * 1);
}
/**
 * @param {?} regex
 * @param {?} type
 * @param {?} types
 * @param {?} selector
 * @return {?}
 */
function findMatch(regex, type, types, selector) {
    var e_3, _a;
    /** @type {?} */
    var matches = selector.match(regex);
    if (matches) {
        try {
            for (var matches_1 = tslib_1.__values(matches), matches_1_1 = matches_1.next(); !matches_1_1.done; matches_1_1 = matches_1.next()) {
                var match = matches_1_1.value;
                types[type]++;
                // Replace this simple selector with whitespace so it won't be counted in further simple selectors
                selector = selector.replace(match, ' ');
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (matches_1_1 && !matches_1_1.done && (_a = matches_1.return)) _a.call(matches_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
    }
    return selector;
}
/**
 * @param {?} obj
 * @param {...?} props
 * @return {?}
 */
function omit(obj) {
    // const iteratee = (value, key) => !props.find(key);
    var props = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        props[_i - 1] = arguments[_i];
    }
    // const iteratee = (value, key) => !props.find(key);
    /** @type {?} */
    var result = {};
    if (!obj) {
        return result;
    }
    Object.keys(obj).forEach(function (key) {
        if (!props.find(function (prop) { return prop === key; })) {
            return;
        }
        result[key] = obj[key];
    });
    return result;
}
/**
 * @param {?} eventName
 * @param {?=} eventDoc
 * @return {?}
 */
function humanizeEventName(eventName, eventDoc) {
    if (eventDoc === void 0) { eventDoc = null; }
    /** @type {?} */
    var ref = eventName.split(':');
    var _a = tslib_1.__read(ref, 2), namespace = _a[0], event = _a[1];
    if (event == null) {
        return undash(namespace);
    }
    /** @type {?} */
    var namespaceDoc = undash(namespace);
    if (eventDoc == null) {
        eventDoc = undash(event);
    }
    return '' + namespaceDoc + ': ' + eventDoc;
}
/**
 * @param {?} str
 * @return {?}
 */
function undash(str) {
    if (str) {
        return str.split('-').join(' ');
    }
    else {
        return '';
    }
}
//# sourceMappingURL=data:application/json;base64,