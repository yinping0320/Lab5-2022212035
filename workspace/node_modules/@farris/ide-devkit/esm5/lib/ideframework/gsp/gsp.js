/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CacheService } from './../../services/cache/services/cache.service';
import { CommandRegistry } from './command-registry';
import { Util } from '../util/util';
import { ViewRegistry } from './view-registry';
import { Workspace } from './workspace';
import { GspEventBus } from './gsp-event-bus';
import { Ide } from './ide/ide';
var GSP = /** @class */ (function () {
    function GSP(parent) {
        this.pConfig = {
            get: /**
             * @param {?} key
             * @return {?}
             */
            function (key) {
                return this[key];
            }
        };
        /** @type {?} */
        var ide;
        if (parent) {
            this.pViews = parent.views;
            this.pCommands = parent.commands;
            this.pEventBus = parent.eventBus;
            this.pUtil = parent.util;
            this.pWorkspace = parent.workspace;
            this.pCache = parent.cache;
            ide = parent.ide;
            /** @type {?} */
            var ctor = parent.context.constructor;
            this.pContext = new ctor();
        }
        else {
            this.pViews = new ViewRegistry(this);
            this.pCommands = new CommandRegistry();
            this.pEventBus = new GspEventBus();
            this.pUtil = new Util();
            this.pWorkspace = new Workspace({
                config: this.pConfig,
                viewRegistry: this.pViews
            });
            this.pCache = new CacheService(null);
        }
        this.pIde = new Ide(ide);
    }
    Object.defineProperty(GSP.prototype, "eventBus", {
        get: /**
         * @return {?}
         */
        function () { return this.pEventBus; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GSP.prototype, "util", {
        get: /**
         * @return {?}
         */
        function () { return this.pUtil; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GSP.prototype, "workspace", {
        get: /**
         * @return {?}
         */
        function () { return this.pWorkspace; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GSP.prototype, "views", {
        get: /**
         * @return {?}
         */
        function () { return this.pViews; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GSP.prototype, "commands", {
        get: /**
         * @return {?}
         */
        function () { return this.pCommands; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GSP.prototype, "ide", {
        get: /**
         * @return {?}
         */
        function () { return this.pIde; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GSP.prototype, "cache", {
        get: /**
         * @return {?}
         */
        function () { return this.pCache; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GSP.prototype, "context", {
        get: /**
         * @return {?}
         */
        function () { return this.pContext; },
        enumerable: true,
        configurable: true
    });
    /**
     * @deprecated 由子模块独自创建gsp实例，传入父实例作为参数。
     * 每个iframe持有一个独有的gsp实例，其中eventbus共享，ide不共享
     */
    /**
     * @deprecated 由子模块独自创建gsp实例，传入父实例作为参数。
     * 每个iframe持有一个独有的gsp实例，其中eventbus共享，ide不共享
     * @return {?}
     */
    GSP.prototype.createChild = /**
     * @deprecated 由子模块独自创建gsp实例，传入父实例作为参数。
     * 每个iframe持有一个独有的gsp实例，其中eventbus共享，ide不共享
     * @return {?}
     */
    function () {
        /** @type {?} */
        var child = new GSP(this);
        // child.pEventBus = this.pEventBus;
        // child.pViews = this.pViews;
        // child.pWorkspace = this.pWorkspace;
        return child;
    };
    return GSP;
}());
export { GSP };
if (false) {
    /**
     * @type {?}
     * @private
     */
    GSP.prototype.pEventBus;
    /**
     * @type {?}
     * @private
     */
    GSP.prototype.pUtil;
    /**
     * @type {?}
     * @private
     */
    GSP.prototype.pWorkspace;
    /**
     * @type {?}
     * @private
     */
    GSP.prototype.pConfig;
    /**
     * @type {?}
     * @private
     */
    GSP.prototype.pViews;
    /**
     * @type {?}
     * @private
     */
    GSP.prototype.pCommands;
    /**
     * @type {?}
     * @private
     */
    GSP.prototype.pIde;
    /**
     * @type {?}
     * @private
     */
    GSP.prototype.pCache;
    /**
     * @type {?}
     * @private
     */
    GSP.prototype.pContext;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3NwLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9pZGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2lkZWZyYW1ld29yay9nc3AvZ3NwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sK0NBQStDLENBQUM7QUFDN0UsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRXJELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDcEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDeEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFHaEM7SUFvQkUsYUFBWSxNQUFZO1FBQ3RCLElBQUksQ0FBQyxPQUFPLEdBQUc7WUFDYixHQUFHOzs7O3NCQUFDLEdBQUc7Z0JBQ0wsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDbkIsQ0FBQztTQUNGLENBQUM7O1lBQ0UsR0FBUTtRQUNaLElBQUksTUFBTSxFQUFFO1lBQ1YsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDO1lBQzNCLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQztZQUNqQyxJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUM7WUFDakMsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ3pCLElBQUksQ0FBQyxVQUFVLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQztZQUNuQyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7WUFDM0IsR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUM7O2dCQUNYLElBQUksR0FBUSxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVc7WUFDNUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1NBQzVCO2FBQU07WUFDTCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxlQUFlLEVBQUUsQ0FBQztZQUN2QyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7WUFDbkMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1lBQ3hCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxTQUFTLENBQUM7Z0JBQzlCLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTztnQkFDcEIsWUFBWSxFQUFFLElBQUksQ0FBQyxNQUFNO2FBQzFCLENBQUMsQ0FBQztZQUNILElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDdEM7UUFDRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUF0Q0Qsc0JBQUkseUJBQVE7Ozs7UUFBWixjQUEyQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDOzs7T0FBQTtJQUNuRCxzQkFBSSxxQkFBSTs7OztRQUFSLGNBQW1CLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7OztPQUFBO0lBQ3ZDLHNCQUFJLDBCQUFTOzs7O1FBQWIsY0FBNkIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQzs7O09BQUE7SUFDdEQsc0JBQUksc0JBQUs7Ozs7UUFBVCxjQUE0QixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDOzs7T0FBQTtJQUNqRCxzQkFBSSx5QkFBUTs7OztRQUFaLGNBQWtDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7OztPQUFBO0lBQzFELHNCQUFJLG9CQUFHOzs7O1FBQVAsY0FBaUIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzs7O09BQUE7SUFDcEMsc0JBQUksc0JBQUs7Ozs7UUFBVCxjQUE0QixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDOzs7T0FBQTtJQUNqRCxzQkFBSSx3QkFBTzs7OztRQUFYLGNBQWdDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7OztPQUFBO0lBaUN2RDs7O09BR0c7Ozs7OztJQUNILHlCQUFXOzs7OztJQUFYOztZQUNRLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUM7UUFDM0Isb0NBQW9DO1FBQ3BDLDhCQUE4QjtRQUM5QixzQ0FBc0M7UUFDdEMsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBQ0gsVUFBQztBQUFELENBQUMsQUE5REQsSUE4REM7Ozs7Ozs7SUE3REMsd0JBQTRCOzs7OztJQUM1QixvQkFBb0I7Ozs7O0lBQ3BCLHlCQUE4Qjs7Ozs7SUFDOUIsc0JBQXFCOzs7OztJQUNyQixxQkFBNkI7Ozs7O0lBQzdCLHdCQUFtQzs7Ozs7SUFDbkMsbUJBQWtCOzs7OztJQUNsQixxQkFBNkI7Ozs7O0lBQzdCLHVCQUFpQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENhY2hlU2VydmljZSB9IGZyb20gJy4vLi4vLi4vc2VydmljZXMvY2FjaGUvc2VydmljZXMvY2FjaGUuc2VydmljZSc7XHJcbmltcG9ydCB7IENvbW1hbmRSZWdpc3RyeSB9IGZyb20gJy4vY29tbWFuZC1yZWdpc3RyeSc7XHJcbmltcG9ydCB7IEV2ZW50QnVzIH0gZnJvbSAnLi4vZXZlbnRidXMvZXZlbnQtYnVzJztcclxuaW1wb3J0IHsgVXRpbCB9IGZyb20gJy4uL3V0aWwvdXRpbCc7XHJcbmltcG9ydCB7IFZpZXdSZWdpc3RyeSB9IGZyb20gJy4vdmlldy1yZWdpc3RyeSc7XHJcbmltcG9ydCB7IFdvcmtzcGFjZSB9IGZyb20gJy4vd29ya3NwYWNlJztcclxuaW1wb3J0IHsgR3NwRXZlbnRCdXMgfSBmcm9tICcuL2dzcC1ldmVudC1idXMnO1xyXG5pbXBvcnQgeyBJZGUgfSBmcm9tICcuL2lkZS9pZGUnO1xyXG5pbXBvcnQgeyBDb250ZXh0TWFuYWdlciB9IGZyb20gJy4vY29udGV4dC9jb250ZXh0JztcclxuXHJcbmV4cG9ydCBjbGFzcyBHU1Age1xyXG4gIHByaXZhdGUgcEV2ZW50QnVzOiBFdmVudEJ1cztcclxuICBwcml2YXRlIHBVdGlsOiBVdGlsO1xyXG4gIHByaXZhdGUgcFdvcmtzcGFjZTogV29ya3NwYWNlO1xyXG4gIHByaXZhdGUgcENvbmZpZzogYW55O1xyXG4gIHByaXZhdGUgcFZpZXdzOiBWaWV3UmVnaXN0cnk7XHJcbiAgcHJpdmF0ZSBwQ29tbWFuZHM6IENvbW1hbmRSZWdpc3RyeTtcclxuICBwcml2YXRlIHBJZGU6IElkZTtcclxuICBwcml2YXRlIHBDYWNoZTogQ2FjaGVTZXJ2aWNlO1xyXG4gIHByaXZhdGUgcENvbnRleHQ6IENvbnRleHRNYW5hZ2VyO1xyXG5cclxuICBnZXQgZXZlbnRCdXMoKTogRXZlbnRCdXMgeyByZXR1cm4gdGhpcy5wRXZlbnRCdXM7IH1cclxuICBnZXQgdXRpbCgpOiBVdGlsIHsgcmV0dXJuIHRoaXMucFV0aWw7IH1cclxuICBnZXQgd29ya3NwYWNlKCk6IFdvcmtzcGFjZSB7IHJldHVybiB0aGlzLnBXb3Jrc3BhY2U7IH1cclxuICBnZXQgdmlld3MoKTogVmlld1JlZ2lzdHJ5IHsgcmV0dXJuIHRoaXMucFZpZXdzOyB9XHJcbiAgZ2V0IGNvbW1hbmRzKCk6IENvbW1hbmRSZWdpc3RyeSB7IHJldHVybiB0aGlzLnBDb21tYW5kczsgfVxyXG4gIGdldCBpZGUoKTogSWRlIHsgcmV0dXJuIHRoaXMucElkZTsgfVxyXG4gIGdldCBjYWNoZSgpOiBDYWNoZVNlcnZpY2UgeyByZXR1cm4gdGhpcy5wQ2FjaGU7IH1cclxuICBnZXQgY29udGV4dCgpOiBDb250ZXh0TWFuYWdlciB7IHJldHVybiB0aGlzLnBDb250ZXh0OyB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHBhcmVudD86IEdTUCkge1xyXG4gICAgdGhpcy5wQ29uZmlnID0ge1xyXG4gICAgICBnZXQoa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXNba2V5XTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIGxldCBpZGU6IElkZTtcclxuICAgIGlmIChwYXJlbnQpIHtcclxuICAgICAgdGhpcy5wVmlld3MgPSBwYXJlbnQudmlld3M7XHJcbiAgICAgIHRoaXMucENvbW1hbmRzID0gcGFyZW50LmNvbW1hbmRzO1xyXG4gICAgICB0aGlzLnBFdmVudEJ1cyA9IHBhcmVudC5ldmVudEJ1cztcclxuICAgICAgdGhpcy5wVXRpbCA9IHBhcmVudC51dGlsO1xyXG4gICAgICB0aGlzLnBXb3Jrc3BhY2UgPSBwYXJlbnQud29ya3NwYWNlO1xyXG4gICAgICB0aGlzLnBDYWNoZSA9IHBhcmVudC5jYWNoZTtcclxuICAgICAgaWRlID0gcGFyZW50LmlkZTtcclxuICAgICAgY29uc3QgY3RvcjogYW55ID0gcGFyZW50LmNvbnRleHQuY29uc3RydWN0b3I7XHJcbiAgICAgIHRoaXMucENvbnRleHQgPSBuZXcgY3RvcigpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5wVmlld3MgPSBuZXcgVmlld1JlZ2lzdHJ5KHRoaXMpO1xyXG4gICAgICB0aGlzLnBDb21tYW5kcyA9IG5ldyBDb21tYW5kUmVnaXN0cnkoKTtcclxuICAgICAgdGhpcy5wRXZlbnRCdXMgPSBuZXcgR3NwRXZlbnRCdXMoKTtcclxuICAgICAgdGhpcy5wVXRpbCA9IG5ldyBVdGlsKCk7XHJcbiAgICAgIHRoaXMucFdvcmtzcGFjZSA9IG5ldyBXb3Jrc3BhY2Uoe1xyXG4gICAgICAgIGNvbmZpZzogdGhpcy5wQ29uZmlnLFxyXG4gICAgICAgIHZpZXdSZWdpc3RyeTogdGhpcy5wVmlld3NcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMucENhY2hlID0gbmV3IENhY2hlU2VydmljZShudWxsKTtcclxuICAgIH1cclxuICAgIHRoaXMucElkZSA9IG5ldyBJZGUoaWRlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBkZXByZWNhdGVkIOeUseWtkOaooeWdl+eLrOiHquWIm+W7umdzcOWunuS+i++8jOS8oOWFpeeItuWunuS+i+S9nOS4uuWPguaVsOOAglxyXG4gICAqIOavj+S4qmlmcmFtZeaMgeacieS4gOS4queLrOacieeahGdzcOWunuS+i++8jOWFtuS4rWV2ZW50YnVz5YWx5Lqr77yMaWRl5LiN5YWx5LqrXHJcbiAgICovXHJcbiAgY3JlYXRlQ2hpbGQoKSB7XHJcbiAgICBjb25zdCBjaGlsZCA9IG5ldyBHU1AodGhpcyk7XHJcbiAgICAvLyBjaGlsZC5wRXZlbnRCdXMgPSB0aGlzLnBFdmVudEJ1cztcclxuICAgIC8vIGNoaWxkLnBWaWV3cyA9IHRoaXMucFZpZXdzO1xyXG4gICAgLy8gY2hpbGQucFdvcmtzcGFjZSA9IHRoaXMucFdvcmtzcGFjZTtcclxuICAgIHJldHVybiBjaGlsZDtcclxuICB9XHJcbn1cclxuIl19