/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Pane } from './pane';
import { ItemRegistry } from './item-registry';
/** @type {?} */
var SERIALIZATION_VERSION = 1;
var PaneContainer = /** @class */ (function () {
    function PaneContainer(params) {
        /** @type {?} */
        var applicationDelegate;
        /** @type {?} */
        var deserializerManager;
        /** @type {?} */
        var notificationManager;
        (this.config = params.config, applicationDelegate = params.applicationDelegate, notificationManager = params.notificationManager, deserializerManager = params.deserializerManager, this.viewRegistry = params.viewRegistry, this.location = params.location);
        this.itemRegistry = new ItemRegistry();
        this.alive = true;
        this.setRoot(new Pane({
            container: this,
            config: this.config,
            applicationDelegate: applicationDelegate,
            notificationManager: notificationManager,
            deserializerManager: deserializerManager,
            viewRegistry: this.viewRegistry
        }));
        this.didActivatePane(this.getRoot());
    }
    /**
     * @return {?}
     */
    PaneContainer.prototype.getLocation = /**
     * @return {?}
     */
    function () { return this.location; };
    /**
     * @return {?}
     */
    PaneContainer.prototype.getElement = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    PaneContainer.prototype.destroy = /**
     * @return {?}
     */
    function () {
        var e_1, _a;
        this.alive = false;
        try {
            for (var _b = tslib_1.__values(this.getRoot().getPanes()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var pane = _c.value;
                pane.destroy();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * @return {?}
     */
    PaneContainer.prototype.isAlive = /**
     * @return {?}
     */
    function () { return this.alive; };
    /**
     * @return {?}
     */
    PaneContainer.prototype.isDestroyed = /**
     * @return {?}
     */
    function () { return !this.isAlive(); };
    /**
     * @param {...?} params
     * @return {?}
     */
    PaneContainer.prototype.serialize = /**
     * @param {...?} params
     * @return {?}
     */
    function () {
        var params = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            params[_i] = arguments[_i];
        }
        return {
            deserializer: 'PaneContainer',
            version: SERIALIZATION_VERSION,
            root: this.root ? this.root.serialize() : null,
            activePaneId: this.activePane.id
        };
    };
    /**
     * @param {?} state
     * @param {?} deserializerManager
     * @return {?}
     */
    PaneContainer.prototype.deserialize = /**
     * @param {?} state
     * @param {?} deserializerManager
     * @return {?}
     */
    function (state, deserializerManager) {
        if (state.version !== SERIALIZATION_VERSION) {
            return;
        }
        this.setRoot(deserializerManager.deserialize(state.root));
        this.activePane = this.getRoot().getPanes().find(function (pane) { return pane.id === state.activePaneId; }) || this.getPanes()[0];
        if (this.config && this.config.get && this.config.get('core.destroyEmptyPanes')) {
            this.destroyEmptyPanes();
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PaneContainer.prototype.onDidChangeRoot = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PaneContainer.prototype.observeRoot = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        fn(this.getRoot());
        return this.onDidChangeRoot(fn);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PaneContainer.prototype.onDidAddPane = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PaneContainer.prototype.observePanes = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        var e_2, _a;
        try {
            for (var _b = tslib_1.__values(this.getPanes()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var pane = _c.value;
                fn(pane);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return this.onDidAddPane(function (_a) {
            var pane = _a.pane;
            return fn(pane);
        });
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PaneContainer.prototype.onDidDestroyPane = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PaneContainer.prototype.onWillDestroyPane = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PaneContainer.prototype.onDidChangeActivePane = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PaneContainer.prototype.onDidActivatePane = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PaneContainer.prototype.observeActivePane = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        fn(this.getActivePane());
        return this.onDidChangeActivePane(fn);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PaneContainer.prototype.onDidAddPaneItem = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PaneContainer.prototype.observePaneItems = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        var e_3, _a;
        try {
            for (var _b = tslib_1.__values(this.getPaneItems()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var item = _c.value;
                fn(item);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return this.onDidAddPaneItem(function (_a) {
            var item = _a.item;
            return fn(item);
        });
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PaneContainer.prototype.onDidChangeActivePaneItem = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PaneContainer.prototype.onDidStopChangingActivePaneItem = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PaneContainer.prototype.observeActivePaneItem = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        fn(this.getActivePaneItem());
        return this.onDidChangeActivePaneItem(fn);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PaneContainer.prototype.onWillDestroyPaneItem = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PaneContainer.prototype.onDidDestroyPaneItem = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
    };
    /**
     * @return {?}
     */
    PaneContainer.prototype.getRoot = /**
     * @return {?}
     */
    function () { return this.root; };
    /**
     * @param {?} root
     * @return {?}
     */
    PaneContainer.prototype.setRoot = /**
     * @param {?} root
     * @return {?}
     */
    function (root) {
        this.root = root;
        this.root.setParent(this);
        this.root.setContainer(this);
        if ((this.getActivePane() == null) && this.root instanceof Pane) {
            this.didActivatePane(this.root);
        }
    };
    /**
     * @param {?} oldChild
     * @param {?} newChild
     * @return {?}
     */
    PaneContainer.prototype.replaceChild = /**
     * @param {?} oldChild
     * @param {?} newChild
     * @return {?}
     */
    function (oldChild, newChild) {
        if (oldChild !== this.root) {
            throw new Error('Replacing non-existent child');
        }
        this.setRoot(newChild);
    };
    /**
     * @return {?}
     */
    PaneContainer.prototype.getPanes = /**
     * @return {?}
     */
    function () {
        if (this.alive) {
            return this.getRoot().getPanes();
        }
        else {
            return [];
        }
    };
    /**
     * @return {?}
     */
    PaneContainer.prototype.getPaneItems = /**
     * @return {?}
     */
    function () {
        return this.getRoot().getItems();
    };
    /**
     * @return {?}
     */
    PaneContainer.prototype.getActivePane = /**
     * @return {?}
     */
    function () {
        return this.activePane;
    };
    /**
     * @return {?}
     */
    PaneContainer.prototype.getActivePaneItem = /**
     * @return {?}
     */
    function () {
        return this.getActivePane().getActiveItem();
    };
    /**
     * @param {?} uri
     * @return {?}
     */
    PaneContainer.prototype.paneForURI = /**
     * @param {?} uri
     * @return {?}
     */
    function (uri) {
        return this.getPanes().find(function (pane) { return pane.itemForURI(uri) != null; });
    };
    /**
     * @param {?} item
     * @return {?}
     */
    PaneContainer.prototype.paneForItem = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return this.getPanes().find(function (pane) { return pane.getItems().find(function (it) { return it === item; }); });
    };
    /**
     * @return {?}
     */
    PaneContainer.prototype.saveAll = /**
     * @return {?}
     */
    function () {
        var e_4, _a;
        try {
            for (var _b = tslib_1.__values(this.getPanes()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var pane = _c.value;
                pane.saveItems();
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_4) throw e_4.error; }
        }
    };
    /**
     * @param {?} options
     * @return {?}
     */
    PaneContainer.prototype.confirmClose = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        var e_5, _a, e_6, _b;
        /** @type {?} */
        var promises = [];
        try {
            for (var _c = tslib_1.__values(this.getPanes()), _d = _c.next(); !_d.done; _d = _c.next()) {
                var pane = _d.value;
                try {
                    for (var _e = tslib_1.__values(pane.getItems()), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var item = _f.value;
                        promises.push(pane.promptToSaveItem(item, options));
                    }
                }
                catch (e_6_1) { e_6 = { error: e_6_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                    }
                    finally { if (e_6) throw e_6.error; }
                }
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_5) throw e_5.error; }
        }
        return Promise.all(promises).then(function (results) { return !results.find(function (item) { return item === false; }); });
    };
    /**
     * @return {?}
     */
    PaneContainer.prototype.activateNextPane = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var panes = this.getPanes();
        if (panes.length > 1) {
            /** @type {?} */
            var currentIndex = panes.indexOf(this.activePane);
            /** @type {?} */
            var nextIndex = (currentIndex + 1) % panes.length;
            panes[nextIndex].activate();
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * @return {?}
     */
    PaneContainer.prototype.activatePreviousPane = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var panes = this.getPanes();
        if (panes.length > 1) {
            /** @type {?} */
            var currentIndex = panes.indexOf(this.activePane);
            /** @type {?} */
            var previousIndex = currentIndex - 1;
            if (previousIndex < 0) {
                previousIndex = panes.length - 1;
            }
            panes[previousIndex].activate();
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * @param {?} destPane
     * @return {?}
     */
    PaneContainer.prototype.moveActiveItemToPane = /**
     * @param {?} destPane
     * @return {?}
     */
    function (destPane) {
        /** @type {?} */
        var item = this.activePane.getActiveItem();
        if (!destPane.isItemAllowed(item)) {
            return;
        }
        this.activePane.moveItemToPane(item, destPane);
        destPane.setActiveItem(item);
    };
    /**
     * @param {?} destPane
     * @return {?}
     */
    PaneContainer.prototype.copyActiveItemToPane = /**
     * @param {?} destPane
     * @return {?}
     */
    function (destPane) {
        /** @type {?} */
        var item = this.activePane.copyActiveItem();
        if (item && destPane.isItemAllowed(item)) {
            destPane.activateItem(item);
        }
    };
    /**
     * @return {?}
     */
    PaneContainer.prototype.destroyEmptyPanes = /**
     * @return {?}
     */
    function () {
        var e_7, _a;
        try {
            for (var _b = tslib_1.__values(this.getPanes()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var pane = _c.value;
                if (pane.items.length === 0) {
                    pane.destroy();
                }
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_7) throw e_7.error; }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PaneContainer.prototype.didAddPane = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var items = event.pane.getItems();
        for (var i = 0, length_1 = items.length; i < length_1; i++) {
            /** @type {?} */
            var item = items[i];
            this.didAddPaneItem(item, event.pane, i);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PaneContainer.prototype.willDestroyPane = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PaneContainer.prototype.didDestroyPane = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
    };
    /**
     * @param {?} activePane
     * @return {?}
     */
    PaneContainer.prototype.didActivatePane = /**
     * @param {?} activePane
     * @return {?}
     */
    function (activePane) {
        if (activePane !== this.activePane) {
            if (!this.getPanes().find(function (item) { return item === activePane; })) {
                throw new Error('Setting active pane that is not present in pane container');
            }
            this.activePane = activePane;
            this.didChangeActiveItemOnPane(this.activePane, this.activePane.getActiveItem());
        }
        return this.activePane;
    };
    /**
     * @param {?} item
     * @param {?} pane
     * @param {?} index
     * @return {?}
     */
    PaneContainer.prototype.didAddPaneItem = /**
     * @param {?} item
     * @param {?} pane
     * @param {?} index
     * @return {?}
     */
    function (item, pane, index) {
        this.itemRegistry.addItem(item);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PaneContainer.prototype.willDestroyPaneItem = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PaneContainer.prototype.didDestroyPaneItem = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.itemRegistry.removeItem(event.item);
        // this.emitter.emit('did-destroy-pane-item', event);
    };
    /**
     * @param {?} pane
     * @param {?} activeItem
     * @return {?}
     */
    PaneContainer.prototype.didChangeActiveItemOnPane = /**
     * @param {?} pane
     * @param {?} activeItem
     * @return {?}
     */
    function (pane, activeItem) {
        if (pane === this.getActivePane()) {
            this.cancelStoppedChangingActivePaneItemTimeout();
            // `setTimeout()` isn't available during the snapshotting phase, but that's okay.
        }
    };
    /**
     * @return {?}
     */
    PaneContainer.prototype.cancelStoppedChangingActivePaneItemTimeout = /**
     * @return {?}
     */
    function () {
    };
    return PaneContainer;
}());
export { PaneContainer };
if (false) {
    /** @type {?} */
    PaneContainer.prototype.itemRegistry;
    /** @type {?} */
    PaneContainer.prototype.alive;
    /** @type {?} */
    PaneContainer.prototype.viewRegistry;
    /** @type {?} */
    PaneContainer.prototype.location;
    /** @type {?} */
    PaneContainer.prototype.activePane;
    /** @type {?} */
    PaneContainer.prototype.root;
    /** @type {?} */
    PaneContainer.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,