/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { PaneContainer } from './pane-container';
// Essential: Represents the workspace at the center of the entire window.
var 
// Essential: Represents the workspace at the center of the entire window.
WorkspaceCenter = /** @class */ (function () {
    function WorkspaceCenter(params) {
        var _this = this;
        params.location = 'center';
        this.paneContainer = new PaneContainer(params);
        this.didActivate = params.didActivate;
        this.paneContainer.onDidActivatePane(function () { return _this.didActivate(_this); });
        this.paneContainer.onDidChangeActivePane(function (pane) {
            params.didChangeActivePane(_this, pane);
        });
        this.paneContainer.onDidChangeActivePaneItem(function (item) {
            params.didChangeActivePaneItem(_this, item);
        });
        this.paneContainer.onDidDestroyPaneItem(function (item) { return params.didDestroyPaneItem(item); });
    }
    /**
     * @return {?}
     */
    WorkspaceCenter.prototype.destroy = /**
     * @return {?}
     */
    function () {
        this.paneContainer.destroy();
    };
    /**
     * @return {?}
     */
    WorkspaceCenter.prototype.serialize = /**
     * @return {?}
     */
    function () {
        return this.paneContainer.serialize();
    };
    /**
     * @param {?} state
     * @param {?} deserializerManager
     * @return {?}
     */
    WorkspaceCenter.prototype.deserialize = /**
     * @param {?} state
     * @param {?} deserializerManager
     * @return {?}
     */
    function (state, deserializerManager) {
        this.paneContainer.deserialize(state, deserializerManager);
    };
    /**
     * @return {?}
     */
    WorkspaceCenter.prototype.activate = /**
     * @return {?}
     */
    function () {
        this.getActivePane().activate();
    };
    /**
     * @return {?}
     */
    WorkspaceCenter.prototype.getLocation = /**
     * @return {?}
     */
    function () {
        return 'center';
    };
    /**
     * @return {?}
     */
    WorkspaceCenter.prototype.setDraggingItem = /**
     * @return {?}
     */
    function () {
        // No-op
    };
    // Essential: Invoke the given callback with all current and future panes items
    // in the workspace center.
    //
    // * `callback` {Function} to be called with current and future pane items.
    //   * `item` An item that is present in {::getPaneItems} at the time of
    //      subscription or that is added at some later time.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Essential: Invoke the given callback with all current and future panes items
    // in the workspace center.
    //
    // * `callback` {Function} to be called with current and future pane items.
    //   * `item` An item that is present in {::getPaneItems} at the time of
    //      subscription or that is added at some later time.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    WorkspaceCenter.prototype.observePaneItems = 
    // Essential: Invoke the given callback with all current and future panes items
    // in the workspace center.
    //
    // * `callback` {Function} to be called with current and future pane items.
    //   * `item` An item that is present in {::getPaneItems} at the time of
    //      subscription or that is added at some later time.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) { return this.paneContainer.observePaneItems(callback); };
    // Essential: Invoke the given callback when the active pane item changes.
    //
    // Because observers are invoked synchronously, it's important not to perform
    // any expensive operations via this method. Consider
    // {::onDidStopChangingActivePaneItem} to delay operations until after changes
    // stop occurring.
    //
    // * `callback` {Function} to be called when the active pane item changes.
    //   * `item` The active pane item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Essential: Invoke the given callback when the active pane item changes.
    //
    // Because observers are invoked synchronously, it's important not to perform
    // any expensive operations via this method. Consider
    // {::onDidStopChangingActivePaneItem} to delay operations until after changes
    // stop occurring.
    //
    // * `callback` {Function} to be called when the active pane item changes.
    //   * `item` The active pane item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    WorkspaceCenter.prototype.onDidChangeActivePaneItem = 
    // Essential: Invoke the given callback when the active pane item changes.
    //
    // Because observers are invoked synchronously, it's important not to perform
    // any expensive operations via this method. Consider
    // {::onDidStopChangingActivePaneItem} to delay operations until after changes
    // stop occurring.
    //
    // * `callback` {Function} to be called when the active pane item changes.
    //   * `item` The active pane item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.paneContainer.onDidChangeActivePaneItem(callback);
    };
    // Essential: Invoke the given callback when the active pane item stops
    // changing.
    //
    // Observers are called asynchronously 100ms after the last active pane item
    // change. Handling changes here rather than in the synchronous
    // {::onDidChangeActivePaneItem} prevents unneeded work if the user is quickly
    // changing or closing tabs and ensures critical UI feedback, like changing the
    // highlighted tab, gets priority over work that can be done asynchronously.
    //
    // * `callback` {Function} to be called when the active pane item stopts
    //   changing.
    //   * `item` The active pane item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Essential: Invoke the given callback when the active pane item stops
    // changing.
    //
    // Observers are called asynchronously 100ms after the last active pane item
    // change. Handling changes here rather than in the synchronous
    // {::onDidChangeActivePaneItem} prevents unneeded work if the user is quickly
    // changing or closing tabs and ensures critical UI feedback, like changing the
    // highlighted tab, gets priority over work that can be done asynchronously.
    //
    // * `callback` {Function} to be called when the active pane item stopts
    //   changing.
    //   * `item` The active pane item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    WorkspaceCenter.prototype.onDidStopChangingActivePaneItem = 
    // Essential: Invoke the given callback when the active pane item stops
    // changing.
    //
    // Observers are called asynchronously 100ms after the last active pane item
    // change. Handling changes here rather than in the synchronous
    // {::onDidChangeActivePaneItem} prevents unneeded work if the user is quickly
    // changing or closing tabs and ensures critical UI feedback, like changing the
    // highlighted tab, gets priority over work that can be done asynchronously.
    //
    // * `callback` {Function} to be called when the active pane item stopts
    //   changing.
    //   * `item` The active pane item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.paneContainer.onDidStopChangingActivePaneItem(callback);
    };
    // Essential: Invoke the given callback with the current active pane item and
    // with all future active pane items in the workspace center.
    //
    // * `callback` {Function} to be called when the active pane item changes.
    //   * `item` The current active pane item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Essential: Invoke the given callback with the current active pane item and
    // with all future active pane items in the workspace center.
    //
    // * `callback` {Function} to be called when the active pane item changes.
    //   * `item` The current active pane item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    WorkspaceCenter.prototype.observeActivePaneItem = 
    // Essential: Invoke the given callback with the current active pane item and
    // with all future active pane items in the workspace center.
    //
    // * `callback` {Function} to be called when the active pane item changes.
    //   * `item` The current active pane item.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.paneContainer.observeActivePaneItem(callback);
    };
    // Extended: Invoke the given callback when a pane is added to the workspace
    // center.
    //
    // * `callback` {Function} to be called panes are added.
    //   * `event` {Object} with the following keys:
    //     * `pane` The added pane.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Extended: Invoke the given callback when a pane is added to the workspace
    // center.
    //
    // * `callback` {Function} to be called panes are added.
    //   * `event` {Object} with the following keys:
    //     * `pane` The added pane.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    WorkspaceCenter.prototype.onDidAddPane = 
    // Extended: Invoke the given callback when a pane is added to the workspace
    // center.
    //
    // * `callback` {Function} to be called panes are added.
    //   * `event` {Object} with the following keys:
    //     * `pane` The added pane.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.paneContainer.onDidAddPane(callback);
    };
    // Extended: Invoke the given callback before a pane is destroyed in the
    // workspace center.
    //
    // * `callback` {Function} to be called before panes are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `pane` The pane to be destroyed.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Extended: Invoke the given callback before a pane is destroyed in the
    // workspace center.
    //
    // * `callback` {Function} to be called before panes are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `pane` The pane to be destroyed.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    WorkspaceCenter.prototype.onWillDestroyPane = 
    // Extended: Invoke the given callback before a pane is destroyed in the
    // workspace center.
    //
    // * `callback` {Function} to be called before panes are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `pane` The pane to be destroyed.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.paneContainer.onWillDestroyPane(callback);
    };
    // Extended: Invoke the given callback when a pane is destroyed in the
    // workspace center.
    //
    // * `callback` {Function} to be called panes are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `pane` The destroyed pane.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Extended: Invoke the given callback when a pane is destroyed in the
    // workspace center.
    //
    // * `callback` {Function} to be called panes are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `pane` The destroyed pane.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    WorkspaceCenter.prototype.onDidDestroyPane = 
    // Extended: Invoke the given callback when a pane is destroyed in the
    // workspace center.
    //
    // * `callback` {Function} to be called panes are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `pane` The destroyed pane.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.paneContainer.onDidDestroyPane(callback);
    };
    // Extended: Invoke the given callback with all current and future panes in the
    // workspace center.
    //
    // * `callback` {Function} to be called with current and future panes.
    //   * `pane` A {Pane} that is present in {::getPanes} at the time of
    //      subscription or that is added at some later time.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Extended: Invoke the given callback with all current and future panes in the
    // workspace center.
    //
    // * `callback` {Function} to be called with current and future panes.
    //   * `pane` A {Pane} that is present in {::getPanes} at the time of
    //      subscription or that is added at some later time.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    WorkspaceCenter.prototype.observePanes = 
    // Extended: Invoke the given callback with all current and future panes in the
    // workspace center.
    //
    // * `callback` {Function} to be called with current and future panes.
    //   * `pane` A {Pane} that is present in {::getPanes} at the time of
    //      subscription or that is added at some later time.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.paneContainer.observePanes(callback);
    };
    // Extended: Invoke the given callback when the active pane changes.
    //
    // * `callback` {Function} to be called when the active pane changes.
    //   * `pane` A {Pane} that is the current return value of {::getActivePane}.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Extended: Invoke the given callback when the active pane changes.
    //
    // * `callback` {Function} to be called when the active pane changes.
    //   * `pane` A {Pane} that is the current return value of {::getActivePane}.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    WorkspaceCenter.prototype.onDidChangeActivePane = 
    // Extended: Invoke the given callback when the active pane changes.
    //
    // * `callback` {Function} to be called when the active pane changes.
    //   * `pane` A {Pane} that is the current return value of {::getActivePane}.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.paneContainer.onDidChangeActivePane(callback);
    };
    // Extended: Invoke the given callback with the current active pane and when
    // the active pane changes.
    //
    // * `callback` {Function} to be called with the current and future active#
    //   panes.
    //   * `pane` A {Pane} that is the current return value of {::getActivePane}.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Extended: Invoke the given callback with the current active pane and when
    // the active pane changes.
    //
    // * `callback` {Function} to be called with the current and future active#
    //   panes.
    //   * `pane` A {Pane} that is the current return value of {::getActivePane}.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    WorkspaceCenter.prototype.observeActivePane = 
    // Extended: Invoke the given callback with the current active pane and when
    // the active pane changes.
    //
    // * `callback` {Function} to be called with the current and future active#
    //   panes.
    //   * `pane` A {Pane} that is the current return value of {::getActivePane}.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.paneContainer.observeActivePane(callback);
    };
    // Extended: Invoke the given callback when a pane item is added to the
    // workspace center.
    //
    // * `callback` {Function} to be called when pane items are added.
    //   * `event` {Object} with the following keys:
    //     * `item` The added pane item.
    //     * `pane` {Pane} containing the added item.
    //     * `index` {Number} indicating the index of the added item in its pane.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Extended: Invoke the given callback when a pane item is added to the
    // workspace center.
    //
    // * `callback` {Function} to be called when pane items are added.
    //   * `event` {Object} with the following keys:
    //     * `item` The added pane item.
    //     * `pane` {Pane} containing the added item.
    //     * `index` {Number} indicating the index of the added item in its pane.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    WorkspaceCenter.prototype.onDidAddPaneItem = 
    // Extended: Invoke the given callback when a pane item is added to the
    // workspace center.
    //
    // * `callback` {Function} to be called when pane items are added.
    //   * `event` {Object} with the following keys:
    //     * `item` The added pane item.
    //     * `pane` {Pane} containing the added item.
    //     * `index` {Number} indicating the index of the added item in its pane.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.paneContainer.onDidAddPaneItem(callback);
    };
    // Extended: Invoke the given callback when a pane item is about to be
    // destroyed, before the user is prompted to save it.
    //
    // * `callback` {Function} to be called before pane items are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `item` The item to be destroyed.
    //     * `pane` {Pane} containing the item to be destroyed.
    //     * `index` {Number} indicating the index of the item to be destroyed in
    //       its pane.
    //
    // Returns a {Disposable} on which `.dispose` can be called to unsubscribe.
    // Extended: Invoke the given callback when a pane item is about to be
    // destroyed, before the user is prompted to save it.
    //
    // * `callback` {Function} to be called before pane items are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `item` The item to be destroyed.
    //     * `pane` {Pane} containing the item to be destroyed.
    //     * `index` {Number} indicating the index of the item to be destroyed in
    //       its pane.
    //
    // Returns a {Disposable} on which `.dispose` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    WorkspaceCenter.prototype.onWillDestroyPaneItem = 
    // Extended: Invoke the given callback when a pane item is about to be
    // destroyed, before the user is prompted to save it.
    //
    // * `callback` {Function} to be called before pane items are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `item` The item to be destroyed.
    //     * `pane` {Pane} containing the item to be destroyed.
    //     * `index` {Number} indicating the index of the item to be destroyed in
    //       its pane.
    //
    // Returns a {Disposable} on which `.dispose` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.paneContainer.onWillDestroyPaneItem(callback);
    };
    // Extended: Invoke the given callback when a pane item is destroyed.
    //
    // * `callback` {Function} to be called when pane items are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `item` The destroyed item.
    //     * `pane` {Pane} containing the destroyed item.
    //     * `index` {Number} indicating the index of the destroyed item in its
    //       pane.
    //
    // Returns a {Disposable} on which `.dispose` can be called to unsubscribe.
    // Extended: Invoke the given callback when a pane item is destroyed.
    //
    // * `callback` {Function} to be called when pane items are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `item` The destroyed item.
    //     * `pane` {Pane} containing the destroyed item.
    //     * `index` {Number} indicating the index of the destroyed item in its
    //       pane.
    //
    // Returns a {Disposable} on which `.dispose` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    WorkspaceCenter.prototype.onDidDestroyPaneItem = 
    // Extended: Invoke the given callback when a pane item is destroyed.
    //
    // * `callback` {Function} to be called when pane items are destroyed.
    //   * `event` {Object} with the following keys:
    //     * `item` The destroyed item.
    //     * `pane` {Pane} containing the destroyed item.
    //     * `index` {Number} indicating the index of the destroyed item in its
    //       pane.
    //
    // Returns a {Disposable} on which `.dispose` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.paneContainer.onDidDestroyPaneItem(callback);
    };
    /*
    Section: Pane Items
    */
    // Essential: Get all pane items in the workspace center.
    //
    // Returns an {Array} of items.
    /*
      Section: Pane Items
      */
    // Essential: Get all pane items in the workspace center.
    //
    // Returns an {Array} of items.
    /**
     * @return {?}
     */
    WorkspaceCenter.prototype.getPaneItems = /*
      Section: Pane Items
      */
    // Essential: Get all pane items in the workspace center.
    //
    // Returns an {Array} of items.
    /**
     * @return {?}
     */
    function () {
        return this.paneContainer.getPaneItems();
    };
    // Essential: Get the active {Pane}'s active item.
    //
    // Returns an pane item {Object}.
    // Essential: Get the active {Pane}'s active item.
    //
    // Returns an pane item {Object}.
    /**
     * @return {?}
     */
    WorkspaceCenter.prototype.getActivePaneItem = 
    // Essential: Get the active {Pane}'s active item.
    //
    // Returns an pane item {Object}.
    /**
     * @return {?}
     */
    function () {
        return this.paneContainer.getActivePaneItem();
    };
    // Save all pane items.
    // Save all pane items.
    /**
     * @return {?}
     */
    WorkspaceCenter.prototype.saveAll = 
    // Save all pane items.
    /**
     * @return {?}
     */
    function () {
        this.paneContainer.saveAll();
    };
    /**
     * @param {?} options
     * @return {?}
     */
    WorkspaceCenter.prototype.confirmClose = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        return this.paneContainer.confirmClose(options);
    };
    /*
    Section: Panes
    */
    // Extended: Get all panes in the workspace center.
    //
    // Returns an {Array} of {Pane}s.
    /*
      Section: Panes
      */
    // Extended: Get all panes in the workspace center.
    //
    // Returns an {Array} of {Pane}s.
    /**
     * @return {?}
     */
    WorkspaceCenter.prototype.getPanes = /*
      Section: Panes
      */
    // Extended: Get all panes in the workspace center.
    //
    // Returns an {Array} of {Pane}s.
    /**
     * @return {?}
     */
    function () {
        return this.paneContainer.getPanes();
    };
    // Extended: Get the active {Pane}.
    //
    // Returns a {Pane}.
    // Extended: Get the active {Pane}.
    //
    // Returns a {Pane}.
    /**
     * @return {?}
     */
    WorkspaceCenter.prototype.getActivePane = 
    // Extended: Get the active {Pane}.
    //
    // Returns a {Pane}.
    /**
     * @return {?}
     */
    function () {
        return this.paneContainer.getActivePane();
    };
    // Extended: Make the next pane active.
    // Extended: Make the next pane active.
    /**
     * @return {?}
     */
    WorkspaceCenter.prototype.activateNextPane = 
    // Extended: Make the next pane active.
    /**
     * @return {?}
     */
    function () {
        return this.paneContainer.activateNextPane();
    };
    // Extended: Make the previous pane active.
    // Extended: Make the previous pane active.
    /**
     * @return {?}
     */
    WorkspaceCenter.prototype.activatePreviousPane = 
    // Extended: Make the previous pane active.
    /**
     * @return {?}
     */
    function () {
        return this.paneContainer.activatePreviousPane();
    };
    /**
     * @param {?} uri
     * @return {?}
     */
    WorkspaceCenter.prototype.paneForURI = /**
     * @param {?} uri
     * @return {?}
     */
    function (uri) {
        return this.paneContainer.paneForURI(uri);
    };
    /**
     * @param {?} item
     * @return {?}
     */
    WorkspaceCenter.prototype.paneForItem = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return this.paneContainer.paneForItem(item);
    };
    // Destroy (close) the active pane.
    // Destroy (close) the active pane.
    /**
     * @return {?}
     */
    WorkspaceCenter.prototype.destroyActivePane = 
    // Destroy (close) the active pane.
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var activePane = this.getActivePane();
        if (activePane != null) {
            activePane.destroy();
        }
    };
    return WorkspaceCenter;
}());
// Essential: Represents the workspace at the center of the entire window.
export { WorkspaceCenter };
if (false) {
    /** @type {?} */
    WorkspaceCenter.prototype.paneContainer;
    /** @type {?} */
    WorkspaceCenter.prototype.didActivate;
}
//# sourceMappingURL=data:application/json;base64,