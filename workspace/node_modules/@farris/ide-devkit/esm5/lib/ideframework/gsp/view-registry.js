/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Disposable } from './event-kit';
import { ComponentRef } from '@angular/core';
// Essential: `ViewRegistry` handles the association between model and view
// types in Atom. We call this association a View Provider. As in, for a given
// model, this class can provide a view via {::getView}, as long as the
// model/view association was registered via {::addViewProvider}
//
// If you're adding your own kind of pane item, a good strategy for all but the
// simplest items is to separate the model and the view. The model handles
// application logic and is the primary point of API interaction. The view
// just handles presentation.
//
// Note: Models can be any object, but must implement a `getTitle()` function
// if they are to be displayed in a {Pane}
//
// View providers inform the workspace how your model objects should be
// presented in the DOM. A view provider must always return a DOM node, which
// makes [HTML 5 custom elements](http://www.html5rocks.com/en/tutorials/webcomponents/customelements/)
// an ideal tool for implementing views in Atom.
//
// You can access the `ViewRegistry` object via `atom.views`.
var 
// Essential: `ViewRegistry` handles the association between model and view
// types in Atom. We call this association a View Provider. As in, for a given
// model, this class can provide a view via {::getView}, as long as the
// model/view association was registered via {::addViewProvider}
//
// If you're adding your own kind of pane item, a good strategy for all but the
// simplest items is to separate the model and the view. The model handles
// application logic and is the primary point of API interaction. The view
// just handles presentation.
//
// Note: Models can be any object, but must implement a `getTitle()` function
// if they are to be displayed in a {Pane}
//
// View providers inform the workspace how your model objects should be
// presented in the DOM. A view provider must always return a DOM node, which
// makes [HTML 5 custom elements](http://www.html5rocks.com/en/tutorials/webcomponents/customelements/)
// an ideal tool for implementing views in Atom.
//
// You can access the `ViewRegistry` object via `atom.views`.
ViewRegistry = /** @class */ (function () {
    // private documentWriters: any;
    // private documentReaders: any;
    // private nextUpdatePromise: any;
    // private resolveNextUpdatePromise: (value?: {} | PromiseLike<{}>) => void;
    function ViewRegistry(gspEnvironment) {
        // this.animationFrameRequest = null
        // this.documentReadInProgress = false
        // this.performDocumentUpdate = this.performDocumentUpdate.bind(this);
        this.gspEnvironment = gspEnvironment;
        this.clear();
    }
    /**
     * @return {?}
     */
    ViewRegistry.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.views = new WeakMap();
        this.providers = [];
        this.clearDocumentRequests();
    };
    // Essential: Add a provider that will be used to construct views in the
    // workspace's view layer based on model objects in its model layer.
    //
    // ## Examples
    //
    // Text editors are divided into a model and a view layer, so when you interact
    // with methods like `atom.workspace.getActiveTextEditor()` you're only going
    // to get the model object. We display text editors on screen by teaching the
    // workspace what view constructor it should use to represent them:
    //
    // ```coffee
    // atom.views.addViewProvider TextEditor, (textEditor) ->
    //   textEditorElement = new TextEditorElement
    //   textEditorElement.initialize(textEditor)
    //   textEditorElement
    // ```
    //
    // * `modelConstructor` (optional) Constructor {Function} for your model. If
    //   a constructor is given, the `createView` function will only be used
    //   for model objects inheriting from that constructor. Otherwise, it will
    //   will be called for any object.
    // * `createView` Factory {Function} that is passed an instance of your model
    //   and must return a subclass of `HTMLElement` or `undefined`. If it returns
    //   `undefined`, then the registry will continue to search for other view
    //   providers.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to remove the
    // added provider.
    // Essential: Add a provider that will be used to construct views in the
    // workspace's view layer based on model objects in its model layer.
    //
    // ## Examples
    //
    // Text editors are divided into a model and a view layer, so when you interact
    // with methods like `atom.workspace.getActiveTextEditor()` you're only going
    // to get the model object. We display text editors on screen by teaching the
    // workspace what view constructor it should use to represent them:
    //
    // ```coffee
    // atom.views.addViewProvider TextEditor, (textEditor) ->
    //   textEditorElement = new TextEditorElement
    //   textEditorElement.initialize(textEditor)
    //   textEditorElement
    // ```
    //
    // * `modelConstructor` (optional) Constructor {Function} for your model. If
    //   a constructor is given, the `createView` function will only be used
    //   for model objects inheriting from that constructor. Otherwise, it will
    //   will be called for any object.
    // * `createView` Factory {Function} that is passed an instance of your model
    //   and must return a subclass of `HTMLElement` or `undefined`. If it returns
    //   `undefined`, then the registry will continue to search for other view
    //   providers.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to remove the
    // added provider.
    /**
     * @param {?} modelConstructor
     * @param {?} createView
     * @return {?}
     */
    ViewRegistry.prototype.addViewProvider = 
    // Essential: Add a provider that will be used to construct views in the
    // workspace's view layer based on model objects in its model layer.
    //
    // ## Examples
    //
    // Text editors are divided into a model and a view layer, so when you interact
    // with methods like `atom.workspace.getActiveTextEditor()` you're only going
    // to get the model object. We display text editors on screen by teaching the
    // workspace what view constructor it should use to represent them:
    //
    // ```coffee
    // atom.views.addViewProvider TextEditor, (textEditor) ->
    //   textEditorElement = new TextEditorElement
    //   textEditorElement.initialize(textEditor)
    //   textEditorElement
    // ```
    //
    // * `modelConstructor` (optional) Constructor {Function} for your model. If
    //   a constructor is given, the `createView` function will only be used
    //   for model objects inheriting from that constructor. Otherwise, it will
    //   will be called for any object.
    // * `createView` Factory {Function} that is passed an instance of your model
    //   and must return a subclass of `HTMLElement` or `undefined`. If it returns
    //   `undefined`, then the registry will continue to search for other view
    //   providers.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to remove the
    // added provider.
    /**
     * @param {?} modelConstructor
     * @param {?} createView
     * @return {?}
     */
    function (modelConstructor, createView) {
        var _this = this;
        /** @type {?} */
        var provider;
        if (arguments.length === 1) {
            switch (typeof modelConstructor) {
                case 'function':
                    provider = { createView: modelConstructor, modelConstructor: null };
                    break;
                case 'object':
                    provider = modelConstructor;
                    break;
                default:
                    throw new TypeError('Arguments to addViewProvider must be functions');
            }
        }
        else {
            provider = { modelConstructor: modelConstructor, createView: createView };
        }
        this.providers.push(provider);
        return new Disposable(function () {
            _this.providers = _this.providers.filter(function (p) { return p !== provider; });
        });
    };
    /**
     * @return {?}
     */
    ViewRegistry.prototype.getViewProviderCount = /**
     * @return {?}
     */
    function () {
        return this.providers.length;
    };
    // Essential: Get the view associated with an object in the workspace.
    //
    // If you're just *using* the workspace, you shouldn't need to access the view
    // layer, but view layer access may be necessary if you want to perform DOM
    // manipulation that isn't supported via the model API.
    //
    // ## View Resolution Algorithm
    //
    // The view associated with the object is resolved using the following
    // sequence
    //
    //  1. Is the object an instance of `HTMLElement`? If true, return the object.
    //  2. Does the object have a method named `getElement` that returns an
    //     instance of `HTMLElement`? If true, return that value.
    //  3. Does the object have a property named `element` with a value which is
    //     an instance of `HTMLElement`? If true, return the property value.
    //  4. Is the object a jQuery object, indicated by the presence of a `jquery`
    //     property? If true, return the root DOM element (i.e. `object[0]`).
    //  5. Has a view provider been registered for the object? If true, use the
    //     provider to create a view associated with the object, and return the
    //     view.
    //
    // If no associated view is returned by the sequence an error is thrown.
    //
    // Returns a DOM element.
    // Essential: Get the view associated with an object in the workspace.
    //
    // If you're just *using* the workspace, you shouldn't need to access the view
    // layer, but view layer access may be necessary if you want to perform DOM
    // manipulation that isn't supported via the model API.
    //
    // ## View Resolution Algorithm
    //
    // The view associated with the object is resolved using the following
    // sequence
    //
    //  1. Is the object an instance of `HTMLElement`? If true, return the object.
    //  2. Does the object have a method named `getElement` that returns an
    //     instance of `HTMLElement`? If true, return that value.
    //  3. Does the object have a property named `element` with a value which is
    //     an instance of `HTMLElement`? If true, return the property value.
    //  4. Is the object a jQuery object, indicated by the presence of a `jquery`
    //     property? If true, return the root DOM element (i.e. `object[0]`).
    //  5. Has a view provider been registered for the object? If true, use the
    //     provider to create a view associated with the object, and return the
    //     view.
    //
    // If no associated view is returned by the sequence an error is thrown.
    //
    // Returns a DOM element.
    /**
     * @param {?} object
     * @return {?}
     */
    ViewRegistry.prototype.getView = 
    // Essential: Get the view associated with an object in the workspace.
    //
    // If you're just *using* the workspace, you shouldn't need to access the view
    // layer, but view layer access may be necessary if you want to perform DOM
    // manipulation that isn't supported via the model API.
    //
    // ## View Resolution Algorithm
    //
    // The view associated with the object is resolved using the following
    // sequence
    //
    //  1. Is the object an instance of `HTMLElement`? If true, return the object.
    //  2. Does the object have a method named `getElement` that returns an
    //     instance of `HTMLElement`? If true, return that value.
    //  3. Does the object have a property named `element` with a value which is
    //     an instance of `HTMLElement`? If true, return the property value.
    //  4. Is the object a jQuery object, indicated by the presence of a `jquery`
    //     property? If true, return the root DOM element (i.e. `object[0]`).
    //  5. Has a view provider been registered for the object? If true, use the
    //     provider to create a view associated with the object, and return the
    //     view.
    //
    // If no associated view is returned by the sequence an error is thrown.
    //
    // Returns a DOM element.
    /**
     * @param {?} object
     * @return {?}
     */
    function (object) {
        if (object == null) {
            return;
        }
        /** @type {?} */
        var view = this.views.get(object);
        if (!view) {
            view = this.createView(object);
            this.views.set(object, view);
        }
        return view;
    };
    /**
     * @param {?} object
     * @return {?}
     */
    ViewRegistry.prototype.createView = /**
     * @param {?} object
     * @return {?}
     */
    function (object) {
        var e_1, _a;
        if (object instanceof ComponentRef) {
            return object;
        }
        /** @type {?} */
        var element;
        if (object && (typeof object.getElement === 'function')) {
            element = object.getElement();
            if (element instanceof ComponentRef) {
                return element;
            }
        }
        if (object && object.element instanceof ComponentRef) {
            return object.element;
        }
        try {
            // if (object && object.jquery) {
            //   return object[0];
            // }
            for (var _b = tslib_1.__values(this.providers), _c = _b.next(); !_c.done; _c = _b.next()) {
                var provider = _c.value;
                if (provider.modelConstructor === null) {
                    element = provider.createView(object, this.gspEnvironment);
                    if (element) {
                        return element;
                    }
                    continue;
                }
                if (object instanceof provider.modelConstructor) {
                    element = provider.createView && provider.createView(object, this.gspEnvironment);
                    if (element) {
                        return element;
                    }
                    /** @type {?} */
                    var ViewConstructor = provider.viewConstructor;
                    if (ViewConstructor) {
                        element = new ViewConstructor();
                        if (element.initialize) {
                            element.initialize(object);
                        }
                        else if (element.setModel) {
                            element.setModel(object);
                        }
                        return element;
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (object && object.getViewClass) {
            /** @type {?} */
            var ViewConstructor = object.getViewClass();
            if (ViewConstructor) {
                /** @type {?} */
                var view = new ViewConstructor(object);
                return view;
            }
        }
        throw new Error("Can't create a view for " + object.constructor.name + " instance. Please register a view provider.");
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ViewRegistry.prototype.updateDocument = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        // this.documentWriters.push(fn)
        // if (!this.documentReadInProgress) { this.requestDocumentUpdate() }
        // return new Disposable(() => {
        //   this.documentWriters = this.documentWriters.filter(writer => writer !== fn)
        // })
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    ViewRegistry.prototype.readDocument = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        // this.documentReaders.push(fn)
        // this.requestDocumentUpdate()
        // return new Disposable(() => {
        //   this.documentReaders = this.documentReaders.filter(reader => reader !== fn)
        // })
    };
    /**
     * @return {?}
     */
    ViewRegistry.prototype.getNextUpdatePromise = /**
     * @return {?}
     */
    function () {
        // if (this.nextUpdatePromise == null) {
        //   this.nextUpdatePromise = new Promise(resolve => {
        //     this.resolveNextUpdatePromise = resolve
        //   })
        // }
        // return this.nextUpdatePromise
    };
    /**
     * @return {?}
     */
    ViewRegistry.prototype.clearDocumentRequests = /**
     * @return {?}
     */
    function () {
        // this.documentReaders = []
        // this.documentWriters = []
        // this.nextUpdatePromise = null
        // this.resolveNextUpdatePromise = null
        // if (this.animationFrameRequest != null) {
        //   cancelAnimationFrame(this.animationFrameRequest)
        //   this.animationFrameRequest = null
        // }
    };
    /**
     * @return {?}
     */
    ViewRegistry.prototype.requestDocumentUpdate = /**
     * @return {?}
     */
    function () {
        // if (this.animationFrameRequest == null) {
        //   this.animationFrameRequest = requestAnimationFrame(this.performDocumentUpdate)
        // }
    };
    /**
     * @return {?}
     */
    ViewRegistry.prototype.performDocumentUpdate = /**
     * @return {?}
     */
    function () {
        // const { resolveNextUpdatePromise } = this
        // this.animationFrameRequest = null
        // this.nextUpdatePromise = null
        // this.resolveNextUpdatePromise = null
        // var writer = this.documentWriters.shift()
        // while (writer) {
        //   writer()
        //   writer = this.documentWriters.shift()
        // }
        // var reader = this.documentReaders.shift()
        // this.documentReadInProgress = true
        // while (reader) {
        //   reader()
        //   reader = this.documentReaders.shift()
        // }
        // this.documentReadInProgress = false
        // // process updates requested as a result of reads
        // writer = this.documentWriters.shift()
        // while (writer) {
        //   writer()
        //   writer = this.documentWriters.shift()
        // }
        // if (resolveNextUpdatePromise) { resolveNextUpdatePromise() }
    };
    return ViewRegistry;
}());
// Essential: `ViewRegistry` handles the association between model and view
// types in Atom. We call this association a View Provider. As in, for a given
// model, this class can provide a view via {::getView}, as long as the
// model/view association was registered via {::addViewProvider}
//
// If you're adding your own kind of pane item, a good strategy for all but the
// simplest items is to separate the model and the view. The model handles
// application logic and is the primary point of API interaction. The view
// just handles presentation.
//
// Note: Models can be any object, but must implement a `getTitle()` function
// if they are to be displayed in a {Pane}
//
// View providers inform the workspace how your model objects should be
// presented in the DOM. A view provider must always return a DOM node, which
// makes [HTML 5 custom elements](http://www.html5rocks.com/en/tutorials/webcomponents/customelements/)
// an ideal tool for implementing views in Atom.
//
// You can access the `ViewRegistry` object via `atom.views`.
export { ViewRegistry };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ViewRegistry.prototype.gspEnvironment;
    /**
     * @type {?}
     * @private
     */
    ViewRegistry.prototype.views;
    /**
     * @type {?}
     * @private
     */
    ViewRegistry.prototype.providers;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy1yZWdpc3RyeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvaWRlLWRldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9pZGVmcmFtZXdvcmsvZ3NwL3ZpZXctcmVnaXN0cnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBcUI3Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBTUUsZ0NBQWdDO0lBQ2hDLGdDQUFnQztJQUNoQyxrQ0FBa0M7SUFDbEMsNEVBQTRFO0lBQzVFLHNCQUFhLGNBQWM7UUFDekIsb0NBQW9DO1FBQ3BDLHNDQUFzQztRQUN0QyxzRUFBc0U7UUFDdEUsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDckMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2YsQ0FBQzs7OztJQUVELDRCQUFLOzs7SUFBTDtRQUNFLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUMzQixJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRUQsd0VBQXdFO0lBQ3hFLG9FQUFvRTtJQUNwRSxFQUFFO0lBQ0YsY0FBYztJQUNkLEVBQUU7SUFDRiwrRUFBK0U7SUFDL0UsNkVBQTZFO0lBQzdFLDZFQUE2RTtJQUM3RSxtRUFBbUU7SUFDbkUsRUFBRTtJQUNGLFlBQVk7SUFDWix5REFBeUQ7SUFDekQsOENBQThDO0lBQzlDLDZDQUE2QztJQUM3QyxzQkFBc0I7SUFDdEIsTUFBTTtJQUNOLEVBQUU7SUFDRiw0RUFBNEU7SUFDNUUsd0VBQXdFO0lBQ3hFLDJFQUEyRTtJQUMzRSxtQ0FBbUM7SUFDbkMsNkVBQTZFO0lBQzdFLDhFQUE4RTtJQUM5RSww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QTBDO1FBQzFDLElBQUk7UUFDSixzQ0FBc0M7UUFFdEMsb0RBQW9EO1FBQ3BELHdDQUF3QztRQUN4QyxtQkFBbUI7UUFDbkIsYUFBYTtRQUNiLDBDQUEwQztRQUMxQyxJQUFJO1FBRUosK0RBQStEO0lBQ2pFLENBQUM7SUFDSCxtQkFBQztBQUFELENBQUMsQUFqUEQsSUFpUEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBOU9DLHNDQUE0Qjs7Ozs7SUFDNUIsNkJBQWtEOzs7OztJQUNsRCxpQ0FBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXNwb3NhYmxlIH0gZnJvbSAnLi9ldmVudC1raXQnO1xyXG5pbXBvcnQgeyBDb21wb25lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbi8vIEVzc2VudGlhbDogYFZpZXdSZWdpc3RyeWAgaGFuZGxlcyB0aGUgYXNzb2NpYXRpb24gYmV0d2VlbiBtb2RlbCBhbmQgdmlld1xyXG4vLyB0eXBlcyBpbiBBdG9tLiBXZSBjYWxsIHRoaXMgYXNzb2NpYXRpb24gYSBWaWV3IFByb3ZpZGVyLiBBcyBpbiwgZm9yIGEgZ2l2ZW5cclxuLy8gbW9kZWwsIHRoaXMgY2xhc3MgY2FuIHByb3ZpZGUgYSB2aWV3IHZpYSB7OjpnZXRWaWV3fSwgYXMgbG9uZyBhcyB0aGVcclxuLy8gbW9kZWwvdmlldyBhc3NvY2lhdGlvbiB3YXMgcmVnaXN0ZXJlZCB2aWEgezo6YWRkVmlld1Byb3ZpZGVyfVxyXG4vL1xyXG4vLyBJZiB5b3UncmUgYWRkaW5nIHlvdXIgb3duIGtpbmQgb2YgcGFuZSBpdGVtLCBhIGdvb2Qgc3RyYXRlZ3kgZm9yIGFsbCBidXQgdGhlXHJcbi8vIHNpbXBsZXN0IGl0ZW1zIGlzIHRvIHNlcGFyYXRlIHRoZSBtb2RlbCBhbmQgdGhlIHZpZXcuIFRoZSBtb2RlbCBoYW5kbGVzXHJcbi8vIGFwcGxpY2F0aW9uIGxvZ2ljIGFuZCBpcyB0aGUgcHJpbWFyeSBwb2ludCBvZiBBUEkgaW50ZXJhY3Rpb24uIFRoZSB2aWV3XHJcbi8vIGp1c3QgaGFuZGxlcyBwcmVzZW50YXRpb24uXHJcbi8vXHJcbi8vIE5vdGU6IE1vZGVscyBjYW4gYmUgYW55IG9iamVjdCwgYnV0IG11c3QgaW1wbGVtZW50IGEgYGdldFRpdGxlKClgIGZ1bmN0aW9uXHJcbi8vIGlmIHRoZXkgYXJlIHRvIGJlIGRpc3BsYXllZCBpbiBhIHtQYW5lfVxyXG4vL1xyXG4vLyBWaWV3IHByb3ZpZGVycyBpbmZvcm0gdGhlIHdvcmtzcGFjZSBob3cgeW91ciBtb2RlbCBvYmplY3RzIHNob3VsZCBiZVxyXG4vLyBwcmVzZW50ZWQgaW4gdGhlIERPTS4gQSB2aWV3IHByb3ZpZGVyIG11c3QgYWx3YXlzIHJldHVybiBhIERPTSBub2RlLCB3aGljaFxyXG4vLyBtYWtlcyBbSFRNTCA1IGN1c3RvbSBlbGVtZW50c10oaHR0cDovL3d3dy5odG1sNXJvY2tzLmNvbS9lbi90dXRvcmlhbHMvd2ViY29tcG9uZW50cy9jdXN0b21lbGVtZW50cy8pXHJcbi8vIGFuIGlkZWFsIHRvb2wgZm9yIGltcGxlbWVudGluZyB2aWV3cyBpbiBBdG9tLlxyXG4vL1xyXG4vLyBZb3UgY2FuIGFjY2VzcyB0aGUgYFZpZXdSZWdpc3RyeWAgb2JqZWN0IHZpYSBgYXRvbS52aWV3c2AuXHJcbmV4cG9ydCBjbGFzcyBWaWV3UmVnaXN0cnkge1xyXG4gIC8vIHByaXZhdGUgYW5pbWF0aW9uRnJhbWVSZXF1ZXN0OiBhbnk7XHJcbiAgLy8gcHJpdmF0ZSBkb2N1bWVudFJlYWRJblByb2dyZXNzOiBib29sZWFuO1xyXG4gIHByaXZhdGUgZ3NwRW52aXJvbm1lbnQ6IGFueTtcclxuICBwcml2YXRlIHZpZXdzOiBXZWFrTWFwPG9iamVjdCwgQ29tcG9uZW50UmVmPGFueT4+O1xyXG4gIHByaXZhdGUgcHJvdmlkZXJzOiBhbnlbXTtcclxuICAvLyBwcml2YXRlIGRvY3VtZW50V3JpdGVyczogYW55O1xyXG4gIC8vIHByaXZhdGUgZG9jdW1lbnRSZWFkZXJzOiBhbnk7XHJcbiAgLy8gcHJpdmF0ZSBuZXh0VXBkYXRlUHJvbWlzZTogYW55O1xyXG4gIC8vIHByaXZhdGUgcmVzb2x2ZU5leHRVcGRhdGVQcm9taXNlOiAodmFsdWU/OiB7fSB8IFByb21pc2VMaWtlPHt9PikgPT4gdm9pZDtcclxuICBjb25zdHJ1Y3RvciAoZ3NwRW52aXJvbm1lbnQpIHtcclxuICAgIC8vIHRoaXMuYW5pbWF0aW9uRnJhbWVSZXF1ZXN0ID0gbnVsbFxyXG4gICAgLy8gdGhpcy5kb2N1bWVudFJlYWRJblByb2dyZXNzID0gZmFsc2VcclxuICAgIC8vIHRoaXMucGVyZm9ybURvY3VtZW50VXBkYXRlID0gdGhpcy5wZXJmb3JtRG9jdW1lbnRVcGRhdGUuYmluZCh0aGlzKTtcclxuICAgIHRoaXMuZ3NwRW52aXJvbm1lbnQgPSBnc3BFbnZpcm9ubWVudDtcclxuICAgIHRoaXMuY2xlYXIoKTtcclxuICB9XHJcblxyXG4gIGNsZWFyICgpIHtcclxuICAgIHRoaXMudmlld3MgPSBuZXcgV2Vha01hcCgpO1xyXG4gICAgdGhpcy5wcm92aWRlcnMgPSBbXTtcclxuICAgIHRoaXMuY2xlYXJEb2N1bWVudFJlcXVlc3RzKCk7XHJcbiAgfVxyXG5cclxuICAvLyBFc3NlbnRpYWw6IEFkZCBhIHByb3ZpZGVyIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGNvbnN0cnVjdCB2aWV3cyBpbiB0aGVcclxuICAvLyB3b3Jrc3BhY2UncyB2aWV3IGxheWVyIGJhc2VkIG9uIG1vZGVsIG9iamVjdHMgaW4gaXRzIG1vZGVsIGxheWVyLlxyXG4gIC8vXHJcbiAgLy8gIyMgRXhhbXBsZXNcclxuICAvL1xyXG4gIC8vIFRleHQgZWRpdG9ycyBhcmUgZGl2aWRlZCBpbnRvIGEgbW9kZWwgYW5kIGEgdmlldyBsYXllciwgc28gd2hlbiB5b3UgaW50ZXJhY3RcclxuICAvLyB3aXRoIG1ldGhvZHMgbGlrZSBgYXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlVGV4dEVkaXRvcigpYCB5b3UncmUgb25seSBnb2luZ1xyXG4gIC8vIHRvIGdldCB0aGUgbW9kZWwgb2JqZWN0LiBXZSBkaXNwbGF5IHRleHQgZWRpdG9ycyBvbiBzY3JlZW4gYnkgdGVhY2hpbmcgdGhlXHJcbiAgLy8gd29ya3NwYWNlIHdoYXQgdmlldyBjb25zdHJ1Y3RvciBpdCBzaG91bGQgdXNlIHRvIHJlcHJlc2VudCB0aGVtOlxyXG4gIC8vXHJcbiAgLy8gYGBgY29mZmVlXHJcbiAgLy8gYXRvbS52aWV3cy5hZGRWaWV3UHJvdmlkZXIgVGV4dEVkaXRvciwgKHRleHRFZGl0b3IpIC0+XHJcbiAgLy8gICB0ZXh0RWRpdG9yRWxlbWVudCA9IG5ldyBUZXh0RWRpdG9yRWxlbWVudFxyXG4gIC8vICAgdGV4dEVkaXRvckVsZW1lbnQuaW5pdGlhbGl6ZSh0ZXh0RWRpdG9yKVxyXG4gIC8vICAgdGV4dEVkaXRvckVsZW1lbnRcclxuICAvLyBgYGBcclxuICAvL1xyXG4gIC8vICogYG1vZGVsQ29uc3RydWN0b3JgIChvcHRpb25hbCkgQ29uc3RydWN0b3Ige0Z1bmN0aW9ufSBmb3IgeW91ciBtb2RlbC4gSWZcclxuICAvLyAgIGEgY29uc3RydWN0b3IgaXMgZ2l2ZW4sIHRoZSBgY3JlYXRlVmlld2AgZnVuY3Rpb24gd2lsbCBvbmx5IGJlIHVzZWRcclxuICAvLyAgIGZvciBtb2RlbCBvYmplY3RzIGluaGVyaXRpbmcgZnJvbSB0aGF0IGNvbnN0cnVjdG9yLiBPdGhlcndpc2UsIGl0IHdpbGxcclxuICAvLyAgIHdpbGwgYmUgY2FsbGVkIGZvciBhbnkgb2JqZWN0LlxyXG4gIC8vICogYGNyZWF0ZVZpZXdgIEZhY3Rvcnkge0Z1bmN0aW9ufSB0aGF0IGlzIHBhc3NlZCBhbiBpbnN0YW5jZSBvZiB5b3VyIG1vZGVsXHJcbiAgLy8gICBhbmQgbXVzdCByZXR1cm4gYSBzdWJjbGFzcyBvZiBgSFRNTEVsZW1lbnRgIG9yIGB1bmRlZmluZWRgLiBJZiBpdCByZXR1cm5zXHJcbiAgLy8gICBgdW5kZWZpbmVkYCwgdGhlbiB0aGUgcmVnaXN0cnkgd2lsbCBjb250aW51ZSB0byBzZWFyY2ggZm9yIG90aGVyIHZpZXdcclxuICAvLyAgIHByb3ZpZGVycy5cclxuICAvL1xyXG4gIC8vIFJldHVybnMgYSB7RGlzcG9zYWJsZX0gb24gd2hpY2ggYC5kaXNwb3NlKClgIGNhbiBiZSBjYWxsZWQgdG8gcmVtb3ZlIHRoZVxyXG4gIC8vIGFkZGVkIHByb3ZpZGVyLlxyXG4gIGFkZFZpZXdQcm92aWRlciAobW9kZWxDb25zdHJ1Y3RvciwgY3JlYXRlVmlldykge1xyXG4gICAgbGV0IHByb3ZpZGVyO1xyXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgc3dpdGNoICh0eXBlb2YgbW9kZWxDb25zdHJ1Y3Rvcikge1xyXG4gICAgICAgIGNhc2UgJ2Z1bmN0aW9uJzpcclxuICAgICAgICAgIHByb3ZpZGVyID0ge2NyZWF0ZVZpZXc6IG1vZGVsQ29uc3RydWN0b3IsIG1vZGVsQ29uc3RydWN0b3I6IG51bGx9O1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnb2JqZWN0JzpcclxuICAgICAgICAgIHByb3ZpZGVyID0gbW9kZWxDb25zdHJ1Y3RvcjtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgdG8gYWRkVmlld1Byb3ZpZGVyIG11c3QgYmUgZnVuY3Rpb25zJyk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHByb3ZpZGVyID0ge21vZGVsQ29uc3RydWN0b3IsIGNyZWF0ZVZpZXd9O1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMucHJvdmlkZXJzLnB1c2gocHJvdmlkZXIpO1xyXG4gICAgcmV0dXJuIG5ldyBEaXNwb3NhYmxlKCgpID0+IHtcclxuICAgICAgdGhpcy5wcm92aWRlcnMgPSB0aGlzLnByb3ZpZGVycy5maWx0ZXIocCA9PiBwICE9PSBwcm92aWRlcik7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGdldFZpZXdQcm92aWRlckNvdW50ICgpIHtcclxuICAgIHJldHVybiB0aGlzLnByb3ZpZGVycy5sZW5ndGg7XHJcbiAgfVxyXG5cclxuICAvLyBFc3NlbnRpYWw6IEdldCB0aGUgdmlldyBhc3NvY2lhdGVkIHdpdGggYW4gb2JqZWN0IGluIHRoZSB3b3Jrc3BhY2UuXHJcbiAgLy9cclxuICAvLyBJZiB5b3UncmUganVzdCAqdXNpbmcqIHRoZSB3b3Jrc3BhY2UsIHlvdSBzaG91bGRuJ3QgbmVlZCB0byBhY2Nlc3MgdGhlIHZpZXdcclxuICAvLyBsYXllciwgYnV0IHZpZXcgbGF5ZXIgYWNjZXNzIG1heSBiZSBuZWNlc3NhcnkgaWYgeW91IHdhbnQgdG8gcGVyZm9ybSBET01cclxuICAvLyBtYW5pcHVsYXRpb24gdGhhdCBpc24ndCBzdXBwb3J0ZWQgdmlhIHRoZSBtb2RlbCBBUEkuXHJcbiAgLy9cclxuICAvLyAjIyBWaWV3IFJlc29sdXRpb24gQWxnb3JpdGhtXHJcbiAgLy9cclxuICAvLyBUaGUgdmlldyBhc3NvY2lhdGVkIHdpdGggdGhlIG9iamVjdCBpcyByZXNvbHZlZCB1c2luZyB0aGUgZm9sbG93aW5nXHJcbiAgLy8gc2VxdWVuY2VcclxuICAvL1xyXG4gIC8vICAxLiBJcyB0aGUgb2JqZWN0IGFuIGluc3RhbmNlIG9mIGBIVE1MRWxlbWVudGA/IElmIHRydWUsIHJldHVybiB0aGUgb2JqZWN0LlxyXG4gIC8vICAyLiBEb2VzIHRoZSBvYmplY3QgaGF2ZSBhIG1ldGhvZCBuYW1lZCBgZ2V0RWxlbWVudGAgdGhhdCByZXR1cm5zIGFuXHJcbiAgLy8gICAgIGluc3RhbmNlIG9mIGBIVE1MRWxlbWVudGA/IElmIHRydWUsIHJldHVybiB0aGF0IHZhbHVlLlxyXG4gIC8vICAzLiBEb2VzIHRoZSBvYmplY3QgaGF2ZSBhIHByb3BlcnR5IG5hbWVkIGBlbGVtZW50YCB3aXRoIGEgdmFsdWUgd2hpY2ggaXNcclxuICAvLyAgICAgYW4gaW5zdGFuY2Ugb2YgYEhUTUxFbGVtZW50YD8gSWYgdHJ1ZSwgcmV0dXJuIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cclxuICAvLyAgNC4gSXMgdGhlIG9iamVjdCBhIGpRdWVyeSBvYmplY3QsIGluZGljYXRlZCBieSB0aGUgcHJlc2VuY2Ugb2YgYSBganF1ZXJ5YFxyXG4gIC8vICAgICBwcm9wZXJ0eT8gSWYgdHJ1ZSwgcmV0dXJuIHRoZSByb290IERPTSBlbGVtZW50IChpLmUuIGBvYmplY3RbMF1gKS5cclxuICAvLyAgNS4gSGFzIGEgdmlldyBwcm92aWRlciBiZWVuIHJlZ2lzdGVyZWQgZm9yIHRoZSBvYmplY3Q/IElmIHRydWUsIHVzZSB0aGVcclxuICAvLyAgICAgcHJvdmlkZXIgdG8gY3JlYXRlIGEgdmlldyBhc3NvY2lhdGVkIHdpdGggdGhlIG9iamVjdCwgYW5kIHJldHVybiB0aGVcclxuICAvLyAgICAgdmlldy5cclxuICAvL1xyXG4gIC8vIElmIG5vIGFzc29jaWF0ZWQgdmlldyBpcyByZXR1cm5lZCBieSB0aGUgc2VxdWVuY2UgYW4gZXJyb3IgaXMgdGhyb3duLlxyXG4gIC8vXHJcbiAgLy8gUmV0dXJucyBhIERPTSBlbGVtZW50LlxyXG4gIGdldFZpZXcgKG9iamVjdCk6IENvbXBvbmVudFJlZjxhbnk+IHtcclxuICAgIGlmIChvYmplY3QgPT0gbnVsbCkgeyByZXR1cm47IH1cclxuXHJcbiAgICBsZXQgdmlldyA9IHRoaXMudmlld3MuZ2V0KG9iamVjdCk7XHJcbiAgICBpZiAoIXZpZXcpIHtcclxuICAgICAgdmlldyA9IHRoaXMuY3JlYXRlVmlldyhvYmplY3QpO1xyXG4gICAgICB0aGlzLnZpZXdzLnNldChvYmplY3QsIHZpZXcpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZpZXc7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVWaWV3IChvYmplY3QpOiBDb21wb25lbnRSZWY8YW55PiB7XHJcbiAgICBpZiAob2JqZWN0IGluc3RhbmNlb2YgQ29tcG9uZW50UmVmKSB7IHJldHVybiBvYmplY3Q7IH1cclxuXHJcbiAgICBsZXQgZWxlbWVudDtcclxuICAgIGlmIChvYmplY3QgJiYgKHR5cGVvZiBvYmplY3QuZ2V0RWxlbWVudCA9PT0gJ2Z1bmN0aW9uJykpIHtcclxuICAgICAgZWxlbWVudCA9IG9iamVjdC5nZXRFbGVtZW50KCk7XHJcbiAgICAgIGlmIChlbGVtZW50IGluc3RhbmNlb2YgQ29tcG9uZW50UmVmKSB7XHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAob2JqZWN0ICYmIG9iamVjdC5lbGVtZW50IGluc3RhbmNlb2YgQ29tcG9uZW50UmVmKSB7XHJcbiAgICAgIHJldHVybiBvYmplY3QuZWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBpZiAob2JqZWN0ICYmIG9iamVjdC5qcXVlcnkpIHtcclxuICAgIC8vICAgcmV0dXJuIG9iamVjdFswXTtcclxuICAgIC8vIH1cclxuXHJcbiAgICBmb3IgKGNvbnN0IHByb3ZpZGVyIG9mIHRoaXMucHJvdmlkZXJzKSB7XHJcbiAgICAgIGlmIChwcm92aWRlci5tb2RlbENvbnN0cnVjdG9yID09PSBudWxsKSB7XHJcbiAgICAgICAgZWxlbWVudCA9IHByb3ZpZGVyLmNyZWF0ZVZpZXcob2JqZWN0LCB0aGlzLmdzcEVudmlyb25tZW50KTtcclxuICAgICAgICBpZiAoZWxlbWVudCkgeyByZXR1cm4gZWxlbWVudDsgfVxyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAob2JqZWN0IGluc3RhbmNlb2YgcHJvdmlkZXIubW9kZWxDb25zdHJ1Y3Rvcikge1xyXG4gICAgICAgIGVsZW1lbnQgPSBwcm92aWRlci5jcmVhdGVWaWV3ICYmIHByb3ZpZGVyLmNyZWF0ZVZpZXcob2JqZWN0LCB0aGlzLmdzcEVudmlyb25tZW50KTtcclxuICAgICAgICBpZiAoZWxlbWVudCkgeyByZXR1cm4gZWxlbWVudDsgfVxyXG5cclxuICAgICAgICBjb25zdCBWaWV3Q29uc3RydWN0b3IgPSBwcm92aWRlci52aWV3Q29uc3RydWN0b3I7XHJcbiAgICAgICAgaWYgKFZpZXdDb25zdHJ1Y3Rvcikge1xyXG4gICAgICAgICAgZWxlbWVudCA9IG5ldyBWaWV3Q29uc3RydWN0b3IoKTtcclxuICAgICAgICAgIGlmIChlbGVtZW50LmluaXRpYWxpemUpIHtcclxuICAgICAgICAgICAgZWxlbWVudC5pbml0aWFsaXplKG9iamVjdCk7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQuc2V0TW9kZWwpIHtcclxuICAgICAgICAgICAgZWxlbWVudC5zZXRNb2RlbChvYmplY3QpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG9iamVjdCAmJiBvYmplY3QuZ2V0Vmlld0NsYXNzKSB7XHJcbiAgICAgIGNvbnN0IFZpZXdDb25zdHJ1Y3RvciA9IG9iamVjdC5nZXRWaWV3Q2xhc3MoKTtcclxuICAgICAgaWYgKFZpZXdDb25zdHJ1Y3Rvcikge1xyXG4gICAgICAgIGNvbnN0IHZpZXcgPSBuZXcgVmlld0NvbnN0cnVjdG9yKG9iamVjdCk7XHJcbiAgICAgICAgcmV0dXJuIHZpZXc7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENhbid0IGNyZWF0ZSBhIHZpZXcgZm9yICR7b2JqZWN0LmNvbnN0cnVjdG9yLm5hbWV9IGluc3RhbmNlLiBQbGVhc2UgcmVnaXN0ZXIgYSB2aWV3IHByb3ZpZGVyLmApO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlRG9jdW1lbnQgKGZuKSB7XHJcbiAgICAvLyB0aGlzLmRvY3VtZW50V3JpdGVycy5wdXNoKGZuKVxyXG4gICAgLy8gaWYgKCF0aGlzLmRvY3VtZW50UmVhZEluUHJvZ3Jlc3MpIHsgdGhpcy5yZXF1ZXN0RG9jdW1lbnRVcGRhdGUoKSB9XHJcbiAgICAvLyByZXR1cm4gbmV3IERpc3Bvc2FibGUoKCkgPT4ge1xyXG4gICAgLy8gICB0aGlzLmRvY3VtZW50V3JpdGVycyA9IHRoaXMuZG9jdW1lbnRXcml0ZXJzLmZpbHRlcih3cml0ZXIgPT4gd3JpdGVyICE9PSBmbilcclxuICAgIC8vIH0pXHJcbiAgfVxyXG5cclxuICByZWFkRG9jdW1lbnQgKGZuKSB7XHJcbiAgICAvLyB0aGlzLmRvY3VtZW50UmVhZGVycy5wdXNoKGZuKVxyXG4gICAgLy8gdGhpcy5yZXF1ZXN0RG9jdW1lbnRVcGRhdGUoKVxyXG4gICAgLy8gcmV0dXJuIG5ldyBEaXNwb3NhYmxlKCgpID0+IHtcclxuICAgIC8vICAgdGhpcy5kb2N1bWVudFJlYWRlcnMgPSB0aGlzLmRvY3VtZW50UmVhZGVycy5maWx0ZXIocmVhZGVyID0+IHJlYWRlciAhPT0gZm4pXHJcbiAgICAvLyB9KVxyXG4gIH1cclxuXHJcbiAgZ2V0TmV4dFVwZGF0ZVByb21pc2UgKCkge1xyXG4gICAgLy8gaWYgKHRoaXMubmV4dFVwZGF0ZVByb21pc2UgPT0gbnVsbCkge1xyXG4gICAgLy8gICB0aGlzLm5leHRVcGRhdGVQcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICAvLyAgICAgdGhpcy5yZXNvbHZlTmV4dFVwZGF0ZVByb21pc2UgPSByZXNvbHZlXHJcbiAgICAvLyAgIH0pXHJcbiAgICAvLyB9XHJcblxyXG4gICAgLy8gcmV0dXJuIHRoaXMubmV4dFVwZGF0ZVByb21pc2VcclxuICB9XHJcblxyXG4gIGNsZWFyRG9jdW1lbnRSZXF1ZXN0cyAoKSB7XHJcbiAgICAvLyB0aGlzLmRvY3VtZW50UmVhZGVycyA9IFtdXHJcbiAgICAvLyB0aGlzLmRvY3VtZW50V3JpdGVycyA9IFtdXHJcbiAgICAvLyB0aGlzLm5leHRVcGRhdGVQcm9taXNlID0gbnVsbFxyXG4gICAgLy8gdGhpcy5yZXNvbHZlTmV4dFVwZGF0ZVByb21pc2UgPSBudWxsXHJcbiAgICAvLyBpZiAodGhpcy5hbmltYXRpb25GcmFtZVJlcXVlc3QgIT0gbnVsbCkge1xyXG4gICAgLy8gICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLmFuaW1hdGlvbkZyYW1lUmVxdWVzdClcclxuICAgIC8vICAgdGhpcy5hbmltYXRpb25GcmFtZVJlcXVlc3QgPSBudWxsXHJcbiAgICAvLyB9XHJcbiAgfVxyXG5cclxuICByZXF1ZXN0RG9jdW1lbnRVcGRhdGUgKCkge1xyXG4gICAgLy8gaWYgKHRoaXMuYW5pbWF0aW9uRnJhbWVSZXF1ZXN0ID09IG51bGwpIHtcclxuICAgIC8vICAgdGhpcy5hbmltYXRpb25GcmFtZVJlcXVlc3QgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5wZXJmb3JtRG9jdW1lbnRVcGRhdGUpXHJcbiAgICAvLyB9XHJcbiAgfVxyXG5cclxuICBwZXJmb3JtRG9jdW1lbnRVcGRhdGUgKCkge1xyXG4gICAgLy8gY29uc3QgeyByZXNvbHZlTmV4dFVwZGF0ZVByb21pc2UgfSA9IHRoaXNcclxuICAgIC8vIHRoaXMuYW5pbWF0aW9uRnJhbWVSZXF1ZXN0ID0gbnVsbFxyXG4gICAgLy8gdGhpcy5uZXh0VXBkYXRlUHJvbWlzZSA9IG51bGxcclxuICAgIC8vIHRoaXMucmVzb2x2ZU5leHRVcGRhdGVQcm9taXNlID0gbnVsbFxyXG5cclxuICAgIC8vIHZhciB3cml0ZXIgPSB0aGlzLmRvY3VtZW50V3JpdGVycy5zaGlmdCgpXHJcbiAgICAvLyB3aGlsZSAod3JpdGVyKSB7XHJcbiAgICAvLyAgIHdyaXRlcigpXHJcbiAgICAvLyAgIHdyaXRlciA9IHRoaXMuZG9jdW1lbnRXcml0ZXJzLnNoaWZ0KClcclxuICAgIC8vIH1cclxuXHJcbiAgICAvLyB2YXIgcmVhZGVyID0gdGhpcy5kb2N1bWVudFJlYWRlcnMuc2hpZnQoKVxyXG4gICAgLy8gdGhpcy5kb2N1bWVudFJlYWRJblByb2dyZXNzID0gdHJ1ZVxyXG4gICAgLy8gd2hpbGUgKHJlYWRlcikge1xyXG4gICAgLy8gICByZWFkZXIoKVxyXG4gICAgLy8gICByZWFkZXIgPSB0aGlzLmRvY3VtZW50UmVhZGVycy5zaGlmdCgpXHJcbiAgICAvLyB9XHJcbiAgICAvLyB0aGlzLmRvY3VtZW50UmVhZEluUHJvZ3Jlc3MgPSBmYWxzZVxyXG5cclxuICAgIC8vIC8vIHByb2Nlc3MgdXBkYXRlcyByZXF1ZXN0ZWQgYXMgYSByZXN1bHQgb2YgcmVhZHNcclxuICAgIC8vIHdyaXRlciA9IHRoaXMuZG9jdW1lbnRXcml0ZXJzLnNoaWZ0KClcclxuICAgIC8vIHdoaWxlICh3cml0ZXIpIHtcclxuICAgIC8vICAgd3JpdGVyKClcclxuICAgIC8vICAgd3JpdGVyID0gdGhpcy5kb2N1bWVudFdyaXRlcnMuc2hpZnQoKVxyXG4gICAgLy8gfVxyXG5cclxuICAgIC8vIGlmIChyZXNvbHZlTmV4dFVwZGF0ZVByb21pc2UpIHsgcmVzb2x2ZU5leHRVcGRhdGVQcm9taXNlKCkgfVxyXG4gIH1cclxufVxyXG4iXX0=