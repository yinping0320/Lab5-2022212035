/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Emitter } from './event-kit';
/**
 * @record
 */
export function PanelOptions() { }
if (false) {
    /** @type {?} */
    PanelOptions.prototype.item;
    /** @type {?|undefined} */
    PanelOptions.prototype.autoFocus;
    /** @type {?|undefined} */
    PanelOptions.prototype.visible;
    /** @type {?|undefined} */
    PanelOptions.prototype.priority;
    /** @type {?|undefined} */
    PanelOptions.prototype.className;
}
var Panel = /** @class */ (function () {
    function Panel(options, viewRegistry) {
        this.destroyed = false;
        this.item = options.item;
        this.autoFocus = options.autoFocus == null ? false : options.autoFocus;
        this.visible = options.visible == null ? true : options.visible;
        this.priority = options.priority == null ? 100 : options.priority;
        this.className = options.className;
        this.viewRegistry = viewRegistry;
        this.emitter = new Emitter();
    }
    // Public: Destroy and remove this panel from the UI.
    // Public: Destroy and remove this panel from the UI.
    /**
     * @return {?}
     */
    Panel.prototype.destroy = 
    // Public: Destroy and remove this panel from the UI.
    /**
     * @return {?}
     */
    function () {
        if (this.destroyed) {
            return;
        }
        this.destroyed = true;
        this.hide();
        this.emitter.emit('did-destroy', this);
        return this.emitter.dispose();
    };
    /**
     * @return {?}
     */
    Panel.prototype.getElement = /**
     * @return {?}
     */
    function () {
        return this.item.getElement(); // 直接返回item的视图，不再包装一层Panel
    };
    /*
    Section: Event Subscription
    */
    // Public: Invoke the given callback when the pane hidden or shown.
    //
    // * `callback` {Function} to be called when the pane is destroyed.
    //   * `visible` {Boolean} true when the panel has been shown
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /*
      Section: Event Subscription
      */
    // Public: Invoke the given callback when the pane hidden or shown.
    //
    // * `callback` {Function} to be called when the pane is destroyed.
    //   * `visible` {Boolean} true when the panel has been shown
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    Panel.prototype.onDidChangeVisible = /*
      Section: Event Subscription
      */
    // Public: Invoke the given callback when the pane hidden or shown.
    //
    // * `callback` {Function} to be called when the pane is destroyed.
    //   * `visible` {Boolean} true when the panel has been shown
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.emitter.on('did-change-visible', callback);
    };
    // Public: Invoke the given callback when the pane is destroyed.
    //
    // * `callback` {Function} to be called when the pane is destroyed.
    //   * `panel` {Panel} this panel
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    // Public: Invoke the given callback when the pane is destroyed.
    //
    // * `callback` {Function} to be called when the pane is destroyed.
    //   * `panel` {Panel} this panel
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    Panel.prototype.onDidDestroy = 
    // Public: Invoke the given callback when the pane is destroyed.
    //
    // * `callback` {Function} to be called when the pane is destroyed.
    //   * `panel` {Panel} this panel
    //
    // Returns a {Disposable} on which `.dispose()` can be called to unsubscribe.
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.emitter.once('did-destroy', callback);
    };
    /*
    Section: Panel Details
    */
    // Public: Returns the panel's item.
    /*
      Section: Panel Details
      */
    // Public: Returns the panel's item.
    /**
     * @return {?}
     */
    Panel.prototype.getItem = /*
      Section: Panel Details
      */
    // Public: Returns the panel's item.
    /**
     * @return {?}
     */
    function () {
        return this.item;
    };
    // Public: Returns a {Number} indicating this panel's priority.
    // Public: Returns a {Number} indicating this panel's priority.
    /**
     * @return {?}
     */
    Panel.prototype.getPriority = 
    // Public: Returns a {Number} indicating this panel's priority.
    /**
     * @return {?}
     */
    function () {
        return this.priority;
    };
    /**
     * @return {?}
     */
    Panel.prototype.getClassName = /**
     * @return {?}
     */
    function () {
        return this.className;
    };
    // Public: Returns a {Boolean} true when the panel is visible.
    // Public: Returns a {Boolean} true when the panel is visible.
    /**
     * @return {?}
     */
    Panel.prototype.isVisible = 
    // Public: Returns a {Boolean} true when the panel is visible.
    /**
     * @return {?}
     */
    function () {
        return this.visible;
    };
    // Public: Hide this panel
    // Public: Hide this panel
    /**
     * @return {?}
     */
    Panel.prototype.hide = 
    // Public: Hide this panel
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var wasVisible = this.visible;
        this.visible = false;
        if (wasVisible) {
            this.emitter.emit('did-change-visible', this.visible);
        }
    };
    // Public: Show this panel
    // Public: Show this panel
    /**
     * @return {?}
     */
    Panel.prototype.show = 
    // Public: Show this panel
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var wasVisible = this.visible;
        this.visible = true;
        if (!wasVisible) {
            this.emitter.emit('did-change-visible', this.visible);
        }
    };
    return Panel;
}());
export { Panel };
if (false) {
    /** @type {?} */
    Panel.prototype.destroyed;
    /** @type {?} */
    Panel.prototype.item;
    /** @type {?} */
    Panel.prototype.autoFocus;
    /** @type {?} */
    Panel.prototype.visible;
    /** @type {?} */
    Panel.prototype.priority;
    /** @type {?} */
    Panel.prototype.className;
    /** @type {?} */
    Panel.prototype.viewRegistry;
    /**
     * @type {?}
     * @private
     */
    Panel.prototype.emitter;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFuZWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2lkZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvaWRlZnJhbWV3b3JrL2dzcC9wYW5lbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFFLE9BQU8sRUFBYyxNQUFNLGFBQWEsQ0FBQzs7OztBQUVsRCxrQ0FNQzs7O0lBTEMsNEJBQVU7O0lBQ1YsaUNBQW9COztJQUNwQiwrQkFBa0I7O0lBQ2xCLGdDQUFrQjs7SUFDbEIsaUNBQW1COztBQUdyQjtJQWFFLGVBQVksT0FBcUIsRUFBRSxZQUEwQjtRQUMzRCxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztRQUN2QixJQUFJLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFDekIsSUFBSSxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztRQUNoRSxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUM7UUFDbEUsSUFBSSxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBQ25DLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRUQscURBQXFEOzs7OztJQUNyRCx1QkFBTzs7Ozs7SUFBUDtRQUNFLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNsQixPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDWixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDdkMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2hDLENBQUM7Ozs7SUFFRCwwQkFBVTs7O0lBQVY7UUFDRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQywwQkFBMEI7SUFDM0QsQ0FBQztJQUVEOztNQUVFO0lBRUYsbUVBQW1FO0lBQ25FLEVBQUU7SUFDRixtRUFBbUU7SUFDbkUsNkRBQTZEO0lBQzdELEVBQUU7SUFDRiw2RUFBNkU7Ozs7Ozs7Ozs7Ozs7O0lBQzdFLGtDQUFrQjs7Ozs7Ozs7Ozs7OztJQUFsQixVQUFtQixRQUFRO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsb0JBQW9CLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVELGdFQUFnRTtJQUNoRSxFQUFFO0lBQ0YsbUVBQW1FO0lBQ25FLGlDQUFpQztJQUNqQyxFQUFFO0lBQ0YsNkVBQTZFOzs7Ozs7Ozs7OztJQUM3RSw0QkFBWTs7Ozs7Ozs7Ozs7SUFBWixVQUFhLFFBQVE7UUFDbkIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVEOztNQUVFO0lBRUYsb0NBQW9DOzs7Ozs7OztJQUNwQyx1QkFBTzs7Ozs7OztJQUFQO1FBQ0UsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ25CLENBQUM7SUFFRCwrREFBK0Q7Ozs7O0lBQy9ELDJCQUFXOzs7OztJQUFYO1FBQ0UsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7Ozs7SUFFRCw0QkFBWTs7O0lBQVo7UUFDRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQztJQUVELDhEQUE4RDs7Ozs7SUFDOUQseUJBQVM7Ozs7O0lBQVQ7UUFDRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUVELDBCQUEwQjs7Ozs7SUFDMUIsb0JBQUk7Ozs7O0lBQUo7O1lBQ1EsVUFBVSxHQUFHLElBQUksQ0FBQyxPQUFPO1FBQy9CLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLElBQUksVUFBVSxFQUFFO1lBQ2QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3ZEO0lBQ0gsQ0FBQztJQUVELDBCQUEwQjs7Ozs7SUFDMUIsb0JBQUk7Ozs7O0lBQUo7O1lBQ1EsVUFBVSxHQUFHLElBQUksQ0FBQyxPQUFPO1FBQy9CLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDZixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDdkQ7SUFDSCxDQUFDO0lBQ0gsWUFBQztBQUFELENBQUMsQUF2R0QsSUF1R0M7Ozs7SUFuR0MsMEJBQW1COztJQUNuQixxQkFBVTs7SUFDViwwQkFBbUI7O0lBQ25CLHdCQUFpQjs7SUFDakIseUJBQWlCOztJQUNqQiwwQkFBa0I7O0lBQ2xCLDZCQUFrQjs7Ozs7SUFDbEIsd0JBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmlld1JlZ2lzdHJ5IH0gZnJvbSAnLi92aWV3LXJlZ2lzdHJ5JztcclxuaW1wb3J0IHsgRW1pdHRlciwgRGlzcG9zYWJsZSB9IGZyb20gJy4vZXZlbnQta2l0JztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUGFuZWxPcHRpb25zIHtcclxuICBpdGVtOiBhbnk7XHJcbiAgYXV0b0ZvY3VzPzogYm9vbGVhbjtcclxuICB2aXNpYmxlPzogYm9vbGVhbjtcclxuICBwcmlvcml0eT86IG51bWJlcjtcclxuICBjbGFzc05hbWU/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBQYW5lbCB7XHJcbiAgLypcclxuICBTZWN0aW9uOiBDb25zdHJ1Y3Rpb24gYW5kIERlc3RydWN0aW9uXHJcbiAgKi9cclxuICBkZXN0cm95ZWQ6IGJvb2xlYW47XHJcbiAgaXRlbTogYW55O1xyXG4gIGF1dG9Gb2N1czogYm9vbGVhbjtcclxuICB2aXNpYmxlOiBib29sZWFuO1xyXG4gIHByaW9yaXR5OiBudW1iZXI7XHJcbiAgY2xhc3NOYW1lOiBzdHJpbmc7XHJcbiAgdmlld1JlZ2lzdHJ5OiBhbnk7XHJcbiAgcHJpdmF0ZSBlbWl0dGVyOiBFbWl0dGVyO1xyXG5cclxuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBQYW5lbE9wdGlvbnMsIHZpZXdSZWdpc3RyeTogVmlld1JlZ2lzdHJ5KSB7XHJcbiAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xyXG4gICAgdGhpcy5pdGVtID0gb3B0aW9ucy5pdGVtO1xyXG4gICAgdGhpcy5hdXRvRm9jdXMgPSBvcHRpb25zLmF1dG9Gb2N1cyA9PSBudWxsID8gZmFsc2UgOiBvcHRpb25zLmF1dG9Gb2N1cztcclxuICAgIHRoaXMudmlzaWJsZSA9IG9wdGlvbnMudmlzaWJsZSA9PSBudWxsID8gdHJ1ZSA6IG9wdGlvbnMudmlzaWJsZTtcclxuICAgIHRoaXMucHJpb3JpdHkgPSBvcHRpb25zLnByaW9yaXR5ID09IG51bGwgPyAxMDAgOiBvcHRpb25zLnByaW9yaXR5O1xyXG4gICAgdGhpcy5jbGFzc05hbWUgPSBvcHRpb25zLmNsYXNzTmFtZTtcclxuICAgIHRoaXMudmlld1JlZ2lzdHJ5ID0gdmlld1JlZ2lzdHJ5O1xyXG4gICAgdGhpcy5lbWl0dGVyID0gbmV3IEVtaXR0ZXIoKTtcclxuICB9XHJcblxyXG4gIC8vIFB1YmxpYzogRGVzdHJveSBhbmQgcmVtb3ZlIHRoaXMgcGFuZWwgZnJvbSB0aGUgVUkuXHJcbiAgZGVzdHJveSgpIHtcclxuICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLmRlc3Ryb3llZCA9IHRydWU7XHJcbiAgICB0aGlzLmhpZGUoKTtcclxuICAgIHRoaXMuZW1pdHRlci5lbWl0KCdkaWQtZGVzdHJveScsIHRoaXMpO1xyXG4gICAgcmV0dXJuIHRoaXMuZW1pdHRlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG5cclxuICBnZXRFbGVtZW50KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuaXRlbS5nZXRFbGVtZW50KCk7IC8vIOebtOaOpei/lOWbnml0ZW3nmoTop4blm77vvIzkuI3lho3ljIXoo4XkuIDlsYJQYW5lbFxyXG4gIH1cclxuXHJcbiAgLypcclxuICBTZWN0aW9uOiBFdmVudCBTdWJzY3JpcHRpb25cclxuICAqL1xyXG5cclxuICAvLyBQdWJsaWM6IEludm9rZSB0aGUgZ2l2ZW4gY2FsbGJhY2sgd2hlbiB0aGUgcGFuZSBoaWRkZW4gb3Igc2hvd24uXHJcbiAgLy9cclxuICAvLyAqIGBjYWxsYmFja2Age0Z1bmN0aW9ufSB0byBiZSBjYWxsZWQgd2hlbiB0aGUgcGFuZSBpcyBkZXN0cm95ZWQuXHJcbiAgLy8gICAqIGB2aXNpYmxlYCB7Qm9vbGVhbn0gdHJ1ZSB3aGVuIHRoZSBwYW5lbCBoYXMgYmVlbiBzaG93blxyXG4gIC8vXHJcbiAgLy8gUmV0dXJucyBhIHtEaXNwb3NhYmxlfSBvbiB3aGljaCBgLmRpc3Bvc2UoKWAgY2FuIGJlIGNhbGxlZCB0byB1bnN1YnNjcmliZS5cclxuICBvbkRpZENoYW5nZVZpc2libGUoY2FsbGJhY2spIHtcclxuICAgIHJldHVybiB0aGlzLmVtaXR0ZXIub24oJ2RpZC1jaGFuZ2UtdmlzaWJsZScsIGNhbGxiYWNrKTtcclxuICB9XHJcblxyXG4gIC8vIFB1YmxpYzogSW52b2tlIHRoZSBnaXZlbiBjYWxsYmFjayB3aGVuIHRoZSBwYW5lIGlzIGRlc3Ryb3llZC5cclxuICAvL1xyXG4gIC8vICogYGNhbGxiYWNrYCB7RnVuY3Rpb259IHRvIGJlIGNhbGxlZCB3aGVuIHRoZSBwYW5lIGlzIGRlc3Ryb3llZC5cclxuICAvLyAgICogYHBhbmVsYCB7UGFuZWx9IHRoaXMgcGFuZWxcclxuICAvL1xyXG4gIC8vIFJldHVybnMgYSB7RGlzcG9zYWJsZX0gb24gd2hpY2ggYC5kaXNwb3NlKClgIGNhbiBiZSBjYWxsZWQgdG8gdW5zdWJzY3JpYmUuXHJcbiAgb25EaWREZXN0cm95KGNhbGxiYWNrKTogRGlzcG9zYWJsZSB7XHJcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyLm9uY2UoJ2RpZC1kZXN0cm95JywgY2FsbGJhY2spO1xyXG4gIH1cclxuXHJcbiAgLypcclxuICBTZWN0aW9uOiBQYW5lbCBEZXRhaWxzXHJcbiAgKi9cclxuXHJcbiAgLy8gUHVibGljOiBSZXR1cm5zIHRoZSBwYW5lbCdzIGl0ZW0uXHJcbiAgZ2V0SXRlbSgpIHtcclxuICAgIHJldHVybiB0aGlzLml0ZW07XHJcbiAgfVxyXG5cclxuICAvLyBQdWJsaWM6IFJldHVybnMgYSB7TnVtYmVyfSBpbmRpY2F0aW5nIHRoaXMgcGFuZWwncyBwcmlvcml0eS5cclxuICBnZXRQcmlvcml0eSgpIHtcclxuICAgIHJldHVybiB0aGlzLnByaW9yaXR5O1xyXG4gIH1cclxuXHJcbiAgZ2V0Q2xhc3NOYW1lKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY2xhc3NOYW1lO1xyXG4gIH1cclxuXHJcbiAgLy8gUHVibGljOiBSZXR1cm5zIGEge0Jvb2xlYW59IHRydWUgd2hlbiB0aGUgcGFuZWwgaXMgdmlzaWJsZS5cclxuICBpc1Zpc2libGUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy52aXNpYmxlO1xyXG4gIH1cclxuXHJcbiAgLy8gUHVibGljOiBIaWRlIHRoaXMgcGFuZWxcclxuICBoaWRlKCkge1xyXG4gICAgY29uc3Qgd2FzVmlzaWJsZSA9IHRoaXMudmlzaWJsZTtcclxuICAgIHRoaXMudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgaWYgKHdhc1Zpc2libGUpIHtcclxuICAgICAgdGhpcy5lbWl0dGVyLmVtaXQoJ2RpZC1jaGFuZ2UtdmlzaWJsZScsIHRoaXMudmlzaWJsZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBQdWJsaWM6IFNob3cgdGhpcyBwYW5lbFxyXG4gIHNob3coKSB7XHJcbiAgICBjb25zdCB3YXNWaXNpYmxlID0gdGhpcy52aXNpYmxlO1xyXG4gICAgdGhpcy52aXNpYmxlID0gdHJ1ZTtcclxuICAgIGlmICghd2FzVmlzaWJsZSkge1xyXG4gICAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnZGlkLWNoYW5nZS12aXNpYmxlJywgdGhpcy52aXNpYmxlKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19