/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { CompositeDisposable, Emitter } from './event-kit';
var PanelContainer = /** @class */ (function () {
    function PanelContainer(viewRegistry, location, dock) {
        if (dock === void 0) { dock = null; }
        this.viewRegistry = viewRegistry;
        this.location = location;
        this.dock = dock;
        this.panels = [];
        this.emitter = new Emitter();
        this.subscriptions = new CompositeDisposable();
    }
    /**
     * @return {?}
     */
    PanelContainer.prototype.destroy = /**
     * @return {?}
     */
    function () {
        var e_1, _a;
        try {
            for (var _b = tslib_1.__values(this.getPanels()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var panel = _c.value;
                panel.destroy();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * @return {?}
     */
    PanelContainer.prototype.getElement = /**
     * @return {?}
     */
    function () {
    };
    /*
    Section: Event Subscription
    */
    /*
      Section: Event Subscription
      */
    /**
     * @param {?} callback
     * @return {?}
     */
    PanelContainer.prototype.onDidAddPanel = /*
      Section: Event Subscription
      */
    /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.emitter.on('did-add-panel', callback);
    };
    /**
     * @param {?} callback
     * @return {?}
     */
    PanelContainer.prototype.onDidRemovePanel = /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.emitter.on('did-remove-panel', callback);
    };
    /**
     * @param {?} callback
     * @return {?}
     */
    PanelContainer.prototype.onDidDestroy = /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        return this.emitter.once('did-destroy', callback);
    };
    /**
     * @return {?}
     */
    PanelContainer.prototype.getLocation = /**
     * @return {?}
     */
    function () {
        return this.location;
    };
    /**
     * @return {?}
     */
    PanelContainer.prototype.isModal = /**
     * @return {?}
     */
    function () { return this.location === 'modal'; };
    /**
     * @return {?}
     */
    PanelContainer.prototype.getPanels = /**
     * @return {?}
     */
    function () { return this.panels.slice(); };
    /**
     * @param {?} panel
     * @return {?}
     */
    PanelContainer.prototype.addPanel = /**
     * @param {?} panel
     * @return {?}
     */
    function (panel) {
        this.subscriptions.add(panel.onDidDestroy(this.panelDestroyed.bind(this)));
        /** @type {?} */
        var index = this.getPanelIndex(panel);
        if (index === this.panels.length) {
            this.panels.push(panel);
        }
        else {
            this.panels.splice(index, 0, panel);
        }
        this.emitter.emit('did-add-panel', { panel: panel, index: index });
        return panel;
    };
    /**
     * @param {?} item
     * @return {?}
     */
    PanelContainer.prototype.panelForItem = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        var e_2, _a;
        try {
            for (var _b = tslib_1.__values(this.panels), _c = _b.next(); !_c.done; _c = _b.next()) {
                var panel = _c.value;
                if (panel.getItem() === item) {
                    return panel;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return null;
    };
    /**
     * @param {?} panel
     * @return {?}
     */
    PanelContainer.prototype.panelDestroyed = /**
     * @param {?} panel
     * @return {?}
     */
    function (panel) {
        /** @type {?} */
        var index = this.panels.indexOf(panel);
        if (index > -1) {
            this.panels.splice(index, 1);
            this.emitter.emit('did-remove-panel', { panel: panel, index: index });
        }
    };
    /**
     * @param {?} panel
     * @return {?}
     */
    PanelContainer.prototype.getPanelIndex = /**
     * @param {?} panel
     * @return {?}
     */
    function (panel) {
        var _this = this;
        /** @type {?} */
        var priority = panel.getPriority();
        if (['bottom', 'right'].find(function (item) { return item === _this.location; })) {
            for (var i = this.panels.length - 1; i >= 0; i--) {
                /** @type {?} */
                var p = this.panels[i];
                if (priority < p.getPriority()) {
                    return i + 1;
                }
            }
            return 0;
        }
        else {
            for (var i = 0; i < this.panels.length; i++) {
                /** @type {?} */
                var p = this.panels[i];
                if (priority < p.getPriority()) {
                    return i;
                }
            }
            return this.panels.length;
        }
    };
    return PanelContainer;
}());
export { PanelContainer };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PanelContainer.prototype.emitter;
    /**
     * @type {?}
     * @private
     */
    PanelContainer.prototype.subscriptions;
    /** @type {?} */
    PanelContainer.prototype.panels;
    /**
     * @type {?}
     * @private
     */
    PanelContainer.prototype.viewRegistry;
    /**
     * @type {?}
     * @private
     */
    PanelContainer.prototype.location;
    /**
     * @type {?}
     * @private
     */
    PanelContainer.prototype.dock;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFuZWwtY29udGFpbmVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9pZGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2lkZWZyYW1ld29yay9nc3AvcGFuZWwtY29udGFpbmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBSUEsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE9BQU8sRUFBYyxNQUFNLGFBQWEsQ0FBQztBQUV2RTtJQU1FLHdCQUNVLFlBQTBCLEVBQzFCLFFBQXVCLEVBQ3ZCLElBQWlCO1FBQWpCLHFCQUFBLEVBQUEsV0FBaUI7UUFGakIsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDMUIsYUFBUSxHQUFSLFFBQVEsQ0FBZTtRQUN2QixTQUFJLEdBQUosSUFBSSxDQUFhO1FBTDNCLFdBQU0sR0FBWSxFQUFFLENBQUM7UUFNakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQzdCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxtQkFBbUIsRUFBRSxDQUFDO0lBQ2pELENBQUM7Ozs7SUFFSCxnQ0FBTzs7O0lBQVA7OztZQUNFLEtBQW9CLElBQUEsS0FBQSxpQkFBQSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUEsZ0JBQUEsNEJBQUU7Z0JBQWpDLElBQU0sS0FBSyxXQUFBO2dCQUNkLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQzthQUNqQjs7Ozs7Ozs7O0lBQ0gsQ0FBQzs7OztJQUVELG1DQUFVOzs7SUFBVjtJQUNBLENBQUM7SUFFRDs7TUFFRTs7Ozs7Ozs7SUFFRixzQ0FBYTs7Ozs7OztJQUFiLFVBQWMsUUFBUTtRQUNwQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLGVBQWUsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNwRCxDQUFDOzs7OztJQUVELHlDQUFnQjs7OztJQUFoQixVQUFpQixRQUFRO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsa0JBQWtCLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDdkQsQ0FBQzs7Ozs7SUFFRCxxQ0FBWTs7OztJQUFaLFVBQWEsUUFBUTtRQUNuQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNwRCxDQUFDOzs7O0lBRUQsb0NBQVc7OztJQUFYO1FBQ0UsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7Ozs7SUFFRCxnQ0FBTzs7O0lBQVAsY0FBWSxPQUFPLElBQUksQ0FBQyxRQUFRLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQzs7OztJQUUvQyxrQ0FBUzs7O0lBQVQsY0FBdUIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQzs7Ozs7SUFFcEQsaUNBQVE7Ozs7SUFBUixVQUFTLEtBQVk7UUFDbkIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7O1lBRXJFLEtBQUssR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztRQUN2QyxJQUFJLEtBQUssS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtZQUNoQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN6QjthQUFNO1lBQ0wsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUNyQztRQUVELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxFQUFDLEtBQUssT0FBQSxFQUFFLEtBQUssT0FBQSxFQUFDLENBQUMsQ0FBQztRQUNuRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Ozs7O0lBRUQscUNBQVk7Ozs7SUFBWixVQUFhLElBQUk7OztZQUNmLEtBQW9CLElBQUEsS0FBQSxpQkFBQSxJQUFJLENBQUMsTUFBTSxDQUFBLGdCQUFBLDRCQUFFO2dCQUE1QixJQUFNLEtBQUssV0FBQTtnQkFDZCxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxJQUFJLEVBQUU7b0JBQzVCLE9BQU8sS0FBSyxDQUFDO2lCQUNkO2FBQ0Y7Ozs7Ozs7OztRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7Ozs7SUFFRCx1Q0FBYzs7OztJQUFkLFVBQWUsS0FBSzs7WUFDWixLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBQ3hDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQ2QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzdCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLEVBQUMsS0FBSyxPQUFBLEVBQUUsS0FBSyxPQUFBLEVBQUMsQ0FBQyxDQUFDO1NBQ3ZEO0lBQ0gsQ0FBQzs7Ozs7SUFFRCxzQ0FBYTs7OztJQUFiLFVBQWMsS0FBSztRQUFuQixpQkFlQzs7WUFkTyxRQUFRLEdBQUcsS0FBSyxDQUFDLFdBQVcsRUFBRTtRQUNwQyxJQUFJLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksS0FBSyxLQUFJLENBQUMsUUFBUSxFQUF0QixDQUFzQixDQUFDLEVBQUU7WUFDNUQsS0FBSyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTs7b0JBQzFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFDeEIsSUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFFO29CQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztpQkFBRTthQUNsRDtZQUNELE9BQU8sQ0FBQyxDQUFDO1NBQ1Y7YUFBTTtZQUNMLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTs7b0JBQ3JDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFDeEIsSUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFFO29CQUFFLE9BQU8sQ0FBQyxDQUFDO2lCQUFFO2FBQzlDO1lBQ0QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztTQUMzQjtJQUNILENBQUM7SUFDSCxxQkFBQztBQUFELENBQUMsQUE5RkQsSUE4RkM7Ozs7Ozs7SUE3RkMsaUNBQXlCOzs7OztJQUN6Qix1Q0FBMkM7O0lBRTNDLGdDQUFxQjs7Ozs7SUFHbkIsc0NBQWtDOzs7OztJQUNsQyxrQ0FBK0I7Ozs7O0lBQy9CLDhCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhbmVsIH0gZnJvbSAnLi9wYW5lbCc7XHJcbmltcG9ydCB7IERvY2sgfSBmcm9tICcuL2RvY2snO1xyXG5pbXBvcnQgeyBQYW5lbExvY2F0aW9uIH0gZnJvbSAnLi90eXBlcyc7XHJcbmltcG9ydCB7IFZpZXdSZWdpc3RyeSB9IGZyb20gJy4vdmlldy1yZWdpc3RyeSc7XHJcbmltcG9ydCB7IENvbXBvc2l0ZURpc3Bvc2FibGUsIEVtaXR0ZXIsIERpc3Bvc2FibGUgfSBmcm9tICcuL2V2ZW50LWtpdCc7XHJcblxyXG5leHBvcnQgY2xhc3MgUGFuZWxDb250YWluZXIge1xyXG4gIHByaXZhdGUgZW1pdHRlcjogRW1pdHRlcjtcclxuICBwcml2YXRlIHN1YnNjcmlwdGlvbnM6IENvbXBvc2l0ZURpc3Bvc2FibGU7XHJcblxyXG4gIHBhbmVsczogUGFuZWxbXSA9IFtdO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgdmlld1JlZ2lzdHJ5OiBWaWV3UmVnaXN0cnksXHJcbiAgICBwcml2YXRlIGxvY2F0aW9uOiBQYW5lbExvY2F0aW9uLFxyXG4gICAgcHJpdmF0ZSBkb2NrOiBEb2NrID0gbnVsbCkge1xyXG4gICAgICB0aGlzLmVtaXR0ZXIgPSBuZXcgRW1pdHRlcigpO1xyXG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpO1xyXG4gICAgfVxyXG5cclxuICBkZXN0cm95KCkge1xyXG4gICAgZm9yIChjb25zdCBwYW5lbCBvZiB0aGlzLmdldFBhbmVscygpKSB7XHJcbiAgICAgIHBhbmVsLmRlc3Ryb3koKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldEVsZW1lbnQoKSB7XHJcbiAgfVxyXG5cclxuICAvKlxyXG4gIFNlY3Rpb246IEV2ZW50IFN1YnNjcmlwdGlvblxyXG4gICovXHJcblxyXG4gIG9uRGlkQWRkUGFuZWwoY2FsbGJhY2spOiBEaXNwb3NhYmxlIHtcclxuICAgIHJldHVybiB0aGlzLmVtaXR0ZXIub24oJ2RpZC1hZGQtcGFuZWwnLCBjYWxsYmFjayk7XHJcbiAgfVxyXG5cclxuICBvbkRpZFJlbW92ZVBhbmVsKGNhbGxiYWNrKTogRGlzcG9zYWJsZSB7XHJcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyLm9uKCdkaWQtcmVtb3ZlLXBhbmVsJywgY2FsbGJhY2spO1xyXG4gIH1cclxuXHJcbiAgb25EaWREZXN0cm95KGNhbGxiYWNrKTogRGlzcG9zYWJsZSB7XHJcbiAgICByZXR1cm4gdGhpcy5lbWl0dGVyLm9uY2UoJ2RpZC1kZXN0cm95JywgY2FsbGJhY2spO1xyXG4gIH1cclxuXHJcbiAgZ2V0TG9jYXRpb24oKTogUGFuZWxMb2NhdGlvbiB7XHJcbiAgICByZXR1cm4gdGhpcy5sb2NhdGlvbjtcclxuICB9XHJcblxyXG4gIGlzTW9kYWwoKSB7IHJldHVybiB0aGlzLmxvY2F0aW9uID09PSAnbW9kYWwnOyB9XHJcblxyXG4gIGdldFBhbmVscygpOiBQYW5lbFtdIHsgcmV0dXJuIHRoaXMucGFuZWxzLnNsaWNlKCk7IH1cclxuXHJcbiAgYWRkUGFuZWwocGFuZWw6IFBhbmVsKTogUGFuZWwge1xyXG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLmFkZChwYW5lbC5vbkRpZERlc3Ryb3kodGhpcy5wYW5lbERlc3Ryb3llZC5iaW5kKHRoaXMpKSk7XHJcblxyXG4gICAgY29uc3QgaW5kZXggPSB0aGlzLmdldFBhbmVsSW5kZXgocGFuZWwpO1xyXG4gICAgaWYgKGluZGV4ID09PSB0aGlzLnBhbmVscy5sZW5ndGgpIHtcclxuICAgICAgdGhpcy5wYW5lbHMucHVzaChwYW5lbCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnBhbmVscy5zcGxpY2UoaW5kZXgsIDAsIHBhbmVsKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnZGlkLWFkZC1wYW5lbCcsIHtwYW5lbCwgaW5kZXh9KTtcclxuICAgIHJldHVybiBwYW5lbDtcclxuICB9XHJcblxyXG4gIHBhbmVsRm9ySXRlbShpdGVtKSB7XHJcbiAgICBmb3IgKGNvbnN0IHBhbmVsIG9mIHRoaXMucGFuZWxzKSB7XHJcbiAgICAgIGlmIChwYW5lbC5nZXRJdGVtKCkgPT09IGl0ZW0pIHtcclxuICAgICAgICByZXR1cm4gcGFuZWw7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgcGFuZWxEZXN0cm95ZWQocGFuZWwpIHtcclxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5wYW5lbHMuaW5kZXhPZihwYW5lbCk7XHJcbiAgICBpZiAoaW5kZXggPiAtMSkge1xyXG4gICAgICB0aGlzLnBhbmVscy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICB0aGlzLmVtaXR0ZXIuZW1pdCgnZGlkLXJlbW92ZS1wYW5lbCcsIHtwYW5lbCwgaW5kZXh9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldFBhbmVsSW5kZXgocGFuZWwpIHtcclxuICAgIGNvbnN0IHByaW9yaXR5ID0gcGFuZWwuZ2V0UHJpb3JpdHkoKTtcclxuICAgIGlmIChbJ2JvdHRvbScsICdyaWdodCddLmZpbmQoaXRlbSA9PiBpdGVtID09PSB0aGlzLmxvY2F0aW9uKSkge1xyXG4gICAgICBmb3IgKGxldCBpID0gdGhpcy5wYW5lbHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICBjb25zdCBwID0gdGhpcy5wYW5lbHNbaV07XHJcbiAgICAgICAgaWYgKHByaW9yaXR5IDwgcC5nZXRQcmlvcml0eSgpKSB7IHJldHVybiBpICsgMTsgfVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiAwO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBhbmVscy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IHAgPSB0aGlzLnBhbmVsc1tpXTtcclxuICAgICAgICBpZiAocHJpb3JpdHkgPCBwLmdldFByaW9yaXR5KCkpIHsgcmV0dXJuIGk7IH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdGhpcy5wYW5lbHMubGVuZ3RoO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=