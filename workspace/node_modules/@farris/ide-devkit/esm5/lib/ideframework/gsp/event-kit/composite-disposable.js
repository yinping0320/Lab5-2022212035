/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Disposable } from './disposable';
// Essential: An object that aggregates multiple {Disposable} instances together
// into a single disposable, so they can all be disposed as a group.
//
// These are very useful when subscribing to multiple events.
//
// ## Examples
//
// ```coffee
// {CompositeDisposable} = require 'atom'
//
// class Something
//   constructor: ->
//     @disposables = new CompositeDisposable
//     editor = atom.workspace.getActiveTextEditor()
//     @disposables.add editor.onDidChange ->
//     @disposables.add editor.onDidChangePath ->
//
//   destroy: ->
//     @disposables.dispose()
// ```
var 
// Essential: An object that aggregates multiple {Disposable} instances together
// into a single disposable, so they can all be disposed as a group.
//
// These are very useful when subscribing to multiple events.
//
// ## Examples
//
// ```coffee
// {CompositeDisposable} = require 'atom'
//
// class Something
//   constructor: ->
//     @disposables = new CompositeDisposable
//     editor = atom.workspace.getActiveTextEditor()
//     @disposables.add editor.onDidChange ->
//     @disposables.add editor.onDidChangePath ->
//
//   destroy: ->
//     @disposables.dispose()
// ```
CompositeDisposable = /** @class */ (function () {
    //////
    /// Section: Construction and Destruction
    //////
    // Public: Construct an instance, optionally with one or more disposables
    function CompositeDisposable() {
        var disposables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            disposables[_i] = arguments[_i];
        }
        this.disposed = false;
        this.disposables = new Set();
        this.add.apply(this, tslib_1.__spread(disposables));
    }
    // Public: Dispose all disposables added to this composite disposable.
    //
    // If this object has already been disposed, this method has no effect.
    // Public: Dispose all disposables added to this composite disposable.
    //
    // If this object has already been disposed, this method has no effect.
    /**
     * @return {?}
     */
    CompositeDisposable.prototype.dispose = 
    // Public: Dispose all disposables added to this composite disposable.
    //
    // If this object has already been disposed, this method has no effect.
    /**
     * @return {?}
     */
    function () {
        if (!this.disposed) {
            this.disposed = true;
            this.disposables.forEach(function (disposable) { return disposable.dispose(); });
            this.disposables = null;
        }
    };
    //////
    /// Section: Managing Disposables
    //////
    // Public: Add disposables to be disposed when the composite is disposed.
    //
    // If this object has already been disposed, this method has no effect.
    //
    // * `...disposables` {Disposable} instances or any objects with `.dispose()`
    //   methods.
    //////
    /// Section: Managing Disposables
    //////
    // Public: Add disposables to be disposed when the composite is disposed.
    //
    // If this object has already been disposed, this method has no effect.
    //
    // * `...disposables` {Disposable} instances or any objects with `.dispose()`
    //   methods.
    /**
     * @param {...?} disposables
     * @return {?}
     */
    CompositeDisposable.prototype.add = 
    //////
    /// Section: Managing Disposables
    //////
    // Public: Add disposables to be disposed when the composite is disposed.
    //
    // If this object has already been disposed, this method has no effect.
    //
    // * `...disposables` {Disposable} instances or any objects with `.dispose()`
    //   methods.
    /**
     * @param {...?} disposables
     * @return {?}
     */
    function () {
        var disposables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            disposables[_i] = arguments[_i];
        }
        var e_1, _a;
        if (!this.disposed) {
            try {
                for (var disposables_1 = tslib_1.__values(disposables), disposables_1_1 = disposables_1.next(); !disposables_1_1.done; disposables_1_1 = disposables_1.next()) {
                    var disposable = disposables_1_1.value;
                    if (this.assertDisposable(disposable)) {
                        this.disposables.add(disposable);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (disposables_1_1 && !disposables_1_1.done && (_a = disposables_1.return)) _a.call(disposables_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    };
    // Public: Remove a previously added disposable.
    //
    // * `disposable` {Disposable} instance or any object with a `.dispose()`
    //   method.
    // Public: Remove a previously added disposable.
    //
    // * `disposable` {Disposable} instance or any object with a `.dispose()`
    //   method.
    /**
     * @param {?} disposable
     * @return {?}
     */
    CompositeDisposable.prototype.remove = 
    // Public: Remove a previously added disposable.
    //
    // * `disposable` {Disposable} instance or any object with a `.dispose()`
    //   method.
    /**
     * @param {?} disposable
     * @return {?}
     */
    function (disposable) {
        if (!this.disposed) {
            this.disposables.delete(disposable);
        }
    };
    // Public: Alias to {CompositeDisposable::remove}
    // Public: Alias to {CompositeDisposable::remove}
    /**
     * @param {?} disposable
     * @return {?}
     */
    CompositeDisposable.prototype.delete = 
    // Public: Alias to {CompositeDisposable::remove}
    /**
     * @param {?} disposable
     * @return {?}
     */
    function (disposable) {
        this.remove(disposable);
    };
    // Public: Clear all disposables. They will not be disposed by the next call
    // to dispose.
    // Public: Clear all disposables. They will not be disposed by the next call
    // to dispose.
    /**
     * @return {?}
     */
    CompositeDisposable.prototype.clear = 
    // Public: Clear all disposables. They will not be disposed by the next call
    // to dispose.
    /**
     * @return {?}
     */
    function () {
        if (!this.disposed) {
            this.disposables.clear();
        }
    };
    /**
     * @param {?} disposable
     * @return {?}
     */
    CompositeDisposable.prototype.assertDisposable = /**
     * @param {?} disposable
     * @return {?}
     */
    function (disposable) {
        if (!Disposable.isDisposable(disposable)) {
            throw new TypeError('Arguments to CompositeDisposable.add must have a .dispose() method');
        }
        return true;
    };
    return CompositeDisposable;
}());
// Essential: An object that aggregates multiple {Disposable} instances together
// into a single disposable, so they can all be disposed as a group.
//
// These are very useful when subscribing to multiple events.
//
// ## Examples
//
// ```coffee
// {CompositeDisposable} = require 'atom'
//
// class Something
//   constructor: ->
//     @disposables = new CompositeDisposable
//     editor = atom.workspace.getActiveTextEditor()
//     @disposables.add editor.onDidChange ->
//     @disposables.add editor.onDidChangePath ->
//
//   destroy: ->
//     @disposables.dispose()
// ```
export { CompositeDisposable };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CompositeDisposable.prototype.disposed;
    /**
     * @type {?}
     * @private
     */
    CompositeDisposable.prototype.disposables;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9zaXRlLWRpc3Bvc2FibGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2lkZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvaWRlZnJhbWV3b3JrL2dzcC9ldmVudC1raXQvY29tcG9zaXRlLWRpc3Bvc2FibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQjFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBSUUsTUFBTTtJQUNOLHlDQUF5QztJQUN6QyxNQUFNO0lBRU4seUVBQXlFO0lBQ3pFO1FBQVkscUJBQWM7YUFBZCxVQUFjLEVBQWQscUJBQWMsRUFBZCxJQUFjO1lBQWQsZ0NBQWM7O1FBUmxCLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFTdkIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQzdCLElBQUksQ0FBQyxHQUFHLE9BQVIsSUFBSSxtQkFBUSxXQUFXLEdBQUU7SUFDM0IsQ0FBQztJQUNELHNFQUFzRTtJQUN0RSxFQUFFO0lBQ0YsdUVBQXVFOzs7Ozs7O0lBQ3ZFLHFDQUFPOzs7Ozs7O0lBQVA7UUFDRSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNsQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztZQUNyQixJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFDLFVBQVUsSUFBSyxPQUFBLFVBQVUsQ0FBQyxPQUFPLEVBQUUsRUFBcEIsQ0FBb0IsQ0FBQyxDQUFDO1lBQy9ELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQztJQUNELE1BQU07SUFDTixpQ0FBaUM7SUFDakMsTUFBTTtJQUVOLHlFQUF5RTtJQUN6RSxFQUFFO0lBQ0YsdUVBQXVFO0lBQ3ZFLEVBQUU7SUFDRiw2RUFBNkU7SUFDN0UsYUFBYTs7Ozs7Ozs7Ozs7Ozs7SUFDYixpQ0FBRzs7Ozs7Ozs7Ozs7Ozs7SUFBSDtRQUFJLHFCQUFjO2FBQWQsVUFBYyxFQUFkLHFCQUFjLEVBQWQsSUFBYztZQUFkLGdDQUFjOzs7UUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7O2dCQUNsQixLQUF5QixJQUFBLGdCQUFBLGlCQUFBLFdBQVcsQ0FBQSx3Q0FBQSxpRUFBRTtvQkFBakMsSUFBTSxVQUFVLHdCQUFBO29CQUNuQixJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsRUFBRTt3QkFDckMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7cUJBQ2xDO2lCQUNGOzs7Ozs7Ozs7U0FDRjtJQUNILENBQUM7SUFDRCxnREFBZ0Q7SUFDaEQsRUFBRTtJQUNGLHlFQUF5RTtJQUN6RSxZQUFZOzs7Ozs7Ozs7SUFDWixvQ0FBTTs7Ozs7Ozs7O0lBQU4sVUFBTyxVQUFVO1FBQ2YsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDckM7SUFDSCxDQUFDO0lBQ0QsaURBQWlEOzs7Ozs7SUFDakQsb0NBQU07Ozs7OztJQUFOLFVBQU8sVUFBVTtRQUNmLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUNELDRFQUE0RTtJQUM1RSxjQUFjOzs7Ozs7SUFDZCxtQ0FBSzs7Ozs7O0lBQUw7UUFDRSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNsQixJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQzFCO0lBQ0gsQ0FBQzs7Ozs7SUFFRCw4Q0FBZ0I7Ozs7SUFBaEIsVUFBaUIsVUFBVTtRQUN6QixJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUN4QyxNQUFNLElBQUksU0FBUyxDQUFDLG9FQUFvRSxDQUFDLENBQUM7U0FDM0Y7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFDSCwwQkFBQztBQUFELENBQUMsQUFyRUQsSUFxRUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQXBFQyx1Q0FBeUI7Ozs7O0lBQ3pCLDBDQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpc3Bvc2FibGUgfSBmcm9tICcuL2Rpc3Bvc2FibGUnO1xyXG5cclxuLy8gRXNzZW50aWFsOiBBbiBvYmplY3QgdGhhdCBhZ2dyZWdhdGVzIG11bHRpcGxlIHtEaXNwb3NhYmxlfSBpbnN0YW5jZXMgdG9nZXRoZXJcclxuLy8gaW50byBhIHNpbmdsZSBkaXNwb3NhYmxlLCBzbyB0aGV5IGNhbiBhbGwgYmUgZGlzcG9zZWQgYXMgYSBncm91cC5cclxuLy9cclxuLy8gVGhlc2UgYXJlIHZlcnkgdXNlZnVsIHdoZW4gc3Vic2NyaWJpbmcgdG8gbXVsdGlwbGUgZXZlbnRzLlxyXG4vL1xyXG4vLyAjIyBFeGFtcGxlc1xyXG4vL1xyXG4vLyBgYGBjb2ZmZWVcclxuLy8ge0NvbXBvc2l0ZURpc3Bvc2FibGV9ID0gcmVxdWlyZSAnYXRvbSdcclxuLy9cclxuLy8gY2xhc3MgU29tZXRoaW5nXHJcbi8vICAgY29uc3RydWN0b3I6IC0+XHJcbi8vICAgICBAZGlzcG9zYWJsZXMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZVxyXG4vLyAgICAgZWRpdG9yID0gYXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlVGV4dEVkaXRvcigpXHJcbi8vICAgICBAZGlzcG9zYWJsZXMuYWRkIGVkaXRvci5vbkRpZENoYW5nZSAtPlxyXG4vLyAgICAgQGRpc3Bvc2FibGVzLmFkZCBlZGl0b3Iub25EaWRDaGFuZ2VQYXRoIC0+XHJcbi8vXHJcbi8vICAgZGVzdHJveTogLT5cclxuLy8gICAgIEBkaXNwb3NhYmxlcy5kaXNwb3NlKClcclxuLy8gYGBgXHJcbmV4cG9ydCBjbGFzcyBDb21wb3NpdGVEaXNwb3NhYmxlIHtcclxuICBwcml2YXRlIGRpc3Bvc2VkID0gZmFsc2U7XHJcbiAgcHJpdmF0ZSBkaXNwb3NhYmxlczogU2V0PGFueT47XHJcblxyXG4gIC8vLy8vL1xyXG4gIC8vLyBTZWN0aW9uOiBDb25zdHJ1Y3Rpb24gYW5kIERlc3RydWN0aW9uXHJcbiAgLy8vLy8vXHJcblxyXG4gIC8vIFB1YmxpYzogQ29uc3RydWN0IGFuIGluc3RhbmNlLCBvcHRpb25hbGx5IHdpdGggb25lIG9yIG1vcmUgZGlzcG9zYWJsZXNcclxuICBjb25zdHJ1Y3RvciguLi5kaXNwb3NhYmxlcykge1xyXG4gICAgdGhpcy5kaXNwb3NhYmxlcyA9IG5ldyBTZXQoKTtcclxuICAgIHRoaXMuYWRkKC4uLmRpc3Bvc2FibGVzKTtcclxuICB9XHJcbiAgLy8gUHVibGljOiBEaXNwb3NlIGFsbCBkaXNwb3NhYmxlcyBhZGRlZCB0byB0aGlzIGNvbXBvc2l0ZSBkaXNwb3NhYmxlLlxyXG4gIC8vXHJcbiAgLy8gSWYgdGhpcyBvYmplY3QgaGFzIGFscmVhZHkgYmVlbiBkaXNwb3NlZCwgdGhpcyBtZXRob2QgaGFzIG5vIGVmZmVjdC5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgaWYgKCF0aGlzLmRpc3Bvc2VkKSB7XHJcbiAgICAgIHRoaXMuZGlzcG9zZWQgPSB0cnVlO1xyXG4gICAgICB0aGlzLmRpc3Bvc2FibGVzLmZvckVhY2goKGRpc3Bvc2FibGUpID0+IGRpc3Bvc2FibGUuZGlzcG9zZSgpKTtcclxuICAgICAgdGhpcy5kaXNwb3NhYmxlcyA9IG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8vLy8vL1xyXG4gIC8vLyBTZWN0aW9uOiBNYW5hZ2luZyBEaXNwb3NhYmxlc1xyXG4gIC8vLy8vL1xyXG5cclxuICAvLyBQdWJsaWM6IEFkZCBkaXNwb3NhYmxlcyB0byBiZSBkaXNwb3NlZCB3aGVuIHRoZSBjb21wb3NpdGUgaXMgZGlzcG9zZWQuXHJcbiAgLy9cclxuICAvLyBJZiB0aGlzIG9iamVjdCBoYXMgYWxyZWFkeSBiZWVuIGRpc3Bvc2VkLCB0aGlzIG1ldGhvZCBoYXMgbm8gZWZmZWN0LlxyXG4gIC8vXHJcbiAgLy8gKiBgLi4uZGlzcG9zYWJsZXNgIHtEaXNwb3NhYmxlfSBpbnN0YW5jZXMgb3IgYW55IG9iamVjdHMgd2l0aCBgLmRpc3Bvc2UoKWBcclxuICAvLyAgIG1ldGhvZHMuXHJcbiAgYWRkKC4uLmRpc3Bvc2FibGVzKSB7XHJcbiAgICBpZiAoIXRoaXMuZGlzcG9zZWQpIHtcclxuICAgICAgZm9yIChjb25zdCBkaXNwb3NhYmxlIG9mIGRpc3Bvc2FibGVzKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYXNzZXJ0RGlzcG9zYWJsZShkaXNwb3NhYmxlKSkge1xyXG4gICAgICAgICAgdGhpcy5kaXNwb3NhYmxlcy5hZGQoZGlzcG9zYWJsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8vIFB1YmxpYzogUmVtb3ZlIGEgcHJldmlvdXNseSBhZGRlZCBkaXNwb3NhYmxlLlxyXG4gIC8vXHJcbiAgLy8gKiBgZGlzcG9zYWJsZWAge0Rpc3Bvc2FibGV9IGluc3RhbmNlIG9yIGFueSBvYmplY3Qgd2l0aCBhIGAuZGlzcG9zZSgpYFxyXG4gIC8vICAgbWV0aG9kLlxyXG4gIHJlbW92ZShkaXNwb3NhYmxlKTogdm9pZCB7XHJcbiAgICBpZiAoIXRoaXMuZGlzcG9zZWQpIHtcclxuICAgICAgdGhpcy5kaXNwb3NhYmxlcy5kZWxldGUoZGlzcG9zYWJsZSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8vIFB1YmxpYzogQWxpYXMgdG8ge0NvbXBvc2l0ZURpc3Bvc2FibGU6OnJlbW92ZX1cclxuICBkZWxldGUoZGlzcG9zYWJsZSk6IHZvaWQge1xyXG4gICAgdGhpcy5yZW1vdmUoZGlzcG9zYWJsZSk7XHJcbiAgfVxyXG4gIC8vIFB1YmxpYzogQ2xlYXIgYWxsIGRpc3Bvc2FibGVzLiBUaGV5IHdpbGwgbm90IGJlIGRpc3Bvc2VkIGJ5IHRoZSBuZXh0IGNhbGxcclxuICAvLyB0byBkaXNwb3NlLlxyXG4gIGNsZWFyKCkge1xyXG4gICAgaWYgKCF0aGlzLmRpc3Bvc2VkKSB7XHJcbiAgICAgIHRoaXMuZGlzcG9zYWJsZXMuY2xlYXIoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzc2VydERpc3Bvc2FibGUoZGlzcG9zYWJsZSk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKCFEaXNwb3NhYmxlLmlzRGlzcG9zYWJsZShkaXNwb3NhYmxlKSkge1xyXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgdG8gQ29tcG9zaXRlRGlzcG9zYWJsZS5hZGQgbXVzdCBoYXZlIGEgLmRpc3Bvc2UoKSBtZXRob2QnKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxufVxyXG4iXX0=