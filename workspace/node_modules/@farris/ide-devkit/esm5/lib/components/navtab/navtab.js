/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ContentChildren, QueryList, Directive, TemplateRef, ContentChild, Output, EventEmitter } from '@angular/core';
import { NgbNavTabsetConfig } from './navtab-config';
/** @type {?} */
var nextId = 0;
/**
 * This directive should be used to wrap tab titles that need to contain HTML markup or other directives.
 */
var NgbNavTabTitle = /** @class */ (function () {
    function NgbNavTabTitle(templateRef) {
        this.templateRef = templateRef;
    }
    NgbNavTabTitle.decorators = [
        { type: Directive, args: [{ selector: 'ng-template[ngbNavTabTitle]' },] }
    ];
    /** @nocollapse */
    NgbNavTabTitle.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return NgbNavTabTitle;
}());
export { NgbNavTabTitle };
if (false) {
    /** @type {?} */
    NgbNavTabTitle.prototype.templateRef;
}
/**
 * This directive must be used to wrap content to be displayed in a tab.
 */
var NgbNavTabContent = /** @class */ (function () {
    function NgbNavTabContent(templateRef) {
        this.templateRef = templateRef;
    }
    NgbNavTabContent.decorators = [
        { type: Directive, args: [{ selector: 'ng-template[ngbNavTabContent]' },] }
    ];
    /** @nocollapse */
    NgbNavTabContent.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    return NgbNavTabContent;
}());
export { NgbNavTabContent };
if (false) {
    /** @type {?} */
    NgbNavTabContent.prototype.templateRef;
}
/**
 * A directive representing an individual tab.
 */
var NgbNavTab = /** @class */ (function () {
    function NgbNavTab() {
        /**
         * Unique tab identifier. Must be unique for the entire document for proper accessibility support.
         */
        this.id = "ngb-tab-" + nextId++;
        /**
         * Allows toggling disabled state of a given state. Disabled tabs can't be selected.
         */
        this.disabled = false;
    }
    NgbNavTab.decorators = [
        { type: Directive, args: [{ selector: 'ngb-navtab' },] }
    ];
    NgbNavTab.propDecorators = {
        id: [{ type: Input }],
        title: [{ type: Input }],
        disabled: [{ type: Input }],
        contentTpl: [{ type: ContentChild, args: [NgbNavTabContent,] }],
        titleTpl: [{ type: ContentChild, args: [NgbNavTabTitle,] }]
    };
    return NgbNavTab;
}());
export { NgbNavTab };
if (false) {
    /**
     * Unique tab identifier. Must be unique for the entire document for proper accessibility support.
     * @type {?}
     */
    NgbNavTab.prototype.id;
    /**
     * Simple (string only) title. Use the "NgbNavTabTitle" directive for more complex use-cases.
     * @type {?}
     */
    NgbNavTab.prototype.title;
    /**
     * Allows toggling disabled state of a given state. Disabled tabs can't be selected.
     * @type {?}
     */
    NgbNavTab.prototype.disabled;
    /** @type {?} */
    NgbNavTab.prototype.contentTpl;
    /** @type {?} */
    NgbNavTab.prototype.titleTpl;
}
/**
 * The payload of the change event fired right before the tab change
 * @record
 */
export function NgbNavTabChangeEvent() { }
if (false) {
    /**
     * Id of the currently active tab
     * @type {?}
     */
    NgbNavTabChangeEvent.prototype.activeId;
    /**
     * Id of the newly selected tab
     * @type {?}
     */
    NgbNavTabChangeEvent.prototype.nextId;
    /**
     * Function that will prevent tab switch if called
     * @type {?}
     */
    NgbNavTabChangeEvent.prototype.preventDefault;
}
/**
 * A component that makes it easy to create tabbed interface.
 */
var NgbNavTabset = /** @class */ (function () {
    function NgbNavTabset(config) {
        /**
         * Whether the closed tabs should be hidden without destroying them
         */
        this.destroyOnHide = true;
        /**
         * A tab change event fired right before the tab selection happens. See NgbNavTabChangeEvent for payload details
         */
        this.tabChange = new EventEmitter();
        this.type = config.type;
        this.justify = config.justify;
        this.orientation = config.orientation;
    }
    Object.defineProperty(NgbNavTabset.prototype, "justify", {
        /**
         * The horizontal alignment of the nav with flexbox utilities. Can be one of 'start', 'center', 'end', 'fill' or
         * 'justified'
         * The default value is 'start'.
         */
        set: /**
         * The horizontal alignment of the nav with flexbox utilities. Can be one of 'start', 'center', 'end', 'fill' or
         * 'justified'
         * The default value is 'start'.
         * @param {?} className
         * @return {?}
         */
        function (className) {
            if (className === 'fill' || className === 'justified') {
                this.justifyClass = "nav-" + className;
            }
            else {
                this.justifyClass = "justify-content-" + className;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Selects the tab with the given id and shows its associated pane.
     * Any other tab that was previously selected becomes unselected and its associated pane is hidden.
     */
    /**
     * Selects the tab with the given id and shows its associated pane.
     * Any other tab that was previously selected becomes unselected and its associated pane is hidden.
     * @param {?} tabId
     * @return {?}
     */
    NgbNavTabset.prototype.select = /**
     * Selects the tab with the given id and shows its associated pane.
     * Any other tab that was previously selected becomes unselected and its associated pane is hidden.
     * @param {?} tabId
     * @return {?}
     */
    function (tabId) {
        /** @type {?} */
        var selectedTab = this._getTabById(tabId);
        if (selectedTab && !selectedTab.disabled && this.activeId !== selectedTab.id) {
            /** @type {?} */
            var defaultPrevented_1 = false;
            this.tabChange.emit({ activeId: this.activeId, nextId: selectedTab.id, preventDefault: function () { defaultPrevented_1 = true; } });
            if (!defaultPrevented_1) {
                this.activeId = selectedTab.id;
            }
        }
    };
    /**
     * @return {?}
     */
    NgbNavTabset.prototype.ngAfterContentChecked = /**
     * @return {?}
     */
    function () {
        // auto-correct activeId that might have been set incorrectly as input
        /** @type {?} */
        var activeTab = this._getTabById(this.activeId);
        this.activeId = activeTab ? activeTab.id : (this.tabs.length ? this.tabs.first.id : null);
    };
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    NgbNavTabset.prototype._getTabById = /**
     * @private
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var tabsWithId = this.tabs.filter(function (tab) { return tab.id === id; });
        return tabsWithId.length ? tabsWithId[0] : null;
    };
    NgbNavTabset.decorators = [
        { type: Component, args: [{
                    selector: 'ngb-navtabset',
                    exportAs: 'NgbNavTabset',
                    template: "\n    <ul [class]=\"'web-ide-activity-bar nav nav-' + type + (orientation == 'horizontal'?  ' '\n      + justifyClass : ' flex-column')\" role=\"tablist\">\n      <li class=\"nav-item\" *ngFor=\"let tab of tabs\">\n        <a [id]=\"tab.id\" class=\"nav-link\" [class.active]=\"tab.id === activeId\" [class.disabled]=\"tab.disabled\"\n          href (click)=\"select(tab.id)\" role=\"tab\" [attr.tabindex]=\"(tab.disabled ? '-1': undefined)\"\n          [attr.aria-controls]=\"(!destroyOnHide || tab.id === activeId ? tab.id + '-panel' : null)\"\n          [attr.aria-expanded]=\"tab.id === activeId\" [attr.aria-disabled]=\"tab.disabled\">\n          {{tab.title}}<ng-template [ngTemplateOutlet]=\"tab.titleTpl?.templateRef\"></ng-template>\n        </a>\n      </li>\n    </ul>\n    <div class=\"web-ide-side-bar tab-content\">\n      <ng-template ngFor let-tab [ngForOf]=\"tabs\">\n        <div\n          class=\"tab-pane {{tab.id === activeId ? 'active' : null}}\"\n          *ngIf=\"!destroyOnHide || tab.id === activeId\"\n          role=\"tabpanel\"\n          [attr.aria-labelledby]=\"tab.id\" id=\"{{tab.id}}-panel\"\n          [attr.aria-expanded]=\"tab.id === activeId\">\n          <ng-template [ngTemplateOutlet]=\"tab.contentTpl.templateRef\"></ng-template>\n        </div>\n      </ng-template>\n    </div>\n  ",
                    styles: [":host{display:flex!important;flex:1}"]
                }] }
    ];
    /** @nocollapse */
    NgbNavTabset.ctorParameters = function () { return [
        { type: NgbNavTabsetConfig }
    ]; };
    NgbNavTabset.propDecorators = {
        tabs: [{ type: ContentChildren, args: [NgbNavTab,] }],
        activeId: [{ type: Input }],
        destroyOnHide: [{ type: Input }],
        justify: [{ type: Input }],
        orientation: [{ type: Input }],
        type: [{ type: Input }],
        tabChange: [{ type: Output }]
    };
    return NgbNavTabset;
}());
export { NgbNavTabset };
if (false) {
    /** @type {?} */
    NgbNavTabset.prototype.justifyClass;
    /** @type {?} */
    NgbNavTabset.prototype.tabs;
    /**
     * An identifier of an initially selected (active) tab. Use the "select" method to switch a tab programmatically.
     * @type {?}
     */
    NgbNavTabset.prototype.activeId;
    /**
     * Whether the closed tabs should be hidden without destroying them
     * @type {?}
     */
    NgbNavTabset.prototype.destroyOnHide;
    /**
     * The orientation of the nav (horizontal or vertical).
     * The default value is 'horizontal'.
     * @type {?}
     */
    NgbNavTabset.prototype.orientation;
    /**
     * Type of navigation to be used for tabs. Can be one of 'tabs' or 'pills'.
     * @type {?}
     */
    NgbNavTabset.prototype.type;
    /**
     * A tab change event fired right before the tab selection happens. See NgbNavTabChangeEvent for payload details
     * @type {?}
     */
    NgbNavTabset.prototype.tabChange;
}
//# sourceMappingURL=data:application/json;base64,