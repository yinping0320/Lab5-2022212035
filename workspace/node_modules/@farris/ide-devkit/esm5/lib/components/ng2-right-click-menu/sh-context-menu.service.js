/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Overlay } from '@angular/cdk/overlay';
import { TemplatePortal } from '@angular/cdk/portal';
import { fromEvent } from 'rxjs/observable/fromEvent';
var ShContextMenuService = /** @class */ (function () {
    function ShContextMenuService(overlay) {
        this.overlay = overlay;
        this.activeOverlays = [];
    }
    /**
     * @param {?} ctxEvent
     * @return {?}
     */
    ShContextMenuService.prototype.openMenu = /**
     * @param {?} ctxEvent
     * @return {?}
     */
    function (ctxEvent) {
        this.closeCurrentOverlays();
        var menu = ctxEvent.menu, mouseEvent = ctxEvent.mouseEvent, targetElement = ctxEvent.targetElement, data = ctxEvent.data;
        this.activeMenu = menu;
        mouseEvent.preventDefault();
        mouseEvent.stopPropagation();
        this.overrideGetBoundingClientRect(targetElement, mouseEvent);
        /** @type {?} */
        var scrollStrategy = this.buildCloseScrollStrategy();
        /** @type {?} */
        var positionStrategy = this.buildConnectedPositionStrategy(targetElement);
        this.attachContextToItems(menu, data);
        /** @type {?} */
        var overlayRef = this.createAndAttachOverlay(positionStrategy, scrollStrategy, menu, true);
        this.attachOverlayRef(menu, overlayRef);
        this.registerBackdropEvents(overlayRef);
    };
    /**
     * @param {?} ctxEvent
     * @return {?}
     */
    ShContextMenuService.prototype.openSubMenu = /**
     * @param {?} ctxEvent
     * @return {?}
     */
    function (ctxEvent) {
        var menu = ctxEvent.menu, mouseEvent = ctxEvent.mouseEvent, targetElement = ctxEvent.targetElement, data = ctxEvent.data, parentMenu = ctxEvent.parentMenu;
        mouseEvent.preventDefault();
        mouseEvent.stopPropagation();
        /** @type {?} */
        var scrollStrategy = this.buildCloseScrollStrategy();
        /** @type {?} */
        var positionStrategy = this.buildConnectedPositionStrategyForSubMenu(targetElement);
        /** @type {?} */
        var overlayRef = this.createAndAttachOverlay(positionStrategy, scrollStrategy, menu, false);
        this.attachContextToItems(menu, data);
        this.attachThisContext(menu, parentMenu);
        this.attachOverlayRef(menu, overlayRef);
    };
    /**
     * @return {?}
     */
    ShContextMenuService.prototype.destroy = /**
     * @return {?}
     */
    function () {
        this.closeCurrentOverlays();
        this.backDropSub.unsubscribe();
    };
    /**
     * @return {?}
     */
    ShContextMenuService.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy();
    };
    /**
     * @param {?} menu
     * @return {?}
     */
    ShContextMenuService.prototype.closeSubMenus = /**
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        var _this = this;
        /** @type {?} */
        var itemsWithSubMenus = menu
            .menuItems
            .filter(function (i) { return !!i.subMenu && !!i.subMenu.overlayRef; });
        if (itemsWithSubMenus.length) {
            itemsWithSubMenus.forEach(function (sm) { return _this.closeSubMenus(sm.subMenu); });
            /** @type {?} */
            var overlayRefs = itemsWithSubMenus
                .map(function (i) { return i.subMenu.overlayRef; });
            overlayRefs.forEach(function (r) { return r.dispose(); });
        }
    };
    /**
     * @private
     * @param {?} overlayRef
     * @return {?}
     */
    ShContextMenuService.prototype.registerBackdropEvents = /**
     * @private
     * @param {?} overlayRef
     * @return {?}
     */
    function (overlayRef) {
        /** @type {?} */
        var elm = overlayRef.backdropElement;
        this.backDropSub = fromEvent(elm, 'mousedown')
            .subscribe(this.closeCurrentOverlays.bind(this));
    };
    /**
     * @private
     * @param {?} positionStrategy
     * @param {?} scrollStrategy
     * @param {?} menu
     * @param {?=} hasBackdrop
     * @return {?}
     */
    ShContextMenuService.prototype.createAndAttachOverlay = /**
     * @private
     * @param {?} positionStrategy
     * @param {?} scrollStrategy
     * @param {?} menu
     * @param {?=} hasBackdrop
     * @return {?}
     */
    function (positionStrategy, scrollStrategy, menu, hasBackdrop) {
        if (hasBackdrop === void 0) { hasBackdrop = true; }
        /** @type {?} */
        var overlayRef = this.overlay.create({
            positionStrategy: positionStrategy,
            scrollStrategy: scrollStrategy,
            hasBackdrop: hasBackdrop,
            backdropClass: 'sh-backdrop'
        });
        /*
             TODO: try passing the TemplatePortal context (data)
             and then injecting it to the *ngTemplateOutlet in the component template
            */
        /** @type {?} */
        var menuPortal = new TemplatePortal(menu.menuTemplate, menu.menuContainer);
        overlayRef.attach(menuPortal);
        this.activeOverlays.push(overlayRef);
        return overlayRef;
    };
    /**
     * @private
     * @return {?}
     */
    ShContextMenuService.prototype.buildCloseScrollStrategy = /**
     * @private
     * @return {?}
     */
    function () {
        return this.overlay.scrollStrategies.close();
    };
    /**
     * @private
     * @param {?} elm
     * @return {?}
     */
    ShContextMenuService.prototype.buildConnectedPositionStrategy = /**
     * @private
     * @param {?} elm
     * @return {?}
     */
    function (elm) {
        return this
            .overlay
            .position()
            .connectedTo(elm, { originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' })
            .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' })
            .withFallbackPosition({ originX: 'end', originY: 'top' }, { overlayX: 'start', overlayY: 'top' })
            .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'end', overlayY: 'top' })
            .withFallbackPosition({ originX: 'end', originY: 'center' }, { overlayX: 'start', overlayY: 'center' })
            .withFallbackPosition({ originX: 'start', originY: 'center' }, { overlayX: 'end', overlayY: 'center' });
    };
    /**
     * @private
     * @param {?} elm
     * @return {?}
     */
    ShContextMenuService.prototype.buildConnectedPositionStrategyForSubMenu = /**
     * @private
     * @param {?} elm
     * @return {?}
     */
    function (elm) {
        return this
            .overlay
            .position()
            .connectedTo(elm, { originX: 'end', originY: 'top' }, { overlayX: 'start', overlayY: 'top' })
            .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'end', overlayY: 'top' })
            .withFallbackPosition({ originX: 'end', originY: 'bottom' }, { overlayX: 'start', overlayY: 'bottom' })
            .withFallbackPosition({ originX: 'start', originY: 'bottom' }, { overlayX: 'end', overlayY: 'bottom' });
    };
    /*
      we need to override getBoundingClientRect() to return the position of the menu.
      this is done because @angular/cdk use this function internally to determine where the overlay should be positioned
      https://github.com/angular/material2/blob/master/src/cdk/overlay/position/connected-position-strategy.ts#L288
     */
    /*
        we need to override getBoundingClientRect() to return the position of the menu.
        this is done because @angular/cdk use this function internally to determine where the overlay should be positioned
        https://github.com/angular/material2/blob/master/src/cdk/overlay/position/connected-position-strategy.ts#L288
       */
    /**
     * @private
     * @param {?} elm
     * @param {?} event
     * @return {?}
     */
    ShContextMenuService.prototype.overrideGetBoundingClientRect = /*
        we need to override getBoundingClientRect() to return the position of the menu.
        this is done because @angular/cdk use this function internally to determine where the overlay should be positioned
        https://github.com/angular/material2/blob/master/src/cdk/overlay/position/connected-position-strategy.ts#L288
       */
    /**
     * @private
     * @param {?} elm
     * @param {?} event
     * @return {?}
     */
    function (elm, event) {
        var clientX = event.clientX, clientY = event.clientY;
        elm.nativeElement.getBoundingClientRect = function () {
            return {
                bottom: clientY,
                height: 0,
                left: clientX,
                right: clientX,
                top: clientY,
                width: 0
            };
        };
    };
    /**
     * @private
     * @return {?}
     */
    ShContextMenuService.prototype.closeCurrentOverlays = /**
     * @private
     * @return {?}
     */
    function () {
        this.activeOverlays.forEach(function (o) {
            o.detach();
            o.dispose();
        });
        this.activeOverlays = [];
        // TODO: create close subject and emit.
        // subscribe in component
        if (this.activeMenu) {
            this.activeMenu.close();
        }
    };
    /**
     * @private
     * @param {?} menu
     * @param {?} data
     * @return {?}
     */
    ShContextMenuService.prototype.attachContextToItems = /**
     * @private
     * @param {?} menu
     * @param {?} data
     * @return {?}
     */
    function (menu, data) {
        menu.menuItems.forEach(function (i) { return i.context.$implicit = data; });
    };
    /**
     * @private
     * @param {?} menu
     * @param {?} parentMenu
     * @return {?}
     */
    ShContextMenuService.prototype.attachThisContext = /**
     * @private
     * @param {?} menu
     * @param {?} parentMenu
     * @return {?}
     */
    function (menu, parentMenu) {
        menu.thisContext = parentMenu.thisContext;
    };
    /**
     * @private
     * @param {?} menu
     * @param {?} overlayRef
     * @return {?}
     */
    ShContextMenuService.prototype.attachOverlayRef = /**
     * @private
     * @param {?} menu
     * @param {?} overlayRef
     * @return {?}
     */
    function (menu, overlayRef) {
        menu.overlayRef = overlayRef;
    };
    ShContextMenuService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ShContextMenuService.ctorParameters = function () { return [
        { type: Overlay }
    ]; };
    return ShContextMenuService;
}());
export { ShContextMenuService };
if (false) {
    /** @type {?} */
    ShContextMenuService.prototype.activeOverlays;
    /** @type {?} */
    ShContextMenuService.prototype.backDropSub;
    /** @type {?} */
    ShContextMenuService.prototype.activeMenu;
    /**
     * @type {?}
     * @private
     */
    ShContextMenuService.prototype.overlay;
}
//# sourceMappingURL=data:application/json;base64,