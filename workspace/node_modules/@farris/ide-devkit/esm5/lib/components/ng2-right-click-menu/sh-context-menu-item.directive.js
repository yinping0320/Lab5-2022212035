/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, EventEmitter, Input, Optional, Output, TemplateRef } from '@angular/core';
var MenuItemContext = /** @class */ (function () {
    function MenuItemContext() {
        this.$implicit = {};
    }
    return MenuItemContext;
}());
export { MenuItemContext };
if (false) {
    /** @type {?} */
    MenuItemContext.prototype.$implicit;
}
var ShContextMenuItemDirective = /** @class */ (function () {
    function ShContextMenuItemDirective(template) {
        this.template = template;
        this.closeOnClick = true;
        this.click = new EventEmitter();
        this.context = new MenuItemContext();
    }
    /**
     * @return {?}
     */
    ShContextMenuItemDirective.prototype.setNotActive = /**
     * @return {?}
     */
    function () {
        this._active = false;
        if (this.subMenu) {
            this.subMenu.setNotActive();
        }
    };
    /**
     * @return {?}
     */
    ShContextMenuItemDirective.prototype.setActive = /**
     * @return {?}
     */
    function () {
        this._active = true;
    };
    ShContextMenuItemDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[shContextMenuItem]'
                },] }
    ];
    /** @nocollapse */
    ShContextMenuItemDirective.ctorParameters = function () { return [
        { type: TemplateRef, decorators: [{ type: Optional }] }
    ]; };
    ShContextMenuItemDirective.propDecorators = {
        subMenu: [{ type: Input }],
        divider: [{ type: Input }],
        visible: [{ type: Input }],
        disabled: [{ type: Input }],
        closeOnClick: [{ type: Input }],
        click: [{ type: Output }]
    };
    return ShContextMenuItemDirective;
}());
export { ShContextMenuItemDirective };
if (false) {
    /** @type {?} */
    ShContextMenuItemDirective.prototype.subMenu;
    /** @type {?} */
    ShContextMenuItemDirective.prototype.divider;
    /** @type {?} */
    ShContextMenuItemDirective.prototype.visible;
    /** @type {?} */
    ShContextMenuItemDirective.prototype.disabled;
    /** @type {?} */
    ShContextMenuItemDirective.prototype.closeOnClick;
    /** @type {?} */
    ShContextMenuItemDirective.prototype.click;
    /** @type {?} */
    ShContextMenuItemDirective.prototype.context;
    /**
     * @type {?}
     * @private
     */
    ShContextMenuItemDirective.prototype._active;
    /** @type {?} */
    ShContextMenuItemDirective.prototype.template;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2gtY29udGV4dC1tZW51LWl0ZW0uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9pZGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvbmcyLXJpZ2h0LWNsaWNrLW1lbnUvc2gtY29udGV4dC1tZW51LWl0ZW0uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFJNUY7SUFHRTtRQUNFLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFDSCxzQkFBQztBQUFELENBQUMsQUFORCxJQU1DOzs7O0lBTEMsb0NBQWU7O0FBT2pCO0lBZ0JFLG9DQUErQixRQUFzQztRQUF0QyxhQUFRLEdBQVIsUUFBUSxDQUE4QjtRQVI1RCxpQkFBWSxHQUFHLElBQUksQ0FBQztRQUVuQixVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQTJCLENBQUM7UUFFOUQsWUFBTyxHQUFvQixJQUFJLGVBQWUsRUFBRSxDQUFDO0lBS2pELENBQUM7Ozs7SUFFRCxpREFBWTs7O0lBQVo7UUFDRSxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNyQixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQztTQUM3QjtJQUNILENBQUM7Ozs7SUFFRCw4Q0FBUzs7O0lBQVQ7UUFDRSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztJQUN0QixDQUFDOztnQkE1QkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxxQkFBcUI7aUJBQ2hDOzs7O2dCQWR5RCxXQUFXLHVCQTRCdEQsUUFBUTs7OzBCQVpwQixLQUFLOzBCQUNMLEtBQUs7MEJBQ0wsS0FBSzsyQkFDTCxLQUFLOytCQUNMLEtBQUs7d0JBRUwsTUFBTTs7SUFtQlQsaUNBQUM7Q0FBQSxBQTdCRCxJQTZCQztTQTFCWSwwQkFBMEI7OztJQUNyQyw2Q0FBaUI7O0lBQ2pCLDZDQUEwQjs7SUFDMUIsNkNBQThEOztJQUM5RCw4Q0FBK0Q7O0lBQy9ELGtEQUE2Qjs7SUFFN0IsMkNBQThEOztJQUU5RCw2Q0FBaUQ7Ozs7O0lBRWpELDZDQUF5Qjs7SUFFYiw4Q0FBeUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3B0aW9uYWwsIE91dHB1dCwgVGVtcGxhdGVSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG4vLyBpbXBvcnQge1NoQ29udGV4dE1lbnVDb21wb25lbnR9IGZyb20gJy4vc2gtY29udGV4dC1tZW51LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7U2hDb250ZXh0TWVudUNsaWNrRXZlbnR9IGZyb20gJy4vc2gtY29udGV4dC1tZW51Lm1vZGVscyc7XHJcblxyXG5leHBvcnQgY2xhc3MgTWVudUl0ZW1Db250ZXh0IHtcclxuICAkaW1wbGljaXQ6IGFueTtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLiRpbXBsaWNpdCA9IHt9O1xyXG4gIH1cclxufVxyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbc2hDb250ZXh0TWVudUl0ZW1dJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgU2hDb250ZXh0TWVudUl0ZW1EaXJlY3RpdmUge1xyXG4gIEBJbnB1dCgpIHN1Yk1lbnU7XHJcbiAgQElucHV0KCkgZGl2aWRlcjogYm9vbGVhbjtcclxuICBASW5wdXQoKSB2aXNpYmxlOiAoZXZlbnQ6IFNoQ29udGV4dE1lbnVDbGlja0V2ZW50KSA9PiBib29sZWFuO1xyXG4gIEBJbnB1dCgpIGRpc2FibGVkOiAoZXZlbnQ6IFNoQ29udGV4dE1lbnVDbGlja0V2ZW50KSA9PiBib29sZWFuO1xyXG4gIEBJbnB1dCgpIGNsb3NlT25DbGljayA9IHRydWU7XHJcblxyXG4gIEBPdXRwdXQoKSBjbGljayA9IG5ldyBFdmVudEVtaXR0ZXI8U2hDb250ZXh0TWVudUNsaWNrRXZlbnQ+KCk7XHJcblxyXG4gIGNvbnRleHQ6IE1lbnVJdGVtQ29udGV4dCA9IG5ldyBNZW51SXRlbUNvbnRleHQoKTtcclxuXHJcbiAgcHJpdmF0ZSBfYWN0aXZlOiBib29sZWFuO1xyXG5cclxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBwdWJsaWMgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPE1lbnVJdGVtQ29udGV4dD4pIHtcclxuICB9XHJcblxyXG4gIHNldE5vdEFjdGl2ZSgpIHtcclxuICAgIHRoaXMuX2FjdGl2ZSA9IGZhbHNlO1xyXG4gICAgaWYgKHRoaXMuc3ViTWVudSkge1xyXG4gICAgICB0aGlzLnN1Yk1lbnUuc2V0Tm90QWN0aXZlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRBY3RpdmUoKSB7XHJcbiAgICB0aGlzLl9hY3RpdmUgPSB0cnVlO1xyXG4gIH1cclxufVxyXG4iXX0=