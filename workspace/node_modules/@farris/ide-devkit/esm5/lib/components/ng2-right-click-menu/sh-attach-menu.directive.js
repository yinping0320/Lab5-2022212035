/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, Input } from '@angular/core';
import { ShContextMenuService } from './sh-context-menu.service';
import { ShContextMenuComponent } from './sh-context-menu.component';
import { fromEvent } from 'rxjs/observable/fromEvent';
import { merge } from 'rxjs/observable/merge';
var ShAttachMenuDirective = /** @class */ (function () {
    function ShAttachMenuDirective(ctxService, elm) {
        this.ctxService = ctxService;
        this.elm = elm;
    }
    /**
     * @return {?}
     */
    ShAttachMenuDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setupEvents();
    };
    /**
     * @private
     * @return {?}
     */
    ShAttachMenuDirective.prototype.setupEvents = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var observables = [];
        if (!this.triggers) {
            observables.push(fromEvent(this.elm.nativeElement, 'contextmenu'));
        }
        else {
            this.triggers.forEach(function (t) {
                observables.push(fromEvent(_this.elm.nativeElement, t));
            });
        }
        this.sub = merge.apply(void 0, tslib_1.__spread(observables)).subscribe(this.openMenu.bind(this));
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ShAttachMenuDirective.prototype.openMenu = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.ctxService.openMenu({
            menu: this.menu,
            mouseEvent: event,
            targetElement: this.elm,
            data: this.data
        });
    };
    /**
     * @return {?}
     */
    ShAttachMenuDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.sub.unsubscribe();
    };
    ShAttachMenuDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[shAttachMenu]'
                },] }
    ];
    /** @nocollapse */
    ShAttachMenuDirective.ctorParameters = function () { return [
        { type: ShContextMenuService },
        { type: ElementRef }
    ]; };
    ShAttachMenuDirective.propDecorators = {
        menu: [{ type: Input, args: ['shAttachMenu',] }],
        triggers: [{ type: Input, args: ['shMenuTriggers',] }],
        data: [{ type: Input, args: ['shMenuData',] }]
    };
    return ShAttachMenuDirective;
}());
export { ShAttachMenuDirective };
if (false) {
    /** @type {?} */
    ShAttachMenuDirective.prototype.menu;
    /** @type {?} */
    ShAttachMenuDirective.prototype.triggers;
    /** @type {?} */
    ShAttachMenuDirective.prototype.data;
    /** @type {?} */
    ShAttachMenuDirective.prototype.sub;
    /**
     * @type {?}
     * @private
     */
    ShAttachMenuDirective.prototype.ctxService;
    /**
     * @type {?}
     * @private
     */
    ShAttachMenuDirective.prototype.elm;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2gtYXR0YWNoLW1lbnUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9pZGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvbmcyLXJpZ2h0LWNsaWNrLW1lbnUvc2gtYXR0YWNoLW1lbnUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFvQixNQUFNLGVBQWUsQ0FBQztBQUM5RSxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUMvRCxPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQztBQUVuRSxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDcEQsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBRTVDO0lBU0UsK0JBQW9CLFVBQWdDLEVBQVUsR0FBZTtRQUF6RCxlQUFVLEdBQVYsVUFBVSxDQUFzQjtRQUFVLFFBQUcsR0FBSCxHQUFHLENBQVk7SUFDN0UsQ0FBQzs7OztJQUVELHdDQUFROzs7SUFBUjtRQUNFLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNyQixDQUFDOzs7OztJQUVPLDJDQUFXOzs7O0lBQW5CO1FBQUEsaUJBWUM7O1lBWE8sV0FBVyxHQUFHLEVBQUU7UUFFdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQztTQUNwRTthQUFNO1lBQ0wsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBQyxDQUFDO2dCQUN0QixXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pELENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxJQUFJLENBQUMsR0FBRyxHQUFHLEtBQUssZ0NBQUksV0FBVyxHQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7Ozs7O0lBRUQsd0NBQVE7Ozs7SUFBUixVQUFTLEtBQWlCO1FBQ3hCLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDO1lBQ3ZCLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLFVBQVUsRUFBRSxLQUFLO1lBQ2pCLGFBQWEsRUFBRSxJQUFJLENBQUMsR0FBRztZQUN2QixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7U0FDaEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7OztJQUVELDJDQUFXOzs7SUFBWDtRQUNFLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDekIsQ0FBQzs7Z0JBekNGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO2lCQUMzQjs7OztnQkFSTyxvQkFBb0I7Z0JBRFQsVUFBVTs7O3VCQVcxQixLQUFLLFNBQUMsY0FBYzsyQkFDcEIsS0FBSyxTQUFDLGdCQUFnQjt1QkFDdEIsS0FBSyxTQUFDLFlBQVk7O0lBb0NyQiw0QkFBQztDQUFBLEFBMUNELElBMENDO1NBdkNZLHFCQUFxQjs7O0lBQ2hDLHFDQUFvRDs7SUFDcEQseUNBQTRDOztJQUM1QyxxQ0FBK0I7O0lBQy9CLG9DQUFrQjs7Ozs7SUFFTiwyQ0FBd0M7Ozs7O0lBQUUsb0NBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7U2hDb250ZXh0TWVudVNlcnZpY2V9IGZyb20gJy4vc2gtY29udGV4dC1tZW51LnNlcnZpY2UnO1xyXG5pbXBvcnQge1NoQ29udGV4dE1lbnVDb21wb25lbnR9IGZyb20gJy4vc2gtY29udGV4dC1tZW51LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7U3Vic2NyaXB0aW9ufSBmcm9tICdyeGpzL1N1YnNjcmlwdGlvbic7XHJcbmltcG9ydCB7ZnJvbUV2ZW50fSBmcm9tICdyeGpzL29ic2VydmFibGUvZnJvbUV2ZW50JztcclxuaW1wb3J0IHttZXJnZX0gZnJvbSAncnhqcy9vYnNlcnZhYmxlL21lcmdlJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW3NoQXR0YWNoTWVudV0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTaEF0dGFjaE1lbnVEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkRlc3Ryb3ksIE9uSW5pdCB7XHJcbiAgQElucHV0KCdzaEF0dGFjaE1lbnUnKSBtZW51OiBTaENvbnRleHRNZW51Q29tcG9uZW50O1xyXG4gIEBJbnB1dCgnc2hNZW51VHJpZ2dlcnMnKSB0cmlnZ2Vyczogc3RyaW5nW107XHJcbiAgQElucHV0KCdzaE1lbnVEYXRhJykgZGF0YTogYW55O1xyXG4gIHN1YjogU3Vic2NyaXB0aW9uO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGN0eFNlcnZpY2U6IFNoQ29udGV4dE1lbnVTZXJ2aWNlLCBwcml2YXRlIGVsbTogRWxlbWVudFJlZikge1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICB0aGlzLnNldHVwRXZlbnRzKCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNldHVwRXZlbnRzKCkge1xyXG4gICAgY29uc3Qgb2JzZXJ2YWJsZXMgPSBbXTtcclxuXHJcbiAgICBpZiAoIXRoaXMudHJpZ2dlcnMpIHtcclxuICAgICAgb2JzZXJ2YWJsZXMucHVzaChmcm9tRXZlbnQodGhpcy5lbG0ubmF0aXZlRWxlbWVudCwgJ2NvbnRleHRtZW51JykpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy50cmlnZ2Vycy5mb3JFYWNoKCh0KSA9PiB7XHJcbiAgICAgICAgb2JzZXJ2YWJsZXMucHVzaChmcm9tRXZlbnQodGhpcy5lbG0ubmF0aXZlRWxlbWVudCwgdCkpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnN1YiA9IG1lcmdlKC4uLm9ic2VydmFibGVzKS5zdWJzY3JpYmUodGhpcy5vcGVuTWVudS5iaW5kKHRoaXMpKTtcclxuICB9XHJcblxyXG4gIG9wZW5NZW51KGV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcbiAgICB0aGlzLmN0eFNlcnZpY2Uub3Blbk1lbnUoe1xyXG4gICAgICBtZW51OiB0aGlzLm1lbnUsXHJcbiAgICAgIG1vdXNlRXZlbnQ6IGV2ZW50LFxyXG4gICAgICB0YXJnZXRFbGVtZW50OiB0aGlzLmVsbSxcclxuICAgICAgZGF0YTogdGhpcy5kYXRhXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgdGhpcy5zdWIudW5zdWJzY3JpYmUoKTtcclxuICB9XHJcbn1cclxuIl19