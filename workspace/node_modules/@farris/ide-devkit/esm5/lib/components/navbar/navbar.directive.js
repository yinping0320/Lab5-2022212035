/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ContentChildren, Directive, HostListener, QueryList, ViewChildren } from '@angular/core';
import { NavbarState } from './navbar.state';
import { ElementRef } from '@angular/core';
import { BsDropdownConfig } from '../dropdown/dropdown.config';
import { BsDropdownDirective } from '../dropdown/index';
var NavbarDirective = /** @class */ (function () {
    function NavbarDirective(_elementRef, _config, _state) {
        this._elementRef = _elementRef;
        this._config = _config;
        this._state = _state;
        this._state.autoClose = this._config.autoClose;
        this.onItemClick = this._state.onItemClick;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    NavbarDirective.prototype.onDocumentClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._state.hideAllDropdown();
    };
    /**
     * @return {?}
     */
    NavbarDirective.prototype.onEsc = /**
     * @return {?}
     */
    function () {
        if (this._state.autoClose) {
            this._state.hideCurrentDropdown();
        }
    };
    /**
     * @return {?}
     */
    NavbarDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    NavbarDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.childDropdowns.forEach(function (item) { return _this._state.addDropdown(item); });
    };
    NavbarDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[navbar]',
                    exportAs: 'navbar',
                    providers: [NavbarState]
                },] }
    ];
    /** @nocollapse */
    NavbarDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: BsDropdownConfig },
        { type: NavbarState }
    ]; };
    NavbarDirective.propDecorators = {
        childDropdowns: [{ type: ContentChildren, args: [BsDropdownDirective,] }],
        childDropdowns2: [{ type: ViewChildren, args: [BsDropdownDirective,] }],
        onDocumentClick: [{ type: HostListener, args: ['document:click', ['$event'],] }],
        onEsc: [{ type: HostListener, args: ['keyup.esc',] }]
    };
    return NavbarDirective;
}());
export { NavbarDirective };
if (false) {
    /** @type {?} */
    NavbarDirective.prototype.onItemClick;
    /** @type {?} */
    NavbarDirective.prototype.childDropdowns;
    /** @type {?} */
    NavbarDirective.prototype.childDropdowns2;
    /**
     * @type {?}
     * @private
     */
    NavbarDirective.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    NavbarDirective.prototype._config;
    /**
     * @type {?}
     * @private
     */
    NavbarDirective.prototype._state;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2YmFyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvaWRlLWRldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL25hdmJhci9uYXZiYXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBR0wsZUFBZSxFQUNmLFNBQVMsRUFFVCxZQUFZLEVBRVosU0FBUyxFQUFFLFlBQVksRUFDeEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFDN0QsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFFdEQ7SUF1QkUseUJBQW9CLFdBQXVCLEVBQ3ZCLE9BQXlCLEVBQ3pCLE1BQW1CO1FBRm5CLGdCQUFXLEdBQVgsV0FBVyxDQUFZO1FBQ3ZCLFlBQU8sR0FBUCxPQUFPLENBQWtCO1FBQ3pCLFdBQU0sR0FBTixNQUFNLENBQWE7UUFDckMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFDL0MsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQztJQUM3QyxDQUFDOzs7OztJQWhCRCx5Q0FBZTs7OztJQURmLFVBQ2dCLEtBQVU7UUFDeEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUNoQyxDQUFDOzs7O0lBR0QsK0JBQUs7OztJQURMO1FBRUUsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRTtZQUN6QixJQUFJLENBQUMsTUFBTSxDQUFDLG1CQUFtQixFQUFFLENBQUM7U0FDbkM7SUFDSCxDQUFDOzs7O0lBU0Qsa0NBQVE7OztJQUFSO0lBQ0EsQ0FBQzs7OztJQUVELHlDQUFlOzs7SUFBZjtRQUFBLGlCQUVDO1FBREMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsVUFBQyxJQUF5QixJQUFLLE9BQUEsS0FBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQTdCLENBQTZCLENBQUMsQ0FBQztJQUM1RixDQUFDOztnQkFuQ0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxVQUFVO29CQUNwQixRQUFRLEVBQUUsUUFBUTtvQkFDbEIsU0FBUyxFQUFFLENBQUMsV0FBVyxDQUFDO2lCQUN6Qjs7OztnQkFSTyxVQUFVO2dCQUNWLGdCQUFnQjtnQkFGaEIsV0FBVzs7O2lDQWNoQixlQUFlLFNBQUMsbUJBQW1CO2tDQUNuQyxZQUFZLFNBQUMsbUJBQW1CO2tDQUNoQyxZQUFZLFNBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxRQUFRLENBQUM7d0JBS3pDLFlBQVksU0FBQyxXQUFXOztJQW9CM0Isc0JBQUM7Q0FBQSxBQXBDRCxJQW9DQztTQS9CWSxlQUFlOzs7SUFFMUIsc0NBQWtDOztJQUVsQyx5Q0FBcUY7O0lBQ3JGLDBDQUFtRjs7Ozs7SUFhdkUsc0NBQStCOzs7OztJQUMvQixrQ0FBaUM7Ozs7O0lBQ2pDLGlDQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQWZ0ZXJDb250ZW50Q2hlY2tlZCxcclxuICBBZnRlclZpZXdDaGVja2VkLCBBZnRlclZpZXdJbml0LFxyXG4gIENvbnRlbnRDaGlsZHJlbixcclxuICBEaXJlY3RpdmUsXHJcbiAgRXZlbnRFbWl0dGVyLFxyXG4gIEhvc3RMaXN0ZW5lciwgT25DaGFuZ2VzLFxyXG4gIE9uSW5pdCxcclxuICBRdWVyeUxpc3QsIFZpZXdDaGlsZHJlblxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge05hdmJhclN0YXRlfSBmcm9tICcuL25hdmJhci5zdGF0ZSc7XHJcbmltcG9ydCB7RWxlbWVudFJlZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7QnNEcm9wZG93bkNvbmZpZ30gZnJvbSAnLi4vZHJvcGRvd24vZHJvcGRvd24uY29uZmlnJztcclxuaW1wb3J0IHtCc0Ryb3Bkb3duRGlyZWN0aXZlfSBmcm9tICcuLi9kcm9wZG93bi9pbmRleCc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tuYXZiYXJdJyxcclxuICBleHBvcnRBczogJ25hdmJhcicsXHJcbiAgcHJvdmlkZXJzOiBbTmF2YmFyU3RhdGVdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOYXZiYXJEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQge1xyXG5cclxuICBvbkl0ZW1DbGljazogRXZlbnRFbWl0dGVyPHN0cmluZz47XHJcblxyXG4gIEBDb250ZW50Q2hpbGRyZW4oQnNEcm9wZG93bkRpcmVjdGl2ZSkgY2hpbGREcm9wZG93bnM6IFF1ZXJ5TGlzdDxCc0Ryb3Bkb3duRGlyZWN0aXZlPjtcclxuICBAVmlld0NoaWxkcmVuKEJzRHJvcGRvd25EaXJlY3RpdmUpIGNoaWxkRHJvcGRvd25zMjogUXVlcnlMaXN0PEJzRHJvcGRvd25EaXJlY3RpdmU+O1xyXG4gIEBIb3N0TGlzdGVuZXIoJ2RvY3VtZW50OmNsaWNrJywgWyckZXZlbnQnXSlcclxuICBvbkRvY3VtZW50Q2xpY2soZXZlbnQ6IGFueSk6IHZvaWQge1xyXG4gICAgdGhpcy5fc3RhdGUuaGlkZUFsbERyb3Bkb3duKCk7XHJcbiAgfVxyXG5cclxuICBASG9zdExpc3RlbmVyKCdrZXl1cC5lc2MnKVxyXG4gIG9uRXNjKCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuX3N0YXRlLmF1dG9DbG9zZSkge1xyXG4gICAgICB0aGlzLl9zdGF0ZS5oaWRlQ3VycmVudERyb3Bkb3duKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmLFxyXG4gICAgICAgICAgICAgIHByaXZhdGUgX2NvbmZpZzogQnNEcm9wZG93bkNvbmZpZyxcclxuICAgICAgICAgICAgICBwcml2YXRlIF9zdGF0ZTogTmF2YmFyU3RhdGUpIHtcclxuICAgIHRoaXMuX3N0YXRlLmF1dG9DbG9zZSA9IHRoaXMuX2NvbmZpZy5hdXRvQ2xvc2U7XHJcbiAgICB0aGlzLm9uSXRlbUNsaWNrID0gdGhpcy5fc3RhdGUub25JdGVtQ2xpY2s7XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICB9XHJcblxyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgIHRoaXMuY2hpbGREcm9wZG93bnMuZm9yRWFjaCgoaXRlbTogQnNEcm9wZG93bkRpcmVjdGl2ZSkgPT4gdGhpcy5fc3RhdGUuYWRkRHJvcGRvd24oaXRlbSkpO1xyXG4gIH1cclxufVxyXG4iXX0=