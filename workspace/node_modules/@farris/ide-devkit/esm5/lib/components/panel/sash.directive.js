/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Input, Output, ViewContainerRef, HostListener, Renderer2 } from '@angular/core';
var SashDirective = /** @class */ (function () {
    function SashDirective(_elementRef, renderer, _viewContainerRef) {
        this._elementRef = _elementRef;
        this.renderer = renderer;
        this._viewContainerRef = _viewContainerRef;
        this.widthChanged = new EventEmitter();
    }
    /**
     * @return {?}
     */
    SashDirective.prototype.onMouseDown = /**
     * @return {?}
     */
    function () {
        console.log('mousedown');
        this.bindDocumentClickListener();
    };
    /**
     * @return {?}
     */
    SashDirective.prototype.onMouseUp = /**
     * @return {?}
     */
    function () {
        console.log('mouseup');
    };
    /**
     * @return {?}
     */
    SashDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    SashDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    SashDirective.prototype.bindDocumentClickListener = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.documentClickListener) {
            this.documentClickListener = this.renderer.listen('document', 'mouseup', function (event) {
                console.log('mouseup');
                console.log(event);
                _this.unbindDocumentMoveListener();
                _this.unbindDocumentClickListener();
            });
            if (!this.documentMoveListener) {
                this.bindDocumentClickListener = this.renderer.listen('document', 'mousemove', function (event) {
                    _this.panelWidth = event.clientX;
                    /** @type {?} */
                    var newWidth = (/** @type {?} */ (event.clientX));
                    _this.widthChanged.emit(newWidth);
                });
            }
        }
    };
    /**
     * @return {?}
     */
    SashDirective.prototype.unbindDocumentClickListener = /**
     * @return {?}
     */
    function () {
        if (this.documentClickListener) {
            this.documentClickListener();
            this.documentClickListener = null;
        }
    };
    /**
     * @return {?}
     */
    SashDirective.prototype.unbindDocumentMoveListener = /**
     * @return {?}
     */
    function () {
        if (this.bindDocumentClickListener) {
            this.bindDocumentClickListener();
            this.bindDocumentClickListener = null;
        }
    };
    SashDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[sash]',
                    exportAs: 'sash'
                },] }
    ];
    /** @nocollapse */
    SashDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: ViewContainerRef }
    ]; };
    SashDirective.propDecorators = {
        panelWidth: [{ type: Input }],
        widthChanged: [{ type: Output }],
        onMouseDown: [{ type: HostListener, args: ['mousedown',] }],
        onMouseUp: [{ type: HostListener, args: ['mouseup',] }]
    };
    return SashDirective;
}());
export { SashDirective };
if (false) {
    /** @type {?} */
    SashDirective.prototype.documentClickListener;
    /** @type {?} */
    SashDirective.prototype.documentMoveListener;
    /** @type {?} */
    SashDirective.prototype.panelWidth;
    /** @type {?} */
    SashDirective.prototype.widthChanged;
    /**
     * @type {?}
     * @private
     */
    SashDirective.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    SashDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    SashDirective.prototype._viewContainerRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FzaC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2lkZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wYW5lbC9zYXNoLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFBRSxVQUFVLEVBQW1CLFlBQVksRUFBZSxLQUFLLEVBQXFCLE1BQU0sRUFDbkcsZ0JBQWdCLEVBQ2hCLFlBQVksRUFDWixTQUFTLEVBQ1YsTUFBTSxlQUFlLENBQUM7QUFFdkI7SUFVRSx1QkFBb0IsV0FBdUIsRUFDakMsUUFBbUIsRUFDbkIsaUJBQW1DO1FBRnpCLGdCQUFXLEdBQVgsV0FBVyxDQUFZO1FBQ2pDLGFBQVEsR0FBUixRQUFRLENBQVc7UUFDbkIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFrQjtRQU1uQyxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7SUFKcEQsQ0FBQzs7OztJQU0wQixtQ0FBVzs7O0lBQXRDO1FBQ0UsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN6QixJQUFJLENBQUMseUJBQXlCLEVBQUUsQ0FBQztJQUNuQyxDQUFDOzs7O0lBRXdCLGlDQUFTOzs7SUFBbEM7UUFDRSxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3pCLENBQUM7Ozs7SUFFRCxnQ0FBUTs7O0lBQVI7SUFDQSxDQUFDOzs7O0lBRUQsbUNBQVc7OztJQUFYO0lBQ0EsQ0FBQzs7OztJQUlELGlEQUF5Qjs7O0lBQXpCO1FBQUEsaUJBaUJDO1FBaEJDLElBQUksQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUU7WUFDL0IsSUFBSSxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxTQUFTLEVBQUUsVUFBQyxLQUFLO2dCQUM3RSxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNuQixLQUFJLENBQUMsMEJBQTBCLEVBQUUsQ0FBQztnQkFDbEMsS0FBSSxDQUFDLDJCQUEyQixFQUFFLENBQUM7WUFDckMsQ0FBQyxDQUFDLENBQUM7WUFFSCxJQUFJLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFO2dCQUM5QixJQUFJLENBQUMseUJBQXlCLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLFdBQVcsRUFBRSxVQUFDLEtBQUs7b0JBQ25GLEtBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQzs7d0JBQzFCLFFBQVEsR0FBRyxtQkFBQSxLQUFLLENBQUMsT0FBTyxFQUFVO29CQUN4QyxLQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDbkMsQ0FBQyxDQUFDLENBQUM7YUFDSjtTQUNGO0lBQ0gsQ0FBQzs7OztJQUVELG1EQUEyQjs7O0lBQTNCO1FBQ0UsSUFBSSxJQUFJLENBQUMscUJBQXFCLEVBQUU7WUFDOUIsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7WUFDN0IsSUFBSSxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQztTQUNuQztJQUNILENBQUM7Ozs7SUFFRCxrREFBMEI7OztJQUExQjtRQUNFLElBQUksSUFBSSxDQUFDLHlCQUF5QixFQUFFO1lBQ2xDLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxDQUFDO1lBQ2pDLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxJQUFJLENBQUM7U0FDdkM7SUFDSCxDQUFDOztnQkFwRUYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxRQUFRO29CQUNsQixRQUFRLEVBQUUsTUFBTTtpQkFDakI7Ozs7Z0JBVFksVUFBVTtnQkFHckIsU0FBUztnQkFGVCxnQkFBZ0I7Ozs2QkFxQmYsS0FBSzsrQkFFTCxNQUFNOzhCQUVOLFlBQVksU0FBQyxXQUFXOzRCQUt4QixZQUFZLFNBQUMsU0FBUzs7SUE0Q3pCLG9CQUFDO0NBQUEsQUFyRUQsSUFxRUM7U0FqRVksYUFBYTs7O0lBRXhCLDhDQUEyQjs7SUFFM0IsNkNBQTBCOztJQVExQixtQ0FBNEI7O0lBRTVCLHFDQUFvRDs7Ozs7SUFSeEMsb0NBQStCOzs7OztJQUN6QyxpQ0FBMkI7Ozs7O0lBQzNCLDBDQUEyQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFbWJlZGRlZFZpZXdSZWYsIEV2ZW50RW1pdHRlciwgSG9zdEJpbmRpbmcsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCwgT3V0cHV0LCBSZW5kZXJlcixcclxuICBWaWV3Q29udGFpbmVyUmVmLFxyXG4gIEhvc3RMaXN0ZW5lcixcclxuICBSZW5kZXJlcjJcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW3Nhc2hdJyxcclxuICBleHBvcnRBczogJ3Nhc2gnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTYXNoRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xyXG5cclxuICBkb2N1bWVudENsaWNrTGlzdGVuZXI6IGFueTtcclxuXHJcbiAgZG9jdW1lbnRNb3ZlTGlzdGVuZXI6IGFueTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfZWxlbWVudFJlZjogRWxlbWVudFJlZixcclxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcclxuICAgIHByaXZhdGUgX3ZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYpIHtcclxuXHJcbiAgfVxyXG5cclxuICBASW5wdXQoKSBwYW5lbFdpZHRoOiBudW1iZXI7XHJcblxyXG4gIEBPdXRwdXQoKSB3aWR0aENoYW5nZWQgPSBuZXcgRXZlbnRFbWl0dGVyPG51bWJlcj4oKTtcclxuXHJcbiAgQEhvc3RMaXN0ZW5lcignbW91c2Vkb3duJykgb25Nb3VzZURvd24oKSB7XHJcbiAgICBjb25zb2xlLmxvZygnbW91c2Vkb3duJyk7XHJcbiAgICB0aGlzLmJpbmREb2N1bWVudENsaWNrTGlzdGVuZXIoKTtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ21vdXNldXAnKSBvbk1vdXNlVXAoKSB7XHJcbiAgICBjb25zb2xlLmxvZygnbW91c2V1cCcpO1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICB9XHJcblxyXG5cclxuXHJcbiAgYmluZERvY3VtZW50Q2xpY2tMaXN0ZW5lcigpIHtcclxuICAgIGlmICghdGhpcy5kb2N1bWVudENsaWNrTGlzdGVuZXIpIHtcclxuICAgICAgdGhpcy5kb2N1bWVudENsaWNrTGlzdGVuZXIgPSB0aGlzLnJlbmRlcmVyLmxpc3RlbignZG9jdW1lbnQnLCAnbW91c2V1cCcsIChldmVudCkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdtb3VzZXVwJyk7XHJcbiAgICAgICAgY29uc29sZS5sb2coZXZlbnQpO1xyXG4gICAgICAgIHRoaXMudW5iaW5kRG9jdW1lbnRNb3ZlTGlzdGVuZXIoKTtcclxuICAgICAgICB0aGlzLnVuYmluZERvY3VtZW50Q2xpY2tMaXN0ZW5lcigpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGlmICghdGhpcy5kb2N1bWVudE1vdmVMaXN0ZW5lcikge1xyXG4gICAgICAgIHRoaXMuYmluZERvY3VtZW50Q2xpY2tMaXN0ZW5lciA9IHRoaXMucmVuZGVyZXIubGlzdGVuKCdkb2N1bWVudCcsICdtb3VzZW1vdmUnLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAgIHRoaXMucGFuZWxXaWR0aCA9IGV2ZW50LmNsaWVudFg7XHJcbiAgICAgICAgICBjb25zdCBuZXdXaWR0aCA9IGV2ZW50LmNsaWVudFggYXMgbnVtYmVyO1xyXG4gICAgICAgICAgdGhpcy53aWR0aENoYW5nZWQuZW1pdChuZXdXaWR0aCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVuYmluZERvY3VtZW50Q2xpY2tMaXN0ZW5lcigpIHtcclxuICAgIGlmICh0aGlzLmRvY3VtZW50Q2xpY2tMaXN0ZW5lcikge1xyXG4gICAgICB0aGlzLmRvY3VtZW50Q2xpY2tMaXN0ZW5lcigpO1xyXG4gICAgICB0aGlzLmRvY3VtZW50Q2xpY2tMaXN0ZW5lciA9IG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB1bmJpbmREb2N1bWVudE1vdmVMaXN0ZW5lcigpIHtcclxuICAgIGlmICh0aGlzLmJpbmREb2N1bWVudENsaWNrTGlzdGVuZXIpIHtcclxuICAgICAgdGhpcy5iaW5kRG9jdW1lbnRDbGlja0xpc3RlbmVyKCk7XHJcbiAgICAgIHRoaXMuYmluZERvY3VtZW50Q2xpY2tMaXN0ZW5lciA9IG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==