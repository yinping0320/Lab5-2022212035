/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementRef, Input, Output, ViewChild, EventEmitter } from '@angular/core';
import { pick } from 'lodash-es';
/** @type {?} */
var loadedMonaco = false;
/** @type {?} */
var loadPromise;
/**
 * @abstract
 */
var BaseMonacoEditor = /** @class */ (function () {
    function BaseMonacoEditor(codeEditorEventService, config) {
        this.codeEditorEventService = codeEditorEventService;
        this.config = config;
        // 初始化自定义事件
        /** @type {?} */
        var self = this;
        codeEditorEventService.eventNames.forEach(function (name) {
            // 创建自定义事件，此处作用等效于: @Output() onInit = new EventEmitter<any>()
            self[name] = new EventEmitter();
            /** @type {?} */
            var eventPair = pick(self, name);
            codeEditorEventService.addEvent(eventPair);
        });
    }
    Object.defineProperty(BaseMonacoEditor.prototype, "options", {
        get: /**
         * @return {?}
         */
        function () {
            return this._options;
        },
        set: /**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            // 默认options(this.config.defaultOptions) + 自定义options(options)
            this._options = Object.assign({}, this.config.defaultOptions, options);
            if (this._editor) {
                this._editor.dispose();
                this.initMonaco(options);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    BaseMonacoEditor.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (loadedMonaco) {
            // Wait until monaco editor is available
            loadPromise.then(function () {
                _this.initMonaco(_this.options);
            });
        }
        else {
            loadedMonaco = true;
            loadPromise = new Promise(function (resolve) {
                /** @type {?} */
                var baseUrl = _this.config.baseUrl || '/assets';
                // if (typeof((<any>window).monaco) === 'object') {
                //   resolve();
                //   return;
                // }
                /** @type {?} */
                var onGotAmdLoader = function () {
                    // Load monaco
                    ((/** @type {?} */ (window))).require.config({ paths: { 'vs': baseUrl + "/monaco/vs" } });
                    ((/** @type {?} */ (window))).require(['vs/editor/editor.main'], function () {
                        if (typeof _this.config.onMonacoLoad === 'function') {
                            _this.config.onMonacoLoad();
                        }
                        _this.initMonaco(_this.options);
                        resolve();
                    });
                };
                // Load AMD loader if necessary
                if (!((/** @type {?} */ (window))).require) {
                    /** @type {?} */
                    var loaderScript = document.createElement('script');
                    loaderScript.type = 'text/javascript';
                    loaderScript.src = baseUrl + "/monaco/vs/loader.js";
                    loaderScript.addEventListener('load', onGotAmdLoader);
                    document.body.appendChild(loaderScript);
                }
                else {
                    onGotAmdLoader();
                }
            });
        }
    };
    /**
     * @return {?}
     */
    BaseMonacoEditor.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this._windowResizeSubscription) {
            this._windowResizeSubscription.unsubscribe();
        }
        if (this._editor) {
            this._editor.dispose();
            this._editor = undefined;
        }
    };
    BaseMonacoEditor.propDecorators = {
        _editorComponent: [{ type: ViewChild, args: ['codeEditor',] }],
        onInit: [{ type: Output }],
        options: [{ type: Input, args: ['options',] }]
    };
    return BaseMonacoEditor;
}());
export { BaseMonacoEditor };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    BaseMonacoEditor.prototype._editor;
    /**
     * @type {?}
     * @private
     */
    BaseMonacoEditor.prototype._options;
    /**
     * @type {?}
     * @protected
     */
    BaseMonacoEditor.prototype._windowResizeSubscription;
    /** @type {?} */
    BaseMonacoEditor.prototype._editorComponent;
    /** @type {?} */
    BaseMonacoEditor.prototype.onInit;
    /**
     * @type {?}
     * @private
     */
    BaseMonacoEditor.prototype.codeEditorEventService;
    /**
     * @type {?}
     * @private
     */
    BaseMonacoEditor.prototype.config;
    /**
     * @abstract
     * @protected
     * @param {?} options
     * @return {?}
     */
    BaseMonacoEditor.prototype.initMonaco = function (options) { };
}
//# sourceMappingURL=data:application/json;base64,