/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter } from '@angular/core';
import { TREE_EVENTS } from '../constants/events';
var TreeNode = /** @class */ (function () {
    function TreeNode(data, parent, treeModel) {
        if (parent === void 0) { parent = null; }
        var _this = this;
        this.data = data;
        this.isVirtualRoot = false;
        this._isActive = false;
        // 变更树节点展示字段，由外部触发
        this.changeDisplayField = new EventEmitter();
        Object.assign(this, data, { parent: parent, treeModel: treeModel });
        this.treeModel = treeModel;
        this.parent = parent;
        this.level = this.parent ? this.parent.level + 1 : 0;
        if (this.isExpandedField) {
            this.isExpanded = true;
        }
        // 验证字段添加
        // console.log(this.idField);
        // console.log(this.typeField);
        this.childrenField = this.childrenField.map(function (child) { return new TreeNode(child, _this, treeModel); });
        // bug修复：TreeModel.canMoveNode使用parentNode，会出现undefined。这里做兼容
        this.parentNode = this.parent;
    }
    Object.defineProperty(TreeNode.prototype, "isExpanded", {
        get: /**
         * @return {?}
         */
        function () { return this._isExpanded; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this._isExpanded = value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "isCollapsed", {
        get: /**
         * @return {?}
         */
        function () { return !this._isExpanded; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "isActive", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isActive;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._isActive = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "options", {
        // Proxy of treeModel
        get: 
        // Proxy of treeModel
        /**
         * @return {?}
         */
        function () {
            return this.treeModel.options;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    TreeNode.prototype.fireEvent = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.treeModel.fireEvent(event);
    };
    Object.defineProperty(TreeNode.prototype, "idField", {
        // 表现的更像一个字段，将其封装成属性，并根据开放的读写权限，设置get/set
        get: 
        // 表现的更像一个字段，将其封装成属性，并根据开放的读写权限，设置get/set
        /**
         * @return {?}
         */
        function () {
            return this[this.options.idField];
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this[this.options.idField] = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "childrenField", {
        get: /**
         * @return {?}
         */
        function () {
            return this[this.options.childrenField] || [];
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this[this.options.childrenField] = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "displayField", {
        get: /**
         * @return {?}
         */
        function () {
            return this[this.options.displayField];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "typeField", {
        get: /**
         * @return {?}
         */
        function () {
            return this[this.options.typeField];
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this[this.options.typeField] = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "isExpandedField", {
        get: /**
         * @return {?}
         */
        function () {
            return this[this.options.isExpandedField];
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this[this.options.isExpandedField] = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TreeNode.prototype.allowDrag = /**
     * @return {?}
     */
    function () {
        return this.options.allowDrag;
    };
    /**
     * @return {?}
     */
    TreeNode.prototype.enableCustomContextMenu = /**
     * @return {?}
     */
    function () {
        return this.options.enableCustomContextMenu;
    };
    Object.defineProperty(TreeNode.prototype, "isRoot", {
        get: /**
         * @return {?}
         */
        function () { return this.parent.isVirtualRoot; } // 父节点为空，表示这个一个根节点
        ,
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "realParent", {
        get: 
        // 父节点为空，表示这个一个根节点
        /**
         * @return {?}
         */
        function () { return this.isRoot ? null : this.parent; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "isLeaf", {
        get: /**
         * @return {?}
         */
        function () { return !this.childrenField.length; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "hasChildren", {
        get: /**
         * @return {?}
         */
        function () { return !this.isLeaf; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeNode.prototype, "isFocused", {
        get: /**
         * @return {?}
         */
        function () { return this.treeModel.focusedNode == this; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TreeNode.prototype.getFirstChild = /**
     * @return {?}
     */
    function () {
        return this.childrenField && this.childrenField[0];
    };
    /**
     * @return {?}
     */
    TreeNode.prototype.getLastChild = /**
     * @return {?}
     */
    function () {
        return this.childrenField && this.childrenField[this.childrenField.length - 1];
    };
    /**
     * @private
     * @return {?}
     */
    TreeNode.prototype._getIndexInParent = /**
     * @private
     * @return {?}
     */
    function () {
        return this.parent && this.parent.childrenField.indexOf(this);
    };
    /**
     * @param {?} steps
     * @return {?}
     */
    TreeNode.prototype.findAdjacentSibling = /**
     * @param {?} steps
     * @return {?}
     */
    function (steps) {
        /** @type {?} */
        var index = this._getIndexInParent();
        return this.parent && this.parent.childrenField[index + steps];
    };
    /**
     * @return {?}
     */
    TreeNode.prototype.findNextSibling = /**
     * @return {?}
     */
    function () {
        return this.findAdjacentSibling(+1);
    };
    /**
     * @return {?}
     */
    TreeNode.prototype.findPreviousSibling = /**
     * @return {?}
     */
    function () {
        return this.findAdjacentSibling(-1);
    };
    /**
     * @param {?=} goInside
     * @return {?}
     */
    TreeNode.prototype.findNextNode = /**
     * @param {?=} goInside
     * @return {?}
     */
    function (goInside) {
        if (goInside === void 0) { goInside = true; }
        return goInside && this.isExpanded && this.getFirstChild() ||
            this.findNextSibling() ||
            this.parent && this.parent.findNextNode(false);
    };
    /**
     * @return {?}
     */
    TreeNode.prototype.findPreviousNode = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var previousSibling = this.findPreviousSibling();
        if (!previousSibling) {
            return this.realParent;
        }
        return previousSibling.isCollapsed
            ? previousSibling
            : previousSibling.getLastChild();
    };
    /**
     * @param {?} node
     * @return {?}
     */
    TreeNode.prototype.isDescendantOf = /**
     * @param {?} node
     * @return {?}
     */
    function (node) {
        if (this === node) {
            return true;
        }
        else {
            return this.parent && this.parent.isDescendantOf(node);
        }
    };
    // 切换方法
    // 切换节点的折叠（Collapsed）与扩展（Expanded）状态
    // 切换方法
    // 切换节点的折叠（Collapsed）与扩展（Expanded）状态
    /**
     * @return {?}
     */
    TreeNode.prototype.toggle = 
    // 切换方法
    // 切换节点的折叠（Collapsed）与扩展（Expanded）状态
    /**
     * @return {?}
     */
    function () {
        this.isExpanded = !this.isExpanded;
        this.fireEvent({ eventName: TREE_EVENTS.onToggle, node: this, isExpanded: this.isExpanded });
    };
    /**
     * @private
     * @return {?}
     */
    TreeNode.prototype._activate = /**
     * @private
     * @return {?}
     */
    function () {
        this._isActive = true;
        this.fireEvent({ eventName: TREE_EVENTS.onActivate, node: this });
        this.focus();
    };
    /**
     * @private
     * @return {?}
     */
    TreeNode.prototype._deactivate = /**
     * @private
     * @return {?}
     */
    function () {
        this._isActive = false;
        this.fireEvent({ eventName: TREE_EVENTS.onDeactivate, node: this });
    };
    /**
     * @return {?}
     */
    TreeNode.prototype.toggleActivated = /**
     * @return {?}
     */
    function () {
        if (this.isActive) {
            this._deactivate();
            this.treeModel.activeNode = null;
        }
        else {
            if (this.treeModel.activeNode) {
                this.treeModel.activeNode._deactivate();
            }
            this._activate();
            this.treeModel.activeNode = this;
        }
        this.fireEvent({ eventName: TREE_EVENTS.onActiveChanged, node: this, isActive: this.isActive });
    };
    /**
     * @return {?}
     */
    TreeNode.prototype.focus = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var previousNode = this.treeModel.focusedNode;
        this.treeModel.focusedNode = this;
        if (previousNode) {
            this.fireEvent({ eventName: TREE_EVENTS.onBlur, node: previousNode });
        }
        this.fireEvent({ eventName: TREE_EVENTS.onFocus, node: this });
    };
    /**
     * @return {?}
     */
    TreeNode.prototype.blur = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var previousNode = this.treeModel.focusedNode;
        this.treeModel.focusedNode = null;
        if (previousNode) {
            this.fireEvent({ eventName: TREE_EVENTS.onBlur, node: this });
        }
    };
    // 双击事件
    // 双击事件
    /**
     * @param {?} rawEvent
     * @return {?}
     */
    TreeNode.prototype.doublClick = 
    // 双击事件
    /**
     * @param {?} rawEvent
     * @return {?}
     */
    function (rawEvent) {
        this.fireEvent({ eventName: TREE_EVENTS.onDoubleClick, node: this, rawEvent: rawEvent });
    };
    // 右键快捷菜单
    // 右键快捷菜单
    /**
     * @param {?} rawEvent
     * @return {?}
     */
    TreeNode.prototype.contextMenu = 
    // 右键快捷菜单
    /**
     * @param {?} rawEvent
     * @return {?}
     */
    function (rawEvent) {
        if (this.enableCustomContextMenu()) { // 启用右键菜单功能后，禁用默认的右键菜单
            rawEvent.preventDefault();
        }
        this.fireEvent({ eventName: TREE_EVENTS.onContextMenu, node: this, rawEvent: rawEvent });
    };
    /**
     * @param {?} $event
     * @param {?=} data
     * @return {?}
     */
    TreeNode.prototype.dropMouseAction = /**
     * @param {?} $event
     * @param {?=} data
     * @return {?}
     */
    function ($event, data) {
        if (data === void 0) { data = null; }
        // 1.设置focus
        this.treeModel.setFocus(true);
        // 2.执行事件处理器
        this._dropEventHandler(this.treeModel, this, $event, data);
        // 3.完成drop操作后，重置drag状态
        this.treeModel.cancelDrag();
    };
    /**
     * @private
     * @param {?} tree
     * @param {?} node
     * @param {?} $event
     * @param {?} to
     * @return {?}
     */
    TreeNode.prototype._dropEventHandler = /**
     * @private
     * @param {?} tree
     * @param {?} node
     * @param {?} $event
     * @param {?} to
     * @return {?}
     */
    function (tree, node, $event, to) {
        tree.moveNode({ from: tree.getDragNode(), to: to });
        // console.log("dropEventHandler:"+tree.roots);
    };
    // 点击右键菜单项
    // 点击右键菜单项
    /**
     * @param {?} event
     * @return {?}
     */
    TreeNode.prototype.rightMenuClicked = 
    // 点击右键菜单项
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.fireEvent({ eventName: TREE_EVENTS.onRightMenuClicked, node: this, rawEvent: event });
    };
    return TreeNode;
}());
export { TreeNode };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TreeNode.prototype._isExpanded;
    /** @type {?} */
    TreeNode.prototype.treeModel;
    /** @type {?} */
    TreeNode.prototype.parent;
    /** @type {?} */
    TreeNode.prototype.level;
    /** @type {?} */
    TreeNode.prototype.isVirtualRoot;
    /** @type {?} */
    TreeNode.prototype.elementRef;
    /** @type {?} */
    TreeNode.prototype.parentNode;
    /** @type {?} */
    TreeNode.prototype._isActive;
    /** @type {?} */
    TreeNode.prototype.changeDisplayField;
    /** @type {?} */
    TreeNode.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1ub2RlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9pZGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvbmcydHJlZS1jb21tb24vbW9kZWxzL3RyZWUtbm9kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFjLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV6RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHbEQ7SUF3Qkksa0JBQW1CLElBQUksRUFBRSxNQUF1QixFQUFFLFNBQW9CO1FBQTdDLHVCQUFBLEVBQUEsYUFBdUI7UUFBaEQsaUJBbUJDO1FBbkJrQixTQUFJLEdBQUosSUFBSSxDQUFBO1FBZnZCLGtCQUFhLEdBQUcsS0FBSyxDQUFDO1FBSXRCLGNBQVMsR0FBRyxLQUFLLENBQUM7O1FBU2xCLHVCQUFrQixHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUFJekMsTUFBTSxDQUFDLE1BQU0sQ0FBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUMsTUFBTSxRQUFBLEVBQUUsU0FBUyxXQUFBLEVBQUMsQ0FBRSxDQUFDO1FBRWpELElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckQsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1NBQzFCO1FBRUQsU0FBUztRQUNULDZCQUE2QjtRQUM3QiwrQkFBK0I7UUFFL0IsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxVQUFBLEtB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dEIsOEJBQXVCOztJQUN2Qiw4QkFBcUI7O0lBRXJCLDZCQUFrQjs7SUFTbEIsc0NBQTZDOztJQUVqQyx3QkFBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBUcmVlTW9kZWwgfSBmcm9tICcuL3RyZWUtbW9kZWwnO1xyXG5pbXBvcnQgeyBUUkVFX0VWRU5UUyB9IGZyb20gJy4uL2NvbnN0YW50cy9ldmVudHMnO1xyXG5pbXBvcnQgeyBUcmVlT3B0aW9ucyB9IGZyb20gJy4vdHJlZS1vcHRpb25zJztcclxuXHJcbmV4cG9ydCBjbGFzcyBUcmVlTm9kZSB7XHJcbiAgICBwcml2YXRlIF9pc0V4cGFuZGVkOiBib29sZWFuO1xyXG4gICAgZ2V0IGlzRXhwYW5kZWQoKSB7cmV0dXJuIHRoaXMuX2lzRXhwYW5kZWQ7IH1cclxuICAgIHNldCBpc0V4cGFuZGVkKHZhbHVlKSB7dGhpcy5faXNFeHBhbmRlZCA9IHZhbHVlOyB9XHJcbiAgICBnZXQgaXNDb2xsYXBzZWQoKSB7cmV0dXJuICF0aGlzLl9pc0V4cGFuZGVkOyB9XHJcblxyXG4gICAgdHJlZU1vZGVsOiBUcmVlTW9kZWw7XHJcbiAgICBwYXJlbnQ6IFRyZWVOb2RlO1xyXG4gICAgbGV2ZWw6IG51bWJlcjtcclxuICAgIGlzVmlydHVhbFJvb3QgPSBmYWxzZTtcclxuICAgIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY7XHJcbiAgICBwYXJlbnROb2RlOiBUcmVlTm9kZTtcclxuXHJcbiAgICBfaXNBY3RpdmUgPSBmYWxzZTtcclxuICAgIGdldCBpc0FjdGl2ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faXNBY3RpdmU7XHJcbiAgICB9XHJcbiAgICBzZXQgaXNBY3RpdmUodmFsdWUpIHtcclxuICAgICAgICB0aGlzLl9pc0FjdGl2ZSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOWPmOabtOagkeiKgueCueWxleekuuWtl+aute+8jOeUseWklumDqOinpuWPkVxyXG4gICAgY2hhbmdlRGlzcGxheUZpZWxkID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHVibGljIGRhdGEsIHBhcmVudDogVHJlZU5vZGUgPSBudWxsLCB0cmVlTW9kZWw6IFRyZWVNb2RlbCkge1xyXG5cclxuICAgICAgICBPYmplY3QuYXNzaWduKCB0aGlzLCBkYXRhLCB7cGFyZW50LCB0cmVlTW9kZWx9ICk7XHJcblxyXG4gICAgICAgIHRoaXMudHJlZU1vZGVsID0gdHJlZU1vZGVsO1xyXG4gICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xyXG4gICAgICAgIHRoaXMubGV2ZWwgPSB0aGlzLnBhcmVudCA/IHRoaXMucGFyZW50LmxldmVsICsgMSA6IDA7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNFeHBhbmRlZEZpZWxkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNFeHBhbmRlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDpqozor4HlrZfmrrXmt7vliqBcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmlkRmllbGQpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMudHlwZUZpZWxkKTtcclxuXHJcbiAgICAgICAgdGhpcy5jaGlsZHJlbkZpZWxkID0gdGhpcy5jaGlsZHJlbkZpZWxkLm1hcChjaGlsZCA9PiBuZXcgVHJlZU5vZGUoY2hpbGQsIHRoaXMsIHRyZWVNb2RlbCkgKTtcclxuXHJcbiAgICAgICAgLy8gYnVn5L+u5aSN77yaVHJlZU1vZGVsLmNhbk1vdmVOb2Rl5L2/55SocGFyZW50Tm9kZe+8jOS8muWHuueOsHVuZGVmaW5lZOOAgui/memHjOWBmuWFvOWuuVxyXG4gICAgICAgIHRoaXMucGFyZW50Tm9kZSA9IHRoaXMucGFyZW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFByb3h5IG9mIHRyZWVNb2RlbFxyXG4gICAgZ2V0IG9wdGlvbnMoKTogVHJlZU9wdGlvbnMge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRyZWVNb2RlbC5vcHRpb25zO1xyXG4gICAgfVxyXG4gICAgZmlyZUV2ZW50KGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy50cmVlTW9kZWwuZmlyZUV2ZW50KGV2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDooajnjrDnmoTmm7Tlg4/kuIDkuKrlrZfmrrXvvIzlsIblhbblsIHoo4XmiJDlsZ7mgKfvvIzlubbmoLnmja7lvIDmlL7nmoTor7vlhpnmnYPpmZDvvIzorr7nva5nZXQvc2V0XHJcbiAgICBnZXQgaWRGaWVsZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpc1t0aGlzLm9wdGlvbnMuaWRGaWVsZF07XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IGlkRmllbGQodmFsdWUpIHtcclxuICAgICAgICB0aGlzW3RoaXMub3B0aW9ucy5pZEZpZWxkXSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBjaGlsZHJlbkZpZWxkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzW3RoaXMub3B0aW9ucy5jaGlsZHJlbkZpZWxkXSB8fCBbXTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgY2hpbGRyZW5GaWVsZCh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXNbdGhpcy5vcHRpb25zLmNoaWxkcmVuRmllbGRdID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGRpc3BsYXlGaWVsZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpc1t0aGlzLm9wdGlvbnMuZGlzcGxheUZpZWxkXTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdHlwZUZpZWxkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzW3RoaXMub3B0aW9ucy50eXBlRmllbGRdO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCB0eXBlRmllbGQodmFsdWUpIHtcclxuICAgICAgICB0aGlzW3RoaXMub3B0aW9ucy50eXBlRmllbGRdID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGlzRXhwYW5kZWRGaWVsZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpc1t0aGlzLm9wdGlvbnMuaXNFeHBhbmRlZEZpZWxkXTtcclxuICAgIH1cclxuICAgIHNldCBpc0V4cGFuZGVkRmllbGQodmFsdWUpIHtcclxuICAgICAgICB0aGlzW3RoaXMub3B0aW9ucy5pc0V4cGFuZGVkRmllbGRdID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgYWxsb3dEcmFnKCkgey8vIOihqOeOsOeahOabtOWDj+S4gOS4quWKqOS9nO+8jOWwhuWFtuWwgeijheaIkOaWueazlVxyXG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuYWxsb3dEcmFnO1xyXG4gICAgfVxyXG5cclxuICAgIGVuYWJsZUN1c3RvbUNvbnRleHRNZW51KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuZW5hYmxlQ3VzdG9tQ29udGV4dE1lbnU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGlzUm9vdCgpIHsgcmV0dXJuIHRoaXMucGFyZW50LmlzVmlydHVhbFJvb3Q7IH0vLyDniLboioLngrnkuLrnqbrvvIzooajnpLrov5nkuKrkuIDkuKrmoLnoioLngrlcclxuICAgIGdldCByZWFsUGFyZW50KCkgeyByZXR1cm4gdGhpcy5pc1Jvb3QgPyBudWxsIDogdGhpcy5wYXJlbnQ7IH1cclxuICAgIGdldCBpc0xlYWYoKSB7IHJldHVybiAhdGhpcy5jaGlsZHJlbkZpZWxkLmxlbmd0aDsgfVxyXG4gICAgZ2V0IGhhc0NoaWxkcmVuKCkgeyByZXR1cm4gIXRoaXMuaXNMZWFmOyB9XHJcbiAgICBnZXQgaXNGb2N1c2VkKCkge3JldHVybiB0aGlzLnRyZWVNb2RlbC5mb2N1c2VkTm9kZSA9PSB0aGlzOyB9XHJcblxyXG4gICAgZ2V0Rmlyc3RDaGlsZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlbkZpZWxkICYmIHRoaXMuY2hpbGRyZW5GaWVsZFswXTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRMYXN0Q2hpbGQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW5GaWVsZCAmJiB0aGlzLmNoaWxkcmVuRmllbGRbdGhpcy5jaGlsZHJlbkZpZWxkLmxlbmd0aCAtIDFdO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2dldEluZGV4SW5QYXJlbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LmNoaWxkcmVuRmllbGQuaW5kZXhPZih0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBmaW5kQWRqYWNlbnRTaWJsaW5nKHN0ZXBzKSB7XHJcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLl9nZXRJbmRleEluUGFyZW50KCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LmNoaWxkcmVuRmllbGRbaW5kZXggKyBzdGVwc107XHJcbiAgICB9XHJcblxyXG4gICAgZmluZE5leHRTaWJsaW5nKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZpbmRBZGphY2VudFNpYmxpbmcoKzEpO1xyXG4gICAgfVxyXG4gICAgZmluZFByZXZpb3VzU2libGluZygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5maW5kQWRqYWNlbnRTaWJsaW5nKC0xKTtcclxuICAgIH1cclxuXHJcbiAgICBmaW5kTmV4dE5vZGUoZ29JbnNpZGUgPSB0cnVlKSB7Ly8g5p+l5om+TmV4dCBOb2Rl5pe277yM6buY6K6k6L+b6KGM5YaF6YOo5p+l5om+XHJcbiAgICAgICAgcmV0dXJuIGdvSW5zaWRlICYmIHRoaXMuaXNFeHBhbmRlZCAmJiB0aGlzLmdldEZpcnN0Q2hpbGQoKSB8fFxyXG4gICAgICAgICAgICAgICB0aGlzLmZpbmROZXh0U2libGluZygpIHx8XHJcbiAgICAgICAgICAgICAgIHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LmZpbmROZXh0Tm9kZShmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZmluZFByZXZpb3VzTm9kZSgpIHtcclxuICAgICAgICBjb25zdCBwcmV2aW91c1NpYmxpbmcgPSB0aGlzLmZpbmRQcmV2aW91c1NpYmxpbmcoKTtcclxuICAgICAgICBpZiAoIXByZXZpb3VzU2libGluZykge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVhbFBhcmVudDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHByZXZpb3VzU2libGluZy5pc0NvbGxhcHNlZFxyXG4gICAgICAgICAgPyBwcmV2aW91c1NpYmxpbmdcclxuICAgICAgICAgIDogcHJldmlvdXNTaWJsaW5nLmdldExhc3RDaGlsZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGlzRGVzY2VuZGFudE9mKG5vZGU6IFRyZWVOb2RlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMgPT09IG5vZGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LmlzRGVzY2VuZGFudE9mKG5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyDliIfmjaLmlrnms5VcclxuICAgIC8vIOWIh+aNouiKgueCueeahOaKmOWPoO+8iENvbGxhcHNlZO+8ieS4juaJqeWxle+8iEV4cGFuZGVk77yJ54q25oCBXHJcbiAgICB0b2dnbGUoKSB7XHJcbiAgICAgICAgdGhpcy5pc0V4cGFuZGVkID0gIXRoaXMuaXNFeHBhbmRlZDtcclxuICAgICAgICB0aGlzLmZpcmVFdmVudCh7IGV2ZW50TmFtZTogVFJFRV9FVkVOVFMub25Ub2dnbGUsIG5vZGU6IHRoaXMsIGlzRXhwYW5kZWQ6IHRoaXMuaXNFeHBhbmRlZCB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9hY3RpdmF0ZSgpIHtcclxuICAgICAgICB0aGlzLl9pc0FjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5maXJlRXZlbnQoeyBldmVudE5hbWU6IFRSRUVfRVZFTlRTLm9uQWN0aXZhdGUsIG5vZGU6IHRoaXMgfSk7XHJcbiAgICAgICAgdGhpcy5mb2N1cygpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX2RlYWN0aXZhdGUoKSB7XHJcbiAgICAgICAgdGhpcy5faXNBY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmZpcmVFdmVudCh7IGV2ZW50TmFtZTogVFJFRV9FVkVOVFMub25EZWFjdGl2YXRlLCBub2RlOiB0aGlzIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHRvZ2dsZUFjdGl2YXRlZCgpIHtcclxuICAgICAgICBpZiAodGhpcy5pc0FjdGl2ZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9kZWFjdGl2YXRlKCk7XHJcbiAgICAgICAgICAgIHRoaXMudHJlZU1vZGVsLmFjdGl2ZU5vZGUgPSBudWxsO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRyZWVNb2RlbC5hY3RpdmVOb2RlKSB7XHJcbiAgICAgICAgICAgIHRoaXMudHJlZU1vZGVsLmFjdGl2ZU5vZGUuX2RlYWN0aXZhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9hY3RpdmF0ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnRyZWVNb2RlbC5hY3RpdmVOb2RlID0gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5maXJlRXZlbnQoeyBldmVudE5hbWU6IFRSRUVfRVZFTlRTLm9uQWN0aXZlQ2hhbmdlZCwgbm9kZTogdGhpcywgaXNBY3RpdmU6IHRoaXMuaXNBY3RpdmUgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZm9jdXMoKSB7XHJcbiAgICAgICAgY29uc3QgcHJldmlvdXNOb2RlID0gdGhpcy50cmVlTW9kZWwuZm9jdXNlZE5vZGU7XHJcbiAgICAgICAgdGhpcy50cmVlTW9kZWwuZm9jdXNlZE5vZGUgPSB0aGlzO1xyXG4gICAgICAgIGlmIChwcmV2aW91c05vZGUpIHtcclxuICAgICAgICAgICAgdGhpcy5maXJlRXZlbnQoeyBldmVudE5hbWU6IFRSRUVfRVZFTlRTLm9uQmx1ciwgbm9kZTogcHJldmlvdXNOb2RlIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmZpcmVFdmVudCh7IGV2ZW50TmFtZTogVFJFRV9FVkVOVFMub25Gb2N1cywgbm9kZTogdGhpcyB9KTtcclxuICAgIH1cclxuXHJcbiAgICBibHVyKCkge1xyXG4gICAgICAgIGNvbnN0IHByZXZpb3VzTm9kZSA9IHRoaXMudHJlZU1vZGVsLmZvY3VzZWROb2RlO1xyXG4gICAgICAgIHRoaXMudHJlZU1vZGVsLmZvY3VzZWROb2RlID0gbnVsbDtcclxuICAgICAgICBpZiAocHJldmlvdXNOb2RlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmlyZUV2ZW50KHsgZXZlbnROYW1lOiBUUkVFX0VWRU5UUy5vbkJsdXIsIG5vZGU6IHRoaXMgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIOWPjOWHu+S6i+S7tlxyXG4gICAgZG91YmxDbGljayhyYXdFdmVudDogTW91c2VFdmVudCkge1xyXG4gICAgICAgIHRoaXMuZmlyZUV2ZW50KHsgZXZlbnROYW1lOiBUUkVFX0VWRU5UUy5vbkRvdWJsZUNsaWNrLCBub2RlOiB0aGlzLCByYXdFdmVudCB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDlj7PplK7lv6vmjbfoj5zljZVcclxuICAgIGNvbnRleHRNZW51KHJhd0V2ZW50OiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZW5hYmxlQ3VzdG9tQ29udGV4dE1lbnUoKSkgey8vIOWQr+eUqOWPs+mUruiPnOWNleWKn+iDveWQju+8jOemgeeUqOm7mOiupOeahOWPs+mUruiPnOWNlVxyXG4gICAgICAgICAgICByYXdFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5maXJlRXZlbnQoeyBldmVudE5hbWU6IFRSRUVfRVZFTlRTLm9uQ29udGV4dE1lbnUsIG5vZGU6IHRoaXMsIHJhd0V2ZW50IH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGRyb3BNb3VzZUFjdGlvbigkZXZlbnQsIGRhdGE6IGFueSA9IG51bGwpIHtcclxuICAgICAgICAvLyAxLuiuvue9rmZvY3VzXHJcbiAgICAgICAgdGhpcy50cmVlTW9kZWwuc2V0Rm9jdXModHJ1ZSk7XHJcbiAgICAgICAgLy8gMi7miafooYzkuovku7blpITnkIblmahcclxuICAgICAgICB0aGlzLl9kcm9wRXZlbnRIYW5kbGVyKHRoaXMudHJlZU1vZGVsLCB0aGlzLCAkZXZlbnQsIGRhdGEpO1xyXG4gICAgICAgIC8vIDMu5a6M5oiQZHJvcOaTjeS9nOWQju+8jOmHjee9rmRyYWfnirbmgIFcclxuICAgICAgICB0aGlzLnRyZWVNb2RlbC5jYW5jZWxEcmFnKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfZHJvcEV2ZW50SGFuZGxlcih0cmVlOiBUcmVlTW9kZWwsIG5vZGU6IFRyZWVOb2RlLCAkZXZlbnQ6IGFueSAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvOiB7IHBhcmVudE5vZGU6IFRyZWVOb2RlLCBpbmRleDogbnVtYmVyfSkge1xyXG4gICAgICAgIHRyZWUubW92ZU5vZGUoeyBmcm9tOiB0cmVlLmdldERyYWdOb2RlKCksIHRvIH0pO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiZHJvcEV2ZW50SGFuZGxlcjpcIit0cmVlLnJvb3RzKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDngrnlh7vlj7PplK7oj5zljZXpoblcclxuICAgIHJpZ2h0TWVudUNsaWNrZWQoIGV2ZW50ICkge1xyXG4gICAgICAgIHRoaXMuZmlyZUV2ZW50KHsgZXZlbnROYW1lOiBUUkVFX0VWRU5UUy5vblJpZ2h0TWVudUNsaWNrZWQsIG5vZGU6IHRoaXMsIHJhd0V2ZW50OiBldmVudCB9KTtcclxuICAgIH1cclxufVxyXG4iXX0=