/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, HostListener } from '@angular/core';
import { TreeModel } from '../../models/tree-model';
import { TreeOptions } from '../../models/tree-options';
import { KEYS } from '../../constants/keys';
import { pick, includes } from 'lodash-es'; //将lodash安装到node-modules中，实现按需引入
//约定使用下划线表示lodash，就像用$表示jQuery一样
//1.require关键字不被识别：
// https://stackoverflow.com/questions/31173738/typescript-getting-error-ts2304-cannot-find-name-require
// declare var require: any
// const _ = require('lodash');
//2.安装lodash的es版本：
// (1) $>npm i lodash-es
// (2) $>npm install --save @types/lodash
var TreeComponent = /** @class */ (function () {
    function TreeComponent(treeModel) {
        var _this = this;
        this.treeModel = treeModel;
        treeModel.eventNames.forEach(function (name) { return _this[name] = new EventEmitter(); }); //customEventName -> new EventEmitter()
    }
    Object.defineProperty(TreeComponent.prototype, "nodes", {
        set: /**
         * @param {?} nodes
         * @return {?}
         */
        function (nodes) { },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(TreeComponent.prototype, "options", {
        set: /**
         * @param {?} options
         * @return {?}
         */
        function (options) { },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(TreeComponent.prototype, "focused", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.treeModel.setFocus(value);
            // alert('focused on the tree');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    TreeComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.treeModel.setData({
            nodes: changes.nodes && changes.nodes.currentValue,
            options: changes.options && changes.options.currentValue,
            events: pick(this, this.treeModel.eventNames)
        });
    };
    // 优先使用HostListener装饰器绑定事件，而不是使用Directive或Component的host元数据
    // When binding events to Directive or Component, Angular suggests to prefer to HostListener decorator, 
    // rather than host metadata.
    // 优先使用HostListener装饰器绑定事件，而不是使用Directive或Component的host元数据
    // When binding events to Directive or Component, Angular suggests to prefer to HostListener decorator, 
    // rather than host metadata.
    /**
     * @param {?} $event
     * @return {?}
     */
    TreeComponent.prototype.onKeydown = 
    // 优先使用HostListener装饰器绑定事件，而不是使用Directive或Component的host元数据
    // When binding events to Directive or Component, Angular suggests to prefer to HostListener decorator, 
    // rather than host metadata.
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        // alert('Pressed a key');
        /** @type {?} */
        var focusedNode = this.treeModel.focusedNode;
        if (!this.treeModel.isFocused) {
            return;
        }
        if (includes([KEYS.DOWN, KEYS.UP, KEYS.LEFT,
            KEYS.RIGHT, KEYS.ENTER, KEYS.SPACE], $event.keyCode)) {
            $event.preventDefault(); //取消事件的默认动作，实现仅对includes键响应
        }
        switch ($event.keyCode) {
            case KEYS.DOWN:
                return this.treeModel.focusNextNode();
            case KEYS.UP:
                return this.treeModel.focusPreviousNode();
            case KEYS.LEFT:
                // alert('Focus Drill Up');
                if (focusedNode.isExpanded) {
                    focusedNode.toggle();
                }
                else {
                    this.treeModel.focusDrillUp();
                }
                return;
            case KEYS.RIGHT:
                // alert('Focus Drill Down');
                if (focusedNode.isCollapsed) {
                    focusedNode.toggle();
                }
                else {
                    this.treeModel.focusDrillDown();
                }
                return;
            case KEYS.ENTER:
            case KEYS.SPACE:
                // alert('Enter or Space key.');
                return focusedNode && focusedNode.toggleActivated();
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    TreeComponent.prototype.onMousedown = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        // alert('click');
        /** @type {?} */
        var insideClick = $event.target.closest('ng2tree');
        if (!insideClick) {
            this.treeModel.setFocus(false);
        }
    };
    /**
     * @param {?} elementId
     * @return {?}
     */
    TreeComponent.prototype.searchAndLocationNodeById = /**
     * @param {?} elementId
     * @return {?}
     */
    function (elementId) {
        // console.log('succeeded to search and location Node By Id in treeComponent:', elementId);
        this.treeModel.locateNodeByID(elementId);
    };
    /**
     * @param {?} elementId
     * @return {?}
     */
    TreeComponent.prototype.searchNodeById = /**
     * @param {?} elementId
     * @return {?}
     */
    function (elementId) {
        // console.log('succeeded to search and location Node By Id in treeComponent:', elementId);
        return this.treeModel.searchTreeNodeByID(elementId);
    };
    TreeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng2tree',
                    template: "<div class=\"tree\">\r\n    <!-- <div class=\"localFileTreeOperateTest\">\r\n      <button (click)=\"treeModel.addStaticTreeNode()\">\u65B0\u589E</button>\r\n      <button (click)=\"treeModel.removeFocusedTreeNode()\">\u5220\u9664</button>\r\n    </div> -->\r\n    <ng2tree-node\r\n      (click)=\"treeModel.setFocus(true)\"\r\n      *ngFor=\"let child of treeModel.roots; let i = index\"\r\n      [node]=\"child\"\r\n      [nodeIndex]=\"i\">\r\n    </ng2tree-node>\r\n</div>",
                    providers: [
                        TreeModel
                    ],
                    styles: [".tree-children{padding-left:20px}.tree{display:inline-block;cursor:pointer;-webkit-user-select:none;-ms-user-select:none;-moz-user-select:none;user-select:none}"]
                }] }
    ];
    /** @nocollapse */
    TreeComponent.ctorParameters = function () { return [
        { type: TreeModel }
    ]; };
    TreeComponent.propDecorators = {
        nodes: [{ type: Input }],
        options: [{ type: Input }],
        focused: [{ type: Input }],
        onToggle: [{ type: Output }],
        onActiveChanged: [{ type: Output }],
        onActivate: [{ type: Output }],
        onDeactivate: [{ type: Output }],
        onFocus: [{ type: Output }],
        onBlur: [{ type: Output }],
        onDoubleClick: [{ type: Output }],
        onContextMenu: [{ type: Output }],
        onRightMenuClicked: [{ type: Output }],
        onKeydown: [{ type: HostListener, args: ['body: keydown', ['$event'],] }],
        onMousedown: [{ type: HostListener, args: ['body: mousedown', ['$event'],] }]
    };
    return TreeComponent;
}());
export { TreeComponent };
if (false) {
    /** @type {?} */
    TreeComponent.prototype._nodes;
    /** @type {?} */
    TreeComponent.prototype._options;
    /** @type {?} */
    TreeComponent.prototype.onToggle;
    /** @type {?} */
    TreeComponent.prototype.onActiveChanged;
    /** @type {?} */
    TreeComponent.prototype.onActivate;
    /** @type {?} */
    TreeComponent.prototype.onDeactivate;
    /** @type {?} */
    TreeComponent.prototype.onFocus;
    /** @type {?} */
    TreeComponent.prototype.onBlur;
    /** @type {?} */
    TreeComponent.prototype.onDoubleClick;
    /** @type {?} */
    TreeComponent.prototype.onContextMenu;
    /** @type {?} */
    TreeComponent.prototype.onRightMenuClicked;
    /** @type {?} */
    TreeComponent.prototype.treeModel;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,