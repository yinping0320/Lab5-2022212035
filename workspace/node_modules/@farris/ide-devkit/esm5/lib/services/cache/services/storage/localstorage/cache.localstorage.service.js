/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { CacheStorageAbstract } from '../cache.storage.abstract.service';
/**
 * Service for storing data in local storage
 */
var CacheLocalStorage = /** @class */ (function (_super) {
    tslib_1.__extends(CacheLocalStorage, _super);
    function CacheLocalStorage() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    CacheLocalStorage.prototype.getItem = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        /** @type {?} */
        var value = localStorage.getItem(key);
        return value ? JSON.parse(value) : null;
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    CacheLocalStorage.prototype.setItem = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        try {
            localStorage.setItem(key, JSON.stringify(value));
            return true;
        }
        catch (e) {
            return false;
        }
    };
    /**
     * @param {?} key
     * @return {?}
     */
    CacheLocalStorage.prototype.removeItem = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        localStorage.removeItem(key);
    };
    /**
     * @return {?}
     */
    CacheLocalStorage.prototype.clear = /**
     * @return {?}
     */
    function () {
        localStorage.clear();
    };
    /**
     * @return {?}
     */
    CacheLocalStorage.prototype.type = /**
     * @return {?}
     */
    function () {
        return 0 /* LOCAL_STORAGE */;
    };
    /**
     * @return {?}
     */
    CacheLocalStorage.prototype.isEnabled = /**
     * @return {?}
     */
    function () {
        try {
            localStorage.setItem('test', 'test');
            localStorage.removeItem('test');
            return true;
        }
        catch (e) {
            return false;
        }
    };
    CacheLocalStorage.decorators = [
        { type: Injectable }
    ];
    return CacheLocalStorage;
}(CacheStorageAbstract));
export { CacheLocalStorage };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUubG9jYWxzdG9yYWdlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2lkZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvY2FjaGUvc2VydmljZXMvc3RvcmFnZS9sb2NhbHN0b3JhZ2UvY2FjaGUubG9jYWxzdG9yYWdlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDOzs7O0FBT3pFO0lBQ3VDLDZDQUFvQjtJQUQzRDs7SUFzQ0EsQ0FBQzs7Ozs7SUFuQ1UsbUNBQU87Ozs7SUFBZCxVQUFlLEdBQVc7O1lBQ2hCLEtBQUssR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQztRQUN2QyxPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQzVDLENBQUM7Ozs7OztJQUVNLG1DQUFPOzs7OztJQUFkLFVBQWUsR0FBVyxFQUFFLEtBQTRCO1FBQ3BELElBQUk7WUFDQSxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDakQsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1IsT0FBTyxLQUFLLENBQUM7U0FDaEI7SUFDTCxDQUFDOzs7OztJQUVNLHNDQUFVOzs7O0lBQWpCLFVBQWtCLEdBQVc7UUFDekIsWUFBWSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNqQyxDQUFDOzs7O0lBRU0saUNBQUs7OztJQUFaO1FBQ0ksWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3pCLENBQUM7Ozs7SUFFTSxnQ0FBSTs7O0lBQVg7UUFDSSw2QkFBdUM7SUFDM0MsQ0FBQzs7OztJQUVNLHFDQUFTOzs7SUFBaEI7UUFDSSxJQUFJO1lBQ0EsWUFBWSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDckMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNoQyxPQUFPLElBQUksQ0FBQztTQUNmO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDUixPQUFPLEtBQUssQ0FBQztTQUNoQjtJQUNMLENBQUM7O2dCQXJDSixVQUFVOztJQXNDWCx3QkFBQztDQUFBLEFBdENELENBQ3VDLG9CQUFvQixHQXFDMUQ7U0FyQ1ksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDYWNoZVN0b3JhZ2VBYnN0cmFjdCB9IGZyb20gJy4uL2NhY2hlLnN0b3JhZ2UuYWJzdHJhY3Quc2VydmljZSc7XHJcbmltcG9ydCB7IENhY2hlU3RvcmFnZXNFbnVtIH0gZnJvbSAnLi4vLi4vLi4vZW51bXMvY2FjaGUuc3RvcmFnZXMuZW51bSc7XHJcbmltcG9ydCB7IFN0b3JhZ2VWYWx1ZUludGVyZmFjZSB9IGZyb20gJy4uLy4uLy4uL2ludGVyZmFjZXMvc3RvcmFnZS52YWx1ZS5pbnRlcmZhY2UnO1xyXG5cclxuLyoqXHJcbiAqIFNlcnZpY2UgZm9yIHN0b3JpbmcgZGF0YSBpbiBsb2NhbCBzdG9yYWdlXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBDYWNoZUxvY2FsU3RvcmFnZSBleHRlbmRzIENhY2hlU3RvcmFnZUFic3RyYWN0IHtcclxuXHJcbiAgICBwdWJsaWMgZ2V0SXRlbShrZXk6IHN0cmluZykge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcclxuICAgICAgICByZXR1cm4gdmFsdWUgPyBKU09OLnBhcnNlKHZhbHVlKSA6IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldEl0ZW0oa2V5OiBzdHJpbmcsIHZhbHVlOiBTdG9yYWdlVmFsdWVJbnRlcmZhY2UpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVtb3ZlSXRlbShrZXk6IHN0cmluZykge1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsZWFyKCkge1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5jbGVhcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB0eXBlKCkge1xyXG4gICAgICAgIHJldHVybiBDYWNoZVN0b3JhZ2VzRW51bS5MT0NBTF9TVE9SQUdFO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBpc0VuYWJsZWQoKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Rlc3QnLCAndGVzdCcpO1xyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgndGVzdCcpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19