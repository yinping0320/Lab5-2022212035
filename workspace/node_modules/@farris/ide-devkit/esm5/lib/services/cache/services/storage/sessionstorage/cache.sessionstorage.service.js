/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { CacheStorageAbstract } from '../cache.storage.abstract.service';
/**
 * Service for storing data in session storage
 */
var CacheSessionStorage = /** @class */ (function (_super) {
    tslib_1.__extends(CacheSessionStorage, _super);
    function CacheSessionStorage() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    CacheSessionStorage.prototype.getItem = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        /** @type {?} */
        var value = sessionStorage.getItem(key);
        return value ? JSON.parse(value) : null;
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    CacheSessionStorage.prototype.setItem = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        try {
            sessionStorage.setItem(key, JSON.stringify(value));
            return true;
        }
        catch (e) {
            return false;
        }
    };
    /**
     * @param {?} key
     * @return {?}
     */
    CacheSessionStorage.prototype.removeItem = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        sessionStorage.removeItem(key);
    };
    /**
     * @return {?}
     */
    CacheSessionStorage.prototype.clear = /**
     * @return {?}
     */
    function () {
        sessionStorage.clear();
    };
    /**
     * @return {?}
     */
    CacheSessionStorage.prototype.type = /**
     * @return {?}
     */
    function () {
        return 1 /* SESSION_STORAGE */;
    };
    /**
     * @return {?}
     */
    CacheSessionStorage.prototype.isEnabled = /**
     * @return {?}
     */
    function () {
        try {
            sessionStorage.setItem('test', 'test');
            sessionStorage.removeItem('test');
            return true;
        }
        catch (e) {
            return false;
        }
    };
    CacheSessionStorage.decorators = [
        { type: Injectable }
    ];
    return CacheSessionStorage;
}(CacheStorageAbstract));
export { CacheSessionStorage };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUuc2Vzc2lvbnN0b3JhZ2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvaWRlLWRldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9jYWNoZS9zZXJ2aWNlcy9zdG9yYWdlL3Nlc3Npb25zdG9yYWdlL2NhY2hlLnNlc3Npb25zdG9yYWdlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDOzs7O0FBT3pFO0lBQ3lDLCtDQUFvQjtJQUQ3RDs7SUFzQ0EsQ0FBQzs7Ozs7SUFuQ1UscUNBQU87Ozs7SUFBZCxVQUFlLEdBQVc7O1lBQ2hCLEtBQUssR0FBRyxjQUFjLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQztRQUN6QyxPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQzVDLENBQUM7Ozs7OztJQUVNLHFDQUFPOzs7OztJQUFkLFVBQWUsR0FBVyxFQUFFLEtBQTRCO1FBQ3BELElBQUk7WUFDQSxjQUFjLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDbkQsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1IsT0FBTyxLQUFLLENBQUM7U0FDaEI7SUFDTCxDQUFDOzs7OztJQUVNLHdDQUFVOzs7O0lBQWpCLFVBQWtCLEdBQVc7UUFDekIsY0FBYyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuQyxDQUFDOzs7O0lBRU0sbUNBQUs7OztJQUFaO1FBQ0ksY0FBYyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzNCLENBQUM7Ozs7SUFFTSxrQ0FBSTs7O0lBQVg7UUFDSSwrQkFBeUM7SUFDN0MsQ0FBQzs7OztJQUVNLHVDQUFTOzs7SUFBaEI7UUFDSSxJQUFJO1lBQ0EsY0FBYyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDdkMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNsQyxPQUFPLElBQUksQ0FBQztTQUNmO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDUixPQUFPLEtBQUssQ0FBQztTQUNoQjtJQUNMLENBQUM7O2dCQXJDSixVQUFVOztJQXNDWCwwQkFBQztDQUFBLEFBdENELENBQ3lDLG9CQUFvQixHQXFDNUQ7U0FyQ1ksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDYWNoZVN0b3JhZ2VBYnN0cmFjdCB9IGZyb20gJy4uL2NhY2hlLnN0b3JhZ2UuYWJzdHJhY3Quc2VydmljZSc7XHJcbmltcG9ydCB7IENhY2hlU3RvcmFnZXNFbnVtIH0gZnJvbSAnLi4vLi4vLi4vZW51bXMvY2FjaGUuc3RvcmFnZXMuZW51bSc7XHJcbmltcG9ydCB7IFN0b3JhZ2VWYWx1ZUludGVyZmFjZSB9IGZyb20gJy4uLy4uLy4uL2ludGVyZmFjZXMvc3RvcmFnZS52YWx1ZS5pbnRlcmZhY2UnO1xyXG5cclxuLyoqXHJcbiAqIFNlcnZpY2UgZm9yIHN0b3JpbmcgZGF0YSBpbiBzZXNzaW9uIHN0b3JhZ2VcclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIENhY2hlU2Vzc2lvblN0b3JhZ2UgZXh0ZW5kcyBDYWNoZVN0b3JhZ2VBYnN0cmFjdCB7XHJcblxyXG4gICAgcHVibGljIGdldEl0ZW0oa2V5OiBzdHJpbmcpIHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oa2V5KTtcclxuICAgICAgICByZXR1cm4gdmFsdWUgPyBKU09OLnBhcnNlKHZhbHVlKSA6IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldEl0ZW0oa2V5OiBzdHJpbmcsIHZhbHVlOiBTdG9yYWdlVmFsdWVJbnRlcmZhY2UpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKGtleSwgSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZW1vdmVJdGVtKGtleTogc3RyaW5nKSB7XHJcbiAgICAgICAgc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbGVhcigpIHtcclxuICAgICAgICBzZXNzaW9uU3RvcmFnZS5jbGVhcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB0eXBlKCkge1xyXG4gICAgICAgIHJldHVybiBDYWNoZVN0b3JhZ2VzRW51bS5TRVNTSU9OX1NUT1JBR0U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlzRW5hYmxlZCgpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCd0ZXN0JywgJ3Rlc3QnKTtcclxuICAgICAgICAgICAgc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbSgndGVzdCcpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19