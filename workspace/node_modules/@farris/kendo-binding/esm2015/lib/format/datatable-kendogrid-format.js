import { Injectable } from '@angular/core';
import { DateTimeHelperService } from '@farris/ui-common/date';
import { NumberHelperService } from '@farris/ui-common/number';
import { DateUtil } from '@farris/devkit';
class FarrisKendoGridFormatService {
    constructor(dateService, numberService) {
        this.dateService = dateService;
        this.numberService = numberService;
    }
    /**
     * 列格式化 方法
     * @param dataItem  行数据
     * @param column 列对象
     */
    getColumnFormat(dataItem, column) {
        const value = this.getValue(dataItem, column['dataField']);
        // 没有设置行编辑器
        const type = column['dataType'];
        if (type === 'enum') {
            return this.getEnumText(value, column);
        }
        else if (type === 'boolean') {
            return value ? '是' : '否';
        }
        else if (type === 'date') {
            return this.getFormatDate(value, column);
        }
        else if (type === 'number') {
            return this.getFormatNumber(value, column);
        }
        else {
            // 格式化多行文本  和string
            return this.getMultiText(value, column);
        }
    }
    /**
     * 根据id获取value
     * @param dataItem  行数据
     * @param field id,也可能是name.Name这种形式(关联对象id或者udt)
     */
    getValue(dataItem, field) {
        const index = field.indexOf('.');
        if (index < 0) {
            return dataItem[field];
        }
        const fields = field.split('.');
        // field字符串组合
        const a = fields.reduce((result, next) => {
            return result[next];
        }, dataItem);
        return a;
    }
    /**
     * 枚举值格式化
     */
    getEnumText(value, column) {
        const enumData = column.enumData;
        if (!enumData) {
            return;
        }
        let tempColumnText;
        enumData.forEach((ele) => {
            if (ele.value === value) {
                tempColumnText = ele.name;
            }
        });
        return tempColumnText;
    }
    /**
     * 日期格式化
     * @param value  单元格值
     * @param column 列对象
     */
    getFormatDate(value, column) {
        if (DateUtil.isEmptyDateString(value) === true) {
            return '';
        }
        const dateFormat = column.format;
        if (!dateFormat) {
            return value;
        }
        return this.dateService.formatTo(value, dateFormat);
    }
    /**
     * 数字格式化
     * @param value  单元格值
     * @param column 列对象
     * @todo 数字格式化还不完善  这个只是金额形式的格式化;   初始化value===null时,应该显示为'' 这个还没有
     */
    getFormatNumber(value, column) {
        let precision;
        if (column && column.format) {
            precision = parseInt(column.format.substr(1), 10);
        }
        else if (column && column.editor) {
            precision = column.editor.precision;
        }
        if (isNaN(precision)) {
            precision = 2;
        }
        if (!value && value !== 0) {
            return '';
        }
        const opts = {
            prefix: column.prefix ? column.prefix : '',
            suffix: column.suffix ? column.suffix : '',
            precision: precision,
            thousand: ',',
            stripZeros: false,
        };
        return this.numberService.formatMoney(value, opts);
    }
    /**
     * 多行文本格式化 shift+enter换行  失去焦点保留原格式
     * @param value  单元格值
     * @param column 列对象
     */
    getMultiText(value, column) {
        let strValue = value;
        if (strValue !== '' && !strValue) {
            strValue = '';
        }
        if (typeof strValue !== 'string') {
            const valueType = typeof strValue;
            throw new Error(`${valueType}类型值不合法，无法进行格式化`);
        }
        // 防止xss
        strValue = strValue.replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/\"/g, '&quot;')
            .replace(/\'/g, '&#39;')
            .replace(/\//g, '&#x2F;');
        // 如果是多行文本框  保留格式
        if (column.editor && column.editor.type === 'MultiTextBox') {
            const INDEX = strValue.indexOf('\n');
            if (INDEX > -1) {
                return strValue.replace(/\n/g, '<br>');
            }
            return strValue;
        }
        // 若为string
        return strValue;
    }
}
FarrisKendoGridFormatService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FarrisKendoGridFormatService.ctorParameters = () => [
    { type: DateTimeHelperService },
    { type: NumberHelperService }
];
export { FarrisKendoGridFormatService };
//# sourceMappingURL=data:application/json;base64,