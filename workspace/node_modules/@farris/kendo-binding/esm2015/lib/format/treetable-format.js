import { Injectable } from '@angular/core';
export class FarrisTreetableFormatService {
    constructor() {
    }
    setFormat(treeTable) {
        const columns = treeTable.columns;
        columns.forEach((column) => {
            const dataType = column.dataType;
            if (!column.formatter) {
                if (dataType === 'date') {
                    column.formatter = {
                        type: 'datetime',
                        options: {
                            format: column.format
                        }
                    };
                }
                else if (dataType === 'number') {
                    column.formatter = {
                        type: 'number',
                        options: {
                            prefix: column.prefix ? column.prefix : '',
                            suffix: column.suffix ? column.suffix : '',
                            precision: column.precision,
                            thousand: ',',
                            stripZeros: false,
                        }
                    };
                }
                else if (dataType === 'enum') {
                    column.formatter = {
                        type: 'enum',
                        options: {
                            data: column.enumData,
                            valueField: 'value',
                            textField: 'name'
                        }
                    };
                }
                else if (dataType === 'boolean') {
                    column.formatter = {
                        type: 'enum',
                        options: {
                            data: [{ name: '是', value: true }, { name: '否', value: false }],
                            valueField: 'value',
                            textField: 'name'
                        }
                    };
                }
            }
        });
    }
}
FarrisTreetableFormatService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FarrisTreetableFormatService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZXRhYmxlLWZvcm1hdC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMva2VuZG8tYmluZGluZy8iLCJzb3VyY2VzIjpbImxpYi9mb3JtYXQvdHJlZXRhYmxlLWZvcm1hdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE1BQU0sT0FBTyw0QkFBNEI7SUFDckM7SUFDQSxDQUFDO0lBQ0QsU0FBUyxDQUFDLFNBQTZCO1FBQ25DLE1BQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUM7UUFDbEMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQVcsRUFBRSxFQUFFO1lBQzVCLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUM7WUFDakMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUU7Z0JBQ25CLElBQUksUUFBUSxLQUFLLE1BQU0sRUFBRTtvQkFDckIsTUFBTSxDQUFDLFNBQVMsR0FBRzt3QkFDZixJQUFJLEVBQUUsVUFBVTt3QkFDaEIsT0FBTyxFQUFFOzRCQUNMLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTTt5QkFDeEI7cUJBQ0osQ0FBQztpQkFDTDtxQkFBTSxJQUFJLFFBQVEsS0FBSyxRQUFRLEVBQUU7b0JBQzlCLE1BQU0sQ0FBQyxTQUFTLEdBQUc7d0JBQ2YsSUFBSSxFQUFFLFFBQVE7d0JBQ2QsT0FBTyxFQUFFOzRCQUNMLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFOzRCQUMxQyxNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRTs0QkFDMUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxTQUFTOzRCQUMzQixRQUFRLEVBQUUsR0FBRzs0QkFDYixVQUFVLEVBQUUsS0FBSzt5QkFDcEI7cUJBQ0osQ0FBQztpQkFDTDtxQkFBTSxJQUFJLFFBQVEsS0FBSyxNQUFNLEVBQUU7b0JBQzVCLE1BQU0sQ0FBQyxTQUFTLEdBQUc7d0JBQ2YsSUFBSSxFQUFFLE1BQU07d0JBQ1osT0FBTyxFQUFFOzRCQUNMLElBQUksRUFBRSxNQUFNLENBQUMsUUFBUTs0QkFDckIsVUFBVSxFQUFFLE9BQU87NEJBQ25CLFNBQVMsRUFBRSxNQUFNO3lCQUNwQjtxQkFDSixDQUFDO2lCQUNMO3FCQUFNLElBQUksUUFBUSxLQUFLLFNBQVMsRUFBRTtvQkFDL0IsTUFBTSxDQUFDLFNBQVMsR0FBRzt3QkFDZixJQUFJLEVBQUUsTUFBTTt3QkFDWixPQUFPLEVBQUU7NEJBQ0wsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDOzRCQUMvRCxVQUFVLEVBQUUsT0FBTzs0QkFDbkIsU0FBUyxFQUFFLE1BQU07eUJBQ3BCO3FCQUNKLENBQUM7aUJBQ0w7YUFDSjtRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7O1lBaERKLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFRyZWVUYWJsZUNvbXBvbmVudCB9IGZyb20gJ0BmYXJyaXMvdWktdHJlZXRhYmxlJztcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRmFycmlzVHJlZXRhYmxlRm9ybWF0U2VydmljZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIH1cclxuICAgIHNldEZvcm1hdCh0cmVlVGFibGU6IFRyZWVUYWJsZUNvbXBvbmVudCkge1xyXG4gICAgICAgIGNvbnN0IGNvbHVtbnMgPSB0cmVlVGFibGUuY29sdW1ucztcclxuICAgICAgICBjb2x1bW5zLmZvckVhY2goKGNvbHVtbjogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGFUeXBlID0gY29sdW1uLmRhdGFUeXBlO1xyXG4gICAgICAgICAgICBpZiAoIWNvbHVtbi5mb3JtYXR0ZXIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkYXRhVHlwZSA9PT0gJ2RhdGUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uLmZvcm1hdHRlciA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RhdGV0aW1lJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiBjb2x1bW4uZm9ybWF0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhVHlwZSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb2x1bW4uZm9ybWF0dGVyID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbnVtYmVyJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlZml4OiBjb2x1bW4ucHJlZml4ID8gY29sdW1uLnByZWZpeCA6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VmZml4OiBjb2x1bW4uc3VmZml4ID8gY29sdW1uLnN1ZmZpeCA6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlY2lzaW9uOiBjb2x1bW4ucHJlY2lzaW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhvdXNhbmQ6ICcsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmlwWmVyb3M6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YVR5cGUgPT09ICdlbnVtJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbi5mb3JtYXR0ZXIgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdlbnVtJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogY29sdW1uLmVudW1EYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVGaWVsZDogJ3ZhbHVlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRGaWVsZDogJ25hbWUnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhVHlwZSA9PT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uLmZvcm1hdHRlciA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2VudW0nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBbeyBuYW1lOiAn5pivJywgdmFsdWU6IHRydWUgfSwgeyBuYW1lOiAn5ZCmJywgdmFsdWU6IGZhbHNlIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVGaWVsZDogJ3ZhbHVlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRGaWVsZDogJ25hbWUnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==