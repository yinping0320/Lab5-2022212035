import { Directive, Input, HostListener } from '@angular/core';
import { DropDownListComponent } from '@progress/kendo-angular-dropdowns';
import { FilterService, BaseFilterCellComponent } from '@progress/kendo-angular-grid';
export class KendoGridFilterDirective extends BaseFilterCellComponent {
    constructor(dropdownList, filterService) {
        super(filterService);
        this.dropdownList = dropdownList;
        this.filterService = filterService;
    }
    get selectedValue() {
        const filter = this.filterByField(this.column.dataField);
        return filter ? filter.value : null;
    }
    get defaultItem() {
        return {
            value: null,
            name: '全部'
        };
    }
    ngOnInit() {
        this.dropdownList.valueField = 'value';
        this.dropdownList.textField = 'name';
        this.dropdownList.valuePrimitive = true;
        this.dropdownList.defaultItem = this.defaultItem;
        this.dropdownList.value = this.selectedValue;
        if (this.column.dataType === 'enum') {
            this.dropdownList.data = this.column.enumData;
        }
        else if (this.column.dataType === 'boolean') {
            this.dropdownList.data = [{ value: true, name: '是' }, { value: false, name: '否' }];
        }
    }
    onChange(value) {
        this.applyFilter(value === null ?
            this.removeFilter(this.column.dataField) :
            this.updateFilter({
                field: this.column.dataField,
                operator: 'eq',
                value: value
            }));
    }
    /*
   * 获取 单元格值  主从表支持
   * @param dataItem 行数据
   * @param field 字段
   */
    getValue(dataItem, field) {
        const index = field.indexOf('.');
        if (index < 0) {
            return dataItem[field];
        }
        const fields = field.split('.');
        // field字符串组合
        return fields.reduce((result, next) => {
            return result[next];
        }, dataItem);
    }
}
KendoGridFilterDirective.decorators = [
    { type: Directive, args: [{
                selector: '[kendogridFilter]'
            },] }
];
/** @nocollapse */
KendoGridFilterDirective.ctorParameters = () => [
    { type: DropDownListComponent },
    { type: FilterService }
];
KendoGridFilterDirective.propDecorators = {
    filter: [{ type: Input }],
    column: [{ type: Input }],
    onChange: [{ type: HostListener, args: ['valueChange', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2VuZG9ncmlkLWZpbHRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMva2VuZG8tYmluZGluZy8iLCJzb3VyY2VzIjpbImxpYi9mb3JtYXQva2VuZG9ncmlkLWZpbHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBVSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdkUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDMUUsT0FBTyxFQUFFLGFBQWEsRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBSXRGLE1BQU0sT0FBTyx3QkFBeUIsU0FBUSx1QkFBdUI7SUFnQmpFLFlBQ1ksWUFBbUMsRUFDcEMsYUFBNEI7UUFFbkMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBSGIsaUJBQVksR0FBWixZQUFZLENBQXVCO1FBQ3BDLGtCQUFhLEdBQWIsYUFBYSxDQUFlO0lBR3ZDLENBQUM7SUFoQkQsSUFBVyxhQUFhO1FBQ3BCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN6RCxPQUFPLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3hDLENBQUM7SUFDRCxJQUFXLFdBQVc7UUFDbEIsT0FBTztZQUNILEtBQUssRUFBRSxJQUFJO1lBQ1gsSUFBSSxFQUFFLElBQUk7U0FDYixDQUFDO0lBQ04sQ0FBQztJQVNELFFBQVE7UUFDSixJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUM7UUFDdkMsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDO1FBQ3JDLElBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztRQUN4QyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQ2pELElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7UUFDN0MsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsS0FBSyxNQUFNLEVBQUU7WUFDakMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7U0FDakQ7YUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxLQUFLLFNBQVMsRUFBRTtZQUMzQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1NBQ3RGO0lBQ0wsQ0FBQztJQUlELFFBQVEsQ0FBQyxLQUFVO1FBQ2YsSUFBSSxDQUFDLFdBQVcsQ0FDWixLQUFLLEtBQUssSUFBSSxDQUFDLENBQUM7WUFDWixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztZQUMxQyxJQUFJLENBQUMsWUFBWSxDQUFDO2dCQUNkLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVM7Z0JBQzVCLFFBQVEsRUFBRSxJQUFJO2dCQUNkLEtBQUssRUFBRSxLQUFLO2FBQ2YsQ0FBQyxDQUNULENBQUM7SUFDTixDQUFDO0lBR0Q7Ozs7S0FJQztJQUNELFFBQVEsQ0FBQyxRQUFhLEVBQUUsS0FBYTtRQUNqQyxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pDLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRTtZQUNYLE9BQU8sUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzFCO1FBQ0QsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNoQyxhQUFhO1FBQ2IsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBVyxFQUFFLElBQVMsRUFBRSxFQUFFO1lBQzVDLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hCLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNqQixDQUFDOzs7WUFyRUosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxtQkFBbUI7YUFDaEM7Ozs7WUFKUSxxQkFBcUI7WUFDckIsYUFBYTs7O3FCQU1qQixLQUFLO3FCQUNMLEtBQUs7dUJBa0NMLFlBQVksU0FBQyxhQUFhLEVBQUUsQ0FBQyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBPbkluaXQsIEhvc3RMaXN0ZW5lciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb21wb3NpdGVGaWx0ZXJEZXNjcmlwdG9yIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWRhdGEtcXVlcnknO1xyXG5pbXBvcnQgeyBEcm9wRG93bkxpc3RDb21wb25lbnQgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1kcm9wZG93bnMnO1xyXG5pbXBvcnQgeyBGaWx0ZXJTZXJ2aWNlLCBCYXNlRmlsdGVyQ2VsbENvbXBvbmVudCB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1hbmd1bGFyLWdyaWQnO1xyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW2tlbmRvZ3JpZEZpbHRlcl0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBLZW5kb0dyaWRGaWx0ZXJEaXJlY3RpdmUgZXh0ZW5kcyBCYXNlRmlsdGVyQ2VsbENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gICAgQElucHV0KCkgZmlsdGVyOiBDb21wb3NpdGVGaWx0ZXJEZXNjcmlwdG9yO1xyXG4gICAgQElucHV0KCkgY29sdW1uOiBhbnk7XHJcblxyXG4gICAgcHVibGljIGdldCBzZWxlY3RlZFZhbHVlKCk6IGFueSB7XHJcbiAgICAgICAgY29uc3QgZmlsdGVyID0gdGhpcy5maWx0ZXJCeUZpZWxkKHRoaXMuY29sdW1uLmRhdGFGaWVsZCk7XHJcbiAgICAgICAgcmV0dXJuIGZpbHRlciA/IGZpbHRlci52YWx1ZSA6IG51bGw7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0IGRlZmF1bHRJdGVtKCk6IGFueSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdmFsdWU6IG51bGwsXHJcbiAgICAgICAgICAgIG5hbWU6ICflhajpg6gnXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIGRyb3Bkb3duTGlzdDogRHJvcERvd25MaXN0Q29tcG9uZW50LFxyXG4gICAgICAgIHB1YmxpYyBmaWx0ZXJTZXJ2aWNlOiBGaWx0ZXJTZXJ2aWNlLFxyXG4gICAgKSB7XHJcbiAgICAgICAgc3VwZXIoZmlsdGVyU2VydmljZSk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5kcm9wZG93bkxpc3QudmFsdWVGaWVsZCA9ICd2YWx1ZSc7XHJcbiAgICAgICAgdGhpcy5kcm9wZG93bkxpc3QudGV4dEZpZWxkID0gJ25hbWUnO1xyXG4gICAgICAgIHRoaXMuZHJvcGRvd25MaXN0LnZhbHVlUHJpbWl0aXZlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmRyb3Bkb3duTGlzdC5kZWZhdWx0SXRlbSA9IHRoaXMuZGVmYXVsdEl0ZW07XHJcbiAgICAgICAgdGhpcy5kcm9wZG93bkxpc3QudmFsdWUgPSB0aGlzLnNlbGVjdGVkVmFsdWU7XHJcbiAgICAgICAgaWYgKHRoaXMuY29sdW1uLmRhdGFUeXBlID09PSAnZW51bScpIHtcclxuICAgICAgICAgICAgdGhpcy5kcm9wZG93bkxpc3QuZGF0YSA9IHRoaXMuY29sdW1uLmVudW1EYXRhO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5jb2x1bW4uZGF0YVR5cGUgPT09ICdib29sZWFuJykge1xyXG4gICAgICAgICAgICB0aGlzLmRyb3Bkb3duTGlzdC5kYXRhID0gW3sgdmFsdWU6IHRydWUsIG5hbWU6ICfmmK8nIH0sIHsgdmFsdWU6IGZhbHNlLCBuYW1lOiAn5ZCmJyB9XTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIEBIb3N0TGlzdGVuZXIoJ3ZhbHVlQ2hhbmdlJywgWyckZXZlbnQnXSlcclxuICAgIG9uQ2hhbmdlKHZhbHVlOiBhbnkpIHtcclxuICAgICAgICB0aGlzLmFwcGx5RmlsdGVyKFxyXG4gICAgICAgICAgICB2YWx1ZSA9PT0gbnVsbCA/XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUZpbHRlcih0aGlzLmNvbHVtbi5kYXRhRmllbGQpIDpcclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlRmlsdGVyKHtcclxuICAgICAgICAgICAgICAgICAgICBmaWVsZDogdGhpcy5jb2x1bW4uZGF0YUZpZWxkLFxyXG4gICAgICAgICAgICAgICAgICAgIG9wZXJhdG9yOiAnZXEnLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKlxyXG4gICAqIOiOt+WPliDljZXlhYPmoLzlgLwgIOS4u+S7juihqOaUr+aMgVxyXG4gICAqIEBwYXJhbSBkYXRhSXRlbSDooYzmlbDmja5cclxuICAgKiBAcGFyYW0gZmllbGQg5a2X5q61XHJcbiAgICovXHJcbiAgICBnZXRWYWx1ZShkYXRhSXRlbTogYW55LCBmaWVsZDogc3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3QgaW5kZXggPSBmaWVsZC5pbmRleE9mKCcuJyk7XHJcbiAgICAgICAgaWYgKGluZGV4IDwgMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZGF0YUl0ZW1bZmllbGRdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBmaWVsZHMgPSBmaWVsZC5zcGxpdCgnLicpO1xyXG4gICAgICAgIC8vIGZpZWxk5a2X56ym5Liy57uE5ZCIXHJcbiAgICAgICAgcmV0dXJuIGZpZWxkcy5yZWR1Y2UoKHJlc3VsdDogYW55LCBuZXh0OiBhbnkpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFtuZXh0XTtcclxuICAgICAgICB9LCBkYXRhSXRlbSk7XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==