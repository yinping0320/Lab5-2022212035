/**
 * 多选列表工具类
 */
export class MultiSelectGridUtility {
    /**
     * 渲染切换行
     */
    static renderClickChangedRow(gridComponent, selectedRowContext) {
        if (!gridComponent) {
            return;
        }
        const currentRowIndex = selectedRowContext.currentRowIndex;
        // 渲染当前行
        this.addRowSelectedStyle(gridComponent, currentRowIndex);
        // 渲染上一行
        const lastRowIndex = selectedRowContext.lastRowIndex;
        if (!this.checIfIsSameRelativeIndex(gridComponent, currentRowIndex, lastRowIndex)) {
            this.removeRowSelectedStyle(gridComponent, lastRowIndex);
        }
    }
    /**
     * 检查当前行索引值和上一个选中行索引值的相对当前页面的索引值是否相同
     */
    static checIfIsSameRelativeIndex(gridComponent, currentRowIndex, lastRowIndex) {
        let isSameRelativeIndex = false;
        if (currentRowIndex === lastRowIndex) {
            isSameRelativeIndex = true;
            return isSameRelativeIndex;
        }
        if ((Math.abs(currentRowIndex - lastRowIndex)) % (gridComponent.pageSize) === 0) {
            isSameRelativeIndex = true;
            return isSameRelativeIndex;
        }
        return isSameRelativeIndex;
    }
    /**
     * 检测是否启用分页功能
     */
    static checkIfEnablePaging(gridComponent) {
        let isPageable = false; // 默认未启用分页
        if (!gridComponent) {
            return isPageable;
        }
        if (typeof gridComponent.pageable === 'boolean') {
            isPageable = gridComponent.pageable;
        }
        else if (typeof gridComponent.pageable === 'object') {
            isPageable = true;
        }
        return isPageable;
    }
    /**
     * 渲染checkbox选择
     */
    static renderSelectedChangeCheckbox(elementRef, $event) {
        const currentRowIndex = $event.index;
        const trCollection = this.getTrCollection(elementRef);
        if (trCollection == null || trCollection.length <= 0 || trCollection.length < currentRowIndex) {
            return;
        }
        // 渲染checked行
        const currentTableRowElement = trCollection[currentRowIndex];
        if (!currentTableRowElement) {
            return;
        }
        if ($event.selected) { // checked
            this.appendAtrributeValue(currentTableRowElement, 'class', this.CHECKBOXED_ROW_STYLE_NAME);
        }
        else { // unchecked
            this.removeAttributeSpecificValue(currentTableRowElement, 'class', this.CHECKBOXED_ROW_STYLE_NAME);
        }
    }
    /**
     * 添加行的“已选中样式”
     * 暂无需求，不对外暴露
     */
    static addRowSelectedStyle(gridComponent, rowIndex) {
        if (!gridComponent || rowIndex < 0) {
            return;
        }
        const currentRowElement = this.getRelativeRowInCurrentPage(gridComponent, rowIndex);
        if (!currentRowElement) {
            return;
        }
        this.appendAtrributeValue(currentRowElement, 'class', this.CURRENT_ROW_STYLE_NAME);
    }
    /**
     * 移除行的“已选中样式”
     * 需求：kendo-grid在分页时，不会移除已选中样式
     */
    static removeRowSelectedStyle(gridComponent, rowIndex) {
        if (!gridComponent || rowIndex < 0) {
            return;
        }
        const currentRowElement = this.getRelativeRowInCurrentPage(gridComponent, rowIndex);
        if (!currentRowElement) {
            return;
        }
        this.removeAttributeSpecificValue(currentRowElement, 'class', this.CURRENT_ROW_STYLE_NAME);
    }
    /**
     * 获取指定行在当前页面对应的行元素
     */
    static getRelativeRowInCurrentPage(gridComponent, rowIndex) {
        let rowElementInCurrentPage = null;
        if (!gridComponent || rowIndex < 0) {
            return rowElementInCurrentPage;
        }
        const gridElement = gridComponent.wrapper;
        // 启用分页后，需要更新当前行
        const isPaging = this.checkIfEnablePaging(gridComponent);
        if (isPaging) {
            rowIndex = rowIndex % (gridComponent.pageSize); // 对pageSize取模
        }
        const trCollection = this.getTrCollection(gridElement);
        if (trCollection == null || trCollection.length <= 0) {
            return rowElementInCurrentPage;
        }
        rowElementInCurrentPage = trCollection[rowIndex];
        return rowElementInCurrentPage;
    }
    /**
     * 获取当前grid的tr集合
     */
    static getTrCollection(elementRef) {
        if (!elementRef || !elementRef.nativeElement) {
            return null;
        }
        const kendoGridTbodyElements = elementRef.nativeElement.getElementsByTagName('tbody');
        if (!kendoGridTbodyElements || kendoGridTbodyElements.length <= 0) {
            return null;
        }
        const trCollection = kendoGridTbodyElements[0].getElementsByTagName('tr');
        return trCollection;
    }
    /**
     * 向元素的指定属性追加值
     */
    static appendAtrributeValue(currentElement, attributeName, attributeValue) {
        let newAttributeValue = currentElement.getAttribute(attributeName);
        if (newAttributeValue === null || newAttributeValue === '' || newAttributeValue.length <= 0) {
            newAttributeValue = attributeValue;
        }
        else {
            if (newAttributeValue.indexOf(attributeValue) < 0) { // 存在检测，避免重复添加
                newAttributeValue += ' ' + attributeValue;
            }
        }
        currentElement.setAttribute(attributeName, newAttributeValue);
    }
    /**
     * 移除元数据指定属性的特性属性值
     */
    static removeAttributeSpecificValue(currentElement, attributeName, needRemoveAttributeValue) {
        let lastClassAttributeValue = currentElement.getAttribute(attributeName);
        if (!lastClassAttributeValue) {
            return;
        }
        const index = lastClassAttributeValue.lastIndexOf(needRemoveAttributeValue);
        if (index < 0) {
            return;
        }
        const tempLastClassAttributeValue = lastClassAttributeValue.substring(0, index - 1);
        lastClassAttributeValue = tempLastClassAttributeValue + ' '
            + lastClassAttributeValue.substring(index + needRemoveAttributeValue.length);
        currentElement.setAttribute(attributeName, lastClassAttributeValue);
    }
}
MultiSelectGridUtility.CURRENT_ROW_STYLE_NAME = 'f-state-selected';
MultiSelectGridUtility.CHECKBOXED_ROW_STYLE_NAME = 'f-state-checked';
//# sourceMappingURL=data:application/json;base64,