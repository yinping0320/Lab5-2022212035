import { Directive, Injector, Input, Optional } from '@angular/core';
import { FrameContext } from '@farris/devkit';
import { ListFilterComponent } from '@farris/ui-list-filter';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
export class FarrisListFilterBindingDirective {
    constructor(injector, frameContext, listFilterComponent) {
        this.injector = injector;
        this.frameContext = frameContext;
        this.listFilterComponent = listFilterComponent;
        /**
         * 变量编号，默认为filterConditionList
         */
        this.variableCode = 'filterConditionList';
        this.$destroy = new Subject();
    }
    ngOnDestroy() {
        if (this.$destroy) {
            this.$destroy.next();
            this.$destroy.complete();
        }
    }
    ngOnInit() {
        if (this.listFilterComponent) {
            this.listFilterComponent.conditionsChange.pipe(takeUntil(this.$destroy)).subscribe((event) => {
                const { data = '[]' } = event || {};
                this.setConditions(data);
            });
        }
    }
    setConditions(conditions) {
        this.frameContext.uiState.setPropertyValue(this.variableCode, conditions);
    }
}
FarrisListFilterBindingDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farris-list-filter-binding]'
            },] }
];
/** @nocollapse */
FarrisListFilterBindingDirective.ctorParameters = () => [
    { type: Injector },
    { type: FrameContext },
    { type: ListFilterComponent, decorators: [{ type: Optional }] }
];
FarrisListFilterBindingDirective.propDecorators = {
    variableCode: [{ type: Input, args: ['variableCode',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFycmlzX2xpc3RfZmlsdGVyX2JpbmRpbmcuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9rZW5kby1iaW5kaW5nLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvZmFycmlzLWxpc3QtZmlsdGVyL2ZhcnJpc19saXN0X2ZpbHRlcl9iaW5kaW5nLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQXFCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUMsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDN0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFLM0MsTUFBTSxPQUFPLGdDQUFnQztJQU0zQyxZQUNVLFFBQWtCLEVBQ2xCLFlBQTBCLEVBQ2QsbUJBQXdDO1FBRnBELGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbEIsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDZCx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBUDlEOztXQUVHO1FBQ29CLGlCQUFZLEdBQUcscUJBQXFCLENBQUM7UUFNMUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLE9BQU8sRUFBTyxDQUFDO0lBQ3JDLENBQUM7SUFDRCxXQUFXO1FBQ1QsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDckIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUMxQjtJQUNILENBQUM7SUFDRCxRQUFRO1FBQ04sSUFBSSxJQUFJLENBQUMsbUJBQW1CLEVBQUU7WUFDNUIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBVSxFQUFFLEVBQUU7Z0JBQ2hHLE1BQU0sRUFBRSxJQUFJLEdBQUcsSUFBSSxFQUFFLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQztnQkFDcEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMzQixDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUNPLGFBQWEsQ0FBQyxVQUFrQjtRQUN0QyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQzVFLENBQUM7OztZQWhDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLDhCQUE4QjthQUN6Qzs7OztZQVJtQixRQUFRO1lBQ25CLFlBQVk7WUFDWixtQkFBbUIsdUJBZ0J2QixRQUFROzs7MkJBSlYsS0FBSyxTQUFDLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEluamVjdG9yLCBJbnB1dCwgT25EZXN0cm95LCBPbkluaXQsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZyYW1lQ29udGV4dCB9IGZyb20gJ0BmYXJyaXMvZGV2a2l0JztcclxuaW1wb3J0IHsgTGlzdEZpbHRlckNvbXBvbmVudCB9IGZyb20gJ0BmYXJyaXMvdWktbGlzdC1maWx0ZXInO1xyXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2ZhcnJpcy1saXN0LWZpbHRlci1iaW5kaW5nXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIEZhcnJpc0xpc3RGaWx0ZXJCaW5kaW5nRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xyXG4gIHByaXZhdGUgJGRlc3Ryb3k6IFN1YmplY3Q8YW55PjtcclxuICAvKipcclxuICAgKiDlj5jph4/nvJblj7fvvIzpu5jorqTkuLpmaWx0ZXJDb25kaXRpb25MaXN0XHJcbiAgICovXHJcbiAgQElucHV0KCd2YXJpYWJsZUNvZGUnKSB2YXJpYWJsZUNvZGUgPSAnZmlsdGVyQ29uZGl0aW9uTGlzdCc7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcixcclxuICAgIHByaXZhdGUgZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQsXHJcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIGxpc3RGaWx0ZXJDb21wb25lbnQ6IExpc3RGaWx0ZXJDb21wb25lbnRcclxuICApIHtcclxuICAgIHRoaXMuJGRlc3Ryb3kgPSBuZXcgU3ViamVjdDxhbnk+KCk7XHJcbiAgfVxyXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuJGRlc3Ryb3kpIHtcclxuICAgICAgdGhpcy4kZGVzdHJveS5uZXh0KCk7XHJcbiAgICAgIHRoaXMuJGRlc3Ryb3kuY29tcGxldGUoKTtcclxuICAgIH1cclxuICB9XHJcbiAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5saXN0RmlsdGVyQ29tcG9uZW50KSB7XHJcbiAgICAgIHRoaXMubGlzdEZpbHRlckNvbXBvbmVudC5jb25kaXRpb25zQ2hhbmdlLnBpcGUodGFrZVVudGlsKHRoaXMuJGRlc3Ryb3kpKS5zdWJzY3JpYmUoKGV2ZW50OiBhbnkpID0+IHtcclxuICAgICAgICBjb25zdCB7IGRhdGEgPSAnW10nIH0gPSBldmVudCB8fCB7fTtcclxuICAgICAgICB0aGlzLnNldENvbmRpdGlvbnMoZGF0YSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuICBwcml2YXRlIHNldENvbmRpdGlvbnMoY29uZGl0aW9uczogc3RyaW5nKSB7XHJcbiAgICB0aGlzLmZyYW1lQ29udGV4dC51aVN0YXRlLnNldFByb3BlcnR5VmFsdWUodGhpcy52YXJpYWJsZUNvZGUsIGNvbmRpdGlvbnMpO1xyXG4gIH1cclxufVxyXG4iXX0=