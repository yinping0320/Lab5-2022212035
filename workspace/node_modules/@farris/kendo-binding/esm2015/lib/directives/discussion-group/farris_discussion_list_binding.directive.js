import { of, EMPTY } from 'rxjs';
import { Directive, Input, Injector, HostListener } from '@angular/core';
import { DiscussionListComponent, DiscussionListDirective } from '@farris/discussion-group';
import { ViewModel, ChangeType } from '@farris/devkit';
import { catchError } from 'rxjs/operators';
const KEY_UISTATE_REPLY_MESSAGE = 'DISCUSSION_REPLY_MESSAGE_INFO';
const KEY_MESSAGE_ON_COMMENT_ADD = 'onCommentAdd';
export class FarrisDiscussionListBindingDirective {
    constructor(injector, discussionListComponent, viewModel, discussionListDirective) {
        this.injector = injector;
        this.discussionListComponent = discussionListComponent;
        this.viewModel = viewModel;
        this.discussionListDirective = discussionListDirective;
    }
    ngOnInit() {
        this.viewModel.frameContext.appContext.messagePipe.subscribe((message) => {
            if (message === KEY_MESSAGE_ON_COMMENT_ADD) {
                this.queryComments();
            }
        });
        this.viewModel.bindingData.changes.subscribe((change) => {
            if (change.type === ChangeType.Load || change.type === ChangeType.SelectionChanged) {
                this.queryComments();
            }
        });
    }
    /**
     * 查询评论
     */
    queryComments(pageIndex, pageSize) {
        if (typeof pageIndex === 'undefined') {
            pageIndex = (this.discussionListComponent.pageIndex - 1) || 0;
        }
        if (typeof pageSize === 'undefined') {
            if (this.discussionListComponent.supportPaging) {
                pageSize = this.discussionListComponent.pageSize;
            }
            else {
                // 不分页，pageSize和后端约定传最大数
                pageSize = 10000;
            }
        }
        this.execute(this.commentsQueryCommand, { pageIndex, pageSize }).pipe(catchError(e => EMPTY)).subscribe(result => {
            if (!result) {
                return;
            }
            const { comments = [], pageIndex = 0, pageSize = 10, totalCount = 0 } = result;
            this.discussionListComponent.pageIndex = parseInt(pageIndex) + 1;
            if (this.discussionListComponent.supportPaging) {
                this.discussionListComponent.pageSize = pageSize;
            }
            this.discussionListComponent.total = totalCount;
            this.discussionListDirective.discussionListData = result;
        });
    }
    /**
     * 回复消息
     * @param event event
     */
    replyMessagedHandler(event) {
        this.viewModel.frameContext.root.viewModel.uiState.setPropertyValue(KEY_UISTATE_REPLY_MESSAGE, event);
    }
    /**
     * 切换页码
     * @param event event
     */
    pageChangedHandler(event) {
        const { pageIndex = 1, pageSize = 10 } = event.pageInfo || {};
        this.queryComments(pageIndex - 1, pageSize);
    }
    /**
     * 执行命令
     * @param commandName 命令名称
     */
    execute(commandName, params) {
        if (!commandName || commandName === '' || commandName === 'undefined') {
            return of(null);
        }
        const paths = commandName.split('.');
        let func = null;
        paths.forEach(path => {
            func = func && func[path] || this[path];
        });
        if (typeof func === 'function') {
            return func(params);
        }
        return of(null);
    }
}
FarrisDiscussionListBindingDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farris-discussion-list-binding]'
            },] }
];
/** @nocollapse */
FarrisDiscussionListBindingDirective.ctorParameters = () => [
    { type: Injector },
    { type: DiscussionListComponent },
    { type: ViewModel },
    { type: DiscussionListDirective }
];
FarrisDiscussionListBindingDirective.propDecorators = {
    commentsQueryCommand: [{ type: Input, args: ["commentsQueryCommand",] }],
    replyMessagedHandler: [{ type: HostListener, args: ['replyMessage', ['$event'],] }],
    pageChangedHandler: [{ type: HostListener, args: ['pageChanged', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,