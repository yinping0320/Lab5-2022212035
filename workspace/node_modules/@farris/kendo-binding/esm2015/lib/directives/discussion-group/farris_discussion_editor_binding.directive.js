import { Directive, Injector, Input, HostListener } from '@angular/core';
import { DiscussionEditorComponent } from '@farris/discussion-group';
import { ViewModel } from '@farris/devkit';
import { of, EMPTY } from 'rxjs';
import { tap, catchError } from 'rxjs/operators';
const KEY_UISTATE_REPLY_MESSAGE = 'DISCUSSION_REPLY_MESSAGE_INFO';
const KEY_MESSAGE_ON_COMMENT_ADD = 'onCommentAdd';
export class FarrisDiscussionEditorBindingDirective {
    constructor(injector, discussionEditorComponent, viewModel) {
        this.injector = injector;
        this.discussionEditorComponent = discussionEditorComponent;
        this.viewModel = viewModel;
    }
    ngOnInit() {
        this.discussionEditorComponent.replyUser = this.viewModel.frameContext.root.viewModel.uiState[KEY_UISTATE_REPLY_MESSAGE] || {};
        this.viewModel.frameContext.root.viewModel.uiState.changes.subscribe((change) => {
            if (change.field === KEY_UISTATE_REPLY_MESSAGE) {
                this.discussionEditorComponent.replyUser = this.viewModel.frameContext.root.viewModel.uiState[KEY_UISTATE_REPLY_MESSAGE] || {};
            }
        });
        if (this.queryFrequentAtUsersCommand) {
            this.queryFrequentAtUsers();
        }
        else {
            this.queryAtUsers();
        }
        this.queryAllOrgs();
    }
    /**
     * 查询所有部门数据
     */
    queryAllOrgs() {
        this.execute(this.queryAllOrgsCommand).subscribe(result => {
            if (!result) {
                return;
            }
            this.discussionEditorComponent.sectionData = result;
        });
    }
    /**
     * 获取@用户
     */
    queryAtUsers() {
        this.execute(this.userQueryCommand).subscribe(result => {
            if (!result) {
                return;
            }
            const { users = [] } = result;
            this.discussionEditorComponent.personnels = users;
        });
    }
    /**
     * 获取常用@用户
     */
    queryFrequentAtUsers() {
        this.execute(this.queryFrequentAtUsersCommand).subscribe(result => {
            if (!result) {
                return;
            }
            this.discussionEditorComponent.personnels = result && result.users || [];
        });
    }
    /**
     * 提交或取消评论
     * @param event event
     */
    pageChangedHandler(event) {
        const { msgInfo = 0, text = '', visibility = 'ALL', parentId = null } = event || {};
        if (msgInfo === 1) {
            this.execute(this.addCommentCommand, { text, parentId, visibility }).pipe(tap(() => {
                this.viewModel.frameContext.appContext.messagePipe.next(KEY_MESSAGE_ON_COMMENT_ADD);
            }), catchError(e => EMPTY)).subscribe();
        }
        else {
            // 取消的时候同时会将回复用户清空
            this.viewModel.frameContext.root.viewModel.uiState[KEY_UISTATE_REPLY_MESSAGE] = {};
            this.discussionEditorComponent.replyUser = {};
        }
    }
    /**
     * 执行命令
     * @param commandName 命令名称
     */
    execute(commandName, params) {
        if (!commandName || commandName === '' || commandName === 'undefined') {
            return of(null);
        }
        if (typeof params === 'undefined') {
            params = {};
        }
        const paths = commandName.split('.');
        let func = null;
        paths.forEach(path => {
            func = func && func[path] || this[path];
        });
        if (typeof func === 'function') {
            return func(params);
        }
        return of(null);
    }
}
FarrisDiscussionEditorBindingDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farris-discussion-editor-binding]'
            },] }
];
/** @nocollapse */
FarrisDiscussionEditorBindingDirective.ctorParameters = () => [
    { type: Injector },
    { type: DiscussionEditorComponent },
    { type: ViewModel }
];
FarrisDiscussionEditorBindingDirective.propDecorators = {
    userQueryCommand: [{ type: Input, args: ["userQueryCommand",] }],
    addCommentCommand: [{ type: Input, args: ["addCommentCommand",] }],
    queryAllOrgsCommand: [{ type: Input, args: ["queryAllOrgsCommand",] }],
    queryFrequentAtUsersCommand: [{ type: Input, args: ["queryFrequentAtUsersCommand",] }],
    pageChangedHandler: [{ type: HostListener, args: ['valueChange', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,