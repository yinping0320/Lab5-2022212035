import { Directive, Input, Renderer2, Injector, ElementRef } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
export class FarrisSetFocusDirective {
    constructor(rd, injector, el) {
        this.rd = rd;
        this.injector = injector;
        this.el = el;
        this._state = new BehaviorSubject({});
    }
    set focusState(value) {
        this._state.next(value);
    }
    ngOnInit() {
        this.selfEl = this.el.nativeElement;
        this._state.subscribe(data => {
            if (data === false && this.selfEl) {
                if (this.selfEl.nodeName.toLowerCase() === 'farris-html-editor') {
                    this.setHtmlEditorFocus();
                }
                else {
                    this.setFocus();
                }
            }
        });
    }
    /**
     * 设置一般输入框的默认焦点
     */
    setFocus() {
        const input = this.selfEl.querySelectorAll('input');
        if (input.length) {
            input[0].focus();
        }
        else {
            this.selfEl.focus();
        }
    }
    /**
     * 设置html编辑器的默认焦点  总是在文本最后
     */
    setHtmlEditorFocus() {
        // 富文本编辑器不是input
        const ediotrArea = this.selfEl.querySelector('div[contenteditable="true"]');
        //创建range  存在浏览器兼容性问题
        const range = window.getSelection();
        //range 选择obj下所有子内容
        range.selectAllChildren(ediotrArea);
        //光标移至最后
        range.collapseToEnd();
    }
}
FarrisSetFocusDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farris-set-focus]'
            },] }
];
/** @nocollapse */
FarrisSetFocusDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: Injector },
    { type: ElementRef }
];
FarrisSetFocusDirective.propDecorators = {
    focusState: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFycmlzLXNldC1mb2N1cy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2tlbmRvLWJpbmRpbmcvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9mYXJyaXMtc2V0LWZvY3VzLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFVLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxRixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBS3ZDLE1BQU0sT0FBTyx1QkFBdUI7SUFRaEMsWUFDWSxFQUFhLEVBQ2IsUUFBa0IsRUFDbEIsRUFBYztRQUZkLE9BQUUsR0FBRixFQUFFLENBQVc7UUFDYixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLE9BQUUsR0FBRixFQUFFLENBQVk7UUFMbEIsV0FBTSxHQUF5QixJQUFJLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQVEvRCxDQUFDO0lBWkQsSUFBYSxVQUFVLENBQUMsS0FBYztRQUNsQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBWUQsUUFBUTtRQUNKLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUM7UUFDcEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDekIsSUFBSSxJQUFJLEtBQUssS0FBSyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQy9CLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLEtBQUssb0JBQW9CLEVBQUU7b0JBQzdELElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO2lCQUM3QjtxQkFBTTtvQkFDSCxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7aUJBQ25CO2FBQ0o7UUFDTCxDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUM7SUFFRDs7T0FFRztJQUNILFFBQVE7UUFDSixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3BELElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUNkLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtTQUNuQjthQUFNO1lBQ0gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUN2QjtJQUNMLENBQUM7SUFFRDs7T0FFRztJQUNILGtCQUFrQjtRQUNkLGdCQUFnQjtRQUNoQixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1FBQzVFLHFCQUFxQjtRQUNyQixNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDcEMsbUJBQW1CO1FBQ25CLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNwQyxRQUFRO1FBQ1IsS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQzFCLENBQUM7OztZQXhESixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLG9CQUFvQjthQUNqQzs7OztZQUwwQixTQUFTO1lBQUUsUUFBUTtZQUFVLFVBQVU7Ozt5QkFRN0QsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIFJlbmRlcmVyMiwgSW5qZWN0b3IsIE9uSW5pdCwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbZmFycmlzLXNldC1mb2N1c10nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGYXJyaXNTZXRGb2N1c0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gICAgQElucHV0KCkgc2V0IGZvY3VzU3RhdGUodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLl9zdGF0ZS5uZXh0KHZhbHVlKTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgc2VsZkVsOiBIVE1MRWxlbWVudFxyXG4gICAgcHJpdmF0ZSBfc3RhdGU6IEJlaGF2aW9yU3ViamVjdDxhbnk+ID0gbmV3IEJlaGF2aW9yU3ViamVjdCh7fSk7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSByZDogUmVuZGVyZXIyLFxyXG4gICAgICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxyXG4gICAgICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWZcclxuICAgICkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnNlbGZFbCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudDtcclxuICAgICAgICB0aGlzLl9zdGF0ZS5zdWJzY3JpYmUoZGF0YSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhID09PSBmYWxzZSAmJiB0aGlzLnNlbGZFbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VsZkVsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdmYXJyaXMtaHRtbC1lZGl0b3InKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRIdG1sRWRpdG9yRm9jdXMoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRGb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiuvue9ruS4gOiIrOi+k+WFpeahhueahOm7mOiupOeEpueCuVxyXG4gICAgICovXHJcbiAgICBzZXRGb2N1cygpIHtcclxuICAgICAgICBjb25zdCBpbnB1dCA9IHRoaXMuc2VsZkVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0Jyk7XHJcbiAgICAgICAgaWYgKGlucHV0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICBpbnB1dFswXS5mb2N1cygpXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5zZWxmRWwuZm9jdXMoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDorr7nva5odG1s57yW6L6R5Zmo55qE6buY6K6k54Sm54K5ICDmgLvmmK/lnKjmlofmnKzmnIDlkI5cclxuICAgICAqL1xyXG4gICAgc2V0SHRtbEVkaXRvckZvY3VzKCkge1xyXG4gICAgICAgIC8vIOWvjOaWh+acrOe8lui+keWZqOS4jeaYr2lucHV0XHJcbiAgICAgICAgY29uc3QgZWRpb3RyQXJlYSA9IHRoaXMuc2VsZkVsLnF1ZXJ5U2VsZWN0b3IoJ2Rpdltjb250ZW50ZWRpdGFibGU9XCJ0cnVlXCJdJyk7XHJcbiAgICAgICAgLy/liJvlu7pyYW5nZSAg5a2Y5Zyo5rWP6KeI5Zmo5YW85a655oCn6Zeu6aKYXHJcbiAgICAgICAgY29uc3QgcmFuZ2UgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XHJcbiAgICAgICAgLy9yYW5nZSDpgInmi6lvYmrkuIvmiYDmnInlrZDlhoXlrrlcclxuICAgICAgICByYW5nZS5zZWxlY3RBbGxDaGlsZHJlbihlZGlvdHJBcmVhKTtcclxuICAgICAgICAvL+WFieagh+enu+iHs+acgOWQjlxyXG4gICAgICAgIHJhbmdlLmNvbGxhcHNlVG9FbmQoKTtcclxuICAgIH1cclxufSJdfQ==