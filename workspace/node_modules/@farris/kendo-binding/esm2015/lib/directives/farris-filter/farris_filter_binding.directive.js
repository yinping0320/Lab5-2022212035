import { Directive, Injector, Input, Optional } from '@angular/core';
import { FrameContext } from '@farris/devkit';
import { FilterComponent } from '@farris/ui-filter';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
export class FarrisFilterBindingDirective {
    constructor(injector, frameContext, filterComponent) {
        this.injector = injector;
        this.frameContext = frameContext;
        this.filterComponent = filterComponent;
        /**
         * 变量编号，默认为filterConditionList
         */
        this.variableCode = 'filterConditionList';
        this.$destroy = new Subject();
    }
    ngOnDestroy() {
        if (this.$destroy) {
            this.$destroy.next();
            this.$destroy.complete();
        }
    }
    ngOnInit() {
        if (this.filterComponent) {
            this.filterComponent.conditionsChange.pipe(takeUntil(this.$destroy)).subscribe((event) => {
                const { data = '[]' } = event || {};
                this.setConditions(data);
            });
        }
    }
    setConditions(conditions) {
        this.frameContext.uiState.setPropertyValue(this.variableCode, conditions);
    }
}
FarrisFilterBindingDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farris-filter-binding]'
            },] }
];
/** @nocollapse */
FarrisFilterBindingDirective.ctorParameters = () => [
    { type: Injector },
    { type: FrameContext },
    { type: FilterComponent, decorators: [{ type: Optional }] }
];
FarrisFilterBindingDirective.propDecorators = {
    variableCode: [{ type: Input, args: ['variableCode',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFycmlzX2ZpbHRlcl9iaW5kaW5nLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMva2VuZG8tYmluZGluZy8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL2ZhcnJpcy1maWx0ZXIvZmFycmlzX2ZpbHRlcl9iaW5kaW5nLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQXFCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBSzNDLE1BQU0sT0FBTyw0QkFBNEI7SUFNdkMsWUFDVSxRQUFrQixFQUNsQixZQUEwQixFQUNkLGVBQWdDO1FBRjVDLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbEIsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDZCxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFQdEQ7O1dBRUc7UUFDb0IsaUJBQVksR0FBRyxxQkFBcUIsQ0FBQztRQU0xRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksT0FBTyxFQUFPLENBQUM7SUFDckMsQ0FBQztJQUNELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNyQixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQzFCO0lBQ0gsQ0FBQztJQUNELFFBQVE7UUFDTixJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDeEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQVUsRUFBRSxFQUFFO2dCQUM1RixNQUFNLEVBQUUsSUFBSSxHQUFHLElBQUksRUFBRSxHQUFHLEtBQUssSUFBSSxFQUFFLENBQUM7Z0JBQ3BDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDM0IsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFDTyxhQUFhLENBQUMsVUFBa0I7UUFDdEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQztJQUM1RSxDQUFDOzs7WUFoQ0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSx5QkFBeUI7YUFDcEM7Ozs7WUFSbUIsUUFBUTtZQUNuQixZQUFZO1lBQ1osZUFBZSx1QkFnQm5CLFFBQVE7OzsyQkFKVixLQUFLLFNBQUMsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5qZWN0b3IsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRnJhbWVDb250ZXh0IH0gZnJvbSAnQGZhcnJpcy9kZXZraXQnO1xyXG5pbXBvcnQgeyBGaWx0ZXJDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLWZpbHRlcic7XHJcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbZmFycmlzLWZpbHRlci1iaW5kaW5nXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIEZhcnJpc0ZpbHRlckJpbmRpbmdEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XHJcbiAgcHJpdmF0ZSAkZGVzdHJveTogU3ViamVjdDxhbnk+O1xyXG4gIC8qKlxyXG4gICAqIOWPmOmHj+e8luWPt++8jOm7mOiupOS4umZpbHRlckNvbmRpdGlvbkxpc3RcclxuICAgKi9cclxuICBASW5wdXQoJ3ZhcmlhYmxlQ29kZScpIHZhcmlhYmxlQ29kZSA9ICdmaWx0ZXJDb25kaXRpb25MaXN0JztcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxyXG4gICAgcHJpdmF0ZSBmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCxcclxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgZmlsdGVyQ29tcG9uZW50OiBGaWx0ZXJDb21wb25lbnRcclxuICApIHtcclxuICAgIHRoaXMuJGRlc3Ryb3kgPSBuZXcgU3ViamVjdDxhbnk+KCk7XHJcbiAgfVxyXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuJGRlc3Ryb3kpIHtcclxuICAgICAgdGhpcy4kZGVzdHJveS5uZXh0KCk7XHJcbiAgICAgIHRoaXMuJGRlc3Ryb3kuY29tcGxldGUoKTtcclxuICAgIH1cclxuICB9XHJcbiAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5maWx0ZXJDb21wb25lbnQpIHtcclxuICAgICAgdGhpcy5maWx0ZXJDb21wb25lbnQuY29uZGl0aW9uc0NoYW5nZS5waXBlKHRha2VVbnRpbCh0aGlzLiRkZXN0cm95KSkuc3Vic2NyaWJlKChldmVudDogYW55KSA9PiB7XHJcbiAgICAgICAgY29uc3QgeyBkYXRhID0gJ1tdJyB9ID0gZXZlbnQgfHwge307XHJcbiAgICAgICAgdGhpcy5zZXRDb25kaXRpb25zKGRhdGEpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcbiAgcHJpdmF0ZSBzZXRDb25kaXRpb25zKGNvbmRpdGlvbnM6IHN0cmluZykge1xyXG4gICAgdGhpcy5mcmFtZUNvbnRleHQudWlTdGF0ZS5zZXRQcm9wZXJ0eVZhbHVlKHRoaXMudmFyaWFibGVDb2RlLCBjb25kaXRpb25zKTtcclxuICB9XHJcbn1cclxuIl19