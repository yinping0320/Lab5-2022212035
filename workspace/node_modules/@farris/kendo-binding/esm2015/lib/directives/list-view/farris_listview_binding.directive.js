import { Directive, HostListener, Output, EventEmitter, Input } from '@angular/core';
import { BindingData, ViewModel } from '@farris/devkit';
import { ListViewComponent } from '@farris/ui-list-view';
export class FarrisListViewBindingDirective {
    constructor(bindingData, viewModel, listview) {
        this.bindingData = bindingData;
        this.viewModel = viewModel;
        this.listview = listview;
        this.supportPaged = true;
        /**
         * 选中行切换事件
         */
        this.selectedRowChange = new EventEmitter();
    }
    /**
     * 主键
     */
    get primaryKey() {
        return this.bindingList.primaryKey;
    }
    ngOnInit() {
        // 绑定数据
        this.bindData();
        this.registerBindingDataChangeEvent();
    }
    ngOnChanges() {
        this.bindData();
    }
    ngOnDestroy() {
        this.unRegisterBindingDataChangeEvent();
    }
    /**
     * 获取分页信息
     */
    getPagingInfo() {
        const bindingPath = this.viewModel.bindingPath;
        const bindingData = this.viewModel.bindingData;
        let pagingInfo = bindingData.pagingInfo;
        if (bindingPath === '/') {
            return pagingInfo;
        }
        else {
            const bindingPaths = bindingPath.substr(1).split('/').filter(item => !!item && item.length > 0).map(item => {
                return item.substring(0, item.length - 1);
            });
            bindingPaths.forEach(path => {
                pagingInfo = pagingInfo && pagingInfo[path];
            });
            return pagingInfo;
        }
    }
    /**
     * 设置listview属性
     */
    setListViewPageProps() {
        const data = this.bindingList.toJSON();
        let skip = 0;
        const { pageIndex = 1, pageSize = 0 } = this.getPagingInfo() || {};
        let { total = 0 } = this.getPagingInfo() || {};
        if (pageIndex > 0) {
            skip = (pageIndex - 1) * pageSize;
        }
        if (pageSize === 0 && total === 0) {
            total = data.length;
        }
        this.listview.supportPaging = this.supportPaged;
        this.listview.pageIndex = pageIndex;
        this.listview.pageSize = pageSize;
        this.listview.total = total;
        let currentPage = pageIndex;
        const itemsPerPage = pageSize;
        let totalItems = total;
        if (pageSize === 0) {
            // this.listview.supportPaging = false;
            this.listview.pageIndex = pageIndex;
            this.listview.total = total;
            currentPage = 1;
            totalItems = total;
        }
        if (this.listview.paginationOptions) {
            this.listview.paginationOptions.itemsPerPage = itemsPerPage;
            this.listview.paginationOptions.currentPage = currentPage;
            this.listview.paginationOptions.pageList = this.listview.pageList;
            this.listview.paginationOptions.totalItems = totalItems;
        }
        const listViewChangeDetectRef = this.listview['cdr'];
        if (listViewChangeDetectRef) {
            listViewChangeDetectRef.detectChanges();
        }
        const paginationDirective = this.listview.pager && this.listview.pager['paginationDirective'];
        if (paginationDirective && paginationDirective['service']) {
            try {
                paginationDirective['service'].instances[this.listview.pager.id] = Object.assign({}, this.listview.paginationOptions);
                paginationDirective['service'].setTotalItems(this.listview.pager.id, totalItems);
                paginationDirective.changeDetectorRef.detectChanges();
            }
            catch (_a) { }
        }
    }
    /*
     * 获取绑定数据
     */
    get bindingList() {
        // 根实体
        if (this.viewModel.bindingPath === '/' || !this.viewModel.bindingPath) {
            return this.bindingData.list;
        }
        // 子实体
        let bindingPath = this.viewModel.bindingPath.substr(1);
        bindingPath = bindingPath[0].toLowerCase() + bindingPath.substring(1, bindingPath.length);
        const paths = bindingPath.split('/');
        const filteredPaths = paths.filter((part) => {
            return part !== '';
        });
        return this.bindingData.getValue(filteredPaths);
    }
    /* 绑定数据 */
    bindData() {
        this.setListViewPageProps();
        const data = this.bindingList.toArray();
        this.listview.setData(data);
    }
    /*
         * 发射选中行切换事件
         * @description 统一单选模式和多选模式下的行切换事件
         */
    fireSelectedRowChange(selectedRowContext) {
        this.selectedRowChange.emit(selectedRowContext);
    }
    /**
     * 设置BindingList的当前行
     * @param id 当前行内码
     */
    setSelectionIdToBindingData(id) {
        this.bindingList.setCurrentId(id, true);
    }
    /**
     * 数据源发生变更
     * @param change 变更
     */
    onBindingDataChange(change) {
        this.bindData();
        this.updateSelectedRow(change);
    }
    /**
     * 设置当前行
     * @param change 变更
     */
    updateSelectedRow(change) {
        if (!this.bindingList || !this.bindingList.currentId) {
            return;
        }
        if (this.viewModel && this.viewModel.frameContext.bindingData.rowSelectedEventSuspend === true) {
            return;
        }
        const { id = null } = this.listview.clickItem || {};
        const currentId = this.bindingList.currentId;
        // grid当前行与bingingList当前行一致，无须切换
        if (id === currentId) {
            return;
        }
        this.selectRow(this.bindingList.currentId);
    }
    selectRow(id) {
        if (this.listview && typeof this.listview.selectRow === 'function') {
            this.listview.selectRow(id);
        }
    }
    /**
     * 注册bindingdata变化事件
     */
    registerBindingDataChangeEvent() {
        this.bindingDataChangeEvent = this.bindingData.changes.subscribe((change) => {
            this.onBindingDataChange(change);
        });
    }
    /**
     * 取消bindingdata变化订阅
     */
    unRegisterBindingDataChangeEvent() {
        this.bindingDataChangeEvent.unsubscribe();
    }
    setChecks(ids) {
        this.viewModel.uiState.setPropertyValue('ids', ids);
    }
    /* 切换行事件 */
    changeRow(event) {
        const { index, data, checkChangeEvent } = event;
        if (checkChangeEvent === false || !event.hasOwnProperty('checkChangeEvent')) {
            if (data && Array.isArray(data) && data.length > 0) {
                const id = data[0] && data[0][this.primaryKey] || null;
                if (id) {
                    this.setSelectionIdToBindingData(id);
                }
            }
            this.listview.activeIndex = index;
            this.fireSelectedRowChange(event);
        }
    }
    /**
     * 切换页码触发事件
     * @param event 切换页码参数
     */
    pageChangedHandler(event) {
        let pageIndex = event.pageInfo.pageIndex;
        const pageSize = event.pageInfo.pageSize;
        if (pageIndex < 1) {
            pageIndex = 1;
        }
        const skip = (pageIndex - 1) * pageSize;
        this.bindingData.setPagingInfo(skip, pageSize, this.bindingData.bindingPath);
    }
    /**
     * 设置每页数据条数触发事件
     * @param event 切换页码参数
     */
    pageSizeChangedHandler(event) {
        const { pageIndex, pageSize } = event.pageInfo;
        const skip = (pageIndex - 1) * (+pageSize);
        this.bindingData.setPagingInfo(skip, pageSize, this.bindingData.bindingPath);
    }
    checkValuesChange(event) {
        const ids = event;
        this.setChecks(ids);
    }
}
FarrisListViewBindingDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farrisListviewBinding]'
            },] }
];
/** @nocollapse */
FarrisListViewBindingDirective.ctorParameters = () => [
    { type: BindingData },
    { type: ViewModel },
    { type: ListViewComponent }
];
FarrisListViewBindingDirective.propDecorators = {
    supportPaged: [{ type: Input }],
    selectedRowChange: [{ type: Output }],
    changeRow: [{ type: HostListener, args: ['listClick', ['$event'],] }],
    pageChangedHandler: [{ type: HostListener, args: ['pageChanged', ['$event'],] }],
    pageSizeChangedHandler: [{ type: HostListener, args: ['pageSizeChanged', ['$event'],] }],
    checkValuesChange: [{ type: HostListener, args: ['checkValuesChange', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,