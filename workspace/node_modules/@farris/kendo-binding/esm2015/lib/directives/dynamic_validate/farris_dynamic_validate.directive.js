import { Directive, Injector, Input } from "@angular/core";
import { FrameContext } from "@farris/devkit";
const EXCLUDE_VALIDATE_FIELDS = 'excludeValidateRules';
const RULETYPE = 'required';
export class FarrisDynamicRequiredDirective {
    constructor(frameContext, injector) {
        this.frameContext = frameContext;
        this.injector = injector;
        /**
         * 启用校验的时机
         */
        this.requiredOn = false;
    }
    ngOnDestroy() {
        this.updateValidateRule(false);
    }
    ngOnChanges(changes) {
        // 启用必填校验
        this.updateValidateRule(this.requiredOn);
    }
    /**
     *
     * @param isRequired
     */
    updateValidateRule(isRequired) {
        if (!this.field) {
            return;
        }
        this.frameContext.form.updateFieldValidateRule(this.field, isRequired);
        // if (isRequired) {
        //   const rules = this.frameContext.params.get(EXCLUDE_VALIDATE_FIELDS) || {};
        //   const fieldExcludeRules: string[] = rules[this.field] || [];
        //   if (fieldExcludeRules.includes(RULETYPE)) {
        //     const index = fieldExcludeRules.indexOf(RULETYPE);
        //     fieldExcludeRules.splice(index, 1);
        //   }
        //   this.frameContext.params.set(EXCLUDE_VALIDATE_FIELDS, rules);
        //   this.frameContext.form.updateFieldValidateRule(this.field, fieldExcludeRules);
        // } else {
        //   // 禁用校验
        //   // {int1:[required,maxValue]}
        //   const rules = this.frameContext.params.get(EXCLUDE_VALIDATE_FIELDS) || {};
        //   const fieldExcludeRules = rules[this.field] || [];
        //   if (fieldExcludeRules && !fieldExcludeRules.includes(RULETYPE)) {
        //     fieldExcludeRules.push(RULETYPE);
        //   }
        //   rules[this.field] = fieldExcludeRules;
        //   this.frameContext.params.set(EXCLUDE_VALIDATE_FIELDS, rules);
        //   this.frameContext.form.updateFieldValidateRule(this.field, fieldExcludeRules);
        // }
    }
}
FarrisDynamicRequiredDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farris-dynamic-required]'
            },] }
];
/** @nocollapse */
FarrisDynamicRequiredDirective.ctorParameters = () => [
    { type: FrameContext },
    { type: Injector }
];
FarrisDynamicRequiredDirective.propDecorators = {
    field: [{ type: Input, args: ['farris-dynamic-required',] }],
    requiredOn: [{ type: Input, args: ['requiredOn',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFycmlzX2R5bmFtaWNfdmFsaWRhdGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9rZW5kby1iaW5kaW5nLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvZHluYW1pY192YWxpZGF0ZS9mYXJyaXNfZHluYW1pY192YWxpZGF0ZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUF1QyxNQUFNLGVBQWUsQ0FBQztBQUNoRyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUMsTUFBTSx1QkFBdUIsR0FBRyxzQkFBc0IsQ0FBQztBQUN2RCxNQUFNLFFBQVEsR0FBRyxVQUFVLENBQUM7QUFJNUIsTUFBTSxPQUFPLDhCQUE4QjtJQVN6QyxZQUFzQixZQUEwQixFQUFVLFFBQWtCO1FBQXRELGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUo1RTs7V0FFRztRQUNrQixlQUFVLEdBQVksS0FBSyxDQUFDO0lBR2pELENBQUM7SUFDRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFDRCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsU0FBUztRQUNULElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUNEOzs7T0FHRztJQUNLLGtCQUFrQixDQUFDLFVBQW1CO1FBQzVDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2YsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztRQUN2RSxvQkFBb0I7UUFDcEIsK0VBQStFO1FBQy9FLGlFQUFpRTtRQUNqRSxnREFBZ0Q7UUFDaEQseURBQXlEO1FBQ3pELDBDQUEwQztRQUMxQyxNQUFNO1FBQ04sa0VBQWtFO1FBQ2xFLG1GQUFtRjtRQUNuRixXQUFXO1FBQ1gsWUFBWTtRQUNaLGtDQUFrQztRQUNsQywrRUFBK0U7UUFDL0UsdURBQXVEO1FBQ3ZELHNFQUFzRTtRQUN0RSx3Q0FBd0M7UUFDeEMsTUFBTTtRQUNOLDJDQUEyQztRQUMzQyxrRUFBa0U7UUFDbEUsbUZBQW1GO1FBQ25GLElBQUk7SUFDTixDQUFDOzs7WUFwREYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSwyQkFBMkI7YUFDdEM7Ozs7WUFMUSxZQUFZO1lBREQsUUFBUTs7O29CQVd6QixLQUFLLFNBQUMseUJBQXlCO3lCQUkvQixLQUFLLFNBQUMsWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5qZWN0b3IsIElucHV0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IEZyYW1lQ29udGV4dCB9IGZyb20gXCJAZmFycmlzL2RldmtpdFwiO1xyXG5jb25zdCBFWENMVURFX1ZBTElEQVRFX0ZJRUxEUyA9ICdleGNsdWRlVmFsaWRhdGVSdWxlcyc7XHJcbmNvbnN0IFJVTEVUWVBFID0gJ3JlcXVpcmVkJztcclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbZmFycmlzLWR5bmFtaWMtcmVxdWlyZWRdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgRmFycmlzRHluYW1pY1JlcXVpcmVkRGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xyXG4gIC8qKlxyXG4gICAqIGxpa2Uge2ZpZWxkOicnLHR5cGU6J3JlcXVpcmUnfVxyXG4gICAqL1xyXG4gIEBJbnB1dCgnZmFycmlzLWR5bmFtaWMtcmVxdWlyZWQnKSBmaWVsZDogc3RyaW5nO1xyXG4gIC8qKlxyXG4gICAqIOWQr+eUqOagoemqjOeahOaXtuaculxyXG4gICAqL1xyXG4gIEBJbnB1dCgncmVxdWlyZWRPbicpIHJlcXVpcmVkT246IGJvb2xlYW4gPSBmYWxzZTtcclxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQsIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yKSB7XHJcblxyXG4gIH1cclxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICAgIHRoaXMudXBkYXRlVmFsaWRhdGVSdWxlKGZhbHNlKTtcclxuICB9XHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgLy8g5ZCv55So5b+F5aGr5qCh6aqMXHJcbiAgICB0aGlzLnVwZGF0ZVZhbGlkYXRlUnVsZSh0aGlzLnJlcXVpcmVkT24pO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBcclxuICAgKiBAcGFyYW0gaXNSZXF1aXJlZCBcclxuICAgKi9cclxuICBwcml2YXRlIHVwZGF0ZVZhbGlkYXRlUnVsZShpc1JlcXVpcmVkOiBib29sZWFuKSB7XHJcbiAgICBpZiAoIXRoaXMuZmllbGQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5mcmFtZUNvbnRleHQuZm9ybS51cGRhdGVGaWVsZFZhbGlkYXRlUnVsZSh0aGlzLmZpZWxkLCBpc1JlcXVpcmVkKTtcclxuICAgIC8vIGlmIChpc1JlcXVpcmVkKSB7XHJcbiAgICAvLyAgIGNvbnN0IHJ1bGVzID0gdGhpcy5mcmFtZUNvbnRleHQucGFyYW1zLmdldChFWENMVURFX1ZBTElEQVRFX0ZJRUxEUykgfHwge307XHJcbiAgICAvLyAgIGNvbnN0IGZpZWxkRXhjbHVkZVJ1bGVzOiBzdHJpbmdbXSA9IHJ1bGVzW3RoaXMuZmllbGRdIHx8IFtdO1xyXG4gICAgLy8gICBpZiAoZmllbGRFeGNsdWRlUnVsZXMuaW5jbHVkZXMoUlVMRVRZUEUpKSB7XHJcbiAgICAvLyAgICAgY29uc3QgaW5kZXggPSBmaWVsZEV4Y2x1ZGVSdWxlcy5pbmRleE9mKFJVTEVUWVBFKTtcclxuICAgIC8vICAgICBmaWVsZEV4Y2x1ZGVSdWxlcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgLy8gICB9XHJcbiAgICAvLyAgIHRoaXMuZnJhbWVDb250ZXh0LnBhcmFtcy5zZXQoRVhDTFVERV9WQUxJREFURV9GSUVMRFMsIHJ1bGVzKTtcclxuICAgIC8vICAgdGhpcy5mcmFtZUNvbnRleHQuZm9ybS51cGRhdGVGaWVsZFZhbGlkYXRlUnVsZSh0aGlzLmZpZWxkLCBmaWVsZEV4Y2x1ZGVSdWxlcyk7XHJcbiAgICAvLyB9IGVsc2Uge1xyXG4gICAgLy8gICAvLyDnpoHnlKjmoKHpqoxcclxuICAgIC8vICAgLy8ge2ludDE6W3JlcXVpcmVkLG1heFZhbHVlXX1cclxuICAgIC8vICAgY29uc3QgcnVsZXMgPSB0aGlzLmZyYW1lQ29udGV4dC5wYXJhbXMuZ2V0KEVYQ0xVREVfVkFMSURBVEVfRklFTERTKSB8fCB7fTtcclxuICAgIC8vICAgY29uc3QgZmllbGRFeGNsdWRlUnVsZXMgPSBydWxlc1t0aGlzLmZpZWxkXSB8fCBbXTtcclxuICAgIC8vICAgaWYgKGZpZWxkRXhjbHVkZVJ1bGVzICYmICFmaWVsZEV4Y2x1ZGVSdWxlcy5pbmNsdWRlcyhSVUxFVFlQRSkpIHtcclxuICAgIC8vICAgICBmaWVsZEV4Y2x1ZGVSdWxlcy5wdXNoKFJVTEVUWVBFKTtcclxuICAgIC8vICAgfVxyXG4gICAgLy8gICBydWxlc1t0aGlzLmZpZWxkXSA9IGZpZWxkRXhjbHVkZVJ1bGVzO1xyXG4gICAgLy8gICB0aGlzLmZyYW1lQ29udGV4dC5wYXJhbXMuc2V0KEVYQ0xVREVfVkFMSURBVEVfRklFTERTLCBydWxlcyk7XHJcbiAgICAvLyAgIHRoaXMuZnJhbWVDb250ZXh0LmZvcm0udXBkYXRlRmllbGRWYWxpZGF0ZVJ1bGUodGhpcy5maWVsZCwgZmllbGRFeGNsdWRlUnVsZXMpO1xyXG4gICAgLy8gfVxyXG4gIH1cclxuXHJcbn1cclxuIl19