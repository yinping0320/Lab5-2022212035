import { Directive, Inject, Injector, Input } from "@angular/core";
import { UserSettingsToken } from "@farris/devkit";
import { BigNumber } from 'bignumber.js';
import moment from 'moment';
import { TextComponent } from '@farris/ui-text';
export class FarrisTextLocalizationDirective {
    constructor(injector, userSettings, componentRef) {
        this.injector = injector;
        this.userSettings = userSettings;
        this.componentRef = componentRef;
        this.transform();
    }
    ngOnInit() {
    }
    transform() {
        if (this.componentRef) {
            this.componentRef.beforeWriteValue = (value, options) => {
                let { localizationType = null, showTime = false } = options;
                if (!value) {
                    return '';
                }
                if (localizationType && value) {
                    localizationType = localizationType.toLowerCase();
                    value = this.transformValue(value, localizationType);
                    return value;
                }
                else {
                    return undefined;
                }
            };
        }
    }
    transformValue(value, dataType) {
        if (dataType === 'date') {
            return this.transformDate(value);
        }
        else if (dataType === 'datetime') {
            return this.transformDateTime(value);
        }
        // 涉及金额计算及显示问题，不予处理
        //  else if (dataType === 'number') {
        //   return this.transformNumber(value);
        // } 
        else {
            return value;
        }
    }
    /**
     * 转换日期
     * @param value value
     */
    transformDate(value) {
        let dateFormat = this.userSettings && this.userSettings.dateFormat || 'YYYY-MM-DD';
        if (!dateFormat || !value) {
            return value;
        }
        const date = moment(value);
        const isValid = date.isValid();
        if (!isValid) {
            return value;
        }
        dateFormat = this.parseDateFormat(dateFormat);
        return date.format(dateFormat);
    }
    /**
     * 转换日期时间
     * @param value value
     * todo: 目前无法定义日期时间格式
     */
    transformDateTime(value) {
        let dateFormat = this.userSettings && this.userSettings.dateFormat || 'YYYY-MM-DD';
        let timeFormat = this.userSettings && this.userSettings.timeFormat || 'HH:mm:ss';
        if (!dateFormat || !timeFormat) {
            return value;
        }
        const dateTime = moment(value);
        const isValid = dateTime.isValid();
        if (!isValid) {
            return value;
        }
        if (dateFormat) {
            dateFormat = this.parseDateFormat(dateFormat);
        }
        if (timeFormat) {
            timeFormat = this.parseTimeFormat(timeFormat);
        }
        const dateTimeFormat = dateFormat + ' ' + timeFormat;
        return dateTime.format(dateTimeFormat);
    }
    /**
     * 转换数字
     * @param value value
     */
    transformNumber(value) {
        if (value === null || value === undefined || value === '') {
            return '';
        }
        const bigNumber = new BigNumber(value);
        // 如果不是数字，不做任何处理
        if (!BigNumber.isBigNumber(bigNumber)) {
            return value;
        }
        const isNegative = bigNumber.isNegative();
        const format = this.buildNumberFormat();
        const { negativeSign = null, numberDecimalDigits = null } = this.numberFormat || {};
        if (isNegative) {
            if (negativeSign !== null) {
                format.prefix = negativeSign;
                return bigNumber.absoluteValue().toFormat(numberDecimalDigits, null, format);
            }
        }
        return bigNumber.toFormat(numberDecimalDigits, null, format);
    }
    /**
     * 转换日期格式规则为moment的format规则
     * @param format format
     */
    parseDateFormat(format) {
        return format.replace(/y/g, 'Y').replace(/d/g, 'D');
    }
    /**
     * 转换时间格式规则为moment的format规则
     * @param format format
     */
    parseTimeFormat(format) {
        return format.replace(/M/g, 'm');
    }
    /**
     * 构造bignumber数字格式化选项
     */
    buildNumberFormat() {
        if (this.numberFormat) {
            const { numberDecimalSeparator = null, numberGroupSeparator = null } = this.numberFormat;
            const format = {
                groupSize: 3,
            };
            if (numberDecimalSeparator !== null) {
                format.decimalSeparator = numberDecimalSeparator;
            }
            if (numberGroupSeparator !== null) {
                format.groupSeparator = numberGroupSeparator;
            }
            return format;
        }
    }
    get numberFormat() {
        return this.userSettings && this.userSettings.numberFormat || null;
    }
}
FarrisTextLocalizationDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farris-text-localization]'
            },] }
];
/** @nocollapse */
FarrisTextLocalizationDirective.ctorParameters = () => [
    { type: Injector },
    { type: undefined, decorators: [{ type: Inject, args: [UserSettingsToken,] }] },
    { type: TextComponent }
];
FarrisTextLocalizationDirective.propDecorators = {
    localization: [{ type: Input, args: ['localization',] }]
};
//# sourceMappingURL=data:application/json;base64,