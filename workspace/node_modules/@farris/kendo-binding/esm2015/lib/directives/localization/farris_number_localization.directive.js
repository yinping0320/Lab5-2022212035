import { Directive, Inject, Injector } from "@angular/core";
import { UserSettingsToken } from "@farris/devkit";
import { NumberSpinnerComponent } from '@farris/ui-number-spinner';
export class FarrisNumberLocalizationDirective {
    constructor(injector, userSettings, componentRef) {
        this.injector = injector;
        this.userSettings = userSettings;
        this.componentRef = componentRef;
    }
    ngOnInit() {
        this.localize();
    }
    localize() {
        return;
        // 涉及金额等问题，数字格式化不予处理
        if (this.userSettings && this.userSettings.numberFormat && this.componentRef) {
            const { negativeSign = null, numberDecimalDigits = null, numberDecimalSeparator = null, numberGroupSeparator = null } = this.userSettings.numberFormat || {};
            // 负号
            if (negativeSign) {
                // this.componentRef.prefix = negativeSign;
            }
            // 小数位数
            if (numberDecimalDigits !== null) {
                this.componentRef.precision = numberDecimalDigits;
                this.componentRef.formatOptions['precision'] = numberDecimalDigits;
            }
            // 小数点符号
            if (numberDecimalSeparator !== null) {
                this.componentRef.decimalSeparator = numberDecimalSeparator;
                this.componentRef.formatOptions['decimalSeparator'] = numberDecimalSeparator;
            }
            // 千分位符号
            if (numberGroupSeparator !== null) {
                this.componentRef.groupSeparator = numberGroupSeparator;
                this.componentRef.formatOptions['groupSeparator'] = numberGroupSeparator;
            }
            this.componentRef.updateValue(this.componentRef.value);
        }
    }
}
FarrisNumberLocalizationDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farris-number-localization]'
            },] }
];
/** @nocollapse */
FarrisNumberLocalizationDirective.ctorParameters = () => [
    { type: Injector },
    { type: undefined, decorators: [{ type: Inject, args: [UserSettingsToken,] }] },
    { type: NumberSpinnerComponent }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFycmlzX251bWJlcl9sb2NhbGl6YXRpb24uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9rZW5kby1iaW5kaW5nLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvbG9jYWxpemF0aW9uL2ZhcnJpc19udW1iZXJfbG9jYWxpemF0aW9uLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDcEUsT0FBTyxFQUFnQixpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBSW5FLE1BQU0sT0FBTyxpQ0FBaUM7SUFDNUMsWUFBb0IsUUFBa0IsRUFBcUMsWUFBMEIsRUFBVSxZQUFvQztRQUEvSCxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQXFDLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQVUsaUJBQVksR0FBWixZQUFZLENBQXdCO0lBRW5KLENBQUM7SUFDRCxRQUFRO1FBQ04sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2xCLENBQUM7SUFDTyxRQUFRO1FBQ2QsT0FBTztRQUNQLG9CQUFvQjtRQUNwQixJQUFJLElBQUksQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUM1RSxNQUFNLEVBQUUsWUFBWSxHQUFHLElBQUksRUFBRSxtQkFBbUIsR0FBRyxJQUFJLEVBQUUsc0JBQXNCLEdBQUcsSUFBSSxFQUFFLG9CQUFvQixHQUFHLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxJQUFJLEVBQUUsQ0FBQztZQUM3SixLQUFLO1lBQ0wsSUFBSSxZQUFZLEVBQUU7Z0JBQ2hCLDJDQUEyQzthQUM1QztZQUNELE9BQU87WUFDUCxJQUFJLG1CQUFtQixLQUFLLElBQUksRUFBRTtnQkFDaEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLEdBQUcsbUJBQW1CLENBQUM7Z0JBQ2xELElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxHQUFHLG1CQUFtQixDQUFDO2FBQ3BFO1lBQ0QsUUFBUTtZQUNSLElBQUksc0JBQXNCLEtBQUssSUFBSSxFQUFFO2dCQUNuQyxJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixHQUFHLHNCQUFzQixDQUFDO2dCQUM1RCxJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLHNCQUFzQixDQUFDO2FBQzlFO1lBQ0QsUUFBUTtZQUNSLElBQUksb0JBQW9CLEtBQUssSUFBSSxFQUFFO2dCQUNqQyxJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsR0FBRyxvQkFBb0IsQ0FBQztnQkFDeEQsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxvQkFBb0IsQ0FBQzthQUMxRTtZQUNELElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDeEQ7SUFDSCxDQUFDOzs7WUFwQ0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSw4QkFBOEI7YUFDekM7Ozs7WUFMMkIsUUFBUTs0Q0FPTyxNQUFNLFNBQUMsaUJBQWlCO1lBTDFELHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5qZWN0LCBJbmplY3RvciwgT25Jbml0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgVXNlclNldHRpbmdzLCBVc2VyU2V0dGluZ3NUb2tlbiB9IGZyb20gXCJAZmFycmlzL2RldmtpdFwiO1xyXG5pbXBvcnQgeyBOdW1iZXJTcGlubmVyQ29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy91aS1udW1iZXItc3Bpbm5lcic7XHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2ZhcnJpcy1udW1iZXItbG9jYWxpemF0aW9uXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIEZhcnJpc051bWJlckxvY2FsaXphdGlvbkRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsIEBJbmplY3QoVXNlclNldHRpbmdzVG9rZW4pIHByaXZhdGUgdXNlclNldHRpbmdzOiBVc2VyU2V0dGluZ3MsIHByaXZhdGUgY29tcG9uZW50UmVmOiBOdW1iZXJTcGlubmVyQ29tcG9uZW50KSB7XHJcblxyXG4gIH1cclxuICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgIHRoaXMubG9jYWxpemUoKTtcclxuICB9XHJcbiAgcHJpdmF0ZSBsb2NhbGl6ZSgpIHtcclxuICAgIHJldHVybjtcclxuICAgIC8vIOa2ieWPiumHkemineetiemXrumimO+8jOaVsOWtl+agvOW8j+WMluS4jeS6iOWkhOeQhlxyXG4gICAgaWYgKHRoaXMudXNlclNldHRpbmdzICYmIHRoaXMudXNlclNldHRpbmdzLm51bWJlckZvcm1hdCAmJiB0aGlzLmNvbXBvbmVudFJlZikge1xyXG4gICAgICBjb25zdCB7IG5lZ2F0aXZlU2lnbiA9IG51bGwsIG51bWJlckRlY2ltYWxEaWdpdHMgPSBudWxsLCBudW1iZXJEZWNpbWFsU2VwYXJhdG9yID0gbnVsbCwgbnVtYmVyR3JvdXBTZXBhcmF0b3IgPSBudWxsIH0gPSB0aGlzLnVzZXJTZXR0aW5ncy5udW1iZXJGb3JtYXQgfHwge307XHJcbiAgICAgIC8vIOi0n+WPt1xyXG4gICAgICBpZiAobmVnYXRpdmVTaWduKSB7XHJcbiAgICAgICAgLy8gdGhpcy5jb21wb25lbnRSZWYucHJlZml4ID0gbmVnYXRpdmVTaWduO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIOWwj+aVsOS9jeaVsFxyXG4gICAgICBpZiAobnVtYmVyRGVjaW1hbERpZ2l0cyAhPT0gbnVsbCkge1xyXG4gICAgICAgIHRoaXMuY29tcG9uZW50UmVmLnByZWNpc2lvbiA9IG51bWJlckRlY2ltYWxEaWdpdHM7XHJcbiAgICAgICAgdGhpcy5jb21wb25lbnRSZWYuZm9ybWF0T3B0aW9uc1sncHJlY2lzaW9uJ10gPSBudW1iZXJEZWNpbWFsRGlnaXRzO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIOWwj+aVsOeCueespuWPt1xyXG4gICAgICBpZiAobnVtYmVyRGVjaW1hbFNlcGFyYXRvciAhPT0gbnVsbCkge1xyXG4gICAgICAgIHRoaXMuY29tcG9uZW50UmVmLmRlY2ltYWxTZXBhcmF0b3IgPSBudW1iZXJEZWNpbWFsU2VwYXJhdG9yO1xyXG4gICAgICAgIHRoaXMuY29tcG9uZW50UmVmLmZvcm1hdE9wdGlvbnNbJ2RlY2ltYWxTZXBhcmF0b3InXSA9IG51bWJlckRlY2ltYWxTZXBhcmF0b3I7XHJcbiAgICAgIH1cclxuICAgICAgLy8g5Y2D5YiG5L2N56ym5Y+3XHJcbiAgICAgIGlmIChudW1iZXJHcm91cFNlcGFyYXRvciAhPT0gbnVsbCkge1xyXG4gICAgICAgIHRoaXMuY29tcG9uZW50UmVmLmdyb3VwU2VwYXJhdG9yID0gbnVtYmVyR3JvdXBTZXBhcmF0b3I7XHJcbiAgICAgICAgdGhpcy5jb21wb25lbnRSZWYuZm9ybWF0T3B0aW9uc1snZ3JvdXBTZXBhcmF0b3InXSA9IG51bWJlckdyb3VwU2VwYXJhdG9yO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuY29tcG9uZW50UmVmLnVwZGF0ZVZhbHVlKHRoaXMuY29tcG9uZW50UmVmLnZhbHVlKTtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=