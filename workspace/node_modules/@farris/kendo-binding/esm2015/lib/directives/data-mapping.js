import { isNumber } from 'lodash-es';
/**
 * 帮助映射基类
 */
export class DataMapping {
    constructor() {
        /**
         * 多选帮助默认分隔符
         */
        this.defaultSpliter = ',';
    }
    /**
     * 映射数据
     * @param helpData 清空时，值为null
     * @param mapFields 格式形如：{id: "assoField.assoField", code: "assoField.assoField_Code", name: "assoField.assoField_Name"}
     * @param asClear 类似清空
     * @param [spliter=','] 多选分隔符
     */
    mappingData(helpData, mapFields, asClear = false, spliter = ',') {
        if (!mapFields) {
            return;
        }
        // 关闭变更检测
        const appContext = this.vm.frameContext.appContext;
        appContext.changeDetectionController.detach();
        let helpFields = Object.keys(mapFields);
        const basePaths = this.getBindingPathArray();
        const primaryInfo = this.getMapFieldsPrimaryKey(mapFields, basePaths);
        // 映射到目标主键的源字段数组
        const primaryKeys = primaryInfo && primaryInfo.map((item) => item.primaryKey) || [];
        // 目标主键字段数组
        const primaryFields = primaryInfo && primaryInfo.map((item) => item.primaryField) || [];
        // 对映射中的key进行排序，使映射到目标主键的key排到前面
        helpFields = this.sortMapFieldKeys(helpFields, primaryKeys);
        if (!helpData || asClear) {
            helpFields.reverse();
        }
        this.mapping(helpFields, mapFields, helpData, primaryFields, basePaths, asClear, spliter);
        // 重新打开变更检测
        appContext.changeDetectionController.reattach();
    }
    mapping(sortedKeyFields, mapFields, helpData, targetPrimaryFields, basePaths, asClear = false, spliter = ',') {
        sortedKeyFields.forEach((field) => {
            const val = this.getHelpValue(field, helpData, spliter);
            let mappings = mapFields[field].split(',');
            const headMappings = mappings.filter((p) => targetPrimaryFields.includes(p));
            const leftMappings = mappings.filter((p) => !targetPrimaryFields.includes(p));
            if (!helpData || asClear) {
                mappings = [].concat(leftMappings).concat(headMappings);
            }
            else {
                mappings = [].concat(headMappings).concat(leftMappings);
            }
            this.updateTarget(mappings, basePaths, helpData, val);
        });
    }
    updateTarget(mappings, basePaths, helpData, value) {
        mappings.forEach((targetFieldPath) => {
            this.updateTargetValue(basePaths, targetFieldPath, value, helpData);
        });
    }
    updateTargetValue(basePaths, targetFieldPath, value, helpData) {
        if (this.target) {
            const paths = targetFieldPath.split('.');
            this.setValue(this.target, paths, value);
        }
        else {
            const paths = basePaths.concat(targetFieldPath.split('.'));
            if (!helpData) {
                this.vm.bindingData.clearValue(paths, true, true, { frameContext: this.vm.frameContext });
            }
            else {
                this.vm.bindingData.setValue(paths, value, true, true, null, { frameContext: this.vm.frameContext });
            }
        }
    }
    /**
     * 获取帮助字段对应的值
     * @param field 帮助字段
     * @param helpData 帮助数据
     * @param [spliter=','] 多选帮助分隔符
     * @returns
     */
    getHelpValue(field, helpData, spliter = ',') {
        let value = '';
        if (helpData) {
            if (helpData instanceof Array) {
                value = helpData.map((item) => {
                    return this.getValue(field, item);
                }).join(spliter);
            }
            else {
                value = this.getValue(field, helpData);
            }
        }
        return value;
    }
    getValue(f, data) {
        let val = '';
        if (f.indexOf('.') === -1) {
            val = data[f];
        }
        else {
            val = f.split('.').reduce((a, b) => {
                return a[b];
            }, data);
        }
        return val;
    }
    setValue(target, paths, value) {
        if (target) {
            if (paths.length <= 1) {
                target[paths[0]] = value;
            }
            else {
                paths.slice(0, -1).reduce((prev, path) => {
                    if (!(prev.hasOwnProperty(path) || prev['__proto__'].hasOwnProperty(path))) {
                        prev[path] = {};
                    }
                    return prev[path];
                }, target)[paths[paths.length - 1]] = value;
            }
        }
    }
    getBindingPathArray() {
        const path = this.vm.bindingPath;
        if (path) {
            return path.split('/').filter((n) => n !== '');
        }
        return [];
    }
    isNumberValue(field, data) {
        const currentVal = this.getValue(field, data);
        return isNumber(currentVal);
    }
    /**
     *
     * @param mapFields  格式形如：{id: "assoField.assoField", code: "assoField.assoField_Code", name: "assoField.assoField_Name"} 或者 {id:'vid',code:'code',name:'name'}
     */
    getMapFieldsPrimaryKey(mapFields, bindingPaths) {
        if (!mapFields || Object.keys(mapFields).length < 1) {
            return null;
        }
        const results = [];
        // let primaryField = null;
        try {
            const entityTypeInfo = this.vm.frameContext.repository.entityTypeInfo;
            Object.keys(mapFields).forEach((key) => {
                const mapField = mapFields[key];
                if (mapField && typeof mapField === 'string') {
                    const mappings = mapField.split(',').filter((p) => p);
                    mappings.forEach((item) => {
                        let paths = item.split('.');
                        if (bindingPaths && bindingPaths.length > 0) {
                            paths = bindingPaths.concat(paths);
                        }
                        const propInfo = entityTypeInfo.getPropInfoByPath(paths);
                        if (propInfo && propInfo.metadataInfo && propInfo.metadataInfo.primary === true) {
                            results.push({
                                primaryKey: key,
                                primaryField: item
                            });
                        }
                    });
                }
            });
        }
        catch (e) {
            console.error(e);
        }
        return results;
    }
    sortMapFieldKeys(keys, primaryKeys) {
        if (!primaryKeys || primaryKeys.length < 1 || !keys || keys.length < 1) {
            return keys;
        }
        primaryKeys = [...new Set(primaryKeys)];
        // 过滤出非主键映射字段
        keys = keys.filter((p) => !primaryKeys.includes(p));
        return [].concat(primaryKeys).concat(keys);
    }
}
//# sourceMappingURL=data:application/json;base64,