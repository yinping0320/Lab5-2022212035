import { Directive, Optional, Self, Input } from '@angular/core';
import { FrameContext } from '@farris/devkit';
import { LookupGridComponent } from '@farris/ui-lookup';
// tslint:disable-next-line: directive-selector
export class LookupEnableExtendLoadMethodDirective {
    constructor(frameContext, lookup) {
        this.frameContext = frameContext;
        this.lookup = lookup;
    }
    ngOnInit() {
        if (!this.frameContext || !this.lookup || this.enableExtendLoadMethod !== true) {
            return;
        }
        const befApiUrl = this.frameContext.repository.apiUri;
        const helpMetadataId = this.lookup.uri;
        const enableKey = `${helpMetadataId}@${befApiUrl}`;
        this.frameContext.setParam(enableKey, true);
    }
}
LookupEnableExtendLoadMethodDirective.decorators = [
    { type: Directive, args: [{
                selector: '[enableExtendLoadMethod]'
            },] }
];
/** @nocollapse */
LookupEnableExtendLoadMethodDirective.ctorParameters = () => [
    { type: FrameContext, decorators: [{ type: Optional }] },
    { type: LookupGridComponent, decorators: [{ type: Optional }, { type: Self }] }
];
LookupEnableExtendLoadMethodDirective.propDecorators = {
    enableExtendLoadMethod: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9va3VwLWVuYWJsZS1leHRlbmQtbG9hZC1tZXRob2QuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9rZW5kby1iaW5kaW5nLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvbG9va3VwLWVuYWJsZS1leHRlbmQtbG9hZC1tZXRob2QuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQVUsUUFBUSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRXhELCtDQUErQztBQUkvQyxNQUFNLE9BQU8scUNBQXFDO0lBSWhELFlBQ3NCLFlBQTBCLEVBQ2xCLE1BQTJCO1FBRG5DLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQ2xCLFdBQU0sR0FBTixNQUFNLENBQXFCO0lBQ3JELENBQUM7SUFFTCxRQUFRO1FBQ04sSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxzQkFBc0IsS0FBSyxJQUFJLEVBQUU7WUFDOUUsT0FBTztTQUNSO1FBQ0QsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDO1FBQ3RELE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO1FBQ3ZDLE1BQU0sU0FBUyxHQUFHLEdBQUcsY0FBYyxJQUFJLFNBQVMsRUFBRSxDQUFDO1FBQ25ELElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxDQUFDOzs7WUFwQkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSwwQkFBMEI7YUFDckM7Ozs7WUFOUSxZQUFZLHVCQVloQixRQUFRO1lBWEosbUJBQW1CLHVCQVl2QixRQUFRLFlBQUksSUFBSTs7O3FDQUxsQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbmltcG9ydCB7IERpcmVjdGl2ZSwgT25Jbml0LCBPcHRpb25hbCwgU2VsZiwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRnJhbWVDb250ZXh0IH0gZnJvbSAnQGZhcnJpcy9kZXZraXQnO1xyXG5pbXBvcnQgeyBMb29rdXBHcmlkQ29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy91aS1sb29rdXAnO1xyXG5cclxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBkaXJlY3RpdmUtc2VsZWN0b3JcclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbZW5hYmxlRXh0ZW5kTG9hZE1ldGhvZF0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBMb29rdXBFbmFibGVFeHRlbmRMb2FkTWV0aG9kRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyBlbmFibGVFeHRlbmRMb2FkTWV0aG9kOiBhbnk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCxcclxuICAgIEBPcHRpb25hbCgpIEBTZWxmKCkgcHJpdmF0ZSBsb29rdXA6IExvb2t1cEdyaWRDb21wb25lbnRcclxuICApIHsgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuICAgIGlmICghdGhpcy5mcmFtZUNvbnRleHQgfHwgIXRoaXMubG9va3VwIHx8IHRoaXMuZW5hYmxlRXh0ZW5kTG9hZE1ldGhvZCAhPT0gdHJ1ZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBiZWZBcGlVcmwgPSB0aGlzLmZyYW1lQ29udGV4dC5yZXBvc2l0b3J5LmFwaVVyaTtcclxuICAgIGNvbnN0IGhlbHBNZXRhZGF0YUlkID0gdGhpcy5sb29rdXAudXJpO1xyXG4gICAgY29uc3QgZW5hYmxlS2V5ID0gYCR7aGVscE1ldGFkYXRhSWR9QCR7YmVmQXBpVXJsfWA7XHJcbiAgICB0aGlzLmZyYW1lQ29udGV4dC5zZXRQYXJhbShlbmFibGVLZXksIHRydWUpO1xyXG4gIH1cclxufVxyXG4iXX0=