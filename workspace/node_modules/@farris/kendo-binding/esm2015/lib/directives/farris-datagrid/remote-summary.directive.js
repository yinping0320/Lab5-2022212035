import { Directive, Input } from '@angular/core';
import { ViewModel } from '@farris/devkit';
import { DatagridComponent } from '@farris/ui-datagrid';
export class FarrisDataGridRemoteSummaryDirective {
    constructor(viewModel, grid) {
        this.viewModel = viewModel;
        this.grid = grid;
        const appContext = this.viewModel.frameContext.getFormAppContext();
        if (appContext && appContext.hasOwnProperty('messagePipe')) {
            appContext.messagePipe.subscribe((message) => {
                const messageType = message && message.type || null;
                // 查询事件
                if (messageType === 'query') {
                    if (this.remoteSummaryCommand && this.grid.footerDataFrom === 'server') {
                        const paths = this.remoteSummaryCommand.split('.');
                        let func = null;
                        paths.forEach(path => {
                            func = func && func[path] || this[path];
                        });
                        if (typeof func === 'function') {
                            func().subscribe(result => {
                                this.grid.footerData = result;
                            });
                        }
                    }
                }
            });
        }
    }
    /**
     * 执行命令
     * @param commandName 命令名称
     * @param frameId frameId
     */
    execute(commandName, frameId) {
        if (!commandName || commandName === '' || commandName === 'undefined') {
            return;
        }
        let viewModel = this.viewModel;
        if (frameId) {
            const targetContext = viewModel.frameContext.appContext.frameContextManager.getFrameContextById(frameId);
            viewModel = targetContext.viewModel;
        }
        return viewModel[commandName]();
    }
}
FarrisDataGridRemoteSummaryDirective.decorators = [
    { type: Directive, args: [{
                selector: "[farris-remote-summary-command]"
            },] }
];
/** @nocollapse */
FarrisDataGridRemoteSummaryDirective.ctorParameters = () => [
    { type: ViewModel },
    { type: DatagridComponent }
];
FarrisDataGridRemoteSummaryDirective.propDecorators = {
    remoteSummaryCommand: [{ type: Input, args: ['farris-remote-summary-command',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVtb3RlLXN1bW1hcnkuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9rZW5kby1iaW5kaW5nLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvZmFycmlzLWRhdGFncmlkL3JlbW90ZS1zdW1tYXJ5LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVqRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFNeEQsTUFBTSxPQUFPLG9DQUFvQztJQU0vQyxZQUFtQixTQUFvQixFQUFTLElBQXVCO1FBQXBELGNBQVMsR0FBVCxTQUFTLENBQVc7UUFBUyxTQUFJLEdBQUosSUFBSSxDQUFtQjtRQUNyRSxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ25FLElBQUksVUFBVSxJQUFJLFVBQVUsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFDMUQsVUFBVSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFZLEVBQUUsRUFBRTtnQkFDaEQsTUFBTSxXQUFXLEdBQUcsT0FBTyxJQUFJLE9BQU8sQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDO2dCQUNwRCxPQUFPO2dCQUNQLElBQUksV0FBVyxLQUFLLE9BQU8sRUFBRTtvQkFDM0IsSUFBSSxJQUFJLENBQUMsb0JBQW9CLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEtBQUssUUFBUSxFQUFFO3dCQUN0RSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO3dCQUNuRCxJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7d0JBQ2hCLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7NEJBQ25CLElBQUksR0FBRyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzt3QkFDMUMsQ0FBQyxDQUFDLENBQUM7d0JBQ0gsSUFBSSxPQUFPLElBQUksS0FBSyxVQUFVLEVBQUU7NEJBQzlCLElBQUksRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRTtnQ0FDeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsTUFBTSxDQUFDOzRCQUNoQyxDQUFDLENBQUMsQ0FBQzt5QkFDSjtxQkFDRjtpQkFDRjtZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBQ0Q7Ozs7T0FJRztJQUNLLE9BQU8sQ0FBQyxXQUFtQixFQUFFLE9BQWdCO1FBQ25ELElBQUksQ0FBQyxXQUFXLElBQUksV0FBVyxLQUFLLEVBQUUsSUFBSSxXQUFXLEtBQUssV0FBVyxFQUFFO1lBQ3JFLE9BQU87U0FDUjtRQUNELElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDL0IsSUFBSSxPQUFPLEVBQUU7WUFDWCxNQUFNLGFBQWEsR0FBRyxTQUFTLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN6RyxTQUFTLEdBQUcsYUFBYSxDQUFDLFNBQVMsQ0FBQztTQUNyQztRQUNELE9BQU8sU0FBUyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUM7SUFDbEMsQ0FBQzs7O1lBL0NGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsaUNBQWlDO2FBQzVDOzs7O1lBTlEsU0FBUztZQUNULGlCQUFpQjs7O21DQVV2QixLQUFLLFNBQUMsK0JBQStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IFZpZXdNb2RlbCB9IGZyb20gJ0BmYXJyaXMvZGV2a2l0JztcclxuaW1wb3J0IHsgRGF0YWdyaWRDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLWRhdGFncmlkJztcclxuXHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogXCJbZmFycmlzLXJlbW90ZS1zdW1tYXJ5LWNvbW1hbmRdXCJcclxufSlcclxuZXhwb3J0IGNsYXNzIEZhcnJpc0RhdGFHcmlkUmVtb3RlU3VtbWFyeURpcmVjdGl2ZSB7XHJcbiAgLyoqXHJcbiAgICog5pyN5Yqh5Zmo56uv5ZCI6K6h5ZG95Luk5ZCN56ewXHJcbiAgICovXHJcbiAgQElucHV0KCdmYXJyaXMtcmVtb3RlLXN1bW1hcnktY29tbWFuZCcpIHJlbW90ZVN1bW1hcnlDb21tYW5kOiBzdHJpbmc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyB2aWV3TW9kZWw6IFZpZXdNb2RlbCwgcHVibGljIGdyaWQ6IERhdGFncmlkQ29tcG9uZW50KSB7XHJcbiAgICBjb25zdCBhcHBDb250ZXh0ID0gdGhpcy52aWV3TW9kZWwuZnJhbWVDb250ZXh0LmdldEZvcm1BcHBDb250ZXh0KCk7XHJcbiAgICBpZiAoYXBwQ29udGV4dCAmJiBhcHBDb250ZXh0Lmhhc093blByb3BlcnR5KCdtZXNzYWdlUGlwZScpKSB7XHJcbiAgICAgIGFwcENvbnRleHQubWVzc2FnZVBpcGUuc3Vic2NyaWJlKChtZXNzYWdlOiBhbnkpID0+IHtcclxuICAgICAgICBjb25zdCBtZXNzYWdlVHlwZSA9IG1lc3NhZ2UgJiYgbWVzc2FnZS50eXBlIHx8IG51bGw7XHJcbiAgICAgICAgLy8g5p+l6K+i5LqL5Lu2XHJcbiAgICAgICAgaWYgKG1lc3NhZ2VUeXBlID09PSAncXVlcnknKSB7XHJcbiAgICAgICAgICBpZiAodGhpcy5yZW1vdGVTdW1tYXJ5Q29tbWFuZCAmJiB0aGlzLmdyaWQuZm9vdGVyRGF0YUZyb20gPT09ICdzZXJ2ZXInKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhdGhzID0gdGhpcy5yZW1vdGVTdW1tYXJ5Q29tbWFuZC5zcGxpdCgnLicpO1xyXG4gICAgICAgICAgICBsZXQgZnVuYyA9IG51bGw7XHJcbiAgICAgICAgICAgIHBhdGhzLmZvckVhY2gocGF0aCA9PiB7XHJcbiAgICAgICAgICAgICAgZnVuYyA9IGZ1bmMgJiYgZnVuY1twYXRoXSB8fCB0aGlzW3BhdGhdO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmdW5jID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgZnVuYygpLnN1YnNjcmliZShyZXN1bHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ncmlkLmZvb3RlckRhdGEgPSByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiDmiafooYzlkb3ku6RcclxuICAgKiBAcGFyYW0gY29tbWFuZE5hbWUg5ZG95Luk5ZCN56ewXHJcbiAgICogQHBhcmFtIGZyYW1lSWQgZnJhbWVJZFxyXG4gICAqL1xyXG4gIHByaXZhdGUgZXhlY3V0ZShjb21tYW5kTmFtZTogc3RyaW5nLCBmcmFtZUlkPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGlmICghY29tbWFuZE5hbWUgfHwgY29tbWFuZE5hbWUgPT09ICcnIHx8IGNvbW1hbmROYW1lID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBsZXQgdmlld01vZGVsID0gdGhpcy52aWV3TW9kZWw7XHJcbiAgICBpZiAoZnJhbWVJZCkge1xyXG4gICAgICBjb25zdCB0YXJnZXRDb250ZXh0ID0gdmlld01vZGVsLmZyYW1lQ29udGV4dC5hcHBDb250ZXh0LmZyYW1lQ29udGV4dE1hbmFnZXIuZ2V0RnJhbWVDb250ZXh0QnlJZChmcmFtZUlkKTtcclxuICAgICAgdmlld01vZGVsID0gdGFyZ2V0Q29udGV4dC52aWV3TW9kZWw7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmlld01vZGVsW2NvbW1hbmROYW1lXSgpO1xyXG4gIH1cclxuXHJcbn1cclxuIl19