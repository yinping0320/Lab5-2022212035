import { Directive, HostListener, EventEmitter, Output } from '@angular/core';
import { Subject } from 'rxjs';
import { BindingData, ChangeType, ViewModel, DataTypeInfo, EntityPathConverter, RunMode, ComponentType, ExpressionUtil, ENABLE_EDIT_STATE_FILTER_SORTING } from '@farris/devkit';
import { DatagridComponent } from '@farris/ui-datagrid';
import { debounceTime, finalize } from 'rxjs/operators';
// tslint:disable: max-line-length
/*
 * 使用绑定数据指令
 */
export class FarrisDatagridUseBindingDataDirective {
    // private renderGridDebounce;
    constructor(bindingData, viewModel, grid) {
        this.bindingData = bindingData;
        this.viewModel = viewModel;
        this.grid = grid;
        // 排序字段
        this.sortFields = null;
        // 排序方向
        this.sortDirections = null;
        /**
         * 是否已排序
         */
        this.hasSorted = false;
        /**
         * 过滤条件
         */
        this.filters = null;
        /**
         * 渲染grid
         */
        this.renderGridSubject = new Subject();
        this.enableFilterSorting = false;
        /**
         * 选中行切换事件
         */
        this.selectedRowChange = new EventEmitter();
        this.setChecks([]);
        this.enableFilterSorting = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.injector.get(ENABLE_EDIT_STATE_FILTER_SORTING, false) || false;
        this.registerEvent();
    }
    get props() {
        return this._PROPS;
    }
    set props(value) {
        this._PROPS = value;
    }
    // #region Ng Event
    ngOnInit() {
        const { pageSize = 0 } = this.getPagingInfo() || {};
        if (pageSize !== 0) {
            // 启用分页
            if ((!this.grid.pageList || this.grid.pageList.length < 1) && typeof this.grid['setPageList'] === 'function') {
                this.grid['setPageList']([pageSize, pageSize * 2, pageSize * 3, pageSize * 4]);
            }
        }
        this.setComponentRef();
        this.bindData();
        window.setTimeout(() => {
            this.updateSelectedRow();
        }, 0);
        this.registerBindingDataChangeEvent();
        this.renderGridSubject.pipe(debounceTime(500)).subscribe((change) => {
            if (!this.viewModel || !this.viewModel.frameContext || this.viewModel.frameContext.isDisposed) {
                return;
            }
            this.bindData(change);
            /*if (!this.renderGridDebounce) {
              this.renderGridDebounce = this.debounce((change) => {
                this.bindData(change);
              }, 500);
            }
            this.renderGridDebounce(change);*/
        });
        if (this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.frameComponent) {
            this.viewModel.frameContext.frameComponent.componentType = ComponentType.farrisDataGridComponent;
        }
    }
    ngOnChanges(changes) {
        this.bindData();
    }
    // #endregion
    /**
     * 主键
     */
    get primaryKey() {
        return this.bindingList.primaryKey;
    }
    /**
     * 获取绑定数据
     */
    get bindingList() {
        // 根实体
        if (this.viewModel.bindingPath === '/' || !this.viewModel.bindingPath) {
            return this.bindingData.list;
        }
        // 子实体
        let bindingPath = this.viewModel.bindingPath.substr(1);
        bindingPath = bindingPath[0].toLowerCase() + bindingPath.substring(1, bindingPath.length);
        const paths = bindingPath.split('/');
        const filteredPaths = paths.filter((part) => {
            return part !== '';
        });
        return this.bindingData.getValue(filteredPaths);
    }
    /**
     * 设置组件引用
     */
    setComponentRef() {
        const appContext = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.getFormAppContext();
        const frameId = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.frameId;
        const id = this.grid && this.grid.id;
        // 如果frameId不存在或farris grid没有id属性，说明不符合使用场景
        if (!frameId || !id) {
            return;
        }
        const map = appContext && appContext.componentRefs && appContext.componentRefs.get(frameId) || new Map();
        appContext && appContext.componentRefs && appContext.componentRefs.set(frameId, map.set(id, this.grid));
    }
    /**
     * 获取分页信息
     */
    getPagingInfo() {
        const bindingPath = this.viewModel.bindingPath;
        const bindingData = this.viewModel.bindingData;
        const pagingInfo = bindingData && bindingData.pagingInfo || {};
        if (bindingPath === '/') {
            return pagingInfo;
        }
        else {
            const bindingPaths = bindingPath.substr(1).split('/').filter((item) => !!item && item.length > 0);
            // 从表及从从表分页和数据是关联的，因为不同的从表行有不同的从从表数据，分页信息的结构为nodeCode_parentId:{分页信息}且分页信息是平级的
            // {pagination:{a_pid:{pageSize:2,pageIndex:1},b_pid:{pageSize:2,pageIndex:1}}}
            // 取出当前路径下实体的nodeCode
            let nodeCode = bindingPaths[bindingPaths.length - 1];
            nodeCode = nodeCode.substr(0, nodeCode.length - 1);
            // 获取当前实体上级的主键
            // const result = pagingInfo[nodeCode] || {};
            // if (result.hasOwnProperty('totalCount')) {
            //   result.total = result.totalCount;
            // }
            // return result;
            const paths = bindingPaths.slice(0, bindingPaths.length - 1);
            const bindingList = bindingData.getValue(paths);
            const { pageSize = 0 } = pagingInfo[`${nodeCode}`] || {};
            // 上级表有数据
            if (bindingList && bindingList.currentId) {
                const key = `${nodeCode}_${bindingList.currentId}`;
                // const key = nodeCode;
                const result = pagingInfo[key] || {};
                if (result.hasOwnProperty('totalCount')) {
                    result.total = result.totalCount;
                }
                // 上级表虽然有数据，但上级表当前行的下级表可能没有数据，这就导致获取不到分页信息，所以需要在返回前对结果进行处理，如果没有分页信息的话起码应该返回分页大小及当前页码
                if (Object.keys(result).length < 1) {
                    result.pageIndex = 1;
                    result.pageSize = pageSize;
                }
                return result;
            }
            else {
                // 上级表没有数据，此时需要获取当前表的分页信息，如分页大小。当前页默认为1即可。
                return { pageIndex: 1, pageSize };
            }
        }
    }
    // #region Input
    /**
     * 组件是否需要更新
     * @param props 当前属性
     * @param nextProps 新属性
     * @param change 变更
     */
    shouldComponentUpdate(change, data) {
        const props = this.buildProps(data);
        if (this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.appContext && this.viewModel.frameContext.appContext.runMode === RunMode.highSpeed && change) {
            if (change.type === ChangeType.Load || change.type === ChangeType.Remove || change.type === ChangeType.PaginationInfoChange) {
                return { result: true, props };
            }
        }
        const gridProps = this.buildGridProps();
        if (JSON.stringify(props) === JSON.stringify(gridProps)) {
            return { result: false };
        }
        return { result: true, props };
    }
    registerEvent() {
        // 排序事件
        this.grid && this.grid.columnSorted && this.grid.columnSorted.subscribe((event) => {
            const isRemoteSort = this.grid.remoteSort;
            // 本地排序
            if (!isRemoteSort) {
                this.sortFields = this.grid.sortName;
                this.sortDirections = this.grid.sortOrder;
                this.sortBindingList();
                // this.props = this.buildProps();
            }
            else {
                // 服务器端排序
                const groupField = this.grid && this.grid.groupField || null;
                let sortFields = this.grid.sortName && this.grid.sortName.split(',') || [];
                const sortDirection = this.grid.sortOrder && this.grid.sortOrder.split(',') || [];
                if (groupField) {
                    if (!sortFields.includes(groupField)) {
                        sortFields.splice(0, 0, groupField);
                        sortDirection.splice(0, 0, 'asc');
                    }
                }
                // 获取当前entity上所有object属性
                const entityType = this.viewModel && this.viewModel.frameContext.repository.entityType || null;
                if (sortFields.length > 0) {
                    if (entityType) {
                        const dataTypeInfo = new DataTypeInfo(entityType);
                        sortFields = sortFields.map(field => {
                            //if (field && field.indexOf('.') !== -1) {
                            const paths = field.split('.');
                            const propInfo = dataTypeInfo.getPropInfoByPath(paths);
                            const originalField = propInfo && propInfo.metadataInfo['path'] || null;
                            return originalField;
                            //}
                            //return field;
                        });
                    }
                }
                // 遍历属性，根据datafield转换为originalDataField
                const fields = sortFields.join(',');
                const directions = sortDirection.join(',') || 'asc';
                const frameContext = this.viewModel && this.viewModel.frameContext || null;
                if (frameContext) {
                    frameContext.repository.sortConditionManager.setConditions(this.viewModel.bindingPath, fields, directions);
                }
            }
        });
        // 过滤事件
        this.grid && this.grid.filterChanged && this.grid.filterChanged.subscribe((event) => {
            this.filters = event;
            if (!this.grid.remoteFilter) {
                if (this.bindingList.length > 0 && !this.bindingList.currentId) {
                    const id = this.bindingList.getIdByIndex(0);
                    this.bindingList.setCurrentId(id);
                }
                this.bindingList.filter(this.filters);
                this.bindData();
            }
        });
        this.viewModel.frameContext.appContext.messagePipe.subscribe((message) => {
            if (message && message === 'CLEAR_GRID_CONDITION' && this.filters && Object.keys(this.filters).length > 0) {
                this.filters = {};
                this.bindData();
            }
        });
    }
    /**
     * 对bindingList排序
     * @param change change
     */
    sortBindingList(change) {
        // groupField可能有多个，以逗号分隔的字符串
        const groupField = this.grid && this.grid.groupField || null;
        if (groupField) {
            const arrSortFields = this.sortFields && this.sortFields.split(',') || [];
            const groupFields = groupField.split(',').reverse();
            groupFields.forEach((field) => {
                if (!arrSortFields.includes(field)) {
                    arrSortFields.splice(0, 0, field);
                    const arrSortDirection = this.sortDirections && this.sortDirections.split(',') || [];
                    arrSortDirection.splice(0, 0, 'asc');
                    this.sortFields = arrSortFields.join(',');
                    this.sortDirections = arrSortDirection.join(',') || 'asc';
                }
            });
        }
        this.bindingList.sortBy(this.sortFields, this.sortDirections);
        this.bindData(change);
    }
    // #endregion
    // #region 数据绑定部分
    /**
     * 更新数据
     * @param change? 变更
     */
    bindData(change) {
        const isRemoteFilter = this.grid && this.grid.remoteFilter || false;
        // 先执行排序
        const shouldSort = this.shouldSort(change);
        if (shouldSort) {
            this.hasSorted = true;
            this.sortBindingList(change);
            return;
        }
        this.hasSorted = false;
        // 新增数据时清空表格筛选条件
        if ((this.grid.editable === true || change && change.type === ChangeType.Append) && this.filters && Object.keys(this.filters).length > 0 && !isRemoteFilter) {
            if (!this.viewModel.frameContext.appContext.enableGridHeaderWhenEditing && !this.enableFilterSorting) {
                this.filters = {};
                this.grid.clearCondition();
            }
        }
        const shouldFiltering = this.shouldFiltering(change);
        if (shouldFiltering) {
            this.bindingList.filter(this.filters);
        }
        // 再toJSON
        const data = this.bindingList.toJSON();
        // if (this.filters && Object.keys(this.filters).length > 0 && !isRemoteFilter) {
        //   // data = this.grid.clientFilterService.executeFilter(data, this.filters);
        // }
        if (this.filters && Object.keys(this.filters).length > 0 && !isRemoteFilter && (!change || change && change.type !== ChangeType.SelectionChanged && change.type !== ChangeType.GlobalSelectionChanged)) {
            if (data && data.length > 0) {
                // 判断当前行是否在过滤后的数据中
                const row = data.find((item) => item[this.bindingList.primaryKey] === this.bindingList.currentId);
                if (!row) {
                    const firstRowId = data[0][this.bindingList.primaryKey];
                    this.bindingList.setCurrentId(firstRowId, true, true);
                }
            }
            else {
                // 本地过滤完之后没有数据了
                // this.bindingList.currentId = null;
                if (this.bindingList.currentId) {
                    this.bindingList.setCurrentId(null, true, true, true);
                }
                // 单选时清空ids
                if (!this.grid.multiSelect) {
                    this.setChecks([]);
                }
            }
        }
        const result = this.shouldComponentUpdate(change, data);
        if (!result.result) {
            return;
        }
        // const nextProps = this.buildProps(result);
        this.renderGrid(result.props);
        this.props = JSON.parse(JSON.stringify(result.props));
    }
    /**
     * 是否应该过滤
     * @param change - change
     * @returns {boolean}
     */
    shouldFiltering(change) {
        const isRemoteFilter = this.grid && this.grid.remoteFilter || false;
        // 启用远端过滤时不需要本地过滤
        if (isRemoteFilter === true) {
            return false;
        }
        // 没有过滤条件时不需要执行过滤
        if (!this.filters || Object.keys(this.filters).length < 1) {
            return false;
        }
        if (change) {
            return change.type === ChangeType.Load;
        }
        return !this.grid.editable;
    }
    shouldSort(change) {
        // this.sortFields && !this.grid.editable && change && (change.type === 'Load' || change.type === 'SelectionChanged')
        if (!this.sortFields || Object.keys(this.sortFields).length < 1) {
            return false;
        }
        if (this.hasSorted) {
            return false;
        }
        if (change) {
            return change.type === 'Load' || change.type === 'SelectionChanged';
        }
        return this.grid.editable;
    }
    /**
     * 渲染grid
     * @param props 属性
     */
    renderGrid(props) {
        const { pageIndex, pageSize, total, pagination, data } = props;
        const virtualizedLoad = this.grid.virtualizedAsyncLoad || false;
        this.grid.total = total;
        this.grid.pageSize = pageSize;
        this.grid.pageIndex = pageIndex;
        this.grid.pagination = pagination;
        this.grid.controlPaginationState = false;
        // this.endCellEdit();
        if (pageSize === 0) {
            this.grid.pagination = false;
            this.grid.pageIndex = 1;
            // 修复不分页时grid启用分组仍会重新邦数的问题
            // this.grid.pageSize = total;
        }
        if (virtualizedLoad) {
            this.grid.loadVirtualData({
                items: data,
                pageIndex,
                pageSize,
                total
            });
        }
        else {
            this.grid.loadData(data);
        }
    }
    /**
     * 构造表格数据属性
     */
    buildProps(datas) {
        let data;
        if (typeof (datas) !== 'undefined') {
            data = datas;
        }
        else {
            data = this.bindingList.toJSON();
        }
        // let skip = 0;
        let { pageIndex = 1, pageSize = 0 } = this.getPagingInfo() || {};
        let { total = 0 } = this.getPagingInfo() || {};
        // if (pageIndex > 0) {
        //   skip = (pageIndex - 1) * pageSize;
        // }
        if (pageSize === 0 && total === 0) {
            total = data.length;
        }
        return { data, pageIndex, pageSize, total, pagination: pageSize !== 0 };
    }
    /**
     * 计算grid状态
     */
    buildGridProps() {
        const data = this.grid.data || [];
        let skip = 0;
        const { pageIndex = 1, pageSize = 0 } = { pageIndex: this.grid.pageIndex, pageSize: this.grid.pageSize };
        let total = this.grid.total || 0;
        if (pageIndex > 0) {
            skip = (pageIndex - 1) * pageSize;
        }
        if (pageSize === 0 && total === 0) {
            total = data.length;
        }
        return { data, pageIndex, pageSize, total, pagination: this.grid.pagination };
    }
    /**
     * 数据源发生变更
     * @param change 变更
     */
    onBindingDataChange(change) {
        this.updateDataSource(change);
        this.updateSelectedRow(change);
        // this.updateGrid(change);
        // 不清除勾选行，需要保留勾选状态
        // this.clearCheckedRows(change);
        this.endCellEdit(change);
        // 更新勾选行数据
        this.updateCheckedRows(change);
        this.updateData(change);
    }
    /**
     * 更新数据
     */
    updateDataSource(change) {
        if (change && change.type === ChangeType.ValueChanged) {
            // 计算变更路径中表名及字段名
            const paths = change.path;
            try {
                const entityPath = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.viewModel.frameContext.repository.entityTypeInfo);
                if (this.viewModel.bindingPath === '/' + entityPath.join('/')) {
                    const propertyNames = paths.slice(entityPath.length);
                    if (change.id && this.grid && change.path && this.viewModel.frameContext.appContext.runMode !== RunMode.highSpeed && propertyNames && propertyNames.length > 0) {
                        this.grid.updateRow(change.id, { [propertyNames.join('.')]: change.value });
                    }
                }
            }
            catch (error) {
                console.warn(error);
            }
            this.renderGridSubject.next(change);
        }
        else if (change && (change.type === ChangeType.SelectionChanged || change.type === ChangeType.GlobalSelectionChanged)) {
            if (this.bindingList.currentId === (this.grid.selectedRow && this.grid.selectedRow.id) && this.grid.total > 0) {
            }
            else {
                this.bindData(change);
            }
        }
        else {
            this.bindData(change);
        }
    }
    // private endCellEdit() {
    //   const isEditing = this.grid.isEditing();
    //   if (isEditing) {
    //     this.grid.endCellEdit();
    //   }
    // }
    endCellEdit(change) {
        const isEditing = this.grid.isEditing();
        if (change.type === ChangeType.Load && isEditing) {
            this.grid.endCellEdit();
        }
    }
    /**
     * 设置grid当前选择行
     * @param change 变更
     */
    updateSelectedRow(change) {
        if (!this.bindingList || !this.bindingList.currentId) {
            return;
        }
        // 页码切换时不执行当前行切换
        if (change && change.type === ChangeType.PaginationInfoChange) {
            return;
        }
        if (this.viewModel && this.viewModel.frameContext.bindingData.rowSelectedEventSuspend === true) {
            return;
        }
        const { id: gridSelectedRowId = null } = this.grid.selectedRow || {};
        const currentId = this.bindingList.currentId;
        // grid当前行与bingingList当前行一致，无须切换
        if (gridSelectedRowId === currentId) {
            const isMatch = change && (change.path.toString() === this.viewModel.bindingPath.split('/').filter(p => p).toString());
            if (change && change.type === ChangeType.Load && isMatch) {
                this.grid.clearSelections();
                this.grid.selectRow(currentId, true, true);
            }
            return;
        }
        this.selectGridRow(this.bindingList.currentId);
    }
    /**
     * 注册bindingdata变化事件
     */
    registerBindingDataChangeEvent() {
        this.bindingDataChangeEvent = this.bindingData.changes.subscribe((change) => {
            this.onBindingDataChange(change);
        });
        this.viewModel.frameContext.appContext.messagePipe.subscribe(message => {
            if (message === 'bindData') {
                this.bindData();
            }
        });
    }
    /**
     * 取消bindingdata变化订阅
     */
    unRegisterBindingDataChangeEvent() {
        if (this.bindingDataChangeEvent && typeof (this.bindingDataChangeEvent.unsubscribe) === 'function') {
            this.bindingDataChangeEvent.unsubscribe();
        }
    }
    /**
     * 触发页码切换事件
     * @description 本方法适用场景仅为父级grid数据重新load，需要触发该grid重新取数使用。其他场景请勿使用
     * @TODO: 待重构，控制下级数据加载应该依赖表格的行切换事件，临时这样处理，后续提供LoadChildren事件
     */
    updateData(change) {
        if (!(change && (change.type === ChangeType.SelectionChanged || change.type === ChangeType.Load))) {
            return;
        }
        const bindingPath = this.viewModel.bindingPath;
        const eventBindingPath = '/' + change.path.join('/');
        const isRetrieve = this.viewModel.frameContext.appContext.params.get('retrieveing') || false;
        if (change.path.length < 1 || bindingPath === '/' || bindingPath === eventBindingPath || !bindingPath.startsWith(eventBindingPath)) {
            return;
        }
        // retrieve时会自动带回从表第一页及从表第一行的从从表数据，所以不需要再去单独请求
        if (isRetrieve) {
            return;
        }
        const fullPaths = EntityPathConverter.toEntityPathArray(this.viewModel.bindingPath, this.bindingData);
        const paths = fullPaths.slice(0, fullPaths.length - 1);
        const parent = this.bindingList.parent;
        const parentId = parent && parent[parent.primaryKey];
        // 上级表没有数据
        if (!parentId) {
            return;
        }
        // 获取nodecode
        const bindingPaths = this.viewModel.bindingPath.split('/').filter(item => item);
        let nodeCode = bindingPaths[bindingPaths.length - 1];
        nodeCode = nodeCode.substr(0, nodeCode.length - 1);
        // const configPath = `/${nodeCode}_${parentId}`;
        const configPath = `/${nodeCode}`;
        let { pageIndex = 1 } = this.viewModel.frameContext.repository.entityCollection.getPaginationConfigByPath(configPath) || {};
        const { pageSize = 0 } = this.viewModel.frameContext.repository.entityCollection.getPaginationConfigByPath(configPath) || {};
        const parentNodeCode = change.path[change.path.length - 1];
        const parentConfigPath = '/' + parentNodeCode.substring(0, parentNodeCode.length - 1);
        const { pageSize: parentPageSize = 0 } = this.viewModel.frameContext.repository.entityCollection.getPaginationConfigByPath(parentConfigPath) || {};
        const isQueryChild = this.viewModel.frameContext.appContext.params.get('queryChild') || false;
        if (isQueryChild) {
            // this.viewModel.frameContext.appContext.params.delete('queryChild');
            pageIndex = 1;
        }
        // 当上级表切换行时
        if (parentPageSize + pageSize !== 0) {
            this.viewModel.frameContext.appContext.params.set('forceQueryChild', true);
            this.viewModel.frameContext.repository.queryChild(paths, pageIndex, pageSize).pipe(finalize(() => this.viewModel.frameContext.appContext.params.delete('forceQueryChild'))).subscribe();
        }
    }
    ngOnDestroy() {
        this.unRegisterBindingDataChangeEvent();
    }
    // #endregion
    // #region 事件发射器
    /**
     * 发射选中行切换事件
     * @description 统一单选模式和多选模式下的行切换事件
     */
    fireSelectedRowChange(selectedRowContext) {
        this.selectedRowChange.emit(selectedRowContext);
    }
    /**
     * 清空选定行
     * @param change 变更
     */
    clearCheckedRows(change) {
        if (change.type === ChangeType.Load && this.grid.multiSelect) {
            const isMatch = this.checkIfChangeMatchBindingPath(change);
            if (isMatch) {
                this.setChecks([]);
                if (typeof (this.grid.clearCheckeds) === 'function') {
                    this.grid.clearCheckeds();
                }
            }
        }
    }
    // #endregion
    // #region 通信
    /**
     * 设置BindingList的当前行
     * @param id 当前行内码
     */
    setSelectionIdToBindingData(id) {
        // 如果当前行不存在，则强制设置
        if (!id) {
            this.bindingList.currentId = id;
            if (!this.grid.multiSelect) {
                this.setChecks([]);
            }
            return;
        }
        if (this.bindingList.currentId !== id) {
            this.bindingList.setCurrentId(id, true);
        }
        // 单选模式下将当前行设置到ids
        if (!this.grid.multiSelect) {
            this.setChecks([id]);
        }
    }
    updateCheckedRows(changes) {
        if (changes.type === ChangeType.Load) {
            this.setCheckedRows();
        }
        else if (changes.type === ChangeType.ValueChanged) {
            const ids = this.getChecks();
            if (changes.id && ids.includes(changes.id)) {
                this.setCheckedRows();
            }
        }
    }
    /**
     * 设置选择行
     */
    setChecks(ids) {
        this.viewModel.uiState.setPropertyValue('ids', ids);
        this.setCheckedRows(ids);
    }
    /**
     * 获取勾选行id数组
     * @returns
     */
    getChecks() {
        return this.viewModel.uiState['ids'] || [];
    }
    /**
     * 更新勾选行数据
     */
    setCheckedRows(ids) {
        // 高速模式时不再设置rows
        // if (this.viewModel.frameContext.appContext.runMode === RunMode.highSpeed) {
        //   return;
        // }
        if (typeof ids === 'undefined') {
            ids = this.viewModel.uiState['ids'] || [];
        }
        if (!Array.isArray(ids) || ids.length < 1) {
            // 此时ids没有值，rows中也不应该有
            this.viewModel.uiState.setPropertyValue('rows', null);
            return;
        }
        let list = [];
        // TODO：rows中数据在高速模式和普通模式下多语字段的值表现不一致，高速模式下多语字段值为对象，普通模式为当前语言。暂不处理高速模式场景
        if (this.viewModel.frameContext.appContext.runMode === RunMode.highSpeed) {
            list = this.grid.data || [];
        }
        else {
            list = this.bindingList.toJSON({ ignoreMultiLangInput: true });
        }
        const rows = this.viewModel.uiState['rows'] || new Map();
        const result = new Map();
        ids.forEach((id) => {
            const item = list.find(item => item[this.primaryKey] === id);
            const otherPageItem = rows.get(id);
            if (item) {
                result.set(id, item);
            }
            else if (otherPageItem) {
                result.set(id, otherPageItem);
            }
        });
        this.viewModel.uiState.setPropertyValue('rows', result);
    }
    /**
     * 选中grid行
     * @param id id
     */
    selectGridRow(id) {
        this.grid.selectRow(id);
        this.grid.scrollToCurrentRow();
    }
    // #endregion
    // #region 事件处理器
    /**
     * 页码切换事件
     * @param event event
     */
    pageChangedHandler(event) {
        let { pageIndex, pageSize } = event;
        if (pageIndex < 1) {
            pageIndex = 1;
        }
        const skip = (pageIndex - 1) * pageSize;
        this.bindingData.setPagingInfo(skip, pageSize, this.bindingData.bindingPath);
    }
    /**
     * 行切换事件
     * @param event event
     */
    selectedRowChanged(event) {
        const { index, data } = event;
        const id = data[this.primaryKey];
        this.setSelectionIdToBindingData(id);
        this.fireSelectedRowChange(event);
    }
    /**
     * 取消行选择事件
     * @param event event
     */
    unSelected(event) {
        if (!event) {
            return;
        }
        const { data = {} } = event;
        const id = data[this.primaryKey];
        const currentId = this.bindingList.currentId;
        if (id === currentId) {
            this.setSelectionIdToBindingData(null);
        }
        // this.fireSelectedRowChange(event);
    }
    /**
     * 勾选行发生变化
     * @param event event
     */
    checkedChanged(event) {
        event = event || [];
        const ids = event.map(item => item.id);
        this.setChecks(ids);
    }
    /**
     * 分页大小变更事件
     * @param event event
     */
    pageSizeChanged(event) {
        const { pageIndex, pageSize } = event;
        const skip = 0; //(pageIndex - 1) * pageSize;
        // this.bindingList.setPaginationInfo(skip, pageSize);
        this.bindingData.setPagingInfo(skip, pageSize, this.bindingData.bindingPath);
    }
    /**
     * grid滚动加载数据
     * @param event event
     */
    scrollY(event) {
        const { pager: pageIndex, pageSize } = event;
        const skip = (pageIndex - 1) * pageSize;
        this.bindingData.setPagingInfo(skip, pageSize, this.bindingData.bindingPath);
    }
    filterChanged(event) {
        this.filters = event;
    }
    // #endregion
    checkIfChangeMatchBindingPath(change) {
        let isMatch = false;
        if (!change || !change.path) {
            return isMatch;
        }
        const changePathArray = change.path;
        if (!changePathArray) {
            return isMatch;
        }
        if (!(this.bindingData) && !(this.bindingData.bindingPath)) {
            return isMatch;
        }
        const bingdingPathArray = this.bindingData.bindingPath.split('/');
        if (bingdingPathArray.length <= 0) {
            return isMatch;
        }
        if (changePathArray.length === 0) { // 主表
            if (this.bindingData.bindingPath === '/') {
                isMatch = true;
            }
        }
        else if (change.path.length === 1) { // 主从表
            if (bingdingPathArray.length === 2 && bingdingPathArray[1] === change.path[0]) {
                isMatch = true;
            }
        }
        else if (change.path.length === 2) { // 主从从表
            if (bingdingPathArray.length === 3 && bingdingPathArray[1] === change.path[0] && bingdingPathArray[2] === change.path[1]) {
                isMatch = true;
            }
        }
        return isMatch;
    }
    debounce(callback, wait) {
        let timeoutId = null;
        return (...args) => {
            window.clearTimeout(timeoutId);
            timeoutId = window.setTimeout(() => {
                callback.apply(null, args);
            }, wait);
        };
    }
}
FarrisDatagridUseBindingDataDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farris-use-binding-data]'
            },] }
];
/** @nocollapse */
FarrisDatagridUseBindingDataDirective.ctorParameters = () => [
    { type: BindingData },
    { type: ViewModel },
    { type: DatagridComponent }
];
FarrisDatagridUseBindingDataDirective.propDecorators = {
    selectedRowChange: [{ type: Output }],
    pageChangedHandler: [{ type: HostListener, args: ['pageChanged', ['$event'],] }],
    selectedRowChanged: [{ type: HostListener, args: ['selectChanged', ['$event'],] }],
    unSelected: [{ type: HostListener, args: ['unSelect', ['$event'],] }],
    checkedChanged: [{ type: HostListener, args: ['checkedChange', ['$event'],] }],
    pageSizeChanged: [{ type: HostListener, args: ['pageSizeChanged', ['$event'],] }],
    scrollY: [{ type: HostListener, args: ['scrollYLoad', ['$event'],] }],
    filterChanged: [{ type: HostListener, args: ['filterChanged', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,