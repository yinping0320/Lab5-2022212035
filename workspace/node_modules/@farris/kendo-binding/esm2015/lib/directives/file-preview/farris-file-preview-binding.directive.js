import { Directive, Input, Injector, Optional, HostListener } from '@angular/core';
import { BindingData, BindingList, FrameContext, ChangeType } from '@farris/devkit';
import { FFilePreviewComponent, UploadAndPreviewComponent } from '@farris/extend-file-upload';
/**
 * 树表格绑定指令
 */
class FarrisFilePreviewBindingDirective {
    /**
     * 构造函数
     * @param previewComponent - 附件组件
     * @param frameContext - 控制器上下文
     * @param uploadAndPreviewComponent - 附件上传预览组件
     * @param injector - injector
     * @TODO: 该指令被用于不同的组件中，因此uploadAndPreviewComponent可能为null
     */
    constructor(previewComponent, frameContext, uploadAndPreviewComponent, injector) {
        this.previewComponent = previewComponent;
        this.frameContext = frameContext;
        this.uploadAndPreviewComponent = uploadAndPreviewComponent;
        this.injector = injector;
        /**
         * 未启用排序时默认按上传时间字段排序
         */
        this.DEFAULT_SORT_FIELD = 'createTime';
        /**
         * 启用排序时使用fileSortOrder做排序字段，与零代码的拖拽排序统一
         */
        this.SORT_FIELD_ON_SORTING = 'fileSortOrder';
    }
    /**
     * 绑定数据
     */
    get bindingData() {
        return this.frameContext.bindingData;
    }
    /**
     * 绑定数据列表
     */
    get bindingList() {
        return this.bindingData.getList();
    }
    /**
     * 排序字段
     * @description
     * 组件排序字段只有一个，不支持多个。
     * 如果启用了拖拽排序，则为fileSortOrder，否则使用默认的createTime
     */
    get orderField() {
        return this.uploadAndPreviewComponent && this.uploadAndPreviewComponent.enableOrder && this.uploadAndPreviewComponent.orderField || this.fileSortOrderKey && this.SORT_FIELD_ON_SORTING || this.DEFAULT_SORT_FIELD;
    }
    /**
     * 默认降序
     */
    get orderType() {
        return this.farrisOrderType ? this.farrisOrderType : this.orderField === this.DEFAULT_SORT_FIELD ? 'desc' : 'asc';
    }
    /**
     * 指令初始化
     */
    ngOnInit() {
        this.bindData();
        if (this.uploadAndPreviewComponent) {
            if (this.uploadAndPreviewComponent.enableOrder) {
                this.uploadAndPreviewComponent.orderField = this.SORT_FIELD_ON_SORTING;
            }
            // 禁用组件内置排序，控制器负责排序并将排序后的数据绑定到附件上传预览组件
            this.uploadAndPreviewComponent.enableSorting = false;
            this.uploadAndPreviewComponent.fSelectedEvent.subscribe((event) => {
                const primaryKey = this.bindingList.primaryKey;
                const id = event && event.originalData && event.originalData[primaryKey];
                if (id && id !== this.bindingList.currentId) {
                    this.bindingList.setCurrentId(id, true);
                }
            });
        }
        this.bindingData.changes.subscribe((change) => {
            // 因排序需要，值变化时也应进行数据绑定
            if (change.type === ChangeType.Load || change.type === ChangeType.Append || change.type === ChangeType.Remove || change.type === ChangeType.ValueChanged || change.type === ChangeType.SelectionChanged) {
                this.bindData(change);
                this.updateCurrentRow(change);
                this.updateChecks(change);
            }
        });
        this.setChecks([]);
    }
    /**
     * 指令输入变更
     * @param changes -变更
     */
    ngOnChanges(changes) {
    }
    shouldComponentUpdate(data) {
        return !(JSON.stringify(this.__DATA__) === JSON.stringify(data));
        // return !(this.__DATA__ && isEqual(this.__DATA__, data));
    }
    /**
     * 绑定数据
     * @param change -变更
     */
    bindData(change) {
        const bindingPath = this.frameContext.viewModel.bindingPath.split('/').filter(p => p).join('/');
        const eventPath = change && change.path && change.path.filter(p => p).join('/');
        // 行切换、删除、加载、新增数据、页码切换 场景
        if (change && [ChangeType.SelectionChanged, ChangeType.Remove, ChangeType.Load, ChangeType.Append].includes(change.type)) {
            // 非上级实体不重新绑定数据
            if (!bindingPath.startsWith(eventPath)) {
                return;
            }
            // 当前附件组件切换当前行不需要重新渲染
            if (change.type === ChangeType.SelectionChanged && bindingPath === eventPath) {
                return;
            }
        }
        // 非当前实体发生了值变化
        if (change && change.type === ChangeType.ValueChanged && !eventPath.startsWith(bindingPath)) {
            return;
        }
        const fileInfos = this.getFileInfos();
        if (!this.shouldComponentUpdate(fileInfos)) {
            return;
        }
        if (this.componentRef) {
            this.__DATA__ = fileInfos;
            this.componentRef.fileInfos = fileInfos;
            if (this.uploadAndPreviewComponent && fileInfos && fileInfos.length > 0) {
                const extendInfos = fileInfos.map((item) => item.originalData);
                this.uploadAndPreviewComponent.extendInfos = extendInfos;
            }
            this.changeCurrentRow(fileInfos, change);
        }
    }
    updateChecks(change) {
        if (!this.uploadAndPreviewComponent) {
            return;
        }
        const bindingPath = this.frameContext.viewModel.bindingPath.split('/').filter(p => p).join('/');
        const eventPath = change && change.path && change.path.filter(p => p).join('/');
        // 删除自身表时更新勾选记录
        if (change && change.type === ChangeType.Remove && eventPath === bindingPath) {
            const values = change.value || [];
            const ids = this.frameContext.uiState['ids'] || [];
            if (values.length > 0 && ids.length > 0) {
                values.forEach((id) => {
                    const index = ids.indexOf(id);
                    if (index !== -1) {
                        ids.splice(index, 1);
                    }
                });
            }
        }
        else if ((change.type === ChangeType.Remove || change.type === ChangeType.SelectionChanged) && bindingPath.startsWith(eventPath) && bindingPath !== eventPath) {
            //上级（上上级）表删除、上级（上上级）表切换当前行时更新勾选记录
            this.setChecks([]);
            // 清空组件勾选
            this.clearComponentChecks();
        }
        else if (change && change.type === ChangeType.Load && (bindingPath === eventPath || bindingPath.startsWith(eventPath) && bindingPath !== eventPath)) {
            // 当前附件组件数据重新加载 or 上级或上上级重新加载
            this.setChecks([]);
            // 清空组件勾选
            this.clearComponentChecks();
        }
    }
    /**
     * 主动更新当前行
     * @param data - 数据
     * @param change - 变更
     */
    changeCurrentRow(data, change) {
        if (!this.uploadAndPreviewComponent) {
            return;
        }
        const changePath = change && change.path.join('/');
        const paths = this.frameContext.viewModel.bindingPath.split('/').filter(p => p);
        const path = paths.join('/');
        const isParentSelectChange = path.startsWith(changePath) && change.type === ChangeType.SelectionChanged && path !== changePath;
        const isSelfRowDelete = change && change.type === ChangeType.Remove && path === changePath;
        if (data && data.length > 0 && change && (change.type === ChangeType.Load || isParentSelectChange || isSelfRowDelete)) {
            const primaryKey = this.bindingList.primaryKey;
            const id = data[0]['originalData'] && data[0]['originalData'][primaryKey];
            if (this.bindingList.currentId !== id) {
                setTimeout(() => {
                    this.bindingList.setCurrentId(id, true, true);
                }, 100);
            }
        }
    }
    /**
     * 为控件设置当前行
     * @param change - 控制器变更
     * @returns
     */
    updateCurrentRow(change) {
        if (!this.bindingList || !this.bindingList.currentId || !this.uploadAndPreviewComponent) {
            return;
        }
        if (change && change.type !== ChangeType.SelectionChanged && change.type !== ChangeType.Load && change.type !== ChangeType.Remove) {
            return;
        }
        const currentId = this.uploadAndPreviewComponent.previewCurrent;
        // 组件id和数据id进行转换
        const id = this.getValueByPath(this.bindingList.currentItem, this.fileIdKey);
        if (id === currentId) {
            return;
        }
        this.selectComponentRow(id);
    }
    /**
     * 获取附件信息列表
     */
    getFileInfos() {
        const listData = this.bindingList.toJSON();
        const fileInfos = [];
        listData.forEach((itemData) => {
            const fileInfo = this.convertToFileInfo(itemData);
            fileInfos.push(fileInfo);
        });
        // 排序
        if (this.orderField) {
            this.sort(fileInfos, this.orderField, this.orderType);
        }
        return fileInfos;
    }
    /**
     * 行数据转换为文件信息
     * @param itemData - 行数据
     * @returns
     */
    convertToFileInfo(itemData) {
        // const idKey = this.bindingList.primaryKey;
        // const id = this.getValueByPath(itemData, idKey);
        const fileId = this.getValueByPath(itemData, this.fileIdKey);
        const fileName = this.getValueByPath(itemData, this.fileNameKey);
        const fileSize = this.getValueByPath(itemData, this.fileSizeKey);
        const fileCreateTime = this.getValueByPath(itemData, this.fileCreateTimeKey);
        const fileInfo = {
            id: fileId,
            name: fileName,
            size: fileSize,
            createTime: fileCreateTime,
            originalData: itemData,
            extend: {
                metadataId: fileId
            }
        };
        if (this.extendFileInfo && Array.isArray(this.extendFileInfo) && this.extendFileInfo.length > 0) {
            this.extendFileInfo.forEach((item) => {
                fileInfo[item.key] = this.getValueByPath(itemData, item.path);
            });
        }
        if (this.fileSortOrderKey) {
            const fileSortOrder = this.getValueByPath(itemData, this.fileSortOrderKey);
            fileInfo[this.SORT_FIELD_ON_SORTING] = fileSortOrder;
        }
        return fileInfo;
    }
    /**
     * 设置控件的当前行
     * @param id 主键
     */
    selectComponentRow(id) {
        if (this.uploadAndPreviewComponent) {
            this.uploadAndPreviewComponent.previewCurrent = id;
        }
    }
    /**
     * 根据字段路径获取值
     * @param data - 数据源
     * @param path - 字段路径
     */
    getValueByPath(data, path) {
        const keys = path.split('.');
        let currentValue = data;
        keys.forEach((key) => {
            currentValue = currentValue && currentValue[key];
        });
        return currentValue;
    }
    getUdtPaths() {
        const paths = this.fileIdKey.split('.');
        paths.pop();
        return paths;
    }
    get fileSizeKey() {
        const basePaths = this.getUdtPaths();
        return basePaths.concat(['fileSize']).join('.');
    }
    get fileCreateTimeKey() {
        const basePaths = this.getUdtPaths();
        return basePaths.concat(['fileCreateTime']).join('.');
    }
    get componentRef() {
        return this.previewComponent || this.uploadAndPreviewComponent || null;
    }
    setChecks(ids) {
        this.frameContext.uiState.setPropertyValue('ids', ids);
    }
    /**
     * 清空组件勾选
     */
    clearComponentChecks() {
        if (this.uploadAndPreviewComponent) {
            this.uploadAndPreviewComponent.previewUpdateRefresh();
        }
    }
    sort(data, fields, directions) {
        if (!fields || fields.length < 1 || !directions || directions.length < 1) {
            throw new Error('sortBy:argument error');
        }
        // 默认升序
        const arrFields = typeof fields === 'string' ? fields.split(',') : fields || [];
        const arrDirections = typeof directions === 'string' ? directions.split(',') : directions || [];
        // 排序字段和排序方式应一致
        if (arrFields.length !== arrDirections.length || arrFields.length < 1) {
            throw new Error('sortBy:fields and directions not match');
        }
        // nage,age,total
        const comparator = (props, orders) => (item1, item2) => {
            return props.reduce((result, prop) => {
                if (result === 0) {
                    const order = ['asc'].includes(orders[props.indexOf(prop)]) ? 1 : -1;
                    const item1Value = this.getValue(item1, prop);
                    const item2Value = this.getValue(item2, prop);
                    if (item1Value === null || item1Value === undefined) {
                        return 1;
                    }
                    if (item2Value === null || item2Value === undefined) {
                        return -1;
                    }
                    if (typeof item1Value !== typeof item2Value) {
                        const localeCompareResult = String(item1Value).localeCompare(String(item2Value));
                        result = localeCompareResult * order;
                    }
                    else if (typeof item1Value === 'string' && typeof item2Value === 'string') {
                        const localeCompareResult = item1Value.localeCompare(item2Value);
                        result = localeCompareResult * order;
                    }
                    else {
                        if (item1Value > item2Value) {
                            result = order * 1;
                        }
                        if (item1Value < item2Value) {
                            result = order * -1;
                        }
                    }
                }
                return result;
            }, 0);
        };
        data.sort(comparator(arrFields, arrDirections));
    }
    getValue(target, propName) {
        if (target instanceof BindingList) {
            target = target.currentItem;
        }
        else if (target instanceof BindingData) {
            target = target.list.currentItem;
        }
        let result = null;
        if (propName.indexOf('.') === -1) {
            result = target[propName];
        }
        else {
            const props = propName.split('.');
            for (const prop of props) {
                target = result = this.getValue(target, prop);
            }
        }
        return result;
    }
    /**
     * 勾选变化事件
     * @param event
     */
    checkedChanged(event) {
        const primaryKey = this.bindingList.primaryKey;
        const ids = event && event.map((item) => item && item.originalData && item.originalData[primaryKey] || '').filter(p => p) || [];
        this.setChecks(ids);
    }
    /**
     * 行切换事件
     * @param event
     */
    selectChanged(event) {
    }
}
FarrisFilePreviewBindingDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farrisFilePreviewBinding]'
            },] }
];
/** @nocollapse */
FarrisFilePreviewBindingDirective.ctorParameters = () => [
    { type: FFilePreviewComponent, decorators: [{ type: Optional }] },
    { type: FrameContext },
    { type: UploadAndPreviewComponent, decorators: [{ type: Optional }] },
    { type: Injector, decorators: [{ type: Optional }] }
];
FarrisFilePreviewBindingDirective.propDecorators = {
    extendFileInfo: [{ type: Input, args: ['extendFileInfo',] }],
    farrisOrderType: [{ type: Input, args: ['farrisOrderType',] }],
    fileIdKey: [{ type: Input, args: ['farrisFileIdKey',] }],
    fileSortOrderKey: [{ type: Input, args: ['farrisFileSortOrderKey',] }],
    fileNameKey: [{ type: Input, args: ['farrisFileNameKey',] }],
    checkedChanged: [{ type: HostListener, args: ['fPreviewMultiSelectedEvent', ['$event'],] }],
    selectChanged: [{ type: HostListener, args: ['fSelectedEvent', ['$event'],] }]
};
export { FarrisFilePreviewBindingDirective };
//# sourceMappingURL=data:application/json;base64,