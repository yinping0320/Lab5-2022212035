import { Directive, Input, Self, Host, Optional, Output, EventEmitter } from '@angular/core';
import { MultiSelectComponent } from '@farris/ui-multi-select';
import { ViewModel } from '@farris/devkit';
export class MultiSelectDataMappingDirective {
    constructor(vm, multiSelectComponent) {
        this.vm = vm;
        this.multiSelectComponent = multiSelectComponent;
        this.selectedIdChanged = new EventEmitter();
        this.vm.uiState.changes.subscribe(data => {
            this.selectedId = data.value;
        });
    }
    ngOnInit() {
        this.multiSelectComponent.dataSource = [];
        if (Array.isArray(this.dataSource)) {
            this.multiSelectComponent.dataSource = this.dataSource;
            this.originalDataSource = this.dataSource;
        }
        else if (this.dataSource && this.dataSource.changes) {
            this.dataSource.changes.subscribe((data) => {
                if (data.type === 'Load') {
                    this.originalDataSource = data.value;
                    if (this.multiSelectComponent.isTree()) {
                        if (this.fjmField) {
                            // 分级码加载树结构
                            this.multiSelectComponent.dataSource = this.plainToTree(data.value, this.fjmField, 1);
                        }
                        else if (this.fjdField) {
                            // 父节点加载树结构
                            this.multiSelectComponent.dataSource = this.buildTreeNodesByFjd(data.value, this.fjdField);
                        }
                        this.multiSelectComponent.selections = this.getTreeSelectionsById(this.selectedId, this.originalDataSource);
                    }
                    else {
                        this.multiSelectComponent.dataSource = data.value;
                        this.multiSelectComponent.selections = this.getListSelectionsById(this.selectedId, this.multiSelectComponent.dataSource);
                    }
                }
            });
        }
        this.selectIdBindingToUIStateField();
    }
    selectIdBindingToUIStateField() {
        if (this.multiSelectComponent && this.multiSelectComponent.selectedIdChange) {
            this.multiSelectComponent.selectedIdChange.subscribe(data => {
                this.selectedIdChanged.emit(data);
            });
        }
    }
    /**
     *
     * @param data 需要格式化的数据
     */
    formatDataSource(data, field) {
        if (!data || !data.length) {
            return [];
        }
        return data.map(item => {
            const n = item['toJSON'] ? item.toJSON() : item;
            return {
                data: Object.assign(Object.assign({}, n), {
                    [`${this.idField}`]: item[this.idField],
                    [`${this.textField}`]: item[this.textField],
                    [`${this.valueField}`]: item[this.valueField],
                    [`${field}`]: item[field]
                }),
                children: []
            };
        });
    }
    /**
     * 把平行结构的数据转换成树形结构
     * @param plainSource
     * @param field
     * @param layer
     */
    plainToTree(plainSource, field, layer) {
        const treeSource = this.formatDataSource(plainSource, field);
        if (!treeSource.length) {
            return [];
        }
        if (!treeSource[0]['data'][field]) {
            return [];
        }
        const parents = treeSource.filter(item => {
            return item['data'][field]['layer'] === layer;
        });
        this.recursive(parents, treeSource, field, 1);
        return parents;
    }
    /**
     * 递归遍历树形结构
     * @param parents
     * @param treeSource
     * @param field
     * @param layer
     */
    recursive(parents, treeSource, field, layer) {
        parents.forEach(parent => {
            const parentPath = parent['data'][field]['path'];
            const parentLayer = parent['data'][field]['layer'];
            if (parent['data'][field]['isDetail'] === false) {
                treeSource.forEach(item => {
                    if (item && item['data'] && item['data'][field] && item['data'][field]['path']) {
                        const itemPath = item['data'][field]['path'];
                        const itemLayer = item['data'][field]['layer'];
                        let targetPath;
                        if (itemPath && itemPath.length > parentPath.length) {
                            targetPath = itemPath.substr(0, Number(layer) * 4);
                        }
                        if (parentPath === targetPath && parentLayer === itemLayer - 1) {
                            parent['children'].push(item);
                        }
                        if (item['data'][field]['isDetail'] === false && parentPath === targetPath) {
                            this.recursive([item], treeSource, field, Number(layer) + 1);
                        }
                    }
                });
            }
        });
    }
    /**
       *
       * @param ids 选中数据的id
       * @param dataSource 原始数据
       */
    getListSelectionsById(ids, dataSource) {
        let result = [];
        const _this = this;
        if ((typeof ids === 'string' && !!ids) || typeof ids === 'number') {
            const reusltObj = dataSource.find(item => {
                return item && item[_this.idField] === ids;
            });
            if (reusltObj) {
                result.push(reusltObj);
            }
        }
        else if (Array.isArray(ids)) {
            if (dataSource) {
                ids.forEach(id => {
                    const item = dataSource.find(item => item && item[_this.idField] === id);
                    if (item) {
                        result.push(item);
                    }
                });
                // dataSource.forEach(item => {
                //   ids.forEach(id => {
                //     if (item[_this.idField] === id) {
                //       result.push(item);
                //     }
                //   })
                // })
            }
            else {
                result = [];
            }
        }
        else {
            result = [];
        }
        return result;
    }
    /**
     *
     * @param ids 选中数据的id
     * @param dataSource 原始数据
     */
    getTreeSelectionsById(ids, dataSource) {
        let result = [];
        const _this = this;
        if ((typeof ids === 'string' && !!ids) || typeof ids === 'number') {
            const reusltObj = dataSource.find(item => {
                return item && item[_this.idField] === ids;
            });
            if (reusltObj) {
                result.push(reusltObj);
            }
        }
        else if (Array.isArray(ids)) {
            if (dataSource) {
                ids.forEach(id => {
                    const item = dataSource.find(item => item && item[_this.idField] === id);
                    if (item) {
                        result.push(item);
                    }
                });
                // dataSource.forEach(item => {
                //   ids.forEach(id => {
                //     if (item.data[_this.idField] === id) {
                //       result.push(item.data);
                //     }
                //   })
                // })
            }
            else {
                result = [];
            }
        }
        else {
            result = [];
        }
        return result;
    }
    /**
     * 根据父节点初始化树结构
     * @param bindingObjects
     */
    buildTreeNodesByFjd(bindingObjects, field) {
        const treeData = this.formatDataSource(bindingObjects, field);
        treeData.forEach((item) => {
            const parent = treeData.find((ele) => item.data[field].parentElement === ele.data[this.idField]);
            if (parent) {
                parent.children.push(item);
            }
        });
        return treeData.filter((ele) => !ele.data[field].parentElement);
    }
}
MultiSelectDataMappingDirective.decorators = [
    { type: Directive, args: [{
                selector: '[multiSelectDataMapping]'
            },] }
];
/** @nocollapse */
MultiSelectDataMappingDirective.ctorParameters = () => [
    { type: ViewModel, decorators: [{ type: Optional }] },
    { type: MultiSelectComponent, decorators: [{ type: Host }, { type: Self }, { type: Optional }] }
];
MultiSelectDataMappingDirective.propDecorators = {
    dataSource: [{ type: Input }],
    idField: [{ type: Input }],
    textField: [{ type: Input }],
    valueField: [{ type: Input }],
    fjmField: [{ type: Input }],
    fjdField: [{ type: Input }],
    uiStateField: [{ type: Input }],
    selectedId: [{ type: Input }],
    selectedIdChanged: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,