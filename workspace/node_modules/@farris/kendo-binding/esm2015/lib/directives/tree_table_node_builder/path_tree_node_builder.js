// tslint:disable: no-string-literal
/**
 * 树节点构造器
 * @summary
 * 将BindingData中的数据集合转换成TreeTable节点集合
 */
class PathTreeNodeBuilder {
    /**
     * 构造函数
     */
    constructor(allNodesData, oldTreeNodes, primaryKey, hierarchyInfoKey, context) {
        this.levelGroup = {};
        /**
         * 等待展开的节点
         * @description 节点结构
         * ```
         * {id:'xxx',expanded:false}
         * ```
         */
        this.nodesWaitExpand = [];
        this.primaryKey = primaryKey;
        this.hierarchyInfoKey = hierarchyInfoKey;
        this.allNodes = [];
        this.allNodesData = allNodesData;
        this.context = context || {};
        this.nodesWaitExpand = [];
        this.nodesShouldExpand = context && context.nodesShouldExpand || [];
        this.frameContext = context && context.frameContext || null;
        this.addTreeLoadCompleteListener(this.onTreeLoadComplete.bind(this));
        this.initLevelGroup();
        this.allNodesMap = new Map();
        this.allOldNodesMap = new Map();
        this.buildNodesDataMap(oldTreeNodes);
    }
    /**
     * 展开至层级
     * @description -1为不展开
     */
    get expandLevel() {
        return this.context && this.context.hasOwnProperty('expandLevel') ? this.context['expandLevel'] : -1;
    }
    get component() {
        return this.context && this.context['component'];
    }
    get addTreeLoadCompleteListener() {
        return this.context && this.context['addTreeLoadCompleteListener'] || function (args) { };
    }
    updateTreeNode(allNodesData, data) {
        this.allNodesData = allNodesData;
        this.initLevelGroup();
        this.buildNodesDataMap(data);
    }
    build() {
        const tree = [];
        const childrenOf = {};
        const nodes = {};
        this.allNodesData.forEach(item => {
            const id = item.id;
            const parentId = this.getParentId(item);
            // item.parentId = parentId;
            // 展开新增节点的父节点
            const isNewNode = this.isNewNode(item);
            if (isNewNode === true) {
                this.expandParentNode(item);
            }
            // 构造树节点
            const node = this.buildNode(item);
            nodes[id] = node;
            childrenOf[id] = childrenOf[id] || [];
            node.children = childrenOf[id];
            this.allNodesMap.set(item[this.primaryKey], node);
            if (parentId) {
                if (nodes[parentId] && nodes[parentId].unstableState === true) {
                    nodes[parentId].expanded = true;
                    nodes[parentId].unstableState = false;
                }
                childrenOf[parentId] = childrenOf[parentId] || [];
                childrenOf[parentId].push(node);
            }
            else {
                if ((!node.children || node.children.length < 1) && node.expanded === true) {
                    node.unstableState = true;
                    node.expanded = false;
                }
                tree.push(node);
            }
        });
        return tree;
    }
    /**
     * 构造树节点
     */
    build1() {
        let minLayer;
        // 获取最顶级节点的layer
        this.allNodesData.forEach(node => {
            const hierarchyInfo = this.getHierarchyInfo(node);
            if (hierarchyInfo) {
                const layer = hierarchyInfo['layer'];
                if (!isNaN(layer)) {
                    if (minLayer === undefined) {
                        minLayer = layer;
                    }
                    else if (layer < minLayer) {
                        minLayer = layer;
                    }
                }
            }
        });
        const topLayer = minLayer - 1;
        this.buildNodes('', topLayer, this.allNodesData, this.allNodes);
        return this.allNodes;
    }
    /**
     * 构造树节点集合
     */
    buildNodes(fPath, fLayer, allNodesData, treeNodes) {
        const childNodesData = this.getChildNodesData(fPath, fLayer);
        childNodesData.forEach((nodeData) => {
            // 展开新增节点的父节点
            const isNewNode = this.isNewNode(nodeData);
            if (isNewNode === true) {
                this.expandParentNode(nodeData);
            }
            // 构造树节点
            const node = this.buildNode(nodeData);
            treeNodes.push(node);
            this.allNodesMap.set(nodeData[this.primaryKey], node);
            // 递归遍历下级节点
            const hierarchyInfo = this.getHierarchyInfo(nodeData); //nodeData[this.hierarchyInfoKey];
            const currentLayer = hierarchyInfo['layer'];
            const currentPath = hierarchyInfo['path'];
            this.buildNodes(currentPath, currentLayer, allNodesData, node.children);
        });
    }
    /**
     * 创建树节点
     */
    buildNode(nodeData) {
        const isLeaf = this.isLeaf(nodeData);
        // 获取节点的展开状态
        const shouldExpand = this.shouldExpand(nodeData);
        // 节点虽然应该展开，但可能是因为之前就是展开状态，所以应该检查节点之前的状态
        const originExpandStatus = this.isExpanded(nodeData);
        // 如果应该展开该节点，但是该节点之前有状态，那么该节点不应该再由程序展开。
        if (!originExpandStatus && shouldExpand) {
            this.expandNode(nodeData);
        }
        const paginationInfo = this.buildPaginationInfo(nodeData);
        const treeNode = {
            data: Object.assign({}, nodeData),
            children: [],
            expanded: shouldExpand,
            leaf: isLeaf
        };
        if (paginationInfo) {
            treeNode.pagination = paginationInfo;
        }
        return treeNode;
    }
    /**
     * 构造分页信息
     * @param nodeData nodeData
     * @returns
     */
    buildPaginationInfo(nodeData) {
        let result = null;
        if (this.frameContext) {
            const id = this.getPrimary(nodeData);
            // 获取分页信息
            const key = `_NODE_${id}_PAGINATION_INFO_`;
            const pagination = this.frameContext.params.get(key) || null;
            if (pagination && pagination.pageCount > 1) {
                result = {
                    pageIndex: pagination.pageIndex,
                    pageSize: pagination.pageSize,
                    total: pagination.totalCount
                };
            }
        }
        return result;
    }
    /**
     * 计算节点是否需要展开
     * @param nodeData nodeData
     */
    shouldExpand(nodeData) {
        const [layer, isLeaf] = [this.getNodeLayer(nodeData), this.isLeaf(nodeData)];
        // 永远不展开叶子节点
        if (isLeaf) {
            return false;
        }
        let expanded = this.isExpanded(nodeData);
        if (!expanded) {
            const id = this.getPrimary(nodeData);
            if (this.nodesWaitExpand.findIndex(node => node && node.id === id) > -1) {
                return false;
            }
            if (this.nodesShouldExpand.findIndex(nodeId => nodeId === id) > -1) {
                return true;
            }
            if (this.expandLevel === -1) {
                // -1 为不展开
                expanded = false;
            }
            else if (this.expandLevel === 0) {
                // 0 为全部展开
                expanded = true;
            }
            else {
                // 没有启用分层加载，通过展开层级确定是否展开该节点
                expanded = layer <= this.expandLevel;
                // 如果节点原本存在且节点没有展开则不展开
                const oldTreeNode = this.getOldNode(nodeData);
                if (oldTreeNode && !oldTreeNode.expanded) {
                    expanded = false;
                }
            }
        }
        return expanded;
    }
    /**
     * 展开树节点
     * @description 完全加载树使用展开属性在buildNode时已经展开，此函数的主要用于展开分级加载树
     * @param nodeData nodeData
     */
    expandNode(nodeData) {
        const [path, layer] = [this.getNodePath(nodeData), this.getNodeLayer(nodeData)];
        const childs = this.getChildNodesData(path, layer);
        // 当前节点不是叶子节点，但在节点数据中又找不到该节点的子节点，则认为树启用了分层加载
        if (!childs || childs.length < 1) {
            // 分层加载树需要通过触发节点展开事件才加载下层，目前树上还不存在该节点，无法直接展开，需要等树加载完之后再展开
            const id = this.getPrimary(nodeData);
            if (this.nodesWaitExpand.findIndex(node => node && node.id === id) < 0) {
                this.nodesWaitExpand.push({ id, expanded: false });
            }
        }
    }
    /**
     * 树加载完成事件
     */
    onTreeLoadComplete() {
        const index = this.nodesWaitExpand.findIndex(node => !node.expanded);
        const nodeData = this.nodesWaitExpand[index] || {};
        const { id } = nodeData;
        if (id) {
            const rowNode = this.component.findRowNode(id);
            if (rowNode) {
                nodeData.expanded = true;
                // if (nodeData && nodeData.node && !nodeData.node.expanded) {
                //   return;
                // }
                this.component.expandNode(id);
            }
        }
    }
    /**
     * 获取主键
     * @param nodeData nodeData
     */
    getPrimary(nodeData) {
        return nodeData[this.primaryKey];
    }
    // #region 工具方法，待单独封装
    /**
     * 获取子级节点的数据集合
     */
    getChildNodesData(fPath, fLayer) {
        const childNodesData = [];
        this.allNodesData.forEach((nodeData) => {
            // @todo：待删除，兼容没有hierarchyInfo的数据
            const hierarchyInfo = this.getHierarchyInfo(nodeData); //this.getValue(nodeData, this.hierarchyInfoKey); /// nodeData[this.hierarchyInfoKey];
            if (!hierarchyInfo) {
                return;
            }
            // 匹配节点
            const currentLayer = hierarchyInfo['layer'];
            const currentPath = hierarchyInfo['path'];
            if ((currentLayer === fLayer + 1) && currentPath && currentPath.startsWith(fPath)) {
                childNodesData.push(nodeData);
            }
        });
        return childNodesData;
    }
    getHierarchyInfo(nodeData) {
        return this.getValue(nodeData, this.hierarchyInfoKey); //nodeData[this.hierarchyInfoKey];
    }
    initLevelGroup() {
        this.levelGroup = {};
        this.allNodesData.forEach((nodeData) => {
            const hierarchyInfo = this.getHierarchyInfo(nodeData);
            const key = `level${hierarchyInfo.layer}`;
            if (this.levelGroup[key]) {
                this.levelGroup[key].push(nodeData);
            }
            else {
                this.levelGroup[key] = [nodeData];
            }
        });
    }
    getParentId(node) {
        const hierarchyInfo = this.getHierarchyInfo(node);
        const parentLevelGroup = this.levelGroup[this.getLevelGroupKey(hierarchyInfo.layer - 1)] || [];
        const parent = parentLevelGroup.find(nodeData => {
            const currentHierarchyInfo = this.getHierarchyInfo(nodeData);
            if (currentHierarchyInfo.isDetail === true) {
                return false;
            }
            return hierarchyInfo.path.startsWith(currentHierarchyInfo.path);
        });
        if (parent) {
            return parent.id;
        }
        else {
            return null;
        }
    }
    getLevelGroupKey(level) {
        return `level${level}`;
    }
    /**
     * 根据路径获取数据
     * @param target target
     * @param path 路径
     */
    getValue(target, path) {
        if (path.indexOf('/') === -1) {
            return target[path];
        }
        const paths = path.split('/').filter(p => p);
        if (paths.length < 1) {
            return target;
        }
        return paths.reduce((result, path) => {
            return result && result[path];
        }, target);
    }
    /**
     * 获取分级信息中的层级
     * @param nodeData nodeData
     */
    getNodeLayer(nodeData) {
        const hierarchyInfo = this.getHierarchyInfo(nodeData);
        return hierarchyInfo['layer'];
    }
    /**
     * 获取分级信息中的路径
     * @param nodeData nodeData
     */
    getNodePath(nodeData) {
        const hierarchyInfo = this.getHierarchyInfo(nodeData);
        return hierarchyInfo['path'];
    }
    /**
     * 获取展开状态
     */
    isExpanded(newData) {
        const oldTreeNode = this.getOldNode(newData);
        return oldTreeNode ? oldTreeNode.expanded : undefined;
    }
    /**
     * 是否是叶子节点
     * @todo：服务器端对isDetail的目前没有与前端同步，isDetail不准确。
     */
    isLeaf(nodeData) {
        const hierarchyInfo = this.getHierarchyInfo(nodeData); // nodeData[this.hierarchyInfoKey];
        const isDetail = hierarchyInfo['isDetail'];
        return isDetail;
    }
    /**
     * 判断节点是否是新增
     * @todo：不应该这样判断，待优化。
     * @summary
     * 1、非空树（空树视为初次加载数据）；
     * 2、找不到oldNode。
     */
    isNewNode(nodeData) {
        if (this.allOldNodesMap.size === 0) {
            return false;
        }
        const oldTreeNode = this.getOldNode(nodeData);
        return oldTreeNode ? false : true;
    }
    /**
     * 展开父节点
     */
    expandParentNode(nodeData) {
        const parentTreeNode = this.getParentNode(nodeData);
        if (!parentTreeNode) {
            return;
        }
        parentTreeNode.leaf = false;
        parentTreeNode.expanded = true;
    }
    /**
     * 查找父节点
     */
    getParentNode(nodeData) {
        const hierarchyInfo = this.getHierarchyInfo(nodeData); //nodeData[this.hierarchyInfoKey];
        const layer = hierarchyInfo['layer'];
        const path = hierarchyInfo['path'];
        const allNodes = Array.from(this.allNodesMap.values());
        const parentNode = allNodes.find((currentNode) => {
            const currentLayer = this.getValue(currentNode.data, this.hierarchyInfoKey)['layer']; //currentNode.data[this.hierarchyInfoKey]['layer'];
            const currentPath = this.getValue(currentNode.data, this.hierarchyInfoKey)['path']; //  currentNode.data[this.hierarchyInfoKey]['path'];
            if ((layer === currentLayer + 1) && path.startsWith(currentPath) === true) {
                return true;
            }
            return false;
        });
        return parentNode;
    }
    /**
     * 获取老的树节点
     */
    getOldNode(nodeData) {
        const id = nodeData[this.primaryKey];
        return this.allOldNodesMap.get(id);
    }
    /**
     * 打平TreeNodes，并放入一个Map中
     */
    buildNodesDataMap(treeNodes) {
        treeNodes.forEach((treeNode) => {
            this.allOldNodesMap.set(treeNode.data[this.primaryKey], treeNode);
            if (treeNode.children) {
                this.buildNodesDataMap(treeNode.children);
            }
        });
    }
}
export { PathTreeNodeBuilder };
//# sourceMappingURL=data:application/json;base64,