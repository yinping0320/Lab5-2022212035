import { Directive, ElementRef, Injector } from "@angular/core";
import { FrameContext } from "@farris/devkit";
import { ScrollspyComponent } from '@farris/ui-scrollspy';
import { ComponentRef } from "./component-ref";
export class ScrollspyComponentRefDirective extends ComponentRef {
    constructor(injector, component, elementRef, frameContext) {
        super(frameContext, elementRef);
        this.injector = injector;
        this.component = component;
        this.elementRef = elementRef;
        this.frameContext = frameContext;
    }
    ngAfterViewInit() {
        this.tryAddComponent(this.component);
    }
    ngOnInit() {
        this.addComponent(this.component);
    }
    ngOnDestroy() {
    }
}
ScrollspyComponentRefDirective.decorators = [
    { type: Directive, args: [{
                selector: '[scrollspyRef]'
            },] }
];
/** @nocollapse */
ScrollspyComponentRefDirective.ctorParameters = () => [
    { type: Injector },
    { type: ScrollspyComponent },
    { type: ElementRef },
    { type: FrameContext }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsc3B5LWNvbXBvbmVudC1yZWYuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9rZW5kby1iaW5kaW5nLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvY29tcG9uZW50LXJlZi9zY3JvbGxzcHktY29tcG9uZW50LXJlZi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFpQixTQUFTLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBcUIsTUFBTSxlQUFlLENBQUM7QUFDbEcsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzFELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUsvQyxNQUFNLE9BQU8sOEJBQStCLFNBQVEsWUFBWTtJQUM5RCxZQUFvQixRQUFrQixFQUFVLFNBQTZCLEVBQVMsVUFBc0IsRUFBUyxZQUEwQjtRQUM3SSxLQUFLLENBQUMsWUFBWSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBRGQsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUFVLGNBQVMsR0FBVCxTQUFTLENBQW9CO1FBQVMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUFTLGlCQUFZLEdBQVosWUFBWSxDQUFjO0lBRS9JLENBQUM7SUFDRCxlQUFlO1FBQ2IsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUNELFFBQVE7UUFDTixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBQ0QsV0FBVztJQUNYLENBQUM7OztZQWRGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO2FBQzNCOzs7O1lBUDhDLFFBQVE7WUFFOUMsa0JBQWtCO1lBRlEsVUFBVTtZQUNwQyxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbmplY3RvciwgT25EZXN0cm95LCBPbkluaXQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBGcmFtZUNvbnRleHQgfSBmcm9tIFwiQGZhcnJpcy9kZXZraXRcIjtcclxuaW1wb3J0IHsgU2Nyb2xsc3B5Q29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy91aS1zY3JvbGxzcHknO1xyXG5pbXBvcnQgeyBDb21wb25lbnRSZWYgfSBmcm9tIFwiLi9jb21wb25lbnQtcmVmXCI7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tzY3JvbGxzcHlSZWZdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgU2Nyb2xsc3B5Q29tcG9uZW50UmVmRGlyZWN0aXZlIGV4dGVuZHMgQ29tcG9uZW50UmVmIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXQge1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCBwcml2YXRlIGNvbXBvbmVudDogU2Nyb2xsc3B5Q29tcG9uZW50LCBwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHVibGljIGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0KSB7XHJcbiAgICBzdXBlcihmcmFtZUNvbnRleHQsIGVsZW1lbnRSZWYpO1xyXG4gIH1cclxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XHJcbiAgICB0aGlzLnRyeUFkZENvbXBvbmVudCh0aGlzLmNvbXBvbmVudCk7XHJcbiAgfVxyXG4gIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5hZGRDb21wb25lbnQodGhpcy5jb21wb25lbnQpO1xyXG4gIH1cclxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICB9XHJcblxyXG59Il19