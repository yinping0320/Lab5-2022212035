/**
 * 使用方法：
 * [comob-lookup-data-mapping]="{ id: 'user.userId', name: 'user.userName' }"
 * key 为帮助上的字段， value 为 表单中的字段名
 * 帮助上的同一个字段可以映射到表单中的多个字段中，{ ... id: 'user.userid, user.addusid'}
 * 多字段以逗号隔开
 *
 */
import { Directive, Optional, Self, Input } from '@angular/core';
import { BindingObject, ViewModel } from '@farris/devkit';
import { ComboLookupComponent } from '@farris/ui-combo-lookup';
import { DataMapping } from './data-mapping';
export class ComboLookupDataMappingDirective extends DataMapping {
    constructor(vm, lookup) {
        super();
        this.vm = vm;
        this.lookup = lookup;
        this.target = null;
        if (this.lookup) {
            this.lookup.useFormDataMapping = true;
        }
    }
    ngOnInit() {
        // 值变化，亦通过该事件触发任意输入清空事件
        this.lookup.valueChange.subscribe((result) => {
            if (!result['nosearch']) {
                // 值变化
                const data = result.selections && result.selections.length > 0 ? result.selections : null;
                this.onValueChange(data);
            }
            else {
                // 任意输入清空映射字段
                this.onClearMapping();
            }
        });
        // 清空事件
        this.lookup.clear.subscribe(() => {
            const _mapfields = this.mapfields || this.lookup.mapFields;
            this.mappingData(null, _mapfields);
        });
    }
    onClearMapping() {
        const mapfields = Object.assign({}, (this.mapfields || this.lookup.mapFields || {}));
        const lookupTextField = this.lookup.textField;
        const data = {};
        const controlName = this.lookup.ngControl && this.lookup.ngControl.name;
        if (controlName && this.vm) {
            const textFieldMapping = mapfields[lookupTextField];
            const ngFormControl = this.vm && this.vm.form && this.vm.form.ngFormControls && this.vm.form.ngFormControls[controlName];
            const binding = ngFormControl && ngFormControl.binding;
            if (textFieldMapping && binding) {
                const targetField = textFieldMapping.split(',').filter((item) => item !== binding).join(',');
                if (targetField) {
                    mapfields[lookupTextField] = targetField;
                }
                else {
                    delete mapfields[lookupTextField];
                }
            }
        }
        if (mapfields && Object.keys(mapfields).length > 0) {
            Object.keys(mapfields).forEach((field) => {
                this.setValue(data, field.split('.'), '');
            });
            this.mappingData(data, mapfields, true);
        }
    }
    onValueChange(data) {
        const _mapfields = this.mapfields || this.lookup.mapFields;
        const spliter = this.lookup.separator || this.defaultSpliter;
        this.mappingData(data, _mapfields, false, spliter);
    }
}
ComboLookupDataMappingDirective.decorators = [
    { type: Directive, args: [{ selector: '[combo-lookup-data-mapping]' },] }
];
/** @nocollapse */
ComboLookupDataMappingDirective.ctorParameters = () => [
    { type: ViewModel, decorators: [{ type: Optional }] },
    { type: ComboLookupComponent, decorators: [{ type: Optional }, { type: Self }] }
];
ComboLookupDataMappingDirective.propDecorators = {
    mapfields: [{ type: Input, args: ['combo-lookup-data-mapping',] }],
    target: [{ type: Input, args: ['target',] }]
};
//# sourceMappingURL=data:application/json;base64,