import { Directive, Input, Optional } from '@angular/core';
import { ComboLookupComponent } from '@farris/ui-combo-lookup';
import { LookupGridComponent } from '@farris/ui-lookup';
export class FarrisLookupBindingDirective {
    constructor(lookup, comboLookup) {
        this.lookup = lookup;
        this.comboLookup = comboLookup;
    }
    set lookupValue(value) {
        if (this.lookupType === 'lookup' && this.lookup) {
            this.lookup.writeValue(value);
        }
        else if (this.lookupType === 'comboLookup' && this.comboLookup) {
            this.comboLookup.writeValue(value);
        }
    }
}
FarrisLookupBindingDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farris-lookup-binding]'
            },] }
];
/** @nocollapse */
FarrisLookupBindingDirective.ctorParameters = () => [
    { type: LookupGridComponent, decorators: [{ type: Optional }] },
    { type: ComboLookupComponent, decorators: [{ type: Optional }] }
];
FarrisLookupBindingDirective.propDecorators = {
    lookupType: [{ type: Input }],
    lookupValue: [{ type: Input, args: ['farris-lookup-binding',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFycmlzX2xvb2t1cF9iaW5kaW5nLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMva2VuZG8tYmluZGluZy8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL2ZhcnJpc19sb29rdXBfYmluZGluZy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBS3hELE1BQU0sT0FBTyw0QkFBNEI7SUFVdkMsWUFBZ0MsTUFBMkIsRUFBc0IsV0FBaUM7UUFBbEYsV0FBTSxHQUFOLE1BQU0sQ0FBcUI7UUFBc0IsZ0JBQVcsR0FBWCxXQUFXLENBQXNCO0lBQUksQ0FBQztJQVJ2SCxJQUNXLFdBQVcsQ0FBQyxLQUFVO1FBQy9CLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxRQUFRLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUMvQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMvQjthQUFNLElBQUksSUFBSSxDQUFDLFVBQVUsS0FBSyxhQUFhLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNoRSxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNwQztJQUNILENBQUM7OztZQVpGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUseUJBQXlCO2FBQ3BDOzs7O1lBSlEsbUJBQW1CLHVCQWViLFFBQVE7WUFoQmQsb0JBQW9CLHVCQWdCbUMsUUFBUTs7O3lCQVRyRSxLQUFLOzBCQUNMLEtBQUssU0FBQyx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb21ib0xvb2t1cENvbXBvbmVudCB9IGZyb20gJ0BmYXJyaXMvdWktY29tYm8tbG9va3VwJztcclxuaW1wb3J0IHsgTG9va3VwR3JpZENvbXBvbmVudCB9IGZyb20gJ0BmYXJyaXMvdWktbG9va3VwJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2ZhcnJpcy1sb29rdXAtYmluZGluZ10nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGYXJyaXNMb29rdXBCaW5kaW5nRGlyZWN0aXZlIHtcclxuICBASW5wdXQoKSBsb29rdXBUeXBlOiBzdHJpbmc7XHJcbiAgQElucHV0KCdmYXJyaXMtbG9va3VwLWJpbmRpbmcnKVxyXG4gIHB1YmxpYyBzZXQgbG9va3VwVmFsdWUodmFsdWU6IGFueSkge1xyXG4gICAgaWYgKHRoaXMubG9va3VwVHlwZSA9PT0gJ2xvb2t1cCcgJiYgdGhpcy5sb29rdXApIHtcclxuICAgICAgdGhpcy5sb29rdXAud3JpdGVWYWx1ZSh2YWx1ZSk7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMubG9va3VwVHlwZSA9PT0gJ2NvbWJvTG9va3VwJyAmJiB0aGlzLmNvbWJvTG9va3VwKSB7XHJcbiAgICAgIHRoaXMuY29tYm9Mb29rdXAud3JpdGVWYWx1ZSh2YWx1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIHByaXZhdGUgbG9va3VwOiBMb29rdXBHcmlkQ29tcG9uZW50LCBAT3B0aW9uYWwoKSBwcml2YXRlIGNvbWJvTG9va3VwOiBDb21ib0xvb2t1cENvbXBvbmVudCkgeyB9XHJcbn0iXX0=