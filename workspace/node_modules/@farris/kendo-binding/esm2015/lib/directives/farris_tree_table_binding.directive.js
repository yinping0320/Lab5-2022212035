/*
 * @Author: aalizzwell
 * @Date: 2020-02-27 11:33:41
 * @Last Modified by: aalizzwell
 * @Last Modified time: 2020-02-27 11:34:16
 */
// tslint:disable: no-string-literal
import { Directive, Input, HostListener, Output, EventEmitter } from '@angular/core';
import { FrameContext, ChangeType, ComponentType } from '@farris/devkit';
import { TreeTableComponent } from '@farris/ui-treetable';
import { Subject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { FarrisTreetableFormatService } from '../format/index';
import { TreeNodeBuilderFactory } from './tree_table_node_builder/tree_node_builder_factory';
/**
 * 树表格绑定指令
 */
class FarrisTreeTableBindingDirective {
    /**
     * 构造函数
     */
    constructor(treeTable, treetableFormatSer, frameContext) {
        this.treeTable = treeTable;
        this.treetableFormatSer = treetableFormatSer;
        this.frameContext = frameContext;
        this.renderSubject = new Subject();
        /**
         * 启用节点分页
         */
        // @Input('enableNodePagination')
        // public enableNodePagination: boolean;
        /**
         * 节点分页大小
         */
        this.nodePageSize = 100;
        /* 设置行样式 */
        this.rowClass = new EventEmitter();
        /* 设置列样式 */
        this.cellClass = new EventEmitter();
        this._PROP = null;
        this.listeners = [];
        this.storage = [];
        this.viewModel.uiState.setPropertyValue('ids', this.treeTable.checkValues);
        this.renderSubject.pipe(debounceTime(500)).subscribe(() => {
            this.bindData();
        });
    }
    /**
     * 绑定数据
     */
    get bindingData() {
        return this.frameContext.bindingData;
    }
    /**
     * 绑定数据列表
     */
    get bindingList() {
        // @todo：只支持主表，没有处理bindingPath
        return this.bindingData.list;
    }
    get prop() {
        return this._PROP;
    }
    set prop(value) {
        this._PROP = value;
    }
    /**
     * 获取当前vm
     */
    get viewModel() {
        return this.frameContext.viewModel;
    }
    /**
     * 指令初始化
     */
    ngOnInit() {
        // 将分级码信息保存到root-component，而非整个表单的app-context
        const virtualRootFrameContext = this.frameContext.getVirtualRootFrameContext();
        virtualRootFrameContext.setParam('hierarchyInfoKey', this.hierarchyInfoKey);
        this.bindData();
        this.bindingData.changes.subscribe((change) => {
            if (change && (change.type === ChangeType.ValueChanged || change.type === ChangeType.PaginationInfoChange)) {
                this.renderSubject.next(change);
            }
            else {
                this.bindData();
            }
            // 设置当前行
            const currentId = this.bindingList.currentId;
            if (!this.frameContext.bindingData.rowSelectedEventSuspend && currentId) {
                this.setSelectedIdToTree(this.bindingList.currentId);
            }
            this.updateCheckedRows(change);
        });
        // 设置 树表 格式化
        this.treetableFormatSer.setFormat(this.treeTable);
        /* 行样式 */
        this.rowClass.emit(this.treeTable);
        /* 列样式  单元格样式 */
        this.cellClass.emit(this.treeTable);
        this.setComponentRef();
        this.setNodePaginationInfo();
        this.registerEvent();
        if (this.frameContext && this.frameContext.frameComponent) {
            this.frameContext.frameComponent.componentType = ComponentType.farrisTreeTalbeComponent;
        }
    }
    /**
     * 指令输入变更
     */
    ngOnChanges(changes) {
    }
    registerEvent() {
        this.treeTable.columnSorted.subscribe((event) => {
            const { sortName = null, sortOrder = null } = event;
            const remoteSort = this.treeTable.remoteSort;
            if (remoteSort === false) {
                if (sortName && sortOrder) {
                    this.bindingList.sortBy(sortName, sortOrder);
                }
            }
            this.bindData();
        });
    }
    /**
     * 收集树组件实例
     */
    setComponentRef() {
        const appContext = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.getFormAppContext();
        const frameId = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.frameId;
        const id = this.treeTable && this.treeTable.el.nativeElement.id || null;
        // 如果frameId不存在或treetable没有id属性，说明不符合使用场景
        if (!frameId || !id) {
            return;
        }
        const map = appContext && appContext.componentRefs && appContext.componentRefs.get(frameId) || new Map();
        appContext && appContext.componentRefs && appContext.componentRefs.set(frameId, map.set(id, this.treeTable));
    }
    setNodePaginationInfo() {
        if (this.frameContext) {
            const enableNodePagination = this.treeTable.paginationForChildren || false; //this.enableNodePagination || false;
            this.frameContext.params.set('enableNodePagination', enableNodePagination);
            const nodePageSize = this.nodePageSize || 0;
            this.frameContext.params.set('nodePageSize', nodePageSize);
        }
    }
    /**
     * 绑定数据
     */
    bindData() {
        const oldTreeNodes = this.treeTable.data;
        const treeNodesData = this.bindingList.toJSON({ ignoreMultiLangInput: true });
        // if (!this.shouldComponentUpdate(treeNodesData)) {
        //   return;
        // }
        this.prop = treeNodesData;
        let treeNodes = [];
        if (!!treeNodesData && treeNodesData.length > 0) {
            const hierarchyInfo = treeNodesData[0][this.hierarchyInfoKey];
            let builder = this.builder;
            if (!builder) {
                this.builder = TreeNodeBuilderFactory.getBuilder(hierarchyInfo);
                builder = this.builder;
            }
            // 服务器返回的分级节点信息匹配不到现有工厂里面的任何一种情况。确认新加的builder已经在工厂中注册
            if (builder == null) {
                throw new Error('TreeTable builder is null!');
            }
            let expandLevel = -1;
            const treeExpandLevel = this.treeTable['expandLevel'];
            if (typeof treeExpandLevel !== 'undefined') {
                expandLevel = treeExpandLevel;
            }
            const virtualRootFrameContext = this.frameContext.getVirtualRootFrameContext();
            const nodesShouldExpand = (virtualRootFrameContext.params.get('_DEVKIT_expandRowIds') || '').split(',') || [];
            const context = {
                expandLevel,
                addTreeLoadCompleteListener: this.addTreeLoadCompleteListener.bind(this),
                component: this.treeTable,
                storage: this.storage,
                nodesShouldExpand: nodesShouldExpand,
                frameContext: this.frameContext,
            };
            //if (!this.treeNodesBuilder) {
            this.treeNodesBuilder = new builder(treeNodesData, oldTreeNodes, this.bindingList.primaryKey, this.hierarchyInfoKey, context);
            //}
            // this.treeNodesBuilder.updateTreeNode(treeNodesData, oldTreeNodes);
            treeNodes = this.treeNodesBuilder.build();
        }
        this.treeTable.data = treeNodes;
        // 设置分页信息
        this.updatePageInfo(this.treeTable);
        this.onTreeLoadComplete();
    }
    onTreeLoadComplete() {
        if (this.listeners && this.listeners.length > 0) {
            this.listeners.forEach(listener => {
                listener();
            });
        }
    }
    addTreeLoadCompleteListener(listener) {
        this.listeners.push(listener);
    }
    shouldComponentUpdate(newProp) {
        if (JSON.stringify(this.prop) === JSON.stringify(newProp)) {
            return false;
        }
        return true;
    }
    /**
     * 从树组件上获取选中行的id
     */
    getSelectedIdFromTree() {
        const selectedRow = this.treeTable.selectedRow;
        return selectedRow ? selectedRow.data['id'] : null;
    }
    /**
     * 设置TreeTable的当前行
     */
    setSelectedIdToTree(selectedId) {
        if (!selectedId) {
            return;
        }
        // 如果新的currentId和树上的selectedId不一致，重置树的当前行
        const oldSelectedId = this.getSelectedIdFromTree();
        const nodePageChanged = this.frameContext.params.get('_NODE_PAGE_CHANGED_') || false;
        if (!oldSelectedId && nodePageChanged) {
            this.frameContext.params.delete('_NODE_PAGE_CHANGED_');
            return;
        }
        if (oldSelectedId !== selectedId) {
            this.treeTable.clearSelections();
            this.treeTable.selectNode(selectedId);
        }
    }
    /**
     * 设置BindingList的CurrentId
     */
    setCurrentIdToBindingList(selectedId) {
        const oldCurrentId = this.bindingData.list.currentId;
        // 单选模式下将当前行设置到ids
        if (!this.treeTable.multiSelect) {
            this.setChecks(selectedId);
            this.setCheckedRows([selectedId]);
        }
        if (oldCurrentId === selectedId) {
            return;
        }
        this.bindingData.list.setCurrentId(selectedId, true);
    }
    updateCheckedRows(changes) {
        if (changes.type === ChangeType.Load) {
            this.setCheckedRows();
        }
        else if (changes.type === ChangeType.ValueChanged || changes.type === ChangeType.Remove) {
            const ids = this.getChecks();
            if (changes.id && ids.includes(changes.id)) {
                this.setCheckedRows();
            }
        }
    }
    /**
     * 更新勾选行数据
     */
    setCheckedRows(ids) {
        if (typeof ids === 'undefined') {
            ids = this.viewModel.uiState['ids'] || [];
        }
        if (!Array.isArray(ids)) {
            return;
        }
        const list = this.bindingList.toJSON();
        const rows = this.viewModel.uiState['rows'] || new Map();
        const result = new Map();
        ids.forEach((id) => {
            const item = list.find(item => item[this.bindingList.primaryKey] === id);
            const otherPageItem = rows.get(id);
            if (item) {
                result.set(id, item);
            }
            else if (otherPageItem) {
                result.set(id, otherPageItem);
            }
        });
        this.viewModel.uiState.setPropertyValue('rows', result);
    }
    /**
     * 设置ids变量
     * @param idOrIds id or ids
     */
    setChecks(idOrIds) {
        if (typeof idOrIds === 'string') {
            idOrIds = idOrIds.split(',').filter(p => p);
        }
        this.viewModel.uiState.setPropertyValue('ids', idOrIds);
    }
    /**
     * 获取勾选行id数组
     * @returns
     */
    getChecks() {
        return this.viewModel.uiState['ids'] || [];
    }
    /**
     * 获取分页信息
     */
    getPagingInfo() {
        const bindingPath = this.viewModel.bindingPath;
        const bindingData = this.viewModel.bindingData;
        let pagingInfo = bindingData.pagingInfo;
        if (bindingPath === '/') {
            return pagingInfo;
        }
        else {
            const bindingPaths = bindingPath.substr(1).split('/').filter(item => !!item && item.length > 0).map(item => {
                return item.substring(0, item.length - 1);
            });
            bindingPaths.forEach(path => {
                pagingInfo = pagingInfo && pagingInfo[path];
            });
            return pagingInfo;
        }
    }
    updatePageInfo(treeTable) {
        const { pageIndex, pageSize, total } = this.getPagingInfo();
        if (pageSize === 0) {
            treeTable.pagination = false;
            return;
        }
        treeTable.pagination = true;
        treeTable.updatePageInfo({ pageIndex, pageSize, total });
    }
    //#region 组件事件
    /**
     * 行切换
     */
    selectionChangeHandler(event) {
        if (event && event.node && event.node.hasOwnProperty('data')) {
            const idField = this.treeTable.idField;
            const id = event.node.data[idField];
            this.setCurrentIdToBindingList(id);
        }
    }
    /**
     * 勾选节点发生变化
     * @param event event
     */
    checkValuesChange(event) {
        // this.viewModel.uiState.setPropertyValue('ids', this.treeTable.checkValues);
        this.setChecks(this.treeTable.checkValues);
        this.setCheckedRows();
    }
    /**
     * 将被展开的节点设置为当前行
     */
    expandHandler(event) {
        const selectedId = event.data['id'];
        const virtualRootFrameContext = this.frameContext.getVirtualRootFrameContext();
        // 展开时不再选中
        // this.setSelectedIdToTree(selectedId);
        const expandNodes = virtualRootFrameContext.getParam('TREE_LATEST_EXPANDED_ID') || [];
        expandNodes.push(selectedId);
        virtualRootFrameContext.setParam('TREE_LATEST_EXPANDED_ID', expandNodes);
    }
    onPageChanged(event) {
        let { pageSize = 20, pageIndex = 1 } = event || {};
        if (pageIndex < 1) {
            pageIndex = 1;
        }
        const skip = (pageIndex - 1) * pageSize;
        this.bindingData.setPagingInfo(skip, pageSize, this.bindingData.bindingPath);
    }
    onPageSizeChanged(event) {
        const pageSize = event ? event : 20;
        const skip = 0;
        this.bindingData.setPagingInfo(skip, pageSize, this.bindingData.bindingPath);
    }
    /**
     * 节点页码切换事件
     * @param event event
     */
    onNodePageChanged(event) {
        const { pageIndex = 1, pageSize = this.nodePageSize, node = {} } = event;
        const id = node && node.id || null;
        if (id) {
            const virtualRootFrameContext = this.frameContext.getVirtualRootFrameContext();
            const expandNodes = virtualRootFrameContext.getParam('TREE_LATEST_EXPANDED_ID') || [];
            expandNodes.push(id);
            virtualRootFrameContext.setParam('TREE_LATEST_EXPANDED_ID', expandNodes);
            this.frameContext.params.set(`_NODE_${id}_PAGE_INDEX_`, pageIndex);
            this.frameContext.params.set(`_RELOAD_CHILDREN_`, true);
            this.frameContext.params.set('_NODE_PAGE_CHANGED_', true);
        }
    }
}
FarrisTreeTableBindingDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farrisTreeTableBinding]'
            },] }
];
/** @nocollapse */
FarrisTreeTableBindingDirective.ctorParameters = () => [
    { type: TreeTableComponent },
    { type: FarrisTreetableFormatService },
    { type: FrameContext }
];
FarrisTreeTableBindingDirective.propDecorators = {
    hierarchyInfoKey: [{ type: Input, args: ['farrisHierarchyInfoKey',] }],
    rowClassName: [{ type: Input }],
    cellClassName: [{ type: Input }],
    nodePageSize: [{ type: Input, args: ['nodePageSize',] }],
    rowClass: [{ type: Output }],
    cellClass: [{ type: Output }],
    selectionChangeHandler: [{ type: HostListener, args: ['nodeSelected', ['$event'],] }],
    checkValuesChange: [{ type: HostListener, args: ['checkValuesChange', ['$event'],] }],
    expandHandler: [{ type: HostListener, args: ['expand', ['$event'],] }],
    onPageChanged: [{ type: HostListener, args: ['pageChanged', ['$event'],] }],
    onPageSizeChanged: [{ type: HostListener, args: ['pageSizeChanged', ['$event'],] }],
    onNodePageChanged: [{ type: HostListener, args: ['childsPageChanged', ['$event'],] }]
};
export { FarrisTreeTableBindingDirective };
//# sourceMappingURL=data:application/json;base64,