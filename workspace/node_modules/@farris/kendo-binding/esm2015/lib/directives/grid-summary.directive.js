import { Directive, Input, NgZone } from '@angular/core';
import { BindingData } from '@farris/devkit';
import { ColumnComponent } from '@progress/kendo-angular-grid';
export class GridColumnAggregateDirective {
    constructor(column, ngZone) {
        this.column = column;
        this.ngZone = ngZone;
    }
    get field() {
        return this.column.field;
    }
    get aggrType() {
        let type = 'none';
        if (typeof (this.aggregate) === 'boolean') {
            // 默认为sum，如果使用指令时传入的input为布尔类型，使用sum。
            if (this.aggregate) {
                type = 'sum';
            }
        }
        else if (typeof (this.aggregate) === 'string') {
            type = this.aggregate;
        }
        return type;
    }
    recalculateSummary(bindingList) {
        let summary = null;
        if (this.aggrType === 'sum') {
            const plainData = bindingList.toJSON().map(item => {
                // 考虑帮助和udt的情况，field是a.b的格式。
                return this.field.split('.').reduce((prevPath, currPath) => {
                    return prevPath[currPath];
                }, item);
            });
            if (plainData && plainData.length) {
                summary = plainData.reduce((prev, curr) => {
                    return prev + curr;
                });
            }
        }
        else if (this.aggrType === 'count') {
            // 计数，如果启用分页，只计算当前页，因此使用length而非total。
            summary = bindingList.length;
        }
        this.updateFooter(summary);
    }
    updateFooter(content) {
        if (this.aggregate) {
            // 存在性能问题，去掉setTimeout。
            // 列表的列越多，此处问题越严重，需要正向解决以下错误。
            // todo: settimeout是为了解决数据变化时angular报错，如果更新页脚的逻辑不在gridbinding发起，是否还存在问题？
            // setTimeout(() => {
            this.column['summary'] = content;
            // });
        }
    }
}
GridColumnAggregateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[aggregate]',
            },] }
];
/** @nocollapse */
GridColumnAggregateDirective.ctorParameters = () => [
    { type: ColumnComponent },
    { type: NgZone }
];
GridColumnAggregateDirective.propDecorators = {
    aggregate: [{ type: Input }]
};
export class GridSummaryDirective /* implements OnInit, AfterViewInit*/ {
    constructor(bindingData) {
        this.bindingData = bindingData;
    }
}
GridSummaryDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farrisSummary]'
            },] }
];
/** @nocollapse */
GridSummaryDirective.ctorParameters = () => [
    { type: BindingData }
];
GridSummaryDirective.propDecorators = {
    summary: [{ type: Input, args: ['farrisSummary',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1zdW1tYXJ5LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMva2VuZG8tYmluZGluZy8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL2dyaWQtc3VtbWFyeS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBOEIsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRixPQUFPLEVBQUUsV0FBVyxFQUFlLE1BQU0sZ0JBQWdCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBSy9ELE1BQU0sT0FBTyw0QkFBNEI7SUFxQnZDLFlBQW9CLE1BQXVCLEVBQVUsTUFBYztRQUEvQyxXQUFNLEdBQU4sTUFBTSxDQUFpQjtRQUFVLFdBQU0sR0FBTixNQUFNLENBQVE7SUFDbkUsQ0FBQztJQWxCRCxJQUFXLEtBQUs7UUFDZCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQzNCLENBQUM7SUFFRCxJQUFZLFFBQVE7UUFDbEIsSUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDO1FBQ2xCLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxTQUFTLEVBQUU7WUFDekMscUNBQXFDO1lBQ3JDLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDbEIsSUFBSSxHQUFHLEtBQUssQ0FBQzthQUNkO1NBQ0Y7YUFBTSxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssUUFBUSxFQUFFO1lBQy9DLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1NBQ3ZCO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBS00sa0JBQWtCLENBQUMsV0FBd0I7UUFDaEQsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ25CLElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxLQUFLLEVBQUU7WUFDM0IsTUFBTSxTQUFTLEdBQUcsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDaEQsNEJBQTRCO2dCQUM1QixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsRUFBRTtvQkFDekQsT0FBTyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQzVCLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNYLENBQUMsQ0FBQyxDQUFDO1lBQ0gsSUFBSSxTQUFTLElBQUksU0FBUyxDQUFDLE1BQU0sRUFBRTtnQkFDakMsT0FBTyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUU7b0JBQ3hDLE9BQU8sSUFBSSxHQUFHLElBQUksQ0FBQztnQkFDckIsQ0FBQyxDQUFDLENBQUM7YUFDSjtTQUNGO2FBQU0sSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLE9BQU8sRUFBRTtZQUNwQyxzQ0FBc0M7WUFDdEMsT0FBTyxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUM7U0FDOUI7UUFDRCxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFTSxZQUFZLENBQUMsT0FBWTtRQUM5QixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDaEIsdUJBQXVCO1lBQ3ZCLDZCQUE2QjtZQUM3Qix3RUFBd0U7WUFDeEUscUJBQXFCO1lBQ25CLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsT0FBTyxDQUFDO1lBQ25DLE1BQU07U0FDVDtJQUNILENBQUM7OztZQXpERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGFBQWE7YUFDeEI7Ozs7WUFKUSxlQUFlO1lBRitCLE1BQU07Ozt3QkFTMUQsS0FBSzs7QUEyRFIsTUFBTSxPQUFPLG9CQUFvQixDQUFBLHFDQUFxQztJQUVwRSxZQUFvQixXQUF3QjtRQUF4QixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtJQUFJLENBQUM7OztZQUxsRCxTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGlCQUFpQjthQUM1Qjs7OztZQWxFUSxXQUFXOzs7c0JBb0VqQixLQUFLLFNBQUMsZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgQ29udGVudENoaWxkcmVuLCBRdWVyeUxpc3QsIElucHV0LCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQmluZGluZ0RhdGEsIEJpbmRpbmdMaXN0IH0gZnJvbSAnQGZhcnJpcy9kZXZraXQnO1xyXG5pbXBvcnQgeyBDb2x1bW5Db21wb25lbnQgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1ncmlkJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2FnZ3JlZ2F0ZV0nLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgR3JpZENvbHVtbkFnZ3JlZ2F0ZURpcmVjdGl2ZSB7XHJcblxyXG4gIEBJbnB1dCgpIGFnZ3JlZ2F0ZTogc3RyaW5nIHwgYm9vbGVhbjtcclxuXHJcbiAgcHVibGljIGdldCBmaWVsZCgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuY29sdW1uLmZpZWxkO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXQgYWdnclR5cGUoKTogc3RyaW5nIHtcclxuICAgIGxldCB0eXBlID0gJ25vbmUnO1xyXG4gICAgaWYgKHR5cGVvZiAodGhpcy5hZ2dyZWdhdGUpID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgLy8g6buY6K6k5Li6c3Vt77yM5aaC5p6c5L2/55So5oyH5Luk5pe25Lyg5YWl55qEaW5wdXTkuLrluIPlsJTnsbvlnovvvIzkvb/nlKhzdW3jgIJcclxuICAgICAgaWYgKHRoaXMuYWdncmVnYXRlKSB7XHJcbiAgICAgICAgdHlwZSA9ICdzdW0nO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiAodGhpcy5hZ2dyZWdhdGUpID09PSAnc3RyaW5nJykge1xyXG4gICAgICB0eXBlID0gdGhpcy5hZ2dyZWdhdGU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHlwZTtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY29sdW1uOiBDb2x1bW5Db21wb25lbnQsIHByaXZhdGUgbmdab25lOiBOZ1pvbmUpIHtcclxuICB9XHJcblxyXG4gIHB1YmxpYyByZWNhbGN1bGF0ZVN1bW1hcnkoYmluZGluZ0xpc3Q6IEJpbmRpbmdMaXN0KSB7XHJcbiAgICBsZXQgc3VtbWFyeSA9IG51bGw7XHJcbiAgICBpZiAodGhpcy5hZ2dyVHlwZSA9PT0gJ3N1bScpIHtcclxuICAgICAgY29uc3QgcGxhaW5EYXRhID0gYmluZGluZ0xpc3QudG9KU09OKCkubWFwKGl0ZW0gPT4ge1xyXG4gICAgICAgIC8vIOiAg+iZkeW4ruWKqeWSjHVkdOeahOaDheWGte+8jGZpZWxk5pivYS5i55qE5qC85byP44CCXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmllbGQuc3BsaXQoJy4nKS5yZWR1Y2UoKHByZXZQYXRoLCBjdXJyUGF0aCkgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIHByZXZQYXRoW2N1cnJQYXRoXTtcclxuICAgICAgICB9LCBpdGVtKTtcclxuICAgICAgfSk7XHJcbiAgICAgIGlmIChwbGFpbkRhdGEgJiYgcGxhaW5EYXRhLmxlbmd0aCkge1xyXG4gICAgICAgIHN1bW1hcnkgPSBwbGFpbkRhdGEucmVkdWNlKChwcmV2LCBjdXJyKSA9PiB7XHJcbiAgICAgICAgICByZXR1cm4gcHJldiArIGN1cnI7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAodGhpcy5hZ2dyVHlwZSA9PT0gJ2NvdW50Jykge1xyXG4gICAgICAvLyDorqHmlbDvvIzlpoLmnpzlkK/nlKjliIbpobXvvIzlj6rorqHnrpflvZPliY3pobXvvIzlm6DmraTkvb/nlKhsZW5ndGjogIzpnZ50b3RhbOOAglxyXG4gICAgICBzdW1tYXJ5ID0gYmluZGluZ0xpc3QubGVuZ3RoO1xyXG4gICAgfVxyXG4gICAgdGhpcy51cGRhdGVGb290ZXIoc3VtbWFyeSk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgdXBkYXRlRm9vdGVyKGNvbnRlbnQ6IGFueSkge1xyXG4gICAgaWYgKHRoaXMuYWdncmVnYXRlKSB7XHJcbiAgICAgICAgLy8g5a2Y5Zyo5oCn6IO96Zeu6aKY77yM5Y675o6Jc2V0VGltZW91dOOAglxyXG4gICAgICAgIC8vIOWIl+ihqOeahOWIl+i2iuWkmu+8jOatpOWkhOmXrumimOi2iuS4pemHje+8jOmcgOimgeato+WQkeino+WGs+S7peS4i+mUmeivr+OAglxyXG4gICAgICAgIC8vIHRvZG86IHNldHRpbWVvdXTmmK/kuLrkuobop6PlhrPmlbDmja7lj5jljJbml7Zhbmd1bGFy5oql6ZSZ77yM5aaC5p6c5pu05paw6aG16ISa55qE6YC76L6R5LiN5ZyoZ3JpZGJpbmRpbmflj5HotbfvvIzmmK/lkKbov5jlrZjlnKjpl67popjvvJ9cclxuICAgICAgICAvLyBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgIHRoaXMuY29sdW1uWydzdW1tYXJ5J10gPSBjb250ZW50O1xyXG4gICAgICAgIC8vIH0pO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2ZhcnJpc1N1bW1hcnldJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgR3JpZFN1bW1hcnlEaXJlY3RpdmUvKiBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCovIHtcclxuICBASW5wdXQoJ2ZhcnJpc1N1bW1hcnknKSBzdW1tYXJ5OiBzdHJpbmc7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBiaW5kaW5nRGF0YTogQmluZGluZ0RhdGEpIHsgfVxyXG5cclxufVxyXG4iXX0=