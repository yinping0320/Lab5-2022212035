(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@farris/ui-common/number'), require('@progress/kendo-angular-dropdowns'), require('@farris/extend-file-upload'), require('primeng/treetable'), require('@farris/ui-common/date'), require('@farris/ui-editor'), require('@gsp-cmp/querysolution'), require('@farris/ui-text'), require('@farris/ui-list-nav'), require('@farris/ui-list-view'), require('@farris/ui-view-change'), require('@farris/ui-html-editor'), require('@farris/ui-section'), require('@farris/ui-input-group'), require('@farris/ui-datepicker'), require('@farris/ui-time-picker'), require('@farris/ui-number-spinner'), require('@farris/ui-combo-list'), require('@farris/ui-lookup'), require('@farris/ui-treetable'), require('@farris/ui-wizard'), require('@farris/discussion-group'), require('@farris/ui-nav'), require('@farris/ui-multi-select'), require('@farris/ui-scrollspy'), require('@farris/ui-combo-lookup'), require('@farris/appointment-calendar'), require('lodash-es'), require('@farris/ui-datagrid'), require('@farris/ui-filter'), require('@farris/ui-list-filter'), require('rxjs'), require('rxjs/operators'), require('@gsp-svc/formdoc-upload'), require('@farris/rtf'), require('@farris/ui-locale'), require('@farris/ui-common/column'), require('@farris/devkit'), require('bignumber.js'), require('moment'), require('@farris/ui-dialog'), require('@angular/core'), require('@angular/common'), require('@progress/kendo-angular-grid'), require('@farris/ui-common')) :
    typeof define === 'function' && define.amd ? define('@farris/kendo-binding', ['exports', '@farris/ui-common/number', '@progress/kendo-angular-dropdowns', '@farris/extend-file-upload', 'primeng/treetable', '@farris/ui-common/date', '@farris/ui-editor', '@gsp-cmp/querysolution', '@farris/ui-text', '@farris/ui-list-nav', '@farris/ui-list-view', '@farris/ui-view-change', '@farris/ui-html-editor', '@farris/ui-section', '@farris/ui-input-group', '@farris/ui-datepicker', '@farris/ui-time-picker', '@farris/ui-number-spinner', '@farris/ui-combo-list', '@farris/ui-lookup', '@farris/ui-treetable', '@farris/ui-wizard', '@farris/discussion-group', '@farris/ui-nav', '@farris/ui-multi-select', '@farris/ui-scrollspy', '@farris/ui-combo-lookup', '@farris/appointment-calendar', 'lodash-es', '@farris/ui-datagrid', '@farris/ui-filter', '@farris/ui-list-filter', 'rxjs', 'rxjs/operators', '@gsp-svc/formdoc-upload', '@farris/rtf', '@farris/ui-locale', '@farris/ui-common/column', '@farris/devkit', 'bignumber.js', 'moment', '@farris/ui-dialog', '@angular/core', '@angular/common', '@progress/kendo-angular-grid', '@farris/ui-common'], factory) :
    (factory((global.farris = global.farris || {}, global.farris['kendo-binding'] = {}),global.number,global.kendoAngularDropdowns,global.extendFileUpload,global.treetable,global.date,global.uiEditor,global.querysolution,global.uiText,global.uiListNav,global.uiListView,global.uiViewChange,global.uiHtmlEditor,global.uiSection,global.uiInputGroup,global.uiDatepicker,global.uiTimePicker,global.uiNumberSpinner,global.uiComboList,global.uiLookup,global.uiTreetable,global.uiWizard,global.discussionGroup,global.uiNav,global.uiMultiSelect,global.uiScrollspy,global.uiComboLookup,global.appointmentCalendar,global.lodashEs,global.uiDatagrid,global.uiFilter,global.uiListFilter,global.rxjs,global.rxjs.operators,global.formdocUpload,global.rtf,global.uiLocale,global.column,global.devkit,global.bignumber_js,global.moment,global.uiDialog,global.ng.core,global.ng.common,global.kendoAngularGrid,global.uiCommon));
}(this, (function (exports,number,kendoAngularDropdowns,extendFileUpload,treetable,date,uiEditor,querysolution,uiText,uiListNav,uiListView,uiViewChange,uiHtmlEditor,uiSection,uiInputGroup,uiDatepicker,uiTimePicker,uiNumberSpinner,uiComboList,uiLookup,uiTreetable,uiWizard,discussionGroup,uiNav,uiMultiSelect,uiScrollspy,uiComboLookup,appointmentCalendar,lodashEs,uiDatagrid,uiFilter,uiListFilter,rxjs,operators,formdocUpload,rtf,uiLocale,column,devkit,bignumber_js,moment,uiDialog,core,common,kendoAngularGrid,uiCommon) { 'use strict';

    moment = moment && moment.hasOwnProperty('default') ? moment['default'] : moment;

    var ArrayConverter = /** @class */ (function () {
        function ArrayConverter(separator) {
            if (separator === void 0) {
                separator = ',';
            }
            this.separator = separator;
        }
        ArrayConverter.prototype.convertFrom = function (value) {
            return value.split(this.separator);
        };
        ArrayConverter.prototype.convertTo = function (value) {
            return value.join(this.separator);
        };
        return ArrayConverter;
    }());

    /*
     * @Author: Witt
     * @Date: 2018-10-29 10:26:58
     * @Last Modified by: Witt
     * @Last Modified time: 2018-10-29 15:49:12
     */
    /**
     * 日期转换器
     */
    var DateConverter = /** @class */ (function () {
        /**
         * 构造函数
         * @param format 日期格式
         */
        function DateConverter(format) {
            this.format = format;
        }
        /**
         * 字符串=> 日期
         * @param value 待转换的值
         */
        DateConverter.prototype.convertFrom = function (value) {
            if (devkit.DateUtil.isEmptyDateString(value) === true) {
                return null;
            }
            return devkit.DateUtil.parse(value);
        };
        /**
         * 日期=>字符串
         * @param value
         */
        DateConverter.prototype.convertTo = function (value) {
            if (!value) {
                return null;
            }
            // 如果value不是日期类型，则不做处理，返回原始value
            if (Object.prototype.toString.call(value) !== '[object Date]') {
                return value;
            }
            // 年
            var year = value.getFullYear().toString();
            year = year.length < 4 ? '0'.repeat(4 - year.length) + year : year;
            // 月
            var month = (value.getMonth() + 1).toString();
            month = month.length === 1 ? ('0' + month) : month;
            // 日
            var day = value.getDate().toString();
            day = day.length === 1 ? ('0' + day) : day;
            // 时分秒
            var hours = value.getHours().toString();
            hours = hours.length === 1 ? ('0' + hours) : hours;
            var minutes = value.getMinutes().toString();
            minutes = minutes.length === 1 ? ('0' + minutes) : minutes;
            var seconds = value.getSeconds().toString();
            seconds = seconds.length === 1 ? ('0' + seconds) : seconds;
            return year + "-" + month + "-" + day + " " + hours + ":" + minutes + ":" + seconds;
        };
        return DateConverter;
    }());

    /**
     * 多语言转换器
     */
    var MultiLangConverter = /** @class */ (function () {
        /**
         * 构造函数
         */
        function MultiLangConverter() {
        }
        /**
         * 将数据源中的原始值=>多语控件识别的对象值
         */
        MultiLangConverter.prototype.convertFrom = function (value) {
            var multiLangControlValue = Object.assign({}, value);
            return multiLangControlValue;
        };
        /**
         * 多语控件识别的对象值=>将数据源中的原始值
         */
        MultiLangConverter.prototype.convertTo = function (multiLangControlValue) {
            var value = multiLangControlValue;
            return value;
        };
        return MultiLangConverter;
    }());

    var FilterConditionsConverter = /** @class */ (function () {
        function FilterConditionsConverter() {
        }
        FilterConditionsConverter.prototype.convertFrom = function (conditionsString) {
            if (!conditionsString) {
                return [];
            }
            return JSON.parse(conditionsString);
        };
        FilterConditionsConverter.prototype.convertTo = function (conditions) {
            return JSON.stringify(conditions);
        };
        return FilterConditionsConverter;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    var FarrisKendoGridFormatService = /** @class */ (function () {
        function FarrisKendoGridFormatService(dateService, numberService) {
            this.dateService = dateService;
            this.numberService = numberService;
        }
        /**
         * 列格式化 方法
         * @param dataItem  行数据
         * @param column 列对象
         */
        FarrisKendoGridFormatService.prototype.getColumnFormat = function (dataItem, column$$1) {
            var value = this.getValue(dataItem, column$$1['dataField']);
            // 没有设置行编辑器
            var type = column$$1['dataType'];
            if (type === 'enum') {
                return this.getEnumText(value, column$$1);
            }
            else if (type === 'boolean') {
                return value ? '是' : '否';
            }
            else if (type === 'date') {
                return this.getFormatDate(value, column$$1);
            }
            else if (type === 'number') {
                return this.getFormatNumber(value, column$$1);
            }
            else {
                // 格式化多行文本  和string
                return this.getMultiText(value, column$$1);
            }
        };
        /**
         * 根据id获取value
         * @param dataItem  行数据
         * @param field id,也可能是name.Name这种形式(关联对象id或者udt)
         */
        FarrisKendoGridFormatService.prototype.getValue = function (dataItem, field) {
            var index = field.indexOf('.');
            if (index < 0) {
                return dataItem[field];
            }
            var fields = field.split('.');
            // field字符串组合
            var a = fields.reduce(function (result, next) {
                return result[next];
            }, dataItem);
            return a;
        };
        /**
         * 枚举值格式化
         */
        FarrisKendoGridFormatService.prototype.getEnumText = function (value, column$$1) {
            var enumData = column$$1.enumData;
            if (!enumData) {
                return;
            }
            var tempColumnText;
            enumData.forEach(function (ele) {
                if (ele.value === value) {
                    tempColumnText = ele.name;
                }
            });
            return tempColumnText;
        };
        /**
         * 日期格式化
         * @param value  单元格值
         * @param column 列对象
         */
        FarrisKendoGridFormatService.prototype.getFormatDate = function (value, column$$1) {
            if (devkit.DateUtil.isEmptyDateString(value) === true) {
                return '';
            }
            var dateFormat = column$$1.format;
            if (!dateFormat) {
                return value;
            }
            return this.dateService.formatTo(value, dateFormat);
        };
        /**
         * 数字格式化
         * @param value  单元格值
         * @param column 列对象
         * @todo 数字格式化还不完善  这个只是金额形式的格式化;   初始化value===null时,应该显示为'' 这个还没有
         */
        FarrisKendoGridFormatService.prototype.getFormatNumber = function (value, column$$1) {
            var precision;
            if (column$$1 && column$$1.format) {
                precision = parseInt(column$$1.format.substr(1), 10);
            }
            else if (column$$1 && column$$1.editor) {
                precision = column$$1.editor.precision;
            }
            if (isNaN(precision)) {
                precision = 2;
            }
            if (!value && value !== 0) {
                return '';
            }
            var opts = {
                prefix: column$$1.prefix ? column$$1.prefix : '',
                suffix: column$$1.suffix ? column$$1.suffix : '',
                precision: precision,
                thousand: ',',
                stripZeros: false,
            };
            return this.numberService.formatMoney(value, opts);
        };
        /**
         * 多行文本格式化 shift+enter换行  失去焦点保留原格式
         * @param value  单元格值
         * @param column 列对象
         */
        FarrisKendoGridFormatService.prototype.getMultiText = function (value, column$$1) {
            var strValue = value;
            if (strValue !== '' && !strValue) {
                strValue = '';
            }
            if (typeof strValue !== 'string') {
                var valueType = typeof strValue;
                throw new Error(valueType + "\u7C7B\u578B\u503C\u4E0D\u5408\u6CD5\uFF0C\u65E0\u6CD5\u8FDB\u884C\u683C\u5F0F\u5316");
            }
            // 防止xss
            strValue = strValue.replace(/&/g, '&amp;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')
                .replace(/\"/g, '&quot;')
                .replace(/\'/g, '&#39;')
                .replace(/\//g, '&#x2F;');
            // 如果是多行文本框  保留格式
            if (column$$1.editor && column$$1.editor.type === 'MultiTextBox') {
                var INDEX = strValue.indexOf('\n');
                if (INDEX > -1) {
                    return strValue.replace(/\n/g, '<br>');
                }
                return strValue;
            }
            // 若为string
            return strValue;
        };
        FarrisKendoGridFormatService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        FarrisKendoGridFormatService.ctorParameters = function () {
            return [
                { type: date.DateTimeHelperService },
                { type: number.NumberHelperService }
            ];
        };
        return FarrisKendoGridFormatService;
    }());

    var FarrisTreetableFormatService = /** @class */ (function () {
        function FarrisTreetableFormatService() {
        }
        FarrisTreetableFormatService.prototype.setFormat = function (treeTable) {
            var columns = treeTable.columns;
            columns.forEach(function (column$$1) {
                var dataType = column$$1.dataType;
                if (!column$$1.formatter) {
                    if (dataType === 'date') {
                        column$$1.formatter = {
                            type: 'datetime',
                            options: {
                                format: column$$1.format
                            }
                        };
                    }
                    else if (dataType === 'number') {
                        column$$1.formatter = {
                            type: 'number',
                            options: {
                                prefix: column$$1.prefix ? column$$1.prefix : '',
                                suffix: column$$1.suffix ? column$$1.suffix : '',
                                precision: column$$1.precision,
                                thousand: ',',
                                stripZeros: false,
                            }
                        };
                    }
                    else if (dataType === 'enum') {
                        column$$1.formatter = {
                            type: 'enum',
                            options: {
                                data: column$$1.enumData,
                                valueField: 'value',
                                textField: 'name'
                            }
                        };
                    }
                    else if (dataType === 'boolean') {
                        column$$1.formatter = {
                            type: 'enum',
                            options: {
                                data: [{ name: '是', value: true }, { name: '否', value: false }],
                                valueField: 'value',
                                textField: 'name'
                            }
                        };
                    }
                }
            });
        };
        FarrisTreetableFormatService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        FarrisTreetableFormatService.ctorParameters = function () { return []; };
        return FarrisTreetableFormatService;
    }());

    var StringToDatePipe = /** @class */ (function () {
        function StringToDatePipe() {
        }
        StringToDatePipe.prototype.transform = function (value, exponent) {
            if (devkit.DateUtil.isEmptyDateString(value) === true) {
                return null;
            }
            if (value.includes('年')) {
                var strDate = value.replace('年', '-').replace('月', '-').replace('日', '');
                return new Date(strDate);
            }
            return new Date(value);
        };
        StringToDatePipe.decorators = [
            { type: core.Pipe, args: [{ name: 'parseStrToDate' },] }
        ];
        return StringToDatePipe;
    }());

    var KendoGridFilterDirective = /** @class */ (function (_super) {
        __extends(KendoGridFilterDirective, _super);
        function KendoGridFilterDirective(dropdownList, filterService) {
            var _this = _super.call(this, filterService) || this;
            _this.dropdownList = dropdownList;
            _this.filterService = filterService;
            return _this;
        }
        Object.defineProperty(KendoGridFilterDirective.prototype, "selectedValue", {
            get: function () {
                var filter = this.filterByField(this.column.dataField);
                return filter ? filter.value : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KendoGridFilterDirective.prototype, "defaultItem", {
            get: function () {
                return {
                    value: null,
                    name: '全部'
                };
            },
            enumerable: true,
            configurable: true
        });
        KendoGridFilterDirective.prototype.ngOnInit = function () {
            this.dropdownList.valueField = 'value';
            this.dropdownList.textField = 'name';
            this.dropdownList.valuePrimitive = true;
            this.dropdownList.defaultItem = this.defaultItem;
            this.dropdownList.value = this.selectedValue;
            if (this.column.dataType === 'enum') {
                this.dropdownList.data = this.column.enumData;
            }
            else if (this.column.dataType === 'boolean') {
                this.dropdownList.data = [{ value: true, name: '是' }, { value: false, name: '否' }];
            }
        };
        KendoGridFilterDirective.prototype.onChange = function (value) {
            this.applyFilter(value === null ?
                this.removeFilter(this.column.dataField) :
                this.updateFilter({
                    field: this.column.dataField,
                    operator: 'eq',
                    value: value
                }));
        };
        /*
       * 获取 单元格值  主从表支持
       * @param dataItem 行数据
       * @param field 字段
       */
        KendoGridFilterDirective.prototype.getValue = function (dataItem, field) {
            var index = field.indexOf('.');
            if (index < 0) {
                return dataItem[field];
            }
            var fields = field.split('.');
            // field字符串组合
            return fields.reduce(function (result, next) {
                return result[next];
            }, dataItem);
        };
        KendoGridFilterDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[kendogridFilter]'
                    },] }
        ];
        /** @nocollapse */
        KendoGridFilterDirective.ctorParameters = function () {
            return [
                { type: kendoAngularDropdowns.DropDownListComponent },
                { type: kendoAngularGrid.FilterService }
            ];
        };
        KendoGridFilterDirective.propDecorators = {
            filter: [{ type: core.Input }],
            column: [{ type: core.Input }],
            onChange: [{ type: core.HostListener, args: ['valueChange', ['$event'],] }]
        };
        return KendoGridFilterDirective;
    }(kendoAngularGrid.BaseFilterCellComponent));

    var DateFormatPlaceholderPipe = /** @class */ (function () {
        function DateFormatPlaceholderPipe(viewModel) {
            this.viewModel = viewModel;
        }
        DateFormatPlaceholderPipe.prototype.transform = function (format, controlName) {
            if (!this.viewModel.form || !this.viewModel.form.get(controlName)) {
                return {
                    year: '年',
                    month: '月',
                    day: '日'
                };
            }
            var value = this.viewModel.form.get(controlName).value;
            var dateStr = value;
            if (dateStr) {
                dateStr = value.toISOString();
            }
            if ((devkit.DateUtil.isEmptyDateString(dateStr) === true) && format === 'yyyy年MM月dd日') {
                return {
                    year: ' ',
                    month: ' ',
                    day: ' '
                };
            }
            return {
                year: '年',
                month: '月',
                day: '日'
            };
        };
        DateFormatPlaceholderPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'dateFormatPlaceholder' },] }
        ];
        /** @nocollapse */
        DateFormatPlaceholderPipe.ctorParameters = function () {
            return [
                { type: devkit.ViewModel }
            ];
        };
        return DateFormatPlaceholderPipe;
    }());

    var FormatTotalPipe = /** @class */ (function () {
        function FormatTotalPipe() {
        }
        FormatTotalPipe.prototype.transform = function (value, exponent) {
            // 判断值是否合法
            if (!value && value !== 0) {
                return '';
            }
            if (exponent.dataType === 'number') {
                // 保留小数点后几位
                var dataFormat = exponent.format;
                return value.toFixed(Number(dataFormat.substring(1)));
            }
            return value;
        };
        FormatTotalPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'formatTotal' },] }
        ];
        return FormatTotalPipe;
    }());

    var GridColumnAggregateDirective = /** @class */ (function () {
        function GridColumnAggregateDirective(column$$1, ngZone) {
            this.column = column$$1;
            this.ngZone = ngZone;
        }
        Object.defineProperty(GridColumnAggregateDirective.prototype, "field", {
            get: function () {
                return this.column.field;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GridColumnAggregateDirective.prototype, "aggrType", {
            get: function () {
                var type = 'none';
                if (typeof (this.aggregate) === 'boolean') {
                    // 默认为sum，如果使用指令时传入的input为布尔类型，使用sum。
                    if (this.aggregate) {
                        type = 'sum';
                    }
                }
                else if (typeof (this.aggregate) === 'string') {
                    type = this.aggregate;
                }
                return type;
            },
            enumerable: true,
            configurable: true
        });
        GridColumnAggregateDirective.prototype.recalculateSummary = function (bindingList) {
            var _this = this;
            var summary = null;
            if (this.aggrType === 'sum') {
                var plainData = bindingList.toJSON().map(function (item) {
                    // 考虑帮助和udt的情况，field是a.b的格式。
                    return _this.field.split('.').reduce(function (prevPath, currPath) {
                        return prevPath[currPath];
                    }, item);
                });
                if (plainData && plainData.length) {
                    summary = plainData.reduce(function (prev, curr) {
                        return prev + curr;
                    });
                }
            }
            else if (this.aggrType === 'count') {
                // 计数，如果启用分页，只计算当前页，因此使用length而非total。
                summary = bindingList.length;
            }
            this.updateFooter(summary);
        };
        GridColumnAggregateDirective.prototype.updateFooter = function (content) {
            if (this.aggregate) {
                // 存在性能问题，去掉setTimeout。
                // 列表的列越多，此处问题越严重，需要正向解决以下错误。
                // todo: settimeout是为了解决数据变化时angular报错，如果更新页脚的逻辑不在gridbinding发起，是否还存在问题？
                // setTimeout(() => {
                this.column['summary'] = content;
                // });
            }
        };
        GridColumnAggregateDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[aggregate]',
                    },] }
        ];
        /** @nocollapse */
        GridColumnAggregateDirective.ctorParameters = function () {
            return [
                { type: kendoAngularGrid.ColumnComponent },
                { type: core.NgZone }
            ];
        };
        GridColumnAggregateDirective.propDecorators = {
            aggregate: [{ type: core.Input }]
        };
        return GridColumnAggregateDirective;
    }());
    var GridSummaryDirective = /** @class */ (function () {
        function GridSummaryDirective(bindingData) {
            this.bindingData = bindingData;
        }
        GridSummaryDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[farrisSummary]'
                    },] }
        ];
        /** @nocollapse */
        GridSummaryDirective.ctorParameters = function () {
            return [
                { type: devkit.BindingData }
            ];
        };
        GridSummaryDirective.propDecorators = {
            summary: [{ type: core.Input, args: ['farrisSummary',] }]
        };
        return GridSummaryDirective;
    }());

    /**
     * 多选列表工具类
     */
    var MultiSelectGridUtility = /** @class */ (function () {
        function MultiSelectGridUtility() {
        }
        /**
         * 渲染切换行
         */
        MultiSelectGridUtility.renderClickChangedRow = function (gridComponent, selectedRowContext) {
            if (!gridComponent) {
                return;
            }
            var currentRowIndex = selectedRowContext.currentRowIndex;
            // 渲染当前行
            this.addRowSelectedStyle(gridComponent, currentRowIndex);
            // 渲染上一行
            var lastRowIndex = selectedRowContext.lastRowIndex;
            if (!this.checIfIsSameRelativeIndex(gridComponent, currentRowIndex, lastRowIndex)) {
                this.removeRowSelectedStyle(gridComponent, lastRowIndex);
            }
        };
        /**
         * 检查当前行索引值和上一个选中行索引值的相对当前页面的索引值是否相同
         */
        MultiSelectGridUtility.checIfIsSameRelativeIndex = function (gridComponent, currentRowIndex, lastRowIndex) {
            var isSameRelativeIndex = false;
            if (currentRowIndex === lastRowIndex) {
                isSameRelativeIndex = true;
                return isSameRelativeIndex;
            }
            if ((Math.abs(currentRowIndex - lastRowIndex)) % (gridComponent.pageSize) === 0) {
                isSameRelativeIndex = true;
                return isSameRelativeIndex;
            }
            return isSameRelativeIndex;
        };
        /**
         * 检测是否启用分页功能
         */
        MultiSelectGridUtility.checkIfEnablePaging = function (gridComponent) {
            var isPageable = false; // 默认未启用分页
            if (!gridComponent) {
                return isPageable;
            }
            if (typeof gridComponent.pageable === 'boolean') {
                isPageable = gridComponent.pageable;
            }
            else if (typeof gridComponent.pageable === 'object') {
                isPageable = true;
            }
            return isPageable;
        };
        /**
         * 渲染checkbox选择
         */
        MultiSelectGridUtility.renderSelectedChangeCheckbox = function (elementRef, $event) {
            var currentRowIndex = $event.index;
            var trCollection = this.getTrCollection(elementRef);
            if (trCollection == null || trCollection.length <= 0 || trCollection.length < currentRowIndex) {
                return;
            }
            // 渲染checked行
            var currentTableRowElement = trCollection[currentRowIndex];
            if (!currentTableRowElement) {
                return;
            }
            if ($event.selected) { // checked
                this.appendAtrributeValue(currentTableRowElement, 'class', this.CHECKBOXED_ROW_STYLE_NAME);
            }
            else { // unchecked
                this.removeAttributeSpecificValue(currentTableRowElement, 'class', this.CHECKBOXED_ROW_STYLE_NAME);
            }
        };
        /**
         * 添加行的“已选中样式”
         * 暂无需求，不对外暴露
         */
        MultiSelectGridUtility.addRowSelectedStyle = function (gridComponent, rowIndex) {
            if (!gridComponent || rowIndex < 0) {
                return;
            }
            var currentRowElement = this.getRelativeRowInCurrentPage(gridComponent, rowIndex);
            if (!currentRowElement) {
                return;
            }
            this.appendAtrributeValue(currentRowElement, 'class', this.CURRENT_ROW_STYLE_NAME);
        };
        /**
         * 移除行的“已选中样式”
         * 需求：kendo-grid在分页时，不会移除已选中样式
         */
        MultiSelectGridUtility.removeRowSelectedStyle = function (gridComponent, rowIndex) {
            if (!gridComponent || rowIndex < 0) {
                return;
            }
            var currentRowElement = this.getRelativeRowInCurrentPage(gridComponent, rowIndex);
            if (!currentRowElement) {
                return;
            }
            this.removeAttributeSpecificValue(currentRowElement, 'class', this.CURRENT_ROW_STYLE_NAME);
        };
        /**
         * 获取指定行在当前页面对应的行元素
         */
        MultiSelectGridUtility.getRelativeRowInCurrentPage = function (gridComponent, rowIndex) {
            var rowElementInCurrentPage = null;
            if (!gridComponent || rowIndex < 0) {
                return rowElementInCurrentPage;
            }
            var gridElement = gridComponent.wrapper;
            // 启用分页后，需要更新当前行
            var isPaging = this.checkIfEnablePaging(gridComponent);
            if (isPaging) {
                rowIndex = rowIndex % (gridComponent.pageSize); // 对pageSize取模
            }
            var trCollection = this.getTrCollection(gridElement);
            if (trCollection == null || trCollection.length <= 0) {
                return rowElementInCurrentPage;
            }
            rowElementInCurrentPage = trCollection[rowIndex];
            return rowElementInCurrentPage;
        };
        /**
         * 获取当前grid的tr集合
         */
        MultiSelectGridUtility.getTrCollection = function (elementRef) {
            if (!elementRef || !elementRef.nativeElement) {
                return null;
            }
            var kendoGridTbodyElements = elementRef.nativeElement.getElementsByTagName('tbody');
            if (!kendoGridTbodyElements || kendoGridTbodyElements.length <= 0) {
                return null;
            }
            var trCollection = kendoGridTbodyElements[0].getElementsByTagName('tr');
            return trCollection;
        };
        /**
         * 向元素的指定属性追加值
         */
        MultiSelectGridUtility.appendAtrributeValue = function (currentElement, attributeName, attributeValue) {
            var newAttributeValue = currentElement.getAttribute(attributeName);
            if (newAttributeValue === null || newAttributeValue === '' || newAttributeValue.length <= 0) {
                newAttributeValue = attributeValue;
            }
            else {
                if (newAttributeValue.indexOf(attributeValue) < 0) { // 存在检测，避免重复添加
                    newAttributeValue += ' ' + attributeValue;
                }
            }
            currentElement.setAttribute(attributeName, newAttributeValue);
        };
        /**
         * 移除元数据指定属性的特性属性值
         */
        MultiSelectGridUtility.removeAttributeSpecificValue = function (currentElement, attributeName, needRemoveAttributeValue) {
            var lastClassAttributeValue = currentElement.getAttribute(attributeName);
            if (!lastClassAttributeValue) {
                return;
            }
            var index = lastClassAttributeValue.lastIndexOf(needRemoveAttributeValue);
            if (index < 0) {
                return;
            }
            var tempLastClassAttributeValue = lastClassAttributeValue.substring(0, index - 1);
            lastClassAttributeValue = tempLastClassAttributeValue + ' '
                + lastClassAttributeValue.substring(index + needRemoveAttributeValue.length);
            currentElement.setAttribute(attributeName, lastClassAttributeValue);
        };
        MultiSelectGridUtility.CURRENT_ROW_STYLE_NAME = 'f-state-selected';
        MultiSelectGridUtility.CHECKBOXED_ROW_STYLE_NAME = 'f-state-checked';
        return MultiSelectGridUtility;
    }());

    /**
     * 选中行上下文
     */
    var SelectedRowContext = /** @class */ (function () {
        function SelectedRowContext() {
        }
        return SelectedRowContext;
    }());

    /*
     * Kendo Grid 数据绑定指令
     *
     * TODO:
     * 1、整体刷存在性能问题；
     * 2、选中和当前行没有区分开；
     */
    var KendoGridBindingDirective = /** @class */ (function (_super) {
        __extends(KendoGridBindingDirective, _super);
        /**
         * 构造函数
         * @param  grid 宿主Grid
         */
        function KendoGridBindingDirective(bindingData, uiState, eventBus, viewModel, grid, selectionDir, dialogSer, dateService, kendogridFormatSer, rts, ngZone) {
            var _this = _super.call(this, grid) || this;
            _this.bindingData = bindingData;
            _this.uiState = uiState;
            _this.eventBus = eventBus;
            _this.viewModel = viewModel;
            _this.grid = grid;
            _this.selectionDir = selectionDir;
            _this.dialogSer = dialogSer;
            _this.dateService = dateService;
            _this.kendogridFormatSer = kendogridFormatSer;
            _this.rts = rts;
            _this.ngZone = ngZone;
            /* 行样式事件 */
            // @Input()
            // rowClassName: (context: any) => any;
            // tslint:disable-next-line:no-output-rename
            _this.appendRow = new core.EventEmitter();
            /* 绑定排序事件 */
            _this.sortChangeEvent = new core.EventEmitter();
            /* 行样式事件 */
            _this.rowClass = new core.EventEmitter();
            _this.hiddenColLen = 0;
            /**
             * TODO: 从实体获取其默认值
             * 当前行索引值，默认第一个
             */
            _this.rowIndex = 0;
            _this.columnIndex = 0;
            _this.currentSkip = 0;
            /**
             * 是否启用多选，默认未启用
             */
            _this.isMultipleSelectionMode = false;
            /**
             * 上一个选中行，默认不存在
             */
            _this.lastRowIndex = -1;
            /**
             * 选中行切换事件
             */
            _this.selectedRowChange = new core.EventEmitter();
            /**
             * checkbox选择事件
             */
            _this.selectedCheckboxChange = new core.EventEmitter();
            _this.selectionDir.selectedKeys = [];
            _this.viewModel.uiState.setPropertyValue('ids', _this.selectionDir.selectedKeys);
            var appContext = _this.viewModel.frameContext.getFormAppContext();
            if (appContext && appContext.hasOwnProperty('messagePipe')) {
                appContext.messagePipe.subscribe(function (message) {
                    _this.grid.closeCell();
                });
            }
            return _this;
        }
        Object.defineProperty(KendoGridBindingDirective.prototype, "gridOption", {
            get: function () {
                return this.grid['gridOption'];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KendoGridBindingDirective.prototype, "len", {
            get: function () {
                return this.grid.columns.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KendoGridBindingDirective.prototype, "IsMultipleSelectionMode", {
            get: function () {
                if (!this.grid) {
                    return this.isMultipleSelectionMode;
                }
                if (this.grid.selectable) { // 优先尝试从this.grid.selectable获取
                    // tslint:disable-next-line: no-string-literal
                    if (this.grid.selectable['mode'] === 'multiple') {
                        this.isMultipleSelectionMode = true;
                    }
                    else {
                        this.isMultipleSelectionMode = false;
                    }
                }
                else {
                    if (this.grid.selectableSettings && this.grid.selectableSettings.mode === 'multiple') {
                        this.isMultipleSelectionMode = true;
                    }
                }
                return this.isMultipleSelectionMode;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(KendoGridBindingDirective.prototype, "bindingList", {
            /**
             * 绑定列表(Grid对应数据源)
             */
            get: function () {
                // 根实体
                if (this.viewModel.bindingPath === '/' || !this.viewModel.bindingPath) {
                    return this.bindingData.list;
                }
                // 子实体
                var bindingPath = this.viewModel.bindingPath.substr(1);
                bindingPath = bindingPath[0].toLowerCase() + bindingPath.substring(1, bindingPath.length);
                var paths = bindingPath.split('/');
                var filteredPaths = paths.filter(function (part) {
                    return part !== '';
                });
                return this.bindingData.getValue(filteredPaths);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 获取分页信息
         */
        KendoGridBindingDirective.prototype.getPagingInfo = function () {
            var bindingPath = this.viewModel.bindingPath;
            var bindingData = this.viewModel.bindingData;
            var pagingInfo = bindingData.pagingInfo;
            if (bindingPath === '/') {
                return pagingInfo;
            }
            else {
                var bindingPaths = bindingPath.substr(1).split('/').filter(function (item) { return !!item && item.length > 0; }).map(function (item) {
                    return item.substring(0, item.length - 1);
                });
                bindingPaths.forEach(function (path) {
                    pagingInfo = pagingInfo && pagingInfo[path] || {};
                });
                return pagingInfo;
            }
        };
        /**
         * 指令初始化后
         */
        KendoGridBindingDirective.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            // 初始化state，分组使用。
            this.initDataState();
            this.refreshView();
            if (this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.frameComponent) {
                this.viewModel.frameContext.frameComponent.componentType = devkit.ComponentType.kendoGridComponent;
            }
            // 数据变化
            this.bindingChangeSubscription = this.bindingData.changes.subscribe(function (change) {
                _this.refreshView(change);
                if (change.type === devkit.ChangeType.Load) {
                    // load时，在多选模式下，需清空选中集合
                    if (_this.isMultipleSelectionMode) {
                        var isMatch_1 = _this.checkIfChangeMatchBindingPath(change);
                        if (isMatch_1) {
                            // 清空多选集合
                            _this.selectionDir.selectedKeys = [];
                            _this.viewModel.uiState.setPropertyValue('ids', _this.selectionDir.selectedKeys);
                            _this.ngZone.runOutsideAngular(function () {
                                // 渲染初始选中行
                                setTimeout(function () {
                                    var rowSelectedContext = new SelectedRowContext();
                                    var isPageable = MultiSelectGridUtility.checkIfEnablePaging(_this.grid);
                                    if (isPageable) {
                                        _this.rowIndex = _this.grid.skip;
                                    }
                                    else {
                                        _this.rowIndex = 0;
                                    }
                                    rowSelectedContext.currentRowIndex = _this.rowIndex;
                                    rowSelectedContext.lastRowIndex = _this.lastRowIndex;
                                    _this.handleSelectedRowChange(rowSelectedContext);
                                }, 300);
                            });
                        }
                    }
                }
                // TODO: 使用策略模式重构
                // bindingData 同步 SelectedKeys
                if (change.type === devkit.ChangeType.Remove) {
                    _this.syncDeletedKeys(change.value);
                }
                var isMatch = _this.checkIfChangeMatchBindingPath(change);
                if (isMatch) {
                    _this.handleSelectedKeyChange(_this.bindingList.currentId);
                }
                // 渲染当前行
                if (isMatch && _this.checkCurrentRowIdExists() && change.type === devkit.ChangeType.SelectionChanged && !_this.dataId) {
                    _this.renderCurrentRow(_this.bindingList.currentId);
                }
                // tslint:disable-next-line: max-line-length
                // FIXME:需要有重置页码的时机
                /*if ((change.type === ChangeType.SelectionChanged || change.type === ChangeType.GlobalSelectionChanged) && this.currentRowId !== this.bindingList.currentId) {
                    this.resetPageInfo();
                }*/
                // 触发变更检测
                if (change.type === devkit.ChangeType.Load || change.type === devkit.ChangeType.SelectionChanged
                    || change.type === devkit.ChangeType.Append || change.type === devkit.ChangeType.Remove) {
                    // 触发变更检测
                    if (_this.grid && _this.grid['changeDetectorRef'] && _this.grid['changeDetectorRef']['detectChanges']) {
                        _this.grid['changeDetectorRef']['detectChanges']();
                    }
                }
            });
            if (this.editable === true && this.form === null) {
                throw Error('启用编辑时，必须指定form');
            }
            if (!this.grid || !this.farrisBindingGridOption || !this.farrisBindingGridOption['fields']) {
                return;
            }
            var gridColumns = this.farrisBindingGridOption['fields'];
            var gridOption = this.farrisBindingGridOption;
            // 判断列中是否存在固定列
            gridOption.lockable = function (columns) {
                return columns.some(function (ele) {
                    return ele.frozen;
                });
            };
            this.rowClass.emit(this.grid);
            // 添加列属性或者方法
            gridColumns.forEach(function (element) {
                // 自定义超链
                if (element.linkedLabelEnabled && !element.linkEvent) {
                    element.linkEvent = function () {
                        return;
                    };
                }
                // 若没有自定义格式化方法  每个列对象绑定格式化方法
                if (!element.getColumnFormat) {
                    element.getColumnFormat = function (dataItem, column$$1) {
                        return _this.kendogridFormatSer.getColumnFormat(dataItem, column$$1);
                    };
                }
                // 如果没有自定义类样式 每个列绑定 格式化方法
                if (!element.getClassName) {
                    element.getClassName = function (dataItem, column$$1) { return ''; };
                }
                // 自定义帮助前后事件
                if (element.editor && element.editor.type === 'LookupEdit') {
                    // 帮助前事件
                    if (!element.dictPicking) {
                        element.dictPicking = function (param) {
                            return rxjs.of(true);
                        };
                    }
                    // 帮助后事件
                    if (!element.dictPicked) {
                        element.dictPicked = function (param) {
                            // 重新进入编辑
                            _this.cellClickHandler(_this.cellClickParam);
                            return rxjs.of(true);
                        };
                    }
                }
            });
            // 绑定gridOption
            this.bindingGridOption();
            // 多选模式下，设置初始选中行
            if (this.IsMultipleSelectionMode) {
                // TODO: 移除 setTimeout
                var self_1 = this;
                this.ngZone.runOutsideAngular(function () {
                    setTimeout(function () {
                        var rowSelectedContext = new SelectedRowContext();
                        rowSelectedContext.currentRowIndex = self_1.rowIndex;
                        rowSelectedContext.lastRowIndex = self_1.lastRowIndex;
                        self_1.handleSelectedRowChange(rowSelectedContext);
                    }, 300);
                });
            }
        };
        KendoGridBindingDirective.prototype.ngAfterViewInit = function () {
            // this.gridElement = document.querySelector('.k-grid');
            // // 绑定grid keydown对象的方法
            // this.ngZone.runOutsideAngular(() => {
            //   this.gridKeydownEvent = this.enterCell.bind(this);
            //   this.gridCellClickEvent = this.cellClickHandler.bind(this);
            //   this.gridCellCloseEvent = this.cellCloseHandler.bind(this);
            //   this.gridElement.addEventListener('keydown', this.gridKeydownEvent);
            //   this.gridElement.addEventListener('cellClick', this.gridCellClickEvent);
            //   this.gridElement.addEventListener('cellClose', this.gridCellCloseEvent);
            // });
        };
        /**
         * 检测change的路径和BindingPath是否匹配
         */
        KendoGridBindingDirective.prototype.checkIfChangeMatchBindingPath = function (change) {
            var isMatch = false;
            if (!change || !change.path) {
                return isMatch;
            }
            var changePathArray = change.path;
            if (!changePathArray) {
                return isMatch;
            }
            if (!(this.bindingData) && !(this.bindingData.bindingPath)) {
                return isMatch;
            }
            var bingdingPathArray = this.bindingData.bindingPath.split('/');
            if (bingdingPathArray.length <= 0) {
                return isMatch;
            }
            if (changePathArray.length === 0) { // 主表
                if (this.bindingData.bindingPath === '/') {
                    isMatch = true;
                }
            }
            else if (change.path.length === 1) { // 主从表
                if (bingdingPathArray.length === 2 && bingdingPathArray[1] === change.path[0]) {
                    isMatch = true;
                }
            }
            else if (change.path.length === 2) { // 主从从表
                if (bingdingPathArray.length === 3 && bingdingPathArray[1] === change.path[0] && bingdingPathArray[2] === change.path[1]) {
                    isMatch = true;
                }
            }
            return isMatch;
        };
        /**
         * 处理选中主键变更
         */
        KendoGridBindingDirective.prototype.handleSelectedKeyChange = function (currentId) {
            var selectedKeys = this.selectionDir.selectedKeys;
            if (!currentId) {
                // 如果当前行时null，但selectedKeys里有值，清空并发送一次行切换
                if (selectedKeys.length > 0) {
                    var removedSelectedKeys = selectedKeys.splice(0, selectedKeys.length);
                    if (removedSelectedKeys.indexOf(null) === -1) {
                        this.emitSelectedRowChange({ currentRowId: null });
                    }
                }
                return;
            }
            var oldCurrentRowId = null;
            if (this.IsMultipleSelectionMode) {
                oldCurrentRowId = this.currentRowId;
            }
            else {
                oldCurrentRowId = this.selectionDir.selectedKeys.length === 0
                    ? null : this.selectionDir.selectedKeys[0];
            }
            // TODO:if (this.currentRowId !== currentId) {
            if (oldCurrentRowId !== currentId) {
                var selectedRowContext = {};
                selectedRowContext.currentRowId = currentId;
                this.currentRowId = currentId;
                this.emitSelectedRowChange(selectedRowContext);
            }
        };
        /**
         * 发射选中行切换事件
         * @description 统一单选模式和多选模式下的行切换事件
         */
        KendoGridBindingDirective.prototype.emitSelectedRowChange = function (selectedRowContext) {
            if (!this.IsMultipleSelectionMode) { // 向后兼容
                var currentId = selectedRowContext.currentRowId;
                this.selectionDir.selectedKeys = [currentId];
                this.selectionDir.selectedKeysChange.emit(this.selectionDir.selectedKeys);
            }
            this.selectedRowChange.emit(selectedRowContext);
        };
        KendoGridBindingDirective.prototype.checkCurrentRowIdExists = function () {
            var isExist = false;
            if (this.bindingList && this.bindingList.currentId && this.bindingList.currentId.length > 0) {
                isExist = true;
            }
            return isExist;
        };
        /**
         * 同步已删除键到选中集合
         */
        KendoGridBindingDirective.prototype.syncDeletedKeys = function (deletedValueCollection) {
            var _this = this;
            if (!deletedValueCollection) {
                return;
            }
            deletedValueCollection.forEach(function (id) {
                var index = _this.selectionDir.selectedKeys.indexOf(id);
                if (index > -1) {
                    _this.selectionDir.selectedKeys.splice(index, 1);
                    // selectedKeys被清空的时候，触发一次行变更
                    if (_this.selectionDir.selectedKeys.length === 0) {
                        _this.emitSelectedRowChange({ currentRowId: null });
                    }
                }
            });
        };
        KendoGridBindingDirective.prototype.renderCurrentRow = function (currentId) {
            if (!currentId || currentId === '') { // 不存在当前行
                return;
            }
            // TODO:使用策略模式重构
            if (this.IsMultipleSelectionMode) {
                return;
            }
            this.renderSelectionRow(this.bindingList.currentId, this.selectionDir.selectedKeys);
        };
        /**
         * 指令输入变更处理
         */
        KendoGridBindingDirective.prototype.ngOnChanges = function (changes) {
            _super.prototype.ngOnChanges.call(this, changes);
            this.refreshView();
        };
        /**
         * 指令销毁，注销订阅
         */
        KendoGridBindingDirective.prototype.ngOnDestroy = function () {
            if (this.bindingChangeSubscription) {
                this.bindingChangeSubscription.unsubscribe();
            }
        };
        KendoGridBindingDirective.prototype.refreshView = function (change) {
            // this.bindData();
            this.refreshData(change);
            // 刷新页脚合计信息。客户端合计，暂时放这里，服务端合计时最好从这里移走。by justin
            this.refreshSummary();
        };
        /**
         * 绑定data到宿主grid上
         * @deprecated
         */
        KendoGridBindingDirective.prototype.bindData = function () {
            /*const data = this.bindingList.toJSON();
            let skip = 0;
            if (this.bindingList.pageIndex > 0) {
              skip = (this.bindingList.pageIndex - 1) * this.bindingList.pageSize;
            }
            this.updatePager(this.bindingList.pageSize, skip);
            const processed = process(data, Object.assign({}, this.state, { skip: 0 }));
            processed.total = this.bindingList.total;
            this.grid.data = processed;*/
        };
        KendoGridBindingDirective.prototype.refreshData = function (change) {
            var skip = 0;
            var _a = this.getPagingInfo() || {}, _b = _a.pageIndex, pageIndex = _b === void 0 ? 1 : _b, _c = _a.pageSize, pageSize = _c === void 0 ? 0 : _c;
            if (pageIndex > 0) {
                skip = (pageIndex - 1) * pageSize;
            }
            this.updatePager(pageSize, skip);
            this.endCellEdit(change);
            this.data = this.bindingList.toJSON({ ignoreMultiLangInput: true });
        };
        /**
         * 退出编辑状态
         * @param change 变更
         */
        KendoGridBindingDirective.prototype.endCellEdit = function (change) {
            var isEditing = this.grid.isEditing;
            if (change && change.type === devkit.ChangeType.Load && isEditing) {
                this.grid.cancelCell();
            }
        };
        KendoGridBindingDirective.prototype.refreshSummary = function () {
            var _this = this;
            if (this.aggrColumns) {
                this.aggrColumns.forEach(function (aggrCol) {
                    if (aggrCol.aggregate) {
                        aggrCol.recalculateSummary(_this.bindingList);
                    }
                });
            }
        };
        KendoGridBindingDirective.prototype.onPageChange = function (event) {
            var _a = event || {}, _b = _a.skip, skip = _b === void 0 ? 0 : _b, _c = _a.take, take = _c === void 0 ? 0 : _c;
            // this.bindingList.setPaginationInfo(skip, take);
            this.bindingData.setPagingInfo(skip, take, this.viewModel.bindingPath);
            // 移除选中行样式
            MultiSelectGridUtility.removeRowSelectedStyle(this.grid, this.rowIndex);
        };
        /**
         * 重置grid分页信息
         */
        KendoGridBindingDirective.prototype.resetPageInfo = function () {
            var _a = (this.getPagingInfo() || {}).pageSize, pageSize = _a === void 0 ? 0 : _a;
            this.bindingData.setPagingInfo(0, pageSize, this.viewModel.bindingPath);
        };
        KendoGridBindingDirective.prototype.initDataState = function () {
            // const groups: GroupDescriptor[] = [];
            // if (this.groupField) {
            //   groups.push({field: this.groupField, aggregates: this.aggregates||[]});
            //   this.grid.group = groups;
            // }
            // this.state = Object.assign(this.state, {group: groups});
            var e_1, _a;
            var aggregatesDes = [];
            if (this.groupAggrFields) {
                try {
                    for (var _b = __values(this.groupAggrFields), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var groupAggrField = _c.value;
                        aggregatesDes.push({ field: groupAggrField, aggregate: 'sum' });
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
            }
            var group = [];
            if (this.groupField) {
                group.push({ field: this.groupField, aggregates: aggregatesDes });
            }
            this.group = group;
        };
        /*
         * @override
         * @param state State
         */
        KendoGridBindingDirective.prototype.onStateChange = function (state) {
            // 说明：pager根据skip计算当前页码。kendo grid内部会在filter state变化时把skip变为0（重置到第一页）。
            // 因此需要重写onStateChange方法，修正skip
            if (state.skip !== this.currentSkip) {
                state.skip = this.currentSkip;
            }
            // 使用kendo默认的处理state的逻辑
            this.applyState(state);
            this.rebind();
        };
        // protected applyState({skip, take, sort, group, filter}: State): void {
        //   this.skip = skip;
        //   this.pageSize = take;
        //   this.sort = sort;
        //   this.group = group;
        //   this.filter = filter;
        // }
        /*
         * @override 服务器端分页取数。process使用的state中skip应为0，否则不显示数据
         * @param state State
         */
        KendoGridBindingDirective.prototype.process = function (state) {
            // if (this.editing) {
            //   state.sort = null;
            // } else {
            //   state.sort = this.originalSort;
            // }
            state.skip = 0;
            var _a = this.getPagingInfo() || {}, _b = _a.pageSize, pageSize = _b === void 0 ? 0 : _b, _c = _a.total, totalCount = _c === void 0 ? 0 : _c;
            // fix：不启用分页时，take=0导致process不返回数据
            if (state.take === 0) {
                state.take = this.bindingList.length;
            }
            else {
                state.take = pageSize;
            }
            // 编辑模式的判断依据为pageSize小于绑定数据的数量且启用分页
            var isEditMode = state.take < this.bindingList.length;
            if (isEditMode) {
                state.take = this.bindingList.length;
            }
            var processed = _super.prototype.process.call(this, state);
            // fix:数据从无到有时分页不启用
            processed.total = Math.max(totalCount, this.bindingList.length);
            // 分页编辑模式下数据总记录数不能等于真实的数据数据，否则分页工具条就会自动增加分页页签
            if (isEditMode) {
                processed.total = totalCount || 1;
            }
            return processed;
        };
        /*
         * 选中行主键变化处理
         * @param event { SelectionEvent} 选中行变化处理
         */
        KendoGridBindingDirective.prototype.selectedKeysChangeHandler = function (selectedKeys) {
            if (!(this.IsMultipleSelectionMode)) { // 单选模式下
                // 设置BindingData中的当前行
                this.setSelectionIdToBindingData(selectedKeys[selectedKeys.length - 1]);
            }
            this.viewModel.uiState.setPropertyValue('ids', this.selectionDir.selectedKeys); // 更新集合
        };
        /*
         * 处理Grid行切换事件
         * @param event { SelectionEvent} 行切换事件对象
         */
        KendoGridBindingDirective.prototype.selectionChangeHandler = function (event) {
            if (this.IsMultipleSelectionMode) {
                this.handleSelectedCheckboxChange(this.grid.wrapper, event);
            }
        };
        /**
         * 处理checkbox选中事件
         */
        KendoGridBindingDirective.prototype.handleSelectedCheckboxChange = function (elementRef, event) {
            MultiSelectGridUtility.renderSelectedChangeCheckbox(elementRef, event);
            this.selectedCheckboxChange.emit(event);
        };
        /*
         * 单元格点击处理
         * @param event { CellClickEvent } 单元格单击事件对象
         */
        KendoGridBindingDirective.prototype.cellClickHandler = function (event) {
            this.cellClickParam = event;
            this.cellClickEvent = event;
            this.rowIndex = event.rowIndex;
            this.columnIndex = event.columnIndex;
            this.sender = event.sender;
            // 多选模式下，且不分组的情况下，检测行切换
            if (this.IsMultipleSelectionMode && !this.gridOption.groupable) {
                var currentRowIndex = event.rowIndex;
                if (currentRowIndex !== this.lastRowIndex) {
                    var rowSelectedContext = new SelectedRowContext();
                    rowSelectedContext.currentRowIndex = currentRowIndex;
                    rowSelectedContext.lastRowIndex = this.lastRowIndex;
                    this.handleSelectedRowChange(rowSelectedContext);
                }
            }
            // 设置实体的当前行
            this.dataId = this.getSelectedIdFromGrid(event.dataItem);
            this.setSelectionIdToBindingData(this.dataId);
            // 若状态机不是可编辑状态 不可编辑
            if (!this.isEditable()) {
                return;
            }
            // 列模板不存在  不可编辑
            if (!event.column.editTemplate) {
                return;
            }
            if (event.type === 'click' && !event.isEdited) {
                // 如果存在显隐状况  确定正确的columnIndex
                var originColums = this.getColumns(this.gridOption.fields);
                var columns = this.getColumns(originColums);
                var currentColumnIndex = columns.findIndex(function (col) { return col.dataField === event.column.field; });
                var hiddenColLen = columns.slice(0, currentColumnIndex + 1).filter(function (col) { return !col.visible; }).length;
                // 赋值全局行索引  列索引
                this.rowIndex = event.rowIndex;
                this.columnIndex = event.columnIndex + hiddenColLen;
                this.hiddenColLen = hiddenColLen;
                this.sender = event.sender;
                this.setEditable(this.rowIndex, this.columnIndex);
            }
        };
        /**
         * 处理选中行切换事件
         */
        KendoGridBindingDirective.prototype.handleSelectedRowChange = function (rowSelectedContext) {
            MultiSelectGridUtility.renderClickChangedRow(this.grid, rowSelectedContext);
            this.rowIndex = rowSelectedContext.currentRowIndex;
            this.lastRowIndex = rowSelectedContext.currentRowIndex;
            // 更新当前行
            var id = this.getPrimary(this.rowIndex);
            this.setSelectionIdToBindingData(id);
        };
        /**
         * 获取指定行的主键
         * @param row 行号
         */
        KendoGridBindingDirective.prototype.getPrimary = function (row) {
            var data = this.grid.data;
            if (data && !Array.isArray(data) && data.hasOwnProperty('data')) {
                data = data.data;
            }
            var _a = this.getPagingInfo() || {}, _b = _a.pageIndex, pageIndex = _b === void 0 ? 1 : _b, _c = _a.pageSize, pageSize = _c === void 0 ? 0 : _c;
            var skip = this.bindingList.skip;
            // 不分页或者第一页时取不需要修改行号
            var rowNumber = pageSize === 0 || pageIndex === 1 ? row : row - skip;
            if (data.length > rowNumber) {
                return data[rowNumber][this.bindingList.primaryKey];
            }
            return null;
        };
        /*
         * 单元格结束编辑处理
         * @param event 单元格结束编辑事件对象
         */
        KendoGridBindingDirective.prototype.cellCloseHandler = function (event) {
            if (this.dialogSer.hasDialogOpened()) {
                event.preventDefault();
                return;
            }
            if (this.rts) {
                // 帮助组件文本变化后去查询
                if (this.rts.getFormState('lookup.pending')) {
                    event.preventDefault();
                    return;
                }
                // 点击帮助确定可取消按钮后不结束当前单元格编辑
                if (event.originalEvent) {
                    if (this.rts.eventPath(event.originalEvent).find(function (n) { return n.tagName === 'FARRIS-DIALOG'; })) {
                        event.preventDefault();
                        return;
                    }
                }
            }
            var formGroup = event.formGroup, column$$1 = event.column, dataItem = event.dataItem, rowIndex = event.rowIndex;
            var columns = this.getColumns(this.gridOption.fields);
            var currentCol = columns.find(function (element) {
                return element.dataField === column$$1.field;
            });
            var formControlValue = formGroup[currentCol.editor.binding.path].value;
            if (currentCol.getDynamicData) {
                // 若此列是动态单元格列
                currentCol = currentCol.getDynamicData(dataItem, currentCol);
            }
            this.setValue(formControlValue, currentCol);
        };
        /*
           * 回车  切换单元格
           * @param event 键盘按下事件
           */
        KendoGridBindingDirective.prototype.enterCell = function (e) {
            var _this = this;
            // 回车键
            if (!e.shiftKey && e.keyCode === 13) {
                // textarea enter 屏蔽换行操作
                e.preventDefault();
                if (!this.sender) {
                    return;
                }
                // 由于keydown 事件会先执行，所以这里先要执行blur 事件；
                e.target.blur();
                this.ngZone.runOutsideAngular(function () {
                    setTimeout(function () {
                        if (_this.rts && _this.rts.getFormState('lookup.pending')) {
                            e.preventDefault();
                            return;
                        }
                        _this.enterNextCell();
                    }, 201);
                });
            }
        };
        /*
           * 绑定grid option
           * @param dataItem 行数据
           */
        KendoGridBindingDirective.prototype.bindingGridOption = function () {
            if (!this.farrisBindingGridOption) {
                return;
            }
            Object.defineProperty(this.grid, 'gridOption', { value: this.farrisBindingGridOption });
        };
        /*
         * 更新Grid分页状态
         * @param take
         * @param skip
         */
        KendoGridBindingDirective.prototype.updatePager = function (take, skip) {
            if (take === 0) {
                this.currentSkip = 0;
                this.pageSize = 0;
                this.skip = 0;
                this.grid.pageable = false;
            }
            else {
                this.currentSkip = skip;
                this.skip = skip;
                this.pageSize = take;
                this.grid.pageable = {
                    buttonCount: 10,
                    info: true,
                    type: 'numeric',
                    pageSizes: false,
                    previousNext: true
                };
            }
        };
        /*
         * 设置单元格可编辑性
         * @param dataItem 行数据
         * @param column 列对象
         * @param rowIndex 行索引
         * @param columnIndex 列索引
         * @param sender grid实例
         */
        KendoGridBindingDirective.prototype.setEditable = function (rowNumber, columnNumber) {
            var data = this.grid.data['data'];
            var _a = this.getPagingInfo() || {}, _b = _a.pageIndex, pageIndex = _b === void 0 ? 1 : _b, _c = _a.pageSize, pageSize = _c === void 0 ? 0 : _c;
            var skip = this.bindingList.skip;
            // 不分页或者第一页时取不需要修改行号
            var dataRowNumber = pageSize === 0 || pageIndex === 1 ? rowNumber : rowNumber - skip;
            var item = data[dataRowNumber];
            if (this.gridOption.groupable) {
                item = this.getGroupItem(data, dataRowNumber);
            }
            var originColums = this.getColumns(this.gridOption.fields);
            var columns = this.getColumns(originColums);
            /* 假如列的顺序改变 比如存在固定列  那么应该获取真正的列对象 */
            // let col = columns[columnNumber];
            var tempIndex = columnNumber;
            // 当前列索引不为0
            if (this.grid['gridOption'].showLineNumber) {
                tempIndex = tempIndex - 1;
            }
            if (this.grid.selectable && this.grid.selectable['mode'] === 'multiple') {
                tempIndex = tempIndex - 1;
            }
            var col = columns[tempIndex];
            var params = {
                dataItem: item,
                column: col,
                rowIndex: rowNumber,
                columnIndex: tempIndex,
            };
            // 控制单元格的可编辑性
            if (col && !col.editable) {
                col.editable = function (param) { return true; };
            }
            if (col && this.notReadOnly(col, params)) {
                // 设置当前行
                this.dataId = this.getSelectedIdFromGrid(item);
                this.setSelectionIdToBindingData(this.dataId);
                // const value = this.getValue(item, col.dataField);
                // this.setValue(value, col);
                this.sender.editCell(rowNumber, columnNumber - this.hiddenColLen, this.viewModel.form);
            }
        };
        /*
        获取更新 rowIndex columnIndex
         */
        KendoGridBindingDirective.prototype.updateIndex = function (rowNumber, columnIndex) {
            var newColumnIndex = (columnIndex + 1) % this.len;
            if (!newColumnIndex) {
                var dataLen = this.bindingList.toJSON().length;
                var newRowIndex = (rowNumber + 1) % dataLen;
                return { rowIndex: newRowIndex, columnIndex: newColumnIndex };
            }
            return {
                rowIndex: rowNumber,
                columnIndex: newColumnIndex
            };
        };
        /* 是否只读 */
        KendoGridBindingDirective.prototype.notReadOnly = function (column$$1, param) {
            if (!column$$1) {
                return false;
            }
            return column$$1.editable(param) && !column$$1.editor.readonly;
        };
        /*
           * 给列表赋值 或给formcontrol赋值
            */
        KendoGridBindingDirective.prototype.setValue = function (value, column$$1) {
            var currentColumnType = column$$1.dataType;
            // 同时判断gridOption的列对象
            var bindingData = this.viewModel.bindingData;
            var fieldPaths = this.getFieldPaths(bindingData.bindingPath, column$$1.dataField);
            // 存在行编辑器
            if (currentColumnType === 'date') {
                var dateStr = this.dateService.formatTo(value, 'yyyy-MM-dd HH:mm:ss');
                if (!dateStr) {
                    dateStr = '';
                }
                this.viewModel.bindingData.setValue(fieldPaths, dateStr, true, true);
            }
            else {
                this.viewModel.bindingData.setValue(fieldPaths, value, true, true);
            }
        };
        /* 分组时 获取点击行数据 */
        KendoGridBindingDirective.prototype.getGroupItem = function (data, rowNumber) {
            var index = rowNumber;
            for (var i in data) {
                if (index < data[i].items.length) {
                    return data[i].items[index];
                }
                else {
                    index = index - data[i].items.length;
                }
            }
        };
        /*
         * 获取 单元格值  主从表支持
         * @param dataItem 行数据
         * @param field 字段
         */
        KendoGridBindingDirective.prototype.getValue = function (dataItem, field) {
            var index = field.indexOf('.');
            if (index < 0) {
                return dataItem[field];
            }
            var fields = field.split('.');
            // field字符串组合
            return fields.reduce(function (result, next) {
                return result[next];
            }, dataItem);
        };
        /*
        * 获取 bindingData 路径
        * @param bindingPath 当前绑定的字段路径
        * @param fieldName 字段
        */
        KendoGridBindingDirective.prototype.getFieldPaths = function (bindingPath, field) {
            var fieldPath = '';
            if (bindingPath.length > 1) {
                fieldPath = bindingPath.substr(1).replace(/\//g, '.') + '.' + field;
            }
            else {
                fieldPath = field;
            }
            return fieldPath.split('.');
        };
        /**
         * 回车进入下一个单元格
         */
        KendoGridBindingDirective.prototype.enterNextCell = function () {
            var _this = this;
            var index = this.updateIndex(this.rowIndex, this.columnIndex);
            if (!index.columnIndex && !index.rowIndex) {
                var len_1 = this.bindingList.toJSON().length;
                // 如果存在添加数据的API
                this.appendRow.emit();
                if (this.appendRow.observers && this.appendRow.observers.length) {
                    this.interVal = setInterval(function () {
                        if (_this.bindingList.toJSON().length - 1 === len_1) {
                            _this.setEditable(_this.bindingList.toJSON().length - 1, 0);
                            _this.rowIndex = _this.bindingList.toJSON().length - 1;
                            _this.columnIndex = 0;
                            clearInterval(_this.interVal);
                        }
                    }, 0);
                    return;
                }
            }
            this.setEditable(index.rowIndex, index.columnIndex);
            this.rowIndex = index.rowIndex;
            this.columnIndex = index.columnIndex;
        };
        /* 获取真正的列对象 */
        KendoGridBindingDirective.prototype.getColumns = function (columns) {
            // 判断是否存在固定列
            var hasLocked = columns.some(function (ele) {
                return ele.frozen;
            });
            if (hasLocked) {
                var lockedColumns = columns.filter(function (ele) {
                    return ele.frozen;
                });
                var notLockedColumns = columns.filter(function (ele) {
                    return !ele.frozen;
                });
                return __spread(lockedColumns, notLockedColumns);
            }
            return columns;
        };
        /*
         * 渲染指定行为选中行：将指定行的key添加到选中行集合中
         */
        KendoGridBindingDirective.prototype.renderSelectionRow = function (key, selectedKeys) {
            if (!key || key === '') {
                return;
            }
            // TODO:使用策略模式重构
            if (this.IsMultipleSelectionMode) {
                var index = selectedKeys.indexOf(key);
                if (index >= 0) {
                    return;
                }
                selectedKeys.push(key);
            }
            else {
                if (selectedKeys.length === 1 && selectedKeys[0] === key) {
                    return;
                }
                selectedKeys.splice(0, selectedKeys.length);
                selectedKeys.push(key);
            }
            this.selectionDir.selectedKeysChange.emit(selectedKeys); // 手动触发selectedKeysChange事件
        };
        /*
         * 获取Grid上的当前行内码
         * @param dataItem 行数据
         */
        KendoGridBindingDirective.prototype.getSelectedIdFromGrid = function (dataItem) {
            var primaryKey = this.bindingList.primaryKey;
            return dataItem[primaryKey];
        };
        /*
         * 设置BindingList的当前行
         * @param id 当前行内码
         */
        KendoGridBindingDirective.prototype.setSelectionIdToBindingData = function (id) {
            this.bindingList.setCurrentId(id, true);
        };
        /*
        *列表整体是否可编辑
         */
        KendoGridBindingDirective.prototype.isEditable = function () {
            if (this.editable === undefined) {
                if (!this.viewModel.stateMachine) {
                    // 状态机不存在的时候
                    return false;
                }
                // 状态机存在的时候
                return this.viewModel.stateMachine['editable'];
            }
            // 自定义赋值
            return this.editable;
        };
        /*  */
        KendoGridBindingDirective.prototype.isDataChanged = function () {
            var e_2, _a;
            var hasUnsavedData = false;
            var entityArray = this.viewModel.frameContext.repository.entityCollection.toArray();
            try {
                for (var entityArray_1 = __values(entityArray), entityArray_1_1 = entityArray_1.next(); !entityArray_1_1.done; entityArray_1_1 = entityArray_1.next()) {
                    var entity = entityArray_1_1.value;
                    if (entity.changes.length > 0) {
                        hasUnsavedData = true;
                        break;
                    }
                }
            }
            catch (e_2_1) {
                e_2 = { error: e_2_1 };
            }
            finally {
                try {
                    if (entityArray_1_1 && !entityArray_1_1.done && (_a = entityArray_1.return))
                        _a.call(entityArray_1);
                }
                finally {
                    if (e_2)
                        throw e_2.error;
                }
            }
            return hasUnsavedData;
        };
        KendoGridBindingDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[farrisBindingPath]'
                    },] }
        ];
        /** @nocollapse */
        KendoGridBindingDirective.ctorParameters = function () {
            return [
                { type: devkit.BindingData },
                { type: devkit.UIState, decorators: [{ type: core.Optional }] },
                { type: devkit.FrameEventBus, decorators: [{ type: core.Optional }] },
                { type: devkit.ViewModel, decorators: [{ type: core.Optional }] },
                { type: kendoAngularGrid.GridComponent },
                { type: kendoAngularGrid.SelectionDirective },
                { type: uiDialog.DialogService },
                { type: date.DateTimeHelperService },
                { type: FarrisKendoGridFormatService },
                { type: uiCommon.RuntimeStateService },
                { type: core.NgZone }
            ];
        };
        KendoGridBindingDirective.propDecorators = {
            editable: [{ type: core.Input, args: ['farrisEditable',] }],
            form: [{ type: core.Input, args: ['farrisForm',] }],
            groupField: [{ type: core.Input, args: ['groupField',] }],
            groupAggrFields: [{ type: core.Input, args: ['groupAggrFields',] }],
            farrisBindingGridOption: [{ type: core.Input }],
            rowClassName: [{ type: core.Input }],
            appendRow: [{ type: core.Output, args: ['append-row',] }],
            sortChangeEvent: [{ type: core.Output }],
            rowClass: [{ type: core.Output }],
            selectedRowChange: [{ type: core.Output }],
            selectedCheckboxChange: [{ type: core.Output }],
            aggrColumns: [{ type: core.ContentChildren, args: [GridColumnAggregateDirective,] }],
            onPageChange: [{ type: core.HostListener, args: ['pageChange', ['$event'],] }],
            selectedKeysChangeHandler: [{ type: core.HostListener, args: ['selectedKeysChange', ['$event'],] }],
            selectionChangeHandler: [{ type: core.HostListener, args: ['selectionChange', ['$event'],] }],
            cellClickHandler: [{ type: core.HostListener, args: ['cellClick', ['$event'],] }],
            cellCloseHandler: [{ type: core.HostListener, args: ['cellClose', ['$event'],] }],
            enterCell: [{ type: core.HostListener, args: ['keydown', ['$event'],] }]
        };
        return KendoGridBindingDirective;
    }(kendoAngularGrid.DataBindingDirective));

    // tslint:disable: no-string-literal
    /**
     * 树节点构造器
     * @summary
     * 将BindingData中的数据集合转换成TreeTable节点集合
     */
    var PathTreeNodeBuilder = /** @class */ (function () {
        /**
         * 构造函数
         */
        function PathTreeNodeBuilder(allNodesData, oldTreeNodes, primaryKey, hierarchyInfoKey, context) {
            this.levelGroup = {};
            /**
             * 等待展开的节点
             * @description 节点结构
             * ```
             * {id:'xxx',expanded:false}
             * ```
             */
            this.nodesWaitExpand = [];
            this.primaryKey = primaryKey;
            this.hierarchyInfoKey = hierarchyInfoKey;
            this.allNodes = [];
            this.allNodesData = allNodesData;
            this.context = context || {};
            this.nodesWaitExpand = [];
            this.nodesShouldExpand = context && context.nodesShouldExpand || [];
            this.frameContext = context && context.frameContext || null;
            this.addTreeLoadCompleteListener(this.onTreeLoadComplete.bind(this));
            this.initLevelGroup();
            this.allNodesMap = new Map();
            this.allOldNodesMap = new Map();
            this.buildNodesDataMap(oldTreeNodes);
        }
        Object.defineProperty(PathTreeNodeBuilder.prototype, "expandLevel", {
            /**
             * 展开至层级
             * @description -1为不展开
             */
            get: function () {
                return this.context && this.context.hasOwnProperty('expandLevel') ? this.context['expandLevel'] : -1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PathTreeNodeBuilder.prototype, "component", {
            get: function () {
                return this.context && this.context['component'];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PathTreeNodeBuilder.prototype, "addTreeLoadCompleteListener", {
            get: function () {
                return this.context && this.context['addTreeLoadCompleteListener'] || function (args) { };
            },
            enumerable: true,
            configurable: true
        });
        PathTreeNodeBuilder.prototype.updateTreeNode = function (allNodesData, data) {
            this.allNodesData = allNodesData;
            this.initLevelGroup();
            this.buildNodesDataMap(data);
        };
        PathTreeNodeBuilder.prototype.build = function () {
            var _this = this;
            var tree = [];
            var childrenOf = {};
            var nodes = {};
            this.allNodesData.forEach(function (item) {
                var id = item.id;
                var parentId = _this.getParentId(item);
                // item.parentId = parentId;
                // 展开新增节点的父节点
                var isNewNode = _this.isNewNode(item);
                if (isNewNode === true) {
                    _this.expandParentNode(item);
                }
                // 构造树节点
                var node = _this.buildNode(item);
                nodes[id] = node;
                childrenOf[id] = childrenOf[id] || [];
                node.children = childrenOf[id];
                _this.allNodesMap.set(item[_this.primaryKey], node);
                if (parentId) {
                    if (nodes[parentId] && nodes[parentId].unstableState === true) {
                        nodes[parentId].expanded = true;
                        nodes[parentId].unstableState = false;
                    }
                    childrenOf[parentId] = childrenOf[parentId] || [];
                    childrenOf[parentId].push(node);
                }
                else {
                    if ((!node.children || node.children.length < 1) && node.expanded === true) {
                        node.unstableState = true;
                        node.expanded = false;
                    }
                    tree.push(node);
                }
            });
            return tree;
        };
        /**
         * 构造树节点
         */
        PathTreeNodeBuilder.prototype.build1 = function () {
            var _this = this;
            var minLayer;
            // 获取最顶级节点的layer
            this.allNodesData.forEach(function (node) {
                var hierarchyInfo = _this.getHierarchyInfo(node);
                if (hierarchyInfo) {
                    var layer = hierarchyInfo['layer'];
                    if (!isNaN(layer)) {
                        if (minLayer === undefined) {
                            minLayer = layer;
                        }
                        else if (layer < minLayer) {
                            minLayer = layer;
                        }
                    }
                }
            });
            var topLayer = minLayer - 1;
            this.buildNodes('', topLayer, this.allNodesData, this.allNodes);
            return this.allNodes;
        };
        /**
         * 构造树节点集合
         */
        PathTreeNodeBuilder.prototype.buildNodes = function (fPath, fLayer, allNodesData, treeNodes) {
            var _this = this;
            var childNodesData = this.getChildNodesData(fPath, fLayer);
            childNodesData.forEach(function (nodeData) {
                // 展开新增节点的父节点
                var isNewNode = _this.isNewNode(nodeData);
                if (isNewNode === true) {
                    _this.expandParentNode(nodeData);
                }
                // 构造树节点
                var node = _this.buildNode(nodeData);
                treeNodes.push(node);
                _this.allNodesMap.set(nodeData[_this.primaryKey], node);
                // 递归遍历下级节点
                var hierarchyInfo = _this.getHierarchyInfo(nodeData); //nodeData[this.hierarchyInfoKey];
                var currentLayer = hierarchyInfo['layer'];
                var currentPath = hierarchyInfo['path'];
                _this.buildNodes(currentPath, currentLayer, allNodesData, node.children);
            });
        };
        /**
         * 创建树节点
         */
        PathTreeNodeBuilder.prototype.buildNode = function (nodeData) {
            var isLeaf = this.isLeaf(nodeData);
            // 获取节点的展开状态
            var shouldExpand = this.shouldExpand(nodeData);
            // 节点虽然应该展开，但可能是因为之前就是展开状态，所以应该检查节点之前的状态
            var originExpandStatus = this.isExpanded(nodeData);
            // 如果应该展开该节点，但是该节点之前有状态，那么该节点不应该再由程序展开。
            if (!originExpandStatus && shouldExpand) {
                this.expandNode(nodeData);
            }
            var paginationInfo = this.buildPaginationInfo(nodeData);
            var treeNode = {
                data: Object.assign({}, nodeData),
                children: [],
                expanded: shouldExpand,
                leaf: isLeaf
            };
            if (paginationInfo) {
                treeNode.pagination = paginationInfo;
            }
            return treeNode;
        };
        /**
         * 构造分页信息
         * @param nodeData nodeData
         * @returns
         */
        PathTreeNodeBuilder.prototype.buildPaginationInfo = function (nodeData) {
            var result = null;
            if (this.frameContext) {
                var id = this.getPrimary(nodeData);
                // 获取分页信息
                var key = "_NODE_" + id + "_PAGINATION_INFO_";
                var pagination = this.frameContext.params.get(key) || null;
                if (pagination && pagination.pageCount > 1) {
                    result = {
                        pageIndex: pagination.pageIndex,
                        pageSize: pagination.pageSize,
                        total: pagination.totalCount
                    };
                }
            }
            return result;
        };
        /**
         * 计算节点是否需要展开
         * @param nodeData nodeData
         */
        PathTreeNodeBuilder.prototype.shouldExpand = function (nodeData) {
            var _a = __read([this.getNodeLayer(nodeData), this.isLeaf(nodeData)], 2), layer = _a[0], isLeaf = _a[1];
            // 永远不展开叶子节点
            if (isLeaf) {
                return false;
            }
            var expanded = this.isExpanded(nodeData);
            if (!expanded) {
                var id_1 = this.getPrimary(nodeData);
                if (this.nodesWaitExpand.findIndex(function (node) { return node && node.id === id_1; }) > -1) {
                    return false;
                }
                if (this.nodesShouldExpand.findIndex(function (nodeId) { return nodeId === id_1; }) > -1) {
                    return true;
                }
                if (this.expandLevel === -1) {
                    // -1 为不展开
                    expanded = false;
                }
                else if (this.expandLevel === 0) {
                    // 0 为全部展开
                    expanded = true;
                }
                else {
                    // 没有启用分层加载，通过展开层级确定是否展开该节点
                    expanded = layer <= this.expandLevel;
                    // 如果节点原本存在且节点没有展开则不展开
                    var oldTreeNode = this.getOldNode(nodeData);
                    if (oldTreeNode && !oldTreeNode.expanded) {
                        expanded = false;
                    }
                }
            }
            return expanded;
        };
        /**
         * 展开树节点
         * @description 完全加载树使用展开属性在buildNode时已经展开，此函数的主要用于展开分级加载树
         * @param nodeData nodeData
         */
        PathTreeNodeBuilder.prototype.expandNode = function (nodeData) {
            var _a = __read([this.getNodePath(nodeData), this.getNodeLayer(nodeData)], 2), path = _a[0], layer = _a[1];
            var childs = this.getChildNodesData(path, layer);
            // 当前节点不是叶子节点，但在节点数据中又找不到该节点的子节点，则认为树启用了分层加载
            if (!childs || childs.length < 1) {
                // 分层加载树需要通过触发节点展开事件才加载下层，目前树上还不存在该节点，无法直接展开，需要等树加载完之后再展开
                var id_2 = this.getPrimary(nodeData);
                if (this.nodesWaitExpand.findIndex(function (node) { return node && node.id === id_2; }) < 0) {
                    this.nodesWaitExpand.push({ id: id_2, expanded: false });
                }
            }
        };
        /**
         * 树加载完成事件
         */
        PathTreeNodeBuilder.prototype.onTreeLoadComplete = function () {
            var index = this.nodesWaitExpand.findIndex(function (node) { return !node.expanded; });
            var nodeData = this.nodesWaitExpand[index] || {};
            var id = nodeData.id;
            if (id) {
                var rowNode = this.component.findRowNode(id);
                if (rowNode) {
                    nodeData.expanded = true;
                    // if (nodeData && nodeData.node && !nodeData.node.expanded) {
                    //   return;
                    // }
                    this.component.expandNode(id);
                }
            }
        };
        /**
         * 获取主键
         * @param nodeData nodeData
         */
        PathTreeNodeBuilder.prototype.getPrimary = function (nodeData) {
            return nodeData[this.primaryKey];
        };
        // #region 工具方法，待单独封装
        /**
         * 获取子级节点的数据集合
         */
        PathTreeNodeBuilder.prototype.getChildNodesData = function (fPath, fLayer) {
            var _this = this;
            var childNodesData = [];
            this.allNodesData.forEach(function (nodeData) {
                // @todo：待删除，兼容没有hierarchyInfo的数据
                var hierarchyInfo = _this.getHierarchyInfo(nodeData); //this.getValue(nodeData, this.hierarchyInfoKey); /// nodeData[this.hierarchyInfoKey];
                if (!hierarchyInfo) {
                    return;
                }
                // 匹配节点
                var currentLayer = hierarchyInfo['layer'];
                var currentPath = hierarchyInfo['path'];
                if ((currentLayer === fLayer + 1) && currentPath && currentPath.startsWith(fPath)) {
                    childNodesData.push(nodeData);
                }
            });
            return childNodesData;
        };
        PathTreeNodeBuilder.prototype.getHierarchyInfo = function (nodeData) {
            return this.getValue(nodeData, this.hierarchyInfoKey); //nodeData[this.hierarchyInfoKey];
        };
        PathTreeNodeBuilder.prototype.initLevelGroup = function () {
            var _this = this;
            this.levelGroup = {};
            this.allNodesData.forEach(function (nodeData) {
                var hierarchyInfo = _this.getHierarchyInfo(nodeData);
                var key = "level" + hierarchyInfo.layer;
                if (_this.levelGroup[key]) {
                    _this.levelGroup[key].push(nodeData);
                }
                else {
                    _this.levelGroup[key] = [nodeData];
                }
            });
        };
        PathTreeNodeBuilder.prototype.getParentId = function (node) {
            var _this = this;
            var hierarchyInfo = this.getHierarchyInfo(node);
            var parentLevelGroup = this.levelGroup[this.getLevelGroupKey(hierarchyInfo.layer - 1)] || [];
            var parent = parentLevelGroup.find(function (nodeData) {
                var currentHierarchyInfo = _this.getHierarchyInfo(nodeData);
                if (currentHierarchyInfo.isDetail === true) {
                    return false;
                }
                return hierarchyInfo.path.startsWith(currentHierarchyInfo.path);
            });
            if (parent) {
                return parent.id;
            }
            else {
                return null;
            }
        };
        PathTreeNodeBuilder.prototype.getLevelGroupKey = function (level) {
            return "level" + level;
        };
        /**
         * 根据路径获取数据
         * @param target target
         * @param path 路径
         */
        PathTreeNodeBuilder.prototype.getValue = function (target, path) {
            if (path.indexOf('/') === -1) {
                return target[path];
            }
            var paths = path.split('/').filter(function (p) { return p; });
            if (paths.length < 1) {
                return target;
            }
            return paths.reduce(function (result, path) {
                return result && result[path];
            }, target);
        };
        /**
         * 获取分级信息中的层级
         * @param nodeData nodeData
         */
        PathTreeNodeBuilder.prototype.getNodeLayer = function (nodeData) {
            var hierarchyInfo = this.getHierarchyInfo(nodeData);
            return hierarchyInfo['layer'];
        };
        /**
         * 获取分级信息中的路径
         * @param nodeData nodeData
         */
        PathTreeNodeBuilder.prototype.getNodePath = function (nodeData) {
            var hierarchyInfo = this.getHierarchyInfo(nodeData);
            return hierarchyInfo['path'];
        };
        /**
         * 获取展开状态
         */
        PathTreeNodeBuilder.prototype.isExpanded = function (newData) {
            var oldTreeNode = this.getOldNode(newData);
            return oldTreeNode ? oldTreeNode.expanded : undefined;
        };
        /**
         * 是否是叶子节点
         * @todo：服务器端对isDetail的目前没有与前端同步，isDetail不准确。
         */
        PathTreeNodeBuilder.prototype.isLeaf = function (nodeData) {
            var hierarchyInfo = this.getHierarchyInfo(nodeData); // nodeData[this.hierarchyInfoKey];
            var isDetail = hierarchyInfo['isDetail'];
            return isDetail;
        };
        /**
         * 判断节点是否是新增
         * @todo：不应该这样判断，待优化。
         * @summary
         * 1、非空树（空树视为初次加载数据）；
         * 2、找不到oldNode。
         */
        PathTreeNodeBuilder.prototype.isNewNode = function (nodeData) {
            if (this.allOldNodesMap.size === 0) {
                return false;
            }
            var oldTreeNode = this.getOldNode(nodeData);
            return oldTreeNode ? false : true;
        };
        /**
         * 展开父节点
         */
        PathTreeNodeBuilder.prototype.expandParentNode = function (nodeData) {
            var parentTreeNode = this.getParentNode(nodeData);
            if (!parentTreeNode) {
                return;
            }
            parentTreeNode.leaf = false;
            parentTreeNode.expanded = true;
        };
        /**
         * 查找父节点
         */
        PathTreeNodeBuilder.prototype.getParentNode = function (nodeData) {
            var _this = this;
            var hierarchyInfo = this.getHierarchyInfo(nodeData); //nodeData[this.hierarchyInfoKey];
            var layer = hierarchyInfo['layer'];
            var path = hierarchyInfo['path'];
            var allNodes = Array.from(this.allNodesMap.values());
            var parentNode = allNodes.find(function (currentNode) {
                var currentLayer = _this.getValue(currentNode.data, _this.hierarchyInfoKey)['layer']; //currentNode.data[this.hierarchyInfoKey]['layer'];
                var currentPath = _this.getValue(currentNode.data, _this.hierarchyInfoKey)['path']; //  currentNode.data[this.hierarchyInfoKey]['path'];
                if ((layer === currentLayer + 1) && path.startsWith(currentPath) === true) {
                    return true;
                }
                return false;
            });
            return parentNode;
        };
        /**
         * 获取老的树节点
         */
        PathTreeNodeBuilder.prototype.getOldNode = function (nodeData) {
            var id = nodeData[this.primaryKey];
            return this.allOldNodesMap.get(id);
        };
        /**
         * 打平TreeNodes，并放入一个Map中
         */
        PathTreeNodeBuilder.prototype.buildNodesDataMap = function (treeNodes) {
            var _this = this;
            treeNodes.forEach(function (treeNode) {
                _this.allOldNodesMap.set(treeNode.data[_this.primaryKey], treeNode);
                if (treeNode.children) {
                    _this.buildNodesDataMap(treeNode.children);
                }
            });
        };
        return PathTreeNodeBuilder;
    }());

    /*
     * @Author: aalizzwell
     * @Date: 2019-05-31 09:48:10
     * @Last Modified by: aalizzwell
     * @Last Modified time: 2019-06-24 17:00:58
     */
    // tslint:disable: no-string-literal max-line-length
    /**
     * 树节点构造器
     * @summary
     * 将BindingData中的数据集合转换成TreeTable节点集合
     */
    var ParentTreeNodeBuilder = /** @class */ (function () {
        /**
         * 构造函数
         */
        function ParentTreeNodeBuilder(allNodesData, oldTreeNodes, primaryKey, hierarchyInfoKey, context) {
            /**
             * 等待展开的节点
             * @description 节点结构
             * ```
             * {id:'xxx',expanded:false}
             * ```
             */
            this.nodesWaitExpand = [];
            this.primaryKey = primaryKey;
            this.hierarchyInfoKey = hierarchyInfoKey;
            this.allNodes = [];
            this.allNodesData = allNodesData;
            this.context = context || {};
            this.nodesWaitExpand = [];
            this.nodesShouldExpand = context && context.nodesShouldExpand || [];
            this.frameContext = context && context.frameContext || null;
            this.addTreeLoadCompleteListener(this.onTreeLoadComplete.bind(this));
            this.allNodesMap = new Map();
            this.allOldNodesMap = new Map();
            this.buildNodesDataMap(oldTreeNodes);
        }
        Object.defineProperty(ParentTreeNodeBuilder.prototype, "expandLevel", {
            /**
             * 展开至层级
             * @description -1为不展开
             */
            get: function () {
                return this.context && this.context.hasOwnProperty('expandLevel') ? this.context['expandLevel'] : -1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParentTreeNodeBuilder.prototype, "component", {
            get: function () {
                return this.context && this.context['component'];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ParentTreeNodeBuilder.prototype, "addTreeLoadCompleteListener", {
            get: function () {
                return this.context && this.context['addTreeLoadCompleteListener'] || function (args) { };
            },
            enumerable: true,
            configurable: true
        });
        ParentTreeNodeBuilder.prototype.updateTreeNode = function (allNodesData, data) {
            this.allNodesData = allNodesData;
            this.buildNodesDataMap(data);
        };
        ParentTreeNodeBuilder.prototype.build = function () {
            var _this = this;
            var tree = [];
            var childrenOf = {};
            var parents = {};
            var nodes = {};
            this.allNodesData.forEach(function (item) {
                var id = item.id;
                var parentId = _this.getHierarchyInfo(item).parentElement;
                // item.parentId = parentId;
                // 展开新增节点的父节点
                var isNewNode = _this.isNewNode(item);
                if (isNewNode === true) {
                    _this.expandParentNode(item);
                }
                // 构造树节点
                var node = _this.buildNode(item);
                nodes[id] = node;
                childrenOf[id] = childrenOf[id] || [];
                node.children = childrenOf[id];
                parents[parentId] = parents[parentId] || [];
                parents[parentId].push(node);
                _this.allNodesMap.set(item[_this.primaryKey], node);
                if (parentId) {
                    if (nodes[parentId] && nodes[parentId].unstableState === true) {
                        nodes[parentId].expanded = true;
                        nodes[parentId].unstableState = false;
                    }
                    childrenOf[parentId] = childrenOf[parentId] || [];
                    childrenOf[parentId].push(node);
                }
                else {
                    if ((!node.children || node.children.length < 1) && node.expanded === true) {
                        node.unstableState = true;
                        node.expanded = false;
                    }
                    tree.push(node);
                }
            });
            // 所有节点都是parentId，没有返回根节点
            if ((!tree || tree.length < 1) && this.allNodesData && this.allNodesData.length > 0) {
                var parentIds = Object.keys(parents);
                parentIds.forEach(function (parentId) {
                    if (!_this.allNodesData.find(function (item) { return item.id === parentId; })) {
                        tree = tree.concat(parents[parentId]);
                    }
                });
            }
            return tree;
        };
        /**
         * 构造树节点
         */
        ParentTreeNodeBuilder.prototype.build1 = function () {
            var _this = this;
            var minLayer;
            // 获取最顶级节点的layer
            this.allNodesData.forEach(function (node) {
                var hierarchyInfo = _this.getHierarchyInfo(node);
                if (hierarchyInfo) {
                    var layer = hierarchyInfo['layer'];
                    if (!isNaN(layer)) {
                        if (minLayer === undefined) {
                            minLayer = layer;
                        }
                        else if (layer < minLayer) {
                            minLayer = layer;
                        }
                    }
                }
            });
            var topLayer = minLayer - 1;
            this.buildNodes('', topLayer, this.allNodesData, this.allNodes);
            return this.allNodes;
        };
        /**
         * 构造树节点集合
         */
        ParentTreeNodeBuilder.prototype.buildNodes = function (fParentElement, fLayer, allNodesData, treeNodes) {
            var _this = this;
            var childNodesData = this.getChildNodesData(fParentElement, fLayer);
            childNodesData.forEach(function (nodeData) {
                // 展开新增节点的父节点
                var isNewNode = _this.isNewNode(nodeData);
                if (isNewNode === true) {
                    _this.expandParentNode(nodeData);
                }
                // 构造树节点
                var node = _this.buildNode(nodeData);
                treeNodes.push(node);
                _this.allNodesMap.set(nodeData[_this.primaryKey], node);
                // 递归遍历下级节点
                var hierarchyInfo = _this.getHierarchyInfo(nodeData); //nodeData[this.hierarchyInfoKey];
                var currentLayer = hierarchyInfo['layer'];
                var currentId = nodeData[_this.primaryKey];
                _this.buildNodes(currentId, currentLayer, allNodesData, node.children);
            });
        };
        /**
         * 创建树节点
         */
        ParentTreeNodeBuilder.prototype.buildNode = function (nodeData) {
            var isLeaf = this.isLeaf(nodeData);
            // 获取节点的展开状态
            var shouldExpand = this.shouldExpand(nodeData);
            // 节点虽然应该展开，但可能是因为之前就是展开状态，所以应该检查节点之前的状态
            var originExpandStatus = this.isExpanded(nodeData);
            // 如果应该展开该节点，但是该节点之前有状态，那么该节点不应该再由程序展开。
            if (!originExpandStatus && shouldExpand) {
                this.expandNode(nodeData);
            }
            var paginationInfo = this.buildPaginationInfo(nodeData);
            var treeNode = {
                data: Object.assign({}, nodeData),
                children: [],
                expanded: shouldExpand,
                leaf: isLeaf
            };
            if (paginationInfo) {
                treeNode.pagination = paginationInfo;
            }
            return treeNode;
        };
        /**
         * 构造分页信息
         * @param nodeData nodeData
         * @returns
         */
        ParentTreeNodeBuilder.prototype.buildPaginationInfo = function (nodeData) {
            var result = null;
            if (this.frameContext) {
                var id = this.getPrimary(nodeData);
                // 获取分页信息
                var key = "_NODE_" + id + "_PAGINATION_INFO_";
                var pagination = this.frameContext.params.get(key) || null;
                if (pagination && pagination.pageCount > 1) {
                    result = {
                        pageIndex: pagination.pageIndex,
                        pageSize: pagination.pageSize,
                        total: pagination.totalCount
                    };
                }
            }
            return result;
        };
        /**
         * 计算节点是否要展开
         * @param nodeData nodeData
         */
        ParentTreeNodeBuilder.prototype.shouldExpand = function (nodeData) {
            var _a = __read([this.isLeaf(nodeData), this.getNodeLayer(nodeData)], 2), isLeaf = _a[0], layer = _a[1];
            // 永远不展开叶子节点
            if (isLeaf) {
                return false;
            }
            var expanded = this.isExpanded(nodeData);
            if (!expanded) {
                var id_1 = this.getPrimary(nodeData);
                if (this.nodesWaitExpand.findIndex(function (node) { return node && node.id === id_1; }) > -1) {
                    return false;
                }
                if (this.nodesShouldExpand.findIndex(function (nodeId) { return nodeId === id_1; }) > -1) {
                    return true;
                }
                if (this.expandLevel === -1) {
                    // -1 为不展开
                    expanded = false;
                }
                else if (this.expandLevel === 0) {
                    // 0 为全部展开
                    expanded = true;
                }
                else {
                    // 没有启用分层加载，通过展开层级确定是否展开该节点
                    expanded = layer <= this.expandLevel;
                    // 如果节点原本存在且节点没有展开则不展开
                    var oldTreeNode = this.getOldNode(nodeData);
                    if (oldTreeNode && !oldTreeNode.expanded) {
                        expanded = false;
                    }
                }
            }
            return expanded;
        };
        /**
         * 展开树节点
         * @description 完全加载树使用展开属性在buildNode时已经展开，此函数的主要用于展开分级加载树
         * @param nodeData nodeData
         */
        ParentTreeNodeBuilder.prototype.expandNode = function (nodeData) {
            var _a = __read([nodeData[this.primaryKey], this.getNodeLayer(nodeData)], 2), element = _a[0], layer = _a[1];
            var childs = this.getChildNodesData(element, layer);
            // 当前节点不是叶子节点，但在节点数据中又找不到该节点的子节点，则认为树启用了分层加载
            if (!childs || childs.length < 1) {
                // 分层加载树需要通过触发节点展开事件才加载下层,目前树上还不存在该节点，无法直接展开，需要等树加载完之后再展开
                var id_2 = this.getPrimary(nodeData);
                if (this.nodesWaitExpand.findIndex(function (node) { return node && node.id === id_2; }) < 0) {
                    this.nodesWaitExpand.push({ id: id_2, expanded: false });
                }
            }
        };
        /**
         * 树加载完成事件
         */
        ParentTreeNodeBuilder.prototype.onTreeLoadComplete = function () {
            var index = this.nodesWaitExpand.findIndex(function (node) { return !node.expanded; });
            var nodeData = this.nodesWaitExpand[index] || {};
            var id = nodeData.id;
            if (id) {
                var rowNode = this.component.findRowNode(id);
                if (rowNode) {
                    nodeData.expanded = true;
                    // if (nodeData && nodeData.node && !nodeData.node.expanded) {
                    //   return;
                    // }
                    this.component.expandNode(id);
                }
            }
        };
        /**
         * 获取主键
         * @param nodeData nodeData
         */
        ParentTreeNodeBuilder.prototype.getPrimary = function (nodeData) {
            return nodeData[this.primaryKey];
        };
        // #region 工具方法，待单独封装
        /**
         * 获取子级节点的数据集合
         */
        ParentTreeNodeBuilder.prototype.getChildNodesData = function (fParentElement, fLayer) {
            var _this = this;
            var childNodesData = [];
            this.allNodesData.forEach(function (nodeData) {
                // @todo：待删除，兼容没有hierarchyInfo的数据 
                var hierarchyInfo = _this.getHierarchyInfo(nodeData); //nodeData[this.hierarchyInfoKey];
                if (!hierarchyInfo) {
                    return;
                }
                // 匹配节点
                var currentLayer = hierarchyInfo['layer'];
                var currentParentElement = hierarchyInfo['parentElement'];
                if ((currentLayer === fLayer + 1) && (currentParentElement === fParentElement || (!currentParentElement && fParentElement === ''))) {
                    childNodesData.push(nodeData);
                }
            });
            return childNodesData;
        };
        ParentTreeNodeBuilder.prototype.getHierarchyInfo = function (nodeData) {
            return this.getValue(nodeData, this.hierarchyInfoKey); //nodeData[this.hierarchyInfoKey];
        };
        ParentTreeNodeBuilder.prototype.getValue = function (target, path) {
            if (path.indexOf('/') === -1) {
                return target[path];
            }
            var paths = path.split('/').filter(function (p) { return p; });
            return paths.reduce(function (result, path) {
                return result && result[path];
            }, target);
        };
        /**
         * 获取分级信息中的层级
         * @param nodeData nodeData
         */
        ParentTreeNodeBuilder.prototype.getNodeLayer = function (nodeData) {
            var hierarchyInfo = this.getHierarchyInfo(nodeData);
            return hierarchyInfo['layer'];
        };
        /**
         * 获取分级信息中的父节点
         * @param nodeData nodeData
         */
        ParentTreeNodeBuilder.prototype.getNodeParentElement = function (nodeData) {
            var hierarchyInfo = this.getHierarchyInfo(nodeData);
            return hierarchyInfo['parentElement'];
        };
        /**
         * 获取展开状态
         */
        ParentTreeNodeBuilder.prototype.isExpanded = function (newData) {
            var oldTreeNode = this.getOldNode(newData);
            return oldTreeNode ? oldTreeNode.expanded : undefined;
        };
        /**
         * 是否是叶子节点
         * @todo：应该用数据本身的isDetail来保证，但目前不准确，强制前端计算
         */
        ParentTreeNodeBuilder.prototype.isLeaf = function (nodeData) {
            var hierarchyInfo = this.getHierarchyInfo(nodeData); //nodeData[this.hierarchyInfoKey];
            var isDetail = hierarchyInfo['isDetail'];
            return isDetail;
        };
        /**
         * 判断节点是否是新增
         * @todo：不应该这样判断，待优化。
         * @summary
         * 1、非空树（空树视为初次加载数据）；
         * 2、找不到oldNode。
         */
        ParentTreeNodeBuilder.prototype.isNewNode = function (nodeData) {
            if (this.allOldNodesMap.size === 0) {
                return false;
            }
            var oldTreeNode = this.getOldNode(nodeData);
            return oldTreeNode ? false : true;
        };
        /**
         * 展开父节点
         */
        ParentTreeNodeBuilder.prototype.expandParentNode = function (nodeData) {
            var parentTreeNode = this.getParentNode(nodeData);
            if (!parentTreeNode) {
                return;
            }
            parentTreeNode.leaf = false;
            parentTreeNode.expanded = true;
        };
        /**
         * 查找父节点
         */
        ParentTreeNodeBuilder.prototype.getParentNode = function (nodeData) {
            var _this = this;
            var hierarchyInfo = this.getHierarchyInfo(nodeData); //nodeData[this.hierarchyInfoKey];
            var layer = hierarchyInfo['layer'];
            var parentElement = hierarchyInfo['parentElement'];
            var allNodes = Array.from(this.allNodesMap.values());
            var parentNode = allNodes.find(function (node) {
                var currentLayer = _this.getValue(node.data, _this.hierarchyInfoKey)['layer']; //node.data[this.hierarchyInfoKey]['layer'];
                var currentId = node.data[_this.primaryKey];
                return currentId === parentElement && layer === (currentLayer + 1);
            });
            return parentNode;
        };
        /**
         * 获取老的树节点
         */
        ParentTreeNodeBuilder.prototype.getOldNode = function (nodeData) {
            var id = nodeData[this.primaryKey];
            return this.allOldNodesMap.get(id);
        };
        /**
         * 打平TreeNodes，并放入一个Map中
         */
        ParentTreeNodeBuilder.prototype.buildNodesDataMap = function (treeNodes) {
            var _this = this;
            treeNodes.forEach(function (treeNode) {
                _this.allOldNodesMap.set(treeNode.data[_this.primaryKey], treeNode);
                if (treeNode.children) {
                    _this.buildNodesDataMap(treeNode.children);
                }
            });
        };
        return ParentTreeNodeBuilder;
    }());

    /*
     * @Author: aalizzwell
     * @Date: 2019-05-30 18:57:34
     * @Last Modified by:   aalizzwell
     * @Last Modified time: 2019-05-30 18:57:34
     */
    var TreeNodeBuilderFactory = /** @class */ (function () {
        function TreeNodeBuilderFactory() {
        }
        TreeNodeBuilderFactory.getBuilder = function (hierarchyInfo) {
            var builder = PathTreeNodeBuilder;
            if (hierarchyInfo.hasOwnProperty("path")) {
                builder = PathTreeNodeBuilder;
            }
            else if (hierarchyInfo.hasOwnProperty("parentElement")) {
                builder = ParentTreeNodeBuilder;
            }
            return builder;
        };
        return TreeNodeBuilderFactory;
    }());

    /*
     * @Author: aalizzwell
     * @Date: 2020-02-27 11:33:41
     * @Last Modified by: aalizzwell
     * @Last Modified time: 2020-02-27 11:34:16
     */
    /**
     * 树表格绑定指令
     */
    var FarrisTreeTableBindingDirective = /** @class */ (function () {
        /**
         * 构造函数
         */
        function FarrisTreeTableBindingDirective(treeTable, treetableFormatSer, frameContext) {
            var _this = this;
            this.treeTable = treeTable;
            this.treetableFormatSer = treetableFormatSer;
            this.frameContext = frameContext;
            this.renderSubject = new rxjs.Subject();
            /**
             * 启用节点分页
             */
            // @Input('enableNodePagination')
            // public enableNodePagination: boolean;
            /**
             * 节点分页大小
             */
            this.nodePageSize = 100;
            /* 设置行样式 */
            this.rowClass = new core.EventEmitter();
            /* 设置列样式 */
            this.cellClass = new core.EventEmitter();
            this._PROP = null;
            this.listeners = [];
            this.storage = [];
            this.viewModel.uiState.setPropertyValue('ids', this.treeTable.checkValues);
            this.renderSubject.pipe(operators.debounceTime(500)).subscribe(function () {
                _this.bindData();
            });
        }
        Object.defineProperty(FarrisTreeTableBindingDirective.prototype, "bindingData", {
            /**
             * 绑定数据
             */
            get: function () {
                return this.frameContext.bindingData;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FarrisTreeTableBindingDirective.prototype, "bindingList", {
            /**
             * 绑定数据列表
             */
            get: function () {
                // @todo：只支持主表，没有处理bindingPath
                return this.bindingData.list;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FarrisTreeTableBindingDirective.prototype, "prop", {
            get: function () {
                return this._PROP;
            },
            set: function (value) {
                this._PROP = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FarrisTreeTableBindingDirective.prototype, "viewModel", {
            /**
             * 获取当前vm
             */
            get: function () {
                return this.frameContext.viewModel;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 指令初始化
         */
        FarrisTreeTableBindingDirective.prototype.ngOnInit = function () {
            var _this = this;
            // 将分级码信息保存到root-component，而非整个表单的app-context
            var virtualRootFrameContext = this.frameContext.getVirtualRootFrameContext();
            virtualRootFrameContext.setParam('hierarchyInfoKey', this.hierarchyInfoKey);
            this.bindData();
            this.bindingData.changes.subscribe(function (change) {
                if (change && (change.type === devkit.ChangeType.ValueChanged || change.type === devkit.ChangeType.PaginationInfoChange)) {
                    _this.renderSubject.next(change);
                }
                else {
                    _this.bindData();
                }
                // 设置当前行
                var currentId = _this.bindingList.currentId;
                if (!_this.frameContext.bindingData.rowSelectedEventSuspend && currentId) {
                    _this.setSelectedIdToTree(_this.bindingList.currentId);
                }
                _this.updateCheckedRows(change);
            });
            // 设置 树表 格式化
            this.treetableFormatSer.setFormat(this.treeTable);
            /* 行样式 */
            this.rowClass.emit(this.treeTable);
            /* 列样式  单元格样式 */
            this.cellClass.emit(this.treeTable);
            this.setComponentRef();
            this.setNodePaginationInfo();
            this.registerEvent();
            if (this.frameContext && this.frameContext.frameComponent) {
                this.frameContext.frameComponent.componentType = devkit.ComponentType.farrisTreeTalbeComponent;
            }
        };
        /**
         * 指令输入变更
         */
        FarrisTreeTableBindingDirective.prototype.ngOnChanges = function (changes) {
        };
        FarrisTreeTableBindingDirective.prototype.registerEvent = function () {
            var _this = this;
            this.treeTable.columnSorted.subscribe(function (event) {
                var _a = event.sortName, sortName = _a === void 0 ? null : _a, _b = event.sortOrder, sortOrder = _b === void 0 ? null : _b;
                var remoteSort = _this.treeTable.remoteSort;
                if (remoteSort === false) {
                    if (sortName && sortOrder) {
                        _this.bindingList.sortBy(sortName, sortOrder);
                    }
                }
                _this.bindData();
            });
        };
        /**
         * 收集树组件实例
         */
        FarrisTreeTableBindingDirective.prototype.setComponentRef = function () {
            var appContext = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.getFormAppContext();
            var frameId = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.frameId;
            var id = this.treeTable && this.treeTable.el.nativeElement.id || null;
            // 如果frameId不存在或treetable没有id属性，说明不符合使用场景
            if (!frameId || !id) {
                return;
            }
            var map = appContext && appContext.componentRefs && appContext.componentRefs.get(frameId) || new Map();
            appContext && appContext.componentRefs && appContext.componentRefs.set(frameId, map.set(id, this.treeTable));
        };
        FarrisTreeTableBindingDirective.prototype.setNodePaginationInfo = function () {
            if (this.frameContext) {
                var enableNodePagination = this.treeTable.paginationForChildren || false; //this.enableNodePagination || false;
                this.frameContext.params.set('enableNodePagination', enableNodePagination);
                var nodePageSize = this.nodePageSize || 0;
                this.frameContext.params.set('nodePageSize', nodePageSize);
            }
        };
        /**
         * 绑定数据
         */
        FarrisTreeTableBindingDirective.prototype.bindData = function () {
            var oldTreeNodes = this.treeTable.data;
            var treeNodesData = this.bindingList.toJSON({ ignoreMultiLangInput: true });
            // if (!this.shouldComponentUpdate(treeNodesData)) {
            //   return;
            // }
            this.prop = treeNodesData;
            var treeNodes = [];
            if (!!treeNodesData && treeNodesData.length > 0) {
                var hierarchyInfo = treeNodesData[0][this.hierarchyInfoKey];
                var builder = this.builder;
                if (!builder) {
                    this.builder = TreeNodeBuilderFactory.getBuilder(hierarchyInfo);
                    builder = this.builder;
                }
                // 服务器返回的分级节点信息匹配不到现有工厂里面的任何一种情况。确认新加的builder已经在工厂中注册
                if (builder == null) {
                    throw new Error('TreeTable builder is null!');
                }
                var expandLevel = -1;
                var treeExpandLevel = this.treeTable['expandLevel'];
                if (typeof treeExpandLevel !== 'undefined') {
                    expandLevel = treeExpandLevel;
                }
                var virtualRootFrameContext = this.frameContext.getVirtualRootFrameContext();
                var nodesShouldExpand = (virtualRootFrameContext.params.get('_DEVKIT_expandRowIds') || '').split(',') || [];
                var context = {
                    expandLevel: expandLevel,
                    addTreeLoadCompleteListener: this.addTreeLoadCompleteListener.bind(this),
                    component: this.treeTable,
                    storage: this.storage,
                    nodesShouldExpand: nodesShouldExpand,
                    frameContext: this.frameContext,
                };
                //if (!this.treeNodesBuilder) {
                this.treeNodesBuilder = new builder(treeNodesData, oldTreeNodes, this.bindingList.primaryKey, this.hierarchyInfoKey, context);
                //}
                // this.treeNodesBuilder.updateTreeNode(treeNodesData, oldTreeNodes);
                treeNodes = this.treeNodesBuilder.build();
            }
            this.treeTable.data = treeNodes;
            // 设置分页信息
            this.updatePageInfo(this.treeTable);
            this.onTreeLoadComplete();
        };
        FarrisTreeTableBindingDirective.prototype.onTreeLoadComplete = function () {
            if (this.listeners && this.listeners.length > 0) {
                this.listeners.forEach(function (listener) {
                    listener();
                });
            }
        };
        FarrisTreeTableBindingDirective.prototype.addTreeLoadCompleteListener = function (listener) {
            this.listeners.push(listener);
        };
        FarrisTreeTableBindingDirective.prototype.shouldComponentUpdate = function (newProp) {
            if (JSON.stringify(this.prop) === JSON.stringify(newProp)) {
                return false;
            }
            return true;
        };
        /**
         * 从树组件上获取选中行的id
         */
        FarrisTreeTableBindingDirective.prototype.getSelectedIdFromTree = function () {
            var selectedRow = this.treeTable.selectedRow;
            return selectedRow ? selectedRow.data['id'] : null;
        };
        /**
         * 设置TreeTable的当前行
         */
        FarrisTreeTableBindingDirective.prototype.setSelectedIdToTree = function (selectedId) {
            if (!selectedId) {
                return;
            }
            // 如果新的currentId和树上的selectedId不一致，重置树的当前行
            var oldSelectedId = this.getSelectedIdFromTree();
            var nodePageChanged = this.frameContext.params.get('_NODE_PAGE_CHANGED_') || false;
            if (!oldSelectedId && nodePageChanged) {
                this.frameContext.params.delete('_NODE_PAGE_CHANGED_');
                return;
            }
            if (oldSelectedId !== selectedId) {
                this.treeTable.clearSelections();
                this.treeTable.selectNode(selectedId);
            }
        };
        /**
         * 设置BindingList的CurrentId
         */
        FarrisTreeTableBindingDirective.prototype.setCurrentIdToBindingList = function (selectedId) {
            var oldCurrentId = this.bindingData.list.currentId;
            // 单选模式下将当前行设置到ids
            if (!this.treeTable.multiSelect) {
                this.setChecks(selectedId);
                this.setCheckedRows([selectedId]);
            }
            if (oldCurrentId === selectedId) {
                return;
            }
            this.bindingData.list.setCurrentId(selectedId, true);
        };
        FarrisTreeTableBindingDirective.prototype.updateCheckedRows = function (changes) {
            if (changes.type === devkit.ChangeType.Load) {
                this.setCheckedRows();
            }
            else if (changes.type === devkit.ChangeType.ValueChanged || changes.type === devkit.ChangeType.Remove) {
                var ids = this.getChecks();
                if (changes.id && ids.includes(changes.id)) {
                    this.setCheckedRows();
                }
            }
        };
        /**
         * 更新勾选行数据
         */
        FarrisTreeTableBindingDirective.prototype.setCheckedRows = function (ids) {
            var _this = this;
            if (typeof ids === 'undefined') {
                ids = this.viewModel.uiState['ids'] || [];
            }
            if (!Array.isArray(ids)) {
                return;
            }
            var list = this.bindingList.toJSON();
            var rows = this.viewModel.uiState['rows'] || new Map();
            var result = new Map();
            ids.forEach(function (id) {
                var item = list.find(function (item) { return item[_this.bindingList.primaryKey] === id; });
                var otherPageItem = rows.get(id);
                if (item) {
                    result.set(id, item);
                }
                else if (otherPageItem) {
                    result.set(id, otherPageItem);
                }
            });
            this.viewModel.uiState.setPropertyValue('rows', result);
        };
        /**
         * 设置ids变量
         * @param idOrIds id or ids
         */
        FarrisTreeTableBindingDirective.prototype.setChecks = function (idOrIds) {
            if (typeof idOrIds === 'string') {
                idOrIds = idOrIds.split(',').filter(function (p) { return p; });
            }
            this.viewModel.uiState.setPropertyValue('ids', idOrIds);
        };
        /**
         * 获取勾选行id数组
         * @returns
         */
        FarrisTreeTableBindingDirective.prototype.getChecks = function () {
            return this.viewModel.uiState['ids'] || [];
        };
        /**
         * 获取分页信息
         */
        FarrisTreeTableBindingDirective.prototype.getPagingInfo = function () {
            var bindingPath = this.viewModel.bindingPath;
            var bindingData = this.viewModel.bindingData;
            var pagingInfo = bindingData.pagingInfo;
            if (bindingPath === '/') {
                return pagingInfo;
            }
            else {
                var bindingPaths = bindingPath.substr(1).split('/').filter(function (item) { return !!item && item.length > 0; }).map(function (item) {
                    return item.substring(0, item.length - 1);
                });
                bindingPaths.forEach(function (path) {
                    pagingInfo = pagingInfo && pagingInfo[path];
                });
                return pagingInfo;
            }
        };
        FarrisTreeTableBindingDirective.prototype.updatePageInfo = function (treeTable) {
            var _a = this.getPagingInfo(), pageIndex = _a.pageIndex, pageSize = _a.pageSize, total = _a.total;
            if (pageSize === 0) {
                treeTable.pagination = false;
                return;
            }
            treeTable.pagination = true;
            treeTable.updatePageInfo({ pageIndex: pageIndex, pageSize: pageSize, total: total });
        };
        //#region 组件事件
        /**
         * 行切换
         */
        FarrisTreeTableBindingDirective.prototype.selectionChangeHandler = function (event) {
            if (event && event.node && event.node.hasOwnProperty('data')) {
                var idField = this.treeTable.idField;
                var id = event.node.data[idField];
                this.setCurrentIdToBindingList(id);
            }
        };
        /**
         * 勾选节点发生变化
         * @param event event
         */
        FarrisTreeTableBindingDirective.prototype.checkValuesChange = function (event) {
            // this.viewModel.uiState.setPropertyValue('ids', this.treeTable.checkValues);
            this.setChecks(this.treeTable.checkValues);
            this.setCheckedRows();
        };
        /**
         * 将被展开的节点设置为当前行
         */
        FarrisTreeTableBindingDirective.prototype.expandHandler = function (event) {
            var selectedId = event.data['id'];
            var virtualRootFrameContext = this.frameContext.getVirtualRootFrameContext();
            // 展开时不再选中
            // this.setSelectedIdToTree(selectedId);
            var expandNodes = virtualRootFrameContext.getParam('TREE_LATEST_EXPANDED_ID') || [];
            expandNodes.push(selectedId);
            virtualRootFrameContext.setParam('TREE_LATEST_EXPANDED_ID', expandNodes);
        };
        FarrisTreeTableBindingDirective.prototype.onPageChanged = function (event) {
            var _a = event || {}, _b = _a.pageSize, pageSize = _b === void 0 ? 20 : _b, _c = _a.pageIndex, pageIndex = _c === void 0 ? 1 : _c;
            if (pageIndex < 1) {
                pageIndex = 1;
            }
            var skip = (pageIndex - 1) * pageSize;
            this.bindingData.setPagingInfo(skip, pageSize, this.bindingData.bindingPath);
        };
        FarrisTreeTableBindingDirective.prototype.onPageSizeChanged = function (event) {
            var pageSize = event ? event : 20;
            var skip = 0;
            this.bindingData.setPagingInfo(skip, pageSize, this.bindingData.bindingPath);
        };
        /**
         * 节点页码切换事件
         * @param event event
         */
        FarrisTreeTableBindingDirective.prototype.onNodePageChanged = function (event) {
            var _a = event.pageIndex, pageIndex = _a === void 0 ? 1 : _a, _b = event.pageSize, pageSize = _b === void 0 ? this.nodePageSize : _b, _c = event.node, node = _c === void 0 ? {} : _c;
            var id = node && node.id || null;
            if (id) {
                var virtualRootFrameContext = this.frameContext.getVirtualRootFrameContext();
                var expandNodes = virtualRootFrameContext.getParam('TREE_LATEST_EXPANDED_ID') || [];
                expandNodes.push(id);
                virtualRootFrameContext.setParam('TREE_LATEST_EXPANDED_ID', expandNodes);
                this.frameContext.params.set("_NODE_" + id + "_PAGE_INDEX_", pageIndex);
                this.frameContext.params.set("_RELOAD_CHILDREN_", true);
                this.frameContext.params.set('_NODE_PAGE_CHANGED_', true);
            }
        };
        FarrisTreeTableBindingDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[farrisTreeTableBinding]'
                    },] }
        ];
        /** @nocollapse */
        FarrisTreeTableBindingDirective.ctorParameters = function () {
            return [
                { type: uiTreetable.TreeTableComponent },
                { type: FarrisTreetableFormatService },
                { type: devkit.FrameContext }
            ];
        };
        FarrisTreeTableBindingDirective.propDecorators = {
            hierarchyInfoKey: [{ type: core.Input, args: ['farrisHierarchyInfoKey',] }],
            rowClassName: [{ type: core.Input }],
            cellClassName: [{ type: core.Input }],
            nodePageSize: [{ type: core.Input, args: ['nodePageSize',] }],
            rowClass: [{ type: core.Output }],
            cellClass: [{ type: core.Output }],
            selectionChangeHandler: [{ type: core.HostListener, args: ['nodeSelected', ['$event'],] }],
            checkValuesChange: [{ type: core.HostListener, args: ['checkValuesChange', ['$event'],] }],
            expandHandler: [{ type: core.HostListener, args: ['expand', ['$event'],] }],
            onPageChanged: [{ type: core.HostListener, args: ['pageChanged', ['$event'],] }],
            onPageSizeChanged: [{ type: core.HostListener, args: ['pageSizeChanged', ['$event'],] }],
            onNodePageChanged: [{ type: core.HostListener, args: ['childsPageChanged', ['$event'],] }]
        };
        return FarrisTreeTableBindingDirective;
    }());

    /**
     * 帮助映射基类
     */
    var DataMapping = /** @class */ (function () {
        function DataMapping() {
            /**
             * 多选帮助默认分隔符
             */
            this.defaultSpliter = ',';
        }
        /**
         * 映射数据
         * @param helpData 清空时，值为null
         * @param mapFields 格式形如：{id: "assoField.assoField", code: "assoField.assoField_Code", name: "assoField.assoField_Name"}
         * @param asClear 类似清空
         * @param [spliter=','] 多选分隔符
         */
        DataMapping.prototype.mappingData = function (helpData, mapFields, asClear, spliter) {
            if (asClear === void 0) {
                asClear = false;
            }
            if (spliter === void 0) {
                spliter = ',';
            }
            if (!mapFields) {
                return;
            }
            // 关闭变更检测
            var appContext = this.vm.frameContext.appContext;
            appContext.changeDetectionController.detach();
            var helpFields = Object.keys(mapFields);
            var basePaths = this.getBindingPathArray();
            var primaryInfo = this.getMapFieldsPrimaryKey(mapFields, basePaths);
            // 映射到目标主键的源字段数组
            var primaryKeys = primaryInfo && primaryInfo.map(function (item) { return item.primaryKey; }) || [];
            // 目标主键字段数组
            var primaryFields = primaryInfo && primaryInfo.map(function (item) { return item.primaryField; }) || [];
            // 对映射中的key进行排序，使映射到目标主键的key排到前面
            helpFields = this.sortMapFieldKeys(helpFields, primaryKeys);
            if (!helpData || asClear) {
                helpFields.reverse();
            }
            this.mapping(helpFields, mapFields, helpData, primaryFields, basePaths, asClear, spliter);
            // 重新打开变更检测
            appContext.changeDetectionController.reattach();
        };
        DataMapping.prototype.mapping = function (sortedKeyFields, mapFields, helpData, targetPrimaryFields, basePaths, asClear, spliter) {
            var _this = this;
            if (asClear === void 0) {
                asClear = false;
            }
            if (spliter === void 0) {
                spliter = ',';
            }
            sortedKeyFields.forEach(function (field) {
                var val = _this.getHelpValue(field, helpData, spliter);
                var mappings = mapFields[field].split(',');
                var headMappings = mappings.filter(function (p) { return targetPrimaryFields.includes(p); });
                var leftMappings = mappings.filter(function (p) { return !targetPrimaryFields.includes(p); });
                if (!helpData || asClear) {
                    mappings = [].concat(leftMappings).concat(headMappings);
                }
                else {
                    mappings = [].concat(headMappings).concat(leftMappings);
                }
                _this.updateTarget(mappings, basePaths, helpData, val);
            });
        };
        DataMapping.prototype.updateTarget = function (mappings, basePaths, helpData, value) {
            var _this = this;
            mappings.forEach(function (targetFieldPath) {
                _this.updateTargetValue(basePaths, targetFieldPath, value, helpData);
            });
        };
        DataMapping.prototype.updateTargetValue = function (basePaths, targetFieldPath, value, helpData) {
            if (this.target) {
                var paths = targetFieldPath.split('.');
                this.setValue(this.target, paths, value);
            }
            else {
                var paths = basePaths.concat(targetFieldPath.split('.'));
                if (!helpData) {
                    this.vm.bindingData.clearValue(paths, true, true, { frameContext: this.vm.frameContext });
                }
                else {
                    this.vm.bindingData.setValue(paths, value, true, true, null, { frameContext: this.vm.frameContext });
                }
            }
        };
        /**
         * 获取帮助字段对应的值
         * @param field 帮助字段
         * @param helpData 帮助数据
         * @param [spliter=','] 多选帮助分隔符
         * @returns
         */
        DataMapping.prototype.getHelpValue = function (field, helpData, spliter) {
            var _this = this;
            if (spliter === void 0) {
                spliter = ',';
            }
            var value = '';
            if (helpData) {
                if (helpData instanceof Array) {
                    value = helpData.map(function (item) {
                        return _this.getValue(field, item);
                    }).join(spliter);
                }
                else {
                    value = this.getValue(field, helpData);
                }
            }
            return value;
        };
        DataMapping.prototype.getValue = function (f, data) {
            var val = '';
            if (f.indexOf('.') === -1) {
                val = data[f];
            }
            else {
                val = f.split('.').reduce(function (a, b) {
                    return a[b];
                }, data);
            }
            return val;
        };
        DataMapping.prototype.setValue = function (target, paths, value) {
            if (target) {
                if (paths.length <= 1) {
                    target[paths[0]] = value;
                }
                else {
                    paths.slice(0, -1).reduce(function (prev, path) {
                        if (!(prev.hasOwnProperty(path) || prev['__proto__'].hasOwnProperty(path))) {
                            prev[path] = {};
                        }
                        return prev[path];
                    }, target)[paths[paths.length - 1]] = value;
                }
            }
        };
        DataMapping.prototype.getBindingPathArray = function () {
            var path = this.vm.bindingPath;
            if (path) {
                return path.split('/').filter(function (n) { return n !== ''; });
            }
            return [];
        };
        DataMapping.prototype.isNumberValue = function (field, data) {
            var currentVal = this.getValue(field, data);
            return lodashEs.isNumber(currentVal);
        };
        /**
         *
         * @param mapFields  格式形如：{id: "assoField.assoField", code: "assoField.assoField_Code", name: "assoField.assoField_Name"} 或者 {id:'vid',code:'code',name:'name'}
         */
        DataMapping.prototype.getMapFieldsPrimaryKey = function (mapFields, bindingPaths) {
            if (!mapFields || Object.keys(mapFields).length < 1) {
                return null;
            }
            var results = [];
            // let primaryField = null;
            try {
                var entityTypeInfo_1 = this.vm.frameContext.repository.entityTypeInfo;
                Object.keys(mapFields).forEach(function (key) {
                    var mapField = mapFields[key];
                    if (mapField && typeof mapField === 'string') {
                        var mappings = mapField.split(',').filter(function (p) { return p; });
                        mappings.forEach(function (item) {
                            var paths = item.split('.');
                            if (bindingPaths && bindingPaths.length > 0) {
                                paths = bindingPaths.concat(paths);
                            }
                            var propInfo = entityTypeInfo_1.getPropInfoByPath(paths);
                            if (propInfo && propInfo.metadataInfo && propInfo.metadataInfo.primary === true) {
                                results.push({
                                    primaryKey: key,
                                    primaryField: item
                                });
                            }
                        });
                    }
                });
            }
            catch (e) {
                console.error(e);
            }
            return results;
        };
        DataMapping.prototype.sortMapFieldKeys = function (keys, primaryKeys) {
            if (!primaryKeys || primaryKeys.length < 1 || !keys || keys.length < 1) {
                return keys;
            }
            primaryKeys = __spread(new Set(primaryKeys));
            // 过滤出非主键映射字段
            keys = keys.filter(function (p) { return !primaryKeys.includes(p); });
            return [].concat(primaryKeys).concat(keys);
        };
        return DataMapping;
    }());

    /*
     * @Author: 疯狂秀才(lucas huang)
     * @Date: 2018-11-07 16:31:57
     * @LastEditors: 疯狂秀才(Lucas Huang)
     * @LastEditTime: 2019-09-27 14:57:22
     * @Company: Inspur
     * @Version: v0.0.1
     */
    var LookupDataMappingDirective = /** @class */ (function (_super) {
        __extends(LookupDataMappingDirective, _super);
        function LookupDataMappingDirective(vm, lookup) {
            var _this = _super.call(this) || this;
            _this.vm = vm;
            _this.lookup = lookup;
            _this.target = null;
            return _this;
        }
        LookupDataMappingDirective.prototype.ngOnInit = function () {
            var _this = this;
            this.lookup.selectedData.subscribe(function (data) {
                var _mapfields = _this.mapfields || _this.lookup.mapFields;
                var spliter = _this.lookup.multipleChoiceSeparator || _this.defaultSpliter;
                _this.mappingData(data, _mapfields, false, spliter);
            });
            this.lookup.clearMappings.subscribe(function (result) {
                // const value = result && result.value || null;
                var mapfields = Object.assign({}, (_this.mapfields || _this.lookup.mapFields || {}));
                var lookupTextField = _this.lookup.textField;
                var data = {};
                var controlName = _this.lookup.ngControl && _this.lookup.ngControl.name;
                if (controlName && _this.vm) {
                    var textFieldMapping = mapfields[lookupTextField];
                    var ngFormControl = _this.vm && _this.vm.form && _this.vm.form.ngFormControls && _this.vm.form.ngFormControls[controlName];
                    var binding_1 = ngFormControl && ngFormControl.binding;
                    if (textFieldMapping && binding_1) {
                        mapfields[lookupTextField] = textFieldMapping.split(',').filter(function (item) { return item !== binding_1; }).join(',');
                    }
                }
                // this.setValue(data, lookupTextField.split('.'), value);
                Object.keys(mapfields).forEach(function (field) {
                    _this.setValue(data, field.split('.'), '');
                });
                _this.mappingData(data, mapfields, true);
            });
            this.lookup.clear.subscribe(function () {
                var _mapfields = _this.mapfields || _this.lookup.mapFields;
                _this.mappingData(null, _mapfields);
            });
        };
        LookupDataMappingDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[data-mapping]' },] }
        ];
        /** @nocollapse */
        LookupDataMappingDirective.ctorParameters = function () {
            return [
                { type: devkit.ViewModel, decorators: [{ type: core.Optional }] },
                { type: uiLookup.LookupGridComponent, decorators: [{ type: core.Optional }, { type: core.Self }] }
            ];
        };
        LookupDataMappingDirective.propDecorators = {
            mapfields: [{ type: core.Input, args: ['data-mapping',] }],
            target: [{ type: core.Input, args: ['target',] }]
        };
        return LookupDataMappingDirective;
    }(DataMapping));

    // tslint:disable-next-line: directive-selector
    var LookupEnableExtendLoadMethodDirective = /** @class */ (function () {
        function LookupEnableExtendLoadMethodDirective(frameContext, lookup) {
            this.frameContext = frameContext;
            this.lookup = lookup;
        }
        LookupEnableExtendLoadMethodDirective.prototype.ngOnInit = function () {
            if (!this.frameContext || !this.lookup || this.enableExtendLoadMethod !== true) {
                return;
            }
            var befApiUrl = this.frameContext.repository.apiUri;
            var helpMetadataId = this.lookup.uri;
            var enableKey = helpMetadataId + "@" + befApiUrl;
            this.frameContext.setParam(enableKey, true);
        };
        LookupEnableExtendLoadMethodDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[enableExtendLoadMethod]'
                    },] }
        ];
        /** @nocollapse */
        LookupEnableExtendLoadMethodDirective.ctorParameters = function () {
            return [
                { type: devkit.FrameContext, decorators: [{ type: core.Optional }] },
                { type: uiLookup.LookupGridComponent, decorators: [{ type: core.Optional }, { type: core.Self }] }
            ];
        };
        LookupEnableExtendLoadMethodDirective.propDecorators = {
            enableExtendLoadMethod: [{ type: core.Input }]
        };
        return LookupEnableExtendLoadMethodDirective;
    }());

    var UIStateBindingDirective = /** @class */ (function () {
        function UIStateBindingDirective(hostComboComponent, hostHelpComponent, differs, hostComboListComponent, hostComboLookupComponent) {
            this.hostComboComponent = hostComboComponent;
            this.hostHelpComponent = hostHelpComponent;
            this.differs = differs;
            this.hostComboListComponent = hostComboListComponent;
            this.hostComboLookupComponent = hostComboLookupComponent;
            this.defaultSpliter = ',';
            this.differ = null;
            this.UIStateBindingChange = new core.EventEmitter();
        }
        Object.defineProperty(UIStateBindingDirective.prototype, "bindingObject", {
            get: function () {
                return this._bindingObject;
            },
            set: function (value) {
                this._bindingObject = value;
                if (!this.differ && value && this.differs && typeof (value) === 'object') {
                    this.differ = this.differs.find(value).create();
                }
            },
            enumerable: true,
            configurable: true
        });
        UIStateBindingDirective.prototype.onValueChange = function (val) {
            // host is combobox
            if (this.hostComboComponent && this.bindingObject) {
                if (val) {
                    this.bindingObject.key = val.value;
                    this.bindingObject.value = val.name;
                }
                else {
                    this.bindingObject.key = null;
                    this.bindingObject.value = null;
                }
            }
        };
        UIStateBindingDirective.prototype.ngOnInit = function () {
            if (this.hostComboComponent) {
                this.hostComboComponent.valuePrimitive = false;
            }
            else if (this.hostHelpComponent) {
                this.bindObjectToHostLookup();
            }
            else if (this.hostComboListComponent) {
                this.bindObjectToHostComboList();
            }
            else if (this.hostComboLookupComponent) {
                this.bindObjectToHostComboLookup();
            }
        };
        UIStateBindingDirective.prototype.ngDoCheck = function () {
            if (this.differ && typeof (this.bindingObject) === 'object') {
                var changes = this.differ && this.differ.diff(this.bindingObject);
                if (changes) {
                    this.bindingChanges();
                }
            }
            else { // 兼容未重新编译工程，differ不存在从情况
                this.bindingChanges();
            }
        };
        UIStateBindingDirective.prototype.bindingChanges = function () {
            var text = this.bindingObject ? this.bindingObject.value : null;
            var key = this.bindingObject ? this.bindingObject.key : null;
            if (this.hostComboComponent) {
                this.hostComboComponent.text = text;
                var vField_1 = this.hostComboComponent.valueField;
                var item = this.hostComboComponent.data.find(function (n) { return n[vField_1] === key; });
                this.hostComboComponent.writeValue(item);
            }
            else if (this.hostHelpComponent) {
                this.hostHelpComponent.writeValue(text);
                this.hostHelpComponent.displayValue = key;
            }
            else if (this.hostComboListComponent) {
                this.hostComboListComponent.writeValue(key);
            }
            else if (this.hostComboLookupComponent) {
                this.hostComboLookupComponent.selectedValues = key;
                this.hostComboLookupComponent.writeValue(text);
            }
        };
        UIStateBindingDirective.prototype.ngOnChanges = function (changes) {
            if (changes.bindingObject && !this.differ) {
                this.bindingChanges();
            }
        };
        // 弹出帮助
        UIStateBindingDirective.prototype.bindObjectToHostLookup = function () {
            var _this = this;
            if (!this.hostHelpComponent) {
                return;
            }
            this.hostHelpComponent.selectedData.subscribe(function (data) { return _this.updateHelpBindingObject(data); });
            this.hostHelpComponent.clear.subscribe(function () {
                // this.bindingObject = {key: null, value: null};
                _this.updateHelpBindingObject(null);
            });
            if (this.hostHelpComponent.tagRemoved) {
                this.hostHelpComponent.tagRemoved.subscribe(function (event) {
                    var _a = event.removedIndex, index = _a === void 0 ? -1 : _a, _b = event.instance, componentRef = _b === void 0 ? null : _b;
                    if (index === -1) {
                        return;
                    }
                    var isSigleSelect = componentRef.singleSelect;
                    if (isSigleSelect || !componentRef.displayValue) {
                        _this.updateHelpBindingObject(null);
                    }
                    else {
                        _this.UIStateBindingChange.emit({ key: componentRef.displayValue, value: componentRef.displayText });
                    }
                });
            }
            if (this.hostHelpComponent.nosearch) {
                this.hostHelpComponent.valueChanged.subscribe(function (txt) {
                    var _a;
                    var idField = _this.hostHelpComponent.idField;
                    var textField = _this.hostHelpComponent.textField;
                    _this.updateHelpBindingObject((_a = {},
                        _a[idField] = txt,
                        _a[textField] = txt,
                        _a));
                });
            }
        };
        // 下拉列表
        UIStateBindingDirective.prototype.bindObjectToHostComboList = function () {
            var _this = this;
            if (!this.hostComboListComponent) {
                return;
            }
            this.hostComboListComponent.valueChange.subscribe(function (data) { return _this.updateHelpBindingObject(data.selections); });
            this.hostComboListComponent.clear.subscribe(function () {
                _this.updateHelpBindingObject(null);
            });
        };
        // 下拉帮助
        UIStateBindingDirective.prototype.bindObjectToHostComboLookup = function () {
            var _this = this;
            if (!this.hostComboLookupComponent) {
                return;
            }
            if (this.hostComboLookupComponent.multiSelect) {
                this.hostComboLookupComponent.valueChange.subscribe(function (data) { return _this.updateHelpBindingObject(data.selections); });
            }
            else {
                // this.hostComboLookupComponent.selectChange.subscribe((data: any) => this.updateHelpBindingObject(data));
                this.hostComboLookupComponent.selectChange.subscribe(function (e) {
                    var data = e;
                    if (e.data) {
                        data = e.data;
                    }
                    _this.updateHelpBindingObject(data);
                });
            }
            this.hostComboLookupComponent.clear.subscribe(function () {
                _this.updateHelpBindingObject(null);
            });
        };
        // 更新UISTATE
        UIStateBindingDirective.prototype.updateHelpBindingObject = function (data) {
            var idField;
            var textField;
            var spliter = this.defaultSpliter;
            if (this.hostHelpComponent) {
                idField = this.hostHelpComponent.idField;
                textField = this.hostHelpComponent.textField;
                spliter = this.hostHelpComponent.multipleChoiceSeparator || this.defaultSpliter;
            }
            if (this.hostComboListComponent) {
                idField = this.hostComboListComponent.idField;
                textField = this.hostComboListComponent.textField;
            }
            if (this.hostComboLookupComponent) {
                idField = this.hostComboLookupComponent.idField;
                textField = this.hostComboLookupComponent.textField;
                spliter = this.hostComboLookupComponent.separator || this.defaultSpliter;
            }
            this.emitUiStateBinding(data, idField, textField, spliter);
        };
        UIStateBindingDirective.prototype.emitUiStateBinding = function (data, idField, textField, spliter) {
            if (spliter === void 0) {
                spliter = ',';
            }
            var newObject = { key: null, value: null };
            if (data) {
                // const idField = this.hostHelpComponent.idField;
                // const textField = this.hostHelpComponent.textField;
                if (Array.isArray(data)) {
                    newObject.key = data.map(function (d) { return d[idField]; }).join(spliter);
                    newObject.value = data.map(function (d) {
                        if (textField.indexOf('.') > -1) {
                            return textField.split('.').reduce(function (r, c) {
                                return r[c];
                            }, d);
                        }
                        else {
                            return d[textField];
                        }
                    }).join(spliter);
                }
                else {
                    if (idField) {
                        newObject.key = data[idField];
                    }
                    if (textField) {
                        if (textField.indexOf('.') > -1) {
                            newObject.value = textField.split('.').reduce(function (r, c) {
                                return r[c];
                            }, data);
                        }
                        else {
                            newObject.value = data[textField];
                        }
                    }
                }
            }
            this.UIStateBindingChange.emit(newObject);
        };
        UIStateBindingDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[UIStateBinding]'
                    },] }
        ];
        /** @nocollapse */
        UIStateBindingDirective.ctorParameters = function () {
            return [
                { type: kendoAngularDropdowns.ComboBoxComponent, decorators: [{ type: core.Host }, { type: core.Self }, { type: core.Optional }] },
                { type: uiLookup.LookupGridComponent, decorators: [{ type: core.Host }, { type: core.Self }, { type: core.Optional }] },
                { type: core.KeyValueDiffers, decorators: [{ type: core.Optional }] },
                { type: uiComboList.ComboListComponent, decorators: [{ type: core.Host }, { type: core.Self }, { type: core.Optional }] },
                { type: uiComboLookup.ComboLookupComponent, decorators: [{ type: core.Host }, { type: core.Self }, { type: core.Optional }] }
            ];
        };
        UIStateBindingDirective.propDecorators = {
            bindingObject: [{ type: core.Input, args: ['UIStateBinding',] }],
            UIStateBindingChange: [{ type: core.Output }],
            onValueChange: [{ type: core.HostListener, args: ['valueChange', ['$event'],] }]
        };
        return UIStateBindingDirective;
    }());

    var FarrisDisabledDirective = /** @class */ (function () {
        function FarrisDisabledDirective(grid, el, renderer) {
            this.grid = grid;
            this.el = el;
            this.renderer = renderer;
        }
        FarrisDisabledDirective.prototype.ngOnInit = function () {
        };
        FarrisDisabledDirective.prototype.ngOnChanges = function (changes) {
            if (!this.maskElement) {
                this.createMaskElement();
            }
            if (changes['kendoGridDisabled'] && this.maskElement) {
                if (this.kendoGridDisabled) {
                    this.renderer.removeStyle(this.maskElement, 'display');
                }
                else {
                    this.renderer.setStyle(this.maskElement, 'display', 'none');
                }
            }
        };
        FarrisDisabledDirective.prototype.createMaskElement = function () {
            this.maskElement = this.renderer.createElement("div");
            this.renderer.setStyle(this.maskElement, 'width', '100%');
            this.renderer.setStyle(this.maskElement, 'height', '100%');
            this.renderer.setStyle(this.maskElement, 'position', 'absolute');
            this.renderer.setStyle(this.maskElement, 'background-color', 'rgba(255,255,255,0.5)');
            this.renderer.setStyle(this.maskElement, 'z-index', '3');
            this.renderer.setStyle(this.maskElement, 'display', 'none');
            this.renderer.appendChild(this.el.nativeElement, this.maskElement);
        };
        FarrisDisabledDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[farrisDisabled]'
                    },] }
        ];
        /** @nocollapse */
        FarrisDisabledDirective.ctorParameters = function () {
            return [
                { type: kendoAngularGrid.GridComponent },
                { type: core.ElementRef },
                { type: core.Renderer2 }
            ];
        };
        FarrisDisabledDirective.propDecorators = {
            kendoGridDisabled: [{ type: core.Input, args: ['farrisDisabled',] }]
        };
        return FarrisDisabledDirective;
    }());

    var FarrisSortDirective = /** @class */ (function () {
        function FarrisSortDirective() {
        }
        FarrisSortDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[farrisSort]'
                    },] }
        ];
        return FarrisSortDirective;
    }());
    var FarrisTextareaEditDirective = /** @class */ (function () {
        function FarrisTextareaEditDirective() {
        }
        FarrisTextareaEditDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[farris-textarea-edit]'
                    },] }
        ];
        return FarrisTextareaEditDirective;
    }());
    var FarrisDynamicColumnFormatDirective = /** @class */ (function () {
        function FarrisDynamicColumnFormatDirective() {
        }
        FarrisDynamicColumnFormatDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[farrisDynamicColumnFormat]'
                    },] }
        ];
        return FarrisDynamicColumnFormatDirective;
    }());
    var FarrisEditEnterDirective = /** @class */ (function () {
        function FarrisEditEnterDirective() {
        }
        FarrisEditEnterDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[farris-enter-edit]'
                    },] }
        ];
        FarrisEditEnterDirective.propDecorators = {
            farrisForm: [{ type: core.Input, args: ['form-group',] }]
        };
        return FarrisEditEnterDirective;
    }());
    var FarrisTreeTableFormatDirective = /** @class */ (function () {
        function FarrisTreeTableFormatDirective() {
        }
        FarrisTreeTableFormatDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[farrisTreeTableFormat]'
                    },] }
        ];
        return FarrisTreeTableFormatDirective;
    }());

    // tslint:disable: max-line-length
    /*
     * 使用绑定数据指令
     */
    var FarrisDatagridUseBindingDataDirective = /** @class */ (function () {
        // private renderGridDebounce;
        function FarrisDatagridUseBindingDataDirective(bindingData, viewModel, grid) {
            this.bindingData = bindingData;
            this.viewModel = viewModel;
            this.grid = grid;
            // 排序字段
            this.sortFields = null;
            // 排序方向
            this.sortDirections = null;
            /**
             * 是否已排序
             */
            this.hasSorted = false;
            /**
             * 过滤条件
             */
            this.filters = null;
            /**
             * 渲染grid
             */
            this.renderGridSubject = new rxjs.Subject();
            this.enableFilterSorting = false;
            /**
             * 选中行切换事件
             */
            this.selectedRowChange = new core.EventEmitter();
            this.setChecks([]);
            this.enableFilterSorting = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.injector.get(devkit.ENABLE_EDIT_STATE_FILTER_SORTING, false) || false;
            this.registerEvent();
        }
        Object.defineProperty(FarrisDatagridUseBindingDataDirective.prototype, "props", {
            get: function () {
                return this._PROPS;
            },
            set: function (value) {
                this._PROPS = value;
            },
            enumerable: true,
            configurable: true
        });
        // #region Ng Event
        FarrisDatagridUseBindingDataDirective.prototype.ngOnInit = function () {
            var _this = this;
            var _a = (this.getPagingInfo() || {}).pageSize, pageSize = _a === void 0 ? 0 : _a;
            if (pageSize !== 0) {
                // 启用分页
                if ((!this.grid.pageList || this.grid.pageList.length < 1) && typeof this.grid['setPageList'] === 'function') {
                    this.grid['setPageList']([pageSize, pageSize * 2, pageSize * 3, pageSize * 4]);
                }
            }
            this.setComponentRef();
            this.bindData();
            window.setTimeout(function () {
                _this.updateSelectedRow();
            }, 0);
            this.registerBindingDataChangeEvent();
            this.renderGridSubject.pipe(operators.debounceTime(500)).subscribe(function (change) {
                if (!_this.viewModel || !_this.viewModel.frameContext || _this.viewModel.frameContext.isDisposed) {
                    return;
                }
                _this.bindData(change);
                /*if (!this.renderGridDebounce) {
                  this.renderGridDebounce = this.debounce((change) => {
                    this.bindData(change);
                  }, 500);
                }
                this.renderGridDebounce(change);*/
            });
            if (this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.frameComponent) {
                this.viewModel.frameContext.frameComponent.componentType = devkit.ComponentType.farrisDataGridComponent;
            }
        };
        FarrisDatagridUseBindingDataDirective.prototype.ngOnChanges = function (changes) {
            this.bindData();
        };
        Object.defineProperty(FarrisDatagridUseBindingDataDirective.prototype, "primaryKey", {
            // #endregion
            /**
             * 主键
             */
            get: function () {
                return this.bindingList.primaryKey;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FarrisDatagridUseBindingDataDirective.prototype, "bindingList", {
            /**
             * 获取绑定数据
             */
            get: function () {
                // 根实体
                if (this.viewModel.bindingPath === '/' || !this.viewModel.bindingPath) {
                    return this.bindingData.list;
                }
                // 子实体
                var bindingPath = this.viewModel.bindingPath.substr(1);
                bindingPath = bindingPath[0].toLowerCase() + bindingPath.substring(1, bindingPath.length);
                var paths = bindingPath.split('/');
                var filteredPaths = paths.filter(function (part) {
                    return part !== '';
                });
                return this.bindingData.getValue(filteredPaths);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 设置组件引用
         */
        FarrisDatagridUseBindingDataDirective.prototype.setComponentRef = function () {
            var appContext = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.getFormAppContext();
            var frameId = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.frameId;
            var id = this.grid && this.grid.id;
            // 如果frameId不存在或farris grid没有id属性，说明不符合使用场景
            if (!frameId || !id) {
                return;
            }
            var map = appContext && appContext.componentRefs && appContext.componentRefs.get(frameId) || new Map();
            appContext && appContext.componentRefs && appContext.componentRefs.set(frameId, map.set(id, this.grid));
        };
        /**
         * 获取分页信息
         */
        FarrisDatagridUseBindingDataDirective.prototype.getPagingInfo = function () {
            var bindingPath = this.viewModel.bindingPath;
            var bindingData = this.viewModel.bindingData;
            var pagingInfo = bindingData && bindingData.pagingInfo || {};
            if (bindingPath === '/') {
                return pagingInfo;
            }
            else {
                var bindingPaths = bindingPath.substr(1).split('/').filter(function (item) { return !!item && item.length > 0; });
                // 从表及从从表分页和数据是关联的，因为不同的从表行有不同的从从表数据，分页信息的结构为nodeCode_parentId:{分页信息}且分页信息是平级的
                // {pagination:{a_pid:{pageSize:2,pageIndex:1},b_pid:{pageSize:2,pageIndex:1}}}
                // 取出当前路径下实体的nodeCode
                var nodeCode = bindingPaths[bindingPaths.length - 1];
                nodeCode = nodeCode.substr(0, nodeCode.length - 1);
                // 获取当前实体上级的主键
                // const result = pagingInfo[nodeCode] || {};
                // if (result.hasOwnProperty('totalCount')) {
                //   result.total = result.totalCount;
                // }
                // return result;
                var paths = bindingPaths.slice(0, bindingPaths.length - 1);
                var bindingList = bindingData.getValue(paths);
                var _a = (pagingInfo["" + nodeCode] || {}).pageSize, pageSize = _a === void 0 ? 0 : _a;
                // 上级表有数据
                if (bindingList && bindingList.currentId) {
                    var key = nodeCode + "_" + bindingList.currentId;
                    // const key = nodeCode;
                    var result = pagingInfo[key] || {};
                    if (result.hasOwnProperty('totalCount')) {
                        result.total = result.totalCount;
                    }
                    // 上级表虽然有数据，但上级表当前行的下级表可能没有数据，这就导致获取不到分页信息，所以需要在返回前对结果进行处理，如果没有分页信息的话起码应该返回分页大小及当前页码
                    if (Object.keys(result).length < 1) {
                        result.pageIndex = 1;
                        result.pageSize = pageSize;
                    }
                    return result;
                }
                else {
                    // 上级表没有数据，此时需要获取当前表的分页信息，如分页大小。当前页默认为1即可。
                    return { pageIndex: 1, pageSize: pageSize };
                }
            }
        };
        // #region Input
        /**
         * 组件是否需要更新
         * @param props 当前属性
         * @param nextProps 新属性
         * @param change 变更
         */
        FarrisDatagridUseBindingDataDirective.prototype.shouldComponentUpdate = function (change, data) {
            var props = this.buildProps(data);
            if (this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.appContext && this.viewModel.frameContext.appContext.runMode === devkit.RunMode.highSpeed && change) {
                if (change.type === devkit.ChangeType.Load || change.type === devkit.ChangeType.Remove || change.type === devkit.ChangeType.PaginationInfoChange) {
                    return { result: true, props: props };
                }
            }
            var gridProps = this.buildGridProps();
            if (JSON.stringify(props) === JSON.stringify(gridProps)) {
                return { result: false };
            }
            return { result: true, props: props };
        };
        FarrisDatagridUseBindingDataDirective.prototype.registerEvent = function () {
            var _this = this;
            // 排序事件
            this.grid && this.grid.columnSorted && this.grid.columnSorted.subscribe(function (event) {
                var isRemoteSort = _this.grid.remoteSort;
                // 本地排序
                if (!isRemoteSort) {
                    _this.sortFields = _this.grid.sortName;
                    _this.sortDirections = _this.grid.sortOrder;
                    _this.sortBindingList();
                    // this.props = this.buildProps();
                }
                else {
                    // 服务器端排序
                    var groupField = _this.grid && _this.grid.groupField || null;
                    var sortFields = _this.grid.sortName && _this.grid.sortName.split(',') || [];
                    var sortDirection = _this.grid.sortOrder && _this.grid.sortOrder.split(',') || [];
                    if (groupField) {
                        if (!sortFields.includes(groupField)) {
                            sortFields.splice(0, 0, groupField);
                            sortDirection.splice(0, 0, 'asc');
                        }
                    }
                    // 获取当前entity上所有object属性
                    var entityType = _this.viewModel && _this.viewModel.frameContext.repository.entityType || null;
                    if (sortFields.length > 0) {
                        if (entityType) {
                            var dataTypeInfo_1 = new devkit.DataTypeInfo(entityType);
                            sortFields = sortFields.map(function (field) {
                                //if (field && field.indexOf('.') !== -1) {
                                var paths = field.split('.');
                                var propInfo = dataTypeInfo_1.getPropInfoByPath(paths);
                                var originalField = propInfo && propInfo.metadataInfo['path'] || null;
                                return originalField;
                                //}
                                //return field;
                            });
                        }
                    }
                    // 遍历属性，根据datafield转换为originalDataField
                    var fields = sortFields.join(',');
                    var directions = sortDirection.join(',') || 'asc';
                    var frameContext = _this.viewModel && _this.viewModel.frameContext || null;
                    if (frameContext) {
                        frameContext.repository.sortConditionManager.setConditions(_this.viewModel.bindingPath, fields, directions);
                    }
                }
            });
            // 过滤事件
            this.grid && this.grid.filterChanged && this.grid.filterChanged.subscribe(function (event) {
                _this.filters = event;
                if (!_this.grid.remoteFilter) {
                    if (_this.bindingList.length > 0 && !_this.bindingList.currentId) {
                        var id = _this.bindingList.getIdByIndex(0);
                        _this.bindingList.setCurrentId(id);
                    }
                    _this.bindingList.filter(_this.filters);
                    _this.bindData();
                }
            });
            this.viewModel.frameContext.appContext.messagePipe.subscribe(function (message) {
                if (message && message === 'CLEAR_GRID_CONDITION' && _this.filters && Object.keys(_this.filters).length > 0) {
                    _this.filters = {};
                    _this.bindData();
                }
            });
        };
        /**
         * 对bindingList排序
         * @param change change
         */
        FarrisDatagridUseBindingDataDirective.prototype.sortBindingList = function (change) {
            var _this = this;
            // groupField可能有多个，以逗号分隔的字符串
            var groupField = this.grid && this.grid.groupField || null;
            if (groupField) {
                var arrSortFields_1 = this.sortFields && this.sortFields.split(',') || [];
                var groupFields = groupField.split(',').reverse();
                groupFields.forEach(function (field) {
                    if (!arrSortFields_1.includes(field)) {
                        arrSortFields_1.splice(0, 0, field);
                        var arrSortDirection = _this.sortDirections && _this.sortDirections.split(',') || [];
                        arrSortDirection.splice(0, 0, 'asc');
                        _this.sortFields = arrSortFields_1.join(',');
                        _this.sortDirections = arrSortDirection.join(',') || 'asc';
                    }
                });
            }
            this.bindingList.sortBy(this.sortFields, this.sortDirections);
            this.bindData(change);
        };
        // #endregion
        // #region 数据绑定部分
        /**
         * 更新数据
         * @param change? 变更
         */
        FarrisDatagridUseBindingDataDirective.prototype.bindData = function (change) {
            var _this = this;
            var isRemoteFilter = this.grid && this.grid.remoteFilter || false;
            // 先执行排序
            var shouldSort = this.shouldSort(change);
            if (shouldSort) {
                this.hasSorted = true;
                this.sortBindingList(change);
                return;
            }
            this.hasSorted = false;
            // 新增数据时清空表格筛选条件
            if ((this.grid.editable === true || change && change.type === devkit.ChangeType.Append) && this.filters && Object.keys(this.filters).length > 0 && !isRemoteFilter) {
                if (!this.viewModel.frameContext.appContext.enableGridHeaderWhenEditing && !this.enableFilterSorting) {
                    this.filters = {};
                    this.grid.clearCondition();
                }
            }
            var shouldFiltering = this.shouldFiltering(change);
            if (shouldFiltering) {
                this.bindingList.filter(this.filters);
            }
            // 再toJSON
            var data = this.bindingList.toJSON();
            // if (this.filters && Object.keys(this.filters).length > 0 && !isRemoteFilter) {
            //   // data = this.grid.clientFilterService.executeFilter(data, this.filters);
            // }
            if (this.filters && Object.keys(this.filters).length > 0 && !isRemoteFilter && (!change || change && change.type !== devkit.ChangeType.SelectionChanged && change.type !== devkit.ChangeType.GlobalSelectionChanged)) {
                if (data && data.length > 0) {
                    // 判断当前行是否在过滤后的数据中
                    var row = data.find(function (item) { return item[_this.bindingList.primaryKey] === _this.bindingList.currentId; });
                    if (!row) {
                        var firstRowId = data[0][this.bindingList.primaryKey];
                        this.bindingList.setCurrentId(firstRowId, true, true);
                    }
                }
                else {
                    // 本地过滤完之后没有数据了
                    // this.bindingList.currentId = null;
                    if (this.bindingList.currentId) {
                        this.bindingList.setCurrentId(null, true, true, true);
                    }
                    // 单选时清空ids
                    if (!this.grid.multiSelect) {
                        this.setChecks([]);
                    }
                }
            }
            var result = this.shouldComponentUpdate(change, data);
            if (!result.result) {
                return;
            }
            // const nextProps = this.buildProps(result);
            this.renderGrid(result.props);
            this.props = JSON.parse(JSON.stringify(result.props));
        };
        /**
         * 是否应该过滤
         * @param change - change
         * @returns {boolean}
         */
        FarrisDatagridUseBindingDataDirective.prototype.shouldFiltering = function (change) {
            var isRemoteFilter = this.grid && this.grid.remoteFilter || false;
            // 启用远端过滤时不需要本地过滤
            if (isRemoteFilter === true) {
                return false;
            }
            // 没有过滤条件时不需要执行过滤
            if (!this.filters || Object.keys(this.filters).length < 1) {
                return false;
            }
            if (change) {
                return change.type === devkit.ChangeType.Load;
            }
            return !this.grid.editable;
        };
        FarrisDatagridUseBindingDataDirective.prototype.shouldSort = function (change) {
            // this.sortFields && !this.grid.editable && change && (change.type === 'Load' || change.type === 'SelectionChanged')
            if (!this.sortFields || Object.keys(this.sortFields).length < 1) {
                return false;
            }
            if (this.hasSorted) {
                return false;
            }
            if (change) {
                return change.type === 'Load' || change.type === 'SelectionChanged';
            }
            return this.grid.editable;
        };
        /**
         * 渲染grid
         * @param props 属性
         */
        FarrisDatagridUseBindingDataDirective.prototype.renderGrid = function (props) {
            var pageIndex = props.pageIndex, pageSize = props.pageSize, total = props.total, pagination = props.pagination, data = props.data;
            var virtualizedLoad = this.grid.virtualizedAsyncLoad || false;
            this.grid.total = total;
            this.grid.pageSize = pageSize;
            this.grid.pageIndex = pageIndex;
            this.grid.pagination = pagination;
            this.grid.controlPaginationState = false;
            // this.endCellEdit();
            if (pageSize === 0) {
                this.grid.pagination = false;
                this.grid.pageIndex = 1;
                // 修复不分页时grid启用分组仍会重新邦数的问题
                // this.grid.pageSize = total;
            }
            if (virtualizedLoad) {
                this.grid.loadVirtualData({
                    items: data,
                    pageIndex: pageIndex,
                    pageSize: pageSize,
                    total: total
                });
            }
            else {
                this.grid.loadData(data);
            }
        };
        /**
         * 构造表格数据属性
         */
        FarrisDatagridUseBindingDataDirective.prototype.buildProps = function (datas) {
            var data;
            if (typeof (datas) !== 'undefined') {
                data = datas;
            }
            else {
                data = this.bindingList.toJSON();
            }
            // let skip = 0;
            var _a = this.getPagingInfo() || {}, _b = _a.pageIndex, pageIndex = _b === void 0 ? 1 : _b, _c = _a.pageSize, pageSize = _c === void 0 ? 0 : _c;
            var _d = (this.getPagingInfo() || {}).total, total = _d === void 0 ? 0 : _d;
            // if (pageIndex > 0) {
            //   skip = (pageIndex - 1) * pageSize;
            // }
            if (pageSize === 0 && total === 0) {
                total = data.length;
            }
            return { data: data, pageIndex: pageIndex, pageSize: pageSize, total: total, pagination: pageSize !== 0 };
        };
        /**
         * 计算grid状态
         */
        FarrisDatagridUseBindingDataDirective.prototype.buildGridProps = function () {
            var data = this.grid.data || [];
            var _a = { pageIndex: this.grid.pageIndex, pageSize: this.grid.pageSize }, _b = _a.pageIndex, pageIndex = _b === void 0 ? 1 : _b, _c = _a.pageSize, pageSize = _c === void 0 ? 0 : _c;
            var total = this.grid.total || 0;
            if (pageSize === 0 && total === 0) {
                total = data.length;
            }
            return { data: data, pageIndex: pageIndex, pageSize: pageSize, total: total, pagination: this.grid.pagination };
        };
        /**
         * 数据源发生变更
         * @param change 变更
         */
        FarrisDatagridUseBindingDataDirective.prototype.onBindingDataChange = function (change) {
            this.updateDataSource(change);
            this.updateSelectedRow(change);
            // this.updateGrid(change);
            // 不清除勾选行，需要保留勾选状态
            // this.clearCheckedRows(change);
            this.endCellEdit(change);
            // 更新勾选行数据
            this.updateCheckedRows(change);
            this.updateData(change);
        };
        /**
         * 更新数据
         */
        FarrisDatagridUseBindingDataDirective.prototype.updateDataSource = function (change) {
            var _a;
            if (change && change.type === devkit.ChangeType.ValueChanged) {
                // 计算变更路径中表名及字段名
                var paths = change.path;
                try {
                    var entityPath = devkit.ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.viewModel.frameContext.repository.entityTypeInfo);
                    if (this.viewModel.bindingPath === '/' + entityPath.join('/')) {
                        var propertyNames = paths.slice(entityPath.length);
                        if (change.id && this.grid && change.path && this.viewModel.frameContext.appContext.runMode !== devkit.RunMode.highSpeed && propertyNames && propertyNames.length > 0) {
                            this.grid.updateRow(change.id, (_a = {}, _a[propertyNames.join('.')] = change.value, _a));
                        }
                    }
                }
                catch (error) {
                    console.warn(error);
                }
                this.renderGridSubject.next(change);
            }
            else if (change && (change.type === devkit.ChangeType.SelectionChanged || change.type === devkit.ChangeType.GlobalSelectionChanged)) {
                if (this.bindingList.currentId === (this.grid.selectedRow && this.grid.selectedRow.id) && this.grid.total > 0) ;
                else {
                    this.bindData(change);
                }
            }
            else {
                this.bindData(change);
            }
        };
        // private endCellEdit() {
        //   const isEditing = this.grid.isEditing();
        //   if (isEditing) {
        //     this.grid.endCellEdit();
        //   }
        // }
        FarrisDatagridUseBindingDataDirective.prototype.endCellEdit = function (change) {
            var isEditing = this.grid.isEditing();
            if (change.type === devkit.ChangeType.Load && isEditing) {
                this.grid.endCellEdit();
            }
        };
        /**
         * 设置grid当前选择行
         * @param change 变更
         */
        FarrisDatagridUseBindingDataDirective.prototype.updateSelectedRow = function (change) {
            if (!this.bindingList || !this.bindingList.currentId) {
                return;
            }
            // 页码切换时不执行当前行切换
            if (change && change.type === devkit.ChangeType.PaginationInfoChange) {
                return;
            }
            if (this.viewModel && this.viewModel.frameContext.bindingData.rowSelectedEventSuspend === true) {
                return;
            }
            var _a = (this.grid.selectedRow || {}).id, gridSelectedRowId = _a === void 0 ? null : _a;
            var currentId = this.bindingList.currentId;
            // grid当前行与bingingList当前行一致，无须切换
            if (gridSelectedRowId === currentId) {
                var isMatch = change && (change.path.toString() === this.viewModel.bindingPath.split('/').filter(function (p) { return p; }).toString());
                if (change && change.type === devkit.ChangeType.Load && isMatch) {
                    this.grid.clearSelections();
                    this.grid.selectRow(currentId, true, true);
                }
                return;
            }
            this.selectGridRow(this.bindingList.currentId);
        };
        /**
         * 注册bindingdata变化事件
         */
        FarrisDatagridUseBindingDataDirective.prototype.registerBindingDataChangeEvent = function () {
            var _this = this;
            this.bindingDataChangeEvent = this.bindingData.changes.subscribe(function (change) {
                _this.onBindingDataChange(change);
            });
            this.viewModel.frameContext.appContext.messagePipe.subscribe(function (message) {
                if (message === 'bindData') {
                    _this.bindData();
                }
            });
        };
        /**
         * 取消bindingdata变化订阅
         */
        FarrisDatagridUseBindingDataDirective.prototype.unRegisterBindingDataChangeEvent = function () {
            if (this.bindingDataChangeEvent && typeof (this.bindingDataChangeEvent.unsubscribe) === 'function') {
                this.bindingDataChangeEvent.unsubscribe();
            }
        };
        /**
         * 触发页码切换事件
         * @description 本方法适用场景仅为父级grid数据重新load，需要触发该grid重新取数使用。其他场景请勿使用
         * @TODO: 待重构，控制下级数据加载应该依赖表格的行切换事件，临时这样处理，后续提供LoadChildren事件
         */
        FarrisDatagridUseBindingDataDirective.prototype.updateData = function (change) {
            var _this = this;
            if (!(change && (change.type === devkit.ChangeType.SelectionChanged || change.type === devkit.ChangeType.Load))) {
                return;
            }
            var bindingPath = this.viewModel.bindingPath;
            var eventBindingPath = '/' + change.path.join('/');
            var isRetrieve = this.viewModel.frameContext.appContext.params.get('retrieveing') || false;
            if (change.path.length < 1 || bindingPath === '/' || bindingPath === eventBindingPath || !bindingPath.startsWith(eventBindingPath)) {
                return;
            }
            // retrieve时会自动带回从表第一页及从表第一行的从从表数据，所以不需要再去单独请求
            if (isRetrieve) {
                return;
            }
            var fullPaths = devkit.EntityPathConverter.toEntityPathArray(this.viewModel.bindingPath, this.bindingData);
            var paths = fullPaths.slice(0, fullPaths.length - 1);
            var parent = this.bindingList.parent;
            var parentId = parent && parent[parent.primaryKey];
            // 上级表没有数据
            if (!parentId) {
                return;
            }
            // 获取nodecode
            var bindingPaths = this.viewModel.bindingPath.split('/').filter(function (item) { return item; });
            var nodeCode = bindingPaths[bindingPaths.length - 1];
            nodeCode = nodeCode.substr(0, nodeCode.length - 1);
            // const configPath = `/${nodeCode}_${parentId}`;
            var configPath = "/" + nodeCode;
            var _a = (this.viewModel.frameContext.repository.entityCollection.getPaginationConfigByPath(configPath) || {}).pageIndex, pageIndex = _a === void 0 ? 1 : _a;
            var _b = (this.viewModel.frameContext.repository.entityCollection.getPaginationConfigByPath(configPath) || {}).pageSize, pageSize = _b === void 0 ? 0 : _b;
            var parentNodeCode = change.path[change.path.length - 1];
            var parentConfigPath = '/' + parentNodeCode.substring(0, parentNodeCode.length - 1);
            var _c = (this.viewModel.frameContext.repository.entityCollection.getPaginationConfigByPath(parentConfigPath) || {}).pageSize, parentPageSize = _c === void 0 ? 0 : _c;
            var isQueryChild = this.viewModel.frameContext.appContext.params.get('queryChild') || false;
            if (isQueryChild) {
                // this.viewModel.frameContext.appContext.params.delete('queryChild');
                pageIndex = 1;
            }
            // 当上级表切换行时
            if (parentPageSize + pageSize !== 0) {
                this.viewModel.frameContext.appContext.params.set('forceQueryChild', true);
                this.viewModel.frameContext.repository.queryChild(paths, pageIndex, pageSize).pipe(operators.finalize(function () { return _this.viewModel.frameContext.appContext.params.delete('forceQueryChild'); })).subscribe();
            }
        };
        FarrisDatagridUseBindingDataDirective.prototype.ngOnDestroy = function () {
            this.unRegisterBindingDataChangeEvent();
        };
        // #endregion
        // #region 事件发射器
        /**
         * 发射选中行切换事件
         * @description 统一单选模式和多选模式下的行切换事件
         */
        FarrisDatagridUseBindingDataDirective.prototype.fireSelectedRowChange = function (selectedRowContext) {
            this.selectedRowChange.emit(selectedRowContext);
        };
        /**
         * 清空选定行
         * @param change 变更
         */
        FarrisDatagridUseBindingDataDirective.prototype.clearCheckedRows = function (change) {
            if (change.type === devkit.ChangeType.Load && this.grid.multiSelect) {
                var isMatch = this.checkIfChangeMatchBindingPath(change);
                if (isMatch) {
                    this.setChecks([]);
                    if (typeof (this.grid.clearCheckeds) === 'function') {
                        this.grid.clearCheckeds();
                    }
                }
            }
        };
        // #endregion
        // #region 通信
        /**
         * 设置BindingList的当前行
         * @param id 当前行内码
         */
        FarrisDatagridUseBindingDataDirective.prototype.setSelectionIdToBindingData = function (id) {
            // 如果当前行不存在，则强制设置
            if (!id) {
                this.bindingList.currentId = id;
                if (!this.grid.multiSelect) {
                    this.setChecks([]);
                }
                return;
            }
            if (this.bindingList.currentId !== id) {
                this.bindingList.setCurrentId(id, true);
            }
            // 单选模式下将当前行设置到ids
            if (!this.grid.multiSelect) {
                this.setChecks([id]);
            }
        };
        FarrisDatagridUseBindingDataDirective.prototype.updateCheckedRows = function (changes) {
            if (changes.type === devkit.ChangeType.Load) {
                this.setCheckedRows();
            }
            else if (changes.type === devkit.ChangeType.ValueChanged) {
                var ids = this.getChecks();
                if (changes.id && ids.includes(changes.id)) {
                    this.setCheckedRows();
                }
            }
        };
        /**
         * 设置选择行
         */
        FarrisDatagridUseBindingDataDirective.prototype.setChecks = function (ids) {
            this.viewModel.uiState.setPropertyValue('ids', ids);
            this.setCheckedRows(ids);
        };
        /**
         * 获取勾选行id数组
         * @returns
         */
        FarrisDatagridUseBindingDataDirective.prototype.getChecks = function () {
            return this.viewModel.uiState['ids'] || [];
        };
        /**
         * 更新勾选行数据
         */
        FarrisDatagridUseBindingDataDirective.prototype.setCheckedRows = function (ids) {
            var _this = this;
            // 高速模式时不再设置rows
            // if (this.viewModel.frameContext.appContext.runMode === RunMode.highSpeed) {
            //   return;
            // }
            if (typeof ids === 'undefined') {
                ids = this.viewModel.uiState['ids'] || [];
            }
            if (!Array.isArray(ids) || ids.length < 1) {
                // 此时ids没有值，rows中也不应该有
                this.viewModel.uiState.setPropertyValue('rows', null);
                return;
            }
            var list = [];
            // TODO：rows中数据在高速模式和普通模式下多语字段的值表现不一致，高速模式下多语字段值为对象，普通模式为当前语言。暂不处理高速模式场景
            if (this.viewModel.frameContext.appContext.runMode === devkit.RunMode.highSpeed) {
                list = this.grid.data || [];
            }
            else {
                list = this.bindingList.toJSON({ ignoreMultiLangInput: true });
            }
            var rows = this.viewModel.uiState['rows'] || new Map();
            var result = new Map();
            ids.forEach(function (id) {
                var item = list.find(function (item) { return item[_this.primaryKey] === id; });
                var otherPageItem = rows.get(id);
                if (item) {
                    result.set(id, item);
                }
                else if (otherPageItem) {
                    result.set(id, otherPageItem);
                }
            });
            this.viewModel.uiState.setPropertyValue('rows', result);
        };
        /**
         * 选中grid行
         * @param id id
         */
        FarrisDatagridUseBindingDataDirective.prototype.selectGridRow = function (id) {
            this.grid.selectRow(id);
            this.grid.scrollToCurrentRow();
        };
        // #endregion
        // #region 事件处理器
        /**
         * 页码切换事件
         * @param event event
         */
        FarrisDatagridUseBindingDataDirective.prototype.pageChangedHandler = function (event) {
            var pageIndex = event.pageIndex, pageSize = event.pageSize;
            if (pageIndex < 1) {
                pageIndex = 1;
            }
            var skip = (pageIndex - 1) * pageSize;
            this.bindingData.setPagingInfo(skip, pageSize, this.bindingData.bindingPath);
        };
        /**
         * 行切换事件
         * @param event event
         */
        FarrisDatagridUseBindingDataDirective.prototype.selectedRowChanged = function (event) {
            var index = event.index, data = event.data;
            var id = data[this.primaryKey];
            this.setSelectionIdToBindingData(id);
            this.fireSelectedRowChange(event);
        };
        /**
         * 取消行选择事件
         * @param event event
         */
        FarrisDatagridUseBindingDataDirective.prototype.unSelected = function (event) {
            if (!event) {
                return;
            }
            var _a = event.data, data = _a === void 0 ? {} : _a;
            var id = data[this.primaryKey];
            var currentId = this.bindingList.currentId;
            if (id === currentId) {
                this.setSelectionIdToBindingData(null);
            }
            // this.fireSelectedRowChange(event);
        };
        /**
         * 勾选行发生变化
         * @param event event
         */
        FarrisDatagridUseBindingDataDirective.prototype.checkedChanged = function (event) {
            event = event || [];
            var ids = event.map(function (item) { return item.id; });
            this.setChecks(ids);
        };
        /**
         * 分页大小变更事件
         * @param event event
         */
        FarrisDatagridUseBindingDataDirective.prototype.pageSizeChanged = function (event) {
            var pageIndex = event.pageIndex, pageSize = event.pageSize;
            var skip = 0; //(pageIndex - 1) * pageSize;
            // this.bindingList.setPaginationInfo(skip, pageSize);
            this.bindingData.setPagingInfo(skip, pageSize, this.bindingData.bindingPath);
        };
        /**
         * grid滚动加载数据
         * @param event event
         */
        FarrisDatagridUseBindingDataDirective.prototype.scrollY = function (event) {
            var pageIndex = event.pager, pageSize = event.pageSize;
            var skip = (pageIndex - 1) * pageSize;
            this.bindingData.setPagingInfo(skip, pageSize, this.bindingData.bindingPath);
        };
        FarrisDatagridUseBindingDataDirective.prototype.filterChanged = function (event) {
            this.filters = event;
        };
        // #endregion
        FarrisDatagridUseBindingDataDirective.prototype.checkIfChangeMatchBindingPath = function (change) {
            var isMatch = false;
            if (!change || !change.path) {
                return isMatch;
            }
            var changePathArray = change.path;
            if (!changePathArray) {
                return isMatch;
            }
            if (!(this.bindingData) && !(this.bindingData.bindingPath)) {
                return isMatch;
            }
            var bingdingPathArray = this.bindingData.bindingPath.split('/');
            if (bingdingPathArray.length <= 0) {
                return isMatch;
            }
            if (changePathArray.length === 0) { // 主表
                if (this.bindingData.bindingPath === '/') {
                    isMatch = true;
                }
            }
            else if (change.path.length === 1) { // 主从表
                if (bingdingPathArray.length === 2 && bingdingPathArray[1] === change.path[0]) {
                    isMatch = true;
                }
            }
            else if (change.path.length === 2) { // 主从从表
                if (bingdingPathArray.length === 3 && bingdingPathArray[1] === change.path[0] && bingdingPathArray[2] === change.path[1]) {
                    isMatch = true;
                }
            }
            return isMatch;
        };
        FarrisDatagridUseBindingDataDirective.prototype.debounce = function (callback, wait) {
            var timeoutId = null;
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                window.clearTimeout(timeoutId);
                timeoutId = window.setTimeout(function () {
                    callback.apply(null, args);
                }, wait);
            };
        };
        FarrisDatagridUseBindingDataDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[farris-use-binding-data]'
                    },] }
        ];
        /** @nocollapse */
        FarrisDatagridUseBindingDataDirective.ctorParameters = function () {
            return [
                { type: devkit.BindingData },
                { type: devkit.ViewModel },
                { type: uiDatagrid.DatagridComponent }
            ];
        };
        FarrisDatagridUseBindingDataDirective.propDecorators = {
            selectedRowChange: [{ type: core.Output }],
            pageChangedHandler: [{ type: core.HostListener, args: ['pageChanged', ['$event'],] }],
            selectedRowChanged: [{ type: core.HostListener, args: ['selectChanged', ['$event'],] }],
            unSelected: [{ type: core.HostListener, args: ['unSelect', ['$event'],] }],
            checkedChanged: [{ type: core.HostListener, args: ['checkedChange', ['$event'],] }],
            pageSizeChanged: [{ type: core.HostListener, args: ['pageSizeChanged', ['$event'],] }],
            scrollY: [{ type: core.HostListener, args: ['scrollYLoad', ['$event'],] }],
            filterChanged: [{ type: core.HostListener, args: ['filterChanged', ['$event'],] }]
        };
        return FarrisDatagridUseBindingDataDirective;
    }());

    var MultiSelectDataMappingDirective = /** @class */ (function () {
        function MultiSelectDataMappingDirective(vm, multiSelectComponent) {
            var _this_1 = this;
            this.vm = vm;
            this.multiSelectComponent = multiSelectComponent;
            this.selectedIdChanged = new core.EventEmitter();
            this.vm.uiState.changes.subscribe(function (data) {
                _this_1.selectedId = data.value;
            });
        }
        MultiSelectDataMappingDirective.prototype.ngOnInit = function () {
            var _this_1 = this;
            this.multiSelectComponent.dataSource = [];
            if (Array.isArray(this.dataSource)) {
                this.multiSelectComponent.dataSource = this.dataSource;
                this.originalDataSource = this.dataSource;
            }
            else if (this.dataSource && this.dataSource.changes) {
                this.dataSource.changes.subscribe(function (data) {
                    if (data.type === 'Load') {
                        _this_1.originalDataSource = data.value;
                        if (_this_1.multiSelectComponent.isTree()) {
                            if (_this_1.fjmField) {
                                // 分级码加载树结构
                                _this_1.multiSelectComponent.dataSource = _this_1.plainToTree(data.value, _this_1.fjmField, 1);
                            }
                            else if (_this_1.fjdField) {
                                // 父节点加载树结构
                                _this_1.multiSelectComponent.dataSource = _this_1.buildTreeNodesByFjd(data.value, _this_1.fjdField);
                            }
                            _this_1.multiSelectComponent.selections = _this_1.getTreeSelectionsById(_this_1.selectedId, _this_1.originalDataSource);
                        }
                        else {
                            _this_1.multiSelectComponent.dataSource = data.value;
                            _this_1.multiSelectComponent.selections = _this_1.getListSelectionsById(_this_1.selectedId, _this_1.multiSelectComponent.dataSource);
                        }
                    }
                });
            }
            this.selectIdBindingToUIStateField();
        };
        MultiSelectDataMappingDirective.prototype.selectIdBindingToUIStateField = function () {
            var _this_1 = this;
            if (this.multiSelectComponent && this.multiSelectComponent.selectedIdChange) {
                this.multiSelectComponent.selectedIdChange.subscribe(function (data) {
                    _this_1.selectedIdChanged.emit(data);
                });
            }
        };
        /**
         *
         * @param data 需要格式化的数据
         */
        MultiSelectDataMappingDirective.prototype.formatDataSource = function (data, field) {
            var _this_1 = this;
            if (!data || !data.length) {
                return [];
            }
            return data.map(function (item) {
                var _a;
                var n = item['toJSON'] ? item.toJSON() : item;
                return {
                    data: Object.assign(__assign({}, n), (_a = {},
                        _a["" + _this_1.idField] = item[_this_1.idField],
                        _a["" + _this_1.textField] = item[_this_1.textField],
                        _a["" + _this_1.valueField] = item[_this_1.valueField],
                        _a["" + field] = item[field],
                        _a)),
                    children: []
                };
            });
        };
        /**
         * 把平行结构的数据转换成树形结构
         * @param plainSource
         * @param field
         * @param layer
         */
        MultiSelectDataMappingDirective.prototype.plainToTree = function (plainSource, field, layer) {
            var treeSource = this.formatDataSource(plainSource, field);
            if (!treeSource.length) {
                return [];
            }
            if (!treeSource[0]['data'][field]) {
                return [];
            }
            var parents = treeSource.filter(function (item) {
                return item['data'][field]['layer'] === layer;
            });
            this.recursive(parents, treeSource, field, 1);
            return parents;
        };
        /**
         * 递归遍历树形结构
         * @param parents
         * @param treeSource
         * @param field
         * @param layer
         */
        MultiSelectDataMappingDirective.prototype.recursive = function (parents, treeSource, field, layer) {
            var _this_1 = this;
            parents.forEach(function (parent) {
                var parentPath = parent['data'][field]['path'];
                var parentLayer = parent['data'][field]['layer'];
                if (parent['data'][field]['isDetail'] === false) {
                    treeSource.forEach(function (item) {
                        if (item && item['data'] && item['data'][field] && item['data'][field]['path']) {
                            var itemPath = item['data'][field]['path'];
                            var itemLayer = item['data'][field]['layer'];
                            var targetPath = void 0;
                            if (itemPath && itemPath.length > parentPath.length) {
                                targetPath = itemPath.substr(0, Number(layer) * 4);
                            }
                            if (parentPath === targetPath && parentLayer === itemLayer - 1) {
                                parent['children'].push(item);
                            }
                            if (item['data'][field]['isDetail'] === false && parentPath === targetPath) {
                                _this_1.recursive([item], treeSource, field, Number(layer) + 1);
                            }
                        }
                    });
                }
            });
        };
        /**
           *
           * @param ids 选中数据的id
           * @param dataSource 原始数据
           */
        MultiSelectDataMappingDirective.prototype.getListSelectionsById = function (ids, dataSource) {
            var result = [];
            var _this = this;
            if ((typeof ids === 'string' && !!ids) || typeof ids === 'number') {
                var reusltObj = dataSource.find(function (item) {
                    return item && item[_this.idField] === ids;
                });
                if (reusltObj) {
                    result.push(reusltObj);
                }
            }
            else if (Array.isArray(ids)) {
                if (dataSource) {
                    ids.forEach(function (id) {
                        var item = dataSource.find(function (item) { return item && item[_this.idField] === id; });
                        if (item) {
                            result.push(item);
                        }
                    });
                    // dataSource.forEach(item => {
                    //   ids.forEach(id => {
                    //     if (item[_this.idField] === id) {
                    //       result.push(item);
                    //     }
                    //   })
                    // })
                }
                else {
                    result = [];
                }
            }
            else {
                result = [];
            }
            return result;
        };
        /**
         *
         * @param ids 选中数据的id
         * @param dataSource 原始数据
         */
        MultiSelectDataMappingDirective.prototype.getTreeSelectionsById = function (ids, dataSource) {
            var result = [];
            var _this = this;
            if ((typeof ids === 'string' && !!ids) || typeof ids === 'number') {
                var reusltObj = dataSource.find(function (item) {
                    return item && item[_this.idField] === ids;
                });
                if (reusltObj) {
                    result.push(reusltObj);
                }
            }
            else if (Array.isArray(ids)) {
                if (dataSource) {
                    ids.forEach(function (id) {
                        var item = dataSource.find(function (item) { return item && item[_this.idField] === id; });
                        if (item) {
                            result.push(item);
                        }
                    });
                    // dataSource.forEach(item => {
                    //   ids.forEach(id => {
                    //     if (item.data[_this.idField] === id) {
                    //       result.push(item.data);
                    //     }
                    //   })
                    // })
                }
                else {
                    result = [];
                }
            }
            else {
                result = [];
            }
            return result;
        };
        /**
         * 根据父节点初始化树结构
         * @param bindingObjects
         */
        MultiSelectDataMappingDirective.prototype.buildTreeNodesByFjd = function (bindingObjects, field) {
            var _this_1 = this;
            var treeData = this.formatDataSource(bindingObjects, field);
            treeData.forEach(function (item) {
                var parent = treeData.find(function (ele) { return item.data[field].parentElement === ele.data[_this_1.idField]; });
                if (parent) {
                    parent.children.push(item);
                }
            });
            return treeData.filter(function (ele) { return !ele.data[field].parentElement; });
        };
        MultiSelectDataMappingDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[multiSelectDataMapping]'
                    },] }
        ];
        /** @nocollapse */
        MultiSelectDataMappingDirective.ctorParameters = function () {
            return [
                { type: devkit.ViewModel, decorators: [{ type: core.Optional }] },
                { type: uiMultiSelect.MultiSelectComponent, decorators: [{ type: core.Host }, { type: core.Self }, { type: core.Optional }] }
            ];
        };
        MultiSelectDataMappingDirective.propDecorators = {
            dataSource: [{ type: core.Input }],
            idField: [{ type: core.Input }],
            textField: [{ type: core.Input }],
            valueField: [{ type: core.Input }],
            fjmField: [{ type: core.Input }],
            fjdField: [{ type: core.Input }],
            uiStateField: [{ type: core.Input }],
            selectedId: [{ type: core.Input }],
            selectedIdChanged: [{ type: core.Output }]
        };
        return MultiSelectDataMappingDirective;
    }());

    var FarrisListViewBindingDirective = /** @class */ (function () {
        function FarrisListViewBindingDirective(bindingData, viewModel, listview) {
            this.bindingData = bindingData;
            this.viewModel = viewModel;
            this.listview = listview;
            this.supportPaged = true;
            /**
             * 选中行切换事件
             */
            this.selectedRowChange = new core.EventEmitter();
        }
        Object.defineProperty(FarrisListViewBindingDirective.prototype, "primaryKey", {
            /**
             * 主键
             */
            get: function () {
                return this.bindingList.primaryKey;
            },
            enumerable: true,
            configurable: true
        });
        FarrisListViewBindingDirective.prototype.ngOnInit = function () {
            // 绑定数据
            this.bindData();
            this.registerBindingDataChangeEvent();
        };
        FarrisListViewBindingDirective.prototype.ngOnChanges = function () {
            this.bindData();
        };
        FarrisListViewBindingDirective.prototype.ngOnDestroy = function () {
            this.unRegisterBindingDataChangeEvent();
        };
        /**
         * 获取分页信息
         */
        FarrisListViewBindingDirective.prototype.getPagingInfo = function () {
            var bindingPath = this.viewModel.bindingPath;
            var bindingData = this.viewModel.bindingData;
            var pagingInfo = bindingData.pagingInfo;
            if (bindingPath === '/') {
                return pagingInfo;
            }
            else {
                var bindingPaths = bindingPath.substr(1).split('/').filter(function (item) { return !!item && item.length > 0; }).map(function (item) {
                    return item.substring(0, item.length - 1);
                });
                bindingPaths.forEach(function (path) {
                    pagingInfo = pagingInfo && pagingInfo[path];
                });
                return pagingInfo;
            }
        };
        /**
         * 设置listview属性
         */
        FarrisListViewBindingDirective.prototype.setListViewPageProps = function () {
            var data = this.bindingList.toJSON();
            var _a = this.getPagingInfo() || {}, _b = _a.pageIndex, pageIndex = _b === void 0 ? 1 : _b, _c = _a.pageSize, pageSize = _c === void 0 ? 0 : _c;
            var _d = (this.getPagingInfo() || {}).total, total = _d === void 0 ? 0 : _d;
            if (pageSize === 0 && total === 0) {
                total = data.length;
            }
            this.listview.supportPaging = this.supportPaged;
            this.listview.pageIndex = pageIndex;
            this.listview.pageSize = pageSize;
            this.listview.total = total;
            var currentPage = pageIndex;
            var itemsPerPage = pageSize;
            var totalItems = total;
            if (pageSize === 0) {
                // this.listview.supportPaging = false;
                this.listview.pageIndex = pageIndex;
                this.listview.total = total;
                currentPage = 1;
                totalItems = total;
            }
            if (this.listview.paginationOptions) {
                this.listview.paginationOptions.itemsPerPage = itemsPerPage;
                this.listview.paginationOptions.currentPage = currentPage;
                this.listview.paginationOptions.pageList = this.listview.pageList;
                this.listview.paginationOptions.totalItems = totalItems;
            }
            var listViewChangeDetectRef = this.listview['cdr'];
            if (listViewChangeDetectRef) {
                listViewChangeDetectRef.detectChanges();
            }
            var paginationDirective = this.listview.pager && this.listview.pager['paginationDirective'];
            if (paginationDirective && paginationDirective['service']) {
                try {
                    paginationDirective['service'].instances[this.listview.pager.id] = __assign({}, this.listview.paginationOptions);
                    paginationDirective['service'].setTotalItems(this.listview.pager.id, totalItems);
                    paginationDirective.changeDetectorRef.detectChanges();
                }
                catch (_e) { }
            }
        };
        Object.defineProperty(FarrisListViewBindingDirective.prototype, "bindingList", {
            /*
             * 获取绑定数据
             */
            get: function () {
                // 根实体
                if (this.viewModel.bindingPath === '/' || !this.viewModel.bindingPath) {
                    return this.bindingData.list;
                }
                // 子实体
                var bindingPath = this.viewModel.bindingPath.substr(1);
                bindingPath = bindingPath[0].toLowerCase() + bindingPath.substring(1, bindingPath.length);
                var paths = bindingPath.split('/');
                var filteredPaths = paths.filter(function (part) {
                    return part !== '';
                });
                return this.bindingData.getValue(filteredPaths);
            },
            enumerable: true,
            configurable: true
        });
        /* 绑定数据 */
        FarrisListViewBindingDirective.prototype.bindData = function () {
            this.setListViewPageProps();
            var data = this.bindingList.toArray();
            this.listview.setData(data);
        };
        /*
             * 发射选中行切换事件
             * @description 统一单选模式和多选模式下的行切换事件
             */
        FarrisListViewBindingDirective.prototype.fireSelectedRowChange = function (selectedRowContext) {
            this.selectedRowChange.emit(selectedRowContext);
        };
        /**
         * 设置BindingList的当前行
         * @param id 当前行内码
         */
        FarrisListViewBindingDirective.prototype.setSelectionIdToBindingData = function (id) {
            this.bindingList.setCurrentId(id, true);
        };
        /**
         * 数据源发生变更
         * @param change 变更
         */
        FarrisListViewBindingDirective.prototype.onBindingDataChange = function (change) {
            this.bindData();
            this.updateSelectedRow(change);
        };
        /**
         * 设置当前行
         * @param change 变更
         */
        FarrisListViewBindingDirective.prototype.updateSelectedRow = function (change) {
            if (!this.bindingList || !this.bindingList.currentId) {
                return;
            }
            if (this.viewModel && this.viewModel.frameContext.bindingData.rowSelectedEventSuspend === true) {
                return;
            }
            var _a = (this.listview.clickItem || {}).id, id = _a === void 0 ? null : _a;
            var currentId = this.bindingList.currentId;
            // grid当前行与bingingList当前行一致，无须切换
            if (id === currentId) {
                return;
            }
            this.selectRow(this.bindingList.currentId);
        };
        FarrisListViewBindingDirective.prototype.selectRow = function (id) {
            if (this.listview && typeof this.listview.selectRow === 'function') {
                this.listview.selectRow(id);
            }
        };
        /**
         * 注册bindingdata变化事件
         */
        FarrisListViewBindingDirective.prototype.registerBindingDataChangeEvent = function () {
            var _this = this;
            this.bindingDataChangeEvent = this.bindingData.changes.subscribe(function (change) {
                _this.onBindingDataChange(change);
            });
        };
        /**
         * 取消bindingdata变化订阅
         */
        FarrisListViewBindingDirective.prototype.unRegisterBindingDataChangeEvent = function () {
            this.bindingDataChangeEvent.unsubscribe();
        };
        FarrisListViewBindingDirective.prototype.setChecks = function (ids) {
            this.viewModel.uiState.setPropertyValue('ids', ids);
        };
        /* 切换行事件 */
        FarrisListViewBindingDirective.prototype.changeRow = function (event) {
            var index = event.index, data = event.data, checkChangeEvent = event.checkChangeEvent;
            if (checkChangeEvent === false || !event.hasOwnProperty('checkChangeEvent')) {
                if (data && Array.isArray(data) && data.length > 0) {
                    var id = data[0] && data[0][this.primaryKey] || null;
                    if (id) {
                        this.setSelectionIdToBindingData(id);
                    }
                }
                this.listview.activeIndex = index;
                this.fireSelectedRowChange(event);
            }
        };
        /**
         * 切换页码触发事件
         * @param event 切换页码参数
         */
        FarrisListViewBindingDirective.prototype.pageChangedHandler = function (event) {
            var pageIndex = event.pageInfo.pageIndex;
            var pageSize = event.pageInfo.pageSize;
            if (pageIndex < 1) {
                pageIndex = 1;
            }
            var skip = (pageIndex - 1) * pageSize;
            this.bindingData.setPagingInfo(skip, pageSize, this.bindingData.bindingPath);
        };
        /**
         * 设置每页数据条数触发事件
         * @param event 切换页码参数
         */
        FarrisListViewBindingDirective.prototype.pageSizeChangedHandler = function (event) {
            var _a = event.pageInfo, pageIndex = _a.pageIndex, pageSize = _a.pageSize;
            var skip = (pageIndex - 1) * (+pageSize);
            this.bindingData.setPagingInfo(skip, pageSize, this.bindingData.bindingPath);
        };
        FarrisListViewBindingDirective.prototype.checkValuesChange = function (event) {
            var ids = event;
            this.setChecks(ids);
        };
        FarrisListViewBindingDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[farrisListviewBinding]'
                    },] }
        ];
        /** @nocollapse */
        FarrisListViewBindingDirective.ctorParameters = function () {
            return [
                { type: devkit.BindingData },
                { type: devkit.ViewModel },
                { type: uiListView.ListViewComponent }
            ];
        };
        FarrisListViewBindingDirective.propDecorators = {
            supportPaged: [{ type: core.Input }],
            selectedRowChange: [{ type: core.Output }],
            changeRow: [{ type: core.HostListener, args: ['listClick', ['$event'],] }],
            pageChangedHandler: [{ type: core.HostListener, args: ['pageChanged', ['$event'],] }],
            pageSizeChangedHandler: [{ type: core.HostListener, args: ['pageSizeChanged', ['$event'],] }],
            checkValuesChange: [{ type: core.HostListener, args: ['checkValuesChange', ['$event'],] }]
        };
        return FarrisListViewBindingDirective;
    }());

    var EditableDirective = /** @class */ (function () {
        function EditableDirective(bindingData, viewModel, grid, dateService, injector, rts, dialogSer, ngZone) {
            this.bindingData = bindingData;
            this.viewModel = viewModel;
            this.grid = grid;
            this.dateService = dateService;
            this.injector = injector;
            this.rts = rts;
            this.dialogSer = dialogSer;
            this.ngZone = ngZone;
            /**
             * 编辑时取消分组
             */
            this.disableGroupOnEditing = true;
            /**
             * 多选帮助默认分隔符
             */
            this.defaultSpliter = ',';
            /**
             * 临时记录grid分组字段
             */
            this.groupFields = [];
        }
        Object.defineProperty(EditableDirective.prototype, "bindingList", {
            get: function () {
                // 根实体
                if (this.viewModel.bindingPath === '/' || !this.viewModel.bindingPath) {
                    return this.bindingData.list;
                }
                // 子实体
                var bindingPath = this.viewModel.bindingPath.substr(1);
                bindingPath = bindingPath[0].toLowerCase() + bindingPath.substring(1, bindingPath.length);
                var paths = bindingPath.split('/');
                var filteredPaths = paths.filter(function (part) {
                    return part !== '';
                });
                return this.bindingData.getValue(filteredPaths);
            },
            enumerable: true,
            configurable: true
        });
        EditableDirective.prototype.ngOnInit = function () {
            this.apply();
        };
        EditableDirective.prototype.ngOnChanges = function (changes) {
            this.apply();
        };
        EditableDirective.prototype.ngOnDestroy = function () {
            this.detach();
        };
        /**
         * 应用属性
         */
        EditableDirective.prototype.apply = function () {
            if (!this.grid) {
                return;
            }
            this.handleGroupStatus();
            // 是否启用了编辑态过滤排序
            if (this.gridEditable) {
                var enableFilterSorting = this.injector && this.injector.get(devkit.ENABLE_EDIT_STATE_FILTER_SORTING, false) || false;
                if (!this.grid.remoteFilter && !enableFilterSorting) {
                    this.grid.clearCondition();
                    // 发送清空过滤条件事件
                    this.viewModel.frameContext.appContext.messagePipe.next('CLEAR_GRID_CONDITION');
                }
                this.grid.editable = true;
                if (!this.viewModel.frameContext.appContext.enableGridHeaderWhenEditing && !enableFilterSorting) {
                    this.grid.disableHeader(true);
                }
                this.handleBeginEditEvent();
                this.handleAfterEditEvent();
                this.handleEndEditEvent();
            }
            else {
                this.grid.editable = false;
                this.grid.disableHeader(false);
                // TODO:应由表格兼容，但目前补丁不能继续依赖表格组件，临时使用该方案处理
                // 2023-12-25 表格内部已解决列设置后表头无法拖动问题，且兼容代码存在覆盖开发者设置的自定义列名称的问题
                // this.grid.columns = this.grid.columns.map((cols) => {
                //   return cols.map((col) => Object.assign({}, col));
                // });
                // this.grid.columnsChanged(false);
                if (this.grid && typeof this.grid.sort === 'function' && this.grid.sortName) {
                    this.grid.sort();
                }
                this.detach();
            }
        };
        /**
         * 编辑时取消分组
         */
        EditableDirective.prototype.handleGroupStatus = function () {
            if (this.disableGroupOnEditing === false) {
                return;
            }
            var groupField = this.grid && this.grid.groupField || null;
            if (groupField) {
                if (this.gridEditable) {
                    this.groupFields = [groupField];
                    this.grid.setGroupFields('');
                }
            }
            else {
                if (this.groupFields && this.groupFields.length > 0) {
                    var groupField_1 = this.groupFields.pop();
                    if (this.groupFields.length > 0) {
                        this.groupFields = [];
                    }
                    this.grid.setGroupFields(groupField_1);
                }
            }
        };
        /**
         * 处理开始编辑事件
         */
        EditableDirective.prototype.handleBeginEditEvent = function () {
            var _this = this;
            this.beginEditSubscription = this.grid.beginEdit.subscribe(function (e) {
                if (!e) {
                    return;
                }
                var column$$1 = e.column;
                if (column$$1 && column$$1.editor) {
                    var editorInstance_1 = e.editor.componentRef.instance;
                    if (!editorInstance_1 || !editorInstance_1.instance) {
                        return;
                    }
                    var mapFields_1 = editorInstance_1.instance.mapFields;
                    if (column$$1.editor.type === 'lookup' || column$$1.editor.type === 'PersonnelSelector' || column$$1.editor.type === 'OrganizationSelector' || column$$1.editor.type === 'external-integration' || 'EmployeeSelector' === column$$1.editor.type || 'EmployeeOrgSelector' === column$$1.editor.type) {
                        var lookupGrid_1 = editorInstance_1.instance;
                        var subject = editorInstance_1.instance.selectedData;
                        if (subject) {
                            subject.subscribe(function (data) {
                                mapFields_1 = editorInstance_1.instance.mapFields;
                                var spliter = lookupGrid_1.multipleChoiceSeparator || _this.defaultSpliter;
                                _this.lookupMapping(data, mapFields_1, false, spliter);
                            });
                        }
                        var clearMappings = editorInstance_1.instance.clearMappings;
                        if (clearMappings) {
                            clearMappings.subscribe(function (result) {
                                var mapFields = Object.assign({}, editorInstance_1.instance.mapFields);
                                var value = result && result.value || null;
                                var binding = editorInstance_1.column && editorInstance_1.column.field;
                                var lookupTextField = editorInstance_1.instance.textField;
                                var data = {};
                                if (binding) {
                                    var textFieldMapping = mapFields[lookupTextField];
                                    if (textFieldMapping) {
                                        var otherField = textFieldMapping.split(',').filter(function (item) { return item !== binding; }).join(',');
                                        if (otherField) {
                                            mapFields[lookupTextField] = otherField;
                                        }
                                        else {
                                            delete mapFields[lookupTextField];
                                        }
                                    }
                                    var parentPaths = _this.getBindingPathArray();
                                    _this.bindingData.setValue(parentPaths.concat(binding.split('.')), value, true, true);
                                }
                                // this.setValue(data, lookupTextField.split('.'), value);
                                if (mapFields && Object.keys(mapFields).length > 0) {
                                    Object.keys(mapFields).forEach(function (field) {
                                        _this.setValue(data, field.split('.'), '');
                                    });
                                    _this.lookupMapping(data, mapFields, true);
                                }
                            });
                        }
                    }
                    if (column$$1.editor.type === 'combo-lookup') {
                        editorInstance_1.instance.valueChange.subscribe(function (e) {
                            var asClear = e && e.selections && e.selections.length === 0;
                            var comboLookup = editorInstance_1.instance;
                            mapFields_1 = editorInstance_1.instance.mapFields;
                            var spliter = comboLookup.separator || _this.defaultSpliter;
                            _this.lookupMapping(e.selections || [], mapFields_1, asClear, spliter);
                        });
                    }
                    if (['combo-lookup', 'combolist', 'lookup', 'PersonnelSelector', 'OrganizationSelector', 'external-integration', 'EmployeeSelector', 'EmployeeOrgSelector'].includes(column$$1.editor.type)) {
                        if (editorInstance_1.instance.clear && editorInstance_1.instance.clear.subscribe) {
                            editorInstance_1.instance.clear.subscribe(function () {
                                _this.lookupMapping(null, mapFields_1);
                            });
                        }
                    }
                    if (column$$1.editor.type === 'combolist') {
                        if (mapFields_1) {
                            editorInstance_1.instance.valueChange.subscribe(function (e) {
                                var pathArr = _this.getBindingPathArray();
                                _this.viewModel.bindingData.setValue(pathArr.concat(mapFields_1.split('.')), editorInstance_1.instance.selectedValues, true, true);
                            });
                        }
                    }
                }
            });
        };
        /**
         * 处理编辑事件
         */
        EditableDirective.prototype.handleAfterEditEvent = function () {
            var _this = this;
            this.grid.afterEdit = function (rowIndex, rowData, column$$1, editor) {
                if (_this.dialogSer.hasDialogOpened()) {
                    return rxjs.of(false);
                }
                if (_this.rts) {
                    // 帮助组件文本变化后去查询
                    if (_this.rts.getFormState('lookup.pending')) {
                        return rxjs.of(false);
                    }
                }
                // 更新数据源
                if (!editor || !editor.formControl) {
                    return rxjs.of(false);
                }
                return rxjs.of(true);
            };
        };
        /**
         * 处理结束编辑事件
         */
        EditableDirective.prototype.handleEndEditEvent = function () {
            var _this = this;
            this.endEditSubscription = this.grid && this.grid.endEdit && this.grid.endEdit.subscribe(function (event) {
                var _a = event || {}, _b = _a.value, value = _b === void 0 ? undefined : _b, _c = _a.column, column$$1 = _c === void 0 ? undefined : _c, _d = _a.rowData, rowData = _d === void 0 ? {} : _d;
                var primaryValue = rowData && rowData[_this.grid.idField] || null;
                _this.updateBindingData(value, column$$1, primaryValue);
            });
        };
        /*
         * 给列表赋值 或给formcontrol赋值
         */
        EditableDirective.prototype.updateBindingData = function (value, column$$1, primaryValue) {
            if (!column$$1) {
                return;
            }
            var currentColumnType = column$$1.dataType;
            // 同时判断gridOption的列对象
            var fieldPaths = column$$1.field.split('.');
            // 是否为大数
            var isBigNumber = column$$1 && column$$1.editor && column$$1.editor.options && column$$1.editor.options.bigNumber;
            // 存在行编辑器
            if (currentColumnType === 'date') {
                var result = void 0;
                if (value) {
                    result = this.dateService.formatTo(value, 'yyyy-MM-dd');
                }
                else {
                    result = value;
                }
                this.updateBindingList(primaryValue, fieldPaths.join('.'), result);
            }
            else if (currentColumnType === 'datetime') {
                // if (!value) {
                //   value = '0001-01-01T00:00:00';
                // }
                this.updateBindingList(primaryValue, fieldPaths.join('.'), value);
            }
            else if (currentColumnType === 'number' && !isBigNumber) {
                if (value === null || value === undefined) {
                    this.updateBindingList(primaryValue, fieldPaths.join('.'), null);
                }
                else {
                    this.updateBindingList(primaryValue, fieldPaths.join('.'), Number(value));
                }
            }
            else {
                this.updateBindingList(primaryValue, fieldPaths.join('.'), value);
            }
        };
        EditableDirective.prototype.updateBindingList = function (primaryValue, propertyName, value) {
            var viewModel = this.viewModel || null;
            if (!viewModel || !propertyName) {
                return;
            }
            // 更新主表部分行的字段
            var propertyNames = propertyName.split('.').filter(function (item) { return item; });
            var bindingPath = this.getBindingPathArray();
            // 取出来的一定是bindingList
            var list = this.bindingData.getValue(bindingPath);
            // 修改的是当前行
            if (list && primaryValue === list.currentItem.primaryKeyValue) {
                var paths = bindingPath.concat(propertyNames);
                this.bindingData.setValue(paths, value, true, true);
                return;
            }
            var bindingObject = this.bindingList.findById(primaryValue);
            if (!bindingObject) {
                return;
            }
            if (propertyNames.length < 2) {
                bindingObject.setValue(propertyName, value, true, true);
            }
            else {
                var targetBindingObject_1 = null;
                var fpaths = propertyNames.slice(0, propertyNames.length - 1);
                var targetPropertyName = propertyNames[propertyNames.length - 1];
                fpaths.forEach(function (prop) {
                    targetBindingObject_1 = targetBindingObject_1 && targetBindingObject_1[prop] || bindingObject[prop];
                });
                // todo:需要添加值变化事件
                targetBindingObject_1.setValue(targetPropertyName, value, true, true);
            }
        };
        EditableDirective.prototype.detach = function () {
            if (this.beginEditSubscription && typeof this.beginEditSubscription.unsubscribe === 'function') {
                this.beginEditSubscription.unsubscribe();
            }
            if (this.endEditSubscription && typeof this.endEditSubscription.unsubscribe === 'function') {
                this.endEditSubscription.unsubscribe();
            }
        };
        //#region 帮助字段映射
        EditableDirective.prototype.lookupMapping = function (helpData, mapFields, asClear, spliter) {
            var _this = this;
            if (asClear === void 0) {
                asClear = false;
            }
            if (spliter === void 0) {
                spliter = ',';
            }
            if (!mapFields) {
                return;
            }
            // 关闭变更检测
            var appContext = this.viewModel.frameContext.appContext;
            appContext.changeDetectionController.detach();
            var pathArr = this.getBindingPathArray();
            var helpFields = Object.keys(mapFields);
            var primaryInfo = this.getMapFieldsPrimaryKey(mapFields, pathArr);
            var primaryKeys = primaryInfo && primaryInfo.map(function (item) { return item.primaryKey; }) || [];
            var primaryFields = primaryInfo && primaryInfo.map(function (item) { return item.primaryField; }) || [];
            // 去重
            if (primaryKeys && primaryKeys.length > 0) {
                primaryKeys = __spread(new Set(primaryKeys));
                helpFields = this.sortMapFieldKeys(helpFields, primaryKeys);
            }
            if (!helpData || asClear) {
                helpFields.reverse();
            }
            helpFields.forEach(function (f) {
                var val = '';
                if (helpData) {
                    if (helpData instanceof Array) {
                        val = helpData.map(function (h) {
                            return _this.getValue(f, h);
                        }).join(spliter);
                    }
                    else {
                        val = _this.getValue(f, helpData);
                    }
                }
                var mappings = mapFields[f].split(',');
                var headMappings = mappings.filter(function (p) { return primaryFields.includes(p); });
                var leftMappings = mappings.filter(function (p) { return !primaryFields.includes(p); });
                if (!helpData) {
                    mappings = [].concat(leftMappings).concat(headMappings);
                }
                else {
                    mappings = [].concat(headMappings).concat(leftMappings);
                }
                mappings.forEach(function (ff) {
                    if (!helpData) {
                        _this.viewModel.bindingData.clearValue(pathArr.concat(ff.split('.')), true, true);
                    }
                    else {
                        _this.viewModel.bindingData.setValue(pathArr.concat(ff.split('.')), val, true, true);
                    }
                });
            });
            // 重新打开变更检测
            appContext.changeDetectionController.reattach();
        };
        EditableDirective.prototype.getValue = function (f, data) {
            var val = '';
            if (f.indexOf('.') === -1) {
                val = data[f];
            }
            else {
                val = f.split('.').reduce(function (a, b) {
                    return a[b];
                }, data);
            }
            return val;
        };
        EditableDirective.prototype.getBindingPathArray = function () {
            var path = this.viewModel.bindingPath;
            if (path) {
                return path.split('/').filter(function (n) { return n !== ''; });
            }
            return [];
        };
        EditableDirective.prototype.isNumberValue = function (field, data) {
            var currentVal = this.getValue(field, data);
            return lodashEs.isNumber(currentVal);
        };
        //#endregion
        /**
         *
         * @param mapFields  格式形如：{id: "assoField.assoField", code: "assoField.assoField_Code", name: "assoField.assoField_Name"} 或者 {id:'vid',code:'code',name:'name'}
         */
        EditableDirective.prototype.getMapFieldsPrimaryKey = function (mapFields, bindingPaths) {
            if (!mapFields || Object.keys(mapFields).length < 1) {
                return null;
            }
            var results = [];
            // let primaryField = null;
            try {
                var entityTypeInfo_1 = this.viewModel.frameContext.repository.entityTypeInfo;
                Object.keys(mapFields).forEach(function (key) {
                    var mapField = mapFields[key];
                    if (mapField && typeof mapField === 'string') {
                        var mappings = mapField.split(',').filter(function (p) { return p; });
                        mappings.forEach(function (item) {
                            var paths = item.split('.');
                            if (bindingPaths && bindingPaths.length > 0) {
                                paths = bindingPaths.concat(paths);
                            }
                            var propInfo = entityTypeInfo_1.getPropInfoByPath(paths);
                            if (propInfo && propInfo.metadataInfo && propInfo.metadataInfo.primary === true) {
                                results.push({
                                    primaryKey: key,
                                    primaryField: item
                                });
                            }
                        });
                    }
                });
            }
            catch (e) {
                console.error(e);
            }
            return results;
        };
        EditableDirective.prototype.setValue = function (target, paths, value) {
            if (target) {
                if (paths.length <= 1) {
                    target[paths[0]] = value;
                }
                else {
                    paths.slice(0, -1).reduce(function (prev, path) {
                        if (!(prev.hasOwnProperty(path) || prev['__proto__'].hasOwnProperty(path))) {
                            prev[path] = {};
                        }
                        return prev[path];
                    }, target)[paths[paths.length - 1]] = value;
                }
            }
        };
        EditableDirective.prototype.sortMapFieldKeys = function (keys, primaryKeys) {
            if (!primaryKeys || primaryKeys.length < 1 || !keys || keys.length < 1) {
                return keys;
            }
            // 过滤出非主键映射字段
            keys = keys.filter(function (p) { return !primaryKeys.includes(p); });
            return [].concat(primaryKeys).concat(keys);
        };
        EditableDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[farris-datagrid-editable]'
                    },] }
        ];
        /** @nocollapse */
        EditableDirective.ctorParameters = function () {
            return [
                { type: devkit.BindingData },
                { type: devkit.ViewModel },
                { type: uiDatagrid.DatagridComponent },
                { type: date.DateTimeHelperService },
                { type: core.Injector },
                { type: uiCommon.RuntimeStateService },
                { type: uiDialog.DialogService },
                { type: core.NgZone }
            ];
        };
        EditableDirective.propDecorators = {
            gridEditable: [{ type: core.Input, args: ['farris-datagrid-editable',] }],
            disableGroupOnEditing: [{ type: core.Input, args: ['disableGroupOnEditing',] }]
        };
        return EditableDirective;
    }());

    var AbstractEndEdit = /** @class */ (function () {
        function AbstractEndEdit(appContext) {
            var _this = this;
            this.appContext = appContext;
            this.messagePipe = this.appContext && this.appContext.messagePipe;
            if (this.messagePipe) {
                this.messagePipe.subscribe(function (message) {
                    if (message && message.type === 'endEdit') {
                        _this.endEdit(message);
                    }
                });
            }
        }
        AbstractEndEdit.prototype.ngOnDestroy = function () {
            // if (this.messagePipe) {
            //   this.messagePipe.unsubscribe();
            // }
        };
        return AbstractEndEdit;
    }());

    var InputEndEditDirective = /** @class */ (function (_super) {
        __extends(InputEndEditDirective, _super);
        function InputEndEditDirective(appContext, elementRef) {
            var _this = _super.call(this, appContext) || this;
            _this.appContext = appContext;
            _this.elementRef = elementRef;
            return _this;
        }
        InputEndEditDirective.prototype.ngOnInit = function () {
            if (this.elementRef) {
                this.nativeElement = this.elementRef.nativeElement;
            }
        };
        /**
         * 结束编辑
         * @param message 消息
         */
        InputEndEditDirective.prototype.endEdit = function (message) {
            if (this.nativeElement) {
                var parent_1 = this.nativeElement.parentNode || this.nativeElement.parentElement;
                var inputs = parent_1 && Array.from(parent_1.getElementsByTagName('input')) || [];
                if (inputs && inputs.length > 0) {
                    inputs.forEach(function (input) {
                        if (input && typeof (input.blur) === 'function') {
                            input.blur();
                        }
                    });
                }
            }
        };
        InputEndEditDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[input-end-edit]'
                    },] }
        ];
        /** @nocollapse */
        InputEndEditDirective.ctorParameters = function () {
            return [
                { type: devkit.AppContext },
                { type: core.ElementRef }
            ];
        };
        return InputEndEditDirective;
    }(AbstractEndEdit));

    var FarrisDataGridEndEditDirective = /** @class */ (function (_super) {
        __extends(FarrisDataGridEndEditDirective, _super);
        function FarrisDataGridEndEditDirective(appContext, datagrid) {
            var _this = _super.call(this, appContext) || this;
            _this.appContext = appContext;
            _this.datagrid = datagrid;
            return _this;
        }
        /**
         * 结束编辑
         * @param message message
         */
        FarrisDataGridEndEditDirective.prototype.endEdit = function (message) {
            if (this.datagrid && typeof this.datagrid.endCellEdit === 'function') {
                this.datagrid.endCellEdit();
            }
        };
        FarrisDataGridEndEditDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[farris-grid-end-edit]'
                    },] }
        ];
        /** @nocollapse */
        FarrisDataGridEndEditDirective.ctorParameters = function () {
            return [
                { type: devkit.AppContext },
                { type: uiDatagrid.DatagridComponent }
            ];
        };
        return FarrisDataGridEndEditDirective;
    }(AbstractEndEdit));

    var HtmlEditorEndEditDirective = /** @class */ (function (_super) {
        __extends(HtmlEditorEndEditDirective, _super);
        function HtmlEditorEndEditDirective(appContext, editor) {
            var _this = _super.call(this, appContext) || this;
            _this.appContext = appContext;
            _this.editor = editor;
            return _this;
        }
        HtmlEditorEndEditDirective.prototype.endEdit = function (message) {
            if (this.editor && typeof this.editor.endEdit === 'function') {
                this.editor.endEdit();
            }
        };
        HtmlEditorEndEditDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[html-editor-end-edit]'
                    },] }
        ];
        /** @nocollapse */
        HtmlEditorEndEditDirective.ctorParameters = function () {
            return [
                { type: devkit.AppContext },
                { type: uiHtmlEditor.HtmlEditorComponent }
            ];
        };
        return HtmlEditorEndEditDirective;
    }(AbstractEndEdit));

    var KendoGridEndEditDirective = /** @class */ (function (_super) {
        __extends(KendoGridEndEditDirective, _super);
        function KendoGridEndEditDirective(appContext, grid) {
            var _this = _super.call(this, appContext) || this;
            _this.appContext = appContext;
            _this.grid = grid;
            return _this;
        }
        KendoGridEndEditDirective.prototype.endEdit = function (message) {
            if (this.grid && typeof this.grid.closeCell === 'function') {
                this.grid.closeCell();
            }
        };
        KendoGridEndEditDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[kendo-grid-end-edit]'
                    },] }
        ];
        /** @nocollapse */
        KendoGridEndEditDirective.ctorParameters = function () {
            return [
                { type: devkit.AppContext },
                { type: kendoAngularGrid.GridComponent }
            ];
        };
        return KendoGridEndEditDirective;
    }(AbstractEndEdit));

    var FarrisDataGridRemoteSummaryDirective = /** @class */ (function () {
        function FarrisDataGridRemoteSummaryDirective(viewModel, grid) {
            var _this = this;
            this.viewModel = viewModel;
            this.grid = grid;
            var appContext = this.viewModel.frameContext.getFormAppContext();
            if (appContext && appContext.hasOwnProperty('messagePipe')) {
                appContext.messagePipe.subscribe(function (message) {
                    var messageType = message && message.type || null;
                    // 查询事件
                    if (messageType === 'query') {
                        if (_this.remoteSummaryCommand && _this.grid.footerDataFrom === 'server') {
                            var paths = _this.remoteSummaryCommand.split('.');
                            var func_1 = null;
                            paths.forEach(function (path) {
                                func_1 = func_1 && func_1[path] || _this[path];
                            });
                            if (typeof func_1 === 'function') {
                                func_1().subscribe(function (result) {
                                    _this.grid.footerData = result;
                                });
                            }
                        }
                    }
                });
            }
        }
        /**
         * 执行命令
         * @param commandName 命令名称
         * @param frameId frameId
         */
        FarrisDataGridRemoteSummaryDirective.prototype.execute = function (commandName, frameId) {
            if (!commandName || commandName === '' || commandName === 'undefined') {
                return;
            }
            var viewModel = this.viewModel;
            if (frameId) {
                var targetContext = viewModel.frameContext.appContext.frameContextManager.getFrameContextById(frameId);
                viewModel = targetContext.viewModel;
            }
            return viewModel[commandName]();
        };
        FarrisDataGridRemoteSummaryDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: "[farris-remote-summary-command]"
                    },] }
        ];
        /** @nocollapse */
        FarrisDataGridRemoteSummaryDirective.ctorParameters = function () {
            return [
                { type: devkit.ViewModel },
                { type: uiDatagrid.DatagridComponent }
            ];
        };
        FarrisDataGridRemoteSummaryDirective.propDecorators = {
            remoteSummaryCommand: [{ type: core.Input, args: ['farris-remote-summary-command',] }]
        };
        return FarrisDataGridRemoteSummaryDirective;
    }());

    var FarrisSetFocusDirective = /** @class */ (function () {
        function FarrisSetFocusDirective(rd, injector, el) {
            this.rd = rd;
            this.injector = injector;
            this.el = el;
            this._state = new rxjs.BehaviorSubject({});
        }
        Object.defineProperty(FarrisSetFocusDirective.prototype, "focusState", {
            set: function (value) {
                this._state.next(value);
            },
            enumerable: true,
            configurable: true
        });
        FarrisSetFocusDirective.prototype.ngOnInit = function () {
            var _this = this;
            this.selfEl = this.el.nativeElement;
            this._state.subscribe(function (data) {
                if (data === false && _this.selfEl) {
                    if (_this.selfEl.nodeName.toLowerCase() === 'farris-html-editor') {
                        _this.setHtmlEditorFocus();
                    }
                    else {
                        _this.setFocus();
                    }
                }
            });
        };
        /**
         * 设置一般输入框的默认焦点
         */
        FarrisSetFocusDirective.prototype.setFocus = function () {
            var input = this.selfEl.querySelectorAll('input');
            if (input.length) {
                input[0].focus();
            }
            else {
                this.selfEl.focus();
            }
        };
        /**
         * 设置html编辑器的默认焦点  总是在文本最后
         */
        FarrisSetFocusDirective.prototype.setHtmlEditorFocus = function () {
            // 富文本编辑器不是input
            var ediotrArea = this.selfEl.querySelector('div[contenteditable="true"]');
            //创建range  存在浏览器兼容性问题
            var range = window.getSelection();
            //range 选择obj下所有子内容
            range.selectAllChildren(ediotrArea);
            //光标移至最后
            range.collapseToEnd();
        };
        FarrisSetFocusDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[farris-set-focus]'
                    },] }
        ];
        /** @nocollapse */
        FarrisSetFocusDirective.ctorParameters = function () {
            return [
                { type: core.Renderer2 },
                { type: core.Injector },
                { type: core.ElementRef }
            ];
        };
        FarrisSetFocusDirective.propDecorators = {
            focusState: [{ type: core.Input }]
        };
        return FarrisSetFocusDirective;
    }());

    /**
     * 树表格绑定指令
     */
    var FarrisFilePreviewBindingDirective = /** @class */ (function () {
        /**
         * 构造函数
         * @param previewComponent - 附件组件
         * @param frameContext - 控制器上下文
         * @param uploadAndPreviewComponent - 附件上传预览组件
         * @param injector - injector
         * @TODO: 该指令被用于不同的组件中，因此uploadAndPreviewComponent可能为null
         */
        function FarrisFilePreviewBindingDirective(previewComponent, frameContext, uploadAndPreviewComponent, injector) {
            this.previewComponent = previewComponent;
            this.frameContext = frameContext;
            this.uploadAndPreviewComponent = uploadAndPreviewComponent;
            this.injector = injector;
            /**
             * 未启用排序时默认按上传时间字段排序
             */
            this.DEFAULT_SORT_FIELD = 'createTime';
            /**
             * 启用排序时使用fileSortOrder做排序字段，与零代码的拖拽排序统一
             */
            this.SORT_FIELD_ON_SORTING = 'fileSortOrder';
        }
        Object.defineProperty(FarrisFilePreviewBindingDirective.prototype, "bindingData", {
            /**
             * 绑定数据
             */
            get: function () {
                return this.frameContext.bindingData;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FarrisFilePreviewBindingDirective.prototype, "bindingList", {
            /**
             * 绑定数据列表
             */
            get: function () {
                return this.bindingData.getList();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FarrisFilePreviewBindingDirective.prototype, "orderField", {
            /**
             * 排序字段
             * @description
             * 组件排序字段只有一个，不支持多个。
             * 如果启用了拖拽排序，则为fileSortOrder，否则使用默认的createTime
             */
            get: function () {
                return this.uploadAndPreviewComponent && this.uploadAndPreviewComponent.enableOrder && this.uploadAndPreviewComponent.orderField || this.fileSortOrderKey && this.SORT_FIELD_ON_SORTING || this.DEFAULT_SORT_FIELD;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FarrisFilePreviewBindingDirective.prototype, "orderType", {
            /**
             * 默认降序
             */
            get: function () {
                return this.farrisOrderType ? this.farrisOrderType : this.orderField === this.DEFAULT_SORT_FIELD ? 'desc' : 'asc';
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 指令初始化
         */
        FarrisFilePreviewBindingDirective.prototype.ngOnInit = function () {
            var _this = this;
            this.bindData();
            if (this.uploadAndPreviewComponent) {
                if (this.uploadAndPreviewComponent.enableOrder) {
                    this.uploadAndPreviewComponent.orderField = this.SORT_FIELD_ON_SORTING;
                }
                // 禁用组件内置排序，控制器负责排序并将排序后的数据绑定到附件上传预览组件
                this.uploadAndPreviewComponent.enableSorting = false;
                this.uploadAndPreviewComponent.fSelectedEvent.subscribe(function (event) {
                    var primaryKey = _this.bindingList.primaryKey;
                    var id = event && event.originalData && event.originalData[primaryKey];
                    if (id && id !== _this.bindingList.currentId) {
                        _this.bindingList.setCurrentId(id, true);
                    }
                });
            }
            this.bindingData.changes.subscribe(function (change) {
                // 因排序需要，值变化时也应进行数据绑定
                if (change.type === devkit.ChangeType.Load || change.type === devkit.ChangeType.Append || change.type === devkit.ChangeType.Remove || change.type === devkit.ChangeType.ValueChanged || change.type === devkit.ChangeType.SelectionChanged) {
                    _this.bindData(change);
                    _this.updateCurrentRow(change);
                    _this.updateChecks(change);
                }
            });
            this.setChecks([]);
        };
        /**
         * 指令输入变更
         * @param changes -变更
         */
        FarrisFilePreviewBindingDirective.prototype.ngOnChanges = function (changes) {
        };
        FarrisFilePreviewBindingDirective.prototype.shouldComponentUpdate = function (data) {
            return !(JSON.stringify(this.__DATA__) === JSON.stringify(data));
            // return !(this.__DATA__ && isEqual(this.__DATA__, data));
        };
        /**
         * 绑定数据
         * @param change -变更
         */
        FarrisFilePreviewBindingDirective.prototype.bindData = function (change) {
            var bindingPath = this.frameContext.viewModel.bindingPath.split('/').filter(function (p) { return p; }).join('/');
            var eventPath = change && change.path && change.path.filter(function (p) { return p; }).join('/');
            // 行切换、删除、加载、新增数据、页码切换 场景
            if (change && [devkit.ChangeType.SelectionChanged, devkit.ChangeType.Remove, devkit.ChangeType.Load, devkit.ChangeType.Append].includes(change.type)) {
                // 非上级实体不重新绑定数据
                if (!bindingPath.startsWith(eventPath)) {
                    return;
                }
                // 当前附件组件切换当前行不需要重新渲染
                if (change.type === devkit.ChangeType.SelectionChanged && bindingPath === eventPath) {
                    return;
                }
            }
            // 非当前实体发生了值变化
            if (change && change.type === devkit.ChangeType.ValueChanged && !eventPath.startsWith(bindingPath)) {
                return;
            }
            var fileInfos = this.getFileInfos();
            if (!this.shouldComponentUpdate(fileInfos)) {
                return;
            }
            if (this.componentRef) {
                this.__DATA__ = fileInfos;
                this.componentRef.fileInfos = fileInfos;
                if (this.uploadAndPreviewComponent && fileInfos && fileInfos.length > 0) {
                    var extendInfos = fileInfos.map(function (item) { return item.originalData; });
                    this.uploadAndPreviewComponent.extendInfos = extendInfos;
                }
                this.changeCurrentRow(fileInfos, change);
            }
        };
        FarrisFilePreviewBindingDirective.prototype.updateChecks = function (change) {
            if (!this.uploadAndPreviewComponent) {
                return;
            }
            var bindingPath = this.frameContext.viewModel.bindingPath.split('/').filter(function (p) { return p; }).join('/');
            var eventPath = change && change.path && change.path.filter(function (p) { return p; }).join('/');
            // 删除自身表时更新勾选记录
            if (change && change.type === devkit.ChangeType.Remove && eventPath === bindingPath) {
                var values = change.value || [];
                var ids_1 = this.frameContext.uiState['ids'] || [];
                if (values.length > 0 && ids_1.length > 0) {
                    values.forEach(function (id) {
                        var index = ids_1.indexOf(id);
                        if (index !== -1) {
                            ids_1.splice(index, 1);
                        }
                    });
                }
            }
            else if ((change.type === devkit.ChangeType.Remove || change.type === devkit.ChangeType.SelectionChanged) && bindingPath.startsWith(eventPath) && bindingPath !== eventPath) {
                //上级（上上级）表删除、上级（上上级）表切换当前行时更新勾选记录
                this.setChecks([]);
                // 清空组件勾选
                this.clearComponentChecks();
            }
            else if (change && change.type === devkit.ChangeType.Load && (bindingPath === eventPath || bindingPath.startsWith(eventPath) && bindingPath !== eventPath)) {
                // 当前附件组件数据重新加载 or 上级或上上级重新加载
                this.setChecks([]);
                // 清空组件勾选
                this.clearComponentChecks();
            }
        };
        /**
         * 主动更新当前行
         * @param data - 数据
         * @param change - 变更
         */
        FarrisFilePreviewBindingDirective.prototype.changeCurrentRow = function (data, change) {
            var _this = this;
            if (!this.uploadAndPreviewComponent) {
                return;
            }
            var changePath = change && change.path.join('/');
            var paths = this.frameContext.viewModel.bindingPath.split('/').filter(function (p) { return p; });
            var path = paths.join('/');
            var isParentSelectChange = path.startsWith(changePath) && change.type === devkit.ChangeType.SelectionChanged && path !== changePath;
            var isSelfRowDelete = change && change.type === devkit.ChangeType.Remove && path === changePath;
            if (data && data.length > 0 && change && (change.type === devkit.ChangeType.Load || isParentSelectChange || isSelfRowDelete)) {
                var primaryKey = this.bindingList.primaryKey;
                var id_1 = data[0]['originalData'] && data[0]['originalData'][primaryKey];
                if (this.bindingList.currentId !== id_1) {
                    setTimeout(function () {
                        _this.bindingList.setCurrentId(id_1, true, true);
                    }, 100);
                }
            }
        };
        /**
         * 为控件设置当前行
         * @param change - 控制器变更
         * @returns
         */
        FarrisFilePreviewBindingDirective.prototype.updateCurrentRow = function (change) {
            if (!this.bindingList || !this.bindingList.currentId || !this.uploadAndPreviewComponent) {
                return;
            }
            if (change && change.type !== devkit.ChangeType.SelectionChanged && change.type !== devkit.ChangeType.Load && change.type !== devkit.ChangeType.Remove) {
                return;
            }
            var currentId = this.uploadAndPreviewComponent.previewCurrent;
            // 组件id和数据id进行转换
            var id = this.getValueByPath(this.bindingList.currentItem, this.fileIdKey);
            if (id === currentId) {
                return;
            }
            this.selectComponentRow(id);
        };
        /**
         * 获取附件信息列表
         */
        FarrisFilePreviewBindingDirective.prototype.getFileInfos = function () {
            var _this = this;
            var listData = this.bindingList.toJSON();
            var fileInfos = [];
            listData.forEach(function (itemData) {
                var fileInfo = _this.convertToFileInfo(itemData);
                fileInfos.push(fileInfo);
            });
            // 排序
            if (this.orderField) {
                this.sort(fileInfos, this.orderField, this.orderType);
            }
            return fileInfos;
        };
        /**
         * 行数据转换为文件信息
         * @param itemData - 行数据
         * @returns
         */
        FarrisFilePreviewBindingDirective.prototype.convertToFileInfo = function (itemData) {
            var _this = this;
            // const idKey = this.bindingList.primaryKey;
            // const id = this.getValueByPath(itemData, idKey);
            var fileId = this.getValueByPath(itemData, this.fileIdKey);
            var fileName = this.getValueByPath(itemData, this.fileNameKey);
            var fileSize = this.getValueByPath(itemData, this.fileSizeKey);
            var fileCreateTime = this.getValueByPath(itemData, this.fileCreateTimeKey);
            var fileInfo = {
                id: fileId,
                name: fileName,
                size: fileSize,
                createTime: fileCreateTime,
                originalData: itemData,
                extend: {
                    metadataId: fileId
                }
            };
            if (this.extendFileInfo && Array.isArray(this.extendFileInfo) && this.extendFileInfo.length > 0) {
                this.extendFileInfo.forEach(function (item) {
                    fileInfo[item.key] = _this.getValueByPath(itemData, item.path);
                });
            }
            if (this.fileSortOrderKey) {
                var fileSortOrder = this.getValueByPath(itemData, this.fileSortOrderKey);
                fileInfo[this.SORT_FIELD_ON_SORTING] = fileSortOrder;
            }
            return fileInfo;
        };
        /**
         * 设置控件的当前行
         * @param id 主键
         */
        FarrisFilePreviewBindingDirective.prototype.selectComponentRow = function (id) {
            if (this.uploadAndPreviewComponent) {
                this.uploadAndPreviewComponent.previewCurrent = id;
            }
        };
        /**
         * 根据字段路径获取值
         * @param data - 数据源
         * @param path - 字段路径
         */
        FarrisFilePreviewBindingDirective.prototype.getValueByPath = function (data, path) {
            var keys = path.split('.');
            var currentValue = data;
            keys.forEach(function (key) {
                currentValue = currentValue && currentValue[key];
            });
            return currentValue;
        };
        FarrisFilePreviewBindingDirective.prototype.getUdtPaths = function () {
            var paths = this.fileIdKey.split('.');
            paths.pop();
            return paths;
        };
        Object.defineProperty(FarrisFilePreviewBindingDirective.prototype, "fileSizeKey", {
            get: function () {
                var basePaths = this.getUdtPaths();
                return basePaths.concat(['fileSize']).join('.');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FarrisFilePreviewBindingDirective.prototype, "fileCreateTimeKey", {
            get: function () {
                var basePaths = this.getUdtPaths();
                return basePaths.concat(['fileCreateTime']).join('.');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FarrisFilePreviewBindingDirective.prototype, "componentRef", {
            get: function () {
                return this.previewComponent || this.uploadAndPreviewComponent || null;
            },
            enumerable: true,
            configurable: true
        });
        FarrisFilePreviewBindingDirective.prototype.setChecks = function (ids) {
            this.frameContext.uiState.setPropertyValue('ids', ids);
        };
        /**
         * 清空组件勾选
         */
        FarrisFilePreviewBindingDirective.prototype.clearComponentChecks = function () {
            if (this.uploadAndPreviewComponent) {
                this.uploadAndPreviewComponent.previewUpdateRefresh();
            }
        };
        FarrisFilePreviewBindingDirective.prototype.sort = function (data, fields, directions) {
            var _this = this;
            if (!fields || fields.length < 1 || !directions || directions.length < 1) {
                throw new Error('sortBy:argument error');
            }
            // 默认升序
            var arrFields = typeof fields === 'string' ? fields.split(',') : fields || [];
            var arrDirections = typeof directions === 'string' ? directions.split(',') : directions || [];
            // 排序字段和排序方式应一致
            if (arrFields.length !== arrDirections.length || arrFields.length < 1) {
                throw new Error('sortBy:fields and directions not match');
            }
            // nage,age,total
            var comparator = function (props, orders) {
                return function (item1, item2) {
                    return props.reduce(function (result, prop) {
                        if (result === 0) {
                            var order = ['asc'].includes(orders[props.indexOf(prop)]) ? 1 : -1;
                            var item1Value = _this.getValue(item1, prop);
                            var item2Value = _this.getValue(item2, prop);
                            if (item1Value === null || item1Value === undefined) {
                                return 1;
                            }
                            if (item2Value === null || item2Value === undefined) {
                                return -1;
                            }
                            if (typeof item1Value !== typeof item2Value) {
                                var localeCompareResult = String(item1Value).localeCompare(String(item2Value));
                                result = localeCompareResult * order;
                            }
                            else if (typeof item1Value === 'string' && typeof item2Value === 'string') {
                                var localeCompareResult = item1Value.localeCompare(item2Value);
                                result = localeCompareResult * order;
                            }
                            else {
                                if (item1Value > item2Value) {
                                    result = order * 1;
                                }
                                if (item1Value < item2Value) {
                                    result = order * -1;
                                }
                            }
                        }
                        return result;
                    }, 0);
                };
            };
            data.sort(comparator(arrFields, arrDirections));
        };
        FarrisFilePreviewBindingDirective.prototype.getValue = function (target, propName) {
            var e_1, _a;
            if (target instanceof devkit.BindingList) {
                target = target.currentItem;
            }
            else if (target instanceof devkit.BindingData) {
                target = target.list.currentItem;
            }
            var result = null;
            if (propName.indexOf('.') === -1) {
                result = target[propName];
            }
            else {
                var props = propName.split('.');
                try {
                    for (var props_1 = __values(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {
                        var prop = props_1_1.value;
                        target = result = this.getValue(target, prop);
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (props_1_1 && !props_1_1.done && (_a = props_1.return))
                            _a.call(props_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
            }
            return result;
        };
        /**
         * 勾选变化事件
         * @param event
         */
        FarrisFilePreviewBindingDirective.prototype.checkedChanged = function (event) {
            var primaryKey = this.bindingList.primaryKey;
            var ids = event && event.map(function (item) { return item && item.originalData && item.originalData[primaryKey] || ''; }).filter(function (p) { return p; }) || [];
            this.setChecks(ids);
        };
        /**
         * 行切换事件
         * @param event
         */
        FarrisFilePreviewBindingDirective.prototype.selectChanged = function (event) {
        };
        FarrisFilePreviewBindingDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[farrisFilePreviewBinding]'
                    },] }
        ];
        /** @nocollapse */
        FarrisFilePreviewBindingDirective.ctorParameters = function () {
            return [
                { type: extendFileUpload.FFilePreviewComponent, decorators: [{ type: core.Optional }] },
                { type: devkit.FrameContext },
                { type: extendFileUpload.UploadAndPreviewComponent, decorators: [{ type: core.Optional }] },
                { type: core.Injector, decorators: [{ type: core.Optional }] }
            ];
        };
        FarrisFilePreviewBindingDirective.propDecorators = {
            extendFileInfo: [{ type: core.Input, args: ['extendFileInfo',] }],
            farrisOrderType: [{ type: core.Input, args: ['farrisOrderType',] }],
            fileIdKey: [{ type: core.Input, args: ['farrisFileIdKey',] }],
            fileSortOrderKey: [{ type: core.Input, args: ['farrisFileSortOrderKey',] }],
            fileNameKey: [{ type: core.Input, args: ['farrisFileNameKey',] }],
            checkedChanged: [{ type: core.HostListener, args: ['fPreviewMultiSelectedEvent', ['$event'],] }],
            selectChanged: [{ type: core.HostListener, args: ['fSelectedEvent', ['$event'],] }]
        };
        return FarrisFilePreviewBindingDirective;
    }());

    var KEY_UISTATE_REPLY_MESSAGE = 'DISCUSSION_REPLY_MESSAGE_INFO';
    var KEY_MESSAGE_ON_COMMENT_ADD = 'onCommentAdd';
    var FarrisDiscussionEditorBindingDirective = /** @class */ (function () {
        function FarrisDiscussionEditorBindingDirective(injector, discussionEditorComponent, viewModel) {
            this.injector = injector;
            this.discussionEditorComponent = discussionEditorComponent;
            this.viewModel = viewModel;
        }
        FarrisDiscussionEditorBindingDirective.prototype.ngOnInit = function () {
            var _this = this;
            this.discussionEditorComponent.replyUser = this.viewModel.frameContext.root.viewModel.uiState[KEY_UISTATE_REPLY_MESSAGE] || {};
            this.viewModel.frameContext.root.viewModel.uiState.changes.subscribe(function (change) {
                if (change.field === KEY_UISTATE_REPLY_MESSAGE) {
                    _this.discussionEditorComponent.replyUser = _this.viewModel.frameContext.root.viewModel.uiState[KEY_UISTATE_REPLY_MESSAGE] || {};
                }
            });
            if (this.queryFrequentAtUsersCommand) {
                this.queryFrequentAtUsers();
            }
            else {
                this.queryAtUsers();
            }
            this.queryAllOrgs();
        };
        /**
         * 查询所有部门数据
         */
        FarrisDiscussionEditorBindingDirective.prototype.queryAllOrgs = function () {
            var _this = this;
            this.execute(this.queryAllOrgsCommand).subscribe(function (result) {
                if (!result) {
                    return;
                }
                _this.discussionEditorComponent.sectionData = result;
            });
        };
        /**
         * 获取@用户
         */
        FarrisDiscussionEditorBindingDirective.prototype.queryAtUsers = function () {
            var _this = this;
            this.execute(this.userQueryCommand).subscribe(function (result) {
                if (!result) {
                    return;
                }
                var _a = result.users, users = _a === void 0 ? [] : _a;
                _this.discussionEditorComponent.personnels = users;
            });
        };
        /**
         * 获取常用@用户
         */
        FarrisDiscussionEditorBindingDirective.prototype.queryFrequentAtUsers = function () {
            var _this = this;
            this.execute(this.queryFrequentAtUsersCommand).subscribe(function (result) {
                if (!result) {
                    return;
                }
                _this.discussionEditorComponent.personnels = result && result.users || [];
            });
        };
        /**
         * 提交或取消评论
         * @param event event
         */
        FarrisDiscussionEditorBindingDirective.prototype.pageChangedHandler = function (event) {
            var _this = this;
            var _a = event || {}, _b = _a.msgInfo, msgInfo = _b === void 0 ? 0 : _b, _c = _a.text, text = _c === void 0 ? '' : _c, _d = _a.visibility, visibility = _d === void 0 ? 'ALL' : _d, _e = _a.parentId, parentId = _e === void 0 ? null : _e;
            if (msgInfo === 1) {
                this.execute(this.addCommentCommand, { text: text, parentId: parentId, visibility: visibility }).pipe(operators.tap(function () {
                    _this.viewModel.frameContext.appContext.messagePipe.next(KEY_MESSAGE_ON_COMMENT_ADD);
                }), operators.catchError(function (e) { return rxjs.EMPTY; })).subscribe();
            }
            else {
                // 取消的时候同时会将回复用户清空
                this.viewModel.frameContext.root.viewModel.uiState[KEY_UISTATE_REPLY_MESSAGE] = {};
                this.discussionEditorComponent.replyUser = {};
            }
        };
        /**
         * 执行命令
         * @param commandName 命令名称
         */
        FarrisDiscussionEditorBindingDirective.prototype.execute = function (commandName, params) {
            var _this = this;
            if (!commandName || commandName === '' || commandName === 'undefined') {
                return rxjs.of(null);
            }
            if (typeof params === 'undefined') {
                params = {};
            }
            var paths = commandName.split('.');
            var func = null;
            paths.forEach(function (path) {
                func = func && func[path] || _this[path];
            });
            if (typeof func === 'function') {
                return func(params);
            }
            return rxjs.of(null);
        };
        FarrisDiscussionEditorBindingDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[farris-discussion-editor-binding]'
                    },] }
        ];
        /** @nocollapse */
        FarrisDiscussionEditorBindingDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: discussionGroup.DiscussionEditorComponent },
                { type: devkit.ViewModel }
            ];
        };
        FarrisDiscussionEditorBindingDirective.propDecorators = {
            userQueryCommand: [{ type: core.Input, args: ["userQueryCommand",] }],
            addCommentCommand: [{ type: core.Input, args: ["addCommentCommand",] }],
            queryAllOrgsCommand: [{ type: core.Input, args: ["queryAllOrgsCommand",] }],
            queryFrequentAtUsersCommand: [{ type: core.Input, args: ["queryFrequentAtUsersCommand",] }],
            pageChangedHandler: [{ type: core.HostListener, args: ['valueChange', ['$event'],] }]
        };
        return FarrisDiscussionEditorBindingDirective;
    }());

    var KEY_UISTATE_REPLY_MESSAGE$1 = 'DISCUSSION_REPLY_MESSAGE_INFO';
    var KEY_MESSAGE_ON_COMMENT_ADD$1 = 'onCommentAdd';
    var FarrisDiscussionListBindingDirective = /** @class */ (function () {
        function FarrisDiscussionListBindingDirective(injector, discussionListComponent, viewModel, discussionListDirective) {
            this.injector = injector;
            this.discussionListComponent = discussionListComponent;
            this.viewModel = viewModel;
            this.discussionListDirective = discussionListDirective;
        }
        FarrisDiscussionListBindingDirective.prototype.ngOnInit = function () {
            var _this = this;
            this.viewModel.frameContext.appContext.messagePipe.subscribe(function (message) {
                if (message === KEY_MESSAGE_ON_COMMENT_ADD$1) {
                    _this.queryComments();
                }
            });
            this.viewModel.bindingData.changes.subscribe(function (change) {
                if (change.type === devkit.ChangeType.Load || change.type === devkit.ChangeType.SelectionChanged) {
                    _this.queryComments();
                }
            });
        };
        /**
         * 查询评论
         */
        FarrisDiscussionListBindingDirective.prototype.queryComments = function (pageIndex, pageSize) {
            var _this = this;
            if (typeof pageIndex === 'undefined') {
                pageIndex = (this.discussionListComponent.pageIndex - 1) || 0;
            }
            if (typeof pageSize === 'undefined') {
                if (this.discussionListComponent.supportPaging) {
                    pageSize = this.discussionListComponent.pageSize;
                }
                else {
                    // 不分页，pageSize和后端约定传最大数
                    pageSize = 10000;
                }
            }
            this.execute(this.commentsQueryCommand, { pageIndex: pageIndex, pageSize: pageSize }).pipe(operators.catchError(function (e) { return rxjs.EMPTY; })).subscribe(function (result) {
                if (!result) {
                    return;
                }
                var _a = result.comments, _b = result.pageIndex, pageIndex = _b === void 0 ? 0 : _b, _c = result.pageSize, pageSize = _c === void 0 ? 10 : _c, _d = result.totalCount, totalCount = _d === void 0 ? 0 : _d;
                _this.discussionListComponent.pageIndex = parseInt(pageIndex) + 1;
                if (_this.discussionListComponent.supportPaging) {
                    _this.discussionListComponent.pageSize = pageSize;
                }
                _this.discussionListComponent.total = totalCount;
                _this.discussionListDirective.discussionListData = result;
            });
        };
        /**
         * 回复消息
         * @param event event
         */
        FarrisDiscussionListBindingDirective.prototype.replyMessagedHandler = function (event) {
            this.viewModel.frameContext.root.viewModel.uiState.setPropertyValue(KEY_UISTATE_REPLY_MESSAGE$1, event);
        };
        /**
         * 切换页码
         * @param event event
         */
        FarrisDiscussionListBindingDirective.prototype.pageChangedHandler = function (event) {
            var _a = event.pageInfo || {}, _b = _a.pageIndex, pageIndex = _b === void 0 ? 1 : _b, _c = _a.pageSize, pageSize = _c === void 0 ? 10 : _c;
            this.queryComments(pageIndex - 1, pageSize);
        };
        /**
         * 执行命令
         * @param commandName 命令名称
         */
        FarrisDiscussionListBindingDirective.prototype.execute = function (commandName, params) {
            var _this = this;
            if (!commandName || commandName === '' || commandName === 'undefined') {
                return rxjs.of(null);
            }
            var paths = commandName.split('.');
            var func = null;
            paths.forEach(function (path) {
                func = func && func[path] || _this[path];
            });
            if (typeof func === 'function') {
                return func(params);
            }
            return rxjs.of(null);
        };
        FarrisDiscussionListBindingDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[farris-discussion-list-binding]'
                    },] }
        ];
        /** @nocollapse */
        FarrisDiscussionListBindingDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: discussionGroup.DiscussionListComponent },
                { type: devkit.ViewModel },
                { type: discussionGroup.DiscussionListDirective }
            ];
        };
        FarrisDiscussionListBindingDirective.propDecorators = {
            commentsQueryCommand: [{ type: core.Input, args: ["commentsQueryCommand",] }],
            replyMessagedHandler: [{ type: core.HostListener, args: ['replyMessage', ['$event'],] }],
            pageChangedHandler: [{ type: core.HostListener, args: ['pageChanged', ['$event'],] }]
        };
        return FarrisDiscussionListBindingDirective;
    }());

    /*******************************************************************************************************************
     *                                     FarrisPrimengTreeTableBindingDirective指令说明                               *
     * *****************************************************************************************************************
     *
     * 1. 依赖primeng版本: primeng:^9.0.0,primeicons:^4.0.0
     *
     * 2. 由于可编辑树表无法触发编辑单元格的关闭事件onEditComplete，因此对priemeng的node_modules\primeng\fesm5\primeng-treetable.js脚本作出修改：
     *    源码修改如下，+表示新增加的脚本语句:
     *
     *  TreeTable.prototype.updateEditingCell = function (cell, data, field) { //+ 参数增加data和field
     *      this.editingCell = cell;
     *      this.editingCellData = data; //+
     *      this.editingCellField = field; //+
     *      this.bindDocumentEditListener();
     *  };
     *
     *  TreeTable.prototype.bindDocumentEditListener = function () {
     *       var _this = this;
     *       if (!this.documentEditListener) {
     *           this.documentEditListener = function (event) {
     *               if (_this.editingCell && !_this.editingCellClick && _this.isEditingCellValid()) {
     *                   domhandler_1.DomHandler.removeClass(_this.editingCell, 'ui-editing-cell');
     *                   _this.editingCell = null;
     *                   _this.onEditComplete.emit({ field: _this.editingCellField, data: _this.editingCellData });//+
     *                   _this.unbindDocumentEditListener();
     *               }
     *               _this.editingCellClick = false;
     *           };
     *           document.addEventListener('click', this.documentEditListener);
     *       }
     *   };
     *
     *  TreeTable.prototype.bindDocumentEditListener = function () {
     *       var _this = this;
     *       if (!this.documentEditListener) {
     *           this.documentEditListener = function (event) {
     *               if (_this.editingCell && !_this.editingCellClick && _this.isEditingCellValid()) {
     *                   domhandler_1.DomHandler.removeClass(_this.editingCell, 'ui-editing-cell');
     *                   _this.editingCell = null;
     *                   _this.onEditComplete.emit({ field: _this.editingCellField, data: _this.editingCellData });//+
     *                   _this.unbindDocumentEditListener();
     *               }
     *               _this.editingCellClick = false;
     *           };
     *           document.addEventListener('click', this.documentEditListener);
     *       }
     *   };
     *
     *  TTEditableColumn.prototype.openCell = function () {
     *       var _this = this;
     *        this.tt.updateEditingCell(this.el.nativeElement,this.data, this.field);//+
     *        domhandler_1.DomHandler.addClass(this.el.nativeElement, 'ui-editing-cell');
     *        this.tt.onEditInit.emit({ field: this.field, data: this.data });
     *        this.zone.runOutsideAngular(function () {
     *            setTimeout(function () {
     *                var focusable = domhandler_1.DomHandler.findSingle(_this.el.nativeElement, 'input, textarea');
     *                if (focusable) {
     *                     focusable.focus();
     *                 }
     *             }, 50);
     *        });
     *   };
     *
     *  TTEditableColumn.prototype.onClick = function (event) {
     *        if (this.isEnabled()) {
     *            this.tt.editingCellClick = true;
     *            if (this.tt.editingCell) {
     *                if (this.tt.editingCell !== this.el.nativeElement) {
     *                    if (!this.tt.isEditingCellValid()) {
     *                        return;
     *                    }
     *                    this.tt.onEditComplete.emit({ field: this.tt.oldField, data: this.tt.oldDdata });//+
     *                    DomHandler.removeClass(this.tt.editingCell, 'ui-editing-cell');
     *                    this.openCell();
     *                }
     *            }
     *            else {
     *                this.openCell();
     *            }
     *        }
     *  };
     *
     *  TTEditableColumn.prototype.openCell = function () {
     *         var _this = this;
     *         this.tt.updateEditingCell(this.el.nativeElement,this.data, this.field);
     *         DomHandler.addClass(this.el.nativeElement, 'ui-editing-cell');
     *         this.tt.onEditInit.emit({ field: this.field, data: this.data });
     *         this.tt.oldField= this.field; //+
     *         this.tt.oldDdata=this.data;  //+
     *         this.zone.runOutsideAngular(function () {
     *             setTimeout(function () {
     *                 var focusable = DomHandler.findSingle(_this.el.nativeElement, 'input, textarea');
     *                if (focusable) {
     *                     focusable.focus();
     *                 }
     *           }, 50);
     *       });
     *   };
     *
     * 3. HTML模板
     * (1) 不启用多表头
     *      <p-treeTable [columns]="treeGridColumns" farrisPrimengTreeTableBinding farrisHierarchyInfoKey="layerField" [resizableColumns]="true" farrisPrimengTreeTableIdField="id">
     *             <ng-template pTemplate="header" let-columns>
     *                 <tr>
     *                     <th *ngFor="let col of columns" ttResizableColumn>
     *                         {{col.header}}
     *                     </th>
     *                 </tr>
     *             </ng-template>
     *             <ng-template pTemplate="body" let-rowNode let-rowData="rowData" let-columns="columns">
     *                 <tr>
     *                     <td *ngFor="let col of columns; let i = index" ttEditableColumn [ttEditableColumn]="rowData"
     *                         [ttEditableColumnField]="col.field">
     *                         <p-treeTableToggler [rowNode]="rowNode" *ngIf="i === 0"></p-treeTableToggler>
     *                         <p-treeTableCellEditor>
     *                             <ng-template pTemplate="input">
     *                                  <!-- 控件动态生成区域，此处可放置控件动态生成组件，生成规则如下：
     *                                            1. 字符串类型：文本控件
     *                                            2. 数字类型：数字控件
     *                                            3. 布尔类型：复选框控件
     *                                            4. 日期时间类型：日期时间控件
     *                                            5. 枚举类型：下拉框控件
     *                                            6. 帮助类型：帮助控件-->
     *                             </ng-template>
     *                             <ng-template pTemplate="output">{{ col | formatCellData : rowData }}</ng-template>
     *                         </p-treeTableCellEditor>
     *                     </td>
     *                 </tr>
     *             </ng-template>
     *     </p-treeTable>
     *
     * (2) 启用多表头
     *
     *  <p-treeTable [columns]="treeGridColumns" farrisPrimengTreeTableBinding farrisHierarchyInfoKey="layerField" [resizableColumns]="true" farrisPrimengTreeTableIdField="id">
     *             <ng-template pTemplate="header" let-columns>
     *                  <tr *ngFor="let columnHeader of treeGridColumnHeaders">
     *                      <th *ngFor="let col of columnHeader" ttResizableColumn [attr.rowspan]="col.rowspan" [attr.colspan]="col.colspan">
     *                          {{col.header}}
     *                      </th>
     *                  </tr>
     *             </ng-template>
     *             <ng-template pTemplate="body" let-rowNode let-rowData="rowData" let-columns="columns">
     *                 <tr>
     *                     <td *ngFor="let col of columns; let i = index" ttEditableColumn [ttEditableColumn]="rowData"
     *                         [ttEditableColumnField]="col.field">
     *                         <p-treeTableToggler [rowNode]="rowNode" *ngIf="i === 0"></p-treeTableToggler>
     *                         <p-treeTableCellEditor>
     *                             <ng-template pTemplate="input">
     *                                  <!-- 控件动态生成区域，此处可放置控件动态生成组件，生成规则如下：
     *                                            1. 字符串类型：文本控件
     *                                            2. 数字类型：数字控件
     *                                            3. 布尔类型：复选框控件
     *                                            4. 日期时间类型：日期时间控件
     *                                            5. 枚举类型：下拉框控件
     *                                            6. 帮助类型：帮助控件-->
     *                             </ng-template>
     *                             <ng-template pTemplate="output">{{ col | formatCellData : rowData }}</ng-template>
     *                         </p-treeTableCellEditor>
     *                     </td>
     *                 </tr>
     *             </ng-template>
     *  </p-treeTable>
     *
     * 多表头数据格式：
     *  this.treeGridColumnHeaders=[
     *     [{ header: 'Brand',rowspan:3, colspan:1},{ header: 'Sale Rate',rowspan:1, colspan:4}],
     *     [{ header: 'Sales',rowspan:1, colspan:2},{ header: 'Profits',rowspan:1, colspan:2}],
     *     [{ header: 'Last Year',rowspan:1, colspan:1},{ header: 'This Year',rowspan:1, colspan:1},{ header: 'Last Year',rowspan:1, colspan:1},{ header: 'This Year',rowspan:1, colspan:1}],
     *  ]

     **********************************************************************************************************************/
    var FarrisPrimengTreeTableBindingDirective = /** @class */ (function () {
        function FarrisPrimengTreeTableBindingDirective(treeTable, frameContext, dateService) {
            this.treeTable = treeTable;
            this.frameContext = frameContext;
            this.dateService = dateService;
            this.selectedRowId = null;
            this.treeTableSelectedEvent = null;
            /**
             * 节点选择变更事件
             */
            this.nodeSelectChange = new core.EventEmitter();
            this.oldTreeNodeMap = {};
        }
        Object.defineProperty(FarrisPrimengTreeTableBindingDirective.prototype, "bindingData", {
            /**
             * 绑定数据
             */
            get: function () {
                return this.frameContext.bindingData;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FarrisPrimengTreeTableBindingDirective.prototype, "bindingList", {
            /**
             * 绑定数据列表
             */
            get: function () {
                return this.bindingData.getList();
            },
            enumerable: true,
            configurable: true
        });
        FarrisPrimengTreeTableBindingDirective.prototype.getHierarchyInfoField = function () {
            var infos = this.hierarchyInfoKey.split('/');
            return infos[infos.length - 1];
        };
        FarrisPrimengTreeTableBindingDirective.prototype.ngOnChanges = function (changes) {
        };
        FarrisPrimengTreeTableBindingDirective.prototype.ngOnInit = function () {
            var _this = this;
            //解析获取分级码字段编号
            this.hierarchyInfoField = this.getHierarchyInfoField();
            // 将分级码信息保存到root-component
            var virtualRootFrameContext = this.frameContext.getVirtualRootFrameContext();
            virtualRootFrameContext.setParam('hierarchyInfoKey', this.hierarchyInfoKey);
            this.bindingData.changes.subscribe(function (change) {
                _this.bindData(change);
                _this.updateSelectedRow(change);
            });
            this.frameContext.viewModel.uiState.setPropertyValue('ids', []);
            if (this.frameContext && this.frameContext.frameComponent) {
                this.frameContext.frameComponent.componentType = devkit.ComponentType.primengTreeComponent;
            }
        };
        /**
         * 获取树列表绑定数据对应的实体数组
         * @returns 实体数组
         */
        FarrisPrimengTreeTableBindingDirective.prototype.getEntityArr = function () {
            var entityCollection = this.frameContext.repository.entityCollection;
            var bindingPath = this.frameContext.bindingData.bindingPath;
            if (!bindingPath || bindingPath === '/') {
                return entityCollection.toArray();
            }
            var bindingList = this.frameContext.bindingData.list;
            var bindingPathArr = bindingPath.split('/').filter(function (str) { return str; });
            var pathArray = [];
            bindingPathArr.forEach(function (path) {
                pathArray.push(bindingList.primaryKey + ":" + bindingList.currentId);
                pathArray.push(path);
                bindingList = bindingList.currentItem[path];
            });
            return entityCollection.getEntitiesByPath(pathArray).toArray();
        };
        /**
         * 将真实顺序标记到对应的实体上
         * @param entityArr 实体数组
         * @param treeNodes 树节点
         */
        FarrisPrimengTreeTableBindingDirective.prototype.setActualIndex = function (entityArr, treeNodes) {
            var _this = this;
            if (entityArr.length < 1)
                return;
            // 初始化序号器并依次遍历每一棵树
            var counter = { index: 0 };
            var primaryKey = entityArr[0].primaryKey;
            treeNodes.forEach(function (rootNode) {
                _this.traverseTree(rootNode, counter, entityArr, primaryKey);
            });
        };
        /**
         * 前序递归遍历树节点并在对应实体上标记序号
         * @param treeNode 树节点
         * @param counter 序号器
         * @param entityArr 实体数组
         * @description
         * 在进行前端校验时，按照Entity在数组中的下标生成（错误提示的）行号的方式不适用于树列表，
         * 因为树列表可以在已经添加的节点上加入子节点，而Entity总是在最后追加新对象，导致二者的顺序不一定相同，
         * 所以在绑定数据的时候将树节点在列表中的真实顺序通过一个附加的属性（__ACTUAL_INDEX__）赋给Entity示例，
         * 当Entity调用validate方法时，检查是否存在该属性，如果存在则应用该属性的值作为行号。
         */
        FarrisPrimengTreeTableBindingDirective.prototype.traverseTree = function (treeNode, counter, entityArr, primaryKey) {
            var _this = this;
            var INDEX_LABEL = "__ACTUAL_INDEX__";
            // 处理当前节点
            var entity = entityArr.find(function (e) { return e[primaryKey] === treeNode.data[primaryKey]; });
            if (entity) {
                Object.defineProperty(entity, INDEX_LABEL, {
                    value: counter.index
                });
                counter.index++;
            }
            // 递归遍历分支
            treeNode.children.forEach(function (rootNode) {
                _this.traverseTree(rootNode, counter, entityArr, primaryKey);
            });
        };
        /**
         * 处理数据变更
         * @param change 变更
         * @returns 是否跳过绑定数据的整体刷新
         * @description
         * 目的是尽量少的重新构造整个树列表，比如在发生值变化事件时尽量只更改变化的值就结束，
         * 如果任何变化都重新构造树，会导致Tab键切换功能难以实现等问题。
         */
        FarrisPrimengTreeTableBindingDirective.prototype.handleChange = function (change) {
            // 没有变更时，继续绑定数据刷新
            if (!change)
                return false;
            // 分类处理具体的变更
            switch (change.type) {
                case devkit.ChangeType.SelectionChanged:
                    return this.handleSelectionChanged(change);
                case devkit.ChangeType.GlobalSelectionChanged:
                    return this.handleSelectionChanged(change);
                case devkit.ChangeType.ValueChanged:
                    return this.handleValueChanged(change);
                default:
                    return false;
            }
        };
        /**
         * 处理行切换变更
         * @param change 变更
         * @returns 是否跳过绑定数据的整体刷新
         */
        FarrisPrimengTreeTableBindingDirective.prototype.handleSelectionChanged = function (change) {
            // 当前绑定路径下发生行切换事件，不进行数据刷新（为了支持Tab键切换单元格）
            if (change.type === devkit.ChangeType.SelectionChanged || change.type === devkit.ChangeType.GlobalSelectionChanged) {
                var path = change.path;
                var frmPath = this.bindingData.bindingPath.split("/").filter(function (str) { return str; });
                if (path.length === frmPath.length) {
                    var same = true;
                    for (var i = 0; i < path.length; i++) {
                        if (path[i] !== frmPath[i])
                            same = false;
                    }
                    if (same)
                        return true;
                }
            }
            return false;
        };
        /**
         * 处理行切换变更
         * @param change 变更
         * @returns 是否跳过绑定数据的整体刷新
         */
        FarrisPrimengTreeTableBindingDirective.prototype.handleValueChanged = function (change) {
            var e_1, _a, e_2, _b;
            if (change.type !== devkit.ChangeType.ValueChanged) {
                return false;
            }
            // 接收到值变化事件，尝试仅进行局部数据的更新（为了支持Tab键切换单元格）
            var path = change.path;
            var bindingPathArr = this.bindingData.bindingPath.split("/").filter(function (str) { return str; });
            try {
                // 判断绑定路径是否相同，如果不相同则整体刷新
                for (var bindingPathArr_1 = __values(bindingPathArr), bindingPathArr_1_1 = bindingPathArr_1.next(); !bindingPathArr_1_1.done; bindingPathArr_1_1 = bindingPathArr_1.next()) {
                    var item = bindingPathArr_1_1.value;
                    if (path.length > 0) {
                        if (item === path[0]) {
                            path.shift();
                        }
                        else {
                            return false;
                        }
                    }
                }
            }
            catch (e_1_1) {
                e_1 = { error: e_1_1 };
            }
            finally {
                try {
                    if (bindingPathArr_1_1 && !bindingPathArr_1_1.done && (_a = bindingPathArr_1.return))
                        _a.call(bindingPathArr_1);
                }
                finally {
                    if (e_1)
                        throw e_1.error;
                }
            }
            // 通过id找到待更新的树节点
            var id = change.id;
            if (id) {
                var primaryKey = this.bindingList.primaryKey;
                var nodes = this.treeTable.value;
                var targetNode = null;
                try {
                    for (var nodes_1 = __values(nodes), nodes_1_1 = nodes_1.next(); !nodes_1_1.done; nodes_1_1 = nodes_1.next()) {
                        var node = nodes_1_1.value;
                        var result = this.findTreeNodeById(node, primaryKey, id);
                        if (result) {
                            targetNode = result;
                            break;
                        }
                    }
                }
                catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                }
                finally {
                    try {
                        if (nodes_1_1 && !nodes_1_1.done && (_b = nodes_1.return))
                            _b.call(nodes_1);
                    }
                    finally {
                        if (e_2)
                            throw e_2.error;
                    }
                }
                if (targetNode && path.length === 1) {
                    var propertyName = path.shift();
                    if (targetNode.data.hasOwnProperty(propertyName) && change.hasOwnProperty("value")) {
                        targetNode.data[propertyName] = change.value;
                        return true;
                    }
                }
            }
            return false;
        };
        /**
         * 通过主键值查找树节点
         * @param treeNode 树根节点
         * @param primaryKey 主键名
         * @param keyValue 主键值
         * @returns 树节点
         * @todo 递归遍历实现比较低效，考虑通过oldTreeNodeMap查找树节点
         */
        FarrisPrimengTreeTableBindingDirective.prototype.findTreeNodeById = function (treeNode, primaryKey, keyValue) {
            var e_3, _a;
            if (!treeNode)
                return null;
            if (treeNode.data.hasOwnProperty(primaryKey) && treeNode.data[primaryKey] === keyValue)
                return treeNode;
            if (treeNode.children) {
                try {
                    for (var _b = __values(treeNode.children), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var node = _c.value;
                        var result = this.findTreeNodeById(node, primaryKey, keyValue);
                        if (result)
                            return result;
                    }
                }
                catch (e_3_1) {
                    e_3 = { error: e_3_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_3)
                            throw e_3.error;
                    }
                }
            }
            return null;
        };
        /**
        * 绑定数据
        */
        FarrisPrimengTreeTableBindingDirective.prototype.bindData = function (change) {
            var skipRefresh = this.handleChange(change);
            if (skipRefresh) {
                return;
            }
            // this.sourceData = this.bindingList.toJSON({ ignoreMultiLangInput: true });
            var oldTreeNodes = this.treeTable.value;
            var treeNodesData = this.bindingList.toJSON({ ignoreMultiLangInput: true });
            var treeNodes = [];
            if (treeNodesData && treeNodesData.length > 0) {
                var hierarchyInfo = treeNodesData[0][this.hierarchyInfoField];
                var builder = TreeNodeBuilderFactory.getBuilder(hierarchyInfo);
                // 服务器返回的分级节点信息匹配不到现有工厂里面的任何一种情况。确认新加的builder已经在工厂中注册
                if (builder == null) {
                    throw new Error('TreeTable builder is null!');
                }
                var expandLevel = -1;
                var treeExpandLevel = this.treeTable['expandLevel'];
                if (typeof treeExpandLevel !== 'undefined') {
                    expandLevel = treeExpandLevel;
                }
                var context = {
                    expandLevel: expandLevel,
                    component: this.treeTable,
                };
                var treeNodesBuilder = new builder(treeNodesData, oldTreeNodes, this.bindingList.primaryKey, this.hierarchyInfoField, context);
                treeNodes = treeNodesBuilder.build();
                // 获取绑定数据对应的实体列表
                var entityArr = this.getEntityArr();
                // 根据treeNodes的顺序在对应的实体上添加序号字段__ACTUAL_INDEX__
                this.setActualIndex(entityArr, treeNodes);
            }
            if (!this.treeTable.lazy) {
                this.treeTable.totalRecords = (this.treeTable._value ? this.treeTable._value.length : 0);
                if (this.treeTable.sortMode == 'single' && this.treeTable.sortField)
                    this.treeTable.sortSingle();
                else if (this.treeTable.sortMode == 'multiple' && this.treeTable.multiSortMeta)
                    this.treeTable.sortMultiple();
                else if (this.treeTable.hasFilter()) //sort already filters
                    this.treeTable._filter();
            }
            this.treeTable.tableService.onUIUpdate(treeNodes);
            this.treeTable.value = treeNodes;
            this.treeTable.updateSerializedValue();
            // this.treeNodeMap = {};
            // this.sourceDataClone = this.sourceData;
            // this.treeTable.value = [...this.treeNodesBuilder()];
            // this.treeTableValueHandler();
        };
        FarrisPrimengTreeTableBindingDirective.prototype.updateSelectedRow = function (change) {
            var currentId = this.bindingList.currentId;
            if (this.treeTableSelectedEvent) {
                this.treeTableSelectedEvent = false;
                this.selectedRowId = currentId;
                return;
            }
            var serializedValue = this.treeTable.serializedValue;
            var treeNode = serializedValue && serializedValue.find(function (item) { return item && item.node && item.node.data && item.node.data.id === currentId; }) || null;
            if (treeNode) {
                if (this.treeTable.isSelected(treeNode.node) || currentId === this.selectedRowId) {
                    return;
                }
                this.selectedRowId = currentId;
                this.treeTable.handleRowClick({ rowNode: treeNode, originalEvent: { target: { nodeName: '' } } });
            }
        };
        FarrisPrimengTreeTableBindingDirective.prototype.onEditInitHandler = function (event) {
            this.nodeSelectChange.emit(event['data']);
            var id = event.data[this.idField];
            this.setCurrentIdToBindingList(id);
        };
        FarrisPrimengTreeTableBindingDirective.prototype.onEditCompleteHandler = function (event) {
            var fieldName = event.field;
            var column$$1 = this.columns.find(function (item) { return item.field === fieldName; });
            if (fieldName && column$$1 && column$$1.editor && column$$1.editor.options && column$$1.editor.options.type === 'EditorTypes.LOOKUP') {
                return;
            }
            if (event && event.hasOwnProperty('data')) {
                var primaryKeyValue = event.data[this.frameContext.repository.primaryKey];
                var value = this.getValue(fieldName, event.data);
                var bindingPath = this.frameContext.viewModel.bindingPath || '/';
                var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
                var bindingList = this.bindingData.getValue(bindingPaths);
                var bindingObject = bindingList.findById(primaryKeyValue);
                var oldValue = this.getValue(fieldName, bindingObject);
                var column_1 = this.treeTable.columns.find(function (item) { return item.field === fieldName; });
                var dataType = column_1 && column_1.dataType || null;
                if (dataType === 'date' || dataType === 'datetime') {
                    if (this.dateService) {
                        var format = column_1 && column_1.formatter && column_1.formatter.options && column_1.formatter.options.format || 'yyyy-MM-dd';
                        value = this.dateService.formatTo(value, format);
                        if (!value) {
                            value = null;
                        }
                    }
                }
                else if (dataType === 'number') {
                    value = Number(value);
                }
                if (value !== oldValue) {
                    this.updateBindingList(primaryKeyValue, fieldName, value);
                }
            }
        };
        FarrisPrimengTreeTableBindingDirective.prototype.onNodeExpandHandler = function (event) {
            // this.setNodeExpandedValue(event);
            var selectedId = event && event.node && event.node.id || null;
            if (!selectedId) {
                return;
            }
            var virtualRootFrameContext = this.frameContext.getVirtualRootFrameContext();
            var expandNodes = virtualRootFrameContext.getParam('TREE_LATEST_EXPANDED_ID') || [];
            expandNodes.push(selectedId);
            virtualRootFrameContext.setParam('TREE_LATEST_EXPANDED_ID', expandNodes);
        };
        FarrisPrimengTreeTableBindingDirective.prototype.onNodeCollapseHandler = function (event) {
            // this.setNodeExpandedValue(event);
        };
        FarrisPrimengTreeTableBindingDirective.prototype.onNodeSelectHandler = function (event) {
            var id = event && event.node && event.node.data && event.node.data[this.frameContext.repository.primaryKey] || null;
            if (id === this.bindingList.currentId) {
                return;
            }
            this.treeTableSelectedEvent = true;
            this.setCurrentIdToBindingList(id);
        };
        FarrisPrimengTreeTableBindingDirective.prototype.onNodeUnselectHandler = function (event) {
            this.setCurrentIdToBindingList(null);
        };
        FarrisPrimengTreeTableBindingDirective.prototype.setNodeExpandedValue = function (event) {
            if (!event || !this.oldTreeNodeMap || Object.keys(this.oldTreeNodeMap).length <= 0) {
                return;
            }
            try {
                var currentId = event.node.data.id;
                this.oldTreeNodeMap[currentId].expanded = event.expanded;
            }
            catch (e) {
                console.warn("setNodeExpandedValue error:" + e.message);
            }
        };
        FarrisPrimengTreeTableBindingDirective.prototype.setCurrentIdToBindingList = function (selectedId) {
            var oldCurrentId = this.bindingList.currentId;
            if (oldCurrentId === selectedId) {
                return;
            }
            this.bindingList.setCurrentId(selectedId, true);
        };
        FarrisPrimengTreeTableBindingDirective.prototype.getPaths = function () {
            var paths = [];
            if (!this.frameContext.viewModel || !this.frameContext.viewModel.bindingPath || this.frameContext.viewModel.bindingPath === '/') {
                return paths;
            }
            else {
                var bindingPath = this.frameContext.viewModel.bindingPath;
                paths = bindingPath.substring(1, bindingPath.length).split('/');
                return paths;
            }
        };
        FarrisPrimengTreeTableBindingDirective.prototype.updateBindingList = function (primaryValue, propertyName, value) {
            if (!propertyName) {
                return;
            }
            // 更新主表部分行的字段
            var propertyNames = propertyName.split('.').filter(function (item) { return item; });
            var bindingPath = this.getBindingPathArray();
            // 取出来的一定是bindingList
            var list = this.bindingData.getValue(bindingPath);
            // 修改的是当前行
            var paths = bindingPath.concat(propertyNames);
            if (list && primaryValue === list.currentItem.primaryKeyValue) {
                this.bindingData.setValue(paths, value, true, true);
                return;
            }
            var bindingObject = this.bindingList.findById(primaryValue);
            if (!bindingObject) {
                return;
            }
            if (propertyNames.length < 2) {
                bindingObject.setValue(propertyName, value, true, true, undefined, this.bindingData.getValudChangeInvokerFactory()(paths));
            }
            else {
                var targetBindingObject_1 = null;
                var fpaths = propertyNames.slice(0, propertyNames.length - 1);
                var targetPropertyName = propertyNames[propertyNames.length - 1];
                fpaths.forEach(function (prop) {
                    targetBindingObject_1 = targetBindingObject_1 && targetBindingObject_1[prop] || bindingObject[prop];
                });
                // todo:需要添加值变化事件
                targetBindingObject_1.setValue(targetPropertyName, value, true, true, undefined, this.bindingData.getValudChangeInvokerFactory()(paths));
            }
        };
        FarrisPrimengTreeTableBindingDirective.prototype.getBindingPathArray = function () {
            var path = this.frameContext.viewModel.bindingPath;
            if (path) {
                return path.split('/').filter(function (n) { return n !== ''; });
            }
            return [];
        };
        FarrisPrimengTreeTableBindingDirective.prototype.getValue = function (path, data) {
            var value = '';
            if (path.indexOf('.') === -1) {
                value = data[path];
            }
            else {
                value = path.split('.').reduce(function (result, prop) {
                    return result[prop];
                }, data);
            }
            return value;
        };
        FarrisPrimengTreeTableBindingDirective.prototype.setChecks = function (ids) {
            this.frameContext.viewModel.uiState.setPropertyValue('ids', ids);
        };
        FarrisPrimengTreeTableBindingDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[farrisPrimengTreeTableBinding]'
                    },] }
        ];
        /** @nocollapse */
        FarrisPrimengTreeTableBindingDirective.ctorParameters = function () {
            return [
                { type: treetable.TreeTable },
                { type: devkit.FrameContext },
                { type: date.DateTimeHelperService }
            ];
        };
        FarrisPrimengTreeTableBindingDirective.propDecorators = {
            hierarchyInfoKey: [{ type: core.Input, args: ['farrisHierarchyInfoKey',] }],
            columns: [{ type: core.Input, args: ['columns',] }],
            idField: [{ type: core.Input, args: ['farrisPrimengTreeTableIdField',] }],
            nodeSelectChange: [{ type: core.Output }],
            onEditInitHandler: [{ type: core.HostListener, args: ['onEditInit', ['$event'],] }],
            onEditCompleteHandler: [{ type: core.HostListener, args: ['onEditComplete', ['$event'],] }],
            onNodeExpandHandler: [{ type: core.HostListener, args: ['onNodeExpand', ['$event'],] }],
            onNodeCollapseHandler: [{ type: core.HostListener, args: ['onNodeCollapse', ['$event'],] }],
            onNodeSelectHandler: [{ type: core.HostListener, args: ['onNodeSelect', ['$event'],] }],
            onNodeUnselectHandler: [{ type: core.HostListener, args: ['onNodeUnselect', ['$event'],] }]
        };
        return FarrisPrimengTreeTableBindingDirective;
    }());

    var FarrisDynamicRequiredDirective = /** @class */ (function () {
        function FarrisDynamicRequiredDirective(frameContext, injector) {
            this.frameContext = frameContext;
            this.injector = injector;
            /**
             * 启用校验的时机
             */
            this.requiredOn = false;
        }
        FarrisDynamicRequiredDirective.prototype.ngOnDestroy = function () {
            this.updateValidateRule(false);
        };
        FarrisDynamicRequiredDirective.prototype.ngOnChanges = function (changes) {
            // 启用必填校验
            this.updateValidateRule(this.requiredOn);
        };
        /**
         *
         * @param isRequired
         */
        FarrisDynamicRequiredDirective.prototype.updateValidateRule = function (isRequired) {
            if (!this.field) {
                return;
            }
            this.frameContext.form.updateFieldValidateRule(this.field, isRequired);
            // if (isRequired) {
            //   const rules = this.frameContext.params.get(EXCLUDE_VALIDATE_FIELDS) || {};
            //   const fieldExcludeRules: string[] = rules[this.field] || [];
            //   if (fieldExcludeRules.includes(RULETYPE)) {
            //     const index = fieldExcludeRules.indexOf(RULETYPE);
            //     fieldExcludeRules.splice(index, 1);
            //   }
            //   this.frameContext.params.set(EXCLUDE_VALIDATE_FIELDS, rules);
            //   this.frameContext.form.updateFieldValidateRule(this.field, fieldExcludeRules);
            // } else {
            //   // 禁用校验
            //   // {int1:[required,maxValue]}
            //   const rules = this.frameContext.params.get(EXCLUDE_VALIDATE_FIELDS) || {};
            //   const fieldExcludeRules = rules[this.field] || [];
            //   if (fieldExcludeRules && !fieldExcludeRules.includes(RULETYPE)) {
            //     fieldExcludeRules.push(RULETYPE);
            //   }
            //   rules[this.field] = fieldExcludeRules;
            //   this.frameContext.params.set(EXCLUDE_VALIDATE_FIELDS, rules);
            //   this.frameContext.form.updateFieldValidateRule(this.field, fieldExcludeRules);
            // }
        };
        FarrisDynamicRequiredDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[farris-dynamic-required]'
                    },] }
        ];
        /** @nocollapse */
        FarrisDynamicRequiredDirective.ctorParameters = function () {
            return [
                { type: devkit.FrameContext },
                { type: core.Injector }
            ];
        };
        FarrisDynamicRequiredDirective.propDecorators = {
            field: [{ type: core.Input, args: ['farris-dynamic-required',] }],
            requiredOn: [{ type: core.Input, args: ['requiredOn',] }]
        };
        return FarrisDynamicRequiredDirective;
    }());

    var FarrisEditorDirective = /** @class */ (function () {
        function FarrisEditorDirective(viewModel, editor) {
            this.viewModel = viewModel;
            this.editor = editor;
        }
        FarrisEditorDirective.prototype.ngOnInit = function () {
            this.setComponentRef();
        };
        FarrisEditorDirective.prototype.setComponentRef = function () {
            var appContext = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.getFormAppContext();
            var frameId = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.frameId;
            var editor = this.editor;
            var elementRef = editor && editor.injector && editor.injector.get(core.ElementRef, null);
            var id = elementRef && elementRef.nativeElement && elementRef.nativeElement.id || null;
            // 如果frameId不存在或treetable没有id属性，说明不符合使用场景
            if (!frameId || !id) {
                return;
            }
            var map = appContext && appContext.componentRefs && appContext.componentRefs.get(frameId) || new Map();
            appContext && appContext.componentRefs && appContext.componentRefs.set(frameId, map.set(id, this.editor));
        };
        FarrisEditorDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[farris-editor],[farris-editor-bind]'
                    },] }
        ];
        /** @nocollapse */
        FarrisEditorDirective.ctorParameters = function () {
            return [
                { type: devkit.ViewModel },
                { type: uiEditor.EditorComponent }
            ];
        };
        return FarrisEditorDirective;
    }());

    var FarrisQuerySolutionEventBindDirective = /** @class */ (function () {
        function FarrisQuerySolutionEventBindDirective(injector, component, frameContext) {
            this.injector = injector;
            this.component = component;
            this.frameContext = frameContext;
        }
        /**
         * 执行筛选
         * @param event event
         */
        FarrisQuerySolutionEventBindDirective.prototype.onQuery = function (event) {
            if (this.frameContext) {
                this.frameContext.repository.entityCollection.pageIndex = 1;
            }
        };
        FarrisQuerySolutionEventBindDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: "[farris-querysolution-event-bind]"
                    },] }
        ];
        /** @nocollapse */
        FarrisQuerySolutionEventBindDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: querysolution.QuerySolutionComponent },
                { type: devkit.FrameContext }
            ];
        };
        FarrisQuerySolutionEventBindDirective.propDecorators = {
            onQuery: [{ type: core.HostListener, args: ["queryEmitter",] }]
        };
        return FarrisQuerySolutionEventBindDirective;
    }());

    var FarrisDateLocalizationDirective = /** @class */ (function () {
        function FarrisDateLocalizationDirective(injector, userSettings, componentRef) {
            this.injector = injector;
            this.userSettings = userSettings;
            this.componentRef = componentRef;
        }
        FarrisDateLocalizationDirective.prototype.ngOnInit = function () {
            this.localize();
        };
        FarrisDateLocalizationDirective.prototype.localize = function () {
            if (this.userSettings && this.componentRef) {
                var _a = this.userSettings, _b = _a.dateFormat, dateFormat = _b === void 0 ? null : _b, _c = _a.timeFormat, timeFormat = _c === void 0 ? null : _c;
                if (dateFormat === null && timeFormat === null) {
                    return;
                }
                if (timeFormat && timeFormat && this.componentRef.showTime === true) {
                    this.componentRef.dateFormat = dateFormat + " " + timeFormat;
                    this.componentRef.dateOpts.dateFormat = dateFormat + " " + timeFormat;
                    this.componentRef.updateValue(this.componentRef.value);
                }
                else if (dateFormat) {
                    this.componentRef.dateFormat = "" + dateFormat;
                    this.componentRef.dateOpts.dateFormat = "" + dateFormat;
                    this.componentRef.updateValue(this.componentRef.value);
                }
            }
        };
        FarrisDateLocalizationDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[farris-date-localization]'
                    },] }
        ];
        /** @nocollapse */
        FarrisDateLocalizationDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: undefined, decorators: [{ type: core.Inject, args: [devkit.UserSettingsToken,] }] },
                { type: uiDatepicker.FarrisDatepickerComponent }
            ];
        };
        return FarrisDateLocalizationDirective;
    }());

    var FarrisNumberLocalizationDirective = /** @class */ (function () {
        function FarrisNumberLocalizationDirective(injector, userSettings, componentRef) {
            this.injector = injector;
            this.userSettings = userSettings;
            this.componentRef = componentRef;
        }
        FarrisNumberLocalizationDirective.prototype.ngOnInit = function () {
            this.localize();
        };
        FarrisNumberLocalizationDirective.prototype.localize = function () {
            return;
            // 涉及金额等问题，数字格式化不予处理
            if (this.userSettings && this.userSettings.numberFormat && this.componentRef) {
                var _a = this.userSettings.numberFormat || {}, _b = _a.negativeSign, _c = _a.numberDecimalDigits, numberDecimalDigits = _c === void 0 ? null : _c, _d = _a.numberDecimalSeparator, numberDecimalSeparator = _d === void 0 ? null : _d, _e = _a.numberGroupSeparator, numberGroupSeparator = _e === void 0 ? null : _e;
                // 小数位数
                if (numberDecimalDigits !== null) {
                    this.componentRef.precision = numberDecimalDigits;
                    this.componentRef.formatOptions['precision'] = numberDecimalDigits;
                }
                // 小数点符号
                if (numberDecimalSeparator !== null) {
                    this.componentRef.decimalSeparator = numberDecimalSeparator;
                    this.componentRef.formatOptions['decimalSeparator'] = numberDecimalSeparator;
                }
                // 千分位符号
                if (numberGroupSeparator !== null) {
                    this.componentRef.groupSeparator = numberGroupSeparator;
                    this.componentRef.formatOptions['groupSeparator'] = numberGroupSeparator;
                }
                this.componentRef.updateValue(this.componentRef.value);
            }
        };
        FarrisNumberLocalizationDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[farris-number-localization]'
                    },] }
        ];
        /** @nocollapse */
        FarrisNumberLocalizationDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: undefined, decorators: [{ type: core.Inject, args: [devkit.UserSettingsToken,] }] },
                { type: uiNumberSpinner.NumberSpinnerComponent }
            ];
        };
        return FarrisNumberLocalizationDirective;
    }());

    var FarrisTimeLocalizationDirective = /** @class */ (function () {
        function FarrisTimeLocalizationDirective(injector, userSettings, componentRef) {
            this.injector = injector;
            this.userSettings = userSettings;
            this.componentRef = componentRef;
        }
        FarrisTimeLocalizationDirective.prototype.ngOnInit = function () {
            this.localize();
        };
        FarrisTimeLocalizationDirective.prototype.localize = function () {
            if (this.userSettings && this.componentRef) {
                var _a = this.userSettings.timeFormat, timeFormat = _a === void 0 ? null : _a;
                if (timeFormat) {
                    this.componentRef.format = timeFormat;
                }
            }
        };
        FarrisTimeLocalizationDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[farris-time-localization]'
                    },] }
        ];
        /** @nocollapse */
        FarrisTimeLocalizationDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: undefined, decorators: [{ type: core.Inject, args: [devkit.UserSettingsToken,] }] },
                { type: uiTimePicker.TimePickerComponent }
            ];
        };
        return FarrisTimeLocalizationDirective;
    }());

    var FarrisTextLocalizationDirective = /** @class */ (function () {
        function FarrisTextLocalizationDirective(injector, userSettings, componentRef) {
            this.injector = injector;
            this.userSettings = userSettings;
            this.componentRef = componentRef;
            this.transform();
        }
        FarrisTextLocalizationDirective.prototype.ngOnInit = function () {
        };
        FarrisTextLocalizationDirective.prototype.transform = function () {
            var _this = this;
            if (this.componentRef) {
                this.componentRef.beforeWriteValue = function (value, options) {
                    var _a = options.localizationType, localizationType = _a === void 0 ? null : _a, _b = options.showTime;
                    if (!value) {
                        return '';
                    }
                    if (localizationType && value) {
                        localizationType = localizationType.toLowerCase();
                        value = _this.transformValue(value, localizationType);
                        return value;
                    }
                    else {
                        return undefined;
                    }
                };
            }
        };
        FarrisTextLocalizationDirective.prototype.transformValue = function (value, dataType) {
            if (dataType === 'date') {
                return this.transformDate(value);
            }
            else if (dataType === 'datetime') {
                return this.transformDateTime(value);
            }
            // 涉及金额计算及显示问题，不予处理
            //  else if (dataType === 'number') {
            //   return this.transformNumber(value);
            // } 
            else {
                return value;
            }
        };
        /**
         * 转换日期
         * @param value value
         */
        FarrisTextLocalizationDirective.prototype.transformDate = function (value) {
            var dateFormat = this.userSettings && this.userSettings.dateFormat || 'YYYY-MM-DD';
            if (!dateFormat || !value) {
                return value;
            }
            var date$$1 = moment(value);
            var isValid = date$$1.isValid();
            if (!isValid) {
                return value;
            }
            dateFormat = this.parseDateFormat(dateFormat);
            return date$$1.format(dateFormat);
        };
        /**
         * 转换日期时间
         * @param value value
         * todo: 目前无法定义日期时间格式
         */
        FarrisTextLocalizationDirective.prototype.transformDateTime = function (value) {
            var dateFormat = this.userSettings && this.userSettings.dateFormat || 'YYYY-MM-DD';
            var timeFormat = this.userSettings && this.userSettings.timeFormat || 'HH:mm:ss';
            if (!dateFormat || !timeFormat) {
                return value;
            }
            var dateTime = moment(value);
            var isValid = dateTime.isValid();
            if (!isValid) {
                return value;
            }
            if (dateFormat) {
                dateFormat = this.parseDateFormat(dateFormat);
            }
            if (timeFormat) {
                timeFormat = this.parseTimeFormat(timeFormat);
            }
            var dateTimeFormat = dateFormat + ' ' + timeFormat;
            return dateTime.format(dateTimeFormat);
        };
        /**
         * 转换数字
         * @param value value
         */
        FarrisTextLocalizationDirective.prototype.transformNumber = function (value) {
            if (value === null || value === undefined || value === '') {
                return '';
            }
            var bigNumber = new bignumber_js.BigNumber(value);
            // 如果不是数字，不做任何处理
            if (!bignumber_js.BigNumber.isBigNumber(bigNumber)) {
                return value;
            }
            var isNegative = bigNumber.isNegative();
            var format = this.buildNumberFormat();
            var _a = this.numberFormat || {}, _b = _a.negativeSign, negativeSign = _b === void 0 ? null : _b, _c = _a.numberDecimalDigits, numberDecimalDigits = _c === void 0 ? null : _c;
            if (isNegative) {
                if (negativeSign !== null) {
                    format.prefix = negativeSign;
                    return bigNumber.absoluteValue().toFormat(numberDecimalDigits, null, format);
                }
            }
            return bigNumber.toFormat(numberDecimalDigits, null, format);
        };
        /**
         * 转换日期格式规则为moment的format规则
         * @param format format
         */
        FarrisTextLocalizationDirective.prototype.parseDateFormat = function (format) {
            return format.replace(/y/g, 'Y').replace(/d/g, 'D');
        };
        /**
         * 转换时间格式规则为moment的format规则
         * @param format format
         */
        FarrisTextLocalizationDirective.prototype.parseTimeFormat = function (format) {
            return format.replace(/M/g, 'm');
        };
        /**
         * 构造bignumber数字格式化选项
         */
        FarrisTextLocalizationDirective.prototype.buildNumberFormat = function () {
            if (this.numberFormat) {
                var _a = this.numberFormat, _b = _a.numberDecimalSeparator, numberDecimalSeparator = _b === void 0 ? null : _b, _c = _a.numberGroupSeparator, numberGroupSeparator = _c === void 0 ? null : _c;
                var format = {
                    groupSize: 3,
                };
                if (numberDecimalSeparator !== null) {
                    format.decimalSeparator = numberDecimalSeparator;
                }
                if (numberGroupSeparator !== null) {
                    format.groupSeparator = numberGroupSeparator;
                }
                return format;
            }
        };
        Object.defineProperty(FarrisTextLocalizationDirective.prototype, "numberFormat", {
            get: function () {
                return this.userSettings && this.userSettings.numberFormat || null;
            },
            enumerable: true,
            configurable: true
        });
        FarrisTextLocalizationDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[farris-text-localization]'
                    },] }
        ];
        /** @nocollapse */
        FarrisTextLocalizationDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: undefined, decorators: [{ type: core.Inject, args: [devkit.UserSettingsToken,] }] },
                { type: uiText.TextComponent }
            ];
        };
        FarrisTextLocalizationDirective.propDecorators = {
            localization: [{ type: core.Input, args: ['localization',] }]
        };
        return FarrisTextLocalizationDirective;
    }());

    var FarrisCheckboxModificationDirective = /** @class */ (function () {
        function FarrisCheckboxModificationDirective(injector, elementRef) {
            this.injector = injector;
            this.elementRef = elementRef;
        }
        FarrisCheckboxModificationDirective.prototype.ngOnInit = function () {
            if (typeof this.index !== 'number' || !this.elementRef) {
                return;
            }
            var nativeElement = this.elementRef.nativeElement;
            if (nativeElement) {
                var id = nativeElement.getAttribute('id');
                if (id) {
                    var token = id + "_" + this.index;
                    this.elementRef.nativeElement.setAttribute('id', token);
                    this.elementRef.nativeElement.setAttribute('name', token);
                    this.elementRef.nativeElement.setAttribute('original_id', id);
                }
            }
        };
        FarrisCheckboxModificationDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[farris-checkbox-modification]'
                    },] }
        ];
        /** @nocollapse */
        FarrisCheckboxModificationDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: core.ElementRef }
            ];
        };
        FarrisCheckboxModificationDirective.propDecorators = {
            index: [{ type: core.Input }]
        };
        return FarrisCheckboxModificationDirective;
    }());

    var FarrisLabelModificationDirective = /** @class */ (function () {
        function FarrisLabelModificationDirective(injector, elementRef) {
            this.injector = injector;
            this.elementRef = elementRef;
        }
        FarrisLabelModificationDirective.prototype.ngOnInit = function () {
            if (typeof this.index !== 'number' || !this.elementRef) {
                return;
            }
            var nativeElement = this.elementRef.nativeElement;
            if (nativeElement) {
                var labelFor = nativeElement.getAttribute('for');
                if (labelFor) {
                    this.elementRef.nativeElement.setAttribute('for', labelFor + "_" + this.index);
                }
            }
        };
        FarrisLabelModificationDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[farris-label-modification]'
                    },] }
        ];
        /** @nocollapse */
        FarrisLabelModificationDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: core.ElementRef }
            ];
        };
        FarrisLabelModificationDirective.propDecorators = {
            index: [{ type: core.Input }]
        };
        return FarrisLabelModificationDirective;
    }());

    var FarrisLookupBindingDirective = /** @class */ (function () {
        function FarrisLookupBindingDirective(lookup, comboLookup) {
            this.lookup = lookup;
            this.comboLookup = comboLookup;
        }
        Object.defineProperty(FarrisLookupBindingDirective.prototype, "lookupValue", {
            set: function (value) {
                if (this.lookupType === 'lookup' && this.lookup) {
                    this.lookup.writeValue(value);
                }
                else if (this.lookupType === 'comboLookup' && this.comboLookup) {
                    this.comboLookup.writeValue(value);
                }
            },
            enumerable: true,
            configurable: true
        });
        FarrisLookupBindingDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[farris-lookup-binding]'
                    },] }
        ];
        /** @nocollapse */
        FarrisLookupBindingDirective.ctorParameters = function () {
            return [
                { type: uiLookup.LookupGridComponent, decorators: [{ type: core.Optional }] },
                { type: uiComboLookup.ComboLookupComponent, decorators: [{ type: core.Optional }] }
            ];
        };
        FarrisLookupBindingDirective.propDecorators = {
            lookupType: [{ type: core.Input }],
            lookupValue: [{ type: core.Input, args: ['farris-lookup-binding',] }]
        };
        return FarrisLookupBindingDirective;
    }());

    var ComponentRef = /** @class */ (function () {
        function ComponentRef(frameContext, elementRef) {
            this.frameContext = frameContext;
            this.elementRef = elementRef;
        }
        ComponentRef.prototype.addComponent = function (componentRef) {
            var id = this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;
            if (this.frameContext && id && componentRef) {
                this.frameContext.componentRefManager.add(id, componentRef);
            }
        };
        ComponentRef.prototype.tryAddComponent = function (componentRef, componentId) {
            if (componentId === void 0) {
                componentId = null;
            }
            var id = componentId || this.elementRef && this.elementRef.nativeElement && this.elementRef.nativeElement.id;
            if (this.frameContext && id && componentRef && !this.frameContext.componentRefManager.has(id)) {
                this.frameContext.componentRefManager.add(id, componentRef);
            }
        };
        return ComponentRef;
    }());

    var ListNavComponentRefDirective = /** @class */ (function (_super) {
        __extends(ListNavComponentRefDirective, _super);
        function ListNavComponentRefDirective(injector, component, elementRef, frameContext) {
            var _this = _super.call(this, frameContext, elementRef) || this;
            _this.injector = injector;
            _this.component = component;
            _this.elementRef = elementRef;
            _this.frameContext = frameContext;
            return _this;
        }
        //#region angular lifecycle
        ListNavComponentRefDirective.prototype.ngAfterViewInit = function () {
            this.tryAddComponent(this.component);
        };
        ListNavComponentRefDirective.prototype.ngOnInit = function () {
            this.addComponent(this.component);
        };
        ListNavComponentRefDirective.prototype.ngOnDestroy = function () {
        };
        ListNavComponentRefDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[listNavRef]'
                    },] }
        ];
        /** @nocollapse */
        ListNavComponentRefDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: uiListNav.ListNavComponent },
                { type: core.ElementRef },
                { type: devkit.FrameContext }
            ];
        };
        return ListNavComponentRefDirective;
    }(ComponentRef));

    var ListViewComponentRefDirective = /** @class */ (function (_super) {
        __extends(ListViewComponentRefDirective, _super);
        function ListViewComponentRefDirective(injector, component, elementRef, frameContext) {
            var _this = _super.call(this, frameContext, elementRef) || this;
            _this.injector = injector;
            _this.component = component;
            _this.elementRef = elementRef;
            _this.frameContext = frameContext;
            return _this;
        }
        ListViewComponentRefDirective.prototype.ngAfterViewInit = function () {
            this.tryAddComponent(this.component);
        };
        ListViewComponentRefDirective.prototype.ngOnInit = function () {
            this.addComponent(this.component);
        };
        ListViewComponentRefDirective.prototype.ngOnDestroy = function () {
        };
        ListViewComponentRefDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[listViewRef]'
                    },] }
        ];
        /** @nocollapse */
        ListViewComponentRefDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: uiListView.ListViewComponent },
                { type: core.ElementRef },
                { type: devkit.FrameContext }
            ];
        };
        return ListViewComponentRefDirective;
    }(ComponentRef));

    var ListFilterComponentRefDirective = /** @class */ (function (_super) {
        __extends(ListFilterComponentRefDirective, _super);
        function ListFilterComponentRefDirective(injector, component, elementRef, frameContext) {
            var _this = _super.call(this, frameContext, elementRef) || this;
            _this.injector = injector;
            _this.component = component;
            _this.elementRef = elementRef;
            _this.frameContext = frameContext;
            return _this;
        }
        ListFilterComponentRefDirective.prototype.ngAfterViewInit = function () {
            this.tryAddComponent(this.component);
        };
        ListFilterComponentRefDirective.prototype.ngOnInit = function () {
            this.addComponent(this.component);
        };
        ListFilterComponentRefDirective.prototype.ngOnDestroy = function () {
        };
        ListFilterComponentRefDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[listFilterRef]'
                    },] }
        ];
        /** @nocollapse */
        ListFilterComponentRefDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: uiListFilter.ListFilterComponent },
                { type: core.ElementRef },
                { type: devkit.FrameContext }
            ];
        };
        return ListFilterComponentRefDirective;
    }(ComponentRef));

    var FilterComponentRefDirective = /** @class */ (function (_super) {
        __extends(FilterComponentRefDirective, _super);
        function FilterComponentRefDirective(injector, component, elementRef, frameContext) {
            var _this = _super.call(this, frameContext, elementRef) || this;
            _this.injector = injector;
            _this.component = component;
            _this.elementRef = elementRef;
            _this.frameContext = frameContext;
            return _this;
        }
        FilterComponentRefDirective.prototype.ngAfterViewInit = function () {
            this.tryAddComponent(this.component);
        };
        FilterComponentRefDirective.prototype.ngOnInit = function () {
            this.addComponent(this.component);
        };
        FilterComponentRefDirective.prototype.ngOnDestroy = function () {
        };
        FilterComponentRefDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[filterRef]'
                    },] }
        ];
        /** @nocollapse */
        FilterComponentRefDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: uiFilter.FilterComponent },
                { type: core.ElementRef },
                { type: devkit.FrameContext }
            ];
        };
        return FilterComponentRefDirective;
    }(ComponentRef));

    var ViewChangeComponentRefDirective = /** @class */ (function (_super) {
        __extends(ViewChangeComponentRefDirective, _super);
        function ViewChangeComponentRefDirective(injector, component, elementRef, frameContext) {
            var _this = _super.call(this, frameContext, elementRef) || this;
            _this.injector = injector;
            _this.component = component;
            _this.elementRef = elementRef;
            _this.frameContext = frameContext;
            return _this;
        }
        ViewChangeComponentRefDirective.prototype.ngAfterViewInit = function () {
            this.tryAddComponent(this.component);
        };
        ViewChangeComponentRefDirective.prototype.ngOnInit = function () {
            this.addComponent(this.component);
        };
        ViewChangeComponentRefDirective.prototype.ngOnDestroy = function () {
        };
        ViewChangeComponentRefDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[viewChangeRef]'
                    },] }
        ];
        /** @nocollapse */
        ViewChangeComponentRefDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: uiViewChange.ViewChangeComponent },
                { type: core.ElementRef },
                { type: devkit.FrameContext }
            ];
        };
        return ViewChangeComponentRefDirective;
    }(ComponentRef));

    var HtmlEditorComponentRefDirective = /** @class */ (function (_super) {
        __extends(HtmlEditorComponentRefDirective, _super);
        function HtmlEditorComponentRefDirective(injector, component, elementRef, frameContext) {
            var _this = _super.call(this, frameContext, elementRef) || this;
            _this.injector = injector;
            _this.component = component;
            _this.elementRef = elementRef;
            _this.frameContext = frameContext;
            return _this;
        }
        HtmlEditorComponentRefDirective.prototype.ngAfterViewInit = function () {
            this.tryAddComponent(this.component);
        };
        HtmlEditorComponentRefDirective.prototype.ngOnInit = function () {
            this.addComponent(this.component);
        };
        HtmlEditorComponentRefDirective.prototype.ngOnDestroy = function () {
        };
        HtmlEditorComponentRefDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[htmlEditorRef]'
                    },] }
        ];
        /** @nocollapse */
        HtmlEditorComponentRefDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: uiHtmlEditor.HtmlEditorComponent },
                { type: core.ElementRef },
                { type: devkit.FrameContext }
            ];
        };
        return HtmlEditorComponentRefDirective;
    }(ComponentRef));

    var SectionComponentRefDirective = /** @class */ (function (_super) {
        __extends(SectionComponentRefDirective, _super);
        function SectionComponentRefDirective(injector, component, elementRef, frameContext) {
            var _this = _super.call(this, frameContext, elementRef) || this;
            _this.injector = injector;
            _this.component = component;
            _this.elementRef = elementRef;
            _this.frameContext = frameContext;
            return _this;
        }
        SectionComponentRefDirective.prototype.ngAfterViewInit = function () {
            this.tryAddComponent(this.component);
        };
        SectionComponentRefDirective.prototype.ngOnInit = function () {
            this.addComponent(this.component);
        };
        SectionComponentRefDirective.prototype.ngOnDestroy = function () {
        };
        SectionComponentRefDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[sectionRef]'
                    },] }
        ];
        /** @nocollapse */
        SectionComponentRefDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: uiSection.FarrisSectionComponent },
                { type: core.ElementRef },
                { type: devkit.FrameContext }
            ];
        };
        return SectionComponentRefDirective;
    }(ComponentRef));

    var InputGroupComponentRefDirective = /** @class */ (function (_super) {
        __extends(InputGroupComponentRefDirective, _super);
        function InputGroupComponentRefDirective(injector, component, elementRef, frameContext) {
            var _this = _super.call(this, frameContext, elementRef) || this;
            _this.injector = injector;
            _this.component = component;
            _this.elementRef = elementRef;
            _this.frameContext = frameContext;
            return _this;
        }
        InputGroupComponentRefDirective.prototype.ngAfterViewInit = function () {
            this.tryAddComponent(this.component);
        };
        InputGroupComponentRefDirective.prototype.ngOnInit = function () {
            this.addComponent(this.component);
        };
        InputGroupComponentRefDirective.prototype.ngOnDestroy = function () {
        };
        InputGroupComponentRefDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[inputGroupRef]'
                    },] }
        ];
        /** @nocollapse */
        InputGroupComponentRefDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: uiInputGroup.InputGroupComponent },
                { type: core.ElementRef },
                { type: devkit.FrameContext }
            ];
        };
        return InputGroupComponentRefDirective;
    }(ComponentRef));

    var DatepickerComponentRefDirective = /** @class */ (function (_super) {
        __extends(DatepickerComponentRefDirective, _super);
        function DatepickerComponentRefDirective(injector, component, elementRef, frameContext) {
            var _this = _super.call(this, frameContext, elementRef) || this;
            _this.injector = injector;
            _this.component = component;
            _this.elementRef = elementRef;
            _this.frameContext = frameContext;
            return _this;
        }
        DatepickerComponentRefDirective.prototype.ngAfterViewInit = function () {
            this.tryAddComponent(this.component);
        };
        DatepickerComponentRefDirective.prototype.ngOnInit = function () {
            this.addComponent(this.component);
        };
        DatepickerComponentRefDirective.prototype.ngOnDestroy = function () {
        };
        DatepickerComponentRefDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[datepickerRef]'
                    },] }
        ];
        /** @nocollapse */
        DatepickerComponentRefDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: uiDatepicker.FarrisDatepickerComponent },
                { type: core.ElementRef },
                { type: devkit.FrameContext }
            ];
        };
        return DatepickerComponentRefDirective;
    }(ComponentRef));

    var TimePickerComponentRefDirective = /** @class */ (function (_super) {
        __extends(TimePickerComponentRefDirective, _super);
        function TimePickerComponentRefDirective(injector, component, elementRef, frameContext) {
            var _this = _super.call(this, frameContext, elementRef) || this;
            _this.injector = injector;
            _this.component = component;
            _this.elementRef = elementRef;
            _this.frameContext = frameContext;
            return _this;
        }
        TimePickerComponentRefDirective.prototype.ngAfterViewInit = function () {
            this.tryAddComponent(this.component);
        };
        TimePickerComponentRefDirective.prototype.ngOnInit = function () {
            this.addComponent(this.component);
        };
        TimePickerComponentRefDirective.prototype.ngOnDestroy = function () {
        };
        TimePickerComponentRefDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[timePickerRef]'
                    },] }
        ];
        /** @nocollapse */
        TimePickerComponentRefDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: uiTimePicker.TimePickerComponent },
                { type: core.ElementRef },
                { type: devkit.FrameContext }
            ];
        };
        return TimePickerComponentRefDirective;
    }(ComponentRef));

    var NumberSpinnerComponentRefDirective = /** @class */ (function (_super) {
        __extends(NumberSpinnerComponentRefDirective, _super);
        function NumberSpinnerComponentRefDirective(injector, component, elementRef, frameContext) {
            var _this = _super.call(this, frameContext, elementRef) || this;
            _this.injector = injector;
            _this.component = component;
            _this.elementRef = elementRef;
            _this.frameContext = frameContext;
            return _this;
        }
        NumberSpinnerComponentRefDirective.prototype.ngAfterViewInit = function () {
            this.tryAddComponent(this.component);
        };
        NumberSpinnerComponentRefDirective.prototype.ngOnInit = function () {
            this.addComponent(this.component);
        };
        NumberSpinnerComponentRefDirective.prototype.ngOnDestroy = function () {
        };
        NumberSpinnerComponentRefDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[numberSpinnerRef]'
                    },] }
        ];
        /** @nocollapse */
        NumberSpinnerComponentRefDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: uiNumberSpinner.NumberSpinnerComponent },
                { type: core.ElementRef },
                { type: devkit.FrameContext }
            ];
        };
        return NumberSpinnerComponentRefDirective;
    }(ComponentRef));

    var ComboListComponentRefDirective = /** @class */ (function (_super) {
        __extends(ComboListComponentRefDirective, _super);
        function ComboListComponentRefDirective(injector, component, elementRef, frameContext) {
            var _this = _super.call(this, frameContext, elementRef) || this;
            _this.injector = injector;
            _this.component = component;
            _this.elementRef = elementRef;
            _this.frameContext = frameContext;
            return _this;
        }
        ComboListComponentRefDirective.prototype.ngAfterViewInit = function () {
            this.tryAddComponent(this.component);
        };
        ComboListComponentRefDirective.prototype.ngOnInit = function () {
            this.addComponent(this.component);
        };
        ComboListComponentRefDirective.prototype.ngOnDestroy = function () {
        };
        ComboListComponentRefDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[comboListRef]'
                    },] }
        ];
        /** @nocollapse */
        ComboListComponentRefDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: uiComboList.ComboListComponent },
                { type: core.ElementRef },
                { type: devkit.FrameContext }
            ];
        };
        return ComboListComponentRefDirective;
    }(ComponentRef));

    var ComboLookupComponentRefDirective = /** @class */ (function (_super) {
        __extends(ComboLookupComponentRefDirective, _super);
        function ComboLookupComponentRefDirective(injector, component, elementRef, frameContext) {
            var _this = _super.call(this, frameContext, elementRef) || this;
            _this.injector = injector;
            _this.component = component;
            _this.elementRef = elementRef;
            _this.frameContext = frameContext;
            return _this;
        }
        ComboLookupComponentRefDirective.prototype.ngAfterViewInit = function () {
            this.tryAddComponent(this.component);
        };
        ComboLookupComponentRefDirective.prototype.ngOnInit = function () {
            this.addComponent(this.component);
        };
        ComboLookupComponentRefDirective.prototype.ngOnDestroy = function () {
        };
        ComboLookupComponentRefDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[comboLookupRef]'
                    },] }
        ];
        /** @nocollapse */
        ComboLookupComponentRefDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: uiComboLookup.ComboLookupComponent },
                { type: core.ElementRef },
                { type: devkit.FrameContext }
            ];
        };
        return ComboLookupComponentRefDirective;
    }(ComponentRef));

    var LookupGridComponentRefDirective = /** @class */ (function (_super) {
        __extends(LookupGridComponentRefDirective, _super);
        function LookupGridComponentRefDirective(injector, component, elementRef, frameContext) {
            var _this = _super.call(this, frameContext, elementRef) || this;
            _this.injector = injector;
            _this.component = component;
            _this.elementRef = elementRef;
            _this.frameContext = frameContext;
            return _this;
        }
        LookupGridComponentRefDirective.prototype.ngAfterViewInit = function () {
            this.tryAddComponent(this.component);
        };
        LookupGridComponentRefDirective.prototype.ngOnInit = function () {
            this.addComponent(this.component);
        };
        LookupGridComponentRefDirective.prototype.ngOnDestroy = function () {
        };
        LookupGridComponentRefDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[lookupGridRef]'
                    },] }
        ];
        /** @nocollapse */
        LookupGridComponentRefDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: uiLookup.LookupGridComponent },
                { type: core.ElementRef },
                { type: devkit.FrameContext }
            ];
        };
        return LookupGridComponentRefDirective;
    }(ComponentRef));

    var DatagridComponentRefDirective = /** @class */ (function (_super) {
        __extends(DatagridComponentRefDirective, _super);
        function DatagridComponentRefDirective(injector, component, elementRef, frameContext) {
            var _this = _super.call(this, frameContext, elementRef) || this;
            _this.injector = injector;
            _this.component = component;
            _this.elementRef = elementRef;
            _this.frameContext = frameContext;
            return _this;
        }
        DatagridComponentRefDirective.prototype.ngAfterViewInit = function () {
            this.tryAddComponent(this.component, this.component.id);
        };
        DatagridComponentRefDirective.prototype.ngOnInit = function () {
            this.addComponent(this.component);
        };
        DatagridComponentRefDirective.prototype.ngOnDestroy = function () {
        };
        DatagridComponentRefDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[datagridRef]'
                    },] }
        ];
        /** @nocollapse */
        DatagridComponentRefDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: uiDatagrid.DatagridComponent },
                { type: core.ElementRef },
                { type: devkit.FrameContext }
            ];
        };
        return DatagridComponentRefDirective;
    }(ComponentRef));

    var TreetableComponentRefDirective = /** @class */ (function (_super) {
        __extends(TreetableComponentRefDirective, _super);
        function TreetableComponentRefDirective(injector, component, elementRef, frameContext) {
            var _this = _super.call(this, frameContext, elementRef) || this;
            _this.injector = injector;
            _this.component = component;
            _this.elementRef = elementRef;
            _this.frameContext = frameContext;
            return _this;
        }
        TreetableComponentRefDirective.prototype.ngAfterViewInit = function () {
            this.tryAddComponent(this.component);
        };
        TreetableComponentRefDirective.prototype.ngOnInit = function () {
            this.addComponent(this.component);
        };
        TreetableComponentRefDirective.prototype.ngOnDestroy = function () {
        };
        TreetableComponentRefDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[treetableRef]'
                    },] }
        ];
        /** @nocollapse */
        TreetableComponentRefDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: uiTreetable.TreeTableComponent },
                { type: core.ElementRef },
                { type: devkit.FrameContext }
            ];
        };
        return TreetableComponentRefDirective;
    }(ComponentRef));

    var WizardComponentRefDirective = /** @class */ (function (_super) {
        __extends(WizardComponentRefDirective, _super);
        function WizardComponentRefDirective(injector, component, elementRef, frameContext) {
            var _this = _super.call(this, frameContext, elementRef) || this;
            _this.injector = injector;
            _this.component = component;
            _this.elementRef = elementRef;
            _this.frameContext = frameContext;
            return _this;
        }
        WizardComponentRefDirective.prototype.ngAfterViewInit = function () {
            this.tryAddComponent(this.component);
        };
        WizardComponentRefDirective.prototype.ngOnInit = function () {
            this.addComponent(this.component);
        };
        WizardComponentRefDirective.prototype.ngOnDestroy = function () {
        };
        WizardComponentRefDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[wizardRef]'
                    },] }
        ];
        /** @nocollapse */
        WizardComponentRefDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: uiWizard.WizardComponent },
                { type: core.ElementRef },
                { type: devkit.FrameContext }
            ];
        };
        return WizardComponentRefDirective;
    }(ComponentRef));

    var DiscussionEditorComponentRefDirective = /** @class */ (function (_super) {
        __extends(DiscussionEditorComponentRefDirective, _super);
        function DiscussionEditorComponentRefDirective(injector, component, elementRef, frameContext) {
            var _this = _super.call(this, frameContext, elementRef) || this;
            _this.injector = injector;
            _this.component = component;
            _this.elementRef = elementRef;
            _this.frameContext = frameContext;
            return _this;
        }
        DiscussionEditorComponentRefDirective.prototype.ngAfterViewInit = function () {
            this.tryAddComponent(this.component);
        };
        DiscussionEditorComponentRefDirective.prototype.ngOnInit = function () {
            this.addComponent(this.component);
        };
        DiscussionEditorComponentRefDirective.prototype.ngOnDestroy = function () {
        };
        DiscussionEditorComponentRefDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[discussionEditorRef]'
                    },] }
        ];
        /** @nocollapse */
        DiscussionEditorComponentRefDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: discussionGroup.DiscussionEditorComponent },
                { type: core.ElementRef },
                { type: devkit.FrameContext }
            ];
        };
        return DiscussionEditorComponentRefDirective;
    }(ComponentRef));

    var DiscussionListComponentRefDirective = /** @class */ (function (_super) {
        __extends(DiscussionListComponentRefDirective, _super);
        function DiscussionListComponentRefDirective(injector, component, elementRef, frameContext) {
            var _this = _super.call(this, frameContext, elementRef) || this;
            _this.injector = injector;
            _this.component = component;
            _this.elementRef = elementRef;
            _this.frameContext = frameContext;
            return _this;
        }
        DiscussionListComponentRefDirective.prototype.ngAfterViewInit = function () {
            this.tryAddComponent(this.component);
        };
        DiscussionListComponentRefDirective.prototype.ngOnInit = function () {
            this.addComponent(this.component);
        };
        DiscussionListComponentRefDirective.prototype.ngOnDestroy = function () {
        };
        DiscussionListComponentRefDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[discussionListRef]'
                    },] }
        ];
        /** @nocollapse */
        DiscussionListComponentRefDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: discussionGroup.DiscussionListComponent },
                { type: core.ElementRef },
                { type: devkit.FrameContext }
            ];
        };
        return DiscussionListComponentRefDirective;
    }(ComponentRef));

    var NavComponentRefDirective = /** @class */ (function (_super) {
        __extends(NavComponentRefDirective, _super);
        function NavComponentRefDirective(injector, component, elementRef, frameContext) {
            var _this = _super.call(this, frameContext, elementRef) || this;
            _this.injector = injector;
            _this.component = component;
            _this.elementRef = elementRef;
            _this.frameContext = frameContext;
            return _this;
        }
        NavComponentRefDirective.prototype.ngAfterViewInit = function () {
            this.tryAddComponent(this.component);
        };
        NavComponentRefDirective.prototype.ngOnInit = function () {
            this.addComponent(this.component);
        };
        NavComponentRefDirective.prototype.ngOnDestroy = function () {
        };
        NavComponentRefDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[navRef]'
                    },] }
        ];
        /** @nocollapse */
        NavComponentRefDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: uiNav.NavComponent },
                { type: core.ElementRef },
                { type: devkit.FrameContext }
            ];
        };
        return NavComponentRefDirective;
    }(ComponentRef));

    var MultiSelectComponentRefDirective = /** @class */ (function (_super) {
        __extends(MultiSelectComponentRefDirective, _super);
        function MultiSelectComponentRefDirective(injector, component, elementRef, frameContext) {
            var _this = _super.call(this, frameContext, elementRef) || this;
            _this.injector = injector;
            _this.component = component;
            _this.elementRef = elementRef;
            _this.frameContext = frameContext;
            return _this;
        }
        MultiSelectComponentRefDirective.prototype.ngAfterViewInit = function () {
            this.tryAddComponent(this.component);
        };
        MultiSelectComponentRefDirective.prototype.ngOnInit = function () {
            this.addComponent(this.component);
        };
        MultiSelectComponentRefDirective.prototype.ngOnDestroy = function () {
        };
        MultiSelectComponentRefDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[multiSelectRef]'
                    },] }
        ];
        /** @nocollapse */
        MultiSelectComponentRefDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: uiMultiSelect.MultiSelectComponent },
                { type: core.ElementRef },
                { type: devkit.FrameContext }
            ];
        };
        return MultiSelectComponentRefDirective;
    }(ComponentRef));

    var ScrollspyComponentRefDirective = /** @class */ (function (_super) {
        __extends(ScrollspyComponentRefDirective, _super);
        function ScrollspyComponentRefDirective(injector, component, elementRef, frameContext) {
            var _this = _super.call(this, frameContext, elementRef) || this;
            _this.injector = injector;
            _this.component = component;
            _this.elementRef = elementRef;
            _this.frameContext = frameContext;
            return _this;
        }
        ScrollspyComponentRefDirective.prototype.ngAfterViewInit = function () {
            this.tryAddComponent(this.component);
        };
        ScrollspyComponentRefDirective.prototype.ngOnInit = function () {
            this.addComponent(this.component);
        };
        ScrollspyComponentRefDirective.prototype.ngOnDestroy = function () {
        };
        ScrollspyComponentRefDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[scrollspyRef]'
                    },] }
        ];
        /** @nocollapse */
        ScrollspyComponentRefDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: uiScrollspy.ScrollspyComponent },
                { type: core.ElementRef },
                { type: devkit.FrameContext }
            ];
        };
        return ScrollspyComponentRefDirective;
    }(ComponentRef));

    /**
     * 使用方法：
     * [comob-lookup-data-mapping]="{ id: 'user.userId', name: 'user.userName' }"
     * key 为帮助上的字段， value 为 表单中的字段名
     * 帮助上的同一个字段可以映射到表单中的多个字段中，{ ... id: 'user.userid, user.addusid'}
     * 多字段以逗号隔开
     *
     */
    var ComboLookupDataMappingDirective = /** @class */ (function (_super) {
        __extends(ComboLookupDataMappingDirective, _super);
        function ComboLookupDataMappingDirective(vm, lookup) {
            var _this = _super.call(this) || this;
            _this.vm = vm;
            _this.lookup = lookup;
            _this.target = null;
            if (_this.lookup) {
                _this.lookup.useFormDataMapping = true;
            }
            return _this;
        }
        ComboLookupDataMappingDirective.prototype.ngOnInit = function () {
            var _this = this;
            // 值变化，亦通过该事件触发任意输入清空事件
            this.lookup.valueChange.subscribe(function (result) {
                if (!result['nosearch']) {
                    // 值变化
                    var data = result.selections && result.selections.length > 0 ? result.selections : null;
                    _this.onValueChange(data);
                }
                else {
                    // 任意输入清空映射字段
                    _this.onClearMapping();
                }
            });
            // 清空事件
            this.lookup.clear.subscribe(function () {
                var _mapfields = _this.mapfields || _this.lookup.mapFields;
                _this.mappingData(null, _mapfields);
            });
        };
        ComboLookupDataMappingDirective.prototype.onClearMapping = function () {
            var _this = this;
            var mapfields = Object.assign({}, (this.mapfields || this.lookup.mapFields || {}));
            var lookupTextField = this.lookup.textField;
            var data = {};
            var controlName = this.lookup.ngControl && this.lookup.ngControl.name;
            if (controlName && this.vm) {
                var textFieldMapping = mapfields[lookupTextField];
                var ngFormControl = this.vm && this.vm.form && this.vm.form.ngFormControls && this.vm.form.ngFormControls[controlName];
                var binding_1 = ngFormControl && ngFormControl.binding;
                if (textFieldMapping && binding_1) {
                    var targetField = textFieldMapping.split(',').filter(function (item) { return item !== binding_1; }).join(',');
                    if (targetField) {
                        mapfields[lookupTextField] = targetField;
                    }
                    else {
                        delete mapfields[lookupTextField];
                    }
                }
            }
            if (mapfields && Object.keys(mapfields).length > 0) {
                Object.keys(mapfields).forEach(function (field) {
                    _this.setValue(data, field.split('.'), '');
                });
                this.mappingData(data, mapfields, true);
            }
        };
        ComboLookupDataMappingDirective.prototype.onValueChange = function (data) {
            var _mapfields = this.mapfields || this.lookup.mapFields;
            var spliter = this.lookup.separator || this.defaultSpliter;
            this.mappingData(data, _mapfields, false, spliter);
        };
        ComboLookupDataMappingDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[combo-lookup-data-mapping]' },] }
        ];
        /** @nocollapse */
        ComboLookupDataMappingDirective.ctorParameters = function () {
            return [
                { type: devkit.ViewModel, decorators: [{ type: core.Optional }] },
                { type: uiComboLookup.ComboLookupComponent, decorators: [{ type: core.Optional }, { type: core.Self }] }
            ];
        };
        ComboLookupDataMappingDirective.propDecorators = {
            mapfields: [{ type: core.Input, args: ['combo-lookup-data-mapping',] }],
            target: [{ type: core.Input, args: ['target',] }]
        };
        return ComboLookupDataMappingDirective;
    }(DataMapping));

    var BefRepository = /** @class */ (function (_super) {
        __extends(BefRepository, _super);
        function BefRepository() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return BefRepository;
    }(devkit.Repository));
    var ViewType;
    (function (ViewType) {
        ViewType["day"] = "day";
        ViewType["week"] = "week";
    })(ViewType || (ViewType = {}));

    var AppointmentCalendarBindingDirective = /** @class */ (function () {
        function AppointmentCalendarBindingDirective(injector, frameContext, calendarComponent) {
            this.injector = injector;
            this.frameContext = frameContext;
            this.calendarComponent = calendarComponent;
            /**
             * 房间列表api url
             */
            this.url = null;
            /**
             * http method, default PUT
             */
            this.method = 'PUT';
            this.startDateVariable = 'startDate';
            this.endDateVariable = 'endDate';
            this.viewTypeVariable = 'viewType';
        }
        Object.defineProperty(AppointmentCalendarBindingDirective.prototype, "bindingData", {
            get: function () {
                return this.frameContext.bindingData;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppointmentCalendarBindingDirective.prototype, "viewModel", {
            get: function () {
                return this.frameContext.viewModel;
            },
            enumerable: true,
            configurable: true
        });
        AppointmentCalendarBindingDirective.prototype.restService = function () {
            return this.frameContext.repository.restService;
        };
        Object.defineProperty(AppointmentCalendarBindingDirective.prototype, "bindingList", {
            /**
             * 获取绑定数据
             */
            get: function () {
                // 根实体
                if (this.viewModel.bindingPath === '/' || !this.viewModel.bindingPath) {
                    return this.bindingData.list;
                }
                // 子实体
                var bindingPath = this.viewModel.bindingPath.substr(1);
                bindingPath = bindingPath[0].toLowerCase() + bindingPath.substring(1, bindingPath.length);
                var paths = bindingPath.split('/');
                var filteredPaths = paths.filter(function (part) {
                    return part !== '';
                });
                return this.bindingData.getValue(filteredPaths);
            },
            enumerable: true,
            configurable: true
        });
        AppointmentCalendarBindingDirective.prototype.ngOnInit = function () {
            this.loadPlacements();
            this.registerBindingDataChangeEvent();
        };
        AppointmentCalendarBindingDirective.prototype.ngOnChanges = function (changes) {
        };
        AppointmentCalendarBindingDirective.prototype.ngOnDestroy = function () {
            this.unRegisterBindingDataChangeEvent();
        };
        AppointmentCalendarBindingDirective.prototype.bindData = function (change) {
            // 再toJSON
            var data = this.bindingList.toJSON();
            if (this.__DATA__ && lodashEs.isEqual(this.__DATA__, data)) {
                return;
            }
            this.__DATA__ = data;
            this.calendarComponent.loadReserveData(data);
        };
        AppointmentCalendarBindingDirective.prototype.onBindingDataChange = function (change) {
            this.bindData(change);
            this.updateSelectedRow(change);
        };
        AppointmentCalendarBindingDirective.prototype.registerBindingDataChangeEvent = function () {
            var _this = this;
            this.bindingDataChangeEvent = this.bindingData.changes.subscribe(function (change) {
                _this.onBindingDataChange(change);
            });
        };
        /**
         * 取消bindingdata变化订阅
         */
        AppointmentCalendarBindingDirective.prototype.unRegisterBindingDataChangeEvent = function () {
            if (this.bindingDataChangeEvent && typeof (this.bindingDataChangeEvent.unsubscribe) === 'function') {
                this.bindingDataChangeEvent.unsubscribe();
            }
        };
        AppointmentCalendarBindingDirective.prototype.loadPlacements = function () {
            var _this = this;
            if (!this.url) {
                console.log('无法加载房间信息，请配置房间列表api地址');
                return;
            }
            var requestInfo = this.restService().buildRequestInfo();
            var options = {
                body: {
                    requestInfo: requestInfo
                }
            };
            var url = rtf.BasePathService.convertPath(this.url);
            this.restService().request(url, this.method, null, options).subscribe(function (returnValue) {
                _this.bindPlacements(returnValue);
            });
        };
        AppointmentCalendarBindingDirective.prototype.bindPlacements = function (placments) {
            this.calendarComponent.loadPlaceData(placments);
        };
        AppointmentCalendarBindingDirective.prototype.updateState = function (startDate, endDate, viewType) {
            this.viewModel.uiState.setPropertyValue(this.startDateVariable, startDate);
            this.viewModel.uiState.setPropertyValue(this.endDateVariable, endDate);
            this.viewModel.uiState.setPropertyValue(this.viewTypeVariable, viewType);
        };
        AppointmentCalendarBindingDirective.prototype.updateSelectedRow = function (change) {
            if (!this.bindingList || !this.bindingList.currentId) {
                return;
            }
            // 页码切换时不执行当前行切换
            if (change && change.type === devkit.ChangeType.PaginationInfoChange) {
                return;
            }
            if (this.viewModel && this.viewModel.frameContext.bindingData.rowSelectedEventSuspend === true) {
                return;
            }
            var id = this.calendarComponent.selectedId;
            var currentId = this.bindingList.currentId;
            // grid当前行与bingingList当前行一致，无须切换
            if (id === currentId) {
                return;
            }
            this.selectCalendarRow(this.bindingList.currentId);
        };
        AppointmentCalendarBindingDirective.prototype.selectCalendarRow = function (id) {
            this.calendarComponent.selectItem(id);
        };
        AppointmentCalendarBindingDirective.prototype.filterChanged = function (event) {
            var _a = event || {}, _b = _a.dateValue, dateValue = _b === void 0 ? null : _b, _c = _a.place, _d = _a.viewType, viewType = _d === void 0 ? null : _d;
            var startDate = null;
            var endDate = null;
            if (!dateValue) {
                return;
            }
            if (viewType === ViewType.day) {
                startDate = dateValue + " 00:00:00";
                endDate = dateValue + " 23:59:59";
            }
            else if (viewType === ViewType.week && dateValue.indexOf('~') !== -1) {
                var sections = dateValue.split('~');
                startDate = sections[0] + " 00:00:00";
                endDate = sections[1] + " 23:59:59";
            }
            this.updateState(startDate, endDate, viewType);
        };
        AppointmentCalendarBindingDirective.prototype.setSelectionIdToBindingData = function (id) {
            // 如果当前行不存在，则强制设置
            if (this.bindingList.currentId !== id) {
                this.bindingList.setCurrentId(id, true);
            }
        };
        AppointmentCalendarBindingDirective.prototype.selectChange = function (event) {
            var _a = event.item.id, id = _a === void 0 ? null : _a;
            this.setSelectionIdToBindingData(id);
        };
        AppointmentCalendarBindingDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[farris-appointment-calendar-binding]'
                    },] }
        ];
        /** @nocollapse */
        AppointmentCalendarBindingDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: devkit.FrameContext },
                { type: appointmentCalendar.AppointmentCalendarComponent }
            ];
        };
        AppointmentCalendarBindingDirective.propDecorators = {
            url: [{ type: core.Input }],
            method: [{ type: core.Input }],
            startDateVariable: [{ type: core.Input }],
            endDateVariable: [{ type: core.Input }],
            viewTypeVariable: [{ type: core.Input }],
            filterChanged: [{ type: core.HostListener, args: ['filterChange', ['$event'],] }],
            selectChange: [{ type: core.HostListener, args: ['selectChange', ['$event'],] }]
        };
        return AppointmentCalendarBindingDirective;
    }());

    var CustomDatagridSizeDirective = /** @class */ (function () {
        function CustomDatagridSizeDirective(dg, injector, cd, el, frameContext) {
            this.dg = dg;
            this.injector = injector;
            this.cd = cd;
            this.el = el;
            this.frameContext = frameContext;
            this.useCustomSize = false;
            this.sizeApiUri = '';
        }
        CustomDatagridSizeDirective.prototype.restService = function () {
            return this.frameContext.repository.restService;
        };
        CustomDatagridSizeDirective.prototype.ngOnInit = function () {
        };
        CustomDatagridSizeDirective.prototype.ngOnChanges = function (changes) {
            if (changes.sizeApiUri && !changes.sizeApiUri.isFirstChange()) {
                this.applyNewSize();
            }
        };
        CustomDatagridSizeDirective.prototype.ngAfterViewInit = function () {
            this.applyNewSize();
        };
        CustomDatagridSizeDirective.prototype.applyNewSize = function () {
            var _this = this;
            if (this.useCustomSize && this.sizeApiUri) {
                this.getSizeConfig().subscribe(function (cfg) {
                    if (_this.dg && typeof _this.dg.applyNewSize === 'function') {
                        _this.dg.applyNewSize(cfg);
                    }
                });
            }
        };
        CustomDatagridSizeDirective.prototype.getSizeConfig = function () {
            return this.restService().request(this.sizeApiUri, 'get');
        };
        CustomDatagridSizeDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[custom-size]' },] }
        ];
        /** @nocollapse */
        CustomDatagridSizeDirective.ctorParameters = function () {
            return [
                { type: uiDatagrid.DatagridComponent },
                { type: core.Injector },
                { type: core.ChangeDetectorRef },
                { type: core.ElementRef },
                { type: devkit.FrameContext }
            ];
        };
        CustomDatagridSizeDirective.propDecorators = {
            useCustomSize: [{ type: core.Input, args: ['custom-size',] }],
            sizeApiUri: [{ type: core.Input }]
        };
        return CustomDatagridSizeDirective;
    }());

    var FarrisFilterBindingDirective = /** @class */ (function () {
        function FarrisFilterBindingDirective(injector, frameContext, filterComponent) {
            this.injector = injector;
            this.frameContext = frameContext;
            this.filterComponent = filterComponent;
            /**
             * 变量编号，默认为filterConditionList
             */
            this.variableCode = 'filterConditionList';
            this.$destroy = new rxjs.Subject();
        }
        FarrisFilterBindingDirective.prototype.ngOnDestroy = function () {
            if (this.$destroy) {
                this.$destroy.next();
                this.$destroy.complete();
            }
        };
        FarrisFilterBindingDirective.prototype.ngOnInit = function () {
            var _this = this;
            if (this.filterComponent) {
                this.filterComponent.conditionsChange.pipe(operators.takeUntil(this.$destroy)).subscribe(function (event) {
                    var _a = (event || {}).data, data = _a === void 0 ? '[]' : _a;
                    _this.setConditions(data);
                });
            }
        };
        FarrisFilterBindingDirective.prototype.setConditions = function (conditions) {
            this.frameContext.uiState.setPropertyValue(this.variableCode, conditions);
        };
        FarrisFilterBindingDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[farris-filter-binding]'
                    },] }
        ];
        /** @nocollapse */
        FarrisFilterBindingDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: devkit.FrameContext },
                { type: uiFilter.FilterComponent, decorators: [{ type: core.Optional }] }
            ];
        };
        FarrisFilterBindingDirective.propDecorators = {
            variableCode: [{ type: core.Input, args: ['variableCode',] }]
        };
        return FarrisFilterBindingDirective;
    }());

    var FarrisListFilterBindingDirective = /** @class */ (function () {
        function FarrisListFilterBindingDirective(injector, frameContext, listFilterComponent) {
            this.injector = injector;
            this.frameContext = frameContext;
            this.listFilterComponent = listFilterComponent;
            /**
             * 变量编号，默认为filterConditionList
             */
            this.variableCode = 'filterConditionList';
            this.$destroy = new rxjs.Subject();
        }
        FarrisListFilterBindingDirective.prototype.ngOnDestroy = function () {
            if (this.$destroy) {
                this.$destroy.next();
                this.$destroy.complete();
            }
        };
        FarrisListFilterBindingDirective.prototype.ngOnInit = function () {
            var _this = this;
            if (this.listFilterComponent) {
                this.listFilterComponent.conditionsChange.pipe(operators.takeUntil(this.$destroy)).subscribe(function (event) {
                    var _a = (event || {}).data, data = _a === void 0 ? '[]' : _a;
                    _this.setConditions(data);
                });
            }
        };
        FarrisListFilterBindingDirective.prototype.setConditions = function (conditions) {
            this.frameContext.uiState.setPropertyValue(this.variableCode, conditions);
        };
        FarrisListFilterBindingDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[farris-list-filter-binding]'
                    },] }
        ];
        /** @nocollapse */
        FarrisListFilterBindingDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: devkit.FrameContext },
                { type: uiListFilter.ListFilterComponent, decorators: [{ type: core.Optional }] }
            ];
        };
        FarrisListFilterBindingDirective.propDecorators = {
            variableCode: [{ type: core.Input, args: ['variableCode',] }]
        };
        return FarrisListFilterBindingDirective;
    }());

    var ImageIdToUrlPipe = /** @class */ (function () {
        function ImageIdToUrlPipe(injector) {
            this.injector = injector;
            this.defaultPic = rtf.BasePathService.convertPath('/platform/common/web/assets/imgs/no-pic.png');
            this.downloadService = this.injector && this.injector.get(formdocUpload.DownloadService, null) || null;
        }
        ImageIdToUrlPipe.prototype.transform = function (value, rootId) {
            if (rootId === void 0) {
                rootId = 'default-root';
            }
            if (!value) {
                return this.defaultPic;
            }
            //const rootId = 'default-root';
            if (this.downloadService) {
                return this.downloadService.getDownloadUrl(value, rootId);
            }
            else {
                console.warn('因安全问题，附件下载提供安全校验机制，附件下载功能需重新编译。');
                return rtf.BasePathService.convertPath("/api/runtime/dfs/v1.0/formdoc/download/" + value);
            }
        };
        ImageIdToUrlPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'imageIdToUrl' },] }
        ];
        /** @nocollapse */
        ImageIdToUrlPipe.ctorParameters = function () {
            return [
                { type: core.Injector, decorators: [{ type: core.Optional }] }
            ];
        };
        return ImageIdToUrlPipe;
    }());

    var FormatPrimeNgTreeTableCellData = /** @class */ (function () {
        function FormatPrimeNgTreeTableCellData(cfs, injector) {
            this.cfs = cfs;
            this.injector = injector;
            if (this.injector) {
                this.localeService = this.injector.get(uiLocale.LocaleService);
            }
        }
        FormatPrimeNgTreeTableCellData.prototype.transform = function (col, rowData) {
            var value = '';
            if (rowData && col && col.field) {
                value = this.getValue(col.field, rowData);
                var formatterFn = col.formatter;
                if (!formatterFn) {
                    if (col.isMultilingualField) {
                        return this.getMultiLanguageValue(value);
                    }
                    else {
                        return value;
                    }
                }
                else {
                    return this.cfs.format(value, rowData, formatterFn);
                }
            }
            return '';
        };
        // 获取多语数据
        FormatPrimeNgTreeTableCellData.prototype.getMultiLanguageValue = function (valObj) {
            if (valObj && typeof valObj === 'object' && Object.keys(valObj).length > 0) {
                var localeId = this.localeService && this.localeService.localeId || 'zh-CHS';
                var value = valObj[localeId];
                return value === undefined ? '' : value;
            }
            else {
                return '';
            }
        };
        FormatPrimeNgTreeTableCellData.prototype.getValue = function (path, target) {
            if (!target) {
                return '';
            }
            var resultVal = '';
            if (path.indexOf('.') === -1) {
                resultVal = target[path];
            }
            else {
                resultVal = path.split('.').reduce((function (obj, key) {
                    return obj && obj[key] || null;
                }), target);
            }
            return resultVal;
        };
        /**
         * 是否为帮助列
         * @param col col
         */
        FormatPrimeNgTreeTableCellData.prototype.isHelpColumn = function (col) {
            return col && col.editor && col.editor.options && col.editor.options.type === 'EditorTypes.LOOKUP' || false;
        };
        FormatPrimeNgTreeTableCellData.prototype.getHelpColumnValue = function (col, data) {
            var textField = this.getHelpControlTextField(col);
            var mapFields = this.getHelpControlMapFields(col);
            if (textField && mapFields && Object.keys(mapFields).length > 0) {
                var path = mapFields[textField];
                return this.getValue(path, data);
            }
            return '';
        };
        FormatPrimeNgTreeTableCellData.prototype.getHelpControlTextField = function (col) {
            return col && col.editor && col.editor.options && col.editor.options.textField || '';
        };
        FormatPrimeNgTreeTableCellData.prototype.getHelpControlMapFields = function (col) {
            return col && col.editor && col.editor.options && col.editor.options.mapFields || {};
        };
        FormatPrimeNgTreeTableCellData.decorators = [
            { type: core.Pipe, args: [{ name: 'formatPrimeNgTreeTableCellData', pure: false },] }
        ];
        /** @nocollapse */
        FormatPrimeNgTreeTableCellData.ctorParameters = function () {
            return [
                { type: column.ColumnFormatService },
                { type: core.Injector, decorators: [{ type: core.Optional }] }
            ];
        };
        return FormatPrimeNgTreeTableCellData;
    }());

    var Localization = /** @class */ (function () {
        function Localization(injector, userSettings) {
            this.injector = injector;
            this.userSettings = userSettings;
        }
        Localization.prototype.transform = function (value, dataType) {
            if (dataType) {
                dataType = dataType.toLowerCase();
                if (dataType === 'date') {
                    return this.transformDate(value);
                }
                else if (dataType === 'datetime') {
                    return this.transformDateTime(value);
                }
                else if (dataType === 'number') {
                    return this.transformNumber(value);
                }
                else {
                    return value;
                }
            }
        };
        /**
         * 转换日期
         * @param value value
         */
        Localization.prototype.transformDate = function (value) {
            var dateFormat = this.userSettings && this.userSettings.dateFormat || null;
            if (!dateFormat || !value) {
                return value;
            }
            var date$$1 = moment(value);
            var isValid = date$$1.isValid();
            if (!isValid) {
                return value;
            }
            dateFormat = this.parseDateFormat(dateFormat);
            return date$$1.format(dateFormat);
        };
        /**
         * 转换日期时间
         * @param value value
         * todo: 目前无法定义日期时间格式
         */
        Localization.prototype.transformDateTime = function (value) {
            var dateFormat = this.userSettings && this.userSettings.dateFormat || '';
            var timeFormat = this.userSettings && this.userSettings.timeFormat || '';
            var dateTime = moment(value);
            var isValid = dateTime.isValid();
            if (!isValid) {
                return value;
            }
            if (dateFormat) {
                dateFormat = this.parseDateFormat(dateFormat);
            }
            if (timeFormat) {
                timeFormat = this.parseTimeFormat(timeFormat);
            }
            var dateTimeFormat = dateFormat + ' ' + timeFormat;
            return dateTime.format(dateTimeFormat);
        };
        /**
         * 转换数字
         * @param value value
         */
        Localization.prototype.transformNumber = function (value) {
            if (value === null || value === undefined || value === '') {
                return '';
            }
            var bigNumber = new bignumber_js.BigNumber(value);
            // 如果不是数字，不做任何处理
            if (!bignumber_js.BigNumber.isBigNumber(bigNumber)) {
                return value;
            }
            var isNegative = bigNumber.isNegative();
            var format = this.buildNumberFormat();
            var _a = this.numberFormat, _b = _a.negativeSign, negativeSign = _b === void 0 ? null : _b, _c = _a.numberDecimalDigits, numberDecimalDigits = _c === void 0 ? null : _c;
            if (isNegative) {
                if (negativeSign !== null) {
                    format.prefix = negativeSign;
                    return bigNumber.absoluteValue().toFormat(numberDecimalDigits, null, format);
                }
            }
            return bigNumber.toFormat(numberDecimalDigits, null, format);
        };
        /**
         * 转换日期格式规则为moment的format规则
         * @param format format
         */
        Localization.prototype.parseDateFormat = function (format) {
            return format.replace(/y/g, 'Y').replace(/d/g, 'D');
        };
        /**
         * 转换时间格式规则为moment的format规则
         * @param format format
         */
        Localization.prototype.parseTimeFormat = function (format) {
            return format.replace(/M/g, 'm');
        };
        /**
         * 构造bignumber数字格式化选项
         */
        Localization.prototype.buildNumberFormat = function () {
            if (this.numberFormat) {
                var _a = this.numberFormat, _b = _a.numberDecimalSeparator, numberDecimalSeparator = _b === void 0 ? null : _b, _c = _a.numberGroupSeparator, numberGroupSeparator = _c === void 0 ? null : _c;
                var format = {
                    groupSize: 3,
                };
                if (numberDecimalSeparator !== null) {
                    format.decimalSeparator = numberDecimalSeparator;
                }
                if (numberGroupSeparator !== null) {
                    format.groupSeparator = numberGroupSeparator;
                }
                return format;
            }
        };
        Object.defineProperty(Localization.prototype, "numberFormat", {
            get: function () {
                return this.userSettings && this.userSettings.numberFormat || null;
            },
            enumerable: true,
            configurable: true
        });
        Localization.decorators = [
            { type: core.Pipe, args: [{ name: 'localization' },] }
        ];
        /** @nocollapse */
        Localization.ctorParameters = function () {
            return [
                { type: core.Injector, decorators: [{ type: core.Optional }] },
                { type: undefined, decorators: [{ type: core.Inject, args: [devkit.UserSettingsToken,] }] }
            ];
        };
        return Localization;
    }());

    var KendoBindingModule = /** @class */ (function () {
        function KendoBindingModule() {
        }
        KendoBindingModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            uiCommon.FarrisCommonModule.forRoot()
                        ],
                        declarations: [
                            KendoGridBindingDirective,
                            FarrisTreeTableBindingDirective,
                            LookupDataMappingDirective,
                            LookupEnableExtendLoadMethodDirective,
                            UIStateBindingDirective,
                            FarrisDisabledDirective,
                            FarrisSortDirective,
                            FarrisDynamicColumnFormatDirective,
                            FarrisEditEnterDirective,
                            FarrisTextareaEditDirective,
                            FarrisTreeTableFormatDirective,
                            StringToDatePipe,
                            GridColumnAggregateDirective,
                            GridSummaryDirective,
                            DateFormatPlaceholderPipe,
                            ImageIdToUrlPipe,
                            FormatPrimeNgTreeTableCellData,
                            FarrisDatagridUseBindingDataDirective,
                            MultiSelectDataMappingDirective,
                            FarrisListViewBindingDirective,
                            EditableDirective,
                            KendoGridFilterDirective,
                            FormatTotalPipe,
                            InputEndEditDirective,
                            FarrisDataGridEndEditDirective,
                            HtmlEditorEndEditDirective,
                            KendoGridEndEditDirective,
                            FarrisDataGridRemoteSummaryDirective,
                            FarrisFilePreviewBindingDirective,
                            FarrisSetFocusDirective,
                            FarrisDiscussionEditorBindingDirective,
                            FarrisDiscussionListBindingDirective,
                            FarrisPrimengTreeTableBindingDirective,
                            FarrisDynamicRequiredDirective,
                            FarrisEditorDirective,
                            FarrisQuerySolutionEventBindDirective,
                            FarrisDateLocalizationDirective,
                            FarrisNumberLocalizationDirective,
                            FarrisTimeLocalizationDirective,
                            FarrisTextLocalizationDirective,
                            Localization,
                            FarrisCheckboxModificationDirective,
                            FarrisLabelModificationDirective,
                            FarrisLookupBindingDirective,
                            ListNavComponentRefDirective,
                            ListViewComponentRefDirective,
                            ListFilterComponentRefDirective,
                            ViewChangeComponentRefDirective,
                            FilterComponentRefDirective,
                            SectionComponentRefDirective,
                            HtmlEditorComponentRefDirective,
                            InputGroupComponentRefDirective,
                            DatepickerComponentRefDirective,
                            TimePickerComponentRefDirective,
                            NumberSpinnerComponentRefDirective,
                            ComboListComponentRefDirective,
                            ComboLookupComponentRefDirective,
                            LookupGridComponentRefDirective,
                            DatagridComponentRefDirective,
                            TreetableComponentRefDirective,
                            WizardComponentRefDirective,
                            DiscussionEditorComponentRefDirective,
                            DiscussionListComponentRefDirective,
                            NavComponentRefDirective,
                            MultiSelectComponentRefDirective,
                            ScrollspyComponentRefDirective,
                            ComboLookupDataMappingDirective,
                            AppointmentCalendarBindingDirective,
                            CustomDatagridSizeDirective,
                            FarrisFilterBindingDirective,
                            FarrisListFilterBindingDirective
                        ],
                        providers: [
                            uiDialog.DialogService, kendoAngularGrid.GridComponent, FarrisKendoGridFormatService, FarrisTreetableFormatService
                        ],
                        exports: [
                            KendoGridBindingDirective,
                            FarrisTreeTableBindingDirective,
                            LookupDataMappingDirective,
                            LookupEnableExtendLoadMethodDirective,
                            UIStateBindingDirective,
                            FarrisDisabledDirective,
                            FarrisSortDirective,
                            FarrisDynamicColumnFormatDirective,
                            FarrisEditEnterDirective,
                            FarrisTextareaEditDirective,
                            FarrisTreeTableFormatDirective,
                            StringToDatePipe,
                            GridColumnAggregateDirective,
                            DateFormatPlaceholderPipe,
                            ImageIdToUrlPipe,
                            FormatPrimeNgTreeTableCellData,
                            FarrisDatagridUseBindingDataDirective,
                            MultiSelectDataMappingDirective,
                            FarrisListViewBindingDirective,
                            EditableDirective,
                            KendoGridFilterDirective,
                            FormatTotalPipe,
                            InputEndEditDirective,
                            FarrisDataGridEndEditDirective,
                            HtmlEditorEndEditDirective,
                            KendoGridEndEditDirective,
                            FarrisDataGridRemoteSummaryDirective,
                            FarrisFilePreviewBindingDirective,
                            FarrisSetFocusDirective,
                            FarrisDiscussionEditorBindingDirective,
                            FarrisDiscussionListBindingDirective,
                            FarrisPrimengTreeTableBindingDirective,
                            FarrisDynamicRequiredDirective,
                            FarrisEditorDirective,
                            FarrisQuerySolutionEventBindDirective,
                            FarrisDateLocalizationDirective,
                            FarrisNumberLocalizationDirective,
                            FarrisTimeLocalizationDirective,
                            FarrisTextLocalizationDirective,
                            Localization,
                            FarrisCheckboxModificationDirective,
                            FarrisLabelModificationDirective,
                            FarrisLookupBindingDirective,
                            ListNavComponentRefDirective,
                            ListViewComponentRefDirective,
                            ListFilterComponentRefDirective,
                            ViewChangeComponentRefDirective,
                            FilterComponentRefDirective,
                            SectionComponentRefDirective,
                            HtmlEditorComponentRefDirective,
                            InputGroupComponentRefDirective,
                            DatepickerComponentRefDirective,
                            TimePickerComponentRefDirective,
                            NumberSpinnerComponentRefDirective,
                            ComboListComponentRefDirective,
                            ComboLookupComponentRefDirective,
                            LookupGridComponentRefDirective,
                            DatagridComponentRefDirective,
                            TreetableComponentRefDirective,
                            WizardComponentRefDirective,
                            DiscussionEditorComponentRefDirective,
                            DiscussionListComponentRefDirective,
                            NavComponentRefDirective,
                            MultiSelectComponentRefDirective,
                            ScrollspyComponentRefDirective,
                            ComboLookupDataMappingDirective,
                            AppointmentCalendarBindingDirective,
                            CustomDatagridSizeDirective,
                            FarrisFilterBindingDirective,
                            FarrisListFilterBindingDirective
                        ]
                    },] }
        ];
        return KendoBindingModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ɵc = ComponentRef;
    exports.ɵa = DataMapping;
    exports.ɵb = AbstractEndEdit;
    exports.ArrayConverter = ArrayConverter;
    exports.DateConverter = DateConverter;
    exports.MultiLangConverter = MultiLangConverter;
    exports.FilterConditionsConverter = FilterConditionsConverter;
    exports.KendoGridBindingDirective = KendoGridBindingDirective;
    exports.FarrisTreeTableBindingDirective = FarrisTreeTableBindingDirective;
    exports.LookupDataMappingDirective = LookupDataMappingDirective;
    exports.LookupEnableExtendLoadMethodDirective = LookupEnableExtendLoadMethodDirective;
    exports.UIStateBindingDirective = UIStateBindingDirective;
    exports.FarrisDisabledDirective = FarrisDisabledDirective;
    exports.FarrisSortDirective = FarrisSortDirective;
    exports.FarrisTextareaEditDirective = FarrisTextareaEditDirective;
    exports.FarrisDynamicColumnFormatDirective = FarrisDynamicColumnFormatDirective;
    exports.FarrisEditEnterDirective = FarrisEditEnterDirective;
    exports.FarrisTreeTableFormatDirective = FarrisTreeTableFormatDirective;
    exports.GridColumnAggregateDirective = GridColumnAggregateDirective;
    exports.GridSummaryDirective = GridSummaryDirective;
    exports.FarrisDatagridUseBindingDataDirective = FarrisDatagridUseBindingDataDirective;
    exports.MultiSelectDataMappingDirective = MultiSelectDataMappingDirective;
    exports.FarrisListViewBindingDirective = FarrisListViewBindingDirective;
    exports.EditableDirective = EditableDirective;
    exports.InputEndEditDirective = InputEndEditDirective;
    exports.FarrisDataGridEndEditDirective = FarrisDataGridEndEditDirective;
    exports.HtmlEditorEndEditDirective = HtmlEditorEndEditDirective;
    exports.KendoGridEndEditDirective = KendoGridEndEditDirective;
    exports.FarrisDataGridRemoteSummaryDirective = FarrisDataGridRemoteSummaryDirective;
    exports.FarrisSetFocusDirective = FarrisSetFocusDirective;
    exports.FarrisFilePreviewBindingDirective = FarrisFilePreviewBindingDirective;
    exports.FarrisDiscussionEditorBindingDirective = FarrisDiscussionEditorBindingDirective;
    exports.FarrisDiscussionListBindingDirective = FarrisDiscussionListBindingDirective;
    exports.FarrisPrimengTreeTableBindingDirective = FarrisPrimengTreeTableBindingDirective;
    exports.FarrisDynamicRequiredDirective = FarrisDynamicRequiredDirective;
    exports.FarrisEditorDirective = FarrisEditorDirective;
    exports.FarrisQuerySolutionEventBindDirective = FarrisQuerySolutionEventBindDirective;
    exports.FarrisDateLocalizationDirective = FarrisDateLocalizationDirective;
    exports.FarrisNumberLocalizationDirective = FarrisNumberLocalizationDirective;
    exports.FarrisTimeLocalizationDirective = FarrisTimeLocalizationDirective;
    exports.FarrisTextLocalizationDirective = FarrisTextLocalizationDirective;
    exports.FarrisCheckboxModificationDirective = FarrisCheckboxModificationDirective;
    exports.FarrisLabelModificationDirective = FarrisLabelModificationDirective;
    exports.FarrisLookupBindingDirective = FarrisLookupBindingDirective;
    exports.ListNavComponentRefDirective = ListNavComponentRefDirective;
    exports.ListViewComponentRefDirective = ListViewComponentRefDirective;
    exports.ListFilterComponentRefDirective = ListFilterComponentRefDirective;
    exports.FilterComponentRefDirective = FilterComponentRefDirective;
    exports.ViewChangeComponentRefDirective = ViewChangeComponentRefDirective;
    exports.HtmlEditorComponentRefDirective = HtmlEditorComponentRefDirective;
    exports.SectionComponentRefDirective = SectionComponentRefDirective;
    exports.InputGroupComponentRefDirective = InputGroupComponentRefDirective;
    exports.DatepickerComponentRefDirective = DatepickerComponentRefDirective;
    exports.TimePickerComponentRefDirective = TimePickerComponentRefDirective;
    exports.NumberSpinnerComponentRefDirective = NumberSpinnerComponentRefDirective;
    exports.ComboListComponentRefDirective = ComboListComponentRefDirective;
    exports.ComboLookupComponentRefDirective = ComboLookupComponentRefDirective;
    exports.LookupGridComponentRefDirective = LookupGridComponentRefDirective;
    exports.DatagridComponentRefDirective = DatagridComponentRefDirective;
    exports.TreetableComponentRefDirective = TreetableComponentRefDirective;
    exports.WizardComponentRefDirective = WizardComponentRefDirective;
    exports.DiscussionEditorComponentRefDirective = DiscussionEditorComponentRefDirective;
    exports.DiscussionListComponentRefDirective = DiscussionListComponentRefDirective;
    exports.NavComponentRefDirective = NavComponentRefDirective;
    exports.MultiSelectComponentRefDirective = MultiSelectComponentRefDirective;
    exports.ScrollspyComponentRefDirective = ScrollspyComponentRefDirective;
    exports.ComboLookupDataMappingDirective = ComboLookupDataMappingDirective;
    exports.AppointmentCalendarBindingDirective = AppointmentCalendarBindingDirective;
    exports.CustomDatagridSizeDirective = CustomDatagridSizeDirective;
    exports.FarrisFilterBindingDirective = FarrisFilterBindingDirective;
    exports.FarrisListFilterBindingDirective = FarrisListFilterBindingDirective;
    exports.ImageIdToUrlPipe = ImageIdToUrlPipe;
    exports.FormatPrimeNgTreeTableCellData = FormatPrimeNgTreeTableCellData;
    exports.Localization = Localization;
    exports.FarrisKendoGridFormatService = FarrisKendoGridFormatService;
    exports.FarrisTreetableFormatService = FarrisTreetableFormatService;
    exports.StringToDatePipe = StringToDatePipe;
    exports.KendoGridFilterDirective = KendoGridFilterDirective;
    exports.DateFormatPlaceholderPipe = DateFormatPlaceholderPipe;
    exports.FormatTotalPipe = FormatTotalPipe;
    exports.KendoBindingModule = KendoBindingModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=farris-kendo-binding.umd.js.map