import * as tslib_1 from "tslib";
import { Directive, Input, Self, Host, Optional, Output, EventEmitter } from '@angular/core';
import { MultiSelectComponent } from '@farris/ui-multi-select';
import { ViewModel } from '@farris/devkit';
var MultiSelectDataMappingDirective = /** @class */ (function () {
    function MultiSelectDataMappingDirective(vm, multiSelectComponent) {
        var _this_1 = this;
        this.vm = vm;
        this.multiSelectComponent = multiSelectComponent;
        this.selectedIdChanged = new EventEmitter();
        this.vm.uiState.changes.subscribe(function (data) {
            _this_1.selectedId = data.value;
        });
    }
    MultiSelectDataMappingDirective.prototype.ngOnInit = function () {
        var _this_1 = this;
        this.multiSelectComponent.dataSource = [];
        if (Array.isArray(this.dataSource)) {
            this.multiSelectComponent.dataSource = this.dataSource;
            this.originalDataSource = this.dataSource;
        }
        else if (this.dataSource && this.dataSource.changes) {
            this.dataSource.changes.subscribe(function (data) {
                if (data.type === 'Load') {
                    _this_1.originalDataSource = data.value;
                    if (_this_1.multiSelectComponent.isTree()) {
                        if (_this_1.fjmField) {
                            // 分级码加载树结构
                            _this_1.multiSelectComponent.dataSource = _this_1.plainToTree(data.value, _this_1.fjmField, 1);
                        }
                        else if (_this_1.fjdField) {
                            // 父节点加载树结构
                            _this_1.multiSelectComponent.dataSource = _this_1.buildTreeNodesByFjd(data.value, _this_1.fjdField);
                        }
                        _this_1.multiSelectComponent.selections = _this_1.getTreeSelectionsById(_this_1.selectedId, _this_1.originalDataSource);
                    }
                    else {
                        _this_1.multiSelectComponent.dataSource = data.value;
                        _this_1.multiSelectComponent.selections = _this_1.getListSelectionsById(_this_1.selectedId, _this_1.multiSelectComponent.dataSource);
                    }
                }
            });
        }
        this.selectIdBindingToUIStateField();
    };
    MultiSelectDataMappingDirective.prototype.selectIdBindingToUIStateField = function () {
        var _this_1 = this;
        if (this.multiSelectComponent && this.multiSelectComponent.selectedIdChange) {
            this.multiSelectComponent.selectedIdChange.subscribe(function (data) {
                _this_1.selectedIdChanged.emit(data);
            });
        }
    };
    /**
     *
     * @param data 需要格式化的数据
     */
    MultiSelectDataMappingDirective.prototype.formatDataSource = function (data, field) {
        var _this_1 = this;
        if (!data || !data.length) {
            return [];
        }
        return data.map(function (item) {
            var _a;
            var n = item['toJSON'] ? item.toJSON() : item;
            return {
                data: Object.assign(tslib_1.__assign({}, n), (_a = {},
                    _a["" + _this_1.idField] = item[_this_1.idField],
                    _a["" + _this_1.textField] = item[_this_1.textField],
                    _a["" + _this_1.valueField] = item[_this_1.valueField],
                    _a["" + field] = item[field],
                    _a)),
                children: []
            };
        });
    };
    /**
     * 把平行结构的数据转换成树形结构
     * @param plainSource
     * @param field
     * @param layer
     */
    MultiSelectDataMappingDirective.prototype.plainToTree = function (plainSource, field, layer) {
        var treeSource = this.formatDataSource(plainSource, field);
        if (!treeSource.length) {
            return [];
        }
        if (!treeSource[0]['data'][field]) {
            return [];
        }
        var parents = treeSource.filter(function (item) {
            return item['data'][field]['layer'] === layer;
        });
        this.recursive(parents, treeSource, field, 1);
        return parents;
    };
    /**
     * 递归遍历树形结构
     * @param parents
     * @param treeSource
     * @param field
     * @param layer
     */
    MultiSelectDataMappingDirective.prototype.recursive = function (parents, treeSource, field, layer) {
        var _this_1 = this;
        parents.forEach(function (parent) {
            var parentPath = parent['data'][field]['path'];
            var parentLayer = parent['data'][field]['layer'];
            if (parent['data'][field]['isDetail'] === false) {
                treeSource.forEach(function (item) {
                    if (item && item['data'] && item['data'][field] && item['data'][field]['path']) {
                        var itemPath = item['data'][field]['path'];
                        var itemLayer = item['data'][field]['layer'];
                        var targetPath = void 0;
                        if (itemPath && itemPath.length > parentPath.length) {
                            targetPath = itemPath.substr(0, Number(layer) * 4);
                        }
                        if (parentPath === targetPath && parentLayer === itemLayer - 1) {
                            parent['children'].push(item);
                        }
                        if (item['data'][field]['isDetail'] === false && parentPath === targetPath) {
                            _this_1.recursive([item], treeSource, field, Number(layer) + 1);
                        }
                    }
                });
            }
        });
    };
    /**
       *
       * @param ids 选中数据的id
       * @param dataSource 原始数据
       */
    MultiSelectDataMappingDirective.prototype.getListSelectionsById = function (ids, dataSource) {
        var result = [];
        var _this = this;
        if ((typeof ids === 'string' && !!ids) || typeof ids === 'number') {
            var reusltObj = dataSource.find(function (item) {
                return item && item[_this.idField] === ids;
            });
            if (reusltObj) {
                result.push(reusltObj);
            }
        }
        else if (Array.isArray(ids)) {
            if (dataSource) {
                ids.forEach(function (id) {
                    var item = dataSource.find(function (item) { return item && item[_this.idField] === id; });
                    if (item) {
                        result.push(item);
                    }
                });
                // dataSource.forEach(item => {
                //   ids.forEach(id => {
                //     if (item[_this.idField] === id) {
                //       result.push(item);
                //     }
                //   })
                // })
            }
            else {
                result = [];
            }
        }
        else {
            result = [];
        }
        return result;
    };
    /**
     *
     * @param ids 选中数据的id
     * @param dataSource 原始数据
     */
    MultiSelectDataMappingDirective.prototype.getTreeSelectionsById = function (ids, dataSource) {
        var result = [];
        var _this = this;
        if ((typeof ids === 'string' && !!ids) || typeof ids === 'number') {
            var reusltObj = dataSource.find(function (item) {
                return item && item[_this.idField] === ids;
            });
            if (reusltObj) {
                result.push(reusltObj);
            }
        }
        else if (Array.isArray(ids)) {
            if (dataSource) {
                ids.forEach(function (id) {
                    var item = dataSource.find(function (item) { return item && item[_this.idField] === id; });
                    if (item) {
                        result.push(item);
                    }
                });
                // dataSource.forEach(item => {
                //   ids.forEach(id => {
                //     if (item.data[_this.idField] === id) {
                //       result.push(item.data);
                //     }
                //   })
                // })
            }
            else {
                result = [];
            }
        }
        else {
            result = [];
        }
        return result;
    };
    /**
     * 根据父节点初始化树结构
     * @param bindingObjects
     */
    MultiSelectDataMappingDirective.prototype.buildTreeNodesByFjd = function (bindingObjects, field) {
        var _this_1 = this;
        var treeData = this.formatDataSource(bindingObjects, field);
        treeData.forEach(function (item) {
            var parent = treeData.find(function (ele) { return item.data[field].parentElement === ele.data[_this_1.idField]; });
            if (parent) {
                parent.children.push(item);
            }
        });
        return treeData.filter(function (ele) { return !ele.data[field].parentElement; });
    };
    MultiSelectDataMappingDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[multiSelectDataMapping]'
                },] }
    ];
    /** @nocollapse */
    MultiSelectDataMappingDirective.ctorParameters = function () { return [
        { type: ViewModel, decorators: [{ type: Optional }] },
        { type: MultiSelectComponent, decorators: [{ type: Host }, { type: Self }, { type: Optional }] }
    ]; };
    MultiSelectDataMappingDirective.propDecorators = {
        dataSource: [{ type: Input }],
        idField: [{ type: Input }],
        textField: [{ type: Input }],
        valueField: [{ type: Input }],
        fjmField: [{ type: Input }],
        fjdField: [{ type: Input }],
        uiStateField: [{ type: Input }],
        selectedId: [{ type: Input }],
        selectedIdChanged: [{ type: Output }]
    };
    return MultiSelectDataMappingDirective;
}());
export { MultiSelectDataMappingDirective };
//# sourceMappingURL=data:application/json;base64,