import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';
import { GridComponent } from '@progress/kendo-angular-grid';
var FarrisDisabledDirective = /** @class */ (function () {
    function FarrisDisabledDirective(grid, el, renderer) {
        this.grid = grid;
        this.el = el;
        this.renderer = renderer;
    }
    FarrisDisabledDirective.prototype.ngOnInit = function () {
    };
    FarrisDisabledDirective.prototype.ngOnChanges = function (changes) {
        if (!this.maskElement) {
            this.createMaskElement();
        }
        if (changes['kendoGridDisabled'] && this.maskElement) {
            if (this.kendoGridDisabled) {
                this.renderer.removeStyle(this.maskElement, 'display');
            }
            else {
                this.renderer.setStyle(this.maskElement, 'display', 'none');
            }
        }
    };
    FarrisDisabledDirective.prototype.createMaskElement = function () {
        this.maskElement = this.renderer.createElement("div");
        this.renderer.setStyle(this.maskElement, 'width', '100%');
        this.renderer.setStyle(this.maskElement, 'height', '100%');
        this.renderer.setStyle(this.maskElement, 'position', 'absolute');
        this.renderer.setStyle(this.maskElement, 'background-color', 'rgba(255,255,255,0.5)');
        this.renderer.setStyle(this.maskElement, 'z-index', '3');
        this.renderer.setStyle(this.maskElement, 'display', 'none');
        this.renderer.appendChild(this.el.nativeElement, this.maskElement);
    };
    FarrisDisabledDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farrisDisabled]'
                },] }
    ];
    /** @nocollapse */
    FarrisDisabledDirective.ctorParameters = function () { return [
        { type: GridComponent },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    FarrisDisabledDirective.propDecorators = {
        kendoGridDisabled: [{ type: Input, args: ['farrisDisabled',] }]
    };
    return FarrisDisabledDirective;
}());
export { FarrisDisabledDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFycmlzLWtlbmRvZ3JpZC1kaXNhYmxlZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2tlbmRvLWJpbmRpbmcvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9mYXJyaXMta2VuZG9ncmlkLWRpc2FibGVkLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFvQyxNQUFNLGVBQWUsQ0FBQztBQUMxRyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDN0Q7SUFNSSxpQ0FBb0IsSUFBbUIsRUFBVSxFQUFjLEVBQVUsUUFBbUI7UUFBeEUsU0FBSSxHQUFKLElBQUksQ0FBZTtRQUFVLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFXO0lBRTVGLENBQUM7SUFDRCwwQ0FBUSxHQUFSO0lBRUEsQ0FBQztJQUNELDZDQUFXLEdBQVgsVUFBWSxPQUFzQjtRQUM5QixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNuQixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztTQUM1QjtRQUNELElBQUksT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNsRCxJQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtnQkFDeEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQzthQUMxRDtpQkFBTTtnQkFDSCxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQzthQUMvRDtTQUNKO0lBQ0wsQ0FBQztJQUNPLG1EQUFpQixHQUF6QjtRQUNJLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDMUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDM0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDakUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxrQkFBa0IsRUFBRSx1QkFBdUIsQ0FBQyxDQUFDO1FBQ3RGLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzVELElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN2RSxDQUFDOztnQkFqQ0osU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxrQkFBa0I7aUJBQy9COzs7O2dCQUhRLGFBQWE7Z0JBREYsVUFBVTtnQkFBUyxTQUFTOzs7b0NBTTNDLEtBQUssU0FBQyxnQkFBZ0I7O0lBOEIzQiw4QkFBQztDQUFBLEFBbENELElBa0NDO1NBL0JZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5wdXQsIFJlbmRlcmVyMiwgT25Jbml0LCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgR3JpZENvbXBvbmVudCB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1hbmd1bGFyLWdyaWQnO1xyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW2ZhcnJpc0Rpc2FibGVkXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIEZhcnJpc0Rpc2FibGVkRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xyXG4gICAgQElucHV0KCdmYXJyaXNEaXNhYmxlZCcpIGtlbmRvR3JpZERpc2FibGVkOiBib29sZWFuO1xyXG4gICAgbWFza0VsZW1lbnQ6IGFueTtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZ3JpZDogR3JpZENvbXBvbmVudCwgcHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7XHJcblxyXG4gICAgfVxyXG4gICAgbmdPbkluaXQoKSB7XHJcblxyXG4gICAgfVxyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xyXG4gICAgICAgIGlmICghdGhpcy5tYXNrRWxlbWVudCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZU1hc2tFbGVtZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjaGFuZ2VzWydrZW5kb0dyaWREaXNhYmxlZCddICYmIHRoaXMubWFza0VsZW1lbnQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMua2VuZG9HcmlkRGlzYWJsZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlU3R5bGUodGhpcy5tYXNrRWxlbWVudCwgJ2Rpc3BsYXknKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5tYXNrRWxlbWVudCwgJ2Rpc3BsYXknLCAnbm9uZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBjcmVhdGVNYXNrRWxlbWVudCgpIHtcclxuICAgICAgICB0aGlzLm1hc2tFbGVtZW50ID0gdGhpcy5yZW5kZXJlci5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5tYXNrRWxlbWVudCwgJ3dpZHRoJywgJzEwMCUnKTtcclxuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMubWFza0VsZW1lbnQsICdoZWlnaHQnLCAnMTAwJScpO1xyXG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5tYXNrRWxlbWVudCwgJ3Bvc2l0aW9uJywgJ2Fic29sdXRlJyk7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLm1hc2tFbGVtZW50LCAnYmFja2dyb3VuZC1jb2xvcicsICdyZ2JhKDI1NSwyNTUsMjU1LDAuNSknKTtcclxuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMubWFza0VsZW1lbnQsICd6LWluZGV4JywgJzMnKTtcclxuICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMubWFza0VsZW1lbnQsICdkaXNwbGF5JywgJ25vbmUnKTtcclxuICAgICAgICB0aGlzLnJlbmRlcmVyLmFwcGVuZENoaWxkKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgdGhpcy5tYXNrRWxlbWVudCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbiJdfQ==