import { Directive, Injector, Input, Optional } from '@angular/core';
import { FrameContext } from '@farris/devkit';
import { ListFilterComponent } from '@farris/ui-list-filter';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
var FarrisListFilterBindingDirective = /** @class */ (function () {
    function FarrisListFilterBindingDirective(injector, frameContext, listFilterComponent) {
        this.injector = injector;
        this.frameContext = frameContext;
        this.listFilterComponent = listFilterComponent;
        /**
         * 变量编号，默认为filterConditionList
         */
        this.variableCode = 'filterConditionList';
        this.$destroy = new Subject();
    }
    FarrisListFilterBindingDirective.prototype.ngOnDestroy = function () {
        if (this.$destroy) {
            this.$destroy.next();
            this.$destroy.complete();
        }
    };
    FarrisListFilterBindingDirective.prototype.ngOnInit = function () {
        var _this = this;
        if (this.listFilterComponent) {
            this.listFilterComponent.conditionsChange.pipe(takeUntil(this.$destroy)).subscribe(function (event) {
                var _a = (event || {}).data, data = _a === void 0 ? '[]' : _a;
                _this.setConditions(data);
            });
        }
    };
    FarrisListFilterBindingDirective.prototype.setConditions = function (conditions) {
        this.frameContext.uiState.setPropertyValue(this.variableCode, conditions);
    };
    FarrisListFilterBindingDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farris-list-filter-binding]'
                },] }
    ];
    /** @nocollapse */
    FarrisListFilterBindingDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: FrameContext },
        { type: ListFilterComponent, decorators: [{ type: Optional }] }
    ]; };
    FarrisListFilterBindingDirective.propDecorators = {
        variableCode: [{ type: Input, args: ['variableCode',] }]
    };
    return FarrisListFilterBindingDirective;
}());
export { FarrisListFilterBindingDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFycmlzX2xpc3RfZmlsdGVyX2JpbmRpbmcuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9rZW5kby1iaW5kaW5nLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvZmFycmlzLWxpc3QtZmlsdGVyL2ZhcnJpc19saXN0X2ZpbHRlcl9iaW5kaW5nLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQXFCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUMsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDN0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0M7SUFTRSwwQ0FDVSxRQUFrQixFQUNsQixZQUEwQixFQUNkLG1CQUF3QztRQUZwRCxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQ2Qsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQVA5RDs7V0FFRztRQUNvQixpQkFBWSxHQUFHLHFCQUFxQixDQUFDO1FBTTFELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxPQUFPLEVBQU8sQ0FBQztJQUNyQyxDQUFDO0lBQ0Qsc0RBQVcsR0FBWDtRQUNFLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDMUI7SUFDSCxDQUFDO0lBQ0QsbURBQVEsR0FBUjtRQUFBLGlCQU9DO1FBTkMsSUFBSSxJQUFJLENBQUMsbUJBQW1CLEVBQUU7WUFDNUIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFVBQUMsS0FBVTtnQkFDcEYsSUFBQSx1QkFBVyxFQUFYLGdDQUFXLENBQWlCO2dCQUNwQyxLQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzNCLENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBQ08sd0RBQWEsR0FBckIsVUFBc0IsVUFBa0I7UUFDdEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQztJQUM1RSxDQUFDOztnQkFoQ0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSw4QkFBOEI7aUJBQ3pDOzs7O2dCQVJtQixRQUFRO2dCQUNuQixZQUFZO2dCQUNaLG1CQUFtQix1QkFnQnZCLFFBQVE7OzsrQkFKVixLQUFLLFNBQUMsY0FBYzs7SUF5QnZCLHVDQUFDO0NBQUEsQUFqQ0QsSUFpQ0M7U0E5QlksZ0NBQWdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbmplY3RvciwgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0LCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGcmFtZUNvbnRleHQgfSBmcm9tICdAZmFycmlzL2RldmtpdCc7XHJcbmltcG9ydCB7IExpc3RGaWx0ZXJDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLWxpc3QtZmlsdGVyJztcclxuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tmYXJyaXMtbGlzdC1maWx0ZXItYmluZGluZ10nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGYXJyaXNMaXN0RmlsdGVyQmluZGluZ0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcclxuICBwcml2YXRlICRkZXN0cm95OiBTdWJqZWN0PGFueT47XHJcbiAgLyoqXHJcbiAgICog5Y+Y6YeP57yW5Y+377yM6buY6K6k5Li6ZmlsdGVyQ29uZGl0aW9uTGlzdFxyXG4gICAqL1xyXG4gIEBJbnB1dCgndmFyaWFibGVDb2RlJykgdmFyaWFibGVDb2RlID0gJ2ZpbHRlckNvbmRpdGlvbkxpc3QnO1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsXHJcbiAgICBwcml2YXRlIGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0LFxyXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBsaXN0RmlsdGVyQ29tcG9uZW50OiBMaXN0RmlsdGVyQ29tcG9uZW50XHJcbiAgKSB7XHJcbiAgICB0aGlzLiRkZXN0cm95ID0gbmV3IFN1YmplY3Q8YW55PigpO1xyXG4gIH1cclxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLiRkZXN0cm95KSB7XHJcbiAgICAgIHRoaXMuJGRlc3Ryb3kubmV4dCgpO1xyXG4gICAgICB0aGlzLiRkZXN0cm95LmNvbXBsZXRlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMubGlzdEZpbHRlckNvbXBvbmVudCkge1xyXG4gICAgICB0aGlzLmxpc3RGaWx0ZXJDb21wb25lbnQuY29uZGl0aW9uc0NoYW5nZS5waXBlKHRha2VVbnRpbCh0aGlzLiRkZXN0cm95KSkuc3Vic2NyaWJlKChldmVudDogYW55KSA9PiB7XHJcbiAgICAgICAgY29uc3QgeyBkYXRhID0gJ1tdJyB9ID0gZXZlbnQgfHwge307XHJcbiAgICAgICAgdGhpcy5zZXRDb25kaXRpb25zKGRhdGEpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcbiAgcHJpdmF0ZSBzZXRDb25kaXRpb25zKGNvbmRpdGlvbnM6IHN0cmluZykge1xyXG4gICAgdGhpcy5mcmFtZUNvbnRleHQudWlTdGF0ZS5zZXRQcm9wZXJ0eVZhbHVlKHRoaXMudmFyaWFibGVDb2RlLCBjb25kaXRpb25zKTtcclxuICB9XHJcbn1cclxuIl19