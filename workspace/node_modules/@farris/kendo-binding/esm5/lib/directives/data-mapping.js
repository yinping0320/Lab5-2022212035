import * as tslib_1 from "tslib";
import { isNumber } from 'lodash-es';
/**
 * 帮助映射基类
 */
var DataMapping = /** @class */ (function () {
    function DataMapping() {
        /**
         * 多选帮助默认分隔符
         */
        this.defaultSpliter = ',';
    }
    /**
     * 映射数据
     * @param helpData 清空时，值为null
     * @param mapFields 格式形如：{id: "assoField.assoField", code: "assoField.assoField_Code", name: "assoField.assoField_Name"}
     * @param asClear 类似清空
     * @param [spliter=','] 多选分隔符
     */
    DataMapping.prototype.mappingData = function (helpData, mapFields, asClear, spliter) {
        if (asClear === void 0) { asClear = false; }
        if (spliter === void 0) { spliter = ','; }
        if (!mapFields) {
            return;
        }
        // 关闭变更检测
        var appContext = this.vm.frameContext.appContext;
        appContext.changeDetectionController.detach();
        var helpFields = Object.keys(mapFields);
        var basePaths = this.getBindingPathArray();
        var primaryInfo = this.getMapFieldsPrimaryKey(mapFields, basePaths);
        // 映射到目标主键的源字段数组
        var primaryKeys = primaryInfo && primaryInfo.map(function (item) { return item.primaryKey; }) || [];
        // 目标主键字段数组
        var primaryFields = primaryInfo && primaryInfo.map(function (item) { return item.primaryField; }) || [];
        // 对映射中的key进行排序，使映射到目标主键的key排到前面
        helpFields = this.sortMapFieldKeys(helpFields, primaryKeys);
        if (!helpData || asClear) {
            helpFields.reverse();
        }
        this.mapping(helpFields, mapFields, helpData, primaryFields, basePaths, asClear, spliter);
        // 重新打开变更检测
        appContext.changeDetectionController.reattach();
    };
    DataMapping.prototype.mapping = function (sortedKeyFields, mapFields, helpData, targetPrimaryFields, basePaths, asClear, spliter) {
        var _this = this;
        if (asClear === void 0) { asClear = false; }
        if (spliter === void 0) { spliter = ','; }
        sortedKeyFields.forEach(function (field) {
            var val = _this.getHelpValue(field, helpData, spliter);
            var mappings = mapFields[field].split(',');
            var headMappings = mappings.filter(function (p) { return targetPrimaryFields.includes(p); });
            var leftMappings = mappings.filter(function (p) { return !targetPrimaryFields.includes(p); });
            if (!helpData || asClear) {
                mappings = [].concat(leftMappings).concat(headMappings);
            }
            else {
                mappings = [].concat(headMappings).concat(leftMappings);
            }
            _this.updateTarget(mappings, basePaths, helpData, val);
        });
    };
    DataMapping.prototype.updateTarget = function (mappings, basePaths, helpData, value) {
        var _this = this;
        mappings.forEach(function (targetFieldPath) {
            _this.updateTargetValue(basePaths, targetFieldPath, value, helpData);
        });
    };
    DataMapping.prototype.updateTargetValue = function (basePaths, targetFieldPath, value, helpData) {
        if (this.target) {
            var paths = targetFieldPath.split('.');
            this.setValue(this.target, paths, value);
        }
        else {
            var paths = basePaths.concat(targetFieldPath.split('.'));
            if (!helpData) {
                this.vm.bindingData.clearValue(paths, true, true, { frameContext: this.vm.frameContext });
            }
            else {
                this.vm.bindingData.setValue(paths, value, true, true, null, { frameContext: this.vm.frameContext });
            }
        }
    };
    /**
     * 获取帮助字段对应的值
     * @param field 帮助字段
     * @param helpData 帮助数据
     * @param [spliter=','] 多选帮助分隔符
     * @returns
     */
    DataMapping.prototype.getHelpValue = function (field, helpData, spliter) {
        var _this = this;
        if (spliter === void 0) { spliter = ','; }
        var value = '';
        if (helpData) {
            if (helpData instanceof Array) {
                value = helpData.map(function (item) {
                    return _this.getValue(field, item);
                }).join(spliter);
            }
            else {
                value = this.getValue(field, helpData);
            }
        }
        return value;
    };
    DataMapping.prototype.getValue = function (f, data) {
        var val = '';
        if (f.indexOf('.') === -1) {
            val = data[f];
        }
        else {
            val = f.split('.').reduce(function (a, b) {
                return a[b];
            }, data);
        }
        return val;
    };
    DataMapping.prototype.setValue = function (target, paths, value) {
        if (target) {
            if (paths.length <= 1) {
                target[paths[0]] = value;
            }
            else {
                paths.slice(0, -1).reduce(function (prev, path) {
                    if (!(prev.hasOwnProperty(path) || prev['__proto__'].hasOwnProperty(path))) {
                        prev[path] = {};
                    }
                    return prev[path];
                }, target)[paths[paths.length - 1]] = value;
            }
        }
    };
    DataMapping.prototype.getBindingPathArray = function () {
        var path = this.vm.bindingPath;
        if (path) {
            return path.split('/').filter(function (n) { return n !== ''; });
        }
        return [];
    };
    DataMapping.prototype.isNumberValue = function (field, data) {
        var currentVal = this.getValue(field, data);
        return isNumber(currentVal);
    };
    /**
     *
     * @param mapFields  格式形如：{id: "assoField.assoField", code: "assoField.assoField_Code", name: "assoField.assoField_Name"} 或者 {id:'vid',code:'code',name:'name'}
     */
    DataMapping.prototype.getMapFieldsPrimaryKey = function (mapFields, bindingPaths) {
        if (!mapFields || Object.keys(mapFields).length < 1) {
            return null;
        }
        var results = [];
        // let primaryField = null;
        try {
            var entityTypeInfo_1 = this.vm.frameContext.repository.entityTypeInfo;
            Object.keys(mapFields).forEach(function (key) {
                var mapField = mapFields[key];
                if (mapField && typeof mapField === 'string') {
                    var mappings = mapField.split(',').filter(function (p) { return p; });
                    mappings.forEach(function (item) {
                        var paths = item.split('.');
                        if (bindingPaths && bindingPaths.length > 0) {
                            paths = bindingPaths.concat(paths);
                        }
                        var propInfo = entityTypeInfo_1.getPropInfoByPath(paths);
                        if (propInfo && propInfo.metadataInfo && propInfo.metadataInfo.primary === true) {
                            results.push({
                                primaryKey: key,
                                primaryField: item
                            });
                        }
                    });
                }
            });
        }
        catch (e) {
            console.error(e);
        }
        return results;
    };
    DataMapping.prototype.sortMapFieldKeys = function (keys, primaryKeys) {
        if (!primaryKeys || primaryKeys.length < 1 || !keys || keys.length < 1) {
            return keys;
        }
        primaryKeys = tslib_1.__spread(new Set(primaryKeys));
        // 过滤出非主键映射字段
        keys = keys.filter(function (p) { return !primaryKeys.includes(p); });
        return [].concat(primaryKeys).concat(keys);
    };
    return DataMapping;
}());
export { DataMapping };
//# sourceMappingURL=data:application/json;base64,