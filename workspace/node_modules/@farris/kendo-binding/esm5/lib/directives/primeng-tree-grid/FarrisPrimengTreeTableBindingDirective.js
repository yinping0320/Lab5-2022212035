/*******************************************************************************************************************
 *                                     FarrisPrimengTreeTableBindingDirective指令说明                               *
 * *****************************************************************************************************************
 *
 * 1. 依赖primeng版本: primeng:^9.0.0,primeicons:^4.0.0
 *
 * 2. 由于可编辑树表无法触发编辑单元格的关闭事件onEditComplete，因此对priemeng的node_modules\primeng\fesm5\primeng-treetable.js脚本作出修改：
 *    源码修改如下，+表示新增加的脚本语句:
 *
 *  TreeTable.prototype.updateEditingCell = function (cell, data, field) { //+ 参数增加data和field
 *      this.editingCell = cell;
 *      this.editingCellData = data; //+
 *      this.editingCellField = field; //+
 *      this.bindDocumentEditListener();
 *  };
 *
 *  TreeTable.prototype.bindDocumentEditListener = function () {
 *       var _this = this;
 *       if (!this.documentEditListener) {
 *           this.documentEditListener = function (event) {
 *               if (_this.editingCell && !_this.editingCellClick && _this.isEditingCellValid()) {
 *                   domhandler_1.DomHandler.removeClass(_this.editingCell, 'ui-editing-cell');
 *                   _this.editingCell = null;
 *                   _this.onEditComplete.emit({ field: _this.editingCellField, data: _this.editingCellData });//+
 *                   _this.unbindDocumentEditListener();
 *               }
 *               _this.editingCellClick = false;
 *           };
 *           document.addEventListener('click', this.documentEditListener);
 *       }
 *   };
 *
 *  TreeTable.prototype.bindDocumentEditListener = function () {
 *       var _this = this;
 *       if (!this.documentEditListener) {
 *           this.documentEditListener = function (event) {
 *               if (_this.editingCell && !_this.editingCellClick && _this.isEditingCellValid()) {
 *                   domhandler_1.DomHandler.removeClass(_this.editingCell, 'ui-editing-cell');
 *                   _this.editingCell = null;
 *                   _this.onEditComplete.emit({ field: _this.editingCellField, data: _this.editingCellData });//+
 *                   _this.unbindDocumentEditListener();
 *               }
 *               _this.editingCellClick = false;
 *           };
 *           document.addEventListener('click', this.documentEditListener);
 *       }
 *   };
 *
 *  TTEditableColumn.prototype.openCell = function () {
 *       var _this = this;
 *        this.tt.updateEditingCell(this.el.nativeElement,this.data, this.field);//+
 *        domhandler_1.DomHandler.addClass(this.el.nativeElement, 'ui-editing-cell');
 *        this.tt.onEditInit.emit({ field: this.field, data: this.data });
 *        this.zone.runOutsideAngular(function () {
 *            setTimeout(function () {
 *                var focusable = domhandler_1.DomHandler.findSingle(_this.el.nativeElement, 'input, textarea');
 *                if (focusable) {
 *                     focusable.focus();
 *                 }
 *             }, 50);
 *        });
 *   };
 *
 *  TTEditableColumn.prototype.onClick = function (event) {
 *        if (this.isEnabled()) {
 *            this.tt.editingCellClick = true;
 *            if (this.tt.editingCell) {
 *                if (this.tt.editingCell !== this.el.nativeElement) {
 *                    if (!this.tt.isEditingCellValid()) {
 *                        return;
 *                    }
 *                    this.tt.onEditComplete.emit({ field: this.tt.oldField, data: this.tt.oldDdata });//+
 *                    DomHandler.removeClass(this.tt.editingCell, 'ui-editing-cell');
 *                    this.openCell();
 *                }
 *            }
 *            else {
 *                this.openCell();
 *            }
 *        }
 *  };
 *
 *  TTEditableColumn.prototype.openCell = function () {
 *         var _this = this;
 *         this.tt.updateEditingCell(this.el.nativeElement,this.data, this.field);
 *         DomHandler.addClass(this.el.nativeElement, 'ui-editing-cell');
 *         this.tt.onEditInit.emit({ field: this.field, data: this.data });
 *         this.tt.oldField= this.field; //+
 *         this.tt.oldDdata=this.data;  //+
 *         this.zone.runOutsideAngular(function () {
 *             setTimeout(function () {
 *                 var focusable = DomHandler.findSingle(_this.el.nativeElement, 'input, textarea');
 *                if (focusable) {
 *                     focusable.focus();
 *                 }
 *           }, 50);
 *       });
 *   };
 *
 * 3. HTML模板
 * (1) 不启用多表头
 *      <p-treeTable [columns]="treeGridColumns" farrisPrimengTreeTableBinding farrisHierarchyInfoKey="layerField" [resizableColumns]="true" farrisPrimengTreeTableIdField="id">
 *             <ng-template pTemplate="header" let-columns>
 *                 <tr>
 *                     <th *ngFor="let col of columns" ttResizableColumn>
 *                         {{col.header}}
 *                     </th>
 *                 </tr>
 *             </ng-template>
 *             <ng-template pTemplate="body" let-rowNode let-rowData="rowData" let-columns="columns">
 *                 <tr>
 *                     <td *ngFor="let col of columns; let i = index" ttEditableColumn [ttEditableColumn]="rowData"
 *                         [ttEditableColumnField]="col.field">
 *                         <p-treeTableToggler [rowNode]="rowNode" *ngIf="i === 0"></p-treeTableToggler>
 *                         <p-treeTableCellEditor>
 *                             <ng-template pTemplate="input">
 *                                  <!-- 控件动态生成区域，此处可放置控件动态生成组件，生成规则如下：
 *                                            1. 字符串类型：文本控件
 *                                            2. 数字类型：数字控件
 *                                            3. 布尔类型：复选框控件
 *                                            4. 日期时间类型：日期时间控件
 *                                            5. 枚举类型：下拉框控件
 *                                            6. 帮助类型：帮助控件-->
 *                             </ng-template>
 *                             <ng-template pTemplate="output">{{ col | formatCellData : rowData }}</ng-template>
 *                         </p-treeTableCellEditor>
 *                     </td>
 *                 </tr>
 *             </ng-template>
 *     </p-treeTable>
 *
 * (2) 启用多表头
 *
 *  <p-treeTable [columns]="treeGridColumns" farrisPrimengTreeTableBinding farrisHierarchyInfoKey="layerField" [resizableColumns]="true" farrisPrimengTreeTableIdField="id">
 *             <ng-template pTemplate="header" let-columns>
 *                  <tr *ngFor="let columnHeader of treeGridColumnHeaders">
 *                      <th *ngFor="let col of columnHeader" ttResizableColumn [attr.rowspan]="col.rowspan" [attr.colspan]="col.colspan">
 *                          {{col.header}}
 *                      </th>
 *                  </tr>
 *             </ng-template>
 *             <ng-template pTemplate="body" let-rowNode let-rowData="rowData" let-columns="columns">
 *                 <tr>
 *                     <td *ngFor="let col of columns; let i = index" ttEditableColumn [ttEditableColumn]="rowData"
 *                         [ttEditableColumnField]="col.field">
 *                         <p-treeTableToggler [rowNode]="rowNode" *ngIf="i === 0"></p-treeTableToggler>
 *                         <p-treeTableCellEditor>
 *                             <ng-template pTemplate="input">
 *                                  <!-- 控件动态生成区域，此处可放置控件动态生成组件，生成规则如下：
 *                                            1. 字符串类型：文本控件
 *                                            2. 数字类型：数字控件
 *                                            3. 布尔类型：复选框控件
 *                                            4. 日期时间类型：日期时间控件
 *                                            5. 枚举类型：下拉框控件
 *                                            6. 帮助类型：帮助控件-->
 *                             </ng-template>
 *                             <ng-template pTemplate="output">{{ col | formatCellData : rowData }}</ng-template>
 *                         </p-treeTableCellEditor>
 *                     </td>
 *                 </tr>
 *             </ng-template>
 *  </p-treeTable>
 *
 * 多表头数据格式：
 *  this.treeGridColumnHeaders=[
 *     [{ header: 'Brand',rowspan:3, colspan:1},{ header: 'Sale Rate',rowspan:1, colspan:4}],
 *     [{ header: 'Sales',rowspan:1, colspan:2},{ header: 'Profits',rowspan:1, colspan:2}],
 *     [{ header: 'Last Year',rowspan:1, colspan:1},{ header: 'This Year',rowspan:1, colspan:1},{ header: 'Last Year',rowspan:1, colspan:1},{ header: 'This Year',rowspan:1, colspan:1}],
 *  ]

 **********************************************************************************************************************/
import * as tslib_1 from "tslib";
import { Directive, Input, HostListener, Output, EventEmitter } from '@angular/core';
import { FrameContext, ChangeType, ComponentType } from '@farris/devkit';
import { TreeTable } from 'primeng/treetable';
import { TreeNodeBuilderFactory } from '../tree_table_node_builder/tree_node_builder_factory';
import { DateTimeHelperService } from '@farris/ui-common/date';
var PARENT_ELEMENT = "parentElement";
var PATH = "path";
var IS_DETAIL = 'isDetail';
var FarrisPrimengTreeTableBindingDirective = /** @class */ (function () {
    function FarrisPrimengTreeTableBindingDirective(treeTable, frameContext, dateService) {
        this.treeTable = treeTable;
        this.frameContext = frameContext;
        this.dateService = dateService;
        this.selectedRowId = null;
        this.treeTableSelectedEvent = null;
        /**
         * 节点选择变更事件
         */
        this.nodeSelectChange = new EventEmitter();
        this.oldTreeNodeMap = {};
    }
    Object.defineProperty(FarrisPrimengTreeTableBindingDirective.prototype, "bindingData", {
        /**
         * 绑定数据
         */
        get: function () {
            return this.frameContext.bindingData;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisPrimengTreeTableBindingDirective.prototype, "bindingList", {
        /**
         * 绑定数据列表
         */
        get: function () {
            return this.bindingData.getList();
        },
        enumerable: true,
        configurable: true
    });
    FarrisPrimengTreeTableBindingDirective.prototype.getHierarchyInfoField = function () {
        var infos = this.hierarchyInfoKey.split('/');
        return infos[infos.length - 1];
    };
    FarrisPrimengTreeTableBindingDirective.prototype.ngOnChanges = function (changes) {
    };
    FarrisPrimengTreeTableBindingDirective.prototype.ngOnInit = function () {
        var _this = this;
        //解析获取分级码字段编号
        this.hierarchyInfoField = this.getHierarchyInfoField();
        // 将分级码信息保存到root-component
        var virtualRootFrameContext = this.frameContext.getVirtualRootFrameContext();
        virtualRootFrameContext.setParam('hierarchyInfoKey', this.hierarchyInfoKey);
        this.bindingData.changes.subscribe(function (change) {
            _this.bindData(change);
            _this.updateSelectedRow(change);
        });
        this.frameContext.viewModel.uiState.setPropertyValue('ids', []);
        if (this.frameContext && this.frameContext.frameComponent) {
            this.frameContext.frameComponent.componentType = ComponentType.primengTreeComponent;
        }
    };
    /**
     * 获取树列表绑定数据对应的实体数组
     * @returns 实体数组
     */
    FarrisPrimengTreeTableBindingDirective.prototype.getEntityArr = function () {
        var entityCollection = this.frameContext.repository.entityCollection;
        var bindingPath = this.frameContext.bindingData.bindingPath;
        if (!bindingPath || bindingPath === '/') {
            return entityCollection.toArray();
        }
        var bindingList = this.frameContext.bindingData.list;
        var bindingPathArr = bindingPath.split('/').filter(function (str) { return str; });
        var pathArray = [];
        bindingPathArr.forEach(function (path) {
            pathArray.push(bindingList.primaryKey + ":" + bindingList.currentId);
            pathArray.push(path);
            bindingList = bindingList.currentItem[path];
        });
        return entityCollection.getEntitiesByPath(pathArray).toArray();
    };
    /**
     * 将真实顺序标记到对应的实体上
     * @param entityArr 实体数组
     * @param treeNodes 树节点
     */
    FarrisPrimengTreeTableBindingDirective.prototype.setActualIndex = function (entityArr, treeNodes) {
        var _this = this;
        if (entityArr.length < 1)
            return;
        // 初始化序号器并依次遍历每一棵树
        var counter = { index: 0 };
        var primaryKey = entityArr[0].primaryKey;
        treeNodes.forEach(function (rootNode) {
            _this.traverseTree(rootNode, counter, entityArr, primaryKey);
        });
    };
    /**
     * 前序递归遍历树节点并在对应实体上标记序号
     * @param treeNode 树节点
     * @param counter 序号器
     * @param entityArr 实体数组
     * @description
     * 在进行前端校验时，按照Entity在数组中的下标生成（错误提示的）行号的方式不适用于树列表，
     * 因为树列表可以在已经添加的节点上加入子节点，而Entity总是在最后追加新对象，导致二者的顺序不一定相同，
     * 所以在绑定数据的时候将树节点在列表中的真实顺序通过一个附加的属性（__ACTUAL_INDEX__）赋给Entity示例，
     * 当Entity调用validate方法时，检查是否存在该属性，如果存在则应用该属性的值作为行号。
     */
    FarrisPrimengTreeTableBindingDirective.prototype.traverseTree = function (treeNode, counter, entityArr, primaryKey) {
        var _this = this;
        var INDEX_LABEL = "__ACTUAL_INDEX__";
        // 处理当前节点
        var entity = entityArr.find(function (e) { return e[primaryKey] === treeNode.data[primaryKey]; });
        if (entity) {
            Object.defineProperty(entity, INDEX_LABEL, {
                value: counter.index
            });
            counter.index++;
        }
        // 递归遍历分支
        treeNode.children.forEach(function (rootNode) {
            _this.traverseTree(rootNode, counter, entityArr, primaryKey);
        });
    };
    /**
     * 处理数据变更
     * @param change 变更
     * @returns 是否跳过绑定数据的整体刷新
     * @description
     * 目的是尽量少的重新构造整个树列表，比如在发生值变化事件时尽量只更改变化的值就结束，
     * 如果任何变化都重新构造树，会导致Tab键切换功能难以实现等问题。
     */
    FarrisPrimengTreeTableBindingDirective.prototype.handleChange = function (change) {
        // 没有变更时，继续绑定数据刷新
        if (!change)
            return false;
        // 分类处理具体的变更
        switch (change.type) {
            case ChangeType.SelectionChanged:
                return this.handleSelectionChanged(change);
            case ChangeType.GlobalSelectionChanged:
                return this.handleSelectionChanged(change);
            case ChangeType.ValueChanged:
                return this.handleValueChanged(change);
            default:
                return false;
        }
    };
    /**
     * 处理行切换变更
     * @param change 变更
     * @returns 是否跳过绑定数据的整体刷新
     */
    FarrisPrimengTreeTableBindingDirective.prototype.handleSelectionChanged = function (change) {
        // 当前绑定路径下发生行切换事件，不进行数据刷新（为了支持Tab键切换单元格）
        if (change.type === ChangeType.SelectionChanged || change.type === ChangeType.GlobalSelectionChanged) {
            var path = change.path;
            var frmPath = this.bindingData.bindingPath.split("/").filter(function (str) { return str; });
            if (path.length === frmPath.length) {
                var same = true;
                for (var i = 0; i < path.length; i++) {
                    if (path[i] !== frmPath[i])
                        same = false;
                }
                if (same)
                    return true;
            }
        }
        return false;
    };
    /**
     * 处理行切换变更
     * @param change 变更
     * @returns 是否跳过绑定数据的整体刷新
     */
    FarrisPrimengTreeTableBindingDirective.prototype.handleValueChanged = function (change) {
        var e_1, _a, e_2, _b;
        if (change.type !== ChangeType.ValueChanged) {
            return false;
        }
        // 接收到值变化事件，尝试仅进行局部数据的更新（为了支持Tab键切换单元格）
        var path = change.path;
        var bindingPathArr = this.bindingData.bindingPath.split("/").filter(function (str) { return str; });
        try {
            // 判断绑定路径是否相同，如果不相同则整体刷新
            for (var bindingPathArr_1 = tslib_1.__values(bindingPathArr), bindingPathArr_1_1 = bindingPathArr_1.next(); !bindingPathArr_1_1.done; bindingPathArr_1_1 = bindingPathArr_1.next()) {
                var item = bindingPathArr_1_1.value;
                if (path.length > 0) {
                    if (item === path[0]) {
                        path.shift();
                    }
                    else {
                        return false;
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (bindingPathArr_1_1 && !bindingPathArr_1_1.done && (_a = bindingPathArr_1.return)) _a.call(bindingPathArr_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        // 通过id找到待更新的树节点
        var id = change.id;
        if (id) {
            var primaryKey = this.bindingList.primaryKey;
            var nodes = this.treeTable.value;
            var targetNode = null;
            try {
                for (var nodes_1 = tslib_1.__values(nodes), nodes_1_1 = nodes_1.next(); !nodes_1_1.done; nodes_1_1 = nodes_1.next()) {
                    var node = nodes_1_1.value;
                    var result = this.findTreeNodeById(node, primaryKey, id);
                    if (result) {
                        targetNode = result;
                        break;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (nodes_1_1 && !nodes_1_1.done && (_b = nodes_1.return)) _b.call(nodes_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
            if (targetNode && path.length === 1) {
                var propertyName = path.shift();
                if (targetNode.data.hasOwnProperty(propertyName) && change.hasOwnProperty("value")) {
                    targetNode.data[propertyName] = change.value;
                    return true;
                }
            }
        }
        return false;
    };
    /**
     * 通过主键值查找树节点
     * @param treeNode 树根节点
     * @param primaryKey 主键名
     * @param keyValue 主键值
     * @returns 树节点
     * @todo 递归遍历实现比较低效，考虑通过oldTreeNodeMap查找树节点
     */
    FarrisPrimengTreeTableBindingDirective.prototype.findTreeNodeById = function (treeNode, primaryKey, keyValue) {
        var e_3, _a;
        if (!treeNode)
            return null;
        if (treeNode.data.hasOwnProperty(primaryKey) && treeNode.data[primaryKey] === keyValue)
            return treeNode;
        if (treeNode.children) {
            try {
                for (var _b = tslib_1.__values(treeNode.children), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var node = _c.value;
                    var result = this.findTreeNodeById(node, primaryKey, keyValue);
                    if (result)
                        return result;
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        return null;
    };
    /**
    * 绑定数据
    */
    FarrisPrimengTreeTableBindingDirective.prototype.bindData = function (change) {
        var skipRefresh = this.handleChange(change);
        if (skipRefresh) {
            return;
        }
        // this.sourceData = this.bindingList.toJSON({ ignoreMultiLangInput: true });
        var oldTreeNodes = this.treeTable.value;
        var treeNodesData = this.bindingList.toJSON({ ignoreMultiLangInput: true });
        var treeNodes = [];
        if (treeNodesData && treeNodesData.length > 0) {
            var hierarchyInfo = treeNodesData[0][this.hierarchyInfoField];
            var builder = TreeNodeBuilderFactory.getBuilder(hierarchyInfo);
            // 服务器返回的分级节点信息匹配不到现有工厂里面的任何一种情况。确认新加的builder已经在工厂中注册
            if (builder == null) {
                throw new Error('TreeTable builder is null!');
            }
            var expandLevel = -1;
            var treeExpandLevel = this.treeTable['expandLevel'];
            if (typeof treeExpandLevel !== 'undefined') {
                expandLevel = treeExpandLevel;
            }
            var context = {
                expandLevel: expandLevel,
                component: this.treeTable,
            };
            var treeNodesBuilder = new builder(treeNodesData, oldTreeNodes, this.bindingList.primaryKey, this.hierarchyInfoField, context);
            treeNodes = treeNodesBuilder.build();
            // 获取绑定数据对应的实体列表
            var entityArr = this.getEntityArr();
            // 根据treeNodes的顺序在对应的实体上添加序号字段__ACTUAL_INDEX__
            this.setActualIndex(entityArr, treeNodes);
        }
        if (!this.treeTable.lazy) {
            this.treeTable.totalRecords = (this.treeTable._value ? this.treeTable._value.length : 0);
            if (this.treeTable.sortMode == 'single' && this.treeTable.sortField)
                this.treeTable.sortSingle();
            else if (this.treeTable.sortMode == 'multiple' && this.treeTable.multiSortMeta)
                this.treeTable.sortMultiple();
            else if (this.treeTable.hasFilter()) //sort already filters
                this.treeTable._filter();
        }
        this.treeTable.tableService.onUIUpdate(treeNodes);
        this.treeTable.value = treeNodes;
        this.treeTable.updateSerializedValue();
        // this.treeNodeMap = {};
        // this.sourceDataClone = this.sourceData;
        // this.treeTable.value = [...this.treeNodesBuilder()];
        // this.treeTableValueHandler();
    };
    FarrisPrimengTreeTableBindingDirective.prototype.updateSelectedRow = function (change) {
        var currentId = this.bindingList.currentId;
        if (this.treeTableSelectedEvent) {
            this.treeTableSelectedEvent = false;
            this.selectedRowId = currentId;
            return;
        }
        var serializedValue = this.treeTable.serializedValue;
        var treeNode = serializedValue && serializedValue.find(function (item) { return item && item.node && item.node.data && item.node.data.id === currentId; }) || null;
        if (treeNode) {
            if (this.treeTable.isSelected(treeNode.node) || currentId === this.selectedRowId) {
                return;
            }
            this.selectedRowId = currentId;
            this.treeTable.handleRowClick({ rowNode: treeNode, originalEvent: { target: { nodeName: '' } } });
        }
    };
    FarrisPrimengTreeTableBindingDirective.prototype.onEditInitHandler = function (event) {
        this.nodeSelectChange.emit(event['data']);
        var id = event.data[this.idField];
        this.setCurrentIdToBindingList(id);
    };
    FarrisPrimengTreeTableBindingDirective.prototype.onEditCompleteHandler = function (event) {
        var fieldName = event.field;
        var column = this.columns.find(function (item) { return item.field === fieldName; });
        if (fieldName && column && column.editor && column.editor.options && column.editor.options.type === 'EditorTypes.LOOKUP') {
            return;
        }
        if (event && event.hasOwnProperty('data')) {
            var primaryKeyValue = event.data[this.frameContext.repository.primaryKey];
            var value = this.getValue(fieldName, event.data);
            var bindingPath = this.frameContext.viewModel.bindingPath || '/';
            var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
            var bindingList = this.bindingData.getValue(bindingPaths);
            var bindingObject = bindingList.findById(primaryKeyValue);
            var oldValue = this.getValue(fieldName, bindingObject);
            var column_1 = this.treeTable.columns.find(function (item) { return item.field === fieldName; });
            var dataType = column_1 && column_1.dataType || null;
            if (dataType === 'date' || dataType === 'datetime') {
                if (this.dateService) {
                    var format = column_1 && column_1.formatter && column_1.formatter.options && column_1.formatter.options.format || 'yyyy-MM-dd';
                    value = this.dateService.formatTo(value, format);
                    if (!value) {
                        value = null;
                    }
                }
            }
            else if (dataType === 'number') {
                value = Number(value);
            }
            if (value !== oldValue) {
                this.updateBindingList(primaryKeyValue, fieldName, value);
            }
        }
    };
    FarrisPrimengTreeTableBindingDirective.prototype.onNodeExpandHandler = function (event) {
        // this.setNodeExpandedValue(event);
        var selectedId = event && event.node && event.node.id || null;
        if (!selectedId) {
            return;
        }
        var virtualRootFrameContext = this.frameContext.getVirtualRootFrameContext();
        var expandNodes = virtualRootFrameContext.getParam('TREE_LATEST_EXPANDED_ID') || [];
        expandNodes.push(selectedId);
        virtualRootFrameContext.setParam('TREE_LATEST_EXPANDED_ID', expandNodes);
    };
    FarrisPrimengTreeTableBindingDirective.prototype.onNodeCollapseHandler = function (event) {
        // this.setNodeExpandedValue(event);
    };
    FarrisPrimengTreeTableBindingDirective.prototype.onNodeSelectHandler = function (event) {
        var id = event && event.node && event.node.data && event.node.data[this.frameContext.repository.primaryKey] || null;
        if (id === this.bindingList.currentId) {
            return;
        }
        this.treeTableSelectedEvent = true;
        this.setCurrentIdToBindingList(id);
    };
    FarrisPrimengTreeTableBindingDirective.prototype.onNodeUnselectHandler = function (event) {
        this.setCurrentIdToBindingList(null);
    };
    FarrisPrimengTreeTableBindingDirective.prototype.setNodeExpandedValue = function (event) {
        if (!event || !this.oldTreeNodeMap || Object.keys(this.oldTreeNodeMap).length <= 0) {
            return;
        }
        try {
            var currentId = event.node.data.id;
            this.oldTreeNodeMap[currentId].expanded = event.expanded;
        }
        catch (e) {
            console.warn("setNodeExpandedValue error:" + e.message);
        }
    };
    FarrisPrimengTreeTableBindingDirective.prototype.setCurrentIdToBindingList = function (selectedId) {
        var oldCurrentId = this.bindingList.currentId;
        if (oldCurrentId === selectedId) {
            return;
        }
        this.bindingList.setCurrentId(selectedId, true);
    };
    FarrisPrimengTreeTableBindingDirective.prototype.getPaths = function () {
        var paths = [];
        if (!this.frameContext.viewModel || !this.frameContext.viewModel.bindingPath || this.frameContext.viewModel.bindingPath === '/') {
            return paths;
        }
        else {
            var bindingPath = this.frameContext.viewModel.bindingPath;
            paths = bindingPath.substring(1, bindingPath.length).split('/');
            return paths;
        }
    };
    FarrisPrimengTreeTableBindingDirective.prototype.updateBindingList = function (primaryValue, propertyName, value) {
        if (!propertyName) {
            return;
        }
        // 更新主表部分行的字段
        var propertyNames = propertyName.split('.').filter(function (item) { return item; });
        var bindingPath = this.getBindingPathArray();
        // 取出来的一定是bindingList
        var list = this.bindingData.getValue(bindingPath);
        // 修改的是当前行
        var paths = bindingPath.concat(propertyNames);
        if (list && primaryValue === list.currentItem.primaryKeyValue) {
            this.bindingData.setValue(paths, value, true, true);
            return;
        }
        var bindingObject = this.bindingList.findById(primaryValue);
        if (!bindingObject) {
            return;
        }
        if (propertyNames.length < 2) {
            bindingObject.setValue(propertyName, value, true, true, undefined, this.bindingData.getValudChangeInvokerFactory()(paths));
        }
        else {
            var targetBindingObject_1 = null;
            var fpaths = propertyNames.slice(0, propertyNames.length - 1);
            var targetPropertyName = propertyNames[propertyNames.length - 1];
            fpaths.forEach(function (prop) {
                targetBindingObject_1 = targetBindingObject_1 && targetBindingObject_1[prop] || bindingObject[prop];
            });
            // todo:需要添加值变化事件
            targetBindingObject_1.setValue(targetPropertyName, value, true, true, undefined, this.bindingData.getValudChangeInvokerFactory()(paths));
        }
    };
    FarrisPrimengTreeTableBindingDirective.prototype.getBindingPathArray = function () {
        var path = this.frameContext.viewModel.bindingPath;
        if (path) {
            return path.split('/').filter(function (n) { return n !== ''; });
        }
        return [];
    };
    FarrisPrimengTreeTableBindingDirective.prototype.getValue = function (path, data) {
        var value = '';
        if (path.indexOf('.') === -1) {
            value = data[path];
        }
        else {
            value = path.split('.').reduce(function (result, prop) {
                return result[prop];
            }, data);
        }
        return value;
    };
    FarrisPrimengTreeTableBindingDirective.prototype.setChecks = function (ids) {
        this.frameContext.viewModel.uiState.setPropertyValue('ids', ids);
    };
    FarrisPrimengTreeTableBindingDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farrisPrimengTreeTableBinding]'
                },] }
    ];
    /** @nocollapse */
    FarrisPrimengTreeTableBindingDirective.ctorParameters = function () { return [
        { type: TreeTable },
        { type: FrameContext },
        { type: DateTimeHelperService }
    ]; };
    FarrisPrimengTreeTableBindingDirective.propDecorators = {
        hierarchyInfoKey: [{ type: Input, args: ['farrisHierarchyInfoKey',] }],
        columns: [{ type: Input, args: ['columns',] }],
        idField: [{ type: Input, args: ['farrisPrimengTreeTableIdField',] }],
        nodeSelectChange: [{ type: Output }],
        onEditInitHandler: [{ type: HostListener, args: ['onEditInit', ['$event'],] }],
        onEditCompleteHandler: [{ type: HostListener, args: ['onEditComplete', ['$event'],] }],
        onNodeExpandHandler: [{ type: HostListener, args: ['onNodeExpand', ['$event'],] }],
        onNodeCollapseHandler: [{ type: HostListener, args: ['onNodeCollapse', ['$event'],] }],
        onNodeSelectHandler: [{ type: HostListener, args: ['onNodeSelect', ['$event'],] }],
        onNodeUnselectHandler: [{ type: HostListener, args: ['onNodeUnselect', ['$event'],] }]
    };
    return FarrisPrimengTreeTableBindingDirective;
}());
export { FarrisPrimengTreeTableBindingDirective };
//# sourceMappingURL=data:application/json;base64,