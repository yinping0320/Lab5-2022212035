import { Directive, Injector, Input, Optional } from '@angular/core';
import { FrameContext } from '@farris/devkit';
import { FilterComponent } from '@farris/ui-filter';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
var FarrisFilterBindingDirective = /** @class */ (function () {
    function FarrisFilterBindingDirective(injector, frameContext, filterComponent) {
        this.injector = injector;
        this.frameContext = frameContext;
        this.filterComponent = filterComponent;
        /**
         * 变量编号，默认为filterConditionList
         */
        this.variableCode = 'filterConditionList';
        this.$destroy = new Subject();
    }
    FarrisFilterBindingDirective.prototype.ngOnDestroy = function () {
        if (this.$destroy) {
            this.$destroy.next();
            this.$destroy.complete();
        }
    };
    FarrisFilterBindingDirective.prototype.ngOnInit = function () {
        var _this = this;
        if (this.filterComponent) {
            this.filterComponent.conditionsChange.pipe(takeUntil(this.$destroy)).subscribe(function (event) {
                var _a = (event || {}).data, data = _a === void 0 ? '[]' : _a;
                _this.setConditions(data);
            });
        }
    };
    FarrisFilterBindingDirective.prototype.setConditions = function (conditions) {
        this.frameContext.uiState.setPropertyValue(this.variableCode, conditions);
    };
    FarrisFilterBindingDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farris-filter-binding]'
                },] }
    ];
    /** @nocollapse */
    FarrisFilterBindingDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: FrameContext },
        { type: FilterComponent, decorators: [{ type: Optional }] }
    ]; };
    FarrisFilterBindingDirective.propDecorators = {
        variableCode: [{ type: Input, args: ['variableCode',] }]
    };
    return FarrisFilterBindingDirective;
}());
export { FarrisFilterBindingDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFycmlzX2ZpbHRlcl9iaW5kaW5nLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMva2VuZG8tYmluZGluZy8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL2ZhcnJpcy1maWx0ZXIvZmFycmlzX2ZpbHRlcl9iaW5kaW5nLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQXFCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTNDO0lBU0Usc0NBQ1UsUUFBa0IsRUFDbEIsWUFBMEIsRUFDZCxlQUFnQztRQUY1QyxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQ2Qsb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBUHREOztXQUVHO1FBQ29CLGlCQUFZLEdBQUcscUJBQXFCLENBQUM7UUFNMUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLE9BQU8sRUFBTyxDQUFDO0lBQ3JDLENBQUM7SUFDRCxrREFBVyxHQUFYO1FBQ0UsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDckIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUMxQjtJQUNILENBQUM7SUFDRCwrQ0FBUSxHQUFSO1FBQUEsaUJBT0M7UUFOQyxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDeEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxVQUFDLEtBQVU7Z0JBQ2hGLElBQUEsdUJBQVcsRUFBWCxnQ0FBVyxDQUFpQjtnQkFDcEMsS0FBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMzQixDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUNPLG9EQUFhLEdBQXJCLFVBQXNCLFVBQWtCO1FBQ3RDLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDNUUsQ0FBQzs7Z0JBaENGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUseUJBQXlCO2lCQUNwQzs7OztnQkFSbUIsUUFBUTtnQkFDbkIsWUFBWTtnQkFDWixlQUFlLHVCQWdCbkIsUUFBUTs7OytCQUpWLEtBQUssU0FBQyxjQUFjOztJQXlCdkIsbUNBQUM7Q0FBQSxBQWpDRCxJQWlDQztTQTlCWSw0QkFBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEluamVjdG9yLCBJbnB1dCwgT25EZXN0cm95LCBPbkluaXQsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZyYW1lQ29udGV4dCB9IGZyb20gJ0BmYXJyaXMvZGV2a2l0JztcclxuaW1wb3J0IHsgRmlsdGVyQ29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy91aS1maWx0ZXInO1xyXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2ZhcnJpcy1maWx0ZXItYmluZGluZ10nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGYXJyaXNGaWx0ZXJCaW5kaW5nRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xyXG4gIHByaXZhdGUgJGRlc3Ryb3k6IFN1YmplY3Q8YW55PjtcclxuICAvKipcclxuICAgKiDlj5jph4/nvJblj7fvvIzpu5jorqTkuLpmaWx0ZXJDb25kaXRpb25MaXN0XHJcbiAgICovXHJcbiAgQElucHV0KCd2YXJpYWJsZUNvZGUnKSB2YXJpYWJsZUNvZGUgPSAnZmlsdGVyQ29uZGl0aW9uTGlzdCc7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcixcclxuICAgIHByaXZhdGUgZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQsXHJcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIGZpbHRlckNvbXBvbmVudDogRmlsdGVyQ29tcG9uZW50XHJcbiAgKSB7XHJcbiAgICB0aGlzLiRkZXN0cm95ID0gbmV3IFN1YmplY3Q8YW55PigpO1xyXG4gIH1cclxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLiRkZXN0cm95KSB7XHJcbiAgICAgIHRoaXMuJGRlc3Ryb3kubmV4dCgpO1xyXG4gICAgICB0aGlzLiRkZXN0cm95LmNvbXBsZXRlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuZmlsdGVyQ29tcG9uZW50KSB7XHJcbiAgICAgIHRoaXMuZmlsdGVyQ29tcG9uZW50LmNvbmRpdGlvbnNDaGFuZ2UucGlwZSh0YWtlVW50aWwodGhpcy4kZGVzdHJveSkpLnN1YnNjcmliZSgoZXZlbnQ6IGFueSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHsgZGF0YSA9ICdbXScgfSA9IGV2ZW50IHx8IHt9O1xyXG4gICAgICAgIHRoaXMuc2V0Q29uZGl0aW9ucyhkYXRhKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHByaXZhdGUgc2V0Q29uZGl0aW9ucyhjb25kaXRpb25zOiBzdHJpbmcpIHtcclxuICAgIHRoaXMuZnJhbWVDb250ZXh0LnVpU3RhdGUuc2V0UHJvcGVydHlWYWx1ZSh0aGlzLnZhcmlhYmxlQ29kZSwgY29uZGl0aW9ucyk7XHJcbiAgfVxyXG59XHJcbiJdfQ==