import { Directive, Optional, Self, Input } from '@angular/core';
import { FrameContext } from '@farris/devkit';
import { LookupGridComponent } from '@farris/ui-lookup';
// tslint:disable-next-line: directive-selector
var LookupEnableExtendLoadMethodDirective = /** @class */ (function () {
    function LookupEnableExtendLoadMethodDirective(frameContext, lookup) {
        this.frameContext = frameContext;
        this.lookup = lookup;
    }
    LookupEnableExtendLoadMethodDirective.prototype.ngOnInit = function () {
        if (!this.frameContext || !this.lookup || this.enableExtendLoadMethod !== true) {
            return;
        }
        var befApiUrl = this.frameContext.repository.apiUri;
        var helpMetadataId = this.lookup.uri;
        var enableKey = helpMetadataId + "@" + befApiUrl;
        this.frameContext.setParam(enableKey, true);
    };
    LookupEnableExtendLoadMethodDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[enableExtendLoadMethod]'
                },] }
    ];
    /** @nocollapse */
    LookupEnableExtendLoadMethodDirective.ctorParameters = function () { return [
        { type: FrameContext, decorators: [{ type: Optional }] },
        { type: LookupGridComponent, decorators: [{ type: Optional }, { type: Self }] }
    ]; };
    LookupEnableExtendLoadMethodDirective.propDecorators = {
        enableExtendLoadMethod: [{ type: Input }]
    };
    return LookupEnableExtendLoadMethodDirective;
}());
export { LookupEnableExtendLoadMethodDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9va3VwLWVuYWJsZS1leHRlbmQtbG9hZC1tZXRob2QuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9rZW5kby1iaW5kaW5nLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvbG9va3VwLWVuYWJsZS1leHRlbmQtbG9hZC1tZXRob2QuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQVUsUUFBUSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRXhELCtDQUErQztBQUMvQztJQU9FLCtDQUNzQixZQUEwQixFQUNsQixNQUEyQjtRQURuQyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUNsQixXQUFNLEdBQU4sTUFBTSxDQUFxQjtJQUNyRCxDQUFDO0lBRUwsd0RBQVEsR0FBUjtRQUNFLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsc0JBQXNCLEtBQUssSUFBSSxFQUFFO1lBQzlFLE9BQU87U0FDUjtRQUNELElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQztRQUN0RCxJQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztRQUN2QyxJQUFNLFNBQVMsR0FBTSxjQUFjLFNBQUksU0FBVyxDQUFDO1FBQ25ELElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxDQUFDOztnQkFwQkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSwwQkFBMEI7aUJBQ3JDOzs7O2dCQU5RLFlBQVksdUJBWWhCLFFBQVE7Z0JBWEosbUJBQW1CLHVCQVl2QixRQUFRLFlBQUksSUFBSTs7O3lDQUxsQixLQUFLOztJQWlCUiw0Q0FBQztDQUFBLEFBckJELElBcUJDO1NBbEJZLHFDQUFxQyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5pbXBvcnQgeyBEaXJlY3RpdmUsIE9uSW5pdCwgT3B0aW9uYWwsIFNlbGYsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZyYW1lQ29udGV4dCB9IGZyb20gJ0BmYXJyaXMvZGV2a2l0JztcclxuaW1wb3J0IHsgTG9va3VwR3JpZENvbXBvbmVudCB9IGZyb20gJ0BmYXJyaXMvdWktbG9va3VwJztcclxuXHJcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogZGlyZWN0aXZlLXNlbGVjdG9yXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2VuYWJsZUV4dGVuZExvYWRNZXRob2RdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTG9va3VwRW5hYmxlRXh0ZW5kTG9hZE1ldGhvZERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgZW5hYmxlRXh0ZW5kTG9hZE1ldGhvZDogYW55O1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQsXHJcbiAgICBAT3B0aW9uYWwoKSBAU2VsZigpIHByaXZhdGUgbG9va3VwOiBMb29rdXBHcmlkQ29tcG9uZW50XHJcbiAgKSB7IH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICBpZiAoIXRoaXMuZnJhbWVDb250ZXh0IHx8ICF0aGlzLmxvb2t1cCB8fCB0aGlzLmVuYWJsZUV4dGVuZExvYWRNZXRob2QgIT09IHRydWUpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgYmVmQXBpVXJsID0gdGhpcy5mcmFtZUNvbnRleHQucmVwb3NpdG9yeS5hcGlVcmk7XHJcbiAgICBjb25zdCBoZWxwTWV0YWRhdGFJZCA9IHRoaXMubG9va3VwLnVyaTtcclxuICAgIGNvbnN0IGVuYWJsZUtleSA9IGAke2hlbHBNZXRhZGF0YUlkfUAke2JlZkFwaVVybH1gO1xyXG4gICAgdGhpcy5mcmFtZUNvbnRleHQuc2V0UGFyYW0oZW5hYmxlS2V5LCB0cnVlKTtcclxuICB9XHJcbn1cclxuIl19