import * as tslib_1 from "tslib";
import { Directive, Input, Injector, NgZone, } from '@angular/core';
import { of } from 'rxjs';
import { BindingData, ViewModel, ENABLE_EDIT_STATE_FILTER_SORTING } from '@farris/devkit';
import { DatagridComponent } from '@farris/ui-datagrid';
import { isNumber } from 'lodash-es';
import { DateTimeHelperService } from '@farris/ui-common/date';
import { RuntimeStateService } from '@farris/ui-common';
import { DialogService } from '@farris/ui-dialog';
var EditableDirective = /** @class */ (function () {
    function EditableDirective(bindingData, viewModel, grid, dateService, injector, rts, dialogSer, ngZone) {
        this.bindingData = bindingData;
        this.viewModel = viewModel;
        this.grid = grid;
        this.dateService = dateService;
        this.injector = injector;
        this.rts = rts;
        this.dialogSer = dialogSer;
        this.ngZone = ngZone;
        /**
         * 编辑时取消分组
         */
        this.disableGroupOnEditing = true;
        /**
         * 多选帮助默认分隔符
         */
        this.defaultSpliter = ',';
        /**
         * 临时记录grid分组字段
         */
        this.groupFields = [];
    }
    Object.defineProperty(EditableDirective.prototype, "bindingList", {
        get: function () {
            // 根实体
            if (this.viewModel.bindingPath === '/' || !this.viewModel.bindingPath) {
                return this.bindingData.list;
            }
            // 子实体
            var bindingPath = this.viewModel.bindingPath.substr(1);
            bindingPath = bindingPath[0].toLowerCase() + bindingPath.substring(1, bindingPath.length);
            var paths = bindingPath.split('/');
            var filteredPaths = paths.filter(function (part) {
                return part !== '';
            });
            return this.bindingData.getValue(filteredPaths);
        },
        enumerable: true,
        configurable: true
    });
    EditableDirective.prototype.ngOnInit = function () {
        this.apply();
    };
    EditableDirective.prototype.ngOnChanges = function (changes) {
        this.apply();
    };
    EditableDirective.prototype.ngOnDestroy = function () {
        this.detach();
    };
    /**
     * 应用属性
     */
    EditableDirective.prototype.apply = function () {
        if (!this.grid) {
            return;
        }
        this.handleGroupStatus();
        // 是否启用了编辑态过滤排序
        if (this.gridEditable) {
            var enableFilterSorting = this.injector && this.injector.get(ENABLE_EDIT_STATE_FILTER_SORTING, false) || false;
            if (!this.grid.remoteFilter && !enableFilterSorting) {
                this.grid.clearCondition();
                // 发送清空过滤条件事件
                this.viewModel.frameContext.appContext.messagePipe.next('CLEAR_GRID_CONDITION');
            }
            this.grid.editable = true;
            if (!this.viewModel.frameContext.appContext.enableGridHeaderWhenEditing && !enableFilterSorting) {
                this.grid.disableHeader(true);
            }
            this.handleBeginEditEvent();
            this.handleAfterEditEvent();
            this.handleEndEditEvent();
        }
        else {
            this.grid.editable = false;
            this.grid.disableHeader(false);
            // TODO:应由表格兼容，但目前补丁不能继续依赖表格组件，临时使用该方案处理
            // 2023-12-25 表格内部已解决列设置后表头无法拖动问题，且兼容代码存在覆盖开发者设置的自定义列名称的问题
            // this.grid.columns = this.grid.columns.map((cols) => {
            //   return cols.map((col) => Object.assign({}, col));
            // });
            // this.grid.columnsChanged(false);
            if (this.grid && typeof this.grid.sort === 'function' && this.grid.sortName) {
                this.grid.sort();
            }
            this.detach();
        }
    };
    /**
     * 编辑时取消分组
     */
    EditableDirective.prototype.handleGroupStatus = function () {
        if (this.disableGroupOnEditing === false) {
            return;
        }
        var groupField = this.grid && this.grid.groupField || null;
        if (groupField) {
            if (this.gridEditable) {
                this.groupFields = [groupField];
                this.grid.setGroupFields('');
            }
        }
        else {
            if (this.groupFields && this.groupFields.length > 0) {
                var groupField_1 = this.groupFields.pop();
                if (this.groupFields.length > 0) {
                    this.groupFields = [];
                }
                this.grid.setGroupFields(groupField_1);
            }
        }
    };
    /**
     * 处理开始编辑事件
     */
    EditableDirective.prototype.handleBeginEditEvent = function () {
        var _this = this;
        this.beginEditSubscription = this.grid.beginEdit.subscribe(function (e) {
            if (!e) {
                return;
            }
            var column = e.column;
            if (column && column.editor) {
                var editorInstance_1 = e.editor.componentRef.instance;
                if (!editorInstance_1 || !editorInstance_1.instance) {
                    return;
                }
                var mapFields_1 = editorInstance_1.instance.mapFields;
                if (column.editor.type === 'lookup' || column.editor.type === 'PersonnelSelector' || column.editor.type === 'OrganizationSelector' || column.editor.type === 'external-integration' || 'EmployeeSelector' === column.editor.type || 'EmployeeOrgSelector' === column.editor.type) {
                    var lookupGrid_1 = editorInstance_1.instance;
                    var subject = editorInstance_1.instance.selectedData;
                    if (subject) {
                        subject.subscribe(function (data) {
                            mapFields_1 = editorInstance_1.instance.mapFields;
                            var spliter = lookupGrid_1.multipleChoiceSeparator || _this.defaultSpliter;
                            _this.lookupMapping(data, mapFields_1, false, spliter);
                        });
                    }
                    var clearMappings = editorInstance_1.instance.clearMappings;
                    if (clearMappings) {
                        clearMappings.subscribe(function (result) {
                            var mapFields = Object.assign({}, editorInstance_1.instance.mapFields);
                            var value = result && result.value || null;
                            var binding = editorInstance_1.column && editorInstance_1.column.field;
                            var lookupTextField = editorInstance_1.instance.textField;
                            var data = {};
                            if (binding) {
                                var textFieldMapping = mapFields[lookupTextField];
                                if (textFieldMapping) {
                                    var otherField = textFieldMapping.split(',').filter(function (item) { return item !== binding; }).join(',');
                                    if (otherField) {
                                        mapFields[lookupTextField] = otherField;
                                    }
                                    else {
                                        delete mapFields[lookupTextField];
                                    }
                                }
                                var parentPaths = _this.getBindingPathArray();
                                _this.bindingData.setValue(parentPaths.concat(binding.split('.')), value, true, true);
                            }
                            // this.setValue(data, lookupTextField.split('.'), value);
                            if (mapFields && Object.keys(mapFields).length > 0) {
                                Object.keys(mapFields).forEach(function (field) {
                                    _this.setValue(data, field.split('.'), '');
                                });
                                _this.lookupMapping(data, mapFields, true);
                            }
                        });
                    }
                }
                if (column.editor.type === 'combo-lookup') {
                    editorInstance_1.instance.valueChange.subscribe(function (e) {
                        var asClear = e && e.selections && e.selections.length === 0;
                        var comboLookup = editorInstance_1.instance;
                        mapFields_1 = editorInstance_1.instance.mapFields;
                        var spliter = comboLookup.separator || _this.defaultSpliter;
                        _this.lookupMapping(e.selections || [], mapFields_1, asClear, spliter);
                    });
                }
                if (['combo-lookup', 'combolist', 'lookup', 'PersonnelSelector', 'OrganizationSelector', 'external-integration', 'EmployeeSelector', 'EmployeeOrgSelector'].includes(column.editor.type)) {
                    if (editorInstance_1.instance.clear && editorInstance_1.instance.clear.subscribe) {
                        editorInstance_1.instance.clear.subscribe(function () {
                            _this.lookupMapping(null, mapFields_1);
                        });
                    }
                }
                if (column.editor.type === 'combolist') {
                    if (mapFields_1) {
                        editorInstance_1.instance.valueChange.subscribe(function (e) {
                            var pathArr = _this.getBindingPathArray();
                            _this.viewModel.bindingData.setValue(pathArr.concat(mapFields_1.split('.')), editorInstance_1.instance.selectedValues, true, true);
                        });
                    }
                }
            }
        });
    };
    /**
     * 处理编辑事件
     */
    EditableDirective.prototype.handleAfterEditEvent = function () {
        var _this = this;
        this.grid.afterEdit = function (rowIndex, rowData, column, editor) {
            if (_this.dialogSer.hasDialogOpened()) {
                return of(false);
            }
            if (_this.rts) {
                // 帮助组件文本变化后去查询
                if (_this.rts.getFormState('lookup.pending')) {
                    return of(false);
                }
            }
            // 更新数据源
            if (!editor || !editor.formControl) {
                return of(false);
            }
            return of(true);
        };
    };
    /**
     * 处理结束编辑事件
     */
    EditableDirective.prototype.handleEndEditEvent = function () {
        var _this = this;
        this.endEditSubscription = this.grid && this.grid.endEdit && this.grid.endEdit.subscribe(function (event) {
            var _a = event || {}, _b = _a.value, value = _b === void 0 ? undefined : _b, _c = _a.column, column = _c === void 0 ? undefined : _c, _d = _a.rowData, rowData = _d === void 0 ? {} : _d;
            var primaryValue = rowData && rowData[_this.grid.idField] || null;
            _this.updateBindingData(value, column, primaryValue);
        });
    };
    /*
     * 给列表赋值 或给formcontrol赋值
     */
    EditableDirective.prototype.updateBindingData = function (value, column, primaryValue) {
        if (!column) {
            return;
        }
        var currentColumnType = column.dataType;
        // 同时判断gridOption的列对象
        var fieldPaths = column.field.split('.');
        // 是否为大数
        var isBigNumber = column && column.editor && column.editor.options && column.editor.options.bigNumber;
        // 存在行编辑器
        if (currentColumnType === 'date') {
            var result = void 0;
            if (value) {
                result = this.dateService.formatTo(value, 'yyyy-MM-dd');
            }
            else {
                result = value;
            }
            this.updateBindingList(primaryValue, fieldPaths.join('.'), result);
        }
        else if (currentColumnType === 'datetime') {
            // if (!value) {
            //   value = '0001-01-01T00:00:00';
            // }
            this.updateBindingList(primaryValue, fieldPaths.join('.'), value);
        }
        else if (currentColumnType === 'number' && !isBigNumber) {
            if (value === null || value === undefined) {
                this.updateBindingList(primaryValue, fieldPaths.join('.'), null);
            }
            else {
                this.updateBindingList(primaryValue, fieldPaths.join('.'), Number(value));
            }
        }
        else {
            this.updateBindingList(primaryValue, fieldPaths.join('.'), value);
        }
    };
    EditableDirective.prototype.updateBindingList = function (primaryValue, propertyName, value) {
        var viewModel = this.viewModel || null;
        if (!viewModel || !propertyName) {
            return;
        }
        // 更新主表部分行的字段
        var propertyNames = propertyName.split('.').filter(function (item) { return item; });
        var bindingPath = this.getBindingPathArray();
        // 取出来的一定是bindingList
        var list = this.bindingData.getValue(bindingPath);
        // 修改的是当前行
        if (list && primaryValue === list.currentItem.primaryKeyValue) {
            var paths = bindingPath.concat(propertyNames);
            this.bindingData.setValue(paths, value, true, true);
            return;
        }
        var bindingObject = this.bindingList.findById(primaryValue);
        if (!bindingObject) {
            return;
        }
        if (propertyNames.length < 2) {
            bindingObject.setValue(propertyName, value, true, true);
        }
        else {
            var targetBindingObject_1 = null;
            var fpaths = propertyNames.slice(0, propertyNames.length - 1);
            var targetPropertyName = propertyNames[propertyNames.length - 1];
            fpaths.forEach(function (prop) {
                targetBindingObject_1 = targetBindingObject_1 && targetBindingObject_1[prop] || bindingObject[prop];
            });
            // todo:需要添加值变化事件
            targetBindingObject_1.setValue(targetPropertyName, value, true, true);
        }
    };
    EditableDirective.prototype.detach = function () {
        if (this.beginEditSubscription && typeof this.beginEditSubscription.unsubscribe === 'function') {
            this.beginEditSubscription.unsubscribe();
        }
        if (this.endEditSubscription && typeof this.endEditSubscription.unsubscribe === 'function') {
            this.endEditSubscription.unsubscribe();
        }
    };
    //#region 帮助字段映射
    EditableDirective.prototype.lookupMapping = function (helpData, mapFields, asClear, spliter) {
        var _this = this;
        if (asClear === void 0) { asClear = false; }
        if (spliter === void 0) { spliter = ','; }
        if (!mapFields) {
            return;
        }
        // 关闭变更检测
        var appContext = this.viewModel.frameContext.appContext;
        appContext.changeDetectionController.detach();
        var pathArr = this.getBindingPathArray();
        var helpFields = Object.keys(mapFields);
        var primaryInfo = this.getMapFieldsPrimaryKey(mapFields, pathArr);
        var primaryKeys = primaryInfo && primaryInfo.map(function (item) { return item.primaryKey; }) || [];
        var primaryFields = primaryInfo && primaryInfo.map(function (item) { return item.primaryField; }) || [];
        // 去重
        if (primaryKeys && primaryKeys.length > 0) {
            primaryKeys = tslib_1.__spread(new Set(primaryKeys));
            helpFields = this.sortMapFieldKeys(helpFields, primaryKeys);
        }
        if (!helpData || asClear) {
            helpFields.reverse();
        }
        helpFields.forEach(function (f) {
            var val = '';
            if (helpData) {
                if (helpData instanceof Array) {
                    val = helpData.map(function (h) {
                        return _this.getValue(f, h);
                    }).join(spliter);
                }
                else {
                    val = _this.getValue(f, helpData);
                }
            }
            var mappings = mapFields[f].split(',');
            var headMappings = mappings.filter(function (p) { return primaryFields.includes(p); });
            var leftMappings = mappings.filter(function (p) { return !primaryFields.includes(p); });
            if (!helpData) {
                mappings = [].concat(leftMappings).concat(headMappings);
            }
            else {
                mappings = [].concat(headMappings).concat(leftMappings);
            }
            mappings.forEach(function (ff) {
                if (!helpData) {
                    _this.viewModel.bindingData.clearValue(pathArr.concat(ff.split('.')), true, true);
                }
                else {
                    _this.viewModel.bindingData.setValue(pathArr.concat(ff.split('.')), val, true, true);
                }
            });
        });
        // 重新打开变更检测
        appContext.changeDetectionController.reattach();
    };
    EditableDirective.prototype.getValue = function (f, data) {
        var val = '';
        if (f.indexOf('.') === -1) {
            val = data[f];
        }
        else {
            val = f.split('.').reduce(function (a, b) {
                return a[b];
            }, data);
        }
        return val;
    };
    EditableDirective.prototype.getBindingPathArray = function () {
        var path = this.viewModel.bindingPath;
        if (path) {
            return path.split('/').filter(function (n) { return n !== ''; });
        }
        return [];
    };
    EditableDirective.prototype.isNumberValue = function (field, data) {
        var currentVal = this.getValue(field, data);
        return isNumber(currentVal);
    };
    //#endregion
    /**
     *
     * @param mapFields  格式形如：{id: "assoField.assoField", code: "assoField.assoField_Code", name: "assoField.assoField_Name"} 或者 {id:'vid',code:'code',name:'name'}
     */
    EditableDirective.prototype.getMapFieldsPrimaryKey = function (mapFields, bindingPaths) {
        if (!mapFields || Object.keys(mapFields).length < 1) {
            return null;
        }
        var results = [];
        // let primaryField = null;
        try {
            var entityTypeInfo_1 = this.viewModel.frameContext.repository.entityTypeInfo;
            Object.keys(mapFields).forEach(function (key) {
                var mapField = mapFields[key];
                if (mapField && typeof mapField === 'string') {
                    var mappings = mapField.split(',').filter(function (p) { return p; });
                    mappings.forEach(function (item) {
                        var paths = item.split('.');
                        if (bindingPaths && bindingPaths.length > 0) {
                            paths = bindingPaths.concat(paths);
                        }
                        var propInfo = entityTypeInfo_1.getPropInfoByPath(paths);
                        if (propInfo && propInfo.metadataInfo && propInfo.metadataInfo.primary === true) {
                            results.push({
                                primaryKey: key,
                                primaryField: item
                            });
                        }
                    });
                }
            });
        }
        catch (e) {
            console.error(e);
        }
        return results;
    };
    EditableDirective.prototype.setValue = function (target, paths, value) {
        if (target) {
            if (paths.length <= 1) {
                target[paths[0]] = value;
            }
            else {
                paths.slice(0, -1).reduce(function (prev, path) {
                    if (!(prev.hasOwnProperty(path) || prev['__proto__'].hasOwnProperty(path))) {
                        prev[path] = {};
                    }
                    return prev[path];
                }, target)[paths[paths.length - 1]] = value;
            }
        }
    };
    EditableDirective.prototype.sortMapFieldKeys = function (keys, primaryKeys) {
        if (!primaryKeys || primaryKeys.length < 1 || !keys || keys.length < 1) {
            return keys;
        }
        // 过滤出非主键映射字段
        keys = keys.filter(function (p) { return !primaryKeys.includes(p); });
        return [].concat(primaryKeys).concat(keys);
    };
    EditableDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farris-datagrid-editable]'
                },] }
    ];
    /** @nocollapse */
    EditableDirective.ctorParameters = function () { return [
        { type: BindingData },
        { type: ViewModel },
        { type: DatagridComponent },
        { type: DateTimeHelperService },
        { type: Injector },
        { type: RuntimeStateService },
        { type: DialogService },
        { type: NgZone }
    ]; };
    EditableDirective.propDecorators = {
        gridEditable: [{ type: Input, args: ['farris-datagrid-editable',] }],
        disableGroupOnEditing: [{ type: Input, args: ['disableGroupOnEditing',] }]
    };
    return EditableDirective;
}());
export { EditableDirective };
//# sourceMappingURL=data:application/json;base64,