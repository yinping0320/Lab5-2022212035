import { ChangeDetectorRef, Directive, ElementRef, Injector, Input } from '@angular/core';
import { DatagridComponent } from '@farris/ui-datagrid';
import { FrameContext } from '@farris/devkit';
var CustomDatagridSizeDirective = /** @class */ (function () {
    function CustomDatagridSizeDirective(dg, injector, cd, el, frameContext) {
        this.dg = dg;
        this.injector = injector;
        this.cd = cd;
        this.el = el;
        this.frameContext = frameContext;
        this.useCustomSize = false;
        this.sizeApiUri = '';
    }
    CustomDatagridSizeDirective.prototype.restService = function () {
        return this.frameContext.repository.restService;
    };
    CustomDatagridSizeDirective.prototype.ngOnInit = function () {
    };
    CustomDatagridSizeDirective.prototype.ngOnChanges = function (changes) {
        if (changes.sizeApiUri && !changes.sizeApiUri.isFirstChange()) {
            this.applyNewSize();
        }
    };
    CustomDatagridSizeDirective.prototype.ngAfterViewInit = function () {
        this.applyNewSize();
    };
    CustomDatagridSizeDirective.prototype.applyNewSize = function () {
        var _this = this;
        if (this.useCustomSize && this.sizeApiUri) {
            this.getSizeConfig().subscribe(function (cfg) {
                if (_this.dg && typeof _this.dg.applyNewSize === 'function') {
                    _this.dg.applyNewSize(cfg);
                }
            });
        }
    };
    CustomDatagridSizeDirective.prototype.getSizeConfig = function () {
        return this.restService().request(this.sizeApiUri, 'get');
    };
    CustomDatagridSizeDirective.decorators = [
        { type: Directive, args: [{ selector: '[custom-size]' },] }
    ];
    /** @nocollapse */
    CustomDatagridSizeDirective.ctorParameters = function () { return [
        { type: DatagridComponent },
        { type: Injector },
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: FrameContext }
    ]; };
    CustomDatagridSizeDirective.propDecorators = {
        useCustomSize: [{ type: Input, args: ['custom-size',] }],
        sizeApiUri: [{ type: Input }]
    };
    return CustomDatagridSizeDirective;
}());
export { CustomDatagridSizeDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLXNpemUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9rZW5kby1iaW5kaW5nLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvZmFycmlzLWRhdGFncmlkL2N1c3RvbS1zaXplLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWlCLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBb0MsTUFBTSxlQUFlLENBQUM7QUFDM0ksT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBYTlDO0lBU0UscUNBQW9CLEVBQXFCLEVBQVUsUUFBa0IsRUFBVSxFQUFxQixFQUFVLEVBQWMsRUFDbEgsWUFBMEI7UUFEaEIsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVUsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFBVSxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQ2xILGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBUmQsa0JBQWEsR0FBRyxLQUFLLENBQUM7UUFDbkMsZUFBVSxHQUFHLEVBQUUsQ0FBQztJQU9lLENBQUM7SUFMakMsaURBQVcsR0FBbkI7UUFDRSxPQUFRLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBNEIsQ0FBQyxXQUFXLENBQUM7SUFDckUsQ0FBQztJQUtELDhDQUFRLEdBQVI7SUFFQSxDQUFDO0lBRUQsaURBQVcsR0FBWCxVQUFZLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLFVBQVUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLEVBQUU7WUFDN0QsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1NBQ3JCO0lBQ0gsQ0FBQztJQUVELHFEQUFlLEdBQWY7UUFDRSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVPLGtEQUFZLEdBQXBCO1FBQUEsaUJBUUM7UUFQQyxJQUFJLElBQUksQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUN6QyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsU0FBUyxDQUFDLFVBQUMsR0FBZTtnQkFDN0MsSUFBSSxLQUFJLENBQUMsRUFBRSxJQUFJLE9BQU8sS0FBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEtBQUssVUFBVSxFQUFFO29CQUN6RCxLQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztpQkFDM0I7WUFDSCxDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUdPLG1EQUFhLEdBQXJCO1FBQ0UsT0FBTyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDNUQsQ0FBQzs7Z0JBdkNGLFNBQVMsU0FBQyxFQUFFLFFBQVEsRUFBRSxlQUFlLEVBQUU7Ozs7Z0JBZC9CLGlCQUFpQjtnQkFEd0MsUUFBUTtnQkFBbEQsaUJBQWlCO2dCQUFhLFVBQVU7Z0JBRXZELFlBQVk7OztnQ0FlbEIsS0FBSyxTQUFDLGFBQWE7NkJBQ25CLEtBQUs7O0lBcUNSLGtDQUFDO0NBQUEsQUF4Q0QsSUF3Q0M7U0F2Q1ksMkJBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5qZWN0b3IsIElucHV0LCBPbkluaXQsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZENvbXBvbmVudCB9IGZyb20gJ0BmYXJyaXMvdWktZGF0YWdyaWQnO1xyXG5pbXBvcnQgeyBGcmFtZUNvbnRleHQgfSBmcm9tICdAZmFycmlzL2RldmtpdCc7XHJcbmltcG9ydCB7IEJlZlJlcG9zaXRvcnksIEJlZlJlc3RTZXJ2aWNlIH0gZnJvbSAnLi4vYXBwb2ludG1lbnQtY2FsZW5kYXIvdHlwZXMnO1xyXG5cclxudHlwZSBTaXplQ29uZmlnID0ge1xyXG4gICdoZWFkZXJIZWlnaHQnPzogbnVtYmVyLFxyXG4gICdmb290ZXJIZWlnaHQnPzogbnVtYmVyLFxyXG4gICdyb3dIZWlnaHQnPzogbnVtYmVyLFxyXG4gICdjaGVja2JveENvbHVtbldpZHRoJz86IG51bWJlcixcclxuICAnbGluZU51bWJlcldpZHRoJz86IG51bWJlcixcclxuICAnZmlsdGVyUm93SGVpZ2h0Jz86IG51bWJlclxyXG59O1xyXG5cclxuXHJcbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tjdXN0b20tc2l6ZV0nIH0pXHJcbmV4cG9ydCBjbGFzcyBDdXN0b21EYXRhZ3JpZFNpemVEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQsIE9uQ2hhbmdlcyB7XHJcbiAgQElucHV0KCdjdXN0b20tc2l6ZScpIHVzZUN1c3RvbVNpemUgPSBmYWxzZTtcclxuICBASW5wdXQoKSBzaXplQXBpVXJpID0gJyc7XHJcblxyXG4gIHByaXZhdGUgcmVzdFNlcnZpY2UoKTogQmVmUmVzdFNlcnZpY2Uge1xyXG4gICAgcmV0dXJuICh0aGlzLmZyYW1lQ29udGV4dC5yZXBvc2l0b3J5IGFzIEJlZlJlcG9zaXRvcnkpLnJlc3RTZXJ2aWNlO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBkZzogRGF0YWdyaWRDb21wb25lbnQsIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCBwcml2YXRlIGNkOiBDaGFuZ2VEZXRlY3RvclJlZiwgcHJpdmF0ZSBlbDogRWxlbWVudFJlZixcclxuICAgIHByaXZhdGUgZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQpIHsgfVxyXG5cclxuICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuXHJcbiAgfVxyXG5cclxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcbiAgICBpZiAoY2hhbmdlcy5zaXplQXBpVXJpICYmICFjaGFuZ2VzLnNpemVBcGlVcmkuaXNGaXJzdENoYW5nZSgpKSB7XHJcbiAgICAgIHRoaXMuYXBwbHlOZXdTaXplKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XHJcbiAgICB0aGlzLmFwcGx5TmV3U2l6ZSgpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhcHBseU5ld1NpemUoKSB7XHJcbiAgICBpZiAodGhpcy51c2VDdXN0b21TaXplICYmIHRoaXMuc2l6ZUFwaVVyaSkge1xyXG4gICAgICB0aGlzLmdldFNpemVDb25maWcoKS5zdWJzY3JpYmUoKGNmZzogU2l6ZUNvbmZpZykgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLmRnICYmIHR5cGVvZiB0aGlzLmRnLmFwcGx5TmV3U2l6ZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgdGhpcy5kZy5hcHBseU5ld1NpemUoY2ZnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcblxyXG4gIHByaXZhdGUgZ2V0U2l6ZUNvbmZpZygpIHtcclxuICAgIHJldHVybiB0aGlzLnJlc3RTZXJ2aWNlKCkucmVxdWVzdCh0aGlzLnNpemVBcGlVcmksICdnZXQnKTtcclxuICB9XHJcbn1cclxuIl19