import { Directive, Input } from '@angular/core';
import { ViewModel } from '@farris/devkit';
import { DatagridComponent } from '@farris/ui-datagrid';
var FarrisDataGridRemoteSummaryDirective = /** @class */ (function () {
    function FarrisDataGridRemoteSummaryDirective(viewModel, grid) {
        var _this = this;
        this.viewModel = viewModel;
        this.grid = grid;
        var appContext = this.viewModel.frameContext.getFormAppContext();
        if (appContext && appContext.hasOwnProperty('messagePipe')) {
            appContext.messagePipe.subscribe(function (message) {
                var messageType = message && message.type || null;
                // 查询事件
                if (messageType === 'query') {
                    if (_this.remoteSummaryCommand && _this.grid.footerDataFrom === 'server') {
                        var paths = _this.remoteSummaryCommand.split('.');
                        var func_1 = null;
                        paths.forEach(function (path) {
                            func_1 = func_1 && func_1[path] || _this[path];
                        });
                        if (typeof func_1 === 'function') {
                            func_1().subscribe(function (result) {
                                _this.grid.footerData = result;
                            });
                        }
                    }
                }
            });
        }
    }
    /**
     * 执行命令
     * @param commandName 命令名称
     * @param frameId frameId
     */
    FarrisDataGridRemoteSummaryDirective.prototype.execute = function (commandName, frameId) {
        if (!commandName || commandName === '' || commandName === 'undefined') {
            return;
        }
        var viewModel = this.viewModel;
        if (frameId) {
            var targetContext = viewModel.frameContext.appContext.frameContextManager.getFrameContextById(frameId);
            viewModel = targetContext.viewModel;
        }
        return viewModel[commandName]();
    };
    FarrisDataGridRemoteSummaryDirective.decorators = [
        { type: Directive, args: [{
                    selector: "[farris-remote-summary-command]"
                },] }
    ];
    /** @nocollapse */
    FarrisDataGridRemoteSummaryDirective.ctorParameters = function () { return [
        { type: ViewModel },
        { type: DatagridComponent }
    ]; };
    FarrisDataGridRemoteSummaryDirective.propDecorators = {
        remoteSummaryCommand: [{ type: Input, args: ['farris-remote-summary-command',] }]
    };
    return FarrisDataGridRemoteSummaryDirective;
}());
export { FarrisDataGridRemoteSummaryDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVtb3RlLXN1bW1hcnkuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9rZW5kby1iaW5kaW5nLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvZmFycmlzLWRhdGFncmlkL3JlbW90ZS1zdW1tYXJ5LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVqRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHeEQ7SUFTRSw4Q0FBbUIsU0FBb0IsRUFBUyxJQUF1QjtRQUF2RSxpQkFzQkM7UUF0QmtCLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFBUyxTQUFJLEdBQUosSUFBSSxDQUFtQjtRQUNyRSxJQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ25FLElBQUksVUFBVSxJQUFJLFVBQVUsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFDMUQsVUFBVSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsVUFBQyxPQUFZO2dCQUM1QyxJQUFNLFdBQVcsR0FBRyxPQUFPLElBQUksT0FBTyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUM7Z0JBQ3BELE9BQU87Z0JBQ1AsSUFBSSxXQUFXLEtBQUssT0FBTyxFQUFFO29CQUMzQixJQUFJLEtBQUksQ0FBQyxvQkFBb0IsSUFBSSxLQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsS0FBSyxRQUFRLEVBQUU7d0JBQ3RFLElBQU0sS0FBSyxHQUFHLEtBQUksQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7d0JBQ25ELElBQUksTUFBSSxHQUFHLElBQUksQ0FBQzt3QkFDaEIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFBLElBQUk7NEJBQ2hCLE1BQUksR0FBRyxNQUFJLElBQUksTUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzt3QkFDMUMsQ0FBQyxDQUFDLENBQUM7d0JBQ0gsSUFBSSxPQUFPLE1BQUksS0FBSyxVQUFVLEVBQUU7NEJBQzlCLE1BQUksRUFBRSxDQUFDLFNBQVMsQ0FBQyxVQUFBLE1BQU07Z0NBQ3JCLEtBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQzs0QkFDaEMsQ0FBQyxDQUFDLENBQUM7eUJBQ0o7cUJBQ0Y7aUJBQ0Y7WUFDSCxDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUNEOzs7O09BSUc7SUFDSyxzREFBTyxHQUFmLFVBQWdCLFdBQW1CLEVBQUUsT0FBZ0I7UUFDbkQsSUFBSSxDQUFDLFdBQVcsSUFBSSxXQUFXLEtBQUssRUFBRSxJQUFJLFdBQVcsS0FBSyxXQUFXLEVBQUU7WUFDckUsT0FBTztTQUNSO1FBQ0QsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUMvQixJQUFJLE9BQU8sRUFBRTtZQUNYLElBQU0sYUFBYSxHQUFHLFNBQVMsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3pHLFNBQVMsR0FBRyxhQUFhLENBQUMsU0FBUyxDQUFDO1NBQ3JDO1FBQ0QsT0FBTyxTQUFTLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQztJQUNsQyxDQUFDOztnQkEvQ0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxpQ0FBaUM7aUJBQzVDOzs7O2dCQU5RLFNBQVM7Z0JBQ1QsaUJBQWlCOzs7dUNBVXZCLEtBQUssU0FBQywrQkFBK0I7O0lBMEN4QywyQ0FBQztDQUFBLEFBakRELElBaURDO1NBOUNZLG9DQUFvQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBWaWV3TW9kZWwgfSBmcm9tICdAZmFycmlzL2RldmtpdCc7XHJcbmltcG9ydCB7IERhdGFncmlkQ29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy91aS1kYXRhZ3JpZCc7XHJcblxyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6IFwiW2ZhcnJpcy1yZW1vdGUtc3VtbWFyeS1jb21tYW5kXVwiXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGYXJyaXNEYXRhR3JpZFJlbW90ZVN1bW1hcnlEaXJlY3RpdmUge1xyXG4gIC8qKlxyXG4gICAqIOacjeWKoeWZqOerr+WQiOiuoeWRveS7pOWQjeensFxyXG4gICAqL1xyXG4gIEBJbnB1dCgnZmFycmlzLXJlbW90ZS1zdW1tYXJ5LWNvbW1hbmQnKSByZW1vdGVTdW1tYXJ5Q29tbWFuZDogc3RyaW5nO1xyXG5cclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgdmlld01vZGVsOiBWaWV3TW9kZWwsIHB1YmxpYyBncmlkOiBEYXRhZ3JpZENvbXBvbmVudCkge1xyXG4gICAgY29uc3QgYXBwQ29udGV4dCA9IHRoaXMudmlld01vZGVsLmZyYW1lQ29udGV4dC5nZXRGb3JtQXBwQ29udGV4dCgpO1xyXG4gICAgaWYgKGFwcENvbnRleHQgJiYgYXBwQ29udGV4dC5oYXNPd25Qcm9wZXJ0eSgnbWVzc2FnZVBpcGUnKSkge1xyXG4gICAgICBhcHBDb250ZXh0Lm1lc3NhZ2VQaXBlLnN1YnNjcmliZSgobWVzc2FnZTogYW55KSA9PiB7XHJcbiAgICAgICAgY29uc3QgbWVzc2FnZVR5cGUgPSBtZXNzYWdlICYmIG1lc3NhZ2UudHlwZSB8fCBudWxsO1xyXG4gICAgICAgIC8vIOafpeivouS6i+S7tlxyXG4gICAgICAgIGlmIChtZXNzYWdlVHlwZSA9PT0gJ3F1ZXJ5Jykge1xyXG4gICAgICAgICAgaWYgKHRoaXMucmVtb3RlU3VtbWFyeUNvbW1hbmQgJiYgdGhpcy5ncmlkLmZvb3RlckRhdGFGcm9tID09PSAnc2VydmVyJykge1xyXG4gICAgICAgICAgICBjb25zdCBwYXRocyA9IHRoaXMucmVtb3RlU3VtbWFyeUNvbW1hbmQuc3BsaXQoJy4nKTtcclxuICAgICAgICAgICAgbGV0IGZ1bmMgPSBudWxsO1xyXG4gICAgICAgICAgICBwYXRocy5mb3JFYWNoKHBhdGggPT4ge1xyXG4gICAgICAgICAgICAgIGZ1bmMgPSBmdW5jICYmIGZ1bmNbcGF0aF0gfHwgdGhpc1twYXRoXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZnVuYyA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgIGZ1bmMoKS5zdWJzY3JpYmUocmVzdWx0ID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ3JpZC5mb290ZXJEYXRhID0gcmVzdWx0O1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICog5omn6KGM5ZG95LukXHJcbiAgICogQHBhcmFtIGNvbW1hbmROYW1lIOWRveS7pOWQjeensFxyXG4gICAqIEBwYXJhbSBmcmFtZUlkIGZyYW1lSWRcclxuICAgKi9cclxuICBwcml2YXRlIGV4ZWN1dGUoY29tbWFuZE5hbWU6IHN0cmluZywgZnJhbWVJZD86IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBpZiAoIWNvbW1hbmROYW1lIHx8IGNvbW1hbmROYW1lID09PSAnJyB8fCBjb21tYW5kTmFtZSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgbGV0IHZpZXdNb2RlbCA9IHRoaXMudmlld01vZGVsO1xyXG4gICAgaWYgKGZyYW1lSWQpIHtcclxuICAgICAgY29uc3QgdGFyZ2V0Q29udGV4dCA9IHZpZXdNb2RlbC5mcmFtZUNvbnRleHQuYXBwQ29udGV4dC5mcmFtZUNvbnRleHRNYW5hZ2VyLmdldEZyYW1lQ29udGV4dEJ5SWQoZnJhbWVJZCk7XHJcbiAgICAgIHZpZXdNb2RlbCA9IHRhcmdldENvbnRleHQudmlld01vZGVsO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZpZXdNb2RlbFtjb21tYW5kTmFtZV0oKTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==