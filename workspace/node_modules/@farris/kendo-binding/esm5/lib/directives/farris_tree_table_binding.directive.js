/*
 * @Author: aalizzwell
 * @Date: 2020-02-27 11:33:41
 * @Last Modified by: aalizzwell
 * @Last Modified time: 2020-02-27 11:34:16
 */
// tslint:disable: no-string-literal
import { Directive, Input, HostListener, Output, EventEmitter } from '@angular/core';
import { FrameContext, ChangeType, ComponentType } from '@farris/devkit';
import { TreeTableComponent } from '@farris/ui-treetable';
import { Subject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { FarrisTreetableFormatService } from '../format/index';
import { TreeNodeBuilderFactory } from './tree_table_node_builder/tree_node_builder_factory';
/**
 * 树表格绑定指令
 */
var FarrisTreeTableBindingDirective = /** @class */ (function () {
    /**
     * 构造函数
     */
    function FarrisTreeTableBindingDirective(treeTable, treetableFormatSer, frameContext) {
        var _this = this;
        this.treeTable = treeTable;
        this.treetableFormatSer = treetableFormatSer;
        this.frameContext = frameContext;
        this.renderSubject = new Subject();
        /**
         * 启用节点分页
         */
        // @Input('enableNodePagination')
        // public enableNodePagination: boolean;
        /**
         * 节点分页大小
         */
        this.nodePageSize = 100;
        /* 设置行样式 */
        this.rowClass = new EventEmitter();
        /* 设置列样式 */
        this.cellClass = new EventEmitter();
        this._PROP = null;
        this.listeners = [];
        this.storage = [];
        this.viewModel.uiState.setPropertyValue('ids', this.treeTable.checkValues);
        this.renderSubject.pipe(debounceTime(500)).subscribe(function () {
            _this.bindData();
        });
    }
    Object.defineProperty(FarrisTreeTableBindingDirective.prototype, "bindingData", {
        /**
         * 绑定数据
         */
        get: function () {
            return this.frameContext.bindingData;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisTreeTableBindingDirective.prototype, "bindingList", {
        /**
         * 绑定数据列表
         */
        get: function () {
            // @todo：只支持主表，没有处理bindingPath
            return this.bindingData.list;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisTreeTableBindingDirective.prototype, "prop", {
        get: function () {
            return this._PROP;
        },
        set: function (value) {
            this._PROP = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisTreeTableBindingDirective.prototype, "viewModel", {
        /**
         * 获取当前vm
         */
        get: function () {
            return this.frameContext.viewModel;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 指令初始化
     */
    FarrisTreeTableBindingDirective.prototype.ngOnInit = function () {
        var _this = this;
        // 将分级码信息保存到root-component，而非整个表单的app-context
        var virtualRootFrameContext = this.frameContext.getVirtualRootFrameContext();
        virtualRootFrameContext.setParam('hierarchyInfoKey', this.hierarchyInfoKey);
        this.bindData();
        this.bindingData.changes.subscribe(function (change) {
            if (change && (change.type === ChangeType.ValueChanged || change.type === ChangeType.PaginationInfoChange)) {
                _this.renderSubject.next(change);
            }
            else {
                _this.bindData();
            }
            // 设置当前行
            var currentId = _this.bindingList.currentId;
            if (!_this.frameContext.bindingData.rowSelectedEventSuspend && currentId) {
                _this.setSelectedIdToTree(_this.bindingList.currentId);
            }
            _this.updateCheckedRows(change);
        });
        // 设置 树表 格式化
        this.treetableFormatSer.setFormat(this.treeTable);
        /* 行样式 */
        this.rowClass.emit(this.treeTable);
        /* 列样式  单元格样式 */
        this.cellClass.emit(this.treeTable);
        this.setComponentRef();
        this.setNodePaginationInfo();
        this.registerEvent();
        if (this.frameContext && this.frameContext.frameComponent) {
            this.frameContext.frameComponent.componentType = ComponentType.farrisTreeTalbeComponent;
        }
    };
    /**
     * 指令输入变更
     */
    FarrisTreeTableBindingDirective.prototype.ngOnChanges = function (changes) {
    };
    FarrisTreeTableBindingDirective.prototype.registerEvent = function () {
        var _this = this;
        this.treeTable.columnSorted.subscribe(function (event) {
            var _a = event.sortName, sortName = _a === void 0 ? null : _a, _b = event.sortOrder, sortOrder = _b === void 0 ? null : _b;
            var remoteSort = _this.treeTable.remoteSort;
            if (remoteSort === false) {
                if (sortName && sortOrder) {
                    _this.bindingList.sortBy(sortName, sortOrder);
                }
            }
            _this.bindData();
        });
    };
    /**
     * 收集树组件实例
     */
    FarrisTreeTableBindingDirective.prototype.setComponentRef = function () {
        var appContext = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.getFormAppContext();
        var frameId = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.frameId;
        var id = this.treeTable && this.treeTable.el.nativeElement.id || null;
        // 如果frameId不存在或treetable没有id属性，说明不符合使用场景
        if (!frameId || !id) {
            return;
        }
        var map = appContext && appContext.componentRefs && appContext.componentRefs.get(frameId) || new Map();
        appContext && appContext.componentRefs && appContext.componentRefs.set(frameId, map.set(id, this.treeTable));
    };
    FarrisTreeTableBindingDirective.prototype.setNodePaginationInfo = function () {
        if (this.frameContext) {
            var enableNodePagination = this.treeTable.paginationForChildren || false; //this.enableNodePagination || false;
            this.frameContext.params.set('enableNodePagination', enableNodePagination);
            var nodePageSize = this.nodePageSize || 0;
            this.frameContext.params.set('nodePageSize', nodePageSize);
        }
    };
    /**
     * 绑定数据
     */
    FarrisTreeTableBindingDirective.prototype.bindData = function () {
        var oldTreeNodes = this.treeTable.data;
        var treeNodesData = this.bindingList.toJSON({ ignoreMultiLangInput: true });
        // if (!this.shouldComponentUpdate(treeNodesData)) {
        //   return;
        // }
        this.prop = treeNodesData;
        var treeNodes = [];
        if (!!treeNodesData && treeNodesData.length > 0) {
            var hierarchyInfo = treeNodesData[0][this.hierarchyInfoKey];
            var builder = this.builder;
            if (!builder) {
                this.builder = TreeNodeBuilderFactory.getBuilder(hierarchyInfo);
                builder = this.builder;
            }
            // 服务器返回的分级节点信息匹配不到现有工厂里面的任何一种情况。确认新加的builder已经在工厂中注册
            if (builder == null) {
                throw new Error('TreeTable builder is null!');
            }
            var expandLevel = -1;
            var treeExpandLevel = this.treeTable['expandLevel'];
            if (typeof treeExpandLevel !== 'undefined') {
                expandLevel = treeExpandLevel;
            }
            var virtualRootFrameContext = this.frameContext.getVirtualRootFrameContext();
            var nodesShouldExpand = (virtualRootFrameContext.params.get('_DEVKIT_expandRowIds') || '').split(',') || [];
            var context = {
                expandLevel: expandLevel,
                addTreeLoadCompleteListener: this.addTreeLoadCompleteListener.bind(this),
                component: this.treeTable,
                storage: this.storage,
                nodesShouldExpand: nodesShouldExpand,
                frameContext: this.frameContext,
            };
            //if (!this.treeNodesBuilder) {
            this.treeNodesBuilder = new builder(treeNodesData, oldTreeNodes, this.bindingList.primaryKey, this.hierarchyInfoKey, context);
            //}
            // this.treeNodesBuilder.updateTreeNode(treeNodesData, oldTreeNodes);
            treeNodes = this.treeNodesBuilder.build();
        }
        this.treeTable.data = treeNodes;
        // 设置分页信息
        this.updatePageInfo(this.treeTable);
        this.onTreeLoadComplete();
    };
    FarrisTreeTableBindingDirective.prototype.onTreeLoadComplete = function () {
        if (this.listeners && this.listeners.length > 0) {
            this.listeners.forEach(function (listener) {
                listener();
            });
        }
    };
    FarrisTreeTableBindingDirective.prototype.addTreeLoadCompleteListener = function (listener) {
        this.listeners.push(listener);
    };
    FarrisTreeTableBindingDirective.prototype.shouldComponentUpdate = function (newProp) {
        if (JSON.stringify(this.prop) === JSON.stringify(newProp)) {
            return false;
        }
        return true;
    };
    /**
     * 从树组件上获取选中行的id
     */
    FarrisTreeTableBindingDirective.prototype.getSelectedIdFromTree = function () {
        var selectedRow = this.treeTable.selectedRow;
        return selectedRow ? selectedRow.data['id'] : null;
    };
    /**
     * 设置TreeTable的当前行
     */
    FarrisTreeTableBindingDirective.prototype.setSelectedIdToTree = function (selectedId) {
        if (!selectedId) {
            return;
        }
        // 如果新的currentId和树上的selectedId不一致，重置树的当前行
        var oldSelectedId = this.getSelectedIdFromTree();
        var nodePageChanged = this.frameContext.params.get('_NODE_PAGE_CHANGED_') || false;
        if (!oldSelectedId && nodePageChanged) {
            this.frameContext.params.delete('_NODE_PAGE_CHANGED_');
            return;
        }
        if (oldSelectedId !== selectedId) {
            this.treeTable.clearSelections();
            this.treeTable.selectNode(selectedId);
        }
    };
    /**
     * 设置BindingList的CurrentId
     */
    FarrisTreeTableBindingDirective.prototype.setCurrentIdToBindingList = function (selectedId) {
        var oldCurrentId = this.bindingData.list.currentId;
        // 单选模式下将当前行设置到ids
        if (!this.treeTable.multiSelect) {
            this.setChecks(selectedId);
            this.setCheckedRows([selectedId]);
        }
        if (oldCurrentId === selectedId) {
            return;
        }
        this.bindingData.list.setCurrentId(selectedId, true);
    };
    FarrisTreeTableBindingDirective.prototype.updateCheckedRows = function (changes) {
        if (changes.type === ChangeType.Load) {
            this.setCheckedRows();
        }
        else if (changes.type === ChangeType.ValueChanged || changes.type === ChangeType.Remove) {
            var ids = this.getChecks();
            if (changes.id && ids.includes(changes.id)) {
                this.setCheckedRows();
            }
        }
    };
    /**
     * 更新勾选行数据
     */
    FarrisTreeTableBindingDirective.prototype.setCheckedRows = function (ids) {
        var _this = this;
        if (typeof ids === 'undefined') {
            ids = this.viewModel.uiState['ids'] || [];
        }
        if (!Array.isArray(ids)) {
            return;
        }
        var list = this.bindingList.toJSON();
        var rows = this.viewModel.uiState['rows'] || new Map();
        var result = new Map();
        ids.forEach(function (id) {
            var item = list.find(function (item) { return item[_this.bindingList.primaryKey] === id; });
            var otherPageItem = rows.get(id);
            if (item) {
                result.set(id, item);
            }
            else if (otherPageItem) {
                result.set(id, otherPageItem);
            }
        });
        this.viewModel.uiState.setPropertyValue('rows', result);
    };
    /**
     * 设置ids变量
     * @param idOrIds id or ids
     */
    FarrisTreeTableBindingDirective.prototype.setChecks = function (idOrIds) {
        if (typeof idOrIds === 'string') {
            idOrIds = idOrIds.split(',').filter(function (p) { return p; });
        }
        this.viewModel.uiState.setPropertyValue('ids', idOrIds);
    };
    /**
     * 获取勾选行id数组
     * @returns
     */
    FarrisTreeTableBindingDirective.prototype.getChecks = function () {
        return this.viewModel.uiState['ids'] || [];
    };
    /**
     * 获取分页信息
     */
    FarrisTreeTableBindingDirective.prototype.getPagingInfo = function () {
        var bindingPath = this.viewModel.bindingPath;
        var bindingData = this.viewModel.bindingData;
        var pagingInfo = bindingData.pagingInfo;
        if (bindingPath === '/') {
            return pagingInfo;
        }
        else {
            var bindingPaths = bindingPath.substr(1).split('/').filter(function (item) { return !!item && item.length > 0; }).map(function (item) {
                return item.substring(0, item.length - 1);
            });
            bindingPaths.forEach(function (path) {
                pagingInfo = pagingInfo && pagingInfo[path];
            });
            return pagingInfo;
        }
    };
    FarrisTreeTableBindingDirective.prototype.updatePageInfo = function (treeTable) {
        var _a = this.getPagingInfo(), pageIndex = _a.pageIndex, pageSize = _a.pageSize, total = _a.total;
        if (pageSize === 0) {
            treeTable.pagination = false;
            return;
        }
        treeTable.pagination = true;
        treeTable.updatePageInfo({ pageIndex: pageIndex, pageSize: pageSize, total: total });
    };
    //#region 组件事件
    /**
     * 行切换
     */
    FarrisTreeTableBindingDirective.prototype.selectionChangeHandler = function (event) {
        if (event && event.node && event.node.hasOwnProperty('data')) {
            var idField = this.treeTable.idField;
            var id = event.node.data[idField];
            this.setCurrentIdToBindingList(id);
        }
    };
    /**
     * 勾选节点发生变化
     * @param event event
     */
    FarrisTreeTableBindingDirective.prototype.checkValuesChange = function (event) {
        // this.viewModel.uiState.setPropertyValue('ids', this.treeTable.checkValues);
        this.setChecks(this.treeTable.checkValues);
        this.setCheckedRows();
    };
    /**
     * 将被展开的节点设置为当前行
     */
    FarrisTreeTableBindingDirective.prototype.expandHandler = function (event) {
        var selectedId = event.data['id'];
        var virtualRootFrameContext = this.frameContext.getVirtualRootFrameContext();
        // 展开时不再选中
        // this.setSelectedIdToTree(selectedId);
        var expandNodes = virtualRootFrameContext.getParam('TREE_LATEST_EXPANDED_ID') || [];
        expandNodes.push(selectedId);
        virtualRootFrameContext.setParam('TREE_LATEST_EXPANDED_ID', expandNodes);
    };
    FarrisTreeTableBindingDirective.prototype.onPageChanged = function (event) {
        var _a = event || {}, _b = _a.pageSize, pageSize = _b === void 0 ? 20 : _b, _c = _a.pageIndex, pageIndex = _c === void 0 ? 1 : _c;
        if (pageIndex < 1) {
            pageIndex = 1;
        }
        var skip = (pageIndex - 1) * pageSize;
        this.bindingData.setPagingInfo(skip, pageSize, this.bindingData.bindingPath);
    };
    FarrisTreeTableBindingDirective.prototype.onPageSizeChanged = function (event) {
        var pageSize = event ? event : 20;
        var skip = 0;
        this.bindingData.setPagingInfo(skip, pageSize, this.bindingData.bindingPath);
    };
    /**
     * 节点页码切换事件
     * @param event event
     */
    FarrisTreeTableBindingDirective.prototype.onNodePageChanged = function (event) {
        var _a = event.pageIndex, pageIndex = _a === void 0 ? 1 : _a, _b = event.pageSize, pageSize = _b === void 0 ? this.nodePageSize : _b, _c = event.node, node = _c === void 0 ? {} : _c;
        var id = node && node.id || null;
        if (id) {
            var virtualRootFrameContext = this.frameContext.getVirtualRootFrameContext();
            var expandNodes = virtualRootFrameContext.getParam('TREE_LATEST_EXPANDED_ID') || [];
            expandNodes.push(id);
            virtualRootFrameContext.setParam('TREE_LATEST_EXPANDED_ID', expandNodes);
            this.frameContext.params.set("_NODE_" + id + "_PAGE_INDEX_", pageIndex);
            this.frameContext.params.set("_RELOAD_CHILDREN_", true);
            this.frameContext.params.set('_NODE_PAGE_CHANGED_', true);
        }
    };
    FarrisTreeTableBindingDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farrisTreeTableBinding]'
                },] }
    ];
    /** @nocollapse */
    FarrisTreeTableBindingDirective.ctorParameters = function () { return [
        { type: TreeTableComponent },
        { type: FarrisTreetableFormatService },
        { type: FrameContext }
    ]; };
    FarrisTreeTableBindingDirective.propDecorators = {
        hierarchyInfoKey: [{ type: Input, args: ['farrisHierarchyInfoKey',] }],
        rowClassName: [{ type: Input }],
        cellClassName: [{ type: Input }],
        nodePageSize: [{ type: Input, args: ['nodePageSize',] }],
        rowClass: [{ type: Output }],
        cellClass: [{ type: Output }],
        selectionChangeHandler: [{ type: HostListener, args: ['nodeSelected', ['$event'],] }],
        checkValuesChange: [{ type: HostListener, args: ['checkValuesChange', ['$event'],] }],
        expandHandler: [{ type: HostListener, args: ['expand', ['$event'],] }],
        onPageChanged: [{ type: HostListener, args: ['pageChanged', ['$event'],] }],
        onPageSizeChanged: [{ type: HostListener, args: ['pageSizeChanged', ['$event'],] }],
        onNodePageChanged: [{ type: HostListener, args: ['childsPageChanged', ['$event'],] }]
    };
    return FarrisTreeTableBindingDirective;
}());
export { FarrisTreeTableBindingDirective };
//# sourceMappingURL=data:application/json;base64,