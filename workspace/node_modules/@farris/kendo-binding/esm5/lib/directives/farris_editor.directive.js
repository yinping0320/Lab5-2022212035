import { Directive, ElementRef } from '@angular/core';
import { ViewModel } from '@farris/devkit';
import { EditorComponent } from '@farris/ui-editor';
var FarrisEditorDirective = /** @class */ (function () {
    function FarrisEditorDirective(viewModel, editor) {
        this.viewModel = viewModel;
        this.editor = editor;
    }
    FarrisEditorDirective.prototype.ngOnInit = function () {
        this.setComponentRef();
    };
    FarrisEditorDirective.prototype.setComponentRef = function () {
        var appContext = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.getFormAppContext();
        var frameId = this.viewModel && this.viewModel.frameContext && this.viewModel.frameContext.frameId;
        var editor = this.editor;
        var elementRef = editor && editor.injector && editor.injector.get(ElementRef, null);
        var id = elementRef && elementRef.nativeElement && elementRef.nativeElement.id || null;
        // 如果frameId不存在或treetable没有id属性，说明不符合使用场景
        if (!frameId || !id) {
            return;
        }
        var map = appContext && appContext.componentRefs && appContext.componentRefs.get(frameId) || new Map();
        appContext && appContext.componentRefs && appContext.componentRefs.set(frameId, map.set(id, this.editor));
    };
    FarrisEditorDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farris-editor],[farris-editor-bind]'
                },] }
    ];
    /** @nocollapse */
    FarrisEditorDirective.ctorParameters = function () { return [
        { type: ViewModel },
        { type: EditorComponent }
    ]; };
    return FarrisEditorDirective;
}());
export { FarrisEditorDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFycmlzX2VkaXRvci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2tlbmRvLWJpbmRpbmcvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9mYXJyaXNfZWRpdG9yLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRXBEO0lBSUUsK0JBQW9CLFNBQW9CLEVBQVUsTUFBdUI7UUFBckQsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUFVLFdBQU0sR0FBTixNQUFNLENBQWlCO0lBQUksQ0FBQztJQUU5RSx3Q0FBUSxHQUFSO1FBQ0UsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFTywrQ0FBZSxHQUF2QjtRQUNFLElBQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUNwSCxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQztRQUNyRyxJQUFNLE1BQU0sR0FBUSxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ2hDLElBQU0sVUFBVSxHQUFlLE1BQU0sSUFBSSxNQUFNLENBQUMsUUFBUSxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNsRyxJQUFNLEVBQUUsR0FBRyxVQUFVLElBQUksVUFBVSxDQUFDLGFBQWEsSUFBSSxVQUFVLENBQUMsYUFBYSxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUM7UUFDekYseUNBQXlDO1FBQ3pDLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDbkIsT0FBTztTQUNSO1FBQ0QsSUFBTSxHQUFHLEdBQUcsVUFBVSxJQUFJLFVBQVUsQ0FBQyxhQUFhLElBQUksVUFBVSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksSUFBSSxHQUFHLEVBQWUsQ0FBQztRQUN0SCxVQUFVLElBQUksVUFBVSxDQUFDLGFBQWEsSUFBSSxVQUFVLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDNUcsQ0FBQzs7Z0JBdEJGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsc0NBQXNDO2lCQUNqRDs7OztnQkFMUSxTQUFTO2dCQUNULGVBQWU7O0lBeUJ4Qiw0QkFBQztDQUFBLEFBdkJELElBdUJDO1NBcEJZLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFZpZXdNb2RlbCB9IGZyb20gJ0BmYXJyaXMvZGV2a2l0JztcclxuaW1wb3J0IHsgRWRpdG9yQ29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy91aS1lZGl0b3InO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbZmFycmlzLWVkaXRvcl0sW2ZhcnJpcy1lZGl0b3ItYmluZF0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGYXJyaXNFZGl0b3JEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdmlld01vZGVsOiBWaWV3TW9kZWwsIHByaXZhdGUgZWRpdG9yOiBFZGl0b3JDb21wb25lbnQpIHsgfVxyXG5cclxuICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgIHRoaXMuc2V0Q29tcG9uZW50UmVmKCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNldENvbXBvbmVudFJlZigpIHtcclxuICAgIGNvbnN0IGFwcENvbnRleHQgPSB0aGlzLnZpZXdNb2RlbCAmJiB0aGlzLnZpZXdNb2RlbC5mcmFtZUNvbnRleHQgJiYgdGhpcy52aWV3TW9kZWwuZnJhbWVDb250ZXh0LmdldEZvcm1BcHBDb250ZXh0KCk7XHJcbiAgICBjb25zdCBmcmFtZUlkID0gdGhpcy52aWV3TW9kZWwgJiYgdGhpcy52aWV3TW9kZWwuZnJhbWVDb250ZXh0ICYmIHRoaXMudmlld01vZGVsLmZyYW1lQ29udGV4dC5mcmFtZUlkO1xyXG4gICAgY29uc3QgZWRpdG9yOiBhbnkgPSB0aGlzLmVkaXRvcjtcclxuICAgIGNvbnN0IGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYgPSBlZGl0b3IgJiYgZWRpdG9yLmluamVjdG9yICYmIGVkaXRvci5pbmplY3Rvci5nZXQoRWxlbWVudFJlZiwgbnVsbCk7XHJcbiAgICBjb25zdCBpZCA9IGVsZW1lbnRSZWYgJiYgZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50ICYmIGVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5pZCB8fCBudWxsO1xyXG4gICAgLy8g5aaC5p6cZnJhbWVJZOS4jeWtmOWcqOaIlnRyZWV0YWJsZeayoeaciWlk5bGe5oCn77yM6K+05piO5LiN56ym5ZCI5L2/55So5Zy65pmvXHJcbiAgICBpZiAoIWZyYW1lSWQgfHwgIWlkKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IG1hcCA9IGFwcENvbnRleHQgJiYgYXBwQ29udGV4dC5jb21wb25lbnRSZWZzICYmIGFwcENvbnRleHQuY29tcG9uZW50UmVmcy5nZXQoZnJhbWVJZCkgfHwgbmV3IE1hcDxzdHJpbmcsIGFueT4oKTtcclxuICAgIGFwcENvbnRleHQgJiYgYXBwQ29udGV4dC5jb21wb25lbnRSZWZzICYmIGFwcENvbnRleHQuY29tcG9uZW50UmVmcy5zZXQoZnJhbWVJZCwgbWFwLnNldChpZCwgdGhpcy5lZGl0b3IpKTtcclxuICB9XHJcbn0iXX0=