import * as tslib_1 from "tslib";
import { Directive, ElementRef, Injector } from "@angular/core";
import { FrameContext } from "@farris/devkit";
import { ScrollspyComponent } from '@farris/ui-scrollspy';
import { ComponentRef } from "./component-ref";
var ScrollspyComponentRefDirective = /** @class */ (function (_super) {
    tslib_1.__extends(ScrollspyComponentRefDirective, _super);
    function ScrollspyComponentRefDirective(injector, component, elementRef, frameContext) {
        var _this = _super.call(this, frameContext, elementRef) || this;
        _this.injector = injector;
        _this.component = component;
        _this.elementRef = elementRef;
        _this.frameContext = frameContext;
        return _this;
    }
    ScrollspyComponentRefDirective.prototype.ngAfterViewInit = function () {
        this.tryAddComponent(this.component);
    };
    ScrollspyComponentRefDirective.prototype.ngOnInit = function () {
        this.addComponent(this.component);
    };
    ScrollspyComponentRefDirective.prototype.ngOnDestroy = function () {
    };
    ScrollspyComponentRefDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[scrollspyRef]'
                },] }
    ];
    /** @nocollapse */
    ScrollspyComponentRefDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: ScrollspyComponent },
        { type: ElementRef },
        { type: FrameContext }
    ]; };
    return ScrollspyComponentRefDirective;
}(ComponentRef));
export { ScrollspyComponentRefDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsc3B5LWNvbXBvbmVudC1yZWYuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9rZW5kby1iaW5kaW5nLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvY29tcG9uZW50LXJlZi9zY3JvbGxzcHktY29tcG9uZW50LXJlZi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBaUIsU0FBUyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQXFCLE1BQU0sZUFBZSxDQUFDO0FBQ2xHLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM5QyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMxRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFL0M7SUFHb0QsMERBQVk7SUFDOUQsd0NBQW9CLFFBQWtCLEVBQVUsU0FBNkIsRUFBUyxVQUFzQixFQUFTLFlBQTBCO1FBQS9JLFlBQ0Usa0JBQU0sWUFBWSxFQUFFLFVBQVUsQ0FBQyxTQUNoQztRQUZtQixjQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVUsZUFBUyxHQUFULFNBQVMsQ0FBb0I7UUFBUyxnQkFBVSxHQUFWLFVBQVUsQ0FBWTtRQUFTLGtCQUFZLEdBQVosWUFBWSxDQUFjOztJQUUvSSxDQUFDO0lBQ0Qsd0RBQWUsR0FBZjtRQUNFLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFDRCxpREFBUSxHQUFSO1FBQ0UsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUNELG9EQUFXLEdBQVg7SUFDQSxDQUFDOztnQkFkRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjtpQkFDM0I7Ozs7Z0JBUDhDLFFBQVE7Z0JBRTlDLGtCQUFrQjtnQkFGUSxVQUFVO2dCQUNwQyxZQUFZOztJQW9CckIscUNBQUM7Q0FBQSxBQWhCRCxDQUdvRCxZQUFZLEdBYS9EO1NBYlksOEJBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbmplY3RvciwgT25EZXN0cm95LCBPbkluaXQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBGcmFtZUNvbnRleHQgfSBmcm9tIFwiQGZhcnJpcy9kZXZraXRcIjtcclxuaW1wb3J0IHsgU2Nyb2xsc3B5Q29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy91aS1zY3JvbGxzcHknO1xyXG5pbXBvcnQgeyBDb21wb25lbnRSZWYgfSBmcm9tIFwiLi9jb21wb25lbnQtcmVmXCI7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tzY3JvbGxzcHlSZWZdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgU2Nyb2xsc3B5Q29tcG9uZW50UmVmRGlyZWN0aXZlIGV4dGVuZHMgQ29tcG9uZW50UmVmIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXQge1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCBwcml2YXRlIGNvbXBvbmVudDogU2Nyb2xsc3B5Q29tcG9uZW50LCBwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHVibGljIGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0KSB7XHJcbiAgICBzdXBlcihmcmFtZUNvbnRleHQsIGVsZW1lbnRSZWYpO1xyXG4gIH1cclxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XHJcbiAgICB0aGlzLnRyeUFkZENvbXBvbmVudCh0aGlzLmNvbXBvbmVudCk7XHJcbiAgfVxyXG4gIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5hZGRDb21wb25lbnQodGhpcy5jb21wb25lbnQpO1xyXG4gIH1cclxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICB9XHJcblxyXG59Il19