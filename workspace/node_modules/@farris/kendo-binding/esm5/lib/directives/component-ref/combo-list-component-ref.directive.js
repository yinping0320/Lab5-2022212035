import * as tslib_1 from "tslib";
import { Directive, ElementRef, Injector } from "@angular/core";
import { FrameContext } from "@farris/devkit";
import { ComboListComponent } from '@farris/ui-combo-list';
import { ComponentRef } from "./component-ref";
var ComboListComponentRefDirective = /** @class */ (function (_super) {
    tslib_1.__extends(ComboListComponentRefDirective, _super);
    function ComboListComponentRefDirective(injector, component, elementRef, frameContext) {
        var _this = _super.call(this, frameContext, elementRef) || this;
        _this.injector = injector;
        _this.component = component;
        _this.elementRef = elementRef;
        _this.frameContext = frameContext;
        return _this;
    }
    ComboListComponentRefDirective.prototype.ngAfterViewInit = function () {
        this.tryAddComponent(this.component);
    };
    ComboListComponentRefDirective.prototype.ngOnInit = function () {
        this.addComponent(this.component);
    };
    ComboListComponentRefDirective.prototype.ngOnDestroy = function () {
    };
    ComboListComponentRefDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[comboListRef]'
                },] }
    ];
    /** @nocollapse */
    ComboListComponentRefDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: ComboListComponent },
        { type: ElementRef },
        { type: FrameContext }
    ]; };
    return ComboListComponentRefDirective;
}(ComponentRef));
export { ComboListComponentRefDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tYm8tbGlzdC1jb21wb25lbnQtcmVmLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMva2VuZG8tYmluZGluZy8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL2NvbXBvbmVudC1yZWYvY29tYm8tbGlzdC1jb21wb25lbnQtcmVmLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFpQixTQUFTLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBcUIsTUFBTSxlQUFlLENBQUM7QUFDbEcsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzNELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQztJQUdvRCwwREFBWTtJQUM5RCx3Q0FBb0IsUUFBa0IsRUFBVSxTQUE2QixFQUFTLFVBQXNCLEVBQVMsWUFBMEI7UUFBL0ksWUFDRSxrQkFBTSxZQUFZLEVBQUUsVUFBVSxDQUFDLFNBQ2hDO1FBRm1CLGNBQVEsR0FBUixRQUFRLENBQVU7UUFBVSxlQUFTLEdBQVQsU0FBUyxDQUFvQjtRQUFTLGdCQUFVLEdBQVYsVUFBVSxDQUFZO1FBQVMsa0JBQVksR0FBWixZQUFZLENBQWM7O0lBRS9JLENBQUM7SUFDRCx3REFBZSxHQUFmO1FBQ0UsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUNELGlEQUFRLEdBQVI7UUFDRSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBQ0Qsb0RBQVcsR0FBWDtJQUNBLENBQUM7O2dCQWRGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO2lCQUMzQjs7OztnQkFQOEMsUUFBUTtnQkFFOUMsa0JBQWtCO2dCQUZRLFVBQVU7Z0JBQ3BDLFlBQVk7O0lBbUJyQixxQ0FBQztDQUFBLEFBZkQsQ0FHb0QsWUFBWSxHQVkvRDtTQVpZLDhCQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5qZWN0b3IsIE9uRGVzdHJveSwgT25Jbml0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgRnJhbWVDb250ZXh0IH0gZnJvbSBcIkBmYXJyaXMvZGV2a2l0XCI7XHJcbmltcG9ydCB7IENvbWJvTGlzdENvbXBvbmVudCB9IGZyb20gJ0BmYXJyaXMvdWktY29tYm8tbGlzdCc7XHJcbmltcG9ydCB7IENvbXBvbmVudFJlZiB9IGZyb20gXCIuL2NvbXBvbmVudC1yZWZcIjtcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2NvbWJvTGlzdFJlZl0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDb21ib0xpc3RDb21wb25lbnRSZWZEaXJlY3RpdmUgZXh0ZW5kcyBDb21wb25lbnRSZWYgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSwgQWZ0ZXJWaWV3SW5pdCB7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsIHByaXZhdGUgY29tcG9uZW50OiBDb21ib0xpc3RDb21wb25lbnQsIHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwdWJsaWMgZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQpIHtcclxuICAgIHN1cGVyKGZyYW1lQ29udGV4dCwgZWxlbWVudFJlZik7XHJcbiAgfVxyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcclxuICAgIHRoaXMudHJ5QWRkQ29tcG9uZW50KHRoaXMuY29tcG9uZW50KTtcclxuICB9XHJcbiAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICB0aGlzLmFkZENvbXBvbmVudCh0aGlzLmNvbXBvbmVudCk7XHJcbiAgfVxyXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG4gIH1cclxufSJdfQ==