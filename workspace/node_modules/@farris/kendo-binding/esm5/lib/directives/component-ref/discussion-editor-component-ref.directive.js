import * as tslib_1 from "tslib";
import { Directive, ElementRef, Injector } from "@angular/core";
import { FrameContext } from "@farris/devkit";
import { DiscussionEditorComponent } from '@farris/discussion-group';
import { ComponentRef } from "./component-ref";
var DiscussionEditorComponentRefDirective = /** @class */ (function (_super) {
    tslib_1.__extends(DiscussionEditorComponentRefDirective, _super);
    function DiscussionEditorComponentRefDirective(injector, component, elementRef, frameContext) {
        var _this = _super.call(this, frameContext, elementRef) || this;
        _this.injector = injector;
        _this.component = component;
        _this.elementRef = elementRef;
        _this.frameContext = frameContext;
        return _this;
    }
    DiscussionEditorComponentRefDirective.prototype.ngAfterViewInit = function () {
        this.tryAddComponent(this.component);
    };
    DiscussionEditorComponentRefDirective.prototype.ngOnInit = function () {
        this.addComponent(this.component);
    };
    DiscussionEditorComponentRefDirective.prototype.ngOnDestroy = function () {
    };
    DiscussionEditorComponentRefDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[discussionEditorRef]'
                },] }
    ];
    /** @nocollapse */
    DiscussionEditorComponentRefDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: DiscussionEditorComponent },
        { type: ElementRef },
        { type: FrameContext }
    ]; };
    return DiscussionEditorComponentRefDirective;
}(ComponentRef));
export { DiscussionEditorComponentRefDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzY3Vzc2lvbi1lZGl0b3ItY29tcG9uZW50LXJlZi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2tlbmRvLWJpbmRpbmcvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9jb21wb25lbnQtcmVmL2Rpc2N1c3Npb24tZWRpdG9yLWNvbXBvbmVudC1yZWYuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQWlCLFNBQVMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFxQixNQUFNLGVBQWUsQ0FBQztBQUNsRyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUMsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDckUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRS9DO0lBRzJELGlFQUFZO0lBQ3JFLCtDQUFvQixRQUFrQixFQUFVLFNBQW9DLEVBQVMsVUFBc0IsRUFBUyxZQUEwQjtRQUF0SixZQUNFLGtCQUFNLFlBQVksRUFBRSxVQUFVLENBQUMsU0FDaEM7UUFGbUIsY0FBUSxHQUFSLFFBQVEsQ0FBVTtRQUFVLGVBQVMsR0FBVCxTQUFTLENBQTJCO1FBQVMsZ0JBQVUsR0FBVixVQUFVLENBQVk7UUFBUyxrQkFBWSxHQUFaLFlBQVksQ0FBYzs7SUFFdEosQ0FBQztJQUNELCtEQUFlLEdBQWY7UUFDRSxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBQ0Qsd0RBQVEsR0FBUjtRQUNFLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFDRCwyREFBVyxHQUFYO0lBQ0EsQ0FBQzs7Z0JBZEYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSx1QkFBdUI7aUJBQ2xDOzs7O2dCQVA4QyxRQUFRO2dCQUU5Qyx5QkFBeUI7Z0JBRkMsVUFBVTtnQkFDcEMsWUFBWTs7SUFvQnJCLDRDQUFDO0NBQUEsQUFoQkQsQ0FHMkQsWUFBWSxHQWF0RTtTQWJZLHFDQUFxQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5qZWN0b3IsIE9uRGVzdHJveSwgT25Jbml0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgRnJhbWVDb250ZXh0IH0gZnJvbSBcIkBmYXJyaXMvZGV2a2l0XCI7XHJcbmltcG9ydCB7IERpc2N1c3Npb25FZGl0b3JDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL2Rpc2N1c3Npb24tZ3JvdXAnO1xyXG5pbXBvcnQgeyBDb21wb25lbnRSZWYgfSBmcm9tIFwiLi9jb21wb25lbnQtcmVmXCI7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tkaXNjdXNzaW9uRWRpdG9yUmVmXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIERpc2N1c3Npb25FZGl0b3JDb21wb25lbnRSZWZEaXJlY3RpdmUgZXh0ZW5kcyBDb21wb25lbnRSZWYgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSwgQWZ0ZXJWaWV3SW5pdCB7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsIHByaXZhdGUgY29tcG9uZW50OiBEaXNjdXNzaW9uRWRpdG9yQ29tcG9uZW50LCBwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcHVibGljIGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0KSB7IFxyXG4gICAgc3VwZXIoZnJhbWVDb250ZXh0LCBlbGVtZW50UmVmKTtcclxuICB9XHJcbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xyXG4gICAgdGhpcy50cnlBZGRDb21wb25lbnQodGhpcy5jb21wb25lbnQpO1xyXG4gIH1cclxuICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgIHRoaXMuYWRkQ29tcG9uZW50KHRoaXMuY29tcG9uZW50KTtcclxuICB9XHJcbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgfVxyXG5cclxufSJdfQ==