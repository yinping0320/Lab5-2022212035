import * as tslib_1 from "tslib";
import { Directive, ElementRef, Injector } from "@angular/core";
import { FrameContext } from "@farris/devkit";
import { ListFilterComponent } from '@farris/ui-list-filter';
import { ComponentRef } from "./component-ref";
var ListFilterComponentRefDirective = /** @class */ (function (_super) {
    tslib_1.__extends(ListFilterComponentRefDirective, _super);
    function ListFilterComponentRefDirective(injector, component, elementRef, frameContext) {
        var _this = _super.call(this, frameContext, elementRef) || this;
        _this.injector = injector;
        _this.component = component;
        _this.elementRef = elementRef;
        _this.frameContext = frameContext;
        return _this;
    }
    ListFilterComponentRefDirective.prototype.ngAfterViewInit = function () {
        this.tryAddComponent(this.component);
    };
    ListFilterComponentRefDirective.prototype.ngOnInit = function () {
        this.addComponent(this.component);
    };
    ListFilterComponentRefDirective.prototype.ngOnDestroy = function () {
    };
    ListFilterComponentRefDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[listFilterRef]'
                },] }
    ];
    /** @nocollapse */
    ListFilterComponentRefDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: ListFilterComponent },
        { type: ElementRef },
        { type: FrameContext }
    ]; };
    return ListFilterComponentRefDirective;
}(ComponentRef));
export { ListFilterComponentRefDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1maWx0ZXItY29tcG9uZW50LXJlZi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2tlbmRvLWJpbmRpbmcvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9jb21wb25lbnQtcmVmL2xpc3QtZmlsdGVyLWNvbXBvbmVudC1yZWYuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQWlCLFNBQVMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFxQixNQUFNLGVBQWUsQ0FBQztBQUNsRyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUMsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDN0QsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DO0lBR3FELDJEQUFZO0lBQy9ELHlDQUFvQixRQUFrQixFQUFVLFNBQThCLEVBQVMsVUFBc0IsRUFBUyxZQUEwQjtRQUFoSixZQUNFLGtCQUFNLFlBQVksRUFBRSxVQUFVLENBQUMsU0FDaEM7UUFGbUIsY0FBUSxHQUFSLFFBQVEsQ0FBVTtRQUFVLGVBQVMsR0FBVCxTQUFTLENBQXFCO1FBQVMsZ0JBQVUsR0FBVixVQUFVLENBQVk7UUFBUyxrQkFBWSxHQUFaLFlBQVksQ0FBYzs7SUFFaEosQ0FBQztJQUNELHlEQUFlLEdBQWY7UUFDRSxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBQ0Qsa0RBQVEsR0FBUjtRQUNFLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFDRCxxREFBVyxHQUFYO0lBQ0EsQ0FBQzs7Z0JBZEYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxpQkFBaUI7aUJBQzVCOzs7O2dCQU44QyxRQUFRO2dCQUU5QyxtQkFBbUI7Z0JBRk8sVUFBVTtnQkFDcEMsWUFBWTs7SUFrQnJCLHNDQUFDO0NBQUEsQUFmRCxDQUdxRCxZQUFZLEdBWWhFO1NBWlksK0JBQStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbmplY3RvciwgT25EZXN0cm95LCBPbkluaXQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBGcmFtZUNvbnRleHQgfSBmcm9tIFwiQGZhcnJpcy9kZXZraXRcIjtcclxuaW1wb3J0IHsgTGlzdEZpbHRlckNvbXBvbmVudCB9IGZyb20gJ0BmYXJyaXMvdWktbGlzdC1maWx0ZXInO1xyXG5pbXBvcnQgeyBDb21wb25lbnRSZWYgfSBmcm9tIFwiLi9jb21wb25lbnQtcmVmXCI7XHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2xpc3RGaWx0ZXJSZWZdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTGlzdEZpbHRlckNvbXBvbmVudFJlZkRpcmVjdGl2ZSBleHRlbmRzIENvbXBvbmVudFJlZiBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95LCBBZnRlclZpZXdJbml0IHtcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3RvciwgcHJpdmF0ZSBjb21wb25lbnQ6IExpc3RGaWx0ZXJDb21wb25lbnQsIHB1YmxpYyBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBwdWJsaWMgZnJhbWVDb250ZXh0OiBGcmFtZUNvbnRleHQpIHsgXHJcbiAgICBzdXBlcihmcmFtZUNvbnRleHQsIGVsZW1lbnRSZWYpO1xyXG4gIH1cclxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XHJcbiAgICB0aGlzLnRyeUFkZENvbXBvbmVudCh0aGlzLmNvbXBvbmVudCk7XHJcbiAgfVxyXG4gIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5hZGRDb21wb25lbnQodGhpcy5jb21wb25lbnQpO1xyXG4gIH1cclxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICB9XHJcbn0iXX0=