import * as tslib_1 from "tslib";
import { Directive, ElementRef, Injector } from "@angular/core";
import { FrameContext } from "@farris/devkit";
import { FarrisDatepickerComponent } from '@farris/ui-datepicker';
import { ComponentRef } from "./component-ref";
var DatepickerComponentRefDirective = /** @class */ (function (_super) {
    tslib_1.__extends(DatepickerComponentRefDirective, _super);
    function DatepickerComponentRefDirective(injector, component, elementRef, frameContext) {
        var _this = _super.call(this, frameContext, elementRef) || this;
        _this.injector = injector;
        _this.component = component;
        _this.elementRef = elementRef;
        _this.frameContext = frameContext;
        return _this;
    }
    DatepickerComponentRefDirective.prototype.ngAfterViewInit = function () {
        this.tryAddComponent(this.component);
    };
    DatepickerComponentRefDirective.prototype.ngOnInit = function () {
        this.addComponent(this.component);
    };
    DatepickerComponentRefDirective.prototype.ngOnDestroy = function () {
    };
    DatepickerComponentRefDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[datepickerRef]'
                },] }
    ];
    /** @nocollapse */
    DatepickerComponentRefDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: FarrisDatepickerComponent },
        { type: ElementRef },
        { type: FrameContext }
    ]; };
    return DatepickerComponentRefDirective;
}(ComponentRef));
export { DatepickerComponentRefDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci1jb21wb25lbnQtcmVmLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMva2VuZG8tYmluZGluZy8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL2NvbXBvbmVudC1yZWYvZGF0ZXBpY2tlci1jb21wb25lbnQtcmVmLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFpQixTQUFTLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBcUIsTUFBTSxlQUFlLENBQUM7QUFDbEcsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzlDLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQztJQUdxRCwyREFBWTtJQUMvRCx5Q0FBb0IsUUFBa0IsRUFBVSxTQUFvQyxFQUFTLFVBQXNCLEVBQVMsWUFBMEI7UUFBdEosWUFDRSxrQkFBTSxZQUFZLEVBQUUsVUFBVSxDQUFDLFNBQ2hDO1FBRm1CLGNBQVEsR0FBUixRQUFRLENBQVU7UUFBVSxlQUFTLEdBQVQsU0FBUyxDQUEyQjtRQUFTLGdCQUFVLEdBQVYsVUFBVSxDQUFZO1FBQVMsa0JBQVksR0FBWixZQUFZLENBQWM7O0lBRXRKLENBQUM7SUFDRCx5REFBZSxHQUFmO1FBQ0UsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUNELGtEQUFRLEdBQVI7UUFDRSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBQ0QscURBQVcsR0FBWDtJQUNBLENBQUM7O2dCQWRGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsaUJBQWlCO2lCQUM1Qjs7OztnQkFQOEMsUUFBUTtnQkFFOUMseUJBQXlCO2dCQUZDLFVBQVU7Z0JBQ3BDLFlBQVk7O0lBb0JyQixzQ0FBQztDQUFBLEFBaEJELENBR3FELFlBQVksR0FhaEU7U0FiWSwrQkFBK0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEluamVjdG9yLCBPbkRlc3Ryb3ksIE9uSW5pdCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IEZyYW1lQ29udGV4dCB9IGZyb20gXCJAZmFycmlzL2RldmtpdFwiO1xyXG5pbXBvcnQgeyBGYXJyaXNEYXRlcGlja2VyQ29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy91aS1kYXRlcGlja2VyJztcclxuaW1wb3J0IHsgQ29tcG9uZW50UmVmIH0gZnJvbSBcIi4vY29tcG9uZW50LXJlZlwiO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbZGF0ZXBpY2tlclJlZl0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEYXRlcGlja2VyQ29tcG9uZW50UmVmRGlyZWN0aXZlIGV4dGVuZHMgQ29tcG9uZW50UmVmIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXQge1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCBwcml2YXRlIGNvbXBvbmVudDogRmFycmlzRGF0ZXBpY2tlckNvbXBvbmVudCwgcHVibGljIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHB1YmxpYyBmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCkge1xyXG4gICAgc3VwZXIoZnJhbWVDb250ZXh0LCBlbGVtZW50UmVmKTtcclxuICB9XHJcbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xyXG4gICAgdGhpcy50cnlBZGRDb21wb25lbnQodGhpcy5jb21wb25lbnQpO1xyXG4gIH1cclxuICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgIHRoaXMuYWRkQ29tcG9uZW50KHRoaXMuY29tcG9uZW50KTtcclxuICB9XHJcbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgfVxyXG5cclxufSJdfQ==