import * as tslib_1 from "tslib";
import { Directive, ElementRef, Injector } from "@angular/core";
import { FrameContext } from "@farris/devkit";
import { ListViewComponent } from "@farris/ui-list-view";
import { ComponentRef } from "./component-ref";
var ListViewComponentRefDirective = /** @class */ (function (_super) {
    tslib_1.__extends(ListViewComponentRefDirective, _super);
    function ListViewComponentRefDirective(injector, component, elementRef, frameContext) {
        var _this = _super.call(this, frameContext, elementRef) || this;
        _this.injector = injector;
        _this.component = component;
        _this.elementRef = elementRef;
        _this.frameContext = frameContext;
        return _this;
    }
    ListViewComponentRefDirective.prototype.ngAfterViewInit = function () {
        this.tryAddComponent(this.component);
    };
    ListViewComponentRefDirective.prototype.ngOnInit = function () {
        this.addComponent(this.component);
    };
    ListViewComponentRefDirective.prototype.ngOnDestroy = function () {
    };
    ListViewComponentRefDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[listViewRef]'
                },] }
    ];
    /** @nocollapse */
    ListViewComponentRefDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: ListViewComponent },
        { type: ElementRef },
        { type: FrameContext }
    ]; };
    return ListViewComponentRefDirective;
}(ComponentRef));
export { ListViewComponentRefDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC12aWV3LWNvbXBvbmVudC1yZWYuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9rZW5kby1iaW5kaW5nLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvY29tcG9uZW50LXJlZi9saXN0LXZpZXctY29tcG9uZW50LXJlZi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBaUIsU0FBUyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQXFCLE1BQU0sZUFBZSxDQUFDO0FBQ2xHLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM5QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFL0M7SUFHbUQseURBQVk7SUFDN0QsdUNBQW9CLFFBQWtCLEVBQVUsU0FBNEIsRUFBUyxVQUFzQixFQUFTLFlBQTBCO1FBQTlJLFlBQ0Usa0JBQU0sWUFBWSxFQUFFLFVBQVUsQ0FBQyxTQUNoQztRQUZtQixjQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVUsZUFBUyxHQUFULFNBQVMsQ0FBbUI7UUFBUyxnQkFBVSxHQUFWLFVBQVUsQ0FBWTtRQUFTLGtCQUFZLEdBQVosWUFBWSxDQUFjOztJQUU5SSxDQUFDO0lBQ0QsdURBQWUsR0FBZjtRQUNFLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFDRCxnREFBUSxHQUFSO1FBQ0UsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUNELG1EQUFXLEdBQVg7SUFDQSxDQUFDOztnQkFkRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGVBQWU7aUJBQzFCOzs7O2dCQVA4QyxRQUFRO2dCQUU5QyxpQkFBaUI7Z0JBRlMsVUFBVTtnQkFDcEMsWUFBWTs7SUFtQnJCLG9DQUFDO0NBQUEsQUFmRCxDQUdtRCxZQUFZLEdBWTlEO1NBWlksNkJBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbmplY3RvciwgT25EZXN0cm95LCBPbkluaXQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBGcmFtZUNvbnRleHQgfSBmcm9tIFwiQGZhcnJpcy9kZXZraXRcIjtcclxuaW1wb3J0IHsgTGlzdFZpZXdDb21wb25lbnQgfSBmcm9tIFwiQGZhcnJpcy91aS1saXN0LXZpZXdcIjtcclxuaW1wb3J0IHsgQ29tcG9uZW50UmVmIH0gZnJvbSBcIi4vY29tcG9uZW50LXJlZlwiO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbbGlzdFZpZXdSZWZdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTGlzdFZpZXdDb21wb25lbnRSZWZEaXJlY3RpdmUgZXh0ZW5kcyBDb21wb25lbnRSZWYgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSwgQWZ0ZXJWaWV3SW5pdCB7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsIHByaXZhdGUgY29tcG9uZW50OiBMaXN0Vmlld0NvbXBvbmVudCwgcHVibGljIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHB1YmxpYyBmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCkge1xyXG4gICAgc3VwZXIoZnJhbWVDb250ZXh0LCBlbGVtZW50UmVmKTtcclxuICB9XHJcbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xyXG4gICAgdGhpcy50cnlBZGRDb21wb25lbnQodGhpcy5jb21wb25lbnQpO1xyXG4gIH1cclxuICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgIHRoaXMuYWRkQ29tcG9uZW50KHRoaXMuY29tcG9uZW50KTtcclxuICB9XHJcbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgfVxyXG59Il19