import * as tslib_1 from "tslib";
import { Directive, ElementRef, Injector } from "@angular/core";
import { FrameContext } from "@farris/devkit";
import { TimePickerComponent } from '@farris/ui-time-picker';
import { ComponentRef } from "./component-ref";
var TimePickerComponentRefDirective = /** @class */ (function (_super) {
    tslib_1.__extends(TimePickerComponentRefDirective, _super);
    function TimePickerComponentRefDirective(injector, component, elementRef, frameContext) {
        var _this = _super.call(this, frameContext, elementRef) || this;
        _this.injector = injector;
        _this.component = component;
        _this.elementRef = elementRef;
        _this.frameContext = frameContext;
        return _this;
    }
    TimePickerComponentRefDirective.prototype.ngAfterViewInit = function () {
        this.tryAddComponent(this.component);
    };
    TimePickerComponentRefDirective.prototype.ngOnInit = function () {
        this.addComponent(this.component);
    };
    TimePickerComponentRefDirective.prototype.ngOnDestroy = function () {
    };
    TimePickerComponentRefDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[timePickerRef]'
                },] }
    ];
    /** @nocollapse */
    TimePickerComponentRefDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: TimePickerComponent },
        { type: ElementRef },
        { type: FrameContext }
    ]; };
    return TimePickerComponentRefDirective;
}(ComponentRef));
export { TimePickerComponentRefDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1waWNrZXItY29tcG9uZW50LXJlZi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2tlbmRvLWJpbmRpbmcvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9jb21wb25lbnQtcmVmL3RpbWUtcGlja2VyLWNvbXBvbmVudC1yZWYuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQWlCLFNBQVMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFxQixNQUFNLGVBQWUsQ0FBQztBQUNsRyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUMsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDN0QsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRS9DO0lBR3FELDJEQUFZO0lBQy9ELHlDQUFvQixRQUFrQixFQUFVLFNBQThCLEVBQVMsVUFBc0IsRUFBUyxZQUEwQjtRQUFoSixZQUNFLGtCQUFNLFlBQVksRUFBRSxVQUFVLENBQUMsU0FDaEM7UUFGbUIsY0FBUSxHQUFSLFFBQVEsQ0FBVTtRQUFVLGVBQVMsR0FBVCxTQUFTLENBQXFCO1FBQVMsZ0JBQVUsR0FBVixVQUFVLENBQVk7UUFBUyxrQkFBWSxHQUFaLFlBQVksQ0FBYzs7SUFFaEosQ0FBQztJQUNELHlEQUFlLEdBQWY7UUFDRSxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBQ0Qsa0RBQVEsR0FBUjtRQUNFLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFDRCxxREFBVyxHQUFYO0lBQ0EsQ0FBQzs7Z0JBZEYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxpQkFBaUI7aUJBQzVCOzs7O2dCQVA4QyxRQUFRO2dCQUU5QyxtQkFBbUI7Z0JBRk8sVUFBVTtnQkFDcEMsWUFBWTs7SUFvQnJCLHNDQUFDO0NBQUEsQUFoQkQsQ0FHcUQsWUFBWSxHQWFoRTtTQWJZLCtCQUErQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5qZWN0b3IsIE9uRGVzdHJveSwgT25Jbml0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgRnJhbWVDb250ZXh0IH0gZnJvbSBcIkBmYXJyaXMvZGV2a2l0XCI7XHJcbmltcG9ydCB7IFRpbWVQaWNrZXJDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLXRpbWUtcGlja2VyJztcclxuaW1wb3J0IHsgQ29tcG9uZW50UmVmIH0gZnJvbSBcIi4vY29tcG9uZW50LXJlZlwiO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbdGltZVBpY2tlclJlZl0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUaW1lUGlja2VyQ29tcG9uZW50UmVmRGlyZWN0aXZlIGV4dGVuZHMgQ29tcG9uZW50UmVmIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXQge1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCBwcml2YXRlIGNvbXBvbmVudDogVGltZVBpY2tlckNvbXBvbmVudCwgcHVibGljIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHB1YmxpYyBmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCkge1xyXG4gICAgc3VwZXIoZnJhbWVDb250ZXh0LCBlbGVtZW50UmVmKTtcclxuICB9XHJcbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xyXG4gICAgdGhpcy50cnlBZGRDb21wb25lbnQodGhpcy5jb21wb25lbnQpO1xyXG4gIH1cclxuICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgIHRoaXMuYWRkQ29tcG9uZW50KHRoaXMuY29tcG9uZW50KTtcclxuICB9XHJcbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgfVxyXG5cclxufSJdfQ==