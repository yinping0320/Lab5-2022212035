/**
 * 使用方法：
 * [comob-lookup-data-mapping]="{ id: 'user.userId', name: 'user.userName' }"
 * key 为帮助上的字段， value 为 表单中的字段名
 * 帮助上的同一个字段可以映射到表单中的多个字段中，{ ... id: 'user.userid, user.addusid'}
 * 多字段以逗号隔开
 *
 */
import * as tslib_1 from "tslib";
import { Directive, Optional, Self, Input } from '@angular/core';
import { BindingObject, ViewModel } from '@farris/devkit';
import { ComboLookupComponent } from '@farris/ui-combo-lookup';
import { DataMapping } from './data-mapping';
var ComboLookupDataMappingDirective = /** @class */ (function (_super) {
    tslib_1.__extends(ComboLookupDataMappingDirective, _super);
    function ComboLookupDataMappingDirective(vm, lookup) {
        var _this = _super.call(this) || this;
        _this.vm = vm;
        _this.lookup = lookup;
        _this.target = null;
        if (_this.lookup) {
            _this.lookup.useFormDataMapping = true;
        }
        return _this;
    }
    ComboLookupDataMappingDirective.prototype.ngOnInit = function () {
        var _this = this;
        // 值变化，亦通过该事件触发任意输入清空事件
        this.lookup.valueChange.subscribe(function (result) {
            if (!result['nosearch']) {
                // 值变化
                var data = result.selections && result.selections.length > 0 ? result.selections : null;
                _this.onValueChange(data);
            }
            else {
                // 任意输入清空映射字段
                _this.onClearMapping();
            }
        });
        // 清空事件
        this.lookup.clear.subscribe(function () {
            var _mapfields = _this.mapfields || _this.lookup.mapFields;
            _this.mappingData(null, _mapfields);
        });
    };
    ComboLookupDataMappingDirective.prototype.onClearMapping = function () {
        var _this = this;
        var mapfields = Object.assign({}, (this.mapfields || this.lookup.mapFields || {}));
        var lookupTextField = this.lookup.textField;
        var data = {};
        var controlName = this.lookup.ngControl && this.lookup.ngControl.name;
        if (controlName && this.vm) {
            var textFieldMapping = mapfields[lookupTextField];
            var ngFormControl = this.vm && this.vm.form && this.vm.form.ngFormControls && this.vm.form.ngFormControls[controlName];
            var binding_1 = ngFormControl && ngFormControl.binding;
            if (textFieldMapping && binding_1) {
                var targetField = textFieldMapping.split(',').filter(function (item) { return item !== binding_1; }).join(',');
                if (targetField) {
                    mapfields[lookupTextField] = targetField;
                }
                else {
                    delete mapfields[lookupTextField];
                }
            }
        }
        if (mapfields && Object.keys(mapfields).length > 0) {
            Object.keys(mapfields).forEach(function (field) {
                _this.setValue(data, field.split('.'), '');
            });
            this.mappingData(data, mapfields, true);
        }
    };
    ComboLookupDataMappingDirective.prototype.onValueChange = function (data) {
        var _mapfields = this.mapfields || this.lookup.mapFields;
        var spliter = this.lookup.separator || this.defaultSpliter;
        this.mappingData(data, _mapfields, false, spliter);
    };
    ComboLookupDataMappingDirective.decorators = [
        { type: Directive, args: [{ selector: '[combo-lookup-data-mapping]' },] }
    ];
    /** @nocollapse */
    ComboLookupDataMappingDirective.ctorParameters = function () { return [
        { type: ViewModel, decorators: [{ type: Optional }] },
        { type: ComboLookupComponent, decorators: [{ type: Optional }, { type: Self }] }
    ]; };
    ComboLookupDataMappingDirective.propDecorators = {
        mapfields: [{ type: Input, args: ['combo-lookup-data-mapping',] }],
        target: [{ type: Input, args: ['target',] }]
    };
    return ComboLookupDataMappingDirective;
}(DataMapping));
export { ComboLookupDataMappingDirective };
//# sourceMappingURL=data:application/json;base64,