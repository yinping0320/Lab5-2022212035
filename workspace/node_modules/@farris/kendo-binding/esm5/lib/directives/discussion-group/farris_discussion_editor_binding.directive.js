import { Directive, Injector, Input, HostListener } from '@angular/core';
import { DiscussionEditorComponent } from '@farris/discussion-group';
import { ViewModel } from '@farris/devkit';
import { of, EMPTY } from 'rxjs';
import { tap, catchError } from 'rxjs/operators';
var KEY_UISTATE_REPLY_MESSAGE = 'DISCUSSION_REPLY_MESSAGE_INFO';
var KEY_MESSAGE_ON_COMMENT_ADD = 'onCommentAdd';
var FarrisDiscussionEditorBindingDirective = /** @class */ (function () {
    function FarrisDiscussionEditorBindingDirective(injector, discussionEditorComponent, viewModel) {
        this.injector = injector;
        this.discussionEditorComponent = discussionEditorComponent;
        this.viewModel = viewModel;
    }
    FarrisDiscussionEditorBindingDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.discussionEditorComponent.replyUser = this.viewModel.frameContext.root.viewModel.uiState[KEY_UISTATE_REPLY_MESSAGE] || {};
        this.viewModel.frameContext.root.viewModel.uiState.changes.subscribe(function (change) {
            if (change.field === KEY_UISTATE_REPLY_MESSAGE) {
                _this.discussionEditorComponent.replyUser = _this.viewModel.frameContext.root.viewModel.uiState[KEY_UISTATE_REPLY_MESSAGE] || {};
            }
        });
        if (this.queryFrequentAtUsersCommand) {
            this.queryFrequentAtUsers();
        }
        else {
            this.queryAtUsers();
        }
        this.queryAllOrgs();
    };
    /**
     * 查询所有部门数据
     */
    FarrisDiscussionEditorBindingDirective.prototype.queryAllOrgs = function () {
        var _this = this;
        this.execute(this.queryAllOrgsCommand).subscribe(function (result) {
            if (!result) {
                return;
            }
            _this.discussionEditorComponent.sectionData = result;
        });
    };
    /**
     * 获取@用户
     */
    FarrisDiscussionEditorBindingDirective.prototype.queryAtUsers = function () {
        var _this = this;
        this.execute(this.userQueryCommand).subscribe(function (result) {
            if (!result) {
                return;
            }
            var _a = result.users, users = _a === void 0 ? [] : _a;
            _this.discussionEditorComponent.personnels = users;
        });
    };
    /**
     * 获取常用@用户
     */
    FarrisDiscussionEditorBindingDirective.prototype.queryFrequentAtUsers = function () {
        var _this = this;
        this.execute(this.queryFrequentAtUsersCommand).subscribe(function (result) {
            if (!result) {
                return;
            }
            _this.discussionEditorComponent.personnels = result && result.users || [];
        });
    };
    /**
     * 提交或取消评论
     * @param event event
     */
    FarrisDiscussionEditorBindingDirective.prototype.pageChangedHandler = function (event) {
        var _this = this;
        var _a = event || {}, _b = _a.msgInfo, msgInfo = _b === void 0 ? 0 : _b, _c = _a.text, text = _c === void 0 ? '' : _c, _d = _a.visibility, visibility = _d === void 0 ? 'ALL' : _d, _e = _a.parentId, parentId = _e === void 0 ? null : _e;
        if (msgInfo === 1) {
            this.execute(this.addCommentCommand, { text: text, parentId: parentId, visibility: visibility }).pipe(tap(function () {
                _this.viewModel.frameContext.appContext.messagePipe.next(KEY_MESSAGE_ON_COMMENT_ADD);
            }), catchError(function (e) { return EMPTY; })).subscribe();
        }
        else {
            // 取消的时候同时会将回复用户清空
            this.viewModel.frameContext.root.viewModel.uiState[KEY_UISTATE_REPLY_MESSAGE] = {};
            this.discussionEditorComponent.replyUser = {};
        }
    };
    /**
     * 执行命令
     * @param commandName 命令名称
     */
    FarrisDiscussionEditorBindingDirective.prototype.execute = function (commandName, params) {
        var _this = this;
        if (!commandName || commandName === '' || commandName === 'undefined') {
            return of(null);
        }
        if (typeof params === 'undefined') {
            params = {};
        }
        var paths = commandName.split('.');
        var func = null;
        paths.forEach(function (path) {
            func = func && func[path] || _this[path];
        });
        if (typeof func === 'function') {
            return func(params);
        }
        return of(null);
    };
    FarrisDiscussionEditorBindingDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farris-discussion-editor-binding]'
                },] }
    ];
    /** @nocollapse */
    FarrisDiscussionEditorBindingDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: DiscussionEditorComponent },
        { type: ViewModel }
    ]; };
    FarrisDiscussionEditorBindingDirective.propDecorators = {
        userQueryCommand: [{ type: Input, args: ["userQueryCommand",] }],
        addCommentCommand: [{ type: Input, args: ["addCommentCommand",] }],
        queryAllOrgsCommand: [{ type: Input, args: ["queryAllOrgsCommand",] }],
        queryFrequentAtUsersCommand: [{ type: Input, args: ["queryFrequentAtUsersCommand",] }],
        pageChangedHandler: [{ type: HostListener, args: ['valueChange', ['$event'],] }]
    };
    return FarrisDiscussionEditorBindingDirective;
}());
export { FarrisDiscussionEditorBindingDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFycmlzX2Rpc2N1c3Npb25fZWRpdG9yX2JpbmRpbmcuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9rZW5kby1iaW5kaW5nLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvZGlzY3Vzc2lvbi1ncm91cC9mYXJyaXNfZGlzY3Vzc2lvbl9lZGl0b3JfYmluZGluZy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFVLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsU0FBUyxFQUEwQixNQUFNLGdCQUFnQixDQUFDO0FBQ25FLE9BQU8sRUFBRSxFQUFFLEVBQWMsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDakQsSUFBTSx5QkFBeUIsR0FBRywrQkFBK0IsQ0FBQztBQUNsRSxJQUFNLDBCQUEwQixHQUFHLGNBQWMsQ0FBQztBQUVsRDtJQXNCRSxnREFBbUIsUUFBa0IsRUFBUyx5QkFBb0QsRUFBUyxTQUFvQjtRQUE1RyxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVMsOEJBQXlCLEdBQXpCLHlCQUF5QixDQUEyQjtRQUFTLGNBQVMsR0FBVCxTQUFTLENBQVc7SUFDL0gsQ0FBQztJQUVELHlEQUFRLEdBQVI7UUFBQSxpQkFjQztRQWJDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMseUJBQXlCLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDL0gsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMs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ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5qZWN0b3IsIElucHV0LCBPbkluaXQsIEhvc3RMaXN0ZW5lciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEaXNjdXNzaW9uRWRpdG9yQ29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy9kaXNjdXNzaW9uLWdyb3VwJztcclxuaW1wb3J0IHsgVmlld01vZGVsLCBVSVN0YXRlT2JzZXJ2YWJsZVBhcmFtIH0gZnJvbSAnQGZhcnJpcy9kZXZraXQnO1xyXG5pbXBvcnQgeyBvZiwgT2JzZXJ2YWJsZSwgRU1QVFkgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgdGFwLCBjYXRjaEVycm9yIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5jb25zdCBLRVlfVUlTVEFURV9SRVBMWV9NRVNTQUdFID0gJ0RJU0NVU1NJT05fUkVQTFlfTUVTU0FHRV9JTkZPJztcclxuY29uc3QgS0VZX01FU1NBR0VfT05fQ09NTUVOVF9BREQgPSAnb25Db21tZW50QWRkJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2ZhcnJpcy1kaXNjdXNzaW9uLWVkaXRvci1iaW5kaW5nXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIEZhcnJpc0Rpc2N1c3Npb25FZGl0b3JCaW5kaW5nRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+W55So5oi35ZG95LukXHJcbiAgICovXHJcbiAgQElucHV0KFwidXNlclF1ZXJ5Q29tbWFuZFwiKSB1c2VyUXVlcnlDb21tYW5kOiBzdHJpbmc7XHJcbiAgLyoqXHJcbiAgICog5re75Yqg6K+E6K665ZG95LukXHJcbiAgICovXHJcbiAgQElucHV0KFwiYWRkQ29tbWVudENvbW1hbmRcIikgYWRkQ29tbWVudENvbW1hbmQ6IHN0cmluZztcclxuICAvKipcclxuICAgKiDmn6Xor6LmiYDmnInpg6jpl6jlkb3ku6RcclxuICAgKi9cclxuICBASW5wdXQoXCJxdWVyeUFsbE9yZ3NDb21tYW5kXCIpIHF1ZXJ5QWxsT3Jnc0NvbW1hbmQ6IHN0cmluZztcclxuICAvKipcclxuICAgKiDmn6Xor6LluLjnlKhA55So5oi3XHJcbiAgICovXHJcbiAgQElucHV0KFwicXVlcnlGcmVxdWVudEF0VXNlcnNDb21tYW5kXCIpIHF1ZXJ5RnJlcXVlbnRBdFVzZXJzQ29tbWFuZDogc3RyaW5nO1xyXG5cclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgaW5qZWN0b3I6IEluamVjdG9yLCBwdWJsaWMgZGlzY3Vzc2lvbkVkaXRvckNvbXBvbmVudDogRGlzY3Vzc2lvbkVkaXRvckNvbXBvbmVudCwgcHVibGljIHZpZXdNb2RlbDogVmlld01vZGVsKSB7XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzY3Vzc2lvbkVkaXRvckNvbXBvbmVudC5yZXBseVVzZXIgPSB0aGlzLnZpZXdNb2RlbC5mcmFtZUNvbnRleHQucm9vdC52aWV3TW9kZWwudWlTdGF0ZVtLRVlfVUlTVEFURV9SRVBMWV9NRVNTQUdFXSB8fCB7fTtcclxuICAgIHRoaXMudmlld01vZGVsLmZyYW1lQ29udGV4dC5yb290LnZpZXdNb2RlbC51aVN0YXRlLmNoYW5nZXMuc3Vic2NyaWJlKChjaGFuZ2U6IFVJU3RhdGVPYnNlcnZhYmxlUGFyYW0pID0+IHtcclxuICAgICAgaWYgKGNoYW5nZS5maWVsZCA9PT0gS0VZX1VJU1RBVEVfUkVQTFlfTUVTU0FHRSkge1xyXG4gICAgICAgIHRoaXMuZGlzY3Vzc2lvbkVkaXRvckNvbXBvbmVudC5yZXBseVVzZXIgPSB0aGlzLnZpZXdNb2RlbC5mcmFtZUNvbnRleHQucm9vdC52aWV3TW9kZWwudWlTdGF0ZVtLRVlfVUlTVEFURV9SRVBMWV9NRVNTQUdFXSB8fCB7fTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBpZiAodGhpcy5xdWVyeUZyZXF1ZW50QXRVc2Vyc0NvbW1hbmQpIHtcclxuICAgICAgdGhpcy5xdWVyeUZyZXF1ZW50QXRVc2VycygpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5xdWVyeUF0VXNlcnMoKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnF1ZXJ5QWxsT3JncygpO1xyXG4gIH1cclxuICAvKipcclxuICAgKiDmn6Xor6LmiYDmnInpg6jpl6jmlbDmja5cclxuICAgKi9cclxuICBwcml2YXRlIHF1ZXJ5QWxsT3JncygpIHtcclxuICAgIHRoaXMuZXhlY3V0ZSh0aGlzLnF1ZXJ5QWxsT3Jnc0NvbW1hbmQpLnN1YnNjcmliZShyZXN1bHQgPT4ge1xyXG4gICAgICBpZiAoIXJlc3VsdCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmRpc2N1c3Npb25FZGl0b3JDb21wb25lbnQuc2VjdGlvbkRhdGEgPSByZXN1bHQ7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog6I635Y+WQOeUqOaIt1xyXG4gICAqL1xyXG4gIHByaXZhdGUgcXVlcnlBdFVzZXJzKCkge1xyXG4gICAgdGhpcy5leGVjdXRlKHRoaXMudXNlclF1ZXJ5Q29tbWFuZCkuc3Vic2NyaWJlKHJlc3VsdCA9PiB7XHJcbiAgICAgIGlmICghcmVzdWx0KSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IHsgdXNlcnMgPSBbXSB9ID0gcmVzdWx0O1xyXG4gICAgICB0aGlzLmRpc2N1c3Npb25FZGl0b3JDb21wb25lbnQucGVyc29ubmVscyA9IHVzZXJzO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluW4uOeUqEDnlKjmiLdcclxuICAgKi9cclxuICBwcml2YXRlIHF1ZXJ5RnJlcXVlbnRBdFVzZXJzKCkge1xyXG4gICAgdGhpcy5leGVjdXRlKHRoaXMucXVlcnlGcmVxdWVudEF0VXNlcnNDb21tYW5kKS5zdWJzY3JpYmUocmVzdWx0ID0+IHtcclxuICAgICAgaWYgKCFyZXN1bHQpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5kaXNjdXNzaW9uRWRpdG9yQ29tcG9uZW50LnBlcnNvbm5lbHMgPSByZXN1bHQgJiYgcmVzdWx0LnVzZXJzIHx8IFtdO1xyXG4gICAgfSk7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIOaPkOS6pOaIluWPlua2iOivhOiuulxyXG4gICAqIEBwYXJhbSBldmVudCBldmVudFxyXG4gICAqL1xyXG4gIEBIb3N0TGlzdGVuZXIoJ3ZhbHVlQ2hhbmdlJywgWyckZXZlbnQnXSlcclxuICBwdWJsaWMgcGFnZUNoYW5nZWRIYW5kbGVyKGV2ZW50OiBhbnkpIHtcclxuICAgIGNvbnN0IHsgbXNnSW5mbyA9IDAsIHRleHQgPSAnJywgdmlzaWJpbGl0eSA9ICdBTEwnLCBwYXJlbnRJZCA9IG51bGwgfSA9IGV2ZW50IHx8IHt9O1xyXG4gICAgaWYgKG1zZ0luZm8gPT09IDEpIHtcclxuICAgICAgdGhpcy5leGVjdXRlKHRoaXMuYWRkQ29tbWVudENvbW1hbmQsIHsgdGV4dCwgcGFyZW50SWQsIHZpc2liaWxpdHkgfSkucGlwZShcclxuICAgICAgICB0YXAoKCkgPT4ge1xyXG4gICAgICAgICAgdGhpcy52aWV3TW9kZWwuZnJhbWVDb250ZXh0LmFwcENvbnRleHQubWVzc2FnZVBpcGUubmV4dChLRVlfTUVTU0FHRV9PTl9DT01NRU5UX0FERCk7XHJcbiAgICAgICAgfSksXHJcbiAgICAgICAgY2F0Y2hFcnJvcihlID0+IEVNUFRZKVxyXG4gICAgICApLnN1YnNjcmliZSgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8g5Y+W5raI55qE5pe25YCZ5ZCM5pe25Lya5bCG5Zue5aSN55So5oi35riF56m6XHJcbiAgICAgIHRoaXMudmlld01vZGVsLmZyYW1lQ29udGV4dC5yb290LnZpZXdNb2RlbC51aVN0YXRlW0tFWV9VSVNUQVRFX1JFUExZX01FU1NBR0VdID0ge307XHJcbiAgICAgIHRoaXMuZGlzY3Vzc2lvbkVkaXRvckNvbXBvbmVudC5yZXBseVVzZXIgPSB7fTtcclxuICAgIH1cclxuICB9XHJcbiAgLyoqXHJcbiAgICog5omn6KGM5ZG95LukXHJcbiAgICogQHBhcmFtIGNvbW1hbmROYW1lIOWRveS7pOWQjeensFxyXG4gICAqL1xyXG4gIHByaXZhdGUgZXhlY3V0ZShjb21tYW5kTmFtZTogc3RyaW5nLCBwYXJhbXM/OiBhbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgaWYgKCFjb21tYW5kTmFtZSB8fCBjb21tYW5kTmFtZSA9PT0gJycgfHwgY29tbWFuZE5hbWUgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIHJldHVybiBvZihudWxsKTtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgcGFyYW1zID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICBwYXJhbXMgPSB7fTtcclxuICAgIH1cclxuICAgIGNvbnN0IHBhdGhzID0gY29tbWFuZE5hbWUuc3BsaXQoJy4nKTtcclxuICAgIGxldCBmdW5jID0gbnVsbDtcclxuICAgIHBhdGhzLmZvckVhY2gocGF0aCA9PiB7XHJcbiAgICAgIGZ1bmMgPSBmdW5jICYmIGZ1bmNbcGF0aF0gfHwgdGhpc1twYXRoXTtcclxuICAgIH0pO1xyXG4gICAgaWYgKHR5cGVvZiBmdW5jID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgIHJldHVybiBmdW5jKHBhcmFtcyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb2YobnVsbCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==