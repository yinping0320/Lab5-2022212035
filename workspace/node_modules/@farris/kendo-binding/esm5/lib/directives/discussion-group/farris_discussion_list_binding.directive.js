import { of, EMPTY } from 'rxjs';
import { Directive, Input, Injector, HostListener } from '@angular/core';
import { DiscussionListComponent, DiscussionListDirective } from '@farris/discussion-group';
import { ViewModel, ChangeType } from '@farris/devkit';
import { catchError } from 'rxjs/operators';
var KEY_UISTATE_REPLY_MESSAGE = 'DISCUSSION_REPLY_MESSAGE_INFO';
var KEY_MESSAGE_ON_COMMENT_ADD = 'onCommentAdd';
var FarrisDiscussionListBindingDirective = /** @class */ (function () {
    function FarrisDiscussionListBindingDirective(injector, discussionListComponent, viewModel, discussionListDirective) {
        this.injector = injector;
        this.discussionListComponent = discussionListComponent;
        this.viewModel = viewModel;
        this.discussionListDirective = discussionListDirective;
    }
    FarrisDiscussionListBindingDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.viewModel.frameContext.appContext.messagePipe.subscribe(function (message) {
            if (message === KEY_MESSAGE_ON_COMMENT_ADD) {
                _this.queryComments();
            }
        });
        this.viewModel.bindingData.changes.subscribe(function (change) {
            if (change.type === ChangeType.Load || change.type === ChangeType.SelectionChanged) {
                _this.queryComments();
            }
        });
    };
    /**
     * 查询评论
     */
    FarrisDiscussionListBindingDirective.prototype.queryComments = function (pageIndex, pageSize) {
        var _this = this;
        if (typeof pageIndex === 'undefined') {
            pageIndex = (this.discussionListComponent.pageIndex - 1) || 0;
        }
        if (typeof pageSize === 'undefined') {
            if (this.discussionListComponent.supportPaging) {
                pageSize = this.discussionListComponent.pageSize;
            }
            else {
                // 不分页，pageSize和后端约定传最大数
                pageSize = 10000;
            }
        }
        this.execute(this.commentsQueryCommand, { pageIndex: pageIndex, pageSize: pageSize }).pipe(catchError(function (e) { return EMPTY; })).subscribe(function (result) {
            if (!result) {
                return;
            }
            var _a = result.comments, comments = _a === void 0 ? [] : _a, _b = result.pageIndex, pageIndex = _b === void 0 ? 0 : _b, _c = result.pageSize, pageSize = _c === void 0 ? 10 : _c, _d = result.totalCount, totalCount = _d === void 0 ? 0 : _d;
            _this.discussionListComponent.pageIndex = parseInt(pageIndex) + 1;
            if (_this.discussionListComponent.supportPaging) {
                _this.discussionListComponent.pageSize = pageSize;
            }
            _this.discussionListComponent.total = totalCount;
            _this.discussionListDirective.discussionListData = result;
        });
    };
    /**
     * 回复消息
     * @param event event
     */
    FarrisDiscussionListBindingDirective.prototype.replyMessagedHandler = function (event) {
        this.viewModel.frameContext.root.viewModel.uiState.setPropertyValue(KEY_UISTATE_REPLY_MESSAGE, event);
    };
    /**
     * 切换页码
     * @param event event
     */
    FarrisDiscussionListBindingDirective.prototype.pageChangedHandler = function (event) {
        var _a = event.pageInfo || {}, _b = _a.pageIndex, pageIndex = _b === void 0 ? 1 : _b, _c = _a.pageSize, pageSize = _c === void 0 ? 10 : _c;
        this.queryComments(pageIndex - 1, pageSize);
    };
    /**
     * 执行命令
     * @param commandName 命令名称
     */
    FarrisDiscussionListBindingDirective.prototype.execute = function (commandName, params) {
        var _this = this;
        if (!commandName || commandName === '' || commandName === 'undefined') {
            return of(null);
        }
        var paths = commandName.split('.');
        var func = null;
        paths.forEach(function (path) {
            func = func && func[path] || _this[path];
        });
        if (typeof func === 'function') {
            return func(params);
        }
        return of(null);
    };
    FarrisDiscussionListBindingDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farris-discussion-list-binding]'
                },] }
    ];
    /** @nocollapse */
    FarrisDiscussionListBindingDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: DiscussionListComponent },
        { type: ViewModel },
        { type: DiscussionListDirective }
    ]; };
    FarrisDiscussionListBindingDirective.propDecorators = {
        commentsQueryCommand: [{ type: Input, args: ["commentsQueryCommand",] }],
        replyMessagedHandler: [{ type: HostListener, args: ['replyMessage', ['$event'],] }],
        pageChangedHandler: [{ type: HostListener, args: ['pageChanged', ['$event'],] }]
    };
    return FarrisDiscussionListBindingDirective;
}());
export { FarrisDiscussionListBindingDirective };
//# sourceMappingURL=data:application/json;base64,