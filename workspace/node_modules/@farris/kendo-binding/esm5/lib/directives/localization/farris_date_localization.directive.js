import { Directive, Inject, Injector } from "@angular/core";
import { UserSettingsToken } from "@farris/devkit";
import { FarrisDatepickerComponent } from '@farris/ui-datepicker';
var FarrisDateLocalizationDirective = /** @class */ (function () {
    function FarrisDateLocalizationDirective(injector, userSettings, componentRef) {
        this.injector = injector;
        this.userSettings = userSettings;
        this.componentRef = componentRef;
    }
    FarrisDateLocalizationDirective.prototype.ngOnInit = function () {
        this.localize();
    };
    FarrisDateLocalizationDirective.prototype.localize = function () {
        if (this.userSettings && this.componentRef) {
            var _a = this.userSettings, _b = _a.dateFormat, dateFormat = _b === void 0 ? null : _b, _c = _a.timeFormat, timeFormat = _c === void 0 ? null : _c;
            if (dateFormat === null && timeFormat === null) {
                return;
            }
            if (timeFormat && timeFormat && this.componentRef.showTime === true) {
                this.componentRef.dateFormat = dateFormat + " " + timeFormat;
                this.componentRef.dateOpts.dateFormat = dateFormat + " " + timeFormat;
                this.componentRef.updateValue(this.componentRef.value);
            }
            else if (dateFormat) {
                this.componentRef.dateFormat = "" + dateFormat;
                this.componentRef.dateOpts.dateFormat = "" + dateFormat;
                this.componentRef.updateValue(this.componentRef.value);
            }
        }
    };
    FarrisDateLocalizationDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farris-date-localization]'
                },] }
    ];
    /** @nocollapse */
    FarrisDateLocalizationDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: undefined, decorators: [{ type: Inject, args: [UserSettingsToken,] }] },
        { type: FarrisDatepickerComponent }
    ]; };
    return FarrisDateLocalizationDirective;
}());
export { FarrisDateLocalizationDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFycmlzX2RhdGVfbG9jYWxpemF0aW9uLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMva2VuZG8tYmluZGluZy8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL2xvY2FsaXphdGlvbi9mYXJyaXNfZGF0ZV9sb2NhbGl6YXRpb24uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUNwRSxPQUFPLEVBQWdCLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDakUsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDbEU7SUFJRSx5Q0FBb0IsUUFBa0IsRUFBcUMsWUFBMEIsRUFBVSxZQUF1QztRQUFsSSxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQXFDLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQVUsaUJBQVksR0FBWixZQUFZLENBQTJCO0lBRXRKLENBQUM7SUFDRCxrREFBUSxHQUFSO1FBQ0UsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2xCLENBQUM7SUFDTyxrREFBUSxHQUFoQjtRQUNFLElBQUksSUFBSSxDQUFDLFlBQVksSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3BDLElBQUEsc0JBQTRELEVBQTFELGtCQUFpQixFQUFqQixzQ0FBaUIsRUFBRSxrQkFBaUIsRUFBakIsc0NBQXVDLENBQUM7WUFDbkUsSUFBSSxVQUFVLEtBQUssSUFBSSxJQUFJLFVBQVUsS0FBSyxJQUFJLEVBQUU7Z0JBQzlDLE9BQU87YUFDUjtZQUNELElBQUksVUFBVSxJQUFJLFVBQVUsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsS0FBSyxJQUFJLEVBQUU7Z0JBQ25FLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxHQUFNLFVBQVUsU0FBSSxVQUFZLENBQUM7Z0JBQzdELElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLFVBQVUsR0FBTSxVQUFVLFNBQUksVUFBWSxDQUFDO2dCQUN0RSxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3hEO2lCQUFNLElBQUksVUFBVSxFQUFFO2dCQUNyQixJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsR0FBRyxLQUFHLFVBQVksQ0FBQztnQkFDL0MsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsVUFBVSxHQUFHLEtBQUcsVUFBWSxDQUFDO2dCQUN4RCxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3hEO1NBQ0Y7SUFDSCxDQUFDOztnQkExQkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSw0QkFBNEI7aUJBQ3ZDOzs7O2dCQUwyQixRQUFRO2dEQU9PLE1BQU0sU0FBQyxpQkFBaUI7Z0JBTDFELHlCQUF5Qjs7SUE0QmxDLHNDQUFDO0NBQUEsQUEzQkQsSUEyQkM7U0F4QlksK0JBQStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbmplY3QsIEluamVjdG9yLCBPbkluaXQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBVc2VyU2V0dGluZ3MsIFVzZXJTZXR0aW5nc1Rva2VuIH0gZnJvbSBcIkBmYXJyaXMvZGV2a2l0XCI7XHJcbmltcG9ydCB7IEZhcnJpc0RhdGVwaWNrZXJDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLWRhdGVwaWNrZXInO1xyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tmYXJyaXMtZGF0ZS1sb2NhbGl6YXRpb25dJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgRmFycmlzRGF0ZUxvY2FsaXphdGlvbkRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsIEBJbmplY3QoVXNlclNldHRpbmdzVG9rZW4pIHByaXZhdGUgdXNlclNldHRpbmdzOiBVc2VyU2V0dGluZ3MsIHByaXZhdGUgY29tcG9uZW50UmVmOiBGYXJyaXNEYXRlcGlja2VyQ29tcG9uZW50KSB7XHJcblxyXG4gIH1cclxuICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgIHRoaXMubG9jYWxpemUoKTtcclxuICB9XHJcbiAgcHJpdmF0ZSBsb2NhbGl6ZSgpIHtcclxuICAgIGlmICh0aGlzLnVzZXJTZXR0aW5ncyAmJiB0aGlzLmNvbXBvbmVudFJlZikge1xyXG4gICAgICBjb25zdCB7IGRhdGVGb3JtYXQgPSBudWxsLCB0aW1lRm9ybWF0ID0gbnVsbCB9ID0gdGhpcy51c2VyU2V0dGluZ3M7XHJcbiAgICAgIGlmIChkYXRlRm9ybWF0ID09PSBudWxsICYmIHRpbWVGb3JtYXQgPT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHRpbWVGb3JtYXQgJiYgdGltZUZvcm1hdCAmJiB0aGlzLmNvbXBvbmVudFJlZi5zaG93VGltZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIHRoaXMuY29tcG9uZW50UmVmLmRhdGVGb3JtYXQgPSBgJHtkYXRlRm9ybWF0fSAke3RpbWVGb3JtYXR9YDtcclxuICAgICAgICB0aGlzLmNvbXBvbmVudFJlZi5kYXRlT3B0cy5kYXRlRm9ybWF0ID0gYCR7ZGF0ZUZvcm1hdH0gJHt0aW1lRm9ybWF0fWA7XHJcbiAgICAgICAgdGhpcy5jb21wb25lbnRSZWYudXBkYXRlVmFsdWUodGhpcy5jb21wb25lbnRSZWYudmFsdWUpO1xyXG4gICAgICB9IGVsc2UgaWYgKGRhdGVGb3JtYXQpIHtcclxuICAgICAgICB0aGlzLmNvbXBvbmVudFJlZi5kYXRlRm9ybWF0ID0gYCR7ZGF0ZUZvcm1hdH1gO1xyXG4gICAgICAgIHRoaXMuY29tcG9uZW50UmVmLmRhdGVPcHRzLmRhdGVGb3JtYXQgPSBgJHtkYXRlRm9ybWF0fWA7XHJcbiAgICAgICAgdGhpcy5jb21wb25lbnRSZWYudXBkYXRlVmFsdWUodGhpcy5jb21wb25lbnRSZWYudmFsdWUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59Il19