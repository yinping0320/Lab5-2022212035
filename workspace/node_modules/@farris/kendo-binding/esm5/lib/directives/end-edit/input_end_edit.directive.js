import * as tslib_1 from "tslib";
import { Directive, ElementRef } from '@angular/core';
import { AppContext } from '@farris/devkit';
import { AbstractEndEdit } from './abstract_end_edit';
var InputEndEditDirective = /** @class */ (function (_super) {
    tslib_1.__extends(InputEndEditDirective, _super);
    function InputEndEditDirective(appContext, elementRef) {
        var _this = _super.call(this, appContext) || this;
        _this.appContext = appContext;
        _this.elementRef = elementRef;
        return _this;
    }
    InputEndEditDirective.prototype.ngOnInit = function () {
        if (this.elementRef) {
            this.nativeElement = this.elementRef.nativeElement;
        }
    };
    /**
     * 结束编辑
     * @param message 消息
     */
    InputEndEditDirective.prototype.endEdit = function (message) {
        if (this.nativeElement) {
            var parent_1 = this.nativeElement.parentNode || this.nativeElement.parentElement;
            var inputs = parent_1 && Array.from(parent_1.getElementsByTagName('input')) || [];
            if (inputs && inputs.length > 0) {
                inputs.forEach(function (input) {
                    if (input && typeof (input.blur) === 'function') {
                        input.blur();
                    }
                });
            }
        }
    };
    InputEndEditDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[input-end-edit]'
                },] }
    ];
    /** @nocollapse */
    InputEndEditDirective.ctorParameters = function () { return [
        { type: AppContext },
        { type: ElementRef }
    ]; };
    return InputEndEditDirective;
}(AbstractEndEdit));
export { InputEndEditDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRfZW5kX2VkaXQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9rZW5kby1iaW5kaW5nLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvZW5kLWVkaXQvaW5wdXRfZW5kX2VkaXQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBb0MsTUFBTSxlQUFlLENBQUM7QUFDeEYsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUV0RDtJQUdvQyxpREFBZTtJQUVqRCwrQkFBc0IsVUFBc0IsRUFBVSxVQUFzQjtRQUE1RSxZQUNFLGtCQUFNLFVBQVUsQ0FBQyxTQUNsQjtRQUZxQixnQkFBVSxHQUFWLFVBQVUsQ0FBWTtRQUFVLGdCQUFVLEdBQVYsVUFBVSxDQUFZOztJQUU1RSxDQUFDO0lBQ0Qsd0NBQVEsR0FBUjtRQUNFLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNuQixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDO1NBQ3BEO0lBQ0gsQ0FBQztJQUNEOzs7T0FHRztJQUNJLHVDQUFPLEdBQWQsVUFBZSxPQUFZO1FBQ3pCLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUN0QixJQUFNLFFBQU0sR0FBUSxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQztZQUN0RixJQUFNLE1BQU0sR0FBZSxRQUFNLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFNLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDNUYsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQy9CLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBQSxLQUFLO29CQUNsQixJQUFJLEtBQUssSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLFVBQVUsRUFBRTt3QkFDL0MsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO3FCQUNkO2dCQUNILENBQUMsQ0FBQyxDQUFDO2FBQ0o7U0FDRjtJQUNILENBQUM7O2dCQTdCRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjtpQkFDN0I7Ozs7Z0JBTFEsVUFBVTtnQkFEQyxVQUFVOztJQWtDOUIsNEJBQUM7Q0FBQSxBQTlCRCxDQUdvQyxlQUFlLEdBMkJsRDtBQUNELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBPbkluaXQsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBBcHBDb250ZXh0IH0gZnJvbSAnQGZhcnJpcy9kZXZraXQnO1xyXG5pbXBvcnQgeyBBYnN0cmFjdEVuZEVkaXQgfSBmcm9tICcuL2Fic3RyYWN0X2VuZF9lZGl0JztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2lucHV0LWVuZC1lZGl0XSdcclxufSlcclxuY2xhc3MgSW5wdXRFbmRFZGl0RGlyZWN0aXZlIGV4dGVuZHMgQWJzdHJhY3RFbmRFZGl0IGltcGxlbWVudHMgT25Jbml0IHtcclxuICBwcml2YXRlIG5hdGl2ZUVsZW1lbnQ6IGFueTtcclxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgYXBwQ29udGV4dDogQXBwQ29udGV4dCwgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XHJcbiAgICBzdXBlcihhcHBDb250ZXh0KTtcclxuICB9XHJcbiAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5lbGVtZW50UmVmKSB7XHJcbiAgICAgIHRoaXMubmF0aXZlRWxlbWVudCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xyXG4gICAgfVxyXG4gIH1cclxuICAvKipcclxuICAgKiDnu5PmnZ/nvJbovpFcclxuICAgKiBAcGFyYW0gbWVzc2FnZSDmtojmga9cclxuICAgKi9cclxuICBwdWJsaWMgZW5kRWRpdChtZXNzYWdlOiBhbnkpIHtcclxuICAgIGlmICh0aGlzLm5hdGl2ZUVsZW1lbnQpIHtcclxuICAgICAgY29uc3QgcGFyZW50OiBhbnkgPSB0aGlzLm5hdGl2ZUVsZW1lbnQucGFyZW50Tm9kZSB8fCB0aGlzLm5hdGl2ZUVsZW1lbnQucGFyZW50RWxlbWVudDtcclxuICAgICAgY29uc3QgaW5wdXRzOiBBcnJheTxhbnk+ID0gcGFyZW50ICYmIEFycmF5LmZyb20ocGFyZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpbnB1dCcpKSB8fCBbXTtcclxuICAgICAgaWYgKGlucHV0cyAmJiBpbnB1dHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGlucHV0cy5mb3JFYWNoKGlucHV0ID0+IHtcclxuICAgICAgICAgIGlmIChpbnB1dCAmJiB0eXBlb2YgKGlucHV0LmJsdXIpID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIGlucHV0LmJsdXIoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5leHBvcnQgeyBJbnB1dEVuZEVkaXREaXJlY3RpdmUgfTtcclxuIl19