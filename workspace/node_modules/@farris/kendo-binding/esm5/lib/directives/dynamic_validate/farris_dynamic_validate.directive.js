import { Directive, Injector, Input } from "@angular/core";
import { FrameContext } from "@farris/devkit";
var EXCLUDE_VALIDATE_FIELDS = 'excludeValidateRules';
var RULETYPE = 'required';
var FarrisDynamicRequiredDirective = /** @class */ (function () {
    function FarrisDynamicRequiredDirective(frameContext, injector) {
        this.frameContext = frameContext;
        this.injector = injector;
        /**
         * 启用校验的时机
         */
        this.requiredOn = false;
    }
    FarrisDynamicRequiredDirective.prototype.ngOnDestroy = function () {
        this.updateValidateRule(false);
    };
    FarrisDynamicRequiredDirective.prototype.ngOnChanges = function (changes) {
        // 启用必填校验
        this.updateValidateRule(this.requiredOn);
    };
    /**
     *
     * @param isRequired
     */
    FarrisDynamicRequiredDirective.prototype.updateValidateRule = function (isRequired) {
        if (!this.field) {
            return;
        }
        this.frameContext.form.updateFieldValidateRule(this.field, isRequired);
        // if (isRequired) {
        //   const rules = this.frameContext.params.get(EXCLUDE_VALIDATE_FIELDS) || {};
        //   const fieldExcludeRules: string[] = rules[this.field] || [];
        //   if (fieldExcludeRules.includes(RULETYPE)) {
        //     const index = fieldExcludeRules.indexOf(RULETYPE);
        //     fieldExcludeRules.splice(index, 1);
        //   }
        //   this.frameContext.params.set(EXCLUDE_VALIDATE_FIELDS, rules);
        //   this.frameContext.form.updateFieldValidateRule(this.field, fieldExcludeRules);
        // } else {
        //   // 禁用校验
        //   // {int1:[required,maxValue]}
        //   const rules = this.frameContext.params.get(EXCLUDE_VALIDATE_FIELDS) || {};
        //   const fieldExcludeRules = rules[this.field] || [];
        //   if (fieldExcludeRules && !fieldExcludeRules.includes(RULETYPE)) {
        //     fieldExcludeRules.push(RULETYPE);
        //   }
        //   rules[this.field] = fieldExcludeRules;
        //   this.frameContext.params.set(EXCLUDE_VALIDATE_FIELDS, rules);
        //   this.frameContext.form.updateFieldValidateRule(this.field, fieldExcludeRules);
        // }
    };
    FarrisDynamicRequiredDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farris-dynamic-required]'
                },] }
    ];
    /** @nocollapse */
    FarrisDynamicRequiredDirective.ctorParameters = function () { return [
        { type: FrameContext },
        { type: Injector }
    ]; };
    FarrisDynamicRequiredDirective.propDecorators = {
        field: [{ type: Input, args: ['farris-dynamic-required',] }],
        requiredOn: [{ type: Input, args: ['requiredOn',] }]
    };
    return FarrisDynamicRequiredDirective;
}());
export { FarrisDynamicRequiredDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFycmlzX2R5bmFtaWNfdmFsaWRhdGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9rZW5kby1iaW5kaW5nLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvZHluYW1pY192YWxpZGF0ZS9mYXJyaXNfZHluYW1pY192YWxpZGF0ZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUF1QyxNQUFNLGVBQWUsQ0FBQztBQUNoRyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUMsSUFBTSx1QkFBdUIsR0FBRyxzQkFBc0IsQ0FBQztBQUN2RCxJQUFNLFFBQVEsR0FBRyxVQUFVLENBQUM7QUFDNUI7SUFZRSx3Q0FBc0IsWUFBMEIsRUFBVSxRQUFrQjtRQUF0RCxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUFVLGFBQVEsR0FBUixRQUFRLENBQVU7UUFKNUU7O1dBRUc7UUFDa0IsZUFBVSxHQUFZLEtBQUssQ0FBQztJQUdqRCxDQUFDO0lBQ0Qsb0RBQVcsR0FBWDtRQUNFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBQ0Qsb0RBQVcsR0FBWCxVQUFZLE9BQXNCO1FBQ2hDLFNBQVM7UUFDVCxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFDRDs7O09BR0c7SUFDSywyREFBa0IsR0FBMUIsVUFBMkIsVUFBbUI7UUFDNUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZixPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3ZFLG9CQUFvQjtRQUNwQiwrRUFBK0U7UUFDL0UsaUVBQWlFO1FBQ2pFLGdEQUFnRDtRQUNoRCx5REFBeUQ7UUFDekQsMENBQTBDO1FBQzFDLE1BQU07UUFDTixrRUFBa0U7UUFDbEUsbUZBQW1GO1FBQ25GLFdBQVc7UUFDWCxZQUFZO1FBQ1osa0NBQWtDO1FBQ2xDLCtFQUErRTtRQUMvRSx1REFBdUQ7UUFDdkQsc0VBQXNFO1FBQ3RFLHdDQUF3QztRQUN4QyxNQUFNO1FBQ04sMkNBQTJDO1FBQzNDLGtFQUFrRTtRQUNsRSxtRkFBbUY7UUFDbkYsSUFBSTtJQUNOLENBQUM7O2dCQXBERixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLDJCQUEyQjtpQkFDdEM7Ozs7Z0JBTFEsWUFBWTtnQkFERCxRQUFROzs7d0JBV3pCLEtBQUssU0FBQyx5QkFBeUI7NkJBSS9CLEtBQUssU0FBQyxZQUFZOztJQTJDckIscUNBQUM7Q0FBQSxBQXRERCxJQXNEQztTQW5EWSw4QkFBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEluamVjdG9yLCBJbnB1dCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIFNpbXBsZUNoYW5nZXMgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBGcmFtZUNvbnRleHQgfSBmcm9tIFwiQGZhcnJpcy9kZXZraXRcIjtcclxuY29uc3QgRVhDTFVERV9WQUxJREFURV9GSUVMRFMgPSAnZXhjbHVkZVZhbGlkYXRlUnVsZXMnO1xyXG5jb25zdCBSVUxFVFlQRSA9ICdyZXF1aXJlZCc7XHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2ZhcnJpcy1keW5hbWljLXJlcXVpcmVkXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIEZhcnJpc0R5bmFtaWNSZXF1aXJlZERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcclxuICAvKipcclxuICAgKiBsaWtlIHtmaWVsZDonJyx0eXBlOidyZXF1aXJlJ31cclxuICAgKi9cclxuICBASW5wdXQoJ2ZhcnJpcy1keW5hbWljLXJlcXVpcmVkJykgZmllbGQ6IHN0cmluZztcclxuICAvKipcclxuICAgKiDlkK/nlKjmoKHpqoznmoTml7bmnLpcclxuICAgKi9cclxuICBASW5wdXQoJ3JlcXVpcmVkT24nKSByZXF1aXJlZE9uOiBib29sZWFuID0gZmFsc2U7XHJcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGZyYW1lQ29udGV4dDogRnJhbWVDb250ZXh0LCBwcml2YXRlIGluamVjdG9yOiBJbmplY3Rvcikge1xyXG5cclxuICB9XHJcbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICB0aGlzLnVwZGF0ZVZhbGlkYXRlUnVsZShmYWxzZSk7XHJcbiAgfVxyXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgIC8vIOWQr+eUqOW/heWhq+agoemqjFxyXG4gICAgdGhpcy51cGRhdGVWYWxpZGF0ZVJ1bGUodGhpcy5yZXF1aXJlZE9uKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogXHJcbiAgICogQHBhcmFtIGlzUmVxdWlyZWQgXHJcbiAgICovXHJcbiAgcHJpdmF0ZSB1cGRhdGVWYWxpZGF0ZVJ1bGUoaXNSZXF1aXJlZDogYm9vbGVhbikge1xyXG4gICAgaWYgKCF0aGlzLmZpZWxkKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMuZnJhbWVDb250ZXh0LmZvcm0udXBkYXRlRmllbGRWYWxpZGF0ZVJ1bGUodGhpcy5maWVsZCwgaXNSZXF1aXJlZCk7XHJcbiAgICAvLyBpZiAoaXNSZXF1aXJlZCkge1xyXG4gICAgLy8gICBjb25zdCBydWxlcyA9IHRoaXMuZnJhbWVDb250ZXh0LnBhcmFtcy5nZXQoRVhDTFVERV9WQUxJREFURV9GSUVMRFMpIHx8IHt9O1xyXG4gICAgLy8gICBjb25zdCBmaWVsZEV4Y2x1ZGVSdWxlczogc3RyaW5nW10gPSBydWxlc1t0aGlzLmZpZWxkXSB8fCBbXTtcclxuICAgIC8vICAgaWYgKGZpZWxkRXhjbHVkZVJ1bGVzLmluY2x1ZGVzKFJVTEVUWVBFKSkge1xyXG4gICAgLy8gICAgIGNvbnN0IGluZGV4ID0gZmllbGRFeGNsdWRlUnVsZXMuaW5kZXhPZihSVUxFVFlQRSk7XHJcbiAgICAvLyAgICAgZmllbGRFeGNsdWRlUnVsZXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgIC8vICAgfVxyXG4gICAgLy8gICB0aGlzLmZyYW1lQ29udGV4dC5wYXJhbXMuc2V0KEVYQ0xVREVfVkFMSURBVEVfRklFTERTLCBydWxlcyk7XHJcbiAgICAvLyAgIHRoaXMuZnJhbWVDb250ZXh0LmZvcm0udXBkYXRlRmllbGRWYWxpZGF0ZVJ1bGUodGhpcy5maWVsZCwgZmllbGRFeGNsdWRlUnVsZXMpO1xyXG4gICAgLy8gfSBlbHNlIHtcclxuICAgIC8vICAgLy8g56aB55So5qCh6aqMXHJcbiAgICAvLyAgIC8vIHtpbnQxOltyZXF1aXJlZCxtYXhWYWx1ZV19XHJcbiAgICAvLyAgIGNvbnN0IHJ1bGVzID0gdGhpcy5mcmFtZUNvbnRleHQucGFyYW1zLmdldChFWENMVURFX1ZBTElEQVRFX0ZJRUxEUykgfHwge307XHJcbiAgICAvLyAgIGNvbnN0IGZpZWxkRXhjbHVkZVJ1bGVzID0gcnVsZXNbdGhpcy5maWVsZF0gfHwgW107XHJcbiAgICAvLyAgIGlmIChmaWVsZEV4Y2x1ZGVSdWxlcyAmJiAhZmllbGRFeGNsdWRlUnVsZXMuaW5jbHVkZXMoUlVMRVRZUEUpKSB7XHJcbiAgICAvLyAgICAgZmllbGRFeGNsdWRlUnVsZXMucHVzaChSVUxFVFlQRSk7XHJcbiAgICAvLyAgIH1cclxuICAgIC8vICAgcnVsZXNbdGhpcy5maWVsZF0gPSBmaWVsZEV4Y2x1ZGVSdWxlcztcclxuICAgIC8vICAgdGhpcy5mcmFtZUNvbnRleHQucGFyYW1zLnNldChFWENMVURFX1ZBTElEQVRFX0ZJRUxEUywgcnVsZXMpO1xyXG4gICAgLy8gICB0aGlzLmZyYW1lQ29udGV4dC5mb3JtLnVwZGF0ZUZpZWxkVmFsaWRhdGVSdWxlKHRoaXMuZmllbGQsIGZpZWxkRXhjbHVkZVJ1bGVzKTtcclxuICAgIC8vIH1cclxuICB9XHJcblxyXG59XHJcbiJdfQ==