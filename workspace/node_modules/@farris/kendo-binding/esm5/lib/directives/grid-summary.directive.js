import { Directive, Input, NgZone } from '@angular/core';
import { BindingData } from '@farris/devkit';
import { ColumnComponent } from '@progress/kendo-angular-grid';
var GridColumnAggregateDirective = /** @class */ (function () {
    function GridColumnAggregateDirective(column, ngZone) {
        this.column = column;
        this.ngZone = ngZone;
    }
    Object.defineProperty(GridColumnAggregateDirective.prototype, "field", {
        get: function () {
            return this.column.field;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GridColumnAggregateDirective.prototype, "aggrType", {
        get: function () {
            var type = 'none';
            if (typeof (this.aggregate) === 'boolean') {
                // 默认为sum，如果使用指令时传入的input为布尔类型，使用sum。
                if (this.aggregate) {
                    type = 'sum';
                }
            }
            else if (typeof (this.aggregate) === 'string') {
                type = this.aggregate;
            }
            return type;
        },
        enumerable: true,
        configurable: true
    });
    GridColumnAggregateDirective.prototype.recalculateSummary = function (bindingList) {
        var _this = this;
        var summary = null;
        if (this.aggrType === 'sum') {
            var plainData = bindingList.toJSON().map(function (item) {
                // 考虑帮助和udt的情况，field是a.b的格式。
                return _this.field.split('.').reduce(function (prevPath, currPath) {
                    return prevPath[currPath];
                }, item);
            });
            if (plainData && plainData.length) {
                summary = plainData.reduce(function (prev, curr) {
                    return prev + curr;
                });
            }
        }
        else if (this.aggrType === 'count') {
            // 计数，如果启用分页，只计算当前页，因此使用length而非total。
            summary = bindingList.length;
        }
        this.updateFooter(summary);
    };
    GridColumnAggregateDirective.prototype.updateFooter = function (content) {
        if (this.aggregate) {
            // 存在性能问题，去掉setTimeout。
            // 列表的列越多，此处问题越严重，需要正向解决以下错误。
            // todo: settimeout是为了解决数据变化时angular报错，如果更新页脚的逻辑不在gridbinding发起，是否还存在问题？
            // setTimeout(() => {
            this.column['summary'] = content;
            // });
        }
    };
    GridColumnAggregateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[aggregate]',
                },] }
    ];
    /** @nocollapse */
    GridColumnAggregateDirective.ctorParameters = function () { return [
        { type: ColumnComponent },
        { type: NgZone }
    ]; };
    GridColumnAggregateDirective.propDecorators = {
        aggregate: [{ type: Input }]
    };
    return GridColumnAggregateDirective;
}());
export { GridColumnAggregateDirective };
var GridSummaryDirective = /** @class */ (function () {
    function GridSummaryDirective(bindingData) {
        this.bindingData = bindingData;
    }
    GridSummaryDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farrisSummary]'
                },] }
    ];
    /** @nocollapse */
    GridSummaryDirective.ctorParameters = function () { return [
        { type: BindingData }
    ]; };
    GridSummaryDirective.propDecorators = {
        summary: [{ type: Input, args: ['farrisSummary',] }]
    };
    return GridSummaryDirective;
}());
export { GridSummaryDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1zdW1tYXJ5LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMva2VuZG8tYmluZGluZy8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL2dyaWQtc3VtbWFyeS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBOEIsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRixPQUFPLEVBQUUsV0FBVyxFQUFlLE1BQU0sZ0JBQWdCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRS9EO0lBd0JFLHNDQUFvQixNQUF1QixFQUFVLE1BQWM7UUFBL0MsV0FBTSxHQUFOLE1BQU0sQ0FBaUI7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFRO0lBQ25FLENBQUM7SUFsQkQsc0JBQVcsK0NBQUs7YUFBaEI7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1FBQzNCLENBQUM7OztPQUFBO0lBRUQsc0JBQVksa0RBQVE7YUFBcEI7WUFDRSxJQUFJLElBQUksR0FBRyxNQUFNLENBQUM7WUFDbEIsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLFNBQVMsRUFBRTtnQkFDekMscUNBQXFDO2dCQUNyQyxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7b0JBQ2xCLElBQUksR0FBRyxLQUFLLENBQUM7aUJBQ2Q7YUFDRjtpQkFBTSxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssUUFBUSxFQUFFO2dCQUMvQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQzthQUN2QjtZQUNELE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQzs7O09BQUE7SUFLTSx5REFBa0IsR0FBekIsVUFBMEIsV0FBd0I7UUFBbEQsaUJBbUJDO1FBbEJDLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQztRQUNuQixJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssS0FBSyxFQUFFO1lBQzNCLElBQU0sU0FBUyxHQUFHLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsVUFBQSxJQUFJO2dCQUM3Qyw0QkFBNEI7Z0JBQzVCLE9BQU8sS0FBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQUMsUUFBUSxFQUFFLFFBQVE7b0JBQ3JELE9BQU8sUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUM1QixDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDWCxDQUFDLENBQUMsQ0FBQztZQUNILElBQUksU0FBUyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEVBQUU7Z0JBQ2pDLE9BQU8sR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQUMsSUFBSSxFQUFFLElBQUk7b0JBQ3BDLE9BQU8sSUFBSSxHQUFHLElBQUksQ0FBQztnQkFDckIsQ0FBQyxDQUFDLENBQUM7YUFDSjtTQUNGO2FBQU0sSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLE9BQU8sRUFBRTtZQUNwQyxzQ0FBc0M7WUFDdEMsT0FBTyxHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQUM7U0FDOUI7UUFDRCxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFTSxtREFBWSxHQUFuQixVQUFvQixPQUFZO1FBQzlCLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNoQix1QkFBdUI7WUFDdkIsNkJBQTZCO1lBQzdCLHdFQUF3RTtZQUN4RSxxQkFBcUI7WUFDbkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxPQUFPLENBQUM7WUFDbkMsTUFBTTtTQUNUO0lBQ0gsQ0FBQzs7Z0JBekRGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsYUFBYTtpQkFDeEI7Ozs7Z0JBSlEsZUFBZTtnQkFGK0IsTUFBTTs7OzRCQVMxRCxLQUFLOztJQXFEUixtQ0FBQztDQUFBLEFBMURELElBMERDO1NBdkRZLDRCQUE0QjtBQTBEekM7SUFLRSw4QkFBb0IsV0FBd0I7UUFBeEIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7SUFBSSxDQUFDOztnQkFMbEQsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxpQkFBaUI7aUJBQzVCOzs7O2dCQWxFUSxXQUFXOzs7MEJBb0VqQixLQUFLLFNBQUMsZUFBZTs7SUFHeEIsMkJBQUM7Q0FBQSxBQVBELElBT0M7U0FKWSxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIENvbnRlbnRDaGlsZHJlbiwgUXVlcnlMaXN0LCBJbnB1dCwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEJpbmRpbmdEYXRhLCBCaW5kaW5nTGlzdCB9IGZyb20gJ0BmYXJyaXMvZGV2a2l0JztcclxuaW1wb3J0IHsgQ29sdW1uQ29tcG9uZW50IH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItZ3JpZCc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1thZ2dyZWdhdGVdJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIEdyaWRDb2x1bW5BZ2dyZWdhdGVEaXJlY3RpdmUge1xyXG5cclxuICBASW5wdXQoKSBhZ2dyZWdhdGU6IHN0cmluZyB8IGJvb2xlYW47XHJcblxyXG4gIHB1YmxpYyBnZXQgZmllbGQoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLmNvbHVtbi5maWVsZDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0IGFnZ3JUeXBlKCk6IHN0cmluZyB7XHJcbiAgICBsZXQgdHlwZSA9ICdub25lJztcclxuICAgIGlmICh0eXBlb2YgKHRoaXMuYWdncmVnYXRlKSA9PT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgIC8vIOm7mOiupOS4unN1be+8jOWmguaenOS9v+eUqOaMh+S7pOaXtuS8oOWFpeeahGlucHV05Li65biD5bCU57G75Z6L77yM5L2/55Soc3Vt44CCXHJcbiAgICAgIGlmICh0aGlzLmFnZ3JlZ2F0ZSkge1xyXG4gICAgICAgIHR5cGUgPSAnc3VtJztcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgKHRoaXMuYWdncmVnYXRlKSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgdHlwZSA9IHRoaXMuYWdncmVnYXRlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHR5cGU7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbHVtbjogQ29sdW1uQ29tcG9uZW50LCBwcml2YXRlIG5nWm9uZTogTmdab25lKSB7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcmVjYWxjdWxhdGVTdW1tYXJ5KGJpbmRpbmdMaXN0OiBCaW5kaW5nTGlzdCkge1xyXG4gICAgbGV0IHN1bW1hcnkgPSBudWxsO1xyXG4gICAgaWYgKHRoaXMuYWdnclR5cGUgPT09ICdzdW0nKSB7XHJcbiAgICAgIGNvbnN0IHBsYWluRGF0YSA9IGJpbmRpbmdMaXN0LnRvSlNPTigpLm1hcChpdGVtID0+IHtcclxuICAgICAgICAvLyDogIPomZHluK7liqnlkox1ZHTnmoTmg4XlhrXvvIxmaWVsZOaYr2EuYueahOagvOW8j+OAglxyXG4gICAgICAgIHJldHVybiB0aGlzLmZpZWxkLnNwbGl0KCcuJykucmVkdWNlKChwcmV2UGF0aCwgY3VyclBhdGgpID0+IHtcclxuICAgICAgICAgIHJldHVybiBwcmV2UGF0aFtjdXJyUGF0aF07XHJcbiAgICAgICAgfSwgaXRlbSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBpZiAocGxhaW5EYXRhICYmIHBsYWluRGF0YS5sZW5ndGgpIHtcclxuICAgICAgICBzdW1tYXJ5ID0gcGxhaW5EYXRhLnJlZHVjZSgocHJldiwgY3VycikgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIHByZXYgKyBjdXJyO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMuYWdnclR5cGUgPT09ICdjb3VudCcpIHtcclxuICAgICAgLy8g6K6h5pWw77yM5aaC5p6c5ZCv55So5YiG6aG177yM5Y+q6K6h566X5b2T5YmN6aG177yM5Zug5q2k5L2/55SobGVuZ3Ro6ICM6Z2edG90YWzjgIJcclxuICAgICAgc3VtbWFyeSA9IGJpbmRpbmdMaXN0Lmxlbmd0aDtcclxuICAgIH1cclxuICAgIHRoaXMudXBkYXRlRm9vdGVyKHN1bW1hcnkpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHVwZGF0ZUZvb3Rlcihjb250ZW50OiBhbnkpIHtcclxuICAgIGlmICh0aGlzLmFnZ3JlZ2F0ZSkge1xyXG4gICAgICAgIC8vIOWtmOWcqOaAp+iDvemXrumimO+8jOWOu+aOiXNldFRpbWVvdXTjgIJcclxuICAgICAgICAvLyDliJfooajnmoTliJfotorlpJrvvIzmraTlpITpl67popjotorkuKXph43vvIzpnIDopoHmraPlkJHop6PlhrPku6XkuIvplJnor6/jgIJcclxuICAgICAgICAvLyB0b2RvOiBzZXR0aW1lb3V05piv5Li65LqG6Kej5Yaz5pWw5o2u5Y+Y5YyW5pe2YW5ndWxhcuaKpemUme+8jOWmguaenOabtOaWsOmhteiEmueahOmAu+i+keS4jeWcqGdyaWRiaW5kaW5n5Y+R6LW377yM5piv5ZCm6L+Y5a2Y5Zyo6Zeu6aKY77yfXHJcbiAgICAgICAgLy8gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLmNvbHVtblsnc3VtbWFyeSddID0gY29udGVudDtcclxuICAgICAgICAvLyB9KTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tmYXJyaXNTdW1tYXJ5XSdcclxufSlcclxuZXhwb3J0IGNsYXNzIEdyaWRTdW1tYXJ5RGlyZWN0aXZlLyogaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQqLyB7XHJcbiAgQElucHV0KCdmYXJyaXNTdW1tYXJ5Jykgc3VtbWFyeTogc3RyaW5nO1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYmluZGluZ0RhdGE6IEJpbmRpbmdEYXRhKSB7IH1cclxuXHJcbn1cclxuIl19