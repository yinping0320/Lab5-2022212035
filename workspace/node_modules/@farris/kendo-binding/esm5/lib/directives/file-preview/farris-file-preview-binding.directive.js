import * as tslib_1 from "tslib";
import { Directive, Input, Injector, Optional, HostListener } from '@angular/core';
import { BindingData, BindingList, FrameContext, ChangeType } from '@farris/devkit';
import { FFilePreviewComponent, UploadAndPreviewComponent } from '@farris/extend-file-upload';
/**
 * 树表格绑定指令
 */
var FarrisFilePreviewBindingDirective = /** @class */ (function () {
    /**
     * 构造函数
     * @param previewComponent - 附件组件
     * @param frameContext - 控制器上下文
     * @param uploadAndPreviewComponent - 附件上传预览组件
     * @param injector - injector
     * @TODO: 该指令被用于不同的组件中，因此uploadAndPreviewComponent可能为null
     */
    function FarrisFilePreviewBindingDirective(previewComponent, frameContext, uploadAndPreviewComponent, injector) {
        this.previewComponent = previewComponent;
        this.frameContext = frameContext;
        this.uploadAndPreviewComponent = uploadAndPreviewComponent;
        this.injector = injector;
        /**
         * 未启用排序时默认按上传时间字段排序
         */
        this.DEFAULT_SORT_FIELD = 'createTime';
        /**
         * 启用排序时使用fileSortOrder做排序字段，与零代码的拖拽排序统一
         */
        this.SORT_FIELD_ON_SORTING = 'fileSortOrder';
    }
    Object.defineProperty(FarrisFilePreviewBindingDirective.prototype, "bindingData", {
        /**
         * 绑定数据
         */
        get: function () {
            return this.frameContext.bindingData;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisFilePreviewBindingDirective.prototype, "bindingList", {
        /**
         * 绑定数据列表
         */
        get: function () {
            return this.bindingData.getList();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisFilePreviewBindingDirective.prototype, "orderField", {
        /**
         * 排序字段
         * @description
         * 组件排序字段只有一个，不支持多个。
         * 如果启用了拖拽排序，则为fileSortOrder，否则使用默认的createTime
         */
        get: function () {
            return this.uploadAndPreviewComponent && this.uploadAndPreviewComponent.enableOrder && this.uploadAndPreviewComponent.orderField || this.fileSortOrderKey && this.SORT_FIELD_ON_SORTING || this.DEFAULT_SORT_FIELD;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisFilePreviewBindingDirective.prototype, "orderType", {
        /**
         * 默认降序
         */
        get: function () {
            return this.farrisOrderType ? this.farrisOrderType : this.orderField === this.DEFAULT_SORT_FIELD ? 'desc' : 'asc';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 指令初始化
     */
    FarrisFilePreviewBindingDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.bindData();
        if (this.uploadAndPreviewComponent) {
            if (this.uploadAndPreviewComponent.enableOrder) {
                this.uploadAndPreviewComponent.orderField = this.SORT_FIELD_ON_SORTING;
            }
            // 禁用组件内置排序，控制器负责排序并将排序后的数据绑定到附件上传预览组件
            this.uploadAndPreviewComponent.enableSorting = false;
            this.uploadAndPreviewComponent.fSelectedEvent.subscribe(function (event) {
                var primaryKey = _this.bindingList.primaryKey;
                var id = event && event.originalData && event.originalData[primaryKey];
                if (id && id !== _this.bindingList.currentId) {
                    _this.bindingList.setCurrentId(id, true);
                }
            });
        }
        this.bindingData.changes.subscribe(function (change) {
            // 因排序需要，值变化时也应进行数据绑定
            if (change.type === ChangeType.Load || change.type === ChangeType.Append || change.type === ChangeType.Remove || change.type === ChangeType.ValueChanged || change.type === ChangeType.SelectionChanged) {
                _this.bindData(change);
                _this.updateCurrentRow(change);
                _this.updateChecks(change);
            }
        });
        this.setChecks([]);
    };
    /**
     * 指令输入变更
     * @param changes -变更
     */
    FarrisFilePreviewBindingDirective.prototype.ngOnChanges = function (changes) {
    };
    FarrisFilePreviewBindingDirective.prototype.shouldComponentUpdate = function (data) {
        return !(JSON.stringify(this.__DATA__) === JSON.stringify(data));
        // return !(this.__DATA__ && isEqual(this.__DATA__, data));
    };
    /**
     * 绑定数据
     * @param change -变更
     */
    FarrisFilePreviewBindingDirective.prototype.bindData = function (change) {
        var bindingPath = this.frameContext.viewModel.bindingPath.split('/').filter(function (p) { return p; }).join('/');
        var eventPath = change && change.path && change.path.filter(function (p) { return p; }).join('/');
        // 行切换、删除、加载、新增数据、页码切换 场景
        if (change && [ChangeType.SelectionChanged, ChangeType.Remove, ChangeType.Load, ChangeType.Append].includes(change.type)) {
            // 非上级实体不重新绑定数据
            if (!bindingPath.startsWith(eventPath)) {
                return;
            }
            // 当前附件组件切换当前行不需要重新渲染
            if (change.type === ChangeType.SelectionChanged && bindingPath === eventPath) {
                return;
            }
        }
        // 非当前实体发生了值变化
        if (change && change.type === ChangeType.ValueChanged && !eventPath.startsWith(bindingPath)) {
            return;
        }
        var fileInfos = this.getFileInfos();
        if (!this.shouldComponentUpdate(fileInfos)) {
            return;
        }
        if (this.componentRef) {
            this.__DATA__ = fileInfos;
            this.componentRef.fileInfos = fileInfos;
            if (this.uploadAndPreviewComponent && fileInfos && fileInfos.length > 0) {
                var extendInfos = fileInfos.map(function (item) { return item.originalData; });
                this.uploadAndPreviewComponent.extendInfos = extendInfos;
            }
            this.changeCurrentRow(fileInfos, change);
        }
    };
    FarrisFilePreviewBindingDirective.prototype.updateChecks = function (change) {
        if (!this.uploadAndPreviewComponent) {
            return;
        }
        var bindingPath = this.frameContext.viewModel.bindingPath.split('/').filter(function (p) { return p; }).join('/');
        var eventPath = change && change.path && change.path.filter(function (p) { return p; }).join('/');
        // 删除自身表时更新勾选记录
        if (change && change.type === ChangeType.Remove && eventPath === bindingPath) {
            var values = change.value || [];
            var ids_1 = this.frameContext.uiState['ids'] || [];
            if (values.length > 0 && ids_1.length > 0) {
                values.forEach(function (id) {
                    var index = ids_1.indexOf(id);
                    if (index !== -1) {
                        ids_1.splice(index, 1);
                    }
                });
            }
        }
        else if ((change.type === ChangeType.Remove || change.type === ChangeType.SelectionChanged) && bindingPath.startsWith(eventPath) && bindingPath !== eventPath) {
            //上级（上上级）表删除、上级（上上级）表切换当前行时更新勾选记录
            this.setChecks([]);
            // 清空组件勾选
            this.clearComponentChecks();
        }
        else if (change && change.type === ChangeType.Load && (bindingPath === eventPath || bindingPath.startsWith(eventPath) && bindingPath !== eventPath)) {
            // 当前附件组件数据重新加载 or 上级或上上级重新加载
            this.setChecks([]);
            // 清空组件勾选
            this.clearComponentChecks();
        }
    };
    /**
     * 主动更新当前行
     * @param data - 数据
     * @param change - 变更
     */
    FarrisFilePreviewBindingDirective.prototype.changeCurrentRow = function (data, change) {
        var _this = this;
        if (!this.uploadAndPreviewComponent) {
            return;
        }
        var changePath = change && change.path.join('/');
        var paths = this.frameContext.viewModel.bindingPath.split('/').filter(function (p) { return p; });
        var path = paths.join('/');
        var isParentSelectChange = path.startsWith(changePath) && change.type === ChangeType.SelectionChanged && path !== changePath;
        var isSelfRowDelete = change && change.type === ChangeType.Remove && path === changePath;
        if (data && data.length > 0 && change && (change.type === ChangeType.Load || isParentSelectChange || isSelfRowDelete)) {
            var primaryKey = this.bindingList.primaryKey;
            var id_1 = data[0]['originalData'] && data[0]['originalData'][primaryKey];
            if (this.bindingList.currentId !== id_1) {
                setTimeout(function () {
                    _this.bindingList.setCurrentId(id_1, true, true);
                }, 100);
            }
        }
    };
    /**
     * 为控件设置当前行
     * @param change - 控制器变更
     * @returns
     */
    FarrisFilePreviewBindingDirective.prototype.updateCurrentRow = function (change) {
        if (!this.bindingList || !this.bindingList.currentId || !this.uploadAndPreviewComponent) {
            return;
        }
        if (change && change.type !== ChangeType.SelectionChanged && change.type !== ChangeType.Load && change.type !== ChangeType.Remove) {
            return;
        }
        var currentId = this.uploadAndPreviewComponent.previewCurrent;
        // 组件id和数据id进行转换
        var id = this.getValueByPath(this.bindingList.currentItem, this.fileIdKey);
        if (id === currentId) {
            return;
        }
        this.selectComponentRow(id);
    };
    /**
     * 获取附件信息列表
     */
    FarrisFilePreviewBindingDirective.prototype.getFileInfos = function () {
        var _this = this;
        var listData = this.bindingList.toJSON();
        var fileInfos = [];
        listData.forEach(function (itemData) {
            var fileInfo = _this.convertToFileInfo(itemData);
            fileInfos.push(fileInfo);
        });
        // 排序
        if (this.orderField) {
            this.sort(fileInfos, this.orderField, this.orderType);
        }
        return fileInfos;
    };
    /**
     * 行数据转换为文件信息
     * @param itemData - 行数据
     * @returns
     */
    FarrisFilePreviewBindingDirective.prototype.convertToFileInfo = function (itemData) {
        var _this = this;
        // const idKey = this.bindingList.primaryKey;
        // const id = this.getValueByPath(itemData, idKey);
        var fileId = this.getValueByPath(itemData, this.fileIdKey);
        var fileName = this.getValueByPath(itemData, this.fileNameKey);
        var fileSize = this.getValueByPath(itemData, this.fileSizeKey);
        var fileCreateTime = this.getValueByPath(itemData, this.fileCreateTimeKey);
        var fileInfo = {
            id: fileId,
            name: fileName,
            size: fileSize,
            createTime: fileCreateTime,
            originalData: itemData,
            extend: {
                metadataId: fileId
            }
        };
        if (this.extendFileInfo && Array.isArray(this.extendFileInfo) && this.extendFileInfo.length > 0) {
            this.extendFileInfo.forEach(function (item) {
                fileInfo[item.key] = _this.getValueByPath(itemData, item.path);
            });
        }
        if (this.fileSortOrderKey) {
            var fileSortOrder = this.getValueByPath(itemData, this.fileSortOrderKey);
            fileInfo[this.SORT_FIELD_ON_SORTING] = fileSortOrder;
        }
        return fileInfo;
    };
    /**
     * 设置控件的当前行
     * @param id 主键
     */
    FarrisFilePreviewBindingDirective.prototype.selectComponentRow = function (id) {
        if (this.uploadAndPreviewComponent) {
            this.uploadAndPreviewComponent.previewCurrent = id;
        }
    };
    /**
     * 根据字段路径获取值
     * @param data - 数据源
     * @param path - 字段路径
     */
    FarrisFilePreviewBindingDirective.prototype.getValueByPath = function (data, path) {
        var keys = path.split('.');
        var currentValue = data;
        keys.forEach(function (key) {
            currentValue = currentValue && currentValue[key];
        });
        return currentValue;
    };
    FarrisFilePreviewBindingDirective.prototype.getUdtPaths = function () {
        var paths = this.fileIdKey.split('.');
        paths.pop();
        return paths;
    };
    Object.defineProperty(FarrisFilePreviewBindingDirective.prototype, "fileSizeKey", {
        get: function () {
            var basePaths = this.getUdtPaths();
            return basePaths.concat(['fileSize']).join('.');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisFilePreviewBindingDirective.prototype, "fileCreateTimeKey", {
        get: function () {
            var basePaths = this.getUdtPaths();
            return basePaths.concat(['fileCreateTime']).join('.');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisFilePreviewBindingDirective.prototype, "componentRef", {
        get: function () {
            return this.previewComponent || this.uploadAndPreviewComponent || null;
        },
        enumerable: true,
        configurable: true
    });
    FarrisFilePreviewBindingDirective.prototype.setChecks = function (ids) {
        this.frameContext.uiState.setPropertyValue('ids', ids);
    };
    /**
     * 清空组件勾选
     */
    FarrisFilePreviewBindingDirective.prototype.clearComponentChecks = function () {
        if (this.uploadAndPreviewComponent) {
            this.uploadAndPreviewComponent.previewUpdateRefresh();
        }
    };
    FarrisFilePreviewBindingDirective.prototype.sort = function (data, fields, directions) {
        var _this = this;
        if (!fields || fields.length < 1 || !directions || directions.length < 1) {
            throw new Error('sortBy:argument error');
        }
        // 默认升序
        var arrFields = typeof fields === 'string' ? fields.split(',') : fields || [];
        var arrDirections = typeof directions === 'string' ? directions.split(',') : directions || [];
        // 排序字段和排序方式应一致
        if (arrFields.length !== arrDirections.length || arrFields.length < 1) {
            throw new Error('sortBy:fields and directions not match');
        }
        // nage,age,total
        var comparator = function (props, orders) { return function (item1, item2) {
            return props.reduce(function (result, prop) {
                if (result === 0) {
                    var order = ['asc'].includes(orders[props.indexOf(prop)]) ? 1 : -1;
                    var item1Value = _this.getValue(item1, prop);
                    var item2Value = _this.getValue(item2, prop);
                    if (item1Value === null || item1Value === undefined) {
                        return 1;
                    }
                    if (item2Value === null || item2Value === undefined) {
                        return -1;
                    }
                    if (typeof item1Value !== typeof item2Value) {
                        var localeCompareResult = String(item1Value).localeCompare(String(item2Value));
                        result = localeCompareResult * order;
                    }
                    else if (typeof item1Value === 'string' && typeof item2Value === 'string') {
                        var localeCompareResult = item1Value.localeCompare(item2Value);
                        result = localeCompareResult * order;
                    }
                    else {
                        if (item1Value > item2Value) {
                            result = order * 1;
                        }
                        if (item1Value < item2Value) {
                            result = order * -1;
                        }
                    }
                }
                return result;
            }, 0);
        }; };
        data.sort(comparator(arrFields, arrDirections));
    };
    FarrisFilePreviewBindingDirective.prototype.getValue = function (target, propName) {
        var e_1, _a;
        if (target instanceof BindingList) {
            target = target.currentItem;
        }
        else if (target instanceof BindingData) {
            target = target.list.currentItem;
        }
        var result = null;
        if (propName.indexOf('.') === -1) {
            result = target[propName];
        }
        else {
            var props = propName.split('.');
            try {
                for (var props_1 = tslib_1.__values(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {
                    var prop = props_1_1.value;
                    target = result = this.getValue(target, prop);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (props_1_1 && !props_1_1.done && (_a = props_1.return)) _a.call(props_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return result;
    };
    /**
     * 勾选变化事件
     * @param event
     */
    FarrisFilePreviewBindingDirective.prototype.checkedChanged = function (event) {
        var primaryKey = this.bindingList.primaryKey;
        var ids = event && event.map(function (item) { return item && item.originalData && item.originalData[primaryKey] || ''; }).filter(function (p) { return p; }) || [];
        this.setChecks(ids);
    };
    /**
     * 行切换事件
     * @param event
     */
    FarrisFilePreviewBindingDirective.prototype.selectChanged = function (event) {
    };
    FarrisFilePreviewBindingDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farrisFilePreviewBinding]'
                },] }
    ];
    /** @nocollapse */
    FarrisFilePreviewBindingDirective.ctorParameters = function () { return [
        { type: FFilePreviewComponent, decorators: [{ type: Optional }] },
        { type: FrameContext },
        { type: UploadAndPreviewComponent, decorators: [{ type: Optional }] },
        { type: Injector, decorators: [{ type: Optional }] }
    ]; };
    FarrisFilePreviewBindingDirective.propDecorators = {
        extendFileInfo: [{ type: Input, args: ['extendFileInfo',] }],
        farrisOrderType: [{ type: Input, args: ['farrisOrderType',] }],
        fileIdKey: [{ type: Input, args: ['farrisFileIdKey',] }],
        fileSortOrderKey: [{ type: Input, args: ['farrisFileSortOrderKey',] }],
        fileNameKey: [{ type: Input, args: ['farrisFileNameKey',] }],
        checkedChanged: [{ type: HostListener, args: ['fPreviewMultiSelectedEvent', ['$event'],] }],
        selectChanged: [{ type: HostListener, args: ['fSelectedEvent', ['$event'],] }]
    };
    return FarrisFilePreviewBindingDirective;
}());
export { FarrisFilePreviewBindingDirective };
//# sourceMappingURL=data:application/json;base64,