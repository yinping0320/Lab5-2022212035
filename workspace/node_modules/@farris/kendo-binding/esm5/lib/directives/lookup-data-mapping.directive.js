/*
 * @Author: 疯狂秀才(lucas huang)
 * @Date: 2018-11-07 16:31:57
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-09-27 14:57:22
 * @Company: Inspur
 * @Version: v0.0.1
 */
import * as tslib_1 from "tslib";
/**
 * 使用方法：
 * [data-mapping]="{ id: 'user.userId', name: 'user.userName' }"
 * key 为帮助上的字段， value 为 表单中的字段名
 * 帮助上的同一个字段可以映射到表单中的多个字段中，{ ... id: 'user.userid, user.addusid'}
 * 多字段以逗号隔开
 *
 */
import { Directive, Optional, Self, Input } from '@angular/core';
import { BindingObject, ViewModel } from '@farris/devkit';
import { LookupGridComponent } from '@farris/ui-lookup';
import { DataMapping } from './data-mapping';
var LookupDataMappingDirective = /** @class */ (function (_super) {
    tslib_1.__extends(LookupDataMappingDirective, _super);
    function LookupDataMappingDirective(vm, lookup) {
        var _this = _super.call(this) || this;
        _this.vm = vm;
        _this.lookup = lookup;
        _this.target = null;
        return _this;
    }
    LookupDataMappingDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.lookup.selectedData.subscribe(function (data) {
            var _mapfields = _this.mapfields || _this.lookup.mapFields;
            var spliter = _this.lookup.multipleChoiceSeparator || _this.defaultSpliter;
            _this.mappingData(data, _mapfields, false, spliter);
        });
        this.lookup.clearMappings.subscribe(function (result) {
            // const value = result && result.value || null;
            var mapfields = Object.assign({}, (_this.mapfields || _this.lookup.mapFields || {}));
            var lookupTextField = _this.lookup.textField;
            var data = {};
            var controlName = _this.lookup.ngControl && _this.lookup.ngControl.name;
            if (controlName && _this.vm) {
                var textFieldMapping = mapfields[lookupTextField];
                var ngFormControl = _this.vm && _this.vm.form && _this.vm.form.ngFormControls && _this.vm.form.ngFormControls[controlName];
                var binding_1 = ngFormControl && ngFormControl.binding;
                if (textFieldMapping && binding_1) {
                    mapfields[lookupTextField] = textFieldMapping.split(',').filter(function (item) { return item !== binding_1; }).join(',');
                }
            }
            // this.setValue(data, lookupTextField.split('.'), value);
            Object.keys(mapfields).forEach(function (field) {
                _this.setValue(data, field.split('.'), '');
            });
            _this.mappingData(data, mapfields, true);
        });
        this.lookup.clear.subscribe(function () {
            var _mapfields = _this.mapfields || _this.lookup.mapFields;
            _this.mappingData(null, _mapfields);
        });
    };
    LookupDataMappingDirective.decorators = [
        { type: Directive, args: [{ selector: '[data-mapping]' },] }
    ];
    /** @nocollapse */
    LookupDataMappingDirective.ctorParameters = function () { return [
        { type: ViewModel, decorators: [{ type: Optional }] },
        { type: LookupGridComponent, decorators: [{ type: Optional }, { type: Self }] }
    ]; };
    LookupDataMappingDirective.propDecorators = {
        mapfields: [{ type: Input, args: ['data-mapping',] }],
        target: [{ type: Input, args: ['target',] }]
    };
    return LookupDataMappingDirective;
}(DataMapping));
export { LookupDataMappingDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9va3VwLWRhdGEtbWFwcGluZy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2tlbmRvLWJpbmRpbmcvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9sb29rdXAtZGF0YS1tYXBwaW5nLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztHQU9HOztBQUVIOzs7Ozs7O0dBT0c7QUFFSCxPQUFPLEVBQUUsU0FBUyxFQUFVLFFBQVEsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxhQUFhLEVBQWlCLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUc3QztJQUNnRCxzREFBVztJQUl6RCxvQ0FBK0IsRUFBYSxFQUE4QixNQUEyQjtRQUFyRyxZQUNFLGlCQUFPLFNBQ1I7UUFGOEIsUUFBRSxHQUFGLEVBQUUsQ0FBVztRQUE4QixZQUFNLEdBQU4sTUFBTSxDQUFxQjtRQUZwRixZQUFNLEdBQWtCLElBQUksQ0FBQzs7SUFJOUMsQ0FBQztJQUVELDZDQUFRLEdBQVI7UUFBQSxpQkE4QkM7UUE3QkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLFVBQUMsSUFBUztZQUMzQyxJQUFNLFVBQVUsR0FBRyxLQUFJLENBQUMsU0FBUyxJQUFJLEtBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDO1lBQzNELElBQU0sT0FBTyxHQUFHLEtBQUksQ0FBQyxNQUFNLENBQUMsdUJBQXVCLElBQUksS0FBSSxDQUFDLGNBQWMsQ0FBQztZQUMzRSxLQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3JELENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLFVBQUMsTUFBVztZQUM5QyxnREFBZ0Q7WUFDaEQsSUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxLQUFJLENBQUMsU0FBUyxJQUFJLEtBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDckYsSUFBTSxlQUFlLEdBQUcsS0FBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUM7WUFDOUMsSUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDO1lBQ2hCLElBQU0sV0FBVyxHQUFHLEtBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxJQUFJLEtBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztZQUN4RSxJQUFJLFdBQVcsSUFBSSxLQUFJLENBQUMsRUFBRSxFQUFFO2dCQUMxQixJQUFNLGdCQUFnQixHQUFHLFNBQVMsQ0FBQyxlQUFlLENBQUMsQ0FBQztnQkFDcEQsSUFBTSxhQUFhLEdBQUcsS0FBSSxDQUFDLEVBQUUsSUFBSSxLQUFJLENBQUMsRUFBRSxDQUFDLElBQUksSUFBSSxLQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLElBQUksS0FBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBa0IsQ0FBQztnQkFDMUksSUFBTSxTQUFPLEdBQUcsYUFBYSxJQUFJLGFBQWEsQ0FBQyxPQUFPLENBQUM7Z0JBQ3ZELElBQUksZ0JBQWdCLElBQUksU0FBTyxFQUFFO29CQUMvQixTQUFTLENBQUMsZUFBZSxDQUFDLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFDLElBQUksSUFBSyxPQUFBLElBQUksS0FBSyxTQUFPLEVBQWhCLENBQWdCLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ3ZHO2FBQ0Y7WUFDRCwwREFBMEQ7WUFDMUQsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxLQUFLO2dCQUNuQyxLQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQzVDLENBQUMsQ0FBQyxDQUFDO1lBQ0gsS0FBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzFDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDO1lBQzFCLElBQU0sVUFBVSxHQUFHLEtBQUksQ0FBQyxTQUFTLElBQUksS0FBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUM7WUFDM0QsS0FBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDckMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOztnQkF2Q0YsU0FBUyxTQUFDLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFOzs7O2dCQUxGLFNBQVMsdUJBVWpDLFFBQVE7Z0JBVGQsbUJBQW1CLHVCQVNxQixRQUFRLFlBQUksSUFBSTs7OzRCQUg5RCxLQUFLLFNBQUMsY0FBYzt5QkFDcEIsS0FBSyxTQUFDLFFBQVE7O0lBcUNqQixpQ0FBQztDQUFBLEFBeENELENBQ2dELFdBQVcsR0F1QzFEO1NBdkNZLDBCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAqIEBBdXRob3I6IOeWr+eLguengOaJjShsdWNhcyBodWFuZylcclxuICogQERhdGU6IDIwMTgtMTEtMDcgMTY6MzE6NTdcclxuICogQExhc3RFZGl0b3JzOiDnlq/ni4Lnp4DmiY0oTHVjYXMgSHVhbmcpXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMTktMDktMjcgMTQ6NTc6MjJcclxuICogQENvbXBhbnk6IEluc3B1clxyXG4gKiBAVmVyc2lvbjogdjAuMC4xXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIOS9v+eUqOaWueazle+8mlxyXG4gKiBbZGF0YS1tYXBwaW5nXT1cInsgaWQ6ICd1c2VyLnVzZXJJZCcsIG5hbWU6ICd1c2VyLnVzZXJOYW1lJyB9XCJcclxuICoga2V5IOS4uuW4ruWKqeS4iueahOWtl+aute+8jCB2YWx1ZSDkuLog6KGo5Y2V5Lit55qE5a2X5q615ZCNXHJcbiAqIOW4ruWKqeS4iueahOWQjOS4gOS4quWtl+auteWPr+S7peaYoOWwhOWIsOihqOWNleS4reeahOWkmuS4quWtl+auteS4re+8jHsgLi4uIGlkOiAndXNlci51c2VyaWQsIHVzZXIuYWRkdXNpZCd9XHJcbiAqIOWkmuWtl+auteS7pemAl+WPt+malOW8gFxyXG4gKlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IERpcmVjdGl2ZSwgT25Jbml0LCBPcHRpb25hbCwgU2VsZiwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQmluZGluZ09iamVjdCwgTmdGb3JtQ29udHJvbCwgVmlld01vZGVsIH0gZnJvbSAnQGZhcnJpcy9kZXZraXQnO1xyXG5pbXBvcnQgeyBMb29rdXBHcmlkQ29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy91aS1sb29rdXAnO1xyXG5pbXBvcnQgeyBEYXRhTWFwcGluZyB9IGZyb20gJy4vZGF0YS1tYXBwaW5nJztcclxuXHJcblxyXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbZGF0YS1tYXBwaW5nXScgfSlcclxuZXhwb3J0IGNsYXNzIExvb2t1cERhdGFNYXBwaW5nRGlyZWN0aXZlIGV4dGVuZHMgRGF0YU1hcHBpbmcgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gIEBJbnB1dCgnZGF0YS1tYXBwaW5nJykgbWFwZmllbGRzOiBhbnk7XHJcbiAgQElucHV0KCd0YXJnZXQnKSB0YXJnZXQ6IEJpbmRpbmdPYmplY3QgPSBudWxsO1xyXG5cclxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBwdWJsaWMgdm06IFZpZXdNb2RlbCwgQE9wdGlvbmFsKCkgQFNlbGYoKSBwcml2YXRlIGxvb2t1cDogTG9va3VwR3JpZENvbXBvbmVudCkge1xyXG4gICAgc3VwZXIoKTtcclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgdGhpcy5sb29rdXAuc2VsZWN0ZWREYXRhLnN1YnNjcmliZSgoZGF0YTogYW55KSA9PiB7XHJcbiAgICAgIGNvbnN0IF9tYXBmaWVsZHMgPSB0aGlzLm1hcGZpZWxkcyB8fCB0aGlzLmxvb2t1cC5tYXBGaWVsZHM7XHJcbiAgICAgIGNvbnN0IHNwbGl0ZXIgPSB0aGlzLmxvb2t1cC5tdWx0aXBsZUNob2ljZVNlcGFyYXRvciB8fCB0aGlzLmRlZmF1bHRTcGxpdGVyO1xyXG4gICAgICB0aGlzLm1hcHBpbmdEYXRhKGRhdGEsIF9tYXBmaWVsZHMsIGZhbHNlLCBzcGxpdGVyKTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5sb29rdXAuY2xlYXJNYXBwaW5ncy5zdWJzY3JpYmUoKHJlc3VsdDogYW55KSA9PiB7XHJcbiAgICAgIC8vIGNvbnN0IHZhbHVlID0gcmVzdWx0ICYmIHJlc3VsdC52YWx1ZSB8fCBudWxsO1xyXG4gICAgICBjb25zdCBtYXBmaWVsZHMgPSBPYmplY3QuYXNzaWduKHt9LCAodGhpcy5tYXBmaWVsZHMgfHwgdGhpcy5sb29rdXAubWFwRmllbGRzIHx8IHt9KSk7XHJcbiAgICAgIGNvbnN0IGxvb2t1cFRleHRGaWVsZCA9IHRoaXMubG9va3VwLnRleHRGaWVsZDtcclxuICAgICAgY29uc3QgZGF0YSA9IHt9O1xyXG4gICAgICBjb25zdCBjb250cm9sTmFtZSA9IHRoaXMubG9va3VwLm5nQ29udHJvbCAmJiB0aGlzLmxvb2t1cC5uZ0NvbnRyb2wubmFtZTtcclxuICAgICAgaWYgKGNvbnRyb2xOYW1lICYmIHRoaXMudm0pIHtcclxuICAgICAgICBjb25zdCB0ZXh0RmllbGRNYXBwaW5nID0gbWFwZmllbGRzW2xvb2t1cFRleHRGaWVsZF07XHJcbiAgICAgICAgY29uc3QgbmdGb3JtQ29udHJvbCA9IHRoaXMudm0gJiYgdGhpcy52bS5mb3JtICYmIHRoaXMudm0uZm9ybS5uZ0Zvcm1Db250cm9scyAmJiB0aGlzLnZtLmZvcm0ubmdGb3JtQ29udHJvbHNbY29udHJvbE5hbWVdIGFzIE5nRm9ybUNvbnRyb2w7XHJcbiAgICAgICAgY29uc3QgYmluZGluZyA9IG5nRm9ybUNvbnRyb2wgJiYgbmdGb3JtQ29udHJvbC5iaW5kaW5nO1xyXG4gICAgICAgIGlmICh0ZXh0RmllbGRNYXBwaW5nICYmIGJpbmRpbmcpIHtcclxuICAgICAgICAgIG1hcGZpZWxkc1tsb29rdXBUZXh0RmllbGRdID0gdGV4dEZpZWxkTWFwcGluZy5zcGxpdCgnLCcpLmZpbHRlcigoaXRlbSkgPT4gaXRlbSAhPT0gYmluZGluZykuam9pbignLCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICAvLyB0aGlzLnNldFZhbHVlKGRhdGEsIGxvb2t1cFRleHRGaWVsZC5zcGxpdCgnLicpLCB2YWx1ZSk7XHJcbiAgICAgIE9iamVjdC5rZXlzKG1hcGZpZWxkcykuZm9yRWFjaCgoZmllbGQpID0+IHtcclxuICAgICAgICB0aGlzLnNldFZhbHVlKGRhdGEsIGZpZWxkLnNwbGl0KCcuJyksICcnKTtcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMubWFwcGluZ0RhdGEoZGF0YSwgbWFwZmllbGRzLCB0cnVlKTtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5sb29rdXAuY2xlYXIuc3Vic2NyaWJlKCgpID0+IHtcclxuICAgICAgY29uc3QgX21hcGZpZWxkcyA9IHRoaXMubWFwZmllbGRzIHx8IHRoaXMubG9va3VwLm1hcEZpZWxkcztcclxuICAgICAgdGhpcy5tYXBwaW5nRGF0YShudWxsLCBfbWFwZmllbGRzKTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iXX0=