import { Directive, HostListener, Injector, Input } from '@angular/core';
import { ChangeType, FrameContext } from '@farris/devkit';
import { AppointmentCalendarComponent } from '@farris/appointment-calendar';
import { ViewType } from './types';
import { isEqual } from 'lodash-es';
import { BasePathService } from '@farris/rtf';
var AppointmentCalendarBindingDirective = /** @class */ (function () {
    function AppointmentCalendarBindingDirective(injector, frameContext, calendarComponent) {
        this.injector = injector;
        this.frameContext = frameContext;
        this.calendarComponent = calendarComponent;
        /**
         * 房间列表api url
         */
        this.url = null;
        /**
         * http method, default PUT
         */
        this.method = 'PUT';
        this.startDateVariable = 'startDate';
        this.endDateVariable = 'endDate';
        this.viewTypeVariable = 'viewType';
    }
    Object.defineProperty(AppointmentCalendarBindingDirective.prototype, "bindingData", {
        get: function () {
            return this.frameContext.bindingData;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppointmentCalendarBindingDirective.prototype, "viewModel", {
        get: function () {
            return this.frameContext.viewModel;
        },
        enumerable: true,
        configurable: true
    });
    AppointmentCalendarBindingDirective.prototype.restService = function () {
        return this.frameContext.repository.restService;
    };
    Object.defineProperty(AppointmentCalendarBindingDirective.prototype, "bindingList", {
        /**
         * 获取绑定数据
         */
        get: function () {
            // 根实体
            if (this.viewModel.bindingPath === '/' || !this.viewModel.bindingPath) {
                return this.bindingData.list;
            }
            // 子实体
            var bindingPath = this.viewModel.bindingPath.substr(1);
            bindingPath = bindingPath[0].toLowerCase() + bindingPath.substring(1, bindingPath.length);
            var paths = bindingPath.split('/');
            var filteredPaths = paths.filter(function (part) {
                return part !== '';
            });
            return this.bindingData.getValue(filteredPaths);
        },
        enumerable: true,
        configurable: true
    });
    AppointmentCalendarBindingDirective.prototype.ngOnInit = function () {
        this.loadPlacements();
        this.registerBindingDataChangeEvent();
    };
    AppointmentCalendarBindingDirective.prototype.ngOnChanges = function (changes) {
    };
    AppointmentCalendarBindingDirective.prototype.ngOnDestroy = function () {
        this.unRegisterBindingDataChangeEvent();
    };
    AppointmentCalendarBindingDirective.prototype.bindData = function (change) {
        // 再toJSON
        var data = this.bindingList.toJSON();
        if (this.__DATA__ && isEqual(this.__DATA__, data)) {
            return;
        }
        this.__DATA__ = data;
        this.calendarComponent.loadReserveData(data);
    };
    AppointmentCalendarBindingDirective.prototype.onBindingDataChange = function (change) {
        this.bindData(change);
        this.updateSelectedRow(change);
    };
    AppointmentCalendarBindingDirective.prototype.registerBindingDataChangeEvent = function () {
        var _this = this;
        this.bindingDataChangeEvent = this.bindingData.changes.subscribe(function (change) {
            _this.onBindingDataChange(change);
        });
    };
    /**
     * 取消bindingdata变化订阅
     */
    AppointmentCalendarBindingDirective.prototype.unRegisterBindingDataChangeEvent = function () {
        if (this.bindingDataChangeEvent && typeof (this.bindingDataChangeEvent.unsubscribe) === 'function') {
            this.bindingDataChangeEvent.unsubscribe();
        }
    };
    AppointmentCalendarBindingDirective.prototype.loadPlacements = function () {
        var _this = this;
        if (!this.url) {
            console.log('无法加载房间信息，请配置房间列表api地址');
            return;
        }
        var requestInfo = this.restService().buildRequestInfo();
        var options = {
            body: {
                requestInfo: requestInfo
            }
        };
        var url = BasePathService.convertPath(this.url);
        this.restService().request(url, this.method, null, options).subscribe(function (returnValue) {
            _this.bindPlacements(returnValue);
        });
    };
    AppointmentCalendarBindingDirective.prototype.bindPlacements = function (placments) {
        this.calendarComponent.loadPlaceData(placments);
    };
    AppointmentCalendarBindingDirective.prototype.updateState = function (startDate, endDate, viewType) {
        this.viewModel.uiState.setPropertyValue(this.startDateVariable, startDate);
        this.viewModel.uiState.setPropertyValue(this.endDateVariable, endDate);
        this.viewModel.uiState.setPropertyValue(this.viewTypeVariable, viewType);
    };
    AppointmentCalendarBindingDirective.prototype.updateSelectedRow = function (change) {
        if (!this.bindingList || !this.bindingList.currentId) {
            return;
        }
        // 页码切换时不执行当前行切换
        if (change && change.type === ChangeType.PaginationInfoChange) {
            return;
        }
        if (this.viewModel && this.viewModel.frameContext.bindingData.rowSelectedEventSuspend === true) {
            return;
        }
        var id = this.calendarComponent.selectedId;
        var currentId = this.bindingList.currentId;
        // grid当前行与bingingList当前行一致，无须切换
        if (id === currentId) {
            return;
        }
        this.selectCalendarRow(this.bindingList.currentId);
    };
    AppointmentCalendarBindingDirective.prototype.selectCalendarRow = function (id) {
        this.calendarComponent.selectItem(id);
    };
    AppointmentCalendarBindingDirective.prototype.filterChanged = function (event) {
        var _a = event || {}, _b = _a.dateValue, dateValue = _b === void 0 ? null : _b, _c = _a.place, place = _c === void 0 ? null : _c, _d = _a.viewType, viewType = _d === void 0 ? null : _d;
        var startDate = null;
        var endDate = null;
        if (!dateValue) {
            return;
        }
        if (viewType === ViewType.day) {
            startDate = dateValue + " 00:00:00";
            endDate = dateValue + " 23:59:59";
        }
        else if (viewType === ViewType.week && dateValue.indexOf('~') !== -1) {
            var sections = dateValue.split('~');
            startDate = sections[0] + " 00:00:00";
            endDate = sections[1] + " 23:59:59";
        }
        this.updateState(startDate, endDate, viewType);
    };
    AppointmentCalendarBindingDirective.prototype.setSelectionIdToBindingData = function (id) {
        // 如果当前行不存在，则强制设置
        if (this.bindingList.currentId !== id) {
            this.bindingList.setCurrentId(id, true);
        }
    };
    AppointmentCalendarBindingDirective.prototype.selectChange = function (event) {
        var _a = event.item.id, id = _a === void 0 ? null : _a;
        this.setSelectionIdToBindingData(id);
    };
    AppointmentCalendarBindingDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farris-appointment-calendar-binding]'
                },] }
    ];
    /** @nocollapse */
    AppointmentCalendarBindingDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: FrameContext },
        { type: AppointmentCalendarComponent }
    ]; };
    AppointmentCalendarBindingDirective.propDecorators = {
        url: [{ type: Input }],
        method: [{ type: Input }],
        startDateVariable: [{ type: Input }],
        endDateVariable: [{ type: Input }],
        viewTypeVariable: [{ type: Input }],
        filterChanged: [{ type: HostListener, args: ['filterChange', ['$event'],] }],
        selectChange: [{ type: HostListener, args: ['selectChange', ['$event'],] }]
    };
    return AppointmentCalendarBindingDirective;
}());
export { AppointmentCalendarBindingDirective };
//# sourceMappingURL=data:application/json;base64,