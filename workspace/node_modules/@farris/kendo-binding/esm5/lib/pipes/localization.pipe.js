import { Inject, Injector, Optional, Pipe } from "@angular/core";
import { UserSettingsToken } from "@farris/devkit";
import { BigNumber } from 'bignumber.js';
import moment from 'moment';
var Localization = /** @class */ (function () {
    function Localization(injector, userSettings) {
        this.injector = injector;
        this.userSettings = userSettings;
    }
    Localization.prototype.transform = function (value, dataType) {
        if (dataType) {
            dataType = dataType.toLowerCase();
            if (dataType === 'date') {
                return this.transformDate(value);
            }
            else if (dataType === 'datetime') {
                return this.transformDateTime(value);
            }
            else if (dataType === 'number') {
                return this.transformNumber(value);
            }
            else {
                return value;
            }
        }
    };
    /**
     * 转换日期
     * @param value value
     */
    Localization.prototype.transformDate = function (value) {
        var dateFormat = this.userSettings && this.userSettings.dateFormat || null;
        if (!dateFormat || !value) {
            return value;
        }
        var date = moment(value);
        var isValid = date.isValid();
        if (!isValid) {
            return value;
        }
        dateFormat = this.parseDateFormat(dateFormat);
        return date.format(dateFormat);
    };
    /**
     * 转换日期时间
     * @param value value
     * todo: 目前无法定义日期时间格式
     */
    Localization.prototype.transformDateTime = function (value) {
        var dateFormat = this.userSettings && this.userSettings.dateFormat || '';
        var timeFormat = this.userSettings && this.userSettings.timeFormat || '';
        var dateTime = moment(value);
        var isValid = dateTime.isValid();
        if (!isValid) {
            return value;
        }
        if (dateFormat) {
            dateFormat = this.parseDateFormat(dateFormat);
        }
        if (timeFormat) {
            timeFormat = this.parseTimeFormat(timeFormat);
        }
        var dateTimeFormat = dateFormat + ' ' + timeFormat;
        return dateTime.format(dateTimeFormat);
    };
    /**
     * 转换数字
     * @param value value
     */
    Localization.prototype.transformNumber = function (value) {
        if (value === null || value === undefined || value === '') {
            return '';
        }
        var bigNumber = new BigNumber(value);
        // 如果不是数字，不做任何处理
        if (!BigNumber.isBigNumber(bigNumber)) {
            return value;
        }
        var isNegative = bigNumber.isNegative();
        var format = this.buildNumberFormat();
        var _a = this.numberFormat, _b = _a.negativeSign, negativeSign = _b === void 0 ? null : _b, _c = _a.numberDecimalDigits, numberDecimalDigits = _c === void 0 ? null : _c;
        if (isNegative) {
            if (negativeSign !== null) {
                format.prefix = negativeSign;
                return bigNumber.absoluteValue().toFormat(numberDecimalDigits, null, format);
            }
        }
        return bigNumber.toFormat(numberDecimalDigits, null, format);
    };
    /**
     * 转换日期格式规则为moment的format规则
     * @param format format
     */
    Localization.prototype.parseDateFormat = function (format) {
        return format.replace(/y/g, 'Y').replace(/d/g, 'D');
    };
    /**
     * 转换时间格式规则为moment的format规则
     * @param format format
     */
    Localization.prototype.parseTimeFormat = function (format) {
        return format.replace(/M/g, 'm');
    };
    /**
     * 构造bignumber数字格式化选项
     */
    Localization.prototype.buildNumberFormat = function () {
        if (this.numberFormat) {
            var _a = this.numberFormat, _b = _a.numberDecimalSeparator, numberDecimalSeparator = _b === void 0 ? null : _b, _c = _a.numberGroupSeparator, numberGroupSeparator = _c === void 0 ? null : _c;
            var format = {
                groupSize: 3,
            };
            if (numberDecimalSeparator !== null) {
                format.decimalSeparator = numberDecimalSeparator;
            }
            if (numberGroupSeparator !== null) {
                format.groupSeparator = numberGroupSeparator;
            }
            return format;
        }
    };
    Object.defineProperty(Localization.prototype, "numberFormat", {
        get: function () {
            return this.userSettings && this.userSettings.numberFormat || null;
        },
        enumerable: true,
        configurable: true
    });
    Localization.decorators = [
        { type: Pipe, args: [{ name: 'localization' },] }
    ];
    /** @nocollapse */
    Localization.ctorParameters = function () { return [
        { type: Injector, decorators: [{ type: Optional }] },
        { type: undefined, decorators: [{ type: Inject, args: [UserSettingsToken,] }] }
    ]; };
    return Localization;
}());
export { Localization };
//# sourceMappingURL=data:application/json;base64,