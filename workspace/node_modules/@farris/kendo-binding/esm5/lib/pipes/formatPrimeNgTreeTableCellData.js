import { LocaleService } from '@farris/ui-locale';
import { Pipe, Injector, Optional } from '@angular/core';
import { ColumnFormatService } from '@farris/ui-common/column';
var FormatPrimeNgTreeTableCellData = /** @class */ (function () {
    function FormatPrimeNgTreeTableCellData(cfs, injector) {
        this.cfs = cfs;
        this.injector = injector;
        if (this.injector) {
            this.localeService = this.injector.get(LocaleService);
        }
    }
    FormatPrimeNgTreeTableCellData.prototype.transform = function (col, rowData) {
        var value = '';
        if (rowData && col && col.field) {
            value = this.getValue(col.field, rowData);
            var formatterFn = col.formatter;
            if (!formatterFn) {
                if (col.isMultilingualField) {
                    return this.getMultiLanguageValue(value);
                }
                else {
                    return value;
                }
            }
            else {
                return this.cfs.format(value, rowData, formatterFn);
            }
        }
        return '';
    };
    // 获取多语数据
    FormatPrimeNgTreeTableCellData.prototype.getMultiLanguageValue = function (valObj) {
        if (valObj && typeof valObj === 'object' && Object.keys(valObj).length > 0) {
            var localeId = this.localeService && this.localeService.localeId || 'zh-CHS';
            var value = valObj[localeId];
            return value === undefined ? '' : value;
        }
        else {
            return '';
        }
    };
    FormatPrimeNgTreeTableCellData.prototype.getValue = function (path, target) {
        if (!target) {
            return '';
        }
        var resultVal = '';
        if (path.indexOf('.') === -1) {
            resultVal = target[path];
        }
        else {
            resultVal = path.split('.').reduce((function (obj, key) {
                return obj && obj[key] || null;
            }), target);
        }
        return resultVal;
    };
    ;
    /**
     * 是否为帮助列
     * @param col col
     */
    FormatPrimeNgTreeTableCellData.prototype.isHelpColumn = function (col) {
        return col && col.editor && col.editor.options && col.editor.options.type === 'EditorTypes.LOOKUP' || false;
    };
    FormatPrimeNgTreeTableCellData.prototype.getHelpColumnValue = function (col, data) {
        var textField = this.getHelpControlTextField(col);
        var mapFields = this.getHelpControlMapFields(col);
        if (textField && mapFields && Object.keys(mapFields).length > 0) {
            var path = mapFields[textField];
            return this.getValue(path, data);
        }
        return '';
    };
    FormatPrimeNgTreeTableCellData.prototype.getHelpControlTextField = function (col) {
        return col && col.editor && col.editor.options && col.editor.options.textField || '';
    };
    FormatPrimeNgTreeTableCellData.prototype.getHelpControlMapFields = function (col) {
        return col && col.editor && col.editor.options && col.editor.options.mapFields || {};
    };
    FormatPrimeNgTreeTableCellData.decorators = [
        { type: Pipe, args: [{ name: 'formatPrimeNgTreeTableCellData', pure: false },] }
    ];
    /** @nocollapse */
    FormatPrimeNgTreeTableCellData.ctorParameters = function () { return [
        { type: ColumnFormatService },
        { type: Injector, decorators: [{ type: Optional }] }
    ]; };
    return FormatPrimeNgTreeTableCellData;
}());
export { FormatPrimeNgTreeTableCellData };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0UHJpbWVOZ1RyZWVUYWJsZUNlbGxEYXRhLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9rZW5kby1iaW5kaW5nLyIsInNvdXJjZXMiOlsibGliL3BpcGVzL2Zvcm1hdFByaW1lTmdUcmVlVGFibGVDZWxsRGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbEQsT0FBTyxFQUFFLElBQUksRUFBaUIsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUUvRDtJQUlFLHdDQUFvQixHQUF3QixFQUFzQixRQUFtQjtRQUFqRSxRQUFHLEdBQUgsR0FBRyxDQUFxQjtRQUFzQixhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQ25GLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNqQixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQ3ZEO0lBQ0gsQ0FBQztJQUVELGtEQUFTLEdBQVQsVUFBVSxHQUFRLEVBQUUsT0FBWTtRQUM5QixJQUFJLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDZixJQUFJLE9BQU8sSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRTtZQUMvQixLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQzFDLElBQUksV0FBVyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUM7WUFDaEMsSUFBSSxDQUFDLFdBQVcsRUFBRTtnQkFDaEIsSUFBSSxHQUFHLENBQUMsbUJBQW1CLEVBQUU7b0JBQzNCLE9BQU8sSUFBSSxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUMxQztxQkFBTTtvQkFDTCxPQUFPLEtB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LElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQztJQUN2RixDQUFDOztnQkExRUYsSUFBSSxTQUFDLEVBQUUsSUFBSSxFQUFFLGdDQUFnQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUU7Ozs7Z0JBRnBELG1CQUFtQjtnQkFERSxRQUFRLHVCQU9XLFFBQVE7O0lBdUV6RCxxQ0FBQztDQUFBLEFBM0VELElBMkVDO1NBMUVZLDhCQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExvY2FsZVNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLWxvY2FsZSc7XHJcbmltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0sIEluamVjdG9yLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb2x1bW5Gb3JtYXRTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1jb21tb24vY29sdW1uJztcclxuXHJcbkBQaXBlKHsgbmFtZTogJ2Zvcm1hdFByaW1lTmdUcmVlVGFibGVDZWxsRGF0YScsIHB1cmU6IGZhbHNlIH0pXHJcbmV4cG9ydCBjbGFzcyBGb3JtYXRQcmltZU5nVHJlZVRhYmxlQ2VsbERhdGEgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuXHJcbiAgcHJpdmF0ZSBsb2NhbGVTZXJ2aWNlOiBMb2NhbGVTZXJ2aWNlO1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY2ZzOiBDb2x1bW5Gb3JtYXRTZXJ2aWNlLCBAT3B0aW9uYWwoKSBwcml2YXRlIGluamVjdG9yPzogSW5qZWN0b3IpIHtcclxuICAgIGlmICh0aGlzLmluamVjdG9yKSB7XHJcbiAgICAgIHRoaXMubG9jYWxlU2VydmljZSA9IHRoaXMuaW5qZWN0b3IuZ2V0KExvY2FsZVNlcnZpY2UpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdHJhbnNmb3JtKGNvbDogYW55LCByb3dEYXRhOiBhbnkpOiBhbnkge1xyXG4gICAgbGV0IHZhbHVlID0gJyc7XHJcbiAgICBpZiAocm93RGF0YSAmJiBjb2wgJiYgY29sLmZpZWxkKSB7XHJcbiAgICAgIHZhbHVlID0gdGhpcy5nZXRWYWx1ZShjb2wuZmllbGQsIHJvd0RhdGEpO1xyXG4gICAgICBsZXQgZm9ybWF0dGVyRm4gPSBjb2wuZm9ybWF0dGVyO1xyXG4gICAgICBpZiAoIWZvcm1hdHRlckZuKSB7XHJcbiAgICAgICAgaWYgKGNvbC5pc011bHRpbGluZ3VhbEZpZWxkKSB7XHJcbiAgICAgICAgICByZXR1cm4gdGhpcy5nZXRNdWx0aUxhbmd1YWdlVmFsdWUodmFsdWUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNmcy5mb3JtYXQodmFsdWUsIHJvd0RhdGEsIGZvcm1hdHRlckZuKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuICcnO1xyXG4gIH1cclxuXHJcbiAgLy8g6I635Y+W5aSa6K+t5pWw5o2uXHJcbiAgcHJpdmF0ZSBnZXRNdWx0aUxhbmd1YWdlVmFsdWUodmFsT2JqKSB7XHJcbiAgICBpZiAodmFsT2JqICYmIHR5cGVvZiB2YWxPYmogPT09ICdvYmplY3QnICYmIE9iamVjdC5rZXlzKHZhbE9iaikubGVuZ3RoID4gMCkge1xyXG4gICAgICBjb25zdCBsb2NhbGVJZCA9IHRoaXMubG9jYWxlU2VydmljZSAmJiB0aGlzLmxvY2FsZVNlcnZpY2UubG9jYWxlSWQgfHwgJ3poLUNIUyc7XHJcbiAgICAgIGNvbnN0IHZhbHVlID0gdmFsT2JqW2xvY2FsZUlkXTtcclxuICAgICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyAnJyA6IHZhbHVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG4gIH1cclxuICBwcml2YXRlIGdldFZhbHVlKHBhdGg6IHN0cmluZywgdGFyZ2V0OiBhbnkpIHtcclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuICAgIHZhciByZXN1bHRWYWwgPSAnJztcclxuICAgIGlmIChwYXRoLmluZGV4T2YoJy4nKSA9PT0gLTEpIHtcclxuICAgICAgcmVzdWx0VmFsID0gdGFyZ2V0W3BhdGhdO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHJlc3VsdFZhbCA9IHBhdGguc3BsaXQoJy4nKS5yZWR1Y2UoKChvYmosIGtleSkgPT4ge1xyXG4gICAgICAgIHJldHVybiBvYmogJiYgb2JqW2tleV0gfHwgbnVsbDtcclxuICAgICAgfSksIHRhcmdldCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0VmFsO1xyXG4gIH07XHJcbiAgLyoqXHJcbiAgICog5piv5ZCm5Li65biu5Yqp5YiXXHJcbiAgICogQHBhcmFtIGNvbCBjb2xcclxuICAgKi9cclxuICBwcml2YXRlIGlzSGVscENvbHVtbihjb2w6IGFueSkge1xyXG4gICAgcmV0dXJuIGNvbCAmJiBjb2wuZWRpdG9yICYmIGNvbC5lZGl0b3Iub3B0aW9ucyAmJiBjb2wuZWRpdG9yLm9wdGlvbnMudHlwZSA9PT0gJ0VkaXRvclR5cGVzLkxPT0tVUCcgfHwgZmFsc2U7XHJcbiAgfVxyXG4gIHByaXZhdGUgZ2V0SGVscENvbHVtblZhbHVlKGNvbDogYW55LCBkYXRhOiBhbnkpIHtcclxuICAgIGNvbnN0IHRleHRGaWVsZCA9IHRoaXMuZ2V0SGVscENvbnRyb2xUZXh0RmllbGQoY29sKTtcclxuICAgIGNvbnN0IG1hcEZpZWxkcyA9IHRoaXMuZ2V0SGVscENvbnRyb2xNYXBGaWVsZHMoY29sKTtcclxuICAgIGlmICh0ZXh0RmllbGQgJiYgbWFwRmllbGRzICYmIE9iamVjdC5rZXlzKG1hcEZpZWxkcykubGVuZ3RoID4gMCkge1xyXG4gICAgICBjb25zdCBwYXRoID0gbWFwRmllbGRzW3RleHRGaWVsZF07XHJcbiAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlKHBhdGgsIGRhdGEpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuICcnO1xyXG4gIH1cclxuICBwcml2YXRlIGdldEhlbHBDb250cm9sVGV4dEZpZWxkKGNvbDogYW55KSB7XHJcbiAgICByZXR1cm4gY29sICYmIGNvbC5lZGl0b3IgJiYgY29sLmVkaXRvci5vcHRpb25zICYmIGNvbC5lZGl0b3Iub3B0aW9ucy50ZXh0RmllbGQgfHwgJyc7XHJcbiAgfVxyXG4gIHByaXZhdGUgZ2V0SGVscENvbnRyb2xNYXBGaWVsZHMoY29sOiBhbnkpIHtcclxuICAgIHJldHVybiBjb2wgJiYgY29sLmVkaXRvciAmJiBjb2wuZWRpdG9yLm9wdGlvbnMgJiYgY29sLmVkaXRvci5vcHRpb25zLm1hcEZpZWxkcyB8fCB7fTtcclxuICB9XHJcbn1cclxuIl19