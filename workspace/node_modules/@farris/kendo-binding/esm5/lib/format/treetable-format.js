import { Injectable } from '@angular/core';
var FarrisTreetableFormatService = /** @class */ (function () {
    function FarrisTreetableFormatService() {
    }
    FarrisTreetableFormatService.prototype.setFormat = function (treeTable) {
        var columns = treeTable.columns;
        columns.forEach(function (column) {
            var dataType = column.dataType;
            if (!column.formatter) {
                if (dataType === 'date') {
                    column.formatter = {
                        type: 'datetime',
                        options: {
                            format: column.format
                        }
                    };
                }
                else if (dataType === 'number') {
                    column.formatter = {
                        type: 'number',
                        options: {
                            prefix: column.prefix ? column.prefix : '',
                            suffix: column.suffix ? column.suffix : '',
                            precision: column.precision,
                            thousand: ',',
                            stripZeros: false,
                        }
                    };
                }
                else if (dataType === 'enum') {
                    column.formatter = {
                        type: 'enum',
                        options: {
                            data: column.enumData,
                            valueField: 'value',
                            textField: 'name'
                        }
                    };
                }
                else if (dataType === 'boolean') {
                    column.formatter = {
                        type: 'enum',
                        options: {
                            data: [{ name: '是', value: true }, { name: '否', value: false }],
                            valueField: 'value',
                            textField: 'name'
                        }
                    };
                }
            }
        });
    };
    FarrisTreetableFormatService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FarrisTreetableFormatService.ctorParameters = function () { return []; };
    return FarrisTreetableFormatService;
}());
export { FarrisTreetableFormatService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZXRhYmxlLWZvcm1hdC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMva2VuZG8tYmluZGluZy8iLCJzb3VyY2VzIjpbImxpYi9mb3JtYXQvdHJlZXRhYmxlLWZvcm1hdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDO0lBRUk7SUFDQSxDQUFDO0lBQ0QsZ0RBQVMsR0FBVCxVQUFVLFNBQTZCO1FBQ25DLElBQU0sT0FBTyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUM7UUFDbEMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFDLE1BQVc7WUFDeEIsSUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQztZQUNqQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRTtnQkFDbkIsSUFBSSxRQUFRLEtBQUssTUFBTSxFQUFFO29CQUNyQixNQUFNLENBQUMsU0FBUyxHQUFHO3dCQUNmLElBQUksRUFBRSxVQUFVO3dCQUNoQixPQUFPLEVBQUU7NEJBQ0wsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNO3lCQUN4QjtxQkFDSixDQUFDO2lCQUNMO3FCQUFNLElBQUksUUFBUSxLQUFLLFFBQVEsRUFBRTtvQkFDOUIsTUFBTSxDQUFDLFNBQVMsR0FBRzt3QkFDZixJQUFJLEVBQUUsUUFBUTt3QkFDZCxPQUFPLEVBQUU7NEJBQ0wsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUU7NEJBQzFDLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFOzRCQUMxQyxTQUFTLEVBQUUsTUFBTSxDQUFDLFNBQVM7NEJBQzNCLFFBQVEsRUFBRSxHQUFHOzRCQUNiLFVBQVUsRUFBRSxLQUFLO3lCQUNwQjtxQkFDSixDQUFDO2lCQUNMO3FCQUFNLElBQUksUUFBUSxLQUFLLE1BQU0sRUFBRTtvQkFDNUIsTUFBTSxDQUFDLFNBQVMsR0FBRzt3QkFDZixJQUFJLEVBQUUsTUFBTTt3QkFDWixPQUFPLEVBQUU7NEJBQ0wsSUFBSSxFQUFFLE1BQU0sQ0FBQyxRQUFROzRCQUNyQixVQUFVLEVBQUUsT0FBTzs0QkFDbkIsU0FBUyxFQUFFLE1BQU07eUJBQ3BCO3FCQUNKLENBQUM7aUJBQ0w7cUJBQU0sSUFBSSxRQUFRLEtBQUssU0FBUyxFQUFFO29CQUMvQixNQUFNLENBQUMsU0FBUyxHQUFHO3dCQUNmLElBQUksRUFBRSxNQUFNO3dCQUNaLE9BQU8sRUFBRTs0QkFDTCxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUM7NEJBQy9ELFVBQVUsRUFBRSxPQUFPOzRCQUNuQixTQUFTLEVBQUUsTUFBTTt5QkFDcEI7cUJBQ0osQ0FBQztpQkFDTDthQUNKO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDOztnQkFoREosVUFBVTs7OztJQWtEWCxtQ0FBQztDQUFBLEFBbERELElBa0RDO1NBakRZLDRCQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgVHJlZVRhYmxlQ29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy91aS10cmVldGFibGUnO1xyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBGYXJyaXNUcmVldGFibGVGb3JtYXRTZXJ2aWNlIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgfVxyXG4gICAgc2V0Rm9ybWF0KHRyZWVUYWJsZTogVHJlZVRhYmxlQ29tcG9uZW50KSB7XHJcbiAgICAgICAgY29uc3QgY29sdW1ucyA9IHRyZWVUYWJsZS5jb2x1bW5zO1xyXG4gICAgICAgIGNvbHVtbnMuZm9yRWFjaCgoY29sdW1uOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZGF0YVR5cGUgPSBjb2x1bW4uZGF0YVR5cGU7XHJcbiAgICAgICAgICAgIGlmICghY29sdW1uLmZvcm1hdHRlcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGFUeXBlID09PSAnZGF0ZScpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb2x1bW4uZm9ybWF0dGVyID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZGF0ZXRpbWUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6IGNvbHVtbi5mb3JtYXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFUeXBlID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbi5mb3JtYXR0ZXIgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVmaXg6IGNvbHVtbi5wcmVmaXggPyBjb2x1bW4ucHJlZml4IDogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWZmaXg6IGNvbHVtbi5zdWZmaXggPyBjb2x1bW4uc3VmZml4IDogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVjaXNpb246IGNvbHVtbi5wcmVjaXNpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aG91c2FuZDogJywnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaXBaZXJvczogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhVHlwZSA9PT0gJ2VudW0nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uLmZvcm1hdHRlciA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2VudW0nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBjb2x1bW4uZW51bURhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZUZpZWxkOiAndmFsdWUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dEZpZWxkOiAnbmFtZSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGFUeXBlID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb2x1bW4uZm9ybWF0dGVyID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZW51bScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IFt7IG5hbWU6ICfmmK8nLCB2YWx1ZTogdHJ1ZSB9LCB7IG5hbWU6ICflkKYnLCB2YWx1ZTogZmFsc2UgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZUZpZWxkOiAndmFsdWUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dEZpZWxkOiAnbmFtZSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbn1cclxuIl19