import * as tslib_1 from "tslib";
import { Directive, Input, HostListener } from '@angular/core';
import { DropDownListComponent } from '@progress/kendo-angular-dropdowns';
import { FilterService, BaseFilterCellComponent } from '@progress/kendo-angular-grid';
var KendoGridFilterDirective = /** @class */ (function (_super) {
    tslib_1.__extends(KendoGridFilterDirective, _super);
    function KendoGridFilterDirective(dropdownList, filterService) {
        var _this = _super.call(this, filterService) || this;
        _this.dropdownList = dropdownList;
        _this.filterService = filterService;
        return _this;
    }
    Object.defineProperty(KendoGridFilterDirective.prototype, "selectedValue", {
        get: function () {
            var filter = this.filterByField(this.column.dataField);
            return filter ? filter.value : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(KendoGridFilterDirective.prototype, "defaultItem", {
        get: function () {
            return {
                value: null,
                name: '全部'
            };
        },
        enumerable: true,
        configurable: true
    });
    KendoGridFilterDirective.prototype.ngOnInit = function () {
        this.dropdownList.valueField = 'value';
        this.dropdownList.textField = 'name';
        this.dropdownList.valuePrimitive = true;
        this.dropdownList.defaultItem = this.defaultItem;
        this.dropdownList.value = this.selectedValue;
        if (this.column.dataType === 'enum') {
            this.dropdownList.data = this.column.enumData;
        }
        else if (this.column.dataType === 'boolean') {
            this.dropdownList.data = [{ value: true, name: '是' }, { value: false, name: '否' }];
        }
    };
    KendoGridFilterDirective.prototype.onChange = function (value) {
        this.applyFilter(value === null ?
            this.removeFilter(this.column.dataField) :
            this.updateFilter({
                field: this.column.dataField,
                operator: 'eq',
                value: value
            }));
    };
    /*
   * 获取 单元格值  主从表支持
   * @param dataItem 行数据
   * @param field 字段
   */
    KendoGridFilterDirective.prototype.getValue = function (dataItem, field) {
        var index = field.indexOf('.');
        if (index < 0) {
            return dataItem[field];
        }
        var fields = field.split('.');
        // field字符串组合
        return fields.reduce(function (result, next) {
            return result[next];
        }, dataItem);
    };
    KendoGridFilterDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[kendogridFilter]'
                },] }
    ];
    /** @nocollapse */
    KendoGridFilterDirective.ctorParameters = function () { return [
        { type: DropDownListComponent },
        { type: FilterService }
    ]; };
    KendoGridFilterDirective.propDecorators = {
        filter: [{ type: Input }],
        column: [{ type: Input }],
        onChange: [{ type: HostListener, args: ['valueChange', ['$event'],] }]
    };
    return KendoGridFilterDirective;
}(BaseFilterCellComponent));
export { KendoGridFilterDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2VuZG9ncmlkLWZpbHRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMva2VuZG8tYmluZGluZy8iLCJzb3VyY2VzIjpbImxpYi9mb3JtYXQva2VuZG9ncmlkLWZpbHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQVUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXZFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQzFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN0RjtJQUc4QyxvREFBdUI7SUFnQmpFLGtDQUNZLFlBQW1DLEVBQ3BDLGFBQTRCO1FBRnZDLFlBSUksa0JBQU0sYUFBYSxDQUFDLFNBQ3ZCO1FBSlcsa0JBQVksR0FBWixZQUFZLENBQXVCO1FBQ3BDLG1CQUFhLEdBQWIsYUFBYSxDQUFlOztJQUd2QyxDQUFDO0lBaEJELHNCQUFXLG1EQUFhO2FBQXhCO1lBQ0ksSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3pELE9BQU8sTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDeEMsQ0FBQzs7O09BQUE7SUFDRCxzQkFBVyxpREFBVzthQUF0QjtZQUNJLE9BQU87Z0JBQ0gsS0FBSyxFQUFFLElBQUk7Z0JBQ1gsSUFBSSxFQUFFLElBQUk7YUFDYixDQUFDO1FBQ04sQ0FBQzs7O09BQUE7SUFTRCwyQ0FBUSxHQUFSO1FBQ0ksSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLEdBQUcsT0FBTyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQztRQUNyQyxJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7UUFDeEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUNqRCxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBQzdDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEtBQUssTUFBTSxFQUFFO1lBQ2pDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1NBQ2pEO2FBQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsS0FBSyxTQUFTLEVBQUU7WUFDM0MsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztTQUN0RjtJQUNMLENBQUM7SUFJRCwyQ0FBUSxHQURSLFVBQ1MsS0FBVTtRQUNmLElBQUksQ0FBQyxXQUFXLENBQ1osS0FBSyxLQUFLLElBQUksQ0FBQyxDQUFDO1lBQ1osSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDMUMsSUFBSSxDQUFDLFlBQVksQ0FBQztnQkFDZCxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTO2dCQUM1QixRQUFRLEVBQUUsSUFBSTtnQkFDZCxLQUFLLEVBQUUsS0FBSzthQUNmLENBQUMsQ0FDVCxDQUFDO0lBQ04sQ0FBQztJQUdEOzs7O0tBSUM7SUFDRCwyQ0FBUSxHQUFSLFVBQVMsUUFBYSxFQUFFLEtBQWE7UUFDakMsSUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqQyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUU7WUFDWCxPQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMxQjtRQUNELElBQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDaEMsYUFBYTtRQUNiLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFDLE1BQVcsRUFBRSxJQUFTO1lBQ3hDLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hCLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNqQixDQUFDOztnQkFyRUosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxtQkFBbUI7aUJBQ2hDOzs7O2dCQUpRLHFCQUFxQjtnQkFDckIsYUFBYTs7O3lCQU1qQixLQUFLO3lCQUNMLEtBQUs7MkJBa0NMLFlBQVksU0FBQyxhQUFhLEVBQUUsQ0FBQyxRQUFRLENBQUM7O0lBK0IzQywrQkFBQztDQUFBLEFBdkVELENBRzhDLHVCQUF1QixHQW9FcEU7U0FwRVksd0JBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgT25Jbml0LCBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29tcG9zaXRlRmlsdGVyRGVzY3JpcHRvciB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1kYXRhLXF1ZXJ5JztcclxuaW1wb3J0IHsgRHJvcERvd25MaXN0Q29tcG9uZW50IH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItZHJvcGRvd25zJztcclxuaW1wb3J0IHsgRmlsdGVyU2VydmljZSwgQmFzZUZpbHRlckNlbGxDb21wb25lbnQgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1ncmlkJztcclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1trZW5kb2dyaWRGaWx0ZXJdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgS2VuZG9HcmlkRmlsdGVyRGlyZWN0aXZlIGV4dGVuZHMgQmFzZUZpbHRlckNlbGxDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG5cclxuICAgIEBJbnB1dCgpIGZpbHRlcjogQ29tcG9zaXRlRmlsdGVyRGVzY3JpcHRvcjtcclxuICAgIEBJbnB1dCgpIGNvbHVtbjogYW55O1xyXG5cclxuICAgIHB1YmxpYyBnZXQgc2VsZWN0ZWRWYWx1ZSgpOiBhbnkge1xyXG4gICAgICAgIGNvbnN0IGZpbHRlciA9IHRoaXMuZmlsdGVyQnlGaWVsZCh0aGlzLmNvbHVtbi5kYXRhRmllbGQpO1xyXG4gICAgICAgIHJldHVybiBmaWx0ZXIgPyBmaWx0ZXIudmFsdWUgOiBudWxsO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGdldCBkZWZhdWx0SXRlbSgpOiBhbnkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHZhbHVlOiBudWxsLFxyXG4gICAgICAgICAgICBuYW1lOiAn5YWo6YOoJ1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSBkcm9wZG93bkxpc3Q6IERyb3BEb3duTGlzdENvbXBvbmVudCxcclxuICAgICAgICBwdWJsaWMgZmlsdGVyU2VydmljZTogRmlsdGVyU2VydmljZSxcclxuICAgICkge1xyXG4gICAgICAgIHN1cGVyKGZpbHRlclNlcnZpY2UpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIHRoaXMuZHJvcGRvd25MaXN0LnZhbHVlRmllbGQgPSAndmFsdWUnO1xyXG4gICAgICAgIHRoaXMuZHJvcGRvd25MaXN0LnRleHRGaWVsZCA9ICduYW1lJztcclxuICAgICAgICB0aGlzLmRyb3Bkb3duTGlzdC52YWx1ZVByaW1pdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5kcm9wZG93bkxpc3QuZGVmYXVsdEl0ZW0gPSB0aGlzLmRlZmF1bHRJdGVtO1xyXG4gICAgICAgIHRoaXMuZHJvcGRvd25MaXN0LnZhbHVlID0gdGhpcy5zZWxlY3RlZFZhbHVlO1xyXG4gICAgICAgIGlmICh0aGlzLmNvbHVtbi5kYXRhVHlwZSA9PT0gJ2VudW0nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZHJvcGRvd25MaXN0LmRhdGEgPSB0aGlzLmNvbHVtbi5lbnVtRGF0YTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuY29sdW1uLmRhdGFUeXBlID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgICAgICAgdGhpcy5kcm9wZG93bkxpc3QuZGF0YSA9IFt7IHZhbHVlOiB0cnVlLCBuYW1lOiAn5pivJyB9LCB7IHZhbHVlOiBmYWxzZSwgbmFtZTogJ+WQpicgfV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBASG9zdExpc3RlbmVyKCd2YWx1ZUNoYW5nZScsIFsnJGV2ZW50J10pXHJcbiAgICBvbkNoYW5nZSh2YWx1ZTogYW55KSB7XHJcbiAgICAgICAgdGhpcy5hcHBseUZpbHRlcihcclxuICAgICAgICAgICAgdmFsdWUgPT09IG51bGwgP1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVGaWx0ZXIodGhpcy5jb2x1bW4uZGF0YUZpZWxkKSA6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUZpbHRlcih7XHJcbiAgICAgICAgICAgICAgICAgICAgZmllbGQ6IHRoaXMuY29sdW1uLmRhdGFGaWVsZCxcclxuICAgICAgICAgICAgICAgICAgICBvcGVyYXRvcjogJ2VxJyxcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLypcclxuICAgKiDojrflj5Yg5Y2V5YWD5qC85YC8ICDkuLvku47ooajmlK/mjIFcclxuICAgKiBAcGFyYW0gZGF0YUl0ZW0g6KGM5pWw5o2uXHJcbiAgICogQHBhcmFtIGZpZWxkIOWtl+autVxyXG4gICAqL1xyXG4gICAgZ2V0VmFsdWUoZGF0YUl0ZW06IGFueSwgZmllbGQ6IHN0cmluZykge1xyXG4gICAgICAgIGNvbnN0IGluZGV4ID0gZmllbGQuaW5kZXhPZignLicpO1xyXG4gICAgICAgIGlmIChpbmRleCA8IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGRhdGFJdGVtW2ZpZWxkXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZmllbGRzID0gZmllbGQuc3BsaXQoJy4nKTtcclxuICAgICAgICAvLyBmaWVsZOWtl+espuS4sue7hOWQiFxyXG4gICAgICAgIHJldHVybiBmaWVsZHMucmVkdWNlKChyZXN1bHQ6IGFueSwgbmV4dDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRbbmV4dF07XHJcbiAgICAgICAgfSwgZGF0YUl0ZW0pO1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=