/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, NgZone, Renderer2 } from '@angular/core';
import { DataTableComponent } from '../datatable.component';
export class DragColumnDirective {
    /**
     * @param {?} dt
     * @param {?} ngzone
     * @param {?} el
     * @param {?} render
     */
    constructor(dt, ngzone, el, render) {
        this.dt = dt;
        this.ngzone = ngzone;
        this.el = el;
        this.render = render;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // if (this.isEnable()) {
        //     this.ngzone.runOutsideAngular(() => {
        //         // this.resizer = document.createElement('span');
        //         // this.resizer.className = 'column-resizer';
        //         // this.el.nativeElement.appendChild(this.resizer);
        //         // this.render.addClass(this.el.nativeElement, 'resizable-column');
        //         this.resizer = this.el.nativeElement.querySelector('span.column-resizer');
        //         if (this.resizer) {
        //             this.resizerMouseDownListener = this.onMouseDown.bind(this);
        //             this.resizer.addEventListener('mousedown', this.resizerMouseDownListener);
        //         }
        //     });
        // }
    }
    /**
     * @return {?}
     */
    isEnable() {
        return this.dt.resizableColumns && !this.dt.hasFixed;
    }
    /**
     * @return {?}
     */
    bindDocumentEvents() {
        this.ngzone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.documentMouseMoveListener = this.onMouseMove.bind(this);
            document.addEventListener('mousemove', this.documentMouseMoveListener);
            this.documentMouseUpListener = this.onMouseUp.bind(this);
            document.addEventListener('mouseup', this.documentMouseUpListener);
        }));
    }
    /**
     * @return {?}
     */
    unbindDocumentEvents() {
        if (this.documentMouseMoveListener) {
            document.removeEventListener('mousemove', this.documentMouseMoveListener);
            this.documentMouseMoveListener = null;
        }
        if (this.documentMouseUpListener) {
            document.removeEventListener('mouseup', this.documentMouseUpListener);
            this.documentMouseUpListener = null;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseDown(event) {
        this.dt.beginDrag(event);
        this.bindDocumentEvents();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseMove(event) {
        this.dt.moveDrag(event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseUp(event) {
        this.dt.stopDrag(event, this.el.nativeElement);
        this.unbindDocumentEvents();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        // if (this.resizerMouseDownListener && this.resizer) {
        //     this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);
        // }
        this.unbindDocumentEvents();
    }
}
DragColumnDirective.decorators = [
    { type: Directive, args: [{
                selector: '[drag-column]',
                exportAs: 'resizeRef'
            },] }
];
/** @nocollapse */
DragColumnDirective.ctorParameters = () => [
    { type: DataTableComponent },
    { type: NgZone },
    { type: ElementRef },
    { type: Renderer2 }
];
if (false) {
    /** @type {?} */
    DragColumnDirective.prototype.resizer;
    /** @type {?} */
    DragColumnDirective.prototype.resizerMouseDownListener;
    /** @type {?} */
    DragColumnDirective.prototype.documentMouseMoveListener;
    /** @type {?} */
    DragColumnDirective.prototype.documentMouseUpListener;
    /** @type {?} */
    DragColumnDirective.prototype.dt;
    /** @type {?} */
    DragColumnDirective.prototype.ngzone;
    /** @type {?} */
    DragColumnDirective.prototype.el;
    /** @type {?} */
    DragColumnDirective.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGF0YWJsZS8iLCJzb3VyY2VzIjpbImxpYi91dGlscy9kcmFnLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBNEIsTUFBTSxlQUFlLENBQUM7QUFDbkcsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFLNUQsTUFBTSxPQUFPLG1CQUFtQjs7Ozs7OztJQVM1QixZQUFtQixFQUFzQixFQUFTLE1BQWMsRUFDckQsRUFBYyxFQUFTLE1BQWlCO1FBRGhDLE9BQUUsR0FBRixFQUFFLENBQW9CO1FBQVMsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNyRCxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVMsV0FBTSxHQUFOLE1BQU0sQ0FBVztJQUVuRCxDQUFDOzs7O0lBRUQsZUFBZTtRQUNYLHlCQUF5QjtRQUN6Qiw0Q0FBNEM7UUFDNUMsNERBQTREO1FBQzVELHdEQUF3RDtRQUN4RCw4REFBOEQ7UUFDOUQsOEVBQThFO1FBQzlFLHFGQUFxRjtRQUNyRiw4QkFBOEI7UUFDOUIsMkVBQTJFO1FBQzNFLHlGQUF5RjtRQUN6RixZQUFZO1FBQ1osVUFBVTtRQUNWLElBQUk7SUFDUixDQUFDOzs7O0lBRUQsUUFBUTtRQUNKLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDO0lBQ3pELENBQUM7Ozs7SUFFRCxrQkFBa0I7UUFDZCxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQjs7O1FBQUMsR0FBRyxFQUFFO1lBQy9CLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM3RCxRQUFRLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1lBRXZFLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN6RCxRQUFRLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQ3ZFLENBQUMsRUFBQyxDQUFDO0lBQ1AsQ0FBQzs7OztJQUVELG9CQUFvQjtRQUNoQixJQUFJLElBQUksQ0FBQyx5QkFBeUIsRUFBRTtZQUNoQyxRQUFRLENBQUMsbUJBQW1CLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1lBQzFFLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxJQUFJLENBQUM7U0FDekM7UUFFRCxJQUFJLElBQUksQ0FBQyx1QkFBdUIsRUFBRTtZQUM5QixRQUFRLENBQUMsbUJBQW1CLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1lBQ3RFLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLENBQUM7U0FDdkM7SUFDTCxDQUFDOzs7OztJQUVELFdBQVcsQ0FBQyxLQUFZO1FBQ3BCLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0lBRTlCLENBQUM7Ozs7O0lBRUQsV0FBVyxDQUFDLEtBQVk7UUFDcEIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDNUIsQ0FBQzs7Ozs7SUFFRCxTQUFTLENBQUMsS0FBWTtRQUNsQixJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztJQUNoQyxDQUFDOzs7O0lBRUQsV0FBVztRQUNQLHVEQUF1RDtRQUN2RCxvRkFBb0Y7UUFDcEYsSUFBSTtRQUVKLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0lBQ2hDLENBQUM7OztZQWpGSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGVBQWU7Z0JBQ3pCLFFBQVEsRUFBRSxXQUFXO2FBQ3hCOzs7O1lBSlEsa0JBQWtCO1lBREssTUFBTTtZQUFsQixVQUFVO1lBQVUsU0FBUzs7OztJQU83QyxzQ0FBeUI7O0lBRXpCLHVEQUE4Qjs7SUFFOUIsd0RBQStCOztJQUUvQixzREFBNkI7O0lBRWpCLGlDQUE2Qjs7SUFBRSxxQ0FBcUI7O0lBQzVELGlDQUFxQjs7SUFBRSxxQ0FBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIE5nWm9uZSwgUmVuZGVyZXIyLCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRGF0YVRhYmxlQ29tcG9uZW50IH0gZnJvbSAnLi4vZGF0YXRhYmxlLmNvbXBvbmVudCc7XHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbZHJhZy1jb2x1bW5dJyxcclxuICAgIGV4cG9ydEFzOiAncmVzaXplUmVmJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgRHJhZ0NvbHVtbkRpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XHJcbiAgICByZXNpemVyOiBIVE1MU3BhbkVsZW1lbnQ7XHJcblxyXG4gICAgcmVzaXplck1vdXNlRG93bkxpc3RlbmVyOiBhbnk7XHJcblxyXG4gICAgZG9jdW1lbnRNb3VzZU1vdmVMaXN0ZW5lcjogYW55O1xyXG5cclxuICAgIGRvY3VtZW50TW91c2VVcExpc3RlbmVyOiBhbnk7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHVibGljIGR0OiBEYXRhVGFibGVDb21wb25lbnQsIHB1YmxpYyBuZ3pvbmU6IE5nWm9uZSxcclxuICAgICAgICBwdWJsaWMgZWw6IEVsZW1lbnRSZWYsIHB1YmxpYyByZW5kZXI6IFJlbmRlcmVyMikge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICAgICAgLy8gaWYgKHRoaXMuaXNFbmFibGUoKSkge1xyXG4gICAgICAgIC8vICAgICB0aGlzLm5nem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XHJcbiAgICAgICAgLy8gICAgICAgICAvLyB0aGlzLnJlc2l6ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcbiAgICAgICAgLy8gICAgICAgICAvLyB0aGlzLnJlc2l6ZXIuY2xhc3NOYW1lID0gJ2NvbHVtbi1yZXNpemVyJztcclxuICAgICAgICAvLyAgICAgICAgIC8vIHRoaXMuZWwubmF0aXZlRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLnJlc2l6ZXIpO1xyXG4gICAgICAgIC8vICAgICAgICAgLy8gdGhpcy5yZW5kZXIuYWRkQ2xhc3ModGhpcy5lbC5uYXRpdmVFbGVtZW50LCAncmVzaXphYmxlLWNvbHVtbicpO1xyXG4gICAgICAgIC8vICAgICAgICAgdGhpcy5yZXNpemVyID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ3NwYW4uY29sdW1uLXJlc2l6ZXInKTtcclxuICAgICAgICAvLyAgICAgICAgIGlmICh0aGlzLnJlc2l6ZXIpIHtcclxuICAgICAgICAvLyAgICAgICAgICAgICB0aGlzLnJlc2l6ZXJNb3VzZURvd25MaXN0ZW5lciA9IHRoaXMub25Nb3VzZURvd24uYmluZCh0aGlzKTtcclxuICAgICAgICAvLyAgICAgICAgICAgICB0aGlzLnJlc2l6ZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5yZXNpemVyTW91c2VEb3duTGlzdGVuZXIpO1xyXG4gICAgICAgIC8vICAgICAgICAgfVxyXG4gICAgICAgIC8vICAgICB9KTtcclxuICAgICAgICAvLyB9XHJcbiAgICB9XHJcblxyXG4gICAgaXNFbmFibGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZHQucmVzaXphYmxlQ29sdW1ucyAmJiAhdGhpcy5kdC5oYXNGaXhlZDtcclxuICAgIH1cclxuXHJcbiAgICBiaW5kRG9jdW1lbnRFdmVudHMoKSB7XHJcbiAgICAgICAgdGhpcy5uZ3pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmRvY3VtZW50TW91c2VNb3ZlTGlzdGVuZXIgPSB0aGlzLm9uTW91c2VNb3ZlLmJpbmQodGhpcyk7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMuZG9jdW1lbnRNb3VzZU1vdmVMaXN0ZW5lcik7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmRvY3VtZW50TW91c2VVcExpc3RlbmVyID0gdGhpcy5vbk1vdXNlVXAuYmluZCh0aGlzKTtcclxuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuZG9jdW1lbnRNb3VzZVVwTGlzdGVuZXIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHVuYmluZERvY3VtZW50RXZlbnRzKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmRvY3VtZW50TW91c2VNb3ZlTGlzdGVuZXIpIHtcclxuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5kb2N1bWVudE1vdXNlTW92ZUxpc3RlbmVyKTtcclxuICAgICAgICAgICAgdGhpcy5kb2N1bWVudE1vdXNlTW92ZUxpc3RlbmVyID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmRvY3VtZW50TW91c2VVcExpc3RlbmVyKSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLmRvY3VtZW50TW91c2VVcExpc3RlbmVyKTtcclxuICAgICAgICAgICAgdGhpcy5kb2N1bWVudE1vdXNlVXBMaXN0ZW5lciA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uTW91c2VEb3duKGV2ZW50OiBFdmVudCkge1xyXG4gICAgICAgIHRoaXMuZHQuYmVnaW5EcmFnKGV2ZW50KTtcclxuICAgICAgICB0aGlzLmJpbmREb2N1bWVudEV2ZW50cygpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBvbk1vdXNlTW92ZShldmVudDogRXZlbnQpIHtcclxuICAgICAgICB0aGlzLmR0Lm1vdmVEcmFnKGV2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBvbk1vdXNlVXAoZXZlbnQ6IEV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5kdC5zdG9wRHJhZyhldmVudCwgdGhpcy5lbC5uYXRpdmVFbGVtZW50KTtcclxuICAgICAgICB0aGlzLnVuYmluZERvY3VtZW50RXZlbnRzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgLy8gaWYgKHRoaXMucmVzaXplck1vdXNlRG93bkxpc3RlbmVyICYmIHRoaXMucmVzaXplcikge1xyXG4gICAgICAgIC8vICAgICB0aGlzLnJlc2l6ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5yZXNpemVyTW91c2VEb3duTGlzdGVuZXIpO1xyXG4gICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgdGhpcy51bmJpbmREb2N1bWVudEV2ZW50cygpO1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=