/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InputGroupComponent } from '@farris/ui-input-group';
import { ChangeDetectorRef } from '@angular/core';
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-07-10 11:44:49
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-11-05 11:44:18
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, ViewChild, ElementRef, Input, ContentChild, TemplateRef, QueryList, ContentChildren, Output, EventEmitter, ViewEncapsulation, NgZone } from '@angular/core';
import { of } from 'rxjs';
import { PerfectScrollbarComponent } from '@farris/ui-perfect-scrollbar';
import { PaginationControlsComponent } from '@farris/ui-pagination';
import { IdService } from '@farris/ui-common';
import { deepCopy } from './datatable-column';
import { ColumnDirective } from './datatable-column.component';
import { DataTableService } from './datatable.service';
import { DataTableHeaderComponent } from './table/datatable-header.component';
export class DataTableComponent {
    /**
     * @param {?} dataService
     * @param {?} idService
     * @param {?} el
     * @param {?} cd
     * @param {?} ngZone
     */
    constructor(dataService, idService, el, cd, ngZone) {
        this.dataService = dataService;
        this.idService = idService;
        this.el = el;
        this.cd = cd;
        this.ngZone = ngZone;
        this.searchButtonText = '<i class="f-icon f-icon-search"></i>';
        this.keydownEnterEdit = false;
        this.allColumnsTitle = '所有列';
        /**
         * 是否支持任意字段搜索
         */
        this.searchAnyField = true;
        // 数据表高度
        // 是否填充
        this.fill = false;
        // 默认分页
        this.pagination = true;
        this.pagerOnServer = true;
        this.pageSize = 10;
        this.pageIndex = 1;
        this.showPageInfo = true;
        this.showPageNumber = true;
        this.showPageList = true;
        this.pagerViewMode = 'default';
        /**
         * 显示表头
         */
        this.showHeader = true;
        this._pageList = [10, 20, 30, 50, 100];
        this.total = 0;
        // 可筛选
        this.showFilterBar = false;
        /**
         * 启用虚拟渲染
         */
        this.virtualized = false;
        this.autoFitColumns = false;
        // table  数据
        this._data = [];
        this.remote = 'client';
        /**
         * 启用远端排序
         */
        this.remoteSort = true;
        /**
         * 允许多列排序
         */
        this.multiSort = false;
        // 多选  单选
        this.singleSelect = true;
        this.idField = 'id';
        // 显示鼠标悬停高亮
        this.hover = true;
        // 分页事件
        this.pageChanged = new EventEmitter();
        this.pageSizeChanged = new EventEmitter();
        this.search = new EventEmitter();
        this.columnSorted = new EventEmitter();
        this.rowDblClick = new EventEmitter();
        this.selectedRow = new EventEmitter();
        // 兼容
        this.selectRows = new EventEmitter();
        this.unSelectRow = new EventEmitter();
        this.cellClick = new EventEmitter();
        this.clearSearchValue = new EventEmitter();
        this.checkAll = new EventEmitter();
        this.searchValueChange = new EventEmitter();
        this.sortChange = new EventEmitter();
        // 是否可拖拽  默认可以
        this.resizableColumns = true;
        /**
         * 针对同一条记录，单选时，多次单击后不取消选中。
         */
        this.keepSelect = true;
        // 是否有行模板
        this.hasRowTepml = false;
        // 设置拖拽停止器
        this.moveable = false;
        this.searchData = { field: '*', value: '' };
        // 事件订阅存储  便于销毁
        this.subscription = [];
        // 原数据
        this.filter = '';
        this.maxSize = 7;
        this.directionLinks = true;
        this.autoHide = false;
        this.responsive = true;
        this.paginationOptions = {
            id: 'Farris-DataTable-Pagination',
            itemsPerPage: this.pageSize,
            currentPage: this.pageIndex,
            pageList: this.pageList,
            totalItems: this.total,
            remote: this.pagerOnServer
        };
        this.labels = {
            previousLabel: ' ',
            nextLabel: ' ',
            screenReaderPaginationLabel: 'Pagination',
            screenReaderPageLabel: 'page',
            screenReaderCurrentLabel: `You're on page`
        };
        this._currentRowIndex = -1;
        this._currentRow = undefined;
        this.isCheckAll = (/**
         * @return {?}
         */
        () => {
            if (!this.selections || !this.selections.length) {
                return false;
            }
            if (!this.data || !this.data.length) {
                return false;
            }
            /** @type {?} */
            let total = 0;
            this.selections.forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                if (this.data.find((/**
                 * @param {?} d
                 * @return {?}
                 */
                d => d[this.idField] === n[this.idField]))) {
                    total += 1;
                }
            }));
            return this.data.length === total;
        });
        this.mouseEnterOnPager = null;
        this.mouseLeaveOnPager = null;
        this.mouseWheelOnPager = null;
        this.trackByRows = (/**
         * @param {?} index
         * @param {?} row
         * @return {?}
         */
        (index, row) => {
            return row ? row[this.idField] : index;
        });
        this.dataService.selectedRow.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (this.singleSelect) {
                this._currentRowIndex = e.rowIndex;
                this._currentRow = e.rowData;
            }
            else {
                if (this.selections) {
                    this.dtHeader.isCheckAll = this.isCheckAll();
                }
            }
        }));
        this.dataService.unSelectedRow.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (this.singleSelect) {
                this._currentRow = undefined;
                this._currentRowIndex = -1;
            }
            else {
                this.dtHeader.isCheckAll = false;
            }
        }));
    }
    /**
     * @return {?}
     */
    get pageList() {
        return this._pageList;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set pageList(val) {
        this._pageList = val;
        if (this.pager) {
            this.pager.setPageList(val);
        }
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set data(data) {
        this._data = data || [];
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set selections(v) {
        this.dtBody.selections = v ? v : {};
    }
    /**
     * @return {?}
     */
    get selections() {
        return this.dtBody.selections;
    }
    /**
     * @return {?}
     */
    get currentRowIndex() {
        return this._currentRowIndex;
    }
    /**
     * @return {?}
     */
    get currentRow() {
        return this._currentRow;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.setBodyHeight(true);
            this.ps = this.perfectScrollbar.directiveRef.ps();
        }));
        if (!this.id) {
            this.id = `datatable_${this.idService.generate()}`;
        }
        this.paginationOptions.id = this.paginationOptions.id + this.id;
        this.paginationOptions.remote = this.pagerOnServer;
        this.copyData = deepCopy(this.data);
        if (!this.beforeSortColumn) {
            this.beforeSortColumn = (/**
             * @return {?}
             */
            () => of(true));
        }
    }
    /**
     * @private
     * @param {?=} refresh
     * @return {?}
     */
    setBodyHeight(refresh = true) {
        /** @type {?} */
        let _tableheight = this.height;
        if (this.showFilterBar) {
            _tableheight = this.height - 46;
        }
        this.tableHeight = _tableheight;
        /** @type {?} */
        let _scorllableBodyHeight = 0;
        if (this.showHeader && this.tableHeader) {
            // _scorllableBodyHeight = this.tableHeight - this.tableHeader.nativeElement.clientHeight;
            _scorllableBodyHeight = this.tableHeight - this.tableHeader.nativeElement.querySelector('table').clientHeight;
        }
        if (this.pagination) {
            _scorllableBodyHeight = _scorllableBodyHeight - 50;
        }
        this.scorllableBodyHeight = _scorllableBodyHeight;
        if (refresh && this.cd && !this.cd['destroyed']) {
            this.cd.detectChanges();
        }
    }
    /**
     * @return {?}
     */
    onClearSearchValue() {
        this.searchData.value = '';
        this.cd.detectChanges();
        this.clearSearchValue.emit();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.height && !changes.height.isFirstChange()) {
            this.setBodyHeight();
        }
        if (changes.total && !changes.total.isFirstChange()) {
            this.paginationOptions.totalItems = changes.total.currentValue;
        }
        if (changes.pageSize) {
            this.paginationOptions.itemsPerPage = changes.pageSize.currentValue;
        }
        if (changes.pagerOnServer && !changes.pagerOnServer.isFirstChange()) {
            this.paginationOptions.remote = changes.pagerOnServer.currentValue;
        }
        if (changes.pageIndex && !changes.pageIndex.isFirstChange()) {
            this.paginationOptions.currentPage = changes.pageIndex.currentValue;
        }
        if (changes.data && !changes.data.isFirstChange()) {
            /** @type {?} */
            const rows = changes.data.currentValue;
            this.updateCheckboxState(rows);
            this.paginationOptions = Object.assign({}, this.paginationOptions);
            this.dataService.loadSuccess.next(changes.data.currentValue);
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        // 支持列组件写入
        if (!this.columns) {
            if (this.columnsRef && this.columnsRef.length) {
                this.columns = this.columnsRef.map((/**
                 * @param {?} col
                 * @return {?}
                 */
                col => {
                    return {
                        width: col.width,
                        title: col.title,
                        field: col.field,
                        align: col.align,
                        fixed: col.fixed,
                        className: col.className,
                        multipleFilter: col.multipleFilter,
                        filter: col.filter,
                        media: col.media,
                        sortable: col.sortable,
                        edit: col.edit
                    };
                }));
            }
        }
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            setTimeout((/**
             * @return {?}
             */
            () => {
                if (this.tablePager && this.pagerViewMode !== 'simple') {
                    this.tablePager.nativeElement.addEventListener('mouseenter', this.mouseEnterOnPager = (/**
                     * @param {?} e
                     * @return {?}
                     */
                    (e) => {
                        /** @type {?} */
                        let overflowX = 'auto';
                        if (e.target.className.indexOf('pg-pagelist') > -1 || e.target.closest('.pg-pagelist')) {
                            overflowX = "unset";
                            this.pgScrollbar.nativeElement.scrollLeft = 0;
                        }
                        this.pgScrollbar.nativeElement.style.overflowX = overflowX;
                    }), true);
                    this.tablePager.nativeElement.addEventListener('mouseleave', this.mouseLeaveOnPager = (/**
                     * @param {?} e
                     * @return {?}
                     */
                    (e) => {
                        this.pgScrollbar.nativeElement.style.overflowX = "hidden";
                    }));
                    this.tablePager.nativeElement.addEventListener('wheel', this.mouseWheelOnPager = (/**
                     * @param {?} e
                     * @return {?}
                     */
                    (e) => {
                        /** @type {?} */
                        const box = this.tablePager.nativeElement;
                        /** @type {?} */
                        const sw = this.pgScrollbar.nativeElement.scrollWidth;
                        /** @type {?} */
                        const ow = box.offsetWidth;
                        if (sw > ow) {
                            /** @type {?} */
                            const right = sw - ow;
                            /** @type {?} */
                            const sl = Math.abs(this.pgScrollbar.nativeElement.scrollLeft);
                            if (sl < right && e.deltaY > 0) {
                                e.preventDefault();
                                this.pgScrollbar.nativeElement.scrollLeft = sl + 50;
                            }
                            if (sl > 0 && e.deltaY < 0) {
                                e.preventDefault();
                                this.pgScrollbar.nativeElement.scrollLeft = sl - 50;
                            }
                        }
                    }));
                }
            }));
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.subscription.forEach((/**
         * @param {?} sub
         * @return {?}
         */
        sub => {
            sub.unsubscribe();
        }));
        this.subscription = [];
        this.pager = null;
        if (this.tablePager && this.tablePager.nativeElement) {
            this.tablePager.nativeElement.removeEventListener('mouseenter', this.mouseEnterOnPager, true);
            this.tablePager.nativeElement.removeEventListener('mouseleave', this.mouseLeaveOnPager);
            this.tablePager.nativeElement.removeEventListener('wheel', this.mouseWheelOnPager);
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // 获取表格容器  即表格
        this.datatableContainer = this.el.nativeElement.querySelector('.farris-datatable');
        // this.headerTr = this.tableHeader.nativeElement.querySelectorAll('tr');
        if (this.pagerViewMode == 'simple' && this.tablePager) {
            this.tablePager.nativeElement.style.minHeight = '44px';
            this.tablePager.nativeElement.style.height = '44px';
        }
    }
    /**
     * @param {?} rows
     * @return {?}
     */
    updateCheckboxState(rows) {
        /** @type {?} */
        const updateCheckAllStatus = (/**
         * @param {?} f
         * @return {?}
         */
        (f) => {
            if (this.showHeader && this.dtHeader) {
                this.dtHeader.isCheckAll = f;
            }
        });
        if (rows && rows.length) {
            if (this.selections) {
                /** @type {?} */
                const keys = Object.keys(this.dtBody._selections);
                if (keys.length) {
                    /** @type {?} */
                    let count = 0;
                    /** @type {?} */
                    const ids = rows.map((/**
                     * @param {?} row
                     * @return {?}
                     */
                    (row) => {
                        return row[this.idField].toString();
                    }));
                    keys.forEach((/**
                     * @param {?} id
                     * @return {?}
                     */
                    id => {
                        if (ids.indexOf(id) > -1) {
                            count++;
                        }
                    }));
                    updateCheckAllStatus(ids.length === count);
                }
                else {
                    updateCheckAllStatus(false);
                }
            }
            else {
                updateCheckAllStatus(false);
            }
        }
        else {
            updateCheckAllStatus(false);
        }
    }
    /**
     * 获取表格容器的位置  距离左边视口和上边视口的距离  如果页面有滚动条  需要加上滚动条滚动的数值
     * @return {?}
     */
    getContainerOffset() {
        /** @type {?} */
        const rect = this.datatableContainer.getBoundingClientRect();
        return {
            left: rect.left + document.body.scrollLeft,
            top: rect.top + document.body.scrollTop,
            right: rect.right,
            bottom: rect.bottom,
        };
    }
    /**
     *  鼠标按下  开始记录拖拽线的位置  拖拽线到达当前鼠标位置
     * @param {?} e 鼠标对象
     * @return {?}
     */
    beginDrag(e) {
        this.dragLineX = e.pageX;
        event.preventDefault();
    }
    /**
     * 鼠标移动 移动拖拽线位置变动
     * @param {?} e 鼠标对象
     * @return {?}
     */
    moveDrag(e) {
        // 获取表格的左边距离
        /** @type {?} */
        const containerLeft = this.getContainerOffset().left;
        // 设置拖拽线的高度  即获取表头+表内容+表尾的高度  此表格结构包含了分页  因此要去掉分页的高度
        if (this.tablePager) {
            this.dragLine.nativeElement.style.height = this.datatableContainer.offsetHeight -
                this.tablePager.nativeElement.offsetHeight + 'px';
        }
        else {
            // const headerHeight = this.el.nativeElement.querySelector('.farris-table-header');
            // const bodyHeight = this.el.nativeElement.querySelector('.ps-content');
            this.dragLine.nativeElement.style.height = this.datatableContainer.offsetHeight + 'px';
        }
        // 设置拖拽线的高度 拖拽线相对于表格relative定位是absolute，因此是0
        this.dragLine.nativeElement.style.top = 0 + 'px';
        // 鼠标移动时，拖拽线相对于表格的位置
        this.dragLine.nativeElement.style.left = (e.pageX - containerLeft) + 'px';
        // 鼠标移动  设置拖拽线总是可见
        this.dragLine.nativeElement.style.display = 'block';
    }
    // 重新计算表格宽度
    /**
     * 鼠标抬起 重新计算单元格宽度
     * 鼠标对象
     * @param {?} e
     * @param {?} column
     * @return {?}
     */
    stopDrag(e, column) {
        if (this.autoFitColumns) {
            this.resizeColumn2(e, column);
            if (this.ps) {
                this.ps.update();
            }
            return;
        }
        this.resizeColumn(e, column);
    }
    /**
     * @param {?} e
     * @param {?} column
     * @return {?}
     */
    resizeColumn(e, column) {
        if (this.isCheckBox(column, 'dt-checkbox-cell')) {
            this.dragLine.nativeElement.style.display = 'none';
            return;
        }
        // 偏移量
        /** @type {?} */
        const delta = e.pageX - this.dragLineX;
        // 拖拽前列宽
        /** @type {?} */
        const columnWidth = column.offsetWidth;
        // 拖拽后列宽
        /** @type {?} */
        let newColumnWidth = columnWidth + delta;
        // 最小宽度
        /** @type {?} */
        const minWidth = column.style.minWidth || 30;
        // 新宽度大于或等于最小宽度时
        newColumnWidth = newColumnWidth > minWidth ? newColumnWidth : minWidth;
        // 重新设置宽度
        /** @type {?} */
        let colIndex = -1;
        /** @type {?} */
        const othersCol = [];
        /** @type {?} */
        const cols = this.tableHeader.nativeElement.querySelectorAll('th');
        // 父节点宽度
        /** @type {?} */
        const parentWidth = column.parentElement.offsetWidth;
        // 判断是不是有checkbox
        /** @type {?} */
        const firstElement = column.parentElement.firstElementChild;
        /** @type {?} */
        const checkBoxWidth = this.isCheckBox(firstElement, 'dt-checkbox-cell') ? firstElement.offsetWidth : 0;
        // 其他列宽度
        /** @type {?} */
        let othersWidth = parentWidth - columnWidth - checkBoxWidth;
        /** @type {?} */
        let newOthersWidth = parentWidth - newColumnWidth - checkBoxWidth;
        for (let i = 0; i < cols.length; i++) {
            if (cols[i] === column) {
                colIndex = i;
            }
            else {
                if (this.isCheckBox(cols[i], 'dt-checkbox-cell')) {
                    continue;
                }
                /** @type {?} */
                const rate = cols[i].offsetWidth / othersWidth;
                if (rate > 1) {
                    // console.log(cols[i]);
                }
                /** @type {?} */
                let colWidth = newOthersWidth * rate;
                if (newOthersWidth * rate > 15) {
                    colWidth = newOthersWidth * rate;
                }
                else {
                    colWidth = 15;
                    othersWidth = othersWidth - colWidth;
                    newOthersWidth = newOthersWidth - colWidth;
                    newColumnWidth = newColumnWidth - 15 + newOthersWidth * rate;
                }
                othersCol.push({ colIndex: i, colWidth });
            }
        }
        this.resizeColGroup(this.dtHeader.el.nativeElement, colIndex, newColumnWidth, othersCol);
        this.resizeColGroup(this.dtBody.el.nativeElement, colIndex, newColumnWidth, othersCol);
        // 计算宽度完毕  设置拖拽线隐藏
        this.dragLine.nativeElement.style.display = 'none';
    }
    /**
     * @param {?} e
     * @param {?} column
     * @return {?}
     */
    resizeColumn2(e, column) {
        if (this.isCheckBox(column, 'dt-checkbox-cell')) {
            this.dragLine.nativeElement.style.display = 'none';
            return;
        }
        // 偏移量
        /** @type {?} */
        const delta = e.pageX - this.dragLineX;
        // 拖拽前列宽
        /** @type {?} */
        const columnWidth = column.offsetWidth;
        // 拖拽后列宽
        /** @type {?} */
        let newColumnWidth = columnWidth + delta;
        // 最小宽度
        /** @type {?} */
        const minWidth = column.style.minWidth || 30;
        // 新宽度大于或等于最小宽度时
        newColumnWidth = newColumnWidth > minWidth ? newColumnWidth : minWidth;
        // 重新设置宽度
        /** @type {?} */
        let colIndex = -1;
        /** @type {?} */
        const othersCol = [];
        /** @type {?} */
        const cols = this.tableHeader.nativeElement.querySelectorAll('th');
        // 父节点宽度
        /** @type {?} */
        const parentWidth = column.parentElement.offsetWidth;
        // 判断是不是有checkbox
        /** @type {?} */
        const firstElement = column.parentElement.firstElementChild;
        /** @type {?} */
        const checkBoxWidth = this.isCheckBox(firstElement, 'dt-checkbox-cell') ? firstElement.offsetWidth : 0;
        // 其他列宽度
        /** @type {?} */
        let othersWidth = parentWidth - columnWidth - checkBoxWidth;
        /** @type {?} */
        let newOthersWidth = parentWidth - newColumnWidth - checkBoxWidth;
        for (let i = 0; i < cols.length; i++) {
            if (cols[i] === column) {
                colIndex = i;
            }
            else {
                if (this.isCheckBox(cols[i], 'dt-checkbox-cell')) {
                    continue;
                }
                /** @type {?} */
                const rate = cols[i].offsetWidth / othersWidth;
                if (rate > 1) {
                    // console.log(cols[i]);
                }
                /** @type {?} */
                let colWidth = newOthersWidth * rate;
                if (newOthersWidth * rate > 15) {
                    colWidth = newOthersWidth * rate;
                }
                else {
                    colWidth = 15;
                    othersWidth = othersWidth - colWidth;
                    newOthersWidth = newOthersWidth - colWidth;
                    newColumnWidth = newColumnWidth - 15 + newOthersWidth * rate;
                }
                othersCol.push({ colIndex: i, colWidth });
            }
        }
        this.resizeColGroup(this.dtHeader.el.nativeElement, colIndex, newColumnWidth, []);
        this.resizeColGroup(this.dtBody.el.nativeElement, colIndex, newColumnWidth, []);
        /** @type {?} */
        const field = column.getAttribute('field');
        if (field) {
            /** @type {?} */
            const col = this.columns.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n.field === field));
            if (col) {
                col.width = newColumnWidth;
            }
        }
        // 计算宽度完毕  设置拖拽线隐藏
        this.dragLine.nativeElement.style.display = 'none';
    }
    /**
     * @param {?} elements
     * @param {?} cName
     * @return {?}
     */
    isCheckBox(elements, cName) {
        return !!elements.className.match(new RegExp('(\\s|^)' + cName + '(\\s|$)'));
    }
    /**
     * @param {?} table
     * @param {?} resizeColumnIndex
     * @param {?} newColumnWidth
     * @param {?} othersColumn
     * @return {?}
     */
    resizeColGroup(table, resizeColumnIndex, newColumnWidth, othersColumn) {
        if (table) {
            // 此处要视不同的表格结构来确定 本组件中  header和body结构相同
            /** @type {?} */
            const colGroup = table.childNodes[0].children[0].nodeName === 'COLGROUP' ?
                table.childNodes[0].children[0] : null;
            if (colGroup) {
                /** @type {?} */
                const col = colGroup.children[resizeColumnIndex];
                col.style.width = newColumnWidth + 'px';
                for (let i = 0; i < othersColumn.length; i++) {
                    /** @type {?} */
                    const otherCol = colGroup.children[othersColumn[i].colIndex];
                    if (otherCol && othersColumn[i].colWidth) {
                        otherCol.style.width = othersColumn[i].colWidth + 'px';
                    }
                }
            }
            else {
                throw new Error('Scrollable tables require a colgroup to support resizable columns');
            }
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onScrollX(e) {
        // 横向滚动 非固定表头滚动
        /** @type {?} */
        const x = e.srcElement.scrollLeft;
        this.tableHeader.nativeElement.scrollTo(x, 0);
    }
    /**
     * 滚动条纵向滚动
     * @param {?} e
     * @return {?}
     */
    onScrollY(e) {
        if (!this.hasFixed) {
            return;
        }
        /** @type {?} */
        const y = e.srcElement.scrollTop;
        this.dtLeftFixed.nativeElement.style.top = -y + 'px';
        this.dtRightFixed.nativeElement.style.top = -y + 'px';
    }
    /**
     * @param {?} page
     * @return {?}
     */
    onPageChange(page) {
        if (this.pageIndex !== page.pageIndex) {
            this.pageIndex = page.pageIndex;
            this.paginationOptions.currentPage = page.pageIndex;
            this.pageChanged.emit({ pageInfo: page, search: this.searchData, sortName: this.sortName, sortOrder: this.sortOrder });
        }
    }
    /**
     * @param {?} pageSize
     * @return {?}
     */
    onPageSizeChange(pageSize) {
        if (this.pageSize !== pageSize && this.total) {
            this.paginationOptions.itemsPerPage = pageSize;
            this.pageSize = pageSize;
            /** @type {?} */
            const total = this.total;
            /** @type {?} */
            let pageLength = Math.floor(total / pageSize);
            if (total % pageSize > 0) {
                pageLength += 1;
            }
            if (pageLength && this.pageIndex > pageLength) {
                this.pageIndex = pageLength;
                this.paginationOptions.currentPage = this.pageIndex;
            }
            this.pageSizeChanged.emit({
                pageInfo: { pageIndex: this.pageIndex, pageSize },
                search: this.searchData, sortName: this.sortName, sortOrder: this.sortOrder
            });
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSearch($event) {
        if ($event.originalEvent) {
            $event.originalEvent.stopPropagation();
        }
        this.search.emit(this.searchData);
    }
    /**
     * @param {?} state
     * @return {?}
     */
    onCheckAll(state) {
        this.dataService.selectedAll.next(state);
        this.checkAll.emit(state);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onSelectedRow(e) {
        this.selectedRow.emit({ data: e.rowData, index: e.rowIndex });
        // 兼容
        this.selectRows.emit({ data: e.rowData, index: e.rowIndex });
    }
    // tslint:disable-next-line:no-shadowed-variable
    /**
     * @param {?} size
     * @return {?}
     */
    resize(size) {
        if (!size) {
            return;
        }
        if (this.width !== size.width || this.height !== size.height) {
            this.width = size.width;
            this.height = size.height;
        }
        this.setBodyHeight();
    }
    /**
     * @param {?} e
     * @return {?}
     */
    loadData(e) {
        this.data = e.data;
        if (this.pagination) {
            const { total = 0, pageSize = 20, pageIndex = 1 } = Object.assign({}, e);
            this.paginationOptions.totalItems = total;
            this.paginationOptions.itemsPerPage = pageSize;
            this.paginationOptions.currentPage = pageIndex;
            this.paginationOptions.pageList = this.pageList;
            this.paginationOptions = Object.assign({}, this.paginationOptions);
            this.total = total;
            this.pageSize = pageSize;
            this.pageIndex = pageIndex;
        }
        this.cd.detectChanges();
        // TFS 580296
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.ps && this.ps.update();
        }), 10);
        this.updateCheckboxState(this.data);
    }
    /*
         */
    /**
     * @param {?} e
     * @return {?}
     */
    onCellClick(e) {
        this.cellClick.emit(e);
    }
    /* 添加行 */
    /**
     * @param {?} dataItem
     * @return {?}
     */
    addRows(dataItem) {
        this.data = this.data.concat(dataItem);
    }
    /* 删除行 */
    /**
     * @return {?}
     */
    removeRows() {
        /** @type {?} */
        const SELECTIONS = this.selections;
        if (this.singleSelect) {
            for (let i = 0; i < this.data.length; i++) {
                if (this.data[i] === SELECTIONS) {
                    this.data.splice(i, 1);
                }
            }
        }
        else {
            for (let i = 0; i < SELECTIONS.length; i++) {
                for (let j = 0; j < this.data.length; j++) {
                    if (SELECTIONS[i][this.idField] === this.data[j][this.idField]) {
                        this.data.splice(j, 1);
                    }
                }
            }
        }
    }
    /**
     * @param {?} rid
     * @param {?=} emit
     * @return {?}
     */
    checkRow(rid, emit = false) {
        /** @type {?} */
        let rowIndex = -1;
        /** @type {?} */
        const rowData = this.data.find((/**
         * @param {?} n
         * @param {?} i
         * @return {?}
         */
        (n, i) => {
            if (n[this.idField] == rid) {
                rowIndex = i;
                return true;
            }
        }));
        if (!rowData) {
            return;
        }
        if (!this.selections) {
            this.selections = { [rid]: rowData };
        }
        else {
            this.selections = Object.assign({ [rid]: rowData }, this.selections.reduce((/**
             * @param {?} r
             * @param {?} n
             * @return {?}
             */
            (r, n) => {
                r[n[this.idField]] = n;
                return r;
            }), {}));
        }
        this.dataService.selectedRow.next({
            rowIndex,
            rowData
        });
        if (emit) {
            /** @type {?} */
            const p = { data: rowData, index: rowIndex };
            this.selectedRow.emit(p);
            // 兼容
            this.selectRows.emit(p);
        }
    }
    /**
     * @param {?} rid
     * @param {?=} emit
     * @return {?}
     */
    unCheckRow(rid, emit = false) {
        /** @type {?} */
        let rowIndex = -1;
        /** @type {?} */
        const rowData = this.data.find((/**
         * @param {?} n
         * @param {?} i
         * @return {?}
         */
        (n, i) => {
            if (n[this.idField] == rid) {
                rowIndex = i;
                return true;
            }
        }));
        if (this.selections) {
            this.selections = this.selections.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n[this.idField] != rid)).reduce((/**
             * @param {?} r
             * @param {?} n
             * @return {?}
             */
            (r, n) => {
                r[n[this.idField]] = n;
                return r;
            }), {});
            this.dataService.unSelectedRow.next({
                rowIndex,
                rowData
            });
            if (emit) {
                this.unSelectRow.emit({ data: rowData, index: rowIndex });
            }
        }
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    unCheckRows(ids) {
        if (this.selections) {
            this.selections = this.selections.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => !ids.includes(n[this.idField]))).reduce((/**
             * @param {?} r
             * @param {?} n
             * @return {?}
             */
            (r, n) => {
                r[n[this.idField]] = n;
                return r;
            }), {});
            this.cd.detectChanges();
        }
    }
    /**
     * @return {?}
     */
    clearSelections() {
        this.selections = [];
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onKeydownEvent($event) {
        if (!$event || !this.singleSelect || !this.data || !this.data.length) {
            return;
        }
        if (!['ArrowDown', 'ArrowUp'].includes($event.code)) {
            return;
        }
        /** @type {?} */
        let newIdx;
        if ($event.code === 'ArrowDown') {
            newIdx = this._currentRowIndex + 1;
            if (newIdx >= this.data.length) {
                newIdx = 0;
            }
        }
        else if ($event.code === 'ArrowUp') {
            if (this._currentRowIndex !== -1) {
                newIdx = this._currentRowIndex - 1;
            }
        }
        if (newIdx >= 0) {
            this.dtBody.selectedRow($event, newIdx, this.data[newIdx]);
        }
        setTimeout((/**
         * @return {?}
         */
        () => {
            // scroll intoView
            /** @type {?} */
            const trDoms = this.dtBody.el.nativeElement.querySelectorAll('.ui-table-tbody tr');
            if (trDoms && trDoms[this._currentRowIndex]) {
                trDoms[this._currentRowIndex].scrollIntoView({ block: 'nearest' });
            }
        }));
    }
}
DataTableComponent.decorators = [
    { type: Component, args: [{
                selector: 'farrisui-datatable,farris-datatable',
                template: "<div class=\"filter-row\" [style.width]=\"width + 'px'\" *ngIf=\"showFilterBar\">\r\n    <form style=\"display: flex; width: 100%;\">\r\n        <div class=\"search-fields\" style=\"max-width: 180px;min-width: 140px;\">\r\n            <select class=\"custom-select\" [(ngModel)]=\"searchData.field\" name=\"field\" single-select [panelRef]=\"selectpanel\" [items]=\"searchFields\">\r\n                <!-- <option value=\"*\">{{allColumnsTitle}}</option>\r\n                <option *ngFor=\"let col of searchFields\" value=\"{{col.value}}\">{{ col.label }}</option> -->\r\n            </select>\r\n\r\n            <div #selectpanel class=\"single-select-panel f-area-hide\">\r\n                <ul class=\"dropdown-menu show\">\r\n                    <li class=\"dropdown-item\" [attr.value]=\"'*'\" *ngIf=\"searchAnyField\" [class.active]=\"searchData.field === '*'\">{{allColumnsTitle}}</li>\r\n                    <li class=\"dropdown-item\" *ngFor=\"let col of searchFields\" [attr.value]=\"col.value\" [class.active]=\"searchData.field === col.value\">{{ col.label }}</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n        <div class=\"search-text flex-fill\">\r\n            <input-group [groupText]=\"searchButtonText\" name=\"searchValue\" (clear)=\"onClearSearchValue()\" #inputgroup\r\n                [(ngModel)]=\"searchData.value\" (clickHandle)=\"onSearch($event)\" (enterHandle)=\"onSearch($event)\"\r\n                (keydownHandle)=\"onKeydownEvent($event)\" (valueChange)=\"searchValueChange.emit(searchData)\"></input-group>\r\n        </div>\r\n    </form>\r\n</div>\r\n<div [style.height.px]=\"tableHeight\" [style.width.px]=\"width\" class=\"farris-datatable-container\">\r\n    <div class=\"farris-datatable\">\r\n        <div #tableHeader class=\"farris-table-header\" [style.display]=\"showHeader? '': 'none'\">\r\n            <datatable-header #dtHeader [size]=\"size\" [columns]=\"columns\" [singleSelect]=\"singleSelect\" [data]=\"data\"\r\n                (loadData)=\"loadData\" (checkedAll)=\"onCheckAll($event)\">\r\n                <ng-content select=\"data-columns\"></ng-content>\r\n            </datatable-header>\r\n        </div>\r\n        <div #scorllableBody class=\"farris-table-scorllable-body\" [style.height.px]=\"scorllableBodyHeight\">\r\n            <perfect-scrollbar #perfectScrollbar [config]=\"{}\" (psScrollX)=\"onScrollX($event)\" (psScrollY)=\"onScrollY($event)\">\r\n                <ng-container [style.display]=\"data && data.length ? 'block': 'none'\">\r\n                    <datatable-body #dtBody [rows]=\"pagination ? (data | paginate: paginationOptions) : data\" [size]=\"size\" [columns]=\"columns\" [striped]=\"striped\"\r\n                        [bordered]=\"bordered\" [rowClassName]=\"rowClassName\" [cellClassName]=\"cellClassName\" (cellClick)=\"onCellClick($event)\">\r\n                    </datatable-body>\r\n                </ng-container>\r\n\r\n            </perfect-scrollbar>\r\n        </div>\r\n        <div class=\"farris-table-header\" *ngIf=\"footer\">\r\n            <ng-template [ngTemplateOutlet]=\"footer\">\r\n            </ng-template>\r\n        </div>\r\n        <div *ngIf=\"pagination\" #tablePager class=\"farris-table-pager\" style=\"box-shadow: inset 0px 1px 0px 0px #e9ecf3;\" >\r\n            <div #pgScrollbar style=\"width: 100%;position: absolute;overflow-x: unset;\">\r\n                <pagination-controls #pager [id]=\"paginationOptions.id\" [maxSize]=\"maxSize\" [directionLinks]=\"directionLinks\"\r\n                    [autoHide]=\"autoHide\" [responsive]=\"responsive\" [previousLabel]=\"labels.previousLabel\" [nextLabel]=\"labels.nextLabel\"\r\n                    [screenReaderPaginationLabel]=\"labels.screenReaderPaginationLabel\" [screenReaderPageLabel]=\"labels.screenReaderPageLabel\"\r\n                    [screenReaderCurrentLabel]=\"labels.screenReaderCurrentLabel\" (pageChange)=\"onPageChange($event)\"\r\n                    (pageSizeChange)=\"onPageSizeChange($event)\" [viewMode]=\"pagerViewMode\" [showGoToFirst]=\"true\" [showGoToLast]=\"true\"\r\n                    [showPageInfo]=\"showPageInfo\" [showPageNumber]=\"showPageNumber\" [showPageList]=\"showPageList\" style=\"position: relative;\"\r\n                >\r\n\r\n                    <div class=\"simple-pager-extend-area\" *ngIf=\"pagerViewMode === 'simple' && pagerExtendTemplate\">\r\n                        <ng-template [ngTemplateOutlet]=\"pagerExtendTemplate\" [ngTemplateOutletContext]=\"{$implicit: this}\"></ng-template>\r\n                    </div>\r\n\r\n                </pagination-controls>\r\n            </div>\r\n        </div>\r\n        <div #dragLine *ngIf=\"resizableColumns\" class=\"column-resizer-helper\"></div>\r\n    </div>\r\n</div>",
                encapsulation: ViewEncapsulation.None,
                providers: [
                    DataTableService
                ],
                styles: [".farris-table-scorllable-body .ps__rail-x{z-index:2}.filter-row{display:-webkit-box;display:flex;margin:10px 0}.filter-row .search-text{-webkit-box-flex:1;flex:1;margin-left:10px}.filter-row .search-text .btn-outline-secondary{border-color:#ced4da}.filter-row .search-text .btn-outline-secondary:active,.filter-row .search-text .btn-outline-secondary:focus{box-shadow:none}.filter-row .form-control:focus{border-color:#ced4da;box-shadow:none}.filter-row .custom-select:focus{box-shadow:none}.farris-datatable{position:relative}.resizable-column{background-clip:padding-box;position:relative}.column-resizer{display:block;position:absolute!important;top:0;right:0;margin:0;width:.5em;height:100%;padding:0;cursor:col-resize;border:1px solid transparent}.column-resizer-helper{width:1px;position:absolute;z-index:10;display:none;background-color:#6c757d;opacity:.6}.farris-table-fixed-body,.farris-table-fixed-header{position:absolute;top:0;left:0;overflow:hidden;box-shadow:2px 0 6px -2px rgba(0,0,0,.2)}.farris-table-fixed-right-body,.farris-table-fixed-right-header{position:absolute;top:0;right:0;overflow:hidden;box-shadow:-2px 0 6px -2px rgba(0,0,0,.2)}.td-hidden{visibility:hidden}@media (min-width:576px){.td-sm-hidden{visibility:hidden!important}.td-sm-visible{visibility:visible!important}}@media (min-width:768px){.td-md-hidden{visibility:hidden!important}.td-md-visible{visibility:visible!important}}@media (min-width:992px){.td-lg-hidden{visibility:hidden!important}.td-lg-visible{visibility:visible!important}}@media (min-width:1200px){.td-xl-hidden{visibility:hidden!important}.td-xl-visible{visibility:visible!important}}"]
            }] }
];
/** @nocollapse */
DataTableComponent.ctorParameters = () => [
    { type: DataTableService },
    { type: IdService },
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: NgZone }
];
DataTableComponent.propDecorators = {
    keydownEnterEdit: [{ type: Input }],
    id: [{ type: Input }],
    size: [{ type: Input }],
    allColumnsTitle: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    searchAnyField: [{ type: Input }],
    fill: [{ type: Input }],
    pagination: [{ type: Input }],
    pagerOnServer: [{ type: Input }],
    pageSize: [{ type: Input }],
    pageIndex: [{ type: Input }],
    showPageInfo: [{ type: Input }],
    showPageNumber: [{ type: Input }],
    showPageList: [{ type: Input }],
    pagerViewMode: [{ type: Input }],
    pagerExtendTemplate: [{ type: Input }],
    showHeader: [{ type: Input }],
    pageList: [{ type: Input }],
    total: [{ type: Input }],
    columns: [{ type: Input }],
    searchFields: [{ type: Input }],
    showFilterBar: [{ type: Input }],
    virtualized: [{ type: Input }],
    autoFitColumns: [{ type: Input }],
    data: [{ type: Input }],
    remote: [{ type: Input }],
    remoteSort: [{ type: Input }],
    sortName: [{ type: Input }],
    sortOrder: [{ type: Input }],
    multiSort: [{ type: Input }],
    beforeSortColumn: [{ type: Input }],
    singleSelect: [{ type: Input }],
    idField: [{ type: Input }],
    hover: [{ type: Input }],
    striped: [{ type: Input }],
    bordered: [{ type: Input }],
    rowClassName: [{ type: Input }],
    cellClassName: [{ type: Input }],
    rowStyler: [{ type: Input }],
    cellStyler: [{ type: Input }],
    selections: [{ type: Input }],
    scorllableBody: [{ type: ViewChild, args: ['scorllableBody',] }],
    tableHeader: [{ type: ViewChild, args: ['tableHeader',] }],
    tablePager: [{ type: ViewChild, args: ['tablePager',] }],
    dtHeader: [{ type: ViewChild, args: ['dtHeader',] }],
    dtBody: [{ type: ViewChild, args: ['dtBody',] }],
    dtLeftBody: [{ type: ViewChild, args: ['dtLeftBody',] }],
    dtRightBody: [{ type: ViewChild, args: ['dtRightBody',] }],
    dtLeftFixed: [{ type: ViewChild, args: ['dtLeftFixed',] }],
    dtRightFixed: [{ type: ViewChild, args: ['dtRightFixed',] }],
    pager: [{ type: ViewChild, args: ['pager',] }],
    inputGroup: [{ type: ViewChild, args: ['inputgroup',] }],
    pgScrollbar: [{ type: ViewChild, args: ['pgScrollbar',] }],
    pageChanged: [{ type: Output }],
    pageSizeChanged: [{ type: Output }],
    search: [{ type: Output }],
    columnSorted: [{ type: Output }],
    rowDblClick: [{ type: Output }],
    selectedRow: [{ type: Output }],
    selectRows: [{ type: Output }],
    unSelectRow: [{ type: Output }],
    cellClick: [{ type: Output }],
    clearSearchValue: [{ type: Output }],
    checkAll: [{ type: Output }],
    searchValueChange: [{ type: Output }],
    sortChange: [{ type: Output }],
    columnsRef: [{ type: ContentChildren, args: [ColumnDirective,] }],
    footer: [{ type: ContentChild, args: ['footer',] }],
    dragLine: [{ type: ViewChild, args: ['dragLine',] }],
    resizableColumns: [{ type: Input }],
    keepSelect: [{ type: Input }],
    perfectScrollbar: [{ type: ViewChild, args: ['perfectScrollbar',] }]
};
if (false) {
    /** @type {?} */
    DataTableComponent.prototype.searchButtonText;
    /** @type {?} */
    DataTableComponent.prototype.keydownEnterEdit;
    /** @type {?} */
    DataTableComponent.prototype.id;
    /** @type {?} */
    DataTableComponent.prototype.size;
    /** @type {?} */
    DataTableComponent.prototype.allColumnsTitle;
    /** @type {?} */
    DataTableComponent.prototype.width;
    /** @type {?} */
    DataTableComponent.prototype.height;
    /**
     * 是否支持任意字段搜索
     * @type {?}
     */
    DataTableComponent.prototype.searchAnyField;
    /** @type {?} */
    DataTableComponent.prototype.tableHeight;
    /** @type {?} */
    DataTableComponent.prototype.fill;
    /** @type {?} */
    DataTableComponent.prototype.pagination;
    /** @type {?} */
    DataTableComponent.prototype.pagerOnServer;
    /** @type {?} */
    DataTableComponent.prototype.pageSize;
    /** @type {?} */
    DataTableComponent.prototype.pageIndex;
    /** @type {?} */
    DataTableComponent.prototype.showPageInfo;
    /** @type {?} */
    DataTableComponent.prototype.showPageNumber;
    /** @type {?} */
    DataTableComponent.prototype.showPageList;
    /** @type {?} */
    DataTableComponent.prototype.pagerViewMode;
    /**
     * 分页条为简单模式时，分页条左侧区域模板
     * @type {?}
     */
    DataTableComponent.prototype.pagerExtendTemplate;
    /**
     * 显示表头
     * @type {?}
     */
    DataTableComponent.prototype.showHeader;
    /**
     * @type {?}
     * @private
     */
    DataTableComponent.prototype._pageList;
    /** @type {?} */
    DataTableComponent.prototype.total;
    /** @type {?} */
    DataTableComponent.prototype.columns;
    /** @type {?} */
    DataTableComponent.prototype.searchFields;
    /** @type {?} */
    DataTableComponent.prototype.showFilterBar;
    /**
     * 启用虚拟渲染
     * @type {?}
     */
    DataTableComponent.prototype.virtualized;
    /** @type {?} */
    DataTableComponent.prototype.autoFitColumns;
    /** @type {?} */
    DataTableComponent.prototype._data;
    /** @type {?} */
    DataTableComponent.prototype.copyData;
    /** @type {?} */
    DataTableComponent.prototype.remote;
    /**
     * 启用远端排序
     * @type {?}
     */
    DataTableComponent.prototype.remoteSort;
    /**
     * 排序字段
     * @type {?}
     */
    DataTableComponent.prototype.sortName;
    /**
     * 排序方式 asc | desc
     * @type {?}
     */
    DataTableComponent.prototype.sortOrder;
    /**
     * 允许多列排序
     * @type {?}
     */
    DataTableComponent.prototype.multiSort;
    /** @type {?} */
    DataTableComponent.prototype.beforeSortColumn;
    /** @type {?} */
    DataTableComponent.prototype.singleSelect;
    /** @type {?} */
    DataTableComponent.prototype.idField;
    /** @type {?} */
    DataTableComponent.prototype.hover;
    /** @type {?} */
    DataTableComponent.prototype.striped;
    /** @type {?} */
    DataTableComponent.prototype.bordered;
    /** @type {?} */
    DataTableComponent.prototype.rowClassName;
    /** @type {?} */
    DataTableComponent.prototype.cellClassName;
    /** @type {?} */
    DataTableComponent.prototype.rowStyler;
    /** @type {?} */
    DataTableComponent.prototype.cellStyler;
    /** @type {?} */
    DataTableComponent.prototype.scorllableBody;
    /** @type {?} */
    DataTableComponent.prototype.tableHeader;
    /** @type {?} */
    DataTableComponent.prototype.tablePager;
    /** @type {?} */
    DataTableComponent.prototype.dtHeader;
    /** @type {?} */
    DataTableComponent.prototype.dtBody;
    /** @type {?} */
    DataTableComponent.prototype.dtLeftBody;
    /** @type {?} */
    DataTableComponent.prototype.dtRightBody;
    /** @type {?} */
    DataTableComponent.prototype.dtLeftFixed;
    /** @type {?} */
    DataTableComponent.prototype.dtRightFixed;
    /** @type {?} */
    DataTableComponent.prototype.pager;
    /** @type {?} */
    DataTableComponent.prototype.inputGroup;
    /** @type {?} */
    DataTableComponent.prototype.pgScrollbar;
    /** @type {?} */
    DataTableComponent.prototype.pageChanged;
    /** @type {?} */
    DataTableComponent.prototype.pageSizeChanged;
    /** @type {?} */
    DataTableComponent.prototype.search;
    /** @type {?} */
    DataTableComponent.prototype.columnSorted;
    /** @type {?} */
    DataTableComponent.prototype.rowDblClick;
    /** @type {?} */
    DataTableComponent.prototype.selectedRow;
    /** @type {?} */
    DataTableComponent.prototype.selectRows;
    /** @type {?} */
    DataTableComponent.prototype.unSelectRow;
    /** @type {?} */
    DataTableComponent.prototype.cellClick;
    /** @type {?} */
    DataTableComponent.prototype.clearSearchValue;
    /** @type {?} */
    DataTableComponent.prototype.checkAll;
    /** @type {?} */
    DataTableComponent.prototype.searchValueChange;
    /** @type {?} */
    DataTableComponent.prototype.sortChange;
    /** @type {?} */
    DataTableComponent.prototype.columnsRef;
    /** @type {?} */
    DataTableComponent.prototype.footer;
    /** @type {?} */
    DataTableComponent.prototype.dragLine;
    /** @type {?} */
    DataTableComponent.prototype.resizableColumns;
    /**
     * 针对同一条记录，单选时，多次单击后不取消选中。
     * @type {?}
     */
    DataTableComponent.prototype.keepSelect;
    /** @type {?} */
    DataTableComponent.prototype.hasRowTepml;
    /** @type {?} */
    DataTableComponent.prototype.datatableContainer;
    /** @type {?} */
    DataTableComponent.prototype.dragLineX;
    /** @type {?} */
    DataTableComponent.prototype.moveable;
    /** @type {?} */
    DataTableComponent.prototype.currentColumn;
    /** @type {?} */
    DataTableComponent.prototype.hasFixed;
    /** @type {?} */
    DataTableComponent.prototype.fixedLeftWidth;
    /** @type {?} */
    DataTableComponent.prototype.fixedRightWidth;
    /** @type {?} */
    DataTableComponent.prototype.searchData;
    /** @type {?} */
    DataTableComponent.prototype.subscription;
    /** @type {?} */
    DataTableComponent.prototype.headerTr;
    /** @type {?} */
    DataTableComponent.prototype.leftFixedHeaderTr;
    /** @type {?} */
    DataTableComponent.prototype.rightFixedHeaderTr;
    /** @type {?} */
    DataTableComponent.prototype.filter;
    /** @type {?} */
    DataTableComponent.prototype.maxSize;
    /** @type {?} */
    DataTableComponent.prototype.directionLinks;
    /** @type {?} */
    DataTableComponent.prototype.autoHide;
    /** @type {?} */
    DataTableComponent.prototype.responsive;
    /** @type {?} */
    DataTableComponent.prototype.paginationOptions;
    /** @type {?} */
    DataTableComponent.prototype.labels;
    /**
     * @type {?}
     * @private
     */
    DataTableComponent.prototype._currentRowIndex;
    /**
     * @type {?}
     * @private
     */
    DataTableComponent.prototype._currentRow;
    /** @type {?} */
    DataTableComponent.prototype.perfectScrollbar;
    /**
     * @type {?}
     * @private
     */
    DataTableComponent.prototype.isCheckAll;
    /** @type {?} */
    DataTableComponent.prototype.scorllableBodyHeight;
    /** @type {?} */
    DataTableComponent.prototype.mouseEnterOnPager;
    /** @type {?} */
    DataTableComponent.prototype.mouseLeaveOnPager;
    /** @type {?} */
    DataTableComponent.prototype.mouseWheelOnPager;
    /**
     * @type {?}
     * @private
     */
    DataTableComponent.prototype.ps;
    /** @type {?} */
    DataTableComponent.prototype.trackByRows;
    /**
     * @type {?}
     * @private
     */
    DataTableComponent.prototype.dataService;
    /**
     * @type {?}
     * @private
     */
    DataTableComponent.prototype.idService;
    /**
     * @type {?}
     * @private
     */
    DataTableComponent.prototype.el;
    /** @type {?} */
    DataTableComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    DataTableComponent.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,