/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, NgZone, Renderer2 } from '@angular/core';
import { DataTableComponent } from '../datatable.component';
var DragColumnDirective = /** @class */ (function () {
    function DragColumnDirective(dt, ngzone, el, render) {
        this.dt = dt;
        this.ngzone = ngzone;
        this.el = el;
        this.render = render;
    }
    /**
     * @return {?}
     */
    DragColumnDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        // if (this.isEnable()) {
        //     this.ngzone.runOutsideAngular(() => {
        //         // this.resizer = document.createElement('span');
        //         // this.resizer.className = 'column-resizer';
        //         // this.el.nativeElement.appendChild(this.resizer);
        //         // this.render.addClass(this.el.nativeElement, 'resizable-column');
        //         this.resizer = this.el.nativeElement.querySelector('span.column-resizer');
        //         if (this.resizer) {
        //             this.resizerMouseDownListener = this.onMouseDown.bind(this);
        //             this.resizer.addEventListener('mousedown', this.resizerMouseDownListener);
        //         }
        //     });
        // }
    };
    /**
     * @return {?}
     */
    DragColumnDirective.prototype.isEnable = /**
     * @return {?}
     */
    function () {
        return this.dt.resizableColumns && !this.dt.hasFixed;
    };
    /**
     * @return {?}
     */
    DragColumnDirective.prototype.bindDocumentEvents = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngzone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.documentMouseMoveListener = _this.onMouseMove.bind(_this);
            document.addEventListener('mousemove', _this.documentMouseMoveListener);
            _this.documentMouseUpListener = _this.onMouseUp.bind(_this);
            document.addEventListener('mouseup', _this.documentMouseUpListener);
        }));
    };
    /**
     * @return {?}
     */
    DragColumnDirective.prototype.unbindDocumentEvents = /**
     * @return {?}
     */
    function () {
        if (this.documentMouseMoveListener) {
            document.removeEventListener('mousemove', this.documentMouseMoveListener);
            this.documentMouseMoveListener = null;
        }
        if (this.documentMouseUpListener) {
            document.removeEventListener('mouseup', this.documentMouseUpListener);
            this.documentMouseUpListener = null;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DragColumnDirective.prototype.onMouseDown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.dt.beginDrag(event);
        this.bindDocumentEvents();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DragColumnDirective.prototype.onMouseMove = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.dt.moveDrag(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DragColumnDirective.prototype.onMouseUp = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.dt.stopDrag(event, this.el.nativeElement);
        this.unbindDocumentEvents();
    };
    /**
     * @return {?}
     */
    DragColumnDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        // if (this.resizerMouseDownListener && this.resizer) {
        //     this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);
        // }
        this.unbindDocumentEvents();
    };
    DragColumnDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[drag-column]',
                    exportAs: 'resizeRef'
                },] }
    ];
    /** @nocollapse */
    DragColumnDirective.ctorParameters = function () { return [
        { type: DataTableComponent },
        { type: NgZone },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    return DragColumnDirective;
}());
export { DragColumnDirective };
if (false) {
    /** @type {?} */
    DragColumnDirective.prototype.resizer;
    /** @type {?} */
    DragColumnDirective.prototype.resizerMouseDownListener;
    /** @type {?} */
    DragColumnDirective.prototype.documentMouseMoveListener;
    /** @type {?} */
    DragColumnDirective.prototype.documentMouseUpListener;
    /** @type {?} */
    DragColumnDirective.prototype.dt;
    /** @type {?} */
    DragColumnDirective.prototype.ngzone;
    /** @type {?} */
    DragColumnDirective.prototype.el;
    /** @type {?} */
    DragColumnDirective.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGF0YWJsZS8iLCJzb3VyY2VzIjpbImxpYi91dGlscy9kcmFnLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBNEIsTUFBTSxlQUFlLENBQUM7QUFDbkcsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQ7SUFhSSw2QkFBbUIsRUFBc0IsRUFBUyxNQUFjLEVBQ3JELEVBQWMsRUFBUyxNQUFpQjtRQURoQyxPQUFFLEdBQUYsRUFBRSxDQUFvQjtRQUFTLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDckQsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFTLFdBQU0sR0FBTixNQUFNLENBQVc7SUFFbkQsQ0FBQzs7OztJQUVELDZDQUFlOzs7SUFBZjtRQUNJLHlCQUF5QjtRQUN6Qiw0Q0FBNEM7UUFDNUMsNERBQTREO1FBQzVELHdEQUF3RDtRQUN4RCw4REFBOEQ7UUFDOUQsOEVBQThFO1FBQzlFLHFGQUFxRjtRQUNyRiw4QkFBOEI7UUFDOUIsMkVBQTJFO1FBQzNFLHlGQUF5RjtRQUN6RixZQUFZO1FBQ1osVUFBVTtRQUNWLElBQUk7SUFDUixDQUFDOzs7O0lBRUQsc0NBQVE7OztJQUFSO1FBQ0ksT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLGdCQUFnQixJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUM7SUFDekQsQ0FBQzs7OztJQUVELGdEQUFrQjs7O0lBQWxCO1FBQUEsaUJBUUM7UUFQRyxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQjs7O1FBQUM7WUFDMUIsS0FBSSxDQUFDLHlCQUF5QixHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxDQUFDO1lBQzdELFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsS0FBSSxDQUFDLHlCQUF5QixDQUFDLENBQUM7WUFFdkUsS0FBSSxDQUFDLHVCQUF1QixHQUFHLEtBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxDQUFDO1lBQ3pELFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsS0FBSSxDQUFDLHVCQUF1QixDQUFDLENBQUM7UUFDdkUsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDOzs7O0lBRUQsa0RBQW9COzs7SUFBcEI7UUFDSSxJQUFJLElBQUksQ0FBQyx5QkFBeUIsRUFBRTtZQUNoQyxRQUFRLENBQUMsbUJBQW1CLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1lBQzFFLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxJQUFJLENBQUM7U0FDekM7UUFFRCxJQUFJLElBQUksQ0FBQyx1QkFBdUIsRUFBRTtZQUM5QixRQUFRLENBQUMsbUJBQW1CLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1lBQ3RFLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLENBQUM7U0FDdkM7SUFDTCxDQUFDOzs7OztJQUVELHlDQUFXOzs7O0lBQVgsVUFBWSxLQUFZO1FBQ3BCLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0lBRTlCLENBQUM7Ozs7O0lBRUQseUNBQVc7Ozs7SUFBWCxVQUFZLEtBQVk7UUFDcEIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDNUIsQ0FBQzs7Ozs7SUFFRCx1Q0FBUzs7OztJQUFULFVBQVUsS0FBWTtRQUNsQixJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztJQUNoQyxDQUFDOzs7O0lBRUQseUNBQVc7OztJQUFYO1FBQ0ksdURBQXVEO1FBQ3ZELG9GQUFvRjtRQUNwRixJQUFJO1FBRUosSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7SUFDaEMsQ0FBQzs7Z0JBakZKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsZUFBZTtvQkFDekIsUUFBUSxFQUFFLFdBQVc7aUJBQ3hCOzs7O2dCQUpRLGtCQUFrQjtnQkFESyxNQUFNO2dCQUFsQixVQUFVO2dCQUFVLFNBQVM7O0lBcUZqRCwwQkFBQztDQUFBLEFBbkZELElBbUZDO1NBL0VZLG1CQUFtQjs7O0lBQzVCLHNDQUF5Qjs7SUFFekIsdURBQThCOztJQUU5Qix3REFBK0I7O0lBRS9CLHNEQUE2Qjs7SUFFakIsaUNBQTZCOztJQUFFLHFDQUFxQjs7SUFDNUQsaUNBQXFCOztJQUFFLHFDQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgTmdab25lLCBSZW5kZXJlcjIsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEYXRhVGFibGVDb21wb25lbnQgfSBmcm9tICcuLi9kYXRhdGFibGUuY29tcG9uZW50JztcclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1tkcmFnLWNvbHVtbl0nLFxyXG4gICAgZXhwb3J0QXM6ICdyZXNpemVSZWYnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEcmFnQ29sdW1uRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcclxuICAgIHJlc2l6ZXI6IEhUTUxTcGFuRWxlbWVudDtcclxuXHJcbiAgICByZXNpemVyTW91c2VEb3duTGlzdGVuZXI6IGFueTtcclxuXHJcbiAgICBkb2N1bWVudE1vdXNlTW92ZUxpc3RlbmVyOiBhbnk7XHJcblxyXG4gICAgZG9jdW1lbnRNb3VzZVVwTGlzdGVuZXI6IGFueTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZHQ6IERhdGFUYWJsZUNvbXBvbmVudCwgcHVibGljIG5nem9uZTogTmdab25lLFxyXG4gICAgICAgIHB1YmxpYyBlbDogRWxlbWVudFJlZiwgcHVibGljIHJlbmRlcjogUmVuZGVyZXIyKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgICAgICAvLyBpZiAodGhpcy5pc0VuYWJsZSgpKSB7XHJcbiAgICAgICAgLy8gICAgIHRoaXMubmd6b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuICAgICAgICAvLyAgICAgICAgIC8vIHRoaXMucmVzaXplciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgICAgICAvLyAgICAgICAgIC8vIHRoaXMucmVzaXplci5jbGFzc05hbWUgPSAnY29sdW1uLXJlc2l6ZXInO1xyXG4gICAgICAgIC8vICAgICAgICAgLy8gdGhpcy5lbC5uYXRpdmVFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMucmVzaXplcik7XHJcbiAgICAgICAgLy8gICAgICAgICAvLyB0aGlzLnJlbmRlci5hZGRDbGFzcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdyZXNpemFibGUtY29sdW1uJyk7XHJcbiAgICAgICAgLy8gICAgICAgICB0aGlzLnJlc2l6ZXIgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3Rvcignc3Bhbi5jb2x1bW4tcmVzaXplcicpO1xyXG4gICAgICAgIC8vICAgICAgICAgaWYgKHRoaXMucmVzaXplcikge1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIHRoaXMucmVzaXplck1vdXNlRG93bkxpc3RlbmVyID0gdGhpcy5vbk1vdXNlRG93bi5iaW5kKHRoaXMpO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIHRoaXMucmVzaXplci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLnJlc2l6ZXJNb3VzZURvd25MaXN0ZW5lcik7XHJcbiAgICAgICAgLy8gICAgICAgICB9XHJcbiAgICAgICAgLy8gICAgIH0pO1xyXG4gICAgICAgIC8vIH1cclxuICAgIH1cclxuXHJcbiAgICBpc0VuYWJsZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kdC5yZXNpemFibGVDb2x1bW5zICYmICF0aGlzLmR0Lmhhc0ZpeGVkO1xyXG4gICAgfVxyXG5cclxuICAgIGJpbmREb2N1bWVudEV2ZW50cygpIHtcclxuICAgICAgICB0aGlzLm5nem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRNb3VzZU1vdmVMaXN0ZW5lciA9IHRoaXMub25Nb3VzZU1vdmUuYmluZCh0aGlzKTtcclxuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5kb2N1bWVudE1vdXNlTW92ZUxpc3RlbmVyKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRNb3VzZVVwTGlzdGVuZXIgPSB0aGlzLm9uTW91c2VVcC5iaW5kKHRoaXMpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5kb2N1bWVudE1vdXNlVXBMaXN0ZW5lcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdW5iaW5kRG9jdW1lbnRFdmVudHMoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZG9jdW1lbnRNb3VzZU1vdmVMaXN0ZW5lcikge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLmRvY3VtZW50TW91c2VNb3ZlTGlzdGVuZXIpO1xyXG4gICAgICAgICAgICB0aGlzLmRvY3VtZW50TW91c2VNb3ZlTGlzdGVuZXIgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZG9jdW1lbnRNb3VzZVVwTGlzdGVuZXIpIHtcclxuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuZG9jdW1lbnRNb3VzZVVwTGlzdGVuZXIpO1xyXG4gICAgICAgICAgICB0aGlzLmRvY3VtZW50TW91c2VVcExpc3RlbmVyID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb25Nb3VzZURvd24oZXZlbnQ6IEV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5kdC5iZWdpbkRyYWcoZXZlbnQpO1xyXG4gICAgICAgIHRoaXMuYmluZERvY3VtZW50RXZlbnRzKCk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIG9uTW91c2VNb3ZlKGV2ZW50OiBFdmVudCkge1xyXG4gICAgICAgIHRoaXMuZHQubW92ZURyYWcoZXZlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uTW91c2VVcChldmVudDogRXZlbnQpIHtcclxuICAgICAgICB0aGlzLmR0LnN0b3BEcmFnKGV2ZW50LCB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMudW5iaW5kRG9jdW1lbnRFdmVudHMoKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uRGVzdHJveSgpIHtcclxuICAgICAgICAvLyBpZiAodGhpcy5yZXNpemVyTW91c2VEb3duTGlzdGVuZXIgJiYgdGhpcy5yZXNpemVyKSB7XHJcbiAgICAgICAgLy8gICAgIHRoaXMucmVzaXplci5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLnJlc2l6ZXJNb3VzZURvd25MaXN0ZW5lcik7XHJcbiAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICB0aGlzLnVuYmluZERvY3VtZW50RXZlbnRzKCk7XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==