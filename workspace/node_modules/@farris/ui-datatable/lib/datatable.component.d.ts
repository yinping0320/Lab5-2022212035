import { InputGroupComponent } from '@farris/ui-input-group';
import { ChangeDetectorRef } from '@angular/core';
import { OnInit, ElementRef, OnChanges, SimpleChanges, TemplateRef, QueryList, AfterContentInit, AfterViewInit, EventEmitter, OnDestroy, NgZone } from '@angular/core';
import { Subscription, Observable } from 'rxjs';
import { PerfectScrollbarComponent } from '@farris/ui-perfect-scrollbar';
import { PaginationInstance, PaginationControlsComponent } from '@farris/ui-pagination';
import { IdService } from '@farris/ui-common';
import { DataColumn } from '@farris/ui-common/column';
import { ColumnDirective } from './datatable-column.component';
import { DataTableService } from './datatable.service';
import { DataTableHeaderComponent } from './table/datatable-header.component';
export declare class DataTableComponent implements OnInit, OnChanges, OnDestroy, AfterContentInit, AfterViewInit {
    private dataService;
    private idService;
    private el;
    cd: ChangeDetectorRef;
    private ngZone;
    searchButtonText: string;
    keydownEnterEdit: boolean;
    id: string;
    size: string;
    allColumnsTitle: string;
    width: any;
    height: any;
    /** 是否支持任意字段搜索 */
    searchAnyField: boolean;
    tableHeight: number;
    fill: boolean;
    pagination: boolean;
    pagerOnServer: boolean;
    pageSize: number;
    pageIndex: number;
    showPageInfo: boolean;
    showPageNumber: boolean;
    showPageList: boolean;
    pagerViewMode: 'simple' | 'default';
    /** 分页条为简单模式时，分页条左侧区域模板 */
    pagerExtendTemplate: TemplateRef<any>;
    /** 显示表头 */
    showHeader: boolean;
    private _pageList;
    pageList: number[];
    total: number;
    columns: DataColumn[];
    searchFields: {
        label: string;
        value: string;
    }[];
    showFilterBar: boolean;
    /** 启用虚拟渲染 */
    virtualized: boolean;
    autoFitColumns: boolean;
    _data: any[];
    data: Array<any>;
    copyData: any;
    remote: string;
    /** 启用远端排序 */
    remoteSort: boolean;
    /** 排序字段 */
    sortName: string;
    /** 排序方式 asc | desc */
    sortOrder: string;
    /** 允许多列排序 */
    multiSort: boolean;
    beforeSortColumn: (field: string, order: string) => Observable<boolean>;
    singleSelect: boolean;
    idField: string;
    hover: boolean;
    striped: boolean;
    bordered: boolean;
    rowClassName: (row: any, index: number) => string;
    cellClassName: (value: any, col: any) => string;
    rowStyler: (args: any) => any;
    cellStyler: (val: any) => any;
    selections: any;
    scorllableBody: ElementRef;
    tableHeader: ElementRef;
    tablePager: ElementRef;
    dtHeader: DataTableHeaderComponent;
    dtBody: any;
    dtLeftBody: any;
    dtRightBody: any;
    dtLeftFixed: ElementRef;
    dtRightFixed: ElementRef;
    pager: PaginationControlsComponent;
    inputGroup: InputGroupComponent;
    pgScrollbar: ElementRef;
    pageChanged: EventEmitter<{}>;
    pageSizeChanged: EventEmitter<{}>;
    search: EventEmitter<{
        field: string;
        value: string;
    }>;
    columnSorted: EventEmitter<any>;
    rowDblClick: EventEmitter<any>;
    selectedRow: EventEmitter<any>;
    selectRows: EventEmitter<any>;
    unSelectRow: EventEmitter<any>;
    cellClick: EventEmitter<any>;
    clearSearchValue: EventEmitter<{}>;
    checkAll: EventEmitter<any>;
    searchValueChange: EventEmitter<any>;
    sortChange: EventEmitter<{}>;
    columnsRef: QueryList<ColumnDirective>;
    footer: TemplateRef<any>;
    dragLine: ElementRef;
    resizableColumns: boolean;
    /** 针对同一条记录，单选时，多次单击后不取消选中。 */
    keepSelect: boolean;
    hasRowTepml: boolean;
    datatableContainer: HTMLDivElement;
    dragLineX: number;
    moveable: boolean;
    currentColumn: any;
    hasFixed: boolean;
    fixedLeftWidth: string;
    fixedRightWidth: string;
    searchData: {
        field: string;
        value: string;
    };
    subscription: Subscription[];
    headerTr: any;
    leftFixedHeaderTr: any;
    rightFixedHeaderTr: any;
    filter: string;
    maxSize: number;
    directionLinks: boolean;
    autoHide: boolean;
    responsive: boolean;
    paginationOptions: PaginationInstance;
    labels: any;
    private _currentRowIndex;
    readonly currentRowIndex: number;
    private _currentRow;
    readonly currentRow: any;
    perfectScrollbar: PerfectScrollbarComponent;
    private isCheckAll;
    scorllableBodyHeight: number;
    mouseEnterOnPager: any;
    mouseLeaveOnPager: any;
    mouseWheelOnPager: any;
    constructor(dataService: DataTableService, idService: IdService, el: ElementRef, cd: ChangeDetectorRef, ngZone: NgZone);
    private ps;
    ngOnInit(): void;
    private setBodyHeight;
    onClearSearchValue(): void;
    trackByRows: (index: number, row: any) => any;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    updateCheckboxState(rows: any[]): void;
    /**
     * 获取表格容器的位置  距离左边视口和上边视口的距离  如果页面有滚动条  需要加上滚动条滚动的数值
     */
    getContainerOffset(): {
        left: number;
        top: number;
        right: number;
        bottom: number;
    };
    /**
     *  鼠标按下  开始记录拖拽线的位置  拖拽线到达当前鼠标位置
     * @param e 鼠标对象
     */
    beginDrag(e: any): void;
    /**
     * 鼠标移动 移动拖拽线位置变动
     * @param e 鼠标对象
     */
    moveDrag(e: any): void;
    /**
     * 鼠标抬起 重新计算单元格宽度
     * 鼠标对象
     */
    stopDrag(e: any, column: any): void;
    resizeColumn(e: any, column: any): void;
    resizeColumn2(e: any, column: any): void;
    isCheckBox(elements: any, cName: any): boolean;
    resizeColGroup(table: any, resizeColumnIndex: any, newColumnWidth: any, othersColumn: any): void;
    onScrollX(e: any): void;
    /**
     * 滚动条纵向滚动
     */
    onScrollY(e: any): void;
    onPageChange(page: {
        pageIndex: number;
        pageSize: number;
    }): void;
    onPageSizeChange(pageSize: number): void;
    onSearch($event: any): void;
    onCheckAll(state: boolean): void;
    onSelectedRow(e: any): void;
    resize(size: {
        width: number;
        height: number;
    }): void;
    loadData(e: {
        pageSize: number;
        total: number;
        data: any;
        pageIndex: number;
    }): void;
    onCellClick(e: any): void;
    addRows(dataItem: any): void;
    removeRows(): void;
    checkRow(rid: any, emit?: boolean): void;
    unCheckRow(rid: any, emit?: boolean): void;
    unCheckRows(ids: any): void;
    clearSelections(): void;
    onKeydownEvent($event: any): void;
}
