import { cloneDeep } from 'lodash-es';
import { __assign } from 'tslib';
import { Subject, of } from 'rxjs';
import { LocaleService } from '@farris/ui-locale';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { PerfectScrollbarModule } from '@farris/ui-perfect-scrollbar';
import { PaginationModule } from '@farris/ui-pagination';
import { IdService, CommonUtils, FarrisCommonModule } from '@farris/ui-common';
import { ColumnFormatService, DataColumnModule } from '@farris/ui-common/column';
import { InputGroupModule } from '@farris/ui-input-group';
import { FarrisFormsModule } from '@farris/ui-forms';
import { Injectable, Directive, Input, ElementRef, HostBinding, ChangeDetectorRef, Component, ViewChild, ContentChild, TemplateRef, ContentChildren, Output, EventEmitter, ViewEncapsulation, NgZone, Renderer2, Optional, HostListener, Injector, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 转换列的顺序
 * \@param columns-所有列数据
 * \@param direction-left|right 左固定或者右固定
 * @type {?}
 */
var convertColumns = (/**
 * @param {?} columns
 * @param {?} direction
 * @return {?}
 */
function (columns, direction) {
    /** @type {?} */
    var tempFixedColumns = [];
    /** @type {?} */
    var tempNotFixedColumns = [];
    columns.forEach((/**
     * @param {?} ele
     * @return {?}
     */
    function (ele) {
        if (ele.fixed && (ele.fixed === direction || ele.fixed.type === direction)) {
            tempFixedColumns.push(ele);
        }
        else {
            tempNotFixedColumns.push(ele);
        }
    }));
    return tempFixedColumns.concat(tempNotFixedColumns);
});
/**
 *  对象或者数组深拷贝
 * \@param data 源数据
 * @type {?}
 */
var deepCopy = (/**
 * @param {?} data
 * @return {?}
 */
function (data) {
    return cloneDeep(data);
});
/** @type {?} */
var toUpper = (/**
 * @param {?} source
 * @return {?}
 */
function (source) {
    /** @type {?} */
    var jsonObj = JSON.parse(source.replace(/\\/g, ''));
    return deepCopy(jsonObj);
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DataTableService = /** @class */ (function () {
    function DataTableService() {
        this.loadSuccess = new Subject();
        /**
         * 选中行事件
         */
        this.selectedRow = new Subject();
        this.unSelectedRow = new Subject();
        this.selectedAll = new Subject();
        this.dblClickRow = new Subject();
        this.updateCheckAllStatus = new Subject();
    }
    DataTableService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DataTableService.ctorParameters = function () { return []; };
    return DataTableService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ColumnDirective = /** @class */ (function () {
    function ColumnDirective(el) {
        this.el = el;
        this.align = 'left';
        this.multipleFilter = true;
        this.fixedClass = this.fixed === 'left';
    }
    /**
     * @return {?}
     */
    ColumnDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    ColumnDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'data-column'
                },] }
    ];
    /** @nocollapse */
    ColumnDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    ColumnDirective.propDecorators = {
        edit: [{ type: Input }],
        title: [{ type: Input }],
        field: [{ type: Input }],
        width: [{ type: Input }],
        align: [{ type: Input }],
        fixed: [{ type: Input }],
        className: [{ type: Input }],
        media: [{ type: Input }],
        sortable: [{ type: Input }],
        multipleFilter: [{ type: Input }],
        filter: [{ type: Input }],
        fixedClass: [{ type: HostBinding, args: ['class.fixed',] }]
    };
    return ColumnDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DataTableComponent = /** @class */ (function () {
    function DataTableComponent(dataService, idService, el, cd, ngZone) {
        var _this = this;
        this.dataService = dataService;
        this.idService = idService;
        this.el = el;
        this.cd = cd;
        this.ngZone = ngZone;
        this.searchButtonText = '<i class="f-icon f-icon-search"></i>';
        this.keydownEnterEdit = false;
        this.allColumnsTitle = '所有列';
        /**
         * 是否支持任意字段搜索
         */
        this.searchAnyField = true;
        // 数据表高度
        // 是否填充
        this.fill = false;
        // 默认分页
        this.pagination = true;
        this.pagerOnServer = true;
        this.pageSize = 10;
        this.pageIndex = 1;
        this.showPageInfo = true;
        this.showPageNumber = true;
        this.showPageList = true;
        this.pagerViewMode = 'default';
        /**
         * 显示表头
         */
        this.showHeader = true;
        this._pageList = [10, 20, 30, 50, 100];
        this.total = 0;
        // 可筛选
        this.showFilterBar = false;
        /**
         * 启用虚拟渲染
         */
        this.virtualized = false;
        this.autoFitColumns = false;
        // table  数据
        this._data = [];
        this.remote = 'client';
        /**
         * 启用远端排序
         */
        this.remoteSort = true;
        /**
         * 允许多列排序
         */
        this.multiSort = false;
        // 多选  单选
        this.singleSelect = true;
        this.idField = 'id';
        // 显示鼠标悬停高亮
        this.hover = true;
        // 分页事件
        this.pageChanged = new EventEmitter();
        this.pageSizeChanged = new EventEmitter();
        this.search = new EventEmitter();
        this.columnSorted = new EventEmitter();
        this.rowDblClick = new EventEmitter();
        this.selectedRow = new EventEmitter();
        // 兼容
        this.selectRows = new EventEmitter();
        this.unSelectRow = new EventEmitter();
        this.cellClick = new EventEmitter();
        this.clearSearchValue = new EventEmitter();
        this.checkAll = new EventEmitter();
        this.searchValueChange = new EventEmitter();
        this.sortChange = new EventEmitter();
        // 是否可拖拽  默认可以
        this.resizableColumns = true;
        /**
         * 针对同一条记录，单选时，多次单击后不取消选中。
         */
        this.keepSelect = true;
        // 是否有行模板
        this.hasRowTepml = false;
        // 设置拖拽停止器
        this.moveable = false;
        this.searchData = { field: '*', value: '' };
        // 事件订阅存储  便于销毁
        this.subscription = [];
        // 原数据
        this.filter = '';
        this.maxSize = 7;
        this.directionLinks = true;
        this.autoHide = false;
        this.responsive = true;
        this.paginationOptions = {
            id: 'Farris-DataTable-Pagination',
            itemsPerPage: this.pageSize,
            currentPage: this.pageIndex,
            pageList: this.pageList,
            totalItems: this.total,
            remote: this.pagerOnServer
        };
        this.labels = {
            previousLabel: ' ',
            nextLabel: ' ',
            screenReaderPaginationLabel: 'Pagination',
            screenReaderPageLabel: 'page',
            screenReaderCurrentLabel: "You're on page"
        };
        this._currentRowIndex = -1;
        this._currentRow = undefined;
        this.isCheckAll = (/**
         * @return {?}
         */
        function () {
            if (!_this.selections || !_this.selections.length) {
                return false;
            }
            if (!_this.data || !_this.data.length) {
                return false;
            }
            /** @type {?} */
            var total = 0;
            _this.selections.forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                if (_this.data.find((/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) { return d[_this.idField] === n[_this.idField]; }))) {
                    total += 1;
                }
            }));
            return _this.data.length === total;
        });
        this.mouseEnterOnPager = null;
        this.mouseLeaveOnPager = null;
        this.mouseWheelOnPager = null;
        this.trackByRows = (/**
         * @param {?} index
         * @param {?} row
         * @return {?}
         */
        function (index, row) {
            return row ? row[_this.idField] : index;
        });
        this.dataService.selectedRow.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (_this.singleSelect) {
                _this._currentRowIndex = e.rowIndex;
                _this._currentRow = e.rowData;
            }
            else {
                if (_this.selections) {
                    _this.dtHeader.isCheckAll = _this.isCheckAll();
                }
            }
        }));
        this.dataService.unSelectedRow.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (_this.singleSelect) {
                _this._currentRow = undefined;
                _this._currentRowIndex = -1;
            }
            else {
                _this.dtHeader.isCheckAll = false;
            }
        }));
    }
    Object.defineProperty(DataTableComponent.prototype, "pageList", {
        get: /**
         * @return {?}
         */
        function () {
            return this._pageList;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._pageList = val;
            if (this.pager) {
                this.pager.setPageList(val);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTableComponent.prototype, "data", {
        get: /**
         * @return {?}
         */
        function () {
            return this._data;
        },
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            this._data = data || [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTableComponent.prototype, "selections", {
        get: /**
         * @return {?}
         */
        function () {
            return this.dtBody.selections;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this.dtBody.selections = v ? v : {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTableComponent.prototype, "currentRowIndex", {
        get: /**
         * @return {?}
         */
        function () {
            return this._currentRowIndex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTableComponent.prototype, "currentRow", {
        get: /**
         * @return {?}
         */
        function () {
            return this._currentRow;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DataTableComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.setBodyHeight(true);
            _this.ps = _this.perfectScrollbar.directiveRef.ps();
        }));
        if (!this.id) {
            this.id = "datatable_" + this.idService.generate();
        }
        this.paginationOptions.id = this.paginationOptions.id + this.id;
        this.paginationOptions.remote = this.pagerOnServer;
        this.copyData = deepCopy(this.data);
        if (!this.beforeSortColumn) {
            this.beforeSortColumn = (/**
             * @return {?}
             */
            function () { return of(true); });
        }
    };
    /**
     * @private
     * @param {?=} refresh
     * @return {?}
     */
    DataTableComponent.prototype.setBodyHeight = /**
     * @private
     * @param {?=} refresh
     * @return {?}
     */
    function (refresh) {
        if (refresh === void 0) { refresh = true; }
        /** @type {?} */
        var _tableheight = this.height;
        if (this.showFilterBar) {
            _tableheight = this.height - 46;
        }
        this.tableHeight = _tableheight;
        /** @type {?} */
        var _scorllableBodyHeight = 0;
        if (this.showHeader && this.tableHeader) {
            // _scorllableBodyHeight = this.tableHeight - this.tableHeader.nativeElement.clientHeight;
            _scorllableBodyHeight = this.tableHeight - this.tableHeader.nativeElement.querySelector('table').clientHeight;
        }
        if (this.pagination) {
            _scorllableBodyHeight = _scorllableBodyHeight - 50;
        }
        this.scorllableBodyHeight = _scorllableBodyHeight;
        if (refresh && this.cd && !this.cd['destroyed']) {
            this.cd.detectChanges();
        }
    };
    /**
     * @return {?}
     */
    DataTableComponent.prototype.onClearSearchValue = /**
     * @return {?}
     */
    function () {
        this.searchData.value = '';
        this.cd.detectChanges();
        this.clearSearchValue.emit();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    DataTableComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.height && !changes.height.isFirstChange()) {
            this.setBodyHeight();
        }
        if (changes.total && !changes.total.isFirstChange()) {
            this.paginationOptions.totalItems = changes.total.currentValue;
        }
        if (changes.pageSize) {
            this.paginationOptions.itemsPerPage = changes.pageSize.currentValue;
        }
        if (changes.pagerOnServer && !changes.pagerOnServer.isFirstChange()) {
            this.paginationOptions.remote = changes.pagerOnServer.currentValue;
        }
        if (changes.pageIndex && !changes.pageIndex.isFirstChange()) {
            this.paginationOptions.currentPage = changes.pageIndex.currentValue;
        }
        if (changes.data && !changes.data.isFirstChange()) {
            /** @type {?} */
            var rows = changes.data.currentValue;
            this.updateCheckboxState(rows);
            this.paginationOptions = __assign({}, this.paginationOptions);
            this.dataService.loadSuccess.next(changes.data.currentValue);
        }
    };
    /**
     * @return {?}
     */
    DataTableComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // 支持列组件写入
        if (!this.columns) {
            if (this.columnsRef && this.columnsRef.length) {
                this.columns = this.columnsRef.map((/**
                 * @param {?} col
                 * @return {?}
                 */
                function (col) {
                    return {
                        width: col.width,
                        title: col.title,
                        field: col.field,
                        align: col.align,
                        fixed: col.fixed,
                        className: col.className,
                        multipleFilter: col.multipleFilter,
                        filter: col.filter,
                        media: col.media,
                        sortable: col.sortable,
                        edit: col.edit
                    };
                }));
            }
        }
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            setTimeout((/**
             * @return {?}
             */
            function () {
                if (_this.tablePager && _this.pagerViewMode !== 'simple') {
                    _this.tablePager.nativeElement.addEventListener('mouseenter', _this.mouseEnterOnPager = (/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) {
                        /** @type {?} */
                        var overflowX = 'auto';
                        if (e.target.className.indexOf('pg-pagelist') > -1 || e.target.closest('.pg-pagelist')) {
                            overflowX = "unset";
                            _this.pgScrollbar.nativeElement.scrollLeft = 0;
                        }
                        _this.pgScrollbar.nativeElement.style.overflowX = overflowX;
                    }), true);
                    _this.tablePager.nativeElement.addEventListener('mouseleave', _this.mouseLeaveOnPager = (/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) {
                        _this.pgScrollbar.nativeElement.style.overflowX = "hidden";
                    }));
                    _this.tablePager.nativeElement.addEventListener('wheel', _this.mouseWheelOnPager = (/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) {
                        /** @type {?} */
                        var box = _this.tablePager.nativeElement;
                        /** @type {?} */
                        var sw = _this.pgScrollbar.nativeElement.scrollWidth;
                        /** @type {?} */
                        var ow = box.offsetWidth;
                        if (sw > ow) {
                            /** @type {?} */
                            var right = sw - ow;
                            /** @type {?} */
                            var sl = Math.abs(_this.pgScrollbar.nativeElement.scrollLeft);
                            if (sl < right && e.deltaY > 0) {
                                e.preventDefault();
                                _this.pgScrollbar.nativeElement.scrollLeft = sl + 50;
                            }
                            if (sl > 0 && e.deltaY < 0) {
                                e.preventDefault();
                                _this.pgScrollbar.nativeElement.scrollLeft = sl - 50;
                            }
                        }
                    }));
                }
            }));
        }));
    };
    /**
     * @return {?}
     */
    DataTableComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscription.forEach((/**
         * @param {?} sub
         * @return {?}
         */
        function (sub) {
            sub.unsubscribe();
        }));
        this.subscription = [];
        this.pager = null;
        if (this.tablePager && this.tablePager.nativeElement) {
            this.tablePager.nativeElement.removeEventListener('mouseenter', this.mouseEnterOnPager, true);
            this.tablePager.nativeElement.removeEventListener('mouseleave', this.mouseLeaveOnPager);
            this.tablePager.nativeElement.removeEventListener('wheel', this.mouseWheelOnPager);
        }
    };
    /**
     * @return {?}
     */
    DataTableComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        // 获取表格容器  即表格
        this.datatableContainer = this.el.nativeElement.querySelector('.farris-datatable');
        // this.headerTr = this.tableHeader.nativeElement.querySelectorAll('tr');
        if (this.pagerViewMode == 'simple' && this.tablePager) {
            this.tablePager.nativeElement.style.minHeight = '44px';
            this.tablePager.nativeElement.style.height = '44px';
        }
    };
    /**
     * @param {?} rows
     * @return {?}
     */
    DataTableComponent.prototype.updateCheckboxState = /**
     * @param {?} rows
     * @return {?}
     */
    function (rows) {
        var _this = this;
        /** @type {?} */
        var updateCheckAllStatus = (/**
         * @param {?} f
         * @return {?}
         */
        function (f) {
            if (_this.showHeader && _this.dtHeader) {
                _this.dtHeader.isCheckAll = f;
            }
        });
        if (rows && rows.length) {
            if (this.selections) {
                /** @type {?} */
                var keys = Object.keys(this.dtBody._selections);
                if (keys.length) {
                    /** @type {?} */
                    var count_1 = 0;
                    /** @type {?} */
                    var ids_1 = rows.map((/**
                     * @param {?} row
                     * @return {?}
                     */
                    function (row) {
                        return row[_this.idField].toString();
                    }));
                    keys.forEach((/**
                     * @param {?} id
                     * @return {?}
                     */
                    function (id) {
                        if (ids_1.indexOf(id) > -1) {
                            count_1++;
                        }
                    }));
                    updateCheckAllStatus(ids_1.length === count_1);
                }
                else {
                    updateCheckAllStatus(false);
                }
            }
            else {
                updateCheckAllStatus(false);
            }
        }
        else {
            updateCheckAllStatus(false);
        }
    };
    /**
     * 获取表格容器的位置  距离左边视口和上边视口的距离  如果页面有滚动条  需要加上滚动条滚动的数值
     */
    /**
     * 获取表格容器的位置  距离左边视口和上边视口的距离  如果页面有滚动条  需要加上滚动条滚动的数值
     * @return {?}
     */
    DataTableComponent.prototype.getContainerOffset = /**
     * 获取表格容器的位置  距离左边视口和上边视口的距离  如果页面有滚动条  需要加上滚动条滚动的数值
     * @return {?}
     */
    function () {
        /** @type {?} */
        var rect = this.datatableContainer.getBoundingClientRect();
        return {
            left: rect.left + document.body.scrollLeft,
            top: rect.top + document.body.scrollTop,
            right: rect.right,
            bottom: rect.bottom,
        };
    };
    /**
     *  鼠标按下  开始记录拖拽线的位置  拖拽线到达当前鼠标位置
     * @param e 鼠标对象
     */
    /**
     *  鼠标按下  开始记录拖拽线的位置  拖拽线到达当前鼠标位置
     * @param {?} e 鼠标对象
     * @return {?}
     */
    DataTableComponent.prototype.beginDrag = /**
     *  鼠标按下  开始记录拖拽线的位置  拖拽线到达当前鼠标位置
     * @param {?} e 鼠标对象
     * @return {?}
     */
    function (e) {
        this.dragLineX = e.pageX;
        event.preventDefault();
    };
    /**
     * 鼠标移动 移动拖拽线位置变动
     * @param e 鼠标对象
     */
    /**
     * 鼠标移动 移动拖拽线位置变动
     * @param {?} e 鼠标对象
     * @return {?}
     */
    DataTableComponent.prototype.moveDrag = /**
     * 鼠标移动 移动拖拽线位置变动
     * @param {?} e 鼠标对象
     * @return {?}
     */
    function (e) {
        // 获取表格的左边距离
        /** @type {?} */
        var containerLeft = this.getContainerOffset().left;
        // 设置拖拽线的高度  即获取表头+表内容+表尾的高度  此表格结构包含了分页  因此要去掉分页的高度
        if (this.tablePager) {
            this.dragLine.nativeElement.style.height = this.datatableContainer.offsetHeight -
                this.tablePager.nativeElement.offsetHeight + 'px';
        }
        else {
            // const headerHeight = this.el.nativeElement.querySelector('.farris-table-header');
            // const bodyHeight = this.el.nativeElement.querySelector('.ps-content');
            this.dragLine.nativeElement.style.height = this.datatableContainer.offsetHeight + 'px';
        }
        // 设置拖拽线的高度 拖拽线相对于表格relative定位是absolute，因此是0
        this.dragLine.nativeElement.style.top = 0 + 'px';
        // 鼠标移动时，拖拽线相对于表格的位置
        this.dragLine.nativeElement.style.left = (e.pageX - containerLeft) + 'px';
        // 鼠标移动  设置拖拽线总是可见
        this.dragLine.nativeElement.style.display = 'block';
    };
    // 重新计算表格宽度
    /**
     * 鼠标抬起 重新计算单元格宽度
     * 鼠标对象
     */
    // 重新计算表格宽度
    /**
     * 鼠标抬起 重新计算单元格宽度
     * 鼠标对象
     * @param {?} e
     * @param {?} column
     * @return {?}
     */
    DataTableComponent.prototype.stopDrag = 
    // 重新计算表格宽度
    /**
     * 鼠标抬起 重新计算单元格宽度
     * 鼠标对象
     * @param {?} e
     * @param {?} column
     * @return {?}
     */
    function (e, column) {
        if (this.autoFitColumns) {
            this.resizeColumn2(e, column);
            if (this.ps) {
                this.ps.update();
            }
            return;
        }
        this.resizeColumn(e, column);
    };
    /**
     * @param {?} e
     * @param {?} column
     * @return {?}
     */
    DataTableComponent.prototype.resizeColumn = /**
     * @param {?} e
     * @param {?} column
     * @return {?}
     */
    function (e, column) {
        if (this.isCheckBox(column, 'dt-checkbox-cell')) {
            this.dragLine.nativeElement.style.display = 'none';
            return;
        }
        // 偏移量
        /** @type {?} */
        var delta = e.pageX - this.dragLineX;
        // 拖拽前列宽
        /** @type {?} */
        var columnWidth = column.offsetWidth;
        // 拖拽后列宽
        /** @type {?} */
        var newColumnWidth = columnWidth + delta;
        // 最小宽度
        /** @type {?} */
        var minWidth = column.style.minWidth || 30;
        // 新宽度大于或等于最小宽度时
        newColumnWidth = newColumnWidth > minWidth ? newColumnWidth : minWidth;
        // 重新设置宽度
        /** @type {?} */
        var colIndex = -1;
        /** @type {?} */
        var othersCol = [];
        /** @type {?} */
        var cols = this.tableHeader.nativeElement.querySelectorAll('th');
        // 父节点宽度
        /** @type {?} */
        var parentWidth = column.parentElement.offsetWidth;
        // 判断是不是有checkbox
        /** @type {?} */
        var firstElement = column.parentElement.firstElementChild;
        /** @type {?} */
        var checkBoxWidth = this.isCheckBox(firstElement, 'dt-checkbox-cell') ? firstElement.offsetWidth : 0;
        // 其他列宽度
        /** @type {?} */
        var othersWidth = parentWidth - columnWidth - checkBoxWidth;
        /** @type {?} */
        var newOthersWidth = parentWidth - newColumnWidth - checkBoxWidth;
        for (var i = 0; i < cols.length; i++) {
            if (cols[i] === column) {
                colIndex = i;
            }
            else {
                if (this.isCheckBox(cols[i], 'dt-checkbox-cell')) {
                    continue;
                }
                /** @type {?} */
                var rate = cols[i].offsetWidth / othersWidth;
                /** @type {?} */
                var colWidth = newOthersWidth * rate;
                if (newOthersWidth * rate > 15) {
                    colWidth = newOthersWidth * rate;
                }
                else {
                    colWidth = 15;
                    othersWidth = othersWidth - colWidth;
                    newOthersWidth = newOthersWidth - colWidth;
                    newColumnWidth = newColumnWidth - 15 + newOthersWidth * rate;
                }
                othersCol.push({ colIndex: i, colWidth: colWidth });
            }
        }
        this.resizeColGroup(this.dtHeader.el.nativeElement, colIndex, newColumnWidth, othersCol);
        this.resizeColGroup(this.dtBody.el.nativeElement, colIndex, newColumnWidth, othersCol);
        // 计算宽度完毕  设置拖拽线隐藏
        this.dragLine.nativeElement.style.display = 'none';
    };
    /**
     * @param {?} e
     * @param {?} column
     * @return {?}
     */
    DataTableComponent.prototype.resizeColumn2 = /**
     * @param {?} e
     * @param {?} column
     * @return {?}
     */
    function (e, column) {
        if (this.isCheckBox(column, 'dt-checkbox-cell')) {
            this.dragLine.nativeElement.style.display = 'none';
            return;
        }
        // 偏移量
        /** @type {?} */
        var delta = e.pageX - this.dragLineX;
        // 拖拽前列宽
        /** @type {?} */
        var columnWidth = column.offsetWidth;
        // 拖拽后列宽
        /** @type {?} */
        var newColumnWidth = columnWidth + delta;
        // 最小宽度
        /** @type {?} */
        var minWidth = column.style.minWidth || 30;
        // 新宽度大于或等于最小宽度时
        newColumnWidth = newColumnWidth > minWidth ? newColumnWidth : minWidth;
        // 重新设置宽度
        /** @type {?} */
        var colIndex = -1;
        /** @type {?} */
        var cols = this.tableHeader.nativeElement.querySelectorAll('th');
        // 父节点宽度
        /** @type {?} */
        var parentWidth = column.parentElement.offsetWidth;
        // 判断是不是有checkbox
        /** @type {?} */
        var firstElement = column.parentElement.firstElementChild;
        /** @type {?} */
        var checkBoxWidth = this.isCheckBox(firstElement, 'dt-checkbox-cell') ? firstElement.offsetWidth : 0;
        // 其他列宽度
        /** @type {?} */
        var othersWidth = parentWidth - columnWidth - checkBoxWidth;
        /** @type {?} */
        var newOthersWidth = parentWidth - newColumnWidth - checkBoxWidth;
        for (var i = 0; i < cols.length; i++) {
            if (cols[i] === column) {
                colIndex = i;
            }
            else {
                if (this.isCheckBox(cols[i], 'dt-checkbox-cell')) {
                    continue;
                }
                /** @type {?} */
                var rate = cols[i].offsetWidth / othersWidth;
                /** @type {?} */
                var colWidth = newOthersWidth * rate;
                if (newOthersWidth * rate > 15) {
                    colWidth = newOthersWidth * rate;
                }
                else {
                    colWidth = 15;
                    othersWidth = othersWidth - colWidth;
                    newOthersWidth = newOthersWidth - colWidth;
                    newColumnWidth = newColumnWidth - 15 + newOthersWidth * rate;
                }
            }
        }
        this.resizeColGroup(this.dtHeader.el.nativeElement, colIndex, newColumnWidth, []);
        this.resizeColGroup(this.dtBody.el.nativeElement, colIndex, newColumnWidth, []);
        /** @type {?} */
        var field = column.getAttribute('field');
        if (field) {
            /** @type {?} */
            var col = this.columns.find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.field === field; }));
            if (col) {
                col.width = newColumnWidth;
            }
        }
        // 计算宽度完毕  设置拖拽线隐藏
        this.dragLine.nativeElement.style.display = 'none';
    };
    /**
     * @param {?} elements
     * @param {?} cName
     * @return {?}
     */
    DataTableComponent.prototype.isCheckBox = /**
     * @param {?} elements
     * @param {?} cName
     * @return {?}
     */
    function (elements, cName) {
        return !!elements.className.match(new RegExp('(\\s|^)' + cName + '(\\s|$)'));
    };
    /**
     * @param {?} table
     * @param {?} resizeColumnIndex
     * @param {?} newColumnWidth
     * @param {?} othersColumn
     * @return {?}
     */
    DataTableComponent.prototype.resizeColGroup = /**
     * @param {?} table
     * @param {?} resizeColumnIndex
     * @param {?} newColumnWidth
     * @param {?} othersColumn
     * @return {?}
     */
    function (table, resizeColumnIndex, newColumnWidth, othersColumn) {
        if (table) {
            // 此处要视不同的表格结构来确定 本组件中  header和body结构相同
            /** @type {?} */
            var colGroup = table.childNodes[0].children[0].nodeName === 'COLGROUP' ?
                table.childNodes[0].children[0] : null;
            if (colGroup) {
                /** @type {?} */
                var col = colGroup.children[resizeColumnIndex];
                col.style.width = newColumnWidth + 'px';
                for (var i = 0; i < othersColumn.length; i++) {
                    /** @type {?} */
                    var otherCol = colGroup.children[othersColumn[i].colIndex];
                    if (otherCol && othersColumn[i].colWidth) {
                        otherCol.style.width = othersColumn[i].colWidth + 'px';
                    }
                }
            }
            else {
                throw new Error('Scrollable tables require a colgroup to support resizable columns');
            }
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    DataTableComponent.prototype.onScrollX = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        // 横向滚动 非固定表头滚动
        /** @type {?} */
        var x = e.srcElement.scrollLeft;
        this.tableHeader.nativeElement.scrollTo(x, 0);
    };
    /**
     * 滚动条纵向滚动
     */
    /**
     * 滚动条纵向滚动
     * @param {?} e
     * @return {?}
     */
    DataTableComponent.prototype.onScrollY = /**
     * 滚动条纵向滚动
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (!this.hasFixed) {
            return;
        }
        /** @type {?} */
        var y = e.srcElement.scrollTop;
        this.dtLeftFixed.nativeElement.style.top = -y + 'px';
        this.dtRightFixed.nativeElement.style.top = -y + 'px';
    };
    /**
     * @param {?} page
     * @return {?}
     */
    DataTableComponent.prototype.onPageChange = /**
     * @param {?} page
     * @return {?}
     */
    function (page) {
        if (this.pageIndex !== page.pageIndex) {
            this.pageIndex = page.pageIndex;
            this.paginationOptions.currentPage = page.pageIndex;
            this.pageChanged.emit({ pageInfo: page, search: this.searchData, sortName: this.sortName, sortOrder: this.sortOrder });
        }
    };
    /**
     * @param {?} pageSize
     * @return {?}
     */
    DataTableComponent.prototype.onPageSizeChange = /**
     * @param {?} pageSize
     * @return {?}
     */
    function (pageSize) {
        if (this.pageSize !== pageSize && this.total) {
            this.paginationOptions.itemsPerPage = pageSize;
            this.pageSize = pageSize;
            /** @type {?} */
            var total = this.total;
            /** @type {?} */
            var pageLength = Math.floor(total / pageSize);
            if (total % pageSize > 0) {
                pageLength += 1;
            }
            if (pageLength && this.pageIndex > pageLength) {
                this.pageIndex = pageLength;
                this.paginationOptions.currentPage = this.pageIndex;
            }
            this.pageSizeChanged.emit({
                pageInfo: { pageIndex: this.pageIndex, pageSize: pageSize },
                search: this.searchData, sortName: this.sortName, sortOrder: this.sortOrder
            });
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DataTableComponent.prototype.onSearch = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if ($event.originalEvent) {
            $event.originalEvent.stopPropagation();
        }
        this.search.emit(this.searchData);
    };
    /**
     * @param {?} state
     * @return {?}
     */
    DataTableComponent.prototype.onCheckAll = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        this.dataService.selectedAll.next(state);
        this.checkAll.emit(state);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    DataTableComponent.prototype.onSelectedRow = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.selectedRow.emit({ data: e.rowData, index: e.rowIndex });
        // 兼容
        this.selectRows.emit({ data: e.rowData, index: e.rowIndex });
    };
    // tslint:disable-next-line:no-shadowed-variable
    // tslint:disable-next-line:no-shadowed-variable
    /**
     * @param {?} size
     * @return {?}
     */
    DataTableComponent.prototype.resize = 
    // tslint:disable-next-line:no-shadowed-variable
    /**
     * @param {?} size
     * @return {?}
     */
    function (size) {
        if (!size) {
            return;
        }
        if (this.width !== size.width || this.height !== size.height) {
            this.width = size.width;
            this.height = size.height;
        }
        this.setBodyHeight();
    };
    /**
     * @param {?} e
     * @return {?}
     */
    DataTableComponent.prototype.loadData = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        this.data = e.data;
        if (this.pagination) {
            var _a = __assign({}, e), _b = _a.total, total = _b === void 0 ? 0 : _b, _c = _a.pageSize, pageSize = _c === void 0 ? 20 : _c, _d = _a.pageIndex, pageIndex = _d === void 0 ? 1 : _d;
            this.paginationOptions.totalItems = total;
            this.paginationOptions.itemsPerPage = pageSize;
            this.paginationOptions.currentPage = pageIndex;
            this.paginationOptions.pageList = this.pageList;
            this.paginationOptions = __assign({}, this.paginationOptions);
            this.total = total;
            this.pageSize = pageSize;
            this.pageIndex = pageIndex;
        }
        this.cd.detectChanges();
        // TFS 580296
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.ps && _this.ps.update();
        }), 10);
        this.updateCheckboxState(this.data);
    };
    /*
     */
    /*
         */
    /**
     * @param {?} e
     * @return {?}
     */
    DataTableComponent.prototype.onCellClick = /*
         */
    /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.cellClick.emit(e);
    };
    /* 添加行 */
    /* 添加行 */
    /**
     * @param {?} dataItem
     * @return {?}
     */
    DataTableComponent.prototype.addRows = /* 添加行 */
    /**
     * @param {?} dataItem
     * @return {?}
     */
    function (dataItem) {
        this.data = this.data.concat(dataItem);
    };
    /* 删除行 */
    /* 删除行 */
    /**
     * @return {?}
     */
    DataTableComponent.prototype.removeRows = /* 删除行 */
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var SELECTIONS = this.selections;
        if (this.singleSelect) {
            for (var i = 0; i < this.data.length; i++) {
                if (this.data[i] === SELECTIONS) {
                    this.data.splice(i, 1);
                }
            }
        }
        else {
            for (var i = 0; i < SELECTIONS.length; i++) {
                for (var j = 0; j < this.data.length; j++) {
                    if (SELECTIONS[i][this.idField] === this.data[j][this.idField]) {
                        this.data.splice(j, 1);
                    }
                }
            }
        }
    };
    /**
     * @param {?} rid
     * @param {?=} emit
     * @return {?}
     */
    DataTableComponent.prototype.checkRow = /**
     * @param {?} rid
     * @param {?=} emit
     * @return {?}
     */
    function (rid, emit) {
        var _this = this;
        if (emit === void 0) { emit = false; }
        var _a, _b;
        /** @type {?} */
        var rowIndex = -1;
        /** @type {?} */
        var rowData = this.data.find((/**
         * @param {?} n
         * @param {?} i
         * @return {?}
         */
        function (n, i) {
            if (n[_this.idField] == rid) {
                rowIndex = i;
                return true;
            }
        }));
        if (!rowData) {
            return;
        }
        if (!this.selections) {
            this.selections = (_a = {}, _a[rid] = rowData, _a);
        }
        else {
            this.selections = __assign((_b = {}, _b[rid] = rowData, _b), this.selections.reduce((/**
             * @param {?} r
             * @param {?} n
             * @return {?}
             */
            function (r, n) {
                r[n[_this.idField]] = n;
                return r;
            }), {}));
        }
        this.dataService.selectedRow.next({
            rowIndex: rowIndex,
            rowData: rowData
        });
        if (emit) {
            /** @type {?} */
            var p = { data: rowData, index: rowIndex };
            this.selectedRow.emit(p);
            // 兼容
            this.selectRows.emit(p);
        }
    };
    /**
     * @param {?} rid
     * @param {?=} emit
     * @return {?}
     */
    DataTableComponent.prototype.unCheckRow = /**
     * @param {?} rid
     * @param {?=} emit
     * @return {?}
     */
    function (rid, emit) {
        var _this = this;
        if (emit === void 0) { emit = false; }
        /** @type {?} */
        var rowIndex = -1;
        /** @type {?} */
        var rowData = this.data.find((/**
         * @param {?} n
         * @param {?} i
         * @return {?}
         */
        function (n, i) {
            if (n[_this.idField] == rid) {
                rowIndex = i;
                return true;
            }
        }));
        if (this.selections) {
            this.selections = this.selections.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n[_this.idField] != rid; })).reduce((/**
             * @param {?} r
             * @param {?} n
             * @return {?}
             */
            function (r, n) {
                r[n[_this.idField]] = n;
                return r;
            }), {});
            this.dataService.unSelectedRow.next({
                rowIndex: rowIndex,
                rowData: rowData
            });
            if (emit) {
                this.unSelectRow.emit({ data: rowData, index: rowIndex });
            }
        }
    };
    /**
     * @param {?} ids
     * @return {?}
     */
    DataTableComponent.prototype.unCheckRows = /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        var _this = this;
        if (this.selections) {
            this.selections = this.selections.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return !ids.includes(n[_this.idField]); })).reduce((/**
             * @param {?} r
             * @param {?} n
             * @return {?}
             */
            function (r, n) {
                r[n[_this.idField]] = n;
                return r;
            }), {});
            this.cd.detectChanges();
        }
    };
    /**
     * @return {?}
     */
    DataTableComponent.prototype.clearSelections = /**
     * @return {?}
     */
    function () {
        this.selections = [];
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DataTableComponent.prototype.onKeydownEvent = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        if (!$event || !this.singleSelect || !this.data || !this.data.length) {
            return;
        }
        if (!['ArrowDown', 'ArrowUp'].includes($event.code)) {
            return;
        }
        /** @type {?} */
        var newIdx;
        if ($event.code === 'ArrowDown') {
            newIdx = this._currentRowIndex + 1;
            if (newIdx >= this.data.length) {
                newIdx = 0;
            }
        }
        else if ($event.code === 'ArrowUp') {
            if (this._currentRowIndex !== -1) {
                newIdx = this._currentRowIndex - 1;
            }
        }
        if (newIdx >= 0) {
            this.dtBody.selectedRow($event, newIdx, this.data[newIdx]);
        }
        setTimeout((/**
         * @return {?}
         */
        function () {
            // scroll intoView
            /** @type {?} */
            var trDoms = _this.dtBody.el.nativeElement.querySelectorAll('.ui-table-tbody tr');
            if (trDoms && trDoms[_this._currentRowIndex]) {
                trDoms[_this._currentRowIndex].scrollIntoView({ block: 'nearest' });
            }
        }));
    };
    DataTableComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farrisui-datatable,farris-datatable',
                    template: "<div class=\"filter-row\" [style.width]=\"width + 'px'\" *ngIf=\"showFilterBar\">\r\n    <form style=\"display: flex; width: 100%;\">\r\n        <div class=\"search-fields\" style=\"max-width: 180px;min-width: 140px;\">\r\n            <select class=\"custom-select\" [(ngModel)]=\"searchData.field\" name=\"field\" single-select [panelRef]=\"selectpanel\" [items]=\"searchFields\">\r\n                <!-- <option value=\"*\">{{allColumnsTitle}}</option>\r\n                <option *ngFor=\"let col of searchFields\" value=\"{{col.value}}\">{{ col.label }}</option> -->\r\n            </select>\r\n\r\n            <div #selectpanel class=\"single-select-panel f-area-hide\">\r\n                <ul class=\"dropdown-menu show\">\r\n                    <li class=\"dropdown-item\" [attr.value]=\"'*'\" *ngIf=\"searchAnyField\" [class.active]=\"searchData.field === '*'\">{{allColumnsTitle}}</li>\r\n                    <li class=\"dropdown-item\" *ngFor=\"let col of searchFields\" [attr.value]=\"col.value\" [class.active]=\"searchData.field === col.value\">{{ col.label }}</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n        <div class=\"search-text flex-fill\">\r\n            <input-group [groupText]=\"searchButtonText\" name=\"searchValue\" (clear)=\"onClearSearchValue()\" #inputgroup\r\n                [(ngModel)]=\"searchData.value\" (clickHandle)=\"onSearch($event)\" (enterHandle)=\"onSearch($event)\"\r\n                (keydownHandle)=\"onKeydownEvent($event)\" (valueChange)=\"searchValueChange.emit(searchData)\"></input-group>\r\n        </div>\r\n    </form>\r\n</div>\r\n<div [style.height.px]=\"tableHeight\" [style.width.px]=\"width\" class=\"farris-datatable-container\">\r\n    <div class=\"farris-datatable\">\r\n        <div #tableHeader class=\"farris-table-header\" [style.display]=\"showHeader? '': 'none'\">\r\n            <datatable-header #dtHeader [size]=\"size\" [columns]=\"columns\" [singleSelect]=\"singleSelect\" [data]=\"data\"\r\n                (loadData)=\"loadData\" (checkedAll)=\"onCheckAll($event)\">\r\n                <ng-content select=\"data-columns\"></ng-content>\r\n            </datatable-header>\r\n        </div>\r\n        <div #scorllableBody class=\"farris-table-scorllable-body\" [style.height.px]=\"scorllableBodyHeight\">\r\n            <perfect-scrollbar #perfectScrollbar [config]=\"{}\" (psScrollX)=\"onScrollX($event)\" (psScrollY)=\"onScrollY($event)\">\r\n                <ng-container [style.display]=\"data && data.length ? 'block': 'none'\">\r\n                    <datatable-body #dtBody [rows]=\"pagination ? (data | paginate: paginationOptions) : data\" [size]=\"size\" [columns]=\"columns\" [striped]=\"striped\"\r\n                        [bordered]=\"bordered\" [rowClassName]=\"rowClassName\" [cellClassName]=\"cellClassName\" (cellClick)=\"onCellClick($event)\">\r\n                    </datatable-body>\r\n                </ng-container>\r\n\r\n            </perfect-scrollbar>\r\n        </div>\r\n        <div class=\"farris-table-header\" *ngIf=\"footer\">\r\n            <ng-template [ngTemplateOutlet]=\"footer\">\r\n            </ng-template>\r\n        </div>\r\n        <div *ngIf=\"pagination\" #tablePager class=\"farris-table-pager\" style=\"box-shadow: inset 0px 1px 0px 0px #e9ecf3;\" >\r\n            <div #pgScrollbar style=\"width: 100%;position: absolute;overflow-x: unset;\">\r\n                <pagination-controls #pager [id]=\"paginationOptions.id\" [maxSize]=\"maxSize\" [directionLinks]=\"directionLinks\"\r\n                    [autoHide]=\"autoHide\" [responsive]=\"responsive\" [previousLabel]=\"labels.previousLabel\" [nextLabel]=\"labels.nextLabel\"\r\n                    [screenReaderPaginationLabel]=\"labels.screenReaderPaginationLabel\" [screenReaderPageLabel]=\"labels.screenReaderPageLabel\"\r\n                    [screenReaderCurrentLabel]=\"labels.screenReaderCurrentLabel\" (pageChange)=\"onPageChange($event)\"\r\n                    (pageSizeChange)=\"onPageSizeChange($event)\" [viewMode]=\"pagerViewMode\" [showGoToFirst]=\"true\" [showGoToLast]=\"true\"\r\n                    [showPageInfo]=\"showPageInfo\" [showPageNumber]=\"showPageNumber\" [showPageList]=\"showPageList\" style=\"position: relative;\"\r\n                >\r\n\r\n                    <div class=\"simple-pager-extend-area\" *ngIf=\"pagerViewMode === 'simple' && pagerExtendTemplate\">\r\n                        <ng-template [ngTemplateOutlet]=\"pagerExtendTemplate\" [ngTemplateOutletContext]=\"{$implicit: this}\"></ng-template>\r\n                    </div>\r\n\r\n                </pagination-controls>\r\n            </div>\r\n        </div>\r\n        <div #dragLine *ngIf=\"resizableColumns\" class=\"column-resizer-helper\"></div>\r\n    </div>\r\n</div>",
                    encapsulation: ViewEncapsulation.None,
                    providers: [
                        DataTableService
                    ],
                    styles: [".farris-table-scorllable-body .ps__rail-x{z-index:2}.filter-row{display:-webkit-box;display:flex;margin:10px 0}.filter-row .search-text{-webkit-box-flex:1;flex:1;margin-left:10px}.filter-row .search-text .btn-outline-secondary{border-color:#ced4da}.filter-row .search-text .btn-outline-secondary:active,.filter-row .search-text .btn-outline-secondary:focus{box-shadow:none}.filter-row .form-control:focus{border-color:#ced4da;box-shadow:none}.filter-row .custom-select:focus{box-shadow:none}.farris-datatable{position:relative}.resizable-column{background-clip:padding-box;position:relative}.column-resizer{display:block;position:absolute!important;top:0;right:0;margin:0;width:.5em;height:100%;padding:0;cursor:col-resize;border:1px solid transparent}.column-resizer-helper{width:1px;position:absolute;z-index:10;display:none;background-color:#6c757d;opacity:.6}.farris-table-fixed-body,.farris-table-fixed-header{position:absolute;top:0;left:0;overflow:hidden;box-shadow:2px 0 6px -2px rgba(0,0,0,.2)}.farris-table-fixed-right-body,.farris-table-fixed-right-header{position:absolute;top:0;right:0;overflow:hidden;box-shadow:-2px 0 6px -2px rgba(0,0,0,.2)}.td-hidden{visibility:hidden}@media (min-width:576px){.td-sm-hidden{visibility:hidden!important}.td-sm-visible{visibility:visible!important}}@media (min-width:768px){.td-md-hidden{visibility:hidden!important}.td-md-visible{visibility:visible!important}}@media (min-width:992px){.td-lg-hidden{visibility:hidden!important}.td-lg-visible{visibility:visible!important}}@media (min-width:1200px){.td-xl-hidden{visibility:hidden!important}.td-xl-visible{visibility:visible!important}}"]
                }] }
    ];
    /** @nocollapse */
    DataTableComponent.ctorParameters = function () { return [
        { type: DataTableService },
        { type: IdService },
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: NgZone }
    ]; };
    DataTableComponent.propDecorators = {
        keydownEnterEdit: [{ type: Input }],
        id: [{ type: Input }],
        size: [{ type: Input }],
        allColumnsTitle: [{ type: Input }],
        width: [{ type: Input }],
        height: [{ type: Input }],
        searchAnyField: [{ type: Input }],
        fill: [{ type: Input }],
        pagination: [{ type: Input }],
        pagerOnServer: [{ type: Input }],
        pageSize: [{ type: Input }],
        pageIndex: [{ type: Input }],
        showPageInfo: [{ type: Input }],
        showPageNumber: [{ type: Input }],
        showPageList: [{ type: Input }],
        pagerViewMode: [{ type: Input }],
        pagerExtendTemplate: [{ type: Input }],
        showHeader: [{ type: Input }],
        pageList: [{ type: Input }],
        total: [{ type: Input }],
        columns: [{ type: Input }],
        searchFields: [{ type: Input }],
        showFilterBar: [{ type: Input }],
        virtualized: [{ type: Input }],
        autoFitColumns: [{ type: Input }],
        data: [{ type: Input }],
        remote: [{ type: Input }],
        remoteSort: [{ type: Input }],
        sortName: [{ type: Input }],
        sortOrder: [{ type: Input }],
        multiSort: [{ type: Input }],
        beforeSortColumn: [{ type: Input }],
        singleSelect: [{ type: Input }],
        idField: [{ type: Input }],
        hover: [{ type: Input }],
        striped: [{ type: Input }],
        bordered: [{ type: Input }],
        rowClassName: [{ type: Input }],
        cellClassName: [{ type: Input }],
        rowStyler: [{ type: Input }],
        cellStyler: [{ type: Input }],
        selections: [{ type: Input }],
        scorllableBody: [{ type: ViewChild, args: ['scorllableBody',] }],
        tableHeader: [{ type: ViewChild, args: ['tableHeader',] }],
        tablePager: [{ type: ViewChild, args: ['tablePager',] }],
        dtHeader: [{ type: ViewChild, args: ['dtHeader',] }],
        dtBody: [{ type: ViewChild, args: ['dtBody',] }],
        dtLeftBody: [{ type: ViewChild, args: ['dtLeftBody',] }],
        dtRightBody: [{ type: ViewChild, args: ['dtRightBody',] }],
        dtLeftFixed: [{ type: ViewChild, args: ['dtLeftFixed',] }],
        dtRightFixed: [{ type: ViewChild, args: ['dtRightFixed',] }],
        pager: [{ type: ViewChild, args: ['pager',] }],
        inputGroup: [{ type: ViewChild, args: ['inputgroup',] }],
        pgScrollbar: [{ type: ViewChild, args: ['pgScrollbar',] }],
        pageChanged: [{ type: Output }],
        pageSizeChanged: [{ type: Output }],
        search: [{ type: Output }],
        columnSorted: [{ type: Output }],
        rowDblClick: [{ type: Output }],
        selectedRow: [{ type: Output }],
        selectRows: [{ type: Output }],
        unSelectRow: [{ type: Output }],
        cellClick: [{ type: Output }],
        clearSearchValue: [{ type: Output }],
        checkAll: [{ type: Output }],
        searchValueChange: [{ type: Output }],
        sortChange: [{ type: Output }],
        columnsRef: [{ type: ContentChildren, args: [ColumnDirective,] }],
        footer: [{ type: ContentChild, args: ['footer',] }],
        dragLine: [{ type: ViewChild, args: ['dragLine',] }],
        resizableColumns: [{ type: Input }],
        keepSelect: [{ type: Input }],
        perfectScrollbar: [{ type: ViewChild, args: ['perfectScrollbar',] }]
    };
    return DataTableComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DTCheckboxComponent = /** @class */ (function () {
    function DTCheckboxComponent() {
        this.checkedChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    DTCheckboxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} event
     * @return {?}
     */
    DTCheckboxComponent.prototype.handleClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.disabled) {
            this.checkedChange.emit({ originalEvent: event, checked: !this.checked });
        }
    };
    DTCheckboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'dt-checkbox',
                    template: "\n        <div class=\"custom-control custom-checkbox  custom-control-inline dt-checkbox f-checkradio-single\">\n            <input type=\"checkbox\" class=\"custom-control-input\"  [checked]=\"checked\">\n            <label class=\"custom-control-label\" (click)=\"handleClick($event)\"></label>\n        </div>\n    "
                }] }
    ];
    /** @nocollapse */
    DTCheckboxComponent.ctorParameters = function () { return []; };
    DTCheckboxComponent.propDecorators = {
        checked: [{ type: Input }],
        id: [{ type: Input }],
        disabled: [{ type: Input }],
        checkedChange: [{ type: Output }]
    };
    return DTCheckboxComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DataTableHeaderComponent = /** @class */ (function () {
    function DataTableHeaderComponent(el, dataService, render, utils, dt) {
        var _this = this;
        this.el = el;
        this.dataService = dataService;
        this.render = render;
        this.utils = utils;
        this.dt = dt;
        this.columns = [];
        this.singleSelect = true;
        this.checkedAll = new EventEmitter();
        this.rowsChange = new EventEmitter();
        this.loadData = new EventEmitter();
        this.sortType = {};
        this.filterFields = {};
        this.clickedUp = false;
        this.clickedDown = false;
        this.isCheckAll = false;
        this.allClass = ' ';
        this.width = '100%';
        this.allClass += this.el.nativeElement.classList.value;
        this.dataService.updateCheckAllStatus.subscribe((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            if (n !== 2) {
                _this.isCheckAll = n ? true : false;
                // this.checkallEl.elementRef.nativeElement.checked = this.isCheckAll;
            }
            else {
                _this.isCheckAll = false;
                // this.checkallEl.elementRef.nativeElement.checked = false;
            }
        }));
    }
    /**
     * @return {?}
     */
    DataTableHeaderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.fixed === 'left') {
            this.columns = convertColumns(this.columns, 'left');
        }
        if (this.fixed === 'right') {
            this.columns = convertColumns(this.columns, 'right');
        }
    };
    /**
     * @return {?}
     */
    DataTableHeaderComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} $event
     * @return {?}
     */
    DataTableHeaderComponent.prototype.onCheckedChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.isCheckAll = $event.checked;
        this.checkedAll.emit($event.checked);
    };
    /**
     * @param {?} row
     * @param {?} index
     * @return {?}
     */
    DataTableHeaderComponent.prototype.createRowClassName = /**
     * @param {?} row
     * @param {?} index
     * @return {?}
     */
    function (row, index) {
        return this.rowClassName ? this.rowClassName(row, index) : '';
    };
    /**
     * @private
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    DataTableHeaderComponent.prototype.compare = /**
     * @private
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function (a, b) {
        if (typeof a === 'string') {
            return a.localeCompare(b);
        }
        else {
            return a === b ? 0 : (a > b ? 1 : -1);
        }
    };
    /**
     * @private
     * @param {?} r1
     * @param {?} r2
     * @return {?}
     */
    DataTableHeaderComponent.prototype._sort = /**
     * @private
     * @param {?} r1
     * @param {?} r2
     * @return {?}
     */
    function (r1, r2) {
        /** @type {?} */
        var r = 0;
        /** @type {?} */
        var sortFields = this.dt.sortName.split(',');
        /** @type {?} */
        var orders = this.dt.sortOrder.split(',');
        if (!this.dt.sortName) {
            return r;
        }
        var _loop_1 = function (i) {
            /** @type {?} */
            var sn = sortFields[i];
            /** @type {?} */
            var so = orders[i];
            /** @type {?} */
            var col = this_1.columns.find((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.field === sn; }));
            /** @type {?} */
            var orderby = col['sorter'] || this_1.compare;
            /** @type {?} */
            var v1 = this_1.utils.getValue(sn, r1);
            if (v1 === null || v1 === undefined) {
                v1 = '';
            }
            /** @type {?} */
            var v2 = this_1.utils.getValue(sn, r2);
            if (v2 === null || v2 === undefined) {
                v2 = '';
            }
            r = orderby(v1, v2);
            if (r !== 0) {
                return { value: r * (so === 'asc' ? 1 : -1) };
            }
        };
        var this_1 = this;
        for (var i = 0; i < sortFields.length; i++) {
            var state_1 = _loop_1(i);
            if (typeof state_1 === "object")
                return state_1.value;
        }
        return r;
    };
    /**
     * @private
     * @return {?}
     */
    DataTableHeaderComponent.prototype.clientSort = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var sortedData = this.data.sort(this._sort.bind(this));
        this.loadData.emit(sortedData);
    };
    /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    DataTableHeaderComponent.prototype.onSortColumnClick = /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    function ($event, col) {
        var _this = this;
        if (!col.sortable) {
            return;
        }
        /** @type {?} */
        var sortName = this.dt.sortName;
        /** @type {?} */
        var sortOrder = this.dt.sortOrder;
        /** @type {?} */
        var sortFields = [];
        /** @type {?} */
        var sortOrders = [];
        if (sortName) {
            sortFields = sortName.split(',');
            sortOrders = sortOrder.split(',');
        }
        /** @type {?} */
        var colOrder = col.order || 'asc';
        /** @type {?} */
        var newOrder = colOrder;
        /** @type {?} */
        var i = sortFields.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n === col.field; }));
        if (i >= 0) {
            /** @type {?} */
            var _order = sortOrders[i] === 'asc' ? 'desc' : 'asc';
            newOrder = _order;
            // if (this.dt.multiSort && newOrder === 'asc') {
            if (newOrder === 'asc') {
                newOrder = undefined;
                sortFields.splice(i, 1);
                sortOrders.splice(i, 1);
                // if (sortFields.length === 0) {
                //     sortFields.push(col.field);
                //     sortOrders.push('asc');
                //     newOrder = 'asc';
                // }
            }
            else {
                sortOrders[i] = _order;
            }
        }
        else {
            if (this.dt.multiSort) {
                sortFields.push(col.field);
                sortOrders.push(colOrder);
            }
            else {
                sortFields = [col.field];
                sortOrders = [colOrder];
            }
        }
        col.order = newOrder;
        this.dt.sortName = sortFields.join(',');
        this.dt.sortOrder = sortOrders.join(',');
        // this.dfs.setSortInfo(this.dg.sortName, this.dg.sortOrder);
        if (!this.dt.multiSort) {
            /** @type {?} */
            var updateFieldOrder = (/**
             * @param {?} cols
             * @return {?}
             */
            function (cols) {
                if (!cols || !cols.length) {
                    return;
                }
                cols.forEach((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) {
                    c.order = undefined;
                    /** @type {?} */
                    var k = sortFields.findIndex((/**
                     * @param {?} f
                     * @return {?}
                     */
                    function (f) { return f === c.field; }));
                    if (k >= 0) {
                        c.order = sortOrders[k];
                    }
                }));
            });
            updateFieldOrder(this.columns);
            // this.cdRef.detectChanges();
        }
        this.dt.beforeSortColumn(this.dt.sortName, this.dt.sortOrder).subscribe((/**
         * @return {?}
         */
        function () {
            if (_this.dt.remoteSort) ;
            else {
                _this.clientSort();
            }
            _this.dt.columnSorted.emit({ sortName: _this.dt.sortName, sortOrder: _this.dt.sortOrder });
        }));
    };
    /**
     * @return {?}
     */
    DataTableHeaderComponent.prototype.deepCopyData = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var copyColumns = deepCopy(this.columns);
        /** @type {?} */
        var copyRows = deepCopy(this.rows);
        copyColumns.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            element.sortType = 'normal';
        }));
        return {
            copyColumns: copyColumns,
            copyRows: copyRows
        };
    };
    /* 若存在筛选条件 保存按钮可点击
     */
    /* 若存在筛选条件 保存按钮可点击
         */
    /**
     * @param {?} col
     * @return {?}
     */
    DataTableHeaderComponent.prototype.hasChecked = /* 若存在筛选条件 保存按钮可点击
         */
    /**
     * @param {?} col
     * @return {?}
     */
    function (col) {
        if (this.filterFields.hasOwnProperty(col.field)) {
            this.filterFields[col.field].some((/**
             * @param {?} ele
             * @return {?}
             */
            function (ele) {
                return ele.checked;
            }));
        }
        return false;
    };
    DataTableHeaderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'datatable-header',
                    template: "\n        <table class=\"table\" [class.table-sm]=\"size === 'small'\">\n            <colgroup>\n                <col class=\"dt-checkbox-cell\" *ngIf=\"!singleSelect\" />\n                <col *ngFor=\"let col of columns\" [style.width]=\"col.width + 'px'\" />\n            </colgroup>\n            <thead>\n                <tr>\n                    <th drag-column class=\"dt-checkbox-cell datatable-fixed-left\" *ngIf=\"!singleSelect\">\n                        <dt-checkbox #checkall *ngIf=\"data && data.length\" [checked]=\"isCheckAll\" (checkedChange)=\"onCheckedChange($event)\"></dt-checkbox>\n                    </th>\n                    <th drag-column *ngFor=\"let col of columns; let i = index\" #dragbar=\"resizeRef\"\n                        [class.resizable-column]=\"dt.resizableColumns && !dt.hasFixed\"\n                        [attr.field]=\"col.field\"\n                        [style.textAlign]=\"col.hAlign || 'left'\" [class.datatable-fixed-right]=\"col['fixed'] === 'right'\">\n                        <span [style.marginRight.px]=\"col.sortable ? 10: 0\">{{ col.title }}</span>\n                        <ng-container *ngIf=\"col.sortable\">\n                            <span *ngIf=\"col.order\" class=\"f-datatable-sort\"\n                                [ngClass]=\"{\n                                  'f-datatable-sort-asc':col.order === 'asc',\n                                  'f-datatable-sort-desc':col.order === 'desc'\n                                }\"\n                                (click)=\"onSortColumnClick($event, col)\">\n                            </span>\n                            <span *ngIf=\"!col.order\" class=\"f-datatable-sort\" (click)=\"onSortColumnClick($event, col)\"></span>\n                        </ng-container>\n                        <span class=\"column-resizer\" (mousedown)=\"dragbar.onMouseDown($event)\" *ngIf=\"dt.resizableColumns && !dt.hasFixed\"></span>\n                    </th>\n                </tr>\n            </thead>\n        </table>\n    ",
                    styles: ["th>div{display:inline-block;float:right;width:20%;height:0;margin-right:5%}th>div>span.sort-container{position:relative;display:inline-block;width:100%;height:1rem}th span.farris-icon{position:absolute;left:0;opacity:.5;cursor:pointer}th span.k-i-arrow-60-up{top:0}th span.k-i-arrow-60-down{top:.5em}th span.k-i-filter{top:-.5rem}th span.clicked,th span.k-i-filter:hover{opacity:1}.farris-table-header{overflow:auto}"]
                }] }
    ];
    /** @nocollapse */
    DataTableHeaderComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: DataTableService },
        { type: Renderer2 },
        { type: CommonUtils },
        { type: DataTableComponent }
    ]; };
    DataTableHeaderComponent.propDecorators = {
        size: [{ type: Input }],
        hover: [{ type: Input }],
        columns: [{ type: Input }],
        singleSelect: [{ type: Input }],
        fixed: [{ type: Input }],
        rows: [{ type: Input }],
        data: [{ type: Input }],
        rowClassName: [{ type: Input }],
        checkedAll: [{ type: Output }],
        rowsChange: [{ type: Output }],
        loadData: [{ type: Output }],
        checkallEl: [{ type: ViewChild, args: ['checkall',] }]
    };
    return DataTableHeaderComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DTDblClickRowDirective = /** @class */ (function () {
    function DTDblClickRowDirective(el, dt) {
        this.el = el;
        this.dt = dt;
    }
    /**
     * @return {?}
     */
    DTDblClickRowDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} event
     * @return {?}
     */
    DTDblClickRowDirective.prototype.ondblclick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.row) {
            this.dt.rowDblClick.emit(this.row);
        }
        event.stopPropagation();
    };
    DTDblClickRowDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[dblclick]'
                },] }
    ];
    /** @nocollapse */
    DTDblClickRowDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: DataTableComponent, decorators: [{ type: Optional }] }
    ]; };
    DTDblClickRowDirective.propDecorators = {
        row: [{ type: Input, args: ['dblclick',] }],
        ondblclick: [{ type: HostListener, args: ['dblclick', ['$event'],] }]
    };
    return DTDblClickRowDirective;
}());
var DataTableBodyComponent = /** @class */ (function () {
    function DataTableBodyComponent(el, dataService, render, dt, colFormatSer, utils, injector) {
        this.el = el;
        this.dataService = dataService;
        this.render = render;
        this.dt = dt;
        this.colFormatSer = colFormatSer;
        this.utils = utils;
        this.injector = injector;
        this.rows = [];
        this.rowDblClick = new EventEmitter();
        this.selectRow = new EventEmitter();
        this.cellEdit = new EventEmitter();
        this.cellClick = new EventEmitter();
        this.lastRowIndex = 0;
        this.lastColumnIndex = 0;
        this.edit = {};
        this.className = {};
        this.isRowTempl = false;
        this.selectedRowIndex = -1;
        this._selections = {};
        this.emptyMessage = '暂无数据';
        this.localeService = this.injector.get(LocaleService);
        this.ngzone = this.injector.get(NgZone, null);
    }
    Object.defineProperty(DataTableBodyComponent.prototype, "selections", {
        get: /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (!this._selections) {
                return;
            }
            /** @type {?} */
            var keys = Object.keys(this._selections);
            if (keys.length) {
                if (this.dt.singleSelect) {
                    return this._selections;
                }
                else {
                    return keys.map((/**
                     * @param {?} k
                     * @return {?}
                     */
                    function (k) { return _this._selections[k]; }));
                }
            }
            return undefined;
        },
        // 已选择的行 默认为空
        set: 
        // 已选择的行 默认为空
        /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._selections = v || {};
            this.dt.updateCheckboxState(this.rows);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DataTableBodyComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.dataService.selectedAll.subscribe((/**
         * @param {?} allChecked
         * @return {?}
         */
        function (allChecked) {
            /** @type {?} */
            var idfield = _this.idField();
            _this.rows.forEach((/**
             * @param {?} row
             * @return {?}
             */
            function (row) {
                if (allChecked) {
                    _this._selections[row[idfield]] = row;
                }
                else {
                    delete _this._selections[row[idfield]];
                }
            }));
        }));
        if (this.rows) {
            this.isRowTempl = this.rows.some((/**
             * @param {?} row
             * @return {?}
             */
            function (row) {
                return row.hasOwnProperty('rowTempl');
            }));
        }
        if (this.fixed === 'left') {
            this.columns = convertColumns(this.columns, 'left');
        }
        if (this.fixed === 'right') {
            this.columns = convertColumns(this.columns, 'right');
        }
        this.emptyMessage = this.localeService.getValue('datagrid.emptyMessage');
    };
    /**
     * @return {?}
     */
    DataTableBodyComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this._rows = this.el.nativeElement.querySelectorAll('tr');
        this.checkBodyHeightWhenEmptyData();
    };
    /**
     * @return {?}
     */
    DataTableBodyComponent.prototype.checkBodyHeightWhenEmptyData = /**
     * @return {?}
     */
    function () {
        if (this.emptyTbodyElRef && !(this.rows && this.rows.length)) {
            if (this.emptyTbodyElRef.nativeElement.offsetHeight < 130) {
                this.emptyTbodyElRef.nativeElement.style.height = this.dt.pagination ? '150px' : '120px';
            }
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    DataTableBodyComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (changes.rows && !changes.rows.isFirstChange()) {
            if (!this.dt.singleSelect) {
                /** @type {?} */
                var _rows = changes.rows.currentValue || [];
                /** @type {?} */
                var checkedRows_1 = _rows.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    return _this.isSelected(n) ? n : 0;
                })).filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n; }));
                if (!_rows.length) {
                    this.dataService.updateCheckAllStatus.next(0);
                    return;
                }
                /** @type {?} */
                var idfield_1 = this.idField();
                /** @type {?} */
                var checkTotal_1 = 0;
                _rows.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) {
                    if (checkedRows_1.find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n[idfield_1] === element[idfield_1]; }))) {
                        checkTotal_1 += 1;
                    }
                }));
                if (_rows.length === checkTotal_1) {
                    this.dataService.updateCheckAllStatus.next(1);
                }
                else {
                    if (checkedRows_1.length === 0) {
                        this.dataService.updateCheckAllStatus.next(0);
                    }
                    else {
                        this.dataService.updateCheckAllStatus.next(2);
                    }
                }
            }
        }
    };
    /**
     * 获取对象中指定字段的值。 field: 可以为带有层级结构的路径，如： user.firstName | name 等
     */
    /**
     * 获取对象中指定字段的值。 field: 可以为带有层级结构的路径，如： user.firstName | name 等
     * @param {?} field
     * @param {?} data
     * @return {?}
     */
    DataTableBodyComponent.prototype.getValue = /**
     * 获取对象中指定字段的值。 field: 可以为带有层级结构的路径，如： user.firstName | name 等
     * @param {?} field
     * @param {?} data
     * @return {?}
     */
    function (field, data) {
        if (field.indexOf('.') === -1) {
            return data[field];
        }
        else {
            return (field.split('.').reduce((/**
             * @param {?} obj
             * @param {?} key
             * @return {?}
             */
            function (obj, key) {
                return obj[key];
            }), data) || '');
        }
    };
    /**
     * @param {?} event
     * @param {?} index
     * @param {?} data
     * @return {?}
     */
    DataTableBodyComponent.prototype.selectedRow = /**
     * @param {?} event
     * @param {?} index
     * @param {?} data
     * @return {?}
     */
    function (event, index, data) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        /** @type {?} */
        var isSelected = false;
        /** @type {?} */
        var idfield = this.idField();
        if (this.dt.singleSelect) {
            if (this.selectedRowIndex !== index || !this._selections || this._selections[idfield] !== data[idfield]) {
                this.selectedRowIndex = index;
                this._selections = data;
                isSelected = true;
                this.dataService.selectedRow.next({
                    rowIndex: index,
                    rowData: data
                });
            }
            else {
                if (!this.dt.keepSelect) {
                    this.selectedRowIndex = -1;
                    this._selections = undefined;
                    isSelected = false;
                    this.dataService.unSelectedRow.next({
                        rowIndex: index,
                        rowData: data
                    });
                }
                else {
                    isSelected = true;
                }
            }
        }
        else {
            if (this.isSelected(data)) {
                delete this._selections[data[idfield]];
                isSelected = false;
                this.dataService.unSelectedRow.next({
                    rowIndex: index,
                    rowData: data
                });
            }
            else {
                this._selections[data[this.idField()]] = data;
                isSelected = true;
                this.dataService.selectedRow.next({
                    rowIndex: index,
                    rowData: data
                });
            }
        }
        if (isSelected) {
            this.dt.selectedRow.emit({ data: data, index: index });
            // 兼容
            this.dt.selectRows.emit({ data: data, index: index });
        }
        else {
            this.dt.unSelectRow.emit({ data: data, index: index });
        }
    };
    /**
     * @param {?} event
     * @param {?} index
     * @param {?} data
     * @return {?}
     */
    DataTableBodyComponent.prototype.onChecked = /**
     * @param {?} event
     * @param {?} index
     * @param {?} data
     * @return {?}
     */
    function (event, index, data) {
        /** @type {?} */
        var state = event.checked;
        /** @type {?} */
        var idfield = this.dt.idField;
        if (state) {
            this._selections[data[idfield]] = data;
            this.dataService.selectedRow.next({
                rowIndex: index,
                rowData: data
            });
            this.dt.selectedRow.emit({ data: data, index: index });
            // 兼容
            this.dt.selectRows.emit({ data: data, index: index });
        }
        else {
            delete this._selections[data[idfield]];
            this.dataService.unSelectedRow.next({
                rowIndex: index,
                rowData: data
            });
            this.dt.unSelectRow.emit({ data: data, index: index });
        }
        event.originalEvent.stopPropagation();
    };
    /**
     * @private
     * @return {?}
     */
    DataTableBodyComponent.prototype.idField = /**
     * @private
     * @return {?}
     */
    function () {
        return this.dt.idField;
    };
    /**
     * @param {?} row
     * @param {?=} tr
     * @return {?}
     */
    DataTableBodyComponent.prototype.isSelected = /**
     * @param {?} row
     * @param {?=} tr
     * @return {?}
     */
    function (row, tr) {
        /** @type {?} */
        var idfield = this.idField();
        if (this._selections) {
            if (this.dt.singleSelect) {
                return this._selections[idfield] === row[idfield];
            }
            else {
                return this._selections[row[idfield]] !== undefined;
            }
        }
        return false;
    };
    /**
     * @param {?} field
     * @param {?} data
     * @param {?} formatter
     * @return {?}
     */
    DataTableBodyComponent.prototype.formatData = /**
     * @param {?} field
     * @param {?} data
     * @param {?} formatter
     * @return {?}
     */
    function (field, data, formatter) {
        /** @type {?} */
        var value = this.utils.getValue(field, data, true);
        return this.colFormatSer.format(value, data, formatter);
    };
    // 添加自定义设置列 单元格类样式
    // 添加自定义设置列 单元格类样式
    /**
     * @param {?} value
     * @param {?} col
     * @return {?}
     */
    DataTableBodyComponent.prototype.getTdClassName = 
    // 添加自定义设置列 单元格类样式
    /**
     * @param {?} value
     * @param {?} col
     * @return {?}
     */
    function (value, col) {
        /** @type {?} */
        var tempClassName = {};
        // 列类的样式
        if (col.className &&
            Object.prototype.toString.call(col.className) === '[object String]') {
            tempClassName[col.className] = true;
        }
        if (this.cellClassName && this.cellClassName(value, col)) {
            tempClassName[this.cellClassName(value, col)] = true;
        }
        return tempClassName;
    };
    /**
     * @param {?} row
     * @param {?} index
     * @return {?}
     */
    DataTableBodyComponent.prototype.createRowClassName = /**
     * @param {?} row
     * @param {?} index
     * @return {?}
     */
    function (row, index) {
        return this.rowClassName ? this.rowClassName(row, index) : '';
    };
    /**
     * @param {?} event
     * @param {?} col
     * @param {?} row
     * @return {?}
     */
    DataTableBodyComponent.prototype.onCellClick = /**
     * @param {?} event
     * @param {?} col
     * @param {?} row
     * @return {?}
     */
    function (event, col, row) {
        this.cellClick.emit({ event: event, col: col, row: row });
    };
    /**
     * @param {?} row
     * @param {?} index
     * @return {?}
     */
    DataTableBodyComponent.prototype.renderRowStyle = /**
     * @param {?} row
     * @param {?} index
     * @return {?}
     */
    function (row, index) {
        if (this.dt.rowStyler) {
            return this.dt.rowStyler({ data: row, index: index });
        }
        return '';
    };
    /**
     * @param {?} val
     * @param {?} row
     * @param {?} index
     * @param {?} col
     * @return {?}
     */
    DataTableBodyComponent.prototype.renderCellStyle = /**
     * @param {?} val
     * @param {?} row
     * @param {?} index
     * @param {?} col
     * @return {?}
     */
    function (val, row, index, col) {
        if (this.dt.cellStyler) {
            return this.dt.cellStyler({ value: val, data: row, index: index, col: col, field: col.field });
        }
        return '';
    };
    DataTableBodyComponent.decorators = [
        { type: Component, args: [{
                    selector: 'datatable-body',
                    template: "\n        <table\n            class=\"table\"\n            [class.table-sm]=\"size === 'small'\"\n            [class.table-hover]=\"dt.hover\"\n            [class.table-striped]=\"striped\"\n            [class.table-bordered]=\"bordered\"\n            [class.f-table-norecords]=\"!rows || !rows.length\"\n            style=\"border-collapse: separate;border-spacing: 0;\"\n        >\n            <colgroup>\n                <col class=\"dt-checkbox-cell\" *ngIf=\"!dt.singleSelect\" />\n                <col *ngFor=\"let col of columns\" [style.width]=\"col.width + 'px'\" />\n            </colgroup>\n\n            <tbody class=\"ui-table-tbody \" *ngIf=\"rows && rows.length\">\n                <tr\n                    *ngFor=\"let row of rows; trackBy: dt.trackByRows; let rowIndex = index\"\n                    [ngClass]=\"createRowClassName(row, rowIndex)\"\n                    (click)=\"selectedRow($event, rowIndex, row)\"\n                    [class.selected]=\"isSelected(row, tr)\" #tr\n                    [dblclick]=\"row\"\n                    [ngStyle]=\"renderRowStyle(row, rowIndex)\"\n                >\n                    <td class=\"dt-checkbox-cell datatable-fixed-left\" *ngIf=\"!dt.singleSelect\" \n                    [cell-styler]=\"{row: row, index: rowIndex}\">\n                        <dt-checkbox\n                            [checked]=\"isSelected(row, tr)\"\n                            (checkedChange)=\"onChecked($event, rowIndex, row)\"\n                        ></dt-checkbox>\n                    </td>\n                    <td\n                        [ngClass]=\"getTdClassName(row[col.field], col)\"\n                        *ngFor=\"let col of columns; let colIndex = index\"\n                        [style.textAlign]=\"col.align || 'left'\"\n                        \n                        (click)=\"onCellClick($event, col, row)\"\n                        [class.datatable-fixed-right]=\"col['fixed'] === 'right'\"\n                        [cell-styler]=\"{val:utils.getValue(col.field, row), row: row, index: rowIndex, col: col}\"\n                    >\n                        <ng-container *ngIf=\"!col.cellTempl; else cellTemp\">\n                            <span *ngIf=\"col.formatter\" [innerHTML]=\"formatData(col.field, row, col.formatter) | safe:'html'\" ></span>\n                            <!-- <span *ngIf=\"col.formatter\" [innerHTML]=\" col.field | getvalue: row | columnformatter: col : row | safe: 'html'\" ></span> -->\n                            <span *ngIf=\"!col.formatter\" [title]=\"utils.getValue(col.field, row)\"\n                             [textContent]=\"utils.getValue(col.field, row)\"></span>\n                        </ng-container>\n                        <ng-template\n                            #cellTemp\n                            [ngTemplateOutlet]=\"col.cellTempl\"\n                            [ngTemplateOutletContext]=\"{\n                                $implicit: row,\n                                rowIndex: rowIndex,\n                                value: row[col.field]\n                            }\"\n                        ></ng-template>\n                    </td>\n                </tr>\n            </tbody>\n\n            <tbody class=\"ui-table-tbody\" *ngIf=\"!rows || !rows.length\" #emptyTbody>\n                <tr class=\"f-table-norecords-row\">\n                    <td [attr.align]=\"'center'\"\n                        class=\"farris-treetable-emptydata\"\n                        [attr.colspan]=\"columns.length\"\n                    >\n                        <div\n                            class=\"f-table-norecords-content\"\n                            [innerHTML]=\"emptyMessage | safe: 'html'\"\n                        ></div>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    ",
                    styles: ["\n            .table td:focus-within {\n                box-shadow: inset 0 0 0 2px rgba(0, 0, 0, 0.13);\n            }\n            .table td div {\n                width: 100%;\n                height: 100%;\n            }\n            .table td input {\n                width: 100%;\n                height: 100%;\n                font-family: auto;\n                line-height: 1;\n                font-size: 13px;\n            }\n            .table td input:focus {\n                border: 0;\n            }\n            input[type='checkbox']:focus {\n                outline: none;\n            }\n\n            .f-table-norecords-row:hover {\n                background-color: transparent!important;\n                cursor: default!important;\n            }\n        "]
                }] }
    ];
    /** @nocollapse */
    DataTableBodyComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: DataTableService },
        { type: Renderer2 },
        { type: DataTableComponent, decorators: [{ type: Optional }] },
        { type: ColumnFormatService },
        { type: CommonUtils },
        { type: Injector }
    ]; };
    DataTableBodyComponent.propDecorators = {
        size: [{ type: Input }],
        hover: [{ type: Input }],
        bordered: [{ type: Input }],
        striped: [{ type: Input }],
        columns: [{ type: Input }],
        fixed: [{ type: Input }],
        rows: [{ type: Input }],
        rowClassName: [{ type: Input }],
        cellClassName: [{ type: Input }],
        rowDblClick: [{ type: Output }],
        selectRow: [{ type: Output }],
        cellEdit: [{ type: Output }],
        cellClick: [{ type: Output }],
        emptyTbodyElRef: [{ type: ViewChild, args: ['emptyTbody',] }]
    };
    return DataTableBodyComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DatatableFooterComponent = /** @class */ (function () {
    function DatatableFooterComponent() {
    }
    DatatableFooterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'datatable-footer',
                    template: "\n    <div class=\"table\"\n    [class.table-hover]=\"hover\">\n        <ng-container *ngIf=\"!tableFooter\">\n                <table class=\"table table-hover\">\n                        <colgroup>\n                            <col class=\"dt-checkbox-cell\" />\n                            <col *ngFor=\"let col of columns\" [style.width]=\"col.width + 'px'\" />\n                        </colgroup>\n                        <thead>\n                            <tr>\n                                <th class=\"dt-checkbox-cell\">\n                                    \n                                </th>\n                                <th  *ngFor=\"let col of columns\" [attr.align]=\"col.align\" >{{ col.title }}</th>\n                            </tr>\n                        </thead>\n                    </table>\n        </ng-container>\n</div>\n    "
                }] }
    ];
    /** @nocollapse */
    DatatableFooterComponent.ctorParameters = function () { return []; };
    DatatableFooterComponent.propDecorators = {
        hover: [{ type: Input }],
        columns: [{ type: Input }],
        tableFooter: [{ type: Input }, { type: ContentChild, args: [TemplateRef,] }]
    };
    return DatatableFooterComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DragColumnDirective = /** @class */ (function () {
    function DragColumnDirective(dt, ngzone, el, render) {
        this.dt = dt;
        this.ngzone = ngzone;
        this.el = el;
        this.render = render;
    }
    /**
     * @return {?}
     */
    DragColumnDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        // if (this.isEnable()) {
        //     this.ngzone.runOutsideAngular(() => {
        //         // this.resizer = document.createElement('span');
        //         // this.resizer.className = 'column-resizer';
        //         // this.el.nativeElement.appendChild(this.resizer);
        //         // this.render.addClass(this.el.nativeElement, 'resizable-column');
        //         this.resizer = this.el.nativeElement.querySelector('span.column-resizer');
        //         if (this.resizer) {
        //             this.resizerMouseDownListener = this.onMouseDown.bind(this);
        //             this.resizer.addEventListener('mousedown', this.resizerMouseDownListener);
        //         }
        //     });
        // }
    };
    /**
     * @return {?}
     */
    DragColumnDirective.prototype.isEnable = /**
     * @return {?}
     */
    function () {
        return this.dt.resizableColumns && !this.dt.hasFixed;
    };
    /**
     * @return {?}
     */
    DragColumnDirective.prototype.bindDocumentEvents = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngzone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.documentMouseMoveListener = _this.onMouseMove.bind(_this);
            document.addEventListener('mousemove', _this.documentMouseMoveListener);
            _this.documentMouseUpListener = _this.onMouseUp.bind(_this);
            document.addEventListener('mouseup', _this.documentMouseUpListener);
        }));
    };
    /**
     * @return {?}
     */
    DragColumnDirective.prototype.unbindDocumentEvents = /**
     * @return {?}
     */
    function () {
        if (this.documentMouseMoveListener) {
            document.removeEventListener('mousemove', this.documentMouseMoveListener);
            this.documentMouseMoveListener = null;
        }
        if (this.documentMouseUpListener) {
            document.removeEventListener('mouseup', this.documentMouseUpListener);
            this.documentMouseUpListener = null;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DragColumnDirective.prototype.onMouseDown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.dt.beginDrag(event);
        this.bindDocumentEvents();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DragColumnDirective.prototype.onMouseMove = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.dt.moveDrag(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DragColumnDirective.prototype.onMouseUp = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.dt.stopDrag(event, this.el.nativeElement);
        this.unbindDocumentEvents();
    };
    /**
     * @return {?}
     */
    DragColumnDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        // if (this.resizerMouseDownListener && this.resizer) {
        //     this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);
        // }
        this.unbindDocumentEvents();
    };
    DragColumnDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[drag-column]',
                    exportAs: 'resizeRef'
                },] }
    ];
    /** @nocollapse */
    DragColumnDirective.ctorParameters = function () { return [
        { type: DataTableComponent },
        { type: NgZone },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    return DragColumnDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CellStylerDirective = /** @class */ (function () {
    function CellStylerDirective(dtb, elRef, render) {
        this.dtb = dtb;
        this.elRef = elRef;
        this.render = render;
        this.options = null;
    }
    /**
     * @return {?}
     */
    CellStylerDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.dtb && this.options) {
            var _a = this.options, val = _a.val, row = _a.row, col = _a.col, index = _a.index;
            /** @type {?} */
            var _sty_1 = null;
            if (!col) {
                _sty_1 = this.dtb.renderRowStyle(row, index) || {};
            }
            else {
                /** @type {?} */
                var rowStyle = this.dtb.renderRowStyle(row, index) || {};
                /** @type {?} */
                var cellStyle = this.dtb.renderCellStyle(val, row, index, col) || {};
                _sty_1 = cellStyle;
                if (col.fixed === 'right') {
                    /** @type {?} */
                    var hasBackground = Object.keys(cellStyle).find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        return ['background', 'background-color', 'backgroundcolor'].indexOf(n.toLowerCase()) > -1;
                    }));
                    if (hasBackground !== null) {
                        _sty_1 = Object.assign(cellStyle, rowStyle);
                    }
                }
            }
            if (_sty_1) {
                Object.keys(_sty_1).forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    _this.elRef.nativeElement.style.setProperty(n, _sty_1[n], 'important');
                }));
            }
        }
    };
    CellStylerDirective.decorators = [
        { type: Directive, args: [{ selector: '[cell-styler]' },] }
    ];
    /** @nocollapse */
    CellStylerDirective.ctorParameters = function () { return [
        { type: DataTableBodyComponent },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    CellStylerDirective.propDecorators = {
        options: [{ type: Input, args: ['cell-styler',] }]
    };
    return CellStylerDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DataTableModule = /** @class */ (function () {
    function DataTableModule() {
    }
    DataTableModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        PerfectScrollbarModule,
                        PaginationModule,
                        FarrisCommonModule.forRoot(),
                        InputGroupModule,
                        DataColumnModule.forRoot(),
                        FarrisFormsModule
                    ],
                    exports: [
                        DataTableComponent, DataTableHeaderComponent,
                        ColumnDirective, DataTableBodyComponent,
                        FarrisCommonModule, DatatableFooterComponent,
                        DragColumnDirective
                    ],
                    declarations: [
                        DataTableComponent, DataTableHeaderComponent,
                        ColumnDirective, DragColumnDirective,
                        DataTableBodyComponent, DTCheckboxComponent,
                        DatatableFooterComponent, DTDblClickRowDirective,
                        CellStylerDirective
                    ],
                    providers: [],
                },] }
    ];
    return DataTableModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { DataTableHeaderComponent, DTDblClickRowDirective, DataTableBodyComponent, DatatableFooterComponent, DTCheckboxComponent, ColumnDirective, convertColumns, deepCopy, toUpper, DataTableComponent, DataTableService, DragColumnDirective, DataTableModule, CellStylerDirective };

//# sourceMappingURL=farris-ui-datatable.js.map