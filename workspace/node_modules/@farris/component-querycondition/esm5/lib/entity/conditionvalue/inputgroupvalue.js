/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/inputgroupvalue.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlType } from '../controltype';
import { cloneDeep } from 'lodash-es';
var InputGroupValue = /** @class */ (function () {
    function InputGroupValue(data) {
        if (data === void 0) { data = { value: [], textValue: undefined, textField: undefined, isInputText: undefined }; }
        this.value = data.value;
        // this.textValue = data.textValue ? data.textValue.trim() : '';
        this.textValue = data.textValue ? data.textValue : '';
        this.textField = data.textField;
        this.isInputText = data.isInputText;
    }
    /**
     * @return {?}
     */
    InputGroupValue.prototype.getControlType = /**
     * @return {?}
     */
    function () {
        return ControlType.InputGroup;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    InputGroupValue.prototype.setOriginalValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        throw new Error("Method not implemented.");
    };
    /**
     * @return {?}
     */
    InputGroupValue.prototype.getOriginalValue = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var args = this.textField ? this.textField.split('.') : [];
        /** @type {?} */
        var textArr = this.value.map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return _this.getPropValue(item, cloneDeep(args)); }));
        return textArr && textArr.length ? textArr.join(',') : '';
    };
    /**
     * @return {?}
     */
    InputGroupValue.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.value = [];
        this.textValue = undefined;
        this.textField = undefined;
        this.isInputText = undefined;
    };
    /**
     * @return {?}
     */
    InputGroupValue.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return !this.textValue;
    };
    /**
     * @param {?} targetField
     * @return {?}
     */
    InputGroupValue.prototype.getTextValue = /**
     * @param {?} targetField
     * @return {?}
     */
    function (targetField) {
        var _this = this;
        /** @type {?} */
        var args = targetField.split('.');
        /** @type {?} */
        var textArr = this.value.map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return _this.getPropValue(item, cloneDeep(args)); }));
        return textArr && textArr.length ? textArr.join(',') : '';
    };
    /**
     * @param {?} item
     * @param {?} args
     * @return {?}
     */
    InputGroupValue.prototype.getPropValue = /**
     * @param {?} item
     * @param {?} args
     * @return {?}
     */
    function (item, args) {
        if (args.length > 1) {
            /** @type {?} */
            var arg = args.shift();
            return item[arg] ? this.getPropValue(item[arg], args) : '';
        }
        return item[args[0]];
    };
    return InputGroupValue;
}());
export { InputGroupValue };
if (false) {
    /** @type {?} */
    InputGroupValue.prototype.value;
    /** @type {?} */
    InputGroupValue.prototype.textValue;
    /** @type {?} */
    InputGroupValue.prototype.textField;
    /** @type {?} */
    InputGroupValue.prototype.isInputText;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRncm91cHZhbHVlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21wb25lbnQtcXVlcnljb25kaXRpb24vIiwic291cmNlcyI6WyJsaWIvZW50aXR5L2NvbmRpdGlvbnZhbHVlL2lucHV0Z3JvdXB2YWx1ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRXRDO0lBb0NJLHlCQUFZLElBS3VFO1FBTHZFLHFCQUFBLEVBQUEsU0FLUCxLQUFLLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFDO1FBQy9FLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN4QixnRUFBZ0U7UUFDaEUsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDdEQsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUN4QyxDQUFDOzs7O0lBN0NELHdDQUFjOzs7SUFBZDtRQUNJLE9BQU8sV0FBVyxDQUFDLFVBQVUsQ0FBQztJQUNsQyxDQUFDOzs7OztJQUVELDBDQUFnQjs7OztJQUFoQixVQUFpQixLQUFVO1FBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUMvQyxDQUFDOzs7O0lBRUQsMENBQWdCOzs7SUFBaEI7UUFBQSxpQkFJQzs7WUFIUyxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7O1lBQ3RELE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUc7Ozs7UUFBQyxVQUFBLElBQUksSUFBSSxPQUFBLEtBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUF4QyxDQUF3QyxFQUFDO1FBQ2hGLE9BQU8sT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUM3RCxDQUFDOzs7O0lBRUQsb0NBQVU7OztJQUFWO1FBQ0ksSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxTQUFTLENBQUM7SUFDakMsQ0FBQzs7OztJQUVELGlDQUFPOzs7SUFBUDtRQUNJLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzNCLENBQUM7Ozs7O0lBd0JELHNDQUFZOzs7O0lBQVosVUFBYSxXQUFtQjtRQUFoQyxpQkFJQzs7WUFIUyxJQUFJLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7O1lBQzdCLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUc7Ozs7UUFBQyxVQUFBLElBQUksSUFBSSxPQUFBLEtBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUF4QyxDQUF3QyxFQUFDO1FBQ2hGLE9BQU8sT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUM3RCxDQUFDOzs7Ozs7SUFFRCxzQ0FBWTs7Ozs7SUFBWixVQUFhLElBQVMsRUFBRSxJQUFtQjtRQUN2QyxJQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFDOztnQkFDVCxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUN4QixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztTQUM5RDtRQUNELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFDTCxzQkFBQztBQUFELENBQUMsQUE5REQsSUE4REM7Ozs7SUFsQ0csZ0NBQWE7O0lBRWIsb0NBQWtCOztJQUVsQixvQ0FBa0I7O0lBRWxCLHNDQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElWYWx1ZSB9IGZyb20gJy4vaXZhbHVlJztcclxuaW1wb3J0IHsgQ29udHJvbFR5cGUgfSBmcm9tICcuLi9jb250cm9sdHlwZSc7XHJcbmltcG9ydCB7IGNsb25lRGVlcCB9IGZyb20gJ2xvZGFzaC1lcyc7XHJcblxyXG5leHBvcnQgY2xhc3MgSW5wdXRHcm91cFZhbHVlIGltcGxlbWVudHMgSVZhbHVlIHtcclxuXHJcbiAgICBnZXRDb250cm9sVHlwZSgpOiBDb250cm9sVHlwZSB7XHJcbiAgICAgICAgcmV0dXJuIENvbnRyb2xUeXBlLklucHV0R3JvdXA7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0T3JpZ2luYWxWYWx1ZSh2YWx1ZTogYW55KSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0T3JpZ2luYWxWYWx1ZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IGFyZ3MgPSB0aGlzLnRleHRGaWVsZCA/IHRoaXMudGV4dEZpZWxkLnNwbGl0KCcuJykgOiBbXTtcclxuICAgICAgICBjb25zdCB0ZXh0QXJyID0gdGhpcy52YWx1ZS5tYXAoaXRlbSA9PiB0aGlzLmdldFByb3BWYWx1ZShpdGVtLCBjbG9uZURlZXAoYXJncykpKTtcclxuICAgICAgICByZXR1cm4gdGV4dEFyciAmJiB0ZXh0QXJyLmxlbmd0aCA/IHRleHRBcnIuam9pbignLCcpOiAnJztcclxuICAgIH1cclxuXHJcbiAgICBjbGVhclZhbHVlKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSBbXTtcclxuICAgICAgICB0aGlzLnRleHRWYWx1ZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLnRleHRGaWVsZCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLmlzSW5wdXRUZXh0ID0gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIGlzRW1wdHkoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuICF0aGlzLnRleHRWYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvL+mAmui/h+W8ueeql+i/lOWbnueahOiLpeW5suS4quWAvOWvueixoeaehOaIkOeahOaVsOe7hFxyXG4gICAgdmFsdWU6IGFueVtdO1xyXG4gICAgLy/mjqfku7blhoXmmL7npLrnmoTlgLxcclxuICAgIHRleHRWYWx1ZTogc3RyaW5nO1xyXG4gICAgLy/lvLnnqpfmqKHlvI/kuIvvvIzlj5bliJfooajkuK3lk6rkuKrlrZfmrrXnmoTlgLzmmKDlsITliLDlvZPliY3lrZfmrrVcclxuICAgIHRleHRGaWVsZDogc3RyaW5nO1xyXG4gICAgLy/mmK/lkKbmmK/miYvliqjovpPlhaXnmoTlgLxcclxuICAgIGlzSW5wdXRUZXh0OiBib29sZWFuO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGRhdGE6IHtcclxuICAgICAgICB2YWx1ZTogYW55LFxyXG4gICAgICAgIHRleHRWYWx1ZTogc3RyaW5nLFxyXG4gICAgICAgIHRleHRGaWVsZDogc3RyaW5nLFxyXG4gICAgICAgIGlzSW5wdXRUZXh0OiBib29sZWFuXHJcbiAgICB9ID0ge3ZhbHVlOiBbXSwgdGV4dFZhbHVlOiB1bmRlZmluZWQsIHRleHRGaWVsZDogdW5kZWZpbmVkLCBpc0lucHV0VGV4dDogdW5kZWZpbmVkfSl7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IGRhdGEudmFsdWU7XHJcbiAgICAgICAgLy8gdGhpcy50ZXh0VmFsdWUgPSBkYXRhLnRleHRWYWx1ZSA/IGRhdGEudGV4dFZhbHVlLnRyaW0oKSA6ICcnO1xyXG4gICAgICAgIHRoaXMudGV4dFZhbHVlID0gZGF0YS50ZXh0VmFsdWUgPyBkYXRhLnRleHRWYWx1ZSA6ICcnO1xyXG4gICAgICAgIHRoaXMudGV4dEZpZWxkID0gZGF0YS50ZXh0RmllbGQ7XHJcbiAgICAgICAgdGhpcy5pc0lucHV0VGV4dCA9IGRhdGEuaXNJbnB1dFRleHQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VGV4dFZhbHVlKHRhcmdldEZpZWxkOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IGFyZ3MgPSB0YXJnZXRGaWVsZC5zcGxpdCgnLicpO1xyXG4gICAgICAgIGNvbnN0IHRleHRBcnIgPSB0aGlzLnZhbHVlLm1hcChpdGVtID0+IHRoaXMuZ2V0UHJvcFZhbHVlKGl0ZW0sIGNsb25lRGVlcChhcmdzKSkpO1xyXG4gICAgICAgIHJldHVybiB0ZXh0QXJyICYmIHRleHRBcnIubGVuZ3RoID8gdGV4dEFyci5qb2luKCcsJyk6ICcnO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFByb3BWYWx1ZShpdGVtOiBhbnksIGFyZ3M6IEFycmF5PHN0cmluZz4pOiBhbnl7XHJcbiAgICAgICAgaWYoYXJncy5sZW5ndGggPiAxKXtcclxuICAgICAgICAgICAgY29uc3QgYXJnID0gYXJncy5zaGlmdCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gaXRlbVthcmddID8gdGhpcy5nZXRQcm9wVmFsdWUoaXRlbVthcmddLCBhcmdzKSA6ICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaXRlbVthcmdzWzBdXTtcclxuICAgIH1cclxufSJdfQ==