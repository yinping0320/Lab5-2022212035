/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/combolookup-value.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlType } from "../controltype";
import { cloneDeep } from 'lodash-es';
var ComboLookUpValue = /** @class */ (function () {
    function ComboLookUpValue(data) {
        if (data === void 0) { data = { value: [], valueField: undefined, textValue: undefined }; }
        if (data.textValue) { //新结构，value是数组
            this.valueField = data.valueField;
            this.value = data.value;
            this.textValue = data.textValue;
        }
        else { //旧结构，value是对象
            this.valueField = data.valueField ? data.valueField : '';
            this.value = (data.value && data.value.data) ? [data.value.data] : [];
            this.textValue = 'help-text-value-null'; //旧结构无textValue属性
        }
    }
    /**
     * @return {?}
     */
    ComboLookUpValue.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.value = [];
        this.valueField = undefined;
        this.textValue = undefined;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    ComboLookUpValue.prototype.setOriginalValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        throw new Error("Method not implemented.");
    };
    /**
     * @return {?}
     */
    ComboLookUpValue.prototype.getOriginalValue = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var args = this.valueField.split('.');
        /** @type {?} */
        var valueArr = this.value.map((/**
         * @param {?} helpItem
         * @return {?}
         */
        function (helpItem) { return _this.getPropValue(helpItem, cloneDeep(args)); }));
        return valueArr && valueArr.length ? valueArr.join(',') : '';
    };
    /**
     * @return {?}
     */
    ComboLookUpValue.prototype.getControlType = /**
     * @return {?}
     */
    function () {
        return ControlType.ComboLookUp;
    };
    /**
     * @return {?}
     */
    ComboLookUpValue.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return !this.valueField;
    };
    /**
     * @param {?} helpItem
     * @param {?} args
     * @return {?}
     */
    ComboLookUpValue.prototype.getPropValue = /**
     * @param {?} helpItem
     * @param {?} args
     * @return {?}
     */
    function (helpItem, args) {
        if (args.length > 1) {
            /** @type {?} */
            var arg = args.shift();
            return helpItem[arg] ? this.getPropValue(helpItem[arg], args) : null;
        }
        return helpItem[args[0]];
    };
    /**
     * @param {?} textField
     * @return {?}
     */
    ComboLookUpValue.prototype.getTextValue = /**
     * @param {?} textField
     * @return {?}
     */
    function (textField) {
        var _this = this;
        /** @type {?} */
        var args = textField.split('.');
        /** @type {?} */
        var textArr = this.value.map((/**
         * @param {?} helpItem
         * @return {?}
         */
        function (helpItem) { return _this.getPropValue(helpItem, cloneDeep(args)); }));
        return textArr && textArr.length ? textArr.join(',') : '';
    };
    return ComboLookUpValue;
}());
export { ComboLookUpValue };
if (false) {
    /** @type {?} */
    ComboLookUpValue.prototype.valueField;
    /** @type {?} */
    ComboLookUpValue.prototype.value;
    /** @type {?} */
    ComboLookUpValue.prototype.textValue;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tYm9sb29rdXAtdmFsdWUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbXBvbmVudC1xdWVyeWNvbmRpdGlvbi8iLCJzb3VyY2VzIjpbImxpYi9lbnRpdHkvY29uZGl0aW9udmFsdWUvY29tYm9sb29rdXAtdmFsdWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUV0QztJQXNCSSwwQkFBWSxJQUlnRDtRQUpoRCxxQkFBQSxFQUFBLFNBSVAsS0FBSyxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUM7UUFDeEQsSUFBRyxJQUFJLENBQUMsU0FBUyxFQUFDLEVBQUMsY0FBYztZQUM3QixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7WUFDbEMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQ3hCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztTQUNuQzthQUFJLEVBQUMsY0FBYztZQUNoQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUN6RCxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUN0RSxJQUFJLENBQUMsU0FBUyxHQUFHLHNCQUFzQixDQUFDLENBQUMsaUJBQWlCO1NBQzdEO0lBRUwsQ0FBQzs7OztJQXBDRCxxQ0FBVTs7O0lBQVY7UUFDSSxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFJLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQztRQUM1QixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztJQUMvQixDQUFDOzs7OztJQUNELDJDQUFnQjs7OztJQUFoQixVQUFpQixLQUFVO1FBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUMvQyxDQUFDOzs7O0lBQ0QsMkNBQWdCOzs7SUFBaEI7UUFBQSxpQkFJQzs7WUFIUyxJQUFJLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDOztZQUNqQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHOzs7O1FBQUMsVUFBQSxRQUFRLElBQUksT0FBQSxLQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBNUMsQ0FBNEMsRUFBQztRQUN6RixPQUFPLFFBQVEsSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDakUsQ0FBQzs7OztJQUNELHlDQUFjOzs7SUFBZDtRQUNJLE9BQU8sV0FBVyxDQUFDLFdBQVcsQ0FBQztJQUNuQyxDQUFDOzs7O0lBc0JELGtDQUFPOzs7SUFBUDtRQUNJLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQzVCLENBQUM7Ozs7OztJQUVELHVDQUFZOzs7OztJQUFaLFVBQWEsUUFBYSxFQUFFLElBQW1CO1FBQzNDLElBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUM7O2dCQUNULEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ3hCLE9BQU8sUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1NBQ3hFO1FBQ0QsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0IsQ0FBQzs7Ozs7SUFFRCx1Q0FBWTs7OztJQUFaLFVBQWEsU0FBaUI7UUFBOUIsaUJBSUM7O1lBSFMsSUFBSSxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDOztZQUMzQixPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHOzs7O1FBQUMsVUFBQSxRQUFRLElBQUksT0FBQSxLQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBNUMsQ0FBNEMsRUFBQztRQUN4RixPQUFPLE9BQU8sSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDOUQsQ0FBQztJQUVMLHVCQUFDO0FBQUQsQ0FBQyxBQXhERCxJQXdEQzs7OztJQXRDRyxzQ0FBa0I7O0lBQ2xCLGlDQUFZOztJQUNaLHFDQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElWYWx1ZSB9IGZyb20gXCIuL2l2YWx1ZVwiO1xyXG5pbXBvcnQgeyBDb250cm9sVHlwZSB9IGZyb20gXCIuLi9jb250cm9sdHlwZVwiO1xyXG5pbXBvcnQgeyBjbG9uZURlZXAgfSBmcm9tICdsb2Rhc2gtZXMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIENvbWJvTG9va1VwVmFsdWUgaW1wbGVtZW50cyBJVmFsdWV7XHJcbiAgICBjbGVhclZhbHVlKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSBbXTtcclxuICAgICAgICB0aGlzLnZhbHVlRmllbGQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy50ZXh0VmFsdWUgPSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgICBzZXRPcmlnaW5hbFZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuICAgIH1cclxuICAgIGdldE9yaWdpbmFsVmFsdWUoKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCBhcmdzID0gdGhpcy52YWx1ZUZpZWxkLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgY29uc3QgdmFsdWVBcnIgPSB0aGlzLnZhbHVlLm1hcChoZWxwSXRlbSA9PiB0aGlzLmdldFByb3BWYWx1ZShoZWxwSXRlbSwgY2xvbmVEZWVwKGFyZ3MpKSk7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlQXJyICYmIHZhbHVlQXJyLmxlbmd0aCA/IHZhbHVlQXJyLmpvaW4oJywnKSA6ICcnO1xyXG4gICAgfVxyXG4gICAgZ2V0Q29udHJvbFR5cGUoKTogQ29udHJvbFR5cGUge1xyXG4gICAgICAgIHJldHVybiBDb250cm9sVHlwZS5Db21ib0xvb2tVcDtcclxuICAgIH1cclxuXHJcbiAgICB2YWx1ZUZpZWxkOnN0cmluZztcclxuICAgIHZhbHVlOmFueVtdO1xyXG4gICAgdGV4dFZhbHVlOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoZGF0YToge1xyXG4gICAgICAgIHZhbHVlOiBhbnksIFxyXG4gICAgICAgIHZhbHVlRmllbGQ6IHN0cmluZyxcclxuICAgICAgICB0ZXh0VmFsdWU6IHN0cmluZztcclxuICAgIH0gPSB7dmFsdWU6IFtdLCB2YWx1ZUZpZWxkOiB1bmRlZmluZWQsIHRleHRWYWx1ZTogdW5kZWZpbmVkfSl7XHJcbiAgICAgICAgaWYoZGF0YS50ZXh0VmFsdWUpey8v5paw57uT5p6E77yMdmFsdWXmmK/mlbDnu4RcclxuICAgICAgICAgICAgdGhpcy52YWx1ZUZpZWxkID0gZGF0YS52YWx1ZUZpZWxkO1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gZGF0YS52YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy50ZXh0VmFsdWUgPSBkYXRhLnRleHRWYWx1ZTtcclxuICAgICAgICB9ZWxzZXsvL+aXp+e7k+aehO+8jHZhbHVl5piv5a+56LGhXHJcbiAgICAgICAgICAgIHRoaXMudmFsdWVGaWVsZCA9IGRhdGEudmFsdWVGaWVsZCA/IGRhdGEudmFsdWVGaWVsZCA6ICcnO1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gKGRhdGEudmFsdWUgJiYgZGF0YS52YWx1ZS5kYXRhKSA/IFtkYXRhLnZhbHVlLmRhdGFdIDogW107XHJcbiAgICAgICAgICAgIHRoaXMudGV4dFZhbHVlID0gJ2hlbHAtdGV4dC12YWx1ZS1udWxsJzsgLy/ml6fnu5PmnoTml6B0ZXh0VmFsdWXlsZ7mgKdcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG4gICAgaXNFbXB0eSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gIXRoaXMudmFsdWVGaWVsZDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRQcm9wVmFsdWUoaGVscEl0ZW06IGFueSwgYXJnczogQXJyYXk8c3RyaW5nPik6IGFueXtcclxuICAgICAgICBpZihhcmdzLmxlbmd0aCA+IDEpe1xyXG4gICAgICAgICAgICBjb25zdCBhcmcgPSBhcmdzLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgIHJldHVybiBoZWxwSXRlbVthcmddID8gdGhpcy5nZXRQcm9wVmFsdWUoaGVscEl0ZW1bYXJnXSwgYXJncykgOiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaGVscEl0ZW1bYXJnc1swXV07XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VGV4dFZhbHVlKHRleHRGaWVsZDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCBhcmdzID0gdGV4dEZpZWxkLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgY29uc3QgdGV4dEFyciA9IHRoaXMudmFsdWUubWFwKGhlbHBJdGVtID0+IHRoaXMuZ2V0UHJvcFZhbHVlKGhlbHBJdGVtLCBjbG9uZURlZXAoYXJncykpKTtcclxuICAgICAgICByZXR1cm4gdGV4dEFyciAmJiB0ZXh0QXJyLmxlbmd0aCA/IHRleHRBcnIuam9pbignLCcpIDogJyc7XHJcbiAgICB9XHJcblxyXG59Il19