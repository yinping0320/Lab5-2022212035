/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/daterangevalue.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlType } from "../controltype";
var DateRangeValue = /** @class */ (function () {
    function DateRangeValue(value) {
        if (value === void 0) { value = { startTime: '', endTime: '' }; }
        this.startTime = value.startTime;
        this.endTime = value.endTime;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    DateRangeValue.prototype.setOriginalValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value.formatted) {
            this.startTime = value.formatted.split(value.delimiter)[0];
            this.endTime = value.formatted.split(value.delimiter)[1];
        }
        else {
            this.clearValue();
        }
    };
    /**
     * @return {?}
     */
    DateRangeValue.prototype.getOriginalValue = /**
     * @return {?}
     */
    function () {
        if (!this.startTime && !this.endTime) {
            return '';
        }
        return this.startTime + "~" + this.endTime;
    };
    /**
     * @return {?}
     */
    DateRangeValue.prototype.getControlType = /**
     * @return {?}
     */
    function () {
        return ControlType.DateRange;
    };
    /**
     * @return {?}
     */
    DateRangeValue.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.startTime = undefined;
        this.endTime = undefined;
    };
    /**
     * @return {?}
     */
    DateRangeValue.prototype.isEmpty = /**
     * @return {?}
     */
    function () {
        return !this.startTime && !this.endTime;
    };
    return DateRangeValue;
}());
export { DateRangeValue };
if (false) {
    /** @type {?} */
    DateRangeValue.prototype.startTime;
    /** @type {?} */
    DateRangeValue.prototype.endTime;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXJhbmdldmFsdWUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbXBvbmVudC1xdWVyeWNvbmRpdGlvbi8iLCJzb3VyY2VzIjpbImxpYi9lbnRpdHkvY29uZGl0aW9udmFsdWUvZGF0ZXJhbmdldmFsdWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFN0M7SUF5QkUsd0JBQVksS0FBOEU7UUFBOUUsc0JBQUEsRUFBQSxVQUFrRCxTQUFTLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUU7UUFDeEYsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQztJQUMvQixDQUFDOzs7OztJQTNCRCx5Q0FBZ0I7Ozs7SUFBaEIsVUFBaUIsS0FBK0M7UUFDOUQsSUFBSSxLQUFLLENBQUMsU0FBUyxFQUFFO1lBQ25CLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNELElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzFEO2FBQU07WUFDTCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7U0FDbkI7SUFDSCxDQUFDOzs7O0lBQ0QseUNBQWdCOzs7SUFBaEI7UUFDRyxJQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUM7WUFDbkMsT0FBTyxFQUFFLENBQUM7U0FDVjtRQUNGLE9BQVUsSUFBSSxDQUFDLFNBQVMsU0FBSSxJQUFJLENBQUMsT0FBUyxDQUFDO0lBQzdDLENBQUM7Ozs7SUFDRCx1Q0FBYzs7O0lBQWQ7UUFDRSxPQUFPLFdBQVcsQ0FBQyxTQUFTLENBQUM7SUFDL0IsQ0FBQzs7OztJQUNELG1DQUFVOzs7SUFBVjtRQUNFLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDO0lBQzNCLENBQUM7Ozs7SUFRRCxnQ0FBTzs7O0lBQVA7UUFDRSxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDMUMsQ0FBQztJQUNILHFCQUFDO0FBQUQsQ0FBQyxBQWhDRCxJQWdDQzs7OztJQVZDLG1DQUFrQjs7SUFDbEIsaUNBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVZhbHVlIH0gZnJvbSBcIi4vaXZhbHVlXCI7XHJcbmltcG9ydCB7IENvbnRyb2xUeXBlIH0gZnJvbSBcIi4uL2NvbnRyb2x0eXBlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgRGF0ZVJhbmdlVmFsdWUgaW1wbGVtZW50cyBJVmFsdWUge1xyXG4gIHNldE9yaWdpbmFsVmFsdWUodmFsdWU6IHsgZm9ybWF0dGVkOiBzdHJpbmcsIGRlbGltaXRlcjogc3RyaW5nIH0pOiB2b2lkIHtcclxuICAgIGlmICh2YWx1ZS5mb3JtYXR0ZWQpIHtcclxuICAgICAgdGhpcy5zdGFydFRpbWUgPSB2YWx1ZS5mb3JtYXR0ZWQuc3BsaXQodmFsdWUuZGVsaW1pdGVyKVswXTtcclxuICAgICAgdGhpcy5lbmRUaW1lID0gdmFsdWUuZm9ybWF0dGVkLnNwbGl0KHZhbHVlLmRlbGltaXRlcilbMV07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmNsZWFyVmFsdWUoKTtcclxuICAgIH1cclxuICB9XHJcbiAgZ2V0T3JpZ2luYWxWYWx1ZSgpIHtcclxuICAgICBpZighdGhpcy5zdGFydFRpbWUgJiYgIXRoaXMuZW5kVGltZSl7XHJcbiAgICAgIHJldHVybiAnJztcclxuICAgICB9XHJcbiAgICByZXR1cm4gYCR7dGhpcy5zdGFydFRpbWV9fiR7dGhpcy5lbmRUaW1lfWA7XHJcbiAgfVxyXG4gIGdldENvbnRyb2xUeXBlKCk6IENvbnRyb2xUeXBlIHtcclxuICAgIHJldHVybiBDb250cm9sVHlwZS5EYXRlUmFuZ2U7XHJcbiAgfVxyXG4gIGNsZWFyVmFsdWUoKTogdm9pZCB7XHJcbiAgICB0aGlzLnN0YXJ0VGltZSA9IHVuZGVmaW5lZDtcclxuICAgIHRoaXMuZW5kVGltZSA9IHVuZGVmaW5lZDtcclxuICB9XHJcbiAgc3RhcnRUaW1lOiBzdHJpbmc7XHJcbiAgZW5kVGltZTogc3RyaW5nO1xyXG5cclxuICBjb25zdHJ1Y3Rvcih2YWx1ZTogeyBzdGFydFRpbWU6IHN0cmluZywgZW5kVGltZTogc3RyaW5nIH0gPSB7IHN0YXJ0VGltZTogJycsIGVuZFRpbWU6ICcnIH0pIHtcclxuICAgIHRoaXMuc3RhcnRUaW1lID0gdmFsdWUuc3RhcnRUaW1lO1xyXG4gICAgdGhpcy5lbmRUaW1lID0gdmFsdWUuZW5kVGltZTtcclxuICB9XHJcbiAgaXNFbXB0eSgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAhdGhpcy5zdGFydFRpbWUgJiYgIXRoaXMuZW5kVGltZTtcclxuICB9XHJcbn1cclxuIl19