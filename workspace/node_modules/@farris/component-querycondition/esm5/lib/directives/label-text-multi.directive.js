/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/label-text-multi.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Injector, ElementRef, NgZone } from '@angular/core';
var LabelTextMultiDirective = /** @class */ (function () {
    function LabelTextMultiDirective(el, injector) {
        this.el = el;
        this.injector = injector;
        this.multiCls = 'farris-group-multi-label';
        this._enableMulti = false;
        // 获取ngZone
        this.ngZone = null;
        if (!this.ngZone) {
            this.ngZone = this.injector.get(NgZone, null);
        }
    }
    Object.defineProperty(LabelTextMultiDirective.prototype, "enableMulti", {
        get: /**
         * @return {?}
         */
        function () {
            return this._enableMulti;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._enableMulti = value;
            this.judgeMulti();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    LabelTextMultiDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    LabelTextMultiDirective.prototype.judgeMulti = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._enableMulti) {
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var textEl = _this.el.nativeElement.querySelector('.farris-label-text');
                    if (!textEl) {
                        return;
                    }
                    // 超出
                    if (textEl.clientWidth < textEl.scrollWidth) {
                        _this.el.nativeElement.className = _this.el.nativeElement.className + ' ' + _this.multiCls;
                    }
                    else {
                        _this.el.nativeElement.className = _this.el.nativeElement.className.replace(_this.multiCls, '');
                    }
                }), 20);
            }));
        }
    };
    LabelTextMultiDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[label-text-multi]'
                },] }
    ];
    /** @nocollapse */
    LabelTextMultiDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Injector }
    ]; };
    LabelTextMultiDirective.propDecorators = {
        enableMulti: [{ type: Input, args: ['label-text-multi',] }]
    };
    return LabelTextMultiDirective;
}());
export { LabelTextMultiDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    LabelTextMultiDirective.prototype.multiCls;
    /**
     * @type {?}
     * @private
     */
    LabelTextMultiDirective.prototype._enableMulti;
    /**
     * @type {?}
     * @private
     */
    LabelTextMultiDirective.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    LabelTextMultiDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    LabelTextMultiDirective.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFiZWwtdGV4dC1tdWx0aS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbXBvbmVudC1xdWVyeWNvbmRpdGlvbi8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL2xhYmVsLXRleHQtbXVsdGkuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQVUsUUFBUSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdkY7SUFnQkksaUNBQW9CLEVBQWMsRUFBVSxRQUFrQjtRQUExQyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQVp0RCxhQUFRLEdBQUcsMEJBQTBCLENBQUM7UUFDdEMsaUJBQVksR0FBRyxLQUFLLENBQUM7O1FBVXJCLFdBQU0sR0FBRyxJQUFJLENBQUM7UUFFbEIsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFTLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztTQUN6RDtJQUNMLENBQUM7SUFkRCxzQkFDSSxnREFBVzs7OztRQUlmO1lBQ0ksT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFBO1FBQzVCLENBQUM7Ozs7O1FBUEQsVUFDZ0IsS0FBYztZQUMxQixJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztZQUMxQixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDdEIsQ0FBQzs7O09BQUE7Ozs7SUFZRCwwQ0FBUTs7O0lBQVI7SUFFQSxDQUFDOzs7O0lBQ0QsNENBQVU7OztJQUFWO1FBQUEsaUJBbUJDO1FBbEJHLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNuQixJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQjs7O1lBQUM7Z0JBRTFCLFVBQVU7OztnQkFBQzs7d0JBQ0gsTUFBTSxHQUFHLEtBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQztvQkFDdEUsSUFBSSxDQUFDLE1BQU0sRUFBRTt3QkFDVCxPQUFPO3FCQUNWO29CQUNELEtBQUs7b0JBQ0wsSUFBSSxNQUFNLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxXQUFXLEVBQUU7d0JBQ3pDLEtBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFNBQVMsR0FBRyxLQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEdBQUcsR0FBRyxHQUFHLEtBQUksQ0FBQyxRQUFRLENBQUM7cUJBQzNGO3lCQUFNO3dCQUNILEtBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFNBQVMsR0FBRyxLQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEtBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7cUJBQ2hHO2dCQUNMLENBQUMsR0FBRSxFQUFFLENBQUMsQ0FBQztZQUNYLENBQUMsRUFBQyxDQUFDO1NBRU47SUFDTCxDQUFDOztnQkE1Q0osU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxvQkFBb0I7aUJBQ2pDOzs7O2dCQUo0QyxVQUFVO2dCQUFwQixRQUFROzs7OEJBUXRDLEtBQUssU0FBQyxrQkFBa0I7O0lBdUM3Qiw4QkFBQztDQUFBLEFBN0NELElBNkNDO1NBMUNZLHVCQUF1Qjs7Ozs7O0lBQ2hDLDJDQUE4Qzs7Ozs7SUFDOUMsK0NBQTZCOzs7OztJQVU3Qix5Q0FBc0I7Ozs7O0lBQ1YscUNBQXNCOzs7OztJQUFFLDJDQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE9uSW5pdCwgSW5qZWN0b3IsIEVsZW1lbnRSZWYsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1tsYWJlbC10ZXh0LW11bHRpXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIExhYmVsVGV4dE11bHRpRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcclxuICAgIHByaXZhdGUgbXVsdGlDbHMgPSAnZmFycmlzLWdyb3VwLW11bHRpLWxhYmVsJztcclxuICAgIHByaXZhdGUgX2VuYWJsZU11bHRpID0gZmFsc2U7XHJcbiAgICBASW5wdXQoJ2xhYmVsLXRleHQtbXVsdGknKVxyXG4gICAgc2V0IGVuYWJsZU11bHRpKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5fZW5hYmxlTXVsdGkgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLmp1ZGdlTXVsdGkoKTtcclxuICAgIH1cclxuICAgIGdldCBlbmFibGVNdWx0aSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZW5hYmxlTXVsdGlcclxuICAgIH1cclxuICAgIC8vIOiOt+WPlm5nWm9uZVxyXG4gICAgcHJpdmF0ZSBuZ1pvbmUgPSBudWxsO1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IpIHtcclxuICAgICAgICBpZiAoIXRoaXMubmdab25lKSB7XHJcbiAgICAgICAgICAgIHRoaXMubmdab25lID0gdGhpcy5pbmplY3Rvci5nZXQ8Tmdab25lPihOZ1pvbmUsIG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpIHtcclxuXHJcbiAgICB9XHJcbiAgICBqdWRnZU11bHRpKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9lbmFibGVNdWx0aSkge1xyXG4gICAgICAgICAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRleHRFbCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZmFycmlzLWxhYmVsLXRleHQnKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRleHRFbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIOi2heWHulxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZXh0RWwuY2xpZW50V2lkdGggPCB0ZXh0RWwuc2Nyb2xsV2lkdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LmNsYXNzTmFtZSA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5jbGFzc05hbWUgKyAnICcgKyB0aGlzLm11bHRpQ2xzO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5jbGFzc05hbWUgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuY2xhc3NOYW1lLnJlcGxhY2UodGhpcy5tdWx0aUNscywgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIDIwKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==