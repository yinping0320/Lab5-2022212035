/**
 * @fileoverview added by tsickle
 * Generated from: lib/querycondition-advanced/service/state.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { NotifyService } from '@farris/ui-notify';
import { cloneDeep } from 'lodash-es';
import { LocaleService } from '@farris/ui-locale';
var StateService = /** @class */ (function () {
    function StateService(notifySer, localeService) {
        this.notifySer = notifySer;
        this.localeService = localeService;
        this.fieldConfig = [];
        this.fieldConfig$ = new Subject();
        this.queryconditionData$ = new Subject();
        this.queryconditionListData$ = new Subject();
        this.checkedList = {};
        this.checkedList$ = new Subject();
    }
    /**
     * 重置筛选条件
     */
    /**
     * 重置筛选条件
     * @return {?}
     */
    StateService.prototype.reset = /**
     * 重置筛选条件
     * @return {?}
     */
    function () {
        this.queryconditionData = { relation: 1, items: [], children: [], path: [1], groupid: 1 };
        this.queryconditionData$.next(this.queryconditionData);
        this.updateQueryConditionListData();
    };
    /**
     *
     * @param data
     * @param type
     * @param isEmit 默认要发送emit，生成分组触发时不需要emit，因为生成分组方法本身会触发
     */
    /**
     *
     * @param {?} data
     * @param {?} type
     * @param {?=} isEmit 默认要发送emit，生成分组触发时不需要emit，因为生成分组方法本身会触发
     * @return {?}
     */
    StateService.prototype.changeQueryconditionData = /**
     *
     * @param {?} data
     * @param {?} type
     * @param {?=} isEmit 默认要发送emit，生成分组触发时不需要emit，因为生成分组方法本身会触发
     * @return {?}
     */
    function (data, type, isEmit) {
        if (isEmit === void 0) { isEmit = true; }
        var item = data.item, path = data.path, addPositionItem = data.addPositionItem, deleteItems = data.deleteItems;
        /** @type {?} */
        var target = this.queryconditionData;
        path.forEach((/**
         * @param {?} pathVal
         * @return {?}
         */
        function (pathVal) {
            //groupid = 1的时候未最外层
            if (pathVal !== 1) {
                target = target.children.find((/**
                 * @param {?} targetVal
                 * @return {?}
                 */
                function (targetVal) { return targetVal.groupid === pathVal; }));
            }
        }));
        switch (type) {
            case 'add':
                item.conditionid = this.getMaxConditionid() + 1;
                item.compareType = 0;
                if (addPositionItem) {
                    /** @type {?} */
                    var position = target.items.findIndex((/**
                     * @param {?} val
                     * @return {?}
                     */
                    function (val) { return val.conditionid === addPositionItem.conditionid; }));
                    position > -1 ? target.items.splice(position, 0, item) : target.items.push(item);
                }
                else {
                    target.items.push(item);
                }
                this.clearCheckedList();
                break;
            case 'delete-item':
                //删除单个条件，正常删除时使用
                if (deleteItems) {
                    deleteItems.forEach((/**
                     * @param {?} val
                     * @return {?}
                     */
                    function (val) {
                        /** @type {?} */
                        var deleteIndex = target.items.findIndex((/**
                         * @param {?} itemsVal
                         * @return {?}
                         */
                        function (itemsVal) { return itemsVal.conditionid === val.conditionid; }));
                        target.items.splice(deleteIndex, 1);
                    }));
                }
                this.clearCheckedList();
                //删除时优化下结构
                this.treeshake(this.queryconditionData);
                break;
            case 'delete-items':
                //删除多个条件，生产分组时使用
                if (deleteItems) {
                    deleteItems.forEach((/**
                     * @param {?} val
                     * @return {?}
                     */
                    function (val) {
                        /** @type {?} */
                        var deleteIndex = target.items.findIndex((/**
                         * @param {?} itemsVal
                         * @return {?}
                         */
                        function (itemsVal) { return itemsVal.conditionid === val.conditionid; }));
                        target.items.splice(deleteIndex, 1);
                    }));
                }
                this.clearCheckedList();
                break;
            case 'modify':
                /** @type {?} */
                var modifyIndex = target.items.findIndex((/**
                 * @param {?} itemsVal
                 * @return {?}
                 */
                function (itemsVal) { return itemsVal.conditionid === item.conditionid; }));
                target.items[modifyIndex] = item;
                break;
        }
        if (isEmit) {
            this.queryconditionData$.next(this.queryconditionData);
            this.updateQueryConditionListData();
        }
    };
    /**
     * 修改分组数据
     * @param data group数据
     * @param type 修改类型
     */
    /**
     * 修改分组数据
     * @param {?} data group数据
     * @param {?} type 修改类型
     * @return {?}
     */
    StateService.prototype.changeGroupData = /**
     * 修改分组数据
     * @param {?} data group数据
     * @param {?} type 修改类型
     * @return {?}
     */
    function (data, type) {
        var item = data.item, path = data.path, relation = data.relation;
        /** @type {?} */
        var target = this.queryconditionData;
        path.forEach((/**
         * @param {?} pathVal
         * @return {?}
         */
        function (pathVal) {
            //groupid = 1的时候未最外层
            if (pathVal !== 1) {
                target = target.children.find((/**
                 * @param {?} targetVal
                 * @return {?}
                 */
                function (targetVal) { return targetVal.groupid === pathVal; }));
            }
        }));
        switch (type) {
            case 'modify-relation':
                target.relation = relation;
                break;
        }
        this.queryconditionData$.next(this.queryconditionData);
        this.updateQueryConditionListData();
    };
    /**
     * 生成新的分组
     * @desc
     *
     */
    /**
     * 生成新的分组
     * @desc
     *
     * @return {?}
     */
    StateService.prototype.addGroup = /**
     * 生成新的分组
     * @desc
     *
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var groups = Object.keys(this.checkedList).filter((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return _this.checkedList[val].length; }))
        // 未选择筛选条件时候的点击提示
        ;
        // 未选择筛选条件时候的点击提示
        if (!groups.length) {
            //需要勾选
            this.notifySer.warning(this.localeService.getValue('advancedMode.info.noConditionInfo'));
        }
        else if (groups.length === 1) {
            //所有选择项归属于同一个group的items时
            /** @type {?} */
            var targetPath = groups[0].split('-').map((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return Number(val); }));
            /** @type {?} */
            var target_1 = this.queryconditionData;
            targetPath.forEach((/**
             * @param {?} pathVal
             * @return {?}
             */
            function (pathVal) {
                //groupid = 1的时候未最外层
                if (pathVal !== 1) {
                    target_1 = target_1.children.find((/**
                     * @param {?} targetVal
                     * @return {?}
                     */
                    function (targetVal) { return targetVal.groupid === pathVal; }));
                }
            }));
            /** @type {?} */
            var flatItems = this.getFlatConditions(target_1);
            /** @type {?} */
            var modifyItems = flatItems.filter((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return _this.checkedList[groups[0]].includes(val.conditionid); }))
            //特别的，如果将group下的children.length为0，并且modifyItems的范围为全部的items，则提示
            ;
            //特别的，如果将group下的children.length为0，并且modifyItems的范围为全部的items，则提示
            if (!target_1.children.length && modifyItems.length === target_1.items.length) {
                //已经存在该分组了
                this.notifySer.warning(this.localeService.getValue('advancedMode.info.existGroupInfo'));
                return;
            }
            this.generateGroup(target_1, modifyItems, []);
        }
        else {
            //如果group存在多个组，首先找到涉及数据的最外层组，默认是group为1的组，即最大组
            /** @type {?} */
            var involvedGroupid_1 = 1;
            /** @type {?} */
            var involvedPath_1 = [1]
            //获取有选择数据的group，并将路径转化为Array<number>
            ;
            //获取有选择数据的group，并将路径转化为Array<number>
            /** @type {?} */
            var _groups = groups.map((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return val.split('-').map((/**
             * @param {?} val2
             * @return {?}
             */
            function (val2) { return Number(val2); })); }))
            //获取其中的最短路径
            ;
            //获取其中的最短路径
            /** @type {?} */
            var minLength = _groups.map((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return val.length; })).sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            function (a, b) { return a - b; }))[0]
            //循环找到其中的涉及最小的 最大公共group
            ;
            var _loop_1 = function (i) {
                /** @type {?} */
                var nowGroupid = _groups[0][i];
                if (nowGroupid) {
                    //每个组的第i项都一致flag为true
                    /** @type {?} */
                    var flag = _groups.filter((/**
                     * @param {?} val
                     * @return {?}
                     */
                    function (val) { return val[i] === nowGroupid; })).length === _groups.length;
                    if (flag) {
                        involvedGroupid_1 = nowGroupid;
                        involvedPath_1.push(nowGroupid);
                    }
                    else {
                        return "break";
                    }
                }
                else {
                    return "break";
                }
            };
            //循环找到其中的涉及最小的 最大公共group
            for (var i = 1; i < minLength; i++) {
                var state_1 = _loop_1(i);
                if (state_1 === "break")
                    break;
            }
            //校验跨组，involvedGroupid下的items，可以不全选,不做校验
            //其他情况需要检查checklist对应数据是否已经为对应group的全部数据
            /** @type {?} */
            var flatGroupList_1 = this.getFlatChildren(this.queryconditionData)
            //检测involvedGroupid系的group的condition的全部数量是不是等于已选择的数量，如果是的话，提醒用户，所选条件已存在分组
            ;
            //检测involvedGroupid系的group的condition的全部数量是不是等于已选择的数量，如果是的话，提醒用户，所选条件已存在分组
            /** @type {?} */
            var involvedGroup = flatGroupList_1.find((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return val.groupid === involvedGroupid_1; }));
            /** @type {?} */
            var involvedConditionsAll = this.getFlatConditions(involvedGroup).length;
            /** @type {?} */
            var checkedAll = groups.map((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return _this.checkedList[val].length; })).reduce((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            function (a, b) { return a + b; }));
            if (involvedConditionsAll === checkedAll) {
                //已经存在该分组了
                this.notifySer.warning(this.localeService.getValue('advancedMode.info.existGroupInfo'));
                return;
            }
            /** @type {?} */
            var validFlag = true
            // 获取所有基于相关involvedGroupid与checklist的children
            //方法：寻找最小共组在group数组的位置，如再第一位 ，则所有包含第二位的children都应该被勾选
            ;
            // 获取所有基于相关involvedGroupid与checklist的children
            //方法：寻找最小共组在group数组的位置，如再第一位 ，则所有包含第二位的children都应该被勾选
            /** @type {?} */
            var involvedChildrenGroupids_1 = [];
            _groups.forEach((/**
             * @param {?} val
             * @return {?}
             */
            function (val) {
                /** @type {?} */
                var groupid = val[involvedPath_1.length];
                if (groupid && !involvedChildrenGroupids_1.includes(groupid)) {
                    involvedChildrenGroupids_1.push(groupid);
                }
            }));
            //获取上述步骤中所有group的condition数量（含子级）
            /** @type {?} */
            var involveChildrenConditionLen_1 = 0;
            involvedChildrenGroupids_1.forEach((/**
             * @param {?} val
             * @return {?}
             */
            function (val) {
                /** @type {?} */
                var target = flatGroupList_1.find((/**
                 * @param {?} group
                 * @return {?}
                 */
                function (group) { return group.groupid === val; }));
                if (target) {
                    /** @type {?} */
                    var targetFlatConditionsLen = _this.getFlatConditions(target).length;
                    involveChildrenConditionLen_1 += targetFlatConditionsLen;
                }
            }));
            /** @type {?} */
            var involvedCheckedConditionLen_1 = 0;
            groups.filter((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return val !== involvedPath_1.join('-'); })).forEach((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return involvedCheckedConditionLen_1 += _this.checkedList[val].length; }));
            if (involveChildrenConditionLen_1 !== involvedCheckedConditionLen_1) {
                //跨组操作需要勾选组内所有数据
                this.notifySer.error(this.localeService.getValue('advancedMode.info.checkedGroupInfo'));
                validFlag = false;
            }
            // groups.forEach(group => {
            //   if (!validFlag) {
            //     return
            //   }
            //   if (group !== involvedPath.join('-')) {
            //     let target = flatGroupList.find(val => val.path.join('-') === group)
            //     let targetFlatConditions = this.getFlatConditions(target)
            //     //当前节点下的所有items，与与该节点有关的所有items
            //     let checkedListBaseTarget = _groups.filter(val => val.includes(target.groupid)).map(val => val.join('-'))
            //     let checkedListBaseTargetLength = 0
            //     checkedListBaseTarget.forEach(val => checkedListBaseTargetLength = checkedListBaseTargetLength + this.checkedList[val].length)
            //     if (targetFlatConditions.length !== checkedListBaseTargetLength) {
            //       this.notifySer.error('跨组操作时，应勾选该组下全部数据')
            //       validFlag = false
            //     }
            //   }
            // })
            if (validFlag) {
                /** @type {?} */
                var modifyItemids_1 = this.checkedList[involvedPath_1.join('-')] || [];
                /** @type {?} */
                var target = flatGroupList_1.find((/**
                 * @param {?} val
                 * @return {?}
                 */
                function (val) { return val.path.join('-') === involvedPath_1.join('-'); }));
                /** @type {?} */
                var modifyItems = target.items.filter((/**
                 * @param {?} val
                 * @return {?}
                 */
                function (val) { return modifyItemids_1.includes(val.conditionid); }))
                //由于前面已经检测了包含了某child的全部condition，所以此处过滤应该包含子项。
                //方法：寻找最小共组在group数组的位置，如再第一位 ，则所有包含第二位的children都应该被勾选
                ;
                //由于前面已经检测了包含了某child的全部condition，所以此处过滤应该包含子项。
                //方法：寻找最小共组在group数组的位置，如再第一位 ，则所有包含第二位的children都应该被勾选
                /** @type {?} */
                var involvedChildrenGroup_1 = _groups.map((/**
                 * @param {?} val
                 * @return {?}
                 */
                function (val) { return val[involvedPath_1.length]; })).filter((/**
                 * @param {?} val
                 * @return {?}
                 */
                function (val) { return val; }));
                /** @type {?} */
                var children = target.children.filter((/**
                 * @param {?} val
                 * @return {?}
                 */
                function (val) { return involvedChildrenGroup_1.includes(val.groupid); }))
                // let children = target.children.filter(val => groups.includes(val.path.join('-')))
                ;
                // let children = target.children.filter(val => groups.includes(val.path.join('-')))
                this.generateGroup(target, modifyItems, children);
            }
        }
        this.queryconditionData$.next(this.queryconditionData);
        this.updateQueryConditionListData();
        this.clearCheckedList();
    };
    /**
     *
     * @param groupid
     * @param path
     * @param isEmit 是否需要触发emit操作，对于treeshake方法，无需触发，默认为true
     * @param changeRootCompareType 属于treeshake过程中的取消分组，涉及到根节点且根节点只有该children的时候，需要修改根节点比较符，为true时修改
     */
    /**
     *
     * @param {?} groupid
     * @param {?} path
     * @param {?=} isEmit 是否需要触发emit操作，对于treeshake方法，无需触发，默认为true
     * @param {?=} changeRootCompareType 属于treeshake过程中的取消分组，涉及到根节点且根节点只有该children的时候，需要修改根节点比较符，为true时修改
     * @return {?}
     */
    StateService.prototype.deleteGroup = /**
     *
     * @param {?} groupid
     * @param {?} path
     * @param {?=} isEmit 是否需要触发emit操作，对于treeshake方法，无需触发，默认为true
     * @param {?=} changeRootCompareType 属于treeshake过程中的取消分组，涉及到根节点且根节点只有该children的时候，需要修改根节点比较符，为true时修改
     * @return {?}
     */
    function (groupid, path, isEmit, changeRootCompareType) {
        if (isEmit === void 0) { isEmit = true; }
        if (changeRootCompareType === void 0) { changeRootCompareType = false; }
        var _a, _b;
        if (groupid === 1) {
            //已经是最外层分组了
            this.notifySer.info(this.localeService.getValue('advancedMode.info.deleteGroupInfo'));
        }
        else {
            /** @type {?} */
            var target_2 = this.queryconditionData;
            /** @type {?} */
            var targetParent_1 = null;
            path.forEach((/**
             * @param {?} pathVal
             * @return {?}
             */
            function (pathVal) {
                //groupid = 1的时候未最外层
                if (pathVal !== 1) {
                    targetParent_1 = target_2;
                    target_2 = target_2.children.find((/**
                     * @param {?} targetVal
                     * @return {?}
                     */
                    function (targetVal) { return targetVal.groupid === pathVal; }));
                }
            }));
            targetParent_1.children = targetParent_1.children.filter((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return val.groupid !== groupid; }));
            /** @type {?} */
            var isChangeCompareType = (targetParent_1.groupid === 1) && changeRootCompareType && !targetParent_1.items.length && !targetParent_1.children.length;
            if (isChangeCompareType) {
                targetParent_1.relation = target_2.relation;
            }
            (_a = targetParent_1.children).push.apply(_a, tslib_1.__spread(target_2.children));
            (_b = targetParent_1.items).push.apply(_b, tslib_1.__spread(target_2.items));
            /** @type {?} */
            var childrens = this.getFlatChildren(targetParent_1);
            childrens.forEach((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return val.path = val.path.filter((/**
             * @param {?} pathItem
             * @return {?}
             */
            function (pathItem) { return pathItem !== groupid; })); }));
            if (isEmit) {
                this.queryconditionData$.next(this.queryconditionData);
                this.updateQueryConditionListData();
                this.clearCheckedList();
            }
        }
    };
    /**
     * @param {?} parentTarget
     * @param {?} items
     * @param {?} children
     * @return {?}
     */
    StateService.prototype.generateGroup = /**
     * @param {?} parentTarget
     * @param {?} items
     * @param {?} children
     * @return {?}
     */
    function (parentTarget, items, children) {
        /** @type {?} */
        var groupid = this.getMaxGroupid() + 1
        //删除最小范围的最大组 中移除掉的数据
        ;
        //删除最小范围的最大组 中移除掉的数据
        this.changeQueryconditionData({ deleteItems: items, path: parentTarget.path }, 'delete-items', false);
        //删除最小范围的最大组 中移除掉的children，注意，由于已经做过校验，children中的递归类型已经全部选择，只需将target中涉及的children移到newgroup，并将其内部的路由修改
        /** @type {?} */
        var allGroups = this.getFlatChildren(parentTarget);
        /** @type {?} */
        var parentPosition = parentTarget.path.findIndex((/**
         * @param {?} pathVal
         * @return {?}
         */
        function (pathVal) { return pathVal === parentTarget.groupid; }));
        children.forEach((/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            // this.deleteGroup(val.groupid, val.path)
            parentTarget.children = parentTarget.children.filter((/**
             * @param {?} child
             * @return {?}
             */
            function (child) { return child.groupid !== val.groupid; }));
            allGroups.forEach((/**
             * @param {?} group
             * @return {?}
             */
            function (group) {
                if (group.path.includes(val.groupid)) {
                    group.path.splice(parentPosition + 1, 0, groupid);
                }
            }));
        }));
        /** @type {?} */
        var newGroup = {
            groupid: groupid,
            relation: 1,
            items: items,
            children: children,
            path: parentTarget.path.concat(groupid)
        };
        parentTarget.children.push(newGroup);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    StateService.prototype.setQueryconditionData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.queryconditionData = data;
        this.queryconditionData$.next(data);
        // 初始化可以不用更新QueryConditionListData，父组件已经传入
        // this.updateQueryConditionListData()
    };
    /**
     * @return {?}
     */
    StateService.prototype.getQueryconditionData = /**
     * @return {?}
     */
    function () {
        return this.queryconditionData;
    };
    /**
     * @param {?} config
     * @return {?}
     */
    StateService.prototype.changeFieldConfig = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        this.fieldConfig = config;
        this.fieldConfig$.next(config);
    };
    /**
     * @return {?}
     */
    StateService.prototype.getFieldConfig = /**
     * @return {?}
     */
    function () {
        return this.fieldConfig;
    };
    /**
     * 修改已选择的筛选条件
     * @param path number[] 节点位置
     * @param item 筛选条件
     */
    /**
     * 修改已选择的筛选条件
     * @param {?} path number[] 节点位置
     * @param {?} item 筛选条件
     * @return {?}
     */
    StateService.prototype.changeCheckedList = /**
     * 修改已选择的筛选条件
     * @param {?} path number[] 节点位置
     * @param {?} item 筛选条件
     * @return {?}
     */
    function (path, item) {
        /** @type {?} */
        var _path = path.join('-');
        if (!this.checkedList[_path]) {
            this.checkedList[_path] = [item];
        }
        else {
            /** @type {?} */
            var index = this.checkedList[_path].indexOf(item);
            if (index < 0) {
                this.checkedList[_path].push(item);
            }
            else {
                this.checkedList[_path].splice(index, 1);
                if (!this.checkedList[_path].length) {
                    delete this.checkedList[_path];
                }
            }
        }
        this.checkedList$.next(this.checkedList);
    };
    /**
     * 清除已选择的筛选条件
     */
    /**
     * 清除已选择的筛选条件
     * @return {?}
     */
    StateService.prototype.clearCheckedList = /**
     * 清除已选择的筛选条件
     * @return {?}
     */
    function () {
        this.checkedList = {};
        this.checkedList$.next(this.checkedList);
    };
    /**
     *
     * @param data 需要查询的节点位置
     * @returns 该节点下所有的筛选条件信息
     */
    /**
     *
     * @param {?} data 需要查询的节点位置
     * @return {?} 该节点下所有的筛选条件信息
     */
    StateService.prototype.getFlatConditions = /**
     *
     * @param {?} data 需要查询的节点位置
     * @return {?} 该节点下所有的筛选条件信息
     */
    function (data) {
        var _this = this;
        if (data.children) {
            return [].concat.apply([], tslib_1.__spread([data.items], data.children.map((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return _this.getFlatConditions(val); }))));
        }
        return [].concat(data.items);
    };
    /**
     *
     * @param data 需要查询的节点
     * @returns 该节点下所有的组织信息
     */
    /**
     *
     * @param {?} data 需要查询的节点
     * @return {?} 该节点下所有的组织信息
     */
    StateService.prototype.getFlatChildren = /**
     *
     * @param {?} data 需要查询的节点
     * @return {?} 该节点下所有的组织信息
     */
    function (data) {
        var _this = this;
        if (data.children) {
            return [].concat.apply([], tslib_1.__spread([data], data.children.map((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return _this.getFlatChildren(val); }))));
        }
        return [].concat(data);
    };
    /**
     * @desc 获取数据中已有的最大筛选条件编号
     * @returns 当前数据中已有的最大筛选条件编号
     */
    /**
     * @desc 获取数据中已有的最大筛选条件编号
     * @return {?} 当前数据中已有的最大筛选条件编号
     */
    StateService.prototype.getMaxConditionid = /**
     * @desc 获取数据中已有的最大筛选条件编号
     * @return {?} 当前数据中已有的最大筛选条件编号
     */
    function () {
        /** @type {?} */
        var maxid = 0;
        /** @type {?} */
        var items = this.getFlatConditions(this.queryconditionData);
        /** @type {?} */
        var conditionList = items.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) { return b.conditionid - a.conditionid; }));
        if (conditionList.length) {
            maxid = conditionList[0].conditionid;
        }
        return maxid;
    };
    /**
     * @desc 获取数据中已有的最大组织编号
     * @returns 当前数据中已有的最大组织编号
     */
    /**
     * @desc 获取数据中已有的最大组织编号
     * @return {?} 当前数据中已有的最大组织编号
     */
    StateService.prototype.getMaxGroupid = /**
     * @desc 获取数据中已有的最大组织编号
     * @return {?} 当前数据中已有的最大组织编号
     */
    function () {
        /** @type {?} */
        var maxid = 0;
        /** @type {?} */
        var childrens = this.getFlatChildren(this.queryconditionData);
        /** @type {?} */
        var conditionList = childrens.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) { return b.groupid - a.groupid; }));
        if (conditionList.length) {
            maxid = conditionList[0].groupid;
        }
        return maxid;
    };
    /**
     * 将querycondition转化为Array的格式并交付后端解析
     * @param data  解析的数据
     * @param parentRelation 父节点的关联关系
     * @returns
     */
    /**
     * 将querycondition转化为Array的格式并交付后端解析
     * @param {?} data  解析的数据
     * @param {?=} parentRelation 父节点的关联关系
     * @return {?}
     */
    StateService.prototype.objToArrayData = /**
     * 将querycondition转化为Array的格式并交付后端解析
     * @param {?} data  解析的数据
     * @param {?=} parentRelation 父节点的关联关系
     * @return {?}
     */
    function (data, parentRelation) {
        var _this = this;
        /** @type {?} */
        var items = data.items;
        /** @type {?} */
        var children = data.children;
        items.forEach((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return val.relation = data.relation; }));
        if (children.length) {
            items = [].concat.apply([], tslib_1.__spread(items, children.map((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return _this.objToArrayData(val, data.relation); }))));
        }
        if (items.length && parentRelation) {
            items[items.length - 1].relation = parentRelation;
            items[0].Lbracket ? items[0].Lbracket += '(' : items[0].Lbracket = '(';
            items[items.length - 1].Rbracket ? items[items.length - 1].Rbracket += ')' : items[items.length - 1].Rbracket = ')';
        }
        return tslib_1.__spread(items);
    };
    /**
     * @return {?}
     */
    StateService.prototype.updateQueryConditionListData = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var result = this.objToArrayData(cloneDeep(this.queryconditionData));
        this.queryconditionListData = result;
        this.queryconditionListData$.next(this.queryconditionListData);
    };
    /**
     * 执行完增删操作后，存在部分group中无数据的情况，需要删除掉该部分无用数据
     * @param data
     */
    /**
     * 执行完增删操作后，存在部分group中无数据的情况，需要删除掉该部分无用数据
     * @param {?} data
     * @param {?=} parentData
     * @return {?}
     */
    StateService.prototype.treeshake = /**
     * 执行完增删操作后，存在部分group中无数据的情况，需要删除掉该部分无用数据
     * @param {?} data
     * @param {?=} parentData
     * @return {?}
     */
    function (data, parentData) {
        var _this = this;
        if (data.children.length) {
            data.children.forEach((/**
             * @param {?} group
             * @return {?}
             */
            function (group) { return _this.treeshake(group, data); }));
        }
        //items存在或者children的数量大于等于2为正常数据，无需处理，return仅是返回给最外层数据
        if (data.items.length || data.children.length > 1) {
        }
        else if (data.groupid === 1) {
            //groupid === 1 特殊处理，items和children可以为0，但是children长度为1且items无数据时要将children处理
            if (!data.items.length && data.children.length === 1) {
                this.deleteGroup(data.children[0].groupid, data.children[0].path, false, true);
            }
        }
        else if (!data.children.length) {
            //children数量为0 items数量也为0， 该节点无存在必要，直接删除
            parentData.children = parentData.children.filter((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return val.groupid !== data.groupid; }));
        }
        else if (data.children.length === 1) {
            //items不存在，只有一个children,相当于删除该层分组，将子children升级
            this.deleteGroup(data.groupid, data.path, false, true);
        }
    };
    StateService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    StateService.ctorParameters = function () { return [
        { type: NotifyService },
        { type: LocaleService }
    ]; };
    return StateService;
}());
export { StateService };
if (false) {
    /** @type {?} */
    StateService.prototype.fieldConfig;
    /** @type {?} */
    StateService.prototype.fieldConfig$;
    /** @type {?} */
    StateService.prototype.queryconditionData;
    /** @type {?} */
    StateService.prototype.queryconditionData$;
    /** @type {?} */
    StateService.prototype.queryconditionListData;
    /** @type {?} */
    StateService.prototype.queryconditionListData$;
    /** @type {?} */
    StateService.prototype.checkedList;
    /** @type {?} */
    StateService.prototype.checkedList$;
    /**
     * @type {?}
     * @private
     */
    StateService.prototype.notifySer;
    /**
     * @type {?}
     * @private
     */
    StateService.prototype.localeService;
}
//# sourceMappingURL=data:application/json;base64,