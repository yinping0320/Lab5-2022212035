/**
 * @fileoverview added by tsickle
 * Generated from: lib/controlcomponent/radio/radio.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Injector, EventEmitter, Output, HostBinding } from '@angular/core';
import { QueryCondition } from '../../entity/querycondition';
import { SolutionService } from '../../service/solution.service';
var RadioComponent = /** @class */ (function () {
    function RadioComponent(injector) {
        this.injector = injector;
        this.hideLabel = false;
        /**
         * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
         */
        this.changeFields = [];
        this.conditionChange = new EventEmitter();
        this.cls = true;
        this.solutionService = this.injector.get(SolutionService);
    }
    Object.defineProperty(RadioComponent.prototype, "item", {
        get: /**
         * @return {?}
         */
        function () {
            return this._item;
        },
        set: /**
         * @param {?} nr
         * @return {?}
         */
        function (nr) {
            this._item = nr;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    RadioComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
            /** @type {?} */
            var isChange = changes['changeFields'].currentValue.some((/**
             * @param {?} field
             * @return {?}
             */
            function (field) { return field == _this.item.fieldCode; }));
            if (isChange) {
                this.radioValue = ((/** @type {?} */ (this.item.value))).getOriginalValue();
            }
        }
    };
    /**
     * @return {?}
     */
    RadioComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.radioControl = (/** @type {?} */ (this.item.control));
        this.radioValue = ((/** @type {?} */ (this.item.value))).getOriginalValue();
        this.testId = this.solutionService.getGuid();
        this.showLabel = this.radioControl.showLabel;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    RadioComponent.prototype.valueChanged = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this._item.value.setOriginalValue(event);
        this.conditionChange.emit();
    };
    /**
     * @param {?} field
     * @return {?}
     */
    RadioComponent.prototype.getConditionItemTitle = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return this.solutionService.getConditionItemTitle(field);
    };
    RadioComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-solution-radio',
                    template: "<div class=\"farris-group-wrap\" id=\"{{item.id}}\">\r\n    <div class=\"form-group farris-form-group  common-group qradio-group\"  [ngClass]=\"{'q-state-readonly':item.readonly}\">\r\n        <label class=\"col-form-label\" *ngIf=\"item && !hideLabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n            <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.isRequired()\">*</span>\r\n            <span class=\"farris-label-text\" *ngIf=\"showLabel\">{{item.fieldName}}</span>\r\n        </label>\r\n        <farris-radiogroup\r\n            class=\"f-solution-radio-group\"\r\n            [(ngModel)]=\"radioValue\"\r\n            [data]=\"radioControl.enumValues\"\r\n            [horizontal]=\"radioControl.horizontal\"\r\n            [disabled]=\"item.readonly\"\r\n            (changeValue)=\"valueChanged($event)\"\r\n            id=\"{{testId}}\"\r\n        ></farris-radiogroup>\r\n    </div>\r\n</div>"
                }] }
    ];
    /** @nocollapse */
    RadioComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    RadioComponent.propDecorators = {
        hideLabel: [{ type: Input }],
        item: [{ type: Input }],
        changeFields: [{ type: Input }],
        conditionChange: [{ type: Output, args: ['conditionChange',] }],
        cls: [{ type: HostBinding, args: ['class.f-solution-radio-group-wrapper',] }]
    };
    return RadioComponent;
}());
export { RadioComponent };
if (false) {
    /** @type {?} */
    RadioComponent.prototype.hideLabel;
    /** @type {?} */
    RadioComponent.prototype._item;
    /** @type {?} */
    RadioComponent.prototype.solutionService;
    /** @type {?} */
    RadioComponent.prototype.radioControl;
    /** @type {?} */
    RadioComponent.prototype.radioValue;
    /** @type {?} */
    RadioComponent.prototype.testId;
    /** @type {?} */
    RadioComponent.prototype.showLabel;
    /**
     * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
     * @type {?}
     */
    RadioComponent.prototype.changeFields;
    /** @type {?} */
    RadioComponent.prototype.conditionChange;
    /** @type {?} */
    RadioComponent.prototype.cls;
    /**
     * @type {?}
     * @private
     */
    RadioComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21wb25lbnQtcXVlcnljb25kaXRpb24vIiwic291cmNlcyI6WyJsaWIvY29udHJvbGNvbXBvbmVudC9yYWRpby9yYWRpby5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBcUIsUUFBUSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNoSSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBSWpFO0lBa0NJLHdCQUFvQixRQUFrQjtRQUFsQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBM0I3QixjQUFTLEdBQVcsS0FBSyxDQUFBOzs7O1FBcUJ6QixpQkFBWSxHQUFrQixFQUFFLENBQUM7UUFFZixvQkFBZSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFFWCxRQUFHLEdBQUcsSUFBSSxDQUFDO1FBRzdELElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQW5CRCxzQkFDSSxnQ0FBSTs7OztRQUdSO1lBQ0ksT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3RCLENBQUM7Ozs7O1FBTkQsVUFDUyxFQUFrQjtZQUN2QixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNwQixDQUFDOzs7T0FBQTs7Ozs7SUFrQkQsb0NBQVc7Ozs7SUFBWCxVQUFZLE9BQXNCO1FBQWxDLGlCQU9DO1FBTkcsSUFBRyxPQUFPLENBQUMsY0FBYyxDQUFDLElBQUksT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLFlBQVksSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxXQUFXLEVBQUU7O2dCQUNsRyxRQUFRLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJOzs7O1lBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFLLElBQUksS0FBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQTVCLENBQTRCLEVBQUM7WUFDakcsSUFBRyxRQUFRLEVBQUM7Z0JBQ1IsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLG1CQUFBLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFjLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO2FBQ3hFO1NBQ0o7SUFDTCxDQUFDOzs7O0lBRUQsaUNBQVE7OztJQUFSO1FBQ0csSUFBSSxDQUFDLFlBQVksR0FBRyxtQkFBQSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBZ0IsQ0FBQztRQUN0RCxJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsbUJBQUEsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQWMsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDckUsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQzdDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUM7SUFDaEQsQ0FBQzs7Ozs7SUFFRCxxQ0FBWTs7OztJQUFaLFVBQWEsS0FBVTtRQUNuQixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2hDLENBQUM7Ozs7O0lBRUQsOENBQXFCOzs7O0lBQXJCLFVBQXNCLEtBQW9CO1FBQ3RDLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3RCxDQUFDOztnQkE3REosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxvQkFBb0I7b0JBQzlCLCs2QkFBcUM7aUJBQ3hDOzs7O2dCQVQ2QyxRQUFROzs7NEJBYWpELEtBQUs7dUJBVUwsS0FBSzsrQkFXTCxLQUFLO2tDQUVMLE1BQU0sU0FBQyxpQkFBaUI7c0JBRXhCLFdBQVcsU0FBQyxzQ0FBc0M7O0lBOEJ2RCxxQkFBQztDQUFBLEFBOURELElBOERDO1NBekRZLGNBQWM7OztJQUV2QixtQ0FBa0M7O0lBR2xDLCtCQUFzQjs7SUFDdEIseUNBQWlDOztJQUNqQyxzQ0FBMkI7O0lBQzNCLG9DQUFnQjs7SUFDaEIsZ0NBQWU7O0lBQ2YsbUNBQW1COzs7OztJQWFuQixzQ0FBMEM7O0lBRTFDLHlDQUFnRTs7SUFFaEUsNkJBQWdFOzs7OztJQUVwRCxrQ0FBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkluaXQsIE9uQ2hhbmdlcywgSW5qZWN0b3IsIEV2ZW50RW1pdHRlciwgT3V0cHV0LCBIb3N0QmluZGluZywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBRdWVyeUNvbmRpdGlvbiB9IGZyb20gJy4uLy4uL2VudGl0eS9xdWVyeWNvbmRpdGlvbic7XHJcbmltcG9ydCB7IFNvbHV0aW9uU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2Uvc29sdXRpb24uc2VydmljZSc7XHJcbmltcG9ydCB7IFJhZGlvQ29udHJvbCB9IGZyb20gJy4uLy4uL2VudGl0eS9jb250cm9sdHlwZS9yYWRpby9yYWRpby1jb250cm9sJztcclxuaW1wb3J0IHsgUmFkaW9WYWx1ZSB9IGZyb20gJy4uLy4uL2VudGl0eS9jb25kaXRpb252YWx1ZS9yYWRpby12YWx1ZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnYXBwLXNvbHV0aW9uLXJhZGlvJyxcclxuICAgIHRlbXBsYXRlVXJsOiAnLi9yYWRpby5jb21wb25lbnQuaHRtbCcsXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgUmFkaW9Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XHJcblxyXG4gICAgQElucHV0KCkgaGlkZUxhYmVsOmJvb2xlYW4gPSBmYWxzZVxyXG5cclxuXHJcbiAgICBfaXRlbTogUXVlcnlDb25kaXRpb247XHJcbiAgICBzb2x1dGlvblNlcnZpY2U6IFNvbHV0aW9uU2VydmljZTtcclxuICAgIHJhZGlvQ29udHJvbDogUmFkaW9Db250cm9sO1xyXG4gICAgcmFkaW9WYWx1ZTogYW55O1xyXG4gICAgdGVzdElkOiBzdHJpbmc7XHJcbiAgICBzaG93TGFiZWw6IGJvb2xlYW47XHJcblxyXG4gICAgQElucHV0KClcclxuICAgIHNldCBpdGVtKG5yOiBRdWVyeUNvbmRpdGlvbil7XHJcbiAgICAgICAgdGhpcy5faXRlbSA9IG5yO1xyXG4gICAgfVxyXG4gICAgZ2V0IGl0ZW0oKXtcclxuICAgICAgICByZXR1cm4gdGhpcy5faXRlbTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiDmn5DkuKrlrZfmrrXlj5HnlJ/lgLzlj5jljJbkuovku7bml7bvvIzpnIDopoHlkIzmraXmuIXnqbrnmoTlrZfmrrXvvIzlj6/og73kuI3mmK/lvZPliY3lrZfmrrVcclxuICAgICAqL1xyXG4gICAgQElucHV0KCkgY2hhbmdlRmllbGRzOiBBcnJheTxzdHJpbmc+ID0gW107XHJcblxyXG4gICAgQE91dHB1dCgnY29uZGl0aW9uQ2hhbmdlJykgY29uZGl0aW9uQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuZi1zb2x1dGlvbi1yYWRpby1ncm91cC13cmFwcGVyJykgY2xzID0gdHJ1ZTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3Rvcikge1xyXG4gICAgICAgdGhpcy5zb2x1dGlvblNlcnZpY2UgPSB0aGlzLmluamVjdG9yLmdldChTb2x1dGlvblNlcnZpY2UpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgICAgICBpZihjaGFuZ2VzWydjaGFuZ2VGaWVsZHMnXSAmJiBjaGFuZ2VzWydjaGFuZ2VGaWVsZHMnXS5jdXJyZW50VmFsdWUgJiYgIWNoYW5nZXNbJ2NoYW5nZUZpZWxkcyddLmZpcnN0Q2hhbmdlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzQ2hhbmdlID0gY2hhbmdlc1snY2hhbmdlRmllbGRzJ10uY3VycmVudFZhbHVlLnNvbWUoZmllbGQgPT4gZmllbGQgPT0gdGhpcy5pdGVtLmZpZWxkQ29kZSk7XHJcbiAgICAgICAgICAgIGlmKGlzQ2hhbmdlKXtcclxuICAgICAgICAgICAgICAgIHRoaXMucmFkaW9WYWx1ZSA9ICh0aGlzLml0ZW0udmFsdWUgYXMgUmFkaW9WYWx1ZSkuZ2V0T3JpZ2luYWxWYWx1ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgdGhpcy5yYWRpb0NvbnRyb2wgPSB0aGlzLml0ZW0uY29udHJvbCBhcyBSYWRpb0NvbnRyb2w7XHJcbiAgICAgICB0aGlzLnJhZGlvVmFsdWUgPSAodGhpcy5pdGVtLnZhbHVlIGFzIFJhZGlvVmFsdWUpLmdldE9yaWdpbmFsVmFsdWUoKTtcclxuICAgICAgIHRoaXMudGVzdElkID0gdGhpcy5zb2x1dGlvblNlcnZpY2UuZ2V0R3VpZCgpO1xyXG4gICAgICAgdGhpcy5zaG93TGFiZWwgPSB0aGlzLnJhZGlvQ29udHJvbC5zaG93TGFiZWw7XHJcbiAgICB9XHJcblxyXG4gICAgdmFsdWVDaGFuZ2VkKGV2ZW50OiBhbnkpe1xyXG4gICAgICAgIHRoaXMuX2l0ZW0udmFsdWUuc2V0T3JpZ2luYWxWYWx1ZShldmVudCk7XHJcbiAgICAgICAgdGhpcy5jb25kaXRpb25DaGFuZ2UuZW1pdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldENvbmRpdGlvbkl0ZW1UaXRsZShmaWVsZDpRdWVyeUNvbmRpdGlvbil7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc29sdXRpb25TZXJ2aWNlLmdldENvbmRpdGlvbkl0ZW1UaXRsZShmaWVsZCk7XHJcbiAgICB9XHJcbn0iXX0=