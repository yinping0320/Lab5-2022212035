/**
 * @fileoverview added by tsickle
 * Generated from: lib/controlcomponent/datepicker/datepicker.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Injector, EventEmitter, Output } from '@angular/core';
import { SolutionService } from '../../service/solution.service';
import { ControlType } from '../../entity/controltype';
import { ShowType } from '@farris/ui-datepicker';
import { of, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { QueryConditionComponent } from '../../querycondition.component';
import { MessagerService } from '@farris/ui-messager';
var DatePickerComponent = /** @class */ (function () {
    function DatePickerComponent(injector) {
        this.injector = injector;
        this.hideLabel = false;
        /**
         * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
         */
        this.changeFields = [];
        this.conditionChange = new EventEmitter();
        // true显示时间 false不显示
        this.showType = ShowType.all; // 显示类型，默认显示全部1；不显示日期，用于选择年月模式2；不显示日期及月份，用于选择年模式3；用于周选择4。
        // 显示类型，默认显示全部1；不显示日期，用于选择年月模式2；不显示日期及月份，用于选择年模式3；用于周选择4。
        this.maxDate = '';
        this.minDate = '';
        this.editable = false;
        this.dateRangeDatesDelimiter = '~';
        this.enableDynamic = false; //是否支持动态日期，仅限singleDate情况
        //是否支持动态日期，仅限singleDate情况
        //区间类型时是否支持选择单一区间
        this.enableSplit = false;
        this.solutionService = this.injector.get(SolutionService);
        this.messageService = this.injector.get(MessagerService);
        /** @type {?} */
        var queryconditionComponent = this.injector.get(QueryConditionComponent, null);
        if (queryconditionComponent) {
            this.destroy$ = queryconditionComponent.destroy$;
        }
        else {
            this.destroy$ = new Subject();
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    DatePickerComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
            /** @type {?} */
            var isChange = changes['changeFields'].currentValue.some((/**
             * @param {?} field
             * @return {?}
             */
            function (field) { return field == _this.item.fieldCode; }));
            if (isChange) {
                if (this.dateRange) {
                    this.beginValue = this.item.value && this.item.value.startTime ? this.item.value.startTime.toString().trim() : '';
                    this.endValue = this.item.value && this.item.value.endTime ? this.item.value.endTime.toString().trim() : '';
                    this.bindValue = this.item.value.getOriginalValue();
                }
                else {
                    this.bindValue = this.item.value.getOriginalValue();
                }
            }
        }
    };
    /**
     * @return {?}
     */
    DatePickerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.testId = this.solutionService.getGuid();
        // const controlType = this.item.control.getControlType();
        switch (this.controlType) {
            case ControlType.DateRange:
                this.returnFormat = this.item.control.returnFormat ? this.item.control.returnFormat : 'yyyy-MM-dd';
                this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM-dd';
                this.dateRange = true;
                break;
            case ControlType.SingleDate:
                this.returnFormat = this.item.control.returnFormat ? this.item.control.returnFormat : 'yyyy-MM-dd';
                this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM-dd';
                this.dateRange = false;
                this.enableDynamic = this.item.control.isDynamicDate ? this.item.control.isDynamicDate : false;
                break;
            case ControlType.SingleYear:
                this.returnFormat = this.item.control.returnFormat ? this.item.control.returnFormat : 'yyyy';
                this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy';
                this.showType = ShowType.noDateAndMonth;
                this.dateRange = false;
                break;
            case ControlType.DateTimeRange:
                this.returnFormat = this.item.control.returnFormat ? this.item.control.returnFormat : 'yyyy-MM-dd HH:mm:ss';
                if (this.item.control.enableCustomFormat) {
                    // 使用自定义格式
                    this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM-dd HH:mm:ss';
                }
                else {
                    // 未启用自定义格式
                    this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM-dd';
                    this.dateFormat = this.dateFormat + ' HH:mm:ss';
                }
                this.showTime = true;
                this.dateRange = true;
                break;
            case ControlType.SingleMonth:
                this.returnFormat = this.item.control.returnFormat ? this.item.control.returnFormat : 'yyyy-MM';
                this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM';
                this.showType = ShowType.noDate;
                this.dateRange = false;
                break;
            case ControlType.MonthRange:
                this.returnFormat = this.item.control.returnFormat ? this.item.control.returnFormat : 'yyyy-MM';
                this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM';
                this.showType = ShowType.noDate;
                this.dateRange = true;
                break;
            case ControlType.SingleDateTime:
                this.returnFormat = this.item.control.returnFormat ? this.item.control.returnFormat : 'yyyy-MM-dd HH:mm:ss';
                if (this.item.control.enableCustomFormat) {
                    // 使用自定义格式
                    this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM-dd HH:mm:ss';
                }
                else {
                    // 未启用自定义格式
                    this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM-dd';
                    this.dateFormat = this.dateFormat + ' HH:mm:ss';
                }
                this.showTime = true;
                this.dateRange = false;
                break;
        }
        this.enableSplit = this.item.control.enableSplit || false;
        // 更新条件
        this.updateParamsByCondition();
        this.placeholder = this.item.placeHolder ? this.item.placeHolder : this.item.control.placeholder;
        if (this.dateRange) {
            this.beginValue = this.item.value && this.item.value.startTime ? this.item.value.startTime.toString().trim() : '';
            this.endValue = this.item.value && this.item.value.endTime ? this.item.value.endTime.toString().trim() : '';
            this.beginPlaceHolder = this.item.beginPlaceHolder ? this.item.beginPlaceHolder : this.placeholder;
            this.endPlaceHolder = this.item.endPlaceHolder ? this.item.endPlaceHolder : this.placeholder;
            this.bindValue = this.item.value.getOriginalValue();
        }
        else {
            this.bindValue = this.item.value.getOriginalValue();
        }
        if (this.item.control.weekSelect && this.controlType == ControlType.DateRange) {
            this.showType = ShowType.selectWeek;
        }
        this.dateChangedCmd = this.item.control.dateChangedCmd;
        if (!this.dateChangedCmd) {
            this.dateChangedCmd = (/**
             * @return {?}
             */
            function () { return of({ closeDateSelect: true }); });
        }
        // 
        this.solutionService.getControlConfigState().pipe(takeUntil(this.destroy$)).subscribe((/**
         * @param {?} simpleConditions
         * @return {?}
         */
        function (simpleConditions) {
            //简单条件
            /** @type {?} */
            var findSimpleCondition = simpleConditions.find((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item['fieldCode'] == _this.item['fieldCode']; }));
            if (findSimpleCondition) {
                _this.updateParamsByCondition(findSimpleCondition);
            }
        }));
    };
    /**
     * @return {?}
     */
    DatePickerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.dateChangedCmdSubscription) {
            this.dateChangedCmdSubscription.unsubscribe();
        }
    };
    /**
     * @private
     * @param {?=} condition
     * @return {?}
     */
    DatePickerComponent.prototype.updateParamsByCondition = /**
     * @private
     * @param {?=} condition
     * @return {?}
     */
    function (condition) {
        if (condition === void 0) { condition = null; }
        /** @type {?} */
        var conditionControl = null;
        conditionControl = condition ? condition.control : this.item.control;
        switch (this.controlType) {
            case ControlType.SingleYear:
                this.maxDate = conditionControl.hasOwnProperty('maxDate') ? conditionControl['maxDate'] : this.maxDate;
                this.minDate = conditionControl.hasOwnProperty('minDate') ? conditionControl['minDate'] : this.minDate;
                break;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DatePickerComponent.prototype.onDateChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.returnFormatted === this.item.value.getOriginalValue()) {
            return;
        }
        this.item.value.setOriginalValue({
            formatted: event.returnFormatted,
            delimiter: this.dateRangeDatesDelimiter
        });
        //this.conditionChange.emit();
        this.runDateChangedEvent(this.item.value.getOriginalValue());
    };
    /**
     * @param {?} event
     * @param {?} type
     * @return {?}
     */
    DatePickerComponent.prototype.onSpiltDateChange = /**
     * @param {?} event
     * @param {?} type
     * @return {?}
     */
    function (event, type) {
        /** @type {?} */
        var originValue = this.item.value.getOriginalValue();
        /** @type {?} */
        var _start = '';
        /** @type {?} */
        var _end = '';
        /** @type {?} */
        var _formatted = '';
        if (originValue) {
            /** @type {?} */
            var _value = originValue.split(this.dateRangeDatesDelimiter);
            _value[0] && (_start = _value[0]);
            _value[1] && (_end = _value[1]);
        }
        if (type === 'start') {
            _formatted = event.returnFormatted + this.dateRangeDatesDelimiter + _end;
        }
        else {
            _formatted = _start + this.dateRangeDatesDelimiter + event.returnFormatted;
        }
        if (event.returnFormatted === this.item.value.getOriginalValue()) {
            return;
        }
        this.item.value.setOriginalValue({
            formatted: _formatted,
            delimiter: this.dateRangeDatesDelimiter,
        });
        //this.conditionChange.emit();
        this.runDateChangedEvent(this.item.value.getOriginalValue());
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DatePickerComponent.prototype.onDynamicValueChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.item.value.setOriginalValue({
            formatted: event
        });
        this.runDateChangedEvent(this.item.value.getOriginalValue());
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DatePickerComponent.prototype.onDynamicViewChanged = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.item.value.setOriginalValue(event.showDynamicView ? {
            formatted: event.dynamicValue
        } : {
            formatted: event.singleValue,
            delimiter: this.dateRangeDatesDelimiter
        });
        this.runDateChangedEvent(this.item.value.getOriginalValue());
    };
    /**
     * @param {?} field
     * @return {?}
     */
    DatePickerComponent.prototype.getConditionItemTitle = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        return this.solutionService.getConditionItemTitle(field);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatePickerComponent.prototype.beginValueChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        // this.beginValue = $event;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatePickerComponent.prototype.endValueChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        // this.endValue = $event;
    };
    /**
     * @param {?} date
     * @return {?}
     */
    DatePickerComponent.prototype.runDateChangedEvent = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        var _this = this;
        if (this.dateChangedCmd) {
            this.dateChangedCmdSubscription = this.dateChangedCmd(date).subscribe((/**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                if (typeof v === "boolean") {
                    if (v) {
                        _this.conditionChange.emit();
                    }
                }
                else if (typeof v === "object" && v.closeDateSelect !== undefined && !v.closeDateSelect) {
                    if (v.message) {
                        _this.messageService.warning(v.message);
                    }
                    else {
                        _this.conditionChange.emit();
                    }
                }
                else {
                    _this.conditionChange.emit();
                }
            }));
        }
        else {
            this.conditionChange.emit();
        }
    };
    DatePickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-solution-datepicker',
                    template: "<div class=\"farris-group-wrap\" id=\"{{item.id}}\">\r\n    <div class=\"form-group farris-form-group  common-group\"  [ngClass]=\"{'q-state-readonly':item.readonly,'datepicker-range-group':dateRange}\">\r\n        <label class=\"col-form-label\" *ngIf=\"item && !hideLabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n            <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.isRequired()\">*</span>\r\n            <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n            <farris-datepicker *ngIf=\"!dateRange\"\r\n                [(ngModel)]=\"bindValue\"\r\n                [dateRange]=\"dateRange\"\r\n                [placeholder]=\"placeholder\"\r\n                [returnFormat]=\"returnFormat\"\r\n                [dateFormat]=\"dateFormat\"\r\n                [editable]=\"editable\"\r\n                [showType]=\"showType\"\r\n                [showTime]=\"showTime\"\r\n                [readonly]=\"item.readonly\"\r\n                (valueChange)=\"onDateChange($event)\"\r\n                [maxDate]=\"maxDate\"\r\n                [minDate]=\"minDate\"\r\n                [enableDynamic]=\"enableDynamic\"\r\n                (dynamicValueChange)=\"onDynamicValueChange($event)\"\r\n                (dynamicViewChanged)=\"onDynamicViewChanged($event)\"\r\n                id=\"{{testId}}\"\r\n            >\r\n            </farris-datepicker>\r\n            <farris-datepicker *ngIf=\"dateRange && !enableSplit\"\r\n                [dateRange]=\"dateRange\"\r\n                [placeholder]=\"placeholder\"      \r\n                [beginPlaceholder]=\"beginPlaceHolder\"\r\n                [endPlaceholder]=\"endPlaceHolder\"\r\n                [returnFormat]=\"returnFormat\"\r\n                [dateFormat]=\"dateFormat\"\r\n                [editable]=\"editable\"\r\n                [showType]=\"showType\"\r\n                [showTime]=\"showTime\"\r\n                [readonly]=\"item.readonly\"\r\n                [(ngModel)]=\"bindValue\"\r\n                (valueChange)=\"onDateChange($event)\"\r\n                id=\"{{testId}}\"\r\n            >\r\n            </farris-datepicker>\r\n            <div *ngIf=\"dateRange && enableSplit\" class=\"split-date-range\">\r\n                <farris-datepicker\r\n                    [(ngModel)]=\"beginValue\"\r\n                    [dateRange]=\"false\"\r\n                    [placeholder]=\"beginPlaceHolder\"\r\n                    [returnFormat]=\"returnFormat\"\r\n                    [dateFormat]=\"dateFormat\"\r\n                    [editable]=\"editable\"\r\n                    [showType]=\"showType\"\r\n                    [showTime]=\"showTime\"\r\n                    [readonly]=\"item.readonly\"\r\n                    (valueChange)=\"onSpiltDateChange($event, 'start')\"\r\n                    [maxDate]=\"maxDate\"\r\n                    [minDate]=\"minDate\"\r\n                    id=\"{{testId}}\"\r\n                >\r\n                </farris-datepicker>\r\n                <span>~</span>\r\n                <farris-datepicker\r\n                    [(ngModel)]=\"endValue\"\r\n                    [dateRange]=\"false\"\r\n                    [placeholder]=\"endPlaceHolder\"\r\n                    [returnFormat]=\"returnFormat\"\r\n                    [dateFormat]=\"dateFormat\"\r\n                    [editable]=\"editable\"\r\n                    [showType]=\"showType\"\r\n                    [showTime]=\"showTime\"\r\n                    [readonly]=\"item.readonly\"\r\n                    (valueChange)=\"onSpiltDateChange($event, 'end')\"\r\n                    [maxDate]=\"maxDate\"\r\n                    [minDate]=\"minDate\"\r\n                    id=\"{{testId + 'more'}}\"\r\n                >\r\n                </farris-datepicker>\r\n        \r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n"
                }] }
    ];
    /** @nocollapse */
    DatePickerComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    DatePickerComponent.propDecorators = {
        hideLabel: [{ type: Input }],
        item: [{ type: Input }],
        controlType: [{ type: Input }],
        changeFields: [{ type: Input }],
        conditionChange: [{ type: Output, args: ['conditionChange',] }]
    };
    return DatePickerComponent;
}());
export { DatePickerComponent };
if (false) {
    /** @type {?} */
    DatePickerComponent.prototype.hideLabel;
    /** @type {?} */
    DatePickerComponent.prototype.item;
    /** @type {?} */
    DatePickerComponent.prototype.controlType;
    /**
     * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
     * @type {?}
     */
    DatePickerComponent.prototype.changeFields;
    /** @type {?} */
    DatePickerComponent.prototype.conditionChange;
    /** @type {?} */
    DatePickerComponent.prototype.solutionService;
    /** @type {?} */
    DatePickerComponent.prototype.messageService;
    /** @type {?} */
    DatePickerComponent.prototype.dateRange;
    /** @type {?} */
    DatePickerComponent.prototype.showTime;
    /** @type {?} */
    DatePickerComponent.prototype.showType;
    /** @type {?} */
    DatePickerComponent.prototype.maxDate;
    /** @type {?} */
    DatePickerComponent.prototype.minDate;
    /** @type {?} */
    DatePickerComponent.prototype.disableDates;
    /** @type {?} */
    DatePickerComponent.prototype.placeholder;
    /** @type {?} */
    DatePickerComponent.prototype.dateFormat;
    /** @type {?} */
    DatePickerComponent.prototype.returnFormat;
    /** @type {?} */
    DatePickerComponent.prototype.returnType;
    /** @type {?} */
    DatePickerComponent.prototype.disabled;
    /** @type {?} */
    DatePickerComponent.prototype.readonly;
    /** @type {?} */
    DatePickerComponent.prototype.editable;
    /** @type {?} */
    DatePickerComponent.prototype.dateRangeDatesDelimiter;
    /** @type {?} */
    DatePickerComponent.prototype.bindValue;
    /** @type {?} */
    DatePickerComponent.prototype.beginValue;
    /** @type {?} */
    DatePickerComponent.prototype.endValue;
    /** @type {?} */
    DatePickerComponent.prototype.testId;
    /** @type {?} */
    DatePickerComponent.prototype.beginPlaceHolder;
    /** @type {?} */
    DatePickerComponent.prototype.endPlaceHolder;
    /** @type {?} */
    DatePickerComponent.prototype.destroy$;
    /** @type {?} */
    DatePickerComponent.prototype.dateChangedCmd;
    /** @type {?} */
    DatePickerComponent.prototype.dateChangedCmdSubscription;
    /** @type {?} */
    DatePickerComponent.prototype.enableDynamic;
    /** @type {?} */
    DatePickerComponent.prototype.enableSplit;
    /**
     * @type {?}
     * @private
     */
    DatePickerComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbXBvbmVudC1xdWVyeWNvbmRpdGlvbi8iLCJzb3VyY2VzIjpbImxpYi9jb250cm9sY29tcG9uZW50L2RhdGVwaWNrZXIvZGF0ZXBpY2tlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBcUIsUUFBUSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQTRCLE1BQU0sZUFBZSxDQUFDO0FBRTlILE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUVqRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDdkQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2pELE9BQU8sRUFBYyxFQUFFLEVBQUUsT0FBTyxFQUFnQixNQUFNLE1BQU0sQ0FBQztBQUM3RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFekUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXREO0lBK0NFLDZCQUFvQixRQUFrQjtRQUFsQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBekM3QixjQUFTLEdBQVcsS0FBSyxDQUFBOzs7O1FBU3pCLGlCQUFZLEdBQWtCLEVBQUUsQ0FBQztRQUVmLG9CQUFlLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQzs7UUFNaEUsYUFBUSxHQUFXLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyx5REFBeUQ7O1FBQzFGLFlBQU8sR0FBeUIsRUFBRSxDQUFDO1FBQ25DLFlBQU8sR0FBeUIsRUFBRSxDQUFDO1FBUW5DLGFBQVEsR0FBWSxLQUFLLENBQUM7UUFDMUIsNEJBQXVCLEdBQVcsR0FBRyxDQUFDO1FBVXRD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QUNMLEtBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLENBQUM7aUJBQzdCO1lBQ0gsQ0FBQyxFQUFDLENBQUM7U0FDSjthQUFNO1lBQ0wsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUM3QjtJQUNILENBQUM7O2dCQS9RRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLHlCQUF5QjtvQkFDbkMsczJIQUEwQztpQkFDM0M7Ozs7Z0JBZjZDLFFBQVE7Ozs0QkFrQm5ELEtBQUs7dUJBRUwsS0FBSzs4QkFFTCxLQUFLOytCQUtMLEtBQUs7a0NBRUwsTUFBTSxTQUFDLGlCQUFpQjs7SUErUDNCLDBCQUFDO0NBQUEsQUFoUkQsSUFnUkM7U0E1UVksbUJBQW1COzs7SUFFOUIsd0NBQWtDOztJQUVsQyxtQ0FBbUI7O0lBRW5CLDBDQUE2Qjs7Ozs7SUFLN0IsMkNBQTBDOztJQUUxQyw4Q0FBZ0U7O0lBRWhFLDhDQUFpQzs7SUFDakMsNkNBQWdDOztJQUNoQyx3Q0FBbUI7O0lBQ25CLHVDQUFrQjs7SUFDbEIsdUNBQWdDOztJQUNoQyxzQ0FBbUM7O0lBQ25DLHNDQUFtQzs7SUFDbkMsMkNBQTZEOztJQUM3RCwwQ0FBb0I7O0lBQ3BCLHlDQUFtQjs7SUFDbkIsMkNBQXFCOztJQUNyQix5Q0FBbUI7O0lBQ25CLHVDQUFrQjs7SUFDbEIsdUNBQWtCOztJQUNsQix1Q0FBMEI7O0lBQzFCLHNEQUFzQzs7SUFDdEMsd0NBQWtCOztJQUNsQix5Q0FBZ0I7O0lBQ2hCLHVDQUFjOztJQUNkLHFDQUFlOztJQUNmLCtDQUF3Qjs7SUFDeEIsNkNBQXNCOztJQUN0Qix1Q0FBdUI7O0lBQ3ZCLDZDQUE2RDs7SUFDN0QseURBQXlDOztJQUN6Qyw0Q0FBK0I7O0lBRS9CLDBDQUE2Qjs7Ozs7SUFDakIsdUNBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0LCBPbkNoYW5nZXMsIEluamVjdG9yLCBFdmVudEVtaXR0ZXIsIE91dHB1dCwgU2ltcGxlQ2hhbmdlcywgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFF1ZXJ5Q29uZGl0aW9uIH0gZnJvbSAnLi4vLi4vZW50aXR5L3F1ZXJ5Y29uZGl0aW9uJztcclxuaW1wb3J0IHsgU29sdXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZS9zb2x1dGlvbi5zZXJ2aWNlJztcclxuXHJcbmltcG9ydCB7IENvbnRyb2xUeXBlIH0gZnJvbSAnLi4vLi4vZW50aXR5L2NvbnRyb2x0eXBlJztcclxuaW1wb3J0IHsgU2hvd1R5cGUgfSBmcm9tICdAZmFycmlzL3VpLWRhdGVwaWNrZXInO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiwgU3ViamVjdCwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgUXVlcnlDb25kaXRpb25Db21wb25lbnQgfSBmcm9tICcuLi8uLi9xdWVyeWNvbmRpdGlvbi5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBEYXRlQ2hhbmdlZFJlc3VsdCB9IGZyb20gJy4vZGF0ZXBpY2tlci1vcHRpb25zJztcclxuaW1wb3J0IHsgTWVzc2FnZXJTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1tZXNzYWdlcic7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2FwcC1zb2x1dGlvbi1kYXRlcGlja2VyJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vZGF0ZXBpY2tlci5jb21wb25lbnQuaHRtbCcsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEYXRlUGlja2VyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XHJcblxyXG4gIEBJbnB1dCgpIGhpZGVMYWJlbDpib29sZWFuID0gZmFsc2VcclxuICAvLyDov4fmu6TmnaHku7ZcclxuICBASW5wdXQoKSBpdGVtOiBhbnk7XHJcbiAgLy8gXHJcbiAgQElucHV0KCkgY29udHJvbFR5cGU6IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICog5p+Q5Liq5a2X5q615Y+R55Sf5YC85Y+Y5YyW5LqL5Lu25pe277yM6ZyA6KaB5ZCM5q2l5riF56m655qE5a2X5q6177yM5Y+v6IO95LiN5piv5b2T5YmN5a2X5q61XHJcbiAgICovXHJcbiAgQElucHV0KCkgY2hhbmdlRmllbGRzOiBBcnJheTxzdHJpbmc+ID0gW107XHJcblxyXG4gIEBPdXRwdXQoJ2NvbmRpdGlvbkNoYW5nZScpIGNvbmRpdGlvbkNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgc29sdXRpb25TZXJ2aWNlOiBTb2x1dGlvblNlcnZpY2U7XHJcbiAgbWVzc2FnZVNlcnZpY2U6IE1lc3NhZ2VyU2VydmljZTtcclxuICBkYXRlUmFuZ2U6IGJvb2xlYW47IC8vIHRydWXljLrpl7QgZmFsc2XljZVcclxuICBzaG93VGltZTogYm9vbGVhbjsgLy8gdHJ1ZeaYvuekuuaXtumXtCBmYWxzZeS4jeaYvuekulxyXG4gIHNob3dUeXBlOiBudW1iZXIgPSBTaG93VHlwZS5hbGw7IC8vIOaYvuekuuexu+Wei++8jOm7mOiupOaYvuekuuWFqOmDqDHvvJvkuI3mmL7npLrml6XmnJ/vvIznlKjkuo7pgInmi6nlubTmnIjmqKHlvI8y77yb5LiN5pi+56S65pel5pyf5Y+K5pyI5Lu977yM55So5LqO6YCJ5oup5bm05qih5byPM++8m+eUqOS6juWRqOmAieaLqTTjgIJcclxuICBtYXhEYXRlOiBzdHJpbmcgfCBEYXRlIHwgbnVsbCA9ICcnO1xyXG4gIG1pbkRhdGU6IHN0cmluZyB8IERhdGUgfCBudWxsID0gJyc7XHJcbiAgZGlzYWJsZURhdGVzOiB7IHllYXI6IG51bWJlciwgbW9udGg6IG51bWJlciwgZGF5OiBudW1iZXIgfVtdO1xyXG4gIHBsYWNlaG9sZGVyOiBzdHJpbmc7XHJcbiAgZGF0ZUZvcm1hdDogc3RyaW5nOyAvLyDmmL7npLrlgLzml6XmnJ/moLzlvI/ljJZcclxuICByZXR1cm5Gb3JtYXQ6IHN0cmluZzsgLy8g6L+U5Zue5YC85pel5pyf5qC85byP5YyWXHJcbiAgcmV0dXJuVHlwZTogc3RyaW5nOyAvLyDov5Tlm57lgLznsbvlnovvvIzov5Tlm57lgLznsbvlnovpu5jorqTmg4XlhrXkuIvmmK/lkozovpPlhaXlgLznsbvlnovnm7jlkIzvvIzkvYbmmK/lpoLmnpzovpPlhaXlgLzkuLpudWxs562J6Z2e5rOV5YC877yM6buY6K6k5Li6U3RyaW5n77yM5aaC5p6c5oOz5pS55Li6RGF0Ze+8jOWumuS5ieivpeWtl+auteOAglxyXG4gIGRpc2FibGVkOiBib29sZWFuO1xyXG4gIHJlYWRvbmx5OiBib29sZWFuO1xyXG4gIGVkaXRhYmxlOiBib29sZWFuID0gZmFsc2U7XHJcbiAgZGF0ZVJhbmdlRGF0ZXNEZWxpbWl0ZXI6IHN0cmluZyA9ICd+JztcclxuICBiaW5kVmFsdWU6IHN0cmluZztcclxuICBiZWdpblZhbHVlOiBhbnk7XHJcbiAgZW5kVmFsdWU6IGFueTtcclxuICB0ZXN0SWQ6IHN0cmluZztcclxuICBiZWdpblBsYWNlSG9sZGVyOnN0cmluZztcclxuICBlbmRQbGFjZUhvbGRlcjpzdHJpbmc7XHJcbiAgZGVzdHJveSQ6IFN1YmplY3Q8YW55PjtcclxuICBkYXRlQ2hhbmdlZENtZDogKGRhdGU6IGFueSkgPT4gT2JzZXJ2YWJsZTxEYXRlQ2hhbmdlZFJlc3VsdD47XHJcbiAgZGF0ZUNoYW5nZWRDbWRTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcclxuICBlbmFibGVEeW5hbWljOiBib29sZWFuID0gZmFsc2U7IC8v5piv5ZCm5pSv5oyB5Yqo5oCB5pel5pyf77yM5LuF6ZmQc2luZ2xlRGF0ZeaDheWGtVxyXG4gIC8v5Yy66Ze057G75Z6L5pe25piv5ZCm5pSv5oyB6YCJ5oup5Y2V5LiA5Yy66Ze0XHJcbiAgZW5hYmxlU3BsaXQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3Rvcikge1xyXG4gICAgdGhpcy5zb2x1dGlvblNlcnZpY2UgPSB0aGlzLmluamVjdG9yLmdldChTb2x1dGlvblNlcnZpY2UpO1xyXG4gICAgdGhpcy5tZXNzYWdlU2VydmljZSA9IHRoaXMuaW5qZWN0b3IuZ2V0KE1lc3NhZ2VyU2VydmljZSk7XHJcbiAgICBjb25zdCBxdWVyeWNvbmRpdGlvbkNvbXBvbmVudCA9IHRoaXMuaW5qZWN0b3IuZ2V0KFF1ZXJ5Q29uZGl0aW9uQ29tcG9uZW50LCBudWxsKTtcclxuICAgIGlmKHF1ZXJ5Y29uZGl0aW9uQ29tcG9uZW50KSB7XHJcbiAgICAgIHRoaXMuZGVzdHJveSQgPSBxdWVyeWNvbmRpdGlvbkNvbXBvbmVudC5kZXN0cm95JDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuZGVzdHJveSQgPSBuZXcgU3ViamVjdDxhbnk+KCk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgaWYgKGNoYW5nZXNbJ2NoYW5nZUZpZWxkcyddICYmIGNoYW5nZXNbJ2NoYW5nZUZpZWxkcyddLmN1cnJlbnRWYWx1ZSAmJiAhY2hhbmdlc1snY2hhbmdlRmllbGRzJ10uZmlyc3RDaGFuZ2UpIHtcclxuICAgICAgY29uc3QgaXNDaGFuZ2UgPSBjaGFuZ2VzWydjaGFuZ2VGaWVsZHMnXS5jdXJyZW50VmFsdWUuc29tZShmaWVsZCA9PiBmaWVsZCA9PSB0aGlzLml0ZW0uZmllbGRDb2RlKTtcclxuICAgICAgaWYgKGlzQ2hhbmdlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZGF0ZVJhbmdlKSB7XHJcbiAgICAgICAgICB0aGlzLmJlZ2luVmFsdWUgPSB0aGlzLml0ZW0udmFsdWUgJiYgdGhpcy5pdGVtLnZhbHVlLnN0YXJ0VGltZSA/IHRoaXMuaXRlbS52YWx1ZS5zdGFydFRpbWUudG9TdHJpbmcoKS50cmltKCkgOiAnJztcclxuICAgICAgICAgIHRoaXMuZW5kVmFsdWUgPSB0aGlzLml0ZW0udmFsdWUgJiYgdGhpcy5pdGVtLnZhbHVlLmVuZFRpbWUgPyB0aGlzLml0ZW0udmFsdWUuZW5kVGltZS50b1N0cmluZygpLnRyaW0oKSA6ICcnO1xyXG4gICAgICAgICAgdGhpcy5iaW5kVmFsdWUgPSB0aGlzLml0ZW0udmFsdWUuZ2V0T3JpZ2luYWxWYWx1ZSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLmJpbmRWYWx1ZSA9IHRoaXMuaXRlbS52YWx1ZS5nZXRPcmlnaW5hbFZhbHVlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgIHRoaXMudGVzdElkID0gdGhpcy5zb2x1dGlvblNlcnZpY2UuZ2V0R3VpZCgpO1xyXG4gICAgLy8gY29uc3QgY29udHJvbFR5cGUgPSB0aGlzLml0ZW0uY29udHJvbC5nZXRDb250cm9sVHlwZSgpO1xyXG4gICAgc3dpdGNoICh0aGlzLmNvbnRyb2xUeXBlKSB7XHJcbiAgICAgIGNhc2UgQ29udHJvbFR5cGUuRGF0ZVJhbmdlOlxyXG4gICAgICAgIHRoaXMucmV0dXJuRm9ybWF0ID0gdGhpcy5pdGVtLmNvbnRyb2wucmV0dXJuRm9ybWF0ID8gdGhpcy5pdGVtLmNvbnRyb2wucmV0dXJuRm9ybWF0IDogJ3l5eXktTU0tZGQnO1xyXG4gICAgICAgIHRoaXMuZGF0ZUZvcm1hdCA9IHRoaXMuaXRlbS5jb250cm9sLmZvcm1hdCA/IHRoaXMuaXRlbS5jb250cm9sLmZvcm1hdCA6ICd5eXl5LU1NLWRkJztcclxuICAgICAgICB0aGlzLmRhdGVSYW5nZSA9IHRydWU7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgQ29udHJvbFR5cGUuU2luZ2xlRGF0ZTpcclxuICAgICAgICB0aGlzLnJldHVybkZvcm1hdCA9IHRoaXMuaXRlbS5jb250cm9sLnJldHVybkZvcm1hdCA/IHRoaXMuaXRlbS5jb250cm9sLnJldHVybkZvcm1hdCA6ICd5eXl5LU1NLWRkJztcclxuICAgICAgICB0aGlzLmRhdGVGb3JtYXQgPSB0aGlzLml0ZW0uY29udHJvbC5mb3JtYXQgPyB0aGlzLml0ZW0uY29udHJvbC5mb3JtYXQgOiAneXl5eS1NTS1kZCc7XHJcbiAgICAgICAgdGhpcy5kYXRlUmFuZ2UgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmVuYWJsZUR5bmFtaWMgPSB0aGlzLml0ZW0uY29udHJvbC5pc0R5bmFtaWNEYXRlID8gdGhpcy5pdGVtLmNvbnRyb2wuaXNEeW5hbWljRGF0ZSA6IGZhbHNlO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIENvbnRyb2xUeXBlLlNpbmdsZVllYXI6XHJcbiAgICAgICAgdGhpcy5yZXR1cm5Gb3JtYXQgPSB0aGlzLml0ZW0uY29udHJvbC5yZXR1cm5Gb3JtYXQgPyB0aGlzLml0ZW0uY29udHJvbC5yZXR1cm5Gb3JtYXQgOiAneXl5eSc7XHJcbiAgICAgICAgdGhpcy5kYXRlRm9ybWF0ID0gdGhpcy5pdGVtLmNvbnRyb2wuZm9ybWF0ID8gdGhpcy5pdGVtLmNvbnRyb2wuZm9ybWF0IDogJ3l5eXknO1xyXG4gICAgICAgIHRoaXMuc2hvd1R5cGUgPSBTaG93VHlwZS5ub0RhdGVBbmRNb250aDtcclxuICAgICAgICB0aGlzLmRhdGVSYW5nZSA9IGZhbHNlO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIENvbnRyb2xUeXBlLkRhdGVUaW1lUmFuZ2U6XHJcbiAgICAgICAgdGhpcy5yZXR1cm5Gb3JtYXQgPSB0aGlzLml0ZW0uY29udHJvbC5yZXR1cm5Gb3JtYXQgPyB0aGlzLml0ZW0uY29udHJvbC5yZXR1cm5Gb3JtYXQgOiAneXl5eS1NTS1kZCBISDptbTpzcyc7XHJcbiAgICAgICAgaWYodGhpcy5pdGVtLmNvbnRyb2wuZW5hYmxlQ3VzdG9tRm9ybWF0KXtcclxuICAgICAgICAgIC8vIOS9v+eUqOiHquWumuS5ieagvOW8j1xyXG4gICAgICAgICAgdGhpcy5kYXRlRm9ybWF0ID0gdGhpcy5pdGVtLmNvbnRyb2wuZm9ybWF0ID8gdGhpcy5pdGVtLmNvbnRyb2wuZm9ybWF0IDogJ3l5eXktTU0tZGQgSEg6bW06c3MnO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgIC8vIOacquWQr+eUqOiHquWumuS5ieagvOW8j1xyXG4gICAgICAgICAgIHRoaXMuZGF0ZUZvcm1hdCA9IHRoaXMuaXRlbS5jb250cm9sLmZvcm1hdCA/IHRoaXMuaXRlbS5jb250cm9sLmZvcm1hdCA6ICd5eXl5LU1NLWRkJztcclxuICAgICAgICAgICB0aGlzLmRhdGVGb3JtYXQgPSB0aGlzLmRhdGVGb3JtYXQgKyAnIEhIOm1tOnNzJztcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zaG93VGltZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5kYXRlUmFuZ2UgPSB0cnVlO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIENvbnRyb2xUeXBlLlNpbmdsZU1vbnRoOlxyXG4gICAgICAgIHRoaXMucmV0dXJuRm9ybWF0ID0gdGhpcy5pdGVtLmNvbnRyb2wucmV0dXJuRm9ybWF0ID8gdGhpcy5pdGVtLmNvbnRyb2wucmV0dXJuRm9ybWF0IDogJ3l5eXktTU0nO1xyXG4gICAgICAgIHRoaXMuZGF0ZUZvcm1hdCA9IHRoaXMuaXRlbS5jb250cm9sLmZvcm1hdCA/IHRoaXMuaXRlbS5jb250cm9sLmZvcm1hdCA6ICd5eXl5LU1NJztcclxuICAgICAgICB0aGlzLnNob3dUeXBlID0gU2hvd1R5cGUubm9EYXRlO1xyXG4gICAgICAgIHRoaXMuZGF0ZVJhbmdlID0gZmFsc2U7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgQ29udHJvbFR5cGUuTW9udGhSYW5nZTpcclxuICAgICAgICB0aGlzLnJldHVybkZvcm1hdCA9IHRoaXMuaXRlbS5jb250cm9sLnJldHVybkZvcm1hdCA/IHRoaXMuaXRlbS5jb250cm9sLnJldHVybkZvcm1hdCA6ICd5eXl5LU1NJztcclxuICAgICAgICB0aGlzLmRhdGVGb3JtYXQgPSB0aGlzLml0ZW0uY29udHJvbC5mb3JtYXQgPyB0aGlzLml0ZW0uY29udHJvbC5mb3JtYXQgOiAneXl5eS1NTSc7XHJcbiAgICAgICAgdGhpcy5zaG93VHlwZSA9IFNob3dUeXBlLm5vRGF0ZTtcclxuICAgICAgICB0aGlzLmRhdGVSYW5nZSA9IHRydWU7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgQ29udHJvbFR5cGUuU2luZ2xlRGF0ZVRpbWU6XHJcbiAgICAgICAgdGhpcy5yZXR1cm5Gb3JtYXQgPSB0aGlzLml0ZW0uY29udHJvbC5yZXR1cm5Gb3JtYXQgPyB0aGlzLml0ZW0uY29udHJvbC5yZXR1cm5Gb3JtYXQgOiAneXl5eS1NTS1kZCBISDptbTpzcyc7XHJcbiAgICAgICAgaWYodGhpcy5pdGVtLmNvbnRyb2wuZW5hYmxlQ3VzdG9tRm9ybWF0KXtcclxuICAgICAgICAgIC8vIOS9v+eUqOiHquWumuS5ieagvOW8j1xyXG4gICAgICAgICAgdGhpcy5kYXRlRm9ybWF0ID0gdGhpcy5pdGVtLmNvbnRyb2wuZm9ybWF0ID8gdGhpcy5pdGVtLmNvbnRyb2wuZm9ybWF0IDogJ3l5eXktTU0tZGQgSEg6bW06c3MnO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgIC8vIOacquWQr+eUqOiHquWumuS5ieagvOW8j1xyXG4gICAgICAgICAgIHRoaXMuZGF0ZUZvcm1hdCA9IHRoaXMuaXRlbS5jb250cm9sLmZvcm1hdCA/IHRoaXMuaXRlbS5jb250cm9sLmZvcm1hdCA6ICd5eXl5LU1NLWRkJztcclxuICAgICAgICAgICB0aGlzLmRhdGVGb3JtYXQgPSB0aGlzLmRhdGVGb3JtYXQgKyAnIEhIOm1tOnNzJztcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zaG93VGltZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5kYXRlUmFuZ2UgPSBmYWxzZTtcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHRoaXMuZW5hYmxlU3BsaXQgPSB0aGlzLml0ZW0uY29udHJvbC5lbmFibGVTcGxpdCB8fCBmYWxzZVxyXG4gICAgLy8g5pu05paw5p2h5Lu2XHJcbiAgICB0aGlzLnVwZGF0ZVBhcmFtc0J5Q29uZGl0aW9uKCk7XHJcbiAgICB0aGlzLnBsYWNlaG9sZGVyID0gdGhpcy5pdGVtLnBsYWNlSG9sZGVyID8gdGhpcy5pdGVtLnBsYWNlSG9sZGVyIDogdGhpcy5pdGVtLmNvbnRyb2wucGxhY2Vob2xkZXI7XHJcbiAgICBpZiAodGhpcy5kYXRlUmFuZ2UpIHtcclxuICAgICAgdGhpcy5iZWdpblZhbHVlID0gdGhpcy5pdGVtLnZhbHVlICYmIHRoaXMuaXRlbS52YWx1ZS5zdGFydFRpbWUgPyB0aGlzLml0ZW0udmFsdWUuc3RhcnRUaW1lLnRvU3RyaW5nKCkudHJpbSgpIDogJyc7XHJcbiAgICAgIHRoaXMuZW5kVmFsdWUgPSB0aGlzLml0ZW0udmFsdWUgJiYgdGhpcy5pdGVtLnZhbHVlLmVuZFRpbWUgPyB0aGlzLml0ZW0udmFsdWUuZW5kVGltZS50b1N0cmluZygpLnRyaW0oKSA6ICcnO1xyXG4gICAgICB0aGlzLmJlZ2luUGxhY2VIb2xkZXIgPSB0aGlzLml0ZW0uYmVnaW5QbGFjZUhvbGRlciA/IHRoaXMuaXRlbS5iZWdpblBsYWNlSG9sZGVyIDogdGhpcy5wbGFjZWhvbGRlcjtcclxuICAgICAgdGhpcy5lbmRQbGFjZUhvbGRlciA9IHRoaXMuaXRlbS5lbmRQbGFjZUhvbGRlciA/IHRoaXMuaXRlbS5lbmRQbGFjZUhvbGRlciA6IHRoaXMucGxhY2Vob2xkZXI7XHJcbiAgICAgIHRoaXMuYmluZFZhbHVlID0gdGhpcy5pdGVtLnZhbHVlLmdldE9yaWdpbmFsVmFsdWUoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuYmluZFZhbHVlID0gdGhpcy5pdGVtLnZhbHVlLmdldE9yaWdpbmFsVmFsdWUoKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKHRoaXMuaXRlbS5jb250cm9sLndlZWtTZWxlY3QgJiYgdGhpcy5jb250cm9sVHlwZSA9PSBDb250cm9sVHlwZS5EYXRlUmFuZ2UpIHtcclxuICAgICAgdGhpcy5zaG93VHlwZSA9IFNob3dUeXBlLnNlbGVjdFdlZWs7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5kYXRlQ2hhbmdlZENtZCA9IHRoaXMuaXRlbS5jb250cm9sLmRhdGVDaGFuZ2VkQ21kO1xyXG4gICAgaWYoIXRoaXMuZGF0ZUNoYW5nZWRDbWQpIHtcclxuICAgICAgdGhpcy5kYXRlQ2hhbmdlZENtZCA9ICgpID0+IG9mKHsgY2xvc2VEYXRlU2VsZWN0OiB0cnVlIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFxyXG4gICAgdGhpcy5zb2x1dGlvblNlcnZpY2UuZ2V0Q29udHJvbENvbmZpZ1N0YXRlKCkucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0cm95JCkpLnN1YnNjcmliZSgoc2ltcGxlQ29uZGl0aW9ucykgPT4ge1xyXG4gICAgICAvL+eugOWNleadoeS7tlxyXG4gICAgICBsZXQgZmluZFNpbXBsZUNvbmRpdGlvbiA9IHNpbXBsZUNvbmRpdGlvbnMuZmluZChpdGVtID0+IGl0ZW1bJ2ZpZWxkQ29kZSddID09IHRoaXMuaXRlbVsnZmllbGRDb2RlJ10pO1xyXG4gICAgICBpZiAoZmluZFNpbXBsZUNvbmRpdGlvbikge1xyXG4gICAgICAgIHRoaXMudXBkYXRlUGFyYW1zQnlDb25kaXRpb24oZmluZFNpbXBsZUNvbmRpdGlvbik7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICBpZih0aGlzLmRhdGVDaGFuZ2VkQ21kU3Vic2NyaXB0aW9uKSB7XHJcbiAgICAgIHRoaXMuZGF0ZUNoYW5nZWRDbWRTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgdXBkYXRlUGFyYW1zQnlDb25kaXRpb24oY29uZGl0aW9uID0gbnVsbCkge1xyXG4gICAgbGV0IGNvbmRpdGlvbkNvbnRyb2wgPSBudWxsO1xyXG4gICAgY29uZGl0aW9uQ29udHJvbCA9IGNvbmRpdGlvbiA/IGNvbmRpdGlvbi5jb250cm9sIDogdGhpcy5pdGVtLmNvbnRyb2w7XHJcbiAgICBzd2l0Y2ggKHRoaXMuY29udHJvbFR5cGUpIHtcclxuICAgICAgY2FzZSBDb250cm9sVHlwZS5TaW5nbGVZZWFyOlxyXG4gICAgICAgIHRoaXMubWF4RGF0ZSA9IGNvbmRpdGlvbkNvbnRyb2wuaGFzT3duUHJvcGVydHkoJ21heERhdGUnKSA/IGNvbmRpdGlvbkNvbnRyb2xbJ21heERhdGUnXSA6IHRoaXMubWF4RGF0ZTtcclxuICAgICAgICB0aGlzLm1pbkRhdGUgPSBjb25kaXRpb25Db250cm9sLmhhc093blByb3BlcnR5KCdtaW5EYXRlJykgPyBjb25kaXRpb25Db250cm9sWydtaW5EYXRlJ10gOiB0aGlzLm1pbkRhdGU7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIG9uRGF0ZUNoYW5nZShldmVudDogYW55KSB7XHJcbiAgICBpZihldmVudC5yZXR1cm5Gb3JtYXR0ZWQgPT09IHRoaXMuaXRlbS52YWx1ZS5nZXRPcmlnaW5hbFZhbHVlKCkpIHtcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbiAgICB0aGlzLml0ZW0udmFsdWUuc2V0T3JpZ2luYWxWYWx1ZSh7XHJcbiAgICAgIGZvcm1hdHRlZDogZXZlbnQucmV0dXJuRm9ybWF0dGVkLFxyXG4gICAgICBkZWxpbWl0ZXI6IHRoaXMuZGF0ZVJhbmdlRGF0ZXNEZWxpbWl0ZXJcclxuICAgIH0pO1xyXG4gICAgLy90aGlzLmNvbmRpdGlvbkNoYW5nZS5lbWl0KCk7XHJcbiAgICB0aGlzLnJ1bkRhdGVDaGFuZ2VkRXZlbnQodGhpcy5pdGVtLnZhbHVlLmdldE9yaWdpbmFsVmFsdWUoKSk7XHJcbiAgfVxyXG5cclxuICBvblNwaWx0RGF0ZUNoYW5nZShldmVudDogYW55LCB0eXBlOidzdGFydCd8J2VuZCcpIHtcclxuICAgIGxldCBvcmlnaW5WYWx1ZSA9IHRoaXMuaXRlbS52YWx1ZS5nZXRPcmlnaW5hbFZhbHVlKClcclxuICAgIGxldCBfc3RhcnQgPSAnJywgX2VuZCA9ICcnLCBfZm9ybWF0dGVkID0gJydcclxuICAgIGlmKG9yaWdpblZhbHVlKSB7XHJcbiAgICAgIGxldCBfdmFsdWUgPSBvcmlnaW5WYWx1ZS5zcGxpdCh0aGlzLmRhdGVSYW5nZURhdGVzRGVsaW1pdGVyKVxyXG4gICAgICBfdmFsdWVbMF0gJiYgKF9zdGFydCA9IF92YWx1ZVswXSlcclxuICAgICAgX3ZhbHVlWzFdICYmIChfZW5kID0gX3ZhbHVlWzFdKVxyXG4gICAgfVxyXG4gICAgaWYodHlwZSA9PT0gJ3N0YXJ0Jykge1xyXG5cclxuICAgICAgX2Zvcm1hdHRlZCA9ICBldmVudC5yZXR1cm5Gb3JtYXR0ZWQgKyB0aGlzLmRhdGVSYW5nZURhdGVzRGVsaW1pdGVyICsgX2VuZFxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgX2Zvcm1hdHRlZCA9IF9zdGFydCArIHRoaXMuZGF0ZVJhbmdlRGF0ZXNEZWxpbWl0ZXIgKyBldmVudC5yZXR1cm5Gb3JtYXR0ZWRcclxuICAgIH1cclxuICAgIGlmKGV2ZW50LnJldHVybkZvcm1hdHRlZCA9PT0gdGhpcy5pdGVtLnZhbHVlLmdldE9yaWdpbmFsVmFsdWUoKSkge1xyXG4gICAgICByZXR1cm5cclxuICAgIH1cclxuICAgIHRoaXMuaXRlbS52YWx1ZS5zZXRPcmlnaW5hbFZhbHVlKHtcclxuICAgICAgZm9ybWF0dGVkOiBfZm9ybWF0dGVkLFxyXG4gICAgICBkZWxpbWl0ZXI6IHRoaXMuZGF0ZVJhbmdlRGF0ZXNEZWxpbWl0ZXIsXHJcbiAgICB9KTtcclxuICAgIC8vdGhpcy5jb25kaXRpb25DaGFuZ2UuZW1pdCgpO1xyXG4gICAgdGhpcy5ydW5EYXRlQ2hhbmdlZEV2ZW50KHRoaXMuaXRlbS52YWx1ZS5nZXRPcmlnaW5hbFZhbHVlKCkpO1xyXG4gIH1cclxuICBvbkR5bmFtaWNWYWx1ZUNoYW5nZShldmVudDogYW55KSB7XHJcbiAgICB0aGlzLml0ZW0udmFsdWUuc2V0T3JpZ2luYWxWYWx1ZSh7XHJcbiAgICAgIGZvcm1hdHRlZDogZXZlbnRcclxuICAgIH0pO1xyXG4gICAgdGhpcy5ydW5EYXRlQ2hhbmdlZEV2ZW50KHRoaXMuaXRlbS52YWx1ZS5nZXRPcmlnaW5hbFZhbHVlKCkpO1xyXG4gIH1cclxuXHJcbiAgb25EeW5hbWljVmlld0NoYW5nZWQoZXZlbnQpIHtcclxuXHJcbiAgICB0aGlzLml0ZW0udmFsdWUuc2V0T3JpZ2luYWxWYWx1ZShldmVudC5zaG93RHluYW1pY1ZpZXcgPyB7XHJcbiAgICAgIGZvcm1hdHRlZDogZXZlbnQuZHluYW1pY1ZhbHVlXHJcbiAgICB9IDoge1xyXG4gICAgICBmb3JtYXR0ZWQ6IGV2ZW50LnNpbmdsZVZhbHVlLFxyXG4gICAgICBkZWxpbWl0ZXI6IHRoaXMuZGF0ZVJhbmdlRGF0ZXNEZWxpbWl0ZXJcclxuICAgIH0pO1xyXG4gICAgdGhpcy5ydW5EYXRlQ2hhbmdlZEV2ZW50KHRoaXMuaXRlbS52YWx1ZS5nZXRPcmlnaW5hbFZhbHVlKCkpO1xyXG4gICBcclxuICB9XHJcblxyXG4gIGdldENvbmRpdGlvbkl0ZW1UaXRsZShmaWVsZDogUXVlcnlDb25kaXRpb24pIHtcclxuICAgIHJldHVybiB0aGlzLnNvbHV0aW9uU2VydmljZS5nZXRDb25kaXRpb25JdGVtVGl0bGUoZmllbGQpO1xyXG4gIH1cclxuXHJcbiAgYmVnaW5WYWx1ZUNoYW5nZSgkZXZlbnQpIHtcclxuICAgLy8gdGhpcy5iZWdpblZhbHVlID0gJGV2ZW50O1xyXG4gIH1cclxuXHJcbiAgZW5kVmFsdWVDaGFuZ2UoJGV2ZW50KSB7XHJcbiAgIC8vIHRoaXMuZW5kVmFsdWUgPSAkZXZlbnQ7XHJcbiAgfVxyXG5cclxuICBydW5EYXRlQ2hhbmdlZEV2ZW50KGRhdGU6IGFueSkge1xyXG4gICAgaWYodGhpcy5kYXRlQ2hhbmdlZENtZCkge1xyXG4gICAgICB0aGlzLmRhdGVDaGFuZ2VkQ21kU3Vic2NyaXB0aW9uID0gdGhpcy5kYXRlQ2hhbmdlZENtZChkYXRlKS5zdWJzY3JpYmUoKHY6IGFueSkgPT4ge1xyXG4gICAgICAgIGlmKHR5cGVvZiB2ID09PSBcImJvb2xlYW5cIikge1xyXG4gICAgICAgICAgaWYodikge1xyXG4gICAgICAgICAgICB0aGlzLmNvbmRpdGlvbkNoYW5nZS5lbWl0KCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmKHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHYuY2xvc2VEYXRlU2VsZWN0ICE9PSB1bmRlZmluZWQgJiYgIXYuY2xvc2VEYXRlU2VsZWN0KSB7XHJcbiAgICAgICAgICBpZih2Lm1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgdGhpcy5tZXNzYWdlU2VydmljZS53YXJuaW5nKHYubWVzc2FnZSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmNvbmRpdGlvbkNoYW5nZS5lbWl0KCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuY29uZGl0aW9uQ2hhbmdlLmVtaXQoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5jb25kaXRpb25DaGFuZ2UuZW1pdCgpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=