/**
 * @fileoverview added by tsickle
 * Generated from: lib/fieldconfigdialog/configdialog.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Output, EventEmitter, ViewChild, ViewEncapsulation, Input } from '@angular/core';
import { SolutionService } from '../service/solution.service';
import { LocaleService } from '@farris/ui-locale';
import { DialogComponent } from '@farris/ui-dialog';
import { MultiSelectComponent } from '@farris/ui-multi-select';
import { NotifyService } from '@farris/ui-notify';
var ConfigDialogComponent = /** @class */ (function () {
    function ConfigDialogComponent(solutionService, localeService, notify) {
        this.solutionService = solutionService;
        this.localeService = localeService;
        this.notify = notify;
        this.inputSelectedFileds = [];
        this.cancelEmitter = new EventEmitter();
        this.confirmEmitter = new EventEmitter();
        this.selectedIds = [];
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ConfigDialogComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.filedsDataSource && changes.filedsDataSource.currentValue) {
            this.visibleFields = this.filedsDataSource.filter((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return !!item.visible; }));
        }
        if (changes.inputSelectedFileds && changes.inputSelectedFileds.currentValue) {
            this.visibleSelectedFields = this.inputSelectedFileds.filter((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return !!item.visible; }));
            if (this.visibleSelectedFields.length) {
                this.selectedIds = this.visibleSelectedFields.map((/**
                 * @param {?} qc
                 * @return {?}
                 */
                function (qc) { return qc.id; }));
            }
        }
    };
    /**
     * @return {?}
     */
    ConfigDialogComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.title = this.localeService.getValue('queryCondition.container.config');
        if (this.filedsDataSource) {
            this.visibleFields = this.filedsDataSource.filter((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return !!item.visible; }));
        }
    };
    /**
     * @return {?}
     */
    ConfigDialogComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.multiSelectCmp.enableMoveMore !== undefined) {
            this.multiSelectCmp.enableMoveMore = true;
        }
    };
    /**
     * 取消
     */
    /**
     * 取消
     * @return {?}
     */
    ConfigDialogComponent.prototype.cancel = /**
     * 取消
     * @return {?}
     */
    function () {
        this.selectedIds = this.visibleSelectedFields.map((/**
         * @param {?} qc
         * @return {?}
         */
        function (qc) { return qc.id; }));
        //undo: 穿梭框组件的selectedId值为空数组时存在问题，通过组建的moveAllToLeft保证该功能
        if (!this.selectedIds.length) {
            this.multiSelectCmp.moveAllToLeft();
        }
        this.cancelEmitter.emit(true);
        this.multiSelectCmp.searchValue = '';
        this.dialog.close();
    };
    /**
     * 确认
     */
    /**
     * 确认
     * @return {?}
     */
    ConfigDialogComponent.prototype.confirm = /**
     * 确认
     * @return {?}
     */
    function () {
        var _this = this;
        //必填字段必选选择，否则给与提示
        /** @type {?} */
        var requiredAndUncheck = this.visibleFields.filter((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return val.control && val.control.isRequired(); })).filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return !_this.selectedIds.includes(item.id); }));
        if (requiredAndUncheck && requiredAndUncheck.length) {
            /** @type {?} */
            var msg = requiredAndUncheck.map((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return val.fieldName; })).join('、') + '为必选字段，请勾选后再进行保存操作。';
            this.notify.error(msg);
            return;
        }
        /** @type {?} */
        var selectedFields = [];
        /** @type {?} */
        var _fieldData;
        this.selectedIds.forEach((/**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            /** @type {?} */
            var index = _this.visibleSelectedFields.findIndex((/**
             * @param {?} field
             * @return {?}
             */
            function (field) { return field.id == id; }));
            if (index > -1) {
                selectedFields.push(_this.visibleSelectedFields[index].fieldCode);
            }
            else {
                _fieldData = _this.visibleFields.find((/**
                 * @param {?} field
                 * @return {?}
                 */
                function (field) { return field.id == id; }));
                _fieldData.value.clearValue();
                selectedFields.push(_fieldData.fieldCode);
            }
        }));
        this.confirmEmitter.emit(selectedFields);
        this.multiSelectCmp.searchValue = '';
        this.dialog.close();
    };
    /**
     * 重置
     */
    /**
     * 重置
     * @return {?}
     */
    ConfigDialogComponent.prototype.reset = /**
     * 重置
     * @return {?}
     */
    function () {
    };
    ConfigDialogComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-queryconfigdialog',
                    template: "<farris-dialog #dialog [buttons]=\"configDialogButtonRef\" [width]=\"699\" [height]=\"544\" [title]=\"title\">\r\n    <multi-select #searchMulti \r\n    [dataSource]=\"visibleFields\"\r\n     [idField]=\"'id'\" \r\n     [textField]=\"'fieldName'\" \r\n     [displayType]=\"'List'\" \r\n     [(selectedId)]=\"selectedIds\" \r\n     [showCheckbox]=\"true\">\r\n        <ng-template farrisTemplate=\"text\" let-data>\r\n            {{ data['fieldName'] }}\r\n        </ng-template>\r\n    </multi-select>\r\n</farris-dialog>\r\n<ng-template #configDialogButtonRef>\r\n    <button class=\"btn btn-primary\" (click)=\"confirm()\">{{'queryCondition.configDialog.confirm' | locale}}</button>\r\n    <button class=\"btn btn-secondary\" (click)=\"cancel()\">{{'queryCondition.configDialog.cancel' | locale}}</button>\r\n</ng-template>",
                    encapsulation: ViewEncapsulation.None,
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ConfigDialogComponent.ctorParameters = function () { return [
        { type: SolutionService },
        { type: LocaleService },
        { type: NotifyService }
    ]; };
    ConfigDialogComponent.propDecorators = {
        inputSelectedFileds: [{ type: Input }],
        filedsDataSource: [{ type: Input }],
        cancelEmitter: [{ type: Output }],
        confirmEmitter: [{ type: Output }],
        dialog: [{ type: ViewChild, args: ['dialog',] }],
        multiSelectCmp: [{ type: ViewChild, args: ['searchMulti',] }]
    };
    return ConfigDialogComponent;
}());
export { ConfigDialogComponent };
if (false) {
    /** @type {?} */
    ConfigDialogComponent.prototype.inputSelectedFileds;
    /** @type {?} */
    ConfigDialogComponent.prototype.filedsDataSource;
    /** @type {?} */
    ConfigDialogComponent.prototype.cancelEmitter;
    /** @type {?} */
    ConfigDialogComponent.prototype.confirmEmitter;
    /** @type {?} */
    ConfigDialogComponent.prototype.dialog;
    /** @type {?} */
    ConfigDialogComponent.prototype.multiSelectCmp;
    /** @type {?} */
    ConfigDialogComponent.prototype.selectedIds;
    /** @type {?} */
    ConfigDialogComponent.prototype.title;
    /** @type {?} */
    ConfigDialogComponent.prototype.visibleFields;
    /** @type {?} */
    ConfigDialogComponent.prototype.visibleSelectedFields;
    /**
     * @type {?}
     * @private
     */
    ConfigDialogComponent.prototype.solutionService;
    /**
     * @type {?}
     * @private
     */
    ConfigDialogComponent.prototype.localeService;
    /**
     * @type {?}
     * @private
     */
    ConfigDialogComponent.prototype.notify;
}
//# sourceMappingURL=data:application/json;base64,