import { BsModalService } from '@farris/ui-modal';
import { CommonModule } from '@angular/common';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { LayoutModule } from '@farris/ui-layout';
import { LookupModule } from '@farris/ui-lookup';
import { MultiSelectModule } from '@farris/ui-multi-select';
import { FieldGroupModule } from '@farris/ui-field-group';
import { InputGroupModule } from '@farris/ui-input-group';
import { FDropdownDirectiveTypeModule } from '@farris/ui-dropdown';
import { LoadingModule } from '@farris/ui-loading';
import { ComboListModule } from '@farris/ui-combo-list';
import { NumberSpinnerModule } from '@farris/ui-number-spinner';
import { FarrisFormsModule } from '@farris/ui-forms';
import { ShowType, FarrisDatePickerModule } from '@farris/ui-datepicker';
import { takeUntil } from 'rxjs/operators';
import { ComboLookupModule } from '@farris/ui-combo-lookup';
import { NgControl, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { FarrisTooltipModule } from '@farris/ui-tooltip';
import { BehaviorSubject, Subject, of } from 'rxjs';
import { NotifyService, NotifyModule } from '@farris/ui-notify';
import { cloneDeep } from 'lodash-es';
import { MessagerService } from '@farris/ui-messager';
import { LocaleService, LocaleModule } from '@farris/ui-locale';
import { Injectable, EventEmitter, Component, Output, ViewChild, ViewEncapsulation, Input, ComponentFactoryResolver, Injector, LOCALE_ID, NgZone, HostBinding, Directive, Optional, Self, ElementRef, ChangeDetectorRef, NgModule } from '@angular/core';
import { IdService, OverLayHiddenService } from '@farris/ui-common';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/communicationservice.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 为了兼容旧代码，
 * 保留一个空的service
 */
class CommunicationService {
    constructor() {
        this.eventbus = new EventEmitter();
    }
}
CommunicationService.decorators = [
    { type: Injectable }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/convertorservice.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 为了兼容旧代码，
 * 保留一个空的service
 */
class ConvertorService {
    constructor() { }
}
ConvertorService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ConvertorService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const ControlType = {
    Text: 0,
    SingleDate: 1,
    SmartHelp: 2,
    DropDownList: 3,
    DateRange: 4,
    NumberRange: 5,
    SingleNumber: 6,
    SingleYear: 7,
    BoolCheck: 8,
    DateTimeRange: 9,
    SingleMonth: 10,
    MonthRange: 11,
    SingleDateTime: 12,
    ComboLookUp: 13,
    Radio: 14,
    InputGroup: 15,
};
ControlType[ControlType.Text] = 'Text';
ControlType[ControlType.SingleDate] = 'SingleDate';
ControlType[ControlType.SmartHelp] = 'SmartHelp';
ControlType[ControlType.DropDownList] = 'DropDownList';
ControlType[ControlType.DateRange] = 'DateRange';
ControlType[ControlType.NumberRange] = 'NumberRange';
ControlType[ControlType.SingleNumber] = 'SingleNumber';
ControlType[ControlType.SingleYear] = 'SingleYear';
ControlType[ControlType.BoolCheck] = 'BoolCheck';
ControlType[ControlType.DateTimeRange] = 'DateTimeRange';
ControlType[ControlType.SingleMonth] = 'SingleMonth';
ControlType[ControlType.MonthRange] = 'MonthRange';
ControlType[ControlType.SingleDateTime] = 'SingleDateTime';
ControlType[ControlType.ComboLookUp] = 'ComboLookUp';
ControlType[ControlType.Radio] = 'Radio';
ControlType[ControlType.InputGroup] = 'InputGroup';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/dropdownlist/enumtype.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const EnumType = {
    IntType: 0,
    StringType: 1,
    BoolType: 2,
};
EnumType[EnumType.IntType] = 'IntType';
EnumType[EnumType.StringType] = 'StringType';
EnumType[EnumType.BoolType] = 'BoolType';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/dropdownlist/integerenumvalue.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 下拉列表Integer类型
 */
class EnumIntegerValue {
    /**
     * @return {?}
     */
    getEnumType() {
        return EnumType.IntType;
    }
    /**
     * @return {?}
     */
    getEnumValueName() {
        return this.name;
    }
    /**
     * @return {?}
     */
    getEnumValue() {
        return this.value;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/dropdownlist/stringenumvalue.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 下拉列表String类型
 */
class EnumStringValue {
    /**
     * @return {?}
     */
    getEnumType() {
        return EnumType.StringType;
    }
    /**
     * @return {?}
     */
    getEnumValueName() {
        return this.name;
    }
    /**
     * @return {?}
     */
    getEnumValue() {
        return this.value;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/dropdownlist/boolenumvalue.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 下拉列表Bool类型
 */
class EnumBoolValue {
    /**
     * @return {?}
     */
    getEnumType() {
        return EnumType.BoolType;
    }
    /**
     * @return {?}
     */
    getEnumValueName() {
        return this.name;
    }
    /**
     * @return {?}
     */
    getEnumValue() {
        return this.value;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/dropdownlist/ienumvalue.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class EnumValueConvert {
    /**
     * @param {?} obj
     * @return {?}
     */
    convertJObject(obj) {
        /** @type {?} */
        let enumValue = (/** @type {?} */ (obj));
        /** @type {?} */
        let enumType = enumValue.getEnumType();
        /** @type {?} */
        let jobj = new Object();
        jobj["Type"] = enumType;
        jobj["Content"] = enumValue;
        return jobj;
    }
    /**
     * @param {?} jobj
     * @return {?}
     */
    initFromJobject(jobj) {
        /** @type {?} */
        let enumType = (/** @type {?} */ (jobj["Type"]));
        /** @type {?} */
        let content = (/** @type {?} */ (jobj["Content"]));
        if (enumType == EnumType.IntType) {
            return Object.assign(new EnumIntegerValue(), content);
        }
        else if (enumType == EnumType.BoolType) {
            return Object.assign(new EnumBoolValue(), content);
        }
        else {
            return Object.assign(new EnumStringValue(), content);
        }
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/dropdownlist/dropdownlistcontrol.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 下拉列表控件
 */
class DropDownListControl {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.DropDownList;
    }
    /**
     * @return {?}
     */
    isRequired() {
        return !!this.require;
    }
}
/**
 * 下拉列表控件序列化与反序列化器
 */
class DropDownListControlConvert {
    /**
     * 序列化
     * @param {?} obj 下拉列表控件实体
     * @return {?}
     */
    convertToObject(obj) {
        /** @type {?} */
        let dropDownListControl = (/** @type {?} */ (obj));
        /** @type {?} */
        let jobj = new Object();
        jobj["valueType"] = dropDownListControl.valueType;
        if (dropDownListControl.enumValues != null) {
            /** @type {?} */
            let jarray = jobj["enumValues"] = [];
            /** @type {?} */
            let convertor = new EnumValueConvert();
            dropDownListControl.enumValues.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                if (dropDownListControl.valueType == EnumType.BoolType) {
                    jarray.push(convertor.convertJObject(Object.assign(new EnumBoolValue(), element)));
                }
                else if (dropDownListControl.valueType == EnumType.IntType) {
                    jarray.push(convertor.convertJObject(Object.assign(new EnumIntegerValue(), element)));
                }
                else {
                    jarray.push(convertor.convertJObject(Object.assign(new EnumStringValue(), element)));
                }
            }));
        }
        jobj["uri"] = dropDownListControl.uri;
        jobj["beforeShow"] = dropDownListControl.beforeShow;
        jobj["beforeHide"] = dropDownListControl.beforeHide;
        jobj["idField"] = dropDownListControl.idField;
        jobj["textField"] = dropDownListControl.textField;
        jobj["multiSelect"] = dropDownListControl.multiSelect;
        jobj["panelHeight"] = dropDownListControl.panelHeight;
        jobj["placeholder"] = dropDownListControl.placeholder;
        jobj["className"] = dropDownListControl.className;
        jobj["require"] = dropDownListControl.require;
        return jobj;
    }
    /**
     * 反序列化
     * @param {?} jobj 下拉列表控件实体序列化后的JSON对象
     * @return {?}
     */
    initFromObject(jobj) {
        /** @type {?} */
        let control = new DropDownListControl();
        if (jobj["valueType"] != null) {
            control.valueType = (/** @type {?} */ (jobj["valueType"]));
        }
        if (jobj["enumValues"] != null) {
            control.enumValues = new Array();
            jobj["enumValues"].forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                /** @type {?} */
                let convertor = new EnumValueConvert();
                control.enumValues.push(convertor.initFromJobject(element));
            }));
        }
        if (jobj["uri"] != null) {
            control.uri = jobj["uri"];
        }
        if (jobj["beforeShow"] != null) {
            control.beforeShow = jobj["beforeShow"];
        }
        if (jobj["beforeHide"] != null) {
            control.beforeHide = jobj["beforeHide"];
        }
        if (jobj["idField"] != null) {
            control.idField = jobj["idField"];
        }
        if (jobj["textField"] != null) {
            control.textField = jobj["textField"];
        }
        if (jobj["multiSelect"] != null) {
            control.multiSelect = jobj["multiSelect"];
        }
        if (jobj["panelHeight"] != null) {
            control.panelHeight = jobj["panelHeight"];
        }
        if (jobj["placeholder"] != null) {
            control.placeholder = jobj["placeholder"];
        }
        if (jobj["className"] != null) {
            control.className = jobj["className"];
        }
        if (jobj["require"] != null) {
            control.require = jobj["require"];
        }
        return control;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/text/textcontrol.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 文本控件
 */
class TextControl {
    /**
     * 获取控件类型，返回值：文本控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.Text;
    }
    /**
     * @return {?}
     */
    isRequired() {
        return !!this.require;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/daterange/date-range.control.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 日期区间控件
 */
class DateRangeControl {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.DateRange;
    }
    /**
     * @return {?}
     */
    isRequired() {
        return !!this.require;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/date/single-date-control.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 日期控件
 */
class SingleDateControl {
    /**
     * @return {?}
     */
    isRequired() {
        return !!this.require;
    }
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.SingleDate;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/smarthelp/smarthelpcontrol.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 帮助控件
 */
class SmartHelpContol {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.SmartHelp;
    }
    /**
     * @return {?}
     */
    isRequired() {
        return !!this.require;
    }
}
class QuickSelectOption {
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/numberrange/numberrangecontrol.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 数字区间控件
 */
class NumberRangeControl {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.NumberRange;
    }
    /**
     * @return {?}
     */
    isRequired() {
        return !!this.require;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/number/single-number-control.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 数字区间控件
 */
class SingleNumberControl {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.SingleNumber;
    }
    /**
     * @return {?}
     */
    isRequired() {
        return !!this.require;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/year/year-control.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 日期控件
 */
class SingleYearControl {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.SingleYear;
    }
    /**
     * @return {?}
     */
    isRequired() {
        return !!this.require;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/checkbox/checkbox-control.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 日期控件
 */
class CheckBoxControl {
    constructor() {
        /* radio 数组 */
        this.data = [];
        /* 分隔符 默认逗号*/
        this.separator = ',';
        /* 值类型是否是string */
        this.isStringValue = true;
    }
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.BoolCheck;
    }
    /**
     * @return {?}
     */
    isRequired() {
        return !!this.require;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/daterange/datertime-range-control.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 日期区间控件
 */
class DateTimeRangeControl {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.DateTimeRange;
    }
    /**
     * @return {?}
     */
    isRequired() {
        return !!this.require;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/month/month-control.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 日期控件
 */
class SingleMonthControl {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.SingleMonth;
    }
    /**
     * @return {?}
     */
    isRequired() {
        return !!this.require;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/monthrange/month-range-control.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 日期区间控件
 */
class MonthRangeControl {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.MonthRange;
    }
    /**
     * @return {?}
     */
    isRequired() {
        return !!this.require;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/date/single-date-time-control.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 日期控件
 */
class SingleDateTimeControl {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.SingleDateTime;
    }
    /**
     * @return {?}
     */
    isRequired() {
        return !!this.require;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/combolookup/combolookup-control.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 帮助控件
 */
class ComboLookUpControl {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.ComboLookUp;
    }
    /**
     * @return {?}
     */
    isRequired() {
        return !!this.require;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/radio/radio-control.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 单选组控件
 */
class RadioControl {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.Radio;
    }
    /**
     * @return {?}
     */
    isRequired() {
        return !!this.require;
    }
}
/**
 * 单选组控件序列化与反序列化器
 */
class RadioControlConvert {
    /**
     * 序列化
     * @param {?} obj 单选组控件实体
     * @return {?}
     */
    convertToObject(obj) {
        /** @type {?} */
        let radioControl = (/** @type {?} */ (obj));
        /** @type {?} */
        let jobj = new Object();
        jobj["valueType"] = radioControl.valueType;
        if (radioControl.enumValues != null) {
            /** @type {?} */
            let jarray = jobj["enumValues"] = [];
            /** @type {?} */
            let convertor = new EnumValueConvert();
            radioControl.enumValues.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                if (radioControl.valueType == EnumType.BoolType) {
                    jarray.push(convertor.convertJObject(Object.assign(new EnumBoolValue(), element)));
                }
                else if (radioControl.valueType == EnumType.IntType) {
                    jarray.push(convertor.convertJObject(Object.assign(new EnumIntegerValue(), element)));
                }
                else {
                    jarray.push(convertor.convertJObject(Object.assign(new EnumStringValue(), element)));
                }
            }));
        }
        jobj["horizontal"] = radioControl.horizontal;
        jobj["showLabel"] = radioControl.showLabel;
        jobj["disabled"] = radioControl.disabled;
        jobj["className"] = radioControl.className;
        jobj["require"] = radioControl.require;
        return jobj;
    }
    /**
     * 反序列化
     * @param {?} jobj 单选组控件实体序列化后的JSON对象
     * @return {?}
     */
    initFromObject(jobj) {
        /** @type {?} */
        let control = new RadioControl();
        if (jobj["valueType"] != null) {
            control.valueType = (/** @type {?} */ (jobj["valueType"]));
        }
        if (jobj["enumValues"] != null) {
            control.enumValues = new Array();
            jobj["enumValues"].forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                /** @type {?} */
                let convertor = new EnumValueConvert();
                control.enumValues.push(convertor.initFromJobject(element));
            }));
        }
        if (jobj["horizontal"] != null) {
            control.horizontal = jobj["horizontal"];
        }
        if (jobj["showLabel"] != null) {
            control.showLabel = jobj["showLabel"];
        }
        if (jobj["disabled"] != null) {
            control.disabled = jobj["disabled"];
        }
        if (jobj["className"] != null) {
            control.className = jobj["className"];
        }
        if (jobj["require"] != null) {
            control.require = jobj["require"];
        }
        return control;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/input-group/inputgroupcontrol.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 智能输入框控件
 */
class InputGroupControl {
    /**
     * 获取控件类型，返回值：智能输入框控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.InputGroup;
    }
    /**
     * @return {?}
     */
    isRequired() {
        return !!this.require;
    }
}
class DialogConfig {
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/icontrol.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ControlConvert {
    /**
     * @param {?} obj
     * @return {?}
     */
    convertJObject(obj) {
        /** @type {?} */
        let control = (/** @type {?} */ (obj));
        /** @type {?} */
        let controlType = control.getControlType();
        /** @type {?} */
        let jobj = new Object();
        jobj["Type"] = controlType;
        if (controlType == ControlType.DropDownList) {
            /** @type {?} */
            let convertor = new DropDownListControlConvert();
            jobj["Content"] = convertor.convertToObject((/** @type {?} */ (control)));
        }
        else if (controlType == ControlType.Radio) {
            /** @type {?} */
            let convertor = new RadioControlConvert();
            jobj["Content"] = convertor.convertToObject((/** @type {?} */ (control)));
        }
        else {
            jobj["Content"] = control;
        }
        return jobj;
    }
    /**
     * @param {?} jobj
     * @return {?}
     */
    initFromJobject(jobj) {
        /** @type {?} */
        let controlType = (/** @type {?} */ (jobj["Type"]));
        /** @type {?} */
        let content = jobj["Content"];
        if (controlType == ControlType.Text)
            return Object.assign(new TextControl(), (/** @type {?} */ (content)));
        if (controlType == ControlType.InputGroup)
            return Object.assign(new InputGroupControl(), (/** @type {?} */ (content)));
        if (controlType == ControlType.DateRange)
            return Object.assign(new DateRangeControl(), (/** @type {?} */ (content)));
        if (controlType == ControlType.NumberRange)
            return Object.assign(new NumberRangeControl(), (/** @type {?} */ (content)));
        if (controlType == ControlType.SingleDate)
            return Object.assign(new SingleDateControl(), (/** @type {?} */ (content)));
        if (controlType == ControlType.SingleNumber)
            return Object.assign(new SingleNumberControl(), (/** @type {?} */ (content)));
        if (controlType == ControlType.DropDownList)
            return new DropDownListControlConvert().initFromObject(content);
        if (controlType == ControlType.SmartHelp)
            return Object.assign(new SmartHelpContol(), (/** @type {?} */ (content)));
        if (controlType == ControlType.ComboLookUp)
            return Object.assign(new ComboLookUpControl(), (/** @type {?} */ (content)));
        if (controlType == ControlType.SingleYear)
            return Object.assign(new SingleYearControl(), (/** @type {?} */ (content)));
        if (controlType == ControlType.SingleMonth)
            return Object.assign(new SingleMonthControl(), (/** @type {?} */ (content)));
        if (controlType == ControlType.BoolCheck)
            return Object.assign(new CheckBoxControl(), (/** @type {?} */ (content)));
        if (controlType == ControlType.Radio)
            return new RadioControlConvert().initFromObject(content);
        if (controlType == ControlType.DateTimeRange)
            return Object.assign(new DateTimeRangeControl(), (/** @type {?} */ (content)));
        if (controlType == ControlType.MonthRange)
            return Object.assign(new MonthRangeControl(), (/** @type {?} */ (content)));
        if (controlType == ControlType.SingleDateTime)
            return Object.assign(new SingleDateTimeControl(), (/** @type {?} */ (content)));
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/textvalue.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TextValue {
    /**
     * @return {?}
     */
    clearValue() {
        this.value = undefined;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        this.value = value;
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return this.value;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.Text;
    }
    /**
     * @param {?=} data
     */
    constructor(data = { value: '' }) {
        // this.value = data.value ? data.value.trim() : '';
        this.value = data.value ? data.value : '';
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.value;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/numberrangevaue.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NumberRangeValue {
    /**
     * @return {?}
     */
    isEmpty() {
        return (this.startValue == null && this.endValue == null);
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.startValue = undefined;
        this.endValue = undefined;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        throw new Error("Method not implemented.");
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return {
            begin: this.startValue,
            end: this.endValue
        };
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.NumberRange;
    }
    /**
     * @param {?=} data
     */
    constructor(data = { startValue: null, endValue: null }) {
        this.startValue = data.startValue == null ? null : parseFloat(data.startValue);
        this.endValue = data.endValue == null ? null : parseFloat(data.endValue);
    }
}
class NumberRangeValueConvertor {
    /**
     * @param {?} obj
     * @return {?}
     */
    convertToObject(obj) {
        /** @type {?} */
        let numberRangeValue = (/** @type {?} */ (obj));
        /** @type {?} */
        let jobj = new Object();
        jobj["startValue"] = numberRangeValue.startValue;
        jobj["endValue"] = numberRangeValue.endValue;
        return jobj;
    }
    /**
     * @param {?} jobj
     * @return {?}
     */
    initFromObject(jobj) {
        /** @type {?} */
        let numberRangeValue = new NumberRangeValue();
        if (jobj["startValue"]) {
            //key point！as Number并不会转化格式
            numberRangeValue.startValue = parseFloat(jobj["startValue"]);
        }
        if (jobj["endValue"]) {
            numberRangeValue.endValue = parseFloat(jobj["endValue"]);
        }
        return numberRangeValue;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/daterangevalue.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DateRangeValue {
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        if (value.formatted) {
            this.startTime = value.formatted.split(value.delimiter)[0];
            this.endTime = value.formatted.split(value.delimiter)[1];
        }
        else {
            this.clearValue();
        }
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        if (!this.startTime && !this.endTime) {
            return '';
        }
        return `${this.startTime}~${this.endTime}`;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.DateRange;
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.startTime = undefined;
        this.endTime = undefined;
    }
    /**
     * @param {?=} value
     */
    constructor(value = { startTime: '', endTime: '' }) {
        this.startTime = value.startTime;
        this.endTime = value.endTime;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.startTime && !this.endTime;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/smarthelpvalue.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SmartHelpValue {
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.SmartHelp;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        throw new Error("Method not implemented.");
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        /** @type {?} */
        const args = this.valueField.split('.');
        /** @type {?} */
        const valueArr = this.value.map((/**
         * @param {?} helpItem
         * @return {?}
         */
        helpItem => this.getPropValue(helpItem, cloneDeep(args))));
        return valueArr && valueArr.length ? valueArr.join(',') : '';
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.value = [];
        this.valueField = undefined;
        this.textValue = undefined;
        this.isInputText = undefined;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.value.length;
    }
    /**
     * @param {?=} data
     */
    constructor(data = { value: [], valueField: undefined, textValue: undefined, isInputText: undefined }) {
        if (data.textValue) {
            this.value = data.value;
            this.valueField = data.valueField;
            this.textValue = data.textValue;
            this.isInputText = data.isInputText;
        }
        else {
            //帮助未支持多选时，没有textValue属性，所有值都是通过选择产生的
            this.value = data.value;
            this.valueField = data.valueField ? data.valueField : '';
            this.textValue = 'help-text-value-null';
            this.isInputText = false;
        }
    }
    /**
     * @param {?} textField
     * @return {?}
     */
    getTextValue(textField) {
        /** @type {?} */
        const args = textField.split('.');
        /** @type {?} */
        const textArr = this.value.map((/**
         * @param {?} helpItem
         * @return {?}
         */
        helpItem => this.getPropValue(helpItem, cloneDeep(args))));
        return textArr && textArr.length ? textArr.join(',') : '';
    }
    /**
     * @param {?} helpItem
     * @param {?} args
     * @return {?}
     */
    getPropValue(helpItem, args) {
        if (args.length > 1) {
            /** @type {?} */
            const arg = args.shift();
            return helpItem[arg] ? this.getPropValue(helpItem[arg], args) : null;
        }
        return helpItem[args[0]];
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/single-date-value.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SingleDateValue {
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        this.dateValue = value.formatted;
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return this.dateValue;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.SingleDate;
    }
    /**
     * @param {?=} date
     */
    constructor(date = '') {
        this.dateValue = date;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.dateValue;
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.dateValue = undefined;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/single-number-value.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SingleNumberValue {
    /**
     * @return {?}
     */
    isEmpty() {
        return this.numValue == null;
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.numValue = undefined;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        throw new Error("Method not implemented.");
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return this.numValue;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.SingleNumber;
    }
    /**
     * @param {?=} data
     */
    constructor(data = null) {
        this.numValue = data == null ? null : parseFloat(data);
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/single-year-value.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SingleYearValue {
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        this.yearValue = value.formatted;
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return this.yearValue;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.SingleYear;
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.yearValue = undefined;
    }
    /**
     * @param {?=} year
     */
    constructor(year = '') {
        this.yearValue = year;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.yearValue;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/checkbox-value.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// CheckBoxValue初始化，与'app-solution-checkbox'组件初始化是分离的
// CheckBoxValue 要求value是布尔类型，组件要求value是true时，值应为true字符串
class CheckBoxValue {
    /**
     * @return {?}
     */
    clearValue() {
        this.value = [];
    }
    // 如果组件的返回值是字符串，转化为布尔值
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        if (value.length) {
            this.value = value.map((/**
             * @param {?} v
             * @return {?}
             */
            v => {
                if (typeof v == 'string') {
                    return true;
                }
                else {
                    return v;
                }
            }));
        }
        else {
            this.value = value;
        }
    }
    // 把CheckBoxValue的true布尔值，转化为组件可识别的字符串
    /**
     * @return {?}
     */
    getOriginalValue() {
        if (this.value.length) {
            return this.value.map((/**
             * @param {?} v
             * @return {?}
             */
            v => {
                if (v === true) {
                    return "true";
                }
                else {
                    return v;
                }
            }));
        }
        return this.value;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.BoolCheck;
    }
    // CheckBoxValue 初始化，传入的值未做任何修改
    /**
     * @param {?=} value
     */
    constructor(value = []) {
        this.value = value;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return this.value.length == 0;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/dropdownlistvalue.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DropDownListValue {
    //旧结构无，新结构为选中的value值，多选是以,分割的字符串
    /**
     * @param {?=} data
     */
    constructor(data = { value: [], key: undefined }) {
        this.value = []; //旧结构{Type: '', Content: {value: string, name: string}} 新结构Array[{value: string, name: string}]
        if (data.value && data.value.length > 0) { //已有初始值[]
            if (data.hasOwnProperty('key')) { //新结构
                this.value = data.value;
                this.key = data.key;
            }
            else { //旧结构
                this.value = data.value['Content'] && data.value['Content'].value ? [data.value['Content']] : [];
                this.key = data.value['Content'] && data.value['Content'].value ? data.value['Content'].value : undefined;
            }
        }
        else {
            this.clearValue();
        }
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.value = [];
        this.key = undefined;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    setOriginalValue(data) { }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return this.key;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.DropDownList;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.key;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/single-month-value.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SingleMonthValue {
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        this.monthValue = value.formatted;
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return this.monthValue;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.SingleMonth;
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.monthValue = undefined;
    }
    /**
     * @param {?=} month
     */
    constructor(month = '') {
        this.monthValue = month;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.monthValue;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/month-range-value.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MonthRangeValue {
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        if (value.formatted) {
            this.startTime = value.formatted.split(value.delimiter)[0];
            this.endTime = value.formatted.split(value.delimiter)[1];
        }
        else {
            this.clearValue();
        }
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        if (!this.startTime && !this.endTime) {
            return '';
        }
        return `${this.startTime}~${this.endTime}`;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.MonthRange;
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.startTime = undefined;
        this.endTime = undefined;
    }
    /**
     * @param {?=} value
     */
    constructor(value = { startTime: '', endTime: '' }) {
        this.startTime = value.startTime;
        this.endTime = value.endTime;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.startTime && !this.endTime;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/single-date-time-value.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SingleDateTimeValue {
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        this.datetimeValue = value.formatted;
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return this.datetimeValue;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.SingleDateTime;
    }
    /**
     * @param {?=} datetime
     */
    constructor(datetime = '') {
        this.datetimeValue = datetime;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.datetimeValue;
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.datetimeValue = undefined;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/combolookup-value.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ComboLookUpValue {
    /**
     * @return {?}
     */
    clearValue() {
        this.value = [];
        this.valueField = undefined;
        this.textValue = undefined;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        throw new Error("Method not implemented.");
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        /** @type {?} */
        const args = this.valueField.split('.');
        /** @type {?} */
        const valueArr = this.value.map((/**
         * @param {?} helpItem
         * @return {?}
         */
        helpItem => this.getPropValue(helpItem, cloneDeep(args))));
        return valueArr && valueArr.length ? valueArr.join(',') : '';
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.ComboLookUp;
    }
    /**
     * @param {?=} data
     */
    constructor(data = { value: [], valueField: undefined, textValue: undefined }) {
        if (data.textValue) { //新结构，value是数组
            this.valueField = data.valueField;
            this.value = data.value;
            this.textValue = data.textValue;
        }
        else { //旧结构，value是对象
            this.valueField = data.valueField ? data.valueField : '';
            this.value = (data.value && data.value.data) ? [data.value.data] : [];
            this.textValue = 'help-text-value-null'; //旧结构无textValue属性
        }
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.valueField;
    }
    /**
     * @param {?} helpItem
     * @param {?} args
     * @return {?}
     */
    getPropValue(helpItem, args) {
        if (args.length > 1) {
            /** @type {?} */
            const arg = args.shift();
            return helpItem[arg] ? this.getPropValue(helpItem[arg], args) : null;
        }
        return helpItem[args[0]];
    }
    /**
     * @param {?} textField
     * @return {?}
     */
    getTextValue(textField) {
        /** @type {?} */
        const args = textField.split('.');
        /** @type {?} */
        const textArr = this.value.map((/**
         * @param {?} helpItem
         * @return {?}
         */
        helpItem => this.getPropValue(helpItem, cloneDeep(args))));
        return textArr && textArr.length ? textArr.join(',') : '';
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/radio-value.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RadioValue {
    /**
     * @return {?}
     */
    clearValue() {
        this.value = undefined;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        this.value = value;
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return this.value;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.Radio;
    }
    /**
     * @param {?=} value
     */
    constructor(value = undefined) {
        this.value = value;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.value;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/inputgroupvalue.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class InputGroupValue {
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.InputGroup;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        throw new Error("Method not implemented.");
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        /** @type {?} */
        const args = this.textField ? this.textField.split('.') : [];
        /** @type {?} */
        const textArr = this.value.map((/**
         * @param {?} item
         * @return {?}
         */
        item => this.getPropValue(item, cloneDeep(args))));
        return textArr && textArr.length ? textArr.join(',') : '';
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.value = [];
        this.textValue = undefined;
        this.textField = undefined;
        this.isInputText = undefined;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.textValue;
    }
    /**
     * @param {?=} data
     */
    constructor(data = { value: [], textValue: undefined, textField: undefined, isInputText: undefined }) {
        this.value = data.value;
        // this.textValue = data.textValue ? data.textValue.trim() : '';
        this.textValue = data.textValue ? data.textValue : '';
        this.textField = data.textField;
        this.isInputText = data.isInputText;
    }
    /**
     * @param {?} targetField
     * @return {?}
     */
    getTextValue(targetField) {
        /** @type {?} */
        const args = targetField.split('.');
        /** @type {?} */
        const textArr = this.value.map((/**
         * @param {?} item
         * @return {?}
         */
        item => this.getPropValue(item, cloneDeep(args))));
        return textArr && textArr.length ? textArr.join(',') : '';
    }
    /**
     * @param {?} item
     * @param {?} args
     * @return {?}
     */
    getPropValue(item, args) {
        if (args.length > 1) {
            /** @type {?} */
            const arg = args.shift();
            return item[arg] ? this.getPropValue(item[arg], args) : '';
        }
        return item[args[0]];
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/ivalue.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ConditionValueConvert {
    /**
     * 序列化
     * 为了兼容C#产生的旧数据，向server传递的JSON object属性名全改为首字母大写
     * @param {?} obj
     * @return {?}
     */
    convertToObject(obj) {
        /** @type {?} */
        let conditionValue = (/** @type {?} */ (obj));
        /** @type {?} */
        let controlType = conditionValue.getControlType();
        /** @type {?} */
        let jobj = new Object();
        jobj["Type"] = controlType;
        if (controlType == ControlType.NumberRange) {
            /** @type {?} */
            let convertor = new NumberRangeValueConvertor();
            jobj["Content"] = convertor.convertToObject(conditionValue);
        }
        else {
            jobj["Content"] = conditionValue;
        }
        return jobj;
    }
    /**
     * @param {?} jobj
     * @return {?}
     */
    initFromObject(jobj) {
        /** @type {?} */
        let content = jobj["Content"];
        switch (jobj["Type"]) {
            case ControlType.Text:
                return new TextValue(jobj["Content"]);
            case ControlType.NumberRange:
                return new NumberRangeValue(jobj["Content"]);
            case ControlType.DateRange:
            case ControlType.DateTimeRange:
                return new DateRangeValue(jobj["Content"]);
            case ControlType.DropDownList:
                return new DropDownListValue(jobj["Content"]);
            case ControlType.SmartHelp:
                return new SmartHelpValue(jobj["Content"]);
            case ControlType.ComboLookUp:
                return new ComboLookUpValue(jobj["Content"]);
            case ControlType.SingleDate:
                return Object.assign(new SingleDateValue(), (/** @type {?} */ (content)));
            case ControlType.SingleNumber:
                return Object.assign(new SingleNumberValue(), (/** @type {?} */ (content)));
            case ControlType.SingleYear:
                return Object.assign(new SingleYearValue(), (/** @type {?} */ (content)));
            case ControlType.BoolCheck:
                return Object.assign(new CheckBoxValue(), (/** @type {?} */ (content)));
            case ControlType.Radio:
                return Object.assign(new RadioValue(), (/** @type {?} */ (content)));
            case ControlType.SingleMonth:
                return Object.assign(new SingleMonthValue(), (/** @type {?} */ (content)));
            case ControlType.MonthRange:
                return Object.assign(new MonthRangeValue(), (/** @type {?} */ (content)));
            case ControlType.SingleDateTime:
                return Object.assign(new SingleDateTimeValue(), (/** @type {?} */ (content)));
            case ControlType.InputGroup:
                return Object.assign(new InputGroupValue(), (/** @type {?} */ (content)));
        }
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/querycondition.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 查询条件实体类
 */
class QueryCondition {
    constructor() {
        this.visible = true;
    }
}
/**
 * 查询条件序列化与反序列化器
 */
class QueryConditionConvert {
    /**
     * 序列化
     * @param {?} obj 查询条件实体
     * 为了兼容C#产生的旧数据，向server传递的JSON object属性名全改为首字母大写
     * @return {?}
     */
    convertJObject(obj) {
        /** @type {?} */
        let queryCondition = (/** @type {?} */ (obj));
        /** @type {?} */
        let jobj = new Object();
        jobj["ID"] = queryCondition.id;
        jobj["FieldCode"] = queryCondition.fieldCode;
        jobj["FieldName"] = queryCondition.fieldName;
        // jobj["compareType"]=queryCondition.compareType;
        jobj["ValueType"] = queryCondition.valueType;
        jobj["placeHolder"] = queryCondition.placeHolder;
        // 无论是否区间都追加
        jobj["beginPlaceHolder"] = queryCondition.hasOwnProperty('beginPlaceHolder') ? queryCondition['beginPlaceHolder'] : '';
        jobj["endPlaceHolder"] = queryCondition.hasOwnProperty('endPlaceHolder') ? queryCondition['endPlaceHolder'] : '';
        jobj["visible"] = queryCondition.hasOwnProperty('visible') ? queryCondition['visible'] : true;
        jobj["conditionid"] = queryCondition.hasOwnProperty('conditionid') ? queryCondition['conditionid'] : undefined;
        jobj["compareType"] = queryCondition.hasOwnProperty('compareType') ? queryCondition['compareType'] : undefined;
        jobj["relation"] = queryCondition.hasOwnProperty('relation') ? queryCondition['relation'] : undefined;
        jobj["Lbracket"] = queryCondition.hasOwnProperty('Lbracket') ? queryCondition['Lbracket'] : undefined;
        jobj["Rbracket"] = queryCondition.hasOwnProperty('Rbracket') ? queryCondition['Rbracket'] : undefined;
        /** @type {?} */
        let valueConvert = new ConditionValueConvert();
        if (queryCondition.value) {
            jobj["Value"] = valueConvert.convertToObject(queryCondition.value);
        }
        /** @type {?} */
        let controlConvertor = new ControlConvert();
        if (queryCondition.control) {
            jobj["Control"] = controlConvertor.convertJObject(queryCondition.control);
        }
        return jobj;
    }
    /**
     * 反序列化
     * @param {?} jobj 查询条件实体序列化后的JSON对象
     * server端存储的是前端定义好格式的字符串，所以client接收时以约定好的格式反序列化
     * @return {?}
     */
    initFromJobject(jobj) {
        /** @type {?} */
        let queryCondition = new QueryCondition();
        queryCondition.id = jobj["ID"];
        queryCondition.fieldCode = jobj["FieldCode"];
        queryCondition.fieldName = jobj["FieldName"];
        // queryCondition.compareType=jobj["compareType"] as CompareType;
        queryCondition.valueType = (/** @type {?} */ ((jobj["ValueType"])));
        queryCondition.placeHolder = jobj["placeHolder"];
        queryCondition.beginPlaceHolder = jobj.hasOwnProperty('beginPlaceHolder') ? jobj['beginPlaceHolder'] : '';
        queryCondition.endPlaceHolder = jobj.hasOwnProperty('endPlaceHolder') ? jobj['endPlaceHolder'] : '';
        queryCondition.visible = jobj.hasOwnProperty('visible') ? jobj['visible'] : true;
        queryCondition.conditionid = jobj.hasOwnProperty('conditionid') ? jobj['conditionid'] : undefined;
        queryCondition.compareType = jobj.hasOwnProperty('compareType') ? jobj['compareType'] : undefined;
        queryCondition.relation = jobj.hasOwnProperty('relation') ? jobj['relation'] : undefined;
        queryCondition.Rbracket = jobj.hasOwnProperty('Rbracket') ? jobj['Rbracket'] : undefined;
        queryCondition.Lbracket = jobj.hasOwnProperty('Lbracket') ? jobj['Lbracket'] : undefined;
        /** @type {?} */
        const conditonValue = jobj["Value"];
        if (conditonValue) {
            /** @type {?} */
            let valueConvert = new ConditionValueConvert();
            queryCondition.value = valueConvert.initFromObject(conditonValue);
        }
        /** @type {?} */
        const conditionControl = jobj["Control"];
        if (conditionControl) {
            /** @type {?} */
            let controlConvertor = new ControlConvert();
            queryCondition.control = controlConvertor.initFromJobject(conditionControl);
        }
        return queryCondition;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/valuetype.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const ValueType = {
    /**
     *值类型
     */
    Value: 0,
    /**
     * 帮助类型
     */
    SmartHelp: 1,
    /**
     * 枚举类型
     */
    Enum: 2,
    /**
     * 表达式
     */
    Express: 3,
};
ValueType[ValueType.Value] = 'Value';
ValueType[ValueType.SmartHelp] = 'SmartHelp';
ValueType[ValueType.Enum] = 'Enum';
ValueType[ValueType.Express] = 'Express';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/solution.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SolutionService {
    /**
     * @param {?} notify
     */
    constructor(notify) {
        this.notify = notify;
        // 标记变更
        this.controlConfigState = new BehaviorSubject([]);
        this.controlTypeMap = new Map([
            [ControlType.Text, 'text'], [ControlType.BoolCheck, 'bool-check'], [ControlType.DateRange, 'date'],
            [ControlType.DateTimeRange, 'date-time'], [ControlType.NumberRange, 'number'], [ControlType.DropDownList, 'dropdown'],
            [ControlType.SmartHelp, 'help'], [ControlType.SingleDate, 'single-date'], [ControlType.SingleNumber, 'single-number'],
            [ControlType.SingleYear, 'single-year'], [ControlType.SingleMonth, 'single-month'], [ControlType.MonthRange, 'month'],
            [ControlType.SingleDateTime, 'single-date-time'], [ControlType.ComboLookUp, 'combolist-help'], [ControlType.Radio, 'radio'],
            [ControlType.InputGroup, 'input-group']
        ]);
    }
    /**
     * @return {?}
     */
    getControlConfigState() {
        return this.controlConfigState;
    }
    /**
     * 传递过来的是已经处理过的条件
     * @param {?} simpleCondition
     * @return {?}
     */
    updateControlConfigState(simpleCondition) {
        this.controlConfigState.next(simpleCondition);
    }
    /**
     * 只返回存在的属性
     * @param {?} fields
     * @return {?}
     */
    convertToSimpleQueryConditions(fields) {
        if (fields && fields.length == 0) {
            return [];
        }
        return fields.map((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            /** @type {?} */
            let simpleQueryCondition = {};
            simpleQueryCondition['fieldCode'] = field.labelCode;
            if (field.hasOwnProperty('visible')) {
                simpleQueryCondition['visible'] = field.visible;
            }
            simpleQueryCondition['control'] = this.getSimpleControl(field);
            return simpleQueryCondition;
        }));
    }
    /**
     * 只处理设置的属性
     * @private
     * @param {?} field
     * @return {?}
     */
    getSimpleControl(field) {
        /** @type {?} */
        const controlData = field.control;
        /** @type {?} */
        let simpleControl = {};
        /** @type {?} */
        let tControlType = this.controlTypeMap.get(controlData.controltype);
        switch (tControlType) {
            case 'single-year':
                this.updateSimpleControl(simpleControl, ['maxDate', 'minDate'], controlData);
                break;
            default:
                simpleControl = {};
        }
        return simpleControl;
    }
    /**
     * 只处理指定属性
     * @private
     * @param {?} resultObj 修改的对象  {test01:'',test01:''}
     * @param {?} sourceProps 待获取的属性列表 ['prop01','prop02']
     * @param {?} source 取值来源{prop01:'',prop02:''}
     * @param {?=} distProps 目标属性，对应的返回属性按照设置['dist01','']
     * @return {?}
     */
    updateSimpleControl(resultObj, sourceProps, source, distProps = []) {
        if (distProps.length == 0) {
            distProps = sourceProps;
        }
        for (let m = 0; m < sourceProps.length; m++) {
            if (!distProps[m]) {
                distProps[m] = sourceProps[m];
            }
        }
        for (let k = 0; k < sourceProps.length; k++) {
            if (source && source.hasOwnProperty(sourceProps[k])) {
                resultObj[distProps[k]] = source[sourceProps[k]];
            }
        }
    }
    /**
     * 将字段配置JSON描述信息转换为筛选条件
     * @param {?} fields 字段配置信息
     * @return {?} 筛选条件数组
     */
    convertToQueryConditions(fields) {
        /** @type {?} */
        let queryCondition;
        return fields.map((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            queryCondition = new QueryCondition();
            queryCondition.id = field.id;
            queryCondition.fieldCode = field.labelCode;
            // queryCondition.code = field.code; 无用属性
            queryCondition.fieldName = field.name;
            queryCondition.valueType = ValueType.Value;
            queryCondition.placeHolder = field.placeHolder;
            queryCondition.beginPlaceHolder = field.hasOwnProperty('beginPlaceHolder') ? field.beginPlaceHolder : '';
            queryCondition.endPlaceHolder = field.hasOwnProperty('endPlaceHolder') ? field.endPlaceHolder : '';
            let { control, value } = this.getControlAndValue(field);
            queryCondition.control = control;
            queryCondition.value = value;
            return queryCondition;
        }));
    }
    /**
     * 根据控件类型分别创建筛选条件的control对象和value对象
     * @param {?} field 字段配置信息
     * @return {?} 筛选条件的control对象和value对象
     */
    getControlAndValue(field) {
        /** @type {?} */
        const controlData = field.control;
        /** @type {?} */
        const valueData = field.value;
        /** @type {?} */
        let control;
        /** @type {?} */
        let value;
        switch (controlData.controltype) {
            case 'text':
                control = new TextControl();
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.require = controlData.require;
                //plain string
                value = new TextValue({ value: valueData });
                break;
            case 'input-group':
                control = new InputGroupControl();
                control.className = controlData.className;
                control.require = controlData.require;
                control.editable = controlData.editable;
                control.groupText = controlData.groupText;
                control.usageMode = controlData.usageMode;
                control.dialogOptions = this.setInputGroupDialog(field);
                control.click = controlData.click;
                value = new InputGroupValue(valueData);
                break;
            case 'date':
                control = new DateRangeControl();
                control.format = controlData.format;
                control.returnFormat = controlData.returnFormat;
                control.dateChangedCmd = controlData.valueChangedCmd ? controlData.valueChangedCmd : controlData.dateChangedCmd;
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.require = controlData.require;
                control.weekSelect = controlData.weekSelect;
                control.showWeekNumbers = controlData.showWeekNumbers;
                control.startFieldCode = controlData.startFieldCode || field.labelCode;
                control.endFieldCode = controlData.endFieldCode || field.labelCode;
                control.enableSplit = controlData.enableSplit || false;
                //control.beginPlaceHolder=controlData.beginPlaceHolder;
                //control.endPlaceHolder=controlData.endPlaceHolder;
                //{startTime: valueData.startTime, endTime: valueData.endTime}
                value = new DateRangeValue(valueData);
                break;
            case 'date-time':
                control = new DateTimeRangeControl();
                control.format = controlData.format;
                control.returnFormat = controlData.returnFormat;
                control.dateChangedCmd = controlData.valueChangedCmd ? controlData.valueChangedCmd : controlData.dateChangedCmd;
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.require = controlData.require;
                control.enableCustomFormat = controlData.enableCustomFormat;
                control.enableSplit = controlData.enableSplit || false;
                // control.beginPlaceHolder=controlData.beginPlaceHolder;
                //control.endPlaceHolder=controlData.endPlaceHolder;
                //control.weekSelect = controlData.weekSelect;
                //control.showWeekNumbers = controlData.showWeekNumbers;
                //{startTime: valueData.startTime, endTime: valueData.endTime}
                value = new DateRangeValue(valueData);
                break;
            case 'month':
                control = new MonthRangeControl();
                control.format = controlData.format;
                control.returnFormat = controlData.returnFormat;
                control.dateChangedCmd = controlData.valueChangedCmd ? controlData.valueChangedCmd : controlData.dateChangedCmd;
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.require = controlData.require;
                control.enableSplit = controlData.enableSplit || false;
                //control.beginPlaceHolder=controlData.beginPlaceHolder;
                //control.endPlaceHolder=controlData.endPlaceHolder;
                value = new MonthRangeValue(valueData);
                break;
            case 'number':
                control = new NumberRangeControl();
                control.className = controlData.className;
                control.placeholder = this.emptyString(controlData.placeholder);
                control.require = controlData.require;
                control.precision = controlData.precision;
                control.textAlign = controlData.textAlign;
                control.bigNumber = controlData.isBigNumber;
                control.min = controlData.minValue;
                control.max = controlData.maxValue;
                //control.beginPlaceHolder=controlData.beginPlaceHolder;
                //control.endPlaceHolder=controlData.endPlaceHolder;
                //{startValue: valueData.startValue, endValue: valueData.endValue}
                value = new NumberRangeValue(valueData);
                break;
            case 'dropdown':
                control = new DropDownListControl();
                control.valueType = controlData.valueType;
                control.enumValues = controlData.enumValues;
                control.uri = controlData.uri;
                control.beforeShow = controlData.beforeShow;
                control.beforeHide = controlData.beforeHide;
                control.idField = controlData.idField;
                control.textField = controlData.textField;
                control.multiSelect = controlData.multiSelect;
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.panelHeight = controlData.panelHeight;
                control.require = controlData.require;
                //{value: [enumValues], key: 以，号分割的字符串})
                value = new DropDownListValue(valueData);
                break;
            case 'help':
                control = new SmartHelpContol();
                control.uri = controlData.uri;
                control.textField = controlData.textField;
                control.valueField = controlData.valueField;
                control.displayType = controlData.displayType;
                control.idField = controlData.idField;
                control.mapFields = controlData.mapFields;
                control.preEventCmd = controlData.preEventCmd;
                control.postEventCmd = controlData.postEventCmd;
                control.context = controlData.context;
                control.className = controlData.className;
                control.enableFullTree = controlData.enableFullTree;
                control.loadTreeDataType = controlData.loadTreeDataType;
                control.singleSelect = controlData.singleSelect;
                control.expandLevel = controlData.expandLevel;
                control.enableCascade = controlData.enableCascade;
                control.cascadeStatus = controlData.cascadeStatus;
                control.placeholder = controlData.placeholder;
                control.require = controlData.require;
                control.nosearch = controlData.nosearch;
                control.displayFields = controlData.displayFields;
                control.displayTextSeparator = controlData.displayTextSeparator;
                control.editable = controlData.editable;
                control.clearFields = controlData.clearFields;
                control.clear = controlData.clear;
                control.dialogTitle = controlData.dialogTitle;
                control.panelHeight = controlData.panelHeight;
                control.panelWidth = controlData.panelWidth;
                control.enableMultiFieldSearch = controlData.enableMultiFieldSearch;
                if (controlData.hasOwnProperty('pageSize')) {
                    control.pageSize = controlData.pageSize;
                }
                if (controlData.hasOwnProperty('pageList')) {
                    control.pageList = controlData.pageList;
                }
                if (controlData.hasOwnProperty('quickSelect')) {
                    /** @type {?} */
                    let quickSelectControl = new QuickSelectOption();
                    quickSelectControl.enable = controlData.quickSelect['enable'];
                    quickSelectControl.showItemsCount = controlData.quickSelect['showItemsCount'];
                    quickSelectControl.formatter = controlData.quickSelect['formatter'];
                    quickSelectControl.showMore = controlData.quickSelect['showMore'];
                    control.quickSelect = quickSelectControl;
                }
                //{value: [{}], valueField: string, textValue: string}
                value = new SmartHelpValue(valueData);
                break;
            case 'combolist-help':
                control = new ComboLookUpControl();
                control.uri = controlData.uri;
                control.idField = controlData.idField;
                control.valueField = controlData.valueField;
                control.textField = controlData.textField;
                control.mapFields = controlData.mapFields;
                control.displayType = this.displayTypeTransform(controlData.displayType);
                control.singleSelect = controlData.singleSelect;
                control.preEventCmd = controlData.preEventCmd;
                control.postEventCmd = controlData.postEventCmd;
                control.enableFullTree = controlData.enableFullTree;
                control.loadTreeDataType = controlData.loadTreeDataType;
                control.expandLevel = controlData.expandLevel;
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.panelWidth = controlData.panelWidth;
                control.panelHeight = controlData.panelHeight;
                control.require = controlData.require;
                control.context = controlData.context;
                //{value: [{}], valueField: string, textValue: string}
                value = new ComboLookUpValue(valueData);
                break;
            case 'single-date':
                control = new SingleDateControl();
                control.format = controlData.format;
                control.returnFormat = controlData.returnFormat;
                control.dateChangedCmd = controlData.valueChangedCmd ? controlData.valueChangedCmd : controlData.dateChangedCmd;
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.require = controlData.require;
                control.isDynamicDate = controlData.isDynamicDate ? controlData.isDynamicDate : false;
                //plain string
                value = new SingleDateValue(valueData);
                break;
            case 'single-date-time':
                control = new SingleDateTimeControl();
                control.format = controlData.format;
                control.returnFormat = controlData.returnFormat;
                control.dateChangedCmd = controlData.valueChangedCmd ? controlData.valueChangedCmd : controlData.dateChangedCmd;
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.require = controlData.require;
                control.enableCustomFormat = controlData.enableCustomFormat;
                value = new SingleDateTimeValue(valueData);
                break;
            case 'single-number':
                control = new SingleNumberControl();
                control.className = controlData.className;
                control.placeholder = this.emptyString(controlData.placeholder);
                control.precision = controlData.precision;
                control.require = controlData.require;
                control.textAlign = controlData.textAlign;
                control.bigNumber = controlData.isBigNumber;
                control.min = controlData.minValue;
                control.max = controlData.maxValue;
                //{numValue: xxxx}
                value = new SingleNumberValue(valueData);
                break;
            case 'single-year':
                control = new SingleYearControl();
                control.format = controlData.format;
                control.returnFormat = controlData.returnFormat;
                control.dateChangedCmd = controlData.valueChangedCmd ? controlData.valueChangedCmd : controlData.dateChangedCmd;
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.require = controlData.require;
                control.maxDate = controlData.maxDate;
                control.minDate = controlData.minDate;
                //yearValue : plain string
                value = new SingleYearValue(valueData);
                break;
            case 'single-month':
                control = new SingleMonthControl();
                control.format = controlData.format;
                control.returnFormat = controlData.returnFormat;
                control.dateChangedCmd = controlData.valueChangedCmd ? controlData.valueChangedCmd : controlData.dateChangedCmd;
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.require = controlData.require;
                value = new SingleMonthValue(valueData);
                break;
            case 'bool-check':
                control = new CheckBoxControl();
                control.className = controlData.className;
                control.data = [{ value: "true", name: field.name }];
                control.horizontal = controlData.horizontal;
                control.disable = controlData.disable;
                control.isStringValue = false;
                control.require = controlData.require;
                //[true] or [false]
                value = new CheckBoxValue(valueData);
                break;
            case 'radio':
                control = new RadioControl();
                control.valueType = controlData.valueType;
                control.enumValues = controlData.enumValues;
                control.className = controlData.className;
                control.showLabel = controlData.showLabel;
                control.horizontal = controlData.horizontal;
                control.disabled = controlData.disabled;
                control.require = controlData.require;
                value = new RadioValue(valueData);
                break;
        }
        return { control, value };
    }
    /**
     * @return {?}
     */
    getGuid() {
        return (this.s4() + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + this.s4() + this.s4());
    }
    /**
     * @private
     * @return {?}
     */
    s4() {
        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    }
    /**
     * @param {?} message
     * @param {?} infoType
     * @param {?} title
     * @param {?} timeout
     * @return {?}
     */
    showInfo(message, infoType, title, timeout) {
        this.notify.config.position = 'top-center';
        if (infoType == 'success') {
            this.notify.success((/** @type {?} */ ({ title: title, msg: message, timeout: timeout })));
        }
        else if (infoType == 'info') {
            this.notify.info((/** @type {?} */ ({ title: title, msg: message, timeout: timeout })));
        }
        else if (infoType == 'warning') {
            this.notify.warning((/** @type {?} */ ({ title: title, msg: message, timeout: timeout })));
        }
        else if (infoType == 'error') {
            this.notify.error((/** @type {?} */ ({ title: title, msg: message, timeout: timeout })));
        }
    }
    /**
     * 根据字段获取Lable控件的Title
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        if (field.id && field.id !== '') {
            return field.fieldName;
        }
    }
    /**
     * 加载筛选方案时赋默认值
     * @param {?} solution 需要赋默认值的筛选方案
     * @param {?} fieldConfigs 默认值设置
     * @param {?} readonly 是否只读
     * @return {?} 已赋默认值的筛选方案
     */
    setValues(solution, fieldConfigs, readonly) {
        /** @type {?} */
        let qc;
        /** @type {?} */
        const conditions = solution.queryConditions ? solution.queryConditions : [];
        /** @type {?} */
        let controlType;
        fieldConfigs.forEach((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            qc = conditions.find((/**
             * @param {?} c
             * @return {?}
             */
            c => c.fieldCode == field.labelCode));
            //qc.control并不是controlData
            if (qc && qc.control && qc.value) {
                controlType = this.controlTypeMap.get(qc.control.getControlType());
                field.control = { controltype: controlType };
                const { control, value } = this.getControlAndValue(field);
                qc.value = this.isNumCheck(qc, value, field);
                qc.readonly = readonly;
            }
        }));
        return solution;
    }
    /**
     *
     * @param {?} conditions
     * @param {?} fieldConfigs 更新配置
     * @return {?} 已更新配置的筛选方案
     */
    updateControl(conditions, fieldConfigs) {
        /** @type {?} */
        let qc;
        conditions = conditions ? conditions : [];
        if (conditions.length > 0) {
            fieldConfigs.forEach((/**
             * @param {?} field
             * @return {?}
             */
            field => {
                qc = conditions.find((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.fieldCode == field['fieldCode']));
                if (qc && qc.hasOwnProperty('visible') && field.hasOwnProperty('visible') && field['visible'] !== qc.visible) {
                    qc.visible = field['visible'];
                }
                if (qc && qc.control) {
                    for (var prop in field.control) {
                        qc.control[prop] = field.control[prop];
                    }
                }
            }));
        }
        // let qc: QueryCondition;
        // const conditions = solution.queryConditions ? solution.queryConditions : [];
        // if (conditions.length > 0) {
        //   fieldConfigs.forEach(field => {
        //     qc = conditions.find(c => c.fieldCode == field.labelCode);
        //     if (qc && qc.control) {
        //       for (var prop in field.control) {
        //         qc.control[prop] = field.control[prop]
        //       }
        //     }
        //   });
        // }
    }
    /**
     * 必填控件非空判断
     * @param {?} conditions 进行筛选操作时当前所有的筛选条件
     * @return {?}
     */
    isValid(conditions) {
        /** @type {?} */
        const errorArr = conditions.map((/**
         * @param {?} qc
         * @return {?}
         */
        qc => {
            if (qc.control.isRequired() && qc.value.isEmpty() && qc.visible) {
                return {
                    type: 'require',
                    field: qc.fieldName
                };
            }
        }));
        return errorArr.filter((/**
         * @param {?} error
         * @return {?}
         */
        error => error != null));
    }
    /**
     * 解决数值控件placeholder显示为undefined的问题
     * @private
     * @param {?} data
     * @return {?}
     */
    emptyString(data) {
        if (data === null || data === undefined) {
            return '';
        }
        return data;
    }
    /**
     * 解决jit生成代码后下拉帮助控件的displayType属性与组件api不一致的问题
     * @private
     * @param {?} data 下拉帮助控件JSON描述中的displayType配置信息
     * @return {?}
     */
    displayTypeTransform(data) {
        if (data === 'List') {
            return 'LOOKUPLIST';
        }
        return 'LOOKUPTREELIST';
    }
    /**
     * 解决数值控件赋默认值功能与最大最小值限制功能的冲突问题
     * @private
     * @param {?} condition 当前正在赋默认值的筛选条件，若是数值类型，需要提取其control对象的max属性和min属性的值
     * @param {?} value 默认值配置value对象
     * @param {?} field 默认值配置
     * @return {?} 校验最大值和最小值之后的默认值配置value对象
     */
    isNumCheck(condition, value, field) {
        /** @type {?} */
        let minValue;
        /** @type {?} */
        let maxValue;
        if (field.control.controltype == 'single-number') {
            minValue = (condition.control.min == null || condition.control.min == undefined) ? -2147483648 : condition.control.min;
            maxValue = (condition.control.max == null || condition.control.max == undefined) ? 2147483647 : condition.control.max;
            value.numValue = ((value.numValue - minValue) > 0) ? value.numValue : minValue;
            value.numValue = ((value.numValue - maxValue) < 0) ? value.numValue : maxValue;
        }
        if (field.control.controltype == 'number') {
            minValue = (condition.control.min == null || condition.control.min == undefined) ? -2147483648 : condition.control.min;
            maxValue = (condition.control.max == null || condition.control.max == undefined) ? 2147483647 : condition.control.max;
            value.startValue = ((value.startValue - minValue) > 0) ? value.startValue : minValue;
            value.startValue = ((value.startValue - maxValue) < 0) ? value.startValue : maxValue;
            value.endValue = ((value.endValue - minValue) > 0) ? value.endValue : minValue;
            value.endValue = ((value.endValue - maxValue) < 0) ? value.endValue : maxValue;
        }
        return value;
    }
    /**
     * 智能输入框控件需要弹出表单时，将表单配置JSON描述转换为弹出表单命令可接收的弹窗参数
     * @private
     * @param {?} field 配置为智能输入框控件的字段的JSON描述
     * @return {?} 弹窗参数
     */
    setInputGroupDialog(field) {
        /** @type {?} */
        let inputGroupControlData = field.control;
        /** @type {?} */
        let modalConfigData = inputGroupControlData.modalConfig;
        if (!field.id || inputGroupControlData.usageMode == 'text') {
            return undefined;
        }
        /** @type {?} */
        let dialogConfig = new DialogConfig();
        dialogConfig.modalId = field.id;
        if (modalConfigData.mapFields) {
            dialogConfig.mapFields = JSON.parse(modalConfigData.mapFields.replace(/'/g, '"'));
        }
        dialogConfig.showHeader = modalConfigData.hasOwnProperty('showHeader') ? modalConfigData.showHeader : true;
        dialogConfig.showCloseButton = modalConfigData.hasOwnProperty('showCloseButton') ? modalConfigData.showCloseButton : true;
        dialogConfig.showMaxButton = modalConfigData.hasOwnProperty('showMaxButton') ? modalConfigData.showMaxButton : true;
        dialogConfig.title = modalConfigData.hasOwnProperty('title') ? modalConfigData.title : '';
        dialogConfig.width = modalConfigData.width;
        dialogConfig.height = modalConfigData.height;
        return dialogConfig;
    }
}
SolutionService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SolutionService.ctorParameters = () => [
    { type: NotifyService }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/fieldconfigdialog/configdialog.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ConfigDialogComponent {
    /**
     * @param {?} solutionService
     * @param {?} localeService
     * @param {?} notify
     */
    constructor(solutionService, localeService, notify) {
        this.solutionService = solutionService;
        this.localeService = localeService;
        this.notify = notify;
        this.inputSelectedFileds = [];
        this.cancelEmitter = new EventEmitter();
        this.confirmEmitter = new EventEmitter();
        this.selectedIds = [];
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.filedsDataSource && changes.filedsDataSource.currentValue) {
            this.visibleFields = this.filedsDataSource.filter((/**
             * @param {?} item
             * @return {?}
             */
            item => { return !!item.visible; }));
        }
        if (changes.inputSelectedFileds && changes.inputSelectedFileds.currentValue) {
            this.visibleSelectedFields = this.inputSelectedFileds.filter((/**
             * @param {?} item
             * @return {?}
             */
            item => { return !!item.visible; }));
            if (this.visibleSelectedFields.length) {
                this.selectedIds = this.visibleSelectedFields.map((/**
                 * @param {?} qc
                 * @return {?}
                 */
                qc => qc.id));
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.title = this.localeService.getValue('queryCondition.container.config');
        if (this.filedsDataSource) {
            this.visibleFields = this.filedsDataSource.filter((/**
             * @param {?} item
             * @return {?}
             */
            item => { return !!item.visible; }));
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.multiSelectCmp.enableMoveMore !== undefined) {
            this.multiSelectCmp.enableMoveMore = true;
        }
    }
    /**
     * 取消
     * @return {?}
     */
    cancel() {
        this.selectedIds = this.visibleSelectedFields.map((/**
         * @param {?} qc
         * @return {?}
         */
        qc => qc.id));
        //undo: 穿梭框组件的selectedId值为空数组时存在问题，通过组建的moveAllToLeft保证该功能
        if (!this.selectedIds.length) {
            this.multiSelectCmp.moveAllToLeft();
        }
        this.cancelEmitter.emit(true);
        this.multiSelectCmp.searchValue = '';
        this.dialog.close();
    }
    /**
     * 确认
     * @return {?}
     */
    confirm() {
        //必填字段必选选择，否则给与提示
        /** @type {?} */
        let requiredAndUncheck = this.visibleFields.filter((/**
         * @param {?} val
         * @return {?}
         */
        val => val.control && val.control.isRequired())).filter((/**
         * @param {?} item
         * @return {?}
         */
        item => !this.selectedIds.includes(item.id)));
        if (requiredAndUncheck && requiredAndUncheck.length) {
            /** @type {?} */
            let msg = requiredAndUncheck.map((/**
             * @param {?} val
             * @return {?}
             */
            val => val.fieldName)).join('、') + '为必选字段，请勾选后再进行保存操作。';
            this.notify.error(msg);
            return;
        }
        /** @type {?} */
        const selectedFields = [];
        /** @type {?} */
        let _fieldData;
        this.selectedIds.forEach((/**
         * @param {?} id
         * @return {?}
         */
        id => {
            /** @type {?} */
            const index = this.visibleSelectedFields.findIndex((/**
             * @param {?} field
             * @return {?}
             */
            field => field.id == id));
            if (index > -1) {
                selectedFields.push(this.visibleSelectedFields[index].fieldCode);
            }
            else {
                _fieldData = this.visibleFields.find((/**
                 * @param {?} field
                 * @return {?}
                 */
                field => field.id == id));
                _fieldData.value.clearValue();
                selectedFields.push(_fieldData.fieldCode);
            }
        }));
        this.confirmEmitter.emit(selectedFields);
        this.multiSelectCmp.searchValue = '';
        this.dialog.close();
    }
    /**
     * 重置
     * @return {?}
     */
    reset() {
    }
}
ConfigDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-queryconfigdialog',
                template: "<farris-dialog #dialog [buttons]=\"configDialogButtonRef\" [width]=\"699\" [height]=\"544\" [title]=\"title\">\r\n    <multi-select #searchMulti \r\n    [dataSource]=\"visibleFields\"\r\n     [idField]=\"'id'\" \r\n     [textField]=\"'fieldName'\" \r\n     [displayType]=\"'List'\" \r\n     [(selectedId)]=\"selectedIds\" \r\n     [showCheckbox]=\"true\">\r\n        <ng-template farrisTemplate=\"text\" let-data>\r\n            {{ data['fieldName'] }}\r\n        </ng-template>\r\n    </multi-select>\r\n</farris-dialog>\r\n<ng-template #configDialogButtonRef>\r\n    <button class=\"btn btn-primary\" (click)=\"confirm()\">{{'queryCondition.configDialog.confirm' | locale}}</button>\r\n    <button class=\"btn btn-secondary\" (click)=\"cancel()\">{{'queryCondition.configDialog.cancel' | locale}}</button>\r\n</ng-template>",
                encapsulation: ViewEncapsulation.None,
                styles: [""]
            }] }
];
/** @nocollapse */
ConfigDialogComponent.ctorParameters = () => [
    { type: SolutionService },
    { type: LocaleService },
    { type: NotifyService }
];
ConfigDialogComponent.propDecorators = {
    inputSelectedFileds: [{ type: Input }],
    filedsDataSource: [{ type: Input }],
    cancelEmitter: [{ type: Output }],
    confirmEmitter: [{ type: Output }],
    dialog: [{ type: ViewChild, args: ['dialog',] }],
    multiSelectCmp: [{ type: ViewChild, args: ['searchMulti',] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/querycondition.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class QueryConditionComponent {
    /**
     * @param {?} communicationService
     * @param {?} convertorService
     * @param {?} resolver
     * @param {?} injector
     * @param {?} modalService
     * @param {?} localeService
     */
    constructor(communicationService, convertorService, resolver, injector, modalService, localeService) {
        this.communicationService = communicationService;
        this.convertorService = convertorService;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.localeService = localeService;
        this._resetFieldConfigs = [];
        this.isControlInline = true;
        this.showCompleteLabel = false;
        this.fieldConditionsChange = new EventEmitter();
        //是否启用高级模式，默认为false
        this.openAdvanced = true;
        this.localeIds = {
            'en': 'en',
            'zh-CHS': 'zh-CHS'
        };
        this.controlType = ControlType;
        this.showButton = false;
        this.fieldCodeOfClearFields = [];
        this.canClearRelatedFields = false;
        this.destroy$ = new Subject();
        // 获取ngZone
        this.ngZone = null;
        this.currentLocale = this.injector.get(LOCALE_ID);
        this.solutionService = this.injector.get(SolutionService);
        this.idService = this.injector.get(IdService);
        if (!this.ngZone) {
            this.ngZone = this.injector.get(NgZone, null);
        }
    }
    /**
     * @return {?}
     */
    get selectSolution() {
        return this._selectSolution;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set selectSolution(value) {
        this._selectSolution = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set resetFieldConfigs(value) {
        if (value && value.length > 0) {
            this.solutionService.updateControlConfigState(value);
        }
        this._resetFieldConfigs = value;
    }
    /**
     * @return {?}
     */
    get resetFieldConfigs() {
        return this._resetFieldConfigs;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set selectedFieldConditions(value) {
        this._selectedFieldConditions = value;
    }
    /**
     * @return {?}
     */
    get selectedFieldConditions() {
        return this._selectedFieldConditions;
    }
    ;
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.currentLocale === this.localeIds['en']) {
            this.isControlInline = false;
        }
        this.selectedFieldConditions = this.selectedFieldConditions || new Array();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
    }
    /**
     * @param {?} currentItem
     * @return {?}
     */
    hasSetMultiClass(currentItem) {
        if (currentItem.control.className && currentItem.control.className.indexOf('farris-group-multi-label') > -1) {
            return true;
        }
        return false;
    }
    /* */
    /**
     * @param {?} currentItem
     * @return {?}
     */
    getStyle(currentItem) {
        /** @type {?} */
        const defaultCondtionStyle = 'col-12 col-md-6 col-xl-3 col-el-2';
        // 设置显示标签全并且显示了折行
        // if(this.showCompleteLabel && currentItem.control.className == 'farris-group-multi-label'){
        //     return defaultCondtionStyle.concat(" farris-group-multi-label");
        // }
        /** @type {?} */
        let className = currentItem.control.className;
        className = className ? className.replace('farris-group-multi-label', '') : '';
        return className ? className : defaultCondtionStyle;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    configDialogConfirm(event) {
        /** @type {?} */
        const configData = (/** @type {?} */ ((/** @type {?} */ (event))));
        /** @type {?} */
        const reConfigConditions = new Array();
        for (const data of configData) {
            /** @type {?} */
            const target = this.selectedFieldConditions.find((/**
             * @param {?} condition
             * @return {?}
             */
            condition => condition.fieldCode == data));
            if (target) {
                reConfigConditions.push(target);
            }
            else {
                reConfigConditions.push(this.fieldConfigs.find((/**
                 * @param {?} condition
                 * @return {?}
                 */
                condition => condition.fieldCode == data)));
            }
        }
        for (const condition of this.selectedFieldConditions) {
            if (!condition.visible) {
                reConfigConditions.push(condition);
            }
        }
        this.selectedFieldConditions = reConfigConditions;
        this.fieldConditionsChange.emit(this.selectedFieldConditions);
    }
    /**
     * @return {?}
     */
    openFieldConfigDialog() {
        this.configDialog.inputSelectedFileds = this.selectedFieldConditions ? this.selectedFieldConditions : [];
        this.configDialog.dialog.show();
    }
    /**
     * @param {?=} exceptRequired
     * @return {?}
     */
    resetSelectedConditionValues(exceptRequired = false) {
        return this.selectedFieldConditions.map((/**
         * @param {?} fieldCondition
         * @return {?}
         */
        fieldCondition => {
            if (exceptRequired) {
                if (!fieldCondition.control.isRequired()) {
                    fieldCondition.value.clearValue();
                }
            }
            else {
                fieldCondition.value.clearValue();
            }
            return fieldCondition;
        }));
    }
    /**
     * @return {?}
     */
    conditionChange() {
        this.fieldConditionsChange.emit(this.selectedFieldConditions);
        if (this.selectSolution && this.selectSolution.mode === '2') {
            this.selectSolution.queryConditions = this.selectedFieldConditions;
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    conditionChangeAdvanced(data) {
        this.selectedFieldConditions = data;
        this.fieldConditionsChange.emit(this.selectedFieldConditions);
        if (this.selectSolution && this.selectSolution.mode === '2') {
            this.selectSolution.queryConditions = this.selectedFieldConditions;
        }
    }
    // 弹出帮助控件面板前，更改canClearRelatedFields，避免赋默认值和帮助值变化清空两个特性的冲突
    /**
     * @param {?} e
     * @return {?}
     */
    clearFieldsChange(e) {
        if (e && e['controlType'] == ControlType.SmartHelp && e['canClearRelatedFields']) {
            this.canClearRelatedFields = true;
        }
    }
    /**
     * @param {?} conditions
     * @return {?}
     */
    confirmLabelFormat(conditions) {
        if (this.isControlInline) {
            this.labelFormat = 'farris-form-controls-inline';
            /** @type {?} */
            let hasCustom = false;
            if (conditions.length) {
                // 复选框label标签目前在框的右侧，超出宽度后下方出现滚动条，计算标签最大长度时需将其排除
                /** @type {?} */
                let noCheckBoxConditions = [];
                conditions.forEach((/**
                 * @param {?} condition
                 * @return {?}
                 */
                condition => {
                    if (condition.control.getControlType() != ControlType.BoolCheck) {
                        noCheckBoxConditions.push(condition);
                    }
                    if (condition.control['className'] && condition.control['className'] != 'farris-group-multi-label') {
                        hasCustom = true;
                    }
                }));
                this.labelFormat += hasCustom ? ' condition-is-custom' : ' condition-with-fixed';
                /** @type {?} */
                let maxLength = 0;
                if (noCheckBoxConditions.length) {
                    noCheckBoxConditions.forEach((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => {
                        maxLength = (item.fieldName.length > maxLength) ? (item.fieldName.length) : maxLength;
                    }));
                }
                //需要完整显示控件标签时，根据标签最大长度确定标签栏每行可显示的字符数
                if (this.showCompleteLabel) {
                    if (maxLength > 8) {
                        //标签超出8个字符后，设置每行最多可显示10个字符
                        this.labelFormat = this.labelFormat.concat(" f-form-label-xl");
                    }
                    else if ((maxLength < 9) && (maxLength > 6)) {
                        //标签超出6个字符、不超过8个字符时，设置每行最多可显示8个字符
                        this.labelFormat = this.labelFormat.concat(" f-form-label-lg");
                    }
                }
            }
        }
        if (this.labelFormat) {
            return this.labelFormat + (this.isControlInline && this.showCompleteLabel ? ' condition-with-complete' : '');
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    buildSmartHelpKey(value) {
        /** @type {?} */
        let prefix = '';
        if (location.hash) {
            /** @type {?} */
            const pathArr = location.hash.split('?');
            prefix = pathArr ? pathArr[0] : '';
        }
        else {
            /** @type {?} */
            const pathArr = location.pathname.split('/');
            prefix = pathArr ? pathArr[pathArr.length - 1] : '';
        }
        return this.idService.encrypt(prefix + '/querysolution/' + value);
    }
}
QueryConditionComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-querycondition',
                template: "<div  *ngIf=\"!selectSolution || selectSolution.mode !== '2'\" class=\"row f-utils-flex-row-wrap farris-form {{confirmLabelFormat(selectedFieldConditions)}} condition-div\"  id=\"querycondition\" #queryConditionWrap>\r\n    <ng-container *ngFor=\"let currentItem of selectedFieldConditions;let i=index;\">\r\n        <app-solution-input  \r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.Text && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\">\r\n        </app-solution-input>\r\n\r\n        <app-solution-inputgroup\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.InputGroup && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\">\r\n        </app-solution-inputgroup>\r\n        \r\n        <app-solution-dropdownlist\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.DropDownList && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\">\r\n        </app-solution-dropdownlist>\r\n        \r\n        <app-solution-smarthelp\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            (clearFieldsChange)=\"clearFieldsChange($event)\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.SmartHelp && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\"\r\n            [instanceId]=\"buildSmartHelpKey(selectedFieldConditions[i].fieldCode)\">\r\n        </app-solution-smarthelp>\r\n        \r\n        <app-solution-single-number\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.SingleNumber && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\">\r\n        </app-solution-single-number>\r\n\r\n        <app-solution-numberrange\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.NumberRange && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\">\r\n        </app-solution-numberrange>\r\n        \r\n        <app-solution-datepicker\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.SingleDate && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\"\r\n            [controlType]=\"currentItem.control.getControlType()\">\r\n        </app-solution-datepicker>\r\n        \r\n        <app-solution-datepicker\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.DateRange && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\"\r\n            [controlType]=\"currentItem.control.getControlType()\">\r\n        </app-solution-datepicker>\r\n\r\n        <app-solution-datepicker\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.SingleYear && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\"\r\n            [controlType]=\"currentItem.control.getControlType()\">\r\n        </app-solution-datepicker>\r\n        \r\n        <app-solution-datepicker\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.SingleMonth && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\"\r\n            [controlType]=\"currentItem.control.getControlType()\">\r\n        </app-solution-datepicker>\r\n        \r\n        <app-solution-datepicker\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.MonthRange && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\"\r\n            [controlType]=\"currentItem.control.getControlType()\">\r\n        </app-solution-datepicker>\r\n        \r\n        <app-solution-datepicker\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.SingleDateTime && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\"\r\n            [controlType]=\"currentItem.control.getControlType()\">\r\n        </app-solution-datepicker>\r\n        \r\n        <app-solution-datepicker\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.DateTimeRange && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\"\r\n            [controlType]=\"currentItem.control.getControlType()\">\r\n        </app-solution-datepicker>\r\n\r\n        <app-solution-combolookup\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.ComboLookUp && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\">\r\n        </app-solution-combolookup>\r\n\r\n        <app-solution-checkbox\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.BoolCheck && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\">\r\n        </app-solution-checkbox>\r\n\r\n        <app-solution-radio\r\n            [ngClass]=\"getStyle(currentItem)\"\r\n            [label-text-multi]=\"hasSetMultiClass(currentItem)\"\r\n            [changeFields]=\"fieldCodeOfClearFields\"\r\n            (conditionChange)=\"conditionChange()\"\r\n            *ngIf=\"currentItem.control.getControlType() == controlType.Radio && currentItem.visible\"\r\n            [(item)]=\"selectedFieldConditions[i]\">\r\n        </app-solution-radio>\r\n    </ng-container>\r\n</div>\r\n\r\n<div *ngIf=\"selectSolution && selectSolution.mode === '2'\">\r\n    <querycondition-advanced\r\n    [fieldConfig]=\"unformatFieldConfigs\" \r\n    [selectSolution]=\"selectSolution\"\r\n    (conditionChange)=\"conditionChangeAdvanced($event)\"></querycondition-advanced>\r\n</div>\r\n<app-queryconfigdialog \r\n    #configDialog \r\n    [inputSelectedFileds]=\"selectedFieldConditions\" \r\n    [filedsDataSource]=\"fieldConfigs\"\r\n    (confirmEmitter)=\"configDialogConfirm($event)\">\r\n</app-queryconfigdialog>",
                encapsulation: ViewEncapsulation.None,
                providers: [CommunicationService],
                styles: [".condition-div{min-height:30px}.f-solution-radio-group .farris-checkradio-hor{flex-wrap:nowrap;overflow-x:auto}.f-solution-radio-group .farris-checkradio-hor::-webkit-scrollbar{width:6px;height:6px;background-color:#eee}.f-solution-radio-group .farris-checkradio-hor::-webkit-scrollbar-track{border-radius:0}.f-solution-radio-group .farris-checkradio-hor::-webkit-scrollbar-thumb{background-color:rgba(0,0,0,.15);-webkit-transition:.2s;transition:.2s;border-radius:6px}.f-solution-radio-group .farris-checkradio-hor::-webkit-scrollbar-thumb:hover{background-color:rgba(0,0,0,.45)}.f-solution-radio-group .farris-checkradio-hor .custom-radio{flex-shrink:0}.split-date-range{width:100%;display:-webkit-box;display:flex}"]
            }] }
];
/** @nocollapse */
QueryConditionComponent.ctorParameters = () => [
    { type: CommunicationService },
    { type: ConvertorService },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: BsModalService },
    { type: LocaleService }
];
QueryConditionComponent.propDecorators = {
    selectSolution: [{ type: Input }],
    fieldConfigs: [{ type: Input }],
    unformatFieldConfigs: [{ type: Input }],
    resetFieldConfigs: [{ type: Input }],
    isControlInline: [{ type: Input }],
    selectedFieldConditions: [{ type: Input }],
    showCompleteLabel: [{ type: Input }],
    isDisabled: [{ type: Input }],
    fieldConditionsChange: [{ type: Output }],
    configDialog: [{ type: ViewChild, args: ['configDialog',] }],
    openAdvanced: [{ type: Input }],
    queryConditionWrapEl: [{ type: ViewChild, args: ["queryConditionWrap",] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controlcomponent/numberrangecomponent/numberrange.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NumberRangeComponent {
    /**
     * @param {?} solutionService
     */
    constructor(solutionService) {
        this.solutionService = solutionService;
        /**
         * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
         */
        this.changeFields = [];
        this.conditionChange = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
            /** @type {?} */
            const isChange = changes['changeFields'].currentValue.some((/**
             * @param {?} field
             * @return {?}
             */
            field => field == this.item.fieldCode));
            if (isChange) {
                this.constructMultiFieldNumberRange((/** @type {?} */ (this.item.value)));
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.testId = this.solutionService.getGuid();
        this.canNull = true;
        this.placeholder = (this.item.placeHolder) ? (this.item.placeHolder) : (this.item.control.placeholder);
        this.beginPlaceHolder = this.item.beginPlaceHolder ? this.item.beginPlaceHolder : this.placeholder;
        this.endPlaceHolder = this.item.endPlaceHolder ? this.item.endPlaceHolder : this.placeholder;
        this.precision = this.item.control.precision;
        this.textAlign = this.item.control.textAlign;
        this.bigNumber = this.item.control.bigNumber ? this.item.control.bigNumber : false;
        if (!this.bigNumber) {
            this.min = (this.item.control.min === undefined || this.item.control.min === null) ? -2147483648 : (this.item.control.min);
            this.max = (this.item.control.max === undefined || this.item.control.max === null) ? 2147483647 : (this.item.control.max);
        }
        this.constructMultiFieldNumberRange((/** @type {?} */ (this.item.value)));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    valueChange(data) {
        if (typeof data !== 'string') {
            return;
        }
        /** @type {?} */
        const dataArray = data.split("~");
        /** @type {?} */
        const start = dataArray[0] && dataArray[0].length > 0 ? dataArray[0] : null;
        /** @type {?} */
        const end = dataArray[1] && dataArray[1].length > 0 ? dataArray[1] : null;
        if (!this.bigNumber) {
            this.item.value = new NumberRangeValue({ startValue: start, endValue: end });
        }
        else {
            /** @type {?} */
            const numberRangeValue = new NumberRangeValue();
            isNaN(parseFloat(start)) ? numberRangeValue.startValue = null : numberRangeValue.startValue = parseFloat(start);
            isNaN(parseFloat(end)) ? numberRangeValue.endValue = null : numberRangeValue.endValue = parseFloat(end);
            this.item.value = numberRangeValue;
        }
        this.conditionChange.emit();
    }
    // constructNumberRange(value: NumberRangeValue): string {
    //   return "a~b".replace(/a/, value.startValue ? value.startValue.toString().trim() : "").replace(/b/, value.endValue ? value.endValue.toString().trim() : "");
    // }
    /**
     * @param {?} value
     * @return {?}
     */
    constructMultiFieldNumberRange(value) {
        // this.beginValue = value && value.startValue ? value.startValue.toString().trim() : '';
        // this.endValue = value && value.endValue ? value.endValue.toString().trim() : '';
        this.beginValue = value.startValue == null ? null : value.startValue;
        this.endValue = value.endValue == null ? null : value.endValue;
    }
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    beginValueChange($event) {
        this.beginValue = $event;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    endValueChange($event) {
        this.endValue = $event;
    }
}
NumberRangeComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-solution-numberrange',
                template: "<div class=\"farris-group-wrap\" id=\"{{item.id}}\">\r\n  <div class=\"form-group farris-form-group  common-group number-range-group\" [ngClass]=\"{'q-state-readonly':item.readonly}\">\r\n    <label class=\"col-form-label\" *ngIf=\"item\" title=\"{{getConditionItemTitle(item)}}\">\r\n      <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.isRequired()\">*</span>\r\n      <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n    </label>\r\n    <div class=\"farris-input-wrap\">\r\n      <farris-number-range *ngIf=\"!bigNumber\"\r\n        [beginValue]=\"beginValue\"\r\n        [endValue]=\"endValue\"\r\n        [min]=\"min\"\r\n        [max]=\"max\"\r\n        (beginValueChange)=\"beginValueChange($event)\"\r\n        (endValueChange)=\"endValueChange($event)\"\r\n        (valueChange)=\"valueChange($event)\" \r\n        id=\"{{testId}}\"\r\n        [canNull]=\"canNull\"\r\n        [bigNumber]=\"bigNumber\"\r\n        [placeholder]=\"placeholder\"\r\n        [precision]=\"precision\"\r\n        [textAlign]=\"textAlign\"\r\n        [readonly]=\"item.readonly\"\r\n        [beginPlaceHolder]=\"beginPlaceHolder\"\r\n        [endPlaceHolder]=\"endPlaceHolder\">\r\n      </farris-number-range>\r\n      <farris-number-range *ngIf=\"bigNumber\"\r\n        [beginValue]=\"beginValue\"\r\n        [endValue]=\"endValue\"\r\n        (beginValueChange)=\"beginValueChange($event)\"\r\n        (endValueChange)=\"endValueChange($event)\"\r\n        (valueChange)=\"valueChange($event)\" \r\n        id=\"{{testId}}\"\r\n        [canNull]=\"canNull\"\r\n        [bigNumber]=\"bigNumber\"\r\n        [placeholder]=\"placeholder\"\r\n        [precision]=\"precision\"\r\n        [textAlign]=\"textAlign\"\r\n        [readonly]=\"item.readonly\"        \r\n        [beginPlaceHolder]=\"beginPlaceHolder\"\r\n        [endPlaceHolder]=\"endPlaceHolder\">\r\n      </farris-number-range>\r\n    </div>\r\n  </div>\r\n</div>"
            }] }
];
/** @nocollapse */
NumberRangeComponent.ctorParameters = () => [
    { type: SolutionService }
];
NumberRangeComponent.propDecorators = {
    item: [{ type: Input }],
    changeFields: [{ type: Input }],
    conditionChange: [{ type: Output, args: ['conditionChange',] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controlcomponent/input/input.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class InputComponent {
    /**
     * @param {?} solutionService
     */
    constructor(solutionService) {
        this.solutionService = solutionService;
        this.hideLabel = false;
        this.maxLength = undefined;
        this.hasError = false;
        this.conditionChange = new EventEmitter();
    }
    /**
     * @param {?} textItem
     * @return {?}
     */
    set item(textItem) {
        this._inputItem = textItem;
    }
    /**
     * @return {?}
     */
    get item() {
        return this.constructTextItem(this._inputItem);
    }
    /**
     * @param {?} textItem
     * @return {?}
     */
    constructTextItem(textItem) {
        /** @type {?} */
        const textValueObj = (/** @type {?} */ (textItem.value));
        // textValueObj.value = textValueObj.value && textValueObj.value.trim();
        textValueObj.value = textValueObj.value && textValueObj.value;
        textItem.value = textValueObj;
        return textItem;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.testId = this.solutionService.getGuid();
        this.placeholder = (this.item.placeHolder) ? (this.item.placeHolder) : (this.item.control.placeholder);
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
    /**
     * @return {?}
     */
    onBlur() {
        if (this.hasError) {
            return;
        }
        this.conditionChange.emit();
    }
    /**
     * 是否有错误信息
     * @param {?} textControl
     * @return {?}
     */
    hasErrorInfo(textControl) {
        if (textControl.invalid && (textControl.dirty || textControl.touched) && textControl.errors.maxlength) {
            this.hasError = true;
            return true;
        }
        this.hasError = false;
        return false;
    }
}
InputComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-solution-input',
                template: "<div class=\"farris-group-wrap\" id=\"{{item.id}}\">\r\n    <div class=\"form-group farris-form-group  common-group\" [ngClass]=\"{'q-state-readonly':item.readonly}\">\r\n        <label class=\"col-form-label\" *ngIf=\"item && !hideLabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n            <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.isRequired()\">*</span>\r\n            <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n            <input-group [(ngModel)]=\"item.value.value\" name=\"{{item.fieldName}}\" id=\"{{testId}}\"\r\n                (blurHandle)=\"onBlur()\" [placeholder]=\"placeholder\" [readonly]=\"item.readonly\" maxlength=\"maxLength\"\r\n                #textControl=\"ngModel\" (clear)=\"onBlur()\">\r\n            </input-group>\r\n            <ng-container *ngIf=\"maxLength\">\r\n                <div class=\"farris-feedback\" [class.f-state-invalid]=\"hasErrorInfo(textControl)\">\r\n                    <span class=\"f-feedback-message\">\u8BF7\u8F93\u5165\u6709\u6548\u683C\u5F0F</span>\r\n                </div>\r\n            </ng-container>\r\n        </div>\r\n    </div>\r\n</div>"
            }] }
];
/** @nocollapse */
InputComponent.ctorParameters = () => [
    { type: SolutionService }
];
InputComponent.propDecorators = {
    hideLabel: [{ type: Input }],
    item: [{ type: Input }],
    conditionChange: [{ type: Output, args: ['conditionChange',] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controlcomponent/inputgroup/inputgroup.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class InputGroupComponent {
    /**
     * @param {?} solutionService
     */
    constructor(solutionService) {
        this.solutionService = solutionService;
        this.hideLabel = false;
        this.conditionChange = new EventEmitter();
        //控件内显示文本是否为弹窗返回的文本，手动输入或者手动做出修改时为false
        this.isTextFromDialog = false;
    }
    /**
     * @param {?} inputGroupItem
     * @return {?}
     */
    set item(inputGroupItem) {
        this._inputItem = inputGroupItem;
    }
    /**
     * @return {?}
     */
    get item() {
        return this.constructInputGroupItem(this._inputItem);
    }
    /**
     * @param {?} inputGroupItem
     * @return {?}
     */
    constructInputGroupItem(inputGroupItem) {
        /** @type {?} */
        const inputGroupValueObj = (/** @type {?} */ (inputGroupItem.value));
        // inputGroupValueObj.textValue = inputGroupValueObj.textValue && inputGroupValueObj.textValue.trim();
        inputGroupValueObj.textValue = inputGroupValueObj.textValue && inputGroupValueObj.textValue;
        inputGroupItem.value = inputGroupValueObj;
        return inputGroupItem;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.testId = this.solutionService.getGuid();
        this.getInputGroupBindingInfo();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.item = null;
    }
    /**
     * @return {?}
     */
    getInputGroupBindingInfo() {
        /** @type {?} */
        const inputGroupControl = ((/** @type {?} */ (this.item.control)));
        this.usageMode = inputGroupControl.usageMode;
        if (this.usageMode == 'open-modal' || this.usageMode == 'open-remote-modal') {
            this.dialogOptions = inputGroupControl.dialogOptions;
            /*
                example of dialogOptions = {
                   modalId: "1e011720-eb0f-4c9c-82b6-6844c89b2303"
                   mapFields: {hDepartment: "Name"}
                   title: "测试标题栏"
                   width: 800
                   height: 600
                }
             */
            if (this.dialogOptions.mapFields) {
                this.textField = JSON.stringify(this.dialogOptions.mapFields).split('"')[1];
            }
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        if (this.usageMode == 'text') {
            this.item.control.click();
        }
        else {
            /** @type {?} */
            const options = this.dialogOptions;
            options.handle = (/**
             * @param {?} selectedItem
             * @return {?}
             */
            (selectedItem) => {
                if (selectedItem && this.textField) {
                    this.item.value.value = selectedItem;
                    this.item.value.textValue = this.item.value.getTextValue(this.textField);
                    this.item.value.textField = this.textField;
                    this.item.value.isInputText = false;
                    this.isTextFromDialog = true;
                    this.textFormDialog = this.item.value.textValue;
                    this.onBlur();
                }
            });
            this.item.control.click({ event, options });
        }
    }
    /**
     * @return {?}
     */
    onBlur() {
        if (this.usageMode == 'text') {
            this.item.value.isInputText = true;
        }
        if (this.usageMode == 'open-modal' || this.usageMode == 'open-remote-modal') {
            if (!this.isTextFromDialog) {
                //console.log('弹窗模式下控件内文本是手动输入的');
                this.item.value.isInputText = true;
            }
            if (this.item.value.textValue != this.textFormDialog) {
                //console.log('通过弹窗选择的值已被手动修改');
                this.isTextFromDialog = false;
                this.item.value.value = [];
                this.item.value.textField = undefined;
                this.item.value.isInputText = true;
            }
        }
        this.conditionChange.emit();
    }
    /**
     * @return {?}
     */
    clearData() {
        ((/** @type {?} */ (this.item.value))).clearValue();
        this.conditionChange.emit();
    }
}
InputGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-solution-inputgroup',
                template: "<div class=\"farris-group-wrap\" id=\"{{item.id}}\">\r\n    <div class=\"form-group farris-form-group  common-group\"  [ngClass]=\"{'q-state-readonly':item.readonly}\">\r\n        <label class=\"col-form-label\" *ngIf=\"item && !hideLabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n            <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.isRequired()\">*</span>\r\n            <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n            <input-group \r\n                [(ngModel)]=\"item.value.textValue\" \r\n                name=\"{{item.fieldName}}\" \r\n                id=\"{{testId}}\"\r\n                [groupText]=\"item.control.groupText\"\r\n                [editable]=\"item.control.editable\"\r\n                [placeholder]=\"item.placeHolder\"\r\n                [readonly]=\"item.readonly\"\r\n                (clickHandle)=\"onClick($event)\"\r\n                (blurHandle)=\"onBlur()\"\r\n                (clear)=\"clearData()\">\r\n            </input-group>\r\n        </div>\r\n    </div>\r\n</div>"
            }] }
];
/** @nocollapse */
InputGroupComponent.ctorParameters = () => [
    { type: SolutionService }
];
InputGroupComponent.propDecorators = {
    hideLabel: [{ type: Input }],
    item: [{ type: Input }],
    conditionChange: [{ type: Output, args: ['conditionChange',] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controlcomponent/smarthelp/smarthelp.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SolutionSmartHelpComponent {
    /**
     * @param {?} solutionService
     */
    constructor(solutionService) {
        this.solutionService = solutionService;
        this.hideLabel = false;
        /**
         * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
         */
        this.changeFields = [];
        this.conditionChange = new EventEmitter();
        this.mappingEmitter = new EventEmitter();
        this.clearFieldsChange = new EventEmitter();
        /**
         * 每页记录数
         */
        this.pageSize = 20;
        /**
         * 可用分页记录数列表
         */
        this.pageList = [10, 20, 30, 50, 100];
        // 启用多字段查询
        this.enableMultiFieldSearch = false;
        this.onBeforeOpen = (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const t = (/** @type {?} */ (this.item.value));
            if (t && t.value) {
                /** @type {?} */
                const ids = t.value.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n[this.idField || 'id'])).join(',');
                this.lookup.displayValue = ids;
            }
            this.clearFieldsChange.emit({
                controlType: ((/** @type {?} */ (this.item.control))).getControlType(),
                canClearRelatedFields: true
            });
            return of(true);
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getSmartHelpBindingInfo();
        //this.testId = this.solutionService.getGuid();
        this.testId = this.instanceId;
        this.placeholder = (this.item.placeHolder) ? (this.item.placeHolder) : (this.item.control.placeholder);
        this.lookup.textChanged.subscribe((/**
         * @param {?} v
         * @return {?}
         */
        (v) => {
            this.textChangedHandler(v);
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.getSmartHelpBindingInfo();
        if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
            /** @type {?} */
            const isChange = changes['changeFields'].currentValue.some((/**
             * @param {?} field
             * @return {?}
             */
            field => field == this.item.fieldCode));
            if (isChange) {
                this.textValue = ((/** @type {?} */ (this.item.value))).textValue;
            }
        }
    }
    //ITEM：
    //control: SmartHelpContol {uri: "WuLiao.wOrgId", textField: "name", valueField: "code", mapFields: {}, idField: "id"}
    // fieldCode: "wOrgId"
    // fieldName: "所属机构"
    // id: "WuLiao.wOrgId"
    // value: SmartHelpValue {valueField: null, value: null}
    // valueType: 0
    /**
     * @return {?}
     */
    getSmartHelpBindingInfo() {
        /** @type {?} */
        const smartHelpControl = ((/** @type {?} */ (this.item.control)));
        this.uri = smartHelpControl.uri;
        this.textField = smartHelpControl.textField;
        this.idField = smartHelpControl.idField;
        this.valueField = smartHelpControl.valueField;
        this.displayType = smartHelpControl.displayType;
        this.mapFields = smartHelpControl.mapFields;
        this.context = smartHelpControl.context;
        this.preEventCmd = smartHelpControl.preEventCmd;
        this.postEventCmd = smartHelpControl.postEventCmd;
        this.enableFullTree = smartHelpControl.enableFullTree;
        this.loadTreeDataType = smartHelpControl.loadTreeDataType;
        this.singleSelect = smartHelpControl.singleSelect === false ? false : true;
        this.expandLevel = smartHelpControl.expandLevel;
        this.enableCascade = smartHelpControl.enableCascade;
        this.cascadeStatus = smartHelpControl.cascadeStatus ? smartHelpControl.cascadeStatus : 'enable';
        // 标题
        this.dialogTitle = smartHelpControl.dialogTitle ? smartHelpControl.dialogTitle : '';
        // 宽度
        this.dialogWidth = smartHelpControl.panelWidth;
        // 高度
        this.dialogHeight = smartHelpControl.panelHeight;
        /** @type {?} */
        const smartHelpValue = ((/** @type {?} */ (this.item.value)));
        if (smartHelpValue.textValue == 'help-text-value-null') { //旧数据兼容
            this.textValue = smartHelpValue.getTextValue(this.textField);
        }
        else {
            this.textValue = smartHelpValue.textValue;
        }
        this.nosearch = smartHelpControl.nosearch; //默认false
        this.displayFields = smartHelpControl.displayFields ? smartHelpControl.displayFields : '';
        this.displayTextSeparator = smartHelpControl.displayTextSeparator ? smartHelpControl.displayTextSeparator : '_';
        this.editable = smartHelpControl.editable;
        this.clearFields = smartHelpControl.clearFields;
        if (smartHelpControl.hasOwnProperty('pageSize') && smartHelpControl.pageSize) {
            this.pageSize = smartHelpControl.pageSize;
        }
        if (smartHelpControl.hasOwnProperty('pageList') && smartHelpControl.pageList) {
            this.pageList = smartHelpControl.pageList.split(",").map((/**
             * @param {?} item
             * @return {?}
             */
            item => { return parseInt(item); }));
        }
        if (smartHelpControl.hasOwnProperty('quickSelect') && smartHelpControl.quickSelect) {
            this.quickSelect = smartHelpControl.quickSelect;
        }
        if (smartHelpControl.hasOwnProperty('enableMultiFieldSearch') && smartHelpControl.enableMultiFieldSearch) {
            this.enableMultiFieldSearch = smartHelpControl.enableMultiFieldSearch;
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    clearData(data) {
        ((/** @type {?} */ (this.item.value))).clearValue();
        if (this.item.control.clear) {
            this.item.control.clear();
        }
        this.conditionChange.emit();
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
    /**
     * selectedItem
     * code: "code02"
     * id: "id02"
     * name: "机构02"
     * version: "2019-10-21T00:00:00"
     * @param {?} data
     * @return {?}
     */
    textChangedHandler(data) {
        if (this.item && this.item.value) {
            /** @type {?} */
            const helpValue = ((/** @type {?} */ (this.item.value)));
            helpValue.value = [data];
            helpValue.textValue = data;
            helpValue.isInputText = true;
            // this.textValue = helpValue.textValue;
            this.conditionChange.emit();
        }
    }
    /**
     * @param {?} selectedItem
     * @return {?}
     */
    selectedDataHandler(selectedItem) {
        //选择时触发
        /** @type {?} */
        const helpValue = ((/** @type {?} */ (this.item.value)));
        helpValue.value = this.singleSelect ? [selectedItem] : selectedItem; //单选返回对象，多选返回数组
        helpValue.valueField = this.valueField;
        helpValue.textValue = this.textValue;
        helpValue.isInputText = false;
        this.conditionChange.emit();
    }
}
SolutionSmartHelpComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-solution-smarthelp',
                template: "<div class=\"farris-group-wrap\" id=\"{{item.id}}\" >\r\n    <div class=\"form-group farris-form-group common-group\" [ngClass]=\"{'q-state-readonly':item.readonly}\">\r\n        <label class=\"col-form-label\" title=\"{{getConditionItemTitle(item)}}\" *ngIf=\"item && !hideLabel\">\r\n            <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.isRequired()\">*</span>\r\n            <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n            <farris-lookup-grid #lookup\r\n                id=\"{{testId}}\"                \r\n                [clear-fields]=\"clearFields\"\r\n                [uri]=\"uri\"\r\n                [placeholder]=\"placeholder\"\r\n                [(ngModel)]=\"textValue\"\r\n                [textField]=\"textField\"\r\n                [valueField]=\"valueField\"\r\n                [idField]=\"idField\"\r\n                [mapFields]=\"mapFields\"\r\n                [displayType]=\"displayType\"\r\n                [title]=\"dialogTitle\"\r\n                [dialogWidth]=\"dialogWidth\"\r\n                [dialogHeight]=\"dialogHeight\"\r\n                [context]=\"context\"\r\n                [dictPicking]=\"preEventCmd\"\r\n                [dictPicked]=\"postEventCmd\"\r\n                [enableFullTree]=\"enableFullTree\"\r\n                [loadTreeDataType]=\"loadTreeDataType\"\r\n                [singleSelect]=\"singleSelect\"\r\n                [expandLevel]=\"expandLevel\"\r\n                [enableCascade]=\"enableCascade\"\r\n                [cascadeStatus]=\"cascadeStatus\"\r\n                [readonly]=\"item.readonly\"\r\n                [nosearch]=\"nosearch\"\r\n                [beforeOpen]=\"onBeforeOpen\"\r\n                [displayFields]=\"displayFields\"\r\n                [displayTextSeparator]=\"displayTextSeparator\"\r\n                [editable]=\"editable\"\r\n                [pageSize]=\"pageSize\"\r\n                [pageList]=\"pageList\"\r\n                [useFavorite]=\"true\"\r\n                [quickSelect]=\"quickSelect\"\r\n                [enableMultiFieldSearch]=\"enableMultiFieldSearch\"\r\n                (selectedData)=\"selectedDataHandler($event)\"\r\n                (clear)=\"clearData($event)\"\r\n            >\r\n        </farris-lookup-grid>\r\n        <!-- [singleSelect]=\"true\" -->\r\n        </div>\r\n\r\n    </div>\r\n</div>"
            }] }
];
/** @nocollapse */
SolutionSmartHelpComponent.ctorParameters = () => [
    { type: SolutionService }
];
SolutionSmartHelpComponent.propDecorators = {
    hideLabel: [{ type: Input }],
    item: [{ type: Input }],
    changeFields: [{ type: Input }],
    instanceId: [{ type: Input }],
    conditionChange: [{ type: Output, args: ['conditionChange',] }],
    mappingEmitter: [{ type: Output, args: ['helpMapping',] }],
    clearFieldsChange: [{ type: Output, args: ['clearFieldsChange',] }],
    lookup: [{ type: ViewChild, args: ['lookup',] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controlcomponent/dropdown/dropdownlist.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DropDownListComponent {
    /**
     * @param {?} solutionService
     */
    constructor(solutionService) {
        this.solutionService = solutionService;
        this.hideLabel = false;
        /**
         * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
         */
        this.changeFields = [];
        this.conditionChange = new EventEmitter();
        //下拉列表数据源
        this.dropDownListDataSource = new Array();
        //下拉列表控件内显示文本
        this.selectedItemId = '';
        //是否允许编辑，当通过服务器端api取数时为true
        this.editable = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getDataSource();
        /** @type {?} */
        const initialValue = (/** @type {?} */ (this.item.value));
        initialValue.key && (this.selectedItemId = initialValue.key);
        this.testId = this.solutionService.getGuid();
        this.placeholder = (this.item.placeHolder) ? (this.item.placeHolder) : (this.item.control.placeholder);
        this.beforeShow = ((/** @type {?} */ (this.item.control))).beforeShow;
        this.beforeHide = ((/** @type {?} */ (this.item.control))).beforeHide;
        this.idField = ((/** @type {?} */ (this.item.control))).idField ? ((/** @type {?} */ (this.item.control))).idField : 'value';
        this.textField = ((/** @type {?} */ (this.item.control))).textField ? ((/** @type {?} */ (this.item.control))).textField : 'name';
        if (this.uri) {
            this.selectedItemId = (initialValue.value || []).map((/**
             * @param {?} n
             * @return {?}
             */
            n => n[this.textField])).join(',');
            this.editable = true;
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.getDataSource();
        if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
            /** @type {?} */
            const isChange = changes['changeFields'].currentValue.some((/**
             * @param {?} field
             * @return {?}
             */
            field => field == this.item.fieldCode));
            if (isChange) {
                this.selectedItemId = ((/** @type {?} */ (this.item.value))).key;
            }
        }
    }
    /**
     * @return {?}
     */
    getDataSource() {
        this.dropDownListDataSource = ((/** @type {?} */ (this.item.control))).enumValues;
        this.uri = ((/** @type {?} */ (this.item.control))).uri;
    }
    /**
     * @param {?} selected
     * @return {?}
     */
    selectChange(selected) {
        /** @type {?} */
        const selectedValue = selected['selections'].map((/**
         * @param {?} selection
         * @return {?}
         */
        (selection) => {
            return {
                value: this.uri ? selection[this.textField] : selection[this.idField],
                name: selection[this.textField]
            };
        }));
        this.item.value = new DropDownListValue({
            value: selectedValue,
            key: selected['value']
        });
        this.conditionChange.emit();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClear(event) {
        this.item.value = new DropDownListValue();
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
}
DropDownListComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-solution-dropdownlist',
                template: "<div class=\"farris-group-wrap\" id=\"{{item.id}}\">\r\n    <div class=\"form-group farris-form-group  common-group\"  [ngClass]=\"{'q-state-readonly':item.readonly}\">\r\n    <label class=\"col-form-label\" *ngIf=\"item && !hideLabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n      <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.isRequired()\">*</span>\r\n      <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n    </label>\r\n    <div class=\"farris-input-wrap\">\r\n    <farris-combo-list \r\n        [(ngModel)]=\"selectedItemId\"\r\n        [idField]=\"idField\"\r\n        [valueField]=\"idField\"\r\n        [textField]=\"textField\"\r\n        [editable]=\"editable\"\r\n        [data]=\"dropDownListDataSource\"\r\n        [uri]=\"uri\"\r\n        [beforeShow]=\"beforeShow\"\r\n        [beforeHide]=\"beforeHide\"\r\n        [multiSelect]=\"item.control.multiSelect\"\r\n        [placeholder]=\"placeholder\"\r\n        [panelHeight]=\"item.control.panelHeight ? item.control.panelHeight : 'auto'\"\r\n        (valueChange)=\"selectChange($event)\"\r\n        (clear)=\"onClear($event)\" \r\n        id=\"{{testId}}\"\r\n        [readonly]=\"item.readonly\">\r\n      </farris-combo-list>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
            }] }
];
/** @nocollapse */
DropDownListComponent.ctorParameters = () => [
    { type: SolutionService }
];
DropDownListComponent.propDecorators = {
    hideLabel: [{ type: Input }],
    item: [{ type: Input }],
    changeFields: [{ type: Input }],
    conditionChange: [{ type: Output, args: ['conditionChange',] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controlcomponent/numbercomponent/single-number.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SingleNumberComponent {
    /**
     * @param {?} solutionService
     */
    constructor(solutionService) {
        this.solutionService = solutionService;
        this.hideLabel = false;
        /**
         * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
         */
        this.changeFields = [];
        this.conditionChange = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
            /** @type {?} */
            const isChange = changes['changeFields'].currentValue.some((/**
             * @param {?} field
             * @return {?}
             */
            field => field == this.item.fieldCode));
            if (isChange) {
                this.number = this.item.value.getOriginalValue();
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.number = this.item.value.getOriginalValue();
        this.testId = this.solutionService.getGuid();
        this.canNull = true;
        this.placeholder = (this.item.placeHolder) ? (this.item.placeHolder) : (this.item.control.placeholder);
        this.precision = this.item.control.precision;
        this.textAlign = this.item.control.textAlign;
        this.bigNumber = this.item.control.bigNumber ? this.item.control.bigNumber : false;
        if (!this.bigNumber) {
            this.min = (this.item.control.min === undefined || this.item.control.min === null) ? -2147483648 : (this.item.control.min);
            this.max = (this.item.control.max === undefined || this.item.control.max === null) ? 2147483647 : (this.item.control.max);
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    valueChange(data) {
        /** @type {?} */
        const numberValue = new SingleNumberValue();
        isNaN(parseFloat(data)) ? numberValue.numValue = null : numberValue.numValue = data;
        this.item.value = numberValue;
        this.conditionChange.emit();
    }
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
}
SingleNumberComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-solution-single-number',
                template: "<div class=\"farris-group-wrap\" id=\"{{item.id}}\" >\r\n    <div class=\"form-group farris-form-group  common-group\" [ngClass]=\"{'q-state-readonly':item.readonly}\">\r\n        <label class=\"col-form-label\" *ngIf=\"item && !hideLabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n            <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.isRequired()\">*</span>\r\n            <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n            <farris-number-spinner *ngIf=\"!bigNumber\"\r\n                [(ngModel)]=\"number\"\r\n                (valueChange)=\"valueChange($event)\"\r\n                id=\"{{testId}}\"\r\n                [min]=\"min\"\r\n                [max]=\"max\"\r\n                [canNull]=\"canNull\"\r\n                [bigNumber]=\"bigNumber\"\r\n                [placeholder]=\"placeholder\"\r\n                [precision]=\"precision\"\r\n                [textAlign]=\"textAlign\"\r\n                [readonly]=\"item.readonly\">\r\n            </farris-number-spinner>\r\n            <farris-number-spinner *ngIf=\"bigNumber\"\r\n                [(ngModel)]=\"number\"\r\n                (valueChange)=\"valueChange($event)\"\r\n                id=\"{{testId}}\"\r\n                [canNull]=\"canNull\"\r\n                [bigNumber]=\"bigNumber\"\r\n                [placeholder]=\"placeholder\"\r\n                [precision]=\"precision\"\r\n                [textAlign]=\"textAlign\"\r\n                [readonly]=\"item.readonly\">\r\n            </farris-number-spinner>\r\n        </div>\r\n    </div>\r\n</div>"
            }] }
];
/** @nocollapse */
SingleNumberComponent.ctorParameters = () => [
    { type: SolutionService }
];
SingleNumberComponent.propDecorators = {
    hideLabel: [{ type: Input }],
    item: [{ type: Input }],
    changeFields: [{ type: Input }],
    conditionChange: [{ type: Output, args: ['conditionChange',] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controlcomponent/checkbox/checkbox.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CheckBoxComponent {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        this.hideLabel = false;
        /**
         * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
         */
        this.changeFields = [];
        this.conditionChange = new EventEmitter();
        this.solutionService = this.injector.get(SolutionService);
    }
    /**
     * @param {?} nr
     * @return {?}
     */
    set item(nr) {
        this._item = nr;
    }
    /**
     * @return {?}
     */
    get item() {
        return this._item;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
            /** @type {?} */
            const isChange = changes['changeFields'].currentValue.some((/**
             * @param {?} field
             * @return {?}
             */
            field => field == this.item.fieldCode));
            if (isChange) {
                this.checkValue = ((/** @type {?} */ (this.item.value))).getOriginalValue();
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.checkValue = this.item.value.getOriginalValue();
        this.controlData = (/** @type {?} */ (this.item.control));
        this.testId = this.solutionService.getGuid();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    valueChanged(event) {
        //选中时返回[true], 从选中变为未选中时返回[]
        if (event.length) {
            this._item.value.setOriginalValue(event);
        }
        else {
            this._item.value.setOriginalValue([false]);
        }
        this.conditionChange.emit();
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
}
CheckBoxComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-solution-checkbox',
                template: "<div class=\"farris-group-wrap\" id=\"{{item.id}}\">\r\n    <div class=\"form-group farris-form-group  common-group qcheckbox-group\" style=\"overflow: auto;white-space: nowrap\">\r\n        <label class=\"col-form-label mr-0\" style=\"width:auto;\" *ngIf=\"item && !hideLabel\">\r\n            <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.isRequired()\">*</span>\r\n        </label>\r\n        <!-- <div class=\"farris-input-wrap\">\r\n            <div class=\"custom-control custom-checkbox\">\r\n                <input class=\"custom-control-input\" type=\"checkbox\" id=\"item.fieldCode\" (change)=\"valueChange($event.target.checked)\" [(ngModel)]=\"item.value['value']\"/>\r\n                <label class=\"custom-control-label\" for=\"item.fieldCode\">{{item.fieldName}}</label>\r\n            </div>\r\n          <div class=\"farris-feedback valid-feedback\"></div>\r\n        </div> -->\r\n        <farris-checkboxgroup\r\n            [isStringValue]=\"controlData.isStringValue\" \r\n            [data]=\"controlData.data\" \r\n            [horizontal]=\"controlData.horizontal\" \r\n            [disable]=\"item.readonly\" \r\n            [(ngModel)]=\"checkValue\"\r\n            (changeValue)=\"valueChanged($event)\"\r\n            id=\"{{testId}}\"\r\n        ></farris-checkboxgroup>\r\n    </div>\r\n</div>"
            }] }
];
/** @nocollapse */
CheckBoxComponent.ctorParameters = () => [
    { type: Injector }
];
CheckBoxComponent.propDecorators = {
    hideLabel: [{ type: Input }],
    item: [{ type: Input }],
    changeFields: [{ type: Input }],
    conditionChange: [{ type: Output, args: ['conditionChange',] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controlcomponent/radio/radio.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RadioComponent {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        this.hideLabel = false;
        /**
         * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
         */
        this.changeFields = [];
        this.conditionChange = new EventEmitter();
        this.cls = true;
        this.solutionService = this.injector.get(SolutionService);
    }
    /**
     * @param {?} nr
     * @return {?}
     */
    set item(nr) {
        this._item = nr;
    }
    /**
     * @return {?}
     */
    get item() {
        return this._item;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
            /** @type {?} */
            const isChange = changes['changeFields'].currentValue.some((/**
             * @param {?} field
             * @return {?}
             */
            field => field == this.item.fieldCode));
            if (isChange) {
                this.radioValue = ((/** @type {?} */ (this.item.value))).getOriginalValue();
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.radioControl = (/** @type {?} */ (this.item.control));
        this.radioValue = ((/** @type {?} */ (this.item.value))).getOriginalValue();
        this.testId = this.solutionService.getGuid();
        this.showLabel = this.radioControl.showLabel;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    valueChanged(event) {
        this._item.value.setOriginalValue(event);
        this.conditionChange.emit();
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
}
RadioComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-solution-radio',
                template: "<div class=\"farris-group-wrap\" id=\"{{item.id}}\">\r\n    <div class=\"form-group farris-form-group  common-group qradio-group\"  [ngClass]=\"{'q-state-readonly':item.readonly}\">\r\n        <label class=\"col-form-label\" *ngIf=\"item && !hideLabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n            <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.isRequired()\">*</span>\r\n            <span class=\"farris-label-text\" *ngIf=\"showLabel\">{{item.fieldName}}</span>\r\n        </label>\r\n        <farris-radiogroup\r\n            class=\"f-solution-radio-group\"\r\n            [(ngModel)]=\"radioValue\"\r\n            [data]=\"radioControl.enumValues\"\r\n            [horizontal]=\"radioControl.horizontal\"\r\n            [disabled]=\"item.readonly\"\r\n            (changeValue)=\"valueChanged($event)\"\r\n            id=\"{{testId}}\"\r\n        ></farris-radiogroup>\r\n    </div>\r\n</div>"
            }] }
];
/** @nocollapse */
RadioComponent.ctorParameters = () => [
    { type: Injector }
];
RadioComponent.propDecorators = {
    hideLabel: [{ type: Input }],
    item: [{ type: Input }],
    changeFields: [{ type: Input }],
    conditionChange: [{ type: Output, args: ['conditionChange',] }],
    cls: [{ type: HostBinding, args: ['class.f-solution-radio-group-wrapper',] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controlcomponent/datepicker/datepicker.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DatePickerComponent {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        this.hideLabel = false;
        /**
         * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
         */
        this.changeFields = [];
        this.conditionChange = new EventEmitter();
        // true显示时间 false不显示
        this.showType = ShowType.all; // 显示类型，默认显示全部1；不显示日期，用于选择年月模式2；不显示日期及月份，用于选择年模式3；用于周选择4。
        // 显示类型，默认显示全部1；不显示日期，用于选择年月模式2；不显示日期及月份，用于选择年模式3；用于周选择4。
        this.maxDate = '';
        this.minDate = '';
        this.editable = false;
        this.dateRangeDatesDelimiter = '~';
        this.enableDynamic = false; //是否支持动态日期，仅限singleDate情况
        //是否支持动态日期，仅限singleDate情况
        //区间类型时是否支持选择单一区间
        this.enableSplit = false;
        this.solutionService = this.injector.get(SolutionService);
        this.messageService = this.injector.get(MessagerService);
        /** @type {?} */
        const queryconditionComponent = this.injector.get(QueryConditionComponent, null);
        if (queryconditionComponent) {
            this.destroy$ = queryconditionComponent.destroy$;
        }
        else {
            this.destroy$ = new Subject();
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
            /** @type {?} */
            const isChange = changes['changeFields'].currentValue.some((/**
             * @param {?} field
             * @return {?}
             */
            field => field == this.item.fieldCode));
            if (isChange) {
                if (this.dateRange) {
                    this.beginValue = this.item.value && this.item.value.startTime ? this.item.value.startTime.toString().trim() : '';
                    this.endValue = this.item.value && this.item.value.endTime ? this.item.value.endTime.toString().trim() : '';
                    this.bindValue = this.item.value.getOriginalValue();
                }
                else {
                    this.bindValue = this.item.value.getOriginalValue();
                }
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.testId = this.solutionService.getGuid();
        // const controlType = this.item.control.getControlType();
        switch (this.controlType) {
            case ControlType.DateRange:
                this.returnFormat = this.item.control.returnFormat ? this.item.control.returnFormat : 'yyyy-MM-dd';
                this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM-dd';
                this.dateRange = true;
                break;
            case ControlType.SingleDate:
                this.returnFormat = this.item.control.returnFormat ? this.item.control.returnFormat : 'yyyy-MM-dd';
                this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM-dd';
                this.dateRange = false;
                this.enableDynamic = this.item.control.isDynamicDate ? this.item.control.isDynamicDate : false;
                break;
            case ControlType.SingleYear:
                this.returnFormat = this.item.control.returnFormat ? this.item.control.returnFormat : 'yyyy';
                this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy';
                this.showType = ShowType.noDateAndMonth;
                this.dateRange = false;
                break;
            case ControlType.DateTimeRange:
                this.returnFormat = this.item.control.returnFormat ? this.item.control.returnFormat : 'yyyy-MM-dd HH:mm:ss';
                if (this.item.control.enableCustomFormat) {
                    // 使用自定义格式
                    this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM-dd HH:mm:ss';
                }
                else {
                    // 未启用自定义格式
                    this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM-dd';
                    this.dateFormat = this.dateFormat + ' HH:mm:ss';
                }
                this.showTime = true;
                this.dateRange = true;
                break;
            case ControlType.SingleMonth:
                this.returnFormat = this.item.control.returnFormat ? this.item.control.returnFormat : 'yyyy-MM';
                this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM';
                this.showType = ShowType.noDate;
                this.dateRange = false;
                break;
            case ControlType.MonthRange:
                this.returnFormat = this.item.control.returnFormat ? this.item.control.returnFormat : 'yyyy-MM';
                this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM';
                this.showType = ShowType.noDate;
                this.dateRange = true;
                break;
            case ControlType.SingleDateTime:
                this.returnFormat = this.item.control.returnFormat ? this.item.control.returnFormat : 'yyyy-MM-dd HH:mm:ss';
                if (this.item.control.enableCustomFormat) {
                    // 使用自定义格式
                    this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM-dd HH:mm:ss';
                }
                else {
                    // 未启用自定义格式
                    this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM-dd';
                    this.dateFormat = this.dateFormat + ' HH:mm:ss';
                }
                this.showTime = true;
                this.dateRange = false;
                break;
        }
        this.enableSplit = this.item.control.enableSplit || false;
        // 更新条件
        this.updateParamsByCondition();
        this.placeholder = this.item.placeHolder ? this.item.placeHolder : this.item.control.placeholder;
        if (this.dateRange) {
            this.beginValue = this.item.value && this.item.value.startTime ? this.item.value.startTime.toString().trim() : '';
            this.endValue = this.item.value && this.item.value.endTime ? this.item.value.endTime.toString().trim() : '';
            this.beginPlaceHolder = this.item.beginPlaceHolder ? this.item.beginPlaceHolder : this.placeholder;
            this.endPlaceHolder = this.item.endPlaceHolder ? this.item.endPlaceHolder : this.placeholder;
            this.bindValue = this.item.value.getOriginalValue();
        }
        else {
            this.bindValue = this.item.value.getOriginalValue();
        }
        if (this.item.control.weekSelect && this.controlType == ControlType.DateRange) {
            this.showType = ShowType.selectWeek;
        }
        this.dateChangedCmd = this.item.control.dateChangedCmd;
        if (!this.dateChangedCmd) {
            this.dateChangedCmd = (/**
             * @return {?}
             */
            () => of({ closeDateSelect: true }));
        }
        // 
        this.solutionService.getControlConfigState().pipe(takeUntil(this.destroy$)).subscribe((/**
         * @param {?} simpleConditions
         * @return {?}
         */
        (simpleConditions) => {
            //简单条件
            /** @type {?} */
            let findSimpleCondition = simpleConditions.find((/**
             * @param {?} item
             * @return {?}
             */
            item => item['fieldCode'] == this.item['fieldCode']));
            if (findSimpleCondition) {
                this.updateParamsByCondition(findSimpleCondition);
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.dateChangedCmdSubscription) {
            this.dateChangedCmdSubscription.unsubscribe();
        }
    }
    /**
     * @private
     * @param {?=} condition
     * @return {?}
     */
    updateParamsByCondition(condition = null) {
        /** @type {?} */
        let conditionControl = null;
        conditionControl = condition ? condition.control : this.item.control;
        switch (this.controlType) {
            case ControlType.SingleYear:
                this.maxDate = conditionControl.hasOwnProperty('maxDate') ? conditionControl['maxDate'] : this.maxDate;
                this.minDate = conditionControl.hasOwnProperty('minDate') ? conditionControl['minDate'] : this.minDate;
                break;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDateChange(event) {
        if (event.returnFormatted === this.item.value.getOriginalValue()) {
            return;
        }
        this.item.value.setOriginalValue({
            formatted: event.returnFormatted,
            delimiter: this.dateRangeDatesDelimiter
        });
        //this.conditionChange.emit();
        this.runDateChangedEvent(this.item.value.getOriginalValue());
    }
    /**
     * @param {?} event
     * @param {?} type
     * @return {?}
     */
    onSpiltDateChange(event, type) {
        /** @type {?} */
        let originValue = this.item.value.getOriginalValue();
        /** @type {?} */
        let _start = '';
        /** @type {?} */
        let _end = '';
        /** @type {?} */
        let _formatted = '';
        if (originValue) {
            /** @type {?} */
            let _value = originValue.split(this.dateRangeDatesDelimiter);
            _value[0] && (_start = _value[0]);
            _value[1] && (_end = _value[1]);
        }
        if (type === 'start') {
            _formatted = event.returnFormatted + this.dateRangeDatesDelimiter + _end;
        }
        else {
            _formatted = _start + this.dateRangeDatesDelimiter + event.returnFormatted;
        }
        if (event.returnFormatted === this.item.value.getOriginalValue()) {
            return;
        }
        this.item.value.setOriginalValue({
            formatted: _formatted,
            delimiter: this.dateRangeDatesDelimiter,
        });
        //this.conditionChange.emit();
        this.runDateChangedEvent(this.item.value.getOriginalValue());
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDynamicValueChange(event) {
        this.item.value.setOriginalValue({
            formatted: event
        });
        this.runDateChangedEvent(this.item.value.getOriginalValue());
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDynamicViewChanged(event) {
        this.item.value.setOriginalValue(event.showDynamicView ? {
            formatted: event.dynamicValue
        } : {
            formatted: event.singleValue,
            delimiter: this.dateRangeDatesDelimiter
        });
        this.runDateChangedEvent(this.item.value.getOriginalValue());
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    beginValueChange($event) {
        // this.beginValue = $event;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    endValueChange($event) {
        // this.endValue = $event;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    runDateChangedEvent(date) {
        if (this.dateChangedCmd) {
            this.dateChangedCmdSubscription = this.dateChangedCmd(date).subscribe((/**
             * @param {?} v
             * @return {?}
             */
            (v) => {
                if (typeof v === "boolean") {
                    if (v) {
                        this.conditionChange.emit();
                    }
                }
                else if (typeof v === "object" && v.closeDateSelect !== undefined && !v.closeDateSelect) {
                    if (v.message) {
                        this.messageService.warning(v.message);
                    }
                    else {
                        this.conditionChange.emit();
                    }
                }
                else {
                    this.conditionChange.emit();
                }
            }));
        }
        else {
            this.conditionChange.emit();
        }
    }
}
DatePickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-solution-datepicker',
                template: "<div class=\"farris-group-wrap\" id=\"{{item.id}}\">\r\n    <div class=\"form-group farris-form-group  common-group\"  [ngClass]=\"{'q-state-readonly':item.readonly,'datepicker-range-group':dateRange}\">\r\n        <label class=\"col-form-label\" *ngIf=\"item && !hideLabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n            <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.isRequired()\">*</span>\r\n            <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n            <farris-datepicker *ngIf=\"!dateRange\"\r\n                [(ngModel)]=\"bindValue\"\r\n                [dateRange]=\"dateRange\"\r\n                [placeholder]=\"placeholder\"\r\n                [returnFormat]=\"returnFormat\"\r\n                [dateFormat]=\"dateFormat\"\r\n                [editable]=\"editable\"\r\n                [showType]=\"showType\"\r\n                [showTime]=\"showTime\"\r\n                [readonly]=\"item.readonly\"\r\n                (valueChange)=\"onDateChange($event)\"\r\n                [maxDate]=\"maxDate\"\r\n                [minDate]=\"minDate\"\r\n                [enableDynamic]=\"enableDynamic\"\r\n                (dynamicValueChange)=\"onDynamicValueChange($event)\"\r\n                (dynamicViewChanged)=\"onDynamicViewChanged($event)\"\r\n                id=\"{{testId}}\"\r\n            >\r\n            </farris-datepicker>\r\n            <farris-datepicker *ngIf=\"dateRange && !enableSplit\"\r\n                [dateRange]=\"dateRange\"\r\n                [placeholder]=\"placeholder\"      \r\n                [beginPlaceholder]=\"beginPlaceHolder\"\r\n                [endPlaceholder]=\"endPlaceHolder\"\r\n                [returnFormat]=\"returnFormat\"\r\n                [dateFormat]=\"dateFormat\"\r\n                [editable]=\"editable\"\r\n                [showType]=\"showType\"\r\n                [showTime]=\"showTime\"\r\n                [readonly]=\"item.readonly\"\r\n                [(ngModel)]=\"bindValue\"\r\n                (valueChange)=\"onDateChange($event)\"\r\n                id=\"{{testId}}\"\r\n            >\r\n            </farris-datepicker>\r\n            <div *ngIf=\"dateRange && enableSplit\" class=\"split-date-range\">\r\n                <farris-datepicker\r\n                    [(ngModel)]=\"beginValue\"\r\n                    [dateRange]=\"false\"\r\n                    [placeholder]=\"beginPlaceHolder\"\r\n                    [returnFormat]=\"returnFormat\"\r\n                    [dateFormat]=\"dateFormat\"\r\n                    [editable]=\"editable\"\r\n                    [showType]=\"showType\"\r\n                    [showTime]=\"showTime\"\r\n                    [readonly]=\"item.readonly\"\r\n                    (valueChange)=\"onSpiltDateChange($event, 'start')\"\r\n                    [maxDate]=\"maxDate\"\r\n                    [minDate]=\"minDate\"\r\n                    id=\"{{testId}}\"\r\n                >\r\n                </farris-datepicker>\r\n                <span>~</span>\r\n                <farris-datepicker\r\n                    [(ngModel)]=\"endValue\"\r\n                    [dateRange]=\"false\"\r\n                    [placeholder]=\"endPlaceHolder\"\r\n                    [returnFormat]=\"returnFormat\"\r\n                    [dateFormat]=\"dateFormat\"\r\n                    [editable]=\"editable\"\r\n                    [showType]=\"showType\"\r\n                    [showTime]=\"showTime\"\r\n                    [readonly]=\"item.readonly\"\r\n                    (valueChange)=\"onSpiltDateChange($event, 'end')\"\r\n                    [maxDate]=\"maxDate\"\r\n                    [minDate]=\"minDate\"\r\n                    id=\"{{testId + 'more'}}\"\r\n                >\r\n                </farris-datepicker>\r\n        \r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n"
            }] }
];
/** @nocollapse */
DatePickerComponent.ctorParameters = () => [
    { type: Injector }
];
DatePickerComponent.propDecorators = {
    hideLabel: [{ type: Input }],
    item: [{ type: Input }],
    controlType: [{ type: Input }],
    changeFields: [{ type: Input }],
    conditionChange: [{ type: Output, args: ['conditionChange',] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controlcomponent/combolookup/combolookup.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ComboLookUpComponent {
    /**
     * @param {?} solutionService
     */
    constructor(solutionService) {
        this.solutionService = solutionService;
        this.hideLabel = false;
        /**
         * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
         */
        this.changeFields = [];
        this.conditionChange = new EventEmitter();
        this.selectedValues = "";
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getComboLookUpBindingInfo();
        this.testId = this.solutionService.getGuid();
        this.placeholder = (this.item.placeHolder) ? (this.item.placeHolder) : (this.item.control.placeholder);
        this.autoWidth = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.getComboLookUpBindingInfo();
        if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
            /** @type {?} */
            const isChange = changes['changeFields'].currentValue.some((/**
             * @param {?} field
             * @return {?}
             */
            field => field == this.item.fieldCode));
            if (isChange) {
                this.textValue = ((/** @type {?} */ (this.item.value))).textValue;
            }
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    valueChangeHandler(data) {
        /** @type {?} */
        const helpValue = ((/** @type {?} */ (this.item.value)));
        helpValue.value = data.selections;
        helpValue.valueField = this.valueField;
        helpValue.textValue = helpValue.getTextValue(this.textField);
        this.textValue = helpValue.textValue;
        this.conditionChange.emit();
    }
    /**
     * @return {?}
     */
    getComboLookUpBindingInfo() {
        /** @type {?} */
        const comboLookUpControl = ((/** @type {?} */ (this.item.control)));
        this.uri = comboLookUpControl.uri;
        this.idField = comboLookUpControl.idField;
        this.valueField = comboLookUpControl.valueField;
        this.textField = comboLookUpControl.textField;
        this.mapFields = comboLookUpControl.mapFields;
        this.displayType = comboLookUpControl.displayType;
        this.preEventCmd = comboLookUpControl.preEventCmd;
        this.postEventCmd = comboLookUpControl.postEventCmd;
        this.enableFullTree = comboLookUpControl.enableFullTree;
        this.multiSelect = comboLookUpControl.singleSelect === true ? false : true;
        this.panelWidth = comboLookUpControl.panelWidth ? comboLookUpControl.panelWidth : 300;
        this.panelHeight = comboLookUpControl.panelHeight ? comboLookUpControl.panelHeight : 300;
        this.loadTreeDataType = comboLookUpControl.loadTreeDataType;
        this.context = comboLookUpControl.context;
        /** @type {?} */
        const comboLookUpValue = ((/** @type {?} */ (this.item.value)));
        if (comboLookUpValue.textValue == 'help-text-value-null') { //旧数据兼容
            this.textValue = comboLookUpValue.getTextValue(this.textField);
        }
        else {
            this.textValue = comboLookUpValue.textValue;
        }
        if (comboLookUpValue && comboLookUpValue.value) {
            this.selectedValues = (comboLookUpValue.value || []).map((/**
             * @param {?} n
             * @return {?}
             */
            n => n[this.idField])).join(',');
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    clearData(data) {
        ((/** @type {?} */ (this.item.value))).clearValue();
        this.conditionChange.emit();
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
}
ComboLookUpComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-solution-combolookup',
                template: "<div class=\"farris-group-wrap\" id=\"{{item.id}}\">\r\n    <div class=\"form-group farris-form-group common-group \"  [ngClass]=\"{'q-state-readonly':item.readonly}\">\r\n        <label class=\"col-form-label\" *ngIf=\"item && !hideLabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n            <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.isRequired()\">*</span>\r\n            <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n            <farris-combo-lookup *ngIf=\"item\"\r\n                [uri]=\"uri\"\r\n                [placeholder]=\"placeholder\"\r\n                [(ngModel)]=\"textValue\"\r\n                [idField]=\"idField\"\r\n                [valueField]=\"valueField\"\r\n                [textField]=\"textField\"\r\n                [mapFields]=\"mapFields\"\r\n                [displayType]=\"displayType\"\r\n                [multiSelect]=\"multiSelect\"\r\n                [enableFullTree]=\"enableFullTree\"\r\n                [selectedValues]=\"selectedValues\"\r\n                [beforeShow]=\"preEventCmd\"\r\n                [beforeHide]=\"postEventCmd\"\r\n                (valueChange)=\"valueChangeHandler($event)\"\r\n                (clear)=\"clearData($event)\"\r\n                [autoWidth]=\"autoWidth\"\r\n                [panelWidth]=\"panelWidth\"\r\n                [panelHeight]=\"panelHeight\"\r\n                [readonly]=\"item.readonly\"\r\n                [loadTreeDataType]=\"loadTreeDataType\"\r\n                [context]=\"context\"\r\n                id=\"{{testId}}\"\r\n            >\r\n        </farris-combo-lookup>\r\n        </div>\r\n    </div>\r\n</div>"
            }] }
];
/** @nocollapse */
ComboLookUpComponent.ctorParameters = () => [
    { type: SolutionService }
];
ComboLookUpComponent.propDecorators = {
    hideLabel: [{ type: Input }],
    item: [{ type: Input }],
    changeFields: [{ type: Input }],
    conditionChange: [{ type: Output, args: ['conditionChange',] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/clear-fields.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ClearFieldsDirective {
    /**
     * @param {?} ngCtrl
     * @param {?} qcc
     * @param {?} inject
     */
    constructor(ngCtrl, qcc, inject) {
        this.ngCtrl = ngCtrl;
        this.qcc = qcc;
        this.inject = inject;
        this.clearFields = '';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        //弹出帮助组件指定调用了父附件QueryConditionComponent，单独使用时无父组件
        if (!this.qcc)
            return;
        if (this.clearFields && this.ngCtrl) {
            this.ngCtrl.valueChanges.subscribe((/**
             * @param {?} v
             * @return {?}
             */
            (v) => {
                if (this.qcc.canClearRelatedFields) {
                    this.qcc.fieldCodeOfClearFields = [];
                    this.clearFields.split(',').forEach((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => {
                        /** @type {?} */
                        const visibleConditions = this.qcc.selectedFieldConditions.filter((/**
                         * @param {?} condition
                         * @return {?}
                         */
                        condition => { return !!condition.visible; }));
                        /** @type {?} */
                        const conditionItem = visibleConditions.find((/**
                         * @param {?} c
                         * @return {?}
                         */
                        c => c.fieldCode === n));
                        if (conditionItem) {
                            this.qcc.fieldCodeOfClearFields.push(n);
                            conditionItem.value.clearValue();
                        }
                    }));
                }
            }));
        }
    }
}
ClearFieldsDirective.decorators = [
    { type: Directive, args: [{
                selector: '[clear-fields]'
            },] }
];
/** @nocollapse */
ClearFieldsDirective.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },
    { type: QueryConditionComponent, decorators: [{ type: Optional }] },
    { type: Injector }
];
ClearFieldsDirective.propDecorators = {
    clearFields: [{ type: Input, args: ['clear-fields',] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/label-text-multi.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LabelTextMultiDirective {
    /**
     * @param {?} el
     * @param {?} injector
     */
    constructor(el, injector) {
        this.el = el;
        this.injector = injector;
        this.multiCls = 'farris-group-multi-label';
        this._enableMulti = false;
        // 获取ngZone
        this.ngZone = null;
        if (!this.ngZone) {
            this.ngZone = this.injector.get(NgZone, null);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set enableMulti(value) {
        this._enableMulti = value;
        this.judgeMulti();
    }
    /**
     * @return {?}
     */
    get enableMulti() {
        return this._enableMulti;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    judgeMulti() {
        if (this._enableMulti) {
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    /** @type {?} */
                    let textEl = this.el.nativeElement.querySelector('.farris-label-text');
                    if (!textEl) {
                        return;
                    }
                    // 超出
                    if (textEl.clientWidth < textEl.scrollWidth) {
                        this.el.nativeElement.className = this.el.nativeElement.className + ' ' + this.multiCls;
                    }
                    else {
                        this.el.nativeElement.className = this.el.nativeElement.className.replace(this.multiCls, '');
                    }
                }), 20);
            }));
        }
    }
}
LabelTextMultiDirective.decorators = [
    { type: Directive, args: [{
                selector: '[label-text-multi]'
            },] }
];
/** @nocollapse */
LabelTextMultiDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Injector }
];
LabelTextMultiDirective.propDecorators = {
    enableMulti: [{ type: Input, args: ['label-text-multi',] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/querycondition-advanced/service/state.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class StateService {
    /**
     * @param {?} notifySer
     * @param {?} localeService
     */
    constructor(notifySer, localeService) {
        this.notifySer = notifySer;
        this.localeService = localeService;
        this.fieldConfig = [];
        this.fieldConfig$ = new Subject();
        this.queryconditionData$ = new Subject();
        this.queryconditionListData$ = new Subject();
        this.checkedList = {};
        this.checkedList$ = new Subject();
    }
    /**
     * 重置筛选条件
     * @return {?}
     */
    reset() {
        this.queryconditionData = { relation: 1, items: [], children: [], path: [1], groupid: 1 };
        this.queryconditionData$.next(this.queryconditionData);
        this.updateQueryConditionListData();
    }
    /**
     *
     * @param {?} data
     * @param {?} type
     * @param {?=} isEmit 默认要发送emit，生成分组触发时不需要emit，因为生成分组方法本身会触发
     * @return {?}
     */
    changeQueryconditionData(data, type, isEmit = true) {
        const { item, path, addPositionItem, deleteItems } = data;
        /** @type {?} */
        let target = this.queryconditionData;
        path.forEach((/**
         * @param {?} pathVal
         * @return {?}
         */
        pathVal => {
            //groupid = 1的时候未最外层
            if (pathVal !== 1) {
                target = target.children.find((/**
                 * @param {?} targetVal
                 * @return {?}
                 */
                targetVal => targetVal.groupid === pathVal));
            }
        }));
        switch (type) {
            case 'add':
                item.conditionid = this.getMaxConditionid() + 1;
                item.compareType = 0;
                if (addPositionItem) {
                    /** @type {?} */
                    let position = target.items.findIndex((/**
                     * @param {?} val
                     * @return {?}
                     */
                    val => val.conditionid === addPositionItem.conditionid));
                    position > -1 ? target.items.splice(position, 0, item) : target.items.push(item);
                }
                else {
                    target.items.push(item);
                }
                this.clearCheckedList();
                break;
            case 'delete-item':
                //删除单个条件，正常删除时使用
                if (deleteItems) {
                    deleteItems.forEach((/**
                     * @param {?} val
                     * @return {?}
                     */
                    val => {
                        /** @type {?} */
                        let deleteIndex = target.items.findIndex((/**
                         * @param {?} itemsVal
                         * @return {?}
                         */
                        itemsVal => itemsVal.conditionid === val.conditionid));
                        target.items.splice(deleteIndex, 1);
                    }));
                }
                this.clearCheckedList();
                //删除时优化下结构
                this.treeshake(this.queryconditionData);
                break;
            case 'delete-items':
                //删除多个条件，生产分组时使用
                if (deleteItems) {
                    deleteItems.forEach((/**
                     * @param {?} val
                     * @return {?}
                     */
                    val => {
                        /** @type {?} */
                        let deleteIndex = target.items.findIndex((/**
                         * @param {?} itemsVal
                         * @return {?}
                         */
                        itemsVal => itemsVal.conditionid === val.conditionid));
                        target.items.splice(deleteIndex, 1);
                    }));
                }
                this.clearCheckedList();
                break;
            case 'modify':
                /** @type {?} */
                let modifyIndex = target.items.findIndex((/**
                 * @param {?} itemsVal
                 * @return {?}
                 */
                itemsVal => itemsVal.conditionid === item.conditionid));
                target.items[modifyIndex] = item;
                break;
        }
        if (isEmit) {
            this.queryconditionData$.next(this.queryconditionData);
            this.updateQueryConditionListData();
        }
    }
    /**
     * 修改分组数据
     * @param {?} data group数据
     * @param {?} type 修改类型
     * @return {?}
     */
    changeGroupData(data, type) {
        const { item, path, relation } = data;
        /** @type {?} */
        let target = this.queryconditionData;
        path.forEach((/**
         * @param {?} pathVal
         * @return {?}
         */
        pathVal => {
            //groupid = 1的时候未最外层
            if (pathVal !== 1) {
                target = target.children.find((/**
                 * @param {?} targetVal
                 * @return {?}
                 */
                targetVal => targetVal.groupid === pathVal));
            }
        }));
        switch (type) {
            case 'modify-relation':
                target.relation = relation;
                break;
        }
        this.queryconditionData$.next(this.queryconditionData);
        this.updateQueryConditionListData();
    }
    /**
     * 生成新的分组
     * @desc
     *
     * @return {?}
     */
    addGroup() {
        /** @type {?} */
        let groups = Object.keys(this.checkedList).filter((/**
         * @param {?} val
         * @return {?}
         */
        val => this.checkedList[val].length))
        // 未选择筛选条件时候的点击提示
        ;
        // 未选择筛选条件时候的点击提示
        if (!groups.length) {
            //需要勾选
            this.notifySer.warning(this.localeService.getValue('advancedMode.info.noConditionInfo'));
        }
        else if (groups.length === 1) {
            //所有选择项归属于同一个group的items时
            /** @type {?} */
            let targetPath = groups[0].split('-').map((/**
             * @param {?} val
             * @return {?}
             */
            val => Number(val)));
            /** @type {?} */
            let target = this.queryconditionData;
            targetPath.forEach((/**
             * @param {?} pathVal
             * @return {?}
             */
            pathVal => {
                //groupid = 1的时候未最外层
                if (pathVal !== 1) {
                    target = target.children.find((/**
                     * @param {?} targetVal
                     * @return {?}
                     */
                    targetVal => targetVal.groupid === pathVal));
                }
            }));
            /** @type {?} */
            let flatItems = this.getFlatConditions(target);
            /** @type {?} */
            let modifyItems = flatItems.filter((/**
             * @param {?} val
             * @return {?}
             */
            val => this.checkedList[groups[0]].includes(val.conditionid)))
            //特别的，如果将group下的children.length为0，并且modifyItems的范围为全部的items，则提示
            ;
            //特别的，如果将group下的children.length为0，并且modifyItems的范围为全部的items，则提示
            if (!target.children.length && modifyItems.length === target.items.length) {
                //已经存在该分组了
                this.notifySer.warning(this.localeService.getValue('advancedMode.info.existGroupInfo'));
                return;
            }
            this.generateGroup(target, modifyItems, []);
        }
        else {
            //如果group存在多个组，首先找到涉及数据的最外层组，默认是group为1的组，即最大组
            /** @type {?} */
            let involvedGroupid = 1;
            /** @type {?} */
            let involvedPath = [1]
            //获取有选择数据的group，并将路径转化为Array<number>
            ;
            //获取有选择数据的group，并将路径转化为Array<number>
            /** @type {?} */
            let _groups = groups.map((/**
             * @param {?} val
             * @return {?}
             */
            val => val.split('-').map((/**
             * @param {?} val2
             * @return {?}
             */
            val2 => Number(val2)))))
            //获取其中的最短路径
            ;
            //获取其中的最短路径
            /** @type {?} */
            let minLength = _groups.map((/**
             * @param {?} val
             * @return {?}
             */
            val => val.length)).sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => a - b))[0]
            //循环找到其中的涉及最小的 最大公共group
            ;
            //循环找到其中的涉及最小的 最大公共group
            for (let i = 1; i < minLength; i++) {
                /** @type {?} */
                let nowGroupid = _groups[0][i];
                if (nowGroupid) {
                    //每个组的第i项都一致flag为true
                    /** @type {?} */
                    let flag = _groups.filter((/**
                     * @param {?} val
                     * @return {?}
                     */
                    val => val[i] === nowGroupid)).length === _groups.length;
                    if (flag) {
                        involvedGroupid = nowGroupid;
                        involvedPath.push(nowGroupid);
                    }
                    else {
                        break;
                    }
                }
                else {
                    break;
                }
            }
            //校验跨组，involvedGroupid下的items，可以不全选,不做校验
            //其他情况需要检查checklist对应数据是否已经为对应group的全部数据
            /** @type {?} */
            let flatGroupList = this.getFlatChildren(this.queryconditionData)
            //检测involvedGroupid系的group的condition的全部数量是不是等于已选择的数量，如果是的话，提醒用户，所选条件已存在分组
            ;
            //检测involvedGroupid系的group的condition的全部数量是不是等于已选择的数量，如果是的话，提醒用户，所选条件已存在分组
            /** @type {?} */
            let involvedGroup = flatGroupList.find((/**
             * @param {?} val
             * @return {?}
             */
            val => val.groupid === involvedGroupid));
            /** @type {?} */
            let involvedConditionsAll = this.getFlatConditions(involvedGroup).length;
            /** @type {?} */
            let checkedAll = groups.map((/**
             * @param {?} val
             * @return {?}
             */
            val => this.checkedList[val].length)).reduce((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => a + b));
            if (involvedConditionsAll === checkedAll) {
                //已经存在该分组了
                this.notifySer.warning(this.localeService.getValue('advancedMode.info.existGroupInfo'));
                return;
            }
            /** @type {?} */
            let validFlag = true
            // 获取所有基于相关involvedGroupid与checklist的children
            //方法：寻找最小共组在group数组的位置，如再第一位 ，则所有包含第二位的children都应该被勾选
            ;
            // 获取所有基于相关involvedGroupid与checklist的children
            //方法：寻找最小共组在group数组的位置，如再第一位 ，则所有包含第二位的children都应该被勾选
            /** @type {?} */
            let involvedChildrenGroupids = [];
            _groups.forEach((/**
             * @param {?} val
             * @return {?}
             */
            val => {
                /** @type {?} */
                let groupid = val[involvedPath.length];
                if (groupid && !involvedChildrenGroupids.includes(groupid)) {
                    involvedChildrenGroupids.push(groupid);
                }
            }));
            //获取上述步骤中所有group的condition数量（含子级）
            /** @type {?} */
            let involveChildrenConditionLen = 0;
            involvedChildrenGroupids.forEach((/**
             * @param {?} val
             * @return {?}
             */
            val => {
                /** @type {?} */
                let target = flatGroupList.find((/**
                 * @param {?} group
                 * @return {?}
                 */
                group => group.groupid === val));
                if (target) {
                    /** @type {?} */
                    let targetFlatConditionsLen = this.getFlatConditions(target).length;
                    involveChildrenConditionLen += targetFlatConditionsLen;
                }
            }));
            /** @type {?} */
            let involvedCheckedConditionLen = 0;
            groups.filter((/**
             * @param {?} val
             * @return {?}
             */
            val => val !== involvedPath.join('-'))).forEach((/**
             * @param {?} val
             * @return {?}
             */
            val => involvedCheckedConditionLen += this.checkedList[val].length));
            if (involveChildrenConditionLen !== involvedCheckedConditionLen) {
                //跨组操作需要勾选组内所有数据
                this.notifySer.error(this.localeService.getValue('advancedMode.info.checkedGroupInfo'));
                validFlag = false;
            }
            // groups.forEach(group => {
            //   if (!validFlag) {
            //     return
            //   }
            //   if (group !== involvedPath.join('-')) {
            //     let target = flatGroupList.find(val => val.path.join('-') === group)
            //     let targetFlatConditions = this.getFlatConditions(target)
            //     //当前节点下的所有items，与与该节点有关的所有items
            //     let checkedListBaseTarget = _groups.filter(val => val.includes(target.groupid)).map(val => val.join('-'))
            //     let checkedListBaseTargetLength = 0
            //     checkedListBaseTarget.forEach(val => checkedListBaseTargetLength = checkedListBaseTargetLength + this.checkedList[val].length)
            //     if (targetFlatConditions.length !== checkedListBaseTargetLength) {
            //       this.notifySer.error('跨组操作时，应勾选该组下全部数据')
            //       validFlag = false
            //     }
            //   }
            // })
            if (validFlag) {
                /** @type {?} */
                let modifyItemids = this.checkedList[involvedPath.join('-')] || [];
                /** @type {?} */
                let target = flatGroupList.find((/**
                 * @param {?} val
                 * @return {?}
                 */
                val => val.path.join('-') === involvedPath.join('-')));
                /** @type {?} */
                let modifyItems = target.items.filter((/**
                 * @param {?} val
                 * @return {?}
                 */
                val => modifyItemids.includes(val.conditionid)))
                //由于前面已经检测了包含了某child的全部condition，所以此处过滤应该包含子项。
                //方法：寻找最小共组在group数组的位置，如再第一位 ，则所有包含第二位的children都应该被勾选
                ;
                //由于前面已经检测了包含了某child的全部condition，所以此处过滤应该包含子项。
                //方法：寻找最小共组在group数组的位置，如再第一位 ，则所有包含第二位的children都应该被勾选
                /** @type {?} */
                let involvedChildrenGroup = _groups.map((/**
                 * @param {?} val
                 * @return {?}
                 */
                val => val[involvedPath.length])).filter((/**
                 * @param {?} val
                 * @return {?}
                 */
                val => val));
                /** @type {?} */
                let children = target.children.filter((/**
                 * @param {?} val
                 * @return {?}
                 */
                val => involvedChildrenGroup.includes(val.groupid)))
                // let children = target.children.filter(val => groups.includes(val.path.join('-')))
                ;
                // let children = target.children.filter(val => groups.includes(val.path.join('-')))
                this.generateGroup(target, modifyItems, children);
            }
        }
        this.queryconditionData$.next(this.queryconditionData);
        this.updateQueryConditionListData();
        this.clearCheckedList();
    }
    /**
     *
     * @param {?} groupid
     * @param {?} path
     * @param {?=} isEmit 是否需要触发emit操作，对于treeshake方法，无需触发，默认为true
     * @param {?=} changeRootCompareType 属于treeshake过程中的取消分组，涉及到根节点且根节点只有该children的时候，需要修改根节点比较符，为true时修改
     * @return {?}
     */
    deleteGroup(groupid, path, isEmit = true, changeRootCompareType = false) {
        if (groupid === 1) {
            //已经是最外层分组了
            this.notifySer.info(this.localeService.getValue('advancedMode.info.deleteGroupInfo'));
        }
        else {
            /** @type {?} */
            let target = this.queryconditionData;
            /** @type {?} */
            let targetParent = null;
            path.forEach((/**
             * @param {?} pathVal
             * @return {?}
             */
            pathVal => {
                //groupid = 1的时候未最外层
                if (pathVal !== 1) {
                    targetParent = target;
                    target = target.children.find((/**
                     * @param {?} targetVal
                     * @return {?}
                     */
                    targetVal => targetVal.groupid === pathVal));
                }
            }));
            targetParent.children = targetParent.children.filter((/**
             * @param {?} val
             * @return {?}
             */
            val => val.groupid !== groupid));
            /** @type {?} */
            let isChangeCompareType = (targetParent.groupid === 1) && changeRootCompareType && !targetParent.items.length && !targetParent.children.length;
            if (isChangeCompareType) {
                targetParent.relation = target.relation;
            }
            targetParent.children.push(...target.children);
            targetParent.items.push(...target.items);
            /** @type {?} */
            let childrens = this.getFlatChildren(targetParent);
            childrens.forEach((/**
             * @param {?} val
             * @return {?}
             */
            val => val.path = val.path.filter((/**
             * @param {?} pathItem
             * @return {?}
             */
            pathItem => pathItem !== groupid))));
            if (isEmit) {
                this.queryconditionData$.next(this.queryconditionData);
                this.updateQueryConditionListData();
                this.clearCheckedList();
            }
        }
    }
    /**
     * @param {?} parentTarget
     * @param {?} items
     * @param {?} children
     * @return {?}
     */
    generateGroup(parentTarget, items, children) {
        /** @type {?} */
        let groupid = this.getMaxGroupid() + 1
        //删除最小范围的最大组 中移除掉的数据
        ;
        //删除最小范围的最大组 中移除掉的数据
        this.changeQueryconditionData({ deleteItems: items, path: parentTarget.path }, 'delete-items', false);
        //删除最小范围的最大组 中移除掉的children，注意，由于已经做过校验，children中的递归类型已经全部选择，只需将target中涉及的children移到newgroup，并将其内部的路由修改
        /** @type {?} */
        let allGroups = this.getFlatChildren(parentTarget);
        /** @type {?} */
        let parentPosition = parentTarget.path.findIndex((/**
         * @param {?} pathVal
         * @return {?}
         */
        pathVal => pathVal === parentTarget.groupid));
        children.forEach((/**
         * @param {?} val
         * @return {?}
         */
        val => {
            // this.deleteGroup(val.groupid, val.path)
            parentTarget.children = parentTarget.children.filter((/**
             * @param {?} child
             * @return {?}
             */
            child => child.groupid !== val.groupid));
            allGroups.forEach((/**
             * @param {?} group
             * @return {?}
             */
            group => {
                if (group.path.includes(val.groupid)) {
                    group.path.splice(parentPosition + 1, 0, groupid);
                }
            }));
        }));
        /** @type {?} */
        let newGroup = {
            groupid,
            relation: 1,
            items: items,
            children: children,
            path: parentTarget.path.concat(groupid)
        };
        parentTarget.children.push(newGroup);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    setQueryconditionData(data) {
        this.queryconditionData = data;
        this.queryconditionData$.next(data);
        // 初始化可以不用更新QueryConditionListData，父组件已经传入
        // this.updateQueryConditionListData()
    }
    /**
     * @return {?}
     */
    getQueryconditionData() {
        return this.queryconditionData;
    }
    /**
     * @param {?} config
     * @return {?}
     */
    changeFieldConfig(config) {
        this.fieldConfig = config;
        this.fieldConfig$.next(config);
    }
    /**
     * @return {?}
     */
    getFieldConfig() {
        return this.fieldConfig;
    }
    /**
     * 修改已选择的筛选条件
     * @param {?} path number[] 节点位置
     * @param {?} item 筛选条件
     * @return {?}
     */
    changeCheckedList(path, item) {
        /** @type {?} */
        let _path = path.join('-');
        if (!this.checkedList[_path]) {
            this.checkedList[_path] = [item];
        }
        else {
            /** @type {?} */
            let index = this.checkedList[_path].indexOf(item);
            if (index < 0) {
                this.checkedList[_path].push(item);
            }
            else {
                this.checkedList[_path].splice(index, 1);
                if (!this.checkedList[_path].length) {
                    delete this.checkedList[_path];
                }
            }
        }
        this.checkedList$.next(this.checkedList);
    }
    /**
     * 清除已选择的筛选条件
     * @return {?}
     */
    clearCheckedList() {
        this.checkedList = {};
        this.checkedList$.next(this.checkedList);
    }
    /**
     *
     * @param {?} data 需要查询的节点位置
     * @return {?} 该节点下所有的筛选条件信息
     */
    getFlatConditions(data) {
        if (data.children) {
            return [].concat(data.items, ...data.children.map((/**
             * @param {?} val
             * @return {?}
             */
            val => this.getFlatConditions(val))));
        }
        return [].concat(data.items);
    }
    /**
     *
     * @param {?} data 需要查询的节点
     * @return {?} 该节点下所有的组织信息
     */
    getFlatChildren(data) {
        if (data.children) {
            return [].concat(data, ...data.children.map((/**
             * @param {?} val
             * @return {?}
             */
            val => this.getFlatChildren(val))));
        }
        return [].concat(data);
    }
    /**
     * @desc 获取数据中已有的最大筛选条件编号
     * @return {?} 当前数据中已有的最大筛选条件编号
     */
    getMaxConditionid() {
        /** @type {?} */
        let maxid = 0;
        /** @type {?} */
        let items = this.getFlatConditions(this.queryconditionData);
        /** @type {?} */
        let conditionList = items.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => b.conditionid - a.conditionid));
        if (conditionList.length) {
            maxid = conditionList[0].conditionid;
        }
        return maxid;
    }
    /**
     * @desc 获取数据中已有的最大组织编号
     * @return {?} 当前数据中已有的最大组织编号
     */
    getMaxGroupid() {
        /** @type {?} */
        let maxid = 0;
        /** @type {?} */
        let childrens = this.getFlatChildren(this.queryconditionData);
        /** @type {?} */
        let conditionList = childrens.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => b.groupid - a.groupid));
        if (conditionList.length) {
            maxid = conditionList[0].groupid;
        }
        return maxid;
    }
    /**
     * 将querycondition转化为Array的格式并交付后端解析
     * @param {?} data  解析的数据
     * @param {?=} parentRelation 父节点的关联关系
     * @return {?}
     */
    objToArrayData(data, parentRelation) {
        /** @type {?} */
        let items = data.items;
        /** @type {?} */
        let children = data.children;
        items.forEach((/**
         * @param {?} val
         * @return {?}
         */
        val => val.relation = data.relation));
        if (children.length) {
            items = [].concat(...items, ...children.map((/**
             * @param {?} val
             * @return {?}
             */
            val => this.objToArrayData(val, data.relation))));
        }
        if (items.length && parentRelation) {
            items[items.length - 1].relation = parentRelation;
            items[0].Lbracket ? items[0].Lbracket += '(' : items[0].Lbracket = '(';
            items[items.length - 1].Rbracket ? items[items.length - 1].Rbracket += ')' : items[items.length - 1].Rbracket = ')';
        }
        return [...items];
    }
    /**
     * @return {?}
     */
    updateQueryConditionListData() {
        /** @type {?} */
        let result = this.objToArrayData(cloneDeep(this.queryconditionData));
        this.queryconditionListData = result;
        this.queryconditionListData$.next(this.queryconditionListData);
    }
    /**
     * 执行完增删操作后，存在部分group中无数据的情况，需要删除掉该部分无用数据
     * @param {?} data
     * @param {?=} parentData
     * @return {?}
     */
    treeshake(data, parentData) {
        if (data.children.length) {
            data.children.forEach((/**
             * @param {?} group
             * @return {?}
             */
            group => this.treeshake(group, data)));
        }
        //items存在或者children的数量大于等于2为正常数据，无需处理，return仅是返回给最外层数据
        if (data.items.length || data.children.length > 1) ;
        else if (data.groupid === 1) {
            //groupid === 1 特殊处理，items和children可以为0，但是children长度为1且items无数据时要将children处理
            if (!data.items.length && data.children.length === 1) {
                this.deleteGroup(data.children[0].groupid, data.children[0].path, false, true);
            }
        }
        else if (!data.children.length) {
            //children数量为0 items数量也为0， 该节点无存在必要，直接删除
            parentData.children = parentData.children.filter((/**
             * @param {?} val
             * @return {?}
             */
            val => val.groupid !== data.groupid));
        }
        else if (data.children.length === 1) {
            //items不存在，只有一个children,相当于删除该层分组，将子children升级
            this.deleteGroup(data.groupid, data.path, false, true);
        }
    }
}
StateService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
StateService.ctorParameters = () => [
    { type: NotifyService },
    { type: LocaleService }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/querysolutionvo.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 查询方案实体类
 */
class QuerySolutionVo {
    constructor() {
        /**
         * 是否默认查询方案
         * 初始时，为false
         */
        this.isDefault = false;
        this.isChanged = false;
        this.extendId = 'query-scheme-1';
    }
}
/**
 * 查询方案实体类序列化与反序列化器
 */
class QuerySolutionVoConvertor {
    /**
     * 序列化
     * @param {?} obj 查询方案实体
     * @return {?}
     */
    convertJObject(obj) {
        /** @type {?} */
        let querySolutionVo = (/** @type {?} */ (obj));
        /** @type {?} */
        let jobj = new Object();
        jobj["id"] = querySolutionVo.id;
        jobj["belongId"] = querySolutionVo.belongId;
        jobj["code"] = querySolutionVo.code;
        jobj["name"] = querySolutionVo.name;
        jobj["isSystem"] = querySolutionVo.isSystem;
        jobj["isDefault"] = querySolutionVo.isDefault;
        jobj["type"] = querySolutionVo.type;
        jobj["extendId"] = querySolutionVo.extendId;
        jobj["extendInfo"] = querySolutionVo.extendInfo;
        jobj["code_chs"] = querySolutionVo.code_chs;
        jobj["code_en"] = querySolutionVo.code_en;
        jobj["code_cht"] = querySolutionVo.code_cht;
        jobj["mode"] = querySolutionVo.mode || '1';
        //针对树数据中做简化处理，仅保留对应条件的conditionid
        if (querySolutionVo.mode === '2') {
            // let _queryConditionsAdvanced = querySolutionVo.queryConditionsAdvanced
            // let _advancedFlatConditions = this.getFlatConditions(_queryConditionsAdvanced)
            // _advancedFlatConditions.forEach(val => val.conditionid = val.conditionid *2)
            /** @type {?} */
            let _queryConditionsAdvanced = this.simplifyTreeData(cloneDeep(querySolutionVo.queryConditionsAdvanced));
            jobj["advancedQueryConditionsString"] = JSON.stringify(_queryConditionsAdvanced);
        }
        if (querySolutionVo.queryConditions && querySolutionVo.queryConditions.length > 0) {
            /** @type {?} */
            let jArray = [];
            /** @type {?} */
            let convertor = new QueryConditionConvert();
            querySolutionVo.queryConditions.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                jArray.push(convertor.convertJObject(element));
            }));
            //向服务端发送数据时，发送query condition list的json string
            jobj["queryConditionString"] = JSON.stringify(jArray);
        }
        return jobj;
    }
    /**
     * 反序列化(初始化)
     * @param {?} jobj 查询方案序列化后的Object
     * @return {?}
     */
    initFromJobject(jobj) {
        /** @type {?} */
        let querySolutionVo = new QuerySolutionVo();
        querySolutionVo.id = jobj["id"];
        querySolutionVo.code = jobj["code"];
        querySolutionVo.name = jobj["name"];
        querySolutionVo.belongId = jobj["belongId"];
        querySolutionVo.isSystem = jobj["isSystem"];
        querySolutionVo.isDefault = jobj["isDefault"];
        querySolutionVo.type = jobj.hasOwnProperty('type') ? jobj["type"] : '';
        querySolutionVo.extendId = jobj.hasOwnProperty('extendId') ? jobj["extendId"] : "";
        querySolutionVo.queryConditions = new Array();
        //高级模式新增mode,1为传统模式，2为高级模式
        querySolutionVo.mode = jobj["mode"] || 1;
        //服务器端返回的query condition list实际是 json string
        /** @type {?} */
        const queryConditionString = jobj["queryConditionString"];
        if (queryConditionString) {
            /** @type {?} */
            const conditionJarry = JSON.parse(queryConditionString);
            /** @type {?} */
            let convertor = new QueryConditionConvert();
            conditionJarry.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                querySolutionVo.queryConditions.push(convertor.initFromJobject(element));
            }));
        }
        querySolutionVo.queryConditionsAdvanced = jobj["advancedQueryConditionsString"] ? JSON.parse(jobj["advancedQueryConditionsString"]) : null;
        return querySolutionVo;
    }
    /**
     * 从缓存中取回的JSON数据需要转化
     * 从大写转换到小写条件
     * @param {?} jobj
     * @return {?}
     */
    formatFromJobject(jobj) {
        /** @type {?} */
        let queryConditions = new Array();
        /** @type {?} */
        let conditionJarry;
        if (typeof jobj == 'string') {
            conditionJarry = JSON.parse(jobj);
        }
        else {
            conditionJarry = jobj;
        }
        /** @type {?} */
        let convertor = new QueryConditionConvert();
        conditionJarry.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            queryConditions.push(convertor.initFromJobject(element));
        }));
        return queryConditions;
    }
    /**
     * 存入缓存中
     * 从大写转换到小写条件
     * @param {?} jobj
     * @return {?}
     */
    formatConvertJObject(jobj) {
        /** @type {?} */
        let queryConditions = [];
        /** @type {?} */
        let convertor = new QueryConditionConvert();
        jobj.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            queryConditions.push(convertor.convertJObject(element));
        }));
        return queryConditions;
    }
    /**
     * 将高级模式下树结构condition扁平化
     * @param {?} data
     * @return {?}
     */
    getFlatConditions(data) {
        if (data.children) {
            return [].concat(data.items, ...data.children.map((/**
             * @param {?} val
             * @return {?}
             */
            val => this.getFlatConditions(val))));
        }
        return [].concat(data.items);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    simplifyTreeData(data) {
        if (data.items && data.items.length) {
            /** @type {?} */
            let _items = data.items.map((/**
             * @param {?} val
             * @return {?}
             */
            val => { return { conditionid: val.conditionid }; }));
            data.items = _items;
        }
        if (data.children) {
            data.children.forEach((/**
             * @param {?} val
             * @return {?}
             */
            val => this.simplifyTreeData(val)));
        }
        return data;
    }
    /**
     * @param {?} originData
     * @param {?} conditionList
     * @return {?}
     */
    complicateTreeData(originData, conditionList) {
        /** @type {?} */
        let handleFunc = (/**
         * @param {?} treeData
         * @return {?}
         */
        (treeData) => {
            if (treeData.items && treeData.items.length) {
                treeData.items = treeData.items.map((/**
                 * @param {?} val
                 * @return {?}
                 */
                val => {
                    /** @type {?} */
                    let target = conditionList.find((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => item.conditionid === val.conditionid));
                    if (target) {
                        /** @type {?} */
                        let result = cloneDeep(target);
                        result.groupid = undefined;
                        result.Lbracket = undefined;
                        result.Rbracket = undefined;
                        return result;
                    }
                    return null;
                }));
            }
            if (treeData.children && treeData.children.length) {
                treeData.children.forEach((/**
                 * @param {?} val
                 * @return {?}
                 */
                val => {
                    handleFunc(val);
                }));
            }
            //仅供返回顶层数据，遍历过程使用不到
            return treeData;
        });
        return handleFunc(originData);
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/querycondition-advanced/querycondition-advanced.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class QueryconditionAdvancedComponent {
    /**
     * @param {?} notifySer
     * @param {?} msgSer
     * @param {?} localeService
     * @param {?} solutionService
     * @param {?} stateSer
     * @param {?} injector
     */
    constructor(notifySer, msgSer, localeService, solutionService, stateSer, injector) {
        this.notifySer = notifySer;
        this.msgSer = msgSer;
        this.localeService = localeService;
        this.solutionService = solutionService;
        this.stateSer = stateSer;
        this.injector = injector;
        this.dataSubscribe = null;
        this.dataListSubscribe = null;
        this._self = null;
        //子组件受否需要限定最大高度，默认true拖动高度后false
        this.isLimitHeight = true;
        this.conditionChange = new EventEmitter();
        // this.fieldConfig = this.stateSer.getFieldConfig()
        this.dataSubscribe = this.stateSer.queryconditionData$.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.queryconditionData = data;
            this.selectSolution.queryConditionsAdvanced = data;
        }));
        this.dataListSubscribe = this.stateSer.queryconditionListData$.subscribe((/**
         * @param {?} queryconditionListData
         * @return {?}
         */
        (queryconditionListData) => {
            this.conditionChange.emit(queryconditionListData);
        }));
        this._self = this.injector.get(ElementRef);
    }
    /**
     * @return {?}
     */
    get selectSolution() {
        return this._selectSolution;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set selectSolution(value) {
        if (value && this._selectSolution && value.id === this._selectSolution.id) {
            return;
        }
        this._selectSolution = value;
        this.queryconditionData = value.queryConditionsAdvanced;
        this.stateSer.setQueryconditionData(value.queryConditionsAdvanced);
    }
    /**
     * @return {?}
     */
    get fieldConfig() {
        return this._fieldConfig;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set fieldConfig(value) {
        //undo 范围型的组件暂不支持 
        //doing 将范围型组件重置为单值类型，方法，先反格式化，拿到基础值，遍历rangeList，将相关控件类型替换后再进行格式化
        //undo 范围型的组件暂不支持 
        //doing 将范围型组件重置为单值类型，方法，先反格式化，拿到基础值，遍历rangeList，将相关控件类型替换后再进行格式化
        /** @type {?} */
        let _value = cloneDeep(value);
        _value.forEach((/**
         * @param {?} val
         * @return {?}
         */
        val => {
            if (val.control.controltype === 'single-date') {
                val.control.isDynamicDate = false;
            }
            else if (val.control.controltype === 'radio') {
                val.control.horizontal = true;
            }
        }));
        //将单日期里面的支持动态日期属性群不改为false
        /** @type {?} */
        let modifyFieldConfig = this.rangeToSimpleControlType(_value);
        this._fieldConfig = this.solutionService.convertToQueryConditions(modifyFieldConfig);
        //波尔选择控件如果没有默认值，赋值位false，为什么不放在上面。因为不敢动之前的构造函数
        this._fieldConfig.forEach((/**
         * @param {?} val
         * @return {?}
         */
        val => {
            if (val.control.getControlType() === 8 && !val.value.getOriginalValue().length) {
                val.value.setOriginalValue([false]);
            }
        }));
        this.stateSer.changeFieldConfig(this._fieldConfig);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        //监听resize事件变化
        setTimeout((/**
         * @return {?}
         */
        () => { this.handleResizeChange(); }), 1000);
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.dataSubscribe.unsubscribe();
        this.dataListSubscribe.unsubscribe();
    }
    //最外层增加筛选条件
    /**
     * @return {?}
     */
    addItem() {
        if (!this.fieldConfig.length) {
            this.notifySer.error('未检测到存在筛选条件。');
        }
        else {
            /** @type {?} */
            let item = cloneDeep(this.fieldConfig[0]);
            this.stateSer.changeQueryconditionData({ item, path: [1] }, 'add', true);
            this.advancedContent.nativeElement.scrollTo({ top: this.advancedContent.nativeElement.scrollHeight });
        }
    }
    //增加分组
    /**
     * @return {?}
     */
    addGroup() {
        this.stateSer.addGroup();
    }
    //重置
    /**
     * @return {?}
     */
    reset() {
        this.msgSer.confirm(this.localeService.getValue('advancedMode.info.resetInfo')).subscribe((/**
         * @param {?} isConfirm
         * @return {?}
         */
        (isConfirm) => {
            if (isConfirm) {
                this.stateSer.reset();
                //触发回车，进行查询操作
                /** @type {?} */
                let event = document.createEvent('Event');
                event.initEvent('keydown', true, false);
                event = Object.assign(event, {
                    ctrlKey: false,
                    metaKey: false,
                    altKey: false,
                    which: 13,
                    keyCode: 13,
                    key: 'Enter',
                    code: 'Enter'
                });
                this._self.nativeElement.dispatchEvent(event);
            }
        }));
    }
    /**
     * @param {?} configs
     * @return {?}
     */
    rangeToSimpleControlType(configs) {
        /** @type {?} */
        let unformatConfigs = cloneDeep(configs);
        unformatConfigs.forEach((/**
         * @param {?} val
         * @return {?}
         */
        val => {
            if (val.control && val.control.controltype) {
                val.control.controltype = this.rangeToSimpleTypeModify(val.control.controltype);
            }
        }));
        return unformatConfigs;
    }
    //转化部分控件类型
    /**
     * @param {?} controlType
     * @return {?}
     */
    rangeToSimpleTypeModify(controlType) {
        /** @type {?} */
        let result = '';
        switch (controlType) {
            case 'date':
                result = 'single-date';
                break;
            case 'date-time':
                result = 'single-date-time';
                break;
            case 'month':
                result = 'single-month';
                break;
            case 'number':
                result = 'single-number';
                break;
            default:
                result = controlType;
        }
        return result;
    }
    /**
     * 监听筛选条件组件大小变化的方法，高度超过指定值时取消内部组件最大高度值限制
     * @return {?}
     */
    handleResizeChange() {
        //@ts-ignore
        /** @type {?} */
        const myObserver = new ResizeObserver((/**
         * @param {?} entries
         * @return {?}
         */
        entries => {
            entries.forEach((/**
             * @param {?} entry
             * @return {?}
             */
            entry => {
                if (entry.target.style.height < 431) {
                    this.isLimitHeight = true;
                }
                else {
                    this.isLimitHeight = false;
                }
            }));
        }));
        myObserver.observe(this.advancedElement.nativeElement);
    }
}
QueryconditionAdvancedComponent.decorators = [
    { type: Component, args: [{
                selector: 'querycondition-advanced',
                template: "<div class=\"querycondition-advanced\" #advancedElement>\r\n\r\n    <div class=\"querycondition-advanced-body\" #advancedContent [ngClass]=\"{'querycondition-advanced-body-maxh':isLimitHeight}\">\r\n        <querycondition-group [data]=\"queryconditionData\"></querycondition-group>\r\n\r\n    </div>\r\n    <div class=\"querycondition-advanced-bottom\">\r\n        <div class=\"add-condition-btn mb-1 mr-3\" (click)=\"addItem()\"><span class=\"f-icon f-icon-filter-add\"></span><span\r\n                class=\"ml-1\">{{'advancedMode.text.addCondition' | locale}}</span></div>\r\n        <div class=\"add-condition-btn mb-1\" (click)=\"addGroup()\"><span\r\n                class=\"f-icon f-icon-filter-grouping\"></span><span class=\"ml-1\">{{'advancedMode.text.addConditionGroup'\r\n                | locale}}</span></div>\r\n        <div *ngIf=\"queryconditionData && (queryconditionData.items.length || queryconditionData.children.length)\" class=\"querycondition-advanced-reset add-condition-btn\" (click)=\"reset()\">{{'advancedMode.text.reset' |\r\n            locale}}</div>\r\n    </div>\r\n\r\n</div>",
                providers: [SolutionService],
                styles: [".querycondition-advanced{width:100%;display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;overflow-y:hidden;resize:vertical;min-height:50px}.querycondition-advanced-body{height:calc(100% - 32px);overflow-y:auto}.querycondition-advanced-body-maxh{max-height:380px}.querycondition-advanced-bottom{position:relative;margin:14px 0 14px 6px}.querycondition-advanced-reset{position:absolute;right:32px;bottom:4px}.add-group-btn{width:100%;background:rgb(239,245,255,.65);border:1px solid rgba(219,233,255,1);border-radius:6px;color:#2a87ff;font-size:13px}.add-condition-btn{font-size:13px;display:inline-block}.add-condition-btn:hover{cursor:pointer}.add-condition-btn .f-icon{vertical-align:text-bottom;position:relative;width:16px;height:16px;border-radius:50%}.add-condition-btn .f-icon-filter-add::before{position:relative;bottom:3px;left:2px;font-size:12px}.add-condition-btn .f-icon-filter-grouping::before{position:relative;bottom:3px;left:1px;font-size:12px}"]
            }] }
];
/** @nocollapse */
QueryconditionAdvancedComponent.ctorParameters = () => [
    { type: NotifyService },
    { type: MessagerService },
    { type: LocaleService },
    { type: SolutionService },
    { type: StateService },
    { type: Injector }
];
QueryconditionAdvancedComponent.propDecorators = {
    selectSolution: [{ type: Input }],
    fieldConfig: [{ type: Input }],
    conditionChange: [{ type: Output, args: ['conditionChange',] }],
    advancedContent: [{ type: ViewChild, args: ['advancedContent',] }],
    advancedElement: [{ type: ViewChild, args: ['advancedElement',] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/querycondition-advanced/config/compare-type.config.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const CompareTypeName = [
    '等于',
    '不等于',
    '大于',
    '大于等于',
    '小于',
    '小于等于',
    '包含',
    '开始是',
    '结束是',
];
/** @type {?} */
const CompareTypeInControl = [
    // Text = 0,
    [0, 6, 7, 8],
    // SingleDate = 1,
    [0, 2, 3, 4, 5],
    // SmartHelp = 2,
    [0, 1],
    // DropDownList = 3,
    [0, 1],
    // DateRange = 4,
    [],
    // NumberRange = 5,
    [],
    // SingleNumber = 6,
    [0, 1, 2, 3, 4, 5],
    // SingleYear = 7,
    [0, 2, 3, 4, 5],
    // BoolCheck = 8,
    [0],
    // DateTimeRange = 9,
    [],
    // SingleMonth = 10,
    [0, 2, 3, 4, 5],
    // MonthRange = 11,
    [],
    // SingleDateTime = 12,
    [0, 2, 3, 4, 5],
    // ComboLookUp = 13,
    [0, 1],
    // Radio = 14,
    [0],
    // InputGroup = 15
    [0, 6, 7, 8],
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/querycondition-advanced/querycondition-group/querycondition-group.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class QueryconditionGroupComponent {
    /**
     * @param {?} stateSer
     * @param {?} cd
     * @param {?} msgSer
     * @param {?} localeService
     * @param {?} injector
     */
    constructor(stateSer, cd, msgSer, localeService, injector) {
        this.stateSer = stateSer;
        this.cd = cd;
        this.msgSer = msgSer;
        this.localeService = localeService;
        this.injector = injector;
        this.COMPARE_TYPE_NAME = CompareTypeName;
        this.COMPARE_TYPE_NAME_MULTI = CompareTypeName; //没办法，要求类似于帮助，下拉选择，一个叫等于，两个叫包含，但是逻辑还要一样
        //没办法，要求类似于帮助，下拉选择，一个叫等于，两个叫包含，但是逻辑还要一样
        this.COMPARE_TYPE_IN_CONTROL = CompareTypeInControl;
        this.fieldConfig = [];
        this.checklist = [];
        this.deleteGroupText = this.localeService.getValue('advancedMode.info.deleteGroupTooltip');
        this.fieldConfigSubscribe = null;
        this.checkedListSubscribe = null;
        this.forceState = [];
        this._self = null;
        this.activeConditionType = null;
        this.overLayService = null;
        this.fieldConfig = this.stateSer.getFieldConfig();
        this.fieldConfigSubscribe = this.stateSer.fieldConfig$.subscribe((/**
         * @param {?} config
         * @return {?}
         */
        (config) => {
            this.fieldConfig = config;
        }));
        this.checkedListSubscribe = this.stateSer.checkedList$.subscribe((/**
         * @param {?} checklist
         * @return {?}
         */
        (checklist) => {
            /** @type {?} */
            let _path = this.data.path.join('-');
            if (checklist[_path]) {
                this.checklist = checklist[_path];
            }
            else {
                this.checklist = [];
            }
        }));
        this.COMPARE_TYPE_NAME = [
            this.localeService.getValue('advancedMode.compareType.Equal'),
            this.localeService.getValue('advancedMode.compareType.NotEqual'),
            this.localeService.getValue('advancedMode.compareType.Greater'),
            this.localeService.getValue('advancedMode.compareType.GreaterOrEqual'),
            this.localeService.getValue('advancedMode.compareType.Less'),
            this.localeService.getValue('advancedMode.compareType.LessOrEqual'),
            this.localeService.getValue('advancedMode.compareType.Like'),
            this.localeService.getValue('advancedMode.compareType.LikeStartWith'),
            this.localeService.getValue('advancedMode.compareType.LikeEndWith')
        ];
        this.COMPARE_TYPE_NAME_MULTI = [
            this.localeService.getValue('advancedMode.compareType.Like'),
            this.localeService.getValue('advancedMode.compareType.NotLike'),
            this.localeService.getValue('advancedMode.compareType.Greater'),
            this.localeService.getValue('advancedMode.compareType.GreaterOrEqual'),
            this.localeService.getValue('advancedMode.compareType.Less'),
            this.localeService.getValue('advancedMode.compareType.LessOrEqual'),
            this.localeService.getValue('advancedMode.compareType.Like'),
            this.localeService.getValue('advancedMode.compareType.LikeStartWith'),
            this.localeService.getValue('advancedMode.compareType.LikeEndWith')
        ];
        this.overLayService = new OverLayHiddenService();
        this._self = this.injector.get(ElementRef);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.fieldConfigSubscribe.unsubscribe();
        this.checkedListSubscribe.unsubscribe();
    }
    /**
     * 下拉面板展开关闭事件
     * @param {?} event 下拉展开tue， 关闭false
     * @param {?=} dropdownMenu 点击的dropdown序号
     * @return {?}
     */
    dpStateHandler(event, dropdownMenu) {
        //解决鼠标在dropdown上滚动补关闭dropdown的问题
        if (event && typeof (dropdownMenu) === 'number') {
            this.activeConditionType = dropdownMenu.toString();
            this.forceState = [];
            this.overLayService.registerMouseEvent(this._self.nativeElement, (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                if (!this.activeConditionType || !(e.type === 'wheel' || e.type === 'mousewheel'))
                    return;
                /** @type {?} */
                let tar = (/** @type {?} */ (e.target));
                /** @type {?} */
                let classList = Array.from(tar.classList || []);
                if (!classList.includes('dropdown-item-noopen') && this.activeConditionType) {
                    this.activeConditionType = null;
                    this.forceState = [false];
                    this.overLayService.destory(this._self.nativeElement);
                }
            }));
        }
        else {
            this.overLayService.destory(this._self.nativeElement);
        }
    }
    /**
     * 修改筛选条件控件类型
     * @param {?} item 筛选条件对象
     * @param {?} fieldItem 选中的控件类型
     * @return {?}
     */
    changeConditionType(item, fieldItem) {
        /** @type {?} */
        let conditionid = item.conditionid;
        /** @type {?} */
        let _fieldItem = cloneDeep(fieldItem);
        item = _fieldItem;
        item.conditionid = conditionid;
        item.compareType = 0;
        this.stateSer.changeQueryconditionData({ item, path: this.data.path }, 'modify');
    }
    /**
     * 修改筛选条件比较符
     * @param {?} item 筛选条件对象
     * @param {?} compareTypeIndex 筛选条件比较符
     * @return {?}
     */
    changeCompareType(item, compareTypeIndex) {
        item.compareType = compareTypeIndex;
        this.stateSer.changeQueryconditionData({ item, path: this.data.path }, 'modify');
    }
    /**
     * 添加筛选条件
     * @param {?} addPositionItem 添加的位置
     * @return {?}
     */
    addItem(addPositionItem) {
        /** @type {?} */
        let item = cloneDeep(this.fieldConfig[0]);
        this.stateSer.changeQueryconditionData({ item, path: this.data.path, addPositionItem: addPositionItem }, 'add');
    }
    /**
     * 删除筛选条件
     * @param {?} item 删除项
     * @return {?}
     */
    deleteItem(item) {
        this.stateSer.changeQueryconditionData({ deleteItems: [item], path: this.data.path }, 'delete-item');
    }
    /**
     * 修改筛选条件组关联关系
     * @return {?}
     */
    changeRelation() {
        /** @type {?} */
        let relation = this.data.relation === 1 ? 2 : 1;
        this.stateSer.changeGroupData({ relation, path: this.data.path }, 'modify-relation');
    }
    /**
     * 选中筛选条件
     * @param {?} item 选中项
     * @return {?}
     */
    handleCheckItem(item) {
        this.stateSer.changeCheckedList(this.data.path, item.conditionid);
    }
    /**
     * 取消筛选组
     * @return {?}
     */
    deleteGroup() {
        this.msgSer.confirm(this.localeService.getValue('advancedMode.info.deleteGroup')).subscribe((/**
         * @param {?} isConfirm
         * @return {?}
         */
        (isConfirm) => {
            if (isConfirm) {
                this.stateSer.deleteGroup(this.data.groupid, this.data.path);
            }
        }));
    }
}
QueryconditionGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'querycondition-group',
                template: "<div class=\"querycondition-advanced-content\">\r\n\r\n\r\n  <div>\r\n    <div class=\"querycondition-advanced-item\" *ngFor=\"let item of data.items;let i = index\">\r\n      <div class=\"querycondition-advanced-item-type mr-3\" fDropdown (dpChangeEvent)=\"dpStateHandler($event, i)\" [forceState]=\"forceState\" [autoRectify]=\"true\">\r\n        <button class=\"btn btn-secondary dropdown-toggle\" fDropdownToggle type=\"button\" [title]=\"item.fieldName\">\r\n          {{item.fieldName}}\r\n          <span class=\"f-icon f-icon-arrow-chevron-down\"></span>\r\n        </button>\r\n        <div class=\"dropdown-menu\" fDropdownMenu #dropdownMenu>\r\n          <li class=\"dropdown-item dropdown-item-noopen\" *ngFor=\"let fieldItem of fieldConfig;let i = index\"\r\n            (click)=\"changeConditionType(item, fieldItem)\"><span class=\"dropdown-item-noopen\">{{fieldItem.fieldName}}</span></li>\r\n\r\n        </div>\r\n      </div>\r\n      <div class=\"querycondition-advanced-item-compare mr-3\" fDropdown (dpChangeEvent)=\"dpStateHandler($event, i)\" [forceState]=\"forceState\" *ngIf=\"(item.control.singleSelect === undefined &&  item.control.multiSelect === undefined) || item.control.singleSelect === true || item.control.multiSelect === false\">\r\n        <button class=\"btn btn-secondary dropdown-toggle\" fDropdownToggle type=\"button\">\r\n          {{COMPARE_TYPE_NAME[item.compareType]}}\r\n          <span class=\"f-icon f-icon-arrow-chevron-down\"></span>\r\n        </button>\r\n        <div class=\"dropdown-menu\" fDropdownMenu>\r\n          <ng-container *ngFor=\"let label of COMPARE_TYPE_NAME;let i = index\">\r\n            <li class=\"dropdown-item dropdown-item-noopen\" [hidden]=\"!COMPARE_TYPE_IN_CONTROL[item.control.getControlType()].includes(i)\"\r\n            (click)=\"changeCompareType(item, i)\"><span  class=\"dropdown-item-noopen\">{{label}}</span></li>\r\n          </ng-container>\r\n          \r\n\r\n        </div>\r\n      </div>\r\n      <div class=\"querycondition-advanced-item-compare mr-3\" fDropdown (dpChangeEvent)=\"dpStateHandler($event)\" [forceState]=\"forceState\" *ngIf=\" item.control.singleSelect === false || item.control.multiSelect === true\">\r\n        <button class=\"btn btn-secondary dropdown-toggle\" fDropdownToggle type=\"button\">\r\n          {{COMPARE_TYPE_NAME_MULTI[item.compareType]}}\r\n          <span class=\"f-icon f-icon-arrow-chevron-down\"></span>\r\n        </button>\r\n        <div class=\"dropdown-menu\" fDropdownMenu>\r\n          <ng-container *ngFor=\"let label of COMPARE_TYPE_NAME_MULTI;let i = index\">\r\n            <li class=\"dropdown-item  dropdown-item-noopen\" [hidden]=\"!COMPARE_TYPE_IN_CONTROL[item.control.getControlType()].includes(i)\"\r\n            (click)=\"changeCompareType(item, i)\" class=\"dropdown-item-noopen\"><span >{{label}}</span></li>\r\n          </ng-container>\r\n          \r\n\r\n        </div>\r\n      </div>\r\n      <!-- <div class=\"querycondition-advanced-item-control mr-3\">{{data.path.join('-') + ' , ' + data.groupid + ' , ' + item.conditionid}}</div> -->\r\n      <div class=\"querycondition-advanced-item-control mr-3\">\r\n        <querycondition-item [item]=\"item\" ></querycondition-item>\r\n      </div>\r\n      <div class=\"querycondition-advanced-item-extend\">\r\n\r\n        <span class=\"f-icon f-icon-plus-sm mr-2\" (click)=\"addItem(item)\"></span>\r\n        <span class=\"f-icon f-icon-minus-sm\" (click)=\"deleteItem(item)\"></span>\r\n      </div>\r\n      <div class=\"custom-control custom-checkbox\">\r\n        <input #input class=\"custom-control-input\" type=\"checkbox\" \r\n          [checked]=\"checklist.includes(item.conditionid)\" />\r\n        <label class=\"custom-control-label\"\r\n          (click)=\"handleCheckItem(item)\"></label>\r\n      </div>\r\n\r\n\r\n\r\n    </div>\r\n    <querycondition-group [data]=\"children\" *ngFor=\"let children of data.children\"></querycondition-group>\r\n  </div>\r\n\r\n  <div class=\"querycondition-advanced-relation\"  *ngIf=\"(data.items.length + data.children.length) > 0\">\r\n    <span *ngIf=\"data.groupid !== 1\" class=\"querycondition-advanced-relation-close f-icon-filter-cancel btn-link\" (click)=\"deleteGroup()\" farrisTooltip [content]=\"deleteGroupText\"></span>\r\n    <span class=\"querycondition-advanced-relation-text btn-link\" (click)=\"changeRelation()\" >{{(data.relation === 1 ? 'advancedMode.text.and' : 'advancedMode.text.or') | locale}}</span>\r\n    <!-- <span (click)=\"deleteGroup()\">\u53D6\u6D88</span> -->\r\n  </div>\r\n\r\n</div>",
                styles: [".querycondition-advanced-content{display:-webkit-box;display:flex}.querycondition-advanced-item{padding:4px;display:-webkit-box;display:flex;height:40px}.querycondition-advanced-item-type button{text-align:left;width:240px;position:relative;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.querycondition-advanced-item-compare button{text-align:left;width:134px;position:relative}.querycondition-advanced-item-compare .f-icon-arrow-chevron-down::before,.querycondition-advanced-item-type .f-icon-arrow-chevron-down::before{position:absolute;right:8px;bottom:4px}.querycondition-advanced-content .dropdown-toggle::after{display:none}.querycondition-advanced-item-control{line-height:26px;width:240px}.querycondition-advanced-item-extend .f-icon{vertical-align:text-bottom}.querycondition-advanced-item-extend .f-icon:hover{cursor:pointer}.querycondition-advanced-item-extend .f-icon-plus-sm::before{font-size:14px;color:#2a87ff;background-color:#e8f2ff;border-radius:50%;position:relative;top:1px}.querycondition-advanced-item-extend .f-icon-minus-sm::before{font-size:14px;color:#f46160;background-color:#fadcdd;border-radius:50%;position:relative;top:1px}.querycondition-advanced-relation{margin:2px 0 2px 12px;border-left:1px solid rgba(222,227,240,1);position:relative;display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;padding-left:12px;font-size:13px;color:#2a87ff;text-align:center;cursor:pointer}.querycondition-advanced-relation:hover .querycondition-advanced-relation-close{display:inline}.querycondition-advanced-relation-close{position:absolute;top:-4px;display:none}.querycondition-advanced-relation:hover .querycondition-advanced-relation-text{text-decoration:underline}.querycondition-advanced-item .custom-control-label:before{position:relative;top:2px}.querycondition-advanced-relation button{width:20px}.dropdown-menu{-webkit-writing-mode:horizontal-tb;-ms-writing-mode:lr-tb;writing-mode:horizontal-tb;overflow-y:overlay;max-height:45%}"]
            }] }
];
/** @nocollapse */
QueryconditionGroupComponent.ctorParameters = () => [
    { type: StateService },
    { type: ChangeDetectorRef },
    { type: MessagerService },
    { type: LocaleService },
    { type: Injector }
];
QueryconditionGroupComponent.propDecorators = {
    data: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/querycondition-advanced/querycondition-item/querycondition-item.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class QueryconditionItemComponent {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        this.controlType = ControlType;
        this.fieldCodeOfClearFields = [];
        this.idService = this.injector.get(IdService);
        this.stateSer = this.injector.get(StateService);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    conditionChange() {
        this.stateSer.updateQueryConditionListData();
    }
    /**
     * @param {?} a
     * @return {?}
     */
    getStyle(a) {
        return '';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    buildSmartHelpKey(value) {
        /** @type {?} */
        let prefix = '';
        if (location.hash) {
            /** @type {?} */
            const pathArr = location.hash.split('?');
            prefix = pathArr ? pathArr[0] : '';
        }
        else {
            /** @type {?} */
            const pathArr = location.pathname.split('/');
            prefix = pathArr ? pathArr[pathArr.length - 1] : '';
        }
        return this.idService.encrypt(prefix + '/querysolution/' + value);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    clearFieldsChange(event) {
    }
}
QueryconditionItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'querycondition-item',
                template: "<app-solution-input  \r\n    [ngClass]=\"getStyle(item)\"\r\n    class=\"\"\r\n    (conditionChange)=\"conditionChange()\"\r\n    *ngIf=\"item.control.getControlType() == controlType.Text && item.visible\"\r\n    [(item)]=\"item\"\r\n    [hideLabel]=\"true\">\r\n</app-solution-input>\r\n\r\n<app-solution-inputgroup\r\n    [ngClass]=\"getStyle(item)\"\r\n    class=\"\"\r\n    (conditionChange)=\"conditionChange()\"\r\n    *ngIf=\"item.control.getControlType() == controlType.InputGroup && item.visible\"\r\n    [(item)]=\"item\"\r\n    [hideLabel]=\"true\">\r\n</app-solution-inputgroup>\r\n\r\n<app-solution-dropdownlist\r\n    [ngClass]=\"getStyle(item)\"\r\n    class=\"\"\r\n    [changeFields]=\"fieldCodeOfClearFields\"\r\n    (conditionChange)=\"conditionChange()\"\r\n    *ngIf=\"item.control.getControlType() == controlType.DropDownList && item.visible\"\r\n    [(item)]=\"item\"\r\n    [hideLabel]=\"true\">\r\n</app-solution-dropdownlist>\r\n\r\n<app-solution-smarthelp\r\n    [ngClass]=\"getStyle(item)\"\r\n    class=\"\"\r\n    [changeFields]=\"fieldCodeOfClearFields\"\r\n    (conditionChange)=\"conditionChange()\"\r\n    (clearFieldsChange)=\"clearFieldsChange($event)\"\r\n    *ngIf=\"item.control.getControlType() == controlType.SmartHelp && item.visible\"\r\n    [(item)]=\"item\"\r\n    [instanceId]=\"buildSmartHelpKey(item.fieldCode)\"\r\n    [hideLabel]=\"true\">\r\n</app-solution-smarthelp>\r\n\r\n<app-solution-single-number\r\n    [ngClass]=\"getStyle(item)\"\r\n    class=\"\"\r\n    [changeFields]=\"fieldCodeOfClearFields\"\r\n    (conditionChange)=\"conditionChange()\"\r\n    *ngIf=\"item.control.getControlType() == controlType.SingleNumber && item.visible\"\r\n    [(item)]=\"item\"\r\n    [hideLabel]=\"true\">\r\n</app-solution-single-number>\r\n\r\n\r\n\r\n<app-solution-datepicker\r\n    [ngClass]=\"getStyle(item)\"\r\n    class=\"\"\r\n    [changeFields]=\"fieldCodeOfClearFields\"\r\n    (conditionChange)=\"conditionChange()\"\r\n    *ngIf=\"item.control.getControlType() == controlType.SingleDate && item.visible\"\r\n    [(item)]=\"item\"\r\n    [controlType]=\"item.control.getControlType()\"\r\n    [hideLabel]=\"true\">\r\n</app-solution-datepicker>\r\n\r\n<app-solution-datepicker\r\n    [ngClass]=\"getStyle(item)\"\r\n    class=\"\"\r\n    [changeFields]=\"fieldCodeOfClearFields\"\r\n    (conditionChange)=\"conditionChange()\"\r\n    *ngIf=\"item.control.getControlType() == controlType.DateRange && item.visible\"\r\n    [(item)]=\"item\"\r\n    [controlType]=\"item.control.getControlType()\"\r\n    [hideLabel]=\"true\">\r\n</app-solution-datepicker>\r\n\r\n<app-solution-datepicker\r\n    [ngClass]=\"getStyle(item)\"\r\n    class=\"\"\r\n    [changeFields]=\"fieldCodeOfClearFields\"\r\n    (conditionChange)=\"conditionChange()\"\r\n    *ngIf=\"item.control.getControlType() == controlType.SingleYear && item.visible\"\r\n    [(item)]=\"item\"\r\n    [controlType]=\"item.control.getControlType()\"\r\n    [hideLabel]=\"true\">\r\n</app-solution-datepicker>\r\n\r\n<app-solution-datepicker\r\n    [ngClass]=\"getStyle(item)\"\r\n    class=\"\"\r\n    [changeFields]=\"fieldCodeOfClearFields\"\r\n    (conditionChange)=\"conditionChange()\"\r\n    *ngIf=\"item.control.getControlType() == controlType.SingleMonth && item.visible\"\r\n    [(item)]=\"item\"\r\n    [controlType]=\"item.control.getControlType()\"\r\n    [hideLabel]=\"true\">\r\n</app-solution-datepicker>\r\n\r\n<app-solution-datepicker\r\n    [ngClass]=\"getStyle(item)\"\r\n    class=\"\"\r\n    [changeFields]=\"fieldCodeOfClearFields\"\r\n    (conditionChange)=\"conditionChange()\"\r\n    *ngIf=\"item.control.getControlType() == controlType.MonthRange && item.visible\"\r\n    [(item)]=\"item\"\r\n    [controlType]=\"item.control.getControlType()\"\r\n    [hideLabel]=\"true\">\r\n</app-solution-datepicker>\r\n\r\n<app-solution-datepicker\r\n    [ngClass]=\"getStyle(item)\"\r\n    class=\"\"\r\n    [changeFields]=\"fieldCodeOfClearFields\"\r\n    (conditionChange)=\"conditionChange()\"\r\n    *ngIf=\"item.control.getControlType() == controlType.SingleDateTime && item.visible\"\r\n    [(item)]=\"item\"\r\n    [controlType]=\"item.control.getControlType()\"\r\n    [hideLabel]=\"true\">\r\n</app-solution-datepicker>\r\n\r\n<app-solution-datepicker\r\n    [ngClass]=\"getStyle(item)\"\r\n    class=\"\"\r\n    [changeFields]=\"fieldCodeOfClearFields\"\r\n    (conditionChange)=\"conditionChange()\"\r\n    *ngIf=\"item.control.getControlType() == controlType.DateTimeRange && item.visible\"\r\n    [(item)]=\"item\"\r\n    [controlType]=\"item.control.getControlType()\"\r\n    [hideLabel]=\"true\">\r\n</app-solution-datepicker>\r\n\r\n<app-solution-combolookup\r\n    [ngClass]=\"getStyle(item)\"\r\n    class=\"\"\r\n    [changeFields]=\"fieldCodeOfClearFields\"\r\n    (conditionChange)=\"conditionChange()\"\r\n    *ngIf=\"item.control.getControlType() == controlType.ComboLookUp && item.visible\"\r\n    [(item)]=\"item\"\r\n    [hideLabel]=\"true\">\r\n</app-solution-combolookup>\r\n\r\n<app-solution-checkbox\r\n    [ngClass]=\"getStyle(item)\"\r\n    [changeFields]=\"fieldCodeOfClearFields\"\r\n    (conditionChange)=\"conditionChange()\"\r\n    *ngIf=\"item.control.getControlType() == controlType.BoolCheck && item.visible\"\r\n    [(item)]=\"item\"\r\n    [hideLabel]=\"true\">\r\n</app-solution-checkbox>\r\n\r\n<app-solution-radio\r\n    [ngClass]=\"getStyle(item)\"\r\n    class=\"\"\r\n    [changeFields]=\"fieldCodeOfClearFields\"\r\n    (conditionChange)=\"conditionChange()\"\r\n    *ngIf=\"item.control.getControlType() == controlType.Radio && item.visible\"\r\n    [(item)]=\"item\"\r\n    [hideLabel]=\"true\">\r\n</app-solution-radio>",
                styles: [""]
            }] }
];
/** @nocollapse */
QueryconditionItemComponent.ctorParameters = () => [
    { type: Injector }
];
QueryconditionItemComponent.propDecorators = {
    item: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/querycondition.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class QueryConditionModule {
}
QueryConditionModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule, ReactiveFormsModule,
                    FarrisDialogModule,
                    LayoutModule,
                    LookupModule,
                    // FarrisInputModule,
                    MultiSelectModule,
                    FieldGroupModule,
                    InputGroupModule,
                    FDropdownDirectiveTypeModule,
                    LoadingModule.forRoot(),
                    NotifyModule.forRoot(),
                    FarrisDatePickerModule,
                    LocaleModule.forRoot(),
                    ComboListModule,
                    NumberSpinnerModule,
                    FarrisFormsModule,
                    ComboLookupModule,
                    FarrisTooltipModule
                ],
                declarations: [
                    QueryConditionComponent,
                    ConfigDialogComponent,
                    DatePickerComponent,
                    NumberRangeComponent,
                    SolutionSmartHelpComponent,
                    InputComponent,
                    DropDownListComponent,
                    SingleNumberComponent,
                    CheckBoxComponent,
                    ComboLookUpComponent,
                    RadioComponent,
                    InputGroupComponent,
                    ClearFieldsDirective,
                    LabelTextMultiDirective,
                    //高级模式组件
                    QueryconditionAdvancedComponent,
                    QueryconditionGroupComponent,
                    QueryconditionItemComponent
                ],
                entryComponents: [
                    ConfigDialogComponent,
                ],
                providers: [
                    SolutionService,
                    NotifyService,
                    ConvertorService,
                    //高级模式服务
                    StateService
                ],
                bootstrap: [QueryConditionComponent],
                exports: [
                    QueryConditionComponent,
                    ConfigDialogComponent,
                    DatePickerComponent,
                    NumberRangeComponent,
                    SolutionSmartHelpComponent,
                    InputComponent,
                    DropDownListComponent,
                    SingleNumberComponent,
                    CheckBoxComponent,
                    ComboLookUpComponent,
                    RadioComponent,
                    InputGroupComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/querysolutionextendvo.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class QuerySolutionExtendVo {
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/comparetype.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const CompareType$1 = {
    /**
     * 等于
     */
    // Equal=1,
    Equal: 0,
    /**
     * 大于
     */
    GreaterThan: 2,
    /**
     * 大于或等于
     */
    GreaterThanOrEqual: 3,
    /**
     * 小于
     */
    LessThan: 4,
    /**
     * 小于或等于
     */
    LessThanOrEqual: 5,
    /**
     * 之间
     */
    // BetWeen=6
    Like: 6,
};
CompareType$1[CompareType$1.Equal] = 'Equal';
CompareType$1[CompareType$1.GreaterThan] = 'GreaterThan';
CompareType$1[CompareType$1.GreaterThanOrEqual] = 'GreaterThanOrEqual';
CompareType$1[CompareType$1.LessThan] = 'LessThan';
CompareType$1[CompareType$1.LessThanOrEqual] = 'LessThanOrEqual';
CompareType$1[CompareType$1.Like] = 'Like';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/fieldconfig/fieldconfig.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 字段配置
 */
class FieldConfig {
    /**
     * @param {?} qc
     */
    constructor(qc) {
        this.visible = true;
        this.id = qc.id;
        this.labelCode = qc.fieldCode;
        this.name = qc.fieldName;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: farris-component-querycondition.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { QueryConditionModule, QueryConditionComponent, QuerySolutionVo, QuerySolutionExtendVo, QueryCondition, CompareType$1 as CompareType, ValueType, FieldConfig, ControlType, DateRangeControl, DropDownListControl, EnumBoolValue, EnumType, EnumIntegerValue, EnumStringValue, NumberRangeControl, SmartHelpContol, TextControl, InputGroupControl, DateRangeValue, DropDownListValue, NumberRangeValue, SmartHelpValue, TextValue, InputGroupValue, SolutionService, QuerySolutionVoConvertor, ConvertorService, SingleDateValue, SingleNumberValue, SingleDateControl, SingleNumberControl, SingleYearValue, SingleYearControl, CheckBoxControl, CheckBoxValue, SingleMonthControl, SingleMonthValue, MonthRangeControl, MonthRangeValue, SingleDateTimeControl, SingleDateTimeValue, ComboLookUpControl, ComboLookUpValue, RadioControl, RadioValue, StateService, CheckBoxComponent as ɵi, ComboLookUpComponent as ɵj, DatePickerComponent as ɵc, DropDownListComponent as ɵg, InputComponent as ɵf, InputGroupComponent as ɵl, SingleNumberComponent as ɵh, NumberRangeComponent as ɵd, RadioComponent as ɵk, SolutionSmartHelpComponent as ɵe, ClearFieldsDirective as ɵm, LabelTextMultiDirective as ɵn, ConfigDialogComponent as ɵb, QueryconditionAdvancedComponent as ɵo, QueryconditionGroupComponent as ɵp, QueryconditionItemComponent as ɵq, CommunicationService as ɵa };

//# sourceMappingURL=farris-component-querycondition.js.map