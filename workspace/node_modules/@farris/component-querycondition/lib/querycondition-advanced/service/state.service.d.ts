import { QueryCondition } from '../../entity/QueryCondition';
import { Subject } from 'rxjs';
import { QueryconditionAdvancedData } from '../type/type';
import { NotifyService } from '@farris/ui-notify';
import { LocaleService } from '@farris/ui-locale';
export declare class StateService {
    private notifySer;
    private localeService;
    fieldConfig: Array<QueryCondition>;
    fieldConfig$: Subject<{}>;
    queryconditionData: QueryconditionAdvancedData;
    queryconditionData$: Subject<{}>;
    queryconditionListData: Array<QueryCondition>;
    queryconditionListData$: Subject<{}>;
    checkedList: {};
    checkedList$: Subject<{}>;
    constructor(notifySer: NotifyService, localeService: LocaleService);
    /**
     * 重置筛选条件
     */
    reset(): void;
    /**
     *
     * @param data
     * @param type
     * @param isEmit 默认要发送emit，生成分组触发时不需要emit，因为生成分组方法本身会触发
     */
    changeQueryconditionData(data: any, type: any, isEmit?: boolean): void;
    /**
     * 修改分组数据
     * @param data group数据
     * @param type 修改类型
     */
    changeGroupData(data: any, type: any): void;
    /**
     * 生成新的分组
     * @desc
     *
     */
    addGroup(): void;
    /**
     *
     * @param groupid
     * @param path
     * @param isEmit 是否需要触发emit操作，对于treeshake方法，无需触发，默认为true
     * @param changeRootCompareType 属于treeshake过程中的取消分组，涉及到根节点且根节点只有该children的时候，需要修改根节点比较符，为true时修改
     */
    deleteGroup(groupid: any, path: any, isEmit?: boolean, changeRootCompareType?: boolean): void;
    generateGroup(parentTarget: any, items: any, children: any): void;
    setQueryconditionData(data: any): void;
    getQueryconditionData(): QueryconditionAdvancedData;
    changeFieldConfig(config: any): void;
    getFieldConfig(): QueryCondition[];
    /**
     * 修改已选择的筛选条件
     * @param path number[] 节点位置
     * @param item 筛选条件
     */
    changeCheckedList(path: any, item: any): void;
    /**
     * 清除已选择的筛选条件
     */
    clearCheckedList(): void;
    /**
     *
     * @param data 需要查询的节点位置
     * @returns 该节点下所有的筛选条件信息
     */
    getFlatConditions(data: any): any[];
    /**
     *
     * @param data 需要查询的节点
     * @returns 该节点下所有的组织信息
     */
    getFlatChildren(data: any): any[];
    /**
     * @desc 获取数据中已有的最大筛选条件编号
     * @returns 当前数据中已有的最大筛选条件编号
     */
    getMaxConditionid(): number;
    /**
     * @desc 获取数据中已有的最大组织编号
     * @returns 当前数据中已有的最大组织编号
     */
    getMaxGroupid(): number;
    /**
     * 将querycondition转化为Array的格式并交付后端解析
     * @param data  解析的数据
     * @param parentRelation 父节点的关联关系
     * @returns
     */
    objToArrayData(data: any, parentRelation?: any): any[];
    updateQueryConditionListData(): void;
    /**
     * 执行完增删操作后，存在部分group中无数据的情况，需要删除掉该部分无用数据
     * @param data
     */
    treeshake(data: any, parentData?: any): void;
}
