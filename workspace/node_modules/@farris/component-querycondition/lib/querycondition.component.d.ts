import { ComponentFactoryResolver, Injector, EventEmitter, OnInit, OnDestroy, AfterViewChecked, AfterViewInit } from '@angular/core';
import { QueryCondition } from './entity/querycondition';
import { CommunicationService } from './service/communicationservice';
import { ConvertorService } from './service/convertorservice';
import { ControlType } from './entity/controltype';
import { ConfigDialogComponent } from './fieldconfigdialog/configdialog.component';
import { BsModalService } from '@farris/ui-modal';
import { SolutionService } from './service/solution.service';
import { LocaleService } from '@farris/ui-locale';
import { Subject } from 'rxjs';
import { QuerySolutionVo } from './entity/querysolutionvo';
export declare class QueryConditionComponent implements OnInit, OnDestroy, AfterViewChecked, AfterViewInit {
    private communicationService;
    private convertorService;
    private resolver;
    private injector;
    private modalService;
    private localeService;
    _selectSolution: QuerySolutionVo;
    selectSolution: QuerySolutionVo;
    fieldConfigs: Array<QueryCondition>;
    unformatFieldConfigs: Array<any>;
    private _resetFieldConfigs;
    resetFieldConfigs: Array<any>;
    isControlInline: boolean;
    private _selectedFieldConditions;
    selectedFieldConditions: Array<QueryCondition>;
    showCompleteLabel: boolean;
    isDisabled: boolean;
    fieldConditionsChange: EventEmitter<any>;
    configDialog: ConfigDialogComponent;
    openAdvanced: boolean;
    localeIds: {
        'en': string;
        'zh-CHS': string;
    };
    currentLocale: string;
    solutionService: SolutionService;
    controlType: typeof ControlType;
    labelFormat: string;
    showButton: boolean;
    fieldCodeOfClearFields: Array<string>;
    canClearRelatedFields: boolean;
    destroy$: Subject<any>;
    private idService;
    queryConditionWrapEl: any;
    private ngZone;
    constructor(communicationService: CommunicationService, convertorService: ConvertorService, resolver: ComponentFactoryResolver, injector: Injector, modalService: BsModalService, localeService: LocaleService);
    ngOnDestroy(): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    hasSetMultiClass(currentItem: any): boolean;
    getStyle(currentItem: any): string;
    configDialogConfirm(event: Event): void;
    openFieldConfigDialog(): void;
    resetSelectedConditionValues(exceptRequired?: boolean): Array<QueryCondition>;
    conditionChange(): void;
    conditionChangeAdvanced(data: any): void;
    clearFieldsChange(e: any): void;
    confirmLabelFormat(conditions: Array<QueryCondition>): string;
    buildSmartHelpKey(value: string): string;
}
