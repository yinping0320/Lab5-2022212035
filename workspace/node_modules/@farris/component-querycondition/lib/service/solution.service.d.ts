import { NotifyService } from '@farris/ui-notify';
import { QueryCondition } from '../entity/querycondition';
import { QuerySolutionVo } from '../entity/querysolutionvo';
import { FieldConfig } from '../entity/fieldconfig/fieldconfig';
import { BehaviorSubject } from 'rxjs';
export declare class SolutionService {
    private notify;
    private controlConfigState;
    constructor(notify: NotifyService);
    controlTypeMap: Map<number, string>;
    getControlConfigState(): BehaviorSubject<any>;
    /**
     * 传递过来的是已经处理过的条件
     * @param simpleCondition
     */
    updateControlConfigState(simpleCondition: Array<any>): void;
    /**
     * 只返回存在的属性
     */
    convertToSimpleQueryConditions(fields: Array<FieldConfig>): Array<any>;
    /**
     * 只处理设置的属性
     * @param field
     */
    private getSimpleControl;
    /**
     * 只处理指定属性
     * @param resultObj 修改的对象  {test01:'',test01:''}
     * @param sourceProps 待获取的属性列表 ['prop01','prop02']
     * @param source 取值来源{prop01:'',prop02:''}
     * @param distProps 目标属性，对应的返回属性按照设置['dist01','']
     * @return
     */
    private updateSimpleControl;
    /**
     * 将字段配置JSON描述信息转换为筛选条件
     * @param fields 字段配置信息
     * @returns 筛选条件数组
     */
    convertToQueryConditions(fields: Array<FieldConfig>): Array<QueryCondition>;
    /**
     * 根据控件类型分别创建筛选条件的control对象和value对象
     * @param field 字段配置信息
     * @returns 筛选条件的control对象和value对象
     */
    getControlAndValue(field: FieldConfig): {
        control: any;
        value: any;
    };
    getGuid(): string;
    private s4;
    showInfo(message: string, infoType: string, title: string, timeout: number): void;
    /**
    * 根据字段获取Lable控件的Title
    * @param field
    */
    getConditionItemTitle(field: QueryCondition): string;
    /**
     * 加载筛选方案时赋默认值
     * @param solution 需要赋默认值的筛选方案
     * @param fieldConfigs 默认值设置
     * @param readonly 是否只读
     * @returns 已赋默认值的筛选方案
     */
    setValues(solution: QuerySolutionVo, fieldConfigs: FieldConfig[], readonly: boolean): QuerySolutionVo;
    /**
     *
     * @param solution 需要更新配置的筛选方案
     * @param fieldConfigs 更新配置
     * @returns 已更新配置的筛选方案
     */
    updateControl(conditions: Array<QueryCondition>, fieldConfigs: Array<any>): void;
    /**
     * 必填控件非空判断
     * @param conditions 进行筛选操作时当前所有的筛选条件
     */
    isValid(conditions: Array<QueryCondition>): any[];
    /**
     * 解决数值控件placeholder显示为undefined的问题
     * @param s 数值控件JSON描述中的placeholder配置信息
     */
    private emptyString;
    /**
     * 解决jit生成代码后下拉帮助控件的displayType属性与组件api不一致的问题
     * @param data 下拉帮助控件JSON描述中的displayType配置信息
     */
    private displayTypeTransform;
    /**
     * 解决数值控件赋默认值功能与最大最小值限制功能的冲突问题
     * @param condition 当前正在赋默认值的筛选条件，若是数值类型，需要提取其control对象的max属性和min属性的值
     * @param value 默认值配置value对象
     * @param field 默认值配置
     * @returns 校验最大值和最小值之后的默认值配置value对象
     */
    private isNumCheck;
    /**
     * 智能输入框控件需要弹出表单时，将表单配置JSON描述转换为弹出表单命令可接收的弹窗参数
     * @param field 配置为智能输入框控件的字段的JSON描述
     * @returns 弹窗参数
     */
    private setInputGroupDialog;
}
