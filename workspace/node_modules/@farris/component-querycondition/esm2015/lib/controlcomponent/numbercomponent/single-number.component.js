/**
 * @fileoverview added by tsickle
 * Generated from: lib/controlcomponent/numbercomponent/single-number.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { SolutionService } from '../../service/solution.service';
import { SingleNumberValue } from '../../entity/conditionvalue/single-number-value';
export class SingleNumberComponent {
    /**
     * @param {?} solutionService
     */
    constructor(solutionService) {
        this.solutionService = solutionService;
        this.hideLabel = false;
        /**
         * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
         */
        this.changeFields = [];
        this.conditionChange = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
            /** @type {?} */
            const isChange = changes['changeFields'].currentValue.some((/**
             * @param {?} field
             * @return {?}
             */
            field => field == this.item.fieldCode));
            if (isChange) {
                this.number = this.item.value.getOriginalValue();
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.number = this.item.value.getOriginalValue();
        this.testId = this.solutionService.getGuid();
        this.canNull = true;
        this.placeholder = (this.item.placeHolder) ? (this.item.placeHolder) : (this.item.control.placeholder);
        this.precision = this.item.control.precision;
        this.textAlign = this.item.control.textAlign;
        this.bigNumber = this.item.control.bigNumber ? this.item.control.bigNumber : false;
        if (!this.bigNumber) {
            this.min = (this.item.control.min === undefined || this.item.control.min === null) ? -2147483648 : (this.item.control.min);
            this.max = (this.item.control.max === undefined || this.item.control.max === null) ? 2147483647 : (this.item.control.max);
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    valueChange(data) {
        /** @type {?} */
        const numberValue = new SingleNumberValue();
        isNaN(parseFloat(data)) ? numberValue.numValue = null : numberValue.numValue = data;
        this.item.value = numberValue;
        this.conditionChange.emit();
    }
    // getConditionItemStyle(field: QueryCondition, controlType: any) {
    //     return this.solutionService.getConditionItemStyle(field,controlType);
    // }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
}
SingleNumberComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-solution-single-number',
                template: "<div class=\"farris-group-wrap\" id=\"{{item.id}}\" >\r\n    <div class=\"form-group farris-form-group  common-group\" [ngClass]=\"{'q-state-readonly':item.readonly}\">\r\n        <label class=\"col-form-label\" *ngIf=\"item && !hideLabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n            <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.isRequired()\">*</span>\r\n            <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n            <farris-number-spinner *ngIf=\"!bigNumber\"\r\n                [(ngModel)]=\"number\"\r\n                (valueChange)=\"valueChange($event)\"\r\n                id=\"{{testId}}\"\r\n                [min]=\"min\"\r\n                [max]=\"max\"\r\n                [canNull]=\"canNull\"\r\n                [bigNumber]=\"bigNumber\"\r\n                [placeholder]=\"placeholder\"\r\n                [precision]=\"precision\"\r\n                [textAlign]=\"textAlign\"\r\n                [readonly]=\"item.readonly\">\r\n            </farris-number-spinner>\r\n            <farris-number-spinner *ngIf=\"bigNumber\"\r\n                [(ngModel)]=\"number\"\r\n                (valueChange)=\"valueChange($event)\"\r\n                id=\"{{testId}}\"\r\n                [canNull]=\"canNull\"\r\n                [bigNumber]=\"bigNumber\"\r\n                [placeholder]=\"placeholder\"\r\n                [precision]=\"precision\"\r\n                [textAlign]=\"textAlign\"\r\n                [readonly]=\"item.readonly\">\r\n            </farris-number-spinner>\r\n        </div>\r\n    </div>\r\n</div>"
            }] }
];
/** @nocollapse */
SingleNumberComponent.ctorParameters = () => [
    { type: SolutionService }
];
SingleNumberComponent.propDecorators = {
    hideLabel: [{ type: Input }],
    item: [{ type: Input }],
    changeFields: [{ type: Input }],
    conditionChange: [{ type: Output, args: ['conditionChange',] }]
};
if (false) {
    /** @type {?} */
    SingleNumberComponent.prototype.hideLabel;
    /** @type {?} */
    SingleNumberComponent.prototype.number;
    /** @type {?} */
    SingleNumberComponent.prototype.placeholder;
    /** @type {?} */
    SingleNumberComponent.prototype.precision;
    /** @type {?} */
    SingleNumberComponent.prototype.textAlign;
    /** @type {?} */
    SingleNumberComponent.prototype.item;
    /** @type {?} */
    SingleNumberComponent.prototype.testId;
    /** @type {?} */
    SingleNumberComponent.prototype.canNull;
    /** @type {?} */
    SingleNumberComponent.prototype.bigNumber;
    /** @type {?} */
    SingleNumberComponent.prototype.min;
    /** @type {?} */
    SingleNumberComponent.prototype.max;
    /**
     * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
     * @type {?}
     */
    SingleNumberComponent.prototype.changeFields;
    /** @type {?} */
    SingleNumberComponent.prototype.conditionChange;
    /**
     * @type {?}
     * @private
     */
    SingleNumberComponent.prototype.solutionService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xlLW51bWJlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbXBvbmVudC1xdWVyeWNvbmRpdGlvbi8iLCJzb3VyY2VzIjpbImxpYi9jb250cm9sY29tcG9uZW50L251bWJlcmNvbXBvbmVudC9zaW5nbGUtbnVtYmVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxZQUFZLEVBQTRCLE1BQU0sZUFBZSxDQUFDO0FBRXpHLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNqRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQU9wRixNQUFNLE9BQU8scUJBQXFCOzs7O0lBdUI5QixZQUFvQixlQUErQjtRQUEvQixvQkFBZSxHQUFmLGVBQWUsQ0FBZ0I7UUFyQjFDLGNBQVMsR0FBVyxLQUFLLENBQUE7Ozs7UUFpQnpCLGlCQUFZLEdBQWtCLEVBQUUsQ0FBQztRQUVmLG9CQUFlLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUVYLENBQUM7Ozs7O0lBRXRELFdBQVcsQ0FBQyxPQUFzQjtRQUM5QixJQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsWUFBWSxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLFdBQVcsRUFBRTs7a0JBQ2xHLFFBQVEsR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsWUFBWSxDQUFDLElBQUk7Ozs7WUFBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBQztZQUNqRyxJQUFHLFFBQVEsRUFBQztnQkFDUixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUFFLENB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WTs7Ozs7SUFLWiw2Q0FBMEM7O0lBRTFDLGdEQUFnRTs7Ozs7SUFFcEQsZ0RBQXVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFF1ZXJ5Q29uZGl0aW9uIH0gZnJvbSAnLi4vLi4vZW50aXR5L3F1ZXJ5Y29uZGl0aW9uJztcclxuaW1wb3J0IHsgU29sdXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZS9zb2x1dGlvbi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgU2luZ2xlTnVtYmVyVmFsdWUgfSBmcm9tICcuLi8uLi9lbnRpdHkvY29uZGl0aW9udmFsdWUvc2luZ2xlLW51bWJlci12YWx1ZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnYXBwLXNvbHV0aW9uLXNpbmdsZS1udW1iZXInLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcuL3NpbmdsZS1udW1iZXIuY29tcG9uZW50Lmh0bWwnLFxyXG59KVxyXG5cclxuZXhwb3J0IGNsYXNzIFNpbmdsZU51bWJlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcclxuXHJcbiAgICBASW5wdXQoKSBoaWRlTGFiZWw6Ym9vbGVhbiA9IGZhbHNlXHJcblxyXG5cclxuICAgIG51bWJlcjogbnVtYmVyO1xyXG4gICAgcGxhY2Vob2xkZXI6IHN0cmluZztcclxuICAgIHByZWNpc2lvbjogbnVtYmVyO1xyXG4gICAgdGV4dEFsaWduOiBzdHJpbmc7XHJcbiAgICBASW5wdXQoKSBpdGVtOiBhbnk7XHJcbiAgICB0ZXN0SWQ6IHN0cmluZztcclxuICAgIGNhbk51bGw6IGJvb2xlYW47XHJcbiAgICBiaWdOdW1iZXI6IGJvb2xlYW47XHJcbiAgICBtaW46IG51bWJlcjtcclxuICAgIG1heDogbnVtYmVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5p+Q5Liq5a2X5q615Y+R55Sf5YC85Y+Y5YyW5LqL5Lu25pe277yM6ZyA6KaB5ZCM5q2l5riF56m655qE5a2X5q6177yM5Y+v6IO95LiN5piv5b2T5YmN5a2X5q61XHJcbiAgICAgKi9cclxuICAgIEBJbnB1dCgpIGNoYW5nZUZpZWxkczogQXJyYXk8c3RyaW5nPiA9IFtdO1xyXG5cclxuICAgIEBPdXRwdXQoJ2NvbmRpdGlvbkNoYW5nZScpIGNvbmRpdGlvbkNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNvbHV0aW9uU2VydmljZTpTb2x1dGlvblNlcnZpY2Upe31cclxuXHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XHJcbiAgICAgICAgaWYoY2hhbmdlc1snY2hhbmdlRmllbGRzJ10gJiYgY2hhbmdlc1snY2hhbmdlRmllbGRzJ10uY3VycmVudFZhbHVlICYmICFjaGFuZ2VzWydjaGFuZ2VGaWVsZHMnXS5maXJzdENoYW5nZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpc0NoYW5nZSA9IGNoYW5nZXNbJ2NoYW5nZUZpZWxkcyddLmN1cnJlbnRWYWx1ZS5zb21lKGZpZWxkID0+IGZpZWxkID09IHRoaXMuaXRlbS5maWVsZENvZGUpO1xyXG4gICAgICAgICAgICBpZihpc0NoYW5nZSl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm51bWJlciA9IHRoaXMuaXRlbS52YWx1ZS5nZXRPcmlnaW5hbFZhbHVlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5udW1iZXIgPSB0aGlzLml0ZW0udmFsdWUuZ2V0T3JpZ2luYWxWYWx1ZSgpO1xyXG4gICAgICAgIHRoaXMudGVzdElkID0gdGhpcy5zb2x1dGlvblNlcnZpY2UuZ2V0R3VpZCgpO1xyXG4gICAgICAgIHRoaXMuY2FuTnVsbCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5wbGFjZWhvbGRlciA9ICh0aGlzLml0ZW0ucGxhY2VIb2xkZXIpID8gKHRoaXMuaXRlbS5wbGFjZUhvbGRlcikgOiAodGhpcy5pdGVtLmNvbnRyb2wucGxhY2Vob2xkZXIpO1xyXG4gICAgICAgIHRoaXMucHJlY2lzaW9uID0gdGhpcy5pdGVtLmNvbnRyb2wucHJlY2lzaW9uO1xyXG4gICAgICAgIHRoaXMudGV4dEFsaWduID0gdGhpcy5pdGVtLmNvbnRyb2wudGV4dEFsaWduO1xyXG4gICAgICAgIHRoaXMuYmlnTnVtYmVyID0gdGhpcy5pdGVtLmNvbnRyb2wuYmlnTnVtYmVyID8gdGhpcy5pdGVtLmNvbnRyb2wuYmlnTnVtYmVyIDogZmFsc2U7XHJcbiAgICAgICAgaWYoIXRoaXMuYmlnTnVtYmVyKXtcclxuICAgICAgICAgICAgdGhpcy5taW4gPSAodGhpcy5pdGVtLmNvbnRyb2wubWluID09PSB1bmRlZmluZWQgfHwgdGhpcy5pdGVtLmNvbnRyb2wubWluID09PSBudWxsKSA/IC0yMTQ3NDgzNjQ4IDogKHRoaXMuaXRlbS5jb250cm9sLm1pbik7XHJcbiAgICAgICAgICAgIHRoaXMubWF4ID0gKHRoaXMuaXRlbS5jb250cm9sLm1heCA9PT0gdW5kZWZpbmVkIHx8IHRoaXMuaXRlbS5jb250cm9sLm1heCA9PT0gbnVsbCkgPyAyMTQ3NDgzNjQ3IDogKHRoaXMuaXRlbS5jb250cm9sLm1heCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHZhbHVlQ2hhbmdlKGRhdGE6IGFueSl7XHJcbiAgICAgICAgY29uc3QgbnVtYmVyVmFsdWUgPSBuZXcgU2luZ2xlTnVtYmVyVmFsdWUoKTtcclxuICAgICAgICBpc05hTihwYXJzZUZsb2F0KGRhdGEpKSA/IG51bWJlclZhbHVlLm51bVZhbHVlID0gbnVsbCA6IG51bWJlclZhbHVlLm51bVZhbHVlID0gZGF0YTtcclxuICAgICAgICB0aGlzLml0ZW0udmFsdWUgPSBudW1iZXJWYWx1ZTtcclxuICAgICAgICB0aGlzLmNvbmRpdGlvbkNoYW5nZS5lbWl0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZ2V0Q29uZGl0aW9uSXRlbVN0eWxlKGZpZWxkOiBRdWVyeUNvbmRpdGlvbiwgY29udHJvbFR5cGU6IGFueSkge1xyXG4gICAgLy8gICAgIHJldHVybiB0aGlzLnNvbHV0aW9uU2VydmljZS5nZXRDb25kaXRpb25JdGVtU3R5bGUoZmllbGQsY29udHJvbFR5cGUpO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIGdldENvbmRpdGlvbkl0ZW1UaXRsZShmaWVsZDpRdWVyeUNvbmRpdGlvbil7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc29sdXRpb25TZXJ2aWNlLmdldENvbmRpdGlvbkl0ZW1UaXRsZShmaWVsZCk7XHJcbiAgICB9XHJcbn0iXX0=