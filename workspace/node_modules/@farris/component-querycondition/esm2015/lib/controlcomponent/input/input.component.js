/**
 * @fileoverview added by tsickle
 * Generated from: lib/controlcomponent/input/input.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, EventEmitter, Output } from '@angular/core';
import { SolutionService } from '../../service/solution.service';
export class InputComponent {
    /**
     * @param {?} solutionService
     */
    constructor(solutionService) {
        this.solutionService = solutionService;
        this.hideLabel = false;
        this.maxLength = undefined;
        this.hasError = false;
        this.conditionChange = new EventEmitter();
    }
    /**
     * @param {?} textItem
     * @return {?}
     */
    set item(textItem) {
        this._inputItem = textItem;
    }
    /**
     * @return {?}
     */
    get item() {
        return this.constructTextItem(this._inputItem);
    }
    /**
     * @param {?} textItem
     * @return {?}
     */
    constructTextItem(textItem) {
        /** @type {?} */
        const textValueObj = (/** @type {?} */ (textItem.value));
        // textValueObj.value = textValueObj.value && textValueObj.value.trim();
        textValueObj.value = textValueObj.value && textValueObj.value;
        textItem.value = textValueObj;
        return textItem;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.testId = this.solutionService.getGuid();
        this.placeholder = (this.item.placeHolder) ? (this.item.placeHolder) : (this.item.control.placeholder);
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
    /**
     * @return {?}
     */
    onBlur() {
        if (this.hasError) {
            return;
        }
        this.conditionChange.emit();
    }
    /**
     * 是否有错误信息
     * @param {?} textControl
     * @return {?}
     */
    hasErrorInfo(textControl) {
        if (textControl.invalid && (textControl.dirty || textControl.touched) && textControl.errors.maxlength) {
            this.hasError = true;
            return true;
        }
        this.hasError = false;
        return false;
    }
}
InputComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-solution-input',
                template: "<div class=\"farris-group-wrap\" id=\"{{item.id}}\">\r\n    <div class=\"form-group farris-form-group  common-group\" [ngClass]=\"{'q-state-readonly':item.readonly}\">\r\n        <label class=\"col-form-label\" *ngIf=\"item && !hideLabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n            <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.isRequired()\">*</span>\r\n            <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n            <input-group [(ngModel)]=\"item.value.value\" name=\"{{item.fieldName}}\" id=\"{{testId}}\"\r\n                (blurHandle)=\"onBlur()\" [placeholder]=\"placeholder\" [readonly]=\"item.readonly\" maxlength=\"maxLength\"\r\n                #textControl=\"ngModel\" (clear)=\"onBlur()\">\r\n            </input-group>\r\n            <ng-container *ngIf=\"maxLength\">\r\n                <div class=\"farris-feedback\" [class.f-state-invalid]=\"hasErrorInfo(textControl)\">\r\n                    <span class=\"f-feedback-message\">\u8BF7\u8F93\u5165\u6709\u6548\u683C\u5F0F</span>\r\n                </div>\r\n            </ng-container>\r\n        </div>\r\n    </div>\r\n</div>"
            }] }
];
/** @nocollapse */
InputComponent.ctorParameters = () => [
    { type: SolutionService }
];
InputComponent.propDecorators = {
    hideLabel: [{ type: Input }],
    item: [{ type: Input }],
    conditionChange: [{ type: Output, args: ['conditionChange',] }]
};
if (false) {
    /** @type {?} */
    InputComponent.prototype._hideLabel;
    /** @type {?} */
    InputComponent.prototype.hideLabel;
    /**
     * QueryCondition类型
     * @type {?}
     */
    InputComponent.prototype._inputItem;
    /** @type {?} */
    InputComponent.prototype.placeholder;
    /** @type {?} */
    InputComponent.prototype.maxLength;
    /** @type {?} */
    InputComponent.prototype.testId;
    /** @type {?} */
    InputComponent.prototype.hasError;
    /** @type {?} */
    InputComponent.prototype.conditionChange;
    /**
     * @type {?}
     * @private
     */
    InputComponent.prototype.solutionService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21wb25lbnQtcXVlcnljb25kaXRpb24vIiwic291cmNlcyI6WyJsaWIvY29udHJvbGNvbXBvbmVudC9pbnB1dC9pbnB1dC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBcUIsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUxRixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFTakUsTUFBTSxPQUFPLGNBQWM7Ozs7SUFrQ3ZCLFlBQW9CLGVBQWdDO1FBQWhDLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQS9CM0MsY0FBUyxHQUFXLEtBQUssQ0FBQTtRQVNsQyxjQUFTLEdBQUcsU0FBUyxDQUFDO1FBVXRCLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFFVSxvQkFBZSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFVUixDQUFDOzs7OztJQXBCekQsSUFDSSxJQUFJLENBQUMsUUFBYTtRQUNsQixJQUFJLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQztJQUMvQixDQUFDOzs7O0lBQ0QsSUFBSSxJQUFJO1FBQ0osT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ25ELENBQUM7Ozs7O0lBTUQsaUJBQWlCLENBQUMsUUFBd0I7O2NBQ2hDLFlBQVksR0FBRyxtQkFBQSxRQUFRLENBQUMsS0FBSyxFQUFhO1FBQ2hELHdFQUF3RTtRQUN4RSxZQUFZLENBQUMsS0FBSyxHQUFHLFlBQVksQ0FBQyxLQUFLLElBQUksWUFBWSxDQUFDLEtBQUssQ0FBQztRQUM5RCxRQUFRLENBQUMsS0FBSyxHQUFHLFlBQVksQ0FBQztRQUM5QixPQUFPLFFBQVEsQ0FBQztJQUNwQixDQUFDOzs7O0lBSUQsUUFBUTtRQUNKLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUM3QyxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzNHLENBQUM7Ozs7O0lBRUQscUJBQXFCLENBQUMsS0FBcUI7UUFDdkMsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdELENBQUM7Ozs7SUFFRCxNQUFNO1FBQ0YsSUFBRyxJQUFJLENBQUMsUUFBUSxFQUFDO1lBQ2IsT0FBTztTQUNWO1FBQ0QsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNoQyxDQUFDOzs7Ozs7SUFJRCxZQUFZLENBQUMsV0FBb0I7UUFDN0IsSUFBSSxXQUFXLENBQUMsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssSUFBSSxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksV0FBVyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUU7WUFDbkcsSUFBSSxDQUFDLFFBQVEsR0FBQyxJQUFJLENBQUM7WUFDbkIsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUNELElBQUksQ0FBQyxRQUFRLEdBQUMsS0FBSyxDQUFDO1FBQ3BCLE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7OztZQWxFSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLG9CQUFvQjtnQkFDOUIsaXRDQUFxQzthQUN4Qzs7OztZQVBRLGVBQWU7Ozt3QkFZbkIsS0FBSzttQkFXTCxLQUFLOzhCQVVMLE1BQU0sU0FBQyxpQkFBaUI7Ozs7SUF0QnpCLG9DQUFVOztJQUNWLG1DQUFrQzs7Ozs7SUFLbEMsb0NBQTJCOztJQUUzQixxQ0FBb0I7O0lBRXBCLG1DQUFzQjs7SUFTdEIsZ0NBQWU7O0lBQ2Ysa0NBQWlCOztJQUVqQix5Q0FBZ0U7Ozs7O0lBVXBELHlDQUF3QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uSW5pdCwgT25DaGFuZ2VzLCBFdmVudEVtaXR0ZXIsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBRdWVyeUNvbmRpdGlvbiB9IGZyb20gJy4uLy4uL2VudGl0eS9xdWVyeWNvbmRpdGlvbic7XHJcbmltcG9ydCB7IFNvbHV0aW9uU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2Uvc29sdXRpb24uc2VydmljZSc7XHJcbmltcG9ydCB7IFRleHRWYWx1ZSB9IGZyb20gJy4uLy4uL2VudGl0eS9jb25kaXRpb252YWx1ZS90ZXh0dmFsdWUnO1xyXG5pbXBvcnQgeyBOZ01vZGVsIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2FwcC1zb2x1dGlvbi1pbnB1dCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vaW5wdXQuY29tcG9uZW50Lmh0bWwnLFxyXG59KVxyXG5cclxuZXhwb3J0IGNsYXNzIElucHV0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuXHJcbiAgICBfaGlkZUxhYmVsXHJcbiAgICBASW5wdXQoKSBoaWRlTGFiZWw6Ym9vbGVhbiA9IGZhbHNlXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBRdWVyeUNvbmRpdGlvbuexu+Wei1xyXG4gICAgICovXHJcbiAgICBfaW5wdXRJdGVtOiBRdWVyeUNvbmRpdGlvbjtcclxuXHJcbiAgICBwbGFjZWhvbGRlcjogc3RyaW5nO1xyXG5cclxuICAgIG1heExlbmd0aCA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICBASW5wdXQoKVxyXG4gICAgc2V0IGl0ZW0odGV4dEl0ZW06IGFueSkge1xyXG4gICAgICAgIHRoaXMuX2lucHV0SXRlbSA9IHRleHRJdGVtO1xyXG4gICAgfVxyXG4gICAgZ2V0IGl0ZW0oKTogYW55IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3RUZXh0SXRlbSh0aGlzLl9pbnB1dEl0ZW0pO1xyXG4gICAgfVxyXG4gICAgdGVzdElkOiBzdHJpbmc7XHJcbiAgICBoYXNFcnJvciA9IGZhbHNlO1xyXG5cclxuICAgIEBPdXRwdXQoJ2NvbmRpdGlvbkNoYW5nZScpIGNvbmRpdGlvbkNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgICBjb25zdHJ1Y3RUZXh0SXRlbSh0ZXh0SXRlbTogUXVlcnlDb25kaXRpb24pOiBRdWVyeUNvbmRpdGlvbiB7XHJcbiAgICAgICAgY29uc3QgdGV4dFZhbHVlT2JqID0gdGV4dEl0ZW0udmFsdWUgYXMgVGV4dFZhbHVlO1xyXG4gICAgICAgIC8vIHRleHRWYWx1ZU9iai52YWx1ZSA9IHRleHRWYWx1ZU9iai52YWx1ZSAmJiB0ZXh0VmFsdWVPYmoudmFsdWUudHJpbSgpO1xyXG4gICAgICAgIHRleHRWYWx1ZU9iai52YWx1ZSA9IHRleHRWYWx1ZU9iai52YWx1ZSAmJiB0ZXh0VmFsdWVPYmoudmFsdWU7XHJcbiAgICAgICAgdGV4dEl0ZW0udmFsdWUgPSB0ZXh0VmFsdWVPYmo7XHJcbiAgICAgICAgcmV0dXJuIHRleHRJdGVtO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc29sdXRpb25TZXJ2aWNlOiBTb2x1dGlvblNlcnZpY2UpIHsgfVxyXG5cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudGVzdElkID0gdGhpcy5zb2x1dGlvblNlcnZpY2UuZ2V0R3VpZCgpO1xyXG4gICAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSAodGhpcy5pdGVtLnBsYWNlSG9sZGVyKSA/ICh0aGlzLml0ZW0ucGxhY2VIb2xkZXIpIDogKHRoaXMuaXRlbS5jb250cm9sLnBsYWNlaG9sZGVyKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRDb25kaXRpb25JdGVtVGl0bGUoZmllbGQ6IFF1ZXJ5Q29uZGl0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc29sdXRpb25TZXJ2aWNlLmdldENvbmRpdGlvbkl0ZW1UaXRsZShmaWVsZCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25CbHVyKCkge1xyXG4gICAgICAgIGlmKHRoaXMuaGFzRXJyb3Ipe1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY29uZGl0aW9uQ2hhbmdlLmVtaXQoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog5piv5ZCm5pyJ6ZSZ6K+v5L+h5oGvXHJcbiAgICAgKi9cclxuICAgIGhhc0Vycm9ySW5mbyh0ZXh0Q29udHJvbDogTmdNb2RlbCkge1xyXG4gICAgICAgIGlmICh0ZXh0Q29udHJvbC5pbnZhbGlkICYmICh0ZXh0Q29udHJvbC5kaXJ0eSB8fCB0ZXh0Q29udHJvbC50b3VjaGVkKSAmJiB0ZXh0Q29udHJvbC5lcnJvcnMubWF4bGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFzRXJyb3I9dHJ1ZTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaGFzRXJyb3I9ZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59Il19