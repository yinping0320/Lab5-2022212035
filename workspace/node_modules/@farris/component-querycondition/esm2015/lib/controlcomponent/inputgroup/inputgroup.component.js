/**
 * @fileoverview added by tsickle
 * Generated from: lib/controlcomponent/inputgroup/inputgroup.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, EventEmitter, Output } from '@angular/core';
import { SolutionService } from '../../service/solution.service';
export class InputGroupComponent {
    /**
     * @param {?} solutionService
     */
    constructor(solutionService) {
        this.solutionService = solutionService;
        this.hideLabel = false;
        this.conditionChange = new EventEmitter();
        //控件内显示文本是否为弹窗返回的文本，手动输入或者手动做出修改时为false
        this.isTextFromDialog = false;
    }
    /**
     * @param {?} inputGroupItem
     * @return {?}
     */
    set item(inputGroupItem) {
        this._inputItem = inputGroupItem;
    }
    /**
     * @return {?}
     */
    get item() {
        return this.constructInputGroupItem(this._inputItem);
    }
    /**
     * @param {?} inputGroupItem
     * @return {?}
     */
    constructInputGroupItem(inputGroupItem) {
        /** @type {?} */
        const inputGroupValueObj = (/** @type {?} */ (inputGroupItem.value));
        // inputGroupValueObj.textValue = inputGroupValueObj.textValue && inputGroupValueObj.textValue.trim();
        inputGroupValueObj.textValue = inputGroupValueObj.textValue && inputGroupValueObj.textValue;
        inputGroupItem.value = inputGroupValueObj;
        return inputGroupItem;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.testId = this.solutionService.getGuid();
        this.getInputGroupBindingInfo();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.item = null;
    }
    /**
     * @return {?}
     */
    getInputGroupBindingInfo() {
        /** @type {?} */
        const inputGroupControl = ((/** @type {?} */ (this.item.control)));
        this.usageMode = inputGroupControl.usageMode;
        if (this.usageMode == 'open-modal' || this.usageMode == 'open-remote-modal') {
            this.dialogOptions = inputGroupControl.dialogOptions;
            /*
                example of dialogOptions = {
                   modalId: "1e011720-eb0f-4c9c-82b6-6844c89b2303"
                   mapFields: {hDepartment: "Name"}
                   title: "测试标题栏"
                   width: 800
                   height: 600
                }
             */
            if (this.dialogOptions.mapFields) {
                this.textField = JSON.stringify(this.dialogOptions.mapFields).split('"')[1];
            }
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        if (this.usageMode == 'text') {
            this.item.control.click();
        }
        else {
            /** @type {?} */
            const options = this.dialogOptions;
            options.handle = (/**
             * @param {?} selectedItem
             * @return {?}
             */
            (selectedItem) => {
                if (selectedItem && this.textField) {
                    this.item.value.value = selectedItem;
                    this.item.value.textValue = this.item.value.getTextValue(this.textField);
                    this.item.value.textField = this.textField;
                    this.item.value.isInputText = false;
                    this.isTextFromDialog = true;
                    this.textFormDialog = this.item.value.textValue;
                    this.onBlur();
                }
            });
            this.item.control.click({ event, options });
        }
    }
    /**
     * @return {?}
     */
    onBlur() {
        if (this.usageMode == 'text') {
            this.item.value.isInputText = true;
        }
        if (this.usageMode == 'open-modal' || this.usageMode == 'open-remote-modal') {
            if (!this.isTextFromDialog) {
                //console.log('弹窗模式下控件内文本是手动输入的');
                this.item.value.isInputText = true;
            }
            if (this.item.value.textValue != this.textFormDialog) {
                //console.log('通过弹窗选择的值已被手动修改');
                this.isTextFromDialog = false;
                this.item.value.value = [];
                this.item.value.textField = undefined;
                this.item.value.isInputText = true;
            }
        }
        this.conditionChange.emit();
    }
    /**
     * @return {?}
     */
    clearData() {
        ((/** @type {?} */ (this.item.value))).clearValue();
        this.conditionChange.emit();
    }
}
InputGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-solution-inputgroup',
                template: "<div class=\"farris-group-wrap\" id=\"{{item.id}}\">\r\n    <div class=\"form-group farris-form-group  common-group\"  [ngClass]=\"{'q-state-readonly':item.readonly}\">\r\n        <label class=\"col-form-label\" *ngIf=\"item && !hideLabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n            <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.isRequired()\">*</span>\r\n            <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n            <input-group \r\n                [(ngModel)]=\"item.value.textValue\" \r\n                name=\"{{item.fieldName}}\" \r\n                id=\"{{testId}}\"\r\n                [groupText]=\"item.control.groupText\"\r\n                [editable]=\"item.control.editable\"\r\n                [placeholder]=\"item.placeHolder\"\r\n                [readonly]=\"item.readonly\"\r\n                (clickHandle)=\"onClick($event)\"\r\n                (blurHandle)=\"onBlur()\"\r\n                (clear)=\"clearData()\">\r\n            </input-group>\r\n        </div>\r\n    </div>\r\n</div>"
            }] }
];
/** @nocollapse */
InputGroupComponent.ctorParameters = () => [
    { type: SolutionService }
];
InputGroupComponent.propDecorators = {
    hideLabel: [{ type: Input }],
    item: [{ type: Input }],
    conditionChange: [{ type: Output, args: ['conditionChange',] }]
};
if (false) {
    /** @type {?} */
    InputGroupComponent.prototype.hideLabel;
    /**
     * QueryCondition类型
     * @type {?}
     */
    InputGroupComponent.prototype._inputItem;
    /** @type {?} */
    InputGroupComponent.prototype.conditionChange;
    /** @type {?} */
    InputGroupComponent.prototype.testId;
    /** @type {?} */
    InputGroupComponent.prototype.usageMode;
    /** @type {?} */
    InputGroupComponent.prototype.dialogOptions;
    /** @type {?} */
    InputGroupComponent.prototype.textField;
    /** @type {?} */
    InputGroupComponent.prototype.isTextFromDialog;
    /** @type {?} */
    InputGroupComponent.prototype.textFormDialog;
    /**
     * @type {?}
     * @private
     */
    InputGroupComponent.prototype.solutionService;
}
//# sourceMappingURL=data:application/json;base64,