/**
 * @fileoverview added by tsickle
 * Generated from: lib/controlcomponent/datepicker/datepicker.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Injector, EventEmitter, Output } from '@angular/core';
import { SolutionService } from '../../service/solution.service';
import { ControlType } from '../../entity/controltype';
import { ShowType } from '@farris/ui-datepicker';
import { of, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { QueryConditionComponent } from '../../querycondition.component';
import { MessagerService } from '@farris/ui-messager';
export class DatePickerComponent {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        this.hideLabel = false;
        /**
         * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
         */
        this.changeFields = [];
        this.conditionChange = new EventEmitter();
        // true显示时间 false不显示
        this.showType = ShowType.all; // 显示类型，默认显示全部1；不显示日期，用于选择年月模式2；不显示日期及月份，用于选择年模式3；用于周选择4。
        // 显示类型，默认显示全部1；不显示日期，用于选择年月模式2；不显示日期及月份，用于选择年模式3；用于周选择4。
        this.maxDate = '';
        this.minDate = '';
        this.editable = false;
        this.dateRangeDatesDelimiter = '~';
        this.enableDynamic = false; //是否支持动态日期，仅限singleDate情况
        //是否支持动态日期，仅限singleDate情况
        //区间类型时是否支持选择单一区间
        this.enableSplit = false;
        this.solutionService = this.injector.get(SolutionService);
        this.messageService = this.injector.get(MessagerService);
        /** @type {?} */
        const queryconditionComponent = this.injector.get(QueryConditionComponent, null);
        if (queryconditionComponent) {
            this.destroy$ = queryconditionComponent.destroy$;
        }
        else {
            this.destroy$ = new Subject();
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['changeFields'] && changes['changeFields'].currentValue && !changes['changeFields'].firstChange) {
            /** @type {?} */
            const isChange = changes['changeFields'].currentValue.some((/**
             * @param {?} field
             * @return {?}
             */
            field => field == this.item.fieldCode));
            if (isChange) {
                if (this.dateRange) {
                    this.beginValue = this.item.value && this.item.value.startTime ? this.item.value.startTime.toString().trim() : '';
                    this.endValue = this.item.value && this.item.value.endTime ? this.item.value.endTime.toString().trim() : '';
                    this.bindValue = this.item.value.getOriginalValue();
                }
                else {
                    this.bindValue = this.item.value.getOriginalValue();
                }
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.testId = this.solutionService.getGuid();
        // const controlType = this.item.control.getControlType();
        switch (this.controlType) {
            case ControlType.DateRange:
                this.returnFormat = this.item.control.returnFormat ? this.item.control.returnFormat : 'yyyy-MM-dd';
                this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM-dd';
                this.dateRange = true;
                break;
            case ControlType.SingleDate:
                this.returnFormat = this.item.control.returnFormat ? this.item.control.returnFormat : 'yyyy-MM-dd';
                this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM-dd';
                this.dateRange = false;
                this.enableDynamic = this.item.control.isDynamicDate ? this.item.control.isDynamicDate : false;
                break;
            case ControlType.SingleYear:
                this.returnFormat = this.item.control.returnFormat ? this.item.control.returnFormat : 'yyyy';
                this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy';
                this.showType = ShowType.noDateAndMonth;
                this.dateRange = false;
                break;
            case ControlType.DateTimeRange:
                this.returnFormat = this.item.control.returnFormat ? this.item.control.returnFormat : 'yyyy-MM-dd HH:mm:ss';
                if (this.item.control.enableCustomFormat) {
                    // 使用自定义格式
                    this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM-dd HH:mm:ss';
                }
                else {
                    // 未启用自定义格式
                    this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM-dd';
                    this.dateFormat = this.dateFormat + ' HH:mm:ss';
                }
                this.showTime = true;
                this.dateRange = true;
                break;
            case ControlType.SingleMonth:
                this.returnFormat = this.item.control.returnFormat ? this.item.control.returnFormat : 'yyyy-MM';
                this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM';
                this.showType = ShowType.noDate;
                this.dateRange = false;
                break;
            case ControlType.MonthRange:
                this.returnFormat = this.item.control.returnFormat ? this.item.control.returnFormat : 'yyyy-MM';
                this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM';
                this.showType = ShowType.noDate;
                this.dateRange = true;
                break;
            case ControlType.SingleDateTime:
                this.returnFormat = this.item.control.returnFormat ? this.item.control.returnFormat : 'yyyy-MM-dd HH:mm:ss';
                if (this.item.control.enableCustomFormat) {
                    // 使用自定义格式
                    this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM-dd HH:mm:ss';
                }
                else {
                    // 未启用自定义格式
                    this.dateFormat = this.item.control.format ? this.item.control.format : 'yyyy-MM-dd';
                    this.dateFormat = this.dateFormat + ' HH:mm:ss';
                }
                this.showTime = true;
                this.dateRange = false;
                break;
        }
        this.enableSplit = this.item.control.enableSplit || false;
        // 更新条件
        this.updateParamsByCondition();
        this.placeholder = this.item.placeHolder ? this.item.placeHolder : this.item.control.placeholder;
        if (this.dateRange) {
            this.beginValue = this.item.value && this.item.value.startTime ? this.item.value.startTime.toString().trim() : '';
            this.endValue = this.item.value && this.item.value.endTime ? this.item.value.endTime.toString().trim() : '';
            this.beginPlaceHolder = this.item.beginPlaceHolder ? this.item.beginPlaceHolder : this.placeholder;
            this.endPlaceHolder = this.item.endPlaceHolder ? this.item.endPlaceHolder : this.placeholder;
            this.bindValue = this.item.value.getOriginalValue();
        }
        else {
            this.bindValue = this.item.value.getOriginalValue();
        }
        if (this.item.control.weekSelect && this.controlType == ControlType.DateRange) {
            this.showType = ShowType.selectWeek;
        }
        this.dateChangedCmd = this.item.control.dateChangedCmd;
        if (!this.dateChangedCmd) {
            this.dateChangedCmd = (/**
             * @return {?}
             */
            () => of({ closeDateSelect: true }));
        }
        // 
        this.solutionService.getControlConfigState().pipe(takeUntil(this.destroy$)).subscribe((/**
         * @param {?} simpleConditions
         * @return {?}
         */
        (simpleConditions) => {
            //简单条件
            /** @type {?} */
            let findSimpleCondition = simpleConditions.find((/**
             * @param {?} item
             * @return {?}
             */
            item => item['fieldCode'] == this.item['fieldCode']));
            if (findSimpleCondition) {
                this.updateParamsByCondition(findSimpleCondition);
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.dateChangedCmdSubscription) {
            this.dateChangedCmdSubscription.unsubscribe();
        }
    }
    /**
     * @private
     * @param {?=} condition
     * @return {?}
     */
    updateParamsByCondition(condition = null) {
        /** @type {?} */
        let conditionControl = null;
        conditionControl = condition ? condition.control : this.item.control;
        switch (this.controlType) {
            case ControlType.SingleYear:
                this.maxDate = conditionControl.hasOwnProperty('maxDate') ? conditionControl['maxDate'] : this.maxDate;
                this.minDate = conditionControl.hasOwnProperty('minDate') ? conditionControl['minDate'] : this.minDate;
                break;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDateChange(event) {
        if (event.returnFormatted === this.item.value.getOriginalValue()) {
            return;
        }
        this.item.value.setOriginalValue({
            formatted: event.returnFormatted,
            delimiter: this.dateRangeDatesDelimiter
        });
        //this.conditionChange.emit();
        this.runDateChangedEvent(this.item.value.getOriginalValue());
    }
    /**
     * @param {?} event
     * @param {?} type
     * @return {?}
     */
    onSpiltDateChange(event, type) {
        /** @type {?} */
        let originValue = this.item.value.getOriginalValue();
        /** @type {?} */
        let _start = '';
        /** @type {?} */
        let _end = '';
        /** @type {?} */
        let _formatted = '';
        if (originValue) {
            /** @type {?} */
            let _value = originValue.split(this.dateRangeDatesDelimiter);
            _value[0] && (_start = _value[0]);
            _value[1] && (_end = _value[1]);
        }
        if (type === 'start') {
            _formatted = event.returnFormatted + this.dateRangeDatesDelimiter + _end;
        }
        else {
            _formatted = _start + this.dateRangeDatesDelimiter + event.returnFormatted;
        }
        if (event.returnFormatted === this.item.value.getOriginalValue()) {
            return;
        }
        this.item.value.setOriginalValue({
            formatted: _formatted,
            delimiter: this.dateRangeDatesDelimiter,
        });
        //this.conditionChange.emit();
        this.runDateChangedEvent(this.item.value.getOriginalValue());
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDynamicValueChange(event) {
        this.item.value.setOriginalValue({
            formatted: event
        });
        this.runDateChangedEvent(this.item.value.getOriginalValue());
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDynamicViewChanged(event) {
        this.item.value.setOriginalValue(event.showDynamicView ? {
            formatted: event.dynamicValue
        } : {
            formatted: event.singleValue,
            delimiter: this.dateRangeDatesDelimiter
        });
        this.runDateChangedEvent(this.item.value.getOriginalValue());
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        return this.solutionService.getConditionItemTitle(field);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    beginValueChange($event) {
        // this.beginValue = $event;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    endValueChange($event) {
        // this.endValue = $event;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    runDateChangedEvent(date) {
        if (this.dateChangedCmd) {
            this.dateChangedCmdSubscription = this.dateChangedCmd(date).subscribe((/**
             * @param {?} v
             * @return {?}
             */
            (v) => {
                if (typeof v === "boolean") {
                    if (v) {
                        this.conditionChange.emit();
                    }
                }
                else if (typeof v === "object" && v.closeDateSelect !== undefined && !v.closeDateSelect) {
                    if (v.message) {
                        this.messageService.warning(v.message);
                    }
                    else {
                        this.conditionChange.emit();
                    }
                }
                else {
                    this.conditionChange.emit();
                }
            }));
        }
        else {
            this.conditionChange.emit();
        }
    }
}
DatePickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-solution-datepicker',
                template: "<div class=\"farris-group-wrap\" id=\"{{item.id}}\">\r\n    <div class=\"form-group farris-form-group  common-group\"  [ngClass]=\"{'q-state-readonly':item.readonly,'datepicker-range-group':dateRange}\">\r\n        <label class=\"col-form-label\" *ngIf=\"item && !hideLabel\" title=\"{{getConditionItemTitle(item)}}\">\r\n            <span class=\"farris-label-info text-danger\" *ngIf=\"item.control.isRequired()\">*</span>\r\n            <span class=\"farris-label-text\">{{item.fieldName}}</span>\r\n        </label>\r\n        <div class=\"farris-input-wrap\">\r\n            <farris-datepicker *ngIf=\"!dateRange\"\r\n                [(ngModel)]=\"bindValue\"\r\n                [dateRange]=\"dateRange\"\r\n                [placeholder]=\"placeholder\"\r\n                [returnFormat]=\"returnFormat\"\r\n                [dateFormat]=\"dateFormat\"\r\n                [editable]=\"editable\"\r\n                [showType]=\"showType\"\r\n                [showTime]=\"showTime\"\r\n                [readonly]=\"item.readonly\"\r\n                (valueChange)=\"onDateChange($event)\"\r\n                [maxDate]=\"maxDate\"\r\n                [minDate]=\"minDate\"\r\n                [enableDynamic]=\"enableDynamic\"\r\n                (dynamicValueChange)=\"onDynamicValueChange($event)\"\r\n                (dynamicViewChanged)=\"onDynamicViewChanged($event)\"\r\n                id=\"{{testId}}\"\r\n            >\r\n            </farris-datepicker>\r\n            <farris-datepicker *ngIf=\"dateRange && !enableSplit\"\r\n                [dateRange]=\"dateRange\"\r\n                [placeholder]=\"placeholder\"      \r\n                [beginPlaceholder]=\"beginPlaceHolder\"\r\n                [endPlaceholder]=\"endPlaceHolder\"\r\n                [returnFormat]=\"returnFormat\"\r\n                [dateFormat]=\"dateFormat\"\r\n                [editable]=\"editable\"\r\n                [showType]=\"showType\"\r\n                [showTime]=\"showTime\"\r\n                [readonly]=\"item.readonly\"\r\n                [(ngModel)]=\"bindValue\"\r\n                (valueChange)=\"onDateChange($event)\"\r\n                id=\"{{testId}}\"\r\n            >\r\n            </farris-datepicker>\r\n            <div *ngIf=\"dateRange && enableSplit\" class=\"split-date-range\">\r\n                <farris-datepicker\r\n                    [(ngModel)]=\"beginValue\"\r\n                    [dateRange]=\"false\"\r\n                    [placeholder]=\"beginPlaceHolder\"\r\n                    [returnFormat]=\"returnFormat\"\r\n                    [dateFormat]=\"dateFormat\"\r\n                    [editable]=\"editable\"\r\n                    [showType]=\"showType\"\r\n                    [showTime]=\"showTime\"\r\n                    [readonly]=\"item.readonly\"\r\n                    (valueChange)=\"onSpiltDateChange($event, 'start')\"\r\n                    [maxDate]=\"maxDate\"\r\n                    [minDate]=\"minDate\"\r\n                    id=\"{{testId}}\"\r\n                >\r\n                </farris-datepicker>\r\n                <span>~</span>\r\n                <farris-datepicker\r\n                    [(ngModel)]=\"endValue\"\r\n                    [dateRange]=\"false\"\r\n                    [placeholder]=\"endPlaceHolder\"\r\n                    [returnFormat]=\"returnFormat\"\r\n                    [dateFormat]=\"dateFormat\"\r\n                    [editable]=\"editable\"\r\n                    [showType]=\"showType\"\r\n                    [showTime]=\"showTime\"\r\n                    [readonly]=\"item.readonly\"\r\n                    (valueChange)=\"onSpiltDateChange($event, 'end')\"\r\n                    [maxDate]=\"maxDate\"\r\n                    [minDate]=\"minDate\"\r\n                    id=\"{{testId + 'more'}}\"\r\n                >\r\n                </farris-datepicker>\r\n        \r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n"
            }] }
];
/** @nocollapse */
DatePickerComponent.ctorParameters = () => [
    { type: Injector }
];
DatePickerComponent.propDecorators = {
    hideLabel: [{ type: Input }],
    item: [{ type: Input }],
    controlType: [{ type: Input }],
    changeFields: [{ type: Input }],
    conditionChange: [{ type: Output, args: ['conditionChange',] }]
};
if (false) {
    /** @type {?} */
    DatePickerComponent.prototype.hideLabel;
    /** @type {?} */
    DatePickerComponent.prototype.item;
    /** @type {?} */
    DatePickerComponent.prototype.controlType;
    /**
     * 某个字段发生值变化事件时，需要同步清空的字段，可能不是当前字段
     * @type {?}
     */
    DatePickerComponent.prototype.changeFields;
    /** @type {?} */
    DatePickerComponent.prototype.conditionChange;
    /** @type {?} */
    DatePickerComponent.prototype.solutionService;
    /** @type {?} */
    DatePickerComponent.prototype.messageService;
    /** @type {?} */
    DatePickerComponent.prototype.dateRange;
    /** @type {?} */
    DatePickerComponent.prototype.showTime;
    /** @type {?} */
    DatePickerComponent.prototype.showType;
    /** @type {?} */
    DatePickerComponent.prototype.maxDate;
    /** @type {?} */
    DatePickerComponent.prototype.minDate;
    /** @type {?} */
    DatePickerComponent.prototype.disableDates;
    /** @type {?} */
    DatePickerComponent.prototype.placeholder;
    /** @type {?} */
    DatePickerComponent.prototype.dateFormat;
    /** @type {?} */
    DatePickerComponent.prototype.returnFormat;
    /** @type {?} */
    DatePickerComponent.prototype.returnType;
    /** @type {?} */
    DatePickerComponent.prototype.disabled;
    /** @type {?} */
    DatePickerComponent.prototype.readonly;
    /** @type {?} */
    DatePickerComponent.prototype.editable;
    /** @type {?} */
    DatePickerComponent.prototype.dateRangeDatesDelimiter;
    /** @type {?} */
    DatePickerComponent.prototype.bindValue;
    /** @type {?} */
    DatePickerComponent.prototype.beginValue;
    /** @type {?} */
    DatePickerComponent.prototype.endValue;
    /** @type {?} */
    DatePickerComponent.prototype.testId;
    /** @type {?} */
    DatePickerComponent.prototype.beginPlaceHolder;
    /** @type {?} */
    DatePickerComponent.prototype.endPlaceHolder;
    /** @type {?} */
    DatePickerComponent.prototype.destroy$;
    /** @type {?} */
    DatePickerComponent.prototype.dateChangedCmd;
    /** @type {?} */
    DatePickerComponent.prototype.dateChangedCmdSubscription;
    /** @type {?} */
    DatePickerComponent.prototype.enableDynamic;
    /** @type {?} */
    DatePickerComponent.prototype.enableSplit;
    /**
     * @type {?}
     * @private
     */
    DatePickerComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbXBvbmVudC1xdWVyeWNvbmRpdGlvbi8iLCJzb3VyY2VzIjpbImxpYi9jb250cm9sY29tcG9uZW50L2RhdGVwaWNrZXIvZGF0ZXBpY2tlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBcUIsUUFBUSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQTRCLE1BQU0sZUFBZSxDQUFDO0FBRTlILE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUVqRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDdkQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2pELE9BQU8sRUFBYyxFQUFFLEVBQUUsT0FBTyxFQUFnQixNQUFNLE1BQU0sQ0FBQztBQUM3RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFekUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBTXRELE1BQU0sT0FBTyxtQkFBbUI7Ozs7SUEyQzlCLFlBQW9CLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7UUF6QzdCLGNBQVMsR0FBVyxLQUFLLENBQUE7Ozs7UUFTekIsaUJBQVksR0FBa0IsRUFBRSxDQUFDO1FBRWYsb0JBQWUsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDOztRQU1oRSxhQUFRLEdBQVcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLHlEQUF5RDs7UUFDMUYsWUFBTyxHQUF5QixFQUFFLENBQUM7UUFDbkMsWUFBTyxHQUF5QixFQUFFLENBQUM7UUFRbkMsYUFBUSxHQUFZLEtBQUssQ0FBQztRQUMxQiw0QkFBdUIsR0FBVyxHQUFHLENBQUM7UUFVdEMsa0JBQWEsR0FBWSxLQUFLLENBQUMsQ0FBQyx5QkFBeUI7OztRQUV6RCxnQkFBVyxHQUFZLEtBQUssQ0FBQztRQUUzQixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7O2NBQ25ELHVCQUF1QixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLHVCQUF1QixFQUFFLElBQUksQ0FBQztRQUNoRixJQUFHLHVCQUF1QixFQUFFO1lBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcsdUJBQXVCLENBQUMsUUFBUSxDQUFDO1NBQ2xEO2FBQU07WUFDTCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksT0FBTyxFQUFPLENBQUM7U0FDcEM7SUFFSCxDQUFDOzs7OztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsWUFBWSxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLFdBQVcsRUFBRTs7a0JBQ3JHLFFBQVEsR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsWUFBWSxDQUFDLElBQUk7Ozs7WUFBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBQztZQUNqRyxJQUFJLFFBQVEsRUFBRTtnQkFDWixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7b0JBQ2xCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztvQkFDbEgsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO29CQUM1RyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUFFLENBQUM7aUJBQ3JEO3FCQUFNO29CQUNMLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztpQkFDckQ7YUFDRjtTQUNGO0lBQ0gsQ0FBQzs7OztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDN0MsMERBQTBEO1FBQzFELFFBQVEsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUN4QixLQUFLLFdBQVcsQ0FBQyxTQUFTO2dCQUN4QixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUM7Z0JBQ25HLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQztnQkFDckYsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7Z0JBQ3RCLE1BQU07WUFDUixLQUFLLFdBQVcsQ0FBQyxVQUFVO2dCQUN6QixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUM7Z0JBQ25HLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQztnQkFDckYsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7Z0JBQ3ZCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztnQkFDL0YsTUFBTTtZQUNSLEtBQUssV0FBVyxDQUFDLFVBQVU7Z0JBQ3pCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztnQkFDN0YsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO2dCQUMvRSxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUM7Z0JBQ3hDLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO2dCQUN2QixNQUFNO1lBQ1IsS0FBSyxXQUFXLENBQUMsYUFBYTtnQkFDNUIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUM7Z0JBQzVHLElBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLEVBQUM7b0JBQ3RDLFVBQVU7b0JBQ1YsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUM7aUJBQy9GO3FCQUFJO29CQUNGLFdBQVc7b0JBQ1gsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDO29CQUNyRixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLEdBQUcsV0FBVyxDQUFDO2lCQUNsRDtnQkFDRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztnQkFDckIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7Z0JBQ3RCLE1BQU07WUFDUixLQUFLLFdBQVcsQ0FBQyxXQUFXO2dCQUMxQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7Z0JBQ2hHLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztnQkFDbEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDO2dCQUNoQyxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztnQkFDdkIsTUFBTTtZQUNSLEtBQUssV0FBVyxDQUFDLFVBQVU7Z0JBQ3pCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztnQkFDaEcsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO2dCQUNsRixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUM7Z0JBQ2hDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO2dCQUN0QixNQUFNO1lBQ1IsS0FBSyxXQUFXLENBQUMsY0FBYztnQkFDN0IsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUM7Z0JBQzVHLElBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLEVBQUM7b0JBQ3RDLFVBQVU7b0JBQ1YsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUM7aUJBQy9GO3FCQUFJO29CQUNGLFdBQVc7b0JBQ1gsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDO29CQUNyRixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLEdBQUcsV0FBVyxDQUFDO2lCQUNsRDtnQkFDRCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztnQkFDckIsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7Z0JBQ3ZCLE1BQU07U0FDVDtRQUNELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxJQUFJLEtBQUssQ0FBQTtRQUN6RCxPQUFPO1FBQ1AsSUFBSSxDQUFDLHVCQUF1QixFQUFFLENBQUM7UUFDL0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQztRQUNqRyxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQ2xILElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUM1RyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztZQUNuRyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztZQUM3RixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUFFLENBQUM7U0FDckQ7YUFBTTtZQUNMLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztTQUNyRDtRQUVELElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxXQUFXLElBQUksV0FBVyxDQUFDLFNBQVMsRUFBRTtZQUM3RSxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUM7U0FDckM7UUFFRCxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQztRQUN2RCxJQUFHLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUN2QixJQUFJLENBQUMsY0FBYzs7O1lBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsZUFBZSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUEsQ0FBQztTQUMzRDtRQUVELEdBQUc7UUFDSCxJQUFJLENBQUMsZUFBZSxDQUFDLHFCQUFxQixFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTOzs7O1FBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFOzs7Z0JBRXJHLG1CQUFtQixHQUFHLGdCQUFnQixDQUFDLElBQUk7Ozs7WUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFDO1lBQ3BHLElBQUksbUJBQW1CLEVBQUU7Z0JBQ3ZCLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO2FBQ25EO1FBQ0gsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7O0lBRUQsV0FBVztRQUNULElBQUcsSUFBSSxDQUFDLDBCQUEwQixFQUFFO1lBQ2xDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUMvQztJQUNILENBQUM7Ozs7OztJQUVPLHVCQUF1QixDQUFDLFNBQVMsR0FBRyxJQUFJOztZQUMxQyxnQkFBZ0IsR0FBRyxJQUFJO1FBQzNCLGdCQUFnQixHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDckUsUUFBUSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3hCLEtBQUssV0FBVyxDQUFDLFVBQVU7Z0JBQ3pCLElBQUksQ0FBQyxPQUFPLEdBQUcsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztnQkFDdkcsSUFBSSxDQUFDLE9BQU8sR0FBRyxnQkFBZ0IsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO2dCQUN2RyxNQUFNO1NBQ1Q7SUFDSCxDQUFDOzs7OztJQUVELFlBQVksQ0FBQyxLQUFVO1FBQ3JCLElBQUcsS0FBSyxDQUFDLGVBQWUsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFO1lBQy9ELE9BQU07U0FDUDtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDO1lBQy9CLFNBQVMsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUNoQyxTQUFTLEVBQUUsSUFBSSxDQUFDLHVCQUF1QjtTQUN4QyxDQUFDLENBQUM7UUFDSCw4QkFBOEI7UUFDOUIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQztJQUMvRCxDQUFDOzs7Ozs7SUFFRCxpQkFBaUIsQ0FBQyxLQUFVLEVBQUUsSUFBa0I7O1lBQzFDLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRTs7WUFDaEQsTUFBTSxHQUFHLEVBQUU7O1lBQUUsSUFBSSxHQUFHLEVBQUU7O1lBQUUsVUFBVSxHQUFHLEVBQUU7UUFDM0MsSUFBRyxXQUFXLEVBQUU7O2dCQUNWLE1BQU0sR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQztZQUM1RCxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDakMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQ2hDO1FBQ0QsSUFBRyxJQUFJLEtBQUssT0FBTyxFQUFFO1lBRW5CLFVBQVUsR0FBSSxLQUFLLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLENBQUE7U0FDMUU7YUFBTTtZQUNMLFVBQVUsR0FBRyxNQUFNLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixHQUFHLEtBQUssQ0FBQyxlQUFlLENBQUE7U0FDM0U7UUFDRCxJQUFHLEtBQUssQ0FBQyxlQUFlLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsRUFBRTtZQUMvRCxPQUFNO1NBQ1A7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQztZQUMvQixTQUFTLEVBQUUsVUFBVTtZQUNyQixTQUFTLEVBQUUsSUFBSSxDQUFDLHVCQUF1QjtTQUN4QyxDQUFDLENBQUM7UUFDSCw4QkFBOEI7UUFDOUIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQztJQUMvRCxDQUFDOzs7OztJQUNELG9CQUFvQixDQUFDLEtBQVU7UUFDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUM7WUFDL0IsU0FBUyxFQUFFLEtBQUs7U0FDakIsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQztJQUMvRCxDQUFDOzs7OztJQUVELG9CQUFvQixDQUFDLEtBQUs7UUFFeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7WUFDdkQsU0FBUyxFQUFFLEtBQUssQ0FBQyxZQUFZO1NBQzlCLENBQUMsQ0FBQyxDQUFDO1lBQ0YsU0FBUyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzVCLFNBQVMsRUFBRSxJQUFJLENBQUMsdUJBQXVCO1NBQ3hDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7SUFFL0QsQ0FBQzs7Ozs7SUFFRCxxQkFBcUIsQ0FBQyxLQUFxQjtRQUN6QyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0QsQ0FBQzs7Ozs7SUFFRCxnQkFBZ0IsQ0FBQyxNQUFNO1FBQ3RCLDRCQUE0QjtJQUM3QixDQUFDOzs7OztJQUVELGNBQWMsQ0FBQyxNQUFNO1FBQ3BCLDBCQUEwQjtJQUMzQixDQUFDOzs7OztJQUVELG1CQUFtQixDQUFDLElBQVM7UUFDM0IsSUFBRyxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQ3RCLElBQUksQ0FBQywwQkFBMEIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVM7Ozs7WUFBQyxDQUFDLENBQU0sRUFBRSxFQUFFO2dCQUMvRSxJQUFHLE9BQU8sQ0FBQyxLQUFLLFNBQVMsRUFBRTtvQkFDekIsSUFBRyxDQUFDLEVBQUU7d0JBQ0osSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztxQkFDN0I7aUJBQ0Y7cUJBQU0sSUFBRyxPQUFPLENBQUMsS0FBSyxRQUFRLElBQUksQ0FBQyxDQUFDLGVBQWUsS0FBSyxTQUFTLElBQUksQ0FBQyxDQUFDLENBQUMsZUFBZSxFQUFFO29CQUN4RixJQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUU7d0JBQ1osSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO3FCQUN4Qzt5QkFBTTt3QkFDTCxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxDQUFDO3FCQUM3QjtpQkFDRjtxQkFBTTtvQkFDTCxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxDQUFDO2lCQUM3QjtZQUNILENBQUMsRUFBQyxDQUFDO1NBQ0o7YUFBTTtZQUNMLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDN0I7SUFDSCxDQUFDOzs7WUEvUUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSx5QkFBeUI7Z0JBQ25DLHMySEFBMEM7YUFDM0M7Ozs7WUFmNkMsUUFBUTs7O3dCQWtCbkQsS0FBSzttQkFFTCxLQUFLOzBCQUVMLEtBQUs7MkJBS0wsS0FBSzs4QkFFTCxNQUFNLFNBQUMsaUJBQWlCOzs7O0lBWHpCLHdDQUFrQzs7SUFFbEMsbUNBQW1COztJQUVuQiwwQ0FBNkI7Ozs7O0lBSzdCLDJDQUEwQzs7SUFFMUMsOENBQWdFOztJQUVoRSw4Q0FBaUM7O0lBQ2pDLDZDQUFnQzs7SUFDaEMsd0NBQW1COztJQUNuQix1Q0FBa0I7O0lBQ2xCLHVDQUFnQzs7SUFDaEMsc0NBQW1DOztJQUNuQyxzQ0FBbUM7O0lBQ25DLDJDQUE2RDs7SUFDN0QsMENBQW9COztJQUNwQix5Q0FBbUI7O0lBQ25CLDJDQUFxQjs7SUFDckIseUNBQW1COztJQUNuQix1Q0FBa0I7O0lBQ2xCLHVDQUFrQjs7SUFDbEIsdUNBQTBCOztJQUMxQixzREFBc0M7O0lBQ3RDLHdDQUFrQjs7SUFDbEIseUNBQWdCOztJQUNoQix1Q0FBYzs7SUFDZCxxQ0FBZTs7SUFDZiwrQ0FBd0I7O0lBQ3hCLDZDQUFzQjs7SUFDdEIsdUNBQXVCOztJQUN2Qiw2Q0FBNkQ7O0lBQzdELHlEQUF5Qzs7SUFDekMsNENBQStCOztJQUUvQiwwQ0FBNkI7Ozs7O0lBQ2pCLHVDQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uSW5pdCwgT25DaGFuZ2VzLCBJbmplY3RvciwgRXZlbnRFbWl0dGVyLCBPdXRwdXQsIFNpbXBsZUNoYW5nZXMsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBRdWVyeUNvbmRpdGlvbiB9IGZyb20gJy4uLy4uL2VudGl0eS9xdWVyeWNvbmRpdGlvbic7XHJcbmltcG9ydCB7IFNvbHV0aW9uU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2Uvc29sdXRpb24uc2VydmljZSc7XHJcblxyXG5pbXBvcnQgeyBDb250cm9sVHlwZSB9IGZyb20gJy4uLy4uL2VudGl0eS9jb250cm9sdHlwZSc7XHJcbmltcG9ydCB7IFNob3dUeXBlIH0gZnJvbSAnQGZhcnJpcy91aS1kYXRlcGlja2VyJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YsIFN1YmplY3QsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IFF1ZXJ5Q29uZGl0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vcXVlcnljb25kaXRpb24uY29tcG9uZW50JztcclxuaW1wb3J0IHsgRGF0ZUNoYW5nZWRSZXN1bHQgfSBmcm9tICcuL2RhdGVwaWNrZXItb3B0aW9ucyc7XHJcbmltcG9ydCB7IE1lc3NhZ2VyU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbWVzc2FnZXInO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdhcHAtc29sdXRpb24tZGF0ZXBpY2tlcicsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL2RhdGVwaWNrZXIuY29tcG9uZW50Lmh0bWwnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRGF0ZVBpY2tlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xyXG5cclxuICBASW5wdXQoKSBoaWRlTGFiZWw6Ym9vbGVhbiA9IGZhbHNlXHJcbiAgLy8g6L+H5ruk5p2h5Lu2XHJcbiAgQElucHV0KCkgaXRlbTogYW55O1xyXG4gIC8vIFxyXG4gIEBJbnB1dCgpIGNvbnRyb2xUeXBlOiBudW1iZXI7XHJcblxyXG4gIC8qKlxyXG4gICAqIOafkOS4quWtl+auteWPkeeUn+WAvOWPmOWMluS6i+S7tuaXtu+8jOmcgOimgeWQjOatpea4heepuueahOWtl+aute+8jOWPr+iDveS4jeaYr+W9k+WJjeWtl+autVxyXG4gICAqL1xyXG4gIEBJbnB1dCgpIGNoYW5nZUZpZWxkczogQXJyYXk8c3RyaW5nPiA9IFtdO1xyXG5cclxuICBAT3V0cHV0KCdjb25kaXRpb25DaGFuZ2UnKSBjb25kaXRpb25DaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gIHNvbHV0aW9uU2VydmljZTogU29sdXRpb25TZXJ2aWNlO1xyXG4gIG1lc3NhZ2VTZXJ2aWNlOiBNZXNzYWdlclNlcnZpY2U7XHJcbiAgZGF0ZVJhbmdlOiBib29sZWFuOyAvLyB0cnVl5Yy66Ze0IGZhbHNl5Y2VXHJcbiAgc2hvd1RpbWU6IGJvb2xlYW47IC8vIHRydWXmmL7npLrml7bpl7QgZmFsc2XkuI3mmL7npLpcclxuICBzaG93VHlwZTogbnVtYmVyID0gU2hvd1R5cGUuYWxsOyAvLyDmmL7npLrnsbvlnovvvIzpu5jorqTmmL7npLrlhajpg6gx77yb5LiN5pi+56S65pel5pyf77yM55So5LqO6YCJ5oup5bm05pyI5qih5byPMu+8m+S4jeaYvuekuuaXpeacn+WPiuaciOS7ve+8jOeUqOS6jumAieaLqeW5tOaooeW8jzPvvJvnlKjkuo7lkajpgInmi6k044CCXHJcbiAgbWF4RGF0ZTogc3RyaW5nIHwgRGF0ZSB8IG51bGwgPSAnJztcclxuICBtaW5EYXRlOiBzdHJpbmcgfCBEYXRlIHwgbnVsbCA9ICcnO1xyXG4gIGRpc2FibGVEYXRlczogeyB5ZWFyOiBudW1iZXIsIG1vbnRoOiBudW1iZXIsIGRheTogbnVtYmVyIH1bXTtcclxuICBwbGFjZWhvbGRlcjogc3RyaW5nO1xyXG4gIGRhdGVGb3JtYXQ6IHN0cmluZzsgLy8g5pi+56S65YC85pel5pyf5qC85byP5YyWXHJcbiAgcmV0dXJuRm9ybWF0OiBzdHJpbmc7IC8vIOi/lOWbnuWAvOaXpeacn+agvOW8j+WMllxyXG4gIHJldHVyblR5cGU6IHN0cmluZzsgLy8g6L+U5Zue5YC857G75Z6L77yM6L+U5Zue5YC857G75Z6L6buY6K6k5oOF5Ya15LiL5piv5ZKM6L6T5YWl5YC857G75Z6L55u45ZCM77yM5L2G5piv5aaC5p6c6L6T5YWl5YC85Li6bnVsbOetiemdnuazleWAvO+8jOm7mOiupOS4ulN0cmluZ++8jOWmguaenOaDs+aUueS4ukRhdGXvvIzlrprkuYnor6XlrZfmrrXjgIJcclxuICBkaXNhYmxlZDogYm9vbGVhbjtcclxuICByZWFkb25seTogYm9vbGVhbjtcclxuICBlZGl0YWJsZTogYm9vbGVhbiA9IGZhbHNlO1xyXG4gIGRhdGVSYW5nZURhdGVzRGVsaW1pdGVyOiBzdHJpbmcgPSAnfic7XHJcbiAgYmluZFZhbHVlOiBzdHJpbmc7XHJcbiAgYmVnaW5WYWx1ZTogYW55O1xyXG4gIGVuZFZhbHVlOiBhbnk7XHJcbiAgdGVzdElkOiBzdHJpbmc7XHJcbiAgYmVnaW5QbGFjZUhvbGRlcjpzdHJpbmc7XHJcbiAgZW5kUGxhY2VIb2xkZXI6c3RyaW5nO1xyXG4gIGRlc3Ryb3kkOiBTdWJqZWN0PGFueT47XHJcbiAgZGF0ZUNoYW5nZWRDbWQ6IChkYXRlOiBhbnkpID0+IE9ic2VydmFibGU8RGF0ZUNoYW5nZWRSZXN1bHQ+O1xyXG4gIGRhdGVDaGFuZ2VkQ21kU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XHJcbiAgZW5hYmxlRHluYW1pYzogYm9vbGVhbiA9IGZhbHNlOyAvL+aYr+WQpuaUr+aMgeWKqOaAgeaXpeacn++8jOS7hemZkHNpbmdsZURhdGXmg4XlhrVcclxuICAvL+WMuumXtOexu+Wei+aXtuaYr+WQpuaUr+aMgemAieaLqeWNleS4gOWMuumXtFxyXG4gIGVuYWJsZVNwbGl0OiBib29sZWFuID0gZmFsc2U7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IpIHtcclxuICAgIHRoaXMuc29sdXRpb25TZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQoU29sdXRpb25TZXJ2aWNlKTtcclxuICAgIHRoaXMubWVzc2FnZVNlcnZpY2UgPSB0aGlzLmluamVjdG9yLmdldChNZXNzYWdlclNlcnZpY2UpO1xyXG4gICAgY29uc3QgcXVlcnljb25kaXRpb25Db21wb25lbnQgPSB0aGlzLmluamVjdG9yLmdldChRdWVyeUNvbmRpdGlvbkNvbXBvbmVudCwgbnVsbCk7XHJcbiAgICBpZihxdWVyeWNvbmRpdGlvbkNvbXBvbmVudCkge1xyXG4gICAgICB0aGlzLmRlc3Ryb3kkID0gcXVlcnljb25kaXRpb25Db21wb25lbnQuZGVzdHJveSQ7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmRlc3Ryb3kkID0gbmV3IFN1YmplY3Q8YW55PigpO1xyXG4gICAgfVxyXG5cclxuICB9XHJcblxyXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgIGlmIChjaGFuZ2VzWydjaGFuZ2VGaWVsZHMnXSAmJiBjaGFuZ2VzWydjaGFuZ2VGaWVsZHMnXS5jdXJyZW50VmFsdWUgJiYgIWNoYW5nZXNbJ2NoYW5nZUZpZWxkcyddLmZpcnN0Q2hhbmdlKSB7XHJcbiAgICAgIGNvbnN0IGlzQ2hhbmdlID0gY2hhbmdlc1snY2hhbmdlRmllbGRzJ10uY3VycmVudFZhbHVlLnNvbWUoZmllbGQgPT4gZmllbGQgPT0gdGhpcy5pdGVtLmZpZWxkQ29kZSk7XHJcbiAgICAgIGlmIChpc0NoYW5nZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmRhdGVSYW5nZSkge1xyXG4gICAgICAgICAgdGhpcy5iZWdpblZhbHVlID0gdGhpcy5pdGVtLnZhbHVlICYmIHRoaXMuaXRlbS52YWx1ZS5zdGFydFRpbWUgPyB0aGlzLml0ZW0udmFsdWUuc3RhcnRUaW1lLnRvU3RyaW5nKCkudHJpbSgpIDogJyc7XHJcbiAgICAgICAgICB0aGlzLmVuZFZhbHVlID0gdGhpcy5pdGVtLnZhbHVlICYmIHRoaXMuaXRlbS52YWx1ZS5lbmRUaW1lID8gdGhpcy5pdGVtLnZhbHVlLmVuZFRpbWUudG9TdHJpbmcoKS50cmltKCkgOiAnJztcclxuICAgICAgICAgIHRoaXMuYmluZFZhbHVlID0gdGhpcy5pdGVtLnZhbHVlLmdldE9yaWdpbmFsVmFsdWUoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5iaW5kVmFsdWUgPSB0aGlzLml0ZW0udmFsdWUuZ2V0T3JpZ2luYWxWYWx1ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICB0aGlzLnRlc3RJZCA9IHRoaXMuc29sdXRpb25TZXJ2aWNlLmdldEd1aWQoKTtcclxuICAgIC8vIGNvbnN0IGNvbnRyb2xUeXBlID0gdGhpcy5pdGVtLmNvbnRyb2wuZ2V0Q29udHJvbFR5cGUoKTtcclxuICAgIHN3aXRjaCAodGhpcy5jb250cm9sVHlwZSkge1xyXG4gICAgICBjYXNlIENvbnRyb2xUeXBlLkRhdGVSYW5nZTpcclxuICAgICAgICB0aGlzLnJldHVybkZvcm1hdCA9IHRoaXMuaXRlbS5jb250cm9sLnJldHVybkZvcm1hdCA/IHRoaXMuaXRlbS5jb250cm9sLnJldHVybkZvcm1hdCA6ICd5eXl5LU1NLWRkJztcclxuICAgICAgICB0aGlzLmRhdGVGb3JtYXQgPSB0aGlzLml0ZW0uY29udHJvbC5mb3JtYXQgPyB0aGlzLml0ZW0uY29udHJvbC5mb3JtYXQgOiAneXl5eS1NTS1kZCc7XHJcbiAgICAgICAgdGhpcy5kYXRlUmFuZ2UgPSB0cnVlO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIENvbnRyb2xUeXBlLlNpbmdsZURhdGU6XHJcbiAgICAgICAgdGhpcy5yZXR1cm5Gb3JtYXQgPSB0aGlzLml0ZW0uY29udHJvbC5yZXR1cm5Gb3JtYXQgPyB0aGlzLml0ZW0uY29udHJvbC5yZXR1cm5Gb3JtYXQgOiAneXl5eS1NTS1kZCc7XHJcbiAgICAgICAgdGhpcy5kYXRlRm9ybWF0ID0gdGhpcy5pdGVtLmNvbnRyb2wuZm9ybWF0ID8gdGhpcy5pdGVtLmNvbnRyb2wuZm9ybWF0IDogJ3l5eXktTU0tZGQnO1xyXG4gICAgICAgIHRoaXMuZGF0ZVJhbmdlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5lbmFibGVEeW5hbWljID0gdGhpcy5pdGVtLmNvbnRyb2wuaXNEeW5hbWljRGF0ZSA/IHRoaXMuaXRlbS5jb250cm9sLmlzRHluYW1pY0RhdGUgOiBmYWxzZTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBDb250cm9sVHlwZS5TaW5nbGVZZWFyOlxyXG4gICAgICAgIHRoaXMucmV0dXJuRm9ybWF0ID0gdGhpcy5pdGVtLmNvbnRyb2wucmV0dXJuRm9ybWF0ID8gdGhpcy5pdGVtLmNvbnRyb2wucmV0dXJuRm9ybWF0IDogJ3l5eXknO1xyXG4gICAgICAgIHRoaXMuZGF0ZUZvcm1hdCA9IHRoaXMuaXRlbS5jb250cm9sLmZvcm1hdCA/IHRoaXMuaXRlbS5jb250cm9sLmZvcm1hdCA6ICd5eXl5JztcclxuICAgICAgICB0aGlzLnNob3dUeXBlID0gU2hvd1R5cGUubm9EYXRlQW5kTW9udGg7XHJcbiAgICAgICAgdGhpcy5kYXRlUmFuZ2UgPSBmYWxzZTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBDb250cm9sVHlwZS5EYXRlVGltZVJhbmdlOlxyXG4gICAgICAgIHRoaXMucmV0dXJuRm9ybWF0ID0gdGhpcy5pdGVtLmNvbnRyb2wucmV0dXJuRm9ybWF0ID8gdGhpcy5pdGVtLmNvbnRyb2wucmV0dXJuRm9ybWF0IDogJ3l5eXktTU0tZGQgSEg6bW06c3MnO1xyXG4gICAgICAgIGlmKHRoaXMuaXRlbS5jb250cm9sLmVuYWJsZUN1c3RvbUZvcm1hdCl7XHJcbiAgICAgICAgICAvLyDkvb/nlKjoh6rlrprkuYnmoLzlvI9cclxuICAgICAgICAgIHRoaXMuZGF0ZUZvcm1hdCA9IHRoaXMuaXRlbS5jb250cm9sLmZvcm1hdCA/IHRoaXMuaXRlbS5jb250cm9sLmZvcm1hdCA6ICd5eXl5LU1NLWRkIEhIOm1tOnNzJztcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAvLyDmnKrlkK/nlKjoh6rlrprkuYnmoLzlvI9cclxuICAgICAgICAgICB0aGlzLmRhdGVGb3JtYXQgPSB0aGlzLml0ZW0uY29udHJvbC5mb3JtYXQgPyB0aGlzLml0ZW0uY29udHJvbC5mb3JtYXQgOiAneXl5eS1NTS1kZCc7XHJcbiAgICAgICAgICAgdGhpcy5kYXRlRm9ybWF0ID0gdGhpcy5kYXRlRm9ybWF0ICsgJyBISDptbTpzcyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2hvd1RpbWUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuZGF0ZVJhbmdlID0gdHJ1ZTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBDb250cm9sVHlwZS5TaW5nbGVNb250aDpcclxuICAgICAgICB0aGlzLnJldHVybkZvcm1hdCA9IHRoaXMuaXRlbS5jb250cm9sLnJldHVybkZvcm1hdCA/IHRoaXMuaXRlbS5jb250cm9sLnJldHVybkZvcm1hdCA6ICd5eXl5LU1NJztcclxuICAgICAgICB0aGlzLmRhdGVGb3JtYXQgPSB0aGlzLml0ZW0uY29udHJvbC5mb3JtYXQgPyB0aGlzLml0ZW0uY29udHJvbC5mb3JtYXQgOiAneXl5eS1NTSc7XHJcbiAgICAgICAgdGhpcy5zaG93VHlwZSA9IFNob3dUeXBlLm5vRGF0ZTtcclxuICAgICAgICB0aGlzLmRhdGVSYW5nZSA9IGZhbHNlO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIENvbnRyb2xUeXBlLk1vbnRoUmFuZ2U6XHJcbiAgICAgICAgdGhpcy5yZXR1cm5Gb3JtYXQgPSB0aGlzLml0ZW0uY29udHJvbC5yZXR1cm5Gb3JtYXQgPyB0aGlzLml0ZW0uY29udHJvbC5yZXR1cm5Gb3JtYXQgOiAneXl5eS1NTSc7XHJcbiAgICAgICAgdGhpcy5kYXRlRm9ybWF0ID0gdGhpcy5pdGVtLmNvbnRyb2wuZm9ybWF0ID8gdGhpcy5pdGVtLmNvbnRyb2wuZm9ybWF0IDogJ3l5eXktTU0nO1xyXG4gICAgICAgIHRoaXMuc2hvd1R5cGUgPSBTaG93VHlwZS5ub0RhdGU7XHJcbiAgICAgICAgdGhpcy5kYXRlUmFuZ2UgPSB0cnVlO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIENvbnRyb2xUeXBlLlNpbmdsZURhdGVUaW1lOlxyXG4gICAgICAgIHRoaXMucmV0dXJuRm9ybWF0ID0gdGhpcy5pdGVtLmNvbnRyb2wucmV0dXJuRm9ybWF0ID8gdGhpcy5pdGVtLmNvbnRyb2wucmV0dXJuRm9ybWF0IDogJ3l5eXktTU0tZGQgSEg6bW06c3MnO1xyXG4gICAgICAgIGlmKHRoaXMuaXRlbS5jb250cm9sLmVuYWJsZUN1c3RvbUZvcm1hdCl7XHJcbiAgICAgICAgICAvLyDkvb/nlKjoh6rlrprkuYnmoLzlvI9cclxuICAgICAgICAgIHRoaXMuZGF0ZUZvcm1hdCA9IHRoaXMuaXRlbS5jb250cm9sLmZvcm1hdCA/IHRoaXMuaXRlbS5jb250cm9sLmZvcm1hdCA6ICd5eXl5LU1NLWRkIEhIOm1tOnNzJztcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAvLyDmnKrlkK/nlKjoh6rlrprkuYnmoLzlvI9cclxuICAgICAgICAgICB0aGlzLmRhdGVGb3JtYXQgPSB0aGlzLml0ZW0uY29udHJvbC5mb3JtYXQgPyB0aGlzLml0ZW0uY29udHJvbC5mb3JtYXQgOiAneXl5eS1NTS1kZCc7XHJcbiAgICAgICAgICAgdGhpcy5kYXRlRm9ybWF0ID0gdGhpcy5kYXRlRm9ybWF0ICsgJyBISDptbTpzcyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2hvd1RpbWUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuZGF0ZVJhbmdlID0gZmFsc2U7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICB0aGlzLmVuYWJsZVNwbGl0ID0gdGhpcy5pdGVtLmNvbnRyb2wuZW5hYmxlU3BsaXQgfHwgZmFsc2VcclxuICAgIC8vIOabtOaWsOadoeS7tlxyXG4gICAgdGhpcy51cGRhdGVQYXJhbXNCeUNvbmRpdGlvbigpO1xyXG4gICAgdGhpcy5wbGFjZWhvbGRlciA9IHRoaXMuaXRlbS5wbGFjZUhvbGRlciA/IHRoaXMuaXRlbS5wbGFjZUhvbGRlciA6IHRoaXMuaXRlbS5jb250cm9sLnBsYWNlaG9sZGVyO1xyXG4gICAgaWYgKHRoaXMuZGF0ZVJhbmdlKSB7XHJcbiAgICAgIHRoaXMuYmVnaW5WYWx1ZSA9IHRoaXMuaXRlbS52YWx1ZSAmJiB0aGlzLml0ZW0udmFsdWUuc3RhcnRUaW1lID8gdGhpcy5pdGVtLnZhbHVlLnN0YXJ0VGltZS50b1N0cmluZygpLnRyaW0oKSA6ICcnO1xyXG4gICAgICB0aGlzLmVuZFZhbHVlID0gdGhpcy5pdGVtLnZhbHVlICYmIHRoaXMuaXRlbS52YWx1ZS5lbmRUaW1lID8gdGhpcy5pdGVtLnZhbHVlLmVuZFRpbWUudG9TdHJpbmcoKS50cmltKCkgOiAnJztcclxuICAgICAgdGhpcy5iZWdpblBsYWNlSG9sZGVyID0gdGhpcy5pdGVtLmJlZ2luUGxhY2VIb2xkZXIgPyB0aGlzLml0ZW0uYmVnaW5QbGFjZUhvbGRlciA6IHRoaXMucGxhY2Vob2xkZXI7XHJcbiAgICAgIHRoaXMuZW5kUGxhY2VIb2xkZXIgPSB0aGlzLml0ZW0uZW5kUGxhY2VIb2xkZXIgPyB0aGlzLml0ZW0uZW5kUGxhY2VIb2xkZXIgOiB0aGlzLnBsYWNlaG9sZGVyO1xyXG4gICAgICB0aGlzLmJpbmRWYWx1ZSA9IHRoaXMuaXRlbS52YWx1ZS5nZXRPcmlnaW5hbFZhbHVlKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmJpbmRWYWx1ZSA9IHRoaXMuaXRlbS52YWx1ZS5nZXRPcmlnaW5hbFZhbHVlKCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmICh0aGlzLml0ZW0uY29udHJvbC53ZWVrU2VsZWN0ICYmIHRoaXMuY29udHJvbFR5cGUgPT0gQ29udHJvbFR5cGUuRGF0ZVJhbmdlKSB7XHJcbiAgICAgIHRoaXMuc2hvd1R5cGUgPSBTaG93VHlwZS5zZWxlY3RXZWVrO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZGF0ZUNoYW5nZWRDbWQgPSB0aGlzLml0ZW0uY29udHJvbC5kYXRlQ2hhbmdlZENtZDtcclxuICAgIGlmKCF0aGlzLmRhdGVDaGFuZ2VkQ21kKSB7XHJcbiAgICAgIHRoaXMuZGF0ZUNoYW5nZWRDbWQgPSAoKSA9PiBvZih7IGNsb3NlRGF0ZVNlbGVjdDogdHJ1ZSB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBcclxuICAgIHRoaXMuc29sdXRpb25TZXJ2aWNlLmdldENvbnRyb2xDb25maWdTdGF0ZSgpLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdHJveSQpKS5zdWJzY3JpYmUoKHNpbXBsZUNvbmRpdGlvbnMpID0+IHtcclxuICAgICAgLy/nroDljZXmnaHku7ZcclxuICAgICAgbGV0IGZpbmRTaW1wbGVDb25kaXRpb24gPSBzaW1wbGVDb25kaXRpb25zLmZpbmQoaXRlbSA9PiBpdGVtWydmaWVsZENvZGUnXSA9PSB0aGlzLml0ZW1bJ2ZpZWxkQ29kZSddKTtcclxuICAgICAgaWYgKGZpbmRTaW1wbGVDb25kaXRpb24pIHtcclxuICAgICAgICB0aGlzLnVwZGF0ZVBhcmFtc0J5Q29uZGl0aW9uKGZpbmRTaW1wbGVDb25kaXRpb24pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgaWYodGhpcy5kYXRlQ2hhbmdlZENtZFN1YnNjcmlwdGlvbikge1xyXG4gICAgICB0aGlzLmRhdGVDaGFuZ2VkQ21kU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHVwZGF0ZVBhcmFtc0J5Q29uZGl0aW9uKGNvbmRpdGlvbiA9IG51bGwpIHtcclxuICAgIGxldCBjb25kaXRpb25Db250cm9sID0gbnVsbDtcclxuICAgIGNvbmRpdGlvbkNvbnRyb2wgPSBjb25kaXRpb24gPyBjb25kaXRpb24uY29udHJvbCA6IHRoaXMuaXRlbS5jb250cm9sO1xyXG4gICAgc3dpdGNoICh0aGlzLmNvbnRyb2xUeXBlKSB7XHJcbiAgICAgIGNhc2UgQ29udHJvbFR5cGUuU2luZ2xlWWVhcjpcclxuICAgICAgICB0aGlzLm1heERhdGUgPSBjb25kaXRpb25Db250cm9sLmhhc093blByb3BlcnR5KCdtYXhEYXRlJykgPyBjb25kaXRpb25Db250cm9sWydtYXhEYXRlJ10gOiB0aGlzLm1heERhdGU7XHJcbiAgICAgICAgdGhpcy5taW5EYXRlID0gY29uZGl0aW9uQ29udHJvbC5oYXNPd25Qcm9wZXJ0eSgnbWluRGF0ZScpID8gY29uZGl0aW9uQ29udHJvbFsnbWluRGF0ZSddIDogdGhpcy5taW5EYXRlO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICBvbkRhdGVDaGFuZ2UoZXZlbnQ6IGFueSkge1xyXG4gICAgaWYoZXZlbnQucmV0dXJuRm9ybWF0dGVkID09PSB0aGlzLml0ZW0udmFsdWUuZ2V0T3JpZ2luYWxWYWx1ZSgpKSB7XHJcbiAgICAgIHJldHVyblxyXG4gICAgfVxyXG4gICAgdGhpcy5pdGVtLnZhbHVlLnNldE9yaWdpbmFsVmFsdWUoe1xyXG4gICAgICBmb3JtYXR0ZWQ6IGV2ZW50LnJldHVybkZvcm1hdHRlZCxcclxuICAgICAgZGVsaW1pdGVyOiB0aGlzLmRhdGVSYW5nZURhdGVzRGVsaW1pdGVyXHJcbiAgICB9KTtcclxuICAgIC8vdGhpcy5jb25kaXRpb25DaGFuZ2UuZW1pdCgpO1xyXG4gICAgdGhpcy5ydW5EYXRlQ2hhbmdlZEV2ZW50KHRoaXMuaXRlbS52YWx1ZS5nZXRPcmlnaW5hbFZhbHVlKCkpO1xyXG4gIH1cclxuXHJcbiAgb25TcGlsdERhdGVDaGFuZ2UoZXZlbnQ6IGFueSwgdHlwZTonc3RhcnQnfCdlbmQnKSB7XHJcbiAgICBsZXQgb3JpZ2luVmFsdWUgPSB0aGlzLml0ZW0udmFsdWUuZ2V0T3JpZ2luYWxWYWx1ZSgpXHJcbiAgICBsZXQgX3N0YXJ0ID0gJycsIF9lbmQgPSAnJywgX2Zvcm1hdHRlZCA9ICcnXHJcbiAgICBpZihvcmlnaW5WYWx1ZSkge1xyXG4gICAgICBsZXQgX3ZhbHVlID0gb3JpZ2luVmFsdWUuc3BsaXQodGhpcy5kYXRlUmFuZ2VEYXRlc0RlbGltaXRlcilcclxuICAgICAgX3ZhbHVlWzBdICYmIChfc3RhcnQgPSBfdmFsdWVbMF0pXHJcbiAgICAgIF92YWx1ZVsxXSAmJiAoX2VuZCA9IF92YWx1ZVsxXSlcclxuICAgIH1cclxuICAgIGlmKHR5cGUgPT09ICdzdGFydCcpIHtcclxuXHJcbiAgICAgIF9mb3JtYXR0ZWQgPSAgZXZlbnQucmV0dXJuRm9ybWF0dGVkICsgdGhpcy5kYXRlUmFuZ2VEYXRlc0RlbGltaXRlciArIF9lbmRcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIF9mb3JtYXR0ZWQgPSBfc3RhcnQgKyB0aGlzLmRhdGVSYW5nZURhdGVzRGVsaW1pdGVyICsgZXZlbnQucmV0dXJuRm9ybWF0dGVkXHJcbiAgICB9XHJcbiAgICBpZihldmVudC5yZXR1cm5Gb3JtYXR0ZWQgPT09IHRoaXMuaXRlbS52YWx1ZS5nZXRPcmlnaW5hbFZhbHVlKCkpIHtcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbiAgICB0aGlzLml0ZW0udmFsdWUuc2V0T3JpZ2luYWxWYWx1ZSh7XHJcbiAgICAgIGZvcm1hdHRlZDogX2Zvcm1hdHRlZCxcclxuICAgICAgZGVsaW1pdGVyOiB0aGlzLmRhdGVSYW5nZURhdGVzRGVsaW1pdGVyLFxyXG4gICAgfSk7XHJcbiAgICAvL3RoaXMuY29uZGl0aW9uQ2hhbmdlLmVtaXQoKTtcclxuICAgIHRoaXMucnVuRGF0ZUNoYW5nZWRFdmVudCh0aGlzLml0ZW0udmFsdWUuZ2V0T3JpZ2luYWxWYWx1ZSgpKTtcclxuICB9XHJcbiAgb25EeW5hbWljVmFsdWVDaGFuZ2UoZXZlbnQ6IGFueSkge1xyXG4gICAgdGhpcy5pdGVtLnZhbHVlLnNldE9yaWdpbmFsVmFsdWUoe1xyXG4gICAgICBmb3JtYXR0ZWQ6IGV2ZW50XHJcbiAgICB9KTtcclxuICAgIHRoaXMucnVuRGF0ZUNoYW5nZWRFdmVudCh0aGlzLml0ZW0udmFsdWUuZ2V0T3JpZ2luYWxWYWx1ZSgpKTtcclxuICB9XHJcblxyXG4gIG9uRHluYW1pY1ZpZXdDaGFuZ2VkKGV2ZW50KSB7XHJcblxyXG4gICAgdGhpcy5pdGVtLnZhbHVlLnNldE9yaWdpbmFsVmFsdWUoZXZlbnQuc2hvd0R5bmFtaWNWaWV3ID8ge1xyXG4gICAgICBmb3JtYXR0ZWQ6IGV2ZW50LmR5bmFtaWNWYWx1ZVxyXG4gICAgfSA6IHtcclxuICAgICAgZm9ybWF0dGVkOiBldmVudC5zaW5nbGVWYWx1ZSxcclxuICAgICAgZGVsaW1pdGVyOiB0aGlzLmRhdGVSYW5nZURhdGVzRGVsaW1pdGVyXHJcbiAgICB9KTtcclxuICAgIHRoaXMucnVuRGF0ZUNoYW5nZWRFdmVudCh0aGlzLml0ZW0udmFsdWUuZ2V0T3JpZ2luYWxWYWx1ZSgpKTtcclxuICAgXHJcbiAgfVxyXG5cclxuICBnZXRDb25kaXRpb25JdGVtVGl0bGUoZmllbGQ6IFF1ZXJ5Q29uZGl0aW9uKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zb2x1dGlvblNlcnZpY2UuZ2V0Q29uZGl0aW9uSXRlbVRpdGxlKGZpZWxkKTtcclxuICB9XHJcblxyXG4gIGJlZ2luVmFsdWVDaGFuZ2UoJGV2ZW50KSB7XHJcbiAgIC8vIHRoaXMuYmVnaW5WYWx1ZSA9ICRldmVudDtcclxuICB9XHJcblxyXG4gIGVuZFZhbHVlQ2hhbmdlKCRldmVudCkge1xyXG4gICAvLyB0aGlzLmVuZFZhbHVlID0gJGV2ZW50O1xyXG4gIH1cclxuXHJcbiAgcnVuRGF0ZUNoYW5nZWRFdmVudChkYXRlOiBhbnkpIHtcclxuICAgIGlmKHRoaXMuZGF0ZUNoYW5nZWRDbWQpIHtcclxuICAgICAgdGhpcy5kYXRlQ2hhbmdlZENtZFN1YnNjcmlwdGlvbiA9IHRoaXMuZGF0ZUNoYW5nZWRDbWQoZGF0ZSkuc3Vic2NyaWJlKCh2OiBhbnkpID0+IHtcclxuICAgICAgICBpZih0eXBlb2YgdiA9PT0gXCJib29sZWFuXCIpIHtcclxuICAgICAgICAgIGlmKHYpIHtcclxuICAgICAgICAgICAgdGhpcy5jb25kaXRpb25DaGFuZ2UuZW1pdCgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZih0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2LmNsb3NlRGF0ZVNlbGVjdCAhPT0gdW5kZWZpbmVkICYmICF2LmNsb3NlRGF0ZVNlbGVjdCkge1xyXG4gICAgICAgICAgaWYodi5tZXNzYWdlKSB7XHJcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZVNlcnZpY2Uud2FybmluZyh2Lm1lc3NhZ2UpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jb25kaXRpb25DaGFuZ2UuZW1pdCgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLmNvbmRpdGlvbkNoYW5nZS5lbWl0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuY29uZGl0aW9uQ2hhbmdlLmVtaXQoKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19