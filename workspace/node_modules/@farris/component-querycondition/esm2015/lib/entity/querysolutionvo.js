/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/querysolutionvo.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { QueryConditionConvert } from "./querycondition";
import { cloneDeep } from 'lodash-es';
/**
 * 查询方案实体类
 */
export class QuerySolutionVo {
    constructor() {
        /**
         * 是否默认查询方案
         * 初始时，为false
         */
        this.isDefault = false;
        this.isChanged = false;
        this.extendId = 'query-scheme-1';
    }
}
if (false) {
    /**
     * 唯一性标识
     * @type {?}
     */
    QuerySolutionVo.prototype.id;
    /**
     * 所属ID，例如所属表单ID
     * @type {?}
     */
    QuerySolutionVo.prototype.belongId;
    /**
     * 查询方案编号
     * @type {?}
     */
    QuerySolutionVo.prototype.code;
    /**
     * 查询方案名称
     * @type {?}
     */
    QuerySolutionVo.prototype.name;
    /**
     * 查询条件
     * @type {?}
     */
    QuerySolutionVo.prototype.queryConditions;
    /**
     * 是否系统预置查询方案
     * @type {?}
     */
    QuerySolutionVo.prototype.isSystem;
    /**
     * 是否默认查询方案
     * 初始时，为false
     * @type {?}
     */
    QuerySolutionVo.prototype.isDefault;
    /** @type {?} */
    QuerySolutionVo.prototype.isChanged;
    /**
     * 类型： pre是上次查询
     * @type {?}
     */
    QuerySolutionVo.prototype.type;
    /** @type {?} */
    QuerySolutionVo.prototype.extendId;
    /** @type {?} */
    QuerySolutionVo.prototype.extendInfo;
    /** @type {?} */
    QuerySolutionVo.prototype.code_chs;
    /** @type {?} */
    QuerySolutionVo.prototype.code_en;
    /** @type {?} */
    QuerySolutionVo.prototype.code_cht;
    /**
     * 高级模式新增字段，1为标准模式，2为高级模式
     * @type {?}
     */
    QuerySolutionVo.prototype.mode;
    /**
     * 高级模式新增辅助字段，用来展示condition的树结构
     * @type {?}
     */
    QuerySolutionVo.prototype.queryConditionsAdvanced;
}
/**
 * 查询方案实体类序列化与反序列化器
 */
export class QuerySolutionVoConvertor {
    /**
     * 序列化
     * @param {?} obj 查询方案实体
     * @return {?}
     */
    convertJObject(obj) {
        /** @type {?} */
        let querySolutionVo = (/** @type {?} */ (obj));
        /** @type {?} */
        let jobj = new Object();
        jobj["id"] = querySolutionVo.id;
        jobj["belongId"] = querySolutionVo.belongId;
        jobj["code"] = querySolutionVo.code;
        jobj["name"] = querySolutionVo.name;
        jobj["isSystem"] = querySolutionVo.isSystem;
        jobj["isDefault"] = querySolutionVo.isDefault;
        jobj["type"] = querySolutionVo.type;
        jobj["extendId"] = querySolutionVo.extendId;
        jobj["extendInfo"] = querySolutionVo.extendInfo;
        jobj["code_chs"] = querySolutionVo.code_chs;
        jobj["code_en"] = querySolutionVo.code_en;
        jobj["code_cht"] = querySolutionVo.code_cht;
        jobj["mode"] = querySolutionVo.mode || '1';
        //针对树数据中做简化处理，仅保留对应条件的conditionid
        if (querySolutionVo.mode === '2') {
            // let _queryConditionsAdvanced = querySolutionVo.queryConditionsAdvanced
            // let _advancedFlatConditions = this.getFlatConditions(_queryConditionsAdvanced)
            // _advancedFlatConditions.forEach(val => val.conditionid = val.conditionid *2)
            /** @type {?} */
            let _queryConditionsAdvanced = this.simplifyTreeData(cloneDeep(querySolutionVo.queryConditionsAdvanced));
            jobj["advancedQueryConditionsString"] = JSON.stringify(_queryConditionsAdvanced);
        }
        if (querySolutionVo.queryConditions && querySolutionVo.queryConditions.length > 0) {
            /** @type {?} */
            let jArray = [];
            /** @type {?} */
            let convertor = new QueryConditionConvert();
            querySolutionVo.queryConditions.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                jArray.push(convertor.convertJObject(element));
            }));
            //向服务端发送数据时，发送query condition list的json string
            jobj["queryConditionString"] = JSON.stringify(jArray);
        }
        return jobj;
    }
    /**
     * 反序列化(初始化)
     * @param {?} jobj 查询方案序列化后的Object
     * @return {?}
     */
    initFromJobject(jobj) {
        /** @type {?} */
        let querySolutionVo = new QuerySolutionVo();
        querySolutionVo.id = jobj["id"];
        querySolutionVo.code = jobj["code"];
        querySolutionVo.name = jobj["name"];
        querySolutionVo.belongId = jobj["belongId"];
        querySolutionVo.isSystem = jobj["isSystem"];
        querySolutionVo.isDefault = jobj["isDefault"];
        querySolutionVo.type = jobj.hasOwnProperty('type') ? jobj["type"] : '';
        querySolutionVo.extendId = jobj.hasOwnProperty('extendId') ? jobj["extendId"] : "";
        querySolutionVo.queryConditions = new Array();
        //高级模式新增mode,1为传统模式，2为高级模式
        querySolutionVo.mode = jobj["mode"] || 1;
        //服务器端返回的query condition list实际是 json string
        /** @type {?} */
        const queryConditionString = jobj["queryConditionString"];
        if (queryConditionString) {
            /** @type {?} */
            const conditionJarry = JSON.parse(queryConditionString);
            /** @type {?} */
            let convertor = new QueryConditionConvert();
            conditionJarry.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                querySolutionVo.queryConditions.push(convertor.initFromJobject(element));
            }));
        }
        querySolutionVo.queryConditionsAdvanced = jobj["advancedQueryConditionsString"] ? JSON.parse(jobj["advancedQueryConditionsString"]) : null;
        return querySolutionVo;
    }
    /**
     * 从缓存中取回的JSON数据需要转化
     * 从大写转换到小写条件
     * @param {?} jobj
     * @return {?}
     */
    formatFromJobject(jobj) {
        /** @type {?} */
        let queryConditions = new Array();
        /** @type {?} */
        let conditionJarry;
        if (typeof jobj == 'string') {
            conditionJarry = JSON.parse(jobj);
        }
        else {
            conditionJarry = jobj;
        }
        /** @type {?} */
        let convertor = new QueryConditionConvert();
        conditionJarry.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            queryConditions.push(convertor.initFromJobject(element));
        }));
        return queryConditions;
    }
    /**
     * 存入缓存中
     * 从大写转换到小写条件
     * @param {?} jobj
     * @return {?}
     */
    formatConvertJObject(jobj) {
        /** @type {?} */
        let queryConditions = [];
        /** @type {?} */
        let convertor = new QueryConditionConvert();
        jobj.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            queryConditions.push(convertor.convertJObject(element));
        }));
        return queryConditions;
    }
    /**
     * 将高级模式下树结构condition扁平化
     * @param {?} data
     * @return {?}
     */
    getFlatConditions(data) {
        if (data.children) {
            return [].concat(data.items, ...data.children.map((/**
             * @param {?} val
             * @return {?}
             */
            val => this.getFlatConditions(val))));
        }
        return [].concat(data.items);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    simplifyTreeData(data) {
        if (data.items && data.items.length) {
            /** @type {?} */
            let _items = data.items.map((/**
             * @param {?} val
             * @return {?}
             */
            val => { return { conditionid: val.conditionid }; }));
            data.items = _items;
        }
        if (data.children) {
            data.children.forEach((/**
             * @param {?} val
             * @return {?}
             */
            val => this.simplifyTreeData(val)));
        }
        return data;
    }
    /**
     * @param {?} originData
     * @param {?} conditionList
     * @return {?}
     */
    complicateTreeData(originData, conditionList) {
        /** @type {?} */
        let handleFunc = (/**
         * @param {?} treeData
         * @return {?}
         */
        (treeData) => {
            if (treeData.items && treeData.items.length) {
                treeData.items = treeData.items.map((/**
                 * @param {?} val
                 * @return {?}
                 */
                val => {
                    /** @type {?} */
                    let target = conditionList.find((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => item.conditionid === val.conditionid));
                    if (target) {
                        /** @type {?} */
                        let result = cloneDeep(target);
                        result.groupid = undefined;
                        result.Lbracket = undefined;
                        result.Rbracket = undefined;
                        return result;
                    }
                    return null;
                }));
            }
            if (treeData.children && treeData.children.length) {
                treeData.children.forEach((/**
                 * @param {?} val
                 * @return {?}
                 */
                val => {
                    handleFunc(val);
                }));
            }
            //仅供返回顶层数据，遍历过程使用不到
            return treeData;
        });
        return handleFunc(originData);
    }
}
//# sourceMappingURL=data:application/json;base64,