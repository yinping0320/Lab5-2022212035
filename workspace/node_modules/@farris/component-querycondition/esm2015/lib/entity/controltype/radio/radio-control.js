/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/controltype/radio/radio-control.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlType } from "../../controltype";
import { EnumType } from "../dropdownlist/enumtype";
import { EnumValueConvert } from "../dropdownlist/ienumvalue";
import { EnumStringValue } from "../dropdownlist/stringenumvalue";
import { EnumBoolValue } from "../dropdownlist/boolenumvalue";
import { EnumIntegerValue } from "../dropdownlist/integerenumvalue";
/**
 * 单选组控件
 */
export class RadioControl {
    /**
     * 获取控件类型
     * @return {?}
     */
    getControlType() {
        return ControlType.Radio;
    }
    /**
     * @return {?}
     */
    isRequired() {
        return !!this.require;
    }
}
if (false) {
    /**
     * 单选框值类型
     * @type {?}
     */
    RadioControl.prototype.valueType;
    /**
     * 单选框数据源列表
     * 该属性为IEnumValue接口类型，具体实现类如下：
     * 1.布尔类型：EnumBoolValue
     * 2.字符串类型：EnumStringValue
     * 3.整型类型：EnumIntegerValue 例如Radio Button类型需要使用EnumIntegerValue实现类
     * @type {?}
     */
    RadioControl.prototype.enumValues;
    /**
     * 自定义样式
     * @type {?}
     */
    RadioControl.prototype.className;
    /**
     * 是否显示label
     * @type {?}
     */
    RadioControl.prototype.showLabel;
    /** @type {?} */
    RadioControl.prototype.horizontal;
    /** @type {?} */
    RadioControl.prototype.disabled;
    /** @type {?} */
    RadioControl.prototype.require;
}
/**
 * 单选组控件序列化与反序列化器
 */
export class RadioControlConvert {
    /**
     * 序列化
     * @param {?} obj 单选组控件实体
     * @return {?}
     */
    convertToObject(obj) {
        /** @type {?} */
        let radioControl = (/** @type {?} */ (obj));
        /** @type {?} */
        let jobj = new Object();
        jobj["valueType"] = radioControl.valueType;
        if (radioControl.enumValues != null) {
            /** @type {?} */
            let jarray = jobj["enumValues"] = [];
            /** @type {?} */
            let convertor = new EnumValueConvert();
            radioControl.enumValues.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                if (radioControl.valueType == EnumType.BoolType) {
                    jarray.push(convertor.convertJObject(Object.assign(new EnumBoolValue(), element)));
                }
                else if (radioControl.valueType == EnumType.IntType) {
                    jarray.push(convertor.convertJObject(Object.assign(new EnumIntegerValue(), element)));
                }
                else {
                    jarray.push(convertor.convertJObject(Object.assign(new EnumStringValue(), element)));
                }
            }));
        }
        jobj["horizontal"] = radioControl.horizontal;
        jobj["showLabel"] = radioControl.showLabel;
        jobj["disabled"] = radioControl.disabled;
        jobj["className"] = radioControl.className;
        jobj["require"] = radioControl.require;
        return jobj;
    }
    /**
     * 反序列化
     * @param {?} jobj 单选组控件实体序列化后的JSON对象
     * @return {?}
     */
    initFromObject(jobj) {
        /** @type {?} */
        let control = new RadioControl();
        if (jobj["valueType"] != null) {
            control.valueType = (/** @type {?} */ (jobj["valueType"]));
        }
        if (jobj["enumValues"] != null) {
            control.enumValues = new Array();
            jobj["enumValues"].forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                /** @type {?} */
                let convertor = new EnumValueConvert();
                control.enumValues.push(convertor.initFromJobject(element));
            }));
        }
        if (jobj["horizontal"] != null) {
            control.horizontal = jobj["horizontal"];
        }
        if (jobj["showLabel"] != null) {
            control.showLabel = jobj["showLabel"];
        }
        if (jobj["disabled"] != null) {
            control.disabled = jobj["disabled"];
        }
        if (jobj["className"] != null) {
            control.className = jobj["className"];
        }
        if (jobj["require"] != null) {
            control.require = jobj["require"];
        }
        return control;
    }
}
//# sourceMappingURL=data:application/json;base64,