/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/ivalue.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlType } from "../controltype";
import { TextValue } from "./textvalue";
import { NumberRangeValueConvertor, NumberRangeValue } from "./numberrangevaue";
import { DateRangeValue } from "./daterangevalue";
import { SmartHelpValue } from "./smarthelpvalue";
import { SingleDateValue } from './single-date-value';
import { SingleNumberValue } from './single-number-value';
import { SingleYearValue } from './single-year-value';
import { CheckBoxValue } from './checkbox-value';
import { DropDownListValue } from './dropdownlistvalue';
import { SingleMonthValue } from './single-month-value';
import { MonthRangeValue } from './month-range-value';
import { SingleDateTimeValue } from './single-date-time-value';
import { ComboLookUpValue } from './combolookup-value';
import { RadioValue } from './radio-value';
import { InputGroupValue } from './inputgroupvalue';
/**
 * @record
 */
export function IValue() { }
if (false) {
    /**
     * @return {?}
     */
    IValue.prototype.getControlType = function () { };
    /**
     * @return {?}
     */
    IValue.prototype.getOriginalValue = function () { };
    /**
     * @param {?} value
     * @return {?}
     */
    IValue.prototype.setOriginalValue = function (value) { };
    /**
     * @return {?}
     */
    IValue.prototype.clearValue = function () { };
    /**
     * @return {?}
     */
    IValue.prototype.isEmpty = function () { };
}
export class ConditionValueConvert {
    /**
     * 序列化
     * 为了兼容C#产生的旧数据，向server传递的JSON object属性名全改为首字母大写
     * @param {?} obj
     * @return {?}
     */
    convertToObject(obj) {
        /** @type {?} */
        let conditionValue = (/** @type {?} */ (obj));
        /** @type {?} */
        let controlType = conditionValue.getControlType();
        /** @type {?} */
        let jobj = new Object();
        jobj["Type"] = controlType;
        if (controlType == ControlType.NumberRange) {
            /** @type {?} */
            let convertor = new NumberRangeValueConvertor();
            jobj["Content"] = convertor.convertToObject(conditionValue);
        }
        else {
            jobj["Content"] = conditionValue;
        }
        return jobj;
    }
    /**
     * @param {?} jobj
     * @return {?}
     */
    initFromObject(jobj) {
        /** @type {?} */
        let content = jobj["Content"];
        switch (jobj["Type"]) {
            case ControlType.Text:
                return new TextValue(jobj["Content"]);
            case ControlType.NumberRange:
                return new NumberRangeValue(jobj["Content"]);
            case ControlType.DateRange:
            case ControlType.DateTimeRange:
                return new DateRangeValue(jobj["Content"]);
            case ControlType.DropDownList:
                return new DropDownListValue(jobj["Content"]);
            case ControlType.SmartHelp:
                return new SmartHelpValue(jobj["Content"]);
            case ControlType.ComboLookUp:
                return new ComboLookUpValue(jobj["Content"]);
            case ControlType.SingleDate:
                return Object.assign(new SingleDateValue(), (/** @type {?} */ (content)));
            case ControlType.SingleNumber:
                return Object.assign(new SingleNumberValue(), (/** @type {?} */ (content)));
            case ControlType.SingleYear:
                return Object.assign(new SingleYearValue(), (/** @type {?} */ (content)));
            case ControlType.BoolCheck:
                return Object.assign(new CheckBoxValue(), (/** @type {?} */ (content)));
            case ControlType.Radio:
                return Object.assign(new RadioValue(), (/** @type {?} */ (content)));
            case ControlType.SingleMonth:
                return Object.assign(new SingleMonthValue(), (/** @type {?} */ (content)));
            case ControlType.MonthRange:
                return Object.assign(new MonthRangeValue(), (/** @type {?} */ (content)));
            case ControlType.SingleDateTime:
                return Object.assign(new SingleDateTimeValue(), (/** @type {?} */ (content)));
            case ControlType.InputGroup:
                return Object.assign(new InputGroupValue(), (/** @type {?} */ (content)));
        }
    }
}
//# sourceMappingURL=data:application/json;base64,