/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/combolookup-value.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlType } from "../controltype";
import { cloneDeep } from 'lodash-es';
export class ComboLookUpValue {
    /**
     * @return {?}
     */
    clearValue() {
        this.value = [];
        this.valueField = undefined;
        this.textValue = undefined;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        throw new Error("Method not implemented.");
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        /** @type {?} */
        const args = this.valueField.split('.');
        /** @type {?} */
        const valueArr = this.value.map((/**
         * @param {?} helpItem
         * @return {?}
         */
        helpItem => this.getPropValue(helpItem, cloneDeep(args))));
        return valueArr && valueArr.length ? valueArr.join(',') : '';
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.ComboLookUp;
    }
    /**
     * @param {?=} data
     */
    constructor(data = { value: [], valueField: undefined, textValue: undefined }) {
        if (data.textValue) { //新结构，value是数组
            this.valueField = data.valueField;
            this.value = data.value;
            this.textValue = data.textValue;
        }
        else { //旧结构，value是对象
            this.valueField = data.valueField ? data.valueField : '';
            this.value = (data.value && data.value.data) ? [data.value.data] : [];
            this.textValue = 'help-text-value-null'; //旧结构无textValue属性
        }
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.valueField;
    }
    /**
     * @param {?} helpItem
     * @param {?} args
     * @return {?}
     */
    getPropValue(helpItem, args) {
        if (args.length > 1) {
            /** @type {?} */
            const arg = args.shift();
            return helpItem[arg] ? this.getPropValue(helpItem[arg], args) : null;
        }
        return helpItem[args[0]];
    }
    /**
     * @param {?} textField
     * @return {?}
     */
    getTextValue(textField) {
        /** @type {?} */
        const args = textField.split('.');
        /** @type {?} */
        const textArr = this.value.map((/**
         * @param {?} helpItem
         * @return {?}
         */
        helpItem => this.getPropValue(helpItem, cloneDeep(args))));
        return textArr && textArr.length ? textArr.join(',') : '';
    }
}
if (false) {
    /** @type {?} */
    ComboLookUpValue.prototype.valueField;
    /** @type {?} */
    ComboLookUpValue.prototype.value;
    /** @type {?} */
    ComboLookUpValue.prototype.textValue;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tYm9sb29rdXAtdmFsdWUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbXBvbmVudC1xdWVyeWNvbmRpdGlvbi8iLCJzb3VyY2VzIjpbImxpYi9lbnRpdHkvY29uZGl0aW9udmFsdWUvY29tYm9sb29rdXAtdmFsdWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUV0QyxNQUFNLE9BQU8sZ0JBQWdCOzs7O0lBQ3pCLFVBQVU7UUFDTixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFJLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQztRQUM1QixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztJQUMvQixDQUFDOzs7OztJQUNELGdCQUFnQixDQUFDLEtBQVU7UUFDdkIsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQy9DLENBQUM7Ozs7SUFDRCxnQkFBZ0I7O2NBQ04sSUFBSSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQzs7Y0FDakMsUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRzs7OztRQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUM7UUFDekYsT0FBTyxRQUFRLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ2pFLENBQUM7Ozs7SUFDRCxjQUFjO1FBQ1YsT0FBTyxXQUFXLENBQUMsV0FBVyxDQUFDO0lBQ25DLENBQUM7Ozs7SUFNRCxZQUFZLE9BSVIsRUFBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBQztRQUN4RCxJQUFHLElBQUksQ0FBQyxTQUFTLEVBQUMsRUFBQyxjQUFjO1lBQzdCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztZQUNsQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDeEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1NBQ25DO2FBQUksRUFBQyxjQUFjO1lBQ2hCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQ3pELElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQ3RFLElBQUksQ0FBQyxTQUFTLEdBQUcsc0JBQXNCLENBQUMsQ0FBQyxpQkFBaUI7U0FDN0Q7SUFFTCxDQUFDOzs7O0lBQ0QsT0FBTztRQUNILE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQzVCLENBQUM7Ozs7OztJQUVELFlBQVksQ0FBQyxRQUFhLEVBQUUsSUFBbUI7UUFDM0MsSUFBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBQzs7a0JBQ1QsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDeEIsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7U0FDeEU7UUFDRCxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3QixDQUFDOzs7OztJQUVELFlBQVksQ0FBQyxTQUFpQjs7Y0FDcEIsSUFBSSxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDOztjQUMzQixPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHOzs7O1FBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQztRQUN4RixPQUFPLE9BQU8sSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDOUQsQ0FBQztDQUVKOzs7SUF0Q0csc0NBQWtCOztJQUNsQixpQ0FBWTs7SUFDWixxQ0FBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJVmFsdWUgfSBmcm9tIFwiLi9pdmFsdWVcIjtcclxuaW1wb3J0IHsgQ29udHJvbFR5cGUgfSBmcm9tIFwiLi4vY29udHJvbHR5cGVcIjtcclxuaW1wb3J0IHsgY2xvbmVEZWVwIH0gZnJvbSAnbG9kYXNoLWVzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBDb21ib0xvb2tVcFZhbHVlIGltcGxlbWVudHMgSVZhbHVle1xyXG4gICAgY2xlYXJWYWx1ZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnZhbHVlID0gW107XHJcbiAgICAgICAgdGhpcy52YWx1ZUZpZWxkID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMudGV4dFZhbHVlID0gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICAgc2V0T3JpZ2luYWxWYWx1ZSh2YWx1ZTogYW55KTogdm9pZCB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XHJcbiAgICB9XHJcbiAgICBnZXRPcmlnaW5hbFZhbHVlKCk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgYXJncyA9IHRoaXMudmFsdWVGaWVsZC5zcGxpdCgnLicpO1xyXG4gICAgICAgIGNvbnN0IHZhbHVlQXJyID0gdGhpcy52YWx1ZS5tYXAoaGVscEl0ZW0gPT4gdGhpcy5nZXRQcm9wVmFsdWUoaGVscEl0ZW0sIGNsb25lRGVlcChhcmdzKSkpO1xyXG4gICAgICAgIHJldHVybiB2YWx1ZUFyciAmJiB2YWx1ZUFyci5sZW5ndGggPyB2YWx1ZUFyci5qb2luKCcsJykgOiAnJztcclxuICAgIH1cclxuICAgIGdldENvbnRyb2xUeXBlKCk6IENvbnRyb2xUeXBlIHtcclxuICAgICAgICByZXR1cm4gQ29udHJvbFR5cGUuQ29tYm9Mb29rVXA7XHJcbiAgICB9XHJcblxyXG4gICAgdmFsdWVGaWVsZDpzdHJpbmc7XHJcbiAgICB2YWx1ZTphbnlbXTtcclxuICAgIHRleHRWYWx1ZTogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGRhdGE6IHtcclxuICAgICAgICB2YWx1ZTogYW55LCBcclxuICAgICAgICB2YWx1ZUZpZWxkOiBzdHJpbmcsXHJcbiAgICAgICAgdGV4dFZhbHVlOiBzdHJpbmc7XHJcbiAgICB9ID0ge3ZhbHVlOiBbXSwgdmFsdWVGaWVsZDogdW5kZWZpbmVkLCB0ZXh0VmFsdWU6IHVuZGVmaW5lZH0pe1xyXG4gICAgICAgIGlmKGRhdGEudGV4dFZhbHVlKXsvL+aWsOe7k+aehO+8jHZhbHVl5piv5pWw57uEXHJcbiAgICAgICAgICAgIHRoaXMudmFsdWVGaWVsZCA9IGRhdGEudmFsdWVGaWVsZDtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IGRhdGEudmFsdWU7XHJcbiAgICAgICAgICAgIHRoaXMudGV4dFZhbHVlID0gZGF0YS50ZXh0VmFsdWU7XHJcbiAgICAgICAgfWVsc2V7Ly/ml6fnu5PmnoTvvIx2YWx1ZeaYr+WvueixoVxyXG4gICAgICAgICAgICB0aGlzLnZhbHVlRmllbGQgPSBkYXRhLnZhbHVlRmllbGQgPyBkYXRhLnZhbHVlRmllbGQgOiAnJztcclxuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IChkYXRhLnZhbHVlICYmIGRhdGEudmFsdWUuZGF0YSkgPyBbZGF0YS52YWx1ZS5kYXRhXSA6IFtdO1xyXG4gICAgICAgICAgICB0aGlzLnRleHRWYWx1ZSA9ICdoZWxwLXRleHQtdmFsdWUtbnVsbCc7IC8v5pen57uT5p6E5pegdGV4dFZhbHVl5bGe5oCnXHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuICAgIGlzRW1wdHkoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuICF0aGlzLnZhbHVlRmllbGQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UHJvcFZhbHVlKGhlbHBJdGVtOiBhbnksIGFyZ3M6IEFycmF5PHN0cmluZz4pOiBhbnl7XHJcbiAgICAgICAgaWYoYXJncy5sZW5ndGggPiAxKXtcclxuICAgICAgICAgICAgY29uc3QgYXJnID0gYXJncy5zaGlmdCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gaGVscEl0ZW1bYXJnXSA/IHRoaXMuZ2V0UHJvcFZhbHVlKGhlbHBJdGVtW2FyZ10sIGFyZ3MpIDogbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGhlbHBJdGVtW2FyZ3NbMF1dO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFRleHRWYWx1ZSh0ZXh0RmllbGQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgYXJncyA9IHRleHRGaWVsZC5zcGxpdCgnLicpO1xyXG4gICAgICAgIGNvbnN0IHRleHRBcnIgPSB0aGlzLnZhbHVlLm1hcChoZWxwSXRlbSA9PiB0aGlzLmdldFByb3BWYWx1ZShoZWxwSXRlbSwgY2xvbmVEZWVwKGFyZ3MpKSk7XHJcbiAgICAgICAgcmV0dXJuIHRleHRBcnIgJiYgdGV4dEFyci5sZW5ndGggPyB0ZXh0QXJyLmpvaW4oJywnKSA6ICcnO1xyXG4gICAgfVxyXG5cclxufSJdfQ==