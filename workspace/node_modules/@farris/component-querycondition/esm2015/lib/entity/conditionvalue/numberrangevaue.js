/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/numberrangevaue.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlType } from "../controltype";
export class NumberRangeValue {
    /**
     * @return {?}
     */
    isEmpty() {
        return (this.startValue == null && this.endValue == null);
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.startValue = undefined;
        this.endValue = undefined;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        throw new Error("Method not implemented.");
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return {
            begin: this.startValue,
            end: this.endValue
        };
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.NumberRange;
    }
    /**
     * @param {?=} data
     */
    constructor(data = { startValue: null, endValue: null }) {
        this.startValue = data.startValue == null ? null : parseFloat(data.startValue);
        this.endValue = data.endValue == null ? null : parseFloat(data.endValue);
    }
}
if (false) {
    /** @type {?} */
    NumberRangeValue.prototype.startValue;
    /** @type {?} */
    NumberRangeValue.prototype.endValue;
}
export class NumberRangeValueConvertor {
    /**
     * @param {?} obj
     * @return {?}
     */
    convertToObject(obj) {
        /** @type {?} */
        let numberRangeValue = (/** @type {?} */ (obj));
        /** @type {?} */
        let jobj = new Object();
        jobj["startValue"] = numberRangeValue.startValue;
        jobj["endValue"] = numberRangeValue.endValue;
        return jobj;
    }
    /**
     * @param {?} jobj
     * @return {?}
     */
    initFromObject(jobj) {
        /** @type {?} */
        let numberRangeValue = new NumberRangeValue();
        if (jobj["startValue"]) {
            //key point！as Number并不会转化格式
            numberRangeValue.startValue = parseFloat(jobj["startValue"]);
        }
        if (jobj["endValue"]) {
            numberRangeValue.endValue = parseFloat(jobj["endValue"]);
        }
        return numberRangeValue;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVycmFuZ2V2YXVlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9jb21wb25lbnQtcXVlcnljb25kaXRpb24vIiwic291cmNlcyI6WyJsaWIvZW50aXR5L2NvbmRpdGlvbnZhbHVlL251bWJlcnJhbmdldmF1ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU3QyxNQUFNLE9BQU8sZ0JBQWdCOzs7O0lBQ3pCLE9BQU87UUFDSCxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsQ0FBQztJQUM5RCxDQUFDOzs7O0lBQ0QsVUFBVTtRQUNOLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO1FBQzVCLElBQUksQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDO0lBQzlCLENBQUM7Ozs7O0lBQ0QsZ0JBQWdCLENBQUMsS0FBVTtRQUN2QixNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7SUFDL0MsQ0FBQzs7OztJQUNELGdCQUFnQjtRQUNaLE9BQU87WUFDSCxLQUFLLEVBQUUsSUFBSSxDQUFDLFVBQVU7WUFDdEIsR0FBRyxFQUFFLElBQUksQ0FBQyxRQUFRO1NBQ3JCLENBQUM7SUFDTixDQUFDOzs7O0lBQ0QsY0FBYztRQUNWLE9BQU8sV0FBVyxDQUFDLFdBQVcsQ0FBQztJQUNuQyxDQUFDOzs7O0lBR0QsWUFBWSxPQUErQyxFQUFDLFVBQVUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBQztRQUN6RixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDL0UsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzdFLENBQUM7Q0FDSjs7O0lBTkcsc0NBQW1COztJQUNuQixvQ0FBaUI7O0FBT3JCLE1BQU0sT0FBTyx5QkFBeUI7Ozs7O0lBQ2xDLGVBQWUsQ0FBQyxHQUFXOztZQUNuQixnQkFBZ0IsR0FBRyxtQkFBQSxHQUFHLEVBQW9COztZQUMxQyxJQUFJLEdBQUcsSUFBSSxNQUFNLEVBQUU7UUFDdkIsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLGdCQUFnQixDQUFDLFVBQVUsQ0FBQztRQUNqRCxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsZ0JBQWdCLENBQUMsUUFBUSxDQUFDO1FBQzdDLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7Ozs7O0lBRUQsY0FBYyxDQUFDLElBQVk7O1lBQ25CLGdCQUFnQixHQUFHLElBQUksZ0JBQWdCLEVBQUU7UUFDN0MsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFDcEIsNEJBQTRCO1lBQzVCLGdCQUFnQixDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7U0FDaEU7UUFDRCxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUNsQixnQkFBZ0IsQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1NBQzVEO1FBQ0QsT0FBTyxnQkFBZ0IsQ0FBQztJQUM1QixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJVmFsdWUgfSBmcm9tIFwiLi9pdmFsdWVcIjtcclxuaW1wb3J0IHsgQ29udHJvbFR5cGUgfSBmcm9tIFwiLi4vY29udHJvbHR5cGVcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBOdW1iZXJSYW5nZVZhbHVlIGltcGxlbWVudHMgSVZhbHVlIHtcclxuICAgIGlzRW1wdHkoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLnN0YXJ0VmFsdWUgPT0gbnVsbCAmJiB0aGlzLmVuZFZhbHVlID09IG51bGwpO1xyXG4gICAgfVxyXG4gICAgY2xlYXJWYWx1ZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnN0YXJ0VmFsdWUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5lbmRWYWx1ZSA9IHVuZGVmaW5lZDtcclxuICAgIH1cclxuICAgIHNldE9yaWdpbmFsVmFsdWUodmFsdWU6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgZ2V0T3JpZ2luYWxWYWx1ZSgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBiZWdpbjogdGhpcy5zdGFydFZhbHVlLFxyXG4gICAgICAgICAgICBlbmQ6IHRoaXMuZW5kVmFsdWVcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgZ2V0Q29udHJvbFR5cGUoKTogQ29udHJvbFR5cGUge1xyXG4gICAgICAgIHJldHVybiBDb250cm9sVHlwZS5OdW1iZXJSYW5nZTtcclxuICAgIH1cclxuICAgIHN0YXJ0VmFsdWU6IG51bWJlcjtcclxuICAgIGVuZFZhbHVlOiBudW1iZXI7XHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhOiB7c3RhcnRWYWx1ZTogc3RyaW5nLCBlbmRWYWx1ZTogc3RyaW5nfSA9IHtzdGFydFZhbHVlOiBudWxsLCBlbmRWYWx1ZTogbnVsbH0pe1xyXG4gICAgICAgIHRoaXMuc3RhcnRWYWx1ZSA9IGRhdGEuc3RhcnRWYWx1ZSA9PSBudWxsID8gbnVsbCA6IHBhcnNlRmxvYXQoZGF0YS5zdGFydFZhbHVlKTtcclxuICAgICAgICB0aGlzLmVuZFZhbHVlID0gZGF0YS5lbmRWYWx1ZSA9PSBudWxsID8gbnVsbCA6IHBhcnNlRmxvYXQoZGF0YS5lbmRWYWx1ZSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBOdW1iZXJSYW5nZVZhbHVlQ29udmVydG9yIHtcclxuICAgIGNvbnZlcnRUb09iamVjdChvYmo6IElWYWx1ZSk6IE9iamVjdCB7XHJcbiAgICAgICAgbGV0IG51bWJlclJhbmdlVmFsdWUgPSBvYmogYXMgTnVtYmVyUmFuZ2VWYWx1ZTtcclxuICAgICAgICBsZXQgam9iaiA9IG5ldyBPYmplY3QoKTtcclxuICAgICAgICBqb2JqW1wic3RhcnRWYWx1ZVwiXSA9IG51bWJlclJhbmdlVmFsdWUuc3RhcnRWYWx1ZTtcclxuICAgICAgICBqb2JqW1wiZW5kVmFsdWVcIl0gPSBudW1iZXJSYW5nZVZhbHVlLmVuZFZhbHVlO1xyXG4gICAgICAgIHJldHVybiBqb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIGluaXRGcm9tT2JqZWN0KGpvYmo6IE9iamVjdCk6IE51bWJlclJhbmdlVmFsdWUge1xyXG4gICAgICAgIGxldCBudW1iZXJSYW5nZVZhbHVlID0gbmV3IE51bWJlclJhbmdlVmFsdWUoKTtcclxuICAgICAgICBpZiAoam9ialtcInN0YXJ0VmFsdWVcIl0pIHtcclxuICAgICAgICAgICAgLy9rZXkgcG9pbnTvvIFhcyBOdW1iZXLlubbkuI3kvJrovazljJbmoLzlvI9cclxuICAgICAgICAgICAgbnVtYmVyUmFuZ2VWYWx1ZS5zdGFydFZhbHVlID0gcGFyc2VGbG9hdChqb2JqW1wic3RhcnRWYWx1ZVwiXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChqb2JqW1wiZW5kVmFsdWVcIl0pIHtcclxuICAgICAgICAgICAgbnVtYmVyUmFuZ2VWYWx1ZS5lbmRWYWx1ZSA9IHBhcnNlRmxvYXQoam9ialtcImVuZFZhbHVlXCJdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bWJlclJhbmdlVmFsdWU7XHJcbiAgICB9XHJcbn0iXX0=