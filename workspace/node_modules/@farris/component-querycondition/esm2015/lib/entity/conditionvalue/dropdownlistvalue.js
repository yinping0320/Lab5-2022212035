/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/dropdownlistvalue.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlType } from "../controltype";
export class DropDownListValue {
    //旧结构无，新结构为选中的value值，多选是以,分割的字符串
    /**
     * @param {?=} data
     */
    constructor(data = { value: [], key: undefined }) {
        this.value = []; //旧结构{Type: '', Content: {value: string, name: string}} 新结构Array[{value: string, name: string}]
        if (data.value && data.value.length > 0) { //已有初始值[]
            if (data.hasOwnProperty('key')) { //新结构
                this.value = data.value;
                this.key = data.key;
            }
            else { //旧结构
                this.value = data.value['Content'] && data.value['Content'].value ? [data.value['Content']] : [];
                this.key = data.value['Content'] && data.value['Content'].value ? data.value['Content'].value : undefined;
            }
        }
        else {
            this.clearValue();
        }
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.value = [];
        this.key = undefined;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    setOriginalValue(data) { }
    /**
     * @return {?}
     */
    getOriginalValue() {
        return this.key;
    }
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.DropDownList;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.key;
    }
}
if (false) {
    /** @type {?} */
    DropDownListValue.prototype.value;
    /** @type {?} */
    DropDownListValue.prototype.key;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd25saXN0dmFsdWUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbXBvbmVudC1xdWVyeWNvbmRpdGlvbi8iLCJzb3VyY2VzIjpbImxpYi9lbnRpdHkvY29uZGl0aW9udmFsdWUvZHJvcGRvd25saXN0dmFsdWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHN0MsTUFBTSxPQUFPLGlCQUFpQjs7Ozs7SUFjMUIsWUFBWSxPQUFrQyxFQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBQztRQUZ6RSxVQUFLLEdBQVEsRUFBRSxDQUFDLENBQUEsK0ZBQStGO1FBRzNHLElBQUcsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUMsRUFBQyxTQUFTO1lBQzdDLElBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsRUFBQyxFQUFDLEtBQUs7Z0JBQ2hDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztnQkFDeEIsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO2FBQ3ZCO2lCQUFJLEVBQUMsS0FBSztnQkFDUCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7Z0JBQ2pHLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUEsQ0FBQyxDQUFDLFNBQVMsQ0FBQzthQUM1RztTQUNKO2FBQUk7WUFDRCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7U0FDckI7SUFDTCxDQUFDOzs7O0lBekJELFVBQVU7UUFDTixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFJLENBQUMsR0FBRyxHQUFHLFNBQVMsQ0FBQztJQUN6QixDQUFDOzs7OztJQUNELGdCQUFnQixDQUFDLElBQUksSUFBUyxDQUFDOzs7O0lBQy9CLGdCQUFnQjtRQUNaLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNwQixDQUFDOzs7O0lBQ0QsY0FBYztRQUNWLE9BQU8sV0FBVyxDQUFDLFlBQVksQ0FBQztJQUNwQyxDQUFDOzs7O0lBZ0JELE9BQU87UUFDSCxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNyQixDQUFDO0NBQ0o7OztJQWxCRyxrQ0FBZ0I7O0lBQ2hCLGdDQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVZhbHVlIH0gZnJvbSBcIi4vaXZhbHVlXCI7XHJcbmltcG9ydCB7IENvbnRyb2xUeXBlIH0gZnJvbSBcIi4uL2NvbnRyb2x0eXBlXCI7XHJcbmltcG9ydCB7IElFbnVtVmFsdWUsIEVudW1WYWx1ZUNvbnZlcnQgfSBmcm9tIFwiLi4vY29udHJvbHR5cGUvZHJvcGRvd25saXN0L2llbnVtdmFsdWVcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBEcm9wRG93bkxpc3RWYWx1ZSBpbXBsZW1lbnRzIElWYWx1ZXtcclxuICAgIGNsZWFyVmFsdWUoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IFtdO1xyXG4gICAgICAgIHRoaXMua2V5ID0gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICAgc2V0T3JpZ2luYWxWYWx1ZShkYXRhKTogdm9pZCB7fVxyXG4gICAgZ2V0T3JpZ2luYWxWYWx1ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5rZXk7XHJcbiAgICB9XHJcbiAgICBnZXRDb250cm9sVHlwZSgpOiBDb250cm9sVHlwZSB7XHJcbiAgICAgICAgcmV0dXJuIENvbnRyb2xUeXBlLkRyb3BEb3duTGlzdDtcclxuICAgIH1cclxuICAgIHZhbHVlOiBhbnkgPSBbXTsvL+aXp+e7k+aehHtUeXBlOiAnJywgQ29udGVudDoge3ZhbHVlOiBzdHJpbmcsIG5hbWU6IHN0cmluZ319IOaWsOe7k+aehEFycmF5W3t2YWx1ZTogc3RyaW5nLCBuYW1lOiBzdHJpbmd9XVxyXG4gICAga2V5OiBzdHJpbmc7Ly/ml6fnu5PmnoTml6DvvIzmlrDnu5PmnoTkuLrpgInkuK3nmoR2YWx1ZeWAvO+8jOWkmumAieaYr+S7pSzliIblibLnmoTlrZfnrKbkuLJcclxuICAgIGNvbnN0cnVjdG9yKGRhdGE6IHt2YWx1ZTogYW55LCBrZXk6IHN0cmluZ30gPSB7dmFsdWU6IFtdLCBrZXk6IHVuZGVmaW5lZH0pe1xyXG4gICAgICAgIGlmKGRhdGEudmFsdWUgJiYgZGF0YS52YWx1ZS5sZW5ndGggPiAwKXsvL+W3suacieWIneWni+WAvFtdXHJcbiAgICAgICAgICAgIGlmKGRhdGEuaGFzT3duUHJvcGVydHkoJ2tleScpKXsvL+aWsOe7k+aehFxyXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IGRhdGEudmFsdWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmtleSA9IGRhdGEua2V5O1xyXG4gICAgICAgICAgICB9ZWxzZXsvL+aXp+e7k+aehFxyXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IGRhdGEudmFsdWVbJ0NvbnRlbnQnXSAmJiBkYXRhLnZhbHVlWydDb250ZW50J10udmFsdWUgPyBbZGF0YS52YWx1ZVsnQ29udGVudCddXSA6IFtdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5rZXkgPSBkYXRhLnZhbHVlWydDb250ZW50J10gJiYgZGF0YS52YWx1ZVsnQ29udGVudCddLnZhbHVlID8gZGF0YS52YWx1ZVsnQ29udGVudCddLnZhbHVlOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgdGhpcy5jbGVhclZhbHVlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaXNFbXB0eSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gIXRoaXMua2V5O1xyXG4gICAgfVxyXG59Il19