/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/conditionvalue/smarthelpvalue.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ControlType } from "../controltype";
import { cloneDeep } from 'lodash-es';
export class SmartHelpValue {
    /**
     * @return {?}
     */
    getControlType() {
        return ControlType.SmartHelp;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setOriginalValue(value) {
        throw new Error("Method not implemented.");
    }
    /**
     * @return {?}
     */
    getOriginalValue() {
        /** @type {?} */
        const args = this.valueField.split('.');
        /** @type {?} */
        const valueArr = this.value.map((/**
         * @param {?} helpItem
         * @return {?}
         */
        helpItem => this.getPropValue(helpItem, cloneDeep(args))));
        return valueArr && valueArr.length ? valueArr.join(',') : '';
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.value = [];
        this.valueField = undefined;
        this.textValue = undefined;
        this.isInputText = undefined;
    }
    /**
     * @return {?}
     */
    isEmpty() {
        return !this.value.length;
    }
    /**
     * @param {?=} data
     */
    constructor(data = { value: [], valueField: undefined, textValue: undefined, isInputText: undefined }) {
        if (data.textValue) {
            this.value = data.value;
            this.valueField = data.valueField;
            this.textValue = data.textValue;
            this.isInputText = data.isInputText;
        }
        else {
            //帮助未支持多选时，没有textValue属性，所有值都是通过选择产生的
            this.value = data.value;
            this.valueField = data.valueField ? data.valueField : '';
            this.textValue = 'help-text-value-null';
            this.isInputText = false;
        }
    }
    /**
     * @param {?} textField
     * @return {?}
     */
    getTextValue(textField) {
        /** @type {?} */
        const args = textField.split('.');
        /** @type {?} */
        const textArr = this.value.map((/**
         * @param {?} helpItem
         * @return {?}
         */
        helpItem => this.getPropValue(helpItem, cloneDeep(args))));
        return textArr && textArr.length ? textArr.join(',') : '';
    }
    /**
     * @param {?} helpItem
     * @param {?} args
     * @return {?}
     */
    getPropValue(helpItem, args) {
        if (args.length > 1) {
            /** @type {?} */
            const arg = args.shift();
            return helpItem[arg] ? this.getPropValue(helpItem[arg], args) : null;
        }
        return helpItem[args[0]];
    }
}
if (false) {
    /** @type {?} */
    SmartHelpValue.prototype.value;
    /** @type {?} */
    SmartHelpValue.prototype.valueField;
    /** @type {?} */
    SmartHelpValue.prototype.textValue;
    /** @type {?} */
    SmartHelpValue.prototype.isInputText;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21hcnRoZWxwdmFsdWUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbXBvbmVudC1xdWVyeWNvbmRpdGlvbi8iLCJzb3VyY2VzIjpbImxpYi9lbnRpdHkvY29uZGl0aW9udmFsdWUvc21hcnRoZWxwdmFsdWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUV0QyxNQUFNLE9BQU8sY0FBYzs7OztJQUV2QixjQUFjO1FBQ1YsT0FBTyxXQUFXLENBQUMsU0FBUyxDQUFDO0lBQ2pDLENBQUM7Ozs7O0lBRUQsZ0JBQWdCLENBQUMsS0FBVTtRQUN2QixNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7SUFDL0MsQ0FBQzs7OztJQUVELGdCQUFnQjs7Y0FDTixJQUFJLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDOztjQUNqQyxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHOzs7O1FBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQztRQUN6RixPQUFPLFFBQVEsSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDakUsQ0FBQzs7OztJQUVELFVBQVU7UUFDTixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNoQixJQUFJLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQztRQUM1QixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsV0FBVyxHQUFHLFNBQVMsQ0FBQztJQUNqQyxDQUFDOzs7O0lBRUQsT0FBTztRQUNILE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztJQUM5QixDQUFDOzs7O0lBUUQsWUFBWSxPQUtSLEVBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBQztRQUNoRixJQUFHLElBQUksQ0FBQyxTQUFTLEVBQUM7WUFDZCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDeEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1lBQ2xDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUNoQyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7U0FDdkM7YUFBSTtZQUNELHFDQUFxQztZQUNyQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDeEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDekQsSUFBSSxDQUFDLFNBQVMsR0FBRyxzQkFBc0IsQ0FBQztZQUN4QyxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztTQUM1QjtJQUNMLENBQUM7Ozs7O0lBRUQsWUFBWSxDQUFDLFNBQWlCOztjQUNwQixJQUFJLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7O2NBQzNCLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUc7Ozs7UUFBQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDO1FBQ3hGLE9BQU8sT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUM5RCxDQUFDOzs7Ozs7SUFFRCxZQUFZLENBQUMsUUFBYSxFQUFFLElBQW1CO1FBQzNDLElBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUM7O2tCQUNULEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ3hCLE9BQU8sUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1NBQ3hFO1FBQ0QsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0IsQ0FBQztDQUNKOzs7SUF2Q0csK0JBQWE7O0lBQ2Isb0NBQW1COztJQUNuQixtQ0FBa0I7O0lBRWxCLHFDQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElWYWx1ZSB9IGZyb20gXCIuL2l2YWx1ZVwiO1xyXG5pbXBvcnQgeyBDb250cm9sVHlwZSB9IGZyb20gXCIuLi9jb250cm9sdHlwZVwiO1xyXG5pbXBvcnQgeyBjbG9uZURlZXAgfSBmcm9tICdsb2Rhc2gtZXMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNtYXJ0SGVscFZhbHVlIGltcGxlbWVudHMgSVZhbHVle1xyXG5cclxuICAgIGdldENvbnRyb2xUeXBlKCk6IENvbnRyb2xUeXBlIHtcclxuICAgICAgICByZXR1cm4gQ29udHJvbFR5cGUuU21hcnRIZWxwO1xyXG4gICAgfVxyXG5cclxuICAgIHNldE9yaWdpbmFsVmFsdWUodmFsdWU6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldE9yaWdpbmFsVmFsdWUoKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCBhcmdzID0gdGhpcy52YWx1ZUZpZWxkLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgY29uc3QgdmFsdWVBcnIgPSB0aGlzLnZhbHVlLm1hcChoZWxwSXRlbSA9PiB0aGlzLmdldFByb3BWYWx1ZShoZWxwSXRlbSwgY2xvbmVEZWVwKGFyZ3MpKSk7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlQXJyICYmIHZhbHVlQXJyLmxlbmd0aCA/IHZhbHVlQXJyLmpvaW4oJywnKSA6ICcnO1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyVmFsdWUoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IFtdO1xyXG4gICAgICAgIHRoaXMudmFsdWVGaWVsZCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLnRleHRWYWx1ZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLmlzSW5wdXRUZXh0ID0gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpc0VtcHR5KCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiAhdGhpcy52YWx1ZS5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgdmFsdWU6IGFueVtdO1xyXG4gICAgdmFsdWVGaWVsZDogc3RyaW5nO1xyXG4gICAgdGV4dFZhbHVlOiBzdHJpbmc7XHJcbiAgICAvL+W4ruWKqeeahOWAvOaYr+WQpuS4uuaJi+WKqOi+k+WFpeeahOS7u+aEj+WAvO+8jOWvueW6lOW4ruWKqeeahOS7u+aEj+i+k+WFpeWxnuaAp25vc2VhcmNoXHJcbiAgICBpc0lucHV0VGV4dDogYm9vbGVhbjsgXHJcblxyXG4gICAgY29uc3RydWN0b3IoZGF0YToge1xyXG4gICAgICAgIHZhbHVlOiBhbnksIFxyXG4gICAgICAgIHZhbHVlRmllbGQ6IHN0cmluZyxcclxuICAgICAgICB0ZXh0VmFsdWU6IHN0cmluZyxcclxuICAgICAgICBpc0lucHV0VGV4dDogYm9vbGVhblxyXG4gICAgfSA9IHt2YWx1ZTogW10sIHZhbHVlRmllbGQ6IHVuZGVmaW5lZCwgdGV4dFZhbHVlOiB1bmRlZmluZWQsIGlzSW5wdXRUZXh0OiB1bmRlZmluZWR9KXtcclxuICAgICAgICBpZihkYXRhLnRleHRWYWx1ZSl7XHJcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSBkYXRhLnZhbHVlO1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlRmllbGQgPSBkYXRhLnZhbHVlRmllbGQ7XHJcbiAgICAgICAgICAgIHRoaXMudGV4dFZhbHVlID0gZGF0YS50ZXh0VmFsdWU7XHJcbiAgICAgICAgICAgIHRoaXMuaXNJbnB1dFRleHQgPSBkYXRhLmlzSW5wdXRUZXh0O1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAvL+W4ruWKqeacquaUr+aMgeWkmumAieaXtu+8jOayoeaciXRleHRWYWx1ZeWxnuaAp++8jOaJgOacieWAvOmDveaYr+mAmui/h+mAieaLqeS6p+eUn+eahFxyXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gZGF0YS52YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZUZpZWxkID0gZGF0YS52YWx1ZUZpZWxkID8gZGF0YS52YWx1ZUZpZWxkIDogJyc7XHJcbiAgICAgICAgICAgIHRoaXMudGV4dFZhbHVlID0gJ2hlbHAtdGV4dC12YWx1ZS1udWxsJzsgXHJcbiAgICAgICAgICAgIHRoaXMuaXNJbnB1dFRleHQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VGV4dFZhbHVlKHRleHRGaWVsZDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCBhcmdzID0gdGV4dEZpZWxkLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgY29uc3QgdGV4dEFyciA9IHRoaXMudmFsdWUubWFwKGhlbHBJdGVtID0+IHRoaXMuZ2V0UHJvcFZhbHVlKGhlbHBJdGVtLCBjbG9uZURlZXAoYXJncykpKTtcclxuICAgICAgICByZXR1cm4gdGV4dEFyciAmJiB0ZXh0QXJyLmxlbmd0aCA/IHRleHRBcnIuam9pbignLCcpIDogJyc7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UHJvcFZhbHVlKGhlbHBJdGVtOiBhbnksIGFyZ3M6IEFycmF5PHN0cmluZz4pOiBhbnl7XHJcbiAgICAgICAgaWYoYXJncy5sZW5ndGggPiAxKXtcclxuICAgICAgICAgICAgY29uc3QgYXJnID0gYXJncy5zaGlmdCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gaGVscEl0ZW1bYXJnXSA/IHRoaXMuZ2V0UHJvcFZhbHVlKGhlbHBJdGVtW2FyZ10sIGFyZ3MpIDogbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGhlbHBJdGVtW2FyZ3NbMF1dO1xyXG4gICAgfVxyXG59Il19