/**
 * @fileoverview added by tsickle
 * Generated from: lib/querycondition-advanced/querycondition-advanced.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ElementRef, Injector, ViewChild } from '@angular/core';
import { StateService } from './service/state.service';
import { NotifyService } from '@farris/ui-notify';
import { cloneDeep } from 'lodash-es';
import { SolutionService } from '../service/solution.service';
import { QuerySolutionVo } from '../entity/querysolutionvo';
import { MessagerService } from '@farris/ui-messager';
import { LocaleService } from '@farris/ui-locale';
export class QueryconditionAdvancedComponent {
    /**
     * @param {?} notifySer
     * @param {?} msgSer
     * @param {?} localeService
     * @param {?} solutionService
     * @param {?} stateSer
     * @param {?} injector
     */
    constructor(notifySer, msgSer, localeService, solutionService, stateSer, injector) {
        this.notifySer = notifySer;
        this.msgSer = msgSer;
        this.localeService = localeService;
        this.solutionService = solutionService;
        this.stateSer = stateSer;
        this.injector = injector;
        this.dataSubscribe = null;
        this.dataListSubscribe = null;
        this._self = null;
        //子组件受否需要限定最大高度，默认true拖动高度后false
        this.isLimitHeight = true;
        this.conditionChange = new EventEmitter();
        // this.fieldConfig = this.stateSer.getFieldConfig()
        this.dataSubscribe = this.stateSer.queryconditionData$.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.queryconditionData = data;
            this.selectSolution.queryConditionsAdvanced = data;
        }));
        this.dataListSubscribe = this.stateSer.queryconditionListData$.subscribe((/**
         * @param {?} queryconditionListData
         * @return {?}
         */
        (queryconditionListData) => {
            this.conditionChange.emit(queryconditionListData);
        }));
        this._self = this.injector.get(ElementRef);
    }
    /**
     * @return {?}
     */
    get selectSolution() {
        return this._selectSolution;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set selectSolution(value) {
        if (value && this._selectSolution && value.id === this._selectSolution.id) {
            return;
        }
        this._selectSolution = value;
        this.queryconditionData = value.queryConditionsAdvanced;
        this.stateSer.setQueryconditionData(value.queryConditionsAdvanced);
    }
    /**
     * @return {?}
     */
    get fieldConfig() {
        return this._fieldConfig;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set fieldConfig(value) {
        //undo 范围型的组件暂不支持 
        //doing 将范围型组件重置为单值类型，方法，先反格式化，拿到基础值，遍历rangeList，将相关控件类型替换后再进行格式化
        //undo 范围型的组件暂不支持 
        //doing 将范围型组件重置为单值类型，方法，先反格式化，拿到基础值，遍历rangeList，将相关控件类型替换后再进行格式化
        /** @type {?} */
        let _value = cloneDeep(value);
        _value.forEach((/**
         * @param {?} val
         * @return {?}
         */
        val => {
            if (val.control.controltype === 'single-date') {
                val.control.isDynamicDate = false;
            }
            else if (val.control.controltype === 'radio') {
                val.control.horizontal = true;
            }
        }));
        //将单日期里面的支持动态日期属性群不改为false
        /** @type {?} */
        let modifyFieldConfig = this.rangeToSimpleControlType(_value);
        this._fieldConfig = this.solutionService.convertToQueryConditions(modifyFieldConfig);
        //波尔选择控件如果没有默认值，赋值位false，为什么不放在上面。因为不敢动之前的构造函数
        this._fieldConfig.forEach((/**
         * @param {?} val
         * @return {?}
         */
        val => {
            if (val.control.getControlType() === 8 && !val.value.getOriginalValue().length) {
                val.value.setOriginalValue([false]);
            }
        }));
        this.stateSer.changeFieldConfig(this._fieldConfig);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        //监听resize事件变化
        setTimeout((/**
         * @return {?}
         */
        () => { this.handleResizeChange(); }), 1000);
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.dataSubscribe.unsubscribe();
        this.dataListSubscribe.unsubscribe();
    }
    //最外层增加筛选条件
    /**
     * @return {?}
     */
    addItem() {
        if (!this.fieldConfig.length) {
            this.notifySer.error('未检测到存在筛选条件。');
        }
        else {
            /** @type {?} */
            let item = cloneDeep(this.fieldConfig[0]);
            this.stateSer.changeQueryconditionData({ item, path: [1] }, 'add', true);
            this.advancedContent.nativeElement.scrollTo({ top: this.advancedContent.nativeElement.scrollHeight });
        }
    }
    //增加分组
    /**
     * @return {?}
     */
    addGroup() {
        this.stateSer.addGroup();
    }
    //重置
    /**
     * @return {?}
     */
    reset() {
        this.msgSer.confirm(this.localeService.getValue('advancedMode.info.resetInfo')).subscribe((/**
         * @param {?} isConfirm
         * @return {?}
         */
        (isConfirm) => {
            if (isConfirm) {
                this.stateSer.reset();
                //触发回车，进行查询操作
                /** @type {?} */
                let event = document.createEvent('Event');
                event.initEvent('keydown', true, false);
                event = Object.assign(event, {
                    ctrlKey: false,
                    metaKey: false,
                    altKey: false,
                    which: 13,
                    keyCode: 13,
                    key: 'Enter',
                    code: 'Enter'
                });
                this._self.nativeElement.dispatchEvent(event);
            }
        }));
    }
    /**
     * @param {?} configs
     * @return {?}
     */
    rangeToSimpleControlType(configs) {
        /** @type {?} */
        let unformatConfigs = cloneDeep(configs);
        unformatConfigs.forEach((/**
         * @param {?} val
         * @return {?}
         */
        val => {
            if (val.control && val.control.controltype) {
                val.control.controltype = this.rangeToSimpleTypeModify(val.control.controltype);
            }
        }));
        return unformatConfigs;
    }
    //转化部分控件类型
    /**
     * @param {?} controlType
     * @return {?}
     */
    rangeToSimpleTypeModify(controlType) {
        /** @type {?} */
        let result = '';
        switch (controlType) {
            case 'date':
                result = 'single-date';
                break;
            case 'date-time':
                result = 'single-date-time';
                break;
            case 'month':
                result = 'single-month';
                break;
            case 'number':
                result = 'single-number';
                break;
            default:
                result = controlType;
        }
        return result;
    }
    /**
     * 监听筛选条件组件大小变化的方法，高度超过指定值时取消内部组件最大高度值限制
     * @return {?}
     */
    handleResizeChange() {
        //@ts-ignore
        /** @type {?} */
        const myObserver = new ResizeObserver((/**
         * @param {?} entries
         * @return {?}
         */
        entries => {
            entries.forEach((/**
             * @param {?} entry
             * @return {?}
             */
            entry => {
                if (entry.target.style.height < 431) {
                    this.isLimitHeight = true;
                }
                else {
                    this.isLimitHeight = false;
                }
            }));
        }));
        myObserver.observe(this.advancedElement.nativeElement);
    }
}
QueryconditionAdvancedComponent.decorators = [
    { type: Component, args: [{
                selector: 'querycondition-advanced',
                template: "<div class=\"querycondition-advanced\" #advancedElement>\r\n\r\n    <div class=\"querycondition-advanced-body\" #advancedContent [ngClass]=\"{'querycondition-advanced-body-maxh':isLimitHeight}\">\r\n        <querycondition-group [data]=\"queryconditionData\"></querycondition-group>\r\n\r\n    </div>\r\n    <div class=\"querycondition-advanced-bottom\">\r\n        <div class=\"add-condition-btn mb-1 mr-3\" (click)=\"addItem()\"><span class=\"f-icon f-icon-filter-add\"></span><span\r\n                class=\"ml-1\">{{'advancedMode.text.addCondition' | locale}}</span></div>\r\n        <div class=\"add-condition-btn mb-1\" (click)=\"addGroup()\"><span\r\n                class=\"f-icon f-icon-filter-grouping\"></span><span class=\"ml-1\">{{'advancedMode.text.addConditionGroup'\r\n                | locale}}</span></div>\r\n        <div *ngIf=\"queryconditionData && (queryconditionData.items.length || queryconditionData.children.length)\" class=\"querycondition-advanced-reset add-condition-btn\" (click)=\"reset()\">{{'advancedMode.text.reset' |\r\n            locale}}</div>\r\n    </div>\r\n\r\n</div>",
                providers: [SolutionService],
                styles: [".querycondition-advanced{width:100%;display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;overflow-y:hidden;resize:vertical;min-height:50px}.querycondition-advanced-body{height:calc(100% - 32px);overflow-y:auto}.querycondition-advanced-body-maxh{max-height:380px}.querycondition-advanced-bottom{position:relative;margin:14px 0 14px 6px}.querycondition-advanced-reset{position:absolute;right:32px;bottom:4px}.add-group-btn{width:100%;background:rgb(239,245,255,.65);border:1px solid rgba(219,233,255,1);border-radius:6px;color:#2a87ff;font-size:13px}.add-condition-btn{font-size:13px;display:inline-block}.add-condition-btn:hover{cursor:pointer}.add-condition-btn .f-icon{vertical-align:text-bottom;position:relative;width:16px;height:16px;border-radius:50%}.add-condition-btn .f-icon-filter-add::before{position:relative;bottom:3px;left:2px;font-size:12px}.add-condition-btn .f-icon-filter-grouping::before{position:relative;bottom:3px;left:1px;font-size:12px}"]
            }] }
];
/** @nocollapse */
QueryconditionAdvancedComponent.ctorParameters = () => [
    { type: NotifyService },
    { type: MessagerService },
    { type: LocaleService },
    { type: SolutionService },
    { type: StateService },
    { type: Injector }
];
QueryconditionAdvancedComponent.propDecorators = {
    selectSolution: [{ type: Input }],
    fieldConfig: [{ type: Input }],
    conditionChange: [{ type: Output, args: ['conditionChange',] }],
    advancedContent: [{ type: ViewChild, args: ['advancedContent',] }],
    advancedElement: [{ type: ViewChild, args: ['advancedElement',] }]
};
if (false) {
    /** @type {?} */
    QueryconditionAdvancedComponent.prototype.queryconditionData;
    /** @type {?} */
    QueryconditionAdvancedComponent.prototype._selectSolution;
    /** @type {?} */
    QueryconditionAdvancedComponent.prototype._fieldConfig;
    /** @type {?} */
    QueryconditionAdvancedComponent.prototype.dataSubscribe;
    /** @type {?} */
    QueryconditionAdvancedComponent.prototype.dataListSubscribe;
    /** @type {?} */
    QueryconditionAdvancedComponent.prototype._self;
    /** @type {?} */
    QueryconditionAdvancedComponent.prototype.isLimitHeight;
    /** @type {?} */
    QueryconditionAdvancedComponent.prototype.conditionChange;
    /** @type {?} */
    QueryconditionAdvancedComponent.prototype.advancedContent;
    /** @type {?} */
    QueryconditionAdvancedComponent.prototype.advancedElement;
    /**
     * @type {?}
     * @private
     */
    QueryconditionAdvancedComponent.prototype.notifySer;
    /**
     * @type {?}
     * @private
     */
    QueryconditionAdvancedComponent.prototype.msgSer;
    /**
     * @type {?}
     * @private
     */
    QueryconditionAdvancedComponent.prototype.localeService;
    /**
     * @type {?}
     * @private
     */
    QueryconditionAdvancedComponent.prototype.solutionService;
    /**
     * @type {?}
     * @private
     */
    QueryconditionAdvancedComponent.prototype.stateSer;
    /**
     * @type {?}
     * @private
     */
    QueryconditionAdvancedComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,