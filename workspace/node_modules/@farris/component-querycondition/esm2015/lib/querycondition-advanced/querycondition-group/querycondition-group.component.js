/**
 * @fileoverview added by tsickle
 * Generated from: lib/querycondition-advanced/querycondition-group/querycondition-group.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ChangeDetectorRef, ElementRef, Injector } from '@angular/core';
import { CompareTypeName, CompareTypeInControl } from '../config/compare-type.config';
import { StateService } from '../service/state.service';
import { cloneDeep } from 'lodash-es';
import { MessagerService } from '@farris/ui-messager';
import { LocaleService } from '@farris/ui-locale';
import { OverLayHiddenService } from "@farris/ui-common";
export class QueryconditionGroupComponent {
    /**
     * @param {?} stateSer
     * @param {?} cd
     * @param {?} msgSer
     * @param {?} localeService
     * @param {?} injector
     */
    constructor(stateSer, cd, msgSer, localeService, injector) {
        this.stateSer = stateSer;
        this.cd = cd;
        this.msgSer = msgSer;
        this.localeService = localeService;
        this.injector = injector;
        this.COMPARE_TYPE_NAME = CompareTypeName;
        this.COMPARE_TYPE_NAME_MULTI = CompareTypeName; //没办法，要求类似于帮助，下拉选择，一个叫等于，两个叫包含，但是逻辑还要一样
        //没办法，要求类似于帮助，下拉选择，一个叫等于，两个叫包含，但是逻辑还要一样
        this.COMPARE_TYPE_IN_CONTROL = CompareTypeInControl;
        this.fieldConfig = [];
        this.checklist = [];
        this.deleteGroupText = this.localeService.getValue('advancedMode.info.deleteGroupTooltip');
        this.fieldConfigSubscribe = null;
        this.checkedListSubscribe = null;
        this.forceState = [];
        this._self = null;
        this.activeConditionType = null;
        this.overLayService = null;
        this.fieldConfig = this.stateSer.getFieldConfig();
        this.fieldConfigSubscribe = this.stateSer.fieldConfig$.subscribe((/**
         * @param {?} config
         * @return {?}
         */
        (config) => {
            this.fieldConfig = config;
        }));
        this.checkedListSubscribe = this.stateSer.checkedList$.subscribe((/**
         * @param {?} checklist
         * @return {?}
         */
        (checklist) => {
            /** @type {?} */
            let _path = this.data.path.join('-');
            if (checklist[_path]) {
                this.checklist = checklist[_path];
            }
            else {
                this.checklist = [];
            }
        }));
        this.COMPARE_TYPE_NAME = [
            this.localeService.getValue('advancedMode.compareType.Equal'),
            this.localeService.getValue('advancedMode.compareType.NotEqual'),
            this.localeService.getValue('advancedMode.compareType.Greater'),
            this.localeService.getValue('advancedMode.compareType.GreaterOrEqual'),
            this.localeService.getValue('advancedMode.compareType.Less'),
            this.localeService.getValue('advancedMode.compareType.LessOrEqual'),
            this.localeService.getValue('advancedMode.compareType.Like'),
            this.localeService.getValue('advancedMode.compareType.LikeStartWith'),
            this.localeService.getValue('advancedMode.compareType.LikeEndWith')
        ];
        this.COMPARE_TYPE_NAME_MULTI = [
            this.localeService.getValue('advancedMode.compareType.Like'),
            this.localeService.getValue('advancedMode.compareType.NotLike'),
            this.localeService.getValue('advancedMode.compareType.Greater'),
            this.localeService.getValue('advancedMode.compareType.GreaterOrEqual'),
            this.localeService.getValue('advancedMode.compareType.Less'),
            this.localeService.getValue('advancedMode.compareType.LessOrEqual'),
            this.localeService.getValue('advancedMode.compareType.Like'),
            this.localeService.getValue('advancedMode.compareType.LikeStartWith'),
            this.localeService.getValue('advancedMode.compareType.LikeEndWith')
        ];
        this.overLayService = new OverLayHiddenService();
        this._self = this.injector.get(ElementRef);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.fieldConfigSubscribe.unsubscribe();
        this.checkedListSubscribe.unsubscribe();
    }
    /**
     * 下拉面板展开关闭事件
     * @param {?} event 下拉展开tue， 关闭false
     * @param {?=} dropdownMenu 点击的dropdown序号
     * @return {?}
     */
    dpStateHandler(event, dropdownMenu) {
        //解决鼠标在dropdown上滚动补关闭dropdown的问题
        if (event && typeof (dropdownMenu) === 'number') {
            this.activeConditionType = dropdownMenu.toString();
            this.forceState = [];
            this.overLayService.registerMouseEvent(this._self.nativeElement, (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                if (!this.activeConditionType || !(e.type === 'wheel' || e.type === 'mousewheel'))
                    return;
                /** @type {?} */
                let tar = (/** @type {?} */ (e.target));
                /** @type {?} */
                let classList = Array.from(tar.classList || []);
                if (!classList.includes('dropdown-item-noopen') && this.activeConditionType) {
                    this.activeConditionType = null;
                    this.forceState = [false];
                    this.overLayService.destory(this._self.nativeElement);
                }
            }));
        }
        else {
            this.overLayService.destory(this._self.nativeElement);
        }
    }
    /**
     * 修改筛选条件控件类型
     * @param {?} item 筛选条件对象
     * @param {?} fieldItem 选中的控件类型
     * @return {?}
     */
    changeConditionType(item, fieldItem) {
        /** @type {?} */
        let conditionid = item.conditionid;
        /** @type {?} */
        let _fieldItem = cloneDeep(fieldItem);
        item = _fieldItem;
        item.conditionid = conditionid;
        item.compareType = 0;
        this.stateSer.changeQueryconditionData({ item, path: this.data.path }, 'modify');
    }
    /**
     * 修改筛选条件比较符
     * @param {?} item 筛选条件对象
     * @param {?} compareTypeIndex 筛选条件比较符
     * @return {?}
     */
    changeCompareType(item, compareTypeIndex) {
        item.compareType = compareTypeIndex;
        this.stateSer.changeQueryconditionData({ item, path: this.data.path }, 'modify');
    }
    /**
     * 添加筛选条件
     * @param {?} addPositionItem 添加的位置
     * @return {?}
     */
    addItem(addPositionItem) {
        /** @type {?} */
        let item = cloneDeep(this.fieldConfig[0]);
        this.stateSer.changeQueryconditionData({ item, path: this.data.path, addPositionItem: addPositionItem }, 'add');
    }
    /**
     * 删除筛选条件
     * @param {?} item 删除项
     * @return {?}
     */
    deleteItem(item) {
        this.stateSer.changeQueryconditionData({ deleteItems: [item], path: this.data.path }, 'delete-item');
    }
    /**
     * 修改筛选条件组关联关系
     * @return {?}
     */
    changeRelation() {
        /** @type {?} */
        let relation = this.data.relation === 1 ? 2 : 1;
        this.stateSer.changeGroupData({ relation, path: this.data.path }, 'modify-relation');
    }
    /**
     * 选中筛选条件
     * @param {?} item 选中项
     * @return {?}
     */
    handleCheckItem(item) {
        this.stateSer.changeCheckedList(this.data.path, item.conditionid);
    }
    /**
     * 取消筛选组
     * @return {?}
     */
    deleteGroup() {
        this.msgSer.confirm(this.localeService.getValue('advancedMode.info.deleteGroup')).subscribe((/**
         * @param {?} isConfirm
         * @return {?}
         */
        (isConfirm) => {
            if (isConfirm) {
                this.stateSer.deleteGroup(this.data.groupid, this.data.path);
            }
        }));
    }
}
QueryconditionGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'querycondition-group',
                template: "<div class=\"querycondition-advanced-content\">\r\n\r\n\r\n  <div>\r\n    <div class=\"querycondition-advanced-item\" *ngFor=\"let item of data.items;let i = index\">\r\n      <div class=\"querycondition-advanced-item-type mr-3\" fDropdown (dpChangeEvent)=\"dpStateHandler($event, i)\" [forceState]=\"forceState\" [autoRectify]=\"true\">\r\n        <button class=\"btn btn-secondary dropdown-toggle\" fDropdownToggle type=\"button\" [title]=\"item.fieldName\">\r\n          {{item.fieldName}}\r\n          <span class=\"f-icon f-icon-arrow-chevron-down\"></span>\r\n        </button>\r\n        <div class=\"dropdown-menu\" fDropdownMenu #dropdownMenu>\r\n          <li class=\"dropdown-item dropdown-item-noopen\" *ngFor=\"let fieldItem of fieldConfig;let i = index\"\r\n            (click)=\"changeConditionType(item, fieldItem)\"><span class=\"dropdown-item-noopen\">{{fieldItem.fieldName}}</span></li>\r\n\r\n        </div>\r\n      </div>\r\n      <div class=\"querycondition-advanced-item-compare mr-3\" fDropdown (dpChangeEvent)=\"dpStateHandler($event, i)\" [forceState]=\"forceState\" *ngIf=\"(item.control.singleSelect === undefined &&  item.control.multiSelect === undefined) || item.control.singleSelect === true || item.control.multiSelect === false\">\r\n        <button class=\"btn btn-secondary dropdown-toggle\" fDropdownToggle type=\"button\">\r\n          {{COMPARE_TYPE_NAME[item.compareType]}}\r\n          <span class=\"f-icon f-icon-arrow-chevron-down\"></span>\r\n        </button>\r\n        <div class=\"dropdown-menu\" fDropdownMenu>\r\n          <ng-container *ngFor=\"let label of COMPARE_TYPE_NAME;let i = index\">\r\n            <li class=\"dropdown-item dropdown-item-noopen\" [hidden]=\"!COMPARE_TYPE_IN_CONTROL[item.control.getControlType()].includes(i)\"\r\n            (click)=\"changeCompareType(item, i)\"><span  class=\"dropdown-item-noopen\">{{label}}</span></li>\r\n          </ng-container>\r\n          \r\n\r\n        </div>\r\n      </div>\r\n      <div class=\"querycondition-advanced-item-compare mr-3\" fDropdown (dpChangeEvent)=\"dpStateHandler($event)\" [forceState]=\"forceState\" *ngIf=\" item.control.singleSelect === false || item.control.multiSelect === true\">\r\n        <button class=\"btn btn-secondary dropdown-toggle\" fDropdownToggle type=\"button\">\r\n          {{COMPARE_TYPE_NAME_MULTI[item.compareType]}}\r\n          <span class=\"f-icon f-icon-arrow-chevron-down\"></span>\r\n        </button>\r\n        <div class=\"dropdown-menu\" fDropdownMenu>\r\n          <ng-container *ngFor=\"let label of COMPARE_TYPE_NAME_MULTI;let i = index\">\r\n            <li class=\"dropdown-item  dropdown-item-noopen\" [hidden]=\"!COMPARE_TYPE_IN_CONTROL[item.control.getControlType()].includes(i)\"\r\n            (click)=\"changeCompareType(item, i)\" class=\"dropdown-item-noopen\"><span >{{label}}</span></li>\r\n          </ng-container>\r\n          \r\n\r\n        </div>\r\n      </div>\r\n      <!-- <div class=\"querycondition-advanced-item-control mr-3\">{{data.path.join('-') + ' , ' + data.groupid + ' , ' + item.conditionid}}</div> -->\r\n      <div class=\"querycondition-advanced-item-control mr-3\">\r\n        <querycondition-item [item]=\"item\" ></querycondition-item>\r\n      </div>\r\n      <div class=\"querycondition-advanced-item-extend\">\r\n\r\n        <span class=\"f-icon f-icon-plus-sm mr-2\" (click)=\"addItem(item)\"></span>\r\n        <span class=\"f-icon f-icon-minus-sm\" (click)=\"deleteItem(item)\"></span>\r\n      </div>\r\n      <div class=\"custom-control custom-checkbox\">\r\n        <input #input class=\"custom-control-input\" type=\"checkbox\" \r\n          [checked]=\"checklist.includes(item.conditionid)\" />\r\n        <label class=\"custom-control-label\"\r\n          (click)=\"handleCheckItem(item)\"></label>\r\n      </div>\r\n\r\n\r\n\r\n    </div>\r\n    <querycondition-group [data]=\"children\" *ngFor=\"let children of data.children\"></querycondition-group>\r\n  </div>\r\n\r\n  <div class=\"querycondition-advanced-relation\"  *ngIf=\"(data.items.length + data.children.length) > 0\">\r\n    <span *ngIf=\"data.groupid !== 1\" class=\"querycondition-advanced-relation-close f-icon-filter-cancel btn-link\" (click)=\"deleteGroup()\" farrisTooltip [content]=\"deleteGroupText\"></span>\r\n    <span class=\"querycondition-advanced-relation-text btn-link\" (click)=\"changeRelation()\" >{{(data.relation === 1 ? 'advancedMode.text.and' : 'advancedMode.text.or') | locale}}</span>\r\n    <!-- <span (click)=\"deleteGroup()\">\u53D6\u6D88</span> -->\r\n  </div>\r\n\r\n</div>",
                styles: [".querycondition-advanced-content{display:-webkit-box;display:flex}.querycondition-advanced-item{padding:4px;display:-webkit-box;display:flex;height:40px}.querycondition-advanced-item-type button{text-align:left;width:240px;position:relative;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.querycondition-advanced-item-compare button{text-align:left;width:134px;position:relative}.querycondition-advanced-item-compare .f-icon-arrow-chevron-down::before,.querycondition-advanced-item-type .f-icon-arrow-chevron-down::before{position:absolute;right:8px;bottom:4px}.querycondition-advanced-content .dropdown-toggle::after{display:none}.querycondition-advanced-item-control{line-height:26px;width:240px}.querycondition-advanced-item-extend .f-icon{vertical-align:text-bottom}.querycondition-advanced-item-extend .f-icon:hover{cursor:pointer}.querycondition-advanced-item-extend .f-icon-plus-sm::before{font-size:14px;color:#2a87ff;background-color:#e8f2ff;border-radius:50%;position:relative;top:1px}.querycondition-advanced-item-extend .f-icon-minus-sm::before{font-size:14px;color:#f46160;background-color:#fadcdd;border-radius:50%;position:relative;top:1px}.querycondition-advanced-relation{margin:2px 0 2px 12px;border-left:1px solid rgba(222,227,240,1);position:relative;display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;padding-left:12px;font-size:13px;color:#2a87ff;text-align:center;cursor:pointer}.querycondition-advanced-relation:hover .querycondition-advanced-relation-close{display:inline}.querycondition-advanced-relation-close{position:absolute;top:-4px;display:none}.querycondition-advanced-relation:hover .querycondition-advanced-relation-text{text-decoration:underline}.querycondition-advanced-item .custom-control-label:before{position:relative;top:2px}.querycondition-advanced-relation button{width:20px}.dropdown-menu{-webkit-writing-mode:horizontal-tb;-ms-writing-mode:lr-tb;writing-mode:horizontal-tb;overflow-y:overlay;max-height:45%}"]
            }] }
];
/** @nocollapse */
QueryconditionGroupComponent.ctorParameters = () => [
    { type: StateService },
    { type: ChangeDetectorRef },
    { type: MessagerService },
    { type: LocaleService },
    { type: Injector }
];
QueryconditionGroupComponent.propDecorators = {
    data: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    QueryconditionGroupComponent.prototype.COMPARE_TYPE_NAME;
    /** @type {?} */
    QueryconditionGroupComponent.prototype.COMPARE_TYPE_NAME_MULTI;
    /** @type {?} */
    QueryconditionGroupComponent.prototype.COMPARE_TYPE_IN_CONTROL;
    /** @type {?} */
    QueryconditionGroupComponent.prototype.data;
    /** @type {?} */
    QueryconditionGroupComponent.prototype.fieldConfig;
    /** @type {?} */
    QueryconditionGroupComponent.prototype.checklist;
    /** @type {?} */
    QueryconditionGroupComponent.prototype.deleteGroupText;
    /** @type {?} */
    QueryconditionGroupComponent.prototype.fieldConfigSubscribe;
    /** @type {?} */
    QueryconditionGroupComponent.prototype.checkedListSubscribe;
    /** @type {?} */
    QueryconditionGroupComponent.prototype.forceState;
    /** @type {?} */
    QueryconditionGroupComponent.prototype._self;
    /** @type {?} */
    QueryconditionGroupComponent.prototype.activeConditionType;
    /**
     * @type {?}
     * @private
     */
    QueryconditionGroupComponent.prototype.overLayService;
    /**
     * @type {?}
     * @private
     */
    QueryconditionGroupComponent.prototype.stateSer;
    /**
     * @type {?}
     * @private
     */
    QueryconditionGroupComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    QueryconditionGroupComponent.prototype.msgSer;
    /**
     * @type {?}
     * @private
     */
    QueryconditionGroupComponent.prototype.localeService;
    /**
     * @type {?}
     * @private
     */
    QueryconditionGroupComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,