/**
 * @fileoverview added by tsickle
 * Generated from: lib/querycondition-advanced/service/state.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { NotifyService } from '@farris/ui-notify';
import { cloneDeep } from 'lodash-es';
import { LocaleService } from '@farris/ui-locale';
export class StateService {
    /**
     * @param {?} notifySer
     * @param {?} localeService
     */
    constructor(notifySer, localeService) {
        this.notifySer = notifySer;
        this.localeService = localeService;
        this.fieldConfig = [];
        this.fieldConfig$ = new Subject();
        this.queryconditionData$ = new Subject();
        this.queryconditionListData$ = new Subject();
        this.checkedList = {};
        this.checkedList$ = new Subject();
    }
    /**
     * 重置筛选条件
     * @return {?}
     */
    reset() {
        this.queryconditionData = { relation: 1, items: [], children: [], path: [1], groupid: 1 };
        this.queryconditionData$.next(this.queryconditionData);
        this.updateQueryConditionListData();
    }
    /**
     *
     * @param {?} data
     * @param {?} type
     * @param {?=} isEmit 默认要发送emit，生成分组触发时不需要emit，因为生成分组方法本身会触发
     * @return {?}
     */
    changeQueryconditionData(data, type, isEmit = true) {
        const { item, path, addPositionItem, deleteItems } = data;
        /** @type {?} */
        let target = this.queryconditionData;
        path.forEach((/**
         * @param {?} pathVal
         * @return {?}
         */
        pathVal => {
            //groupid = 1的时候未最外层
            if (pathVal !== 1) {
                target = target.children.find((/**
                 * @param {?} targetVal
                 * @return {?}
                 */
                targetVal => targetVal.groupid === pathVal));
            }
        }));
        switch (type) {
            case 'add':
                item.conditionid = this.getMaxConditionid() + 1;
                item.compareType = 0;
                if (addPositionItem) {
                    /** @type {?} */
                    let position = target.items.findIndex((/**
                     * @param {?} val
                     * @return {?}
                     */
                    val => val.conditionid === addPositionItem.conditionid));
                    position > -1 ? target.items.splice(position, 0, item) : target.items.push(item);
                }
                else {
                    target.items.push(item);
                }
                this.clearCheckedList();
                break;
            case 'delete-item':
                //删除单个条件，正常删除时使用
                if (deleteItems) {
                    deleteItems.forEach((/**
                     * @param {?} val
                     * @return {?}
                     */
                    val => {
                        /** @type {?} */
                        let deleteIndex = target.items.findIndex((/**
                         * @param {?} itemsVal
                         * @return {?}
                         */
                        itemsVal => itemsVal.conditionid === val.conditionid));
                        target.items.splice(deleteIndex, 1);
                    }));
                }
                this.clearCheckedList();
                //删除时优化下结构
                this.treeshake(this.queryconditionData);
                break;
            case 'delete-items':
                //删除多个条件，生产分组时使用
                if (deleteItems) {
                    deleteItems.forEach((/**
                     * @param {?} val
                     * @return {?}
                     */
                    val => {
                        /** @type {?} */
                        let deleteIndex = target.items.findIndex((/**
                         * @param {?} itemsVal
                         * @return {?}
                         */
                        itemsVal => itemsVal.conditionid === val.conditionid));
                        target.items.splice(deleteIndex, 1);
                    }));
                }
                this.clearCheckedList();
                break;
            case 'modify':
                /** @type {?} */
                let modifyIndex = target.items.findIndex((/**
                 * @param {?} itemsVal
                 * @return {?}
                 */
                itemsVal => itemsVal.conditionid === item.conditionid));
                target.items[modifyIndex] = item;
                break;
        }
        if (isEmit) {
            this.queryconditionData$.next(this.queryconditionData);
            this.updateQueryConditionListData();
        }
    }
    /**
     * 修改分组数据
     * @param {?} data group数据
     * @param {?} type 修改类型
     * @return {?}
     */
    changeGroupData(data, type) {
        const { item, path, relation } = data;
        /** @type {?} */
        let target = this.queryconditionData;
        path.forEach((/**
         * @param {?} pathVal
         * @return {?}
         */
        pathVal => {
            //groupid = 1的时候未最外层
            if (pathVal !== 1) {
                target = target.children.find((/**
                 * @param {?} targetVal
                 * @return {?}
                 */
                targetVal => targetVal.groupid === pathVal));
            }
        }));
        switch (type) {
            case 'modify-relation':
                target.relation = relation;
                break;
        }
        this.queryconditionData$.next(this.queryconditionData);
        this.updateQueryConditionListData();
    }
    /**
     * 生成新的分组
     * @desc
     *
     * @return {?}
     */
    addGroup() {
        /** @type {?} */
        let groups = Object.keys(this.checkedList).filter((/**
         * @param {?} val
         * @return {?}
         */
        val => this.checkedList[val].length))
        // 未选择筛选条件时候的点击提示
        ;
        // 未选择筛选条件时候的点击提示
        if (!groups.length) {
            //需要勾选
            this.notifySer.warning(this.localeService.getValue('advancedMode.info.noConditionInfo'));
        }
        else if (groups.length === 1) {
            //所有选择项归属于同一个group的items时
            /** @type {?} */
            let targetPath = groups[0].split('-').map((/**
             * @param {?} val
             * @return {?}
             */
            val => Number(val)));
            /** @type {?} */
            let target = this.queryconditionData;
            targetPath.forEach((/**
             * @param {?} pathVal
             * @return {?}
             */
            pathVal => {
                //groupid = 1的时候未最外层
                if (pathVal !== 1) {
                    target = target.children.find((/**
                     * @param {?} targetVal
                     * @return {?}
                     */
                    targetVal => targetVal.groupid === pathVal));
                }
            }));
            /** @type {?} */
            let flatItems = this.getFlatConditions(target);
            /** @type {?} */
            let modifyItems = flatItems.filter((/**
             * @param {?} val
             * @return {?}
             */
            val => this.checkedList[groups[0]].includes(val.conditionid)))
            //特别的，如果将group下的children.length为0，并且modifyItems的范围为全部的items，则提示
            ;
            //特别的，如果将group下的children.length为0，并且modifyItems的范围为全部的items，则提示
            if (!target.children.length && modifyItems.length === target.items.length) {
                //已经存在该分组了
                this.notifySer.warning(this.localeService.getValue('advancedMode.info.existGroupInfo'));
                return;
            }
            this.generateGroup(target, modifyItems, []);
        }
        else {
            //如果group存在多个组，首先找到涉及数据的最外层组，默认是group为1的组，即最大组
            /** @type {?} */
            let involvedGroupid = 1;
            /** @type {?} */
            let involvedPath = [1]
            //获取有选择数据的group，并将路径转化为Array<number>
            ;
            //获取有选择数据的group，并将路径转化为Array<number>
            /** @type {?} */
            let _groups = groups.map((/**
             * @param {?} val
             * @return {?}
             */
            val => val.split('-').map((/**
             * @param {?} val2
             * @return {?}
             */
            val2 => Number(val2)))))
            //获取其中的最短路径
            ;
            //获取其中的最短路径
            /** @type {?} */
            let minLength = _groups.map((/**
             * @param {?} val
             * @return {?}
             */
            val => val.length)).sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => a - b))[0]
            //循环找到其中的涉及最小的 最大公共group
            ;
            //循环找到其中的涉及最小的 最大公共group
            for (let i = 1; i < minLength; i++) {
                /** @type {?} */
                let nowGroupid = _groups[0][i];
                if (nowGroupid) {
                    //每个组的第i项都一致flag为true
                    /** @type {?} */
                    let flag = _groups.filter((/**
                     * @param {?} val
                     * @return {?}
                     */
                    val => val[i] === nowGroupid)).length === _groups.length;
                    if (flag) {
                        involvedGroupid = nowGroupid;
                        involvedPath.push(nowGroupid);
                    }
                    else {
                        break;
                    }
                }
                else {
                    break;
                }
            }
            //校验跨组，involvedGroupid下的items，可以不全选,不做校验
            //其他情况需要检查checklist对应数据是否已经为对应group的全部数据
            /** @type {?} */
            let flatGroupList = this.getFlatChildren(this.queryconditionData)
            //检测involvedGroupid系的group的condition的全部数量是不是等于已选择的数量，如果是的话，提醒用户，所选条件已存在分组
            ;
            //检测involvedGroupid系的group的condition的全部数量是不是等于已选择的数量，如果是的话，提醒用户，所选条件已存在分组
            /** @type {?} */
            let involvedGroup = flatGroupList.find((/**
             * @param {?} val
             * @return {?}
             */
            val => val.groupid === involvedGroupid));
            /** @type {?} */
            let involvedConditionsAll = this.getFlatConditions(involvedGroup).length;
            /** @type {?} */
            let checkedAll = groups.map((/**
             * @param {?} val
             * @return {?}
             */
            val => this.checkedList[val].length)).reduce((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => a + b));
            if (involvedConditionsAll === checkedAll) {
                //已经存在该分组了
                this.notifySer.warning(this.localeService.getValue('advancedMode.info.existGroupInfo'));
                return;
            }
            /** @type {?} */
            let validFlag = true
            // 获取所有基于相关involvedGroupid与checklist的children
            //方法：寻找最小共组在group数组的位置，如再第一位 ，则所有包含第二位的children都应该被勾选
            ;
            // 获取所有基于相关involvedGroupid与checklist的children
            //方法：寻找最小共组在group数组的位置，如再第一位 ，则所有包含第二位的children都应该被勾选
            /** @type {?} */
            let involvedChildrenGroupids = [];
            _groups.forEach((/**
             * @param {?} val
             * @return {?}
             */
            val => {
                /** @type {?} */
                let groupid = val[involvedPath.length];
                if (groupid && !involvedChildrenGroupids.includes(groupid)) {
                    involvedChildrenGroupids.push(groupid);
                }
            }));
            //获取上述步骤中所有group的condition数量（含子级）
            /** @type {?} */
            let involveChildrenConditionLen = 0;
            involvedChildrenGroupids.forEach((/**
             * @param {?} val
             * @return {?}
             */
            val => {
                /** @type {?} */
                let target = flatGroupList.find((/**
                 * @param {?} group
                 * @return {?}
                 */
                group => group.groupid === val));
                if (target) {
                    /** @type {?} */
                    let targetFlatConditionsLen = this.getFlatConditions(target).length;
                    involveChildrenConditionLen += targetFlatConditionsLen;
                }
            }));
            /** @type {?} */
            let involvedCheckedConditionLen = 0;
            groups.filter((/**
             * @param {?} val
             * @return {?}
             */
            val => val !== involvedPath.join('-'))).forEach((/**
             * @param {?} val
             * @return {?}
             */
            val => involvedCheckedConditionLen += this.checkedList[val].length));
            if (involveChildrenConditionLen !== involvedCheckedConditionLen) {
                //跨组操作需要勾选组内所有数据
                this.notifySer.error(this.localeService.getValue('advancedMode.info.checkedGroupInfo'));
                validFlag = false;
            }
            // groups.forEach(group => {
            //   if (!validFlag) {
            //     return
            //   }
            //   if (group !== involvedPath.join('-')) {
            //     let target = flatGroupList.find(val => val.path.join('-') === group)
            //     let targetFlatConditions = this.getFlatConditions(target)
            //     //当前节点下的所有items，与与该节点有关的所有items
            //     let checkedListBaseTarget = _groups.filter(val => val.includes(target.groupid)).map(val => val.join('-'))
            //     let checkedListBaseTargetLength = 0
            //     checkedListBaseTarget.forEach(val => checkedListBaseTargetLength = checkedListBaseTargetLength + this.checkedList[val].length)
            //     if (targetFlatConditions.length !== checkedListBaseTargetLength) {
            //       this.notifySer.error('跨组操作时，应勾选该组下全部数据')
            //       validFlag = false
            //     }
            //   }
            // })
            if (validFlag) {
                /** @type {?} */
                let modifyItemids = this.checkedList[involvedPath.join('-')] || [];
                /** @type {?} */
                let target = flatGroupList.find((/**
                 * @param {?} val
                 * @return {?}
                 */
                val => val.path.join('-') === involvedPath.join('-')));
                /** @type {?} */
                let modifyItems = target.items.filter((/**
                 * @param {?} val
                 * @return {?}
                 */
                val => modifyItemids.includes(val.conditionid)))
                //由于前面已经检测了包含了某child的全部condition，所以此处过滤应该包含子项。
                //方法：寻找最小共组在group数组的位置，如再第一位 ，则所有包含第二位的children都应该被勾选
                ;
                //由于前面已经检测了包含了某child的全部condition，所以此处过滤应该包含子项。
                //方法：寻找最小共组在group数组的位置，如再第一位 ，则所有包含第二位的children都应该被勾选
                /** @type {?} */
                let involvedChildrenGroup = _groups.map((/**
                 * @param {?} val
                 * @return {?}
                 */
                val => val[involvedPath.length])).filter((/**
                 * @param {?} val
                 * @return {?}
                 */
                val => val));
                /** @type {?} */
                let children = target.children.filter((/**
                 * @param {?} val
                 * @return {?}
                 */
                val => involvedChildrenGroup.includes(val.groupid)))
                // let children = target.children.filter(val => groups.includes(val.path.join('-')))
                ;
                // let children = target.children.filter(val => groups.includes(val.path.join('-')))
                this.generateGroup(target, modifyItems, children);
            }
        }
        this.queryconditionData$.next(this.queryconditionData);
        this.updateQueryConditionListData();
        this.clearCheckedList();
    }
    /**
     *
     * @param {?} groupid
     * @param {?} path
     * @param {?=} isEmit 是否需要触发emit操作，对于treeshake方法，无需触发，默认为true
     * @param {?=} changeRootCompareType 属于treeshake过程中的取消分组，涉及到根节点且根节点只有该children的时候，需要修改根节点比较符，为true时修改
     * @return {?}
     */
    deleteGroup(groupid, path, isEmit = true, changeRootCompareType = false) {
        if (groupid === 1) {
            //已经是最外层分组了
            this.notifySer.info(this.localeService.getValue('advancedMode.info.deleteGroupInfo'));
        }
        else {
            /** @type {?} */
            let target = this.queryconditionData;
            /** @type {?} */
            let targetParent = null;
            path.forEach((/**
             * @param {?} pathVal
             * @return {?}
             */
            pathVal => {
                //groupid = 1的时候未最外层
                if (pathVal !== 1) {
                    targetParent = target;
                    target = target.children.find((/**
                     * @param {?} targetVal
                     * @return {?}
                     */
                    targetVal => targetVal.groupid === pathVal));
                }
            }));
            targetParent.children = targetParent.children.filter((/**
             * @param {?} val
             * @return {?}
             */
            val => val.groupid !== groupid));
            /** @type {?} */
            let isChangeCompareType = (targetParent.groupid === 1) && changeRootCompareType && !targetParent.items.length && !targetParent.children.length;
            if (isChangeCompareType) {
                targetParent.relation = target.relation;
            }
            targetParent.children.push(...target.children);
            targetParent.items.push(...target.items);
            /** @type {?} */
            let childrens = this.getFlatChildren(targetParent);
            childrens.forEach((/**
             * @param {?} val
             * @return {?}
             */
            val => val.path = val.path.filter((/**
             * @param {?} pathItem
             * @return {?}
             */
            pathItem => pathItem !== groupid))));
            if (isEmit) {
                this.queryconditionData$.next(this.queryconditionData);
                this.updateQueryConditionListData();
                this.clearCheckedList();
            }
        }
    }
    /**
     * @param {?} parentTarget
     * @param {?} items
     * @param {?} children
     * @return {?}
     */
    generateGroup(parentTarget, items, children) {
        /** @type {?} */
        let groupid = this.getMaxGroupid() + 1
        //删除最小范围的最大组 中移除掉的数据
        ;
        //删除最小范围的最大组 中移除掉的数据
        this.changeQueryconditionData({ deleteItems: items, path: parentTarget.path }, 'delete-items', false);
        //删除最小范围的最大组 中移除掉的children，注意，由于已经做过校验，children中的递归类型已经全部选择，只需将target中涉及的children移到newgroup，并将其内部的路由修改
        /** @type {?} */
        let allGroups = this.getFlatChildren(parentTarget);
        /** @type {?} */
        let parentPosition = parentTarget.path.findIndex((/**
         * @param {?} pathVal
         * @return {?}
         */
        pathVal => pathVal === parentTarget.groupid));
        children.forEach((/**
         * @param {?} val
         * @return {?}
         */
        val => {
            // this.deleteGroup(val.groupid, val.path)
            parentTarget.children = parentTarget.children.filter((/**
             * @param {?} child
             * @return {?}
             */
            child => child.groupid !== val.groupid));
            allGroups.forEach((/**
             * @param {?} group
             * @return {?}
             */
            group => {
                if (group.path.includes(val.groupid)) {
                    group.path.splice(parentPosition + 1, 0, groupid);
                }
            }));
        }));
        /** @type {?} */
        let newGroup = {
            groupid,
            relation: 1,
            items: items,
            children: children,
            path: parentTarget.path.concat(groupid)
        };
        parentTarget.children.push(newGroup);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    setQueryconditionData(data) {
        this.queryconditionData = data;
        this.queryconditionData$.next(data);
        // 初始化可以不用更新QueryConditionListData，父组件已经传入
        // this.updateQueryConditionListData()
    }
    /**
     * @return {?}
     */
    getQueryconditionData() {
        return this.queryconditionData;
    }
    /**
     * @param {?} config
     * @return {?}
     */
    changeFieldConfig(config) {
        this.fieldConfig = config;
        this.fieldConfig$.next(config);
    }
    /**
     * @return {?}
     */
    getFieldConfig() {
        return this.fieldConfig;
    }
    /**
     * 修改已选择的筛选条件
     * @param {?} path number[] 节点位置
     * @param {?} item 筛选条件
     * @return {?}
     */
    changeCheckedList(path, item) {
        /** @type {?} */
        let _path = path.join('-');
        if (!this.checkedList[_path]) {
            this.checkedList[_path] = [item];
        }
        else {
            /** @type {?} */
            let index = this.checkedList[_path].indexOf(item);
            if (index < 0) {
                this.checkedList[_path].push(item);
            }
            else {
                this.checkedList[_path].splice(index, 1);
                if (!this.checkedList[_path].length) {
                    delete this.checkedList[_path];
                }
            }
        }
        this.checkedList$.next(this.checkedList);
    }
    /**
     * 清除已选择的筛选条件
     * @return {?}
     */
    clearCheckedList() {
        this.checkedList = {};
        this.checkedList$.next(this.checkedList);
    }
    /**
     *
     * @param {?} data 需要查询的节点位置
     * @return {?} 该节点下所有的筛选条件信息
     */
    getFlatConditions(data) {
        if (data.children) {
            return [].concat(data.items, ...data.children.map((/**
             * @param {?} val
             * @return {?}
             */
            val => this.getFlatConditions(val))));
        }
        return [].concat(data.items);
    }
    /**
     *
     * @param {?} data 需要查询的节点
     * @return {?} 该节点下所有的组织信息
     */
    getFlatChildren(data) {
        if (data.children) {
            return [].concat(data, ...data.children.map((/**
             * @param {?} val
             * @return {?}
             */
            val => this.getFlatChildren(val))));
        }
        return [].concat(data);
    }
    /**
     * @desc 获取数据中已有的最大筛选条件编号
     * @return {?} 当前数据中已有的最大筛选条件编号
     */
    getMaxConditionid() {
        /** @type {?} */
        let maxid = 0;
        /** @type {?} */
        let items = this.getFlatConditions(this.queryconditionData);
        /** @type {?} */
        let conditionList = items.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => b.conditionid - a.conditionid));
        if (conditionList.length) {
            maxid = conditionList[0].conditionid;
        }
        return maxid;
    }
    /**
     * @desc 获取数据中已有的最大组织编号
     * @return {?} 当前数据中已有的最大组织编号
     */
    getMaxGroupid() {
        /** @type {?} */
        let maxid = 0;
        /** @type {?} */
        let childrens = this.getFlatChildren(this.queryconditionData);
        /** @type {?} */
        let conditionList = childrens.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => b.groupid - a.groupid));
        if (conditionList.length) {
            maxid = conditionList[0].groupid;
        }
        return maxid;
    }
    /**
     * 将querycondition转化为Array的格式并交付后端解析
     * @param {?} data  解析的数据
     * @param {?=} parentRelation 父节点的关联关系
     * @return {?}
     */
    objToArrayData(data, parentRelation) {
        /** @type {?} */
        let items = data.items;
        /** @type {?} */
        let children = data.children;
        items.forEach((/**
         * @param {?} val
         * @return {?}
         */
        val => val.relation = data.relation));
        if (children.length) {
            items = [].concat(...items, ...children.map((/**
             * @param {?} val
             * @return {?}
             */
            val => this.objToArrayData(val, data.relation))));
        }
        if (items.length && parentRelation) {
            items[items.length - 1].relation = parentRelation;
            items[0].Lbracket ? items[0].Lbracket += '(' : items[0].Lbracket = '(';
            items[items.length - 1].Rbracket ? items[items.length - 1].Rbracket += ')' : items[items.length - 1].Rbracket = ')';
        }
        return [...items];
    }
    /**
     * @return {?}
     */
    updateQueryConditionListData() {
        /** @type {?} */
        let result = this.objToArrayData(cloneDeep(this.queryconditionData));
        this.queryconditionListData = result;
        this.queryconditionListData$.next(this.queryconditionListData);
    }
    /**
     * 执行完增删操作后，存在部分group中无数据的情况，需要删除掉该部分无用数据
     * @param {?} data
     * @param {?=} parentData
     * @return {?}
     */
    treeshake(data, parentData) {
        if (data.children.length) {
            data.children.forEach((/**
             * @param {?} group
             * @return {?}
             */
            group => this.treeshake(group, data)));
        }
        //items存在或者children的数量大于等于2为正常数据，无需处理，return仅是返回给最外层数据
        if (data.items.length || data.children.length > 1) {
        }
        else if (data.groupid === 1) {
            //groupid === 1 特殊处理，items和children可以为0，但是children长度为1且items无数据时要将children处理
            if (!data.items.length && data.children.length === 1) {
                this.deleteGroup(data.children[0].groupid, data.children[0].path, false, true);
            }
        }
        else if (!data.children.length) {
            //children数量为0 items数量也为0， 该节点无存在必要，直接删除
            parentData.children = parentData.children.filter((/**
             * @param {?} val
             * @return {?}
             */
            val => val.groupid !== data.groupid));
        }
        else if (data.children.length === 1) {
            //items不存在，只有一个children,相当于删除该层分组，将子children升级
            this.deleteGroup(data.groupid, data.path, false, true);
        }
    }
}
StateService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
StateService.ctorParameters = () => [
    { type: NotifyService },
    { type: LocaleService }
];
if (false) {
    /** @type {?} */
    StateService.prototype.fieldConfig;
    /** @type {?} */
    StateService.prototype.fieldConfig$;
    /** @type {?} */
    StateService.prototype.queryconditionData;
    /** @type {?} */
    StateService.prototype.queryconditionData$;
    /** @type {?} */
    StateService.prototype.queryconditionListData;
    /** @type {?} */
    StateService.prototype.queryconditionListData$;
    /** @type {?} */
    StateService.prototype.checkedList;
    /** @type {?} */
    StateService.prototype.checkedList$;
    /**
     * @type {?}
     * @private
     */
    StateService.prototype.notifySer;
    /**
     * @type {?}
     * @private
     */
    StateService.prototype.localeService;
}
//# sourceMappingURL=data:application/json;base64,