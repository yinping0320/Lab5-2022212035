/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/solution.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { NotifyService } from '@farris/ui-notify';
import { QueryCondition } from '../entity/querycondition';
import { ValueType } from '../entity/valuetype';
import { TextControl } from '../entity/controltype/text/textcontrol';
import { InputGroupControl, DialogConfig } from '../entity/controltype/input-group/inputgroupcontrol';
import { TextValue } from '../entity/conditionvalue/textvalue';
import { DateRangeControl } from '../entity/controltype/daterange/date-range.control';
import { DateRangeValue } from '../entity/conditionvalue/daterangevalue';
import { NumberRangeControl } from '../entity/controltype/numberrange/numberrangecontrol';
import { NumberRangeValue } from '../entity/conditionvalue/numberrangevaue';
import { DropDownListControl } from '../entity/controltype/dropdownlist/dropdownlistcontrol';
import { DropDownListValue } from '../entity/conditionvalue/dropdownlistvalue';
import { SmartHelpContol, QuickSelectOption } from '../entity/controltype/smarthelp/smarthelpcontrol';
import { SmartHelpValue } from '../entity/conditionvalue/smarthelpvalue';
import { SingleDateControl } from '../entity/controltype/date/single-date-control';
import { SingleDateValue } from '../entity/conditionvalue/single-date-value';
import { SingleNumberControl } from '../entity/controltype/number/single-number-control';
import { SingleNumberValue } from '../entity/conditionvalue/single-number-value';
import { SingleYearControl } from '../entity/controltype/year/year-control';
import { SingleYearValue } from '../entity/conditionvalue/single-year-value';
import { SingleMonthControl } from '../entity/controltype/month/month-control';
import { SingleMonthValue } from '../entity/conditionvalue/single-month-value';
import { CheckBoxControl } from '../entity/controltype/checkbox/checkbox-control';
import { CheckBoxValue } from '../entity/conditionvalue/checkbox-value';
import { DateTimeRangeControl } from '../entity/controltype/daterange/datertime-range-control';
import { MonthRangeControl } from '../entity/controltype/monthrange/month-range-control';
import { MonthRangeValue } from '../entity/conditionvalue/month-range-value';
import { SingleDateTimeControl } from '../entity/controltype/date/single-date-time-control';
import { SingleDateTimeValue } from '../entity/conditionvalue/single-date-time-value';
import { ComboLookUpControl } from '../entity/controltype/combolookup/combolookup-control';
import { ComboLookUpValue } from '../entity/conditionvalue/combolookup-value';
import { RadioControl } from '../entity/controltype/radio/radio-control';
import { RadioValue } from '../entity/conditionvalue/radio-value';
import { InputGroupValue } from '../entity/conditionvalue/inputgroupvalue';
import { ControlType } from '../entity/controltype';
import { BehaviorSubject } from 'rxjs';
export class SolutionService {
    /**
     * @param {?} notify
     */
    constructor(notify) {
        this.notify = notify;
        // 标记变更
        this.controlConfigState = new BehaviorSubject([]);
        this.controlTypeMap = new Map([
            [ControlType.Text, 'text'], [ControlType.BoolCheck, 'bool-check'], [ControlType.DateRange, 'date'],
            [ControlType.DateTimeRange, 'date-time'], [ControlType.NumberRange, 'number'], [ControlType.DropDownList, 'dropdown'],
            [ControlType.SmartHelp, 'help'], [ControlType.SingleDate, 'single-date'], [ControlType.SingleNumber, 'single-number'],
            [ControlType.SingleYear, 'single-year'], [ControlType.SingleMonth, 'single-month'], [ControlType.MonthRange, 'month'],
            [ControlType.SingleDateTime, 'single-date-time'], [ControlType.ComboLookUp, 'combolist-help'], [ControlType.Radio, 'radio'],
            [ControlType.InputGroup, 'input-group']
        ]);
    }
    /**
     * @return {?}
     */
    getControlConfigState() {
        return this.controlConfigState;
    }
    /**
     * 传递过来的是已经处理过的条件
     * @param {?} simpleCondition
     * @return {?}
     */
    updateControlConfigState(simpleCondition) {
        this.controlConfigState.next(simpleCondition);
    }
    /**
     * 只返回存在的属性
     * @param {?} fields
     * @return {?}
     */
    convertToSimpleQueryConditions(fields) {
        if (fields && fields.length == 0) {
            return [];
        }
        return fields.map((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            /** @type {?} */
            let simpleQueryCondition = {};
            simpleQueryCondition['fieldCode'] = field.labelCode;
            if (field.hasOwnProperty('visible')) {
                simpleQueryCondition['visible'] = field.visible;
            }
            simpleQueryCondition['control'] = this.getSimpleControl(field);
            return simpleQueryCondition;
        }));
    }
    /**
     * 只处理设置的属性
     * @private
     * @param {?} field
     * @return {?}
     */
    getSimpleControl(field) {
        /** @type {?} */
        const controlData = field.control;
        /** @type {?} */
        let simpleControl = {};
        /** @type {?} */
        let tControlType = this.controlTypeMap.get(controlData.controltype);
        switch (tControlType) {
            case 'single-year':
                this.updateSimpleControl(simpleControl, ['maxDate', 'minDate'], controlData);
                break;
            default:
                simpleControl = {};
        }
        return simpleControl;
    }
    /**
     * 只处理指定属性
     * @private
     * @param {?} resultObj 修改的对象  {test01:'',test01:''}
     * @param {?} sourceProps 待获取的属性列表 ['prop01','prop02']
     * @param {?} source 取值来源{prop01:'',prop02:''}
     * @param {?=} distProps 目标属性，对应的返回属性按照设置['dist01','']
     * @return {?}
     */
    updateSimpleControl(resultObj, sourceProps, source, distProps = []) {
        if (distProps.length == 0) {
            distProps = sourceProps;
        }
        for (let m = 0; m < sourceProps.length; m++) {
            if (!distProps[m]) {
                distProps[m] = sourceProps[m];
            }
        }
        for (let k = 0; k < sourceProps.length; k++) {
            if (source && source.hasOwnProperty(sourceProps[k])) {
                resultObj[distProps[k]] = source[sourceProps[k]];
            }
        }
    }
    /**
     * 将字段配置JSON描述信息转换为筛选条件
     * @param {?} fields 字段配置信息
     * @return {?} 筛选条件数组
     */
    convertToQueryConditions(fields) {
        /** @type {?} */
        let queryCondition;
        return fields.map((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            queryCondition = new QueryCondition();
            queryCondition.id = field.id;
            queryCondition.fieldCode = field.labelCode;
            // queryCondition.code = field.code; 无用属性
            queryCondition.fieldName = field.name;
            queryCondition.valueType = ValueType.Value;
            queryCondition.placeHolder = field.placeHolder;
            queryCondition.beginPlaceHolder = field.hasOwnProperty('beginPlaceHolder') ? field.beginPlaceHolder : '';
            queryCondition.endPlaceHolder = field.hasOwnProperty('endPlaceHolder') ? field.endPlaceHolder : '';
            let { control, value } = this.getControlAndValue(field);
            queryCondition.control = control;
            queryCondition.value = value;
            return queryCondition;
        }));
    }
    /**
     * 根据控件类型分别创建筛选条件的control对象和value对象
     * @param {?} field 字段配置信息
     * @return {?} 筛选条件的control对象和value对象
     */
    getControlAndValue(field) {
        /** @type {?} */
        const controlData = field.control;
        /** @type {?} */
        const valueData = field.value;
        /** @type {?} */
        let control;
        /** @type {?} */
        let value;
        switch (controlData.controltype) {
            case 'text':
                control = new TextControl();
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.require = controlData.require;
                //plain string
                value = new TextValue({ value: valueData });
                break;
            case 'input-group':
                control = new InputGroupControl();
                control.className = controlData.className;
                control.require = controlData.require;
                control.editable = controlData.editable;
                control.groupText = controlData.groupText;
                control.usageMode = controlData.usageMode;
                control.dialogOptions = this.setInputGroupDialog(field);
                control.click = controlData.click;
                value = new InputGroupValue(valueData);
                break;
            case 'date':
                control = new DateRangeControl();
                control.format = controlData.format;
                control.returnFormat = controlData.returnFormat;
                control.dateChangedCmd = controlData.valueChangedCmd ? controlData.valueChangedCmd : controlData.dateChangedCmd;
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.require = controlData.require;
                control.weekSelect = controlData.weekSelect;
                control.showWeekNumbers = controlData.showWeekNumbers;
                control.startFieldCode = controlData.startFieldCode || field.labelCode;
                control.endFieldCode = controlData.endFieldCode || field.labelCode;
                control.enableSplit = controlData.enableSplit || false;
                //control.beginPlaceHolder=controlData.beginPlaceHolder;
                //control.endPlaceHolder=controlData.endPlaceHolder;
                //{startTime: valueData.startTime, endTime: valueData.endTime}
                value = new DateRangeValue(valueData);
                break;
            case 'date-time':
                control = new DateTimeRangeControl();
                control.format = controlData.format;
                control.returnFormat = controlData.returnFormat;
                control.dateChangedCmd = controlData.valueChangedCmd ? controlData.valueChangedCmd : controlData.dateChangedCmd;
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.require = controlData.require;
                control.enableCustomFormat = controlData.enableCustomFormat;
                control.enableSplit = controlData.enableSplit || false;
                // control.beginPlaceHolder=controlData.beginPlaceHolder;
                //control.endPlaceHolder=controlData.endPlaceHolder;
                //control.weekSelect = controlData.weekSelect;
                //control.showWeekNumbers = controlData.showWeekNumbers;
                //{startTime: valueData.startTime, endTime: valueData.endTime}
                value = new DateRangeValue(valueData);
                break;
            case 'month':
                control = new MonthRangeControl();
                control.format = controlData.format;
                control.returnFormat = controlData.returnFormat;
                control.dateChangedCmd = controlData.valueChangedCmd ? controlData.valueChangedCmd : controlData.dateChangedCmd;
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.require = controlData.require;
                control.enableSplit = controlData.enableSplit || false;
                //control.beginPlaceHolder=controlData.beginPlaceHolder;
                //control.endPlaceHolder=controlData.endPlaceHolder;
                value = new MonthRangeValue(valueData);
                break;
            case 'number':
                control = new NumberRangeControl();
                control.className = controlData.className;
                control.placeholder = this.emptyString(controlData.placeholder);
                control.require = controlData.require;
                control.precision = controlData.precision;
                control.textAlign = controlData.textAlign;
                control.bigNumber = controlData.isBigNumber;
                control.min = controlData.minValue;
                control.max = controlData.maxValue;
                //control.beginPlaceHolder=controlData.beginPlaceHolder;
                //control.endPlaceHolder=controlData.endPlaceHolder;
                //{startValue: valueData.startValue, endValue: valueData.endValue}
                value = new NumberRangeValue(valueData);
                break;
            case 'dropdown':
                control = new DropDownListControl();
                control.valueType = controlData.valueType;
                control.enumValues = controlData.enumValues;
                control.uri = controlData.uri;
                control.beforeShow = controlData.beforeShow;
                control.beforeHide = controlData.beforeHide;
                control.idField = controlData.idField;
                control.textField = controlData.textField;
                control.multiSelect = controlData.multiSelect;
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.panelHeight = controlData.panelHeight;
                control.require = controlData.require;
                //{value: [enumValues], key: 以，号分割的字符串})
                value = new DropDownListValue(valueData);
                break;
            case 'help':
                control = new SmartHelpContol();
                control.uri = controlData.uri;
                control.textField = controlData.textField;
                control.valueField = controlData.valueField;
                control.displayType = controlData.displayType;
                control.idField = controlData.idField;
                control.mapFields = controlData.mapFields;
                control.preEventCmd = controlData.preEventCmd;
                control.postEventCmd = controlData.postEventCmd;
                control.context = controlData.context;
                control.className = controlData.className;
                control.enableFullTree = controlData.enableFullTree;
                control.loadTreeDataType = controlData.loadTreeDataType;
                control.singleSelect = controlData.singleSelect;
                control.expandLevel = controlData.expandLevel;
                control.enableCascade = controlData.enableCascade;
                control.cascadeStatus = controlData.cascadeStatus;
                control.placeholder = controlData.placeholder;
                control.require = controlData.require;
                control.nosearch = controlData.nosearch;
                control.displayFields = controlData.displayFields;
                control.displayTextSeparator = controlData.displayTextSeparator;
                control.editable = controlData.editable;
                control.clearFields = controlData.clearFields;
                control.clear = controlData.clear;
                control.dialogTitle = controlData.dialogTitle;
                control.panelHeight = controlData.panelHeight;
                control.panelWidth = controlData.panelWidth;
                control.enableMultiFieldSearch = controlData.enableMultiFieldSearch;
                if (controlData.hasOwnProperty('pageSize')) {
                    control.pageSize = controlData.pageSize;
                }
                if (controlData.hasOwnProperty('pageList')) {
                    control.pageList = controlData.pageList;
                }
                if (controlData.hasOwnProperty('quickSelect')) {
                    /** @type {?} */
                    let quickSelectControl = new QuickSelectOption();
                    quickSelectControl.enable = controlData.quickSelect['enable'];
                    quickSelectControl.showItemsCount = controlData.quickSelect['showItemsCount'];
                    quickSelectControl.formatter = controlData.quickSelect['formatter'];
                    quickSelectControl.showMore = controlData.quickSelect['showMore'];
                    control.quickSelect = quickSelectControl;
                }
                //{value: [{}], valueField: string, textValue: string}
                value = new SmartHelpValue(valueData);
                break;
            case 'combolist-help':
                control = new ComboLookUpControl();
                control.uri = controlData.uri;
                control.idField = controlData.idField;
                control.valueField = controlData.valueField;
                control.textField = controlData.textField;
                control.mapFields = controlData.mapFields;
                control.displayType = this.displayTypeTransform(controlData.displayType);
                control.singleSelect = controlData.singleSelect;
                control.preEventCmd = controlData.preEventCmd;
                control.postEventCmd = controlData.postEventCmd;
                control.enableFullTree = controlData.enableFullTree;
                control.loadTreeDataType = controlData.loadTreeDataType;
                control.expandLevel = controlData.expandLevel;
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.panelWidth = controlData.panelWidth;
                control.panelHeight = controlData.panelHeight;
                control.require = controlData.require;
                control.context = controlData.context;
                //{value: [{}], valueField: string, textValue: string}
                value = new ComboLookUpValue(valueData);
                break;
            case 'single-date':
                control = new SingleDateControl();
                control.format = controlData.format;
                control.returnFormat = controlData.returnFormat;
                control.dateChangedCmd = controlData.valueChangedCmd ? controlData.valueChangedCmd : controlData.dateChangedCmd;
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.require = controlData.require;
                control.isDynamicDate = controlData.isDynamicDate ? controlData.isDynamicDate : false;
                //plain string
                value = new SingleDateValue(valueData);
                break;
            case 'single-date-time':
                control = new SingleDateTimeControl();
                control.format = controlData.format;
                control.returnFormat = controlData.returnFormat;
                control.dateChangedCmd = controlData.valueChangedCmd ? controlData.valueChangedCmd : controlData.dateChangedCmd;
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.require = controlData.require;
                control.enableCustomFormat = controlData.enableCustomFormat;
                value = new SingleDateTimeValue(valueData);
                break;
            case 'single-number':
                control = new SingleNumberControl();
                control.className = controlData.className;
                control.placeholder = this.emptyString(controlData.placeholder);
                control.precision = controlData.precision;
                control.require = controlData.require;
                control.textAlign = controlData.textAlign;
                control.bigNumber = controlData.isBigNumber;
                control.min = controlData.minValue;
                control.max = controlData.maxValue;
                //{numValue: xxxx}
                value = new SingleNumberValue(valueData);
                break;
            case 'single-year':
                control = new SingleYearControl();
                control.format = controlData.format;
                control.returnFormat = controlData.returnFormat;
                control.dateChangedCmd = controlData.valueChangedCmd ? controlData.valueChangedCmd : controlData.dateChangedCmd;
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.require = controlData.require;
                control.maxDate = controlData.maxDate;
                control.minDate = controlData.minDate;
                //yearValue : plain string
                value = new SingleYearValue(valueData);
                break;
            case 'single-month':
                control = new SingleMonthControl();
                control.format = controlData.format;
                control.returnFormat = controlData.returnFormat;
                control.dateChangedCmd = controlData.valueChangedCmd ? controlData.valueChangedCmd : controlData.dateChangedCmd;
                control.className = controlData.className;
                control.placeholder = controlData.placeholder;
                control.require = controlData.require;
                value = new SingleMonthValue(valueData);
                break;
            case 'bool-check':
                control = new CheckBoxControl();
                control.className = controlData.className;
                control.data = [{ value: "true", name: field.name }];
                control.horizontal = controlData.horizontal;
                control.disable = controlData.disable;
                control.isStringValue = false;
                control.require = controlData.require;
                //[true] or [false]
                value = new CheckBoxValue(valueData);
                break;
            case 'radio':
                control = new RadioControl();
                control.valueType = controlData.valueType;
                control.enumValues = controlData.enumValues;
                control.className = controlData.className;
                control.showLabel = controlData.showLabel;
                control.horizontal = controlData.horizontal;
                control.disabled = controlData.disabled;
                control.require = controlData.require;
                value = new RadioValue(valueData);
                break;
        }
        return { control, value };
    }
    /**
     * @return {?}
     */
    getGuid() {
        return (this.s4() + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + this.s4() + this.s4());
    }
    /**
     * @private
     * @return {?}
     */
    s4() {
        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    }
    /**
     * @param {?} message
     * @param {?} infoType
     * @param {?} title
     * @param {?} timeout
     * @return {?}
     */
    showInfo(message, infoType, title, timeout) {
        this.notify.config.position = 'top-center';
        if (infoType == 'success') {
            this.notify.success((/** @type {?} */ ({ title: title, msg: message, timeout: timeout })));
        }
        else if (infoType == 'info') {
            this.notify.info((/** @type {?} */ ({ title: title, msg: message, timeout: timeout })));
        }
        else if (infoType == 'warning') {
            this.notify.warning((/** @type {?} */ ({ title: title, msg: message, timeout: timeout })));
        }
        else if (infoType == 'error') {
            this.notify.error((/** @type {?} */ ({ title: title, msg: message, timeout: timeout })));
        }
    }
    /**
     * 根据字段获取Lable控件的Title
     * @param {?} field
     * @return {?}
     */
    getConditionItemTitle(field) {
        if (field.id && field.id !== '') {
            return field.fieldName;
        }
    }
    /**
     * 加载筛选方案时赋默认值
     * @param {?} solution 需要赋默认值的筛选方案
     * @param {?} fieldConfigs 默认值设置
     * @param {?} readonly 是否只读
     * @return {?} 已赋默认值的筛选方案
     */
    setValues(solution, fieldConfigs, readonly) {
        /** @type {?} */
        let qc;
        /** @type {?} */
        const conditions = solution.queryConditions ? solution.queryConditions : [];
        /** @type {?} */
        let controlType;
        fieldConfigs.forEach((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            qc = conditions.find((/**
             * @param {?} c
             * @return {?}
             */
            c => c.fieldCode == field.labelCode));
            //qc.control并不是controlData
            if (qc && qc.control && qc.value) {
                controlType = this.controlTypeMap.get(qc.control.getControlType());
                field.control = { controltype: controlType };
                const { control, value } = this.getControlAndValue(field);
                qc.value = this.isNumCheck(qc, value, field);
                qc.readonly = readonly;
            }
        }));
        return solution;
    }
    /**
     *
     * @param {?} conditions
     * @param {?} fieldConfigs 更新配置
     * @return {?} 已更新配置的筛选方案
     */
    updateControl(conditions, fieldConfigs) {
        /** @type {?} */
        let qc;
        conditions = conditions ? conditions : [];
        if (conditions.length > 0) {
            fieldConfigs.forEach((/**
             * @param {?} field
             * @return {?}
             */
            field => {
                qc = conditions.find((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => c.fieldCode == field['fieldCode']));
                if (qc && qc.hasOwnProperty('visible') && field.hasOwnProperty('visible') && field['visible'] !== qc.visible) {
                    qc.visible = field['visible'];
                }
                if (qc && qc.control) {
                    for (var prop in field.control) {
                        qc.control[prop] = field.control[prop];
                    }
                }
            }));
        }
        // let qc: QueryCondition;
        // const conditions = solution.queryConditions ? solution.queryConditions : [];
        // if (conditions.length > 0) {
        //   fieldConfigs.forEach(field => {
        //     qc = conditions.find(c => c.fieldCode == field.labelCode);
        //     if (qc && qc.control) {
        //       for (var prop in field.control) {
        //         qc.control[prop] = field.control[prop]
        //       }
        //     }
        //   });
        // }
    }
    /**
     * 必填控件非空判断
     * @param {?} conditions 进行筛选操作时当前所有的筛选条件
     * @return {?}
     */
    isValid(conditions) {
        /** @type {?} */
        let qc;
        /** @type {?} */
        const errorArr = conditions.map((/**
         * @param {?} qc
         * @return {?}
         */
        qc => {
            if (qc.control.isRequired() && qc.value.isEmpty() && qc.visible) {
                return {
                    type: 'require',
                    field: qc.fieldName
                };
            }
        }));
        return errorArr.filter((/**
         * @param {?} error
         * @return {?}
         */
        error => error != null));
    }
    /**
     * 解决数值控件placeholder显示为undefined的问题
     * @private
     * @param {?} data
     * @return {?}
     */
    emptyString(data) {
        if (data === null || data === undefined) {
            return '';
        }
        return data;
    }
    /**
     * 解决jit生成代码后下拉帮助控件的displayType属性与组件api不一致的问题
     * @private
     * @param {?} data 下拉帮助控件JSON描述中的displayType配置信息
     * @return {?}
     */
    displayTypeTransform(data) {
        if (data === 'List') {
            return 'LOOKUPLIST';
        }
        return 'LOOKUPTREELIST';
    }
    /**
     * 解决数值控件赋默认值功能与最大最小值限制功能的冲突问题
     * @private
     * @param {?} condition 当前正在赋默认值的筛选条件，若是数值类型，需要提取其control对象的max属性和min属性的值
     * @param {?} value 默认值配置value对象
     * @param {?} field 默认值配置
     * @return {?} 校验最大值和最小值之后的默认值配置value对象
     */
    isNumCheck(condition, value, field) {
        /** @type {?} */
        let minValue;
        /** @type {?} */
        let maxValue;
        if (field.control.controltype == 'single-number') {
            minValue = (condition.control.min == null || condition.control.min == undefined) ? -2147483648 : condition.control.min;
            maxValue = (condition.control.max == null || condition.control.max == undefined) ? 2147483647 : condition.control.max;
            value.numValue = ((value.numValue - minValue) > 0) ? value.numValue : minValue;
            value.numValue = ((value.numValue - maxValue) < 0) ? value.numValue : maxValue;
        }
        if (field.control.controltype == 'number') {
            minValue = (condition.control.min == null || condition.control.min == undefined) ? -2147483648 : condition.control.min;
            maxValue = (condition.control.max == null || condition.control.max == undefined) ? 2147483647 : condition.control.max;
            value.startValue = ((value.startValue - minValue) > 0) ? value.startValue : minValue;
            value.startValue = ((value.startValue - maxValue) < 0) ? value.startValue : maxValue;
            value.endValue = ((value.endValue - minValue) > 0) ? value.endValue : minValue;
            value.endValue = ((value.endValue - maxValue) < 0) ? value.endValue : maxValue;
        }
        return value;
    }
    /**
     * 智能输入框控件需要弹出表单时，将表单配置JSON描述转换为弹出表单命令可接收的弹窗参数
     * @private
     * @param {?} field 配置为智能输入框控件的字段的JSON描述
     * @return {?} 弹窗参数
     */
    setInputGroupDialog(field) {
        /** @type {?} */
        let inputGroupControlData = field.control;
        /** @type {?} */
        let modalConfigData = inputGroupControlData.modalConfig;
        if (!field.id || inputGroupControlData.usageMode == 'text') {
            return undefined;
        }
        /** @type {?} */
        let dialogConfig = new DialogConfig();
        dialogConfig.modalId = field.id;
        if (modalConfigData.mapFields) {
            dialogConfig.mapFields = JSON.parse(modalConfigData.mapFields.replace(/'/g, '"'));
        }
        dialogConfig.showHeader = modalConfigData.hasOwnProperty('showHeader') ? modalConfigData.showHeader : true;
        dialogConfig.showCloseButton = modalConfigData.hasOwnProperty('showCloseButton') ? modalConfigData.showCloseButton : true;
        dialogConfig.showMaxButton = modalConfigData.hasOwnProperty('showMaxButton') ? modalConfigData.showMaxButton : true;
        dialogConfig.title = modalConfigData.hasOwnProperty('title') ? modalConfigData.title : '';
        dialogConfig.width = modalConfigData.width;
        dialogConfig.height = modalConfigData.height;
        return dialogConfig;
    }
}
SolutionService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SolutionService.ctorParameters = () => [
    { type: NotifyService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    SolutionService.prototype.controlConfigState;
    /** @type {?} */
    SolutionService.prototype.controlTypeMap;
    /**
     * @type {?}
     * @private
     */
    SolutionService.prototype.notify;
}
//# sourceMappingURL=data:application/json;base64,