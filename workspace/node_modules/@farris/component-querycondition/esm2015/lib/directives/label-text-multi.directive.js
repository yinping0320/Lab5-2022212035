/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/label-text-multi.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Injector, ElementRef, NgZone } from '@angular/core';
export class LabelTextMultiDirective {
    /**
     * @param {?} el
     * @param {?} injector
     */
    constructor(el, injector) {
        this.el = el;
        this.injector = injector;
        this.multiCls = 'farris-group-multi-label';
        this._enableMulti = false;
        // 获取ngZone
        this.ngZone = null;
        if (!this.ngZone) {
            this.ngZone = this.injector.get(NgZone, null);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set enableMulti(value) {
        this._enableMulti = value;
        this.judgeMulti();
    }
    /**
     * @return {?}
     */
    get enableMulti() {
        return this._enableMulti;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    judgeMulti() {
        if (this._enableMulti) {
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    /** @type {?} */
                    let textEl = this.el.nativeElement.querySelector('.farris-label-text');
                    if (!textEl) {
                        return;
                    }
                    // 超出
                    if (textEl.clientWidth < textEl.scrollWidth) {
                        this.el.nativeElement.className = this.el.nativeElement.className + ' ' + this.multiCls;
                    }
                    else {
                        this.el.nativeElement.className = this.el.nativeElement.className.replace(this.multiCls, '');
                    }
                }), 20);
            }));
        }
    }
}
LabelTextMultiDirective.decorators = [
    { type: Directive, args: [{
                selector: '[label-text-multi]'
            },] }
];
/** @nocollapse */
LabelTextMultiDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Injector }
];
LabelTextMultiDirective.propDecorators = {
    enableMulti: [{ type: Input, args: ['label-text-multi',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    LabelTextMultiDirective.prototype.multiCls;
    /**
     * @type {?}
     * @private
     */
    LabelTextMultiDirective.prototype._enableMulti;
    /**
     * @type {?}
     * @private
     */
    LabelTextMultiDirective.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    LabelTextMultiDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    LabelTextMultiDirective.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFiZWwtdGV4dC1tdWx0aS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2NvbXBvbmVudC1xdWVyeWNvbmRpdGlvbi8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL2xhYmVsLXRleHQtbXVsdGkuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQVUsUUFBUSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFLdkYsTUFBTSxPQUFPLHVCQUF1Qjs7Ozs7SUFhaEMsWUFBb0IsRUFBYyxFQUFVLFFBQWtCO1FBQTFDLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBWnRELGFBQVEsR0FBRywwQkFBMEIsQ0FBQztRQUN0QyxpQkFBWSxHQUFHLEtBQUssQ0FBQzs7UUFVckIsV0FBTSxHQUFHLElBQUksQ0FBQztRQUVsQixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNkLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQVMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ3pEO0lBQ0wsQ0FBQzs7Ozs7SUFkRCxJQUNJLFdBQVcsQ0FBQyxLQUFjO1FBQzFCLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1FBQzFCLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUN0QixDQUFDOzs7O0lBQ0QsSUFBSSxXQUFXO1FBQ1gsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFBO0lBQzVCLENBQUM7Ozs7SUFTRCxRQUFRO0lBRVIsQ0FBQzs7OztJQUNELFVBQVU7UUFDTixJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDbkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUI7OztZQUFDLEdBQUcsRUFBRTtnQkFFL0IsVUFBVTs7O2dCQUFDLEdBQUcsRUFBRTs7d0JBQ1IsTUFBTSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQztvQkFDdEUsSUFBSSxDQUFDLE1BQU0sRUFBRTt3QkFDVCxPQUFPO3FCQUNWO29CQUNELEtBQUs7b0JBQ0wsSUFBSSxNQUFNLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxXQUFXLEVBQUU7d0JBQ3pDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7cUJBQzNGO3lCQUFNO3dCQUNILElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7cUJBQ2hHO2dCQUNMLENBQUMsR0FBRSxFQUFFLENBQUMsQ0FBQztZQUNYLENBQUMsRUFBQyxDQUFDO1NBRU47SUFDTCxDQUFDOzs7WUE1Q0osU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxvQkFBb0I7YUFDakM7Ozs7WUFKNEMsVUFBVTtZQUFwQixRQUFROzs7MEJBUXRDLEtBQUssU0FBQyxrQkFBa0I7Ozs7Ozs7SUFGekIsMkNBQThDOzs7OztJQUM5QywrQ0FBNkI7Ozs7O0lBVTdCLHlDQUFzQjs7Ozs7SUFDVixxQ0FBc0I7Ozs7O0lBQUUsMkNBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgT25Jbml0LCBJbmplY3RvciwgRWxlbWVudFJlZiwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW2xhYmVsLXRleHQtbXVsdGldJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTGFiZWxUZXh0TXVsdGlEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gICAgcHJpdmF0ZSBtdWx0aUNscyA9ICdmYXJyaXMtZ3JvdXAtbXVsdGktbGFiZWwnO1xyXG4gICAgcHJpdmF0ZSBfZW5hYmxlTXVsdGkgPSBmYWxzZTtcclxuICAgIEBJbnB1dCgnbGFiZWwtdGV4dC1tdWx0aScpXHJcbiAgICBzZXQgZW5hYmxlTXVsdGkodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLl9lbmFibGVNdWx0aSA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuanVkZ2VNdWx0aSgpO1xyXG4gICAgfVxyXG4gICAgZ2V0IGVuYWJsZU11bHRpKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9lbmFibGVNdWx0aVxyXG4gICAgfVxyXG4gICAgLy8g6I635Y+Wbmdab25lXHJcbiAgICBwcml2YXRlIG5nWm9uZSA9IG51bGw7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIGluamVjdG9yOiBJbmplY3Rvcikge1xyXG4gICAgICAgIGlmICghdGhpcy5uZ1pvbmUpIHtcclxuICAgICAgICAgICAgdGhpcy5uZ1pvbmUgPSB0aGlzLmluamVjdG9yLmdldDxOZ1pvbmU+KE5nWm9uZSwgbnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG5cclxuICAgIH1cclxuICAgIGp1ZGdlTXVsdGkoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2VuYWJsZU11bHRpKSB7XHJcbiAgICAgICAgICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGV4dEVsID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mYXJyaXMtbGFiZWwtdGV4dCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGV4dEVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g6LaF5Ye6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRleHRFbC5jbGllbnRXaWR0aCA8IHRleHRFbC5zY3JvbGxXaWR0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuY2xhc3NOYW1lID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LmNsYXNzTmFtZSArICcgJyArIHRoaXMubXVsdGlDbHM7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LmNsYXNzTmFtZSA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5jbGFzc05hbWUucmVwbGFjZSh0aGlzLm11bHRpQ2xzLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSwgMjApO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il19