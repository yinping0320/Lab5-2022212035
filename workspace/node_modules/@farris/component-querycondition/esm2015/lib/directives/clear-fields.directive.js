/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/clear-fields.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Optional, Self, Injector } from '@angular/core';
import { NgControl } from '@angular/forms';
import { QueryConditionComponent } from '../querycondition.component';
export class ClearFieldsDirective {
    /**
     * @param {?} ngCtrl
     * @param {?} qcc
     * @param {?} inject
     */
    constructor(ngCtrl, qcc, inject) {
        this.ngCtrl = ngCtrl;
        this.qcc = qcc;
        this.inject = inject;
        this.clearFields = '';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        //弹出帮助组件指定调用了父附件QueryConditionComponent，单独使用时无父组件
        if (!this.qcc)
            return;
        if (this.clearFields && this.ngCtrl) {
            this.ngCtrl.valueChanges.subscribe((/**
             * @param {?} v
             * @return {?}
             */
            (v) => {
                if (this.qcc.canClearRelatedFields) {
                    this.qcc.fieldCodeOfClearFields = [];
                    this.clearFields.split(',').forEach((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => {
                        /** @type {?} */
                        const visibleConditions = this.qcc.selectedFieldConditions.filter((/**
                         * @param {?} condition
                         * @return {?}
                         */
                        condition => { return !!condition.visible; }));
                        /** @type {?} */
                        const conditionItem = visibleConditions.find((/**
                         * @param {?} c
                         * @return {?}
                         */
                        c => c.fieldCode === n));
                        if (conditionItem) {
                            this.qcc.fieldCodeOfClearFields.push(n);
                            conditionItem.value.clearValue();
                        }
                    }));
                }
            }));
        }
    }
}
ClearFieldsDirective.decorators = [
    { type: Directive, args: [{
                selector: '[clear-fields]'
            },] }
];
/** @nocollapse */
ClearFieldsDirective.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },
    { type: QueryConditionComponent, decorators: [{ type: Optional }] },
    { type: Injector }
];
ClearFieldsDirective.propDecorators = {
    clearFields: [{ type: Input, args: ['clear-fields',] }]
};
if (false) {
    /** @type {?} */
    ClearFieldsDirective.prototype.clearFields;
    /**
     * @type {?}
     * @private
     */
    ClearFieldsDirective.prototype.ngCtrl;
    /**
     * @type {?}
     * @private
     */
    ClearFieldsDirective.prototype.qcc;
    /**
     * @type {?}
     * @private
     */
    ClearFieldsDirective.prototype.inject;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xlYXItZmllbGRzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvY29tcG9uZW50LXF1ZXJ5Y29uZGl0aW9uLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvY2xlYXItZmllbGRzLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFVLFFBQVEsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25GLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUt0RSxNQUFNLE9BQU8sb0JBQW9COzs7Ozs7SUFHN0IsWUFBd0MsTUFBaUIsRUFBc0IsR0FBNEIsRUFBVSxNQUFnQjtRQUE3RixXQUFNLEdBQU4sTUFBTSxDQUFXO1FBQXNCLFFBQUcsR0FBSCxHQUFHLENBQXlCO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBVTtRQUY5RyxnQkFBVyxHQUFHLEVBQUUsQ0FBQztJQUVnRyxDQUFDOzs7O0lBRXpJLFFBQVE7UUFDSixpREFBaUQ7UUFDakQsSUFBRyxDQUFDLElBQUksQ0FBQyxHQUFHO1lBQUUsT0FBTTtRQUNwQixJQUFHLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNoQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxTQUFTOzs7O1lBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTtnQkFDdEMsSUFBRyxJQUFJLENBQUMsR0FBRyxDQUFDLHFCQUFxQixFQUFFO29CQUMvQixJQUFJLENBQUMsR0FBRyxDQUFDLHNCQUFzQixHQUFHLEVBQUUsQ0FBQztvQkFDckMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTzs7OztvQkFBQyxDQUFDLENBQUMsRUFBRTs7OEJBQzlCLGlCQUFpQixHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsTUFBTTs7Ozt3QkFBQyxTQUFTLENBQUMsRUFBRSxHQUFFLE9BQU8sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUEsQ0FBQSxDQUFDLEVBQUM7OzhCQUN0RyxhQUFhLEdBQUcsaUJBQWlCLENBQUMsSUFBSTs7Ozt3QkFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLEtBQUssQ0FBQyxFQUFDO3dCQUNwRSxJQUFJLGFBQWEsRUFBRTs0QkFDZixJQUFJLENBQUMsR0FBRyxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQzs0QkFDeEMsYUFBYSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQzt5QkFDcEM7b0JBQ0wsQ0FBQyxFQUFDLENBQUM7aUJBQ047WUFDTCxDQUFDLEVBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQzs7O1lBMUJKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsZ0JBQWdCO2FBQzdCOzs7O1lBTFEsU0FBUyx1QkFTRCxRQUFRLFlBQUksSUFBSTtZQVJ4Qix1QkFBdUIsdUJBUWdDLFFBQVE7WUFWckIsUUFBUTs7OzBCQVF0RCxLQUFLLFNBQUMsY0FBYzs7OztJQUFyQiwyQ0FBd0M7Ozs7O0lBRTVCLHNDQUE2Qzs7Ozs7SUFBRSxtQ0FBZ0Q7Ozs7O0lBQUUsc0NBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgT25Jbml0LCBPcHRpb25hbCwgU2VsZiwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTmdDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBRdWVyeUNvbmRpdGlvbkNvbXBvbmVudCB9IGZyb20gJy4uL3F1ZXJ5Y29uZGl0aW9uLmNvbXBvbmVudCc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW2NsZWFyLWZpZWxkc10nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDbGVhckZpZWxkc0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7IFxyXG4gICAgQElucHV0KCdjbGVhci1maWVsZHMnKSBjbGVhckZpZWxkcyA9ICcnO1xyXG4gICBcclxuICAgIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBTZWxmKCkgcHJpdmF0ZSBuZ0N0cmw6IE5nQ29udHJvbCwgQE9wdGlvbmFsKCkgcHJpdmF0ZSBxY2M6IFF1ZXJ5Q29uZGl0aW9uQ29tcG9uZW50LCBwcml2YXRlIGluamVjdDogSW5qZWN0b3IpIHt9IFxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIC8v5by55Ye65biu5Yqp57uE5Lu25oyH5a6a6LCD55So5LqG54i26ZmE5Lu2UXVlcnlDb25kaXRpb25Db21wb25lbnTvvIzljZXni6zkvb/nlKjml7bml6DniLbnu4Tku7ZcclxuICAgICAgICBpZighdGhpcy5xY2MpIHJldHVyblxyXG4gICAgICAgIGlmKHRoaXMuY2xlYXJGaWVsZHMgJiYgdGhpcy5uZ0N0cmwpIHtcclxuICAgICAgICAgICAgdGhpcy5uZ0N0cmwudmFsdWVDaGFuZ2VzLnN1YnNjcmliZSggKHYpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmKHRoaXMucWNjLmNhbkNsZWFyUmVsYXRlZEZpZWxkcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucWNjLmZpZWxkQ29kZU9mQ2xlYXJGaWVsZHMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFyRmllbGRzLnNwbGl0KCcsJykuZm9yRWFjaChuID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmlzaWJsZUNvbmRpdGlvbnMgPSB0aGlzLnFjYy5zZWxlY3RlZEZpZWxkQ29uZGl0aW9ucy5maWx0ZXIoY29uZGl0aW9uID0+IHtyZXR1cm4gISFjb25kaXRpb24udmlzaWJsZX0pOyAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbmRpdGlvbkl0ZW0gPSB2aXNpYmxlQ29uZGl0aW9ucy5maW5kKGMgPT4gYy5maWVsZENvZGUgPT09IG4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uZGl0aW9uSXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5xY2MuZmllbGRDb2RlT2ZDbGVhckZpZWxkcy5wdXNoKG4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZGl0aW9uSXRlbS52YWx1ZS5jbGVhclZhbHVlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il19