/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FrameContext } from '@farris/devkit';
import { BsModalService } from '@farris/ui-modal';
import { Injector, ComponentFactoryResolver, NgModuleFactoryLoader, Inject, LOCALE_ID, ReflectiveInjector } from '@angular/core';
import { AifLocalePipe } from '../pipe/locale.pipe';
import { from } from 'rxjs';
import { SELECTOR_ARGS_INJECTOR } from '../config/selector-args-injector.config';
import { switchMap } from 'rxjs/operators';
/**
 * @abstract
 */
export class AbstractAifUiService {
    /**
     * @param {?} frameContext
     * @param {?} modalService
     * @param {?} injector
     * @param {?} cfr
     * @param {?} loader
     * @param {?} localeId
     */
    constructor(frameContext, modalService, injector, cfr, loader, localeId) {
        this.frameContext = frameContext;
        this.modalService = modalService;
        this.injector = injector;
        this.cfr = cfr;
        this.loader = loader;
        this.localeId = localeId;
        /**
         * 内置模态框配置
         */
        this.defaultModalOptions = {
            title: null,
            width: 650,
            height: 415,
            buttons: null,
            showButtons: null,
        };
        this.aifLocalePipe = new AifLocalePipe(localeId);
    }
    /**
     * @protected
     * @param {?} args
     * @param {?} type
     * @param {?=} modalOptions
     * @param {?=} customSelectorModuleUrl
     * @return {?}
     */
    openCreationRuleSelector(args, type, modalOptions, customSelectorModuleUrl) {
        if (typeof modalOptions == "string") {
            if (modalOptions == "") {
                throw "modalOptions不可为空";
            }
            modalOptions = JSON.parse(modalOptions);
        }
        modalOptions = modalOptions == null ? this.defaultModalOptions : modalOptions;
        modalOptions.title = modalOptions.title == null ? this.aifLocalePipe.transform("creationRuleSelector") : modalOptions.title;
        /** @type {?} */
        let cmpR = null;
        if (customSelectorModuleUrl == null || customSelectorModuleUrl.trim() == "") {
            /** @type {?} */
            let cmpF = this.cfr.resolveComponentFactory(type);
            /** @type {?} */
            let inj = ReflectiveInjector.resolveAndCreate([
                { provide: SELECTOR_ARGS_INJECTOR, useValue: args.ConvertToJsonObject() },
            ], this.injector);
            cmpR = cmpF.create(inj);
            this.configModalButtons(modalOptions, cmpR);
            cmpR.instance.bsModalRef4AifSelector = this.modalService.show(cmpR, modalOptions);
            return cmpR.instance.subject4CreationRule.asObservable();
        }
        else {
            return from(this.loader.load(customSelectorModuleUrl)).pipe(switchMap((/**
             * @param {?} moduleFactory
             * @return {?}
             */
            (moduleFactory) => {
                /** @type {?} */
                const moduleRef = moduleFactory.create(this.frameContext.root.injector);
                cmpR = moduleRef.instance.createCreationRuleSelector(this.frameContext.root.injector);
                this.configModalButtons(modalOptions, cmpR);
                cmpR.instance.bsModalRef4AifSelector = this.modalService.show(cmpR, modalOptions);
                return cmpR.instance.subject4CreationRule.asObservable();
            })));
        }
    }
    /**
     * 配置模态框按钮事件
     * @protected
     * @param {?} modalOptions
     * @param {?} cmpR
     * @return {?}
     */
    configModalButtons(modalOptions, cmpR) {
        modalOptions.buttons = [
            {
                text: this.aifLocalePipe.transform("confirm"),
                cls: "btn btn-primary",
                handle: cmpR.instance.clickOk4AifSelector,
            },
            {
                text: this.aifLocalePipe.transform("cancel"),
                cls: "btn btn-secondary",
                handle: cmpR.instance.clickClose4AifSelector,
            }
        ];
        modalOptions.showButtons = true;
    }
}
/** @nocollapse */
AbstractAifUiService.ctorParameters = () => [
    { type: FrameContext },
    { type: BsModalService },
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: NgModuleFactoryLoader },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
];
if (false) {
    /**
     * 内置模态框配置
     * @type {?}
     * @protected
     */
    AbstractAifUiService.prototype.defaultModalOptions;
    /**
     * @type {?}
     * @protected
     */
    AbstractAifUiService.prototype.aifLocalePipe;
    /**
     * @type {?}
     * @protected
     */
    AbstractAifUiService.prototype.frameContext;
    /**
     * @type {?}
     * @protected
     */
    AbstractAifUiService.prototype.modalService;
    /**
     * @type {?}
     * @protected
     */
    AbstractAifUiService.prototype.injector;
    /**
     * @type {?}
     * @protected
     */
    AbstractAifUiService.prototype.cfr;
    /**
     * @type {?}
     * @protected
     */
    AbstractAifUiService.prototype.loader;
    /**
     * @type {?}
     * @protected
     */
    AbstractAifUiService.prototype.localeId;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtYWlmLXVpLXNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZWRwLWFpZi9ydW50aW1lLWFwaS8iLCJzb3VyY2VzIjpbImxpYi9haWYtbWFudWFsLWNyZWF0aW9uL3NlcnZpY2UvYWJzdHJhY3QtYWlmLXVpLXNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM5QyxPQUFPLEVBQUUsY0FBYyxFQUFnQixNQUFNLGtCQUFrQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxRQUFRLEVBQUUsd0JBQXdCLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBa0Msa0JBQWtCLEVBQXlCLE1BQU0sZUFBZSxDQUFDO0FBQ3hMLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVwRCxPQUFPLEVBQWMsSUFBSSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBR3hDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ2pGLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQUUzQyxNQUFNLE9BQWdCLG9CQUFvQjs7Ozs7Ozs7O0lBY3RDLFlBQ2MsWUFBMEIsRUFDMUIsWUFBNEIsRUFDNUIsUUFBa0IsRUFDbEIsR0FBNkIsRUFDN0IsTUFBNkIsRUFDVixRQUFnQjtRQUxuQyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixpQkFBWSxHQUFaLFlBQVksQ0FBZ0I7UUFDNUIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNsQixRQUFHLEdBQUgsR0FBRyxDQUEwQjtRQUM3QixXQUFNLEdBQU4sTUFBTSxDQUF1QjtRQUNWLGFBQVEsR0FBUixRQUFRLENBQVE7Ozs7UUFoQjlCLHdCQUFtQixHQUFpQjtZQUNuRCxLQUFLLEVBQUUsSUFBSTtZQUNYLEtBQUssRUFBRSxHQUFHO1lBQ1YsTUFBTSxFQUFFLEdB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QUM3QyxHQUFHLEVBQUUsaUJBQWlCO2dCQUN0QixNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxtQkFBbUI7YUFDNUM7WUFDRDtnQkFDSSxJQUFJLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDO2dCQUM1QyxHQUFHLEVBQUUsbUJBQW1CO2dCQUN4QixNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxzQkFBc0I7YUFDL0M7U0FDSixDQUFDO1FBQ0YsWUFBWSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7SUFDcEMsQ0FBQzs7OztZQTdGSSxZQUFZO1lBQ1osY0FBYztZQUNkLFFBQVE7WUFBRSx3QkFBd0I7WUFBRSxxQkFBcUI7eUNBNkJ6RCxNQUFNLFNBQUMsU0FBUzs7Ozs7Ozs7SUFoQnJCLG1EQU1FOzs7OztJQUVGLDZDQUF1Qzs7Ozs7SUFHbkMsNENBQW9DOzs7OztJQUNwQyw0Q0FBc0M7Ozs7O0lBQ3RDLHdDQUE0Qjs7Ozs7SUFDNUIsbUNBQXVDOzs7OztJQUN2QyxzQ0FBdUM7Ozs7O0lBQ3ZDLHdDQUE2QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZyYW1lQ29udGV4dCB9IGZyb20gJ0BmYXJyaXMvZGV2a2l0JztcclxuaW1wb3J0IHsgQnNNb2RhbFNlcnZpY2UsIE1vZGFsT3B0aW9ucyB9IGZyb20gJ0BmYXJyaXMvdWktbW9kYWwnO1xyXG5pbXBvcnQgeyBJbmplY3RvciwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBOZ01vZHVsZUZhY3RvcnlMb2FkZXIsIEluamVjdCwgTE9DQUxFX0lELCBDb21wb25lbnRSZWYsIENvbXBvbmVudEZhY3RvcnksIFJlZmxlY3RpdmVJbmplY3RvciwgTmdNb2R1bGVGYWN0b3J5LCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEFpZkxvY2FsZVBpcGUgfSBmcm9tICcuLi9waXBlL2xvY2FsZS5waXBlJztcclxuaW1wb3J0IHsgRm9ybUdldENyZWF0aW9uUnVsZUVudGl0eUV4QXJncyB9IGZyb20gJy4uL2Zvcm0tYXJncyc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIGZyb20gfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgSVNsaW1DcmVhdGlvblJ1bGVFbnRpdHlFeCB9IGZyb20gJ0BlZHAtYWlmL2NvbW1vbi1hcGknO1xyXG5pbXBvcnQgeyBJQWlmQ3JlYXRpb25SdWxlU2VsZWN0b3JDb21wb25lbnQsIElBaWZDcmVhdGlvblJ1bGVTZWxlY3Rvck1vZHVsZSwgSUFpZlNlbGVjdG9yQ29tcG9uZW50IH0gZnJvbSAnLi4vYmFzZSc7XHJcbmltcG9ydCB7IFNFTEVDVE9SX0FSR1NfSU5KRUNUT1IgfSBmcm9tICcuLi9jb25maWcvc2VsZWN0b3ItYXJncy1pbmplY3Rvci5jb25maWcnO1xyXG5pbXBvcnQgeyBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RBaWZVaVNlcnZpY2Uge1xyXG4gICAgLyoqXHJcbiAgICAgKiDlhoXnva7mqKHmgIHmoYbphY3nva5cclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGRlZmF1bHRNb2RhbE9wdGlvbnM6IE1vZGFsT3B0aW9ucyA9IHtcclxuICAgICAgICB0aXRsZTogbnVsbCxcclxuICAgICAgICB3aWR0aDogNjUwLFxyXG4gICAgICAgIGhlaWdodDogNDE1LFxyXG4gICAgICAgIGJ1dHRvbnM6IG51bGwsXHJcbiAgICAgICAgc2hvd0J1dHRvbnM6IG51bGwsXHJcbiAgICB9O1xyXG5cclxuICAgIHByb3RlY3RlZCBhaWZMb2NhbGVQaXBlOiBBaWZMb2NhbGVQaXBlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByb3RlY3RlZCBmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCxcclxuICAgICAgICBwcm90ZWN0ZWQgbW9kYWxTZXJ2aWNlOiBCc01vZGFsU2VydmljZSxcclxuICAgICAgICBwcm90ZWN0ZWQgaW5qZWN0b3I6IEluamVjdG9yLFxyXG4gICAgICAgIHByb3RlY3RlZCBjZnI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcclxuICAgICAgICBwcm90ZWN0ZWQgbG9hZGVyOiBOZ01vZHVsZUZhY3RvcnlMb2FkZXIsXHJcbiAgICAgICAgQEluamVjdChMT0NBTEVfSUQpIHByb3RlY3RlZCBsb2NhbGVJZDogc3RyaW5nLFxyXG4gICAgKSB7XHJcbiAgICAgICAgdGhpcy5haWZMb2NhbGVQaXBlID0gbmV3IEFpZkxvY2FsZVBpcGUobG9jYWxlSWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBvcGVuQ3JlYXRpb25SdWxlU2VsZWN0b3IoYXJnczogRm9ybUdldENyZWF0aW9uUnVsZUVudGl0eUV4QXJncywgdHlwZTogVHlwZTxJQWlmQ3JlYXRpb25SdWxlU2VsZWN0b3JDb21wb25lbnQ+LCBtb2RhbE9wdGlvbnM/OiBNb2RhbE9wdGlvbnMsIGN1c3RvbVNlbGVjdG9yTW9kdWxlVXJsPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxJU2xpbUNyZWF0aW9uUnVsZUVudGl0eUV4PiB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBtb2RhbE9wdGlvbnMgPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBpZiAobW9kYWxPcHRpb25zID09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IFwibW9kYWxPcHRpb25z5LiN5Y+v5Li656m6XCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbW9kYWxPcHRpb25zID0gSlNPTi5wYXJzZShtb2RhbE9wdGlvbnMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbW9kYWxPcHRpb25zID0gbW9kYWxPcHRpb25zID09IG51bGwgPyB0aGlzLmRlZmF1bHRNb2RhbE9wdGlvbnMgOiBtb2RhbE9wdGlvbnM7XHJcbiAgICAgICAgbW9kYWxPcHRpb25zLnRpdGxlID0gbW9kYWxPcHRpb25zLnRpdGxlID09IG51bGwgPyB0aGlzLmFpZkxvY2FsZVBpcGUudHJhbnNmb3JtKFwiY3JlYXRpb25SdWxlU2VsZWN0b3JcIikgOiBtb2RhbE9wdGlvbnMudGl0bGU7XHJcblxyXG4gICAgICAgIGxldCBjbXBSOiBDb21wb25lbnRSZWY8SUFpZkNyZWF0aW9uUnVsZVNlbGVjdG9yQ29tcG9uZW50PiA9IG51bGw7XHJcbiAgICAgICAgaWYgKGN1c3RvbVNlbGVjdG9yTW9kdWxlVXJsID09IG51bGwgfHwgY3VzdG9tU2VsZWN0b3JNb2R1bGVVcmwudHJpbSgpID09IFwiXCIpIHtcclxuICAgICAgICAgICAgbGV0IGNtcEY6IENvbXBvbmVudEZhY3Rvcnk8SUFpZkNyZWF0aW9uUnVsZVNlbGVjdG9yQ29tcG9uZW50PiA9IHRoaXMuY2ZyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KHR5cGUpO1xyXG5cclxuICAgICAgICAgICAgbGV0IGluajogSW5qZWN0b3IgPSBSZWZsZWN0aXZlSW5qZWN0b3IucmVzb2x2ZUFuZENyZWF0ZShbXHJcbiAgICAgICAgICAgICAgICB7IHByb3ZpZGU6IFNFTEVDVE9SX0FSR1NfSU5KRUNUT1IsIHVzZVZhbHVlOiBhcmdzLkNvbnZlcnRUb0pzb25PYmplY3QoKSB9LFxyXG4gICAgICAgICAgICBdLCB0aGlzLmluamVjdG9yKTtcclxuICAgICAgICAgICAgY21wUiA9IGNtcEYuY3JlYXRlKGluaik7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnTW9kYWxCdXR0b25zKG1vZGFsT3B0aW9ucywgY21wUik7XHJcblxyXG4gICAgICAgICAgICBjbXBSLmluc3RhbmNlLmJzTW9kYWxSZWY0QWlmU2VsZWN0b3IgPSB0aGlzLm1vZGFsU2VydmljZS5zaG93KGNtcFIsIG1vZGFsT3B0aW9ucyk7XHJcbiAgICAgICAgICAgIHJldHVybiBjbXBSLmluc3RhbmNlLnN1YmplY3Q0Q3JlYXRpb25SdWxlLmFzT2JzZXJ2YWJsZSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmcm9tKHRoaXMubG9hZGVyLmxvYWQoY3VzdG9tU2VsZWN0b3JNb2R1bGVVcmwpKS5waXBlKFxyXG4gICAgICAgICAgICAgICAgc3dpdGNoTWFwKFxyXG4gICAgICAgICAgICAgICAgICAgIChtb2R1bGVGYWN0b3J5OiBOZ01vZHVsZUZhY3Rvcnk8SUFpZkNyZWF0aW9uUnVsZVNlbGVjdG9yTW9kdWxlPikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtb2R1bGVSZWYgPSBtb2R1bGVGYWN0b3J5LmNyZWF0ZSh0aGlzLmZyYW1lQ29udGV4dC5yb290LmluamVjdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY21wUiA9IG1vZHVsZVJlZi5pbnN0YW5jZS5jcmVhdGVDcmVhdGlvblJ1bGVTZWxlY3Rvcih0aGlzLmZyYW1lQ29udGV4dC5yb290LmluamVjdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25maWdNb2RhbEJ1dHRvbnMobW9kYWxPcHRpb25zLCBjbXBSKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY21wUi5pbnN0YW5jZS5ic01vZGFsUmVmNEFpZlNlbGVjdG9yID0gdGhpcy5tb2RhbFNlcnZpY2Uuc2hvdyhjbXBSLCBtb2RhbE9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY21wUi5pbnN0YW5jZS5zdWJqZWN0NENyZWF0aW9uUnVsZS5hc09ic2VydmFibGUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6YWN572u5qih5oCB5qGG5oyJ6ZKu5LqL5Lu2XHJcbiAgICAgKiBAcGFyYW0gbW9kYWxPcHRpb25zIFxyXG4gICAgICogQHBhcmFtIGNtcFIgXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBjb25maWdNb2RhbEJ1dHRvbnMobW9kYWxPcHRpb25zOiBNb2RhbE9wdGlvbnMsIGNtcFI6IENvbXBvbmVudFJlZjxJQWlmU2VsZWN0b3JDb21wb25lbnQ+KSB7XHJcbiAgICAgICAgbW9kYWxPcHRpb25zLmJ1dHRvbnMgPSBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRleHQ6IHRoaXMuYWlmTG9jYWxlUGlwZS50cmFuc2Zvcm0oXCJjb25maXJtXCIpLFxyXG4gICAgICAgICAgICAgICAgY2xzOiBcImJ0biBidG4tcHJpbWFyeVwiLFxyXG4gICAgICAgICAgICAgICAgaGFuZGxlOiBjbXBSLmluc3RhbmNlLmNsaWNrT2s0QWlmU2VsZWN0b3IsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRleHQ6IHRoaXMuYWlmTG9jYWxlUGlwZS50cmFuc2Zvcm0oXCJjYW5jZWxcIiksXHJcbiAgICAgICAgICAgICAgICBjbHM6IFwiYnRuIGJ0bi1zZWNvbmRhcnlcIixcclxuICAgICAgICAgICAgICAgIGhhbmRsZTogY21wUi5pbnN0YW5jZS5jbGlja0Nsb3NlNEFpZlNlbGVjdG9yLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXTtcclxuICAgICAgICBtb2RhbE9wdGlvbnMuc2hvd0J1dHRvbnMgPSB0cnVlO1xyXG4gICAgfVxyXG59Il19