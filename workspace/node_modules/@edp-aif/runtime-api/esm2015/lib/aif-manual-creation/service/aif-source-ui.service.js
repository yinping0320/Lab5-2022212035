/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector, ComponentFactoryResolver, NgModuleFactoryLoader, Inject, LOCALE_ID } from "@angular/core";
import { BsModalService } from '@farris/ui-modal';
import { RpcCreationRuleExecutorResult } from '../../entity';
import { AifDataService } from './aif-data.service';
import { FrameContext } from '@farris/devkit';
import { NavigationService } from '@farris/command-services';
import { FormGetCreationRuleEntityExArgs } from '../form-args';
import { PushSelectorComponent } from '../components/push-selector/push-selector.component';
import { AIF_UISTATE_KEY_CREATION_RULE_RESULT } from '../config/aif-form-constants';
import { AbstractAifUiService } from './abstract-aif-ui-service';
export class AifSourceUiService extends AbstractAifUiService {
    /**
     * @param {?} aifDataService
     * @param {?} navigationService
     * @param {?} frameContext
     * @param {?} modalService
     * @param {?} injector
     * @param {?} cfr
     * @param {?} loader
     * @param {?} localeId
     */
    constructor(aifDataService, navigationService, frameContext, modalService, injector, cfr, loader, localeId) {
        super(frameContext, modalService, injector, cfr, loader, localeId);
        this.aifDataService = aifDataService;
        this.navigationService = navigationService;
        this.frameContext = frameContext;
        this.modalService = modalService;
        this.injector = injector;
        this.cfr = cfr;
        this.loader = loader;
        this.localeId = localeId;
        this.aifUIStateCreationRuleResultKey = AIF_UISTATE_KEY_CREATION_RULE_RESULT;
    }
    /**
     * 下推时打开生单规则选择器
     * @param {?} sourceVoId
     * @param {?=} bizFlowchartId
     * @param {?=} modalOptions
     * @param {?=} customSelectorModuleUrl
     * @return {?}
     */
    openCreationRuleSelector4Push(sourceVoId, bizFlowchartId, modalOptions, customSelectorModuleUrl) {
        /** @type {?} */
        const args = new FormGetCreationRuleEntityExArgs();
        args.sourceVoId = sourceVoId;
        args.bizFlowchartId = bizFlowchartId;
        return this.openCreationRuleSelector(args, PushSelectorComponent, modalOptions, customSelectorModuleUrl);
    }
    /**
     * 特定下推时打开生单规则选择器
     * @param {?} sourceVoId
     * @param {?} targetVoId
     * @param {?=} bizFlowchartId
     * @param {?=} modalOptions
     * @param {?=} customSelectorModuleUrl
     * @return {?}
     */
    openCreationRuleSelector4SpecificPush(sourceVoId, targetVoId, bizFlowchartId, modalOptions, customSelectorModuleUrl) {
        /** @type {?} */
        const args = new FormGetCreationRuleEntityExArgs();
        args.sourceVoId = sourceVoId;
        args.targetVoId = targetVoId;
        args.bizFlowchartId = bizFlowchartId;
        return this.openCreationRuleSelector(args, PushSelectorComponent, modalOptions, customSelectorModuleUrl);
    }
    /**
     * 打开下游单据制单界面
     * @param {?} formSettings
     * @param {?} rpcCreationRuleExecutorResult
     * @param {?=} extParams
     * @return {?}
     */
    openTargetForm(formSettings, rpcCreationRuleExecutorResult, extParams) {
        if (formSettings == null) {
            throw "参数formSettings不可为空";
        }
        if (rpcCreationRuleExecutorResult == null) {
            throw "参数rpcCreationRuleExecutorResult不可为空";
        }
        if (typeof rpcCreationRuleExecutorResult == "string") {
            if (rpcCreationRuleExecutorResult == "") {
                throw "参数rpcCreationRuleExecutorResult不可为空";
            }
            /** @type {?} */
            const temp = new RpcCreationRuleExecutorResult();
            temp.LoadFromJson(rpcCreationRuleExecutorResult);
            rpcCreationRuleExecutorResult = temp;
        }
        if ((rpcCreationRuleExecutorResult instanceof RpcCreationRuleExecutorResult) == false) {
            /** @type {?} */
            const res = new RpcCreationRuleExecutorResult();
            res.LoadFromJsonObject(rpcCreationRuleExecutorResult);
            rpcCreationRuleExecutorResult = res;
        }
        if (rpcCreationRuleExecutorResult.mappingResults == null || rpcCreationRuleExecutorResult.mappingResults.length == 0) {
            return;
        }
        else if (rpcCreationRuleExecutorResult.mappingResults.length == 1) {
            //只有一条数据则打开卡片
            this.navigationService.openApp(rpcCreationRuleExecutorResult.mappingResults[0].associations[0].tarDataId, formSettings.targetCardAppId, formSettings.targetCardAppEntrance, this.buildRouteParams(rpcCreationRuleExecutorResult, extParams == null ? {} : extParams), false);
        }
        else {
            if (formSettings.targetListAppId != null) {
                // 多条数据且配置批量编辑界面
                throw "暂不支持打开批量编辑界面";
                this.navigationService.openApp(rpcCreationRuleExecutorResult.mappingResults[0].associations[0].tarDataId, formSettings.targetListAppId, formSettings.targetListAppEntrance, this.buildRouteParams(rpcCreationRuleExecutorResult, extParams == null ? {} : extParams), false);
            }
            else {
                //有多条数据但未配置批量编辑界面则打开多个卡片
                for (let mappingResult of rpcCreationRuleExecutorResult.mappingResults) {
                    /** @type {?} */
                    let singleRes = new RpcCreationRuleExecutorResult();
                    singleRes.bizFlowchartId = rpcCreationRuleExecutorResult.bizFlowchartId;
                    singleRes.creationRuleId = rpcCreationRuleExecutorResult.creationRuleId;
                    singleRes.creationRuleInstanceId = rpcCreationRuleExecutorResult.creationRuleInstanceId;
                    singleRes.mappingResults = [mappingResult];
                    this.navigationService.openApp(mappingResult.associations[0].tarDataId, formSettings.targetCardAppId, formSettings.targetCardAppEntrance, this.buildRouteParams(singleRes, extParams == null ? {} : extParams), false);
                }
            }
        }
    }
    /**
     *
     * @private
     * @param {?} rpcCreationRuleExecutorResult
     * @param {?} extParams
     * @return {?}
     */
    buildRouteParams(rpcCreationRuleExecutorResult, extParams) {
        /** @type {?} */
        const params = extParams;
        params[this.aifUIStateCreationRuleResultKey] = rpcCreationRuleExecutorResult;
        return params;
    }
}
AifSourceUiService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AifSourceUiService.ctorParameters = () => [
    { type: AifDataService },
    { type: NavigationService },
    { type: FrameContext },
    { type: BsModalService },
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: NgModuleFactoryLoader },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    AifSourceUiService.prototype.aifUIStateCreationRuleResultKey;
    /**
     * @type {?}
     * @protected
     */
    AifSourceUiService.prototype.aifDataService;
    /**
     * @type {?}
     * @protected
     */
    AifSourceUiService.prototype.navigationService;
    /**
     * @type {?}
     * @protected
     */
    AifSourceUiService.prototype.frameContext;
    /**
     * @type {?}
     * @protected
     */
    AifSourceUiService.prototype.modalService;
    /**
     * @type {?}
     * @protected
     */
    AifSourceUiService.prototype.injector;
    /**
     * @type {?}
     * @protected
     */
    AifSourceUiService.prototype.cfr;
    /**
     * @type {?}
     * @protected
     */
    AifSourceUiService.prototype.loader;
    /** @type {?} */
    AifSourceUiService.prototype.localeId;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWlmLXNvdXJjZS11aS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVkcC1haWYvcnVudGltZS1hcGkvIiwic291cmNlcyI6WyJsaWIvYWlmLW1hbnVhbC1jcmVhdGlvbi9zZXJ2aWNlL2FpZi1zb3VyY2UtdWkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsd0JBQXdCLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBdUUsTUFBTSxlQUFlLENBQUM7QUFHOUwsT0FBTyxFQUFnQixjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNoRSxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDN0QsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM5QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUU3RCxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFL0QsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0scURBQXFELENBQUM7QUFHNUYsT0FBTyxFQUFFLG9DQUFvQyxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDcEYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFJakUsTUFBTSxPQUFPLGtCQUFtQixTQUFRLG9CQUFvQjs7Ozs7Ozs7Ozs7SUFHeEQsWUFDYyxjQUE4QixFQUM5QixpQkFBb0MsRUFDcEMsWUFBMEIsRUFDMUIsWUFBNEIsRUFDNUIsUUFBa0IsRUFDbEIsR0FBNkIsRUFDN0IsTUFBNkIsRUFDYixRQUFnQjtRQUUxQyxLQUFLLENBQUMsWUFBWSxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUMs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LFNBQVMsQ0FBQyxFQUNwRSxLQUFLLENBQ1IsQ0FBQztpQkFDTDthQUNKO1NBQ0o7SUFDTCxDQUFDOzs7Ozs7OztJQU9PLGdCQUFnQixDQUFDLDZCQUE0RCxFQUFFLFNBQWE7O2NBQzFGLE1BQU0sR0FBRyxTQUFTO1FBQ3hCLE1BQU0sQ0FBQyxJQUFJLENBQUMsK0JBQStCLENBQUMsR0FBRyw2QkFBNkIsQ0FBQztRQUU3RSxPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDOzs7WUF2SEosVUFBVTs7OztZQWJGLGNBQWM7WUFFZCxpQkFBaUI7WUFEakIsWUFBWTtZQUhFLGNBQWM7WUFIaEIsUUFBUTtZQUFFLHdCQUF3QjtZQUFFLHFCQUFxQjt5Q0E4QnJFLE1BQU0sU0FBQyxTQUFTOzs7Ozs7O0lBVnJCLDZEQUFnRzs7Ozs7SUFHNUYsNENBQXdDOzs7OztJQUN4QywrQ0FBOEM7Ozs7O0lBQzlDLDBDQUFvQzs7Ozs7SUFDcEMsMENBQXNDOzs7OztJQUN0QyxzQ0FBNEI7Ozs7O0lBQzVCLGlDQUF1Qzs7Ozs7SUFDdkMsb0NBQXVDOztJQUN2QyxzQ0FBMEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBOZ01vZHVsZUZhY3RvcnlMb2FkZXIsIEluamVjdCwgTE9DQUxFX0lELCBDb21wb25lbnRSZWYsIENvbXBvbmVudEZhY3RvcnksIE5nTW9kdWxlRmFjdG9yeSwgUmVmbGVjdGl2ZUluamVjdG9yIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZnJvbSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBJU2xpbUNyZWF0aW9uUnVsZUVudGl0eUV4LCBGb3JtU2V0dGluZ3MgfSBmcm9tICdAZWRwLWFpZi9jb21tb24tYXBpJztcclxuaW1wb3J0IHsgTW9kYWxPcHRpb25zLCBCc01vZGFsU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbW9kYWwnO1xyXG5pbXBvcnQgeyBScGNDcmVhdGlvblJ1bGVFeGVjdXRvclJlc3VsdCB9IGZyb20gJy4uLy4uL2VudGl0eSc7XHJcbmltcG9ydCB7IEFpZkRhdGFTZXJ2aWNlIH0gZnJvbSAnLi9haWYtZGF0YS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRnJhbWVDb250ZXh0IH0gZnJvbSAnQGZhcnJpcy9kZXZraXQnO1xyXG5pbXBvcnQgeyBOYXZpZ2F0aW9uU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvY29tbWFuZC1zZXJ2aWNlcyc7XHJcbmltcG9ydCB7IEFpZkxvY2FsZVBpcGUgfSBmcm9tICcuLi9waXBlL2xvY2FsZS5waXBlJztcclxuaW1wb3J0IHsgRm9ybUdldENyZWF0aW9uUnVsZUVudGl0eUV4QXJncyB9IGZyb20gJy4uL2Zvcm0tYXJncyc7XHJcbmltcG9ydCB7IElBaWZDcmVhdGlvblJ1bGVTZWxlY3RvckNvbXBvbmVudCwgSUFpZkNyZWF0aW9uUnVsZVNlbGVjdG9yTW9kdWxlLCBJQWlmU2VsZWN0b3JDb21wb25lbnQgfSBmcm9tICcuLi9iYXNlJztcclxuaW1wb3J0IHsgUHVzaFNlbGVjdG9yQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50cy9wdXNoLXNlbGVjdG9yL3B1c2gtc2VsZWN0b3IuY29tcG9uZW50JztcclxuaW1wb3J0IHsgU0VMRUNUT1JfQVJHU19JTkpFQ1RPUiB9IGZyb20gJy4uL2NvbmZpZy9zZWxlY3Rvci1hcmdzLWluamVjdG9yLmNvbmZpZyc7XHJcbmltcG9ydCB7IHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgQUlGX1VJU1RBVEVfS0VZX0NSRUFUSU9OX1JVTEVfUkVTVUxUIH0gZnJvbSAnLi4vY29uZmlnL2FpZi1mb3JtLWNvbnN0YW50cyc7XHJcbmltcG9ydCB7IEFic3RyYWN0QWlmVWlTZXJ2aWNlIH0gZnJvbSAnLi9hYnN0cmFjdC1haWYtdWktc2VydmljZSc7XHJcbmRlY2xhcmUgdmFyIFN5c3RlbTogYW55O1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQWlmU291cmNlVWlTZXJ2aWNlIGV4dGVuZHMgQWJzdHJhY3RBaWZVaVNlcnZpY2Uge1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBhaWZVSVN0YXRlQ3JlYXRpb25SdWxlUmVzdWx0S2V5OiBzdHJpbmcgPSBBSUZfVUlTVEFURV9LRVlfQ1JFQVRJT05fUlVMRV9SRVNVTFQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJvdGVjdGVkIGFpZkRhdGFTZXJ2aWNlOiBBaWZEYXRhU2VydmljZSxcclxuICAgICAgICBwcm90ZWN0ZWQgbmF2aWdhdGlvblNlcnZpY2U6IE5hdmlnYXRpb25TZXJ2aWNlLFxyXG4gICAgICAgIHByb3RlY3RlZCBmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCxcclxuICAgICAgICBwcm90ZWN0ZWQgbW9kYWxTZXJ2aWNlOiBCc01vZGFsU2VydmljZSxcclxuICAgICAgICBwcm90ZWN0ZWQgaW5qZWN0b3I6IEluamVjdG9yLFxyXG4gICAgICAgIHByb3RlY3RlZCBjZnI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcclxuICAgICAgICBwcm90ZWN0ZWQgbG9hZGVyOiBOZ01vZHVsZUZhY3RvcnlMb2FkZXIsXHJcbiAgICAgICAgQEluamVjdChMT0NBTEVfSUQpIHB1YmxpYyBsb2NhbGVJZDogc3RyaW5nLFxyXG4gICAgKSB7XHJcbiAgICAgICAgc3VwZXIoZnJhbWVDb250ZXh0LCBtb2RhbFNlcnZpY2UsIGluamVjdG9yLCBjZnIsIGxvYWRlciwgbG9jYWxlSWQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5LiL5o6o5pe25omT5byA55Sf5Y2V6KeE5YiZ6YCJ5oup5ZmoXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvcGVuQ3JlYXRpb25SdWxlU2VsZWN0b3I0UHVzaChzb3VyY2VWb0lkOiBzdHJpbmcsIGJpekZsb3djaGFydElkPzogc3RyaW5nLCBtb2RhbE9wdGlvbnM/OiBNb2RhbE9wdGlvbnMsIGN1c3RvbVNlbGVjdG9yTW9kdWxlVXJsPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxJU2xpbUNyZWF0aW9uUnVsZUVudGl0eUV4PiB7XHJcbiAgICAgICAgY29uc3QgYXJncyA9IG5ldyBGb3JtR2V0Q3JlYXRpb25SdWxlRW50aXR5RXhBcmdzKCk7XHJcbiAgICAgICAgYXJncy5zb3VyY2VWb0lkID0gc291cmNlVm9JZDtcclxuICAgICAgICBhcmdzLmJpekZsb3djaGFydElkID0gYml6Rmxvd2NoYXJ0SWQ7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLm9wZW5DcmVhdGlvblJ1bGVTZWxlY3RvcihhcmdzLCBQdXNoU2VsZWN0b3JDb21wb25lbnQsIG1vZGFsT3B0aW9ucywgY3VzdG9tU2VsZWN0b3JNb2R1bGVVcmwpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog54m55a6a5LiL5o6o5pe25omT5byA55Sf5Y2V6KeE5YiZ6YCJ5oup5ZmoXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBvcGVuQ3JlYXRpb25SdWxlU2VsZWN0b3I0U3BlY2lmaWNQdXNoKHNvdXJjZVZvSWQ6IHN0cmluZywgdGFyZ2V0Vm9JZDogc3RyaW5nLCBiaXpGbG93Y2hhcnRJZD86IHN0cmluZywgbW9kYWxPcHRpb25zPzogTW9kYWxPcHRpb25zLCBjdXN0b21TZWxlY3Rvck1vZHVsZVVybD86IHN0cmluZyk6IE9ic2VydmFibGU8SVNsaW1DcmVhdGlvblJ1bGVFbnRpdHlFeD4ge1xyXG4gICAgICAgIGNvbnN0IGFyZ3MgPSBuZXcgRm9ybUdldENyZWF0aW9uUnVsZUVudGl0eUV4QXJncygpO1xyXG4gICAgICAgIGFyZ3Muc291cmNlVm9JZCA9IHNvdXJjZVZvSWQ7XHJcbiAgICAgICAgYXJncy50YXJnZXRWb0lkID0gdGFyZ2V0Vm9JZDtcclxuICAgICAgICBhcmdzLmJpekZsb3djaGFydElkID0gYml6Rmxvd2NoYXJ0SWQ7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLm9wZW5DcmVhdGlvblJ1bGVTZWxlY3RvcihhcmdzLCBQdXNoU2VsZWN0b3JDb21wb25lbnQsIG1vZGFsT3B0aW9ucywgY3VzdG9tU2VsZWN0b3JNb2R1bGVVcmwpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5omT5byA5LiL5ri45Y2V5o2u5Yi25Y2V55WM6Z2iXHJcbiAgICAgKiBAcGFyYW0gZm9ybVNldHRpbmdzIFxyXG4gICAgICogQHBhcmFtIHJwY0NyZWF0aW9uUnVsZUV4ZWN1dG9yUmVzdWx0IFxyXG4gICAgICogQHBhcmFtIGV4dFBhcmFtcyBcclxuICAgICAqL1xyXG4gICAgcHVibGljIG9wZW5UYXJnZXRGb3JtKGZvcm1TZXR0aW5nczogRm9ybVNldHRpbmdzLCBycGNDcmVhdGlvblJ1bGVFeGVjdXRvclJlc3VsdDogUnBjQ3JlYXRpb25SdWxlRXhlY3V0b3JSZXN1bHQsIGV4dFBhcmFtcz86IHt9KTogT2JzZXJ2YWJsZTxJU2xpbUNyZWF0aW9uUnVsZUVudGl0eUV4PiB7XHJcbiAgICAgICAgaWYgKGZvcm1TZXR0aW5ncyA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IFwi5Y+C5pWwZm9ybVNldHRpbmdz5LiN5Y+v5Li656m6XCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChycGNDcmVhdGlvblJ1bGVFeGVjdXRvclJlc3VsdCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IFwi5Y+C5pWwcnBjQ3JlYXRpb25SdWxlRXhlY3V0b3JSZXN1bHTkuI3lj6/kuLrnqbpcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiBycGNDcmVhdGlvblJ1bGVFeGVjdXRvclJlc3VsdCA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIGlmIChycGNDcmVhdGlvblJ1bGVFeGVjdXRvclJlc3VsdCA9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBcIuWPguaVsHJwY0NyZWF0aW9uUnVsZUV4ZWN1dG9yUmVzdWx05LiN5Y+v5Li656m6XCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgdGVtcCA9IG5ldyBScGNDcmVhdGlvblJ1bGVFeGVjdXRvclJlc3VsdCgpO1xyXG4gICAgICAgICAgICB0ZW1wLkxvYWRGcm9tSnNvbihycGNDcmVhdGlvblJ1bGVFeGVjdXRvclJlc3VsdCk7XHJcbiAgICAgICAgICAgIHJwY0NyZWF0aW9uUnVsZUV4ZWN1dG9yUmVzdWx0ID0gdGVtcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKChycGNDcmVhdGlvblJ1bGVFeGVjdXRvclJlc3VsdCBpbnN0YW5jZW9mIFJwY0NyZWF0aW9uUnVsZUV4ZWN1dG9yUmVzdWx0KSA9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICBjb25zdCByZXMgPSBuZXcgUnBjQ3JlYXRpb25SdWxlRXhlY3V0b3JSZXN1bHQoKTtcclxuICAgICAgICAgICAgcmVzLkxvYWRGcm9tSnNvbk9iamVjdChycGNDcmVhdGlvblJ1bGVFeGVjdXRvclJlc3VsdCk7XHJcbiAgICAgICAgICAgIHJwY0NyZWF0aW9uUnVsZUV4ZWN1dG9yUmVzdWx0ID0gcmVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocnBjQ3JlYXRpb25SdWxlRXhlY3V0b3JSZXN1bHQubWFwcGluZ1Jlc3VsdHMgPT0gbnVsbCB8fCBycGNDcmVhdGlvblJ1bGVFeGVjdXRvclJlc3VsdC5tYXBwaW5nUmVzdWx0cy5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfSBlbHNlIGlmIChycGNDcmVhdGlvblJ1bGVFeGVjdXRvclJlc3VsdC5tYXBwaW5nUmVzdWx0cy5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgICAgICAvL+WPquacieS4gOadoeaVsOaNruWImeaJk+W8gOWNoeeJh1xyXG4gICAgICAgICAgICB0aGlzLm5hdmlnYXRpb25TZXJ2aWNlLm9wZW5BcHAoXHJcbiAgICAgICAgICAgICAgICBycGNDcmVhdGlvblJ1bGVFeGVjdXRvclJlc3VsdC5tYXBwaW5nUmVzdWx0c1swXS5hc3NvY2lhdGlvbnNbMF0udGFyRGF0YUlkLFxyXG4gICAgICAgICAgICAgICAgZm9ybVNldHRpbmdzLnRhcmdldENhcmRBcHBJZCxcclxuICAgICAgICAgICAgICAgIGZvcm1TZXR0aW5ncy50YXJnZXRDYXJkQXBwRW50cmFuY2UsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ1aWxkUm91dGVQYXJhbXMocnBjQ3JlYXRpb25SdWxlRXhlY3V0b3JSZXN1bHQsIGV4dFBhcmFtcyA9PSBudWxsID8ge30gOiBleHRQYXJhbXMpLFxyXG4gICAgICAgICAgICAgICAgZmFsc2VcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoZm9ybVNldHRpbmdzLnRhcmdldExpc3RBcHBJZCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDlpJrmnaHmlbDmja7kuJTphY3nva7mibnph4/nvJbovpHnlYzpnaJcclxuICAgICAgICAgICAgICAgIHRocm93IFwi5pqC5LiN5pSv5oyB5omT5byA5om56YeP57yW6L6R55WM6Z2iXCI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5hdmlnYXRpb25TZXJ2aWNlLm9wZW5BcHAoXHJcbiAgICAgICAgICAgICAgICAgICAgcnBjQ3JlYXRpb25SdWxlRXhlY3V0b3JSZXN1bHQubWFwcGluZ1Jlc3VsdHNbMF0uYXNzb2NpYXRpb25zWzBdLnRhckRhdGFJZCxcclxuICAgICAgICAgICAgICAgICAgICBmb3JtU2V0dGluZ3MudGFyZ2V0TGlzdEFwcElkLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1TZXR0aW5ncy50YXJnZXRMaXN0QXBwRW50cmFuY2UsXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5idWlsZFJvdXRlUGFyYW1zKHJwY0NyZWF0aW9uUnVsZUV4ZWN1dG9yUmVzdWx0LCBleHRQYXJhbXMgPT0gbnVsbCA/IHt9IDogZXh0UGFyYW1zKSxcclxuICAgICAgICAgICAgICAgICAgICBmYWxzZVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8v5pyJ5aSa5p2h5pWw5o2u5L2G5pyq6YWN572u5om56YeP57yW6L6R55WM6Z2i5YiZ5omT5byA5aSa5Liq5Y2h54mHXHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBtYXBwaW5nUmVzdWx0IG9mIHJwY0NyZWF0aW9uUnVsZUV4ZWN1dG9yUmVzdWx0Lm1hcHBpbmdSZXN1bHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNpbmdsZVJlcyA9IG5ldyBScGNDcmVhdGlvblJ1bGVFeGVjdXRvclJlc3VsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNpbmdsZVJlcy5iaXpGbG93Y2hhcnRJZCA9IHJwY0NyZWF0aW9uUnVsZUV4ZWN1dG9yUmVzdWx0LmJpekZsb3djaGFydElkO1xyXG4gICAgICAgICAgICAgICAgICAgIHNpbmdsZVJlcy5jcmVhdGlvblJ1bGVJZCA9IHJwY0NyZWF0aW9uUnVsZUV4ZWN1dG9yUmVzdWx0LmNyZWF0aW9uUnVsZUlkO1xyXG4gICAgICAgICAgICAgICAgICAgIHNpbmdsZVJlcy5jcmVhdGlvblJ1bGVJbnN0YW5jZUlkID0gcnBjQ3JlYXRpb25SdWxlRXhlY3V0b3JSZXN1bHQuY3JlYXRpb25SdWxlSW5zdGFuY2VJZDtcclxuICAgICAgICAgICAgICAgICAgICBzaW5nbGVSZXMubWFwcGluZ1Jlc3VsdHMgPSBbbWFwcGluZ1Jlc3VsdF07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmF2aWdhdGlvblNlcnZpY2Uub3BlbkFwcChcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFwcGluZ1Jlc3VsdC5hc3NvY2lhdGlvbnNbMF0udGFyRGF0YUlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtU2V0dGluZ3MudGFyZ2V0Q2FyZEFwcElkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtU2V0dGluZ3MudGFyZ2V0Q2FyZEFwcEVudHJhbmNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1aWxkUm91dGVQYXJhbXMoc2luZ2xlUmVzLCBleHRQYXJhbXMgPT0gbnVsbCA/IHt9IDogZXh0UGFyYW1zKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gYWN0aW9uIOebruagh0FwcOWKqOS9nFxyXG4gICAgICogQHBhcmFtIHBhaXJzIOWFtuS7luWunuS9k+WPguaVsOmUruWAvOWvuVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGJ1aWxkUm91dGVQYXJhbXMocnBjQ3JlYXRpb25SdWxlRXhlY3V0b3JSZXN1bHQ6IFJwY0NyZWF0aW9uUnVsZUV4ZWN1dG9yUmVzdWx0LCBleHRQYXJhbXM6IHt9KToge30ge1xyXG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IGV4dFBhcmFtcztcclxuICAgICAgICBwYXJhbXNbdGhpcy5haWZVSVN0YXRlQ3JlYXRpb25SdWxlUmVzdWx0S2V5XSA9IHJwY0NyZWF0aW9uUnVsZUV4ZWN1dG9yUmVzdWx0O1xyXG5cclxuICAgICAgICByZXR1cm4gcGFyYW1zO1xyXG4gICAgfVxyXG59Il19