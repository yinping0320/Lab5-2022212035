/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from "@angular/core";
import { FormSettings, GeneralTextEntity } from "@edp-aif/common-api";
import { of } from "rxjs";
import { FormGetCreationRuleEntityExArgs, FormGetCreationRuleEntityExResult, FormCreateResult, FormUpdateResult } from '../form-args';
import { map, switchMap } from 'rxjs/operators';
import { Repository } from '@farris/devkit';
import { RpcCreationRuleExecutorResult } from '../../entity';
export class AifDataService {
    /**
     * @param {?} repository
     */
    constructor(repository) {
        this.getCreationRuleEntityByIdUrl = "/api/runtime/aif/v1.0/form/getcreationruleentityex";
        this.getCreationRuleEntityByIdMethod = "GET";
        this.getCreationRuleUrl = "/api/runtime/aif/v1.0/form/getcreationruleentityexes";
        this.getCreationRuleMethod = "POST";
        this.executeCreationRuleUrl = "/api/runtime/aif/v1.0/form/executecreationrule";
        this.executeCreationRuleMethod = "POST";
        this.formCreateUrl = "/api/runtime/aif/v1.0/form/create";
        this.formCreateMethod = "POST";
        this.formUpdateUrl = "/api/runtime/aif/v1.0/form/update";
        this.formUpdateMethod = "POST";
        this.generalTextUrl = "/api/runtime/aif/v1.0/generaltext";
        this.generalTextMethod = "GET";
        this.repository = (/** @type {?} */ (repository));
    }
    /**
     * 根据来源 VO Id获取生单规则实体列表。
     *
     * @param {?} sourceVoId 来源 VO Id。
     * @return {?} 符合条件的生单规则实体列表。
     */
    getSlimCreationRulesBySourceVoId(sourceVoId) {
        /** @type {?} */
        const args = new FormGetCreationRuleEntityExArgs();
        args.sourceVoId = sourceVoId;
        return this.getCreationRuleList(args).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            return res.ruleEntityExes;
        })));
    }
    /**
     * 根据目标 VO Id获取生单规则实体列表。
     *
     * @param {?} targetVoId 目标 VO Id。
     * @return {?} 符合条件的生单规则实体列表。
     */
    getSlimCreationRulesByTargetVoId(targetVoId) {
        /** @type {?} */
        const args = new FormGetCreationRuleEntityExArgs();
        args.targetVoId = targetVoId;
        return this.getCreationRuleList(args).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            return res.ruleEntityExes;
        })));
    }
    /**
     * 根据来源 VO Id和目标 VO Id获取生单规则实体列表。
     *
     * @param {?} sourceVoId 来源 VO Id。
     * @param {?} targetVoId 目标 VO Id。
     * @return {?} 符合条件的生单规则实体列表。
     */
    getSlimCreationRulesBySourceVoIdAndTargetVoId(sourceVoId, targetVoId) {
        /** @type {?} */
        const args = new FormGetCreationRuleEntityExArgs();
        args.sourceVoId = sourceVoId;
        args.targetVoId = targetVoId;
        return this.getCreationRuleList(args).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            return res.ruleEntityExes;
        })));
    }
    /**
     * 根据来源 VO Id获取生单规则实体列表。
     *
     * @param {?} sourceVoId     来源 VO Id。
     * @param {?} bizFlowchartId 业务场景图Id。
     * @return {?} 符合条件的生单规则实体列表。
     */
    getSlimCreationRulesBySourceVoIdAndFlowchartId(sourceVoId, bizFlowchartId) {
        /** @type {?} */
        const args = new FormGetCreationRuleEntityExArgs();
        args.sourceVoId = sourceVoId;
        args.bizFlowchartId = bizFlowchartId;
        return this.getCreationRuleList(args).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            return res.ruleEntityExes;
        })));
    }
    /**
     * 根据目标 VO Id获取生单规则实体列表。
     *
     * @param {?} targetVoId     目标 VO Id。
     * @param {?} bizFlowchartId 业务场景图Id。
     * @return {?} 符合条件的生单规则实体列表。
     */
    getSlimCreationRulesByTargetVoIdAndFlowchartId(targetVoId, bizFlowchartId) {
        /** @type {?} */
        const args = new FormGetCreationRuleEntityExArgs();
        args.targetVoId = targetVoId;
        args.bizFlowchartId = bizFlowchartId;
        return this.getCreationRuleList(args).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            return res.ruleEntityExes;
        })));
    }
    /**
     * 根据来源 VO Id和目标 VO Id获取生单规则实体列表。
     *
     * @param {?} sourceVoId     来源 VO Id。
     * @param {?} targetVoId     目标 VO Id。
     * @param {?} bizFlowchartId 业务场景图Id。
     * @return {?} 符合条件的生单规则实体列表。
     */
    getSlimCreationRulesBySourceVoIdAndTargetVoIdAndFlowchartId(sourceVoId, targetVoId, bizFlowchartId) {
        /** @type {?} */
        const args = new FormGetCreationRuleEntityExArgs();
        args.sourceVoId = sourceVoId;
        args.targetVoId = targetVoId;
        args.bizFlowchartId = bizFlowchartId;
        return this.getCreationRuleList(args).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            return res.ruleEntityExes;
        })));
    }
    /**
     * 获取生单规则实体
     * @param {?} creationRuleId
     * @return {?}
     */
    getSlimCreationRuleEntityExById(creationRuleId) {
        /** @type {?} */
        const getCreationRuleById$ = this.repository.proxy.request(`${this.getCreationRuleEntityByIdUrl}/${creationRuleId}`, this.getCreationRuleEntityByIdMethod, null);
        return getCreationRuleById$;
    }
    /**
     * 获取表单配置实体
     * @param {?} formSettingsId
     * @return {?}
     */
    getFormSettingsById(formSettingsId) {
        if (formSettingsId == null || formSettingsId.trim() == "") {
            throw "生单规则为空";
        }
        /** @type {?} */
        const formSettings$ = this.repository.proxy.request(`${this.generalTextUrl}/${formSettingsId}`, this.generalTextMethod, null, { responseType: "text" });
        return formSettings$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            /** @type {?} */
            const generateText = new GeneralTextEntity();
            generateText.LoadFromJson(data);
            /** @type {?} */
            const formSettings = new FormSettings();
            formSettings.LoadFromJson(generateText.text);
            return formSettings;
        })));
    }
    /**
     * 执行生单规则
     * @param {?} args
     * @return {?}
     */
    executeCreationRule(args) {
        /** @type {?} */
        const body = args.ConvertToJson();
        /** @type {?} */
        const executeCreationRule$ = this.repository.proxy.request(this.executeCreationRuleUrl, this.executeCreationRuleMethod, null, {
            body: body,
            responseType: 'text'
        });
        return executeCreationRule$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            /** @type {?} */
            const res = new RpcCreationRuleExecutorResult();
            res.LoadFromJson(data);
            return res;
        })));
    }
    /**
     * 创建单据
     * @param {?} args
     * @return {?}
     */
    createEntityDatas(args) {
        /** @type {?} */
        const body = args.ConvertToJson();
        /** @type {?} */
        const options = {
            body: body,
            responseType: 'text'
        };
        /** @type {?} */
        const create$ = this.repository.proxy.request(this.formCreateUrl, this.formCreateMethod, null, options);
        return create$.pipe(switchMap((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            /** @type {?} */
            const result = new FormCreateResult();
            result.LoadFromJson(res);
            /** @type {?} */
            const entities = result.entityDataList.map((/**
             * @param {?} entityStr
             * @return {?}
             */
            (entityStr) => {
                /** @type {?} */
                const newEntity = this.repository.buildEntity(JSON.parse(entityStr));
                this.appendInitialData(newEntity, newEntity);
                return newEntity;
            }));
            /** @type {?} */
            let origin = this.repository.entityCollection.getAllEntities();
            if (origin == null || origin.length == 0) {
                this.repository.entityCollection.loadEntities(entities);
            }
            else {
                this.repository.entityCollection.addEntities(entities);
            }
            return of(result);
        })));
    }
    /**
     * 修改单据
     * @param {?} args
     * @return {?}
     */
    updateEntityDatas(args) {
        /** @type {?} */
        const body = args.ConvertToJson();
        /** @type {?} */
        const options = {
            body: body,
            responseType: "text"
        };
        /** @type {?} */
        const update$ = this.repository.proxy.request(this.formUpdateUrl, this.formUpdateMethod, null, options);
        return update$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            /** @type {?} */
            const res = new FormUpdateResult();
            res.LoadFromJson(data);
            return res;
        })));
    }
    /**
     * @private
     * @param {?} args
     * @return {?}
     */
    getCreationRuleList(args) {
        if (args == null) {
            throw "args不可为空";
        }
        if (typeof args == "string") {
            if (args == "") {
                throw "args不可为空";
            }
            /** @type {?} */
            const temp = new FormGetCreationRuleEntityExArgs();
            temp.LoadFromJson(args);
            args = temp;
        }
        /** @type {?} */
        const getCreationRule$ = this.repository.proxy.request(this.getCreationRuleUrl, this.getCreationRuleMethod, null, { body: args.ConvertToJson(), responseType: "text" });
        return getCreationRule$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            /** @type {?} */
            const result = new FormGetCreationRuleEntityExResult();
            result.LoadFromJson(data);
            return result;
        })));
    }
    /**
     * 参考farris/bef EntityUtil实现
     * @private
     * @param {?} entity
     * @param {?} initialData
     * @return {?}
     */
    appendInitialData(entity, initialData) {
        /** @type {?} */
        const data = Object.assign({}, initialData);
        delete data.id;
        delete data.parentID;
        entity['initialData'] = data;
    }
}
AifDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AifDataService.ctorParameters = () => [
    { type: Repository }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    AifDataService.prototype.getCreationRuleEntityByIdUrl;
    /**
     * @type {?}
     * @private
     */
    AifDataService.prototype.getCreationRuleEntityByIdMethod;
    /**
     * @type {?}
     * @private
     */
    AifDataService.prototype.getCreationRuleUrl;
    /**
     * @type {?}
     * @private
     */
    AifDataService.prototype.getCreationRuleMethod;
    /**
     * @type {?}
     * @private
     */
    AifDataService.prototype.executeCreationRuleUrl;
    /**
     * @type {?}
     * @private
     */
    AifDataService.prototype.executeCreationRuleMethod;
    /**
     * @type {?}
     * @private
     */
    AifDataService.prototype.formCreateUrl;
    /**
     * @type {?}
     * @private
     */
    AifDataService.prototype.formCreateMethod;
    /**
     * @type {?}
     * @private
     */
    AifDataService.prototype.formUpdateUrl;
    /**
     * @type {?}
     * @private
     */
    AifDataService.prototype.formUpdateMethod;
    /**
     * @type {?}
     * @private
     */
    AifDataService.prototype.generalTextUrl;
    /**
     * @type {?}
     * @private
     */
    AifDataService.prototype.generalTextMethod;
    /**
     * @type {?}
     * @private
     */
    AifDataService.prototype.repository;
}
//# sourceMappingURL=data:application/json;base64,