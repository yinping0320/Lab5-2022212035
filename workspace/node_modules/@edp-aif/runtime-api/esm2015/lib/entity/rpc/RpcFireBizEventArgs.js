/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { JsonConvertableImpl, BpmnModelJsonHelper } from '@edp-aif/common-api';
import { CreationRuleExecutorAssociations } from '../CreationRuleExecutorAssociations';
export class RpcFireBizEventArgs extends JsonConvertableImpl {
    constructor() {
        super(...arguments);
        this.voChangeDetails = null;
        this.voEntityDatas = null;
        this.voEntityDataIds = new Array();
        this.associations = new Array();
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.voId = null;
        this.voChangeDetails = null;
        this.voEntityDatas = null;
        this.voEntityDataIds = new Array();
        this.bizEventId = null;
        this.voFuncSessionId = null;
        this.bizFlowchartId = null;
        this.upperBeFuncSessionId = null;
        this.associations = new Array();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "voId", this.voId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "voChangeDetails", this.voChangeDetails);
        BpmnModelJsonHelper.SetAttributeValue(obj, "voEntityDatas", this.voEntityDatas);
        BpmnModelJsonHelper.SetAttributeValue(obj, "voEntityDataIds", BpmnModelJsonHelper.StringListToJsonArray(this.voEntityDataIds));
        BpmnModelJsonHelper.SetAttributeValue(obj, "bizEventId", this.bizEventId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "voFuncSessionId", this.voFuncSessionId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "bizFlowchartId", this.bizFlowchartId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "upperBeFuncSessionId", this.upperBeFuncSessionId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "associations", this.associations);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.voId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "voId");
        this.voChangeDetails = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "voChangeDetails");
        this.voEntityDatas = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "voEntityDatas");
        this.voEntityDataIds = BpmnModelJsonHelper.StringListFromJsonArray(BpmnModelJsonHelper.GetAttributeValue(obj, "voEntityDataIds"));
        this.bizEventId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "bizEventId");
        this.voFuncSessionId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "voFuncSessionId");
        this.bizFlowchartId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "bizFlowchartId");
        this.upperBeFuncSessionId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "upperBeFuncSessionId");
        this.associations = BpmnModelJsonHelper.GetAttributeValueAsList(obj, "associations", CreationRuleExecutorAssociations);
    }
}
if (false) {
    /** @type {?} */
    RpcFireBizEventArgs.prototype.voId;
    /** @type {?} */
    RpcFireBizEventArgs.prototype.voChangeDetails;
    /** @type {?} */
    RpcFireBizEventArgs.prototype.voEntityDatas;
    /** @type {?} */
    RpcFireBizEventArgs.prototype.voEntityDataIds;
    /** @type {?} */
    RpcFireBizEventArgs.prototype.bizEventId;
    /** @type {?} */
    RpcFireBizEventArgs.prototype.voFuncSessionId;
    /** @type {?} */
    RpcFireBizEventArgs.prototype.bizFlowchartId;
    /** @type {?} */
    RpcFireBizEventArgs.prototype.upperBeFuncSessionId;
    /** @type {?} */
    RpcFireBizEventArgs.prototype.associations;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUnBjRmlyZUJpekV2ZW50QXJncy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlZHAtYWlmL3J1bnRpbWUtYXBpLyIsInNvdXJjZXMiOlsibGliL2VudGl0eS9ycGMvUnBjRmlyZUJpekV2ZW50QXJncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLG1CQUFtQixFQUFFLG1CQUFtQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDL0UsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFFdkYsTUFBTSxPQUFPLG1CQUFvQixTQUFRLG1CQUFtQjtJQUE1RDs7UUFHSSxvQkFBZSxHQUFXLElBQUksQ0FBQztRQUMvQixrQkFBYSxHQUFXLElBQUksQ0FBQztRQUM3QixvQkFBZSxHQUFrQixJQUFJLEtBQUssRUFBRSxDQUFDO1FBTzdDLGlCQUFZLEdBQTRDLElBQUksS0FBSyxFQUFFLENBQUM7SUFzRHhFLENBQUM7Ozs7O0lBcERhLG1CQUFtQjtRQUN6QixLQUFLLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUU1QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUVqQixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztRQUM1QixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztRQUMxQixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7UUFFbkMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7UUFDNUIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7UUFFM0IsSUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQztRQUNqQyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7SUFDcEMsQ0FBQzs7OztJQUVNLG1CQUFtQjs7WUFDbEIsR0FBRyxHQUFHLEtBQUssQ0FBQyxtQkFBbUIsRUFBRTtRQUVyQyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUU5RCxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3BGLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxlQUFlLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ2hGLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxpQkFBaUIsRUFBRSxtQkFBbUIsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztRQUUvSCxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsWUFBWSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMxRSxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3BGLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFFbEYsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLHNCQUFzQixFQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQzlGLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxjQUFjLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRTlFLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7SUFFTSxrQkFBa0IsQ0FBQyxHQUFPO1FBQzdCLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUU5QixJQUFJLENBQUMsSUFBSSxHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUV2RSxJQUFJLENBQUMsZUFBZSxHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQzdGLElBQUksQ0FBQyxhQUFhLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBQ3pGLElBQUksQ0FBQyxlQUFlLEdBQUcsbUJBQW1CLENBQUMsdUJBQXVCLENBQUMsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGlCQUFpQixDQUFDLENBQUMsQ0FBQztRQUVsSSxJQUFJLENBQUMsVUFBVSxHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUNuRixJQUFJLENBQUMsZUFBZSxHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQzdGLElBQUksQ0FBQyxjQUFjLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLGdCQUFnQixDQUFDLENBQUM7UUFFM0YsSUFBSSxDQUFDLG9CQUFvQixHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO1FBQ3ZHLElBQUksQ0FBQyxZQUFZLEdBQUcsbUJBQW1CLENBQUMsdUJBQXVCLENBQUMsR0FBRyxFQUFFLGNBQWMsRUFBRSxnQ0FBZ0MsQ0FBQyxDQUFDO0lBQzNILENBQUM7Q0FDSjs7O0lBakVHLG1DQUFhOztJQUViLDhDQUErQjs7SUFDL0IsNENBQTZCOztJQUM3Qiw4Q0FBNkM7O0lBRTdDLHlDQUFtQjs7SUFDbkIsOENBQXdCOztJQUN4Qiw2Q0FBdUI7O0lBRXZCLG1EQUE2Qjs7SUFDN0IsMkNBQW9FIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSnNvbkNvbnZlcnRhYmxlSW1wbCwgQnBtbk1vZGVsSnNvbkhlbHBlciB9IGZyb20gJ0BlZHAtYWlmL2NvbW1vbi1hcGknO1xyXG5pbXBvcnQgeyBDcmVhdGlvblJ1bGVFeGVjdXRvckFzc29jaWF0aW9ucyB9IGZyb20gJy4uL0NyZWF0aW9uUnVsZUV4ZWN1dG9yQXNzb2NpYXRpb25zJztcclxuXHJcbmV4cG9ydCBjbGFzcyBScGNGaXJlQml6RXZlbnRBcmdzIGV4dGVuZHMgSnNvbkNvbnZlcnRhYmxlSW1wbCB7XHJcbiAgICB2b0lkOiBzdHJpbmc7XHJcblxyXG4gICAgdm9DaGFuZ2VEZXRhaWxzOiBzdHJpbmcgPSBudWxsO1xyXG4gICAgdm9FbnRpdHlEYXRhczogc3RyaW5nID0gbnVsbDtcclxuICAgIHZvRW50aXR5RGF0YUlkczogQXJyYXk8c3RyaW5nPiA9IG5ldyBBcnJheSgpO1xyXG5cclxuICAgIGJpekV2ZW50SWQ6IHN0cmluZztcclxuICAgIHZvRnVuY1Nlc3Npb25JZDogc3RyaW5nO1xyXG4gICAgYml6Rmxvd2NoYXJ0SWQ6IHN0cmluZztcclxuXHJcbiAgICB1cHBlckJlRnVuY1Nlc3Npb25JZDogc3RyaW5nO1xyXG4gICAgYXNzb2NpYXRpb25zOiBBcnJheTxDcmVhdGlvblJ1bGVFeGVjdXRvckFzc29jaWF0aW9ucz4gPSBuZXcgQXJyYXkoKTtcclxuXHJcbiAgICBwcm90ZWN0ZWQgUmVzZXRCZWZvcmVMb2FkRnJvbSgpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5SZXNldEJlZm9yZUxvYWRGcm9tKCk7XHJcblxyXG4gICAgICAgIHRoaXMudm9JZCA9IG51bGw7XHJcblxyXG4gICAgICAgIHRoaXMudm9DaGFuZ2VEZXRhaWxzID0gbnVsbDtcclxuICAgICAgICB0aGlzLnZvRW50aXR5RGF0YXMgPSBudWxsO1xyXG4gICAgICAgIHRoaXMudm9FbnRpdHlEYXRhSWRzID0gbmV3IEFycmF5KCk7XHJcblxyXG4gICAgICAgIHRoaXMuYml6RXZlbnRJZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy52b0Z1bmNTZXNzaW9uSWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuYml6Rmxvd2NoYXJ0SWQgPSBudWxsO1xyXG5cclxuICAgICAgICB0aGlzLnVwcGVyQmVGdW5jU2Vzc2lvbklkID0gbnVsbDtcclxuICAgICAgICB0aGlzLmFzc29jaWF0aW9ucyA9IG5ldyBBcnJheSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBDb252ZXJ0VG9Kc29uT2JqZWN0KCk6IHt9IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG5cclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJ2b0lkXCIsIHRoaXMudm9JZCk7XHJcblxyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInZvQ2hhbmdlRGV0YWlsc1wiLCB0aGlzLnZvQ2hhbmdlRGV0YWlscyk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwidm9FbnRpdHlEYXRhc1wiLCB0aGlzLnZvRW50aXR5RGF0YXMpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInZvRW50aXR5RGF0YUlkc1wiLCBCcG1uTW9kZWxKc29uSGVscGVyLlN0cmluZ0xpc3RUb0pzb25BcnJheSh0aGlzLnZvRW50aXR5RGF0YUlkcykpO1xyXG5cclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJiaXpFdmVudElkXCIsIHRoaXMuYml6RXZlbnRJZCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwidm9GdW5jU2Vzc2lvbklkXCIsIHRoaXMudm9GdW5jU2Vzc2lvbklkKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJiaXpGbG93Y2hhcnRJZFwiLCB0aGlzLmJpekZsb3djaGFydElkKTtcclxuXHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwidXBwZXJCZUZ1bmNTZXNzaW9uSWRcIiwgdGhpcy51cHBlckJlRnVuY1Nlc3Npb25JZCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiYXNzb2NpYXRpb25zXCIsIHRoaXMuYXNzb2NpYXRpb25zKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgTG9hZEZyb21Kc29uT2JqZWN0KG9iajoge30pOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuXHJcbiAgICAgICAgdGhpcy52b0lkID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJ2b0lkXCIpO1xyXG5cclxuICAgICAgICB0aGlzLnZvQ2hhbmdlRGV0YWlscyA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwidm9DaGFuZ2VEZXRhaWxzXCIpO1xyXG4gICAgICAgIHRoaXMudm9FbnRpdHlEYXRhcyA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwidm9FbnRpdHlEYXRhc1wiKTtcclxuICAgICAgICB0aGlzLnZvRW50aXR5RGF0YUlkcyA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuU3RyaW5nTGlzdEZyb21Kc29uQXJyYXkoQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwidm9FbnRpdHlEYXRhSWRzXCIpKTtcclxuXHJcbiAgICAgICAgdGhpcy5iaXpFdmVudElkID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJiaXpFdmVudElkXCIpO1xyXG4gICAgICAgIHRoaXMudm9GdW5jU2Vzc2lvbklkID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJ2b0Z1bmNTZXNzaW9uSWRcIik7XHJcbiAgICAgICAgdGhpcy5iaXpGbG93Y2hhcnRJZCA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwiYml6Rmxvd2NoYXJ0SWRcIik7XHJcblxyXG4gICAgICAgIHRoaXMudXBwZXJCZUZ1bmNTZXNzaW9uSWQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcInVwcGVyQmVGdW5jU2Vzc2lvbklkXCIpO1xyXG4gICAgICAgIHRoaXMuYXNzb2NpYXRpb25zID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzTGlzdChvYmosIFwiYXNzb2NpYXRpb25zXCIsIENyZWF0aW9uUnVsZUV4ZWN1dG9yQXNzb2NpYXRpb25zKTtcclxuICAgIH1cclxufSJdfQ==