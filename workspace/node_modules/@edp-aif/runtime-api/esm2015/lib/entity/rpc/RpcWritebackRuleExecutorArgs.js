/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { JsonConvertableImpl, BpmnModelJsonHelper } from '@edp-aif/common-api';
import { MappingAssociation } from '../MappingAssociation';
export class RpcWritebackRuleExecutorArgs extends JsonConvertableImpl {
    constructor() {
        super(...arguments);
        this.sourceVoEntities = new Array();
        this.associations = new Array();
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.writebackRuleId = null;
        this.sourceVoId = null;
        this.targetVoFuncSessionId = null;
        this.sourceVoEntities = new Array();
        this.associations = new Array();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "writebackRuleId", this.writebackRuleId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "sourceVoId", this.sourceVoId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "targetVoFuncSessionId", this.targetVoFuncSessionId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "sourceVoEntities", BpmnModelJsonHelper.StringListToJson(this.sourceVoEntities));
        BpmnModelJsonHelper.SetAttributeValue(obj, "associations", this.associations);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.writebackRuleId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "writebackRuleId");
        this.sourceVoId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "sourceVoId");
        this.targetVoFuncSessionId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "targetVoFuncSessionId");
        this.sourceVoEntities = BpmnModelJsonHelper.StringListFromJson(BpmnModelJsonHelper.GetAttributeValueAsString(obj, "sourceVoEntities"));
        this.associations = BpmnModelJsonHelper.GetAttributeValueAsList(obj, "associations", MappingAssociation);
    }
}
if (false) {
    /** @type {?} */
    RpcWritebackRuleExecutorArgs.prototype.writebackRuleId;
    /** @type {?} */
    RpcWritebackRuleExecutorArgs.prototype.sourceVoId;
    /** @type {?} */
    RpcWritebackRuleExecutorArgs.prototype.sourceVoEntities;
    /** @type {?} */
    RpcWritebackRuleExecutorArgs.prototype.associations;
    /** @type {?} */
    RpcWritebackRuleExecutorArgs.prototype.targetVoFuncSessionId;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUnBjV3JpdGViYWNrUnVsZUV4ZWN1dG9yQXJncy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlZHAtYWlmL3J1bnRpbWUtYXBpLyIsInNvdXJjZXMiOlsibGliL2VudGl0eS9ycGMvUnBjV3JpdGViYWNrUnVsZUV4ZWN1dG9yQXJncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLG1CQUFtQixFQUFFLG1CQUFtQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDL0UsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFM0QsTUFBTSxPQUFPLDRCQUE2QixTQUFRLG1CQUFtQjtJQUFyRTs7UUFHSSxxQkFBZ0IsR0FBa0IsSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUM5QyxpQkFBWSxHQUE4QixJQUFJLEtBQUssRUFBRSxDQUFDO0lBa0MxRCxDQUFDOzs7OztJQS9CYSxtQkFBbUI7UUFDekIsS0FBSyxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFFNUIsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7UUFDNUIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQztRQUNsQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUNwQyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7SUFDcEMsQ0FBQzs7OztJQUVNLG1CQUFtQjs7WUFDbEIsR0FBRyxHQUFHLEtBQUssQ0FBQyxtQkFBbUIsRUFBRTtRQUVyQyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3BGLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxZQUFZLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzFFLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSx1QkFBdUIsRUFBRSxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUNoRyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsa0JBQWtCLEVBQUUsbUJBQW1CLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztRQUM1SCxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsY0FBYyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUU5RSxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7Ozs7O0lBRU0sa0JBQWtCLENBQUMsR0FBTztRQUM3QixLQUFLLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFOUIsSUFBSSxDQUFDLGVBQWUsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUM3RixJQUFJLENBQUMsVUFBVSxHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUNuRixJQUFJLENBQUMscUJBQXFCLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLHVCQUF1QixDQUFDLENBQUM7UUFDekcsSUFBSSxDQUFDLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDLGtCQUFrQixDQUFDLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7UUFDdkksSUFBSSxDQUFDLFlBQVksR0FBRyxtQkFBbUIsQ0FBQyx1QkFBdUIsQ0FBQyxHQUFHLEVBQUUsY0FBYyxFQUFFLGtCQUFrQixDQUFDLENBQUM7SUFDN0csQ0FBQztDQUNKOzs7SUFyQ0csdURBQXdCOztJQUN4QixrREFBbUI7O0lBQ25CLHdEQUE4Qzs7SUFDOUMsb0RBQXNEOztJQUN0RCw2REFBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBKc29uQ29udmVydGFibGVJbXBsLCBCcG1uTW9kZWxKc29uSGVscGVyIH0gZnJvbSAnQGVkcC1haWYvY29tbW9uLWFwaSc7XHJcbmltcG9ydCB7IE1hcHBpbmdBc3NvY2lhdGlvbiB9IGZyb20gJy4uL01hcHBpbmdBc3NvY2lhdGlvbic7XHJcblxyXG5leHBvcnQgY2xhc3MgUnBjV3JpdGViYWNrUnVsZUV4ZWN1dG9yQXJncyBleHRlbmRzIEpzb25Db252ZXJ0YWJsZUltcGwge1xyXG4gICAgd3JpdGViYWNrUnVsZUlkOiBzdHJpbmc7XHJcbiAgICBzb3VyY2VWb0lkOiBzdHJpbmc7XHJcbiAgICBzb3VyY2VWb0VudGl0aWVzOiBBcnJheTxzdHJpbmc+ID0gbmV3IEFycmF5KCk7XHJcbiAgICBhc3NvY2lhdGlvbnM6IEFycmF5PE1hcHBpbmdBc3NvY2lhdGlvbj4gPSBuZXcgQXJyYXkoKTtcclxuICAgIHRhcmdldFZvRnVuY1Nlc3Npb25JZDogc3RyaW5nO1xyXG5cclxuICAgIHByb3RlY3RlZCBSZXNldEJlZm9yZUxvYWRGcm9tKCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLlJlc2V0QmVmb3JlTG9hZEZyb20oKTtcclxuXHJcbiAgICAgICAgdGhpcy53cml0ZWJhY2tSdWxlSWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuc291cmNlVm9JZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy50YXJnZXRWb0Z1bmNTZXNzaW9uSWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuc291cmNlVm9FbnRpdGllcyA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgIHRoaXMuYXNzb2NpYXRpb25zID0gbmV3IEFycmF5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIENvbnZlcnRUb0pzb25PYmplY3QoKToge30ge1xyXG4gICAgICAgIGxldCBvYmogPSBzdXBlci5Db252ZXJ0VG9Kc29uT2JqZWN0KCk7XHJcblxyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIndyaXRlYmFja1J1bGVJZFwiLCB0aGlzLndyaXRlYmFja1J1bGVJZCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwic291cmNlVm9JZFwiLCB0aGlzLnNvdXJjZVZvSWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInRhcmdldFZvRnVuY1Nlc3Npb25JZFwiLCB0aGlzLnRhcmdldFZvRnVuY1Nlc3Npb25JZCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwic291cmNlVm9FbnRpdGllc1wiLCBCcG1uTW9kZWxKc29uSGVscGVyLlN0cmluZ0xpc3RUb0pzb24odGhpcy5zb3VyY2VWb0VudGl0aWVzKSk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiYXNzb2NpYXRpb25zXCIsIHRoaXMuYXNzb2NpYXRpb25zKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgTG9hZEZyb21Kc29uT2JqZWN0KG9iajoge30pOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuXHJcbiAgICAgICAgdGhpcy53cml0ZWJhY2tSdWxlSWQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcIndyaXRlYmFja1J1bGVJZFwiKTtcclxuICAgICAgICB0aGlzLnNvdXJjZVZvSWQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcInNvdXJjZVZvSWRcIik7XHJcbiAgICAgICAgdGhpcy50YXJnZXRWb0Z1bmNTZXNzaW9uSWQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcInRhcmdldFZvRnVuY1Nlc3Npb25JZFwiKTtcclxuICAgICAgICB0aGlzLnNvdXJjZVZvRW50aXRpZXMgPSBCcG1uTW9kZWxKc29uSGVscGVyLlN0cmluZ0xpc3RGcm9tSnNvbihCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcInNvdXJjZVZvRW50aXRpZXNcIikpO1xyXG4gICAgICAgIHRoaXMuYXNzb2NpYXRpb25zID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzTGlzdChvYmosIFwiYXNzb2NpYXRpb25zXCIsIE1hcHBpbmdBc3NvY2lhdGlvbik7XHJcbiAgICB9XHJcbn0iXX0=