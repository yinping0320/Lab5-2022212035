/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { JsonConvertableImpl, BpmnModelJsonHelper } from '@edp-aif/common-api';
import { MappingAssociation } from './MappingAssociation';
export class CreationRuleExecutorAssociations extends JsonConvertableImpl {
    constructor() {
        super(...arguments);
        this.isAllAssociation = false;
        this.associations = new Array();
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.creationRuleId = null;
        this.creationRuleInstanceId = null;
        this.bizFlowchartId = null;
        this.creationProcessId = null;
        this.creationProcessInstanceId = null;
        this.isAllAssociation = false;
        this.associations = new Array();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "creationRuleId", this.creationRuleId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "creationRuleInstanceId", this.creationRuleInstanceId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "bizFlowchartId", this.bizFlowchartId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "creationProcessId", this.creationProcessId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "creationProcessInstanceId", this.creationProcessInstanceId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "isAllAssociation", this.isAllAssociation);
        BpmnModelJsonHelper.SetAttributeValue(obj, "associations", this.associations);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.creationRuleId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "creationRuleId");
        this.creationRuleInstanceId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "creationRuleInstanceId");
        this.bizFlowchartId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "bizFlowchartId");
        this.creationProcessId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "creationProcessId");
        this.creationProcessInstanceId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "creationProcessInstanceId");
        this.isAllAssociation = BpmnModelJsonHelper.GetAttributeValueAsBoolean(obj, "isAllAssociation");
        this.associations = BpmnModelJsonHelper.GetAttributeValueAsList(obj, "associations", MappingAssociation);
    }
}
if (false) {
    /** @type {?} */
    CreationRuleExecutorAssociations.prototype.creationRuleId;
    /** @type {?} */
    CreationRuleExecutorAssociations.prototype.creationRuleInstanceId;
    /** @type {?} */
    CreationRuleExecutorAssociations.prototype.bizFlowchartId;
    /** @type {?} */
    CreationRuleExecutorAssociations.prototype.creationProcessId;
    /** @type {?} */
    CreationRuleExecutorAssociations.prototype.creationProcessInstanceId;
    /** @type {?} */
    CreationRuleExecutorAssociations.prototype.isAllAssociation;
    /** @type {?} */
    CreationRuleExecutorAssociations.prototype.associations;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ3JlYXRpb25SdWxlRXhlY3V0b3JBc3NvY2lhdGlvbnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZWRwLWFpZi9ydW50aW1lLWFwaS8iLCJzb3VyY2VzIjpbImxpYi9lbnRpdHkvQ3JlYXRpb25SdWxlRXhlY3V0b3JBc3NvY2lhdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQy9FLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRTFELE1BQU0sT0FBTyxnQ0FBaUMsU0FBUSxtQkFBbUI7SUFBekU7O1FBTUkscUJBQWdCLEdBQVksS0FBSyxDQUFDO1FBQ2xDLGlCQUFZLEdBQUcsSUFBSSxLQUFLLEVBQXNCLENBQUM7SUF3Q25ELENBQUM7Ozs7O0lBdENhLG1CQUFtQjtRQUN6QixLQUFLLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUU1QixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztRQUMzQixJQUFJLENBQUMsc0JBQXNCLEdBQUcsSUFBSSxDQUFDO1FBQ25DLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1FBQzNCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUM7UUFDOUIsSUFBSSxDQUFDLHlCQUF5QixHQUFHLElBQUksQ0FBQztRQUN0QyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO1FBQzlCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxLQUFLLEVBQXNCLENBQUM7SUFDeEQsQ0FBQzs7OztJQUVNLG1CQUFtQjs7WUFDbEIsR0FBRyxHQUFHLEtBQUssQ0FBQyxtQkFBbUIsRUFBRTtRQUVyQyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ2xGLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSx3QkFBd0IsRUFBRSxJQUFJLENBQUMsc0JBQXNCLENBQUMsQ0FBQztRQUNsRyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ2xGLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxtQkFBbUIsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUN4RixtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsMkJBQTJCLEVBQUUsSUFBSSxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFDeEcsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGtCQUFrQixFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3RGLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxjQUFjLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRTlFLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7SUFFTSxrQkFBa0IsQ0FBQyxHQUFPO1FBQzdCLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUU5QixJQUFJLENBQUMsY0FBYyxHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzNGLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsd0JBQXdCLENBQUMsQ0FBQztRQUMzRyxJQUFJLENBQUMsY0FBYyxHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzNGLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztRQUNqRyxJQUFJLENBQUMseUJBQXlCLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLDJCQUEyQixDQUFDLENBQUM7UUFDakgsSUFBSSxDQUFDLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDLDBCQUEwQixDQUFDLEdBQUcsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1FBQ2hHLElBQUksQ0FBQyxZQUFZLEdBQUcsbUJBQW1CLENBQUMsdUJBQXVCLENBQUMsR0FBRyxFQUFFLGNBQWMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0lBQzdHLENBQUM7Q0FFSjs7O0lBOUNHLDBEQUF1Qjs7SUFDdkIsa0VBQStCOztJQUMvQiwwREFBdUI7O0lBQ3ZCLDZEQUEwQjs7SUFDMUIscUVBQWtDOztJQUNsQyw0REFBa0M7O0lBQ2xDLHdEQUErQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEpzb25Db252ZXJ0YWJsZUltcGwsIEJwbW5Nb2RlbEpzb25IZWxwZXIgfSBmcm9tICdAZWRwLWFpZi9jb21tb24tYXBpJztcclxuaW1wb3J0IHsgTWFwcGluZ0Fzc29jaWF0aW9uIH0gZnJvbSAnLi9NYXBwaW5nQXNzb2NpYXRpb24nO1xyXG5cclxuZXhwb3J0IGNsYXNzIENyZWF0aW9uUnVsZUV4ZWN1dG9yQXNzb2NpYXRpb25zIGV4dGVuZHMgSnNvbkNvbnZlcnRhYmxlSW1wbCB7XHJcbiAgICBjcmVhdGlvblJ1bGVJZDogc3RyaW5nO1xyXG4gICAgY3JlYXRpb25SdWxlSW5zdGFuY2VJZDogc3RyaW5nO1xyXG4gICAgYml6Rmxvd2NoYXJ0SWQ6IHN0cmluZztcclxuICAgIGNyZWF0aW9uUHJvY2Vzc0lkOiBzdHJpbmc7XHJcbiAgICBjcmVhdGlvblByb2Nlc3NJbnN0YW5jZUlkOiBzdHJpbmc7XHJcbiAgICBpc0FsbEFzc29jaWF0aW9uOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBhc3NvY2lhdGlvbnMgPSBuZXcgQXJyYXk8TWFwcGluZ0Fzc29jaWF0aW9uPigpO1xyXG5cclxuICAgIHByb3RlY3RlZCBSZXNldEJlZm9yZUxvYWRGcm9tKCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLlJlc2V0QmVmb3JlTG9hZEZyb20oKTtcclxuXHJcbiAgICAgICAgdGhpcy5jcmVhdGlvblJ1bGVJZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5jcmVhdGlvblJ1bGVJbnN0YW5jZUlkID0gbnVsbDtcclxuICAgICAgICB0aGlzLmJpekZsb3djaGFydElkID0gbnVsbDtcclxuICAgICAgICB0aGlzLmNyZWF0aW9uUHJvY2Vzc0lkID0gbnVsbDtcclxuICAgICAgICB0aGlzLmNyZWF0aW9uUHJvY2Vzc0luc3RhbmNlSWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuaXNBbGxBc3NvY2lhdGlvbiA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuYXNzb2NpYXRpb25zID0gbmV3IEFycmF5PE1hcHBpbmdBc3NvY2lhdGlvbj4oKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgQ29udmVydFRvSnNvbk9iamVjdCgpOiB7fSB7XHJcbiAgICAgICAgbGV0IG9iaiA9IHN1cGVyLkNvbnZlcnRUb0pzb25PYmplY3QoKTtcclxuXHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiY3JlYXRpb25SdWxlSWRcIiwgdGhpcy5jcmVhdGlvblJ1bGVJZCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiY3JlYXRpb25SdWxlSW5zdGFuY2VJZFwiLCB0aGlzLmNyZWF0aW9uUnVsZUluc3RhbmNlSWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcImJpekZsb3djaGFydElkXCIsIHRoaXMuYml6Rmxvd2NoYXJ0SWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcImNyZWF0aW9uUHJvY2Vzc0lkXCIsIHRoaXMuY3JlYXRpb25Qcm9jZXNzSWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcImNyZWF0aW9uUHJvY2Vzc0luc3RhbmNlSWRcIiwgdGhpcy5jcmVhdGlvblByb2Nlc3NJbnN0YW5jZUlkKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJpc0FsbEFzc29jaWF0aW9uXCIsIHRoaXMuaXNBbGxBc3NvY2lhdGlvbik7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiYXNzb2NpYXRpb25zXCIsIHRoaXMuYXNzb2NpYXRpb25zKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgTG9hZEZyb21Kc29uT2JqZWN0KG9iajoge30pOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuXHJcbiAgICAgICAgdGhpcy5jcmVhdGlvblJ1bGVJZCA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwiY3JlYXRpb25SdWxlSWRcIik7XHJcbiAgICAgICAgdGhpcy5jcmVhdGlvblJ1bGVJbnN0YW5jZUlkID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJjcmVhdGlvblJ1bGVJbnN0YW5jZUlkXCIpO1xyXG4gICAgICAgIHRoaXMuYml6Rmxvd2NoYXJ0SWQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcImJpekZsb3djaGFydElkXCIpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRpb25Qcm9jZXNzSWQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcImNyZWF0aW9uUHJvY2Vzc0lkXCIpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRpb25Qcm9jZXNzSW5zdGFuY2VJZCA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwiY3JlYXRpb25Qcm9jZXNzSW5zdGFuY2VJZFwiKTtcclxuICAgICAgICB0aGlzLmlzQWxsQXNzb2NpYXRpb24gPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNCb29sZWFuKG9iaiwgXCJpc0FsbEFzc29jaWF0aW9uXCIpO1xyXG4gICAgICAgIHRoaXMuYXNzb2NpYXRpb25zID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzTGlzdChvYmosIFwiYXNzb2NpYXRpb25zXCIsIE1hcHBpbmdBc3NvY2lhdGlvbik7XHJcbiAgICB9XHJcblxyXG59Il19