/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { JsonConvertableImpl, BpmnModelJsonHelper } from '@edp-aif/common-api';
import { CreationRuleExecutorAssociations } from './CreationRuleExecutorAssociations';
export class BefContentVariable extends JsonConvertableImpl {
    constructor() {
        super(...arguments);
        this.associations = new Array();
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.upperBeFuncSessionId = null;
        this.associations = new Array();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "upperBeFuncSessionId", this.upperBeFuncSessionId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "associations", this.associations);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.upperBeFuncSessionId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "upperBeFuncSessionId");
        this.associations = BpmnModelJsonHelper.GetAttributeValueAsList(obj, "associations", CreationRuleExecutorAssociations);
    }
}
if (false) {
    /** @type {?} */
    BefContentVariable.prototype.upperBeFuncSessionId;
    /** @type {?} */
    BefContentVariable.prototype.associations;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmVmQ29udGVudFZhcmlhYmxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVkcC1haWYvcnVudGltZS1hcGkvIiwic291cmNlcyI6WyJsaWIvZW50aXR5L0JlZkNvbnRlbnRWYXJpYWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLG1CQUFtQixFQUFFLG1CQUFtQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDL0UsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFFdEYsTUFBTSxPQUFPLGtCQUFtQixTQUFRLG1CQUFtQjtJQUEzRDs7UUFFSSxpQkFBWSxHQUE0QyxJQUFJLEtBQUssRUFBRSxDQUFDO0lBd0J4RSxDQUFDOzs7OztJQXRCYSxtQkFBbUI7UUFDekIsS0FBSyxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFFNUIsSUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQztRQUNqQyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7SUFDcEMsQ0FBQzs7OztJQUVNLG1CQUFtQjs7WUFDbEIsR0FBRyxHQUFHLEtBQUssQ0FBQyxtQkFBbUIsRUFBRTtRQUVyQyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsc0JBQXNCLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDOUYsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGNBQWMsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFOUUsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVNLGtCQUFrQixDQUFDLEdBQU87UUFDN0IsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztRQUN2RyxJQUFJLENBQUMsWUFBWSxHQUFHLG1CQUFtQixDQUFDLHVCQUF1QixDQUFDLEdBQUcsRUFBRSxjQUFjLEVBQUUsZ0NBQWdDLENBQUMsQ0FBQztJQUMzSCxDQUFDO0NBQ0o7OztJQXpCRyxrREFBNkI7O0lBQzdCLDBDQUFvRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEpzb25Db252ZXJ0YWJsZUltcGwsIEJwbW5Nb2RlbEpzb25IZWxwZXIgfSBmcm9tICdAZWRwLWFpZi9jb21tb24tYXBpJztcclxuaW1wb3J0IHsgQ3JlYXRpb25SdWxlRXhlY3V0b3JBc3NvY2lhdGlvbnMgfSBmcm9tICcuL0NyZWF0aW9uUnVsZUV4ZWN1dG9yQXNzb2NpYXRpb25zJztcclxuXHJcbmV4cG9ydCBjbGFzcyBCZWZDb250ZW50VmFyaWFibGUgZXh0ZW5kcyBKc29uQ29udmVydGFibGVJbXBsIHtcclxuICAgIHVwcGVyQmVGdW5jU2Vzc2lvbklkOiBzdHJpbmc7XHJcbiAgICBhc3NvY2lhdGlvbnM6IEFycmF5PENyZWF0aW9uUnVsZUV4ZWN1dG9yQXNzb2NpYXRpb25zPiA9IG5ldyBBcnJheSgpO1xyXG5cclxuICAgIHByb3RlY3RlZCBSZXNldEJlZm9yZUxvYWRGcm9tKCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLlJlc2V0QmVmb3JlTG9hZEZyb20oKTtcclxuXHJcbiAgICAgICAgdGhpcy51cHBlckJlRnVuY1Nlc3Npb25JZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5hc3NvY2lhdGlvbnMgPSBuZXcgQXJyYXkoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgQ29udmVydFRvSnNvbk9iamVjdCgpOiB7fSB7XHJcbiAgICAgICAgbGV0IG9iaiA9IHN1cGVyLkNvbnZlcnRUb0pzb25PYmplY3QoKTtcclxuXHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwidXBwZXJCZUZ1bmNTZXNzaW9uSWRcIiwgdGhpcy51cHBlckJlRnVuY1Nlc3Npb25JZCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiYXNzb2NpYXRpb25zXCIsIHRoaXMuYXNzb2NpYXRpb25zKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgTG9hZEZyb21Kc29uT2JqZWN0KG9iajoge30pOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuXHJcbiAgICAgICAgdGhpcy51cHBlckJlRnVuY1Nlc3Npb25JZCA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwidXBwZXJCZUZ1bmNTZXNzaW9uSWRcIik7XHJcbiAgICAgICAgdGhpcy5hc3NvY2lhdGlvbnMgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNMaXN0KG9iaiwgXCJhc3NvY2lhdGlvbnNcIiwgQ3JlYXRpb25SdWxlRXhlY3V0b3JBc3NvY2lhdGlvbnMpO1xyXG4gICAgfVxyXG59Il19