import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { JsonConvertableImpl, BpmnModelJsonHelper, PushCreationMode, SlimCreationRuleEntityEx, FormSettings, GeneralTextEntity } from '@edp-aif/common-api';
import { TreeTableModule } from '@farris/ui-treetable';
import { NotifyModule } from '@farris/ui-notify';
import { MessagerModule } from '@farris/ui-messager';
import { NavigationService } from '@farris/command-services';
import { InjectionToken, Injectable, Component, Inject, LOCALE_ID, ViewChild, Pipe, NgModule, SystemJsNgModuleLoader, NgModuleFactoryLoader, Injector, ComponentFactoryResolver, ReflectiveInjector } from '@angular/core';
import { ModalModule, BsModalService } from '@farris/ui-modal';
import { Repository, FrameContext } from '@farris/devkit';
import { of, Subject, from } from 'rxjs';
import { map, switchMap } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MappingAssociation extends JsonConvertableImpl {
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.relationName = null;
        this.srcRootTableName = null;
        this.srcRootDataId = null;
        this.srcParentTableName = null;
        this.srcParentDataId = null;
        this.srcTableName = null;
        this.srcDataId = null;
        this.tarRootTableName = null;
        this.tarRootDataId = null;
        this.tarParentTableName = null;
        this.tarParentDataId = null;
        this.tarTableName = null;
        this.tarDataId = null;
        this.srcTableNamePath = null;
        this.srcDataIdPath = null;
        this.tarTableNamePath = null;
        this.tarDataIdPath = null;
        this.mappingUnitId = null;
        this.associationType = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "relationName", this.relationName);
        BpmnModelJsonHelper.SetAttributeValue(obj, "srcRootTableName", this.srcRootTableName);
        BpmnModelJsonHelper.SetAttributeValue(obj, "srcRootDataId", this.srcRootDataId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "srcParentTableName", this.srcParentTableName);
        BpmnModelJsonHelper.SetAttributeValue(obj, "srcParentDataId", this.srcParentDataId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "srcTableName", this.srcTableName);
        BpmnModelJsonHelper.SetAttributeValue(obj, "srcDataId", this.srcDataId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "tarRootTableName", this.tarRootTableName);
        BpmnModelJsonHelper.SetAttributeValue(obj, "tarRootDataId", this.tarRootDataId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "tarParentTableName", this.tarParentTableName);
        BpmnModelJsonHelper.SetAttributeValue(obj, "tarParentDataId", this.tarParentDataId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "tarTableName", this.tarTableName);
        BpmnModelJsonHelper.SetAttributeValue(obj, "tarDataId", this.tarDataId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "srcTableNamePath", this.srcTableNamePath);
        BpmnModelJsonHelper.SetAttributeValue(obj, "srcDataIdPath", this.srcDataIdPath);
        BpmnModelJsonHelper.SetAttributeValue(obj, "tarTableNamePath", this.tarTableNamePath);
        BpmnModelJsonHelper.SetAttributeValue(obj, "tarDataIdPath", this.tarDataIdPath);
        BpmnModelJsonHelper.SetAttributeValue(obj, "mappingUnitId", this.mappingUnitId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "associationType", this.associationType);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.relationName = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "relationName");
        this.srcRootTableName = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "srcRootTableName");
        this.srcRootDataId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "srcRootDataId");
        this.srcParentTableName = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "srcParentTableName");
        this.srcParentDataId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "srcParentDataId");
        this.srcTableName = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "srcTableName");
        this.srcDataId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "srcDataId");
        this.tarRootTableName = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "tarRootTableName");
        this.tarRootDataId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "tarRootDataId");
        this.tarParentTableName = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "tarParentTableName");
        this.tarParentDataId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "tarParentDataId");
        this.tarTableName = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "tarTableName");
        this.tarDataId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "tarDataId");
        this.srcTableNamePath = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "srcTableNamePath");
        this.srcDataIdPath = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "srcDataIdPath");
        this.tarTableNamePath = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "tarTableNamePath");
        this.tarDataIdPath = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "tarDataIdPath");
        this.mappingUnitId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "mappingUnitId");
        this.associationType = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "associationType");
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CreationRuleExecutorAssociations extends JsonConvertableImpl {
    constructor() {
        super(...arguments);
        this.isAllAssociation = false;
        this.associations = new Array();
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.creationRuleId = null;
        this.creationRuleInstanceId = null;
        this.bizFlowchartId = null;
        this.creationProcessId = null;
        this.creationProcessInstanceId = null;
        this.isAllAssociation = false;
        this.associations = new Array();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "creationRuleId", this.creationRuleId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "creationRuleInstanceId", this.creationRuleInstanceId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "bizFlowchartId", this.bizFlowchartId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "creationProcessId", this.creationProcessId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "creationProcessInstanceId", this.creationProcessInstanceId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "isAllAssociation", this.isAllAssociation);
        BpmnModelJsonHelper.SetAttributeValue(obj, "associations", this.associations);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.creationRuleId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "creationRuleId");
        this.creationRuleInstanceId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "creationRuleInstanceId");
        this.bizFlowchartId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "bizFlowchartId");
        this.creationProcessId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "creationProcessId");
        this.creationProcessInstanceId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "creationProcessInstanceId");
        this.isAllAssociation = BpmnModelJsonHelper.GetAttributeValueAsBoolean(obj, "isAllAssociation");
        this.associations = BpmnModelJsonHelper.GetAttributeValueAsList(obj, "associations", MappingAssociation);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BefContentVariable extends JsonConvertableImpl {
    constructor() {
        super(...arguments);
        this.associations = new Array();
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.upperBeFuncSessionId = null;
        this.associations = new Array();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "upperBeFuncSessionId", this.upperBeFuncSessionId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "associations", this.associations);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.upperBeFuncSessionId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "upperBeFuncSessionId");
        this.associations = BpmnModelJsonHelper.GetAttributeValueAsList(obj, "associations", CreationRuleExecutorAssociations);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MappingResult extends JsonConvertableImpl {
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.voId = null;
        this.changeDetail = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "voId", this.voId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "changeDetail", this.changeDetail);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.voId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "voId");
        this.changeDetail = JSON.parse(BpmnModelJsonHelper.GetAttributeValueAsString(obj, "changeDetail"));
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CreationMappingResult extends MappingResult {
    constructor() {
        super(...arguments);
        this.associations = new Array();
        this.entityData = null;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.associations = new Array();
        this.entityData = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "associations", this.associations);
        BpmnModelJsonHelper.SetAttributeValue(obj, "entityData", this.entityData);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.associations = BpmnModelJsonHelper.GetAttributeValueAsList(obj, "associations", MappingAssociation);
        this.entityData = BpmnModelJsonHelper.GetAttributeValue(obj, "entityData");
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CreationRuleExecutorArgs extends JsonConvertableImpl {
    constructor() {
        super(...arguments);
        this.sourceVoEntities = new Array();
        this.targetVoProxyEntities = new Array();
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.sourceVoEntities = new Array();
        this.creationRuleId = null;
        this.bizFlowchartId = null;
        this.sourceVoId = null;
        this.targetVoProxyId = null;
        this.targetVoProxyEntities = new Array();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "creationRuleId", this.creationRuleId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "sourceVoId", this.sourceVoId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "bizFlowchartId", this.bizFlowchartId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "sourceVoEntities", this.sourceVoEntities);
        BpmnModelJsonHelper.SetAttributeValue(obj, "targetVoProxyId", this.targetVoProxyId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "targetVoProxyEntities", this.targetVoProxyEntities);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.creationRuleId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "creationRuleId");
        this.sourceVoId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "sourceVoId");
        this.bizFlowchartId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "bizFlowchartId");
        this.sourceVoEntities = BpmnModelJsonHelper.GetAttributeValue(obj, "sourceVoEntities");
        this.targetVoProxyId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "targetVoProxyId");
        this.targetVoProxyEntities = BpmnModelJsonHelper.GetAttributeValue(obj, "targetVoProxyEntities");
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CreationRuleExecutorResult extends JsonConvertableImpl {
    constructor() {
        super(...arguments);
        this.isAllAssociation = false;
        this.mappingResults = new Array();
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.creationRuleId = null;
        this.creationRuleInstanceId = null;
        this.bizFlowchartId = null;
        this.isAllAssociation = false;
        this.mappingResults = new Array();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "creationRuleId", this.creationRuleId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "creationRuleInstanceId", this.creationRuleInstanceId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "bizFlowchartId", this.bizFlowchartId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "isAllAssociation", this.isAllAssociation);
        BpmnModelJsonHelper.SetAttributeValue(obj, "mappingResults", this.mappingResults);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.creationRuleId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "creationRuleId");
        this.creationRuleInstanceId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "creationRuleInstanceId");
        this.bizFlowchartId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "bizFlowchartId");
        this.isAllAssociation = BpmnModelJsonHelper.GetAttributeValueAsBoolean(obj, "isAllAssociation");
        this.mappingResults = BpmnModelJsonHelper.GetAttributeValueAsList(obj, "mappingResults", CreationMappingResult);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ConditionResult extends JsonConvertableImpl {
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.conditionExecutionResult = false;
        this.message = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "conditionExecutionResult", this.conditionExecutionResult);
        BpmnModelJsonHelper.SetAttributeValue(obj, "message", this.message);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.conditionExecutionResult = BpmnModelJsonHelper.GetAttributeValueAsBoolean(obj, "conditionExecutionResult");
        this.message = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "message");
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RpcVoChangeDetail extends JsonConvertableImpl {
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.voId = null;
        this.changeDetail = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "voId", this.voId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "changeDetail", this.changeDetail);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.voId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "voId");
        this.changeDetail = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "changeDetail");
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * RPC映射结果。
 * @abstract
 */
class RpcMappingResult extends RpcVoChangeDetail {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RpcCreationMappingResult extends RpcMappingResult {
    constructor() {
        super(...arguments);
        this.associations = new Array();
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.associations = new Array();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "associations", this.associations);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.associations = BpmnModelJsonHelper.GetAttributeValueAsList(obj, "associations", MappingAssociation);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RpcCreationRuleExecutorResult extends JsonConvertableImpl {
    constructor() {
        super(...arguments);
        this.mappingResults = new Array();
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.creationRuleId = null;
        this.creationRuleInstanceId = null;
        this.bizFlowchartId = null;
        this.mappingResults = new Array();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "creationRuleId", this.creationRuleId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "creationRuleInstanceId", this.creationRuleInstanceId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "bizFlowchartId", this.bizFlowchartId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "mappingResults", this.mappingResults);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.creationRuleId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "creationRuleId");
        this.creationRuleInstanceId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "creationRuleInstanceId");
        this.bizFlowchartId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "bizFlowchartId");
        this.mappingResults = BpmnModelJsonHelper.GetAttributeValueAsList(obj, "mappingResults", RpcCreationMappingResult);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormBillCreationProcessExecutorResult extends JsonConvertableImpl {
    constructor() {
        super(...arguments);
        this.pushCreationMode = PushCreationMode.CREATION;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.conditionResult = null;
        this.creationRuleExecutorResult = null;
        this.pushCreationMode = PushCreationMode.CREATION;
        this.downBillSuCode = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "conditionResult", this.conditionResult);
        BpmnModelJsonHelper.SetAttributeValue(obj, "creationRuleExecutorResult", this.creationRuleExecutorResult);
        BpmnModelJsonHelper.SetAttributeValue(obj, "pushCreationMode", this.pushCreationMode);
        BpmnModelJsonHelper.SetAttributeValue(obj, "downBillSuCode", this.downBillSuCode);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.conditionResult = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "conditionResult", ConditionResult);
        this.creationRuleExecutorResult = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "creationRuleExecutorResult", RpcCreationRuleExecutorResult);
        /** @type {?} */
        let pushCreationMode = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "pushCreationMode");
        if (pushCreationMode != null) {
            this.pushCreationMode = PushCreationMode[pushCreationMode];
        }
        this.downBillSuCode = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "downBillSuCode");
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RpcCreationRuleExecutorArgs extends JsonConvertableImpl {
    constructor() {
        super(...arguments);
        this.sourceVoEntities = new Array();
        this.targetVoProxyEntities = new Array();
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.sourceVoEntities = new Array();
        this.creationRuleId = null;
        this.bizFlowchartId = null;
        this.sourceVoId = null;
        this.targetVoProxyId = null;
        this.targetVoProxyEntities = new Array();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "creationRuleId", this.creationRuleId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "sourceVoId", this.sourceVoId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "bizFlowchartId", this.bizFlowchartId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "sourceVoEntities", BpmnModelJsonHelper.StringListToJson(this.sourceVoEntities));
        BpmnModelJsonHelper.SetAttributeValue(obj, "targetVoProxyId", this.targetVoProxyId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "targetVoProxyEntities", BpmnModelJsonHelper.StringListToJson(this.targetVoProxyEntities));
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.creationRuleId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "creationRuleId");
        this.sourceVoId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "sourceVoId");
        this.bizFlowchartId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "bizFlowchartId");
        this.sourceVoEntities = BpmnModelJsonHelper.StringListFromJson(BpmnModelJsonHelper.GetAttributeValueAsString(obj, "sourceVoEntities"));
        this.targetVoProxyId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "targetVoProxyId");
        this.targetVoProxyEntities = BpmnModelJsonHelper.StringListFromJson(BpmnModelJsonHelper.GetAttributeValueAsString(obj, "targetVoProxyEntities"));
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RpcFireBizEventArgs extends JsonConvertableImpl {
    constructor() {
        super(...arguments);
        this.voChangeDetails = null;
        this.voEntityDatas = null;
        this.voEntityDataIds = new Array();
        this.associations = new Array();
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.voId = null;
        this.voChangeDetails = null;
        this.voEntityDatas = null;
        this.voEntityDataIds = new Array();
        this.bizEventId = null;
        this.voFuncSessionId = null;
        this.bizFlowchartId = null;
        this.upperBeFuncSessionId = null;
        this.associations = new Array();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "voId", this.voId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "voChangeDetails", this.voChangeDetails);
        BpmnModelJsonHelper.SetAttributeValue(obj, "voEntityDatas", this.voEntityDatas);
        BpmnModelJsonHelper.SetAttributeValue(obj, "voEntityDataIds", BpmnModelJsonHelper.StringListToJsonArray(this.voEntityDataIds));
        BpmnModelJsonHelper.SetAttributeValue(obj, "bizEventId", this.bizEventId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "voFuncSessionId", this.voFuncSessionId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "bizFlowchartId", this.bizFlowchartId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "upperBeFuncSessionId", this.upperBeFuncSessionId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "associations", this.associations);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.voId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "voId");
        this.voChangeDetails = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "voChangeDetails");
        this.voEntityDatas = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "voEntityDatas");
        this.voEntityDataIds = BpmnModelJsonHelper.StringListFromJsonArray(BpmnModelJsonHelper.GetAttributeValue(obj, "voEntityDataIds"));
        this.bizEventId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "bizEventId");
        this.voFuncSessionId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "voFuncSessionId");
        this.bizFlowchartId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "bizFlowchartId");
        this.upperBeFuncSessionId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "upperBeFuncSessionId");
        this.associations = BpmnModelJsonHelper.GetAttributeValueAsList(obj, "associations", CreationRuleExecutorAssociations);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RpcWritebackMappingResult extends RpcMappingResult {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RpcWritebackRuleExecutorArgs extends JsonConvertableImpl {
    constructor() {
        super(...arguments);
        this.sourceVoEntities = new Array();
        this.associations = new Array();
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.writebackRuleId = null;
        this.sourceVoId = null;
        this.targetVoFuncSessionId = null;
        this.sourceVoEntities = new Array();
        this.associations = new Array();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "writebackRuleId", this.writebackRuleId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "sourceVoId", this.sourceVoId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "targetVoFuncSessionId", this.targetVoFuncSessionId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "sourceVoEntities", BpmnModelJsonHelper.StringListToJson(this.sourceVoEntities));
        BpmnModelJsonHelper.SetAttributeValue(obj, "associations", this.associations);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.writebackRuleId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "writebackRuleId");
        this.sourceVoId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "sourceVoId");
        this.targetVoFuncSessionId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "targetVoFuncSessionId");
        this.sourceVoEntities = BpmnModelJsonHelper.StringListFromJson(BpmnModelJsonHelper.GetAttributeValueAsString(obj, "sourceVoEntities"));
        this.associations = BpmnModelJsonHelper.GetAttributeValueAsList(obj, "associations", MappingAssociation);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RpcWritebackRuleExecutorResult extends JsonConvertableImpl {
    constructor() {
        super(...arguments);
        this.mappingResults = new Array();
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.mappingResults = new Array();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "mappingResults", this.mappingResults);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.mappingResults = BpmnModelJsonHelper.GetAttributeValueAsList(obj, "mappingResults", RpcWritebackMappingResult);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const AifManualCreationType = {
    Push: 'Push',
    Refer: 'Refer',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @deprecated please use \@edp-bif/runtime-api
 */
class AifRuntimeModuleConfig {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @deprecated please use \@edp-bif/runtime-api
 * @type {?}
 */
const SELECTOR_ARGS_INJECTOR = new InjectionToken("SELECTOR_ARGS_INJECTOR");

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
class FormRestArgs extends JsonConvertableImpl {
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.rpcCreationRuleExecutorResult = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "rpcCreationRuleExecutorResult", this.rpcCreationRuleExecutorResult);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.rpcCreationRuleExecutorResult = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "rpcCreationRuleExecutorResult");
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormCreateArgs extends FormRestArgs {
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.formVoId = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "formVoId", this.formVoId);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.formVoId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "formVoId");
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
class FormRestResult extends JsonConvertableImpl {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormCreateResult extends FormRestResult {
    constructor() {
        super(...arguments);
        this.entityDataList = new Array();
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.entityDataList = new Array();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "entityDataList", BpmnModelJsonHelper.StringListToJsonArray(this.entityDataList));
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.entityDataList = BpmnModelJsonHelper.StringListFromJsonArray(BpmnModelJsonHelper.GetAttributeValue(obj, "entityDataList"));
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 表单手工生单时执行生单规则参数类。
 */
class FormCreationRuleExecutorArgs extends JsonConvertableImpl {
    constructor() {
        super(...arguments);
        /**
         * 来源单据ID树形列表
         */
        this.sourceVoEntityDatas = new Array();
        /**
         * 目标单据主表ID列表
         */
        this.targetVoDataIds = new Array();
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.sourceVoEntityDatas = new Array();
        this.creationRuleId = null;
        this.bizFlowchartId = null;
        this.targetVoDataIds = new Array();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "creationRuleId", this.creationRuleId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "bizFlowchartId", this.bizFlowchartId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "sourceVoEntityDatas", BpmnModelJsonHelper.StringListToJsonArray(this.sourceVoEntityDatas));
        BpmnModelJsonHelper.SetAttributeValue(obj, "targetVoDataIds", BpmnModelJsonHelper.StringListToJsonArray(this.targetVoDataIds));
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.creationRuleId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "creationRuleId");
        this.bizFlowchartId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "bizFlowchartId");
        this.sourceVoEntityDatas = BpmnModelJsonHelper.StringListFromJsonArray(BpmnModelJsonHelper.GetAttributeValue(obj, "sourceVoEntityDatas"));
        this.targetVoDataIds = BpmnModelJsonHelper.StringListFromJsonArray((/** @type {?} */ (BpmnModelJsonHelper.GetAttributeValue(obj, "targetVoDataIds"))));
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormEntityData extends JsonConvertableImpl {
    constructor() {
        super(...arguments);
        this.children = {};
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.dataId = null;
        if (this.children != null) {
            for (var key in this.children) {
                delete this.children[key];
            }
        }
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "dataId", this.dataId);
        if (this.children != null) {
            /** @type {?} */
            let childrenObj = {};
            for (let key in this.children) {
                BpmnModelJsonHelper.SetAttributeValue(childrenObj, key, this.children[key]);
            }
            BpmnModelJsonHelper.SetAttributeValue(obj, "children", childrenObj);
        }
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.dataId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "dataId");
        /** @type {?} */
        let childrenObj = BpmnModelJsonHelper.GetAttributeValue(obj, "children");
        if (childrenObj != null) {
            for (let key in childrenObj) {
                /** @type {?} */
                let value = BpmnModelJsonHelper.GetAttributeValueAsList(childrenObj, key, FormEntityData);
                this.children[key] = value;
            }
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormUpdateArgs extends FormRestArgs {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormUpdateResult extends FormRestResult {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormGetCreationRuleEntityExArgs extends JsonConvertableImpl {
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.bizFlowchartId = null;
        this.sourceVoId = null;
        this.targetVoId = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "bizFlowchartId", this.bizFlowchartId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "sourceVoId", this.sourceVoId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "targetVoId", this.targetVoId);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.bizFlowchartId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "bizFlowchartId");
        this.sourceVoId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "sourceVoId");
        this.targetVoId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "targetVoId");
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormGetCreationRuleEntityExResult extends JsonConvertableImpl {
    constructor() {
        super(...arguments);
        this.ruleEntityExes = new Array();
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.ruleEntityExes = new Array();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "ruleEntityExes", this.ruleEntityExes);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.ruleEntityExes = BpmnModelJsonHelper.GetAttributeValueAsList(obj, "ruleEntityExes", SlimCreationRuleEntityEx);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AifDataService {
    /**
     * @param {?} repository
     */
    constructor(repository) {
        this.getCreationRuleEntityByIdUrl = "/api/runtime/aif/v1.0/form/getcreationruleentityex";
        this.getCreationRuleEntityByIdMethod = "GET";
        this.getCreationRuleUrl = "/api/runtime/aif/v1.0/form/getcreationruleentityexes";
        this.getCreationRuleMethod = "POST";
        this.executeCreationRuleUrl = "/api/runtime/aif/v1.0/form/executecreationrule";
        this.executeCreationRuleMethod = "POST";
        this.formCreateUrl = "/api/runtime/aif/v1.0/form/create";
        this.formCreateMethod = "POST";
        this.formUpdateUrl = "/api/runtime/aif/v1.0/form/update";
        this.formUpdateMethod = "POST";
        this.generalTextUrl = "/api/runtime/aif/v1.0/generaltext";
        this.generalTextMethod = "GET";
        this.repository = (/** @type {?} */ (repository));
    }
    /**
     * 根据来源 VO Id获取生单规则实体列表。
     *
     * @param {?} sourceVoId 来源 VO Id。
     * @return {?} 符合条件的生单规则实体列表。
     */
    getSlimCreationRulesBySourceVoId(sourceVoId) {
        /** @type {?} */
        const args = new FormGetCreationRuleEntityExArgs();
        args.sourceVoId = sourceVoId;
        return this.getCreationRuleList(args).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            return res.ruleEntityExes;
        })));
    }
    /**
     * 根据目标 VO Id获取生单规则实体列表。
     *
     * @param {?} targetVoId 目标 VO Id。
     * @return {?} 符合条件的生单规则实体列表。
     */
    getSlimCreationRulesByTargetVoId(targetVoId) {
        /** @type {?} */
        const args = new FormGetCreationRuleEntityExArgs();
        args.targetVoId = targetVoId;
        return this.getCreationRuleList(args).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            return res.ruleEntityExes;
        })));
    }
    /**
     * 根据来源 VO Id和目标 VO Id获取生单规则实体列表。
     *
     * @param {?} sourceVoId 来源 VO Id。
     * @param {?} targetVoId 目标 VO Id。
     * @return {?} 符合条件的生单规则实体列表。
     */
    getSlimCreationRulesBySourceVoIdAndTargetVoId(sourceVoId, targetVoId) {
        /** @type {?} */
        const args = new FormGetCreationRuleEntityExArgs();
        args.sourceVoId = sourceVoId;
        args.targetVoId = targetVoId;
        return this.getCreationRuleList(args).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            return res.ruleEntityExes;
        })));
    }
    /**
     * 根据来源 VO Id获取生单规则实体列表。
     *
     * @param {?} sourceVoId     来源 VO Id。
     * @param {?} bizFlowchartId 业务场景图Id。
     * @return {?} 符合条件的生单规则实体列表。
     */
    getSlimCreationRulesBySourceVoIdAndFlowchartId(sourceVoId, bizFlowchartId) {
        /** @type {?} */
        const args = new FormGetCreationRuleEntityExArgs();
        args.sourceVoId = sourceVoId;
        args.bizFlowchartId = bizFlowchartId;
        return this.getCreationRuleList(args).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            return res.ruleEntityExes;
        })));
    }
    /**
     * 根据目标 VO Id获取生单规则实体列表。
     *
     * @param {?} targetVoId     目标 VO Id。
     * @param {?} bizFlowchartId 业务场景图Id。
     * @return {?} 符合条件的生单规则实体列表。
     */
    getSlimCreationRulesByTargetVoIdAndFlowchartId(targetVoId, bizFlowchartId) {
        /** @type {?} */
        const args = new FormGetCreationRuleEntityExArgs();
        args.targetVoId = targetVoId;
        args.bizFlowchartId = bizFlowchartId;
        return this.getCreationRuleList(args).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            return res.ruleEntityExes;
        })));
    }
    /**
     * 根据来源 VO Id和目标 VO Id获取生单规则实体列表。
     *
     * @param {?} sourceVoId     来源 VO Id。
     * @param {?} targetVoId     目标 VO Id。
     * @param {?} bizFlowchartId 业务场景图Id。
     * @return {?} 符合条件的生单规则实体列表。
     */
    getSlimCreationRulesBySourceVoIdAndTargetVoIdAndFlowchartId(sourceVoId, targetVoId, bizFlowchartId) {
        /** @type {?} */
        const args = new FormGetCreationRuleEntityExArgs();
        args.sourceVoId = sourceVoId;
        args.targetVoId = targetVoId;
        args.bizFlowchartId = bizFlowchartId;
        return this.getCreationRuleList(args).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            return res.ruleEntityExes;
        })));
    }
    /**
     * 获取生单规则实体
     * @param {?} creationRuleId
     * @return {?}
     */
    getSlimCreationRuleEntityExById(creationRuleId) {
        /** @type {?} */
        const getCreationRuleById$ = this.repository.proxy.request(`${this.getCreationRuleEntityByIdUrl}/${creationRuleId}`, this.getCreationRuleEntityByIdMethod, null);
        return getCreationRuleById$;
    }
    /**
     * 获取表单配置实体
     * @param {?} formSettingsId
     * @return {?}
     */
    getFormSettingsById(formSettingsId) {
        if (formSettingsId == null || formSettingsId.trim() == "") {
            throw "生单规则为空";
        }
        /** @type {?} */
        const formSettings$ = this.repository.proxy.request(`${this.generalTextUrl}/${formSettingsId}`, this.generalTextMethod, null, { responseType: "text" });
        return formSettings$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            /** @type {?} */
            const generateText = new GeneralTextEntity();
            generateText.LoadFromJson(data);
            /** @type {?} */
            const formSettings = new FormSettings();
            formSettings.LoadFromJson(generateText.text);
            return formSettings;
        })));
    }
    /**
     * 执行生单规则
     * @param {?} args
     * @return {?}
     */
    executeCreationRule(args) {
        /** @type {?} */
        const body = args.ConvertToJson();
        /** @type {?} */
        const executeCreationRule$ = this.repository.proxy.request(this.executeCreationRuleUrl, this.executeCreationRuleMethod, null, {
            body: body,
            responseType: 'text'
        });
        return executeCreationRule$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            /** @type {?} */
            const res = new RpcCreationRuleExecutorResult();
            res.LoadFromJson(data);
            return res;
        })));
    }
    /**
     * 创建单据
     * @param {?} args
     * @return {?}
     */
    createEntityDatas(args) {
        /** @type {?} */
        const body = args.ConvertToJson();
        /** @type {?} */
        const options = {
            body: body,
            responseType: 'text'
        };
        /** @type {?} */
        const create$ = this.repository.proxy.request(this.formCreateUrl, this.formCreateMethod, null, options);
        return create$.pipe(switchMap((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            /** @type {?} */
            const result = new FormCreateResult();
            result.LoadFromJson(res);
            /** @type {?} */
            const entities = result.entityDataList.map((/**
             * @param {?} entityStr
             * @return {?}
             */
            (entityStr) => {
                /** @type {?} */
                const newEntity = this.repository.buildEntity(JSON.parse(entityStr));
                this.appendInitialData(newEntity, newEntity);
                return newEntity;
            }));
            /** @type {?} */
            let origin = this.repository.entityCollection.getAllEntities();
            if (origin == null || origin.length == 0) {
                this.repository.entityCollection.loadEntities(entities);
            }
            else {
                this.repository.entityCollection.addEntities(entities);
            }
            return of(result);
        })));
    }
    /**
     * 修改单据
     * @param {?} args
     * @return {?}
     */
    updateEntityDatas(args) {
        /** @type {?} */
        const body = args.ConvertToJson();
        /** @type {?} */
        const options = {
            body: body,
            responseType: "text"
        };
        /** @type {?} */
        const update$ = this.repository.proxy.request(this.formUpdateUrl, this.formUpdateMethod, null, options);
        return update$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            /** @type {?} */
            const res = new FormUpdateResult();
            res.LoadFromJson(data);
            return res;
        })));
    }
    /**
     * @private
     * @param {?} args
     * @return {?}
     */
    getCreationRuleList(args) {
        if (args == null) {
            throw "args不可为空";
        }
        if (typeof args == "string") {
            if (args == "") {
                throw "args不可为空";
            }
            /** @type {?} */
            const temp = new FormGetCreationRuleEntityExArgs();
            temp.LoadFromJson(args);
            args = temp;
        }
        /** @type {?} */
        const getCreationRule$ = this.repository.proxy.request(this.getCreationRuleUrl, this.getCreationRuleMethod, null, { body: args.ConvertToJson(), responseType: "text" });
        return getCreationRule$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            /** @type {?} */
            const result = new FormGetCreationRuleEntityExResult();
            result.LoadFromJson(data);
            return result;
        })));
    }
    /**
     * 参考farris/bef EntityUtil实现
     * @private
     * @param {?} entity
     * @param {?} initialData
     * @return {?}
     */
    appendInitialData(entity, initialData) {
        /** @type {?} */
        const data = Object.assign({}, initialData);
        delete data.id;
        delete data.parentID;
        entity['initialData'] = data;
    }
}
AifDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AifDataService.ctorParameters = () => [
    { type: Repository }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @deprecated please use \@edp-bif/runtime-api
 */
class ReferSelectorComponent {
    /**
     * @param {?} args
     * @param {?} dataService
     * @param {?} localeId
     */
    constructor(args, dataService, localeId) {
        this.dataService = dataService;
        //来源VoType列表
        this.sourceVoIdList = [];
        //来源VoType与来源VoName映射
        this.sourceVoNameDict = {};
        //来源VoType与相应的生单规则列表映射
        this.creationRuleDict = {};
        this.bsModalRef4AifSelector = null;
        this.subject4CreationRule = new Subject();
        this.clickOk4AifSelector = (/**
         * @return {?}
         */
        () => {
            this.subject4CreationRule.next(this.selectedCreationRule);
            this.subject4CreationRule.complete();
            this.bsModalRef4AifSelector.close();
        });
        this.clickClose4AifSelector = (/**
         * @return {?}
         */
        () => {
            this.bsModalRef4AifSelector.close();
        });
        this.args = new FormGetCreationRuleEntityExArgs();
        this.args.LoadFromJsonObject(args);
    }
    /**
     * @return {?}
     */
    get selectedSourceVoId() {
        return this._selectedSourceVoId;
    }
    /**
     * @param {?} sourceVoId
     * @return {?}
     */
    set selectedSourceVoId(sourceVoId) {
        this._selectedSourceVoId = sourceVoId;
        if (sourceVoId != null) {
            this.selectedCreationRule = this.creationRuleDict[this._selectedSourceVoId][0];
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.loadItems();
    }
    /**
     * @private
     * @return {?}
     */
    loadItems() {
        /** @type {?} */
        let list$ = null;
        if (this.args.sourceVoId == null) {
            if (this.args.bizFlowchartId == null) {
                list$ = this.dataService.getSlimCreationRulesByTargetVoId(this.args.targetVoId);
            }
            else {
                list$ = this.dataService.getSlimCreationRulesByTargetVoIdAndFlowchartId(this.args.targetVoId, this.args.bizFlowchartId);
            }
        }
        else {
            if (this.args.bizFlowchartId == null) {
                list$ = this.dataService.getSlimCreationRulesBySourceVoIdAndTargetVoId(this.args.sourceVoId, this.args.targetVoId);
            }
            else {
                list$ = this.dataService.getSlimCreationRulesBySourceVoIdAndTargetVoIdAndFlowchartId(this.args.sourceVoId, this.args.targetVoId, this.args.bizFlowchartId);
            }
        }
        list$.subscribe((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            /** @type {?} */
            const list = result;
            list.forEach((/**
             * @param {?} elt
             * @return {?}
             */
            elt => {
                if (this.sourceVoIdList.includes(elt.sourceVoId) === false) {
                    this.sourceVoIdList.push(elt.sourceVoId);
                    this.creationRuleDict[elt.sourceVoId] = new Array();
                }
                this.sourceVoNameDict[elt.sourceVoId] = elt.sourceVoName;
                this.creationRuleDict[elt.sourceVoId].push(elt);
            }));
            this.selectedSourceVoId = this.sourceVoIdList.length > 0 ? this.sourceVoIdList[0] : null;
        }));
    }
}
ReferSelectorComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-refer-selector',
                template: "<div class=\"g-main p-2\">\r\n  <!--  -->\r\n  <div class=\"form-group\" style=\"height: 150px;overflow-y: auto;\">\r\n    <div [hidden]=\"sourceVoIdList.length != 0\"><span style=\"color: red;\">{{ 'emptyResult' | aifLocale }}</span></div>\r\n    <div>{{ 'selectSourceBillType' | aifLocale }}</div>\r\n    <div *ngFor=\"let sourceVoId of sourceVoIdList;let i=index\" class=\"col-sm-12 col-md-5 form-check form-check-inline\">\r\n      <input class=\"form-check-input\" type=\"radio\" [name]=\"'sourceVoId'+i\" id=\"sourceVoId\" [value]=\"sourceVoId\"\r\n        [(ngModel)]=\"selectedSourceVoId\" />\r\n      <label class=\"form-check-label\" [for]=\"'sourceVoId'+i\">{{sourceVoNameDict[sourceVoId]}}</label>\r\n    </div>\r\n  </div>\r\n\r\n  <!--  -->\r\n  <div class=\"form-group\" style=\"\">\r\n    <div>{{ 'selectCreationRule' | aifLocale }}</div>\r\n    <select class=\"form-control\" name=\"selectedCreationRule\" [(ngModel)]=\"selectedCreationRule\">\r\n      <option *ngFor=\"let cr of creationRuleDict[selectedSourceVoId];\" [ngValue]=\"cr\">\r\n        {{cr.name}}</option>\r\n    </select>\r\n  </div>\r\n\r\n  <!--  -->\r\n  <div class=\"form-group\" style=\"\">\r\n    <div>{{ 'creationRuleDesciption' | aifLocale }}</div>\r\n    <textarea readonly class=\"form-control\" name=\"description\" rows=\"3\"\r\n      [ngModel]=\"selectedCreationRule&&selectedCreationRule.description\"></textarea>\r\n  </div>\r\n</div>",
                styles: [""]
            }] }
];
/** @nocollapse */
ReferSelectorComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [SELECTOR_ARGS_INJECTOR,] }] },
    { type: AifDataService },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @deprecated please use \@edp-bif/runtime-api
 */
class PushSelectorComponent {
    /**
     * @param {?} args
     * @param {?} dataService
     * @param {?} localeId
     */
    constructor(args, dataService, localeId) {
        this.dataService = dataService;
        //目标VoId列表
        this.targetVoIdList = [];
        //目标VoId与目标VoName映射
        this.targetVoNameDict = {};
        //目标VoId与相应的生单规则列表映射
        this.creationRuleDict = {};
        this.bsModalRef4AifSelector = null;
        this.subject4CreationRule = new Subject();
        this.clickOk4AifSelector = (/**
         * @return {?}
         */
        () => {
            this.subject4CreationRule.next(this.selectedCreationRule);
            this.subject4CreationRule.complete();
            this.bsModalRef4AifSelector.close();
        });
        this.clickClose4AifSelector = (/**
         * @return {?}
         */
        () => {
            this.bsModalRef4AifSelector.close();
        });
        this.args = new FormGetCreationRuleEntityExArgs();
        this.args.LoadFromJsonObject(args);
    }
    /**
     * @return {?}
     */
    get selectedTargetVoId() {
        return this._selectedTargetVoId;
    }
    /**
     * @param {?} targetVoId
     * @return {?}
     */
    set selectedTargetVoId(targetVoId) {
        this._selectedTargetVoId = targetVoId;
        if (targetVoId != null) {
            this.selectedCreationRule = this.creationRuleDict[this._selectedTargetVoId][0];
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.loadItems();
    }
    /**
     * @private
     * @return {?}
     */
    loadItems() {
        /** @type {?} */
        let list$ = null;
        if (this.args.targetVoId == null) {
            if (this.args.bizFlowchartId == null) {
                list$ = this.dataService.getSlimCreationRulesBySourceVoId(this.args.sourceVoId);
            }
            else {
                list$ = this.dataService.getSlimCreationRulesBySourceVoIdAndFlowchartId(this.args.sourceVoId, this.args.bizFlowchartId);
            }
        }
        else {
            if (this.args.bizFlowchartId == null) {
                list$ = this.dataService.getSlimCreationRulesBySourceVoIdAndTargetVoId(this.args.sourceVoId, this.args.targetVoId);
            }
            else {
                list$ = this.dataService.getSlimCreationRulesBySourceVoIdAndTargetVoIdAndFlowchartId(this.args.sourceVoId, this.args.targetVoId, this.args.bizFlowchartId);
            }
        }
        list$.subscribe((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            /** @type {?} */
            const list = result;
            list.forEach((/**
             * @param {?} elt
             * @return {?}
             */
            elt => {
                if (this.targetVoIdList.includes(elt.targetVoId) === false) {
                    this.targetVoIdList.push(elt.targetVoId);
                    this.creationRuleDict[elt.targetVoId] = new Array();
                }
                this.targetVoNameDict[elt.targetVoId] = elt.targetVoName;
                this.creationRuleDict[elt.targetVoId].push(elt);
            }));
            this.selectedTargetVoId = this.targetVoIdList.length > 0 ? this.targetVoIdList[0] : null;
        }));
    }
}
PushSelectorComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-push-selector',
                template: "<div class=\"g-main p-2\">\r\n  <!--  -->\r\n  <div class=\"form-group\" style=\"height: 150px;overflow-y: auto;\">\r\n    <div [hidden]=\"targetVoIdList.length != 0\"><span style=\"color: red;\">{{ 'emptyResult' | aifLocale }}</span></div>\r\n    <div>{{ 'selectTargetBillType' | aifLocale }}</div>\r\n    <div *ngFor=\"let targetVoId of targetVoIdList;let i=index\" class=\"col-sm-12 col-md-5 form-check form-check-inline\">\r\n      <input class=\"form-check-input\" type=\"radio\" [name]=\"'targetVoId'+i\" id=\"targetVoId\" [value]=\"targetVoId\"\r\n        [(ngModel)]=\"selectedTargetVoId\" />\r\n      <label class=\"form-check-label\" [for]=\"'targetVoId'+i\">{{targetVoNameDict[targetVoId]}}</label>\r\n    </div>\r\n  </div>\r\n\r\n  <!--  -->\r\n  <div class=\"form-group\" style=\"\">\r\n    <div>{{ 'selectCreationRule' | aifLocale }}</div>\r\n    <select class=\"form-control\" name=\"selectedCreationRule\" [(ngModel)]=\"selectedCreationRule\">\r\n      <option *ngFor=\"let cr of creationRuleDict[selectedTargetVoId];\" [ngValue]=\"cr\">\r\n        {{cr.name}}</option>\r\n    </select>\r\n  </div>\r\n\r\n  <!--  -->\r\n  <div class=\"form-group\" style=\"\">\r\n    <div>{{ 'creationRuleDesciption' | aifLocale }}</div>\r\n    <textarea readonly class=\"form-control\" name=\"description\" rows=\"3\"\r\n      [ngModel]=\"selectedCreationRule&&selectedCreationRule.description\"></textarea>\r\n  </div>\r\n</div>",
                styles: [""]
            }] }
];
/** @nocollapse */
PushSelectorComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [SELECTOR_ARGS_INJECTOR,] }] },
    { type: AifDataService },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @deprecated please use \@edp-bif/runtime-api
 */
class SourceDataSelectorComponent {
    /**
     * @param {?} localeId
     */
    constructor(localeId) {
        this.subject4EntityDatas = new Subject();
        this.cols = [];
        this.treedata = [];
        this.clickOk4AifSelector = (/**
         * @return {?}
         */
        () => {
            this.subject4EntityDatas.next([]);
            this.subject4EntityDatas.complete();
            this.bsModalRef4AifSelector.close();
        });
        this.clickClose4AifSelector = (/**
         * @return {?}
         */
        () => {
            this.bsModalRef4AifSelector.close();
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
SourceDataSelectorComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-source-data-selector',
                template: "<div class=\"g-main p-2\">\r\n  <farris-treetable #treetable [columns]=\"cols\" [showBorder]=\"false\" [showHeader]=\"false\" [data]=\"treedata\"\r\n    [idField]=\"'id'\" [fit]=\"true\" [singleSelect]=\"true\" [showCheckbox]=\"false\" [showIcon]=\"true\" [disabled]=\"false\">\r\n  </farris-treetable>\r\n\r\n  <ng-template #cell let-ctx>\r\n\r\n  </ng-template>\r\n\r\n  <p>\r\n    Hello world\r\n  </p>\r\n\r\n  <!-- <div class=\"form-group\" style=\"float: right;\">\r\n    <button class=\"btn-primary btn btn-sm ml-2\" (click)=\"clickOk4Aif()\">\u786E\u5B9A</button>\r\n    <button class=\"btn btn-sm ml-2 btn-default\" (click)=\"clickClose4Aif()\">\u53D6\u6D88</button>\r\n  </div> -->\r\n</div>",
                styles: [""]
            }] }
];
/** @nocollapse */
SourceDataSelectorComponent.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
];
SourceDataSelectorComponent.propDecorators = {
    treetable: [{ type: ViewChild, args: ["treetable",] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @deprecated please use \@edp-bif/runtime-api
 * @type {?}
 */
const LANG_RESOURCES = {
    "zh-CHS": {
        "confirm": "确定",
        "cancel": "取消",
        "emptyResult": "查询结果为空",
        "selectSourceBillType": "选择来源单据类型",
        "selectTargetBillType": "选择目标单据类型",
        "selectCreationRule": "选择生单规则",
        "creationRuleDesciption": "生单规则描述",
        "creationRuleSelector": "生单规则选择器",
        "sourceDataSelector": "来源单据选择器",
    },
    "en": {
        "confirm": "confirm",
        "cancel": "cancel",
        "emptyResult": "The result is empty",
        "selectSourceBillType": "Select source bill type",
        "selectTargetBillType": "Select target bill type",
        "selectCreationRule": "Select creation rule",
        "creationRuleDesciption": "Desciption",
        "creationRuleSelector": "CreationRule Selector",
        "sourceDataSelector": "SourceBill Selector",
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @deprecated please use \@edp-bif/runtime-api
 */
class AifLocalePipe {
    /**
     * @param {?} localeId
     */
    constructor(localeId) {
        this.langCode = localeId || "zh-CHS";
        this.lang = LANG_RESOURCES[this.langCode];
    }
    /**
     * @param {?} name
     * @return {?}
     */
    transform(name) {
        return this.lang[name] || name;
    }
}
AifLocalePipe.decorators = [
    { type: Pipe, args: [{ name: 'aifLocale' },] }
];
/** @nocollapse */
AifLocalePipe.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
const ɵ0 = localStorage.getItem('languageCode') || 'zh-CHS', ɵ1 = {};
/**
 * @deprecated please use \@edp-bif/runtime-api
 */
class AifRuntimeModule {
    /**
     * @param {?=} config
     * @return {?}
     */
    static forRoot(config) {
        return {
            "ngModule": AifRuntimeModule,
            "providers": [
                { provide: AifRuntimeModuleConfig, useValue: config || {} },
            ]
        };
    }
}
AifRuntimeModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    ReactiveFormsModule,
                    HttpClientModule,
                    ModalModule.forRoot(),
                    NotifyModule.forRoot(),
                    MessagerModule.forRoot(),
                    FarrisDialogModule.forRoot(),
                    TreeTableModule,
                ],
                providers: [
                    { provide: LOCALE_ID, useValue: ɵ0 },
                    { provide: AifRuntimeModuleConfig, useValue: ɵ1 },
                    { provide: NgModuleFactoryLoader, useClass: SystemJsNgModuleLoader },
                ],
                declarations: [
                    ReferSelectorComponent,
                    PushSelectorComponent,
                    SourceDataSelectorComponent,
                    AifLocalePipe,
                ],
                exports: [
                    ReferSelectorComponent,
                    PushSelectorComponent,
                    SourceDataSelectorComponent,
                ],
                entryComponents: [
                    ReferSelectorComponent,
                    PushSelectorComponent,
                    SourceDataSelectorComponent,
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @deprecated please use \@edp-bif/runtime-api
 * @type {?}
 */
const AIF_UISTATE_KEY_OPEN_TYPE = "abdbaec8-0bbe-4894-acee-b8d493bc4e1c";
/**
 * @deprecated please use \@edp-bif/runtime-api
 * @type {?}
 */
const AIF_UISTATE_KEY_CREATION_RULE_RESULT = "5eb32009-1d86-43df-96c8-8d685aea4e66";

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
class AbstractAifUiService {
    /**
     * @param {?} frameContext
     * @param {?} modalService
     * @param {?} injector
     * @param {?} cfr
     * @param {?} loader
     * @param {?} localeId
     */
    constructor(frameContext, modalService, injector, cfr, loader, localeId) {
        this.frameContext = frameContext;
        this.modalService = modalService;
        this.injector = injector;
        this.cfr = cfr;
        this.loader = loader;
        this.localeId = localeId;
        /**
         * 内置模态框配置
         */
        this.defaultModalOptions = {
            title: null,
            width: 650,
            height: 415,
            buttons: null,
            showButtons: null,
        };
        this.aifLocalePipe = new AifLocalePipe(localeId);
    }
    /**
     * @protected
     * @param {?} args
     * @param {?} type
     * @param {?=} modalOptions
     * @param {?=} customSelectorModuleUrl
     * @return {?}
     */
    openCreationRuleSelector(args, type, modalOptions, customSelectorModuleUrl) {
        if (typeof modalOptions == "string") {
            if (modalOptions == "") {
                throw "modalOptions不可为空";
            }
            modalOptions = JSON.parse(modalOptions);
        }
        modalOptions = modalOptions == null ? this.defaultModalOptions : modalOptions;
        modalOptions.title = modalOptions.title == null ? this.aifLocalePipe.transform("creationRuleSelector") : modalOptions.title;
        /** @type {?} */
        let cmpR = null;
        if (customSelectorModuleUrl == null || customSelectorModuleUrl.trim() == "") {
            /** @type {?} */
            let cmpF = this.cfr.resolveComponentFactory(type);
            /** @type {?} */
            let inj = ReflectiveInjector.resolveAndCreate([
                { provide: SELECTOR_ARGS_INJECTOR, useValue: args.ConvertToJsonObject() },
            ], this.injector);
            cmpR = cmpF.create(inj);
            this.configModalButtons(modalOptions, cmpR);
            cmpR.instance.bsModalRef4AifSelector = this.modalService.show(cmpR, modalOptions);
            return cmpR.instance.subject4CreationRule.asObservable();
        }
        else {
            return from(this.loader.load(customSelectorModuleUrl)).pipe(switchMap((/**
             * @param {?} moduleFactory
             * @return {?}
             */
            (moduleFactory) => {
                /** @type {?} */
                const moduleRef = moduleFactory.create(this.frameContext.root.injector);
                cmpR = moduleRef.instance.createCreationRuleSelector(this.frameContext.root.injector);
                this.configModalButtons(modalOptions, cmpR);
                cmpR.instance.bsModalRef4AifSelector = this.modalService.show(cmpR, modalOptions);
                return cmpR.instance.subject4CreationRule.asObservable();
            })));
        }
    }
    /**
     * 配置模态框按钮事件
     * @protected
     * @param {?} modalOptions
     * @param {?} cmpR
     * @return {?}
     */
    configModalButtons(modalOptions, cmpR) {
        modalOptions.buttons = [
            {
                text: this.aifLocalePipe.transform("confirm"),
                cls: "btn btn-primary",
                handle: cmpR.instance.clickOk4AifSelector,
            },
            {
                text: this.aifLocalePipe.transform("cancel"),
                cls: "btn btn-secondary",
                handle: cmpR.instance.clickClose4AifSelector,
            }
        ];
        modalOptions.showButtons = true;
    }
}
/** @nocollapse */
AbstractAifUiService.ctorParameters = () => [
    { type: FrameContext },
    { type: BsModalService },
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: NgModuleFactoryLoader },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AifSourceUiService extends AbstractAifUiService {
    /**
     * @param {?} aifDataService
     * @param {?} navigationService
     * @param {?} frameContext
     * @param {?} modalService
     * @param {?} injector
     * @param {?} cfr
     * @param {?} loader
     * @param {?} localeId
     */
    constructor(aifDataService, navigationService, frameContext, modalService, injector, cfr, loader, localeId) {
        super(frameContext, modalService, injector, cfr, loader, localeId);
        this.aifDataService = aifDataService;
        this.navigationService = navigationService;
        this.frameContext = frameContext;
        this.modalService = modalService;
        this.injector = injector;
        this.cfr = cfr;
        this.loader = loader;
        this.localeId = localeId;
        this.aifUIStateCreationRuleResultKey = AIF_UISTATE_KEY_CREATION_RULE_RESULT;
    }
    /**
     * 下推时打开生单规则选择器
     * @param {?} sourceVoId
     * @param {?=} bizFlowchartId
     * @param {?=} modalOptions
     * @param {?=} customSelectorModuleUrl
     * @return {?}
     */
    openCreationRuleSelector4Push(sourceVoId, bizFlowchartId, modalOptions, customSelectorModuleUrl) {
        /** @type {?} */
        const args = new FormGetCreationRuleEntityExArgs();
        args.sourceVoId = sourceVoId;
        args.bizFlowchartId = bizFlowchartId;
        return this.openCreationRuleSelector(args, PushSelectorComponent, modalOptions, customSelectorModuleUrl);
    }
    /**
     * 特定下推时打开生单规则选择器
     * @param {?} sourceVoId
     * @param {?} targetVoId
     * @param {?=} bizFlowchartId
     * @param {?=} modalOptions
     * @param {?=} customSelectorModuleUrl
     * @return {?}
     */
    openCreationRuleSelector4SpecificPush(sourceVoId, targetVoId, bizFlowchartId, modalOptions, customSelectorModuleUrl) {
        /** @type {?} */
        const args = new FormGetCreationRuleEntityExArgs();
        args.sourceVoId = sourceVoId;
        args.targetVoId = targetVoId;
        args.bizFlowchartId = bizFlowchartId;
        return this.openCreationRuleSelector(args, PushSelectorComponent, modalOptions, customSelectorModuleUrl);
    }
    /**
     * 打开下游单据制单界面
     * @param {?} formSettings
     * @param {?} rpcCreationRuleExecutorResult
     * @param {?=} extParams
     * @return {?}
     */
    openTargetForm(formSettings, rpcCreationRuleExecutorResult, extParams) {
        if (formSettings == null) {
            throw "参数formSettings不可为空";
        }
        if (rpcCreationRuleExecutorResult == null) {
            throw "参数rpcCreationRuleExecutorResult不可为空";
        }
        if (typeof rpcCreationRuleExecutorResult == "string") {
            if (rpcCreationRuleExecutorResult == "") {
                throw "参数rpcCreationRuleExecutorResult不可为空";
            }
            /** @type {?} */
            const temp = new RpcCreationRuleExecutorResult();
            temp.LoadFromJson(rpcCreationRuleExecutorResult);
            rpcCreationRuleExecutorResult = temp;
        }
        if ((rpcCreationRuleExecutorResult instanceof RpcCreationRuleExecutorResult) == false) {
            /** @type {?} */
            const res = new RpcCreationRuleExecutorResult();
            res.LoadFromJsonObject(rpcCreationRuleExecutorResult);
            rpcCreationRuleExecutorResult = res;
        }
        if (rpcCreationRuleExecutorResult.mappingResults == null || rpcCreationRuleExecutorResult.mappingResults.length == 0) {
            return;
        }
        else if (rpcCreationRuleExecutorResult.mappingResults.length == 1) {
            //只有一条数据则打开卡片
            this.navigationService.openApp(rpcCreationRuleExecutorResult.mappingResults[0].associations[0].tarDataId, formSettings.targetCardAppId, formSettings.targetCardAppEntrance, this.buildRouteParams(rpcCreationRuleExecutorResult, extParams == null ? {} : extParams), false);
        }
        else {
            if (formSettings.targetListAppId != null) {
                // 多条数据且配置批量编辑界面
                throw "暂不支持打开批量编辑界面";
                this.navigationService.openApp(rpcCreationRuleExecutorResult.mappingResults[0].associations[0].tarDataId, formSettings.targetListAppId, formSettings.targetListAppEntrance, this.buildRouteParams(rpcCreationRuleExecutorResult, extParams == null ? {} : extParams), false);
            }
            else {
                //有多条数据但未配置批量编辑界面则打开多个卡片
                for (let mappingResult of rpcCreationRuleExecutorResult.mappingResults) {
                    /** @type {?} */
                    let singleRes = new RpcCreationRuleExecutorResult();
                    singleRes.bizFlowchartId = rpcCreationRuleExecutorResult.bizFlowchartId;
                    singleRes.creationRuleId = rpcCreationRuleExecutorResult.creationRuleId;
                    singleRes.creationRuleInstanceId = rpcCreationRuleExecutorResult.creationRuleInstanceId;
                    singleRes.mappingResults = [mappingResult];
                    this.navigationService.openApp(mappingResult.associations[0].tarDataId, formSettings.targetCardAppId, formSettings.targetCardAppEntrance, this.buildRouteParams(singleRes, extParams == null ? {} : extParams), false);
                }
            }
        }
    }
    /**
     *
     * @private
     * @param {?} rpcCreationRuleExecutorResult
     * @param {?} extParams
     * @return {?}
     */
    buildRouteParams(rpcCreationRuleExecutorResult, extParams) {
        /** @type {?} */
        const params = extParams;
        params[this.aifUIStateCreationRuleResultKey] = rpcCreationRuleExecutorResult;
        return params;
    }
}
AifSourceUiService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AifSourceUiService.ctorParameters = () => [
    { type: AifDataService },
    { type: NavigationService },
    { type: FrameContext },
    { type: BsModalService },
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: NgModuleFactoryLoader },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AifTargetUiService extends AbstractAifUiService {
    /**
     * @param {?} aifDataService
     * @param {?} frameContext
     * @param {?} modalService
     * @param {?} injector
     * @param {?} cfr
     * @param {?} loader
     * @param {?} localeId
     */
    constructor(aifDataService, frameContext, modalService, injector, cfr, loader, localeId) {
        super(frameContext, modalService, injector, cfr, loader, localeId);
        this.aifDataService = aifDataService;
        this.frameContext = frameContext;
        this.modalService = modalService;
        this.injector = injector;
        this.cfr = cfr;
        this.loader = loader;
        this.localeId = localeId;
        this.aifUIStateCreationRuleResultKey = AIF_UISTATE_KEY_CREATION_RULE_RESULT;
    }
    /**
     * 参照时打开生单规则选择器
     * @param {?} targetVoId
     * @param {?=} bizFlowchartId
     * @param {?=} modalOptions
     * @param {?=} customSelectorModuleUrl
     * @return {?}
     */
    openCreationRuleSelector4Refer(targetVoId, bizFlowchartId, modalOptions, customSelectorModuleUrl) {
        /** @type {?} */
        const args = new FormGetCreationRuleEntityExArgs();
        args.targetVoId = targetVoId;
        args.bizFlowchartId = bizFlowchartId;
        return this.openCreationRuleSelector(args, ReferSelectorComponent, modalOptions, customSelectorModuleUrl);
    }
    /**
     * 特定参照时打开生单规则选择器
     * @param {?} sourceVoId
     * @param {?} targetVoId
     * @param {?=} bizFlowchartId
     * @param {?=} modalOptions
     * @param {?=} customSelectorModuleUrl
     * @return {?}
     */
    openCreationRuleSelector4SpecificRefer(sourceVoId, targetVoId, bizFlowchartId, modalOptions, customSelectorModuleUrl) {
        /** @type {?} */
        const args = new FormGetCreationRuleEntityExArgs();
        args.sourceVoId = sourceVoId;
        args.targetVoId = targetVoId;
        args.bizFlowchartId = bizFlowchartId;
        return this.openCreationRuleSelector(args, ReferSelectorComponent, modalOptions, customSelectorModuleUrl);
    }
    /**
     * 打开来源单据选择器
     * @param {?=} formSettings
     * @param {?=} modalOptions
     * @return {?}
     */
    openSourceDataSelector4Refer(formSettings, modalOptions) {
        modalOptions = modalOptions == null ? this.defaultModalOptions : modalOptions;
        modalOptions.title = modalOptions.title == null ? this.aifLocalePipe.transform("sourceDataSelector") : modalOptions.title;
        /** @type {?} */
        let cmpR = null;
        if (formSettings == null || formSettings.sourceDataSelectorModuleUrl == null) {
            throw "暂无默认实现，请使用自定义来源单据选择器";
            /** @type {?} */
            let cmpF = this.cfr.resolveComponentFactory(SourceDataSelectorComponent);
            /** @type {?} */
            let inj = Injector.create([], this.injector);
            cmpR = cmpF.create(inj);
            this.configModalButtons(modalOptions, cmpR);
            cmpR.instance.bsModalRef4AifSelector = this.modalService.show(cmpR, modalOptions);
            return cmpR.instance.subject4EntityDatas.asObservable();
        }
        else {
            // return from(System.import(formSettings.sourceDataSelectorModuleUrl.substring(0, formSettings.sourceDataSelectorModuleUrl.indexOf("#")) + ".js")).pipe(
            return from(this.loader.load(formSettings.sourceDataSelectorModuleUrl)).pipe(switchMap((/**
             * @param {?} moduleFactory
             * @return {?}
             */
            (moduleFactory) => {
                /** @type {?} */
                const moduleRef = moduleFactory.create(this.frameContext.root.injector);
                cmpR = moduleRef.instance.createSourceDataSelector(this.frameContext.root.injector);
                this.configModalButtons(modalOptions, cmpR);
                cmpR.instance.bsModalRef4AifSelector = this.modalService.show(cmpR, modalOptions);
                return cmpR.instance.subject4EntityDatas.asObservable();
            })));
        }
    }
    /**
     * 获取传到根组件UIState上的生单规则执行器结果
     * @return {?}
     */
    getRpcCreationRuleExecutorResult() {
        /** @type {?} */
        const temp = this.frameContext.root.uiState[this.aifUIStateCreationRuleResultKey];
        /** @type {?} */
        const result = new RpcCreationRuleExecutorResult();
        if (typeof temp == "string") {
            result.LoadFromJson(temp);
        }
        else if (typeof temp == "object") {
            result.LoadFromJsonObject(temp);
        }
        else {
            throw "不合法的类型";
        }
        return result;
    }
}
AifTargetUiService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AifTargetUiService.ctorParameters = () => [
    { type: AifDataService },
    { type: FrameContext },
    { type: BsModalService },
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: NgModuleFactoryLoader },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { AifManualCreationType, AifRuntimeModuleConfig, AifRuntimeModule, AifDataService, AifSourceUiService, AifTargetUiService, SourceDataSelectorComponent, PushSelectorComponent, ReferSelectorComponent, BefContentVariable, CreationMappingResult, CreationRuleExecutorArgs, CreationRuleExecutorAssociations, CreationRuleExecutorResult, MappingAssociation, MappingResult, ConditionResult, FormBillCreationProcessExecutorResult, RpcCreationMappingResult, RpcCreationRuleExecutorArgs, RpcCreationRuleExecutorResult, RpcFireBizEventArgs, RpcMappingResult, RpcVoChangeDetail, RpcWritebackMappingResult, RpcWritebackRuleExecutorArgs, RpcWritebackRuleExecutorResult, FormCreateArgs, FormCreateResult, FormCreationRuleExecutorArgs, FormEntityData, FormRestArgs, FormRestResult, FormUpdateArgs, FormUpdateResult, FormGetCreationRuleEntityExArgs, FormGetCreationRuleEntityExResult, AIF_UISTATE_KEY_OPEN_TYPE, AIF_UISTATE_KEY_CREATION_RULE_RESULT, SELECTOR_ARGS_INJECTOR as ɵa, AifLocalePipe as ɵb, AbstractAifUiService as ɵc };

//# sourceMappingURL=edp-aif-runtime-api.js.map