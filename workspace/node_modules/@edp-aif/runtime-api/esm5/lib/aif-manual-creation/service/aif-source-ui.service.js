/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Injector, ComponentFactoryResolver, NgModuleFactoryLoader, Inject, LOCALE_ID } from "@angular/core";
import { BsModalService } from '@farris/ui-modal';
import { RpcCreationRuleExecutorResult } from '../../entity';
import { AifDataService } from './aif-data.service';
import { FrameContext } from '@farris/devkit';
import { NavigationService } from '@farris/command-services';
import { FormGetCreationRuleEntityExArgs } from '../form-args';
import { PushSelectorComponent } from '../components/push-selector/push-selector.component';
import { AIF_UISTATE_KEY_CREATION_RULE_RESULT } from '../config/aif-form-constants';
import { AbstractAifUiService } from './abstract-aif-ui-service';
var AifSourceUiService = /** @class */ (function (_super) {
    tslib_1.__extends(AifSourceUiService, _super);
    function AifSourceUiService(aifDataService, navigationService, frameContext, modalService, injector, cfr, loader, localeId) {
        var _this = _super.call(this, frameContext, modalService, injector, cfr, loader, localeId) || this;
        _this.aifDataService = aifDataService;
        _this.navigationService = navigationService;
        _this.frameContext = frameContext;
        _this.modalService = modalService;
        _this.injector = injector;
        _this.cfr = cfr;
        _this.loader = loader;
        _this.localeId = localeId;
        _this.aifUIStateCreationRuleResultKey = AIF_UISTATE_KEY_CREATION_RULE_RESULT;
        return _this;
    }
    /**
     * 下推时打开生单规则选择器
     */
    /**
     * 下推时打开生单规则选择器
     * @param {?} sourceVoId
     * @param {?=} bizFlowchartId
     * @param {?=} modalOptions
     * @param {?=} customSelectorModuleUrl
     * @return {?}
     */
    AifSourceUiService.prototype.openCreationRuleSelector4Push = /**
     * 下推时打开生单规则选择器
     * @param {?} sourceVoId
     * @param {?=} bizFlowchartId
     * @param {?=} modalOptions
     * @param {?=} customSelectorModuleUrl
     * @return {?}
     */
    function (sourceVoId, bizFlowchartId, modalOptions, customSelectorModuleUrl) {
        /** @type {?} */
        var args = new FormGetCreationRuleEntityExArgs();
        args.sourceVoId = sourceVoId;
        args.bizFlowchartId = bizFlowchartId;
        return this.openCreationRuleSelector(args, PushSelectorComponent, modalOptions, customSelectorModuleUrl);
    };
    /**
     * 特定下推时打开生单规则选择器
     */
    /**
     * 特定下推时打开生单规则选择器
     * @param {?} sourceVoId
     * @param {?} targetVoId
     * @param {?=} bizFlowchartId
     * @param {?=} modalOptions
     * @param {?=} customSelectorModuleUrl
     * @return {?}
     */
    AifSourceUiService.prototype.openCreationRuleSelector4SpecificPush = /**
     * 特定下推时打开生单规则选择器
     * @param {?} sourceVoId
     * @param {?} targetVoId
     * @param {?=} bizFlowchartId
     * @param {?=} modalOptions
     * @param {?=} customSelectorModuleUrl
     * @return {?}
     */
    function (sourceVoId, targetVoId, bizFlowchartId, modalOptions, customSelectorModuleUrl) {
        /** @type {?} */
        var args = new FormGetCreationRuleEntityExArgs();
        args.sourceVoId = sourceVoId;
        args.targetVoId = targetVoId;
        args.bizFlowchartId = bizFlowchartId;
        return this.openCreationRuleSelector(args, PushSelectorComponent, modalOptions, customSelectorModuleUrl);
    };
    /**
     * 打开下游单据制单界面
     * @param formSettings
     * @param rpcCreationRuleExecutorResult
     * @param extParams
     */
    /**
     * 打开下游单据制单界面
     * @param {?} formSettings
     * @param {?} rpcCreationRuleExecutorResult
     * @param {?=} extParams
     * @return {?}
     */
    AifSourceUiService.prototype.openTargetForm = /**
     * 打开下游单据制单界面
     * @param {?} formSettings
     * @param {?} rpcCreationRuleExecutorResult
     * @param {?=} extParams
     * @return {?}
     */
    function (formSettings, rpcCreationRuleExecutorResult, extParams) {
        var e_1, _a;
        if (formSettings == null) {
            throw "参数formSettings不可为空";
        }
        if (rpcCreationRuleExecutorResult == null) {
            throw "参数rpcCreationRuleExecutorResult不可为空";
        }
        if (typeof rpcCreationRuleExecutorResult == "string") {
            if (rpcCreationRuleExecutorResult == "") {
                throw "参数rpcCreationRuleExecutorResult不可为空";
            }
            /** @type {?} */
            var temp = new RpcCreationRuleExecutorResult();
            temp.LoadFromJson(rpcCreationRuleExecutorResult);
            rpcCreationRuleExecutorResult = temp;
        }
        if ((rpcCreationRuleExecutorResult instanceof RpcCreationRuleExecutorResult) == false) {
            /** @type {?} */
            var res = new RpcCreationRuleExecutorResult();
            res.LoadFromJsonObject(rpcCreationRuleExecutorResult);
            rpcCreationRuleExecutorResult = res;
        }
        if (rpcCreationRuleExecutorResult.mappingResults == null || rpcCreationRuleExecutorResult.mappingResults.length == 0) {
            return;
        }
        else if (rpcCreationRuleExecutorResult.mappingResults.length == 1) {
            //只有一条数据则打开卡片
            this.navigationService.openApp(rpcCreationRuleExecutorResult.mappingResults[0].associations[0].tarDataId, formSettings.targetCardAppId, formSettings.targetCardAppEntrance, this.buildRouteParams(rpcCreationRuleExecutorResult, extParams == null ? {} : extParams), false);
        }
        else {
            if (formSettings.targetListAppId != null) {
                // 多条数据且配置批量编辑界面
                throw "暂不支持打开批量编辑界面";
                this.navigationService.openApp(rpcCreationRuleExecutorResult.mappingResults[0].associations[0].tarDataId, formSettings.targetListAppId, formSettings.targetListAppEntrance, this.buildRouteParams(rpcCreationRuleExecutorResult, extParams == null ? {} : extParams), false);
            }
            else {
                try {
                    //有多条数据但未配置批量编辑界面则打开多个卡片
                    for (var _b = tslib_1.__values(rpcCreationRuleExecutorResult.mappingResults), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var mappingResult = _c.value;
                        /** @type {?} */
                        var singleRes = new RpcCreationRuleExecutorResult();
                        singleRes.bizFlowchartId = rpcCreationRuleExecutorResult.bizFlowchartId;
                        singleRes.creationRuleId = rpcCreationRuleExecutorResult.creationRuleId;
                        singleRes.creationRuleInstanceId = rpcCreationRuleExecutorResult.creationRuleInstanceId;
                        singleRes.mappingResults = [mappingResult];
                        this.navigationService.openApp(mappingResult.associations[0].tarDataId, formSettings.targetCardAppId, formSettings.targetCardAppEntrance, this.buildRouteParams(singleRes, extParams == null ? {} : extParams), false);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        }
    };
    /**
     *
     * @param action 目标App动作
     * @param pairs 其他实体参数键值对
     */
    /**
     *
     * @private
     * @param {?} rpcCreationRuleExecutorResult
     * @param {?} extParams
     * @return {?}
     */
    AifSourceUiService.prototype.buildRouteParams = /**
     *
     * @private
     * @param {?} rpcCreationRuleExecutorResult
     * @param {?} extParams
     * @return {?}
     */
    function (rpcCreationRuleExecutorResult, extParams) {
        /** @type {?} */
        var params = extParams;
        params[this.aifUIStateCreationRuleResultKey] = rpcCreationRuleExecutorResult;
        return params;
    };
    AifSourceUiService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AifSourceUiService.ctorParameters = function () { return [
        { type: AifDataService },
        { type: NavigationService },
        { type: FrameContext },
        { type: BsModalService },
        { type: Injector },
        { type: ComponentFactoryResolver },
        { type: NgModuleFactoryLoader },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    return AifSourceUiService;
}(AbstractAifUiService));
export { AifSourceUiService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AifSourceUiService.prototype.aifUIStateCreationRuleResultKey;
    /**
     * @type {?}
     * @protected
     */
    AifSourceUiService.prototype.aifDataService;
    /**
     * @type {?}
     * @protected
     */
    AifSourceUiService.prototype.navigationService;
    /**
     * @type {?}
     * @protected
     */
    AifSourceUiService.prototype.frameContext;
    /**
     * @type {?}
     * @protected
     */
    AifSourceUiService.prototype.modalService;
    /**
     * @type {?}
     * @protected
     */
    AifSourceUiService.prototype.injector;
    /**
     * @type {?}
     * @protected
     */
    AifSourceUiService.prototype.cfr;
    /**
     * @type {?}
     * @protected
     */
    AifSourceUiService.prototype.loader;
    /** @type {?} */
    AifSourceUiService.prototype.localeId;
}
//# sourceMappingURL=data:application/json;base64,