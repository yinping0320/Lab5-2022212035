/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Inject, LOCALE_ID, Injector, ComponentFactoryResolver, NgModuleFactoryLoader } from '@angular/core';
import { BsModalService } from '@farris/ui-modal';
import { RpcCreationRuleExecutorResult } from '../../entity';
import { AIF_UISTATE_KEY_CREATION_RULE_RESULT } from '../config/aif-form-constants';
import { ReferSelectorComponent } from '../components/refer-selector/refer-selector.component';
import { FormGetCreationRuleEntityExArgs } from '../form-args';
import { AifDataService } from './aif-data.service';
import { FrameContext } from '@farris/devkit';
import { from } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { SourceDataSelectorComponent } from '../components/source-data-selector/source-data-selector.component';
import { AbstractAifUiService } from './abstract-aif-ui-service';
var AifTargetUiService = /** @class */ (function (_super) {
    tslib_1.__extends(AifTargetUiService, _super);
    function AifTargetUiService(aifDataService, frameContext, modalService, injector, cfr, loader, localeId) {
        var _this = _super.call(this, frameContext, modalService, injector, cfr, loader, localeId) || this;
        _this.aifDataService = aifDataService;
        _this.frameContext = frameContext;
        _this.modalService = modalService;
        _this.injector = injector;
        _this.cfr = cfr;
        _this.loader = loader;
        _this.localeId = localeId;
        _this.aifUIStateCreationRuleResultKey = AIF_UISTATE_KEY_CREATION_RULE_RESULT;
        return _this;
    }
    /**
     * 参照时打开生单规则选择器
     */
    /**
     * 参照时打开生单规则选择器
     * @param {?} targetVoId
     * @param {?=} bizFlowchartId
     * @param {?=} modalOptions
     * @param {?=} customSelectorModuleUrl
     * @return {?}
     */
    AifTargetUiService.prototype.openCreationRuleSelector4Refer = /**
     * 参照时打开生单规则选择器
     * @param {?} targetVoId
     * @param {?=} bizFlowchartId
     * @param {?=} modalOptions
     * @param {?=} customSelectorModuleUrl
     * @return {?}
     */
    function (targetVoId, bizFlowchartId, modalOptions, customSelectorModuleUrl) {
        /** @type {?} */
        var args = new FormGetCreationRuleEntityExArgs();
        args.targetVoId = targetVoId;
        args.bizFlowchartId = bizFlowchartId;
        return this.openCreationRuleSelector(args, ReferSelectorComponent, modalOptions, customSelectorModuleUrl);
    };
    /**
     * 特定参照时打开生单规则选择器
     */
    /**
     * 特定参照时打开生单规则选择器
     * @param {?} sourceVoId
     * @param {?} targetVoId
     * @param {?=} bizFlowchartId
     * @param {?=} modalOptions
     * @param {?=} customSelectorModuleUrl
     * @return {?}
     */
    AifTargetUiService.prototype.openCreationRuleSelector4SpecificRefer = /**
     * 特定参照时打开生单规则选择器
     * @param {?} sourceVoId
     * @param {?} targetVoId
     * @param {?=} bizFlowchartId
     * @param {?=} modalOptions
     * @param {?=} customSelectorModuleUrl
     * @return {?}
     */
    function (sourceVoId, targetVoId, bizFlowchartId, modalOptions, customSelectorModuleUrl) {
        /** @type {?} */
        var args = new FormGetCreationRuleEntityExArgs();
        args.sourceVoId = sourceVoId;
        args.targetVoId = targetVoId;
        args.bizFlowchartId = bizFlowchartId;
        return this.openCreationRuleSelector(args, ReferSelectorComponent, modalOptions, customSelectorModuleUrl);
    };
    /**
     * 打开来源单据选择器
     * @param formSettings
     * @param modalOptions
     */
    /**
     * 打开来源单据选择器
     * @param {?=} formSettings
     * @param {?=} modalOptions
     * @return {?}
     */
    AifTargetUiService.prototype.openSourceDataSelector4Refer = /**
     * 打开来源单据选择器
     * @param {?=} formSettings
     * @param {?=} modalOptions
     * @return {?}
     */
    function (formSettings, modalOptions) {
        var _this = this;
        modalOptions = modalOptions == null ? this.defaultModalOptions : modalOptions;
        modalOptions.title = modalOptions.title == null ? this.aifLocalePipe.transform("sourceDataSelector") : modalOptions.title;
        /** @type {?} */
        var cmpR = null;
        if (formSettings == null || formSettings.sourceDataSelectorModuleUrl == null) {
            throw "暂无默认实现，请使用自定义来源单据选择器";
            /** @type {?} */
            var cmpF = this.cfr.resolveComponentFactory(SourceDataSelectorComponent);
            /** @type {?} */
            var inj = Injector.create([], this.injector);
            cmpR = cmpF.create(inj);
            this.configModalButtons(modalOptions, cmpR);
            cmpR.instance.bsModalRef4AifSelector = this.modalService.show(cmpR, modalOptions);
            return cmpR.instance.subject4EntityDatas.asObservable();
        }
        else {
            // return from(System.import(formSettings.sourceDataSelectorModuleUrl.substring(0, formSettings.sourceDataSelectorModuleUrl.indexOf("#")) + ".js")).pipe(
            return from(this.loader.load(formSettings.sourceDataSelectorModuleUrl)).pipe(switchMap((/**
             * @param {?} moduleFactory
             * @return {?}
             */
            function (moduleFactory) {
                /** @type {?} */
                var moduleRef = moduleFactory.create(_this.frameContext.root.injector);
                cmpR = moduleRef.instance.createSourceDataSelector(_this.frameContext.root.injector);
                _this.configModalButtons(modalOptions, cmpR);
                cmpR.instance.bsModalRef4AifSelector = _this.modalService.show(cmpR, modalOptions);
                return cmpR.instance.subject4EntityDatas.asObservable();
            })));
        }
    };
    /**
     * 获取传到根组件UIState上的生单规则执行器结果
     */
    /**
     * 获取传到根组件UIState上的生单规则执行器结果
     * @return {?}
     */
    AifTargetUiService.prototype.getRpcCreationRuleExecutorResult = /**
     * 获取传到根组件UIState上的生单规则执行器结果
     * @return {?}
     */
    function () {
        /** @type {?} */
        var temp = this.frameContext.root.uiState[this.aifUIStateCreationRuleResultKey];
        /** @type {?} */
        var result = new RpcCreationRuleExecutorResult();
        if (typeof temp == "string") {
            result.LoadFromJson(temp);
        }
        else if (typeof temp == "object") {
            result.LoadFromJsonObject(temp);
        }
        else {
            throw "不合法的类型";
        }
        return result;
    };
    AifTargetUiService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AifTargetUiService.ctorParameters = function () { return [
        { type: AifDataService },
        { type: FrameContext },
        { type: BsModalService },
        { type: Injector },
        { type: ComponentFactoryResolver },
        { type: NgModuleFactoryLoader },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    return AifTargetUiService;
}(AbstractAifUiService));
export { AifTargetUiService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AifTargetUiService.prototype.aifUIStateCreationRuleResultKey;
    /**
     * @type {?}
     * @protected
     */
    AifTargetUiService.prototype.aifDataService;
    /**
     * @type {?}
     * @protected
     */
    AifTargetUiService.prototype.frameContext;
    /**
     * @type {?}
     * @protected
     */
    AifTargetUiService.prototype.modalService;
    /**
     * @type {?}
     * @protected
     */
    AifTargetUiService.prototype.injector;
    /**
     * @type {?}
     * @protected
     */
    AifTargetUiService.prototype.cfr;
    /**
     * @type {?}
     * @protected
     */
    AifTargetUiService.prototype.loader;
    /** @type {?} */
    AifTargetUiService.prototype.localeId;
}
//# sourceMappingURL=data:application/json;base64,