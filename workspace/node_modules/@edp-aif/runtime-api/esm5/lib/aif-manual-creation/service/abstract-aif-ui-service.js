/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FrameContext } from '@farris/devkit';
import { BsModalService } from '@farris/ui-modal';
import { Injector, ComponentFactoryResolver, NgModuleFactoryLoader, Inject, LOCALE_ID, ReflectiveInjector } from '@angular/core';
import { AifLocalePipe } from '../pipe/locale.pipe';
import { from } from 'rxjs';
import { SELECTOR_ARGS_INJECTOR } from '../config/selector-args-injector.config';
import { switchMap } from 'rxjs/operators';
/**
 * @abstract
 */
var AbstractAifUiService = /** @class */ (function () {
    function AbstractAifUiService(frameContext, modalService, injector, cfr, loader, localeId) {
        this.frameContext = frameContext;
        this.modalService = modalService;
        this.injector = injector;
        this.cfr = cfr;
        this.loader = loader;
        this.localeId = localeId;
        /**
         * 内置模态框配置
         */
        this.defaultModalOptions = {
            title: null,
            width: 650,
            height: 415,
            buttons: null,
            showButtons: null,
        };
        this.aifLocalePipe = new AifLocalePipe(localeId);
    }
    /**
     * @protected
     * @param {?} args
     * @param {?} type
     * @param {?=} modalOptions
     * @param {?=} customSelectorModuleUrl
     * @return {?}
     */
    AbstractAifUiService.prototype.openCreationRuleSelector = /**
     * @protected
     * @param {?} args
     * @param {?} type
     * @param {?=} modalOptions
     * @param {?=} customSelectorModuleUrl
     * @return {?}
     */
    function (args, type, modalOptions, customSelectorModuleUrl) {
        var _this = this;
        if (typeof modalOptions == "string") {
            if (modalOptions == "") {
                throw "modalOptions不可为空";
            }
            modalOptions = JSON.parse(modalOptions);
        }
        modalOptions = modalOptions == null ? this.defaultModalOptions : modalOptions;
        modalOptions.title = modalOptions.title == null ? this.aifLocalePipe.transform("creationRuleSelector") : modalOptions.title;
        /** @type {?} */
        var cmpR = null;
        if (customSelectorModuleUrl == null || customSelectorModuleUrl.trim() == "") {
            /** @type {?} */
            var cmpF = this.cfr.resolveComponentFactory(type);
            /** @type {?} */
            var inj = ReflectiveInjector.resolveAndCreate([
                { provide: SELECTOR_ARGS_INJECTOR, useValue: args.ConvertToJsonObject() },
            ], this.injector);
            cmpR = cmpF.create(inj);
            this.configModalButtons(modalOptions, cmpR);
            cmpR.instance.bsModalRef4AifSelector = this.modalService.show(cmpR, modalOptions);
            return cmpR.instance.subject4CreationRule.asObservable();
        }
        else {
            return from(this.loader.load(customSelectorModuleUrl)).pipe(switchMap((/**
             * @param {?} moduleFactory
             * @return {?}
             */
            function (moduleFactory) {
                /** @type {?} */
                var moduleRef = moduleFactory.create(_this.frameContext.root.injector);
                cmpR = moduleRef.instance.createCreationRuleSelector(_this.frameContext.root.injector);
                _this.configModalButtons(modalOptions, cmpR);
                cmpR.instance.bsModalRef4AifSelector = _this.modalService.show(cmpR, modalOptions);
                return cmpR.instance.subject4CreationRule.asObservable();
            })));
        }
    };
    /**
     * 配置模态框按钮事件
     * @param modalOptions
     * @param cmpR
     */
    /**
     * 配置模态框按钮事件
     * @protected
     * @param {?} modalOptions
     * @param {?} cmpR
     * @return {?}
     */
    AbstractAifUiService.prototype.configModalButtons = /**
     * 配置模态框按钮事件
     * @protected
     * @param {?} modalOptions
     * @param {?} cmpR
     * @return {?}
     */
    function (modalOptions, cmpR) {
        modalOptions.buttons = [
            {
                text: this.aifLocalePipe.transform("confirm"),
                cls: "btn btn-primary",
                handle: cmpR.instance.clickOk4AifSelector,
            },
            {
                text: this.aifLocalePipe.transform("cancel"),
                cls: "btn btn-secondary",
                handle: cmpR.instance.clickClose4AifSelector,
            }
        ];
        modalOptions.showButtons = true;
    };
    /** @nocollapse */
    AbstractAifUiService.ctorParameters = function () { return [
        { type: FrameContext },
        { type: BsModalService },
        { type: Injector },
        { type: ComponentFactoryResolver },
        { type: NgModuleFactoryLoader },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    return AbstractAifUiService;
}());
export { AbstractAifUiService };
if (false) {
    /**
     * 内置模态框配置
     * @type {?}
     * @protected
     */
    AbstractAifUiService.prototype.defaultModalOptions;
    /**
     * @type {?}
     * @protected
     */
    AbstractAifUiService.prototype.aifLocalePipe;
    /**
     * @type {?}
     * @protected
     */
    AbstractAifUiService.prototype.frameContext;
    /**
     * @type {?}
     * @protected
     */
    AbstractAifUiService.prototype.modalService;
    /**
     * @type {?}
     * @protected
     */
    AbstractAifUiService.prototype.injector;
    /**
     * @type {?}
     * @protected
     */
    AbstractAifUiService.prototype.cfr;
    /**
     * @type {?}
     * @protected
     */
    AbstractAifUiService.prototype.loader;
    /**
     * @type {?}
     * @protected
     */
    AbstractAifUiService.prototype.localeId;
}
//# sourceMappingURL=data:application/json;base64,