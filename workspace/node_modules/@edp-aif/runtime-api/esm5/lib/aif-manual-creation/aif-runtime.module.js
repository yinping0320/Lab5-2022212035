/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, SystemJsNgModuleLoader, NgModuleFactoryLoader, LOCALE_ID } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { ModalModule } from '@farris/ui-modal';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { ReferSelectorComponent } from './components/refer-selector/refer-selector.component';
import { PushSelectorComponent } from './components/push-selector/push-selector.component';
import { AifRuntimeModuleConfig } from './config/aif-runtime-module.config';
import { SourceDataSelectorComponent } from './components/source-data-selector/source-data-selector.component';
import { TreeTableModule } from '@farris/ui-treetable';
import { NotifyModule } from '@farris/ui-notify';
import { MessagerModule } from '@farris/ui-messager';
import { AifLocalePipe } from './pipe/locale.pipe';
var ɵ0 = localStorage.getItem('languageCode') || 'zh-CHS', ɵ1 = {};
/**
 * @deprecated please use \@edp-bif/runtime-api
 */
var AifRuntimeModule = /** @class */ (function () {
    function AifRuntimeModule() {
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    AifRuntimeModule.forRoot = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        return {
            "ngModule": AifRuntimeModule,
            "providers": [
                { provide: AifRuntimeModuleConfig, useValue: config || {} },
            ]
        };
    };
    AifRuntimeModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        ReactiveFormsModule,
                        HttpClientModule,
                        ModalModule.forRoot(),
                        NotifyModule.forRoot(),
                        MessagerModule.forRoot(),
                        FarrisDialogModule.forRoot(),
                        TreeTableModule,
                    ],
                    providers: [
                        { provide: LOCALE_ID, useValue: ɵ0 },
                        { provide: AifRuntimeModuleConfig, useValue: ɵ1 },
                        { provide: NgModuleFactoryLoader, useClass: SystemJsNgModuleLoader },
                    ],
                    declarations: [
                        ReferSelectorComponent,
                        PushSelectorComponent,
                        SourceDataSelectorComponent,
                        AifLocalePipe,
                    ],
                    exports: [
                        ReferSelectorComponent,
                        PushSelectorComponent,
                        SourceDataSelectorComponent,
                    ],
                    entryComponents: [
                        ReferSelectorComponent,
                        PushSelectorComponent,
                        SourceDataSelectorComponent,
                    ]
                },] }
    ];
    return AifRuntimeModule;
}());
export { AifRuntimeModule };
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWlmLXJ1bnRpbWUubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVkcC1haWYvcnVudGltZS1hcGkvIiwic291cmNlcyI6WyJsaWIvYWlmLW1hbnVhbC1jcmVhdGlvbi9haWYtcnVudGltZS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQXVCLHNCQUFzQixFQUFFLHFCQUFxQixFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4SCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMvQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUM5RixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxvREFBb0QsQ0FBQztBQUMzRixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUM1RSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxrRUFBa0UsQ0FBQztBQUMvRyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDdkQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7U0FrQlgsWUFBWSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxRQUFRLE9BQ25DLEVBQUU7Ozs7QUFkdkQ7SUFBQTtJQTJDQSxDQUFDOzs7OztJQVJpQix3QkFBTzs7OztJQUFyQixVQUFzQixNQUErQjtRQUNqRCxPQUFPO1lBQ0gsVUFBVSxFQUFFLGdCQUFnQjtZQUM1QixXQUFXLEVBQUU7Z0JBQ1QsRUFBRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsUUFBUSxFQUFFLE1BQU0sSUFBSSxFQUFFLEVBQUU7YUFDOUQ7U0FDSixDQUFDO0lBQ04sQ0FBQzs7Z0JBMUNKLFFBQVEsU0FBQztvQkFDTixPQUFPLEVBQUU7d0JBQ0wsWUFBWTt3QkFDWixXQUFXO3dCQUNYLG1CQUFtQjt3QkFDbkIsZ0JBQWdCO3dCQUNoQixXQUFXLENBQUMsT0FBTyxFQUFFO3dCQUNyQixZQUFZLENBQUMsT0FBTyxFQUFFO3dCQUN0QixjQUFjLENBQUMsT0FBTyxFQUFFO3dCQUN4QixrQkFBa0IsQ0FBQyxPQUFPLEVBQUU7d0JBQzVCLGVBQWU7cUJBQ2xCO29CQUNELFNBQVMsRUFBRTt3QkFDUCxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxJQUFrRCxFQUFFO3dCQUNsRixFQUFFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxRQUFRLElBQUksRUFBRTt3QkFDakQsRUFBRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsUUFBUSxFQUFFLHNCQUFzQixFQUFFO3FCQUN2RTtvQkFDRCxZQUFZLEVBQUU7d0JBQ1Ysc0JBQXNCO3dCQUN0QixxQkFBcUI7d0JBQ3JCLDJCQUEyQjt3QkFDM0IsYUFBYTtxQkFDaEI7b0JBQ0QsT0FBTyxFQUFFO3dCQUNMLHNCQUFzQjt3QkFDdEIscUJBQXFCO3dCQUNyQiwyQkFBMkI7cUJBQzlCO29CQUNELGVBQWUsRUFBRTt3QkFDYixzQkFBc0I7d0JBQ3RCLHFCQUFxQjt3QkFDckIsMkJBQTJCO3FCQUM5QjtpQkFDSjs7SUFVRCx1QkFBQztDQUFBLEFBM0NELElBMkNDO1NBVFksZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMsIFN5c3RlbUpzTmdNb2R1bGVMb2FkZXIsIE5nTW9kdWxlRmFjdG9yeUxvYWRlciwgTE9DQUxFX0lEIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IEZvcm1zTW9kdWxlLCBSZWFjdGl2ZUZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50TW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBNb2RhbE1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktbW9kYWwnO1xyXG5pbXBvcnQgeyBGYXJyaXNEaWFsb2dNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWRpYWxvZyc7XHJcbmltcG9ydCB7IFJlZmVyU2VsZWN0b3JDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvcmVmZXItc2VsZWN0b3IvcmVmZXItc2VsZWN0b3IuY29tcG9uZW50JztcclxuaW1wb3J0IHsgUHVzaFNlbGVjdG9yQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL3B1c2gtc2VsZWN0b3IvcHVzaC1zZWxlY3Rvci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBBaWZSdW50aW1lTW9kdWxlQ29uZmlnIH0gZnJvbSAnLi9jb25maWcvYWlmLXJ1bnRpbWUtbW9kdWxlLmNvbmZpZyc7XHJcbmltcG9ydCB7IFNvdXJjZURhdGFTZWxlY3RvckNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9zb3VyY2UtZGF0YS1zZWxlY3Rvci9zb3VyY2UtZGF0YS1zZWxlY3Rvci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBUcmVlVGFibGVNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLXRyZWV0YWJsZSc7XHJcbmltcG9ydCB7IE5vdGlmeU1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktbm90aWZ5JztcclxuaW1wb3J0IHsgTWVzc2FnZXJNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLW1lc3NhZ2VyJztcclxuaW1wb3J0IHsgQWlmTG9jYWxlUGlwZSB9IGZyb20gJy4vcGlwZS9sb2NhbGUucGlwZSc7XHJcblxyXG4vKipcclxuICogQGRlcHJlY2F0ZWQgcGxlYXNlIHVzZSBAZWRwLWJpZi9ydW50aW1lLWFwaSBcclxuICovXHJcbkBOZ01vZHVsZSh7XHJcbiAgICBpbXBvcnRzOiBbXHJcbiAgICAgICAgQ29tbW9uTW9kdWxlLFxyXG4gICAgICAgIEZvcm1zTW9kdWxlLFxyXG4gICAgICAgIFJlYWN0aXZlRm9ybXNNb2R1bGUsXHJcbiAgICAgICAgSHR0cENsaWVudE1vZHVsZSxcclxuICAgICAgICBNb2RhbE1vZHVsZS5mb3JSb290KCksXHJcbiAgICAgICAgTm90aWZ5TW9kdWxlLmZvclJvb3QoKSxcclxuICAgICAgICBNZXNzYWdlck1vZHVsZS5mb3JSb290KCksXHJcbiAgICAgICAgRmFycmlzRGlhbG9nTW9kdWxlLmZvclJvb3QoKSxcclxuICAgICAgICBUcmVlVGFibGVNb2R1bGUsXHJcbiAgICBdLFxyXG4gICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAgeyBwcm92aWRlOiBMT0NBTEVfSUQsIHVzZVZhbHVlOiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbGFuZ3VhZ2VDb2RlJykgfHwgJ3poLUNIUycgfSxcclxuICAgICAgICB7IHByb3ZpZGU6IEFpZlJ1bnRpbWVNb2R1bGVDb25maWcsIHVzZVZhbHVlOiB7fSB9LFxyXG4gICAgICAgIHsgcHJvdmlkZTogTmdNb2R1bGVGYWN0b3J5TG9hZGVyLCB1c2VDbGFzczogU3lzdGVtSnNOZ01vZHVsZUxvYWRlciB9LFxyXG4gICAgXSxcclxuICAgIGRlY2xhcmF0aW9uczogW1xyXG4gICAgICAgIFJlZmVyU2VsZWN0b3JDb21wb25lbnQsXHJcbiAgICAgICAgUHVzaFNlbGVjdG9yQ29tcG9uZW50LFxyXG4gICAgICAgIFNvdXJjZURhdGFTZWxlY3RvckNvbXBvbmVudCxcclxuICAgICAgICBBaWZMb2NhbGVQaXBlLFxyXG4gICAgXSxcclxuICAgIGV4cG9ydHM6IFtcclxuICAgICAgICBSZWZlclNlbGVjdG9yQ29tcG9uZW50LFxyXG4gICAgICAgIFB1c2hTZWxlY3RvckNvbXBvbmVudCxcclxuICAgICAgICBTb3VyY2VEYXRhU2VsZWN0b3JDb21wb25lbnQsXHJcbiAgICBdLFxyXG4gICAgZW50cnlDb21wb25lbnRzOiBbXHJcbiAgICAgICAgUmVmZXJTZWxlY3RvckNvbXBvbmVudCxcclxuICAgICAgICBQdXNoU2VsZWN0b3JDb21wb25lbnQsXHJcbiAgICAgICAgU291cmNlRGF0YVNlbGVjdG9yQ29tcG9uZW50LFxyXG4gICAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgQWlmUnVudGltZU1vZHVsZSB7XHJcbiAgICBwdWJsaWMgc3RhdGljIGZvclJvb3QoY29uZmlnPzogQWlmUnVudGltZU1vZHVsZUNvbmZpZyk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIFwibmdNb2R1bGVcIjogQWlmUnVudGltZU1vZHVsZSxcclxuICAgICAgICAgICAgXCJwcm92aWRlcnNcIjogW1xyXG4gICAgICAgICAgICAgICAgeyBwcm92aWRlOiBBaWZSdW50aW1lTW9kdWxlQ29uZmlnLCB1c2VWYWx1ZTogY29uZmlnIHx8IHt9IH0sXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59Il19