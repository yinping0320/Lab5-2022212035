/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Inject, LOCALE_ID } from '@angular/core';
import { Subject } from 'rxjs';
import { SELECTOR_ARGS_INJECTOR } from '../../config/selector-args-injector.config';
import { FormGetCreationRuleEntityExArgs } from '../../form-args';
import { AifDataService } from '../../service/aif-data.service';
/**
 * @deprecated please use \@edp-bif/runtime-api
 */
var ReferSelectorComponent = /** @class */ (function () {
    function ReferSelectorComponent(args, dataService, localeId) {
        var _this = this;
        this.dataService = dataService;
        //来源VoType列表
        this.sourceVoIdList = [];
        //来源VoType与来源VoName映射
        this.sourceVoNameDict = {};
        //来源VoType与相应的生单规则列表映射
        this.creationRuleDict = {};
        this.bsModalRef4AifSelector = null;
        this.subject4CreationRule = new Subject();
        this.clickOk4AifSelector = (/**
         * @return {?}
         */
        function () {
            _this.subject4CreationRule.next(_this.selectedCreationRule);
            _this.subject4CreationRule.complete();
            _this.bsModalRef4AifSelector.close();
        });
        this.clickClose4AifSelector = (/**
         * @return {?}
         */
        function () {
            _this.bsModalRef4AifSelector.close();
        });
        this.args = new FormGetCreationRuleEntityExArgs();
        this.args.LoadFromJsonObject(args);
    }
    Object.defineProperty(ReferSelectorComponent.prototype, "selectedSourceVoId", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selectedSourceVoId;
        },
        set: /**
         * @param {?} sourceVoId
         * @return {?}
         */
        function (sourceVoId) {
            this._selectedSourceVoId = sourceVoId;
            if (sourceVoId != null) {
                this.selectedCreationRule = this.creationRuleDict[this._selectedSourceVoId][0];
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ReferSelectorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.loadItems();
    };
    /**
     * @private
     * @return {?}
     */
    ReferSelectorComponent.prototype.loadItems = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var list$ = null;
        if (this.args.sourceVoId == null) {
            if (this.args.bizFlowchartId == null) {
                list$ = this.dataService.getSlimCreationRulesByTargetVoId(this.args.targetVoId);
            }
            else {
                list$ = this.dataService.getSlimCreationRulesByTargetVoIdAndFlowchartId(this.args.targetVoId, this.args.bizFlowchartId);
            }
        }
        else {
            if (this.args.bizFlowchartId == null) {
                list$ = this.dataService.getSlimCreationRulesBySourceVoIdAndTargetVoId(this.args.sourceVoId, this.args.targetVoId);
            }
            else {
                list$ = this.dataService.getSlimCreationRulesBySourceVoIdAndTargetVoIdAndFlowchartId(this.args.sourceVoId, this.args.targetVoId, this.args.bizFlowchartId);
            }
        }
        list$.subscribe((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            /** @type {?} */
            var list = result;
            list.forEach((/**
             * @param {?} elt
             * @return {?}
             */
            function (elt) {
                if (_this.sourceVoIdList.includes(elt.sourceVoId) === false) {
                    _this.sourceVoIdList.push(elt.sourceVoId);
                    _this.creationRuleDict[elt.sourceVoId] = new Array();
                }
                _this.sourceVoNameDict[elt.sourceVoId] = elt.sourceVoName;
                _this.creationRuleDict[elt.sourceVoId].push(elt);
            }));
            _this.selectedSourceVoId = _this.sourceVoIdList.length > 0 ? _this.sourceVoIdList[0] : null;
        }));
    };
    ReferSelectorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-refer-selector',
                    template: "<div class=\"g-main p-2\">\r\n  <!--  -->\r\n  <div class=\"form-group\" style=\"height: 150px;overflow-y: auto;\">\r\n    <div [hidden]=\"sourceVoIdList.length != 0\"><span style=\"color: red;\">{{ 'emptyResult' | aifLocale }}</span></div>\r\n    <div>{{ 'selectSourceBillType' | aifLocale }}</div>\r\n    <div *ngFor=\"let sourceVoId of sourceVoIdList;let i=index\" class=\"col-sm-12 col-md-5 form-check form-check-inline\">\r\n      <input class=\"form-check-input\" type=\"radio\" [name]=\"'sourceVoId'+i\" id=\"sourceVoId\" [value]=\"sourceVoId\"\r\n        [(ngModel)]=\"selectedSourceVoId\" />\r\n      <label class=\"form-check-label\" [for]=\"'sourceVoId'+i\">{{sourceVoNameDict[sourceVoId]}}</label>\r\n    </div>\r\n  </div>\r\n\r\n  <!--  -->\r\n  <div class=\"form-group\" style=\"\">\r\n    <div>{{ 'selectCreationRule' | aifLocale }}</div>\r\n    <select class=\"form-control\" name=\"selectedCreationRule\" [(ngModel)]=\"selectedCreationRule\">\r\n      <option *ngFor=\"let cr of creationRuleDict[selectedSourceVoId];\" [ngValue]=\"cr\">\r\n        {{cr.name}}</option>\r\n    </select>\r\n  </div>\r\n\r\n  <!--  -->\r\n  <div class=\"form-group\" style=\"\">\r\n    <div>{{ 'creationRuleDesciption' | aifLocale }}</div>\r\n    <textarea readonly class=\"form-control\" name=\"description\" rows=\"3\"\r\n      [ngModel]=\"selectedCreationRule&&selectedCreationRule.description\"></textarea>\r\n  </div>\r\n</div>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ReferSelectorComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [SELECTOR_ARGS_INJECTOR,] }] },
        { type: AifDataService },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    return ReferSelectorComponent;
}());
export { ReferSelectorComponent };
if (false) {
    /** @type {?} */
    ReferSelectorComponent.prototype.sourceVoIdList;
    /** @type {?} */
    ReferSelectorComponent.prototype.sourceVoNameDict;
    /** @type {?} */
    ReferSelectorComponent.prototype.creationRuleDict;
    /**
     * @type {?}
     * @private
     */
    ReferSelectorComponent.prototype._selectedSourceVoId;
    /** @type {?} */
    ReferSelectorComponent.prototype.selectedCreationRule;
    /** @type {?} */
    ReferSelectorComponent.prototype.bsModalRef4AifSelector;
    /** @type {?} */
    ReferSelectorComponent.prototype.subject4CreationRule;
    /**
     * @type {?}
     * @private
     */
    ReferSelectorComponent.prototype.args;
    /** @type {?} */
    ReferSelectorComponent.prototype.clickOk4AifSelector;
    /** @type {?} */
    ReferSelectorComponent.prototype.clickClose4AifSelector;
    /**
     * @type {?}
     * @private
     */
    ReferSelectorComponent.prototype.dataService;
}
//# sourceMappingURL=data:application/json;base64,