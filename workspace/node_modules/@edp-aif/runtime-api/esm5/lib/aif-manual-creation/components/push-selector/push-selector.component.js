/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Inject, LOCALE_ID } from '@angular/core';
import { Subject } from 'rxjs';
import { SELECTOR_ARGS_INJECTOR } from '../../config/selector-args-injector.config';
import { FormGetCreationRuleEntityExArgs } from '../../form-args';
import { AifDataService } from '../../service/aif-data.service';
/**
 * @deprecated please use \@edp-bif/runtime-api
 */
var PushSelectorComponent = /** @class */ (function () {
    function PushSelectorComponent(args, dataService, localeId) {
        var _this = this;
        this.dataService = dataService;
        //目标VoId列表
        this.targetVoIdList = [];
        //目标VoId与目标VoName映射
        this.targetVoNameDict = {};
        //目标VoId与相应的生单规则列表映射
        this.creationRuleDict = {};
        this.bsModalRef4AifSelector = null;
        this.subject4CreationRule = new Subject();
        this.clickOk4AifSelector = (/**
         * @return {?}
         */
        function () {
            _this.subject4CreationRule.next(_this.selectedCreationRule);
            _this.subject4CreationRule.complete();
            _this.bsModalRef4AifSelector.close();
        });
        this.clickClose4AifSelector = (/**
         * @return {?}
         */
        function () {
            _this.bsModalRef4AifSelector.close();
        });
        this.args = new FormGetCreationRuleEntityExArgs();
        this.args.LoadFromJsonObject(args);
    }
    Object.defineProperty(PushSelectorComponent.prototype, "selectedTargetVoId", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selectedTargetVoId;
        },
        set: /**
         * @param {?} targetVoId
         * @return {?}
         */
        function (targetVoId) {
            this._selectedTargetVoId = targetVoId;
            if (targetVoId != null) {
                this.selectedCreationRule = this.creationRuleDict[this._selectedTargetVoId][0];
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PushSelectorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.loadItems();
    };
    /**
     * @private
     * @return {?}
     */
    PushSelectorComponent.prototype.loadItems = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var list$ = null;
        if (this.args.targetVoId == null) {
            if (this.args.bizFlowchartId == null) {
                list$ = this.dataService.getSlimCreationRulesBySourceVoId(this.args.sourceVoId);
            }
            else {
                list$ = this.dataService.getSlimCreationRulesBySourceVoIdAndFlowchartId(this.args.sourceVoId, this.args.bizFlowchartId);
            }
        }
        else {
            if (this.args.bizFlowchartId == null) {
                list$ = this.dataService.getSlimCreationRulesBySourceVoIdAndTargetVoId(this.args.sourceVoId, this.args.targetVoId);
            }
            else {
                list$ = this.dataService.getSlimCreationRulesBySourceVoIdAndTargetVoIdAndFlowchartId(this.args.sourceVoId, this.args.targetVoId, this.args.bizFlowchartId);
            }
        }
        list$.subscribe((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            /** @type {?} */
            var list = result;
            list.forEach((/**
             * @param {?} elt
             * @return {?}
             */
            function (elt) {
                if (_this.targetVoIdList.includes(elt.targetVoId) === false) {
                    _this.targetVoIdList.push(elt.targetVoId);
                    _this.creationRuleDict[elt.targetVoId] = new Array();
                }
                _this.targetVoNameDict[elt.targetVoId] = elt.targetVoName;
                _this.creationRuleDict[elt.targetVoId].push(elt);
            }));
            _this.selectedTargetVoId = _this.targetVoIdList.length > 0 ? _this.targetVoIdList[0] : null;
        }));
    };
    PushSelectorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-push-selector',
                    template: "<div class=\"g-main p-2\">\r\n  <!--  -->\r\n  <div class=\"form-group\" style=\"height: 150px;overflow-y: auto;\">\r\n    <div [hidden]=\"targetVoIdList.length != 0\"><span style=\"color: red;\">{{ 'emptyResult' | aifLocale }}</span></div>\r\n    <div>{{ 'selectTargetBillType' | aifLocale }}</div>\r\n    <div *ngFor=\"let targetVoId of targetVoIdList;let i=index\" class=\"col-sm-12 col-md-5 form-check form-check-inline\">\r\n      <input class=\"form-check-input\" type=\"radio\" [name]=\"'targetVoId'+i\" id=\"targetVoId\" [value]=\"targetVoId\"\r\n        [(ngModel)]=\"selectedTargetVoId\" />\r\n      <label class=\"form-check-label\" [for]=\"'targetVoId'+i\">{{targetVoNameDict[targetVoId]}}</label>\r\n    </div>\r\n  </div>\r\n\r\n  <!--  -->\r\n  <div class=\"form-group\" style=\"\">\r\n    <div>{{ 'selectCreationRule' | aifLocale }}</div>\r\n    <select class=\"form-control\" name=\"selectedCreationRule\" [(ngModel)]=\"selectedCreationRule\">\r\n      <option *ngFor=\"let cr of creationRuleDict[selectedTargetVoId];\" [ngValue]=\"cr\">\r\n        {{cr.name}}</option>\r\n    </select>\r\n  </div>\r\n\r\n  <!--  -->\r\n  <div class=\"form-group\" style=\"\">\r\n    <div>{{ 'creationRuleDesciption' | aifLocale }}</div>\r\n    <textarea readonly class=\"form-control\" name=\"description\" rows=\"3\"\r\n      [ngModel]=\"selectedCreationRule&&selectedCreationRule.description\"></textarea>\r\n  </div>\r\n</div>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    PushSelectorComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [SELECTOR_ARGS_INJECTOR,] }] },
        { type: AifDataService },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }
    ]; };
    return PushSelectorComponent;
}());
export { PushSelectorComponent };
if (false) {
    /** @type {?} */
    PushSelectorComponent.prototype.targetVoIdList;
    /** @type {?} */
    PushSelectorComponent.prototype.targetVoNameDict;
    /** @type {?} */
    PushSelectorComponent.prototype.creationRuleDict;
    /**
     * @type {?}
     * @private
     */
    PushSelectorComponent.prototype._selectedTargetVoId;
    /** @type {?} */
    PushSelectorComponent.prototype.selectedCreationRule;
    /** @type {?} */
    PushSelectorComponent.prototype.bsModalRef4AifSelector;
    /** @type {?} */
    PushSelectorComponent.prototype.subject4CreationRule;
    /**
     * @type {?}
     * @private
     */
    PushSelectorComponent.prototype.args;
    /** @type {?} */
    PushSelectorComponent.prototype.clickOk4AifSelector;
    /** @type {?} */
    PushSelectorComponent.prototype.clickClose4AifSelector;
    /**
     * @type {?}
     * @private
     */
    PushSelectorComponent.prototype.dataService;
}
//# sourceMappingURL=data:application/json;base64,