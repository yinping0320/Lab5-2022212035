/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { JsonConvertableImpl, BpmnModelJsonHelper } from '@edp-aif/common-api';
/**
 * @abstract
 */
var /**
 * @abstract
 */
FormRestArgs = /** @class */ (function (_super) {
    tslib_1.__extends(FormRestArgs, _super);
    function FormRestArgs() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @protected
     * @return {?}
     */
    FormRestArgs.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.rpcCreationRuleExecutorResult = null;
    };
    /**
     * @return {?}
     */
    FormRestArgs.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelJsonHelper.SetAttributeValue(obj, "rpcCreationRuleExecutorResult", this.rpcCreationRuleExecutorResult);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    FormRestArgs.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.rpcCreationRuleExecutorResult = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "rpcCreationRuleExecutorResult");
    };
    return FormRestArgs;
}(JsonConvertableImpl));
/**
 * @abstract
 */
export { FormRestArgs };
if (false) {
    /** @type {?} */
    FormRestArgs.prototype.rpcCreationRuleExecutorResult;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRm9ybVJlc3RBcmdzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVkcC1haWYvcnVudGltZS1hcGkvIiwic291cmNlcyI6WyJsaWIvYWlmLW1hbnVhbC1jcmVhdGlvbi9mb3JtLWFyZ3MvRm9ybVJlc3RBcmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLG1CQUFtQixFQUFFLG1CQUFtQixFQUFFLE1BQU0scUJBQXFCLENBQUM7Ozs7QUFFL0U7Ozs7SUFBMkMsd0NBQW1CO0lBQTlEOztJQXNCQSxDQUFDOzs7OztJQW5CYSwwQ0FBbUI7Ozs7SUFBN0I7UUFDSSxpQkFBTSxtQkFBbUIsV0FBRSxDQUFDO1FBRTVCLElBQUksQ0FBQyw2QkFBNkIsR0FBRyxJQUFJLENBQUM7SUFDOUMsQ0FBQzs7OztJQUVNLDBDQUFtQjs7O0lBQTFCOztZQUNRLEdBQUcsR0FBRyxpQkFBTSxtQkFBbUIsV0FBRTtRQUVyQyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsK0JBQStCLEVBQUUsSUFBSSxDQUFDLDZCQUE2QixDQUFDLENBQUM7UUFFaEgsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVNLHlDQUFrQjs7OztJQUF6QixVQUEwQixHQUFPO1FBQzdCLGlCQUFNLGtCQUFrQixZQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyw2QkFBNkIsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsK0JBQStCLENBQUMsQ0FBQztJQUM3SCxDQUFDO0lBQ0wsbUJBQUM7QUFBRCxDQUFDLEFBdEJELENBQTJDLG1CQUFtQixHQXNCN0Q7Ozs7Ozs7SUFyQkcscURBQXNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSnNvbkNvbnZlcnRhYmxlSW1wbCwgQnBtbk1vZGVsSnNvbkhlbHBlciB9IGZyb20gJ0BlZHAtYWlmL2NvbW1vbi1hcGknO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEZvcm1SZXN0QXJncyBleHRlbmRzIEpzb25Db252ZXJ0YWJsZUltcGwge1xyXG4gICAgcnBjQ3JlYXRpb25SdWxlRXhlY3V0b3JSZXN1bHQ6IHN0cmluZztcclxuXHJcbiAgICBwcm90ZWN0ZWQgUmVzZXRCZWZvcmVMb2FkRnJvbSgpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5SZXNldEJlZm9yZUxvYWRGcm9tKCk7XHJcblxyXG4gICAgICAgIHRoaXMucnBjQ3JlYXRpb25SdWxlRXhlY3V0b3JSZXN1bHQgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBDb252ZXJ0VG9Kc29uT2JqZWN0KCk6IHt9IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG5cclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJycGNDcmVhdGlvblJ1bGVFeGVjdXRvclJlc3VsdFwiLCB0aGlzLnJwY0NyZWF0aW9uUnVsZUV4ZWN1dG9yUmVzdWx0KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgTG9hZEZyb21Kc29uT2JqZWN0KG9iajoge30pOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuXHJcbiAgICAgICAgdGhpcy5ycGNDcmVhdGlvblJ1bGVFeGVjdXRvclJlc3VsdCA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwicnBjQ3JlYXRpb25SdWxlRXhlY3V0b3JSZXN1bHRcIik7XHJcbiAgICB9XHJcbn1cclxuIl19