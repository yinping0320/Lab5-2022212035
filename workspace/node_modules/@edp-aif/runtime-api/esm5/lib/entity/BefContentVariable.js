/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { JsonConvertableImpl, BpmnModelJsonHelper } from '@edp-aif/common-api';
import { CreationRuleExecutorAssociations } from './CreationRuleExecutorAssociations';
var BefContentVariable = /** @class */ (function (_super) {
    tslib_1.__extends(BefContentVariable, _super);
    function BefContentVariable() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.associations = new Array();
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    BefContentVariable.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.upperBeFuncSessionId = null;
        this.associations = new Array();
    };
    /**
     * @return {?}
     */
    BefContentVariable.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelJsonHelper.SetAttributeValue(obj, "upperBeFuncSessionId", this.upperBeFuncSessionId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "associations", this.associations);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    BefContentVariable.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.upperBeFuncSessionId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "upperBeFuncSessionId");
        this.associations = BpmnModelJsonHelper.GetAttributeValueAsList(obj, "associations", CreationRuleExecutorAssociations);
    };
    return BefContentVariable;
}(JsonConvertableImpl));
export { BefContentVariable };
if (false) {
    /** @type {?} */
    BefContentVariable.prototype.upperBeFuncSessionId;
    /** @type {?} */
    BefContentVariable.prototype.associations;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmVmQ29udGVudFZhcmlhYmxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVkcC1haWYvcnVudGltZS1hcGkvIiwic291cmNlcyI6WyJsaWIvZW50aXR5L0JlZkNvbnRlbnRWYXJpYWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQy9FLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBRXRGO0lBQXdDLDhDQUFtQjtJQUEzRDtRQUFBLHFFQTBCQztRQXhCRyxrQkFBWSxHQUE0QyxJQUFJLEtBQUssRUFBRSxDQUFDOztJQXdCeEUsQ0FBQzs7Ozs7SUF0QmEsZ0RBQW1COzs7O0lBQTdCO1FBQ0ksaUJBQU0sbUJBQW1CLFdBQUUsQ0FBQztRQUU1QixJQUFJLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztJQUNwQyxDQUFDOzs7O0lBRU0sZ0RBQW1COzs7SUFBMUI7O1lBQ1EsR0FBRyxHQUFHLGlCQUFNLG1CQUFtQixXQUFFO1FBRXJDLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxzQkFBc0IsRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUM5RixtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsY0FBYyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUU5RSxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7Ozs7O0lBRU0sK0NBQWtCOzs7O0lBQXpCLFVBQTBCLEdBQU87UUFDN0IsaUJBQU0sa0JBQWtCLFlBQUMsR0FBRyxDQUFDLENBQUM7UUFFOUIsSUFBSSxDQUFDLG9CQUFvQixHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO1FBQ3ZHLElBQUksQ0FBQyxZQUFZLEdBQUcsbUJBQW1CLENBQUMsdUJBQXVCLENBQUMsR0FBRyxFQUFFLGNBQWMsRUFBRSxnQ0FBZ0MsQ0FBQyxDQUFDO0lBQzNILENBQUM7SUFDTCx5QkFBQztBQUFELENBQUMsQUExQkQsQ0FBd0MsbUJBQW1CLEdBMEIxRDs7OztJQXpCRyxrREFBNkI7O0lBQzdCLDBDQUFvRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEpzb25Db252ZXJ0YWJsZUltcGwsIEJwbW5Nb2RlbEpzb25IZWxwZXIgfSBmcm9tICdAZWRwLWFpZi9jb21tb24tYXBpJztcclxuaW1wb3J0IHsgQ3JlYXRpb25SdWxlRXhlY3V0b3JBc3NvY2lhdGlvbnMgfSBmcm9tICcuL0NyZWF0aW9uUnVsZUV4ZWN1dG9yQXNzb2NpYXRpb25zJztcclxuXHJcbmV4cG9ydCBjbGFzcyBCZWZDb250ZW50VmFyaWFibGUgZXh0ZW5kcyBKc29uQ29udmVydGFibGVJbXBsIHtcclxuICAgIHVwcGVyQmVGdW5jU2Vzc2lvbklkOiBzdHJpbmc7XHJcbiAgICBhc3NvY2lhdGlvbnM6IEFycmF5PENyZWF0aW9uUnVsZUV4ZWN1dG9yQXNzb2NpYXRpb25zPiA9IG5ldyBBcnJheSgpO1xyXG5cclxuICAgIHByb3RlY3RlZCBSZXNldEJlZm9yZUxvYWRGcm9tKCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLlJlc2V0QmVmb3JlTG9hZEZyb20oKTtcclxuXHJcbiAgICAgICAgdGhpcy51cHBlckJlRnVuY1Nlc3Npb25JZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5hc3NvY2lhdGlvbnMgPSBuZXcgQXJyYXkoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgQ29udmVydFRvSnNvbk9iamVjdCgpOiB7fSB7XHJcbiAgICAgICAgbGV0IG9iaiA9IHN1cGVyLkNvbnZlcnRUb0pzb25PYmplY3QoKTtcclxuXHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwidXBwZXJCZUZ1bmNTZXNzaW9uSWRcIiwgdGhpcy51cHBlckJlRnVuY1Nlc3Npb25JZCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiYXNzb2NpYXRpb25zXCIsIHRoaXMuYXNzb2NpYXRpb25zKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgTG9hZEZyb21Kc29uT2JqZWN0KG9iajoge30pOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuXHJcbiAgICAgICAgdGhpcy51cHBlckJlRnVuY1Nlc3Npb25JZCA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwidXBwZXJCZUZ1bmNTZXNzaW9uSWRcIik7XHJcbiAgICAgICAgdGhpcy5hc3NvY2lhdGlvbnMgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNMaXN0KG9iaiwgXCJhc3NvY2lhdGlvbnNcIiwgQ3JlYXRpb25SdWxlRXhlY3V0b3JBc3NvY2lhdGlvbnMpO1xyXG4gICAgfVxyXG59Il19