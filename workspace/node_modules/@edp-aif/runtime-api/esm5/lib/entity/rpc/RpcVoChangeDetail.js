/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { JsonConvertableImpl, BpmnModelJsonHelper } from '@edp-aif/common-api';
var RpcVoChangeDetail = /** @class */ (function (_super) {
    tslib_1.__extends(RpcVoChangeDetail, _super);
    function RpcVoChangeDetail() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @protected
     * @return {?}
     */
    RpcVoChangeDetail.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.voId = null;
        this.changeDetail = null;
    };
    /**
     * @return {?}
     */
    RpcVoChangeDetail.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelJsonHelper.SetAttributeValue(obj, "voId", this.voId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "changeDetail", this.changeDetail);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    RpcVoChangeDetail.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.voId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "voId");
        this.changeDetail = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "changeDetail");
    };
    return RpcVoChangeDetail;
}(JsonConvertableImpl));
export { RpcVoChangeDetail };
if (false) {
    /** @type {?} */
    RpcVoChangeDetail.prototype.voId;
    /** @type {?} */
    RpcVoChangeDetail.prototype.changeDetail;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUnBjVm9DaGFuZ2VEZXRhaWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZWRwLWFpZi9ydW50aW1lLWFwaS8iLCJzb3VyY2VzIjpbImxpYi9lbnRpdHkvcnBjL1JwY1ZvQ2hhbmdlRGV0YWlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLG1CQUFtQixFQUFFLG1CQUFtQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFL0U7SUFBdUMsNkNBQW1CO0lBQTFEOztJQTBCQSxDQUFDOzs7OztJQXRCYSwrQ0FBbUI7Ozs7SUFBN0I7UUFDSSxpQkFBTSxtQkFBbUIsV0FBRSxDQUFDO1FBRTVCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO0lBQzdCLENBQUM7Ozs7SUFFTSwrQ0FBbUI7OztJQUExQjs7WUFDUSxHQUFHLEdBQUcsaUJBQU0sbUJBQW1CLFdBQUU7UUFFckMsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUQsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGNBQWMsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFOUUsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVNLDhDQUFrQjs7OztJQUF6QixVQUEwQixHQUFPO1FBQzdCLGlCQUFNLGtCQUFrQixZQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxJQUFJLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxZQUFZLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQzNGLENBQUM7SUFDTCx3QkFBQztBQUFELENBQUMsQUExQkQsQ0FBdUMsbUJBQW1CLEdBMEJ6RDs7OztJQXpCRyxpQ0FBYTs7SUFDYix5Q0FBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBKc29uQ29udmVydGFibGVJbXBsLCBCcG1uTW9kZWxKc29uSGVscGVyIH0gZnJvbSAnQGVkcC1haWYvY29tbW9uLWFwaSc7XHJcblxyXG5leHBvcnQgY2xhc3MgUnBjVm9DaGFuZ2VEZXRhaWwgZXh0ZW5kcyBKc29uQ29udmVydGFibGVJbXBsIHtcclxuICAgIHZvSWQ6IHN0cmluZztcclxuICAgIGNoYW5nZURldGFpbDogc3RyaW5nO1xyXG5cclxuICAgIHByb3RlY3RlZCBSZXNldEJlZm9yZUxvYWRGcm9tKCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLlJlc2V0QmVmb3JlTG9hZEZyb20oKTtcclxuXHJcbiAgICAgICAgdGhpcy52b0lkID0gbnVsbDtcclxuICAgICAgICB0aGlzLmNoYW5nZURldGFpbCA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIENvbnZlcnRUb0pzb25PYmplY3QoKToge30ge1xyXG4gICAgICAgIGxldCBvYmogPSBzdXBlci5Db252ZXJ0VG9Kc29uT2JqZWN0KCk7XHJcblxyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInZvSWRcIiwgdGhpcy52b0lkKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJjaGFuZ2VEZXRhaWxcIiwgdGhpcy5jaGFuZ2VEZXRhaWwpO1xyXG5cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBMb2FkRnJvbUpzb25PYmplY3Qob2JqOiB7fSk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG5cclxuICAgICAgICB0aGlzLnZvSWQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcInZvSWRcIik7XHJcbiAgICAgICAgdGhpcy5jaGFuZ2VEZXRhaWwgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcImNoYW5nZURldGFpbFwiKTtcclxuICAgIH1cclxufSJdfQ==