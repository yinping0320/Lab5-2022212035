/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { JsonConvertableImpl, BpmnModelJsonHelper } from '@edp-aif/common-api';
import { RpcWritebackMappingResult } from './RpcWritebackMappingResult';
var RpcWritebackRuleExecutorResult = /** @class */ (function (_super) {
    tslib_1.__extends(RpcWritebackRuleExecutorResult, _super);
    function RpcWritebackRuleExecutorResult() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.mappingResults = new Array();
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    RpcWritebackRuleExecutorResult.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.mappingResults = new Array();
    };
    /**
     * @return {?}
     */
    RpcWritebackRuleExecutorResult.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelJsonHelper.SetAttributeValue(obj, "mappingResults", this.mappingResults);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    RpcWritebackRuleExecutorResult.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.mappingResults = BpmnModelJsonHelper.GetAttributeValueAsList(obj, "mappingResults", RpcWritebackMappingResult);
    };
    return RpcWritebackRuleExecutorResult;
}(JsonConvertableImpl));
export { RpcWritebackRuleExecutorResult };
if (false) {
    /**
     * @type {?}
     * @private
     */
    RpcWritebackRuleExecutorResult.prototype.mappingResults;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUnBjV3JpdGViYWNrUnVsZUV4ZWN1dG9yUmVzdWx0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVkcC1haWYvcnVudGltZS1hcGkvIiwic291cmNlcyI6WyJsaWIvZW50aXR5L3JwYy9ScGNXcml0ZWJhY2tSdWxlRXhlY3V0b3JSZXN1bHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUMvRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUV4RTtJQUFvRCwwREFBbUI7SUFBdkU7UUFBQSxxRUFzQkM7UUFyQlcsb0JBQWMsR0FBcUMsSUFBSSxLQUFLLEVBQUUsQ0FBQzs7SUFxQjNFLENBQUM7Ozs7O0lBbkJhLDREQUFtQjs7OztJQUE3QjtRQUNJLGlCQUFNLG1CQUFtQixXQUFFLENBQUM7UUFFNUIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO0lBQ3RDLENBQUM7Ozs7SUFFTSw0REFBbUI7OztJQUExQjs7WUFDUSxHQUFHLEdBQUcsaUJBQU0sbUJBQW1CLFdBQUU7UUFFckMsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGdCQUFnQixFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUVsRixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7Ozs7O0lBRU0sMkRBQWtCOzs7O0lBQXpCLFVBQTBCLEdBQU87UUFDN0IsaUJBQU0sa0JBQWtCLFlBQUMsR0FBRyxDQUFDLENBQUM7UUFFOUIsSUFBSSxDQUFDLGNBQWMsR0FBRyxtQkFBbUIsQ0FBQyx1QkFBdUIsQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEVBQUUseUJBQXlCLENBQUMsQ0FBQztJQUN4SCxDQUFDO0lBQ0wscUNBQUM7QUFBRCxDQUFDLEFBdEJELENBQW9ELG1CQUFtQixHQXNCdEU7Ozs7Ozs7SUFyQkcsd0RBQXVFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSnNvbkNvbnZlcnRhYmxlSW1wbCwgQnBtbk1vZGVsSnNvbkhlbHBlciB9IGZyb20gJ0BlZHAtYWlmL2NvbW1vbi1hcGknO1xyXG5pbXBvcnQgeyBScGNXcml0ZWJhY2tNYXBwaW5nUmVzdWx0IH0gZnJvbSAnLi9ScGNXcml0ZWJhY2tNYXBwaW5nUmVzdWx0JztcclxuXHJcbmV4cG9ydCBjbGFzcyBScGNXcml0ZWJhY2tSdWxlRXhlY3V0b3JSZXN1bHQgZXh0ZW5kcyBKc29uQ29udmVydGFibGVJbXBsIHtcclxuICAgIHByaXZhdGUgbWFwcGluZ1Jlc3VsdHM6IEFycmF5PFJwY1dyaXRlYmFja01hcHBpbmdSZXN1bHQ+ID0gbmV3IEFycmF5KCk7XHJcblxyXG4gICAgcHJvdGVjdGVkIFJlc2V0QmVmb3JlTG9hZEZyb20oKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuUmVzZXRCZWZvcmVMb2FkRnJvbSgpO1xyXG5cclxuICAgICAgICB0aGlzLm1hcHBpbmdSZXN1bHRzID0gbmV3IEFycmF5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIENvbnZlcnRUb0pzb25PYmplY3QoKToge30ge1xyXG4gICAgICAgIGxldCBvYmogPSBzdXBlci5Db252ZXJ0VG9Kc29uT2JqZWN0KCk7XHJcblxyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIm1hcHBpbmdSZXN1bHRzXCIsIHRoaXMubWFwcGluZ1Jlc3VsdHMpO1xyXG5cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBMb2FkRnJvbUpzb25PYmplY3Qob2JqOiB7fSk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG5cclxuICAgICAgICB0aGlzLm1hcHBpbmdSZXN1bHRzID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzTGlzdChvYmosIFwibWFwcGluZ1Jlc3VsdHNcIiwgUnBjV3JpdGViYWNrTWFwcGluZ1Jlc3VsdCk7XHJcbiAgICB9XHJcbn0iXX0=