/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { JsonConvertableImpl, BpmnModelJsonHelper } from '@edp-aif/common-api';
var MappingAssociation = /** @class */ (function (_super) {
    tslib_1.__extends(MappingAssociation, _super);
    function MappingAssociation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @protected
     * @return {?}
     */
    MappingAssociation.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.relationName = null;
        this.srcRootTableName = null;
        this.srcRootDataId = null;
        this.srcParentTableName = null;
        this.srcParentDataId = null;
        this.srcTableName = null;
        this.srcDataId = null;
        this.tarRootTableName = null;
        this.tarRootDataId = null;
        this.tarParentTableName = null;
        this.tarParentDataId = null;
        this.tarTableName = null;
        this.tarDataId = null;
        this.srcTableNamePath = null;
        this.srcDataIdPath = null;
        this.tarTableNamePath = null;
        this.tarDataIdPath = null;
        this.mappingUnitId = null;
        this.associationType = null;
    };
    /**
     * @return {?}
     */
    MappingAssociation.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelJsonHelper.SetAttributeValue(obj, "relationName", this.relationName);
        BpmnModelJsonHelper.SetAttributeValue(obj, "srcRootTableName", this.srcRootTableName);
        BpmnModelJsonHelper.SetAttributeValue(obj, "srcRootDataId", this.srcRootDataId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "srcParentTableName", this.srcParentTableName);
        BpmnModelJsonHelper.SetAttributeValue(obj, "srcParentDataId", this.srcParentDataId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "srcTableName", this.srcTableName);
        BpmnModelJsonHelper.SetAttributeValue(obj, "srcDataId", this.srcDataId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "tarRootTableName", this.tarRootTableName);
        BpmnModelJsonHelper.SetAttributeValue(obj, "tarRootDataId", this.tarRootDataId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "tarParentTableName", this.tarParentTableName);
        BpmnModelJsonHelper.SetAttributeValue(obj, "tarParentDataId", this.tarParentDataId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "tarTableName", this.tarTableName);
        BpmnModelJsonHelper.SetAttributeValue(obj, "tarDataId", this.tarDataId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "srcTableNamePath", this.srcTableNamePath);
        BpmnModelJsonHelper.SetAttributeValue(obj, "srcDataIdPath", this.srcDataIdPath);
        BpmnModelJsonHelper.SetAttributeValue(obj, "tarTableNamePath", this.tarTableNamePath);
        BpmnModelJsonHelper.SetAttributeValue(obj, "tarDataIdPath", this.tarDataIdPath);
        BpmnModelJsonHelper.SetAttributeValue(obj, "mappingUnitId", this.mappingUnitId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "associationType", this.associationType);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    MappingAssociation.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.relationName = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "relationName");
        this.srcRootTableName = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "srcRootTableName");
        this.srcRootDataId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "srcRootDataId");
        this.srcParentTableName = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "srcParentTableName");
        this.srcParentDataId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "srcParentDataId");
        this.srcTableName = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "srcTableName");
        this.srcDataId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "srcDataId");
        this.tarRootTableName = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "tarRootTableName");
        this.tarRootDataId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "tarRootDataId");
        this.tarParentTableName = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "tarParentTableName");
        this.tarParentDataId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "tarParentDataId");
        this.tarTableName = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "tarTableName");
        this.tarDataId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "tarDataId");
        this.srcTableNamePath = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "srcTableNamePath");
        this.srcDataIdPath = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "srcDataIdPath");
        this.tarTableNamePath = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "tarTableNamePath");
        this.tarDataIdPath = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "tarDataIdPath");
        this.mappingUnitId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "mappingUnitId");
        this.associationType = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "associationType");
    };
    return MappingAssociation;
}(JsonConvertableImpl));
export { MappingAssociation };
if (false) {
    /** @type {?} */
    MappingAssociation.prototype.relationName;
    /** @type {?} */
    MappingAssociation.prototype.srcRootTableName;
    /** @type {?} */
    MappingAssociation.prototype.srcRootDataId;
    /** @type {?} */
    MappingAssociation.prototype.srcParentTableName;
    /** @type {?} */
    MappingAssociation.prototype.srcParentDataId;
    /** @type {?} */
    MappingAssociation.prototype.srcTableName;
    /** @type {?} */
    MappingAssociation.prototype.srcDataId;
    /** @type {?} */
    MappingAssociation.prototype.srcTableNamePath;
    /** @type {?} */
    MappingAssociation.prototype.srcDataIdPath;
    /** @type {?} */
    MappingAssociation.prototype.tarRootTableName;
    /** @type {?} */
    MappingAssociation.prototype.tarRootDataId;
    /** @type {?} */
    MappingAssociation.prototype.tarParentTableName;
    /** @type {?} */
    MappingAssociation.prototype.tarParentDataId;
    /** @type {?} */
    MappingAssociation.prototype.tarTableName;
    /** @type {?} */
    MappingAssociation.prototype.tarDataId;
    /** @type {?} */
    MappingAssociation.prototype.tarTableNamePath;
    /** @type {?} */
    MappingAssociation.prototype.tarDataIdPath;
    /** @type {?} */
    MappingAssociation.prototype.mappingUnitId;
    /** @type {?} */
    MappingAssociation.prototype.associationType;
}
//# sourceMappingURL=data:application/json;base64,