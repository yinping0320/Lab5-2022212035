/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { JsonConvertableImpl, BpmnModelJsonHelper } from '@edp-aif/common-api';
import { MappingAssociation } from './MappingAssociation';
var CreationRuleExecutorAssociations = /** @class */ (function (_super) {
    tslib_1.__extends(CreationRuleExecutorAssociations, _super);
    function CreationRuleExecutorAssociations() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isAllAssociation = false;
        _this.associations = new Array();
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    CreationRuleExecutorAssociations.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.creationRuleId = null;
        this.creationRuleInstanceId = null;
        this.bizFlowchartId = null;
        this.creationProcessId = null;
        this.creationProcessInstanceId = null;
        this.isAllAssociation = false;
        this.associations = new Array();
    };
    /**
     * @return {?}
     */
    CreationRuleExecutorAssociations.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelJsonHelper.SetAttributeValue(obj, "creationRuleId", this.creationRuleId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "creationRuleInstanceId", this.creationRuleInstanceId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "bizFlowchartId", this.bizFlowchartId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "creationProcessId", this.creationProcessId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "creationProcessInstanceId", this.creationProcessInstanceId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "isAllAssociation", this.isAllAssociation);
        BpmnModelJsonHelper.SetAttributeValue(obj, "associations", this.associations);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    CreationRuleExecutorAssociations.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.creationRuleId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "creationRuleId");
        this.creationRuleInstanceId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "creationRuleInstanceId");
        this.bizFlowchartId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "bizFlowchartId");
        this.creationProcessId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "creationProcessId");
        this.creationProcessInstanceId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "creationProcessInstanceId");
        this.isAllAssociation = BpmnModelJsonHelper.GetAttributeValueAsBoolean(obj, "isAllAssociation");
        this.associations = BpmnModelJsonHelper.GetAttributeValueAsList(obj, "associations", MappingAssociation);
    };
    return CreationRuleExecutorAssociations;
}(JsonConvertableImpl));
export { CreationRuleExecutorAssociations };
if (false) {
    /** @type {?} */
    CreationRuleExecutorAssociations.prototype.creationRuleId;
    /** @type {?} */
    CreationRuleExecutorAssociations.prototype.creationRuleInstanceId;
    /** @type {?} */
    CreationRuleExecutorAssociations.prototype.bizFlowchartId;
    /** @type {?} */
    CreationRuleExecutorAssociations.prototype.creationProcessId;
    /** @type {?} */
    CreationRuleExecutorAssociations.prototype.creationProcessInstanceId;
    /** @type {?} */
    CreationRuleExecutorAssociations.prototype.isAllAssociation;
    /** @type {?} */
    CreationRuleExecutorAssociations.prototype.associations;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ3JlYXRpb25SdWxlRXhlY3V0b3JBc3NvY2lhdGlvbnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZWRwLWFpZi9ydW50aW1lLWFwaS8iLCJzb3VyY2VzIjpbImxpYi9lbnRpdHkvQ3JlYXRpb25SdWxlRXhlY3V0b3JBc3NvY2lhdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUMvRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUUxRDtJQUFzRCw0REFBbUI7SUFBekU7UUFBQSxxRUErQ0M7UUF6Q0csc0JBQWdCLEdBQVksS0FBSyxDQUFDO1FBQ2xDLGtCQUFZLEdBQUcsSUFBSSxLQUFLLEVBQXNCLENBQUM7O0lBd0NuRCxDQUFDOzs7OztJQXRDYSw4REFBbUI7Ozs7SUFBN0I7UUFDSSxpQkFBTSxtQkFBbUIsV0FBRSxDQUFDO1FBRTVCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1FBQzNCLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxJQUFJLENBQUM7UUFDbkMsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7UUFDM0IsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQztRQUM5QixJQUFJLENBQUMseUJBQXlCLEdBQUcsSUFBSSxDQUFDO1FBQ3RDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7UUFDOUIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLEtBQUssRUFBc0IsQ0FBQztJQUN4RCxDQUFDOzs7O0lBRU0sOERBQW1COzs7SUFBMUI7O1lBQ1EsR0FBRyxHQUFHLGlCQUFNLG1CQUFtQixXQUFFO1FBRXJDLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDbEYsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLHdCQUF3QixFQUFFLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBQ2xHLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDbEYsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLG1CQUFtQixFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3hGLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSwyQkFBMkIsRUFBRSxJQUFJLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUN4RyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDdEYsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGNBQWMsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFOUUsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVNLDZEQUFrQjs7OztJQUF6QixVQUEwQixHQUFPO1FBQzdCLGlCQUFNLGtCQUFrQixZQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxjQUFjLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLGdCQUFnQixDQUFDLENBQUM7UUFDM0YsSUFBSSxDQUFDLHNCQUFzQixHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSx3QkFBd0IsQ0FBQyxDQUFDO1FBQzNHLElBQUksQ0FBQyxjQUFjLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLGdCQUFnQixDQUFDLENBQUM7UUFDM0YsSUFBSSxDQUFDLGlCQUFpQixHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO1FBQ2pHLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsMkJBQTJCLENBQUMsQ0FBQztRQUNqSCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsbUJBQW1CLENBQUMsMEJBQTBCLENBQUMsR0FBRyxFQUFFLGtCQUFrQixDQUFDLENBQUM7UUFDaEcsSUFBSSxDQUFDLFlBQVksR0FBRyxtQkFBbUIsQ0FBQyx1QkFBdUIsQ0FBQyxHQUFHLEVBQUUsY0FBYyxFQUFFLGtCQUFrQixDQUFDLENBQUM7SUFDN0csQ0FBQztJQUVMLHVDQUFDO0FBQUQsQ0FBQyxBQS9DRCxDQUFzRCxtQkFBbUIsR0ErQ3hFOzs7O0lBOUNHLDBEQUF1Qjs7SUFDdkIsa0VBQStCOztJQUMvQiwwREFBdUI7O0lBQ3ZCLDZEQUEwQjs7SUFDMUIscUVBQWtDOztJQUNsQyw0REFBa0M7O0lBQ2xDLHdEQUErQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEpzb25Db252ZXJ0YWJsZUltcGwsIEJwbW5Nb2RlbEpzb25IZWxwZXIgfSBmcm9tICdAZWRwLWFpZi9jb21tb24tYXBpJztcclxuaW1wb3J0IHsgTWFwcGluZ0Fzc29jaWF0aW9uIH0gZnJvbSAnLi9NYXBwaW5nQXNzb2NpYXRpb24nO1xyXG5cclxuZXhwb3J0IGNsYXNzIENyZWF0aW9uUnVsZUV4ZWN1dG9yQXNzb2NpYXRpb25zIGV4dGVuZHMgSnNvbkNvbnZlcnRhYmxlSW1wbCB7XHJcbiAgICBjcmVhdGlvblJ1bGVJZDogc3RyaW5nO1xyXG4gICAgY3JlYXRpb25SdWxlSW5zdGFuY2VJZDogc3RyaW5nO1xyXG4gICAgYml6Rmxvd2NoYXJ0SWQ6IHN0cmluZztcclxuICAgIGNyZWF0aW9uUHJvY2Vzc0lkOiBzdHJpbmc7XHJcbiAgICBjcmVhdGlvblByb2Nlc3NJbnN0YW5jZUlkOiBzdHJpbmc7XHJcbiAgICBpc0FsbEFzc29jaWF0aW9uOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBhc3NvY2lhdGlvbnMgPSBuZXcgQXJyYXk8TWFwcGluZ0Fzc29jaWF0aW9uPigpO1xyXG5cclxuICAgIHByb3RlY3RlZCBSZXNldEJlZm9yZUxvYWRGcm9tKCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLlJlc2V0QmVmb3JlTG9hZEZyb20oKTtcclxuXHJcbiAgICAgICAgdGhpcy5jcmVhdGlvblJ1bGVJZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5jcmVhdGlvblJ1bGVJbnN0YW5jZUlkID0gbnVsbDtcclxuICAgICAgICB0aGlzLmJpekZsb3djaGFydElkID0gbnVsbDtcclxuICAgICAgICB0aGlzLmNyZWF0aW9uUHJvY2Vzc0lkID0gbnVsbDtcclxuICAgICAgICB0aGlzLmNyZWF0aW9uUHJvY2Vzc0luc3RhbmNlSWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuaXNBbGxBc3NvY2lhdGlvbiA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuYXNzb2NpYXRpb25zID0gbmV3IEFycmF5PE1hcHBpbmdBc3NvY2lhdGlvbj4oKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgQ29udmVydFRvSnNvbk9iamVjdCgpOiB7fSB7XHJcbiAgICAgICAgbGV0IG9iaiA9IHN1cGVyLkNvbnZlcnRUb0pzb25PYmplY3QoKTtcclxuXHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiY3JlYXRpb25SdWxlSWRcIiwgdGhpcy5jcmVhdGlvblJ1bGVJZCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiY3JlYXRpb25SdWxlSW5zdGFuY2VJZFwiLCB0aGlzLmNyZWF0aW9uUnVsZUluc3RhbmNlSWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcImJpekZsb3djaGFydElkXCIsIHRoaXMuYml6Rmxvd2NoYXJ0SWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcImNyZWF0aW9uUHJvY2Vzc0lkXCIsIHRoaXMuY3JlYXRpb25Qcm9jZXNzSWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcImNyZWF0aW9uUHJvY2Vzc0luc3RhbmNlSWRcIiwgdGhpcy5jcmVhdGlvblByb2Nlc3NJbnN0YW5jZUlkKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJpc0FsbEFzc29jaWF0aW9uXCIsIHRoaXMuaXNBbGxBc3NvY2lhdGlvbik7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiYXNzb2NpYXRpb25zXCIsIHRoaXMuYXNzb2NpYXRpb25zKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgTG9hZEZyb21Kc29uT2JqZWN0KG9iajoge30pOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuXHJcbiAgICAgICAgdGhpcy5jcmVhdGlvblJ1bGVJZCA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwiY3JlYXRpb25SdWxlSWRcIik7XHJcbiAgICAgICAgdGhpcy5jcmVhdGlvblJ1bGVJbnN0YW5jZUlkID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJjcmVhdGlvblJ1bGVJbnN0YW5jZUlkXCIpO1xyXG4gICAgICAgIHRoaXMuYml6Rmxvd2NoYXJ0SWQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcImJpekZsb3djaGFydElkXCIpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRpb25Qcm9jZXNzSWQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcImNyZWF0aW9uUHJvY2Vzc0lkXCIpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRpb25Qcm9jZXNzSW5zdGFuY2VJZCA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwiY3JlYXRpb25Qcm9jZXNzSW5zdGFuY2VJZFwiKTtcclxuICAgICAgICB0aGlzLmlzQWxsQXNzb2NpYXRpb24gPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNCb29sZWFuKG9iaiwgXCJpc0FsbEFzc29jaWF0aW9uXCIpO1xyXG4gICAgICAgIHRoaXMuYXNzb2NpYXRpb25zID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzTGlzdChvYmosIFwiYXNzb2NpYXRpb25zXCIsIE1hcHBpbmdBc3NvY2lhdGlvbik7XHJcbiAgICB9XHJcblxyXG59Il19