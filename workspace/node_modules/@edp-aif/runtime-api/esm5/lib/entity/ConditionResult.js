/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { JsonConvertableImpl, BpmnModelJsonHelper } from "@edp-aif/common-api";
var ConditionResult = /** @class */ (function (_super) {
    tslib_1.__extends(ConditionResult, _super);
    function ConditionResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @protected
     * @return {?}
     */
    ConditionResult.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.conditionExecutionResult = false;
        this.message = null;
    };
    /**
     * @return {?}
     */
    ConditionResult.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelJsonHelper.SetAttributeValue(obj, "conditionExecutionResult", this.conditionExecutionResult);
        BpmnModelJsonHelper.SetAttributeValue(obj, "message", this.message);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    ConditionResult.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.conditionExecutionResult = BpmnModelJsonHelper.GetAttributeValueAsBoolean(obj, "conditionExecutionResult");
        this.message = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "message");
    };
    return ConditionResult;
}(JsonConvertableImpl));
export { ConditionResult };
if (false) {
    /** @type {?} */
    ConditionResult.prototype.conditionExecutionResult;
    /** @type {?} */
    ConditionResult.prototype.message;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29uZGl0aW9uUmVzdWx0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVkcC1haWYvcnVudGltZS1hcGkvIiwic291cmNlcyI6WyJsaWIvZW50aXR5L0NvbmRpdGlvblJlc3VsdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRS9FO0lBQXFDLDJDQUFtQjtJQUF4RDs7SUF1QkEsQ0FBQzs7Ozs7SUFuQmEsNkNBQW1COzs7O0lBQTdCO1FBQ0ksaUJBQU0sbUJBQW1CLFdBQUUsQ0FBQztRQUM1QixJQUFJLENBQUMsd0JBQXdCLEdBQUcsS0FBSyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBQ3hCLENBQUM7Ozs7SUFFTSw2Q0FBbUI7OztJQUExQjs7WUFDUSxHQUFHLEdBQU8saUJBQU0sbUJBQW1CLFdBQUU7UUFDekMsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLDBCQUEwQixFQUFFLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1FBQ3RHLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3BFLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7SUFFTSw0Q0FBa0I7Ozs7SUFBekIsVUFBMEIsR0FBTztRQUM3QixpQkFBTSxrQkFBa0IsWUFBQyxHQUFHLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsd0JBQXdCLEdBQUcsbUJBQW1CLENBQUMsMEJBQTBCLENBQUMsR0FBRyxFQUFFLDBCQUEwQixDQUFDLENBQUM7UUFDaEgsSUFBSSxDQUFDLE9BQU8sR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDakYsQ0FBQztJQUVMLHNCQUFDO0FBQUQsQ0FBQyxBQXZCRCxDQUFxQyxtQkFBbUIsR0F1QnZEOzs7O0lBdEJHLG1EQUFrQzs7SUFDbEMsa0NBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSnNvbkNvbnZlcnRhYmxlSW1wbCwgQnBtbk1vZGVsSnNvbkhlbHBlciB9IGZyb20gXCJAZWRwLWFpZi9jb21tb24tYXBpXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQ29uZGl0aW9uUmVzdWx0IGV4dGVuZHMgSnNvbkNvbnZlcnRhYmxlSW1wbCB7XHJcbiAgICBjb25kaXRpb25FeGVjdXRpb25SZXN1bHQ6IGJvb2xlYW47XHJcbiAgICBtZXNzYWdlOiBzdHJpbmc7XHJcblxyXG4gICAgcHJvdGVjdGVkIFJlc2V0QmVmb3JlTG9hZEZyb20oKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuUmVzZXRCZWZvcmVMb2FkRnJvbSgpO1xyXG4gICAgICAgIHRoaXMuY29uZGl0aW9uRXhlY3V0aW9uUmVzdWx0ID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgQ29udmVydFRvSnNvbk9iamVjdCgpOiB7fSB7XHJcbiAgICAgICAgbGV0IG9iajoge30gPSBzdXBlci5Db252ZXJ0VG9Kc29uT2JqZWN0KCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiY29uZGl0aW9uRXhlY3V0aW9uUmVzdWx0XCIsIHRoaXMuY29uZGl0aW9uRXhlY3V0aW9uUmVzdWx0KTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJtZXNzYWdlXCIsIHRoaXMubWVzc2FnZSk7XHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgTG9hZEZyb21Kc29uT2JqZWN0KG9iajoge30pOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuICAgICAgICB0aGlzLmNvbmRpdGlvbkV4ZWN1dGlvblJlc3VsdCA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc0Jvb2xlYW4ob2JqLCBcImNvbmRpdGlvbkV4ZWN1dGlvblJlc3VsdFwiKTtcclxuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcIm1lc3NhZ2VcIik7XHJcbiAgICB9XHJcblxyXG59Il19