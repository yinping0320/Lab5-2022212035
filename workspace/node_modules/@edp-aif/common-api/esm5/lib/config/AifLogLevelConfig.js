/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { JsonConvertableImpl } from '../JsonConvertableImpl';
import { BpmnModelJsonHelper } from '../BpmnModelJsonHelper';
import { AifLogLevel } from "./AifLogLevel";
var AifLogLevelConfig = /** @class */ (function (_super) {
    tslib_1.__extends(AifLogLevelConfig, _super);
    function AifLogLevelConfig() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.logLevel = AifLogLevel.NONE;
        _this.writeAllInfo = false;
        _this.bifCpIds = new Array();
        _this.bifWpIds = new Array();
        _this.aifEventIds = new Array();
        _this.aifCpIds = new Array();
        _this.aifWpIds = new Array();
        _this.aifCrIds = new Array();
        _this.aifWrIds = new Array();
        _this.aifActionIds = new Array();
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    AifLogLevelConfig.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.writeAllInfo = false;
        this.logLevel = AifLogLevel.NONE;
        this.bifCpIds.length = 0;
        this.bifWpIds.length = 0;
        this.aifEventIds.length = 0;
        this.aifCpIds.length = 0;
        this.aifWpIds.length = 0;
        this.aifCrIds.length = 0;
        this.aifWrIds.length = 0;
        this.aifActionIds.length = 0;
    };
    /**
     * @return {?}
     */
    AifLogLevelConfig.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelJsonHelper.SetAttributeValue(obj, "writeAllInfo", this.writeAllInfo);
        BpmnModelJsonHelper.SetAttributeValue(obj, "logLevel", this.logLevel);
        BpmnModelJsonHelper.SetAttributeValue(obj, "bifCpIds", BpmnModelJsonHelper.StringListToJson(this.bifCpIds));
        BpmnModelJsonHelper.SetAttributeValue(obj, "bifWpIds", BpmnModelJsonHelper.StringListToJson(this.bifWpIds));
        BpmnModelJsonHelper.SetAttributeValue(obj, "aifEventIds", BpmnModelJsonHelper.StringListToJson(this.aifEventIds));
        BpmnModelJsonHelper.SetAttributeValue(obj, "aifCpIds", BpmnModelJsonHelper.StringListToJson(this.aifCpIds));
        BpmnModelJsonHelper.SetAttributeValue(obj, "aifWpIds", BpmnModelJsonHelper.StringListToJson(this.aifWpIds));
        BpmnModelJsonHelper.SetAttributeValue(obj, "aifCrIds", BpmnModelJsonHelper.StringListToJson(this.aifCrIds));
        BpmnModelJsonHelper.SetAttributeValue(obj, "aifWrIds", BpmnModelJsonHelper.StringListToJson(this.aifWrIds));
        BpmnModelJsonHelper.SetAttributeValue(obj, "aifActionIds", BpmnModelJsonHelper.StringListToJson(this.aifActionIds));
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    AifLogLevelConfig.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.writeAllInfo = BpmnModelJsonHelper.GetAttributeValueAsBoolean(obj, "writeAllInfo");
        this.logLevel = AifLogLevel[BpmnModelJsonHelper.GetAttributeValueAsString(obj, "logLevel")];
        this.bifCpIds = BpmnModelJsonHelper.StringListFromJson(BpmnModelJsonHelper.GetAttributeValueAsString(obj, "bifCpIds"));
        this.bifWpIds = BpmnModelJsonHelper.StringListFromJson(BpmnModelJsonHelper.GetAttributeValueAsString(obj, "bifWpIds"));
        this.aifEventIds = BpmnModelJsonHelper.StringListFromJson(BpmnModelJsonHelper.GetAttributeValueAsString(obj, "aifEventIds"));
        this.aifCpIds = BpmnModelJsonHelper.StringListFromJson(BpmnModelJsonHelper.GetAttributeValueAsString(obj, "aifCpIds"));
        this.aifWpIds = BpmnModelJsonHelper.StringListFromJson(BpmnModelJsonHelper.GetAttributeValueAsString(obj, "aifWpIds"));
        this.aifCrIds = BpmnModelJsonHelper.StringListFromJson(BpmnModelJsonHelper.GetAttributeValueAsString(obj, "aifCrIds"));
        this.aifWrIds = BpmnModelJsonHelper.StringListFromJson(BpmnModelJsonHelper.GetAttributeValueAsString(obj, "aifWrIds"));
        this.aifActionIds = BpmnModelJsonHelper.StringListFromJson(BpmnModelJsonHelper.GetAttributeValueAsString(obj, "aifActionIds"));
    };
    return AifLogLevelConfig;
}(JsonConvertableImpl));
export { AifLogLevelConfig };
if (false) {
    /** @type {?} */
    AifLogLevelConfig.prototype.logLevel;
    /** @type {?} */
    AifLogLevelConfig.prototype.writeAllInfo;
    /** @type {?} */
    AifLogLevelConfig.prototype.bifCpIds;
    /** @type {?} */
    AifLogLevelConfig.prototype.bifWpIds;
    /** @type {?} */
    AifLogLevelConfig.prototype.aifEventIds;
    /** @type {?} */
    AifLogLevelConfig.prototype.aifCpIds;
    /** @type {?} */
    AifLogLevelConfig.prototype.aifWpIds;
    /** @type {?} */
    AifLogLevelConfig.prototype.aifCrIds;
    /** @type {?} */
    AifLogLevelConfig.prototype.aifWrIds;
    /** @type {?} */
    AifLogLevelConfig.prototype.aifActionIds;
}
//# sourceMappingURL=data:application/json;base64,