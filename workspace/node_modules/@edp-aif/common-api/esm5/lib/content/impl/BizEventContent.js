/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Content } from './Content';
import { BizEventEntity } from '../../entity/impl/BizEventEntity';
import { BpmnModelJsonHelper } from '../../BpmnModelJsonHelper';
var BizEventContent = /** @class */ (function (_super) {
    tslib_1.__extends(BizEventContent, _super);
    function BizEventContent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @protected
     * @return {?}
     */
    BizEventContent.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.canDoExpression = null;
        this.bizFlowchartIdExpression = null;
    };
    /**
     * @return {?}
     */
    BizEventContent.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelJsonHelper.SetAttributeValue(obj, "canDoExpression", this.canDoExpression);
        BpmnModelJsonHelper.SetAttributeValue(obj, "bizFlowchartIdExpression", this.bizFlowchartIdExpression);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    BizEventContent.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.canDoExpression = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "canDoExpression");
        this.bizFlowchartIdExpression = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "bizFlowchartIdExpression");
    };
    /**
     * @protected
     * @return {?}
     */
    BizEventContent.prototype.GetEntityClass = /**
     * @protected
     * @return {?}
     */
    function () {
        return BizEventEntity;
    };
    return BizEventContent;
}(Content));
export { BizEventContent };
if (false) {
    /** @type {?} */
    BizEventContent.prototype.canDoExpression;
    /** @type {?} */
    BizEventContent.prototype.bizFlowchartIdExpression;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQml6RXZlbnRDb250ZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVkcC1haWYvY29tbW9uLWFwaS8iLCJzb3VyY2VzIjpbImxpYi9jb250ZW50L2ltcGwvQml6RXZlbnRDb250ZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUdwQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDbEUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFaEU7SUFBcUMsMkNBQXdCO0lBQTdEOztJQStCQSxDQUFDOzs7OztJQTFCYSw2Q0FBbUI7Ozs7SUFBN0I7UUFDSSxpQkFBTSxtQkFBbUIsV0FBRSxDQUFDO1FBRTVCLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO1FBQzVCLElBQUksQ0FBQyx3QkFBd0IsR0FBRyxJQUFJLENBQUM7SUFDekMsQ0FBQzs7OztJQUVNLDZDQUFtQjs7O0lBQTFCOztZQUNRLEdBQUcsR0FBRyxpQkFBTSxtQkFBbUIsV0FBRTtRQUVyQyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3BGLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSwwQkFBMEIsRUFBRSxJQUFJLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUV0RyxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7Ozs7O0lBRU0sNENBQWtCOzs7O0lBQXpCLFVBQTBCLEdBQU87UUFDN0IsaUJBQU0sa0JBQWtCLFlBQUMsR0FBRyxDQUFDLENBQUM7UUFFOUIsSUFBSSxDQUFDLGVBQWUsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUM3RixJQUFJLENBQUMsd0JBQXdCLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLDBCQUEwQixDQUFDLENBQUM7SUFDbkgsQ0FBQzs7Ozs7SUFFUyx3Q0FBYzs7OztJQUF4QjtRQUNJLE9BQU8sY0FBYyxDQUFDO0lBQzFCLENBQUM7SUFDTCxzQkFBQztBQUFELENBQUMsQUEvQkQsQ0FBcUMsT0FBTyxHQStCM0M7Ozs7SUE5QkcsMENBQXdCOztJQUN4QixtREFBaUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb250ZW50IH0gZnJvbSAnLi9Db250ZW50JztcclxuaW1wb3J0IHsgSUJpekV2ZW50RW50aXR5IH0gZnJvbSAnLi4vLi4vZW50aXR5L0lCaXpFdmVudEVudGl0eSc7XHJcbmltcG9ydCB7IElCaXpFdmVudENvbnRlbnQgfSBmcm9tICcuLi9JQml6RXZlbnRDb250ZW50JztcclxuaW1wb3J0IHsgQml6RXZlbnRFbnRpdHkgfSBmcm9tICcuLi8uLi9lbnRpdHkvaW1wbC9CaXpFdmVudEVudGl0eSc7XHJcbmltcG9ydCB7IEJwbW5Nb2RlbEpzb25IZWxwZXIgfSBmcm9tICcuLi8uLi9CcG1uTW9kZWxKc29uSGVscGVyJztcclxuXHJcbmV4cG9ydCBjbGFzcyBCaXpFdmVudENvbnRlbnQgZXh0ZW5kcyBDb250ZW50PElCaXpFdmVudEVudGl0eT4gaW1wbGVtZW50cyBJQml6RXZlbnRDb250ZW50IHtcclxuICAgIGNhbkRvRXhwcmVzc2lvbjogc3RyaW5nO1xyXG4gICAgYml6Rmxvd2NoYXJ0SWRFeHByZXNzaW9uOiBzdHJpbmc7XHJcblxyXG5cclxuICAgIHByb3RlY3RlZCBSZXNldEJlZm9yZUxvYWRGcm9tKCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLlJlc2V0QmVmb3JlTG9hZEZyb20oKTtcclxuXHJcbiAgICAgICAgdGhpcy5jYW5Eb0V4cHJlc3Npb24gPSBudWxsO1xyXG4gICAgICAgIHRoaXMuYml6Rmxvd2NoYXJ0SWRFeHByZXNzaW9uID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgQ29udmVydFRvSnNvbk9iamVjdCgpOiB7fSB7XHJcbiAgICAgICAgbGV0IG9iaiA9IHN1cGVyLkNvbnZlcnRUb0pzb25PYmplY3QoKTtcclxuXHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiY2FuRG9FeHByZXNzaW9uXCIsIHRoaXMuY2FuRG9FeHByZXNzaW9uKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJiaXpGbG93Y2hhcnRJZEV4cHJlc3Npb25cIiwgdGhpcy5iaXpGbG93Y2hhcnRJZEV4cHJlc3Npb24pO1xyXG5cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBMb2FkRnJvbUpzb25PYmplY3Qob2JqOiB7fSk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG5cclxuICAgICAgICB0aGlzLmNhbkRvRXhwcmVzc2lvbiA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwiY2FuRG9FeHByZXNzaW9uXCIpO1xyXG4gICAgICAgIHRoaXMuYml6Rmxvd2NoYXJ0SWRFeHByZXNzaW9uID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJiaXpGbG93Y2hhcnRJZEV4cHJlc3Npb25cIik7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIEdldEVudGl0eUNsYXNzKCk6IHR5cGVvZiBCaXpFdmVudEVudGl0eSB7XHJcbiAgICAgICAgcmV0dXJuIEJpekV2ZW50RW50aXR5O1xyXG4gICAgfVxyXG59Il19