/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModelJsonHelper } from "../../BpmnModelJsonHelper";
import { JsonConvertableImpl } from "../../JsonConvertableImpl";
var UserParticipant = /** @class */ (function (_super) {
    tslib_1.__extends(UserParticipant, _super);
    function UserParticipant() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.orgType = "Sys";
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    UserParticipant.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.userId = null;
        this.userName = null;
        this.orgId = null;
        this.orgName = null;
        this.orgType = null;
    };
    /**
     * @return {?}
     */
    UserParticipant.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelJsonHelper.SetAttributeValue(obj, "userId", this.userId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "userName", this.userName);
        BpmnModelJsonHelper.SetAttributeValue(obj, "orgId", this.orgId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "orgName", this.orgName);
        BpmnModelJsonHelper.SetAttributeValue(obj, "orgType", this.orgType);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    UserParticipant.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.userId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "userId");
        this.userName = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "userName");
        this.orgId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "orgId");
        this.orgName = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "orgName");
        this.orgType = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "orgType");
    };
    return UserParticipant;
}(JsonConvertableImpl));
export { UserParticipant };
if (false) {
    /** @type {?} */
    UserParticipant.prototype.userId;
    /** @type {?} */
    UserParticipant.prototype.userName;
    /** @type {?} */
    UserParticipant.prototype.orgId;
    /** @type {?} */
    UserParticipant.prototype.orgName;
    /** @type {?} */
    UserParticipant.prototype.orgType;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlclBhcnRpY2lwYW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVkcC1haWYvY29tbW9uLWFwaS8iLCJzb3VyY2VzIjpbImxpYi9lbnRpdHkvaW1wbC9Vc2VyUGFydGljaXBhbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUVoRTtJQUFxQywyQ0FBbUI7SUFBeEQ7UUFBQSxxRUFzQ0M7UUFqQ0csYUFBTyxHQUFXLEtBQUssQ0FBQzs7SUFpQzVCLENBQUM7Ozs7O0lBL0JhLDZDQUFtQjs7OztJQUE3QjtRQUNJLGlCQUFNLG1CQUFtQixXQUFFLENBQUM7UUFFNUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDbEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDcEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7SUFDeEIsQ0FBQzs7OztJQUVNLDZDQUFtQjs7O0lBQTFCOztZQUNRLEdBQUcsR0FBRyxpQkFBTSxtQkFBbUIsV0FBRTtRQUVyQyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsRSxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN0RSxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNoRSxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNwRSxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVwRSxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7Ozs7O0lBRU0sNENBQWtCOzs7O0lBQXpCLFVBQTBCLEdBQU87UUFDN0IsaUJBQU0sa0JBQWtCLFlBQUMsR0FBRyxDQUFDLENBQUM7UUFFOUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDM0UsSUFBSSxDQUFDLFFBQVEsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDL0UsSUFBSSxDQUFDLEtBQUssR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDekUsSUFBSSxDQUFDLE9BQU8sR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDN0UsSUFBSSxDQUFDLE9BQU8sR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDakYsQ0FBQztJQUNMLHNCQUFDO0FBQUQsQ0FBQyxBQXRDRCxDQUFxQyxtQkFBbUIsR0FzQ3ZEOzs7O0lBckNHLGlDQUFlOztJQUNmLG1DQUFpQjs7SUFDakIsZ0NBQWM7O0lBQ2Qsa0NBQWdCOztJQUNoQixrQ0FBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCcG1uTW9kZWxKc29uSGVscGVyIH0gZnJvbSBcIi4uLy4uL0JwbW5Nb2RlbEpzb25IZWxwZXJcIjtcclxuaW1wb3J0IHsgSnNvbkNvbnZlcnRhYmxlSW1wbCB9IGZyb20gXCIuLi8uLi9Kc29uQ29udmVydGFibGVJbXBsXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgVXNlclBhcnRpY2lwYW50IGV4dGVuZHMgSnNvbkNvbnZlcnRhYmxlSW1wbCB7XHJcbiAgICB1c2VySWQ6IHN0cmluZztcclxuICAgIHVzZXJOYW1lOiBzdHJpbmc7XHJcbiAgICBvcmdJZDogc3RyaW5nO1xyXG4gICAgb3JnTmFtZTogc3RyaW5nO1xyXG4gICAgb3JnVHlwZTogc3RyaW5nID0gXCJTeXNcIjtcclxuXHJcbiAgICBwcm90ZWN0ZWQgUmVzZXRCZWZvcmVMb2FkRnJvbSgpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5SZXNldEJlZm9yZUxvYWRGcm9tKCk7XHJcblxyXG4gICAgICAgIHRoaXMudXNlcklkID0gbnVsbDtcclxuICAgICAgICB0aGlzLnVzZXJOYW1lID0gbnVsbDtcclxuICAgICAgICB0aGlzLm9yZ0lkID0gbnVsbDtcclxuICAgICAgICB0aGlzLm9yZ05hbWUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMub3JnVHlwZSA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIENvbnZlcnRUb0pzb25PYmplY3QoKToge30ge1xyXG4gICAgICAgIGxldCBvYmogPSBzdXBlci5Db252ZXJ0VG9Kc29uT2JqZWN0KCk7XHJcblxyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInVzZXJJZFwiLCB0aGlzLnVzZXJJZCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwidXNlck5hbWVcIiwgdGhpcy51c2VyTmFtZSk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwib3JnSWRcIiwgdGhpcy5vcmdJZCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwib3JnTmFtZVwiLCB0aGlzLm9yZ05hbWUpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIm9yZ1R5cGVcIiwgdGhpcy5vcmdUeXBlKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgTG9hZEZyb21Kc29uT2JqZWN0KG9iajoge30pOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuXHJcbiAgICAgICAgdGhpcy51c2VySWQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcInVzZXJJZFwiKTtcclxuICAgICAgICB0aGlzLnVzZXJOYW1lID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJ1c2VyTmFtZVwiKTtcclxuICAgICAgICB0aGlzLm9yZ0lkID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJvcmdJZFwiKTtcclxuICAgICAgICB0aGlzLm9yZ05hbWUgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcIm9yZ05hbWVcIik7XHJcbiAgICAgICAgdGhpcy5vcmdUeXBlID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJvcmdUeXBlXCIpO1xyXG4gICAgfVxyXG59Il19