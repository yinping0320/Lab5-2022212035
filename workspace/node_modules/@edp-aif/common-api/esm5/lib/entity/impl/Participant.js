/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModelJsonHelper } from "../../BpmnModelJsonHelper";
import { JsonConvertableImpl } from "../../JsonConvertableImpl";
import { ParticipantType } from "./ParticipantType";
import { PositionParticipant } from "./PositionParticipant";
import { UserParticipant } from "./UserParticipant";
var Participant = /** @class */ (function (_super) {
    tslib_1.__extends(Participant, _super);
    function Participant() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.participantType = ParticipantType.UserParticipant;
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    Participant.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.participantType = ParticipantType.UserParticipant;
        this.userParticipant = null;
        this.positionParticipant = null;
    };
    /**
     * @return {?}
     */
    Participant.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelJsonHelper.SetAttributeValue(obj, "participantType", this.participantType);
        BpmnModelJsonHelper.SetAttributeValue(obj, "userParticipant", this.userParticipant);
        BpmnModelJsonHelper.SetAttributeValue(obj, "positionParticipant", this.positionParticipant);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    Participant.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.participantType = ParticipantType[BpmnModelJsonHelper.GetAttributeValueAsString(obj, "participantType")];
        this.userParticipant = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "userParticipant", UserParticipant);
        this.positionParticipant = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "positionParticipant", PositionParticipant);
    };
    return Participant;
}(JsonConvertableImpl));
export { Participant };
if (false) {
    /** @type {?} */
    Participant.prototype.participantType;
    /** @type {?} */
    Participant.prototype.userParticipant;
    /** @type {?} */
    Participant.prototype.positionParticipant;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFydGljaXBhbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZWRwLWFpZi9jb21tb24tYXBpLyIsInNvdXJjZXMiOlsibGliL2VudGl0eS9pbXBsL1BhcnRpY2lwYW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDaEUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzVELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUVwRDtJQUFpQyx1Q0FBbUI7SUFBcEQ7UUFBQSxxRUE4QkM7UUE3QkcscUJBQWUsR0FBb0IsZUFBZSxDQUFDLGVBQWUsQ0FBQzs7SUE2QnZFLENBQUM7Ozs7O0lBekJhLHlDQUFtQjs7OztJQUE3QjtRQUNJLGlCQUFNLG1CQUFtQixXQUFFLENBQUM7UUFFNUIsSUFBSSxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUMsZUFBZSxDQUFDO1FBQ3ZELElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO1FBQzVCLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUM7SUFDcEMsQ0FBQzs7OztJQUVNLHlDQUFtQjs7O0lBQTFCOztZQUNRLEdBQUcsR0FBRyxpQkFBTSxtQkFBbUIsV0FBRTtRQUVyQyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3BGLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxpQkFBaUIsRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDcEYsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLHFCQUFxQixFQUFFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBRTVGLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7SUFFTSx3Q0FBa0I7Ozs7SUFBekIsVUFBMEIsR0FBTztRQUM3QixpQkFBTSxrQkFBa0IsWUFBQyxHQUFHLENBQUMsQ0FBQztRQUU5QixJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO1FBQzlHLElBQUksQ0FBQyxlQUFlLEdBQUcsbUJBQW1CLENBQUMsbUNBQW1DLENBQUMsR0FBRyxFQUFFLGlCQUFpQixFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBQ3hILElBQUksQ0FBQyxtQkFBbUIsR0FBRyxtQkFBbUIsQ0FBQyxtQ0FBbUMsQ0FBQyxHQUFHLEVBQUUscUJBQXFCLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztJQUN4SSxDQUFDO0lBQ0wsa0JBQUM7QUFBRCxDQUFDLEFBOUJELENBQWlDLG1CQUFtQixHQThCbkQ7Ozs7SUE3Qkcsc0NBQW1FOztJQUNuRSxzQ0FBaUM7O0lBQ2pDLDBDQUF5QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJwbW5Nb2RlbEpzb25IZWxwZXIgfSBmcm9tIFwiLi4vLi4vQnBtbk1vZGVsSnNvbkhlbHBlclwiO1xyXG5pbXBvcnQgeyBKc29uQ29udmVydGFibGVJbXBsIH0gZnJvbSBcIi4uLy4uL0pzb25Db252ZXJ0YWJsZUltcGxcIjtcclxuaW1wb3J0IHsgUGFydGljaXBhbnRUeXBlIH0gZnJvbSBcIi4vUGFydGljaXBhbnRUeXBlXCI7XHJcbmltcG9ydCB7IFBvc2l0aW9uUGFydGljaXBhbnQgfSBmcm9tIFwiLi9Qb3NpdGlvblBhcnRpY2lwYW50XCI7XHJcbmltcG9ydCB7IFVzZXJQYXJ0aWNpcGFudCB9IGZyb20gXCIuL1VzZXJQYXJ0aWNpcGFudFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBhcnRpY2lwYW50IGV4dGVuZHMgSnNvbkNvbnZlcnRhYmxlSW1wbCB7XHJcbiAgICBwYXJ0aWNpcGFudFR5cGU6IFBhcnRpY2lwYW50VHlwZSA9IFBhcnRpY2lwYW50VHlwZS5Vc2VyUGFydGljaXBhbnQ7XHJcbiAgICB1c2VyUGFydGljaXBhbnQ6IFVzZXJQYXJ0aWNpcGFudDtcclxuICAgIHBvc2l0aW9uUGFydGljaXBhbnQ6IFBvc2l0aW9uUGFydGljaXBhbnQ7XHJcblxyXG4gICAgcHJvdGVjdGVkIFJlc2V0QmVmb3JlTG9hZEZyb20oKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuUmVzZXRCZWZvcmVMb2FkRnJvbSgpO1xyXG5cclxuICAgICAgICB0aGlzLnBhcnRpY2lwYW50VHlwZSA9IFBhcnRpY2lwYW50VHlwZS5Vc2VyUGFydGljaXBhbnQ7XHJcbiAgICAgICAgdGhpcy51c2VyUGFydGljaXBhbnQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMucG9zaXRpb25QYXJ0aWNpcGFudCA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIENvbnZlcnRUb0pzb25PYmplY3QoKToge30ge1xyXG4gICAgICAgIGxldCBvYmogPSBzdXBlci5Db252ZXJ0VG9Kc29uT2JqZWN0KCk7XHJcblxyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInBhcnRpY2lwYW50VHlwZVwiLCB0aGlzLnBhcnRpY2lwYW50VHlwZSk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwidXNlclBhcnRpY2lwYW50XCIsIHRoaXMudXNlclBhcnRpY2lwYW50KTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJwb3NpdGlvblBhcnRpY2lwYW50XCIsIHRoaXMucG9zaXRpb25QYXJ0aWNpcGFudCk7XHJcblxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIExvYWRGcm9tSnNvbk9iamVjdChvYmo6IHt9KTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuTG9hZEZyb21Kc29uT2JqZWN0KG9iaik7XHJcblxyXG4gICAgICAgIHRoaXMucGFydGljaXBhbnRUeXBlID0gUGFydGljaXBhbnRUeXBlW0JwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwicGFydGljaXBhbnRUeXBlXCIpXTtcclxuICAgICAgICB0aGlzLnVzZXJQYXJ0aWNpcGFudCA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc0pzb25TZXJpYWxpemFibGUob2JqLCBcInVzZXJQYXJ0aWNpcGFudFwiLCBVc2VyUGFydGljaXBhbnQpO1xyXG4gICAgICAgIHRoaXMucG9zaXRpb25QYXJ0aWNpcGFudCA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc0pzb25TZXJpYWxpemFibGUob2JqLCBcInBvc2l0aW9uUGFydGljaXBhbnRcIiwgUG9zaXRpb25QYXJ0aWNpcGFudCk7XHJcbiAgICB9XHJcbn0iXX0=