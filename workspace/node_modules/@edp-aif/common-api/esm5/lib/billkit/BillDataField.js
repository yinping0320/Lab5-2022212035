/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BillDataFieldBase } from './BillDataFieldBase';
import { BillDataSubFields } from './BillDataSubFields';
import { BpmnModelJsonHelper } from '../BpmnModelJsonHelper';
import { BillDataSubField } from './BillDataSubField';
var BillDataField = /** @class */ (function (_super) {
    tslib_1.__extends(BillDataField, _super);
    function BillDataField() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.subFields = new BillDataSubFields();
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    BillDataField.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.subFields.Clear();
        this.attachedRow = null;
    };
    /**
     * @return {?}
     */
    BillDataField.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        var e_1, _a;
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        if (this.subFields.GetList().length > 0) {
            /** @type {?} */
            var subFields = [];
            try {
                for (var _b = tslib_1.__values(this.subFields.GetList()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var value = _c.value;
                    subFields.push(value.ConvertToJsonObject());
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            BpmnModelJsonHelper.SetAttributeValue(obj, "subFields", subFields);
        }
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    BillDataField.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var e_2, _a;
        _super.prototype.LoadFromJsonObject.call(this, obj);
        /** @type {?} */
        var subFields = BpmnModelJsonHelper.GetAttributeValue(obj, "subFields");
        if (subFields != null) {
            try {
                for (var subFields_1 = tslib_1.__values(subFields), subFields_1_1 = subFields_1.next(); !subFields_1_1.done; subFields_1_1 = subFields_1.next()) {
                    var item = subFields_1_1.value;
                    /** @type {?} */
                    var value = new BillDataSubField();
                    value.LoadFromJsonObject(item);
                    this.subFields.Add(value);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (subFields_1_1 && !subFields_1_1.done && (_a = subFields_1.return)) _a.call(subFields_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    BillDataField.prototype.AddSubField = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        this.subFields.Add(field);
    };
    /**
     * @return {?}
     */
    BillDataField.prototype.GetSubFieldMap = /**
     * @return {?}
     */
    function () {
        return this.subFields.GetMap();
    };
    /**
     * @return {?}
     */
    BillDataField.prototype.GetSubFieldList = /**
     * @return {?}
     */
    function () {
        return this.subFields.GetList();
    };
    return BillDataField;
}(BillDataFieldBase));
export { BillDataField };
if (false) {
    /** @type {?} */
    BillDataField.prototype.subFields;
    /** @type {?} */
    BillDataField.prototype.attachedRow;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmlsbERhdGFGaWVsZC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlZHAtYWlmL2NvbW1vbi1hcGkvIiwic291cmNlcyI6WyJsaWIvYmlsbGtpdC9CaWxsRGF0YUZpZWxkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDeEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFHdEQ7SUFBbUMseUNBQWlCO0lBQXBEO1FBQUEscUVBaURDO1FBaERHLGVBQVMsR0FBc0IsSUFBSSxpQkFBaUIsRUFBRSxDQUFDOztJQWdEM0QsQ0FBQzs7Ozs7SUE3Q2EsMkNBQW1COzs7O0lBQTdCO1FBQ0ksaUJBQU0sbUJBQW1CLFdBQUUsQ0FBQztRQUU1QixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO0lBQzVCLENBQUM7Ozs7SUFFTSwyQ0FBbUI7OztJQUExQjs7O1lBQ1EsR0FBRyxHQUFHLGlCQUFNLG1CQUFtQixXQUFFO1FBRXJDLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFOztnQkFDakMsU0FBUyxHQUFHLEVBQUU7O2dCQUNsQixLQUFrQixJQUFBLEtBQUEsaUJBQUEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQSxnQkFBQSw0QkFBRTtvQkFBdkMsSUFBSSxLQUFLLFdBQUE7b0JBQ1YsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDO2lCQUMvQzs7Ozs7Ozs7O1lBQ0QsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQztTQUN0RTtRQUVELE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7SUFFTSwwQ0FBa0I7Ozs7SUFBekIsVUFBMEIsR0FBTzs7UUFDN0IsaUJBQU0sa0JBQWtCLFlBQUMsR0FBRyxDQUFDLENBQUM7O1lBRTFCLFNBQVMsR0FBRyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDO1FBQ3ZFLElBQUksU0FBUyxJQUFJLElBQUksRUFBRTs7Z0JBQ25CLEtBQWlCLElBQUEsY0FBQSxpQkFBQSxTQUFTLENBQUEsb0NBQUEsMkRBQUU7b0JBQXZCLElBQUksSUFBSSxzQkFBQTs7d0JBQ0wsS0FBSyxHQUFHLElBQUksZ0JBQWdCLEVBQUU7b0JBQ2xDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDL0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQzdCOzs7Ozs7Ozs7U0FDSjtJQUNMLENBQUM7Ozs7O0lBRU0sbUNBQVc7Ozs7SUFBbEIsVUFBbUIsS0FBdUI7UUFDdEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUIsQ0FBQzs7OztJQUVNLHNDQUFjOzs7SUFBckI7UUFDSSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDbkMsQ0FBQzs7OztJQUVNLHVDQUFlOzs7SUFBdEI7UUFDSSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDcEMsQ0FBQztJQUNMLG9CQUFDO0FBQUQsQ0FBQyxBQWpERCxDQUFtQyxpQkFBaUIsR0FpRG5EOzs7O0lBaERHLGtDQUF1RDs7SUFDdkQsb0NBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmlsbERhdGFGaWVsZEJhc2UgfSBmcm9tICcuL0JpbGxEYXRhRmllbGRCYXNlJztcclxuaW1wb3J0IHsgQmlsbERhdGFTdWJGaWVsZHMgfSBmcm9tICcuL0JpbGxEYXRhU3ViRmllbGRzJztcclxuaW1wb3J0IHsgQnBtbk1vZGVsSnNvbkhlbHBlciB9IGZyb20gJy4uL0JwbW5Nb2RlbEpzb25IZWxwZXInO1xyXG5pbXBvcnQgeyBCaWxsRGF0YVN1YkZpZWxkIH0gZnJvbSAnLi9CaWxsRGF0YVN1YkZpZWxkJztcclxuaW1wb3J0IHsgQmlsbERhdGFSb3cgfSBmcm9tICcuL0JpbGxEYXRhUm93JztcclxuXHJcbmV4cG9ydCBjbGFzcyBCaWxsRGF0YUZpZWxkIGV4dGVuZHMgQmlsbERhdGFGaWVsZEJhc2Uge1xyXG4gICAgc3ViRmllbGRzOiBCaWxsRGF0YVN1YkZpZWxkcyA9IG5ldyBCaWxsRGF0YVN1YkZpZWxkcygpO1xyXG4gICAgYXR0YWNoZWRSb3c6IEJpbGxEYXRhUm93O1xyXG5cclxuICAgIHByb3RlY3RlZCBSZXNldEJlZm9yZUxvYWRGcm9tKCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLlJlc2V0QmVmb3JlTG9hZEZyb20oKTtcclxuXHJcbiAgICAgICAgdGhpcy5zdWJGaWVsZHMuQ2xlYXIoKTtcclxuICAgICAgICB0aGlzLmF0dGFjaGVkUm93ID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgQ29udmVydFRvSnNvbk9iamVjdCgpOiB7fSB7XHJcbiAgICAgICAgbGV0IG9iaiA9IHN1cGVyLkNvbnZlcnRUb0pzb25PYmplY3QoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc3ViRmllbGRzLkdldExpc3QoKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGxldCBzdWJGaWVsZHMgPSBbXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgdmFsdWUgb2YgdGhpcy5zdWJGaWVsZHMuR2V0TGlzdCgpKSB7XHJcbiAgICAgICAgICAgICAgICBzdWJGaWVsZHMucHVzaCh2YWx1ZS5Db252ZXJ0VG9Kc29uT2JqZWN0KCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInN1YkZpZWxkc1wiLCBzdWJGaWVsZHMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgTG9hZEZyb21Kc29uT2JqZWN0KG9iajoge30pOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuXHJcbiAgICAgICAgbGV0IHN1YkZpZWxkcyA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInN1YkZpZWxkc1wiKTtcclxuICAgICAgICBpZiAoc3ViRmllbGRzICE9IG51bGwpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaXRlbSBvZiBzdWJGaWVsZHMpIHtcclxuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IG5ldyBCaWxsRGF0YVN1YkZpZWxkKCk7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZS5Mb2FkRnJvbUpzb25PYmplY3QoaXRlbSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN1YkZpZWxkcy5BZGQodmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBBZGRTdWJGaWVsZChmaWVsZDogQmlsbERhdGFTdWJGaWVsZCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuc3ViRmllbGRzLkFkZChmaWVsZCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIEdldFN1YkZpZWxkTWFwKCk6IHsgW2tleTogc3RyaW5nXTogQmlsbERhdGFTdWJGaWVsZDsgfSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3ViRmllbGRzLkdldE1hcCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBHZXRTdWJGaWVsZExpc3QoKTogQmlsbERhdGFTdWJGaWVsZFtdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdWJGaWVsZHMuR2V0TGlzdCgpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==