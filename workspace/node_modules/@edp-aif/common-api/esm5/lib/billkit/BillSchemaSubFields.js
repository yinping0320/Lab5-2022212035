/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var BillSchemaSubFields = /** @class */ (function () {
    function BillSchemaSubFields() {
        this._map = {};
        this._list = new Array();
    }
    Object.defineProperty(BillSchemaSubFields.prototype, "map", {
        get: /**
         * @return {?}
         */
        function () {
            return this._map;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BillSchemaSubFields.prototype, "list", {
        get: /**
         * @return {?}
         */
        function () {
            return this._list;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} row
     * @return {?}
     */
    BillSchemaSubFields.prototype.Add = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        this._map[row.fieldName] = row;
        this._list.push(row);
    };
    /**
     * @param {?} row
     * @return {?}
     */
    BillSchemaSubFields.prototype.Remove = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        /** @type {?} */
        var bak = this._map[row.fieldName];
        delete this._map[row.fieldName];
        for (var i = 0; i < this._list.length; i++) {
            if (this._list[i].fieldName == bak.fieldName) {
                this._list.splice(i, 1);
                return true;
            }
        }
        return false;
    };
    /**
     * @return {?}
     */
    BillSchemaSubFields.prototype.Clear = /**
     * @return {?}
     */
    function () {
        this._map = {};
        this._list.length = 0;
    };
    /**
     * @return {?}
     */
    BillSchemaSubFields.prototype.GetMap = /**
     * @return {?}
     */
    function () {
        return this._map;
    };
    /**
     * @return {?}
     */
    BillSchemaSubFields.prototype.GetList = /**
     * @return {?}
     */
    function () {
        return this._list;
    };
    return BillSchemaSubFields;
}());
export { BillSchemaSubFields };
if (false) {
    /**
     * @type {?}
     * @private
     */
    BillSchemaSubFields.prototype._map;
    /**
     * @type {?}
     * @private
     */
    BillSchemaSubFields.prototype._list;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmlsbFNjaGVtYVN1YkZpZWxkcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlZHAtYWlmL2NvbW1vbi1hcGkvIiwic291cmNlcyI6WyJsaWIvYmlsbGtpdC9CaWxsU2NoZW1hU3ViRmllbGRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQTtJQUFBO1FBQ1ksU0FBSSxHQUEwQyxFQUFFLENBQUM7UUFDakQsVUFBSyxHQUE4QixJQUFJLEtBQUssRUFBRSxDQUFDO0lBeUMzRCxDQUFDO0lBdkNHLHNCQUFJLG9DQUFHOzs7O1FBQVA7WUFDSSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDckIsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSxxQ0FBSTs7OztRQUFSO1lBQ0ksT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3RCLENBQUM7OztPQUFBOzs7OztJQUVNLGlDQUFHOzs7O0lBQVYsVUFBVyxHQUF1QjtRQUM5QixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDL0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDekIsQ0FBQzs7Ozs7SUFFTSxvQ0FBTTs7OztJQUFiLFVBQWMsR0FBdUI7O1lBQzNCLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUM7UUFDcEMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUVoQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDeEMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsSUFBSSxHQUFHLENBQUMsU0FBUyxFQUFFO2dCQUMxQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hCLE9BQU8sSUFBSSxDQUFDO2FBQ2Y7U0FDSjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7Ozs7SUFFTSxtQ0FBSzs7O0lBQVo7UUFDSSxJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUNmLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUMxQixDQUFDOzs7O0lBRU0sb0NBQU07OztJQUFiO1FBQ0ksT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3JCLENBQUM7Ozs7SUFFTSxxQ0FBTzs7O0lBQWQ7UUFDSSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUNMLDBCQUFDO0FBQUQsQ0FBQyxBQTNDRCxJQTJDQzs7Ozs7OztJQTFDRyxtQ0FBeUQ7Ozs7O0lBQ3pELG9DQUF1RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJpbGxTY2hlbWFTdWJGaWVsZCB9IGZyb20gJy4vQmlsbFNjaGVtYVN1YkZpZWxkJztcclxuXHJcbmV4cG9ydCBjbGFzcyBCaWxsU2NoZW1hU3ViRmllbGRzIHtcclxuICAgIHByaXZhdGUgX21hcDogeyBba2V5OiBzdHJpbmddOiBCaWxsU2NoZW1hU3ViRmllbGQgfSA9IHt9O1xyXG4gICAgcHJpdmF0ZSBfbGlzdDogQXJyYXk8QmlsbFNjaGVtYVN1YkZpZWxkPiA9IG5ldyBBcnJheSgpO1xyXG5cclxuICAgIGdldCBtYXAoKTogeyBba2V5OiBzdHJpbmddOiBCaWxsU2NoZW1hU3ViRmllbGQgfSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hcDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbGlzdCgpOiBBcnJheTxCaWxsU2NoZW1hU3ViRmllbGQ+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbGlzdDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgQWRkKHJvdzogQmlsbFNjaGVtYVN1YkZpZWxkKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5fbWFwW3Jvdy5maWVsZE5hbWVdID0gcm93O1xyXG4gICAgICAgIHRoaXMuX2xpc3QucHVzaChyb3cpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBSZW1vdmUocm93OiBCaWxsU2NoZW1hU3ViRmllbGQpOiBib29sZWFuIHtcclxuICAgICAgICBjb25zdCBiYWsgPSB0aGlzLl9tYXBbcm93LmZpZWxkTmFtZV07XHJcbiAgICAgICAgZGVsZXRlIHRoaXMuX21hcFtyb3cuZmllbGROYW1lXTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9saXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9saXN0W2ldLmZpZWxkTmFtZSA9PSBiYWsuZmllbGROYW1lKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9saXN0LnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIENsZWFyKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX21hcCA9IHt9O1xyXG4gICAgICAgIHRoaXMuX2xpc3QubGVuZ3RoID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgR2V0TWFwKCk6IHsgW2tleTogc3RyaW5nXTogQmlsbFNjaGVtYVN1YkZpZWxkIH0ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9tYXA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIEdldExpc3QoKTogQXJyYXk8QmlsbFNjaGVtYVN1YkZpZWxkPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xpc3Q7XHJcbiAgICB9XHJcbn1cclxuIl19