/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { JsonConvertableImpl } from '../JsonConvertableImpl';
import { BpmnModelJsonHelper } from '../BpmnModelJsonHelper';
import { BillDataField } from './BillDataField';
import { BillDataFields } from './BillDataFields';
import { BillDataTables } from './BillDataTables';
import { BillDataTable } from './BillDataTable';
import { BillDataRowPersistenceType } from './BillDataRowPersistenceType';
var BillDataRow = /** @class */ (function (_super) {
    tslib_1.__extends(BillDataRow, _super);
    function BillDataRow() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.fields = new BillDataFields();
        _this.childTables = new BillDataTables();
        _this.persistenceType = BillDataRowPersistenceType.Unchanged;
        return _this;
        //public String getDataIdPath()
        //{
        //    return dataId;
        //}
    }
    /**
     * @protected
     * @return {?}
     */
    BillDataRow.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.dataId = null;
        this.fields.Clear();
        this.childTables.Clear();
        this.attachedTable = null;
        this.persistenceType = BillDataRowPersistenceType.Unchanged;
    };
    /**
     * @return {?}
     */
    BillDataRow.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        var e_1, _a, e_2, _b;
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelJsonHelper.SetAttributeValue(obj, "dataId", this.dataId);
        if (this.persistenceType != BillDataRowPersistenceType.Unchanged) {
            BpmnModelJsonHelper.SetAttributeValue(obj, "persist", this.persistenceType);
        }
        /** @type {?} */
        var fields = [];
        try {
            for (var _c = tslib_1.__values(this.fields.GetList()), _d = _c.next(); !_d.done; _d = _c.next()) {
                var value = _d.value;
                fields.push(value.ConvertToJsonObject());
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
        BpmnModelJsonHelper.SetAttributeValue(obj, "fields", fields);
        if (this.childTables.GetList().length > 0) {
            /** @type {?} */
            var childTables = [];
            try {
                for (var _e = tslib_1.__values(this.childTables.GetList()), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var value = _f.value;
                    childTables.push(value.ConvertToJsonObject());
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_2) throw e_2.error; }
            }
            BpmnModelJsonHelper.SetAttributeValue(obj, "childTables", childTables);
        }
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    BillDataRow.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var e_3, _a, e_4, _b;
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.dataId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "dataId");
        /** @type {?} */
        var persistenceType = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "persist");
        if (persistenceType != null) {
            this.persistenceType = BillDataRowPersistenceType[persistenceType];
        }
        /** @type {?} */
        var fields = BpmnModelJsonHelper.GetAttributeValue(obj, "fields");
        try {
            for (var fields_1 = tslib_1.__values(fields), fields_1_1 = fields_1.next(); !fields_1_1.done; fields_1_1 = fields_1.next()) {
                var item = fields_1_1.value;
                /** @type {?} */
                var value = new BillDataField();
                value.LoadFromJsonObject(item);
                this.fields.Add(value);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (fields_1_1 && !fields_1_1.done && (_a = fields_1.return)) _a.call(fields_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        /** @type {?} */
        var childTables = BpmnModelJsonHelper.GetAttributeValue(obj, "childTables");
        if (childTables != null) {
            try {
                for (var childTables_1 = tslib_1.__values(childTables), childTables_1_1 = childTables_1.next(); !childTables_1_1.done; childTables_1_1 = childTables_1.next()) {
                    var item = childTables_1_1.value;
                    /** @type {?} */
                    var value = new BillDataTable();
                    value.LoadFromJsonObject(item);
                    this.childTables.Add(value);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (childTables_1_1 && !childTables_1_1.done && (_b = childTables_1.return)) _b.call(childTables_1);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
    };
    /**
     * @return {?}
     */
    BillDataRow.prototype.GetFieldMap = /**
     * @return {?}
     */
    function () {
        return this.fields.GetMap();
    };
    /**
     * @return {?}
     */
    BillDataRow.prototype.GetFieldList = /**
     * @return {?}
     */
    function () {
        return this.fields.GetList();
    };
    /**
     * @return {?}
     */
    BillDataRow.prototype.GetChildTableMap = /**
     * @return {?}
     */
    function () {
        return this.childTables.GetMap();
    };
    /**
     * @return {?}
     */
    BillDataRow.prototype.GetChildTableList = /**
     * @return {?}
     */
    function () {
        return this.childTables.GetList();
    };
    /**
     * @param {?} field
     * @return {?}
     */
    BillDataRow.prototype.AddField = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        this.fields.Add(field);
    };
    /**
     * @param {?} table
     * @return {?}
     */
    BillDataRow.prototype.AddChildTable = /**
     * @param {?} table
     * @return {?}
     */
    function (table) {
        this.childTables.Add(table);
    };
    return BillDataRow;
}(JsonConvertableImpl));
export { BillDataRow };
if (false) {
    /** @type {?} */
    BillDataRow.prototype.dataId;
    /** @type {?} */
    BillDataRow.prototype.fields;
    /** @type {?} */
    BillDataRow.prototype.childTables;
    /** @type {?} */
    BillDataRow.prototype.attachedTable;
    /** @type {?} */
    BillDataRow.prototype.persistenceType;
}
//# sourceMappingURL=data:application/json;base64,