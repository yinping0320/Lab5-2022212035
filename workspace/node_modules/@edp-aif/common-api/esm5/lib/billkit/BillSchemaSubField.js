/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BillSchemaFieldBase } from './BillSchemaFieldBase';
import { BillSchemaSubFields } from './BillSchemaSubFields';
import { BpmnModelJsonHelper } from '../BpmnModelJsonHelper';
var BillSchemaSubField = /** @class */ (function (_super) {
    tslib_1.__extends(BillSchemaSubField, _super);
    function BillSchemaSubField() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.subFields = new BillSchemaSubFields();
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    BillSchemaSubField.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.subFields.Clear();
        this.attachedField = null;
    };
    /**
     * @return {?}
     */
    BillSchemaSubField.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        var e_1, _a;
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        if (this.subFields.GetList().length > 0) {
            /** @type {?} */
            var subFields = [];
            try {
                for (var _b = tslib_1.__values(this.subFields.GetList()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var value = _c.value;
                    subFields.push(value.ConvertToJsonObject());
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            BpmnModelJsonHelper.SetAttributeValue(obj, "subFields", subFields);
        }
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    BillSchemaSubField.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var e_2, _a;
        _super.prototype.LoadFromJsonObject.call(this, obj);
        /** @type {?} */
        var subFields = BpmnModelJsonHelper.GetAttributeValue(obj, "subFields");
        if (subFields != null) {
            try {
                for (var subFields_1 = tslib_1.__values(subFields), subFields_1_1 = subFields_1.next(); !subFields_1_1.done; subFields_1_1 = subFields_1.next()) {
                    var item = subFields_1_1.value;
                    /** @type {?} */
                    var value = new BillSchemaSubField();
                    value.LoadFromJsonObject(item);
                    this.subFields.Add(value);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (subFields_1_1 && !subFields_1_1.done && (_a = subFields_1.return)) _a.call(subFields_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    BillSchemaSubField.prototype.AddSubField = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        this.subFields.Add(field);
    };
    /**
     * @return {?}
     */
    BillSchemaSubField.prototype.GetSubFieldMap = /**
     * @return {?}
     */
    function () {
        return this.subFields.GetMap();
    };
    /**
     * @return {?}
     */
    BillSchemaSubField.prototype.GetSubFieldList = /**
     * @return {?}
     */
    function () {
        return this.subFields.GetList();
    };
    return BillSchemaSubField;
}(BillSchemaFieldBase));
export { BillSchemaSubField };
if (false) {
    /** @type {?} */
    BillSchemaSubField.prototype.subFields;
    /** @type {?} */
    BillSchemaSubField.prototype.attachedField;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmlsbFNjaGVtYVN1YkZpZWxkLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVkcC1haWYvY29tbW9uLWFwaS8iLCJzb3VyY2VzIjpbImxpYi9iaWxsa2l0L0JpbGxTY2hlbWFTdWJGaWVsZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzVELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzVELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRTdEO0lBQXdDLDhDQUFtQjtJQUEzRDtRQUFBLHFFQWlEQztRQWhERyxlQUFTLEdBQXdCLElBQUksbUJBQW1CLEVBQUUsQ0FBQzs7SUFnRC9ELENBQUM7Ozs7O0lBN0NhLGdEQUFtQjs7OztJQUE3QjtRQUNJLGlCQUFNLG1CQUFtQixXQUFFLENBQUM7UUFFNUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztJQUM5QixDQUFDOzs7O0lBRU0sZ0RBQW1COzs7SUFBMUI7OztZQUNRLEdBQUcsR0FBRyxpQkFBTSxtQkFBbUIsV0FBRTtRQUVyQyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTs7Z0JBQ2pDLFNBQVMsR0FBVSxFQUFFOztnQkFDekIsS0FBa0IsSUFBQSxLQUFBLGlCQUFBLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUEsZ0JBQUEsNEJBQUU7b0JBQXZDLElBQUksS0FBSyxXQUFBO29CQUNWLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLG1CQUFtQixFQUFFLENBQUMsQ0FBQztpQkFDL0M7Ozs7Ozs7OztZQUNELG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUM7U0FDdEU7UUFFRCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7Ozs7O0lBRU0sK0NBQWtCOzs7O0lBQXpCLFVBQTBCLEdBQU87O1FBQzdCLGlCQUFNLGtCQUFrQixZQUFDLEdBQUcsQ0FBQyxDQUFDOztZQUUxQixTQUFTLEdBQVUsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFdBQVcsQ0FBQztRQUM5RSxJQUFJLFNBQVMsSUFBSSxJQUFJLEVBQUU7O2dCQUNuQixLQUFpQixJQUFBLGNBQUEsaUJBQUEsU0FBUyxDQUFBLG9DQUFBLDJEQUFFO29CQUF2QixJQUFJLElBQUksc0JBQUE7O3dCQUNMLEtBQUssR0FBRyxJQUFJLGtCQUFrQixFQUFFO29CQUNwQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQy9CLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO2lCQUM3Qjs7Ozs7Ozs7O1NBQ0o7SUFDTCxDQUFDOzs7OztJQUVNLHdDQUFXOzs7O0lBQWxCLFVBQW1CLEtBQXlCO1FBQ3hDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlCLENBQUM7Ozs7SUFFTSwyQ0FBYzs7O0lBQXJCO1FBQ0ksT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ25DLENBQUM7Ozs7SUFFTSw0Q0FBZTs7O0lBQXRCO1FBQ0ksT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3BDLENBQUM7SUFDTCx5QkFBQztBQUFELENBQUMsQUFqREQsQ0FBd0MsbUJBQW1CLEdBaUQxRDs7OztJQWhERyx1Q0FBMkQ7O0lBQzNELDJDQUFtQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJpbGxTY2hlbWFGaWVsZEJhc2UgfSBmcm9tICcuL0JpbGxTY2hlbWFGaWVsZEJhc2UnO1xyXG5pbXBvcnQgeyBCaWxsU2NoZW1hU3ViRmllbGRzIH0gZnJvbSAnLi9CaWxsU2NoZW1hU3ViRmllbGRzJztcclxuaW1wb3J0IHsgQnBtbk1vZGVsSnNvbkhlbHBlciB9IGZyb20gJy4uL0JwbW5Nb2RlbEpzb25IZWxwZXInO1xyXG5cclxuZXhwb3J0IGNsYXNzIEJpbGxTY2hlbWFTdWJGaWVsZCBleHRlbmRzIEJpbGxTY2hlbWFGaWVsZEJhc2Uge1xyXG4gICAgc3ViRmllbGRzOiBCaWxsU2NoZW1hU3ViRmllbGRzID0gbmV3IEJpbGxTY2hlbWFTdWJGaWVsZHMoKTtcclxuICAgIGF0dGFjaGVkRmllbGQ6IEJpbGxTY2hlbWFGaWVsZEJhc2U7XHJcblxyXG4gICAgcHJvdGVjdGVkIFJlc2V0QmVmb3JlTG9hZEZyb20oKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuUmVzZXRCZWZvcmVMb2FkRnJvbSgpO1xyXG5cclxuICAgICAgICB0aGlzLnN1YkZpZWxkcy5DbGVhcigpO1xyXG4gICAgICAgIHRoaXMuYXR0YWNoZWRGaWVsZCA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIENvbnZlcnRUb0pzb25PYmplY3QoKToge30ge1xyXG4gICAgICAgIGxldCBvYmogPSBzdXBlci5Db252ZXJ0VG9Kc29uT2JqZWN0KCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnN1YkZpZWxkcy5HZXRMaXN0KCkubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBsZXQgc3ViRmllbGRzOiBhbnlbXSA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCB2YWx1ZSBvZiB0aGlzLnN1YkZpZWxkcy5HZXRMaXN0KCkpIHtcclxuICAgICAgICAgICAgICAgIHN1YkZpZWxkcy5wdXNoKHZhbHVlLkNvbnZlcnRUb0pzb25PYmplY3QoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwic3ViRmllbGRzXCIsIHN1YkZpZWxkcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBMb2FkRnJvbUpzb25PYmplY3Qob2JqOiB7fSk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG5cclxuICAgICAgICBsZXQgc3ViRmllbGRzOiBhbnlbXSA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInN1YkZpZWxkc1wiKTtcclxuICAgICAgICBpZiAoc3ViRmllbGRzICE9IG51bGwpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaXRlbSBvZiBzdWJGaWVsZHMpIHtcclxuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IG5ldyBCaWxsU2NoZW1hU3ViRmllbGQoKTtcclxuICAgICAgICAgICAgICAgIHZhbHVlLkxvYWRGcm9tSnNvbk9iamVjdChpdGVtKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3ViRmllbGRzLkFkZCh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIEFkZFN1YkZpZWxkKGZpZWxkOiBCaWxsU2NoZW1hU3ViRmllbGQpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnN1YkZpZWxkcy5BZGQoZmllbGQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBHZXRTdWJGaWVsZE1hcCgpOiB7IFtrZXk6IHN0cmluZ106IEJpbGxTY2hlbWFTdWJGaWVsZCB9IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdWJGaWVsZHMuR2V0TWFwKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIEdldFN1YkZpZWxkTGlzdCgpOiBBcnJheTxCaWxsU2NoZW1hU3ViRmllbGQ+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdWJGaWVsZHMuR2V0TGlzdCgpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==