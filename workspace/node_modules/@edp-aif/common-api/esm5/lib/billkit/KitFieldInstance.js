/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { KitField } from './KitField';
import { DataTypeStoreImpl } from './DataTypeStoreImpl';
import { ExtensionMethod } from '../ExtensionMethod';
/**
 * @abstract
 */
var /**
 * @abstract
 */
KitFieldInstance = /** @class */ (function (_super) {
    tslib_1.__extends(KitFieldInstance, _super);
    function KitFieldInstance(fieldName, fieldValue) {
        var _this = _super.call(this) || this;
        _this.fieldStore = new DataTypeStoreImpl();
        _this.fieldName = fieldName;
        _this.SetFieldValue(fieldValue);
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    KitFieldInstance.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.fieldStore = new DataTypeStoreImpl();
    };
    /**
     * @return {?}
     */
    KitFieldInstance.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        if ("base.string" != this.fieldStore.converterName) {
            ExtensionMethod.setAttributeValue(obj, "conv", this.fieldStore.converterName);
        }
        if (this.fieldStore.textValue != null) {
            ExtensionMethod.setAttributeValue(obj, "value", this.fieldStore.textValue);
        }
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    KitFieldInstance.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        /** @type {?} */
        var conv = ExtensionMethod.getAttributeValue4String(obj, 'conv');
        if (conv == null) {
            conv = "base.string";
        }
        this.fieldStore.converterName = conv;
        /** @type {?} */
        var text = ExtensionMethod.getAttributeValue4String(obj, "value");
        if (text != null) {
            this.fieldStore.textValue = text;
        }
    };
    /**
     * @return {?}
     */
    KitFieldInstance.prototype.GetFieldValue = /**
     * @return {?}
     */
    function () {
        return this.fieldStore.dataValue;
    };
    /**
     * @param {?} fieldValue
     * @return {?}
     */
    KitFieldInstance.prototype.SetFieldValue = /**
     * @param {?} fieldValue
     * @return {?}
     */
    function (fieldValue) {
        this.fieldStore.dataValue = fieldValue;
    };
    /**
     * @return {?}
     */
    KitFieldInstance.prototype.GetTextValue = /**
     * @return {?}
     */
    function () {
        return this.fieldStore.textValue;
    };
    return KitFieldInstance;
}(KitField));
/**
 * @abstract
 */
export { KitFieldInstance };
if (false) {
    /**
     * @type {?}
     * @private
     */
    KitFieldInstance.prototype.fieldStore;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiS2l0RmllbGRJbnN0YW5jZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlZHAtYWlmL2NvbW1vbi1hcGkvIiwic291cmNlcyI6WyJsaWIvYmlsbGtpdC9LaXRGaWVsZEluc3RhbmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN0QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7Ozs7QUFFckQ7Ozs7SUFBK0MsNENBQVE7SUFHbkQsMEJBQW1CLFNBQWtCLEVBQUUsVUFBZ0I7UUFBdkQsWUFDSSxpQkFBTyxTQUdWO1FBTk8sZ0JBQVUsR0FBc0IsSUFBSSxpQkFBaUIsRUFBRSxDQUFDO1FBSTVELEtBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLEtBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7O0lBQ25DLENBQUM7Ozs7O0lBRVMsOENBQW1COzs7O0lBQTdCO1FBQ0ksaUJBQU0sbUJBQW1CLFdBQUUsQ0FBQztRQUU1QixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksaUJBQWlCLEVBQUUsQ0FBQztJQUM5QyxDQUFDOzs7O0lBRU0sOENBQW1COzs7SUFBMUI7O1lBQ1EsR0FBRyxHQUFHLGlCQUFNLG1CQUFtQixXQUFFO1FBRXJDLElBQUksYUFBYSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFO1lBQ2hELGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDakY7UUFDRCxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxJQUFJLElBQUksRUFBRTtZQUNuQyxlQUFlLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQzlFO1FBR0QsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVNLDZDQUFrQjs7OztJQUF6QixVQUEwQixHQUFPO1FBQzdCLGlCQUFNLGtCQUFrQixZQUFDLEdBQUcsQ0FBQyxDQUFDOztZQUUxQixJQUFJLEdBQUcsZUFBZSxDQUFDLHdCQUF3QixDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUM7UUFDaEUsSUFBSSxJQUFJLElBQUksSUFBSSxFQUFFO1lBQ2QsSUFBSSxHQUFHLGFBQWEsQ0FBQztTQUN4QjtRQUNELElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQzs7WUFFakMsSUFBSSxHQUFHLGVBQWUsQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDO1FBQ2pFLElBQUksSUFBSSxJQUFJLElBQUksRUFBRTtZQUNkLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztTQUNwQztJQUVMLENBQUM7Ozs7SUFFTSx3Q0FBYTs7O0lBQXBCO1FBQ0ksT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQztJQUNyQyxDQUFDOzs7OztJQUVNLHdDQUFhOzs7O0lBQXBCLFVBQXFCLFVBQWU7UUFDaEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEdBQUcsVUFBVSxDQUFDO0lBQzNDLENBQUM7Ozs7SUFFTSx1Q0FBWTs7O0lBQW5CO1FBQ0ksT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQztJQUNyQyxDQUFDO0lBQ0wsdUJBQUM7QUFBRCxDQUFDLEFBeERELENBQStDLFFBQVEsR0F3RHREOzs7Ozs7Ozs7O0lBdkRHLHNDQUFnRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEtpdEZpZWxkIH0gZnJvbSAnLi9LaXRGaWVsZCc7XHJcbmltcG9ydCB7IERhdGFUeXBlU3RvcmVJbXBsIH0gZnJvbSAnLi9EYXRhVHlwZVN0b3JlSW1wbCc7XHJcbmltcG9ydCB7IEV4dGVuc2lvbk1ldGhvZCB9IGZyb20gJy4uL0V4dGVuc2lvbk1ldGhvZCc7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgS2l0RmllbGRJbnN0YW5jZSBleHRlbmRzIEtpdEZpZWxkIHtcclxuICAgIHByaXZhdGUgZmllbGRTdG9yZTogRGF0YVR5cGVTdG9yZUltcGwgPSBuZXcgRGF0YVR5cGVTdG9yZUltcGwoKTtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoZmllbGROYW1lPzogc3RyaW5nLCBmaWVsZFZhbHVlPzogYW55KSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLmZpZWxkTmFtZSA9IGZpZWxkTmFtZTtcclxuICAgICAgICB0aGlzLlNldEZpZWxkVmFsdWUoZmllbGRWYWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIFJlc2V0QmVmb3JlTG9hZEZyb20oKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuUmVzZXRCZWZvcmVMb2FkRnJvbSgpO1xyXG5cclxuICAgICAgICB0aGlzLmZpZWxkU3RvcmUgPSBuZXcgRGF0YVR5cGVTdG9yZUltcGwoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgQ29udmVydFRvSnNvbk9iamVjdCgpOiB7fSB7XHJcbiAgICAgICAgbGV0IG9iaiA9IHN1cGVyLkNvbnZlcnRUb0pzb25PYmplY3QoKTtcclxuXHJcbiAgICAgICAgaWYgKFwiYmFzZS5zdHJpbmdcIiAhPSB0aGlzLmZpZWxkU3RvcmUuY29udmVydGVyTmFtZSkge1xyXG4gICAgICAgICAgICBFeHRlbnNpb25NZXRob2Quc2V0QXR0cmlidXRlVmFsdWUob2JqLCBcImNvbnZcIiwgdGhpcy5maWVsZFN0b3JlLmNvbnZlcnRlck5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5maWVsZFN0b3JlLnRleHRWYWx1ZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIEV4dGVuc2lvbk1ldGhvZC5zZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwidmFsdWVcIiwgdGhpcy5maWVsZFN0b3JlLnRleHRWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgTG9hZEZyb21Kc29uT2JqZWN0KG9iajoge30pOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuXHJcbiAgICAgICAgbGV0IGNvbnYgPSBFeHRlbnNpb25NZXRob2QuZ2V0QXR0cmlidXRlVmFsdWU0U3RyaW5nKG9iaiwgJ2NvbnYnKTtcclxuICAgICAgICBpZiAoY29udiA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGNvbnYgPSBcImJhc2Uuc3RyaW5nXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZmllbGRTdG9yZS5jb252ZXJ0ZXJOYW1lID0gY29udjtcclxuXHJcbiAgICAgICAgbGV0IHRleHQgPSBFeHRlbnNpb25NZXRob2QuZ2V0QXR0cmlidXRlVmFsdWU0U3RyaW5nKG9iaiwgXCJ2YWx1ZVwiKTtcclxuICAgICAgICBpZiAodGV4dCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmllbGRTdG9yZS50ZXh0VmFsdWUgPSB0ZXh0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIEdldEZpZWxkVmFsdWUoKTogYW55IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5maWVsZFN0b3JlLmRhdGFWYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgU2V0RmllbGRWYWx1ZShmaWVsZFZhbHVlOiBhbnkpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmZpZWxkU3RvcmUuZGF0YVZhbHVlID0gZmllbGRWYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgR2V0VGV4dFZhbHVlKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmllbGRTdG9yZS50ZXh0VmFsdWU7XHJcbiAgICB9XHJcbn0iXX0=