/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
var BpmnModelJsonHelper = /** @class */ (function () {
    function BpmnModelJsonHelper() {
    }
    /**
     * @param {?} obj
     * @param {?} attributeName
     * @return {?}
     */
    BpmnModelJsonHelper.GetAttributeValue = /**
     * @param {?} obj
     * @param {?} attributeName
     * @return {?}
     */
    function (obj, attributeName) {
        if (obj == null) {
            return null;
        }
        if (obj.hasOwnProperty(attributeName)) {
            return obj[attributeName];
        }
        else {
            return null;
        }
    };
    /**
     * @template T
     * @param {?} obj
     * @param {?} attributeName
     * @param {?} value
     * @return {?}
     */
    BpmnModelJsonHelper.SetAttributeValue = /**
     * @template T
     * @param {?} obj
     * @param {?} attributeName
     * @param {?} value
     * @return {?}
     */
    function (obj, attributeName, value) {
        var e_1, _a;
        if (obj == null || value == null)
            return;
        /** @type {?} */
        var jsonArray = [];
        if (value instanceof Array) {
            try {
                //判断是否为IJsonSerializable实现类的数组，是则全部调用ConvertToJsonObject序列化，否则直接赋值
                for (var value_1 = tslib_1.__values(value), value_1_1 = value_1.next(); !value_1_1.done; value_1_1 = value_1.next()) {
                    var item = value_1_1.value;
                    if (item["ConvertToJsonObject"] != null && item["LoadFromJsonObject"] != null) {
                        jsonArray.push(item.ConvertToJsonObject());
                    }
                    else {
                        break;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (value_1_1 && !value_1_1.done && (_a = value_1.return)) _a.call(value_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (jsonArray.length == value.length) {
                obj[attributeName] = jsonArray;
            }
            else {
                obj[attributeName] = value;
            }
        }
        else if (value["ConvertToJsonObject"] != null && value["LoadFromJsonObject"] != null) {
            //判断是否为IJsonSerializable实现类的对象，是则调用ConvertToJsonObject序列化
            obj[attributeName] = ((/** @type {?} */ (value))).ConvertToJsonObject();
        }
        else if (value instanceof Date) {
            //判断是否为日期类型，是日期类型则转为字符串UTC的yyyyMMDDhhmmssSSS格式字符串
            /** @type {?} */
            var str = BpmnModelJsonHelper.DateTimeToString(value);
            BpmnModelJsonHelper.SetAttributeValue(obj, attributeName, str);
        }
        else {
            obj[attributeName] = value;
        }
    };
    /**
     * @param {?} obj
     * @param {?} attributeName
     * @return {?}
     */
    BpmnModelJsonHelper.GetAttributeValueAsString = /**
     * @param {?} obj
     * @param {?} attributeName
     * @return {?}
     */
    function (obj, attributeName) {
        if (obj == null) {
            return null;
        }
        if (obj.hasOwnProperty(attributeName) == true && typeof (obj[attributeName]) == "string") {
            return obj[attributeName];
        }
        return null;
    };
    /**
     * @param {?} obj
     * @param {?} attributeName
     * @return {?}
     */
    BpmnModelJsonHelper.GetAttributeValueAsBoolean = /**
     * @param {?} obj
     * @param {?} attributeName
     * @return {?}
     */
    function (obj, attributeName) {
        if (obj == null) {
            return null;
        }
        if (obj.hasOwnProperty(attributeName) == true && typeof (obj[attributeName]) == "boolean") {
            return obj[attributeName];
        }
        return null;
    };
    /**
     * @param {?} obj
     * @param {?} attributeName
     * @return {?}
     */
    BpmnModelJsonHelper.GetAttributeValueAsNumber = /**
     * @param {?} obj
     * @param {?} attributeName
     * @return {?}
     */
    function (obj, attributeName) {
        if (obj == null) {
            return null;
        }
        if (obj.hasOwnProperty(attributeName) == true && typeof (obj[attributeName]) == "number") {
            return obj[attributeName];
        }
        return null;
    };
    /**
     * @template ReturnT, ClassOfT
     * @param {?} obj
     * @param {?} attributeName
     * @param {?} classOfT
     * @return {?}
     */
    BpmnModelJsonHelper.GetAttributeValueAsList = /**
     * @template ReturnT, ClassOfT
     * @param {?} obj
     * @param {?} attributeName
     * @param {?} classOfT
     * @return {?}
     */
    function (obj, attributeName, classOfT) {
        var e_2, _a;
        /** @type {?} */
        var jsonArray = BpmnModelJsonHelper.GetAttributeValue(obj, attributeName);
        if (jsonArray == null) {
            return null;
        }
        /** @type {?} */
        var list = [];
        try {
            for (var jsonArray_1 = tslib_1.__values(jsonArray), jsonArray_1_1 = jsonArray_1.next(); !jsonArray_1_1.done; jsonArray_1_1 = jsonArray_1.next()) {
                var item = jsonArray_1_1.value;
                /** @type {?} */
                var instance = null;
                try {
                    instance = (/** @type {?} */ (new classOfT()));
                }
                catch (e) {
                    throw e;
                }
                instance.LoadFromJsonObject(item);
                list.push(instance);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (jsonArray_1_1 && !jsonArray_1_1.done && (_a = jsonArray_1.return)) _a.call(jsonArray_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return list;
    };
    /**
     * @param {?} obj
     * @param {?} attributeName
     * @return {?}
     */
    BpmnModelJsonHelper.GetAttributeValueAsDateTime = /**
     * @param {?} obj
     * @param {?} attributeName
     * @return {?}
     */
    function (obj, attributeName) {
        return BpmnModelJsonHelper.DateTimeFromString(BpmnModelJsonHelper.GetAttributeValueAsString(obj, attributeName));
    };
    /**
     * @template ReturnT, ClassOfT
     * @param {?} obj
     * @param {?} attributeName
     * @param {?} classOfT
     * @return {?}
     */
    BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable = /**
     * @template ReturnT, ClassOfT
     * @param {?} obj
     * @param {?} attributeName
     * @param {?} classOfT
     * @return {?}
     */
    function (obj, attributeName, classOfT) {
        /** @type {?} */
        var jsonObject = BpmnModelJsonHelper.GetAttributeValue(obj, attributeName);
        if (jsonObject == null) {
            return null;
        }
        /** @type {?} */
        var instance = null;
        try {
            instance = (/** @type {?} */ (new classOfT()));
        }
        catch (e) {
            throw e;
        }
        instance.LoadFromJsonObject(jsonObject);
        return instance;
    };
    /**
     * @param {?} dt
     * @return {?}
     */
    BpmnModelJsonHelper.DateTimeToString = /**
     * @param {?} dt
     * @return {?}
     */
    function (dt) {
        if (dt == null)
            return null;
        /** @type {?} */
        var time = dt.getTime();
        if (time < BpmnModelJsonHelper.MIN_OFFSETDATETIME.getTime() || time > BpmnModelJsonHelper.MAX_OFFSETDATETIME.getTime()) {
            throw "\u7ED9\u5B9A\u7684\u65E5\u671F\u65F6\u95F4\u503C " + dt.toISOString() + " \u8D85\u51FA\u652F\u6301\u8303\u56F4(0001-01-01T12:00:00.000Z - 9999-12-31T23:59:59.000Z):";
        }
        return BpmnModelJsonHelper.dateFormat(dt, "yyyyMMddHHmmssSSS");
    };
    /**
     *
     * @param str 格式为：yyyyMMddHHmmssSSS
     */
    /**
     *
     * @param {?} str 格式为：yyyyMMddHHmmssSSS
     * @return {?}
     */
    BpmnModelJsonHelper.DateTimeFromString = /**
     *
     * @param {?} str 格式为：yyyyMMddHHmmssSSS
     * @return {?}
     */
    function (str) {
        if (str == null)
            return null;
        // const s = `${str.substring(0, 4)}/${str.substring(4, 6)}/${str.substring(6, 8)} ${str.substring(8, 10)}:${str.substring(10, 12)}:${str.substring(12, 14)}.${str.substring(14)}`;
        /** @type {?} */
        var date = new Date();
        date.setUTCFullYear(parseInt(str.substring(0, 4)));
        date.setUTCMonth(parseInt(str.substring(4, 6)) - 1);
        date.setUTCDate(parseInt(str.substring(6, 8)));
        date.setUTCHours(parseInt(str.substring(8, 10)));
        date.setUTCMinutes(parseInt(str.substring(10, 12)));
        date.setUTCSeconds(parseInt(str.substring(12, 14)));
        date.setUTCMilliseconds(parseInt(str.substring(14)));
        return date;
    };
    /**
     * @template T
     * @param {?} value
     * @return {?}
     */
    BpmnModelJsonHelper.ToJson = /**
     * @template T
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var e_3, _a;
        if (value === undefined || value === null) {
            return null;
        }
        /** @type {?} */
        var list = [];
        try {
            for (var value_2 = tslib_1.__values(value), value_2_1 = value_2.next(); !value_2_1.done; value_2_1 = value_2.next()) {
                var item = value_2_1.value;
                list.push(item.ConvertToJsonObject());
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (value_2_1 && !value_2_1.done && (_a = value_2.return)) _a.call(value_2);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return JSON.stringify(list);
    };
    /**
     * @template ReturnT, ClassOfT
     * @param {?} json
     * @param {?} classOfT
     * @return {?}
     */
    BpmnModelJsonHelper.FromJson = /**
     * @template ReturnT, ClassOfT
     * @param {?} json
     * @param {?} classOfT
     * @return {?}
     */
    function (json, classOfT) {
        if (BpmnModelJsonHelper.IsNullOrWhiteSpace(json)) {
            return null;
        }
        /** @type {?} */
        var list = new Array();
        /** @type {?} */
        var jsonArr = JSON.parse(json);
        if (jsonArr == null || Array.isArray(jsonArr) === false) {
            return list;
        }
        jsonArr.forEach((/**
         * @param {?} elt
         * @return {?}
         */
        function (elt) {
            /** @type {?} */
            var newInstance = (/** @type {?} */ (new classOfT()));
            newInstance.LoadFromJsonObject(elt);
            list.push(newInstance);
        }));
        return list;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    BpmnModelJsonHelper.StringListToJsonArray = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var e_4, _a;
        if (value == null)
            return null;
        /** @type {?} */
        var jsonArray = new Array();
        try {
            for (var value_3 = tslib_1.__values(value), value_3_1 = value_3.next(); !value_3_1.done; value_3_1 = value_3.next()) {
                var item = value_3_1.value;
                jsonArray.push(item);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (value_3_1 && !value_3_1.done && (_a = value_3.return)) _a.call(value_3);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return jsonArray;
    };
    /**
     * @param {?} jsonArray
     * @return {?}
     */
    BpmnModelJsonHelper.StringListFromJsonArray = /**
     * @param {?} jsonArray
     * @return {?}
     */
    function (jsonArray) {
        var e_5, _a;
        if (jsonArray == null) {
            return null;
        }
        /** @type {?} */
        var list = new Array();
        try {
            for (var jsonArray_2 = tslib_1.__values(jsonArray), jsonArray_2_1 = jsonArray_2.next(); !jsonArray_2_1.done; jsonArray_2_1 = jsonArray_2.next()) {
                var item = jsonArray_2_1.value;
                if (typeof item == "object") {
                    list.push(JSON.stringify(item));
                }
                else {
                    list.push(String(item));
                }
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (jsonArray_2_1 && !jsonArray_2_1.done && (_a = jsonArray_2.return)) _a.call(jsonArray_2);
            }
            finally { if (e_5) throw e_5.error; }
        }
        return list;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    BpmnModelJsonHelper.StringListToJson = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var jsonArray = BpmnModelJsonHelper.StringListToJsonArray(value);
        if (jsonArray == null)
            return null;
        return JSON.stringify(jsonArray);
    };
    /**
     * @param {?} json
     * @return {?}
     */
    BpmnModelJsonHelper.StringListFromJson = /**
     * @param {?} json
     * @return {?}
     */
    function (json) {
        if (BpmnModelJsonHelper.IsNullOrWhiteSpace(json)) {
            return null;
        }
        /** @type {?} */
        var jsonArray = (/** @type {?} */ (JSON.parse(json)));
        if (jsonArray == null) {
            return null;
        }
        return BpmnModelJsonHelper.StringListFromJsonArray(jsonArray);
    };
    /**
     * @param {?} string
     * @return {?}
     */
    BpmnModelJsonHelper.IsNullOrWhiteSpace = /**
     * @param {?} string
     * @return {?}
     */
    function (string) {
        if (string == null) {
            return true;
        }
        else {
            return string.replace(/(^s*)|(s*$)/g, "").length == 0;
        }
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    BpmnModelJsonHelper.GetDateFromISO = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var a = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
        if (a) {
            return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4], +a[5], +a[6]));
        }
        else {
            return null;
        }
    };
    /**
     * @private
     * @param {?} date
     * @param {?} fmt
     * @return {?}
     */
    BpmnModelJsonHelper.dateFormat = /**
     * @private
     * @param {?} date
     * @param {?} fmt
     * @return {?}
     */
    function (date, fmt) {
        /** @type {?} */
        var ret;
        /** @type {?} */
        var opt = {
            "y+": date.getUTCFullYear().toString(),
            // 年
            "M+": (date.getUTCMonth() + 1).toString(),
            // 月
            "d+": date.getUTCDate().toString(),
            // 日
            "H+": date.getUTCHours().toString(),
            // 时
            "m+": date.getUTCMinutes().toString(),
            // 分
            "s+": date.getUTCSeconds().toString(),
            // 秒
            "S+": date.getUTCMilliseconds().toString(),
        };
        for (var k in opt) {
            ret = new RegExp("(" + k + ")").exec(fmt);
            if (ret) {
                if (!String.prototype.padStart) {
                    fmt = fmt.replace(ret[1], (ret[1].length == 1) ? (opt[k]) : (BpmnModelJsonHelper.myPadStart(opt[k], ret[1].length, "0")));
                }
                else {
                    fmt = fmt.replace(ret[1], (ret[1].length == 1) ? (opt[k]) : (opt[k].padStart(ret[1].length, "0")));
                }
            }
        }
        return fmt;
    };
    /**
     * @private
     * @param {?} src
     * @param {?} targetLength
     * @param {?} padString
     * @return {?}
     */
    BpmnModelJsonHelper.myPadStart = /**
     * @private
     * @param {?} src
     * @param {?} targetLength
     * @param {?} padString
     * @return {?}
     */
    function (src, targetLength, padString) {
        targetLength = targetLength >> 0; //floor if number or convert non-number to 0;
        padString = String(typeof padString !== 'undefined' ? padString : ' ');
        if (src.length > targetLength) {
            return String(src);
        }
        else {
            targetLength = targetLength - src.length;
            if (targetLength > padString.length) {
                padString += padString.repeat(targetLength / padString.length); //append to original to ensure we are longer than needed
            }
            return padString.slice(0, targetLength) + String(src);
        }
    };
    BpmnModelJsonHelper.MIN_OFFSETDATETIME = BpmnModelJsonHelper.GetDateFromISO("0001-01-01T12:00:00.000Z");
    BpmnModelJsonHelper.MAX_OFFSETDATETIME = BpmnModelJsonHelper.GetDateFromISO("9999-12-31T23:59:59.000Z");
    return BpmnModelJsonHelper;
}());
export { BpmnModelJsonHelper };
if (false) {
    /** @type {?} */
    BpmnModelJsonHelper.MIN_OFFSETDATETIME;
    /** @type {?} */
    BpmnModelJsonHelper.MAX_OFFSETDATETIME;
}
//# sourceMappingURL=data:application/json;base64,