/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { JsonConvertableImpl } from '../JsonConvertableImpl';
import { BpmnModelJsonHelper } from '../BpmnModelJsonHelper';
import { AifLogLevel } from "./AifLogLevel";
export class AifLogLevelConfig extends JsonConvertableImpl {
    constructor() {
        super(...arguments);
        this.logLevel = AifLogLevel.NONE;
        this.writeAllInfo = false;
        this.bifCpIds = new Array();
        this.bifWpIds = new Array();
        this.aifEventIds = new Array();
        this.aifCpIds = new Array();
        this.aifWpIds = new Array();
        this.aifCrIds = new Array();
        this.aifWrIds = new Array();
        this.aifActionIds = new Array();
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.writeAllInfo = false;
        this.logLevel = AifLogLevel.NONE;
        this.bifCpIds.length = 0;
        this.bifWpIds.length = 0;
        this.aifEventIds.length = 0;
        this.aifCpIds.length = 0;
        this.aifWpIds.length = 0;
        this.aifCrIds.length = 0;
        this.aifWrIds.length = 0;
        this.aifActionIds.length = 0;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "writeAllInfo", this.writeAllInfo);
        BpmnModelJsonHelper.SetAttributeValue(obj, "logLevel", this.logLevel);
        BpmnModelJsonHelper.SetAttributeValue(obj, "bifCpIds", BpmnModelJsonHelper.StringListToJson(this.bifCpIds));
        BpmnModelJsonHelper.SetAttributeValue(obj, "bifWpIds", BpmnModelJsonHelper.StringListToJson(this.bifWpIds));
        BpmnModelJsonHelper.SetAttributeValue(obj, "aifEventIds", BpmnModelJsonHelper.StringListToJson(this.aifEventIds));
        BpmnModelJsonHelper.SetAttributeValue(obj, "aifCpIds", BpmnModelJsonHelper.StringListToJson(this.aifCpIds));
        BpmnModelJsonHelper.SetAttributeValue(obj, "aifWpIds", BpmnModelJsonHelper.StringListToJson(this.aifWpIds));
        BpmnModelJsonHelper.SetAttributeValue(obj, "aifCrIds", BpmnModelJsonHelper.StringListToJson(this.aifCrIds));
        BpmnModelJsonHelper.SetAttributeValue(obj, "aifWrIds", BpmnModelJsonHelper.StringListToJson(this.aifWrIds));
        BpmnModelJsonHelper.SetAttributeValue(obj, "aifActionIds", BpmnModelJsonHelper.StringListToJson(this.aifActionIds));
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.writeAllInfo = BpmnModelJsonHelper.GetAttributeValueAsBoolean(obj, "writeAllInfo");
        this.logLevel = AifLogLevel[BpmnModelJsonHelper.GetAttributeValueAsString(obj, "logLevel")];
        this.bifCpIds = BpmnModelJsonHelper.StringListFromJson(BpmnModelJsonHelper.GetAttributeValueAsString(obj, "bifCpIds"));
        this.bifWpIds = BpmnModelJsonHelper.StringListFromJson(BpmnModelJsonHelper.GetAttributeValueAsString(obj, "bifWpIds"));
        this.aifEventIds = BpmnModelJsonHelper.StringListFromJson(BpmnModelJsonHelper.GetAttributeValueAsString(obj, "aifEventIds"));
        this.aifCpIds = BpmnModelJsonHelper.StringListFromJson(BpmnModelJsonHelper.GetAttributeValueAsString(obj, "aifCpIds"));
        this.aifWpIds = BpmnModelJsonHelper.StringListFromJson(BpmnModelJsonHelper.GetAttributeValueAsString(obj, "aifWpIds"));
        this.aifCrIds = BpmnModelJsonHelper.StringListFromJson(BpmnModelJsonHelper.GetAttributeValueAsString(obj, "aifCrIds"));
        this.aifWrIds = BpmnModelJsonHelper.StringListFromJson(BpmnModelJsonHelper.GetAttributeValueAsString(obj, "aifWrIds"));
        this.aifActionIds = BpmnModelJsonHelper.StringListFromJson(BpmnModelJsonHelper.GetAttributeValueAsString(obj, "aifActionIds"));
    }
}
if (false) {
    /** @type {?} */
    AifLogLevelConfig.prototype.logLevel;
    /** @type {?} */
    AifLogLevelConfig.prototype.writeAllInfo;
    /** @type {?} */
    AifLogLevelConfig.prototype.bifCpIds;
    /** @type {?} */
    AifLogLevelConfig.prototype.bifWpIds;
    /** @type {?} */
    AifLogLevelConfig.prototype.aifEventIds;
    /** @type {?} */
    AifLogLevelConfig.prototype.aifCpIds;
    /** @type {?} */
    AifLogLevelConfig.prototype.aifWpIds;
    /** @type {?} */
    AifLogLevelConfig.prototype.aifCrIds;
    /** @type {?} */
    AifLogLevelConfig.prototype.aifWrIds;
    /** @type {?} */
    AifLogLevelConfig.prototype.aifActionIds;
}
//# sourceMappingURL=data:application/json;base64,