/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BillDataFieldBase } from './BillDataFieldBase';
import { BillDataSubFields } from './BillDataSubFields';
import { BpmnModelJsonHelper } from '../BpmnModelJsonHelper';
export class BillDataSubField extends BillDataFieldBase {
    constructor() {
        super(...arguments);
        this.subFields = new BillDataSubFields();
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.subFields.Clear();
        this.attachedField = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        if (this.subFields.GetList().length > 0) {
            /** @type {?} */
            let subFields = [];
            for (let value of this.subFields.GetList()) {
                subFields.push(value.ConvertToJsonObject());
            }
            BpmnModelJsonHelper.SetAttributeValue(obj, "subFields", subFields);
        }
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        /** @type {?} */
        let subFields = BpmnModelJsonHelper.GetAttributeValue(obj, "subFields");
        if (subFields != null) {
            for (let item of subFields) {
                /** @type {?} */
                let value = new BillDataSubField();
                value.LoadFromJsonObject(item);
                this.subFields.Add(value);
            }
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    AddSubField(field) {
        this.subFields.Add(field);
    }
    /**
     * @return {?}
     */
    GetSubFieldMap() {
        return this.subFields.GetMap();
    }
    /**
     * @return {?}
     */
    GetSubFieldList() {
        return this.subFields.GetList();
    }
}
if (false) {
    /** @type {?} */
    BillDataSubField.prototype.subFields;
    /** @type {?} */
    BillDataSubField.prototype.attachedField;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmlsbERhdGFTdWJGaWVsZC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlZHAtYWlmL2NvbW1vbi1hcGkvIiwic291cmNlcyI6WyJsaWIvYmlsbGtpdC9CaWxsRGF0YVN1YkZpZWxkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUU3RCxNQUFNLE9BQU8sZ0JBQWlCLFNBQVEsaUJBQWlCO0lBQXZEOztRQUNJLGNBQVMsR0FBc0IsSUFBSSxpQkFBaUIsRUFBRSxDQUFDO0lBZ0QzRCxDQUFDOzs7OztJQTdDYSxtQkFBbUI7UUFDekIsS0FBSyxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFFNUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztJQUM5QixDQUFDOzs7O0lBRU0sbUJBQW1COztZQUNsQixHQUFHLEdBQUcsS0FBSyxDQUFDLG1CQUFtQixFQUFFO1FBRXJDLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFOztnQkFDakMsU0FBUyxHQUFHLEVBQUU7WUFDbEIsS0FBSyxJQUFJLEtBQUssSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUN4QyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLENBQUM7YUFDL0M7WUFDRCxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1NBQ3RFO1FBRUQsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVNLGtCQUFrQixDQUFDLEdBQU87UUFDN0IsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDOztZQUUxQixTQUFTLEdBQUcsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFdBQVcsQ0FBQztRQUN2RSxJQUFJLFNBQVMsSUFBSSxJQUFJLEVBQUU7WUFDbkIsS0FBSyxJQUFJLElBQUksSUFBSSxTQUFTLEVBQUU7O29CQUNwQixLQUFLLEdBQUcsSUFBSSxnQkFBZ0IsRUFBRTtnQkFDbEMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUMvQixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUM3QjtTQUNKO0lBQ0wsQ0FBQzs7Ozs7SUFFTSxXQUFXLENBQUMsS0FBdUI7UUFDdEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUIsQ0FBQzs7OztJQUVNLGNBQWM7UUFDakIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ25DLENBQUM7Ozs7SUFFTSxlQUFlO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNwQyxDQUFDO0NBQ0o7OztJQWhERyxxQ0FBdUQ7O0lBQ3ZELHlDQUFpQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJpbGxEYXRhRmllbGRCYXNlIH0gZnJvbSAnLi9CaWxsRGF0YUZpZWxkQmFzZSc7XHJcbmltcG9ydCB7IEJpbGxEYXRhU3ViRmllbGRzIH0gZnJvbSAnLi9CaWxsRGF0YVN1YkZpZWxkcyc7XHJcbmltcG9ydCB7IEJwbW5Nb2RlbEpzb25IZWxwZXIgfSBmcm9tICcuLi9CcG1uTW9kZWxKc29uSGVscGVyJztcclxuXHJcbmV4cG9ydCBjbGFzcyBCaWxsRGF0YVN1YkZpZWxkIGV4dGVuZHMgQmlsbERhdGFGaWVsZEJhc2Uge1xyXG4gICAgc3ViRmllbGRzOiBCaWxsRGF0YVN1YkZpZWxkcyA9IG5ldyBCaWxsRGF0YVN1YkZpZWxkcygpO1xyXG4gICAgYXR0YWNoZWRGaWVsZDogQmlsbERhdGFGaWVsZEJhc2U7XHJcblxyXG4gICAgcHJvdGVjdGVkIFJlc2V0QmVmb3JlTG9hZEZyb20oKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuUmVzZXRCZWZvcmVMb2FkRnJvbSgpO1xyXG5cclxuICAgICAgICB0aGlzLnN1YkZpZWxkcy5DbGVhcigpO1xyXG4gICAgICAgIHRoaXMuYXR0YWNoZWRGaWVsZCA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIENvbnZlcnRUb0pzb25PYmplY3QoKToge30ge1xyXG4gICAgICAgIGxldCBvYmogPSBzdXBlci5Db252ZXJ0VG9Kc29uT2JqZWN0KCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnN1YkZpZWxkcy5HZXRMaXN0KCkubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBsZXQgc3ViRmllbGRzID0gW107XHJcbiAgICAgICAgICAgIGZvciAobGV0IHZhbHVlIG9mIHRoaXMuc3ViRmllbGRzLkdldExpc3QoKSkge1xyXG4gICAgICAgICAgICAgICAgc3ViRmllbGRzLnB1c2godmFsdWUuQ29udmVydFRvSnNvbk9iamVjdCgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJzdWJGaWVsZHNcIiwgc3ViRmllbGRzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIExvYWRGcm9tSnNvbk9iamVjdChvYmo6IHt9KTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuTG9hZEZyb21Kc29uT2JqZWN0KG9iaik7XHJcblxyXG4gICAgICAgIGxldCBzdWJGaWVsZHMgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJzdWJGaWVsZHNcIik7XHJcbiAgICAgICAgaWYgKHN1YkZpZWxkcyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGl0ZW0gb2Ygc3ViRmllbGRzKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBuZXcgQmlsbERhdGFTdWJGaWVsZCgpO1xyXG4gICAgICAgICAgICAgICAgdmFsdWUuTG9hZEZyb21Kc29uT2JqZWN0KGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdWJGaWVsZHMuQWRkKHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgQWRkU3ViRmllbGQoZmllbGQ6IEJpbGxEYXRhU3ViRmllbGQpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnN1YkZpZWxkcy5BZGQoZmllbGQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBHZXRTdWJGaWVsZE1hcCgpOiB7IFtrZXk6IHN0cmluZ106IEJpbGxEYXRhU3ViRmllbGQ7IH0ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN1YkZpZWxkcy5HZXRNYXAoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgR2V0U3ViRmllbGRMaXN0KCk6IEJpbGxEYXRhU3ViRmllbGRbXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3ViRmllbGRzLkdldExpc3QoKTtcclxuICAgIH1cclxufSJdfQ==