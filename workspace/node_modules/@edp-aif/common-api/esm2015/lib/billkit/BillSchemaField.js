/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BillSchemaFieldBase } from './BillSchemaFieldBase';
import { BillSchemaSubFields } from './BillSchemaSubFields';
import { BpmnModelJsonHelper } from '../BpmnModelJsonHelper';
import { BillSchemaSubField } from './BillSchemaSubField';
export class BillSchemaField extends BillSchemaFieldBase {
    constructor() {
        super(...arguments);
        this.subFields = new BillSchemaSubFields();
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.subFields.Clear();
        this.attachedTable = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        if (this.subFields.GetList().length > 0) {
            /** @type {?} */
            let subFields = [];
            for (let value of this.subFields.GetList()) {
                subFields.push(value.ConvertToJsonObject());
            }
            BpmnModelJsonHelper.SetAttributeValue(obj, "subFields", subFields);
        }
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        /** @type {?} */
        let subFields = BpmnModelJsonHelper.GetAttributeValue(obj, "subFields");
        if (subFields != null) {
            for (let item of subFields) {
                /** @type {?} */
                let value = new BillSchemaSubField();
                value.LoadFromJsonObject(item);
                this.subFields.Add(value);
            }
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    AddSubField(field) {
        this.subFields.Add(field);
    }
    /**
     * @return {?}
     */
    GetSubFieldMap() {
        return this.subFields.GetMap();
    }
    /**
     * @return {?}
     */
    GetSubFieldList() {
        return this.subFields.GetList();
    }
}
if (false) {
    /** @type {?} */
    BillSchemaField.prototype.subFields;
    /** @type {?} */
    BillSchemaField.prototype.attachedTable;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmlsbFNjaGVtYUZpZWxkLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVkcC1haWYvY29tbW9uLWFwaS8iLCJzb3VyY2VzIjpbImxpYi9iaWxsa2l0L0JpbGxTY2hlbWFGaWVsZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDNUQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDNUQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFHMUQsTUFBTSxPQUFPLGVBQWdCLFNBQVEsbUJBQW1CO0lBQXhEOztRQUNJLGNBQVMsR0FBd0IsSUFBSSxtQkFBbUIsRUFBRSxDQUFDO0lBZ0QvRCxDQUFDOzs7OztJQTdDYSxtQkFBbUI7UUFDekIsS0FBSyxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFFNUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztJQUM5QixDQUFDOzs7O0lBRU0sbUJBQW1COztZQUNsQixHQUFHLEdBQUcsS0FBSyxDQUFDLG1CQUFtQixFQUFFO1FBRXJDLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFOztnQkFDakMsU0FBUyxHQUFVLEVBQUU7WUFDekIsS0FBSyxJQUFJLEtBQUssSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUN4QyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLENBQUM7YUFDL0M7WUFDRCxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1NBQ3RFO1FBRUQsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVNLGtCQUFrQixDQUFDLEdBQU87UUFDN0IsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDOztZQUUxQixTQUFTLEdBQVUsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFdBQVcsQ0FBQztRQUM5RSxJQUFJLFNBQVMsSUFBSSxJQUFJLEVBQUU7WUFDbkIsS0FBSyxJQUFJLElBQUksSUFBSSxTQUFTLEVBQUU7O29CQUNwQixLQUFLLEdBQUcsSUFBSSxrQkFBa0IsRUFBRTtnQkFDcEMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUMvQixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUM3QjtTQUNKO0lBQ0wsQ0FBQzs7Ozs7SUFFTSxXQUFXLENBQUMsS0FBeUI7UUFDeEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUIsQ0FBQzs7OztJQUVNLGNBQWM7UUFDakIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ25DLENBQUM7Ozs7SUFFTSxlQUFlO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNwQyxDQUFDO0NBQ0o7OztJQWhERyxvQ0FBMkQ7O0lBQzNELHdDQUErQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJpbGxTY2hlbWFGaWVsZEJhc2UgfSBmcm9tICcuL0JpbGxTY2hlbWFGaWVsZEJhc2UnO1xyXG5pbXBvcnQgeyBCaWxsU2NoZW1hU3ViRmllbGRzIH0gZnJvbSAnLi9CaWxsU2NoZW1hU3ViRmllbGRzJztcclxuaW1wb3J0IHsgQnBtbk1vZGVsSnNvbkhlbHBlciB9IGZyb20gJy4uL0JwbW5Nb2RlbEpzb25IZWxwZXInO1xyXG5pbXBvcnQgeyBCaWxsU2NoZW1hU3ViRmllbGQgfSBmcm9tICcuL0JpbGxTY2hlbWFTdWJGaWVsZCc7XHJcbmltcG9ydCB7IEJpbGxTY2hlbWFUYWJsZSB9IGZyb20gJy4vQmlsbFNjaGVtYVRhYmxlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBCaWxsU2NoZW1hRmllbGQgZXh0ZW5kcyBCaWxsU2NoZW1hRmllbGRCYXNlIHtcclxuICAgIHN1YkZpZWxkczogQmlsbFNjaGVtYVN1YkZpZWxkcyA9IG5ldyBCaWxsU2NoZW1hU3ViRmllbGRzKCk7XHJcbiAgICBhdHRhY2hlZFRhYmxlOiBCaWxsU2NoZW1hVGFibGU7XHJcblxyXG4gICAgcHJvdGVjdGVkIFJlc2V0QmVmb3JlTG9hZEZyb20oKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuUmVzZXRCZWZvcmVMb2FkRnJvbSgpO1xyXG5cclxuICAgICAgICB0aGlzLnN1YkZpZWxkcy5DbGVhcigpO1xyXG4gICAgICAgIHRoaXMuYXR0YWNoZWRUYWJsZSA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIENvbnZlcnRUb0pzb25PYmplY3QoKToge30ge1xyXG4gICAgICAgIGxldCBvYmogPSBzdXBlci5Db252ZXJ0VG9Kc29uT2JqZWN0KCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnN1YkZpZWxkcy5HZXRMaXN0KCkubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBsZXQgc3ViRmllbGRzOiBhbnlbXSA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCB2YWx1ZSBvZiB0aGlzLnN1YkZpZWxkcy5HZXRMaXN0KCkpIHtcclxuICAgICAgICAgICAgICAgIHN1YkZpZWxkcy5wdXNoKHZhbHVlLkNvbnZlcnRUb0pzb25PYmplY3QoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwic3ViRmllbGRzXCIsIHN1YkZpZWxkcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBMb2FkRnJvbUpzb25PYmplY3Qob2JqOiB7fSk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG5cclxuICAgICAgICBsZXQgc3ViRmllbGRzOiBhbnlbXSA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInN1YkZpZWxkc1wiKTtcclxuICAgICAgICBpZiAoc3ViRmllbGRzICE9IG51bGwpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaXRlbSBvZiBzdWJGaWVsZHMpIHtcclxuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IG5ldyBCaWxsU2NoZW1hU3ViRmllbGQoKTtcclxuICAgICAgICAgICAgICAgIHZhbHVlLkxvYWRGcm9tSnNvbk9iamVjdChpdGVtKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3ViRmllbGRzLkFkZCh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIEFkZFN1YkZpZWxkKGZpZWxkOiBCaWxsU2NoZW1hU3ViRmllbGQpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnN1YkZpZWxkcy5BZGQoZmllbGQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBHZXRTdWJGaWVsZE1hcCgpOiB7IFtrZXk6IHN0cmluZ106IEJpbGxTY2hlbWFTdWJGaWVsZCB9IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdWJGaWVsZHMuR2V0TWFwKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIEdldFN1YkZpZWxkTGlzdCgpOiBBcnJheTxCaWxsU2NoZW1hU3ViRmllbGQ+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdWJGaWVsZHMuR2V0TGlzdCgpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==