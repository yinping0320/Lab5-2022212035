/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModelJsonHelper } from '../BpmnModelJsonHelper';
import { BillSchemaFields } from './BillSchemaFields';
import { BillSchemaField } from './BillSchemaField';
import { KitTable } from './KitTable';
import { BillSchemaTables } from './BillSchemaTables';
export class BillSchemaTable extends KitTable {
    constructor() {
        super(...arguments);
        this.fields = new BillSchemaFields();
        this.childTables = new BillSchemaTables();
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.caption = null;
        this.attachedBillSchema = null;
        this.attachedTable = null;
        this.fields.Clear();
        this.childTables.Clear();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "caption", this.caption);
        /** @type {?} */
        let fields = [];
        for (let value of this.fields.GetList()) {
            fields.push(value.ConvertToJsonObject());
        }
        BpmnModelJsonHelper.SetAttributeValue(obj, "fields", fields);
        if (this.childTables.GetList().length > 0) {
            /** @type {?} */
            let childTables = [];
            for (let value of this.childTables.GetList()) {
                childTables.push(value.ConvertToJsonObject());
            }
            BpmnModelJsonHelper.SetAttributeValue(obj, "childTables", childTables);
        }
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.caption = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "caption");
        /** @type {?} */
        let fields = BpmnModelJsonHelper.GetAttributeValue(obj, "fields");
        for (let item of fields) {
            /** @type {?} */
            let value = new BillSchemaField();
            value.LoadFromJsonObject(item);
            this.fields.Add(value);
        }
        /** @type {?} */
        let childTables = BpmnModelJsonHelper.GetAttributeValue(obj, "childTables");
        if (childTables != null) {
            for (let item of childTables) {
                /** @type {?} */
                let value = new BillSchemaTable();
                value.LoadFromJsonObject(item);
                this.childTables.Add(value);
            }
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    AddField(field) {
        this.fields.Add(field);
    }
    /**
     * @return {?}
     */
    getFieldMap() {
        return this.fields.GetMap();
    }
    /**
     * @return {?}
     */
    getFieldList() {
        return this.fields.GetList();
    }
    /**
     * @param {?} table
     * @return {?}
     */
    AddChildTable(table) {
        this.childTables.Add(table);
    }
    /**
     * @return {?}
     */
    GetChildTableMap() {
        return this.childTables.GetMap();
    }
    /**
     * @return {?}
     */
    GetChildTableList() {
        return this.childTables.GetList();
    }
}
if (false) {
    /** @type {?} */
    BillSchemaTable.prototype.caption;
    /** @type {?} */
    BillSchemaTable.prototype.fields;
    /** @type {?} */
    BillSchemaTable.prototype.childTables;
    /** @type {?} */
    BillSchemaTable.prototype.attachedBillSchema;
    /** @type {?} */
    BillSchemaTable.prototype.attachedTable;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmlsbFNjaGVtYVRhYmxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVkcC1haWYvY29tbW9uLWFwaS8iLCJzb3VyY2VzIjpbImxpYi9iaWxsa2l0L0JpbGxTY2hlbWFUYWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFdEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDdEMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFdEQsTUFBTSxPQUFPLGVBQWdCLFNBQVEsUUFBUTtJQUE3Qzs7UUFFSSxXQUFNLEdBQXFCLElBQUksZ0JBQWdCLEVBQUUsQ0FBQztRQUNsRCxnQkFBVyxHQUFxQixJQUFJLGdCQUFnQixFQUFFLENBQUM7SUFpRjNELENBQUM7Ozs7O0lBN0VhLG1CQUFtQjtRQUN6QixLQUFLLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUU1QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNwQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDO1FBQy9CLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO1FBQzFCLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDcEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUM3QixDQUFDOzs7O0lBRU0sbUJBQW1COztZQUNsQixHQUFHLEdBQUcsS0FBSyxDQUFDLG1CQUFtQixFQUFFO1FBRXJDLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDOztZQUVoRSxNQUFNLEdBQUcsRUFBRTtRQUNmLEtBQUssSUFBSSxLQUFLLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUNyQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLENBQUM7U0FDNUM7UUFDRCxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRTdELElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFOztnQkFDbkMsV0FBVyxHQUFHLEVBQUU7WUFDcEIsS0FBSyxJQUFJLEtBQUssSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUMxQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLENBQUM7YUFDakQ7WUFDRCxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1NBQzFFO1FBRUQsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVNLGtCQUFrQixDQUFDLEdBQU87UUFDN0IsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxPQUFPLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDOztZQUV6RSxNQUFNLEdBQVUsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQztRQUN4RSxLQUFLLElBQUksSUFBSSxJQUFJLE1BQU0sRUFBRTs7Z0JBQ2pCLEtBQUssR0FBRyxJQUFJLGVBQWUsRUFBRTtZQUNqQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDL0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDMUI7O1lBRUcsV0FBVyxHQUFVLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxhQUFhLENBQUM7UUFDbEYsSUFBSSxXQUFXLElBQUksSUFBSSxFQUFFO1lBQ3JCLEtBQUssSUFBSSxJQUFJLElBQUksV0FBVyxFQUFFOztvQkFDdEIsS0FBSyxHQUFHLElBQUksZUFBZSxFQUFFO2dCQUNqQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQy9CLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQy9CO1NBQ0o7SUFDTCxDQUFDOzs7OztJQUVNLFFBQVEsQ0FBQyxLQUFzQjtRQUNsQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQixDQUFDOzs7O0lBRU0sV0FBVztRQUNkLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNoQyxDQUFDOzs7O0lBRU0sWUFBWTtRQUNmLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNqQyxDQUFDOzs7OztJQUVNLGFBQWEsQ0FBQyxLQUFzQjtRQUN2QyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoQyxDQUFDOzs7O0lBRU0sZ0JBQWdCO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNyQyxDQUFDOzs7O0lBRU0saUJBQWlCO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUN0QyxDQUFDO0NBQ0o7OztJQW5GRyxrQ0FBZ0I7O0lBQ2hCLGlDQUFrRDs7SUFDbEQsc0NBQXVEOztJQUN2RCw2Q0FBK0I7O0lBQy9CLHdDQUErQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJwbW5Nb2RlbEpzb25IZWxwZXIgfSBmcm9tICcuLi9CcG1uTW9kZWxKc29uSGVscGVyJztcclxuaW1wb3J0IHsgQmlsbFNjaGVtYUZpZWxkcyB9IGZyb20gJy4vQmlsbFNjaGVtYUZpZWxkcyc7XHJcbmltcG9ydCB7IEJpbGxTY2hlbWEgfSBmcm9tICcuL0JpbGxTY2hlbWEnO1xyXG5pbXBvcnQgeyBCaWxsU2NoZW1hRmllbGQgfSBmcm9tICcuL0JpbGxTY2hlbWFGaWVsZCc7XHJcbmltcG9ydCB7IEtpdFRhYmxlIH0gZnJvbSAnLi9LaXRUYWJsZSc7XHJcbmltcG9ydCB7IEJpbGxTY2hlbWFUYWJsZXMgfSBmcm9tICcuL0JpbGxTY2hlbWFUYWJsZXMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEJpbGxTY2hlbWFUYWJsZSBleHRlbmRzIEtpdFRhYmxlIHtcclxuICAgIGNhcHRpb246IHN0cmluZztcclxuICAgIGZpZWxkczogQmlsbFNjaGVtYUZpZWxkcyA9IG5ldyBCaWxsU2NoZW1hRmllbGRzKCk7XHJcbiAgICBjaGlsZFRhYmxlczogQmlsbFNjaGVtYVRhYmxlcyA9IG5ldyBCaWxsU2NoZW1hVGFibGVzKCk7XHJcbiAgICBhdHRhY2hlZEJpbGxTY2hlbWE6IEJpbGxTY2hlbWE7XHJcbiAgICBhdHRhY2hlZFRhYmxlOiBCaWxsU2NoZW1hVGFibGU7XHJcblxyXG4gICAgcHJvdGVjdGVkIFJlc2V0QmVmb3JlTG9hZEZyb20oKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuUmVzZXRCZWZvcmVMb2FkRnJvbSgpO1xyXG5cclxuICAgICAgICB0aGlzLmNhcHRpb24gPSBudWxsO1xyXG4gICAgICAgIHRoaXMuYXR0YWNoZWRCaWxsU2NoZW1hID0gbnVsbDtcclxuICAgICAgICB0aGlzLmF0dGFjaGVkVGFibGUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuZmllbGRzLkNsZWFyKCk7XHJcbiAgICAgICAgdGhpcy5jaGlsZFRhYmxlcy5DbGVhcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBDb252ZXJ0VG9Kc29uT2JqZWN0KCk6IHt9IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG5cclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJjYXB0aW9uXCIsIHRoaXMuY2FwdGlvbik7XHJcblxyXG4gICAgICAgIGxldCBmaWVsZHMgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCB2YWx1ZSBvZiB0aGlzLmZpZWxkcy5HZXRMaXN0KCkpIHtcclxuICAgICAgICAgICAgZmllbGRzLnB1c2godmFsdWUuQ29udmVydFRvSnNvbk9iamVjdCgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiZmllbGRzXCIsIGZpZWxkcyk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmNoaWxkVGFibGVzLkdldExpc3QoKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGxldCBjaGlsZFRhYmxlcyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCB2YWx1ZSBvZiB0aGlzLmNoaWxkVGFibGVzLkdldExpc3QoKSkge1xyXG4gICAgICAgICAgICAgICAgY2hpbGRUYWJsZXMucHVzaCh2YWx1ZS5Db252ZXJ0VG9Kc29uT2JqZWN0KCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcImNoaWxkVGFibGVzXCIsIGNoaWxkVGFibGVzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIExvYWRGcm9tSnNvbk9iamVjdChvYmo6IHt9KTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuTG9hZEZyb21Kc29uT2JqZWN0KG9iaik7XHJcblxyXG4gICAgICAgIHRoaXMuY2FwdGlvbiA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwiY2FwdGlvblwiKTtcclxuXHJcbiAgICAgICAgbGV0IGZpZWxkczogYW55W10gPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJmaWVsZHNcIik7XHJcbiAgICAgICAgZm9yIChsZXQgaXRlbSBvZiBmaWVsZHMpIHtcclxuICAgICAgICAgICAgbGV0IHZhbHVlID0gbmV3IEJpbGxTY2hlbWFGaWVsZCgpO1xyXG4gICAgICAgICAgICB2YWx1ZS5Mb2FkRnJvbUpzb25PYmplY3QoaXRlbSk7XHJcbiAgICAgICAgICAgIHRoaXMuZmllbGRzLkFkZCh2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgY2hpbGRUYWJsZXM6IGFueVtdID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiY2hpbGRUYWJsZXNcIik7XHJcbiAgICAgICAgaWYgKGNoaWxkVGFibGVzICE9IG51bGwpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaXRlbSBvZiBjaGlsZFRhYmxlcykge1xyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gbmV3IEJpbGxTY2hlbWFUYWJsZSgpO1xyXG4gICAgICAgICAgICAgICAgdmFsdWUuTG9hZEZyb21Kc29uT2JqZWN0KGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZFRhYmxlcy5BZGQodmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBBZGRGaWVsZChmaWVsZDogQmlsbFNjaGVtYUZpZWxkKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5maWVsZHMuQWRkKGZpZWxkKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0RmllbGRNYXAoKTogeyBba2V5OiBzdHJpbmddOiBCaWxsU2NoZW1hRmllbGQ7IH0ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZpZWxkcy5HZXRNYXAoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0RmllbGRMaXN0KCk6IEFycmF5PEJpbGxTY2hlbWFGaWVsZD4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZpZWxkcy5HZXRMaXN0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIEFkZENoaWxkVGFibGUodGFibGU6IEJpbGxTY2hlbWFUYWJsZSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuY2hpbGRUYWJsZXMuQWRkKHRhYmxlKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgR2V0Q2hpbGRUYWJsZU1hcCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZFRhYmxlcy5HZXRNYXAoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgR2V0Q2hpbGRUYWJsZUxpc3QoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRUYWJsZXMuR2V0TGlzdCgpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==