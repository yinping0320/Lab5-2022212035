/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { KitField } from './KitField';
import { DataTypeStoreImpl } from './DataTypeStoreImpl';
import { ExtensionMethod } from '../ExtensionMethod';
/**
 * @abstract
 */
export class KitFieldInstance extends KitField {
    /**
     * @param {?=} fieldName
     * @param {?=} fieldValue
     */
    constructor(fieldName, fieldValue) {
        super();
        this.fieldStore = new DataTypeStoreImpl();
        this.fieldName = fieldName;
        this.SetFieldValue(fieldValue);
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.fieldStore = new DataTypeStoreImpl();
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        if ("base.string" != this.fieldStore.converterName) {
            ExtensionMethod.setAttributeValue(obj, "conv", this.fieldStore.converterName);
        }
        if (this.fieldStore.textValue != null) {
            ExtensionMethod.setAttributeValue(obj, "value", this.fieldStore.textValue);
        }
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        /** @type {?} */
        let conv = ExtensionMethod.getAttributeValue4String(obj, 'conv');
        if (conv == null) {
            conv = "base.string";
        }
        this.fieldStore.converterName = conv;
        /** @type {?} */
        let text = ExtensionMethod.getAttributeValue4String(obj, "value");
        if (text != null) {
            this.fieldStore.textValue = text;
        }
    }
    /**
     * @return {?}
     */
    GetFieldValue() {
        return this.fieldStore.dataValue;
    }
    /**
     * @param {?} fieldValue
     * @return {?}
     */
    SetFieldValue(fieldValue) {
        this.fieldStore.dataValue = fieldValue;
    }
    /**
     * @return {?}
     */
    GetTextValue() {
        return this.fieldStore.textValue;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    KitFieldInstance.prototype.fieldStore;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiS2l0RmllbGRJbnN0YW5jZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlZHAtYWlmL2NvbW1vbi1hcGkvIiwic291cmNlcyI6WyJsaWIvYmlsbGtpdC9LaXRGaWVsZEluc3RhbmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7OztBQUVyRCxNQUFNLE9BQWdCLGdCQUFpQixTQUFRLFFBQVE7Ozs7O0lBR25ELFlBQW1CLFNBQWtCLEVBQUUsVUFBZ0I7UUFDbkQsS0FBSyxFQUFFLENBQUM7UUFISixlQUFVLEdBQXNCLElBQUksaUJBQWlCLEVBQUUsQ0FBQztRQUk1RCxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ25DLENBQUM7Ozs7O0lBRVMsbUJBQW1CO1FBQ3pCLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBRTVCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxpQkFBaUIsRUFBRSxDQUFDO0lBQzlDLENBQUM7Ozs7SUFFTSxtQkFBbUI7O1lBQ2xCLEdBQUcsR0FBRyxLQUFLLENBQUMsbUJBQW1CLEVBQUU7UUFFckMsSUFBSSxhQUFhLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUU7WUFDaEQsZUFBZSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUNqRjtRQUNELElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLElBQUksSUFBSSxFQUFFO1lBQ25DLGVBQWUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDOUU7UUFHRCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7Ozs7O0lBRU0sa0JBQWtCLENBQUMsR0FBTztRQUM3QixLQUFLLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7O1lBRTFCLElBQUksR0FBRyxlQUFlLENBQUMsd0JBQXdCLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQztRQUNoRSxJQUFJLElBQUksSUFBSSxJQUFJLEVBQUU7WUFDZCxJQUFJLEdBQUcsYUFBYSxDQUFDO1NBQ3hCO1FBQ0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDOztZQUVqQyxJQUFJLEdBQUcsZUFBZSxDQUFDLHdCQUF3QixDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUM7UUFDakUsSUFBSSxJQUFJLElBQUksSUFBSSxFQUFFO1lBQ2QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1NBQ3BDO0lBRUwsQ0FBQzs7OztJQUVNLGFBQWE7UUFDaEIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQztJQUNyQyxDQUFDOzs7OztJQUVNLGFBQWEsQ0FBQyxVQUFlO1FBQ2hDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQztJQUMzQyxDQUFDOzs7O0lBRU0sWUFBWTtRQUNmLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUM7SUFDckMsQ0FBQztDQUNKOzs7Ozs7SUF2REcsc0NBQWdFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgS2l0RmllbGQgfSBmcm9tICcuL0tpdEZpZWxkJztcclxuaW1wb3J0IHsgRGF0YVR5cGVTdG9yZUltcGwgfSBmcm9tICcuL0RhdGFUeXBlU3RvcmVJbXBsJztcclxuaW1wb3J0IHsgRXh0ZW5zaW9uTWV0aG9kIH0gZnJvbSAnLi4vRXh0ZW5zaW9uTWV0aG9kJztcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBLaXRGaWVsZEluc3RhbmNlIGV4dGVuZHMgS2l0RmllbGQge1xyXG4gICAgcHJpdmF0ZSBmaWVsZFN0b3JlOiBEYXRhVHlwZVN0b3JlSW1wbCA9IG5ldyBEYXRhVHlwZVN0b3JlSW1wbCgpO1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihmaWVsZE5hbWU/OiBzdHJpbmcsIGZpZWxkVmFsdWU/OiBhbnkpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMuZmllbGROYW1lID0gZmllbGROYW1lO1xyXG4gICAgICAgIHRoaXMuU2V0RmllbGRWYWx1ZShmaWVsZFZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgUmVzZXRCZWZvcmVMb2FkRnJvbSgpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5SZXNldEJlZm9yZUxvYWRGcm9tKCk7XHJcblxyXG4gICAgICAgIHRoaXMuZmllbGRTdG9yZSA9IG5ldyBEYXRhVHlwZVN0b3JlSW1wbCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBDb252ZXJ0VG9Kc29uT2JqZWN0KCk6IHt9IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG5cclxuICAgICAgICBpZiAoXCJiYXNlLnN0cmluZ1wiICE9IHRoaXMuZmllbGRTdG9yZS5jb252ZXJ0ZXJOYW1lKSB7XHJcbiAgICAgICAgICAgIEV4dGVuc2lvbk1ldGhvZC5zZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiY29udlwiLCB0aGlzLmZpZWxkU3RvcmUuY29udmVydGVyTmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmZpZWxkU3RvcmUudGV4dFZhbHVlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgRXh0ZW5zaW9uTWV0aG9kLnNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJ2YWx1ZVwiLCB0aGlzLmZpZWxkU3RvcmUudGV4dFZhbHVlKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBMb2FkRnJvbUpzb25PYmplY3Qob2JqOiB7fSk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG5cclxuICAgICAgICBsZXQgY29udiA9IEV4dGVuc2lvbk1ldGhvZC5nZXRBdHRyaWJ1dGVWYWx1ZTRTdHJpbmcob2JqLCAnY29udicpO1xyXG4gICAgICAgIGlmIChjb252ID09IG51bGwpIHtcclxuICAgICAgICAgICAgY29udiA9IFwiYmFzZS5zdHJpbmdcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5maWVsZFN0b3JlLmNvbnZlcnRlck5hbWUgPSBjb252O1xyXG5cclxuICAgICAgICBsZXQgdGV4dCA9IEV4dGVuc2lvbk1ldGhvZC5nZXRBdHRyaWJ1dGVWYWx1ZTRTdHJpbmcob2JqLCBcInZhbHVlXCIpO1xyXG4gICAgICAgIGlmICh0ZXh0ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5maWVsZFN0b3JlLnRleHRWYWx1ZSA9IHRleHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgR2V0RmllbGRWYWx1ZSgpOiBhbnkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZpZWxkU3RvcmUuZGF0YVZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBTZXRGaWVsZFZhbHVlKGZpZWxkVmFsdWU6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZmllbGRTdG9yZS5kYXRhVmFsdWUgPSBmaWVsZFZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBHZXRUZXh0VmFsdWUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5maWVsZFN0b3JlLnRleHRWYWx1ZTtcclxuICAgIH1cclxufSJdfQ==