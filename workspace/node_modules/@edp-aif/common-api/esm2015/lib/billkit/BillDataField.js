/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BillDataFieldBase } from './BillDataFieldBase';
import { BillDataSubFields } from './BillDataSubFields';
import { BpmnModelJsonHelper } from '../BpmnModelJsonHelper';
import { BillDataSubField } from './BillDataSubField';
export class BillDataField extends BillDataFieldBase {
    constructor() {
        super(...arguments);
        this.subFields = new BillDataSubFields();
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.subFields.Clear();
        this.attachedRow = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        if (this.subFields.GetList().length > 0) {
            /** @type {?} */
            let subFields = [];
            for (let value of this.subFields.GetList()) {
                subFields.push(value.ConvertToJsonObject());
            }
            BpmnModelJsonHelper.SetAttributeValue(obj, "subFields", subFields);
        }
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        /** @type {?} */
        let subFields = BpmnModelJsonHelper.GetAttributeValue(obj, "subFields");
        if (subFields != null) {
            for (let item of subFields) {
                /** @type {?} */
                let value = new BillDataSubField();
                value.LoadFromJsonObject(item);
                this.subFields.Add(value);
            }
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    AddSubField(field) {
        this.subFields.Add(field);
    }
    /**
     * @return {?}
     */
    GetSubFieldMap() {
        return this.subFields.GetMap();
    }
    /**
     * @return {?}
     */
    GetSubFieldList() {
        return this.subFields.GetList();
    }
}
if (false) {
    /** @type {?} */
    BillDataField.prototype.subFields;
    /** @type {?} */
    BillDataField.prototype.attachedRow;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmlsbERhdGFGaWVsZC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlZHAtYWlmL2NvbW1vbi1hcGkvIiwic291cmNlcyI6WyJsaWIvYmlsbGtpdC9CaWxsRGF0YUZpZWxkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM3RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUd0RCxNQUFNLE9BQU8sYUFBYyxTQUFRLGlCQUFpQjtJQUFwRDs7UUFDSSxjQUFTLEdBQXNCLElBQUksaUJBQWlCLEVBQUUsQ0FBQztJQWdEM0QsQ0FBQzs7Ozs7SUE3Q2EsbUJBQW1CO1FBQ3pCLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBRTVCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7SUFDNUIsQ0FBQzs7OztJQUVNLG1CQUFtQjs7WUFDbEIsR0FBRyxHQUFHLEtBQUssQ0FBQyxtQkFBbUIsRUFBRTtRQUVyQyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTs7Z0JBQ2pDLFNBQVMsR0FBRyxFQUFFO1lBQ2xCLEtBQUssSUFBSSxLQUFLLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtnQkFDeEMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDO2FBQy9DO1lBQ0QsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQztTQUN0RTtRQUVELE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7SUFFTSxrQkFBa0IsQ0FBQyxHQUFPO1FBQzdCLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQzs7WUFFMUIsU0FBUyxHQUFHLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxXQUFXLENBQUM7UUFDdkUsSUFBSSxTQUFTLElBQUksSUFBSSxFQUFFO1lBQ25CLEtBQUssSUFBSSxJQUFJLElBQUksU0FBUyxFQUFFOztvQkFDcEIsS0FBSyxHQUFHLElBQUksZ0JBQWdCLEVBQUU7Z0JBQ2xDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDL0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDN0I7U0FDSjtJQUNMLENBQUM7Ozs7O0lBRU0sV0FBVyxDQUFDLEtBQXVCO1FBQ3RDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlCLENBQUM7Ozs7SUFFTSxjQUFjO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNuQyxDQUFDOzs7O0lBRU0sZUFBZTtRQUNsQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDcEMsQ0FBQztDQUNKOzs7SUFoREcsa0NBQXVEOztJQUN2RCxvQ0FBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCaWxsRGF0YUZpZWxkQmFzZSB9IGZyb20gJy4vQmlsbERhdGFGaWVsZEJhc2UnO1xyXG5pbXBvcnQgeyBCaWxsRGF0YVN1YkZpZWxkcyB9IGZyb20gJy4vQmlsbERhdGFTdWJGaWVsZHMnO1xyXG5pbXBvcnQgeyBCcG1uTW9kZWxKc29uSGVscGVyIH0gZnJvbSAnLi4vQnBtbk1vZGVsSnNvbkhlbHBlcic7XHJcbmltcG9ydCB7IEJpbGxEYXRhU3ViRmllbGQgfSBmcm9tICcuL0JpbGxEYXRhU3ViRmllbGQnO1xyXG5pbXBvcnQgeyBCaWxsRGF0YVJvdyB9IGZyb20gJy4vQmlsbERhdGFSb3cnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEJpbGxEYXRhRmllbGQgZXh0ZW5kcyBCaWxsRGF0YUZpZWxkQmFzZSB7XHJcbiAgICBzdWJGaWVsZHM6IEJpbGxEYXRhU3ViRmllbGRzID0gbmV3IEJpbGxEYXRhU3ViRmllbGRzKCk7XHJcbiAgICBhdHRhY2hlZFJvdzogQmlsbERhdGFSb3c7XHJcblxyXG4gICAgcHJvdGVjdGVkIFJlc2V0QmVmb3JlTG9hZEZyb20oKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuUmVzZXRCZWZvcmVMb2FkRnJvbSgpO1xyXG5cclxuICAgICAgICB0aGlzLnN1YkZpZWxkcy5DbGVhcigpO1xyXG4gICAgICAgIHRoaXMuYXR0YWNoZWRSb3cgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBDb252ZXJ0VG9Kc29uT2JqZWN0KCk6IHt9IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5zdWJGaWVsZHMuR2V0TGlzdCgpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgbGV0IHN1YkZpZWxkcyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCB2YWx1ZSBvZiB0aGlzLnN1YkZpZWxkcy5HZXRMaXN0KCkpIHtcclxuICAgICAgICAgICAgICAgIHN1YkZpZWxkcy5wdXNoKHZhbHVlLkNvbnZlcnRUb0pzb25PYmplY3QoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwic3ViRmllbGRzXCIsIHN1YkZpZWxkcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBMb2FkRnJvbUpzb25PYmplY3Qob2JqOiB7fSk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG5cclxuICAgICAgICBsZXQgc3ViRmllbGRzID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwic3ViRmllbGRzXCIpO1xyXG4gICAgICAgIGlmIChzdWJGaWVsZHMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpdGVtIG9mIHN1YkZpZWxkcykge1xyXG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gbmV3IEJpbGxEYXRhU3ViRmllbGQoKTtcclxuICAgICAgICAgICAgICAgIHZhbHVlLkxvYWRGcm9tSnNvbk9iamVjdChpdGVtKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3ViRmllbGRzLkFkZCh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIEFkZFN1YkZpZWxkKGZpZWxkOiBCaWxsRGF0YVN1YkZpZWxkKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zdWJGaWVsZHMuQWRkKGZpZWxkKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgR2V0U3ViRmllbGRNYXAoKTogeyBba2V5OiBzdHJpbmddOiBCaWxsRGF0YVN1YkZpZWxkOyB9IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdWJGaWVsZHMuR2V0TWFwKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIEdldFN1YkZpZWxkTGlzdCgpOiBCaWxsRGF0YVN1YkZpZWxkW10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN1YkZpZWxkcy5HZXRMaXN0KCk7XHJcbiAgICB9XHJcbn1cclxuIl19