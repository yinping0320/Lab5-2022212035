/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModelJsonHelper } from '../BpmnModelJsonHelper';
import { KitBill } from './KitBill';
import { BillDataTable } from './BillDataTable';
export class BillData extends KitBill {
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.mainTable = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "mainTable", this.mainTable);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.mainTable = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "mainTable", BillDataTable);
        this.ApplyRelationship();
    }
    /*
         * 将数据集、主表、子表、行、字段之间的隶属关系应用到各个对象上。
         * */
    /**
     * @return {?}
     */
    ApplyRelationship() {
        this.Apply2Table(this, null, this.mainTable);
        return this;
    }
    /**
     * @private
     * @param {?} attachedBillData
     * @param {?} attachedRow
     * @param {?} table
     * @return {?}
     */
    Apply2Table(attachedBillData, attachedRow, table) {
        table.attachedBillData = attachedBillData;
        table.attachedRow = attachedRow;
        for (let row of table.GetRowList()) {
            this.Apply2Row(table, row);
        }
    }
    /**
     * @private
     * @param {?} attachedTable
     * @param {?} row
     * @return {?}
     */
    Apply2Row(attachedTable, row) {
        row.attachedTable = attachedTable;
        for (let field of row.GetFieldList()) {
            this.Apply2Field(row, field);
        }
        for (let childTable of row.GetChildTableList()) {
            this.Apply2Table(attachedTable.attachedBillData, row, childTable);
        }
    }
    /**
     * @private
     * @param {?} attachedRow
     * @param {?} field
     * @return {?}
     */
    Apply2Field(attachedRow, field) {
        field.attachedRow = attachedRow;
        for (let subField of field.GetSubFieldList()) {
            this.Apply2SubField(field, subField);
        }
    }
    /**
     * @private
     * @param {?} attachedField
     * @param {?} field
     * @return {?}
     */
    Apply2SubField(attachedField, field) {
        field.attachedField = field;
        for (let subField of field.GetSubFieldList()) {
            this.Apply2SubField(field, subField);
        }
    }
}
if (false) {
    /** @type {?} */
    BillData.prototype.mainTable;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmlsbERhdGEuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZWRwLWFpZi9jb21tb24tYXBpLyIsInNvdXJjZXMiOlsibGliL2JpbGxraXQvQmlsbERhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzdELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDcEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBTWhELE1BQU0sT0FBTyxRQUFTLFNBQVEsT0FBTzs7Ozs7SUFHdkIsbUJBQW1CO1FBQ3pCLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBRTVCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO0lBQzFCLENBQUM7Ozs7SUFFTSxtQkFBbUI7O1lBQ2xCLEdBQUcsR0FBRyxLQUFLLENBQUMsbUJBQW1CLEVBQUU7UUFFckMsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFeEUsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVNLGtCQUFrQixDQUFDLEdBQU87UUFDN0IsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxTQUFTLEdBQUcsbUJBQW1CLENBQUMsbUNBQW1DLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUUxRyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUM3QixDQUFDOzs7Ozs7O0lBS00saUJBQWlCO1FBQ3BCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFN0MsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQzs7Ozs7Ozs7SUFFTyxXQUFXLENBQUMsZ0JBQTBCLEVBQUUsV0FBd0IsRUFBRSxLQUFvQjtRQUMxRixLQUFLLENBQUMsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUM7UUFDMUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFFaEMsS0FBSyxJQUFJLEdBQUcsSUFBSSxLQUFLLENBQUMsVUFBVSxFQUFFLEVBQUU7WUFDaEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDOUI7SUFDTCxDQUFDOzs7Ozs7O0lBRU8sU0FBUyxDQUFDLGFBQTRCLEVBQUUsR0FBZ0I7UUFDNUQsR0FBRyxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7UUFFbEMsS0FBSyxJQUFJLEtBQUssSUFBSSxHQUFHLENBQUMsWUFBWSxFQUFFLEVBQUU7WUFDbEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDaEM7UUFFRCxLQUFLLElBQUksVUFBVSxJQUFJLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxFQUFFO1lBQzVDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQztTQUNyRTtJQUNMLENBQUM7Ozs7Ozs7SUFFTyxXQUFXLENBQUMsV0FBd0IsRUFBRSxLQUFvQjtRQUM5RCxLQUFLLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUVoQyxLQUFLLElBQUksUUFBUSxJQUFJLEtBQUssQ0FBQyxlQUFlLEVBQUUsRUFBRTtZQUMxQyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztTQUN4QztJQUNMLENBQUM7Ozs7Ozs7SUFFTyxjQUFjLENBQUMsYUFBZ0MsRUFBRSxLQUF1QjtRQUM1RSxLQUFLLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztRQUU1QixLQUFLLElBQUksUUFBUSxJQUFJLEtBQUssQ0FBQyxlQUFlLEVBQUUsRUFBRTtZQUMxQyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztTQUN4QztJQUNMLENBQUM7Q0FDSjs7O0lBckVHLDZCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJwbW5Nb2RlbEpzb25IZWxwZXIgfSBmcm9tICcuLi9CcG1uTW9kZWxKc29uSGVscGVyJztcclxuaW1wb3J0IHsgS2l0QmlsbCB9IGZyb20gJy4vS2l0QmlsbCc7XHJcbmltcG9ydCB7IEJpbGxEYXRhVGFibGUgfSBmcm9tICcuL0JpbGxEYXRhVGFibGUnO1xyXG5pbXBvcnQgeyBCaWxsRGF0YVJvdyB9IGZyb20gJy4vQmlsbERhdGFSb3cnO1xyXG5pbXBvcnQgeyBCaWxsRGF0YUZpZWxkIH0gZnJvbSAnLi9CaWxsRGF0YUZpZWxkJztcclxuaW1wb3J0IHsgQmlsbERhdGFGaWVsZEJhc2UgfSBmcm9tICcuL0JpbGxEYXRhRmllbGRCYXNlJztcclxuaW1wb3J0IHsgQmlsbERhdGFTdWJGaWVsZCB9IGZyb20gJy4vQmlsbERhdGFTdWJGaWVsZCc7XHJcblxyXG5leHBvcnQgY2xhc3MgQmlsbERhdGEgZXh0ZW5kcyBLaXRCaWxsIHtcclxuICAgIG1haW5UYWJsZTogQmlsbERhdGFUYWJsZTtcclxuXHJcbiAgICBwcm90ZWN0ZWQgUmVzZXRCZWZvcmVMb2FkRnJvbSgpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5SZXNldEJlZm9yZUxvYWRGcm9tKCk7XHJcblxyXG4gICAgICAgIHRoaXMubWFpblRhYmxlID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgQ29udmVydFRvSnNvbk9iamVjdCgpOiB7fSB7XHJcbiAgICAgICAgbGV0IG9iaiA9IHN1cGVyLkNvbnZlcnRUb0pzb25PYmplY3QoKTtcclxuXHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwibWFpblRhYmxlXCIsIHRoaXMubWFpblRhYmxlKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgTG9hZEZyb21Kc29uT2JqZWN0KG9iajoge30pOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuXHJcbiAgICAgICAgdGhpcy5tYWluVGFibGUgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNKc29uU2VyaWFsaXphYmxlKG9iaiwgXCJtYWluVGFibGVcIiwgQmlsbERhdGFUYWJsZSk7XHJcblxyXG4gICAgICAgIHRoaXMuQXBwbHlSZWxhdGlvbnNoaXAoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKlxyXG4gICAgICog5bCG5pWw5o2u6ZuG44CB5Li76KGo44CB5a2Q6KGo44CB6KGM44CB5a2X5q615LmL6Ze055qE6Zq25bGe5YWz57O75bqU55So5Yiw5ZCE5Liq5a+56LGh5LiK44CCXHJcbiAgICAgKiAqL1xyXG4gICAgcHVibGljIEFwcGx5UmVsYXRpb25zaGlwKCk6IEJpbGxEYXRhIHtcclxuICAgICAgICB0aGlzLkFwcGx5MlRhYmxlKHRoaXMsIG51bGwsIHRoaXMubWFpblRhYmxlKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBBcHBseTJUYWJsZShhdHRhY2hlZEJpbGxEYXRhOiBCaWxsRGF0YSwgYXR0YWNoZWRSb3c6IEJpbGxEYXRhUm93LCB0YWJsZTogQmlsbERhdGFUYWJsZSk6IHZvaWQge1xyXG4gICAgICAgIHRhYmxlLmF0dGFjaGVkQmlsbERhdGEgPSBhdHRhY2hlZEJpbGxEYXRhO1xyXG4gICAgICAgIHRhYmxlLmF0dGFjaGVkUm93ID0gYXR0YWNoZWRSb3c7XHJcblxyXG4gICAgICAgIGZvciAobGV0IHJvdyBvZiB0YWJsZS5HZXRSb3dMaXN0KCkpIHtcclxuICAgICAgICAgICAgdGhpcy5BcHBseTJSb3codGFibGUsIHJvdyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgQXBwbHkyUm93KGF0dGFjaGVkVGFibGU6IEJpbGxEYXRhVGFibGUsIHJvdzogQmlsbERhdGFSb3cpOiB2b2lkIHtcclxuICAgICAgICByb3cuYXR0YWNoZWRUYWJsZSA9IGF0dGFjaGVkVGFibGU7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGZpZWxkIG9mIHJvdy5HZXRGaWVsZExpc3QoKSkge1xyXG4gICAgICAgICAgICB0aGlzLkFwcGx5MkZpZWxkKHJvdywgZmllbGQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgY2hpbGRUYWJsZSBvZiByb3cuR2V0Q2hpbGRUYWJsZUxpc3QoKSkge1xyXG4gICAgICAgICAgICB0aGlzLkFwcGx5MlRhYmxlKGF0dGFjaGVkVGFibGUuYXR0YWNoZWRCaWxsRGF0YSwgcm93LCBjaGlsZFRhYmxlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBBcHBseTJGaWVsZChhdHRhY2hlZFJvdzogQmlsbERhdGFSb3csIGZpZWxkOiBCaWxsRGF0YUZpZWxkKTogdm9pZCB7XHJcbiAgICAgICAgZmllbGQuYXR0YWNoZWRSb3cgPSBhdHRhY2hlZFJvdztcclxuXHJcbiAgICAgICAgZm9yIChsZXQgc3ViRmllbGQgb2YgZmllbGQuR2V0U3ViRmllbGRMaXN0KCkpIHtcclxuICAgICAgICAgICAgdGhpcy5BcHBseTJTdWJGaWVsZChmaWVsZCwgc3ViRmllbGQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIEFwcGx5MlN1YkZpZWxkKGF0dGFjaGVkRmllbGQ6IEJpbGxEYXRhRmllbGRCYXNlLCBmaWVsZDogQmlsbERhdGFTdWJGaWVsZCk6IHZvaWQge1xyXG4gICAgICAgIGZpZWxkLmF0dGFjaGVkRmllbGQgPSBmaWVsZDtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgc3ViRmllbGQgb2YgZmllbGQuR2V0U3ViRmllbGRMaXN0KCkpIHtcclxuICAgICAgICAgICAgdGhpcy5BcHBseTJTdWJGaWVsZChmaWVsZCwgc3ViRmllbGQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=