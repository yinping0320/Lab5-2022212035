/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { JsonConvertableImpl } from '../JsonConvertableImpl';
import { BpmnModelJsonHelper } from '../BpmnModelJsonHelper';
import { BillDataField } from './BillDataField';
import { BillDataFields } from './BillDataFields';
import { BillDataTables } from './BillDataTables';
import { BillDataTable } from './BillDataTable';
import { BillDataRowPersistenceType } from './BillDataRowPersistenceType';
export class BillDataRow extends JsonConvertableImpl {
    constructor() {
        super(...arguments);
        this.fields = new BillDataFields();
        this.childTables = new BillDataTables();
        this.persistenceType = BillDataRowPersistenceType.Unchanged;
        //public String getDataIdPath()
        //{
        //    return dataId;
        //}
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.dataId = null;
        this.fields.Clear();
        this.childTables.Clear();
        this.attachedTable = null;
        this.persistenceType = BillDataRowPersistenceType.Unchanged;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "dataId", this.dataId);
        if (this.persistenceType != BillDataRowPersistenceType.Unchanged) {
            BpmnModelJsonHelper.SetAttributeValue(obj, "persist", this.persistenceType);
        }
        /** @type {?} */
        let fields = [];
        for (let value of this.fields.GetList()) {
            fields.push(value.ConvertToJsonObject());
        }
        BpmnModelJsonHelper.SetAttributeValue(obj, "fields", fields);
        if (this.childTables.GetList().length > 0) {
            /** @type {?} */
            let childTables = [];
            for (let value of this.childTables.GetList()) {
                childTables.push(value.ConvertToJsonObject());
            }
            BpmnModelJsonHelper.SetAttributeValue(obj, "childTables", childTables);
        }
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.dataId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "dataId");
        /** @type {?} */
        const persistenceType = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "persist");
        if (persistenceType != null) {
            this.persistenceType = BillDataRowPersistenceType[persistenceType];
        }
        /** @type {?} */
        let fields = BpmnModelJsonHelper.GetAttributeValue(obj, "fields");
        for (let item of fields) {
            /** @type {?} */
            let value = new BillDataField();
            value.LoadFromJsonObject(item);
            this.fields.Add(value);
        }
        /** @type {?} */
        let childTables = BpmnModelJsonHelper.GetAttributeValue(obj, "childTables");
        if (childTables != null) {
            for (let item of childTables) {
                /** @type {?} */
                let value = new BillDataTable();
                value.LoadFromJsonObject(item);
                this.childTables.Add(value);
            }
        }
    }
    /**
     * @return {?}
     */
    GetFieldMap() {
        return this.fields.GetMap();
    }
    /**
     * @return {?}
     */
    GetFieldList() {
        return this.fields.GetList();
    }
    /**
     * @return {?}
     */
    GetChildTableMap() {
        return this.childTables.GetMap();
    }
    /**
     * @return {?}
     */
    GetChildTableList() {
        return this.childTables.GetList();
    }
    /**
     * @param {?} field
     * @return {?}
     */
    AddField(field) {
        this.fields.Add(field);
    }
    /**
     * @param {?} table
     * @return {?}
     */
    AddChildTable(table) {
        this.childTables.Add(table);
    }
}
if (false) {
    /** @type {?} */
    BillDataRow.prototype.dataId;
    /** @type {?} */
    BillDataRow.prototype.fields;
    /** @type {?} */
    BillDataRow.prototype.childTables;
    /** @type {?} */
    BillDataRow.prototype.attachedTable;
    /** @type {?} */
    BillDataRow.prototype.persistenceType;
}
//# sourceMappingURL=data:application/json;base64,