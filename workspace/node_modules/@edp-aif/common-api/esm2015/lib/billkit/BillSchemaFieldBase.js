/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModelJsonHelper } from '../BpmnModelJsonHelper';
import { KitField } from './KitField';
import { DataType } from './DataType';
/**
 * @abstract
 */
export class BillSchemaFieldBase extends KitField {
    constructor() {
        super(...arguments);
        this.dataType = DataType.Unknow;
        this.extendProperties = {};
        this.length = 0;
        this.precision = 0;
        this.scale = 0;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.fieldType = null;
        this.dataType = DataType.Unknow;
        this.caption = null;
        this.extendProperties = {};
        this.length = 0;
        this.precision = 0;
        this.scale = 0;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "type", this.fieldType);
        if (this.dataType != DataType.String) {
            BpmnModelJsonHelper.SetAttributeValue(obj, "data", this.dataType);
        }
        BpmnModelJsonHelper.SetAttributeValue(obj, "cap", this.caption);
        if (this.length != 0) {
            BpmnModelJsonHelper.SetAttributeValue(obj, "length", this.length);
        }
        if (this.precision != 0) {
            BpmnModelJsonHelper.SetAttributeValue(obj, "precision", this.precision);
        }
        if (this.scale != 0) {
            BpmnModelJsonHelper.SetAttributeValue(obj, "scale", this.scale);
        }
        if (this.extendProperties && Object.keys(this.extendProperties).length > 0) {
            /** @type {?} */
            let tmpObj = {};
            for (let key in this.extendProperties) {
                BpmnModelJsonHelper.SetAttributeValue(tmpObj, key, this.extendProperties[key]);
            }
            BpmnModelJsonHelper.SetAttributeValue(obj, "props", tmpObj);
        }
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.fieldType = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "type");
        /** @type {?} */
        let data = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "data");
        if (data == null) {
            this.dataType = DataType.String;
        }
        else {
            this.dataType = DataType[data];
        }
        this.caption = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "cap");
        this.length = BpmnModelJsonHelper.GetAttributeValueAsNumber(obj, "length");
        this.precision = BpmnModelJsonHelper.GetAttributeValueAsNumber(obj, "precision");
        this.scale = BpmnModelJsonHelper.GetAttributeValueAsNumber(obj, "scale");
        /** @type {?} */
        let extendPropertiesObj = BpmnModelJsonHelper.GetAttributeValue(obj, "props");
        if (extendPropertiesObj != null) {
            /** @type {?} */
            let tmpObj = extendPropertiesObj;
            for (let key in tmpObj) {
                /** @type {?} */
                let value = BpmnModelJsonHelper.GetAttributeValueAsString(tmpObj, key);
                this.extendProperties[key] = value;
            }
        }
    }
}
if (false) {
    /** @type {?} */
    BillSchemaFieldBase.prototype.fieldType;
    /** @type {?} */
    BillSchemaFieldBase.prototype.dataType;
    /** @type {?} */
    BillSchemaFieldBase.prototype.caption;
    /** @type {?} */
    BillSchemaFieldBase.prototype.extendProperties;
    /** @type {?} */
    BillSchemaFieldBase.prototype.attachedField;
    /** @type {?} */
    BillSchemaFieldBase.prototype.length;
    /** @type {?} */
    BillSchemaFieldBase.prototype.precision;
    /** @type {?} */
    BillSchemaFieldBase.prototype.scale;
}
//# sourceMappingURL=data:application/json;base64,