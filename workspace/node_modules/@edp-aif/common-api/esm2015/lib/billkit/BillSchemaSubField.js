/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BillSchemaFieldBase } from './BillSchemaFieldBase';
import { BillSchemaSubFields } from './BillSchemaSubFields';
import { BpmnModelJsonHelper } from '../BpmnModelJsonHelper';
export class BillSchemaSubField extends BillSchemaFieldBase {
    constructor() {
        super(...arguments);
        this.subFields = new BillSchemaSubFields();
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.subFields.Clear();
        this.attachedField = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        if (this.subFields.GetList().length > 0) {
            /** @type {?} */
            let subFields = [];
            for (let value of this.subFields.GetList()) {
                subFields.push(value.ConvertToJsonObject());
            }
            BpmnModelJsonHelper.SetAttributeValue(obj, "subFields", subFields);
        }
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        /** @type {?} */
        let subFields = BpmnModelJsonHelper.GetAttributeValue(obj, "subFields");
        if (subFields != null) {
            for (let item of subFields) {
                /** @type {?} */
                let value = new BillSchemaSubField();
                value.LoadFromJsonObject(item);
                this.subFields.Add(value);
            }
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    AddSubField(field) {
        this.subFields.Add(field);
    }
    /**
     * @return {?}
     */
    GetSubFieldMap() {
        return this.subFields.GetMap();
    }
    /**
     * @return {?}
     */
    GetSubFieldList() {
        return this.subFields.GetList();
    }
}
if (false) {
    /** @type {?} */
    BillSchemaSubField.prototype.subFields;
    /** @type {?} */
    BillSchemaSubField.prototype.attachedField;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmlsbFNjaGVtYVN1YkZpZWxkLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVkcC1haWYvY29tbW9uLWFwaS8iLCJzb3VyY2VzIjpbImxpYi9iaWxsa2l0L0JpbGxTY2hlbWFTdWJGaWVsZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDNUQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDNUQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFN0QsTUFBTSxPQUFPLGtCQUFtQixTQUFRLG1CQUFtQjtJQUEzRDs7UUFDSSxjQUFTLEdBQXdCLElBQUksbUJBQW1CLEVBQUUsQ0FBQztJQWdEL0QsQ0FBQzs7Ozs7SUE3Q2EsbUJBQW1CO1FBQ3pCLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBRTVCLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7SUFDOUIsQ0FBQzs7OztJQUVNLG1CQUFtQjs7WUFDbEIsR0FBRyxHQUFHLEtBQUssQ0FBQyxtQkFBbUIsRUFBRTtRQUVyQyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTs7Z0JBQ2pDLFNBQVMsR0FBVSxFQUFFO1lBQ3pCLEtBQUssSUFBSSxLQUFLLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtnQkFDeEMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDO2FBQy9DO1lBQ0QsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQztTQUN0RTtRQUVELE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7SUFFTSxrQkFBa0IsQ0FBQyxHQUFPO1FBQzdCLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQzs7WUFFMUIsU0FBUyxHQUFVLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxXQUFXLENBQUM7UUFDOUUsSUFBSSxTQUFTLElBQUksSUFBSSxFQUFFO1lBQ25CLEtBQUssSUFBSSxJQUFJLElBQUksU0FBUyxFQUFFOztvQkFDcEIsS0FBSyxHQUFHLElBQUksa0JBQWtCLEVBQUU7Z0JBQ3BDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDL0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDN0I7U0FDSjtJQUNMLENBQUM7Ozs7O0lBRU0sV0FBVyxDQUFDLEtBQXlCO1FBQ3hDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlCLENBQUM7Ozs7SUFFTSxjQUFjO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNuQyxDQUFDOzs7O0lBRU0sZUFBZTtRQUNsQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDcEMsQ0FBQztDQUNKOzs7SUFoREcsdUNBQTJEOztJQUMzRCwyQ0FBbUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCaWxsU2NoZW1hRmllbGRCYXNlIH0gZnJvbSAnLi9CaWxsU2NoZW1hRmllbGRCYXNlJztcclxuaW1wb3J0IHsgQmlsbFNjaGVtYVN1YkZpZWxkcyB9IGZyb20gJy4vQmlsbFNjaGVtYVN1YkZpZWxkcyc7XHJcbmltcG9ydCB7IEJwbW5Nb2RlbEpzb25IZWxwZXIgfSBmcm9tICcuLi9CcG1uTW9kZWxKc29uSGVscGVyJztcclxuXHJcbmV4cG9ydCBjbGFzcyBCaWxsU2NoZW1hU3ViRmllbGQgZXh0ZW5kcyBCaWxsU2NoZW1hRmllbGRCYXNlIHtcclxuICAgIHN1YkZpZWxkczogQmlsbFNjaGVtYVN1YkZpZWxkcyA9IG5ldyBCaWxsU2NoZW1hU3ViRmllbGRzKCk7XHJcbiAgICBhdHRhY2hlZEZpZWxkOiBCaWxsU2NoZW1hRmllbGRCYXNlO1xyXG5cclxuICAgIHByb3RlY3RlZCBSZXNldEJlZm9yZUxvYWRGcm9tKCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLlJlc2V0QmVmb3JlTG9hZEZyb20oKTtcclxuXHJcbiAgICAgICAgdGhpcy5zdWJGaWVsZHMuQ2xlYXIoKTtcclxuICAgICAgICB0aGlzLmF0dGFjaGVkRmllbGQgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBDb252ZXJ0VG9Kc29uT2JqZWN0KCk6IHt9IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5zdWJGaWVsZHMuR2V0TGlzdCgpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgbGV0IHN1YkZpZWxkczogYW55W10gPSBbXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgdmFsdWUgb2YgdGhpcy5zdWJGaWVsZHMuR2V0TGlzdCgpKSB7XHJcbiAgICAgICAgICAgICAgICBzdWJGaWVsZHMucHVzaCh2YWx1ZS5Db252ZXJ0VG9Kc29uT2JqZWN0KCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInN1YkZpZWxkc1wiLCBzdWJGaWVsZHMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgTG9hZEZyb21Kc29uT2JqZWN0KG9iajoge30pOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuXHJcbiAgICAgICAgbGV0IHN1YkZpZWxkczogYW55W10gPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJzdWJGaWVsZHNcIik7XHJcbiAgICAgICAgaWYgKHN1YkZpZWxkcyAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGl0ZW0gb2Ygc3ViRmllbGRzKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBuZXcgQmlsbFNjaGVtYVN1YkZpZWxkKCk7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZS5Mb2FkRnJvbUpzb25PYmplY3QoaXRlbSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN1YkZpZWxkcy5BZGQodmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBBZGRTdWJGaWVsZChmaWVsZDogQmlsbFNjaGVtYVN1YkZpZWxkKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zdWJGaWVsZHMuQWRkKGZpZWxkKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgR2V0U3ViRmllbGRNYXAoKTogeyBba2V5OiBzdHJpbmddOiBCaWxsU2NoZW1hU3ViRmllbGQgfSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3ViRmllbGRzLkdldE1hcCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBHZXRTdWJGaWVsZExpc3QoKTogQXJyYXk8QmlsbFNjaGVtYVN1YkZpZWxkPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3ViRmllbGRzLkdldExpc3QoKTtcclxuICAgIH1cclxufVxyXG4iXX0=