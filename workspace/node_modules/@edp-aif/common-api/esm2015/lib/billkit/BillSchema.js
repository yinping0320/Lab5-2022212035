/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModelJsonHelper } from '../BpmnModelJsonHelper';
import { KitBill } from './KitBill';
import { BillSchemaTable } from './BillSchemaTable';
export class BillSchema extends KitBill {
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.mainTable = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "mainTable", this.mainTable);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.mainTable = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "mainTable", BillSchemaTable);
        this.ApplyRelationship();
    }
    /*
         * 将架构、主表、子表、列、字段之间的隶属关系应用到各个对象上。
         * */
    /**
     * @return {?}
     */
    ApplyRelationship() {
        this.Apply2Table(this, null, this.mainTable);
        return this;
    }
    /**
     * @private
     * @param {?} attachedBillSchema
     * @param {?} attachedTable
     * @param {?} table
     * @return {?}
     */
    Apply2Table(attachedBillSchema, attachedTable, table) {
        table.attachedBillSchema = attachedBillSchema;
        table.attachedTable = attachedTable;
        for (let field of table.getFieldList()) {
            this.Apply2Field(table, field);
        }
        for (let childTable of table.GetChildTableList()) {
            this.Apply2Table(table.attachedBillSchema, table, childTable);
        }
    }
    /**
     * @private
     * @param {?} attachedTable
     * @param {?} field
     * @return {?}
     */
    Apply2Field(attachedTable, field) {
        field.attachedTable = attachedTable;
        for (let subField of field.GetSubFieldList()) {
            this.Apply2SubField(field, subField);
        }
    }
    /**
     * @private
     * @param {?} attachedField
     * @param {?} field
     * @return {?}
     */
    Apply2SubField(attachedField, field) {
        field.attachedField = attachedField;
        for (let subField of field.GetSubFieldList()) {
            this.Apply2SubField(field, subField);
        }
    }
}
if (false) {
    /** @type {?} */
    BillSchema.prototype.mainTable;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmlsbFNjaGVtYS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlZHAtYWlmL2NvbW1vbi1hcGkvIiwic291cmNlcyI6WyJsaWIvYmlsbGtpdC9CaWxsU2NoZW1hLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM3RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUtwRCxNQUFNLE9BQU8sVUFBVyxTQUFRLE9BQU87Ozs7O0lBR3pCLG1CQUFtQjtRQUN6QixLQUFLLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUU1QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztJQUMxQixDQUFDOzs7O0lBR00sbUJBQW1COztZQUNsQixHQUFHLEdBQUcsS0FBSyxDQUFDLG1CQUFtQixFQUFFO1FBRXJDLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRXhFLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7SUFHTSxrQkFBa0IsQ0FBQyxHQUFPO1FBQzdCLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUU5QixJQUFJLENBQUMsU0FBUyxHQUFHLG1CQUFtQixDQUFDLG1DQUFtQyxDQUFDLEdBQUcsRUFBRSxXQUFXLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFFNUcsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDN0IsQ0FBQzs7Ozs7OztJQUtNLGlCQUFpQjtRQUNwQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRTdDLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7Ozs7Ozs7O0lBRU8sV0FBVyxDQUFDLGtCQUE4QixFQUFFLGFBQThCLEVBQUUsS0FBc0I7UUFDdEcsS0FBSyxDQUFDLGtCQUFrQixHQUFHLGtCQUFrQixDQUFDO1FBQzlDLEtBQUssQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO1FBRXBDLEtBQUssSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLFlBQVksRUFBRSxFQUFFO1lBQ3BDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ2xDO1FBRUQsS0FBSyxJQUFJLFVBQVUsSUFBSSxLQUFLLENBQUMsaUJBQWlCLEVBQUUsRUFBRTtZQUM5QyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7U0FDakU7SUFDTCxDQUFDOzs7Ozs7O0lBRU8sV0FBVyxDQUFDLGFBQThCLEVBQUUsS0FBc0I7UUFDdEUsS0FBSyxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7UUFFcEMsS0FBSyxJQUFJLFFBQVEsSUFBSSxLQUFLLENBQUMsZUFBZSxFQUFFLEVBQUU7WUFDMUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDeEM7SUFDTCxDQUFDOzs7Ozs7O0lBRU8sY0FBYyxDQUFDLGFBQWtDLEVBQUUsS0FBeUI7UUFDaEYsS0FBSyxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7UUFFcEMsS0FBSyxJQUFJLFFBQVEsSUFBSSxLQUFLLENBQUMsZUFBZSxFQUFFLEVBQUU7WUFDMUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDeEM7SUFDTCxDQUFDO0NBQ0o7OztJQS9ERywrQkFBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCcG1uTW9kZWxKc29uSGVscGVyIH0gZnJvbSAnLi4vQnBtbk1vZGVsSnNvbkhlbHBlcic7XHJcbmltcG9ydCB7IEtpdEJpbGwgfSBmcm9tICcuL0tpdEJpbGwnO1xyXG5pbXBvcnQgeyBCaWxsU2NoZW1hVGFibGUgfSBmcm9tICcuL0JpbGxTY2hlbWFUYWJsZSc7XHJcbmltcG9ydCB7IEJpbGxTY2hlbWFGaWVsZCB9IGZyb20gJy4vQmlsbFNjaGVtYUZpZWxkJztcclxuaW1wb3J0IHsgQmlsbFNjaGVtYUZpZWxkQmFzZSB9IGZyb20gJy4vQmlsbFNjaGVtYUZpZWxkQmFzZSc7XHJcbmltcG9ydCB7IEJpbGxTY2hlbWFTdWJGaWVsZCB9IGZyb20gJy4vQmlsbFNjaGVtYVN1YkZpZWxkJztcclxuXHJcbmV4cG9ydCBjbGFzcyBCaWxsU2NoZW1hIGV4dGVuZHMgS2l0QmlsbCB7XHJcbiAgICBtYWluVGFibGU6IEJpbGxTY2hlbWFUYWJsZTtcclxuXHJcbiAgICBwcm90ZWN0ZWQgUmVzZXRCZWZvcmVMb2FkRnJvbSgpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5SZXNldEJlZm9yZUxvYWRGcm9tKCk7XHJcblxyXG4gICAgICAgIHRoaXMubWFpblRhYmxlID0gbnVsbDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHVibGljIENvbnZlcnRUb0pzb25PYmplY3QoKToge30ge1xyXG4gICAgICAgIGxldCBvYmogPSBzdXBlci5Db252ZXJ0VG9Kc29uT2JqZWN0KCk7XHJcblxyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIm1haW5UYWJsZVwiLCB0aGlzLm1haW5UYWJsZSk7XHJcblxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHB1YmxpYyBMb2FkRnJvbUpzb25PYmplY3Qob2JqOiB7fSk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG5cclxuICAgICAgICB0aGlzLm1haW5UYWJsZSA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc0pzb25TZXJpYWxpemFibGUob2JqLCBcIm1haW5UYWJsZVwiLCBCaWxsU2NoZW1hVGFibGUpO1xyXG5cclxuICAgICAgICB0aGlzLkFwcGx5UmVsYXRpb25zaGlwKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLypcclxuICAgICAqIOWwhuaetuaehOOAgeS4u+ihqOOAgeWtkOihqOOAgeWIl+OAgeWtl+auteS5i+mXtOeahOmatuWxnuWFs+ezu+W6lOeUqOWIsOWQhOS4quWvueixoeS4iuOAglxyXG4gICAgICogKi9cclxuICAgIHB1YmxpYyBBcHBseVJlbGF0aW9uc2hpcCgpOiBCaWxsU2NoZW1hIHtcclxuICAgICAgICB0aGlzLkFwcGx5MlRhYmxlKHRoaXMsIG51bGwsIHRoaXMubWFpblRhYmxlKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBBcHBseTJUYWJsZShhdHRhY2hlZEJpbGxTY2hlbWE6IEJpbGxTY2hlbWEsIGF0dGFjaGVkVGFibGU6IEJpbGxTY2hlbWFUYWJsZSwgdGFibGU6IEJpbGxTY2hlbWFUYWJsZSk6IHZvaWQge1xyXG4gICAgICAgIHRhYmxlLmF0dGFjaGVkQmlsbFNjaGVtYSA9IGF0dGFjaGVkQmlsbFNjaGVtYTtcclxuICAgICAgICB0YWJsZS5hdHRhY2hlZFRhYmxlID0gYXR0YWNoZWRUYWJsZTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgZmllbGQgb2YgdGFibGUuZ2V0RmllbGRMaXN0KCkpIHtcclxuICAgICAgICAgICAgdGhpcy5BcHBseTJGaWVsZCh0YWJsZSwgZmllbGQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgY2hpbGRUYWJsZSBvZiB0YWJsZS5HZXRDaGlsZFRhYmxlTGlzdCgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuQXBwbHkyVGFibGUodGFibGUuYXR0YWNoZWRCaWxsU2NoZW1hLCB0YWJsZSwgY2hpbGRUYWJsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgQXBwbHkyRmllbGQoYXR0YWNoZWRUYWJsZTogQmlsbFNjaGVtYVRhYmxlLCBmaWVsZDogQmlsbFNjaGVtYUZpZWxkKTogdm9pZCB7XHJcbiAgICAgICAgZmllbGQuYXR0YWNoZWRUYWJsZSA9IGF0dGFjaGVkVGFibGU7XHJcblxyXG4gICAgICAgIGZvciAobGV0IHN1YkZpZWxkIG9mIGZpZWxkLkdldFN1YkZpZWxkTGlzdCgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuQXBwbHkyU3ViRmllbGQoZmllbGQsIHN1YkZpZWxkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBBcHBseTJTdWJGaWVsZChhdHRhY2hlZEZpZWxkOiBCaWxsU2NoZW1hRmllbGRCYXNlLCBmaWVsZDogQmlsbFNjaGVtYVN1YkZpZWxkKTogdm9pZCB7XHJcbiAgICAgICAgZmllbGQuYXR0YWNoZWRGaWVsZCA9IGF0dGFjaGVkRmllbGQ7XHJcblxyXG4gICAgICAgIGZvciAobGV0IHN1YkZpZWxkIG9mIGZpZWxkLkdldFN1YkZpZWxkTGlzdCgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuQXBwbHkyU3ViRmllbGQoZmllbGQsIHN1YkZpZWxkKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0=