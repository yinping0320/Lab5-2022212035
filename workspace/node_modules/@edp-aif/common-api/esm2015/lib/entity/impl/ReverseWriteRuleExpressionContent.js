/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModelJsonHelper } from "../../BpmnModelJsonHelper";
import { JsonConvertableImpl } from "../../JsonConvertableImpl";
import { ExpressionType } from "./ExpressionType";
import { ReverseMode } from "./ReverseMode";
export class ReverseWriteRuleExpressionContent extends JsonConvertableImpl {
    constructor() {
        super(...arguments);
        this.expressionType = ExpressionType.FIELDVALUE;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.upFieldCodePath = null;
        this.upVoFieldType = null;
        this.upVoFieldName = null;
        this.upVoTableName = null;
        this.downFieldCodePath = null;
        this.downVoFieldType = null;
        this.downVoFieldName = null;
        this.downVoTableName = null;
        this.expressionType = ExpressionType.FIELDVALUE;
        this.reverseMode = ReverseMode.COVERING;
        this.expressionContent = null;
        this.constantValue = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "upFieldCodePath", this.upFieldCodePath);
        BpmnModelJsonHelper.SetAttributeValue(obj, "upVoFieldType", this.upVoFieldType);
        BpmnModelJsonHelper.SetAttributeValue(obj, "upVoFieldName", this.upVoFieldName);
        BpmnModelJsonHelper.SetAttributeValue(obj, "upVoTableName", this.upVoTableName);
        BpmnModelJsonHelper.SetAttributeValue(obj, "downFieldCodePath", this.downFieldCodePath);
        BpmnModelJsonHelper.SetAttributeValue(obj, "downVoFieldType", this.downVoFieldType);
        BpmnModelJsonHelper.SetAttributeValue(obj, "downVoFieldName", this.downVoFieldName);
        BpmnModelJsonHelper.SetAttributeValue(obj, "downVoTableName", this.downVoTableName);
        BpmnModelJsonHelper.SetAttributeValue(obj, "expressionType", this.expressionType);
        BpmnModelJsonHelper.SetAttributeValue(obj, "reverseMode", this.reverseMode);
        BpmnModelJsonHelper.SetAttributeValue(obj, "expressionContent", this.expressionContent);
        BpmnModelJsonHelper.SetAttributeValue(obj, "constantValue", this.constantValue);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.upFieldCodePath = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "upFieldCodePath");
        this.upVoFieldType = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "upVoFieldType");
        this.upVoFieldName = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "upVoFieldName");
        this.upVoTableName = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "upVoTableName");
        this.downFieldCodePath = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "downFieldCodePath");
        this.downVoFieldType = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "downVoFieldType");
        this.downVoFieldName = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "downVoFieldName");
        this.downVoTableName = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "downVoTableName");
        if (BpmnModelJsonHelper.GetAttributeValueAsString(obj, "expressionType") != null) {
            this.expressionType = ExpressionType[BpmnModelJsonHelper.GetAttributeValueAsString(obj, "expressionType")];
        }
        if (BpmnModelJsonHelper.GetAttributeValueAsString(obj, "reverseMode") != null) {
            this.reverseMode = ReverseMode[BpmnModelJsonHelper.GetAttributeValueAsString(obj, "reverseMode")];
        }
        this.expressionContent = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "expressionContent");
        this.constantValue = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "constantValue");
    }
}
if (false) {
    /** @type {?} */
    ReverseWriteRuleExpressionContent.prototype.expressionContent;
    /** @type {?} */
    ReverseWriteRuleExpressionContent.prototype.upFieldCodePath;
    /** @type {?} */
    ReverseWriteRuleExpressionContent.prototype.upVoFieldType;
    /** @type {?} */
    ReverseWriteRuleExpressionContent.prototype.upVoFieldName;
    /** @type {?} */
    ReverseWriteRuleExpressionContent.prototype.upVoTableName;
    /** @type {?} */
    ReverseWriteRuleExpressionContent.prototype.downFieldCodePath;
    /** @type {?} */
    ReverseWriteRuleExpressionContent.prototype.downVoFieldType;
    /** @type {?} */
    ReverseWriteRuleExpressionContent.prototype.downVoFieldName;
    /** @type {?} */
    ReverseWriteRuleExpressionContent.prototype.downVoTableName;
    /** @type {?} */
    ReverseWriteRuleExpressionContent.prototype.expressionType;
    /** @type {?} */
    ReverseWriteRuleExpressionContent.prototype.reverseMode;
    /** @type {?} */
    ReverseWriteRuleExpressionContent.prototype.constantValue;
}
//# sourceMappingURL=data:application/json;base64,