/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BizProcessEntity } from './BizProcessEntity';
import { BpmnModelJsonHelper } from '../../BpmnModelJsonHelper';
/**
 * 生单流程实体类。
 */
export class CreationProcessEntity extends BizProcessEntity {
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.creationRuleId = null;
        this.reverseWriteRuleId = null;
        this.reverseWriteRuleClassName = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "creationRuleId", this.creationRuleId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "reverseWriteRuleId", this.reverseWriteRuleId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "reverseWriteRuleClassName", this.reverseWriteRuleClassName);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.creationRuleId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "creationRuleId");
        this.reverseWriteRuleId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "reverseWriteRuleId");
        this.reverseWriteRuleClassName = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "reverseWriteRuleClassName");
    }
}
if (false) {
    /** @type {?} */
    CreationProcessEntity.prototype.creationRuleId;
    /** @type {?} */
    CreationProcessEntity.prototype.reverseWriteRuleId;
    /** @type {?} */
    CreationProcessEntity.prototype.reverseWriteRuleClassName;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ3JlYXRpb25Qcm9jZXNzRW50aXR5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVkcC1haWYvY29tbW9uLWFwaS8iLCJzb3VyY2VzIjpbImxpYi9lbnRpdHkvaW1wbC9DcmVhdGlvblByb2Nlc3NFbnRpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRXRELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDOzs7O0FBR2hFLE1BQU0sT0FBTyxxQkFBc0IsU0FBUSxnQkFBZ0I7Ozs7O0lBSzdDLG1CQUFtQjtRQUN6QixLQUFLLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUU1QixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztRQUMzQixJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDO1FBQy9CLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxJQUFJLENBQUM7SUFDMUMsQ0FBQzs7OztJQUVNLG1CQUFtQjs7WUFDbEIsR0FBRyxHQUFHLEtBQUssQ0FBQyxtQkFBbUIsRUFBRTtRQUVyQyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ2xGLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxvQkFBb0IsRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUMxRixtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsMkJBQTJCLEVBQUUsSUFBSSxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFFeEcsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVNLGtCQUFrQixDQUFDLEdBQU87UUFDN0IsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxjQUFjLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLGdCQUFnQixDQUFDLENBQUM7UUFDM0YsSUFBSSxDQUFDLGtCQUFrQixHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO1FBQ25HLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsMkJBQTJCLENBQUMsQ0FBQztJQUNySCxDQUFDO0NBQ0o7OztJQTdCRywrQ0FBdUI7O0lBQ3ZCLG1EQUEyQjs7SUFDM0IsMERBQWtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQml6UHJvY2Vzc0VudGl0eSB9IGZyb20gJy4vQml6UHJvY2Vzc0VudGl0eSc7XHJcbmltcG9ydCB7IElDcmVhdGlvblByb2Nlc3NFbnRpdHkgfSBmcm9tICcuLi9JQ3JlYXRpb25Qcm9jZXNzRW50aXR5JztcclxuaW1wb3J0IHsgQnBtbk1vZGVsSnNvbkhlbHBlciB9IGZyb20gJy4uLy4uL0JwbW5Nb2RlbEpzb25IZWxwZXInO1xyXG5cclxuLyoq55Sf5Y2V5rWB56iL5a6e5L2T57G744CCKi9cclxuZXhwb3J0IGNsYXNzIENyZWF0aW9uUHJvY2Vzc0VudGl0eSBleHRlbmRzIEJpelByb2Nlc3NFbnRpdHkgaW1wbGVtZW50cyBJQ3JlYXRpb25Qcm9jZXNzRW50aXR5IHtcclxuICAgIGNyZWF0aW9uUnVsZUlkOiBzdHJpbmc7XHJcbiAgICByZXZlcnNlV3JpdGVSdWxlSWQ6IHN0cmluZztcclxuICAgIHJldmVyc2VXcml0ZVJ1bGVDbGFzc05hbWU6IHN0cmluZztcclxuXHJcbiAgICBwcm90ZWN0ZWQgUmVzZXRCZWZvcmVMb2FkRnJvbSgpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5SZXNldEJlZm9yZUxvYWRGcm9tKCk7XHJcblxyXG4gICAgICAgIHRoaXMuY3JlYXRpb25SdWxlSWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMucmV2ZXJzZVdyaXRlUnVsZUlkID0gbnVsbDtcclxuICAgICAgICB0aGlzLnJldmVyc2VXcml0ZVJ1bGVDbGFzc05hbWUgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBDb252ZXJ0VG9Kc29uT2JqZWN0KCk6IHt9IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG5cclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJjcmVhdGlvblJ1bGVJZFwiLCB0aGlzLmNyZWF0aW9uUnVsZUlkKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJyZXZlcnNlV3JpdGVSdWxlSWRcIiwgdGhpcy5yZXZlcnNlV3JpdGVSdWxlSWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInJldmVyc2VXcml0ZVJ1bGVDbGFzc05hbWVcIiwgdGhpcy5yZXZlcnNlV3JpdGVSdWxlQ2xhc3NOYW1lKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgTG9hZEZyb21Kc29uT2JqZWN0KG9iajoge30pOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuXHJcbiAgICAgICAgdGhpcy5jcmVhdGlvblJ1bGVJZCA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwiY3JlYXRpb25SdWxlSWRcIik7XHJcbiAgICAgICAgdGhpcy5yZXZlcnNlV3JpdGVSdWxlSWQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcInJldmVyc2VXcml0ZVJ1bGVJZFwiKTtcclxuICAgICAgICB0aGlzLnJldmVyc2VXcml0ZVJ1bGVDbGFzc05hbWUgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcInJldmVyc2VXcml0ZVJ1bGVDbGFzc05hbWVcIik7XHJcbiAgICB9XHJcbn0iXX0=