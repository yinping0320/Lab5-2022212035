/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModelJsonHelper } from "../../BpmnModelJsonHelper";
import { JsonConvertableImpl } from "../../JsonConvertableImpl";
import { TaskHandlingMenuParameterMode } from "./TaskHandlingMenuParameterMode";
export class TaskHandlingMenuParameter extends JsonConvertableImpl {
    constructor() {
        super(...arguments);
        this.parameterMode = TaskHandlingMenuParameterMode.CONSTANT;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.parameterMode = TaskHandlingMenuParameterMode.CONSTANT;
        this.code = null;
        this.constantValue = null;
        this.fieldContent = null;
        this.expressionContent = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "parameterMode", this.parameterMode);
        BpmnModelJsonHelper.SetAttributeValue(obj, "code", this.code);
        BpmnModelJsonHelper.SetAttributeValue(obj, "constantValue", this.constantValue);
        BpmnModelJsonHelper.SetAttributeValue(obj, "fieldContent", this.fieldContent);
        BpmnModelJsonHelper.SetAttributeValue(obj, "expressionContent", this.expressionContent);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.parameterMode = TaskHandlingMenuParameterMode[BpmnModelJsonHelper.GetAttributeValueAsString(obj, "parameterMode")];
        this.code = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "code");
        this.constantValue = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "constantValue");
        this.fieldContent = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "fieldContent");
        this.expressionContent = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "expressionContent");
    }
}
if (false) {
    /** @type {?} */
    TaskHandlingMenuParameter.prototype.parameterMode;
    /** @type {?} */
    TaskHandlingMenuParameter.prototype.code;
    /** @type {?} */
    TaskHandlingMenuParameter.prototype.constantValue;
    /** @type {?} */
    TaskHandlingMenuParameter.prototype.fieldContent;
    /** @type {?} */
    TaskHandlingMenuParameter.prototype.expressionContent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFza0hhbmRsaW5nTWVudVBhcmFtZXRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlZHAtYWlmL2NvbW1vbi1hcGkvIiwic291cmNlcyI6WyJsaWIvZW50aXR5L2ltcGwvVGFza0hhbmRsaW5nTWVudVBhcmFtZXRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDaEUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDaEUsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFFaEYsTUFBTSxPQUFPLHlCQUEwQixTQUFRLG1CQUFtQjtJQUFsRTs7UUFDSSxrQkFBYSxHQUFHLDZCQUE2QixDQUFDLFFBQVEsQ0FBQztJQXFDM0QsQ0FBQzs7Ozs7SUEvQmEsbUJBQW1CO1FBQ3pCLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBRTVCLElBQUksQ0FBQyxhQUFhLEdBQUcsNkJBQTZCLENBQUMsUUFBUSxDQUFDO1FBQzVELElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO1FBQzFCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUM7SUFDbEMsQ0FBQzs7OztJQUVNLG1CQUFtQjs7WUFDbEIsR0FBRyxHQUFHLEtBQUssQ0FBQyxtQkFBbUIsRUFBRTtRQUVyQyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsZUFBZSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNoRixtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5RCxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsZUFBZSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNoRixtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsY0FBYyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUM5RSxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFFeEYsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVNLGtCQUFrQixDQUFDLEdBQU87UUFDN0IsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxhQUFhLEdBQUcsNkJBQTZCLENBQUMsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLGVBQWUsQ0FBQyxDQUFDLENBQUM7UUFDeEgsSUFBSSxDQUFDLElBQUksR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDdkUsSUFBSSxDQUFDLGFBQWEsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFDekYsSUFBSSxDQUFDLFlBQVksR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDdkYsSUFBSSxDQUFDLGlCQUFpQixHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0lBQ3JHLENBQUM7Q0FDSjs7O0lBckNHLGtEQUF1RDs7SUFDdkQseUNBQWE7O0lBQ2Isa0RBQXNCOztJQUN0QixpREFBcUI7O0lBQ3JCLHNEQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJwbW5Nb2RlbEpzb25IZWxwZXIgfSBmcm9tIFwiLi4vLi4vQnBtbk1vZGVsSnNvbkhlbHBlclwiO1xyXG5pbXBvcnQgeyBKc29uQ29udmVydGFibGVJbXBsIH0gZnJvbSBcIi4uLy4uL0pzb25Db252ZXJ0YWJsZUltcGxcIjtcclxuaW1wb3J0IHsgVGFza0hhbmRsaW5nTWVudVBhcmFtZXRlck1vZGUgfSBmcm9tIFwiLi9UYXNrSGFuZGxpbmdNZW51UGFyYW1ldGVyTW9kZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFRhc2tIYW5kbGluZ01lbnVQYXJhbWV0ZXIgZXh0ZW5kcyBKc29uQ29udmVydGFibGVJbXBsIHtcclxuICAgIHBhcmFtZXRlck1vZGUgPSBUYXNrSGFuZGxpbmdNZW51UGFyYW1ldGVyTW9kZS5DT05TVEFOVDtcclxuICAgIGNvZGU6IHN0cmluZztcclxuICAgIGNvbnN0YW50VmFsdWU6IHN0cmluZztcclxuICAgIGZpZWxkQ29udGVudDogc3RyaW5nO1xyXG4gICAgZXhwcmVzc2lvbkNvbnRlbnQ6IHN0cmluZztcclxuXHJcbiAgICBwcm90ZWN0ZWQgUmVzZXRCZWZvcmVMb2FkRnJvbSgpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5SZXNldEJlZm9yZUxvYWRGcm9tKCk7XHJcblxyXG4gICAgICAgIHRoaXMucGFyYW1ldGVyTW9kZSA9IFRhc2tIYW5kbGluZ01lbnVQYXJhbWV0ZXJNb2RlLkNPTlNUQU5UO1xyXG4gICAgICAgIHRoaXMuY29kZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5jb25zdGFudFZhbHVlID0gbnVsbDtcclxuICAgICAgICB0aGlzLmZpZWxkQ29udGVudCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5leHByZXNzaW9uQ29udGVudCA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIENvbnZlcnRUb0pzb25PYmplY3QoKToge30ge1xyXG4gICAgICAgIGxldCBvYmogPSBzdXBlci5Db252ZXJ0VG9Kc29uT2JqZWN0KCk7XHJcblxyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInBhcmFtZXRlck1vZGVcIiwgdGhpcy5wYXJhbWV0ZXJNb2RlKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJjb2RlXCIsIHRoaXMuY29kZSk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiY29uc3RhbnRWYWx1ZVwiLCB0aGlzLmNvbnN0YW50VmFsdWUpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcImZpZWxkQ29udGVudFwiLCB0aGlzLmZpZWxkQ29udGVudCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiZXhwcmVzc2lvbkNvbnRlbnRcIiwgdGhpcy5leHByZXNzaW9uQ29udGVudCk7XHJcblxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIExvYWRGcm9tSnNvbk9iamVjdChvYmo6IHt9KTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuTG9hZEZyb21Kc29uT2JqZWN0KG9iaik7XHJcblxyXG4gICAgICAgIHRoaXMucGFyYW1ldGVyTW9kZSA9IFRhc2tIYW5kbGluZ01lbnVQYXJhbWV0ZXJNb2RlW0JwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwicGFyYW1ldGVyTW9kZVwiKV07XHJcbiAgICAgICAgdGhpcy5jb2RlID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJjb2RlXCIpO1xyXG4gICAgICAgIHRoaXMuY29uc3RhbnRWYWx1ZSA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwiY29uc3RhbnRWYWx1ZVwiKTtcclxuICAgICAgICB0aGlzLmZpZWxkQ29udGVudCA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwiZmllbGRDb250ZW50XCIpO1xyXG4gICAgICAgIHRoaXMuZXhwcmVzc2lvbkNvbnRlbnQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcImV4cHJlc3Npb25Db250ZW50XCIpO1xyXG4gICAgfVxyXG59Il19