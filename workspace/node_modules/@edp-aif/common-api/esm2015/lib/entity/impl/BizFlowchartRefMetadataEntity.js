/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BizFlowchartRefEntity } from './BizFlowchartRefEntity';
import { BpmnModelJsonHelper } from '../../BpmnModelJsonHelper';
export class BizFlowchartRefMetadataEntity extends BizFlowchartRefEntity {
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.refAppCode = null;
        this.refSuCode = null;
        this.refBoId = null;
        this.bizFlowchartAppCode = null;
        this.bizFlowchartSuCode = null;
        this.bizFlowchartBoId = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "refAppCode", this.refAppCode);
        BpmnModelJsonHelper.SetAttributeValue(obj, "refSuCode", this.refSuCode);
        BpmnModelJsonHelper.SetAttributeValue(obj, "refBoId", this.refBoId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "bizFlowchartAppCode", this.bizFlowchartAppCode);
        BpmnModelJsonHelper.SetAttributeValue(obj, "bizFlowchartSuCode", this.bizFlowchartSuCode);
        BpmnModelJsonHelper.SetAttributeValue(obj, "bizFlowchartBoId", this.bizFlowchartBoId);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.refAppCode = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "refAppCode");
        this.refSuCode = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "refSuCode");
        this.refBoId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "refBoId");
        this.bizFlowchartAppCode = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "bizFlowchartAppCode");
        this.bizFlowchartSuCode = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "bizFlowchartSuCode");
        this.bizFlowchartBoId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "bizFlowchartBoId");
    }
}
if (false) {
    /** @type {?} */
    BizFlowchartRefMetadataEntity.prototype.refAppCode;
    /** @type {?} */
    BizFlowchartRefMetadataEntity.prototype.refSuCode;
    /** @type {?} */
    BizFlowchartRefMetadataEntity.prototype.refBoId;
    /** @type {?} */
    BizFlowchartRefMetadataEntity.prototype.bizFlowchartAppCode;
    /** @type {?} */
    BizFlowchartRefMetadataEntity.prototype.bizFlowchartSuCode;
    /** @type {?} */
    BizFlowchartRefMetadataEntity.prototype.bizFlowchartBoId;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQml6Rmxvd2NoYXJ0UmVmTWV0YWRhdGFFbnRpdHkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZWRwLWFpZi9jb21tb24tYXBpLyIsInNvdXJjZXMiOlsibGliL2VudGl0eS9pbXBsL0JpekZsb3djaGFydFJlZk1ldGFkYXRhRW50aXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUVoRSxNQUFNLE9BQU8sNkJBQThCLFNBQVEscUJBQXFCOzs7OztJQVExRCxtQkFBbUI7UUFDekIsS0FBSyxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFFNUIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFDdEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7UUFDcEIsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQztRQUNoQyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDO1FBQy9CLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7SUFDakMsQ0FBQzs7OztJQUVNLG1CQUFtQjs7WUFDbEIsR0FBRyxHQUFHLEtBQUssQ0FBQyxtQkFBbUIsRUFBRTtRQUVyQyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsWUFBWSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMxRSxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN4RSxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNwRSxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDNUYsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLG9CQUFvQixFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQzFGLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxrQkFBa0IsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUV0RixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7Ozs7O0lBRU0sa0JBQWtCLENBQUMsR0FBTztRQUM3QixLQUFLLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFOUIsSUFBSSxDQUFDLFVBQVUsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDbkYsSUFBSSxDQUFDLFNBQVMsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDakYsSUFBSSxDQUFDLE9BQU8sR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDN0UsSUFBSSxDQUFDLG1CQUFtQixHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO1FBQ3JHLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztRQUNuRyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLGtCQUFrQixDQUFDLENBQUM7SUFDbkcsQ0FBQztDQUNKOzs7SUF6Q0csbURBQW1COztJQUNuQixrREFBa0I7O0lBQ2xCLGdEQUFnQjs7SUFDaEIsNERBQTRCOztJQUM1QiwyREFBMkI7O0lBQzNCLHlEQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElCaXpGbG93Y2hhcnRSZWZNZXRhZGF0YUVudGl0eSB9IGZyb20gXCIuLi9JQml6Rmxvd2NoYXJ0UmVmTWV0YWRhdGFFbnRpdHlcIjtcclxuaW1wb3J0IHsgQml6Rmxvd2NoYXJ0UmVmRW50aXR5IH0gZnJvbSAnLi9CaXpGbG93Y2hhcnRSZWZFbnRpdHknO1xyXG5pbXBvcnQgeyBCcG1uTW9kZWxKc29uSGVscGVyIH0gZnJvbSAnLi4vLi4vQnBtbk1vZGVsSnNvbkhlbHBlcic7XHJcblxyXG5leHBvcnQgY2xhc3MgQml6Rmxvd2NoYXJ0UmVmTWV0YWRhdGFFbnRpdHkgZXh0ZW5kcyBCaXpGbG93Y2hhcnRSZWZFbnRpdHkgaW1wbGVtZW50cyBJQml6Rmxvd2NoYXJ0UmVmTWV0YWRhdGFFbnRpdHkge1xyXG4gICAgcmVmQXBwQ29kZTogc3RyaW5nO1xyXG4gICAgcmVmU3VDb2RlOiBzdHJpbmc7XHJcbiAgICByZWZCb0lkOiBzdHJpbmc7XHJcbiAgICBiaXpGbG93Y2hhcnRBcHBDb2RlOiBzdHJpbmc7XHJcbiAgICBiaXpGbG93Y2hhcnRTdUNvZGU6IHN0cmluZztcclxuICAgIGJpekZsb3djaGFydEJvSWQ6IHN0cmluZztcclxuXHJcbiAgICBwcm90ZWN0ZWQgUmVzZXRCZWZvcmVMb2FkRnJvbSgpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5SZXNldEJlZm9yZUxvYWRGcm9tKCk7XHJcblxyXG4gICAgICAgIHRoaXMucmVmQXBwQ29kZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5yZWZTdUNvZGUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMucmVmQm9JZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5iaXpGbG93Y2hhcnRBcHBDb2RlID0gbnVsbDtcclxuICAgICAgICB0aGlzLmJpekZsb3djaGFydFN1Q29kZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5iaXpGbG93Y2hhcnRCb0lkID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgQ29udmVydFRvSnNvbk9iamVjdCgpOiB7fSB7XHJcbiAgICAgICAgbGV0IG9iaiA9IHN1cGVyLkNvbnZlcnRUb0pzb25PYmplY3QoKTtcclxuXHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwicmVmQXBwQ29kZVwiLCB0aGlzLnJlZkFwcENvZGUpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInJlZlN1Q29kZVwiLCB0aGlzLnJlZlN1Q29kZSk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwicmVmQm9JZFwiLCB0aGlzLnJlZkJvSWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcImJpekZsb3djaGFydEFwcENvZGVcIiwgdGhpcy5iaXpGbG93Y2hhcnRBcHBDb2RlKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJiaXpGbG93Y2hhcnRTdUNvZGVcIiwgdGhpcy5iaXpGbG93Y2hhcnRTdUNvZGUpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcImJpekZsb3djaGFydEJvSWRcIiwgdGhpcy5iaXpGbG93Y2hhcnRCb0lkKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgTG9hZEZyb21Kc29uT2JqZWN0KG9iajoge30pOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuXHJcbiAgICAgICAgdGhpcy5yZWZBcHBDb2RlID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJyZWZBcHBDb2RlXCIpO1xyXG4gICAgICAgIHRoaXMucmVmU3VDb2RlID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJyZWZTdUNvZGVcIik7XHJcbiAgICAgICAgdGhpcy5yZWZCb0lkID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJyZWZCb0lkXCIpO1xyXG4gICAgICAgIHRoaXMuYml6Rmxvd2NoYXJ0QXBwQ29kZSA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwiYml6Rmxvd2NoYXJ0QXBwQ29kZVwiKTtcclxuICAgICAgICB0aGlzLmJpekZsb3djaGFydFN1Q29kZSA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwiYml6Rmxvd2NoYXJ0U3VDb2RlXCIpO1xyXG4gICAgICAgIHRoaXMuYml6Rmxvd2NoYXJ0Qm9JZCA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwiYml6Rmxvd2NoYXJ0Qm9JZFwiKTtcclxuICAgIH1cclxufSJdfQ==