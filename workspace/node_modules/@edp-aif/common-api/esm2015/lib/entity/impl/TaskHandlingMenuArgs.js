/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModelJsonHelper } from "../../BpmnModelJsonHelper";
import { JsonConvertableImpl } from "../../JsonConvertableImpl";
import { TaskHandlingMenuParameter } from "./TaskHandlingMenuParameter";
export class TaskHandlingMenuArgs extends JsonConvertableImpl {
    constructor() {
        super(...arguments);
        this.parameters = [];
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.menuId = null;
        this.menuName = null;
        this.parameters = [];
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "menuId", this.menuId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "menuName", this.menuName);
        BpmnModelJsonHelper.SetAttributeValue(obj, "parameters", this.parameters);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.menuId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "menuId");
        this.menuName = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "menuName");
        this.parameters = BpmnModelJsonHelper.GetAttributeValueAsList(obj, "parameters", TaskHandlingMenuParameter);
    }
}
if (false) {
    /** @type {?} */
    TaskHandlingMenuArgs.prototype.menuId;
    /** @type {?} */
    TaskHandlingMenuArgs.prototype.menuName;
    /** @type {?} */
    TaskHandlingMenuArgs.prototype.parameters;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFza0hhbmRsaW5nTWVudUFyZ3MuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZWRwLWFpZi9jb21tb24tYXBpLyIsInNvdXJjZXMiOlsibGliL2VudGl0eS9pbXBsL1Rhc2tIYW5kbGluZ01lbnVBcmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNoRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUV4RSxNQUFNLE9BQU8sb0JBQXFCLFNBQVEsbUJBQW1CO0lBQTdEOztRQUdJLGVBQVUsR0FBZ0MsRUFBRSxDQUFDO0lBOEJqRCxDQUFDOzs7OztJQTNCYSxtQkFBbUI7UUFDekIsS0FBSyxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFFNUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7SUFDekIsQ0FBQzs7OztJQUdNLG1CQUFtQjs7WUFDbEIsR0FBRyxHQUFHLEtBQUssQ0FBQyxtQkFBbUIsRUFBRTtRQUVyQyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsRSxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN0RSxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsWUFBWSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUUxRSxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7Ozs7O0lBR00sa0JBQWtCLENBQUMsR0FBTztRQUM3QixLQUFLLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFOUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDM0UsSUFBSSxDQUFDLFFBQVEsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDL0UsSUFBSSxDQUFDLFVBQVUsR0FBRyxtQkFBbUIsQ0FBQyx1QkFBdUIsQ0FBQyxHQUFHLEVBQUUsWUFBWSxFQUFFLHlCQUF5QixDQUFDLENBQUM7SUFDaEgsQ0FBQztDQUNKOzs7SUFoQ0csc0NBQWU7O0lBQ2Ysd0NBQWlCOztJQUNqQiwwQ0FBNkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCcG1uTW9kZWxKc29uSGVscGVyIH0gZnJvbSBcIi4uLy4uL0JwbW5Nb2RlbEpzb25IZWxwZXJcIjtcclxuaW1wb3J0IHsgSnNvbkNvbnZlcnRhYmxlSW1wbCB9IGZyb20gXCIuLi8uLi9Kc29uQ29udmVydGFibGVJbXBsXCI7XHJcbmltcG9ydCB7IFRhc2tIYW5kbGluZ01lbnVQYXJhbWV0ZXIgfSBmcm9tIFwiLi9UYXNrSGFuZGxpbmdNZW51UGFyYW1ldGVyXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgVGFza0hhbmRsaW5nTWVudUFyZ3MgZXh0ZW5kcyBKc29uQ29udmVydGFibGVJbXBsIHtcclxuICAgIG1lbnVJZDogc3RyaW5nO1xyXG4gICAgbWVudU5hbWU6IHN0cmluZztcclxuICAgIHBhcmFtZXRlcnM6IFRhc2tIYW5kbGluZ01lbnVQYXJhbWV0ZXJbXSA9IFtdO1xyXG5cclxuXHJcbiAgICBwcm90ZWN0ZWQgUmVzZXRCZWZvcmVMb2FkRnJvbSgpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5SZXNldEJlZm9yZUxvYWRGcm9tKCk7XHJcblxyXG4gICAgICAgIHRoaXMubWVudUlkID0gbnVsbDtcclxuICAgICAgICB0aGlzLm1lbnVOYW1lID0gbnVsbDtcclxuICAgICAgICB0aGlzLnBhcmFtZXRlcnMgPSBbXTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHVibGljIENvbnZlcnRUb0pzb25PYmplY3QoKToge30ge1xyXG4gICAgICAgIGxldCBvYmogPSBzdXBlci5Db252ZXJ0VG9Kc29uT2JqZWN0KCk7XHJcblxyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIm1lbnVJZFwiLCB0aGlzLm1lbnVJZCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwibWVudU5hbWVcIiwgdGhpcy5tZW51TmFtZSk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwicGFyYW1ldGVyc1wiLCB0aGlzLnBhcmFtZXRlcnMpO1xyXG5cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwdWJsaWMgTG9hZEZyb21Kc29uT2JqZWN0KG9iajoge30pOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuXHJcbiAgICAgICAgdGhpcy5tZW51SWQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcIm1lbnVJZFwiKTtcclxuICAgICAgICB0aGlzLm1lbnVOYW1lID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJtZW51TmFtZVwiKTtcclxuICAgICAgICB0aGlzLnBhcmFtZXRlcnMgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNMaXN0KG9iaiwgXCJwYXJhbWV0ZXJzXCIsIFRhc2tIYW5kbGluZ01lbnVQYXJhbWV0ZXIpO1xyXG4gICAgfVxyXG59Il19