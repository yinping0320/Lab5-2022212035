/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { P2PMetadataEntity } from './P2PMetadataEntity';
import { BpmnModelJsonHelper } from '../../BpmnModelJsonHelper';
/**
 * 映射规则实体类接口。
 * @abstract
 */
export class MappingEntity extends P2PMetadataEntity {
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.mappingRuleMetadataId = null;
        this.mappingRuleId = null;
        this.mappingComponentMetadataId = null;
        this.mappingComponentId = null;
        this.mappingClassTypeName = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "mappingRuleMetadataId", this.mappingRuleMetadataId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "mappingRuleId", this.mappingRuleId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "mappingComponentMetadataId", this.mappingComponentMetadataId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "mappingComponentId", this.mappingComponentId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "mappingClassTypeName", this.mappingClassTypeName);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.mappingRuleMetadataId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "mappingRuleMetadataId");
        this.mappingRuleId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "mappingRuleId");
        this.mappingComponentMetadataId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "mappingComponentMetadataId");
        this.mappingComponentId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "mappingComponentId");
        this.mappingClassTypeName = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "mappingClassTypeName");
    }
}
if (false) {
    /** @type {?} */
    MappingEntity.prototype.mappingRuleMetadataId;
    /** @type {?} */
    MappingEntity.prototype.mappingRuleId;
    /** @type {?} */
    MappingEntity.prototype.mappingComponentMetadataId;
    /** @type {?} */
    MappingEntity.prototype.mappingComponentId;
    /** @type {?} */
    MappingEntity.prototype.mappingClassTypeName;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFwcGluZ0VudGl0eS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlZHAtYWlmL2NvbW1vbi1hcGkvIiwic291cmNlcyI6WyJsaWIvZW50aXR5L2ltcGwvTWFwcGluZ0VudGl0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDeEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7Ozs7O0FBR2hFLE1BQU0sT0FBZ0IsYUFBYyxTQUFRLGlCQUFpQjs7Ozs7SUFPL0MsbUJBQW1CO1FBQ3pCLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBRTVCLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUM7UUFDbEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7UUFDMUIsSUFBSSxDQUFDLDBCQUEwQixHQUFHLElBQUksQ0FBQztRQUN2QyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDO1FBQy9CLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLENBQUM7SUFDckMsQ0FBQzs7OztJQUVNLG1CQUFtQjs7WUFDbEIsR0FBRyxHQUFHLEtBQUssQ0FBQyxtQkFBbUIsRUFBRTtRQUVyQyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsdUJBQXVCLEVBQUUsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDaEcsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGVBQWUsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDaEYsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLDRCQUE0QixFQUFFLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1FBQzFHLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxvQkFBb0IsRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUMxRixtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsc0JBQXNCLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFFOUYsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVNLGtCQUFrQixDQUFDLEdBQU87UUFDN0IsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztRQUN6RyxJQUFJLENBQUMsYUFBYSxHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxlQUFlLENBQUMsQ0FBQztRQUN6RixJQUFJLENBQUMsMEJBQTBCLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLDRCQUE0QixDQUFDLENBQUM7UUFDbkgsSUFBSSxDQUFDLGtCQUFrQixHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO1FBQ25HLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztJQUMzRyxDQUFDO0NBQ0o7OztJQXJDRyw4Q0FBOEI7O0lBQzlCLHNDQUFzQjs7SUFDdEIsbURBQW1DOztJQUNuQywyQ0FBMkI7O0lBQzNCLDZDQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElNYXBwaW5nRW50aXR5IH0gZnJvbSAnLi4vSU1hcHBpbmdFbnRpdHknO1xyXG5pbXBvcnQgeyBQMlBNZXRhZGF0YUVudGl0eSB9IGZyb20gJy4vUDJQTWV0YWRhdGFFbnRpdHknO1xyXG5pbXBvcnQgeyBCcG1uTW9kZWxKc29uSGVscGVyIH0gZnJvbSAnLi4vLi4vQnBtbk1vZGVsSnNvbkhlbHBlcic7XHJcblxyXG4vKirmmKDlsITop4TliJnlrp7kvZPnsbvmjqXlj6PjgIIqL1xyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTWFwcGluZ0VudGl0eSBleHRlbmRzIFAyUE1ldGFkYXRhRW50aXR5IGltcGxlbWVudHMgSU1hcHBpbmdFbnRpdHkge1xyXG4gICAgbWFwcGluZ1J1bGVNZXRhZGF0YUlkOiBzdHJpbmc7XHJcbiAgICBtYXBwaW5nUnVsZUlkOiBzdHJpbmc7XHJcbiAgICBtYXBwaW5nQ29tcG9uZW50TWV0YWRhdGFJZDogc3RyaW5nO1xyXG4gICAgbWFwcGluZ0NvbXBvbmVudElkOiBzdHJpbmc7XHJcbiAgICBtYXBwaW5nQ2xhc3NUeXBlTmFtZTogc3RyaW5nO1xyXG5cclxuICAgIHByb3RlY3RlZCBSZXNldEJlZm9yZUxvYWRGcm9tKCkge1xyXG4gICAgICAgIHN1cGVyLlJlc2V0QmVmb3JlTG9hZEZyb20oKTtcclxuXHJcbiAgICAgICAgdGhpcy5tYXBwaW5nUnVsZU1ldGFkYXRhSWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMubWFwcGluZ1J1bGVJZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5tYXBwaW5nQ29tcG9uZW50TWV0YWRhdGFJZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5tYXBwaW5nQ29tcG9uZW50SWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMubWFwcGluZ0NsYXNzVHlwZU5hbWUgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBDb252ZXJ0VG9Kc29uT2JqZWN0KCk6IHt9IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG5cclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJtYXBwaW5nUnVsZU1ldGFkYXRhSWRcIiwgdGhpcy5tYXBwaW5nUnVsZU1ldGFkYXRhSWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIm1hcHBpbmdSdWxlSWRcIiwgdGhpcy5tYXBwaW5nUnVsZUlkKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJtYXBwaW5nQ29tcG9uZW50TWV0YWRhdGFJZFwiLCB0aGlzLm1hcHBpbmdDb21wb25lbnRNZXRhZGF0YUlkKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJtYXBwaW5nQ29tcG9uZW50SWRcIiwgdGhpcy5tYXBwaW5nQ29tcG9uZW50SWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIm1hcHBpbmdDbGFzc1R5cGVOYW1lXCIsIHRoaXMubWFwcGluZ0NsYXNzVHlwZU5hbWUpO1xyXG5cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBMb2FkRnJvbUpzb25PYmplY3Qob2JqOiB7fSk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG5cclxuICAgICAgICB0aGlzLm1hcHBpbmdSdWxlTWV0YWRhdGFJZCA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwibWFwcGluZ1J1bGVNZXRhZGF0YUlkXCIpO1xyXG4gICAgICAgIHRoaXMubWFwcGluZ1J1bGVJZCA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwibWFwcGluZ1J1bGVJZFwiKTtcclxuICAgICAgICB0aGlzLm1hcHBpbmdDb21wb25lbnRNZXRhZGF0YUlkID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJtYXBwaW5nQ29tcG9uZW50TWV0YWRhdGFJZFwiKTtcclxuICAgICAgICB0aGlzLm1hcHBpbmdDb21wb25lbnRJZCA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwibWFwcGluZ0NvbXBvbmVudElkXCIpO1xyXG4gICAgICAgIHRoaXMubWFwcGluZ0NsYXNzVHlwZU5hbWUgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcIm1hcHBpbmdDbGFzc1R5cGVOYW1lXCIpO1xyXG4gICAgfVxyXG59Il19