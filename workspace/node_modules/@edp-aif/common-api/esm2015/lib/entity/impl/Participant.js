/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModelJsonHelper } from "../../BpmnModelJsonHelper";
import { JsonConvertableImpl } from "../../JsonConvertableImpl";
import { ParticipantType } from "./ParticipantType";
import { PositionParticipant } from "./PositionParticipant";
import { UserParticipant } from "./UserParticipant";
export class Participant extends JsonConvertableImpl {
    constructor() {
        super(...arguments);
        this.participantType = ParticipantType.UserParticipant;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.participantType = ParticipantType.UserParticipant;
        this.userParticipant = null;
        this.positionParticipant = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "participantType", this.participantType);
        BpmnModelJsonHelper.SetAttributeValue(obj, "userParticipant", this.userParticipant);
        BpmnModelJsonHelper.SetAttributeValue(obj, "positionParticipant", this.positionParticipant);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.participantType = ParticipantType[BpmnModelJsonHelper.GetAttributeValueAsString(obj, "participantType")];
        this.userParticipant = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "userParticipant", UserParticipant);
        this.positionParticipant = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "positionParticipant", PositionParticipant);
    }
}
if (false) {
    /** @type {?} */
    Participant.prototype.participantType;
    /** @type {?} */
    Participant.prototype.userParticipant;
    /** @type {?} */
    Participant.prototype.positionParticipant;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFydGljaXBhbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZWRwLWFpZi9jb21tb24tYXBpLyIsInNvdXJjZXMiOlsibGliL2VudGl0eS9pbXBsL1BhcnRpY2lwYW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDcEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRXBELE1BQU0sT0FBTyxXQUFZLFNBQVEsbUJBQW1CO0lBQXBEOztRQUNJLG9CQUFlLEdBQW9CLGVBQWUsQ0FBQyxlQUFlLENBQUM7SUE2QnZFLENBQUM7Ozs7O0lBekJhLG1CQUFtQjtRQUN6QixLQUFLLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUU1QixJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsQ0FBQyxlQUFlLENBQUM7UUFDdkQsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7UUFDNUIsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQztJQUNwQyxDQUFDOzs7O0lBRU0sbUJBQW1COztZQUNsQixHQUFHLEdBQUcsS0FBSyxDQUFDLG1CQUFtQixFQUFFO1FBRXJDLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxpQkFBaUIsRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDcEYsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGlCQUFpQixFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNwRixtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFFNUYsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVNLGtCQUFrQixDQUFDLEdBQU87UUFDN0IsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7UUFDOUcsSUFBSSxDQUFDLGVBQWUsR0FBRyxtQkFBbUIsQ0FBQyxtQ0FBbUMsQ0FBQyxHQUFHLEVBQUUsaUJBQWlCLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFDeEgsSUFBSSxDQUFDLG1CQUFtQixHQUFHLG1CQUFtQixDQUFDLG1DQUFtQyxDQUFDLEdBQUcsRUFBRSxxQkFBcUIsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0lBQ3hJLENBQUM7Q0FDSjs7O0lBN0JHLHNDQUFtRTs7SUFDbkUsc0NBQWlDOztJQUNqQywwQ0FBeUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCcG1uTW9kZWxKc29uSGVscGVyIH0gZnJvbSBcIi4uLy4uL0JwbW5Nb2RlbEpzb25IZWxwZXJcIjtcclxuaW1wb3J0IHsgSnNvbkNvbnZlcnRhYmxlSW1wbCB9IGZyb20gXCIuLi8uLi9Kc29uQ29udmVydGFibGVJbXBsXCI7XHJcbmltcG9ydCB7IFBhcnRpY2lwYW50VHlwZSB9IGZyb20gXCIuL1BhcnRpY2lwYW50VHlwZVwiO1xyXG5pbXBvcnQgeyBQb3NpdGlvblBhcnRpY2lwYW50IH0gZnJvbSBcIi4vUG9zaXRpb25QYXJ0aWNpcGFudFwiO1xyXG5pbXBvcnQgeyBVc2VyUGFydGljaXBhbnQgfSBmcm9tIFwiLi9Vc2VyUGFydGljaXBhbnRcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQYXJ0aWNpcGFudCBleHRlbmRzIEpzb25Db252ZXJ0YWJsZUltcGwge1xyXG4gICAgcGFydGljaXBhbnRUeXBlOiBQYXJ0aWNpcGFudFR5cGUgPSBQYXJ0aWNpcGFudFR5cGUuVXNlclBhcnRpY2lwYW50O1xyXG4gICAgdXNlclBhcnRpY2lwYW50OiBVc2VyUGFydGljaXBhbnQ7XHJcbiAgICBwb3NpdGlvblBhcnRpY2lwYW50OiBQb3NpdGlvblBhcnRpY2lwYW50O1xyXG5cclxuICAgIHByb3RlY3RlZCBSZXNldEJlZm9yZUxvYWRGcm9tKCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLlJlc2V0QmVmb3JlTG9hZEZyb20oKTtcclxuXHJcbiAgICAgICAgdGhpcy5wYXJ0aWNpcGFudFR5cGUgPSBQYXJ0aWNpcGFudFR5cGUuVXNlclBhcnRpY2lwYW50O1xyXG4gICAgICAgIHRoaXMudXNlclBhcnRpY2lwYW50ID0gbnVsbDtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uUGFydGljaXBhbnQgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBDb252ZXJ0VG9Kc29uT2JqZWN0KCk6IHt9IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG5cclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJwYXJ0aWNpcGFudFR5cGVcIiwgdGhpcy5wYXJ0aWNpcGFudFR5cGUpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInVzZXJQYXJ0aWNpcGFudFwiLCB0aGlzLnVzZXJQYXJ0aWNpcGFudCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwicG9zaXRpb25QYXJ0aWNpcGFudFwiLCB0aGlzLnBvc2l0aW9uUGFydGljaXBhbnQpO1xyXG5cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBMb2FkRnJvbUpzb25PYmplY3Qob2JqOiB7fSk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG5cclxuICAgICAgICB0aGlzLnBhcnRpY2lwYW50VHlwZSA9IFBhcnRpY2lwYW50VHlwZVtCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcInBhcnRpY2lwYW50VHlwZVwiKV07XHJcbiAgICAgICAgdGhpcy51c2VyUGFydGljaXBhbnQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNKc29uU2VyaWFsaXphYmxlKG9iaiwgXCJ1c2VyUGFydGljaXBhbnRcIiwgVXNlclBhcnRpY2lwYW50KTtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uUGFydGljaXBhbnQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNKc29uU2VyaWFsaXphYmxlKG9iaiwgXCJwb3NpdGlvblBhcnRpY2lwYW50XCIsIFBvc2l0aW9uUGFydGljaXBhbnQpO1xyXG4gICAgfVxyXG59Il19