/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { JsonConvertableImpl } from '../../JsonConvertableImpl';
import { BpmnModelJsonHelper } from '../../BpmnModelJsonHelper';
/**
 * 实体类接口。
 * @abstract
 */
export class Entity extends JsonConvertableImpl {
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.id = null;
        this.creator = null;
        this.createdTime = null;
        this.lastModifier = null;
        this.lastModifiedTime = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "id", this.id);
        BpmnModelJsonHelper.SetAttributeValue(obj, "creator", this.creator);
        BpmnModelJsonHelper.SetAttributeValue(obj, "createdTime", this.createdTime);
        BpmnModelJsonHelper.SetAttributeValue(obj, "lastModifier", this.lastModifier);
        BpmnModelJsonHelper.SetAttributeValue(obj, "lastModifiedTime", this.lastModifiedTime);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.id = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "id");
        this.creator = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "creator");
        this.createdTime = BpmnModelJsonHelper.GetAttributeValueAsDateTime(obj, "createdTime");
        this.lastModifier = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "lastModifier");
        this.lastModifiedTime = BpmnModelJsonHelper.GetAttributeValueAsDateTime(obj, "lastModifiedTime");
    }
}
if (false) {
    /**
     * 唯一标识。
     * @type {?}
     */
    Entity.prototype.id;
    /** @type {?} */
    Entity.prototype.creator;
    /** @type {?} */
    Entity.prototype.createdTime;
    /** @type {?} */
    Entity.prototype.lastModifier;
    /** @type {?} */
    Entity.prototype.lastModifiedTime;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW50aXR5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVkcC1haWYvY29tbW9uLWFwaS8iLCJzb3VyY2VzIjpbImxpYi9lbnRpdHkvaW1wbC9FbnRpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDOzs7OztBQUdoRSxNQUFNLE9BQWdCLE1BQU8sU0FBUSxtQkFBbUI7Ozs7O0lBUzFDLG1CQUFtQjtRQUN6QixLQUFLLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUU1QixJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQztRQUNmLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7SUFDakMsQ0FBQzs7OztJQUVELG1CQUFtQjs7WUFDWCxHQUFHLEdBQUcsS0FBSyxDQUFDLG1CQUFtQixFQUFFO1FBRXJDLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzFELG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3BFLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxhQUFhLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzVFLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxjQUFjLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzlFLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxrQkFBa0IsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUV0RixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7Ozs7O0lBRUQsa0JBQWtCLENBQUMsR0FBTztRQUN0QixLQUFLLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFOUIsSUFBSSxDQUFDLEVBQUUsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbkUsSUFBSSxDQUFDLE9BQU8sR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDN0UsSUFBSSxDQUFDLFdBQVcsR0FBRyxtQkFBbUIsQ0FBQywyQkFBMkIsQ0FBQyxHQUFHLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDdkYsSUFBSSxDQUFDLFlBQVksR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDdkYsSUFBSSxDQUFDLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDLDJCQUEyQixDQUFDLEdBQUcsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0lBQ3JHLENBQUM7Q0FDSjs7Ozs7O0lBdENHLG9CQUFXOztJQUVYLHlCQUFnQjs7SUFDaEIsNkJBQWtCOztJQUNsQiw4QkFBcUI7O0lBQ3JCLGtDQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElFbnRpdHkgfSBmcm9tICcuLi9JRW50aXR5JztcclxuaW1wb3J0IHsgSnNvbkNvbnZlcnRhYmxlSW1wbCB9IGZyb20gJy4uLy4uL0pzb25Db252ZXJ0YWJsZUltcGwnO1xyXG5pbXBvcnQgeyBCcG1uTW9kZWxKc29uSGVscGVyIH0gZnJvbSAnLi4vLi4vQnBtbk1vZGVsSnNvbkhlbHBlcic7XHJcblxyXG4vKirlrp7kvZPnsbvmjqXlj6PjgIIqL1xyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRW50aXR5IGV4dGVuZHMgSnNvbkNvbnZlcnRhYmxlSW1wbCBpbXBsZW1lbnRzIElFbnRpdHkge1xyXG4gICAgLyoq5ZSv5LiA5qCH6K+G44CCKi9cclxuICAgIGlkOiBzdHJpbmc7XHJcblxyXG4gICAgY3JlYXRvcjogc3RyaW5nO1xyXG4gICAgY3JlYXRlZFRpbWU6IERhdGU7XHJcbiAgICBsYXN0TW9kaWZpZXI6IHN0cmluZztcclxuICAgIGxhc3RNb2RpZmllZFRpbWU6IERhdGU7XHJcblxyXG4gICAgcHJvdGVjdGVkIFJlc2V0QmVmb3JlTG9hZEZyb20oKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuUmVzZXRCZWZvcmVMb2FkRnJvbSgpO1xyXG5cclxuICAgICAgICB0aGlzLmlkID0gbnVsbDtcclxuICAgICAgICB0aGlzLmNyZWF0b3IgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlZFRpbWUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMubGFzdE1vZGlmaWVyID0gbnVsbDtcclxuICAgICAgICB0aGlzLmxhc3RNb2RpZmllZFRpbWUgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIENvbnZlcnRUb0pzb25PYmplY3QoKToge30ge1xyXG4gICAgICAgIGxldCBvYmogPSBzdXBlci5Db252ZXJ0VG9Kc29uT2JqZWN0KCk7XHJcblxyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcImlkXCIsIHRoaXMuaWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcImNyZWF0b3JcIiwgdGhpcy5jcmVhdG9yKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJjcmVhdGVkVGltZVwiLCB0aGlzLmNyZWF0ZWRUaW1lKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJsYXN0TW9kaWZpZXJcIiwgdGhpcy5sYXN0TW9kaWZpZXIpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcImxhc3RNb2RpZmllZFRpbWVcIiwgdGhpcy5sYXN0TW9kaWZpZWRUaW1lKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBMb2FkRnJvbUpzb25PYmplY3Qob2JqOiB7fSkge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG5cclxuICAgICAgICB0aGlzLmlkID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJpZFwiKTtcclxuICAgICAgICB0aGlzLmNyZWF0b3IgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcImNyZWF0b3JcIik7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVkVGltZSA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc0RhdGVUaW1lKG9iaiwgXCJjcmVhdGVkVGltZVwiKTtcclxuICAgICAgICB0aGlzLmxhc3RNb2RpZmllciA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwibGFzdE1vZGlmaWVyXCIpO1xyXG4gICAgICAgIHRoaXMubGFzdE1vZGlmaWVkVGltZSA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc0RhdGVUaW1lKG9iaiwgXCJsYXN0TW9kaWZpZWRUaW1lXCIpO1xyXG4gICAgfVxyXG59Il19