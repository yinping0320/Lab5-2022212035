/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
export class BpmnModelJsonHelper {
    /**
     * @param {?} obj
     * @param {?} attributeName
     * @return {?}
     */
    static GetAttributeValue(obj, attributeName) {
        if (obj == null) {
            return null;
        }
        if (obj.hasOwnProperty(attributeName)) {
            return obj[attributeName];
        }
        else {
            return null;
        }
    }
    /**
     * @template T
     * @param {?} obj
     * @param {?} attributeName
     * @param {?} value
     * @return {?}
     */
    static SetAttributeValue(obj, attributeName, value) {
        if (obj == null || value == null)
            return;
        /** @type {?} */
        let jsonArray = [];
        if (value instanceof Array) {
            //判断是否为IJsonSerializable实现类的数组，是则全部调用ConvertToJsonObject序列化，否则直接赋值
            for (let item of value) {
                if (item["ConvertToJsonObject"] != null && item["LoadFromJsonObject"] != null) {
                    jsonArray.push(item.ConvertToJsonObject());
                }
                else {
                    break;
                }
            }
            if (jsonArray.length == value.length) {
                obj[attributeName] = jsonArray;
            }
            else {
                obj[attributeName] = value;
            }
        }
        else if (value["ConvertToJsonObject"] != null && value["LoadFromJsonObject"] != null) {
            //判断是否为IJsonSerializable实现类的对象，是则调用ConvertToJsonObject序列化
            obj[attributeName] = ((/** @type {?} */ (value))).ConvertToJsonObject();
        }
        else if (value instanceof Date) {
            //判断是否为日期类型，是日期类型则转为字符串UTC的yyyyMMDDhhmmssSSS格式字符串
            /** @type {?} */
            const str = BpmnModelJsonHelper.DateTimeToString(value);
            BpmnModelJsonHelper.SetAttributeValue(obj, attributeName, str);
        }
        else {
            obj[attributeName] = value;
        }
    }
    /**
     * @param {?} obj
     * @param {?} attributeName
     * @return {?}
     */
    static GetAttributeValueAsString(obj, attributeName) {
        if (obj == null) {
            return null;
        }
        if (obj.hasOwnProperty(attributeName) == true && typeof (obj[attributeName]) == "string") {
            return obj[attributeName];
        }
        return null;
    }
    /**
     * @param {?} obj
     * @param {?} attributeName
     * @return {?}
     */
    static GetAttributeValueAsBoolean(obj, attributeName) {
        if (obj == null) {
            return null;
        }
        if (obj.hasOwnProperty(attributeName) == true && typeof (obj[attributeName]) == "boolean") {
            return obj[attributeName];
        }
        return null;
    }
    /**
     * @param {?} obj
     * @param {?} attributeName
     * @return {?}
     */
    static GetAttributeValueAsNumber(obj, attributeName) {
        if (obj == null) {
            return null;
        }
        if (obj.hasOwnProperty(attributeName) == true && typeof (obj[attributeName]) == "number") {
            return obj[attributeName];
        }
        return null;
    }
    /**
     * @template ReturnT, ClassOfT
     * @param {?} obj
     * @param {?} attributeName
     * @param {?} classOfT
     * @return {?}
     */
    static GetAttributeValueAsList(obj, attributeName, classOfT) {
        /** @type {?} */
        let jsonArray = BpmnModelJsonHelper.GetAttributeValue(obj, attributeName);
        if (jsonArray == null) {
            return null;
        }
        /** @type {?} */
        let list = [];
        for (let item of jsonArray) {
            /** @type {?} */
            let instance = null;
            try {
                instance = (/** @type {?} */ (new classOfT()));
            }
            catch (e) {
                throw e;
            }
            instance.LoadFromJsonObject(item);
            list.push(instance);
        }
        return list;
    }
    /**
     * @param {?} obj
     * @param {?} attributeName
     * @return {?}
     */
    static GetAttributeValueAsDateTime(obj, attributeName) {
        return BpmnModelJsonHelper.DateTimeFromString(BpmnModelJsonHelper.GetAttributeValueAsString(obj, attributeName));
    }
    /**
     * @template ReturnT, ClassOfT
     * @param {?} obj
     * @param {?} attributeName
     * @param {?} classOfT
     * @return {?}
     */
    static GetAttributeValueAsJsonSerializable(obj, attributeName, classOfT) {
        /** @type {?} */
        let jsonObject = BpmnModelJsonHelper.GetAttributeValue(obj, attributeName);
        if (jsonObject == null) {
            return null;
        }
        /** @type {?} */
        let instance = null;
        try {
            instance = (/** @type {?} */ (new classOfT()));
        }
        catch (e) {
            throw e;
        }
        instance.LoadFromJsonObject(jsonObject);
        return instance;
    }
    /**
     * @param {?} dt
     * @return {?}
     */
    static DateTimeToString(dt) {
        if (dt == null)
            return null;
        /** @type {?} */
        const time = dt.getTime();
        if (time < BpmnModelJsonHelper.MIN_OFFSETDATETIME.getTime() || time > BpmnModelJsonHelper.MAX_OFFSETDATETIME.getTime()) {
            throw `给定的日期时间值 ${dt.toISOString()} 超出支持范围(0001-01-01T12:00:00.000Z - 9999-12-31T23:59:59.000Z):`;
        }
        return BpmnModelJsonHelper.dateFormat(dt, "yyyyMMddHHmmssSSS");
    }
    /**
     *
     * @param {?} str 格式为：yyyyMMddHHmmssSSS
     * @return {?}
     */
    static DateTimeFromString(str) {
        if (str == null)
            return null;
        // const s = `${str.substring(0, 4)}/${str.substring(4, 6)}/${str.substring(6, 8)} ${str.substring(8, 10)}:${str.substring(10, 12)}:${str.substring(12, 14)}.${str.substring(14)}`;
        /** @type {?} */
        const date = new Date();
        date.setUTCFullYear(parseInt(str.substring(0, 4)));
        date.setUTCMonth(parseInt(str.substring(4, 6)) - 1);
        date.setUTCDate(parseInt(str.substring(6, 8)));
        date.setUTCHours(parseInt(str.substring(8, 10)));
        date.setUTCMinutes(parseInt(str.substring(10, 12)));
        date.setUTCSeconds(parseInt(str.substring(12, 14)));
        date.setUTCMilliseconds(parseInt(str.substring(14)));
        return date;
    }
    /**
     * @template T
     * @param {?} value
     * @return {?}
     */
    static ToJson(value) {
        if (value === undefined || value === null) {
            return null;
        }
        /** @type {?} */
        let list = [];
        for (let item of value) {
            list.push(item.ConvertToJsonObject());
        }
        return JSON.stringify(list);
    }
    /**
     * @template ReturnT, ClassOfT
     * @param {?} json
     * @param {?} classOfT
     * @return {?}
     */
    static FromJson(json, classOfT) {
        if (BpmnModelJsonHelper.IsNullOrWhiteSpace(json)) {
            return null;
        }
        /** @type {?} */
        let list = new Array();
        /** @type {?} */
        let jsonArr = JSON.parse(json);
        if (jsonArr == null || Array.isArray(jsonArr) === false) {
            return list;
        }
        jsonArr.forEach((/**
         * @param {?} elt
         * @return {?}
         */
        elt => {
            /** @type {?} */
            let newInstance = (/** @type {?} */ (new classOfT()));
            newInstance.LoadFromJsonObject(elt);
            list.push(newInstance);
        }));
        return list;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static StringListToJsonArray(value) {
        if (value == null)
            return null;
        /** @type {?} */
        let jsonArray = new Array();
        for (let item of value) {
            jsonArray.push(item);
        }
        return jsonArray;
    }
    /**
     * @param {?} jsonArray
     * @return {?}
     */
    static StringListFromJsonArray(jsonArray) {
        if (jsonArray == null) {
            return null;
        }
        /** @type {?} */
        let list = new Array();
        for (let item of jsonArray) {
            if (typeof item == "object") {
                list.push(JSON.stringify(item));
            }
            else {
                list.push(String(item));
            }
        }
        return list;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    static StringListToJson(value) {
        /** @type {?} */
        let jsonArray = BpmnModelJsonHelper.StringListToJsonArray(value);
        if (jsonArray == null)
            return null;
        return JSON.stringify(jsonArray);
    }
    /**
     * @param {?} json
     * @return {?}
     */
    static StringListFromJson(json) {
        if (BpmnModelJsonHelper.IsNullOrWhiteSpace(json)) {
            return null;
        }
        /** @type {?} */
        let jsonArray = (/** @type {?} */ (JSON.parse(json)));
        if (jsonArray == null) {
            return null;
        }
        return BpmnModelJsonHelper.StringListFromJsonArray(jsonArray);
    }
    /**
     * @param {?} string
     * @return {?}
     */
    static IsNullOrWhiteSpace(string) {
        if (string == null) {
            return true;
        }
        else {
            return string.replace(/(^s*)|(s*$)/g, "").length == 0;
        }
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    static GetDateFromISO(value) {
        /** @type {?} */
        let a = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
        if (a) {
            return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4], +a[5], +a[6]));
        }
        else {
            return null;
        }
    }
    /**
     * @private
     * @param {?} date
     * @param {?} fmt
     * @return {?}
     */
    static dateFormat(date, fmt) {
        /** @type {?} */
        let ret;
        /** @type {?} */
        const opt = {
            "y+": date.getUTCFullYear().toString(),
            // 年
            "M+": (date.getUTCMonth() + 1).toString(),
            // 月
            "d+": date.getUTCDate().toString(),
            // 日
            "H+": date.getUTCHours().toString(),
            // 时
            "m+": date.getUTCMinutes().toString(),
            // 分
            "s+": date.getUTCSeconds().toString(),
            // 秒
            "S+": date.getUTCMilliseconds().toString(),
        };
        for (let k in opt) {
            ret = new RegExp("(" + k + ")").exec(fmt);
            if (ret) {
                if (!String.prototype.padStart) {
                    fmt = fmt.replace(ret[1], (ret[1].length == 1) ? (opt[k]) : (BpmnModelJsonHelper.myPadStart(opt[k], ret[1].length, "0")));
                }
                else {
                    fmt = fmt.replace(ret[1], (ret[1].length == 1) ? (opt[k]) : (opt[k].padStart(ret[1].length, "0")));
                }
            }
        }
        return fmt;
    }
    /**
     * @private
     * @param {?} src
     * @param {?} targetLength
     * @param {?} padString
     * @return {?}
     */
    static myPadStart(src, targetLength, padString) {
        targetLength = targetLength >> 0; //floor if number or convert non-number to 0;
        padString = String(typeof padString !== 'undefined' ? padString : ' ');
        if (src.length > targetLength) {
            return String(src);
        }
        else {
            targetLength = targetLength - src.length;
            if (targetLength > padString.length) {
                padString += padString.repeat(targetLength / padString.length); //append to original to ensure we are longer than needed
            }
            return padString.slice(0, targetLength) + String(src);
        }
    }
}
BpmnModelJsonHelper.MIN_OFFSETDATETIME = BpmnModelJsonHelper.GetDateFromISO("0001-01-01T12:00:00.000Z");
BpmnModelJsonHelper.MAX_OFFSETDATETIME = BpmnModelJsonHelper.GetDateFromISO("9999-12-31T23:59:59.000Z");
if (false) {
    /** @type {?} */
    BpmnModelJsonHelper.MIN_OFFSETDATETIME;
    /** @type {?} */
    BpmnModelJsonHelper.MAX_OFFSETDATETIME;
}
//# sourceMappingURL=data:application/json;base64,