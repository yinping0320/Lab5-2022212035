/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { SlimEntity } from './SlimEntity';
import { BpmnModelJsonHelper } from '../../BpmnModelJsonHelper';
export class SlimAssociationEntity extends SlimEntity {
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.srcBeMetadataId = null;
        this.tarBeMetadataId = null;
        this.srcTableName = null;
        this.srcDataId = null;
        this.tarTableName = null;
        this.tarDataId = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "srcBeMetadataId", this.srcBeMetadataId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "tarBeMetadataId", this.tarBeMetadataId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "srcTableName", this.srcTableName);
        BpmnModelJsonHelper.SetAttributeValue(obj, "srcDataId", this.srcDataId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "tarTableName", this.tarTableName);
        BpmnModelJsonHelper.SetAttributeValue(obj, "tarDataId", this.tarDataId);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.srcBeMetadataId = BpmnModelJsonHelper.GetAttributeValue(obj, "srcBeMetadataId");
        this.tarBeMetadataId = BpmnModelJsonHelper.GetAttributeValue(obj, "tarBeMetadataId");
        this.srcTableName = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "srcTableName");
        this.srcDataId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "srcDataId");
        this.tarTableName = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "tarTableName");
        this.tarDataId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "tarDataId");
    }
}
if (false) {
    /** @type {?} */
    SlimAssociationEntity.prototype.srcBeMetadataId;
    /** @type {?} */
    SlimAssociationEntity.prototype.tarBeMetadataId;
    /** @type {?} */
    SlimAssociationEntity.prototype.srcTableName;
    /** @type {?} */
    SlimAssociationEntity.prototype.srcDataId;
    /** @type {?} */
    SlimAssociationEntity.prototype.tarTableName;
    /** @type {?} */
    SlimAssociationEntity.prototype.tarDataId;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2xpbUFzc29jaWF0aW9uRW50aXR5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVkcC1haWYvY29tbW9uLWFwaS8iLCJzb3VyY2VzIjpbImxpYi9zbGltLWVudGl0eS9pbXBsL1NsaW1Bc3NvY2lhdGlvbkVudGl0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUUxQyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUVoRSxNQUFNLE9BQU8scUJBQXNCLFNBQVEsVUFBVTs7Ozs7SUFRdkMsbUJBQW1CO1FBQ3pCLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBRTVCLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO1FBQzVCLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO1FBQzVCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO0lBQzFCLENBQUM7Ozs7SUFFTSxtQkFBbUI7O1lBQ2xCLEdBQUcsR0FBRyxLQUFLLENBQUMsbUJBQW1CLEVBQUU7UUFFckMsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGlCQUFpQixFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNwRixtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3BGLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxjQUFjLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzlFLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3hFLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxjQUFjLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzlFLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRXhFLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7SUFFTSxrQkFBa0IsQ0FBQyxHQUFPO1FBQzdCLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUU5QixJQUFJLENBQUMsZUFBZSxHQUFHLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3JGLElBQUksQ0FBQyxlQUFlLEdBQUcsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGlCQUFpQixDQUFDLENBQUM7UUFDckYsSUFBSSxDQUFDLFlBQVksR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDdkYsSUFBSSxDQUFDLFNBQVMsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDakYsSUFBSSxDQUFDLFlBQVksR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDdkYsSUFBSSxDQUFDLFNBQVMsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDckYsQ0FBQztDQUNKOzs7SUF6Q0csZ0RBQXdCOztJQUN4QixnREFBd0I7O0lBQ3hCLDZDQUFxQjs7SUFDckIsMENBQWtCOztJQUNsQiw2Q0FBcUI7O0lBQ3JCLDBDQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNsaW1FbnRpdHkgfSBmcm9tICcuL1NsaW1FbnRpdHknO1xyXG5pbXBvcnQgeyBJU2xpbUFzc29jaWF0aW9uRW50aXR5IH0gZnJvbSAnLi4vSVNsaW1Bc3NvY2lhdGlvbkVudGl0eSc7XHJcbmltcG9ydCB7IEJwbW5Nb2RlbEpzb25IZWxwZXIgfSBmcm9tICcuLi8uLi9CcG1uTW9kZWxKc29uSGVscGVyJztcclxuXHJcbmV4cG9ydCBjbGFzcyBTbGltQXNzb2NpYXRpb25FbnRpdHkgZXh0ZW5kcyBTbGltRW50aXR5IGltcGxlbWVudHMgSVNsaW1Bc3NvY2lhdGlvbkVudGl0eSB7XHJcbiAgICBzcmNCZU1ldGFkYXRhSWQ6IHN0cmluZztcclxuICAgIHRhckJlTWV0YWRhdGFJZDogc3RyaW5nO1xyXG4gICAgc3JjVGFibGVOYW1lOiBzdHJpbmc7XHJcbiAgICBzcmNEYXRhSWQ6IHN0cmluZztcclxuICAgIHRhclRhYmxlTmFtZTogc3RyaW5nO1xyXG4gICAgdGFyRGF0YUlkOiBzdHJpbmc7XHJcblxyXG4gICAgcHJvdGVjdGVkIFJlc2V0QmVmb3JlTG9hZEZyb20oKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuUmVzZXRCZWZvcmVMb2FkRnJvbSgpO1xyXG5cclxuICAgICAgICB0aGlzLnNyY0JlTWV0YWRhdGFJZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy50YXJCZU1ldGFkYXRhSWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuc3JjVGFibGVOYW1lID0gbnVsbDtcclxuICAgICAgICB0aGlzLnNyY0RhdGFJZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy50YXJUYWJsZU5hbWUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMudGFyRGF0YUlkID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgQ29udmVydFRvSnNvbk9iamVjdCgpOiB7fSB7XHJcbiAgICAgICAgbGV0IG9iaiA9IHN1cGVyLkNvbnZlcnRUb0pzb25PYmplY3QoKTtcclxuXHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwic3JjQmVNZXRhZGF0YUlkXCIsIHRoaXMuc3JjQmVNZXRhZGF0YUlkKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJ0YXJCZU1ldGFkYXRhSWRcIiwgdGhpcy50YXJCZU1ldGFkYXRhSWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInNyY1RhYmxlTmFtZVwiLCB0aGlzLnNyY1RhYmxlTmFtZSk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwic3JjRGF0YUlkXCIsIHRoaXMuc3JjRGF0YUlkKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJ0YXJUYWJsZU5hbWVcIiwgdGhpcy50YXJUYWJsZU5hbWUpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInRhckRhdGFJZFwiLCB0aGlzLnRhckRhdGFJZCk7XHJcblxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIExvYWRGcm9tSnNvbk9iamVjdChvYmo6IHt9KTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuTG9hZEZyb21Kc29uT2JqZWN0KG9iaik7XHJcblxyXG4gICAgICAgIHRoaXMuc3JjQmVNZXRhZGF0YUlkID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwic3JjQmVNZXRhZGF0YUlkXCIpO1xyXG4gICAgICAgIHRoaXMudGFyQmVNZXRhZGF0YUlkID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwidGFyQmVNZXRhZGF0YUlkXCIpO1xyXG4gICAgICAgIHRoaXMuc3JjVGFibGVOYW1lID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJzcmNUYWJsZU5hbWVcIik7XHJcbiAgICAgICAgdGhpcy5zcmNEYXRhSWQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcInNyY0RhdGFJZFwiKTtcclxuICAgICAgICB0aGlzLnRhclRhYmxlTmFtZSA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwidGFyVGFibGVOYW1lXCIpO1xyXG4gICAgICAgIHRoaXMudGFyRGF0YUlkID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJ0YXJEYXRhSWRcIik7XHJcbiAgICB9XHJcbn0iXX0=