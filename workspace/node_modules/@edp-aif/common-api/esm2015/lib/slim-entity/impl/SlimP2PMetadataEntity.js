/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { SlimMetadataEntity } from './SlimMetadataEntity';
import { BpmnModelJsonHelper } from '../../BpmnModelJsonHelper';
/**
 * @abstract
 */
export class SlimP2PMetadataEntity extends SlimMetadataEntity {
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.sourceBeId = null;
        this.sourceVoId = null;
        this.targetSuCode = null;
        this.targetBeId = null;
        this.targetVoId = null;
        this.targetVoProxyId = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "sourceBeId", this.sourceBeId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "sourceVoId", this.sourceVoId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "targetSuCode", this.targetSuCode);
        BpmnModelJsonHelper.SetAttributeValue(obj, "targetBeId", this.targetBeId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "targetVoId", this.targetVoId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "targetVoProxyId", this.targetVoProxyId);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.sourceBeId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "sourceBeId");
        this.sourceVoId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "sourceVoId");
        this.targetSuCode = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "targetSuCode");
        this.targetBeId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "targetBeId");
        this.targetVoId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "targetVoId");
        this.targetVoProxyId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "targetVoProxyId");
    }
}
if (false) {
    /** @type {?} */
    SlimP2PMetadataEntity.prototype.sourceBeId;
    /** @type {?} */
    SlimP2PMetadataEntity.prototype.sourceVoId;
    /** @type {?} */
    SlimP2PMetadataEntity.prototype.targetBeId;
    /** @type {?} */
    SlimP2PMetadataEntity.prototype.targetVoId;
    /** @type {?} */
    SlimP2PMetadataEntity.prototype.targetVoProxyId;
    /** @type {?} */
    SlimP2PMetadataEntity.prototype.targetSuCode;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2xpbVAyUE1ldGFkYXRhRW50aXR5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVkcC1haWYvY29tbW9uLWFwaS8iLCJzb3VyY2VzIjpbImxpYi9zbGltLWVudGl0eS9pbXBsL1NsaW1QMlBNZXRhZGF0YUVudGl0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDMUQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7Ozs7QUFFaEUsTUFBTSxPQUFnQixxQkFBc0IsU0FBUSxrQkFBa0I7Ozs7O0lBUXhELG1CQUFtQjtRQUN6QixLQUFLLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUU1QixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztRQUN6QixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztJQUNoQyxDQUFDOzs7O0lBRUQsbUJBQW1COztZQUNYLEdBQUcsR0FBRyxLQUFLLENBQUMsbUJBQW1CLEVBQUU7UUFDckMsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFlBQVksRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDMUUsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFlBQVksRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDMUUsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGNBQWMsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDOUUsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFlBQVksRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDMUUsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFlBQVksRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDMUUsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGlCQUFpQixFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNwRixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7Ozs7O0lBRUQsa0JBQWtCLENBQUMsR0FBTztRQUN0QixLQUFLLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFOUIsSUFBSSxDQUFDLFVBQVUsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDbkYsSUFBSSxDQUFDLFVBQVUsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDbkYsSUFBSSxDQUFDLFlBQVksR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDdkYsSUFBSSxDQUFDLFVBQVUsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDbkYsSUFBSSxDQUFDLFVBQVUsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDbkYsSUFBSSxDQUFDLGVBQWUsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztJQUNqRyxDQUFDO0NBQ0o7OztJQXZDRywyQ0FBbUI7O0lBQ25CLDJDQUFtQjs7SUFDbkIsMkNBQW1COztJQUNuQiwyQ0FBbUI7O0lBQ25CLGdEQUF3Qjs7SUFDeEIsNkNBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVNsaW1QMlBNZXRhZGF0YUVudGl0eSB9IGZyb20gJy4uL0lTbGltUDJQTWV0YWRhdGFFbnRpdHknO1xyXG5pbXBvcnQgeyBTbGltTWV0YWRhdGFFbnRpdHkgfSBmcm9tICcuL1NsaW1NZXRhZGF0YUVudGl0eSc7XHJcbmltcG9ydCB7IEJwbW5Nb2RlbEpzb25IZWxwZXIgfSBmcm9tICcuLi8uLi9CcG1uTW9kZWxKc29uSGVscGVyJztcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTbGltUDJQTWV0YWRhdGFFbnRpdHkgZXh0ZW5kcyBTbGltTWV0YWRhdGFFbnRpdHkgaW1wbGVtZW50cyBJU2xpbVAyUE1ldGFkYXRhRW50aXR5IHtcclxuICAgIHNvdXJjZUJlSWQ6IHN0cmluZztcclxuICAgIHNvdXJjZVZvSWQ6IHN0cmluZztcclxuICAgIHRhcmdldEJlSWQ6IHN0cmluZztcclxuICAgIHRhcmdldFZvSWQ6IHN0cmluZztcclxuICAgIHRhcmdldFZvUHJveHlJZDogc3RyaW5nO1xyXG4gICAgdGFyZ2V0U3VDb2RlOiBzdHJpbmc7XHJcblxyXG4gICAgcHJvdGVjdGVkIFJlc2V0QmVmb3JlTG9hZEZyb20oKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuUmVzZXRCZWZvcmVMb2FkRnJvbSgpO1xyXG5cclxuICAgICAgICB0aGlzLnNvdXJjZUJlSWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuc291cmNlVm9JZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy50YXJnZXRTdUNvZGUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0QmVJZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy50YXJnZXRWb0lkID0gbnVsbDtcclxuICAgICAgICB0aGlzLnRhcmdldFZvUHJveHlJZCA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgQ29udmVydFRvSnNvbk9iamVjdCgpOiB7fSB7XHJcbiAgICAgICAgbGV0IG9iaiA9IHN1cGVyLkNvbnZlcnRUb0pzb25PYmplY3QoKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJzb3VyY2VCZUlkXCIsIHRoaXMuc291cmNlQmVJZCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwic291cmNlVm9JZFwiLCB0aGlzLnNvdXJjZVZvSWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInRhcmdldFN1Q29kZVwiLCB0aGlzLnRhcmdldFN1Q29kZSk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwidGFyZ2V0QmVJZFwiLCB0aGlzLnRhcmdldEJlSWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInRhcmdldFZvSWRcIiwgdGhpcy50YXJnZXRWb0lkKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJ0YXJnZXRWb1Byb3h5SWRcIiwgdGhpcy50YXJnZXRWb1Byb3h5SWQpO1xyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgTG9hZEZyb21Kc29uT2JqZWN0KG9iajoge30pIHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuXHJcbiAgICAgICAgdGhpcy5zb3VyY2VCZUlkID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJzb3VyY2VCZUlkXCIpO1xyXG4gICAgICAgIHRoaXMuc291cmNlVm9JZCA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwic291cmNlVm9JZFwiKTtcclxuICAgICAgICB0aGlzLnRhcmdldFN1Q29kZSA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwidGFyZ2V0U3VDb2RlXCIpO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0QmVJZCA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwidGFyZ2V0QmVJZFwiKTtcclxuICAgICAgICB0aGlzLnRhcmdldFZvSWQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcInRhcmdldFZvSWRcIik7XHJcbiAgICAgICAgdGhpcy50YXJnZXRWb1Byb3h5SWQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcInRhcmdldFZvUHJveHlJZFwiKTtcclxuICAgIH1cclxufSJdfQ==