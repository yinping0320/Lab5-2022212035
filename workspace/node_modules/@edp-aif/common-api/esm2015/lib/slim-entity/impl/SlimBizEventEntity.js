/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { SlimMetadataEntity } from './SlimMetadataEntity';
import { BpmnModelJsonHelper } from '../../BpmnModelJsonHelper';
export class SlimBizEventEntity extends SlimMetadataEntity {
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.beEventRouterComponentId = null;
        this.bizEventAgentComponentId = null;
        this.voId = null;
        this.canDoExpressionId = null;
        this.bizFlowchartIdExpressionId = null;
        this.beEventRouterClassTypeName = null;
        this.isEnabled = true;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "isEnabled", this.isEnabled);
        BpmnModelJsonHelper.SetAttributeValue(obj, "beEventRouterComponentId", this.beEventRouterComponentId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "bizEventAgentComponentId", this.bizEventAgentComponentId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "voId", this.voId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "canDoExpressionId", this.canDoExpressionId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "bizFlowchartIdExpressionId", this.bizFlowchartIdExpressionId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "beEventRouterClassTypeName", this.beEventRouterClassTypeName);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.isEnabled = BpmnModelJsonHelper.GetAttributeValueAsBoolean(obj, "isEnabled");
        this.beEventRouterComponentId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "beEventRouterComponentId");
        this.bizEventAgentComponentId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "bizEventAgentComponentId");
        this.voId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "voId");
        this.canDoExpressionId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "canDoExpressionId");
        this.bizFlowchartIdExpressionId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "bizFlowchartIdExpressionId");
        this.beEventRouterClassTypeName = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "beEventRouterClassTypeName");
    }
}
if (false) {
    /** @type {?} */
    SlimBizEventEntity.prototype.isEnabled;
    /** @type {?} */
    SlimBizEventEntity.prototype.voId;
    /** @type {?} */
    SlimBizEventEntity.prototype.beEventRouterComponentId;
    /** @type {?} */
    SlimBizEventEntity.prototype.bizEventAgentComponentId;
    /** @type {?} */
    SlimBizEventEntity.prototype.canDoExpressionId;
    /** @type {?} */
    SlimBizEventEntity.prototype.bizFlowchartIdExpressionId;
    /** @type {?} */
    SlimBizEventEntity.prototype.beEventRouterClassTypeName;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2xpbUJpekV2ZW50RW50aXR5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVkcC1haWYvY29tbW9uLWFwaS8iLCJzb3VyY2VzIjpbImxpYi9zbGltLWVudGl0eS9pbXBsL1NsaW1CaXpFdmVudEVudGl0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFMUQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFaEUsTUFBTSxPQUFPLGtCQUFtQixTQUFRLGtCQUFrQjs7Ozs7SUFTNUMsbUJBQW1CO1FBQ3pCLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBRTVCLElBQUksQ0FBQyx3QkFBd0IsR0FBRyxJQUFJLENBQUM7UUFDckMsSUFBSSxDQUFDLHdCQUF3QixHQUFHLElBQUksQ0FBQztRQUNyQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDO1FBQzlCLElBQUksQ0FBQywwQkFBMEIsR0FBRyxJQUFJLENBQUM7UUFDdkMsSUFBSSxDQUFDLDBCQUEwQixHQUFHLElBQUksQ0FBQztRQUN2QyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztJQUMxQixDQUFDOzs7O0lBRU0sbUJBQW1COztZQUNsQixHQUFHLEdBQUcsS0FBSyxDQUFDLG1CQUFtQixFQUFFO1FBRXJDLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3hFLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSwwQkFBMEIsRUFBRSxJQUFJLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUN0RyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsMEJBQTBCLEVBQUUsSUFBSSxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFDdEcsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUQsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLG1CQUFtQixFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3hGLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSw0QkFBNEIsRUFBRSxJQUFJLENBQUMsMEJBQTBCLENBQUMsQ0FBQztRQUMxRyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsNEJBQTRCLEVBQUUsSUFBSSxDQUFDLDBCQUEwQixDQUFDLENBQUM7UUFFMUcsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVNLGtCQUFrQixDQUFDLEdBQU87UUFDN0IsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxTQUFTLEdBQUcsbUJBQW1CLENBQUMsMEJBQTBCLENBQUMsR0FBRyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ2xGLElBQUksQ0FBQyx3QkFBd0IsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsMEJBQTBCLENBQUMsQ0FBQztRQUMvRyxJQUFJLENBQUMsd0JBQXdCLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLDBCQUEwQixDQUFDLENBQUM7UUFDL0csSUFBSSxDQUFDLElBQUksR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDdkUsSUFBSSxDQUFDLGlCQUFpQixHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO1FBQ2pHLElBQUksQ0FBQywwQkFBMEIsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsNEJBQTRCLENBQUMsQ0FBQztRQUNuSCxJQUFJLENBQUMsMEJBQTBCLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLDRCQUE0QixDQUFDLENBQUM7SUFDdkgsQ0FBQztDQUNKOzs7SUE3Q0csdUNBQW1COztJQUNuQixrQ0FBYTs7SUFDYixzREFBaUM7O0lBQ2pDLHNEQUFpQzs7SUFDakMsK0NBQTBCOztJQUMxQix3REFBbUM7O0lBQ25DLHdEQUFtQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNsaW1NZXRhZGF0YUVudGl0eSB9IGZyb20gJy4vU2xpbU1ldGFkYXRhRW50aXR5JztcclxuaW1wb3J0IHsgSVNsaW1CaXpFdmVudEVudGl0eSB9IGZyb20gJy4uL0lTbGltQml6RXZlbnRFbnRpdHknO1xyXG5pbXBvcnQgeyBCcG1uTW9kZWxKc29uSGVscGVyIH0gZnJvbSAnLi4vLi4vQnBtbk1vZGVsSnNvbkhlbHBlcic7XHJcblxyXG5leHBvcnQgY2xhc3MgU2xpbUJpekV2ZW50RW50aXR5IGV4dGVuZHMgU2xpbU1ldGFkYXRhRW50aXR5IGltcGxlbWVudHMgSVNsaW1CaXpFdmVudEVudGl0eSB7XHJcbiAgICBpc0VuYWJsZWQ6IGJvb2xlYW47XHJcbiAgICB2b0lkOiBzdHJpbmc7XHJcbiAgICBiZUV2ZW50Um91dGVyQ29tcG9uZW50SWQ6IHN0cmluZztcclxuICAgIGJpekV2ZW50QWdlbnRDb21wb25lbnRJZDogc3RyaW5nO1xyXG4gICAgY2FuRG9FeHByZXNzaW9uSWQ6IHN0cmluZztcclxuICAgIGJpekZsb3djaGFydElkRXhwcmVzc2lvbklkOiBzdHJpbmc7XHJcbiAgICBiZUV2ZW50Um91dGVyQ2xhc3NUeXBlTmFtZTogc3RyaW5nO1xyXG5cclxuICAgIHByb3RlY3RlZCBSZXNldEJlZm9yZUxvYWRGcm9tKCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLlJlc2V0QmVmb3JlTG9hZEZyb20oKTtcclxuXHJcbiAgICAgICAgdGhpcy5iZUV2ZW50Um91dGVyQ29tcG9uZW50SWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuYml6RXZlbnRBZ2VudENvbXBvbmVudElkID0gbnVsbDtcclxuICAgICAgICB0aGlzLnZvSWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY2FuRG9FeHByZXNzaW9uSWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuYml6Rmxvd2NoYXJ0SWRFeHByZXNzaW9uSWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuYmVFdmVudFJvdXRlckNsYXNzVHlwZU5hbWUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuaXNFbmFibGVkID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgQ29udmVydFRvSnNvbk9iamVjdCgpOiB7fSB7XHJcbiAgICAgICAgbGV0IG9iaiA9IHN1cGVyLkNvbnZlcnRUb0pzb25PYmplY3QoKTtcclxuXHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiaXNFbmFibGVkXCIsIHRoaXMuaXNFbmFibGVkKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJiZUV2ZW50Um91dGVyQ29tcG9uZW50SWRcIiwgdGhpcy5iZUV2ZW50Um91dGVyQ29tcG9uZW50SWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcImJpekV2ZW50QWdlbnRDb21wb25lbnRJZFwiLCB0aGlzLmJpekV2ZW50QWdlbnRDb21wb25lbnRJZCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwidm9JZFwiLCB0aGlzLnZvSWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcImNhbkRvRXhwcmVzc2lvbklkXCIsIHRoaXMuY2FuRG9FeHByZXNzaW9uSWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcImJpekZsb3djaGFydElkRXhwcmVzc2lvbklkXCIsIHRoaXMuYml6Rmxvd2NoYXJ0SWRFeHByZXNzaW9uSWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcImJlRXZlbnRSb3V0ZXJDbGFzc1R5cGVOYW1lXCIsIHRoaXMuYmVFdmVudFJvdXRlckNsYXNzVHlwZU5hbWUpO1xyXG5cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBMb2FkRnJvbUpzb25PYmplY3Qob2JqOiB7fSk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG5cclxuICAgICAgICB0aGlzLmlzRW5hYmxlZCA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc0Jvb2xlYW4ob2JqLCBcImlzRW5hYmxlZFwiKTtcclxuICAgICAgICB0aGlzLmJlRXZlbnRSb3V0ZXJDb21wb25lbnRJZCA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwiYmVFdmVudFJvdXRlckNvbXBvbmVudElkXCIpO1xyXG4gICAgICAgIHRoaXMuYml6RXZlbnRBZ2VudENvbXBvbmVudElkID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJiaXpFdmVudEFnZW50Q29tcG9uZW50SWRcIik7XHJcbiAgICAgICAgdGhpcy52b0lkID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJ2b0lkXCIpO1xyXG4gICAgICAgIHRoaXMuY2FuRG9FeHByZXNzaW9uSWQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcImNhbkRvRXhwcmVzc2lvbklkXCIpO1xyXG4gICAgICAgIHRoaXMuYml6Rmxvd2NoYXJ0SWRFeHByZXNzaW9uSWQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcImJpekZsb3djaGFydElkRXhwcmVzc2lvbklkXCIpO1xyXG4gICAgICAgIHRoaXMuYmVFdmVudFJvdXRlckNsYXNzVHlwZU5hbWUgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcImJlRXZlbnRSb3V0ZXJDbGFzc1R5cGVOYW1lXCIpO1xyXG4gICAgfVxyXG59Il19