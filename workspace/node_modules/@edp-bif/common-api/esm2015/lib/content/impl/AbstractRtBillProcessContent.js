/**
 * @fileoverview added by tsickle
 * Generated from: lib/content/impl/AbstractRtBillProcessContent.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { JsonConvertableImpl, BpmnModelJsonHelper } from '../../ref';
import { ConditionEntity } from "../../entity/impl/ConditionEntity";
import { MappingModeEntity } from '../../entity/impl/MappingModeEntity';
import { SaveModeEntity } from '../../entity/impl/SaveModeEntity';
/**
 * 单据流内容类。
 * @param TEntity 单据流实体。
 * @abstract
 * @template TEntity
 */
export class AbstractRtBillProcessContent extends JsonConvertableImpl {
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.entity = null;
        this.eventRouterConditionsContent = new Array();
        this.mappingConditionsContent = new Array();
        this.mappingModeContent = null;
        this.saveModeContent = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "entity", this.entity);
        BpmnModelJsonHelper.SetAttributeValue(obj, "eventRouterConditionsContent", this.eventRouterConditionsContent);
        BpmnModelJsonHelper.SetAttributeValue(obj, "mappingConditionsContent", this.mappingConditionsContent);
        BpmnModelJsonHelper.SetAttributeValue(obj, "mappingModeContent", this.mappingModeContent);
        BpmnModelJsonHelper.SetAttributeValue(obj, "saveModeContent", this.saveModeContent);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.entity = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "entity", this.getEntityClass());
        this.eventRouterConditionsContent = BpmnModelJsonHelper.GetAttributeValueAsList(obj, "eventRouterConditionsContent", ConditionEntity);
        this.mappingConditionsContent = BpmnModelJsonHelper.GetAttributeValueAsList(obj, "mappingConditionsContent", ConditionEntity);
        this.mappingModeContent = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "mappingModeContent", MappingModeEntity);
        this.saveModeContent = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "saveModeContent", SaveModeEntity);
    }
}
if (false) {
    /** @type {?} */
    AbstractRtBillProcessContent.prototype.entity;
    /** @type {?} */
    AbstractRtBillProcessContent.prototype.eventRouterConditionsContent;
    /** @type {?} */
    AbstractRtBillProcessContent.prototype.mappingConditionsContent;
    /** @type {?} */
    AbstractRtBillProcessContent.prototype.mappingModeContent;
    /** @type {?} */
    AbstractRtBillProcessContent.prototype.saveModeContent;
    /**
     * 获取泛型类类型。
     *
     * @abstract
     * @protected
     * @template ClassOfT
     * @return {?} 泛型类类型。
     */
    AbstractRtBillProcessContent.prototype.getEntityClass = function () { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWJzdHJhY3RSdEJpbGxQcm9jZXNzQ29udGVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlZHAtYmlmL2NvbW1vbi1hcGkvIiwic291cmNlcyI6WyJsaWIvY29udGVudC9pbXBsL0Fic3RyYWN0UnRCaWxsUHJvY2Vzc0NvbnRlbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFckUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQzs7Ozs7OztBQU9sRSxNQUFNLE9BQWdCLDRCQUFpRSxTQUFRLG1CQUFtQjs7Ozs7SUFPcEcsbUJBQW1CO1FBQ3pCLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBRTVCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1FBQ25CLElBQUksQ0FBQyw0QkFBNEIsR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO1FBQ2hELElBQUksQ0FBQyx3QkFBd0IsR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO1FBQzVDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUM7UUFDL0IsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7SUFDaEMsQ0FBQzs7OztJQUVNLG1CQUFtQjs7WUFDbEIsR0FBRyxHQUFHLEtBQUssQ0FBQyxtQkFBbUIsRUFBRTtRQUVyQyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsRSxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsOEJBQThCLEVBQUUsSUFBSSxDQUFDLDRCQUE0QixDQUFDLENBQUM7UUFDOUcsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLDBCQUEwQixFQUFFLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1FBQ3RHLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxvQkFBb0IsRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUMxRixtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBRXBGLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7SUFFTSxrQkFBa0IsQ0FBQyxHQUFPO1FBQzdCLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUU5QixJQUFJLENBQUMsTUFBTSxHQUFHLG1CQUFtQixDQUFDLG1DQUFtQyxDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7UUFDNUcsSUFBSSxDQUFDLDRCQUE0QixHQUFHLG1CQUFtQixDQUFDLHVCQUF1QixDQUFDLEdBQUcsRUFBRSw4QkFBOEIsRUFBRSxlQUFlLENBQUMsQ0FBQztRQUN0SSxJQUFJLENBQUMsd0JBQXdCLEdBQUcsbUJBQW1CLENBQUMsdUJBQXVCLENBQUMsR0FBRyxFQUFFLDBCQUEwQixFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBQzlILElBQUksQ0FBQyxrQkFBa0IsR0FBRyxtQkFBbUIsQ0FBQyxtQ0FBbUMsQ0FBQyxHQUFHLEVBQUUsb0JBQW9CLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUNoSSxJQUFJLENBQUMsZUFBZSxHQUFHLG1CQUFtQixDQUFDLG1DQUFtQyxDQUFDLEdBQUcsRUFBRSxpQkFBaUIsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUMzSCxDQUFDO0NBU0o7OztJQTdDRyw4Q0FBZ0I7O0lBQ2hCLG9FQUFxRDs7SUFDckQsZ0VBQWlEOztJQUNqRCwwREFBc0M7O0lBQ3RDLHVEQUFnQzs7Ozs7Ozs7O0lBd0NoQyx3RUFBOEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBKc29uQ29udmVydGFibGVJbXBsLCBCcG1uTW9kZWxKc29uSGVscGVyIH0gZnJvbSAnLi4vLi4vcmVmJztcclxuaW1wb3J0IHsgSVJ0QmlsbFByb2Nlc3NDb250ZW50IH0gZnJvbSAnLi4vSVJ0QmlsbFByb2Nlc3NDb250ZW50JztcclxuaW1wb3J0IHsgQ29uZGl0aW9uRW50aXR5IH0gZnJvbSBcIi4uLy4uL2VudGl0eS9pbXBsL0NvbmRpdGlvbkVudGl0eVwiO1xyXG5pbXBvcnQgeyBNYXBwaW5nTW9kZUVudGl0eSB9IGZyb20gJy4uLy4uL2VudGl0eS9pbXBsL01hcHBpbmdNb2RlRW50aXR5JztcclxuaW1wb3J0IHsgU2F2ZU1vZGVFbnRpdHkgfSBmcm9tICcuLi8uLi9lbnRpdHkvaW1wbC9TYXZlTW9kZUVudGl0eSc7XHJcbmltcG9ydCB7IElCaWxsUHJvY2Vzc0VudGl0eSB9IGZyb20gJy4uLy4uL2VudGl0eS9JQmlsbFByb2Nlc3NFbnRpdHknO1xyXG5cclxuLyoqXHJcbiAqIOWNleaNrua1geWGheWuueexu+OAglxyXG4gKiBAcGFyYW0gVEVudGl0eSDljZXmja7mtYHlrp7kvZPjgIJcclxuICovXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdFJ0QmlsbFByb2Nlc3NDb250ZW50PFRFbnRpdHkgZXh0ZW5kcyBJQmlsbFByb2Nlc3NFbnRpdHk+IGV4dGVuZHMgSnNvbkNvbnZlcnRhYmxlSW1wbCBpbXBsZW1lbnRzIElSdEJpbGxQcm9jZXNzQ29udGVudDxURW50aXR5PiB7XHJcbiAgICBlbnRpdHk6IFRFbnRpdHk7XHJcbiAgICBldmVudFJvdXRlckNvbmRpdGlvbnNDb250ZW50OiBBcnJheTxDb25kaXRpb25FbnRpdHk+O1xyXG4gICAgbWFwcGluZ0NvbmRpdGlvbnNDb250ZW50OiBBcnJheTxDb25kaXRpb25FbnRpdHk+O1xyXG4gICAgbWFwcGluZ01vZGVDb250ZW50OiBNYXBwaW5nTW9kZUVudGl0eTtcclxuICAgIHNhdmVNb2RlQ29udGVudDogU2F2ZU1vZGVFbnRpdHk7XHJcblxyXG4gICAgcHJvdGVjdGVkIFJlc2V0QmVmb3JlTG9hZEZyb20oKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuUmVzZXRCZWZvcmVMb2FkRnJvbSgpO1xyXG5cclxuICAgICAgICB0aGlzLmVudGl0eSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5ldmVudFJvdXRlckNvbmRpdGlvbnNDb250ZW50ID0gbmV3IEFycmF5KCk7XHJcbiAgICAgICAgdGhpcy5tYXBwaW5nQ29uZGl0aW9uc0NvbnRlbnQgPSBuZXcgQXJyYXkoKTtcclxuICAgICAgICB0aGlzLm1hcHBpbmdNb2RlQ29udGVudCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5zYXZlTW9kZUNvbnRlbnQgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBDb252ZXJ0VG9Kc29uT2JqZWN0KCk6IHt9IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG5cclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJlbnRpdHlcIiwgdGhpcy5lbnRpdHkpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcImV2ZW50Um91dGVyQ29uZGl0aW9uc0NvbnRlbnRcIiwgdGhpcy5ldmVudFJvdXRlckNvbmRpdGlvbnNDb250ZW50KTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJtYXBwaW5nQ29uZGl0aW9uc0NvbnRlbnRcIiwgdGhpcy5tYXBwaW5nQ29uZGl0aW9uc0NvbnRlbnQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIm1hcHBpbmdNb2RlQ29udGVudFwiLCB0aGlzLm1hcHBpbmdNb2RlQ29udGVudCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwic2F2ZU1vZGVDb250ZW50XCIsIHRoaXMuc2F2ZU1vZGVDb250ZW50KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgTG9hZEZyb21Kc29uT2JqZWN0KG9iajoge30pOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuXHJcbiAgICAgICAgdGhpcy5lbnRpdHkgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNKc29uU2VyaWFsaXphYmxlKG9iaiwgXCJlbnRpdHlcIiwgdGhpcy5nZXRFbnRpdHlDbGFzcygpKTtcclxuICAgICAgICB0aGlzLmV2ZW50Um91dGVyQ29uZGl0aW9uc0NvbnRlbnQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNMaXN0KG9iaiwgXCJldmVudFJvdXRlckNvbmRpdGlvbnNDb250ZW50XCIsIENvbmRpdGlvbkVudGl0eSk7XHJcbiAgICAgICAgdGhpcy5tYXBwaW5nQ29uZGl0aW9uc0NvbnRlbnQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNMaXN0KG9iaiwgXCJtYXBwaW5nQ29uZGl0aW9uc0NvbnRlbnRcIiwgQ29uZGl0aW9uRW50aXR5KTtcclxuICAgICAgICB0aGlzLm1hcHBpbmdNb2RlQ29udGVudCA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc0pzb25TZXJpYWxpemFibGUob2JqLCBcIm1hcHBpbmdNb2RlQ29udGVudFwiLCBNYXBwaW5nTW9kZUVudGl0eSk7XHJcbiAgICAgICAgdGhpcy5zYXZlTW9kZUNvbnRlbnQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNKc29uU2VyaWFsaXphYmxlKG9iaiwgXCJzYXZlTW9kZUNvbnRlbnRcIiwgU2F2ZU1vZGVFbnRpdHkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5rOb5Z6L57G757G75Z6L44CCXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIDxDbGFzc09mVD7ms5vlnovnsbvjgIJcclxuICAgICAqIEByZXR1cm4g5rOb5Z6L57G757G75Z6L44CCXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBnZXRFbnRpdHlDbGFzczxDbGFzc09mVCBleHRlbmRzIFRFbnRpdHk+KCk7XHJcbn0iXX0=