/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/impl/MappingRuleContent.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModelJsonHelper, JsonConvertableImpl } from '../../ref';
export class MappingRuleContent extends JsonConvertableImpl {
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.mappingRuleMetadataId = null;
        this.mappingRuleId = null;
        this.mappingContent = null;
        this.mappingConfig = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "mappingRuleMetadataId", this.mappingRuleMetadataId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "mappingRuleId", this.mappingRuleId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "mappingContent", this.mappingContent);
        BpmnModelJsonHelper.SetAttributeValue(obj, "mappingConfig", this.mappingConfig);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.mappingRuleMetadataId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "mappingRuleMetadataId");
        this.mappingRuleId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "mappingRuleId");
        this.mappingContent = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "mappingContent");
        this.mappingConfig = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "mappingConfig");
    }
}
if (false) {
    /** @type {?} */
    MappingRuleContent.prototype.mappingRuleMetadataId;
    /** @type {?} */
    MappingRuleContent.prototype.mappingRuleId;
    /** @type {?} */
    MappingRuleContent.prototype.mappingContent;
    /** @type {?} */
    MappingRuleContent.prototype.mappingConfig;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFwcGluZ1J1bGVDb250ZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVkcC1iaWYvY29tbW9uLWFwaS8iLCJzb3VyY2VzIjpbImxpYi9lbnRpdHkvaW1wbC9NYXBwaW5nUnVsZUNvbnRlbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFckUsTUFBTSxPQUFPLGtCQUFtQixTQUFRLG1CQUFtQjs7Ozs7SUFNN0MsbUJBQW1CO1FBQ3pCLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBRTVCLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUM7UUFDbEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7UUFDMUIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7UUFDM0IsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7SUFDOUIsQ0FBQzs7OztJQUdNLG1CQUFtQjs7WUFDbEIsR0FBRyxHQUFHLEtBQUssQ0FBQyxtQkFBbUIsRUFBRTtRQUVyQyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsdUJBQXVCLEVBQUUsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDaEcsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGVBQWUsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDaEYsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGdCQUFnQixFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNsRixtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsZUFBZSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUVoRixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7Ozs7O0lBRU0sa0JBQWtCLENBQUMsR0FBTztRQUM3QixLQUFLLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFOUIsSUFBSSxDQUFDLHFCQUFxQixHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSx1QkFBdUIsQ0FBQyxDQUFDO1FBQ3pHLElBQUksQ0FBQyxhQUFhLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBQ3pGLElBQUksQ0FBQyxjQUFjLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLGdCQUFnQixDQUFDLENBQUM7UUFDM0YsSUFBSSxDQUFDLGFBQWEsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDN0YsQ0FBQztDQUNKOzs7SUFsQ0csbURBQThCOztJQUM5QiwyQ0FBc0I7O0lBQ3RCLDRDQUF1Qjs7SUFDdkIsMkNBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnBtbk1vZGVsSnNvbkhlbHBlciwgSnNvbkNvbnZlcnRhYmxlSW1wbCB9IGZyb20gJy4uLy4uL3JlZic7XHJcblxyXG5leHBvcnQgY2xhc3MgTWFwcGluZ1J1bGVDb250ZW50IGV4dGVuZHMgSnNvbkNvbnZlcnRhYmxlSW1wbCB7XHJcbiAgICBtYXBwaW5nUnVsZU1ldGFkYXRhSWQ6IHN0cmluZztcclxuICAgIG1hcHBpbmdSdWxlSWQ6IHN0cmluZztcclxuICAgIG1hcHBpbmdDb250ZW50OiBzdHJpbmc7XHJcbiAgICBtYXBwaW5nQ29uZmlnOiBzdHJpbmc7XHJcblxyXG4gICAgcHJvdGVjdGVkIFJlc2V0QmVmb3JlTG9hZEZyb20oKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuUmVzZXRCZWZvcmVMb2FkRnJvbSgpO1xyXG5cclxuICAgICAgICB0aGlzLm1hcHBpbmdSdWxlTWV0YWRhdGFJZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5tYXBwaW5nUnVsZUlkID0gbnVsbDtcclxuICAgICAgICB0aGlzLm1hcHBpbmdDb250ZW50ID0gbnVsbDtcclxuICAgICAgICB0aGlzLm1hcHBpbmdDb25maWcgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwdWJsaWMgQ29udmVydFRvSnNvbk9iamVjdCgpOiB7fSB7XHJcbiAgICAgICAgbGV0IG9iaiA9IHN1cGVyLkNvbnZlcnRUb0pzb25PYmplY3QoKTtcclxuXHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwibWFwcGluZ1J1bGVNZXRhZGF0YUlkXCIsIHRoaXMubWFwcGluZ1J1bGVNZXRhZGF0YUlkKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJtYXBwaW5nUnVsZUlkXCIsIHRoaXMubWFwcGluZ1J1bGVJZCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwibWFwcGluZ0NvbnRlbnRcIiwgdGhpcy5tYXBwaW5nQ29udGVudCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwibWFwcGluZ0NvbmZpZ1wiLCB0aGlzLm1hcHBpbmdDb25maWcpO1xyXG5cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBMb2FkRnJvbUpzb25PYmplY3Qob2JqOiB7fSk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG5cclxuICAgICAgICB0aGlzLm1hcHBpbmdSdWxlTWV0YWRhdGFJZCA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwibWFwcGluZ1J1bGVNZXRhZGF0YUlkXCIpO1xyXG4gICAgICAgIHRoaXMubWFwcGluZ1J1bGVJZCA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwibWFwcGluZ1J1bGVJZFwiKTtcclxuICAgICAgICB0aGlzLm1hcHBpbmdDb250ZW50ID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJtYXBwaW5nQ29udGVudFwiKTtcclxuICAgICAgICB0aGlzLm1hcHBpbmdDb25maWcgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcIm1hcHBpbmdDb25maWdcIik7XHJcbiAgICB9XHJcbn0iXX0=