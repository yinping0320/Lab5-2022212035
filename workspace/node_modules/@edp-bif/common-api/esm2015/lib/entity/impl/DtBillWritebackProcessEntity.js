/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/impl/DtBillWritebackProcessEntity.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModelJsonHelper } from '../../ref';
import { AbstractBillWritebackProcessEntity } from './AbstractBillWritebackProcessEntity';
export class DtBillWritebackProcessEntity extends AbstractBillWritebackProcessEntity {
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.eventRouterConditionsContent = null;
        this.mappingConditionsContent = null;
        this.mappingModeContent = null;
        this.saveModeContent = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "eventRouterConditionsContent", this.eventRouterConditionsContent);
        BpmnModelJsonHelper.SetAttributeValue(obj, "mappingConditionsContent", this.mappingConditionsContent);
        BpmnModelJsonHelper.SetAttributeValue(obj, "mappingModeContent", this.mappingModeContent);
        BpmnModelJsonHelper.SetAttributeValue(obj, "saveModeContent", this.saveModeContent);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.eventRouterConditionsContent = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "eventRouterConditionsContent");
        this.mappingConditionsContent = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "mappingConditionsContent");
        this.mappingModeContent = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "mappingModeContent");
        this.saveModeContent = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "saveModeContent");
    }
}
if (false) {
    /** @type {?} */
    DtBillWritebackProcessEntity.prototype.eventRouterConditionsContent;
    /** @type {?} */
    DtBillWritebackProcessEntity.prototype.mappingConditionsContent;
    /** @type {?} */
    DtBillWritebackProcessEntity.prototype.mappingModeContent;
    /** @type {?} */
    DtBillWritebackProcessEntity.prototype.saveModeContent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRHRCaWxsV3JpdGViYWNrUHJvY2Vzc0VudGl0eS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlZHAtYmlmL2NvbW1vbi1hcGkvIiwic291cmNlcyI6WyJsaWIvZW50aXR5L2ltcGwvRHRCaWxsV3JpdGViYWNrUHJvY2Vzc0VudGl0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNoRCxPQUFPLEVBQUUsa0NBQWtDLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUcxRixNQUFNLE9BQU8sNEJBQTZCLFNBQVEsa0NBQWtDOzs7OztJQU10RSxtQkFBbUI7UUFDekIsS0FBSyxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFFNUIsSUFBSSxDQUFDLDRCQUE0QixHQUFHLElBQUksQ0FBQztRQUN6QyxJQUFJLENBQUMsd0JBQXdCLEdBQUcsSUFBSSxDQUFDO1FBQ3JDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUM7UUFDL0IsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7SUFDaEMsQ0FBQzs7OztJQUVNLG1CQUFtQjs7WUFDbEIsR0FBRyxHQUFPLEtBQUssQ0FBQyxtQkFBbUIsRUFBRTtRQUV6QyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsOEJBQThCLEVBQUUsSUFBSSxDQUFDLDRCQUE0QixDQUFDLENBQUM7UUFDOUcsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLDBCQUEwQixFQUFFLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1FBQ3RHLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxvQkFBb0IsRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUMxRixtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBRXBGLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7SUFFTSxrQkFBa0IsQ0FBQyxHQUFPO1FBQzdCLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUU5QixJQUFJLENBQUMsNEJBQTRCLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLDhCQUE4QixDQUFDLENBQUM7UUFDdkgsSUFBSSxDQUFDLHdCQUF3QixHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSwwQkFBMEIsQ0FBQyxDQUFDO1FBQy9HLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztRQUNuRyxJQUFJLENBQUMsZUFBZSxHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0lBQ2pHLENBQUM7Q0FDSjs7O0lBakNHLG9FQUFxQzs7SUFDckMsZ0VBQWlDOztJQUNqQywwREFBMkI7O0lBQzNCLHVEQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJwbW5Nb2RlbEpzb25IZWxwZXIgfSBmcm9tICcuLi8uLi9yZWYnO1xyXG5pbXBvcnQgeyBBYnN0cmFjdEJpbGxXcml0ZWJhY2tQcm9jZXNzRW50aXR5IH0gZnJvbSAnLi9BYnN0cmFjdEJpbGxXcml0ZWJhY2tQcm9jZXNzRW50aXR5JztcclxuaW1wb3J0IHsgSUR0QmlsbFdyaXRlYmFja1Byb2Nlc3NFbnRpdHkgfSBmcm9tICcuLi9JRHRCaWxsV3JpdGViYWNrUHJvY2Vzc0VudGl0eSc7XHJcblxyXG5leHBvcnQgY2xhc3MgRHRCaWxsV3JpdGViYWNrUHJvY2Vzc0VudGl0eSBleHRlbmRzIEFic3RyYWN0QmlsbFdyaXRlYmFja1Byb2Nlc3NFbnRpdHkgaW1wbGVtZW50cyBJRHRCaWxsV3JpdGViYWNrUHJvY2Vzc0VudGl0eSB7XHJcbiAgICBldmVudFJvdXRlckNvbmRpdGlvbnNDb250ZW50OiBzdHJpbmc7XHJcbiAgICBtYXBwaW5nQ29uZGl0aW9uc0NvbnRlbnQ6IHN0cmluZztcclxuICAgIG1hcHBpbmdNb2RlQ29udGVudDogc3RyaW5nO1xyXG4gICAgc2F2ZU1vZGVDb250ZW50OiBzdHJpbmc7XHJcblxyXG4gICAgcHJvdGVjdGVkIFJlc2V0QmVmb3JlTG9hZEZyb20oKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuUmVzZXRCZWZvcmVMb2FkRnJvbSgpO1xyXG5cclxuICAgICAgICB0aGlzLmV2ZW50Um91dGVyQ29uZGl0aW9uc0NvbnRlbnQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMubWFwcGluZ0NvbmRpdGlvbnNDb250ZW50ID0gbnVsbDtcclxuICAgICAgICB0aGlzLm1hcHBpbmdNb2RlQ29udGVudCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5zYXZlTW9kZUNvbnRlbnQgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBDb252ZXJ0VG9Kc29uT2JqZWN0KCk6IHt9IHtcclxuICAgICAgICBsZXQgb2JqOiB7fSA9IHN1cGVyLkNvbnZlcnRUb0pzb25PYmplY3QoKTtcclxuXHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiZXZlbnRSb3V0ZXJDb25kaXRpb25zQ29udGVudFwiLCB0aGlzLmV2ZW50Um91dGVyQ29uZGl0aW9uc0NvbnRlbnQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIm1hcHBpbmdDb25kaXRpb25zQ29udGVudFwiLCB0aGlzLm1hcHBpbmdDb25kaXRpb25zQ29udGVudCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwibWFwcGluZ01vZGVDb250ZW50XCIsIHRoaXMubWFwcGluZ01vZGVDb250ZW50KTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJzYXZlTW9kZUNvbnRlbnRcIiwgdGhpcy5zYXZlTW9kZUNvbnRlbnQpO1xyXG5cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBMb2FkRnJvbUpzb25PYmplY3Qob2JqOiB7fSk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG5cclxuICAgICAgICB0aGlzLmV2ZW50Um91dGVyQ29uZGl0aW9uc0NvbnRlbnQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcImV2ZW50Um91dGVyQ29uZGl0aW9uc0NvbnRlbnRcIik7XHJcbiAgICAgICAgdGhpcy5tYXBwaW5nQ29uZGl0aW9uc0NvbnRlbnQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcIm1hcHBpbmdDb25kaXRpb25zQ29udGVudFwiKTtcclxuICAgICAgICB0aGlzLm1hcHBpbmdNb2RlQ29udGVudCA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwibWFwcGluZ01vZGVDb250ZW50XCIpO1xyXG4gICAgICAgIHRoaXMuc2F2ZU1vZGVDb250ZW50ID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJzYXZlTW9kZUNvbnRlbnRcIik7XHJcbiAgICB9XHJcbn0iXX0=