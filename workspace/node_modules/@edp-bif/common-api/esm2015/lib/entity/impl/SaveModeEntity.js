/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/impl/SaveModeEntity.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { JsonConvertableImpl, BpmnModelJsonHelper } from '../../ref';
import { SaveMode } from '../SaveMode';
/**
 * 保存模式实体类。
 */
export class SaveModeEntity extends JsonConvertableImpl {
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.saveMode = null;
        this.content = null;
        this.componentContent = null;
        this.voActionContent = null;
        this.taskCenterContent = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "saveMode", this.saveMode);
        BpmnModelJsonHelper.SetAttributeValue(obj, "content", this.content);
        BpmnModelJsonHelper.SetAttributeValue(obj, "componentContent", this.componentContent);
        BpmnModelJsonHelper.SetAttributeValue(obj, "voActionContent", this.voActionContent);
        BpmnModelJsonHelper.SetAttributeValue(obj, "taskCenterContent", this.taskCenterContent);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.saveMode = SaveMode[BpmnModelJsonHelper.GetAttributeValueAsString(obj, "saveMode")];
        this.content = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "content");
        this.componentContent = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "componentContent");
        this.voActionContent = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "voActionContent");
        this.taskCenterContent = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "taskCenterContent");
    }
}
if (false) {
    /** @type {?} */
    SaveModeEntity.prototype.saveMode;
    /** @type {?} */
    SaveModeEntity.prototype.content;
    /** @type {?} */
    SaveModeEntity.prototype.componentContent;
    /** @type {?} */
    SaveModeEntity.prototype.voActionContent;
    /** @type {?} */
    SaveModeEntity.prototype.taskCenterContent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2F2ZU1vZGVFbnRpdHkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZWRwLWJpZi9jb21tb24tYXBpLyIsInNvdXJjZXMiOlsibGliL2VudGl0eS9pbXBsL1NhdmVNb2RlRW50aXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLG1CQUFtQixFQUFFLG1CQUFtQixFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRXJFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7Ozs7QUFLdkMsTUFBTSxPQUFPLGNBQWUsU0FBUSxtQkFBbUI7Ozs7O0lBT3pDLG1CQUFtQjtRQUN6QixLQUFLLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUU1QixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNwQixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO1FBQzdCLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO1FBQzVCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUM7SUFDbEMsQ0FBQzs7OztJQUVNLG1CQUFtQjs7WUFDbEIsR0FBRyxHQUFHLEtBQUssQ0FBQyxtQkFBbUIsRUFBRTtRQUVyQyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsVUFBVSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN0RSxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNwRSxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDdEYsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGlCQUFpQixFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNwRixtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFFeEYsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVNLGtCQUFrQixDQUFDLEdBQU87UUFDN0IsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ3pGLElBQUksQ0FBQyxPQUFPLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQzdFLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztRQUMvRixJQUFJLENBQUMsZUFBZSxHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQzdGLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztJQUNyRyxDQUFDO0NBQ0o7OztJQXJDRyxrQ0FBbUI7O0lBQ25CLGlDQUFnQjs7SUFDaEIsMENBQXlCOztJQUN6Qix5Q0FBd0I7O0lBQ3hCLDJDQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEpzb25Db252ZXJ0YWJsZUltcGwsIEJwbW5Nb2RlbEpzb25IZWxwZXIgfSBmcm9tICcuLi8uLi9yZWYnO1xyXG5pbXBvcnQgeyBJU2F2ZU1vZGVFbnRpdHkgfSBmcm9tICcuLi9JU2F2ZU1vZGVFbnRpdHknO1xyXG5pbXBvcnQgeyBTYXZlTW9kZSB9IGZyb20gJy4uL1NhdmVNb2RlJztcclxuXHJcbi8qKlxyXG4gKiDkv53lrZjmqKHlvI/lrp7kvZPnsbvjgIJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBTYXZlTW9kZUVudGl0eSBleHRlbmRzIEpzb25Db252ZXJ0YWJsZUltcGwgaW1wbGVtZW50cyBJU2F2ZU1vZGVFbnRpdHkge1xyXG4gICAgc2F2ZU1vZGU6IFNhdmVNb2RlO1xyXG4gICAgY29udGVudDogc3RyaW5nO1xyXG4gICAgY29tcG9uZW50Q29udGVudDogc3RyaW5nO1xyXG4gICAgdm9BY3Rpb25Db250ZW50OiBzdHJpbmc7XHJcbiAgICB0YXNrQ2VudGVyQ29udGVudDogc3RyaW5nO1xyXG5cclxuICAgIHByb3RlY3RlZCBSZXNldEJlZm9yZUxvYWRGcm9tKCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLlJlc2V0QmVmb3JlTG9hZEZyb20oKTtcclxuXHJcbiAgICAgICAgdGhpcy5zYXZlTW9kZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5jb250ZW50ID0gbnVsbDtcclxuICAgICAgICB0aGlzLmNvbXBvbmVudENvbnRlbnQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMudm9BY3Rpb25Db250ZW50ID0gbnVsbDtcclxuICAgICAgICB0aGlzLnRhc2tDZW50ZXJDb250ZW50ID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgQ29udmVydFRvSnNvbk9iamVjdCgpOiB7fSB7XHJcbiAgICAgICAgbGV0IG9iaiA9IHN1cGVyLkNvbnZlcnRUb0pzb25PYmplY3QoKTtcclxuXHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwic2F2ZU1vZGVcIiwgdGhpcy5zYXZlTW9kZSk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiY29udGVudFwiLCB0aGlzLmNvbnRlbnQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcImNvbXBvbmVudENvbnRlbnRcIiwgdGhpcy5jb21wb25lbnRDb250ZW50KTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJ2b0FjdGlvbkNvbnRlbnRcIiwgdGhpcy52b0FjdGlvbkNvbnRlbnQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInRhc2tDZW50ZXJDb250ZW50XCIsIHRoaXMudGFza0NlbnRlckNvbnRlbnQpO1xyXG5cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBMb2FkRnJvbUpzb25PYmplY3Qob2JqOiB7fSk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG5cclxuICAgICAgICB0aGlzLnNhdmVNb2RlID0gU2F2ZU1vZGVbQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJzYXZlTW9kZVwiKV07XHJcbiAgICAgICAgdGhpcy5jb250ZW50ID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJjb250ZW50XCIpO1xyXG4gICAgICAgIHRoaXMuY29tcG9uZW50Q29udGVudCA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwiY29tcG9uZW50Q29udGVudFwiKTtcclxuICAgICAgICB0aGlzLnZvQWN0aW9uQ29udGVudCA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwidm9BY3Rpb25Db250ZW50XCIpO1xyXG4gICAgICAgIHRoaXMudGFza0NlbnRlckNvbnRlbnQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcInRhc2tDZW50ZXJDb250ZW50XCIpO1xyXG4gICAgfVxyXG59Il19