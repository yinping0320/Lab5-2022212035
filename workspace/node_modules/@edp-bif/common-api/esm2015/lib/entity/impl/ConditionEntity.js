/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/impl/ConditionEntity.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { JsonConvertableImpl, BpmnModelJsonHelper } from '../../ref';
import { ConditionType } from '../ConditionType';
/**
 * 条件实体类。
 */
export class ConditionEntity extends JsonConvertableImpl {
    constructor() {
        super(...arguments);
        this.isEnabled = false;
        this.remarks = null;
        this.supportAutoProcess = true;
        this.supportPushProcess = false;
        this.supportPullProcess = false;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.id = null;
        this.isEnabled = false;
        this.name = null;
        this.type = null;
        this.content = null;
        this.remarks = null;
        this.supportAutoProcess = true;
        this.supportPushProcess = false;
        this.supportPullProcess = false;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "id", this.id);
        BpmnModelJsonHelper.SetAttributeValue(obj, "isEnabled", this.isEnabled);
        BpmnModelJsonHelper.SetAttributeValue(obj, "name", this.name);
        BpmnModelJsonHelper.SetAttributeValue(obj, "type", this.type);
        BpmnModelJsonHelper.SetAttributeValue(obj, "content", this.content);
        BpmnModelJsonHelper.SetAttributeValue(obj, "remarks", this.remarks);
        BpmnModelJsonHelper.SetAttributeValue(obj, "supportAutoProcess", this.supportAutoProcess);
        BpmnModelJsonHelper.SetAttributeValue(obj, "supportPushProcess", this.supportPushProcess);
        BpmnModelJsonHelper.SetAttributeValue(obj, "supportPullProcess", this.supportPullProcess);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.id = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "id");
        this.isEnabled = BpmnModelJsonHelper.GetAttributeValueAsBoolean(obj, "isEnabled");
        this.name = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "name");
        this.type = ConditionType[BpmnModelJsonHelper.GetAttributeValueAsString(obj, "type")];
        this.content = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "content");
        this.remarks = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "remarks");
        this.supportAutoProcess = BpmnModelJsonHelper.GetAttributeValueAsBoolean(obj, "supportAutoProcess");
        this.supportPushProcess = BpmnModelJsonHelper.GetAttributeValueAsBoolean(obj, "supportPushProcess");
        this.supportPullProcess = BpmnModelJsonHelper.GetAttributeValueAsBoolean(obj, "supportPullProcess");
    }
}
if (false) {
    /** @type {?} */
    ConditionEntity.prototype.id;
    /** @type {?} */
    ConditionEntity.prototype.isEnabled;
    /** @type {?} */
    ConditionEntity.prototype.name;
    /** @type {?} */
    ConditionEntity.prototype.type;
    /** @type {?} */
    ConditionEntity.prototype.content;
    /** @type {?} */
    ConditionEntity.prototype.remarks;
    /** @type {?} */
    ConditionEntity.prototype.supportAutoProcess;
    /** @type {?} */
    ConditionEntity.prototype.supportPushProcess;
    /** @type {?} */
    ConditionEntity.prototype.supportPullProcess;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29uZGl0aW9uRW50aXR5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVkcC1iaWYvY29tbW9uLWFwaS8iLCJzb3VyY2VzIjpbImxpYi9lbnRpdHkvaW1wbC9Db25kaXRpb25FbnRpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFckUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7O0FBS2pELE1BQU0sT0FBTyxlQUFnQixTQUFRLG1CQUFtQjtJQUF4RDs7UUFFSSxjQUFTLEdBQVksS0FBSyxDQUFDO1FBSTNCLFlBQU8sR0FBVyxJQUFJLENBQUM7UUFDdkIsdUJBQWtCLEdBQVksSUFBSSxDQUFDO1FBQ25DLHVCQUFrQixHQUFZLEtBQUssQ0FBQztRQUNwQyx1QkFBa0IsR0FBWSxLQUFLLENBQUM7SUE2Q3hDLENBQUM7Ozs7O0lBM0NhLG1CQUFtQjtRQUN6QixLQUFLLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUU1QixJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQztRQUNmLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUM7UUFDL0IsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEtBQUssQ0FBQztRQUNoQyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsS0FBSyxDQUFDO0lBQ3BDLENBQUM7Ozs7SUFFTSxtQkFBbUI7O1lBQ2xCLEdBQUcsR0FBTyxLQUFLLENBQUMsbUJBQW1CLEVBQUU7UUFFekMsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDMUQsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDeEUsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUQsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUQsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDcEUsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDcEUsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLG9CQUFvQixFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQzFGLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxvQkFBb0IsRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUMxRixtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFFMUYsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVNLGtCQUFrQixDQUFDLEdBQU87UUFDN0IsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxFQUFFLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ25FLElBQUksQ0FBQyxTQUFTLEdBQUcsbUJBQW1CLENBQUMsMEJBQTBCLENBQUMsR0FBRyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ2xGLElBQUksQ0FBQyxJQUFJLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxJQUFJLEdBQUcsYUFBYSxDQUFDLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ3RGLElBQUksQ0FBQyxPQUFPLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQzdFLElBQUksQ0FBQyxPQUFPLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQzdFLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxtQkFBbUIsQ0FBQywwQkFBMEIsQ0FBQyxHQUFHLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztRQUNwRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsbUJBQW1CLENBQUMsMEJBQTBCLENBQUMsR0FBRyxFQUFFLG9CQUFvQixDQUFDLENBQUM7UUFDcEcsSUFBSSxDQUFDLGtCQUFrQixHQUFHLG1CQUFtQixDQUFDLDBCQUEwQixDQUFDLEdBQUcsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO0lBQ3hHLENBQUM7Q0FDSjs7O0lBckRHLDZCQUFXOztJQUNYLG9DQUEyQjs7SUFDM0IsK0JBQWE7O0lBQ2IsK0JBQW9COztJQUNwQixrQ0FBZ0I7O0lBQ2hCLGtDQUF1Qjs7SUFDdkIsNkNBQW1DOztJQUNuQyw2Q0FBb0M7O0lBQ3BDLDZDQUFvQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEpzb25Db252ZXJ0YWJsZUltcGwsIEJwbW5Nb2RlbEpzb25IZWxwZXIgfSBmcm9tICcuLi8uLi9yZWYnO1xyXG5pbXBvcnQgeyBJQ29uZGl0aW9uRW50aXR5IH0gZnJvbSAnLi4vSUNvbmRpdGlvbkVudGl0eSc7XHJcbmltcG9ydCB7IENvbmRpdGlvblR5cGUgfSBmcm9tICcuLi9Db25kaXRpb25UeXBlJztcclxuXHJcbi8qKlxyXG4gKiDmnaHku7blrp7kvZPnsbvjgIJcclxuICovXHJcbmV4cG9ydCBjbGFzcyBDb25kaXRpb25FbnRpdHkgZXh0ZW5kcyBKc29uQ29udmVydGFibGVJbXBsIGltcGxlbWVudHMgSUNvbmRpdGlvbkVudGl0eSB7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgaXNFbmFibGVkOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICB0eXBlOiBDb25kaXRpb25UeXBlO1xyXG4gICAgY29udGVudDogc3RyaW5nO1xyXG4gICAgcmVtYXJrczogc3RyaW5nID0gbnVsbDtcclxuICAgIHN1cHBvcnRBdXRvUHJvY2VzczogYm9vbGVhbiA9IHRydWU7XHJcbiAgICBzdXBwb3J0UHVzaFByb2Nlc3M6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIHN1cHBvcnRQdWxsUHJvY2VzczogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIHByb3RlY3RlZCBSZXNldEJlZm9yZUxvYWRGcm9tKCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLlJlc2V0QmVmb3JlTG9hZEZyb20oKTtcclxuXHJcbiAgICAgICAgdGhpcy5pZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5pc0VuYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLm5hbWUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5jb250ZW50ID0gbnVsbDtcclxuICAgICAgICB0aGlzLnJlbWFya3MgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuc3VwcG9ydEF1dG9Qcm9jZXNzID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnN1cHBvcnRQdXNoUHJvY2VzcyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuc3VwcG9ydFB1bGxQcm9jZXNzID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIENvbnZlcnRUb0pzb25PYmplY3QoKToge30ge1xyXG4gICAgICAgIGxldCBvYmo6IHt9ID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG5cclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJpZFwiLCB0aGlzLmlkKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJpc0VuYWJsZWRcIiwgdGhpcy5pc0VuYWJsZWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIm5hbWVcIiwgdGhpcy5uYW1lKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJ0eXBlXCIsIHRoaXMudHlwZSk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiY29udGVudFwiLCB0aGlzLmNvbnRlbnQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInJlbWFya3NcIiwgdGhpcy5yZW1hcmtzKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJzdXBwb3J0QXV0b1Byb2Nlc3NcIiwgdGhpcy5zdXBwb3J0QXV0b1Byb2Nlc3MpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInN1cHBvcnRQdXNoUHJvY2Vzc1wiLCB0aGlzLnN1cHBvcnRQdXNoUHJvY2Vzcyk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwic3VwcG9ydFB1bGxQcm9jZXNzXCIsIHRoaXMuc3VwcG9ydFB1bGxQcm9jZXNzKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgTG9hZEZyb21Kc29uT2JqZWN0KG9iajoge30pOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuXHJcbiAgICAgICAgdGhpcy5pZCA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwiaWRcIik7XHJcbiAgICAgICAgdGhpcy5pc0VuYWJsZWQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNCb29sZWFuKG9iaiwgXCJpc0VuYWJsZWRcIik7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJuYW1lXCIpO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IENvbmRpdGlvblR5cGVbQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJ0eXBlXCIpXTtcclxuICAgICAgICB0aGlzLmNvbnRlbnQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcImNvbnRlbnRcIik7XHJcbiAgICAgICAgdGhpcy5yZW1hcmtzID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJyZW1hcmtzXCIpO1xyXG4gICAgICAgIHRoaXMuc3VwcG9ydEF1dG9Qcm9jZXNzID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzQm9vbGVhbihvYmosIFwic3VwcG9ydEF1dG9Qcm9jZXNzXCIpO1xyXG4gICAgICAgIHRoaXMuc3VwcG9ydFB1c2hQcm9jZXNzID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzQm9vbGVhbihvYmosIFwic3VwcG9ydFB1c2hQcm9jZXNzXCIpO1xyXG4gICAgICAgIHRoaXMuc3VwcG9ydFB1bGxQcm9jZXNzID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzQm9vbGVhbihvYmosIFwic3VwcG9ydFB1bGxQcm9jZXNzXCIpO1xyXG4gICAgfVxyXG59Il19