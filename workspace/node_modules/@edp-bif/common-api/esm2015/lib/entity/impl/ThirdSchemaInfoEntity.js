/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/impl/ThirdSchemaInfoEntity.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModelJsonHelper, Entity } from "@edp-aif/common-api";
export class ThirdSchemaInfoEntity extends Entity {
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.schemaCategoryId = null;
        this.schemaCategoryName = null;
        this.schemaConvertorClassTypeName = null;
        this.trackingConfigClassTypeName = null;
        this.suCode = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "schemaCategoryId", this.schemaCategoryId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "schemaCategoryName", this.schemaCategoryName);
        BpmnModelJsonHelper.SetAttributeValue(obj, "schemaConvertorClassTypeName", this.schemaConvertorClassTypeName);
        BpmnModelJsonHelper.SetAttributeValue(obj, "trackingConfigClassTypeName", this.trackingConfigClassTypeName);
        BpmnModelJsonHelper.SetAttributeValue(obj, "suCode", this.suCode);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.schemaCategoryId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "schemaCategoryId");
        this.schemaCategoryName = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "schemaCategoryName");
        this.schemaConvertorClassTypeName = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "schemaConvertorClassTypeName");
        this.trackingConfigClassTypeName = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "trackingConfigClassTypeName");
        this.suCode = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "suCode");
    }
}
if (false) {
    /** @type {?} */
    ThirdSchemaInfoEntity.prototype.schemaCategoryId;
    /** @type {?} */
    ThirdSchemaInfoEntity.prototype.schemaCategoryName;
    /** @type {?} */
    ThirdSchemaInfoEntity.prototype.schemaConvertorClassTypeName;
    /** @type {?} */
    ThirdSchemaInfoEntity.prototype.trackingConfigClassTypeName;
    /** @type {?} */
    ThirdSchemaInfoEntity.prototype.suCode;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGhpcmRTY2hlbWFJbmZvRW50aXR5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVkcC1iaWYvY29tbW9uLWFwaS8iLCJzb3VyY2VzIjpbImxpYi9lbnRpdHkvaW1wbC9UaGlyZFNjaGVtYUluZm9FbnRpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHbEUsTUFBTSxPQUFPLHFCQUFzQixTQUFRLE1BQU07Ozs7O0lBT25DLG1CQUFtQjtRQUN6QixLQUFLLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUU1QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO1FBQzdCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUM7UUFDL0IsSUFBSSxDQUFDLDRCQUE0QixHQUFHLElBQUksQ0FBQztRQUN6QyxJQUFJLENBQUMsMkJBQTJCLEdBQUcsSUFBSSxDQUFDO1FBQ3hDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0lBQ3ZCLENBQUM7Ozs7SUFFTSxtQkFBbUI7O1lBQ2xCLEdBQUcsR0FBRyxLQUFLLENBQUMsbUJBQW1CLEVBQUU7UUFFckMsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGtCQUFrQixFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3RGLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxvQkFBb0IsRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUMxRixtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsOEJBQThCLEVBQUUsSUFBSSxDQUFDLDRCQUE0QixDQUFDLENBQUM7UUFDOUcsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLDZCQUE2QixFQUFFLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1FBQzVHLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRWxFLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7SUFFTSxrQkFBa0IsQ0FBQyxHQUFPO1FBQzdCLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUU5QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLGtCQUFrQixDQUFDLENBQUM7UUFDL0YsSUFBSSxDQUFDLGtCQUFrQixHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO1FBQ25HLElBQUksQ0FBQyw0QkFBNEIsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsOEJBQThCLENBQUMsQ0FBQztRQUN2SCxJQUFJLENBQUMsMkJBQTJCLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLDZCQUE2QixDQUFDLENBQUM7UUFDckgsSUFBSSxDQUFDLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDL0UsQ0FBQztDQUNKOzs7SUFyQ0csaURBQXlCOztJQUN6QixtREFBMkI7O0lBQzNCLDZEQUFxQzs7SUFDckMsNERBQW9DOztJQUNwQyx1Q0FBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJwbW5Nb2RlbEpzb25IZWxwZXIsIEVudGl0eSB9IGZyb20gXCJAZWRwLWFpZi9jb21tb24tYXBpXCI7XHJcbmltcG9ydCB7IElUaGlyZFNjaGVtYUluZm9FbnRpdHkgfSBmcm9tIFwiLi4vSVRoaXJkU2NoZW1hSW5mb0VudGl0eVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFRoaXJkU2NoZW1hSW5mb0VudGl0eSBleHRlbmRzIEVudGl0eSBpbXBsZW1lbnRzIElUaGlyZFNjaGVtYUluZm9FbnRpdHkge1xyXG4gICAgc2NoZW1hQ2F0ZWdvcnlJZDogc3RyaW5nO1xyXG4gICAgc2NoZW1hQ2F0ZWdvcnlOYW1lOiBzdHJpbmc7XHJcbiAgICBzY2hlbWFDb252ZXJ0b3JDbGFzc1R5cGVOYW1lOiBzdHJpbmc7XHJcbiAgICB0cmFja2luZ0NvbmZpZ0NsYXNzVHlwZU5hbWU6IHN0cmluZztcclxuICAgIHN1Q29kZTogc3RyaW5nO1xyXG5cclxuICAgIHByb3RlY3RlZCBSZXNldEJlZm9yZUxvYWRGcm9tKCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLlJlc2V0QmVmb3JlTG9hZEZyb20oKTtcclxuXHJcbiAgICAgICAgdGhpcy5zY2hlbWFDYXRlZ29yeUlkID0gbnVsbDtcclxuICAgICAgICB0aGlzLnNjaGVtYUNhdGVnb3J5TmFtZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5zY2hlbWFDb252ZXJ0b3JDbGFzc1R5cGVOYW1lID0gbnVsbDtcclxuICAgICAgICB0aGlzLnRyYWNraW5nQ29uZmlnQ2xhc3NUeXBlTmFtZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5zdUNvZGUgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBDb252ZXJ0VG9Kc29uT2JqZWN0KCk6IHt9IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG5cclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJzY2hlbWFDYXRlZ29yeUlkXCIsIHRoaXMuc2NoZW1hQ2F0ZWdvcnlJZCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwic2NoZW1hQ2F0ZWdvcnlOYW1lXCIsIHRoaXMuc2NoZW1hQ2F0ZWdvcnlOYW1lKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJzY2hlbWFDb252ZXJ0b3JDbGFzc1R5cGVOYW1lXCIsIHRoaXMuc2NoZW1hQ29udmVydG9yQ2xhc3NUeXBlTmFtZSk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwidHJhY2tpbmdDb25maWdDbGFzc1R5cGVOYW1lXCIsIHRoaXMudHJhY2tpbmdDb25maWdDbGFzc1R5cGVOYW1lKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJzdUNvZGVcIiwgdGhpcy5zdUNvZGUpO1xyXG5cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBMb2FkRnJvbUpzb25PYmplY3Qob2JqOiB7fSk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG5cclxuICAgICAgICB0aGlzLnNjaGVtYUNhdGVnb3J5SWQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcInNjaGVtYUNhdGVnb3J5SWRcIik7XHJcbiAgICAgICAgdGhpcy5zY2hlbWFDYXRlZ29yeU5hbWUgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcInNjaGVtYUNhdGVnb3J5TmFtZVwiKTtcclxuICAgICAgICB0aGlzLnNjaGVtYUNvbnZlcnRvckNsYXNzVHlwZU5hbWUgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcInNjaGVtYUNvbnZlcnRvckNsYXNzVHlwZU5hbWVcIik7XHJcbiAgICAgICAgdGhpcy50cmFja2luZ0NvbmZpZ0NsYXNzVHlwZU5hbWUgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcInRyYWNraW5nQ29uZmlnQ2xhc3NUeXBlTmFtZVwiKTtcclxuICAgICAgICB0aGlzLnN1Q29kZSA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwic3VDb2RlXCIpO1xyXG4gICAgfVxyXG59Il19