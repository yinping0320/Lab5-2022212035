/**
 * @fileoverview added by tsickle
 * Generated from: lib/content/impl/AbstractRtBillProcessContent.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { JsonConvertableImpl, BpmnModelJsonHelper } from '../../ref';
import { ConditionEntity } from "../../entity/impl/ConditionEntity";
import { MappingModeEntity } from '../../entity/impl/MappingModeEntity';
import { SaveModeEntity } from '../../entity/impl/SaveModeEntity';
/**
 * 单据流内容类。
 * @param TEntity 单据流实体。
 * @abstract
 * @template TEntity
 */
var /**
 * 单据流内容类。
 * @param TEntity 单据流实体。
 * @abstract
 * @template TEntity
 */
AbstractRtBillProcessContent = /** @class */ (function (_super) {
    tslib_1.__extends(AbstractRtBillProcessContent, _super);
    function AbstractRtBillProcessContent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @protected
     * @return {?}
     */
    AbstractRtBillProcessContent.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.entity = null;
        this.eventRouterConditionsContent = new Array();
        this.mappingConditionsContent = new Array();
        this.mappingModeContent = null;
        this.saveModeContent = null;
    };
    /**
     * @return {?}
     */
    AbstractRtBillProcessContent.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelJsonHelper.SetAttributeValue(obj, "entity", this.entity);
        BpmnModelJsonHelper.SetAttributeValue(obj, "eventRouterConditionsContent", this.eventRouterConditionsContent);
        BpmnModelJsonHelper.SetAttributeValue(obj, "mappingConditionsContent", this.mappingConditionsContent);
        BpmnModelJsonHelper.SetAttributeValue(obj, "mappingModeContent", this.mappingModeContent);
        BpmnModelJsonHelper.SetAttributeValue(obj, "saveModeContent", this.saveModeContent);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    AbstractRtBillProcessContent.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.entity = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "entity", this.getEntityClass());
        this.eventRouterConditionsContent = BpmnModelJsonHelper.GetAttributeValueAsList(obj, "eventRouterConditionsContent", ConditionEntity);
        this.mappingConditionsContent = BpmnModelJsonHelper.GetAttributeValueAsList(obj, "mappingConditionsContent", ConditionEntity);
        this.mappingModeContent = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "mappingModeContent", MappingModeEntity);
        this.saveModeContent = BpmnModelJsonHelper.GetAttributeValueAsJsonSerializable(obj, "saveModeContent", SaveModeEntity);
    };
    return AbstractRtBillProcessContent;
}(JsonConvertableImpl));
/**
 * 单据流内容类。
 * @param TEntity 单据流实体。
 * @abstract
 * @template TEntity
 */
export { AbstractRtBillProcessContent };
if (false) {
    /** @type {?} */
    AbstractRtBillProcessContent.prototype.entity;
    /** @type {?} */
    AbstractRtBillProcessContent.prototype.eventRouterConditionsContent;
    /** @type {?} */
    AbstractRtBillProcessContent.prototype.mappingConditionsContent;
    /** @type {?} */
    AbstractRtBillProcessContent.prototype.mappingModeContent;
    /** @type {?} */
    AbstractRtBillProcessContent.prototype.saveModeContent;
    /**
     * 获取泛型类类型。
     *
     * @abstract
     * @protected
     * @template ClassOfT
     * @return {?} 泛型类类型。
     */
    AbstractRtBillProcessContent.prototype.getEntityClass = function () { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWJzdHJhY3RSdEJpbGxQcm9jZXNzQ29udGVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlZHAtYmlmL2NvbW1vbi1hcGkvIiwic291cmNlcyI6WyJsaWIvY29udGVudC9pbXBsL0Fic3RyYWN0UnRCaWxsUHJvY2Vzc0NvbnRlbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUFFLG1CQUFtQixFQUFFLG1CQUFtQixFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRXJFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNwRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUN4RSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0NBQWtDLENBQUM7Ozs7Ozs7QUFPbEU7Ozs7Ozs7SUFBK0Ysd0RBQW1CO0lBQWxIOztJQThDQSxDQUFDOzs7OztJQXZDYSwwREFBbUI7Ozs7SUFBN0I7UUFDSSxpQkFBTSxtQkFBbUIsV0FBRSxDQUFDO1FBRTVCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1FBQ25CLElBQUksQ0FBQyw0QkFBNEIsR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO1FBQ2hELElBQUksQ0FBQyx3QkFBd0IsR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO1FBQzVDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUM7UUFDL0IsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7SUFDaEMsQ0FBQzs7OztJQUVNLDBEQUFtQjs7O0lBQTFCOztZQUNRLEdBQUcsR0FBRyxpQkFBTSxtQkFBbUIsV0FBRTtRQUVyQyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsRSxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsOEJBQThCLEVBQUUsSUFBSSxDQUFDLDRCQUE0QixDQUFDLENBQUM7UUFDOUcsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLDBCQUEwQixFQUFFLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1FBQ3RHLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxvQkFBb0IsRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUMxRixtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBRXBGLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7SUFFTSx5REFBa0I7Ozs7SUFBekIsVUFBMEIsR0FBTztRQUM3QixpQkFBTSxrQkFBa0IsWUFBQyxHQUFHLENBQUMsQ0FBQztRQUU5QixJQUFJLENBQUMsTUFBTSxHQUFHLG1CQUFtQixDQUFDLG1DQUFtQyxDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7UUFDNUcsSUFBSSxDQUFDLDRCQUE0QixHQUFHLG1CQUFtQixDQUFDLHVCQUF1QixDQUFDLEdBQUcsRUFBRSw4QkFBOEIsRUFBRSxlQUFlLENBQUMsQ0FBQztRQUN0SSxJQUFJLENBQUMsd0JBQXdCLEdBQUcsbUJBQW1CLENBQUMsdUJBQXVCLENBQUMsR0FBRyxFQUFFLDBCQUEwQixFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBQzlILElBQUksQ0FBQyxrQkFBa0IsR0FBRyxtQkFBbUIsQ0FBQyxtQ0FBbUMsQ0FBQyxHQUFHLEVBQUUsb0JBQW9CLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUNoSSxJQUFJLENBQUMsZUFBZSxHQUFHLG1CQUFtQixDQUFDLG1DQUFtQyxDQUFDLEdBQUcsRUFBRSxpQkFBaUIsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUMzSCxDQUFDO0lBU0wsbUNBQUM7QUFBRCxDQUFDLEFBOUNELENBQStGLG1CQUFtQixHQThDakg7Ozs7Ozs7Ozs7SUE3Q0csOENBQWdCOztJQUNoQixvRUFBcUQ7O0lBQ3JELGdFQUFpRDs7SUFDakQsMERBQXNDOztJQUN0Qyx1REFBZ0M7Ozs7Ozs7OztJQXdDaEMsd0VBQThEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSnNvbkNvbnZlcnRhYmxlSW1wbCwgQnBtbk1vZGVsSnNvbkhlbHBlciB9IGZyb20gJy4uLy4uL3JlZic7XHJcbmltcG9ydCB7IElSdEJpbGxQcm9jZXNzQ29udGVudCB9IGZyb20gJy4uL0lSdEJpbGxQcm9jZXNzQ29udGVudCc7XHJcbmltcG9ydCB7IENvbmRpdGlvbkVudGl0eSB9IGZyb20gXCIuLi8uLi9lbnRpdHkvaW1wbC9Db25kaXRpb25FbnRpdHlcIjtcclxuaW1wb3J0IHsgTWFwcGluZ01vZGVFbnRpdHkgfSBmcm9tICcuLi8uLi9lbnRpdHkvaW1wbC9NYXBwaW5nTW9kZUVudGl0eSc7XHJcbmltcG9ydCB7IFNhdmVNb2RlRW50aXR5IH0gZnJvbSAnLi4vLi4vZW50aXR5L2ltcGwvU2F2ZU1vZGVFbnRpdHknO1xyXG5pbXBvcnQgeyBJQmlsbFByb2Nlc3NFbnRpdHkgfSBmcm9tICcuLi8uLi9lbnRpdHkvSUJpbGxQcm9jZXNzRW50aXR5JztcclxuXHJcbi8qKlxyXG4gKiDljZXmja7mtYHlhoXlrrnnsbvjgIJcclxuICogQHBhcmFtIFRFbnRpdHkg5Y2V5o2u5rWB5a6e5L2T44CCXHJcbiAqL1xyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RSdEJpbGxQcm9jZXNzQ29udGVudDxURW50aXR5IGV4dGVuZHMgSUJpbGxQcm9jZXNzRW50aXR5PiBleHRlbmRzIEpzb25Db252ZXJ0YWJsZUltcGwgaW1wbGVtZW50cyBJUnRCaWxsUHJvY2Vzc0NvbnRlbnQ8VEVudGl0eT4ge1xyXG4gICAgZW50aXR5OiBURW50aXR5O1xyXG4gICAgZXZlbnRSb3V0ZXJDb25kaXRpb25zQ29udGVudDogQXJyYXk8Q29uZGl0aW9uRW50aXR5PjtcclxuICAgIG1hcHBpbmdDb25kaXRpb25zQ29udGVudDogQXJyYXk8Q29uZGl0aW9uRW50aXR5PjtcclxuICAgIG1hcHBpbmdNb2RlQ29udGVudDogTWFwcGluZ01vZGVFbnRpdHk7XHJcbiAgICBzYXZlTW9kZUNvbnRlbnQ6IFNhdmVNb2RlRW50aXR5O1xyXG5cclxuICAgIHByb3RlY3RlZCBSZXNldEJlZm9yZUxvYWRGcm9tKCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLlJlc2V0QmVmb3JlTG9hZEZyb20oKTtcclxuXHJcbiAgICAgICAgdGhpcy5lbnRpdHkgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuZXZlbnRSb3V0ZXJDb25kaXRpb25zQ29udGVudCA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgIHRoaXMubWFwcGluZ0NvbmRpdGlvbnNDb250ZW50ID0gbmV3IEFycmF5KCk7XHJcbiAgICAgICAgdGhpcy5tYXBwaW5nTW9kZUNvbnRlbnQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuc2F2ZU1vZGVDb250ZW50ID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgQ29udmVydFRvSnNvbk9iamVjdCgpOiB7fSB7XHJcbiAgICAgICAgbGV0IG9iaiA9IHN1cGVyLkNvbnZlcnRUb0pzb25PYmplY3QoKTtcclxuXHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiZW50aXR5XCIsIHRoaXMuZW50aXR5KTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJldmVudFJvdXRlckNvbmRpdGlvbnNDb250ZW50XCIsIHRoaXMuZXZlbnRSb3V0ZXJDb25kaXRpb25zQ29udGVudCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwibWFwcGluZ0NvbmRpdGlvbnNDb250ZW50XCIsIHRoaXMubWFwcGluZ0NvbmRpdGlvbnNDb250ZW50KTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJtYXBwaW5nTW9kZUNvbnRlbnRcIiwgdGhpcy5tYXBwaW5nTW9kZUNvbnRlbnQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInNhdmVNb2RlQ29udGVudFwiLCB0aGlzLnNhdmVNb2RlQ29udGVudCk7XHJcblxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIExvYWRGcm9tSnNvbk9iamVjdChvYmo6IHt9KTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuTG9hZEZyb21Kc29uT2JqZWN0KG9iaik7XHJcblxyXG4gICAgICAgIHRoaXMuZW50aXR5ID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzSnNvblNlcmlhbGl6YWJsZShvYmosIFwiZW50aXR5XCIsIHRoaXMuZ2V0RW50aXR5Q2xhc3MoKSk7XHJcbiAgICAgICAgdGhpcy5ldmVudFJvdXRlckNvbmRpdGlvbnNDb250ZW50ID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzTGlzdChvYmosIFwiZXZlbnRSb3V0ZXJDb25kaXRpb25zQ29udGVudFwiLCBDb25kaXRpb25FbnRpdHkpO1xyXG4gICAgICAgIHRoaXMubWFwcGluZ0NvbmRpdGlvbnNDb250ZW50ID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzTGlzdChvYmosIFwibWFwcGluZ0NvbmRpdGlvbnNDb250ZW50XCIsIENvbmRpdGlvbkVudGl0eSk7XHJcbiAgICAgICAgdGhpcy5tYXBwaW5nTW9kZUNvbnRlbnQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNKc29uU2VyaWFsaXphYmxlKG9iaiwgXCJtYXBwaW5nTW9kZUNvbnRlbnRcIiwgTWFwcGluZ01vZGVFbnRpdHkpO1xyXG4gICAgICAgIHRoaXMuc2F2ZU1vZGVDb250ZW50ID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzSnNvblNlcmlhbGl6YWJsZShvYmosIFwic2F2ZU1vZGVDb250ZW50XCIsIFNhdmVNb2RlRW50aXR5KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluazm+Wei+exu+exu+Wei+OAglxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSA8Q2xhc3NPZlQ+5rOb5Z6L57G744CCXHJcbiAgICAgKiBAcmV0dXJuIOazm+Wei+exu+exu+Wei+OAglxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgZ2V0RW50aXR5Q2xhc3M8Q2xhc3NPZlQgZXh0ZW5kcyBURW50aXR5PigpO1xyXG59Il19