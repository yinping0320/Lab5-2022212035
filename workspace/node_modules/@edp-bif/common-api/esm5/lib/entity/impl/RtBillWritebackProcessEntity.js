/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/impl/RtBillWritebackProcessEntity.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModelJsonHelper } from '../../ref';
import { AbstractBillWritebackProcessEntity } from './AbstractBillWritebackProcessEntity';
var RtBillWritebackProcessEntity = /** @class */ (function (_super) {
    tslib_1.__extends(RtBillWritebackProcessEntity, _super);
    function RtBillWritebackProcessEntity() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isEnabled = false;
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    RtBillWritebackProcessEntity.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.isEnabled = false;
        this.eventRouterConditionsId = null;
        this.mappingConditionsId = null;
        this.mappingModeId = null;
        this.saveModeId = null;
        this.dtBillWritebackProcessId = null;
    };
    /**
     * @return {?}
     */
    RtBillWritebackProcessEntity.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelJsonHelper.SetAttributeValue(obj, "isEnabled", this.isEnabled);
        BpmnModelJsonHelper.SetAttributeValue(obj, "eventRouterConditionsId", this.eventRouterConditionsId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "mappingConditionsId", this.mappingConditionsId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "mappingModeId", this.mappingModeId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "saveModeId", this.saveModeId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "dtBillWritebackProcessId", this.dtBillWritebackProcessId);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    RtBillWritebackProcessEntity.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.isEnabled = BpmnModelJsonHelper.GetAttributeValueAsBoolean(obj, "isEnabled");
        this.eventRouterConditionsId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "eventRouterConditionsId");
        this.mappingConditionsId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "mappingConditionsId");
        this.mappingModeId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "mappingModeId");
        this.saveModeId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "saveModeId");
        this.dtBillWritebackProcessId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "dtBillWritebackProcessId");
    };
    return RtBillWritebackProcessEntity;
}(AbstractBillWritebackProcessEntity));
export { RtBillWritebackProcessEntity };
if (false) {
    /** @type {?} */
    RtBillWritebackProcessEntity.prototype.isEnabled;
    /** @type {?} */
    RtBillWritebackProcessEntity.prototype.eventRouterConditionsId;
    /** @type {?} */
    RtBillWritebackProcessEntity.prototype.mappingConditionsId;
    /** @type {?} */
    RtBillWritebackProcessEntity.prototype.mappingModeId;
    /** @type {?} */
    RtBillWritebackProcessEntity.prototype.saveModeId;
    /** @type {?} */
    RtBillWritebackProcessEntity.prototype.dtBillWritebackProcessId;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUnRCaWxsV3JpdGViYWNrUHJvY2Vzc0VudGl0eS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlZHAtYmlmL2NvbW1vbi1hcGkvIiwic291cmNlcyI6WyJsaWIvZW50aXR5L2ltcGwvUnRCaWxsV3JpdGViYWNrUHJvY2Vzc0VudGl0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDaEQsT0FBTyxFQUFFLGtDQUFrQyxFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFHMUY7SUFBa0Qsd0RBQWtDO0lBQXBGO1FBQUEscUVBMENDO1FBekNHLGVBQVMsR0FBWSxLQUFLLENBQUM7O0lBeUMvQixDQUFDOzs7OztJQWxDYSwwREFBbUI7Ozs7SUFBN0I7UUFDSSxpQkFBTSxtQkFBbUIsV0FBRSxDQUFDO1FBRTVCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLENBQUM7UUFDcEMsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQztRQUNoQyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztRQUMxQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsd0JBQXdCLEdBQUcsSUFBSSxDQUFDO0lBQ3pDLENBQUM7Ozs7SUFFTSwwREFBbUI7OztJQUExQjs7WUFDUSxHQUFHLEdBQU8saUJBQU0sbUJBQW1CLFdBQUU7UUFFekMsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDeEUsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLHlCQUF5QixFQUFFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQ3BHLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxxQkFBcUIsRUFBRSxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUM1RixtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsZUFBZSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNoRixtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsWUFBWSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUMxRSxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsMEJBQTBCLEVBQUUsSUFBSSxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFFdEcsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVNLHlEQUFrQjs7OztJQUF6QixVQUEwQixHQUFPO1FBQzdCLGlCQUFNLGtCQUFrQixZQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxTQUFTLEdBQUcsbUJBQW1CLENBQUMsMEJBQTBCLENBQUMsR0FBRyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ2xGLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUseUJBQXlCLENBQUMsQ0FBQztRQUM3RyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLHFCQUFxQixDQUFDLENBQUM7UUFDckcsSUFBSSxDQUFDLGFBQWEsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFDekYsSUFBSSxDQUFDLFVBQVUsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDbkYsSUFBSSxDQUFDLHdCQUF3QixHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSwwQkFBMEIsQ0FBQyxDQUFDO0lBQ25ILENBQUM7SUFDTCxtQ0FBQztBQUFELENBQUMsQUExQ0QsQ0FBa0Qsa0NBQWtDLEdBMENuRjs7OztJQXpDRyxpREFBMkI7O0lBQzNCLCtEQUFnQzs7SUFDaEMsMkRBQTRCOztJQUM1QixxREFBc0I7O0lBQ3RCLGtEQUFtQjs7SUFDbkIsZ0VBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnBtbk1vZGVsSnNvbkhlbHBlciB9IGZyb20gJy4uLy4uL3JlZic7XHJcbmltcG9ydCB7IEFic3RyYWN0QmlsbFdyaXRlYmFja1Byb2Nlc3NFbnRpdHkgfSBmcm9tICcuL0Fic3RyYWN0QmlsbFdyaXRlYmFja1Byb2Nlc3NFbnRpdHknO1xyXG5pbXBvcnQgeyBJUnRCaWxsV3JpdGViYWNrUHJvY2Vzc0VudGl0eSB9IGZyb20gJy4uL0lSdEJpbGxXcml0ZWJhY2tQcm9jZXNzRW50aXR5JztcclxuXHJcbmV4cG9ydCBjbGFzcyBSdEJpbGxXcml0ZWJhY2tQcm9jZXNzRW50aXR5IGV4dGVuZHMgQWJzdHJhY3RCaWxsV3JpdGViYWNrUHJvY2Vzc0VudGl0eSBpbXBsZW1lbnRzIElSdEJpbGxXcml0ZWJhY2tQcm9jZXNzRW50aXR5IHtcclxuICAgIGlzRW5hYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgZXZlbnRSb3V0ZXJDb25kaXRpb25zSWQ6IHN0cmluZztcclxuICAgIG1hcHBpbmdDb25kaXRpb25zSWQ6IHN0cmluZztcclxuICAgIG1hcHBpbmdNb2RlSWQ6IHN0cmluZztcclxuICAgIHNhdmVNb2RlSWQ6IHN0cmluZztcclxuICAgIGR0QmlsbFdyaXRlYmFja1Byb2Nlc3NJZDogc3RyaW5nO1xyXG5cclxuICAgIHByb3RlY3RlZCBSZXNldEJlZm9yZUxvYWRGcm9tKCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLlJlc2V0QmVmb3JlTG9hZEZyb20oKTtcclxuXHJcbiAgICAgICAgdGhpcy5pc0VuYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmV2ZW50Um91dGVyQ29uZGl0aW9uc0lkID0gbnVsbDtcclxuICAgICAgICB0aGlzLm1hcHBpbmdDb25kaXRpb25zSWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMubWFwcGluZ01vZGVJZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5zYXZlTW9kZUlkID0gbnVsbDtcclxuICAgICAgICB0aGlzLmR0QmlsbFdyaXRlYmFja1Byb2Nlc3NJZCA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIENvbnZlcnRUb0pzb25PYmplY3QoKToge30ge1xyXG4gICAgICAgIGxldCBvYmo6IHt9ID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG5cclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJpc0VuYWJsZWRcIiwgdGhpcy5pc0VuYWJsZWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcImV2ZW50Um91dGVyQ29uZGl0aW9uc0lkXCIsIHRoaXMuZXZlbnRSb3V0ZXJDb25kaXRpb25zSWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIm1hcHBpbmdDb25kaXRpb25zSWRcIiwgdGhpcy5tYXBwaW5nQ29uZGl0aW9uc0lkKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJtYXBwaW5nTW9kZUlkXCIsIHRoaXMubWFwcGluZ01vZGVJZCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwic2F2ZU1vZGVJZFwiLCB0aGlzLnNhdmVNb2RlSWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcImR0QmlsbFdyaXRlYmFja1Byb2Nlc3NJZFwiLCB0aGlzLmR0QmlsbFdyaXRlYmFja1Byb2Nlc3NJZCk7XHJcblxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIExvYWRGcm9tSnNvbk9iamVjdChvYmo6IHt9KTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuTG9hZEZyb21Kc29uT2JqZWN0KG9iaik7XHJcblxyXG4gICAgICAgIHRoaXMuaXNFbmFibGVkID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzQm9vbGVhbihvYmosIFwiaXNFbmFibGVkXCIpO1xyXG4gICAgICAgIHRoaXMuZXZlbnRSb3V0ZXJDb25kaXRpb25zSWQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcImV2ZW50Um91dGVyQ29uZGl0aW9uc0lkXCIpO1xyXG4gICAgICAgIHRoaXMubWFwcGluZ0NvbmRpdGlvbnNJZCA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwibWFwcGluZ0NvbmRpdGlvbnNJZFwiKTtcclxuICAgICAgICB0aGlzLm1hcHBpbmdNb2RlSWQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcIm1hcHBpbmdNb2RlSWRcIik7XHJcbiAgICAgICAgdGhpcy5zYXZlTW9kZUlkID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJzYXZlTW9kZUlkXCIpO1xyXG4gICAgICAgIHRoaXMuZHRCaWxsV3JpdGViYWNrUHJvY2Vzc0lkID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJkdEJpbGxXcml0ZWJhY2tQcm9jZXNzSWRcIik7XHJcbiAgICB9XHJcbn0iXX0=