/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/impl/ConditionEntity.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { JsonConvertableImpl, BpmnModelJsonHelper } from '../../ref';
import { ConditionType } from '../ConditionType';
/**
 * 条件实体类。
 */
var /**
 * 条件实体类。
 */
ConditionEntity = /** @class */ (function (_super) {
    tslib_1.__extends(ConditionEntity, _super);
    function ConditionEntity() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isEnabled = false;
        _this.remarks = null;
        _this.supportAutoProcess = true;
        _this.supportPushProcess = false;
        _this.supportPullProcess = false;
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    ConditionEntity.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.id = null;
        this.isEnabled = false;
        this.name = null;
        this.type = null;
        this.content = null;
        this.remarks = null;
        this.supportAutoProcess = true;
        this.supportPushProcess = false;
        this.supportPullProcess = false;
    };
    /**
     * @return {?}
     */
    ConditionEntity.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelJsonHelper.SetAttributeValue(obj, "id", this.id);
        BpmnModelJsonHelper.SetAttributeValue(obj, "isEnabled", this.isEnabled);
        BpmnModelJsonHelper.SetAttributeValue(obj, "name", this.name);
        BpmnModelJsonHelper.SetAttributeValue(obj, "type", this.type);
        BpmnModelJsonHelper.SetAttributeValue(obj, "content", this.content);
        BpmnModelJsonHelper.SetAttributeValue(obj, "remarks", this.remarks);
        BpmnModelJsonHelper.SetAttributeValue(obj, "supportAutoProcess", this.supportAutoProcess);
        BpmnModelJsonHelper.SetAttributeValue(obj, "supportPushProcess", this.supportPushProcess);
        BpmnModelJsonHelper.SetAttributeValue(obj, "supportPullProcess", this.supportPullProcess);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    ConditionEntity.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.id = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "id");
        this.isEnabled = BpmnModelJsonHelper.GetAttributeValueAsBoolean(obj, "isEnabled");
        this.name = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "name");
        this.type = ConditionType[BpmnModelJsonHelper.GetAttributeValueAsString(obj, "type")];
        this.content = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "content");
        this.remarks = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "remarks");
        this.supportAutoProcess = BpmnModelJsonHelper.GetAttributeValueAsBoolean(obj, "supportAutoProcess");
        this.supportPushProcess = BpmnModelJsonHelper.GetAttributeValueAsBoolean(obj, "supportPushProcess");
        this.supportPullProcess = BpmnModelJsonHelper.GetAttributeValueAsBoolean(obj, "supportPullProcess");
    };
    return ConditionEntity;
}(JsonConvertableImpl));
/**
 * 条件实体类。
 */
export { ConditionEntity };
if (false) {
    /** @type {?} */
    ConditionEntity.prototype.id;
    /** @type {?} */
    ConditionEntity.prototype.isEnabled;
    /** @type {?} */
    ConditionEntity.prototype.name;
    /** @type {?} */
    ConditionEntity.prototype.type;
    /** @type {?} */
    ConditionEntity.prototype.content;
    /** @type {?} */
    ConditionEntity.prototype.remarks;
    /** @type {?} */
    ConditionEntity.prototype.supportAutoProcess;
    /** @type {?} */
    ConditionEntity.prototype.supportPushProcess;
    /** @type {?} */
    ConditionEntity.prototype.supportPullProcess;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29uZGl0aW9uRW50aXR5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVkcC1iaWYvY29tbW9uLWFwaS8iLCJzb3VyY2VzIjpbImxpYi9lbnRpdHkvaW1wbC9Db25kaXRpb25FbnRpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUFFLG1CQUFtQixFQUFFLG1CQUFtQixFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRXJFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7OztBQUtqRDs7OztJQUFxQywyQ0FBbUI7SUFBeEQ7UUFBQSxxRUFzREM7UUFwREcsZUFBUyxHQUFZLEtBQUssQ0FBQztRQUkzQixhQUFPLEdBQVcsSUFBSSxDQUFDO1FBQ3ZCLHdCQUFrQixHQUFZLElBQUksQ0FBQztRQUNuQyx3QkFBa0IsR0FBWSxLQUFLLENBQUM7UUFDcEMsd0JBQWtCLEdBQVksS0FBSyxDQUFDOztJQTZDeEMsQ0FBQzs7Ozs7SUEzQ2EsNkNBQW1COzs7O0lBQTdCO1FBQ0ksaUJBQU0sbUJBQW1CLFdBQUUsQ0FBQztRQUU1QixJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQztRQUNmLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUM7UUFDL0IsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEtBQUssQ0FBQztRQUNoQyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsS0FBSyxDQUFDO0lBQ3BDLENBQUM7Ozs7SUFFTSw2Q0FBbUI7OztJQUExQjs7WUFDUSxHQUFHLEdBQU8saUJBQU0sbUJBQW1CLFdBQUU7UUFFekMsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDMUQsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDeEUsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUQsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUQsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDcEUsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDcEUsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLG9CQUFvQixFQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQzFGLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxvQkFBb0IsRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUMxRixtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFFMUYsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVNLDRDQUFrQjs7OztJQUF6QixVQUEwQixHQUFPO1FBQzdCLGlCQUFNLGtCQUFrQixZQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxFQUFFLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ25FLElBQUksQ0FBQyxTQUFTLEdBQUcsbUJBQW1CLENBQUMsMEJBQTBCLENBQUMsR0FBRyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ2xGLElBQUksQ0FBQyxJQUFJLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxJQUFJLEdBQUcsYUFBYSxDQUFDLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ3RGLElBQUksQ0FBQyxPQUFPLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQzdFLElBQUksQ0FBQyxPQUFPLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQzdFLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxtQkFBbUIsQ0FBQywwQkFBMEIsQ0FBQyxHQUFHLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztRQUNwRyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsbUJBQW1CLENBQUMsMEJBQTBCLENBQUMsR0FBRyxFQUFFLG9CQUFvQixDQUFDLENBQUM7UUFDcEcsSUFBSSxDQUFDLGtCQUFrQixHQUFHLG1CQUFtQixDQUFDLDBCQUEwQixDQUFDLEdBQUcsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO0lBQ3hHLENBQUM7SUFDTCxzQkFBQztBQUFELENBQUMsQUF0REQsQ0FBcUMsbUJBQW1CLEdBc0R2RDs7Ozs7OztJQXJERyw2QkFBVzs7SUFDWCxvQ0FBMkI7O0lBQzNCLCtCQUFhOztJQUNiLCtCQUFvQjs7SUFDcEIsa0NBQWdCOztJQUNoQixrQ0FBdUI7O0lBQ3ZCLDZDQUFtQzs7SUFDbkMsNkNBQW9DOztJQUNwQyw2Q0FBb0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBKc29uQ29udmVydGFibGVJbXBsLCBCcG1uTW9kZWxKc29uSGVscGVyIH0gZnJvbSAnLi4vLi4vcmVmJztcclxuaW1wb3J0IHsgSUNvbmRpdGlvbkVudGl0eSB9IGZyb20gJy4uL0lDb25kaXRpb25FbnRpdHknO1xyXG5pbXBvcnQgeyBDb25kaXRpb25UeXBlIH0gZnJvbSAnLi4vQ29uZGl0aW9uVHlwZSc7XHJcblxyXG4vKipcclxuICog5p2h5Lu25a6e5L2T57G744CCXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ29uZGl0aW9uRW50aXR5IGV4dGVuZHMgSnNvbkNvbnZlcnRhYmxlSW1wbCBpbXBsZW1lbnRzIElDb25kaXRpb25FbnRpdHkge1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIGlzRW5hYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgdHlwZTogQ29uZGl0aW9uVHlwZTtcclxuICAgIGNvbnRlbnQ6IHN0cmluZztcclxuICAgIHJlbWFya3M6IHN0cmluZyA9IG51bGw7XHJcbiAgICBzdXBwb3J0QXV0b1Byb2Nlc3M6IGJvb2xlYW4gPSB0cnVlO1xyXG4gICAgc3VwcG9ydFB1c2hQcm9jZXNzOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBzdXBwb3J0UHVsbFByb2Nlc3M6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBwcm90ZWN0ZWQgUmVzZXRCZWZvcmVMb2FkRnJvbSgpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5SZXNldEJlZm9yZUxvYWRGcm9tKCk7XHJcblxyXG4gICAgICAgIHRoaXMuaWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuaXNFbmFibGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbnVsbDtcclxuICAgICAgICB0aGlzLnR5cGUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY29udGVudCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5yZW1hcmtzID0gbnVsbDtcclxuICAgICAgICB0aGlzLnN1cHBvcnRBdXRvUHJvY2VzcyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zdXBwb3J0UHVzaFByb2Nlc3MgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnN1cHBvcnRQdWxsUHJvY2VzcyA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBDb252ZXJ0VG9Kc29uT2JqZWN0KCk6IHt9IHtcclxuICAgICAgICBsZXQgb2JqOiB7fSA9IHN1cGVyLkNvbnZlcnRUb0pzb25PYmplY3QoKTtcclxuXHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiaWRcIiwgdGhpcy5pZCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiaXNFbmFibGVkXCIsIHRoaXMuaXNFbmFibGVkKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJuYW1lXCIsIHRoaXMubmFtZSk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwidHlwZVwiLCB0aGlzLnR5cGUpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcImNvbnRlbnRcIiwgdGhpcy5jb250ZW50KTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJyZW1hcmtzXCIsIHRoaXMucmVtYXJrcyk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwic3VwcG9ydEF1dG9Qcm9jZXNzXCIsIHRoaXMuc3VwcG9ydEF1dG9Qcm9jZXNzKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJzdXBwb3J0UHVzaFByb2Nlc3NcIiwgdGhpcy5zdXBwb3J0UHVzaFByb2Nlc3MpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInN1cHBvcnRQdWxsUHJvY2Vzc1wiLCB0aGlzLnN1cHBvcnRQdWxsUHJvY2Vzcyk7XHJcblxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIExvYWRGcm9tSnNvbk9iamVjdChvYmo6IHt9KTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuTG9hZEZyb21Kc29uT2JqZWN0KG9iaik7XHJcblxyXG4gICAgICAgIHRoaXMuaWQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcImlkXCIpO1xyXG4gICAgICAgIHRoaXMuaXNFbmFibGVkID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzQm9vbGVhbihvYmosIFwiaXNFbmFibGVkXCIpO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwibmFtZVwiKTtcclxuICAgICAgICB0aGlzLnR5cGUgPSBDb25kaXRpb25UeXBlW0JwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwidHlwZVwiKV07XHJcbiAgICAgICAgdGhpcy5jb250ZW50ID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJjb250ZW50XCIpO1xyXG4gICAgICAgIHRoaXMucmVtYXJrcyA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwicmVtYXJrc1wiKTtcclxuICAgICAgICB0aGlzLnN1cHBvcnRBdXRvUHJvY2VzcyA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc0Jvb2xlYW4ob2JqLCBcInN1cHBvcnRBdXRvUHJvY2Vzc1wiKTtcclxuICAgICAgICB0aGlzLnN1cHBvcnRQdXNoUHJvY2VzcyA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc0Jvb2xlYW4ob2JqLCBcInN1cHBvcnRQdXNoUHJvY2Vzc1wiKTtcclxuICAgICAgICB0aGlzLnN1cHBvcnRQdWxsUHJvY2VzcyA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc0Jvb2xlYW4ob2JqLCBcInN1cHBvcnRQdWxsUHJvY2Vzc1wiKTtcclxuICAgIH1cclxufSJdfQ==