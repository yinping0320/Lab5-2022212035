/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/impl/MappingRuleContent.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModelJsonHelper, JsonConvertableImpl } from '../../ref';
var MappingRuleContent = /** @class */ (function (_super) {
    tslib_1.__extends(MappingRuleContent, _super);
    function MappingRuleContent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @protected
     * @return {?}
     */
    MappingRuleContent.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.mappingRuleMetadataId = null;
        this.mappingRuleId = null;
        this.mappingContent = null;
        this.mappingConfig = null;
    };
    /**
     * @return {?}
     */
    MappingRuleContent.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelJsonHelper.SetAttributeValue(obj, "mappingRuleMetadataId", this.mappingRuleMetadataId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "mappingRuleId", this.mappingRuleId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "mappingContent", this.mappingContent);
        BpmnModelJsonHelper.SetAttributeValue(obj, "mappingConfig", this.mappingConfig);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    MappingRuleContent.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.mappingRuleMetadataId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "mappingRuleMetadataId");
        this.mappingRuleId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "mappingRuleId");
        this.mappingContent = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "mappingContent");
        this.mappingConfig = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "mappingConfig");
    };
    return MappingRuleContent;
}(JsonConvertableImpl));
export { MappingRuleContent };
if (false) {
    /** @type {?} */
    MappingRuleContent.prototype.mappingRuleMetadataId;
    /** @type {?} */
    MappingRuleContent.prototype.mappingRuleId;
    /** @type {?} */
    MappingRuleContent.prototype.mappingContent;
    /** @type {?} */
    MappingRuleContent.prototype.mappingConfig;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFwcGluZ1J1bGVDb250ZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVkcC1iaWYvY29tbW9uLWFwaS8iLCJzb3VyY2VzIjpbImxpYi9lbnRpdHkvaW1wbC9NYXBwaW5nUnVsZUNvbnRlbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUFFLG1CQUFtQixFQUFFLG1CQUFtQixFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRXJFO0lBQXdDLDhDQUFtQjtJQUEzRDs7SUFtQ0EsQ0FBQzs7Ozs7SUE3QmEsZ0RBQW1COzs7O0lBQTdCO1FBQ0ksaUJBQU0sbUJBQW1CLFdBQUUsQ0FBQztRQUU1QixJQUFJLENBQUMscUJBQXFCLEdBQUcsSUFBSSxDQUFDO1FBQ2xDLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO1FBQzFCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1FBQzNCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO0lBQzlCLENBQUM7Ozs7SUFHTSxnREFBbUI7OztJQUExQjs7WUFDUSxHQUFHLEdBQUcsaUJBQU0sbUJBQW1CLFdBQUU7UUFFckMsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLHVCQUF1QixFQUFFLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQ2hHLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxlQUFlLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ2hGLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDbEYsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLGVBQWUsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFaEYsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVNLCtDQUFrQjs7OztJQUF6QixVQUEwQixHQUFPO1FBQzdCLGlCQUFNLGtCQUFrQixZQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxxQkFBcUIsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztRQUN6RyxJQUFJLENBQUMsYUFBYSxHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxlQUFlLENBQUMsQ0FBQztRQUN6RixJQUFJLENBQUMsY0FBYyxHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzNGLElBQUksQ0FBQyxhQUFhLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQzdGLENBQUM7SUFDTCx5QkFBQztBQUFELENBQUMsQUFuQ0QsQ0FBd0MsbUJBQW1CLEdBbUMxRDs7OztJQWxDRyxtREFBOEI7O0lBQzlCLDJDQUFzQjs7SUFDdEIsNENBQXVCOztJQUN2QiwyQ0FBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCcG1uTW9kZWxKc29uSGVscGVyLCBKc29uQ29udmVydGFibGVJbXBsIH0gZnJvbSAnLi4vLi4vcmVmJztcclxuXHJcbmV4cG9ydCBjbGFzcyBNYXBwaW5nUnVsZUNvbnRlbnQgZXh0ZW5kcyBKc29uQ29udmVydGFibGVJbXBsIHtcclxuICAgIG1hcHBpbmdSdWxlTWV0YWRhdGFJZDogc3RyaW5nO1xyXG4gICAgbWFwcGluZ1J1bGVJZDogc3RyaW5nO1xyXG4gICAgbWFwcGluZ0NvbnRlbnQ6IHN0cmluZztcclxuICAgIG1hcHBpbmdDb25maWc6IHN0cmluZztcclxuXHJcbiAgICBwcm90ZWN0ZWQgUmVzZXRCZWZvcmVMb2FkRnJvbSgpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5SZXNldEJlZm9yZUxvYWRGcm9tKCk7XHJcblxyXG4gICAgICAgIHRoaXMubWFwcGluZ1J1bGVNZXRhZGF0YUlkID0gbnVsbDtcclxuICAgICAgICB0aGlzLm1hcHBpbmdSdWxlSWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMubWFwcGluZ0NvbnRlbnQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMubWFwcGluZ0NvbmZpZyA9IG51bGw7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHB1YmxpYyBDb252ZXJ0VG9Kc29uT2JqZWN0KCk6IHt9IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG5cclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJtYXBwaW5nUnVsZU1ldGFkYXRhSWRcIiwgdGhpcy5tYXBwaW5nUnVsZU1ldGFkYXRhSWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcIm1hcHBpbmdSdWxlSWRcIiwgdGhpcy5tYXBwaW5nUnVsZUlkKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJtYXBwaW5nQ29udGVudFwiLCB0aGlzLm1hcHBpbmdDb250ZW50KTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJtYXBwaW5nQ29uZmlnXCIsIHRoaXMubWFwcGluZ0NvbmZpZyk7XHJcblxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIExvYWRGcm9tSnNvbk9iamVjdChvYmo6IHt9KTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuTG9hZEZyb21Kc29uT2JqZWN0KG9iaik7XHJcblxyXG4gICAgICAgIHRoaXMubWFwcGluZ1J1bGVNZXRhZGF0YUlkID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJtYXBwaW5nUnVsZU1ldGFkYXRhSWRcIik7XHJcbiAgICAgICAgdGhpcy5tYXBwaW5nUnVsZUlkID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJtYXBwaW5nUnVsZUlkXCIpO1xyXG4gICAgICAgIHRoaXMubWFwcGluZ0NvbnRlbnQgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcIm1hcHBpbmdDb250ZW50XCIpO1xyXG4gICAgICAgIHRoaXMubWFwcGluZ0NvbmZpZyA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwibWFwcGluZ0NvbmZpZ1wiKTtcclxuICAgIH1cclxufSJdfQ==