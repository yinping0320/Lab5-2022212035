/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/impl/ExpressionConditionContent.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModelJsonHelper } from '../../ref';
import { ConditionContent } from './ConditionContent';
var ExpressionConditionContent = /** @class */ (function (_super) {
    tslib_1.__extends(ExpressionConditionContent, _super);
    function ExpressionConditionContent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @protected
     * @return {?}
     */
    ExpressionConditionContent.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.expressionContent = null;
    };
    /**
     * @return {?}
     */
    ExpressionConditionContent.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelJsonHelper.SetAttributeValue(obj, "expressionContent", this.expressionContent);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    ExpressionConditionContent.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.expressionContent = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "expressionContent");
    };
    return ExpressionConditionContent;
}(ConditionContent));
export { ExpressionConditionContent };
if (false) {
    /** @type {?} */
    ExpressionConditionContent.prototype.expressionContent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXhwcmVzc2lvbkNvbmRpdGlvbkNvbnRlbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZWRwLWJpZi9jb21tb24tYXBpLyIsInNvdXJjZXMiOlsibGliL2VudGl0eS9pbXBsL0V4cHJlc3Npb25Db25kaXRpb25Db250ZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNoRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUV0RDtJQUFnRCxzREFBZ0I7SUFBaEU7O0lBc0JBLENBQUM7Ozs7O0lBbkJhLHdEQUFtQjs7OztJQUE3QjtRQUNJLGlCQUFNLG1CQUFtQixXQUFFLENBQUM7UUFFNUIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQztJQUNsQyxDQUFDOzs7O0lBRU0sd0RBQW1COzs7SUFBMUI7O1lBQ1EsR0FBRyxHQUFPLGlCQUFNLG1CQUFtQixXQUFFO1FBRXpDLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxtQkFBbUIsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUV4RixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7Ozs7O0lBRU0sdURBQWtCOzs7O0lBQXpCLFVBQTBCLEdBQU87UUFDN0IsaUJBQU0sa0JBQWtCLFlBQUMsR0FBRyxDQUFDLENBQUM7UUFFOUIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0lBQ3JHLENBQUM7SUFDTCxpQ0FBQztBQUFELENBQUMsQUF0QkQsQ0FBZ0QsZ0JBQWdCLEdBc0IvRDs7OztJQXJCRyx1REFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCcG1uTW9kZWxKc29uSGVscGVyIH0gZnJvbSAnLi4vLi4vcmVmJztcclxuaW1wb3J0IHsgQ29uZGl0aW9uQ29udGVudCB9IGZyb20gJy4vQ29uZGl0aW9uQ29udGVudCc7XHJcblxyXG5leHBvcnQgY2xhc3MgRXhwcmVzc2lvbkNvbmRpdGlvbkNvbnRlbnQgZXh0ZW5kcyBDb25kaXRpb25Db250ZW50IHtcclxuICAgIGV4cHJlc3Npb25Db250ZW50OiBzdHJpbmc7XHJcblxyXG4gICAgcHJvdGVjdGVkIFJlc2V0QmVmb3JlTG9hZEZyb20oKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuUmVzZXRCZWZvcmVMb2FkRnJvbSgpO1xyXG5cclxuICAgICAgICB0aGlzLmV4cHJlc3Npb25Db250ZW50ID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgQ29udmVydFRvSnNvbk9iamVjdCgpOiB7fSB7XHJcbiAgICAgICAgbGV0IG9iajoge30gPSBzdXBlci5Db252ZXJ0VG9Kc29uT2JqZWN0KCk7XHJcblxyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcImV4cHJlc3Npb25Db250ZW50XCIsIHRoaXMuZXhwcmVzc2lvbkNvbnRlbnQpO1xyXG5cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBMb2FkRnJvbUpzb25PYmplY3Qob2JqOiB7fSk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG5cclxuICAgICAgICB0aGlzLmV4cHJlc3Npb25Db250ZW50ID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJleHByZXNzaW9uQ29udGVudFwiKTtcclxuICAgIH1cclxufSJdfQ==