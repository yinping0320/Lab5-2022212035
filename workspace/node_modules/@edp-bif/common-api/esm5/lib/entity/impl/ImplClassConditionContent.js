/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/impl/ImplClassConditionContent.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModelJsonHelper } from '../../ref';
import { ConditionContent } from './ConditionContent';
var ImplClassConditionContent = /** @class */ (function (_super) {
    tslib_1.__extends(ImplClassConditionContent, _super);
    function ImplClassConditionContent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @protected
     * @return {?}
     */
    ImplClassConditionContent.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.implClassTypeName = null;
    };
    /**
     * @return {?}
     */
    ImplClassConditionContent.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelJsonHelper.SetAttributeValue(obj, "implClassTypeName", this.implClassTypeName);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    ImplClassConditionContent.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.implClassTypeName = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "implClassTypeName");
    };
    return ImplClassConditionContent;
}(ConditionContent));
export { ImplClassConditionContent };
if (false) {
    /** @type {?} */
    ImplClassConditionContent.prototype.implClassTypeName;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW1wbENsYXNzQ29uZGl0aW9uQ29udGVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlZHAtYmlmL2NvbW1vbi1hcGkvIiwic291cmNlcyI6WyJsaWIvZW50aXR5L2ltcGwvSW1wbENsYXNzQ29uZGl0aW9uQ29udGVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDaEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFdEQ7SUFBK0MscURBQWdCO0lBQS9EOztJQXNCQSxDQUFDOzs7OztJQW5CYSx1REFBbUI7Ozs7SUFBN0I7UUFDSSxpQkFBTSxtQkFBbUIsV0FBRSxDQUFDO1FBRTVCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUM7SUFDbEMsQ0FBQzs7OztJQUVNLHVEQUFtQjs7O0lBQTFCOztZQUNRLEdBQUcsR0FBRyxpQkFBTSxtQkFBbUIsV0FBRTtRQUVyQyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFFeEYsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVNLHNEQUFrQjs7OztJQUF6QixVQUEwQixHQUFPO1FBQzdCLGlCQUFNLGtCQUFrQixZQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztJQUNyRyxDQUFDO0lBQ0wsZ0NBQUM7QUFBRCxDQUFDLEFBdEJELENBQStDLGdCQUFnQixHQXNCOUQ7Ozs7SUFyQkcsc0RBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnBtbk1vZGVsSnNvbkhlbHBlciB9IGZyb20gJy4uLy4uL3JlZic7XHJcbmltcG9ydCB7IENvbmRpdGlvbkNvbnRlbnQgfSBmcm9tICcuL0NvbmRpdGlvbkNvbnRlbnQnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEltcGxDbGFzc0NvbmRpdGlvbkNvbnRlbnQgZXh0ZW5kcyBDb25kaXRpb25Db250ZW50IHtcclxuICAgIGltcGxDbGFzc1R5cGVOYW1lOiBzdHJpbmc7XHJcblxyXG4gICAgcHJvdGVjdGVkIFJlc2V0QmVmb3JlTG9hZEZyb20oKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuUmVzZXRCZWZvcmVMb2FkRnJvbSgpO1xyXG5cclxuICAgICAgICB0aGlzLmltcGxDbGFzc1R5cGVOYW1lID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgQ29udmVydFRvSnNvbk9iamVjdCgpOiB7fSB7XHJcbiAgICAgICAgbGV0IG9iaiA9IHN1cGVyLkNvbnZlcnRUb0pzb25PYmplY3QoKTtcclxuXHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiaW1wbENsYXNzVHlwZU5hbWVcIiwgdGhpcy5pbXBsQ2xhc3NUeXBlTmFtZSk7XHJcblxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIExvYWRGcm9tSnNvbk9iamVjdChvYmo6IHt9KTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuTG9hZEZyb21Kc29uT2JqZWN0KG9iaik7XHJcblxyXG4gICAgICAgIHRoaXMuaW1wbENsYXNzVHlwZU5hbWUgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcImltcGxDbGFzc1R5cGVOYW1lXCIpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==