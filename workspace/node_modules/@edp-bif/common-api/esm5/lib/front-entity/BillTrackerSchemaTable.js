/**
 * @fileoverview added by tsickle
 * Generated from: lib/front-entity/BillTrackerSchemaTable.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BillSchemaField } from "@edp-aif/common-api";
/** @type {?} */
export var fullPathPrefix = "#";
var BillTrackerSchemaTable = /** @class */ (function () {
    function BillTrackerSchemaTable() {
    }
    /**
     * 自定义JSON序列化方法
     * @returns
     */
    /**
     * 自定义JSON序列化方法
     * @return {?}
     */
    BillTrackerSchemaTable.prototype.toJSON = /**
     * 自定义JSON序列化方法
     * @return {?}
     */
    function () {
        /** @type {?} */
        var fields = this.fields && this.fields.map((/**
         * @param {?} originF
         * @return {?}
         */
        function (originF) {
            /** @type {?} */
            var sf = new BillSchemaField();
            // sf.fullPath = originF.fullPath;
            sf.fieldPath = originF.fieldPath;
            sf.fieldName = originF.fieldName;
            sf.caption = originF.caption;
            sf.displayName = originF.displayName;
            sf.order = originF.order;
            sf.i18nCols = originF.i18nCols;
            sf.formatInfo = originF.formatInfo;
            return sf;
        }));
        /** @type {?} */
        var obj = {
            code: this.code,
            caption: this.caption,
            displayName: this.displayName,
            order: this.order,
            show: this.show,
            fields: fields,
            i18nCols: this.i18nCols,
            maxDisplayNumber: this.maxDisplayNumber,
            parentTable: this.parentTable,
        };
        return obj;
    };
    return BillTrackerSchemaTable;
}());
export { BillTrackerSchemaTable };
if (false) {
    /** @type {?} */
    BillTrackerSchemaTable.prototype.code;
    /** @type {?} */
    BillTrackerSchemaTable.prototype.caption;
    /** @type {?} */
    BillTrackerSchemaTable.prototype.displayName;
    /** @type {?} */
    BillTrackerSchemaTable.prototype.order;
    /** @type {?} */
    BillTrackerSchemaTable.prototype.show;
    /** @type {?} */
    BillTrackerSchemaTable.prototype.fields;
    /** @type {?} */
    BillTrackerSchemaTable.prototype.i18nCols;
    /** @type {?} */
    BillTrackerSchemaTable.prototype.maxDisplayNumber;
    /** @type {?} */
    BillTrackerSchemaTable.prototype.parentTable;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmlsbFRyYWNrZXJTY2hlbWFUYWJsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlZHAtYmlmL2NvbW1vbi1hcGkvIiwic291cmNlcyI6WyJsaWIvZnJvbnQtZW50aXR5L0JpbGxUcmFja2VyU2NoZW1hVGFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFzQixNQUFNLHFCQUFxQixDQUFDOztBQXlCMUUsTUFBTSxLQUFPLGNBQWMsR0FBVyxHQUFHO0FBRXpDO0lBQUE7SUE4Q0EsQ0FBQztJQWpDQzs7O09BR0c7Ozs7O0lBQ0gsdUNBQU07Ozs7SUFBTjs7WUFDUSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUc7Ozs7UUFBQyxVQUFDLE9BQU87O2dCQUNoRCxFQUFFLEdBQUcsSUFBSSxlQUFlLEVBQUU7WUFDOUIsa0NBQWtDO1lBQ2xDLEVBQUUsQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQztZQUNqQyxFQUFFLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUM7WUFDakMsRUFBRSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO1lBQzdCLEVBQUUsQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQztZQUNyQyxFQUFFLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUM7WUFDekIsRUFBRSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDO1lBQy9CLEVBQUUsQ0FBQyxVQUFVLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQztZQUVuQyxPQUFPLEVBQUUsQ0FBQztRQUNaLENBQUMsRUFBQzs7WUFFSSxHQUFHLEdBQUc7WUFDVixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDZixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87WUFDckIsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXO1lBQzdCLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztZQUNqQixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDZixNQUFNLEVBQUUsTUFBTTtZQUNkLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUN2QixnQkFBZ0IsRUFBRSxJQUFJLENBQUMsZ0JBQWdCO1lBQ3ZDLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVztTQUM5QjtRQUVELE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUNILDZCQUFDO0FBQUQsQ0FBQyxBQTlDRCxJQThDQzs7OztJQTdDQyxzQ0FBYTs7SUFDYix5Q0FBZ0I7O0lBQ2hCLDZDQUFvQjs7SUFDcEIsdUNBQWM7O0lBQ2Qsc0NBQWM7O0lBQ2Qsd0NBQWlEOztJQUNqRCwwQ0FFRTs7SUFDRixrREFBeUI7O0lBQ3pCLDZDQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJpbGxTY2hlbWFGaWVsZCwgQmlsbFNjaGVtYVN1YkZpZWxkIH0gZnJvbSBcIkBlZHAtYWlmL2NvbW1vbi1hcGlcIjtcclxuXHJcbmRlY2xhcmUgbW9kdWxlICdAZWRwLWFpZi9jb21tb24tYXBpL2xpYi9iaWxsa2l0JyB7XHJcbiAgZXhwb3J0IGludGVyZmFjZSBCaWxsU2NoZW1hRmllbGRCYXNlIHtcclxuICAgIGZpZWxkUGF0aD86IHN0cmluZztcclxuICAgIGRpc3BsYXlOYW1lPzogc3RyaW5nO1xyXG4gICAgb3JkZXI/OiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIGZ1bGxQYXRoID0gXCIjXCIgKyB0YWJsZU5hbWUgKyBcIi5cIiArIGZpZWxkUGF0aFxyXG4gICAgICovXHJcbiAgICBmdWxsUGF0aD86IHN0cmluZztcclxuICAgIGNhcHRpb25QYXRoPzogc3RyaW5nO1xyXG4gICAgaTE4bkNvbHM/OiB7XHJcbiAgICAgIGNvbEkxOG5WYWx1ZXM/OiBhbnk7XHJcbiAgICB9O1xyXG4gICAgZm9ybWF0SW5mbz86IHtcclxuICAgICAgZGF0ZUZvcm1hdHRlcj86IHN0cmluZztcclxuICAgICAgc2NhbGU/OiBudW1iZXI7XHJcbiAgICAgIHNjYWxlRXhwcmVzc2lvbj86IHN0cmluZztcclxuICAgICAgZW5hYmxlU2NhbGVFeHByZXNzaW9uPzogYm9vbGVhbjtcclxuICAgICAgc3RyaW5nTWFwRm9ybWF0dGVyPzogYW55O1xyXG4gICAgfTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBmdWxsUGF0aFByZWZpeDogc3RyaW5nID0gXCIjXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQmlsbFRyYWNrZXJTY2hlbWFUYWJsZSB7XHJcbiAgY29kZTogc3RyaW5nO1xyXG4gIGNhcHRpb246IHN0cmluZztcclxuICBkaXNwbGF5TmFtZTogc3RyaW5nO1xyXG4gIG9yZGVyOiBudW1iZXI7XHJcbiAgc2hvdzogYm9vbGVhbjtcclxuICBmaWVsZHM6IChCaWxsU2NoZW1hRmllbGQgfCBCaWxsU2NoZW1hU3ViRmllbGQpW107XHJcbiAgaTE4bkNvbHM/OiB7XHJcbiAgICBjb2xJMThuVmFsdWVzPzogYW55O1xyXG4gIH07XHJcbiAgbWF4RGlzcGxheU51bWJlcjogbnVtYmVyO1xyXG4gIHBhcmVudFRhYmxlOiBzdHJpbmc7XHJcblxyXG4gIC8qKlxyXG4gICAqIOiHquWumuS5iUpTT07luo/liJfljJbmlrnms5VcclxuICAgKiBAcmV0dXJuc1xyXG4gICAqL1xyXG4gIHRvSlNPTigpIHtcclxuICAgIGNvbnN0IGZpZWxkcyA9IHRoaXMuZmllbGRzICYmIHRoaXMuZmllbGRzLm1hcCgob3JpZ2luRikgPT4ge1xyXG4gICAgICBsZXQgc2YgPSBuZXcgQmlsbFNjaGVtYUZpZWxkKCk7XHJcbiAgICAgIC8vIHNmLmZ1bGxQYXRoID0gb3JpZ2luRi5mdWxsUGF0aDtcclxuICAgICAgc2YuZmllbGRQYXRoID0gb3JpZ2luRi5maWVsZFBhdGg7XHJcbiAgICAgIHNmLmZpZWxkTmFtZSA9IG9yaWdpbkYuZmllbGROYW1lO1xyXG4gICAgICBzZi5jYXB0aW9uID0gb3JpZ2luRi5jYXB0aW9uO1xyXG4gICAgICBzZi5kaXNwbGF5TmFtZSA9IG9yaWdpbkYuZGlzcGxheU5hbWU7XHJcbiAgICAgIHNmLm9yZGVyID0gb3JpZ2luRi5vcmRlcjtcclxuICAgICAgc2YuaTE4bkNvbHMgPSBvcmlnaW5GLmkxOG5Db2xzO1xyXG4gICAgICBzZi5mb3JtYXRJbmZvID0gb3JpZ2luRi5mb3JtYXRJbmZvO1xyXG5cclxuICAgICAgcmV0dXJuIHNmO1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3Qgb2JqID0ge1xyXG4gICAgICBjb2RlOiB0aGlzLmNvZGUsXHJcbiAgICAgIGNhcHRpb246IHRoaXMuY2FwdGlvbixcclxuICAgICAgZGlzcGxheU5hbWU6IHRoaXMuZGlzcGxheU5hbWUsXHJcbiAgICAgIG9yZGVyOiB0aGlzLm9yZGVyLFxyXG4gICAgICBzaG93OiB0aGlzLnNob3csXHJcbiAgICAgIGZpZWxkczogZmllbGRzLFxyXG4gICAgICBpMThuQ29sczogdGhpcy5pMThuQ29scyxcclxuICAgICAgbWF4RGlzcGxheU51bWJlcjogdGhpcy5tYXhEaXNwbGF5TnVtYmVyLFxyXG4gICAgICBwYXJlbnRUYWJsZTogdGhpcy5wYXJlbnRUYWJsZSxcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIG9iajtcclxuICB9XHJcbn1cclxuIl19