import { JsonConvertableImpl } from '../../ref';
import { IRtBillProcessContent } from '../IRtBillProcessContent';
import { ConditionEntity } from "../../entity/impl/ConditionEntity";
import { MappingModeEntity } from '../../entity/impl/MappingModeEntity';
import { SaveModeEntity } from '../../entity/impl/SaveModeEntity';
import { IBillProcessEntity } from '../../entity/IBillProcessEntity';
/**
 * 单据流内容类。
 * @param TEntity 单据流实体。
 */
export declare abstract class AbstractRtBillProcessContent<TEntity extends IBillProcessEntity> extends JsonConvertableImpl implements IRtBillProcessContent<TEntity> {
    entity: TEntity;
    eventRouterConditionsContent: Array<ConditionEntity>;
    mappingConditionsContent: Array<ConditionEntity>;
    mappingModeContent: MappingModeEntity;
    saveModeContent: SaveModeEntity;
    protected ResetBeforeLoadFrom(): void;
    ConvertToJsonObject(): {};
    LoadFromJsonObject(obj: {}): void;
    /**
     * 获取泛型类类型。
     *
     * @param <ClassOfT>泛型类。
     * @return 泛型类类型。
     */
    protected abstract getEntityClass<ClassOfT extends TEntity>(): any;
}
