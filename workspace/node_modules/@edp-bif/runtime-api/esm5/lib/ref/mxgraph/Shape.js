/**
 * @fileoverview added by tsickle
 * Generated from: lib/ref/mxgraph/Shape.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { mxgraph } from './mxgraphFactory';
/**
 * Shape
 * @type {?}
 */
var mxActorType = mxgraph.mxActor;
export { mxActorType as mxActor };
/** @type {?} */
var mxArrowType = mxgraph.mxArrow;
export { mxArrowType as mxArrow };
/** @type {?} */
var mxArrowConnectorType = mxgraph.mxArrowConnector;
export { mxArrowConnectorType as mxArrowConnector };
/** @type {?} */
var mxCloudType = mxgraph.mxCloud;
export { mxCloudType as mxCloud };
/** @type {?} */
var mxConnectorType = mxgraph.mxConnector;
export { mxConnectorType as mxConnector };
/** @type {?} */
var mxCylinderType = mxgraph.mxCylinder;
export { mxCylinderType as mxCylinder };
/** @type {?} */
var mxDoubleEllipseType = mxgraph.mxDoubleEllipse;
export { mxDoubleEllipseType as mxDoubleEllipse };
/** @type {?} */
var mxEllipseType = mxgraph.mxEllipse;
export { mxEllipseType as mxEllipse };
/** @type {?} */
var mxHexagonType = mxgraph.mxHexagon;
export { mxHexagonType as mxHexagon };
/** @type {?} */
var mxImageShapeType = mxgraph.mxImageShape;
export { mxImageShapeType as mxImageShape };
/** @type {?} */
var mxLabelType = mxgraph.mxLabel;
export { mxLabelType as mxLabel };
/** @type {?} */
var mxLineType = mxgraph.mxLine;
export { mxLineType as mxLine };
/** @type {?} */
var mxMarkerType = mxgraph.mxMarker;
export { mxMarkerType as mxMarker };
/** @type {?} */
var mxPolylineType = mxgraph.mxPolyline;
export { mxPolylineType as mxPolyline };
/** @type {?} */
var mxRectangleShapeType = mxgraph.mxRectangleShape;
export { mxRectangleShapeType as mxRectangleShape };
/** @type {?} */
var mxRhombusType = mxgraph.mxRhombus;
export { mxRhombusType as mxRhombus };
/** @type {?} */
var mxShapeType = mxgraph.mxShape;
export { mxShapeType as mxShape };
/** @type {?} */
var mxStencilType = mxgraph.mxStencil;
export { mxStencilType as mxStencil };
/** @type {?} */
var mxStencilRegistryType = mxgraph.mxStencilRegistry;
export { mxStencilRegistryType as mxStencilRegistry };
/** @type {?} */
var mxSwimlaneType = mxgraph.mxSwimlane;
export { mxSwimlaneType as mxSwimlane };
/** @type {?} */
var mxTextType = mxgraph.mxText;
export { mxTextType as mxText };
/** @type {?} */
var mxTriangleType = mxgraph.mxTriangle;
export { mxTriangleType as mxTriangle };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2hhcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZWRwLWJpZi9ydW50aW1lLWFwaS8iLCJzb3VyY2VzIjpbImxpYi9yZWYvbXhncmFwaC9TaGFwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7Ozs7SUFLckMsV0FBVyxHQUFHLE9BQU8sQ0FBQyxPQUFPO0FBQ25DLE9BQU8sRUFBRSxXQUFXLElBQUksT0FBTyxFQUFFLENBQUM7O0lBRTVCLFdBQVcsR0FBRyxPQUFPLENBQUMsT0FBTztBQUNuQyxPQUFPLEVBQUUsV0FBVyxJQUFJLE9BQU8sRUFBRSxDQUFDOztJQUU1QixvQkFBb0IsR0FBRyxPQUFPLENBQUMsZ0JBQWdCO0FBQ3JELE9BQU8sRUFBRSxvQkFBb0IsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDOztJQUU5QyxXQUFXLEdBQUcsT0FBTyxDQUFDLE9BQU87QUFDbkMsT0FBTyxFQUFFLFdBQVcsSUFBSSxPQUFPLEVBQUUsQ0FBQzs7SUFFNUIsZUFBZSxHQUFHLE9BQU8sQ0FBQyxXQUFXO0FBQzNDLE9BQU8sRUFBRSxlQUFlLElBQUksV0FBVyxFQUFFLENBQUM7O0lBRXBDLGNBQWMsR0FBRyxPQUFPLENBQUMsVUFBVTtBQUN6QyxPQUFPLEVBQUUsY0FBYyxJQUFJLFVBQVUsRUFBRSxDQUFDOztJQUVsQyxtQkFBbUIsR0FBRyxPQUFPLENBQUMsZUFBZTtBQUNuRCxPQUFPLEVBQUUsbUJBQW1CLElBQUksZUFBZSxFQUFFLENBQUM7O0lBRTVDLGFBQWEsR0FBRyxPQUFPLENBQUMsU0FBUztBQUN2QyxPQUFPLEVBQUUsYUFBYSxJQUFJLFNBQVMsRUFBRSxDQUFDOztJQUVoQyxhQUFhLEdBQUcsT0FBTyxDQUFDLFNBQVM7QUFDdkMsT0FBTyxFQUFFLGFBQWEsSUFBSSxTQUFTLEVBQUUsQ0FBQzs7SUFFaEMsZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLFlBQVk7QUFDN0MsT0FBTyxFQUFFLGdCQUFnQixJQUFJLFlBQVksRUFBRSxDQUFDOztJQUV0QyxXQUFXLEdBQUcsT0FBTyxDQUFDLE9BQU87QUFDbkMsT0FBTyxFQUFFLFdBQVcsSUFBSSxPQUFPLEVBQUUsQ0FBQzs7SUFFNUIsVUFBVSxHQUFHLE9BQU8sQ0FBQyxNQUFNO0FBQ2pDLE9BQU8sRUFBRSxVQUFVLElBQUksTUFBTSxFQUFFLENBQUM7O0lBRTFCLFlBQVksR0FBRyxPQUFPLENBQUMsUUFBUTtBQUNyQyxPQUFPLEVBQUUsWUFBWSxJQUFJLFFBQVEsRUFBRSxDQUFDOztJQUU5QixjQUFjLEdBQUcsT0FBTyxDQUFDLFVBQVU7QUFDekMsT0FBTyxFQUFFLGNBQWMsSUFBSSxVQUFVLEVBQUUsQ0FBQzs7SUFFbEMsb0JBQW9CLEdBQUcsT0FBTyxDQUFDLGdCQUFnQjtBQUNyRCxPQUFPLEVBQUUsb0JBQW9CLElBQUksZ0JBQWdCLEVBQUUsQ0FBQzs7SUFFOUMsYUFBYSxHQUFHLE9BQU8sQ0FBQyxTQUFTO0FBQ3ZDLE9BQU8sRUFBRSxhQUFhLElBQUksU0FBUyxFQUFFLENBQUM7O0lBRWhDLFdBQVcsR0FBRyxPQUFPLENBQUMsT0FBTztBQUNuQyxPQUFPLEVBQUUsV0FBVyxJQUFJLE9BQU8sRUFBRSxDQUFDOztJQUU1QixhQUFhLEdBQUcsT0FBTyxDQUFDLFNBQVM7QUFDdkMsT0FBTyxFQUFFLGFBQWEsSUFBSSxTQUFTLEVBQUUsQ0FBQzs7SUFFaEMscUJBQXFCLEdBQUcsT0FBTyxDQUFDLGlCQUFpQjtBQUN2RCxPQUFPLEVBQUUscUJBQXFCLElBQUksaUJBQWlCLEVBQUUsQ0FBQzs7SUFFaEQsY0FBYyxHQUFHLE9BQU8sQ0FBQyxVQUFVO0FBQ3pDLE9BQU8sRUFBRSxjQUFjLElBQUksVUFBVSxFQUFFLENBQUM7O0lBRWxDLFVBQVUsR0FBRyxPQUFPLENBQUMsTUFBTTtBQUNqQyxPQUFPLEVBQUUsVUFBVSxJQUFJLE1BQU0sRUFBRSxDQUFDOztJQUUxQixjQUFjLEdBQUcsT0FBTyxDQUFDLFVBQVU7QUFDekMsT0FBTyxFQUFFLGNBQWMsSUFBSSxVQUFVLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG14Z3JhcGggfSBmcm9tICcuL214Z3JhcGhGYWN0b3J5JztcclxuXHJcbi8qKlxyXG4gKiBTaGFwZVxyXG4gKi9cclxuY29uc3QgbXhBY3RvclR5cGUgPSBteGdyYXBoLm14QWN0b3I7XHJcbmV4cG9ydCB7IG14QWN0b3JUeXBlIGFzIG14QWN0b3IgfTtcclxuXHJcbmNvbnN0IG14QXJyb3dUeXBlID0gbXhncmFwaC5teEFycm93O1xyXG5leHBvcnQgeyBteEFycm93VHlwZSBhcyBteEFycm93IH07XHJcblxyXG5jb25zdCBteEFycm93Q29ubmVjdG9yVHlwZSA9IG14Z3JhcGgubXhBcnJvd0Nvbm5lY3RvcjtcclxuZXhwb3J0IHsgbXhBcnJvd0Nvbm5lY3RvclR5cGUgYXMgbXhBcnJvd0Nvbm5lY3RvciB9O1xyXG5cclxuY29uc3QgbXhDbG91ZFR5cGUgPSBteGdyYXBoLm14Q2xvdWQ7XHJcbmV4cG9ydCB7IG14Q2xvdWRUeXBlIGFzIG14Q2xvdWQgfTtcclxuXHJcbmNvbnN0IG14Q29ubmVjdG9yVHlwZSA9IG14Z3JhcGgubXhDb25uZWN0b3I7XHJcbmV4cG9ydCB7IG14Q29ubmVjdG9yVHlwZSBhcyBteENvbm5lY3RvciB9O1xyXG5cclxuY29uc3QgbXhDeWxpbmRlclR5cGUgPSBteGdyYXBoLm14Q3lsaW5kZXI7XHJcbmV4cG9ydCB7IG14Q3lsaW5kZXJUeXBlIGFzIG14Q3lsaW5kZXIgfTtcclxuXHJcbmNvbnN0IG14RG91YmxlRWxsaXBzZVR5cGUgPSBteGdyYXBoLm14RG91YmxlRWxsaXBzZTtcclxuZXhwb3J0IHsgbXhEb3VibGVFbGxpcHNlVHlwZSBhcyBteERvdWJsZUVsbGlwc2UgfTtcclxuXHJcbmNvbnN0IG14RWxsaXBzZVR5cGUgPSBteGdyYXBoLm14RWxsaXBzZTtcclxuZXhwb3J0IHsgbXhFbGxpcHNlVHlwZSBhcyBteEVsbGlwc2UgfTtcclxuXHJcbmNvbnN0IG14SGV4YWdvblR5cGUgPSBteGdyYXBoLm14SGV4YWdvbjtcclxuZXhwb3J0IHsgbXhIZXhhZ29uVHlwZSBhcyBteEhleGFnb24gfTtcclxuXHJcbmNvbnN0IG14SW1hZ2VTaGFwZVR5cGUgPSBteGdyYXBoLm14SW1hZ2VTaGFwZTtcclxuZXhwb3J0IHsgbXhJbWFnZVNoYXBlVHlwZSBhcyBteEltYWdlU2hhcGUgfTtcclxuXHJcbmNvbnN0IG14TGFiZWxUeXBlID0gbXhncmFwaC5teExhYmVsO1xyXG5leHBvcnQgeyBteExhYmVsVHlwZSBhcyBteExhYmVsIH07XHJcblxyXG5jb25zdCBteExpbmVUeXBlID0gbXhncmFwaC5teExpbmU7XHJcbmV4cG9ydCB7IG14TGluZVR5cGUgYXMgbXhMaW5lIH07XHJcblxyXG5jb25zdCBteE1hcmtlclR5cGUgPSBteGdyYXBoLm14TWFya2VyO1xyXG5leHBvcnQgeyBteE1hcmtlclR5cGUgYXMgbXhNYXJrZXIgfTtcclxuXHJcbmNvbnN0IG14UG9seWxpbmVUeXBlID0gbXhncmFwaC5teFBvbHlsaW5lO1xyXG5leHBvcnQgeyBteFBvbHlsaW5lVHlwZSBhcyBteFBvbHlsaW5lIH07XHJcblxyXG5jb25zdCBteFJlY3RhbmdsZVNoYXBlVHlwZSA9IG14Z3JhcGgubXhSZWN0YW5nbGVTaGFwZTtcclxuZXhwb3J0IHsgbXhSZWN0YW5nbGVTaGFwZVR5cGUgYXMgbXhSZWN0YW5nbGVTaGFwZSB9O1xyXG5cclxuY29uc3QgbXhSaG9tYnVzVHlwZSA9IG14Z3JhcGgubXhSaG9tYnVzO1xyXG5leHBvcnQgeyBteFJob21idXNUeXBlIGFzIG14UmhvbWJ1cyB9O1xyXG5cclxuY29uc3QgbXhTaGFwZVR5cGUgPSBteGdyYXBoLm14U2hhcGU7XHJcbmV4cG9ydCB7IG14U2hhcGVUeXBlIGFzIG14U2hhcGUgfTtcclxuXHJcbmNvbnN0IG14U3RlbmNpbFR5cGUgPSBteGdyYXBoLm14U3RlbmNpbDtcclxuZXhwb3J0IHsgbXhTdGVuY2lsVHlwZSBhcyBteFN0ZW5jaWwgfTtcclxuXHJcbmNvbnN0IG14U3RlbmNpbFJlZ2lzdHJ5VHlwZSA9IG14Z3JhcGgubXhTdGVuY2lsUmVnaXN0cnk7XHJcbmV4cG9ydCB7IG14U3RlbmNpbFJlZ2lzdHJ5VHlwZSBhcyBteFN0ZW5jaWxSZWdpc3RyeSB9O1xyXG5cclxuY29uc3QgbXhTd2ltbGFuZVR5cGUgPSBteGdyYXBoLm14U3dpbWxhbmU7XHJcbmV4cG9ydCB7IG14U3dpbWxhbmVUeXBlIGFzIG14U3dpbWxhbmUgfTtcclxuXHJcbmNvbnN0IG14VGV4dFR5cGUgPSBteGdyYXBoLm14VGV4dDtcclxuZXhwb3J0IHsgbXhUZXh0VHlwZSBhcyBteFRleHQgfTtcclxuXHJcbmNvbnN0IG14VHJpYW5nbGVUeXBlID0gbXhncmFwaC5teFRyaWFuZ2xlO1xyXG5leHBvcnQgeyBteFRyaWFuZ2xlVHlwZSBhcyBteFRyaWFuZ2xlIH07Il19