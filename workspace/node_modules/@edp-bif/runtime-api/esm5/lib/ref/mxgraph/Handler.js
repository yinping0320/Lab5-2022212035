/**
 * @fileoverview added by tsickle
 * Generated from: lib/ref/mxgraph/Handler.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { mxgraph } from './mxgraphFactory';
/**
 * Handler
 * @type {?}
 */
var mxCellHighlightType = mxgraph.mxCellHighlight;
export { mxCellHighlightType as mxCellHighlight };
/** @type {?} */
var mxCellMarkerType = mxgraph.mxCellMarker;
export { mxCellMarkerType as mxCellMarker };
/** @type {?} */
var mxCellTrackerType = mxgraph.mxCellTracker;
export { mxCellTrackerType as mxCellTracker };
/** @type {?} */
var mxConnectionHandlerType = mxgraph.mxConnectionHandler;
export { mxConnectionHandlerType as mxConnectionHandler };
/** @type {?} */
var mxConstraintHandlerType = mxgraph.mxConstraintHandler;
export { mxConstraintHandlerType as mxConstraintHandler };
/** @type {?} */
var mxEdgeHandlerType = mxgraph.mxEdgeHandler;
export { mxEdgeHandlerType as mxEdgeHandler };
/** @type {?} */
var mxEdgeSegmentHandlerType = mxgraph.mxEdgeSegmentHandler;
export { mxEdgeSegmentHandlerType as mxEdgeSegmentHandler };
/** @type {?} */
var mxElbowEdgeHandlerType = mxgraph.mxElbowEdgeHandler;
export { mxElbowEdgeHandlerType as mxElbowEdgeHandler };
/** @type {?} */
var mxGraphHandlerType = mxgraph.mxGraphHandler;
export { mxGraphHandlerType as mxGraphHandler };
/** @type {?} */
var mxHandleType = mxgraph.mxHandle;
export { mxHandleType as mxHandle };
/** @type {?} */
var mxKeyHandlerType = mxgraph.mxKeyHandler;
export { mxKeyHandlerType as mxKeyHandler };
/** @type {?} */
var mxPanningHandlerType = mxgraph.mxPanningHandler;
export { mxPanningHandlerType as mxPanningHandler };
/** @type {?} */
var mxPopupMenuHandlerType = mxgraph.mxPopupMenuHandler;
export { mxPopupMenuHandlerType as mxPopupMenuHandler };
/** @type {?} */
var mxRubberbandType = mxgraph.mxRubberband;
export { mxRubberbandType as mxRubberband };
/** @type {?} */
var mxSelectionCellsHandlerType = mxgraph.mxSelectionCellsHandler;
export { mxSelectionCellsHandlerType as mxSelectionCellsHandler };
/** @type {?} */
var mxTooltipHandlerType = mxgraph.mxTooltipHandler;
export { mxTooltipHandlerType as mxTooltipHandler };
/** @type {?} */
var mxVertexHandlerType = mxgraph.mxVertexHandler;
export { mxVertexHandlerType as mxVertexHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlZHAtYmlmL3J1bnRpbWUtYXBpLyIsInNvdXJjZXMiOlsibGliL3JlZi9teGdyYXBoL0hhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7Ozs7O0lBS3JDLG1CQUFtQixHQUFHLE9BQU8sQ0FBQyxlQUFlO0FBQ25ELE9BQU8sRUFBRSxtQkFBbUIsSUFBSSxlQUFlLEVBQUUsQ0FBQzs7SUFFNUMsZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLFlBQVk7QUFDN0MsT0FBTyxFQUFFLGdCQUFnQixJQUFJLFlBQVksRUFBRSxDQUFDOztJQUV0QyxpQkFBaUIsR0FBRyxPQUFPLENBQUMsYUFBYTtBQUMvQyxPQUFPLEVBQUUsaUJBQWlCLElBQUksYUFBYSxFQUFFLENBQUM7O0lBRXhDLHVCQUF1QixHQUFHLE9BQU8sQ0FBQyxtQkFBbUI7QUFDM0QsT0FBTyxFQUFFLHVCQUF1QixJQUFJLG1CQUFtQixFQUFFLENBQUM7O0lBRXBELHVCQUF1QixHQUFHLE9BQU8sQ0FBQyxtQkFBbUI7QUFDM0QsT0FBTyxFQUFFLHVCQUF1QixJQUFJLG1CQUFtQixFQUFFLENBQUM7O0lBRXBELGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxhQUFhO0FBQy9DLE9BQU8sRUFBRSxpQkFBaUIsSUFBSSxhQUFhLEVBQUUsQ0FBQzs7SUFFeEMsd0JBQXdCLEdBQUcsT0FBTyxDQUFDLG9CQUFvQjtBQUM3RCxPQUFPLEVBQUUsd0JBQXdCLElBQUksb0JBQW9CLEVBQUUsQ0FBQzs7SUFFdEQsc0JBQXNCLEdBQUcsT0FBTyxDQUFDLGtCQUFrQjtBQUN6RCxPQUFPLEVBQUUsc0JBQXNCLElBQUksa0JBQWtCLEVBQUUsQ0FBQzs7SUFFbEQsa0JBQWtCLEdBQUcsT0FBTyxDQUFDLGNBQWM7QUFDakQsT0FBTyxFQUFFLGtCQUFrQixJQUFJLGNBQWMsRUFBRSxDQUFDOztJQUUxQyxZQUFZLEdBQUcsT0FBTyxDQUFDLFFBQVE7QUFDckMsT0FBTyxFQUFFLFlBQVksSUFBSSxRQUFRLEVBQUUsQ0FBQzs7SUFFOUIsZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLFlBQVk7QUFDN0MsT0FBTyxFQUFFLGdCQUFnQixJQUFJLFlBQVksRUFBRSxDQUFDOztJQUV0QyxvQkFBb0IsR0FBRyxPQUFPLENBQUMsZ0JBQWdCO0FBQ3JELE9BQU8sRUFBRSxvQkFBb0IsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDOztJQUU5QyxzQkFBc0IsR0FBRyxPQUFPLENBQUMsa0JBQWtCO0FBQ3pELE9BQU8sRUFBRSxzQkFBc0IsSUFBSSxrQkFBa0IsRUFBRSxDQUFDOztJQUVsRCxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsWUFBWTtBQUM3QyxPQUFPLEVBQUUsZ0JBQWdCLElBQUksWUFBWSxFQUFFLENBQUM7O0lBRXRDLDJCQUEyQixHQUFHLE9BQU8sQ0FBQyx1QkFBdUI7QUFDbkUsT0FBTyxFQUFFLDJCQUEyQixJQUFJLHVCQUF1QixFQUFFLENBQUM7O0lBRTVELG9CQUFvQixHQUFHLE9BQU8sQ0FBQyxnQkFBZ0I7QUFDckQsT0FBTyxFQUFFLG9CQUFvQixJQUFJLGdCQUFnQixFQUFFLENBQUM7O0lBRTlDLG1CQUFtQixHQUFHLE9BQU8sQ0FBQyxlQUFlO0FBQ25ELE9BQU8sRUFBRSxtQkFBbUIsSUFBSSxlQUFlLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG14Z3JhcGggfSBmcm9tICcuL214Z3JhcGhGYWN0b3J5JztcclxuXHJcbi8qKlxyXG4gKiBIYW5kbGVyXHJcbiAqL1xyXG5jb25zdCBteENlbGxIaWdobGlnaHRUeXBlID0gbXhncmFwaC5teENlbGxIaWdobGlnaHQ7XHJcbmV4cG9ydCB7IG14Q2VsbEhpZ2hsaWdodFR5cGUgYXMgbXhDZWxsSGlnaGxpZ2h0IH07XHJcblxyXG5jb25zdCBteENlbGxNYXJrZXJUeXBlID0gbXhncmFwaC5teENlbGxNYXJrZXI7XHJcbmV4cG9ydCB7IG14Q2VsbE1hcmtlclR5cGUgYXMgbXhDZWxsTWFya2VyIH07XHJcblxyXG5jb25zdCBteENlbGxUcmFja2VyVHlwZSA9IG14Z3JhcGgubXhDZWxsVHJhY2tlcjtcclxuZXhwb3J0IHsgbXhDZWxsVHJhY2tlclR5cGUgYXMgbXhDZWxsVHJhY2tlciB9O1xyXG5cclxuY29uc3QgbXhDb25uZWN0aW9uSGFuZGxlclR5cGUgPSBteGdyYXBoLm14Q29ubmVjdGlvbkhhbmRsZXI7XHJcbmV4cG9ydCB7IG14Q29ubmVjdGlvbkhhbmRsZXJUeXBlIGFzIG14Q29ubmVjdGlvbkhhbmRsZXIgfTtcclxuXHJcbmNvbnN0IG14Q29uc3RyYWludEhhbmRsZXJUeXBlID0gbXhncmFwaC5teENvbnN0cmFpbnRIYW5kbGVyO1xyXG5leHBvcnQgeyBteENvbnN0cmFpbnRIYW5kbGVyVHlwZSBhcyBteENvbnN0cmFpbnRIYW5kbGVyIH07XHJcblxyXG5jb25zdCBteEVkZ2VIYW5kbGVyVHlwZSA9IG14Z3JhcGgubXhFZGdlSGFuZGxlcjtcclxuZXhwb3J0IHsgbXhFZGdlSGFuZGxlclR5cGUgYXMgbXhFZGdlSGFuZGxlciB9O1xyXG5cclxuY29uc3QgbXhFZGdlU2VnbWVudEhhbmRsZXJUeXBlID0gbXhncmFwaC5teEVkZ2VTZWdtZW50SGFuZGxlcjtcclxuZXhwb3J0IHsgbXhFZGdlU2VnbWVudEhhbmRsZXJUeXBlIGFzIG14RWRnZVNlZ21lbnRIYW5kbGVyIH07XHJcblxyXG5jb25zdCBteEVsYm93RWRnZUhhbmRsZXJUeXBlID0gbXhncmFwaC5teEVsYm93RWRnZUhhbmRsZXI7XHJcbmV4cG9ydCB7IG14RWxib3dFZGdlSGFuZGxlclR5cGUgYXMgbXhFbGJvd0VkZ2VIYW5kbGVyIH07XHJcblxyXG5jb25zdCBteEdyYXBoSGFuZGxlclR5cGUgPSBteGdyYXBoLm14R3JhcGhIYW5kbGVyO1xyXG5leHBvcnQgeyBteEdyYXBoSGFuZGxlclR5cGUgYXMgbXhHcmFwaEhhbmRsZXIgfTtcclxuXHJcbmNvbnN0IG14SGFuZGxlVHlwZSA9IG14Z3JhcGgubXhIYW5kbGU7XHJcbmV4cG9ydCB7IG14SGFuZGxlVHlwZSBhcyBteEhhbmRsZSB9O1xyXG5cclxuY29uc3QgbXhLZXlIYW5kbGVyVHlwZSA9IG14Z3JhcGgubXhLZXlIYW5kbGVyO1xyXG5leHBvcnQgeyBteEtleUhhbmRsZXJUeXBlIGFzIG14S2V5SGFuZGxlciB9O1xyXG5cclxuY29uc3QgbXhQYW5uaW5nSGFuZGxlclR5cGUgPSBteGdyYXBoLm14UGFubmluZ0hhbmRsZXI7XHJcbmV4cG9ydCB7IG14UGFubmluZ0hhbmRsZXJUeXBlIGFzIG14UGFubmluZ0hhbmRsZXIgfTtcclxuXHJcbmNvbnN0IG14UG9wdXBNZW51SGFuZGxlclR5cGUgPSBteGdyYXBoLm14UG9wdXBNZW51SGFuZGxlcjtcclxuZXhwb3J0IHsgbXhQb3B1cE1lbnVIYW5kbGVyVHlwZSBhcyBteFBvcHVwTWVudUhhbmRsZXIgfTtcclxuXHJcbmNvbnN0IG14UnViYmVyYmFuZFR5cGUgPSBteGdyYXBoLm14UnViYmVyYmFuZDtcclxuZXhwb3J0IHsgbXhSdWJiZXJiYW5kVHlwZSBhcyBteFJ1YmJlcmJhbmQgfTtcclxuXHJcbmNvbnN0IG14U2VsZWN0aW9uQ2VsbHNIYW5kbGVyVHlwZSA9IG14Z3JhcGgubXhTZWxlY3Rpb25DZWxsc0hhbmRsZXI7XHJcbmV4cG9ydCB7IG14U2VsZWN0aW9uQ2VsbHNIYW5kbGVyVHlwZSBhcyBteFNlbGVjdGlvbkNlbGxzSGFuZGxlciB9O1xyXG5cclxuY29uc3QgbXhUb29sdGlwSGFuZGxlclR5cGUgPSBteGdyYXBoLm14VG9vbHRpcEhhbmRsZXI7XHJcbmV4cG9ydCB7IG14VG9vbHRpcEhhbmRsZXJUeXBlIGFzIG14VG9vbHRpcEhhbmRsZXIgfTtcclxuXHJcbmNvbnN0IG14VmVydGV4SGFuZGxlclR5cGUgPSBteGdyYXBoLm14VmVydGV4SGFuZGxlcjtcclxuZXhwb3J0IHsgbXhWZXJ0ZXhIYW5kbGVyVHlwZSBhcyBteFZlcnRleEhhbmRsZXIgfTsiXX0=