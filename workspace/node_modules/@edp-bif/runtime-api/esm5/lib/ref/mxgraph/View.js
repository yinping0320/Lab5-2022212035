/**
 * @fileoverview added by tsickle
 * Generated from: lib/ref/mxgraph/View.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { mxgraph } from './mxgraphFactory';
/**
 * View
 * @type {?}
 */
var mxCellEditorType = mxgraph.mxCellEditor;
export { mxCellEditorType as mxCellEditor };
/** @type {?} */
var mxCellOverlayType = mxgraph.mxCellOverlay;
export { mxCellOverlayType as mxCellOverlay };
/** @type {?} */
var mxCellRendererType = mxgraph.mxCellRenderer;
export { mxCellRendererType as mxCellRenderer };
/** @type {?} */
var mxCellStateType = mxgraph.mxCellState;
export { mxCellStateType as mxCellState };
/** @type {?} */
var mxCellStatePreviewType = mxgraph.mxCellStatePreview;
export { mxCellStatePreviewType as mxCellStatePreview };
/** @type {?} */
var mxConnectionConstraintType = mxgraph.mxConnectionConstraint;
export { mxConnectionConstraintType as mxConnectionConstraint };
/** @type {?} */
var mxEdgeStyleType = mxgraph.mxEdgeStyle;
export { mxEdgeStyleType as mxEdgeStyle };
/** @type {?} */
var mxGraphType = mxgraph.mxGraph;
export { mxGraphType as mxGraph };
/** @type {?} */
var mxGraphSelectionModelType = mxgraph.mxGraphSelectionModel;
export { mxGraphSelectionModelType as mxGraphSelectionModel };
/** @type {?} */
var mxGraphViewType = mxgraph.mxGraphView;
export { mxGraphViewType as mxGraphView };
/** @type {?} */
var mxLayoutManagerType = mxgraph.mxLayoutManager;
export { mxLayoutManagerType as mxLayoutManager };
/** @type {?} */
var mxMultiplicityType = mxgraph.mxMultiplicity;
export { mxMultiplicityType as mxMultiplicity };
/** @type {?} */
var mxOutlineType = mxgraph.mxOutline;
export { mxOutlineType as mxOutline };
/** @type {?} */
var mxPerimeterType = mxgraph.mxPerimeter;
export { mxPerimeterType as mxPerimeter };
/** @type {?} */
var mxPrintPreviewType = mxgraph.mxPrintPreview;
export { mxPrintPreviewType as mxPrintPreview };
/** @type {?} */
var mxStyleRegistryType = mxgraph.mxStyleRegistry;
export { mxStyleRegistryType as mxStyleRegistry };
/** @type {?} */
var mxStylesheetType = mxgraph.mxStylesheet;
export { mxStylesheetType as mxStylesheet };
/** @type {?} */
var mxSwimlaneManagerType = mxgraph.mxSwimlaneManager;
export { mxSwimlaneManagerType as mxSwimlaneManager };
/** @type {?} */
var mxTemporaryCellStatesType = mxgraph.mxTemporaryCellStates;
export { mxTemporaryCellStatesType as mxTemporaryCellStates };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmlldy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlZHAtYmlmL3J1bnRpbWUtYXBpLyIsInNvdXJjZXMiOlsibGliL3JlZi9teGdyYXBoL1ZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7Ozs7O0lBS3JDLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxZQUFZO0FBQzdDLE9BQU8sRUFBRSxnQkFBZ0IsSUFBSSxZQUFZLEVBQUUsQ0FBQzs7SUFFdEMsaUJBQWlCLEdBQUcsT0FBTyxDQUFDLGFBQWE7QUFDL0MsT0FBTyxFQUFFLGlCQUFpQixJQUFJLGFBQWEsRUFBRSxDQUFDOztJQUV4QyxrQkFBa0IsR0FBRyxPQUFPLENBQUMsY0FBYztBQUNqRCxPQUFPLEVBQUUsa0JBQWtCLElBQUksY0FBYyxFQUFFLENBQUM7O0lBRTFDLGVBQWUsR0FBRyxPQUFPLENBQUMsV0FBVztBQUMzQyxPQUFPLEVBQUUsZUFBZSxJQUFJLFdBQVcsRUFBRSxDQUFDOztJQUVwQyxzQkFBc0IsR0FBRyxPQUFPLENBQUMsa0JBQWtCO0FBQ3pELE9BQU8sRUFBRSxzQkFBc0IsSUFBSSxrQkFBa0IsRUFBRSxDQUFDOztJQUVsRCwwQkFBMEIsR0FBRyxPQUFPLENBQUMsc0JBQXNCO0FBQ2pFLE9BQU8sRUFBRSwwQkFBMEIsSUFBSSxzQkFBc0IsRUFBRSxDQUFDOztJQUUxRCxlQUFlLEdBQUcsT0FBTyxDQUFDLFdBQVc7QUFDM0MsT0FBTyxFQUFFLGVBQWUsSUFBSSxXQUFXLEVBQUUsQ0FBQzs7SUFFcEMsV0FBVyxHQUFHLE9BQU8sQ0FBQyxPQUFPO0FBQ25DLE9BQU8sRUFBRSxXQUFXLElBQUksT0FBTyxFQUFFLENBQUM7O0lBRTVCLHlCQUF5QixHQUFHLE9BQU8sQ0FBQyxxQkFBcUI7QUFDL0QsT0FBTyxFQUFFLHlCQUF5QixJQUFJLHFCQUFxQixFQUFFLENBQUM7O0lBRXhELGVBQWUsR0FBRyxPQUFPLENBQUMsV0FBVztBQUMzQyxPQUFPLEVBQUUsZUFBZSxJQUFJLFdBQVcsRUFBRSxDQUFDOztJQUVwQyxtQkFBbUIsR0FBRyxPQUFPLENBQUMsZUFBZTtBQUNuRCxPQUFPLEVBQUUsbUJBQW1CLElBQUksZUFBZSxFQUFFLENBQUM7O0lBRTVDLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyxjQUFjO0FBQ2pELE9BQU8sRUFBRSxrQkFBa0IsSUFBSSxjQUFjLEVBQUUsQ0FBQzs7SUFFMUMsYUFBYSxHQUFHLE9BQU8sQ0FBQyxTQUFTO0FBQ3ZDLE9BQU8sRUFBRSxhQUFhLElBQUksU0FBUyxFQUFFLENBQUM7O0lBRWhDLGVBQWUsR0FBRyxPQUFPLENBQUMsV0FBVztBQUMzQyxPQUFPLEVBQUUsZUFBZSxJQUFJLFdBQVcsRUFBRSxDQUFDOztJQUVwQyxrQkFBa0IsR0FBRyxPQUFPLENBQUMsY0FBYztBQUNqRCxPQUFPLEVBQUUsa0JBQWtCLElBQUksY0FBYyxFQUFFLENBQUM7O0lBRTFDLG1CQUFtQixHQUFHLE9BQU8sQ0FBQyxlQUFlO0FBQ25ELE9BQU8sRUFBRSxtQkFBbUIsSUFBSSxlQUFlLEVBQUUsQ0FBQzs7SUFFNUMsZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLFlBQVk7QUFDN0MsT0FBTyxFQUFFLGdCQUFnQixJQUFJLFlBQVksRUFBRSxDQUFDOztJQUV0QyxxQkFBcUIsR0FBRyxPQUFPLENBQUMsaUJBQWlCO0FBQ3ZELE9BQU8sRUFBRSxxQkFBcUIsSUFBSSxpQkFBaUIsRUFBRSxDQUFDOztJQUVoRCx5QkFBeUIsR0FBRyxPQUFPLENBQUMscUJBQXFCO0FBQy9ELE9BQU8sRUFBRSx5QkFBeUIsSUFBSSxxQkFBcUIsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbXhncmFwaCB9IGZyb20gJy4vbXhncmFwaEZhY3RvcnknO1xyXG5cclxuLyoqXHJcbiAqIFZpZXdcclxuICovXHJcbmNvbnN0IG14Q2VsbEVkaXRvclR5cGUgPSBteGdyYXBoLm14Q2VsbEVkaXRvcjtcclxuZXhwb3J0IHsgbXhDZWxsRWRpdG9yVHlwZSBhcyBteENlbGxFZGl0b3IgfTtcclxuXHJcbmNvbnN0IG14Q2VsbE92ZXJsYXlUeXBlID0gbXhncmFwaC5teENlbGxPdmVybGF5O1xyXG5leHBvcnQgeyBteENlbGxPdmVybGF5VHlwZSBhcyBteENlbGxPdmVybGF5IH07XHJcblxyXG5jb25zdCBteENlbGxSZW5kZXJlclR5cGUgPSBteGdyYXBoLm14Q2VsbFJlbmRlcmVyO1xyXG5leHBvcnQgeyBteENlbGxSZW5kZXJlclR5cGUgYXMgbXhDZWxsUmVuZGVyZXIgfTtcclxuXHJcbmNvbnN0IG14Q2VsbFN0YXRlVHlwZSA9IG14Z3JhcGgubXhDZWxsU3RhdGU7XHJcbmV4cG9ydCB7IG14Q2VsbFN0YXRlVHlwZSBhcyBteENlbGxTdGF0ZSB9O1xyXG5cclxuY29uc3QgbXhDZWxsU3RhdGVQcmV2aWV3VHlwZSA9IG14Z3JhcGgubXhDZWxsU3RhdGVQcmV2aWV3O1xyXG5leHBvcnQgeyBteENlbGxTdGF0ZVByZXZpZXdUeXBlIGFzIG14Q2VsbFN0YXRlUHJldmlldyB9O1xyXG5cclxuY29uc3QgbXhDb25uZWN0aW9uQ29uc3RyYWludFR5cGUgPSBteGdyYXBoLm14Q29ubmVjdGlvbkNvbnN0cmFpbnQ7XHJcbmV4cG9ydCB7IG14Q29ubmVjdGlvbkNvbnN0cmFpbnRUeXBlIGFzIG14Q29ubmVjdGlvbkNvbnN0cmFpbnQgfTtcclxuXHJcbmNvbnN0IG14RWRnZVN0eWxlVHlwZSA9IG14Z3JhcGgubXhFZGdlU3R5bGU7XHJcbmV4cG9ydCB7IG14RWRnZVN0eWxlVHlwZSBhcyBteEVkZ2VTdHlsZSB9O1xyXG5cclxuY29uc3QgbXhHcmFwaFR5cGUgPSBteGdyYXBoLm14R3JhcGg7XHJcbmV4cG9ydCB7IG14R3JhcGhUeXBlIGFzIG14R3JhcGggfTtcclxuXHJcbmNvbnN0IG14R3JhcGhTZWxlY3Rpb25Nb2RlbFR5cGUgPSBteGdyYXBoLm14R3JhcGhTZWxlY3Rpb25Nb2RlbDtcclxuZXhwb3J0IHsgbXhHcmFwaFNlbGVjdGlvbk1vZGVsVHlwZSBhcyBteEdyYXBoU2VsZWN0aW9uTW9kZWwgfTtcclxuXHJcbmNvbnN0IG14R3JhcGhWaWV3VHlwZSA9IG14Z3JhcGgubXhHcmFwaFZpZXc7XHJcbmV4cG9ydCB7IG14R3JhcGhWaWV3VHlwZSBhcyBteEdyYXBoVmlldyB9O1xyXG5cclxuY29uc3QgbXhMYXlvdXRNYW5hZ2VyVHlwZSA9IG14Z3JhcGgubXhMYXlvdXRNYW5hZ2VyO1xyXG5leHBvcnQgeyBteExheW91dE1hbmFnZXJUeXBlIGFzIG14TGF5b3V0TWFuYWdlciB9O1xyXG5cclxuY29uc3QgbXhNdWx0aXBsaWNpdHlUeXBlID0gbXhncmFwaC5teE11bHRpcGxpY2l0eTtcclxuZXhwb3J0IHsgbXhNdWx0aXBsaWNpdHlUeXBlIGFzIG14TXVsdGlwbGljaXR5IH07XHJcblxyXG5jb25zdCBteE91dGxpbmVUeXBlID0gbXhncmFwaC5teE91dGxpbmU7XHJcbmV4cG9ydCB7IG14T3V0bGluZVR5cGUgYXMgbXhPdXRsaW5lIH07XHJcblxyXG5jb25zdCBteFBlcmltZXRlclR5cGUgPSBteGdyYXBoLm14UGVyaW1ldGVyO1xyXG5leHBvcnQgeyBteFBlcmltZXRlclR5cGUgYXMgbXhQZXJpbWV0ZXIgfTtcclxuXHJcbmNvbnN0IG14UHJpbnRQcmV2aWV3VHlwZSA9IG14Z3JhcGgubXhQcmludFByZXZpZXc7XHJcbmV4cG9ydCB7IG14UHJpbnRQcmV2aWV3VHlwZSBhcyBteFByaW50UHJldmlldyB9O1xyXG5cclxuY29uc3QgbXhTdHlsZVJlZ2lzdHJ5VHlwZSA9IG14Z3JhcGgubXhTdHlsZVJlZ2lzdHJ5O1xyXG5leHBvcnQgeyBteFN0eWxlUmVnaXN0cnlUeXBlIGFzIG14U3R5bGVSZWdpc3RyeSB9O1xyXG5cclxuY29uc3QgbXhTdHlsZXNoZWV0VHlwZSA9IG14Z3JhcGgubXhTdHlsZXNoZWV0O1xyXG5leHBvcnQgeyBteFN0eWxlc2hlZXRUeXBlIGFzIG14U3R5bGVzaGVldCB9O1xyXG5cclxuY29uc3QgbXhTd2ltbGFuZU1hbmFnZXJUeXBlID0gbXhncmFwaC5teFN3aW1sYW5lTWFuYWdlcjtcclxuZXhwb3J0IHsgbXhTd2ltbGFuZU1hbmFnZXJUeXBlIGFzIG14U3dpbWxhbmVNYW5hZ2VyIH07XHJcblxyXG5jb25zdCBteFRlbXBvcmFyeUNlbGxTdGF0ZXNUeXBlID0gbXhncmFwaC5teFRlbXBvcmFyeUNlbGxTdGF0ZXM7XHJcbmV4cG9ydCB7IG14VGVtcG9yYXJ5Q2VsbFN0YXRlc1R5cGUgYXMgbXhUZW1wb3JhcnlDZWxsU3RhdGVzIH07Il19