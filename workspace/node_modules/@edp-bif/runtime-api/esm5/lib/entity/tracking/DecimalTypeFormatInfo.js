/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/tracking/DecimalTypeFormatInfo.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BpmnModelJsonHelper, JsonConvertableImpl } from "@edp-aif/common-api";
import { ScaleMode } from "./ScaleMode";
var DecimalTypeFormatInfo = /** @class */ (function (_super) {
    tslib_1.__extends(DecimalTypeFormatInfo, _super);
    function DecimalTypeFormatInfo() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.scaleMode = ScaleMode.DEFAULT;
        return _this;
    }
    /**
     * @protected
     * @return {?}
     */
    DecimalTypeFormatInfo.prototype.ResetBeforeLoadFrom = /**
     * @protected
     * @return {?}
     */
    function () {
        _super.prototype.ResetBeforeLoadFrom.call(this);
        this.scale = 0;
        this.scaleMode = ScaleMode.DEFAULT;
        this.fieldPath = null;
        this.version = 0;
    };
    /**
     * @return {?}
     */
    DecimalTypeFormatInfo.prototype.ConvertToJsonObject = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var obj = _super.prototype.ConvertToJsonObject.call(this);
        BpmnModelJsonHelper.SetAttributeValue(obj, "scale", this.scale);
        BpmnModelJsonHelper.SetAttributeValue(obj, "scale", this.scale);
        BpmnModelJsonHelper.SetAttributeValue(obj, "scaleMode", this.scaleMode);
        BpmnModelJsonHelper.SetAttributeValue(obj, "fieldPath", this.fieldPath);
        BpmnModelJsonHelper.SetAttributeValue(obj, "version", this.version);
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    DecimalTypeFormatInfo.prototype.LoadFromJsonObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        _super.prototype.LoadFromJsonObject.call(this, obj);
        this.scale = BpmnModelJsonHelper.GetAttributeValueAsNumber(obj, "scale");
        /** @type {?} */
        var scaleMode = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "scaleMode");
        this.scaleMode = scaleMode == null ? ScaleMode.DEFAULT : ScaleMode[scaleMode];
        this.fieldPath = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "fieldPath");
        this.version = BpmnModelJsonHelper.GetAttributeValueAsNumber(obj, "version");
    };
    return DecimalTypeFormatInfo;
}(JsonConvertableImpl));
export { DecimalTypeFormatInfo };
if (false) {
    /** @type {?} */
    DecimalTypeFormatInfo.prototype.scale;
    /** @type {?} */
    DecimalTypeFormatInfo.prototype.scaleMode;
    /** @type {?} */
    DecimalTypeFormatInfo.prototype.fieldPath;
    /** @type {?} */
    DecimalTypeFormatInfo.prototype.version;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVjaW1hbFR5cGVGb3JtYXRJbmZvLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVkcC1iaWYvcnVudGltZS1hcGkvIiwic291cmNlcyI6WyJsaWIvZW50aXR5L3RyYWNraW5nL0RlY2ltYWxUeXBlRm9ybWF0SW5mby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUMvRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRXhDO0lBQTJDLGlEQUFtQjtJQUE5RDtRQUFBLHFFQXFDQztRQW5DRyxlQUFTLEdBQWMsU0FBUyxDQUFDLE9BQU8sQ0FBQzs7SUFtQzdDLENBQUM7Ozs7O0lBL0JhLG1EQUFtQjs7OztJQUE3QjtRQUNJLGlCQUFNLG1CQUFtQixXQUFFLENBQUM7UUFFNUIsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUM7UUFDbkMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFDdEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7SUFDckIsQ0FBQzs7OztJQUVNLG1EQUFtQjs7O0lBQTFCOztZQUNRLEdBQUcsR0FBRyxpQkFBTSxtQkFBbUIsV0FBRTtRQUVyQyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNoRSxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNoRSxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN4RSxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN4RSxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVwRSxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7Ozs7O0lBRU0sa0RBQWtCOzs7O0lBQXpCLFVBQTBCLEdBQU87UUFDN0IsaUJBQU0sa0JBQWtCLFlBQUMsR0FBRyxDQUFDLENBQUM7UUFFOUIsSUFBSSxDQUFDLEtBQUssR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUM7O1lBQ25FLFNBQVMsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDO1FBQ2pGLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzlFLElBQUksQ0FBQyxTQUFTLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ2pGLElBQUksQ0FBQyxPQUFPLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBRWpGLENBQUM7SUFDTCw0QkFBQztBQUFELENBQUMsQUFyQ0QsQ0FBMkMsbUJBQW1CLEdBcUM3RDs7OztJQXBDRyxzQ0FBYzs7SUFDZCwwQ0FBeUM7O0lBQ3pDLDBDQUFrQjs7SUFDbEIsd0NBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnBtbk1vZGVsSnNvbkhlbHBlciwgSnNvbkNvbnZlcnRhYmxlSW1wbCB9IGZyb20gXCJAZWRwLWFpZi9jb21tb24tYXBpXCI7XHJcbmltcG9ydCB7IFNjYWxlTW9kZSB9IGZyb20gXCIuL1NjYWxlTW9kZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIERlY2ltYWxUeXBlRm9ybWF0SW5mbyBleHRlbmRzIEpzb25Db252ZXJ0YWJsZUltcGwge1xyXG4gICAgc2NhbGU6IG51bWJlcjtcclxuICAgIHNjYWxlTW9kZTogU2NhbGVNb2RlID0gU2NhbGVNb2RlLkRFRkFVTFQ7XHJcbiAgICBmaWVsZFBhdGg6IHN0cmluZztcclxuICAgIHZlcnNpb246IG51bWJlcjtcclxuXHJcbiAgICBwcm90ZWN0ZWQgUmVzZXRCZWZvcmVMb2FkRnJvbSgpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5SZXNldEJlZm9yZUxvYWRGcm9tKCk7XHJcblxyXG4gICAgICAgIHRoaXMuc2NhbGUgPSAwO1xyXG4gICAgICAgIHRoaXMuc2NhbGVNb2RlID0gU2NhbGVNb2RlLkRFRkFVTFQ7XHJcbiAgICAgICAgdGhpcy5maWVsZFBhdGggPSBudWxsO1xyXG4gICAgICAgIHRoaXMudmVyc2lvbiA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIENvbnZlcnRUb0pzb25PYmplY3QoKToge30ge1xyXG4gICAgICAgIGxldCBvYmogPSBzdXBlci5Db252ZXJ0VG9Kc29uT2JqZWN0KCk7XHJcblxyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInNjYWxlXCIsIHRoaXMuc2NhbGUpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInNjYWxlXCIsIHRoaXMuc2NhbGUpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInNjYWxlTW9kZVwiLCB0aGlzLnNjYWxlTW9kZSk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiZmllbGRQYXRoXCIsIHRoaXMuZmllbGRQYXRoKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJ2ZXJzaW9uXCIsIHRoaXMudmVyc2lvbik7XHJcblxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIExvYWRGcm9tSnNvbk9iamVjdChvYmo6IHt9KTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuTG9hZEZyb21Kc29uT2JqZWN0KG9iaik7XHJcblxyXG4gICAgICAgIHRoaXMuc2NhbGUgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNOdW1iZXIob2JqLCBcInNjYWxlXCIpO1xyXG4gICAgICAgIGNvbnN0IHNjYWxlTW9kZSA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwic2NhbGVNb2RlXCIpO1xyXG4gICAgICAgIHRoaXMuc2NhbGVNb2RlID0gc2NhbGVNb2RlID09IG51bGwgPyBTY2FsZU1vZGUuREVGQVVMVCA6IFNjYWxlTW9kZVtzY2FsZU1vZGVdO1xyXG4gICAgICAgIHRoaXMuZmllbGRQYXRoID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJmaWVsZFBhdGhcIik7XHJcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzTnVtYmVyKG9iaiwgXCJ2ZXJzaW9uXCIpO1xyXG5cclxuICAgIH1cclxufSJdfQ==