/**
 * @fileoverview added by tsickle
 * Generated from: lib/bill-tracker/components/bill-tracker-data/bill-tracker-data.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ComponentFactoryResolver, Injector, ViewContainerRef, ViewChild, ComponentRef, NgModuleFactoryLoader, ChangeDetectorRef, Optional, LOCALE_ID, Inject, ElementRef } from '@angular/core';
import { BasicTableComponent } from '../basic-table/basic-table.component';
import { BillTrackerDataService } from '../../services/bill-tracker-data.service';
import { LoadingService } from '@farris/ui-loading';
import { MessagerService } from '@farris/ui-messager';
import { BillTrackingSettings, BillTrackingDataShownMode } from '@edp-bif/common-api';
import { from, of } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { BasicInfoComponent } from '../basic-info/basic-info.component';
import { NotifyService } from '@farris/ui-notify';
import { BsModalService } from '@farris/ui-modal';
import { BillTrackerDataInfoService } from '../../services/bill-tracker-data-info.service';
import { BillTrackerLocalePipe } from '../../pipe/bill-tracker-locale.pipe';
var BillTrackerDataComponent = /** @class */ (function () {
    function BillTrackerDataComponent(notify, messager, loading, modal, dataService, inj, cfr, cdf, loader, localeId, vcr, er) {
        this.notify = notify;
        this.messager = messager;
        this.loading = loading;
        this.modal = modal;
        this.dataService = dataService;
        this.inj = inj;
        this.cfr = cfr;
        this.cdf = cdf;
        this.loader = loader;
        this.dataInfoService = new BillTrackerDataInfoService();
        this.localeId = localeId || this.inj.get(LOCALE_ID, null) || 'zh-CHS';
        this.localePipe = new BillTrackerLocalePipe(localeId);
        this.vcr = vcr || this.inj.get(ViewContainerRef, null);
        this.er = er || this.inj.get(ElementRef, null);
    }
    /**
     * @return {?}
     */
    BillTrackerDataComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    BillTrackerDataComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    BillTrackerDataComponent.prototype.clearDataRegion = /**
     * @return {?}
     */
    function () {
        this.dataRegion.clear();
    };
    /**
     * @param {?} args
     * @param {?=} billInfo
     * @param {?=} billDataInfo
     * @param {?=} res
     * @return {?}
     */
    BillTrackerDataComponent.prototype.showDataGrid = /**
     * @param {?} args
     * @param {?=} billInfo
     * @param {?=} billDataInfo
     * @param {?=} res
     * @return {?}
     */
    function (args, billInfo, billDataInfo, res) {
        // 单据追踪配置
        /** @type {?} */
        var bts = new BillTrackingSettings();
        if (billInfo && billInfo.billTrackingSettings) {
            bts.LoadFromJson(billInfo.billTrackingSettings);
        }
        if (bts.billTrackingDataShownMode == BillTrackingDataShownMode.CUSTOMFORM) {
            this.showCustomForm(args, billInfo, billDataInfo);
        }
        else {
            this.showGeneralForm(args, billInfo, billDataInfo, res);
        }
    };
    /**
     * 打开通用表单
     * @param args
     * @param billInfo
     * @param res
     */
    /**
     * 打开通用表单
     * @private
     * @param {?} args
     * @param {?=} billInfo
     * @param {?=} billDataInfo
     * @param {?=} res
     * @param {?=} newBTS
     * @return {?}
     */
    BillTrackerDataComponent.prototype.showGeneralForm = /**
     * 打开通用表单
     * @private
     * @param {?} args
     * @param {?=} billInfo
     * @param {?=} billDataInfo
     * @param {?=} res
     * @param {?=} newBTS
     * @return {?}
     */
    function (args, billInfo, billDataInfo, res, newBTS) {
        var _this = this;
        if (res != null) {
            this.createDataComp(res, billInfo, billDataInfo);
        }
        else {
            /** @type {?} */
            var l_1 = this.loading.show({ message: this.localePipe.transform("loading") });
            this.dataService.getEntityData(args).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                _this.createDataComp(res, billInfo, billDataInfo);
                l_1.close();
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                l_1.close();
                _this.messager.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
                throw err;
            }));
        }
    };
    /**
     * 打开自定义表单
     * @param args
     * @param billInfo
     */
    /**
     * 打开自定义表单
     * @private
     * @param {?} args
     * @param {?=} billInfo
     * @param {?=} billDataInfo
     * @return {?}
     */
    BillTrackerDataComponent.prototype.showCustomForm = /**
     * 打开自定义表单
     * @private
     * @param {?} args
     * @param {?=} billInfo
     * @param {?=} billDataInfo
     * @return {?}
     */
    function (args, billInfo, billDataInfo) {
        var _this = this;
        /** @type {?} */
        var bts = new BillTrackingSettings();
        if (billInfo && billInfo.billTrackingSettings) {
            bts.LoadFromJson(billInfo.billTrackingSettings);
        }
        /** @type {?} */
        var formContent = JSON.parse(bts.customFormContent);
        /** @type {?} */
        var moduleF$ = null;
        if (formContent.form.endsWith(".js")) {
            // url格式为[js路径]时
            moduleF$ = from(System.import(formContent.form.toLowerCase()).then((/**
             * @param {?} m
             * @return {?}
             */
            function (m) { return m; }))).pipe(switchMap((/**
             * @param {?} m
             * @return {?}
             */
            function (m) {
                for (var key in m) {
                    return of(m[key]);
                }
                return of(null);
            })));
        }
        else {
            // url格式为[js路径#模块名]时
            moduleF$ = from(this.loader.load(formContent.form));
        }
        moduleF$.subscribe((/**
         * @param {?} moduleFactory
         * @return {?}
         */
        function (moduleFactory) {
            /** @type {?} */
            var moduleRef = moduleFactory.create(_this.inj);
            /** @type {?} */
            var cmpR$ = moduleRef.instance.createDataShownComponent(_this.inj, args);
            if (cmpR$ instanceof ComponentRef) {
                cmpR$ = of(cmpR$);
            }
            cmpR$.subscribe((/**
             * @param {?} cmpR
             * @return {?}
             */
            function (cmpR) {
                // 重置滚动条
                /** @type {?} */
                var elt = (/** @type {?} */ (_this.dataRegion.element.nativeElement.parentElement));
                elt.scrollTo({ left: 0 });
                _this.dataRegion.clear();
                _this.dataRegion.insert(cmpR.hostView);
            }));
        }));
    };
    /**
   * 创建通用表组件
   * @param res
   * @param billInfo
   */
    /**
     * 创建通用表组件
     * @param {?} res
     * @param {?} billInfo
     * @param {?} billDataInfo
     * @return {?}
     */
    BillTrackerDataComponent.prototype.createDataComp = /**
     * 创建通用表组件
     * @param {?} res
     * @param {?} billInfo
     * @param {?} billDataInfo
     * @return {?}
     */
    function (res, billInfo, billDataInfo) {
        /** @type {?} */
        var newBTS = this.dataInfoService.isNewBTS(billInfo.billTrackingSettings);
        // if (newBTS) {
        try {
            this.createNewDataComp(res, billInfo, billDataInfo);
        }
        catch (e) {
            // 重置滚动条
            /** @type {?} */
            var elt = (/** @type {?} */ (this.dataRegion.element.nativeElement.parentElement));
            elt && elt.scrollTo({ left: 0 });
            this.dataRegion.clear();
            /** @type {?} */
            var cmf = this.cfr.resolveComponentFactory(BasicTableComponent);
            /** @type {?} */
            var cmpR = this.dataRegion.createComponent(cmf);
            cmpR.instance.billInfo = billInfo;
            cmpR.instance.isMain = true;
            cmpR.instance.showMainTable(res);
            this.dataRegion.insert(cmpR.hostView);
        }
        // }
    };
    /**
   * 创建通用表组件
   * @param res
   * @param billInfo
   */
    /**
     * 创建通用表组件
     * @param {?} res
     * @param {?=} billInfo
     * @param {?=} billDataInfo
     * @return {?}
     */
    BillTrackerDataComponent.prototype.createNewDataComp = /**
     * 创建通用表组件
     * @param {?} res
     * @param {?=} billInfo
     * @param {?=} billDataInfo
     * @return {?}
     */
    function (res, billInfo, billDataInfo) {
        // 重置滚动条
        /** @type {?} */
        var elt = (/** @type {?} */ (this.dataRegion.element.nativeElement.parentElement));
        elt && elt.scrollTo({ left: 0 });
        this.dataRegion.clear();
        /** @type {?} */
        var cmf = this.cfr.resolveComponentFactory(BasicInfoComponent);
        /** @type {?} */
        var cmpR = this.dataRegion.createComponent(cmf);
        cmpR.instance.schemaTable = res.billSchema.mainTable;
        cmpR.instance.dataTable = res.billData.mainTable;
        cmpR.instance.billInfo = billInfo;
        cmpR.instance.billDataInfo = billDataInfo;
        this.dataRegion.insert(cmpR.hostView);
    };
    BillTrackerDataComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-bill-tracker-data',
                    template: "<div style=\"\">\r\n    <ng-container #dataRegion></ng-container>\r\n</div>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    BillTrackerDataComponent.ctorParameters = function () { return [
        { type: NotifyService },
        { type: MessagerService },
        { type: LoadingService },
        { type: BsModalService },
        { type: BillTrackerDataService },
        { type: Injector },
        { type: ComponentFactoryResolver },
        { type: ChangeDetectorRef },
        { type: NgModuleFactoryLoader },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: ViewContainerRef, decorators: [{ type: Optional }] },
        { type: ElementRef, decorators: [{ type: Optional }] }
    ]; };
    BillTrackerDataComponent.propDecorators = {
        dataRegion: [{ type: ViewChild, args: ["dataRegion", { read: ViewContainerRef },] }]
    };
    return BillTrackerDataComponent;
}());
export { BillTrackerDataComponent };
if (false) {
    /** @type {?} */
    BillTrackerDataComponent.prototype.dataRegion;
    /** @type {?} */
    BillTrackerDataComponent.prototype.dataInfoService;
    /** @type {?} */
    BillTrackerDataComponent.prototype.localePipe;
    /** @type {?} */
    BillTrackerDataComponent.prototype.localeId;
    /** @type {?} */
    BillTrackerDataComponent.prototype.vcr;
    /** @type {?} */
    BillTrackerDataComponent.prototype.er;
    /** @type {?} */
    BillTrackerDataComponent.prototype.notify;
    /** @type {?} */
    BillTrackerDataComponent.prototype.messager;
    /** @type {?} */
    BillTrackerDataComponent.prototype.loading;
    /** @type {?} */
    BillTrackerDataComponent.prototype.modal;
    /** @type {?} */
    BillTrackerDataComponent.prototype.dataService;
    /** @type {?} */
    BillTrackerDataComponent.prototype.inj;
    /** @type {?} */
    BillTrackerDataComponent.prototype.cfr;
    /** @type {?} */
    BillTrackerDataComponent.prototype.cdf;
    /** @type {?} */
    BillTrackerDataComponent.prototype.loader;
}
//# sourceMappingURL=data:application/json;base64,