/**
 * @fileoverview added by tsickle
 * Generated from: lib/bill-tracker/components/basic-table/basic-table.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewContainerRef, Injector, ComponentFactoryResolver, ViewChild, TemplateRef, ChangeDetectionStrategy, ChangeDetectorRef } from "@angular/core";
import { DataType, BpmnModelJsonHelper } from '@edp-aif/common-api';
import { BillTrackingSettings, BillTrackingDataShownMode } from "@edp-bif/common-api";
import { BillFrontField } from './BillFrontField';
import { BillFrontDataRow } from './BillFrontDataRow';
var BasicTableComponent = /** @class */ (function () {
    function BasicTableComponent(viewContainerRef, inj, cfr, cdr) {
        this.viewContainerRef = viewContainerRef;
        this.inj = inj;
        this.cfr = cfr;
        this.cdr = cdr;
    }
    /**
     * @return {?}
     */
    BasicTableComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} item
     * @param {?} evt
     * @return {?}
     */
    BasicTableComponent.prototype.clickHandler = /**
     * @param {?} item
     * @param {?} evt
     * @return {?}
     */
    function (item, evt) {
        item['expanded'] = !item['expanded'];
    };
    /**
     * @param {?} res
     * @return {?}
     */
    BasicTableComponent.prototype.showMainTable = /**
     * @param {?} res
     * @return {?}
     */
    function (res) {
        this.showTable(res.billSchema.mainTable, res.billData.mainTable);
    };
    /**
     * @param {?} schemaTable
     * @param {?} dataTable
     * @return {?}
     */
    BasicTableComponent.prototype.showTable = /**
     * @param {?} schemaTable
     * @param {?} dataTable
     * @return {?}
     */
    function (schemaTable, dataTable) {
        this.billSchemaTable = schemaTable;
        this.billDataTable = dataTable;
        this.loadData(schemaTable.getFieldList(), dataTable.GetRowList());
        this.cdr.detectChanges();
    };
    /**
     * @param {?} billSchemaFields
     * @param {?} billDataRows
     * @return {?}
     */
    BasicTableComponent.prototype.loadData = /**
     * @param {?} billSchemaFields
     * @param {?} billDataRows
     * @return {?}
     */
    function (billSchemaFields, billDataRows) {
        this.fields = billSchemaFields;
        this.rows = billDataRows;
        /** @type {?} */
        var bts = new BillTrackingSettings();
        if (this.billInfo && this.billInfo.billTrackingSettings) {
            bts.LoadFromJson(this.billInfo.billTrackingSettings);
        }
        if (bts.billTrackingDataShownMode == BillTrackingDataShownMode.CUSTOMFIELD) {
            this.ffields = this.extractFFieldsWithCustomFields(billSchemaFields, bts.customFieldContent);
            this.frows = this.extractFRows(billDataRows, this.ffields);
        }
        else {
            this.ffields = this.extractFFields(billSchemaFields);
            this.frows = this.extractFRows(billDataRows, this.ffields);
        }
    };
    /**
     * 默认展示方式
     * @param fields
     */
    /**
     * 默认展示方式
     * @private
     * @param {?} fields
     * @return {?}
     */
    BasicTableComponent.prototype.extractFFields = /**
     * 默认展示方式
     * @private
     * @param {?} fields
     * @return {?}
     */
    function (fields) {
        var e_1, _a;
        /** @type {?} */
        var ffields = [];
        try {
            for (var fields_1 = tslib_1.__values(fields), fields_1_1 = fields_1.next(); !fields_1_1.done; fields_1_1 = fields_1.next()) {
                var field = fields_1_1.value;
                //枚举或者枚举型单值UDT时默认取Name
                if (field.fieldType == "Enum" || field.fieldType == "EnumSingleUdt") {
                    /** @type {?} */
                    var ff = new BillFrontField();
                    ff.fieldName = field.fieldName;
                    ff.dataType = field.dataType;
                    ff.caption = field.caption;
                    ff.fieldType = field.fieldType;
                    ff.length = field.length;
                    ff.precision = field.precision;
                    ff.scale = field.scale;
                    ff.captionPath = this.extractCaptionPath(field);
                    ff.fieldPath = this.extractFieldPath(field) + ".Name";
                    ffields.push(ff);
                }
                else if (field.GetSubFieldList() != null && field.GetSubFieldList().length > 0) {
                    ffields.push.apply(ffields, tslib_1.__spread(this.extractFSubFields(field.GetSubFieldList())));
                }
                else {
                    /** @type {?} */
                    var ff = new BillFrontField();
                    ff.fieldName = field.fieldName;
                    ff.dataType = field.dataType;
                    ff.caption = field.caption;
                    ff.fieldType = field.fieldType;
                    ff.length = field.length;
                    ff.precision = field.precision;
                    ff.scale = field.scale;
                    ff.captionPath = this.extractCaptionPath(field);
                    ff.fieldPath = this.extractFieldPath(field);
                    ffields.push(ff);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (fields_1_1 && !fields_1_1.done && (_a = fields_1.return)) _a.call(fields_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return ffields;
    };
    /**
     * @private
     * @param {?} fields
     * @param {?=} parentField
     * @return {?}
     */
    BasicTableComponent.prototype.extractFSubFields = /**
     * @private
     * @param {?} fields
     * @param {?=} parentField
     * @return {?}
     */
    function (fields, parentField) {
        var e_2, _a;
        /** @type {?} */
        var ffields = [];
        try {
            for (var fields_2 = tslib_1.__values(fields), fields_2_1 = fields_2.next(); !fields_2_1.done; fields_2_1 = fields_2.next()) {
                var field = fields_2_1.value;
                //枚举或者枚举型单值UDT时默认取Name
                if (field.fieldType == "Enum" || field.fieldType == "EnumSingleUdt") {
                    /** @type {?} */
                    var ff = new BillFrontField();
                    ff.fieldName = field.fieldName;
                    ff.dataType = field.dataType;
                    ff.caption = field.caption;
                    ff.fieldType = field.fieldType;
                    ff.length = field.length;
                    ff.precision = field.precision;
                    ff.scale = field.scale;
                    ff.captionPath = this.extractCaptionPath(field);
                    ff.fieldPath = this.extractFieldPath(field) + ".Name";
                    ffields.push(ff);
                }
                else if (field.GetSubFieldList() != null && field.GetSubFieldList().length > 0) {
                    ffields.push.apply(ffields, tslib_1.__spread(this.extractFSubFields(field.GetSubFieldList())));
                }
                else {
                    /** @type {?} */
                    var ff = new BillFrontField();
                    ff.fieldName = field.fieldName;
                    ff.dataType = field.dataType;
                    ff.caption = field.caption;
                    ff.fieldType = field.fieldType;
                    ff.length = field.length;
                    ff.precision = field.precision;
                    ff.scale = field.scale;
                    ff.captionPath = this.extractCaptionPath(field);
                    ff.fieldPath = this.extractFieldPath(field);
                    ffields.push(ff);
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (fields_2_1 && !fields_2_1.done && (_a = fields_2.return)) _a.call(fields_2);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return ffields;
    };
    /**
     * 自定义字段展示方式
     */
    /**
     * 自定义字段展示方式
     * @private
     * @param {?} fields
     * @param {?} fieldContent
     * @return {?}
     */
    BasicTableComponent.prototype.extractFFieldsWithCustomFields = /**
     * 自定义字段展示方式
     * @private
     * @param {?} fields
     * @param {?} fieldContent
     * @return {?}
     */
    function (fields, fieldContent) {
        var e_3, _a;
        // 表code
        /** @type {?} */
        var tableCode = this.billSchemaTable.tableName;
        // 单据追踪配置
        /** @type {?} */
        var bts = new BillTrackingSettings();
        if (this.billInfo && this.billInfo.billTrackingSettings) {
            bts.LoadFromJson(this.billInfo.billTrackingSettings);
        }
        /** @type {?} */
        var fieldConfig = typeof fieldContent == "object" ? fieldContent : JSON.parse(fieldContent);
        /** @type {?} */
        var ffields = [];
        var _loop_1 = function (field) {
            // 字段ID
            /** @type {?} */
            var fieldPath = this_1.extractFieldPath(field);
            /** @type {?} */
            var sf = null;
            for (var k in fieldConfig.schema) {
                if (k == 'selectedAll') {
                    continue;
                }
                if (k == tableCode) {
                    /** @type {?} */
                    var s = fieldConfig.schema[k];
                    sf = s && s.fields.find((/**
                     * @param {?} elt
                     * @return {?}
                     */
                    function (elt) { return elt.fieldPath == fieldPath; }));
                    break;
                }
            }
            if (sf == null) {
                return "continue";
            }
            //枚举或者枚举型单值UDT时默认取Name
            if (field.fieldType == "Enum" || field.fieldType == "EnumSingleUdt") {
                /** @type {?} */
                var ff = new BillFrontField();
                ff.fieldName = field.fieldName;
                ff.dataType = field.dataType;
                ff.caption = field.caption;
                ff.fieldType = field.fieldType;
                ff.length = field.length;
                ff.precision = field.precision;
                ff.scale = field.scale;
                ff.captionPath = sf.displayName || field.caption;
                ff.fieldPath = this_1.extractFieldPath(field) + ".Name";
                ffields.push(ff);
            }
            else if (field.GetSubFieldList() != null && field.GetSubFieldList().length > 0) {
                ffields.push.apply(ffields, tslib_1.__spread(this_1.extractFSubFieldsWithCustomFields(field.GetSubFieldList(), fieldContent, field)));
            }
            else {
                /** @type {?} */
                var ff = new BillFrontField();
                ff.fieldName = field.fieldName;
                ff.dataType = field.dataType;
                ff.caption = field.caption;
                ff.fieldType = field.fieldType;
                ff.length = field.length;
                ff.precision = field.precision;
                ff.scale = field.scale;
                ff.captionPath = sf.displayName || field.caption;
                ff.fieldPath = this_1.extractFieldPath(field);
                ffields.push(ff);
            }
        };
        var this_1 = this;
        try {
            for (var fields_3 = tslib_1.__values(fields), fields_3_1 = fields_3.next(); !fields_3_1.done; fields_3_1 = fields_3.next()) {
                var field = fields_3_1.value;
                _loop_1(field);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (fields_3_1 && !fields_3_1.done && (_a = fields_3.return)) _a.call(fields_3);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return ffields;
    };
    /**
     * @private
     * @param {?} fields
     * @param {?} fieldContent
     * @param {?=} parentField
     * @return {?}
     */
    BasicTableComponent.prototype.extractFSubFieldsWithCustomFields = /**
     * @private
     * @param {?} fields
     * @param {?} fieldContent
     * @param {?=} parentField
     * @return {?}
     */
    function (fields, fieldContent, parentField) {
        var e_4, _a;
        // 表编号
        /** @type {?} */
        var tableCode = this.billSchemaTable.tableName;
        // 单据追踪配置
        /** @type {?} */
        var bts = new BillTrackingSettings();
        if (this.billInfo && this.billInfo.billTrackingSettings) {
            bts.LoadFromJson(this.billInfo.billTrackingSettings);
        }
        /** @type {?} */
        var fieldConfig = typeof fieldContent == "object" ? fieldContent : JSON.parse(fieldContent);
        /** @type {?} */
        var ffields = [];
        var _loop_2 = function (field) {
            // 字段ID
            /** @type {?} */
            var fieldPath = this_2.extractFieldPath(field);
            /** @type {?} */
            var sf = null;
            for (var k in fieldConfig.schema) {
                if (k == 'selectedAll') {
                    continue;
                }
                if (k == tableCode) {
                    /** @type {?} */
                    var s = fieldConfig.schema[k];
                    sf = s && s.fields.find((/**
                     * @param {?} elt
                     * @return {?}
                     */
                    function (elt) { return elt.fieldPath == fieldPath; }));
                    break;
                }
            }
            if (sf == null) {
                return "continue";
            }
            //枚举或者枚举型单值UDT时默认取Name
            if (field.fieldType == "Enum" || field.fieldType == "EnumSingleUdt") {
                /** @type {?} */
                var ff = new BillFrontField();
                ff.fieldName = field.fieldName;
                ff.dataType = field.dataType;
                ff.caption = field.caption;
                ff.fieldType = field.fieldType;
                ff.length = field.length;
                ff.precision = field.precision;
                ff.scale = field.scale;
                ff.captionPath = sf.displayName || field.caption;
                ff.fieldPath = this_2.extractFieldPath(field) + ".Name";
                ffields.push(ff);
            }
            else if (field.GetSubFieldList() != null && field.GetSubFieldList().length > 0) {
                ffields.push.apply(ffields, tslib_1.__spread(this_2.extractFSubFieldsWithCustomFields(field.GetSubFieldList(), fieldContent, field)));
            }
            else {
                /** @type {?} */
                var ff = new BillFrontField();
                ff.fieldName = field.fieldName;
                ff.dataType = field.dataType;
                ff.caption = field.caption;
                ff.fieldType = field.fieldType;
                ff.length = field.length;
                ff.precision = field.precision;
                ff.scale = field.scale;
                ff.captionPath = sf.displayName || field.caption;
                ff.fieldPath = this_2.extractFieldPath(field);
                ffields.push(ff);
            }
        };
        var this_2 = this;
        try {
            for (var fields_4 = tslib_1.__values(fields), fields_4_1 = fields_4.next(); !fields_4_1.done; fields_4_1 = fields_4.next()) {
                var field = fields_4_1.value;
                _loop_2(field);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (fields_4_1 && !fields_4_1.done && (_a = fields_4.return)) _a.call(fields_4);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return ffields;
    };
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    BasicTableComponent.prototype.extractCaptionPath = /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        /** @type {?} */
        var s = field.caption;
        /** @type {?} */
        var tmp = (/** @type {?} */ (field));
        while (tmp.attachedField != null) {
            s = tmp.attachedField.caption + "." + s;
            tmp = (/** @type {?} */ (tmp.attachedField));
        }
        return s;
    };
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    BasicTableComponent.prototype.extractFieldPath = /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        /** @type {?} */
        var s = field.fieldName;
        /** @type {?} */
        var tmp = (/** @type {?} */ (field));
        while (tmp.attachedField != null) {
            s = tmp.attachedField.fieldName + "." + s;
            tmp = (/** @type {?} */ (tmp.attachedField));
        }
        return s;
    };
    /**
     * @private
     * @param {?} rows
     * @param {?} ffields
     * @return {?}
     */
    BasicTableComponent.prototype.extractFRows = /**
     * @private
     * @param {?} rows
     * @param {?} ffields
     * @return {?}
     */
    function (rows, ffields) {
        var e_5, _a, e_6, _b;
        /** @type {?} */
        var frows = [];
        try {
            for (var rows_1 = tslib_1.__values(rows), rows_1_1 = rows_1.next(); !rows_1_1.done; rows_1_1 = rows_1.next()) {
                var row = rows_1_1.value;
                /** @type {?} */
                var fr = new BillFrontDataRow();
                fr.expanded = row.GetChildTableList().length == 0 ? null : row.attachedTable && row.attachedTable.attachedRow == null ? true : false;
                fr.hasChildren = this.hasChildren(row);
                fr.data = {};
                try {
                    for (var ffields_1 = tslib_1.__values(ffields), ffields_1_1 = ffields_1.next(); !ffields_1_1.done; ffields_1_1 = ffields_1.next()) {
                        var ff = ffields_1_1.value;
                        fr.data[ff.fieldPath] = this.extractFieldPathValue(row.GetFieldMap(), ff.fieldPath);
                    }
                }
                catch (e_6_1) { e_6 = { error: e_6_1 }; }
                finally {
                    try {
                        if (ffields_1_1 && !ffields_1_1.done && (_b = ffields_1.return)) _b.call(ffields_1);
                    }
                    finally { if (e_6) throw e_6.error; }
                }
                frows.push(fr);
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (rows_1_1 && !rows_1_1.done && (_a = rows_1.return)) _a.call(rows_1);
            }
            finally { if (e_5) throw e_5.error; }
        }
        return frows;
    };
    /**
     * @param {?} row
     * @return {?}
     */
    BasicTableComponent.prototype.hasChildren = /**
     * @param {?} row
     * @return {?}
     */
    function (row) {
        var e_7, _a;
        /** @type {?} */
        var flag = row.GetChildTableList() && row.GetChildTableList().length > 0;
        if (flag) {
            /** @type {?} */
            var cf = false;
            try {
                for (var _b = tslib_1.__values(row.GetChildTableList()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var ct = _c.value;
                    if (ct.GetRowList() && ct.GetRowList().length > 0) {
                        cf = true;
                        break;
                    }
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_7) throw e_7.error; }
            }
            flag = cf;
        }
        return flag;
    };
    /**
     * @param {?} billDataFieldMap
     * @param {?} fieldPath
     * @return {?}
     */
    BasicTableComponent.prototype.extractFieldPathValue = /**
     * @param {?} billDataFieldMap
     * @param {?} fieldPath
     * @return {?}
     */
    function (billDataFieldMap, fieldPath) {
        /** @type {?} */
        var fields = fieldPath.split(".");
        /** @type {?} */
        var bdf = billDataFieldMap[fields[0]];
        for (var i = 1; bdf != null && i < fields.length; i++) {
            /** @type {?} */
            var temp = bdf.GetSubFieldMap();
            if (temp == null) {
                break;
            }
            bdf = temp[fields[i]];
        }
        return bdf ? bdf.GetTextValue() : "";
    };
    /**
     * @param {?} obj
     * @param {?} ffield
     * @return {?}
     */
    BasicTableComponent.prototype.getShownText = /**
     * @param {?} obj
     * @param {?} ffield
     * @return {?}
     */
    function (obj, ffield) {
        if (obj[ffield.fieldPath] == null) {
            return "";
        }
        if (ffield.dataType == DataType.String) {
            return obj[ffield.fieldPath] || "";
        }
        else if (ffield.dataType == DataType.Decimal) {
            /** @type {?} */
            var dec = parseFloat(String(obj[ffield.fieldPath])).toFixed(ffield.scale).toString();
            return dec || "";
        }
        else if (ffield.dataType == DataType.DateTime) {
            /** @type {?} */
            var date = BpmnModelJsonHelper.DateTimeFromString(obj[ffield.fieldPath]);
            if (ffield.fieldType == "DateTime") {
                return this.dateFormat(date, "yyyy-MM-dd HH:mm:ss.SSS");
            }
            else if (ffield.fieldType == "Date") {
                return this.dateFormat(date, "yyyy-MM-dd");
            }
            else {
                return this.dateFormat(date, "yyyy-MM-dd");
            }
        }
        else {
            return obj[ffield.fieldPath] || "";
        }
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    BasicTableComponent.prototype.isObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return typeof (obj) == "object";
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    BasicTableComponent.prototype.isArray = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return Array.isArray(obj);
    };
    /**
     * @private
     * @param {?} date
     * @param {?} fmt
     * @return {?}
     */
    BasicTableComponent.prototype.dateFormat = /**
     * @private
     * @param {?} date
     * @param {?} fmt
     * @return {?}
     */
    function (date, fmt) {
        /** @type {?} */
        var ret;
        /** @type {?} */
        var opt = {
            "y+": date.getUTCFullYear().toString(),
            // 年
            "M+": (date.getUTCMonth() + 1).toString(),
            // 月
            "d+": date.getUTCDate().toString(),
            // 日
            "H+": date.getUTCHours().toString(),
            // 时
            "m+": date.getUTCMinutes().toString(),
            // 分
            "s+": date.getUTCSeconds().toString(),
            // 秒
            "S+": date.getUTCMilliseconds().toString(),
        };
        for (var k in opt) {
            ret = new RegExp("(" + k + ")").exec(fmt);
            if (ret) {
                if (!String.prototype.padStart) {
                    fmt = fmt.replace(ret[1], (ret[1].length == 1) ? (opt[k]) : (this.myPadStart(opt[k], ret[1].length, "0")));
                }
                else {
                    fmt = fmt.replace(ret[1], (ret[1].length == 1) ? (opt[k]) : (opt[k].padStart(ret[1].length, "0")));
                }
            }
        }
        return fmt;
    };
    /**
     * @private
     * @param {?} src
     * @param {?} targetLength
     * @param {?} padString
     * @return {?}
     */
    BasicTableComponent.prototype.myPadStart = /**
     * @private
     * @param {?} src
     * @param {?} targetLength
     * @param {?} padString
     * @return {?}
     */
    function (src, targetLength, padString) {
        targetLength = targetLength >> 0; //floor if number or convert non-number to 0;
        padString = String(typeof padString !== 'undefined' ? padString : ' ');
        if (src.length > targetLength) {
            return String(src);
        }
        else {
            targetLength = targetLength - src.length;
            if (targetLength > padString.length) {
                padString += padString.repeat(targetLength / padString.length); //append to original to ensure we are longer than needed
            }
            return padString.slice(0, targetLength) + String(src);
        }
    };
    BasicTableComponent.decorators = [
        { type: Component, args: [{
                    selector: "app-basic-table",
                    template: "<table class=\"table table-striped table-hover text-nowrap\" [ngStyle]=\"{'margin-left': isMain ? null : '24px'}\"\r\n    style=\"min-width: 100%; width: auto;\" *ngIf=\"ffields && ffields.length > 0 && frows && frows.length > 0\">\r\n    <thead class=\"thead-light\">\r\n        <tr>\r\n            <th style=\"width: 40px;\"><span></span></th>\r\n            <th *ngFor=\"let ffield of ffields\">\r\n                <span>{{ffield.captionPath}}</span>\r\n            </th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <ng-container *ngFor=\"let frow of frows;let rowIdx = index;\">\r\n            <tr #tr>\r\n                <td>\r\n                    <span *ngIf=\"frow.hasChildren\" style=\"cursor:pointer;\" (click)=\"clickHandler(frow, $event)\"\r\n                        [ngClass]=\"{'k-icon': true, 'k-i-plus-outline': !frow.expanded, 'k-i-minus-outline': frow.expanded}\"></span>\r\n                </td>\r\n                <ng-container *ngFor=\"let ffield of ffields\">\r\n                    <td>\r\n                        <span>{{getShownText(frow.data, ffield)}}</span>\r\n                        <span *ngIf=\"ffield.showMore\" class=\"f-icon f-icon-more\"></span>\r\n                    </td>\r\n                </ng-container>\r\n            </tr>\r\n            <tr *ngIf=\"frow.expanded&&frow.hasChildren\">\r\n                <td [attr.colspan]=\"tr.cells.length\">\r\n                    <ng-container appChildRowTable [parentRow]=\"rows[rowIdx]\" [parentSchemaTable]=\"billSchemaTable\"\r\n                        [parentDataTable]=\"billDataTable\" [billInfo]=\"billInfo\" [expanded]=\"frow.expanded\"\r\n                        [colspan]=\"tr.cells.length\">\r\n                    </ng-container>\r\n                </td>\r\n            </tr>\r\n        </ng-container>\r\n    </tbody>\r\n    <tfoot>\r\n    </tfoot>\r\n</table>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: ["./basic-table.component.css"]
                }] }
    ];
    /** @nocollapse */
    BasicTableComponent.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: Injector },
        { type: ComponentFactoryResolver },
        { type: ChangeDetectorRef }
    ]; };
    BasicTableComponent.propDecorators = {
        childTrTable: [{ type: ViewChild, args: ["childTrTable",] }],
        childTrTableVCR: [{ type: ViewChild, args: ["childTrTable", { read: ViewContainerRef },] }]
    };
    return BasicTableComponent;
}());
export { BasicTableComponent };
if (false) {
    /** @type {?} */
    BasicTableComponent.prototype.billInfo;
    /** @type {?} */
    BasicTableComponent.prototype.isMain;
    /** @type {?} */
    BasicTableComponent.prototype.billSchemaTable;
    /** @type {?} */
    BasicTableComponent.prototype.billDataTable;
    /** @type {?} */
    BasicTableComponent.prototype.fields;
    /** @type {?} */
    BasicTableComponent.prototype.rows;
    /** @type {?} */
    BasicTableComponent.prototype.ffields;
    /** @type {?} */
    BasicTableComponent.prototype.frows;
    /** @type {?} */
    BasicTableComponent.prototype.childTrTable;
    /** @type {?} */
    BasicTableComponent.prototype.childTrTableVCR;
    /** @type {?} */
    BasicTableComponent.prototype.viewContainerRef;
    /** @type {?} */
    BasicTableComponent.prototype.inj;
    /** @type {?} */
    BasicTableComponent.prototype.cfr;
    /** @type {?} */
    BasicTableComponent.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,