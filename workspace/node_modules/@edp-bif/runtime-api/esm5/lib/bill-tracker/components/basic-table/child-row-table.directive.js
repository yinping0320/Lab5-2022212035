/**
 * @fileoverview added by tsickle
 * Generated from: lib/bill-tracker/components/basic-table/child-row-table.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, Input, ViewContainerRef, ComponentFactoryResolver, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';
import { BasicTableComponent } from './basic-table.component';
import { BillDataRow, BillDataTable, BillSchemaTable } from '@edp-aif/common-api';
import { BillInfo } from '../../../entity/tracking/BillInfo';
var ChildRowTableDirective = /** @class */ (function () {
    function ChildRowTableDirective(cfr, vcRef, cdr) {
        this.cfr = cfr;
        this.vcRef = vcRef;
        this.cdr = cdr;
        this.hasChildren = new EventEmitter();
    }
    Object.defineProperty(ChildRowTableDirective.prototype, "expanded", {
        get: /**
         * @return {?}
         */
        function () {
            return this._expanded;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._expanded = val;
            if (val) {
                this.showChildTable();
            }
            else {
                this.clearChildTable();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ChildRowTableDirective.prototype.showChildTable = /**
     * @return {?}
     */
    function () {
        var e_1, _a;
        if (this.parentRow == null) {
            return;
        }
        this.clearChildTable();
        /** @type {?} */
        var cmpF = this.cfr.resolveComponentFactory(BasicTableComponent);
        try {
            for (var _b = tslib_1.__values(this.parentRow.GetChildTableList()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var childTable = _c.value;
                /** @type {?} */
                var cmpR = this.vcRef.createComponent(cmpF);
                cmpR.instance.billInfo = this.billInfo;
                cmpR.instance.isMain = false;
                cmpR.instance.showTable(this.parentSchemaTable.GetChildTableMap()[childTable.tableName], childTable);
                this.vcRef.insert(cmpR.hostView);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.cdr.markForCheck();
    };
    /**
     * @return {?}
     */
    ChildRowTableDirective.prototype.clearChildTable = /**
     * @return {?}
     */
    function () {
        this.vcRef.clear();
    };
    ChildRowTableDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[appChildRowTable]'
                },] }
    ];
    /** @nocollapse */
    ChildRowTableDirective.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: ViewContainerRef },
        { type: ChangeDetectorRef }
    ]; };
    ChildRowTableDirective.propDecorators = {
        billInfo: [{ type: Input, args: ["billInfo",] }],
        colspan: [{ type: Input, args: ["colspan",] }],
        parentRow: [{ type: Input, args: ["parentRow",] }],
        parentSchemaTable: [{ type: Input, args: ["parentSchemaTable",] }],
        parentDataTable: [{ type: Input, args: ["parentDataTable",] }],
        expanded: [{ type: Input, args: ["expanded",] }],
        hasChildren: [{ type: Output, args: ["hasChildren",] }]
    };
    return ChildRowTableDirective;
}());
export { ChildRowTableDirective };
if (false) {
    /** @type {?} */
    ChildRowTableDirective.prototype.billInfo;
    /** @type {?} */
    ChildRowTableDirective.prototype.colspan;
    /** @type {?} */
    ChildRowTableDirective.prototype.parentRow;
    /** @type {?} */
    ChildRowTableDirective.prototype.parentSchemaTable;
    /** @type {?} */
    ChildRowTableDirective.prototype.parentDataTable;
    /**
     * @type {?}
     * @private
     */
    ChildRowTableDirective.prototype._expanded;
    /** @type {?} */
    ChildRowTableDirective.prototype.hasChildren;
    /**
     * @type {?}
     * @private
     */
    ChildRowTableDirective.prototype.cfr;
    /** @type {?} */
    ChildRowTableDirective.prototype.vcRef;
    /** @type {?} */
    ChildRowTableDirective.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hpbGQtcm93LXRhYmxlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlZHAtYmlmL3J1bnRpbWUtYXBpLyIsInNvdXJjZXMiOlsibGliL2JpbGwtdHJhY2tlci9jb21wb25lbnRzL2Jhc2ljLXRhYmxlL2NoaWxkLXJvdy10YWJsZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsZ0JBQWdCLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN0SSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsV0FBVyxFQUFFLGFBQWEsRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNsRixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFFN0Q7SUFxQ0UsZ0NBQ1UsR0FBNkIsRUFDOUIsS0FBdUIsRUFDdkIsR0FBc0I7UUFGckIsUUFBRyxHQUFILEdBQUcsQ0FBMEI7UUFDOUIsVUFBSyxHQUFMLEtBQUssQ0FBa0I7UUFDdkIsUUFBRyxHQUFILEdBQUcsQ0FBbUI7UUFML0IsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBVyxDQUFDO0lBTXRDLENBQUM7SUFyQkwsc0JBQ0ksNENBQVE7Ozs7UUFTWjtZQUNFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUN4QixDQUFDOzs7OztRQVpELFVBQ2EsR0FBWTtZQUN2QixJQUFJLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQztZQUNyQixJQUFJLEdBQUcsRUFBRTtnQkFDUCxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7YUFDdkI7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO2FBQ3hCO1FBQ0gsQ0FBQzs7O09BQUE7Ozs7SUFlRCwrQ0FBYzs7O0lBQWQ7O1FBQ0UsSUFBSSxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksRUFBRTtZQUMxQixPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7O1lBQ2pCLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLG1CQUFtQixDQUFDOztZQUVsRSxLQUF1QixJQUFBLEtBQUEsaUJBQUEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFBLGdCQUFBLDRCQUFFO2dCQUF0RCxJQUFJLFVBQVUsV0FBQTs7b0JBQ1gsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQztnQkFDN0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztnQkFDdkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO2dCQUM3QixJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUM7Z0JBQ3JHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUNsQzs7Ozs7Ozs7O1FBRUQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUMxQixDQUFDOzs7O0lBRUQsZ0RBQWU7OztJQUFmO1FBQ0UsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNyQixDQUFDOztnQkEvREYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxvQkFBb0I7aUJBQy9COzs7O2dCQVA0Qyx3QkFBd0I7Z0JBQTFDLGdCQUFnQjtnQkFBa0QsaUJBQWlCOzs7MkJBUzNHLEtBQUssU0FBQyxVQUFVOzBCQUdoQixLQUFLLFNBQUMsU0FBUzs0QkFHZixLQUFLLFNBQUMsV0FBVztvQ0FHakIsS0FBSyxTQUFDLG1CQUFtQjtrQ0FHekIsS0FBSyxTQUFDLGlCQUFpQjsyQkFJdkIsS0FBSyxTQUFDLFVBQVU7OEJBY2hCLE1BQU0sU0FBQyxhQUFhOztJQThCdkIsNkJBQUM7Q0FBQSxBQWhFRCxJQWdFQztTQTdEWSxzQkFBc0I7OztJQUNqQywwQ0FDbUI7O0lBRW5CLHlDQUNnQjs7SUFFaEIsMkNBQ3VCOztJQUV2QixtREFDbUM7O0lBRW5DLGlEQUMrQjs7Ozs7SUFFL0IsMkNBQTJCOztJQWUzQiw2Q0FDMEM7Ozs7O0lBR3hDLHFDQUFxQzs7SUFDckMsdUNBQThCOztJQUM5QixxQ0FBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBWaWV3Q29udGFpbmVyUmVmLCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBCYXNpY1RhYmxlQ29tcG9uZW50IH0gZnJvbSAnLi9iYXNpYy10YWJsZS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBCaWxsRGF0YVJvdywgQmlsbERhdGFUYWJsZSwgQmlsbFNjaGVtYVRhYmxlIH0gZnJvbSAnQGVkcC1haWYvY29tbW9uLWFwaSc7XHJcbmltcG9ydCB7IEJpbGxJbmZvIH0gZnJvbSAnLi4vLi4vLi4vZW50aXR5L3RyYWNraW5nL0JpbGxJbmZvJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2FwcENoaWxkUm93VGFibGVdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgQ2hpbGRSb3dUYWJsZURpcmVjdGl2ZSB7XHJcbiAgQElucHV0KFwiYmlsbEluZm9cIilcclxuICBiaWxsSW5mbzogQmlsbEluZm87XHJcblxyXG4gIEBJbnB1dChcImNvbHNwYW5cIilcclxuICBjb2xzcGFuOiBudW1iZXI7XHJcblxyXG4gIEBJbnB1dChcInBhcmVudFJvd1wiKVxyXG4gIHBhcmVudFJvdzogQmlsbERhdGFSb3c7XHJcblxyXG4gIEBJbnB1dChcInBhcmVudFNjaGVtYVRhYmxlXCIpXHJcbiAgcGFyZW50U2NoZW1hVGFibGU6IEJpbGxTY2hlbWFUYWJsZTtcclxuXHJcbiAgQElucHV0KFwicGFyZW50RGF0YVRhYmxlXCIpXHJcbiAgcGFyZW50RGF0YVRhYmxlOiBCaWxsRGF0YVRhYmxlO1xyXG5cclxuICBwcml2YXRlIF9leHBhbmRlZDogYm9vbGVhbjtcclxuICBASW5wdXQoXCJleHBhbmRlZFwiKVxyXG4gIHNldCBleHBhbmRlZCh2YWw6IGJvb2xlYW4pIHtcclxuICAgIHRoaXMuX2V4cGFuZGVkID0gdmFsO1xyXG4gICAgaWYgKHZhbCkge1xyXG4gICAgICB0aGlzLnNob3dDaGlsZFRhYmxlKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmNsZWFyQ2hpbGRUYWJsZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0IGV4cGFuZGVkKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2V4cGFuZGVkO1xyXG4gIH1cclxuXHJcbiAgQE91dHB1dChcImhhc0NoaWxkcmVuXCIpXHJcbiAgaGFzQ2hpbGRyZW4gPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBjZnI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcclxuICAgIHB1YmxpYyB2Y1JlZjogVmlld0NvbnRhaW5lclJlZixcclxuICAgIHB1YmxpYyBjZHI6IENoYW5nZURldGVjdG9yUmVmLFxyXG4gICkgeyB9XHJcblxyXG4gIHNob3dDaGlsZFRhYmxlKCkge1xyXG4gICAgaWYgKHRoaXMucGFyZW50Um93ID09IG51bGwpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5jbGVhckNoaWxkVGFibGUoKTtcclxuICAgIGNvbnN0IGNtcEYgPSB0aGlzLmNmci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShCYXNpY1RhYmxlQ29tcG9uZW50KTtcclxuXHJcbiAgICBmb3IgKGxldCBjaGlsZFRhYmxlIG9mIHRoaXMucGFyZW50Um93LkdldENoaWxkVGFibGVMaXN0KCkpIHtcclxuICAgICAgY29uc3QgY21wUiA9IHRoaXMudmNSZWYuY3JlYXRlQ29tcG9uZW50KGNtcEYpO1xyXG4gICAgICBjbXBSLmluc3RhbmNlLmJpbGxJbmZvID0gdGhpcy5iaWxsSW5mbztcclxuICAgICAgY21wUi5pbnN0YW5jZS5pc01haW4gPSBmYWxzZTtcclxuICAgICAgY21wUi5pbnN0YW5jZS5zaG93VGFibGUodGhpcy5wYXJlbnRTY2hlbWFUYWJsZS5HZXRDaGlsZFRhYmxlTWFwKClbY2hpbGRUYWJsZS50YWJsZU5hbWVdLCBjaGlsZFRhYmxlKTtcclxuICAgICAgdGhpcy52Y1JlZi5pbnNlcnQoY21wUi5ob3N0Vmlldyk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XHJcbiAgfVxyXG5cclxuICBjbGVhckNoaWxkVGFibGUoKSB7XHJcbiAgICB0aGlzLnZjUmVmLmNsZWFyKCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==