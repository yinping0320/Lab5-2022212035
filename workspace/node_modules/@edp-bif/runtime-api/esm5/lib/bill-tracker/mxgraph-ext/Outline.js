/**
 * @fileoverview added by tsickle
 * Generated from: lib/bill-tracker/mxgraph-ext/Outline.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { mxConstants, mxGraph, mxOutline } from "../../ref/mxgraph";
import { Styles } from "./Styles";
var Outline = /** @class */ (function (_super) {
    tslib_1.__extends(Outline, _super);
    function Outline(source, container) {
        return _super.call(this, source, container) || this;
    }
    /**
     * @param {?} container
     * @return {?}
     */
    Outline.prototype.createGraph = /**
     * @param {?} container
     * @return {?}
     */
    function (container) {
        /** @type {?} */
        var graph = new mxGraph(container, this.source.getModel(), this.graphRenderHint);
        graph.foldingEnabled = false;
        graph.autoScroll = false;
        // 深拷贝并扩展source的stylesheet
        this.extendStyleSheets(graph, this.source);
        return graph;
    };
    /**
     * 深拷贝并扩展source的stylesheet
     * 默认设定样式节点无填充色，在缩略图中添加填充色
     */
    /**
     * 深拷贝并扩展source的stylesheet
     * 默认设定样式节点无填充色，在缩略图中添加填充色
     * @param {?} graph
     * @param {?} source
     * @return {?}
     */
    Outline.prototype.extendStyleSheets = /**
     * 深拷贝并扩展source的stylesheet
     * 默认设定样式节点无填充色，在缩略图中添加填充色
     * @param {?} graph
     * @param {?} source
     * @return {?}
     */
    function (graph, source) {
        /** @type {?} */
        var style = Object.assign({}, source.getStylesheet().getCellStyle(Styles.STYLE_BILL_NODE_NAME, source.getStylesheet().getDefaultVertexStyle()));
        style[mxConstants.STYLE_FILLCOLOR] = '#2A87FF';
        graph.getStylesheet().putCellStyle(Styles.STYLE_BILL_NODE_NAME, style);
        style = Object.assign({}, source.getStylesheet().getCellStyle(Styles.STYLE_BILL_NODE_ENTRY_NAME, source.getStylesheet().getDefaultVertexStyle()));
        style[mxConstants.STYLE_FILLCOLOR] = '#F5A144';
        graph.getStylesheet().putCellStyle(Styles.STYLE_BILL_NODE_ENTRY_NAME, style);
        style = Object.assign({}, source.getStylesheet().getCellStyle(Styles.STYLE_BILL_ASSOCIATION_NAME, source.getStylesheet().getDefaultEdgeStyle()));
        graph.getStylesheet().putCellStyle(Styles.STYLE_BILL_ASSOCIATION_NAME, style);
    };
    return Outline;
}(mxOutline));
export { Outline };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT3V0bGluZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlZHAtYmlmL3J1bnRpbWUtYXBpLyIsInNvdXJjZXMiOlsibGliL2JpbGwtdHJhY2tlci9teGdyYXBoLWV4dC9PdXRsaW5lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBYSxNQUFNLG1CQUFtQixDQUFDO0FBQy9FLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFbEM7SUFBNkIsbUNBQVM7SUFDbEMsaUJBQVksTUFBeUIsRUFBRSxTQUF1QjtlQUMxRCxrQkFBTSxNQUFNLEVBQUUsU0FBUyxDQUFDO0lBQzVCLENBQUM7Ozs7O0lBRUQsNkJBQVc7Ozs7SUFBWCxVQUFZLFNBQVM7O1lBQ1gsS0FBSyxHQUFHLElBQUksT0FBTyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUM7UUFDbEYsS0FBSyxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7UUFDN0IsS0FBSyxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFFekIsMEJBQTBCO1FBQzFCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzNDLE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFFRDs7O09BR0c7Ozs7Ozs7O0lBQ0gsbUNBQWlCOzs7Ozs7O0lBQWpCLFVBQWtCLEtBQXdCLEVBQUUsTUFBeUI7O1lBQzdELEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsYUFBYSxFQUFFLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxvQkFBb0IsRUFBRSxNQUFNLENBQUMsYUFBYSxFQUFFLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxDQUFDO1FBQy9JLEtBQUssQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLEdBQUcsU0FBUyxDQUFDO1FBQy9DLEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLG9CQUFvQixFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRXZFLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsYUFBYSxFQUFFLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQywwQkFBMEIsRUFBRSxNQUFNLENBQUMsYUFBYSxFQUFFLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDbEosS0FBSyxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsR0FBRyxTQUFTLENBQUM7UUFDL0MsS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsMEJBQTBCLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFN0UsS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLDJCQUEyQixFQUFFLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNqSixLQUFLLENBQUMsYUFBYSxFQUFFLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQywyQkFBMkIsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNsRixDQUFDO0lBQ0wsY0FBQztBQUFELENBQUMsQUEvQkQsQ0FBNkIsU0FBUyxHQStCckMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBteENvbnN0YW50cywgbXhHcmFwaCwgbXhPdXRsaW5lLCBNeEdyYXBoTlMgfSBmcm9tIFwiLi4vLi4vcmVmL214Z3JhcGhcIjtcclxuaW1wb3J0IHsgU3R5bGVzIH0gZnJvbSBcIi4vU3R5bGVzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgT3V0bGluZSBleHRlbmRzIG14T3V0bGluZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihzb3VyY2U6IE14R3JhcGhOUy5teEdyYXBoLCBjb250YWluZXI/OiBIVE1MRWxlbWVudCkge1xyXG4gICAgICAgIHN1cGVyKHNvdXJjZSwgY29udGFpbmVyKTtcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVHcmFwaChjb250YWluZXIpIHtcclxuICAgICAgICBjb25zdCBncmFwaCA9IG5ldyBteEdyYXBoKGNvbnRhaW5lciwgdGhpcy5zb3VyY2UuZ2V0TW9kZWwoKSwgdGhpcy5ncmFwaFJlbmRlckhpbnQpO1xyXG4gICAgICAgIGdyYXBoLmZvbGRpbmdFbmFibGVkID0gZmFsc2U7XHJcbiAgICAgICAgZ3JhcGguYXV0b1Njcm9sbCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAvLyDmt7Hmi7fotJ3lubbmianlsZVzb3VyY2XnmoRzdHlsZXNoZWV0XHJcbiAgICAgICAgdGhpcy5leHRlbmRTdHlsZVNoZWV0cyhncmFwaCwgdGhpcy5zb3VyY2UpO1xyXG4gICAgICAgIHJldHVybiBncmFwaDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOa3seaLt+i0neW5tuaJqeWxlXNvdXJjZeeahHN0eWxlc2hlZXRcclxuICAgICAqIOm7mOiupOiuvuWumuagt+W8j+iKgueCueaXoOWhq+WFheiJsu+8jOWcqOe8qeeVpeWbvuS4rea3u+WKoOWhq+WFheiJslxyXG4gICAgICovXHJcbiAgICBleHRlbmRTdHlsZVNoZWV0cyhncmFwaDogTXhHcmFwaE5TLm14R3JhcGgsIHNvdXJjZTogTXhHcmFwaE5TLm14R3JhcGgpIHtcclxuICAgICAgICBsZXQgc3R5bGUgPSBPYmplY3QuYXNzaWduKHt9LCBzb3VyY2UuZ2V0U3R5bGVzaGVldCgpLmdldENlbGxTdHlsZShTdHlsZXMuU1RZTEVfQklMTF9OT0RFX05BTUUsIHNvdXJjZS5nZXRTdHlsZXNoZWV0KCkuZ2V0RGVmYXVsdFZlcnRleFN0eWxlKCkpKTtcclxuICAgICAgICBzdHlsZVtteENvbnN0YW50cy5TVFlMRV9GSUxMQ09MT1JdID0gJyMyQTg3RkYnO1xyXG4gICAgICAgIGdyYXBoLmdldFN0eWxlc2hlZXQoKS5wdXRDZWxsU3R5bGUoU3R5bGVzLlNUWUxFX0JJTExfTk9ERV9OQU1FLCBzdHlsZSk7XHJcblxyXG4gICAgICAgIHN0eWxlID0gT2JqZWN0LmFzc2lnbih7fSwgc291cmNlLmdldFN0eWxlc2hlZXQoKS5nZXRDZWxsU3R5bGUoU3R5bGVzLlNUWUxFX0JJTExfTk9ERV9FTlRSWV9OQU1FLCBzb3VyY2UuZ2V0U3R5bGVzaGVldCgpLmdldERlZmF1bHRWZXJ0ZXhTdHlsZSgpKSk7XHJcbiAgICAgICAgc3R5bGVbbXhDb25zdGFudHMuU1RZTEVfRklMTENPTE9SXSA9ICcjRjVBMTQ0JztcclxuICAgICAgICBncmFwaC5nZXRTdHlsZXNoZWV0KCkucHV0Q2VsbFN0eWxlKFN0eWxlcy5TVFlMRV9CSUxMX05PREVfRU5UUllfTkFNRSwgc3R5bGUpO1xyXG5cclxuICAgICAgICBzdHlsZSA9IE9iamVjdC5hc3NpZ24oe30sIHNvdXJjZS5nZXRTdHlsZXNoZWV0KCkuZ2V0Q2VsbFN0eWxlKFN0eWxlcy5TVFlMRV9CSUxMX0FTU09DSUFUSU9OX05BTUUsIHNvdXJjZS5nZXRTdHlsZXNoZWV0KCkuZ2V0RGVmYXVsdEVkZ2VTdHlsZSgpKSk7XHJcbiAgICAgICAgZ3JhcGguZ2V0U3R5bGVzaGVldCgpLnB1dENlbGxTdHlsZShTdHlsZXMuU1RZTEVfQklMTF9BU1NPQ0lBVElPTl9OQU1FLCBzdHlsZSk7XHJcbiAgICB9XHJcbn0iXX0=