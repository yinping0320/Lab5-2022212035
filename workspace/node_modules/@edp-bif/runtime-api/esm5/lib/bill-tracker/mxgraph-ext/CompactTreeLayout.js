/**
 * @fileoverview added by tsickle
 * Generated from: lib/bill-tracker/mxgraph-ext/CompactTreeLayout.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { mxCompactTreeLayout, mxCellPath, mxDictionary } from '../../ref/mxgraph';
var CompactTreeLayout = /** @class */ (function (_super) {
    tslib_1.__extends(CompactTreeLayout, _super);
    function CompactTreeLayout(graph, horizontal, invert) {
        var _this = _super.call(this, graph, horizontal, invert) || this;
        _this.useBoundingBox = false;
        return _this;
    }
    /**
     * @param {?} cell
     * @param {?} parent
     * @return {?}
     */
    CompactTreeLayout.prototype.dfs = /**
     * @param {?} cell
     * @param {?} parent
     * @return {?}
     */
    function (cell, parent) {
        /** @type {?} */
        var id = mxCellPath.create(cell);
        /** @type {?} */
        var node = null;
        if (cell != null && this.visited[id] == null && !this.isVertexIgnored(cell)) {
            this.visited[id] = cell;
            node = this.createNode(cell);
            /** @type {?} */
            var model = this.graph.getModel();
            /** @type {?} */
            var prev = null;
            /** @type {?} */
            var out = this.graph.getEdges(cell, parent, this.invert, !this.invert, false, true);
            /** @type {?} */
            var view = this.graph.getView();
            if (this.sortEdges) {
                this.sortOutgoingEdges(cell, out);
            }
            for (var i = 0; i < out.length; i++) {
                /** @type {?} */
                var edge = out[i];
                if (!this.isEdgeIgnored(edge)) {
                    // Resets the points on the traversed edge
                    if (this.resetEdges) {
                        this.setEdgePoints(edge, null);
                    }
                    if (this.edgeRouting) {
                        this.setEdgeStyleEnabled(edge, false);
                        this.setEdgePoints(edge, null);
                    }
                    // Checks if terminal in same swimlane
                    /** @type {?} */
                    var state = view.getState(edge);
                    /** @type {?} */
                    var target = (state != null) ? state.getVisibleTerminal(this.invert) : view.getVisibleTerminal(edge, this.invert);
                    /** @type {?} */
                    var tmp = this.dfs(target, parent);
                    if (tmp != null && model.getGeometry(target) != null) {
                        if (prev == null) {
                            node.child = tmp;
                        }
                        else {
                            prev.next = tmp;
                        }
                        prev = tmp;
                    }
                }
            }
        }
        return node;
    };
    /**
     * @param {?} target
     * @param {?} edges
     * @return {?}
     */
    CompactTreeLayout.prototype.sortIngoingEdges = /**
     * @param {?} target
     * @param {?} edges
     * @return {?}
     */
    function (target, edges) {
        /** @type {?} */
        var lookup = new mxDictionary();
        edges.sort((/**
         * @param {?} e1
         * @param {?} e2
         * @return {?}
         */
        function (e1, e2) {
            /** @type {?} */
            var start1 = e1.getTerminal(e1.getTerminal(true) == target);
            // let end1 = e1.getTerminal(e1.getTerminal(true) == target);
            /** @type {?} */
            var p1 = lookup.get(start1);
            if (p1 == null) {
                p1 = mxCellPath.create(start1).split(mxCellPath.PATH_SEPARATOR);
                lookup.put(start1, p1);
            }
            /** @type {?} */
            var start2 = e2.getTerminal(e2.getTerminal(true) == target);
            /** @type {?} */
            var p2 = lookup.get(start2);
            if (p2 == null) {
                p2 = mxCellPath.create(start2).split(mxCellPath.PATH_SEPARATOR);
                lookup.put(start2, p2);
            }
            return mxCellPath.compare(p1, p2);
        }));
    };
    /**
     * @param {?} parent
     * @param {?} root
     * @return {?}
     */
    CompactTreeLayout.prototype.execute = /**
     * @param {?} parent
     * @param {?} root
     * @return {?}
     */
    function (parent, root) {
        this.parent = parent;
        /** @type {?} */
        var model = this.graph.getModel();
        if (root == null) {
            // Takes the parent as the root if it has outgoing edges
            if (this.graph.getEdges(parent, model.getParent(parent), this.invert, !this.invert, false).length > 0) {
                this.root = parent;
            }
            // Tries to find a suitable root in the parent's
            // children
            else {
                /** @type {?} */
                var roots = this.graph.findTreeRoots(parent, true, this.invert);
                if (roots.length > 0) {
                    for (var i = 0; i < roots.length; i++) {
                        if (!this.isVertexIgnored(roots[i]) &&
                            this.graph.getEdges(roots[i], null, this.invert, !this.invert, false).length > 0) {
                            this.root = roots[i];
                            break;
                        }
                    }
                }
            }
        }
        else {
            this.root = root;
        }
        if (this.root != null) {
            if (this.resizeParent) {
                this.parentsChanged = new Object();
            }
            else {
                this.parentsChanged = null;
            }
            //  Maintaining parent location
            this.parentX = null;
            this.parentY = null;
            if (parent != this.root && model.isVertex(parent) != null && this.maintainParentLocation) {
                /** @type {?} */
                var geo = this.graph.getCellGeometry(parent);
                if (geo != null) {
                    this.parentX = geo.x;
                    this.parentY = geo.y;
                }
            }
            model.beginUpdate();
            try {
                this.visited = {};
                this.node = this.dfs(this.root, parent);
                if (this.alignRanks) {
                    this.maxRankHeight = [];
                    this.findRankHeights(this.node, 0);
                    this.setCellHeights(this.node, 0);
                }
                if (this.node != null) {
                    this.layout(this.node);
                    /** @type {?} */
                    var x0 = this.graph.gridSize;
                    /** @type {?} */
                    var y0 = x0;
                    if (!this.moveTree) {
                        /** @type {?} */
                        var g = this.getVertexBounds(this.root);
                        if (g != null) {
                            x0 = g.x;
                            y0 = g.y;
                        }
                    }
                    /** @type {?} */
                    var bounds = null;
                    if (this.isHorizontal()) {
                        bounds = this.horizontalLayout(this.node, x0, y0);
                    }
                    else {
                        bounds = this.verticalLayout(this.node, null, x0, y0);
                    }
                    if (bounds != null) {
                        /** @type {?} */
                        var dx = 0;
                        /** @type {?} */
                        var dy = 0;
                        // if (bounds.x < 0) {
                        //     dx = Math.abs(x0 - bounds.x);
                        // }
                        // if (bounds.y < 0) {
                        //     dy = Math.abs(y0 - bounds.y);
                        // }
                        if (bounds.x > 0) {
                            dx = -1 * Math.abs(x0 - bounds.x);
                        }
                        if (bounds.y > 0) {
                            dy = -1 * Math.abs(y0 - bounds.y);
                        }
                        if (dx != 0 || dy != 0) {
                            this.moveNode(this.node, dx, dy);
                        }
                        if (this.resizeParent) {
                            this.adjustParents();
                        }
                        if (this.edgeRouting) {
                            // Iterate through all edges setting their positions
                            this.localEdgeProcessing(this.node);
                        }
                    }
                    // Maintaining parent location
                    if (this.parentX != null && this.parentY != null) {
                        /** @type {?} */
                        var geo = this.graph.getCellGeometry(parent);
                        if (geo != null) {
                            geo = geo.clone();
                            geo.x = this.parentX;
                            geo.y = this.parentY;
                            model.setGeometry(parent, geo);
                        }
                    }
                }
            }
            finally {
                model.endUpdate();
            }
        }
    };
    /**
     * @param {?} node
     * @param {?} x0
     * @param {?} y0
     * @param {?=} bounds
     * @return {?}
     */
    CompactTreeLayout.prototype.horizontalLayout = /**
     * @param {?} node
     * @param {?} x0
     * @param {?} y0
     * @param {?=} bounds
     * @return {?}
     */
    function (node, x0, y0, bounds) {
        node.x += x0 + node.offsetX;
        node.y += y0 + node.offsetY;
        bounds = this.apply(node, bounds);
        /** @type {?} */
        var child = node.child;
        if (child != null) {
            bounds = this.horizontalLayout(child, node.x, node.y, bounds);
            /** @type {?} */
            var siblingOffset = node.y + child.offsetY;
            /** @type {?} */
            var s = child.next;
            while (s != null) {
                bounds = this.horizontalLayout(s, node.x + child.offsetX, siblingOffset, bounds);
                siblingOffset += s.offsetY;
                s = s.next;
            }
        }
        return bounds;
    };
    return CompactTreeLayout;
}(mxCompactTreeLayout));
export { CompactTreeLayout };
if (false) {
    /** @type {?} */
    CompactTreeLayout.prototype.visited;
    /** @type {?} */
    CompactTreeLayout.prototype.graph;
    /** @type {?} */
    CompactTreeLayout.prototype.sortEdges;
    /** @type {?} */
    CompactTreeLayout.prototype.parent;
    /** @type {?} */
    CompactTreeLayout.prototype.parentsChanged;
    /** @type {?} */
    CompactTreeLayout.prototype.parentX;
    /** @type {?} */
    CompactTreeLayout.prototype.parentY;
    /** @type {?} */
    CompactTreeLayout.prototype.node;
    /** @type {?} */
    CompactTreeLayout.prototype.alignRanks;
    /** @type {?} */
    CompactTreeLayout.prototype.maxRankHeight;
    /** @type {?} */
    CompactTreeLayout.prototype.moveTree;
    /** @type {?} */
    CompactTreeLayout.prototype.nodeDistance;
    /** @type {?} */
    CompactTreeLayout.prototype.useBoundingBox;
}
//# sourceMappingURL=data:application/json;base64,