/**
 * @fileoverview added by tsickle
 * Generated from: lib/bill-tracker/mxgraph-ext/Graph.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { GraphView } from './GraphView';
import { BillNodeShape } from './shapes/BillNodeShape';
import { BillAssociationLine } from './shapes/BillAssociationLine';
import { mxCellRenderer, mxUtils, mxGraph, mxPoint, mxRectangle, mxGeometry, mxConstants, mxImage, mxPerimeter } from "../../ref/mxgraph";
import { BillCell } from './BillCell';
import { Base64 } from '../utils/Base64';
import { VertexHandler } from './VertexHandler';
import { Events } from './Events';
import { Styles } from './Styles';
mxCellRenderer.registerShape("billNodeShape", BillNodeShape);
mxCellRenderer.registerShape("billAssociationLine", BillAssociationLine);
var Graph = /** @class */ (function (_super) {
    tslib_1.__extends(Graph, _super);
    function Graph(container, model, renderHint, stylesheet) {
        var _this = _super.call(this, container, model, renderHint, stylesheet) || this;
        _this.background = '#ffffff';
        // this.newBTS = newBTS;
        _this.autoScroll = false;
        _this.autoExtend = true;
        _this.setCellsResizable(false);
        _this.setCellsEditable(false);
        _this.setTooltips(false);
        _this.setHtmlLabels(true);
        // 节点标签支持拖动
        _this.setVertexLabelsMovable(false);
        // 设置不可有悬空连线
        _this.setAllowDanglingEdges(false);
        // 定义内置样式
        _this.defineInnerStylesNewBTS();
        // 支持画布拖动
        _this.setPanning(true);
        _this.panningHandler.useLeftButtonForPanning = true;
        _this.container.style.cursor = 'grab';
        _this.scrollTileSize = new mxRectangle(0, 0, 400, 400);
        _this.addListener(Events.RESET_GRAPH_VIEW, _this.resetGraphView);
        return _this;
    }
    /**
     * @return {?}
     */
    Graph.prototype.createGraphView = /**
     * @return {?}
     */
    function () {
        return new GraphView(this);
    };
    /**
     * @param {?} state
     * @return {?}
     */
    Graph.prototype.createVertexHandler = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return new VertexHandler(state);
    };
    /**
     * @return {?}
     */
    Graph.prototype.getPagePadding = /**
     * @return {?}
     */
    function () {
        return new mxPoint(Math.max(0, Math.round(this.container.offsetWidth - 34)), Math.max(0, Math.round(this.container.offsetHeight - 34)));
    };
    /**
     * @return {?}
     */
    Graph.prototype.getPageSize = /**
     * @return {?}
     */
    function () {
        return (this.pageVisible) ? new mxRectangle(0, 0, this.pageFormat.width * this.pageScale, this.pageFormat.height * this.pageScale) : this.getScrollTileSize();
    };
    /**
     * @return {?}
     */
    Graph.prototype.getPageLayout = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var size = (this.pageVisible) ? this.getPageSize() : this.getScrollTileSize();
        /** @type {?} */
        var bounds = this.getGraphBounds();
        if (bounds.width == 0 || bounds.height == 0) {
            return new mxRectangle(0, 0, 1, 1);
        }
        else {
            // Computes untransformed graph bounds
            /** @type {?} */
            var x = Math.ceil(bounds.x / this.view.scale - this.view.translate.x);
            /** @type {?} */
            var y = Math.ceil(bounds.y / this.view.scale - this.view.translate.y);
            /** @type {?} */
            var w = Math.floor(bounds.width / this.view.scale);
            /** @type {?} */
            var h = Math.floor(bounds.height / this.view.scale);
            /** @type {?} */
            var x0 = Math.floor(x / size.width);
            /** @type {?} */
            var y0 = Math.floor(y / size.height);
            /** @type {?} */
            var w0 = Math.ceil((x + w) / size.width) - x0;
            /** @type {?} */
            var h0 = Math.ceil((y + h) / size.height) - y0;
            return new mxRectangle(x0, y0, w0, h0);
        }
    };
    /**
     * @return {?}
     */
    Graph.prototype.getScrollTileSize = /**
     * @return {?}
     */
    function () {
        if (this.scrollTileSize == null) {
            this.scrollTileSize = new mxRectangle(0, 0, 400, 600);
        }
        return this.scrollTileSize;
    };
    /**
     * @param {?} bounds
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    Graph.prototype.getPreferredPageSize = /**
     * @param {?} bounds
     * @param {?} width
     * @param {?} height
     * @return {?}
     */
    function (bounds, width, height) {
        //scrollTileSize有值后再调用重载实现
        /** @type {?} */
        var pages = this.getPageLayout();
        /** @type {?} */
        var size = this.getPageSize();
        return new mxRectangle(0, 0, pages.width * size.width, pages.height * size.height);
    };
    /**
     * @return {?}
     */
    Graph.prototype.sizeDidChange = /**
     * @return {?}
     */
    function () {
        if (this.container != null && mxUtils.hasScrollbars(this.container)) {
            /** @type {?} */
            var pages = this.getPageLayout();
            /** @type {?} */
            var pad = this.getPagePadding();
            /** @type {?} */
            var size = this.getPageSize();
            // Updates the minimum graph size
            /** @type {?} */
            var minw = Math.ceil(2 * pad.x / this.view.scale + pages.width * size.width);
            /** @type {?} */
            var minh = Math.ceil(2 * pad.y / this.view.scale + pages.height * size.height);
            /** @type {?} */
            var min = this.minimumGraphSize;
            // LATER: Fix flicker of scrollbar size in IE quirks mode
            // after delayed call in window.resize event handler
            if (min == null || min.width != minw || min.height != minh) {
                this.minimumGraphSize = new mxRectangle(0, 0, minw, minh);
            }
            // Updates auto-translate to include padding and graph size
            /** @type {?} */
            var dx = pad.x / this.view.scale - pages.x * size.width;
            /** @type {?} */
            var dy = pad.y / this.view.scale - pages.y * size.height;
            if (!this.autoTranslate && (this.view.translate.x != dx || this.view.translate.y != dy)) {
                this.autoTranslate = true;
                this.view.x0 = pages.x;
                this.view.y0 = pages.y;
                // NOTE: THIS INVOKES THIS METHOD AGAIN. UNFORTUNATELY THERE IS NO WAY AROUND THIS SINCE THE
                // BOUNDS ARE KNOWN AFTER THE VALIDATION AND SETTING THE TRANSLATE TRIGGERS A REVALIDATION.
                // SHOULD MOVE TRANSLATE/SCALE TO VIEW.
                /** @type {?} */
                var tx = this.view.translate.x;
                /** @type {?} */
                var ty = this.view.translate.y;
                this.view.setTranslate(dx, dy);
                this.container.scrollLeft += (dx - tx) * this.view.scale;
                this.container.scrollTop += (dy - ty) * this.view.scale;
                this.autoTranslate = false;
                return;
            }
            //super.sizeDidChange.apply(this, arguments);
            _super.prototype.sizeDidChange.call(this);
        }
    };
    /**
     * @return {?}
     */
    Graph.prototype.resetGraphView = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var bounds = this.getGraphBounds();
        /** @type {?} */
        var dataRegionHeight = 0;
        if (this.gridOptions.showEntryData) {
            if (typeof this.gridOptions.defaultHeight == "string") {
                dataRegionHeight = 0;
            }
            else {
                dataRegionHeight = this.gridOptions.defaultHeight;
            }
        }
        /** @type {?} */
        var s = Math.min(this.container.clientWidth / bounds.width, (this.container.clientHeight - dataRegionHeight - 20) / bounds.height);
        // 设定最大为1倍
        s = s >= 1 ? 1 : s;
        // 设定最小为0.6倍
        s = s <= 0.6 ? 0.6 : s;
        this.zoomTo(s, true);
        bounds = this.getGraphBounds();
        /** @type {?} */
        var width = Math.max(bounds.width, this.scrollTileSize.width * this.view.scale);
        /** @type {?} */
        var height = Math.max(bounds.height, this.scrollTileSize.height * this.view.scale);
        // this.container.scrollTop = Math.floor(Math.max(0, bounds.y - Math.max(20, (this.container.clientHeight - height) / 4)));
        // this.container.scrollLeft = Math.floor(Math.max(0, bounds.x - Math.max(0, (this.container.clientWidth - width) / 2)));
        this.container.scrollTop = Math.floor(Math.max(0, bounds.y - (this.container.clientHeight - bounds.height) / 2 + 79));
        this.container.scrollLeft = Math.floor(Math.max(0, bounds.x - (this.container.clientWidth - bounds.width) / 2));
    };
    /**
     * @param {?} parent
     * @param {?} id
     * @param {?} billDataInfo
     * @param {?} billInfo
     * @param {?} entry
     * @param {?} x
     * @param {?} y
     * @param {?} width
     * @param {?} height
     * @param {?=} style
     * @param {?=} relative
     * @return {?}
     */
    Graph.prototype.insertBillCell = /**
     * @param {?} parent
     * @param {?} id
     * @param {?} billDataInfo
     * @param {?} billInfo
     * @param {?} entry
     * @param {?} x
     * @param {?} y
     * @param {?} width
     * @param {?} height
     * @param {?=} style
     * @param {?=} relative
     * @return {?}
     */
    function (parent, id, billDataInfo, billInfo, entry, x, y, width, height, style, relative) {
        /** @type {?} */
        var billCell = this.createBillCell(parent, id, billDataInfo, billInfo, entry, x, y, width, height, style, relative);
        return (/** @type {?} */ (this.addCell(billCell, parent)));
    };
    /**
     * @param {?} parent
     * @param {?} id
     * @param {?} billDataInfo
     * @param {?} billInfo
     * @param {?} entry
     * @param {?} x
     * @param {?} y
     * @param {?} width
     * @param {?} height
     * @param {?=} style
     * @param {?=} relative
     * @return {?}
     */
    Graph.prototype.createBillCell = /**
     * @param {?} parent
     * @param {?} id
     * @param {?} billDataInfo
     * @param {?} billInfo
     * @param {?} entry
     * @param {?} x
     * @param {?} y
     * @param {?} width
     * @param {?} height
     * @param {?=} style
     * @param {?=} relative
     * @return {?}
     */
    function (parent, id, billDataInfo, billInfo, entry, x, y, width, height, style, relative) {
        /** @type {?} */
        var geometry = new mxGeometry(x, y, width, height);
        geometry.relative = (relative != null) ? relative : false;
        /** @type {?} */
        var billCell = new BillCell(billDataInfo, billInfo, entry, geometry, style);
        billCell.setId(id);
        billCell.setVertex(true);
        billCell.setConnectable(true);
        return billCell;
    };
    /**
     * @param {?} cell
     * @return {?}
     */
    Graph.prototype.getTooltipForCell = /**
     * @param {?} cell
     * @return {?}
     */
    function (cell) {
        if (cell instanceof BillCell) {
            return cell.buildHtmlTooltip();
        }
        return _super.prototype.getTooltipForCell.call(this, cell);
    };
    /**
     * @param {?} cell
     * @return {?}
     */
    Graph.prototype.getLabel = /**
     * @param {?} cell
     * @return {?}
     */
    function (cell) {
        if (cell instanceof BillCell) {
            // if (this.newBTS) {
            return _super.prototype.getLabel.call(this, cell);
            // } else {
            //     return cell.getCaption();
            // }
        }
        return _super.prototype.getLabel.call(this, cell);
    };
    /**
     * @param {?} cell
     * @return {?}
     */
    Graph.prototype.convertValueToString = /**
     * @param {?} cell
     * @return {?}
     */
    function (cell) {
        if (cell instanceof BillCell) {
            return cell.buildHtmlLabel(this);
        }
        else {
            return _super.prototype.convertValueToString.call(this, cell);
        }
    };
    /**
     * @private
     * @return {?}
     */
    Graph.prototype.defineInnerStylesNewBTS = /**
     * @private
     * @return {?}
     */
    function () {
        //定义单据节点样式
        /** @type {?} */
        var style = Object.assign({}, this.getStylesheet().getDefaultVertexStyle());
        style[mxConstants.STYLE_FILLCOLOR] = 'none';
        style[mxConstants.STYLE_STROKE_OPACITY] = '0';
        style[mxConstants.STYLE_STROKEWIDTH] = '1';
        style[mxConstants.STYLE_FONTCOLOR] = 'black';
        style[mxConstants.STYLE_FONTSIZE] = '12';
        style[mxConstants.STYLE_FONTSTYLE] = '1';
        style[mxConstants.STYLE_ROUNDED] = '1';
        style[mxConstants.STYLE_SPACING] = 8;
        style[mxConstants.STYLE_WHITE_SPACE] = 'wrap';
        // 图片拉伸
        style[mxConstants.STYLE_IMAGE_ASPECT] = '0';
        //节点标签显示于节点下方
        style[mxConstants.STYLE_PERIMETER] = mxPerimeter.RectanglePerimeter;
        style[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;
        style[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;
        this.getStylesheet().putCellStyle(Styles.STYLE_BILL_NODE_NAME, style);
        //定义开始查询节点样式
        style = Object.assign({}, style);
        this.getStylesheet().putCellStyle(Styles.STYLE_BILL_NODE_ENTRY_NAME, style);
        //定义单据关联连线样式
        style = Object.assign({}, this.getStylesheet().getDefaultEdgeStyle());
        style[mxConstants.STYLE_SHAPE] = mxConstants.SHAPE_CONNECTOR;
        style[mxConstants.STYLE_STROKECOLOR] = '#2A87FF';
        style[mxConstants.STYLE_ENDARROW] = mxConstants.ARROW_CLASSIC;
        style[mxConstants.STYLE_VERTICAL_ALIGN] = mxConstants.ALIGN_MIDDLE;
        style[mxConstants.STYLE_ALIGN] = mxConstants.ALIGN_CENTER;
        style[mxConstants.STYLE_EDGE] = mxConstants.EDGESTYLE_ELBOW;
        style[mxConstants.STYLE_ELBOW] = mxConstants.ELBOW_HORIZONTAL;
        style[mxConstants.STYLE_STROKEWIDTH] = 1.8;
        style[mxConstants.STYLE_DASHED] = 1;
        style[mxConstants.STYLE_OPACITY] = 80;
        this.getStylesheet().putCellStyle(Styles.STYLE_BILL_ASSOCIATION_NAME, style);
    };
    /**
     * @param {?} cell
     * @param {?} evt
     * @return {?}
     */
    Graph.prototype.selectCellForEvent = /**
     * @param {?} cell
     * @param {?} evt
     * @return {?}
     */
    function (cell, evt) {
        _super.prototype.selectCellForEvent.call(this, cell, evt);
    };
    /**
     * @return {?}
     */
    Graph.prototype.createCellRenderer = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var render = _super.prototype.createCellRenderer.call(this);
        // 重写label事件判断方法，解决点击节点操作按钮时如果出现loading则按钮消失的问题
        // note：此改动会使点击节点操作按钮时不触发节点选中事件
        // note: 此改动后，点击节点摘要超链接的监听器中主动触发选中事件
        /** @type {?} */
        var oldIsLabelEvent = render.isLabelEvent;
        render.isLabelEvent = (/**
         * @param {?} state
         * @param {?} evt
         * @return {?}
         */
        function (state, evt) {
            if (state.cell instanceof BillCell) {
                if (evt && evt.target
                    && ((/** @type {?} */ (evt.target))).classList
                    && ((/** @type {?} */ (evt.target))).classList.value
                    && (((/** @type {?} */ (evt.target))).classList.value.includes("bif-cell-node-title-link bif-cell-node-title-link-color")
                        || ((/** @type {?} */ (evt.target))).classList.value.includes("bif-cell-node-btn"))) {
                    return false;
                }
                else {
                    return oldIsLabelEvent.apply(render, [state, evt]);
                }
            }
            return oldIsLabelEvent.apply(render, [state, evt]);
        });
        return render;
    };
    /**
     * @param {?} w
     * @param {?} h
     * @param {?} data
     * @return {?}
     */
    Graph.createSvgImage = /**
     * @param {?} w
     * @param {?} h
     * @param {?} data
     * @return {?}
     */
    function (w, h, data) {
        /** @type {?} */
        var tmp = unescape(encodeURIComponent('<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">' +
            '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="' + w + 'px" height="' + h + 'px" ' +
            'version="1.1">' + data + '</svg>'));
        return new mxImage('data:image/svg+xml;base64,' + ((window.btoa) ? btoa(tmp) : Base64.encode(tmp, true)), w, h);
    };
    /**
     * @return {?}
     */
    Graph.prototype.destroy = /**
     * @return {?}
     */
    function () {
        _super.prototype.destroy.call(this);
        this.selectEventEmitter = null;
    };
    // newBTS: boolean = false;
    Graph.handleFill = '#29b6f2';
    return Graph;
}(mxGraph));
export { Graph };
if (false) {
    /** @type {?} */
    Graph.handleFill;
    /** @type {?} */
    Graph.prototype.selectEventEmitter;
    /** @type {?} */
    Graph.prototype.scrollTileSize;
    /** @type {?} */
    Graph.prototype.autoTranslate;
    /** @type {?} */
    Graph.prototype.view;
    /** @type {?} */
    Graph.prototype.background;
    /** @type {?} */
    Graph.prototype.graphOptions;
    /** @type {?} */
    Graph.prototype.gridOptions;
    /** @type {?} */
    Graph.prototype.localePipe;
    /** @type {?} */
    Graph.prototype.ngComp;
}
//# sourceMappingURL=data:application/json;base64,