/**
 * @fileoverview added by tsickle
 * Generated from: lib/bill-tracker/services/bill-tracker-internal-ui.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ComponentFactoryResolver, Inject, Injectable, Injector, LOCALE_ID } from "@angular/core";
import { JointQueryMode, JointQueryParameterType } from "@edp-bif/common-api";
import { MessagerService } from "@farris/ui-messager";
import { BsModalService } from "@farris/ui-modal";
import { AppType, FrameworkService } from "@gsp-sys/rtf-common";
import { BillTrackerConstant } from "../config/bill-tracker-constant";
import { BillTrackerLocalePipe } from "../pipe/bill-tracker-locale.pipe";
import { BillTrackerDataInfoService } from "./bill-tracker-data-info.service";
import { BillTrackerDataService } from "./bill-tracker-data.service";
import { LoadingService } from "@farris/ui-loading";
var BillTrackerInternalUiService = /** @class */ (function () {
    function BillTrackerInternalUiService(framework, messager, loading, localeId, dataService, dataInfoService, modalService, cfr, injector, localePipe) {
        this.framework = framework;
        this.messager = messager;
        this.loading = loading;
        this.dataService = dataService;
        this.dataInfoService = dataInfoService;
        this.modalService = modalService;
        this.cfr = cfr;
        this.injector = injector;
        this.localePipe = localePipe;
    }
    /**
     * @param {?} billInfo
     * @param {?} billDataInfo
     * @return {?}
     */
    BillTrackerInternalUiService.prototype.openBillDetail = /**
     * @param {?} billInfo
     * @param {?} billDataInfo
     * @return {?}
     */
    function (billInfo, billDataInfo) {
        var _this = this;
        /** @type {?} */
        var jointQueryMode = billInfo.jointQueryMode;
        /** @type {?} */
        var jointQueryParameters = JSON.parse(billInfo.jointQueryParameters);
        /** @type {?} */
        var id = billDataInfo.dataId;
        if (this.dataService.hasDynamicParams(jointQueryParameters)) {
            /** @type {?} */
            var args = this.dataService.buildGetJointQueryParametersArgs(jointQueryParameters, billInfo, billDataInfo);
            /** @type {?} */
            var l_1 = this.loading.show({ message: this.localePipe.transform("loading") });
            this.dataService.getJointQueryParameters(args).subscribe((/**
             * @param {?} results
             * @return {?}
             */
            function (results) {
                l_1.close();
                if (jointQueryMode == JointQueryMode.APP) {
                    _this.openMenu(jointQueryParameters, id, results);
                }
                else if (jointQueryMode == JointQueryMode.URL) {
                    _this.openUrl(jointQueryParameters, id, results);
                }
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                l_1.close();
                //todo 确定异常结构, 目前采用兼容取值方式
                _this.messager.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
                throw err;
            }));
        }
        else {
            if (jointQueryMode == JointQueryMode.APP) {
                this.openMenu(jointQueryParameters, id);
            }
            else if (jointQueryMode == JointQueryMode.URL) {
                this.openUrl(jointQueryParameters, id);
            }
        }
    };
    /**
     * @param {?} billInfo
     * @param {?} billDataInfo
     * @param {?} fieldsWithValue
     * @return {?}
     */
    BillTrackerInternalUiService.prototype.openBillDetailWithFields = /**
     * @param {?} billInfo
     * @param {?} billDataInfo
     * @param {?} fieldsWithValue
     * @return {?}
     */
    function (billInfo, billDataInfo, fieldsWithValue) {
        var _this = this;
        /** @type {?} */
        var id = billDataInfo.dataId;
        /** @type {?} */
        var jointQueryMode = billInfo.jointQueryMode;
        /** @type {?} */
        var jointQueryParameters = JSON.parse(billInfo.jointQueryParameters);
        if (this.dataService.hasDynamicParams(jointQueryParameters)) {
            /** @type {?} */
            var l_2 = this.loading.show({ message: this.localePipe.transform("loading") });
            /** @type {?} */
            var args = this.dataService.buildGetJointQueryParametersArgs(jointQueryParameters, billInfo, billDataInfo);
            this.dataService.getJointQueryParameters(args).subscribe((/**
             * @param {?} results
             * @return {?}
             */
            function (results) {
                l_2.close();
                if (jointQueryMode == JointQueryMode.APP) {
                    _this.openMenu(jointQueryParameters, id, results);
                }
                else if (jointQueryMode == JointQueryMode.URL) {
                    _this.openUrl(jointQueryParameters, id, results);
                }
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                l_2.close();
                //todo 确定异常结构, 目前采用兼容取值方式
                _this.messager.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
                throw err;
            }));
        }
        else {
            if (jointQueryMode == JointQueryMode.APP) {
                this.openMenu(jointQueryParameters, id);
            }
            else if (jointQueryMode == JointQueryMode.URL) {
                this.openUrl(jointQueryParameters, id);
            }
        }
    };
    /**
     * 直接打开菜单
     * @param jointQueryParameters
     * @param id
     */
    /**
     * 直接打开菜单
     * @param {?} jointQueryParameters
     * @param {?} id
     * @param {?=} jqpr
     * @return {?}
     */
    BillTrackerInternalUiService.prototype.openMenu = /**
     * 直接打开菜单
     * @param {?} jointQueryParameters
     * @param {?} id
     * @param {?=} jqpr
     * @return {?}
     */
    function (jointQueryParameters, id, jqpr) {
        /** @type {?} */
        var entityParams = {};
        entityParams["id"] = id;
        entityParams["action"] = "LoadAndView1";
        /** @type {?} */
        var map = new Map();
        map.set("id", id);
        map.set("action", "LoadAndView1");
        this.buildOpenMenuParams(jointQueryParameters, map, entityParams, jqpr);
        // 从entityParam取自定义tab名，然后删除此属性防止带入url
        /** @type {?} */
        var tabName = entityParams && entityParams[BillTrackerConstant.BILL_VIEWER_PARAM_CODE_CUSTOM_TAB_NAME];
        if (entityParams && entityParams[BillTrackerConstant.BILL_VIEWER_PARAM_CODE_CUSTOM_TAB_NAME]) {
            delete entityParams[BillTrackerConstant.BILL_VIEWER_PARAM_CODE_CUSTOM_TAB_NAME];
            map.delete(BillTrackerConstant.BILL_VIEWER_PARAM_CODE_CUSTOM_TAB_NAME);
        }
        /** @type {?} */
        var WEB_FORM_ROUTE_PARAMS = encodeURIComponent(JSON.stringify(entityParams));
        map.set("WEB_FORM_ROUTE_PARAMS", WEB_FORM_ROUTE_PARAMS);
        /** @type {?} */
        var opts = {
            appType: AppType.Menu,
            funcId: jointQueryParameters.funcId,
            appEntrance: null,
            appId: null,
            tabId: id,
            entityParams: entityParams,
            queryStringParams: map,
        };
        if (tabName) {
            // 页签名称超长时给出提醒并仅取前200个字符
            if (tabName.length > 200) {
                this.messager.warning(this.localePipe.transform("tabNameLengthIsTooLong"));
                tabName = tabName.substring(0, 200);
            }
            opts.tabName = tabName;
        }
        this.framework.openMenu(opts);
    };
    /**
     * 借助单据查看容器打开url
     * @param jointQueryParameters
     * @param id
     */
    /**
     * 借助单据查看容器打开url
     * @param {?} jointQueryParameters
     * @param {?} id
     * @param {?=} jqpr
     * @return {?}
     */
    BillTrackerInternalUiService.prototype.openUrl = /**
     * 借助单据查看容器打开url
     * @param {?} jointQueryParameters
     * @param {?} id
     * @param {?=} jqpr
     * @return {?}
     */
    function (jointQueryParameters, id, jqpr) {
        // console.log("open default container for url");
        var _this = this;
        // console.log("open default container for url");
        /** @type {?} */
        var url = this.appendQueryParam(jointQueryParameters.url, "id", id);
        url = this.appendQueryParam(url, "action", 'LoadAndView1');
        // 用于填充cvft，否则服务器端控制台报错
        /** @type {?} */
        var timestamp = new Date().getTime().toString();
        url = this.appendQueryParam(url, "cvft", timestamp);
        // 添加自定义参数
        if (Array.isArray(jointQueryParameters.params)) {
            jointQueryParameters.params.forEach((/**
             * @param {?} p
             * @return {?}
             */
            function (p) {
                /** @type {?} */
                var value = p.value;
                if (p.type == JointQueryParameterType.Field || p.type == JointQueryParameterType.Expression) {
                    /** @type {?} */
                    var r = jqpr.find((/**
                     * @param {?} it
                     * @return {?}
                     */
                    function (it) { return it.code == p.code; }));
                    value = r && r.value;
                }
                url = _this.appendQueryParam(url, p.code, value);
            }));
        }
        else {
            // 兼容key-value格式params
            Object.keys(jointQueryParameters.params).forEach((/**
             * @param {?} k
             * @return {?}
             */
            function (k) {
                url = _this.appendQueryParam(url, k, jointQueryParameters.params[k]);
            }));
        }
        /** @type {?} */
        var entityParams = jointQueryParameters.params || {};
        entityParams["id"] = id;
        entityParams["url"] = url;
        entityParams["action"] = "LoadAndView1";
        /** @type {?} */
        var map = new Map();
        map.set("url", url);
        map.set("id", id);
        map.set("action", "LoadAndView1");
        this.buildOpenMenuParams(jointQueryParameters, map, undefined, jqpr);
        /** @type {?} */
        var opts = {
            appType: AppType.Menu,
            funcId: BillTrackerConstant.BILL_VIEWER_FUNC_ID,
            appEntrance: null,
            appId: null,
            tabId: id,
            entityParams: entityParams,
            queryStringParams: map,
        };
        this.framework.openMenu(opts);
    };
    /**
     * @param {?} jointQueryParameters
     * @param {?} map
     * @param {?=} entityParams
     * @param {?=} jqpr
     * @return {?}
     */
    BillTrackerInternalUiService.prototype.buildOpenMenuParams = /**
     * @param {?} jointQueryParameters
     * @param {?} map
     * @param {?=} entityParams
     * @param {?=} jqpr
     * @return {?}
     */
    function (jointQueryParameters, map, entityParams, jqpr) {
        if (entityParams === void 0) { entityParams = {}; }
        // 添加自定义参数
        if (Array.isArray(jointQueryParameters.params)) {
            jointQueryParameters.params.forEach((/**
             * @param {?} p
             * @return {?}
             */
            function (p) {
                /** @type {?} */
                var value = p.value;
                if (p.type == JointQueryParameterType.Field || p.type == JointQueryParameterType.Expression) {
                    if (jqpr) {
                        /** @type {?} */
                        var r = jqpr.find((/**
                         * @param {?} it
                         * @return {?}
                         */
                        function (it) { return it.code == p.code; }));
                        value = r.value;
                    }
                }
                entityParams[p.code] = value;
                map.set(p.code, value);
            }));
        }
        else {
            // 兼容key-value格式params
            Object.keys(jointQueryParameters.params).forEach((/**
             * @param {?} k
             * @return {?}
             */
            function (k) {
                entityParams[k] = jointQueryParameters.params[k];
                map.set(k, jointQueryParameters.params[k]);
            }));
        }
    };
    /**
     * @param {?} url
     * @param {?} k
     * @param {?} v
     * @return {?}
     */
    BillTrackerInternalUiService.prototype.appendQueryParam = /**
     * @param {?} url
     * @param {?} k
     * @param {?} v
     * @return {?}
     */
    function (url, k, v) {
        /** @type {?} */
        var idx = url.indexOf('?');
        if (idx < 0) {
            url += '?';
        }
        idx = url.indexOf('?');
        if (url.indexOf(k, idx) > -1) {
            /** @type {?} */
            var re1 = eval('/(\\?)(' + k + '=)([^&]*)/gi');
            url = url.replace(re1, '?' + k + '=' + v);
            /** @type {?} */
            var re2 = eval('/(&)(' + k + '=)([^&]*)/gi');
            url = url.replace(re2, '&' + k + '=' + v);
        }
        else {
            /** @type {?} */
            var paraStr = k + '=' + v;
            if (idx < 0)
                url += '?';
            else if (idx >= 0 && idx != url.length - 1)
                url += '&';
            url = url + paraStr;
        }
        return url;
    };
    BillTrackerInternalUiService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BillTrackerInternalUiService.ctorParameters = function () { return [
        { type: FrameworkService },
        { type: MessagerService },
        { type: LoadingService },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: BillTrackerDataService },
        { type: BillTrackerDataInfoService },
        { type: BsModalService },
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: BillTrackerLocalePipe }
    ]; };
    return BillTrackerInternalUiService;
}());
export { BillTrackerInternalUiService };
if (false) {
    /** @type {?} */
    BillTrackerInternalUiService.prototype.framework;
    /** @type {?} */
    BillTrackerInternalUiService.prototype.messager;
    /** @type {?} */
    BillTrackerInternalUiService.prototype.loading;
    /** @type {?} */
    BillTrackerInternalUiService.prototype.dataService;
    /** @type {?} */
    BillTrackerInternalUiService.prototype.dataInfoService;
    /** @type {?} */
    BillTrackerInternalUiService.prototype.modalService;
    /** @type {?} */
    BillTrackerInternalUiService.prototype.cfr;
    /** @type {?} */
    BillTrackerInternalUiService.prototype.injector;
    /** @type {?} */
    BillTrackerInternalUiService.prototype.localePipe;
}
//# sourceMappingURL=data:application/json;base64,