/**
 * @fileoverview added by tsickle
 * Generated from: lib/webcmp/bif-bill-tracker.webcmp.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ComponentFactoryResolver, Inject, Injectable, Injector, LOCALE_ID, Optional, ReflectiveInjector } from '@angular/core';
import { BillTrackerUiService } from '../bill-tracker/services/bill-tracker-ui.service';
import { GetBillsInfoArgs } from '../entity/tracking/GetBillsInfoArgs';
import { BindingData, ViewModel, FrameContext } from '@farris/devkit';
import { canJSONParse } from '../utils/ObjectUtils';
import { MessagerService } from '@farris/ui-messager';
import { BillTrackerLocalePipe } from '../bill-tracker/pipe/bill-tracker-locale.pipe';
/**
 * 单据追踪web构件服务类
 */
var BifBillTrackerWebCmpService = /** @class */ (function () {
    function BifBillTrackerWebCmpService(trackerUiService, bindingData, viewModel, frameContext, inj, cfr, localeId, messagerService) {
        this.trackerUiService = trackerUiService;
        this.bindingData = bindingData;
        this.viewModel = viewModel;
        this.frameContext = frameContext;
        this.inj = inj;
        this.cfr = cfr;
        this.localeId = localeId;
        this.messagerService = messagerService;
        if (inj == null) {
            /** @type {?} */
            var refInj = ReflectiveInjector.resolveAndCreate([], this.frameContext && this.frameContext.injector);
            this.inj = refInj;
        }
        this.cfr = cfr || this.inj.get(ComponentFactoryResolver);
        this.localeId = localeId || this.inj.get(LOCALE_ID, null) || 'zh-CHS';
        this.messagerService = messagerService || this.inj.get(MessagerService, null);
        this.localePipe = this.trackerUiService && this.trackerUiService.localePipe || new BillTrackerLocalePipe(localeId);
    }
    /**
     * 打开单据追踪弹窗
     * @param args 单据Id或者单据查询参数
     * @param maximized 是否最大化弹窗
     * @param modalOptions 弹窗配置
     * @param graphOptions 单据追踪图配置
     * @param gridOptions 单据追踪数据表配置
     * @returns billTrackerComponent 单据追踪组件 @type { Observable<BillTrackerComponent> }
     */
    /**
     * 打开单据追踪弹窗
     * @param {?} args 单据Id或者单据查询参数
     * @param {?=} maximized 是否最大化弹窗
     * @param {?=} modalOptions 弹窗配置
     * @param {?=} graphOptions 单据追踪图配置
     * @param {?=} gridOptions 单据追踪数据表配置
     * @return {?} billTrackerComponent 单据追踪组件 \@type { Observable<BillTrackerComponent> }
     */
    BifBillTrackerWebCmpService.prototype.openDialog = /**
     * 打开单据追踪弹窗
     * @param {?} args 单据Id或者单据查询参数
     * @param {?=} maximized 是否最大化弹窗
     * @param {?=} modalOptions 弹窗配置
     * @param {?=} graphOptions 单据追踪图配置
     * @param {?=} gridOptions 单据追踪数据表配置
     * @return {?} billTrackerComponent 单据追踪组件 \@type { Observable<BillTrackerComponent> }
     */
    function (args, maximized, modalOptions, graphOptions, gridOptions) {
        if (args == null || args == "" || ((/** @type {?} */ (args))).trim && ((/** @type {?} */ (args))).trim() == "") {
            this.messagerService.error(this.localePipe.transform("trackerArgsCantBeEmpty"));
            throw "参数args不可为空";
        }
        if (typeof args == "string" && canJSONParse((/** @type {?} */ (args)))) {
            args = JSON.parse((/** @type {?} */ (args)));
        }
        else {
            args = (/** @type {?} */ (args));
        }
        maximized = (/** @type {?} */ (maximized)) === "" || maximized == null ? undefined : maximized;
        if (maximized != null && typeof maximized != "boolean") {
            if (maximized == "false") {
                maximized = false;
            }
            else if (maximized == "true") {
                maximized = true;
            }
            else {
                maximized = undefined;
            }
        }
        modalOptions = (/** @type {?} */ (modalOptions)) === "" || modalOptions == null ? undefined : modalOptions;
        graphOptions = (/** @type {?} */ (graphOptions)) === "" || graphOptions == null ? undefined : graphOptions;
        gridOptions = (/** @type {?} */ (gridOptions)) === "" || gridOptions == null ? undefined : gridOptions;
        /** @type {?} */
        var argz = new GetBillsInfoArgs();
        if (typeof args == "string") {
            argz.billDataId = args;
        }
        else {
            argz.LoadFromJsonObject(args);
        }
        return this.trackerUiService.openDefaultBillTrackerDialog(argz, maximized, modalOptions, graphOptions, gridOptions);
    };
    /**
     * 打开单据追踪App
     * @param args 单据Id或者单据查询参数
     * @param graphOptions 单据追踪图配置
     * @param gridOptions 单据追踪数据表配置
     */
    /**
     * 打开单据追踪App
     * @param {?} args 单据Id或者单据查询参数
     * @param {?=} graphOptions 单据追踪图配置
     * @param {?=} gridOptions 单据追踪数据表配置
     * @return {?}
     */
    BifBillTrackerWebCmpService.prototype.openApp = /**
     * 打开单据追踪App
     * @param {?} args 单据Id或者单据查询参数
     * @param {?=} graphOptions 单据追踪图配置
     * @param {?=} gridOptions 单据追踪数据表配置
     * @return {?}
     */
    function (args, graphOptions, gridOptions) {
        if (args == null || args == "" || ((/** @type {?} */ (args))).trim && ((/** @type {?} */ (args))).trim() == "") {
            this.messagerService.error(this.localePipe.transform("trackerArgsCantBeEmpty"));
            throw "参数args不可为空";
        }
        if (typeof args == "string" && canJSONParse((/** @type {?} */ (args)))) {
            args = JSON.parse((/** @type {?} */ (args)));
        }
        else {
            args = (/** @type {?} */ (args));
        }
        graphOptions = (/** @type {?} */ (graphOptions)) === "" || graphOptions == null ? undefined : graphOptions;
        gridOptions = (/** @type {?} */ (gridOptions)) === "" || gridOptions == null ? undefined : gridOptions;
        /** @type {?} */
        var argz = new GetBillsInfoArgs();
        if (typeof args == "string") {
            argz.billDataId = args;
        }
        else {
            argz.LoadFromJsonObject(args);
        }
        this.trackerUiService.openDefaultBillTrackerApp(argz, graphOptions, gridOptions);
    };
    BifBillTrackerWebCmpService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BifBillTrackerWebCmpService.ctorParameters = function () { return [
        { type: BillTrackerUiService },
        { type: BindingData, decorators: [{ type: Optional }] },
        { type: ViewModel, decorators: [{ type: Optional }] },
        { type: FrameContext, decorators: [{ type: Optional }] },
        { type: Injector, decorators: [{ type: Optional }] },
        { type: ComponentFactoryResolver, decorators: [{ type: Optional }] },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: MessagerService, decorators: [{ type: Optional }] }
    ]; };
    return BifBillTrackerWebCmpService;
}());
export { BifBillTrackerWebCmpService };
if (false) {
    /** @type {?} */
    BifBillTrackerWebCmpService.prototype.localePipe;
    /** @type {?} */
    BifBillTrackerWebCmpService.prototype.trackerUiService;
    /** @type {?} */
    BifBillTrackerWebCmpService.prototype.bindingData;
    /** @type {?} */
    BifBillTrackerWebCmpService.prototype.viewModel;
    /** @type {?} */
    BifBillTrackerWebCmpService.prototype.frameContext;
    /** @type {?} */
    BifBillTrackerWebCmpService.prototype.inj;
    /** @type {?} */
    BifBillTrackerWebCmpService.prototype.cfr;
    /** @type {?} */
    BifBillTrackerWebCmpService.prototype.localeId;
    /** @type {?} */
    BifBillTrackerWebCmpService.prototype.messagerService;
}
//# sourceMappingURL=data:application/json;base64,