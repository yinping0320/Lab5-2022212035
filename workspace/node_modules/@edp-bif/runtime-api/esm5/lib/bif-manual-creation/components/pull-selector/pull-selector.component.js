/**
 * @fileoverview added by tsickle
 * Generated from: lib/bif-manual-creation/components/pull-selector/pull-selector.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Inject, LOCALE_ID, ElementRef, ViewChild, Injector, ComponentFactoryResolver, Optional, ReflectiveInjector } from '@angular/core';
import { Subject } from 'rxjs';
import { SELECTOR_ARGS_INJECTOR } from '../../config/selector-args-injector.config';
import { BifDataService } from '../../service/bif-data.service';
import { FormGetBillCreationProcessEntityExArgs } from '../../../entity/form-rest/FormGetBillCreationProcessEntityExArgs';
import { LoadingService } from '@farris/ui-loading';
import { TreeTableComponent } from '@farris/ui-treetable';
import { DatagridComponent } from '@farris/ui-datagrid';
import { LocalePipe } from '../../pipe/locale.pipe';
import { MessagerService } from '@farris/ui-messager';
var PullSelectorComponent = /** @class */ (function () {
    function PullSelectorComponent(args, dataService, localeId, loading, elementRef, inj, cfr, messagerService) {
        var _this = this;
        this.dataService = dataService;
        this.loading = loading;
        this.elementRef = elementRef;
        this.inj = inj;
        this.cfr = cfr;
        this.messagerService = messagerService;
        this.ttData = [];
        this.ttIdField = 'voId';
        this.ttSearchFields = [];
        this.dgData = [];
        this.dgIdField = 'id';
        this.procData = [];
        this.scene = "Pull";
        this.bsModalRef4BifSelector = null;
        this.subject4CreationProcess = new Subject();
        this.clickOk4BifSelector = (/**
         * @return {?}
         */
        function () {
            if (_this.selectedEntity == null) {
                _this.messagerService.error(_this.localePipe.instant("pleaseSelectOneCreationProcess"));
                return;
            }
            _this.subject4CreationProcess.next(_this.selectedEntity);
            _this.subject4CreationProcess.complete();
            _this.bsModalRef4BifSelector.close();
        });
        this.clickClose4BifSelector = (/**
         * @return {?}
         */
        function () {
            _this.bsModalRef4BifSelector.close();
        });
        this.args = new FormGetBillCreationProcessEntityExArgs();
        this.args.LoadFromJsonObject(args);
        this.localePipe = new LocalePipe(localeId);
        if (inj == null) {
            /** @type {?} */
            var refInj = ReflectiveInjector.resolveAndCreate([
                MessagerService,
            ]);
            this.inj = refInj;
        }
        this.cfr = cfr || this.inj.get(ComponentFactoryResolver);
        this.messagerService = messagerService || this.inj.get(MessagerService, null);
    }
    /**
     * @return {?}
     */
    PullSelectorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.ttDataRoot = {
            id: "*",
            data: {
                voId: "*",
                voName: this.localePipe.instant("all"),
            },
            parent: null,
            expanded: true,
            children: [],
        };
        this.ttData = [this.ttDataRoot];
        this.configTtColumns();
        this.configDgColumns();
        this.configTtEvents();
        this.configDgEvents();
        this.loadItems();
    };
    /**
     * @private
     * @return {?}
     */
    PullSelectorComponent.prototype.loadItems = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.loading.show({ container: this.elementRef });
        /** @type {?} */
        var list$ = null;
        if (this.args.upBillVoId == null) {
            list$ = this.dataService.getSlimBillCreationProcessEntityExesByDownBillVoId4Pull(this.args.downBillVoId);
        }
        else {
            list$ = this.dataService.getSlimBillCreationProcessEntityExesByUpBillVoIdAndDownBillVoId4SpecificPull(this.args.upBillVoId, this.args.downBillVoId);
        }
        list$.subscribe((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            _this.loading.close();
            _this.procData = result || [];
            _this.dgData = tslib_1.__spread(_this.procData);
            // 组织VO树
            /** @type {?} */
            var voList = [];
            _this.procData.forEach((/**
             * @param {?} it
             * @return {?}
             */
            function (it) {
                if (voList.some((/**
                 * @param {?} vo
                 * @return {?}
                 */
                function (vo) { return vo.voId == it.upBillVoId; })) == false) {
                    voList.push({
                        voId: it.upBillVoId,
                        voName: it.upBillVoName,
                    });
                }
            }));
            _this.ttDataRoot.children = voList.map((/**
             * @param {?} it
             * @return {?}
             */
            function (it) {
                return {
                    id: it.voId,
                    data: {
                        voId: it.voId,
                        voName: it.voName,
                    },
                    expanded: true,
                };
            }));
            _this.ttData = [_this.ttDataRoot];
            // 默认选中第一条
            if (_this.dgData && _this.dgData.length > 0) {
                _this.selectedEntity = _this.dgData[0];
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.dg.clearSelections();
                    _this.dg.selectRow(_this.dgData[0].id);
                }), 0);
            }
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            _this.loading.close();
            throw err;
        }));
    };
    /**
     * @return {?}
     */
    PullSelectorComponent.prototype.configTtColumns = /**
     * @return {?}
     */
    function () {
        this.ttCols = [
            {
                field: 'voName', title: this.localePipe.instant('upstreamBill'), width: 120,
            },
        ];
    };
    /**
     * @return {?}
     */
    PullSelectorComponent.prototype.configDgColumns = /**
     * @return {?}
     */
    function () {
        this.dgCols = [
            { field: "code", title: this.localePipe.transform("processCode"), width: 120, sortable: true },
            {
                field: "name", title: this.localePipe.transform("processName"), width: 250, sortable: true,
            },
        ];
    };
    /**
     * @return {?}
     */
    PullSelectorComponent.prototype.configTtEvents = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.tt.nodeSelected.subscribe((/**
         * @param {?} ctx
         * @return {?}
         */
        function (ctx) {
            //ctx:{inidex;instance;node:{data}}
            if (ctx.node.id == "*") {
                _this.dgData = tslib_1.__spread(_this.procData);
            }
            else {
                _this.dgData = tslib_1.__spread(_this.procData.filter((/**
                 * @param {?} it
                 * @return {?}
                 */
                function (it) { return it.upBillVoId == ctx.node.data.voId; })));
            }
            if (_this.dgData && _this.dgData.length > 0) {
                _this.selectedEntity = _this.dgData[0];
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.dg.clearSelections();
                    _this.dg.selectRow(_this.dgData[0].id);
                }), 0);
            }
        }));
    };
    /**
     * @return {?}
     */
    PullSelectorComponent.prototype.configDgEvents = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.dg.selectChanged.subscribe((/**
         * @param {?} row
         * @return {?}
         */
        function (row) {
            _this.selectedEntity = row.data;
        }));
    };
    PullSelectorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-bif-pull-selector',
                    template: "<div class=\"g-main\" style=\"padding-left: 24px; padding-right: 24px;\">\r\n  <div class=\"d-flex flex-row\"\r\n    style=\"height: 100%; width: 100%; border: 1px solid #E9ECF3; box-shadow: 0 2px 6px 0 rgb(31 35 41 / 6%); border-radius: 6px;\">\r\n    <div class=\"d-flex flex-column\" style=\"width: 200px;\" ngResizable rzAspectRatio=\"true\" [rzHandles]=\"'e'\">\r\n      <farris-treetable #tt class=\"f-utils-fill-flex-column\" [data]=\"ttData\" [columns]=\"ttCols\" [idField]=\"ttIdField\"\r\n        [fit]=\"true\" [showHeader]=\"true\" [fixedHeader]=\"true\" [singleSelect]=\"true\">\r\n      </farris-treetable>\r\n    </div>\r\n\r\n    <div class=\"f-utils-fill-flex-row\" style=\"padding-left: 15px;\">\r\n      <div class=\"d-flex flex-column\" style=\"width: 100%;\">\r\n        <div class=\"f-utils-fill-flex-column\">\r\n          <farris-datagrid #dg [fit]=\"true\" [fitColumns]=\"true\" [data]=\"dgData\" [columns]=\"dgCols\" [idField]=\"dgIdField\"\r\n            [showHeader]=\"true\" [showBorder]=\"true\" [striped]=\"true\" [pagination]=\"false\" [showLineNumber]=\"true\">\r\n          </farris-datagrid>\r\n        </div>\r\n        <div class=\"form-group\" style=\"\">\r\n          <div>{{ 'processDesciption' | locale }}</div>\r\n          <textarea readonly class=\"form-control\" name=\"description\" rows=\"3\"\r\n            [ngModel]=\"selectedEntity&&selectedEntity.description\"></textarea>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    PullSelectorComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [SELECTOR_ARGS_INJECTOR,] }] },
        { type: BifDataService },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: LoadingService },
        { type: ElementRef },
        { type: Injector, decorators: [{ type: Optional }] },
        { type: ComponentFactoryResolver, decorators: [{ type: Optional }] },
        { type: MessagerService, decorators: [{ type: Optional }] }
    ]; };
    PullSelectorComponent.propDecorators = {
        tt: [{ type: ViewChild, args: ['tt',] }],
        dg: [{ type: ViewChild, args: ['dg',] }]
    };
    return PullSelectorComponent;
}());
export { PullSelectorComponent };
if (false) {
    /** @type {?} */
    PullSelectorComponent.prototype.tt;
    /** @type {?} */
    PullSelectorComponent.prototype.ttData;
    /** @type {?} */
    PullSelectorComponent.prototype.ttDataRoot;
    /** @type {?} */
    PullSelectorComponent.prototype.ttCols;
    /** @type {?} */
    PullSelectorComponent.prototype.ttIdField;
    /** @type {?} */
    PullSelectorComponent.prototype.ttSearchFields;
    /** @type {?} */
    PullSelectorComponent.prototype.ttSearchObj;
    /** @type {?} */
    PullSelectorComponent.prototype.dg;
    /** @type {?} */
    PullSelectorComponent.prototype.dgData;
    /** @type {?} */
    PullSelectorComponent.prototype.dgCols;
    /** @type {?} */
    PullSelectorComponent.prototype.dgIdField;
    /** @type {?} */
    PullSelectorComponent.prototype.localePipe;
    /** @type {?} */
    PullSelectorComponent.prototype.procData;
    /** @type {?} */
    PullSelectorComponent.prototype.scene;
    /**
     * 选中的生单流程
     * @type {?}
     */
    PullSelectorComponent.prototype.selectedEntity;
    /** @type {?} */
    PullSelectorComponent.prototype.bsModalRef4BifSelector;
    /** @type {?} */
    PullSelectorComponent.prototype.subject4CreationProcess;
    /**
     * @type {?}
     * @private
     */
    PullSelectorComponent.prototype.args;
    /** @type {?} */
    PullSelectorComponent.prototype.clickOk4BifSelector;
    /** @type {?} */
    PullSelectorComponent.prototype.clickClose4BifSelector;
    /**
     * @type {?}
     * @private
     */
    PullSelectorComponent.prototype.dataService;
    /**
     * @type {?}
     * @private
     */
    PullSelectorComponent.prototype.loading;
    /**
     * @type {?}
     * @private
     */
    PullSelectorComponent.prototype.elementRef;
    /** @type {?} */
    PullSelectorComponent.prototype.inj;
    /** @type {?} */
    PullSelectorComponent.prototype.cfr;
    /** @type {?} */
    PullSelectorComponent.prototype.messagerService;
}
//# sourceMappingURL=data:application/json;base64,