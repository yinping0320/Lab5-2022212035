/**
 * @fileoverview added by tsickle
 * Generated from: lib/bif-manual-creation/service/bif-target-ui.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Injector, ComponentFactoryResolver, NgModuleFactoryLoader, Inject, LOCALE_ID, ComponentRef, Optional } from '@angular/core';
import { Observable, from, of } from 'rxjs';
import { switchMap, catchError } from 'rxjs/operators';
import { FrameContext } from '@farris/devkit';
import { BsModalService } from '@farris/ui-modal';
import { BIF_UISTATE_KEY_CREATION_RESULT } from '../config/bif-form-constants';
import { AbstractUiService } from './abstract-ui-service';
import { BifDataService } from './bif-data.service';
import { PullSelectorComponent } from '../components/pull-selector/pull-selector.component';
import { FormGetBillCreationProcessEntityExArgs } from '../../entity/form-rest/FormGetBillCreationProcessEntityExArgs';
import { ManualCreationMode } from '../../entity/form-rest/ManualCreationMode';
import { FormBillCreationProcessExecutorResult } from '@edp-aif/runtime-api';
import { MessagerService } from '@farris/ui-messager';
import { RuntimeFrameworkService } from '@farris/command-services';
import { judgeBrowserType } from '../../utils/BrowserUtil';
import { TranslateService } from "@ngx-translate/core";
import { AbstractBifDataSelectorService } from './bif-data-selector.service';
import { canJSONParse } from '../../utils/ObjectUtils';
var BifTargetUiService = /** @class */ (function (_super) {
    tslib_1.__extends(BifTargetUiService, _super);
    function BifTargetUiService(dataService, frameContext, modalService, messager, injector, cfr, loader, localeId, runtimeFrameworkService) {
        var _this = _super.call(this, frameContext, modalService, messager, injector, cfr, loader, localeId, runtimeFrameworkService) || this;
        _this.dataService = dataService;
        _this.frameContext = frameContext;
        _this.modalService = modalService;
        _this.messager = messager;
        _this.injector = injector;
        _this.cfr = cfr;
        _this.loader = loader;
        _this.localeId = localeId;
        _this.uiStateKeyCreationResult = BIF_UISTATE_KEY_CREATION_RESULT;
        return _this;
    }
    /**
     * 参照时打开生单规则选择器
     */
    /**
     * 参照时打开生单规则选择器
     * @param {?} downVoId
     * @param {?=} bizFlowchartId
     * @param {?=} modalOptions
     * @param {?=} customSelectorModuleUrl
     * @param {?=} extParams
     * @return {?}
     */
    BifTargetUiService.prototype.openBillCreationProcessSelector4Pull = /**
     * 参照时打开生单规则选择器
     * @param {?} downVoId
     * @param {?=} bizFlowchartId
     * @param {?=} modalOptions
     * @param {?=} customSelectorModuleUrl
     * @param {?=} extParams
     * @return {?}
     */
    function (downVoId, bizFlowchartId, modalOptions, customSelectorModuleUrl, extParams) {
        /** @type {?} */
        var args = new FormGetBillCreationProcessEntityExArgs();
        args.downBillVoId = downVoId;
        args.manualCreationMode = ManualCreationMode.Pull;
        // args.bizFlowchartId = bizFlowchartId;
        return this.openBillCreationProcessSelector(args, PullSelectorComponent, modalOptions, customSelectorModuleUrl, extParams);
    };
    /**
     * 特定参照时打开生单规则选择器
     */
    /**
     * 特定参照时打开生单规则选择器
     * @param {?} upBillVoId
     * @param {?} downVoId
     * @param {?=} bizFlowchartId
     * @param {?=} modalOptions
     * @param {?=} customSelectorModuleUrl
     * @param {?=} extParams
     * @return {?}
     */
    BifTargetUiService.prototype.openBillCreationProcessSelector4SpecificPull = /**
     * 特定参照时打开生单规则选择器
     * @param {?} upBillVoId
     * @param {?} downVoId
     * @param {?=} bizFlowchartId
     * @param {?=} modalOptions
     * @param {?=} customSelectorModuleUrl
     * @param {?=} extParams
     * @return {?}
     */
    function (upBillVoId, downVoId, bizFlowchartId, modalOptions, customSelectorModuleUrl, extParams) {
        /** @type {?} */
        var args = new FormGetBillCreationProcessEntityExArgs();
        args.upBillVoId = upBillVoId;
        args.downBillVoId = downVoId;
        args.manualCreationMode = ManualCreationMode.SpecificPull;
        // args.bizFlowchartId = bizFlowchartId;
        return this.openBillCreationProcessSelector(args, PullSelectorComponent, modalOptions, customSelectorModuleUrl, extParams);
    };
    /**
     * 打开来源单据选择器
     * @param formSettings
     * @param modalOptions
     */
    /**
     * 打开来源单据选择器
     * @param {?=} formSettings
     * @param {?=} modalOptions
     * @param {?=} extParams
     * @return {?}
     */
    BifTargetUiService.prototype.openSourceDataSelector4Pull = /**
     * 打开来源单据选择器
     * @param {?=} formSettings
     * @param {?=} modalOptions
     * @param {?=} extParams
     * @return {?}
     */
    function (formSettings, modalOptions, extParams) {
        var _this = this;
        modalOptions = modalOptions == null ? this.defaultModalOptions : modalOptions;
        modalOptions.title = modalOptions.title == null ? this.localePipe.transform("sourceDataSelector") : modalOptions.title;
        /** @type {?} */
        var cmpR = null;
        if (formSettings == null || formSettings.sourceDataSelectorModuleUrl == null) // 没有配置时加载默认通用单据选择器
         {
            this.messager.error(this.localePipe.instant("noDefaultUpBillSelector"));
            throw "暂无默认实现，请使用自定义来源单据选择器。请确保生单流程中【集成场景】启用了【人工拉式生单】场景，并且【单据配置】-【拉式生单配置】-【上游应用入口】或【URL】不为空";
            // let cmpF: ComponentFactory<SourceDataSelectorComponent> = this.cfr.resolveComponentFactory(SourceDataSelectorComponent);
            // let inj: Injector = Injector.create([
            // ], this.injector);
            // cmpR = cmpF.create(inj);
            // this.configModalButtons(modalOptions, cmpR);
            // cmpR.instance.bsModalRef4AifSelector = this.modalService.show(cmpR, modalOptions);
            // return cmpR.instance.subject4EntityDatas.asObservable();
        }
        else //加载自定义来源单据选择器
         {
            // return from(System.import(formSettings.sourceDataSelectorModuleUrl.substring(0, formSettings.sourceDataSelectorModuleUrl.indexOf("#")) + ".js")).pipe(
            /** @type {?} */
            var moduleF$ = null;
            if (formSettings.sourceDataSelectorAppId != null) //配置appId时
             {
                moduleF$ = from(System.import(formSettings.sourceDataSelectorModuleUrl.toLowerCase()).then((/**
                 * @param {?} m
                 * @return {?}
                 */
                function (m) { return m; }))).pipe(switchMap((/**
                 * @param {?} m
                 * @return {?}
                 */
                function (m) {
                    for (var key in m) {
                        return of(m[key]);
                    }
                    return of(null);
                })));
            }
            else //只配置url时
             {
                moduleF$ = from(this.loader.load(formSettings.sourceDataSelectorModuleUrl));
            }
            return moduleF$.pipe(switchMap((/**
             * @param {?} moduleFactory
             * @return {?}
             */
            function (moduleFactory) {
                /** @type {?} */
                var moduleRef = moduleFactory.create(_this.frameContext.root.injector);
                if (moduleRef.instance.createSourceDataSelector && moduleRef.instance.createSourceDataSelector instanceof Function) //module上定义createSourceDataSelector方法
                 {
                    /** @type {?} */
                    var cmpR$ = moduleRef.instance.createSourceDataSelector(_this.frameContext.root.injector, null, extParams);
                    if (cmpR$ instanceof Observable) {
                        return cmpR$.pipe(switchMap((/**
                         * @param {?} componentRef
                         * @return {?}
                         */
                        function (componentRef) {
                            cmpR = componentRef;
                            _this.configModalButtons(modalOptions, cmpR);
                            cmpR.instance.bsModalRef4BifSelector = _this.modalService.show(cmpR, modalOptions);
                            return cmpR.instance.subject4EntityDatas.asObservable();
                        })));
                    }
                    else if (cmpR$ instanceof ComponentRef) {
                        cmpR = cmpR$;
                        _this.configModalButtons(modalOptions, cmpR);
                        cmpR.instance.bsModalRef4BifSelector = _this.modalService.show(cmpR, modalOptions);
                        return cmpR.instance.subject4EntityDatas.asObservable();
                    }
                }
                else //module上未定义时尝试寻找RootComponent类
                 {
                    /** @type {?} */
                    var translate_1 = moduleRef.injector.get(TranslateService);
                    return translate_1.getTranslation(_this.localeId).pipe(switchMap((/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        translate_1.setTranslation(_this.localeId, data);
                        translate_1.defaultLang = _this.localeId;
                        translate_1.currentLang = _this.localeId;
                        return _this.getEntityData(moduleRef, formSettings, modalOptions, extParams);
                    })), catchError((/**
                     * @param {?} err
                     * @return {?}
                     */
                    function (err) {
                        console.error(err);
                        return _this.getEntityData(moduleRef, formSettings, modalOptions, extParams);
                    })));
                }
            })));
        }
    };
    /**
     * @Deprecated 已弃用，请使用{@link getCreationResult}
     * 获取传到根组件UIState上的生单规则执行器结果
     */
    /**
     * \@Deprecated 已弃用，请使用{\@link getCreationResult}
     * 获取传到根组件UIState上的生单规则执行器结果
     * @return {?}
     */
    BifTargetUiService.prototype.getFormBillCreationProcessExecutorResult = /**
     * \@Deprecated 已弃用，请使用{\@link getCreationResult}
     * 获取传到根组件UIState上的生单规则执行器结果
     * @return {?}
     */
    function () {
        //取得tabId为[AppId]_[AppEntrance]_[tabId]
        /** @type {?} */
        var tabId = this.runtimeFrameworkService.tabId || this.getQueryString("tabId") || "";
        /** @type {?} */
        var dataId = tabId.substr(tabId.length - 36)
        // console.log(tabId);
        // console.log(dataId);
        ;
        // console.log(tabId);
        // console.log(dataId);
        /** @type {?} */
        var browser = judgeBrowserType();
        //IE11浏览器从localStorage取值后并删除, 并存入UIState
        if (browser.type == "IE" && browser.IEVersion == "IE11") {
            /** @type {?} */
            var tmp = window.top.localStorage.getItem(dataId);
            window.top.localStorage.removeItem(dataId);
            this.frameContext.root.uiState.setPropertyValue(this.uiStateKeyCreationResult, tmp);
        }
        /** @type {?} */
        var resTemp = this.frameContext.root.uiState[this.uiStateKeyCreationResult];
        if (resTemp == null) {
            throw "FormBillCreationProcessExecutorResult is null";
        }
        /** @type {?} */
        var result = new FormBillCreationProcessExecutorResult();
        if (typeof resTemp == "string") {
            result.LoadFromJson(resTemp);
        }
        else if (typeof resTemp == "object") {
            result.LoadFromJsonObject(resTemp);
        }
        else {
            throw "不合法的类型";
        }
        return result;
    };
    /**
     * @param {?} name
     * @return {?}
     */
    BifTargetUiService.prototype.getQueryString = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        /** @type {?} */
        var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
        /** @type {?} */
        var r = window.location.search.substr(1).match(reg);
        if (r != null) {
            return unescape(r[2]);
        }
        ;
        return null;
    };
    /**
     * 获取传到根组件UIState上的生单规则执行器结果
     */
    /**
     * 获取传到根组件UIState上的生单规则执行器结果
     * @return {?}
     */
    BifTargetUiService.prototype.getCreationResult = /**
     * 获取传到根组件UIState上的生单规则执行器结果
     * @return {?}
     */
    function () {
        //取得tabId为[AppId]_[AppEntrance]_[tabId]
        /** @type {?} */
        var tabId = this.runtimeFrameworkService.tabId || this.getQueryString("tabId") || "";
        /** @type {?} */
        var dataId = tabId.substr(tabId.length - 36)
        // console.log(tabId);
        // console.log(dataId);
        ;
        // console.log(tabId);
        // console.log(dataId);
        /** @type {?} */
        var browser = judgeBrowserType();
        //IE11浏览器从localStorage取值后并删除, 并存入UIState
        if (browser.type == "IE" && browser.IEVersion == "IE11") {
            /** @type {?} */
            var tmp = window.top.localStorage.getItem(dataId);
            window.top.localStorage.removeItem(dataId);
            this.frameContext.root.uiState.setPropertyValue(this.uiStateKeyCreationResult, tmp);
        }
        /** @type {?} */
        var resTemp = this.frameContext.root.uiState[this.uiStateKeyCreationResult];
        if (resTemp == null) {
            throw "FormBillCreationProcessExecutorResult is null";
        }
        /** @type {?} */
        var result = new FormBillCreationProcessExecutorResult();
        if (typeof resTemp == "string") {
            // 兼容原直接传递生单数据场景
            if (canJSONParse(resTemp)) {
                result.LoadFromJson(resTemp);
                return of(result);
            }
            else {
                /** @type {?} */
                var resultTextId = resTemp;
                return this.dataService.getCreationResultById(resultTextId);
            }
        }
        else if (typeof resTemp == "object") {
            result.LoadFromJsonObject(resTemp);
            return of(result);
        }
        else {
            throw "不合法的类型";
        }
    };
    /**
     * 配置模态框按钮事件
     * @param modalOptions
     * @param cmpR
     */
    /**
     * 配置模态框按钮事件
     * @protected
     * @param {?} modalOptions
     * @param {?} service
     * @return {?}
     */
    BifTargetUiService.prototype.configModalButtonsByService = /**
     * 配置模态框按钮事件
     * @protected
     * @param {?} modalOptions
     * @param {?} service
     * @return {?}
     */
    function (modalOptions, service) {
        modalOptions.buttons = [
            {
                text: this.localePipe.transform("confirm"),
                cls: "btn btn-primary",
                handle: service.clickOk4BifSelector,
            },
            {
                text: this.localePipe.transform("cancel"),
                cls: "btn btn-secondary",
                handle: service.clickClose4BifSelector,
            }
        ];
        modalOptions.showButtons = true;
    };
    /**
     * @protected
     * @param {?} moduleRef
     * @param {?=} formSettings
     * @param {?=} modalOptions
     * @param {?=} extParams
     * @return {?}
     */
    BifTargetUiService.prototype.getEntityData = /**
     * @protected
     * @param {?} moduleRef
     * @param {?=} formSettings
     * @param {?=} modalOptions
     * @param {?=} extParams
     * @return {?}
     */
    function (moduleRef, formSettings, modalOptions, extParams) {
        /** @type {?} */
        var cmpF = null;
        /** @type {?} */
        var cmpR = null;
        /** @type {?} */
        var bootstrapComponentSelector = "app-rootcomponent";
        /** @type {?} */
        var bootstrapComponent = null;
        /** @type {?} */
        var facMap = moduleRef.componentFactoryResolver['_factories'];
        /** @type {?} */
        var subject4EntityDatas = null;
        if (extParams && extParams.bootstrapComponentSelector) //指定了根组件selector
         {
            bootstrapComponentSelector = extParams.bootstrapComponentSelector;
            facMap.forEach((/**
             * @param {?} value
             * @param {?} key
             * @param {?} map
             * @return {?}
             */
            function (value, key, map) {
                /** @type {?} */
                var selector = value.selector;
                if (bootstrapComponentSelector == selector) {
                    cmpF = moduleRef.componentFactoryResolver.resolveComponentFactory((/** @type {?} */ (key)));
                    cmpR = cmpF.create(moduleRef.injector);
                }
            }));
        }
        else //未指定根组件selector
         {
            bootstrapComponent = moduleRef['_bootstrapComponents'][0];
            if (bootstrapComponent) //先找bootstrapComponent数组有无组件
             {
                cmpF = moduleRef.componentFactoryResolver.resolveComponentFactory(bootstrapComponent);
                cmpR = (/** @type {?} */ (cmpF.create(moduleRef.injector)));
            }
            else //没有则从facMap中查找默认的app-rootcomponent
             {
                facMap.forEach((/**
                 * @param {?} value
                 * @param {?} key
                 * @param {?} map
                 * @return {?}
                 */
                function (value, key, map) {
                    /** @type {?} */
                    var selector = value.selector;
                    if (bootstrapComponentSelector == selector) {
                        cmpF = moduleRef.componentFactoryResolver.resolveComponentFactory((/** @type {?} */ (key)));
                        cmpR = cmpF.create(moduleRef.injector);
                    }
                }));
            }
        }
        if (cmpR && cmpR.instance && cmpR.instance.viewModel && cmpR.instance.viewModel.uiState) {
            cmpR.instance.viewModel.uiState.setPropertyValue("action", "Load1");
            cmpR.instance.viewModel.uiState.setPropertyValue('DEVKIT_DIALOG', true);
        }
        /** @type {?} */
        var dataSelectorService = cmpR.injector.get(AbstractBifDataSelectorService, null);
        if (dataSelectorService != null) // 有AbstractBifDataSelectorService的provider时
         {
            this.configModalButtonsByService(modalOptions, dataSelectorService);
            dataSelectorService.bsModalRef4BifSelector = this.modalService.show(cmpR, modalOptions);
            subject4EntityDatas = dataSelectorService.subject4EntityDatas.asObservable();
        }
        else //没有则从组件上寻找相应属性
         {
            this.configModalButtons(modalOptions, cmpR);
            cmpR.instance.bsModalRef4BifSelector = this.modalService.show(cmpR, modalOptions);
            subject4EntityDatas = cmpR.instance.subject4EntityDatas.asObservable();
        }
        // 此处用于解决任务中心直接打开来源单据帮助时不执行初始化加载命令的问题
        if (cmpR && cmpR.instance && cmpR.instance.viewModel) {
            if (extParams && extParams.loadCommand) {
                /** @type {?} */
                var loadCommand = extParams.loadCommand;
                /** @type {?} */
                var cmdFunc = cmpR.instance.viewModel[loadCommand];
                if (cmdFunc) {
                    /** @type {?} */
                    var args = undefined;
                    if (extParams && extParams.loadParams) {
                        if (Array.isArray(extParams.loadParams)) {
                            args = extParams.loadParams;
                        }
                        else {
                            args = [extParams.loadParams];
                        }
                    }
                    cmdFunc.apply(cmpR.instance.viewModel, args);
                }
            }
        }
        return subject4EntityDatas;
    };
    BifTargetUiService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BifTargetUiService.ctorParameters = function () { return [
        { type: BifDataService },
        { type: FrameContext },
        { type: BsModalService },
        { type: MessagerService },
        { type: Injector },
        { type: ComponentFactoryResolver },
        { type: NgModuleFactoryLoader },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: RuntimeFrameworkService, decorators: [{ type: Optional }] }
    ]; };
    return BifTargetUiService;
}(AbstractUiService));
export { BifTargetUiService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    BifTargetUiService.prototype.uiStateKeyCreationResult;
    /**
     * @type {?}
     * @protected
     */
    BifTargetUiService.prototype.dataService;
    /**
     * @type {?}
     * @protected
     */
    BifTargetUiService.prototype.frameContext;
    /**
     * @type {?}
     * @protected
     */
    BifTargetUiService.prototype.modalService;
    /**
     * @type {?}
     * @protected
     */
    BifTargetUiService.prototype.messager;
    /**
     * @type {?}
     * @protected
     */
    BifTargetUiService.prototype.injector;
    /**
     * @type {?}
     * @protected
     */
    BifTargetUiService.prototype.cfr;
    /**
     * @type {?}
     * @protected
     */
    BifTargetUiService.prototype.loader;
    /** @type {?} */
    BifTargetUiService.prototype.localeId;
}
//# sourceMappingURL=data:application/json;base64,