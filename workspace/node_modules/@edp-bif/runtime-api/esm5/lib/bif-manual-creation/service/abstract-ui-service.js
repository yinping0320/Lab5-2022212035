/**
 * @fileoverview added by tsickle
 * Generated from: lib/bif-manual-creation/service/abstract-ui-service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injector, ComponentFactoryResolver, NgModuleFactoryLoader, Inject, LOCALE_ID, ComponentRef, ReflectiveInjector, Optional } from '@angular/core';
import { Observable, from } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { FrameContext } from '@farris/devkit';
import { BsModalService } from '@farris/ui-modal';
import { LocalePipe } from '../pipe/locale.pipe';
import { SELECTOR_ARGS_INJECTOR } from '../config/selector-args-injector.config';
import { MessagerService } from '@farris/ui-messager';
import { LoadingService } from '@farris/ui-loading';
import { RuntimeFrameworkService } from '@farris/command-services';
/**
 * @abstract
 */
var AbstractUiService = /** @class */ (function () {
    function AbstractUiService(frameContext, modalService, messager, injector, cfr, loader, localeId, runtimeFrameworkService) {
        this.frameContext = frameContext;
        this.modalService = modalService;
        this.messager = messager;
        this.injector = injector;
        this.cfr = cfr;
        this.loader = loader;
        this.localeId = localeId;
        /**
         * 内置模态框配置
         */
        this.defaultModalOptions = {
            title: null,
            width: 900,
            height: 500,
            buttons: null,
            showButtons: null,
        };
        this.runtimeFrameworkService = runtimeFrameworkService || injector.get(RuntimeFrameworkService);
        this.localePipe = new LocalePipe(localeId);
    }
    /**
     * @protected
     * @param {?} args
     * @param {?} type
     * @param {?=} modalOptions
     * @param {?=} customSelectorModuleUrl
     * @param {?=} extParams
     * @return {?}
     */
    AbstractUiService.prototype.openBillCreationProcessSelector = /**
     * @protected
     * @param {?} args
     * @param {?} type
     * @param {?=} modalOptions
     * @param {?=} customSelectorModuleUrl
     * @param {?=} extParams
     * @return {?}
     */
    function (args, type, modalOptions, customSelectorModuleUrl, extParams) {
        var _this = this;
        if (typeof modalOptions == "string") {
            if (modalOptions == "") {
                throw "modalOptions不可为空";
            }
            modalOptions = JSON.parse(modalOptions);
        }
        modalOptions = modalOptions == null ? this.defaultModalOptions : modalOptions;
        modalOptions.title = modalOptions.title == null ? this.localePipe.transform("creationProcessSelector") : modalOptions.title;
        /** @type {?} */
        var cmpR = null;
        if (customSelectorModuleUrl == null || customSelectorModuleUrl.trim() == "") {
            /** @type {?} */
            var cmpF = this.cfr.resolveComponentFactory(type);
            /** @type {?} */
            var inj = ReflectiveInjector.resolveAndCreate([
                { provide: SELECTOR_ARGS_INJECTOR, useValue: args.ConvertToJsonObject() },
                LoadingService,
            ], this.injector);
            cmpR = cmpF.create(inj);
            this.configModalButtons(modalOptions, cmpR);
            cmpR.instance.bsModalRef4BifSelector = this.modalService.show(cmpR, modalOptions);
            return cmpR.instance.subject4CreationProcess.asObservable();
        }
        else {
            return from(this.loader.load(customSelectorModuleUrl)).pipe(switchMap((/**
             * @param {?} moduleFactory
             * @return {?}
             */
            function (moduleFactory) {
                /** @type {?} */
                var moduleRef = moduleFactory.create(_this.frameContext.root.injector);
                /** @type {?} */
                var cmpR$ = moduleRef.instance.createCreationProcessSelector(_this.frameContext.root.injector, extParams);
                if (cmpR$ instanceof Observable) {
                    return cmpR$.pipe(switchMap((/**
                     * @param {?} componentRef
                     * @return {?}
                     */
                    function (componentRef) {
                        cmpR = componentRef;
                        _this.configModalButtons(modalOptions, cmpR);
                        cmpR.instance.bsModalRef4BifSelector = _this.modalService.show(cmpR, modalOptions);
                        return cmpR.instance.subject4CreationProcess.asObservable();
                    })));
                }
                else if (cmpR$ instanceof ComponentRef) {
                    cmpR = cmpR$;
                    _this.configModalButtons(modalOptions, cmpR);
                    cmpR.instance.bsModalRef4BifSelector = _this.modalService.show(cmpR, modalOptions);
                    return cmpR.instance.subject4CreationProcess.asObservable();
                }
            })));
        }
    };
    /**
     * 配置模态框按钮事件
     * @param modalOptions
     * @param cmpR
     */
    /**
     * 配置模态框按钮事件
     * @protected
     * @param {?} modalOptions
     * @param {?} cmpR
     * @return {?}
     */
    AbstractUiService.prototype.configModalButtons = /**
     * 配置模态框按钮事件
     * @protected
     * @param {?} modalOptions
     * @param {?} cmpR
     * @return {?}
     */
    function (modalOptions, cmpR) {
        modalOptions.buttons = [
            {
                text: this.localePipe.transform("confirm"),
                cls: "btn btn-primary",
                handle: cmpR.instance.clickOk4BifSelector,
            },
            {
                text: this.localePipe.transform("cancel"),
                cls: "btn btn-secondary",
                handle: cmpR.instance.clickClose4BifSelector,
            }
        ];
        modalOptions.showButtons = true;
    };
    /** @nocollapse */
    AbstractUiService.ctorParameters = function () { return [
        { type: FrameContext },
        { type: BsModalService },
        { type: MessagerService },
        { type: Injector },
        { type: ComponentFactoryResolver },
        { type: NgModuleFactoryLoader },
        { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
        { type: RuntimeFrameworkService, decorators: [{ type: Optional }] }
    ]; };
    return AbstractUiService;
}());
export { AbstractUiService };
if (false) {
    /**
     * 内置模态框配置
     * @type {?}
     * @protected
     */
    AbstractUiService.prototype.defaultModalOptions;
    /**
     * @type {?}
     * @protected
     */
    AbstractUiService.prototype.localePipe;
    /**
     * @type {?}
     * @protected
     */
    AbstractUiService.prototype.runtimeFrameworkService;
    /**
     * @type {?}
     * @protected
     */
    AbstractUiService.prototype.frameContext;
    /**
     * @type {?}
     * @protected
     */
    AbstractUiService.prototype.modalService;
    /**
     * @type {?}
     * @protected
     */
    AbstractUiService.prototype.messager;
    /**
     * @type {?}
     * @protected
     */
    AbstractUiService.prototype.injector;
    /**
     * @type {?}
     * @protected
     */
    AbstractUiService.prototype.cfr;
    /**
     * @type {?}
     * @protected
     */
    AbstractUiService.prototype.loader;
    /**
     * @type {?}
     * @protected
     */
    AbstractUiService.prototype.localeId;
}
//# sourceMappingURL=data:application/json;base64,