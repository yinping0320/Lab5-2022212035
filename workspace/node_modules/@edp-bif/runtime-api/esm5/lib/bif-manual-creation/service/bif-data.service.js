/**
 * @fileoverview added by tsickle
 * Generated from: lib/bif-manual-creation/service/bif-data.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ComponentFactoryResolver, Inject, Injectable, Injector, LOCALE_ID, NgModuleFactoryLoader, Optional } from '@angular/core';
import { HttpClient, } from '@angular/common/http';
import { of } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';
import { Repository, FrameContext } from '@farris/devkit';
import { BpmnModelJsonHelper, FormSettings } from '@edp-bif/common-api';
import { GeneralTextEntity } from '@edp-bif/common-api';
import { FormCreateResult, FormUpdateResult } from '../../ref';
import { FormGetBillCreationProcessEntityExArgs } from '../../entity/form-rest/FormGetBillCreationProcessEntityExArgs';
import { FormGetBillCreationProcessEntityExResult } from '../../entity/form-rest/FormGetBillCreationProcessEntityExResult';
import { FormBillCreationProcessExecutorResult } from '@edp-aif/runtime-api';
import { ManualCreationMode } from '../../entity/form-rest/ManualCreationMode';
import { GeneralTextIdWithDataId } from '../../entity';
import { RuntimeFrameworkService } from '@farris/command-services';
import { BsModalService } from '@farris/ui-modal';
import { MessagerService } from '@farris/ui-messager';
import { LocalePipe } from '../pipe/locale.pipe';
import { HttpService } from '@ecp-caf/caf-common';
var BifDataService = /** @class */ (function () {
    function BifDataService(httpClient, repository, injector, cfr, loader, modal, messager, frameContext, localeId, runtimeFrameworkService, localePipe, httpService) {
        this.httpClient = httpClient;
        this.injector = injector;
        this.cfr = cfr;
        this.loader = loader;
        this.modal = modal;
        this.messager = messager;
        this.frameContext = frameContext;
        this.localeId = localeId;
        this.runtimeFrameworkService = runtimeFrameworkService;
        this.localePipe = localePipe;
        this.httpService = httpService;
        this.getBillCreationProcessEntityExByIdUrl = "/api/runtime/aif/v1.0/manualcreationbill/getbillcreationprocessentityex";
        this.getBillCreationProcessEntityExByIdMethod = "GET";
        this.getBillCreationProcessEntityExUrl = "/api/runtime/aif/v1.0/manualcreationbill/getbillcreationprocessentityexes";
        this.getBillCreationProcessEntityExMethod = "POST";
        this.executeBillCreationProcessUrl = "/api/runtime/aif/v1.0/manualcreationbill/executebillcreationprocess";
        this.executeBillCreationProcessMethod = "POST";
        this.formCreateUrl = "/api/runtime/aif/v1.0/form/create";
        this.formCreateMethod = "POST";
        this.formUpdateUrl = "/api/runtime/aif/v1.0/form/update";
        this.formUpdateMethod = "POST";
        this.generalTextUrl = "/api/runtime/aif/v1.0/generaltext";
        this.generalTextMethod = "GET";
        this.generalTextCreationMethod = "POST";
        this.pushTaskUrl = "/api/runtime/aif/v1.0/manualcreationbill/pushtask";
        this.pushTaskMethod = "POST";
        this.getEntityDatasUrl = "/api/runtime/aif/v1.0/manualcreationbill/getentitydatas";
        this.getEntityDatasMethod = "POST";
        this.repository = (/** @type {?} */ (repository));
        this.injector = this.injector != null ? this.injector : this.repository.appContext.injector;
        this.cfr = this.cfr != null ? this.cfr : this.injector.get(ComponentFactoryResolver, null);
        this.loader = this.loader != null ? this.loader : this.injector.get(NgModuleFactoryLoader, null);
        this.modal = this.modal != null ? this.modal : this.injector.get(BsModalService, null);
        this.messager = this.messager != null ? this.messager : this.injector.get(MessagerService, null);
        this.frameContext = this.frameContext != null ? this.frameContext : this.injector.get(FrameContext, null);
        this.localeId = this.localeId != null ? this.localeId : this.injector.get(LOCALE_ID, localStorage.getItem('languageCode') || 'zh-CHS');
        this.runtimeFrameworkService = this.runtimeFrameworkService != null ? this.runtimeFrameworkService : this.injector.get(RuntimeFrameworkService, null);
        this.localePipe = this.localePipe != null ? this.localePipe : this.injector.get(LocalePipe, new LocalePipe(this.localeId));
        this.httpService = this.httpService != null ? this.httpService : this.injector.get(HttpService, null);
    }
    /**
     * 根据上游 VO Id获取单据流生单流程实体列表。
     *
     * @param upBillVoId 上游 VO Id。
     * @return 符合条件的单据流生单流程实体列表。
     */
    /**
     * 根据上游 VO Id获取单据流生单流程实体列表。
     *
     * @param {?} upBillVoId 上游 VO Id。
     * @return {?} 符合条件的单据流生单流程实体列表。
     */
    BifDataService.prototype.getSlimBillCreationProcessEntityExesByUpBillVoId4Push = /**
     * 根据上游 VO Id获取单据流生单流程实体列表。
     *
     * @param {?} upBillVoId 上游 VO Id。
     * @return {?} 符合条件的单据流生单流程实体列表。
     */
    function (upBillVoId) {
        /** @type {?} */
        var args = new FormGetBillCreationProcessEntityExArgs();
        args.upBillVoId = upBillVoId;
        args.manualCreationMode = ManualCreationMode.Push;
        return this.getSlimBillCreationProcessEntityExes(args).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            return res.billCreationProcessEntityExes;
        })));
    };
    /**
     * 根据下游 VO Id获取单据流生单流程实体列表。
     *
     * @param downBillVoId 下游 VO Id。
     * @return 符合条件的单据流生单流程实体列表。
     */
    /**
     * 根据下游 VO Id获取单据流生单流程实体列表。
     *
     * @param {?} downBillVoId 下游 VO Id。
     * @return {?} 符合条件的单据流生单流程实体列表。
     */
    BifDataService.prototype.getSlimBillCreationProcessEntityExesByDownBillVoId4Pull = /**
     * 根据下游 VO Id获取单据流生单流程实体列表。
     *
     * @param {?} downBillVoId 下游 VO Id。
     * @return {?} 符合条件的单据流生单流程实体列表。
     */
    function (downBillVoId) {
        /** @type {?} */
        var args = new FormGetBillCreationProcessEntityExArgs();
        args.downBillVoId = downBillVoId;
        args.manualCreationMode = ManualCreationMode.Pull;
        return this.getSlimBillCreationProcessEntityExes(args).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            return res.billCreationProcessEntityExes;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            try {
                if (typeof err.error == "string") {
                    err.error = JSON.parse(err.error);
                }
            }
            catch (e) {
            }
            throw err;
        })));
    };
    /**
     * 根据上游 VO Id和下游 VO Id获取单据流生单流程实体列表。
     *
     * @param upBillVoId 上游 VO Id。
     * @param downBillVoId 下游 VO Id。
     * @return 符合条件的单据流生单流程实体列表。
     */
    /**
     * 根据上游 VO Id和下游 VO Id获取单据流生单流程实体列表。
     *
     * @param {?} upBillVoId 上游 VO Id。
     * @param {?} downBillVoId 下游 VO Id。
     * @return {?} 符合条件的单据流生单流程实体列表。
     */
    BifDataService.prototype.getSlimBillCreationProcessEntityExesByUpBillVoIdAndDownBillVoId4SpecificPush = /**
     * 根据上游 VO Id和下游 VO Id获取单据流生单流程实体列表。
     *
     * @param {?} upBillVoId 上游 VO Id。
     * @param {?} downBillVoId 下游 VO Id。
     * @return {?} 符合条件的单据流生单流程实体列表。
     */
    function (upBillVoId, downBillVoId) {
        /** @type {?} */
        var args = new FormGetBillCreationProcessEntityExArgs();
        args.upBillVoId = upBillVoId;
        args.downBillVoId = downBillVoId;
        args.manualCreationMode = ManualCreationMode.SpecificPush;
        return this.getSlimBillCreationProcessEntityExes(args).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            return res.billCreationProcessEntityExes;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            try {
                if (typeof err.error == "string") {
                    err.error = JSON.parse(err.error);
                }
            }
            catch (e) {
            }
            throw err;
        })));
    };
    /**
     * 根据上游 VO Id和下游 VO Id获取单据流生单流程实体列表。
     *
     * @param upBillVoId 上游 VO Id。
     * @param downBillVoId 下游 VO Id。
     * @return 符合条件的单据流生单流程实体列表。
     */
    /**
     * 根据上游 VO Id和下游 VO Id获取单据流生单流程实体列表。
     *
     * @param {?} upBillVoId 上游 VO Id。
     * @param {?} downBillVoId 下游 VO Id。
     * @return {?} 符合条件的单据流生单流程实体列表。
     */
    BifDataService.prototype.getSlimBillCreationProcessEntityExesByUpBillVoIdAndDownBillVoId4SpecificPull = /**
     * 根据上游 VO Id和下游 VO Id获取单据流生单流程实体列表。
     *
     * @param {?} upBillVoId 上游 VO Id。
     * @param {?} downBillVoId 下游 VO Id。
     * @return {?} 符合条件的单据流生单流程实体列表。
     */
    function (upBillVoId, downBillVoId) {
        /** @type {?} */
        var args = new FormGetBillCreationProcessEntityExArgs();
        args.upBillVoId = upBillVoId;
        args.downBillVoId = downBillVoId;
        args.manualCreationMode = ManualCreationMode.SpecificPull;
        return this.getSlimBillCreationProcessEntityExes(args).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            return res.billCreationProcessEntityExes;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            try {
                if (typeof err.error == "string") {
                    err.error = JSON.parse(err.error);
                }
            }
            catch (e) {
            }
            throw err;
        })));
    };
    /**
     * 获取单据流生单流程实体
     */
    /**
     * 获取单据流生单流程实体
     * @param {?} processId
     * @return {?}
     */
    BifDataService.prototype.getSlimBillCreationProcessEntityExById = /**
     * 获取单据流生单流程实体
     * @param {?} processId
     * @return {?}
     */
    function (processId) {
        /** @type {?} */
        var getCreationRuleById$ = null;
        if (this.httpService != null) {
            getCreationRuleById$ = (/** @type {?} */ (this.httpService.request(this.getBillCreationProcessEntityExByIdMethod, this.getBillCreationProcessEntityExByIdUrl + "/" + processId, {})));
        }
        else {
            getCreationRuleById$ = this.repository.proxy.request(this.getBillCreationProcessEntityExByIdUrl + "/" + processId, this.getBillCreationProcessEntityExByIdMethod, null);
        }
        return getCreationRuleById$;
    };
    /**
     * 获取表单配置实体
     * @param formSettingsId
     */
    /**
     * 获取表单配置实体
     * @param {?} formSettingsId
     * @return {?}
     */
    BifDataService.prototype.getFormSettingsById = /**
     * 获取表单配置实体
     * @param {?} formSettingsId
     * @return {?}
     */
    function (formSettingsId) {
        if (formSettingsId == null || formSettingsId.trim() == "") {
            throw "FormSettingsId为空";
        }
        /** @type {?} */
        var formSettings$ = null;
        if (this.httpService != null) {
            formSettings$ = (/** @type {?} */ (this.httpService.request(this.generalTextMethod, this.generalTextUrl + "/" + formSettingsId, { responseType: "text" })));
        }
        else {
            formSettings$ = this.repository.proxy.request(this.generalTextUrl + "/" + formSettingsId, this.generalTextMethod, null, { responseType: "text" });
        }
        return formSettings$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            /** @type {?} */
            var generateText = new GeneralTextEntity();
            generateText.LoadFromJson(data);
            /** @type {?} */
            var formSettings = new FormSettings();
            formSettings.LoadFromJson(generateText.text);
            return formSettings;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            try {
                if (typeof err.error == "string") {
                    err.error = JSON.parse(err.error);
                }
            }
            catch (e) {
            }
            throw err;
        })));
    };
    /**
     * 获取生单结果实体
     * @param creationResultId
     */
    /**
     * 获取生单结果实体
     * @param {?} creationResultId
     * @return {?}
     */
    BifDataService.prototype.getCreationResultById = /**
     * 获取生单结果实体
     * @param {?} creationResultId
     * @return {?}
     */
    function (creationResultId) {
        if (creationResultId == null || creationResultId.trim() == "") {
            throw "creationResultId为空";
        }
        /** @type {?} */
        var creationResult$ = null;
        if (this.httpService != null) {
            creationResult$ = (/** @type {?} */ (this.httpService.request(this.generalTextMethod, this.generalTextUrl + "/" + creationResultId, { responseType: "text" })));
        }
        else {
            creationResult$ = this.repository.proxy.request(this.generalTextUrl + "/" + creationResultId, this.generalTextMethod, null, { responseType: "text" });
        }
        return creationResult$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            /** @type {?} */
            var generateText = new GeneralTextEntity();
            generateText.LoadFromJson(data);
            /** @type {?} */
            var creationResult = new FormBillCreationProcessExecutorResult();
            creationResult.LoadFromJson(generateText.text);
            return creationResult;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            try {
                if (typeof err.error == "string") {
                    err.error = JSON.parse(err.error);
                }
            }
            catch (e) {
            }
            throw err;
        })));
    };
    /**
     * 生单结果存入中间表
     */
    /**
     * 生单结果存入中间表
     * @param {?} creationResult
     * @return {?}
     */
    BifDataService.prototype.addFormBillCreationProcessExecutorResult = /**
     * 生单结果存入中间表
     * @param {?} creationResult
     * @return {?}
     */
    function (creationResult) {
        if (creationResult == null) {
            throw "参数creationResult不可为空";
        }
        if (typeof creationResult == "string") {
            if (creationResult == "") {
                throw "参数creationResult不可为空";
            }
            /** @type {?} */
            var temp = new FormBillCreationProcessExecutorResult();
            temp.LoadFromJson(creationResult);
            creationResult = temp;
        }
        if ((creationResult instanceof FormBillCreationProcessExecutorResult) == false) {
            /** @type {?} */
            var res = new FormBillCreationProcessExecutorResult();
            res.LoadFromJsonObject(creationResult);
            creationResult = res;
        }
        if (creationResult.conditionResult.conditionExecutionResult == false) {
            this.messager.error(creationResult.conditionResult.message || this.localePipe.transform("creationExecutionError"));
            return;
        }
        if (creationResult.creationRuleExecutorResult == null || creationResult.creationRuleExecutorResult.mappingResults == null || creationResult.creationRuleExecutorResult.mappingResults.length == 0) {
            this.messager.error(this.localePipe.transform("creationResultEmpty"));
            return;
        }
        /** @type {?} */
        var body = creationResult.ConvertToJson();
        /** @type {?} */
        var options = {
            body: body,
            responseType: "text"
        };
        /** @type {?} */
        var creationResult$ = null;
        if (this.httpService != null) {
            creationResult$ = (/** @type {?} */ (this.httpService.request(this.generalTextCreationMethod, "" + this.generalTextUrl, options)));
        }
        else {
            creationResult$ = this.repository.proxy.request("" + this.generalTextUrl, this.generalTextCreationMethod, null, options);
        }
        return creationResult$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            /** @type {?} */
            var texts = (/** @type {?} */ (BpmnModelJsonHelper.FromJson(data, GeneralTextIdWithDataId)));
            return texts;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            try {
                if (typeof err.error == "string") {
                    err.error = JSON.parse(err.error);
                }
            }
            catch (e) {
            }
            throw err;
        })));
    };
    /**
     * 执行单据流生单流程
     */
    /**
     * 执行单据流生单流程
     * @param {?} args
     * @return {?}
     */
    BifDataService.prototype.executeBillCreationProcess = /**
     * 执行单据流生单流程
     * @param {?} args
     * @return {?}
     */
    function (args) {
        if (args.manualCreationMode == null) {
            throw "manualCreationMode不可为空";
        }
        /** @type {?} */
        var body = args.ConvertToJson();
        /** @type {?} */
        var options = {
            body: body,
            responseType: "text"
        };
        /** @type {?} */
        var executeCreationRule$ = null;
        if (this.httpService != null) {
            executeCreationRule$ = this.httpService.request(this.executeBillCreationProcessMethod, this.executeBillCreationProcessUrl, options);
        }
        else {
            executeCreationRule$ = this.repository.proxy.request(this.executeBillCreationProcessUrl, this.executeBillCreationProcessMethod, null, options);
        }
        return executeCreationRule$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            /** @type {?} */
            var res = new FormBillCreationProcessExecutorResult();
            res.LoadFromJson(data);
            return res;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            try {
                if (typeof err.error == "string") {
                    err.error = JSON.parse(err.error);
                }
            }
            catch (e) {
            }
            throw err;
        })));
    };
    /**
     * 创建单据
     */
    /**
     * 创建单据
     * @param {?} args
     * @return {?}
     */
    BifDataService.prototype.createEntityDatas = /**
     * 创建单据
     * @param {?} args
     * @return {?}
     */
    function (args) {
        var _this = this;
        /** @type {?} */
        var body = args.ConvertToJson();
        /** @type {?} */
        var options = {
            body: body,
            responseType: 'text'
        };
        /** @type {?} */
        var create$ = this.repository.proxy.request(this.formCreateUrl, this.formCreateMethod, null, options);
        return create$.pipe(switchMap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            /** @type {?} */
            var result = new FormCreateResult();
            result.LoadFromJson(res);
            /** @type {?} */
            var entities = result.entityDataList.map((/**
             * @param {?} entityStr
             * @return {?}
             */
            function (entityStr) {
                /** @type {?} */
                var newEntity = _this.repository.buildEntity(JSON.parse(entityStr));
                _this.appendInitialData(newEntity, newEntity);
                return newEntity;
            }));
            /** @type {?} */
            var origin = _this.repository.entityCollection.getAllEntities();
            if (origin == null || origin.length == 0) {
                _this.repository.entityCollection.loadEntities(entities);
            }
            else {
                _this.repository.entityCollection.addEntities(entities);
            }
            return of(result);
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            try {
                if (typeof err.error == "string") {
                    err.error = JSON.parse(err.error);
                }
            }
            catch (e) {
            }
            throw err;
        })));
    };
    /**
     * 修改单据
     * @param args 表单更新参数
     */
    /**
     * 修改单据
     * @param {?} args 表单更新参数
     * @return {?}
     */
    BifDataService.prototype.updateEntityDatas = /**
     * 修改单据
     * @param {?} args 表单更新参数
     * @return {?}
     */
    function (args) {
        /** @type {?} */
        var body = args.ConvertToJson();
        /** @type {?} */
        var options = {
            body: body,
            responseType: "text"
        };
        /** @type {?} */
        var update$ = this.repository.proxy.request(this.formUpdateUrl, this.formUpdateMethod, null, options);
        return update$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            /** @type {?} */
            var res = new FormUpdateResult();
            res.LoadFromJson(data);
            return res;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            try {
                if (typeof err.error == "string") {
                    err.error = JSON.parse(err.error);
                }
            }
            catch (e) {
            }
            throw err;
        })));
    };
    /**
     * 将生单结果推送至任务中心
     * @param args 推送任务中心参数
     * @returns
     */
    /**
     * 将生单结果推送至任务中心
     * @param {?} args 推送任务中心参数
     * @return {?}
     */
    BifDataService.prototype.pushTaskCenter = /**
     * 将生单结果推送至任务中心
     * @param {?} args 推送任务中心参数
     * @return {?}
     */
    function (args) {
        /** @type {?} */
        var body = args.ConvertToJson();
        /** @type {?} */
        var options = {
            body: body,
            responseType: "text"
        };
        /** @type {?} */
        var update$ = null;
        if (this.httpService != null) {
            update$ = this.httpService.request(this.pushTaskMethod, this.pushTaskUrl, options);
        }
        else {
            update$ = this.repository.proxy.request(this.pushTaskUrl, this.pushTaskMethod, null, options);
        }
        return update$.pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            try {
                if (typeof err.error == "string") {
                    err.error = JSON.parse(err.error);
                }
            }
            catch (e) {
            }
            throw err;
        })));
    };
    /**
     * 获取VO序列化数据
     * @param args
     * @returns
     */
    /**
     * 获取VO序列化数据
     * @param {?} args
     * @return {?}
     */
    BifDataService.prototype.getEntityDatas = /**
     * 获取VO序列化数据
     * @param {?} args
     * @return {?}
     */
    function (args) {
        /** @type {?} */
        var body = args.ConvertToJson();
        /** @type {?} */
        var options = {
            body: body,
            responseType: "text"
        };
        /** @type {?} */
        var datas$ = null;
        if (this.httpService != null) {
            datas$ = this.httpService.request(this.getEntityDatasMethod, this.getEntityDatasUrl, options);
        }
        else {
            datas$ = this.repository.proxy.request(this.getEntityDatasUrl, this.getEntityDatasMethod, null, options);
        }
        return datas$.pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            try {
                if (typeof err.error == "string") {
                    err.error = JSON.parse(err.error);
                }
            }
            catch (e) {
            }
            throw err;
        })));
    };
    /**
     * 查询单据生单流程扩展实体
     * @param args 查询参数
     */
    /**
     * 查询单据生单流程扩展实体
     * @private
     * @param {?} args 查询参数
     * @return {?}
     */
    BifDataService.prototype.getSlimBillCreationProcessEntityExes = /**
     * 查询单据生单流程扩展实体
     * @private
     * @param {?} args 查询参数
     * @return {?}
     */
    function (args) {
        if (args == null) {
            throw "args不可为空";
        }
        if (typeof args == "string") {
            if (args == "") {
                throw "args不可为空";
            }
            /** @type {?} */
            var temp = new FormGetBillCreationProcessEntityExArgs();
            temp.LoadFromJson(args);
            args = temp;
        }
        /** @type {?} */
        var options = { body: args.ConvertToJson(), responseType: "text" };
        /** @type {?} */
        var getEntity$ = null;
        if (this.httpService != null) {
            getEntity$ = this.httpService.request(this.getBillCreationProcessEntityExMethod, this.getBillCreationProcessEntityExUrl, options);
        }
        else {
            getEntity$ = this.repository.proxy.request(this.getBillCreationProcessEntityExUrl, this.getBillCreationProcessEntityExMethod, null, options);
        }
        return getEntity$.pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            /** @type {?} */
            var result = new FormGetBillCreationProcessEntityExResult();
            result.LoadFromJson(data);
            return result;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            try {
                if (typeof err.error == "string") {
                    err.error = JSON.parse(err.error);
                }
            }
            catch (e) {
            }
            throw err;
        })));
    };
    /**
     * 参考farris/bef EntityUtil实现
     * @param entity
     * @param initialData
     */
    /**
     * 参考farris/bef EntityUtil实现
     * @private
     * @param {?} entity
     * @param {?} initialData
     * @return {?}
     */
    BifDataService.prototype.appendInitialData = /**
     * 参考farris/bef EntityUtil实现
     * @private
     * @param {?} entity
     * @param {?} initialData
     * @return {?}
     */
    function (entity, initialData) {
        /** @type {?} */
        var data = Object.assign({}, initialData);
        delete data.id;
        delete data.parentID;
        entity['initialData'] = data;
    };
    BifDataService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BifDataService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: Repository },
        { type: Injector, decorators: [{ type: Optional }] },
        { type: ComponentFactoryResolver, decorators: [{ type: Optional }] },
        { type: NgModuleFactoryLoader, decorators: [{ type: Optional }] },
        { type: BsModalService, decorators: [{ type: Optional }] },
        { type: MessagerService, decorators: [{ type: Optional }] },
        { type: FrameContext, decorators: [{ type: Optional }] },
        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [LOCALE_ID,] }] },
        { type: RuntimeFrameworkService, decorators: [{ type: Optional }] },
        { type: LocalePipe, decorators: [{ type: Optional }] },
        { type: HttpService, decorators: [{ type: Optional }] }
    ]; };
    return BifDataService;
}());
export { BifDataService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.getBillCreationProcessEntityExByIdUrl;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.getBillCreationProcessEntityExByIdMethod;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.getBillCreationProcessEntityExUrl;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.getBillCreationProcessEntityExMethod;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.executeBillCreationProcessUrl;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.executeBillCreationProcessMethod;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.formCreateUrl;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.formCreateMethod;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.formUpdateUrl;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.formUpdateMethod;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.generalTextUrl;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.generalTextMethod;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.generalTextCreationMethod;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.pushTaskUrl;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.pushTaskMethod;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.getEntityDatasUrl;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.getEntityDatasMethod;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.repository;
    /**
     * @type {?}
     * @private
     */
    BifDataService.prototype.httpClient;
    /** @type {?} */
    BifDataService.prototype.injector;
    /** @type {?} */
    BifDataService.prototype.cfr;
    /** @type {?} */
    BifDataService.prototype.loader;
    /** @type {?} */
    BifDataService.prototype.modal;
    /** @type {?} */
    BifDataService.prototype.messager;
    /** @type {?} */
    BifDataService.prototype.frameContext;
    /** @type {?} */
    BifDataService.prototype.localeId;
    /** @type {?} */
    BifDataService.prototype.runtimeFrameworkService;
    /** @type {?} */
    BifDataService.prototype.localePipe;
    /** @type {?} */
    BifDataService.prototype.httpService;
}
//# sourceMappingURL=data:application/json;base64,