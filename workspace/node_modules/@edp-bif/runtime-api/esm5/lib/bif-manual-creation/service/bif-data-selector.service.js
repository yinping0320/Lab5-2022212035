/**
 * @fileoverview added by tsickle
 * Generated from: lib/bif-manual-creation/service/bif-data-selector.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, ComponentFactoryResolver, Injector } from '@angular/core';
import { Subject } from 'rxjs';
import { FrameContext, ViewModel } from '@farris/devkit';
var AbstractBifDataSelectorService = /** @class */ (function () {
    function AbstractBifDataSelectorService() {
        /**
         * 实体数据Subject
         */
        this.subject4EntityDatas = new Subject();
    }
    AbstractBifDataSelectorService.decorators = [
        { type: Injectable }
    ];
    return AbstractBifDataSelectorService;
}());
export { AbstractBifDataSelectorService };
if (false) {
    /**
     * 实体数据Subject
     * @type {?}
     */
    AbstractBifDataSelectorService.prototype.subject4EntityDatas;
    /**
     * 数据选择器弹窗引用
     * @type {?}
     */
    AbstractBifDataSelectorService.prototype.bsModalRef4BifSelector;
    /**
     * 点击弹窗“确定”按钮操作
     * @type {?}
     */
    AbstractBifDataSelectorService.prototype.clickOk4BifSelector;
    /**
     * 点击弹窗“取消”按钮操作
     * @type {?}
     */
    AbstractBifDataSelectorService.prototype.clickClose4BifSelector;
}
var DefaultBifDataSelectorService = /** @class */ (function (_super) {
    tslib_1.__extends(DefaultBifDataSelectorService, _super);
    function DefaultBifDataSelectorService(frameContext, viewModel, cfr, injector) {
        var _this = _super.call(this) || this;
        _this.frameContext = frameContext;
        _this.viewModel = viewModel;
        _this.cfr = cfr;
        _this.injector = injector;
        /**
         * 实体数据Subject
         */
        _this.subject4EntityDatas = new Subject();
        /**
         * 点击弹窗“确定”按钮操作
         */
        _this.clickOk4BifSelector = (/**
         * @return {?}
         */
        function () {
            //发送选中的来源单据实体列表并关闭模态框
            _this.viewModel.frameContext.repository.getById(_this.viewModel.bindingData.getObject().id).subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                _this.subject4EntityDatas.next([e]);
                _this.subject4EntityDatas.complete();
                _this.bsModalRef4BifSelector.close();
            }));
        });
        /**
         * 点击弹窗“取消”按钮操作
         */
        _this.clickClose4BifSelector = (/**
         * @return {?}
         */
        function () {
            _this.subject4EntityDatas.complete();
            _this.bsModalRef4BifSelector.close();
        });
        return _this;
    }
    DefaultBifDataSelectorService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DefaultBifDataSelectorService.ctorParameters = function () { return [
        { type: FrameContext },
        { type: ViewModel },
        { type: ComponentFactoryResolver },
        { type: Injector }
    ]; };
    return DefaultBifDataSelectorService;
}(AbstractBifDataSelectorService));
export { DefaultBifDataSelectorService };
if (false) {
    /**
     * 实体数据Subject
     * @type {?}
     */
    DefaultBifDataSelectorService.prototype.subject4EntityDatas;
    /**
     * 数据选择器弹窗引用
     * @type {?}
     */
    DefaultBifDataSelectorService.prototype.bsModalRef4BifSelector;
    /**
     * 点击弹窗“确定”按钮操作
     * @type {?}
     */
    DefaultBifDataSelectorService.prototype.clickOk4BifSelector;
    /**
     * 点击弹窗“取消”按钮操作
     * @type {?}
     */
    DefaultBifDataSelectorService.prototype.clickClose4BifSelector;
    /** @type {?} */
    DefaultBifDataSelectorService.prototype.frameContext;
    /** @type {?} */
    DefaultBifDataSelectorService.prototype.viewModel;
    /** @type {?} */
    DefaultBifDataSelectorService.prototype.cfr;
    /** @type {?} */
    DefaultBifDataSelectorService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmlmLWRhdGEtc2VsZWN0b3Iuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlZHAtYmlmL3J1bnRpbWUtYXBpLyIsInNvdXJjZXMiOlsibGliL2JpZi1tYW51YWwtY3JlYXRpb24vc2VydmljZS9iaWYtZGF0YS1zZWxlY3Rvci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsd0JBQXdCLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRS9FLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFL0IsT0FBTyxFQUFVLFlBQVksRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVqRTtJQUFBOzs7O1FBS0ksd0JBQW1CLEdBQXNCLElBQUksT0FBTyxFQUFFLENBQUM7SUFhM0QsQ0FBQzs7Z0JBbEJBLFVBQVU7O0lBa0JYLHFDQUFDO0NBQUEsQUFsQkQsSUFrQkM7U0FqQlksOEJBQThCOzs7Ozs7SUFJdkMsNkRBQXVEOzs7OztJQUl2RCxnRUFBbUM7Ozs7O0lBSW5DLDZEQUFnQzs7Ozs7SUFJaEMsZ0VBQW1DOztBQUd2QztJQUNtRCx5REFBOEI7SUE4QjdFLHVDQUNXLFlBQTBCLEVBQzFCLFNBQW9CLEVBQ3BCLEdBQTZCLEVBQzdCLFFBQWtCO1FBSjdCLFlBTUksaUJBQU8sU0FDVjtRQU5VLGtCQUFZLEdBQVosWUFBWSxDQUFjO1FBQzFCLGVBQVMsR0FBVCxTQUFTLENBQVc7UUFDcEIsU0FBRyxHQUFILEdBQUcsQ0FBMEI7UUFDN0IsY0FBUSxHQUFSLFFBQVEsQ0FBVTs7OztRQTlCN0IseUJBQW1CLEdBQXNCLElBQUksT0FBTyxFQUFFLENBQUM7Ozs7UUFRdkQseUJBQW1COzs7UUFBZTtZQUM5QixxQkFBcUI7WUFDckIsS0FBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTOzs7O1lBQy9GLFVBQUMsQ0FBQztnQkFDRSxLQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDbkMsS0FBSSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUNwQyxLQUFJLENBQUMsc0JBQXNCLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDeEMsQ0FBQyxFQUNKLENBQUM7UUFDTixDQUFDLEVBQUM7Ozs7UUFJRiw0QkFBc0I7OztRQUFlO1lBQ2pDLEtBQUksQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNwQyxLQUFJLENBQUMsc0JBQXNCLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDeEMsQ0FBQyxFQUFDOztJQVNGLENBQUM7O2dCQXRDSixVQUFVOzs7O2dCQXRCTSxZQUFZO2dCQUFFLFNBQVM7Z0JBSm5CLHdCQUF3QjtnQkFBRSxRQUFROztJQWlFdkQsb0NBQUM7Q0FBQSxBQXZDRCxDQUNtRCw4QkFBOEIsR0FzQ2hGO1NBdENZLDZCQUE2Qjs7Ozs7O0lBSXRDLDREQUF1RDs7Ozs7SUFJdkQsK0RBQW1DOzs7OztJQUluQyw0REFTRTs7Ozs7SUFJRiwrREFHRTs7SUFHRSxxREFBaUM7O0lBQ2pDLGtEQUEyQjs7SUFDM0IsNENBQW9DOztJQUNwQyxpREFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IElCaWZEYXRhU2VsZWN0b3JDb21wb25lbnQgfSBmcm9tICcuLi9iYXNlL0lCaWZEYXRhU2VsZWN0b3JDb21wb25lbnQnO1xyXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEJzTW9kYWxSZWYgfSBmcm9tICdAZmFycmlzL3VpLW1vZGFsJztcclxuaW1wb3J0IHsgRW50aXR5LCBGcmFtZUNvbnRleHQsIFZpZXdNb2RlbCB9IGZyb20gJ0BmYXJyaXMvZGV2a2l0JztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEFic3RyYWN0QmlmRGF0YVNlbGVjdG9yU2VydmljZSBpbXBsZW1lbnRzIElCaWZEYXRhU2VsZWN0b3JDb21wb25lbnQge1xyXG4gICAgLyoqXHJcbiAgICAgKiDlrp7kvZPmlbDmja5TdWJqZWN0XHJcbiAgICAgKi9cclxuICAgIHN1YmplY3Q0RW50aXR5RGF0YXM6IFN1YmplY3Q8RW50aXR5W10+ID0gbmV3IFN1YmplY3QoKTtcclxuICAgIC8qKlxyXG4gICAgICog5pWw5o2u6YCJ5oup5Zmo5by556qX5byV55SoXHJcbiAgICAgKi9cclxuICAgIGJzTW9kYWxSZWY0QmlmU2VsZWN0b3I6IEJzTW9kYWxSZWY7XHJcbiAgICAvKipcclxuICAgICAqIOeCueWHu+W8ueeql+KAnOehruWumuKAneaMiemSruaTjeS9nFxyXG4gICAgICovXHJcbiAgICBjbGlja09rNEJpZlNlbGVjdG9yOiAoKSA9PiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiDngrnlh7vlvLnnqpfigJzlj5bmtojigJ3mjInpkq7mk43kvZxcclxuICAgICAqL1xyXG4gICAgY2xpY2tDbG9zZTRCaWZTZWxlY3RvcjogKCkgPT4gdm9pZDtcclxufVxyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRGVmYXVsdEJpZkRhdGFTZWxlY3RvclNlcnZpY2UgZXh0ZW5kcyBBYnN0cmFjdEJpZkRhdGFTZWxlY3RvclNlcnZpY2Uge1xyXG4gICAgLyoqXHJcbiAgICAgKiDlrp7kvZPmlbDmja5TdWJqZWN0XHJcbiAgICAgKi9cclxuICAgIHN1YmplY3Q0RW50aXR5RGF0YXM6IFN1YmplY3Q8RW50aXR5W10+ID0gbmV3IFN1YmplY3QoKTtcclxuICAgIC8qKlxyXG4gICAgICog5pWw5o2u6YCJ5oup5Zmo5by556qX5byV55SoXHJcbiAgICAgKi9cclxuICAgIGJzTW9kYWxSZWY0QmlmU2VsZWN0b3I6IEJzTW9kYWxSZWY7XHJcbiAgICAvKipcclxuICAgICAqIOeCueWHu+W8ueeql+KAnOehruWumuKAneaMiemSruaTjeS9nFxyXG4gICAgICovXHJcbiAgICBjbGlja09rNEJpZlNlbGVjdG9yOiAoKSA9PiB2b2lkID0gKCkgPT4ge1xyXG4gICAgICAgIC8v5Y+R6YCB6YCJ5Lit55qE5p2l5rqQ5Y2V5o2u5a6e5L2T5YiX6KGo5bm25YWz6Zet5qih5oCB5qGGXHJcbiAgICAgICAgdGhpcy52aWV3TW9kZWwuZnJhbWVDb250ZXh0LnJlcG9zaXRvcnkuZ2V0QnlJZCh0aGlzLnZpZXdNb2RlbC5iaW5kaW5nRGF0YS5nZXRPYmplY3QoKS5pZCkuc3Vic2NyaWJlKFxyXG4gICAgICAgICAgICAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdWJqZWN0NEVudGl0eURhdGFzLm5leHQoW2VdKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3ViamVjdDRFbnRpdHlEYXRhcy5jb21wbGV0ZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ic01vZGFsUmVmNEJpZlNlbGVjdG9yLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICog54K55Ye75by556qX4oCc5Y+W5raI4oCd5oyJ6ZKu5pON5L2cXHJcbiAgICAgKi9cclxuICAgIGNsaWNrQ2xvc2U0QmlmU2VsZWN0b3I6ICgpID0+IHZvaWQgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5zdWJqZWN0NEVudGl0eURhdGFzLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgdGhpcy5ic01vZGFsUmVmNEJpZlNlbGVjdG9yLmNsb3NlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHB1YmxpYyBmcmFtZUNvbnRleHQ6IEZyYW1lQ29udGV4dCxcclxuICAgICAgICBwdWJsaWMgdmlld01vZGVsOiBWaWV3TW9kZWwsXHJcbiAgICAgICAgcHVibGljIGNmcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxyXG4gICAgICAgIHB1YmxpYyBpbmplY3RvcjogSW5qZWN0b3IsXHJcbiAgICApIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgfVxyXG59Il19