/**
 * @fileoverview added by tsickle
 * Generated from: lib/bif-manual-creation/bif-manual-creation.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { NgModule, LOCALE_ID, NgModuleFactoryLoader, SystemJsNgModuleLoader } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { ModalModule } from '@farris/ui-modal';
import { NotifyModule } from '@farris/ui-notify';
import { MessagerModule } from '@farris/ui-messager';
import { ModuleConfig } from './config/module.config';
import { PushSelectorComponent } from './components/push-selector/push-selector.component';
import { PullSelectorComponent } from './components/pull-selector/pull-selector.component';
import { LocalePipe } from "./pipe/locale.pipe";
import { BifDataService } from './service/bif-data.service';
import { BifSourceUiService } from './service/bif-source-ui.service';
import { BifTargetUiService } from './service/bif-target-ui.service';
import { LoadingModule } from '@farris/ui-loading';
import { TreeModule } from '@farris/ui-tree';
import { DatagridModule } from '@farris/ui-datagrid';
import { AngularDraggableModule } from '@farris/ui-draggable';
import { FarrisCommonModule } from '@farris/ui-common';
import { DatagridEditorsModule, EditorProviders } from '@farris/ui-datagrid-editors';
import { TreeTableModule } from '@farris/ui-treetable';
import { InputGroupModule } from '@farris/ui-input-group';
import { LanguageTextboxModule } from '@farris/ui-language-textbox';
import { NumberSpinnerModule } from '@farris/ui-number-spinner';
import { SwitchModule } from '@farris/ui-switch';
import { FarrisSectionModule } from '@farris/ui-section';
var ɵ0 = localStorage.getItem('languageCode') || 'zh-CHS', ɵ1 = {};
var BifManualCreationModule = /** @class */ (function () {
    function BifManualCreationModule() {
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    BifManualCreationModule.forRoot = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        /** @type {?} */
        var providers = [
            { provide: ModuleConfig, useValue: config || {} },
            BifDataService,
            BifSourceUiService,
            BifTargetUiService,
        ];
        return {
            ngModule: BifManualCreationModule,
            providers: providers
        };
    };
    BifManualCreationModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        PushSelectorComponent,
                        PullSelectorComponent,
                        LocalePipe,
                    ],
                    imports: [
                        CommonModule,
                        FormsModule,
                        HttpClientModule,
                        ModalModule.forRoot(),
                        AngularDraggableModule,
                        FarrisCommonModule.forRoot(),
                        DatagridEditorsModule,
                        DatagridModule.forRoot(tslib_1.__spread(EditorProviders)),
                        TreeModule,
                        TreeTableModule,
                        LoadingModule.forRoot({
                            message: 'Loading...'
                        }),
                        NotifyModule.forRoot(),
                        MessagerModule.forRoot({
                            width: 550,
                            height: 450
                        }),
                        InputGroupModule,
                        LanguageTextboxModule,
                        NumberSpinnerModule,
                        SwitchModule,
                        FarrisSectionModule,
                    ],
                    providers: [
                        { provide: LOCALE_ID, useValue: ɵ0 },
                        { provide: ModuleConfig, useValue: ɵ1 },
                        { provide: NgModuleFactoryLoader, useClass: SystemJsNgModuleLoader },
                        BifDataService,
                        BifSourceUiService,
                        BifTargetUiService,
                    ],
                    exports: [
                        PushSelectorComponent,
                        PullSelectorComponent
                    ],
                    entryComponents: [
                        PushSelectorComponent,
                        PullSelectorComponent
                    ],
                },] }
    ];
    return BifManualCreationModule;
}());
export { BifManualCreationModule };
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,