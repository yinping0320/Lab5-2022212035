/**
 * @fileoverview added by tsickle
 * Generated from: lib/bill-tracker/utils/Base64.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
export class Base64 {
    /**
     * @param {?} input
     * @param {?} binary
     * @return {?}
     */
    static encode(input, binary) {
        binary = (binary != null) ? binary : false;
        /** @type {?} */
        let output = "";
        /** @type {?} */
        let chr1;
        /** @type {?} */
        let chr2;
        /** @type {?} */
        let chr3;
        /** @type {?} */
        let enc1;
        /** @type {?} */
        let enc2;
        /** @type {?} */
        let enc3;
        /** @type {?} */
        let enc4;
        /** @type {?} */
        let i = 0;
        if (!binary) {
            input = Base64._utf8_encode(input);
        }
        while (i < input.length) {
            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);
            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;
            if (isNaN(chr2)) {
                enc3 = enc4 = 64;
            }
            else if (isNaN(chr3)) {
                enc4 = 64;
            }
            output = output +
                Base64._keyStr.charAt(enc1) + Base64._keyStr.charAt(enc2) +
                Base64._keyStr.charAt(enc3) + Base64._keyStr.charAt(enc4);
        }
        return output;
    }
    /**
     * @param {?} string
     * @return {?}
     */
    static _utf8_encode(string) {
        string = string.replace(/\r\n/g, "\n");
        /** @type {?} */
        let utftext = "";
        for (let n = 0; n < string.length; n++) {
            /** @type {?} */
            let c = string.charCodeAt(n);
            if (c < 128) {
                utftext += String.fromCharCode(c);
            }
            else if ((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            }
            else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }
        }
        return utftext;
    }
    /**
     * @param {?} input
     * @param {?} binary
     * @return {?}
     */
    static decode(input, binary) {
        binary = (binary != null) ? binary : false;
        /** @type {?} */
        let output = "";
        /** @type {?} */
        let chr1;
        /** @type {?} */
        let chr2;
        /** @type {?} */
        let chr3;
        /** @type {?} */
        let enc1;
        /** @type {?} */
        let enc2;
        /** @type {?} */
        let enc3;
        /** @type {?} */
        let enc4;
        /** @type {?} */
        let i = 0;
        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
        while (i < input.length) {
            enc1 = this._keyStr.indexOf(input.charAt(i++));
            enc2 = this._keyStr.indexOf(input.charAt(i++));
            enc3 = this._keyStr.indexOf(input.charAt(i++));
            enc4 = this._keyStr.indexOf(input.charAt(i++));
            chr1 = (enc1 << 2) | (enc2 >> 4);
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
            chr3 = ((enc3 & 3) << 6) | enc4;
            output = output + String.fromCharCode(chr1);
            if (enc3 != 64) {
                output = output + String.fromCharCode(chr2);
            }
            if (enc4 != 64) {
                output = output + String.fromCharCode(chr3);
            }
        }
        if (!binary) {
            output = Base64._utf8_decode(output);
        }
        return output;
    }
    /**
     * @param {?} utftext
     * @return {?}
     */
    static _utf8_decode(utftext) {
        /** @type {?} */
        let string = "";
        /** @type {?} */
        let i = 0;
        /** @type {?} */
        let c = 0;
        /** @type {?} */
        let c1 = 0;
        /** @type {?} */
        let c2 = 0;
        /** @type {?} */
        let c3 = 0;
        while (i < utftext.length) {
            c = utftext.charCodeAt(i);
            if (c < 128) {
                string += String.fromCharCode(c);
                i++;
            }
            else if ((c > 191) && (c < 224)) {
                c2 = utftext.charCodeAt(i + 1);
                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                i += 2;
            }
            else {
                c2 = utftext.charCodeAt(i + 1);
                c3 = utftext.charCodeAt(i + 2);
                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                i += 3;
            }
        }
        return string;
    }
}
Base64._keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
if (false) {
    /** @type {?} */
    Base64._keyStr;
}
//# sourceMappingURL=data:application/json;base64,