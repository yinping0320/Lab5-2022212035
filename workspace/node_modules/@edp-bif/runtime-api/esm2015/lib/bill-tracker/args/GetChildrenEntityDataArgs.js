/**
 * @fileoverview added by tsickle
 * Generated from: lib/bill-tracker/args/GetChildrenEntityDataArgs.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModelJsonHelper, JsonConvertableImpl } from '@edp-aif/common-api';
export class GetChildrenEntityDataArgs extends JsonConvertableImpl {
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.voId = null;
        this.voMetadataId = null;
        this.suCode = null;
        this.nodeCodes = null;
        this.hierachyIdList = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "voId", this.voId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "voMetadataId", this.voMetadataId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "suCode", this.suCode);
        BpmnModelJsonHelper.SetAttributeValue(obj, "nodeCodes", BpmnModelJsonHelper.StringListToJson(this.nodeCodes));
        BpmnModelJsonHelper.SetAttributeValue(obj, "hierachyIdList", BpmnModelJsonHelper.StringListToJson(this.hierachyIdList));
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.voId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "voId");
        this.voMetadataId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "voMetadataId");
        this.suCode = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "suCode");
        this.nodeCodes = BpmnModelJsonHelper.StringListFromJson(BpmnModelJsonHelper.GetAttributeValueAsString(obj, "nodeCodes"));
        this.hierachyIdList = BpmnModelJsonHelper.StringListFromJson(BpmnModelJsonHelper.GetAttributeValueAsString(obj, "hierachyIdList"));
    }
}
if (false) {
    /** @type {?} */
    GetChildrenEntityDataArgs.prototype.voId;
    /** @type {?} */
    GetChildrenEntityDataArgs.prototype.voMetadataId;
    /** @type {?} */
    GetChildrenEntityDataArgs.prototype.suCode;
    /**
     * @type {?}
     * @private
     */
    GetChildrenEntityDataArgs.prototype.nodeCodes;
    /**
     * @type {?}
     * @private
     */
    GetChildrenEntityDataArgs.prototype.hierachyIdList;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2V0Q2hpbGRyZW5FbnRpdHlEYXRhQXJncy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlZHAtYmlmL3J1bnRpbWUtYXBpLyIsInNvdXJjZXMiOlsibGliL2JpbGwtdHJhY2tlci9hcmdzL0dldENoaWxkcmVuRW50aXR5RGF0YUFyZ3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUUvRSxNQUFNLE9BQU8seUJBQTBCLFNBQVEsbUJBQW1COzs7OztJQU9wRCxtQkFBbUI7UUFDekIsS0FBSyxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFFNUIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7UUFDekIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDbkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFDdEIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7SUFDL0IsQ0FBQzs7OztJQUVNLG1CQUFtQjs7WUFDbEIsR0FBRyxHQUFHLEtBQUssQ0FBQyxtQkFBbUIsRUFBRTtRQUVyQyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM5RCxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsY0FBYyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUM5RSxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsRSxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLG1CQUFtQixDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQzlHLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsRUFBRSxtQkFBbUIsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztRQUV4SCxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7Ozs7O0lBRU0sa0JBQWtCLENBQUMsR0FBTztRQUM3QixLQUFLLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFOUIsSUFBSSxDQUFDLElBQUksR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDdkUsSUFBSSxDQUFDLFlBQVksR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFFdkYsSUFBSSxDQUFDLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDM0UsSUFBSSxDQUFDLFNBQVMsR0FBRyxtQkFBbUIsQ0FBQyxrQkFBa0IsQ0FBQyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUN6SCxJQUFJLENBQUMsY0FBYyxHQUFHLG1CQUFtQixDQUFDLGtCQUFrQixDQUFDLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7SUFDdkksQ0FBQztDQUNKOzs7SUF0Q0cseUNBQWE7O0lBQ2IsaURBQXFCOztJQUNyQiwyQ0FBZTs7Ozs7SUFDZiw4Q0FBaUM7Ozs7O0lBQ2pDLG1EQUFzQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJwbW5Nb2RlbEpzb25IZWxwZXIsIEpzb25Db252ZXJ0YWJsZUltcGwgfSBmcm9tICdAZWRwLWFpZi9jb21tb24tYXBpJztcclxuXHJcbmV4cG9ydCBjbGFzcyBHZXRDaGlsZHJlbkVudGl0eURhdGFBcmdzIGV4dGVuZHMgSnNvbkNvbnZlcnRhYmxlSW1wbCB7XHJcbiAgICB2b0lkOiBzdHJpbmc7XHJcbiAgICB2b01ldGFkYXRhSWQ6IHN0cmluZztcclxuICAgIHN1Q29kZTogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBub2RlQ29kZXM6IEFycmF5PHN0cmluZz47XHJcbiAgICBwcml2YXRlIGhpZXJhY2h5SWRMaXN0OiBBcnJheTxzdHJpbmc+O1xyXG5cclxuICAgIHByb3RlY3RlZCBSZXNldEJlZm9yZUxvYWRGcm9tKCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLlJlc2V0QmVmb3JlTG9hZEZyb20oKTtcclxuXHJcbiAgICAgICAgdGhpcy52b0lkID0gbnVsbDtcclxuICAgICAgICB0aGlzLnZvTWV0YWRhdGFJZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5zdUNvZGUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMubm9kZUNvZGVzID0gbnVsbDtcclxuICAgICAgICB0aGlzLmhpZXJhY2h5SWRMaXN0ID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgQ29udmVydFRvSnNvbk9iamVjdCgpOiB7fSB7XHJcbiAgICAgICAgbGV0IG9iaiA9IHN1cGVyLkNvbnZlcnRUb0pzb25PYmplY3QoKTtcclxuXHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwidm9JZFwiLCB0aGlzLnZvSWQpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInZvTWV0YWRhdGFJZFwiLCB0aGlzLnZvTWV0YWRhdGFJZCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwic3VDb2RlXCIsIHRoaXMuc3VDb2RlKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJub2RlQ29kZXNcIiwgQnBtbk1vZGVsSnNvbkhlbHBlci5TdHJpbmdMaXN0VG9Kc29uKHRoaXMubm9kZUNvZGVzKSk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiaGllcmFjaHlJZExpc3RcIiwgQnBtbk1vZGVsSnNvbkhlbHBlci5TdHJpbmdMaXN0VG9Kc29uKHRoaXMuaGllcmFjaHlJZExpc3QpKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG9iajtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgTG9hZEZyb21Kc29uT2JqZWN0KG9iajoge30pOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5Mb2FkRnJvbUpzb25PYmplY3Qob2JqKTtcclxuXHJcbiAgICAgICAgdGhpcy52b0lkID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJ2b0lkXCIpO1xyXG4gICAgICAgIHRoaXMudm9NZXRhZGF0YUlkID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJ2b01ldGFkYXRhSWRcIik7XHJcblxyXG4gICAgICAgIHRoaXMuc3VDb2RlID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJzdUNvZGVcIik7XHJcbiAgICAgICAgdGhpcy5ub2RlQ29kZXMgPSBCcG1uTW9kZWxKc29uSGVscGVyLlN0cmluZ0xpc3RGcm9tSnNvbihCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcIm5vZGVDb2Rlc1wiKSk7XHJcbiAgICAgICAgdGhpcy5oaWVyYWNoeUlkTGlzdCA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuU3RyaW5nTGlzdEZyb21Kc29uKEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwiaGllcmFjaHlJZExpc3RcIikpO1xyXG4gICAgfVxyXG59Il19