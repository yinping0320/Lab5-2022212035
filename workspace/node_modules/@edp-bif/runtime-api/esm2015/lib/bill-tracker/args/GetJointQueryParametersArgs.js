/**
 * @fileoverview added by tsickle
 * Generated from: lib/bill-tracker/args/GetJointQueryParametersArgs.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModelJsonHelper, JsonConvertableImpl } from "@edp-aif/common-api";
import { JointQueryParametersContent } from "../../entity/tracking/JointQueryParametersContent";
export class GetJointQueryParametersArgs extends JsonConvertableImpl {
    constructor() {
        super(...arguments);
        this.contents = [];
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.trackingSourceType = null;
        this.suCode = null;
        this.schemaId = null;
        this.dataId = null;
        this.contents = [];
        this.curYear = null;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "trackingSourceType", this.trackingSourceType);
        BpmnModelJsonHelper.SetAttributeValue(obj, "suCode", this.suCode);
        BpmnModelJsonHelper.SetAttributeValue(obj, "schemaId", this.schemaId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "dataId", this.dataId);
        BpmnModelJsonHelper.SetAttributeValue(obj, "contents", this.contents);
        BpmnModelJsonHelper.SetAttributeValue(obj, "curYear", this.curYear);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.trackingSourceType = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "trackingSourceType");
        this.suCode = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "suCode");
        this.schemaId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "schemaId");
        this.dataId = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "dataId");
        this.contents = BpmnModelJsonHelper.GetAttributeValueAsList(obj, "contents", JointQueryParametersContent);
        this.curYear = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "curYear");
    }
}
if (false) {
    /** @type {?} */
    GetJointQueryParametersArgs.prototype.trackingSourceType;
    /** @type {?} */
    GetJointQueryParametersArgs.prototype.suCode;
    /** @type {?} */
    GetJointQueryParametersArgs.prototype.schemaId;
    /** @type {?} */
    GetJointQueryParametersArgs.prototype.dataId;
    /** @type {?} */
    GetJointQueryParametersArgs.prototype.curYear;
    /** @type {?} */
    GetJointQueryParametersArgs.prototype.contents;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2V0Sm9pbnRRdWVyeVBhcmFtZXRlcnNBcmdzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVkcC1iaWYvcnVudGltZS1hcGkvIiwic291cmNlcyI6WyJsaWIvYmlsbC10cmFja2VyL2FyZ3MvR2V0Sm9pbnRRdWVyeVBhcmFtZXRlcnNBcmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLG1CQUFtQixFQUFFLG1CQUFtQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDL0UsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sbURBQW1ELENBQUM7QUFFaEcsTUFBTSxPQUFPLDJCQUE0QixTQUFRLG1CQUFtQjtJQUFwRTs7UUFNSSxhQUFRLEdBQWtDLEVBQUUsQ0FBQztJQW9DakQsQ0FBQzs7Ozs7SUFsQ2EsbUJBQW1CO1FBQ3pCLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBRTVCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUM7UUFDL0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDckIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7SUFDeEIsQ0FBQzs7OztJQUVNLG1CQUFtQjs7WUFDbEIsR0FBRyxHQUFHLEtBQUssQ0FBQyxtQkFBbUIsRUFBRTtRQUVyQyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDMUYsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbEUsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEUsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbEUsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEUsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFcEUsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVNLGtCQUFrQixDQUFDLEdBQU87UUFDN0IsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxtQkFBbUIsQ0FBQyx5QkFBeUIsQ0FBQyxHQUFHLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztRQUNuRyxJQUFJLENBQUMsTUFBTSxHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUMzRSxJQUFJLENBQUMsUUFBUSxHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUMvRSxJQUFJLENBQUMsTUFBTSxHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUMzRSxJQUFJLENBQUMsUUFBUSxHQUFHLG1CQUFtQixDQUFDLHVCQUF1QixDQUFDLEdBQUcsRUFBRSxVQUFVLEVBQUUsMkJBQTJCLENBQUMsQ0FBQztRQUMxRyxJQUFJLENBQUMsT0FBTyxHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNqRixDQUFDO0NBQ0o7OztJQXpDRyx5REFBMkI7O0lBQzNCLDZDQUFlOztJQUNmLCtDQUFpQjs7SUFDakIsNkNBQWU7O0lBQ2YsOENBQWdCOztJQUNoQiwrQ0FBNkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCcG1uTW9kZWxKc29uSGVscGVyLCBKc29uQ29udmVydGFibGVJbXBsIH0gZnJvbSBcIkBlZHAtYWlmL2NvbW1vbi1hcGlcIjtcclxuaW1wb3J0IHsgSm9pbnRRdWVyeVBhcmFtZXRlcnNDb250ZW50IH0gZnJvbSBcIi4uLy4uL2VudGl0eS90cmFja2luZy9Kb2ludFF1ZXJ5UGFyYW1ldGVyc0NvbnRlbnRcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBHZXRKb2ludFF1ZXJ5UGFyYW1ldGVyc0FyZ3MgZXh0ZW5kcyBKc29uQ29udmVydGFibGVJbXBsIHtcclxuICAgIHRyYWNraW5nU291cmNlVHlwZTogc3RyaW5nO1xyXG4gICAgc3VDb2RlOiBzdHJpbmc7XHJcbiAgICBzY2hlbWFJZDogc3RyaW5nO1xyXG4gICAgZGF0YUlkOiBzdHJpbmc7XHJcbiAgICBjdXJZZWFyOiBzdHJpbmc7XHJcbiAgICBjb250ZW50czogSm9pbnRRdWVyeVBhcmFtZXRlcnNDb250ZW50W10gPSBbXTtcclxuXHJcbiAgICBwcm90ZWN0ZWQgUmVzZXRCZWZvcmVMb2FkRnJvbSgpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5SZXNldEJlZm9yZUxvYWRGcm9tKCk7XHJcblxyXG4gICAgICAgIHRoaXMudHJhY2tpbmdTb3VyY2VUeXBlID0gbnVsbDtcclxuICAgICAgICB0aGlzLnN1Q29kZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5zY2hlbWFJZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5kYXRhSWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY29udGVudHMgPSBbXTtcclxuICAgICAgICB0aGlzLmN1clllYXIgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBDb252ZXJ0VG9Kc29uT2JqZWN0KCk6IHt9IHtcclxuICAgICAgICBsZXQgb2JqID0gc3VwZXIuQ29udmVydFRvSnNvbk9iamVjdCgpO1xyXG5cclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJ0cmFja2luZ1NvdXJjZVR5cGVcIiwgdGhpcy50cmFja2luZ1NvdXJjZVR5cGUpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInN1Q29kZVwiLCB0aGlzLnN1Q29kZSk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwic2NoZW1hSWRcIiwgdGhpcy5zY2hlbWFJZCk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiZGF0YUlkXCIsIHRoaXMuZGF0YUlkKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJjb250ZW50c1wiLCB0aGlzLmNvbnRlbnRzKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJjdXJZZWFyXCIsIHRoaXMuY3VyWWVhcik7XHJcblxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIExvYWRGcm9tSnNvbk9iamVjdChvYmo6IHt9KTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuTG9hZEZyb21Kc29uT2JqZWN0KG9iaik7XHJcblxyXG4gICAgICAgIHRoaXMudHJhY2tpbmdTb3VyY2VUeXBlID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJ0cmFja2luZ1NvdXJjZVR5cGVcIik7XHJcbiAgICAgICAgdGhpcy5zdUNvZGUgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNTdHJpbmcob2JqLCBcInN1Q29kZVwiKTtcclxuICAgICAgICB0aGlzLnNjaGVtYUlkID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJzY2hlbWFJZFwiKTtcclxuICAgICAgICB0aGlzLmRhdGFJZCA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwiZGF0YUlkXCIpO1xyXG4gICAgICAgIHRoaXMuY29udGVudHMgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNMaXN0KG9iaiwgXCJjb250ZW50c1wiLCBKb2ludFF1ZXJ5UGFyYW1ldGVyc0NvbnRlbnQpO1xyXG4gICAgICAgIHRoaXMuY3VyWWVhciA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwiY3VyWWVhclwiKTtcclxuICAgIH1cclxufSJdfQ==