/**
 * @fileoverview added by tsickle
 * Generated from: lib/bill-tracker/services/bill-tracker-ui.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector, ComponentFactoryResolver, ReflectiveInjector, Inject, LOCALE_ID } from '@angular/core';
import { BsModalService } from '@farris/ui-modal';
import { BillTrackerDataService } from './bill-tracker-data.service';
import { BillTrackerComponent } from '../components/bill-tracker/bill-tracker.component';
import { BillTrackerArgs } from '../config/bill-tracker-args';
import { GetDownBillsInfoArgs } from '../../entity/tracking/GetDownBillsInfoArgs';
import { BillTrackerLocalePipe } from '../pipe/bill-tracker-locale.pipe';
import { of } from 'rxjs';
import { switchMap, catchError } from 'rxjs/operators';
import { MessagerService } from '@farris/ui-messager';
import { LoadingService } from '@farris/ui-loading';
import { FrameworkService, AppType } from '@gsp-sys/rtf-common';
import { BillTrackerConstant } from '../config/bill-tracker-constant';
import { BillTrackerGraphOptions } from '../config/bill-tracker-graph-options';
import { BillTrackerGridOptions } from '../config/bill-tracker-grid-options';
export class BillTrackerUiService {
    /**
     * @param {?} frameworkService
     * @param {?} messager
     * @param {?} loading
     * @param {?} localeId
     * @param {?} dataService
     * @param {?} modalService
     * @param {?} cfr
     * @param {?} injector
     */
    constructor(frameworkService, messager, loading, localeId, dataService, modalService, cfr, injector) {
        this.frameworkService = frameworkService;
        this.messager = messager;
        this.loading = loading;
        this.dataService = dataService;
        this.modalService = modalService;
        this.cfr = cfr;
        this.injector = injector;
        /**
         * 内置模态框配置
         */
        this.defaultModalOptions = {
            title: null,
            width: 1100,
            height: 480,
            buttons: null,
            showButtons: null,
        };
        this.localePipe = new BillTrackerLocalePipe(localeId);
    }
    /**
     * 打开单据追踪弹窗
     * todo: spa模式下，弹窗在body中，位于最上层，打开联查时会盖住新tab页，此问题待解决
     * @param {?} args 单据追踪参数
     * @param {?=} maximized 是否最大化弹窗
     * @param {?=} modalOptions 弹窗配置
     * @param {?=} graphOptions 追踪图配置
     * @param {?=} gridOptions 数据表配置
     * @return {?}
     */
    openDefaultBillTrackerDialog(args, maximized = true, modalOptions, graphOptions, gridOptions) {
        if (typeof modalOptions == "string") {
            if (modalOptions == "") {
                this.messager.info(this.localePipe.transform("modalOptionsCantBeEmpty"));
                return of(null);
            }
            modalOptions = JSON.parse(modalOptions);
        }
        /** @type {?} */
        let modalOpts = {
            title: this.localePipe.transform("billTracker")
        };
        modalOpts = Object.assign(modalOpts, this.defaultModalOptions, modalOptions);
        if (typeof graphOptions == "string") {
            if (graphOptions != "") {
                graphOptions = JSON.parse(graphOptions);
            }
            else {
                graphOptions = null;
            }
        }
        if (typeof gridOptions == "string") {
            if (gridOptions != "") {
                gridOptions = JSON.parse(gridOptions);
            }
            else {
                gridOptions = null;
            }
        }
        /** @type {?} */
        const downArgs = new GetDownBillsInfoArgs();
        downArgs.billDataId = args.billDataId;
        downArgs.documentTypeId = args.documentTypeId;
        downArgs.bizKind = args.bizKind;
        downArgs.bizType = args.bizType;
        downArgs.billChildInfos = args.billChildInfos;
        downArgs.curYear = args.curYear;
        this.loading.show({ message: this.localePipe.transform("loading") });
        return this.dataService.canTracking(downArgs).pipe(switchMap((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            if (!res.canDownTracking && !res.canUpTracking) {
                this.messager.info(this.localePipe.transform("noAssoBill"));
                this.loading.close();
                return of(null);
            }
            /** @type {?} */
            const billTrackerArgs = new BillTrackerArgs();
            billTrackerArgs.canTrackingResult = res;
            billTrackerArgs.getBillsInfoArgs = args;
            /** @type {?} */
            let graphOpt = new BillTrackerGraphOptions();
            graphOpt = Object.assign(graphOpt, graphOptions);
            billTrackerArgs.graphOptions = graphOpt;
            /** @type {?} */
            let gridOpt = new BillTrackerGridOptions();
            gridOpt = Object.assign(gridOpt, gridOptions);
            billTrackerArgs.gridOptions = gridOpt;
            /** @type {?} */
            const cmpR = this.createBillTrackerComponent(billTrackerArgs);
            this.loading.close();
            /** @type {?} */
            const modalRef = this.modalService.show(cmpR, modalOpts);
            if (maximized) {
                modalRef.dialog.instance.maxDialog();
            }
            cmpR.instance.setModalRef(modalRef);
            return of(cmpR.instance);
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            this.loading.close();
            //todo 确定异常结构, 目前采用兼容取值方式
            this.messager.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
            throw err;
        })));
    }
    /**
     * 打开单据追踪应用
     * @param {?} args 单据追踪参数
     * @param {?=} graphOptions 追踪图配置
     * @param {?=} gridOptions 数据表配置
     * @return {?}
     */
    openDefaultBillTrackerApp(args, graphOptions, gridOptions) {
        if (typeof graphOptions == "string") {
            if (graphOptions == "") {
                this.messager.info(this.localePipe.transform("modalOptionsCantBeEmpty"));
                return;
            }
            graphOptions = JSON.parse(graphOptions);
        }
        if (typeof gridOptions == "string") {
            if (gridOptions == "") {
                this.messager.info(this.localePipe.transform("modalOptionsCantBeEmpty"));
                return;
            }
            gridOptions = JSON.parse(gridOptions);
        }
        /** @type {?} */
        const downArgs = new GetDownBillsInfoArgs();
        downArgs.documentTypeId = args.documentTypeId;
        downArgs.billDataId = args.billDataId;
        downArgs.bizKind = args.bizKind;
        downArgs.bizType = args.bizType;
        downArgs.billChildInfos = args.billChildInfos;
        downArgs.curYear = args.curYear;
        this.loading.show({ message: this.localePipe.transform("loading") });
        this.dataService.canTracking(downArgs).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            if (!res.canDownTracking && !res.canUpTracking) {
                this.messager.info(this.localePipe.transform("noAssoBill"));
                this.loading.close();
                return;
            }
            /** @type {?} */
            const billTrackerArgs = new BillTrackerArgs();
            // warning：如果存在特殊字符或者长度超长，可能会打开空白的单据追踪应用
            billTrackerArgs.canTrackingResult = res;
            billTrackerArgs.getBillsInfoArgs = args;
            /** @type {?} */
            let graphOpt = new BillTrackerGraphOptions();
            graphOpt = Object.assign(graphOpt, graphOptions);
            billTrackerArgs.graphOptions = graphOpt;
            /** @type {?} */
            let gridOpt = new BillTrackerGridOptions();
            gridOpt = Object.assign(gridOpt, gridOptions);
            billTrackerArgs.gridOptions = gridOpt;
            /** @type {?} */
            const opt = {
                appId: BillTrackerConstant.DEFAULT_APP_ID,
                appEntrance: BillTrackerConstant.DEFAULT_APP_ENTRANCE,
                funcId: BillTrackerConstant.DEFAULT_FUNC_ID,
                tabId: "billTracker" + Date.now(),
                tabName: this.localePipe.transform("billTracker"),
                appType: AppType.App,
                entityParams: billTrackerArgs,
                queryStringParams: this.buildQueryMap(billTrackerArgs),
                isReload: undefined,
            };
            this.frameworkService.openMenu(opt);
            this.loading.close();
        }), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            this.loading.close();
            //todo 确定异常结构, 目前采用兼容取值方式
            this.messager.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
            throw err;
        }));
    }
    /**
     * 创建单据追踪组件
     * @param {?} billTrackerArgs 单据追踪参数
     * @param {?=} cfr ComponentFactoryResolver
     * @param {?=} injector Injector
     * @param {?=} custProviders 自定义Provider
     * @return {?}
     */
    createBillTrackerComponent(billTrackerArgs, cfr, injector, custProviders) {
        cfr = cfr == null ? this.cfr : cfr;
        injector = injector == null ? this.injector : injector;
        custProviders = custProviders == null || Array.isArray(custProviders) == false ? [] : custProviders;
        /** @type {?} */
        const inj = ReflectiveInjector.resolveAndCreate([
            { provide: BillTrackerArgs, useValue: billTrackerArgs },
            ...custProviders
        ], injector);
        /** @type {?} */
        const cmpF = cfr.resolveComponentFactory(BillTrackerComponent);
        /** @type {?} */
        const cmpR = cmpF.create(inj);
        return cmpR;
    }
    /**
     * 能否继续追踪
     * @param {?} args
     * @return {?}
     */
    canTracking(args) {
        return this.dataService.canTracking(args);
    }
    /**
     * 获取下游单据信息
     * @param {?} args
     * @return {?}
     */
    getDownBillsInfo(args) {
        return this.dataService.getDownBillsInfo(args);
    }
    /**
     * 获取上游单据信息
     * @param {?} args
     * @return {?}
     */
    getUpBillsInfo(args) {
        return this.dataService.getUpBillsInfo(args);
    }
    /**
     * 查询实体数据
     * @param {?} args
     * @return {?}
     */
    getEntityData(args) {
        return this.dataService.getEntityData(args);
    }
    /**
     * @private
     * @param {?} billTrackerArgs
     * @return {?}
     */
    buildQueryMap(billTrackerArgs) {
        /** @type {?} */
        let map = new Map();
        for (let key in billTrackerArgs) {
            /** @type {?} */
            let value = billTrackerArgs[key];
            if (typeof value == "object") {
                value = value && JSON.stringify(value);
            }
            // url编码后base64加密，避免url中出现特殊字符
            // 在default-bill-tracker中解码时应先atob在decodeURIComponent
            map.set(key, btoa(encodeURIComponent(value)));
        }
        return map;
    }
}
BillTrackerUiService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BillTrackerUiService.ctorParameters = () => [
    { type: FrameworkService },
    { type: MessagerService },
    { type: LoadingService },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: BillTrackerDataService },
    { type: BsModalService },
    { type: ComponentFactoryResolver },
    { type: Injector }
];
if (false) {
    /**
     * 内置模态框配置
     * @type {?}
     */
    BillTrackerUiService.prototype.defaultModalOptions;
    /** @type {?} */
    BillTrackerUiService.prototype.localePipe;
    /** @type {?} */
    BillTrackerUiService.prototype.frameworkService;
    /** @type {?} */
    BillTrackerUiService.prototype.messager;
    /** @type {?} */
    BillTrackerUiService.prototype.loading;
    /** @type {?} */
    BillTrackerUiService.prototype.dataService;
    /** @type {?} */
    BillTrackerUiService.prototype.modalService;
    /** @type {?} */
    BillTrackerUiService.prototype.cfr;
    /** @type {?} */
    BillTrackerUiService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,