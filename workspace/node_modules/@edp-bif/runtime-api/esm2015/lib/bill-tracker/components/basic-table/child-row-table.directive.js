/**
 * @fileoverview added by tsickle
 * Generated from: lib/bill-tracker/components/basic-table/child-row-table.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, ViewContainerRef, ComponentFactoryResolver, Output, EventEmitter, ChangeDetectorRef } from '@angular/core';
import { BasicTableComponent } from './basic-table.component';
import { BillDataRow, BillDataTable, BillSchemaTable } from '@edp-aif/common-api';
import { BillInfo } from '../../../entity/tracking/BillInfo';
export class ChildRowTableDirective {
    /**
     * @param {?} cfr
     * @param {?} vcRef
     * @param {?} cdr
     */
    constructor(cfr, vcRef, cdr) {
        this.cfr = cfr;
        this.vcRef = vcRef;
        this.cdr = cdr;
        this.hasChildren = new EventEmitter();
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set expanded(val) {
        this._expanded = val;
        if (val) {
            this.showChildTable();
        }
        else {
            this.clearChildTable();
        }
    }
    /**
     * @return {?}
     */
    get expanded() {
        return this._expanded;
    }
    /**
     * @return {?}
     */
    showChildTable() {
        if (this.parentRow == null) {
            return;
        }
        this.clearChildTable();
        /** @type {?} */
        const cmpF = this.cfr.resolveComponentFactory(BasicTableComponent);
        for (let childTable of this.parentRow.GetChildTableList()) {
            /** @type {?} */
            const cmpR = this.vcRef.createComponent(cmpF);
            cmpR.instance.billInfo = this.billInfo;
            cmpR.instance.isMain = false;
            cmpR.instance.showTable(this.parentSchemaTable.GetChildTableMap()[childTable.tableName], childTable);
            this.vcRef.insert(cmpR.hostView);
        }
        this.cdr.markForCheck();
    }
    /**
     * @return {?}
     */
    clearChildTable() {
        this.vcRef.clear();
    }
}
ChildRowTableDirective.decorators = [
    { type: Directive, args: [{
                selector: '[appChildRowTable]'
            },] }
];
/** @nocollapse */
ChildRowTableDirective.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: ViewContainerRef },
    { type: ChangeDetectorRef }
];
ChildRowTableDirective.propDecorators = {
    billInfo: [{ type: Input, args: ["billInfo",] }],
    colspan: [{ type: Input, args: ["colspan",] }],
    parentRow: [{ type: Input, args: ["parentRow",] }],
    parentSchemaTable: [{ type: Input, args: ["parentSchemaTable",] }],
    parentDataTable: [{ type: Input, args: ["parentDataTable",] }],
    expanded: [{ type: Input, args: ["expanded",] }],
    hasChildren: [{ type: Output, args: ["hasChildren",] }]
};
if (false) {
    /** @type {?} */
    ChildRowTableDirective.prototype.billInfo;
    /** @type {?} */
    ChildRowTableDirective.prototype.colspan;
    /** @type {?} */
    ChildRowTableDirective.prototype.parentRow;
    /** @type {?} */
    ChildRowTableDirective.prototype.parentSchemaTable;
    /** @type {?} */
    ChildRowTableDirective.prototype.parentDataTable;
    /**
     * @type {?}
     * @private
     */
    ChildRowTableDirective.prototype._expanded;
    /** @type {?} */
    ChildRowTableDirective.prototype.hasChildren;
    /**
     * @type {?}
     * @private
     */
    ChildRowTableDirective.prototype.cfr;
    /** @type {?} */
    ChildRowTableDirective.prototype.vcRef;
    /** @type {?} */
    ChildRowTableDirective.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hpbGQtcm93LXRhYmxlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlZHAtYmlmL3J1bnRpbWUtYXBpLyIsInNvdXJjZXMiOlsibGliL2JpbGwtdHJhY2tlci9jb21wb25lbnRzL2Jhc2ljLXRhYmxlL2NoaWxkLXJvdy10YWJsZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxnQkFBZ0IsRUFBRSx3QkFBd0IsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RJLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlELE9BQU8sRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2xGLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUs3RCxNQUFNLE9BQU8sc0JBQXNCOzs7Ozs7SUFrQ2pDLFlBQ1UsR0FBNkIsRUFDOUIsS0FBdUIsRUFDdkIsR0FBc0I7UUFGckIsUUFBRyxHQUFILEdBQUcsQ0FBMEI7UUFDOUIsVUFBSyxHQUFMLEtBQUssQ0FBa0I7UUFDdkIsUUFBRyxHQUFILEdBQUcsQ0FBbUI7UUFML0IsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBVyxDQUFDO0lBTXRDLENBQUM7Ozs7O0lBckJMLElBQ0ksUUFBUSxDQUFDLEdBQVk7UUFDdkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUM7UUFDckIsSUFBSSxHQUFHLEVBQUU7WUFDUCxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDdkI7YUFBTTtZQUNMLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztTQUN4QjtJQUNILENBQUM7Ozs7SUFFRCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQzs7OztJQVdELGNBQWM7UUFDWixJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxFQUFFO1lBQzFCLE9BQU87U0FDUjtRQUNELElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQzs7Y0FDakIsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsbUJBQW1CLENBQUM7UUFFbEUsS0FBSyxJQUFJLFVBQVUsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLGlCQUFpQixFQUFFLEVBQUU7O2tCQUNuRCxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDO1lBQzdDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7WUFDdkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1lBQzdCLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsRUFBRSxVQUFVLENBQUMsQ0FBQztZQUNyRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDbEM7UUFFRCxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzFCLENBQUM7Ozs7SUFFRCxlQUFlO1FBQ2IsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNyQixDQUFDOzs7WUEvREYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxvQkFBb0I7YUFDL0I7Ozs7WUFQNEMsd0JBQXdCO1lBQTFDLGdCQUFnQjtZQUFrRCxpQkFBaUI7Ozt1QkFTM0csS0FBSyxTQUFDLFVBQVU7c0JBR2hCLEtBQUssU0FBQyxTQUFTO3dCQUdmLEtBQUssU0FBQyxXQUFXO2dDQUdqQixLQUFLLFNBQUMsbUJBQW1COzhCQUd6QixLQUFLLFNBQUMsaUJBQWlCO3VCQUl2QixLQUFLLFNBQUMsVUFBVTswQkFjaEIsTUFBTSxTQUFDLGFBQWE7Ozs7SUE5QnJCLDBDQUNtQjs7SUFFbkIseUNBQ2dCOztJQUVoQiwyQ0FDdUI7O0lBRXZCLG1EQUNtQzs7SUFFbkMsaURBQytCOzs7OztJQUUvQiwyQ0FBMkI7O0lBZTNCLDZDQUMwQzs7Ozs7SUFHeEMscUNBQXFDOztJQUNyQyx1Q0FBOEI7O0lBQzlCLHFDQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIFZpZXdDb250YWluZXJSZWYsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEJhc2ljVGFibGVDb21wb25lbnQgfSBmcm9tICcuL2Jhc2ljLXRhYmxlLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEJpbGxEYXRhUm93LCBCaWxsRGF0YVRhYmxlLCBCaWxsU2NoZW1hVGFibGUgfSBmcm9tICdAZWRwLWFpZi9jb21tb24tYXBpJztcclxuaW1wb3J0IHsgQmlsbEluZm8gfSBmcm9tICcuLi8uLi8uLi9lbnRpdHkvdHJhY2tpbmcvQmlsbEluZm8nO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgc2VsZWN0b3I6ICdbYXBwQ2hpbGRSb3dUYWJsZV0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDaGlsZFJvd1RhYmxlRGlyZWN0aXZlIHtcclxuICBASW5wdXQoXCJiaWxsSW5mb1wiKVxyXG4gIGJpbGxJbmZvOiBCaWxsSW5mbztcclxuXHJcbiAgQElucHV0KFwiY29sc3BhblwiKVxyXG4gIGNvbHNwYW46IG51bWJlcjtcclxuXHJcbiAgQElucHV0KFwicGFyZW50Um93XCIpXHJcbiAgcGFyZW50Um93OiBCaWxsRGF0YVJvdztcclxuXHJcbiAgQElucHV0KFwicGFyZW50U2NoZW1hVGFibGVcIilcclxuICBwYXJlbnRTY2hlbWFUYWJsZTogQmlsbFNjaGVtYVRhYmxlO1xyXG5cclxuICBASW5wdXQoXCJwYXJlbnREYXRhVGFibGVcIilcclxuICBwYXJlbnREYXRhVGFibGU6IEJpbGxEYXRhVGFibGU7XHJcblxyXG4gIHByaXZhdGUgX2V4cGFuZGVkOiBib29sZWFuO1xyXG4gIEBJbnB1dChcImV4cGFuZGVkXCIpXHJcbiAgc2V0IGV4cGFuZGVkKHZhbDogYm9vbGVhbikge1xyXG4gICAgdGhpcy5fZXhwYW5kZWQgPSB2YWw7XHJcbiAgICBpZiAodmFsKSB7XHJcbiAgICAgIHRoaXMuc2hvd0NoaWxkVGFibGUoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuY2xlYXJDaGlsZFRhYmxlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXQgZXhwYW5kZWQoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5fZXhwYW5kZWQ7XHJcbiAgfVxyXG5cclxuICBAT3V0cHV0KFwiaGFzQ2hpbGRyZW5cIilcclxuICBoYXNDaGlsZHJlbiA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGNmcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxyXG4gICAgcHVibGljIHZjUmVmOiBWaWV3Q29udGFpbmVyUmVmLFxyXG4gICAgcHVibGljIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgKSB7IH1cclxuXHJcbiAgc2hvd0NoaWxkVGFibGUoKSB7XHJcbiAgICBpZiAodGhpcy5wYXJlbnRSb3cgPT0gbnVsbCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLmNsZWFyQ2hpbGRUYWJsZSgpO1xyXG4gICAgY29uc3QgY21wRiA9IHRoaXMuY2ZyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KEJhc2ljVGFibGVDb21wb25lbnQpO1xyXG5cclxuICAgIGZvciAobGV0IGNoaWxkVGFibGUgb2YgdGhpcy5wYXJlbnRSb3cuR2V0Q2hpbGRUYWJsZUxpc3QoKSkge1xyXG4gICAgICBjb25zdCBjbXBSID0gdGhpcy52Y1JlZi5jcmVhdGVDb21wb25lbnQoY21wRik7XHJcbiAgICAgIGNtcFIuaW5zdGFuY2UuYmlsbEluZm8gPSB0aGlzLmJpbGxJbmZvO1xyXG4gICAgICBjbXBSLmluc3RhbmNlLmlzTWFpbiA9IGZhbHNlO1xyXG4gICAgICBjbXBSLmluc3RhbmNlLnNob3dUYWJsZSh0aGlzLnBhcmVudFNjaGVtYVRhYmxlLkdldENoaWxkVGFibGVNYXAoKVtjaGlsZFRhYmxlLnRhYmxlTmFtZV0sIGNoaWxkVGFibGUpO1xyXG4gICAgICB0aGlzLnZjUmVmLmluc2VydChjbXBSLmhvc3RWaWV3KTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcclxuICB9XHJcblxyXG4gIGNsZWFyQ2hpbGRUYWJsZSgpIHtcclxuICAgIHRoaXMudmNSZWYuY2xlYXIoKTtcclxuICB9XHJcbn1cclxuIl19