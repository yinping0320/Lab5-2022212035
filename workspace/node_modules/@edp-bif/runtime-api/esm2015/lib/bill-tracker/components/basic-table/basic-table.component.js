/**
 * @fileoverview added by tsickle
 * Generated from: lib/bill-tracker/components/basic-table/basic-table.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewContainerRef, Injector, ComponentFactoryResolver, ViewChild, TemplateRef, ChangeDetectionStrategy, ChangeDetectorRef } from "@angular/core";
import { DataType, BpmnModelJsonHelper } from '@edp-aif/common-api';
import { BillTrackingSettings, BillTrackingDataShownMode } from "@edp-bif/common-api";
import { BillFrontField } from './BillFrontField';
import { BillFrontDataRow } from './BillFrontDataRow';
export class BasicTableComponent {
    /**
     * @param {?} viewContainerRef
     * @param {?} inj
     * @param {?} cfr
     * @param {?} cdr
     */
    constructor(viewContainerRef, inj, cfr, cdr) {
        this.viewContainerRef = viewContainerRef;
        this.inj = inj;
        this.cfr = cfr;
        this.cdr = cdr;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} item
     * @param {?} evt
     * @return {?}
     */
    clickHandler(item, evt) {
        item['expanded'] = !item['expanded'];
    }
    /**
     * @param {?} res
     * @return {?}
     */
    showMainTable(res) {
        this.showTable(res.billSchema.mainTable, res.billData.mainTable);
    }
    /**
     * @param {?} schemaTable
     * @param {?} dataTable
     * @return {?}
     */
    showTable(schemaTable, dataTable) {
        this.billSchemaTable = schemaTable;
        this.billDataTable = dataTable;
        this.loadData(schemaTable.getFieldList(), dataTable.GetRowList());
        this.cdr.detectChanges();
    }
    /**
     * @param {?} billSchemaFields
     * @param {?} billDataRows
     * @return {?}
     */
    loadData(billSchemaFields, billDataRows) {
        this.fields = billSchemaFields;
        this.rows = billDataRows;
        /** @type {?} */
        let bts = new BillTrackingSettings();
        if (this.billInfo && this.billInfo.billTrackingSettings) {
            bts.LoadFromJson(this.billInfo.billTrackingSettings);
        }
        if (bts.billTrackingDataShownMode == BillTrackingDataShownMode.CUSTOMFIELD) {
            this.ffields = this.extractFFieldsWithCustomFields(billSchemaFields, bts.customFieldContent);
            this.frows = this.extractFRows(billDataRows, this.ffields);
        }
        else {
            this.ffields = this.extractFFields(billSchemaFields);
            this.frows = this.extractFRows(billDataRows, this.ffields);
        }
    }
    /**
     * 默认展示方式
     * @private
     * @param {?} fields
     * @return {?}
     */
    extractFFields(fields) {
        /** @type {?} */
        let ffields = [];
        for (let field of fields) {
            //枚举或者枚举型单值UDT时默认取Name
            if (field.fieldType == "Enum" || field.fieldType == "EnumSingleUdt") {
                /** @type {?} */
                let ff = new BillFrontField();
                ff.fieldName = field.fieldName;
                ff.dataType = field.dataType;
                ff.caption = field.caption;
                ff.fieldType = field.fieldType;
                ff.length = field.length;
                ff.precision = field.precision;
                ff.scale = field.scale;
                ff.captionPath = this.extractCaptionPath(field);
                ff.fieldPath = this.extractFieldPath(field) + ".Name";
                ffields.push(ff);
            }
            else if (field.GetSubFieldList() != null && field.GetSubFieldList().length > 0) {
                ffields.push(...this.extractFSubFields(field.GetSubFieldList()));
            }
            else {
                /** @type {?} */
                let ff = new BillFrontField();
                ff.fieldName = field.fieldName;
                ff.dataType = field.dataType;
                ff.caption = field.caption;
                ff.fieldType = field.fieldType;
                ff.length = field.length;
                ff.precision = field.precision;
                ff.scale = field.scale;
                ff.captionPath = this.extractCaptionPath(field);
                ff.fieldPath = this.extractFieldPath(field);
                ffields.push(ff);
            }
        }
        return ffields;
    }
    /**
     * @private
     * @param {?} fields
     * @param {?=} parentField
     * @return {?}
     */
    extractFSubFields(fields, parentField) {
        /** @type {?} */
        let ffields = [];
        for (let field of fields) {
            //枚举或者枚举型单值UDT时默认取Name
            if (field.fieldType == "Enum" || field.fieldType == "EnumSingleUdt") {
                /** @type {?} */
                let ff = new BillFrontField();
                ff.fieldName = field.fieldName;
                ff.dataType = field.dataType;
                ff.caption = field.caption;
                ff.fieldType = field.fieldType;
                ff.length = field.length;
                ff.precision = field.precision;
                ff.scale = field.scale;
                ff.captionPath = this.extractCaptionPath(field);
                ff.fieldPath = this.extractFieldPath(field) + ".Name";
                ffields.push(ff);
            }
            else if (field.GetSubFieldList() != null && field.GetSubFieldList().length > 0) {
                ffields.push(...this.extractFSubFields(field.GetSubFieldList()));
            }
            else {
                /** @type {?} */
                let ff = new BillFrontField();
                ff.fieldName = field.fieldName;
                ff.dataType = field.dataType;
                ff.caption = field.caption;
                ff.fieldType = field.fieldType;
                ff.length = field.length;
                ff.precision = field.precision;
                ff.scale = field.scale;
                ff.captionPath = this.extractCaptionPath(field);
                ff.fieldPath = this.extractFieldPath(field);
                ffields.push(ff);
            }
        }
        return ffields;
    }
    /**
     * 自定义字段展示方式
     * @private
     * @param {?} fields
     * @param {?} fieldContent
     * @return {?}
     */
    extractFFieldsWithCustomFields(fields, fieldContent) {
        // 表code
        /** @type {?} */
        const tableCode = this.billSchemaTable.tableName;
        // 单据追踪配置
        /** @type {?} */
        let bts = new BillTrackingSettings();
        if (this.billInfo && this.billInfo.billTrackingSettings) {
            bts.LoadFromJson(this.billInfo.billTrackingSettings);
        }
        /** @type {?} */
        let fieldConfig = typeof fieldContent == "object" ? fieldContent : JSON.parse(fieldContent);
        /** @type {?} */
        let ffields = [];
        for (let field of fields) {
            // 字段ID
            /** @type {?} */
            const fieldPath = this.extractFieldPath(field);
            /** @type {?} */
            let sf = null;
            for (let k in fieldConfig.schema) {
                if (k == 'selectedAll') {
                    continue;
                }
                if (k == tableCode) {
                    /** @type {?} */
                    const s = fieldConfig.schema[k];
                    sf = s && s.fields.find((/**
                     * @param {?} elt
                     * @return {?}
                     */
                    (elt) => elt.fieldPath == fieldPath));
                    break;
                }
            }
            if (sf == null) {
                continue;
            }
            //枚举或者枚举型单值UDT时默认取Name
            if (field.fieldType == "Enum" || field.fieldType == "EnumSingleUdt") {
                /** @type {?} */
                let ff = new BillFrontField();
                ff.fieldName = field.fieldName;
                ff.dataType = field.dataType;
                ff.caption = field.caption;
                ff.fieldType = field.fieldType;
                ff.length = field.length;
                ff.precision = field.precision;
                ff.scale = field.scale;
                ff.captionPath = sf.displayName || field.caption;
                ff.fieldPath = this.extractFieldPath(field) + ".Name";
                ffields.push(ff);
            }
            else if (field.GetSubFieldList() != null && field.GetSubFieldList().length > 0) {
                ffields.push(...this.extractFSubFieldsWithCustomFields(field.GetSubFieldList(), fieldContent, field));
            }
            else {
                /** @type {?} */
                let ff = new BillFrontField();
                ff.fieldName = field.fieldName;
                ff.dataType = field.dataType;
                ff.caption = field.caption;
                ff.fieldType = field.fieldType;
                ff.length = field.length;
                ff.precision = field.precision;
                ff.scale = field.scale;
                ff.captionPath = sf.displayName || field.caption;
                ff.fieldPath = this.extractFieldPath(field);
                ffields.push(ff);
            }
        }
        return ffields;
    }
    /**
     * @private
     * @param {?} fields
     * @param {?} fieldContent
     * @param {?=} parentField
     * @return {?}
     */
    extractFSubFieldsWithCustomFields(fields, fieldContent, parentField) {
        // 表编号
        /** @type {?} */
        const tableCode = this.billSchemaTable.tableName;
        // 单据追踪配置
        /** @type {?} */
        let bts = new BillTrackingSettings();
        if (this.billInfo && this.billInfo.billTrackingSettings) {
            bts.LoadFromJson(this.billInfo.billTrackingSettings);
        }
        /** @type {?} */
        let fieldConfig = typeof fieldContent == "object" ? fieldContent : JSON.parse(fieldContent);
        /** @type {?} */
        let ffields = [];
        for (let field of fields) {
            // 字段ID
            /** @type {?} */
            const fieldPath = this.extractFieldPath(field);
            /** @type {?} */
            let sf = null;
            for (let k in fieldConfig.schema) {
                if (k == 'selectedAll') {
                    continue;
                }
                if (k == tableCode) {
                    /** @type {?} */
                    const s = fieldConfig.schema[k];
                    sf = s && s.fields.find((/**
                     * @param {?} elt
                     * @return {?}
                     */
                    (elt) => elt.fieldPath == fieldPath));
                    break;
                }
            }
            if (sf == null) {
                continue;
            }
            //枚举或者枚举型单值UDT时默认取Name
            if (field.fieldType == "Enum" || field.fieldType == "EnumSingleUdt") {
                /** @type {?} */
                let ff = new BillFrontField();
                ff.fieldName = field.fieldName;
                ff.dataType = field.dataType;
                ff.caption = field.caption;
                ff.fieldType = field.fieldType;
                ff.length = field.length;
                ff.precision = field.precision;
                ff.scale = field.scale;
                ff.captionPath = sf.displayName || field.caption;
                ff.fieldPath = this.extractFieldPath(field) + ".Name";
                ffields.push(ff);
            }
            else if (field.GetSubFieldList() != null && field.GetSubFieldList().length > 0) {
                ffields.push(...this.extractFSubFieldsWithCustomFields(field.GetSubFieldList(), fieldContent, field));
            }
            else {
                /** @type {?} */
                let ff = new BillFrontField();
                ff.fieldName = field.fieldName;
                ff.dataType = field.dataType;
                ff.caption = field.caption;
                ff.fieldType = field.fieldType;
                ff.length = field.length;
                ff.precision = field.precision;
                ff.scale = field.scale;
                ff.captionPath = sf.displayName || field.caption;
                ff.fieldPath = this.extractFieldPath(field);
                ffields.push(ff);
            }
        }
        return ffields;
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    extractCaptionPath(field) {
        /** @type {?} */
        let s = field.caption;
        /** @type {?} */
        let tmp = (/** @type {?} */ (field));
        while (tmp.attachedField != null) {
            s = tmp.attachedField.caption + "." + s;
            tmp = (/** @type {?} */ (tmp.attachedField));
        }
        return s;
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    extractFieldPath(field) {
        /** @type {?} */
        let s = field.fieldName;
        /** @type {?} */
        let tmp = (/** @type {?} */ (field));
        while (tmp.attachedField != null) {
            s = tmp.attachedField.fieldName + "." + s;
            tmp = (/** @type {?} */ (tmp.attachedField));
        }
        return s;
    }
    /**
     * @private
     * @param {?} rows
     * @param {?} ffields
     * @return {?}
     */
    extractFRows(rows, ffields) {
        /** @type {?} */
        let frows = [];
        for (let row of rows) {
            /** @type {?} */
            let fr = new BillFrontDataRow();
            fr.expanded = row.GetChildTableList().length == 0 ? null : row.attachedTable && row.attachedTable.attachedRow == null ? true : false;
            fr.hasChildren = this.hasChildren(row);
            fr.data = {};
            for (let ff of ffields) {
                fr.data[ff.fieldPath] = this.extractFieldPathValue(row.GetFieldMap(), ff.fieldPath);
            }
            frows.push(fr);
        }
        return frows;
    }
    /**
     * @param {?} row
     * @return {?}
     */
    hasChildren(row) {
        /** @type {?} */
        let flag = row.GetChildTableList() && row.GetChildTableList().length > 0;
        if (flag) {
            /** @type {?} */
            let cf = false;
            for (let ct of row.GetChildTableList()) {
                if (ct.GetRowList() && ct.GetRowList().length > 0) {
                    cf = true;
                    break;
                }
            }
            flag = cf;
        }
        return flag;
    }
    /**
     * @param {?} billDataFieldMap
     * @param {?} fieldPath
     * @return {?}
     */
    extractFieldPathValue(billDataFieldMap, fieldPath) {
        /** @type {?} */
        let fields = fieldPath.split(".");
        /** @type {?} */
        let bdf = billDataFieldMap[fields[0]];
        for (let i = 1; bdf != null && i < fields.length; i++) {
            /** @type {?} */
            const temp = bdf.GetSubFieldMap();
            if (temp == null) {
                break;
            }
            bdf = temp[fields[i]];
        }
        return bdf ? bdf.GetTextValue() : "";
    }
    /**
     * @param {?} obj
     * @param {?} ffield
     * @return {?}
     */
    getShownText(obj, ffield) {
        if (obj[ffield.fieldPath] == null) {
            return "";
        }
        if (ffield.dataType == DataType.String) {
            return obj[ffield.fieldPath] || "";
        }
        else if (ffield.dataType == DataType.Decimal) {
            /** @type {?} */
            let dec = parseFloat(String(obj[ffield.fieldPath])).toFixed(ffield.scale).toString();
            return dec || "";
        }
        else if (ffield.dataType == DataType.DateTime) {
            /** @type {?} */
            let date = BpmnModelJsonHelper.DateTimeFromString(obj[ffield.fieldPath]);
            if (ffield.fieldType == "DateTime") {
                return this.dateFormat(date, "yyyy-MM-dd HH:mm:ss.SSS");
            }
            else if (ffield.fieldType == "Date") {
                return this.dateFormat(date, "yyyy-MM-dd");
            }
            else {
                return this.dateFormat(date, "yyyy-MM-dd");
            }
        }
        else {
            return obj[ffield.fieldPath] || "";
        }
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    isObject(obj) {
        return typeof (obj) == "object";
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    isArray(obj) {
        return Array.isArray(obj);
    }
    /**
     * @private
     * @param {?} date
     * @param {?} fmt
     * @return {?}
     */
    dateFormat(date, fmt) {
        /** @type {?} */
        let ret;
        /** @type {?} */
        const opt = {
            "y+": date.getUTCFullYear().toString(),
            // 年
            "M+": (date.getUTCMonth() + 1).toString(),
            // 月
            "d+": date.getUTCDate().toString(),
            // 日
            "H+": date.getUTCHours().toString(),
            // 时
            "m+": date.getUTCMinutes().toString(),
            // 分
            "s+": date.getUTCSeconds().toString(),
            // 秒
            "S+": date.getUTCMilliseconds().toString(),
        };
        for (let k in opt) {
            ret = new RegExp("(" + k + ")").exec(fmt);
            if (ret) {
                if (!String.prototype.padStart) {
                    fmt = fmt.replace(ret[1], (ret[1].length == 1) ? (opt[k]) : (this.myPadStart(opt[k], ret[1].length, "0")));
                }
                else {
                    fmt = fmt.replace(ret[1], (ret[1].length == 1) ? (opt[k]) : (opt[k].padStart(ret[1].length, "0")));
                }
            }
        }
        return fmt;
    }
    /**
     * @private
     * @param {?} src
     * @param {?} targetLength
     * @param {?} padString
     * @return {?}
     */
    myPadStart(src, targetLength, padString) {
        targetLength = targetLength >> 0; //floor if number or convert non-number to 0;
        padString = String(typeof padString !== 'undefined' ? padString : ' ');
        if (src.length > targetLength) {
            return String(src);
        }
        else {
            targetLength = targetLength - src.length;
            if (targetLength > padString.length) {
                padString += padString.repeat(targetLength / padString.length); //append to original to ensure we are longer than needed
            }
            return padString.slice(0, targetLength) + String(src);
        }
    }
}
BasicTableComponent.decorators = [
    { type: Component, args: [{
                selector: "app-basic-table",
                template: "<table class=\"table table-striped table-hover text-nowrap\" [ngStyle]=\"{'margin-left': isMain ? null : '24px'}\"\r\n    style=\"min-width: 100%; width: auto;\" *ngIf=\"ffields && ffields.length > 0 && frows && frows.length > 0\">\r\n    <thead class=\"thead-light\">\r\n        <tr>\r\n            <th style=\"width: 40px;\"><span></span></th>\r\n            <th *ngFor=\"let ffield of ffields\">\r\n                <span>{{ffield.captionPath}}</span>\r\n            </th>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n        <ng-container *ngFor=\"let frow of frows;let rowIdx = index;\">\r\n            <tr #tr>\r\n                <td>\r\n                    <span *ngIf=\"frow.hasChildren\" style=\"cursor:pointer;\" (click)=\"clickHandler(frow, $event)\"\r\n                        [ngClass]=\"{'k-icon': true, 'k-i-plus-outline': !frow.expanded, 'k-i-minus-outline': frow.expanded}\"></span>\r\n                </td>\r\n                <ng-container *ngFor=\"let ffield of ffields\">\r\n                    <td>\r\n                        <span>{{getShownText(frow.data, ffield)}}</span>\r\n                        <span *ngIf=\"ffield.showMore\" class=\"f-icon f-icon-more\"></span>\r\n                    </td>\r\n                </ng-container>\r\n            </tr>\r\n            <tr *ngIf=\"frow.expanded&&frow.hasChildren\">\r\n                <td [attr.colspan]=\"tr.cells.length\">\r\n                    <ng-container appChildRowTable [parentRow]=\"rows[rowIdx]\" [parentSchemaTable]=\"billSchemaTable\"\r\n                        [parentDataTable]=\"billDataTable\" [billInfo]=\"billInfo\" [expanded]=\"frow.expanded\"\r\n                        [colspan]=\"tr.cells.length\">\r\n                    </ng-container>\r\n                </td>\r\n            </tr>\r\n        </ng-container>\r\n    </tbody>\r\n    <tfoot>\r\n    </tfoot>\r\n</table>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: ["./basic-table.component.css"]
            }] }
];
/** @nocollapse */
BasicTableComponent.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: ChangeDetectorRef }
];
BasicTableComponent.propDecorators = {
    childTrTable: [{ type: ViewChild, args: ["childTrTable",] }],
    childTrTableVCR: [{ type: ViewChild, args: ["childTrTable", { read: ViewContainerRef },] }]
};
if (false) {
    /** @type {?} */
    BasicTableComponent.prototype.billInfo;
    /** @type {?} */
    BasicTableComponent.prototype.isMain;
    /** @type {?} */
    BasicTableComponent.prototype.billSchemaTable;
    /** @type {?} */
    BasicTableComponent.prototype.billDataTable;
    /** @type {?} */
    BasicTableComponent.prototype.fields;
    /** @type {?} */
    BasicTableComponent.prototype.rows;
    /** @type {?} */
    BasicTableComponent.prototype.ffields;
    /** @type {?} */
    BasicTableComponent.prototype.frows;
    /** @type {?} */
    BasicTableComponent.prototype.childTrTable;
    /** @type {?} */
    BasicTableComponent.prototype.childTrTableVCR;
    /** @type {?} */
    BasicTableComponent.prototype.viewContainerRef;
    /** @type {?} */
    BasicTableComponent.prototype.inj;
    /** @type {?} */
    BasicTableComponent.prototype.cfr;
    /** @type {?} */
    BasicTableComponent.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,