/**
 * @fileoverview added by tsickle
 * Generated from: lib/bill-tracker/components/bill-tracker-data/bill-tracker-data.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ComponentFactoryResolver, Injector, ViewContainerRef, ViewChild, ComponentRef, NgModuleFactoryLoader, ChangeDetectorRef, Optional, LOCALE_ID, Inject, ElementRef } from '@angular/core';
import { BasicTableComponent } from '../basic-table/basic-table.component';
import { BillTrackerDataService } from '../../services/bill-tracker-data.service';
import { LoadingService } from '@farris/ui-loading';
import { MessagerService } from '@farris/ui-messager';
import { BillTrackingSettings, BillTrackingDataShownMode } from '@edp-bif/common-api';
import { from, of } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { BasicInfoComponent } from '../basic-info/basic-info.component';
import { NotifyService } from '@farris/ui-notify';
import { BsModalService } from '@farris/ui-modal';
import { BillTrackerDataInfoService } from '../../services/bill-tracker-data-info.service';
import { BillTrackerLocalePipe } from '../../pipe/bill-tracker-locale.pipe';
export class BillTrackerDataComponent {
    /**
     * @param {?} notify
     * @param {?} messager
     * @param {?} loading
     * @param {?} modal
     * @param {?} dataService
     * @param {?} inj
     * @param {?} cfr
     * @param {?} cdf
     * @param {?} loader
     * @param {?} localeId
     * @param {?} vcr
     * @param {?} er
     */
    constructor(notify, messager, loading, modal, dataService, inj, cfr, cdf, loader, localeId, vcr, er) {
        this.notify = notify;
        this.messager = messager;
        this.loading = loading;
        this.modal = modal;
        this.dataService = dataService;
        this.inj = inj;
        this.cfr = cfr;
        this.cdf = cdf;
        this.loader = loader;
        this.dataInfoService = new BillTrackerDataInfoService();
        this.localeId = localeId || this.inj.get(LOCALE_ID, null) || 'zh-CHS';
        this.localePipe = new BillTrackerLocalePipe(localeId);
        this.vcr = vcr || this.inj.get(ViewContainerRef, null);
        this.er = er || this.inj.get(ElementRef, null);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @return {?}
     */
    clearDataRegion() {
        this.dataRegion.clear();
    }
    /**
     * @param {?} args
     * @param {?=} billInfo
     * @param {?=} billDataInfo
     * @param {?=} res
     * @return {?}
     */
    showDataGrid(args, billInfo, billDataInfo, res) {
        // 单据追踪配置
        /** @type {?} */
        let bts = new BillTrackingSettings();
        if (billInfo && billInfo.billTrackingSettings) {
            bts.LoadFromJson(billInfo.billTrackingSettings);
        }
        if (bts.billTrackingDataShownMode == BillTrackingDataShownMode.CUSTOMFORM) {
            this.showCustomForm(args, billInfo, billDataInfo);
        }
        else {
            this.showGeneralForm(args, billInfo, billDataInfo, res);
        }
    }
    /**
     * 打开通用表单
     * @private
     * @param {?} args
     * @param {?=} billInfo
     * @param {?=} billDataInfo
     * @param {?=} res
     * @param {?=} newBTS
     * @return {?}
     */
    showGeneralForm(args, billInfo, billDataInfo, res, newBTS) {
        if (res != null) {
            this.createDataComp(res, billInfo, billDataInfo);
        }
        else {
            /** @type {?} */
            const l = this.loading.show({ message: this.localePipe.transform("loading") });
            this.dataService.getEntityData(args).subscribe((/**
             * @param {?} res
             * @return {?}
             */
            (res) => {
                this.createDataComp(res, billInfo, billDataInfo);
                l.close();
            }), (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                l.close();
                this.messager.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
                throw err;
            }));
        }
    }
    /**
     * 打开自定义表单
     * @private
     * @param {?} args
     * @param {?=} billInfo
     * @param {?=} billDataInfo
     * @return {?}
     */
    showCustomForm(args, billInfo, billDataInfo) {
        /** @type {?} */
        let bts = new BillTrackingSettings();
        if (billInfo && billInfo.billTrackingSettings) {
            bts.LoadFromJson(billInfo.billTrackingSettings);
        }
        /** @type {?} */
        let formContent = JSON.parse(bts.customFormContent);
        /** @type {?} */
        let moduleF$ = null;
        if (formContent.form.endsWith(".js")) {
            // url格式为[js路径]时
            moduleF$ = from(System.import(formContent.form.toLowerCase()).then((/**
             * @param {?} m
             * @return {?}
             */
            m => m))).pipe(switchMap((/**
             * @param {?} m
             * @return {?}
             */
            (m) => {
                for (let key in m) {
                    return of(m[key]);
                }
                return of(null);
            })));
        }
        else {
            // url格式为[js路径#模块名]时
            moduleF$ = from(this.loader.load(formContent.form));
        }
        moduleF$.subscribe((/**
         * @param {?} moduleFactory
         * @return {?}
         */
        (moduleFactory) => {
            /** @type {?} */
            const moduleRef = moduleFactory.create(this.inj);
            /** @type {?} */
            let cmpR$ = moduleRef.instance.createDataShownComponent(this.inj, args);
            if (cmpR$ instanceof ComponentRef) {
                cmpR$ = of(cmpR$);
            }
            cmpR$.subscribe((/**
             * @param {?} cmpR
             * @return {?}
             */
            (cmpR) => {
                // 重置滚动条
                /** @type {?} */
                const elt = (/** @type {?} */ (this.dataRegion.element.nativeElement.parentElement));
                elt.scrollTo({ left: 0 });
                this.dataRegion.clear();
                this.dataRegion.insert(cmpR.hostView);
            }));
        }));
    }
    /**
     * 创建通用表组件
     * @param {?} res
     * @param {?} billInfo
     * @param {?} billDataInfo
     * @return {?}
     */
    createDataComp(res, billInfo, billDataInfo) {
        /** @type {?} */
        const newBTS = this.dataInfoService.isNewBTS(billInfo.billTrackingSettings);
        // if (newBTS) {
        try {
            this.createNewDataComp(res, billInfo, billDataInfo);
        }
        catch (e) {
            // 重置滚动条
            /** @type {?} */
            const elt = (/** @type {?} */ (this.dataRegion.element.nativeElement.parentElement));
            elt && elt.scrollTo({ left: 0 });
            this.dataRegion.clear();
            /** @type {?} */
            const cmf = this.cfr.resolveComponentFactory(BasicTableComponent);
            /** @type {?} */
            const cmpR = this.dataRegion.createComponent(cmf);
            cmpR.instance.billInfo = billInfo;
            cmpR.instance.isMain = true;
            cmpR.instance.showMainTable(res);
            this.dataRegion.insert(cmpR.hostView);
        }
        // }
    }
    /**
     * 创建通用表组件
     * @param {?} res
     * @param {?=} billInfo
     * @param {?=} billDataInfo
     * @return {?}
     */
    createNewDataComp(res, billInfo, billDataInfo) {
        // 重置滚动条
        /** @type {?} */
        const elt = (/** @type {?} */ (this.dataRegion.element.nativeElement.parentElement));
        elt && elt.scrollTo({ left: 0 });
        this.dataRegion.clear();
        /** @type {?} */
        const cmf = this.cfr.resolveComponentFactory(BasicInfoComponent);
        /** @type {?} */
        const cmpR = this.dataRegion.createComponent(cmf);
        cmpR.instance.schemaTable = res.billSchema.mainTable;
        cmpR.instance.dataTable = res.billData.mainTable;
        cmpR.instance.billInfo = billInfo;
        cmpR.instance.billDataInfo = billDataInfo;
        this.dataRegion.insert(cmpR.hostView);
    }
}
BillTrackerDataComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-bill-tracker-data',
                template: "<div style=\"\">\r\n    <ng-container #dataRegion></ng-container>\r\n</div>",
                styles: [""]
            }] }
];
/** @nocollapse */
BillTrackerDataComponent.ctorParameters = () => [
    { type: NotifyService },
    { type: MessagerService },
    { type: LoadingService },
    { type: BsModalService },
    { type: BillTrackerDataService },
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: ChangeDetectorRef },
    { type: NgModuleFactoryLoader },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: ViewContainerRef, decorators: [{ type: Optional }] },
    { type: ElementRef, decorators: [{ type: Optional }] }
];
BillTrackerDataComponent.propDecorators = {
    dataRegion: [{ type: ViewChild, args: ["dataRegion", { read: ViewContainerRef },] }]
};
if (false) {
    /** @type {?} */
    BillTrackerDataComponent.prototype.dataRegion;
    /** @type {?} */
    BillTrackerDataComponent.prototype.dataInfoService;
    /** @type {?} */
    BillTrackerDataComponent.prototype.localePipe;
    /** @type {?} */
    BillTrackerDataComponent.prototype.localeId;
    /** @type {?} */
    BillTrackerDataComponent.prototype.vcr;
    /** @type {?} */
    BillTrackerDataComponent.prototype.er;
    /** @type {?} */
    BillTrackerDataComponent.prototype.notify;
    /** @type {?} */
    BillTrackerDataComponent.prototype.messager;
    /** @type {?} */
    BillTrackerDataComponent.prototype.loading;
    /** @type {?} */
    BillTrackerDataComponent.prototype.modal;
    /** @type {?} */
    BillTrackerDataComponent.prototype.dataService;
    /** @type {?} */
    BillTrackerDataComponent.prototype.inj;
    /** @type {?} */
    BillTrackerDataComponent.prototype.cfr;
    /** @type {?} */
    BillTrackerDataComponent.prototype.cdf;
    /** @type {?} */
    BillTrackerDataComponent.prototype.loader;
}
//# sourceMappingURL=data:application/json;base64,