/**
 * @fileoverview added by tsickle
 * Generated from: lib/bill-tracker/mxgraph-ext/Outline.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { mxConstants, mxGraph, mxOutline } from "../../ref/mxgraph";
import { Styles } from "./Styles";
export class Outline extends mxOutline {
    /**
     * @param {?} source
     * @param {?=} container
     */
    constructor(source, container) {
        super(source, container);
    }
    /**
     * @param {?} container
     * @return {?}
     */
    createGraph(container) {
        /** @type {?} */
        const graph = new mxGraph(container, this.source.getModel(), this.graphRenderHint);
        graph.foldingEnabled = false;
        graph.autoScroll = false;
        // 深拷贝并扩展source的stylesheet
        this.extendStyleSheets(graph, this.source);
        return graph;
    }
    /**
     * 深拷贝并扩展source的stylesheet
     * 默认设定样式节点无填充色，在缩略图中添加填充色
     * @param {?} graph
     * @param {?} source
     * @return {?}
     */
    extendStyleSheets(graph, source) {
        /** @type {?} */
        let style = Object.assign({}, source.getStylesheet().getCellStyle(Styles.STYLE_BILL_NODE_NAME, source.getStylesheet().getDefaultVertexStyle()));
        style[mxConstants.STYLE_FILLCOLOR] = '#2A87FF';
        graph.getStylesheet().putCellStyle(Styles.STYLE_BILL_NODE_NAME, style);
        style = Object.assign({}, source.getStylesheet().getCellStyle(Styles.STYLE_BILL_NODE_ENTRY_NAME, source.getStylesheet().getDefaultVertexStyle()));
        style[mxConstants.STYLE_FILLCOLOR] = '#F5A144';
        graph.getStylesheet().putCellStyle(Styles.STYLE_BILL_NODE_ENTRY_NAME, style);
        style = Object.assign({}, source.getStylesheet().getCellStyle(Styles.STYLE_BILL_ASSOCIATION_NAME, source.getStylesheet().getDefaultEdgeStyle()));
        graph.getStylesheet().putCellStyle(Styles.STYLE_BILL_ASSOCIATION_NAME, style);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT3V0bGluZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlZHAtYmlmL3J1bnRpbWUtYXBpLyIsInNvdXJjZXMiOlsibGliL2JpbGwtdHJhY2tlci9teGdyYXBoLWV4dC9PdXRsaW5lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFhLE1BQU0sbUJBQW1CLENBQUM7QUFDL0UsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVsQyxNQUFNLE9BQU8sT0FBUSxTQUFRLFNBQVM7Ozs7O0lBQ2xDLFlBQVksTUFBeUIsRUFBRSxTQUF1QjtRQUMxRCxLQUFLLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzdCLENBQUM7Ozs7O0lBRUQsV0FBVyxDQUFDLFNBQVM7O2NBQ1gsS0FBSyxHQUFHLElBQUksT0FBTyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUM7UUFDbEYsS0FBSyxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7UUFDN0IsS0FBSyxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFFekIsMEJBQTBCO1FBQzFCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzNDLE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7Ozs7Ozs7O0lBTUQsaUJBQWlCLENBQUMsS0FBd0IsRUFBRSxNQUF5Qjs7WUFDN0QsS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLG9CQUFvQixFQUFFLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLENBQUM7UUFDL0ksS0FBSyxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsR0FBRyxTQUFTLENBQUM7UUFDL0MsS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFdkUsS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLDBCQUEwQixFQUFFLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNsSixLQUFLLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxHQUFHLFNBQVMsQ0FBQztRQUMvQyxLQUFLLENBQUMsYUFBYSxFQUFFLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQywwQkFBMEIsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUU3RSxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsMkJBQTJCLEVBQUUsTUFBTSxDQUFDLGFBQWEsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2pKLEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLDJCQUEyQixFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2xGLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG14Q29uc3RhbnRzLCBteEdyYXBoLCBteE91dGxpbmUsIE14R3JhcGhOUyB9IGZyb20gXCIuLi8uLi9yZWYvbXhncmFwaFwiO1xyXG5pbXBvcnQgeyBTdHlsZXMgfSBmcm9tIFwiLi9TdHlsZXNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBPdXRsaW5lIGV4dGVuZHMgbXhPdXRsaW5lIHtcclxuICAgIGNvbnN0cnVjdG9yKHNvdXJjZTogTXhHcmFwaE5TLm14R3JhcGgsIGNvbnRhaW5lcj86IEhUTUxFbGVtZW50KSB7XHJcbiAgICAgICAgc3VwZXIoc291cmNlLCBjb250YWluZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZUdyYXBoKGNvbnRhaW5lcikge1xyXG4gICAgICAgIGNvbnN0IGdyYXBoID0gbmV3IG14R3JhcGgoY29udGFpbmVyLCB0aGlzLnNvdXJjZS5nZXRNb2RlbCgpLCB0aGlzLmdyYXBoUmVuZGVySGludCk7XHJcbiAgICAgICAgZ3JhcGguZm9sZGluZ0VuYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICBncmFwaC5hdXRvU2Nyb2xsID0gZmFsc2U7XHJcblxyXG4gICAgICAgIC8vIOa3seaLt+i0neW5tuaJqeWxlXNvdXJjZeeahHN0eWxlc2hlZXRcclxuICAgICAgICB0aGlzLmV4dGVuZFN0eWxlU2hlZXRzKGdyYXBoLCB0aGlzLnNvdXJjZSk7XHJcbiAgICAgICAgcmV0dXJuIGdyYXBoO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5rex5ou36LSd5bm25omp5bGVc291cmNl55qEc3R5bGVzaGVldFxyXG4gICAgICog6buY6K6k6K6+5a6a5qC35byP6IqC54K55peg5aGr5YWF6Imy77yM5Zyo57yp55Wl5Zu+5Lit5re75Yqg5aGr5YWF6ImyXHJcbiAgICAgKi9cclxuICAgIGV4dGVuZFN0eWxlU2hlZXRzKGdyYXBoOiBNeEdyYXBoTlMubXhHcmFwaCwgc291cmNlOiBNeEdyYXBoTlMubXhHcmFwaCkge1xyXG4gICAgICAgIGxldCBzdHlsZSA9IE9iamVjdC5hc3NpZ24oe30sIHNvdXJjZS5nZXRTdHlsZXNoZWV0KCkuZ2V0Q2VsbFN0eWxlKFN0eWxlcy5TVFlMRV9CSUxMX05PREVfTkFNRSwgc291cmNlLmdldFN0eWxlc2hlZXQoKS5nZXREZWZhdWx0VmVydGV4U3R5bGUoKSkpO1xyXG4gICAgICAgIHN0eWxlW214Q29uc3RhbnRzLlNUWUxFX0ZJTExDT0xPUl0gPSAnIzJBODdGRic7XHJcbiAgICAgICAgZ3JhcGguZ2V0U3R5bGVzaGVldCgpLnB1dENlbGxTdHlsZShTdHlsZXMuU1RZTEVfQklMTF9OT0RFX05BTUUsIHN0eWxlKTtcclxuXHJcbiAgICAgICAgc3R5bGUgPSBPYmplY3QuYXNzaWduKHt9LCBzb3VyY2UuZ2V0U3R5bGVzaGVldCgpLmdldENlbGxTdHlsZShTdHlsZXMuU1RZTEVfQklMTF9OT0RFX0VOVFJZX05BTUUsIHNvdXJjZS5nZXRTdHlsZXNoZWV0KCkuZ2V0RGVmYXVsdFZlcnRleFN0eWxlKCkpKTtcclxuICAgICAgICBzdHlsZVtteENvbnN0YW50cy5TVFlMRV9GSUxMQ09MT1JdID0gJyNGNUExNDQnO1xyXG4gICAgICAgIGdyYXBoLmdldFN0eWxlc2hlZXQoKS5wdXRDZWxsU3R5bGUoU3R5bGVzLlNUWUxFX0JJTExfTk9ERV9FTlRSWV9OQU1FLCBzdHlsZSk7XHJcblxyXG4gICAgICAgIHN0eWxlID0gT2JqZWN0LmFzc2lnbih7fSwgc291cmNlLmdldFN0eWxlc2hlZXQoKS5nZXRDZWxsU3R5bGUoU3R5bGVzLlNUWUxFX0JJTExfQVNTT0NJQVRJT05fTkFNRSwgc291cmNlLmdldFN0eWxlc2hlZXQoKS5nZXREZWZhdWx0RWRnZVN0eWxlKCkpKTtcclxuICAgICAgICBncmFwaC5nZXRTdHlsZXNoZWV0KCkucHV0Q2VsbFN0eWxlKFN0eWxlcy5TVFlMRV9CSUxMX0FTU09DSUFUSU9OX05BTUUsIHN0eWxlKTtcclxuICAgIH1cclxufSJdfQ==