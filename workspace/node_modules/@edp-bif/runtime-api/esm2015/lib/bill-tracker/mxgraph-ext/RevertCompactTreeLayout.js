/**
 * @fileoverview added by tsickle
 * Generated from: lib/bill-tracker/mxgraph-ext/RevertCompactTreeLayout.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { mxCompactTreeLayout, mxCellPath, mxDictionary } from '../../ref/mxgraph';
export class RevertCompactTreeLayout extends mxCompactTreeLayout {
    /**
     * @param {?} graph
     * @param {?=} horizontal
     * @param {?=} invert
     */
    constructor(graph, horizontal, invert) {
        super(graph, horizontal, invert);
        this.useBoundingBox = false;
    }
    /**
     * @param {?} cell
     * @param {?} parent
     * @return {?}
     */
    dfs(cell, parent) {
        /** @type {?} */
        let id = mxCellPath.create(cell);
        /** @type {?} */
        let node = null;
        if (cell != null && this.visited[id] == null && !this.isVertexIgnored(cell)) {
            this.visited[id] = cell;
            node = this.createNode(cell);
            /** @type {?} */
            let model = this.graph.getModel();
            /** @type {?} */
            let prev = null;
            // let out = this.graph.getEdges(cell, parent, this.invert, !this.invert, false, true);
            /** @type {?} */
            let ins = this.graph.getEdges(cell, parent, !this.invert, this.invert, false, true);
            /** @type {?} */
            let view = this.graph.getView();
            if (this.sortEdges) {
                // this.sortOutgoingEdges(cell, out);
                this.sortIngoingEdges(cell, ins);
            }
            for (let i = 0; i < ins.length; i++) {
                /** @type {?} */
                let edge = ins[i];
                if (!this.isEdgeIgnored(edge)) {
                    // Resets the points on the traversed edge
                    if (this.resetEdges) {
                        this.setEdgePoints(edge, null);
                    }
                    if (this.edgeRouting) {
                        this.setEdgeStyleEnabled(edge, false);
                        this.setEdgePoints(edge, null);
                    }
                    // Checks if terminal in same swimlane
                    /** @type {?} */
                    let state = view.getState(edge);
                    // let target = (state != null) ? state.getVisibleTerminal(this.invert) : view.getVisibleTerminal(edge, this.invert);
                    /** @type {?} */
                    let source = (state != null) ? state.getVisibleTerminal(!this.invert) : view.getVisibleTerminal(edge, !this.invert);
                    /** @type {?} */
                    let tmp = this.dfs(source, parent);
                    if (tmp != null && model.getGeometry(source) != null) {
                        if (prev == null) {
                            node.child = tmp;
                        }
                        else {
                            prev.next = tmp;
                        }
                        prev = tmp;
                    }
                }
            }
        }
        return node;
    }
    /**
     * @param {?} target
     * @param {?} edges
     * @return {?}
     */
    sortIngoingEdges(target, edges) {
        /** @type {?} */
        let lookup = new mxDictionary();
        edges.sort((/**
         * @param {?} e1
         * @param {?} e2
         * @return {?}
         */
        function (e1, e2) {
            /** @type {?} */
            let start1 = e1.getTerminal(e1.getTerminal(true) == target);
            // let end1 = e1.getTerminal(e1.getTerminal(true) == target);
            /** @type {?} */
            let p1 = lookup.get(start1);
            if (p1 == null) {
                p1 = mxCellPath.create(start1).split(mxCellPath.PATH_SEPARATOR);
                lookup.put(start1, p1);
            }
            /** @type {?} */
            let start2 = e2.getTerminal(e2.getTerminal(true) == target);
            /** @type {?} */
            let p2 = lookup.get(start2);
            if (p2 == null) {
                p2 = mxCellPath.create(start2).split(mxCellPath.PATH_SEPARATOR);
                lookup.put(start2, p2);
            }
            return mxCellPath.compare(p1, p2);
        }));
    }
    /**
     * @param {?} parent
     * @param {?} dest
     * @return {?}
     */
    execute(parent, dest) {
        this.parent = parent;
        /** @type {?} */
        let model = this.graph.getModel();
        if (dest == null) {
            // Takes the parent as the root if it has outgoing edges
            if (this.graph.getEdges(parent, model.getParent(parent), !this.invert, this.invert, false).length > 0) {
                this.root = parent;
            }
            // Tries to find a suitable root in the parent's
            // children
            else {
                /** @type {?} */
                let dests = this.graph.findTreeRoots(parent, true, true);
                if (dests.length > 0) {
                    for (let i = 0; i < dests.length; i++) {
                        if (!this.isVertexIgnored(dests[i]) &&
                            this.graph.getEdges(dests[i], null, !this.invert, this.invert, false).length > 0) {
                            this.root = dests[i];
                            break;
                        }
                    }
                }
            }
        }
        else {
            this.root = dest;
        }
        if (this.root != null) {
            if (this.resizeParent) {
                this.parentsChanged = new Object();
            }
            else {
                this.parentsChanged = null;
            }
            //  Maintaining parent location
            this.parentX = null;
            this.parentY = null;
            if (parent != this.root && model.isVertex(parent) != null && this.maintainParentLocation) {
                /** @type {?} */
                let geo = this.graph.getCellGeometry(parent);
                if (geo != null) {
                    this.parentX = geo.x;
                    this.parentY = geo.y;
                }
            }
            model.beginUpdate();
            try {
                this.visited = {};
                this.node = this.dfs(this.root, parent);
                if (this.alignRanks) {
                    this.maxRankHeight = [];
                    this.findRankHeights(this.node, 0);
                    this.setCellHeights(this.node, 0);
                }
                if (this.node != null) {
                    this.layout(this.node);
                    /** @type {?} */
                    let x0 = this.graph.gridSize;
                    /** @type {?} */
                    let y0 = x0;
                    if (!this.moveTree) {
                        /** @type {?} */
                        let g = this.getVertexBounds(this.root);
                        if (g != null) {
                            x0 = g.x;
                            y0 = g.y;
                        }
                    }
                    /** @type {?} */
                    let bounds = null;
                    if (this.isHorizontal()) {
                        bounds = this.horizontalLayout(this.node, -x0, y0);
                    }
                    else {
                        bounds = this.verticalLayout(this.node, null, x0, y0);
                    }
                    if (bounds != null) {
                        /** @type {?} */
                        let dx = 0;
                        /** @type {?} */
                        let dy = 0;
                        if (bounds.x > 0) {
                            dx = -1 * Math.abs(x0 - bounds.x);
                        }
                        if (bounds.y > 0) {
                            dy = -1 * Math.abs(y0 - bounds.y);
                        }
                        if (dx != 0 || dy != 0) {
                            this.moveNode(this.node, dx, dy);
                        }
                        if (this.resizeParent) {
                            this.adjustParents();
                        }
                        if (this.edgeRouting) {
                            // Iterate through all edges setting their positions
                            this.localEdgeProcessing(this.node);
                        }
                    }
                    // Maintaining parent location
                    if (this.parentX != null && this.parentY != null) {
                        /** @type {?} */
                        let geo = this.graph.getCellGeometry(parent);
                        if (geo != null) {
                            geo = geo.clone();
                            geo.x = this.parentX;
                            geo.y = this.parentY;
                            model.setGeometry(parent, geo);
                        }
                    }
                }
            }
            finally {
                model.endUpdate();
            }
        }
    }
    /**
     * @param {?} node
     * @param {?} x0
     * @param {?} y0
     * @param {?=} bounds
     * @return {?}
     */
    horizontalLayout(node, x0, y0, bounds) {
        node.x += x0 - node.offsetX;
        node.y += y0 + node.offsetY;
        bounds = this.apply(node, bounds);
        /** @type {?} */
        var child = node.child;
        if (child != null) {
            bounds = this.horizontalLayout(child, node.x, node.y, bounds);
            /** @type {?} */
            var siblingOffset = node.y + child.offsetY;
            /** @type {?} */
            var s = child.next;
            while (s != null) {
                bounds = this.horizontalLayout(s, node.x - child.offsetX, siblingOffset, bounds);
                siblingOffset += s.offsetY;
                s = s.next;
            }
        }
        return bounds;
    }
}
if (false) {
    /** @type {?} */
    RevertCompactTreeLayout.prototype.visited;
    /** @type {?} */
    RevertCompactTreeLayout.prototype.graph;
    /** @type {?} */
    RevertCompactTreeLayout.prototype.sortEdges;
    /** @type {?} */
    RevertCompactTreeLayout.prototype.parent;
    /** @type {?} */
    RevertCompactTreeLayout.prototype.parentsChanged;
    /** @type {?} */
    RevertCompactTreeLayout.prototype.parentX;
    /** @type {?} */
    RevertCompactTreeLayout.prototype.parentY;
    /** @type {?} */
    RevertCompactTreeLayout.prototype.node;
    /** @type {?} */
    RevertCompactTreeLayout.prototype.alignRanks;
    /** @type {?} */
    RevertCompactTreeLayout.prototype.maxRankHeight;
    /** @type {?} */
    RevertCompactTreeLayout.prototype.moveTree;
    /** @type {?} */
    RevertCompactTreeLayout.prototype.nodeDistance;
    /** @type {?} */
    RevertCompactTreeLayout.prototype.useBoundingBox;
}
//# sourceMappingURL=data:application/json;base64,