/**
 * @fileoverview added by tsickle
 * Generated from: lib/bif-manual-creation/service/bif-source-ui.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector, ComponentFactoryResolver, NgModuleFactoryLoader, Inject, LOCALE_ID, Optional } from '@angular/core';
import { AbstractUiService } from './abstract-ui-service';
import { NavigationService, RuntimeFrameworkService } from '@farris/command-services';
import { FrameContext } from '@farris/devkit';
import { BsModalService } from '@farris/ui-modal';
import { FormGetBillCreationProcessEntityExArgs } from '../../entity/form-rest/FormGetBillCreationProcessEntityExArgs';
import { PushSelectorComponent } from '../components/push-selector/push-selector.component';
import { BpmnModelJsonHelper } from '@edp-aif/common-api';
import { RpcCreationRuleExecutorResult } from '../../ref';
import { BIF_UISTATE_KEY_CREATION_RESULT } from '../config/bif-form-constants';
import { FormBillCreationProcessExecutorResult } from '@edp-aif/runtime-api';
import { ManualCreationMode } from '../../entity/form-rest/ManualCreationMode';
import { MessagerService } from '@farris/ui-messager';
import { judgeBrowserType } from "../../utils/BrowserUtil";
import { GeneralTextIdWithDataId } from '../../entity/form-rest/GeneralTextIdWithDataId';
export class BifSourceUiService extends AbstractUiService {
    /**
     * @param {?} navigationService
     * @param {?} frameContext
     * @param {?} modalService
     * @param {?} messager
     * @param {?} injector
     * @param {?} cfr
     * @param {?} loader
     * @param {?} localeId
     * @param {?} runtimeFrameworkService
     */
    constructor(navigationService, frameContext, modalService, messager, injector, cfr, loader, localeId, runtimeFrameworkService) {
        super(frameContext, modalService, messager, injector, cfr, loader, localeId, runtimeFrameworkService);
        this.navigationService = navigationService;
        this.frameContext = frameContext;
        this.modalService = modalService;
        this.messager = messager;
        this.injector = injector;
        this.cfr = cfr;
        this.loader = loader;
        this.localeId = localeId;
        this.uiStateKeyCreationResult = BIF_UISTATE_KEY_CREATION_RESULT;
    }
    /**
     * 下推时打开生单规则选择器
     * @param {?} upBillVoId
     * @param {?=} bizFlowchartId
     * @param {?=} modalOptions
     * @param {?=} customSelectorModuleUrl
     * @param {?=} extParams
     * @return {?}
     */
    openBillCreationProcessSelector4Push(upBillVoId, bizFlowchartId, modalOptions, customSelectorModuleUrl, extParams) {
        /** @type {?} */
        const args = new FormGetBillCreationProcessEntityExArgs();
        args.upBillVoId = upBillVoId;
        args.manualCreationMode = ManualCreationMode.Push;
        return this.openBillCreationProcessSelector(args, PushSelectorComponent, modalOptions, customSelectorModuleUrl, extParams);
    }
    /**
     * 特定下推时打开生单规则选择器
     * @param {?} upBillVoId
     * @param {?} downBillVoId
     * @param {?=} bizFlowchartId
     * @param {?=} modalOptions
     * @param {?=} customSelectorModuleUrl
     * @param {?=} extParams
     * @return {?}
     */
    openBillCreationProcessSelector4SpecificPush(upBillVoId, downBillVoId, bizFlowchartId, modalOptions, customSelectorModuleUrl, extParams) {
        /** @type {?} */
        const args = new FormGetBillCreationProcessEntityExArgs();
        args.upBillVoId = upBillVoId;
        args.downBillVoId = downBillVoId;
        args.manualCreationMode = ManualCreationMode.SpecificPush;
        // args.bizFlowchartId = bizFlowchartId;
        return this.openBillCreationProcessSelector(args, PushSelectorComponent, modalOptions, customSelectorModuleUrl, extParams);
    }
    /**
     * \@Deprecated 已弃用，请使用{\@link openTargetApp}
     * 打开下游单据制单界面
     * @param {?} formSettings
     * @param {?} creationResult
     * @param {?=} extParams
     * @return {?}
     */
    openTargetForm(formSettings, creationResult, extParams) {
        if (formSettings == null) {
            throw "参数formSettings不可为空";
        }
        if (creationResult == null) {
            throw "参数creationResult不可为空";
        }
        if (typeof creationResult == "string") {
            if (creationResult == "") {
                throw "参数creationResult不可为空";
            }
            /** @type {?} */
            const temp = new FormBillCreationProcessExecutorResult();
            temp.LoadFromJson(creationResult);
            creationResult = temp;
        }
        if ((creationResult instanceof FormBillCreationProcessExecutorResult) == false) {
            /** @type {?} */
            const res = new FormBillCreationProcessExecutorResult();
            res.LoadFromJsonObject(creationResult);
            creationResult = res;
        }
        if (creationResult.conditionResult.conditionExecutionResult == false) {
            this.messager.error(creationResult.conditionResult.message || this.localePipe.transform("creationExecutionError"));
            return;
        }
        if (creationResult.creationRuleExecutorResult == null || creationResult.creationRuleExecutorResult.mappingResults == null || creationResult.creationRuleExecutorResult.mappingResults.length == 0) {
            this.messager.error(this.localePipe.transform("creationResultEmpty"));
            return;
        }
        else if (creationResult.creationRuleExecutorResult.mappingResults.length == 1) {
            // 从表单配置中取下游卡片加载命令
            /** @type {?} */
            const action = formSettings.targetCardAppLoadCmd;
            if (action != null && action != "") {
                if (extParams == null) {
                    extParams = {
                        action: action
                    };
                }
                else {
                    extParams["action"] = extParams["action"] != null && extParams["action"] != "" ? extParams["action"] : action;
                }
            }
            //只有一条数据则打开卡片
            this.openApp(creationResult.creationRuleExecutorResult.mappingResults[0].associations[0].tarRootDataId, formSettings.targetCardAppId, formSettings.targetCardAppEntrance, creationResult, extParams, false);
        }
        else {
            if (formSettings.targetListAppId != null) {
                // 多条数据且配置批量编辑界面
                throw "暂不支持打开批量编辑界面";
                this.openApp(creationResult.creationRuleExecutorResult.mappingResults[0].associations[0].tarRootDataId, formSettings.targetListAppId, formSettings.targetListAppEntrance, creationResult, extParams, false);
            }
            else {
                //有多条数据但未配置批量编辑界面则打开多个卡片
                for (let mappingResult of creationResult.creationRuleExecutorResult.mappingResults) {
                    /** @type {?} */
                    let singleRes = new FormBillCreationProcessExecutorResult();
                    singleRes.conditionResult = creationResult.conditionResult;
                    singleRes.creationRuleExecutorResult = new RpcCreationRuleExecutorResult();
                    singleRes.creationRuleExecutorResult.bizFlowchartId = creationResult.creationRuleExecutorResult.bizFlowchartId;
                    singleRes.creationRuleExecutorResult.creationRuleId = creationResult.creationRuleExecutorResult.creationRuleId;
                    singleRes.creationRuleExecutorResult.creationRuleInstanceId = creationResult.creationRuleExecutorResult.creationRuleInstanceId;
                    singleRes.creationRuleExecutorResult.mappingResults = [mappingResult];
                    // 从表单配置中取下游卡片加载命令
                    /** @type {?} */
                    const action = formSettings.targetCardAppLoadCmd;
                    if (action != null && action != "") {
                        if (extParams == null) {
                            extParams = {
                                action: action
                            };
                        }
                        else {
                            extParams["action"] = extParams["action"] != null && extParams["action"] != "" ? extParams["action"] : action;
                        }
                    }
                    this.openApp(mappingResult.associations[0].tarRootDataId, formSettings.targetCardAppId, formSettings.targetCardAppEntrance, singleRes, extParams, false);
                }
            }
        }
    }
    /**
     * \@Deprecated
     * @private
     * @param {?} tabId
     * @param {?} appId
     * @param {?} appEntrance
     * @param {?} creationResult
     * @param {?=} extParams
     * @param {?=} reload
     * @param {?=} tabName
     * @param {?=} enableRefresh
     * @param {?=} destructuring
     * @return {?}
     */
    openApp(tabId, appId, appEntrance, creationResult, extParams, reload, tabName, enableRefresh, destructuring) {
        extParams = extParams == null ? {} : extParams;
        /** @type {?} */
        const browser = judgeBrowserType();
        if (browser.type == "IE" && browser.IEVersion == "IE11") {
            //IE11浏览器将生成结果转换为字符串存在top.localStorage，Id为tabId
            // console.log(tabId);
            window.top.localStorage.setItem(tabId, creationResult.ConvertToJson());
            this.navigationService.openApp(tabId, appId, appEntrance, extParams, reload, tabName, enableRefresh, destructuring);
        }
        else {
            this.navigationService.openApp(tabId, appId, appEntrance, this.buildRouteParams(creationResult, extParams), reload, tabName, enableRefresh, destructuring);
        }
    }
    /**
     * \@Deprecated
     * @private
     * @param {?} creationResult
     * @param {?} extParams
     * @return {?}
     */
    buildRouteParams(creationResult, extParams) {
        /** @type {?} */
        const params = extParams;
        params[this.uiStateKeyCreationResult] = creationResult.ConvertToJson();
        if (params["action"] == null || params["action"] == "") {
            params["action"] = "rootviewmodelbifLoad1";
        }
        return params;
    }
    /**
     * 打开下游单据制单界面
     * @param {?} formSettings
     * @param {?} conditionResult
     * @param {?} textIdWithDataIds
     * @param {?=} extParams
     * @return {?}
     */
    openTargetApp(formSettings, conditionResult, textIdWithDataIds, extParams) {
        if (formSettings == null) {
            throw "参数formSettings不可为空";
        }
        if (textIdWithDataIds == null) {
            throw "参数creationResult不可为空";
        }
        if (typeof textIdWithDataIds == "string") {
            if (textIdWithDataIds == "") {
                throw "参数creationResult不可为空";
            }
            textIdWithDataIds = (/** @type {?} */ (BpmnModelJsonHelper.FromJson(textIdWithDataIds, GeneralTextIdWithDataId)));
        }
        if (conditionResult.conditionExecutionResult == false) {
            this.messager.error(conditionResult.message || this.localePipe.transform("creationExecutionError"));
            return;
        }
        if (textIdWithDataIds == null || textIdWithDataIds.length == null || textIdWithDataIds.length <= 0) {
            this.messager.error(this.localePipe.transform("creationResultEmpty"));
            return;
        }
        else if (textIdWithDataIds.length == 1) {
            // 从表单配置中取下游卡片加载命令
            /** @type {?} */
            const action = formSettings.targetCardAppLoadCmd;
            if (action != null && action != "") {
                if (extParams == null) {
                    extParams = {
                        action: action
                    };
                }
                else {
                    extParams["action"] = extParams["action"] != null && extParams["action"] != "" ? extParams["action"] : action;
                }
            }
            //只有一条数据则打开卡片
            this.openAppWithGeneralText(textIdWithDataIds[0].dataId, formSettings.targetCardAppId, formSettings.targetCardAppEntrance, textIdWithDataIds[0].generalTextId, extParams, false);
        }
        else {
            if (formSettings.targetListAppId != null) {
                // 多条数据且配置批量编辑界面
                throw "暂不支持打开批量编辑界面";
            }
            else {
                //有多条数据但未配置批量编辑界面则打开多个卡片
                for (let item of textIdWithDataIds) {
                    // 从表单配置中取下游卡片加载命令
                    /** @type {?} */
                    const action = formSettings.targetCardAppLoadCmd;
                    if (action != null && action != "") {
                        if (extParams == null) {
                            extParams = {
                                action: action
                            };
                        }
                        else {
                            extParams["action"] = extParams["action"] != null && extParams["action"] != "" ? extParams["action"] : action;
                        }
                    }
                    this.openAppWithGeneralText(item.dataId, formSettings.targetCardAppId, formSettings.targetCardAppEntrance, item.generalTextId, extParams, false);
                }
            }
        }
    }
    /**
     * @private
     * @param {?} tabId
     * @param {?} appId
     * @param {?} appEntrance
     * @param {?} textId
     * @param {?=} extParams
     * @param {?=} reload
     * @param {?=} tabName
     * @param {?=} enableRefresh
     * @param {?=} destructuring
     * @return {?}
     */
    openAppWithGeneralText(tabId, appId, appEntrance, textId, extParams, reload, tabName, enableRefresh, destructuring) {
        extParams = extParams == null ? {} : extParams;
        /** @type {?} */
        const browser = judgeBrowserType();
        if (browser.type == "IE" && browser.IEVersion == "IE11") {
            //IE11浏览器将生成结果转换为字符串存在top.localStorage，Id为tabId
            window.top.localStorage.setItem(tabId, textId);
            this.navigationService.openApp(tabId, appId, appEntrance, this.buildRouteParamsWithGeneralText(textId, extParams), reload, tabName, enableRefresh, destructuring);
        }
        else {
            this.navigationService.openApp(tabId, appId, appEntrance, this.buildRouteParamsWithGeneralText(textId, extParams), reload, tabName, enableRefresh, destructuring);
        }
    }
    /**
     *
     * @private
     * @param {?} textId
     * @param {?} extParams
     * @return {?}
     */
    buildRouteParamsWithGeneralText(textId, extParams) {
        /** @type {?} */
        const params = extParams;
        params[this.uiStateKeyCreationResult] = textId;
        if (params["action"] == null || params["action"] == "") {
            params["action"] = "rootviewmodelbifLoad1";
        }
        return params;
    }
}
BifSourceUiService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BifSourceUiService.ctorParameters = () => [
    { type: NavigationService },
    { type: FrameContext },
    { type: BsModalService },
    { type: MessagerService },
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: NgModuleFactoryLoader },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: RuntimeFrameworkService, decorators: [{ type: Optional }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    BifSourceUiService.prototype.uiStateKeyCreationResult;
    /**
     * @type {?}
     * @protected
     */
    BifSourceUiService.prototype.navigationService;
    /**
     * @type {?}
     * @protected
     */
    BifSourceUiService.prototype.frameContext;
    /**
     * @type {?}
     * @protected
     */
    BifSourceUiService.prototype.modalService;
    /**
     * @type {?}
     * @protected
     */
    BifSourceUiService.prototype.messager;
    /**
     * @type {?}
     * @protected
     */
    BifSourceUiService.prototype.injector;
    /**
     * @type {?}
     * @protected
     */
    BifSourceUiService.prototype.cfr;
    /**
     * @type {?}
     * @protected
     */
    BifSourceUiService.prototype.loader;
    /** @type {?} */
    BifSourceUiService.prototype.localeId;
}
//# sourceMappingURL=data:application/json;base64,