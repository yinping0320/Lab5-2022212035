/**
 * @fileoverview added by tsickle
 * Generated from: lib/bif-manual-creation/bif-manual-creation.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, LOCALE_ID, NgModuleFactoryLoader, SystemJsNgModuleLoader } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { ModalModule } from '@farris/ui-modal';
import { NotifyModule } from '@farris/ui-notify';
import { MessagerModule } from '@farris/ui-messager';
import { ModuleConfig } from './config/module.config';
import { PushSelectorComponent } from './components/push-selector/push-selector.component';
import { PullSelectorComponent } from './components/pull-selector/pull-selector.component';
import { LocalePipe } from "./pipe/locale.pipe";
import { BifDataService } from './service/bif-data.service';
import { BifSourceUiService } from './service/bif-source-ui.service';
import { BifTargetUiService } from './service/bif-target-ui.service';
import { LoadingModule } from '@farris/ui-loading';
import { TreeModule } from '@farris/ui-tree';
import { DatagridModule } from '@farris/ui-datagrid';
import { AngularDraggableModule } from '@farris/ui-draggable';
import { FarrisCommonModule } from '@farris/ui-common';
import { DatagridEditorsModule, EditorProviders } from '@farris/ui-datagrid-editors';
import { TreeTableModule } from '@farris/ui-treetable';
import { InputGroupModule } from '@farris/ui-input-group';
import { LanguageTextboxModule } from '@farris/ui-language-textbox';
import { NumberSpinnerModule } from '@farris/ui-number-spinner';
import { SwitchModule } from '@farris/ui-switch';
import { FarrisSectionModule } from '@farris/ui-section';
const ɵ0 = localStorage.getItem('languageCode') || 'zh-CHS', ɵ1 = {};
export class BifManualCreationModule {
    /**
     * @param {?=} config
     * @return {?}
     */
    static forRoot(config) {
        /** @type {?} */
        const providers = [
            { provide: ModuleConfig, useValue: config || {} },
            BifDataService,
            BifSourceUiService,
            BifTargetUiService,
        ];
        return {
            ngModule: BifManualCreationModule,
            providers: providers
        };
    }
}
BifManualCreationModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    PushSelectorComponent,
                    PullSelectorComponent,
                    LocalePipe,
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    HttpClientModule,
                    ModalModule.forRoot(),
                    AngularDraggableModule,
                    FarrisCommonModule.forRoot(),
                    DatagridEditorsModule,
                    DatagridModule.forRoot([
                        ...EditorProviders
                    ]),
                    TreeModule,
                    TreeTableModule,
                    LoadingModule.forRoot({
                        message: 'Loading...'
                    }),
                    NotifyModule.forRoot(),
                    MessagerModule.forRoot({
                        width: 550,
                        height: 450
                    }),
                    InputGroupModule,
                    LanguageTextboxModule,
                    NumberSpinnerModule,
                    SwitchModule,
                    FarrisSectionModule,
                ],
                providers: [
                    { provide: LOCALE_ID, useValue: ɵ0 },
                    { provide: ModuleConfig, useValue: ɵ1 },
                    { provide: NgModuleFactoryLoader, useClass: SystemJsNgModuleLoader },
                    BifDataService,
                    BifSourceUiService,
                    BifTargetUiService,
                ],
                exports: [
                    PushSelectorComponent,
                    PullSelectorComponent
                ],
                entryComponents: [
                    PushSelectorComponent,
                    PullSelectorComponent
                ],
            },] }
];
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmlmLW1hbnVhbC1jcmVhdGlvbi5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZWRwLWJpZi9ydW50aW1lLWFwaS8iLCJzb3VyY2VzIjpbImxpYi9iaWYtbWFudWFsLWNyZWF0aW9uL2JpZi1tYW51YWwtY3JlYXRpb24ubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsU0FBUyxFQUFFLHFCQUFxQixFQUFFLHNCQUFzQixFQUFZLE1BQU0sZUFBZSxDQUFDO0FBQ2xJLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFeEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFckQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3RELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9EQUFvRCxDQUFDO0FBQzNGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9EQUFvRCxDQUFDO0FBQzNGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDckUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDckUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM3QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDckQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdkQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLGVBQWUsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3JGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN2RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUMxRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDakQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7V0FvQ3JCLFlBQVksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLElBQUksUUFBUSxPQUM3QyxFQUFFO0FBZXpDLE1BQU0sT0FBTyx1QkFBdUI7Ozs7O0lBQzNCLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBcUI7O2NBQ25DLFNBQVMsR0FBZTtZQUM1QixFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLE1BQU0sSUFBSSxFQUFFLEVBQUU7WUFDakQsY0FBYztZQUNkLGtCQUFrQjtZQUNsQixrQkFBa0I7U0FDbkI7UUFDRCxPQUFPO1lBQ0wsUUFBUSxFQUFFLHVCQUF1QjtZQUNqQyxTQUFTLEVBQUUsU0FBUztTQUNyQixDQUFBO0lBQ0gsQ0FBQzs7O1lBOURGLFFBQVEsU0FBQztnQkFDUixZQUFZLEVBQUU7b0JBQ1oscUJBQXFCO29CQUNyQixxQkFBcUI7b0JBQ3JCLFVBQVU7aUJBQ1g7Z0JBQ0QsT0FBTyxFQUFFO29CQUNQLFlBQVk7b0JBQ1osV0FBVztvQkFDWCxnQkFBZ0I7b0JBQ2hCLFdBQVcsQ0FBQyxPQUFPLEVBQUU7b0JBQ3JCLHNCQUFzQjtvQkFDdEIsa0JBQWtCLENBQUMsT0FBTyxFQUFFO29CQUM1QixxQkFBcUI7b0JBQ3JCLGNBQWMsQ0FBQyxPQUFPLENBQUM7d0JBQ25CLEdBQUcsZUFBZTtxQkFDckIsQ0FBQztvQkFDRixVQUFVO29CQUNWLGVBQWU7b0JBQ2YsYUFBYSxDQUFDLE9BQU8sQ0FBQzt3QkFDbEIsT0FBTyxFQUFFLFlBQVk7cUJBQ3hCLENBQUM7b0JBQ0YsWUFBWSxDQUFDLE9BQU8sRUFBRTtvQkFDdEIsY0FBYyxDQUFDLE9BQU8sQ0FBQzt3QkFDbkIsS0FBSyxFQUFFLEdBQUc7d0JBQ1YsTUFBTSxFQUFFLEdBQUc7cUJBQ2QsQ0FBQztvQkFDRixnQkFBZ0I7b0JBQ2hCLHFCQUFxQjtvQkFDckIsbUJBQW1CO29CQUNuQixZQUFZO29CQUNaLG1CQUFtQjtpQkFDcEI7Z0JBQ0QsU0FBUyxFQUFFO29CQUNULEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLElBQWtELEVBQUU7b0JBQ2xGLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxRQUFRLElBQUksRUFBRTtvQkFDdkMsRUFBRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsUUFBUSxFQUFFLHNCQUFzQixFQUFFO29CQUNwRSxjQUFjO29CQUNkLGtCQUFrQjtvQkFDbEIsa0JBQWtCO2lCQUNuQjtnQkFDRCxPQUFPLEVBQUU7b0JBQ1AscUJBQXFCO29CQUNyQixxQkFBcUI7aUJBQ3RCO2dCQUNELGVBQWUsRUFBRTtvQkFDZixxQkFBcUI7b0JBQ3JCLHFCQUFxQjtpQkFDdEI7YUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBMT0NBTEVfSUQsIE5nTW9kdWxlRmFjdG9yeUxvYWRlciwgU3lzdGVtSnNOZ01vZHVsZUxvYWRlciwgUHJvdmlkZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IEh0dHBDbGllbnRNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcblxyXG5pbXBvcnQgeyBNb2RhbE1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktbW9kYWwnO1xyXG5pbXBvcnQgeyBOb3RpZnlNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLW5vdGlmeSc7XHJcbmltcG9ydCB7IE1lc3NhZ2VyTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1tZXNzYWdlcic7XHJcbmltcG9ydCB7IEZhcnJpc0RpYWxvZ01vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktZGlhbG9nJztcclxuaW1wb3J0IHsgTW9kdWxlQ29uZmlnIH0gZnJvbSAnLi9jb25maWcvbW9kdWxlLmNvbmZpZyc7XHJcbmltcG9ydCB7IFB1c2hTZWxlY3RvckNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9wdXNoLXNlbGVjdG9yL3B1c2gtc2VsZWN0b3IuY29tcG9uZW50JztcclxuaW1wb3J0IHsgUHVsbFNlbGVjdG9yQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL3B1bGwtc2VsZWN0b3IvcHVsbC1zZWxlY3Rvci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBMb2NhbGVQaXBlIH0gZnJvbSBcIi4vcGlwZS9sb2NhbGUucGlwZVwiO1xyXG5pbXBvcnQgeyBCaWZEYXRhU2VydmljZSB9IGZyb20gJy4vc2VydmljZS9iaWYtZGF0YS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQmlmU291cmNlVWlTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlL2JpZi1zb3VyY2UtdWkuc2VydmljZSc7XHJcbmltcG9ydCB7IEJpZlRhcmdldFVpU2VydmljZSB9IGZyb20gJy4vc2VydmljZS9iaWYtdGFyZ2V0LXVpLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBMb2FkaW5nTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1sb2FkaW5nJztcclxuaW1wb3J0IHsgVHJlZU1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktdHJlZSc7XHJcbmltcG9ydCB7IERhdGFncmlkTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1kYXRhZ3JpZCc7XHJcbmltcG9ydCB7IEFuZ3VsYXJEcmFnZ2FibGVNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWRyYWdnYWJsZSc7XHJcbmltcG9ydCB7IEZhcnJpc0NvbW1vbk1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktY29tbW9uJztcclxuaW1wb3J0IHsgRGF0YWdyaWRFZGl0b3JzTW9kdWxlLCBFZGl0b3JQcm92aWRlcnMgfSBmcm9tICdAZmFycmlzL3VpLWRhdGFncmlkLWVkaXRvcnMnO1xyXG5pbXBvcnQgeyBUcmVlVGFibGVNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLXRyZWV0YWJsZSc7XHJcbmltcG9ydCB7IElucHV0R3JvdXBNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWlucHV0LWdyb3VwJztcclxuaW1wb3J0IHsgTGFuZ3VhZ2VUZXh0Ym94TW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1sYW5ndWFnZS10ZXh0Ym94JztcclxuaW1wb3J0IHsgTnVtYmVyU3Bpbm5lck1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktbnVtYmVyLXNwaW5uZXInO1xyXG5pbXBvcnQgeyBTd2l0Y2hNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLXN3aXRjaCc7XHJcbmltcG9ydCB7IEZhcnJpc1NlY3Rpb25Nb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLXNlY3Rpb24nO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtcclxuICAgIFB1c2hTZWxlY3RvckNvbXBvbmVudCxcclxuICAgIFB1bGxTZWxlY3RvckNvbXBvbmVudCxcclxuICAgIExvY2FsZVBpcGUsXHJcbiAgXSxcclxuICBpbXBvcnRzOiBbXHJcbiAgICBDb21tb25Nb2R1bGUsXHJcbiAgICBGb3Jtc01vZHVsZSxcclxuICAgIEh0dHBDbGllbnRNb2R1bGUsXHJcbiAgICBNb2RhbE1vZHVsZS5mb3JSb290KCksXHJcbiAgICBBbmd1bGFyRHJhZ2dhYmxlTW9kdWxlLFxyXG4gICAgRmFycmlzQ29tbW9uTW9kdWxlLmZvclJvb3QoKSxcclxuICAgIERhdGFncmlkRWRpdG9yc01vZHVsZSxcclxuICAgIERhdGFncmlkTW9kdWxlLmZvclJvb3QoW1xyXG4gICAgICAgIC4uLkVkaXRvclByb3ZpZGVyc1xyXG4gICAgXSksXHJcbiAgICBUcmVlTW9kdWxlLFxyXG4gICAgVHJlZVRhYmxlTW9kdWxlLFxyXG4gICAgTG9hZGluZ01vZHVsZS5mb3JSb290KHtcclxuICAgICAgICBtZXNzYWdlOiAnTG9hZGluZy4uLidcclxuICAgIH0pLFxyXG4gICAgTm90aWZ5TW9kdWxlLmZvclJvb3QoKSxcclxuICAgIE1lc3NhZ2VyTW9kdWxlLmZvclJvb3Qoe1xyXG4gICAgICAgIHdpZHRoOiA1NTAsXHJcbiAgICAgICAgaGVpZ2h0OiA0NTBcclxuICAgIH0pLFxyXG4gICAgSW5wdXRHcm91cE1vZHVsZSxcclxuICAgIExhbmd1YWdlVGV4dGJveE1vZHVsZSxcclxuICAgIE51bWJlclNwaW5uZXJNb2R1bGUsXHJcbiAgICBTd2l0Y2hNb2R1bGUsXHJcbiAgICBGYXJyaXNTZWN0aW9uTW9kdWxlLFxyXG4gIF0sXHJcbiAgcHJvdmlkZXJzOiBbXHJcbiAgICB7IHByb3ZpZGU6IExPQ0FMRV9JRCwgdXNlVmFsdWU6IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdsYW5ndWFnZUNvZGUnKSB8fCAnemgtQ0hTJyB9LFxyXG4gICAgeyBwcm92aWRlOiBNb2R1bGVDb25maWcsIHVzZVZhbHVlOiB7fSB9LFxyXG4gICAgeyBwcm92aWRlOiBOZ01vZHVsZUZhY3RvcnlMb2FkZXIsIHVzZUNsYXNzOiBTeXN0ZW1Kc05nTW9kdWxlTG9hZGVyIH0sXHJcbiAgICBCaWZEYXRhU2VydmljZSxcclxuICAgIEJpZlNvdXJjZVVpU2VydmljZSxcclxuICAgIEJpZlRhcmdldFVpU2VydmljZSxcclxuICBdLFxyXG4gIGV4cG9ydHM6IFtcclxuICAgIFB1c2hTZWxlY3RvckNvbXBvbmVudCxcclxuICAgIFB1bGxTZWxlY3RvckNvbXBvbmVudFxyXG4gIF0sXHJcbiAgZW50cnlDb21wb25lbnRzOiBbXHJcbiAgICBQdXNoU2VsZWN0b3JDb21wb25lbnQsXHJcbiAgICBQdWxsU2VsZWN0b3JDb21wb25lbnRcclxuICBdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgQmlmTWFudWFsQ3JlYXRpb25Nb2R1bGUge1xyXG4gIHB1YmxpYyBzdGF0aWMgZm9yUm9vdChjb25maWc/OiBNb2R1bGVDb25maWcpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcclxuICAgIGNvbnN0IHByb3ZpZGVyczogUHJvdmlkZXJbXSA9IFtcclxuICAgICAgeyBwcm92aWRlOiBNb2R1bGVDb25maWcsIHVzZVZhbHVlOiBjb25maWcgfHwge30gfSxcclxuICAgICAgQmlmRGF0YVNlcnZpY2UsXHJcbiAgICAgIEJpZlNvdXJjZVVpU2VydmljZSxcclxuICAgICAgQmlmVGFyZ2V0VWlTZXJ2aWNlLFxyXG4gICAgXTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5nTW9kdWxlOiBCaWZNYW51YWxDcmVhdGlvbk1vZHVsZSxcclxuICAgICAgcHJvdmlkZXJzOiBwcm92aWRlcnNcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19