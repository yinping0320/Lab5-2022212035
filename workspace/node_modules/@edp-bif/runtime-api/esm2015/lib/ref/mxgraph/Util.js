/**
 * @fileoverview added by tsickle
 * Generated from: lib/ref/mxgraph/Util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { mxgraph } from './mxgraphFactory';
/**
 * Util
 * @type {?}
 */
const mxAbstractCanvas2DType = mxgraph.mxAbstractCanvas2D;
export { mxAbstractCanvas2DType as mxAbstractCanvas2D };
/** @type {?} */
const mxAnimationType = mxgraph.mxAnimation;
export { mxAnimationType as mxAnimation };
/** @type {?} */
const mxAutoSaveManagerType = mxgraph.mxAutoSaveManager;
export { mxAutoSaveManagerType as mxAutoSaveManager };
/** @type {?} */
const mxClipboardType = mxgraph.mxClipboard;
export { mxClipboardType as mxClipboard };
/** @type {?} */
const mxConstantsType = mxgraph.mxConstants;
export { mxConstantsType as mxConstants };
/** @type {?} */
const mxDictionaryType = mxgraph.mxDictionary;
export { mxDictionaryType as mxDictionary };
/** @type {?} */
const mxDivResizerType = mxgraph.mxDivResizer;
export { mxDivResizerType as mxDivResizer };
/** @type {?} */
const mxDragSourceType = mxgraph.mxDragSource;
export { mxDragSourceType as mxDragSource };
/** @type {?} */
const mxEffectsType = mxgraph.mxEffects;
export { mxEffectsType as mxEffects };
/** @type {?} */
const mxEventType = mxgraph.mxEvent;
export { mxEventType as mxEvent };
/** @type {?} */
const mxEventObjectType = mxgraph.mxEventObject;
export { mxEventObjectType as mxEventObject };
/** @type {?} */
const mxEventSourceType = mxgraph.mxEventSource;
export { mxEventSourceType as mxEventSource };
/** @type {?} */
const mxFormType = mxgraph.mxForm;
export { mxFormType as mxForm };
/** @type {?} */
const mxGuideType = mxgraph.mxGuide;
export { mxGuideType as mxGuide };
/** @type {?} */
const mxImageType = mxgraph.mxImage;
export { mxImageType as mxImage };
/** @type {?} */
const mxImageBundleType = mxgraph.mxImageBundle;
export { mxImageBundleType as mxImageBundle };
/** @type {?} */
const mxImageExportType = mxgraph.mxImageExport;
export { mxImageExportType as mxImageExport };
/** @type {?} */
const mxLogType = mxgraph.mxLog;
export { mxLogType as mxLog };
/** @type {?} */
const mxMorphingType = mxgraph.mxMorphing;
export { mxMorphingType as mxMorphing };
/** @type {?} */
const mxMouseEventType = mxgraph.mxMouseEvent;
export { mxMouseEventType as mxMouseEvent };
/** @type {?} */
const mxObjectIdentityType = mxgraph.mxObjectIdentity;
export { mxObjectIdentityType as mxObjectIdentity };
/** @type {?} */
const mxPanningManagerType = mxgraph.mxPanningManager;
export { mxPanningManagerType as mxPanningManager };
/** @type {?} */
const mxPointType = mxgraph.mxPoint;
export { mxPointType as mxPoint };
/** @type {?} */
const mxPopupMenuType = mxgraph.mxPopupMenu;
export { mxPopupMenuType as mxPopupMenu };
/** @type {?} */
const mxRectangleType = mxgraph.mxRectangle;
export { mxRectangleType as mxRectangle };
/** @type {?} */
const mxResourcesType = mxgraph.mxResources;
export { mxResourcesType as mxResources };
/** @type {?} */
const mxSvgCanvas2DType = mxgraph.mxSvgCanvas2D;
export { mxSvgCanvas2DType as mxSvgCanvas2D };
/** @type {?} */
const mxToolbarType = mxgraph.mxToolbar;
export { mxToolbarType as mxToolbar };
/** @type {?} */
const mxUndoableEditType = mxgraph.mxUndoableEdit;
export { mxUndoableEditType as mxUndoableEdit };
/** @type {?} */
const mxUndoManagerType = mxgraph.mxUndoManager;
export { mxUndoManagerType as mxUndoManager };
/** @type {?} */
const mxUrlConverterType = mxgraph.mxUrlConverter;
export { mxUrlConverterType as mxUrlConverter };
/** @type {?} */
const mxUtilsType = mxgraph.mxUtils;
export { mxUtilsType as mxUtils };
/** @type {?} */
const mxVmlCanvas2DType = mxgraph.mxVmlCanvas2D;
export { mxVmlCanvas2DType as mxVmlCanvas2D };
/** @type {?} */
const mxWindowType = mxgraph.mxWindow;
export { mxWindowType as mxWindow };
/** @type {?} */
const mxXmlCanvas2DType = mxgraph.mxXmlCanvas2D;
export { mxXmlCanvas2DType as mxXmlCanvas2D };
/** @type {?} */
const mxXmlRequestType = mxgraph.mxXmlRequest;
export { mxXmlRequestType as mxXmlRequest };
//# sourceMappingURL=data:application/json;base64,