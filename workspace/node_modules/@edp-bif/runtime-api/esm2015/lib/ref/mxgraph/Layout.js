/**
 * @fileoverview added by tsickle
 * Generated from: lib/ref/mxgraph/Layout.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { mxgraph } from './mxgraphFactory';
/**
 * Layout
 * @type {?}
 */
const mxCircleLayoutType = mxgraph.mxCircleLayout;
export { mxCircleLayoutType as mxCircleLayout };
/** @type {?} */
const mxCompactTreeLayoutType = mxgraph.mxCompactTreeLayout;
export { mxCompactTreeLayoutType as mxCompactTreeLayout };
/** @type {?} */
const mxCompositeLayoutType = mxgraph.mxCompositeLayout;
export { mxCompositeLayoutType as mxCompositeLayout };
/** @type {?} */
const mxEdgeLabelLayoutType = mxgraph.mxEdgeLabelLayout;
export { mxEdgeLabelLayoutType as mxEdgeLabelLayout };
/** @type {?} */
const mxFastOrganicLayoutType = mxgraph.mxFastOrganicLayout;
export { mxFastOrganicLayoutType as mxFastOrganicLayout };
/** @type {?} */
const mxGraphLayoutType = mxgraph.mxGraphLayout;
export { mxGraphLayoutType as mxGraphLayout };
/** @type {?} */
const mxParallelEdgeLayoutType = mxgraph.mxParallelEdgeLayout;
export { mxParallelEdgeLayoutType as mxParallelEdgeLayout };
/** @type {?} */
const mxPartitionLayoutType = mxgraph.mxPartitionLayout;
export { mxPartitionLayoutType as mxPartitionLayout };
/** @type {?} */
const mxRadialTreeLayoutType = mxgraph.mxRadialTreeLayout;
export { mxRadialTreeLayoutType as mxRadialTreeLayout };
/** @type {?} */
const mxStackLayoutType = mxgraph.mxStackLayout;
export { mxStackLayoutType as mxStackLayout };
/**
 * Layout Hierarchical
 * @type {?}
 */
const mxHierarchicalLayoutType = mxgraph.mxHierarchicalLayout;
export { mxHierarchicalLayoutType as mxHierarchicalLayout };
/** @type {?} */
const mxSwimlaneLayoutType = mxgraph.mxSwimlaneLayout;
export { mxSwimlaneLayoutType as mxSwimlaneLayout };
/**
 * Layout Hierarchical Model
 * @type {?}
 */
const mxGraphAbstractHierarchyCellType = mxgraph.mxGraphAbstractHierarchyCell;
export { mxGraphAbstractHierarchyCellType as mxGraphAbstractHierarchyCell };
/** @type {?} */
const mxGraphHierarchyEdgeType = mxgraph.mxGraphHierarchyEdge;
export { mxGraphHierarchyEdgeType as mxGraphHierarchyEdge };
/** @type {?} */
const mxGraphHierarchyModelType = mxgraph.mxGraphHierarchyModel;
export { mxGraphHierarchyModelType as mxGraphHierarchyModel };
/** @type {?} */
const mxGraphHierarchyNodeType = mxgraph.mxGraphHierarchyNode;
export { mxGraphHierarchyNodeType as mxGraphHierarchyNode };
/** @type {?} */
const mxSwimlaneModelType = mxgraph.mxSwimlaneModel;
export { mxSwimlaneModelType as mxSwimlaneModel };
/**
 * Layout Hierarchical Stage
 * @type {?}
 */
const mxCoordinateAssignmentType = mxgraph.mxCoordinateAssignment;
export { mxCoordinateAssignmentType as mxCoordinateAssignment };
/** @type {?} */
const mxHierarchicalLayoutStageType = mxgraph.mxHierarchicalLayoutStage;
export { mxHierarchicalLayoutStageType as mxHierarchicalLayoutStage };
/** @type {?} */
const mxMedianHybridCrossingReductionType = mxgraph.mxMedianHybridCrossingReduction;
export { mxMedianHybridCrossingReductionType as mxMedianHybridCrossingReduction };
/** @type {?} */
const mxMinimumCycleRemoverType = mxgraph.mxMinimumCycleRemover;
export { mxMinimumCycleRemoverType as mxMinimumCycleRemover };
/** @type {?} */
const mxSwimlaneOrderingType = mxgraph.mxSwimlaneOrdering;
export { mxSwimlaneOrderingType as mxSwimlaneOrdering };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGF5b3V0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVkcC1iaWYvcnVudGltZS1hcGkvIiwic291cmNlcyI6WyJsaWIvcmVmL214Z3JhcGgvTGF5b3V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7OztNQUtyQyxrQkFBa0IsR0FBRyxPQUFPLENBQUMsY0FBYztBQUNqRCxPQUFPLEVBQUUsa0JBQWtCLElBQUksY0FBYyxFQUFFLENBQUM7O01BRTFDLHVCQUF1QixHQUFHLE9BQU8sQ0FBQyxtQkFBbUI7QUFDM0QsT0FBTyxFQUFFLHVCQUF1QixJQUFJLG1CQUFtQixFQUFFLENBQUM7O01BRXBELHFCQUFxQixHQUFHLE9BQU8sQ0FBQyxpQkFBaUI7QUFDdkQsT0FBTyxFQUFFLHFCQUFxQixJQUFJLGlCQUFpQixFQUFFLENBQUM7O01BRWhELHFCQUFxQixHQUFHLE9BQU8sQ0FBQyxpQkFBaUI7QUFDdkQsT0FBTyxFQUFFLHFCQUFxQixJQUFJLGlCQUFpQixFQUFFLENBQUM7O01BRWhELHVCQUF1QixHQUFHLE9BQU8sQ0FBQyxtQkFBbUI7QUFDM0QsT0FBTyxFQUFFLHVCQUF1QixJQUFJLG1CQUFtQixFQUFFLENBQUM7O01BRXBELGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxhQUFhO0FBQy9DLE9BQU8sRUFBRSxpQkFBaUIsSUFBSSxhQUFhLEVBQUUsQ0FBQzs7TUFFeEMsd0JBQXdCLEdBQUcsT0FBTyxDQUFDLG9CQUFvQjtBQUM3RCxPQUFPLEVBQUUsd0JBQXdCLElBQUksb0JBQW9CLEVBQUUsQ0FBQzs7TUFFdEQscUJBQXFCLEdBQUcsT0FBTyxDQUFDLGlCQUFpQjtBQUN2RCxPQUFPLEVBQUUscUJBQXFCLElBQUksaUJBQWlCLEVBQUUsQ0FBQzs7TUFFaEQsc0JBQXNCLEdBQUcsT0FBTyxDQUFDLGtCQUFrQjtBQUN6RCxPQUFPLEVBQUUsc0JBQXNCLElBQUksa0JBQWtCLEVBQUUsQ0FBQzs7TUFFbEQsaUJBQWlCLEdBQUcsT0FBTyxDQUFDLGFBQWE7QUFDL0MsT0FBTyxFQUFFLGlCQUFpQixJQUFJLGFBQWEsRUFBRSxDQUFDOzs7OztNQUt4Qyx3QkFBd0IsR0FBRyxPQUFPLENBQUMsb0JBQW9CO0FBQzdELE9BQU8sRUFBRSx3QkFBd0IsSUFBSSxvQkFBb0IsRUFBRSxDQUFDOztNQUV0RCxvQkFBb0IsR0FBRyxPQUFPLENBQUMsZ0JBQWdCO0FBQ3JELE9BQU8sRUFBRSxvQkFBb0IsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDOzs7OztNQUs5QyxnQ0FBZ0MsR0FBRyxPQUFPLENBQUMsNEJBQTRCO0FBQzdFLE9BQU8sRUFBRSxnQ0FBZ0MsSUFBSSw0QkFBNEIsRUFBRSxDQUFDOztNQUV0RSx3QkFBd0IsR0FBRyxPQUFPLENBQUMsb0JBQW9CO0FBQzdELE9BQU8sRUFBRSx3QkFBd0IsSUFBSSxvQkFBb0IsRUFBRSxDQUFDOztNQUV0RCx5QkFBeUIsR0FBRyxPQUFPLENBQUMscUJBQXFCO0FBQy9ELE9BQU8sRUFBRSx5QkFBeUIsSUFBSSxxQkFBcUIsRUFBRSxDQUFDOztNQUV4RCx3QkFBd0IsR0FBRyxPQUFPLENBQUMsb0JBQW9CO0FBQzdELE9BQU8sRUFBRSx3QkFBd0IsSUFBSSxvQkFBb0IsRUFBRSxDQUFDOztNQUV0RCxtQkFBbUIsR0FBRyxPQUFPLENBQUMsZUFBZTtBQUNuRCxPQUFPLEVBQUUsbUJBQW1CLElBQUksZUFBZSxFQUFFLENBQUM7Ozs7O01BSzVDLDBCQUEwQixHQUFHLE9BQU8sQ0FBQyxzQkFBc0I7QUFDakUsT0FBTyxFQUFFLDBCQUEwQixJQUFJLHNCQUFzQixFQUFFLENBQUM7O01BRTFELDZCQUE2QixHQUFHLE9BQU8sQ0FBQyx5QkFBeUI7QUFDdkUsT0FBTyxFQUFFLDZCQUE2QixJQUFJLHlCQUF5QixFQUFFLENBQUM7O01BRWhFLG1DQUFtQyxHQUFHLE9BQU8sQ0FBQywrQkFBK0I7QUFDbkYsT0FBTyxFQUFFLG1DQUFtQyxJQUFJLCtCQUErQixFQUFFLENBQUM7O01BRTVFLHlCQUF5QixHQUFHLE9BQU8sQ0FBQyxxQkFBcUI7QUFDL0QsT0FBTyxFQUFFLHlCQUF5QixJQUFJLHFCQUFxQixFQUFFLENBQUM7O01BRXhELHNCQUFzQixHQUFHLE9BQU8sQ0FBQyxrQkFBa0I7QUFDekQsT0FBTyxFQUFFLHNCQUFzQixJQUFJLGtCQUFrQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBteGdyYXBoIH0gZnJvbSAnLi9teGdyYXBoRmFjdG9yeSc7XHJcblxyXG4vKipcclxuICogTGF5b3V0XHJcbiAqL1xyXG5jb25zdCBteENpcmNsZUxheW91dFR5cGUgPSBteGdyYXBoLm14Q2lyY2xlTGF5b3V0O1xyXG5leHBvcnQgeyBteENpcmNsZUxheW91dFR5cGUgYXMgbXhDaXJjbGVMYXlvdXQgfTtcclxuXHJcbmNvbnN0IG14Q29tcGFjdFRyZWVMYXlvdXRUeXBlID0gbXhncmFwaC5teENvbXBhY3RUcmVlTGF5b3V0O1xyXG5leHBvcnQgeyBteENvbXBhY3RUcmVlTGF5b3V0VHlwZSBhcyBteENvbXBhY3RUcmVlTGF5b3V0IH07XHJcblxyXG5jb25zdCBteENvbXBvc2l0ZUxheW91dFR5cGUgPSBteGdyYXBoLm14Q29tcG9zaXRlTGF5b3V0O1xyXG5leHBvcnQgeyBteENvbXBvc2l0ZUxheW91dFR5cGUgYXMgbXhDb21wb3NpdGVMYXlvdXQgfTtcclxuXHJcbmNvbnN0IG14RWRnZUxhYmVsTGF5b3V0VHlwZSA9IG14Z3JhcGgubXhFZGdlTGFiZWxMYXlvdXQ7XHJcbmV4cG9ydCB7IG14RWRnZUxhYmVsTGF5b3V0VHlwZSBhcyBteEVkZ2VMYWJlbExheW91dCB9O1xyXG5cclxuY29uc3QgbXhGYXN0T3JnYW5pY0xheW91dFR5cGUgPSBteGdyYXBoLm14RmFzdE9yZ2FuaWNMYXlvdXQ7XHJcbmV4cG9ydCB7IG14RmFzdE9yZ2FuaWNMYXlvdXRUeXBlIGFzIG14RmFzdE9yZ2FuaWNMYXlvdXQgfTtcclxuXHJcbmNvbnN0IG14R3JhcGhMYXlvdXRUeXBlID0gbXhncmFwaC5teEdyYXBoTGF5b3V0O1xyXG5leHBvcnQgeyBteEdyYXBoTGF5b3V0VHlwZSBhcyBteEdyYXBoTGF5b3V0IH07XHJcblxyXG5jb25zdCBteFBhcmFsbGVsRWRnZUxheW91dFR5cGUgPSBteGdyYXBoLm14UGFyYWxsZWxFZGdlTGF5b3V0O1xyXG5leHBvcnQgeyBteFBhcmFsbGVsRWRnZUxheW91dFR5cGUgYXMgbXhQYXJhbGxlbEVkZ2VMYXlvdXQgfTtcclxuXHJcbmNvbnN0IG14UGFydGl0aW9uTGF5b3V0VHlwZSA9IG14Z3JhcGgubXhQYXJ0aXRpb25MYXlvdXQ7XHJcbmV4cG9ydCB7IG14UGFydGl0aW9uTGF5b3V0VHlwZSBhcyBteFBhcnRpdGlvbkxheW91dCB9O1xyXG5cclxuY29uc3QgbXhSYWRpYWxUcmVlTGF5b3V0VHlwZSA9IG14Z3JhcGgubXhSYWRpYWxUcmVlTGF5b3V0O1xyXG5leHBvcnQgeyBteFJhZGlhbFRyZWVMYXlvdXRUeXBlIGFzIG14UmFkaWFsVHJlZUxheW91dCB9O1xyXG5cclxuY29uc3QgbXhTdGFja0xheW91dFR5cGUgPSBteGdyYXBoLm14U3RhY2tMYXlvdXQ7XHJcbmV4cG9ydCB7IG14U3RhY2tMYXlvdXRUeXBlIGFzIG14U3RhY2tMYXlvdXQgfTtcclxuXHJcbi8qKlxyXG4qIExheW91dCBIaWVyYXJjaGljYWxcclxuKi9cclxuY29uc3QgbXhIaWVyYXJjaGljYWxMYXlvdXRUeXBlID0gbXhncmFwaC5teEhpZXJhcmNoaWNhbExheW91dDtcclxuZXhwb3J0IHsgbXhIaWVyYXJjaGljYWxMYXlvdXRUeXBlIGFzIG14SGllcmFyY2hpY2FsTGF5b3V0IH07XHJcblxyXG5jb25zdCBteFN3aW1sYW5lTGF5b3V0VHlwZSA9IG14Z3JhcGgubXhTd2ltbGFuZUxheW91dDtcclxuZXhwb3J0IHsgbXhTd2ltbGFuZUxheW91dFR5cGUgYXMgbXhTd2ltbGFuZUxheW91dCB9O1xyXG5cclxuLyoqXHJcbiogTGF5b3V0IEhpZXJhcmNoaWNhbCBNb2RlbFxyXG4qL1xyXG5jb25zdCBteEdyYXBoQWJzdHJhY3RIaWVyYXJjaHlDZWxsVHlwZSA9IG14Z3JhcGgubXhHcmFwaEFic3RyYWN0SGllcmFyY2h5Q2VsbDtcclxuZXhwb3J0IHsgbXhHcmFwaEFic3RyYWN0SGllcmFyY2h5Q2VsbFR5cGUgYXMgbXhHcmFwaEFic3RyYWN0SGllcmFyY2h5Q2VsbCB9O1xyXG5cclxuY29uc3QgbXhHcmFwaEhpZXJhcmNoeUVkZ2VUeXBlID0gbXhncmFwaC5teEdyYXBoSGllcmFyY2h5RWRnZTtcclxuZXhwb3J0IHsgbXhHcmFwaEhpZXJhcmNoeUVkZ2VUeXBlIGFzIG14R3JhcGhIaWVyYXJjaHlFZGdlIH07XHJcblxyXG5jb25zdCBteEdyYXBoSGllcmFyY2h5TW9kZWxUeXBlID0gbXhncmFwaC5teEdyYXBoSGllcmFyY2h5TW9kZWw7XHJcbmV4cG9ydCB7IG14R3JhcGhIaWVyYXJjaHlNb2RlbFR5cGUgYXMgbXhHcmFwaEhpZXJhcmNoeU1vZGVsIH07XHJcblxyXG5jb25zdCBteEdyYXBoSGllcmFyY2h5Tm9kZVR5cGUgPSBteGdyYXBoLm14R3JhcGhIaWVyYXJjaHlOb2RlO1xyXG5leHBvcnQgeyBteEdyYXBoSGllcmFyY2h5Tm9kZVR5cGUgYXMgbXhHcmFwaEhpZXJhcmNoeU5vZGUgfTtcclxuXHJcbmNvbnN0IG14U3dpbWxhbmVNb2RlbFR5cGUgPSBteGdyYXBoLm14U3dpbWxhbmVNb2RlbDtcclxuZXhwb3J0IHsgbXhTd2ltbGFuZU1vZGVsVHlwZSBhcyBteFN3aW1sYW5lTW9kZWwgfTtcclxuXHJcbi8qKlxyXG4qIExheW91dCBIaWVyYXJjaGljYWwgU3RhZ2VcclxuKi9cclxuY29uc3QgbXhDb29yZGluYXRlQXNzaWdubWVudFR5cGUgPSBteGdyYXBoLm14Q29vcmRpbmF0ZUFzc2lnbm1lbnQ7XHJcbmV4cG9ydCB7IG14Q29vcmRpbmF0ZUFzc2lnbm1lbnRUeXBlIGFzIG14Q29vcmRpbmF0ZUFzc2lnbm1lbnQgfTtcclxuXHJcbmNvbnN0IG14SGllcmFyY2hpY2FsTGF5b3V0U3RhZ2VUeXBlID0gbXhncmFwaC5teEhpZXJhcmNoaWNhbExheW91dFN0YWdlO1xyXG5leHBvcnQgeyBteEhpZXJhcmNoaWNhbExheW91dFN0YWdlVHlwZSBhcyBteEhpZXJhcmNoaWNhbExheW91dFN0YWdlIH07XHJcblxyXG5jb25zdCBteE1lZGlhbkh5YnJpZENyb3NzaW5nUmVkdWN0aW9uVHlwZSA9IG14Z3JhcGgubXhNZWRpYW5IeWJyaWRDcm9zc2luZ1JlZHVjdGlvbjtcclxuZXhwb3J0IHsgbXhNZWRpYW5IeWJyaWRDcm9zc2luZ1JlZHVjdGlvblR5cGUgYXMgbXhNZWRpYW5IeWJyaWRDcm9zc2luZ1JlZHVjdGlvbiB9O1xyXG5cclxuY29uc3QgbXhNaW5pbXVtQ3ljbGVSZW1vdmVyVHlwZSA9IG14Z3JhcGgubXhNaW5pbXVtQ3ljbGVSZW1vdmVyO1xyXG5leHBvcnQgeyBteE1pbmltdW1DeWNsZVJlbW92ZXJUeXBlIGFzIG14TWluaW11bUN5Y2xlUmVtb3ZlciB9O1xyXG5cclxuY29uc3QgbXhTd2ltbGFuZU9yZGVyaW5nVHlwZSA9IG14Z3JhcGgubXhTd2ltbGFuZU9yZGVyaW5nO1xyXG5leHBvcnQgeyBteFN3aW1sYW5lT3JkZXJpbmdUeXBlIGFzIG14U3dpbWxhbmVPcmRlcmluZyB9OyJdfQ==