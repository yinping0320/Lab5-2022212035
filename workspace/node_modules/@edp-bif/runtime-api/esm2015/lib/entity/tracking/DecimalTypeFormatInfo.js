/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/tracking/DecimalTypeFormatInfo.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModelJsonHelper, JsonConvertableImpl } from "@edp-aif/common-api";
import { ScaleMode } from "./ScaleMode";
export class DecimalTypeFormatInfo extends JsonConvertableImpl {
    constructor() {
        super(...arguments);
        this.scaleMode = ScaleMode.DEFAULT;
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.scale = 0;
        this.scaleMode = ScaleMode.DEFAULT;
        this.fieldPath = null;
        this.version = 0;
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "scale", this.scale);
        BpmnModelJsonHelper.SetAttributeValue(obj, "scale", this.scale);
        BpmnModelJsonHelper.SetAttributeValue(obj, "scaleMode", this.scaleMode);
        BpmnModelJsonHelper.SetAttributeValue(obj, "fieldPath", this.fieldPath);
        BpmnModelJsonHelper.SetAttributeValue(obj, "version", this.version);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.scale = BpmnModelJsonHelper.GetAttributeValueAsNumber(obj, "scale");
        /** @type {?} */
        const scaleMode = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "scaleMode");
        this.scaleMode = scaleMode == null ? ScaleMode.DEFAULT : ScaleMode[scaleMode];
        this.fieldPath = BpmnModelJsonHelper.GetAttributeValueAsString(obj, "fieldPath");
        this.version = BpmnModelJsonHelper.GetAttributeValueAsNumber(obj, "version");
    }
}
if (false) {
    /** @type {?} */
    DecimalTypeFormatInfo.prototype.scale;
    /** @type {?} */
    DecimalTypeFormatInfo.prototype.scaleMode;
    /** @type {?} */
    DecimalTypeFormatInfo.prototype.fieldPath;
    /** @type {?} */
    DecimalTypeFormatInfo.prototype.version;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVjaW1hbFR5cGVGb3JtYXRJbmZvLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGVkcC1iaWYvcnVudGltZS1hcGkvIiwic291cmNlcyI6WyJsaWIvZW50aXR5L3RyYWNraW5nL0RlY2ltYWxUeXBlRm9ybWF0SW5mby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQy9FLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFeEMsTUFBTSxPQUFPLHFCQUFzQixTQUFRLG1CQUFtQjtJQUE5RDs7UUFFSSxjQUFTLEdBQWMsU0FBUyxDQUFDLE9BQU8sQ0FBQztJQW1DN0MsQ0FBQzs7Ozs7SUEvQmEsbUJBQW1CO1FBQ3pCLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBRTVCLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ2YsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDO1FBQ25DLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO0lBQ3JCLENBQUM7Ozs7SUFFTSxtQkFBbUI7O1lBQ2xCLEdBQUcsR0FBRyxLQUFLLENBQUMsbUJBQW1CLEVBQUU7UUFFckMsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEUsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEUsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDeEUsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDeEUsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFcEUsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7OztJQUVNLGtCQUFrQixDQUFDLEdBQU87UUFDN0IsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLElBQUksQ0FBQyxLQUFLLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDOztjQUNuRSxTQUFTLEdBQUcsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLFdBQVcsQ0FBQztRQUNqRixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM5RSxJQUFJLENBQUMsU0FBUyxHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNqRixJQUFJLENBQUMsT0FBTyxHQUFHLG1CQUFtQixDQUFDLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUVqRixDQUFDO0NBQ0o7OztJQXBDRyxzQ0FBYzs7SUFDZCwwQ0FBeUM7O0lBQ3pDLDBDQUFrQjs7SUFDbEIsd0NBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQnBtbk1vZGVsSnNvbkhlbHBlciwgSnNvbkNvbnZlcnRhYmxlSW1wbCB9IGZyb20gXCJAZWRwLWFpZi9jb21tb24tYXBpXCI7XHJcbmltcG9ydCB7IFNjYWxlTW9kZSB9IGZyb20gXCIuL1NjYWxlTW9kZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIERlY2ltYWxUeXBlRm9ybWF0SW5mbyBleHRlbmRzIEpzb25Db252ZXJ0YWJsZUltcGwge1xyXG4gICAgc2NhbGU6IG51bWJlcjtcclxuICAgIHNjYWxlTW9kZTogU2NhbGVNb2RlID0gU2NhbGVNb2RlLkRFRkFVTFQ7XHJcbiAgICBmaWVsZFBhdGg6IHN0cmluZztcclxuICAgIHZlcnNpb246IG51bWJlcjtcclxuXHJcbiAgICBwcm90ZWN0ZWQgUmVzZXRCZWZvcmVMb2FkRnJvbSgpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5SZXNldEJlZm9yZUxvYWRGcm9tKCk7XHJcblxyXG4gICAgICAgIHRoaXMuc2NhbGUgPSAwO1xyXG4gICAgICAgIHRoaXMuc2NhbGVNb2RlID0gU2NhbGVNb2RlLkRFRkFVTFQ7XHJcbiAgICAgICAgdGhpcy5maWVsZFBhdGggPSBudWxsO1xyXG4gICAgICAgIHRoaXMudmVyc2lvbiA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIENvbnZlcnRUb0pzb25PYmplY3QoKToge30ge1xyXG4gICAgICAgIGxldCBvYmogPSBzdXBlci5Db252ZXJ0VG9Kc29uT2JqZWN0KCk7XHJcblxyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInNjYWxlXCIsIHRoaXMuc2NhbGUpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInNjYWxlXCIsIHRoaXMuc2NhbGUpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInNjYWxlTW9kZVwiLCB0aGlzLnNjYWxlTW9kZSk7XHJcbiAgICAgICAgQnBtbk1vZGVsSnNvbkhlbHBlci5TZXRBdHRyaWJ1dGVWYWx1ZShvYmosIFwiZmllbGRQYXRoXCIsIHRoaXMuZmllbGRQYXRoKTtcclxuICAgICAgICBCcG1uTW9kZWxKc29uSGVscGVyLlNldEF0dHJpYnV0ZVZhbHVlKG9iaiwgXCJ2ZXJzaW9uXCIsIHRoaXMudmVyc2lvbik7XHJcblxyXG4gICAgICAgIHJldHVybiBvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIExvYWRGcm9tSnNvbk9iamVjdChvYmo6IHt9KTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIuTG9hZEZyb21Kc29uT2JqZWN0KG9iaik7XHJcblxyXG4gICAgICAgIHRoaXMuc2NhbGUgPSBCcG1uTW9kZWxKc29uSGVscGVyLkdldEF0dHJpYnV0ZVZhbHVlQXNOdW1iZXIob2JqLCBcInNjYWxlXCIpO1xyXG4gICAgICAgIGNvbnN0IHNjYWxlTW9kZSA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc1N0cmluZyhvYmosIFwic2NhbGVNb2RlXCIpO1xyXG4gICAgICAgIHRoaXMuc2NhbGVNb2RlID0gc2NhbGVNb2RlID09IG51bGwgPyBTY2FsZU1vZGUuREVGQVVMVCA6IFNjYWxlTW9kZVtzY2FsZU1vZGVdO1xyXG4gICAgICAgIHRoaXMuZmllbGRQYXRoID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJmaWVsZFBhdGhcIik7XHJcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzTnVtYmVyKG9iaiwgXCJ2ZXJzaW9uXCIpO1xyXG5cclxuICAgIH1cclxufSJdfQ==