/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity/tracking/StringTypeFormatInfo.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BpmnModelJsonHelper, JsonConvertableImpl } from "@edp-aif/common-api";
import { SimpleValueMappingInfo } from "./SimpleValueMappingInfo";
import { StringDisplayMode } from "./StringDisplayMode";
export class StringTypeFormatInfo extends JsonConvertableImpl {
    constructor() {
        super(...arguments);
        this.stringDisplayMode = StringDisplayMode.SIMPLEVALUEMAPPING;
        this.simpleValueMappingInfos = [];
    }
    /**
     * @protected
     * @return {?}
     */
    ResetBeforeLoadFrom() {
        super.ResetBeforeLoadFrom();
        this.stringDisplayMode = StringDisplayMode.SIMPLEVALUEMAPPING;
        this.simpleValueMappingInfos = [];
    }
    /**
     * @return {?}
     */
    ConvertToJsonObject() {
        /** @type {?} */
        let obj = super.ConvertToJsonObject();
        BpmnModelJsonHelper.SetAttributeValue(obj, "stringDisplayMode", this.stringDisplayMode);
        BpmnModelJsonHelper.SetAttributeValue(obj, "simpleValueMappingInfos", this.simpleValueMappingInfos);
        return obj;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    LoadFromJsonObject(obj) {
        super.LoadFromJsonObject(obj);
        this.stringDisplayMode = StringDisplayMode[BpmnModelJsonHelper.GetAttributeValueAsString(obj, "stringDisplayMode")];
        this.simpleValueMappingInfos = BpmnModelJsonHelper.GetAttributeValueAsList(obj, "simpleValueMappingInfos", SimpleValueMappingInfo);
    }
}
if (false) {
    /** @type {?} */
    StringTypeFormatInfo.prototype.stringDisplayMode;
    /** @type {?} */
    StringTypeFormatInfo.prototype.simpleValueMappingInfos;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RyaW5nVHlwZUZvcm1hdEluZm8uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZWRwLWJpZi9ydW50aW1lLWFwaS8iLCJzb3VyY2VzIjpbImxpYi9lbnRpdHkvdHJhY2tpbmcvU3RyaW5nVHlwZUZvcm1hdEluZm8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUUvRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUV4RCxNQUFNLE9BQU8sb0JBQXFCLFNBQVEsbUJBQW1CO0lBQTdEOztRQUNJLHNCQUFpQixHQUFzQixpQkFBaUIsQ0FBQyxrQkFBa0IsQ0FBQztRQUM1RSw0QkFBdUIsR0FBNkIsRUFBRSxDQUFDO0lBd0IzRCxDQUFDOzs7OztJQXRCYSxtQkFBbUI7UUFDekIsS0FBSyxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFFNUIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGlCQUFpQixDQUFDLGtCQUFrQixDQUFDO1FBQzlELElBQUksQ0FBQyx1QkFBdUIsR0FBRyxFQUFFLENBQUM7SUFDdEMsQ0FBQzs7OztJQUVNLG1CQUFtQjs7WUFDbEIsR0FBRyxHQUFHLEtBQUssQ0FBQyxtQkFBbUIsRUFBRTtRQUVyQyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDeEYsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLHlCQUF5QixFQUFFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBRXBHLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQzs7Ozs7SUFFTSxrQkFBa0IsQ0FBQyxHQUFPO1FBQzdCLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUU5QixJQUFJLENBQUMsaUJBQWlCLEdBQUcsaUJBQWlCLENBQUMsbUJBQW1CLENBQUMseUJBQXlCLENBQUMsR0FBRyxFQUFFLG1CQUFtQixDQUFDLENBQUMsQ0FBQztRQUNwSCxJQUFJLENBQUMsdUJBQXVCLEdBQUcsbUJBQW1CLENBQUMsdUJBQXVCLENBQUMsR0FBRyxFQUFFLHlCQUF5QixFQUFFLHNCQUFzQixDQUFDLENBQUM7SUFDdkksQ0FBQztDQUNKOzs7SUF6QkcsaURBQTRFOztJQUM1RSx1REFBdUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCcG1uTW9kZWxKc29uSGVscGVyLCBKc29uQ29udmVydGFibGVJbXBsIH0gZnJvbSBcIkBlZHAtYWlmL2NvbW1vbi1hcGlcIjtcclxuaW1wb3J0IHsgU2NhbGVNb2RlIH0gZnJvbSBcIi4vU2NhbGVNb2RlXCI7XHJcbmltcG9ydCB7IFNpbXBsZVZhbHVlTWFwcGluZ0luZm8gfSBmcm9tIFwiLi9TaW1wbGVWYWx1ZU1hcHBpbmdJbmZvXCI7XHJcbmltcG9ydCB7IFN0cmluZ0Rpc3BsYXlNb2RlIH0gZnJvbSBcIi4vU3RyaW5nRGlzcGxheU1vZGVcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBTdHJpbmdUeXBlRm9ybWF0SW5mbyBleHRlbmRzIEpzb25Db252ZXJ0YWJsZUltcGwge1xyXG4gICAgc3RyaW5nRGlzcGxheU1vZGU6IFN0cmluZ0Rpc3BsYXlNb2RlID0gU3RyaW5nRGlzcGxheU1vZGUuU0lNUExFVkFMVUVNQVBQSU5HO1xyXG4gICAgc2ltcGxlVmFsdWVNYXBwaW5nSW5mb3M6IFNpbXBsZVZhbHVlTWFwcGluZ0luZm9bXSA9IFtdO1xyXG5cclxuICAgIHByb3RlY3RlZCBSZXNldEJlZm9yZUxvYWRGcm9tKCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLlJlc2V0QmVmb3JlTG9hZEZyb20oKTtcclxuXHJcbiAgICAgICAgdGhpcy5zdHJpbmdEaXNwbGF5TW9kZSA9IFN0cmluZ0Rpc3BsYXlNb2RlLlNJTVBMRVZBTFVFTUFQUElORztcclxuICAgICAgICB0aGlzLnNpbXBsZVZhbHVlTWFwcGluZ0luZm9zID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIENvbnZlcnRUb0pzb25PYmplY3QoKToge30ge1xyXG4gICAgICAgIGxldCBvYmogPSBzdXBlci5Db252ZXJ0VG9Kc29uT2JqZWN0KCk7XHJcblxyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInN0cmluZ0Rpc3BsYXlNb2RlXCIsIHRoaXMuc3RyaW5nRGlzcGxheU1vZGUpO1xyXG4gICAgICAgIEJwbW5Nb2RlbEpzb25IZWxwZXIuU2V0QXR0cmlidXRlVmFsdWUob2JqLCBcInNpbXBsZVZhbHVlTWFwcGluZ0luZm9zXCIsIHRoaXMuc2ltcGxlVmFsdWVNYXBwaW5nSW5mb3MpO1xyXG5cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBMb2FkRnJvbUpzb25PYmplY3Qob2JqOiB7fSk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLkxvYWRGcm9tSnNvbk9iamVjdChvYmopO1xyXG5cclxuICAgICAgICB0aGlzLnN0cmluZ0Rpc3BsYXlNb2RlID0gU3RyaW5nRGlzcGxheU1vZGVbQnBtbk1vZGVsSnNvbkhlbHBlci5HZXRBdHRyaWJ1dGVWYWx1ZUFzU3RyaW5nKG9iaiwgXCJzdHJpbmdEaXNwbGF5TW9kZVwiKV07XHJcbiAgICAgICAgdGhpcy5zaW1wbGVWYWx1ZU1hcHBpbmdJbmZvcyA9IEJwbW5Nb2RlbEpzb25IZWxwZXIuR2V0QXR0cmlidXRlVmFsdWVBc0xpc3Qob2JqLCBcInNpbXBsZVZhbHVlTWFwcGluZ0luZm9zXCIsIFNpbXBsZVZhbHVlTWFwcGluZ0luZm8pO1xyXG4gICAgfVxyXG59Il19