/**
 * @fileoverview added by tsickle
 * Generated from: lib/webcmp/bif-manual-creation-source.webcmp.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { MessagerService } from "@farris/ui-messager";
import { BindingData, ViewModel, FrameContext } from "@farris/devkit";
import { PushCreationMode } from "@edp-aif/common-api";
import { FormBillCreationProcessExecutorArgs } from '../entity/form-rest/FormBillCreationProcessExecutorArgs';
import { BifDataService } from '../bif-manual-creation/service/bif-data.service';
import { BifSourceUiService } from '../bif-manual-creation/service/bif-source-ui.service';
import { LocalePipe } from '../bif-manual-creation/pipe/locale.pipe';
import { PushTaskArgs } from '../bif-manual-creation/args/PushTaskArgs';
import { ManualCreationMode } from '../entity/form-rest/ManualCreationMode';
import { EntityParamUtils } from './EntityParamUtils';
/**
 * 手工生单来源端服务类
 */
export class BifManualCreationSourceWebCmpService {
    /**
     * @param {?} sourceUiService
     * @param {?} dataService
     * @param {?} bindingData
     * @param {?} messagerService
     * @param {?} viewModel
     * @param {?} frameContext
     */
    constructor(sourceUiService, dataService, bindingData, messagerService, viewModel, frameContext) {
        this.sourceUiService = sourceUiService;
        this.dataService = dataService;
        this.bindingData = bindingData;
        this.messagerService = messagerService;
        this.viewModel = viewModel;
        this.frameContext = frameContext;
        this.localePipe = new LocalePipe(this.sourceUiService && this.sourceUiService.localeId || 'zh-CHS');
    }
    /**
     * 下推，根据来源VO Id打开生单流程选择器并执行选中的生单流程
     *
     * @param {?} sourceVoId 单据流来源视图对象 Id
     * @param {?} entities 参与生单的上游单据ID列表或实体列表
     * @param {?=} targetCommand 目标单据'单据流加载'命令的编号
     * @param {?=} bizFlowchartId 业务场景图Id
     * @param {?=} modalOptions 弹窗配置
     * @param {?=} customSelectorModuleUrl 自定义选择器url
     * @param {?=} extParams1 打开生单流程选择器弹窗扩展参数
     * @param {?=} extParams2 打开目标单据制单界面扩展参数
     * @return {?}
     */
    pushBySourceVoId(sourceVoId, entities, targetCommand, bizFlowchartId, modalOptions, customSelectorModuleUrl, extParams1, extParams2) {
        if (sourceVoId == null || sourceVoId == "" || sourceVoId.trim && sourceVoId.trim() == "") {
            this.messagerService.error(this.localePipe.transform("sourceVoIdCantBeEmpty"));
            throw "参数sourceVoId不可为空";
        }
        // 参数为空时尝试从根组件BindingData上取id，获取后仍为空则报错
        if (entities == null || ((/** @type {?} */ (entities))) == "") {
            try {
                entities = this.frameContext.root.bindingData.getObject().id;
            }
            catch (e) {
            }
            if (entities == null || ((/** @type {?} */ (entities))) == "") {
                this.messagerService.error(this.localePipe.transform("entitiesCantBeEmpty"));
                throw "参数entities不可为空";
            }
        }
        if (entities instanceof Map) {
            entities = Array.from(entities.values());
        }
        entities = Array.isArray(entities) ? entities : [entities];
        bizFlowchartId = bizFlowchartId === "" || bizFlowchartId == null ? undefined : bizFlowchartId;
        modalOptions = (/** @type {?} */ (modalOptions)) === "" || modalOptions == null ? undefined : modalOptions;
        customSelectorModuleUrl = customSelectorModuleUrl === "" || customSelectorModuleUrl == null ? undefined : customSelectorModuleUrl;
        extParams1 = extParams1 === "" || extParams1 == null ? undefined : extParams1;
        extParams2 = extParams2 === "" || extParams2 == null ? undefined : extParams2;
        const { sourceVoEntityDatas, sourceVoEntityDataIds } = EntityParamUtils.buildSourceVoEntityData(entities);
        //打开生单流程选择器
        this.sourceUiService.openBillCreationProcessSelector4Push(sourceVoId, bizFlowchartId, modalOptions, customSelectorModuleUrl, extParams1).subscribe((/**
         * @param {?} cp
         * @return {?}
         */
        (cp) => {
            //查询表单配置
            this.dataService.getFormSettingsById(cp.formSettingsId).subscribe((/**
             * @param {?} formSettings
             * @return {?}
             */
            (formSettings) => {
                //创建执行生单流程参数对象
                /** @type {?} */
                const args = new FormBillCreationProcessExecutorArgs();
                args.billCreationProcessId = cp.id;
                args.creationRuleId = cp.creationRuleId;
                //FormCreationRuleExecutorArgs的sourceVoEntityDatas属性为前端实体序列化后的字符串列表
                //sourceVoEntityDatas列表中的每个字符串，在结构上应与单据流定义中所选中的上游视图对象一致。
                args.sourceVoEntityDatas = sourceVoEntityDatas;
                args.sourceVoEntityDataIds = sourceVoEntityDataIds;
                //下推过程中不存在目标主表单据Id，所以targetVoDataIds为空列表。
                args.targetVoDataIds = [];
                args.manualCreationMode = ManualCreationMode.Push;
                //执行生单流程
                this.dataService.executeBillCreationProcess(args).subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                (result) => {
                    //Mapping执行条件判断结果为true时才会执行生单流程得到生单结果
                    if (result.conditionResult.conditionExecutionResult == true) {
                        //生单结果不为空
                        if (result.creationRuleExecutorResult && result.creationRuleExecutorResult.mappingResults && result.creationRuleExecutorResult.mappingResults.length > 0) {
                            if (result.pushCreationMode == null || result.pushCreationMode == PushCreationMode.CREATION) {
                                this.dataService.addFormBillCreationProcessExecutorResult(result).subscribe((/**
                                 * @param {?} res
                                 * @return {?}
                                 */
                                (res) => {
                                    //打开目标单据制单界面
                                    this.sourceUiService.openTargetApp(formSettings, result.conditionResult, res, Object.assign({ action: targetCommand }, extParams2));
                                }), (/**
                                 * @param {?} err
                                 * @return {?}
                                 */
                                (err) => {
                                    this.messagerService.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
                                }));
                            }
                            else if (result.pushCreationMode == PushCreationMode.TASKCENTER) {
                                //推送任务中心
                                /** @type {?} */
                                const pushTaskArgs = new PushTaskArgs();
                                pushTaskArgs.suCode = result.downBillSuCode;
                                pushTaskArgs.creationRuleExecutorResult = result.creationRuleExecutorResult;
                                this.dataService.pushTaskCenter(pushTaskArgs).subscribe((/**
                                 * @return {?}
                                 */
                                () => {
                                    this.messagerService.success(this.localePipe.transform("pushTaskCenterSuccess"));
                                }), (/**
                                 * @param {?} err
                                 * @return {?}
                                 */
                                (err) => {
                                    this.messagerService.error((err.error == null ? err.message : (err.error.innerMessage || err.error.Message || err.error.message || err.message)) || this.localePipe.transform("pushTaskCenterFailed"));
                                }));
                            }
                        }
                        else {
                            this.messagerService.error(this.localePipe.transform("creationResultEmpty"));
                        }
                    }
                    else {
                        //为false时可得到配置的错误提示信息
                        this.messagerService.error(result.conditionResult.message || this.localePipe.transform("creationExecutionError"));
                    }
                }), (/**
                 * @param {?} err
                 * @return {?}
                 */
                (err) => {
                    this.messagerService.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
                }));
            }), (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                this.messagerService.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
            }));
        }), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            this.messagerService.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
        }));
    }
    /**
     * 特定下推，根据来源VO Id和目标VO Id打开生单流程选择器并执行选中的生单流程
     *
     * @param {?} sourceVoId 单据流来源视图对象 Id
     * @param {?} targetVoId 单据流目标视图对象 Id
     * @param {?} entities 参与生单的上游单据ID列表或实体列表
     * @param {?=} targetCommand 目标单据'单据流加载'命令的编号
     * @param {?=} bizFlowchartId 业务场景图Id
     * @param {?=} modalOptions 弹窗配置
     * @param {?=} customSelectorModuleUrl 自定义选择器url
     * @param {?=} extParams1 打开生单流程选择器弹窗扩展参数
     * @param {?=} extParams2 打开目标单据制单界面扩展参数
     * @return {?}
     */
    pushBySourceVoIdAndTargetVoId(sourceVoId, targetVoId, entities, targetCommand, bizFlowchartId, modalOptions, customSelectorModuleUrl, extParams1, extParams2) {
        if (sourceVoId == null || sourceVoId == "" || sourceVoId.trim && sourceVoId.trim() == "") {
            this.messagerService.error(this.localePipe.transform("sourceVoIdCantBeEmpty"));
            throw "参数sourceVoId不可为空";
        }
        if (targetVoId == null || targetVoId == "" || targetVoId.trim && targetVoId.trim() == "") {
            this.messagerService.error(this.localePipe.transform("targetVoIdVoIdCantBeEmpty"));
            throw "参数targetVoId不可为空";
        }
        if (entities == null || ((/** @type {?} */ (entities))) == "") {
            this.messagerService.error(this.localePipe.transform("entitiesCantBeEmpty"));
            throw "参数entities不可为空";
        }
        if (entities instanceof Map) {
            entities = Array.from(entities.values());
        }
        entities = Array.isArray(entities) ? entities : [entities];
        bizFlowchartId = bizFlowchartId === "" || bizFlowchartId == null ? undefined : bizFlowchartId;
        modalOptions = (/** @type {?} */ (modalOptions)) === "" || modalOptions == null ? undefined : modalOptions;
        customSelectorModuleUrl = customSelectorModuleUrl === "" || customSelectorModuleUrl == null ? undefined : customSelectorModuleUrl;
        extParams1 = extParams1 === "" || extParams1 == null ? undefined : extParams1;
        extParams2 = extParams2 === "" || extParams2 == null ? undefined : extParams2;
        const { sourceVoEntityDatas, sourceVoEntityDataIds } = EntityParamUtils.buildSourceVoEntityData(entities);
        //打开生单流程选择器
        this.sourceUiService.openBillCreationProcessSelector4SpecificPush(sourceVoId, targetVoId, bizFlowchartId, modalOptions, customSelectorModuleUrl, extParams1).subscribe((/**
         * @param {?} cp
         * @return {?}
         */
        (cp) => {
            //查询表单配置
            this.dataService.getFormSettingsById(cp.formSettingsId).subscribe((/**
             * @param {?} formSettings
             * @return {?}
             */
            (formSettings) => {
                //创建执行生单流程参数对象
                /** @type {?} */
                const args = new FormBillCreationProcessExecutorArgs();
                args.billCreationProcessId = cp.id;
                args.creationRuleId = cp.creationRuleId;
                //FormCreationRuleExecutorArgs的sourceVoEntityDatas属性为前端实体序列化后的字符串列表
                //sourceVoEntityDatas列表中的每个字符串，在结构上应与单据流定义中所选中的上游视图对象一致。
                args.sourceVoEntityDatas = sourceVoEntityDatas;
                args.sourceVoEntityDataIds = sourceVoEntityDataIds;
                //下推过程中不存在目标主表单据Id，所以targetVoDataIds为空列表。
                args.targetVoDataIds = [];
                args.manualCreationMode = ManualCreationMode.SpecificPush;
                //执行生单流程
                this.dataService.executeBillCreationProcess(args).subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                (result) => {
                    //Mapping执行条件判断结果为true时才会执行生单流程得到生单结果
                    if (result.conditionResult.conditionExecutionResult == true) {
                        //生单结果不为空
                        if (result.creationRuleExecutorResult && result.creationRuleExecutorResult.mappingResults && result.creationRuleExecutorResult.mappingResults.length > 0) {
                            if (result.pushCreationMode == null || result.pushCreationMode == PushCreationMode.CREATION) {
                                this.dataService.addFormBillCreationProcessExecutorResult(result).subscribe((/**
                                 * @param {?} res
                                 * @return {?}
                                 */
                                (res) => {
                                    //打开目标单据制单界面
                                    this.sourceUiService.openTargetApp(formSettings, result.conditionResult, res, Object.assign({ action: targetCommand }, extParams2));
                                }), (/**
                                 * @param {?} err
                                 * @return {?}
                                 */
                                (err) => {
                                    this.messagerService.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
                                }));
                            }
                            else if (result.pushCreationMode == PushCreationMode.TASKCENTER) {
                                //推送任务中心
                                /** @type {?} */
                                const pushTaskArgs = new PushTaskArgs();
                                pushTaskArgs.suCode = result.downBillSuCode;
                                pushTaskArgs.creationRuleExecutorResult = result.creationRuleExecutorResult;
                                this.dataService.pushTaskCenter(pushTaskArgs).subscribe((/**
                                 * @return {?}
                                 */
                                () => {
                                    this.messagerService.success(this.localePipe.transform("pushTaskCenterSuccess"));
                                }), (/**
                                 * @param {?} err
                                 * @return {?}
                                 */
                                (err) => {
                                    this.messagerService.error((err.error == null ? err.message : (err.error.innerMessage || err.error.Message || err.error.message || err.message)) || this.localePipe.transform("pushTaskCenterFailed"));
                                }));
                            }
                        }
                        else {
                            this.messagerService.error(this.localePipe.transform("creationResultEmpty"));
                        }
                    }
                    else {
                        //为false时可得到配置的错误提示信息
                        this.messagerService.error(result.conditionResult.message || this.localePipe.transform("creationExecutionError"));
                    }
                }), (/**
                 * @param {?} err
                 * @return {?}
                 */
                (err) => {
                    this.messagerService.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
                }));
            }), (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                this.messagerService.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
            }));
        }), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            this.messagerService.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
        }));
    }
    /**
     * 特定下推，根据生单流程ID执行选中的生单流程
     *
     * @param {?} processId 单据流生单流程 Id
     * @param {?} entities 参与生单的上游单据ID列表或实体列表
     * @param {?=} targetCommand 目标单据'单据流加载'命令的编号
     * @param {?=} extParams 打开目标单据制单界面扩展参数
     * @return {?}
     */
    pushByCreationProcessId(processId, entities, targetCommand, extParams) {
        if (processId == null || processId == "" || processId.trim() == "") {
            this.messagerService.error(this.localePipe.transform("processIdCantBeEmpty"));
            throw "参数processId不可为空";
        }
        if (entities == null || ((/** @type {?} */ (entities))) == "") {
            this.messagerService.error(this.localePipe.transform("entitiesCantBeEmpty"));
            throw "参数entities不可为空";
        }
        if (entities instanceof Map) {
            entities = Array.from(entities.values());
        }
        entities = Array.isArray(entities) ? entities : [entities];
        extParams = extParams === "" || extParams == null ? undefined : extParams;
        const { sourceVoEntityDatas, sourceVoEntityDataIds } = EntityParamUtils.buildSourceVoEntityData(entities);
        //查找生单流程
        this.dataService.getSlimBillCreationProcessEntityExById(processId).subscribe((/**
         * @param {?} cp
         * @return {?}
         */
        (cp) => {
            //查询表单配置
            this.dataService.getFormSettingsById(cp.formSettingsId).subscribe((/**
             * @param {?} formSettings
             * @return {?}
             */
            (formSettings) => {
                //创建执行生单流程参数对象
                /** @type {?} */
                const args = new FormBillCreationProcessExecutorArgs();
                args.billCreationProcessId = cp.id;
                args.creationRuleId = cp.creationRuleId;
                //FormCreationRuleExecutorArgs的sourceVoEntityDatas属性为前端实体序列化后的字符串列表
                //sourceVoEntityDatas列表中的每个字符串，在结构上应与单据流定义中所选中的上游视图对象一致。
                args.sourceVoEntityDatas = sourceVoEntityDatas;
                args.sourceVoEntityDataIds = sourceVoEntityDataIds;
                //下推过程中不存在目标主表单据Id，所以targetVoDataIds为空列表。
                args.targetVoDataIds = [];
                args.manualCreationMode = ManualCreationMode.SpecificPush;
                //执行生单流程
                this.dataService.executeBillCreationProcess(args).subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                (result) => {
                    //Mapping执行条件判断结果为true时才会执行生单流程得到生单结果
                    if (result.conditionResult.conditionExecutionResult == true) {
                        //生单结果不为空
                        if (result.creationRuleExecutorResult && result.creationRuleExecutorResult.mappingResults && result.creationRuleExecutorResult.mappingResults.length > 0) {
                            if (result.pushCreationMode == null || result.pushCreationMode == PushCreationMode.CREATION) {
                                this.dataService.addFormBillCreationProcessExecutorResult(result).subscribe((/**
                                 * @param {?} res
                                 * @return {?}
                                 */
                                (res) => {
                                    //打开目标单据制单界面
                                    this.sourceUiService.openTargetApp(formSettings, result.conditionResult, res, Object.assign({ action: targetCommand }, extParams));
                                }), (/**
                                 * @param {?} err
                                 * @return {?}
                                 */
                                (err) => {
                                    this.messagerService.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
                                }));
                            }
                            else if (result.pushCreationMode == PushCreationMode.TASKCENTER) {
                                //推送任务中心
                                /** @type {?} */
                                const pushTaskArgs = new PushTaskArgs();
                                pushTaskArgs.suCode = result.downBillSuCode;
                                pushTaskArgs.creationRuleExecutorResult = result.creationRuleExecutorResult;
                                this.dataService.pushTaskCenter(pushTaskArgs).subscribe((/**
                                 * @return {?}
                                 */
                                () => {
                                    this.messagerService.success(this.localePipe.transform("pushTaskCenterSuccess"));
                                }), (/**
                                 * @param {?} err
                                 * @return {?}
                                 */
                                (err) => {
                                    this.messagerService.error((err.error == null ? err.message : (err.error.innerMessage || err.error.Message || err.error.message || err.message)) || this.localePipe.transform("pushTaskCenterFailed"));
                                }));
                            }
                        }
                        else {
                            this.messagerService.error(this.localePipe.transform("creationResultEmpty"));
                        }
                    }
                    else {
                        //为false时可得到配置的错误提示信息
                        this.messagerService.error(result.conditionResult.message || this.localePipe.transform("creationExecutionError"));
                    }
                }), (/**
                 * @param {?} err
                 * @return {?}
                 */
                (err) => {
                    this.messagerService.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
                }));
            }), (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                this.messagerService.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
            }));
        }), (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            this.messagerService.error(err.error == null ? err.message : (err.error.Message || err.error.message || err.message));
        }));
    }
    /**
     * 根据来源VO Id打开生单流程选择器选择生单流程
     * @param {?} sourceVoId 来源VO Id
     * @param {?=} bizFlowchartId 业务场景图Id
     * @param {?=} modalOptions 模态框配置
     * @param {?=} customSelectorModuleUrl 自定义选择器Url
     * @param {?=} extParams 扩展参数
     * @return {?} creationProcess 生单流程 \@type { Observable<IRtSlimBillCreationProcessEntityEx> }
     */
    openBillCreationProcessSelector4Push(sourceVoId, bizFlowchartId, modalOptions, customSelectorModuleUrl, extParams) {
        if (sourceVoId == null || sourceVoId == "" || sourceVoId.trim && sourceVoId.trim() == "") {
            this.messagerService.error(this.localePipe.transform("sourceVoIdCantBeEmpty"));
            throw "参数sourceVoId不可为空";
        }
        bizFlowchartId = bizFlowchartId === "" || bizFlowchartId == null ? undefined : bizFlowchartId;
        modalOptions = (/** @type {?} */ (modalOptions)) === "" || modalOptions == null ? undefined : modalOptions;
        customSelectorModuleUrl = customSelectorModuleUrl === "" || customSelectorModuleUrl == null ? undefined : customSelectorModuleUrl;
        extParams = extParams === "" || extParams == null ? undefined : extParams;
        return this.sourceUiService.openBillCreationProcessSelector4Push(sourceVoId, bizFlowchartId, modalOptions, customSelectorModuleUrl, extParams);
    }
    /**
     * 根据来源VO Id和目标VO Id打开生单流程选择器选择生单流程
     * @param {?} sourceVoId 来源VO Id
     * @param {?} targetVoId 目标VO Id
     * @param {?=} bizFlowchartId 业务场景图Id
     * @param {?=} modalOptions 模态框配置
     * @param {?=} customSelectorModuleUrl 自定义选择器Url
     * @param {?=} extParams 扩展参数
     * @return {?} creationProcess 生单流程 \@type { Observable<IRtSlimBillCreationProcessEntityEx> }
     */
    openBillCreationProcessSelector4SpecificPush(sourceVoId, targetVoId, bizFlowchartId, modalOptions, customSelectorModuleUrl, extParams) {
        if (sourceVoId == null || sourceVoId == "" || sourceVoId.trim && sourceVoId.trim() == "") {
            this.messagerService.error(this.localePipe.transform("sourceVoIdCantBeEmpty"));
            throw "参数sourceVoId不可为空";
        }
        if (targetVoId == null || targetVoId == "" || targetVoId.trim && targetVoId.trim() == "") {
            this.messagerService.error(this.localePipe.transform("targetVoIdVoIdCantBeEmpty"));
            throw "参数targetVoId不可为空";
        }
        bizFlowchartId = bizFlowchartId === "" || bizFlowchartId == null ? undefined : bizFlowchartId;
        modalOptions = (/** @type {?} */ (modalOptions)) === "" || modalOptions == null ? undefined : modalOptions;
        customSelectorModuleUrl = customSelectorModuleUrl === "" || customSelectorModuleUrl == null ? undefined : customSelectorModuleUrl;
        extParams = extParams === "" || extParams == null ? undefined : extParams;
        //打开生单流程选择器
        return this.sourceUiService.openBillCreationProcessSelector4SpecificPush(sourceVoId, targetVoId, bizFlowchartId, modalOptions, customSelectorModuleUrl, extParams);
    }
    /**
     * \@Deprecated 已弃用，请使用 {\@link openTargetApp }
     * 打开目标单据制单界面
     * @param {?} formSettings 表单配置
     * @param {?} result 生单流程执行结果
     * @param {?=} targetCommand 目标表单命令
     * @param {?=} extParams 扩展参数
     * @return {?}
     */
    openTargetForm(formSettings, result, targetCommand, extParams) {
        this.sourceUiService.openTargetForm(formSettings, result, Object.assign({ action: targetCommand }, extParams));
    }
    /**
     * 打开目标单据制单界面
     * @param {?} formSettings 表单配置
     * @param {?} conditionResult 执行条件计算结果
     * @param {?} textIdWithDataIds
     * @param {?=} targetCommand 目标表单命令
     * @param {?=} extParams 扩展参数
     * @return {?}
     */
    openTargetApp(formSettings, conditionResult, textIdWithDataIds, targetCommand, extParams) {
        this.sourceUiService.openTargetApp(formSettings, conditionResult, textIdWithDataIds, Object.assign({ action: targetCommand }, extParams));
    }
}
BifManualCreationSourceWebCmpService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BifManualCreationSourceWebCmpService.ctorParameters = () => [
    { type: BifSourceUiService },
    { type: BifDataService },
    { type: BindingData },
    { type: MessagerService },
    { type: ViewModel, decorators: [{ type: Optional }] },
    { type: FrameContext, decorators: [{ type: Optional }] }
];
if (false) {
    /** @type {?} */
    BifManualCreationSourceWebCmpService.prototype.localePipe;
    /** @type {?} */
    BifManualCreationSourceWebCmpService.prototype.sourceUiService;
    /** @type {?} */
    BifManualCreationSourceWebCmpService.prototype.dataService;
    /** @type {?} */
    BifManualCreationSourceWebCmpService.prototype.bindingData;
    /** @type {?} */
    BifManualCreationSourceWebCmpService.prototype.messagerService;
    /** @type {?} */
    BifManualCreationSourceWebCmpService.prototype.viewModel;
    /** @type {?} */
    BifManualCreationSourceWebCmpService.prototype.frameContext;
}
//# sourceMappingURL=data:application/json;base64,