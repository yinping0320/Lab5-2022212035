/**
 * @fileoverview added by tsickle
 * Generated from: lib/webcmp/bif-manual-creation-data.webcmp.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { throwError } from 'rxjs';
import { MessagerService } from "@farris/ui-messager";
import { BindingData, ViewModel, FrameContext } from "@farris/devkit";
import { FormBillCreationProcessExecutorArgs } from '../entity/form-rest/FormBillCreationProcessExecutorArgs';
import { FormBillCreationProcessExecutorResult } from '@edp-aif/runtime-api';
import { BifDataService } from '../bif-manual-creation/service/bif-data.service';
import { FormCreateArgs, FormUpdateArgs } from '../ref';
import { PushTaskArgs } from '../bif-manual-creation/args/PushTaskArgs';
import { PushCreationMode } from '@edp-aif/common-api';
import { GetEntityDatasArgs } from '../bif-manual-creation/args/GetEntityDatasArgs';
import { ManualCreationMode } from '../entity/form-rest/ManualCreationMode';
import { LocalePipe } from '../bif-manual-creation/pipe/locale.pipe';
import { EntityParamUtils } from './EntityParamUtils';
/**
 * 手工生单数据服务类
 */
export class BifManualCreationDataWebCmpService {
    /**
     * @param {?} dataService
     * @param {?} bindingData
     * @param {?} messagerService
     * @param {?} viewModel
     * @param {?} frameContext
     */
    constructor(dataService, bindingData, messagerService, viewModel, frameContext) {
        this.dataService = dataService;
        this.bindingData = bindingData;
        this.messagerService = messagerService;
        this.viewModel = viewModel;
        this.frameContext = frameContext;
        this.localePipe = new LocalePipe(this.dataService && this.dataService.localeId || 'zh-CHS');
    }
    /**
     * 根据生单流程Id查找指定的生单流程
     * @param {?} processId 单据流生单流程 Id
     * @return {?} creationProcess 生单流程 \@type { Observable<IRtSlimBillCreationProcessEntityEx> }
     */
    getSlimBillCreationProcessEntityExById(processId) {
        if (processId == null || processId == "" || processId.trim() == "") {
            this.messagerService.error(this.localePipe.transform("processIdCantBeEmpty"));
            throw "参数processId不可为空";
        }
        return this.dataService.getSlimBillCreationProcessEntityExById(processId);
    }
    /**
     * 查询表单配置
     * @param {?} formSettingsId 表单配置Id
     * @return {?} formSettings 表单配置 \@type { Observable<FormSettings> }
     */
    getFormSettingsById(formSettingsId) {
        return this.dataService.getFormSettingsById(formSettingsId);
    }
    /**
     * 执行生单流程
     * @param {?} entities 参与生单的上游单据ID列表或实体列表
     * @param {?} creationProcessId 单据流生单流程 Id
     * @param {?} creationRuleId 生单规则Id（生单流程实体中记录）
     * @param {?} targetDataIds
     * @param {?} manualCreationMode
     * @return {?} creationResult 生单结果 \@type { Observable<FormBillCreationProcessExecutorResult> }
     */
    executeBillCreationProcess(entities, creationProcessId, creationRuleId, targetDataIds, manualCreationMode) {
        if (entities == null || ((/** @type {?} */ (entities))) == "") {
            this.messagerService.error(this.localePipe.transform("entitiesCantBeEmpty"));
            throw "参数entities不可为空";
        }
        if (entities instanceof Map) {
            entities = Array.from(entities.values());
        }
        entities = Array.isArray(entities) ? entities : [entities];
        manualCreationMode = manualCreationMode ? manualCreationMode : ManualCreationMode.Push;
        const { sourceVoEntityDatas, sourceVoEntityDataIds } = EntityParamUtils.buildSourceVoEntityData(entities);
        //创建执行生单流程参数对象
        /** @type {?} */
        const args = new FormBillCreationProcessExecutorArgs();
        args.billCreationProcessId = creationProcessId;
        args.creationRuleId = creationRuleId;
        //FormCreationRuleExecutorArgs的sourceVoEntityDatas属性为前端实体序列化后的字符串列表
        //sourceVoEntityDatas列表中的每个字符串，在结构上应与单据流定义中所选中的上游视图对象一致。
        args.sourceVoEntityDatas = sourceVoEntityDatas;
        args.sourceVoEntityDataIds = sourceVoEntityDataIds;
        //下推过程中不存在目标主表单据Id，所以targetVoDataIds为空列表。
        args.targetVoDataIds = targetDataIds;
        args.manualCreationMode = manualCreationMode;
        return this.dataService.executeBillCreationProcess(args);
    }
    /**
     * 创建实体数据（RetrieveDefault至缓存）
     * @param {?} formVoId 表单绑定VO Id
     * @param {?} res 生单流程执行结果
     * @return {?} formCreateResult 创建实体数据返回结果 \@type { Observable<FormCreateResult> }
     */
    createEntityDatas(formVoId, res) {
        /** @type {?} */
        const args = new FormCreateArgs();
        args.formVoId = formVoId;
        //获取生单流程执行结果
        args.rpcCreationRuleExecutorResult = res.creationRuleExecutorResult.ConvertToJson();
        //创建实体数据
        return this.dataService.createEntityDatas(args);
    }
    /**
     * 更新实体数据
     * @param {?} res 生单流程执行结果
     * @return {?} formUpdateResult 更新实体数据返回结果 \@type { Observable<FormUpdateResult> }
     */
    updateEntityDatas(res) {
        /** @type {?} */
        const args = new FormUpdateArgs();
        //Mapping执行条件判断结果为true时才会执行生单流程得到生单结果
        if (res.conditionResult.conditionExecutionResult == true) {
            //生单结果不为空
            if (res.creationRuleExecutorResult && res.creationRuleExecutorResult.mappingResults && res.creationRuleExecutorResult.mappingResults.length > 0) {
                args.rpcCreationRuleExecutorResult = res.creationRuleExecutorResult.ConvertToJson();
                return this.dataService.updateEntityDatas(args);
            }
            else {
                return throwError("creationRuleExecutorResult is empty!");
            }
        }
        else {
            return throwError("conditionExecutionResult is false!");
        }
    }
    /**
     * 推送任务中心
     * @param {?} res 生单流程执行结果
     * @return {?} formUpdateResult 更新实体数据返回结果 \@type { Observable<FormUpdateResult> }
     */
    pushTaskCenter(res) {
        /** @type {?} */
        const args = new PushTaskArgs();
        //Mapping执行条件判断结果为true时才会执行生单流程得到生单结果
        if (res.conditionResult.conditionExecutionResult == true) {
            //生单结果不为空
            if (res.creationRuleExecutorResult && res.creationRuleExecutorResult.mappingResults && res.creationRuleExecutorResult.mappingResults.length > 0) {
                if (res.pushCreationMode == PushCreationMode.TASKCENTER) {
                    args.suCode = res.downBillSuCode;
                    args.creationRuleExecutorResult = res.creationRuleExecutorResult;
                    return this.dataService.pushTaskCenter(args);
                }
                else {
                    return throwError("creationRuleExecutorResult can't be pushed to task center!");
                }
            }
            else {
                return throwError("creationRuleExecutorResult is empty!");
            }
        }
        else {
            return throwError("conditionExecutionResult is false!");
        }
    }
    /**
     * 查询生单结果
     * @param {?} creationResultId 生单结果id
     * @return {?}
     */
    getCreationResultById(creationResultId) {
        return this.dataService.getCreationResultById(creationResultId);
    }
    /**
     * 暂存生单结果
     * @param {?} creationResult
     * @return {?}
     */
    addFormBillCreationProcessExecutorResult(creationResult) {
        if (creationResult == null) {
            this.messagerService.error(this.localePipe.transform("creationResultCantBeEmpty"));
            throw "参数creationResult不可为空";
        }
        if (typeof creationResult == "string") {
            if (creationResult == "") {
                this.messagerService.error(this.localePipe.transform("creationResultCantBeEmpty"));
                throw "参数creationResult不可为空";
            }
            /** @type {?} */
            const temp = new FormBillCreationProcessExecutorResult();
            temp.LoadFromJson(creationResult);
            creationResult = temp;
        }
        if ((creationResult instanceof FormBillCreationProcessExecutorResult) == false) {
            /** @type {?} */
            const res = new FormBillCreationProcessExecutorResult();
            res.LoadFromJsonObject(creationResult);
            creationResult = res;
        }
        return this.dataService.addFormBillCreationProcessExecutorResult(creationResult);
    }
    /**
       * 获取VO序列化数据
       */
    /**
     * 获取VO序列化数据
     * @param {?} dataId
     * @param {?} voId
     * @param {?} suCode
     * @return {?}
     */
    getEntityDatas(dataId, voId, suCode) {
        if (dataId == null) {
            this.messagerService.error(this.localePipe.transform("dataIdCantBeEmpty"));
            throw "参数dataId不可为空";
        }
        if (voId == null) {
            this.messagerService.error(this.localePipe.transform("voIdCantBeEmpty"));
            throw "参数voId不可为空";
        }
        if (suCode == null) {
            this.messagerService.error(this.localePipe.transform("suCodeCantBeEmpty"));
            throw "参数suCode不可为空";
        }
        /** @type {?} */
        const args = new GetEntityDatasArgs();
        args.dataId = dataId;
        args.suCode = suCode;
        args.voId = voId;
        return this.dataService.getEntityDatas(args);
    }
}
BifManualCreationDataWebCmpService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BifManualCreationDataWebCmpService.ctorParameters = () => [
    { type: BifDataService },
    { type: BindingData },
    { type: MessagerService },
    { type: ViewModel, decorators: [{ type: Optional }] },
    { type: FrameContext, decorators: [{ type: Optional }] }
];
if (false) {
    /** @type {?} */
    BifManualCreationDataWebCmpService.prototype.localePipe;
    /** @type {?} */
    BifManualCreationDataWebCmpService.prototype.dataService;
    /** @type {?} */
    BifManualCreationDataWebCmpService.prototype.bindingData;
    /** @type {?} */
    BifManualCreationDataWebCmpService.prototype.messagerService;
    /** @type {?} */
    BifManualCreationDataWebCmpService.prototype.viewModel;
    /** @type {?} */
    BifManualCreationDataWebCmpService.prototype.frameContext;
}
//# sourceMappingURL=data:application/json;base64,