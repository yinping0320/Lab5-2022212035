/**
 * @fileoverview added by tsickle
 * Generated from: lib/webcmp/EntityParamUtils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Entity } from "@farris/devkit";
import { canJSONParse } from "../utils/ObjectUtils";
export class EntityParamUtils {
    /**
     * 构造sourceVoEntityDataIds和sourceVoEntityDatas参数
     * @param {?} entities 参与生单的上游单据ID列表或实体列表
     * @return {?}
     */
    static buildSourceVoEntityData(entities) {
        /** @type {?} */
        let sourceVoEntityDataIds = null;
        /** @type {?} */
        let sourceVoEntityDatas = null;
        // 判断entities是不是全为ID字符串
        // 不存在非字符串类型或者可以JSON.parse的元素时
        if (!entities.some((/**
         * @param {?} it
         * @return {?}
         */
        (it) => ((typeof it) != "string") || (canJSONParse(it))))) {
            sourceVoEntityDataIds = (/** @type {?} */ (entities));
            sourceVoEntityDatas = null;
        }
        else {
            sourceVoEntityDataIds = null;
            sourceVoEntityDatas = entities.map((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                if (item instanceof Entity) {
                    // 如果是Entity
                    return JSON.stringify(((/** @type {?} */ (item))).toJSON(false, true));
                }
                else if (item["__type__"] == "BindingObject") {
                    //如果来自BindingData
                    /** @type {?} */
                    const bindingObject = (/** @type {?} */ (item));
                    return JSON.stringify(bindingObject.toJSON({ useFullMultiLangProperty: true }));
                }
                else if (((/** @type {?} */ (item))).toJSON != null) {
                    /** @type {?} */
                    const e = (/** @type {?} */ (item));
                    return JSON.stringify(((/** @type {?} */ (e))).toJSON(false, true));
                }
                else {
                    /** @type {?} */
                    const e = item;
                    return JSON.stringify(e);
                }
            }));
        }
        return {
            sourceVoEntityDataIds: sourceVoEntityDataIds,
            sourceVoEntityDatas: sourceVoEntityDatas,
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW50aXR5UGFyYW1VdGlscy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BlZHAtYmlmL3J1bnRpbWUtYXBpLyIsInNvdXJjZXMiOlsibGliL3dlYmNtcC9FbnRpdHlQYXJhbVV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFpQixNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN2RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFcEQsTUFBTSxPQUFPLGdCQUFnQjs7Ozs7O0lBTTNCLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxRQUFrQjs7WUFDM0MscUJBQXFCLEdBQWEsSUFBSTs7WUFDdEMsbUJBQW1CLEdBQWEsSUFBSTtRQUN4Qyx1QkFBdUI7UUFDdkIsOEJBQThCO1FBQzlCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSTs7OztRQUFDLENBQUMsRUFBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFDLEVBQUU7WUFDaEYscUJBQXFCLEdBQUcsbUJBQUEsUUFBUSxFQUFTLENBQUM7WUFDMUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDO1NBQzVCO2FBQU07WUFDTCxxQkFBcUIsR0FBRyxJQUFJLENBQUM7WUFDN0IsbUJBQW1CLEdBQUcsUUFBUSxDQUFDLEdBQUc7Ozs7WUFBQyxJQUFJLENBQUMsRUFBRTtnQkFDeEMsSUFBSSxJQUFJLFlBQVksTUFBTSxFQUFFO29CQUMxQixZQUFZO29CQUNaLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLG1CQUFBLElBQUksRUFBTyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO2lCQUMxRDtxQkFBTSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxlQUFlLEVBQUU7OzswQkFFeEMsYUFBYSxHQUFHLG1CQUFBLElBQUksRUFBaUI7b0JBQzNDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUUsd0JBQXdCLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO2lCQUNqRjtxQkFBTSxJQUFJLENBQUMsbUJBQUEsSUFBSSxFQUFVLENBQUMsQ0FBQyxNQUFNLElBQUksSUFBSSxFQUFFOzswQkFDcEMsQ0FBQyxHQUFHLG1CQUFBLElBQUksRUFBVTtvQkFDeEIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsbUJBQUEsQ0FBQyxFQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7aUJBQ3ZEO3FCQUFNOzswQkFDQyxDQUFDLEdBQUcsSUFBSTtvQkFDZCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQzFCO1lBQ0gsQ0FBQyxFQUFDLENBQUM7U0FDSjtRQUVELE9BQU87WUFDTCxxQkFBcUIsRUFBRSxxQkFBcUI7WUFDNUMsbUJBQW1CLEVBQUUsbUJBQW1CO1NBQ3pDLENBQUE7SUFDSCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCaW5kaW5nT2JqZWN0LCBFbnRpdHkgfSBmcm9tIFwiQGZhcnJpcy9kZXZraXRcIjtcclxuaW1wb3J0IHsgY2FuSlNPTlBhcnNlIH0gZnJvbSBcIi4uL3V0aWxzL09iamVjdFV0aWxzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgRW50aXR5UGFyYW1VdGlscyB7XHJcbiAgLyoqXHJcbiAgICog5p6E6YCgc291cmNlVm9FbnRpdHlEYXRhSWRz5ZKMc291cmNlVm9FbnRpdHlEYXRhc+WPguaVsFxyXG4gICAqIEBwYXJhbSBlbnRpdGllcyDlj4LkuI7nlJ/ljZXnmoTkuIrmuLjljZXmja5JROWIl+ihqOaIluWunuS9k+WIl+ihqFxyXG4gICAqIEByZXR1cm5zXHJcbiAgICovXHJcbiAgc3RhdGljIGJ1aWxkU291cmNlVm9FbnRpdHlEYXRhKGVudGl0aWVzOiBFbnRpdHlbXSkge1xyXG4gICAgbGV0IHNvdXJjZVZvRW50aXR5RGF0YUlkczogc3RyaW5nW10gPSBudWxsO1xyXG4gICAgbGV0IHNvdXJjZVZvRW50aXR5RGF0YXM6IHN0cmluZ1tdID0gbnVsbDtcclxuICAgIC8vIOWIpOaWrWVudGl0aWVz5piv5LiN5piv5YWo5Li6SUTlrZfnrKbkuLJcclxuICAgIC8vIOS4jeWtmOWcqOmdnuWtl+espuS4suexu+Wei+aIluiAheWPr+S7pUpTT04ucGFyc2XnmoTlhYPntKDml7ZcclxuICAgIGlmICghZW50aXRpZXMuc29tZSgoaXQ6IGFueSkgPT4gKCh0eXBlb2YgaXQpICE9IFwic3RyaW5nXCIpIHx8IChjYW5KU09OUGFyc2UoaXQpKSkpIHtcclxuICAgICAgc291cmNlVm9FbnRpdHlEYXRhSWRzID0gZW50aXRpZXMgYXMgYW55W107XHJcbiAgICAgIHNvdXJjZVZvRW50aXR5RGF0YXMgPSBudWxsO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc291cmNlVm9FbnRpdHlEYXRhSWRzID0gbnVsbDtcclxuICAgICAgc291cmNlVm9FbnRpdHlEYXRhcyA9IGVudGl0aWVzLm1hcChpdGVtID0+IHtcclxuICAgICAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIEVudGl0eSkge1xyXG4gICAgICAgICAgLy8g5aaC5p6c5pivRW50aXR5XHJcbiAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoKGl0ZW0gYXMgYW55KS50b0pTT04oZmFsc2UsIHRydWUpKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGl0ZW1bXCJfX3R5cGVfX1wiXSA9PSBcIkJpbmRpbmdPYmplY3RcIikge1xyXG4gICAgICAgICAgLy/lpoLmnpzmnaXoh6pCaW5kaW5nRGF0YVxyXG4gICAgICAgICAgY29uc3QgYmluZGluZ09iamVjdCA9IGl0ZW0gYXMgQmluZGluZ09iamVjdDtcclxuICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShiaW5kaW5nT2JqZWN0LnRvSlNPTih7IHVzZUZ1bGxNdWx0aUxhbmdQcm9wZXJ0eTogdHJ1ZSB9KSk7XHJcbiAgICAgICAgfSBlbHNlIGlmICgoaXRlbSBhcyBFbnRpdHkpLnRvSlNPTiAhPSBudWxsKSB7XHJcbiAgICAgICAgICBjb25zdCBlID0gaXRlbSBhcyBFbnRpdHk7XHJcbiAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoKGUgYXMgYW55KS50b0pTT04oZmFsc2UsIHRydWUpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29uc3QgZSA9IGl0ZW07XHJcbiAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBzb3VyY2VWb0VudGl0eURhdGFJZHM6IHNvdXJjZVZvRW50aXR5RGF0YUlkcyxcclxuICAgICAgc291cmNlVm9FbnRpdHlEYXRhczogc291cmNlVm9FbnRpdHlEYXRhcyxcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19