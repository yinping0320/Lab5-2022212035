/**
 * View
 */
declare const mxCellEditorType: typeof import("./mxgraph-types").MxGraphNS.mxCellEditor;
export { mxCellEditorType as mxCellEditor };
declare const mxCellOverlayType: typeof import("./mxgraph-types").MxGraphNS.mxCellOverlay;
export { mxCellOverlayType as mxCellOverlay };
declare const mxCellRendererType: typeof import("./mxgraph-types").MxGraphNS.mxCellRenderer;
export { mxCellRendererType as mxCellRenderer };
declare const mxCellStateType: typeof import("./mxgraph-types").MxGraphNS.mxCellState;
export { mxCellStateType as mxCellState };
declare const mxCellStatePreviewType: typeof import("./mxgraph-types").MxGraphNS.mxCellStatePreview;
export { mxCellStatePreviewType as mxCellStatePreview };
declare const mxConnectionConstraintType: typeof import("./mxgraph-types").MxGraphNS.mxConnectionConstraint;
export { mxConnectionConstraintType as mxConnectionConstraint };
declare const mxEdgeStyleType: {
    EntityRelation(state: any, source: any, target: any, points: any, result: any): void;
    Loop(state: any, source: any, target: any, points: any, result: any): void;
    ElbowConnector(state: any, source: any, target: any, points: any, result: any): void;
    SideToSide(state: any, source: any, target: any, points: any, result: any): void;
    TopToBottom(state: any, source: any, target: any, points: any, result: any): void;
    SegmentConnector(state: any, source: any, target: any, hints: any, result: any): void;
    orthBuffer: number;
    orthPointsFallback: boolean;
    dirVectors: number[][];
    wayPoints1: number[][];
    routePatterns: number[][][];
    inlineRoutePatterns: number[][][];
    vertexSeperations: any[];
    limits: number[][];
    LEFT_MASK: number;
    TOP_MASK: number;
    RIGHT_MASK: number;
    BOTTOM_MASK: number;
    LEFT: number;
    TOP: number;
    RIGHT: number;
    BOTTOM: number;
    SIDE_MASK: number;
    CENTER_MASK: number;
    SOURCE_MASK: number;
    TARGET_MASK: number;
    VERTEX_MASK: number;
    getJettySize(state: any, source: any, target: any, points: any, isSource: any): any;
    OrthConnector(state: any, source: any, target: any, points: any, result: any): void;
    getRoutePattern(dir: any, quad: any, dx: any, dy: any): any;
};
export { mxEdgeStyleType as mxEdgeStyle };
declare const mxGraphType: typeof import("./mxgraph-types").MxGraphNS.mxGraph;
export { mxGraphType as mxGraph };
declare const mxGraphSelectionModelType: typeof import("./mxgraph-types").MxGraphNS.mxGraphSelectionModel;
export { mxGraphSelectionModelType as mxGraphSelectionModel };
declare const mxGraphViewType: typeof import("./mxgraph-types").MxGraphNS.mxGraphView;
export { mxGraphViewType as mxGraphView };
declare const mxLayoutManagerType: typeof import("./mxgraph-types").MxGraphNS.mxLayoutManager;
export { mxLayoutManagerType as mxLayoutManager };
declare const mxMultiplicityType: typeof import("./mxgraph-types").MxGraphNS.mxMultiplicity;
export { mxMultiplicityType as mxMultiplicity };
declare const mxOutlineType: typeof import("./mxgraph-types").MxGraphNS.mxOutline;
export { mxOutlineType as mxOutline };
declare const mxPerimeterType: {
    RectanglePerimeter(bounds: any, vertex: any, next: any, orthogonal: any): import("./mxgraph-types").MxGraphNS.mxPoint;
    EllipsePerimeter(bounds: any, vertex: any, next: any, orthogonal: any): import("./mxgraph-types").MxGraphNS.mxPoint;
    RhombusPerimeter(bounds: any, vertex: any, next: any, orthogonal: any): any;
    TrianglePerimeter(bounds: any, vertex: any, next: any, orthogonal: any): any;
    HexagonPerimeter(bounds: any, vertex: any, next: any, orthogonal: any): import("./mxgraph-types").MxGraphNS.mxPoint;
};
export { mxPerimeterType as mxPerimeter };
declare const mxPrintPreviewType: typeof import("./mxgraph-types").MxGraphNS.mxPrintPreview;
export { mxPrintPreviewType as mxPrintPreview };
declare const mxStyleRegistryType: {
    values: any[];
    dynamicLoading?: any;
    putValue(name: any, obj: any): void;
    getValue(name: any): any;
    getName(value: any): string;
};
export { mxStyleRegistryType as mxStyleRegistry };
declare const mxStylesheetType: typeof import("./mxgraph-types").MxGraphNS.mxStylesheet;
export { mxStylesheetType as mxStylesheet };
declare const mxSwimlaneManagerType: typeof import("./mxgraph-types").MxGraphNS.mxSwimlaneManager;
export { mxSwimlaneManagerType as mxSwimlaneManager };
declare const mxTemporaryCellStatesType: typeof import("./mxgraph-types").MxGraphNS.mxTemporaryCellStates;
export { mxTemporaryCellStatesType as mxTemporaryCellStates };
