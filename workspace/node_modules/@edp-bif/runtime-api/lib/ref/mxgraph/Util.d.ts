/**
 * Util
 */
declare const mxAbstractCanvas2DType: typeof import("./mxgraph-types").MxGraphNS.mxAbstractCanvas2D;
export { mxAbstractCanvas2DType as mxAbstractCanvas2D };
declare const mxAnimationType: typeof import("./mxgraph-types").MxGraphNS.mxAnimation;
export { mxAnimationType as mxAnimation };
declare const mxAutoSaveManagerType: typeof import("./mxgraph-types").MxGraphNS.mxAutoSaveManager;
export { mxAutoSaveManagerType as mxAutoSaveManager };
declare const mxClipboardType: {
    STEPSIZE: number;
    insertCount: number;
    cells: any;
    setCells(cells: any): void;
    getCells(): any;
    isEmpty(): boolean;
    cut(graph: any, cells?: any): any;
    removeCells(graph: any, cells: any): void;
    copy(graph: any, cells?: any): any;
    paste(graph: any): any;
};
export { mxClipboardType as mxClipboard };
declare const mxConstantsType: typeof import("./mxgraph-types").MxGraphNS.mxConstants;
export { mxConstantsType as mxConstants };
declare const mxDictionaryType: typeof import("./mxgraph-types").MxGraphNS.mxDictionary;
export { mxDictionaryType as mxDictionary };
declare const mxDivResizerType: typeof import("./mxgraph-types").MxGraphNS.mxDivResizer;
export { mxDivResizerType as mxDivResizer };
declare const mxDragSourceType: typeof import("./mxgraph-types").MxGraphNS.mxDragSource;
export { mxDragSourceType as mxDragSource };
declare const mxEffectsType: {
    animateChanges(graph: any, changes: any, done: any): void;
    cascadeOpacity(graph: any, cell: any, opacity: any): void;
    fadeOut(node: any, from: any, remove: any, step: any, delay: any, isEnabled: any): void;
};
export { mxEffectsType as mxEffects };
declare const mxEventType: {
    EVENT_SCALE: string;
    EVENT_HIDE: string;
    objects: any[];
    addListener: (element: any, eventName: any, funct: any) => void;
    removeListener: (element: any, eventName: any, funct: any) => void;
    removeAllListeners(element: any): void;
    addGestureListeners(node: any, startListener: any, moveListener?: any, endListener?: any): void;
    removeGestureListeners(node: any, startListener: any, moveListener?: any, endListener?: any): void;
    redirectMouseEvents(node: any, graph: any, state: any, down?: any, move?: any, up?: any, dblClick?: any): void;
    release(element: any): void;
    addMouseWheelListener(funct: (evt: any, up: boolean) => void, target?: HTMLElement): void;
    disableContextMenu: (element: any) => void;
    getSource(evt: any): any;
    isConsumed(evt: any): boolean;
    isTouchEvent(evt: any): boolean;
    isPenEvent(evt: any): boolean;
    isMultiTouchEvent(evt: any): boolean;
    isMouseEvent(evt: any): boolean;
    isLeftMouseButton(evt: any): boolean;
    isMiddleMouseButton(evt: any): boolean;
    isRightMouseButton(evt: any): boolean;
    isPopupTrigger(evt: any): boolean;
    isShiftDown(evt: any): boolean;
    isAltDown(evt: any): boolean;
    isControlDown(evt: any): boolean;
    isMetaDown(evt: any): boolean;
    getMainEvent(e: any): any;
    getClientX(e: PointerEvent): number;
    getClientY(e: PointerEvent): number;
    consume(evt: any, preventDefault?: boolean, stopPropagation?: boolean): void;
    LABEL_HANDLE: number;
    ROTATION_HANDLE: number;
    CUSTOM_HANDLE: number;
    VIRTUAL_HANDLE: number;
    MOUSE_DOWN: string;
    MOUSE_MOVE: string;
    MOUSE_UP: string;
    ACTIVATE: string;
    RESIZE_START: string;
    RESIZE: string;
    RESIZE_END: string;
    MOVE_START: string;
    MOVE: string;
    MOVE_END: string;
    PAN_START: string;
    PAN: string;
    PAN_END: string;
    MINIMIZE: string;
    NORMALIZE: string;
    MAXIMIZE: string;
    HIDE: string;
    SHOW: string;
    CLOSE: string;
    DESTROY: string;
    REFRESH: string;
    SIZE: string;
    SELECT: string;
    FIRED: string;
    FIRE_MOUSE_EVENT: string;
    GESTURE: string;
    TAP_AND_HOLD: string;
    GET: string;
    RECEIVE: string;
    CONNECT: string;
    DISCONNECT: string;
    SUSPEND: string;
    RESUME: string;
    MARK: string;
    ROOT: string;
    POST: string;
    OPEN: string;
    SAVE: string;
    BEFORE_ADD_VERTEX: string;
    ADD_VERTEX: string;
    AFTER_ADD_VERTEX: string;
    DONE: string;
    EXECUTE: string;
    EXECUTED: string;
    BEGIN_UPDATE: string;
    START_EDIT: string;
    END_UPDATE: string;
    END_EDIT: string;
    BEFORE_UNDO: string;
    UNDO: string;
    REDO: string;
    CHANGE: string;
    NOTIFY: string;
    LAYOUT_CELLS: string;
    CLICK: string;
    SCALE: string;
    TRANSLATE: string;
    SCALE_AND_TRANSLATE: string;
    UP: string;
    DOWN: string;
    ADD: string;
    REMOVE: string;
    CLEAR: string;
    ADD_CELLS: string;
    CELLS_ADDED: string;
    MOVE_CELLS: string;
    CELLS_MOVED: string;
    RESIZE_CELLS: string;
    CELLS_RESIZED: string;
    TOGGLE_CELLS: string;
    CELLS_TOGGLED: string;
    ORDER_CELLS: string;
    CELLS_ORDERED: string;
    REMOVE_CELLS: string;
    CELLS_REMOVED: string;
    GROUP_CELLS: string;
    UNGROUP_CELLS: string;
    REMOVE_CELLS_FROM_PARENT: string;
    FOLD_CELLS: string;
    CELLS_FOLDED: string;
    ALIGN_CELLS: string;
    LABEL_CHANGED: string;
    CONNECT_CELL: string;
    CELL_CONNECTED: string;
    SPLIT_EDGE: string;
    FLIP_EDGE: string;
    START_EDITING: string;
    EDITING_STARTED: string;
    EDITING_STOPPED: string;
    ADD_OVERLAY: string;
    REMOVE_OVERLAY: string;
    UPDATE_CELL_SIZE: string;
    ESCAPE: string;
    DOUBLE_CLICK: string;
    START: string;
    RESET: string;
};
export { mxEventType as mxEvent };
declare const mxEventObjectType: typeof import("./mxgraph-types").MxGraphNS.mxEventObject;
export { mxEventObjectType as mxEventObject };
declare const mxEventSourceType: typeof import("./mxgraph-types").MxGraphNS.mxEventSource;
export { mxEventSourceType as mxEventSource };
declare const mxFormType: typeof import("./mxgraph-types").MxGraphNS.mxForm;
export { mxFormType as mxForm };
declare const mxGuideType: typeof import("./mxgraph-types").MxGraphNS.mxGuide;
export { mxGuideType as mxGuide };
declare const mxImageType: typeof import("./mxgraph-types").MxGraphNS.mxImage;
export { mxImageType as mxImage };
declare const mxImageBundleType: typeof import("./mxgraph-types").MxGraphNS.mxImageBundle;
export { mxImageBundleType as mxImageBundle };
declare const mxImageExportType: typeof import("./mxgraph-types").MxGraphNS.mxImageExport;
export { mxImageExportType as mxImageExport };
declare const mxLogType: {
    consoleName: string;
    TRACE: boolean;
    DEBUG: boolean;
    WARN: boolean;
    buffer: string;
    init(): void;
    info(): void;
    addButton(lab: any, funct: any): void;
    isVisible(): any;
    show(): void;
    setVisible(visible: any): void;
    enter(string: any): number;
    leave(string: any, t0: any): void;
    debug(string: any, t0: any): void;
    warn(string: any, t0: any): void;
    write(string: any, t0: any): void;
    writeln(string: any, t0: any): void;
};
export { mxLogType as mxLog };
declare const mxMorphingType: typeof import("./mxgraph-types").MxGraphNS.mxMorphing;
export { mxMorphingType as mxMorphing };
declare const mxMouseEventType: typeof import("./mxgraph-types").MxGraphNS.mxMouseEvent;
export { mxMouseEventType as mxMouseEvent };
declare const mxObjectIdentityType: {
    FIELD_NAME: string;
    counter: number;
    get(obj: any): any;
    clear(obj: any): void;
};
export { mxObjectIdentityType as mxObjectIdentity };
declare const mxPanningManagerType: typeof import("./mxgraph-types").MxGraphNS.mxPanningManager;
export { mxPanningManagerType as mxPanningManager };
declare const mxPointType: typeof import("./mxgraph-types").MxGraphNS.mxPoint;
export { mxPointType as mxPoint };
declare const mxPopupMenuType: typeof import("./mxgraph-types").MxGraphNS.mxPopupMenu;
export { mxPopupMenuType as mxPopupMenu };
declare const mxRectangleType: typeof import("./mxgraph-types").MxGraphNS.mxRectangle;
export { mxRectangleType as mxRectangle };
declare const mxResourcesType: {
    resources: any[];
    extension: string;
    resourcesEncoded: boolean;
    loadDefaultBundle: boolean;
    loadSpecialBundle: boolean;
    isLanguageSupported(lan: any): boolean;
    getDefaultBundle(basename: any, lan: any): string;
    getSpecialBundle(basename: string, lan: string): string;
    add(basename: string, lan?: string, callback?: () => void): void;
    parse(text: string): void;
    get(key: string, params?: string[], defaultValue?: string): string;
    replacePlaceholders(value: string, params: string[]): string;
    loadResources(callback?: () => void): void;
};
export { mxResourcesType as mxResources };
declare const mxSvgCanvas2DType: typeof import("./mxgraph-types").MxGraphNS.mxSvgCanvas2D;
export { mxSvgCanvas2DType as mxSvgCanvas2D };
declare const mxToolbarType: typeof import("./mxgraph-types").MxGraphNS.mxToolbar;
export { mxToolbarType as mxToolbar };
declare const mxUndoableEditType: typeof import("./mxgraph-types").MxGraphNS.mxUndoableEdit;
export { mxUndoableEditType as mxUndoableEdit };
declare const mxUndoManagerType: typeof import("./mxgraph-types").MxGraphNS.mxUndoManager;
export { mxUndoManagerType as mxUndoManager };
declare const mxUrlConverterType: typeof import("./mxgraph-types").MxGraphNS.mxUrlConverter;
export { mxUrlConverterType as mxUrlConverter };
declare const mxUtilsType: {
    [key: string]: any;
    errorResource: string;
    closeResource: string;
    errorImage: string;
    removeCursors(element: HTMLElement): void;
    getCurrentStyle(elt: HTMLElement): CSSStyleDeclaration;
    parseCssNumber(value: string): number;
    setPrefixedStyle(style: any, name: string, value: any): void;
    htmlEntities(s: string, newline?: boolean): any;
    hasScrollbars(elt: HTMLElement): boolean;
    getOffset(container: HTMLElement, scrollOffset?: boolean): import("./mxgraph-types").MxGraphNS.mxPoint;
    makeDraggable(element: HTMLElement, graphF: import("./mxgraph-types").MxGraphNS.mxGraph, funct: Function, dragElement?: HTMLElement, dx?: number, dy?: number, autoscroll?: boolean, scalePreview?: boolean, highlightDropTargets?: boolean, getDropTarget?: (x: number, y: number) => import("./mxgraph-types").MxGraphNS.mxCell): import("./mxgraph-types").MxGraphNS.mxDragSource;
    setOpacity(node: HTMLElement, value: number): void;
    convertPoint(container: HTMLElement, x: number, y: number): import("./mxgraph-types").MxGraphNS.mxPoint;
    getValue(array: any, key: any, defaultValue?: any): any;
    indexOf(array: any, obj: any): number;
};
export { mxUtilsType as mxUtils };
declare const mxVmlCanvas2DType: typeof import("./mxgraph-types").MxGraphNS.mxVmlCanvas2D;
export { mxVmlCanvas2DType as mxVmlCanvas2D };
declare const mxWindowType: typeof import("./mxgraph-types").MxGraphNS.mxWindow;
export { mxWindowType as mxWindow };
declare const mxXmlCanvas2DType: typeof import("./mxgraph-types").MxGraphNS.mxXmlCanvas2D;
export { mxXmlCanvas2DType as mxXmlCanvas2D };
declare const mxXmlRequestType: typeof import("./mxgraph-types").MxGraphNS.mxXmlRequest;
export { mxXmlRequestType as mxXmlRequest };
