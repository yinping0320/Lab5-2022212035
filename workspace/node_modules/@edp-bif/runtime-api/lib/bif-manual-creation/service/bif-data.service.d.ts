import { ComponentFactoryResolver, Injector, NgModuleFactoryLoader } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Repository, Entity, FrameContext } from '@farris/devkit';
import { FormSettings } from '@edp-bif/common-api';
import { IRtSlimBillCreationProcessEntityEx } from '@edp-bif/common-api';
import { FormCreateArgs, FormCreateResult, FormUpdateArgs, FormUpdateResult } from '../../ref';
import { FormBillCreationProcessExecutorArgs } from '../../entity/form-rest/FormBillCreationProcessExecutorArgs';
import { FormBillCreationProcessExecutorResult } from '@edp-aif/runtime-api';
import { PushTaskArgs } from '../args/PushTaskArgs';
import { GeneralTextIdWithDataId } from '../../entity';
import { RuntimeFrameworkService } from '@farris/command-services';
import { BsModalService } from '@farris/ui-modal';
import { MessagerService } from '@farris/ui-messager';
import { LocalePipe } from '../pipe/locale.pipe';
import { HttpService } from '@ecp-caf/caf-common';
import { GetEntityDatasArgs } from '../args/GetEntityDatasArgs';
export declare class BifDataService {
    private httpClient;
    injector: Injector;
    cfr: ComponentFactoryResolver;
    loader: NgModuleFactoryLoader;
    modal: BsModalService;
    messager: MessagerService;
    frameContext: FrameContext;
    localeId: string;
    runtimeFrameworkService: RuntimeFrameworkService;
    localePipe: LocalePipe;
    httpService: HttpService;
    private readonly getBillCreationProcessEntityExByIdUrl;
    private readonly getBillCreationProcessEntityExByIdMethod;
    private readonly getBillCreationProcessEntityExUrl;
    private readonly getBillCreationProcessEntityExMethod;
    private readonly executeBillCreationProcessUrl;
    private readonly executeBillCreationProcessMethod;
    private readonly formCreateUrl;
    private readonly formCreateMethod;
    private readonly formUpdateUrl;
    private readonly formUpdateMethod;
    private readonly generalTextUrl;
    private readonly generalTextMethod;
    private readonly generalTextCreationMethod;
    private readonly pushTaskUrl;
    private readonly pushTaskMethod;
    private readonly getEntityDatasUrl;
    private readonly getEntityDatasMethod;
    private repository;
    constructor(httpClient: HttpClient, repository: Repository<Entity>, injector: Injector, cfr: ComponentFactoryResolver, loader: NgModuleFactoryLoader, modal: BsModalService, messager: MessagerService, frameContext: FrameContext, localeId: string, runtimeFrameworkService: RuntimeFrameworkService, localePipe: LocalePipe, httpService: HttpService);
    /**
     * 根据上游 VO Id获取单据流生单流程实体列表。
     *
     * @param upBillVoId 上游 VO Id。
     * @return 符合条件的单据流生单流程实体列表。
     */
    getSlimBillCreationProcessEntityExesByUpBillVoId4Push(upBillVoId: string): Observable<IRtSlimBillCreationProcessEntityEx[]>;
    /**
     * 根据下游 VO Id获取单据流生单流程实体列表。
     *
     * @param downBillVoId 下游 VO Id。
     * @return 符合条件的单据流生单流程实体列表。
     */
    getSlimBillCreationProcessEntityExesByDownBillVoId4Pull(downBillVoId: string): Observable<IRtSlimBillCreationProcessEntityEx[]>;
    /**
     * 根据上游 VO Id和下游 VO Id获取单据流生单流程实体列表。
     *
     * @param upBillVoId 上游 VO Id。
     * @param downBillVoId 下游 VO Id。
     * @return 符合条件的单据流生单流程实体列表。
     */
    getSlimBillCreationProcessEntityExesByUpBillVoIdAndDownBillVoId4SpecificPush(upBillVoId: string, downBillVoId: string): Observable<IRtSlimBillCreationProcessEntityEx[]>;
    /**
     * 根据上游 VO Id和下游 VO Id获取单据流生单流程实体列表。
     *
     * @param upBillVoId 上游 VO Id。
     * @param downBillVoId 下游 VO Id。
     * @return 符合条件的单据流生单流程实体列表。
     */
    getSlimBillCreationProcessEntityExesByUpBillVoIdAndDownBillVoId4SpecificPull(upBillVoId: string, downBillVoId: string): Observable<IRtSlimBillCreationProcessEntityEx[]>;
    /**
     * 获取单据流生单流程实体
     */
    getSlimBillCreationProcessEntityExById(processId: string): Observable<IRtSlimBillCreationProcessEntityEx>;
    /**
     * 获取表单配置实体
     * @param formSettingsId
     */
    getFormSettingsById(formSettingsId: string): Observable<FormSettings>;
    /**
     * 获取生单结果实体
     * @param creationResultId
     */
    getCreationResultById(creationResultId: string): Observable<FormBillCreationProcessExecutorResult>;
    /**
     * 生单结果存入中间表
     */
    addFormBillCreationProcessExecutorResult(creationResult: FormBillCreationProcessExecutorResult): Observable<GeneralTextIdWithDataId[]>;
    /**
     * 执行单据流生单流程
     */
    executeBillCreationProcess(args: FormBillCreationProcessExecutorArgs): Observable<FormBillCreationProcessExecutorResult>;
    /**
     * 创建单据
     */
    createEntityDatas(args: FormCreateArgs): Observable<FormCreateResult>;
    /**
     * 修改单据
     * @param args 表单更新参数
     */
    updateEntityDatas(args: FormUpdateArgs): Observable<FormUpdateResult>;
    /**
     * 将生单结果推送至任务中心
     * @param args 推送任务中心参数
     * @returns
     */
    pushTaskCenter(args: PushTaskArgs): Observable<any>;
    /**
     * 获取VO序列化数据
     * @param args
     * @returns
     */
    getEntityDatas(args: GetEntityDatasArgs): Observable<string>;
    /**
     * 查询单据生单流程扩展实体
     * @param args 查询参数
     */
    private getSlimBillCreationProcessEntityExes;
    /**
     * 参考farris/bef EntityUtil实现
     * @param entity
     * @param initialData
     */
    private appendInitialData;
}
