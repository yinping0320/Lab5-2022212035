import { OnInit, ElementRef, EventEmitter, AfterViewInit, ViewContainerRef, Injector, ComponentFactoryResolver, ChangeDetectorRef } from '@angular/core';
import { Graph } from '../../mxgraph-ext/Graph';
import { MxGraphNS } from "../../../ref/mxgraph";
import { BillTrackerArgs } from '../../config/bill-tracker-args';
import { BillTrackerDataService } from '../../services/bill-tracker-data.service';
import { BillTrackerDirection } from '../../config/bill-tracker-direction';
import { BillTrackerLocalePipe } from '../../pipe/bill-tracker-locale.pipe';
import { BillCell } from '../../mxgraph-ext/BillCell';
import { MessagerService } from '@farris/ui-messager';
import { LoadingService } from '@farris/ui-loading';
import { BsModalRef, BsModalService } from '@farris/ui-modal';
import { RevertCompactTreeLayout } from '../../mxgraph-ext/RevertCompactTreeLayout';
import { CompactTreeLayout } from '../../mxgraph-ext/CompactTreeLayout';
import { EntryCellData } from '../../../entity/tracking/cell-data/EntryCellData';
import { CellData } from '../../../entity/tracking/cell-data/CellData';
import { BillTrackerGraphOptions } from '../../config/bill-tracker-graph-options';
import { NotifyService } from '@farris/ui-notify';
import { BillTrackerDataInfoService } from '../../services/bill-tracker-data-info.service';
import { Outline } from '../../mxgraph-ext/Outline';
import { BillTrackerGridOptions } from '../../config/bill-tracker-grid-options';
export declare class BillTrackerGraphComponent implements OnInit, AfterViewInit {
    dataService: BillTrackerDataService;
    notify: NotifyService;
    messager: MessagerService;
    loading: LoadingService;
    modal: BsModalService;
    vcr: ViewContainerRef;
    inj: Injector;
    cfr: ComponentFactoryResolver;
    cdr: ChangeDetectorRef;
    localePipe: BillTrackerLocalePipe;
    mxContainerER: ElementRef<HTMLDivElement>;
    mxOutlineContainer: ElementRef<HTMLDivElement>;
    selectEventEmitter: EventEmitter<any>;
    stateChangeEventEmitter: EventEmitter<{
        type: any;
        data?: any;
    }>;
    billTrackerArgs: BillTrackerArgs;
    originBillTrackerArgs: BillTrackerArgs;
    graphOptions: BillTrackerGraphOptions;
    gridOptions: BillTrackerGridOptions;
    modalRef: BsModalRef;
    graph: Graph;
    hspace: number;
    vspace: number;
    upLayout: RevertCompactTreeLayout;
    downLayout: CompactTreeLayout;
    outline: Outline;
    entryCellData: EntryCellData;
    layoutManager: MxGraphNS.mxLayoutManager;
    entry: BillCell;
    upParent: MxGraphNS.mxCell;
    downParent: MxGraphNS.mxCell;
    defaultWidth: number;
    defaultHeight: number;
    nodeWidth: number;
    nodeHeight: number;
    defaultNonEntryImage: string;
    defaultEntryImage: string;
    defaultOverlayWidth: number;
    defaultOverlayHeight: number;
    overlayWidth: number;
    overlayHeight: number;
    defaultUpSearchImage: MxGraphNS.mxImage;
    defaultDownSearchImage: MxGraphNS.mxImage;
    defaultUpFolderImage: MxGraphNS.mxImage;
    defaultDownFolderImage: MxGraphNS.mxImage;
    upSearchImage: MxGraphNS.mxImage;
    downSearchImage: MxGraphNS.mxImage;
    upFolderImage: MxGraphNS.mxImage;
    downFolderImage: MxGraphNS.mxImage;
    upSearchOffset: MxGraphNS.mxPoint;
    downSearchOffset: MxGraphNS.mxPoint;
    dataInfoService: BillTrackerDataInfoService;
    /**
     * 正在加载中的单据节点请求数
     */
    numCellsAddingReq: number;
    /**
     * 当前菜单
     */
    currentMenu: MxGraphNS.mxPopupMenu;
    /**
     * 当前菜单dom元素
     */
    currentMenuElt: any;
    /**
     * 节点“更多”按钮弹出菜单对象
     */
    morePopupMenu: MxGraphNS.mxPopupMenu;
    constructor(args: BillTrackerArgs, localeId: string, dataService: BillTrackerDataService, notify: NotifyService, messager: MessagerService, loading: LoadingService, modal: BsModalService, vcr: ViewContainerRef, inj: Injector, cfr: ComponentFactoryResolver, cdr: ChangeDetectorRef);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    refresh(sizeDidChange?: boolean): void;
    paint(): void;
    setModalRef(modalRef: BsModalRef): void;
    createGraph(): Graph;
    createLayout(graph: Graph): void;
    addListener(graph: any): void;
    /**
     * 隐藏当前菜单
     */
    hideCurrentMenu(): void;
    /**
     * 重置当前菜单
     */
    resetCurrentMenu(): void;
    paintGraph(graph: Graph): void;
    repaintGraph(graph: Graph): void;
    afterPaintGraph(graph: Graph, entry: BillCell): void;
    paintEntry(graph: Graph): BillCell;
    addUpOverlay(graph: Graph, cell: BillCell): any;
    addDownOverlay(graph: Graph, cell: BillCell): any;
    addUpAssoCell(graph: Graph, cell: BillCell, resetView?: boolean, showLoading?: boolean): void;
    addDownAssoCell(graph: Graph, cell: BillCell, resetView?: boolean, showLoading?: boolean): void;
    removeAssoCell(graph: Graph, cell: BillCell, dir: BillTrackerDirection): void;
    restoreEntryPosition(graph: Graph, entry: BillCell, dx: number, dy: number): void;
    calCellsPosition(graph: Graph, cell: BillCell, newCells: BillCell[], dir: BillTrackerDirection): void;
    resetDownCellsPosition(graph: Graph, cell: BillCell, newCells: BillCell[]): void;
    resetUpCellsPosition(graph: Graph, cell: BillCell, newCells: BillCell[]): void;
    setCellData(cellData: CellData, cell: BillCell): void;
    zoomOut(): void;
    zoomIn(): void;
    zoomActual(): void;
    getZoomScale(): number;
    print(): void;
    expand(direction: BillTrackerDirection, all?: boolean): void;
    expandAll(direction: BillTrackerDirection): void;
    /**
     * 继续追踪
     * @param cell
     */
    goOnTrack(cell: BillCell): void;
    /**
     * 设为当前
     * @param cell
     */
    setAsCurrent(cell: BillCell): void;
}
