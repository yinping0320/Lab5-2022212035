import { GraphView } from './GraphView';
import { mxGraph, MxGraphNS } from "../../ref/mxgraph";
import { BillCell } from './BillCell';
import { BillDataInfo } from '../../entity/tracking/BillDataInfo';
import { DownBillInfoResult } from '../args/DownBillInfoResult';
import { UpBillInfoResult } from '../args/UpBillInfoResult';
import { VertexHandler } from './VertexHandler';
import { BillTrackerGraphOptions } from '../config/bill-tracker-graph-options';
import { BillTrackerGridOptions } from '../config/bill-tracker-grid-options';
import { BillTrackerLocalePipe } from '../pipe/bill-tracker-locale.pipe';
import { EventEmitter } from '@angular/core';
import { BillTrackerGraphComponent } from '../components/bill-tracker-graph/bill-tracker-graph.component';
export declare class Graph extends mxGraph {
    selectEventEmitter: EventEmitter<any>;
    scrollTileSize: MxGraphNS.mxRectangle;
    autoTranslate: boolean;
    view: GraphView;
    background: string;
    static handleFill: string;
    graphOptions: BillTrackerGraphOptions;
    gridOptions: BillTrackerGridOptions;
    localePipe: BillTrackerLocalePipe;
    ngComp: BillTrackerGraphComponent;
    constructor(container?: any, model?: any, renderHint?: any, stylesheet?: any);
    createGraphView(): GraphView;
    createVertexHandler(state: any): VertexHandler;
    getPagePadding(): MxGraphNS.mxPoint;
    getPageSize(): MxGraphNS.mxRectangle;
    getPageLayout(): MxGraphNS.mxRectangle;
    getScrollTileSize(): MxGraphNS.mxRectangle;
    getPreferredPageSize(bounds: any, width: any, height: any): MxGraphNS.mxRectangle;
    sizeDidChange(): void;
    resetGraphView(): void;
    insertBillCell(parent: any, id: any, billDataInfo: BillDataInfo, billInfo: DownBillInfoResult | UpBillInfoResult, entry: boolean, x: any, y: any, width: any, height: any, style?: any, relative?: boolean): BillCell;
    createBillCell(parent: any, id: any, billDataInfo: BillDataInfo, billInfo: DownBillInfoResult | UpBillInfoResult, entry: boolean, x: any, y: any, width: any, height: any, style?: any, relative?: boolean): BillCell;
    getTooltipForCell(cell: MxGraphNS.mxCell): string;
    getLabel(cell: MxGraphNS.mxCell): string;
    convertValueToString(cell: any): string | Node;
    private defineInnerStylesNewBTS;
    selectCellForEvent(cell: any, evt: Event): void;
    createCellRenderer(): MxGraphNS.mxCellRenderer;
    static createSvgImage(w: any, h: any, data: any): MxGraphNS.mxImage;
    destroy(): void;
}
