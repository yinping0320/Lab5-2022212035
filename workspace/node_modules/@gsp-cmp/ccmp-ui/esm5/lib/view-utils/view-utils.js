/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { MessagerService } from '@farris/ui-messager';
import { NotifyService } from '@farris/ui-notify';
import * as i0 from "@angular/core";
import * as i1 from "@farris/ui-messager";
import * as i2 from "@farris/ui-notify";
var ViewUtils = /** @class */ (function () {
    function ViewUtils(messagerService, notify) {
        this.messagerService = messagerService;
        this.notify = notify;
    }
    /**
     * 获取模态框配置信息
     * @param btnRef 按钮模板引用
     * @param title 模态框标题
     * @param options 配置项，暂未使用
     */
    /**
     * 获取模态框配置信息
     * @param {?} btnRef 按钮模板引用
     * @param {?=} options 配置项，暂未使用
     * @return {?}
     */
    ViewUtils.prototype.getModalConfig = /**
     * 获取模态框配置信息
     * @param {?} btnRef 按钮模板引用
     * @param {?=} options 配置项，暂未使用
     * @return {?}
     */
    function (btnRef, options) {
        return {
            title: (options && options.title) ? options.title : '操作列表',
            width: (options && options.width) ? options.width : 450,
            height: (options && options.height) ? options.width : 500,
            resizable: (options && options.resizable) ? options.resizable : true,
            showButtons: true,
            showMaxButton: false,
            enableScroll: false,
            buttons: btnRef
        };
    };
    /**
     * @param {?} data
     * @return {?}
     */
    ViewUtils.prototype.showObseleteDialog = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.messagerService.show('warning', "\u901A\u7528\u6784\u4EF6" + data.code + "\u5DF2\u8FC7\u65F6\uFF01\n                    \u5347\u7EA7\u6B65\u9AA4\uFF1A\n                    1. \u91CD\u65B0\u5B9A\u4E49\u901A\u7528\u6784\u4EF6\u5143\u6570\u636E;\n                    2. \u5F00\u53D1\u65B0\u7248\u672C\u6784\u4EF6\u4EE3\u7801\u3002\n                    \u8BF7\u53C2\u8003GSPCloud\u5F00\u53D1\u6587\u6863->\u9AD8\u7EA7\u5F00\u53D1->\u6784\u4EF6\u5F00\u53D1->\u901A\u7528\u6784\u4EF6\u5F00\u53D1", { safeHtml: false });
    };
    /**
     * @param {?} message
     * @param {?} infoType
     * @param {?} title
     * @param {?} timeout
     * @return {?}
     */
    ViewUtils.prototype.showInfo = /**
     * @param {?} message
     * @param {?} infoType
     * @param {?} title
     * @param {?} timeout
     * @return {?}
     */
    function (message, infoType, title, timeout) {
        this.notify.config.position = 'top-center';
        if (infoType == 'success') {
            this.notify.success((/** @type {?} */ ({ title: title, msg: message, timeout: timeout })));
        }
        else if (infoType == 'info') {
            this.notify.info((/** @type {?} */ ({ title: title, msg: message, timeout: timeout })));
        }
        else if (infoType == 'warning') {
            this.notify.warning((/** @type {?} */ ({ title: title, msg: message, timeout: timeout })));
        }
        else if (infoType == 'error') {
            this.notify.error((/** @type {?} */ ({ title: title, msg: message, timeout: timeout })));
        }
    };
    ViewUtils.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ViewUtils.ctorParameters = function () { return [
        { type: MessagerService },
        { type: NotifyService }
    ]; };
    /** @nocollapse */ ViewUtils.ngInjectableDef = i0.defineInjectable({ factory: function ViewUtils_Factory() { return new ViewUtils(i0.inject(i1.MessagerService), i0.inject(i2.NotifyService)); }, token: ViewUtils, providedIn: "root" });
    return ViewUtils;
}());
export { ViewUtils };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ViewUtils.prototype.messagerService;
    /**
     * @type {?}
     * @private
     */
    ViewUtils.prototype.notify;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy11dGlscy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3AtY21wL2NjbXAtdWkvIiwic291cmNlcyI6WyJsaWIvdmlldy11dGlscy92aWV3LXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFlLE1BQU0sZUFBZSxDQUFDO0FBRXhELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsYUFBYSxFQUFpQixNQUFNLG1CQUFtQixDQUFDOzs7O0FBR2pFO0lBS0ksbUJBQW9CLGVBQStCLEVBQVMsTUFBb0I7UUFBNUQsb0JBQWUsR0FBZixlQUFlLENBQWdCO1FBQVMsV0FBTSxHQUFOLE1BQU0sQ0FBYztJQUFFLENBQUM7SUFDbkY7Ozs7O09BS0c7Ozs7Ozs7SUFDSSxrQ0FBYzs7Ozs7O0lBQXJCLFVBQXNCLE1BQXdCLEVBQUUsT0FBaUI7UUFDN0QsT0FBTztZQUNILEtBQUssRUFBRSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU07WUFDMUQsS0FBSyxFQUFFLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRztZQUN2RCxNQUFNLEVBQUUsQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHO1lBQ3pELFNBQVMsRUFBRSxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUk7WUFDcEUsV0FBVyxFQUFFLElBQUk7WUFDakIsYUFBYSxFQUFFLEtBQUs7WUFDcEIsWUFBWSxFQUFFLEtBQUs7WUFDbkIsT0FBTyxFQUFFLE1BQU07U0FDbEIsQ0FBQztJQUNOLENBQUM7Ozs7O0lBRU0sc0NBQWtCOzs7O0lBQXpCLFVBQTBCLElBQW1CO1FBQ3pDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFDdkIsNkJBQU8sSUFBSSxDQUFDLElBQUksb2FBSW9CLEVBQUMsRUFBQyxRQUFRLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQztJQUN4RSxDQUFDOzs7Ozs7OztJQUVNLDRCQUFROzs7Ozs7O0lBQWYsVUFBZ0IsT0FBZSxFQUFFLFFBQWdCLEVBQUUsS0FBYSxFQUFFLE9BQWU7UUFDN0UsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxHQUFHLFlBQVksQ0FBQztRQUMzQyxJQUFJLFFBQVEsSUFBSSxTQUFTLEVBQUU7WUFDdkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsbUJBQWUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxFQUFBLENBQUMsQ0FBQztTQUN4RjthQUNJLElBQUksUUFBUSxJQUFJLE1BQU0sRUFBRTtZQUN6QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxtQkFBZSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLEVBQUEsQ0FBQyxDQUFDO1NBQ3JGO2FBQ0ksSUFBSSxRQUFRLElBQUksU0FBUyxFQUFFO1lBQzVCLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLG1CQUFlLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBQSxDQUFDLENBQUM7U0FDeEY7YUFDSSxJQUFJLFFBQVEsSUFBSSxPQUFPLEVBQUU7WUFDMUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsbUJBQWUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxFQUFBLENBQUMsQ0FBQztTQUN0RjtJQUNMLENBQUM7O2dCQWhESixVQUFVLFNBQUM7b0JBQ1IsVUFBVSxFQUFFLE1BQU07aUJBQ3JCOzs7O2dCQU5RLGVBQWU7Z0JBQ2YsYUFBYTs7O29CQUh0QjtDQXVEQyxBQWpERCxJQWlEQztTQTlDWSxTQUFTOzs7Ozs7SUFFTixvQ0FBdUM7Ozs7O0lBQUMsMkJBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT3B0aW9ucyB9IGZyb20gJy4uL3BhcmFtcy9vcHRpb25zJztcclxuaW1wb3J0IHsgTWVzc2FnZXJTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1tZXNzYWdlcic7XHJcbmltcG9ydCB7IE5vdGlmeVNlcnZpY2UsIE5vdGlmeU9wdGlvbnMgfSBmcm9tICdAZmFycmlzL3VpLW5vdGlmeSc7XHJcbmltcG9ydCB7IENvbXBvbmVudEluZm8gfSBmcm9tICcuLi9wYXJhbXMvY29tcG9uZW50LWluZm8nO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBWaWV3VXRpbHMge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbWVzc2FnZXJTZXJ2aWNlOk1lc3NhZ2VyU2VydmljZSxwcml2YXRlIG5vdGlmeTpOb3RpZnlTZXJ2aWNlKXt9XHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluaooeaAgeahhumFjee9ruS/oeaBr1xyXG4gICAgICogQHBhcmFtIGJ0blJlZiDmjInpkq7mqKHmnb/lvJXnlKhcclxuICAgICAqIEBwYXJhbSB0aXRsZSDmqKHmgIHmoYbmoIfpophcclxuICAgICAqIEBwYXJhbSBvcHRpb25zIOmFjee9rumhue+8jOaaguacquS9v+eUqFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0TW9kYWxDb25maWcoYnRuUmVmOiBUZW1wbGF0ZVJlZjxhbnk+LCBvcHRpb25zPzogT3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHRpdGxlOiAob3B0aW9ucyAmJiBvcHRpb25zLnRpdGxlKSA/IG9wdGlvbnMudGl0bGUgOiAn5pON5L2c5YiX6KGoJyxcclxuICAgICAgICAgICAgd2lkdGg6IChvcHRpb25zICYmIG9wdGlvbnMud2lkdGgpID8gb3B0aW9ucy53aWR0aCA6IDQ1MCxcclxuICAgICAgICAgICAgaGVpZ2h0OiAob3B0aW9ucyAmJiBvcHRpb25zLmhlaWdodCkgPyBvcHRpb25zLndpZHRoIDogNTAwLFxyXG4gICAgICAgICAgICByZXNpemFibGU6IChvcHRpb25zICYmIG9wdGlvbnMucmVzaXphYmxlKSA/IG9wdGlvbnMucmVzaXphYmxlIDogdHJ1ZSxcclxuICAgICAgICAgICAgc2hvd0J1dHRvbnM6IHRydWUsXHJcbiAgICAgICAgICAgIHNob3dNYXhCdXR0b246IGZhbHNlLFxyXG4gICAgICAgICAgICBlbmFibGVTY3JvbGw6IGZhbHNlLFxyXG4gICAgICAgICAgICBidXR0b25zOiBidG5SZWZcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzaG93T2JzZWxldGVEaWFsb2coZGF0YTogQ29tcG9uZW50SW5mbykge1xyXG4gICAgICAgIHRoaXMubWVzc2FnZXJTZXJ2aWNlLnNob3coJ3dhcm5pbmcnLFxyXG4gICAgICAgICAgICAgICAgICAgIGDpgJrnlKjmnoTku7Yke2RhdGEuY29kZX3lt7Lov4fml7bvvIFcclxuICAgICAgICAgICAgICAgICAgICDljYfnuqfmraXpqqTvvJpcclxuICAgICAgICAgICAgICAgICAgICAxLiDph43mlrDlrprkuYnpgJrnlKjmnoTku7blhYPmlbDmja47XHJcbiAgICAgICAgICAgICAgICAgICAgMi4g5byA5Y+R5paw54mI5pys5p6E5Lu25Luj56CB44CCXHJcbiAgICAgICAgICAgICAgICAgICAg6K+35Y+C6ICDR1NQQ2xvdWTlvIDlj5HmlofmoaMtPumrmOe6p+W8gOWPkS0+5p6E5Lu25byA5Y+RLT7pgJrnlKjmnoTku7blvIDlj5FgLHtzYWZlSHRtbDogZmFsc2V9KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2hvd0luZm8obWVzc2FnZTogc3RyaW5nLCBpbmZvVHlwZTogc3RyaW5nLCB0aXRsZTogc3RyaW5nLCB0aW1lb3V0OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLm5vdGlmeS5jb25maWcucG9zaXRpb24gPSAndG9wLWNlbnRlcic7XHJcbiAgICAgICAgaWYgKGluZm9UeXBlID09ICdzdWNjZXNzJykge1xyXG4gICAgICAgICAgICB0aGlzLm5vdGlmeS5zdWNjZXNzKDxOb3RpZnlPcHRpb25zPnsgdGl0bGU6IHRpdGxlLCBtc2c6IG1lc3NhZ2UsIHRpbWVvdXQ6IHRpbWVvdXQgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGluZm9UeXBlID09ICdpbmZvJykge1xyXG4gICAgICAgICAgICB0aGlzLm5vdGlmeS5pbmZvKDxOb3RpZnlPcHRpb25zPnsgdGl0bGU6IHRpdGxlLCBtc2c6IG1lc3NhZ2UsIHRpbWVvdXQ6IHRpbWVvdXQgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGluZm9UeXBlID09ICd3YXJuaW5nJykge1xyXG4gICAgICAgICAgICB0aGlzLm5vdGlmeS53YXJuaW5nKDxOb3RpZnlPcHRpb25zPnsgdGl0bGU6IHRpdGxlLCBtc2c6IG1lc3NhZ2UsIHRpbWVvdXQ6IHRpbWVvdXQgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGluZm9UeXBlID09ICdlcnJvcicpIHtcclxuICAgICAgICAgICAgdGhpcy5ub3RpZnkuZXJyb3IoPE5vdGlmeU9wdGlvbnM+eyB0aXRsZTogdGl0bGUsIG1zZzogbWVzc2FnZSwgdGltZW91dDogdGltZW91dCB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0=