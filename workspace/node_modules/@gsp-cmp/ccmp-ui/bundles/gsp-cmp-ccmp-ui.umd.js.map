{"version":3,"file":"gsp-cmp-ccmp-ui.umd.js.map","sources":["ng://@gsp-cmp/ccmp-ui/lib/view-utils/view-utils.ts","ng://@gsp-cmp/ccmp-ui/lib/convertor/convertor.ts","ng://@gsp-cmp/ccmp-ui/lib/params/component-info.ts","ng://@gsp-cmp/ccmp-ui/lib/ccmp-selector/common-component-selector.component.ts","ng://@gsp-cmp/ccmp-ui/lib/ccmp-ui.rt-service.ts","ng://@gsp-cmp/ccmp-ui/lib/ccmp-ui.dt-service.ts","ng://@gsp-cmp/ccmp-ui/lib/ccmp-ui.module.ts","ng://@gsp-cmp/ccmp-ui/lib/params/selector-result.ts"],"sourcesContent":["import { Injectable, TemplateRef } from '@angular/core';\r\nimport { Options } from '../params/options';\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { NotifyService, NotifyOptions } from '@farris/ui-notify';\r\nimport { ComponentInfo } from '../params/component-info';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ViewUtils {\r\n\r\n    constructor(private messagerService:MessagerService,private notify:NotifyService){}\r\n    /**\r\n     * è·åæ¨¡ææ¡éç½®ä¿¡æ¯\r\n     * @param btnRef æé®æ¨¡æ¿å¼ç¨\r\n     * @param title æ¨¡ææ¡æ é¢\r\n     * @param options éç½®é¡¹ï¼ææªä½¿ç¨\r\n     */\r\n    public getModalConfig(btnRef: TemplateRef<any>, options?: Options) {\r\n        return {\r\n            title: (options && options.title) ? options.title : 'æä½åè¡¨',\r\n            width: (options && options.width) ? options.width : 450,\r\n            height: (options && options.height) ? options.width : 500,\r\n            resizable: (options && options.resizable) ? options.resizable : true,\r\n            showButtons: true,\r\n            showMaxButton: false,\r\n            enableScroll: false,\r\n            buttons: btnRef\r\n        };\r\n    }\r\n\r\n    public showObseleteDialog(data: ComponentInfo) {\r\n        this.messagerService.show('warning',\r\n                    `éç¨æä»¶${data.code}å·²è¿æ¶ï¼\r\n                    åçº§æ­¥éª¤ï¼\r\n                    1. éæ°å®ä¹éç¨æä»¶åæ°æ®;\r\n                    2. å¼åæ°çæ¬æä»¶ä»£ç ã\r\n                    è¯·åèGSPCloudå¼åææ¡£->é«çº§å¼å->æä»¶å¼å->éç¨æä»¶å¼å`,{safeHtml: false});\r\n    }\r\n\r\n    public showInfo(message: string, infoType: string, title: string, timeout: number) {\r\n        this.notify.config.position = 'top-center';\r\n        if (infoType == 'success') {\r\n            this.notify.success(<NotifyOptions>{ title: title, msg: message, timeout: timeout });\r\n        }\r\n        else if (infoType == 'info') {\r\n            this.notify.info(<NotifyOptions>{ title: title, msg: message, timeout: timeout });\r\n        }\r\n        else if (infoType == 'warning') {\r\n            this.notify.warning(<NotifyOptions>{ title: title, msg: message, timeout: timeout });\r\n        }\r\n        else if (infoType == 'error') {\r\n            this.notify.error(<NotifyOptions>{ title: title, msg: message, timeout: timeout });\r\n        }\r\n    }\r\n}","import { GspComponent, DefaultGspComponentSerializeContext, GspComponentConvertor } from '@gsp-cmp/common-component';\r\n\r\nexport class ComponentConvertor{\r\n    \r\n    convertorToObject(entity:GspComponent ):Object{\r\n        let covertor:GspComponentConvertor=new GspComponentConvertor();\r\n        let obj=new Object();\r\n        covertor.convertToObject(obj,entity,new DefaultGspComponentSerializeContext())\r\n        return obj;\r\n    }\r\n\r\n    initFromObject(obj:Object):GspComponent{\r\n        let covertor:GspComponentConvertor=new GspComponentConvertor();\r\n        let entity=new GspComponent();\r\n        covertor.initFromObject(entity,obj,new DefaultGspComponentSerializeContext());\r\n        return entity;\r\n    }\r\n}","import { GspComponent } from '@gsp-cmp/common-component';\r\nimport { ComponentConvertor } from '../convertor/convertor';\r\n\r\nexport class ComponentInfo{\r\n    obselete:boolean;\r\n    id:string;\r\n    code:string;\r\n    name:string;\r\n    nameSpace:string;\r\n    fileName:string;\r\n    type:string;\r\n    bizobjectID:string;\r\n    language:string;\r\n    metadata:GspComponent;\r\n\r\n\r\n    init(obj:Object){\r\n        this.id=obj['id'];\r\n        this.obselete=obj['obselete'];\r\n        this.code=obj['code'];\r\n        this.name=obj['name'];\r\n        this.nameSpace=obj['nameSpace'];\r\n        this.fileName=obj['fileName'];\r\n        this.type=obj['type'];\r\n        this.bizobjectID=obj['bizobjectID'];\r\n        this.language=obj['language'];\r\n        if(obj['metadata']){\r\n            let convertor = new ComponentConvertor();\r\n            this.metadata = convertor.initFromObject(obj['metadata']);\r\n        }\r\n    }\r\n}","import { Component, OnInit, Input, EventEmitter, Output, ViewChild, TemplateRef, ComponentFactoryResolver, Injector, ComponentRef } from '@angular/core';\r\nimport { GspComponent } from '@gsp-cmp/common-component';\r\nimport { ViewUtils } from '../view-utils/view-utils';\r\nimport { ComponentInfo } from '../params/component-info';\r\nimport { BsModalRef, BsModalService } from '@farris/ui-modal';\r\nimport { RowArgs, CellClickEvent } from '@progress/kendo-angular-grid';\r\nimport { ComponentConvertor } from '../convertor/convertor';\r\nimport { Operation, StructuredType } from '@ecp-caf/common-structure';\r\n\r\n@Component({\r\n    selector: 'common-component-selector',\r\n    templateUrl: './common-component-selector.component.html',\r\n    styleUrls: ['./common-component-selector.component.css']\r\n})\r\nexport class CommonComponentSelectorComponent implements OnInit {\r\n\r\n    _componentInfo: ComponentInfo;\r\n\r\n    @Input() set componentInfo(_componentInfo: ComponentInfo) {\r\n        this._componentInfo = _componentInfo;\r\n        this.metadata=_componentInfo.metadata;\r\n\r\n        let convertor = new ComponentConvertor();\r\n        this.metadata = convertor.initFromObject(convertor.convertorToObject(_componentInfo.metadata));\r\n        this.metadata.operations = new Array<Operation>();\r\n    }\r\n\r\n    dialog: BsModalRef;\r\n\r\n    metadata: GspComponent;\r\n\r\n    selectedOpUris: string[] = [];\r\n\r\n    isRowSelected = (e: RowArgs) => this.selectedOpUris.indexOf(e.dataItem.uri) >= 0;\r\n\r\n    @ViewChild('btnRef') btnRef: TemplateRef<any>;\r\n\r\n    @Output() confirmEmitter: EventEmitter<GspComponent> = new EventEmitter();\r\n\r\n    @Output() closeEmitter: EventEmitter<any> = new EventEmitter();\r\n\r\n    constructor(private utils: ViewUtils, private modalService: BsModalService,private resolver: ComponentFactoryResolver, private injector: Injector) { }\r\n\r\n    ngOnInit() {\r\n        this._componentInfo = this._componentInfo || new ComponentInfo();\r\n    }\r\n\r\n    confirm() {\r\n        if (!this._componentInfo.metadata || !this._componentInfo.metadata.operations) {\r\n            if (this._componentInfo.metadata.operations.length <= 0) {\r\n                this.utils.showInfo('æ²¡æå¯éçæä»¶æä½', 'info', '', 1500);\r\n                return;\r\n            }\r\n        }\r\n        if (!this.metadata.operations || this.metadata.operations.length <= 0) {\r\n            this.utils.showInfo('è¯·éæ©æä»¶æä½', 'info', '', 1500);\r\n            return;\r\n        }\r\n        if (this.dialog) {\r\n            this.dialog.close();\r\n        }\r\n        this.confirmEmitter.emit(this.metadata);\r\n    }\r\n\r\n    close() {\r\n        if (this.dialog) {\r\n            this.dialog.close();\r\n        }\r\n        this.closeEmitter.emit();\r\n    }\r\n\r\n\r\n    cellClickHandler($event: CellClickEvent) {\r\n        this.selectedOpUris = [$event.dataItem.uri];\r\n        this.metadata.operations = [$event.dataItem];\r\n    }\r\n}\r\n","import { Injectable, Injector, EventEmitter, ComponentFactoryResolver } from '@angular/core';\r\nimport { CommonComponentSelectorComponent } from './ccmp-selector/common-component-selector.component';\r\nimport { ViewUtils } from './view-utils/view-utils';\r\nimport { BsModalService } from '@farris/ui-modal';\r\nimport { Options } from './params/options';\r\nimport { HttpHeaders, HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { SelectorResult } from './params/selector-result';\r\nimport { ComponentInfo } from './params/component-info';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CommonComponentUiRTService {\r\n\r\n    constructor(private resolver: ComponentFactoryResolver, private injector: Injector,\r\n        private util: ViewUtils, private modalService: BsModalService, private http: HttpClient) { }\r\n\r\n    /**\r\n     * éç¨æä»¶æä½éæ©å¨\r\n     * @param metadataId éç¨æä»¶åæ°æ®\r\n     * @param sessionId åè½sessionId\r\n     * @param options UIå¯ééç½®åæ°\r\n     */\r\n    public openSelector(metadataId: string, sessionId: string, options?: Options): Observable<SelectorResult> {\r\n        return this.getComponentInfo(metadataId, sessionId).pipe(map(\r\n            (data: ComponentInfo) => {\r\n                if (data.obselete) {\r\n                    this.util.showObseleteDialog(data);\r\n                    return { confirmEvent: new EventEmitter<any>(), closeEvent: new EventEmitter<any>() };\r\n                }\r\n                else {\r\n                    return this.create(data, options);\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    /**\r\n     * è·åæä»¶ä¿¡æ¯\r\n     * @param metadataId æä»¶åæ°æ®ID\r\n     * @param sessionId åè½sessionid\r\n     */\r\n    public getComponentInfo(metadataId: string, sessionId: string): Observable<any> {\r\n        let headers = new HttpHeaders();\r\n        headers.set(\"sessionId\", sessionId);\r\n        let url = `/api/runtime/sys/v1.0/common-component/component-info/${metadataId}`;\r\n        return this.http.get(url, { headers: headers }).pipe(map(data => {\r\n            if (data) {\r\n                let cmpInfo = new ComponentInfo();\r\n                cmpInfo.init(data);\r\n                return cmpInfo;\r\n            }\r\n        }));\r\n    }\r\n\r\n    private create(componentInfo: ComponentInfo, options: Options): SelectorResult {\r\n        let fac = this.resolver.resolveComponentFactory(CommonComponentSelectorComponent);\r\n        let cmpRef = fac.create(this.injector);\r\n        cmpRef.instance.componentInfo = componentInfo;\r\n        let modalConfig = this.util.getModalConfig(cmpRef.instance.btnRef, options);\r\n        let dialog = this.modalService.show(cmpRef, modalConfig);\r\n        cmpRef.instance.dialog = dialog;\r\n        return { confirmEvent: cmpRef.instance.confirmEmitter, closeEvent: cmpRef.instance.closeEmitter };\r\n    }\r\n}\r\n","import { Injectable, Injector, EventEmitter, ComponentFactoryResolver } from '@angular/core';\r\nimport { CommonComponentSelectorComponent } from './ccmp-selector/common-component-selector.component';\r\nimport { ViewUtils } from './view-utils/view-utils';\r\nimport { BsModalService } from '@farris/ui-modal';\r\nimport { Options } from './params/options';\r\nimport { HttpHeaders, HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { SelectorResult } from './params/selector-result';\r\nimport { ComponentInfo } from './params/component-info';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CommonComponentUiDTService {\r\n\r\n    constructor(private resolver: ComponentFactoryResolver, private injector: Injector,\r\n        private util: ViewUtils, private modalService: BsModalService, private http: HttpClient) { }\r\n\r\n    /**\r\n     * éç¨æä»¶æä½éæ©å¨\r\n     * @param metadataId éç¨æä»¶åæ°æ®\r\n     * @param sessionId åè½sessionId\r\n     * @param options UIå¯ééç½®åæ°\r\n     */\r\n    public openSelector(metadataId: string, sessionId: string, options?: Options): Observable<SelectorResult> {\r\n        return this.getComponentInfo(metadataId, sessionId).pipe(map(\r\n            (data: ComponentInfo) => {\r\n                if (data.obselete) {\r\n                    this.util.showObseleteDialog(data);\r\n                    return { confirmEvent: new EventEmitter<any>(), closeEvent: new EventEmitter<any>() };\r\n                }\r\n                else {\r\n                    return this.create(data, options);\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    /**\r\n     * è·åæä»¶ä¿¡æ¯\r\n     * @param metadataId æä»¶åæ°æ®ID\r\n     * @param sessionId åè½sessionid\r\n     */\r\n    public getComponentInfo(metadataId: string, sessionId: string): Observable<any> {\r\n        let headers = new HttpHeaders();\r\n        headers.set(\"sessionId\", sessionId);\r\n        let url = `/api/dev/main/v1.0/common-component/component-info/${metadataId}`;\r\n        return this.http.get(url, { headers: headers }).pipe(map(data => {\r\n            if (data) {\r\n                let cmpInfo = new ComponentInfo();\r\n                cmpInfo.init(data);\r\n                return cmpInfo;\r\n            }\r\n        }));\r\n    }\r\n\r\n    private create(componentInfo: ComponentInfo, options: Options): SelectorResult {\r\n        let fac = this.resolver.resolveComponentFactory(CommonComponentSelectorComponent);\r\n        let cmpRef = fac.create(this.injector);\r\n        cmpRef.instance.componentInfo = componentInfo;\r\n        let modalConfig = this.util.getModalConfig(cmpRef.instance.btnRef, options);\r\n        let dialog = this.modalService.show(cmpRef, modalConfig);\r\n        cmpRef.instance.dialog = dialog;\r\n        return { confirmEvent: cmpRef.instance.confirmEmitter, closeEvent: cmpRef.instance.closeEmitter };\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonComponentSelectorComponent } from './ccmp-selector/common-component-selector.component';\r\nimport { CommonComponentUiRTService } from './ccmp-ui.rt-service';\r\nimport { ViewUtils } from './view-utils/view-utils';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ButtonsModule } from '@progress/kendo-angular-buttons';\r\nimport { GridModule } from '@progress/kendo-angular-grid';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { ModalModule } from '@farris/ui-modal';\r\nimport { FarrisDialogModule } from '@farris/ui-dialog';\r\nimport { MessagerModule } from '@farris/ui-messager';\r\nimport { NotifyModule } from '@farris/ui-notify';\r\nimport { CommonComponentUiDTService } from './ccmp-ui.dt-service';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        CommonComponentSelectorComponent,\r\n    ],\r\n    imports: [\r\n        NotifyModule,\r\n        CommonModule,\r\n        ButtonsModule,\r\n        GridModule,\r\n        HttpClientModule,\r\n        ModalModule.forRoot(),\r\n        FarrisDialogModule,\r\n        MessagerModule.forRoot(),\r\n    ],\r\n    entryComponents: [CommonComponentSelectorComponent],\r\n    providers: [\r\n        CommonComponentUiRTService,\r\n        CommonComponentUiDTService,\r\n        ViewUtils\r\n    ],\r\n    exports: [CommonComponentSelectorComponent]\r\n})\r\nexport class CommonComponentUiModule { }\r\n","import { EventEmitter } from '@angular/core';\r\nimport { GspComponent } from '@gsp-cmp/common-component';\r\n\r\n/**\r\n * éæ©å¨è¿åç»æ\r\n */\r\nexport class SelectorResult{\r\n\r\n    /**\r\n     * éæ©å¨ç¡®è®¤æé®äºä»¶\r\n     */\r\n    confirmEvent:EventEmitter<GspComponent>\r\n\r\n    /**\r\n     * éæ©å¨å³é­æé®äºä»¶\r\n     */\r\n    closeEvent: EventEmitter<void>;\r\n}"],"names":["Injectable","MessagerService","NotifyService","GspComponentConvertor","DefaultGspComponentSerializeContext","GspComponent","EventEmitter","Component","BsModalService","ComponentFactoryResolver","Injector","Input","ViewChild","Output","map","HttpHeaders","HttpClient","NgModule","NotifyModule","CommonModule","ButtonsModule","GridModule","HttpClientModule","ModalModule","FarrisDialogModule","MessagerModule"],"mappings":"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"}
