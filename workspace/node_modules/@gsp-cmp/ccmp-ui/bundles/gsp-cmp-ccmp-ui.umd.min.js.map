{"version":3,"sources":["ng://@gsp-cmp/ccmp-ui/lib/view-utils/view-utils.ts","ng://@gsp-cmp/ccmp-ui/lib/convertor/convertor.ts","ng://@gsp-cmp/ccmp-ui/lib/params/component-info.ts","ng://@gsp-cmp/ccmp-ui/lib/ccmp-selector/common-component-selector.component.ts","ng://@gsp-cmp/ccmp-ui/lib/ccmp-ui.rt-service.ts","ng://@gsp-cmp/ccmp-ui/lib/ccmp-ui.dt-service.ts","ng://@gsp-cmp/ccmp-ui/lib/ccmp-ui.module.ts","ng://@gsp-cmp/ccmp-ui/lib/params/selector-result.ts"],"names":["ViewUtils","prototype","getModalConfig","btnRef","options","title","width","height","resizable","showButtons","showMaxButton","enableScroll","buttons","showObseleteDialog","data","this","messagerService","show","code","safeHtml","showInfo","message","infoType","timeout","notify","config","position","success","msg","info","warning","error","Injectable","args","providedIn","MessagerService","NotifyService","ComponentConvertor","convertorToObject","entity","covertor","GspComponentConvertor","obj","Object","convertToObject","DefaultGspComponentSerializeContext","initFromObject","GspComponent","ComponentInfo","init","id","obselete","name","nameSpace","fileName","type","bizobjectID","language","convertor","metadata","CommonComponentSelectorComponent","defineProperty","_componentInfo","operations","Array","ngOnInit","confirm","length","utils","dialog","close","confirmEmitter","emit","closeEmitter","cellClickHandler","$event","selectedOpUris","dataItem","uri","Component","selector","template","BsModalService","ComponentFactoryResolver","Injector","Input","ViewChild","Output","modalService","resolver","injector","_this","isRowSelected","e","indexOf","EventEmitter","CommonComponentUiRTService","openSelector","metadataId","sessionId","getComponentInfo","pipe","map","util","confirmEvent","closeEvent","create","headers","HttpHeaders","set","url","http","get","cmpInfo","componentInfo","cmpRef","resolveComponentFactory","instance","modalConfig","HttpClient","CommonComponentUiDTService","CommonComponentUiModule","NgModule","declarations","imports","NotifyModule","CommonModule","ButtonsModule","GridModule","HttpClientModule","ModalModule","forRoot","FarrisDialogModule","MessagerModule","entryComponents","providers","exports"],"mappings":"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","sourcesContent":["import { Injectable, TemplateRef } from '@angular/core';\r\nimport { Options } from '../params/options';\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { NotifyService, NotifyOptions } from '@farris/ui-notify';\r\nimport { ComponentInfo } from '../params/component-info';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ViewUtils {\r\n\r\n    constructor(private messagerService:MessagerService,private notify:NotifyService){}\r\n    /**\r\n     * è·åæ¨¡ææ¡éç½®ä¿¡æ¯\r\n     * @param btnRef æé®æ¨¡æ¿å¼ç¨\r\n     * @param title æ¨¡ææ¡æ é¢\r\n     * @param options éç½®é¡¹ï¼ææªä½¿ç¨\r\n     */\r\n    public getModalConfig(btnRef: TemplateRef<any>, options?: Options) {\r\n        return {\r\n            title: (options && options.title) ? options.title : 'æä½åè¡¨',\r\n            width: (options && options.width) ? options.width : 450,\r\n            height: (options && options.height) ? options.width : 500,\r\n            resizable: (options && options.resizable) ? options.resizable : true,\r\n            showButtons: true,\r\n            showMaxButton: false,\r\n            enableScroll: false,\r\n            buttons: btnRef\r\n        };\r\n    }\r\n\r\n    public showObseleteDialog(data: ComponentInfo) {\r\n        this.messagerService.show('warning',\r\n                    `éç¨æä»¶${data.code}å·²è¿æ¶ï¼\r\n                    åçº§æ­¥éª¤ï¼\r\n                    1. éæ°å®ä¹éç¨æä»¶åæ°æ®;\r\n                    2. å¼åæ°çæ¬æä»¶ä»£ç ã\r\n                    è¯·åèGSPCloudå¼åææ¡£->é«çº§å¼å->æä»¶å¼å->éç¨æä»¶å¼å`,{safeHtml: false});\r\n    }\r\n\r\n    public showInfo(message: string, infoType: string, title: string, timeout: number) {\r\n        this.notify.config.position = 'top-center';\r\n        if (infoType == 'success') {\r\n            this.notify.success(<NotifyOptions>{ title: title, msg: message, timeout: timeout });\r\n        }\r\n        else if (infoType == 'info') {\r\n            this.notify.info(<NotifyOptions>{ title: title, msg: message, timeout: timeout });\r\n        }\r\n        else if (infoType == 'warning') {\r\n            this.notify.warning(<NotifyOptions>{ title: title, msg: message, timeout: timeout });\r\n        }\r\n        else if (infoType == 'error') {\r\n            this.notify.error(<NotifyOptions>{ title: title, msg: message, timeout: timeout });\r\n        }\r\n    }\r\n}","import { GspComponent, DefaultGspComponentSerializeContext, GspComponentConvertor } from '@gsp-cmp/common-component';\r\n\r\nexport class ComponentConvertor{\r\n    \r\n    convertorToObject(entity:GspComponent ):Object{\r\n        let covertor:GspComponentConvertor=new GspComponentConvertor();\r\n        let obj=new Object();\r\n        covertor.convertToObject(obj,entity,new DefaultGspComponentSerializeContext())\r\n        return obj;\r\n    }\r\n\r\n    initFromObject(obj:Object):GspComponent{\r\n        let covertor:GspComponentConvertor=new GspComponentConvertor();\r\n        let entity=new GspComponent();\r\n        covertor.initFromObject(entity,obj,new DefaultGspComponentSerializeContext());\r\n        return entity;\r\n    }\r\n}","import { GspComponent } from '@gsp-cmp/common-component';\r\nimport { ComponentConvertor } from '../convertor/convertor';\r\n\r\nexport class ComponentInfo{\r\n    obselete:boolean;\r\n    id:string;\r\n    code:string;\r\n    name:string;\r\n    nameSpace:string;\r\n    fileName:string;\r\n    type:string;\r\n    bizobjectID:string;\r\n    language:string;\r\n    metadata:GspComponent;\r\n\r\n\r\n    init(obj:Object){\r\n        this.id=obj['id'];\r\n        this.obselete=obj['obselete'];\r\n        this.code=obj['code'];\r\n        this.name=obj['name'];\r\n        this.nameSpace=obj['nameSpace'];\r\n        this.fileName=obj['fileName'];\r\n        this.type=obj['type'];\r\n        this.bizobjectID=obj['bizobjectID'];\r\n        this.language=obj['language'];\r\n        if(obj['metadata']){\r\n            let convertor = new ComponentConvertor();\r\n            this.metadata = convertor.initFromObject(obj['metadata']);\r\n        }\r\n    }\r\n}","import { Component, OnInit, Input, EventEmitter, Output, ViewChild, TemplateRef, ComponentFactoryResolver, Injector, ComponentRef } from '@angular/core';\r\nimport { GspComponent } from '@gsp-cmp/common-component';\r\nimport { ViewUtils } from '../view-utils/view-utils';\r\nimport { ComponentInfo } from '../params/component-info';\r\nimport { BsModalRef, BsModalService } from '@farris/ui-modal';\r\nimport { RowArgs, CellClickEvent } from '@progress/kendo-angular-grid';\r\nimport { ComponentConvertor } from '../convertor/convertor';\r\nimport { Operation, StructuredType } from '@ecp-caf/common-structure';\r\n\r\n@Component({\r\n    selector: 'common-component-selector',\r\n    templateUrl: './common-component-selector.component.html',\r\n    styleUrls: ['./common-component-selector.component.css']\r\n})\r\nexport class CommonComponentSelectorComponent implements OnInit {\r\n\r\n    _componentInfo: ComponentInfo;\r\n\r\n    @Input() set componentInfo(_componentInfo: ComponentInfo) {\r\n        this._componentInfo = _componentInfo;\r\n        this.metadata=_componentInfo.metadata;\r\n\r\n        let convertor = new ComponentConvertor();\r\n        this.metadata = convertor.initFromObject(convertor.convertorToObject(_componentInfo.metadata));\r\n        this.metadata.operations = new Array<Operation>();\r\n    }\r\n\r\n    dialog: BsModalRef;\r\n\r\n    metadata: GspComponent;\r\n\r\n    selectedOpUris: string[] = [];\r\n\r\n    isRowSelected = (e: RowArgs) => this.selectedOpUris.indexOf(e.dataItem.uri) >= 0;\r\n\r\n    @ViewChild('btnRef') btnRef: TemplateRef<any>;\r\n\r\n    @Output() confirmEmitter: EventEmitter<GspComponent> = new EventEmitter();\r\n\r\n    @Output() closeEmitter: EventEmitter<any> = new EventEmitter();\r\n\r\n    constructor(private utils: ViewUtils, private modalService: BsModalService,private resolver: ComponentFactoryResolver, private injector: Injector) { }\r\n\r\n    ngOnInit() {\r\n        this._componentInfo = this._componentInfo || new ComponentInfo();\r\n    }\r\n\r\n    confirm() {\r\n        if (!this._componentInfo.metadata || !this._componentInfo.metadata.operations) {\r\n            if (this._componentInfo.metadata.operations.length <= 0) {\r\n                this.utils.showInfo('æ²¡æå¯éçæä»¶æä½', 'info', '', 1500);\r\n                return;\r\n            }\r\n        }\r\n        if (!this.metadata.operations || this.metadata.operations.length <= 0) {\r\n            this.utils.showInfo('è¯·éæ©æä»¶æä½', 'info', '', 1500);\r\n            return;\r\n        }\r\n        if (this.dialog) {\r\n            this.dialog.close();\r\n        }\r\n        this.confirmEmitter.emit(this.metadata);\r\n    }\r\n\r\n    close() {\r\n        if (this.dialog) {\r\n            this.dialog.close();\r\n        }\r\n        this.closeEmitter.emit();\r\n    }\r\n\r\n\r\n    cellClickHandler($event: CellClickEvent) {\r\n        this.selectedOpUris = [$event.dataItem.uri];\r\n        this.metadata.operations = [$event.dataItem];\r\n    }\r\n}\r\n","import { Injectable, Injector, EventEmitter, ComponentFactoryResolver } from '@angular/core';\r\nimport { CommonComponentSelectorComponent } from './ccmp-selector/common-component-selector.component';\r\nimport { ViewUtils } from './view-utils/view-utils';\r\nimport { BsModalService } from '@farris/ui-modal';\r\nimport { Options } from './params/options';\r\nimport { HttpHeaders, HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { SelectorResult } from './params/selector-result';\r\nimport { ComponentInfo } from './params/component-info';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CommonComponentUiRTService {\r\n\r\n    constructor(private resolver: ComponentFactoryResolver, private injector: Injector,\r\n        private util: ViewUtils, private modalService: BsModalService, private http: HttpClient) { }\r\n\r\n    /**\r\n     * éç¨æä»¶æä½éæ©å¨\r\n     * @param metadataId éç¨æä»¶åæ°æ®\r\n     * @param sessionId åè½sessionId\r\n     * @param options UIå¯ééç½®åæ°\r\n     */\r\n    public openSelector(metadataId: string, sessionId: string, options?: Options): Observable<SelectorResult> {\r\n        return this.getComponentInfo(metadataId, sessionId).pipe(map(\r\n            (data: ComponentInfo) => {\r\n                if (data.obselete) {\r\n                    this.util.showObseleteDialog(data);\r\n                    return { confirmEvent: new EventEmitter<any>(), closeEvent: new EventEmitter<any>() };\r\n                }\r\n                else {\r\n                    return this.create(data, options);\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    /**\r\n     * è·åæä»¶ä¿¡æ¯\r\n     * @param metadataId æä»¶åæ°æ®ID\r\n     * @param sessionId åè½sessionid\r\n     */\r\n    public getComponentInfo(metadataId: string, sessionId: string): Observable<any> {\r\n        let headers = new HttpHeaders();\r\n        headers.set(\"sessionId\", sessionId);\r\n        let url = `/api/runtime/sys/v1.0/common-component/component-info/${metadataId}`;\r\n        return this.http.get(url, { headers: headers }).pipe(map(data => {\r\n            if (data) {\r\n                let cmpInfo = new ComponentInfo();\r\n                cmpInfo.init(data);\r\n                return cmpInfo;\r\n            }\r\n        }));\r\n    }\r\n\r\n    private create(componentInfo: ComponentInfo, options: Options): SelectorResult {\r\n        let fac = this.resolver.resolveComponentFactory(CommonComponentSelectorComponent);\r\n        let cmpRef = fac.create(this.injector);\r\n        cmpRef.instance.componentInfo = componentInfo;\r\n        let modalConfig = this.util.getModalConfig(cmpRef.instance.btnRef, options);\r\n        let dialog = this.modalService.show(cmpRef, modalConfig);\r\n        cmpRef.instance.dialog = dialog;\r\n        return { confirmEvent: cmpRef.instance.confirmEmitter, closeEvent: cmpRef.instance.closeEmitter };\r\n    }\r\n}\r\n","import { Injectable, Injector, EventEmitter, ComponentFactoryResolver } from '@angular/core';\r\nimport { CommonComponentSelectorComponent } from './ccmp-selector/common-component-selector.component';\r\nimport { ViewUtils } from './view-utils/view-utils';\r\nimport { BsModalService } from '@farris/ui-modal';\r\nimport { Options } from './params/options';\r\nimport { HttpHeaders, HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { SelectorResult } from './params/selector-result';\r\nimport { ComponentInfo } from './params/component-info';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CommonComponentUiDTService {\r\n\r\n    constructor(private resolver: ComponentFactoryResolver, private injector: Injector,\r\n        private util: ViewUtils, private modalService: BsModalService, private http: HttpClient) { }\r\n\r\n    /**\r\n     * éç¨æä»¶æä½éæ©å¨\r\n     * @param metadataId éç¨æä»¶åæ°æ®\r\n     * @param sessionId åè½sessionId\r\n     * @param options UIå¯ééç½®åæ°\r\n     */\r\n    public openSelector(metadataId: string, sessionId: string, options?: Options): Observable<SelectorResult> {\r\n        return this.getComponentInfo(metadataId, sessionId).pipe(map(\r\n            (data: ComponentInfo) => {\r\n                if (data.obselete) {\r\n                    this.util.showObseleteDialog(data);\r\n                    return { confirmEvent: new EventEmitter<any>(), closeEvent: new EventEmitter<any>() };\r\n                }\r\n                else {\r\n                    return this.create(data, options);\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    /**\r\n     * è·åæä»¶ä¿¡æ¯\r\n     * @param metadataId æä»¶åæ°æ®ID\r\n     * @param sessionId åè½sessionid\r\n     */\r\n    public getComponentInfo(metadataId: string, sessionId: string): Observable<any> {\r\n        let headers = new HttpHeaders();\r\n        headers.set(\"sessionId\", sessionId);\r\n        let url = `/api/dev/main/v1.0/common-component/component-info/${metadataId}`;\r\n        return this.http.get(url, { headers: headers }).pipe(map(data => {\r\n            if (data) {\r\n                let cmpInfo = new ComponentInfo();\r\n                cmpInfo.init(data);\r\n                return cmpInfo;\r\n            }\r\n        }));\r\n    }\r\n\r\n    private create(componentInfo: ComponentInfo, options: Options): SelectorResult {\r\n        let fac = this.resolver.resolveComponentFactory(CommonComponentSelectorComponent);\r\n        let cmpRef = fac.create(this.injector);\r\n        cmpRef.instance.componentInfo = componentInfo;\r\n        let modalConfig = this.util.getModalConfig(cmpRef.instance.btnRef, options);\r\n        let dialog = this.modalService.show(cmpRef, modalConfig);\r\n        cmpRef.instance.dialog = dialog;\r\n        return { confirmEvent: cmpRef.instance.confirmEmitter, closeEvent: cmpRef.instance.closeEmitter };\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonComponentSelectorComponent } from './ccmp-selector/common-component-selector.component';\r\nimport { CommonComponentUiRTService } from './ccmp-ui.rt-service';\r\nimport { ViewUtils } from './view-utils/view-utils';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ButtonsModule } from '@progress/kendo-angular-buttons';\r\nimport { GridModule } from '@progress/kendo-angular-grid';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { ModalModule } from '@farris/ui-modal';\r\nimport { FarrisDialogModule } from '@farris/ui-dialog';\r\nimport { MessagerModule } from '@farris/ui-messager';\r\nimport { NotifyModule } from '@farris/ui-notify';\r\nimport { CommonComponentUiDTService } from './ccmp-ui.dt-service';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        CommonComponentSelectorComponent,\r\n    ],\r\n    imports: [\r\n        NotifyModule,\r\n        CommonModule,\r\n        ButtonsModule,\r\n        GridModule,\r\n        HttpClientModule,\r\n        ModalModule.forRoot(),\r\n        FarrisDialogModule,\r\n        MessagerModule.forRoot(),\r\n    ],\r\n    entryComponents: [CommonComponentSelectorComponent],\r\n    providers: [\r\n        CommonComponentUiRTService,\r\n        CommonComponentUiDTService,\r\n        ViewUtils\r\n    ],\r\n    exports: [CommonComponentSelectorComponent]\r\n})\r\nexport class CommonComponentUiModule { }\r\n","import { EventEmitter } from '@angular/core';\r\nimport { GspComponent } from '@gsp-cmp/common-component';\r\n\r\n/**\r\n * éæ©å¨è¿åç»æ\r\n */\r\nexport class SelectorResult{\r\n\r\n    /**\r\n     * éæ©å¨ç¡®è®¤æé®äºä»¶\r\n     */\r\n    confirmEvent:EventEmitter<GspComponent>\r\n\r\n    /**\r\n     * éæ©å¨å³é­æé®äºä»¶\r\n     */\r\n    closeEvent: EventEmitter<void>;\r\n}"]}