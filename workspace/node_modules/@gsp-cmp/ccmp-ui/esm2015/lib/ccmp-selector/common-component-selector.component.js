/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, EventEmitter, Output, ViewChild, TemplateRef, ComponentFactoryResolver, Injector } from '@angular/core';
import { ViewUtils } from '../view-utils/view-utils';
import { ComponentInfo } from '../params/component-info';
import { BsModalService } from '@farris/ui-modal';
import { ComponentConvertor } from '../convertor/convertor';
export class CommonComponentSelectorComponent {
    /**
     * @param {?} utils
     * @param {?} modalService
     * @param {?} resolver
     * @param {?} injector
     */
    constructor(utils, modalService, resolver, injector) {
        this.utils = utils;
        this.modalService = modalService;
        this.resolver = resolver;
        this.injector = injector;
        this.selectedOpUris = [];
        this.isRowSelected = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => this.selectedOpUris.indexOf(e.dataItem.uri) >= 0);
        this.confirmEmitter = new EventEmitter();
        this.closeEmitter = new EventEmitter();
    }
    /**
     * @param {?} _componentInfo
     * @return {?}
     */
    set componentInfo(_componentInfo) {
        this._componentInfo = _componentInfo;
        this.metadata = _componentInfo.metadata;
        /** @type {?} */
        let convertor = new ComponentConvertor();
        this.metadata = convertor.initFromObject(convertor.convertorToObject(_componentInfo.metadata));
        this.metadata.operations = new Array();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._componentInfo = this._componentInfo || new ComponentInfo();
    }
    /**
     * @return {?}
     */
    confirm() {
        if (!this._componentInfo.metadata || !this._componentInfo.metadata.operations) {
            if (this._componentInfo.metadata.operations.length <= 0) {
                this.utils.showInfo('没有可选的构件操作', 'info', '', 1500);
                return;
            }
        }
        if (!this.metadata.operations || this.metadata.operations.length <= 0) {
            this.utils.showInfo('请选择构件操作', 'info', '', 1500);
            return;
        }
        if (this.dialog) {
            this.dialog.close();
        }
        this.confirmEmitter.emit(this.metadata);
    }
    /**
     * @return {?}
     */
    close() {
        if (this.dialog) {
            this.dialog.close();
        }
        this.closeEmitter.emit();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    cellClickHandler($event) {
        this.selectedOpUris = [$event.dataItem.uri];
        this.metadata.operations = [$event.dataItem];
    }
}
CommonComponentSelectorComponent.decorators = [
    { type: Component, args: [{
                selector: 'common-component-selector',
                template: "<div class=\"d-flex\" style=\"position: absolute;top: 0;bottom: 0;left: 0;right: 0;min-width: 300px;\">\n    <kendo-grid class=\"f-utils-flex-column\" style=\"flex:1 1 auto;padding: 0px 8px 0px 8px;\" [data]=\"_componentInfo?.metadata?.operations\"\n        [selectable]=\"{enabled: true, checkboxOnly: false,mode:'single' }\" [kendoGridSelectBy]=\"'uri'\" (cellClick)=\"cellClickHandler($event)\"\n        [rowSelected]=\"isRowSelected\">\n        <kendo-grid-column field=\"code\" title=\"\u64CD\u4F5C\u7F16\u53F7\"></kendo-grid-column>\n        <kendo-grid-column field=\"name\" title=\"\u64CD\u4F5C\u540D\u79F0\"></kendo-grid-column>\n        <!-- <kendo-grid-column width=\"100\" title=\"\u53C2\u6570\u4FE1\u606F\">\n            <ng-template kendoGridCellTemplate let-dataItem>\n                <span style=\"float:left;font-size: 14px;color: #1890ff;cursor: pointer;\" (click)=\"view(dataItem)\">\u67E5\u770B<span\n                        class=\"f-icon f-accordion-collapse\"></span></span>\n            </ng-template>\n        </kendo-grid-column> -->\n    </kendo-grid>\n</div>\n\n<ng-template #btnRef>\n    <div style=\"width: 100%;line-height: 50px; text-align: center;min-width: 140px;\">\n        <button class=\"btn btn-secondary\" (click)=\"close()\" style=\"float:right;margin-right: 5px\">\u53D6\u6D88</button>\n        <button class=\"btn btn-primary\" (click)=confirm() style=\"float:right;margin-right: 5px\">\u786E\u5B9A</button>\n    </div>\n</ng-template>",
                styles: [""]
            }] }
];
/** @nocollapse */
CommonComponentSelectorComponent.ctorParameters = () => [
    { type: ViewUtils },
    { type: BsModalService },
    { type: ComponentFactoryResolver },
    { type: Injector }
];
CommonComponentSelectorComponent.propDecorators = {
    componentInfo: [{ type: Input }],
    btnRef: [{ type: ViewChild, args: ['btnRef',] }],
    confirmEmitter: [{ type: Output }],
    closeEmitter: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    CommonComponentSelectorComponent.prototype._componentInfo;
    /** @type {?} */
    CommonComponentSelectorComponent.prototype.dialog;
    /** @type {?} */
    CommonComponentSelectorComponent.prototype.metadata;
    /** @type {?} */
    CommonComponentSelectorComponent.prototype.selectedOpUris;
    /** @type {?} */
    CommonComponentSelectorComponent.prototype.isRowSelected;
    /** @type {?} */
    CommonComponentSelectorComponent.prototype.btnRef;
    /** @type {?} */
    CommonComponentSelectorComponent.prototype.confirmEmitter;
    /** @type {?} */
    CommonComponentSelectorComponent.prototype.closeEmitter;
    /**
     * @type {?}
     * @private
     */
    CommonComponentSelectorComponent.prototype.utils;
    /**
     * @type {?}
     * @private
     */
    CommonComponentSelectorComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    CommonComponentSelectorComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    CommonComponentSelectorComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLWNvbXBvbmVudC1zZWxlY3Rvci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLWNtcC9jY21wLXVpLyIsInNvdXJjZXMiOlsibGliL2NjbXAtc2VsZWN0b3IvY29tbW9uLWNvbXBvbmVudC1zZWxlY3Rvci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSx3QkFBd0IsRUFBRSxRQUFRLEVBQWdCLE1BQU0sZUFBZSxDQUFDO0FBRXpKLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDekQsT0FBTyxFQUFjLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRTlELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBUTVELE1BQU0sT0FBTyxnQ0FBZ0M7Ozs7Ozs7SUEyQnpDLFlBQW9CLEtBQWdCLEVBQVUsWUFBNEIsRUFBUyxRQUFrQyxFQUFVLFFBQWtCO1FBQTdILFVBQUssR0FBTCxLQUFLLENBQVc7UUFBVSxpQkFBWSxHQUFaLFlBQVksQ0FBZ0I7UUFBUyxhQUFRLEdBQVIsUUFBUSxDQUEwQjtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVU7UUFWakosbUJBQWMsR0FBYSxFQUFFLENBQUM7UUFFOUIsa0JBQWE7Ozs7UUFBRyxDQUFDLENBQVUsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUM7UUFJdkUsbUJBQWMsR0FBK0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUVoRSxpQkFBWSxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO0lBRXNGLENBQUM7Ozs7O0lBdkJ0SixJQUFhLGFBQWEsQ0FBQyxjQUE2QjtRQUNwRCxJQUFJLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQztRQUNyQyxJQUFJLENBQUMsUUFBUSxHQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUM7O1lBRWxDLFNBQVMsR0FBRyxJQUFJLGtCQUFrQixFQUFFO1FBQ3hDLElBQUksQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDL0YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEdBQUcsSUFBSSxLQUFLLEVBQWEsQ0FBQztJQUN0RCxDQUFDOzs7O0lBa0JELFFBQVE7UUFDSixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxjQUFjLElBQUksSUFBSSxhQUFhLEVBQUUsQ0FBQztJQUNyRSxDQUFDOzs7O0lBRUQsT0FBTztRQUNILElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRTtZQUMzRSxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO2dCQUNyRCxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFDbkQsT0FBTzthQUNWO1NBQ0o7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtZQUNuRSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNqRCxPQUFPO1NBQ1Y7UUFDRCxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDYixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ3ZCO1FBQ0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzVDLENBQUM7Ozs7SUFFRCxLQUFLO1FBQ0QsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUN2QjtRQUNELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDN0IsQ0FBQzs7Ozs7SUFHRCxnQkFBZ0IsQ0FBQyxNQUFzQjtRQUNuQyxJQUFJLENBQUMsY0FBYyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNqRCxDQUFDOzs7WUFsRUosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSwyQkFBMkI7Z0JBQ3JDLGs5Q0FBeUQ7O2FBRTVEOzs7O1lBWFEsU0FBUztZQUVHLGNBQWM7WUFKOEMsd0JBQXdCO1lBQUUsUUFBUTs7OzRCQWtCOUcsS0FBSztxQkFpQkwsU0FBUyxTQUFDLFFBQVE7NkJBRWxCLE1BQU07MkJBRU4sTUFBTTs7OztJQXZCUCwwREFBOEI7O0lBVzlCLGtEQUFtQjs7SUFFbkIsb0RBQXVCOztJQUV2QiwwREFBOEI7O0lBRTlCLHlEQUFpRjs7SUFFakYsa0RBQThDOztJQUU5QywwREFBMEU7O0lBRTFFLHdEQUErRDs7Ozs7SUFFbkQsaURBQXdCOzs7OztJQUFFLHdEQUFvQzs7Ozs7SUFBQyxvREFBMEM7Ozs7O0lBQUUsb0RBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBFdmVudEVtaXR0ZXIsIE91dHB1dCwgVmlld0NoaWxkLCBUZW1wbGF0ZVJlZiwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBJbmplY3RvciwgQ29tcG9uZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEdzcENvbXBvbmVudCB9IGZyb20gJ0Bnc3AtY21wL2NvbW1vbi1jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBWaWV3VXRpbHMgfSBmcm9tICcuLi92aWV3LXV0aWxzL3ZpZXctdXRpbHMnO1xyXG5pbXBvcnQgeyBDb21wb25lbnRJbmZvIH0gZnJvbSAnLi4vcGFyYW1zL2NvbXBvbmVudC1pbmZvJztcclxuaW1wb3J0IHsgQnNNb2RhbFJlZiwgQnNNb2RhbFNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLW1vZGFsJztcclxuaW1wb3J0IHsgUm93QXJncywgQ2VsbENsaWNrRXZlbnQgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1ncmlkJztcclxuaW1wb3J0IHsgQ29tcG9uZW50Q29udmVydG9yIH0gZnJvbSAnLi4vY29udmVydG9yL2NvbnZlcnRvcic7XHJcbmltcG9ydCB7IE9wZXJhdGlvbiwgU3RydWN0dXJlZFR5cGUgfSBmcm9tICdAZWNwLWNhZi9jb21tb24tc3RydWN0dXJlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdjb21tb24tY29tcG9uZW50LXNlbGVjdG9yJyxcclxuICAgIHRlbXBsYXRlVXJsOiAnLi9jb21tb24tY29tcG9uZW50LXNlbGVjdG9yLmNvbXBvbmVudC5odG1sJyxcclxuICAgIHN0eWxlVXJsczogWycuL2NvbW1vbi1jb21wb25lbnQtc2VsZWN0b3IuY29tcG9uZW50LmNzcyddXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDb21tb25Db21wb25lbnRTZWxlY3RvckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gICAgX2NvbXBvbmVudEluZm86IENvbXBvbmVudEluZm87XHJcblxyXG4gICAgQElucHV0KCkgc2V0IGNvbXBvbmVudEluZm8oX2NvbXBvbmVudEluZm86IENvbXBvbmVudEluZm8pIHtcclxuICAgICAgICB0aGlzLl9jb21wb25lbnRJbmZvID0gX2NvbXBvbmVudEluZm87XHJcbiAgICAgICAgdGhpcy5tZXRhZGF0YT1fY29tcG9uZW50SW5mby5tZXRhZGF0YTtcclxuXHJcbiAgICAgICAgbGV0IGNvbnZlcnRvciA9IG5ldyBDb21wb25lbnRDb252ZXJ0b3IoKTtcclxuICAgICAgICB0aGlzLm1ldGFkYXRhID0gY29udmVydG9yLmluaXRGcm9tT2JqZWN0KGNvbnZlcnRvci5jb252ZXJ0b3JUb09iamVjdChfY29tcG9uZW50SW5mby5tZXRhZGF0YSkpO1xyXG4gICAgICAgIHRoaXMubWV0YWRhdGEub3BlcmF0aW9ucyA9IG5ldyBBcnJheTxPcGVyYXRpb24+KCk7XHJcbiAgICB9XHJcblxyXG4gICAgZGlhbG9nOiBCc01vZGFsUmVmO1xyXG5cclxuICAgIG1ldGFkYXRhOiBHc3BDb21wb25lbnQ7XHJcblxyXG4gICAgc2VsZWN0ZWRPcFVyaXM6IHN0cmluZ1tdID0gW107XHJcblxyXG4gICAgaXNSb3dTZWxlY3RlZCA9IChlOiBSb3dBcmdzKSA9PiB0aGlzLnNlbGVjdGVkT3BVcmlzLmluZGV4T2YoZS5kYXRhSXRlbS51cmkpID49IDA7XHJcblxyXG4gICAgQFZpZXdDaGlsZCgnYnRuUmVmJykgYnRuUmVmOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG5cclxuICAgIEBPdXRwdXQoKSBjb25maXJtRW1pdHRlcjogRXZlbnRFbWl0dGVyPEdzcENvbXBvbmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgQE91dHB1dCgpIGNsb3NlRW1pdHRlcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSB1dGlsczogVmlld1V0aWxzLCBwcml2YXRlIG1vZGFsU2VydmljZTogQnNNb2RhbFNlcnZpY2UscHJpdmF0ZSByZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcikgeyB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5fY29tcG9uZW50SW5mbyA9IHRoaXMuX2NvbXBvbmVudEluZm8gfHwgbmV3IENvbXBvbmVudEluZm8oKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25maXJtKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5fY29tcG9uZW50SW5mby5tZXRhZGF0YSB8fCAhdGhpcy5fY29tcG9uZW50SW5mby5tZXRhZGF0YS5vcGVyYXRpb25zKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9jb21wb25lbnRJbmZvLm1ldGFkYXRhLm9wZXJhdGlvbnMubGVuZ3RoIDw9IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudXRpbHMuc2hvd0luZm8oJ+ayoeacieWPr+mAieeahOaehOS7tuaTjeS9nCcsICdpbmZvJywgJycsIDE1MDApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5tZXRhZGF0YS5vcGVyYXRpb25zIHx8IHRoaXMubWV0YWRhdGEub3BlcmF0aW9ucy5sZW5ndGggPD0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLnV0aWxzLnNob3dJbmZvKCfor7fpgInmi6nmnoTku7bmk43kvZwnLCAnaW5mbycsICcnLCAxNTAwKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5kaWFsb2cpIHtcclxuICAgICAgICAgICAgdGhpcy5kaWFsb2cuY2xvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb25maXJtRW1pdHRlci5lbWl0KHRoaXMubWV0YWRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb3NlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmRpYWxvZykge1xyXG4gICAgICAgICAgICB0aGlzLmRpYWxvZy5jbG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNsb3NlRW1pdHRlci5lbWl0KCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGNlbGxDbGlja0hhbmRsZXIoJGV2ZW50OiBDZWxsQ2xpY2tFdmVudCkge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRPcFVyaXMgPSBbJGV2ZW50LmRhdGFJdGVtLnVyaV07XHJcbiAgICAgICAgdGhpcy5tZXRhZGF0YS5vcGVyYXRpb25zID0gWyRldmVudC5kYXRhSXRlbV07XHJcbiAgICB9XHJcbn1cclxuIl19