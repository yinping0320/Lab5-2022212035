/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector, EventEmitter, ComponentFactoryResolver } from '@angular/core';
import { CommonComponentSelectorComponent } from './ccmp-selector/common-component-selector.component';
import { ViewUtils } from './view-utils/view-utils';
import { BsModalService } from '@farris/ui-modal';
import { HttpHeaders, HttpClient } from '@angular/common/http';
import { map } from 'rxjs/operators';
import { ComponentInfo } from './params/component-info';
import * as i0 from "@angular/core";
import * as i1 from "./view-utils/view-utils";
import * as i2 from "@farris/ui-modal";
import * as i3 from "@angular/common/http";
export class CommonComponentUiDTService {
    /**
     * @param {?} resolver
     * @param {?} injector
     * @param {?} util
     * @param {?} modalService
     * @param {?} http
     */
    constructor(resolver, injector, util, modalService, http) {
        this.resolver = resolver;
        this.injector = injector;
        this.util = util;
        this.modalService = modalService;
        this.http = http;
    }
    /**
     * 通用构件操作选择器
     * @param {?} metadataId 通用构件元数据
     * @param {?} sessionId 功能sessionId
     * @param {?=} options UI可选配置参数
     * @return {?}
     */
    openSelector(metadataId, sessionId, options) {
        return this.getComponentInfo(metadataId, sessionId).pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data.obselete) {
                this.util.showObseleteDialog(data);
                return { confirmEvent: new EventEmitter(), closeEvent: new EventEmitter() };
            }
            else {
                return this.create(data, options);
            }
        })));
    }
    /**
     * 获取构件信息
     * @param {?} metadataId 构件元数据ID
     * @param {?} sessionId 功能sessionid
     * @return {?}
     */
    getComponentInfo(metadataId, sessionId) {
        /** @type {?} */
        let headers = new HttpHeaders();
        headers.set("sessionId", sessionId);
        /** @type {?} */
        let url = `/api/dev/main/v1.0/common-component/component-info/${metadataId}`;
        return this.http.get(url, { headers: headers }).pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            if (data) {
                /** @type {?} */
                let cmpInfo = new ComponentInfo();
                cmpInfo.init(data);
                return cmpInfo;
            }
        })));
    }
    /**
     * @private
     * @param {?} componentInfo
     * @param {?} options
     * @return {?}
     */
    create(componentInfo, options) {
        /** @type {?} */
        let fac = this.resolver.resolveComponentFactory(CommonComponentSelectorComponent);
        /** @type {?} */
        let cmpRef = fac.create(this.injector);
        cmpRef.instance.componentInfo = componentInfo;
        /** @type {?} */
        let modalConfig = this.util.getModalConfig(cmpRef.instance.btnRef, options);
        /** @type {?} */
        let dialog = this.modalService.show(cmpRef, modalConfig);
        cmpRef.instance.dialog = dialog;
        return { confirmEvent: cmpRef.instance.confirmEmitter, closeEvent: cmpRef.instance.closeEmitter };
    }
}
CommonComponentUiDTService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
CommonComponentUiDTService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: ViewUtils },
    { type: BsModalService },
    { type: HttpClient }
];
/** @nocollapse */ CommonComponentUiDTService.ngInjectableDef = i0.defineInjectable({ factory: function CommonComponentUiDTService_Factory() { return new CommonComponentUiDTService(i0.inject(i0.ComponentFactoryResolver), i0.inject(i0.INJECTOR), i0.inject(i1.ViewUtils), i0.inject(i2.BsModalService), i0.inject(i3.HttpClient)); }, token: CommonComponentUiDTService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    CommonComponentUiDTService.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    CommonComponentUiDTService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    CommonComponentUiDTService.prototype.util;
    /**
     * @type {?}
     * @private
     */
    CommonComponentUiDTService.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    CommonComponentUiDTService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2NtcC11aS5kdC1zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1jbXAvY2NtcC11aS8iLCJzb3VyY2VzIjpbImxpYi9jY21wLXVpLmR0LXNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RixPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSxxREFBcUQsQ0FBQztBQUN2RyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWxELE9BQU8sRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFL0QsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQzs7Ozs7QUFLeEQsTUFBTSxPQUFPLDBCQUEwQjs7Ozs7Ozs7SUFFbkMsWUFBb0IsUUFBa0MsRUFBVSxRQUFrQixFQUN0RSxJQUFlLEVBQVUsWUFBNEIsRUFBVSxJQUFnQjtRQUR2RSxhQUFRLEdBQVIsUUFBUSxDQUEwQjtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDdEUsU0FBSSxHQUFKLElBQUksQ0FBVztRQUFVLGlCQUFZLEdBQVosWUFBWSxDQUFnQjtRQUFVLFNBQUksR0FBSixJQUFJLENBQVk7SUFBSSxDQUFDOzs7Ozs7OztJQVF6RixZQUFZLENBQUMsVUFBa0IsRUFBRSxTQUFpQixFQUFFLE9BQWlCO1FBQ3hFLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRzs7OztRQUN4RCxDQUFDLElBQW1CLEVBQUUsRUFBRTtZQUNwQixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2YsSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDbkMsT0FBTyxFQUFFLFlBQVksRUFBRSxJQUFJLFlBQVksRUFBTyxFQUFFLFVBQVUsRUFBRSxJQUFJLFlBQVksRUFBTyxFQUFFLENBQUM7YUFDekY7aUJBQ0k7Z0JBQ0QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQzthQUNyQztRQUNMLENBQUMsRUFBQyxDQUNMLENBQUE7SUFDTCxDQUFDOzs7Ozs7O0lBT00sZ0JBQWdCLENBQUMsVUFBa0IsRUFBRSxTQUFpQjs7WUFDckQsT0FBTyxHQUFHLElBQUksV0FBVyxFQUFFO1FBQy9CLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDOztZQUNoQyxHQUFHLEdBQUcsc0RBQXNELFVBQVUsRUFBRTtRQUM1RSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHOzs7O1FBQUMsSUFBSSxDQUFDLEVBQUU7WUFDNUQsSUFBSSxJQUFJLEVBQUU7O29CQUNGLE9BQU8sR0FBRyxJQUFJLGFBQWEsRUFBRTtnQkFDakMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDbkIsT0FBTyxPQUFPLENBQUM7YUFDbEI7UUFDTCxDQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQ1IsQ0FBQzs7Ozs7OztJQUVPLE1BQU0sQ0FBQyxhQUE0QixFQUFFLE9BQWdCOztZQUNyRCxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBQyxnQ0FBZ0MsQ0FBQzs7WUFDN0UsTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUN0QyxNQUFNLENBQUMsUUFBUSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7O1lBQzFDLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUM7O1lBQ3ZFLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDO1FBQ3hELE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNoQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFLFVBQVUsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3RHLENBQUM7OztZQXRESixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7Ozs7WUFiNEMsd0JBQXdCO1lBQWhELFFBQVE7WUFFcEIsU0FBUztZQUNULGNBQWM7WUFFRCxVQUFVOzs7Ozs7OztJQVdoQiw4Q0FBMEM7Ozs7O0lBQUUsOENBQTBCOzs7OztJQUM5RSwwQ0FBdUI7Ozs7O0lBQUUsa0RBQW9DOzs7OztJQUFFLDBDQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yLCBFdmVudEVtaXR0ZXIsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb21tb25Db21wb25lbnRTZWxlY3RvckNvbXBvbmVudCB9IGZyb20gJy4vY2NtcC1zZWxlY3Rvci9jb21tb24tY29tcG9uZW50LXNlbGVjdG9yLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFZpZXdVdGlscyB9IGZyb20gJy4vdmlldy11dGlscy92aWV3LXV0aWxzJztcclxuaW1wb3J0IHsgQnNNb2RhbFNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLW1vZGFsJztcclxuaW1wb3J0IHsgT3B0aW9ucyB9IGZyb20gJy4vcGFyYW1zL29wdGlvbnMnO1xyXG5pbXBvcnQgeyBIdHRwSGVhZGVycywgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IFNlbGVjdG9yUmVzdWx0IH0gZnJvbSAnLi9wYXJhbXMvc2VsZWN0b3ItcmVzdWx0JztcclxuaW1wb3J0IHsgQ29tcG9uZW50SW5mbyB9IGZyb20gJy4vcGFyYW1zL2NvbXBvbmVudC1pbmZvJztcclxuXHJcbkBJbmplY3RhYmxlKHtcclxuICAgIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgQ29tbW9uQ29tcG9uZW50VWlEVFNlcnZpY2Uge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsXHJcbiAgICAgICAgcHJpdmF0ZSB1dGlsOiBWaWV3VXRpbHMsIHByaXZhdGUgbW9kYWxTZXJ2aWNlOiBCc01vZGFsU2VydmljZSwgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50KSB7IH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOmAmueUqOaehOS7tuaTjeS9nOmAieaLqeWZqFxyXG4gICAgICogQHBhcmFtIG1ldGFkYXRhSWQg6YCa55So5p6E5Lu25YWD5pWw5o2uXHJcbiAgICAgKiBAcGFyYW0gc2Vzc2lvbklkIOWKn+iDvXNlc3Npb25JZFxyXG4gICAgICogQHBhcmFtIG9wdGlvbnMgVUnlj6/pgInphY3nva7lj4LmlbBcclxuICAgICAqL1xyXG4gICAgcHVibGljIG9wZW5TZWxlY3RvcihtZXRhZGF0YUlkOiBzdHJpbmcsIHNlc3Npb25JZDogc3RyaW5nLCBvcHRpb25zPzogT3B0aW9ucyk6IE9ic2VydmFibGU8U2VsZWN0b3JSZXN1bHQ+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRDb21wb25lbnRJbmZvKG1ldGFkYXRhSWQsIHNlc3Npb25JZCkucGlwZShtYXAoXHJcbiAgICAgICAgICAgIChkYXRhOiBDb21wb25lbnRJbmZvKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5vYnNlbGV0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXRpbC5zaG93T2JzZWxldGVEaWFsb2coZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgY29uZmlybUV2ZW50OiBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKSwgY2xvc2VFdmVudDogbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCkgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZShkYXRhLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICApXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bmnoTku7bkv6Hmga9cclxuICAgICAqIEBwYXJhbSBtZXRhZGF0YUlkIOaehOS7tuWFg+aVsOaNrklEXHJcbiAgICAgKiBAcGFyYW0gc2Vzc2lvbklkIOWKn+iDvXNlc3Npb25pZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0Q29tcG9uZW50SW5mbyhtZXRhZGF0YUlkOiBzdHJpbmcsIHNlc3Npb25JZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgICAgICBsZXQgaGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycygpO1xyXG4gICAgICAgIGhlYWRlcnMuc2V0KFwic2Vzc2lvbklkXCIsIHNlc3Npb25JZCk7XHJcbiAgICAgICAgbGV0IHVybCA9IGAvYXBpL2Rldi9tYWluL3YxLjAvY29tbW9uLWNvbXBvbmVudC9jb21wb25lbnQtaW5mby8ke21ldGFkYXRhSWR9YDtcclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldCh1cmwsIHsgaGVhZGVyczogaGVhZGVycyB9KS5waXBlKG1hcChkYXRhID0+IHtcclxuICAgICAgICAgICAgaWYgKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGxldCBjbXBJbmZvID0gbmV3IENvbXBvbmVudEluZm8oKTtcclxuICAgICAgICAgICAgICAgIGNtcEluZm8uaW5pdChkYXRhKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjbXBJbmZvO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY3JlYXRlKGNvbXBvbmVudEluZm86IENvbXBvbmVudEluZm8sIG9wdGlvbnM6IE9wdGlvbnMpOiBTZWxlY3RvclJlc3VsdCB7XHJcbiAgICAgICAgbGV0IGZhYyA9IHRoaXMucmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoQ29tbW9uQ29tcG9uZW50U2VsZWN0b3JDb21wb25lbnQpO1xyXG4gICAgICAgIGxldCBjbXBSZWYgPSBmYWMuY3JlYXRlKHRoaXMuaW5qZWN0b3IpO1xyXG4gICAgICAgIGNtcFJlZi5pbnN0YW5jZS5jb21wb25lbnRJbmZvID0gY29tcG9uZW50SW5mbztcclxuICAgICAgICBsZXQgbW9kYWxDb25maWcgPSB0aGlzLnV0aWwuZ2V0TW9kYWxDb25maWcoY21wUmVmLmluc3RhbmNlLmJ0blJlZiwgb3B0aW9ucyk7XHJcbiAgICAgICAgbGV0IGRpYWxvZyA9IHRoaXMubW9kYWxTZXJ2aWNlLnNob3coY21wUmVmLCBtb2RhbENvbmZpZyk7XHJcbiAgICAgICAgY21wUmVmLmluc3RhbmNlLmRpYWxvZyA9IGRpYWxvZztcclxuICAgICAgICByZXR1cm4geyBjb25maXJtRXZlbnQ6IGNtcFJlZi5pbnN0YW5jZS5jb25maXJtRW1pdHRlciwgY2xvc2VFdmVudDogY21wUmVmLmluc3RhbmNlLmNsb3NlRW1pdHRlciB9O1xyXG4gICAgfVxyXG59XHJcbiJdfQ==