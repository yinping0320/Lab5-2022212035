import { GspComponent, DefaultGspComponentSerializeContext, GspComponentConvertor } from '@gsp-cmp/common-component';
import { CommonModule } from '@angular/common';
import { ButtonsModule } from '@progress/kendo-angular-buttons';
import { GridModule } from '@progress/kendo-angular-grid';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { MessagerService, MessagerModule } from '@farris/ui-messager';
import { NotifyService, NotifyModule } from '@farris/ui-notify';
import { Injectable, NgModule, Injector, EventEmitter, ComponentFactoryResolver, Component, Input, Output, ViewChild, defineInjectable, inject, INJECTOR } from '@angular/core';
import { BsModalService, ModalModule } from '@farris/ui-modal';
import { HttpHeaders, HttpClient, HttpClientModule } from '@angular/common/http';
import { map } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ViewUtils = /** @class */ (function () {
    function ViewUtils(messagerService, notify) {
        this.messagerService = messagerService;
        this.notify = notify;
    }
    /**
     * 获取模态框配置信息
     * @param btnRef 按钮模板引用
     * @param title 模态框标题
     * @param options 配置项，暂未使用
     */
    /**
     * 获取模态框配置信息
     * @param {?} btnRef 按钮模板引用
     * @param {?=} options 配置项，暂未使用
     * @return {?}
     */
    ViewUtils.prototype.getModalConfig = /**
     * 获取模态框配置信息
     * @param {?} btnRef 按钮模板引用
     * @param {?=} options 配置项，暂未使用
     * @return {?}
     */
    function (btnRef, options) {
        return {
            title: (options && options.title) ? options.title : '操作列表',
            width: (options && options.width) ? options.width : 450,
            height: (options && options.height) ? options.width : 500,
            resizable: (options && options.resizable) ? options.resizable : true,
            showButtons: true,
            showMaxButton: false,
            enableScroll: false,
            buttons: btnRef
        };
    };
    /**
     * @param {?} data
     * @return {?}
     */
    ViewUtils.prototype.showObseleteDialog = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.messagerService.show('warning', "\u901A\u7528\u6784\u4EF6" + data.code + "\u5DF2\u8FC7\u65F6\uFF01\n                    \u5347\u7EA7\u6B65\u9AA4\uFF1A\n                    1. \u91CD\u65B0\u5B9A\u4E49\u901A\u7528\u6784\u4EF6\u5143\u6570\u636E;\n                    2. \u5F00\u53D1\u65B0\u7248\u672C\u6784\u4EF6\u4EE3\u7801\u3002\n                    \u8BF7\u53C2\u8003GSPCloud\u5F00\u53D1\u6587\u6863->\u9AD8\u7EA7\u5F00\u53D1->\u6784\u4EF6\u5F00\u53D1->\u901A\u7528\u6784\u4EF6\u5F00\u53D1", { safeHtml: false });
    };
    /**
     * @param {?} message
     * @param {?} infoType
     * @param {?} title
     * @param {?} timeout
     * @return {?}
     */
    ViewUtils.prototype.showInfo = /**
     * @param {?} message
     * @param {?} infoType
     * @param {?} title
     * @param {?} timeout
     * @return {?}
     */
    function (message, infoType, title, timeout) {
        this.notify.config.position = 'top-center';
        if (infoType == 'success') {
            this.notify.success((/** @type {?} */ ({ title: title, msg: message, timeout: timeout })));
        }
        else if (infoType == 'info') {
            this.notify.info((/** @type {?} */ ({ title: title, msg: message, timeout: timeout })));
        }
        else if (infoType == 'warning') {
            this.notify.warning((/** @type {?} */ ({ title: title, msg: message, timeout: timeout })));
        }
        else if (infoType == 'error') {
            this.notify.error((/** @type {?} */ ({ title: title, msg: message, timeout: timeout })));
        }
    };
    ViewUtils.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ViewUtils.ctorParameters = function () { return [
        { type: MessagerService },
        { type: NotifyService }
    ]; };
    /** @nocollapse */ ViewUtils.ngInjectableDef = defineInjectable({ factory: function ViewUtils_Factory() { return new ViewUtils(inject(MessagerService), inject(NotifyService)); }, token: ViewUtils, providedIn: "root" });
    return ViewUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ComponentConvertor = /** @class */ (function () {
    function ComponentConvertor() {
    }
    /**
     * @param {?} entity
     * @return {?}
     */
    ComponentConvertor.prototype.convertorToObject = /**
     * @param {?} entity
     * @return {?}
     */
    function (entity) {
        /** @type {?} */
        var covertor = new GspComponentConvertor();
        /** @type {?} */
        var obj = new Object();
        covertor.convertToObject(obj, entity, new DefaultGspComponentSerializeContext());
        return obj;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    ComponentConvertor.prototype.initFromObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var covertor = new GspComponentConvertor();
        /** @type {?} */
        var entity = new GspComponent();
        covertor.initFromObject(entity, obj, new DefaultGspComponentSerializeContext());
        return entity;
    };
    return ComponentConvertor;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ComponentInfo = /** @class */ (function () {
    function ComponentInfo() {
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    ComponentInfo.prototype.init = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        this.id = obj['id'];
        this.obselete = obj['obselete'];
        this.code = obj['code'];
        this.name = obj['name'];
        this.nameSpace = obj['nameSpace'];
        this.fileName = obj['fileName'];
        this.type = obj['type'];
        this.bizobjectID = obj['bizobjectID'];
        this.language = obj['language'];
        if (obj['metadata']) {
            /** @type {?} */
            var convertor = new ComponentConvertor();
            this.metadata = convertor.initFromObject(obj['metadata']);
        }
    };
    return ComponentInfo;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CommonComponentSelectorComponent = /** @class */ (function () {
    function CommonComponentSelectorComponent(utils, modalService, resolver, injector) {
        var _this = this;
        this.utils = utils;
        this.modalService = modalService;
        this.resolver = resolver;
        this.injector = injector;
        this.selectedOpUris = [];
        this.isRowSelected = (/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return _this.selectedOpUris.indexOf(e.dataItem.uri) >= 0; });
        this.confirmEmitter = new EventEmitter();
        this.closeEmitter = new EventEmitter();
    }
    Object.defineProperty(CommonComponentSelectorComponent.prototype, "componentInfo", {
        set: /**
         * @param {?} _componentInfo
         * @return {?}
         */
        function (_componentInfo) {
            this._componentInfo = _componentInfo;
            this.metadata = _componentInfo.metadata;
            /** @type {?} */
            var convertor = new ComponentConvertor();
            this.metadata = convertor.initFromObject(convertor.convertorToObject(_componentInfo.metadata));
            this.metadata.operations = new Array();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    CommonComponentSelectorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this._componentInfo = this._componentInfo || new ComponentInfo();
    };
    /**
     * @return {?}
     */
    CommonComponentSelectorComponent.prototype.confirm = /**
     * @return {?}
     */
    function () {
        if (!this._componentInfo.metadata || !this._componentInfo.metadata.operations) {
            if (this._componentInfo.metadata.operations.length <= 0) {
                this.utils.showInfo('没有可选的构件操作', 'info', '', 1500);
                return;
            }
        }
        if (!this.metadata.operations || this.metadata.operations.length <= 0) {
            this.utils.showInfo('请选择构件操作', 'info', '', 1500);
            return;
        }
        if (this.dialog) {
            this.dialog.close();
        }
        this.confirmEmitter.emit(this.metadata);
    };
    /**
     * @return {?}
     */
    CommonComponentSelectorComponent.prototype.close = /**
     * @return {?}
     */
    function () {
        if (this.dialog) {
            this.dialog.close();
        }
        this.closeEmitter.emit();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    CommonComponentSelectorComponent.prototype.cellClickHandler = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.selectedOpUris = [$event.dataItem.uri];
        this.metadata.operations = [$event.dataItem];
    };
    CommonComponentSelectorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'common-component-selector',
                    template: "<div class=\"d-flex\" style=\"position: absolute;top: 0;bottom: 0;left: 0;right: 0;min-width: 300px;\">\n    <kendo-grid class=\"f-utils-flex-column\" style=\"flex:1 1 auto;padding: 0px 8px 0px 8px;\" [data]=\"_componentInfo?.metadata?.operations\"\n        [selectable]=\"{enabled: true, checkboxOnly: false,mode:'single' }\" [kendoGridSelectBy]=\"'uri'\" (cellClick)=\"cellClickHandler($event)\"\n        [rowSelected]=\"isRowSelected\">\n        <kendo-grid-column field=\"code\" title=\"\u64CD\u4F5C\u7F16\u53F7\"></kendo-grid-column>\n        <kendo-grid-column field=\"name\" title=\"\u64CD\u4F5C\u540D\u79F0\"></kendo-grid-column>\n        <!-- <kendo-grid-column width=\"100\" title=\"\u53C2\u6570\u4FE1\u606F\">\n            <ng-template kendoGridCellTemplate let-dataItem>\n                <span style=\"float:left;font-size: 14px;color: #1890ff;cursor: pointer;\" (click)=\"view(dataItem)\">\u67E5\u770B<span\n                        class=\"f-icon f-accordion-collapse\"></span></span>\n            </ng-template>\n        </kendo-grid-column> -->\n    </kendo-grid>\n</div>\n\n<ng-template #btnRef>\n    <div style=\"width: 100%;line-height: 50px; text-align: center;min-width: 140px;\">\n        <button class=\"btn btn-secondary\" (click)=\"close()\" style=\"float:right;margin-right: 5px\">\u53D6\u6D88</button>\n        <button class=\"btn btn-primary\" (click)=confirm() style=\"float:right;margin-right: 5px\">\u786E\u5B9A</button>\n    </div>\n</ng-template>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    CommonComponentSelectorComponent.ctorParameters = function () { return [
        { type: ViewUtils },
        { type: BsModalService },
        { type: ComponentFactoryResolver },
        { type: Injector }
    ]; };
    CommonComponentSelectorComponent.propDecorators = {
        componentInfo: [{ type: Input }],
        btnRef: [{ type: ViewChild, args: ['btnRef',] }],
        confirmEmitter: [{ type: Output }],
        closeEmitter: [{ type: Output }]
    };
    return CommonComponentSelectorComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CommonComponentUiRTService = /** @class */ (function () {
    function CommonComponentUiRTService(resolver, injector, util, modalService, http) {
        this.resolver = resolver;
        this.injector = injector;
        this.util = util;
        this.modalService = modalService;
        this.http = http;
    }
    /**
     * 通用构件操作选择器
     * @param metadataId 通用构件元数据
     * @param sessionId 功能sessionId
     * @param options UI可选配置参数
     */
    /**
     * 通用构件操作选择器
     * @param {?} metadataId 通用构件元数据
     * @param {?} sessionId 功能sessionId
     * @param {?=} options UI可选配置参数
     * @return {?}
     */
    CommonComponentUiRTService.prototype.openSelector = /**
     * 通用构件操作选择器
     * @param {?} metadataId 通用构件元数据
     * @param {?} sessionId 功能sessionId
     * @param {?=} options UI可选配置参数
     * @return {?}
     */
    function (metadataId, sessionId, options) {
        var _this = this;
        return this.getComponentInfo(metadataId, sessionId).pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data.obselete) {
                _this.util.showObseleteDialog(data);
                return { confirmEvent: new EventEmitter(), closeEvent: new EventEmitter() };
            }
            else {
                return _this.create(data, options);
            }
        })));
    };
    /**
     * 获取构件信息
     * @param metadataId 构件元数据ID
     * @param sessionId 功能sessionid
     */
    /**
     * 获取构件信息
     * @param {?} metadataId 构件元数据ID
     * @param {?} sessionId 功能sessionid
     * @return {?}
     */
    CommonComponentUiRTService.prototype.getComponentInfo = /**
     * 获取构件信息
     * @param {?} metadataId 构件元数据ID
     * @param {?} sessionId 功能sessionid
     * @return {?}
     */
    function (metadataId, sessionId) {
        /** @type {?} */
        var headers = new HttpHeaders();
        headers.set("sessionId", sessionId);
        /** @type {?} */
        var url = "/api/runtime/sys/v1.0/common-component/component-info/" + metadataId;
        return this.http.get(url, { headers: headers }).pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                /** @type {?} */
                var cmpInfo = new ComponentInfo();
                cmpInfo.init(data);
                return cmpInfo;
            }
        })));
    };
    /**
     * @private
     * @param {?} componentInfo
     * @param {?} options
     * @return {?}
     */
    CommonComponentUiRTService.prototype.create = /**
     * @private
     * @param {?} componentInfo
     * @param {?} options
     * @return {?}
     */
    function (componentInfo, options) {
        /** @type {?} */
        var fac = this.resolver.resolveComponentFactory(CommonComponentSelectorComponent);
        /** @type {?} */
        var cmpRef = fac.create(this.injector);
        cmpRef.instance.componentInfo = componentInfo;
        /** @type {?} */
        var modalConfig = this.util.getModalConfig(cmpRef.instance.btnRef, options);
        /** @type {?} */
        var dialog = this.modalService.show(cmpRef, modalConfig);
        cmpRef.instance.dialog = dialog;
        return { confirmEvent: cmpRef.instance.confirmEmitter, closeEvent: cmpRef.instance.closeEmitter };
    };
    CommonComponentUiRTService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    CommonComponentUiRTService.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: ViewUtils },
        { type: BsModalService },
        { type: HttpClient }
    ]; };
    /** @nocollapse */ CommonComponentUiRTService.ngInjectableDef = defineInjectable({ factory: function CommonComponentUiRTService_Factory() { return new CommonComponentUiRTService(inject(ComponentFactoryResolver), inject(INJECTOR), inject(ViewUtils), inject(BsModalService), inject(HttpClient)); }, token: CommonComponentUiRTService, providedIn: "root" });
    return CommonComponentUiRTService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CommonComponentUiDTService = /** @class */ (function () {
    function CommonComponentUiDTService(resolver, injector, util, modalService, http) {
        this.resolver = resolver;
        this.injector = injector;
        this.util = util;
        this.modalService = modalService;
        this.http = http;
    }
    /**
     * 通用构件操作选择器
     * @param metadataId 通用构件元数据
     * @param sessionId 功能sessionId
     * @param options UI可选配置参数
     */
    /**
     * 通用构件操作选择器
     * @param {?} metadataId 通用构件元数据
     * @param {?} sessionId 功能sessionId
     * @param {?=} options UI可选配置参数
     * @return {?}
     */
    CommonComponentUiDTService.prototype.openSelector = /**
     * 通用构件操作选择器
     * @param {?} metadataId 通用构件元数据
     * @param {?} sessionId 功能sessionId
     * @param {?=} options UI可选配置参数
     * @return {?}
     */
    function (metadataId, sessionId, options) {
        var _this = this;
        return this.getComponentInfo(metadataId, sessionId).pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data.obselete) {
                _this.util.showObseleteDialog(data);
                return { confirmEvent: new EventEmitter(), closeEvent: new EventEmitter() };
            }
            else {
                return _this.create(data, options);
            }
        })));
    };
    /**
     * 获取构件信息
     * @param metadataId 构件元数据ID
     * @param sessionId 功能sessionid
     */
    /**
     * 获取构件信息
     * @param {?} metadataId 构件元数据ID
     * @param {?} sessionId 功能sessionid
     * @return {?}
     */
    CommonComponentUiDTService.prototype.getComponentInfo = /**
     * 获取构件信息
     * @param {?} metadataId 构件元数据ID
     * @param {?} sessionId 功能sessionid
     * @return {?}
     */
    function (metadataId, sessionId) {
        /** @type {?} */
        var headers = new HttpHeaders();
        headers.set("sessionId", sessionId);
        /** @type {?} */
        var url = "/api/dev/main/v1.0/common-component/component-info/" + metadataId;
        return this.http.get(url, { headers: headers }).pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                /** @type {?} */
                var cmpInfo = new ComponentInfo();
                cmpInfo.init(data);
                return cmpInfo;
            }
        })));
    };
    /**
     * @private
     * @param {?} componentInfo
     * @param {?} options
     * @return {?}
     */
    CommonComponentUiDTService.prototype.create = /**
     * @private
     * @param {?} componentInfo
     * @param {?} options
     * @return {?}
     */
    function (componentInfo, options) {
        /** @type {?} */
        var fac = this.resolver.resolveComponentFactory(CommonComponentSelectorComponent);
        /** @type {?} */
        var cmpRef = fac.create(this.injector);
        cmpRef.instance.componentInfo = componentInfo;
        /** @type {?} */
        var modalConfig = this.util.getModalConfig(cmpRef.instance.btnRef, options);
        /** @type {?} */
        var dialog = this.modalService.show(cmpRef, modalConfig);
        cmpRef.instance.dialog = dialog;
        return { confirmEvent: cmpRef.instance.confirmEmitter, closeEvent: cmpRef.instance.closeEmitter };
    };
    CommonComponentUiDTService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    CommonComponentUiDTService.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: ViewUtils },
        { type: BsModalService },
        { type: HttpClient }
    ]; };
    /** @nocollapse */ CommonComponentUiDTService.ngInjectableDef = defineInjectable({ factory: function CommonComponentUiDTService_Factory() { return new CommonComponentUiDTService(inject(ComponentFactoryResolver), inject(INJECTOR), inject(ViewUtils), inject(BsModalService), inject(HttpClient)); }, token: CommonComponentUiDTService, providedIn: "root" });
    return CommonComponentUiDTService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CommonComponentUiModule = /** @class */ (function () {
    function CommonComponentUiModule() {
    }
    CommonComponentUiModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        CommonComponentSelectorComponent,
                    ],
                    imports: [
                        NotifyModule,
                        CommonModule,
                        ButtonsModule,
                        GridModule,
                        HttpClientModule,
                        ModalModule.forRoot(),
                        FarrisDialogModule,
                        MessagerModule.forRoot(),
                    ],
                    entryComponents: [CommonComponentSelectorComponent],
                    providers: [
                        CommonComponentUiRTService,
                        CommonComponentUiDTService,
                        ViewUtils
                    ],
                    exports: [CommonComponentSelectorComponent]
                },] }
    ];
    return CommonComponentUiModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 选择器返回结果
 */
var  /**
 * 选择器返回结果
 */
SelectorResult = /** @class */ (function () {
    function SelectorResult() {
    }
    return SelectorResult;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { CommonComponentUiModule, CommonComponentSelectorComponent, CommonComponentUiRTService, CommonComponentUiDTService, SelectorResult, ViewUtils as ɵa };

//# sourceMappingURL=gsp-cmp-ccmp-ui.js.map