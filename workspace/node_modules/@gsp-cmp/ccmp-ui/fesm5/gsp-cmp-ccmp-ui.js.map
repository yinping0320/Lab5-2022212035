{"version":3,"file":"gsp-cmp-ccmp-ui.js.map","sources":["ng://@gsp-cmp/ccmp-ui/lib/view-utils/view-utils.ts","ng://@gsp-cmp/ccmp-ui/lib/convertor/convertor.ts","ng://@gsp-cmp/ccmp-ui/lib/params/component-info.ts","ng://@gsp-cmp/ccmp-ui/lib/ccmp-selector/common-component-selector.component.ts","ng://@gsp-cmp/ccmp-ui/lib/ccmp-ui.rt-service.ts","ng://@gsp-cmp/ccmp-ui/lib/ccmp-ui.dt-service.ts","ng://@gsp-cmp/ccmp-ui/lib/ccmp-ui.module.ts","ng://@gsp-cmp/ccmp-ui/lib/params/selector-result.ts"],"sourcesContent":["import { Injectable, TemplateRef } from '@angular/core';\r\nimport { Options } from '../params/options';\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { NotifyService, NotifyOptions } from '@farris/ui-notify';\r\nimport { ComponentInfo } from '../params/component-info';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ViewUtils {\r\n\r\n    constructor(private messagerService:MessagerService,private notify:NotifyService){}\r\n    /**\r\n     * è·åæ¨¡ææ¡éç½®ä¿¡æ¯\r\n     * @param btnRef æé®æ¨¡æ¿å¼ç¨\r\n     * @param title æ¨¡ææ¡æ é¢\r\n     * @param options éç½®é¡¹ï¼ææªä½¿ç¨\r\n     */\r\n    public getModalConfig(btnRef: TemplateRef<any>, options?: Options) {\r\n        return {\r\n            title: (options && options.title) ? options.title : 'æä½åè¡¨',\r\n            width: (options && options.width) ? options.width : 450,\r\n            height: (options && options.height) ? options.width : 500,\r\n            resizable: (options && options.resizable) ? options.resizable : true,\r\n            showButtons: true,\r\n            showMaxButton: false,\r\n            enableScroll: false,\r\n            buttons: btnRef\r\n        };\r\n    }\r\n\r\n    public showObseleteDialog(data: ComponentInfo) {\r\n        this.messagerService.show('warning',\r\n                    `éç¨æä»¶${data.code}å·²è¿æ¶ï¼\r\n                    åçº§æ­¥éª¤ï¼\r\n                    1. éæ°å®ä¹éç¨æä»¶åæ°æ®;\r\n                    2. å¼åæ°çæ¬æä»¶ä»£ç ã\r\n                    è¯·åèGSPCloudå¼åææ¡£->é«çº§å¼å->æä»¶å¼å->éç¨æä»¶å¼å`,{safeHtml: false});\r\n    }\r\n\r\n    public showInfo(message: string, infoType: string, title: string, timeout: number) {\r\n        this.notify.config.position = 'top-center';\r\n        if (infoType == 'success') {\r\n            this.notify.success(<NotifyOptions>{ title: title, msg: message, timeout: timeout });\r\n        }\r\n        else if (infoType == 'info') {\r\n            this.notify.info(<NotifyOptions>{ title: title, msg: message, timeout: timeout });\r\n        }\r\n        else if (infoType == 'warning') {\r\n            this.notify.warning(<NotifyOptions>{ title: title, msg: message, timeout: timeout });\r\n        }\r\n        else if (infoType == 'error') {\r\n            this.notify.error(<NotifyOptions>{ title: title, msg: message, timeout: timeout });\r\n        }\r\n    }\r\n}","import { GspComponent, DefaultGspComponentSerializeContext, GspComponentConvertor } from '@gsp-cmp/common-component';\r\n\r\nexport class ComponentConvertor{\r\n    \r\n    convertorToObject(entity:GspComponent ):Object{\r\n        let covertor:GspComponentConvertor=new GspComponentConvertor();\r\n        let obj=new Object();\r\n        covertor.convertToObject(obj,entity,new DefaultGspComponentSerializeContext())\r\n        return obj;\r\n    }\r\n\r\n    initFromObject(obj:Object):GspComponent{\r\n        let covertor:GspComponentConvertor=new GspComponentConvertor();\r\n        let entity=new GspComponent();\r\n        covertor.initFromObject(entity,obj,new DefaultGspComponentSerializeContext());\r\n        return entity;\r\n    }\r\n}","import { GspComponent } from '@gsp-cmp/common-component';\r\nimport { ComponentConvertor } from '../convertor/convertor';\r\n\r\nexport class ComponentInfo{\r\n    obselete:boolean;\r\n    id:string;\r\n    code:string;\r\n    name:string;\r\n    nameSpace:string;\r\n    fileName:string;\r\n    type:string;\r\n    bizobjectID:string;\r\n    language:string;\r\n    metadata:GspComponent;\r\n\r\n\r\n    init(obj:Object){\r\n        this.id=obj['id'];\r\n        this.obselete=obj['obselete'];\r\n        this.code=obj['code'];\r\n        this.name=obj['name'];\r\n        this.nameSpace=obj['nameSpace'];\r\n        this.fileName=obj['fileName'];\r\n        this.type=obj['type'];\r\n        this.bizobjectID=obj['bizobjectID'];\r\n        this.language=obj['language'];\r\n        if(obj['metadata']){\r\n            let convertor = new ComponentConvertor();\r\n            this.metadata = convertor.initFromObject(obj['metadata']);\r\n        }\r\n    }\r\n}","import { Component, OnInit, Input, EventEmitter, Output, ViewChild, TemplateRef, ComponentFactoryResolver, Injector, ComponentRef } from '@angular/core';\r\nimport { GspComponent } from '@gsp-cmp/common-component';\r\nimport { ViewUtils } from '../view-utils/view-utils';\r\nimport { ComponentInfo } from '../params/component-info';\r\nimport { BsModalRef, BsModalService } from '@farris/ui-modal';\r\nimport { RowArgs, CellClickEvent } from '@progress/kendo-angular-grid';\r\nimport { ComponentConvertor } from '../convertor/convertor';\r\nimport { Operation, StructuredType } from '@ecp-caf/common-structure';\r\n\r\n@Component({\r\n    selector: 'common-component-selector',\r\n    templateUrl: './common-component-selector.component.html',\r\n    styleUrls: ['./common-component-selector.component.css']\r\n})\r\nexport class CommonComponentSelectorComponent implements OnInit {\r\n\r\n    _componentInfo: ComponentInfo;\r\n\r\n    @Input() set componentInfo(_componentInfo: ComponentInfo) {\r\n        this._componentInfo = _componentInfo;\r\n        this.metadata=_componentInfo.metadata;\r\n\r\n        let convertor = new ComponentConvertor();\r\n        this.metadata = convertor.initFromObject(convertor.convertorToObject(_componentInfo.metadata));\r\n        this.metadata.operations = new Array<Operation>();\r\n    }\r\n\r\n    dialog: BsModalRef;\r\n\r\n    metadata: GspComponent;\r\n\r\n    selectedOpUris: string[] = [];\r\n\r\n    isRowSelected = (e: RowArgs) => this.selectedOpUris.indexOf(e.dataItem.uri) >= 0;\r\n\r\n    @ViewChild('btnRef') btnRef: TemplateRef<any>;\r\n\r\n    @Output() confirmEmitter: EventEmitter<GspComponent> = new EventEmitter();\r\n\r\n    @Output() closeEmitter: EventEmitter<any> = new EventEmitter();\r\n\r\n    constructor(private utils: ViewUtils, private modalService: BsModalService,private resolver: ComponentFactoryResolver, private injector: Injector) { }\r\n\r\n    ngOnInit() {\r\n        this._componentInfo = this._componentInfo || new ComponentInfo();\r\n    }\r\n\r\n    confirm() {\r\n        if (!this._componentInfo.metadata || !this._componentInfo.metadata.operations) {\r\n            if (this._componentInfo.metadata.operations.length <= 0) {\r\n                this.utils.showInfo('æ²¡æå¯éçæä»¶æä½', 'info', '', 1500);\r\n                return;\r\n            }\r\n        }\r\n        if (!this.metadata.operations || this.metadata.operations.length <= 0) {\r\n            this.utils.showInfo('è¯·éæ©æä»¶æä½', 'info', '', 1500);\r\n            return;\r\n        }\r\n        if (this.dialog) {\r\n            this.dialog.close();\r\n        }\r\n        this.confirmEmitter.emit(this.metadata);\r\n    }\r\n\r\n    close() {\r\n        if (this.dialog) {\r\n            this.dialog.close();\r\n        }\r\n        this.closeEmitter.emit();\r\n    }\r\n\r\n\r\n    cellClickHandler($event: CellClickEvent) {\r\n        this.selectedOpUris = [$event.dataItem.uri];\r\n        this.metadata.operations = [$event.dataItem];\r\n    }\r\n}\r\n","import { Injectable, Injector, EventEmitter, ComponentFactoryResolver } from '@angular/core';\r\nimport { CommonComponentSelectorComponent } from './ccmp-selector/common-component-selector.component';\r\nimport { ViewUtils } from './view-utils/view-utils';\r\nimport { BsModalService } from '@farris/ui-modal';\r\nimport { Options } from './params/options';\r\nimport { HttpHeaders, HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { SelectorResult } from './params/selector-result';\r\nimport { ComponentInfo } from './params/component-info';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CommonComponentUiRTService {\r\n\r\n    constructor(private resolver: ComponentFactoryResolver, private injector: Injector,\r\n        private util: ViewUtils, private modalService: BsModalService, private http: HttpClient) { }\r\n\r\n    /**\r\n     * éç¨æä»¶æä½éæ©å¨\r\n     * @param metadataId éç¨æä»¶åæ°æ®\r\n     * @param sessionId åè½sessionId\r\n     * @param options UIå¯ééç½®åæ°\r\n     */\r\n    public openSelector(metadataId: string, sessionId: string, options?: Options): Observable<SelectorResult> {\r\n        return this.getComponentInfo(metadataId, sessionId).pipe(map(\r\n            (data: ComponentInfo) => {\r\n                if (data.obselete) {\r\n                    this.util.showObseleteDialog(data);\r\n                    return { confirmEvent: new EventEmitter<any>(), closeEvent: new EventEmitter<any>() };\r\n                }\r\n                else {\r\n                    return this.create(data, options);\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    /**\r\n     * è·åæä»¶ä¿¡æ¯\r\n     * @param metadataId æä»¶åæ°æ®ID\r\n     * @param sessionId åè½sessionid\r\n     */\r\n    public getComponentInfo(metadataId: string, sessionId: string): Observable<any> {\r\n        let headers = new HttpHeaders();\r\n        headers.set(\"sessionId\", sessionId);\r\n        let url = `/api/runtime/sys/v1.0/common-component/component-info/${metadataId}`;\r\n        return this.http.get(url, { headers: headers }).pipe(map(data => {\r\n            if (data) {\r\n                let cmpInfo = new ComponentInfo();\r\n                cmpInfo.init(data);\r\n                return cmpInfo;\r\n            }\r\n        }));\r\n    }\r\n\r\n    private create(componentInfo: ComponentInfo, options: Options): SelectorResult {\r\n        let fac = this.resolver.resolveComponentFactory(CommonComponentSelectorComponent);\r\n        let cmpRef = fac.create(this.injector);\r\n        cmpRef.instance.componentInfo = componentInfo;\r\n        let modalConfig = this.util.getModalConfig(cmpRef.instance.btnRef, options);\r\n        let dialog = this.modalService.show(cmpRef, modalConfig);\r\n        cmpRef.instance.dialog = dialog;\r\n        return { confirmEvent: cmpRef.instance.confirmEmitter, closeEvent: cmpRef.instance.closeEmitter };\r\n    }\r\n}\r\n","import { Injectable, Injector, EventEmitter, ComponentFactoryResolver } from '@angular/core';\r\nimport { CommonComponentSelectorComponent } from './ccmp-selector/common-component-selector.component';\r\nimport { ViewUtils } from './view-utils/view-utils';\r\nimport { BsModalService } from '@farris/ui-modal';\r\nimport { Options } from './params/options';\r\nimport { HttpHeaders, HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { SelectorResult } from './params/selector-result';\r\nimport { ComponentInfo } from './params/component-info';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CommonComponentUiDTService {\r\n\r\n    constructor(private resolver: ComponentFactoryResolver, private injector: Injector,\r\n        private util: ViewUtils, private modalService: BsModalService, private http: HttpClient) { }\r\n\r\n    /**\r\n     * éç¨æä»¶æä½éæ©å¨\r\n     * @param metadataId éç¨æä»¶åæ°æ®\r\n     * @param sessionId åè½sessionId\r\n     * @param options UIå¯ééç½®åæ°\r\n     */\r\n    public openSelector(metadataId: string, sessionId: string, options?: Options): Observable<SelectorResult> {\r\n        return this.getComponentInfo(metadataId, sessionId).pipe(map(\r\n            (data: ComponentInfo) => {\r\n                if (data.obselete) {\r\n                    this.util.showObseleteDialog(data);\r\n                    return { confirmEvent: new EventEmitter<any>(), closeEvent: new EventEmitter<any>() };\r\n                }\r\n                else {\r\n                    return this.create(data, options);\r\n                }\r\n            })\r\n        )\r\n    }\r\n\r\n    /**\r\n     * è·åæä»¶ä¿¡æ¯\r\n     * @param metadataId æä»¶åæ°æ®ID\r\n     * @param sessionId åè½sessionid\r\n     */\r\n    public getComponentInfo(metadataId: string, sessionId: string): Observable<any> {\r\n        let headers = new HttpHeaders();\r\n        headers.set(\"sessionId\", sessionId);\r\n        let url = `/api/dev/main/v1.0/common-component/component-info/${metadataId}`;\r\n        return this.http.get(url, { headers: headers }).pipe(map(data => {\r\n            if (data) {\r\n                let cmpInfo = new ComponentInfo();\r\n                cmpInfo.init(data);\r\n                return cmpInfo;\r\n            }\r\n        }));\r\n    }\r\n\r\n    private create(componentInfo: ComponentInfo, options: Options): SelectorResult {\r\n        let fac = this.resolver.resolveComponentFactory(CommonComponentSelectorComponent);\r\n        let cmpRef = fac.create(this.injector);\r\n        cmpRef.instance.componentInfo = componentInfo;\r\n        let modalConfig = this.util.getModalConfig(cmpRef.instance.btnRef, options);\r\n        let dialog = this.modalService.show(cmpRef, modalConfig);\r\n        cmpRef.instance.dialog = dialog;\r\n        return { confirmEvent: cmpRef.instance.confirmEmitter, closeEvent: cmpRef.instance.closeEmitter };\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonComponentSelectorComponent } from './ccmp-selector/common-component-selector.component';\r\nimport { CommonComponentUiRTService } from './ccmp-ui.rt-service';\r\nimport { ViewUtils } from './view-utils/view-utils';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ButtonsModule } from '@progress/kendo-angular-buttons';\r\nimport { GridModule } from '@progress/kendo-angular-grid';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { ModalModule } from '@farris/ui-modal';\r\nimport { FarrisDialogModule } from '@farris/ui-dialog';\r\nimport { MessagerModule } from '@farris/ui-messager';\r\nimport { NotifyModule } from '@farris/ui-notify';\r\nimport { CommonComponentUiDTService } from './ccmp-ui.dt-service';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        CommonComponentSelectorComponent,\r\n    ],\r\n    imports: [\r\n        NotifyModule,\r\n        CommonModule,\r\n        ButtonsModule,\r\n        GridModule,\r\n        HttpClientModule,\r\n        ModalModule.forRoot(),\r\n        FarrisDialogModule,\r\n        MessagerModule.forRoot(),\r\n    ],\r\n    entryComponents: [CommonComponentSelectorComponent],\r\n    providers: [\r\n        CommonComponentUiRTService,\r\n        CommonComponentUiDTService,\r\n        ViewUtils\r\n    ],\r\n    exports: [CommonComponentSelectorComponent]\r\n})\r\nexport class CommonComponentUiModule { }\r\n","import { EventEmitter } from '@angular/core';\r\nimport { GspComponent } from '@gsp-cmp/common-component';\r\n\r\n/**\r\n * éæ©å¨è¿åç»æ\r\n */\r\nexport class SelectorResult{\r\n\r\n    /**\r\n     * éæ©å¨ç¡®è®¤æé®äºä»¶\r\n     */\r\n    confirmEvent:EventEmitter<GspComponent>\r\n\r\n    /**\r\n     * éæ©å¨å³é­æé®äºä»¶\r\n     */\r\n    closeEvent: EventEmitter<void>;\r\n}"],"names":[],"mappings":"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"}
