{"version":3,"file":"gsp-cmp-common-component.js.map","sources":["ng://@gsp-cmp/common-component/define/gsp-component.ts","ng://@gsp-cmp/common-component/define/gsp-component-constant.ts","ng://@gsp-cmp/common-component/define/data-type/structure-refer-type.ts","ng://@gsp-cmp/common-component/define/ref-structure-info.ts","ng://@gsp-cmp/common-component/convertor/util/ref-structure-util.ts","ng://@gsp-cmp/common-component/convertor/gsp-component-convertor.ts","ng://@gsp-cmp/common-component/convertor/data-type/structure-refer-type-convertor.ts","ng://@gsp-cmp/common-component/serialize-context/default/serializer/default-gsp-component-data-type-serializer.ts","ng://@gsp-cmp/common-component/serialize-context/default/factory/default-gsp-component-data-type-serializer-factory.ts","ng://@gsp-cmp/common-component/serialize-context/default/default-gsp-component-serialize-context.ts","ng://@gsp-cmp/common-component/serialize-context/default/serializer/default-gsp-component-serializer.ts","ng://@gsp-cmp/common-component/serialize-context/default/factory/default-gsp-component-serializer-factory.ts","ng://@gsp-cmp/common-component/service/common-component.service.ts","ng://@gsp-cmp/common-component/common-component.module.ts"],"sourcesContent":["import { Operation, StructuredType } from '@ecp-caf/common-structure';\r\nimport { RefStructureInfo as RefStructureInfo } from './ref-structure-info';\r\n\r\nexport class GspComponent {\r\n    id: string;\r\n    code: string;\r\n    name: string;\r\n    description: string;\r\n    application: string;\r\n    serviceUnit: string;\r\n    version: string;\r\n\r\n    /**\r\n     * æä»¶æä½åè¡¨\r\n     */\r\n    operations: Array<Operation>;\r\n    \r\n    /**\r\n     * æä»¶ç»æåç±»ååè¡¨ï¼æä»¶æ¬èº«çdtoåè¡¨ï¼\r\n     */\r\n    structuredTypes: Array<StructuredType>;\r\n    \r\n    /**\r\n     * æä»¶å¼ç¨çç»æåç±»ååè¡¨ï¼ä»åç±»åæ°æ®ä¸­å¼ç¨ï¼\r\n     */\r\n    refStructures: Array<RefStructureInfo>;\r\n} ","export class GspComponentConstant{\r\n   static readonly CMP_STRUCTURED_TYPE_REF:string=\"CmpStructureTypeRef\";\r\n\r\n}","import { IDataType, DataType } from '@ecp-caf/common-structure';\r\nimport { GspComponentConstant } from '../gsp-component-constant';\r\n\r\nexport class StructureReferType extends DataType implements IDataType {\r\n    getKeys(): any[] {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    getValue(key: any) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    constructor(){\r\n      super();\r\n      this.kind=GspComponentConstant.CMP_STRUCTURED_TYPE_REF;\r\n    }\r\n\r\n\r\n    /**\r\n     * å¼ç¨çreferçid\r\n     */\r\n\r\n    referId: string;\r\n    /**\r\n     * code\r\n     */\r\n\r\n    code: string;\r\n    /**\r\n     * name\r\n     */\r\n    name: string;\r\n\r\n}","/**\r\n * å¼ç¨çåæ°æ®structureä¿¡æ¯\r\n */\r\nexport class RefStructureInfo {\r\n\r\n    /**\r\n     * structureInfoçå¯ä¸æ è¯\r\n     */\r\n    id: string;\r\n\r\n    /**\r\n     * structureæå±åæ°æ®çç±»åå¨ç§°ï¼å¦GSPViewModel\r\n     */\r\n    referType: string;\r\n\r\n    /**\r\n     * æå±åæ°æ®id\r\n     */\r\n    referId: string;\r\n\r\n    /**\r\n     * æå±åæ°æ®Code\r\n     */\r\n    referCode: string;\r\n\r\n\r\n    /**\r\n     * å¼ç¨çstucturedType Id\r\n     */\r\n    structuredTypeId: string\r\n\r\n    /**\r\n     * å¼ç¨çç»æçCode\r\n     */\r\n    code: string;\r\n\r\n    /**\r\n     * å¼ç¨çç»æçName\r\n     */\r\n    name: string;\r\n\r\n}","import { RefStructureInfo } from '../../define/ref-structure-info';\r\n\r\nexport class RefStructureUtil {\r\n\r\n    static convertToObject(refInfo: RefStructureInfo): Object {\r\n        let result = new Object();\r\n        result[\"id\"] = refInfo.id;\r\n        result[\"referId\"] = refInfo.referId;\r\n        result[\"referType\"] = refInfo.referType;\r\n        result[\"referCode\"] = refInfo.referCode;\r\n        result[\"structuredTypeId\"] = refInfo.structuredTypeId;\r\n        result[\"code\"] = refInfo.code;\r\n        result[\"name\"] = refInfo.name;\r\n        return result;\r\n    }\r\n\r\n\r\n    static initFromObject(obj: Object): RefStructureInfo {\r\n        let result = new RefStructureInfo();\r\n        result.id = obj['id'];\r\n        result.referId = obj['referId'];\r\n        result.referType = obj['referType'];\r\n        result.referCode = obj['referCode'];\r\n        result.structuredTypeId = obj['structuredTypeId'];\r\n        result.code = obj['code'];\r\n        result.name = obj['name'];\r\n        return result;\r\n\r\n    }\r\n}","import { RefStructureUtil } from './util/ref-structure-util';\r\nimport { GspComponent } from '../define/gsp-component';\r\nimport { IGspComponentSerializeContext } from '../serialize-context/extension/i-gsp-component-serialize-context';\r\nimport { Operation } from '@ecp-caf/common-structure';\r\nimport { RefStructureInfo } from '../define/ref-structure-info';\r\n\r\nexport class GspComponentConvertor {\r\n\r\n    convertToObject(obj: Object, component: GspComponent, ctxt: IGspComponentSerializeContext): void {\r\n        obj['id'] = component.id;\r\n        obj['code'] = component.code;\r\n        obj['name'] = component.name;\r\n        obj['description'] = component.description;\r\n        obj['application'] = component.application;\r\n        obj['serviceUnit'] = component.serviceUnit;\r\n        obj['version'] = component.version;\r\n        //Operations\r\n        obj['operations'] = new Array<Object>();\r\n        if (component.operations) {\r\n            component.operations.forEach(op => {\r\n                var kind=op['kind'];\r\n                var serializer=ctxt.getOperationSerializerFactory().get(kind);\r\n                var opObj=serializer.serialize(op,ctxt);\r\n                obj['operations'].push(opObj);\r\n            });\r\n        }\r\n        //StructuredTypes\r\n        // obj['structuredTypes'] = new Array<Object>();\r\n        // if (component.structuredTypes) {\r\n        //     component.structuredTypes.forEach(structuredType => {\r\n        //         var kind=structuredType.kind;\r\n        //         var serializer=ctxt.getDataTypeSerializerFactory().get(kind);\r\n        //         var structuredTypeObj=serializer.serialize(structuredType,ctxt);\r\n        //         obj['structuredTypes'].push(structuredTypeObj);\r\n        //     });\r\n        // }\r\n        //refStructures\r\n        obj['refStructures']=new Array<object>();\r\n        if(component.refStructures){\r\n            component.refStructures.forEach(refInfo=>{\r\n                let refObj=RefStructureUtil.convertToObject(refInfo);\r\n                obj['refStructures'].push(refObj);\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    initFromObject(component: GspComponent, obj: Object, ctxt: IGspComponentSerializeContext): void {\r\n        component.id = obj['id'];\r\n        component.code=obj['code'];\r\n        component.name = obj['name'];\r\n        component.description = obj['description'];\r\n        component.application = obj['application'];\r\n        component.serviceUnit = obj['serviceUnit'];\r\n        component.version = obj['version'];\r\n        //operations\r\n        if (obj['operations']) {\r\n            component.operations = new Array<Operation>();\r\n            obj['operations'].forEach(operationObj => {\r\n                var kind=operationObj['kind'];\r\n                var serializer=ctxt.getOperationSerializerFactory().get(kind);\r\n                var operation=serializer.deserialize(operationObj,ctxt);\r\n                component.operations.push(operation);\r\n            });\r\n        }\r\n        //structuredTypes\r\n        // if (obj['structuredTypes']) {\r\n        //     component.structuredTypes = new Array<StructuredType>();\r\n        //     obj['structuredTypes'].forEach(structureObj => {\r\n        //         var kind=structureObj['kind'];\r\n        //         var serializer=ctxt.getDataTypeSerializerFactory().get(kind);\r\n        //         var structuredType=serializer.deserialize(structureObj,ctxt) as StructuredType;\r\n        //         component.structuredTypes.push(structuredType);\r\n        //     });\r\n        // }\r\n        //refStructures\r\n        if(obj['refStructures']){\r\n            component.refStructures=new Array<RefStructureInfo>();\r\n            obj['refStructures'].forEach(refObj=>{\r\n                let refInfo=RefStructureUtil.initFromObject(refObj);\r\n                component.refStructures.push(refInfo);\r\n            })\r\n        }\r\n\r\n    }\r\n}","import { IDataType, ISerializeContext } from '@ecp-caf/common-structure';\r\nimport { StructureReferType } from '../../define/data-type/structure-refer-type';\r\n\r\nexport class StructureReferTypeConvertor{\r\n\r\n    convertToObject(obj:Object,datatype:IDataType,ctxt:ISerializeContext):void{\r\n        var referType=datatype as StructureReferType;\r\n        obj[\"kind\"]=referType.getKind();\r\n        obj['referId']=referType.referId;\r\n        obj['code']=referType.code;\r\n        obj['name']=referType.name;\r\n    }\r\n\r\n    initFromObject(dataType:IDataType,obj:Object,ctxt:ISerializeContext):void{\r\n        var refType=dataType as StructureReferType;\r\n        refType.kind=obj['kind'];\r\n        refType.referId=obj['referId'];\r\n        refType.code=obj['code'];\r\n        refType.name=obj['name'];\r\n    }\r\n}","import { IDataTypeSerializer, ISerializeContext, IDataType } from '@ecp-caf/common-structure';\r\nimport { StructureReferTypeConvertor } from '../../../convertor/data-type/structure-refer-type-convertor';\r\nimport { StructureReferType } from '../../../define/data-type/structure-refer-type';\r\n\r\nexport class DefaultGspComponentDataTypeSerializer implements IDataTypeSerializer {\r\n    serialize(type: IDataType, ctxt: ISerializeContext): Object {\r\n        let result = new Object();\r\n        let baseConvertor = new StructureReferTypeConvertor();\r\n        baseConvertor.convertToObject(result, type, ctxt);\r\n        return result;\r\n    }\r\n\r\n    deserialize(obj: Object, ctxt: ISerializeContext): IDataType {\r\n        let result = new StructureReferType();\r\n        let baseConvertor = new StructureReferTypeConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n\r\n\r\n}","import { IDataTypeSerializerFactory, IDataTypeSerializer, DefaultDataTypeSerializerFactory } from '@ecp-caf/common-structure';\r\nimport { DefaultGspComponentDataTypeSerializer } from '../serializer/default-gsp-component-data-type-serializer';\r\nimport { GspComponentConstant } from '../../../define/gsp-component-constant';\r\n\r\nexport class DefaultGspComponentDataTypeSerializerFactory implements IDataTypeSerializerFactory {\r\n\r\n    private serializer: DefaultGspComponentDataTypeSerializer;\r\n    \r\n    get(kind: string): IDataTypeSerializer {\r\n        switch (kind) {\r\n            case  GspComponentConstant.CMP_STRUCTURED_TYPE_REF:\r\n                if (!this.serializer) {\r\n                    this.serializer = new DefaultGspComponentDataTypeSerializer();\r\n                }\r\n                return this.serializer;\r\n            default:\r\n                return new DefaultDataTypeSerializerFactory().get(kind);\r\n        }\r\n    }\r\n\r\n}","import { IGspComponentSerializeContext } from '../extension/i-gsp-component-serialize-context';\r\nimport { IDataTypeSerializerFactory, IOperationSerializerFactory, IParameterSerializerFactory, IPropertySerializerFactory, DefaultDataTypeSerializerFactory, DefaultOperationSerializerFactory, DefaultParameterSerializerFactory, DefaultPropertySerializerFactory } from '@ecp-caf/common-structure';\r\nimport { DefaultGspComponentDataTypeSerializerFactory } from './factory/default-gsp-component-data-type-serializer-factory';\r\n\r\n\r\nexport class DefaultGspComponentSerializeContext implements IGspComponentSerializeContext {\r\n    private dataTypeFactory: IDataTypeSerializerFactory;\r\n    private operationFactory: IOperationSerializerFactory;\r\n    private parameterFactory: IParameterSerializerFactory;\r\n    private propertyFactory: IPropertySerializerFactory;\r\n    // private gspComponentFactory: IGspComponentSerializerFactory;\r\n\r\n    getDataTypeSerializerFactory(): IDataTypeSerializerFactory {\r\n        if (!this.dataTypeFactory) {\r\n            this.dataTypeFactory = new DefaultGspComponentDataTypeSerializerFactory();\r\n        }\r\n        return this.dataTypeFactory;\r\n    }\r\n\r\n    getOperationSerializerFactory(): IOperationSerializerFactory {\r\n        if (!this.operationFactory) {\r\n            this.operationFactory = new DefaultOperationSerializerFactory();\r\n        }\r\n        return this.operationFactory;\r\n    }\r\n\r\n    getParameterSerializerFactory(): IParameterSerializerFactory {\r\n        if (!this.parameterFactory) {\r\n            this.parameterFactory = new DefaultParameterSerializerFactory();\r\n        }\r\n        return this.parameterFactory;\r\n    }\r\n\r\n    getPropertySerializerFactory(): IPropertySerializerFactory {\r\n        if (!this.propertyFactory) {\r\n            this.propertyFactory = new DefaultPropertySerializerFactory();\r\n        }\r\n        return this.propertyFactory;\r\n    }\r\n\r\n    // getGspComponentSerializerFactory(): IGspComponentSerializerFactory {\r\n    //     if (!this.gspComponentFactory) {\r\n    //         this.gspComponentFactory = new DefaultGspComponentSerializerFactory();\r\n    //     }\r\n    //     return this.gspComponentFactory;\r\n    // }\r\n\r\n}","import { IGspComponentSerializer } from '../../extension/serializer/i-gsp-component-serializer';\r\nimport { GspComponent } from '../../../define/gsp-component';\r\nimport { IGspComponentSerializeContext } from '../../extension/i-gsp-component-serialize-context';\r\nimport { GspComponentConvertor } from '../../../convertor/gsp-component-convertor';\r\n\r\nexport class DefaultGspComponentSerializer implements IGspComponentSerializer {\r\n    serialize(component: GspComponent, ctxt: IGspComponentSerializeContext): Object {\r\n        let result = new Object();\r\n        //ä½¿ç¨åºæ¬çåºååå¨\r\n        let baseConvertor = new GspComponentConvertor();\r\n        baseConvertor.convertToObject(result, component, ctxt);\r\n        //Cando:å¢å èªå·±å¯¹Objectçæ©å±\r\n        return result;\r\n    }    \r\n\r\n    deserialize(obj: Object, ctxt: IGspComponentSerializeContext):GspComponent {\r\n        let result=new GspComponent();\r\n        let baseConvertor=new GspComponentConvertor();\r\n        baseConvertor.initFromObject(result,obj,ctxt);\r\n        return result;\r\n    }\r\n\r\n\r\n}","import { IGspComponentSerializerFactory } from '../../extension/factory/i-gsp-component-serializer-factory';\r\nimport { IGspComponentSerializer } from '../../extension/serializer/i-gsp-component-serializer';\r\nimport { DefaultGspComponentSerializer } from '../serializer/default-gsp-component-serializer';\r\n\r\nexport class DefaultGspComponentSerializerFactory implements IGspComponentSerializerFactory {\r\n    private serializerDict: { [key: string]: IGspComponentSerializer } = {};\r\n\r\n    get(kind: string): IGspComponentSerializer {\r\n        switch (kind) {\r\n            case \"Default\":\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultGspComponentSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(`æªå¹éå°ç±»åä¸º${kind}çåºååå¨!`);\r\n\r\n        }\r\n        return this.serializerDict[kind];\r\n    }\r\n\r\n}","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, mergeMap } from 'rxjs/operators';\r\nimport { DefaultSerializeContext, IDataType, CommonStructureDTService, Operation, CollectionType, MapType, EntityObject, CommonStructure, StructuredType, DataType, PrimitiveType } from '@ecp-caf/common-structure';\r\nimport { DefaultGspComponentSerializer } from '../serialize-context/default/serializer/default-gsp-component-serializer';\r\nimport { DefaultGspComponentSerializeContext } from '../serialize-context/default/default-gsp-component-serialize-context';\r\nimport { GspComponent } from '../define/gsp-component';\r\nimport { StructureReferType } from '../define/data-type/structure-refer-type';\r\nimport { RefStructureInfo } from '../define/ref-structure-info';\r\n\r\n\r\n@Injectable()\r\nexport class CommonComponentService {\r\n\r\n    private commom_component_url = '/api/runtime/sys/v1.0/common-component';\r\n\r\n\r\n    constructor(private http: HttpClient, private structureSvc: CommonStructureDTService) { }\r\n\r\n\r\n    getComponent(componentId: string, headers: HttpHeaders): Observable<any> {\r\n        let url = this.commom_component_url + '?componentId=' + componentId;\r\n        return this.http.get(url, { headers: headers }).pipe(map(cmpObj => {\r\n            let serializer: DefaultGspComponentSerializer = new DefaultGspComponentSerializer();\r\n            let ctxt: DefaultGspComponentSerializeContext = new DefaultGspComponentSerializeContext();\r\n            let cmp: GspComponent = serializer.deserialize(cmpObj, ctxt);\r\n            return cmp;\r\n        }))\r\n    }\r\n\r\n    /**\r\n     * è·åæä»¶ä¸­æä½åæ°çSchema\r\n     * @param componentId æä»¶Id\r\n     * @param operationCode æä½ç¼å·\r\n     * @param paramCode åæ°ç¼å·\r\n     * @param headers è¯·æ±headerï¼åºåå«sessionIdç­å¿éåæ°\r\n     */\r\n    getParamSchema(componentId: string, operationCode: string, paramCode: string, headers: HttpHeaders): Observable<any> {\r\n        let url = this.commom_component_url + '?componentId=' + componentId;\r\n        return this.http.get<any>(url, { headers: headers }).pipe(mergeMap(cmpObj => {\r\n            let serializer: DefaultGspComponentSerializer = new DefaultGspComponentSerializer();\r\n            let ctxt: DefaultGspComponentSerializeContext = new DefaultGspComponentSerializeContext();\r\n            let cmp: GspComponent = serializer.deserialize(cmpObj, ctxt);\r\n            let op: Operation = cmp.operations.find(x => x.code == operationCode);\r\n            if (op == null) {\r\n                throw new Error(`CommonComponent Operation NotFoundï¼OperationCode: ${operationCode}`);\r\n            }\r\n            let param = op.parameters.find(x => x.code == paramCode);\r\n            if (param == null) {\r\n                throw new Error(`CommonComponent Parameter NotFoundï¼ParameterCode: ${paramCode}`);\r\n            }\r\n            let paramType = param.parameterType;\r\n            let result: IDataType;\r\n            //å¼ç¨ç±»å\r\n            if (paramType instanceof StructureReferType) {\r\n                return this.getStructureReferType(cmp, paramType, headers);\r\n            }\r\n            //åè¡¨ç±»å\r\n            else if (paramType instanceof CollectionType) {\r\n                return this.getCollectionType(cmp, paramType, headers);\r\n            }\r\n            //å­å¸ç±»å\r\n            else if (paramType instanceof MapType) {\r\n                return this.getMapType(cmp, paramType, headers);\r\n            }\r\n            //åºæ¬ç±»å\r\n            else {\r\n                return of(paramType);\r\n            }\r\n        }));\r\n    };\r\n\r\n    /**\r\n     * è·åæä»¶ä¸­æä½è¿åå¼çSchema\r\n     * @param componentId æä»¶Id\r\n     * @param operationCode æä½ç¼å·\r\n     * @param headers è¯·æ±headerï¼åºåå«sessionIdç­å¿éåæ°\r\n     */\r\n    getReturnValueSchema(componentId: string, operationCode: string, headers: HttpHeaders): Observable<any> {\r\n        let url = this.commom_component_url + '?componentId=' + componentId;\r\n        return this.http.get<any>(url, { headers: headers }).pipe(mergeMap(cmpObj => {\r\n            let serializer: DefaultGspComponentSerializer = new DefaultGspComponentSerializer();\r\n            let ctxt: DefaultGspComponentSerializeContext = new DefaultGspComponentSerializeContext();\r\n            let cmp: GspComponent = serializer.deserialize(cmpObj, ctxt);\r\n            let op: Operation = cmp.operations.find(x => x.code == operationCode);\r\n            if (op == null) {\r\n                throw new Error(`CommonComponent Operation NotFoundï¼OperationCode: ${operationCode}`);\r\n            }\r\n            let returnType = op.returnType;\r\n            let result: IDataType;\r\n            //å¼ç¨ç±»å\r\n            if (returnType instanceof StructureReferType) {\r\n                return this.getStructureReferType(cmp, returnType, headers);\r\n            }\r\n            //åè¡¨ç±»å\r\n            else if (returnType instanceof CollectionType) {\r\n                return this.getCollectionType(cmp, returnType, headers);\r\n            }\r\n            //å­å¸ç±»å\r\n            else if (returnType instanceof MapType) {\r\n                return this.getMapType(cmp, returnType, headers);\r\n            }\r\n            //åºæ¬ç±»å\r\n            else {\r\n                return of(returnType);\r\n            }\r\n        }\r\n        ));\r\n    }\r\n\r\n\r\n    private getCollectionType(cmp: GspComponent, dataType: CollectionType, headers: HttpHeaders): Observable<CollectionType> {\r\n        let elementType = dataType.elementType;\r\n        if (elementType instanceof StructureReferType) {\r\n            return this.getStructureReferType(cmp, elementType, headers).pipe(map(structuredType => {\r\n                dataType.elementType = structuredType\r\n                return dataType;\r\n            }))\r\n        }\r\n        else if (elementType instanceof PrimitiveType) {\r\n            return of(dataType);\r\n        }\r\n        else {\r\n            throw new Error(`ä¸æ¯æçåè¡¨é¡¹ç±»å: ${elementType.getKind()}`);\r\n        }\r\n    }\r\n\r\n\r\n    private getMapType(cmp: GspComponent, dataType: MapType, headers: HttpHeaders): Observable<MapType> {\r\n        let valueType = dataType.valueType;\r\n        if (valueType instanceof StructureReferType) {\r\n            return this.getStructureReferType(cmp, valueType, headers).pipe(map(structuredType => {\r\n                dataType.valueType = structuredType;\r\n                return dataType;\r\n            }))\r\n        }\r\n        else if (valueType instanceof PrimitiveType) {\r\n            return of(dataType);\r\n        }\r\n        else if (valueType instanceof CollectionType) {\r\n            return this.getCollectionType(cmp, valueType, headers).pipe(map(collectionType => {\r\n                dataType.valueType = collectionType;\r\n                return dataType;\r\n            }))\r\n\r\n        }\r\n        else {\r\n            throw new Error(`ä¸æ¯æçåè¡¨é¡¹ç±»å: ${valueType.getKind()}`);\r\n        }\r\n    }\r\n\r\n\r\n    private getStructureReferType(cmp: GspComponent, referType: StructureReferType, headers: HttpHeaders): Observable<StructuredType> {\r\n        let refInfo: RefStructureInfo = cmp.refStructures.find(x => x.id == referType.referId);\r\n        return this.structureSvc.get(refInfo.referType, refInfo.referId, headers).pipe(map(structureObj => {\r\n            //ä½¿ç¨é»è®¤serializeContextè¿è¡ååºåå\r\n            let serializeCtxt = new DefaultSerializeContext();\r\n            let kind = structureObj['kind'];\r\n            let serializer = serializeCtxt.getStructureSerializerFactory().get(kind);\r\n            let structure = serializer.deserialize(structureObj, serializeCtxt) as CommonStructure;\r\n            let structuredTypeId = refInfo.structuredTypeId;\r\n            let allStructures = this.getAllStructures(structure);\r\n            let referType = allStructures.find(x => x.id == structuredTypeId);\r\n            return referType;\r\n        }));\r\n    }\r\n\r\n    private getAllStructures(structure: CommonStructure) {\r\n        let array: Array<StructuredType> = new Array<StructuredType>();\r\n        if (structure.structuredTypes != null) {\r\n            array = array.concat(structure.structuredTypes);\r\n        }\r\n        if (structure.refStructures != null) {\r\n            structure.refStructures.forEach(refStructure => {\r\n                if (refStructure.structuredTypes != null) {\r\n                    array = array.concat(refStructure.structuredTypes);\r\n                }\r\n            })\r\n        }\r\n        return array;\r\n    }\r\n\r\n\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { CommonComponentService } from './service/common-component.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule\r\n  ],\r\n  declarations: [],\r\n  providers:[CommonComponentService],\r\n  exports:[]\r\n})\r\nexport class CommonComponentModule { }\r\n"],"names":["tslib_1.__extends"],"mappings":"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"}
