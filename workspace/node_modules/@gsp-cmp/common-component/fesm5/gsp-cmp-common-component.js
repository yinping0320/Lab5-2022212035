import { __extends } from 'tslib';
import { CommonModule } from '@angular/common';
import { Injectable, NgModule } from '@angular/core';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { of } from 'rxjs';
import { map, mergeMap } from 'rxjs/operators';
import { DataType, DefaultDataTypeSerializerFactory, DefaultOperationSerializerFactory, DefaultParameterSerializerFactory, DefaultPropertySerializerFactory, DefaultSerializeContext, CommonStructureDTService, CollectionType, MapType, PrimitiveType } from '@ecp-caf/common-structure';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var GspComponent = /** @class */ (function () {
    function GspComponent() {
    }
    return GspComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var GspComponentConstant = /** @class */ (function () {
    function GspComponentConstant() {
    }
    GspComponentConstant.CMP_STRUCTURED_TYPE_REF = "CmpStructureTypeRef";
    return GspComponentConstant;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var StructureReferType = /** @class */ (function (_super) {
    __extends(StructureReferType, _super);
    function StructureReferType() {
        var _this = _super.call(this) || this;
        _this.kind = GspComponentConstant.CMP_STRUCTURED_TYPE_REF;
        return _this;
    }
    /**
     * @return {?}
     */
    StructureReferType.prototype.getKeys = /**
     * @return {?}
     */
    function () {
        throw new Error("Method not implemented.");
    };
    /**
     * @param {?} key
     * @return {?}
     */
    StructureReferType.prototype.getValue = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        throw new Error("Method not implemented.");
    };
    return StructureReferType;
}(DataType));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 引用的元数据structure信息
 */
var  /**
 * 引用的元数据structure信息
 */
RefStructureInfo = /** @class */ (function () {
    function RefStructureInfo() {
    }
    return RefStructureInfo;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var RefStructureUtil = /** @class */ (function () {
    function RefStructureUtil() {
    }
    /**
     * @param {?} refInfo
     * @return {?}
     */
    RefStructureUtil.convertToObject = /**
     * @param {?} refInfo
     * @return {?}
     */
    function (refInfo) {
        /** @type {?} */
        var result = new Object();
        result["id"] = refInfo.id;
        result["referId"] = refInfo.referId;
        result["referType"] = refInfo.referType;
        result["referCode"] = refInfo.referCode;
        result["structuredTypeId"] = refInfo.structuredTypeId;
        result["code"] = refInfo.code;
        result["name"] = refInfo.name;
        return result;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    RefStructureUtil.initFromObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var result = new RefStructureInfo();
        result.id = obj['id'];
        result.referId = obj['referId'];
        result.referType = obj['referType'];
        result.referCode = obj['referCode'];
        result.structuredTypeId = obj['structuredTypeId'];
        result.code = obj['code'];
        result.name = obj['name'];
        return result;
    };
    return RefStructureUtil;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var GspComponentConvertor = /** @class */ (function () {
    function GspComponentConvertor() {
    }
    /**
     * @param {?} obj
     * @param {?} component
     * @param {?} ctxt
     * @return {?}
     */
    GspComponentConvertor.prototype.convertToObject = /**
     * @param {?} obj
     * @param {?} component
     * @param {?} ctxt
     * @return {?}
     */
    function (obj, component, ctxt) {
        obj['id'] = component.id;
        obj['code'] = component.code;
        obj['name'] = component.name;
        obj['description'] = component.description;
        obj['application'] = component.application;
        obj['serviceUnit'] = component.serviceUnit;
        obj['version'] = component.version;
        //Operations
        obj['operations'] = new Array();
        if (component.operations) {
            component.operations.forEach((/**
             * @param {?} op
             * @return {?}
             */
            function (op) {
                /** @type {?} */
                var kind = op['kind'];
                /** @type {?} */
                var serializer = ctxt.getOperationSerializerFactory().get(kind);
                /** @type {?} */
                var opObj = serializer.serialize(op, ctxt);
                obj['operations'].push(opObj);
            }));
        }
        //StructuredTypes
        // obj['structuredTypes'] = new Array<Object>();
        // if (component.structuredTypes) {
        //     component.structuredTypes.forEach(structuredType => {
        //         var kind=structuredType.kind;
        //         var serializer=ctxt.getDataTypeSerializerFactory().get(kind);
        //         var structuredTypeObj=serializer.serialize(structuredType,ctxt);
        //         obj['structuredTypes'].push(structuredTypeObj);
        //     });
        // }
        //refStructures
        obj['refStructures'] = new Array();
        if (component.refStructures) {
            component.refStructures.forEach((/**
             * @param {?} refInfo
             * @return {?}
             */
            function (refInfo) {
                /** @type {?} */
                var refObj = RefStructureUtil.convertToObject(refInfo);
                obj['refStructures'].push(refObj);
            }));
        }
    };
    /**
     * @param {?} component
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    GspComponentConvertor.prototype.initFromObject = /**
     * @param {?} component
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    function (component, obj, ctxt) {
        component.id = obj['id'];
        component.code = obj['code'];
        component.name = obj['name'];
        component.description = obj['description'];
        component.application = obj['application'];
        component.serviceUnit = obj['serviceUnit'];
        component.version = obj['version'];
        //operations
        if (obj['operations']) {
            component.operations = new Array();
            obj['operations'].forEach((/**
             * @param {?} operationObj
             * @return {?}
             */
            function (operationObj) {
                /** @type {?} */
                var kind = operationObj['kind'];
                /** @type {?} */
                var serializer = ctxt.getOperationSerializerFactory().get(kind);
                /** @type {?} */
                var operation = serializer.deserialize(operationObj, ctxt);
                component.operations.push(operation);
            }));
        }
        //structuredTypes
        // if (obj['structuredTypes']) {
        //     component.structuredTypes = new Array<StructuredType>();
        //     obj['structuredTypes'].forEach(structureObj => {
        //         var kind=structureObj['kind'];
        //         var serializer=ctxt.getDataTypeSerializerFactory().get(kind);
        //         var structuredType=serializer.deserialize(structureObj,ctxt) as StructuredType;
        //         component.structuredTypes.push(structuredType);
        //     });
        // }
        //refStructures
        if (obj['refStructures']) {
            component.refStructures = new Array();
            obj['refStructures'].forEach((/**
             * @param {?} refObj
             * @return {?}
             */
            function (refObj) {
                /** @type {?} */
                var refInfo = RefStructureUtil.initFromObject(refObj);
                component.refStructures.push(refInfo);
            }));
        }
    };
    return GspComponentConvertor;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var StructureReferTypeConvertor = /** @class */ (function () {
    function StructureReferTypeConvertor() {
    }
    /**
     * @param {?} obj
     * @param {?} datatype
     * @param {?} ctxt
     * @return {?}
     */
    StructureReferTypeConvertor.prototype.convertToObject = /**
     * @param {?} obj
     * @param {?} datatype
     * @param {?} ctxt
     * @return {?}
     */
    function (obj, datatype, ctxt) {
        /** @type {?} */
        var referType = (/** @type {?} */ (datatype));
        obj["kind"] = referType.getKind();
        obj['referId'] = referType.referId;
        obj['code'] = referType.code;
        obj['name'] = referType.name;
    };
    /**
     * @param {?} dataType
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    StructureReferTypeConvertor.prototype.initFromObject = /**
     * @param {?} dataType
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    function (dataType, obj, ctxt) {
        /** @type {?} */
        var refType = (/** @type {?} */ (dataType));
        refType.kind = obj['kind'];
        refType.referId = obj['referId'];
        refType.code = obj['code'];
        refType.name = obj['name'];
    };
    return StructureReferTypeConvertor;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DefaultGspComponentDataTypeSerializer = /** @class */ (function () {
    function DefaultGspComponentDataTypeSerializer() {
    }
    /**
     * @param {?} type
     * @param {?} ctxt
     * @return {?}
     */
    DefaultGspComponentDataTypeSerializer.prototype.serialize = /**
     * @param {?} type
     * @param {?} ctxt
     * @return {?}
     */
    function (type, ctxt) {
        /** @type {?} */
        var result = new Object();
        /** @type {?} */
        var baseConvertor = new StructureReferTypeConvertor();
        baseConvertor.convertToObject(result, type, ctxt);
        return result;
    };
    /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    DefaultGspComponentDataTypeSerializer.prototype.deserialize = /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    function (obj, ctxt) {
        /** @type {?} */
        var result = new StructureReferType();
        /** @type {?} */
        var baseConvertor = new StructureReferTypeConvertor();
        baseConvertor.initFromObject(result, obj, ctxt);
        return result;
    };
    return DefaultGspComponentDataTypeSerializer;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DefaultGspComponentDataTypeSerializerFactory = /** @class */ (function () {
    function DefaultGspComponentDataTypeSerializerFactory() {
    }
    /**
     * @param {?} kind
     * @return {?}
     */
    DefaultGspComponentDataTypeSerializerFactory.prototype.get = /**
     * @param {?} kind
     * @return {?}
     */
    function (kind) {
        switch (kind) {
            case GspComponentConstant.CMP_STRUCTURED_TYPE_REF:
                if (!this.serializer) {
                    this.serializer = new DefaultGspComponentDataTypeSerializer();
                }
                return this.serializer;
            default:
                return new DefaultDataTypeSerializerFactory().get(kind);
        }
    };
    return DefaultGspComponentDataTypeSerializerFactory;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DefaultGspComponentSerializeContext = /** @class */ (function () {
    function DefaultGspComponentSerializeContext() {
    }
    // private gspComponentFactory: IGspComponentSerializerFactory;
    // private gspComponentFactory: IGspComponentSerializerFactory;
    /**
     * @return {?}
     */
    DefaultGspComponentSerializeContext.prototype.getDataTypeSerializerFactory = 
    // private gspComponentFactory: IGspComponentSerializerFactory;
    /**
     * @return {?}
     */
    function () {
        if (!this.dataTypeFactory) {
            this.dataTypeFactory = new DefaultGspComponentDataTypeSerializerFactory();
        }
        return this.dataTypeFactory;
    };
    /**
     * @return {?}
     */
    DefaultGspComponentSerializeContext.prototype.getOperationSerializerFactory = /**
     * @return {?}
     */
    function () {
        if (!this.operationFactory) {
            this.operationFactory = new DefaultOperationSerializerFactory();
        }
        return this.operationFactory;
    };
    /**
     * @return {?}
     */
    DefaultGspComponentSerializeContext.prototype.getParameterSerializerFactory = /**
     * @return {?}
     */
    function () {
        if (!this.parameterFactory) {
            this.parameterFactory = new DefaultParameterSerializerFactory();
        }
        return this.parameterFactory;
    };
    /**
     * @return {?}
     */
    DefaultGspComponentSerializeContext.prototype.getPropertySerializerFactory = /**
     * @return {?}
     */
    function () {
        if (!this.propertyFactory) {
            this.propertyFactory = new DefaultPropertySerializerFactory();
        }
        return this.propertyFactory;
    };
    return DefaultGspComponentSerializeContext;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DefaultGspComponentSerializer = /** @class */ (function () {
    function DefaultGspComponentSerializer() {
    }
    /**
     * @param {?} component
     * @param {?} ctxt
     * @return {?}
     */
    DefaultGspComponentSerializer.prototype.serialize = /**
     * @param {?} component
     * @param {?} ctxt
     * @return {?}
     */
    function (component, ctxt) {
        /** @type {?} */
        var result = new Object();
        //使用基本的序列化器
        /** @type {?} */
        var baseConvertor = new GspComponentConvertor();
        baseConvertor.convertToObject(result, component, ctxt);
        //Cando:增加自己对Object的扩展
        return result;
    };
    /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    DefaultGspComponentSerializer.prototype.deserialize = /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    function (obj, ctxt) {
        /** @type {?} */
        var result = new GspComponent();
        /** @type {?} */
        var baseConvertor = new GspComponentConvertor();
        baseConvertor.initFromObject(result, obj, ctxt);
        return result;
    };
    return DefaultGspComponentSerializer;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DefaultGspComponentSerializerFactory = /** @class */ (function () {
    function DefaultGspComponentSerializerFactory() {
        this.serializerDict = {};
    }
    /**
     * @param {?} kind
     * @return {?}
     */
    DefaultGspComponentSerializerFactory.prototype.get = /**
     * @param {?} kind
     * @return {?}
     */
    function (kind) {
        switch (kind) {
            case "Default":
                if (!this.serializerDict[kind]) {
                    /** @type {?} */
                    var serializer = new DefaultGspComponentSerializer();
                    this.serializerDict[kind] = serializer;
                }
                break;
            default:
                throw new Error("\u672A\u5339\u914D\u5230\u7C7B\u578B\u4E3A" + kind + "\u7684\u5E8F\u5217\u5316\u5668!");
        }
        return this.serializerDict[kind];
    };
    return DefaultGspComponentSerializerFactory;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CommonComponentService = /** @class */ (function () {
    function CommonComponentService(http, structureSvc) {
        this.http = http;
        this.structureSvc = structureSvc;
        this.commom_component_url = '/api/runtime/sys/v1.0/common-component';
    }
    /**
     * @param {?} componentId
     * @param {?} headers
     * @return {?}
     */
    CommonComponentService.prototype.getComponent = /**
     * @param {?} componentId
     * @param {?} headers
     * @return {?}
     */
    function (componentId, headers) {
        /** @type {?} */
        var url = this.commom_component_url + '?componentId=' + componentId;
        return this.http.get(url, { headers: headers }).pipe(map((/**
         * @param {?} cmpObj
         * @return {?}
         */
        function (cmpObj) {
            /** @type {?} */
            var serializer = new DefaultGspComponentSerializer();
            /** @type {?} */
            var ctxt = new DefaultGspComponentSerializeContext();
            /** @type {?} */
            var cmp = serializer.deserialize(cmpObj, ctxt);
            return cmp;
        })));
    };
    /**
     * 获取构件中操作参数的Schema
     * @param componentId 构件Id
     * @param operationCode 操作编号
     * @param paramCode 参数编号
     * @param headers 请求header，应包含sessionId等必需参数
     */
    /**
     * 获取构件中操作参数的Schema
     * @param {?} componentId 构件Id
     * @param {?} operationCode 操作编号
     * @param {?} paramCode 参数编号
     * @param {?} headers 请求header，应包含sessionId等必需参数
     * @return {?}
     */
    CommonComponentService.prototype.getParamSchema = /**
     * 获取构件中操作参数的Schema
     * @param {?} componentId 构件Id
     * @param {?} operationCode 操作编号
     * @param {?} paramCode 参数编号
     * @param {?} headers 请求header，应包含sessionId等必需参数
     * @return {?}
     */
    function (componentId, operationCode, paramCode, headers) {
        var _this = this;
        /** @type {?} */
        var url = this.commom_component_url + '?componentId=' + componentId;
        return this.http.get(url, { headers: headers }).pipe(mergeMap((/**
         * @param {?} cmpObj
         * @return {?}
         */
        function (cmpObj) {
            /** @type {?} */
            var serializer = new DefaultGspComponentSerializer();
            /** @type {?} */
            var ctxt = new DefaultGspComponentSerializeContext();
            /** @type {?} */
            var cmp = serializer.deserialize(cmpObj, ctxt);
            /** @type {?} */
            var op = cmp.operations.find((/**
             * @param {?} x
             * @return {?}
             */
            function (x) { return x.code == operationCode; }));
            if (op == null) {
                throw new Error("CommonComponent Operation NotFound\uFF0COperationCode: " + operationCode);
            }
            /** @type {?} */
            var param = op.parameters.find((/**
             * @param {?} x
             * @return {?}
             */
            function (x) { return x.code == paramCode; }));
            if (param == null) {
                throw new Error("CommonComponent Parameter NotFound\uFF0CParameterCode: " + paramCode);
            }
            /** @type {?} */
            var paramType = param.parameterType;
            //引用类型
            if (paramType instanceof StructureReferType) {
                return _this.getStructureReferType(cmp, paramType, headers);
            }
            //列表类型
            else if (paramType instanceof CollectionType) {
                return _this.getCollectionType(cmp, paramType, headers);
            }
            //字典类型
            else if (paramType instanceof MapType) {
                return _this.getMapType(cmp, paramType, headers);
            }
            //基本类型
            else {
                return of(paramType);
            }
        })));
    };
    /**
     * 获取构件中操作返回值的Schema
     * @param componentId 构件Id
     * @param operationCode 操作编号
     * @param headers 请求header，应包含sessionId等必需参数
     */
    /**
     * 获取构件中操作返回值的Schema
     * @param {?} componentId 构件Id
     * @param {?} operationCode 操作编号
     * @param {?} headers 请求header，应包含sessionId等必需参数
     * @return {?}
     */
    CommonComponentService.prototype.getReturnValueSchema = /**
     * 获取构件中操作返回值的Schema
     * @param {?} componentId 构件Id
     * @param {?} operationCode 操作编号
     * @param {?} headers 请求header，应包含sessionId等必需参数
     * @return {?}
     */
    function (componentId, operationCode, headers) {
        var _this = this;
        /** @type {?} */
        var url = this.commom_component_url + '?componentId=' + componentId;
        return this.http.get(url, { headers: headers }).pipe(mergeMap((/**
         * @param {?} cmpObj
         * @return {?}
         */
        function (cmpObj) {
            /** @type {?} */
            var serializer = new DefaultGspComponentSerializer();
            /** @type {?} */
            var ctxt = new DefaultGspComponentSerializeContext();
            /** @type {?} */
            var cmp = serializer.deserialize(cmpObj, ctxt);
            /** @type {?} */
            var op = cmp.operations.find((/**
             * @param {?} x
             * @return {?}
             */
            function (x) { return x.code == operationCode; }));
            if (op == null) {
                throw new Error("CommonComponent Operation NotFound\uFF0COperationCode: " + operationCode);
            }
            /** @type {?} */
            var returnType = op.returnType;
            //引用类型
            if (returnType instanceof StructureReferType) {
                return _this.getStructureReferType(cmp, returnType, headers);
            }
            //列表类型
            else if (returnType instanceof CollectionType) {
                return _this.getCollectionType(cmp, returnType, headers);
            }
            //字典类型
            else if (returnType instanceof MapType) {
                return _this.getMapType(cmp, returnType, headers);
            }
            //基本类型
            else {
                return of(returnType);
            }
        })));
    };
    /**
     * @private
     * @param {?} cmp
     * @param {?} dataType
     * @param {?} headers
     * @return {?}
     */
    CommonComponentService.prototype.getCollectionType = /**
     * @private
     * @param {?} cmp
     * @param {?} dataType
     * @param {?} headers
     * @return {?}
     */
    function (cmp, dataType, headers) {
        /** @type {?} */
        var elementType = dataType.elementType;
        if (elementType instanceof StructureReferType) {
            return this.getStructureReferType(cmp, elementType, headers).pipe(map((/**
             * @param {?} structuredType
             * @return {?}
             */
            function (structuredType) {
                dataType.elementType = structuredType;
                return dataType;
            })));
        }
        else if (elementType instanceof PrimitiveType) {
            return of(dataType);
        }
        else {
            throw new Error("\u4E0D\u652F\u6301\u7684\u5217\u8868\u9879\u7C7B\u578B: " + elementType.getKind());
        }
    };
    /**
     * @private
     * @param {?} cmp
     * @param {?} dataType
     * @param {?} headers
     * @return {?}
     */
    CommonComponentService.prototype.getMapType = /**
     * @private
     * @param {?} cmp
     * @param {?} dataType
     * @param {?} headers
     * @return {?}
     */
    function (cmp, dataType, headers) {
        /** @type {?} */
        var valueType = dataType.valueType;
        if (valueType instanceof StructureReferType) {
            return this.getStructureReferType(cmp, valueType, headers).pipe(map((/**
             * @param {?} structuredType
             * @return {?}
             */
            function (structuredType) {
                dataType.valueType = structuredType;
                return dataType;
            })));
        }
        else if (valueType instanceof PrimitiveType) {
            return of(dataType);
        }
        else if (valueType instanceof CollectionType) {
            return this.getCollectionType(cmp, valueType, headers).pipe(map((/**
             * @param {?} collectionType
             * @return {?}
             */
            function (collectionType) {
                dataType.valueType = collectionType;
                return dataType;
            })));
        }
        else {
            throw new Error("\u4E0D\u652F\u6301\u7684\u5217\u8868\u9879\u7C7B\u578B: " + valueType.getKind());
        }
    };
    /**
     * @private
     * @param {?} cmp
     * @param {?} referType
     * @param {?} headers
     * @return {?}
     */
    CommonComponentService.prototype.getStructureReferType = /**
     * @private
     * @param {?} cmp
     * @param {?} referType
     * @param {?} headers
     * @return {?}
     */
    function (cmp, referType, headers) {
        var _this = this;
        /** @type {?} */
        var refInfo = cmp.refStructures.find((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return x.id == referType.referId; }));
        return this.structureSvc.get(refInfo.referType, refInfo.referId, headers).pipe(map((/**
         * @param {?} structureObj
         * @return {?}
         */
        function (structureObj) {
            //使用默认serializeContext进行反序列化
            /** @type {?} */
            var serializeCtxt = new DefaultSerializeContext();
            /** @type {?} */
            var kind = structureObj['kind'];
            /** @type {?} */
            var serializer = serializeCtxt.getStructureSerializerFactory().get(kind);
            /** @type {?} */
            var structure = (/** @type {?} */ (serializer.deserialize(structureObj, serializeCtxt)));
            /** @type {?} */
            var structuredTypeId = refInfo.structuredTypeId;
            /** @type {?} */
            var allStructures = _this.getAllStructures(structure);
            /** @type {?} */
            var referType = allStructures.find((/**
             * @param {?} x
             * @return {?}
             */
            function (x) { return x.id == structuredTypeId; }));
            return referType;
        })));
    };
    /**
     * @private
     * @param {?} structure
     * @return {?}
     */
    CommonComponentService.prototype.getAllStructures = /**
     * @private
     * @param {?} structure
     * @return {?}
     */
    function (structure) {
        /** @type {?} */
        var array = new Array();
        if (structure.structuredTypes != null) {
            array = array.concat(structure.structuredTypes);
        }
        if (structure.refStructures != null) {
            structure.refStructures.forEach((/**
             * @param {?} refStructure
             * @return {?}
             */
            function (refStructure) {
                if (refStructure.structuredTypes != null) {
                    array = array.concat(refStructure.structuredTypes);
                }
            }));
        }
        return array;
    };
    CommonComponentService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CommonComponentService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: CommonStructureDTService }
    ]; };
    return CommonComponentService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CommonComponentModule = /** @class */ (function () {
    function CommonComponentModule() {
    }
    CommonComponentModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        HttpClientModule
                    ],
                    declarations: [],
                    providers: [CommonComponentService],
                    exports: []
                },] }
    ];
    return CommonComponentModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { GspComponent, StructureReferType, RefStructureInfo, GspComponentConstant, GspComponentConvertor, RefStructureUtil, StructureReferTypeConvertor, DefaultGspComponentSerializeContext, DefaultGspComponentDataTypeSerializerFactory, DefaultGspComponentSerializerFactory, DefaultGspComponentDataTypeSerializer, DefaultGspComponentSerializer, CommonComponentModule, CommonComponentService };

//# sourceMappingURL=gsp-cmp-common-component.js.map