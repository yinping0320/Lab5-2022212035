{"version":3,"file":"gsp-cmp-common-component.umd.js.map","sources":["ng://@gsp-cmp/common-component/define/gsp-component.ts","node_modules/tslib/tslib.es6.js","ng://@gsp-cmp/common-component/define/gsp-component-constant.ts","ng://@gsp-cmp/common-component/define/data-type/structure-refer-type.ts","ng://@gsp-cmp/common-component/define/ref-structure-info.ts","ng://@gsp-cmp/common-component/convertor/util/ref-structure-util.ts","ng://@gsp-cmp/common-component/convertor/gsp-component-convertor.ts","ng://@gsp-cmp/common-component/convertor/data-type/structure-refer-type-convertor.ts","ng://@gsp-cmp/common-component/serialize-context/default/serializer/default-gsp-component-data-type-serializer.ts","ng://@gsp-cmp/common-component/serialize-context/default/factory/default-gsp-component-data-type-serializer-factory.ts","ng://@gsp-cmp/common-component/serialize-context/default/default-gsp-component-serialize-context.ts","ng://@gsp-cmp/common-component/serialize-context/default/serializer/default-gsp-component-serializer.ts","ng://@gsp-cmp/common-component/serialize-context/default/factory/default-gsp-component-serializer-factory.ts","ng://@gsp-cmp/common-component/service/common-component.service.ts","ng://@gsp-cmp/common-component/common-component.module.ts"],"sourcesContent":["import { Operation, StructuredType } from '@ecp-caf/common-structure';\r\nimport { RefStructureInfo as RefStructureInfo } from './ref-structure-info';\r\n\r\nexport class GspComponent {\r\n    id: string;\r\n    code: string;\r\n    name: string;\r\n    description: string;\r\n    application: string;\r\n    serviceUnit: string;\r\n    version: string;\r\n\r\n    /**\r\n     * æä»¶æä½åè¡¨\r\n     */\r\n    operations: Array<Operation>;\r\n    \r\n    /**\r\n     * æä»¶ç»æåç±»ååè¡¨ï¼æä»¶æ¬èº«çdtoåè¡¨ï¼\r\n     */\r\n    structuredTypes: Array<StructuredType>;\r\n    \r\n    /**\r\n     * æä»¶å¼ç¨çç»æåç±»ååè¡¨ï¼ä»åç±»åæ°æ®ä¸­å¼ç¨ï¼\r\n     */\r\n    refStructures: Array<RefStructureInfo>;\r\n} ","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export class GspComponentConstant{\r\n   static readonly CMP_STRUCTURED_TYPE_REF:string=\"CmpStructureTypeRef\";\r\n\r\n}","import { IDataType, DataType } from '@ecp-caf/common-structure';\r\nimport { GspComponentConstant } from '../gsp-component-constant';\r\n\r\nexport class StructureReferType extends DataType implements IDataType {\r\n    getKeys(): any[] {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    getValue(key: any) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    constructor(){\r\n      super();\r\n      this.kind=GspComponentConstant.CMP_STRUCTURED_TYPE_REF;\r\n    }\r\n\r\n\r\n    /**\r\n     * å¼ç¨çreferçid\r\n     */\r\n\r\n    referId: string;\r\n    /**\r\n     * code\r\n     */\r\n\r\n    code: string;\r\n    /**\r\n     * name\r\n     */\r\n    name: string;\r\n\r\n}","/**\r\n * å¼ç¨çåæ°æ®structureä¿¡æ¯\r\n */\r\nexport class RefStructureInfo {\r\n\r\n    /**\r\n     * structureInfoçå¯ä¸æ è¯\r\n     */\r\n    id: string;\r\n\r\n    /**\r\n     * structureæå±åæ°æ®çç±»åå¨ç§°ï¼å¦GSPViewModel\r\n     */\r\n    referType: string;\r\n\r\n    /**\r\n     * æå±åæ°æ®id\r\n     */\r\n    referId: string;\r\n\r\n    /**\r\n     * æå±åæ°æ®Code\r\n     */\r\n    referCode: string;\r\n\r\n\r\n    /**\r\n     * å¼ç¨çstucturedType Id\r\n     */\r\n    structuredTypeId: string\r\n\r\n    /**\r\n     * å¼ç¨çç»æçCode\r\n     */\r\n    code: string;\r\n\r\n    /**\r\n     * å¼ç¨çç»æçName\r\n     */\r\n    name: string;\r\n\r\n}","import { RefStructureInfo } from '../../define/ref-structure-info';\r\n\r\nexport class RefStructureUtil {\r\n\r\n    static convertToObject(refInfo: RefStructureInfo): Object {\r\n        let result = new Object();\r\n        result[\"id\"] = refInfo.id;\r\n        result[\"referId\"] = refInfo.referId;\r\n        result[\"referType\"] = refInfo.referType;\r\n        result[\"referCode\"] = refInfo.referCode;\r\n        result[\"structuredTypeId\"] = refInfo.structuredTypeId;\r\n        result[\"code\"] = refInfo.code;\r\n        result[\"name\"] = refInfo.name;\r\n        return result;\r\n    }\r\n\r\n\r\n    static initFromObject(obj: Object): RefStructureInfo {\r\n        let result = new RefStructureInfo();\r\n        result.id = obj['id'];\r\n        result.referId = obj['referId'];\r\n        result.referType = obj['referType'];\r\n        result.referCode = obj['referCode'];\r\n        result.structuredTypeId = obj['structuredTypeId'];\r\n        result.code = obj['code'];\r\n        result.name = obj['name'];\r\n        return result;\r\n\r\n    }\r\n}","import { RefStructureUtil } from './util/ref-structure-util';\r\nimport { GspComponent } from '../define/gsp-component';\r\nimport { IGspComponentSerializeContext } from '../serialize-context/extension/i-gsp-component-serialize-context';\r\nimport { Operation } from '@ecp-caf/common-structure';\r\nimport { RefStructureInfo } from '../define/ref-structure-info';\r\n\r\nexport class GspComponentConvertor {\r\n\r\n    convertToObject(obj: Object, component: GspComponent, ctxt: IGspComponentSerializeContext): void {\r\n        obj['id'] = component.id;\r\n        obj['code'] = component.code;\r\n        obj['name'] = component.name;\r\n        obj['description'] = component.description;\r\n        obj['application'] = component.application;\r\n        obj['serviceUnit'] = component.serviceUnit;\r\n        obj['version'] = component.version;\r\n        //Operations\r\n        obj['operations'] = new Array<Object>();\r\n        if (component.operations) {\r\n            component.operations.forEach(op => {\r\n                var kind=op['kind'];\r\n                var serializer=ctxt.getOperationSerializerFactory().get(kind);\r\n                var opObj=serializer.serialize(op,ctxt);\r\n                obj['operations'].push(opObj);\r\n            });\r\n        }\r\n        //StructuredTypes\r\n        // obj['structuredTypes'] = new Array<Object>();\r\n        // if (component.structuredTypes) {\r\n        //     component.structuredTypes.forEach(structuredType => {\r\n        //         var kind=structuredType.kind;\r\n        //         var serializer=ctxt.getDataTypeSerializerFactory().get(kind);\r\n        //         var structuredTypeObj=serializer.serialize(structuredType,ctxt);\r\n        //         obj['structuredTypes'].push(structuredTypeObj);\r\n        //     });\r\n        // }\r\n        //refStructures\r\n        obj['refStructures']=new Array<object>();\r\n        if(component.refStructures){\r\n            component.refStructures.forEach(refInfo=>{\r\n                let refObj=RefStructureUtil.convertToObject(refInfo);\r\n                obj['refStructures'].push(refObj);\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    initFromObject(component: GspComponent, obj: Object, ctxt: IGspComponentSerializeContext): void {\r\n        component.id = obj['id'];\r\n        component.code=obj['code'];\r\n        component.name = obj['name'];\r\n        component.description = obj['description'];\r\n        component.application = obj['application'];\r\n        component.serviceUnit = obj['serviceUnit'];\r\n        component.version = obj['version'];\r\n        //operations\r\n        if (obj['operations']) {\r\n            component.operations = new Array<Operation>();\r\n            obj['operations'].forEach(operationObj => {\r\n                var kind=operationObj['kind'];\r\n                var serializer=ctxt.getOperationSerializerFactory().get(kind);\r\n                var operation=serializer.deserialize(operationObj,ctxt);\r\n                component.operations.push(operation);\r\n            });\r\n        }\r\n        //structuredTypes\r\n        // if (obj['structuredTypes']) {\r\n        //     component.structuredTypes = new Array<StructuredType>();\r\n        //     obj['structuredTypes'].forEach(structureObj => {\r\n        //         var kind=structureObj['kind'];\r\n        //         var serializer=ctxt.getDataTypeSerializerFactory().get(kind);\r\n        //         var structuredType=serializer.deserialize(structureObj,ctxt) as StructuredType;\r\n        //         component.structuredTypes.push(structuredType);\r\n        //     });\r\n        // }\r\n        //refStructures\r\n        if(obj['refStructures']){\r\n            component.refStructures=new Array<RefStructureInfo>();\r\n            obj['refStructures'].forEach(refObj=>{\r\n                let refInfo=RefStructureUtil.initFromObject(refObj);\r\n                component.refStructures.push(refInfo);\r\n            })\r\n        }\r\n\r\n    }\r\n}","import { IDataType, ISerializeContext } from '@ecp-caf/common-structure';\r\nimport { StructureReferType } from '../../define/data-type/structure-refer-type';\r\n\r\nexport class StructureReferTypeConvertor{\r\n\r\n    convertToObject(obj:Object,datatype:IDataType,ctxt:ISerializeContext):void{\r\n        var referType=datatype as StructureReferType;\r\n        obj[\"kind\"]=referType.getKind();\r\n        obj['referId']=referType.referId;\r\n        obj['code']=referType.code;\r\n        obj['name']=referType.name;\r\n    }\r\n\r\n    initFromObject(dataType:IDataType,obj:Object,ctxt:ISerializeContext):void{\r\n        var refType=dataType as StructureReferType;\r\n        refType.kind=obj['kind'];\r\n        refType.referId=obj['referId'];\r\n        refType.code=obj['code'];\r\n        refType.name=obj['name'];\r\n    }\r\n}","import { IDataTypeSerializer, ISerializeContext, IDataType } from '@ecp-caf/common-structure';\r\nimport { StructureReferTypeConvertor } from '../../../convertor/data-type/structure-refer-type-convertor';\r\nimport { StructureReferType } from '../../../define/data-type/structure-refer-type';\r\n\r\nexport class DefaultGspComponentDataTypeSerializer implements IDataTypeSerializer {\r\n    serialize(type: IDataType, ctxt: ISerializeContext): Object {\r\n        let result = new Object();\r\n        let baseConvertor = new StructureReferTypeConvertor();\r\n        baseConvertor.convertToObject(result, type, ctxt);\r\n        return result;\r\n    }\r\n\r\n    deserialize(obj: Object, ctxt: ISerializeContext): IDataType {\r\n        let result = new StructureReferType();\r\n        let baseConvertor = new StructureReferTypeConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n\r\n\r\n}","import { IDataTypeSerializerFactory, IDataTypeSerializer, DefaultDataTypeSerializerFactory } from '@ecp-caf/common-structure';\r\nimport { DefaultGspComponentDataTypeSerializer } from '../serializer/default-gsp-component-data-type-serializer';\r\nimport { GspComponentConstant } from '../../../define/gsp-component-constant';\r\n\r\nexport class DefaultGspComponentDataTypeSerializerFactory implements IDataTypeSerializerFactory {\r\n\r\n    private serializer: DefaultGspComponentDataTypeSerializer;\r\n    \r\n    get(kind: string): IDataTypeSerializer {\r\n        switch (kind) {\r\n            case  GspComponentConstant.CMP_STRUCTURED_TYPE_REF:\r\n                if (!this.serializer) {\r\n                    this.serializer = new DefaultGspComponentDataTypeSerializer();\r\n                }\r\n                return this.serializer;\r\n            default:\r\n                return new DefaultDataTypeSerializerFactory().get(kind);\r\n        }\r\n    }\r\n\r\n}","import { IGspComponentSerializeContext } from '../extension/i-gsp-component-serialize-context';\r\nimport { IDataTypeSerializerFactory, IOperationSerializerFactory, IParameterSerializerFactory, IPropertySerializerFactory, DefaultDataTypeSerializerFactory, DefaultOperationSerializerFactory, DefaultParameterSerializerFactory, DefaultPropertySerializerFactory } from '@ecp-caf/common-structure';\r\nimport { DefaultGspComponentDataTypeSerializerFactory } from './factory/default-gsp-component-data-type-serializer-factory';\r\n\r\n\r\nexport class DefaultGspComponentSerializeContext implements IGspComponentSerializeContext {\r\n    private dataTypeFactory: IDataTypeSerializerFactory;\r\n    private operationFactory: IOperationSerializerFactory;\r\n    private parameterFactory: IParameterSerializerFactory;\r\n    private propertyFactory: IPropertySerializerFactory;\r\n    // private gspComponentFactory: IGspComponentSerializerFactory;\r\n\r\n    getDataTypeSerializerFactory(): IDataTypeSerializerFactory {\r\n        if (!this.dataTypeFactory) {\r\n            this.dataTypeFactory = new DefaultGspComponentDataTypeSerializerFactory();\r\n        }\r\n        return this.dataTypeFactory;\r\n    }\r\n\r\n    getOperationSerializerFactory(): IOperationSerializerFactory {\r\n        if (!this.operationFactory) {\r\n            this.operationFactory = new DefaultOperationSerializerFactory();\r\n        }\r\n        return this.operationFactory;\r\n    }\r\n\r\n    getParameterSerializerFactory(): IParameterSerializerFactory {\r\n        if (!this.parameterFactory) {\r\n            this.parameterFactory = new DefaultParameterSerializerFactory();\r\n        }\r\n        return this.parameterFactory;\r\n    }\r\n\r\n    getPropertySerializerFactory(): IPropertySerializerFactory {\r\n        if (!this.propertyFactory) {\r\n            this.propertyFactory = new DefaultPropertySerializerFactory();\r\n        }\r\n        return this.propertyFactory;\r\n    }\r\n\r\n    // getGspComponentSerializerFactory(): IGspComponentSerializerFactory {\r\n    //     if (!this.gspComponentFactory) {\r\n    //         this.gspComponentFactory = new DefaultGspComponentSerializerFactory();\r\n    //     }\r\n    //     return this.gspComponentFactory;\r\n    // }\r\n\r\n}","import { IGspComponentSerializer } from '../../extension/serializer/i-gsp-component-serializer';\r\nimport { GspComponent } from '../../../define/gsp-component';\r\nimport { IGspComponentSerializeContext } from '../../extension/i-gsp-component-serialize-context';\r\nimport { GspComponentConvertor } from '../../../convertor/gsp-component-convertor';\r\n\r\nexport class DefaultGspComponentSerializer implements IGspComponentSerializer {\r\n    serialize(component: GspComponent, ctxt: IGspComponentSerializeContext): Object {\r\n        let result = new Object();\r\n        //ä½¿ç¨åºæ¬çåºååå¨\r\n        let baseConvertor = new GspComponentConvertor();\r\n        baseConvertor.convertToObject(result, component, ctxt);\r\n        //Cando:å¢å èªå·±å¯¹Objectçæ©å±\r\n        return result;\r\n    }    \r\n\r\n    deserialize(obj: Object, ctxt: IGspComponentSerializeContext):GspComponent {\r\n        let result=new GspComponent();\r\n        let baseConvertor=new GspComponentConvertor();\r\n        baseConvertor.initFromObject(result,obj,ctxt);\r\n        return result;\r\n    }\r\n\r\n\r\n}","import { IGspComponentSerializerFactory } from '../../extension/factory/i-gsp-component-serializer-factory';\r\nimport { IGspComponentSerializer } from '../../extension/serializer/i-gsp-component-serializer';\r\nimport { DefaultGspComponentSerializer } from '../serializer/default-gsp-component-serializer';\r\n\r\nexport class DefaultGspComponentSerializerFactory implements IGspComponentSerializerFactory {\r\n    private serializerDict: { [key: string]: IGspComponentSerializer } = {};\r\n\r\n    get(kind: string): IGspComponentSerializer {\r\n        switch (kind) {\r\n            case \"Default\":\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultGspComponentSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(`æªå¹éå°ç±»åä¸º${kind}çåºååå¨!`);\r\n\r\n        }\r\n        return this.serializerDict[kind];\r\n    }\r\n\r\n}","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, mergeMap } from 'rxjs/operators';\r\nimport { DefaultSerializeContext, IDataType, CommonStructureDTService, Operation, CollectionType, MapType, EntityObject, CommonStructure, StructuredType, DataType, PrimitiveType } from '@ecp-caf/common-structure';\r\nimport { DefaultGspComponentSerializer } from '../serialize-context/default/serializer/default-gsp-component-serializer';\r\nimport { DefaultGspComponentSerializeContext } from '../serialize-context/default/default-gsp-component-serialize-context';\r\nimport { GspComponent } from '../define/gsp-component';\r\nimport { StructureReferType } from '../define/data-type/structure-refer-type';\r\nimport { RefStructureInfo } from '../define/ref-structure-info';\r\n\r\n\r\n@Injectable()\r\nexport class CommonComponentService {\r\n\r\n    private commom_component_url = '/api/runtime/sys/v1.0/common-component';\r\n\r\n\r\n    constructor(private http: HttpClient, private structureSvc: CommonStructureDTService) { }\r\n\r\n\r\n    getComponent(componentId: string, headers: HttpHeaders): Observable<any> {\r\n        let url = this.commom_component_url + '?componentId=' + componentId;\r\n        return this.http.get(url, { headers: headers }).pipe(map(cmpObj => {\r\n            let serializer: DefaultGspComponentSerializer = new DefaultGspComponentSerializer();\r\n            let ctxt: DefaultGspComponentSerializeContext = new DefaultGspComponentSerializeContext();\r\n            let cmp: GspComponent = serializer.deserialize(cmpObj, ctxt);\r\n            return cmp;\r\n        }))\r\n    }\r\n\r\n    /**\r\n     * è·åæä»¶ä¸­æä½åæ°çSchema\r\n     * @param componentId æä»¶Id\r\n     * @param operationCode æä½ç¼å·\r\n     * @param paramCode åæ°ç¼å·\r\n     * @param headers è¯·æ±headerï¼åºåå«sessionIdç­å¿éåæ°\r\n     */\r\n    getParamSchema(componentId: string, operationCode: string, paramCode: string, headers: HttpHeaders): Observable<any> {\r\n        let url = this.commom_component_url + '?componentId=' + componentId;\r\n        return this.http.get<any>(url, { headers: headers }).pipe(mergeMap(cmpObj => {\r\n            let serializer: DefaultGspComponentSerializer = new DefaultGspComponentSerializer();\r\n            let ctxt: DefaultGspComponentSerializeContext = new DefaultGspComponentSerializeContext();\r\n            let cmp: GspComponent = serializer.deserialize(cmpObj, ctxt);\r\n            let op: Operation = cmp.operations.find(x => x.code == operationCode);\r\n            if (op == null) {\r\n                throw new Error(`CommonComponent Operation NotFoundï¼OperationCode: ${operationCode}`);\r\n            }\r\n            let param = op.parameters.find(x => x.code == paramCode);\r\n            if (param == null) {\r\n                throw new Error(`CommonComponent Parameter NotFoundï¼ParameterCode: ${paramCode}`);\r\n            }\r\n            let paramType = param.parameterType;\r\n            let result: IDataType;\r\n            //å¼ç¨ç±»å\r\n            if (paramType instanceof StructureReferType) {\r\n                return this.getStructureReferType(cmp, paramType, headers);\r\n            }\r\n            //åè¡¨ç±»å\r\n            else if (paramType instanceof CollectionType) {\r\n                return this.getCollectionType(cmp, paramType, headers);\r\n            }\r\n            //å­å¸ç±»å\r\n            else if (paramType instanceof MapType) {\r\n                return this.getMapType(cmp, paramType, headers);\r\n            }\r\n            //åºæ¬ç±»å\r\n            else {\r\n                return of(paramType);\r\n            }\r\n        }));\r\n    };\r\n\r\n    /**\r\n     * è·åæä»¶ä¸­æä½è¿åå¼çSchema\r\n     * @param componentId æä»¶Id\r\n     * @param operationCode æä½ç¼å·\r\n     * @param headers è¯·æ±headerï¼åºåå«sessionIdç­å¿éåæ°\r\n     */\r\n    getReturnValueSchema(componentId: string, operationCode: string, headers: HttpHeaders): Observable<any> {\r\n        let url = this.commom_component_url + '?componentId=' + componentId;\r\n        return this.http.get<any>(url, { headers: headers }).pipe(mergeMap(cmpObj => {\r\n            let serializer: DefaultGspComponentSerializer = new DefaultGspComponentSerializer();\r\n            let ctxt: DefaultGspComponentSerializeContext = new DefaultGspComponentSerializeContext();\r\n            let cmp: GspComponent = serializer.deserialize(cmpObj, ctxt);\r\n            let op: Operation = cmp.operations.find(x => x.code == operationCode);\r\n            if (op == null) {\r\n                throw new Error(`CommonComponent Operation NotFoundï¼OperationCode: ${operationCode}`);\r\n            }\r\n            let returnType = op.returnType;\r\n            let result: IDataType;\r\n            //å¼ç¨ç±»å\r\n            if (returnType instanceof StructureReferType) {\r\n                return this.getStructureReferType(cmp, returnType, headers);\r\n            }\r\n            //åè¡¨ç±»å\r\n            else if (returnType instanceof CollectionType) {\r\n                return this.getCollectionType(cmp, returnType, headers);\r\n            }\r\n            //å­å¸ç±»å\r\n            else if (returnType instanceof MapType) {\r\n                return this.getMapType(cmp, returnType, headers);\r\n            }\r\n            //åºæ¬ç±»å\r\n            else {\r\n                return of(returnType);\r\n            }\r\n        }\r\n        ));\r\n    }\r\n\r\n\r\n    private getCollectionType(cmp: GspComponent, dataType: CollectionType, headers: HttpHeaders): Observable<CollectionType> {\r\n        let elementType = dataType.elementType;\r\n        if (elementType instanceof StructureReferType) {\r\n            return this.getStructureReferType(cmp, elementType, headers).pipe(map(structuredType => {\r\n                dataType.elementType = structuredType\r\n                return dataType;\r\n            }))\r\n        }\r\n        else if (elementType instanceof PrimitiveType) {\r\n            return of(dataType);\r\n        }\r\n        else {\r\n            throw new Error(`ä¸æ¯æçåè¡¨é¡¹ç±»å: ${elementType.getKind()}`);\r\n        }\r\n    }\r\n\r\n\r\n    private getMapType(cmp: GspComponent, dataType: MapType, headers: HttpHeaders): Observable<MapType> {\r\n        let valueType = dataType.valueType;\r\n        if (valueType instanceof StructureReferType) {\r\n            return this.getStructureReferType(cmp, valueType, headers).pipe(map(structuredType => {\r\n                dataType.valueType = structuredType;\r\n                return dataType;\r\n            }))\r\n        }\r\n        else if (valueType instanceof PrimitiveType) {\r\n            return of(dataType);\r\n        }\r\n        else if (valueType instanceof CollectionType) {\r\n            return this.getCollectionType(cmp, valueType, headers).pipe(map(collectionType => {\r\n                dataType.valueType = collectionType;\r\n                return dataType;\r\n            }))\r\n\r\n        }\r\n        else {\r\n            throw new Error(`ä¸æ¯æçåè¡¨é¡¹ç±»å: ${valueType.getKind()}`);\r\n        }\r\n    }\r\n\r\n\r\n    private getStructureReferType(cmp: GspComponent, referType: StructureReferType, headers: HttpHeaders): Observable<StructuredType> {\r\n        let refInfo: RefStructureInfo = cmp.refStructures.find(x => x.id == referType.referId);\r\n        return this.structureSvc.get(refInfo.referType, refInfo.referId, headers).pipe(map(structureObj => {\r\n            //ä½¿ç¨é»è®¤serializeContextè¿è¡ååºåå\r\n            let serializeCtxt = new DefaultSerializeContext();\r\n            let kind = structureObj['kind'];\r\n            let serializer = serializeCtxt.getStructureSerializerFactory().get(kind);\r\n            let structure = serializer.deserialize(structureObj, serializeCtxt) as CommonStructure;\r\n            let structuredTypeId = refInfo.structuredTypeId;\r\n            let allStructures = this.getAllStructures(structure);\r\n            let referType = allStructures.find(x => x.id == structuredTypeId);\r\n            return referType;\r\n        }));\r\n    }\r\n\r\n    private getAllStructures(structure: CommonStructure) {\r\n        let array: Array<StructuredType> = new Array<StructuredType>();\r\n        if (structure.structuredTypes != null) {\r\n            array = array.concat(structure.structuredTypes);\r\n        }\r\n        if (structure.refStructures != null) {\r\n            structure.refStructures.forEach(refStructure => {\r\n                if (refStructure.structuredTypes != null) {\r\n                    array = array.concat(refStructure.structuredTypes);\r\n                }\r\n            })\r\n        }\r\n        return array;\r\n    }\r\n\r\n\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { CommonComponentService } from './service/common-component.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule\r\n  ],\r\n  declarations: [],\r\n  providers:[CommonComponentService],\r\n  exports:[]\r\n})\r\nexport class CommonComponentModule { }\r\n"],"names":["tslib_1.__extends","DataType","DefaultDataTypeSerializerFactory","DefaultOperationSerializerFactory","DefaultParameterSerializerFactory","DefaultPropertySerializerFactory","http","map","mergeMap","CollectionType","MapType","of","PrimitiveType","DefaultSerializeContext","Injectable","HttpClient","CommonStructureDTService","NgModule","CommonModule","HttpClientModule"],"mappings":"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"}
