{"version":3,"sources":["ng://@gsp-cmp/common-component/define/gsp-component.ts","node_modules/tslib/tslib.es6.js","ng://@gsp-cmp/common-component/define/gsp-component-constant.ts","ng://@gsp-cmp/common-component/define/data-type/structure-refer-type.ts","ng://@gsp-cmp/common-component/define/ref-structure-info.ts","ng://@gsp-cmp/common-component/convertor/util/ref-structure-util.ts","ng://@gsp-cmp/common-component/convertor/gsp-component-convertor.ts","ng://@gsp-cmp/common-component/convertor/data-type/structure-refer-type-convertor.ts","ng://@gsp-cmp/common-component/serialize-context/default/serializer/default-gsp-component-data-type-serializer.ts","ng://@gsp-cmp/common-component/serialize-context/default/factory/default-gsp-component-data-type-serializer-factory.ts","ng://@gsp-cmp/common-component/serialize-context/default/default-gsp-component-serialize-context.ts","ng://@gsp-cmp/common-component/serialize-context/default/serializer/default-gsp-component-serializer.ts","ng://@gsp-cmp/common-component/serialize-context/default/factory/default-gsp-component-serializer-factory.ts","ng://@gsp-cmp/common-component/service/common-component.service.ts","ng://@gsp-cmp/common-component/common-component.module.ts"],"names":["GspComponent","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","GspComponentConstant","CMP_STRUCTURED_TYPE_REF","__extends","__","this","constructor","prototype","create","tslib_1.__extends","DataType","StructureReferType","getKeys","Error","getValue","key","_this","_super","call","kind","RefStructureInfo","RefStructureUtil","convertToObject","refInfo","result","id","referId","referType","referCode","structuredTypeId","code","name","initFromObject","obj","GspComponentConvertor","component","ctxt","description","application","serviceUnit","version","operations","forEach","op","opObj","getOperationSerializerFactory","get","serialize","push","refStructures","refObj","operationObj","operation","deserialize","StructureReferTypeConvertor","datatype","getKind","dataType","refType","DefaultGspComponentDataTypeSerializer","type","DefaultGspComponentDataTypeSerializerFactory","serializer","DefaultDataTypeSerializerFactory","DefaultGspComponentSerializeContext","getDataTypeSerializerFactory","dataTypeFactory","operationFactory","DefaultOperationSerializerFactory","getParameterSerializerFactory","parameterFactory","DefaultParameterSerializerFactory","getPropertySerializerFactory","propertyFactory","DefaultPropertySerializerFactory","DefaultGspComponentSerializer","DefaultGspComponentSerializerFactory","serializerDict","CommonComponentService","getComponent","componentId","headers","url","commom_component_url","http","pipe","map","cmpObj","getParamSchema","operationCode","paramCode","mergeMap","cmp","find","x","param","parameters","paramType","parameterType","getStructureReferType","CollectionType","getCollectionType","MapType","getMapType","of","getReturnValueSchema","returnType","elementType","structuredType","PrimitiveType","valueType","collectionType","structureSvc","structureObj","serializeCtxt","DefaultSerializeContext","structure","getStructureSerializerFactory","getAllStructures","array","structuredTypes","concat","refStructure","Injectable","HttpClient","CommonStructureDTService","CommonComponentModule","NgModule","args","imports","CommonModule","HttpClientModule","declarations","providers","exports"],"mappings":"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","sourcesContent":["import { Operation, StructuredType } from '@ecp-caf/common-structure';\r\nimport { RefStructureInfo as RefStructureInfo } from './ref-structure-info';\r\n\r\nexport class GspComponent {\r\n    id: string;\r\n    code: string;\r\n    name: string;\r\n    description: string;\r\n    application: string;\r\n    serviceUnit: string;\r\n    version: string;\r\n\r\n    /**\r\n     * æä»¶æä½åè¡¨\r\n     */\r\n    operations: Array<Operation>;\r\n    \r\n    /**\r\n     * æä»¶ç»æåç±»ååè¡¨ï¼æä»¶æ¬èº«çdtoåè¡¨ï¼\r\n     */\r\n    structuredTypes: Array<StructuredType>;\r\n    \r\n    /**\r\n     * æä»¶å¼ç¨çç»æåç±»ååè¡¨ï¼ä»åç±»åæ°æ®ä¸­å¼ç¨ï¼\r\n     */\r\n    refStructures: Array<RefStructureInfo>;\r\n} ","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export class GspComponentConstant{\r\n   static readonly CMP_STRUCTURED_TYPE_REF:string=\"CmpStructureTypeRef\";\r\n\r\n}","import { IDataType, DataType } from '@ecp-caf/common-structure';\r\nimport { GspComponentConstant } from '../gsp-component-constant';\r\n\r\nexport class StructureReferType extends DataType implements IDataType {\r\n    getKeys(): any[] {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    getValue(key: any) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    constructor(){\r\n      super();\r\n      this.kind=GspComponentConstant.CMP_STRUCTURED_TYPE_REF;\r\n    }\r\n\r\n\r\n    /**\r\n     * å¼ç¨çreferçid\r\n     */\r\n\r\n    referId: string;\r\n    /**\r\n     * code\r\n     */\r\n\r\n    code: string;\r\n    /**\r\n     * name\r\n     */\r\n    name: string;\r\n\r\n}","/**\r\n * å¼ç¨çåæ°æ®structureä¿¡æ¯\r\n */\r\nexport class RefStructureInfo {\r\n\r\n    /**\r\n     * structureInfoçå¯ä¸æ è¯\r\n     */\r\n    id: string;\r\n\r\n    /**\r\n     * structureæå±åæ°æ®çç±»åå¨ç§°ï¼å¦GSPViewModel\r\n     */\r\n    referType: string;\r\n\r\n    /**\r\n     * æå±åæ°æ®id\r\n     */\r\n    referId: string;\r\n\r\n    /**\r\n     * æå±åæ°æ®Code\r\n     */\r\n    referCode: string;\r\n\r\n\r\n    /**\r\n     * å¼ç¨çstucturedType Id\r\n     */\r\n    structuredTypeId: string\r\n\r\n    /**\r\n     * å¼ç¨çç»æçCode\r\n     */\r\n    code: string;\r\n\r\n    /**\r\n     * å¼ç¨çç»æçName\r\n     */\r\n    name: string;\r\n\r\n}","import { RefStructureInfo } from '../../define/ref-structure-info';\r\n\r\nexport class RefStructureUtil {\r\n\r\n    static convertToObject(refInfo: RefStructureInfo): Object {\r\n        let result = new Object();\r\n        result[\"id\"] = refInfo.id;\r\n        result[\"referId\"] = refInfo.referId;\r\n        result[\"referType\"] = refInfo.referType;\r\n        result[\"referCode\"] = refInfo.referCode;\r\n        result[\"structuredTypeId\"] = refInfo.structuredTypeId;\r\n        result[\"code\"] = refInfo.code;\r\n        result[\"name\"] = refInfo.name;\r\n        return result;\r\n    }\r\n\r\n\r\n    static initFromObject(obj: Object): RefStructureInfo {\r\n        let result = new RefStructureInfo();\r\n        result.id = obj['id'];\r\n        result.referId = obj['referId'];\r\n        result.referType = obj['referType'];\r\n        result.referCode = obj['referCode'];\r\n        result.structuredTypeId = obj['structuredTypeId'];\r\n        result.code = obj['code'];\r\n        result.name = obj['name'];\r\n        return result;\r\n\r\n    }\r\n}","import { RefStructureUtil } from './util/ref-structure-util';\r\nimport { GspComponent } from '../define/gsp-component';\r\nimport { IGspComponentSerializeContext } from '../serialize-context/extension/i-gsp-component-serialize-context';\r\nimport { Operation } from '@ecp-caf/common-structure';\r\nimport { RefStructureInfo } from '../define/ref-structure-info';\r\n\r\nexport class GspComponentConvertor {\r\n\r\n    convertToObject(obj: Object, component: GspComponent, ctxt: IGspComponentSerializeContext): void {\r\n        obj['id'] = component.id;\r\n        obj['code'] = component.code;\r\n        obj['name'] = component.name;\r\n        obj['description'] = component.description;\r\n        obj['application'] = component.application;\r\n        obj['serviceUnit'] = component.serviceUnit;\r\n        obj['version'] = component.version;\r\n        //Operations\r\n        obj['operations'] = new Array<Object>();\r\n        if (component.operations) {\r\n            component.operations.forEach(op => {\r\n                var kind=op['kind'];\r\n                var serializer=ctxt.getOperationSerializerFactory().get(kind);\r\n                var opObj=serializer.serialize(op,ctxt);\r\n                obj['operations'].push(opObj);\r\n            });\r\n        }\r\n        //StructuredTypes\r\n        // obj['structuredTypes'] = new Array<Object>();\r\n        // if (component.structuredTypes) {\r\n        //     component.structuredTypes.forEach(structuredType => {\r\n        //         var kind=structuredType.kind;\r\n        //         var serializer=ctxt.getDataTypeSerializerFactory().get(kind);\r\n        //         var structuredTypeObj=serializer.serialize(structuredType,ctxt);\r\n        //         obj['structuredTypes'].push(structuredTypeObj);\r\n        //     });\r\n        // }\r\n        //refStructures\r\n        obj['refStructures']=new Array<object>();\r\n        if(component.refStructures){\r\n            component.refStructures.forEach(refInfo=>{\r\n                let refObj=RefStructureUtil.convertToObject(refInfo);\r\n                obj['refStructures'].push(refObj);\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    initFromObject(component: GspComponent, obj: Object, ctxt: IGspComponentSerializeContext): void {\r\n        component.id = obj['id'];\r\n        component.code=obj['code'];\r\n        component.name = obj['name'];\r\n        component.description = obj['description'];\r\n        component.application = obj['application'];\r\n        component.serviceUnit = obj['serviceUnit'];\r\n        component.version = obj['version'];\r\n        //operations\r\n        if (obj['operations']) {\r\n            component.operations = new Array<Operation>();\r\n            obj['operations'].forEach(operationObj => {\r\n                var kind=operationObj['kind'];\r\n                var serializer=ctxt.getOperationSerializerFactory().get(kind);\r\n                var operation=serializer.deserialize(operationObj,ctxt);\r\n                component.operations.push(operation);\r\n            });\r\n        }\r\n        //structuredTypes\r\n        // if (obj['structuredTypes']) {\r\n        //     component.structuredTypes = new Array<StructuredType>();\r\n        //     obj['structuredTypes'].forEach(structureObj => {\r\n        //         var kind=structureObj['kind'];\r\n        //         var serializer=ctxt.getDataTypeSerializerFactory().get(kind);\r\n        //         var structuredType=serializer.deserialize(structureObj,ctxt) as StructuredType;\r\n        //         component.structuredTypes.push(structuredType);\r\n        //     });\r\n        // }\r\n        //refStructures\r\n        if(obj['refStructures']){\r\n            component.refStructures=new Array<RefStructureInfo>();\r\n            obj['refStructures'].forEach(refObj=>{\r\n                let refInfo=RefStructureUtil.initFromObject(refObj);\r\n                component.refStructures.push(refInfo);\r\n            })\r\n        }\r\n\r\n    }\r\n}","import { IDataType, ISerializeContext } from '@ecp-caf/common-structure';\r\nimport { StructureReferType } from '../../define/data-type/structure-refer-type';\r\n\r\nexport class StructureReferTypeConvertor{\r\n\r\n    convertToObject(obj:Object,datatype:IDataType,ctxt:ISerializeContext):void{\r\n        var referType=datatype as StructureReferType;\r\n        obj[\"kind\"]=referType.getKind();\r\n        obj['referId']=referType.referId;\r\n        obj['code']=referType.code;\r\n        obj['name']=referType.name;\r\n    }\r\n\r\n    initFromObject(dataType:IDataType,obj:Object,ctxt:ISerializeContext):void{\r\n        var refType=dataType as StructureReferType;\r\n        refType.kind=obj['kind'];\r\n        refType.referId=obj['referId'];\r\n        refType.code=obj['code'];\r\n        refType.name=obj['name'];\r\n    }\r\n}","import { IDataTypeSerializer, ISerializeContext, IDataType } from '@ecp-caf/common-structure';\r\nimport { StructureReferTypeConvertor } from '../../../convertor/data-type/structure-refer-type-convertor';\r\nimport { StructureReferType } from '../../../define/data-type/structure-refer-type';\r\n\r\nexport class DefaultGspComponentDataTypeSerializer implements IDataTypeSerializer {\r\n    serialize(type: IDataType, ctxt: ISerializeContext): Object {\r\n        let result = new Object();\r\n        let baseConvertor = new StructureReferTypeConvertor();\r\n        baseConvertor.convertToObject(result, type, ctxt);\r\n        return result;\r\n    }\r\n\r\n    deserialize(obj: Object, ctxt: ISerializeContext): IDataType {\r\n        let result = new StructureReferType();\r\n        let baseConvertor = new StructureReferTypeConvertor();\r\n        baseConvertor.initFromObject(result, obj, ctxt);\r\n        return result;\r\n    }\r\n\r\n\r\n}","import { IDataTypeSerializerFactory, IDataTypeSerializer, DefaultDataTypeSerializerFactory } from '@ecp-caf/common-structure';\r\nimport { DefaultGspComponentDataTypeSerializer } from '../serializer/default-gsp-component-data-type-serializer';\r\nimport { GspComponentConstant } from '../../../define/gsp-component-constant';\r\n\r\nexport class DefaultGspComponentDataTypeSerializerFactory implements IDataTypeSerializerFactory {\r\n\r\n    private serializer: DefaultGspComponentDataTypeSerializer;\r\n    \r\n    get(kind: string): IDataTypeSerializer {\r\n        switch (kind) {\r\n            case  GspComponentConstant.CMP_STRUCTURED_TYPE_REF:\r\n                if (!this.serializer) {\r\n                    this.serializer = new DefaultGspComponentDataTypeSerializer();\r\n                }\r\n                return this.serializer;\r\n            default:\r\n                return new DefaultDataTypeSerializerFactory().get(kind);\r\n        }\r\n    }\r\n\r\n}","import { IGspComponentSerializeContext } from '../extension/i-gsp-component-serialize-context';\r\nimport { IDataTypeSerializerFactory, IOperationSerializerFactory, IParameterSerializerFactory, IPropertySerializerFactory, DefaultDataTypeSerializerFactory, DefaultOperationSerializerFactory, DefaultParameterSerializerFactory, DefaultPropertySerializerFactory } from '@ecp-caf/common-structure';\r\nimport { DefaultGspComponentDataTypeSerializerFactory } from './factory/default-gsp-component-data-type-serializer-factory';\r\n\r\n\r\nexport class DefaultGspComponentSerializeContext implements IGspComponentSerializeContext {\r\n    private dataTypeFactory: IDataTypeSerializerFactory;\r\n    private operationFactory: IOperationSerializerFactory;\r\n    private parameterFactory: IParameterSerializerFactory;\r\n    private propertyFactory: IPropertySerializerFactory;\r\n    // private gspComponentFactory: IGspComponentSerializerFactory;\r\n\r\n    getDataTypeSerializerFactory(): IDataTypeSerializerFactory {\r\n        if (!this.dataTypeFactory) {\r\n            this.dataTypeFactory = new DefaultGspComponentDataTypeSerializerFactory();\r\n        }\r\n        return this.dataTypeFactory;\r\n    }\r\n\r\n    getOperationSerializerFactory(): IOperationSerializerFactory {\r\n        if (!this.operationFactory) {\r\n            this.operationFactory = new DefaultOperationSerializerFactory();\r\n        }\r\n        return this.operationFactory;\r\n    }\r\n\r\n    getParameterSerializerFactory(): IParameterSerializerFactory {\r\n        if (!this.parameterFactory) {\r\n            this.parameterFactory = new DefaultParameterSerializerFactory();\r\n        }\r\n        return this.parameterFactory;\r\n    }\r\n\r\n    getPropertySerializerFactory(): IPropertySerializerFactory {\r\n        if (!this.propertyFactory) {\r\n            this.propertyFactory = new DefaultPropertySerializerFactory();\r\n        }\r\n        return this.propertyFactory;\r\n    }\r\n\r\n    // getGspComponentSerializerFactory(): IGspComponentSerializerFactory {\r\n    //     if (!this.gspComponentFactory) {\r\n    //         this.gspComponentFactory = new DefaultGspComponentSerializerFactory();\r\n    //     }\r\n    //     return this.gspComponentFactory;\r\n    // }\r\n\r\n}","import { IGspComponentSerializer } from '../../extension/serializer/i-gsp-component-serializer';\r\nimport { GspComponent } from '../../../define/gsp-component';\r\nimport { IGspComponentSerializeContext } from '../../extension/i-gsp-component-serialize-context';\r\nimport { GspComponentConvertor } from '../../../convertor/gsp-component-convertor';\r\n\r\nexport class DefaultGspComponentSerializer implements IGspComponentSerializer {\r\n    serialize(component: GspComponent, ctxt: IGspComponentSerializeContext): Object {\r\n        let result = new Object();\r\n        //ä½¿ç¨åºæ¬çåºååå¨\r\n        let baseConvertor = new GspComponentConvertor();\r\n        baseConvertor.convertToObject(result, component, ctxt);\r\n        //Cando:å¢å èªå·±å¯¹Objectçæ©å±\r\n        return result;\r\n    }    \r\n\r\n    deserialize(obj: Object, ctxt: IGspComponentSerializeContext):GspComponent {\r\n        let result=new GspComponent();\r\n        let baseConvertor=new GspComponentConvertor();\r\n        baseConvertor.initFromObject(result,obj,ctxt);\r\n        return result;\r\n    }\r\n\r\n\r\n}","import { IGspComponentSerializerFactory } from '../../extension/factory/i-gsp-component-serializer-factory';\r\nimport { IGspComponentSerializer } from '../../extension/serializer/i-gsp-component-serializer';\r\nimport { DefaultGspComponentSerializer } from '../serializer/default-gsp-component-serializer';\r\n\r\nexport class DefaultGspComponentSerializerFactory implements IGspComponentSerializerFactory {\r\n    private serializerDict: { [key: string]: IGspComponentSerializer } = {};\r\n\r\n    get(kind: string): IGspComponentSerializer {\r\n        switch (kind) {\r\n            case \"Default\":\r\n                if (!this.serializerDict[kind]) {\r\n                    var serializer = new DefaultGspComponentSerializer();\r\n                    this.serializerDict[kind] = serializer;\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(`æªå¹éå°ç±»åä¸º${kind}çåºååå¨!`);\r\n\r\n        }\r\n        return this.serializerDict[kind];\r\n    }\r\n\r\n}","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, mergeMap } from 'rxjs/operators';\r\nimport { DefaultSerializeContext, IDataType, CommonStructureDTService, Operation, CollectionType, MapType, EntityObject, CommonStructure, StructuredType, DataType, PrimitiveType } from '@ecp-caf/common-structure';\r\nimport { DefaultGspComponentSerializer } from '../serialize-context/default/serializer/default-gsp-component-serializer';\r\nimport { DefaultGspComponentSerializeContext } from '../serialize-context/default/default-gsp-component-serialize-context';\r\nimport { GspComponent } from '../define/gsp-component';\r\nimport { StructureReferType } from '../define/data-type/structure-refer-type';\r\nimport { RefStructureInfo } from '../define/ref-structure-info';\r\n\r\n\r\n@Injectable()\r\nexport class CommonComponentService {\r\n\r\n    private commom_component_url = '/api/runtime/sys/v1.0/common-component';\r\n\r\n\r\n    constructor(private http: HttpClient, private structureSvc: CommonStructureDTService) { }\r\n\r\n\r\n    getComponent(componentId: string, headers: HttpHeaders): Observable<any> {\r\n        let url = this.commom_component_url + '?componentId=' + componentId;\r\n        return this.http.get(url, { headers: headers }).pipe(map(cmpObj => {\r\n            let serializer: DefaultGspComponentSerializer = new DefaultGspComponentSerializer();\r\n            let ctxt: DefaultGspComponentSerializeContext = new DefaultGspComponentSerializeContext();\r\n            let cmp: GspComponent = serializer.deserialize(cmpObj, ctxt);\r\n            return cmp;\r\n        }))\r\n    }\r\n\r\n    /**\r\n     * è·åæä»¶ä¸­æä½åæ°çSchema\r\n     * @param componentId æä»¶Id\r\n     * @param operationCode æä½ç¼å·\r\n     * @param paramCode åæ°ç¼å·\r\n     * @param headers è¯·æ±headerï¼åºåå«sessionIdç­å¿éåæ°\r\n     */\r\n    getParamSchema(componentId: string, operationCode: string, paramCode: string, headers: HttpHeaders): Observable<any> {\r\n        let url = this.commom_component_url + '?componentId=' + componentId;\r\n        return this.http.get<any>(url, { headers: headers }).pipe(mergeMap(cmpObj => {\r\n            let serializer: DefaultGspComponentSerializer = new DefaultGspComponentSerializer();\r\n            let ctxt: DefaultGspComponentSerializeContext = new DefaultGspComponentSerializeContext();\r\n            let cmp: GspComponent = serializer.deserialize(cmpObj, ctxt);\r\n            let op: Operation = cmp.operations.find(x => x.code == operationCode);\r\n            if (op == null) {\r\n                throw new Error(`CommonComponent Operation NotFoundï¼OperationCode: ${operationCode}`);\r\n            }\r\n            let param = op.parameters.find(x => x.code == paramCode);\r\n            if (param == null) {\r\n                throw new Error(`CommonComponent Parameter NotFoundï¼ParameterCode: ${paramCode}`);\r\n            }\r\n            let paramType = param.parameterType;\r\n            let result: IDataType;\r\n            //å¼ç¨ç±»å\r\n            if (paramType instanceof StructureReferType) {\r\n                return this.getStructureReferType(cmp, paramType, headers);\r\n            }\r\n            //åè¡¨ç±»å\r\n            else if (paramType instanceof CollectionType) {\r\n                return this.getCollectionType(cmp, paramType, headers);\r\n            }\r\n            //å­å¸ç±»å\r\n            else if (paramType instanceof MapType) {\r\n                return this.getMapType(cmp, paramType, headers);\r\n            }\r\n            //åºæ¬ç±»å\r\n            else {\r\n                return of(paramType);\r\n            }\r\n        }));\r\n    };\r\n\r\n    /**\r\n     * è·åæä»¶ä¸­æä½è¿åå¼çSchema\r\n     * @param componentId æä»¶Id\r\n     * @param operationCode æä½ç¼å·\r\n     * @param headers è¯·æ±headerï¼åºåå«sessionIdç­å¿éåæ°\r\n     */\r\n    getReturnValueSchema(componentId: string, operationCode: string, headers: HttpHeaders): Observable<any> {\r\n        let url = this.commom_component_url + '?componentId=' + componentId;\r\n        return this.http.get<any>(url, { headers: headers }).pipe(mergeMap(cmpObj => {\r\n            let serializer: DefaultGspComponentSerializer = new DefaultGspComponentSerializer();\r\n            let ctxt: DefaultGspComponentSerializeContext = new DefaultGspComponentSerializeContext();\r\n            let cmp: GspComponent = serializer.deserialize(cmpObj, ctxt);\r\n            let op: Operation = cmp.operations.find(x => x.code == operationCode);\r\n            if (op == null) {\r\n                throw new Error(`CommonComponent Operation NotFoundï¼OperationCode: ${operationCode}`);\r\n            }\r\n            let returnType = op.returnType;\r\n            let result: IDataType;\r\n            //å¼ç¨ç±»å\r\n            if (returnType instanceof StructureReferType) {\r\n                return this.getStructureReferType(cmp, returnType, headers);\r\n            }\r\n            //åè¡¨ç±»å\r\n            else if (returnType instanceof CollectionType) {\r\n                return this.getCollectionType(cmp, returnType, headers);\r\n            }\r\n            //å­å¸ç±»å\r\n            else if (returnType instanceof MapType) {\r\n                return this.getMapType(cmp, returnType, headers);\r\n            }\r\n            //åºæ¬ç±»å\r\n            else {\r\n                return of(returnType);\r\n            }\r\n        }\r\n        ));\r\n    }\r\n\r\n\r\n    private getCollectionType(cmp: GspComponent, dataType: CollectionType, headers: HttpHeaders): Observable<CollectionType> {\r\n        let elementType = dataType.elementType;\r\n        if (elementType instanceof StructureReferType) {\r\n            return this.getStructureReferType(cmp, elementType, headers).pipe(map(structuredType => {\r\n                dataType.elementType = structuredType\r\n                return dataType;\r\n            }))\r\n        }\r\n        else if (elementType instanceof PrimitiveType) {\r\n            return of(dataType);\r\n        }\r\n        else {\r\n            throw new Error(`ä¸æ¯æçåè¡¨é¡¹ç±»å: ${elementType.getKind()}`);\r\n        }\r\n    }\r\n\r\n\r\n    private getMapType(cmp: GspComponent, dataType: MapType, headers: HttpHeaders): Observable<MapType> {\r\n        let valueType = dataType.valueType;\r\n        if (valueType instanceof StructureReferType) {\r\n            return this.getStructureReferType(cmp, valueType, headers).pipe(map(structuredType => {\r\n                dataType.valueType = structuredType;\r\n                return dataType;\r\n            }))\r\n        }\r\n        else if (valueType instanceof PrimitiveType) {\r\n            return of(dataType);\r\n        }\r\n        else if (valueType instanceof CollectionType) {\r\n            return this.getCollectionType(cmp, valueType, headers).pipe(map(collectionType => {\r\n                dataType.valueType = collectionType;\r\n                return dataType;\r\n            }))\r\n\r\n        }\r\n        else {\r\n            throw new Error(`ä¸æ¯æçåè¡¨é¡¹ç±»å: ${valueType.getKind()}`);\r\n        }\r\n    }\r\n\r\n\r\n    private getStructureReferType(cmp: GspComponent, referType: StructureReferType, headers: HttpHeaders): Observable<StructuredType> {\r\n        let refInfo: RefStructureInfo = cmp.refStructures.find(x => x.id == referType.referId);\r\n        return this.structureSvc.get(refInfo.referType, refInfo.referId, headers).pipe(map(structureObj => {\r\n            //ä½¿ç¨é»è®¤serializeContextè¿è¡ååºåå\r\n            let serializeCtxt = new DefaultSerializeContext();\r\n            let kind = structureObj['kind'];\r\n            let serializer = serializeCtxt.getStructureSerializerFactory().get(kind);\r\n            let structure = serializer.deserialize(structureObj, serializeCtxt) as CommonStructure;\r\n            let structuredTypeId = refInfo.structuredTypeId;\r\n            let allStructures = this.getAllStructures(structure);\r\n            let referType = allStructures.find(x => x.id == structuredTypeId);\r\n            return referType;\r\n        }));\r\n    }\r\n\r\n    private getAllStructures(structure: CommonStructure) {\r\n        let array: Array<StructuredType> = new Array<StructuredType>();\r\n        if (structure.structuredTypes != null) {\r\n            array = array.concat(structure.structuredTypes);\r\n        }\r\n        if (structure.refStructures != null) {\r\n            structure.refStructures.forEach(refStructure => {\r\n                if (refStructure.structuredTypes != null) {\r\n                    array = array.concat(refStructure.structuredTypes);\r\n                }\r\n            })\r\n        }\r\n        return array;\r\n    }\r\n\r\n\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { CommonComponentService } from './service/common-component.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule\r\n  ],\r\n  declarations: [],\r\n  providers:[CommonComponentService],\r\n  exports:[]\r\n})\r\nexport class CommonComponentModule { }\r\n"]}