/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { of } from 'rxjs';
import { map, mergeMap } from 'rxjs/operators';
import { DefaultSerializeContext, CommonStructureDTService, CollectionType, MapType, PrimitiveType } from '@ecp-caf/common-structure';
import { DefaultGspComponentSerializer } from '../serialize-context/default/serializer/default-gsp-component-serializer';
import { DefaultGspComponentSerializeContext } from '../serialize-context/default/default-gsp-component-serialize-context';
import { StructureReferType } from '../define/data-type/structure-refer-type';
export class CommonComponentService {
    /**
     * @param {?} http
     * @param {?} structureSvc
     */
    constructor(http, structureSvc) {
        this.http = http;
        this.structureSvc = structureSvc;
        this.commom_component_url = '/api/runtime/sys/v1.0/common-component';
    }
    /**
     * @param {?} componentId
     * @param {?} headers
     * @return {?}
     */
    getComponent(componentId, headers) {
        /** @type {?} */
        let url = this.commom_component_url + '?componentId=' + componentId;
        return this.http.get(url, { headers: headers }).pipe(map((/**
         * @param {?} cmpObj
         * @return {?}
         */
        cmpObj => {
            /** @type {?} */
            let serializer = new DefaultGspComponentSerializer();
            /** @type {?} */
            let ctxt = new DefaultGspComponentSerializeContext();
            /** @type {?} */
            let cmp = serializer.deserialize(cmpObj, ctxt);
            return cmp;
        })));
    }
    /**
     * 获取构件中操作参数的Schema
     * @param {?} componentId 构件Id
     * @param {?} operationCode 操作编号
     * @param {?} paramCode 参数编号
     * @param {?} headers 请求header，应包含sessionId等必需参数
     * @return {?}
     */
    getParamSchema(componentId, operationCode, paramCode, headers) {
        /** @type {?} */
        let url = this.commom_component_url + '?componentId=' + componentId;
        return this.http.get(url, { headers: headers }).pipe(mergeMap((/**
         * @param {?} cmpObj
         * @return {?}
         */
        cmpObj => {
            /** @type {?} */
            let serializer = new DefaultGspComponentSerializer();
            /** @type {?} */
            let ctxt = new DefaultGspComponentSerializeContext();
            /** @type {?} */
            let cmp = serializer.deserialize(cmpObj, ctxt);
            /** @type {?} */
            let op = cmp.operations.find((/**
             * @param {?} x
             * @return {?}
             */
            x => x.code == operationCode));
            if (op == null) {
                throw new Error(`CommonComponent Operation NotFound，OperationCode: ${operationCode}`);
            }
            /** @type {?} */
            let param = op.parameters.find((/**
             * @param {?} x
             * @return {?}
             */
            x => x.code == paramCode));
            if (param == null) {
                throw new Error(`CommonComponent Parameter NotFound，ParameterCode: ${paramCode}`);
            }
            /** @type {?} */
            let paramType = param.parameterType;
            /** @type {?} */
            let result;
            //引用类型
            if (paramType instanceof StructureReferType) {
                return this.getStructureReferType(cmp, paramType, headers);
            }
            //列表类型
            else if (paramType instanceof CollectionType) {
                return this.getCollectionType(cmp, paramType, headers);
            }
            //字典类型
            else if (paramType instanceof MapType) {
                return this.getMapType(cmp, paramType, headers);
            }
            //基本类型
            else {
                return of(paramType);
            }
        })));
    }
    ;
    /**
     * 获取构件中操作返回值的Schema
     * @param {?} componentId 构件Id
     * @param {?} operationCode 操作编号
     * @param {?} headers 请求header，应包含sessionId等必需参数
     * @return {?}
     */
    getReturnValueSchema(componentId, operationCode, headers) {
        /** @type {?} */
        let url = this.commom_component_url + '?componentId=' + componentId;
        return this.http.get(url, { headers: headers }).pipe(mergeMap((/**
         * @param {?} cmpObj
         * @return {?}
         */
        cmpObj => {
            /** @type {?} */
            let serializer = new DefaultGspComponentSerializer();
            /** @type {?} */
            let ctxt = new DefaultGspComponentSerializeContext();
            /** @type {?} */
            let cmp = serializer.deserialize(cmpObj, ctxt);
            /** @type {?} */
            let op = cmp.operations.find((/**
             * @param {?} x
             * @return {?}
             */
            x => x.code == operationCode));
            if (op == null) {
                throw new Error(`CommonComponent Operation NotFound，OperationCode: ${operationCode}`);
            }
            /** @type {?} */
            let returnType = op.returnType;
            /** @type {?} */
            let result;
            //引用类型
            if (returnType instanceof StructureReferType) {
                return this.getStructureReferType(cmp, returnType, headers);
            }
            //列表类型
            else if (returnType instanceof CollectionType) {
                return this.getCollectionType(cmp, returnType, headers);
            }
            //字典类型
            else if (returnType instanceof MapType) {
                return this.getMapType(cmp, returnType, headers);
            }
            //基本类型
            else {
                return of(returnType);
            }
        })));
    }
    /**
     * @private
     * @param {?} cmp
     * @param {?} dataType
     * @param {?} headers
     * @return {?}
     */
    getCollectionType(cmp, dataType, headers) {
        /** @type {?} */
        let elementType = dataType.elementType;
        if (elementType instanceof StructureReferType) {
            return this.getStructureReferType(cmp, elementType, headers).pipe(map((/**
             * @param {?} structuredType
             * @return {?}
             */
            structuredType => {
                dataType.elementType = structuredType;
                return dataType;
            })));
        }
        else if (elementType instanceof PrimitiveType) {
            return of(dataType);
        }
        else {
            throw new Error(`不支持的列表项类型: ${elementType.getKind()}`);
        }
    }
    /**
     * @private
     * @param {?} cmp
     * @param {?} dataType
     * @param {?} headers
     * @return {?}
     */
    getMapType(cmp, dataType, headers) {
        /** @type {?} */
        let valueType = dataType.valueType;
        if (valueType instanceof StructureReferType) {
            return this.getStructureReferType(cmp, valueType, headers).pipe(map((/**
             * @param {?} structuredType
             * @return {?}
             */
            structuredType => {
                dataType.valueType = structuredType;
                return dataType;
            })));
        }
        else if (valueType instanceof PrimitiveType) {
            return of(dataType);
        }
        else if (valueType instanceof CollectionType) {
            return this.getCollectionType(cmp, valueType, headers).pipe(map((/**
             * @param {?} collectionType
             * @return {?}
             */
            collectionType => {
                dataType.valueType = collectionType;
                return dataType;
            })));
        }
        else {
            throw new Error(`不支持的列表项类型: ${valueType.getKind()}`);
        }
    }
    /**
     * @private
     * @param {?} cmp
     * @param {?} referType
     * @param {?} headers
     * @return {?}
     */
    getStructureReferType(cmp, referType, headers) {
        /** @type {?} */
        let refInfo = cmp.refStructures.find((/**
         * @param {?} x
         * @return {?}
         */
        x => x.id == referType.referId));
        return this.structureSvc.get(refInfo.referType, refInfo.referId, headers).pipe(map((/**
         * @param {?} structureObj
         * @return {?}
         */
        structureObj => {
            //使用默认serializeContext进行反序列化
            /** @type {?} */
            let serializeCtxt = new DefaultSerializeContext();
            /** @type {?} */
            let kind = structureObj['kind'];
            /** @type {?} */
            let serializer = serializeCtxt.getStructureSerializerFactory().get(kind);
            /** @type {?} */
            let structure = (/** @type {?} */ (serializer.deserialize(structureObj, serializeCtxt)));
            /** @type {?} */
            let structuredTypeId = refInfo.structuredTypeId;
            /** @type {?} */
            let allStructures = this.getAllStructures(structure);
            /** @type {?} */
            let referType = allStructures.find((/**
             * @param {?} x
             * @return {?}
             */
            x => x.id == structuredTypeId));
            return referType;
        })));
    }
    /**
     * @private
     * @param {?} structure
     * @return {?}
     */
    getAllStructures(structure) {
        /** @type {?} */
        let array = new Array();
        if (structure.structuredTypes != null) {
            array = array.concat(structure.structuredTypes);
        }
        if (structure.refStructures != null) {
            structure.refStructures.forEach((/**
             * @param {?} refStructure
             * @return {?}
             */
            refStructure => {
                if (refStructure.structuredTypes != null) {
                    array = array.concat(refStructure.structuredTypes);
                }
            }));
        }
        return array;
    }
}
CommonComponentService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CommonComponentService.ctorParameters = () => [
    { type: HttpClient },
    { type: CommonStructureDTService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    CommonComponentService.prototype.commom_component_url;
    /**
     * @type {?}
     * @private
     */
    CommonComponentService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    CommonComponentService.prototype.structureSvc;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,