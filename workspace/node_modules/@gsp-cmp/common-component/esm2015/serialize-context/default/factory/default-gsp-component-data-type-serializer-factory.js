/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DefaultDataTypeSerializerFactory } from '@ecp-caf/common-structure';
import { DefaultGspComponentDataTypeSerializer } from '../serializer/default-gsp-component-data-type-serializer';
import { GspComponentConstant } from '../../../define/gsp-component-constant';
export class DefaultGspComponentDataTypeSerializerFactory {
    /**
     * @param {?} kind
     * @return {?}
     */
    get(kind) {
        switch (kind) {
            case GspComponentConstant.CMP_STRUCTURED_TYPE_REF:
                if (!this.serializer) {
                    this.serializer = new DefaultGspComponentDataTypeSerializer();
                }
                return this.serializer;
            default:
                return new DefaultDataTypeSerializerFactory().get(kind);
        }
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    DefaultGspComponentDataTypeSerializerFactory.prototype.serializer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1nc3AtY29tcG9uZW50LWRhdGEtdHlwZS1zZXJpYWxpemVyLWZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLWNtcC9jb21tb24tY29tcG9uZW50LyIsInNvdXJjZXMiOlsic2VyaWFsaXplLWNvbnRleHQvZGVmYXVsdC9mYWN0b3J5L2RlZmF1bHQtZ3NwLWNvbXBvbmVudC1kYXRhLXR5cGUtc2VyaWFsaXplci1mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQW1ELGdDQUFnQyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDOUgsT0FBTyxFQUFFLHFDQUFxQyxFQUFFLE1BQU0sMERBQTBELENBQUM7QUFDakgsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFFOUUsTUFBTSxPQUFPLDRDQUE0Qzs7Ozs7SUFJckQsR0FBRyxDQUFDLElBQVk7UUFDWixRQUFRLElBQUksRUFBRTtZQUNWLEtBQU0sb0JBQW9CLENBQUMsdUJBQXVCO2dCQUM5QyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtvQkFDbEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLHFDQUFxQyxFQUFFLENBQUM7aUJBQ2pFO2dCQUNELE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztZQUMzQjtnQkFDSSxPQUFPLElBQUksZ0NBQWdDLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDL0Q7SUFDTCxDQUFDO0NBRUo7Ozs7OztJQWRHLGtFQUEwRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElEYXRhVHlwZVNlcmlhbGl6ZXJGYWN0b3J5LCBJRGF0YVR5cGVTZXJpYWxpemVyLCBEZWZhdWx0RGF0YVR5cGVTZXJpYWxpemVyRmFjdG9yeSB9IGZyb20gJ0BlY3AtY2FmL2NvbW1vbi1zdHJ1Y3R1cmUnO1xyXG5pbXBvcnQgeyBEZWZhdWx0R3NwQ29tcG9uZW50RGF0YVR5cGVTZXJpYWxpemVyIH0gZnJvbSAnLi4vc2VyaWFsaXplci9kZWZhdWx0LWdzcC1jb21wb25lbnQtZGF0YS10eXBlLXNlcmlhbGl6ZXInO1xyXG5pbXBvcnQgeyBHc3BDb21wb25lbnRDb25zdGFudCB9IGZyb20gJy4uLy4uLy4uL2RlZmluZS9nc3AtY29tcG9uZW50LWNvbnN0YW50JztcclxuXHJcbmV4cG9ydCBjbGFzcyBEZWZhdWx0R3NwQ29tcG9uZW50RGF0YVR5cGVTZXJpYWxpemVyRmFjdG9yeSBpbXBsZW1lbnRzIElEYXRhVHlwZVNlcmlhbGl6ZXJGYWN0b3J5IHtcclxuXHJcbiAgICBwcml2YXRlIHNlcmlhbGl6ZXI6IERlZmF1bHRHc3BDb21wb25lbnREYXRhVHlwZVNlcmlhbGl6ZXI7XHJcbiAgICBcclxuICAgIGdldChraW5kOiBzdHJpbmcpOiBJRGF0YVR5cGVTZXJpYWxpemVyIHtcclxuICAgICAgICBzd2l0Y2ggKGtpbmQpIHtcclxuICAgICAgICAgICAgY2FzZSAgR3NwQ29tcG9uZW50Q29uc3RhbnQuQ01QX1NUUlVDVFVSRURfVFlQRV9SRUY6XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc2VyaWFsaXplcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VyaWFsaXplciA9IG5ldyBEZWZhdWx0R3NwQ29tcG9uZW50RGF0YVR5cGVTZXJpYWxpemVyKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXJpYWxpemVyO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEZWZhdWx0RGF0YVR5cGVTZXJpYWxpemVyRmFjdG9yeSgpLmdldChraW5kKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59Il19