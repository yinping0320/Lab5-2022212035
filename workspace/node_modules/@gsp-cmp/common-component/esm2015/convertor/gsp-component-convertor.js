/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { RefStructureUtil } from './util/ref-structure-util';
export class GspComponentConvertor {
    /**
     * @param {?} obj
     * @param {?} component
     * @param {?} ctxt
     * @return {?}
     */
    convertToObject(obj, component, ctxt) {
        obj['id'] = component.id;
        obj['code'] = component.code;
        obj['name'] = component.name;
        obj['description'] = component.description;
        obj['application'] = component.application;
        obj['serviceUnit'] = component.serviceUnit;
        obj['version'] = component.version;
        //Operations
        obj['operations'] = new Array();
        if (component.operations) {
            component.operations.forEach((/**
             * @param {?} op
             * @return {?}
             */
            op => {
                /** @type {?} */
                var kind = op['kind'];
                /** @type {?} */
                var serializer = ctxt.getOperationSerializerFactory().get(kind);
                /** @type {?} */
                var opObj = serializer.serialize(op, ctxt);
                obj['operations'].push(opObj);
            }));
        }
        //StructuredTypes
        // obj['structuredTypes'] = new Array<Object>();
        // if (component.structuredTypes) {
        //     component.structuredTypes.forEach(structuredType => {
        //         var kind=structuredType.kind;
        //         var serializer=ctxt.getDataTypeSerializerFactory().get(kind);
        //         var structuredTypeObj=serializer.serialize(structuredType,ctxt);
        //         obj['structuredTypes'].push(structuredTypeObj);
        //     });
        // }
        //refStructures
        obj['refStructures'] = new Array();
        if (component.refStructures) {
            component.refStructures.forEach((/**
             * @param {?} refInfo
             * @return {?}
             */
            refInfo => {
                /** @type {?} */
                let refObj = RefStructureUtil.convertToObject(refInfo);
                obj['refStructures'].push(refObj);
            }));
        }
    }
    /**
     * @param {?} component
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    initFromObject(component, obj, ctxt) {
        component.id = obj['id'];
        component.code = obj['code'];
        component.name = obj['name'];
        component.description = obj['description'];
        component.application = obj['application'];
        component.serviceUnit = obj['serviceUnit'];
        component.version = obj['version'];
        //operations
        if (obj['operations']) {
            component.operations = new Array();
            obj['operations'].forEach((/**
             * @param {?} operationObj
             * @return {?}
             */
            operationObj => {
                /** @type {?} */
                var kind = operationObj['kind'];
                /** @type {?} */
                var serializer = ctxt.getOperationSerializerFactory().get(kind);
                /** @type {?} */
                var operation = serializer.deserialize(operationObj, ctxt);
                component.operations.push(operation);
            }));
        }
        //structuredTypes
        // if (obj['structuredTypes']) {
        //     component.structuredTypes = new Array<StructuredType>();
        //     obj['structuredTypes'].forEach(structureObj => {
        //         var kind=structureObj['kind'];
        //         var serializer=ctxt.getDataTypeSerializerFactory().get(kind);
        //         var structuredType=serializer.deserialize(structureObj,ctxt) as StructuredType;
        //         component.structuredTypes.push(structuredType);
        //     });
        // }
        //refStructures
        if (obj['refStructures']) {
            component.refStructures = new Array();
            obj['refStructures'].forEach((/**
             * @param {?} refObj
             * @return {?}
             */
            refObj => {
                /** @type {?} */
                let refInfo = RefStructureUtil.initFromObject(refObj);
                component.refStructures.push(refInfo);
            }));
        }
    }
}
//# sourceMappingURL=data:application/json;base64,