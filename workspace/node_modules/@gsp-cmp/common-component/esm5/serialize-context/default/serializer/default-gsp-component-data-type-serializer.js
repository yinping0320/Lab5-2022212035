/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { StructureReferTypeConvertor } from '../../../convertor/data-type/structure-refer-type-convertor';
import { StructureReferType } from '../../../define/data-type/structure-refer-type';
var DefaultGspComponentDataTypeSerializer = /** @class */ (function () {
    function DefaultGspComponentDataTypeSerializer() {
    }
    /**
     * @param {?} type
     * @param {?} ctxt
     * @return {?}
     */
    DefaultGspComponentDataTypeSerializer.prototype.serialize = /**
     * @param {?} type
     * @param {?} ctxt
     * @return {?}
     */
    function (type, ctxt) {
        /** @type {?} */
        var result = new Object();
        /** @type {?} */
        var baseConvertor = new StructureReferTypeConvertor();
        baseConvertor.convertToObject(result, type, ctxt);
        return result;
    };
    /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    DefaultGspComponentDataTypeSerializer.prototype.deserialize = /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    function (obj, ctxt) {
        /** @type {?} */
        var result = new StructureReferType();
        /** @type {?} */
        var baseConvertor = new StructureReferTypeConvertor();
        baseConvertor.initFromObject(result, obj, ctxt);
        return result;
    };
    return DefaultGspComponentDataTypeSerializer;
}());
export { DefaultGspComponentDataTypeSerializer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1nc3AtY29tcG9uZW50LWRhdGEtdHlwZS1zZXJpYWxpemVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1jbXAvY29tbW9uLWNvbXBvbmVudC8iLCJzb3VyY2VzIjpbInNlcmlhbGl6ZS1jb250ZXh0L2RlZmF1bHQvc2VyaWFsaXplci9kZWZhdWx0LWdzcC1jb21wb25lbnQtZGF0YS10eXBlLXNlcmlhbGl6ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLDZEQUE2RCxDQUFDO0FBQzFHLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBRXBGO0lBQUE7SUFnQkEsQ0FBQzs7Ozs7O0lBZkcseURBQVM7Ozs7O0lBQVQsVUFBVSxJQUFlLEVBQUUsSUFBdUI7O1lBQzFDLE1BQU0sR0FBRyxJQUFJLE1BQU0sRUFBRTs7WUFDckIsYUFBYSxHQUFHLElBQUksMkJBQTJCLEVBQUU7UUFDckQsYUFBYSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2xELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7Ozs7OztJQUVELDJEQUFXOzs7OztJQUFYLFVBQVksR0FBVyxFQUFFLElBQXVCOztZQUN4QyxNQUFNLEdBQUcsSUFBSSxrQkFBa0IsRUFBRTs7WUFDakMsYUFBYSxHQUFHLElBQUksMkJBQTJCLEVBQUU7UUFDckQsYUFBYSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2hELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFHTCw0Q0FBQztBQUFELENBQUMsQUFoQkQsSUFnQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJRGF0YVR5cGVTZXJpYWxpemVyLCBJU2VyaWFsaXplQ29udGV4dCwgSURhdGFUeXBlIH0gZnJvbSAnQGVjcC1jYWYvY29tbW9uLXN0cnVjdHVyZSc7XHJcbmltcG9ydCB7IFN0cnVjdHVyZVJlZmVyVHlwZUNvbnZlcnRvciB9IGZyb20gJy4uLy4uLy4uL2NvbnZlcnRvci9kYXRhLXR5cGUvc3RydWN0dXJlLXJlZmVyLXR5cGUtY29udmVydG9yJztcclxuaW1wb3J0IHsgU3RydWN0dXJlUmVmZXJUeXBlIH0gZnJvbSAnLi4vLi4vLi4vZGVmaW5lL2RhdGEtdHlwZS9zdHJ1Y3R1cmUtcmVmZXItdHlwZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgRGVmYXVsdEdzcENvbXBvbmVudERhdGFUeXBlU2VyaWFsaXplciBpbXBsZW1lbnRzIElEYXRhVHlwZVNlcmlhbGl6ZXIge1xyXG4gICAgc2VyaWFsaXplKHR5cGU6IElEYXRhVHlwZSwgY3R4dDogSVNlcmlhbGl6ZUNvbnRleHQpOiBPYmplY3Qge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBuZXcgT2JqZWN0KCk7XHJcbiAgICAgICAgbGV0IGJhc2VDb252ZXJ0b3IgPSBuZXcgU3RydWN0dXJlUmVmZXJUeXBlQ29udmVydG9yKCk7XHJcbiAgICAgICAgYmFzZUNvbnZlcnRvci5jb252ZXJ0VG9PYmplY3QocmVzdWx0LCB0eXBlLCBjdHh0KTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIGRlc2VyaWFsaXplKG9iajogT2JqZWN0LCBjdHh0OiBJU2VyaWFsaXplQ29udGV4dCk6IElEYXRhVHlwZSB7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IG5ldyBTdHJ1Y3R1cmVSZWZlclR5cGUoKTtcclxuICAgICAgICBsZXQgYmFzZUNvbnZlcnRvciA9IG5ldyBTdHJ1Y3R1cmVSZWZlclR5cGVDb252ZXJ0b3IoKTtcclxuICAgICAgICBiYXNlQ29udmVydG9yLmluaXRGcm9tT2JqZWN0KHJlc3VsdCwgb2JqLCBjdHh0KTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuXHJcbn0iXX0=