(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs/operators'), require('@angular/core'), require('@gsp-lcm/metadata-selector')) :
    typeof define === 'function' && define.amd ? define('@gsp-cmp/webcommand', ['exports', 'rxjs/operators', '@angular/core', '@gsp-lcm/metadata-selector'], factory) :
    (factory((global['gsp-cmp'] = global['gsp-cmp'] || {}, global['gsp-cmp'].webcommand = {}),global.rxjs.operators,global.ng.core,global.i1));
}(this, (function (exports,operators,i0,i1) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var CommandItemType = {
        MethodRefer: 0,
        Branch: 1,
        BranchCollection: 2,
    };
    CommandItemType[CommandItemType.MethodRefer] = 'MethodRefer';
    CommandItemType[CommandItemType.Branch] = 'Branch';
    CommandItemType[CommandItemType.BranchCollection] = 'BranchCollection';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CmpMethodParamConfig = /** @class */ (function () {
        function CmpMethodParamConfig() {
        }
        return CmpMethodParamConfig;
    }());
    var CmpMethodParamConfigConvert = /** @class */ (function () {
        function CmpMethodParamConfigConvert() {
        }
        /**
         * @param {?} jsonObj
         * @return {?}
         */
        CmpMethodParamConfigConvert.prototype.InitFromJobject = /**
         * @param {?} jsonObj
         * @return {?}
         */
            function (jsonObj) {
                /** @type {?} */
                var cmpMethodParamConfig = new CmpMethodParamConfig();
                cmpMethodParamConfig.ParamCode = jsonObj["ParamCode"];
                cmpMethodParamConfig.ParamName = jsonObj["ParamName"];
                cmpMethodParamConfig.ParamExpress = jsonObj["ParamExpress"];
                return cmpMethodParamConfig;
            };
        /**
         * @param {?} obj
         * @return {?}
         */
        CmpMethodParamConfigConvert.prototype.ConvertJObject = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                /** @type {?} */
                var cmpMethodParamConfig = ( /** @type {?} */(obj));
                /** @type {?} */
                var jobj = new Object();
                jobj["ParamCode"] = cmpMethodParamConfig.ParamCode;
                jobj["ParamName"] = cmpMethodParamConfig.ParamName;
                jobj["ParamExpress"] = cmpMethodParamConfig.ParamExpress;
                return jobj;
            };
        return CmpMethodParamConfigConvert;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CmpMethodRefering = /** @class */ (function () {
        function CmpMethodRefering() {
        }
        /**
         * @return {?}
         */
        CmpMethodRefering.prototype.GetItemType = /**
         * @return {?}
         */
            function () {
                return CommandItemType.MethodRefer;
            };
        /**
         * @return {?}
         */
        CmpMethodRefering.prototype.GetItemCode = /**
         * @return {?}
         */
            function () {
                return this.Code;
            };
        /**
         * @return {?}
         */
        CmpMethodRefering.prototype.GetItemName = /**
         * @return {?}
         */
            function () {
                return this.Name;
            };
        /**
         * @return {?}
         */
        CmpMethodRefering.prototype.GetItemId = /**
         * @return {?}
         */
            function () {
                return this.Id;
            };
        return CmpMethodRefering;
    }());
    var CmpMethodReferingConvert = /** @class */ (function () {
        function CmpMethodReferingConvert() {
        }
        /**
         * @param {?} jsonObj
         * @return {?}
         */
        CmpMethodReferingConvert.prototype.InitFromJobject = /**
         * @param {?} jsonObj
         * @return {?}
         */
            function (jsonObj) {
                /** @type {?} */
                var cmpMethodRefering = new CmpMethodRefering();
                cmpMethodRefering.Id = jsonObj["Id"];
                cmpMethodRefering.Code = jsonObj["Code"];
                cmpMethodRefering.Name = jsonObj["Name"];
                cmpMethodRefering.MethodId = jsonObj["MethodId"];
                cmpMethodRefering.MethodCode = jsonObj["MethodCode"];
                cmpMethodRefering.MethodName = jsonObj["MethodName"];
                cmpMethodRefering.ComponentId = jsonObj["ComponentId"];
                cmpMethodRefering.ComponentCode = jsonObj["ComponentCode"];
                cmpMethodRefering.ComponentName = jsonObj["ComponentName"];
                cmpMethodRefering.ComponentPath = jsonObj["ComponentPath"];
                cmpMethodRefering.IsReplaced = jsonObj["IsReplaced"];
                cmpMethodRefering.IsBeforeExpansion = jsonObj["IsBeforeExpansion"];
                cmpMethodRefering.IsAfterExpansion = jsonObj["IsAfterExpansion"];
                if (jsonObj["ParamConfigs"] != null) {
                    cmpMethodRefering.ParamConfigs = new Array();
                    /** @type {?} */
                    var convertor_1 = new CmpMethodParamConfigConvert();
                    jsonObj["ParamConfigs"].forEach(( /**
                     * @param {?} element
                     * @return {?}
                     */function (element) {
                        cmpMethodRefering.ParamConfigs.push(convertor_1.InitFromJobject(element));
                    }));
                }
                return cmpMethodRefering;
            };
        /**
         * @param {?} obj
         * @return {?}
         */
        CmpMethodReferingConvert.prototype.ConvertJObject = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                /** @type {?} */
                var cmpMethodRefering = ( /** @type {?} */(obj));
                /** @type {?} */
                var jobj = new Object();
                jobj["Id"] = cmpMethodRefering.Id;
                jobj["Code"] = cmpMethodRefering.Code;
                jobj["Name"] = cmpMethodRefering.Name;
                jobj["MethodId"] = cmpMethodRefering.MethodId;
                jobj["MethodCode"] = cmpMethodRefering.MethodCode;
                jobj["MethodName"] = cmpMethodRefering.MethodName;
                jobj["ComponentId"] = cmpMethodRefering.ComponentId;
                jobj["ComponentCode"] = cmpMethodRefering.ComponentCode;
                jobj["ComponentName"] = cmpMethodRefering.ComponentName;
                jobj["ComponentPath"] = cmpMethodRefering.ComponentPath;
                jobj["IsReplaced"] = cmpMethodRefering.IsReplaced;
                jobj["IsBeforeExpansion"] = cmpMethodRefering.IsBeforeExpansion;
                jobj["IsAfterExpansion"] = cmpMethodRefering.IsAfterExpansion;
                if (cmpMethodRefering.ParamConfigs != null) {
                    /** @type {?} */
                    var CommandsJArry_1 = jobj["ParamConfigs"] = [];
                    /** @type {?} */
                    var convertor_2 = new CmpMethodParamConfigConvert();
                    cmpMethodRefering.ParamConfigs.forEach(( /**
                     * @param {?} paramConfig
                     * @return {?}
                     */function (paramConfig) {
                        CommandsJArry_1.push(convertor_2.ConvertJObject(paramConfig));
                    }));
                }
                return jobj;
            };
        return CmpMethodReferingConvert;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BranchCommandItem = /** @class */ (function () {
        function BranchCommandItem() {
        }
        /**
         * @return {?}
         */
        BranchCommandItem.prototype.GetItemId = /**
         * @return {?}
         */
            function () {
                return this.Id;
            };
        /**
         * @return {?}
         */
        BranchCommandItem.prototype.GetItemCode = /**
         * @return {?}
         */
            function () {
                return this.Code;
            };
        /**
         * @return {?}
         */
        BranchCommandItem.prototype.GetItemName = /**
         * @return {?}
         */
            function () {
                return this.Name;
            };
        /**
         * @return {?}
         */
        BranchCommandItem.prototype.GetItemType = /**
         * @return {?}
         */
            function () {
                return CommandItemType.Branch;
            };
        return BranchCommandItem;
    }());
    var BranchCommandItemConvertor = /** @class */ (function () {
        function BranchCommandItemConvertor() {
        }
        /**
         * @param {?} obj
         * @return {?}
         */
        BranchCommandItemConvertor.prototype.ConvertJObject = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                /** @type {?} */
                var branchItem = ( /** @type {?} */(obj));
                /** @type {?} */
                var jobj = new Object();
                jobj["Id"] = branchItem.Id;
                jobj["Code"] = branchItem.Code;
                jobj["Name"] = branchItem.Name;
                jobj["ConditionType"] = branchItem.ConditionType;
                jobj["Express"] = branchItem.Express;
                if (branchItem.Items != null) {
                    /** @type {?} */
                    var itemArray_1 = [];
                    /** @type {?} */
                    var itemConvertor_1 = new CommandItemConvertor();
                    branchItem.Items.forEach(( /**
                     * @param {?} element
                     * @return {?}
                     */function (element) {
                        itemArray_1.push(itemConvertor_1.ConvertJObject(element));
                    }));
                    jobj["Items"] = itemArray_1;
                }
                return jobj;
            };
        /**
         * @param {?} jsonObj
         * @return {?}
         */
        BranchCommandItemConvertor.prototype.InitFromJobject = /**
         * @param {?} jsonObj
         * @return {?}
         */
            function (jsonObj) {
                /** @type {?} */
                var branchItem = new BranchCommandItem();
                branchItem.Id = jsonObj["Id"];
                branchItem.Code = jsonObj["Code"];
                branchItem.Name = jsonObj["Name"];
                branchItem.ConditionType = jsonObj["ConditionType"];
                branchItem.Express = jsonObj["Express"];
                if (jsonObj["Items"] != null) {
                    branchItem.Items = new Array();
                    /** @type {?} */
                    var itemConvertor_2 = new CommandItemConvertor();
                    jsonObj["Items"].forEach(( /**
                     * @param {?} element
                     * @return {?}
                     */function (element) {
                        branchItem.Items.push(itemConvertor_2.InitFromJobject(element));
                    }));
                }
                return branchItem;
            };
        return BranchCommandItemConvertor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BranchCollectionCommandItem = /** @class */ (function () {
        function BranchCollectionCommandItem() {
        }
        /**
         * @return {?}
         */
        BranchCollectionCommandItem.prototype.GetItemId = /**
         * @return {?}
         */
            function () {
                return this.Id;
            };
        /**
         * @return {?}
         */
        BranchCollectionCommandItem.prototype.GetItemCode = /**
         * @return {?}
         */
            function () {
                return this.Code;
            };
        /**
         * @return {?}
         */
        BranchCollectionCommandItem.prototype.GetItemName = /**
         * @return {?}
         */
            function () {
                return this.Name;
            };
        /**
         * @return {?}
         */
        BranchCollectionCommandItem.prototype.GetItemType = /**
         * @return {?}
         */
            function () {
                return CommandItemType.BranchCollection;
            };
        return BranchCollectionCommandItem;
    }());
    var BranchCollectionCommandItemConvertor = /** @class */ (function () {
        function BranchCollectionCommandItemConvertor() {
        }
        /**
         * @param {?} obj
         * @return {?}
         */
        BranchCollectionCommandItemConvertor.prototype.ConvertJObject = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                /** @type {?} */
                var branchCollection = ( /** @type {?} */(obj));
                /** @type {?} */
                var jobj = new Object();
                jobj["Id"] = branchCollection.Id;
                jobj["Code"] = branchCollection.Code;
                jobj["Name"] = branchCollection.Name;
                if (branchCollection.Items != null) {
                    /** @type {?} */
                    var itemArray_1 = [];
                    /** @type {?} */
                    var itemConvertor_1 = new BranchCommandItemConvertor();
                    branchCollection.Items.forEach(( /**
                     * @param {?} element
                     * @return {?}
                     */function (element) {
                        itemArray_1.push(itemConvertor_1.ConvertJObject(element));
                    }));
                    jobj["Items"] = itemArray_1;
                }
                return jobj;
            };
        /**
         * @param {?} jsonObj
         * @return {?}
         */
        BranchCollectionCommandItemConvertor.prototype.InitFromJobject = /**
         * @param {?} jsonObj
         * @return {?}
         */
            function (jsonObj) {
                /** @type {?} */
                var branchCollectionItem = new BranchCollectionCommandItem();
                branchCollectionItem.Id = jsonObj["Id"];
                branchCollectionItem.Code = jsonObj["Code"];
                branchCollectionItem.Name = jsonObj["Name"];
                if (jsonObj["Items"] != null) {
                    branchCollectionItem.Items = new Array();
                    /** @type {?} */
                    var itemConvertor_2 = new BranchCommandItemConvertor();
                    jsonObj["Items"].forEach(( /**
                     * @param {?} element
                     * @return {?}
                     */function (element) {
                        branchCollectionItem.Items.push(itemConvertor_2.InitFromJobject(element));
                    }));
                }
                return branchCollectionItem;
            };
        return BranchCollectionCommandItemConvertor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CommandItemConvertor = /** @class */ (function () {
        function CommandItemConvertor() {
        }
        /**
         * @param {?} obj
         * @return {?}
         */
        CommandItemConvertor.prototype.ConvertJObject = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                /** @type {?} */
                var commandItem = ( /** @type {?} */(obj));
                /** @type {?} */
                var itemType = commandItem.GetItemType();
                /** @type {?} */
                var jobj = new Object();
                jobj["Type"] = itemType;
                if (itemType == CommandItemType.MethodRefer) {
                    jobj["Content"] = commandItem;
                }
                else if (itemType == CommandItemType.Branch) {
                    /** @type {?} */
                    var branchConvertor = new BranchCommandItemConvertor();
                    jobj["Content"] = branchConvertor.ConvertJObject(( /** @type {?} */(commandItem)));
                }
                else if (itemType == CommandItemType.BranchCollection) {
                    /** @type {?} */
                    var branchCollectionConvertor = new BranchCollectionCommandItemConvertor();
                    jobj["Content"] = branchCollectionConvertor.ConvertJObject(( /** @type {?} */(commandItem)));
                }
                return jobj;
            };
        /**
         * @param {?} jsonObj
         * @return {?}
         */
        CommandItemConvertor.prototype.InitFromJobject = /**
         * @param {?} jsonObj
         * @return {?}
         */
            function (jsonObj) {
                /** @type {?} */
                var itemType = ( /** @type {?} */(jsonObj["Type"]));
                /** @type {?} */
                var content = jsonObj["Content"];
                if (itemType == CommandItemType.MethodRefer) {
                    return Object.assign(new CmpMethodRefering(), ( /** @type {?} */(content)));
                }
                else if (itemType == CommandItemType.Branch) {
                    /** @type {?} */
                    var branchConvertor = new BranchCommandItemConvertor();
                    return branchConvertor.InitFromJobject(jsonObj["Content"]);
                }
                else if (itemType == CommandItemType.BranchCollection) {
                    /** @type {?} */
                    var branchCollectionConvertor = new BranchCollectionCommandItemConvertor();
                    return branchCollectionConvertor.InitFromJobject(jsonObj["Content"]);
                }
                return null;
            };
        return CommandItemConvertor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var WebCommand = /** @class */ (function () {
        function WebCommand() {
        }
        return WebCommand;
    }());
    var WebCommandConvertor = /** @class */ (function () {
        function WebCommandConvertor() {
        }
        /**
         * @param {?} obj
         * @return {?}
         */
        WebCommandConvertor.prototype.ConvertJObject = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                /** @type {?} */
                var cmpOp = ( /** @type {?} */(obj));
                /** @type {?} */
                var jobj = new Object();
                jobj["Id"] = cmpOp.Id;
                jobj["Code"] = cmpOp.Code;
                jobj["Name"] = cmpOp.Name;
                jobj["Description"] = cmpOp.Description;
                jobj["SourceCode"] = cmpOp.SourceCode;
                jobj["Parameters"] = cmpOp.Parameters;
                /** @type {?} */
                var items = [];
                if (cmpOp.Items != null) {
                    /** @type {?} */
                    var itemConvertor_1 = new CommandItemConvertor();
                    cmpOp.Items.forEach(( /**
                     * @param {?} element
                     * @return {?}
                     */function (element) {
                        items.push(itemConvertor_1.ConvertJObject(element));
                    }));
                }
                jobj["Items"] = items;
                return jobj;
            };
        /**
         * @param {?} jsonObj
         * @return {?}
         */
        WebCommandConvertor.prototype.InitFromJobject = /**
         * @param {?} jsonObj
         * @return {?}
         */
            function (jsonObj) {
                /** @type {?} */
                var cmpOp = new WebCommand();
                cmpOp.Id = jsonObj["Id"];
                cmpOp.Code = jsonObj["Code"];
                cmpOp.Name = jsonObj["Name"];
                cmpOp.Description = jsonObj["Description"];
                cmpOp.SourceCode = jsonObj["SourceCode"];
                cmpOp.Parameters = jsonObj["Parameters"];
                cmpOp.Items = new Array();
                if (jsonObj["Items"] != null) {
                    /** @type {?} */
                    var itemConvertor_2 = new CommandItemConvertor();
                    jsonObj["Items"].forEach(( /**
                     * @param {?} element
                     * @return {?}
                     */function (element) {
                        cmpOp.Items.push(itemConvertor_2.InitFromJobject(element));
                    }));
                }
                return cmpOp;
            };
        return WebCommandConvertor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ExtendProperty = /** @class */ (function () {
        function ExtendProperty() {
        }
        return ExtendProperty;
    }());
    var ExtendsConvert = /** @class */ (function () {
        function ExtendsConvert() {
        }
        /**
         * @param {?} jsonObj
         * @return {?}
         */
        ExtendsConvert.prototype.InitFromJobject = /**
         * @param {?} jsonObj
         * @return {?}
         */
            function (jsonObj) {
                if (jsonObj) {
                    /** @type {?} */
                    var extendProperty = new ExtendProperty();
                    extendProperty.FormCode = jsonObj["FormCode"];
                    extendProperty.IsCommon = jsonObj["IsCommon"];
                    return extendProperty;
                }
            };
        /**
         * @param {?} obj
         * @return {?}
         */
        ExtendsConvert.prototype.ConvertJObject = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                /** @type {?} */
                var extendProperty = ( /** @type {?} */(obj));
                /** @type {?} */
                var jobj = new Object();
                jobj["FormCode"] = extendProperty.FormCode;
                jobj["IsCommon"] = extendProperty.IsCommon;
                return jobj;
            };
        return ExtendsConvert;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var WebCommandMetadata = /** @class */ (function () {
        function WebCommandMetadata() {
        }
        return WebCommandMetadata;
    }());
    var WebCommandMetadataConvertor = /** @class */ (function () {
        function WebCommandMetadataConvertor() {
        }
        /**
         * @param {?} obj
         * @return {?}
         */
        WebCommandMetadataConvertor.prototype.ConvertJObject = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                /** @type {?} */
                var metadata = ( /** @type {?} */(obj));
                /** @type {?} */
                var jobj = new Object();
                jobj["Id"] = metadata.Id;
                jobj["Code"] = metadata.Code;
                jobj["Name"] = metadata.Name;
                jobj["Description"] = metadata.Description;
                if (metadata.Commands != null) {
                    /** @type {?} */
                    var CommandsJArry_1 = jobj["Commands"] = [];
                    /** @type {?} */
                    var convertor_1 = new WebCommandConvertor();
                    metadata.Commands.forEach(( /**
                     * @param {?} command
                     * @return {?}
                     */function (command) {
                        CommandsJArry_1.push(convertor_1.ConvertJObject(command));
                    }));
                }
                if (metadata.Extends != null) {
                    /** @type {?} */
                    var convertor = new ExtendsConvert();
                    jobj["Extends"] = convertor.ConvertJObject(metadata.Extends);
                }
                return jobj;
            };
        /**
         * @param {?} jsonObj
         * @return {?}
         */
        WebCommandMetadataConvertor.prototype.InitFromJobject = /**
         * @param {?} jsonObj
         * @return {?}
         */
            function (jsonObj) {
                /** @type {?} */
                var metadata = new WebCommandMetadata();
                metadata.Id = jsonObj["Id"];
                metadata.Code = jsonObj["Code"];
                metadata.Name = jsonObj["Name"];
                metadata.Description = jsonObj["Description"];
                /** @type {?} */
                var CommandsJArry = jsonObj["Commands"];
                if (CommandsJArry != null) {
                    metadata.Commands = new Array();
                    CommandsJArry.forEach(( /**
                     * @param {?} element
                     * @return {?}
                     */function (element) {
                        /** @type {?} */
                        var cmpOpSerializer = new WebCommandConvertor();
                        metadata.Commands.push(( /** @type {?} */(cmpOpSerializer.InitFromJobject(element))));
                    }));
                }
                /** @type {?} */
                var convertor = new ExtendsConvert();
                metadata.Extends = convertor.InitFromJobject(jsonObj["Extends"]);
                return metadata;
            };
        return WebCommandMetadataConvertor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var WebCommandComponentService = /** @class */ (function () {
        function WebCommandComponentService(metadataService) {
            this.metadataService = metadataService;
        }
        /**
         * @param {?} metadataUri
         * @return {?}
         */
        WebCommandComponentService.prototype.getWebCommandMetadata = /**
         * @param {?} metadataUri
         * @return {?}
         */
            function (metadataUri) {
                /** @type {?} */
                var fileName = metadataUri.substring(metadataUri.lastIndexOf('/') + 1);
                /** @type {?} */
                var filePath = metadataUri.substring(1, metadataUri.lastIndexOf('/'));
                return this.metadataService.LoadMetadata(fileName, filePath).pipe(operators.map(( /**
                 * @param {?} dto
                 * @return {?}
                 */function (dto) {
                    return (new WebCommandMetadataConvertor()).InitFromJobject(JSON.parse(dto.content));
                })));
            };
        WebCommandComponentService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        WebCommandComponentService.ctorParameters = function () {
            return [
                { type: i1.GSPMetadataService }
            ];
        };
        /** @nocollapse */ WebCommandComponentService.ngInjectableDef = i0.defineInjectable({ factory: function WebCommandComponentService_Factory() { return new WebCommandComponentService(i0.inject(i1.GSPMetadataService)); }, token: WebCommandComponentService, providedIn: "root" });
        return WebCommandComponentService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var WebcmdModule = /** @class */ (function () {
        function WebcmdModule() {
        }
        WebcmdModule.decorators = [
            { type: i0.NgModule, args: [{
                        imports: [
                            i1.MetadataSelectModule
                        ],
                        providers: [i1.GSPMetadataService]
                    },] }
        ];
        return WebcmdModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CmdParameter = /** @class */ (function () {
        function CmdParameter() {
        }
        return CmdParameter;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var ConditionType = {
        IF: 0,
        ELSEIF: 1,
        ELSE: 2,
    };
    ConditionType[ConditionType.IF] = 'IF';
    ConditionType[ConditionType.ELSEIF] = 'ELSEIF';
    ConditionType[ConditionType.ELSE] = 'ELSE';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.WebCommandMetadata = WebCommandMetadata;
    exports.WebCommandMetadataConvertor = WebCommandMetadataConvertor;
    exports.ExtendProperty = ExtendProperty;
    exports.ExtendsConvert = ExtendsConvert;
    exports.WebCommand = WebCommand;
    exports.WebCommandConvertor = WebCommandConvertor;
    exports.CmdParameter = CmdParameter;
    exports.CommandItemConvertor = CommandItemConvertor;
    exports.CmpMethodRefering = CmpMethodRefering;
    exports.CmpMethodReferingConvert = CmpMethodReferingConvert;
    exports.CmpMethodParamConfig = CmpMethodParamConfig;
    exports.CmpMethodParamConfigConvert = CmpMethodParamConfigConvert;
    exports.BranchCollectionCommandItem = BranchCollectionCommandItem;
    exports.BranchCollectionCommandItemConvertor = BranchCollectionCommandItemConvertor;
    exports.BranchCommandItem = BranchCommandItem;
    exports.BranchCommandItemConvertor = BranchCommandItemConvertor;
    exports.ConditionType = ConditionType;
    exports.CommandItemType = CommandItemType;
    exports.WebCommandComponentService = WebCommandComponentService;
    exports.WebcmdModule = WebcmdModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=gsp-cmp-webcommand.umd.js.map