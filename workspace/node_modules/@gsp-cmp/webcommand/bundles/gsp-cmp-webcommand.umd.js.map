{"version":3,"file":"gsp-cmp-webcommand.umd.js.map","sources":["ng://@gsp-cmp/webcommand/lib/vm/CommandItemType.ts","ng://@gsp-cmp/webcommand/lib/vm/CmpMethodParamConfig.ts","ng://@gsp-cmp/webcommand/lib/vm/CmpMethodRefering.ts","ng://@gsp-cmp/webcommand/lib/vm/BranchCommandItem.ts","ng://@gsp-cmp/webcommand/lib/vm/BranchCollectionCommandItem.ts","ng://@gsp-cmp/webcommand/lib/vm/ICommandItem.ts","ng://@gsp-cmp/webcommand/lib/vm/Command.ts","ng://@gsp-cmp/webcommand/lib/vm/ExtendProperty.ts","ng://@gsp-cmp/webcommand/lib/vm/WebCommandMetadata.ts","ng://@gsp-cmp/webcommand/lib/webcmd.service.ts","ng://@gsp-cmp/webcommand/lib/webcmd.module.ts","ng://@gsp-cmp/webcommand/lib/vm/CmdParameter.ts","ng://@gsp-cmp/webcommand/lib/vm/ConditionType.ts"],"sourcesContent":["\n  export enum CommandItemType\n  {\n      MethodRefer=0,\n      Branch=1,\n      BranchCollection=2\n  }","\nexport class CmpMethodParamConfig{\n    ParamCode:string;\n    ParamName:string;\n    ParamExpress:string;\n}\n\nexport class CmpMethodParamConfigConvert{\n\n    InitFromJobject(jsonObj: Object): CmpMethodParamConfig {\n        let cmpMethodParamConfig = new CmpMethodParamConfig();\n        cmpMethodParamConfig.ParamCode = jsonObj[\"ParamCode\"];\n        cmpMethodParamConfig.ParamName = jsonObj[\"ParamName\"];\n        cmpMethodParamConfig.ParamExpress = jsonObj[\"ParamExpress\"];\n        return cmpMethodParamConfig;\n    }\n\n    ConvertJObject(obj: CmpMethodParamConfig): Object {\n        let cmpMethodParamConfig: CmpMethodParamConfig = obj as CmpMethodParamConfig;\n        let jobj = new Object();\n        jobj[\"ParamCode\"] = cmpMethodParamConfig.ParamCode;\n        jobj[\"ParamName\"] = cmpMethodParamConfig.ParamName;\n        jobj[\"ParamExpress\"] = cmpMethodParamConfig.ParamExpress;\n        return jobj;\n    }\n}\n","import { CmpMethodParamConfig, CmpMethodParamConfigConvert } from \"./CmpMethodParamConfig\";\nimport { ICommandItem } from \"./ICommandItem\";\nimport { CommandItemType } from \"./CommandItemType\";\n\nexport class CmpMethodRefering implements ICommandItem {\n    \n    Id:string;\n    Code:string;\n    Name:string;\n    ComponentId: string;\n    ComponentCode: string;\n    ComponentName: string;\n    ComponentPath: string;\n    MethodId: string;\n    MethodCode: string;\n    MethodName: string;\n    IsReplaced:boolean;\n    IsBeforeExpansion:boolean;\n    IsAfterExpansion:boolean;\n    ParamConfigs: Array<CmpMethodParamConfig>;\n\n    GetItemType(): CommandItemType {\n        return CommandItemType.MethodRefer;\n    }\n    GetItemCode(): string {\n        return this.Code;\n    }\n    GetItemName(): string {\n        return this.Name;\n    }\n    GetItemId(): string {\n        return this.Id;\n    }\n}\n\nexport class CmpMethodReferingConvert{\n\n    InitFromJobject(jsonObj: Object): CmpMethodRefering {\n        let cmpMethodRefering = new CmpMethodRefering();\n        cmpMethodRefering.Id = jsonObj[\"Id\"];\n        cmpMethodRefering.Code = jsonObj[\"Code\"];\n        cmpMethodRefering.Name = jsonObj[\"Name\"];\n        cmpMethodRefering.MethodId = jsonObj[\"MethodId\"];\n        cmpMethodRefering.MethodCode = jsonObj[\"MethodCode\"];\n        cmpMethodRefering.MethodName = jsonObj[\"MethodName\"];\n        cmpMethodRefering.ComponentId = jsonObj[\"ComponentId\"];\n        cmpMethodRefering.ComponentCode = jsonObj[\"ComponentCode\"];\n        cmpMethodRefering.ComponentName = jsonObj[\"ComponentName\"];\n        cmpMethodRefering.ComponentPath = jsonObj[\"ComponentPath\"];\n        cmpMethodRefering.IsReplaced = jsonObj[\"IsReplaced\"];\n        cmpMethodRefering.IsBeforeExpansion = jsonObj[\"IsBeforeExpansion\"];\n        cmpMethodRefering.IsAfterExpansion = jsonObj[\"IsAfterExpansion\"];\n        if (jsonObj[\"ParamConfigs\"] != null) {\n            cmpMethodRefering.ParamConfigs=new Array<CmpMethodParamConfig>();\n            let convertor = new CmpMethodParamConfigConvert();\n            jsonObj[\"ParamConfigs\"].forEach(element => {\n                cmpMethodRefering.ParamConfigs.push(convertor.InitFromJobject(element));\n            });\n        }\n        return cmpMethodRefering;\n    }\n\n    ConvertJObject(obj: CmpMethodRefering): Object {\n        let cmpMethodRefering: CmpMethodRefering = obj as CmpMethodRefering;\n        let jobj = new Object();\n        jobj[\"Id\"] = cmpMethodRefering.Id;\n        jobj[\"Code\"] = cmpMethodRefering.Code;\n        jobj[\"Name\"] = cmpMethodRefering.Name;\n        jobj[\"MethodId\"] = cmpMethodRefering.MethodId;\n        jobj[\"MethodCode\"] = cmpMethodRefering.MethodCode;\n        jobj[\"MethodName\"] = cmpMethodRefering.MethodName;\n        jobj[\"ComponentId\"] = cmpMethodRefering.ComponentId;\n        jobj[\"ComponentCode\"] = cmpMethodRefering.ComponentCode;\n        jobj[\"ComponentName\"] = cmpMethodRefering.ComponentName;\n        jobj[\"ComponentPath\"] = cmpMethodRefering.ComponentPath;\n        jobj[\"IsReplaced\"] = cmpMethodRefering.IsReplaced;\n        jobj[\"IsBeforeExpansion\"] = cmpMethodRefering.IsBeforeExpansion;\n        jobj[\"IsAfterExpansion\"] = cmpMethodRefering.IsAfterExpansion;\n        if (cmpMethodRefering.ParamConfigs != null) {\n            let CommandsJArry = jobj[\"ParamConfigs\"] = [];\n            let convertor = new CmpMethodParamConfigConvert();\n            cmpMethodRefering.ParamConfigs.forEach(paramConfig => {\n                CommandsJArry.push(convertor.ConvertJObject(paramConfig));\n            });\n        }\n        return jobj;\n    }\n}","import { CommandItemType } from \"./CommandItemType\";\nimport { ICommandItem, CommandItemConvertor } from \"./ICommandItem\";\nimport { ConditionType } from \"./ConditionType\";\n\nexport class BranchCommandItem implements ICommandItem {\n    Id: string;\n    Code:string;\n    Name: string;\n    ConditionType: ConditionType;\n    Express: string;\n    Items: Array<ICommandItem>;\n\n    GetItemId(): string {\n        return this.Id;\n    }\n\n    GetItemCode(): string {\n        return this.Code;\n    }\n\n    GetItemName(): string {\n        return this.Name;\n    }\n\n    GetItemType(): CommandItemType {\n        return CommandItemType.Branch;\n    }\n}\n\nexport class BranchCommandItemConvertor {\n    ConvertJObject(obj: BranchCommandItem): Object {\n        let branchItem = obj as BranchCommandItem;\n        let jobj = new Object();\n        jobj[\"Id\"] = branchItem.Id;\n        jobj[\"Code\"] = branchItem.Code;\n        jobj[\"Name\"] = branchItem.Name;\n        jobj[\"ConditionType\"] = branchItem.ConditionType;\n        jobj[\"Express\"] = branchItem.Express;\n        if (branchItem.Items != null) {\n            let itemArray = [];\n            let itemConvertor = new CommandItemConvertor();\n            branchItem.Items.forEach(element => {\n                itemArray.push(itemConvertor.ConvertJObject(element));\n            });\n            jobj[\"Items\"]=itemArray;\n        }\n        return jobj;\n    }\n\n    InitFromJobject(jsonObj: Object): BranchCommandItem {\n        let branchItem = new BranchCommandItem();\n        branchItem.Id = jsonObj[\"Id\"];\n        branchItem.Code = jsonObj[\"Code\"];\n        branchItem.Name = jsonObj[\"Name\"];\n        branchItem.ConditionType = jsonObj[\"ConditionType\"];\n        branchItem.Express = jsonObj[\"Express\"];\n        if (jsonObj[\"Items\"] != null) {\n            branchItem.Items=new Array<ICommandItem>();\n            let itemConvertor = new CommandItemConvertor();\n            jsonObj[\"Items\"].forEach(element => {\n                branchItem.Items.push(itemConvertor.InitFromJobject(element));\n            });\n        }\n        return branchItem;\n    }\n}\n","import { ICommandItem } from \"./ICommandItem\";\nimport { CommandItemType } from \"./CommandItemType\";\nimport { BranchCommandItem, BranchCommandItemConvertor } from \"./BranchCommandItem\";\n\nexport class BranchCollectionCommandItem implements ICommandItem {\n    Id: string;\n    Code:string;\n    Name: string;\n    Items: Array<BranchCommandItem>;\n    GetItemId(): string {\n        return this.Id;\n    }\n    GetItemCode(): string {\n        return this.Code;\n    }\n    GetItemName(): string {\n        return this.Name;\n    }\n    GetItemType(): CommandItemType {\n        return CommandItemType.BranchCollection;\n    }\n}\n\nexport class BranchCollectionCommandItemConvertor {\n    ConvertJObject(obj: BranchCollectionCommandItem): Object {\n        let branchCollection = obj as BranchCollectionCommandItem;\n        let jobj = new Object();\n        jobj[\"Id\"] = branchCollection.Id;\n        jobj[\"Code\"] = branchCollection.Code;\n        jobj[\"Name\"] = branchCollection.Name;\n        if (branchCollection.Items != null) {\n            let itemArray = [];\n            let itemConvertor = new BranchCommandItemConvertor();\n            branchCollection.Items.forEach(element => {\n                itemArray.push(itemConvertor.ConvertJObject(element));\n            });\n            jobj[\"Items\"]=itemArray;\n        }\n        return jobj;\n    }\n\n    InitFromJobject(jsonObj: Object): BranchCollectionCommandItem {\n        let branchCollectionItem = new BranchCollectionCommandItem();\n        branchCollectionItem.Id = jsonObj[\"Id\"];\n        branchCollectionItem.Code = jsonObj[\"Code\"];\n        branchCollectionItem.Name = jsonObj[\"Name\"];\n        if (jsonObj[\"Items\"] != null) {\n            branchCollectionItem.Items=new Array<BranchCommandItem>();\n            let itemConvertor = new BranchCommandItemConvertor();\n            jsonObj[\"Items\"].forEach(element => {\n                branchCollectionItem.Items.push(itemConvertor.InitFromJobject(element));\n            });\n        }\n        return branchCollectionItem;\n    }\n}","import { CommandItemType } from \"./CommandItemType\";\nimport { CmpMethodRefering, CmpMethodReferingConvert } from \"./CmpMethodRefering\";\nimport { BranchCommandItemConvertor, BranchCommandItem } from \"./BranchCommandItem\";\nimport { BranchCollectionCommandItemConvertor, BranchCollectionCommandItem } from \"./BranchCollectionCommandItem\";\nexport interface ICommandItem\n{\n     GetItemType():CommandItemType;\n\n     GetItemCode():string;\n\n     GetItemName():string;\n\n     GetItemId():string;\n}\n\nexport class CommandItemConvertor {\n    ConvertJObject(obj: ICommandItem): Object {\n        let commandItem = obj as ICommandItem;\n        let itemType = commandItem.GetItemType();\n        let jobj = new Object();\n        jobj[\"Type\"] = itemType;\n        if (itemType == CommandItemType.MethodRefer) {\n            jobj[\"Content\"] = commandItem;\n        }\n        else if (itemType == CommandItemType.Branch) {\n           let  branchConvertor=new BranchCommandItemConvertor();\n           jobj[\"Content\"] = branchConvertor.ConvertJObject(commandItem as BranchCommandItem);\n        }\n        else if (itemType == CommandItemType.BranchCollection) {\n            let  branchCollectionConvertor=new BranchCollectionCommandItemConvertor();\n            jobj[\"Content\"] = branchCollectionConvertor.ConvertJObject(commandItem as BranchCollectionCommandItem);\n        }\n        return jobj;\n    }\n\n    InitFromJobject(jsonObj: Object): ICommandItem {\n        let itemType=jsonObj[\"Type\"] as CommandItemType;\n        let content:ICommandItem=jsonObj[\"Content\"]; \n        if (itemType == CommandItemType.MethodRefer) {\n            return Object.assign(new CmpMethodRefering(),content as CmpMethodRefering);;\n        }\n        else if (itemType == CommandItemType.Branch) {\n            let  branchConvertor=new BranchCommandItemConvertor();\n            return branchConvertor.InitFromJobject(jsonObj[\"Content\"]);\n        }\n        else if (itemType == CommandItemType.BranchCollection) {\n            let  branchCollectionConvertor=new BranchCollectionCommandItemConvertor();\n            return branchCollectionConvertor.InitFromJobject(jsonObj[\"Content\"]);\n        }\n        return null;\n    }\n}","import { ICommandItem, CommandItemConvertor } from \"./ICommandItem\"; \nimport { CmdParameter } from \"./CmdParameter\";\n\nexport class WebCommand{\n    Id:string;\n    Code:string;\n    Name:string;\n    Description:string;\n    Parameters:Array<CmdParameter>;\n    SourceCode:string;\n    Items: Array<ICommandItem>;\n}\n\nexport class WebCommandConvertor\n{\n    ConvertJObject(obj : WebCommand): Object {\n        \n        let cmpOp = obj as WebCommand;\n        let jobj=new Object();\n        jobj[\"Id\"]=cmpOp.Id;\n        jobj[\"Code\"]=cmpOp.Code;\n        jobj[\"Name\"]=cmpOp.Name;\n        jobj[\"Description\"]=cmpOp.Description;\n        jobj[\"SourceCode\"]=cmpOp.SourceCode;\n        jobj[\"Parameters\"]=cmpOp.Parameters;\n        let items=[];\n        if(cmpOp.Items!=null)\n        {\n            let itemConvertor = new CommandItemConvertor();\n            cmpOp.Items.forEach(element => {\n                items.push(itemConvertor.ConvertJObject(element));\n            }); \n        }\n        jobj[\"Items\"]=items;\n        return jobj;\n    }    \n    \n    InitFromJobject(jsonObj: Object): WebCommand {\n        let cmpOp = new WebCommand();\n        cmpOp.Id = jsonObj[\"Id\"];\n        cmpOp.Code = jsonObj[\"Code\"];\n        cmpOp.Name = jsonObj[\"Name\"];\n        cmpOp.Description = jsonObj[\"Description\"];\n        cmpOp.SourceCode = jsonObj[\"SourceCode\"];\n        cmpOp.Parameters=jsonObj[\"Parameters\"];\n        cmpOp.Items=new Array<ICommandItem>();\n        if(jsonObj[\"Items\"]!=null)\n        {\n            let itemConvertor = new CommandItemConvertor();\n            jsonObj[\"Items\"].forEach(element => {\n                cmpOp.Items.push(itemConvertor.InitFromJobject(element));\n            });\n        }\n        return cmpOp;\n    }\n}","export class ExtendProperty{\n    FormCode:string;\n    IsCommon:boolean;\n}\n\nexport class ExtendsConvert{\n    InitFromJobject(jsonObj: Object): ExtendProperty {\n        if(jsonObj){\n            let extendProperty = new ExtendProperty();\n            extendProperty.FormCode = jsonObj[\"FormCode\"];\n            extendProperty.IsCommon = jsonObj[\"IsCommon\"];\n            return extendProperty;\n        }\n    }\n\n    ConvertJObject(obj: ExtendProperty): Object {\n        let extendProperty: ExtendProperty = obj as ExtendProperty;\n        let jobj = new Object();\n        jobj[\"FormCode\"] = extendProperty.FormCode;\n        jobj[\"IsCommon\"] = extendProperty.IsCommon;\n        return jobj;\n    }\n}","import { WebCommand, WebCommandConvertor } from \"./Command\";\nimport { ExtendProperty, ExtendsConvert } from \"./ExtendProperty\";\n\nexport class WebCommandMetadata {\n    Id: string;\n    Code: string;\n    Name: string;\n    Description: string;\n    Extends:ExtendProperty;\n    Commands: Array<WebCommand>;\n}\n\nexport class WebCommandMetadataConvertor {\n    ConvertJObject(obj: WebCommandMetadata): Object {\n        let metadata: WebCommandMetadata = obj as WebCommandMetadata;\n        let jobj = new Object();\n        jobj[\"Id\"] = metadata.Id;\n        jobj[\"Code\"] = metadata.Code;\n        jobj[\"Name\"] = metadata.Name;\n        jobj[\"Description\"] = metadata.Description;\n        if (metadata.Commands != null) {\n            let CommandsJArry = jobj[\"Commands\"] = [];\n            let convertor = new WebCommandConvertor();\n            metadata.Commands.forEach(command => {\n                CommandsJArry.push(convertor.ConvertJObject(command));\n            });\n        }\n        if(metadata.Extends!=null){\n            let convertor = new ExtendsConvert();\n            jobj[\"Extends\"] =convertor.ConvertJObject(metadata.Extends);\n        }\n        return jobj;\n    }\n\n    InitFromJobject(jsonObj: Object): WebCommandMetadata {\n        let metadata = new WebCommandMetadata();\n        metadata.Id = jsonObj[\"Id\"];\n        metadata.Code = jsonObj[\"Code\"];\n        metadata.Name = jsonObj[\"Name\"];\n        metadata.Description = jsonObj[\"Description\"];\n        let CommandsJArry = jsonObj[\"Commands\"];\n        if (CommandsJArry != null) {\n            metadata.Commands = new Array<WebCommand>();\n            CommandsJArry.forEach(element => {\n                let cmpOpSerializer = new WebCommandConvertor();\n                metadata.Commands.push(cmpOpSerializer.InitFromJobject(element) as WebCommand);\n            });\n        }\n        let convertor = new ExtendsConvert();\n        metadata.Extends=convertor.InitFromJobject(jsonObj[\"Extends\"]);\n        return metadata;\n    }\n}","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { GSPMetadataService } from '@gsp-lcm/metadata-selector';\nimport { map } from 'rxjs/operators';\nimport { WebCommandMetadata, WebCommandMetadataConvertor } from './vm/WebCommandMetadata';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WebCommandComponentService {\n\n    constructor(private metadataService: GSPMetadataService) { }\n    \n    getWebCommandMetadata(metadataUri: string): Observable<WebCommandMetadata> {\n        const fileName = metadataUri.substring(metadataUri.lastIndexOf('/') + 1);\n        const filePath = metadataUri.substring(1, metadataUri.lastIndexOf('/'));\n        return this.metadataService.LoadMetadata(fileName, filePath).pipe(map((dto:any)=>\n            (new WebCommandMetadataConvertor()).InitFromJobject(JSON.parse(dto.content))\n        ));\n    }\n}","import { NgModule } from '@angular/core';\nimport { MetadataSelectModule, GSPMetadataService } from '@gsp-lcm/metadata-selector';\n\n@NgModule({\n  imports: [\n    MetadataSelectModule\n  ],\n  providers:[GSPMetadataService]\n})\nexport class WebcmdModule { }\n","\nexport class CmdParameter{\n    Id:string;\n    Code:string;\n    Name:string;\n    Description:string;\n    ParameterType:string;\n    IsRetVal:boolean;\n}\n ","\n export enum ConditionType\n {\n     IF=0,\n     ELSEIF=1,\n     ELSE=2\n }"],"names":["map","Injectable","GSPMetadataService","NgModule","MetadataSelectModule"],"mappings":"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"}
