{"version":3,"sources":["ng://@gsp-cmp/webcommand/lib/vm/CommandItemType.ts","ng://@gsp-cmp/webcommand/lib/vm/CmpMethodParamConfig.ts","ng://@gsp-cmp/webcommand/lib/vm/CmpMethodRefering.ts","ng://@gsp-cmp/webcommand/lib/vm/BranchCommandItem.ts","ng://@gsp-cmp/webcommand/lib/vm/BranchCollectionCommandItem.ts","ng://@gsp-cmp/webcommand/lib/vm/ICommandItem.ts","ng://@gsp-cmp/webcommand/lib/vm/Command.ts","ng://@gsp-cmp/webcommand/lib/vm/ExtendProperty.ts","ng://@gsp-cmp/webcommand/lib/vm/WebCommandMetadata.ts","ng://@gsp-cmp/webcommand/lib/webcmd.service.ts","ng://@gsp-cmp/webcommand/lib/webcmd.module.ts","ng://@gsp-cmp/webcommand/lib/vm/CmdParameter.ts","ng://@gsp-cmp/webcommand/lib/vm/ConditionType.ts"],"names":["MethodRefer","Branch","BranchCollection","CmpMethodParamConfig","CmpMethodParamConfigConvert","prototype","InitFromJobject","jsonObj","cmpMethodParamConfig","ParamCode","ParamName","ParamExpress","ConvertJObject","obj","jobj","Object","CmpMethodRefering","GetItemType","CommandItemType","GetItemCode","this","Code","GetItemName","Name","GetItemId","Id","CmpMethodReferingConvert","cmpMethodRefering","MethodId","MethodCode","MethodName","ComponentId","ComponentCode","ComponentName","ComponentPath","IsReplaced","IsBeforeExpansion","IsAfterExpansion","ParamConfigs","Array","convertor_1","forEach","element","push","CommandsJArry_1","convertor_2","paramConfig","BranchCommandItem","BranchCommandItemConvertor","branchItem","ConditionType","Express","Items","itemArray_1","itemConvertor_1","CommandItemConvertor","itemConvertor_2","BranchCollectionCommandItem","BranchCollectionCommandItemConvertor","branchCollection","branchCollectionItem","commandItem","itemType","branchConvertor","branchCollectionConvertor","content","assign","WebCommand","WebCommandConvertor","cmpOp","Description","SourceCode","Parameters","items","ExtendProperty","ExtendsConvert","extendProperty","FormCode","IsCommon","WebCommandMetadata","WebCommandMetadataConvertor","metadata","Commands","command","Extends","convertor","CommandsJArry","cmpOpSerializer","WebCommandComponentService","getWebCommandMetadata","metadataUri","fileName","substring","lastIndexOf","filePath","metadataService","LoadMetadata","pipe","map","dto","JSON","parse","Injectable","args","providedIn","GSPMetadataService","WebcmdModule","NgModule","imports","MetadataSelectModule","providers","CmdParameter","IF","ELSEIF","ELSE"],"mappings":"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","sourcesContent":["\n  export enum CommandItemType\n  {\n      MethodRefer=0,\n      Branch=1,\n      BranchCollection=2\n  }","\nexport class CmpMethodParamConfig{\n    ParamCode:string;\n    ParamName:string;\n    ParamExpress:string;\n}\n\nexport class CmpMethodParamConfigConvert{\n\n    InitFromJobject(jsonObj: Object): CmpMethodParamConfig {\n        let cmpMethodParamConfig = new CmpMethodParamConfig();\n        cmpMethodParamConfig.ParamCode = jsonObj[\"ParamCode\"];\n        cmpMethodParamConfig.ParamName = jsonObj[\"ParamName\"];\n        cmpMethodParamConfig.ParamExpress = jsonObj[\"ParamExpress\"];\n        return cmpMethodParamConfig;\n    }\n\n    ConvertJObject(obj: CmpMethodParamConfig): Object {\n        let cmpMethodParamConfig: CmpMethodParamConfig = obj as CmpMethodParamConfig;\n        let jobj = new Object();\n        jobj[\"ParamCode\"] = cmpMethodParamConfig.ParamCode;\n        jobj[\"ParamName\"] = cmpMethodParamConfig.ParamName;\n        jobj[\"ParamExpress\"] = cmpMethodParamConfig.ParamExpress;\n        return jobj;\n    }\n}\n","import { CmpMethodParamConfig, CmpMethodParamConfigConvert } from \"./CmpMethodParamConfig\";\nimport { ICommandItem } from \"./ICommandItem\";\nimport { CommandItemType } from \"./CommandItemType\";\n\nexport class CmpMethodRefering implements ICommandItem {\n    \n    Id:string;\n    Code:string;\n    Name:string;\n    ComponentId: string;\n    ComponentCode: string;\n    ComponentName: string;\n    ComponentPath: string;\n    MethodId: string;\n    MethodCode: string;\n    MethodName: string;\n    IsReplaced:boolean;\n    IsBeforeExpansion:boolean;\n    IsAfterExpansion:boolean;\n    ParamConfigs: Array<CmpMethodParamConfig>;\n\n    GetItemType(): CommandItemType {\n        return CommandItemType.MethodRefer;\n    }\n    GetItemCode(): string {\n        return this.Code;\n    }\n    GetItemName(): string {\n        return this.Name;\n    }\n    GetItemId(): string {\n        return this.Id;\n    }\n}\n\nexport class CmpMethodReferingConvert{\n\n    InitFromJobject(jsonObj: Object): CmpMethodRefering {\n        let cmpMethodRefering = new CmpMethodRefering();\n        cmpMethodRefering.Id = jsonObj[\"Id\"];\n        cmpMethodRefering.Code = jsonObj[\"Code\"];\n        cmpMethodRefering.Name = jsonObj[\"Name\"];\n        cmpMethodRefering.MethodId = jsonObj[\"MethodId\"];\n        cmpMethodRefering.MethodCode = jsonObj[\"MethodCode\"];\n        cmpMethodRefering.MethodName = jsonObj[\"MethodName\"];\n        cmpMethodRefering.ComponentId = jsonObj[\"ComponentId\"];\n        cmpMethodRefering.ComponentCode = jsonObj[\"ComponentCode\"];\n        cmpMethodRefering.ComponentName = jsonObj[\"ComponentName\"];\n        cmpMethodRefering.ComponentPath = jsonObj[\"ComponentPath\"];\n        cmpMethodRefering.IsReplaced = jsonObj[\"IsReplaced\"];\n        cmpMethodRefering.IsBeforeExpansion = jsonObj[\"IsBeforeExpansion\"];\n        cmpMethodRefering.IsAfterExpansion = jsonObj[\"IsAfterExpansion\"];\n        if (jsonObj[\"ParamConfigs\"] != null) {\n            cmpMethodRefering.ParamConfigs=new Array<CmpMethodParamConfig>();\n            let convertor = new CmpMethodParamConfigConvert();\n            jsonObj[\"ParamConfigs\"].forEach(element => {\n                cmpMethodRefering.ParamConfigs.push(convertor.InitFromJobject(element));\n            });\n        }\n        return cmpMethodRefering;\n    }\n\n    ConvertJObject(obj: CmpMethodRefering): Object {\n        let cmpMethodRefering: CmpMethodRefering = obj as CmpMethodRefering;\n        let jobj = new Object();\n        jobj[\"Id\"] = cmpMethodRefering.Id;\n        jobj[\"Code\"] = cmpMethodRefering.Code;\n        jobj[\"Name\"] = cmpMethodRefering.Name;\n        jobj[\"MethodId\"] = cmpMethodRefering.MethodId;\n        jobj[\"MethodCode\"] = cmpMethodRefering.MethodCode;\n        jobj[\"MethodName\"] = cmpMethodRefering.MethodName;\n        jobj[\"ComponentId\"] = cmpMethodRefering.ComponentId;\n        jobj[\"ComponentCode\"] = cmpMethodRefering.ComponentCode;\n        jobj[\"ComponentName\"] = cmpMethodRefering.ComponentName;\n        jobj[\"ComponentPath\"] = cmpMethodRefering.ComponentPath;\n        jobj[\"IsReplaced\"] = cmpMethodRefering.IsReplaced;\n        jobj[\"IsBeforeExpansion\"] = cmpMethodRefering.IsBeforeExpansion;\n        jobj[\"IsAfterExpansion\"] = cmpMethodRefering.IsAfterExpansion;\n        if (cmpMethodRefering.ParamConfigs != null) {\n            let CommandsJArry = jobj[\"ParamConfigs\"] = [];\n            let convertor = new CmpMethodParamConfigConvert();\n            cmpMethodRefering.ParamConfigs.forEach(paramConfig => {\n                CommandsJArry.push(convertor.ConvertJObject(paramConfig));\n            });\n        }\n        return jobj;\n    }\n}","import { CommandItemType } from \"./CommandItemType\";\nimport { ICommandItem, CommandItemConvertor } from \"./ICommandItem\";\nimport { ConditionType } from \"./ConditionType\";\n\nexport class BranchCommandItem implements ICommandItem {\n    Id: string;\n    Code:string;\n    Name: string;\n    ConditionType: ConditionType;\n    Express: string;\n    Items: Array<ICommandItem>;\n\n    GetItemId(): string {\n        return this.Id;\n    }\n\n    GetItemCode(): string {\n        return this.Code;\n    }\n\n    GetItemName(): string {\n        return this.Name;\n    }\n\n    GetItemType(): CommandItemType {\n        return CommandItemType.Branch;\n    }\n}\n\nexport class BranchCommandItemConvertor {\n    ConvertJObject(obj: BranchCommandItem): Object {\n        let branchItem = obj as BranchCommandItem;\n        let jobj = new Object();\n        jobj[\"Id\"] = branchItem.Id;\n        jobj[\"Code\"] = branchItem.Code;\n        jobj[\"Name\"] = branchItem.Name;\n        jobj[\"ConditionType\"] = branchItem.ConditionType;\n        jobj[\"Express\"] = branchItem.Express;\n        if (branchItem.Items != null) {\n            let itemArray = [];\n            let itemConvertor = new CommandItemConvertor();\n            branchItem.Items.forEach(element => {\n                itemArray.push(itemConvertor.ConvertJObject(element));\n            });\n            jobj[\"Items\"]=itemArray;\n        }\n        return jobj;\n    }\n\n    InitFromJobject(jsonObj: Object): BranchCommandItem {\n        let branchItem = new BranchCommandItem();\n        branchItem.Id = jsonObj[\"Id\"];\n        branchItem.Code = jsonObj[\"Code\"];\n        branchItem.Name = jsonObj[\"Name\"];\n        branchItem.ConditionType = jsonObj[\"ConditionType\"];\n        branchItem.Express = jsonObj[\"Express\"];\n        if (jsonObj[\"Items\"] != null) {\n            branchItem.Items=new Array<ICommandItem>();\n            let itemConvertor = new CommandItemConvertor();\n            jsonObj[\"Items\"].forEach(element => {\n                branchItem.Items.push(itemConvertor.InitFromJobject(element));\n            });\n        }\n        return branchItem;\n    }\n}\n","import { ICommandItem } from \"./ICommandItem\";\nimport { CommandItemType } from \"./CommandItemType\";\nimport { BranchCommandItem, BranchCommandItemConvertor } from \"./BranchCommandItem\";\n\nexport class BranchCollectionCommandItem implements ICommandItem {\n    Id: string;\n    Code:string;\n    Name: string;\n    Items: Array<BranchCommandItem>;\n    GetItemId(): string {\n        return this.Id;\n    }\n    GetItemCode(): string {\n        return this.Code;\n    }\n    GetItemName(): string {\n        return this.Name;\n    }\n    GetItemType(): CommandItemType {\n        return CommandItemType.BranchCollection;\n    }\n}\n\nexport class BranchCollectionCommandItemConvertor {\n    ConvertJObject(obj: BranchCollectionCommandItem): Object {\n        let branchCollection = obj as BranchCollectionCommandItem;\n        let jobj = new Object();\n        jobj[\"Id\"] = branchCollection.Id;\n        jobj[\"Code\"] = branchCollection.Code;\n        jobj[\"Name\"] = branchCollection.Name;\n        if (branchCollection.Items != null) {\n            let itemArray = [];\n            let itemConvertor = new BranchCommandItemConvertor();\n            branchCollection.Items.forEach(element => {\n                itemArray.push(itemConvertor.ConvertJObject(element));\n            });\n            jobj[\"Items\"]=itemArray;\n        }\n        return jobj;\n    }\n\n    InitFromJobject(jsonObj: Object): BranchCollectionCommandItem {\n        let branchCollectionItem = new BranchCollectionCommandItem();\n        branchCollectionItem.Id = jsonObj[\"Id\"];\n        branchCollectionItem.Code = jsonObj[\"Code\"];\n        branchCollectionItem.Name = jsonObj[\"Name\"];\n        if (jsonObj[\"Items\"] != null) {\n            branchCollectionItem.Items=new Array<BranchCommandItem>();\n            let itemConvertor = new BranchCommandItemConvertor();\n            jsonObj[\"Items\"].forEach(element => {\n                branchCollectionItem.Items.push(itemConvertor.InitFromJobject(element));\n            });\n        }\n        return branchCollectionItem;\n    }\n}","import { CommandItemType } from \"./CommandItemType\";\nimport { CmpMethodRefering, CmpMethodReferingConvert } from \"./CmpMethodRefering\";\nimport { BranchCommandItemConvertor, BranchCommandItem } from \"./BranchCommandItem\";\nimport { BranchCollectionCommandItemConvertor, BranchCollectionCommandItem } from \"./BranchCollectionCommandItem\";\nexport interface ICommandItem\n{\n     GetItemType():CommandItemType;\n\n     GetItemCode():string;\n\n     GetItemName():string;\n\n     GetItemId():string;\n}\n\nexport class CommandItemConvertor {\n    ConvertJObject(obj: ICommandItem): Object {\n        let commandItem = obj as ICommandItem;\n        let itemType = commandItem.GetItemType();\n        let jobj = new Object();\n        jobj[\"Type\"] = itemType;\n        if (itemType == CommandItemType.MethodRefer) {\n            jobj[\"Content\"] = commandItem;\n        }\n        else if (itemType == CommandItemType.Branch) {\n           let  branchConvertor=new BranchCommandItemConvertor();\n           jobj[\"Content\"] = branchConvertor.ConvertJObject(commandItem as BranchCommandItem);\n        }\n        else if (itemType == CommandItemType.BranchCollection) {\n            let  branchCollectionConvertor=new BranchCollectionCommandItemConvertor();\n            jobj[\"Content\"] = branchCollectionConvertor.ConvertJObject(commandItem as BranchCollectionCommandItem);\n        }\n        return jobj;\n    }\n\n    InitFromJobject(jsonObj: Object): ICommandItem {\n        let itemType=jsonObj[\"Type\"] as CommandItemType;\n        let content:ICommandItem=jsonObj[\"Content\"]; \n        if (itemType == CommandItemType.MethodRefer) {\n            return Object.assign(new CmpMethodRefering(),content as CmpMethodRefering);;\n        }\n        else if (itemType == CommandItemType.Branch) {\n            let  branchConvertor=new BranchCommandItemConvertor();\n            return branchConvertor.InitFromJobject(jsonObj[\"Content\"]);\n        }\n        else if (itemType == CommandItemType.BranchCollection) {\n            let  branchCollectionConvertor=new BranchCollectionCommandItemConvertor();\n            return branchCollectionConvertor.InitFromJobject(jsonObj[\"Content\"]);\n        }\n        return null;\n    }\n}","import { ICommandItem, CommandItemConvertor } from \"./ICommandItem\"; \nimport { CmdParameter } from \"./CmdParameter\";\n\nexport class WebCommand{\n    Id:string;\n    Code:string;\n    Name:string;\n    Description:string;\n    Parameters:Array<CmdParameter>;\n    SourceCode:string;\n    Items: Array<ICommandItem>;\n}\n\nexport class WebCommandConvertor\n{\n    ConvertJObject(obj : WebCommand): Object {\n        \n        let cmpOp = obj as WebCommand;\n        let jobj=new Object();\n        jobj[\"Id\"]=cmpOp.Id;\n        jobj[\"Code\"]=cmpOp.Code;\n        jobj[\"Name\"]=cmpOp.Name;\n        jobj[\"Description\"]=cmpOp.Description;\n        jobj[\"SourceCode\"]=cmpOp.SourceCode;\n        jobj[\"Parameters\"]=cmpOp.Parameters;\n        let items=[];\n        if(cmpOp.Items!=null)\n        {\n            let itemConvertor = new CommandItemConvertor();\n            cmpOp.Items.forEach(element => {\n                items.push(itemConvertor.ConvertJObject(element));\n            }); \n        }\n        jobj[\"Items\"]=items;\n        return jobj;\n    }    \n    \n    InitFromJobject(jsonObj: Object): WebCommand {\n        let cmpOp = new WebCommand();\n        cmpOp.Id = jsonObj[\"Id\"];\n        cmpOp.Code = jsonObj[\"Code\"];\n        cmpOp.Name = jsonObj[\"Name\"];\n        cmpOp.Description = jsonObj[\"Description\"];\n        cmpOp.SourceCode = jsonObj[\"SourceCode\"];\n        cmpOp.Parameters=jsonObj[\"Parameters\"];\n        cmpOp.Items=new Array<ICommandItem>();\n        if(jsonObj[\"Items\"]!=null)\n        {\n            let itemConvertor = new CommandItemConvertor();\n            jsonObj[\"Items\"].forEach(element => {\n                cmpOp.Items.push(itemConvertor.InitFromJobject(element));\n            });\n        }\n        return cmpOp;\n    }\n}","export class ExtendProperty{\n    FormCode:string;\n    IsCommon:boolean;\n}\n\nexport class ExtendsConvert{\n    InitFromJobject(jsonObj: Object): ExtendProperty {\n        if(jsonObj){\n            let extendProperty = new ExtendProperty();\n            extendProperty.FormCode = jsonObj[\"FormCode\"];\n            extendProperty.IsCommon = jsonObj[\"IsCommon\"];\n            return extendProperty;\n        }\n    }\n\n    ConvertJObject(obj: ExtendProperty): Object {\n        let extendProperty: ExtendProperty = obj as ExtendProperty;\n        let jobj = new Object();\n        jobj[\"FormCode\"] = extendProperty.FormCode;\n        jobj[\"IsCommon\"] = extendProperty.IsCommon;\n        return jobj;\n    }\n}","import { WebCommand, WebCommandConvertor } from \"./Command\";\nimport { ExtendProperty, ExtendsConvert } from \"./ExtendProperty\";\n\nexport class WebCommandMetadata {\n    Id: string;\n    Code: string;\n    Name: string;\n    Description: string;\n    Extends:ExtendProperty;\n    Commands: Array<WebCommand>;\n}\n\nexport class WebCommandMetadataConvertor {\n    ConvertJObject(obj: WebCommandMetadata): Object {\n        let metadata: WebCommandMetadata = obj as WebCommandMetadata;\n        let jobj = new Object();\n        jobj[\"Id\"] = metadata.Id;\n        jobj[\"Code\"] = metadata.Code;\n        jobj[\"Name\"] = metadata.Name;\n        jobj[\"Description\"] = metadata.Description;\n        if (metadata.Commands != null) {\n            let CommandsJArry = jobj[\"Commands\"] = [];\n            let convertor = new WebCommandConvertor();\n            metadata.Commands.forEach(command => {\n                CommandsJArry.push(convertor.ConvertJObject(command));\n            });\n        }\n        if(metadata.Extends!=null){\n            let convertor = new ExtendsConvert();\n            jobj[\"Extends\"] =convertor.ConvertJObject(metadata.Extends);\n        }\n        return jobj;\n    }\n\n    InitFromJobject(jsonObj: Object): WebCommandMetadata {\n        let metadata = new WebCommandMetadata();\n        metadata.Id = jsonObj[\"Id\"];\n        metadata.Code = jsonObj[\"Code\"];\n        metadata.Name = jsonObj[\"Name\"];\n        metadata.Description = jsonObj[\"Description\"];\n        let CommandsJArry = jsonObj[\"Commands\"];\n        if (CommandsJArry != null) {\n            metadata.Commands = new Array<WebCommand>();\n            CommandsJArry.forEach(element => {\n                let cmpOpSerializer = new WebCommandConvertor();\n                metadata.Commands.push(cmpOpSerializer.InitFromJobject(element) as WebCommand);\n            });\n        }\n        let convertor = new ExtendsConvert();\n        metadata.Extends=convertor.InitFromJobject(jsonObj[\"Extends\"]);\n        return metadata;\n    }\n}","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { GSPMetadataService } from '@gsp-lcm/metadata-selector';\nimport { map } from 'rxjs/operators';\nimport { WebCommandMetadata, WebCommandMetadataConvertor } from './vm/WebCommandMetadata';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WebCommandComponentService {\n\n    constructor(private metadataService: GSPMetadataService) { }\n    \n    getWebCommandMetadata(metadataUri: string): Observable<WebCommandMetadata> {\n        const fileName = metadataUri.substring(metadataUri.lastIndexOf('/') + 1);\n        const filePath = metadataUri.substring(1, metadataUri.lastIndexOf('/'));\n        return this.metadataService.LoadMetadata(fileName, filePath).pipe(map((dto:any)=>\n            (new WebCommandMetadataConvertor()).InitFromJobject(JSON.parse(dto.content))\n        ));\n    }\n}","import { NgModule } from '@angular/core';\nimport { MetadataSelectModule, GSPMetadataService } from '@gsp-lcm/metadata-selector';\n\n@NgModule({\n  imports: [\n    MetadataSelectModule\n  ],\n  providers:[GSPMetadataService]\n})\nexport class WebcmdModule { }\n","\nexport class CmdParameter{\n    Id:string;\n    Code:string;\n    Name:string;\n    Description:string;\n    ParameterType:string;\n    IsRetVal:boolean;\n}\n ","\n export enum ConditionType\n {\n     IF=0,\n     ELSEIF=1,\n     ELSE=2\n }"]}