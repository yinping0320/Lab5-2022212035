import { map } from 'rxjs/operators';
import { Injectable, NgModule, defineInjectable, inject } from '@angular/core';
import { GSPMetadataService, MetadataSelectModule } from '@gsp-lcm/metadata-selector';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const CommandItemType = {
    MethodRefer: 0,
    Branch: 1,
    BranchCollection: 2,
};
CommandItemType[CommandItemType.MethodRefer] = 'MethodRefer';
CommandItemType[CommandItemType.Branch] = 'Branch';
CommandItemType[CommandItemType.BranchCollection] = 'BranchCollection';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CmpMethodParamConfig {
}
class CmpMethodParamConfigConvert {
    /**
     * @param {?} jsonObj
     * @return {?}
     */
    InitFromJobject(jsonObj) {
        /** @type {?} */
        let cmpMethodParamConfig = new CmpMethodParamConfig();
        cmpMethodParamConfig.ParamCode = jsonObj["ParamCode"];
        cmpMethodParamConfig.ParamName = jsonObj["ParamName"];
        cmpMethodParamConfig.ParamExpress = jsonObj["ParamExpress"];
        return cmpMethodParamConfig;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    ConvertJObject(obj) {
        /** @type {?} */
        let cmpMethodParamConfig = (/** @type {?} */ (obj));
        /** @type {?} */
        let jobj = new Object();
        jobj["ParamCode"] = cmpMethodParamConfig.ParamCode;
        jobj["ParamName"] = cmpMethodParamConfig.ParamName;
        jobj["ParamExpress"] = cmpMethodParamConfig.ParamExpress;
        return jobj;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CmpMethodRefering {
    /**
     * @return {?}
     */
    GetItemType() {
        return CommandItemType.MethodRefer;
    }
    /**
     * @return {?}
     */
    GetItemCode() {
        return this.Code;
    }
    /**
     * @return {?}
     */
    GetItemName() {
        return this.Name;
    }
    /**
     * @return {?}
     */
    GetItemId() {
        return this.Id;
    }
}
class CmpMethodReferingConvert {
    /**
     * @param {?} jsonObj
     * @return {?}
     */
    InitFromJobject(jsonObj) {
        /** @type {?} */
        let cmpMethodRefering = new CmpMethodRefering();
        cmpMethodRefering.Id = jsonObj["Id"];
        cmpMethodRefering.Code = jsonObj["Code"];
        cmpMethodRefering.Name = jsonObj["Name"];
        cmpMethodRefering.MethodId = jsonObj["MethodId"];
        cmpMethodRefering.MethodCode = jsonObj["MethodCode"];
        cmpMethodRefering.MethodName = jsonObj["MethodName"];
        cmpMethodRefering.ComponentId = jsonObj["ComponentId"];
        cmpMethodRefering.ComponentCode = jsonObj["ComponentCode"];
        cmpMethodRefering.ComponentName = jsonObj["ComponentName"];
        cmpMethodRefering.ComponentPath = jsonObj["ComponentPath"];
        cmpMethodRefering.IsReplaced = jsonObj["IsReplaced"];
        cmpMethodRefering.IsBeforeExpansion = jsonObj["IsBeforeExpansion"];
        cmpMethodRefering.IsAfterExpansion = jsonObj["IsAfterExpansion"];
        if (jsonObj["ParamConfigs"] != null) {
            cmpMethodRefering.ParamConfigs = new Array();
            /** @type {?} */
            let convertor = new CmpMethodParamConfigConvert();
            jsonObj["ParamConfigs"].forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                cmpMethodRefering.ParamConfigs.push(convertor.InitFromJobject(element));
            }));
        }
        return cmpMethodRefering;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    ConvertJObject(obj) {
        /** @type {?} */
        let cmpMethodRefering = (/** @type {?} */ (obj));
        /** @type {?} */
        let jobj = new Object();
        jobj["Id"] = cmpMethodRefering.Id;
        jobj["Code"] = cmpMethodRefering.Code;
        jobj["Name"] = cmpMethodRefering.Name;
        jobj["MethodId"] = cmpMethodRefering.MethodId;
        jobj["MethodCode"] = cmpMethodRefering.MethodCode;
        jobj["MethodName"] = cmpMethodRefering.MethodName;
        jobj["ComponentId"] = cmpMethodRefering.ComponentId;
        jobj["ComponentCode"] = cmpMethodRefering.ComponentCode;
        jobj["ComponentName"] = cmpMethodRefering.ComponentName;
        jobj["ComponentPath"] = cmpMethodRefering.ComponentPath;
        jobj["IsReplaced"] = cmpMethodRefering.IsReplaced;
        jobj["IsBeforeExpansion"] = cmpMethodRefering.IsBeforeExpansion;
        jobj["IsAfterExpansion"] = cmpMethodRefering.IsAfterExpansion;
        if (cmpMethodRefering.ParamConfigs != null) {
            /** @type {?} */
            let CommandsJArry = jobj["ParamConfigs"] = [];
            /** @type {?} */
            let convertor = new CmpMethodParamConfigConvert();
            cmpMethodRefering.ParamConfigs.forEach((/**
             * @param {?} paramConfig
             * @return {?}
             */
            paramConfig => {
                CommandsJArry.push(convertor.ConvertJObject(paramConfig));
            }));
        }
        return jobj;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BranchCommandItem {
    /**
     * @return {?}
     */
    GetItemId() {
        return this.Id;
    }
    /**
     * @return {?}
     */
    GetItemCode() {
        return this.Code;
    }
    /**
     * @return {?}
     */
    GetItemName() {
        return this.Name;
    }
    /**
     * @return {?}
     */
    GetItemType() {
        return CommandItemType.Branch;
    }
}
class BranchCommandItemConvertor {
    /**
     * @param {?} obj
     * @return {?}
     */
    ConvertJObject(obj) {
        /** @type {?} */
        let branchItem = (/** @type {?} */ (obj));
        /** @type {?} */
        let jobj = new Object();
        jobj["Id"] = branchItem.Id;
        jobj["Code"] = branchItem.Code;
        jobj["Name"] = branchItem.Name;
        jobj["ConditionType"] = branchItem.ConditionType;
        jobj["Express"] = branchItem.Express;
        if (branchItem.Items != null) {
            /** @type {?} */
            let itemArray = [];
            /** @type {?} */
            let itemConvertor = new CommandItemConvertor();
            branchItem.Items.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                itemArray.push(itemConvertor.ConvertJObject(element));
            }));
            jobj["Items"] = itemArray;
        }
        return jobj;
    }
    /**
     * @param {?} jsonObj
     * @return {?}
     */
    InitFromJobject(jsonObj) {
        /** @type {?} */
        let branchItem = new BranchCommandItem();
        branchItem.Id = jsonObj["Id"];
        branchItem.Code = jsonObj["Code"];
        branchItem.Name = jsonObj["Name"];
        branchItem.ConditionType = jsonObj["ConditionType"];
        branchItem.Express = jsonObj["Express"];
        if (jsonObj["Items"] != null) {
            branchItem.Items = new Array();
            /** @type {?} */
            let itemConvertor = new CommandItemConvertor();
            jsonObj["Items"].forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                branchItem.Items.push(itemConvertor.InitFromJobject(element));
            }));
        }
        return branchItem;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BranchCollectionCommandItem {
    /**
     * @return {?}
     */
    GetItemId() {
        return this.Id;
    }
    /**
     * @return {?}
     */
    GetItemCode() {
        return this.Code;
    }
    /**
     * @return {?}
     */
    GetItemName() {
        return this.Name;
    }
    /**
     * @return {?}
     */
    GetItemType() {
        return CommandItemType.BranchCollection;
    }
}
class BranchCollectionCommandItemConvertor {
    /**
     * @param {?} obj
     * @return {?}
     */
    ConvertJObject(obj) {
        /** @type {?} */
        let branchCollection = (/** @type {?} */ (obj));
        /** @type {?} */
        let jobj = new Object();
        jobj["Id"] = branchCollection.Id;
        jobj["Code"] = branchCollection.Code;
        jobj["Name"] = branchCollection.Name;
        if (branchCollection.Items != null) {
            /** @type {?} */
            let itemArray = [];
            /** @type {?} */
            let itemConvertor = new BranchCommandItemConvertor();
            branchCollection.Items.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                itemArray.push(itemConvertor.ConvertJObject(element));
            }));
            jobj["Items"] = itemArray;
        }
        return jobj;
    }
    /**
     * @param {?} jsonObj
     * @return {?}
     */
    InitFromJobject(jsonObj) {
        /** @type {?} */
        let branchCollectionItem = new BranchCollectionCommandItem();
        branchCollectionItem.Id = jsonObj["Id"];
        branchCollectionItem.Code = jsonObj["Code"];
        branchCollectionItem.Name = jsonObj["Name"];
        if (jsonObj["Items"] != null) {
            branchCollectionItem.Items = new Array();
            /** @type {?} */
            let itemConvertor = new BranchCommandItemConvertor();
            jsonObj["Items"].forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                branchCollectionItem.Items.push(itemConvertor.InitFromJobject(element));
            }));
        }
        return branchCollectionItem;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CommandItemConvertor {
    /**
     * @param {?} obj
     * @return {?}
     */
    ConvertJObject(obj) {
        /** @type {?} */
        let commandItem = (/** @type {?} */ (obj));
        /** @type {?} */
        let itemType = commandItem.GetItemType();
        /** @type {?} */
        let jobj = new Object();
        jobj["Type"] = itemType;
        if (itemType == CommandItemType.MethodRefer) {
            jobj["Content"] = commandItem;
        }
        else if (itemType == CommandItemType.Branch) {
            /** @type {?} */
            let branchConvertor = new BranchCommandItemConvertor();
            jobj["Content"] = branchConvertor.ConvertJObject((/** @type {?} */ (commandItem)));
        }
        else if (itemType == CommandItemType.BranchCollection) {
            /** @type {?} */
            let branchCollectionConvertor = new BranchCollectionCommandItemConvertor();
            jobj["Content"] = branchCollectionConvertor.ConvertJObject((/** @type {?} */ (commandItem)));
        }
        return jobj;
    }
    /**
     * @param {?} jsonObj
     * @return {?}
     */
    InitFromJobject(jsonObj) {
        /** @type {?} */
        let itemType = (/** @type {?} */ (jsonObj["Type"]));
        /** @type {?} */
        let content = jsonObj["Content"];
        if (itemType == CommandItemType.MethodRefer) {
            return Object.assign(new CmpMethodRefering(), (/** @type {?} */ (content)));
        }
        else if (itemType == CommandItemType.Branch) {
            /** @type {?} */
            let branchConvertor = new BranchCommandItemConvertor();
            return branchConvertor.InitFromJobject(jsonObj["Content"]);
        }
        else if (itemType == CommandItemType.BranchCollection) {
            /** @type {?} */
            let branchCollectionConvertor = new BranchCollectionCommandItemConvertor();
            return branchCollectionConvertor.InitFromJobject(jsonObj["Content"]);
        }
        return null;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WebCommand {
}
class WebCommandConvertor {
    /**
     * @param {?} obj
     * @return {?}
     */
    ConvertJObject(obj) {
        /** @type {?} */
        let cmpOp = (/** @type {?} */ (obj));
        /** @type {?} */
        let jobj = new Object();
        jobj["Id"] = cmpOp.Id;
        jobj["Code"] = cmpOp.Code;
        jobj["Name"] = cmpOp.Name;
        jobj["Description"] = cmpOp.Description;
        jobj["SourceCode"] = cmpOp.SourceCode;
        jobj["Parameters"] = cmpOp.Parameters;
        /** @type {?} */
        let items = [];
        if (cmpOp.Items != null) {
            /** @type {?} */
            let itemConvertor = new CommandItemConvertor();
            cmpOp.Items.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                items.push(itemConvertor.ConvertJObject(element));
            }));
        }
        jobj["Items"] = items;
        return jobj;
    }
    /**
     * @param {?} jsonObj
     * @return {?}
     */
    InitFromJobject(jsonObj) {
        /** @type {?} */
        let cmpOp = new WebCommand();
        cmpOp.Id = jsonObj["Id"];
        cmpOp.Code = jsonObj["Code"];
        cmpOp.Name = jsonObj["Name"];
        cmpOp.Description = jsonObj["Description"];
        cmpOp.SourceCode = jsonObj["SourceCode"];
        cmpOp.Parameters = jsonObj["Parameters"];
        cmpOp.Items = new Array();
        if (jsonObj["Items"] != null) {
            /** @type {?} */
            let itemConvertor = new CommandItemConvertor();
            jsonObj["Items"].forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                cmpOp.Items.push(itemConvertor.InitFromJobject(element));
            }));
        }
        return cmpOp;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ExtendProperty {
}
class ExtendsConvert {
    /**
     * @param {?} jsonObj
     * @return {?}
     */
    InitFromJobject(jsonObj) {
        if (jsonObj) {
            /** @type {?} */
            let extendProperty = new ExtendProperty();
            extendProperty.FormCode = jsonObj["FormCode"];
            extendProperty.IsCommon = jsonObj["IsCommon"];
            return extendProperty;
        }
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    ConvertJObject(obj) {
        /** @type {?} */
        let extendProperty = (/** @type {?} */ (obj));
        /** @type {?} */
        let jobj = new Object();
        jobj["FormCode"] = extendProperty.FormCode;
        jobj["IsCommon"] = extendProperty.IsCommon;
        return jobj;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WebCommandMetadata {
}
class WebCommandMetadataConvertor {
    /**
     * @param {?} obj
     * @return {?}
     */
    ConvertJObject(obj) {
        /** @type {?} */
        let metadata = (/** @type {?} */ (obj));
        /** @type {?} */
        let jobj = new Object();
        jobj["Id"] = metadata.Id;
        jobj["Code"] = metadata.Code;
        jobj["Name"] = metadata.Name;
        jobj["Description"] = metadata.Description;
        if (metadata.Commands != null) {
            /** @type {?} */
            let CommandsJArry = jobj["Commands"] = [];
            /** @type {?} */
            let convertor = new WebCommandConvertor();
            metadata.Commands.forEach((/**
             * @param {?} command
             * @return {?}
             */
            command => {
                CommandsJArry.push(convertor.ConvertJObject(command));
            }));
        }
        if (metadata.Extends != null) {
            /** @type {?} */
            let convertor = new ExtendsConvert();
            jobj["Extends"] = convertor.ConvertJObject(metadata.Extends);
        }
        return jobj;
    }
    /**
     * @param {?} jsonObj
     * @return {?}
     */
    InitFromJobject(jsonObj) {
        /** @type {?} */
        let metadata = new WebCommandMetadata();
        metadata.Id = jsonObj["Id"];
        metadata.Code = jsonObj["Code"];
        metadata.Name = jsonObj["Name"];
        metadata.Description = jsonObj["Description"];
        /** @type {?} */
        let CommandsJArry = jsonObj["Commands"];
        if (CommandsJArry != null) {
            metadata.Commands = new Array();
            CommandsJArry.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                /** @type {?} */
                let cmpOpSerializer = new WebCommandConvertor();
                metadata.Commands.push((/** @type {?} */ (cmpOpSerializer.InitFromJobject(element))));
            }));
        }
        /** @type {?} */
        let convertor = new ExtendsConvert();
        metadata.Extends = convertor.InitFromJobject(jsonObj["Extends"]);
        return metadata;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WebCommandComponentService {
    /**
     * @param {?} metadataService
     */
    constructor(metadataService) {
        this.metadataService = metadataService;
    }
    /**
     * @param {?} metadataUri
     * @return {?}
     */
    getWebCommandMetadata(metadataUri) {
        /** @type {?} */
        const fileName = metadataUri.substring(metadataUri.lastIndexOf('/') + 1);
        /** @type {?} */
        const filePath = metadataUri.substring(1, metadataUri.lastIndexOf('/'));
        return this.metadataService.LoadMetadata(fileName, filePath).pipe(map((/**
         * @param {?} dto
         * @return {?}
         */
        (dto) => (new WebCommandMetadataConvertor()).InitFromJobject(JSON.parse(dto.content)))));
    }
}
WebCommandComponentService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
WebCommandComponentService.ctorParameters = () => [
    { type: GSPMetadataService }
];
/** @nocollapse */ WebCommandComponentService.ngInjectableDef = defineInjectable({ factory: function WebCommandComponentService_Factory() { return new WebCommandComponentService(inject(GSPMetadataService)); }, token: WebCommandComponentService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WebcmdModule {
}
WebcmdModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    MetadataSelectModule
                ],
                providers: [GSPMetadataService]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CmdParameter {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const ConditionType = {
    IF: 0,
    ELSEIF: 1,
    ELSE: 2,
};
ConditionType[ConditionType.IF] = 'IF';
ConditionType[ConditionType.ELSEIF] = 'ELSEIF';
ConditionType[ConditionType.ELSE] = 'ELSE';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { WebCommandMetadata, WebCommandMetadataConvertor, ExtendProperty, ExtendsConvert, WebCommand, WebCommandConvertor, CmdParameter, CommandItemConvertor, CmpMethodRefering, CmpMethodReferingConvert, CmpMethodParamConfig, CmpMethodParamConfigConvert, BranchCollectionCommandItem, BranchCollectionCommandItemConvertor, BranchCommandItem, BranchCommandItemConvertor, ConditionType, CommandItemType, WebCommandComponentService, WebcmdModule };

//# sourceMappingURL=gsp-cmp-webcommand.js.map