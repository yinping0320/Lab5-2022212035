{"version":3,"file":"gsp-cmp-webcommand.js.map","sources":["ng://@gsp-cmp/webcommand/lib/vm/CommandItemType.ts","ng://@gsp-cmp/webcommand/lib/vm/CmpMethodParamConfig.ts","ng://@gsp-cmp/webcommand/lib/vm/CmpMethodRefering.ts","ng://@gsp-cmp/webcommand/lib/vm/BranchCommandItem.ts","ng://@gsp-cmp/webcommand/lib/vm/BranchCollectionCommandItem.ts","ng://@gsp-cmp/webcommand/lib/vm/ICommandItem.ts","ng://@gsp-cmp/webcommand/lib/vm/Command.ts","ng://@gsp-cmp/webcommand/lib/vm/ExtendProperty.ts","ng://@gsp-cmp/webcommand/lib/vm/WebCommandMetadata.ts","ng://@gsp-cmp/webcommand/lib/webcmd.service.ts","ng://@gsp-cmp/webcommand/lib/webcmd.module.ts","ng://@gsp-cmp/webcommand/lib/vm/CmdParameter.ts","ng://@gsp-cmp/webcommand/lib/vm/ConditionType.ts"],"sourcesContent":["\n  export enum CommandItemType\n  {\n      MethodRefer=0,\n      Branch=1,\n      BranchCollection=2\n  }","\nexport class CmpMethodParamConfig{\n    ParamCode:string;\n    ParamName:string;\n    ParamExpress:string;\n}\n\nexport class CmpMethodParamConfigConvert{\n\n    InitFromJobject(jsonObj: Object): CmpMethodParamConfig {\n        let cmpMethodParamConfig = new CmpMethodParamConfig();\n        cmpMethodParamConfig.ParamCode = jsonObj[\"ParamCode\"];\n        cmpMethodParamConfig.ParamName = jsonObj[\"ParamName\"];\n        cmpMethodParamConfig.ParamExpress = jsonObj[\"ParamExpress\"];\n        return cmpMethodParamConfig;\n    }\n\n    ConvertJObject(obj: CmpMethodParamConfig): Object {\n        let cmpMethodParamConfig: CmpMethodParamConfig = obj as CmpMethodParamConfig;\n        let jobj = new Object();\n        jobj[\"ParamCode\"] = cmpMethodParamConfig.ParamCode;\n        jobj[\"ParamName\"] = cmpMethodParamConfig.ParamName;\n        jobj[\"ParamExpress\"] = cmpMethodParamConfig.ParamExpress;\n        return jobj;\n    }\n}\n","import { CmpMethodParamConfig, CmpMethodParamConfigConvert } from \"./CmpMethodParamConfig\";\nimport { ICommandItem } from \"./ICommandItem\";\nimport { CommandItemType } from \"./CommandItemType\";\n\nexport class CmpMethodRefering implements ICommandItem {\n    \n    Id:string;\n    Code:string;\n    Name:string;\n    ComponentId: string;\n    ComponentCode: string;\n    ComponentName: string;\n    ComponentPath: string;\n    MethodId: string;\n    MethodCode: string;\n    MethodName: string;\n    IsReplaced:boolean;\n    IsBeforeExpansion:boolean;\n    IsAfterExpansion:boolean;\n    ParamConfigs: Array<CmpMethodParamConfig>;\n\n    GetItemType(): CommandItemType {\n        return CommandItemType.MethodRefer;\n    }\n    GetItemCode(): string {\n        return this.Code;\n    }\n    GetItemName(): string {\n        return this.Name;\n    }\n    GetItemId(): string {\n        return this.Id;\n    }\n}\n\nexport class CmpMethodReferingConvert{\n\n    InitFromJobject(jsonObj: Object): CmpMethodRefering {\n        let cmpMethodRefering = new CmpMethodRefering();\n        cmpMethodRefering.Id = jsonObj[\"Id\"];\n        cmpMethodRefering.Code = jsonObj[\"Code\"];\n        cmpMethodRefering.Name = jsonObj[\"Name\"];\n        cmpMethodRefering.MethodId = jsonObj[\"MethodId\"];\n        cmpMethodRefering.MethodCode = jsonObj[\"MethodCode\"];\n        cmpMethodRefering.MethodName = jsonObj[\"MethodName\"];\n        cmpMethodRefering.ComponentId = jsonObj[\"ComponentId\"];\n        cmpMethodRefering.ComponentCode = jsonObj[\"ComponentCode\"];\n        cmpMethodRefering.ComponentName = jsonObj[\"ComponentName\"];\n        cmpMethodRefering.ComponentPath = jsonObj[\"ComponentPath\"];\n        cmpMethodRefering.IsReplaced = jsonObj[\"IsReplaced\"];\n        cmpMethodRefering.IsBeforeExpansion = jsonObj[\"IsBeforeExpansion\"];\n        cmpMethodRefering.IsAfterExpansion = jsonObj[\"IsAfterExpansion\"];\n        if (jsonObj[\"ParamConfigs\"] != null) {\n            cmpMethodRefering.ParamConfigs=new Array<CmpMethodParamConfig>();\n            let convertor = new CmpMethodParamConfigConvert();\n            jsonObj[\"ParamConfigs\"].forEach(element => {\n                cmpMethodRefering.ParamConfigs.push(convertor.InitFromJobject(element));\n            });\n        }\n        return cmpMethodRefering;\n    }\n\n    ConvertJObject(obj: CmpMethodRefering): Object {\n        let cmpMethodRefering: CmpMethodRefering = obj as CmpMethodRefering;\n        let jobj = new Object();\n        jobj[\"Id\"] = cmpMethodRefering.Id;\n        jobj[\"Code\"] = cmpMethodRefering.Code;\n        jobj[\"Name\"] = cmpMethodRefering.Name;\n        jobj[\"MethodId\"] = cmpMethodRefering.MethodId;\n        jobj[\"MethodCode\"] = cmpMethodRefering.MethodCode;\n        jobj[\"MethodName\"] = cmpMethodRefering.MethodName;\n        jobj[\"ComponentId\"] = cmpMethodRefering.ComponentId;\n        jobj[\"ComponentCode\"] = cmpMethodRefering.ComponentCode;\n        jobj[\"ComponentName\"] = cmpMethodRefering.ComponentName;\n        jobj[\"ComponentPath\"] = cmpMethodRefering.ComponentPath;\n        jobj[\"IsReplaced\"] = cmpMethodRefering.IsReplaced;\n        jobj[\"IsBeforeExpansion\"] = cmpMethodRefering.IsBeforeExpansion;\n        jobj[\"IsAfterExpansion\"] = cmpMethodRefering.IsAfterExpansion;\n        if (cmpMethodRefering.ParamConfigs != null) {\n            let CommandsJArry = jobj[\"ParamConfigs\"] = [];\n            let convertor = new CmpMethodParamConfigConvert();\n            cmpMethodRefering.ParamConfigs.forEach(paramConfig => {\n                CommandsJArry.push(convertor.ConvertJObject(paramConfig));\n            });\n        }\n        return jobj;\n    }\n}","import { CommandItemType } from \"./CommandItemType\";\nimport { ICommandItem, CommandItemConvertor } from \"./ICommandItem\";\nimport { ConditionType } from \"./ConditionType\";\n\nexport class BranchCommandItem implements ICommandItem {\n    Id: string;\n    Code:string;\n    Name: string;\n    ConditionType: ConditionType;\n    Express: string;\n    Items: Array<ICommandItem>;\n\n    GetItemId(): string {\n        return this.Id;\n    }\n\n    GetItemCode(): string {\n        return this.Code;\n    }\n\n    GetItemName(): string {\n        return this.Name;\n    }\n\n    GetItemType(): CommandItemType {\n        return CommandItemType.Branch;\n    }\n}\n\nexport class BranchCommandItemConvertor {\n    ConvertJObject(obj: BranchCommandItem): Object {\n        let branchItem = obj as BranchCommandItem;\n        let jobj = new Object();\n        jobj[\"Id\"] = branchItem.Id;\n        jobj[\"Code\"] = branchItem.Code;\n        jobj[\"Name\"] = branchItem.Name;\n        jobj[\"ConditionType\"] = branchItem.ConditionType;\n        jobj[\"Express\"] = branchItem.Express;\n        if (branchItem.Items != null) {\n            let itemArray = [];\n            let itemConvertor = new CommandItemConvertor();\n            branchItem.Items.forEach(element => {\n                itemArray.push(itemConvertor.ConvertJObject(element));\n            });\n            jobj[\"Items\"]=itemArray;\n        }\n        return jobj;\n    }\n\n    InitFromJobject(jsonObj: Object): BranchCommandItem {\n        let branchItem = new BranchCommandItem();\n        branchItem.Id = jsonObj[\"Id\"];\n        branchItem.Code = jsonObj[\"Code\"];\n        branchItem.Name = jsonObj[\"Name\"];\n        branchItem.ConditionType = jsonObj[\"ConditionType\"];\n        branchItem.Express = jsonObj[\"Express\"];\n        if (jsonObj[\"Items\"] != null) {\n            branchItem.Items=new Array<ICommandItem>();\n            let itemConvertor = new CommandItemConvertor();\n            jsonObj[\"Items\"].forEach(element => {\n                branchItem.Items.push(itemConvertor.InitFromJobject(element));\n            });\n        }\n        return branchItem;\n    }\n}\n","import { ICommandItem } from \"./ICommandItem\";\nimport { CommandItemType } from \"./CommandItemType\";\nimport { BranchCommandItem, BranchCommandItemConvertor } from \"./BranchCommandItem\";\n\nexport class BranchCollectionCommandItem implements ICommandItem {\n    Id: string;\n    Code:string;\n    Name: string;\n    Items: Array<BranchCommandItem>;\n    GetItemId(): string {\n        return this.Id;\n    }\n    GetItemCode(): string {\n        return this.Code;\n    }\n    GetItemName(): string {\n        return this.Name;\n    }\n    GetItemType(): CommandItemType {\n        return CommandItemType.BranchCollection;\n    }\n}\n\nexport class BranchCollectionCommandItemConvertor {\n    ConvertJObject(obj: BranchCollectionCommandItem): Object {\n        let branchCollection = obj as BranchCollectionCommandItem;\n        let jobj = new Object();\n        jobj[\"Id\"] = branchCollection.Id;\n        jobj[\"Code\"] = branchCollection.Code;\n        jobj[\"Name\"] = branchCollection.Name;\n        if (branchCollection.Items != null) {\n            let itemArray = [];\n            let itemConvertor = new BranchCommandItemConvertor();\n            branchCollection.Items.forEach(element => {\n                itemArray.push(itemConvertor.ConvertJObject(element));\n            });\n            jobj[\"Items\"]=itemArray;\n        }\n        return jobj;\n    }\n\n    InitFromJobject(jsonObj: Object): BranchCollectionCommandItem {\n        let branchCollectionItem = new BranchCollectionCommandItem();\n        branchCollectionItem.Id = jsonObj[\"Id\"];\n        branchCollectionItem.Code = jsonObj[\"Code\"];\n        branchCollectionItem.Name = jsonObj[\"Name\"];\n        if (jsonObj[\"Items\"] != null) {\n            branchCollectionItem.Items=new Array<BranchCommandItem>();\n            let itemConvertor = new BranchCommandItemConvertor();\n            jsonObj[\"Items\"].forEach(element => {\n                branchCollectionItem.Items.push(itemConvertor.InitFromJobject(element));\n            });\n        }\n        return branchCollectionItem;\n    }\n}","import { CommandItemType } from \"./CommandItemType\";\nimport { CmpMethodRefering, CmpMethodReferingConvert } from \"./CmpMethodRefering\";\nimport { BranchCommandItemConvertor, BranchCommandItem } from \"./BranchCommandItem\";\nimport { BranchCollectionCommandItemConvertor, BranchCollectionCommandItem } from \"./BranchCollectionCommandItem\";\nexport interface ICommandItem\n{\n     GetItemType():CommandItemType;\n\n     GetItemCode():string;\n\n     GetItemName():string;\n\n     GetItemId():string;\n}\n\nexport class CommandItemConvertor {\n    ConvertJObject(obj: ICommandItem): Object {\n        let commandItem = obj as ICommandItem;\n        let itemType = commandItem.GetItemType();\n        let jobj = new Object();\n        jobj[\"Type\"] = itemType;\n        if (itemType == CommandItemType.MethodRefer) {\n            jobj[\"Content\"] = commandItem;\n        }\n        else if (itemType == CommandItemType.Branch) {\n           let  branchConvertor=new BranchCommandItemConvertor();\n           jobj[\"Content\"] = branchConvertor.ConvertJObject(commandItem as BranchCommandItem);\n        }\n        else if (itemType == CommandItemType.BranchCollection) {\n            let  branchCollectionConvertor=new BranchCollectionCommandItemConvertor();\n            jobj[\"Content\"] = branchCollectionConvertor.ConvertJObject(commandItem as BranchCollectionCommandItem);\n        }\n        return jobj;\n    }\n\n    InitFromJobject(jsonObj: Object): ICommandItem {\n        let itemType=jsonObj[\"Type\"] as CommandItemType;\n        let content:ICommandItem=jsonObj[\"Content\"]; \n        if (itemType == CommandItemType.MethodRefer) {\n            return Object.assign(new CmpMethodRefering(),content as CmpMethodRefering);;\n        }\n        else if (itemType == CommandItemType.Branch) {\n            let  branchConvertor=new BranchCommandItemConvertor();\n            return branchConvertor.InitFromJobject(jsonObj[\"Content\"]);\n        }\n        else if (itemType == CommandItemType.BranchCollection) {\n            let  branchCollectionConvertor=new BranchCollectionCommandItemConvertor();\n            return branchCollectionConvertor.InitFromJobject(jsonObj[\"Content\"]);\n        }\n        return null;\n    }\n}","import { ICommandItem, CommandItemConvertor } from \"./ICommandItem\"; \nimport { CmdParameter } from \"./CmdParameter\";\n\nexport class WebCommand{\n    Id:string;\n    Code:string;\n    Name:string;\n    Description:string;\n    Parameters:Array<CmdParameter>;\n    SourceCode:string;\n    Items: Array<ICommandItem>;\n}\n\nexport class WebCommandConvertor\n{\n    ConvertJObject(obj : WebCommand): Object {\n        \n        let cmpOp = obj as WebCommand;\n        let jobj=new Object();\n        jobj[\"Id\"]=cmpOp.Id;\n        jobj[\"Code\"]=cmpOp.Code;\n        jobj[\"Name\"]=cmpOp.Name;\n        jobj[\"Description\"]=cmpOp.Description;\n        jobj[\"SourceCode\"]=cmpOp.SourceCode;\n        jobj[\"Parameters\"]=cmpOp.Parameters;\n        let items=[];\n        if(cmpOp.Items!=null)\n        {\n            let itemConvertor = new CommandItemConvertor();\n            cmpOp.Items.forEach(element => {\n                items.push(itemConvertor.ConvertJObject(element));\n            }); \n        }\n        jobj[\"Items\"]=items;\n        return jobj;\n    }    \n    \n    InitFromJobject(jsonObj: Object): WebCommand {\n        let cmpOp = new WebCommand();\n        cmpOp.Id = jsonObj[\"Id\"];\n        cmpOp.Code = jsonObj[\"Code\"];\n        cmpOp.Name = jsonObj[\"Name\"];\n        cmpOp.Description = jsonObj[\"Description\"];\n        cmpOp.SourceCode = jsonObj[\"SourceCode\"];\n        cmpOp.Parameters=jsonObj[\"Parameters\"];\n        cmpOp.Items=new Array<ICommandItem>();\n        if(jsonObj[\"Items\"]!=null)\n        {\n            let itemConvertor = new CommandItemConvertor();\n            jsonObj[\"Items\"].forEach(element => {\n                cmpOp.Items.push(itemConvertor.InitFromJobject(element));\n            });\n        }\n        return cmpOp;\n    }\n}","export class ExtendProperty{\n    FormCode:string;\n    IsCommon:boolean;\n}\n\nexport class ExtendsConvert{\n    InitFromJobject(jsonObj: Object): ExtendProperty {\n        if(jsonObj){\n            let extendProperty = new ExtendProperty();\n            extendProperty.FormCode = jsonObj[\"FormCode\"];\n            extendProperty.IsCommon = jsonObj[\"IsCommon\"];\n            return extendProperty;\n        }\n    }\n\n    ConvertJObject(obj: ExtendProperty): Object {\n        let extendProperty: ExtendProperty = obj as ExtendProperty;\n        let jobj = new Object();\n        jobj[\"FormCode\"] = extendProperty.FormCode;\n        jobj[\"IsCommon\"] = extendProperty.IsCommon;\n        return jobj;\n    }\n}","import { WebCommand, WebCommandConvertor } from \"./Command\";\nimport { ExtendProperty, ExtendsConvert } from \"./ExtendProperty\";\n\nexport class WebCommandMetadata {\n    Id: string;\n    Code: string;\n    Name: string;\n    Description: string;\n    Extends:ExtendProperty;\n    Commands: Array<WebCommand>;\n}\n\nexport class WebCommandMetadataConvertor {\n    ConvertJObject(obj: WebCommandMetadata): Object {\n        let metadata: WebCommandMetadata = obj as WebCommandMetadata;\n        let jobj = new Object();\n        jobj[\"Id\"] = metadata.Id;\n        jobj[\"Code\"] = metadata.Code;\n        jobj[\"Name\"] = metadata.Name;\n        jobj[\"Description\"] = metadata.Description;\n        if (metadata.Commands != null) {\n            let CommandsJArry = jobj[\"Commands\"] = [];\n            let convertor = new WebCommandConvertor();\n            metadata.Commands.forEach(command => {\n                CommandsJArry.push(convertor.ConvertJObject(command));\n            });\n        }\n        if(metadata.Extends!=null){\n            let convertor = new ExtendsConvert();\n            jobj[\"Extends\"] =convertor.ConvertJObject(metadata.Extends);\n        }\n        return jobj;\n    }\n\n    InitFromJobject(jsonObj: Object): WebCommandMetadata {\n        let metadata = new WebCommandMetadata();\n        metadata.Id = jsonObj[\"Id\"];\n        metadata.Code = jsonObj[\"Code\"];\n        metadata.Name = jsonObj[\"Name\"];\n        metadata.Description = jsonObj[\"Description\"];\n        let CommandsJArry = jsonObj[\"Commands\"];\n        if (CommandsJArry != null) {\n            metadata.Commands = new Array<WebCommand>();\n            CommandsJArry.forEach(element => {\n                let cmpOpSerializer = new WebCommandConvertor();\n                metadata.Commands.push(cmpOpSerializer.InitFromJobject(element) as WebCommand);\n            });\n        }\n        let convertor = new ExtendsConvert();\n        metadata.Extends=convertor.InitFromJobject(jsonObj[\"Extends\"]);\n        return metadata;\n    }\n}","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { GSPMetadataService } from '@gsp-lcm/metadata-selector';\nimport { map } from 'rxjs/operators';\nimport { WebCommandMetadata, WebCommandMetadataConvertor } from './vm/WebCommandMetadata';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WebCommandComponentService {\n\n    constructor(private metadataService: GSPMetadataService) { }\n    \n    getWebCommandMetadata(metadataUri: string): Observable<WebCommandMetadata> {\n        const fileName = metadataUri.substring(metadataUri.lastIndexOf('/') + 1);\n        const filePath = metadataUri.substring(1, metadataUri.lastIndexOf('/'));\n        return this.metadataService.LoadMetadata(fileName, filePath).pipe(map((dto:any)=>\n            (new WebCommandMetadataConvertor()).InitFromJobject(JSON.parse(dto.content))\n        ));\n    }\n}","import { NgModule } from '@angular/core';\nimport { MetadataSelectModule, GSPMetadataService } from '@gsp-lcm/metadata-selector';\n\n@NgModule({\n  imports: [\n    MetadataSelectModule\n  ],\n  providers:[GSPMetadataService]\n})\nexport class WebcmdModule { }\n","\nexport class CmdParameter{\n    Id:string;\n    Code:string;\n    Name:string;\n    Description:string;\n    ParameterType:string;\n    IsRetVal:boolean;\n}\n ","\n export enum ConditionType\n {\n     IF=0,\n     ELSEIF=1,\n     ELSE=2\n }"],"names":[],"mappings":"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"}
