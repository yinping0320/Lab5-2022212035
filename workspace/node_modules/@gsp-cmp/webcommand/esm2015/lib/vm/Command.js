/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommandItemConvertor } from "./ICommandItem";
export class WebCommand {
}
if (false) {
    /** @type {?} */
    WebCommand.prototype.Id;
    /** @type {?} */
    WebCommand.prototype.Code;
    /** @type {?} */
    WebCommand.prototype.Name;
    /** @type {?} */
    WebCommand.prototype.Description;
    /** @type {?} */
    WebCommand.prototype.Parameters;
    /** @type {?} */
    WebCommand.prototype.SourceCode;
    /** @type {?} */
    WebCommand.prototype.Items;
}
export class WebCommandConvertor {
    /**
     * @param {?} obj
     * @return {?}
     */
    ConvertJObject(obj) {
        /** @type {?} */
        let cmpOp = (/** @type {?} */ (obj));
        /** @type {?} */
        let jobj = new Object();
        jobj["Id"] = cmpOp.Id;
        jobj["Code"] = cmpOp.Code;
        jobj["Name"] = cmpOp.Name;
        jobj["Description"] = cmpOp.Description;
        jobj["SourceCode"] = cmpOp.SourceCode;
        jobj["Parameters"] = cmpOp.Parameters;
        /** @type {?} */
        let items = [];
        if (cmpOp.Items != null) {
            /** @type {?} */
            let itemConvertor = new CommandItemConvertor();
            cmpOp.Items.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                items.push(itemConvertor.ConvertJObject(element));
            }));
        }
        jobj["Items"] = items;
        return jobj;
    }
    /**
     * @param {?} jsonObj
     * @return {?}
     */
    InitFromJobject(jsonObj) {
        /** @type {?} */
        let cmpOp = new WebCommand();
        cmpOp.Id = jsonObj["Id"];
        cmpOp.Code = jsonObj["Code"];
        cmpOp.Name = jsonObj["Name"];
        cmpOp.Description = jsonObj["Description"];
        cmpOp.SourceCode = jsonObj["SourceCode"];
        cmpOp.Parameters = jsonObj["Parameters"];
        cmpOp.Items = new Array();
        if (jsonObj["Items"] != null) {
            /** @type {?} */
            let itemConvertor = new CommandItemConvertor();
            jsonObj["Items"].forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                cmpOp.Items.push(itemConvertor.InitFromJobject(element));
            }));
        }
        return cmpOp;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3AtY21wL3dlYmNvbW1hbmQvIiwic291cmNlcyI6WyJsaWIvdm0vQ29tbWFuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFnQixvQkFBb0IsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR3BFLE1BQU0sT0FBTyxVQUFVO0NBUXRCOzs7SUFQRyx3QkFBVTs7SUFDViwwQkFBWTs7SUFDWiwwQkFBWTs7SUFDWixpQ0FBbUI7O0lBQ25CLGdDQUErQjs7SUFDL0IsZ0NBQWtCOztJQUNsQiwyQkFBMkI7O0FBRy9CLE1BQU0sT0FBTyxtQkFBbUI7Ozs7O0lBRTVCLGNBQWMsQ0FBQyxHQUFnQjs7WUFFdkIsS0FBSyxHQUFHLG1CQUFBLEdBQUcsRUFBYzs7WUFDekIsSUFBSSxHQUFDLElBQUksTUFBTSxFQUFFO1FBQ3JCLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDO1FBQ3BDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDOztZQUNoQyxLQUFLLEdBQUMsRUFBRTtRQUNaLElBQUcsS0FBSyxDQUFDLEtBQUssSUFBRSxJQUFJLEVBQ3BCOztnQkFDUSxhQUFhLEdBQUcsSUFBSSxvQkFBb0IsRUFBRTtZQUM5QyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU87Ozs7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDMUIsS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDdEQsQ0FBQyxFQUFDLENBQUM7U0FDTjtRQUNELElBQUksQ0FBQyxPQUFPLENBQUMsR0FBQyxLQUFLLENBQUM7UUFDcEIsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQzs7Ozs7SUFFRCxlQUFlLENBQUMsT0FBZTs7WUFDdkIsS0FBSyxHQUFHLElBQUksVUFBVSxFQUFFO1FBQzVCLEtBQUssQ0FBQyxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pCLEtBQUssQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdCLEtBQUssQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdCLEtBQUssQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzNDLEtBQUssQ0FBQyxVQUFVLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3pDLEtBQUssQ0FBQyxVQUFVLEdBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3ZDLEtBQUssQ0FBQyxLQUFLLEdBQUMsSUFBSSxLQUFLLEVBQWdCLENBQUM7UUFDdEMsSUFBRyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUUsSUFBSSxFQUN6Qjs7Z0JBQ1EsYUFBYSxHQUFHLElBQUksb0JBQW9CLEVBQUU7WUFDOUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU87Ozs7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDL0IsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQzdELENBQUMsRUFBQyxDQUFDO1NBQ047UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJQ29tbWFuZEl0ZW0sIENvbW1hbmRJdGVtQ29udmVydG9yIH0gZnJvbSBcIi4vSUNvbW1hbmRJdGVtXCI7IFxuaW1wb3J0IHsgQ21kUGFyYW1ldGVyIH0gZnJvbSBcIi4vQ21kUGFyYW1ldGVyXCI7XG5cbmV4cG9ydCBjbGFzcyBXZWJDb21tYW5ke1xuICAgIElkOnN0cmluZztcbiAgICBDb2RlOnN0cmluZztcbiAgICBOYW1lOnN0cmluZztcbiAgICBEZXNjcmlwdGlvbjpzdHJpbmc7XG4gICAgUGFyYW1ldGVyczpBcnJheTxDbWRQYXJhbWV0ZXI+O1xuICAgIFNvdXJjZUNvZGU6c3RyaW5nO1xuICAgIEl0ZW1zOiBBcnJheTxJQ29tbWFuZEl0ZW0+O1xufVxuXG5leHBvcnQgY2xhc3MgV2ViQ29tbWFuZENvbnZlcnRvclxue1xuICAgIENvbnZlcnRKT2JqZWN0KG9iaiA6IFdlYkNvbW1hbmQpOiBPYmplY3Qge1xuICAgICAgICBcbiAgICAgICAgbGV0IGNtcE9wID0gb2JqIGFzIFdlYkNvbW1hbmQ7XG4gICAgICAgIGxldCBqb2JqPW5ldyBPYmplY3QoKTtcbiAgICAgICAgam9ialtcIklkXCJdPWNtcE9wLklkO1xuICAgICAgICBqb2JqW1wiQ29kZVwiXT1jbXBPcC5Db2RlO1xuICAgICAgICBqb2JqW1wiTmFtZVwiXT1jbXBPcC5OYW1lO1xuICAgICAgICBqb2JqW1wiRGVzY3JpcHRpb25cIl09Y21wT3AuRGVzY3JpcHRpb247XG4gICAgICAgIGpvYmpbXCJTb3VyY2VDb2RlXCJdPWNtcE9wLlNvdXJjZUNvZGU7XG4gICAgICAgIGpvYmpbXCJQYXJhbWV0ZXJzXCJdPWNtcE9wLlBhcmFtZXRlcnM7XG4gICAgICAgIGxldCBpdGVtcz1bXTtcbiAgICAgICAgaWYoY21wT3AuSXRlbXMhPW51bGwpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxldCBpdGVtQ29udmVydG9yID0gbmV3IENvbW1hbmRJdGVtQ29udmVydG9yKCk7XG4gICAgICAgICAgICBjbXBPcC5JdGVtcy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goaXRlbUNvbnZlcnRvci5Db252ZXJ0Sk9iamVjdChlbGVtZW50KSk7XG4gICAgICAgICAgICB9KTsgXG4gICAgICAgIH1cbiAgICAgICAgam9ialtcIkl0ZW1zXCJdPWl0ZW1zO1xuICAgICAgICByZXR1cm4gam9iajtcbiAgICB9ICAgIFxuICAgIFxuICAgIEluaXRGcm9tSm9iamVjdChqc29uT2JqOiBPYmplY3QpOiBXZWJDb21tYW5kIHtcbiAgICAgICAgbGV0IGNtcE9wID0gbmV3IFdlYkNvbW1hbmQoKTtcbiAgICAgICAgY21wT3AuSWQgPSBqc29uT2JqW1wiSWRcIl07XG4gICAgICAgIGNtcE9wLkNvZGUgPSBqc29uT2JqW1wiQ29kZVwiXTtcbiAgICAgICAgY21wT3AuTmFtZSA9IGpzb25PYmpbXCJOYW1lXCJdO1xuICAgICAgICBjbXBPcC5EZXNjcmlwdGlvbiA9IGpzb25PYmpbXCJEZXNjcmlwdGlvblwiXTtcbiAgICAgICAgY21wT3AuU291cmNlQ29kZSA9IGpzb25PYmpbXCJTb3VyY2VDb2RlXCJdO1xuICAgICAgICBjbXBPcC5QYXJhbWV0ZXJzPWpzb25PYmpbXCJQYXJhbWV0ZXJzXCJdO1xuICAgICAgICBjbXBPcC5JdGVtcz1uZXcgQXJyYXk8SUNvbW1hbmRJdGVtPigpO1xuICAgICAgICBpZihqc29uT2JqW1wiSXRlbXNcIl0hPW51bGwpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxldCBpdGVtQ29udmVydG9yID0gbmV3IENvbW1hbmRJdGVtQ29udmVydG9yKCk7XG4gICAgICAgICAgICBqc29uT2JqW1wiSXRlbXNcIl0uZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgICAgICBjbXBPcC5JdGVtcy5wdXNoKGl0ZW1Db252ZXJ0b3IuSW5pdEZyb21Kb2JqZWN0KGVsZW1lbnQpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjbXBPcDtcbiAgICB9XG59Il19