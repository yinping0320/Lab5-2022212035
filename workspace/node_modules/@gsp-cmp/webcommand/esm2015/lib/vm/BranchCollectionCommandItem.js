/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommandItemType } from "./CommandItemType";
import { BranchCommandItemConvertor } from "./BranchCommandItem";
export class BranchCollectionCommandItem {
    /**
     * @return {?}
     */
    GetItemId() {
        return this.Id;
    }
    /**
     * @return {?}
     */
    GetItemCode() {
        return this.Code;
    }
    /**
     * @return {?}
     */
    GetItemName() {
        return this.Name;
    }
    /**
     * @return {?}
     */
    GetItemType() {
        return CommandItemType.BranchCollection;
    }
}
if (false) {
    /** @type {?} */
    BranchCollectionCommandItem.prototype.Id;
    /** @type {?} */
    BranchCollectionCommandItem.prototype.Code;
    /** @type {?} */
    BranchCollectionCommandItem.prototype.Name;
    /** @type {?} */
    BranchCollectionCommandItem.prototype.Items;
}
export class BranchCollectionCommandItemConvertor {
    /**
     * @param {?} obj
     * @return {?}
     */
    ConvertJObject(obj) {
        /** @type {?} */
        let branchCollection = (/** @type {?} */ (obj));
        /** @type {?} */
        let jobj = new Object();
        jobj["Id"] = branchCollection.Id;
        jobj["Code"] = branchCollection.Code;
        jobj["Name"] = branchCollection.Name;
        if (branchCollection.Items != null) {
            /** @type {?} */
            let itemArray = [];
            /** @type {?} */
            let itemConvertor = new BranchCommandItemConvertor();
            branchCollection.Items.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                itemArray.push(itemConvertor.ConvertJObject(element));
            }));
            jobj["Items"] = itemArray;
        }
        return jobj;
    }
    /**
     * @param {?} jsonObj
     * @return {?}
     */
    InitFromJobject(jsonObj) {
        /** @type {?} */
        let branchCollectionItem = new BranchCollectionCommandItem();
        branchCollectionItem.Id = jsonObj["Id"];
        branchCollectionItem.Code = jsonObj["Code"];
        branchCollectionItem.Name = jsonObj["Name"];
        if (jsonObj["Items"] != null) {
            branchCollectionItem.Items = new Array();
            /** @type {?} */
            let itemConvertor = new BranchCommandItemConvertor();
            jsonObj["Items"].forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                branchCollectionItem.Items.push(itemConvertor.InitFromJobject(element));
            }));
        }
        return branchCollectionItem;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnJhbmNoQ29sbGVjdGlvbkNvbW1hbmRJdGVtLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1jbXAvd2ViY29tbWFuZC8iLCJzb3VyY2VzIjpbImxpYi92bS9CcmFuY2hDb2xsZWN0aW9uQ29tbWFuZEl0ZW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNwRCxPQUFPLEVBQXFCLDBCQUEwQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFcEYsTUFBTSxPQUFPLDJCQUEyQjs7OztJQUtwQyxTQUFTO1FBQ0wsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDO0lBQ25CLENBQUM7Ozs7SUFDRCxXQUFXO1FBQ1AsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3JCLENBQUM7Ozs7SUFDRCxXQUFXO1FBQ1AsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3JCLENBQUM7Ozs7SUFDRCxXQUFXO1FBQ1AsT0FBTyxlQUFlLENBQUMsZ0JBQWdCLENBQUM7SUFDNUMsQ0FBQztDQUNKOzs7SUFoQkcseUNBQVc7O0lBQ1gsMkNBQVk7O0lBQ1osMkNBQWE7O0lBQ2IsNENBQWdDOztBQWVwQyxNQUFNLE9BQU8sb0NBQW9DOzs7OztJQUM3QyxjQUFjLENBQUMsR0FBZ0M7O1lBQ3ZDLGdCQUFnQixHQUFHLG1CQUFBLEdBQUcsRUFBK0I7O1lBQ3JELElBQUksR0FBRyxJQUFJLE1BQU0sRUFBRTtRQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsZ0JBQWdCLENBQUMsRUFBRSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUM7UUFDckMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQztRQUNyQyxJQUFJLGdCQUFnQixDQUFDLEtBQUssSUFBSSxJQUFJLEVBQUU7O2dCQUM1QixTQUFTLEdBQUcsRUFBRTs7Z0JBQ2QsYUFBYSxHQUFHLElBQUksMEJBQTBCLEVBQUU7WUFDcEQsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLE9BQU87Ozs7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDckMsU0FBUyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDMUQsQ0FBQyxFQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUMsU0FBUyxDQUFDO1NBQzNCO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQzs7Ozs7SUFFRCxlQUFlLENBQUMsT0FBZTs7WUFDdkIsb0JBQW9CLEdBQUcsSUFBSSwyQkFBMkIsRUFBRTtRQUM1RCxvQkFBb0IsQ0FBQyxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hDLG9CQUFvQixDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDNUMsb0JBQW9CLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1QyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLEVBQUU7WUFDMUIsb0JBQW9CLENBQUMsS0FBSyxHQUFDLElBQUksS0FBSyxFQUFxQixDQUFDOztnQkFDdEQsYUFBYSxHQUFHLElBQUksMEJBQTBCLEVBQUU7WUFDcEQsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU87Ozs7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDL0Isb0JBQW9CLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDNUUsQ0FBQyxFQUFDLENBQUM7U0FDTjtRQUNELE9BQU8sb0JBQW9CLENBQUM7SUFDaEMsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUNvbW1hbmRJdGVtIH0gZnJvbSBcIi4vSUNvbW1hbmRJdGVtXCI7XG5pbXBvcnQgeyBDb21tYW5kSXRlbVR5cGUgfSBmcm9tIFwiLi9Db21tYW5kSXRlbVR5cGVcIjtcbmltcG9ydCB7IEJyYW5jaENvbW1hbmRJdGVtLCBCcmFuY2hDb21tYW5kSXRlbUNvbnZlcnRvciB9IGZyb20gXCIuL0JyYW5jaENvbW1hbmRJdGVtXCI7XG5cbmV4cG9ydCBjbGFzcyBCcmFuY2hDb2xsZWN0aW9uQ29tbWFuZEl0ZW0gaW1wbGVtZW50cyBJQ29tbWFuZEl0ZW0ge1xuICAgIElkOiBzdHJpbmc7XG4gICAgQ29kZTpzdHJpbmc7XG4gICAgTmFtZTogc3RyaW5nO1xuICAgIEl0ZW1zOiBBcnJheTxCcmFuY2hDb21tYW5kSXRlbT47XG4gICAgR2V0SXRlbUlkKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLklkO1xuICAgIH1cbiAgICBHZXRJdGVtQ29kZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5Db2RlO1xuICAgIH1cbiAgICBHZXRJdGVtTmFtZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5OYW1lO1xuICAgIH1cbiAgICBHZXRJdGVtVHlwZSgpOiBDb21tYW5kSXRlbVR5cGUge1xuICAgICAgICByZXR1cm4gQ29tbWFuZEl0ZW1UeXBlLkJyYW5jaENvbGxlY3Rpb247XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQnJhbmNoQ29sbGVjdGlvbkNvbW1hbmRJdGVtQ29udmVydG9yIHtcbiAgICBDb252ZXJ0Sk9iamVjdChvYmo6IEJyYW5jaENvbGxlY3Rpb25Db21tYW5kSXRlbSk6IE9iamVjdCB7XG4gICAgICAgIGxldCBicmFuY2hDb2xsZWN0aW9uID0gb2JqIGFzIEJyYW5jaENvbGxlY3Rpb25Db21tYW5kSXRlbTtcbiAgICAgICAgbGV0IGpvYmogPSBuZXcgT2JqZWN0KCk7XG4gICAgICAgIGpvYmpbXCJJZFwiXSA9IGJyYW5jaENvbGxlY3Rpb24uSWQ7XG4gICAgICAgIGpvYmpbXCJDb2RlXCJdID0gYnJhbmNoQ29sbGVjdGlvbi5Db2RlO1xuICAgICAgICBqb2JqW1wiTmFtZVwiXSA9IGJyYW5jaENvbGxlY3Rpb24uTmFtZTtcbiAgICAgICAgaWYgKGJyYW5jaENvbGxlY3Rpb24uSXRlbXMgIT0gbnVsbCkge1xuICAgICAgICAgICAgbGV0IGl0ZW1BcnJheSA9IFtdO1xuICAgICAgICAgICAgbGV0IGl0ZW1Db252ZXJ0b3IgPSBuZXcgQnJhbmNoQ29tbWFuZEl0ZW1Db252ZXJ0b3IoKTtcbiAgICAgICAgICAgIGJyYW5jaENvbGxlY3Rpb24uSXRlbXMuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgICAgICBpdGVtQXJyYXkucHVzaChpdGVtQ29udmVydG9yLkNvbnZlcnRKT2JqZWN0KGVsZW1lbnQpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgam9ialtcIkl0ZW1zXCJdPWl0ZW1BcnJheTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gam9iajtcbiAgICB9XG5cbiAgICBJbml0RnJvbUpvYmplY3QoanNvbk9iajogT2JqZWN0KTogQnJhbmNoQ29sbGVjdGlvbkNvbW1hbmRJdGVtIHtcbiAgICAgICAgbGV0IGJyYW5jaENvbGxlY3Rpb25JdGVtID0gbmV3IEJyYW5jaENvbGxlY3Rpb25Db21tYW5kSXRlbSgpO1xuICAgICAgICBicmFuY2hDb2xsZWN0aW9uSXRlbS5JZCA9IGpzb25PYmpbXCJJZFwiXTtcbiAgICAgICAgYnJhbmNoQ29sbGVjdGlvbkl0ZW0uQ29kZSA9IGpzb25PYmpbXCJDb2RlXCJdO1xuICAgICAgICBicmFuY2hDb2xsZWN0aW9uSXRlbS5OYW1lID0ganNvbk9ialtcIk5hbWVcIl07XG4gICAgICAgIGlmIChqc29uT2JqW1wiSXRlbXNcIl0gIT0gbnVsbCkge1xuICAgICAgICAgICAgYnJhbmNoQ29sbGVjdGlvbkl0ZW0uSXRlbXM9bmV3IEFycmF5PEJyYW5jaENvbW1hbmRJdGVtPigpO1xuICAgICAgICAgICAgbGV0IGl0ZW1Db252ZXJ0b3IgPSBuZXcgQnJhbmNoQ29tbWFuZEl0ZW1Db252ZXJ0b3IoKTtcbiAgICAgICAgICAgIGpzb25PYmpbXCJJdGVtc1wiXS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgICAgIGJyYW5jaENvbGxlY3Rpb25JdGVtLkl0ZW1zLnB1c2goaXRlbUNvbnZlcnRvci5Jbml0RnJvbUpvYmplY3QoZWxlbWVudCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJyYW5jaENvbGxlY3Rpb25JdGVtO1xuICAgIH1cbn0iXX0=