/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommandItemType } from "./CommandItemType";
import { CmpMethodRefering } from "./CmpMethodRefering";
import { BranchCommandItemConvertor } from "./BranchCommandItem";
import { BranchCollectionCommandItemConvertor } from "./BranchCollectionCommandItem";
/**
 * @record
 */
export function ICommandItem() { }
if (false) {
    /**
     * @return {?}
     */
    ICommandItem.prototype.GetItemType = function () { };
    /**
     * @return {?}
     */
    ICommandItem.prototype.GetItemCode = function () { };
    /**
     * @return {?}
     */
    ICommandItem.prototype.GetItemName = function () { };
    /**
     * @return {?}
     */
    ICommandItem.prototype.GetItemId = function () { };
}
export class CommandItemConvertor {
    /**
     * @param {?} obj
     * @return {?}
     */
    ConvertJObject(obj) {
        /** @type {?} */
        let commandItem = (/** @type {?} */ (obj));
        /** @type {?} */
        let itemType = commandItem.GetItemType();
        /** @type {?} */
        let jobj = new Object();
        jobj["Type"] = itemType;
        if (itemType == CommandItemType.MethodRefer) {
            jobj["Content"] = commandItem;
        }
        else if (itemType == CommandItemType.Branch) {
            /** @type {?} */
            let branchConvertor = new BranchCommandItemConvertor();
            jobj["Content"] = branchConvertor.ConvertJObject((/** @type {?} */ (commandItem)));
        }
        else if (itemType == CommandItemType.BranchCollection) {
            /** @type {?} */
            let branchCollectionConvertor = new BranchCollectionCommandItemConvertor();
            jobj["Content"] = branchCollectionConvertor.ConvertJObject((/** @type {?} */ (commandItem)));
        }
        return jobj;
    }
    /**
     * @param {?} jsonObj
     * @return {?}
     */
    InitFromJobject(jsonObj) {
        /** @type {?} */
        let itemType = (/** @type {?} */ (jsonObj["Type"]));
        /** @type {?} */
        let content = jsonObj["Content"];
        if (itemType == CommandItemType.MethodRefer) {
            return Object.assign(new CmpMethodRefering(), (/** @type {?} */ (content)));
            ;
        }
        else if (itemType == CommandItemType.Branch) {
            /** @type {?} */
            let branchConvertor = new BranchCommandItemConvertor();
            return branchConvertor.InitFromJobject(jsonObj["Content"]);
        }
        else if (itemType == CommandItemType.BranchCollection) {
            /** @type {?} */
            let branchCollectionConvertor = new BranchCollectionCommandItemConvertor();
            return branchCollectionConvertor.InitFromJobject(jsonObj["Content"]);
        }
        return null;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSUNvbW1hbmRJdGVtLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1jbXAvd2ViY29tbWFuZC8iLCJzb3VyY2VzIjpbImxpYi92bS9JQ29tbWFuZEl0ZW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsaUJBQWlCLEVBQTRCLE1BQU0scUJBQXFCLENBQUM7QUFDbEYsT0FBTyxFQUFFLDBCQUEwQixFQUFxQixNQUFNLHFCQUFxQixDQUFDO0FBQ3BGLE9BQU8sRUFBRSxvQ0FBb0MsRUFBK0IsTUFBTSwrQkFBK0IsQ0FBQzs7OztBQUNsSCxrQ0FTQzs7Ozs7SUFQSSxxREFBOEI7Ozs7SUFFOUIscURBQXFCOzs7O0lBRXJCLHFEQUFxQjs7OztJQUVyQixtREFBbUI7O0FBR3hCLE1BQU0sT0FBTyxvQkFBb0I7Ozs7O0lBQzdCLGNBQWMsQ0FBQyxHQUFpQjs7WUFDeEIsV0FBVyxHQUFHLG1CQUFBLEdBQUcsRUFBZ0I7O1lBQ2pDLFFBQVEsR0FBRyxXQUFXLENBQUMsV0FBVyxFQUFFOztZQUNwQyxJQUFJLEdBQUcsSUFBSSxNQUFNLEVBQUU7UUFDdkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLFFBQVEsQ0FBQztRQUN4QixJQUFJLFFBQVEsSUFBSSxlQUFlLENBQUMsV0FBVyxFQUFFO1lBQ3pDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxXQUFXLENBQUM7U0FDakM7YUFDSSxJQUFJLFFBQVEsSUFBSSxlQUFlLENBQUMsTUFBTSxFQUFFOztnQkFDckMsZUFBZSxHQUFDLElBQUksMEJBQTBCLEVBQUU7WUFDckQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLGVBQWUsQ0FBQyxjQUFjLENBQUMsbUJBQUEsV0FBVyxFQUFxQixDQUFDLENBQUM7U0FDckY7YUFDSSxJQUFJLFFBQVEsSUFBSSxlQUFlLENBQUMsZ0JBQWdCLEVBQUU7O2dCQUM5Qyx5QkFBeUIsR0FBQyxJQUFJLG9DQUFvQyxFQUFFO1lBQ3pFLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyx5QkFBeUIsQ0FBQyxjQUFjLENBQUMsbUJBQUEsV0FBVyxFQUErQixDQUFDLENBQUM7U0FDMUc7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDOzs7OztJQUVELGVBQWUsQ0FBQyxPQUFlOztZQUN2QixRQUFRLEdBQUMsbUJBQUEsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFtQjs7WUFDM0MsT0FBTyxHQUFjLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFDM0MsSUFBSSxRQUFRLElBQUksZUFBZSxDQUFDLFdBQVcsRUFBRTtZQUN6QyxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxpQkFBaUIsRUFBRSxFQUFDLG1CQUFBLE9BQU8sRUFBcUIsQ0FBQyxDQUFDO1lBQUEsQ0FBQztTQUMvRTthQUNJLElBQUksUUFBUSxJQUFJLGVBQWUsQ0FBQyxNQUFNLEVBQUU7O2dCQUNwQyxlQUFlLEdBQUMsSUFBSSwwQkFBMEIsRUFBRTtZQUNyRCxPQUFPLGVBQWUsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7U0FDOUQ7YUFDSSxJQUFJLFFBQVEsSUFBSSxlQUFlLENBQUMsZ0JBQWdCLEVBQUU7O2dCQUM5Qyx5QkFBeUIsR0FBQyxJQUFJLG9DQUFvQyxFQUFFO1lBQ3pFLE9BQU8seUJBQXlCLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1NBQ3hFO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbWFuZEl0ZW1UeXBlIH0gZnJvbSBcIi4vQ29tbWFuZEl0ZW1UeXBlXCI7XG5pbXBvcnQgeyBDbXBNZXRob2RSZWZlcmluZywgQ21wTWV0aG9kUmVmZXJpbmdDb252ZXJ0IH0gZnJvbSBcIi4vQ21wTWV0aG9kUmVmZXJpbmdcIjtcbmltcG9ydCB7IEJyYW5jaENvbW1hbmRJdGVtQ29udmVydG9yLCBCcmFuY2hDb21tYW5kSXRlbSB9IGZyb20gXCIuL0JyYW5jaENvbW1hbmRJdGVtXCI7XG5pbXBvcnQgeyBCcmFuY2hDb2xsZWN0aW9uQ29tbWFuZEl0ZW1Db252ZXJ0b3IsIEJyYW5jaENvbGxlY3Rpb25Db21tYW5kSXRlbSB9IGZyb20gXCIuL0JyYW5jaENvbGxlY3Rpb25Db21tYW5kSXRlbVwiO1xuZXhwb3J0IGludGVyZmFjZSBJQ29tbWFuZEl0ZW1cbntcbiAgICAgR2V0SXRlbVR5cGUoKTpDb21tYW5kSXRlbVR5cGU7XG5cbiAgICAgR2V0SXRlbUNvZGUoKTpzdHJpbmc7XG5cbiAgICAgR2V0SXRlbU5hbWUoKTpzdHJpbmc7XG5cbiAgICAgR2V0SXRlbUlkKCk6c3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgQ29tbWFuZEl0ZW1Db252ZXJ0b3Ige1xuICAgIENvbnZlcnRKT2JqZWN0KG9iajogSUNvbW1hbmRJdGVtKTogT2JqZWN0IHtcbiAgICAgICAgbGV0IGNvbW1hbmRJdGVtID0gb2JqIGFzIElDb21tYW5kSXRlbTtcbiAgICAgICAgbGV0IGl0ZW1UeXBlID0gY29tbWFuZEl0ZW0uR2V0SXRlbVR5cGUoKTtcbiAgICAgICAgbGV0IGpvYmogPSBuZXcgT2JqZWN0KCk7XG4gICAgICAgIGpvYmpbXCJUeXBlXCJdID0gaXRlbVR5cGU7XG4gICAgICAgIGlmIChpdGVtVHlwZSA9PSBDb21tYW5kSXRlbVR5cGUuTWV0aG9kUmVmZXIpIHtcbiAgICAgICAgICAgIGpvYmpbXCJDb250ZW50XCJdID0gY29tbWFuZEl0ZW07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXRlbVR5cGUgPT0gQ29tbWFuZEl0ZW1UeXBlLkJyYW5jaCkge1xuICAgICAgICAgICBsZXQgIGJyYW5jaENvbnZlcnRvcj1uZXcgQnJhbmNoQ29tbWFuZEl0ZW1Db252ZXJ0b3IoKTtcbiAgICAgICAgICAgam9ialtcIkNvbnRlbnRcIl0gPSBicmFuY2hDb252ZXJ0b3IuQ29udmVydEpPYmplY3QoY29tbWFuZEl0ZW0gYXMgQnJhbmNoQ29tbWFuZEl0ZW0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGl0ZW1UeXBlID09IENvbW1hbmRJdGVtVHlwZS5CcmFuY2hDb2xsZWN0aW9uKSB7XG4gICAgICAgICAgICBsZXQgIGJyYW5jaENvbGxlY3Rpb25Db252ZXJ0b3I9bmV3IEJyYW5jaENvbGxlY3Rpb25Db21tYW5kSXRlbUNvbnZlcnRvcigpO1xuICAgICAgICAgICAgam9ialtcIkNvbnRlbnRcIl0gPSBicmFuY2hDb2xsZWN0aW9uQ29udmVydG9yLkNvbnZlcnRKT2JqZWN0KGNvbW1hbmRJdGVtIGFzIEJyYW5jaENvbGxlY3Rpb25Db21tYW5kSXRlbSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGpvYmo7XG4gICAgfVxuXG4gICAgSW5pdEZyb21Kb2JqZWN0KGpzb25PYmo6IE9iamVjdCk6IElDb21tYW5kSXRlbSB7XG4gICAgICAgIGxldCBpdGVtVHlwZT1qc29uT2JqW1wiVHlwZVwiXSBhcyBDb21tYW5kSXRlbVR5cGU7XG4gICAgICAgIGxldCBjb250ZW50OklDb21tYW5kSXRlbT1qc29uT2JqW1wiQ29udGVudFwiXTsgXG4gICAgICAgIGlmIChpdGVtVHlwZSA9PSBDb21tYW5kSXRlbVR5cGUuTWV0aG9kUmVmZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBDbXBNZXRob2RSZWZlcmluZygpLGNvbnRlbnQgYXMgQ21wTWV0aG9kUmVmZXJpbmcpOztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpdGVtVHlwZSA9PSBDb21tYW5kSXRlbVR5cGUuQnJhbmNoKSB7XG4gICAgICAgICAgICBsZXQgIGJyYW5jaENvbnZlcnRvcj1uZXcgQnJhbmNoQ29tbWFuZEl0ZW1Db252ZXJ0b3IoKTtcbiAgICAgICAgICAgIHJldHVybiBicmFuY2hDb252ZXJ0b3IuSW5pdEZyb21Kb2JqZWN0KGpzb25PYmpbXCJDb250ZW50XCJdKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpdGVtVHlwZSA9PSBDb21tYW5kSXRlbVR5cGUuQnJhbmNoQ29sbGVjdGlvbikge1xuICAgICAgICAgICAgbGV0ICBicmFuY2hDb2xsZWN0aW9uQ29udmVydG9yPW5ldyBCcmFuY2hDb2xsZWN0aW9uQ29tbWFuZEl0ZW1Db252ZXJ0b3IoKTtcbiAgICAgICAgICAgIHJldHVybiBicmFuY2hDb2xsZWN0aW9uQ29udmVydG9yLkluaXRGcm9tSm9iamVjdChqc29uT2JqW1wiQ29udGVudFwiXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufSJdfQ==