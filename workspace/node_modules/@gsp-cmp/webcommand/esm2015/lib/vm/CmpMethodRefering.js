/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CmpMethodParamConfigConvert } from "./CmpMethodParamConfig";
import { CommandItemType } from "./CommandItemType";
export class CmpMethodRefering {
    /**
     * @return {?}
     */
    GetItemType() {
        return CommandItemType.MethodRefer;
    }
    /**
     * @return {?}
     */
    GetItemCode() {
        return this.Code;
    }
    /**
     * @return {?}
     */
    GetItemName() {
        return this.Name;
    }
    /**
     * @return {?}
     */
    GetItemId() {
        return this.Id;
    }
}
if (false) {
    /** @type {?} */
    CmpMethodRefering.prototype.Id;
    /** @type {?} */
    CmpMethodRefering.prototype.Code;
    /** @type {?} */
    CmpMethodRefering.prototype.Name;
    /** @type {?} */
    CmpMethodRefering.prototype.ComponentId;
    /** @type {?} */
    CmpMethodRefering.prototype.ComponentCode;
    /** @type {?} */
    CmpMethodRefering.prototype.ComponentName;
    /** @type {?} */
    CmpMethodRefering.prototype.ComponentPath;
    /** @type {?} */
    CmpMethodRefering.prototype.MethodId;
    /** @type {?} */
    CmpMethodRefering.prototype.MethodCode;
    /** @type {?} */
    CmpMethodRefering.prototype.MethodName;
    /** @type {?} */
    CmpMethodRefering.prototype.IsReplaced;
    /** @type {?} */
    CmpMethodRefering.prototype.IsBeforeExpansion;
    /** @type {?} */
    CmpMethodRefering.prototype.IsAfterExpansion;
    /** @type {?} */
    CmpMethodRefering.prototype.ParamConfigs;
}
export class CmpMethodReferingConvert {
    /**
     * @param {?} jsonObj
     * @return {?}
     */
    InitFromJobject(jsonObj) {
        /** @type {?} */
        let cmpMethodRefering = new CmpMethodRefering();
        cmpMethodRefering.Id = jsonObj["Id"];
        cmpMethodRefering.Code = jsonObj["Code"];
        cmpMethodRefering.Name = jsonObj["Name"];
        cmpMethodRefering.MethodId = jsonObj["MethodId"];
        cmpMethodRefering.MethodCode = jsonObj["MethodCode"];
        cmpMethodRefering.MethodName = jsonObj["MethodName"];
        cmpMethodRefering.ComponentId = jsonObj["ComponentId"];
        cmpMethodRefering.ComponentCode = jsonObj["ComponentCode"];
        cmpMethodRefering.ComponentName = jsonObj["ComponentName"];
        cmpMethodRefering.ComponentPath = jsonObj["ComponentPath"];
        cmpMethodRefering.IsReplaced = jsonObj["IsReplaced"];
        cmpMethodRefering.IsBeforeExpansion = jsonObj["IsBeforeExpansion"];
        cmpMethodRefering.IsAfterExpansion = jsonObj["IsAfterExpansion"];
        if (jsonObj["ParamConfigs"] != null) {
            cmpMethodRefering.ParamConfigs = new Array();
            /** @type {?} */
            let convertor = new CmpMethodParamConfigConvert();
            jsonObj["ParamConfigs"].forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                cmpMethodRefering.ParamConfigs.push(convertor.InitFromJobject(element));
            }));
        }
        return cmpMethodRefering;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    ConvertJObject(obj) {
        /** @type {?} */
        let cmpMethodRefering = (/** @type {?} */ (obj));
        /** @type {?} */
        let jobj = new Object();
        jobj["Id"] = cmpMethodRefering.Id;
        jobj["Code"] = cmpMethodRefering.Code;
        jobj["Name"] = cmpMethodRefering.Name;
        jobj["MethodId"] = cmpMethodRefering.MethodId;
        jobj["MethodCode"] = cmpMethodRefering.MethodCode;
        jobj["MethodName"] = cmpMethodRefering.MethodName;
        jobj["ComponentId"] = cmpMethodRefering.ComponentId;
        jobj["ComponentCode"] = cmpMethodRefering.ComponentCode;
        jobj["ComponentName"] = cmpMethodRefering.ComponentName;
        jobj["ComponentPath"] = cmpMethodRefering.ComponentPath;
        jobj["IsReplaced"] = cmpMethodRefering.IsReplaced;
        jobj["IsBeforeExpansion"] = cmpMethodRefering.IsBeforeExpansion;
        jobj["IsAfterExpansion"] = cmpMethodRefering.IsAfterExpansion;
        if (cmpMethodRefering.ParamConfigs != null) {
            /** @type {?} */
            let CommandsJArry = jobj["ParamConfigs"] = [];
            /** @type {?} */
            let convertor = new CmpMethodParamConfigConvert();
            cmpMethodRefering.ParamConfigs.forEach((/**
             * @param {?} paramConfig
             * @return {?}
             */
            paramConfig => {
                CommandsJArry.push(convertor.ConvertJObject(paramConfig));
            }));
        }
        return jobj;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ21wTWV0aG9kUmVmZXJpbmcuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLWNtcC93ZWJjb21tYW5kLyIsInNvdXJjZXMiOlsibGliL3ZtL0NtcE1ldGhvZFJlZmVyaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQXdCLDJCQUEyQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFM0YsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRXBELE1BQU0sT0FBTyxpQkFBaUI7Ozs7SUFpQjFCLFdBQVc7UUFDUCxPQUFPLGVBQWUsQ0FBQyxXQUFXLENBQUM7SUFDdkMsQ0FBQzs7OztJQUNELFdBQVc7UUFDUCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDckIsQ0FBQzs7OztJQUNELFdBQVc7UUFDUCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDckIsQ0FBQzs7OztJQUNELFNBQVM7UUFDTCxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUM7SUFDbkIsQ0FBQztDQUNKOzs7SUEzQkcsK0JBQVU7O0lBQ1YsaUNBQVk7O0lBQ1osaUNBQVk7O0lBQ1osd0NBQW9COztJQUNwQiwwQ0FBc0I7O0lBQ3RCLDBDQUFzQjs7SUFDdEIsMENBQXNCOztJQUN0QixxQ0FBaUI7O0lBQ2pCLHVDQUFtQjs7SUFDbkIsdUNBQW1COztJQUNuQix1Q0FBbUI7O0lBQ25CLDhDQUEwQjs7SUFDMUIsNkNBQXlCOztJQUN6Qix5Q0FBMEM7O0FBZ0I5QyxNQUFNLE9BQU8sd0JBQXdCOzs7OztJQUVqQyxlQUFlLENBQUMsT0FBZTs7WUFDdkIsaUJBQWlCLEdBQUcsSUFBSSxpQkFBaUIsRUFBRTtRQUMvQyxpQkFBaUIsQ0FBQyxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JDLGlCQUFpQixDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDekMsaUJBQWlCLENBQUMsSUFBSSxHQUFHLE9B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RUFBRTtZQUNqRCxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsT0FBTzs7OztZQUFDLFdBQVcsQ0FBQyxFQUFFO2dCQUNqRCxhQUFhLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztZQUM5RCxDQUFDLEVBQUMsQ0FBQztTQUNOO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ21wTWV0aG9kUGFyYW1Db25maWcsIENtcE1ldGhvZFBhcmFtQ29uZmlnQ29udmVydCB9IGZyb20gXCIuL0NtcE1ldGhvZFBhcmFtQ29uZmlnXCI7XG5pbXBvcnQgeyBJQ29tbWFuZEl0ZW0gfSBmcm9tIFwiLi9JQ29tbWFuZEl0ZW1cIjtcbmltcG9ydCB7IENvbW1hbmRJdGVtVHlwZSB9IGZyb20gXCIuL0NvbW1hbmRJdGVtVHlwZVwiO1xuXG5leHBvcnQgY2xhc3MgQ21wTWV0aG9kUmVmZXJpbmcgaW1wbGVtZW50cyBJQ29tbWFuZEl0ZW0ge1xuICAgIFxuICAgIElkOnN0cmluZztcbiAgICBDb2RlOnN0cmluZztcbiAgICBOYW1lOnN0cmluZztcbiAgICBDb21wb25lbnRJZDogc3RyaW5nO1xuICAgIENvbXBvbmVudENvZGU6IHN0cmluZztcbiAgICBDb21wb25lbnROYW1lOiBzdHJpbmc7XG4gICAgQ29tcG9uZW50UGF0aDogc3RyaW5nO1xuICAgIE1ldGhvZElkOiBzdHJpbmc7XG4gICAgTWV0aG9kQ29kZTogc3RyaW5nO1xuICAgIE1ldGhvZE5hbWU6IHN0cmluZztcbiAgICBJc1JlcGxhY2VkOmJvb2xlYW47XG4gICAgSXNCZWZvcmVFeHBhbnNpb246Ym9vbGVhbjtcbiAgICBJc0FmdGVyRXhwYW5zaW9uOmJvb2xlYW47XG4gICAgUGFyYW1Db25maWdzOiBBcnJheTxDbXBNZXRob2RQYXJhbUNvbmZpZz47XG5cbiAgICBHZXRJdGVtVHlwZSgpOiBDb21tYW5kSXRlbVR5cGUge1xuICAgICAgICByZXR1cm4gQ29tbWFuZEl0ZW1UeXBlLk1ldGhvZFJlZmVyO1xuICAgIH1cbiAgICBHZXRJdGVtQ29kZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5Db2RlO1xuICAgIH1cbiAgICBHZXRJdGVtTmFtZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5OYW1lO1xuICAgIH1cbiAgICBHZXRJdGVtSWQoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuSWQ7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ21wTWV0aG9kUmVmZXJpbmdDb252ZXJ0e1xuXG4gICAgSW5pdEZyb21Kb2JqZWN0KGpzb25PYmo6IE9iamVjdCk6IENtcE1ldGhvZFJlZmVyaW5nIHtcbiAgICAgICAgbGV0IGNtcE1ldGhvZFJlZmVyaW5nID0gbmV3IENtcE1ldGhvZFJlZmVyaW5nKCk7XG4gICAgICAgIGNtcE1ldGhvZFJlZmVyaW5nLklkID0ganNvbk9ialtcIklkXCJdO1xuICAgICAgICBjbXBNZXRob2RSZWZlcmluZy5Db2RlID0ganNvbk9ialtcIkNvZGVcIl07XG4gICAgICAgIGNtcE1ldGhvZFJlZmVyaW5nLk5hbWUgPSBqc29uT2JqW1wiTmFtZVwiXTtcbiAgICAgICAgY21wTWV0aG9kUmVmZXJpbmcuTWV0aG9kSWQgPSBqc29uT2JqW1wiTWV0aG9kSWRcIl07XG4gICAgICAgIGNtcE1ldGhvZFJlZmVyaW5nLk1ldGhvZENvZGUgPSBqc29uT2JqW1wiTWV0aG9kQ29kZVwiXTtcbiAgICAgICAgY21wTWV0aG9kUmVmZXJpbmcuTWV0aG9kTmFtZSA9IGpzb25PYmpbXCJNZXRob2ROYW1lXCJdO1xuICAgICAgICBjbXBNZXRob2RSZWZlcmluZy5Db21wb25lbnRJZCA9IGpzb25PYmpbXCJDb21wb25lbnRJZFwiXTtcbiAgICAgICAgY21wTWV0aG9kUmVmZXJpbmcuQ29tcG9uZW50Q29kZSA9IGpzb25PYmpbXCJDb21wb25lbnRDb2RlXCJdO1xuICAgICAgICBjbXBNZXRob2RSZWZlcmluZy5Db21wb25lbnROYW1lID0ganNvbk9ialtcIkNvbXBvbmVudE5hbWVcIl07XG4gICAgICAgIGNtcE1ldGhvZFJlZmVyaW5nLkNvbXBvbmVudFBhdGggPSBqc29uT2JqW1wiQ29tcG9uZW50UGF0aFwiXTtcbiAgICAgICAgY21wTWV0aG9kUmVmZXJpbmcuSXNSZXBsYWNlZCA9IGpzb25PYmpbXCJJc1JlcGxhY2VkXCJdO1xuICAgICAgICBjbXBNZXRob2RSZWZlcmluZy5Jc0JlZm9yZUV4cGFuc2lvbiA9IGpzb25PYmpbXCJJc0JlZm9yZUV4cGFuc2lvblwiXTtcbiAgICAgICAgY21wTWV0aG9kUmVmZXJpbmcuSXNBZnRlckV4cGFuc2lvbiA9IGpzb25PYmpbXCJJc0FmdGVyRXhwYW5zaW9uXCJdO1xuICAgICAgICBpZiAoanNvbk9ialtcIlBhcmFtQ29uZmlnc1wiXSAhPSBudWxsKSB7XG4gICAgICAgICAgICBjbXBNZXRob2RSZWZlcmluZy5QYXJhbUNvbmZpZ3M9bmV3IEFycmF5PENtcE1ldGhvZFBhcmFtQ29uZmlnPigpO1xuICAgICAgICAgICAgbGV0IGNvbnZlcnRvciA9IG5ldyBDbXBNZXRob2RQYXJhbUNvbmZpZ0NvbnZlcnQoKTtcbiAgICAgICAgICAgIGpzb25PYmpbXCJQYXJhbUNvbmZpZ3NcIl0uZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgICAgICBjbXBNZXRob2RSZWZlcmluZy5QYXJhbUNvbmZpZ3MucHVzaChjb252ZXJ0b3IuSW5pdEZyb21Kb2JqZWN0KGVsZW1lbnQpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjbXBNZXRob2RSZWZlcmluZztcbiAgICB9XG5cbiAgICBDb252ZXJ0Sk9iamVjdChvYmo6IENtcE1ldGhvZFJlZmVyaW5nKTogT2JqZWN0IHtcbiAgICAgICAgbGV0IGNtcE1ldGhvZFJlZmVyaW5nOiBDbXBNZXRob2RSZWZlcmluZyA9IG9iaiBhcyBDbXBNZXRob2RSZWZlcmluZztcbiAgICAgICAgbGV0IGpvYmogPSBuZXcgT2JqZWN0KCk7XG4gICAgICAgIGpvYmpbXCJJZFwiXSA9IGNtcE1ldGhvZFJlZmVyaW5nLklkO1xuICAgICAgICBqb2JqW1wiQ29kZVwiXSA9IGNtcE1ldGhvZFJlZmVyaW5nLkNvZGU7XG4gICAgICAgIGpvYmpbXCJOYW1lXCJdID0gY21wTWV0aG9kUmVmZXJpbmcuTmFtZTtcbiAgICAgICAgam9ialtcIk1ldGhvZElkXCJdID0gY21wTWV0aG9kUmVmZXJpbmcuTWV0aG9kSWQ7XG4gICAgICAgIGpvYmpbXCJNZXRob2RDb2RlXCJdID0gY21wTWV0aG9kUmVmZXJpbmcuTWV0aG9kQ29kZTtcbiAgICAgICAgam9ialtcIk1ldGhvZE5hbWVcIl0gPSBjbXBNZXRob2RSZWZlcmluZy5NZXRob2ROYW1lO1xuICAgICAgICBqb2JqW1wiQ29tcG9uZW50SWRcIl0gPSBjbXBNZXRob2RSZWZlcmluZy5Db21wb25lbnRJZDtcbiAgICAgICAgam9ialtcIkNvbXBvbmVudENvZGVcIl0gPSBjbXBNZXRob2RSZWZlcmluZy5Db21wb25lbnRDb2RlO1xuICAgICAgICBqb2JqW1wiQ29tcG9uZW50TmFtZVwiXSA9IGNtcE1ldGhvZFJlZmVyaW5nLkNvbXBvbmVudE5hbWU7XG4gICAgICAgIGpvYmpbXCJDb21wb25lbnRQYXRoXCJdID0gY21wTWV0aG9kUmVmZXJpbmcuQ29tcG9uZW50UGF0aDtcbiAgICAgICAgam9ialtcIklzUmVwbGFjZWRcIl0gPSBjbXBNZXRob2RSZWZlcmluZy5Jc1JlcGxhY2VkO1xuICAgICAgICBqb2JqW1wiSXNCZWZvcmVFeHBhbnNpb25cIl0gPSBjbXBNZXRob2RSZWZlcmluZy5Jc0JlZm9yZUV4cGFuc2lvbjtcbiAgICAgICAgam9ialtcIklzQWZ0ZXJFeHBhbnNpb25cIl0gPSBjbXBNZXRob2RSZWZlcmluZy5Jc0FmdGVyRXhwYW5zaW9uO1xuICAgICAgICBpZiAoY21wTWV0aG9kUmVmZXJpbmcuUGFyYW1Db25maWdzICE9IG51bGwpIHtcbiAgICAgICAgICAgIGxldCBDb21tYW5kc0pBcnJ5ID0gam9ialtcIlBhcmFtQ29uZmlnc1wiXSA9IFtdO1xuICAgICAgICAgICAgbGV0IGNvbnZlcnRvciA9IG5ldyBDbXBNZXRob2RQYXJhbUNvbmZpZ0NvbnZlcnQoKTtcbiAgICAgICAgICAgIGNtcE1ldGhvZFJlZmVyaW5nLlBhcmFtQ29uZmlncy5mb3JFYWNoKHBhcmFtQ29uZmlnID0+IHtcbiAgICAgICAgICAgICAgICBDb21tYW5kc0pBcnJ5LnB1c2goY29udmVydG9yLkNvbnZlcnRKT2JqZWN0KHBhcmFtQ29uZmlnKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gam9iajtcbiAgICB9XG59Il19