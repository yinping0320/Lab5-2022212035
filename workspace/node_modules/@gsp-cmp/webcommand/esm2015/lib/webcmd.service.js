/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { GSPMetadataService } from '@gsp-lcm/metadata-selector';
import { map } from 'rxjs/operators';
import { WebCommandMetadataConvertor } from './vm/WebCommandMetadata';
import * as i0 from "@angular/core";
import * as i1 from "@gsp-lcm/metadata-selector";
export class WebCommandComponentService {
    /**
     * @param {?} metadataService
     */
    constructor(metadataService) {
        this.metadataService = metadataService;
    }
    /**
     * @param {?} metadataUri
     * @return {?}
     */
    getWebCommandMetadata(metadataUri) {
        /** @type {?} */
        const fileName = metadataUri.substring(metadataUri.lastIndexOf('/') + 1);
        /** @type {?} */
        const filePath = metadataUri.substring(1, metadataUri.lastIndexOf('/'));
        return this.metadataService.LoadMetadata(fileName, filePath).pipe(map((/**
         * @param {?} dto
         * @return {?}
         */
        (dto) => (new WebCommandMetadataConvertor()).InitFromJobject(JSON.parse(dto.content)))));
    }
}
WebCommandComponentService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
WebCommandComponentService.ctorParameters = () => [
    { type: GSPMetadataService }
];
/** @nocollapse */ WebCommandComponentService.ngInjectableDef = i0.defineInjectable({ factory: function WebCommandComponentService_Factory() { return new WebCommandComponentService(i0.inject(i1.GSPMetadataService)); }, token: WebCommandComponentService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    WebCommandComponentService.prototype.metadataService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViY21kLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLWNtcC93ZWJjb21tYW5kLyIsInNvdXJjZXMiOlsibGliL3dlYmNtZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQXNCLDJCQUEyQixFQUFFLE1BQU0seUJBQXlCLENBQUM7OztBQUsxRixNQUFNLE9BQU8sMEJBQTBCOzs7O0lBRW5DLFlBQW9CLGVBQW1DO1FBQW5DLG9CQUFlLEdBQWYsZUFBZSxDQUFvQjtJQUFJLENBQUM7Ozs7O0lBRTVELHFCQUFxQixDQUFDLFdBQW1COztjQUMvQixRQUFRLEdBQUcsV0FBVyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQzs7Y0FDbEUsUUFBUSxHQUFHLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdkUsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUc7Ozs7UUFBQyxDQUFDLEdBQU8sRUFBQyxFQUFFLENBQzdFLENBQUMsSUFBSSwyQkFBMkIsRUFBRSxDQUFDLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQy9FLENBQUMsQ0FBQztJQUNQLENBQUM7OztZQWJKLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7OztZQU5RLGtCQUFrQjs7Ozs7Ozs7SUFTWCxxREFBMkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBHU1BNZXRhZGF0YVNlcnZpY2UgfSBmcm9tICdAZ3NwLWxjbS9tZXRhZGF0YS1zZWxlY3Rvcic7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBXZWJDb21tYW5kTWV0YWRhdGEsIFdlYkNvbW1hbmRNZXRhZGF0YUNvbnZlcnRvciB9IGZyb20gJy4vdm0vV2ViQ29tbWFuZE1ldGFkYXRhJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgV2ViQ29tbWFuZENvbXBvbmVudFNlcnZpY2Uge1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBtZXRhZGF0YVNlcnZpY2U6IEdTUE1ldGFkYXRhU2VydmljZSkgeyB9XG4gICAgXG4gICAgZ2V0V2ViQ29tbWFuZE1ldGFkYXRhKG1ldGFkYXRhVXJpOiBzdHJpbmcpOiBPYnNlcnZhYmxlPFdlYkNvbW1hbmRNZXRhZGF0YT4ge1xuICAgICAgICBjb25zdCBmaWxlTmFtZSA9IG1ldGFkYXRhVXJpLnN1YnN0cmluZyhtZXRhZGF0YVVyaS5sYXN0SW5kZXhPZignLycpICsgMSk7XG4gICAgICAgIGNvbnN0IGZpbGVQYXRoID0gbWV0YWRhdGFVcmkuc3Vic3RyaW5nKDEsIG1ldGFkYXRhVXJpLmxhc3RJbmRleE9mKCcvJykpO1xuICAgICAgICByZXR1cm4gdGhpcy5tZXRhZGF0YVNlcnZpY2UuTG9hZE1ldGFkYXRhKGZpbGVOYW1lLCBmaWxlUGF0aCkucGlwZShtYXAoKGR0bzphbnkpPT5cbiAgICAgICAgICAgIChuZXcgV2ViQ29tbWFuZE1ldGFkYXRhQ29udmVydG9yKCkpLkluaXRGcm9tSm9iamVjdChKU09OLnBhcnNlKGR0by5jb250ZW50KSlcbiAgICAgICAgKSk7XG4gICAgfVxufSJdfQ==