/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { WebCommandConvertor } from "./Command";
import { ExtendsConvert } from "./ExtendProperty";
var WebCommandMetadata = /** @class */ (function () {
    function WebCommandMetadata() {
    }
    return WebCommandMetadata;
}());
export { WebCommandMetadata };
if (false) {
    /** @type {?} */
    WebCommandMetadata.prototype.Id;
    /** @type {?} */
    WebCommandMetadata.prototype.Code;
    /** @type {?} */
    WebCommandMetadata.prototype.Name;
    /** @type {?} */
    WebCommandMetadata.prototype.Description;
    /** @type {?} */
    WebCommandMetadata.prototype.Extends;
    /** @type {?} */
    WebCommandMetadata.prototype.Commands;
}
var WebCommandMetadataConvertor = /** @class */ (function () {
    function WebCommandMetadataConvertor() {
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    WebCommandMetadataConvertor.prototype.ConvertJObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var metadata = (/** @type {?} */ (obj));
        /** @type {?} */
        var jobj = new Object();
        jobj["Id"] = metadata.Id;
        jobj["Code"] = metadata.Code;
        jobj["Name"] = metadata.Name;
        jobj["Description"] = metadata.Description;
        if (metadata.Commands != null) {
            /** @type {?} */
            var CommandsJArry_1 = jobj["Commands"] = [];
            /** @type {?} */
            var convertor_1 = new WebCommandConvertor();
            metadata.Commands.forEach((/**
             * @param {?} command
             * @return {?}
             */
            function (command) {
                CommandsJArry_1.push(convertor_1.ConvertJObject(command));
            }));
        }
        if (metadata.Extends != null) {
            /** @type {?} */
            var convertor = new ExtendsConvert();
            jobj["Extends"] = convertor.ConvertJObject(metadata.Extends);
        }
        return jobj;
    };
    /**
     * @param {?} jsonObj
     * @return {?}
     */
    WebCommandMetadataConvertor.prototype.InitFromJobject = /**
     * @param {?} jsonObj
     * @return {?}
     */
    function (jsonObj) {
        /** @type {?} */
        var metadata = new WebCommandMetadata();
        metadata.Id = jsonObj["Id"];
        metadata.Code = jsonObj["Code"];
        metadata.Name = jsonObj["Name"];
        metadata.Description = jsonObj["Description"];
        /** @type {?} */
        var CommandsJArry = jsonObj["Commands"];
        if (CommandsJArry != null) {
            metadata.Commands = new Array();
            CommandsJArry.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                /** @type {?} */
                var cmpOpSerializer = new WebCommandConvertor();
                metadata.Commands.push((/** @type {?} */ (cmpOpSerializer.InitFromJobject(element))));
            }));
        }
        /** @type {?} */
        var convertor = new ExtendsConvert();
        metadata.Extends = convertor.InitFromJobject(jsonObj["Extends"]);
        return metadata;
    };
    return WebCommandMetadataConvertor;
}());
export { WebCommandMetadataConvertor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2ViQ29tbWFuZE1ldGFkYXRhLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1jbXAvd2ViY29tbWFuZC8iLCJzb3VyY2VzIjpbImxpYi92bS9XZWJDb21tYW5kTWV0YWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBYyxtQkFBbUIsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUM1RCxPQUFPLEVBQWtCLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWxFO0lBQUE7SUFPQSxDQUFDO0lBQUQseUJBQUM7QUFBRCxDQUFDLEFBUEQsSUFPQzs7OztJQU5HLGdDQUFXOztJQUNYLGtDQUFhOztJQUNiLGtDQUFhOztJQUNiLHlDQUFvQjs7SUFDcEIscUNBQXVCOztJQUN2QixzQ0FBNEI7O0FBR2hDO0lBQUE7SUF3Q0EsQ0FBQzs7Ozs7SUF2Q0csb0RBQWM7Ozs7SUFBZCxVQUFlLEdBQXVCOztZQUM5QixRQUFRLEdBQXVCLG1CQUFBLEdBQUcsRUFBc0I7O1lBQ3hELElBQUksR0FBRyxJQUFJLE1BQU0sRUFBRTtRQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQztRQUM3QixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQztRQUM3QixJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQztRQUMzQyxJQUFJLFFBQVEsQ0FBQyxRQUFRLElBQUksSUFBSSxFQUFFOztnQkFDdkIsZUFBYSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFOztnQkFDckMsV0FBUyxHQUFHLElBQUksbUJBQW1CLEVBQUU7WUFDekMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxPQUFPOzs7O1lBQUMsVUFBQSxPQUFPO2dCQUM3QixlQUFhLENBQUMsSUFBSSxDQUFDLFdBQVMsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUMxRCxDQUFDLEVBQUMsQ0FBQztTQUNOO1FBQ0QsSUFBRyxRQUFRLENBQUMsT0FBTyxJQUFFLElBQUksRUFBQzs7Z0JBQ2xCLFNBQVMsR0FBRyxJQUFJLGNBQWMsRUFBRTtZQUNwQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUUsU0FBUyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDL0Q7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDOzs7OztJQUVELHFEQUFlOzs7O0lBQWYsVUFBZ0IsT0FBZTs7WUFDdkIsUUFBUSxHQUFHLElBQUksa0JBQWtCLEVBQUU7UUFDdkMsUUFBUSxDQUFDLEVBQUUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUIsUUFBUSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDaEMsUUFBUSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDaEMsUUFBUSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7O1lBQzFDLGFBQWEsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDO1FBQ3ZDLElBQUksYUFBYSxJQUFJLElBQUksRUFBRTtZQUN2QixRQUFRLENBQUMsUUFBUSxHQUFHLElBQUksS0FBSyxFQUFjLENBQUM7WUFDNUMsYUFBYSxDQUFDLE9BQU87Ozs7WUFBQyxVQUFBLE9BQU87O29CQUNyQixlQUFlLEdBQUcsSUFBSSxtQkFBbUIsRUFBRTtnQkFDL0MsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsbUJBQUEsZUFBZSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsRUFBYyxDQUFDLENBQUM7WUFDbkYsQ0FBQyxFQUFDLENBQUM7U0FDTjs7WUFDRyxTQUFTLEdBQUcsSUFBSSxjQUFjLEVBQUU7UUFDcEMsUUFBUSxDQUFDLE9BQU8sR0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQy9ELE9BQU8sUUFBUSxDQUFDO0lBQ3BCLENBQUM7SUFDTCxrQ0FBQztBQUFELENBQUMsQUF4Q0QsSUF3Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBXZWJDb21tYW5kLCBXZWJDb21tYW5kQ29udmVydG9yIH0gZnJvbSBcIi4vQ29tbWFuZFwiO1xuaW1wb3J0IHsgRXh0ZW5kUHJvcGVydHksIEV4dGVuZHNDb252ZXJ0IH0gZnJvbSBcIi4vRXh0ZW5kUHJvcGVydHlcIjtcblxuZXhwb3J0IGNsYXNzIFdlYkNvbW1hbmRNZXRhZGF0YSB7XG4gICAgSWQ6IHN0cmluZztcbiAgICBDb2RlOiBzdHJpbmc7XG4gICAgTmFtZTogc3RyaW5nO1xuICAgIERlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgRXh0ZW5kczpFeHRlbmRQcm9wZXJ0eTtcbiAgICBDb21tYW5kczogQXJyYXk8V2ViQ29tbWFuZD47XG59XG5cbmV4cG9ydCBjbGFzcyBXZWJDb21tYW5kTWV0YWRhdGFDb252ZXJ0b3Ige1xuICAgIENvbnZlcnRKT2JqZWN0KG9iajogV2ViQ29tbWFuZE1ldGFkYXRhKTogT2JqZWN0IHtcbiAgICAgICAgbGV0IG1ldGFkYXRhOiBXZWJDb21tYW5kTWV0YWRhdGEgPSBvYmogYXMgV2ViQ29tbWFuZE1ldGFkYXRhO1xuICAgICAgICBsZXQgam9iaiA9IG5ldyBPYmplY3QoKTtcbiAgICAgICAgam9ialtcIklkXCJdID0gbWV0YWRhdGEuSWQ7XG4gICAgICAgIGpvYmpbXCJDb2RlXCJdID0gbWV0YWRhdGEuQ29kZTtcbiAgICAgICAgam9ialtcIk5hbWVcIl0gPSBtZXRhZGF0YS5OYW1lO1xuICAgICAgICBqb2JqW1wiRGVzY3JpcHRpb25cIl0gPSBtZXRhZGF0YS5EZXNjcmlwdGlvbjtcbiAgICAgICAgaWYgKG1ldGFkYXRhLkNvbW1hbmRzICE9IG51bGwpIHtcbiAgICAgICAgICAgIGxldCBDb21tYW5kc0pBcnJ5ID0gam9ialtcIkNvbW1hbmRzXCJdID0gW107XG4gICAgICAgICAgICBsZXQgY29udmVydG9yID0gbmV3IFdlYkNvbW1hbmRDb252ZXJ0b3IoKTtcbiAgICAgICAgICAgIG1ldGFkYXRhLkNvbW1hbmRzLmZvckVhY2goY29tbWFuZCA9PiB7XG4gICAgICAgICAgICAgICAgQ29tbWFuZHNKQXJyeS5wdXNoKGNvbnZlcnRvci5Db252ZXJ0Sk9iamVjdChjb21tYW5kKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZihtZXRhZGF0YS5FeHRlbmRzIT1udWxsKXtcbiAgICAgICAgICAgIGxldCBjb252ZXJ0b3IgPSBuZXcgRXh0ZW5kc0NvbnZlcnQoKTtcbiAgICAgICAgICAgIGpvYmpbXCJFeHRlbmRzXCJdID1jb252ZXJ0b3IuQ29udmVydEpPYmplY3QobWV0YWRhdGEuRXh0ZW5kcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGpvYmo7XG4gICAgfVxuXG4gICAgSW5pdEZyb21Kb2JqZWN0KGpzb25PYmo6IE9iamVjdCk6IFdlYkNvbW1hbmRNZXRhZGF0YSB7XG4gICAgICAgIGxldCBtZXRhZGF0YSA9IG5ldyBXZWJDb21tYW5kTWV0YWRhdGEoKTtcbiAgICAgICAgbWV0YWRhdGEuSWQgPSBqc29uT2JqW1wiSWRcIl07XG4gICAgICAgIG1ldGFkYXRhLkNvZGUgPSBqc29uT2JqW1wiQ29kZVwiXTtcbiAgICAgICAgbWV0YWRhdGEuTmFtZSA9IGpzb25PYmpbXCJOYW1lXCJdO1xuICAgICAgICBtZXRhZGF0YS5EZXNjcmlwdGlvbiA9IGpzb25PYmpbXCJEZXNjcmlwdGlvblwiXTtcbiAgICAgICAgbGV0IENvbW1hbmRzSkFycnkgPSBqc29uT2JqW1wiQ29tbWFuZHNcIl07XG4gICAgICAgIGlmIChDb21tYW5kc0pBcnJ5ICE9IG51bGwpIHtcbiAgICAgICAgICAgIG1ldGFkYXRhLkNvbW1hbmRzID0gbmV3IEFycmF5PFdlYkNvbW1hbmQ+KCk7XG4gICAgICAgICAgICBDb21tYW5kc0pBcnJ5LmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGNtcE9wU2VyaWFsaXplciA9IG5ldyBXZWJDb21tYW5kQ29udmVydG9yKCk7XG4gICAgICAgICAgICAgICAgbWV0YWRhdGEuQ29tbWFuZHMucHVzaChjbXBPcFNlcmlhbGl6ZXIuSW5pdEZyb21Kb2JqZWN0KGVsZW1lbnQpIGFzIFdlYkNvbW1hbmQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNvbnZlcnRvciA9IG5ldyBFeHRlbmRzQ29udmVydCgpO1xuICAgICAgICBtZXRhZGF0YS5FeHRlbmRzPWNvbnZlcnRvci5Jbml0RnJvbUpvYmplY3QoanNvbk9ialtcIkV4dGVuZHNcIl0pO1xuICAgICAgICByZXR1cm4gbWV0YWRhdGE7XG4gICAgfVxufSJdfQ==