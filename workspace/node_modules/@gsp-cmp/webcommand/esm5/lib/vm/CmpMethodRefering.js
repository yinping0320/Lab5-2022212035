/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CmpMethodParamConfigConvert } from "./CmpMethodParamConfig";
import { CommandItemType } from "./CommandItemType";
var CmpMethodRefering = /** @class */ (function () {
    function CmpMethodRefering() {
    }
    /**
     * @return {?}
     */
    CmpMethodRefering.prototype.GetItemType = /**
     * @return {?}
     */
    function () {
        return CommandItemType.MethodRefer;
    };
    /**
     * @return {?}
     */
    CmpMethodRefering.prototype.GetItemCode = /**
     * @return {?}
     */
    function () {
        return this.Code;
    };
    /**
     * @return {?}
     */
    CmpMethodRefering.prototype.GetItemName = /**
     * @return {?}
     */
    function () {
        return this.Name;
    };
    /**
     * @return {?}
     */
    CmpMethodRefering.prototype.GetItemId = /**
     * @return {?}
     */
    function () {
        return this.Id;
    };
    return CmpMethodRefering;
}());
export { CmpMethodRefering };
if (false) {
    /** @type {?} */
    CmpMethodRefering.prototype.Id;
    /** @type {?} */
    CmpMethodRefering.prototype.Code;
    /** @type {?} */
    CmpMethodRefering.prototype.Name;
    /** @type {?} */
    CmpMethodRefering.prototype.ComponentId;
    /** @type {?} */
    CmpMethodRefering.prototype.ComponentCode;
    /** @type {?} */
    CmpMethodRefering.prototype.ComponentName;
    /** @type {?} */
    CmpMethodRefering.prototype.ComponentPath;
    /** @type {?} */
    CmpMethodRefering.prototype.MethodId;
    /** @type {?} */
    CmpMethodRefering.prototype.MethodCode;
    /** @type {?} */
    CmpMethodRefering.prototype.MethodName;
    /** @type {?} */
    CmpMethodRefering.prototype.IsReplaced;
    /** @type {?} */
    CmpMethodRefering.prototype.IsBeforeExpansion;
    /** @type {?} */
    CmpMethodRefering.prototype.IsAfterExpansion;
    /** @type {?} */
    CmpMethodRefering.prototype.ParamConfigs;
}
var CmpMethodReferingConvert = /** @class */ (function () {
    function CmpMethodReferingConvert() {
    }
    /**
     * @param {?} jsonObj
     * @return {?}
     */
    CmpMethodReferingConvert.prototype.InitFromJobject = /**
     * @param {?} jsonObj
     * @return {?}
     */
    function (jsonObj) {
        /** @type {?} */
        var cmpMethodRefering = new CmpMethodRefering();
        cmpMethodRefering.Id = jsonObj["Id"];
        cmpMethodRefering.Code = jsonObj["Code"];
        cmpMethodRefering.Name = jsonObj["Name"];
        cmpMethodRefering.MethodId = jsonObj["MethodId"];
        cmpMethodRefering.MethodCode = jsonObj["MethodCode"];
        cmpMethodRefering.MethodName = jsonObj["MethodName"];
        cmpMethodRefering.ComponentId = jsonObj["ComponentId"];
        cmpMethodRefering.ComponentCode = jsonObj["ComponentCode"];
        cmpMethodRefering.ComponentName = jsonObj["ComponentName"];
        cmpMethodRefering.ComponentPath = jsonObj["ComponentPath"];
        cmpMethodRefering.IsReplaced = jsonObj["IsReplaced"];
        cmpMethodRefering.IsBeforeExpansion = jsonObj["IsBeforeExpansion"];
        cmpMethodRefering.IsAfterExpansion = jsonObj["IsAfterExpansion"];
        if (jsonObj["ParamConfigs"] != null) {
            cmpMethodRefering.ParamConfigs = new Array();
            /** @type {?} */
            var convertor_1 = new CmpMethodParamConfigConvert();
            jsonObj["ParamConfigs"].forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                cmpMethodRefering.ParamConfigs.push(convertor_1.InitFromJobject(element));
            }));
        }
        return cmpMethodRefering;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    CmpMethodReferingConvert.prototype.ConvertJObject = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var cmpMethodRefering = (/** @type {?} */ (obj));
        /** @type {?} */
        var jobj = new Object();
        jobj["Id"] = cmpMethodRefering.Id;
        jobj["Code"] = cmpMethodRefering.Code;
        jobj["Name"] = cmpMethodRefering.Name;
        jobj["MethodId"] = cmpMethodRefering.MethodId;
        jobj["MethodCode"] = cmpMethodRefering.MethodCode;
        jobj["MethodName"] = cmpMethodRefering.MethodName;
        jobj["ComponentId"] = cmpMethodRefering.ComponentId;
        jobj["ComponentCode"] = cmpMethodRefering.ComponentCode;
        jobj["ComponentName"] = cmpMethodRefering.ComponentName;
        jobj["ComponentPath"] = cmpMethodRefering.ComponentPath;
        jobj["IsReplaced"] = cmpMethodRefering.IsReplaced;
        jobj["IsBeforeExpansion"] = cmpMethodRefering.IsBeforeExpansion;
        jobj["IsAfterExpansion"] = cmpMethodRefering.IsAfterExpansion;
        if (cmpMethodRefering.ParamConfigs != null) {
            /** @type {?} */
            var CommandsJArry_1 = jobj["ParamConfigs"] = [];
            /** @type {?} */
            var convertor_2 = new CmpMethodParamConfigConvert();
            cmpMethodRefering.ParamConfigs.forEach((/**
             * @param {?} paramConfig
             * @return {?}
             */
            function (paramConfig) {
                CommandsJArry_1.push(convertor_2.ConvertJObject(paramConfig));
            }));
        }
        return jobj;
    };
    return CmpMethodReferingConvert;
}());
export { CmpMethodReferingConvert };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ21wTWV0aG9kUmVmZXJpbmcuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLWNtcC93ZWJjb21tYW5kLyIsInNvdXJjZXMiOlsibGliL3ZtL0NtcE1ldGhvZFJlZmVyaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQXdCLDJCQUEyQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFM0YsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRXBEO0lBQUE7SUE2QkEsQ0FBQzs7OztJQVpHLHVDQUFXOzs7SUFBWDtRQUNJLE9BQU8sZUFBZSxDQUFDLFdBQVcsQ0FBQztJQUN2QyxDQUFDOzs7O0lBQ0QsdUNBQVc7OztJQUFYO1FBQ0ksT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3JCLENBQUM7Ozs7SUFDRCx1Q0FBVzs7O0lBQVg7UUFDSSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDckIsQ0FBQzs7OztJQUNELHFDQUFTOzs7SUFBVDtRQUNJLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBQ0wsd0JBQUM7QUFBRCxDQUFDLEFBN0JELElBNkJDOzs7O0lBM0JHLCtCQUFVOztJQUNWLGlDQUFZOztJQUNaLGlDQUFZOztJQUNaLHdDQUFvQjs7SUFDcEIsMENBQXNCOztJQUN0QiwwQ0FBc0I7O0lBQ3RCLDBDQUFzQjs7SUFDdEIscUNBQWlCOztJQUNqQix1Q0FBbUI7O0lBQ25CLHVDQUFtQjs7SUFDbkIsdUNBQW1COztJQUNuQiw4Q0FBMEI7O0lBQzFCLDZDQUF5Qjs7SUFDekIseUNBQTBDOztBQWdCOUM7SUFBQTtJQW9EQSxDQUFDOzs7OztJQWxERyxrREFBZTs7OztJQUFmLFVBQWdCLE9BQWU7O1lBQ3ZCLGlCQUFpQixHQUFHLElBQUksaUJBQWlCLEVBQUU7UUFDL0MsaUJBQWlCLENBQUMsRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQyxpQkFBaUIsQ0FB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LGVBQWEsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsRUFBRTs7Z0JBQ3pDLFdBQVMsR0FBRyxJQUFJLDJCQUEyQixFQUFFO1lBQ2pELGlCQUFpQixDQUFDLFlBQVksQ0FBQyxPQUFPOzs7O1lBQUMsVUFBQSxXQUFXO2dCQUM5QyxlQUFhLENBQUMsSUFBSSxDQUFDLFdBQVMsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztZQUM5RCxDQUFDLEVBQUMsQ0FBQztTQUNOO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUNMLCtCQUFDO0FBQUQsQ0FBQyxBQXBERCxJQW9EQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENtcE1ldGhvZFBhcmFtQ29uZmlnLCBDbXBNZXRob2RQYXJhbUNvbmZpZ0NvbnZlcnQgfSBmcm9tIFwiLi9DbXBNZXRob2RQYXJhbUNvbmZpZ1wiO1xuaW1wb3J0IHsgSUNvbW1hbmRJdGVtIH0gZnJvbSBcIi4vSUNvbW1hbmRJdGVtXCI7XG5pbXBvcnQgeyBDb21tYW5kSXRlbVR5cGUgfSBmcm9tIFwiLi9Db21tYW5kSXRlbVR5cGVcIjtcblxuZXhwb3J0IGNsYXNzIENtcE1ldGhvZFJlZmVyaW5nIGltcGxlbWVudHMgSUNvbW1hbmRJdGVtIHtcbiAgICBcbiAgICBJZDpzdHJpbmc7XG4gICAgQ29kZTpzdHJpbmc7XG4gICAgTmFtZTpzdHJpbmc7XG4gICAgQ29tcG9uZW50SWQ6IHN0cmluZztcbiAgICBDb21wb25lbnRDb2RlOiBzdHJpbmc7XG4gICAgQ29tcG9uZW50TmFtZTogc3RyaW5nO1xuICAgIENvbXBvbmVudFBhdGg6IHN0cmluZztcbiAgICBNZXRob2RJZDogc3RyaW5nO1xuICAgIE1ldGhvZENvZGU6IHN0cmluZztcbiAgICBNZXRob2ROYW1lOiBzdHJpbmc7XG4gICAgSXNSZXBsYWNlZDpib29sZWFuO1xuICAgIElzQmVmb3JlRXhwYW5zaW9uOmJvb2xlYW47XG4gICAgSXNBZnRlckV4cGFuc2lvbjpib29sZWFuO1xuICAgIFBhcmFtQ29uZmlnczogQXJyYXk8Q21wTWV0aG9kUGFyYW1Db25maWc+O1xuXG4gICAgR2V0SXRlbVR5cGUoKTogQ29tbWFuZEl0ZW1UeXBlIHtcbiAgICAgICAgcmV0dXJuIENvbW1hbmRJdGVtVHlwZS5NZXRob2RSZWZlcjtcbiAgICB9XG4gICAgR2V0SXRlbUNvZGUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuQ29kZTtcbiAgICB9XG4gICAgR2V0SXRlbU5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuTmFtZTtcbiAgICB9XG4gICAgR2V0SXRlbUlkKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLklkO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIENtcE1ldGhvZFJlZmVyaW5nQ29udmVydHtcblxuICAgIEluaXRGcm9tSm9iamVjdChqc29uT2JqOiBPYmplY3QpOiBDbXBNZXRob2RSZWZlcmluZyB7XG4gICAgICAgIGxldCBjbXBNZXRob2RSZWZlcmluZyA9IG5ldyBDbXBNZXRob2RSZWZlcmluZygpO1xuICAgICAgICBjbXBNZXRob2RSZWZlcmluZy5JZCA9IGpzb25PYmpbXCJJZFwiXTtcbiAgICAgICAgY21wTWV0aG9kUmVmZXJpbmcuQ29kZSA9IGpzb25PYmpbXCJDb2RlXCJdO1xuICAgICAgICBjbXBNZXRob2RSZWZlcmluZy5OYW1lID0ganNvbk9ialtcIk5hbWVcIl07XG4gICAgICAgIGNtcE1ldGhvZFJlZmVyaW5nLk1ldGhvZElkID0ganNvbk9ialtcIk1ldGhvZElkXCJdO1xuICAgICAgICBjbXBNZXRob2RSZWZlcmluZy5NZXRob2RDb2RlID0ganNvbk9ialtcIk1ldGhvZENvZGVcIl07XG4gICAgICAgIGNtcE1ldGhvZFJlZmVyaW5nLk1ldGhvZE5hbWUgPSBqc29uT2JqW1wiTWV0aG9kTmFtZVwiXTtcbiAgICAgICAgY21wTWV0aG9kUmVmZXJpbmcuQ29tcG9uZW50SWQgPSBqc29uT2JqW1wiQ29tcG9uZW50SWRcIl07XG4gICAgICAgIGNtcE1ldGhvZFJlZmVyaW5nLkNvbXBvbmVudENvZGUgPSBqc29uT2JqW1wiQ29tcG9uZW50Q29kZVwiXTtcbiAgICAgICAgY21wTWV0aG9kUmVmZXJpbmcuQ29tcG9uZW50TmFtZSA9IGpzb25PYmpbXCJDb21wb25lbnROYW1lXCJdO1xuICAgICAgICBjbXBNZXRob2RSZWZlcmluZy5Db21wb25lbnRQYXRoID0ganNvbk9ialtcIkNvbXBvbmVudFBhdGhcIl07XG4gICAgICAgIGNtcE1ldGhvZFJlZmVyaW5nLklzUmVwbGFjZWQgPSBqc29uT2JqW1wiSXNSZXBsYWNlZFwiXTtcbiAgICAgICAgY21wTWV0aG9kUmVmZXJpbmcuSXNCZWZvcmVFeHBhbnNpb24gPSBqc29uT2JqW1wiSXNCZWZvcmVFeHBhbnNpb25cIl07XG4gICAgICAgIGNtcE1ldGhvZFJlZmVyaW5nLklzQWZ0ZXJFeHBhbnNpb24gPSBqc29uT2JqW1wiSXNBZnRlckV4cGFuc2lvblwiXTtcbiAgICAgICAgaWYgKGpzb25PYmpbXCJQYXJhbUNvbmZpZ3NcIl0gIT0gbnVsbCkge1xuICAgICAgICAgICAgY21wTWV0aG9kUmVmZXJpbmcuUGFyYW1Db25maWdzPW5ldyBBcnJheTxDbXBNZXRob2RQYXJhbUNvbmZpZz4oKTtcbiAgICAgICAgICAgIGxldCBjb252ZXJ0b3IgPSBuZXcgQ21wTWV0aG9kUGFyYW1Db25maWdDb252ZXJ0KCk7XG4gICAgICAgICAgICBqc29uT2JqW1wiUGFyYW1Db25maWdzXCJdLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgICAgY21wTWV0aG9kUmVmZXJpbmcuUGFyYW1Db25maWdzLnB1c2goY29udmVydG9yLkluaXRGcm9tSm9iamVjdChlbGVtZW50KSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY21wTWV0aG9kUmVmZXJpbmc7XG4gICAgfVxuXG4gICAgQ29udmVydEpPYmplY3Qob2JqOiBDbXBNZXRob2RSZWZlcmluZyk6IE9iamVjdCB7XG4gICAgICAgIGxldCBjbXBNZXRob2RSZWZlcmluZzogQ21wTWV0aG9kUmVmZXJpbmcgPSBvYmogYXMgQ21wTWV0aG9kUmVmZXJpbmc7XG4gICAgICAgIGxldCBqb2JqID0gbmV3IE9iamVjdCgpO1xuICAgICAgICBqb2JqW1wiSWRcIl0gPSBjbXBNZXRob2RSZWZlcmluZy5JZDtcbiAgICAgICAgam9ialtcIkNvZGVcIl0gPSBjbXBNZXRob2RSZWZlcmluZy5Db2RlO1xuICAgICAgICBqb2JqW1wiTmFtZVwiXSA9IGNtcE1ldGhvZFJlZmVyaW5nLk5hbWU7XG4gICAgICAgIGpvYmpbXCJNZXRob2RJZFwiXSA9IGNtcE1ldGhvZFJlZmVyaW5nLk1ldGhvZElkO1xuICAgICAgICBqb2JqW1wiTWV0aG9kQ29kZVwiXSA9IGNtcE1ldGhvZFJlZmVyaW5nLk1ldGhvZENvZGU7XG4gICAgICAgIGpvYmpbXCJNZXRob2ROYW1lXCJdID0gY21wTWV0aG9kUmVmZXJpbmcuTWV0aG9kTmFtZTtcbiAgICAgICAgam9ialtcIkNvbXBvbmVudElkXCJdID0gY21wTWV0aG9kUmVmZXJpbmcuQ29tcG9uZW50SWQ7XG4gICAgICAgIGpvYmpbXCJDb21wb25lbnRDb2RlXCJdID0gY21wTWV0aG9kUmVmZXJpbmcuQ29tcG9uZW50Q29kZTtcbiAgICAgICAgam9ialtcIkNvbXBvbmVudE5hbWVcIl0gPSBjbXBNZXRob2RSZWZlcmluZy5Db21wb25lbnROYW1lO1xuICAgICAgICBqb2JqW1wiQ29tcG9uZW50UGF0aFwiXSA9IGNtcE1ldGhvZFJlZmVyaW5nLkNvbXBvbmVudFBhdGg7XG4gICAgICAgIGpvYmpbXCJJc1JlcGxhY2VkXCJdID0gY21wTWV0aG9kUmVmZXJpbmcuSXNSZXBsYWNlZDtcbiAgICAgICAgam9ialtcIklzQmVmb3JlRXhwYW5zaW9uXCJdID0gY21wTWV0aG9kUmVmZXJpbmcuSXNCZWZvcmVFeHBhbnNpb247XG4gICAgICAgIGpvYmpbXCJJc0FmdGVyRXhwYW5zaW9uXCJdID0gY21wTWV0aG9kUmVmZXJpbmcuSXNBZnRlckV4cGFuc2lvbjtcbiAgICAgICAgaWYgKGNtcE1ldGhvZFJlZmVyaW5nLlBhcmFtQ29uZmlncyAhPSBudWxsKSB7XG4gICAgICAgICAgICBsZXQgQ29tbWFuZHNKQXJyeSA9IGpvYmpbXCJQYXJhbUNvbmZpZ3NcIl0gPSBbXTtcbiAgICAgICAgICAgIGxldCBjb252ZXJ0b3IgPSBuZXcgQ21wTWV0aG9kUGFyYW1Db25maWdDb252ZXJ0KCk7XG4gICAgICAgICAgICBjbXBNZXRob2RSZWZlcmluZy5QYXJhbUNvbmZpZ3MuZm9yRWFjaChwYXJhbUNvbmZpZyA9PiB7XG4gICAgICAgICAgICAgICAgQ29tbWFuZHNKQXJyeS5wdXNoKGNvbnZlcnRvci5Db252ZXJ0Sk9iamVjdChwYXJhbUNvbmZpZykpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGpvYmo7XG4gICAgfVxufSJdfQ==