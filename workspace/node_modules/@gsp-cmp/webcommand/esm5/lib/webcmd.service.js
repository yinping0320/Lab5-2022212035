/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { GSPMetadataService } from '@gsp-lcm/metadata-selector';
import { map } from 'rxjs/operators';
import { WebCommandMetadataConvertor } from './vm/WebCommandMetadata';
import * as i0 from "@angular/core";
import * as i1 from "@gsp-lcm/metadata-selector";
var WebCommandComponentService = /** @class */ (function () {
    function WebCommandComponentService(metadataService) {
        this.metadataService = metadataService;
    }
    /**
     * @param {?} metadataUri
     * @return {?}
     */
    WebCommandComponentService.prototype.getWebCommandMetadata = /**
     * @param {?} metadataUri
     * @return {?}
     */
    function (metadataUri) {
        /** @type {?} */
        var fileName = metadataUri.substring(metadataUri.lastIndexOf('/') + 1);
        /** @type {?} */
        var filePath = metadataUri.substring(1, metadataUri.lastIndexOf('/'));
        return this.metadataService.LoadMetadata(fileName, filePath).pipe(map((/**
         * @param {?} dto
         * @return {?}
         */
        function (dto) {
            return (new WebCommandMetadataConvertor()).InitFromJobject(JSON.parse(dto.content));
        })));
    };
    WebCommandComponentService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    WebCommandComponentService.ctorParameters = function () { return [
        { type: GSPMetadataService }
    ]; };
    /** @nocollapse */ WebCommandComponentService.ngInjectableDef = i0.defineInjectable({ factory: function WebCommandComponentService_Factory() { return new WebCommandComponentService(i0.inject(i1.GSPMetadataService)); }, token: WebCommandComponentService, providedIn: "root" });
    return WebCommandComponentService;
}());
export { WebCommandComponentService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    WebCommandComponentService.prototype.metadataService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViY21kLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLWNtcC93ZWJjb21tYW5kLyIsInNvdXJjZXMiOlsibGliL3dlYmNtZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQXNCLDJCQUEyQixFQUFFLE1BQU0seUJBQXlCLENBQUM7OztBQUUxRjtJQUtJLG9DQUFvQixlQUFtQztRQUFuQyxvQkFBZSxHQUFmLGVBQWUsQ0FBb0I7SUFBSSxDQUFDOzs7OztJQUU1RCwwREFBcUI7Ozs7SUFBckIsVUFBc0IsV0FBbUI7O1lBQy9CLFFBQVEsR0FBRyxXQUFXLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDOztZQUNsRSxRQUFRLEdBQUcsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN2RSxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRzs7OztRQUFDLFVBQUMsR0FBTztZQUMxRSxPQUFBLENBQUMsSUFBSSwyQkFBMkIsRUFBRSxDQUFDLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQTVFLENBQTRFLEVBQy9FLENBQUMsQ0FBQztJQUNQLENBQUM7O2dCQWJKLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7Z0JBTlEsa0JBQWtCOzs7cUNBRjNCO0NBb0JDLEFBZEQsSUFjQztTQVhZLDBCQUEwQjs7Ozs7O0lBRXZCLHFEQUEyQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEdTUE1ldGFkYXRhU2VydmljZSB9IGZyb20gJ0Bnc3AtbGNtL21ldGFkYXRhLXNlbGVjdG9yJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFdlYkNvbW1hbmRNZXRhZGF0YSwgV2ViQ29tbWFuZE1ldGFkYXRhQ29udmVydG9yIH0gZnJvbSAnLi92bS9XZWJDb21tYW5kTWV0YWRhdGEnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBXZWJDb21tYW5kQ29tcG9uZW50U2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIG1ldGFkYXRhU2VydmljZTogR1NQTWV0YWRhdGFTZXJ2aWNlKSB7IH1cbiAgICBcbiAgICBnZXRXZWJDb21tYW5kTWV0YWRhdGEobWV0YWRhdGFVcmk6IHN0cmluZyk6IE9ic2VydmFibGU8V2ViQ29tbWFuZE1ldGFkYXRhPiB7XG4gICAgICAgIGNvbnN0IGZpbGVOYW1lID0gbWV0YWRhdGFVcmkuc3Vic3RyaW5nKG1ldGFkYXRhVXJpLmxhc3RJbmRleE9mKCcvJykgKyAxKTtcbiAgICAgICAgY29uc3QgZmlsZVBhdGggPSBtZXRhZGF0YVVyaS5zdWJzdHJpbmcoMSwgbWV0YWRhdGFVcmkubGFzdEluZGV4T2YoJy8nKSk7XG4gICAgICAgIHJldHVybiB0aGlzLm1ldGFkYXRhU2VydmljZS5Mb2FkTWV0YWRhdGEoZmlsZU5hbWUsIGZpbGVQYXRoKS5waXBlKG1hcCgoZHRvOmFueSk9PlxuICAgICAgICAgICAgKG5ldyBXZWJDb21tYW5kTWV0YWRhdGFDb252ZXJ0b3IoKSkuSW5pdEZyb21Kb2JqZWN0KEpTT04ucGFyc2UoZHRvLmNvbnRlbnQpKVxuICAgICAgICApKTtcbiAgICB9XG59Il19