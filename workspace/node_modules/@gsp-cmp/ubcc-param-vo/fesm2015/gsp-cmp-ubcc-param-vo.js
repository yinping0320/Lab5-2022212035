import { NgModule } from '@angular/core';
import { Parameter, StructuredType, DataType, DefaultParameterSerializer, DefaultStructuredTypeSerializer, DefaultDataTypeSerializerFactory, DefaultConstraintSerializer, DefaultOperationSerializerFactory, DefaultPropertySerializerFactory } from '@ecp-caf/common-structure';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ubcc-param-vo.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UbccParamVoModule {
}
UbccParamVoModule.decorators = [
    { type: NgModule, args: [{
                declarations: [],
                imports: [],
                exports: []
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/param-template-vo/ubcc-param-template.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UbccParamTemplate {
    constructor() {
        this.params = [];
        this.groups = [];
        this.structuredTypes = [];
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/param-template-vo/ubcc-param-template-vo.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UbccParamTemplateVo {
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/param-template-assignment-vo/ubcc-param-template-assignment.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UbccParamTemplateAssignment {
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/param-template-assignment-vo/dimension-data.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DimensionData {
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/param-template-assignment-vo/dimension-info.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DimensionInfo {
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/param-template-assignment-vo/eventInfo.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class EventInfo {
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/param-dimension/dimension.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Dimension {
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/param-dimension/dimension-item.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DimensionItem {
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/param-data-vo/ubcc-param-data-vo.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UbccParamDataVo {
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/const/data-row-extension-const.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DataRowExtensionConst {
}
DataRowExtensionConst.DEFAULT_DATA_ROW = "DefaultDataRow";
DataRowExtensionConst.DIMENSION_DATA_ROW = "DimensionDataRow";

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/param-data-vo/dimension-data-row.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DimensionDataRow {
    constructor() {
        this.kind = DataRowExtensionConst.DIMENSION_DATA_ROW;
    }
    /**
     * @return {?}
     */
    getKind() {
        return DataRowExtensionConst.DIMENSION_DATA_ROW;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/param-data-vo/default-data-row.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DefaultDataRow {
    constructor() {
        this.kind = DataRowExtensionConst.DEFAULT_DATA_ROW;
    }
    /**
     * @return {?}
     */
    getKind() {
        return DataRowExtensionConst.DEFAULT_DATA_ROW;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/param-data-vo/data-item.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DataItem {
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/const/parameter-extension-const.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ParamExtensionConst {
}
ParamExtensionConst.BASE_PARAM = "UbccBaseParam";
ParamExtensionConst.ITEM_CATEGORY_PARAM = "UbccItemCategoryParam";

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/extension/parameter/base-param.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BaseParameter extends Parameter {
    constructor() {
        super();
        this.kind = ParamExtensionConst.BASE_PARAM;
        this.visible = true;
        this.readonly = false;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/extension/parameter/item-category-param.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ItemCategoryParam extends BaseParameter {
    constructor() {
        super(...arguments);
        this.kind = ParamExtensionConst.ITEM_CATEGORY_PARAM;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/const/data-type-extension-const.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DataTypeExtensionConst {
}
DataTypeExtensionConst.HELP_TYPE = "HelpType";
DataTypeExtensionConst.UBCC_STRUCTURE_TYPE_REF = "UbccStructureTypeRef";

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/extension/data-type/help-type.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class HelpType extends StructuredType {
    constructor() {
        super(...arguments);
        this.kind = DataTypeExtensionConst.HELP_TYPE;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/extension/data-type/structure-type-ref.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class StructureTypeRef extends DataType {
    constructor() {
        super();
        this.kind = DataTypeExtensionConst.UBCC_STRUCTURE_TYPE_REF;
        this.kind = DataTypeExtensionConst.UBCC_STRUCTURE_TYPE_REF;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/extension/data-type/structure-type-ref-enum.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const StructureTypeRefEnum = {
    ENUM: 0,
    HELP: 1,
};
StructureTypeRefEnum[StructureTypeRefEnum.ENUM] = 'ENUM';
StructureTypeRefEnum[StructureTypeRefEnum.HELP] = 'HELP';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/const/constraint-extension-const.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ConstraintExtenionConst {
}
ConstraintExtenionConst.UBCC_STRING_CONSTRAINT = "UbccStringConstraint";
ConstraintExtenionConst.UBCC_INTEGER_CONSTRAINT = "UbccIntegerConstraint";
ConstraintExtenionConst.UBCC_DATE_TIME_CONSTRAINT = "UbccDateTimeConstraint";
ConstraintExtenionConst.UBCC_DECIMAL_CONSTRAINT = "UbccDecimalConstraint";

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/extension/constraint/ubcc-string-constaint.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UbccStringConstraint {
    constructor() {
        this.kind = ConstraintExtenionConst.UBCC_STRING_CONSTRAINT;
    }
    /**
     * @return {?}
     */
    getKind() {
        return ConstraintExtenionConst.UBCC_STRING_CONSTRAINT;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/extension/constraint/ubcc-date-time-constraint.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UbccDateTimeConstraint {
    constructor() {
        this.kind = ConstraintExtenionConst.UBCC_DATE_TIME_CONSTRAINT;
    }
    /**
     * @return {?}
     */
    getKind() {
        return ConstraintExtenionConst.UBCC_DATE_TIME_CONSTRAINT;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/extension/constraint/ubcc-decimal-constraint.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UbccDecimalConstraint {
    constructor() {
        this.kind = ConstraintExtenionConst.UBCC_DECIMAL_CONSTRAINT;
    }
    /**
     * @return {?}
     */
    getKind() {
        return ConstraintExtenionConst.UBCC_DECIMAL_CONSTRAINT;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/extension/constraint/ubcc-integer-constraint.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UbccIntegerConstraint {
    constructor() {
        this.kind = ConstraintExtenionConst.UBCC_INTEGER_CONSTRAINT;
    }
    /**
     * @return {?}
     */
    getKind() {
        return ConstraintExtenionConst.UBCC_INTEGER_CONSTRAINT;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/param-serialzier/base-param-serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BaseParameterSerializer {
    /**
     * @param {?} param
     * @param {?} ctxt
     * @return {?}
     */
    serialize(param, ctxt) {
        /** @type {?} */
        let jobj = new Object();
        if (!param) {
            return jobj;
        }
        /** @type {?} */
        let baseParam = (/** @type {?} */ (param));
        /** @type {?} */
        let serializer = new DefaultParameterSerializer();
        jobj = serializer.serialize(baseParam, ctxt);
        jobj['id'] = baseParam.id;
        jobj['index'] = baseParam.index;
        jobj['visible'] = baseParam.visible;
        jobj['readonly'] = baseParam.readonly;
        jobj['groupId'] = baseParam.groupId;
        jobj['groupCode'] = baseParam.groupCode;
        jobj['groupName'] = baseParam.groupName;
        jobj['parameterTypeDesc'] = baseParam.parameterTypeDesc;
        jobj['kind'] = baseParam.kind;
        return jobj;
    }
    /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    deserialize(obj, ctxt) {
        if (!obj) {
            return null;
        }
        /** @type {?} */
        let param = new BaseParameter();
        /** @type {?} */
        let serializer = new DefaultParameterSerializer();
        param = (/** @type {?} */ (serializer.deserialize(obj, ctxt)));
        param.id = obj['id'];
        param.index = (/** @type {?} */ (obj['index']));
        param.visible = (/** @type {?} */ (obj['visible']));
        param.readonly = (/** @type {?} */ (obj['readonly']));
        param.groupId = obj['groupId'];
        param.groupCode = obj['groupCode'];
        param.groupName = obj['groupName'];
        param.parameterTypeDesc = obj['parameterTypeDesc'];
        return param;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/param-serialzier/item-category-param-serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ItemCategoryParamSerializer {
    /**
     * @param {?} param
     * @param {?} ctxt
     * @return {?}
     */
    serialize(param, ctxt) {
        /** @type {?} */
        let jobj = new Object();
        if (!param) {
            return jobj;
        }
        /** @type {?} */
        let itemCategoryParam = (/** @type {?} */ (param));
        /** @type {?} */
        let serializer = new BaseParameterSerializer();
        jobj = serializer.serialize(itemCategoryParam, ctxt);
        jobj['kind'] = itemCategoryParam.kind;
        return jobj;
    }
    /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    deserialize(obj, ctxt) {
        if (!obj) {
            return null;
        }
        /** @type {?} */
        let param = new ItemCategoryParam();
        /** @type {?} */
        let serializer = new BaseParameterSerializer();
        param = (/** @type {?} */ (serializer.deserialize(obj, ctxt)));
        return param;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/factory/ubcc-param-serializer-factory.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UbccParamSerializerFactory {
    /**
     * @param {?} kind
     * @return {?}
     */
    get(kind) {
        switch (kind) {
            case ParamExtensionConst.BASE_PARAM:
                return new BaseParameterSerializer();
            case ParamExtensionConst.ITEM_CATEGORY_PARAM:
                return new ItemCategoryParamSerializer();
            default:
                return new DefaultParameterSerializer();
        }
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/param-data-serializer/default-data-row-serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DefaultDataRowSerializer {
    /**
     * @param {?} dataRow
     * @return {?}
     */
    serialize(dataRow) {
        /** @type {?} */
        let jobj = new Object();
        if (!dataRow) {
            return null;
        }
        /** @type {?} */
        let defaultDataRow = (/** @type {?} */ (dataRow));
        jobj['id'] = defaultDataRow.id;
        jobj['kind'] = defaultDataRow.kind;
        if (defaultDataRow.paramItems) {
            jobj['paramItems'] = [];
            defaultDataRow.paramItems.forEach((/**
             * @param {?} paramItem
             * @return {?}
             */
            paramItem => {
                jobj['paramItems'] = paramItem;
            }));
        }
        return jobj;
    }
    /**
     * @param {?} jobj
     * @return {?}
     */
    deserialize(jobj) {
        if (!jobj) {
            return null;
        }
        /** @type {?} */
        let dataRow = new DefaultDataRow();
        dataRow.id = jobj['id'];
        if (jobj['paramItems']) {
            dataRow.paramItems = new Array();
            jobj['paramItems'].forEach((/**
             * @param {?} paramItemJobj
             * @return {?}
             */
            paramItemJobj => {
                dataRow.paramItems.push(Object.assign(new DataItem(), paramItemJobj));
            }));
        }
        return dataRow;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/param-data-serializer/dimension-data-row-serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DimensionDataRowSerializer {
    /**
     * @param {?} dataRow
     * @return {?}
     */
    serialize(dataRow) {
        /** @type {?} */
        let jobj = new Object();
        if (!dataRow) {
            return null;
        }
        /** @type {?} */
        let dimensionDataRow = (/** @type {?} */ (dataRow));
        jobj['id'] = dimensionDataRow.id;
        jobj['kind'] = dimensionDataRow.kind;
        if (dimensionDataRow.dimensionDataItems) {
            jobj['dimensionDataItems'] = [];
            dimensionDataRow.dimensionDataItems.forEach((/**
             * @param {?} dimensionDataItem
             * @return {?}
             */
            dimensionDataItem => {
                jobj['dimensionDataItems'] = dimensionDataItem;
            }));
        }
        if (dimensionDataRow.paramDataItems) {
            jobj['paramDataItems'] = [];
            dimensionDataRow.paramDataItems.forEach((/**
             * @param {?} paramItem
             * @return {?}
             */
            paramItem => {
                jobj['paramDataItems'] = paramItem;
            }));
        }
        return jobj;
    }
    /**
     * @param {?} jobj
     * @return {?}
     */
    deserialize(jobj) {
        if (!jobj) {
            return null;
        }
        /** @type {?} */
        let dataRow = new DimensionDataRow();
        dataRow.id = jobj['id'];
        if (jobj['dimensionDataItems']) {
            dataRow.dimensionDataItems = new Array();
            jobj['dimensionDataItems'].forEach((/**
             * @param {?} dimensionDataItemJobj
             * @return {?}
             */
            dimensionDataItemJobj => {
                dataRow.dimensionDataItems.push(Object.assign(new DataItem(), dimensionDataItemJobj));
            }));
        }
        if (jobj['paramDataItems']) {
            dataRow.paramDataItems = new Array();
            jobj['paramDataItems'].forEach((/**
             * @param {?} paramDataItemsJobj
             * @return {?}
             */
            paramDataItemsJobj => {
                dataRow.dimensionDataItems.push(Object.assign(new DataItem(), paramDataItemsJobj));
            }));
        }
        return dataRow;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/factory/ubcc-param-data-row-serializer-factory.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UbccParamDataRowSerializerFactory {
    /**
     * @param {?} kind
     * @return {?}
     */
    get(kind) {
        switch (kind) {
            case DataRowExtensionConst.DEFAULT_DATA_ROW:
                return new DefaultDataRowSerializer();
            case DataRowExtensionConst.DIMENSION_DATA_ROW:
                return new DimensionDataRowSerializer();
            default:
                throw new Error(`未获取到${kind}类型的DATA_ROW序列化器`);
        }
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/utils/serializer-utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// @dynamic
class SerializerUtils {
    /**
     * @return {?}
     */
    static getContext() {
        if (!SerializerUtils.context) {
            SerializerUtils.context = new UbccParamSerializerContext();
        }
        return SerializerUtils.context;
    }
    /**
     * @return {?}
     */
    static getUbccParamDataRowSerializerFactory() {
        if (!SerializerUtils.dataRowFactory) {
            SerializerUtils.dataRowFactory = new UbccParamDataRowSerializerFactory();
        }
        return SerializerUtils.dataRowFactory;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/data-type-serializer/help-type-serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class HelpTypeSerialzier {
    /**
     * @param {?} type
     * @param {?} ctxt
     * @return {?}
     */
    serialize(type, ctxt) {
        /** @type {?} */
        let jobj = new Object();
        if (!type) {
            return null;
        }
        /** @type {?} */
        let serializer = new DefaultStructuredTypeSerializer();
        jobj = serializer.serialize(type, SerializerUtils.getContext());
        /** @type {?} */
        let helpType = (/** @type {?} */ (type));
        jobj['helpId'] = helpType.helpId;
        jobj['helpCode'] = helpType.helpCode;
        jobj['helpName'] = helpType.helpName;
        jobj['kind'] = helpType.kind;
        return jobj;
    }
    /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    deserialize(obj, ctxt) {
        if (!obj) {
            return null;
        }
        /** @type {?} */
        let helpType = new HelpType();
        /** @type {?} */
        let serializer = new DefaultStructuredTypeSerializer();
        helpType = (/** @type {?} */ (serializer.deserialize(obj, SerializerUtils.getContext())));
        helpType.helpId = obj['helpId'];
        helpType.helpCode = obj['helpCode'];
        helpType.helpName = obj['helpName'];
        return helpType;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/data-type-serializer/structure-type-ref-serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class StructureTypeRefSerializer {
    /**
     * @param {?} type
     * @param {?} ctxt
     * @return {?}
     */
    serialize(type, ctxt) {
        if (!type) {
            return null;
        }
        /** @type {?} */
        let jobj = new Object();
        /** @type {?} */
        let refType = (/** @type {?} */ (type));
        jobj['kind'] = refType.kind;
        jobj['refId'] = refType.refId;
        jobj['type'] = refType.type;
        return jobj;
    }
    /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    deserialize(obj, ctxt) {
        if (!obj) {
            return null;
        }
        /** @type {?} */
        let refType = new StructureTypeRef();
        refType.refId = obj['refId'];
        refType.type = (/** @type {?} */ (obj['type']));
        return refType;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/factory/ubcc-data-type-serializer-factory.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UbccDataTypeSerializerFactory {
    /**
     * @param {?} kind
     * @return {?}
     */
    get(kind) {
        switch (kind) {
            case DataTypeExtensionConst.HELP_TYPE:
                return new HelpTypeSerialzier();
            case DataTypeExtensionConst.UBCC_STRUCTURE_TYPE_REF:
                return new StructureTypeRefSerializer();
            default:
                return new DefaultDataTypeSerializerFactory().get(kind);
        }
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/constraint-serializer/integer-constraint-serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UbccIntegerConstraintSerializer {
    /**
     * @param {?} constraint
     * @param {?} ctxt
     * @return {?}
     */
    serialize(constraint, ctxt) {
        /** @type {?} */
        let jobj = new Object();
        if (!constraint) {
            return jobj;
        }
        /** @type {?} */
        let integerConstraint = (/** @type {?} */ (constraint));
        jobj['kind'] = integerConstraint.kind;
        jobj['max'] = integerConstraint.max;
        jobj['min'] = integerConstraint.min;
        jobj['unit'] = integerConstraint.unit;
        return jobj;
    }
    /**
     * @param {?} jobj
     * @param {?} ctxt
     * @return {?}
     */
    deserialize(jobj, ctxt) {
        if (!jobj) {
            return null;
        }
        /** @type {?} */
        let integerConstraint = new UbccIntegerConstraint();
        integerConstraint.max = (/** @type {?} */ (jobj['max']));
        integerConstraint.min = (/** @type {?} */ (jobj['min']));
        integerConstraint.unit = jobj['unit'];
        return integerConstraint;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/constraint-serializer/decimal-constraint-serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UbccDecimalConstraintSerializer {
    /**
     * @param {?} constraint
     * @param {?} ctxt
     * @return {?}
     */
    serialize(constraint, ctxt) {
        /** @type {?} */
        let jobj = new Object();
        if (!constraint) {
            return jobj;
        }
        /** @type {?} */
        let decimalConstraint = (/** @type {?} */ (constraint));
        jobj['kind'] = decimalConstraint.kind;
        jobj['max'] = decimalConstraint.max;
        jobj['min'] = decimalConstraint.min;
        jobj['precision'] = decimalConstraint.precision;
        jobj['unit'] = decimalConstraint.unit;
        return jobj;
    }
    /**
     * @param {?} jobj
     * @param {?} ctxt
     * @return {?}
     */
    deserialize(jobj, ctxt) {
        if (!jobj) {
            return null;
        }
        /** @type {?} */
        let decimalConstraint = new UbccDecimalConstraint();
        decimalConstraint.max = (/** @type {?} */ (jobj['max']));
        decimalConstraint.min = (/** @type {?} */ (jobj['min']));
        decimalConstraint.precision = (/** @type {?} */ (jobj['precision']));
        decimalConstraint.unit = jobj['unit'];
        return decimalConstraint;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/constraint-serializer/date-time-constraint-serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UbccDateTimeConstraintSerializer {
    /**
     * @param {?} constraint
     * @param {?} ctxt
     * @return {?}
     */
    serialize(constraint, ctxt) {
        /** @type {?} */
        let jobj = new Object();
        if (!constraint) {
            return jobj;
        }
        /** @type {?} */
        let dataTimeConstraint = (/** @type {?} */ (constraint));
        jobj['kind'] = dataTimeConstraint.kind;
        jobj['format'] = dataTimeConstraint.format;
        return jobj;
    }
    /**
     * @param {?} jobj
     * @param {?} ctxt
     * @return {?}
     */
    deserialize(jobj, ctxt) {
        if (!jobj) {
            return null;
        }
        /** @type {?} */
        let dataTimeConstraint = new UbccDateTimeConstraint();
        dataTimeConstraint.format = jobj['format'];
        return dataTimeConstraint;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/constraint-serializer/string-constraint-serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UbccStringConstraintSerializer {
    /**
     * @param {?} constraint
     * @param {?} ctxt
     * @return {?}
     */
    serialize(constraint, ctxt) {
        /** @type {?} */
        let jobj = new Object();
        if (!constraint) {
            return jobj;
        }
        /** @type {?} */
        let stringConstraint = (/** @type {?} */ (constraint));
        jobj['kind'] = stringConstraint.kind;
        jobj['maxLength'] = stringConstraint.maxLength;
        jobj['minLength'] = stringConstraint.minLength;
        jobj['regexExpress'] = stringConstraint.regexExpress;
        return jobj;
    }
    /**
     * @param {?} jobj
     * @param {?} ctxt
     * @return {?}
     */
    deserialize(jobj, ctxt) {
        if (!jobj) {
            return null;
        }
        /** @type {?} */
        let constaint = new UbccStringConstraint();
        constaint.maxLength = (/** @type {?} */ (jobj['maxLength']));
        constaint.minLength = (/** @type {?} */ (jobj['minLength']));
        constaint.regexExpress = jobj['regexExpress'];
        return constaint;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/factory/ubcc-param-constraint-serializer-factory.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UbccParamConstraintSerializerFactory {
    /**
     * @param {?} kind
     * @return {?}
     */
    get(kind) {
        switch (kind) {
            case ConstraintExtenionConst.UBCC_INTEGER_CONSTRAINT:
                return new UbccIntegerConstraintSerializer();
            case ConstraintExtenionConst.UBCC_DECIMAL_CONSTRAINT:
                return new UbccDecimalConstraintSerializer();
            case ConstraintExtenionConst.UBCC_STRING_CONSTRAINT:
                return new UbccStringConstraintSerializer();
            case ConstraintExtenionConst.UBCC_DATE_TIME_CONSTRAINT:
                return new UbccDateTimeConstraintSerializer();
            default:
                return new DefaultConstraintSerializer();
        }
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/serializer-context/ubcc-serializer-context.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UbccParamSerializerContext {
    /**
     * @return {?}
     */
    getDataTypeSerializerFactory() {
        if (!this.dataTypeFactory) {
            this.dataTypeFactory = new UbccDataTypeSerializerFactory();
        }
        return this.dataTypeFactory;
    }
    /**
     * @return {?}
     */
    getParameterSerializerFactory() {
        if (!this.parameterFactory) {
            this.parameterFactory = new UbccParamSerializerFactory();
        }
        return this.parameterFactory;
    }
    /**
     * @return {?}
     */
    getOperationSerializerFactory() {
        if (!this.operationFactory) {
            this.operationFactory = new DefaultOperationSerializerFactory();
        }
        return this.operationFactory;
    }
    /**
     * @return {?}
     */
    getPropertySerializerFactory() {
        if (!this.propertyFactory) {
            this.propertyFactory = new DefaultPropertySerializerFactory();
        }
        return this.propertyFactory;
    }
    /**
     * @return {?}
     */
    getConstraintSerializerFactory() {
        if (!this.constraintFactory) {
            this.constraintFactory = new UbccParamConstraintSerializerFactory();
        }
        return this.constraintFactory;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/param-template-vo/parameter-group.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ParameterGroup {
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/template-serialzier/ubcc-param-template-serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UbccParamTemplateSerializer {
    /**
     * @param {?} template
     * @return {?}
     */
    serialize(template) {
        /** @type {?} */
        let jobj = new Object();
        if (!template) {
            return null;
        }
        jobj['id'] = template.id;
        jobj['index'] = template.index;
        jobj['code'] = template.code;
        jobj['name'] = template.name;
        jobj['description'] = template.description;
        jobj['bizTypeId'] = template.bizTypeId;
        jobj['bizTypePath'] = template.bizTypePath;
        jobj['bizModule'] = template.bizModule;
        jobj['templateType'] = template.templateType;
        jobj['groupEnable'] = template.groupEnable;
        /** @type {?} */
        let context = new UbccParamSerializerContext();
        if (template.params) {
            jobj['params'] = new Array();
            template.params.forEach((/**
             * @param {?} param
             * @return {?}
             */
            param => {
                /** @type {?} */
                let paramJobj = new Object();
                /** @type {?} */
                let serializer = context.getParameterSerializerFactory().get(param.kind);
                paramJobj = serializer.serialize(param, context);
                jobj['params'].push(paramJobj);
            }));
        }
        if (template.structuredTypes) {
            jobj['structuredTypes'] = new Array();
            template.structuredTypes.forEach((/**
             * @param {?} structure
             * @return {?}
             */
            structure => {
                /** @type {?} */
                let structureJobj = new Object();
                /** @type {?} */
                let serializer = context.getDataTypeSerializerFactory().get(structure.kind);
                structureJobj = serializer.serialize(structure, context);
                jobj['structuredTypes'].push(structureJobj);
            }));
        }
        if (template.groups) {
            jobj['groups'] = new Array();
            template.groups.forEach((/**
             * @param {?} group
             * @return {?}
             */
            group => {
                jobj['groups'].push(group);
            }));
        }
        return jobj;
    }
    /**
     * @param {?} jobj
     * @return {?}
     */
    deserializer(jobj) {
        if (!jobj) {
            return null;
        }
        /** @type {?} */
        let template = new UbccParamTemplate();
        template.id = jobj['id'];
        template.index = (/** @type {?} */ (jobj['index']));
        template.code = jobj['code'];
        template.name = jobj['name'];
        template.description = jobj['description'];
        template.bizTypeId = jobj['bizTypeId'];
        template.bizTypePath = jobj['bizTypePath'];
        template.bizModule = jobj['bizModule'];
        template.templateType = jobj['templateType'];
        template.groupEnable = jobj['groupEnable'];
        /** @type {?} */
        let context = new UbccParamSerializerContext();
        if (jobj['params']) {
            template.params = new Array();
            jobj['params'].forEach((/**
             * @param {?} paramJobj
             * @return {?}
             */
            paramJobj => {
                /** @type {?} */
                let serializer = context.getParameterSerializerFactory().get(paramJobj['kind']);
                /** @type {?} */
                let param = serializer.deserialize(paramJobj, context);
                template.params.push(param);
            }));
        }
        if (jobj['structuredTypes']) {
            template.structuredTypes = new Array();
            jobj['structuredTypes'].forEach((/**
             * @param {?} structurJobj
             * @return {?}
             */
            structurJobj => {
                /** @type {?} */
                let serializer = context.getDataTypeSerializerFactory().get(structurJobj['kind']);
                /** @type {?} */
                let structure = (/** @type {?} */ (serializer.deserialize(structurJobj, context)));
                template.structuredTypes.push(structure);
            }));
        }
        if (jobj['groups']) {
            template.groups = new Array();
            jobj['groups'].forEach((/**
             * @param {?} groupJobj
             * @return {?}
             */
            groupJobj => {
                template.groups.push(Object.assign(new ParameterGroup(), groupJobj));
            }));
        }
        return template;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/dimension-serializer/dimension-item-serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DimensionItemSerializer {
    /**
     * @param {?} dimensionItem
     * @return {?}
     */
    serialize(dimensionItem) {
        /** @type {?} */
        let jobj = new Object();
        if (!dimensionItem) {
            return null;
        }
        jobj['id'] = dimensionItem.id;
        jobj['index'] = dimensionItem.index;
        jobj['code'] = dimensionItem.code;
        jobj['name'] = dimensionItem.name;
        if (dimensionItem.dataType) {
            /** @type {?} */
            let context = SerializerUtils.getContext();
            /** @type {?} */
            let serializer = context.getDataTypeSerializerFactory().get(dimensionItem.dataType.kind);
            jobj['dataType'] = serializer.serialize(dimensionItem.dataType, context);
            //dataType作为字符串存
            jobj['dataType'] = JSON.stringify(jobj['dataType']);
        }
        return jobj;
    }
    /**
     * @param {?} jobj
     * @return {?}
     */
    deserialize(jobj) {
        if (!jobj) {
            return null;
        }
        /** @type {?} */
        let dimensionItem = new DimensionItem();
        dimensionItem.id = jobj['id'];
        dimensionItem.index = (/** @type {?} */ (jobj['index']));
        dimensionItem.code = jobj['code'];
        dimensionItem.name = jobj['name'];
        if (jobj['dataType']) {
            //dataType作为字符串存
            jobj['dataType'] = JSON.parse(jobj['dataType']);
            /** @type {?} */
            let context = SerializerUtils.getContext();
            /** @type {?} */
            let kind = jobj['dataType']['kind'];
            /** @type {?} */
            let serializer = context.getDataTypeSerializerFactory().get(kind);
            dimensionItem.dataType = (/** @type {?} */ (serializer.deserialize(jobj['dataType'], context)));
        }
        return dimensionItem;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/dimension-serializer/dimension-serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DimensionSerializer {
    /**
     * @param {?} dimension
     * @return {?}
     */
    serialize(dimension) {
        /** @type {?} */
        let jobj = new Object();
        if (!dimension) {
            return null;
        }
        jobj['id'] = dimension.id;
        jobj['code'] = dimension.code;
        jobj['name'] = dimension.name;
        if (dimension.dimensionItems) {
            jobj['dimensionItems'] = [];
            /** @type {?} */
            let serializer = new DimensionItemSerializer();
            dimension.dimensionItems.forEach((/**
             * @param {?} dimensionItem
             * @return {?}
             */
            dimensionItem => {
                jobj['dimensionItems'].push(serializer.serialize(dimensionItem));
            }));
        }
        return jobj;
    }
    /**
     * @param {?} jobj
     * @return {?}
     */
    deserialize(jobj) {
        if (!jobj) {
            return null;
        }
        /** @type {?} */
        let dimension = new Dimension();
        dimension.id = jobj['id'];
        dimension.code = jobj['code'];
        dimension.name = jobj['name'];
        if (jobj['dimensionItems']) {
            dimension.dimensionItems = new Array();
            /** @type {?} */
            let serializer = new DimensionItemSerializer();
            jobj['dimensionItems'].forEach((/**
             * @param {?} dimensionItemJobj
             * @return {?}
             */
            dimensionItemJobj => {
                dimension.dimensionItems.push(serializer.deserialize(dimensionItemJobj));
            }));
        }
        return dimension;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/param-data-serializer/data-item-serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DataItemSerializer {
    /**
     * @param {?} dataItem
     * @return {?}
     */
    serialize(dataItem) {
        if (!dataItem) {
            return null;
        }
        /** @type {?} */
        let jobj = new Object();
        jobj['id'] = dataItem.id;
        jobj['dataCode'] = dataItem.dataCode;
        jobj['dataName'] = dataItem.dataName;
        jobj['dataDesc'] = dataItem.dataDesc;
        jobj['dataValue'] = dataItem.dataValue;
        jobj['dataType'] = dataItem.dataType;
        return jobj;
    }
    /**
     * @param {?} jobj
     * @return {?}
     */
    deserialize(jobj) {
        if (!jobj) {
            return null;
        }
        /** @type {?} */
        let dataItem = new DataItem();
        dataItem.id = jobj['id'];
        dataItem.dataCode = jobj['dataCode'];
        dataItem.dataName = jobj['dataName'];
        dataItem.dataDesc = jobj['dataDesc'];
        dataItem.dataValue = jobj['dataValue'];
        dataItem.dataType = jobj['dataType'];
        return dataItem;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/template-assignment-serializer/dimension-data-serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DimensionDataSerializer {
    /**
     * @param {?} dimensionData
     * @return {?}
     */
    serialize(dimensionData) {
        if (!dimensionData) {
            return null;
        }
        /** @type {?} */
        let jobj = new Object();
        jobj['id'] = dimensionData.id;
        if (dimensionData.dataItems) {
            jobj['dataItems'] = dimensionData.dataItems.map((/**
             * @param {?} item
             * @return {?}
             */
            item => new DataItemSerializer().serialize(item)));
        }
        return jobj;
    }
    /**
     * @param {?} jobj
     * @return {?}
     */
    deserialize(jobj) {
        if (!jobj) {
            return null;
        }
        /** @type {?} */
        let dimensionInfo = new DimensionData();
        dimensionInfo.id = jobj['id'];
        if (jobj['dataItems']) {
            dimensionInfo.dataItems = jobj['dataItems'].map((/**
             * @param {?} item
             * @return {?}
             */
            item => new DataItemSerializer().deserialize(item)));
        }
        return dimensionInfo;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/template-assignment-serializer/dimension-info-serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DimensionInfoSerializer {
    /**
     * @param {?} dimensionInfo
     * @return {?}
     */
    serialize(dimensionInfo) {
        if (!dimensionInfo) {
            return null;
        }
        /** @type {?} */
        let jobj = new Object();
        jobj['dataModificationAllow'] = dimensionInfo.dataModificationAllow;
        if (dimensionInfo.data) {
            jobj['data'] = dimensionInfo.data.map((/**
             * @param {?} dimensionData
             * @return {?}
             */
            dimensionData => new DimensionDataSerializer().serialize(dimensionData)));
        }
        if (dimensionInfo.definition) {
            /** @type {?} */
            let serializer = new DimensionSerializer();
            jobj['definition'] = serializer.serialize(dimensionInfo.definition);
        }
        return jobj;
    }
    /**
     * @param {?} jobj
     * @return {?}
     */
    deserialize(jobj) {
        if (!jobj) {
            return null;
        }
        /** @type {?} */
        let dimensionInfo = new DimensionInfo();
        dimensionInfo.dataModificationAllow = (/** @type {?} */ (jobj['dataModificationAllow']));
        if (jobj['data']) {
            dimensionInfo.data = jobj['data'].map((/**
             * @param {?} dimensionData
             * @return {?}
             */
            dimensionData => new DimensionDataSerializer().deserialize(dimensionData)));
        }
        if (jobj['definition']) {
            /** @type {?} */
            let serializer = new DimensionSerializer();
            dimensionInfo.definition = serializer.deserialize(jobj['definition']);
        }
        return dimensionInfo;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/template-assignment-serializer/template-assignment-serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UbccParamTemplateAssignmentSerializer {
    /**
     * @param {?} templateAssignment
     * @return {?}
     */
    serialize(templateAssignment) {
        if (!templateAssignment) {
            return null;
        }
        /** @type {?} */
        let jobj = new Object();
        jobj['id'] = templateAssignment.id;
        jobj['templateId'] = templateAssignment.templateId;
        jobj['index'] = templateAssignment.index;
        jobj['templateCode'] = templateAssignment.templateCode;
        jobj['templateName'] = templateAssignment.templateName;
        jobj['templateType'] = templateAssignment.templateType;
        jobj['bizTypeId'] = templateAssignment.bizTypeId;
        jobj['useEvent'] = templateAssignment.useEvent;
        jobj['eventInfo'] = templateAssignment.eventInfo;
        jobj['useDimension'] = templateAssignment.useDimension;
        if (templateAssignment.dimensionInfo) {
            /** @type {?} */
            let serializer = new DimensionInfoSerializer();
            jobj['dimensionInfo'] = serializer.serialize(templateAssignment.dimensionInfo);
        }
        return jobj;
    }
    /**
     * @param {?} jobj
     * @return {?}
     */
    deserialize(jobj) {
        if (!jobj) {
            return null;
        }
        /** @type {?} */
        let templateAssignment = new UbccParamTemplateAssignment();
        templateAssignment.id = jobj['id'];
        templateAssignment.templateId = jobj['templateId'];
        templateAssignment.index = (/** @type {?} */ (jobj['index']));
        templateAssignment.templateCode = jobj['templateCode'];
        templateAssignment.templateName = jobj['templateName'];
        templateAssignment.templateType = jobj['templateType'];
        templateAssignment.bizTypeId = jobj['bizTypeId'];
        templateAssignment.useEvent = (/** @type {?} */ (jobj['useEvent']));
        templateAssignment.eventInfo = Object.assign(new EventInfo(), jobj['eventInfo']);
        templateAssignment.useDimension = (/** @type {?} */ (jobj['useDimension']));
        if (jobj['dimensionInfo']) {
            /** @type {?} */
            let serializer = new DimensionInfoSerializer();
            templateAssignment.dimensionInfo = serializer.deserialize(jobj['dimensionInfo']);
        }
        return templateAssignment;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/param-data-serializer/param-data-vo-serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ParamDataVoSerializer {
    /**
     * @param {?} paramData
     * @return {?}
     */
    serialize(paramData) {
        /** @type {?} */
        let jobj = new Object();
        if (!paramData) {
            return jobj;
        }
        jobj['templateId'] = paramData.templateId;
        jobj['bizTypeId'] = paramData.bizTypeId;
        if (paramData.data) {
            jobj['data'] = [];
            paramData.data.forEach((/**
             * @param {?} dataRow
             * @return {?}
             */
            dataRow => {
                /** @type {?} */
                let serializer = SerializerUtils.getUbccParamDataRowSerializerFactory().get(dataRow.getKind());
                jobj['data'].push(serializer.serialize(dataRow));
            }));
        }
        return jobj;
    }
    /**
     * @param {?} jobj
     * @return {?}
     */
    deserialize(jobj) {
        if (!jobj) {
            return null;
        }
        /** @type {?} */
        let paramData = new UbccParamDataVo();
        paramData.templateId = jobj['templateId'];
        paramData.bizTypeId = jobj['bizTypeId'];
        if (jobj['data']) {
            paramData.data = new Array();
            jobj['data'].forEach((/**
             * @param {?} dataRowJobj
             * @return {?}
             */
            dataRowJobj => {
                /** @type {?} */
                let serializer = SerializerUtils.getUbccParamDataRowSerializerFactory().get(dataRowJobj['kind']);
                paramData.data.push(serializer.deserialize(dataRowJobj));
            }));
        }
        return paramData;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: gsp-cmp-ubcc-param-vo.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { UbccParamVoModule, UbccParamTemplate, UbccParamTemplateVo, UbccParamTemplateAssignment, DimensionData, DimensionInfo, EventInfo, Dimension, DimensionItem, UbccParamDataVo, DimensionDataRow, DefaultDataRow, DataItem, BaseParameter, ItemCategoryParam, HelpType, StructureTypeRef, StructureTypeRefEnum, UbccStringConstraint, UbccDateTimeConstraint, UbccDecimalConstraint, UbccIntegerConstraint, UbccParamTemplateSerializer, UbccParamTemplateAssignmentSerializer, DimensionInfoSerializer, UbccParamSerializerContext, BaseParameterSerializer, ItemCategoryParamSerializer, ParamDataVoSerializer, DimensionDataRowSerializer, DefaultDataRowSerializer, UbccDataTypeSerializerFactory, UbccParamDataRowSerializerFactory, UbccParamSerializerFactory, DimensionSerializer, DimensionItemSerializer, HelpTypeSerialzier, StructureTypeRefSerializer, UbccDateTimeConstraintSerializer, UbccDecimalConstraintSerializer, UbccIntegerConstraintSerializer, UbccStringConstraintSerializer, ConstraintExtenionConst, DataRowExtensionConst, DataTypeExtensionConst, ParamExtensionConst, ParameterGroup };

//# sourceMappingURL=gsp-cmp-ubcc-param-vo.js.map