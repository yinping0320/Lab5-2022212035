/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/serializer-context/ubcc-serializer-context.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DefaultOperationSerializerFactory, DefaultPropertySerializerFactory } from '@ecp-caf/common-structure';
import { UbccParamSerializerFactory } from '../factory/ubcc-param-serializer-factory';
import { UbccDataTypeSerializerFactory } from '../factory/ubcc-data-type-serializer-factory';
import { UbccParamConstraintSerializerFactory } from '../factory/ubcc-param-constraint-serializer-factory';
var UbccParamSerializerContext = /** @class */ (function () {
    function UbccParamSerializerContext() {
    }
    /**
     * @return {?}
     */
    UbccParamSerializerContext.prototype.getDataTypeSerializerFactory = /**
     * @return {?}
     */
    function () {
        if (!this.dataTypeFactory) {
            this.dataTypeFactory = new UbccDataTypeSerializerFactory();
        }
        return this.dataTypeFactory;
    };
    /**
     * @return {?}
     */
    UbccParamSerializerContext.prototype.getParameterSerializerFactory = /**
     * @return {?}
     */
    function () {
        if (!this.parameterFactory) {
            this.parameterFactory = new UbccParamSerializerFactory();
        }
        return this.parameterFactory;
    };
    /**
     * @return {?}
     */
    UbccParamSerializerContext.prototype.getOperationSerializerFactory = /**
     * @return {?}
     */
    function () {
        if (!this.operationFactory) {
            this.operationFactory = new DefaultOperationSerializerFactory();
        }
        return this.operationFactory;
    };
    /**
     * @return {?}
     */
    UbccParamSerializerContext.prototype.getPropertySerializerFactory = /**
     * @return {?}
     */
    function () {
        if (!this.propertyFactory) {
            this.propertyFactory = new DefaultPropertySerializerFactory();
        }
        return this.propertyFactory;
    };
    /**
     * @return {?}
     */
    UbccParamSerializerContext.prototype.getConstraintSerializerFactory = /**
     * @return {?}
     */
    function () {
        if (!this.constraintFactory) {
            this.constraintFactory = new UbccParamConstraintSerializerFactory();
        }
        return this.constraintFactory;
    };
    return UbccParamSerializerContext;
}());
export { UbccParamSerializerContext };
if (false) {
    /**
     * @type {?}
     * @private
     */
    UbccParamSerializerContext.prototype.dataTypeFactory;
    /**
     * @type {?}
     * @private
     */
    UbccParamSerializerContext.prototype.parameterFactory;
    /**
     * @type {?}
     * @private
     */
    UbccParamSerializerContext.prototype.operationFactory;
    /**
     * @type {?}
     * @private
     */
    UbccParamSerializerContext.prototype.propertyFactory;
    /**
     * @type {?}
     * @private
     */
    UbccParamSerializerContext.prototype.constraintFactory;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWJjYy1zZXJpYWxpemVyLWNvbnRleHQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLWNtcC91YmNjLXBhcmFtLXZvLyIsInNvdXJjZXMiOlsibGliL3ZvL3NlcmlhbGl6ZXIvc2VyaWFsaXplci1jb250ZXh0L3ViY2Mtc2VyaWFsaXplci1jb250ZXh0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUF1SSxpQ0FBaUMsRUFBRSxnQ0FBZ0MsRUFBZ0MsTUFBTSwyQkFBMkIsQ0FBQztBQUNuUixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUN0RixPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUM3RixPQUFPLEVBQUUsb0NBQW9DLEVBQUUsTUFBTSxxREFBcUQsQ0FBQztBQUUzRztJQUFBO0lBNENBLENBQUM7Ozs7SUFwQ0csaUVBQTRCOzs7SUFBNUI7UUFDSSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN2QixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksNkJBQTZCLEVBQUUsQ0FBQztTQUM5RDtRQUNELE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUNoQyxDQUFDOzs7O0lBR0Qsa0VBQTZCOzs7SUFBN0I7UUFDSSxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ3hCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLDBCQUEwQixFQUFFLENBQUM7U0FDNUQ7UUFDRCxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztJQUNqQyxDQUFDOzs7O0lBRUQsa0VBQTZCOzs7SUFBN0I7UUFDSSxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ3hCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLGlDQUFpQyxFQUFFLENBQUM7U0FDbkU7UUFDRCxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztJQUNqQyxDQUFDOzs7O0lBRUQsaUVBQTRCOzs7SUFBNUI7UUFDSSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN2QixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksZ0NBQWdDLEVBQUUsQ0FBQztTQUNqRTtRQUNELE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUNoQyxDQUFDOzs7O0lBRUQsbUVBQThCOzs7SUFBOUI7UUFDSSxJQUFHLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFDO1lBQ3ZCLElBQUksQ0FBQyxpQkFBaUIsR0FBQyxJQUFJLG9DQUFvQyxFQUFFLENBQUM7U0FDckU7UUFDRCxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztJQUNsQyxDQUFDO0lBRUwsaUNBQUM7QUFBRCxDQUFDLEFBNUNELElBNENDOzs7Ozs7O0lBMUNHLHFEQUFvRDs7Ozs7SUFDcEQsc0RBQXNEOzs7OztJQUN0RCxzREFBc0Q7Ozs7O0lBQ3RELHFEQUFvRDs7Ozs7SUFDcEQsdURBQXVEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVNlcmlhbGl6ZUNvbnRleHQsIElQYXJhbWV0ZXJTZXJpYWxpemVyRmFjdG9yeSwgSVByb3BlcnR5U2VyaWFsaXplckZhY3RvcnksIElEYXRhVHlwZVNlcmlhbGl6ZXJGYWN0b3J5LCBJT3BlcmF0aW9uU2VyaWFsaXplckZhY3RvcnksIERlZmF1bHRPcGVyYXRpb25TZXJpYWxpemVyRmFjdG9yeSwgRGVmYXVsdFByb3BlcnR5U2VyaWFsaXplckZhY3RvcnksIElDb25zdHJhaW50U2VyaWFsaXplckZhY3RvcnkgfSBmcm9tICdAZWNwLWNhZi9jb21tb24tc3RydWN0dXJlJztcclxuaW1wb3J0IHsgVWJjY1BhcmFtU2VyaWFsaXplckZhY3RvcnkgfSBmcm9tICcuLi9mYWN0b3J5L3ViY2MtcGFyYW0tc2VyaWFsaXplci1mYWN0b3J5JztcclxuaW1wb3J0IHsgVWJjY0RhdGFUeXBlU2VyaWFsaXplckZhY3RvcnkgfSBmcm9tICcuLi9mYWN0b3J5L3ViY2MtZGF0YS10eXBlLXNlcmlhbGl6ZXItZmFjdG9yeSc7XHJcbmltcG9ydCB7IFViY2NQYXJhbUNvbnN0cmFpbnRTZXJpYWxpemVyRmFjdG9yeSB9IGZyb20gJy4uL2ZhY3RvcnkvdWJjYy1wYXJhbS1jb25zdHJhaW50LXNlcmlhbGl6ZXItZmFjdG9yeSc7XHJcblxyXG5leHBvcnQgY2xhc3MgVWJjY1BhcmFtU2VyaWFsaXplckNvbnRleHQgaW1wbGVtZW50cyBJU2VyaWFsaXplQ29udGV4dHtcclxuXHJcbiAgICBwcml2YXRlIGRhdGFUeXBlRmFjdG9yeTogSURhdGFUeXBlU2VyaWFsaXplckZhY3Rvcnk7XHJcbiAgICBwcml2YXRlIHBhcmFtZXRlckZhY3Rvcnk6IElQYXJhbWV0ZXJTZXJpYWxpemVyRmFjdG9yeTtcclxuICAgIHByaXZhdGUgb3BlcmF0aW9uRmFjdG9yeTogSU9wZXJhdGlvblNlcmlhbGl6ZXJGYWN0b3J5O1xyXG4gICAgcHJpdmF0ZSBwcm9wZXJ0eUZhY3Rvcnk6IElQcm9wZXJ0eVNlcmlhbGl6ZXJGYWN0b3J5O1xyXG4gICAgcHJpdmF0ZSBjb25zdHJhaW50RmFjdG9yeTpJQ29uc3RyYWludFNlcmlhbGl6ZXJGYWN0b3J5O1xyXG4gICBcclxuICAgIGdldERhdGFUeXBlU2VyaWFsaXplckZhY3RvcnkoKTogSURhdGFUeXBlU2VyaWFsaXplckZhY3Rvcnkge1xyXG4gICAgICAgIGlmICghdGhpcy5kYXRhVHlwZUZhY3RvcnkpIHtcclxuICAgICAgICAgICAgdGhpcy5kYXRhVHlwZUZhY3RvcnkgPSBuZXcgVWJjY0RhdGFUeXBlU2VyaWFsaXplckZhY3RvcnkoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVR5cGVGYWN0b3J5O1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBnZXRQYXJhbWV0ZXJTZXJpYWxpemVyRmFjdG9yeSgpOiBJUGFyYW1ldGVyU2VyaWFsaXplckZhY3Rvcnkge1xyXG4gICAgICAgIGlmICghdGhpcy5wYXJhbWV0ZXJGYWN0b3J5KSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFyYW1ldGVyRmFjdG9yeSA9IG5ldyBVYmNjUGFyYW1TZXJpYWxpemVyRmFjdG9yeSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5wYXJhbWV0ZXJGYWN0b3J5O1xyXG4gICAgfVxyXG5cclxuICAgIGdldE9wZXJhdGlvblNlcmlhbGl6ZXJGYWN0b3J5KCk6IElPcGVyYXRpb25TZXJpYWxpemVyRmFjdG9yeSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLm9wZXJhdGlvbkZhY3RvcnkpIHtcclxuICAgICAgICAgICAgdGhpcy5vcGVyYXRpb25GYWN0b3J5ID0gbmV3IERlZmF1bHRPcGVyYXRpb25TZXJpYWxpemVyRmFjdG9yeSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5vcGVyYXRpb25GYWN0b3J5O1xyXG4gICAgfVxyXG5cclxuICAgIGdldFByb3BlcnR5U2VyaWFsaXplckZhY3RvcnkoKTogSVByb3BlcnR5U2VyaWFsaXplckZhY3Rvcnkge1xyXG4gICAgICAgIGlmICghdGhpcy5wcm9wZXJ0eUZhY3RvcnkpIHtcclxuICAgICAgICAgICAgdGhpcy5wcm9wZXJ0eUZhY3RvcnkgPSBuZXcgRGVmYXVsdFByb3BlcnR5U2VyaWFsaXplckZhY3RvcnkoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcGVydHlGYWN0b3J5O1xyXG4gICAgfVxyXG5cclxuICAgIGdldENvbnN0cmFpbnRTZXJpYWxpemVyRmFjdG9yeSgpOiBJQ29uc3RyYWludFNlcmlhbGl6ZXJGYWN0b3J5IHtcclxuICAgICAgICBpZighdGhpcy5jb25zdHJhaW50RmFjdG9yeSl7XHJcbiAgICAgICAgICAgIHRoaXMuY29uc3RyYWludEZhY3Rvcnk9bmV3IFViY2NQYXJhbUNvbnN0cmFpbnRTZXJpYWxpemVyRmFjdG9yeSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJhaW50RmFjdG9yeTtcclxuICAgIH1cclxuICBcclxufSJdfQ==