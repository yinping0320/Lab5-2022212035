/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/constraint-serializer/integer-constraint-serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { UbccIntegerConstraint } from '../../extension/constraint/ubcc-integer-constraint';
var UbccIntegerConstraintSerializer = /** @class */ (function () {
    function UbccIntegerConstraintSerializer() {
    }
    /**
     * @param {?} constraint
     * @param {?} ctxt
     * @return {?}
     */
    UbccIntegerConstraintSerializer.prototype.serialize = /**
     * @param {?} constraint
     * @param {?} ctxt
     * @return {?}
     */
    function (constraint, ctxt) {
        /** @type {?} */
        var jobj = new Object();
        if (!constraint) {
            return jobj;
        }
        /** @type {?} */
        var integerConstraint = (/** @type {?} */ (constraint));
        jobj['kind'] = integerConstraint.kind;
        jobj['max'] = integerConstraint.max;
        jobj['min'] = integerConstraint.min;
        jobj['unit'] = integerConstraint.unit;
        return jobj;
    };
    /**
     * @param {?} jobj
     * @param {?} ctxt
     * @return {?}
     */
    UbccIntegerConstraintSerializer.prototype.deserialize = /**
     * @param {?} jobj
     * @param {?} ctxt
     * @return {?}
     */
    function (jobj, ctxt) {
        if (!jobj) {
            return null;
        }
        /** @type {?} */
        var integerConstraint = new UbccIntegerConstraint();
        integerConstraint.max = (/** @type {?} */ (jobj['max']));
        integerConstraint.min = (/** @type {?} */ (jobj['min']));
        integerConstraint.unit = jobj['unit'];
        return integerConstraint;
    };
    return UbccIntegerConstraintSerializer;
}());
export { UbccIntegerConstraintSerializer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWdlci1jb25zdHJhaW50LXNlcmlhbGl6ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLWNtcC91YmNjLXBhcmFtLXZvLyIsInNvdXJjZXMiOlsibGliL3ZvL3NlcmlhbGl6ZXIvY29uc3RyYWludC1zZXJpYWxpemVyL2ludGVnZXItY29uc3RyYWludC1zZXJpYWxpemVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sb0RBQW9ELENBQUM7QUFHM0Y7SUFBQTtJQTBCQSxDQUFDOzs7Ozs7SUF4QkcsbURBQVM7Ozs7O0lBQVQsVUFBVSxVQUFzQixFQUFFLElBQXVCOztZQUNqRCxJQUFJLEdBQUMsSUFBSSxNQUFNLEVBQUU7UUFDckIsSUFBRyxDQUFDLFVBQVUsRUFBQztZQUNYLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7O1lBQ0csaUJBQWlCLEdBQUMsbUJBQUEsVUFBVSxFQUF5QjtRQUN6RCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDO1FBQ3BDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUM7UUFDbEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQztRQUNsQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDO1FBQ3BDLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7Ozs7OztJQUVELHFEQUFXOzs7OztJQUFYLFVBQVksSUFBVyxFQUFFLElBQXVCO1FBQzVDLElBQUcsQ0FBQyxJQUFJLEVBQUM7WUFDTCxPQUFPLElBQUksQ0FBQztTQUNmOztZQUNHLGlCQUFpQixHQUFDLElBQUkscUJBQXFCLEVBQUU7UUFDakQsaUJBQWlCLENBQUMsR0FBRyxHQUFDLG1CQUFBLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBVSxDQUFDO1FBQzVDLGlCQUFpQixDQUFDLEdBQUcsR0FBQyxtQkFBQSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQVUsQ0FBQztRQUM1QyxpQkFBaUIsQ0FBQyxJQUFJLEdBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3BDLE9BQU8saUJBQWlCLENBQUM7SUFDN0IsQ0FBQztJQUVMLHNDQUFDO0FBQUQsQ0FBQyxBQTFCRCxJQTBCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFViY2NJbnRlZ2VyQ29uc3RyYWludCB9IGZyb20gJy4uLy4uL2V4dGVuc2lvbi9jb25zdHJhaW50L3ViY2MtaW50ZWdlci1jb25zdHJhaW50JztcclxuaW1wb3J0IHsgSUNvbnN0cmFpbnQsIElDb25zdHJhaW50U2VyaWFsaXplciwgSVNlcmlhbGl6ZUNvbnRleHQgfSBmcm9tICdAZWNwLWNhZi9jb21tb24tc3RydWN0dXJlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBVYmNjSW50ZWdlckNvbnN0cmFpbnRTZXJpYWxpemVyIGltcGxlbWVudHMgSUNvbnN0cmFpbnRTZXJpYWxpemVye1xyXG5cclxuICAgIHNlcmlhbGl6ZShjb25zdHJhaW50OklDb25zdHJhaW50LCBjdHh0OiBJU2VyaWFsaXplQ29udGV4dCk6T2JqZWN0e1xyXG4gICAgICAgIGxldCBqb2JqPW5ldyBPYmplY3QoKTtcclxuICAgICAgICBpZighY29uc3RyYWludCl7XHJcbiAgICAgICAgICAgIHJldHVybiBqb2JqO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgaW50ZWdlckNvbnN0cmFpbnQ9Y29uc3RyYWludCBhcyBVYmNjSW50ZWdlckNvbnN0cmFpbnQ7XHJcbiAgICAgICAgam9ialsna2luZCddPWludGVnZXJDb25zdHJhaW50LmtpbmQ7XHJcbiAgICAgICAgam9ialsnbWF4J109aW50ZWdlckNvbnN0cmFpbnQubWF4O1xyXG4gICAgICAgIGpvYmpbJ21pbiddPWludGVnZXJDb25zdHJhaW50Lm1pbjtcclxuICAgICAgICBqb2JqWyd1bml0J109aW50ZWdlckNvbnN0cmFpbnQudW5pdDtcclxuICAgICAgICByZXR1cm4gam9iajtcclxuICAgIH1cclxuXHJcbiAgICBkZXNlcmlhbGl6ZShqb2JqOk9iamVjdCwgY3R4dDogSVNlcmlhbGl6ZUNvbnRleHQpOklDb25zdHJhaW50e1xyXG4gICAgICAgIGlmKCFqb2JqKXtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBpbnRlZ2VyQ29uc3RyYWludD1uZXcgVWJjY0ludGVnZXJDb25zdHJhaW50KCk7XHJcbiAgICAgICAgaW50ZWdlckNvbnN0cmFpbnQubWF4PWpvYmpbJ21heCddIGFzIG51bWJlcjtcclxuICAgICAgICBpbnRlZ2VyQ29uc3RyYWludC5taW49am9ialsnbWluJ10gYXMgbnVtYmVyO1xyXG4gICAgICAgIGludGVnZXJDb25zdHJhaW50LnVuaXQ9am9ialsndW5pdCddO1xyXG4gICAgICAgIHJldHVybiBpbnRlZ2VyQ29uc3RyYWludDtcclxuICAgIH1cclxuXHJcbn0iXX0=