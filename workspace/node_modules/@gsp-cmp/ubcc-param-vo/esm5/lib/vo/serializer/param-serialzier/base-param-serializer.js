/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/param-serialzier/base-param-serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DefaultParameterSerializer } from '@ecp-caf/common-structure';
import { BaseParameter } from '../../extension/parameter/base-param';
var BaseParameterSerializer = /** @class */ (function () {
    function BaseParameterSerializer() {
    }
    /**
     * @param {?} param
     * @param {?} ctxt
     * @return {?}
     */
    BaseParameterSerializer.prototype.serialize = /**
     * @param {?} param
     * @param {?} ctxt
     * @return {?}
     */
    function (param, ctxt) {
        /** @type {?} */
        var jobj = new Object();
        if (!param) {
            return jobj;
        }
        /** @type {?} */
        var baseParam = (/** @type {?} */ (param));
        /** @type {?} */
        var serializer = new DefaultParameterSerializer();
        jobj = serializer.serialize(baseParam, ctxt);
        jobj['id'] = baseParam.id;
        jobj['index'] = baseParam.index;
        jobj['visible'] = baseParam.visible;
        jobj['readonly'] = baseParam.readonly;
        jobj['groupId'] = baseParam.groupId;
        jobj['groupCode'] = baseParam.groupCode;
        jobj['groupName'] = baseParam.groupName;
        jobj['parameterTypeDesc'] = baseParam.parameterTypeDesc;
        jobj['kind'] = baseParam.kind;
        return jobj;
    };
    /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    BaseParameterSerializer.prototype.deserialize = /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    function (obj, ctxt) {
        if (!obj) {
            return null;
        }
        /** @type {?} */
        var param = new BaseParameter();
        /** @type {?} */
        var serializer = new DefaultParameterSerializer();
        param = (/** @type {?} */ (serializer.deserialize(obj, ctxt)));
        param.id = obj['id'];
        param.index = (/** @type {?} */ (obj['index']));
        param.visible = (/** @type {?} */ (obj['visible']));
        param.readonly = (/** @type {?} */ (obj['readonly']));
        param.groupId = obj['groupId'];
        param.groupCode = obj['groupCode'];
        param.groupName = obj['groupName'];
        param.parameterTypeDesc = obj['parameterTypeDesc'];
        return param;
    };
    return BaseParameterSerializer;
}());
export { BaseParameterSerializer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1wYXJhbS1zZXJpYWxpemVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1jbXAvdWJjYy1wYXJhbS12by8iLCJzb3VyY2VzIjpbImxpYi92by9zZXJpYWxpemVyL3BhcmFtLXNlcmlhbHppZXIvYmFzZS1wYXJhbS1zZXJpYWxpemVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFzRCwwQkFBMEIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzNILE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUVyRTtJQUFBO0lBc0NBLENBQUM7Ozs7OztJQXJDRywyQ0FBUzs7Ozs7SUFBVCxVQUFVLEtBQWdCLEVBQUUsSUFBdUI7O1lBQzNDLElBQUksR0FBQyxJQUFJLE1BQU0sRUFBRTtRQUNyQixJQUFHLENBQUMsS0FBSyxFQUFDO1lBQ04sT0FBTyxJQUFJLENBQUM7U0FDZjs7WUFDRyxTQUFTLEdBQUMsbUJBQUEsS0FBSyxFQUFpQjs7WUFDaEMsVUFBVSxHQUFDLElBQUksMEJBQTBCLEVBQUU7UUFDL0MsSUFBSSxHQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO1FBQzlCLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDO1FBQ3BDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxHQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQztRQUN0RCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztRQUM1QixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDOzs7Ozs7SUFFRCw2Q0FBVzs7Ozs7SUFBWCxVQUFZLEdBQVcsRUFBRSxJQUF1QjtRQUM1QyxJQUFHLENBQUMsR0FBRyxFQUFDO1lBQ0osT0FBTyxJQUFJLENBQUM7U0FDZjs7WUFDRyxLQUFLLEdBQUMsSUFBSSxhQUFhLEVBQUU7O1lBQ3pCLFVBQVUsR0FBQyxJQUFJLDBCQUEwQixFQUFFO1FBQy9DLEtBQUssR0FBQyxtQkFBQSxVQUFVLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBQyxJQUFJLENBQUMsRUFBaUIsQ0FBQztRQUN4RCxLQUFLLENBQUMsRUFBRSxHQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuQixLQUFLLENBQUMsS0FBSyxHQUFDLG1CQUFBLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBVSxDQUFDO1FBQ25DLEtBQUssQ0FBQyxPQUFPLEdBQUMsbUJBQUEsR0FBRyxDQUFDLFNBQVMsQ0FBQyxFQUFXLENBQUM7UUFDeEMsS0FBSyxDQUFDLFFBQVEsR0FBQyxtQkFBQSxHQUFHLENBQUMsVUFBVSxDQUFDLEVBQVcsQ0FBQztRQUMxQyxLQUFLLENBQUMsT0FBTyxHQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM3QixLQUFLLENBQUMsU0FBUyxHQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNqQyxLQUFLLENBQUMsU0FBUyxHQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNqQyxLQUFLLENBQUMsaUJBQWlCLEdBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDakQsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUNMLDhCQUFDO0FBQUQsQ0FBQyxBQXRDRCxJQXNDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElQYXJhbWV0ZXJTZXJpYWxpemVyLCBQYXJhbWV0ZXIsIElTZXJpYWxpemVDb250ZXh0LCBEZWZhdWx0UGFyYW1ldGVyU2VyaWFsaXplciB9IGZyb20gJ0BlY3AtY2FmL2NvbW1vbi1zdHJ1Y3R1cmUnO1xyXG5pbXBvcnQgeyBCYXNlUGFyYW1ldGVyIH0gZnJvbSAnLi4vLi4vZXh0ZW5zaW9uL3BhcmFtZXRlci9iYXNlLXBhcmFtJztcclxuXHJcbmV4cG9ydCBjbGFzcyBCYXNlUGFyYW1ldGVyU2VyaWFsaXplciBpbXBsZW1lbnRzIElQYXJhbWV0ZXJTZXJpYWxpemVye1xyXG4gICAgc2VyaWFsaXplKHBhcmFtOiBQYXJhbWV0ZXIsIGN0eHQ6IElTZXJpYWxpemVDb250ZXh0KTogT2JqZWN0IHtcclxuICAgICAgICBsZXQgam9iaj1uZXcgT2JqZWN0KCk7XHJcbiAgICAgICAgaWYoIXBhcmFtKXtcclxuICAgICAgICAgICAgcmV0dXJuIGpvYmo7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBiYXNlUGFyYW09cGFyYW0gYXMgQmFzZVBhcmFtZXRlcjtcclxuICAgICAgICBsZXQgc2VyaWFsaXplcj1uZXcgRGVmYXVsdFBhcmFtZXRlclNlcmlhbGl6ZXIoKTtcclxuICAgICAgICBqb2JqPXNlcmlhbGl6ZXIuc2VyaWFsaXplKGJhc2VQYXJhbSxjdHh0KTtcclxuICAgICAgICBqb2JqWydpZCddPWJhc2VQYXJhbS5pZDtcclxuICAgICAgICBqb2JqWydpbmRleCddPWJhc2VQYXJhbS5pbmRleDtcclxuICAgICAgICBqb2JqWyd2aXNpYmxlJ109YmFzZVBhcmFtLnZpc2libGU7XHJcbiAgICAgICAgam9ialsncmVhZG9ubHknXT1iYXNlUGFyYW0ucmVhZG9ubHk7XHJcbiAgICAgICAgam9ialsnZ3JvdXBJZCddPWJhc2VQYXJhbS5ncm91cElkO1xyXG4gICAgICAgIGpvYmpbJ2dyb3VwQ29kZSddPWJhc2VQYXJhbS5ncm91cENvZGU7XHJcbiAgICAgICAgam9ialsnZ3JvdXBOYW1lJ109YmFzZVBhcmFtLmdyb3VwTmFtZTtcclxuICAgICAgICBqb2JqWydwYXJhbWV0ZXJUeXBlRGVzYyddPWJhc2VQYXJhbS5wYXJhbWV0ZXJUeXBlRGVzYztcclxuICAgICAgICBqb2JqWydraW5kJ109YmFzZVBhcmFtLmtpbmQ7XHJcbiAgICAgICAgcmV0dXJuIGpvYmo7XHJcbiAgICB9ICAgIFxyXG4gICAgXHJcbiAgICBkZXNlcmlhbGl6ZShvYmo6IE9iamVjdCwgY3R4dDogSVNlcmlhbGl6ZUNvbnRleHQpOlBhcmFtZXRlciB7XHJcbiAgICAgICAgaWYoIW9iail7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgcGFyYW09bmV3IEJhc2VQYXJhbWV0ZXIoKTtcclxuICAgICAgICBsZXQgc2VyaWFsaXplcj1uZXcgRGVmYXVsdFBhcmFtZXRlclNlcmlhbGl6ZXIoKTtcclxuICAgICAgICBwYXJhbT1zZXJpYWxpemVyLmRlc2VyaWFsaXplKG9iaixjdHh0KSBhcyBCYXNlUGFyYW1ldGVyO1xyXG4gICAgICAgIHBhcmFtLmlkPW9ialsnaWQnXTtcclxuICAgICAgICBwYXJhbS5pbmRleD1vYmpbJ2luZGV4J10gYXMgbnVtYmVyO1xyXG4gICAgICAgIHBhcmFtLnZpc2libGU9b2JqWyd2aXNpYmxlJ10gYXMgYm9vbGVhbjtcclxuICAgICAgICBwYXJhbS5yZWFkb25seT1vYmpbJ3JlYWRvbmx5J10gYXMgYm9vbGVhbjtcclxuICAgICAgICBwYXJhbS5ncm91cElkPW9ialsnZ3JvdXBJZCddO1xyXG4gICAgICAgIHBhcmFtLmdyb3VwQ29kZT1vYmpbJ2dyb3VwQ29kZSddO1xyXG4gICAgICAgIHBhcmFtLmdyb3VwTmFtZT1vYmpbJ2dyb3VwTmFtZSddO1xyXG4gICAgICAgIHBhcmFtLnBhcmFtZXRlclR5cGVEZXNjPW9ialsncGFyYW1ldGVyVHlwZURlc2MnXTtcclxuICAgICAgICByZXR1cm4gcGFyYW07XHJcbiAgICB9XHJcbn0iXX0=