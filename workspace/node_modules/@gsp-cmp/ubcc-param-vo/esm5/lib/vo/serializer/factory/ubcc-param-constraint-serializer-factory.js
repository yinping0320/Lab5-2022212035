/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/factory/ubcc-param-constraint-serializer-factory.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DefaultConstraintSerializer } from '@ecp-caf/common-structure';
import { ConstraintExtenionConst } from '../../../const/constraint-extension-const';
import { UbccIntegerConstraintSerializer } from '../constraint-serializer/integer-constraint-serializer';
import { UbccDecimalConstraintSerializer } from '../constraint-serializer/decimal-constraint-serializer';
import { UbccDateTimeConstraintSerializer } from '../constraint-serializer/date-time-constraint-serializer';
import { UbccStringConstraintSerializer } from '../constraint-serializer/string-constraint-serializer';
var UbccParamConstraintSerializerFactory = /** @class */ (function () {
    function UbccParamConstraintSerializerFactory() {
    }
    /**
     * @param {?} kind
     * @return {?}
     */
    UbccParamConstraintSerializerFactory.prototype.get = /**
     * @param {?} kind
     * @return {?}
     */
    function (kind) {
        switch (kind) {
            case ConstraintExtenionConst.UBCC_INTEGER_CONSTRAINT:
                return new UbccIntegerConstraintSerializer();
            case ConstraintExtenionConst.UBCC_DECIMAL_CONSTRAINT:
                return new UbccDecimalConstraintSerializer();
            case ConstraintExtenionConst.UBCC_STRING_CONSTRAINT:
                return new UbccStringConstraintSerializer();
            case ConstraintExtenionConst.UBCC_DATE_TIME_CONSTRAINT:
                return new UbccDateTimeConstraintSerializer();
            default:
                return new DefaultConstraintSerializer();
        }
    };
    return UbccParamConstraintSerializerFactory;
}());
export { UbccParamConstraintSerializerFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWJjYy1wYXJhbS1jb25zdHJhaW50LXNlcmlhbGl6ZXItZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3AtY21wL3ViY2MtcGFyYW0tdm8vIiwic291cmNlcyI6WyJsaWIvdm8vc2VyaWFsaXplci9mYWN0b3J5L3ViY2MtcGFyYW0tY29uc3RyYWludC1zZXJpYWxpemVyLWZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQXlCLDJCQUEyQixFQUFnQyxNQUFNLDJCQUEyQixDQUFDO0FBQzdILE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQ3BGLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLHdEQUF3RCxDQUFDO0FBQ3pHLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLHdEQUF3RCxDQUFDO0FBQ3pHLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLDBEQUEwRCxDQUFDO0FBQzVHLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLHVEQUF1RCxDQUFDO0FBRXZHO0lBQUE7SUFnQkEsQ0FBQzs7Ozs7SUFkRyxrREFBRzs7OztJQUFILFVBQUksSUFBWTtRQUNaLFFBQVEsSUFBSSxFQUFFO1lBQ1YsS0FBSyx1QkFBdUIsQ0FBQyx1QkFBdUI7Z0JBQ2hELE9BQU8sSUFBSSwrQkFBK0IsRUFBRSxDQUFDO1lBQ2pELEtBQUssdUJBQXVCLENBQUMsdUJBQXVCO2dCQUNoRCxPQUFPLElBQUksK0JBQStCLEVBQUUsQ0FBQztZQUNqRCxLQUFLLHVCQUF1QixDQUFDLHNCQUFzQjtnQkFDL0MsT0FBTyxJQUFJLDhCQUE4QixFQUFFLENBQUM7WUFDaEQsS0FBSyx1QkFBdUIsQ0FBQyx5QkFBeUI7Z0JBQ2xELE9BQU8sSUFBSSxnQ0FBZ0MsRUFBRSxDQUFDO1lBQ2xEO2dCQUNJLE9BQU8sSUFBSSwyQkFBMkIsRUFBRSxDQUFDO1NBQ2hEO0lBQ0wsQ0FBQztJQUNMLDJDQUFDO0FBQUQsQ0FBQyxBQWhCRCxJQWdCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElDb25zdHJhaW50U2VyaWFsaXplciwgRGVmYXVsdENvbnN0cmFpbnRTZXJpYWxpemVyLCBJQ29uc3RyYWludFNlcmlhbGl6ZXJGYWN0b3J5IH0gZnJvbSAnQGVjcC1jYWYvY29tbW9uLXN0cnVjdHVyZSc7XHJcbmltcG9ydCB7IENvbnN0cmFpbnRFeHRlbmlvbkNvbnN0IH0gZnJvbSAnLi4vLi4vLi4vY29uc3QvY29uc3RyYWludC1leHRlbnNpb24tY29uc3QnO1xyXG5pbXBvcnQgeyBVYmNjSW50ZWdlckNvbnN0cmFpbnRTZXJpYWxpemVyIH0gZnJvbSAnLi4vY29uc3RyYWludC1zZXJpYWxpemVyL2ludGVnZXItY29uc3RyYWludC1zZXJpYWxpemVyJztcclxuaW1wb3J0IHsgVWJjY0RlY2ltYWxDb25zdHJhaW50U2VyaWFsaXplciB9IGZyb20gJy4uL2NvbnN0cmFpbnQtc2VyaWFsaXplci9kZWNpbWFsLWNvbnN0cmFpbnQtc2VyaWFsaXplcic7XHJcbmltcG9ydCB7IFViY2NEYXRlVGltZUNvbnN0cmFpbnRTZXJpYWxpemVyIH0gZnJvbSAnLi4vY29uc3RyYWludC1zZXJpYWxpemVyL2RhdGUtdGltZS1jb25zdHJhaW50LXNlcmlhbGl6ZXInO1xyXG5pbXBvcnQgeyBVYmNjU3RyaW5nQ29uc3RyYWludFNlcmlhbGl6ZXIgfSBmcm9tICcuLi9jb25zdHJhaW50LXNlcmlhbGl6ZXIvc3RyaW5nLWNvbnN0cmFpbnQtc2VyaWFsaXplcic7XHJcblxyXG5leHBvcnQgY2xhc3MgVWJjY1BhcmFtQ29uc3RyYWludFNlcmlhbGl6ZXJGYWN0b3J5IGltcGxlbWVudHMgSUNvbnN0cmFpbnRTZXJpYWxpemVyRmFjdG9yeSB7XHJcblxyXG4gICAgZ2V0KGtpbmQ6IHN0cmluZyk6IElDb25zdHJhaW50U2VyaWFsaXplciB7XHJcbiAgICAgICAgc3dpdGNoIChraW5kKSB7XHJcbiAgICAgICAgICAgIGNhc2UgQ29uc3RyYWludEV4dGVuaW9uQ29uc3QuVUJDQ19JTlRFR0VSX0NPTlNUUkFJTlQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFViY2NJbnRlZ2VyQ29uc3RyYWludFNlcmlhbGl6ZXIoKTtcclxuICAgICAgICAgICAgY2FzZSBDb25zdHJhaW50RXh0ZW5pb25Db25zdC5VQkNDX0RFQ0lNQUxfQ09OU1RSQUlOVDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVWJjY0RlY2ltYWxDb25zdHJhaW50U2VyaWFsaXplcigpO1xyXG4gICAgICAgICAgICBjYXNlIENvbnN0cmFpbnRFeHRlbmlvbkNvbnN0LlVCQ0NfU1RSSU5HX0NPTlNUUkFJTlQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFViY2NTdHJpbmdDb25zdHJhaW50U2VyaWFsaXplcigpO1xyXG4gICAgICAgICAgICBjYXNlIENvbnN0cmFpbnRFeHRlbmlvbkNvbnN0LlVCQ0NfREFURV9USU1FX0NPTlNUUkFJTlQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFViY2NEYXRlVGltZUNvbnN0cmFpbnRTZXJpYWxpemVyKCk7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERlZmF1bHRDb25zdHJhaW50U2VyaWFsaXplcigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==