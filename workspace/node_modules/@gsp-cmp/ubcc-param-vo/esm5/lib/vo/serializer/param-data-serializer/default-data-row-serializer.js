/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/param-data-serializer/default-data-row-serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DefaultDataRow } from '../../param-data-vo/default-data-row';
import { DataItem } from '../../param-data-vo/data-item';
var DefaultDataRowSerializer = /** @class */ (function () {
    function DefaultDataRowSerializer() {
    }
    /**
     * @param {?} dataRow
     * @return {?}
     */
    DefaultDataRowSerializer.prototype.serialize = /**
     * @param {?} dataRow
     * @return {?}
     */
    function (dataRow) {
        /** @type {?} */
        var jobj = new Object();
        if (!dataRow) {
            return null;
        }
        /** @type {?} */
        var defaultDataRow = (/** @type {?} */ (dataRow));
        jobj['id'] = defaultDataRow.id;
        jobj['kind'] = defaultDataRow.kind;
        if (defaultDataRow.paramItems) {
            jobj['paramItems'] = [];
            defaultDataRow.paramItems.forEach((/**
             * @param {?} paramItem
             * @return {?}
             */
            function (paramItem) {
                jobj['paramItems'] = paramItem;
            }));
        }
        return jobj;
    };
    /**
     * @param {?} jobj
     * @return {?}
     */
    DefaultDataRowSerializer.prototype.deserialize = /**
     * @param {?} jobj
     * @return {?}
     */
    function (jobj) {
        if (!jobj) {
            return null;
        }
        /** @type {?} */
        var dataRow = new DefaultDataRow();
        dataRow.id = jobj['id'];
        if (jobj['paramItems']) {
            dataRow.paramItems = new Array();
            jobj['paramItems'].forEach((/**
             * @param {?} paramItemJobj
             * @return {?}
             */
            function (paramItemJobj) {
                dataRow.paramItems.push(Object.assign(new DataItem(), paramItemJobj));
            }));
        }
        return dataRow;
    };
    return DefaultDataRowSerializer;
}());
export { DefaultDataRowSerializer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1kYXRhLXJvdy1zZXJpYWxpemVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1jbXAvdWJjYy1wYXJhbS12by8iLCJzb3VyY2VzIjpbImxpYi92by9zZXJpYWxpemVyL3BhcmFtLWRhdGEtc2VyaWFsaXplci9kZWZhdWx0LWRhdGEtcm93LXNlcmlhbGl6ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFFdEUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBR3pEO0lBQUE7SUFpQ0EsQ0FBQzs7Ozs7SUEvQkcsNENBQVM7Ozs7SUFBVCxVQUFVLE9BQWU7O1lBQ2pCLElBQUksR0FBQyxJQUFJLE1BQU0sRUFBRTtRQUNyQixJQUFHLENBQUMsT0FBTyxFQUFDO1lBQ1IsT0FBTyxJQUFJLENBQUM7U0FDZjs7WUFDRyxjQUFjLEdBQUMsbUJBQUEsT0FBTyxFQUFrQjtRQUM1QyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQztRQUM3QixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUMsY0FBYyxDQUFDLElBQUksQ0FBQztRQUNqQyxJQUFHLGNBQWMsQ0FBQyxVQUFVLEVBQUM7WUFDekIsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFDLEVBQUUsQ0FBQztZQUN0QixjQUFjLENBQUMsVUFBVSxDQUFDLE9BQU87Ozs7WUFBQyxVQUFBLFNBQVM7Z0JBQ3ZDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBQyxTQUFTLENBQUM7WUFDakMsQ0FBQyxFQUFDLENBQUM7U0FDTjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7Ozs7O0lBRUQsOENBQVc7Ozs7SUFBWCxVQUFZLElBQVc7UUFDbkIsSUFBRyxDQUFDLElBQUksRUFBQztZQUNMLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7O1lBQ0csT0FBTyxHQUFDLElBQUksY0FBYyxFQUFFO1FBQ2hDLE9BQU8sQ0FBQyxFQUFFLEdBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3RCLElBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFDO1lBQ2xCLE9BQU8sQ0FBQyxVQUFVLEdBQUMsSUFBSSxLQUFLLEVBQVksQ0FBQztZQUN6QyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTzs7OztZQUFDLFVBQUEsYUFBYTtnQkFDcEMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7WUFDekUsQ0FBQyxFQUFDLENBQUM7U0FDTjtRQUNELE9BQU8sT0FBTyxDQUFDO0lBQ25CLENBQUM7SUFDTCwrQkFBQztBQUFELENBQUMsQUFqQ0QsSUFpQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEZWZhdWx0RGF0YVJvdyB9IGZyb20gJy4uLy4uL3BhcmFtLWRhdGEtdm8vZGVmYXVsdC1kYXRhLXJvdyc7XHJcbmltcG9ydCB7IERhdGFSb3cgfSBmcm9tICcuLi8uLi9wYXJhbS1kYXRhLXZvL2RhdGEtcm93JztcclxuaW1wb3J0IHsgRGF0YUl0ZW0gfSBmcm9tICcuLi8uLi9wYXJhbS1kYXRhLXZvL2RhdGEtaXRlbSc7XHJcbmltcG9ydCB7IElEYXRhUm93U2VyaWFsaXplciB9IGZyb20gJy4vaS1kYXRhLXJvdy1zZXJpYWxpemVyJztcclxuXHJcbmV4cG9ydCBjbGFzcyBEZWZhdWx0RGF0YVJvd1NlcmlhbGl6ZXIgaW1wbGVtZW50cyBJRGF0YVJvd1NlcmlhbGl6ZXJ7XHJcblxyXG4gICAgc2VyaWFsaXplKGRhdGFSb3c6RGF0YVJvdyk6T2JqZWN0e1xyXG4gICAgICAgIGxldCBqb2JqPW5ldyBPYmplY3QoKTtcclxuICAgICAgICBpZighZGF0YVJvdyl7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgZGVmYXVsdERhdGFSb3c9ZGF0YVJvdyBhcyBEZWZhdWx0RGF0YVJvdztcclxuICAgICAgICBqb2JqWydpZCddPWRlZmF1bHREYXRhUm93LmlkO1xyXG4gICAgICAgIGpvYmpbJ2tpbmQnXT1kZWZhdWx0RGF0YVJvdy5raW5kO1xyXG4gICAgICAgIGlmKGRlZmF1bHREYXRhUm93LnBhcmFtSXRlbXMpe1xyXG4gICAgICAgICAgICBqb2JqWydwYXJhbUl0ZW1zJ109W107XHJcbiAgICAgICAgICAgIGRlZmF1bHREYXRhUm93LnBhcmFtSXRlbXMuZm9yRWFjaChwYXJhbUl0ZW0gPT4ge1xyXG4gICAgICAgICAgICAgICAgam9ialsncGFyYW1JdGVtcyddPXBhcmFtSXRlbTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBqb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIGRlc2VyaWFsaXplKGpvYmo6T2JqZWN0KTpEYXRhUm93e1xyXG4gICAgICAgIGlmKCFqb2JqKXtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBkYXRhUm93PW5ldyBEZWZhdWx0RGF0YVJvdygpO1xyXG4gICAgICAgIGRhdGFSb3cuaWQ9am9ialsnaWQnXTtcclxuICAgICAgICBpZihqb2JqWydwYXJhbUl0ZW1zJ10pe1xyXG4gICAgICAgICAgICBkYXRhUm93LnBhcmFtSXRlbXM9bmV3IEFycmF5PERhdGFJdGVtPigpO1xyXG4gICAgICAgICAgICBqb2JqWydwYXJhbUl0ZW1zJ10uZm9yRWFjaChwYXJhbUl0ZW1Kb2JqID0+IHtcclxuICAgICAgICAgICAgICAgIGRhdGFSb3cucGFyYW1JdGVtcy5wdXNoKE9iamVjdC5hc3NpZ24obmV3IERhdGFJdGVtKCkscGFyYW1JdGVtSm9iaikpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGRhdGFSb3c7XHJcbiAgICB9XHJcbn0iXX0=