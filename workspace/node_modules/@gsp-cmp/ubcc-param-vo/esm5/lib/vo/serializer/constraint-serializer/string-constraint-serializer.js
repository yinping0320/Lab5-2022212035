/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/constraint-serializer/string-constraint-serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { UbccStringConstraint } from '../../extension/constraint/ubcc-string-constaint';
var UbccStringConstraintSerializer = /** @class */ (function () {
    function UbccStringConstraintSerializer() {
    }
    /**
     * @param {?} constraint
     * @param {?} ctxt
     * @return {?}
     */
    UbccStringConstraintSerializer.prototype.serialize = /**
     * @param {?} constraint
     * @param {?} ctxt
     * @return {?}
     */
    function (constraint, ctxt) {
        /** @type {?} */
        var jobj = new Object();
        if (!constraint) {
            return jobj;
        }
        /** @type {?} */
        var stringConstraint = (/** @type {?} */ (constraint));
        jobj['kind'] = stringConstraint.kind;
        jobj['maxLength'] = stringConstraint.maxLength;
        jobj['minLength'] = stringConstraint.minLength;
        jobj['regexExpress'] = stringConstraint.regexExpress;
        return jobj;
    };
    /**
     * @param {?} jobj
     * @param {?} ctxt
     * @return {?}
     */
    UbccStringConstraintSerializer.prototype.deserialize = /**
     * @param {?} jobj
     * @param {?} ctxt
     * @return {?}
     */
    function (jobj, ctxt) {
        if (!jobj) {
            return null;
        }
        /** @type {?} */
        var constaint = new UbccStringConstraint();
        constaint.maxLength = (/** @type {?} */ (jobj['maxLength']));
        constaint.minLength = (/** @type {?} */ (jobj['minLength']));
        constaint.regexExpress = jobj['regexExpress'];
        return constaint;
    };
    return UbccStringConstraintSerializer;
}());
export { UbccStringConstraintSerializer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5nLWNvbnN0cmFpbnQtc2VyaWFsaXplci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3AtY21wL3ViY2MtcGFyYW0tdm8vIiwic291cmNlcyI6WyJsaWIvdm8vc2VyaWFsaXplci9jb25zdHJhaW50LXNlcmlhbGl6ZXIvc3RyaW5nLWNvbnN0cmFpbnQtc2VyaWFsaXplci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBRXhGO0lBQUE7SUEwQkEsQ0FBQzs7Ozs7O0lBeEJHLGtEQUFTOzs7OztJQUFULFVBQVUsVUFBc0IsRUFBQyxJQUF1Qjs7WUFDaEQsSUFBSSxHQUFDLElBQUksTUFBTSxFQUFFO1FBQ3JCLElBQUcsQ0FBQyxVQUFVLEVBQUM7WUFDWCxPQUFPLElBQUksQ0FBQztTQUNmOztZQUNHLGdCQUFnQixHQUFDLG1CQUFBLFVBQVUsRUFBd0I7UUFDdkQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQztRQUNuQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDO1FBQzdDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUM7UUFDN0MsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQztRQUNuRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDOzs7Ozs7SUFFRCxvREFBVzs7Ozs7SUFBWCxVQUFZLElBQVcsRUFBQyxJQUF1QjtRQUMzQyxJQUFHLENBQUMsSUFBSSxFQUFDO1lBQ0wsT0FBTyxJQUFJLENBQUM7U0FDZjs7WUFDRyxTQUFTLEdBQUMsSUFBSSxvQkFBb0IsRUFBRTtRQUN4QyxTQUFTLENBQUMsU0FBUyxHQUFDLG1CQUFBLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBVSxDQUFDO1FBQ2hELFNBQVMsQ0FBQyxTQUFTLEdBQUMsbUJBQUEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFVLENBQUM7UUFDaEQsU0FBUyxDQUFDLFlBQVksR0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDNUMsT0FBTyxTQUFTLENBQUM7SUFDckIsQ0FBQztJQUVMLHFDQUFDO0FBQUQsQ0FBQyxBQTFCRCxJQTBCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElDb25zdHJhaW50LCBJQ29uc3RyYWludFNlcmlhbGl6ZXIsIElTZXJpYWxpemVDb250ZXh0IH0gZnJvbSAnQGVjcC1jYWYvY29tbW9uLXN0cnVjdHVyZSc7XHJcbmltcG9ydCB7IFViY2NTdHJpbmdDb25zdHJhaW50IH0gZnJvbSAnLi4vLi4vZXh0ZW5zaW9uL2NvbnN0cmFpbnQvdWJjYy1zdHJpbmctY29uc3RhaW50JztcclxuXHJcbmV4cG9ydCBjbGFzcyBVYmNjU3RyaW5nQ29uc3RyYWludFNlcmlhbGl6ZXIgaW1wbGVtZW50cyBJQ29uc3RyYWludFNlcmlhbGl6ZXJ7XHJcblxyXG4gICAgc2VyaWFsaXplKGNvbnN0cmFpbnQ6SUNvbnN0cmFpbnQsY3R4dDogSVNlcmlhbGl6ZUNvbnRleHQpOk9iamVjdHtcclxuICAgICAgICBsZXQgam9iaj1uZXcgT2JqZWN0KCk7XHJcbiAgICAgICAgaWYoIWNvbnN0cmFpbnQpe1xyXG4gICAgICAgICAgICByZXR1cm4gam9iajtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHN0cmluZ0NvbnN0cmFpbnQ9Y29uc3RyYWludCBhcyBVYmNjU3RyaW5nQ29uc3RyYWludDtcclxuICAgICAgICBqb2JqWydraW5kJ109c3RyaW5nQ29uc3RyYWludC5raW5kO1xyXG4gICAgICAgIGpvYmpbJ21heExlbmd0aCddPXN0cmluZ0NvbnN0cmFpbnQubWF4TGVuZ3RoO1xyXG4gICAgICAgIGpvYmpbJ21pbkxlbmd0aCddPXN0cmluZ0NvbnN0cmFpbnQubWluTGVuZ3RoO1xyXG4gICAgICAgIGpvYmpbJ3JlZ2V4RXhwcmVzcyddPXN0cmluZ0NvbnN0cmFpbnQucmVnZXhFeHByZXNzO1xyXG4gICAgICAgIHJldHVybiBqb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIGRlc2VyaWFsaXplKGpvYmo6T2JqZWN0LGN0eHQ6IElTZXJpYWxpemVDb250ZXh0KTpJQ29uc3RyYWludHtcclxuICAgICAgICBpZigham9iail7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgY29uc3RhaW50PW5ldyBVYmNjU3RyaW5nQ29uc3RyYWludCgpO1xyXG4gICAgICAgIGNvbnN0YWludC5tYXhMZW5ndGg9am9ialsnbWF4TGVuZ3RoJ10gYXMgbnVtYmVyO1xyXG4gICAgICAgIGNvbnN0YWludC5taW5MZW5ndGg9am9ialsnbWluTGVuZ3RoJ10gYXMgbnVtYmVyO1xyXG4gICAgICAgIGNvbnN0YWludC5yZWdleEV4cHJlc3M9am9ialsncmVnZXhFeHByZXNzJ107XHJcbiAgICAgICAgcmV0dXJuIGNvbnN0YWludDtcclxuICAgIH1cclxuXHJcbn0iXX0=