/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/param-serialzier/item-category-param-serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ItemCategoryParam } from '../../extension/parameter/item-category-param';
import { BaseParameterSerializer } from './base-param-serializer';
var ItemCategoryParamSerializer = /** @class */ (function () {
    function ItemCategoryParamSerializer() {
    }
    /**
     * @param {?} param
     * @param {?} ctxt
     * @return {?}
     */
    ItemCategoryParamSerializer.prototype.serialize = /**
     * @param {?} param
     * @param {?} ctxt
     * @return {?}
     */
    function (param, ctxt) {
        /** @type {?} */
        var jobj = new Object();
        if (!param) {
            return jobj;
        }
        /** @type {?} */
        var itemCategoryParam = (/** @type {?} */ (param));
        /** @type {?} */
        var serializer = new BaseParameterSerializer();
        jobj = serializer.serialize(itemCategoryParam, ctxt);
        jobj['kind'] = itemCategoryParam.kind;
        return jobj;
    };
    /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    ItemCategoryParamSerializer.prototype.deserialize = /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    function (obj, ctxt) {
        if (!obj) {
            return null;
        }
        /** @type {?} */
        var param = new ItemCategoryParam();
        /** @type {?} */
        var serializer = new BaseParameterSerializer();
        param = (/** @type {?} */ (serializer.deserialize(obj, ctxt)));
        return param;
    };
    return ItemCategoryParamSerializer;
}());
export { ItemCategoryParamSerializer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbS1jYXRlZ29yeS1wYXJhbS1zZXJpYWxpemVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1jbXAvdWJjYy1wYXJhbS12by8iLCJzb3VyY2VzIjpbImxpYi92by9zZXJpYWxpemVyL3BhcmFtLXNlcmlhbHppZXIvaXRlbS1jYXRlZ29yeS1wYXJhbS1zZXJpYWxpemVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sK0NBQStDLENBQUM7QUFDbEYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFbEU7SUFBQTtJQXVCQSxDQUFDOzs7Ozs7SUFyQkcsK0NBQVM7Ozs7O0lBQVQsVUFBVSxLQUFnQixFQUFFLElBQXVCOztZQUMzQyxJQUFJLEdBQUMsSUFBSSxNQUFNLEVBQUU7UUFDckIsSUFBRyxDQUFDLEtBQUssRUFBQztZQUNOLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7O1lBQ0csaUJBQWlCLEdBQUMsbUJBQUEsS0FBSyxFQUFxQjs7WUFDNUMsVUFBVSxHQUFDLElBQUksdUJBQXVCLEVBQUU7UUFDNUMsSUFBSSxHQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsaUJBQWlCLEVBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQztRQUNwQyxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDOzs7Ozs7SUFFRCxpREFBVzs7Ozs7SUFBWCxVQUFZLEdBQVcsRUFBRSxJQUF1QjtRQUM1QyxJQUFHLENBQUMsR0FBRyxFQUFDO1lBQ0osT0FBTyxJQUFJLENBQUM7U0FDZjs7WUFDRyxLQUFLLEdBQUMsSUFBSSxpQkFBaUIsRUFBRTs7WUFDN0IsVUFBVSxHQUFDLElBQUksdUJBQXVCLEVBQUU7UUFDNUMsS0FBSyxHQUFDLG1CQUFBLFVBQVUsQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFDLElBQUksQ0FBQyxFQUFxQixDQUFDO1FBQzVELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFDTCxrQ0FBQztBQUFELENBQUMsQUF2QkQsSUF1QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJUGFyYW1ldGVyU2VyaWFsaXplciwgUGFyYW1ldGVyLCBJU2VyaWFsaXplQ29udGV4dCB9IGZyb20gJ0BlY3AtY2FmL2NvbW1vbi1zdHJ1Y3R1cmUnO1xyXG5pbXBvcnQgeyBJdGVtQ2F0ZWdvcnlQYXJhbSB9IGZyb20gJy4uLy4uL2V4dGVuc2lvbi9wYXJhbWV0ZXIvaXRlbS1jYXRlZ29yeS1wYXJhbSc7XHJcbmltcG9ydCB7IEJhc2VQYXJhbWV0ZXJTZXJpYWxpemVyIH0gZnJvbSAnLi9iYXNlLXBhcmFtLXNlcmlhbGl6ZXInO1xyXG5cclxuZXhwb3J0IGNsYXNzIEl0ZW1DYXRlZ29yeVBhcmFtU2VyaWFsaXplciBpbXBsZW1lbnRzIElQYXJhbWV0ZXJTZXJpYWxpemVye1xyXG4gICAgXHJcbiAgICBzZXJpYWxpemUocGFyYW06IFBhcmFtZXRlciwgY3R4dDogSVNlcmlhbGl6ZUNvbnRleHQpOiBPYmplY3Qge1xyXG4gICAgICAgIGxldCBqb2JqPW5ldyBPYmplY3QoKTtcclxuICAgICAgICBpZighcGFyYW0pe1xyXG4gICAgICAgICAgICByZXR1cm4gam9iajtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGl0ZW1DYXRlZ29yeVBhcmFtPXBhcmFtIGFzIEl0ZW1DYXRlZ29yeVBhcmFtO1xyXG4gICAgICAgIGxldCBzZXJpYWxpemVyPW5ldyBCYXNlUGFyYW1ldGVyU2VyaWFsaXplcigpO1xyXG4gICAgICAgIGpvYmo9c2VyaWFsaXplci5zZXJpYWxpemUoaXRlbUNhdGVnb3J5UGFyYW0sY3R4dCk7XHJcbiAgICAgICAgam9ialsna2luZCddPWl0ZW1DYXRlZ29yeVBhcmFtLmtpbmQ7XHJcbiAgICAgICAgcmV0dXJuIGpvYmo7XHJcbiAgICB9ICAgIFxyXG4gICAgXHJcbiAgICBkZXNlcmlhbGl6ZShvYmo6IE9iamVjdCwgY3R4dDogSVNlcmlhbGl6ZUNvbnRleHQpOlBhcmFtZXRlciB7XHJcbiAgICAgICAgaWYoIW9iail7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgcGFyYW09bmV3IEl0ZW1DYXRlZ29yeVBhcmFtKCk7XHJcbiAgICAgICAgbGV0IHNlcmlhbGl6ZXI9bmV3IEJhc2VQYXJhbWV0ZXJTZXJpYWxpemVyKCk7XHJcbiAgICAgICAgcGFyYW09c2VyaWFsaXplci5kZXNlcmlhbGl6ZShvYmosY3R4dCkgYXMgSXRlbUNhdGVnb3J5UGFyYW07XHJcbiAgICAgICAgcmV0dXJuIHBhcmFtO1xyXG4gICAgfVxyXG59Il19