/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/constraint-serializer/decimal-constraint-serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { UbccDecimalConstraint } from '../../extension/constraint/ubcc-decimal-constraint';
var UbccDecimalConstraintSerializer = /** @class */ (function () {
    function UbccDecimalConstraintSerializer() {
    }
    /**
     * @param {?} constraint
     * @param {?} ctxt
     * @return {?}
     */
    UbccDecimalConstraintSerializer.prototype.serialize = /**
     * @param {?} constraint
     * @param {?} ctxt
     * @return {?}
     */
    function (constraint, ctxt) {
        /** @type {?} */
        var jobj = new Object();
        if (!constraint) {
            return jobj;
        }
        /** @type {?} */
        var decimalConstraint = (/** @type {?} */ (constraint));
        jobj['kind'] = decimalConstraint.kind;
        jobj['max'] = decimalConstraint.max;
        jobj['min'] = decimalConstraint.min;
        jobj['precision'] = decimalConstraint.precision;
        jobj['unit'] = decimalConstraint.unit;
        return jobj;
    };
    /**
     * @param {?} jobj
     * @param {?} ctxt
     * @return {?}
     */
    UbccDecimalConstraintSerializer.prototype.deserialize = /**
     * @param {?} jobj
     * @param {?} ctxt
     * @return {?}
     */
    function (jobj, ctxt) {
        if (!jobj) {
            return null;
        }
        /** @type {?} */
        var decimalConstraint = new UbccDecimalConstraint();
        decimalConstraint.max = (/** @type {?} */ (jobj['max']));
        decimalConstraint.min = (/** @type {?} */ (jobj['min']));
        decimalConstraint.precision = (/** @type {?} */ (jobj['precision']));
        decimalConstraint.unit = jobj['unit'];
        return decimalConstraint;
    };
    return UbccDecimalConstraintSerializer;
}());
export { UbccDecimalConstraintSerializer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjaW1hbC1jb25zdHJhaW50LXNlcmlhbGl6ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLWNtcC91YmNjLXBhcmFtLXZvLyIsInNvdXJjZXMiOlsibGliL3ZvL3NlcmlhbGl6ZXIvY29uc3RyYWludC1zZXJpYWxpemVyL2RlY2ltYWwtY29uc3RyYWludC1zZXJpYWxpemVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sb0RBQW9ELENBQUM7QUFHM0Y7SUFBQTtJQTJCQSxDQUFDOzs7Ozs7SUF6QkcsbURBQVM7Ozs7O0lBQVQsVUFBVSxVQUFzQixFQUFDLElBQXVCOztZQUNoRCxJQUFJLEdBQUMsSUFBSSxNQUFNLEVBQUU7UUFDckIsSUFBRyxDQUFDLFVBQVUsRUFBQztZQUNYLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7O1lBQ0csaUJBQWlCLEdBQUMsbUJBQUEsVUFBVSxFQUF5QjtRQUN6RCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDO1FBQ3BDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUM7UUFDbEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQztRQUNsQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDO1FBQzlDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUM7UUFDcEMsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQzs7Ozs7O0lBRUQscURBQVc7Ozs7O0lBQVgsVUFBWSxJQUFXLEVBQUMsSUFBdUI7UUFDM0MsSUFBRyxDQUFDLElBQUksRUFBQztZQUNMLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7O1lBQ0csaUJBQWlCLEdBQUMsSUFBSSxxQkFBcUIsRUFBRTtRQUNqRCxpQkFBaUIsQ0FBQyxHQUFHLEdBQUMsbUJBQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFVLENBQUM7UUFDNUMsaUJBQWlCLENBQUMsR0FBRyxHQUFDLG1CQUFBLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBVSxDQUFDO1FBQzVDLGlCQUFpQixDQUFDLFNBQVMsR0FBQyxtQkFBQSxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQVUsQ0FBQztRQUN4RCxpQkFBaUIsQ0FBQyxJQUFJLEdBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3BDLE9BQU8saUJBQWlCLENBQUM7SUFDN0IsQ0FBQztJQUNMLHNDQUFDO0FBQUQsQ0FBQyxBQTNCRCxJQTJCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFViY2NEZWNpbWFsQ29uc3RyYWludCB9IGZyb20gJy4uLy4uL2V4dGVuc2lvbi9jb25zdHJhaW50L3ViY2MtZGVjaW1hbC1jb25zdHJhaW50JztcclxuaW1wb3J0IHsgSUNvbnN0cmFpbnQsIElDb25zdHJhaW50U2VyaWFsaXplciwgSVNlcmlhbGl6ZUNvbnRleHQgfSBmcm9tICdAZWNwLWNhZi9jb21tb24tc3RydWN0dXJlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBVYmNjRGVjaW1hbENvbnN0cmFpbnRTZXJpYWxpemVyIGltcGxlbWVudHMgSUNvbnN0cmFpbnRTZXJpYWxpemVye1xyXG4gICAgXHJcbiAgICBzZXJpYWxpemUoY29uc3RyYWludDpJQ29uc3RyYWludCxjdHh0OiBJU2VyaWFsaXplQ29udGV4dCk6T2JqZWN0e1xyXG4gICAgICAgIGxldCBqb2JqPW5ldyBPYmplY3QoKTtcclxuICAgICAgICBpZighY29uc3RyYWludCl7XHJcbiAgICAgICAgICAgIHJldHVybiBqb2JqO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgZGVjaW1hbENvbnN0cmFpbnQ9Y29uc3RyYWludCBhcyBVYmNjRGVjaW1hbENvbnN0cmFpbnQ7XHJcbiAgICAgICAgam9ialsna2luZCddPWRlY2ltYWxDb25zdHJhaW50LmtpbmQ7XHJcbiAgICAgICAgam9ialsnbWF4J109ZGVjaW1hbENvbnN0cmFpbnQubWF4O1xyXG4gICAgICAgIGpvYmpbJ21pbiddPWRlY2ltYWxDb25zdHJhaW50Lm1pbjtcclxuICAgICAgICBqb2JqWydwcmVjaXNpb24nXT1kZWNpbWFsQ29uc3RyYWludC5wcmVjaXNpb247XHJcbiAgICAgICAgam9ialsndW5pdCddPWRlY2ltYWxDb25zdHJhaW50LnVuaXQ7XHJcbiAgICAgICAgcmV0dXJuIGpvYmo7XHJcbiAgICB9XHJcblxyXG4gICAgZGVzZXJpYWxpemUoam9iajpPYmplY3QsY3R4dDogSVNlcmlhbGl6ZUNvbnRleHQpOklDb25zdHJhaW50e1xyXG4gICAgICAgIGlmKCFqb2JqKXtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBkZWNpbWFsQ29uc3RyYWludD1uZXcgVWJjY0RlY2ltYWxDb25zdHJhaW50KCk7XHJcbiAgICAgICAgZGVjaW1hbENvbnN0cmFpbnQubWF4PWpvYmpbJ21heCddIGFzIG51bWJlcjtcclxuICAgICAgICBkZWNpbWFsQ29uc3RyYWludC5taW49am9ialsnbWluJ10gYXMgbnVtYmVyO1xyXG4gICAgICAgIGRlY2ltYWxDb25zdHJhaW50LnByZWNpc2lvbj1qb2JqWydwcmVjaXNpb24nXSBhcyBudW1iZXI7XHJcbiAgICAgICAgZGVjaW1hbENvbnN0cmFpbnQudW5pdD1qb2JqWyd1bml0J107XHJcbiAgICAgICAgcmV0dXJuIGRlY2ltYWxDb25zdHJhaW50O1xyXG4gICAgfVxyXG59Il19