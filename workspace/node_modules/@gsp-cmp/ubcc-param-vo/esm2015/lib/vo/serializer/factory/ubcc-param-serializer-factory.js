/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/factory/ubcc-param-serializer-factory.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DefaultParameterSerializer, } from '@ecp-caf/common-structure';
import { ParamExtensionConst } from '../../../const/parameter-extension-const';
import { ItemCategoryParamSerializer } from '../param-serialzier/item-category-param-serializer';
import { BaseParameterSerializer } from '../param-serialzier/base-param-serializer';
export class UbccParamSerializerFactory {
    /**
     * @param {?} kind
     * @return {?}
     */
    get(kind) {
        switch (kind) {
            case ParamExtensionConst.BASE_PARAM:
                return new BaseParameterSerializer();
            case ParamExtensionConst.ITEM_CATEGORY_PARAM:
                return new ItemCategoryParamSerializer();
            default:
                return new DefaultParameterSerializer();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWJjYy1wYXJhbS1zZXJpYWxpemVyLWZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLWNtcC91YmNjLXBhcmFtLXZvLyIsInNvdXJjZXMiOlsibGliL3ZvL3NlcmlhbGl6ZXIvZmFjdG9yeS91YmNjLXBhcmFtLXNlcmlhbGl6ZXItZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBK0IsMEJBQTBCLEdBQXlCLE1BQU0sMkJBQTJCLENBQUM7QUFDM0gsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDL0UsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sb0RBQW9ELENBQUM7QUFDakcsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFFcEYsTUFBTSxPQUFPLDBCQUEwQjs7Ozs7SUFFbkMsR0FBRyxDQUFDLElBQVk7UUFDWixRQUFPLElBQUksRUFBQztZQUNSLEtBQUssbUJBQW1CLENBQUMsVUFBVTtnQkFDL0IsT0FBTyxJQUFJLHVCQUF1QixFQUFFLENBQUM7WUFDekMsS0FBSyxtQkFBbUIsQ0FBQyxtQkFBbUI7Z0JBQ3hDLE9BQU8sSUFBSSwyQkFBMkIsRUFBRSxDQUFDO1lBQzdDO2dCQUNJLE9BQU8sSUFBSSwwQkFBMEIsRUFBRSxDQUFDO1NBQy9DO0lBQ0wsQ0FBQztDQUVKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVBhcmFtZXRlclNlcmlhbGl6ZXJGYWN0b3J5LCBEZWZhdWx0UGFyYW1ldGVyU2VyaWFsaXplciwgSVBhcmFtZXRlclNlcmlhbGl6ZXIsIH0gZnJvbSAnQGVjcC1jYWYvY29tbW9uLXN0cnVjdHVyZSc7XHJcbmltcG9ydCB7IFBhcmFtRXh0ZW5zaW9uQ29uc3QgfSBmcm9tICcuLi8uLi8uLi9jb25zdC9wYXJhbWV0ZXItZXh0ZW5zaW9uLWNvbnN0JztcclxuaW1wb3J0IHsgSXRlbUNhdGVnb3J5UGFyYW1TZXJpYWxpemVyIH0gZnJvbSAnLi4vcGFyYW0tc2VyaWFsemllci9pdGVtLWNhdGVnb3J5LXBhcmFtLXNlcmlhbGl6ZXInO1xyXG5pbXBvcnQgeyBCYXNlUGFyYW1ldGVyU2VyaWFsaXplciB9IGZyb20gJy4uL3BhcmFtLXNlcmlhbHppZXIvYmFzZS1wYXJhbS1zZXJpYWxpemVyJztcclxuXHJcbmV4cG9ydCBjbGFzcyBVYmNjUGFyYW1TZXJpYWxpemVyRmFjdG9yeSBpbXBsZW1lbnRzIElQYXJhbWV0ZXJTZXJpYWxpemVyRmFjdG9yeXtcclxuXHJcbiAgICBnZXQoa2luZDogc3RyaW5nKTogSVBhcmFtZXRlclNlcmlhbGl6ZXIge1xyXG4gICAgICAgIHN3aXRjaChraW5kKXtcclxuICAgICAgICAgICAgY2FzZSBQYXJhbUV4dGVuc2lvbkNvbnN0LkJBU0VfUEFSQU06XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEJhc2VQYXJhbWV0ZXJTZXJpYWxpemVyKCk7XHJcbiAgICAgICAgICAgIGNhc2UgUGFyYW1FeHRlbnNpb25Db25zdC5JVEVNX0NBVEVHT1JZX1BBUkFNOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBJdGVtQ2F0ZWdvcnlQYXJhbVNlcmlhbGl6ZXIoKTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGVmYXVsdFBhcmFtZXRlclNlcmlhbGl6ZXIoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59Il19