/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/param-serialzier/base-param-serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DefaultParameterSerializer } from '@ecp-caf/common-structure';
import { BaseParameter } from '../../extension/parameter/base-param';
export class BaseParameterSerializer {
    /**
     * @param {?} param
     * @param {?} ctxt
     * @return {?}
     */
    serialize(param, ctxt) {
        /** @type {?} */
        let jobj = new Object();
        if (!param) {
            return jobj;
        }
        /** @type {?} */
        let baseParam = (/** @type {?} */ (param));
        /** @type {?} */
        let serializer = new DefaultParameterSerializer();
        jobj = serializer.serialize(baseParam, ctxt);
        jobj['id'] = baseParam.id;
        jobj['index'] = baseParam.index;
        jobj['visible'] = baseParam.visible;
        jobj['readonly'] = baseParam.readonly;
        jobj['groupId'] = baseParam.groupId;
        jobj['groupCode'] = baseParam.groupCode;
        jobj['groupName'] = baseParam.groupName;
        jobj['parameterTypeDesc'] = baseParam.parameterTypeDesc;
        jobj['kind'] = baseParam.kind;
        return jobj;
    }
    /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    deserialize(obj, ctxt) {
        if (!obj) {
            return null;
        }
        /** @type {?} */
        let param = new BaseParameter();
        /** @type {?} */
        let serializer = new DefaultParameterSerializer();
        param = (/** @type {?} */ (serializer.deserialize(obj, ctxt)));
        param.id = obj['id'];
        param.index = (/** @type {?} */ (obj['index']));
        param.visible = (/** @type {?} */ (obj['visible']));
        param.readonly = (/** @type {?} */ (obj['readonly']));
        param.groupId = obj['groupId'];
        param.groupCode = obj['groupCode'];
        param.groupName = obj['groupName'];
        param.parameterTypeDesc = obj['parameterTypeDesc'];
        return param;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1wYXJhbS1zZXJpYWxpemVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1jbXAvdWJjYy1wYXJhbS12by8iLCJzb3VyY2VzIjpbImxpYi92by9zZXJpYWxpemVyL3BhcmFtLXNlcmlhbHppZXIvYmFzZS1wYXJhbS1zZXJpYWxpemVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFzRCwwQkFBMEIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzNILE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUVyRSxNQUFNLE9BQU8sdUJBQXVCOzs7Ozs7SUFDaEMsU0FBUyxDQUFDLEtBQWdCLEVBQUUsSUFBdUI7O1lBQzNDLElBQUksR0FBQyxJQUFJLE1BQU0sRUFBRTtRQUNyQixJQUFHLENBQUMsS0FBSyxFQUFDO1lBQ04sT0FBTyxJQUFJLENBQUM7U0FDZjs7WUFDRyxTQUFTLEdBQUMsbUJBQUEsS0FBSyxFQUFpQjs7WUFDaEMsVUFBVSxHQUFDLElBQUksMEJBQTBCLEVBQUU7UUFDL0MsSUFBSSxHQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO1FBQzlCLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDO1FBQ3BDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxHQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQztRQUN0RCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztRQUM1QixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDOzs7Ozs7SUFFRCxXQUFXLENBQUMsR0FBVyxFQUFFLElBQXVCO1FBQzVDLElBQUcsQ0FBQyxHQUFHLEVBQUM7WUFDSixPQUFPLElBQUksQ0FBQztTQUNmOztZQUNHLEtBQUssR0FBQyxJQUFJLGFBQWEsRUFBRTs7WUFDekIsVUFBVSxHQUFDLElBQUksMEJBQTBCLEVBQUU7UUFDL0MsS0FBSyxHQUFDLG1CQUFBLFVBQVUsQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFDLElBQUksQ0FBQyxFQUFpQixDQUFDO1FBQ3hELEtBQUssQ0FBQyxFQUFFLEdBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25CLEtBQUssQ0FBQyxLQUFLLEdBQUMsbUJBQUEsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFVLENBQUM7UUFDbkMsS0FBSyxDQUFDLE9BQU8sR0FBQyxtQkFBQSxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQVcsQ0FBQztRQUN4QyxLQUFLLENBQUMsUUFBUSxHQUFDLG1CQUFBLEdBQUcsQ0FBQyxVQUFVLENBQUMsRUFBVyxDQUFDO1FBQzFDLEtBQUssQ0FBQyxPQUFPLEdBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzdCLEtBQUssQ0FBQyxTQUFTLEdBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2pDLEtBQUssQ0FBQyxTQUFTLEdBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2pDLEtBQUssQ0FBQyxpQkFBaUIsR0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUNqRCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJUGFyYW1ldGVyU2VyaWFsaXplciwgUGFyYW1ldGVyLCBJU2VyaWFsaXplQ29udGV4dCwgRGVmYXVsdFBhcmFtZXRlclNlcmlhbGl6ZXIgfSBmcm9tICdAZWNwLWNhZi9jb21tb24tc3RydWN0dXJlJztcclxuaW1wb3J0IHsgQmFzZVBhcmFtZXRlciB9IGZyb20gJy4uLy4uL2V4dGVuc2lvbi9wYXJhbWV0ZXIvYmFzZS1wYXJhbSc7XHJcblxyXG5leHBvcnQgY2xhc3MgQmFzZVBhcmFtZXRlclNlcmlhbGl6ZXIgaW1wbGVtZW50cyBJUGFyYW1ldGVyU2VyaWFsaXplcntcclxuICAgIHNlcmlhbGl6ZShwYXJhbTogUGFyYW1ldGVyLCBjdHh0OiBJU2VyaWFsaXplQ29udGV4dCk6IE9iamVjdCB7XHJcbiAgICAgICAgbGV0IGpvYmo9bmV3IE9iamVjdCgpO1xyXG4gICAgICAgIGlmKCFwYXJhbSl7XHJcbiAgICAgICAgICAgIHJldHVybiBqb2JqO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgYmFzZVBhcmFtPXBhcmFtIGFzIEJhc2VQYXJhbWV0ZXI7XHJcbiAgICAgICAgbGV0IHNlcmlhbGl6ZXI9bmV3IERlZmF1bHRQYXJhbWV0ZXJTZXJpYWxpemVyKCk7XHJcbiAgICAgICAgam9iaj1zZXJpYWxpemVyLnNlcmlhbGl6ZShiYXNlUGFyYW0sY3R4dCk7XHJcbiAgICAgICAgam9ialsnaWQnXT1iYXNlUGFyYW0uaWQ7XHJcbiAgICAgICAgam9ialsnaW5kZXgnXT1iYXNlUGFyYW0uaW5kZXg7XHJcbiAgICAgICAgam9ialsndmlzaWJsZSddPWJhc2VQYXJhbS52aXNpYmxlO1xyXG4gICAgICAgIGpvYmpbJ3JlYWRvbmx5J109YmFzZVBhcmFtLnJlYWRvbmx5O1xyXG4gICAgICAgIGpvYmpbJ2dyb3VwSWQnXT1iYXNlUGFyYW0uZ3JvdXBJZDtcclxuICAgICAgICBqb2JqWydncm91cENvZGUnXT1iYXNlUGFyYW0uZ3JvdXBDb2RlO1xyXG4gICAgICAgIGpvYmpbJ2dyb3VwTmFtZSddPWJhc2VQYXJhbS5ncm91cE5hbWU7XHJcbiAgICAgICAgam9ialsncGFyYW1ldGVyVHlwZURlc2MnXT1iYXNlUGFyYW0ucGFyYW1ldGVyVHlwZURlc2M7XHJcbiAgICAgICAgam9ialsna2luZCddPWJhc2VQYXJhbS5raW5kO1xyXG4gICAgICAgIHJldHVybiBqb2JqO1xyXG4gICAgfSAgICBcclxuICAgIFxyXG4gICAgZGVzZXJpYWxpemUob2JqOiBPYmplY3QsIGN0eHQ6IElTZXJpYWxpemVDb250ZXh0KTpQYXJhbWV0ZXIge1xyXG4gICAgICAgIGlmKCFvYmope1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHBhcmFtPW5ldyBCYXNlUGFyYW1ldGVyKCk7XHJcbiAgICAgICAgbGV0IHNlcmlhbGl6ZXI9bmV3IERlZmF1bHRQYXJhbWV0ZXJTZXJpYWxpemVyKCk7XHJcbiAgICAgICAgcGFyYW09c2VyaWFsaXplci5kZXNlcmlhbGl6ZShvYmosY3R4dCkgYXMgQmFzZVBhcmFtZXRlcjtcclxuICAgICAgICBwYXJhbS5pZD1vYmpbJ2lkJ107XHJcbiAgICAgICAgcGFyYW0uaW5kZXg9b2JqWydpbmRleCddIGFzIG51bWJlcjtcclxuICAgICAgICBwYXJhbS52aXNpYmxlPW9ialsndmlzaWJsZSddIGFzIGJvb2xlYW47XHJcbiAgICAgICAgcGFyYW0ucmVhZG9ubHk9b2JqWydyZWFkb25seSddIGFzIGJvb2xlYW47XHJcbiAgICAgICAgcGFyYW0uZ3JvdXBJZD1vYmpbJ2dyb3VwSWQnXTtcclxuICAgICAgICBwYXJhbS5ncm91cENvZGU9b2JqWydncm91cENvZGUnXTtcclxuICAgICAgICBwYXJhbS5ncm91cE5hbWU9b2JqWydncm91cE5hbWUnXTtcclxuICAgICAgICBwYXJhbS5wYXJhbWV0ZXJUeXBlRGVzYz1vYmpbJ3BhcmFtZXRlclR5cGVEZXNjJ107XHJcbiAgICAgICAgcmV0dXJuIHBhcmFtO1xyXG4gICAgfVxyXG59Il19