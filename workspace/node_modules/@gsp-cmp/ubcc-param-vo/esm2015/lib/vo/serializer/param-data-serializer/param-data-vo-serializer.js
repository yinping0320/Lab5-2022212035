/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/param-data-serializer/param-data-vo-serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { UbccParamDataVo } from '../../param-data-vo/ubcc-param-data-vo';
import { SerializerUtils } from '../../utils/serializer-utils';
export class ParamDataVoSerializer {
    /**
     * @param {?} paramData
     * @return {?}
     */
    serialize(paramData) {
        /** @type {?} */
        let jobj = new Object();
        if (!paramData) {
            return jobj;
        }
        jobj['templateId'] = paramData.templateId;
        jobj['bizTypeId'] = paramData.bizTypeId;
        if (paramData.data) {
            jobj['data'] = [];
            paramData.data.forEach((/**
             * @param {?} dataRow
             * @return {?}
             */
            dataRow => {
                /** @type {?} */
                let serializer = SerializerUtils.getUbccParamDataRowSerializerFactory().get(dataRow.getKind());
                jobj['data'].push(serializer.serialize(dataRow));
            }));
        }
        return jobj;
    }
    /**
     * @param {?} jobj
     * @return {?}
     */
    deserialize(jobj) {
        if (!jobj) {
            return null;
        }
        /** @type {?} */
        let paramData = new UbccParamDataVo();
        paramData.templateId = jobj['templateId'];
        paramData.bizTypeId = jobj['bizTypeId'];
        if (jobj['data']) {
            paramData.data = new Array();
            jobj['data'].forEach((/**
             * @param {?} dataRowJobj
             * @return {?}
             */
            dataRowJobj => {
                /** @type {?} */
                let serializer = SerializerUtils.getUbccParamDataRowSerializerFactory().get(dataRowJobj['kind']);
                paramData.data.push(serializer.deserialize(dataRowJobj));
            }));
        }
        return paramData;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyYW0tZGF0YS12by1zZXJpYWxpemVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1jbXAvdWJjYy1wYXJhbS12by8iLCJzb3VyY2VzIjpbImxpYi92by9zZXJpYWxpemVyL3BhcmFtLWRhdGEtc2VyaWFsaXplci9wYXJhbS1kYXRhLXZvLXNlcmlhbGl6ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFFekUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRS9ELE1BQU0sT0FBUSxxQkFBcUI7Ozs7O0lBRS9CLFNBQVMsQ0FBQyxTQUF5Qjs7WUFDM0IsSUFBSSxHQUFDLElBQUksTUFBTSxFQUFFO1FBQ3JCLElBQUcsQ0FBQyxTQUFTLEVBQUM7WUFDVixPQUFPLElBQUksQ0FBQztTQUNmO1FBQ0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUM7UUFDeEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7UUFDdEMsSUFBRyxTQUFTLENBQUMsSUFBSSxFQUFDO1lBQ2QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFDLEVBQUUsQ0FBQztZQUNoQixTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU87Ozs7WUFBQyxPQUFPLENBQUMsRUFBRTs7b0JBQ3pCLFVBQVUsR0FBQyxlQUFlLENBQUMsb0NBQW9DLEVBQUUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUM1RixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNyRCxDQUFDLEVBQUMsQ0FBQztTQUNOO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQzs7Ozs7SUFFRCxXQUFXLENBQUMsSUFBVztRQUNuQixJQUFHLENBQUMsSUFBSSxFQUFDO1lBQ0wsT0FBTyxJQUFJLENBQUM7U0FDZjs7WUFDRyxTQUFTLEdBQUMsSUFBSSxlQUFlLEVBQUU7UUFDbkMsU0FBUyxDQUFDLFVBQVUsR0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDeEMsU0FBUyxDQUFDLFNBQVMsR0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDdEMsSUFBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUM7WUFDWixTQUFTLENBQUMsSUFBSSxHQUFDLElBQUksS0FBSyxFQUFXLENBQUM7WUFDcEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU87Ozs7WUFBQyxXQUFXLENBQUMsRUFBRTs7b0JBQzNCLFVBQVUsR0FBQyxlQUFlLENBQUMsb0NBQW9DLEVBQUUsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUM5RixTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFDN0QsQ0FBQyxFQUFDLENBQUM7U0FDTjtRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ3JCLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFViY2NQYXJhbURhdGFWbyB9IGZyb20gJy4uLy4uL3BhcmFtLWRhdGEtdm8vdWJjYy1wYXJhbS1kYXRhLXZvJztcclxuaW1wb3J0IHsgRGF0YVJvdyB9IGZyb20gJy4uLy4uL3BhcmFtLWRhdGEtdm8vZGF0YS1yb3cnO1xyXG5pbXBvcnQgeyBTZXJpYWxpemVyVXRpbHMgfSBmcm9tICcuLi8uLi91dGlscy9zZXJpYWxpemVyLXV0aWxzJztcclxuXHJcbmV4cG9ydCAgY2xhc3MgUGFyYW1EYXRhVm9TZXJpYWxpemVye1xyXG5cclxuICAgIHNlcmlhbGl6ZShwYXJhbURhdGE6VWJjY1BhcmFtRGF0YVZvKTpPYmplY3R7XHJcbiAgICAgICAgbGV0IGpvYmo9bmV3IE9iamVjdCgpO1xyXG4gICAgICAgIGlmKCFwYXJhbURhdGEpe1xyXG4gICAgICAgICAgICByZXR1cm4gam9iajtcclxuICAgICAgICB9XHJcbiAgICAgICAgam9ialsndGVtcGxhdGVJZCddPXBhcmFtRGF0YS50ZW1wbGF0ZUlkO1xyXG4gICAgICAgIGpvYmpbJ2JpelR5cGVJZCddPXBhcmFtRGF0YS5iaXpUeXBlSWQ7XHJcbiAgICAgICAgaWYocGFyYW1EYXRhLmRhdGEpe1xyXG4gICAgICAgICAgICBqb2JqWydkYXRhJ109W107XHJcbiAgICAgICAgICAgIHBhcmFtRGF0YS5kYXRhLmZvckVhY2goZGF0YVJvdyA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc2VyaWFsaXplcj1TZXJpYWxpemVyVXRpbHMuZ2V0VWJjY1BhcmFtRGF0YVJvd1NlcmlhbGl6ZXJGYWN0b3J5KCkuZ2V0KGRhdGFSb3cuZ2V0S2luZCgpKTtcclxuICAgICAgICAgICAgICAgIGpvYmpbJ2RhdGEnXS5wdXNoKHNlcmlhbGl6ZXIuc2VyaWFsaXplKGRhdGFSb3cpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBqb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIGRlc2VyaWFsaXplKGpvYmo6T2JqZWN0KTpVYmNjUGFyYW1EYXRhVm97XHJcbiAgICAgICAgaWYoIWpvYmope1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHBhcmFtRGF0YT1uZXcgVWJjY1BhcmFtRGF0YVZvKCk7XHJcbiAgICAgICAgcGFyYW1EYXRhLnRlbXBsYXRlSWQ9am9ialsndGVtcGxhdGVJZCddO1xyXG4gICAgICAgIHBhcmFtRGF0YS5iaXpUeXBlSWQ9am9ialsnYml6VHlwZUlkJ107XHJcbiAgICAgICAgaWYoam9ialsnZGF0YSddKXtcclxuICAgICAgICAgICAgcGFyYW1EYXRhLmRhdGE9bmV3IEFycmF5PERhdGFSb3c+KCk7XHJcbiAgICAgICAgICAgIGpvYmpbJ2RhdGEnXS5mb3JFYWNoKGRhdGFSb3dKb2JqID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBzZXJpYWxpemVyPVNlcmlhbGl6ZXJVdGlscy5nZXRVYmNjUGFyYW1EYXRhUm93U2VyaWFsaXplckZhY3RvcnkoKS5nZXQoZGF0YVJvd0pvYmpbJ2tpbmQnXSk7XHJcbiAgICAgICAgICAgICAgICBwYXJhbURhdGEuZGF0YS5wdXNoKHNlcmlhbGl6ZXIuZGVzZXJpYWxpemUoZGF0YVJvd0pvYmopKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwYXJhbURhdGE7XHJcbiAgICB9XHJcbn0iXX0=