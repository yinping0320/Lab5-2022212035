/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/data-type-serializer/help-type-serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DefaultStructuredTypeSerializer } from '@ecp-caf/common-structure';
import { HelpType } from '../../extension/data-type/help-type';
import { SerializerUtils } from '../../utils/serializer-utils';
export class HelpTypeSerialzier {
    /**
     * @param {?} type
     * @param {?} ctxt
     * @return {?}
     */
    serialize(type, ctxt) {
        /** @type {?} */
        let jobj = new Object();
        if (!type) {
            return null;
        }
        /** @type {?} */
        let serializer = new DefaultStructuredTypeSerializer();
        jobj = serializer.serialize(type, SerializerUtils.getContext());
        /** @type {?} */
        let helpType = (/** @type {?} */ (type));
        jobj['helpId'] = helpType.helpId;
        jobj['helpCode'] = helpType.helpCode;
        jobj['helpName'] = helpType.helpName;
        jobj['kind'] = helpType.kind;
        return jobj;
    }
    /**
     * @param {?} obj
     * @param {?} ctxt
     * @return {?}
     */
    deserialize(obj, ctxt) {
        if (!obj) {
            return null;
        }
        /** @type {?} */
        let helpType = new HelpType();
        /** @type {?} */
        let serializer = new DefaultStructuredTypeSerializer();
        helpType = (/** @type {?} */ (serializer.deserialize(obj, SerializerUtils.getContext())));
        helpType.helpId = obj['helpId'];
        helpType.helpCode = obj['helpCode'];
        helpType.helpName = obj['helpName'];
        return helpType;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscC10eXBlLXNlcmlhbGl6ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLWNtcC91YmNjLXBhcmFtLXZvLyIsInNvdXJjZXMiOlsibGliL3ZvL3NlcmlhbGl6ZXIvZGF0YS10eXBlLXNlcmlhbGl6ZXIvaGVscC10eXBlLXNlcmlhbGl6ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQXFELCtCQUErQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDL0gsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQy9ELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUUvRCxNQUFNLE9BQU8sa0JBQWtCOzs7Ozs7SUFFM0IsU0FBUyxDQUFDLElBQWUsRUFBRSxJQUF1Qjs7WUFDMUMsSUFBSSxHQUFDLElBQUksTUFBTSxFQUFFO1FBQ3JCLElBQUcsQ0FBQyxJQUFJLEVBQUM7WUFDTCxPQUFPLElBQUksQ0FBQztTQUNmOztZQUNHLFVBQVUsR0FBQyxJQUFJLCtCQUErQixFQUFFO1FBQ3BELElBQUksR0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLElBQUksRUFBQyxlQUFlLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQzs7WUFDekQsUUFBUSxHQUFDLG1CQUFBLElBQUksRUFBWTtRQUM3QixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztRQUMvQixJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQztRQUNuQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQztRQUNuQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztRQUMzQixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDOzs7Ozs7SUFFRCxXQUFXLENBQUMsR0FBVyxFQUFFLElBQXNCO1FBQzNDLElBQUcsQ0FBQyxHQUFHLEVBQUM7WUFDSixPQUFPLElBQUksQ0FBQztTQUNmOztZQUNHLFFBQVEsR0FBQyxJQUFJLFFBQVEsRUFBRTs7WUFDdkIsVUFBVSxHQUFDLElBQUksK0JBQStCLEVBQUU7UUFDcEQsUUFBUSxHQUFDLG1CQUFBLFVBQVUsQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFDLGVBQWUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxFQUFZLENBQUM7UUFDOUUsUUFBUSxDQUFDLE1BQU0sR0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDOUIsUUFBUSxDQUFDLFFBQVEsR0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbEMsUUFBUSxDQUFDLFFBQVEsR0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbEMsT0FBTyxRQUFRLENBQUM7SUFDcEIsQ0FBQztDQUVKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSURhdGFUeXBlU2VyaWFsaXplciwgSVNlcmlhbGl6ZUNvbnRleHQsIElEYXRhVHlwZSwgRGVmYXVsdFN0cnVjdHVyZWRUeXBlU2VyaWFsaXplciB9IGZyb20gJ0BlY3AtY2FmL2NvbW1vbi1zdHJ1Y3R1cmUnO1xyXG5pbXBvcnQgeyBIZWxwVHlwZSB9IGZyb20gJy4uLy4uL2V4dGVuc2lvbi9kYXRhLXR5cGUvaGVscC10eXBlJztcclxuaW1wb3J0IHsgU2VyaWFsaXplclV0aWxzIH0gZnJvbSAnLi4vLi4vdXRpbHMvc2VyaWFsaXplci11dGlscyc7XHJcblxyXG5leHBvcnQgY2xhc3MgSGVscFR5cGVTZXJpYWx6aWVyIGltcGxlbWVudHMgSURhdGFUeXBlU2VyaWFsaXplcntcclxuICAgIFxyXG4gICAgc2VyaWFsaXplKHR5cGU6IElEYXRhVHlwZSwgY3R4dDogSVNlcmlhbGl6ZUNvbnRleHQpOiBPYmplY3Qge1xyXG4gICAgICAgIGxldCBqb2JqPW5ldyBPYmplY3QoKTtcclxuICAgICAgICBpZighdHlwZSl7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgc2VyaWFsaXplcj1uZXcgRGVmYXVsdFN0cnVjdHVyZWRUeXBlU2VyaWFsaXplcigpO1xyXG4gICAgICAgIGpvYmo9c2VyaWFsaXplci5zZXJpYWxpemUodHlwZSxTZXJpYWxpemVyVXRpbHMuZ2V0Q29udGV4dCgpKTtcclxuICAgICAgICBsZXQgaGVscFR5cGU9dHlwZSBhcyBIZWxwVHlwZTtcclxuICAgICAgICBqb2JqWydoZWxwSWQnXT1oZWxwVHlwZS5oZWxwSWQ7XHJcbiAgICAgICAgam9ialsnaGVscENvZGUnXT1oZWxwVHlwZS5oZWxwQ29kZTtcclxuICAgICAgICBqb2JqWydoZWxwTmFtZSddPWhlbHBUeXBlLmhlbHBOYW1lO1xyXG4gICAgICAgIGpvYmpbJ2tpbmQnXT1oZWxwVHlwZS5raW5kO1xyXG4gICAgICAgIHJldHVybiBqb2JqO1xyXG4gICAgfSAgICBcclxuICAgIFxyXG4gICAgZGVzZXJpYWxpemUob2JqOiBPYmplY3QsIGN0eHQ6SVNlcmlhbGl6ZUNvbnRleHQpOiBJRGF0YVR5cGUge1xyXG4gICAgICAgIGlmKCFvYmope1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGhlbHBUeXBlPW5ldyBIZWxwVHlwZSgpO1xyXG4gICAgICAgIGxldCBzZXJpYWxpemVyPW5ldyBEZWZhdWx0U3RydWN0dXJlZFR5cGVTZXJpYWxpemVyKCk7XHJcbiAgICAgICAgaGVscFR5cGU9c2VyaWFsaXplci5kZXNlcmlhbGl6ZShvYmosU2VyaWFsaXplclV0aWxzLmdldENvbnRleHQoKSkgYXMgSGVscFR5cGU7XHJcbiAgICAgICAgaGVscFR5cGUuaGVscElkPW9ialsnaGVscElkJ107XHJcbiAgICAgICAgaGVscFR5cGUuaGVscENvZGU9b2JqWydoZWxwQ29kZSddO1xyXG4gICAgICAgIGhlbHBUeXBlLmhlbHBOYW1lPW9ialsnaGVscE5hbWUnXTtcclxuICAgICAgICByZXR1cm4gaGVscFR5cGU7XHJcbiAgICB9XHJcblxyXG59Il19