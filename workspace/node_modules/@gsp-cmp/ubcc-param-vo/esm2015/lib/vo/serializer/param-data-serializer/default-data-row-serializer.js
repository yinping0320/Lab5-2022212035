/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/param-data-serializer/default-data-row-serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DefaultDataRow } from '../../param-data-vo/default-data-row';
import { DataItem } from '../../param-data-vo/data-item';
export class DefaultDataRowSerializer {
    /**
     * @param {?} dataRow
     * @return {?}
     */
    serialize(dataRow) {
        /** @type {?} */
        let jobj = new Object();
        if (!dataRow) {
            return null;
        }
        /** @type {?} */
        let defaultDataRow = (/** @type {?} */ (dataRow));
        jobj['id'] = defaultDataRow.id;
        jobj['kind'] = defaultDataRow.kind;
        if (defaultDataRow.paramItems) {
            jobj['paramItems'] = [];
            defaultDataRow.paramItems.forEach((/**
             * @param {?} paramItem
             * @return {?}
             */
            paramItem => {
                jobj['paramItems'] = paramItem;
            }));
        }
        return jobj;
    }
    /**
     * @param {?} jobj
     * @return {?}
     */
    deserialize(jobj) {
        if (!jobj) {
            return null;
        }
        /** @type {?} */
        let dataRow = new DefaultDataRow();
        dataRow.id = jobj['id'];
        if (jobj['paramItems']) {
            dataRow.paramItems = new Array();
            jobj['paramItems'].forEach((/**
             * @param {?} paramItemJobj
             * @return {?}
             */
            paramItemJobj => {
                dataRow.paramItems.push(Object.assign(new DataItem(), paramItemJobj));
            }));
        }
        return dataRow;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1kYXRhLXJvdy1zZXJpYWxpemVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1jbXAvdWJjYy1wYXJhbS12by8iLCJzb3VyY2VzIjpbImxpYi92by9zZXJpYWxpemVyL3BhcmFtLWRhdGEtc2VyaWFsaXplci9kZWZhdWx0LWRhdGEtcm93LXNlcmlhbGl6ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFFdEUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBR3pELE1BQU0sT0FBTyx3QkFBd0I7Ozs7O0lBRWpDLFNBQVMsQ0FBQyxPQUFlOztZQUNqQixJQUFJLEdBQUMsSUFBSSxNQUFNLEVBQUU7UUFDckIsSUFBRyxDQUFDLE9BQU8sRUFBQztZQUNSLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7O1lBQ0csY0FBYyxHQUFDLG1CQUFBLE9BQU8sRUFBa0I7UUFDNUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUM7UUFDN0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUM7UUFDakMsSUFBRyxjQUFjLENBQUMsVUFBVSxFQUFDO1lBQ3pCLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBQyxFQUFFLENBQUM7WUFDdEIsY0FBYyxDQUFDLFVBQVUsQ0FBQyxPQUFPOzs7O1lBQUMsU0FBUyxDQUFDLEVBQUU7Z0JBQzFDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBQyxTQUFTLENBQUM7WUFDakMsQ0FBQyxFQUFDLENBQUM7U0FDTjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7Ozs7O0lBRUQsV0FBVyxDQUFDLElBQVc7UUFDbkIsSUFBRyxDQUFDLElBQUksRUFBQztZQUNMLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7O1lBQ0csT0FBTyxHQUFDLElBQUksY0FBYyxFQUFFO1FBQ2hDLE9BQU8sQ0FBQyxFQUFFLEdBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3RCLElBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFDO1lBQ2xCLE9BQU8sQ0FBQyxVQUFVLEdBQUMsSUFBSSxLQUFLLEVBQVksQ0FBQztZQUN6QyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTzs7OztZQUFDLGFBQWEsQ0FBQyxFQUFFO2dCQUN2QyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksUUFBUSxFQUFFLEVBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztZQUN6RSxDQUFDLEVBQUMsQ0FBQztTQUNOO1FBQ0QsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGVmYXVsdERhdGFSb3cgfSBmcm9tICcuLi8uLi9wYXJhbS1kYXRhLXZvL2RlZmF1bHQtZGF0YS1yb3cnO1xyXG5pbXBvcnQgeyBEYXRhUm93IH0gZnJvbSAnLi4vLi4vcGFyYW0tZGF0YS12by9kYXRhLXJvdyc7XHJcbmltcG9ydCB7IERhdGFJdGVtIH0gZnJvbSAnLi4vLi4vcGFyYW0tZGF0YS12by9kYXRhLWl0ZW0nO1xyXG5pbXBvcnQgeyBJRGF0YVJvd1NlcmlhbGl6ZXIgfSBmcm9tICcuL2ktZGF0YS1yb3ctc2VyaWFsaXplcic7XHJcblxyXG5leHBvcnQgY2xhc3MgRGVmYXVsdERhdGFSb3dTZXJpYWxpemVyIGltcGxlbWVudHMgSURhdGFSb3dTZXJpYWxpemVye1xyXG5cclxuICAgIHNlcmlhbGl6ZShkYXRhUm93OkRhdGFSb3cpOk9iamVjdHtcclxuICAgICAgICBsZXQgam9iaj1uZXcgT2JqZWN0KCk7XHJcbiAgICAgICAgaWYoIWRhdGFSb3cpe1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGRlZmF1bHREYXRhUm93PWRhdGFSb3cgYXMgRGVmYXVsdERhdGFSb3c7XHJcbiAgICAgICAgam9ialsnaWQnXT1kZWZhdWx0RGF0YVJvdy5pZDtcclxuICAgICAgICBqb2JqWydraW5kJ109ZGVmYXVsdERhdGFSb3cua2luZDtcclxuICAgICAgICBpZihkZWZhdWx0RGF0YVJvdy5wYXJhbUl0ZW1zKXtcclxuICAgICAgICAgICAgam9ialsncGFyYW1JdGVtcyddPVtdO1xyXG4gICAgICAgICAgICBkZWZhdWx0RGF0YVJvdy5wYXJhbUl0ZW1zLmZvckVhY2gocGFyYW1JdGVtID0+IHtcclxuICAgICAgICAgICAgICAgIGpvYmpbJ3BhcmFtSXRlbXMnXT1wYXJhbUl0ZW07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gam9iajtcclxuICAgIH1cclxuXHJcbiAgICBkZXNlcmlhbGl6ZShqb2JqOk9iamVjdCk6RGF0YVJvd3tcclxuICAgICAgICBpZigham9iail7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgZGF0YVJvdz1uZXcgRGVmYXVsdERhdGFSb3coKTtcclxuICAgICAgICBkYXRhUm93LmlkPWpvYmpbJ2lkJ107XHJcbiAgICAgICAgaWYoam9ialsncGFyYW1JdGVtcyddKXtcclxuICAgICAgICAgICAgZGF0YVJvdy5wYXJhbUl0ZW1zPW5ldyBBcnJheTxEYXRhSXRlbT4oKTtcclxuICAgICAgICAgICAgam9ialsncGFyYW1JdGVtcyddLmZvckVhY2gocGFyYW1JdGVtSm9iaiA9PiB7XHJcbiAgICAgICAgICAgICAgICBkYXRhUm93LnBhcmFtSXRlbXMucHVzaChPYmplY3QuYXNzaWduKG5ldyBEYXRhSXRlbSgpLHBhcmFtSXRlbUpvYmopKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkYXRhUm93O1xyXG4gICAgfVxyXG59Il19