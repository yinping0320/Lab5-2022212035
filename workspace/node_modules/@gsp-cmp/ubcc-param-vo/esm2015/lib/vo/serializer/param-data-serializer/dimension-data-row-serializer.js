/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/param-data-serializer/dimension-data-row-serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DimensionDataRow } from '../../param-data-vo/dimension-data-row';
import { DataItem } from '../../param-data-vo/data-item';
export class DimensionDataRowSerializer {
    /**
     * @param {?} dataRow
     * @return {?}
     */
    serialize(dataRow) {
        /** @type {?} */
        let jobj = new Object();
        if (!dataRow) {
            return null;
        }
        /** @type {?} */
        let dimensionDataRow = (/** @type {?} */ (dataRow));
        jobj['id'] = dimensionDataRow.id;
        jobj['kind'] = dimensionDataRow.kind;
        if (dimensionDataRow.dimensionDataItems) {
            jobj['dimensionDataItems'] = [];
            dimensionDataRow.dimensionDataItems.forEach((/**
             * @param {?} dimensionDataItem
             * @return {?}
             */
            dimensionDataItem => {
                jobj['dimensionDataItems'] = dimensionDataItem;
            }));
        }
        if (dimensionDataRow.paramDataItems) {
            jobj['paramDataItems'] = [];
            dimensionDataRow.paramDataItems.forEach((/**
             * @param {?} paramItem
             * @return {?}
             */
            paramItem => {
                jobj['paramDataItems'] = paramItem;
            }));
        }
        return jobj;
    }
    /**
     * @param {?} jobj
     * @return {?}
     */
    deserialize(jobj) {
        if (!jobj) {
            return null;
        }
        /** @type {?} */
        let dataRow = new DimensionDataRow();
        dataRow.id = jobj['id'];
        if (jobj['dimensionDataItems']) {
            dataRow.dimensionDataItems = new Array();
            jobj['dimensionDataItems'].forEach((/**
             * @param {?} dimensionDataItemJobj
             * @return {?}
             */
            dimensionDataItemJobj => {
                dataRow.dimensionDataItems.push(Object.assign(new DataItem(), dimensionDataItemJobj));
            }));
        }
        if (jobj['paramDataItems']) {
            dataRow.paramDataItems = new Array();
            jobj['paramDataItems'].forEach((/**
             * @param {?} paramDataItemsJobj
             * @return {?}
             */
            paramDataItemsJobj => {
                dataRow.dimensionDataItems.push(Object.assign(new DataItem(), paramDataItemsJobj));
            }));
        }
        return dataRow;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGltZW5zaW9uLWRhdGEtcm93LXNlcmlhbGl6ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLWNtcC91YmNjLXBhcmFtLXZvLyIsInNvdXJjZXMiOlsibGliL3ZvL3NlcmlhbGl6ZXIvcGFyYW0tZGF0YS1zZXJpYWxpemVyL2RpbWVuc2lvbi1kYXRhLXJvdy1zZXJpYWxpemVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDMUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRXpELE1BQU0sT0FBTywwQkFBMEI7Ozs7O0lBRW5DLFNBQVMsQ0FBQyxPQUFlOztZQUNqQixJQUFJLEdBQUMsSUFBSSxNQUFNLEVBQUU7UUFDckIsSUFBRyxDQUFDLE9BQU8sRUFBQztZQUNSLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7O1lBQ0csZ0JBQWdCLEdBQUMsbUJBQUEsT0FBTyxFQUFvQjtRQUNoRCxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDO1FBQy9CLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUM7UUFDbkMsSUFBRyxnQkFBZ0IsQ0FBQyxrQkFBa0IsRUFBQztZQUNuQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsR0FBQyxFQUFFLENBQUM7WUFDOUIsZ0JBQWdCLENBQUMsa0JBQWtCLENBQUMsT0FBTzs7OztZQUFDLGlCQUFpQixDQUFDLEVBQUU7Z0JBQzVELElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxHQUFDLGlCQUFpQixDQUFDO1lBQ2pELENBQUMsRUFBQyxDQUFDO1NBQ047UUFDRCxJQUFHLGdCQUFnQixDQUFDLGNBQWMsRUFBQztZQUMvQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBQyxFQUFFLENBQUM7WUFDMUIsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLE9BQU87Ozs7WUFBQyxTQUFTLENBQUMsRUFBRTtnQkFDaEQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUMsU0FBUyxDQUFDO1lBQ3JDLENBQUMsRUFBQyxDQUFDO1NBQ047UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDOzs7OztJQUVELFdBQVcsQ0FBQyxJQUFXO1FBQ25CLElBQUcsQ0FBQyxJQUFJLEVBQUM7WUFDTCxPQUFPLElBQUksQ0FBQztTQUNmOztZQUNHLE9BQU8sR0FBQyxJQUFJLGdCQUFnQixFQUFFO1FBQ2xDLE9BQU8sQ0FBQyxFQUFFLEdBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3RCLElBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEVBQUM7WUFDMUIsT0FBTyxDQUFDLGtCQUFrQixHQUFDLElBQUksS0FBSyxFQUFZLENBQUM7WUFDakQsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUMsT0FBTzs7OztZQUFDLHFCQUFxQixDQUFDLEVBQUU7Z0JBQ3ZELE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQztZQUN6RixDQUFDLEVBQUMsQ0FBQztTQUNOO1FBQ0QsSUFBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBQztZQUN0QixPQUFPLENBQUMsY0FBYyxHQUFDLElBQUksS0FBSyxFQUFZLENBQUM7WUFDN0MsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsT0FBTzs7OztZQUFDLGtCQUFrQixDQUFDLEVBQUU7Z0JBQ2hELE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztZQUN0RixDQUFDLEVBQUMsQ0FBQztTQUNOO1FBQ0QsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQztDQUVKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSURhdGFSb3dTZXJpYWxpemVyIH0gZnJvbSAnLi9pLWRhdGEtcm93LXNlcmlhbGl6ZXInO1xyXG5pbXBvcnQgeyBEYXRhUm93IH0gZnJvbSAnLi4vLi4vcGFyYW0tZGF0YS12by9kYXRhLXJvdyc7XHJcbmltcG9ydCB7IERpbWVuc2lvbkRhdGFSb3cgfSBmcm9tICcuLi8uLi9wYXJhbS1kYXRhLXZvL2RpbWVuc2lvbi1kYXRhLXJvdyc7XHJcbmltcG9ydCB7IERhdGFJdGVtIH0gZnJvbSAnLi4vLi4vcGFyYW0tZGF0YS12by9kYXRhLWl0ZW0nO1xyXG5cclxuZXhwb3J0IGNsYXNzIERpbWVuc2lvbkRhdGFSb3dTZXJpYWxpemVyIGltcGxlbWVudHMgSURhdGFSb3dTZXJpYWxpemVye1xyXG5cclxuICAgIHNlcmlhbGl6ZShkYXRhUm93OkRhdGFSb3cpOk9iamVjdHtcclxuICAgICAgICBsZXQgam9iaj1uZXcgT2JqZWN0KCk7XHJcbiAgICAgICAgaWYoIWRhdGFSb3cpe1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGRpbWVuc2lvbkRhdGFSb3c9ZGF0YVJvdyBhcyBEaW1lbnNpb25EYXRhUm93O1xyXG4gICAgICAgIGpvYmpbJ2lkJ109ZGltZW5zaW9uRGF0YVJvdy5pZDtcclxuICAgICAgICBqb2JqWydraW5kJ109ZGltZW5zaW9uRGF0YVJvdy5raW5kO1xyXG4gICAgICAgIGlmKGRpbWVuc2lvbkRhdGFSb3cuZGltZW5zaW9uRGF0YUl0ZW1zKXtcclxuICAgICAgICAgICAgam9ialsnZGltZW5zaW9uRGF0YUl0ZW1zJ109W107XHJcbiAgICAgICAgICAgIGRpbWVuc2lvbkRhdGFSb3cuZGltZW5zaW9uRGF0YUl0ZW1zLmZvckVhY2goZGltZW5zaW9uRGF0YUl0ZW0gPT4ge1xyXG4gICAgICAgICAgICAgICAgam9ialsnZGltZW5zaW9uRGF0YUl0ZW1zJ109ZGltZW5zaW9uRGF0YUl0ZW07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihkaW1lbnNpb25EYXRhUm93LnBhcmFtRGF0YUl0ZW1zKXtcclxuICAgICAgICAgICAgam9ialsncGFyYW1EYXRhSXRlbXMnXT1bXTtcclxuICAgICAgICAgICAgZGltZW5zaW9uRGF0YVJvdy5wYXJhbURhdGFJdGVtcy5mb3JFYWNoKHBhcmFtSXRlbSA9PiB7XHJcbiAgICAgICAgICAgICAgICBqb2JqWydwYXJhbURhdGFJdGVtcyddPXBhcmFtSXRlbTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBqb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIGRlc2VyaWFsaXplKGpvYmo6T2JqZWN0KTpEYXRhUm93e1xyXG4gICAgICAgIGlmKCFqb2JqKXtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBkYXRhUm93PW5ldyBEaW1lbnNpb25EYXRhUm93KCk7XHJcbiAgICAgICAgZGF0YVJvdy5pZD1qb2JqWydpZCddO1xyXG4gICAgICAgIGlmKGpvYmpbJ2RpbWVuc2lvbkRhdGFJdGVtcyddKXtcclxuICAgICAgICAgICAgZGF0YVJvdy5kaW1lbnNpb25EYXRhSXRlbXM9bmV3IEFycmF5PERhdGFJdGVtPigpO1xyXG4gICAgICAgICAgICBqb2JqWydkaW1lbnNpb25EYXRhSXRlbXMnXS5mb3JFYWNoKGRpbWVuc2lvbkRhdGFJdGVtSm9iaiA9PiB7XHJcbiAgICAgICAgICAgICAgICBkYXRhUm93LmRpbWVuc2lvbkRhdGFJdGVtcy5wdXNoKE9iamVjdC5hc3NpZ24obmV3IERhdGFJdGVtKCksZGltZW5zaW9uRGF0YUl0ZW1Kb2JqKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihqb2JqWydwYXJhbURhdGFJdGVtcyddKXtcclxuICAgICAgICAgICAgZGF0YVJvdy5wYXJhbURhdGFJdGVtcz1uZXcgQXJyYXk8RGF0YUl0ZW0+KCk7XHJcbiAgICAgICAgICAgIGpvYmpbJ3BhcmFtRGF0YUl0ZW1zJ10uZm9yRWFjaChwYXJhbURhdGFJdGVtc0pvYmogPT4ge1xyXG4gICAgICAgICAgICAgICAgZGF0YVJvdy5kaW1lbnNpb25EYXRhSXRlbXMucHVzaChPYmplY3QuYXNzaWduKG5ldyBEYXRhSXRlbSgpLHBhcmFtRGF0YUl0ZW1zSm9iaikpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGRhdGFSb3c7XHJcbiAgICB9XHJcbiAgICBcclxufSJdfQ==