/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/factory/ubcc-data-type-serializer-factory.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DefaultDataTypeSerializerFactory } from '@ecp-caf/common-structure';
import { DataTypeExtensionConst } from '../../../const/data-type-extension-const';
import { HelpTypeSerialzier } from '../data-type-serializer/help-type-serializer';
import { StructureTypeRefSerializer } from '../data-type-serializer/structure-type-ref-serializer';
export class UbccDataTypeSerializerFactory {
    /**
     * @param {?} kind
     * @return {?}
     */
    get(kind) {
        switch (kind) {
            case DataTypeExtensionConst.HELP_TYPE:
                return new HelpTypeSerialzier();
            case DataTypeExtensionConst.UBCC_STRUCTURE_TYPE_REF:
                return new StructureTypeRefSerializer();
            default:
                return new DefaultDataTypeSerializerFactory().get(kind);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWJjYy1kYXRhLXR5cGUtc2VyaWFsaXplci1mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1jbXAvdWJjYy1wYXJhbS12by8iLCJzb3VyY2VzIjpbImxpYi92by9zZXJpYWxpemVyL2ZhY3RvcnkvdWJjYy1kYXRhLXR5cGUtc2VyaWFsaXplci1mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFtRCxnQ0FBZ0MsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzlILE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHVEQUF1RCxDQUFDO0FBRW5HLE1BQU0sT0FBTyw2QkFBNkI7Ozs7O0lBRXRDLEdBQUcsQ0FBQyxJQUFZO1FBQ1osUUFBUSxJQUFJLEVBQUU7WUFDVixLQUFLLHNCQUFzQixDQUFDLFNBQVM7Z0JBQ2pDLE9BQU8sSUFBSSxrQkFBa0IsRUFBRSxDQUFDO1lBQ3BDLEtBQUssc0JBQXNCLENBQUMsdUJBQXVCO2dCQUMvQyxPQUFPLElBQUksMEJBQTBCLEVBQUUsQ0FBQztZQUM1QztnQkFDSSxPQUFPLElBQUksZ0NBQWdDLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDL0Q7SUFDTCxDQUFDO0NBRUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJRGF0YVR5cGVTZXJpYWxpemVyRmFjdG9yeSwgSURhdGFUeXBlU2VyaWFsaXplciwgRGVmYXVsdERhdGFUeXBlU2VyaWFsaXplckZhY3RvcnkgfSBmcm9tICdAZWNwLWNhZi9jb21tb24tc3RydWN0dXJlJztcclxuaW1wb3J0IHsgRGF0YVR5cGVFeHRlbnNpb25Db25zdCB9IGZyb20gJy4uLy4uLy4uL2NvbnN0L2RhdGEtdHlwZS1leHRlbnNpb24tY29uc3QnO1xyXG5pbXBvcnQgeyBIZWxwVHlwZVNlcmlhbHppZXIgfSBmcm9tICcuLi9kYXRhLXR5cGUtc2VyaWFsaXplci9oZWxwLXR5cGUtc2VyaWFsaXplcic7XHJcbmltcG9ydCB7IFN0cnVjdHVyZVR5cGVSZWZTZXJpYWxpemVyIH0gZnJvbSAnLi4vZGF0YS10eXBlLXNlcmlhbGl6ZXIvc3RydWN0dXJlLXR5cGUtcmVmLXNlcmlhbGl6ZXInO1xyXG5cclxuZXhwb3J0IGNsYXNzIFViY2NEYXRhVHlwZVNlcmlhbGl6ZXJGYWN0b3J5IGltcGxlbWVudHMgSURhdGFUeXBlU2VyaWFsaXplckZhY3Rvcnl7XHJcbiAgICBcclxuICAgIGdldChraW5kOiBzdHJpbmcpOiBJRGF0YVR5cGVTZXJpYWxpemVyIHtcclxuICAgICAgICBzd2l0Y2ggKGtpbmQpIHtcclxuICAgICAgICAgICAgY2FzZSBEYXRhVHlwZUV4dGVuc2lvbkNvbnN0LkhFTFBfVFlQRTpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgSGVscFR5cGVTZXJpYWx6aWVyKCk7XHJcbiAgICAgICAgICAgIGNhc2UgRGF0YVR5cGVFeHRlbnNpb25Db25zdC5VQkNDX1NUUlVDVFVSRV9UWVBFX1JFRjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU3RydWN0dXJlVHlwZVJlZlNlcmlhbGl6ZXIoKTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGVmYXVsdERhdGFUeXBlU2VyaWFsaXplckZhY3RvcnkoKS5nZXQoa2luZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufSJdfQ==