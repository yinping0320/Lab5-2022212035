/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/factory/ubcc-param-constraint-serializer-factory.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DefaultConstraintSerializer } from '@ecp-caf/common-structure';
import { ConstraintExtenionConst } from '../../../const/constraint-extension-const';
import { UbccIntegerConstraintSerializer } from '../constraint-serializer/integer-constraint-serializer';
import { UbccDecimalConstraintSerializer } from '../constraint-serializer/decimal-constraint-serializer';
import { UbccDateTimeConstraintSerializer } from '../constraint-serializer/date-time-constraint-serializer';
import { UbccStringConstraintSerializer } from '../constraint-serializer/string-constraint-serializer';
export class UbccParamConstraintSerializerFactory {
    /**
     * @param {?} kind
     * @return {?}
     */
    get(kind) {
        switch (kind) {
            case ConstraintExtenionConst.UBCC_INTEGER_CONSTRAINT:
                return new UbccIntegerConstraintSerializer();
            case ConstraintExtenionConst.UBCC_DECIMAL_CONSTRAINT:
                return new UbccDecimalConstraintSerializer();
            case ConstraintExtenionConst.UBCC_STRING_CONSTRAINT:
                return new UbccStringConstraintSerializer();
            case ConstraintExtenionConst.UBCC_DATE_TIME_CONSTRAINT:
                return new UbccDateTimeConstraintSerializer();
            default:
                return new DefaultConstraintSerializer();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWJjYy1wYXJhbS1jb25zdHJhaW50LXNlcmlhbGl6ZXItZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3AtY21wL3ViY2MtcGFyYW0tdm8vIiwic291cmNlcyI6WyJsaWIvdm8vc2VyaWFsaXplci9mYWN0b3J5L3ViY2MtcGFyYW0tY29uc3RyYWludC1zZXJpYWxpemVyLWZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQXlCLDJCQUEyQixFQUFnQyxNQUFNLDJCQUEyQixDQUFDO0FBQzdILE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQ3BGLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLHdEQUF3RCxDQUFDO0FBQ3pHLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLHdEQUF3RCxDQUFDO0FBQ3pHLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLDBEQUEwRCxDQUFDO0FBQzVHLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLHVEQUF1RCxDQUFDO0FBRXZHLE1BQU0sT0FBTyxvQ0FBb0M7Ozs7O0lBRTdDLEdBQUcsQ0FBQyxJQUFZO1FBQ1osUUFBUSxJQUFJLEVBQUU7WUFDVixLQUFLLHVCQUF1QixDQUFDLHVCQUF1QjtnQkFDaEQsT0FBTyxJQUFJLCtCQUErQixFQUFFLENBQUM7WUFDakQsS0FBSyx1QkFBdUIsQ0FBQyx1QkFBdUI7Z0JBQ2hELE9BQU8sSUFBSSwrQkFBK0IsRUFBRSxDQUFDO1lBQ2pELEtBQUssdUJBQXVCLENBQUMsc0JBQXNCO2dCQUMvQyxPQUFPLElBQUksOEJBQThCLEVBQUUsQ0FBQztZQUNoRCxLQUFLLHVCQUF1QixDQUFDLHlCQUF5QjtnQkFDbEQsT0FBTyxJQUFJLGdDQUFnQyxFQUFFLENBQUM7WUFDbEQ7Z0JBQ0ksT0FBTyxJQUFJLDJCQUEyQixFQUFFLENBQUM7U0FDaEQ7SUFDTCxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJQ29uc3RyYWludFNlcmlhbGl6ZXIsIERlZmF1bHRDb25zdHJhaW50U2VyaWFsaXplciwgSUNvbnN0cmFpbnRTZXJpYWxpemVyRmFjdG9yeSB9IGZyb20gJ0BlY3AtY2FmL2NvbW1vbi1zdHJ1Y3R1cmUnO1xyXG5pbXBvcnQgeyBDb25zdHJhaW50RXh0ZW5pb25Db25zdCB9IGZyb20gJy4uLy4uLy4uL2NvbnN0L2NvbnN0cmFpbnQtZXh0ZW5zaW9uLWNvbnN0JztcclxuaW1wb3J0IHsgVWJjY0ludGVnZXJDb25zdHJhaW50U2VyaWFsaXplciB9IGZyb20gJy4uL2NvbnN0cmFpbnQtc2VyaWFsaXplci9pbnRlZ2VyLWNvbnN0cmFpbnQtc2VyaWFsaXplcic7XHJcbmltcG9ydCB7IFViY2NEZWNpbWFsQ29uc3RyYWludFNlcmlhbGl6ZXIgfSBmcm9tICcuLi9jb25zdHJhaW50LXNlcmlhbGl6ZXIvZGVjaW1hbC1jb25zdHJhaW50LXNlcmlhbGl6ZXInO1xyXG5pbXBvcnQgeyBVYmNjRGF0ZVRpbWVDb25zdHJhaW50U2VyaWFsaXplciB9IGZyb20gJy4uL2NvbnN0cmFpbnQtc2VyaWFsaXplci9kYXRlLXRpbWUtY29uc3RyYWludC1zZXJpYWxpemVyJztcclxuaW1wb3J0IHsgVWJjY1N0cmluZ0NvbnN0cmFpbnRTZXJpYWxpemVyIH0gZnJvbSAnLi4vY29uc3RyYWludC1zZXJpYWxpemVyL3N0cmluZy1jb25zdHJhaW50LXNlcmlhbGl6ZXInO1xyXG5cclxuZXhwb3J0IGNsYXNzIFViY2NQYXJhbUNvbnN0cmFpbnRTZXJpYWxpemVyRmFjdG9yeSBpbXBsZW1lbnRzIElDb25zdHJhaW50U2VyaWFsaXplckZhY3Rvcnkge1xyXG5cclxuICAgIGdldChraW5kOiBzdHJpbmcpOiBJQ29uc3RyYWludFNlcmlhbGl6ZXIge1xyXG4gICAgICAgIHN3aXRjaCAoa2luZCkge1xyXG4gICAgICAgICAgICBjYXNlIENvbnN0cmFpbnRFeHRlbmlvbkNvbnN0LlVCQ0NfSU5URUdFUl9DT05TVFJBSU5UOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVYmNjSW50ZWdlckNvbnN0cmFpbnRTZXJpYWxpemVyKCk7XHJcbiAgICAgICAgICAgIGNhc2UgQ29uc3RyYWludEV4dGVuaW9uQ29uc3QuVUJDQ19ERUNJTUFMX0NPTlNUUkFJTlQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFViY2NEZWNpbWFsQ29uc3RyYWludFNlcmlhbGl6ZXIoKTtcclxuICAgICAgICAgICAgY2FzZSBDb25zdHJhaW50RXh0ZW5pb25Db25zdC5VQkNDX1NUUklOR19DT05TVFJBSU5UOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVYmNjU3RyaW5nQ29uc3RyYWludFNlcmlhbGl6ZXIoKTtcclxuICAgICAgICAgICAgY2FzZSBDb25zdHJhaW50RXh0ZW5pb25Db25zdC5VQkNDX0RBVEVfVElNRV9DT05TVFJBSU5UOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVYmNjRGF0ZVRpbWVDb25zdHJhaW50U2VyaWFsaXplcigpO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEZWZhdWx0Q29uc3RyYWludFNlcmlhbGl6ZXIoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0=