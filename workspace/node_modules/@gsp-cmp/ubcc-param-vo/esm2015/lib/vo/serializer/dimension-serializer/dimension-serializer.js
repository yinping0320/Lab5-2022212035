/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/dimension-serializer/dimension-serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Dimension } from '../../param-dimension/dimension';
import { DimensionItemSerializer } from './dimension-item-serializer';
export class DimensionSerializer {
    /**
     * @param {?} dimension
     * @return {?}
     */
    serialize(dimension) {
        /** @type {?} */
        let jobj = new Object();
        if (!dimension) {
            return null;
        }
        jobj['id'] = dimension.id;
        jobj['code'] = dimension.code;
        jobj['name'] = dimension.name;
        if (dimension.dimensionItems) {
            jobj['dimensionItems'] = [];
            /** @type {?} */
            let serializer = new DimensionItemSerializer();
            dimension.dimensionItems.forEach((/**
             * @param {?} dimensionItem
             * @return {?}
             */
            dimensionItem => {
                jobj['dimensionItems'].push(serializer.serialize(dimensionItem));
            }));
        }
        return jobj;
    }
    /**
     * @param {?} jobj
     * @return {?}
     */
    deserialize(jobj) {
        if (!jobj) {
            return null;
        }
        /** @type {?} */
        let dimension = new Dimension();
        dimension.id = jobj['id'];
        dimension.code = jobj['code'];
        dimension.name = jobj['name'];
        if (jobj['dimensionItems']) {
            dimension.dimensionItems = new Array();
            /** @type {?} */
            let serializer = new DimensionItemSerializer();
            jobj['dimensionItems'].forEach((/**
             * @param {?} dimensionItemJobj
             * @return {?}
             */
            dimensionItemJobj => {
                dimension.dimensionItems.push(serializer.deserialize(dimensionItemJobj));
            }));
        }
        return dimension;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGltZW5zaW9uLXNlcmlhbGl6ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLWNtcC91YmNjLXBhcmFtLXZvLyIsInNvdXJjZXMiOlsibGliL3ZvL3NlcmlhbGl6ZXIvZGltZW5zaW9uLXNlcmlhbGl6ZXIvZGltZW5zaW9uLXNlcmlhbGl6ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDNUQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFHdEUsTUFBTSxPQUFPLG1CQUFtQjs7Ozs7SUFFNUIsU0FBUyxDQUFDLFNBQW1COztZQUNyQixJQUFJLEdBQUMsSUFBSSxNQUFNLEVBQUU7UUFDckIsSUFBRyxDQUFDLFNBQVMsRUFBQztZQUNWLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQztRQUN4QixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztRQUM1QixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztRQUM1QixJQUFHLFNBQVMsQ0FBQyxjQUFjLEVBQUM7WUFDeEIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUMsRUFBRSxDQUFDOztnQkFDdEIsVUFBVSxHQUFDLElBQUksdUJBQXVCLEVBQUU7WUFDNUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxPQUFPOzs7O1lBQUMsYUFBYSxDQUFDLEVBQUU7Z0JBQzdDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7WUFDckUsQ0FBQyxFQUFDLENBQUM7U0FDTjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7Ozs7O0lBRUQsV0FBVyxDQUFDLElBQVc7UUFDbkIsSUFBRyxDQUFDLElBQUksRUFBQztZQUNMLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7O1lBQ0csU0FBUyxHQUFDLElBQUksU0FBUyxFQUFFO1FBQzdCLFNBQVMsQ0FBQyxFQUFFLEdBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pCLFNBQVMsQ0FBQyxJQUFJLEdBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdCLFNBQVMsQ0FBQyxJQUFJLEdBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdCLElBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUM7WUFDdEIsU0FBUyxDQUFDLGNBQWMsR0FBQyxJQUFJLEtBQUssRUFBaUIsQ0FBQzs7Z0JBQ2hELFVBQVUsR0FBQyxJQUFJLHVCQUF1QixFQUFFO1lBQzVDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLE9BQU87Ozs7WUFBQyxpQkFBaUIsQ0FBQyxFQUFFO2dCQUMvQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztZQUM3RSxDQUFDLEVBQUMsQ0FBQztTQUNOO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDckIsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGltZW5zaW9uIH0gZnJvbSAnLi4vLi4vcGFyYW0tZGltZW5zaW9uL2RpbWVuc2lvbic7XHJcbmltcG9ydCB7IERpbWVuc2lvbkl0ZW1TZXJpYWxpemVyIH0gZnJvbSAnLi9kaW1lbnNpb24taXRlbS1zZXJpYWxpemVyJztcclxuaW1wb3J0IHsgRGltZW5zaW9uSXRlbSB9IGZyb20gJy4uLy4uL3BhcmFtLWRpbWVuc2lvbi9kaW1lbnNpb24taXRlbSc7XHJcblxyXG5leHBvcnQgY2xhc3MgRGltZW5zaW9uU2VyaWFsaXplcntcclxuICAgIFxyXG4gICAgc2VyaWFsaXplKGRpbWVuc2lvbjpEaW1lbnNpb24pOk9iamVjdHtcclxuICAgICAgICBsZXQgam9iaj1uZXcgT2JqZWN0KCk7XHJcbiAgICAgICAgaWYoIWRpbWVuc2lvbil7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBqb2JqWydpZCddPWRpbWVuc2lvbi5pZDtcclxuICAgICAgICBqb2JqWydjb2RlJ109ZGltZW5zaW9uLmNvZGU7XHJcbiAgICAgICAgam9ialsnbmFtZSddPWRpbWVuc2lvbi5uYW1lO1xyXG4gICAgICAgIGlmKGRpbWVuc2lvbi5kaW1lbnNpb25JdGVtcyl7XHJcbiAgICAgICAgICAgIGpvYmpbJ2RpbWVuc2lvbkl0ZW1zJ109W107XHJcbiAgICAgICAgICAgIGxldCBzZXJpYWxpemVyPW5ldyBEaW1lbnNpb25JdGVtU2VyaWFsaXplcigpO1xyXG4gICAgICAgICAgICBkaW1lbnNpb24uZGltZW5zaW9uSXRlbXMuZm9yRWFjaChkaW1lbnNpb25JdGVtID0+IHtcclxuICAgICAgICAgICAgICAgIGpvYmpbJ2RpbWVuc2lvbkl0ZW1zJ10ucHVzaChzZXJpYWxpemVyLnNlcmlhbGl6ZShkaW1lbnNpb25JdGVtKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gam9iajtcclxuICAgIH1cclxuXHJcbiAgICBkZXNlcmlhbGl6ZShqb2JqOk9iamVjdCk6RGltZW5zaW9ue1xyXG4gICAgICAgIGlmKCFqb2JqKXtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBkaW1lbnNpb249bmV3IERpbWVuc2lvbigpO1xyXG4gICAgICAgIGRpbWVuc2lvbi5pZD0gam9ialsnaWQnXTtcclxuICAgICAgICBkaW1lbnNpb24uY29kZT0gam9ialsnY29kZSddO1xyXG4gICAgICAgIGRpbWVuc2lvbi5uYW1lPSBqb2JqWyduYW1lJ107XHJcbiAgICAgICAgaWYoam9ialsnZGltZW5zaW9uSXRlbXMnXSl7XHJcbiAgICAgICAgICAgIGRpbWVuc2lvbi5kaW1lbnNpb25JdGVtcz1uZXcgQXJyYXk8RGltZW5zaW9uSXRlbT4oKTtcclxuICAgICAgICAgICAgbGV0IHNlcmlhbGl6ZXI9bmV3IERpbWVuc2lvbkl0ZW1TZXJpYWxpemVyKCk7XHJcbiAgICAgICAgICAgIGpvYmpbJ2RpbWVuc2lvbkl0ZW1zJ10uZm9yRWFjaChkaW1lbnNpb25JdGVtSm9iaiA9PiB7XHJcbiAgICAgICAgICAgICAgICBkaW1lbnNpb24uZGltZW5zaW9uSXRlbXMucHVzaChzZXJpYWxpemVyLmRlc2VyaWFsaXplKGRpbWVuc2lvbkl0ZW1Kb2JqKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZGltZW5zaW9uO1xyXG4gICAgfVxyXG59Il19