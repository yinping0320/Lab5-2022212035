/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/template-serialzier/ubcc-param-template-serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { UbccParamTemplate } from '../../param-template-vo/ubcc-param-template';
import { UbccParamSerializerContext } from '../serializer-context/ubcc-serializer-context';
import { ParameterGroup } from '../../param-template-vo/parameter-group';
export class UbccParamTemplateSerializer {
    /**
     * @param {?} template
     * @return {?}
     */
    serialize(template) {
        /** @type {?} */
        let jobj = new Object();
        if (!template) {
            return null;
        }
        jobj['id'] = template.id;
        jobj['index'] = template.index;
        jobj['code'] = template.code;
        jobj['name'] = template.name;
        jobj['description'] = template.description;
        jobj['bizTypeId'] = template.bizTypeId;
        jobj['bizTypePath'] = template.bizTypePath;
        jobj['bizModule'] = template.bizModule;
        jobj['templateType'] = template.templateType;
        jobj['groupEnable'] = template.groupEnable;
        /** @type {?} */
        let context = new UbccParamSerializerContext();
        if (template.params) {
            jobj['params'] = new Array();
            template.params.forEach((/**
             * @param {?} param
             * @return {?}
             */
            param => {
                /** @type {?} */
                let paramJobj = new Object();
                /** @type {?} */
                let serializer = context.getParameterSerializerFactory().get(param.kind);
                paramJobj = serializer.serialize(param, context);
                jobj['params'].push(paramJobj);
            }));
        }
        if (template.structuredTypes) {
            jobj['structuredTypes'] = new Array();
            template.structuredTypes.forEach((/**
             * @param {?} structure
             * @return {?}
             */
            structure => {
                /** @type {?} */
                let structureJobj = new Object();
                /** @type {?} */
                let serializer = context.getDataTypeSerializerFactory().get(structure.kind);
                structureJobj = serializer.serialize(structure, context);
                jobj['structuredTypes'].push(structureJobj);
            }));
        }
        if (template.groups) {
            jobj['groups'] = new Array();
            template.groups.forEach((/**
             * @param {?} group
             * @return {?}
             */
            group => {
                jobj['groups'].push(group);
            }));
        }
        return jobj;
    }
    /**
     * @param {?} jobj
     * @return {?}
     */
    deserializer(jobj) {
        if (!jobj) {
            return null;
        }
        /** @type {?} */
        let template = new UbccParamTemplate();
        template.id = jobj['id'];
        template.index = (/** @type {?} */ (jobj['index']));
        template.code = jobj['code'];
        template.name = jobj['name'];
        template.description = jobj['description'];
        template.bizTypeId = jobj['bizTypeId'];
        template.bizTypePath = jobj['bizTypePath'];
        template.bizModule = jobj['bizModule'];
        template.templateType = jobj['templateType'];
        template.groupEnable = jobj['groupEnable'];
        /** @type {?} */
        let context = new UbccParamSerializerContext();
        if (jobj['params']) {
            template.params = new Array();
            jobj['params'].forEach((/**
             * @param {?} paramJobj
             * @return {?}
             */
            paramJobj => {
                /** @type {?} */
                let serializer = context.getParameterSerializerFactory().get(paramJobj['kind']);
                /** @type {?} */
                let param = serializer.deserialize(paramJobj, context);
                template.params.push(param);
            }));
        }
        if (jobj['structuredTypes']) {
            template.structuredTypes = new Array();
            jobj['structuredTypes'].forEach((/**
             * @param {?} structurJobj
             * @return {?}
             */
            structurJobj => {
                /** @type {?} */
                let serializer = context.getDataTypeSerializerFactory().get(structurJobj['kind']);
                /** @type {?} */
                let structure = (/** @type {?} */ (serializer.deserialize(structurJobj, context)));
                template.structuredTypes.push(structure);
            }));
        }
        if (jobj['groups']) {
            template.groups = new Array();
            jobj['groups'].forEach((/**
             * @param {?} groupJobj
             * @return {?}
             */
            groupJobj => {
                template.groups.push(Object.assign(new ParameterGroup(), groupJobj));
            }));
        }
        return template;
    }
}
//# sourceMappingURL=data:application/json;base64,