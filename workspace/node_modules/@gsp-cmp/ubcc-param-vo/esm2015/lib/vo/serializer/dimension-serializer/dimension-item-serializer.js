/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo/serializer/dimension-serializer/dimension-item-serializer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DimensionItem } from '../../param-dimension/dimension-item';
import { SerializerUtils } from '../../utils/serializer-utils';
export class DimensionItemSerializer {
    /**
     * @param {?} dimensionItem
     * @return {?}
     */
    serialize(dimensionItem) {
        /** @type {?} */
        let jobj = new Object();
        if (!dimensionItem) {
            return null;
        }
        jobj['id'] = dimensionItem.id;
        jobj['index'] = dimensionItem.index;
        jobj['code'] = dimensionItem.code;
        jobj['name'] = dimensionItem.name;
        if (dimensionItem.dataType) {
            /** @type {?} */
            let context = SerializerUtils.getContext();
            /** @type {?} */
            let serializer = context.getDataTypeSerializerFactory().get(dimensionItem.dataType.kind);
            jobj['dataType'] = serializer.serialize(dimensionItem.dataType, context);
            //dataType作为字符串存
            jobj['dataType'] = JSON.stringify(jobj['dataType']);
        }
        return jobj;
    }
    /**
     * @param {?} jobj
     * @return {?}
     */
    deserialize(jobj) {
        if (!jobj) {
            return null;
        }
        /** @type {?} */
        let dimensionItem = new DimensionItem();
        dimensionItem.id = jobj['id'];
        dimensionItem.index = (/** @type {?} */ (jobj['index']));
        dimensionItem.code = jobj['code'];
        dimensionItem.name = jobj['name'];
        if (jobj['dataType']) {
            //dataType作为字符串存
            jobj['dataType'] = JSON.parse(jobj['dataType']);
            /** @type {?} */
            let context = SerializerUtils.getContext();
            /** @type {?} */
            let kind = jobj['dataType']['kind'];
            /** @type {?} */
            let serializer = context.getDataTypeSerializerFactory().get(kind);
            dimensionItem.dataType = (/** @type {?} */ (serializer.deserialize(jobj['dataType'], context)));
        }
        return dimensionItem;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGltZW5zaW9uLWl0ZW0tc2VyaWFsaXplci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3AtY21wL3ViY2MtcGFyYW0tdm8vIiwic291cmNlcyI6WyJsaWIvdm8vc2VyaWFsaXplci9kaW1lbnNpb24tc2VyaWFsaXplci9kaW1lbnNpb24taXRlbS1zZXJpYWxpemVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBRXJFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUUvRCxNQUFNLE9BQU8sdUJBQXVCOzs7OztJQUVoQyxTQUFTLENBQUMsYUFBMkI7O1lBQzdCLElBQUksR0FBQyxJQUFJLE1BQU0sRUFBRTtRQUNyQixJQUFHLENBQUMsYUFBYSxFQUFDO1lBQ2QsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsR0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDO1FBQ2hDLElBQUcsYUFBYSxDQUFDLFFBQVEsRUFBQzs7Z0JBQ2xCLE9BQU8sR0FBQyxlQUFlLENBQUMsVUFBVSxFQUFFOztnQkFDcEMsVUFBVSxHQUFDLE9BQU8sQ0FBQyw0QkFBNEIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztZQUN0RixJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3RFLGdCQUFnQjtZQUNoQixJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztTQUNyRDtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7Ozs7O0lBRUQsV0FBVyxDQUFDLElBQVc7UUFDbkIsSUFBRyxDQUFDLElBQUksRUFBQztZQUNMLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7O1lBQ0csYUFBYSxHQUFDLElBQUksYUFBYSxFQUFFO1FBQ3JDLGFBQWEsQ0FBQyxFQUFFLEdBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVCLGFBQWEsQ0FBQyxLQUFLLEdBQUMsbUJBQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFVLENBQUM7UUFDNUMsYUFBYSxDQUFDLElBQUksR0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDaEMsYUFBYSxDQUFDLElBQUksR0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDaEMsSUFBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUM7WUFDaEIsZ0JBQWdCO1lBQ2hCLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDOztnQkFFMUMsT0FBTyxHQUFDLGVBQWUsQ0FBQyxVQUFVLEVBQUU7O2dCQUNwQyxJQUFJLEdBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQU0sQ0FBQzs7Z0JBQzdCLFVBQVUsR0FBQyxPQUFPLENBQUMsNEJBQTRCLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO1lBQy9ELGFBQWEsQ0FBQyxRQUFRLEdBQUMsbUJBQUEsVUFBVSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUMsT0FBTyxDQUFDLEVBQVksQ0FBQztTQUN2RjtRQUNELE9BQU8sYUFBYSxDQUFDO0lBQ3pCLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpbWVuc2lvbkl0ZW0gfSBmcm9tICcuLi8uLi9wYXJhbS1kaW1lbnNpb24vZGltZW5zaW9uLWl0ZW0nO1xyXG5pbXBvcnQgeyBEYXRhVHlwZSB9IGZyb20gJ0BlY3AtY2FmL2NvbW1vbi1zdHJ1Y3R1cmUnO1xyXG5pbXBvcnQgeyBTZXJpYWxpemVyVXRpbHMgfSBmcm9tICcuLi8uLi91dGlscy9zZXJpYWxpemVyLXV0aWxzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBEaW1lbnNpb25JdGVtU2VyaWFsaXplcntcclxuXHJcbiAgICBzZXJpYWxpemUoZGltZW5zaW9uSXRlbTpEaW1lbnNpb25JdGVtKTpPYmplY3R7XHJcbiAgICAgICAgbGV0IGpvYmo9bmV3IE9iamVjdCgpO1xyXG4gICAgICAgIGlmKCFkaW1lbnNpb25JdGVtKXtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGpvYmpbJ2lkJ109ZGltZW5zaW9uSXRlbS5pZDtcclxuICAgICAgICBqb2JqWydpbmRleCddPWRpbWVuc2lvbkl0ZW0uaW5kZXg7XHJcbiAgICAgICAgam9ialsnY29kZSddPWRpbWVuc2lvbkl0ZW0uY29kZTtcclxuICAgICAgICBqb2JqWyduYW1lJ109ZGltZW5zaW9uSXRlbS5uYW1lO1xyXG4gICAgICAgIGlmKGRpbWVuc2lvbkl0ZW0uZGF0YVR5cGUpe1xyXG4gICAgICAgICAgICBsZXQgY29udGV4dD1TZXJpYWxpemVyVXRpbHMuZ2V0Q29udGV4dCgpO1xyXG4gICAgICAgICAgICBsZXQgc2VyaWFsaXplcj1jb250ZXh0LmdldERhdGFUeXBlU2VyaWFsaXplckZhY3RvcnkoKS5nZXQoZGltZW5zaW9uSXRlbS5kYXRhVHlwZS5raW5kKTtcclxuICAgICAgICAgICAgam9ialsnZGF0YVR5cGUnXT1zZXJpYWxpemVyLnNlcmlhbGl6ZShkaW1lbnNpb25JdGVtLmRhdGFUeXBlLGNvbnRleHQpO1xyXG4gICAgICAgICAgICAvL2RhdGFUeXBl5L2c5Li65a2X56ym5Liy5a2YXHJcbiAgICAgICAgICAgIGpvYmpbJ2RhdGFUeXBlJ109SlNPTi5zdHJpbmdpZnkoam9ialsnZGF0YVR5cGUnXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBqb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIGRlc2VyaWFsaXplKGpvYmo6T2JqZWN0KTpEaW1lbnNpb25JdGVte1xyXG4gICAgICAgIGlmKCFqb2JqKXtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBkaW1lbnNpb25JdGVtPW5ldyBEaW1lbnNpb25JdGVtKCk7XHJcbiAgICAgICAgZGltZW5zaW9uSXRlbS5pZD1qb2JqWydpZCddO1xyXG4gICAgICAgIGRpbWVuc2lvbkl0ZW0uaW5kZXg9am9ialsnaW5kZXgnXSBhcyBudW1iZXI7XHJcbiAgICAgICAgZGltZW5zaW9uSXRlbS5jb2RlPWpvYmpbJ2NvZGUnXTtcclxuICAgICAgICBkaW1lbnNpb25JdGVtLm5hbWU9am9ialsnbmFtZSddO1xyXG4gICAgICAgIGlmKGpvYmpbJ2RhdGFUeXBlJ10pe1xyXG4gICAgICAgICAgICAvL2RhdGFUeXBl5L2c5Li65a2X56ym5Liy5a2YXHJcbiAgICAgICAgICAgIGpvYmpbJ2RhdGFUeXBlJ109SlNPTi5wYXJzZShqb2JqWydkYXRhVHlwZSddKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb250ZXh0PVNlcmlhbGl6ZXJVdGlscy5nZXRDb250ZXh0KCk7XHJcbiAgICAgICAgICAgIGxldCBraW5kPWpvYmpbJ2RhdGFUeXBlJ11bJ2tpbmQnXTtcclxuICAgICAgICAgICAgbGV0IHNlcmlhbGl6ZXI9Y29udGV4dC5nZXREYXRhVHlwZVNlcmlhbGl6ZXJGYWN0b3J5KCkuZ2V0KGtpbmQpO1xyXG4gICAgICAgICAgICBkaW1lbnNpb25JdGVtLmRhdGFUeXBlPXNlcmlhbGl6ZXIuZGVzZXJpYWxpemUoam9ialsnZGF0YVR5cGUnXSxjb250ZXh0KSBhcyBEYXRhVHlwZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGRpbWVuc2lvbkl0ZW07XHJcbiAgICB9XHJcbn0iXX0=