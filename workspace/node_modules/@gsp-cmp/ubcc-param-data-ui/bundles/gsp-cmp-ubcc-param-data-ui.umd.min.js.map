{"version":3,"sources":["ng://@gsp-cmp/ubcc-param-data-ui/lib/ubcc-param-data-ui/ubcc-param-data-ui.component.ts","ng://@gsp-cmp/ubcc-param-data-ui/lib/service/http-service.ts","ng://@gsp-cmp/ubcc-param-data-ui/lib/utils/param-data-utils.ts","ng://@gsp-cmp/ubcc-param-data-ui/lib/ubcc-param-data-ui-dialog/ubcc-param-data-ui-dialog.component.ts","ng://@gsp-cmp/ubcc-param-data-ui/lib/ubcc-param-dimension-ui-root/ubcc-param-dimension-ui-root.component.ts","ng://@gsp-cmp/ubcc-param-data-ui/lib/service/event-bus-service.ts","ng://@gsp-cmp/ubcc-param-data-ui/lib/ubcc-param-data-ui-root.component.ts","ng://@gsp-cmp/ubcc-param-data-ui/lib/service/lookup-http-service.ts","ng://@gsp-cmp/ubcc-param-data-ui/lib/common/look-up-binding-fields.ts","ng://@gsp-cmp/ubcc-param-data-ui/lib/controls/dimension-control/dimension-lookup-control/dimension-lookup-control.component.ts","ng://@gsp-cmp/ubcc-param-data-ui/lib/controls/dimension-control/dimension-dropdownlist-control/dimension-dropdownlist-control.component.ts","ng://@gsp-cmp/ubcc-param-data-ui/lib/controls/dimension-control/dimension-input-control/dimension-input-control.component.ts","ng://@gsp-cmp/ubcc-param-data-ui/lib/controls/param-control/checkbox-control/checkbox-control.component.ts","ng://@gsp-cmp/ubcc-param-data-ui/lib/controls/param-control/input-control/input-control.component.ts","ng://@gsp-cmp/ubcc-param-data-ui/lib/controls/param-control/date-control/date-control.component.ts","ng://@gsp-cmp/ubcc-param-data-ui/lib/controls/param-control/dropdownlist-control/dropdownlist-control.component.ts","ng://@gsp-cmp/ubcc-param-data-ui/lib/controls/param-control/lookup-control/lookup-control.component.ts","ng://@gsp-cmp/ubcc-param-data-ui/lib/controls/param-control/number-control/number-control.component.ts","ng://@gsp-cmp/ubcc-param-data-ui/lib/ubcc-param-data-ui.service.ts","ng://@gsp-cmp/ubcc-param-data-ui/lib/ubcc-param-dimension-ui/ubcc-param-dimension-ui.component.ts","ng://@gsp-cmp/ubcc-param-data-ui/lib/ubcc-param-data-ui-root.module.ts","ng://@gsp-cmp/ubcc-param-data-ui/lib/common/dialog-result.ts"],"names":["UbccParamDataUiComponent","this","paramDataItems","canEdit","prototype","ngOnInit","template","UbccParamTemplate","params","groups","getControlType","param","parameterType","parameterTypeDesc","getParamItems","group","filter","x","groupId","getIndex","index","currentGroupParams","currentParam","find","id","findIndex","show","visible","isCollection","getKind","DataTypeConst","DEFAULT_COLLECTION","Component","args","selector","encapsulation","ViewEncapsulation","None","Input","UBCC_PARAM_TEMPLATE_GET_BY_ID","UBCC_PARAM_TEMPLATE_ROUTER","UBCC_PARAM_DATA_ROUTER","UBCC_PARAM_DATA_GET_BY_ID","UBCC_DIMENSION_PARAM_DATA_GET_BY_ID","UbccParamDataManangerService","http","cache","httpHeaders","HttpHeaders","set","getUserSessionId","getParamTemplate","url","replace","get","headers","getParamData","templateId","bizTypeId","getDimensionData","dimension1","dimension2","dimensionCount","saveDimensionAndParamData","dimensionValues","paramValues","body","post","saveParamData","getHelpData","helpId","dataIds","join","Injectable","providedIn","HttpClient","SessionService","UbccParamDataUtils","messagerService","notify","isHelpType","dataType","elementType","getCollectionElementType","isHelpTypeRef","kind","DataTypeExtensionConst","UBCC_STRUCTURE_TYPE_REF","type","StructureTypeRefEnum","HELP","getModalConfig","btnRef","title","width","height","resizable","showButtons","showMaxButton","enableScroll","buttons","showInfo","message","infoType","timeout","config","position","success","msg","info","warning","error","newGuid","s4","Math","random","toString","substring","MessagerService","NotifyService","UbccParamDataUiDialogComponent","utils","_this","confirmEmitter","EventEmitter","closeEmitter","close","dialog","emit","Object","defineProperty","data","_data","loadParamData","subscribe","vo","content","serializer","UbccParamTemplateSerializer","deserializer","JSON","parse","getParamDataItemsStructure","convertJsonToParamData","keys","length","map","item","key","code","value","refId","result","values","resItem","push","text","valueText","covertParamDataToJson","object","itemValues","split","itemValue","itemTextValues","itemTextValue","confirm","jsonData","Output","ViewChild","UbccParamDimensionUiRootComponent","dimensionItemDatas","UbccEventBusService","ebs","UbccParamDataUiRootComponent","ebsService","resolver","_canEdit","paramDataItemsClone","templateSerializer","assignmentSerializer","UbccParamTemplateAssignmentSerializer","event","loadDimensionDataFromRemote","assignment","_assignment","loadData","currentInstance","UbccParamTemplateAssignment","ngOnDestroy","paramDataPanel","clear","load","err","paramDataItemsInit","useDimension","dimensionDataItemsInit","createDimensionRootUiComponent","dataItems","getParamValues","createParamDataUiComponent","paramDataItem","dataCode","dataValue","dataValueText","paramValuesClone","target","source","paramDataItemClone","dimensionItemValues","count","serialize","dimensionParamDefaultValueInit","defaultValue","paramDataItemsCloneInit","paramData","deserialize","dimensionInfo","definition","dimensionItems","forEach","dimensionData","factory","resolveComponentFactory","cmpRef","createComponent","instance","convertDimensionDataToDataVo","Array","dimensionValue","DataItem","getDimensionValueType","convertParamDataToDataVo","paramValue","getParamValueType","DEFAULT_PRIMITIVE","primitiveTypeKind","DEFAULT_ENUMERATION","HELP_TYPE","Error","elemetType","PrimitiveTypeKind","refType","cancel","providers","ComponentFactoryResolver","read","ViewContainerRef","LookUpHttpService","getData","uri","includes","of","queryParam","stringify","encodeURIComponent","LookUpBindingFields","displayType","BCC_HELP_URL","DimensionLookupControlComponent","metadataRTService","isSingleSelect","isHelpInfoLoad","helpUrl","dimensionItem","bindingFields","helpConfigInit","ngOnChanges","changes","selectedHelpHandler","$event","idField","helpType","loadDataFromMetadata","GetMetadataRT","metadataDto","helpMetadata","setHelpInfo","textField","valueField","provide","ServerSideToken","useClass","GSPMetadataRTService","DimensionDropdownlistControlComponent","valueChangeEmit","enumerationItems","isMultiSelect","isEnumInfoLoad","enumConfigInit","getEnumItems","enumType","valueChangeHandler","DimensionInputControlComponent","ngModelChangeHandler","CheckboxControlComponent","service","checkboxId","getValue","String","toLowerCase","enable","isReadonly","readonly","description","InputControlComponent","DateControlComponent","dateTimeValueChange","jsDate","DropdownlistControlComponent","structuredTypes","typeRef","LookupControlComponent","selectItem","NumberControlComponent","precision","max","NaN","min","constraint","Number","getUnit","unit","UbccParamDataUiService","injector","util","modalService","create","modalConfig","confirmEvent","closeEvent","Injector","BsModalService","UbccParamDimensionUiComponent","UbccParamDataUiRootModule","NgModule","declarations","imports","CommonModule","FormsModule","ReactiveFormsModule","ButtonsModule","InputGroupModule","HttpClientModule","LoadingModule","forRoot","NotifyModule","ModalModule","MessagerModule","FarrisDialogModule","LookupModule","FarrisButtonModule","FarrisDatePickerModule","ComboListModule","FarrisSectionModule","NumberSpinnerModule","FarrisTooltipModule","FarrisPanelModule","GSPMetadataRTServiceModule","FrameworkService","HttpService","CacheService","FrmEventBus","FuncsService","LoadingService","entryComponents","exports","DialogResult"],"mappings":"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","sourcesContent":["import { Component, OnInit, Input, ViewEncapsulation } from '@angular/core';\nimport { UbccParamTemplate, ParameterGroup } from '@gsp-cmp/ubcc-param-vo';\nimport { DataTypeConst } from '@ecp-caf/common-structure';\n\n@Component({\n    selector: 'lib-ubcc-param-data-ui',\n    templateUrl: './ubcc-param-data-ui.component.html',\n    styleUrls: ['./ubcc-param-data-ui.component.css'],\n    encapsulation:ViewEncapsulation.None\n})\nexport class UbccParamDataUiComponent implements OnInit {\n\n    @Input() template:UbccParamTemplate;\n\n    @Input() paramDataItems:any=[];\n\n    @Input() canEdit:boolean=true;\n\n    constructor() { }\n\n    ngOnInit() {\n        this.template=this.template||new UbccParamTemplate();\n        this.template.params=this.template.params||[];\n        this.template.groups=this.template.groups||[];\n    }\n\n    getControlType(param:any){\n        if(!param||!param.parameterType||!param.parameterTypeDesc){\n            return;\n        }\n        switch(param.parameterTypeDesc){\n            case 'string':\n                return 'input';\n            case 'bool':\n                return 'checkbox';\n            case 'double':\n            case 'int':\n                return 'number';\n            case 'datetime':\n                return 'date';\n            case 'enum':\n                return 'dropdownlist';\n            case 'help':\n                return 'lookup';\n            default:\n                return 'input';\n        }\n    }\n\n    getParamItems(group:ParameterGroup){\n        return this.paramDataItems.filter(x=>x.groupId===group.groupId);\n    }\n\n    getIndex(group:ParameterGroup,index:number){\n        let currentGroupParams=this.getParamItems(group);\n        let currentParam= this.paramDataItems.find(x=>x.id===currentGroupParams[index].id);\n        let realIndex= this.paramDataItems.findIndex(x=>x.id===currentParam.id);\n        return realIndex;\n    }\n\n    show(param:any){\n        return param.visible||false;\n    }\n\n    isCollection(param:any){\n        if(!param||!param.parameterType){\n            return false;\n        }\n        if(param.parameterType.getKind()===DataTypeConst.DEFAULT_COLLECTION){\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n\n}\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { SessionService } from '@ecp-caf/caf-common';\r\nimport { Observable } from 'rxjs';\r\nimport { DataItem } from '@gsp-cmp/ubcc-param-vo';\r\n\r\nconst UBCC_PARAM_TEMPLATE_ROUTER = '/api/runtime/bcc/v1.0/param/template/definition';\r\nconst UBCC_PARAM_TEMPLATE_GET_BY_ID = `${UBCC_PARAM_TEMPLATE_ROUTER}/{id}`;\r\n\r\nconst UBCC_PARAM_DATA_ROUTER = '/api/runtime/bcc/v1.0/param/data';\r\n\r\nconst UBCC_PARAM_DATA = UBCC_PARAM_DATA_ROUTER;\r\nconst UBCC_PARAM_DATA_DIMENSION = `${UBCC_PARAM_DATA_ROUTER}/dimensionalData`;\r\n\r\nconst UBCC_PARAM_DATA_GET_BY_ID = `${UBCC_PARAM_DATA_ROUTER}/{templateId}/{bizTypeId}`;\r\nconst UBCC_DIMENSION_PARAM_DATA_GET_BY_ID = `${UBCC_PARAM_DATA_ROUTER}/{templateId}/{bizTypeId}/dimensions/paramdatas`;\r\n\r\nconst UBCC_PARAM_HELP_DATA_ROUTER = `/api/runtime/bcc/v1.0/param/help/{helpId}/{dataIds}`;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UbccParamDataManangerService {\r\n\r\n    httpHeaders: HttpHeaders;\r\n\r\n    constructor(private http: HttpClient, private cache: SessionService) {\r\n        this.httpHeaders = new HttpHeaders();\r\n        this.httpHeaders.set(\"sessionid\", this.cache.getUserSessionId());\r\n    }\r\n\r\n    getParamTemplate(id: string): Observable<any> {\r\n        let url = UBCC_PARAM_TEMPLATE_GET_BY_ID.replace('{id}', id);\r\n        return this.http.get(url, { headers: this.httpHeaders });\r\n    }\r\n\r\n    getParamData(templateId: string, bizTypeId: string): Observable<any> {\r\n        let url = UBCC_PARAM_DATA_GET_BY_ID.replace('{templateId}', templateId).replace('{bizTypeId}', bizTypeId);\r\n        return this.http.get(url, { headers: this.httpHeaders });\r\n    }\r\n\r\n    getDimensionData(templateId: string, bizTypeId: string, dimension1: string,dimension2:string,dimensionCount:number): Observable<any> {\r\n        let url = UBCC_DIMENSION_PARAM_DATA_GET_BY_ID.replace('{templateId}', templateId).replace('{bizTypeId}', bizTypeId);\r\n        if(dimensionCount===1){\r\n            url=`${url}?dimension1=${dimension1}&dimensionCount=${dimensionCount}`;\r\n        }\r\n        if(dimensionCount===2){\r\n            url=`${url}?dimension1=${dimension1}&dimension2=${dimension2}&dimensionCount=${dimensionCount}`;\r\n        }\r\n        return this.http.get(url, { headers: this.httpHeaders });\r\n    }\r\n\r\n    saveDimensionAndParamData(templateId: string, bizTypeId: string, dimensionValues: Array<DataItem>, paramValues: Array<DataItem>): Observable<any> {\r\n        let url = UBCC_PARAM_DATA_DIMENSION;\r\n        let body = {\r\n            templateId: templateId,\r\n            bizTypeId: bizTypeId,\r\n            dimensionValues: dimensionValues,\r\n            paramValues: paramValues\r\n        }\r\n        return this.http.post(url, body, { headers: this.httpHeaders });\r\n    }\r\n\r\n    saveParamData(templateId: string, bizTypeId: string, paramValues: Array<DataItem>): Observable<any> {\r\n        let url = UBCC_PARAM_DATA;\r\n        let body = {\r\n            templateId: templateId,\r\n            bizTypeId: bizTypeId,\r\n            paramValues: paramValues\r\n        }\r\n        return this.http.post(url, body, { headers: this.httpHeaders });\r\n    }\r\n\r\n    getHelpData(helpId: string, dataIds: Array<string>) {\r\n        let url = UBCC_PARAM_HELP_DATA_ROUTER.replace('{helpId}', helpId).replace('{dataIds}', dataIds.join(','));\r\n        return this.http.get(url, { headers: this.httpHeaders });\r\n    }\r\n}","import { Injectable, TemplateRef } from '@angular/core';\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { NotifyService, NotifyOptions } from '@farris/ui-notify';\r\nimport { IDataType, DataTypeConst, CollectionType } from '@ecp-caf/common-structure';\r\nimport { DataTypeExtensionConst, StructureTypeRef, StructureTypeRefEnum } from '@gsp-cmp/ubcc-param-vo';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class UbccParamDataUtils {\r\n\r\n    constructor(private messagerService:MessagerService,private notify:NotifyService){}\r\n\r\n\r\n    public isHelpType(dataType:IDataType){\r\n        if(!dataType){\r\n            return false;\r\n        }\r\n        if(this.isCollection(dataType)){\r\n            let elementType=this.getCollectionElementType(dataType);\r\n            return this.isHelpTypeRef(elementType);\r\n        }\r\n        else{\r\n            return this.isHelpTypeRef(dataType);\r\n        }\r\n    }\r\n\r\n    public isHelpTypeRef(dataType:IDataType){\r\n        let kind=dataType.getKind();\r\n        if(!kind){\r\n            return false;\r\n        }\r\n        if(kind===DataTypeExtensionConst.UBCC_STRUCTURE_TYPE_REF){\r\n            let refType=dataType as StructureTypeRef;\r\n            if(refType.type===StructureTypeRefEnum.HELP){\r\n                return true;\r\n            }\r\n            else{\r\n                return false;\r\n            }\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // private getHelpData(data:any,paramDataItem:any){\r\n    //     if(!data.dataValue){\r\n    //         return;\r\n    //     }\r\n    //     if (data.dataValueText) {\r\n    //         paramDataItem.valueText = data.dataValueText;\r\n    //     }\r\n    //     else {\r\n    //         let dataId = data.dataValue.split(',');\r\n    //         let helpId=this.getHelpId(paramDataItem.parameterType);\r\n    //         this.http.getHelpData(helpId, dataId).subscribe(\r\n    //             (helpDataItems: Array<HelpDataItem>) => {\r\n    //                 if (!helpDataItems) {\r\n    //                     return;\r\n    //                 }\r\n    //                 let texts=[];\r\n    //                 helpDataItems.map(helpDataItem => texts.push(helpDataItem.text));\r\n    //                 paramDataItem.valueText=texts.join(',');\r\n    //             }\r\n    //         );\r\n    //     }\r\n    // }\r\n\r\n    // private getHelpId(dataType:IDataType){\r\n    //     if(this.isCollection(dataType)){\r\n    //         let refType=this.getCollectionElementType(dataType) as StructureTypeRef;\r\n    //         return refType&&refType.refId?refType.refId:null;\r\n    //     }\r\n    //     else{\r\n    //         let refType=dataType as StructureTypeRef;\r\n    //         return refType&&refType.refId?refType.refId:null;\r\n    //     }\r\n    // }\r\n\r\n    public getCollectionElementType(dataType: IDataType) {\r\n        let kind = dataType.getKind();\r\n        switch (kind) {\r\n            case DataTypeConst.DEFAULT_COLLECTION:\r\n                let elementType = (dataType as CollectionType).elementType;\r\n                return this.getCollectionElementType(elementType);\r\n            default:\r\n                return dataType;\r\n        }\r\n    }\r\n\r\n    public isCollection(dataType:IDataType) {\r\n        if(!dataType){\r\n            return false;\r\n        }\r\n        if (dataType.getKind() === DataTypeConst.DEFAULT_COLLECTION) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public getModalConfig(btnRef: TemplateRef<any>) {\r\n        return {\r\n            title: 'åæ°éç½®',\r\n            width: 650,\r\n            height: 560,\r\n            resizable:true,\r\n            showButtons: true,\r\n            showMaxButton: false,\r\n            enableScroll: false,\r\n            buttons: btnRef\r\n        };\r\n    }\r\n\r\n    public showInfo(message: string, infoType: string, title: string, timeout: number) {\r\n        this.notify.config.position = 'top-center';\r\n        if (infoType == 'success') {\r\n            this.notify.success(<NotifyOptions>{ title: title, msg: message, timeout: timeout });\r\n        }\r\n        else if (infoType == 'info') {\r\n            this.notify.info(<NotifyOptions>{ title: title, msg: message, timeout: timeout });\r\n        }\r\n        else if (infoType == 'warning') {\r\n            this.notify.warning(<NotifyOptions>{ title: title, msg: message, timeout: timeout });\r\n        }\r\n        else if (infoType == 'error') {\r\n            this.notify.error(<NotifyOptions>{ title: title, msg: message, timeout: timeout });\r\n        }\r\n    }\r\n\r\n    newGuid() {\r\n        return (this.s4() + this.s4() + \"-\" + this.s4() + \"-\" + this.s4() + \"-\" + this.s4() + \"-\" + this.s4() + this.s4() + this.s4());\r\n    }\r\n\r\n    s4() {\r\n        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n    }\r\n\r\n}","import { Component, OnInit, Output, EventEmitter, Input, TemplateRef, ViewChild } from '@angular/core';\nimport { UbccParamTemplate, UbccParamTemplateVo, UbccParamTemplateSerializer, StructureTypeRef } from '@gsp-cmp/ubcc-param-vo';\nimport { BsModalRef } from '@farris/ui-modal';\nimport { UbccParamDataManangerService } from '../service/http-service';\nimport { Parameter, DataTypeConst } from '@ecp-caf/common-structure';\nimport { BaseParamData } from '../common/parameter-data/base-param-data';\nimport { HelpDataItem } from '../common/help-data-item/help-data-item';\nimport { UbccParamDataUtils } from '../utils/param-data-utils';\n\n@Component({\n    selector: 'lib-ubcc-param-data-ui-dialog',\n    templateUrl: './ubcc-param-data-ui-dialog.component.html',\n    styleUrls: ['./ubcc-param-data-ui-dialog.component.css']\n})\nexport class UbccParamDataUiDialogComponent implements OnInit {\n\n    template: UbccParamTemplate;\n\n    _data: any;\n\n    @Input() templateId: string;\n\n    /**\n     * è¾å¥æ°æ®ä¸ºJSONå¯¹è±¡\n     */\n    @Input() set data(data: any) {\n        this._data = data;\n        this.loadParamData(this.templateId);\n    }\n\n    paramDataItems: Array<Parameter> = [];\n\n    @Output() confirmEmitter: EventEmitter<any> = new EventEmitter<any>();\n\n    @Output() closeEmitter: EventEmitter<any> = new EventEmitter<any>();\n\n    @ViewChild('btnRef') btnRef: TemplateRef<any>;\n\n    dialog: BsModalRef;\n\n    constructor(\n        private utils:UbccParamDataUtils,\n        private http: UbccParamDataManangerService) { }\n\n    ngOnInit() {\n        this.template = this.template || new UbccParamTemplate();\n    }\n\n    private loadParamData(templateId: string) {\n        if (!templateId) {\n            return;\n        }\n        this.http.getParamTemplate(templateId).subscribe(\n            (vo: UbccParamTemplateVo) => {\n                if (!vo.content) {\n                    return;\n                }\n                let serializer = new UbccParamTemplateSerializer();\n                this.template = serializer.deserializer(JSON.parse(vo.content));\n                this.getParamDataItemsStructure();\n                this.convertJsonToParamData();\n            }\n        )\n    }\n\n    private convertJsonToParamData() {\n        if (!this._data || Object.keys(this._data).length <= 0) {\n            return;\n        }\n        this.paramDataItems.map((item: BaseParamData) => {\n            let key = Object.keys(this._data).find(x => x === item.code);\n            if (!key || !this._data[key]) {\n                return;\n            }\n            if (this.isCollection(item)) {\n                //åæ°çå¼å¦ææ¯æ°ç»ï¼ä»¥éå·éå¼\n                item.value = this._data[key].join(',');\n                if (!this.utils.isHelpType(item.parameterType)) {\n                    return;\n                }\n                let helpId = (this.utils.getCollectionElementType(item.parameterType) as StructureTypeRef).refId;\n                this.http.getHelpData(helpId, this._data[key]).subscribe(\n                    (result: Array<HelpDataItem>) => {\n                        if (!result || result.length <= 0) {\n                            return;\n                        }\n                        let values = [];\n                        result.map(resItem => values.push(resItem.text));\n                        item.valueText = values.join(',');\n                    }\n                )\n            }\n            else {\n                item.value = this._data[key];\n                if (item.parameterTypeDesc !== 'help') {\n                    return;\n                }\n                let helpId = (item.parameterType as StructureTypeRef).refId;\n                this.http.getHelpData(helpId, [item.value]).subscribe(\n                    (result: Array<HelpDataItem>) => {\n                        if (!result || result.length <= 0) {\n                            return;\n                        }\n                        item.valueText = result[0].text;\n                    }\n                )\n            }\n        })\n    }\n\n    private getParamDataItemsStructure() {\n        if (!this.template || !this.template.params) {\n            return;\n        }\n        this.paramDataItems = [];\n        this.template.params.map(x => this.paramDataItems.push(x));\n    }\n\n    private covertParamDataToJson() {\n        if (!this.paramDataItems || this.paramDataItems.length <= 0) {\n            return null;\n        }\n        let object = new Object();\n        this.paramDataItems.map((item: BaseParamData) => {\n            if (this.isCollection(item)) {\n                object[item.code] = [];\n                let itemValues = item.value.split(',');\n                if (!itemValues || itemValues.length <= 0) {\n                    return;\n                }\n                itemValues.map(itemValue => object[item.code].push(itemValue));\n                //å¸®å©nameèµå¼\n                if (item.parameterTypeDesc === 'help') {\n                    object[`${item.code}_name`] = [];\n                    let itemTextValues = item.valueText.split(',');\n                    if (!itemTextValues || itemTextValues.length <= 0) {\n                        return;\n                    }\n                    itemTextValues.map(itemTextValue => object[`${item.code}_name`].push(itemTextValue));\n                }\n            }\n            else {\n                object[item.code] = item.value;\n                //å¸®å©nameèµå¼\n                if (item.parameterTypeDesc === 'help') {\n                    object[`${item.code}_name`] = item.valueText;\n                }\n            }\n        })\n        return object;\n    }\n\n    close = () => {\n        if (this.dialog) {\n            this.dialog.close();\n        }\n        this.closeEmitter.emit();\n    }\n\n    confirm() {\n        let jsonData = this.covertParamDataToJson();\n        this.confirmEmitter.emit(jsonData);\n    }\n\n    private isCollection(param: any) {\n        if (!param || !param.parameterType) {\n            return false;\n        }\n        if (param.parameterType.getKind() === DataTypeConst.DEFAULT_COLLECTION) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { UbccParamTemplate } from '@gsp-cmp/ubcc-param-vo';\n\n@Component({\n    selector: 'lib-ubcc-param-dimension-ui-root',\n    templateUrl: './ubcc-param-dimension-ui-root.component.html',\n    styleUrls: ['./ubcc-param-dimension-ui-root.component.css']\n})\nexport class UbccParamDimensionUiRootComponent implements OnInit {\n\n    @Input() template: UbccParamTemplate;\n\n    @Input() dimensionItemDatas: any=[];\n\n    @Input() paramDataItems:any=[];\n\n    @Input() canEdit:boolean=true;\n\n    constructor() { }\n\n    ngOnInit() {\n        this.template=this.template||new UbccParamTemplate();\n    }\n\n}\n","import { Injectable, EventEmitter } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class UbccEventBusService{\r\n    public ebs: EventEmitter<any> = new EventEmitter<any>();\r\n}","import { Component, OnInit, Input, ViewChild, ViewContainerRef, OnDestroy, ComponentFactoryResolver, ChangeDetectorRef, Type, Injector } from '@angular/core';\r\nimport { UbccParamTemplate, UbccParamTemplateAssignment, UbccParamTemplateVo, UbccParamTemplateSerializer, DataItem, DataTypeExtensionConst, StructureTypeRef, HelpType, StructureTypeRefEnum, UbccParamTemplateAssignmentSerializer } from '@gsp-cmp/ubcc-param-vo';\r\nimport { UbccParamDataManangerService } from './service/http-service';\r\nimport { UbccParamDataUiComponent } from './ubcc-param-data-ui/ubcc-param-data-ui.component';\r\nimport { UbccParamDimensionUiRootComponent } from './ubcc-param-dimension-ui-root/ubcc-param-dimension-ui-root.component';\r\nimport { Parameter, DataTypeConst, IDataType, CollectionType, PrimitiveType, PrimitiveTypeKind, DataType } from '@ecp-caf/common-structure';\r\nimport { BaseParamData } from './common/parameter-data/base-param-data';\r\nimport { DimensionItemData } from './common/dimension-item-data/dimension-item-data';\r\nimport { UbccEventBusService } from './service/event-bus-service';\r\nimport { UbccParamDataUtils } from './utils/param-data-utils';\r\n\r\n@Component({\r\n    selector: 'lib-ubcc-param-data-ui-root',\r\n    templateUrl: './ubcc-param-data-ui-root.component.html',\r\n    styleUrls: ['./ubcc-param-data-ui-root.component.css'],\r\n    providers: [UbccEventBusService]\r\n})\r\nexport class UbccParamDataUiRootComponent implements OnInit, OnDestroy {\r\n\r\n    private _assignment: UbccParamTemplateAssignment;\r\n\r\n    @Input() set assignment(assignment: UbccParamTemplateAssignment) {\r\n        this._assignment = assignment;\r\n        this.loadData();\r\n    }\r\n\r\n    _canEdit:boolean=true;\r\n\r\n    @Input() set canEdit(canEdit:boolean){\r\n        this._canEdit=canEdit;\r\n        if(this.currentInstance){\r\n            this.currentInstance.canEdit=this._canEdit;\r\n        }\r\n    }\r\n\r\n    template: UbccParamTemplate;\r\n\r\n    dimensionItemDatas: Array<DimensionItemData> = [];\r\n\r\n    paramDataItems: Array<Parameter> = [];\r\n\r\n    paramDataItemsClone: Array<Parameter> = [];\r\n\r\n    currentInstance:any;\r\n\r\n    templateSerializer=new UbccParamTemplateSerializer();\r\n    \r\n    assignmentSerializer=new UbccParamTemplateAssignmentSerializer();\r\n\r\n    @ViewChild('paramDataPanel', { read: ViewContainerRef }) paramDataPanel: ViewContainerRef;\r\n\r\n    constructor(\r\n        private utils:UbccParamDataUtils,\r\n        private ebsService: UbccEventBusService,\r\n        private http: UbccParamDataManangerService,\r\n        private resolver: ComponentFactoryResolver) {\r\n        this.ebsService.ebs.subscribe(event => {\r\n            this.loadDimensionDataFromRemote();\r\n        })\r\n    }\r\n\r\n    ngOnInit() {\r\n        this._assignment = this._assignment || new UbccParamTemplateAssignment();\r\n        this.template = this.template || new UbccParamTemplate();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.paramDataPanel.clear();\r\n    }\r\n\r\n    private loadData() {\r\n        //åæ°,ç»´åº¦æ°æ®æºåå§å\r\n        this.dimensionItemDatas=[];\r\n        this.paramDataItems=[];\r\n        this.paramDataItemsClone=[];\r\n        if (!this._assignment || !this._assignment.templateId) {\r\n            return;\r\n        }\r\n        this.http.getParamTemplate(this._assignment.templateId).subscribe(\r\n            (vo: UbccParamTemplateVo) => {\r\n                if (!vo||!vo.content) {\r\n                    return;\r\n                }\r\n                let serializer = new UbccParamTemplateSerializer();\r\n                this.template = serializer.deserializer(JSON.parse(vo.content));\r\n                this.load();\r\n            },\r\n            err=>{\r\n                throw err;\r\n            }\r\n        )\r\n    }\r\n\r\n    private load() {\r\n        //åæ°ç»æåå§åï¼åæ°å¼ä¸ºç©º\r\n        this.paramDataItemsInit();\r\n        //æ ¹æ®ç»´åº¦åå»ºå¯¹åºçUIç»ä»¶\r\n        if (this._assignment.useDimension) {\r\n            //ç»´åº¦ç»æåå§åï¼ç»´åº¦æ°æ®ä¸ºç©º\r\n            this.dimensionDataItemsInit();\r\n            //åå»ºç»´åº¦UIç»ä»¶ï¼æ­¤å¤ä¸åæ°ï¼åªæ¸²æçé¢ï¼å¨éæ©ç»´åº¦æ°æ®ååå è½½æ°æ®\r\n            this.createDimensionRootUiComponent();\r\n        }\r\n        else {\r\n            this.http.getParamData(this._assignment.templateId, this._assignment.bizTypeId).subscribe(\r\n                (dataItems: Array<DataItem>) => {\r\n                    this.getParamValues(dataItems);\r\n                },\r\n                err=>{\r\n                    throw err;\r\n                }\r\n            );\r\n             //åå»ºåæ°UIç»ä»¶\r\n            this.createParamDataUiComponent();\r\n        }\r\n    }\r\n\r\n    private getParamValues(dataItems: Array<DataItem>) {\r\n        if (!dataItems || dataItems.length <= 0) {\r\n            return;\r\n        }\r\n        this.paramDataItems.map((paramDataItem: BaseParamData) => {\r\n            let data = dataItems.find(item => item.dataCode === paramDataItem.code);\r\n            if (data) {\r\n                paramDataItem.value = data.dataValue;\r\n                if (!this.utils.isHelpType(paramDataItem.parameterType)) {\r\n                    return;\r\n                }\r\n                paramDataItem.valueText = data.dataValueText||'';\r\n                // ä»åç«¯è·åå¸®å©æ°æ®\r\n                // this.getHelpData(data,paramDataItem);\r\n            }\r\n        });\r\n        this.paramValuesClone(this.paramDataItemsClone,this.paramDataItems);\r\n    }\r\n\r\n    private paramValuesClone(target:any[],source:any[]) {\r\n        if(source.length==0||target.length==0||target.length!==source.length){\r\n            return;\r\n        }\r\n        target.map(paramDataItemClone => {\r\n            let index = source.findIndex(x => x.code === paramDataItemClone.code);\r\n            if(index!==(-1)){\r\n                paramDataItemClone.id = source[index].id;\r\n                paramDataItemClone.value = source[index].value;\r\n                paramDataItemClone.valueText=source[index].valueText;\r\n            }\r\n        });\r\n    }\r\n\r\n    private loadDimensionDataFromRemote() {\r\n        this.paramDataItemsInit();\r\n        this.currentInstance.paramDataItems = this.paramDataItems;\r\n        let dimensionItemValues = [];\r\n        this.dimensionItemDatas.map((x: DimensionItemData) => dimensionItemValues.push(x.value));\r\n        let count=dimensionItemValues.length;\r\n        if(count<=0){\r\n            return;\r\n        }\r\n        if(count===1){\r\n            if(!dimensionItemValues[0]){\r\n                return;\r\n            }\r\n        }\r\n        if(count===2){\r\n            if(!dimensionItemValues[0]||!dimensionItemValues[1]){\r\n                return;\r\n            }\r\n        }\r\n        let dimension1=dimensionItemValues[0]?dimensionItemValues[0]:null;\r\n        let dimension2=dimensionItemValues[1]?dimensionItemValues[1]:null;\r\n        this.http.getDimensionData(this._assignment.templateId, \r\n            this._assignment.bizTypeId,\r\n            dimension1,dimension2,count).subscribe(\r\n            (dataItems: Array<DataItem>) => {\r\n                this.getParamValues(dataItems);\r\n            }\r\n        )\r\n    }\r\n\r\n    private paramDataItemsInit() {\r\n        let template=this.templateSerializer.deserializer(this.templateSerializer.serialize(this.template));\r\n        this.paramDataItems = [];\r\n        if (template&& template.params) {\r\n                template.params.map(x=>{\r\n                    if(this._assignment.useDimension){\r\n                        this.dimensionParamDefaultValueInit(x as BaseParamData);\r\n                    }\r\n                    else{\r\n                        (x as BaseParamData).value=x.defaultValue;\r\n                    }\r\n                    this.paramDataItems.push(x);\r\n                }\r\n            );\r\n        }\r\n        this.paramDataItemsCloneInit();\r\n    }\r\n\r\n    private dimensionParamDefaultValueInit(paramData:BaseParamData){\r\n        let count=this.dimensionItemDatas.length;\r\n        if(count<=0){\r\n            return;\r\n        }\r\n        if(count===1){\r\n            if(!this.dimensionItemDatas[0]||!this.dimensionItemDatas[0].value){\r\n                return;\r\n            }\r\n        }\r\n        if(count===2){\r\n            if(!this.dimensionItemDatas[0]||!this.dimensionItemDatas[1]||!this.dimensionItemDatas[0].value||!this.dimensionItemDatas[1].value){\r\n                return;\r\n            }\r\n        }\r\n        paramData.value=paramData.defaultValue;\r\n    }\r\n\r\n    private paramDataItemsCloneInit() {\r\n        let template=this.templateSerializer.deserializer(this.templateSerializer.serialize(this.template));\r\n        this.paramDataItemsClone = [];\r\n        if (template&& template.params) {\r\n                template.params.map(x=>{\r\n                    if(this._assignment.useDimension){\r\n                        this.dimensionParamDefaultValueInit(x as BaseParamData);\r\n                    }\r\n                    else{\r\n                        (x as BaseParamData).value=x.defaultValue;\r\n                    }\r\n                    this.paramDataItemsClone.push(x);\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    private dimensionDataItemsInit() {\r\n        let assignment=this.assignmentSerializer.deserialize(this.assignmentSerializer.serialize(this._assignment));\r\n        if (assignment&&assignment.dimensionInfo\r\n            && assignment.dimensionInfo.definition\r\n            && assignment.dimensionInfo.definition.dimensionItems) {\r\n            this.dimensionItemDatas = [];\r\n            assignment.dimensionInfo.definition.dimensionItems.forEach(dimensionData => {\r\n                this.dimensionItemDatas.push(dimensionData as DimensionItemData);\r\n            });\r\n        }\r\n    }\r\n\r\n    private createParamDataUiComponent() {\r\n        this.paramDataPanel.clear();\r\n        const factory = this.resolver.resolveComponentFactory(UbccParamDataUiComponent);\r\n        let cmpRef = this.paramDataPanel.createComponent(factory);\r\n        cmpRef.instance.canEdit = this.canEdit;\r\n        cmpRef.instance.template = this.template;\r\n        cmpRef.instance.paramDataItems = this.paramDataItems;\r\n        this.currentInstance=cmpRef.instance;\r\n    }\r\n\r\n    private createDimensionRootUiComponent() {\r\n        this.paramDataPanel.clear();\r\n        const factory = this.resolver.resolveComponentFactory(UbccParamDimensionUiRootComponent);\r\n        let cmpRef = this.paramDataPanel.createComponent(factory);\r\n        cmpRef.instance.canEdit = this.canEdit;\r\n        cmpRef.instance.dimensionItemDatas = this.dimensionItemDatas;\r\n        cmpRef.instance.paramDataItems = this.paramDataItems;\r\n        cmpRef.instance.template = this.template;\r\n        this.currentInstance=cmpRef.instance;\r\n    }\r\n\r\n    convertDimensionDataToDataVo() {\r\n        if (!this.dimensionItemDatas) {\r\n            return null;\r\n        }\r\n        let dimensionValues = new Array<DataItem>();\r\n        this.dimensionItemDatas.map(x => {\r\n            let dimensionValue = new DataItem();\r\n            dimensionValue.dataCode = x.code;\r\n            dimensionValue.dataValue = (x as DimensionItemData).value;\r\n            dimensionValue.dataType = this.getDimensionValueType(x.dataType);\r\n            dimensionValues.push(dimensionValue);\r\n        });\r\n        return dimensionValues;\r\n    }\r\n\r\n    convertParamDataToDataVo() {\r\n        if (!this.paramDataItems) {\r\n            return null;\r\n        }\r\n        let paramValues = new Array<DataItem>();\r\n        this.paramDataItems.map(x => {\r\n            let paramValue = new DataItem();\r\n            paramValue.dataCode = x.code;\r\n            paramValue.dataValue = (x as BaseParamData).value;\r\n            paramValue.dataType = this.getParamValueType((x as BaseParamData).parameterType);\r\n            paramValues.push(paramValue);\r\n        });\r\n        this.paramValuesClone(this.paramDataItemsClone,this.paramDataItems);\r\n        return paramValues;\r\n    }\r\n\r\n    private getDimensionValueType(dataType: IDataType) {\r\n        let kind = dataType.getKind();\r\n        switch (kind) {\r\n            case DataTypeConst.DEFAULT_PRIMITIVE:\r\n                return `${DataTypeConst.DEFAULT_PRIMITIVE}.${(dataType as PrimitiveType).primitiveTypeKind}`;\r\n            case DataTypeConst.DEFAULT_ENUMERATION:\r\n                return DataTypeConst.DEFAULT_ENUMERATION;\r\n            case DataTypeExtensionConst.HELP_TYPE:\r\n                return DataTypeExtensionConst.HELP_TYPE+`##${(dataType as HelpType).helpId}`;\r\n            default:\r\n                throw new Error(`ä¸å¡åæ°ä¸æ¯æçåæ°ç±»å${kind}`);\r\n        }\r\n    }\r\n\r\n    private getParamValueType(dataType: IDataType) {\r\n        let kind = dataType.getKind();\r\n        switch (kind) {\r\n            case DataTypeConst.DEFAULT_COLLECTION:\r\n                let elemetType = (dataType as CollectionType).elementType;\r\n                return `${DataTypeConst.DEFAULT_COLLECTION}.` + this.getParamValueType(elemetType);\r\n            case DataTypeConst.DEFAULT_PRIMITIVE:\r\n                return `${DataTypeConst.DEFAULT_PRIMITIVE}.${PrimitiveTypeKind[(dataType as PrimitiveType).primitiveTypeKind]}`;\r\n            case DataTypeExtensionConst.UBCC_STRUCTURE_TYPE_REF:\r\n                let refType = dataType as StructureTypeRef;\r\n                return refType.type === StructureTypeRefEnum.HELP ? DataTypeExtensionConst.HELP_TYPE +`##${refType.refId}`: DataTypeConst.DEFAULT_ENUMERATION;\r\n            default:\r\n                throw new Error(`ä¸å¡åæ°ä¸æ¯æçåæ°ç±»å${kind}`);\r\n        }\r\n    }\r\n\r\n    cancel(){\r\n        this.paramValuesClone(this.paramDataItems,this.paramDataItemsClone);\r\n        this.currentInstance.paramDataItems=this.paramDataItems;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ILookupHttpService, LookupGridResult } from '@farris/ui-lookup';\r\nimport { HttpHeaders, HttpClient } from '@angular/common/http';\r\nimport { SessionService } from '@ecp-caf/caf-common';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class LookUpHttpService implements ILookupHttpService{\r\n\r\n    httpHeaders = new HttpHeaders().set(\"sessionid\", this.cache.getUserSessionId());\r\n\r\n    constructor(private http: HttpClient, private cache: SessionService) {\r\n        this.httpHeaders = new HttpHeaders();\r\n        this.httpHeaders.set(\"sessionid\", this.cache.getUserSessionId());\r\n    } \r\n    \r\n    getData(uri: string, params?: any): Observable<LookupGridResult> {\r\n        if(uri.includes('{helpId}')){\r\n            return of(null);\r\n        }\r\n        let queryParam=JSON.stringify(params);\r\n        let url=`${uri}?queryParam=${encodeURIComponent(queryParam)}`;\r\n        return this.http.get(url,{headers:this.httpHeaders});\r\n    }\r\n}","export class LookUpBindingFields {\r\n    idField: string;\r\n    textField: string;\r\n    valueField: string;\r\n    textValue: string;\r\n    displayType: string;\r\n    constructor(){\r\n        this.displayType='List';\r\n    }\r\n}","import { Component, OnInit, OnChanges, Input, SimpleChanges, Output, EventEmitter } from '@angular/core';\nimport { HelpType } from '@gsp-cmp/ubcc-param-vo';\nimport { GSPMetadataRTService, MetadataDto } from '@gsp-lcm/metadatart-selector';\nimport { ServerSideToken } from '@farris/ui-lookup';\nimport { LookUpHttpService } from '../../../service/lookup-http-service';\nimport { LookUpBindingFields } from '../../../common/look-up-binding-fields';\nimport { UbccEventBusService } from '../../../service/event-bus-service';\n\nconst BCC_HELP_URL=`/api/runtime/bcc/v1.0/param/help/{helpId}`;\n\n@Component({\n    selector: 'lib-dimension-lookup-control',\n    templateUrl: './dimension-lookup-control.component.html',\n    styleUrls: ['./dimension-lookup-control.component.css'],\n    providers: [{ provide: ServerSideToken, useClass: LookUpHttpService }, GSPMetadataRTService]\n})\nexport class DimensionLookupControlComponent implements OnInit, OnChanges {\n\n    @Input() dimensionItem: any;\n\n    isSingleSelect: boolean = true;\n\n    isHelpInfoLoad: boolean = false;\n\n    bindingFields: LookUpBindingFields;\n\n    helpUrl: string = BCC_HELP_URL;\n\n    constructor(\n        private metadataRTService: GSPMetadataRTService,\n        private ebsService: UbccEventBusService) { }\n\n    ngOnInit() {\n        this.dimensionItem = this.dimensionItem || {};\n        this.bindingFields = this.bindingFields || new LookUpBindingFields();\n        this.helpConfigInit();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        this.helpConfigInit();\n    }\n\n    selectedHelpHandler($event) {\n        if (!$event) {\n            return;\n        }\n        this.dimensionItem.value = '';\n        this.dimensionItem.value = $event[this.bindingFields.idField];\n        this.ebsService.ebs.emit(this.dimensionItem);\n    }\n\n    private helpConfigInit() {\n        if (this.isHelpInfoLoad || !this.dimensionItem || !this.dimensionItem.dataType) {\n            return;\n        }\n        let helpType= this.dimensionItem.dataType as HelpType;\n        this.loadDataFromMetadata(helpType);\n    }\n\n    private loadDataFromMetadata(helpType: HelpType) {\n        if (!helpType.helpId) {\n            return;\n        }\n        this.metadataRTService.GetMetadataRT(helpType.helpId).subscribe((metadataDto: MetadataDto) => {\n            let helpMetadata = JSON.parse(metadataDto.content);\n            this.setHelpInfo(helpMetadata);\n            this.isHelpInfoLoad = true;\n        });\n    }\n\n    setHelpInfo(helpMetadata: any) {\n        this.helpUrl = BCC_HELP_URL.replace('{helpId}', helpMetadata.id);\n        this.bindingFields.idField = helpMetadata.idField;\n        this.bindingFields.textField = helpMetadata.textField;\n        this.bindingFields.valueField = helpMetadata.valueField;\n        this.bindingFields.displayType = helpMetadata.displayType;\n    }\n}\n","import { Component, OnInit, Input, OnChanges, SimpleChanges, Output, EventEmitter } from '@angular/core';\nimport { EnumerationType } from '@ecp-caf/common-structure';\nimport { UbccEventBusService } from '../../../service/event-bus-service';\n\n@Component({\n    selector: 'lib-dimension-dropdownlist-control',\n    templateUrl: './dimension-dropdownlist-control.component.html',\n    styleUrls: ['./dimension-dropdownlist-control.component.css']\n})\nexport class DimensionDropdownlistControlComponent implements OnInit ,OnChanges{\n\n    @Input() dimensionItem: any;\n\n    @Output() valueChangeEmit:EventEmitter<any>=new EventEmitter();\n\n    enumerationItems = [];\n\n    isMultiSelect = false;\n\n    isEnumInfoLoad: boolean = false;\n\n    constructor(private ebsService: UbccEventBusService) { }\n\n    ngOnInit() {\n        this.dimensionItem = this.dimensionItem || {};\n        if (!this.isEnumInfoLoad) {\n            this.enumConfigInit();\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (!this.isEnumInfoLoad) {\n            this.enumConfigInit();\n        }\n    }\n\n    enumConfigInit() {\n        this.getEnumItems();\n    }\n\n    getEnumItems() {\n        if (!this.dimensionItem || !this.dimensionItem.dataType) {\n            return;\n        }\n        let enumType=this.dimensionItem.dataType as EnumerationType;\n        this.get(enumType);\n    }\n\n    get(enumType: EnumerationType) {\n        if (!enumType || !enumType.enumerationItems) {\n            return;\n        }\n        enumType.enumerationItems.map(x => this.enumerationItems.push(x));\n        this.isEnumInfoLoad = true;\n    }\n\n    valueChangeHandler($event) {\n        this.dimensionItem.value=$event.value;\n        this.ebsService.ebs.emit(this.dimensionItem);\n    }\n\n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { UbccEventBusService } from '../../../service/event-bus-service';\n\n@Component({\n    selector: 'lib-dimension-input-control',\n    templateUrl: './dimension-input-control.component.html',\n    styleUrls: ['./dimension-input-control.component.css'],\n    providers:[UbccEventBusService]\n})\nexport class DimensionInputControlComponent implements OnInit {\n\n    @Input() dimensionItem: any;\n\n    constructor(private ebsService: UbccEventBusService) { }\n\n    ngOnInit() {\n        this.dimensionItem = this.dimensionItem || {};\n    }\n\n    ngModelChangeHandler($event){\n        this.ebsService.ebs.emit(this.dimensionItem);\n    }\n\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { UbccParamDataUtils } from '../../../utils/param-data-utils';\n\n@Component({\n    selector: 'lib-checkbox-control',\n    templateUrl: './checkbox-control.component.html',\n    styleUrls: ['./checkbox-control.component.css']\n})\nexport class CheckboxControlComponent implements OnInit {\n\n    @Input() param: any;\n\n    @Input() canEdit:boolean=true;\n\n    checkboxId:string;\n\n    constructor(private service:UbccParamDataUtils) { }\n\n    ngOnInit() {\n        this.param = this.param || {};\n        this.checkboxId=this.service.newGuid();\n    }\n\n    getValue(){\n        if(!this.param||!this.param.value){\n            return false;\n        }\n        let value=String(this.param.value).toLowerCase();\n        return value==='true'?true:false;\n    }\n\n    enable(value) {\n        this.param.value = value;\n    }\n\n    isReadonly(){\n        if(!this.canEdit){\n            return true;\n        }\n        else{\n            return !this.param||!this.param.readonly?false:true;\n        }\n    }\n\n    show(){\n        return !this.param||!this.param.description?false:true;\n    }\n\n}\n","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n    selector: 'lib-input-control',\n    templateUrl: './input-control.component.html',\n    styleUrls: ['./input-control.component.css']\n})\nexport class InputControlComponent implements OnInit {\n\n    @Input() param: any;\n\n    @Input() canEdit:boolean=true;\n\n    constructor() { }\n\n    ngOnInit() {\n        this.param = this.param || {};\n    }\n\n    isReadonly(){\n        if(!this.canEdit){\n            return true;\n        }\n        else{\n            return !this.param||!this.param.readonly?false:true;\n        }\n    }\n\n    show(){\n        return !this.param||!this.param.description?false:true;\n    }\n\n}\n","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n    selector: 'lib-date-control',\n    templateUrl: './date-control.component.html',\n    styleUrls: ['./date-control.component.css']\n})\nexport class DateControlComponent implements OnInit {\n\n    @Input() param: any;\n\n    @Input() canEdit:boolean=true;\n\n    constructor() { }\n\n    ngOnInit() {\n        this.param = this.param || {};\n    }\n\n    dateTimeValueChange($event) {\n        this.param.value = $event.jsDate;\n    }\n\n    isReadonly(){\n        if(!this.canEdit){\n            return true;\n        }\n        else{\n            return !this.param||!this.param.readonly?false:true;\n        }\n    }\n\n    show(){\n        return !this.param||!this.param.description?false:true;\n    }\n\n}\n","import { Component, OnInit, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { DataTypeConst, EnumerationType, IDataType, CollectionType } from '@ecp-caf/common-structure';\nimport { UbccParamTemplate, StructureTypeRef, DataTypeExtensionConst } from '@gsp-cmp/ubcc-param-vo';\n\n@Component({\n    selector: 'lib-dropdownlist-control',\n    templateUrl: './dropdownlist-control.component.html',\n    styleUrls: ['./dropdownlist-control.component.css']\n})\nexport class DropdownlistControlComponent implements OnInit, OnChanges {\n\n    @Input() param: any;\n\n    @Input() template: UbccParamTemplate;\n\n    @Input() canEdit:boolean=true;\n\n    enumerationItems = [];\n\n    isMultiSelect = false;\n\n    isEnumInfoLoad: boolean = false;\n\n    constructor() { }\n\n    ngOnInit() {\n        this.param = this.param || {};\n        this.template = this.template || new UbccParamTemplate();\n        if (!this.isEnumInfoLoad) {\n            this.enumConfigInit();\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (!this.isEnumInfoLoad) {\n            this.enumConfigInit();\n        }\n    }\n\n    enumConfigInit() {\n        this.isMultiSelect = this.isCollection();\n        this.getEnumItems();\n    }\n\n    getEnumItems() {\n        if (!this.param || !this.param.parameterType || !this.template.structuredTypes) {\n            return;\n        }\n        if (this.param.parameterType.kind === DataTypeConst.DEFAULT_COLLECTION) {\n            let elementType = this.getCollectionElementType(this.param.parameterType);\n            this.get(elementType);\n        }\n        else if (this.param.parameterType.kind === DataTypeExtensionConst.UBCC_STRUCTURE_TYPE_REF) {\n            let typeRef = this.param.parameterType as StructureTypeRef;\n            this.get(typeRef);\n        }\n        else {\n            throw new Error(`æä¸¾ä¸æ¯æçåæ°ç±»å${this.param.parameterType.kind}`);\n        }\n    }\n\n    get(refType: StructureTypeRef) {\n        let enumType = this.template.structuredTypes.find(x => x.id === refType.refId) as EnumerationType;\n        if (!enumType || !enumType.enumerationItems) {\n            return;\n        }\n        enumType.enumerationItems.map(x => this.enumerationItems.push(x));\n        this.isEnumInfoLoad = true;\n    }\n\n    getCollectionElementType(dataType: IDataType) {\n        let kind = dataType.getKind();\n        switch (kind) {\n            case DataTypeConst.DEFAULT_COLLECTION:\n                let elementType = (dataType as CollectionType).elementType;\n                return this.getCollectionElementType(elementType);\n            default:\n                return dataType;\n        }\n    }\n\n\n    isCollection() {\n        if (!this.param || !this.param.parameterType) {\n            return false;\n        }\n        if (this.param.parameterType.getKind() === DataTypeConst.DEFAULT_COLLECTION) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    valueChangeHandler($event) {\n        this.param.value=$event.value;\n    }\n\n    isReadonly(){\n        if(!this.canEdit){\n            return true;\n        }\n        else{\n            return !this.param||!this.param.readonly?false:true;\n        }\n    }\n\n    show(){\n        return !this.param||!this.param.description?false:true;\n    }\n\n}\n","import { Component, OnInit, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { UbccParamTemplate, StructureTypeRef, DataTypeExtensionConst} from '@gsp-cmp/ubcc-param-vo';\nimport { DataTypeConst, IDataType, CollectionType } from '@ecp-caf/common-structure';\nimport { MetadataDto, GSPMetadataRTService } from '@gsp-lcm/metadatart-selector';\nimport { ServerSideToken } from '@farris/ui-lookup';\nimport { LookUpHttpService } from '../../../service/lookup-http-service';\nimport { LookUpBindingFields } from '../../../common/look-up-binding-fields';\n\nconst BCC_HELP_URL=`/api/runtime/bcc/v1.0/param/help/{helpId}`;\n\n@Component({\n    selector: 'lib-lookup-control',\n    templateUrl: './lookup-control.component.html',\n    styleUrls: ['./lookup-control.component.css'],\n    providers: [{ provide: ServerSideToken, useClass: LookUpHttpService }, GSPMetadataRTService]\n})\nexport class LookupControlComponent implements OnInit ,OnChanges{\n    \n    @Input() param:any;\n\n    @Input() template:UbccParamTemplate;\n\n    @Input() canEdit:boolean=true;\n    \n    isSingleSelect:boolean=true;\n\n    isHelpInfoLoad:boolean=false;\n\n    bindingFields:LookUpBindingFields;\n\n    helpUrl:string= BCC_HELP_URL;\n\n    constructor(private metadataRTService: GSPMetadataRTService,) { }\n\n    ngOnInit() {\n        this.param = this.param || {};\n        this.bindingFields=this.bindingFields||new LookUpBindingFields();\n        this.helpConfigInit();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        this.helpConfigInit();\n    }\n\n    selectedHelpHandler($event) {\n        if (!$event) {\n            return;\n        }\n        this.param.value = '';\n        this.param.valueText = '';\n        if (this.isCollection()) {\n            if ($event.length <=0) {\n                return;\n            }\n            $event.map((selectItem, index) => {\n                this.param.value=this.param.value+(index>0?`,${selectItem[this.bindingFields.idField]}`:selectItem[this.bindingFields.idField]);\n                this.param.valueText=this.param.valueText+(index>0?`,${selectItem[this.bindingFields.textField]}`:selectItem[this.bindingFields.textField]);\n            });\n        }\n        else {\n            this.param.value = $event[this.bindingFields.idField];\n            this.param.valueText=$event[this.bindingFields.textField];\n        }\n    }\n\n    private helpConfigInit() {\n        if (this.isHelpInfoLoad || !this.param || !this.param.parameterType) {\n            return;\n        }\n        if (this.param.parameterType.kind === DataTypeConst.DEFAULT_COLLECTION) {\n            this.isSingleSelect=false;\n            let elementType = this.getCollectionElementType(this.param.parameterType) as StructureTypeRef;\n            this.loadDataFromMetadata(elementType);\n        }\n        else if (this.param.parameterType.kind === DataTypeExtensionConst.UBCC_STRUCTURE_TYPE_REF) {\n            this.isSingleSelect=true;\n            let typeRef = this.param.parameterType as StructureTypeRef;\n            this.loadDataFromMetadata(typeRef);\n        }\n        else {\n            throw new Error(`å¸®å©ä¸æ¯æçåæ°ç±»å${this.param.parameterType.kind}`);\n        }\n    }\n    \n    private loadDataFromMetadata(refType: StructureTypeRef) {\n        if (!refType.refId) {\n            return;\n        }\n        this.metadataRTService.GetMetadataRT(refType.refId).subscribe((metadataDto: MetadataDto) => {\n            let helpMetadata = JSON.parse(metadataDto.content);\n            this.setHelpInfo(helpMetadata);\n            this.isHelpInfoLoad = true;\n        });\n    }\n\n    setHelpInfo(helpMetadata:any){\n        this.helpUrl = BCC_HELP_URL.replace('{helpId}', helpMetadata.id);\n        this.bindingFields.idField = helpMetadata.idField;\n        this.bindingFields.textField = helpMetadata.textField;\n        this.bindingFields.valueField = helpMetadata.valueField;\n        this.bindingFields.displayType = helpMetadata.displayType;\n    }\n\n    private getCollectionElementType(dataType: IDataType) {\n        let kind = dataType.getKind();\n        switch (kind) {\n            case DataTypeConst.DEFAULT_COLLECTION:\n                let elementType = (dataType as CollectionType).elementType;\n                return this.getCollectionElementType(elementType);\n            default:\n                return dataType;\n        }\n    }\n\n    isCollection() {\n        if (!this.param || !this.param.parameterType) {\n            return false;\n        }\n        if (this.param.parameterType.getKind() === DataTypeConst.DEFAULT_COLLECTION) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    isReadonly(){\n        if(!this.canEdit){\n            return true;\n        }\n        else{\n            return !this.param||!this.param.readonly?false:true;\n        }\n    }\n\n    show(){\n        return !this.param||!this.param.description?false:true;\n    }\n}\n","import { Component, OnInit, Input, OnChanges, SimpleChanges } from '@angular/core';\n\n@Component({\n    selector: 'lib-number-control',\n    templateUrl: './number-control.component.html',\n    styleUrls: ['./number-control.component.css']\n})\nexport class NumberControlComponent implements OnInit,OnChanges {\n\n    @Input() param: any;\n\n    @Input() canEdit:boolean=true;\n\n    precision:number=0;\n\n    max:number=NaN;\n\n    min:number=NaN;\n\n    constructor() { }\n\n    ngOnInit() {\n        this.param = this.param || {};\n    }\n\n    ngOnChanges(changes:SimpleChanges): void {\n        this.param = this.param || {};\n        if(this.param&&this.param.constraint){\n            this.max=Number(this.param.constraint.max)||NaN;\n            this.min=Number(this.param.constraint.min)||NaN;\n            this.precision=Number(this.param.constraint.precision)||0;\n        }\n    }\n\n    isReadonly(){\n        if(!this.canEdit){\n            return true;\n        }\n        else{\n            return !this.param||!this.param.readonly?false:true;\n        }\n    }\n\n    getUnit(){\n        if(!this.param||!this.param.constraint||!this.param.constraint.unit){\n           return '';\n        }\n        else{\n            return `(åä½:${this.param.constraint.unit})`;\n        }\n    }\n\n    show(){\n        return !this.param||!this.param.description?false:true;\n    }\n}\n","import { Injectable, ComponentFactoryResolver, Injector } from '@angular/core';\nimport { UbccParamDataUtils } from './utils/param-data-utils';\nimport { BsModalService } from '@farris/ui-modal';\nimport { UbccParamDataUiDialogComponent } from './ubcc-param-data-ui-dialog/ubcc-param-data-ui-dialog.component';\nimport { DialogResult } from './common/dialog-result';\n\n@Injectable()\nexport class UbccParamDataUiService {\n\n    constructor(\n        private resolver: ComponentFactoryResolver,\n        private injector: Injector,\n        private util: UbccParamDataUtils,\n        private modalService: BsModalService\n    ) { }\n\n    show(templateId:string,paramData:any):DialogResult{\n        return this.create(templateId,paramData);\n    }\n\n    private create(templateId:string,data:any): DialogResult {\n        let fac = this.resolver.resolveComponentFactory(UbccParamDataUiDialogComponent);\n        let cmpRef = fac.create(this.injector);\n        let modalConfig = this.util.getModalConfig(cmpRef.instance.btnRef);\n        let dialog = this.modalService.show(cmpRef, modalConfig);\n        cmpRef.instance.dialog = dialog;\n        cmpRef.instance.templateId=templateId;\n        cmpRef.instance.data=data;\n        return { confirmEvent: cmpRef.instance.confirmEmitter, closeEvent: cmpRef.instance.closeEmitter,close: cmpRef.instance.close};\n    }\n\n}\n","import { Component, OnInit, Input, ViewEncapsulation } from '@angular/core';\nimport { DimensionItem, DataTypeExtensionConst } from '@gsp-cmp/ubcc-param-vo';\nimport { DataTypeConst } from '@ecp-caf/common-structure';\n\n@Component({\n    selector: 'lib-ubcc-param-dimension-ui',\n    templateUrl: './ubcc-param-dimension-ui.component.html',\n    styleUrls: ['./ubcc-param-dimension-ui.component.css'],\n    encapsulation:ViewEncapsulation.None\n})\nexport class UbccParamDimensionUiComponent implements OnInit {\n\n    @Input() dimensionItemDatas: any=[];\n\n    constructor() { }\n\n    ngOnInit() {\n       \n    }\n\n    getControlType(dimensionItem: DimensionItem) {\n        if (!dimensionItem || !dimensionItem.dataType || !dimensionItem.dataType.getKind()) {\n            return;\n        }\n        let kind = dimensionItem.dataType.getKind();\n        switch (kind) {\n            case DataTypeConst.DEFAULT_PRIMITIVE:\n                return 'input';\n            case DataTypeConst.DEFAULT_ENUMERATION:\n                return 'dropdownlist';\n            case DataTypeExtensionConst.HELP_TYPE:\n                return 'lookup';\n            default:\n                return 'input';\n        }\n    }\n\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { ButtonsModule } from '@progress/kendo-angular-buttons';\r\nimport { FrameworkService, FrmEventBus, FuncsService, LoadingService } from '@gsp-sys/rtf-common';\r\nimport { HttpService, SessionService, CacheService } from '@ecp-caf/caf-common';\r\nimport { NotifyService, NotifyModule } from '@farris/ui-notify';\r\nimport { InputGroupModule } from '@farris/ui-input-group';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { LoadingModule } from '@farris/ui-loading';\r\nimport { ModalModule, BsModalService } from '@farris/ui-modal';\r\nimport { MessagerModule } from '@farris/ui-messager';\r\nimport { FarrisDialogModule } from '@farris/ui-dialog';\r\nimport { ComboListModule } from '@farris/ui-combo-list';\r\nimport { LookupModule } from '@farris/ui-lookup';\r\nimport { FarrisButtonModule } from '@farris/ui-button';\r\nimport { FarrisDatePickerModule } from '@farris/ui-datepicker';\r\nimport { FarrisSectionModule } from '@farris/ui-section';\r\nimport { UbccParamDataUiComponent } from './ubcc-param-data-ui/ubcc-param-data-ui.component';\r\nimport { UbccParamDataManangerService } from './service/http-service';\r\nimport { NumberSpinnerModule } from '@farris/ui-number-spinner';\r\nimport { GSPMetadataRTServiceModule } from '@gsp-lcm/metadatart-selector';\r\nimport { UbccParamDataUiDialogComponent } from './ubcc-param-data-ui-dialog/ubcc-param-data-ui-dialog.component';\r\nimport { UbccParamDataUiRootComponent } from './ubcc-param-data-ui-root.component';\r\nimport { DimensionLookupControlComponent } from './controls/dimension-control/dimension-lookup-control/dimension-lookup-control.component';\r\nimport { DimensionDropdownlistControlComponent } from './controls/dimension-control/dimension-dropdownlist-control/dimension-dropdownlist-control.component';\r\nimport { DimensionInputControlComponent } from './controls/dimension-control/dimension-input-control/dimension-input-control.component';\r\nimport { CheckboxControlComponent } from './controls/param-control/checkbox-control/checkbox-control.component';\r\nimport { InputControlComponent } from './controls/param-control/input-control/input-control.component';\r\nimport { DateControlComponent } from './controls/param-control/date-control/date-control.component';\r\nimport { DropdownlistControlComponent } from './controls/param-control/dropdownlist-control/dropdownlist-control.component';\r\nimport { LookupControlComponent } from './controls/param-control/lookup-control/lookup-control.component';\r\nimport { NumberControlComponent } from './controls/param-control/number-control/number-control.component';\r\nimport { UbccParamDataUiService } from './ubcc-param-data-ui.service';\r\nimport { UbccParamDataUtils } from './utils/param-data-utils';\r\nimport { UbccParamDimensionUiComponent } from './ubcc-param-dimension-ui/ubcc-param-dimension-ui.component';\r\nimport { UbccParamDimensionUiRootComponent } from './ubcc-param-dimension-ui-root/ubcc-param-dimension-ui-root.component';\r\nimport { FarrisTooltipModule } from '@farris/ui-tooltip';\r\nimport { FarrisPanelModule } from '@farris/ui-panel';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        UbccParamDataUiComponent,\r\n        InputControlComponent,\r\n        CheckboxControlComponent,\r\n        DateControlComponent,\r\n        DropdownlistControlComponent,\r\n        LookupControlComponent,\r\n        NumberControlComponent,\r\n        UbccParamDataUiDialogComponent,\r\n        UbccParamDataUiRootComponent,\r\n        DimensionLookupControlComponent,\r\n        DimensionDropdownlistControlComponent,\r\n        DimensionInputControlComponent,\r\n        UbccParamDimensionUiComponent,\r\n        UbccParamDimensionUiRootComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        ButtonsModule,\r\n        InputGroupModule,\r\n        HttpClientModule,\r\n        LoadingModule.forRoot({\r\n            message: 'è¯·ç¨å...'\r\n        }),\r\n        NotifyModule.forRoot(),\r\n        ModalModule.forRoot(),\r\n        MessagerModule.forRoot(),\r\n        FarrisDialogModule,\r\n        LookupModule,\r\n        FarrisButtonModule,\r\n        FarrisDatePickerModule,\r\n        ComboListModule,\r\n        FarrisSectionModule,\r\n        NumberSpinnerModule,\r\n        FarrisTooltipModule,\r\n        FarrisPanelModule,\r\n        GSPMetadataRTServiceModule.forRoot(\"\"),\r\n    ],\r\n    providers: [\r\n        FrameworkService,\r\n        HttpService,\r\n        SessionService,\r\n        CacheService,\r\n        FrmEventBus,\r\n        FuncsService,\r\n        LoadingService,\r\n        NotifyService,\r\n        UbccParamDataManangerService,\r\n        UbccParamDataUiService,\r\n        UbccParamDataUtils,\r\n        BsModalService\r\n    ],\r\n    entryComponents:[\r\n        UbccParamDataUiDialogComponent,\r\n        UbccParamDataUiComponent,\r\n        UbccParamDimensionUiComponent,\r\n        UbccParamDimensionUiRootComponent,\r\n        UbccParamDataUiRootComponent\r\n    ],\r\n    exports: [\r\n        UbccParamDataUiRootComponent,\r\n        UbccParamDataUiComponent,\r\n        UbccParamDataUiDialogComponent,\r\n        UbccParamDimensionUiComponent,\r\n        UbccParamDimensionUiRootComponent\r\n    ]\r\n})\r\nexport class UbccParamDataUiRootModule { }\r\n","import { EventEmitter } from '@angular/core';\r\n\r\nexport class DialogResult {\r\n\r\n    /**\r\n     * éæ©å¨ç¡®è®¤æé®äºä»¶\r\n     */\r\n    confirmEvent: EventEmitter<any>;\r\n\r\n    /**\r\n     * éæ©å¨å³é­æé®äºä»¶\r\n     */\r\n    closeEvent: EventEmitter<void>;\r\n\r\n    /**\r\n     * å³é­\r\n     */\r\n    close: any;\r\n\r\n}"]}