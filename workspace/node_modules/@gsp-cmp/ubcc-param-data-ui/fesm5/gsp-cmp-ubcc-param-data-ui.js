import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { ButtonsModule } from '@progress/kendo-angular-buttons';
import { FrameworkService, FrmEventBus, FuncsService, LoadingService } from '@gsp-sys/rtf-common';
import { InputGroupModule } from '@farris/ui-input-group';
import { LoadingModule } from '@farris/ui-loading';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { ComboListModule } from '@farris/ui-combo-list';
import { FarrisButtonModule } from '@farris/ui-button';
import { FarrisDatePickerModule } from '@farris/ui-datepicker';
import { FarrisSectionModule } from '@farris/ui-section';
import { NumberSpinnerModule } from '@farris/ui-number-spinner';
import { MessagerService, MessagerModule } from '@farris/ui-messager';
import { NotifyService, NotifyModule } from '@farris/ui-notify';
import { HttpClient, HttpHeaders, HttpClientModule } from '@angular/common/http';
import { SessionService, HttpService, CacheService } from '@ecp-caf/caf-common';
import { of } from 'rxjs';
import { GSPMetadataRTService, GSPMetadataRTServiceModule } from '@gsp-lcm/metadatart-selector';
import { ServerSideToken, LookupModule } from '@farris/ui-lookup';
import { BsModalService, ModalModule } from '@farris/ui-modal';
import { Component, Input, ViewEncapsulation, Injectable, EventEmitter, Output, ViewChild, NgModule, ComponentFactoryResolver, Injector, ViewContainerRef, defineInjectable, inject } from '@angular/core';
import { UbccParamTemplate, DataTypeExtensionConst, StructureTypeRefEnum, UbccParamTemplateSerializer, UbccParamTemplateAssignment, DataItem, UbccParamTemplateAssignmentSerializer } from '@gsp-cmp/ubcc-param-vo';
import { DataTypeConst, PrimitiveTypeKind } from '@ecp-caf/common-structure';
import { FarrisTooltipModule } from '@farris/ui-tooltip';
import { FarrisPanelModule } from '@farris/ui-panel';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ubcc-param-data-ui/ubcc-param-data-ui.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var UbccParamDataUiComponent = /** @class */ (function () {
    function UbccParamDataUiComponent() {
        this.paramDataItems = [];
        this.canEdit = true;
    }
    /**
     * @return {?}
     */
    UbccParamDataUiComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.template = this.template || new UbccParamTemplate();
        this.template.params = this.template.params || [];
        this.template.groups = this.template.groups || [];
    };
    /**
     * @param {?} param
     * @return {?}
     */
    UbccParamDataUiComponent.prototype.getControlType = /**
     * @param {?} param
     * @return {?}
     */
    function (param) {
        if (!param || !param.parameterType || !param.parameterTypeDesc) {
            return;
        }
        switch (param.parameterTypeDesc) {
            case 'string':
                return 'input';
            case 'bool':
                return 'checkbox';
            case 'double':
            case 'int':
                return 'number';
            case 'datetime':
                return 'date';
            case 'enum':
                return 'dropdownlist';
            case 'help':
                return 'lookup';
            default:
                return 'input';
        }
    };
    /**
     * @param {?} group
     * @return {?}
     */
    UbccParamDataUiComponent.prototype.getParamItems = /**
     * @param {?} group
     * @return {?}
     */
    function (group) {
        return this.paramDataItems.filter((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return x.groupId === group.groupId; }));
    };
    /**
     * @param {?} group
     * @param {?} index
     * @return {?}
     */
    UbccParamDataUiComponent.prototype.getIndex = /**
     * @param {?} group
     * @param {?} index
     * @return {?}
     */
    function (group, index) {
        /** @type {?} */
        var currentGroupParams = this.getParamItems(group);
        /** @type {?} */
        var currentParam = this.paramDataItems.find((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return x.id === currentGroupParams[index].id; }));
        /** @type {?} */
        var realIndex = this.paramDataItems.findIndex((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return x.id === currentParam.id; }));
        return realIndex;
    };
    /**
     * @param {?} param
     * @return {?}
     */
    UbccParamDataUiComponent.prototype.show = /**
     * @param {?} param
     * @return {?}
     */
    function (param) {
        return param.visible || false;
    };
    /**
     * @param {?} param
     * @return {?}
     */
    UbccParamDataUiComponent.prototype.isCollection = /**
     * @param {?} param
     * @return {?}
     */
    function (param) {
        if (!param || !param.parameterType) {
            return false;
        }
        if (param.parameterType.getKind() === DataTypeConst.DEFAULT_COLLECTION) {
            return true;
        }
        else {
            return false;
        }
    };
    UbccParamDataUiComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-ubcc-param-data-ui',
                    template: "<farris-section [mainTitle]=\"'\u53C2\u6570\u4FE1\u606F'\" [enableMaximize]=\"false\">\r\n\r\n    <div *ngIf=\"!template.groupEnable\">\r\n        <div *ngFor=\"let parameter of paramDataItems;let i=index;\" style=\"margin-top: 10px;\">\r\n\r\n            <div *ngIf=\"show(paramDataItems[i])\">\r\n                <div class=\"col-12\" [ngSwitch]=\"getControlType(paramDataItems[i])\">\r\n\r\n                    <lib-dropdownlist-control *ngSwitchCase=\"'dropdownlist'\" [(canEdit)]=\"canEdit\" [(param)]=\"paramDataItems[i]\"\r\n                        [(template)]=\"template\"></lib-dropdownlist-control>\r\n\r\n                    <lib-lookup-control *ngSwitchCase=\"'lookup'\" [(canEdit)]=\"canEdit\" [(param)]=\"paramDataItems[i]\"></lib-lookup-control>\r\n\r\n                    <lib-number-control *ngSwitchCase=\"'number'\" [(canEdit)]=\"canEdit\" [(param)]=\"paramDataItems[i]\"></lib-number-control>\r\n\r\n                    <lib-date-control *ngSwitchCase=\"'date'\" [(canEdit)]=\"canEdit\" [(param)]=\"paramDataItems[i]\"></lib-date-control>\r\n\r\n                    <lib-checkbox-control *ngSwitchCase=\"'checkbox'\" [(canEdit)]=\"canEdit\" [(param)]=\"paramDataItems[i]\"></lib-checkbox-control>\r\n\r\n                    <lib-input-control *ngSwitchDefault [(canEdit)]=\"canEdit\" [(param)]=\"paramDataItems[i]\"></lib-input-control>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"template.groupEnable\" style=\"margin-top: 10px;\">\r\n\r\n        <farris-panel [defaultExpand]=\"true\">\r\n            <farris-panel-item class=\"border-0\" *ngFor=\"let group of template.groups;let groupIndex=index;\" [title]=\"group.groupName\" style=\"padding-bottom: 2px;\">\r\n                <ng-template #contentTempl>\r\n                    <div *ngFor=\"let parameter of getParamItems(template.groups[groupIndex]);let i=index;\" style=\"margin-top: 10px;\">\r\n\r\n                        <div *ngIf=\"show(paramDataItems[getIndex(template.groups[groupIndex],i)])\">\r\n                            <div class=\"col-12\" [ngSwitch]=\"getControlType(paramDataItems[getIndex(template.groups[groupIndex],i)])\">\r\n\r\n                                <lib-dropdownlist-control *ngSwitchCase=\"'dropdownlist'\" [(canEdit)]=\"canEdit\"\r\n                                    [(param)]=\"paramDataItems[getIndex(template.groups[groupIndex],i)]\" [(template)]=\"template\"></lib-dropdownlist-control>\r\n\r\n                                <lib-lookup-control *ngSwitchCase=\"'lookup'\" [(canEdit)]=\"canEdit\" [(param)]=\"paramDataItems[getIndex(template.groups[groupIndex],i)]\"></lib-lookup-control>\r\n\r\n                                <lib-number-control *ngSwitchCase=\"'number'\" [(canEdit)]=\"canEdit\" [(param)]=\"paramDataItems[getIndex(template.groups[groupIndex],i)]\"></lib-number-control>\r\n\r\n                                <lib-date-control *ngSwitchCase=\"'date'\" [(canEdit)]=\"canEdit\" [(param)]=\"paramDataItems[getIndex(template.groups[groupIndex],i)]\"></lib-date-control>\r\n\r\n                                <lib-checkbox-control *ngSwitchCase=\"'checkbox'\" [(canEdit)]=\"canEdit\" [(param)]=\"paramDataItems[getIndex(template.groups[groupIndex],i)]\"></lib-checkbox-control>\r\n\r\n                                <lib-input-control *ngSwitchDefault [(canEdit)]=\"canEdit\" [(param)]=\"paramDataItems[getIndex(template.groups[groupIndex],i)]\"></lib-input-control>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </ng-template>\r\n            </farris-panel-item>\r\n        </farris-panel>\r\n    </div>\r\n\r\n</farris-section>",
                    encapsulation: ViewEncapsulation.None,
                    styles: [":host{display:flex;flex-direction:column;flex:1}.farris-panel .card.f-state-selected .card-header,lib-ubcc-param-data-ui .accordion .card.f-state-selected .card-header{color:#262626!important;background-color:#f4f4f4!important;border-color:#e6e6e6}.farris-panel .card .card-header,lib-ubcc-param-data-ui .accordion .card .card-header{position:relative;border-width:0;background-color:#f4f4f4!important;color:rgba(0,0,0,.85);padding:.5265rem .875rem}.farris-panel .card .card-header .panel-item-title,lib-ubcc-param-data-ui .accordion .card .card-header .panel-item-title{font-size:15px!important;line-height:1.375rem}lib-ubcc-param-data-ui .farris-panel{border:0 solid rgba(0,0,0,.125)!important}.farris-panel .card.f-state-selected .card-header .f-icon,lib-ubcc-param-data-ui .accordion .card.f-state-selected .card-header .f-icon{color:#171616!important}.f-section-header,lib-ubcc-param-data-ui .f-section-extend{margin:0 0 .25rem}"]
                }] }
    ];
    /** @nocollapse */
    UbccParamDataUiComponent.ctorParameters = function () { return []; };
    UbccParamDataUiComponent.propDecorators = {
        template: [{ type: Input }],
        paramDataItems: [{ type: Input }],
        canEdit: [{ type: Input }]
    };
    return UbccParamDataUiComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/http-service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var UBCC_PARAM_TEMPLATE_ROUTER = '/api/runtime/bcc/v1.0/param/template/definition';
/** @type {?} */
var UBCC_PARAM_TEMPLATE_GET_BY_ID = UBCC_PARAM_TEMPLATE_ROUTER + "/{id}";
/** @type {?} */
var UBCC_PARAM_DATA_ROUTER = '/api/runtime/bcc/v1.0/param/data';
/** @type {?} */
var UBCC_PARAM_DATA = UBCC_PARAM_DATA_ROUTER;
/** @type {?} */
var UBCC_PARAM_DATA_DIMENSION = UBCC_PARAM_DATA_ROUTER + "/dimensionalData";
/** @type {?} */
var UBCC_PARAM_DATA_GET_BY_ID = UBCC_PARAM_DATA_ROUTER + "/{templateId}/{bizTypeId}";
/** @type {?} */
var UBCC_DIMENSION_PARAM_DATA_GET_BY_ID = UBCC_PARAM_DATA_ROUTER + "/{templateId}/{bizTypeId}/dimensions/paramdatas";
/** @type {?} */
var UBCC_PARAM_HELP_DATA_ROUTER = "/api/runtime/bcc/v1.0/param/help/{helpId}/{dataIds}";
var UbccParamDataManangerService = /** @class */ (function () {
    function UbccParamDataManangerService(http, cache) {
        this.http = http;
        this.cache = cache;
        this.httpHeaders = new HttpHeaders();
        this.httpHeaders.set("sessionid", this.cache.getUserSessionId());
    }
    /**
     * @param {?} id
     * @return {?}
     */
    UbccParamDataManangerService.prototype.getParamTemplate = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var url = UBCC_PARAM_TEMPLATE_GET_BY_ID.replace('{id}', id);
        return this.http.get(url, { headers: this.httpHeaders });
    };
    /**
     * @param {?} templateId
     * @param {?} bizTypeId
     * @return {?}
     */
    UbccParamDataManangerService.prototype.getParamData = /**
     * @param {?} templateId
     * @param {?} bizTypeId
     * @return {?}
     */
    function (templateId, bizTypeId) {
        /** @type {?} */
        var url = UBCC_PARAM_DATA_GET_BY_ID.replace('{templateId}', templateId).replace('{bizTypeId}', bizTypeId);
        return this.http.get(url, { headers: this.httpHeaders });
    };
    /**
     * @param {?} templateId
     * @param {?} bizTypeId
     * @param {?} dimension1
     * @param {?} dimension2
     * @param {?} dimensionCount
     * @return {?}
     */
    UbccParamDataManangerService.prototype.getDimensionData = /**
     * @param {?} templateId
     * @param {?} bizTypeId
     * @param {?} dimension1
     * @param {?} dimension2
     * @param {?} dimensionCount
     * @return {?}
     */
    function (templateId, bizTypeId, dimension1, dimension2, dimensionCount) {
        /** @type {?} */
        var url = UBCC_DIMENSION_PARAM_DATA_GET_BY_ID.replace('{templateId}', templateId).replace('{bizTypeId}', bizTypeId);
        if (dimensionCount === 1) {
            url = url + "?dimension1=" + dimension1 + "&dimensionCount=" + dimensionCount;
        }
        if (dimensionCount === 2) {
            url = url + "?dimension1=" + dimension1 + "&dimension2=" + dimension2 + "&dimensionCount=" + dimensionCount;
        }
        return this.http.get(url, { headers: this.httpHeaders });
    };
    /**
     * @param {?} templateId
     * @param {?} bizTypeId
     * @param {?} dimensionValues
     * @param {?} paramValues
     * @return {?}
     */
    UbccParamDataManangerService.prototype.saveDimensionAndParamData = /**
     * @param {?} templateId
     * @param {?} bizTypeId
     * @param {?} dimensionValues
     * @param {?} paramValues
     * @return {?}
     */
    function (templateId, bizTypeId, dimensionValues, paramValues) {
        /** @type {?} */
        var url = UBCC_PARAM_DATA_DIMENSION;
        /** @type {?} */
        var body = {
            templateId: templateId,
            bizTypeId: bizTypeId,
            dimensionValues: dimensionValues,
            paramValues: paramValues
        };
        return this.http.post(url, body, { headers: this.httpHeaders });
    };
    /**
     * @param {?} templateId
     * @param {?} bizTypeId
     * @param {?} paramValues
     * @return {?}
     */
    UbccParamDataManangerService.prototype.saveParamData = /**
     * @param {?} templateId
     * @param {?} bizTypeId
     * @param {?} paramValues
     * @return {?}
     */
    function (templateId, bizTypeId, paramValues) {
        /** @type {?} */
        var url = UBCC_PARAM_DATA;
        /** @type {?} */
        var body = {
            templateId: templateId,
            bizTypeId: bizTypeId,
            paramValues: paramValues
        };
        return this.http.post(url, body, { headers: this.httpHeaders });
    };
    /**
     * @param {?} helpId
     * @param {?} dataIds
     * @return {?}
     */
    UbccParamDataManangerService.prototype.getHelpData = /**
     * @param {?} helpId
     * @param {?} dataIds
     * @return {?}
     */
    function (helpId, dataIds) {
        /** @type {?} */
        var url = UBCC_PARAM_HELP_DATA_ROUTER.replace('{helpId}', helpId).replace('{dataIds}', dataIds.join(','));
        return this.http.get(url, { headers: this.httpHeaders });
    };
    UbccParamDataManangerService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    UbccParamDataManangerService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: SessionService }
    ]; };
    /** @nocollapse */ UbccParamDataManangerService.ngInjectableDef = defineInjectable({ factory: function UbccParamDataManangerService_Factory() { return new UbccParamDataManangerService(inject(HttpClient), inject(SessionService)); }, token: UbccParamDataManangerService, providedIn: "root" });
    return UbccParamDataManangerService;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/param-data-utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var UbccParamDataUtils = /** @class */ (function () {
    function UbccParamDataUtils(messagerService, notify) {
        this.messagerService = messagerService;
        this.notify = notify;
    }
    /**
     * @param {?} dataType
     * @return {?}
     */
    UbccParamDataUtils.prototype.isHelpType = /**
     * @param {?} dataType
     * @return {?}
     */
    function (dataType) {
        if (!dataType) {
            return false;
        }
        if (this.isCollection(dataType)) {
            /** @type {?} */
            var elementType = this.getCollectionElementType(dataType);
            return this.isHelpTypeRef(elementType);
        }
        else {
            return this.isHelpTypeRef(dataType);
        }
    };
    /**
     * @param {?} dataType
     * @return {?}
     */
    UbccParamDataUtils.prototype.isHelpTypeRef = /**
     * @param {?} dataType
     * @return {?}
     */
    function (dataType) {
        /** @type {?} */
        var kind = dataType.getKind();
        if (!kind) {
            return false;
        }
        if (kind === DataTypeExtensionConst.UBCC_STRUCTURE_TYPE_REF) {
            /** @type {?} */
            var refType = (/** @type {?} */ (dataType));
            if (refType.type === StructureTypeRefEnum.HELP) {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            return false;
        }
    };
    // private getHelpData(data:any,paramDataItem:any){
    //     if(!data.dataValue){
    //         return;
    //     }
    //     if (data.dataValueText) {
    //         paramDataItem.valueText = data.dataValueText;
    //     }
    //     else {
    //         let dataId = data.dataValue.split(',');
    //         let helpId=this.getHelpId(paramDataItem.parameterType);
    //         this.http.getHelpData(helpId, dataId).subscribe(
    //             (helpDataItems: Array<HelpDataItem>) => {
    //                 if (!helpDataItems) {
    //                     return;
    //                 }
    //                 let texts=[];
    //                 helpDataItems.map(helpDataItem => texts.push(helpDataItem.text));
    //                 paramDataItem.valueText=texts.join(',');
    //             }
    //         );
    //     }
    // }
    // private getHelpId(dataType:IDataType){
    //     if(this.isCollection(dataType)){
    //         let refType=this.getCollectionElementType(dataType) as StructureTypeRef;
    //         return refType&&refType.refId?refType.refId:null;
    //     }
    //     else{
    //         let refType=dataType as StructureTypeRef;
    //         return refType&&refType.refId?refType.refId:null;
    //     }
    // }
    // private getHelpData(data:any,paramDataItem:any){
    //     if(!data.dataValue){
    //         return;
    //     }
    //     if (data.dataValueText) {
    //         paramDataItem.valueText = data.dataValueText;
    //     }
    //     else {
    //         let dataId = data.dataValue.split(',');
    //         let helpId=this.getHelpId(paramDataItem.parameterType);
    //         this.http.getHelpData(helpId, dataId).subscribe(
    //             (helpDataItems: Array<HelpDataItem>) => {
    //                 if (!helpDataItems) {
    //                     return;
    //                 }
    //                 let texts=[];
    //                 helpDataItems.map(helpDataItem => texts.push(helpDataItem.text));
    //                 paramDataItem.valueText=texts.join(',');
    //             }
    //         );
    //     }
    // }
    // private getHelpId(dataType:IDataType){
    //     if(this.isCollection(dataType)){
    //         let refType=this.getCollectionElementType(dataType) as StructureTypeRef;
    //         return refType&&refType.refId?refType.refId:null;
    //     }
    //     else{
    //         let refType=dataType as StructureTypeRef;
    //         return refType&&refType.refId?refType.refId:null;
    //     }
    // }
    /**
     * @param {?} dataType
     * @return {?}
     */
    UbccParamDataUtils.prototype.getCollectionElementType = 
    // private getHelpData(data:any,paramDataItem:any){
    //     if(!data.dataValue){
    //         return;
    //     }
    //     if (data.dataValueText) {
    //         paramDataItem.valueText = data.dataValueText;
    //     }
    //     else {
    //         let dataId = data.dataValue.split(',');
    //         let helpId=this.getHelpId(paramDataItem.parameterType);
    //         this.http.getHelpData(helpId, dataId).subscribe(
    //             (helpDataItems: Array<HelpDataItem>) => {
    //                 if (!helpDataItems) {
    //                     return;
    //                 }
    //                 let texts=[];
    //                 helpDataItems.map(helpDataItem => texts.push(helpDataItem.text));
    //                 paramDataItem.valueText=texts.join(',');
    //             }
    //         );
    //     }
    // }
    // private getHelpId(dataType:IDataType){
    //     if(this.isCollection(dataType)){
    //         let refType=this.getCollectionElementType(dataType) as StructureTypeRef;
    //         return refType&&refType.refId?refType.refId:null;
    //     }
    //     else{
    //         let refType=dataType as StructureTypeRef;
    //         return refType&&refType.refId?refType.refId:null;
    //     }
    // }
    /**
     * @param {?} dataType
     * @return {?}
     */
    function (dataType) {
        /** @type {?} */
        var kind = dataType.getKind();
        switch (kind) {
            case DataTypeConst.DEFAULT_COLLECTION:
                /** @type {?} */
                var elementType = ((/** @type {?} */ (dataType))).elementType;
                return this.getCollectionElementType(elementType);
            default:
                return dataType;
        }
    };
    /**
     * @param {?} dataType
     * @return {?}
     */
    UbccParamDataUtils.prototype.isCollection = /**
     * @param {?} dataType
     * @return {?}
     */
    function (dataType) {
        if (!dataType) {
            return false;
        }
        if (dataType.getKind() === DataTypeConst.DEFAULT_COLLECTION) {
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * @param {?} btnRef
     * @return {?}
     */
    UbccParamDataUtils.prototype.getModalConfig = /**
     * @param {?} btnRef
     * @return {?}
     */
    function (btnRef) {
        return {
            title: '参数配置',
            width: 650,
            height: 560,
            resizable: true,
            showButtons: true,
            showMaxButton: false,
            enableScroll: false,
            buttons: btnRef
        };
    };
    /**
     * @param {?} message
     * @param {?} infoType
     * @param {?} title
     * @param {?} timeout
     * @return {?}
     */
    UbccParamDataUtils.prototype.showInfo = /**
     * @param {?} message
     * @param {?} infoType
     * @param {?} title
     * @param {?} timeout
     * @return {?}
     */
    function (message, infoType, title, timeout) {
        this.notify.config.position = 'top-center';
        if (infoType == 'success') {
            this.notify.success((/** @type {?} */ ({ title: title, msg: message, timeout: timeout })));
        }
        else if (infoType == 'info') {
            this.notify.info((/** @type {?} */ ({ title: title, msg: message, timeout: timeout })));
        }
        else if (infoType == 'warning') {
            this.notify.warning((/** @type {?} */ ({ title: title, msg: message, timeout: timeout })));
        }
        else if (infoType == 'error') {
            this.notify.error((/** @type {?} */ ({ title: title, msg: message, timeout: timeout })));
        }
    };
    /**
     * @return {?}
     */
    UbccParamDataUtils.prototype.newGuid = /**
     * @return {?}
     */
    function () {
        return (this.s4() + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + this.s4() + this.s4());
    };
    /**
     * @return {?}
     */
    UbccParamDataUtils.prototype.s4 = /**
     * @return {?}
     */
    function () {
        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    };
    UbccParamDataUtils.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    UbccParamDataUtils.ctorParameters = function () { return [
        { type: MessagerService },
        { type: NotifyService }
    ]; };
    /** @nocollapse */ UbccParamDataUtils.ngInjectableDef = defineInjectable({ factory: function UbccParamDataUtils_Factory() { return new UbccParamDataUtils(inject(MessagerService), inject(NotifyService)); }, token: UbccParamDataUtils, providedIn: "root" });
    return UbccParamDataUtils;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ubcc-param-data-ui-dialog/ubcc-param-data-ui-dialog.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var UbccParamDataUiDialogComponent = /** @class */ (function () {
    function UbccParamDataUiDialogComponent(utils, http) {
        var _this = this;
        this.utils = utils;
        this.http = http;
        this.paramDataItems = [];
        this.confirmEmitter = new EventEmitter();
        this.closeEmitter = new EventEmitter();
        this.close = (/**
         * @return {?}
         */
        function () {
            if (_this.dialog) {
                _this.dialog.close();
            }
            _this.closeEmitter.emit();
        });
    }
    Object.defineProperty(UbccParamDataUiDialogComponent.prototype, "data", {
        /**
         * 输入数据为JSON对象
         */
        set: /**
         * 输入数据为JSON对象
         * @param {?} data
         * @return {?}
         */
        function (data) {
            this._data = data;
            this.loadParamData(this.templateId);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    UbccParamDataUiDialogComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.template = this.template || new UbccParamTemplate();
    };
    /**
     * @private
     * @param {?} templateId
     * @return {?}
     */
    UbccParamDataUiDialogComponent.prototype.loadParamData = /**
     * @private
     * @param {?} templateId
     * @return {?}
     */
    function (templateId) {
        var _this = this;
        if (!templateId) {
            return;
        }
        this.http.getParamTemplate(templateId).subscribe((/**
         * @param {?} vo
         * @return {?}
         */
        function (vo) {
            if (!vo.content) {
                return;
            }
            /** @type {?} */
            var serializer = new UbccParamTemplateSerializer();
            _this.template = serializer.deserializer(JSON.parse(vo.content));
            _this.getParamDataItemsStructure();
            _this.convertJsonToParamData();
        }));
    };
    /**
     * @private
     * @return {?}
     */
    UbccParamDataUiDialogComponent.prototype.convertJsonToParamData = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this._data || Object.keys(this._data).length <= 0) {
            return;
        }
        this.paramDataItems.map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            /** @type {?} */
            var key = Object.keys(_this._data).find((/**
             * @param {?} x
             * @return {?}
             */
            function (x) { return x === item.code; }));
            if (!key || !_this._data[key]) {
                return;
            }
            if (_this.isCollection(item)) {
                //参数的值如果是数组，以逗号隔开
                item.value = _this._data[key].join(',');
                if (!_this.utils.isHelpType(item.parameterType)) {
                    return;
                }
                /** @type {?} */
                var helpId = ((/** @type {?} */ (_this.utils.getCollectionElementType(item.parameterType)))).refId;
                _this.http.getHelpData(helpId, _this._data[key]).subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    if (!result || result.length <= 0) {
                        return;
                    }
                    /** @type {?} */
                    var values = [];
                    result.map((/**
                     * @param {?} resItem
                     * @return {?}
                     */
                    function (resItem) { return values.push(resItem.text); }));
                    item.valueText = values.join(',');
                }));
            }
            else {
                item.value = _this._data[key];
                if (item.parameterTypeDesc !== 'help') {
                    return;
                }
                /** @type {?} */
                var helpId = ((/** @type {?} */ (item.parameterType))).refId;
                _this.http.getHelpData(helpId, [item.value]).subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    if (!result || result.length <= 0) {
                        return;
                    }
                    item.valueText = result[0].text;
                }));
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    UbccParamDataUiDialogComponent.prototype.getParamDataItemsStructure = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.template || !this.template.params) {
            return;
        }
        this.paramDataItems = [];
        this.template.params.map((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return _this.paramDataItems.push(x); }));
    };
    /**
     * @private
     * @return {?}
     */
    UbccParamDataUiDialogComponent.prototype.covertParamDataToJson = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.paramDataItems || this.paramDataItems.length <= 0) {
            return null;
        }
        /** @type {?} */
        var object = new Object();
        this.paramDataItems.map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (_this.isCollection(item)) {
                object[item.code] = [];
                /** @type {?} */
                var itemValues = item.value.split(',');
                if (!itemValues || itemValues.length <= 0) {
                    return;
                }
                itemValues.map((/**
                 * @param {?} itemValue
                 * @return {?}
                 */
                function (itemValue) { return object[item.code].push(itemValue); }));
                //帮助name赋值
                if (item.parameterTypeDesc === 'help') {
                    object[item.code + "_name"] = [];
                    /** @type {?} */
                    var itemTextValues = item.valueText.split(',');
                    if (!itemTextValues || itemTextValues.length <= 0) {
                        return;
                    }
                    itemTextValues.map((/**
                     * @param {?} itemTextValue
                     * @return {?}
                     */
                    function (itemTextValue) { return object[item.code + "_name"].push(itemTextValue); }));
                }
            }
            else {
                object[item.code] = item.value;
                //帮助name赋值
                if (item.parameterTypeDesc === 'help') {
                    object[item.code + "_name"] = item.valueText;
                }
            }
        }));
        return object;
    };
    /**
     * @return {?}
     */
    UbccParamDataUiDialogComponent.prototype.confirm = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var jsonData = this.covertParamDataToJson();
        this.confirmEmitter.emit(jsonData);
    };
    /**
     * @private
     * @param {?} param
     * @return {?}
     */
    UbccParamDataUiDialogComponent.prototype.isCollection = /**
     * @private
     * @param {?} param
     * @return {?}
     */
    function (param) {
        if (!param || !param.parameterType) {
            return false;
        }
        if (param.parameterType.getKind() === DataTypeConst.DEFAULT_COLLECTION) {
            return true;
        }
        else {
            return false;
        }
    };
    UbccParamDataUiDialogComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-ubcc-param-data-ui-dialog',
                    template: "<div class=\"d-flex\" style=\"position: absolute;top: 0;bottom: 0;left: 0;right: 0;padding: 0px 8px 0px 8px;\">\n  <lib-ubcc-param-data-ui class=\"f-utils-fill\" [(template)]=\"template\" [(paramDataItems)]=\"paramDataItems\"  style=\"overflow-y: auto;\"></lib-ubcc-param-data-ui>\n</div>\n\n<ng-template #btnRef>\n  <div style=\"width: 100%;line-height: 50px; text-align: center;min-width: 140px;\">\n    <button class=\"btn btn-primary\" (click)=confirm() style=\"float:right;margin-right: 5px\">\u786E\u5B9A</button>\n    <button class=\"btn btn-secondary\" (click)=close() style=\"float:right;margin-right: 5px\">\u5173\u95ED</button>\n  </div>\n</ng-template>",
                    styles: [":host{display:flex;flex-direction:column;flex:1}"]
                }] }
    ];
    /** @nocollapse */
    UbccParamDataUiDialogComponent.ctorParameters = function () { return [
        { type: UbccParamDataUtils },
        { type: UbccParamDataManangerService }
    ]; };
    UbccParamDataUiDialogComponent.propDecorators = {
        templateId: [{ type: Input }],
        data: [{ type: Input }],
        confirmEmitter: [{ type: Output }],
        closeEmitter: [{ type: Output }],
        btnRef: [{ type: ViewChild, args: ['btnRef',] }]
    };
    return UbccParamDataUiDialogComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ubcc-param-dimension-ui-root/ubcc-param-dimension-ui-root.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var UbccParamDimensionUiRootComponent = /** @class */ (function () {
    function UbccParamDimensionUiRootComponent() {
        this.dimensionItemDatas = [];
        this.paramDataItems = [];
        this.canEdit = true;
    }
    /**
     * @return {?}
     */
    UbccParamDimensionUiRootComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.template = this.template || new UbccParamTemplate();
    };
    UbccParamDimensionUiRootComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-ubcc-param-dimension-ui-root',
                    template: "\n<lib-ubcc-param-dimension-ui [(dimensionItemDatas)]=\"dimensionItemDatas\"></lib-ubcc-param-dimension-ui>\n<lib-ubcc-param-data-ui [canEdit]=\"canEdit\" [(template)]=\"template\" [(paramDataItems)]=\"paramDataItems\"></lib-ubcc-param-data-ui>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    UbccParamDimensionUiRootComponent.ctorParameters = function () { return []; };
    UbccParamDimensionUiRootComponent.propDecorators = {
        template: [{ type: Input }],
        dimensionItemDatas: [{ type: Input }],
        paramDataItems: [{ type: Input }],
        canEdit: [{ type: Input }]
    };
    return UbccParamDimensionUiRootComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/event-bus-service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var UbccEventBusService = /** @class */ (function () {
    function UbccEventBusService() {
        this.ebs = new EventEmitter();
    }
    UbccEventBusService.decorators = [
        { type: Injectable }
    ];
    return UbccEventBusService;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ubcc-param-data-ui-root.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var UbccParamDataUiRootComponent = /** @class */ (function () {
    function UbccParamDataUiRootComponent(utils, ebsService, http, resolver) {
        var _this = this;
        this.utils = utils;
        this.ebsService = ebsService;
        this.http = http;
        this.resolver = resolver;
        this._canEdit = true;
        this.dimensionItemDatas = [];
        this.paramDataItems = [];
        this.paramDataItemsClone = [];
        this.templateSerializer = new UbccParamTemplateSerializer();
        this.assignmentSerializer = new UbccParamTemplateAssignmentSerializer();
        this.ebsService.ebs.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.loadDimensionDataFromRemote();
        }));
    }
    Object.defineProperty(UbccParamDataUiRootComponent.prototype, "assignment", {
        set: /**
         * @param {?} assignment
         * @return {?}
         */
        function (assignment) {
            this._assignment = assignment;
            this.loadData();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UbccParamDataUiRootComponent.prototype, "canEdit", {
        set: /**
         * @param {?} canEdit
         * @return {?}
         */
        function (canEdit) {
            this._canEdit = canEdit;
            if (this.currentInstance) {
                this.currentInstance.canEdit = this._canEdit;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    UbccParamDataUiRootComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this._assignment = this._assignment || new UbccParamTemplateAssignment();
        this.template = this.template || new UbccParamTemplate();
    };
    /**
     * @return {?}
     */
    UbccParamDataUiRootComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.paramDataPanel.clear();
    };
    /**
     * @private
     * @return {?}
     */
    UbccParamDataUiRootComponent.prototype.loadData = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        //参数,维度数据源初始化
        this.dimensionItemDatas = [];
        this.paramDataItems = [];
        this.paramDataItemsClone = [];
        if (!this._assignment || !this._assignment.templateId) {
            return;
        }
        this.http.getParamTemplate(this._assignment.templateId).subscribe((/**
         * @param {?} vo
         * @return {?}
         */
        function (vo) {
            if (!vo || !vo.content) {
                return;
            }
            /** @type {?} */
            var serializer = new UbccParamTemplateSerializer();
            _this.template = serializer.deserializer(JSON.parse(vo.content));
            _this.load();
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            throw err;
        }));
    };
    /**
     * @private
     * @return {?}
     */
    UbccParamDataUiRootComponent.prototype.load = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        //参数结构初始化，参数值为空
        this.paramDataItemsInit();
        //根据维度创建对应的UI组件
        if (this._assignment.useDimension) {
            //维度结构初始化，维度数据为空
            this.dimensionDataItemsInit();
            //创建维度UI组件，此处不取数，只渲染界面，在选择维度数据后再加载数据
            this.createDimensionRootUiComponent();
        }
        else {
            this.http.getParamData(this._assignment.templateId, this._assignment.bizTypeId).subscribe((/**
             * @param {?} dataItems
             * @return {?}
             */
            function (dataItems) {
                _this.getParamValues(dataItems);
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                throw err;
            }));
            //创建参数UI组件
            this.createParamDataUiComponent();
        }
    };
    /**
     * @private
     * @param {?} dataItems
     * @return {?}
     */
    UbccParamDataUiRootComponent.prototype.getParamValues = /**
     * @private
     * @param {?} dataItems
     * @return {?}
     */
    function (dataItems) {
        var _this = this;
        if (!dataItems || dataItems.length <= 0) {
            return;
        }
        this.paramDataItems.map((/**
         * @param {?} paramDataItem
         * @return {?}
         */
        function (paramDataItem) {
            /** @type {?} */
            var data = dataItems.find((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.dataCode === paramDataItem.code; }));
            if (data) {
                paramDataItem.value = data.dataValue;
                if (!_this.utils.isHelpType(paramDataItem.parameterType)) {
                    return;
                }
                paramDataItem.valueText = data.dataValueText || '';
                // 从前端获取帮助数据
                // this.getHelpData(data,paramDataItem);
            }
        }));
        this.paramValuesClone(this.paramDataItemsClone, this.paramDataItems);
    };
    /**
     * @private
     * @param {?} target
     * @param {?} source
     * @return {?}
     */
    UbccParamDataUiRootComponent.prototype.paramValuesClone = /**
     * @private
     * @param {?} target
     * @param {?} source
     * @return {?}
     */
    function (target, source) {
        if (source.length == 0 || target.length == 0 || target.length !== source.length) {
            return;
        }
        target.map((/**
         * @param {?} paramDataItemClone
         * @return {?}
         */
        function (paramDataItemClone) {
            /** @type {?} */
            var index = source.findIndex((/**
             * @param {?} x
             * @return {?}
             */
            function (x) { return x.code === paramDataItemClone.code; }));
            if (index !== (-1)) {
                paramDataItemClone.id = source[index].id;
                paramDataItemClone.value = source[index].value;
                paramDataItemClone.valueText = source[index].valueText;
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    UbccParamDataUiRootComponent.prototype.loadDimensionDataFromRemote = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.paramDataItemsInit();
        this.currentInstance.paramDataItems = this.paramDataItems;
        /** @type {?} */
        var dimensionItemValues = [];
        this.dimensionItemDatas.map((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return dimensionItemValues.push(x.value); }));
        /** @type {?} */
        var count = dimensionItemValues.length;
        if (count <= 0) {
            return;
        }
        if (count === 1) {
            if (!dimensionItemValues[0]) {
                return;
            }
        }
        if (count === 2) {
            if (!dimensionItemValues[0] || !dimensionItemValues[1]) {
                return;
            }
        }
        /** @type {?} */
        var dimension1 = dimensionItemValues[0] ? dimensionItemValues[0] : null;
        /** @type {?} */
        var dimension2 = dimensionItemValues[1] ? dimensionItemValues[1] : null;
        this.http.getDimensionData(this._assignment.templateId, this._assignment.bizTypeId, dimension1, dimension2, count).subscribe((/**
         * @param {?} dataItems
         * @return {?}
         */
        function (dataItems) {
            _this.getParamValues(dataItems);
        }));
    };
    /**
     * @private
     * @return {?}
     */
    UbccParamDataUiRootComponent.prototype.paramDataItemsInit = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var template = this.templateSerializer.deserializer(this.templateSerializer.serialize(this.template));
        this.paramDataItems = [];
        if (template && template.params) {
            template.params.map((/**
             * @param {?} x
             * @return {?}
             */
            function (x) {
                if (_this._assignment.useDimension) {
                    _this.dimensionParamDefaultValueInit((/** @type {?} */ (x)));
                }
                else {
                    ((/** @type {?} */ (x))).value = x.defaultValue;
                }
                _this.paramDataItems.push(x);
            }));
        }
        this.paramDataItemsCloneInit();
    };
    /**
     * @private
     * @param {?} paramData
     * @return {?}
     */
    UbccParamDataUiRootComponent.prototype.dimensionParamDefaultValueInit = /**
     * @private
     * @param {?} paramData
     * @return {?}
     */
    function (paramData) {
        /** @type {?} */
        var count = this.dimensionItemDatas.length;
        if (count <= 0) {
            return;
        }
        if (count === 1) {
            if (!this.dimensionItemDatas[0] || !this.dimensionItemDatas[0].value) {
                return;
            }
        }
        if (count === 2) {
            if (!this.dimensionItemDatas[0] || !this.dimensionItemDatas[1] || !this.dimensionItemDatas[0].value || !this.dimensionItemDatas[1].value) {
                return;
            }
        }
        paramData.value = paramData.defaultValue;
    };
    /**
     * @private
     * @return {?}
     */
    UbccParamDataUiRootComponent.prototype.paramDataItemsCloneInit = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var template = this.templateSerializer.deserializer(this.templateSerializer.serialize(this.template));
        this.paramDataItemsClone = [];
        if (template && template.params) {
            template.params.map((/**
             * @param {?} x
             * @return {?}
             */
            function (x) {
                if (_this._assignment.useDimension) {
                    _this.dimensionParamDefaultValueInit((/** @type {?} */ (x)));
                }
                else {
                    ((/** @type {?} */ (x))).value = x.defaultValue;
                }
                _this.paramDataItemsClone.push(x);
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    UbccParamDataUiRootComponent.prototype.dimensionDataItemsInit = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var assignment = this.assignmentSerializer.deserialize(this.assignmentSerializer.serialize(this._assignment));
        if (assignment && assignment.dimensionInfo
            && assignment.dimensionInfo.definition
            && assignment.dimensionInfo.definition.dimensionItems) {
            this.dimensionItemDatas = [];
            assignment.dimensionInfo.definition.dimensionItems.forEach((/**
             * @param {?} dimensionData
             * @return {?}
             */
            function (dimensionData) {
                _this.dimensionItemDatas.push((/** @type {?} */ (dimensionData)));
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    UbccParamDataUiRootComponent.prototype.createParamDataUiComponent = /**
     * @private
     * @return {?}
     */
    function () {
        this.paramDataPanel.clear();
        /** @type {?} */
        var factory = this.resolver.resolveComponentFactory(UbccParamDataUiComponent);
        /** @type {?} */
        var cmpRef = this.paramDataPanel.createComponent(factory);
        cmpRef.instance.canEdit = this.canEdit;
        cmpRef.instance.template = this.template;
        cmpRef.instance.paramDataItems = this.paramDataItems;
        this.currentInstance = cmpRef.instance;
    };
    /**
     * @private
     * @return {?}
     */
    UbccParamDataUiRootComponent.prototype.createDimensionRootUiComponent = /**
     * @private
     * @return {?}
     */
    function () {
        this.paramDataPanel.clear();
        /** @type {?} */
        var factory = this.resolver.resolveComponentFactory(UbccParamDimensionUiRootComponent);
        /** @type {?} */
        var cmpRef = this.paramDataPanel.createComponent(factory);
        cmpRef.instance.canEdit = this.canEdit;
        cmpRef.instance.dimensionItemDatas = this.dimensionItemDatas;
        cmpRef.instance.paramDataItems = this.paramDataItems;
        cmpRef.instance.template = this.template;
        this.currentInstance = cmpRef.instance;
    };
    /**
     * @return {?}
     */
    UbccParamDataUiRootComponent.prototype.convertDimensionDataToDataVo = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.dimensionItemDatas) {
            return null;
        }
        /** @type {?} */
        var dimensionValues = new Array();
        this.dimensionItemDatas.map((/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            /** @type {?} */
            var dimensionValue = new DataItem();
            dimensionValue.dataCode = x.code;
            dimensionValue.dataValue = ((/** @type {?} */ (x))).value;
            dimensionValue.dataType = _this.getDimensionValueType(x.dataType);
            dimensionValues.push(dimensionValue);
        }));
        return dimensionValues;
    };
    /**
     * @return {?}
     */
    UbccParamDataUiRootComponent.prototype.convertParamDataToDataVo = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.paramDataItems) {
            return null;
        }
        /** @type {?} */
        var paramValues = new Array();
        this.paramDataItems.map((/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            /** @type {?} */
            var paramValue = new DataItem();
            paramValue.dataCode = x.code;
            paramValue.dataValue = ((/** @type {?} */ (x))).value;
            paramValue.dataType = _this.getParamValueType(((/** @type {?} */ (x))).parameterType);
            paramValues.push(paramValue);
        }));
        this.paramValuesClone(this.paramDataItemsClone, this.paramDataItems);
        return paramValues;
    };
    /**
     * @private
     * @param {?} dataType
     * @return {?}
     */
    UbccParamDataUiRootComponent.prototype.getDimensionValueType = /**
     * @private
     * @param {?} dataType
     * @return {?}
     */
    function (dataType) {
        /** @type {?} */
        var kind = dataType.getKind();
        switch (kind) {
            case DataTypeConst.DEFAULT_PRIMITIVE:
                return DataTypeConst.DEFAULT_PRIMITIVE + "." + ((/** @type {?} */ (dataType))).primitiveTypeKind;
            case DataTypeConst.DEFAULT_ENUMERATION:
                return DataTypeConst.DEFAULT_ENUMERATION;
            case DataTypeExtensionConst.HELP_TYPE:
                return DataTypeExtensionConst.HELP_TYPE + ("##" + ((/** @type {?} */ (dataType))).helpId);
            default:
                throw new Error("\u4E1A\u52A1\u53C2\u6570\u4E0D\u652F\u6301\u7684\u53C2\u6570\u7C7B\u578B" + kind);
        }
    };
    /**
     * @private
     * @param {?} dataType
     * @return {?}
     */
    UbccParamDataUiRootComponent.prototype.getParamValueType = /**
     * @private
     * @param {?} dataType
     * @return {?}
     */
    function (dataType) {
        /** @type {?} */
        var kind = dataType.getKind();
        switch (kind) {
            case DataTypeConst.DEFAULT_COLLECTION:
                /** @type {?} */
                var elemetType = ((/** @type {?} */ (dataType))).elementType;
                return DataTypeConst.DEFAULT_COLLECTION + "." + this.getParamValueType(elemetType);
            case DataTypeConst.DEFAULT_PRIMITIVE:
                return DataTypeConst.DEFAULT_PRIMITIVE + "." + PrimitiveTypeKind[((/** @type {?} */ (dataType))).primitiveTypeKind];
            case DataTypeExtensionConst.UBCC_STRUCTURE_TYPE_REF:
                /** @type {?} */
                var refType = (/** @type {?} */ (dataType));
                return refType.type === StructureTypeRefEnum.HELP ? DataTypeExtensionConst.HELP_TYPE + ("##" + refType.refId) : DataTypeConst.DEFAULT_ENUMERATION;
            default:
                throw new Error("\u4E1A\u52A1\u53C2\u6570\u4E0D\u652F\u6301\u7684\u53C2\u6570\u7C7B\u578B" + kind);
        }
    };
    /**
     * @return {?}
     */
    UbccParamDataUiRootComponent.prototype.cancel = /**
     * @return {?}
     */
    function () {
        this.paramValuesClone(this.paramDataItems, this.paramDataItemsClone);
        this.currentInstance.paramDataItems = this.paramDataItems;
    };
    UbccParamDataUiRootComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-ubcc-param-data-ui-root',
                    template: "<div class=\"col-12\">\r\n    <ng-template #paramDataPanel></ng-template>\r\n    <!-- <lib-ubcc-param-data-ui *ngIf=\"show()=='paramUi'\"\r\n        [canEdit]=\"canEdit\" \r\n        [(template)]=\"template\" \r\n        [(paramDataItems)]=\"paramDataItems\">\r\n    </lib-ubcc-param-data-ui>\r\n    <lib-ubcc-param-dimension-ui-root  *ngIf=\"show()=='dimensionUi'\"\r\n        [canEdit]=\"canEdit\" \r\n        [(template)]=\"template\" \r\n        [(paramDataItems)]=\"paramDataItems\" \r\n        [(dimensionItemDatas)]=\"dimensionItemDatas\">\r\n    </lib-ubcc-param-dimension-ui-root> -->\r\n</div>",
                    providers: [UbccEventBusService],
                    styles: [":host{display:flex;flex-direction:column;flex:1}"]
                }] }
    ];
    /** @nocollapse */
    UbccParamDataUiRootComponent.ctorParameters = function () { return [
        { type: UbccParamDataUtils },
        { type: UbccEventBusService },
        { type: UbccParamDataManangerService },
        { type: ComponentFactoryResolver }
    ]; };
    UbccParamDataUiRootComponent.propDecorators = {
        assignment: [{ type: Input }],
        canEdit: [{ type: Input }],
        paramDataPanel: [{ type: ViewChild, args: ['paramDataPanel', { read: ViewContainerRef },] }]
    };
    return UbccParamDataUiRootComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/lookup-http-service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LookUpHttpService = /** @class */ (function () {
    function LookUpHttpService(http, cache) {
        this.http = http;
        this.cache = cache;
        this.httpHeaders = new HttpHeaders().set("sessionid", this.cache.getUserSessionId());
        this.httpHeaders = new HttpHeaders();
        this.httpHeaders.set("sessionid", this.cache.getUserSessionId());
    }
    /**
     * @param {?} uri
     * @param {?=} params
     * @return {?}
     */
    LookUpHttpService.prototype.getData = /**
     * @param {?} uri
     * @param {?=} params
     * @return {?}
     */
    function (uri, params) {
        if (uri.includes('{helpId}')) {
            return of(null);
        }
        /** @type {?} */
        var queryParam = JSON.stringify(params);
        /** @type {?} */
        var url = uri + "?queryParam=" + encodeURIComponent(queryParam);
        return this.http.get(url, { headers: this.httpHeaders });
    };
    LookUpHttpService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    LookUpHttpService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: SessionService }
    ]; };
    return LookUpHttpService;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/common/look-up-binding-fields.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LookUpBindingFields = /** @class */ (function () {
    function LookUpBindingFields() {
        this.displayType = 'List';
    }
    return LookUpBindingFields;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/dimension-control/dimension-lookup-control/dimension-lookup-control.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var BCC_HELP_URL = "/api/runtime/bcc/v1.0/param/help/{helpId}";
var DimensionLookupControlComponent = /** @class */ (function () {
    function DimensionLookupControlComponent(metadataRTService, ebsService) {
        this.metadataRTService = metadataRTService;
        this.ebsService = ebsService;
        this.isSingleSelect = true;
        this.isHelpInfoLoad = false;
        this.helpUrl = BCC_HELP_URL;
    }
    /**
     * @return {?}
     */
    DimensionLookupControlComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.dimensionItem = this.dimensionItem || {};
        this.bindingFields = this.bindingFields || new LookUpBindingFields();
        this.helpConfigInit();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    DimensionLookupControlComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.helpConfigInit();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DimensionLookupControlComponent.prototype.selectedHelpHandler = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (!$event) {
            return;
        }
        this.dimensionItem.value = '';
        this.dimensionItem.value = $event[this.bindingFields.idField];
        this.ebsService.ebs.emit(this.dimensionItem);
    };
    /**
     * @private
     * @return {?}
     */
    DimensionLookupControlComponent.prototype.helpConfigInit = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.isHelpInfoLoad || !this.dimensionItem || !this.dimensionItem.dataType) {
            return;
        }
        /** @type {?} */
        var helpType = (/** @type {?} */ (this.dimensionItem.dataType));
        this.loadDataFromMetadata(helpType);
    };
    /**
     * @private
     * @param {?} helpType
     * @return {?}
     */
    DimensionLookupControlComponent.prototype.loadDataFromMetadata = /**
     * @private
     * @param {?} helpType
     * @return {?}
     */
    function (helpType) {
        var _this = this;
        if (!helpType.helpId) {
            return;
        }
        this.metadataRTService.GetMetadataRT(helpType.helpId).subscribe((/**
         * @param {?} metadataDto
         * @return {?}
         */
        function (metadataDto) {
            /** @type {?} */
            var helpMetadata = JSON.parse(metadataDto.content);
            _this.setHelpInfo(helpMetadata);
            _this.isHelpInfoLoad = true;
        }));
    };
    /**
     * @param {?} helpMetadata
     * @return {?}
     */
    DimensionLookupControlComponent.prototype.setHelpInfo = /**
     * @param {?} helpMetadata
     * @return {?}
     */
    function (helpMetadata) {
        this.helpUrl = BCC_HELP_URL.replace('{helpId}', helpMetadata.id);
        this.bindingFields.idField = helpMetadata.idField;
        this.bindingFields.textField = helpMetadata.textField;
        this.bindingFields.valueField = helpMetadata.valueField;
        this.bindingFields.displayType = helpMetadata.displayType;
    };
    DimensionLookupControlComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-dimension-lookup-control',
                    template: "<div class=\"farris-form-controls-inline farris-group-wrap col-12\">\n  <div class=\"form-group farris-form-group\">\n    <label class=\"col-form-label col-4\">\n      <span class=\"farris-label-text\" style=\"float:right\">{{dimensionItem.name}}</span>\n    </label>\n    <div class=\"farris-input-wrap col-6\">\n      <farris-lookup-grid [editable]=\"false\" (selectedData)=\"selectedHelpHandler($event)\" [uri]=\"helpUrl\" [idField]=\"bindingFields.idField\"\n        [textField]=\"bindingFields.textField\" [valueField]=\"bindingFields.valueField\" [enableClear]=\"false\" \n        [(ngModel)]=\"dimensionItem.valueText\" name=\"{{dimensionItem.code}}\"\n        [displayType]=\"bindingFields.displayType\" [pagination]=\"true\" [singleSelect]=\"isSingleSelect\" required>\n      </farris-lookup-grid>\n    </div>\n  </div>\n</div>",
                    providers: [{ provide: ServerSideToken, useClass: LookUpHttpService }, GSPMetadataRTService],
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    DimensionLookupControlComponent.ctorParameters = function () { return [
        { type: GSPMetadataRTService },
        { type: UbccEventBusService }
    ]; };
    DimensionLookupControlComponent.propDecorators = {
        dimensionItem: [{ type: Input }]
    };
    return DimensionLookupControlComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/dimension-control/dimension-dropdownlist-control/dimension-dropdownlist-control.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DimensionDropdownlistControlComponent = /** @class */ (function () {
    function DimensionDropdownlistControlComponent(ebsService) {
        this.ebsService = ebsService;
        this.valueChangeEmit = new EventEmitter();
        this.enumerationItems = [];
        this.isMultiSelect = false;
        this.isEnumInfoLoad = false;
    }
    /**
     * @return {?}
     */
    DimensionDropdownlistControlComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.dimensionItem = this.dimensionItem || {};
        if (!this.isEnumInfoLoad) {
            this.enumConfigInit();
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    DimensionDropdownlistControlComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (!this.isEnumInfoLoad) {
            this.enumConfigInit();
        }
    };
    /**
     * @return {?}
     */
    DimensionDropdownlistControlComponent.prototype.enumConfigInit = /**
     * @return {?}
     */
    function () {
        this.getEnumItems();
    };
    /**
     * @return {?}
     */
    DimensionDropdownlistControlComponent.prototype.getEnumItems = /**
     * @return {?}
     */
    function () {
        if (!this.dimensionItem || !this.dimensionItem.dataType) {
            return;
        }
        /** @type {?} */
        var enumType = (/** @type {?} */ (this.dimensionItem.dataType));
        this.get(enumType);
    };
    /**
     * @param {?} enumType
     * @return {?}
     */
    DimensionDropdownlistControlComponent.prototype.get = /**
     * @param {?} enumType
     * @return {?}
     */
    function (enumType) {
        var _this = this;
        if (!enumType || !enumType.enumerationItems) {
            return;
        }
        enumType.enumerationItems.map((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return _this.enumerationItems.push(x); }));
        this.isEnumInfoLoad = true;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DimensionDropdownlistControlComponent.prototype.valueChangeHandler = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.dimensionItem.value = $event.value;
        this.ebsService.ebs.emit(this.dimensionItem);
    };
    DimensionDropdownlistControlComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-dimension-dropdownlist-control',
                    template: "<div class=\"farris-form-controls-inline farris-group-wrap col-12\">\n    <div class=\"form-group farris-form-group\">\n      <label class=\"col-form-label col-4\">\n        <span class=\"farris-label-text\" style=\"float:right\">{{dimensionItem.name}}</span>\n      </label>\n      <div class=\"farris-input-wrap col-6\">\n        <farris-combo-list [idField]=\"'code'\" [textField]=\"'description'\" [data]=\"enumerationItems\" [multiSelect]=\"isMultiSelect\"\n          (valueChange)=\"valueChangeHandler($event)\">\n        </farris-combo-list>\n      </div>\n    </div>\n  </div>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    DimensionDropdownlistControlComponent.ctorParameters = function () { return [
        { type: UbccEventBusService }
    ]; };
    DimensionDropdownlistControlComponent.propDecorators = {
        dimensionItem: [{ type: Input }],
        valueChangeEmit: [{ type: Output }]
    };
    return DimensionDropdownlistControlComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/dimension-control/dimension-input-control/dimension-input-control.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DimensionInputControlComponent = /** @class */ (function () {
    function DimensionInputControlComponent(ebsService) {
        this.ebsService = ebsService;
    }
    /**
     * @return {?}
     */
    DimensionInputControlComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.dimensionItem = this.dimensionItem || {};
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DimensionInputControlComponent.prototype.ngModelChangeHandler = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.ebsService.ebs.emit(this.dimensionItem);
    };
    DimensionInputControlComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-dimension-input-control',
                    template: "<div class=\"farris-form-controls-inline farris-group-wrap col-12\">\n  <div class=\"form-group farris-form-group\">\n    <label class=\"col-form-label col-4\">\n      <span class=\"farris-label-text\" style=\"float:right\">{{dimensionItem.name}}</span>\n    </label>\n    <div class=\"farris-input-wrap col-6\">\n      <input type=\"text\" class=\"form-control\" placeholder=\"\u8BF7\u8F93\u5165\" autocomplete=\"off\" (ngModelChange)=\"ngModelChangeHandler($event)\"\n      [(ngModel)]=\"dimensionItem.value\" name=\"dimensionItem{{dimensionItem.code}}\">\n    </div>\n  </div>\n</div>",
                    providers: [UbccEventBusService],
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    DimensionInputControlComponent.ctorParameters = function () { return [
        { type: UbccEventBusService }
    ]; };
    DimensionInputControlComponent.propDecorators = {
        dimensionItem: [{ type: Input }]
    };
    return DimensionInputControlComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/param-control/checkbox-control/checkbox-control.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CheckboxControlComponent = /** @class */ (function () {
    function CheckboxControlComponent(service) {
        this.service = service;
        this.canEdit = true;
    }
    /**
     * @return {?}
     */
    CheckboxControlComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.param = this.param || {};
        this.checkboxId = this.service.newGuid();
    };
    /**
     * @return {?}
     */
    CheckboxControlComponent.prototype.getValue = /**
     * @return {?}
     */
    function () {
        if (!this.param || !this.param.value) {
            return false;
        }
        /** @type {?} */
        var value = String(this.param.value).toLowerCase();
        return value === 'true' ? true : false;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    CheckboxControlComponent.prototype.enable = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.param.value = value;
    };
    /**
     * @return {?}
     */
    CheckboxControlComponent.prototype.isReadonly = /**
     * @return {?}
     */
    function () {
        if (!this.canEdit) {
            return true;
        }
        else {
            return !this.param || !this.param.readonly ? false : true;
        }
    };
    /**
     * @return {?}
     */
    CheckboxControlComponent.prototype.show = /**
     * @return {?}
     */
    function () {
        return !this.param || !this.param.description ? false : true;
    };
    CheckboxControlComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-checkbox-control',
                    template: "<div class=\"farris-form-controls-inline farris-group-wrap col-12\">\n  <div class=\"form-group farris-form-group\">\n    <label class=\"col-form-label col-4\">\n      <span class=\"farris-label-text\" style=\"float:right\">{{param.name}}</span>\n    </label>\n    <div class=\"farris-input-wrap col-6\">\n      <div class=\"custom-control custom-checkbox\">\n        <input [checked]=\"getValue()\" class=\"custom-control-input\" id=\"{{checkboxId}}Checkbox\" \n          type=\"checkbox\" (click)=\"enable($event.target.checked)\" [disabled]=\"isReadonly()\">\n        <label class=\"custom-control-label\" for=\"{{checkboxId}}Checkbox\"></label>\n      </div>\n    </div>\n    <span *ngIf=\"show()\" farrisTooltip [placement]=\"'right-top'\" [content]=\"param.description\" class=\"f-icon f-icon-info\"></span>\n  </div>\n</div>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    CheckboxControlComponent.ctorParameters = function () { return [
        { type: UbccParamDataUtils }
    ]; };
    CheckboxControlComponent.propDecorators = {
        param: [{ type: Input }],
        canEdit: [{ type: Input }]
    };
    return CheckboxControlComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/param-control/input-control/input-control.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InputControlComponent = /** @class */ (function () {
    function InputControlComponent() {
        this.canEdit = true;
    }
    /**
     * @return {?}
     */
    InputControlComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.param = this.param || {};
    };
    /**
     * @return {?}
     */
    InputControlComponent.prototype.isReadonly = /**
     * @return {?}
     */
    function () {
        if (!this.canEdit) {
            return true;
        }
        else {
            return !this.param || !this.param.readonly ? false : true;
        }
    };
    /**
     * @return {?}
     */
    InputControlComponent.prototype.show = /**
     * @return {?}
     */
    function () {
        return !this.param || !this.param.description ? false : true;
    };
    InputControlComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-input-control',
                    template: "<div class=\"farris-form-controls-inline farris-group-wrap col-12\">\n  <div class=\"form-group farris-form-group\">\n    <label class=\"col-form-label col-4\">\n      <span class=\"farris-label-text\" style=\"float:right\">{{param.name}}</span>\n    </label>\n    <div class=\"farris-input-wrap col-6\">\n      <input-group type=\"text\" placeholder=\"\u8BF7\u8F93\u5165\" [readonly]=\"isReadonly()\" autocomplete=\"off\" [(value)]=\"param.value\"></input-group>\n    </div>\n    <span *ngIf=\"show()\" farrisTooltip [placement]=\"'right-top'\" [content]=\"param.description\" class=\"f-icon f-icon-info\"></span>\n  </div>\n</div>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    InputControlComponent.ctorParameters = function () { return []; };
    InputControlComponent.propDecorators = {
        param: [{ type: Input }],
        canEdit: [{ type: Input }]
    };
    return InputControlComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/param-control/date-control/date-control.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DateControlComponent = /** @class */ (function () {
    function DateControlComponent() {
        this.canEdit = true;
    }
    /**
     * @return {?}
     */
    DateControlComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.param = this.param || {};
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DateControlComponent.prototype.dateTimeValueChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.param.value = $event.jsDate;
    };
    /**
     * @return {?}
     */
    DateControlComponent.prototype.isReadonly = /**
     * @return {?}
     */
    function () {
        if (!this.canEdit) {
            return true;
        }
        else {
            return !this.param || !this.param.readonly ? false : true;
        }
    };
    /**
     * @return {?}
     */
    DateControlComponent.prototype.show = /**
     * @return {?}
     */
    function () {
        return !this.param || !this.param.description ? false : true;
    };
    DateControlComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-date-control',
                    template: "<div class=\"farris-form-controls-inline farris-group-wrap col-12\">\n  <div class=\"form-group farris-form-group\">\n    <label class=\"col-form-label col-4\">\n      <span class=\"farris-label-text\" style=\"float:right\">{{param.name}}</span>\n    </label>\n    <div class=\"farris-input-wrap col-6\">\n      <farris-datepicker [editable]=\"false\" [readonly]=\"isReadonly()\" [(ngModel)]=\"param.value\" name=\"{{param.code}}\" (valueChange)=\"dateTimeValueChange($event)\">\n      </farris-datepicker>\n    </div>\n    <span *ngIf=\"show()\" farrisTooltip [placement]=\"'right-top'\" [content]=\"param.description\" class=\"f-icon f-icon-info\"></span>\n  </div>\n</div>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    DateControlComponent.ctorParameters = function () { return []; };
    DateControlComponent.propDecorators = {
        param: [{ type: Input }],
        canEdit: [{ type: Input }]
    };
    return DateControlComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/param-control/dropdownlist-control/dropdownlist-control.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DropdownlistControlComponent = /** @class */ (function () {
    function DropdownlistControlComponent() {
        this.canEdit = true;
        this.enumerationItems = [];
        this.isMultiSelect = false;
        this.isEnumInfoLoad = false;
    }
    /**
     * @return {?}
     */
    DropdownlistControlComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.param = this.param || {};
        this.template = this.template || new UbccParamTemplate();
        if (!this.isEnumInfoLoad) {
            this.enumConfigInit();
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    DropdownlistControlComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (!this.isEnumInfoLoad) {
            this.enumConfigInit();
        }
    };
    /**
     * @return {?}
     */
    DropdownlistControlComponent.prototype.enumConfigInit = /**
     * @return {?}
     */
    function () {
        this.isMultiSelect = this.isCollection();
        this.getEnumItems();
    };
    /**
     * @return {?}
     */
    DropdownlistControlComponent.prototype.getEnumItems = /**
     * @return {?}
     */
    function () {
        if (!this.param || !this.param.parameterType || !this.template.structuredTypes) {
            return;
        }
        if (this.param.parameterType.kind === DataTypeConst.DEFAULT_COLLECTION) {
            /** @type {?} */
            var elementType = this.getCollectionElementType(this.param.parameterType);
            this.get(elementType);
        }
        else if (this.param.parameterType.kind === DataTypeExtensionConst.UBCC_STRUCTURE_TYPE_REF) {
            /** @type {?} */
            var typeRef = (/** @type {?} */ (this.param.parameterType));
            this.get(typeRef);
        }
        else {
            throw new Error("\u679A\u4E3E\u4E0D\u652F\u6301\u7684\u53C2\u6570\u7C7B\u578B" + this.param.parameterType.kind);
        }
    };
    /**
     * @param {?} refType
     * @return {?}
     */
    DropdownlistControlComponent.prototype.get = /**
     * @param {?} refType
     * @return {?}
     */
    function (refType) {
        var _this = this;
        /** @type {?} */
        var enumType = (/** @type {?} */ (this.template.structuredTypes.find((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return x.id === refType.refId; }))));
        if (!enumType || !enumType.enumerationItems) {
            return;
        }
        enumType.enumerationItems.map((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return _this.enumerationItems.push(x); }));
        this.isEnumInfoLoad = true;
    };
    /**
     * @param {?} dataType
     * @return {?}
     */
    DropdownlistControlComponent.prototype.getCollectionElementType = /**
     * @param {?} dataType
     * @return {?}
     */
    function (dataType) {
        /** @type {?} */
        var kind = dataType.getKind();
        switch (kind) {
            case DataTypeConst.DEFAULT_COLLECTION:
                /** @type {?} */
                var elementType = ((/** @type {?} */ (dataType))).elementType;
                return this.getCollectionElementType(elementType);
            default:
                return dataType;
        }
    };
    /**
     * @return {?}
     */
    DropdownlistControlComponent.prototype.isCollection = /**
     * @return {?}
     */
    function () {
        if (!this.param || !this.param.parameterType) {
            return false;
        }
        if (this.param.parameterType.getKind() === DataTypeConst.DEFAULT_COLLECTION) {
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DropdownlistControlComponent.prototype.valueChangeHandler = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.param.value = $event.value;
    };
    /**
     * @return {?}
     */
    DropdownlistControlComponent.prototype.isReadonly = /**
     * @return {?}
     */
    function () {
        if (!this.canEdit) {
            return true;
        }
        else {
            return !this.param || !this.param.readonly ? false : true;
        }
    };
    /**
     * @return {?}
     */
    DropdownlistControlComponent.prototype.show = /**
     * @return {?}
     */
    function () {
        return !this.param || !this.param.description ? false : true;
    };
    DropdownlistControlComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-dropdownlist-control',
                    template: "<div class=\"farris-form-controls-inline farris-group-wrap col-12\">\n  <div class=\"form-group farris-form-group\">\n    <label class=\"col-form-label col-4\">\n      <span class=\"farris-label-text\" style=\"float:right\">{{param.name}}</span>\n    </label>\n    <div class=\"farris-input-wrap col-6\">\n      <farris-combo-list [idField]=\"'code'\" [textField]=\"'description'\" [data]=\"enumerationItems\" [multiSelect]=\"isMultiSelect\"\n        (valueChange)=\"valueChangeHandler($event)\" [readonly]=\"isReadonly()\" [(ngModel)]=\"param.value\" name=\"{{param.code}}\">\n      </farris-combo-list>\n    </div>\n    <span *ngIf=\"show()\" farrisTooltip [placement]=\"'right-top'\" [content]=\"param.description\" class=\"f-icon f-icon-info\"></span>\n  </div>\n</div>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    DropdownlistControlComponent.ctorParameters = function () { return []; };
    DropdownlistControlComponent.propDecorators = {
        param: [{ type: Input }],
        template: [{ type: Input }],
        canEdit: [{ type: Input }]
    };
    return DropdownlistControlComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/param-control/lookup-control/lookup-control.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var BCC_HELP_URL$1 = "/api/runtime/bcc/v1.0/param/help/{helpId}";
var LookupControlComponent = /** @class */ (function () {
    function LookupControlComponent(metadataRTService) {
        this.metadataRTService = metadataRTService;
        this.canEdit = true;
        this.isSingleSelect = true;
        this.isHelpInfoLoad = false;
        this.helpUrl = BCC_HELP_URL$1;
    }
    /**
     * @return {?}
     */
    LookupControlComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.param = this.param || {};
        this.bindingFields = this.bindingFields || new LookUpBindingFields();
        this.helpConfigInit();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    LookupControlComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.helpConfigInit();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    LookupControlComponent.prototype.selectedHelpHandler = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        if (!$event) {
            return;
        }
        this.param.value = '';
        this.param.valueText = '';
        if (this.isCollection()) {
            if ($event.length <= 0) {
                return;
            }
            $event.map((/**
             * @param {?} selectItem
             * @param {?} index
             * @return {?}
             */
            function (selectItem, index) {
                _this.param.value = _this.param.value + (index > 0 ? "," + selectItem[_this.bindingFields.idField] : selectItem[_this.bindingFields.idField]);
                _this.param.valueText = _this.param.valueText + (index > 0 ? "," + selectItem[_this.bindingFields.textField] : selectItem[_this.bindingFields.textField]);
            }));
        }
        else {
            this.param.value = $event[this.bindingFields.idField];
            this.param.valueText = $event[this.bindingFields.textField];
        }
    };
    /**
     * @private
     * @return {?}
     */
    LookupControlComponent.prototype.helpConfigInit = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.isHelpInfoLoad || !this.param || !this.param.parameterType) {
            return;
        }
        if (this.param.parameterType.kind === DataTypeConst.DEFAULT_COLLECTION) {
            this.isSingleSelect = false;
            /** @type {?} */
            var elementType = (/** @type {?} */ (this.getCollectionElementType(this.param.parameterType)));
            this.loadDataFromMetadata(elementType);
        }
        else if (this.param.parameterType.kind === DataTypeExtensionConst.UBCC_STRUCTURE_TYPE_REF) {
            this.isSingleSelect = true;
            /** @type {?} */
            var typeRef = (/** @type {?} */ (this.param.parameterType));
            this.loadDataFromMetadata(typeRef);
        }
        else {
            throw new Error("\u5E2E\u52A9\u4E0D\u652F\u6301\u7684\u53C2\u6570\u7C7B\u578B" + this.param.parameterType.kind);
        }
    };
    /**
     * @private
     * @param {?} refType
     * @return {?}
     */
    LookupControlComponent.prototype.loadDataFromMetadata = /**
     * @private
     * @param {?} refType
     * @return {?}
     */
    function (refType) {
        var _this = this;
        if (!refType.refId) {
            return;
        }
        this.metadataRTService.GetMetadataRT(refType.refId).subscribe((/**
         * @param {?} metadataDto
         * @return {?}
         */
        function (metadataDto) {
            /** @type {?} */
            var helpMetadata = JSON.parse(metadataDto.content);
            _this.setHelpInfo(helpMetadata);
            _this.isHelpInfoLoad = true;
        }));
    };
    /**
     * @param {?} helpMetadata
     * @return {?}
     */
    LookupControlComponent.prototype.setHelpInfo = /**
     * @param {?} helpMetadata
     * @return {?}
     */
    function (helpMetadata) {
        this.helpUrl = BCC_HELP_URL$1.replace('{helpId}', helpMetadata.id);
        this.bindingFields.idField = helpMetadata.idField;
        this.bindingFields.textField = helpMetadata.textField;
        this.bindingFields.valueField = helpMetadata.valueField;
        this.bindingFields.displayType = helpMetadata.displayType;
    };
    /**
     * @private
     * @param {?} dataType
     * @return {?}
     */
    LookupControlComponent.prototype.getCollectionElementType = /**
     * @private
     * @param {?} dataType
     * @return {?}
     */
    function (dataType) {
        /** @type {?} */
        var kind = dataType.getKind();
        switch (kind) {
            case DataTypeConst.DEFAULT_COLLECTION:
                /** @type {?} */
                var elementType = ((/** @type {?} */ (dataType))).elementType;
                return this.getCollectionElementType(elementType);
            default:
                return dataType;
        }
    };
    /**
     * @return {?}
     */
    LookupControlComponent.prototype.isCollection = /**
     * @return {?}
     */
    function () {
        if (!this.param || !this.param.parameterType) {
            return false;
        }
        if (this.param.parameterType.getKind() === DataTypeConst.DEFAULT_COLLECTION) {
            return true;
        }
        else {
            return false;
        }
    };
    /**
     * @return {?}
     */
    LookupControlComponent.prototype.isReadonly = /**
     * @return {?}
     */
    function () {
        if (!this.canEdit) {
            return true;
        }
        else {
            return !this.param || !this.param.readonly ? false : true;
        }
    };
    /**
     * @return {?}
     */
    LookupControlComponent.prototype.show = /**
     * @return {?}
     */
    function () {
        return !this.param || !this.param.description ? false : true;
    };
    LookupControlComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-lookup-control',
                    template: "<div class=\"farris-form-controls-inline farris-group-wrap col-12\">\n  <div class=\"form-group farris-form-group\">\n    <label class=\"col-form-label col-4\">\n      <span class=\"farris-label-text\" style=\"float:right\">{{param.name}}</span>\n    </label>\n    <div class=\"farris-input-wrap col-6\">\n      <farris-lookup-grid [editable]=\"false\" [readonly]=\"isReadonly()\" (selectedData)=\"selectedHelpHandler($event)\" [uri]=\"helpUrl\" [idField]=\"bindingFields.idField\"\n        [textField]=\"bindingFields.textField\" [valueField]=\"bindingFields.valueField\" [enableClear]=\"false\" [displayType]=\"bindingFields.displayType\"\n        [(ngModel)]=\"param.valueText\" name=\"{{param.code}}\" [pagination]=\"true\" [singleSelect]=\"isSingleSelect\">\n      </farris-lookup-grid>\n    </div>\n     <span *ngIf=\"show()\" farrisTooltip [placement]=\"'right-top'\" [content]=\"param.description\" class=\"f-icon f-icon-info\"></span>\n  </div>\n</div>",
                    providers: [{ provide: ServerSideToken, useClass: LookUpHttpService }, GSPMetadataRTService],
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    LookupControlComponent.ctorParameters = function () { return [
        { type: GSPMetadataRTService }
    ]; };
    LookupControlComponent.propDecorators = {
        param: [{ type: Input }],
        template: [{ type: Input }],
        canEdit: [{ type: Input }]
    };
    return LookupControlComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/param-control/number-control/number-control.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NumberControlComponent = /** @class */ (function () {
    function NumberControlComponent() {
        this.canEdit = true;
        this.precision = 0;
        this.max = NaN;
        this.min = NaN;
    }
    /**
     * @return {?}
     */
    NumberControlComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.param = this.param || {};
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NumberControlComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.param = this.param || {};
        if (this.param && this.param.constraint) {
            this.max = Number(this.param.constraint.max) || NaN;
            this.min = Number(this.param.constraint.min) || NaN;
            this.precision = Number(this.param.constraint.precision) || 0;
        }
    };
    /**
     * @return {?}
     */
    NumberControlComponent.prototype.isReadonly = /**
     * @return {?}
     */
    function () {
        if (!this.canEdit) {
            return true;
        }
        else {
            return !this.param || !this.param.readonly ? false : true;
        }
    };
    /**
     * @return {?}
     */
    NumberControlComponent.prototype.getUnit = /**
     * @return {?}
     */
    function () {
        if (!this.param || !this.param.constraint || !this.param.constraint.unit) {
            return '';
        }
        else {
            return "(\u5355\u4F4D:" + this.param.constraint.unit + ")";
        }
    };
    /**
     * @return {?}
     */
    NumberControlComponent.prototype.show = /**
     * @return {?}
     */
    function () {
        return !this.param || !this.param.description ? false : true;
    };
    NumberControlComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-number-control',
                    template: "<div class=\"farris-form-controls-inline farris-group-wrap col-12\">\n  <div class=\"form-group farris-form-group\">\n    <label class=\"col-form-label col-4\">\n      <span class=\"farris-label-text\" style=\"float:right\">{{param.name}}{{getUnit()}}</span>\n    </label>\n    <div class=\"farris-input-wrap col-6\">\n      <farris-number-spinner [editable]=\"true\" [max]=\"max\" [min]=\"min\" [precision]=\"precision\" [readonly]=\"isReadonly()\" [(ngModel)]=\"param.value\" name=\"{{param.code}}\"></farris-number-spinner>\n    </div>\n    <span *ngIf=\"show()\" farrisTooltip [placement]=\"'right-top'\" [content]=\"param.description\" class=\"f-icon f-icon-info\"></span>\n  </div>\n</div>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    NumberControlComponent.ctorParameters = function () { return []; };
    NumberControlComponent.propDecorators = {
        param: [{ type: Input }],
        canEdit: [{ type: Input }]
    };
    return NumberControlComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ubcc-param-data-ui.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var UbccParamDataUiService = /** @class */ (function () {
    function UbccParamDataUiService(resolver, injector, util, modalService) {
        this.resolver = resolver;
        this.injector = injector;
        this.util = util;
        this.modalService = modalService;
    }
    /**
     * @param {?} templateId
     * @param {?} paramData
     * @return {?}
     */
    UbccParamDataUiService.prototype.show = /**
     * @param {?} templateId
     * @param {?} paramData
     * @return {?}
     */
    function (templateId, paramData) {
        return this.create(templateId, paramData);
    };
    /**
     * @private
     * @param {?} templateId
     * @param {?} data
     * @return {?}
     */
    UbccParamDataUiService.prototype.create = /**
     * @private
     * @param {?} templateId
     * @param {?} data
     * @return {?}
     */
    function (templateId, data) {
        /** @type {?} */
        var fac = this.resolver.resolveComponentFactory(UbccParamDataUiDialogComponent);
        /** @type {?} */
        var cmpRef = fac.create(this.injector);
        /** @type {?} */
        var modalConfig = this.util.getModalConfig(cmpRef.instance.btnRef);
        /** @type {?} */
        var dialog = this.modalService.show(cmpRef, modalConfig);
        cmpRef.instance.dialog = dialog;
        cmpRef.instance.templateId = templateId;
        cmpRef.instance.data = data;
        return { confirmEvent: cmpRef.instance.confirmEmitter, closeEvent: cmpRef.instance.closeEmitter, close: cmpRef.instance.close };
    };
    UbccParamDataUiService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    UbccParamDataUiService.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: UbccParamDataUtils },
        { type: BsModalService }
    ]; };
    return UbccParamDataUiService;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ubcc-param-dimension-ui/ubcc-param-dimension-ui.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var UbccParamDimensionUiComponent = /** @class */ (function () {
    function UbccParamDimensionUiComponent() {
        this.dimensionItemDatas = [];
    }
    /**
     * @return {?}
     */
    UbccParamDimensionUiComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} dimensionItem
     * @return {?}
     */
    UbccParamDimensionUiComponent.prototype.getControlType = /**
     * @param {?} dimensionItem
     * @return {?}
     */
    function (dimensionItem) {
        if (!dimensionItem || !dimensionItem.dataType || !dimensionItem.dataType.getKind()) {
            return;
        }
        /** @type {?} */
        var kind = dimensionItem.dataType.getKind();
        switch (kind) {
            case DataTypeConst.DEFAULT_PRIMITIVE:
                return 'input';
            case DataTypeConst.DEFAULT_ENUMERATION:
                return 'dropdownlist';
            case DataTypeExtensionConst.HELP_TYPE:
                return 'lookup';
            default:
                return 'input';
        }
    };
    UbccParamDimensionUiComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-ubcc-param-dimension-ui',
                    template: "<farris-section [mainTitle]=\"'\u7EF4\u5EA6\u4FE1\u606F'\" [enableMaximize]=\"false\">\n  <div *ngFor=\"let item of dimensionItemDatas;let i=index;\" style=\"margin-top: 10px;\">\n    <div class=\"col-12\" [ngSwitch]=\"getControlType(dimensionItemDatas[i])\">\n      <lib-dimension-dropdownlist-control *ngSwitchCase=\"'dropdownlist'\" [(dimensionItem)]=\"dimensionItemDatas[i]\"></lib-dimension-dropdownlist-control>\n      <lib-dimension-lookup-control *ngSwitchCase=\"'lookup'\" [(dimensionItem)]=\"dimensionItemDatas[i]\"></lib-dimension-lookup-control>\n      <lib-dimension-input-control *ngSwitchDefault [(dimensionItem)]=\"dimensionItemDatas[i]\"></lib-dimension-input-control>\n    </div>\n  </div>\n</farris-section>",
                    encapsulation: ViewEncapsulation.None,
                    styles: [":host{display:flex;flex-direction:column;flex:1}.f-section-header,lib-ubcc-param-dimension-ui .f-section-extend{margin:0 0 .25rem}"]
                }] }
    ];
    /** @nocollapse */
    UbccParamDimensionUiComponent.ctorParameters = function () { return []; };
    UbccParamDimensionUiComponent.propDecorators = {
        dimensionItemDatas: [{ type: Input }]
    };
    return UbccParamDimensionUiComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ubcc-param-data-ui-root.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var UbccParamDataUiRootModule = /** @class */ (function () {
    function UbccParamDataUiRootModule() {
    }
    UbccParamDataUiRootModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        UbccParamDataUiComponent,
                        InputControlComponent,
                        CheckboxControlComponent,
                        DateControlComponent,
                        DropdownlistControlComponent,
                        LookupControlComponent,
                        NumberControlComponent,
                        UbccParamDataUiDialogComponent,
                        UbccParamDataUiRootComponent,
                        DimensionLookupControlComponent,
                        DimensionDropdownlistControlComponent,
                        DimensionInputControlComponent,
                        UbccParamDimensionUiComponent,
                        UbccParamDimensionUiRootComponent
                    ],
                    imports: [
                        CommonModule,
                        FormsModule,
                        ReactiveFormsModule,
                        ButtonsModule,
                        InputGroupModule,
                        HttpClientModule,
                        LoadingModule.forRoot({
                            message: '请稍候...'
                        }),
                        NotifyModule.forRoot(),
                        ModalModule.forRoot(),
                        MessagerModule.forRoot(),
                        FarrisDialogModule,
                        LookupModule,
                        FarrisButtonModule,
                        FarrisDatePickerModule,
                        ComboListModule,
                        FarrisSectionModule,
                        NumberSpinnerModule,
                        FarrisTooltipModule,
                        FarrisPanelModule,
                        GSPMetadataRTServiceModule.forRoot(""),
                    ],
                    providers: [
                        FrameworkService,
                        HttpService,
                        SessionService,
                        CacheService,
                        FrmEventBus,
                        FuncsService,
                        LoadingService,
                        NotifyService,
                        UbccParamDataManangerService,
                        UbccParamDataUiService,
                        UbccParamDataUtils,
                        BsModalService
                    ],
                    entryComponents: [
                        UbccParamDataUiDialogComponent,
                        UbccParamDataUiComponent,
                        UbccParamDimensionUiComponent,
                        UbccParamDimensionUiRootComponent,
                        UbccParamDataUiRootComponent
                    ],
                    exports: [
                        UbccParamDataUiRootComponent,
                        UbccParamDataUiComponent,
                        UbccParamDataUiDialogComponent,
                        UbccParamDimensionUiComponent,
                        UbccParamDimensionUiRootComponent
                    ]
                },] }
    ];
    return UbccParamDataUiRootModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/common/dialog-result.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DialogResult = /** @class */ (function () {
    function DialogResult() {
    }
    return DialogResult;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: gsp-cmp-ubcc-param-data-ui.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { UbccParamDataUiComponent, UbccParamDataUiRootModule, UbccParamDataManangerService, UbccParamDataUiService, UbccParamDataUiRootComponent, UbccParamDimensionUiRootComponent, DialogResult, DimensionDropdownlistControlComponent as ɵl, DimensionInputControlComponent as ɵm, DimensionLookupControlComponent as ɵk, CheckboxControlComponent as ɵb, DateControlComponent as ɵd, DropdownlistControlComponent as ɵe, InputControlComponent as ɵa, LookupControlComponent as ɵf, NumberControlComponent as ɵh, UbccEventBusService as ɵj, LookUpHttpService as ɵg, UbccParamDataUiDialogComponent as ɵi, UbccParamDimensionUiComponent as ɵn, UbccParamDataUtils as ɵc };

//# sourceMappingURL=gsp-cmp-ubcc-param-data-ui.js.map