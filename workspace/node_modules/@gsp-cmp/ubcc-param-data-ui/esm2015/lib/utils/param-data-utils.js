/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/param-data-utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { MessagerService } from '@farris/ui-messager';
import { NotifyService } from '@farris/ui-notify';
import { DataTypeConst } from '@ecp-caf/common-structure';
import { DataTypeExtensionConst, StructureTypeRefEnum } from '@gsp-cmp/ubcc-param-vo';
import * as i0 from "@angular/core";
import * as i1 from "@farris/ui-messager";
import * as i2 from "@farris/ui-notify";
export class UbccParamDataUtils {
    /**
     * @param {?} messagerService
     * @param {?} notify
     */
    constructor(messagerService, notify) {
        this.messagerService = messagerService;
        this.notify = notify;
    }
    /**
     * @param {?} dataType
     * @return {?}
     */
    isHelpType(dataType) {
        if (!dataType) {
            return false;
        }
        if (this.isCollection(dataType)) {
            /** @type {?} */
            let elementType = this.getCollectionElementType(dataType);
            return this.isHelpTypeRef(elementType);
        }
        else {
            return this.isHelpTypeRef(dataType);
        }
    }
    /**
     * @param {?} dataType
     * @return {?}
     */
    isHelpTypeRef(dataType) {
        /** @type {?} */
        let kind = dataType.getKind();
        if (!kind) {
            return false;
        }
        if (kind === DataTypeExtensionConst.UBCC_STRUCTURE_TYPE_REF) {
            /** @type {?} */
            let refType = (/** @type {?} */ (dataType));
            if (refType.type === StructureTypeRefEnum.HELP) {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            return false;
        }
    }
    // private getHelpData(data:any,paramDataItem:any){
    //     if(!data.dataValue){
    //         return;
    //     }
    //     if (data.dataValueText) {
    //         paramDataItem.valueText = data.dataValueText;
    //     }
    //     else {
    //         let dataId = data.dataValue.split(',');
    //         let helpId=this.getHelpId(paramDataItem.parameterType);
    //         this.http.getHelpData(helpId, dataId).subscribe(
    //             (helpDataItems: Array<HelpDataItem>) => {
    //                 if (!helpDataItems) {
    //                     return;
    //                 }
    //                 let texts=[];
    //                 helpDataItems.map(helpDataItem => texts.push(helpDataItem.text));
    //                 paramDataItem.valueText=texts.join(',');
    //             }
    //         );
    //     }
    // }
    // private getHelpId(dataType:IDataType){
    //     if(this.isCollection(dataType)){
    //         let refType=this.getCollectionElementType(dataType) as StructureTypeRef;
    //         return refType&&refType.refId?refType.refId:null;
    //     }
    //     else{
    //         let refType=dataType as StructureTypeRef;
    //         return refType&&refType.refId?refType.refId:null;
    //     }
    // }
    /**
     * @param {?} dataType
     * @return {?}
     */
    getCollectionElementType(dataType) {
        /** @type {?} */
        let kind = dataType.getKind();
        switch (kind) {
            case DataTypeConst.DEFAULT_COLLECTION:
                /** @type {?} */
                let elementType = ((/** @type {?} */ (dataType))).elementType;
                return this.getCollectionElementType(elementType);
            default:
                return dataType;
        }
    }
    /**
     * @param {?} dataType
     * @return {?}
     */
    isCollection(dataType) {
        if (!dataType) {
            return false;
        }
        if (dataType.getKind() === DataTypeConst.DEFAULT_COLLECTION) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @param {?} btnRef
     * @return {?}
     */
    getModalConfig(btnRef) {
        return {
            title: '参数配置',
            width: 650,
            height: 560,
            resizable: true,
            showButtons: true,
            showMaxButton: false,
            enableScroll: false,
            buttons: btnRef
        };
    }
    /**
     * @param {?} message
     * @param {?} infoType
     * @param {?} title
     * @param {?} timeout
     * @return {?}
     */
    showInfo(message, infoType, title, timeout) {
        this.notify.config.position = 'top-center';
        if (infoType == 'success') {
            this.notify.success((/** @type {?} */ ({ title: title, msg: message, timeout: timeout })));
        }
        else if (infoType == 'info') {
            this.notify.info((/** @type {?} */ ({ title: title, msg: message, timeout: timeout })));
        }
        else if (infoType == 'warning') {
            this.notify.warning((/** @type {?} */ ({ title: title, msg: message, timeout: timeout })));
        }
        else if (infoType == 'error') {
            this.notify.error((/** @type {?} */ ({ title: title, msg: message, timeout: timeout })));
        }
    }
    /**
     * @return {?}
     */
    newGuid() {
        return (this.s4() + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + this.s4() + this.s4());
    }
    /**
     * @return {?}
     */
    s4() {
        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    }
}
UbccParamDataUtils.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
UbccParamDataUtils.ctorParameters = () => [
    { type: MessagerService },
    { type: NotifyService }
];
/** @nocollapse */ UbccParamDataUtils.ngInjectableDef = i0.defineInjectable({ factory: function UbccParamDataUtils_Factory() { return new UbccParamDataUtils(i0.inject(i1.MessagerService), i0.inject(i2.NotifyService)); }, token: UbccParamDataUtils, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    UbccParamDataUtils.prototype.messagerService;
    /**
     * @type {?}
     * @private
     */
    UbccParamDataUtils.prototype.notify;
}
//# sourceMappingURL=data:application/json;base64,