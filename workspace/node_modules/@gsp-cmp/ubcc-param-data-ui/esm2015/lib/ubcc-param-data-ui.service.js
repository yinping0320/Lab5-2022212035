/**
 * @fileoverview added by tsickle
 * Generated from: lib/ubcc-param-data-ui.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, ComponentFactoryResolver, Injector } from '@angular/core';
import { UbccParamDataUtils } from './utils/param-data-utils';
import { BsModalService } from '@farris/ui-modal';
import { UbccParamDataUiDialogComponent } from './ubcc-param-data-ui-dialog/ubcc-param-data-ui-dialog.component';
export class UbccParamDataUiService {
    /**
     * @param {?} resolver
     * @param {?} injector
     * @param {?} util
     * @param {?} modalService
     */
    constructor(resolver, injector, util, modalService) {
        this.resolver = resolver;
        this.injector = injector;
        this.util = util;
        this.modalService = modalService;
    }
    /**
     * @param {?} templateId
     * @param {?} paramData
     * @return {?}
     */
    show(templateId, paramData) {
        return this.create(templateId, paramData);
    }
    /**
     * @private
     * @param {?} templateId
     * @param {?} data
     * @return {?}
     */
    create(templateId, data) {
        /** @type {?} */
        let fac = this.resolver.resolveComponentFactory(UbccParamDataUiDialogComponent);
        /** @type {?} */
        let cmpRef = fac.create(this.injector);
        /** @type {?} */
        let modalConfig = this.util.getModalConfig(cmpRef.instance.btnRef);
        /** @type {?} */
        let dialog = this.modalService.show(cmpRef, modalConfig);
        cmpRef.instance.dialog = dialog;
        cmpRef.instance.templateId = templateId;
        cmpRef.instance.data = data;
        return { confirmEvent: cmpRef.instance.confirmEmitter, closeEvent: cmpRef.instance.closeEmitter, close: cmpRef.instance.close };
    }
}
UbccParamDataUiService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
UbccParamDataUiService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: UbccParamDataUtils },
    { type: BsModalService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    UbccParamDataUiService.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    UbccParamDataUiService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    UbccParamDataUiService.prototype.util;
    /**
     * @type {?}
     * @private
     */
    UbccParamDataUiService.prototype.modalService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWJjYy1wYXJhbS1kYXRhLXVpLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLWNtcC91YmNjLXBhcmFtLWRhdGEtdWkvIiwic291cmNlcyI6WyJsaWIvdWJjYy1wYXJhbS1kYXRhLXVpLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLHdCQUF3QixFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbEQsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0saUVBQWlFLENBQUM7QUFJakgsTUFBTSxPQUFPLHNCQUFzQjs7Ozs7OztJQUUvQixZQUNZLFFBQWtDLEVBQ2xDLFFBQWtCLEVBQ2xCLElBQXdCLEVBQ3hCLFlBQTRCO1FBSDVCLGFBQVEsR0FBUixRQUFRLENBQTBCO1FBQ2xDLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbEIsU0FBSSxHQUFKLElBQUksQ0FBb0I7UUFDeEIsaUJBQVksR0FBWixZQUFZLENBQWdCO0lBQ3BDLENBQUM7Ozs7OztJQUVMLElBQUksQ0FBQyxVQUFpQixFQUFDLFNBQWE7UUFDaEMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBQyxTQUFTLENBQUMsQ0FBQztJQUM3QyxDQUFDOzs7Ozs7O0lBRU8sTUFBTSxDQUFDLFVBQWlCLEVBQUMsSUFBUTs7WUFDakMsR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQUMsOEJBQThCLENBQUM7O1lBQzNFLE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7O1lBQ2xDLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQzs7WUFDOUQsTUFBTSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUM7UUFDeEQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ2hDLE1BQU0sQ0FBQyxRQUFRLENBQUMsVUFBVSxHQUFDLFVBQVUsQ0FBQztRQUN0QyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksR0FBQyxJQUFJLENBQUM7UUFDMUIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRSxVQUFVLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFDLENBQUM7SUFDbEksQ0FBQzs7O1lBdkJKLFVBQVU7Ozs7WUFOVSx3QkFBd0I7WUFBRSxRQUFRO1lBQzlDLGtCQUFrQjtZQUNsQixjQUFjOzs7Ozs7O0lBUWYsMENBQTBDOzs7OztJQUMxQywwQ0FBMEI7Ozs7O0lBQzFCLHNDQUFnQzs7Ozs7SUFDaEMsOENBQW9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVWJjY1BhcmFtRGF0YVV0aWxzIH0gZnJvbSAnLi91dGlscy9wYXJhbS1kYXRhLXV0aWxzJztcbmltcG9ydCB7IEJzTW9kYWxTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1tb2RhbCc7XG5pbXBvcnQgeyBVYmNjUGFyYW1EYXRhVWlEaWFsb2dDb21wb25lbnQgfSBmcm9tICcuL3ViY2MtcGFyYW0tZGF0YS11aS1kaWFsb2cvdWJjYy1wYXJhbS1kYXRhLXVpLWRpYWxvZy5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGlhbG9nUmVzdWx0IH0gZnJvbSAnLi9jb21tb24vZGlhbG9nLXJlc3VsdCc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBVYmNjUGFyYW1EYXRhVWlTZXJ2aWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gICAgICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxuICAgICAgICBwcml2YXRlIHV0aWw6IFViY2NQYXJhbURhdGFVdGlscyxcbiAgICAgICAgcHJpdmF0ZSBtb2RhbFNlcnZpY2U6IEJzTW9kYWxTZXJ2aWNlXG4gICAgKSB7IH1cblxuICAgIHNob3codGVtcGxhdGVJZDpzdHJpbmcscGFyYW1EYXRhOmFueSk6RGlhbG9nUmVzdWx0e1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGUodGVtcGxhdGVJZCxwYXJhbURhdGEpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXRlKHRlbXBsYXRlSWQ6c3RyaW5nLGRhdGE6YW55KTogRGlhbG9nUmVzdWx0IHtcbiAgICAgICAgbGV0IGZhYyA9IHRoaXMucmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoVWJjY1BhcmFtRGF0YVVpRGlhbG9nQ29tcG9uZW50KTtcbiAgICAgICAgbGV0IGNtcFJlZiA9IGZhYy5jcmVhdGUodGhpcy5pbmplY3Rvcik7XG4gICAgICAgIGxldCBtb2RhbENvbmZpZyA9IHRoaXMudXRpbC5nZXRNb2RhbENvbmZpZyhjbXBSZWYuaW5zdGFuY2UuYnRuUmVmKTtcbiAgICAgICAgbGV0IGRpYWxvZyA9IHRoaXMubW9kYWxTZXJ2aWNlLnNob3coY21wUmVmLCBtb2RhbENvbmZpZyk7XG4gICAgICAgIGNtcFJlZi5pbnN0YW5jZS5kaWFsb2cgPSBkaWFsb2c7XG4gICAgICAgIGNtcFJlZi5pbnN0YW5jZS50ZW1wbGF0ZUlkPXRlbXBsYXRlSWQ7XG4gICAgICAgIGNtcFJlZi5pbnN0YW5jZS5kYXRhPWRhdGE7XG4gICAgICAgIHJldHVybiB7IGNvbmZpcm1FdmVudDogY21wUmVmLmluc3RhbmNlLmNvbmZpcm1FbWl0dGVyLCBjbG9zZUV2ZW50OiBjbXBSZWYuaW5zdGFuY2UuY2xvc2VFbWl0dGVyLGNsb3NlOiBjbXBSZWYuaW5zdGFuY2UuY2xvc2V9O1xuICAgIH1cblxufVxuIl19