/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/param-control/dropdownlist-control/dropdownlist-control.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { DataTypeConst } from '@ecp-caf/common-structure';
import { UbccParamTemplate, DataTypeExtensionConst } from '@gsp-cmp/ubcc-param-vo';
export class DropdownlistControlComponent {
    constructor() {
        this.canEdit = true;
        this.enumerationItems = [];
        this.isMultiSelect = false;
        this.isEnumInfoLoad = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.param = this.param || {};
        this.template = this.template || new UbccParamTemplate();
        if (!this.isEnumInfoLoad) {
            this.enumConfigInit();
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!this.isEnumInfoLoad) {
            this.enumConfigInit();
        }
    }
    /**
     * @return {?}
     */
    enumConfigInit() {
        this.isMultiSelect = this.isCollection();
        this.getEnumItems();
    }
    /**
     * @return {?}
     */
    getEnumItems() {
        if (!this.param || !this.param.parameterType || !this.template.structuredTypes) {
            return;
        }
        if (this.param.parameterType.kind === DataTypeConst.DEFAULT_COLLECTION) {
            /** @type {?} */
            let elementType = this.getCollectionElementType(this.param.parameterType);
            this.get(elementType);
        }
        else if (this.param.parameterType.kind === DataTypeExtensionConst.UBCC_STRUCTURE_TYPE_REF) {
            /** @type {?} */
            let typeRef = (/** @type {?} */ (this.param.parameterType));
            this.get(typeRef);
        }
        else {
            throw new Error(`枚举不支持的参数类型${this.param.parameterType.kind}`);
        }
    }
    /**
     * @param {?} refType
     * @return {?}
     */
    get(refType) {
        /** @type {?} */
        let enumType = (/** @type {?} */ (this.template.structuredTypes.find((/**
         * @param {?} x
         * @return {?}
         */
        x => x.id === refType.refId))));
        if (!enumType || !enumType.enumerationItems) {
            return;
        }
        enumType.enumerationItems.map((/**
         * @param {?} x
         * @return {?}
         */
        x => this.enumerationItems.push(x)));
        this.isEnumInfoLoad = true;
    }
    /**
     * @param {?} dataType
     * @return {?}
     */
    getCollectionElementType(dataType) {
        /** @type {?} */
        let kind = dataType.getKind();
        switch (kind) {
            case DataTypeConst.DEFAULT_COLLECTION:
                /** @type {?} */
                let elementType = ((/** @type {?} */ (dataType))).elementType;
                return this.getCollectionElementType(elementType);
            default:
                return dataType;
        }
    }
    /**
     * @return {?}
     */
    isCollection() {
        if (!this.param || !this.param.parameterType) {
            return false;
        }
        if (this.param.parameterType.getKind() === DataTypeConst.DEFAULT_COLLECTION) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    valueChangeHandler($event) {
        this.param.value = $event.value;
    }
    /**
     * @return {?}
     */
    isReadonly() {
        if (!this.canEdit) {
            return true;
        }
        else {
            return !this.param || !this.param.readonly ? false : true;
        }
    }
    /**
     * @return {?}
     */
    show() {
        return !this.param || !this.param.description ? false : true;
    }
}
DropdownlistControlComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-dropdownlist-control',
                template: "<div class=\"farris-form-controls-inline farris-group-wrap col-12\">\n  <div class=\"form-group farris-form-group\">\n    <label class=\"col-form-label col-4\">\n      <span class=\"farris-label-text\" style=\"float:right\">{{param.name}}</span>\n    </label>\n    <div class=\"farris-input-wrap col-6\">\n      <farris-combo-list [idField]=\"'code'\" [textField]=\"'description'\" [data]=\"enumerationItems\" [multiSelect]=\"isMultiSelect\"\n        (valueChange)=\"valueChangeHandler($event)\" [readonly]=\"isReadonly()\" [(ngModel)]=\"param.value\" name=\"{{param.code}}\">\n      </farris-combo-list>\n    </div>\n    <span *ngIf=\"show()\" farrisTooltip [placement]=\"'right-top'\" [content]=\"param.description\" class=\"f-icon f-icon-info\"></span>\n  </div>\n</div>",
                styles: [""]
            }] }
];
/** @nocollapse */
DropdownlistControlComponent.ctorParameters = () => [];
DropdownlistControlComponent.propDecorators = {
    param: [{ type: Input }],
    template: [{ type: Input }],
    canEdit: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    DropdownlistControlComponent.prototype.param;
    /** @type {?} */
    DropdownlistControlComponent.prototype.template;
    /** @type {?} */
    DropdownlistControlComponent.prototype.canEdit;
    /** @type {?} */
    DropdownlistControlComponent.prototype.enumerationItems;
    /** @type {?} */
    DropdownlistControlComponent.prototype.isMultiSelect;
    /** @type {?} */
    DropdownlistControlComponent.prototype.isEnumInfoLoad;
}
//# sourceMappingURL=data:application/json;base64,