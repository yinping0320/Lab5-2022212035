/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/param-control/lookup-control/lookup-control.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { UbccParamTemplate, DataTypeExtensionConst } from '@gsp-cmp/ubcc-param-vo';
import { DataTypeConst } from '@ecp-caf/common-structure';
import { GSPMetadataRTService } from '@gsp-lcm/metadatart-selector';
import { ServerSideToken } from '@farris/ui-lookup';
import { LookUpHttpService } from '../../../service/lookup-http-service';
import { LookUpBindingFields } from '../../../common/look-up-binding-fields';
/** @type {?} */
const BCC_HELP_URL = `/api/runtime/bcc/v1.0/param/help/{helpId}`;
export class LookupControlComponent {
    /**
     * @param {?} metadataRTService
     */
    constructor(metadataRTService) {
        this.metadataRTService = metadataRTService;
        this.canEdit = true;
        this.isSingleSelect = true;
        this.isHelpInfoLoad = false;
        this.helpUrl = BCC_HELP_URL;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.param = this.param || {};
        this.bindingFields = this.bindingFields || new LookUpBindingFields();
        this.helpConfigInit();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.helpConfigInit();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    selectedHelpHandler($event) {
        if (!$event) {
            return;
        }
        this.param.value = '';
        this.param.valueText = '';
        if (this.isCollection()) {
            if ($event.length <= 0) {
                return;
            }
            $event.map((/**
             * @param {?} selectItem
             * @param {?} index
             * @return {?}
             */
            (selectItem, index) => {
                this.param.value = this.param.value + (index > 0 ? `,${selectItem[this.bindingFields.idField]}` : selectItem[this.bindingFields.idField]);
                this.param.valueText = this.param.valueText + (index > 0 ? `,${selectItem[this.bindingFields.textField]}` : selectItem[this.bindingFields.textField]);
            }));
        }
        else {
            this.param.value = $event[this.bindingFields.idField];
            this.param.valueText = $event[this.bindingFields.textField];
        }
    }
    /**
     * @private
     * @return {?}
     */
    helpConfigInit() {
        if (this.isHelpInfoLoad || !this.param || !this.param.parameterType) {
            return;
        }
        if (this.param.parameterType.kind === DataTypeConst.DEFAULT_COLLECTION) {
            this.isSingleSelect = false;
            /** @type {?} */
            let elementType = (/** @type {?} */ (this.getCollectionElementType(this.param.parameterType)));
            this.loadDataFromMetadata(elementType);
        }
        else if (this.param.parameterType.kind === DataTypeExtensionConst.UBCC_STRUCTURE_TYPE_REF) {
            this.isSingleSelect = true;
            /** @type {?} */
            let typeRef = (/** @type {?} */ (this.param.parameterType));
            this.loadDataFromMetadata(typeRef);
        }
        else {
            throw new Error(`帮助不支持的参数类型${this.param.parameterType.kind}`);
        }
    }
    /**
     * @private
     * @param {?} refType
     * @return {?}
     */
    loadDataFromMetadata(refType) {
        if (!refType.refId) {
            return;
        }
        this.metadataRTService.GetMetadataRT(refType.refId).subscribe((/**
         * @param {?} metadataDto
         * @return {?}
         */
        (metadataDto) => {
            /** @type {?} */
            let helpMetadata = JSON.parse(metadataDto.content);
            this.setHelpInfo(helpMetadata);
            this.isHelpInfoLoad = true;
        }));
    }
    /**
     * @param {?} helpMetadata
     * @return {?}
     */
    setHelpInfo(helpMetadata) {
        this.helpUrl = BCC_HELP_URL.replace('{helpId}', helpMetadata.id);
        this.bindingFields.idField = helpMetadata.idField;
        this.bindingFields.textField = helpMetadata.textField;
        this.bindingFields.valueField = helpMetadata.valueField;
        this.bindingFields.displayType = helpMetadata.displayType;
    }
    /**
     * @private
     * @param {?} dataType
     * @return {?}
     */
    getCollectionElementType(dataType) {
        /** @type {?} */
        let kind = dataType.getKind();
        switch (kind) {
            case DataTypeConst.DEFAULT_COLLECTION:
                /** @type {?} */
                let elementType = ((/** @type {?} */ (dataType))).elementType;
                return this.getCollectionElementType(elementType);
            default:
                return dataType;
        }
    }
    /**
     * @return {?}
     */
    isCollection() {
        if (!this.param || !this.param.parameterType) {
            return false;
        }
        if (this.param.parameterType.getKind() === DataTypeConst.DEFAULT_COLLECTION) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @return {?}
     */
    isReadonly() {
        if (!this.canEdit) {
            return true;
        }
        else {
            return !this.param || !this.param.readonly ? false : true;
        }
    }
    /**
     * @return {?}
     */
    show() {
        return !this.param || !this.param.description ? false : true;
    }
}
LookupControlComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-lookup-control',
                template: "<div class=\"farris-form-controls-inline farris-group-wrap col-12\">\n  <div class=\"form-group farris-form-group\">\n    <label class=\"col-form-label col-4\">\n      <span class=\"farris-label-text\" style=\"float:right\">{{param.name}}</span>\n    </label>\n    <div class=\"farris-input-wrap col-6\">\n      <farris-lookup-grid [editable]=\"false\" [readonly]=\"isReadonly()\" (selectedData)=\"selectedHelpHandler($event)\" [uri]=\"helpUrl\" [idField]=\"bindingFields.idField\"\n        [textField]=\"bindingFields.textField\" [valueField]=\"bindingFields.valueField\" [enableClear]=\"false\" [displayType]=\"bindingFields.displayType\"\n        [(ngModel)]=\"param.valueText\" name=\"{{param.code}}\" [pagination]=\"true\" [singleSelect]=\"isSingleSelect\">\n      </farris-lookup-grid>\n    </div>\n     <span *ngIf=\"show()\" farrisTooltip [placement]=\"'right-top'\" [content]=\"param.description\" class=\"f-icon f-icon-info\"></span>\n  </div>\n</div>",
                providers: [{ provide: ServerSideToken, useClass: LookUpHttpService }, GSPMetadataRTService],
                styles: [""]
            }] }
];
/** @nocollapse */
LookupControlComponent.ctorParameters = () => [
    { type: GSPMetadataRTService }
];
LookupControlComponent.propDecorators = {
    param: [{ type: Input }],
    template: [{ type: Input }],
    canEdit: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    LookupControlComponent.prototype.param;
    /** @type {?} */
    LookupControlComponent.prototype.template;
    /** @type {?} */
    LookupControlComponent.prototype.canEdit;
    /** @type {?} */
    LookupControlComponent.prototype.isSingleSelect;
    /** @type {?} */
    LookupControlComponent.prototype.isHelpInfoLoad;
    /** @type {?} */
    LookupControlComponent.prototype.bindingFields;
    /** @type {?} */
    LookupControlComponent.prototype.helpUrl;
    /**
     * @type {?}
     * @private
     */
    LookupControlComponent.prototype.metadataRTService;
}
//# sourceMappingURL=data:application/json;base64,