/**
 * @fileoverview added by tsickle
 * Generated from: lib/ubcc-param-data-ui-root.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, ViewContainerRef, ComponentFactoryResolver } from '@angular/core';
import { UbccParamTemplate, UbccParamTemplateAssignment, UbccParamTemplateSerializer, DataItem, DataTypeExtensionConst, StructureTypeRefEnum, UbccParamTemplateAssignmentSerializer } from '@gsp-cmp/ubcc-param-vo';
import { UbccParamDataManangerService } from './service/http-service';
import { UbccParamDataUiComponent } from './ubcc-param-data-ui/ubcc-param-data-ui.component';
import { UbccParamDimensionUiRootComponent } from './ubcc-param-dimension-ui-root/ubcc-param-dimension-ui-root.component';
import { DataTypeConst, PrimitiveTypeKind } from '@ecp-caf/common-structure';
import { UbccEventBusService } from './service/event-bus-service';
import { UbccParamDataUtils } from './utils/param-data-utils';
export class UbccParamDataUiRootComponent {
    /**
     * @param {?} utils
     * @param {?} ebsService
     * @param {?} http
     * @param {?} resolver
     */
    constructor(utils, ebsService, http, resolver) {
        this.utils = utils;
        this.ebsService = ebsService;
        this.http = http;
        this.resolver = resolver;
        this._canEdit = true;
        this.dimensionItemDatas = [];
        this.paramDataItems = [];
        this.paramDataItemsClone = [];
        this.templateSerializer = new UbccParamTemplateSerializer();
        this.assignmentSerializer = new UbccParamTemplateAssignmentSerializer();
        this.ebsService.ebs.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        event => {
            this.loadDimensionDataFromRemote();
        }));
    }
    /**
     * @param {?} assignment
     * @return {?}
     */
    set assignment(assignment) {
        this._assignment = assignment;
        this.loadData();
    }
    /**
     * @param {?} canEdit
     * @return {?}
     */
    set canEdit(canEdit) {
        this._canEdit = canEdit;
        if (this.currentInstance) {
            this.currentInstance.canEdit = this._canEdit;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._assignment = this._assignment || new UbccParamTemplateAssignment();
        this.template = this.template || new UbccParamTemplate();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.paramDataPanel.clear();
    }
    /**
     * @private
     * @return {?}
     */
    loadData() {
        //参数,维度数据源初始化
        this.dimensionItemDatas = [];
        this.paramDataItems = [];
        this.paramDataItemsClone = [];
        if (!this._assignment || !this._assignment.templateId) {
            return;
        }
        this.http.getParamTemplate(this._assignment.templateId).subscribe((/**
         * @param {?} vo
         * @return {?}
         */
        (vo) => {
            if (!vo || !vo.content) {
                return;
            }
            /** @type {?} */
            let serializer = new UbccParamTemplateSerializer();
            this.template = serializer.deserializer(JSON.parse(vo.content));
            this.load();
        }), (/**
         * @param {?} err
         * @return {?}
         */
        err => {
            throw err;
        }));
    }
    /**
     * @private
     * @return {?}
     */
    load() {
        //参数结构初始化，参数值为空
        this.paramDataItemsInit();
        //根据维度创建对应的UI组件
        if (this._assignment.useDimension) {
            //维度结构初始化，维度数据为空
            this.dimensionDataItemsInit();
            //创建维度UI组件，此处不取数，只渲染界面，在选择维度数据后再加载数据
            this.createDimensionRootUiComponent();
        }
        else {
            this.http.getParamData(this._assignment.templateId, this._assignment.bizTypeId).subscribe((/**
             * @param {?} dataItems
             * @return {?}
             */
            (dataItems) => {
                this.getParamValues(dataItems);
            }), (/**
             * @param {?} err
             * @return {?}
             */
            err => {
                throw err;
            }));
            //创建参数UI组件
            this.createParamDataUiComponent();
        }
    }
    /**
     * @private
     * @param {?} dataItems
     * @return {?}
     */
    getParamValues(dataItems) {
        if (!dataItems || dataItems.length <= 0) {
            return;
        }
        this.paramDataItems.map((/**
         * @param {?} paramDataItem
         * @return {?}
         */
        (paramDataItem) => {
            /** @type {?} */
            let data = dataItems.find((/**
             * @param {?} item
             * @return {?}
             */
            item => item.dataCode === paramDataItem.code));
            if (data) {
                paramDataItem.value = data.dataValue;
                if (!this.utils.isHelpType(paramDataItem.parameterType)) {
                    return;
                }
                paramDataItem.valueText = data.dataValueText || '';
                // 从前端获取帮助数据
                // this.getHelpData(data,paramDataItem);
            }
        }));
        this.paramValuesClone(this.paramDataItemsClone, this.paramDataItems);
    }
    /**
     * @private
     * @param {?} target
     * @param {?} source
     * @return {?}
     */
    paramValuesClone(target, source) {
        if (source.length == 0 || target.length == 0 || target.length !== source.length) {
            return;
        }
        target.map((/**
         * @param {?} paramDataItemClone
         * @return {?}
         */
        paramDataItemClone => {
            /** @type {?} */
            let index = source.findIndex((/**
             * @param {?} x
             * @return {?}
             */
            x => x.code === paramDataItemClone.code));
            if (index !== (-1)) {
                paramDataItemClone.id = source[index].id;
                paramDataItemClone.value = source[index].value;
                paramDataItemClone.valueText = source[index].valueText;
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    loadDimensionDataFromRemote() {
        this.paramDataItemsInit();
        this.currentInstance.paramDataItems = this.paramDataItems;
        /** @type {?} */
        let dimensionItemValues = [];
        this.dimensionItemDatas.map((/**
         * @param {?} x
         * @return {?}
         */
        (x) => dimensionItemValues.push(x.value)));
        /** @type {?} */
        let count = dimensionItemValues.length;
        if (count <= 0) {
            return;
        }
        if (count === 1) {
            if (!dimensionItemValues[0]) {
                return;
            }
        }
        if (count === 2) {
            if (!dimensionItemValues[0] || !dimensionItemValues[1]) {
                return;
            }
        }
        /** @type {?} */
        let dimension1 = dimensionItemValues[0] ? dimensionItemValues[0] : null;
        /** @type {?} */
        let dimension2 = dimensionItemValues[1] ? dimensionItemValues[1] : null;
        this.http.getDimensionData(this._assignment.templateId, this._assignment.bizTypeId, dimension1, dimension2, count).subscribe((/**
         * @param {?} dataItems
         * @return {?}
         */
        (dataItems) => {
            this.getParamValues(dataItems);
        }));
    }
    /**
     * @private
     * @return {?}
     */
    paramDataItemsInit() {
        /** @type {?} */
        let template = this.templateSerializer.deserializer(this.templateSerializer.serialize(this.template));
        this.paramDataItems = [];
        if (template && template.params) {
            template.params.map((/**
             * @param {?} x
             * @return {?}
             */
            x => {
                if (this._assignment.useDimension) {
                    this.dimensionParamDefaultValueInit((/** @type {?} */ (x)));
                }
                else {
                    ((/** @type {?} */ (x))).value = x.defaultValue;
                }
                this.paramDataItems.push(x);
            }));
        }
        this.paramDataItemsCloneInit();
    }
    /**
     * @private
     * @param {?} paramData
     * @return {?}
     */
    dimensionParamDefaultValueInit(paramData) {
        /** @type {?} */
        let count = this.dimensionItemDatas.length;
        if (count <= 0) {
            return;
        }
        if (count === 1) {
            if (!this.dimensionItemDatas[0] || !this.dimensionItemDatas[0].value) {
                return;
            }
        }
        if (count === 2) {
            if (!this.dimensionItemDatas[0] || !this.dimensionItemDatas[1] || !this.dimensionItemDatas[0].value || !this.dimensionItemDatas[1].value) {
                return;
            }
        }
        paramData.value = paramData.defaultValue;
    }
    /**
     * @private
     * @return {?}
     */
    paramDataItemsCloneInit() {
        /** @type {?} */
        let template = this.templateSerializer.deserializer(this.templateSerializer.serialize(this.template));
        this.paramDataItemsClone = [];
        if (template && template.params) {
            template.params.map((/**
             * @param {?} x
             * @return {?}
             */
            x => {
                if (this._assignment.useDimension) {
                    this.dimensionParamDefaultValueInit((/** @type {?} */ (x)));
                }
                else {
                    ((/** @type {?} */ (x))).value = x.defaultValue;
                }
                this.paramDataItemsClone.push(x);
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    dimensionDataItemsInit() {
        /** @type {?} */
        let assignment = this.assignmentSerializer.deserialize(this.assignmentSerializer.serialize(this._assignment));
        if (assignment && assignment.dimensionInfo
            && assignment.dimensionInfo.definition
            && assignment.dimensionInfo.definition.dimensionItems) {
            this.dimensionItemDatas = [];
            assignment.dimensionInfo.definition.dimensionItems.forEach((/**
             * @param {?} dimensionData
             * @return {?}
             */
            dimensionData => {
                this.dimensionItemDatas.push((/** @type {?} */ (dimensionData)));
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    createParamDataUiComponent() {
        this.paramDataPanel.clear();
        /** @type {?} */
        const factory = this.resolver.resolveComponentFactory(UbccParamDataUiComponent);
        /** @type {?} */
        let cmpRef = this.paramDataPanel.createComponent(factory);
        cmpRef.instance.canEdit = this.canEdit;
        cmpRef.instance.template = this.template;
        cmpRef.instance.paramDataItems = this.paramDataItems;
        this.currentInstance = cmpRef.instance;
    }
    /**
     * @private
     * @return {?}
     */
    createDimensionRootUiComponent() {
        this.paramDataPanel.clear();
        /** @type {?} */
        const factory = this.resolver.resolveComponentFactory(UbccParamDimensionUiRootComponent);
        /** @type {?} */
        let cmpRef = this.paramDataPanel.createComponent(factory);
        cmpRef.instance.canEdit = this.canEdit;
        cmpRef.instance.dimensionItemDatas = this.dimensionItemDatas;
        cmpRef.instance.paramDataItems = this.paramDataItems;
        cmpRef.instance.template = this.template;
        this.currentInstance = cmpRef.instance;
    }
    /**
     * @return {?}
     */
    convertDimensionDataToDataVo() {
        if (!this.dimensionItemDatas) {
            return null;
        }
        /** @type {?} */
        let dimensionValues = new Array();
        this.dimensionItemDatas.map((/**
         * @param {?} x
         * @return {?}
         */
        x => {
            /** @type {?} */
            let dimensionValue = new DataItem();
            dimensionValue.dataCode = x.code;
            dimensionValue.dataValue = ((/** @type {?} */ (x))).value;
            dimensionValue.dataType = this.getDimensionValueType(x.dataType);
            dimensionValues.push(dimensionValue);
        }));
        return dimensionValues;
    }
    /**
     * @return {?}
     */
    convertParamDataToDataVo() {
        if (!this.paramDataItems) {
            return null;
        }
        /** @type {?} */
        let paramValues = new Array();
        this.paramDataItems.map((/**
         * @param {?} x
         * @return {?}
         */
        x => {
            /** @type {?} */
            let paramValue = new DataItem();
            paramValue.dataCode = x.code;
            paramValue.dataValue = ((/** @type {?} */ (x))).value;
            paramValue.dataType = this.getParamValueType(((/** @type {?} */ (x))).parameterType);
            paramValues.push(paramValue);
        }));
        this.paramValuesClone(this.paramDataItemsClone, this.paramDataItems);
        return paramValues;
    }
    /**
     * @private
     * @param {?} dataType
     * @return {?}
     */
    getDimensionValueType(dataType) {
        /** @type {?} */
        let kind = dataType.getKind();
        switch (kind) {
            case DataTypeConst.DEFAULT_PRIMITIVE:
                return `${DataTypeConst.DEFAULT_PRIMITIVE}.${((/** @type {?} */ (dataType))).primitiveTypeKind}`;
            case DataTypeConst.DEFAULT_ENUMERATION:
                return DataTypeConst.DEFAULT_ENUMERATION;
            case DataTypeExtensionConst.HELP_TYPE:
                return DataTypeExtensionConst.HELP_TYPE + `##${((/** @type {?} */ (dataType))).helpId}`;
            default:
                throw new Error(`业务参数不支持的参数类型${kind}`);
        }
    }
    /**
     * @private
     * @param {?} dataType
     * @return {?}
     */
    getParamValueType(dataType) {
        /** @type {?} */
        let kind = dataType.getKind();
        switch (kind) {
            case DataTypeConst.DEFAULT_COLLECTION:
                /** @type {?} */
                let elemetType = ((/** @type {?} */ (dataType))).elementType;
                return `${DataTypeConst.DEFAULT_COLLECTION}.` + this.getParamValueType(elemetType);
            case DataTypeConst.DEFAULT_PRIMITIVE:
                return `${DataTypeConst.DEFAULT_PRIMITIVE}.${PrimitiveTypeKind[((/** @type {?} */ (dataType))).primitiveTypeKind]}`;
            case DataTypeExtensionConst.UBCC_STRUCTURE_TYPE_REF:
                /** @type {?} */
                let refType = (/** @type {?} */ (dataType));
                return refType.type === StructureTypeRefEnum.HELP ? DataTypeExtensionConst.HELP_TYPE + `##${refType.refId}` : DataTypeConst.DEFAULT_ENUMERATION;
            default:
                throw new Error(`业务参数不支持的参数类型${kind}`);
        }
    }
    /**
     * @return {?}
     */
    cancel() {
        this.paramValuesClone(this.paramDataItems, this.paramDataItemsClone);
        this.currentInstance.paramDataItems = this.paramDataItems;
    }
}
UbccParamDataUiRootComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-ubcc-param-data-ui-root',
                template: "<div class=\"col-12\">\r\n    <ng-template #paramDataPanel></ng-template>\r\n    <!-- <lib-ubcc-param-data-ui *ngIf=\"show()=='paramUi'\"\r\n        [canEdit]=\"canEdit\" \r\n        [(template)]=\"template\" \r\n        [(paramDataItems)]=\"paramDataItems\">\r\n    </lib-ubcc-param-data-ui>\r\n    <lib-ubcc-param-dimension-ui-root  *ngIf=\"show()=='dimensionUi'\"\r\n        [canEdit]=\"canEdit\" \r\n        [(template)]=\"template\" \r\n        [(paramDataItems)]=\"paramDataItems\" \r\n        [(dimensionItemDatas)]=\"dimensionItemDatas\">\r\n    </lib-ubcc-param-dimension-ui-root> -->\r\n</div>",
                providers: [UbccEventBusService],
                styles: [":host{display:flex;flex-direction:column;flex:1}"]
            }] }
];
/** @nocollapse */
UbccParamDataUiRootComponent.ctorParameters = () => [
    { type: UbccParamDataUtils },
    { type: UbccEventBusService },
    { type: UbccParamDataManangerService },
    { type: ComponentFactoryResolver }
];
UbccParamDataUiRootComponent.propDecorators = {
    assignment: [{ type: Input }],
    canEdit: [{ type: Input }],
    paramDataPanel: [{ type: ViewChild, args: ['paramDataPanel', { read: ViewContainerRef },] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    UbccParamDataUiRootComponent.prototype._assignment;
    /** @type {?} */
    UbccParamDataUiRootComponent.prototype._canEdit;
    /** @type {?} */
    UbccParamDataUiRootComponent.prototype.template;
    /** @type {?} */
    UbccParamDataUiRootComponent.prototype.dimensionItemDatas;
    /** @type {?} */
    UbccParamDataUiRootComponent.prototype.paramDataItems;
    /** @type {?} */
    UbccParamDataUiRootComponent.prototype.paramDataItemsClone;
    /** @type {?} */
    UbccParamDataUiRootComponent.prototype.currentInstance;
    /** @type {?} */
    UbccParamDataUiRootComponent.prototype.templateSerializer;
    /** @type {?} */
    UbccParamDataUiRootComponent.prototype.assignmentSerializer;
    /** @type {?} */
    UbccParamDataUiRootComponent.prototype.paramDataPanel;
    /**
     * @type {?}
     * @private
     */
    UbccParamDataUiRootComponent.prototype.utils;
    /**
     * @type {?}
     * @private
     */
    UbccParamDataUiRootComponent.prototype.ebsService;
    /**
     * @type {?}
     * @private
     */
    UbccParamDataUiRootComponent.prototype.http;
    /**
     * @type {?}
     * @private
     */
    UbccParamDataUiRootComponent.prototype.resolver;
}
//# sourceMappingURL=data:application/json;base64,