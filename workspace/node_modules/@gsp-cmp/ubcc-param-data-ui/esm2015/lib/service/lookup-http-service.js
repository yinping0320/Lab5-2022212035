/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/lookup-http-service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpHeaders, HttpClient } from '@angular/common/http';
import { SessionService } from '@ecp-caf/caf-common';
import { of } from 'rxjs';
export class LookUpHttpService {
    /**
     * @param {?} http
     * @param {?} cache
     */
    constructor(http, cache) {
        this.http = http;
        this.cache = cache;
        this.httpHeaders = new HttpHeaders().set("sessionid", this.cache.getUserSessionId());
        this.httpHeaders = new HttpHeaders();
        this.httpHeaders.set("sessionid", this.cache.getUserSessionId());
    }
    /**
     * @param {?} uri
     * @param {?=} params
     * @return {?}
     */
    getData(uri, params) {
        if (uri.includes('{helpId}')) {
            return of(null);
        }
        /** @type {?} */
        let queryParam = JSON.stringify(params);
        /** @type {?} */
        let url = `${uri}?queryParam=${encodeURIComponent(queryParam)}`;
        return this.http.get(url, { headers: this.httpHeaders });
    }
}
LookUpHttpService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
LookUpHttpService.ctorParameters = () => [
    { type: HttpClient },
    { type: SessionService }
];
if (false) {
    /** @type {?} */
    LookUpHttpService.prototype.httpHeaders;
    /**
     * @type {?}
     * @private
     */
    LookUpHttpService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    LookUpHttpService.prototype.cache;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9va3VwLWh0dHAtc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3AtY21wL3ViY2MtcGFyYW0tZGF0YS11aS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlL2xvb2t1cC1odHRwLXNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDL0QsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3JELE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFHdEMsTUFBTSxPQUFPLGlCQUFpQjs7Ozs7SUFJMUIsWUFBb0IsSUFBZ0IsRUFBVSxLQUFxQjtRQUEvQyxTQUFJLEdBQUosSUFBSSxDQUFZO1FBQVUsVUFBSyxHQUFMLEtBQUssQ0FBZ0I7UUFGbkUsZ0JBQVcsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7UUFHNUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBQ3JDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQztJQUNyRSxDQUFDOzs7Ozs7SUFFRCxPQUFPLENBQUMsR0FBVyxFQUFFLE1BQVk7UUFDN0IsSUFBRyxHQUFHLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFDO1lBQ3hCLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ25COztZQUNHLFVBQVUsR0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQzs7WUFDakMsR0FBRyxHQUFDLEdBQUcsR0FBRyxlQUFlLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQzdELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFDLEVBQUMsT0FBTyxFQUFDLElBQUksQ0FBQyxXQUFXLEVBQUMsQ0FBQyxDQUFDO0lBQ3pELENBQUM7OztZQWpCSixVQUFVOzs7O1lBSlcsVUFBVTtZQUN2QixjQUFjOzs7O0lBTW5CLHdDQUFnRjs7Ozs7SUFFcEUsaUNBQXdCOzs7OztJQUFFLGtDQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSUxvb2t1cEh0dHBTZXJ2aWNlLCBMb29rdXBHcmlkUmVzdWx0IH0gZnJvbSAnQGZhcnJpcy91aS1sb29rdXAnO1xyXG5pbXBvcnQgeyBIdHRwSGVhZGVycywgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgU2Vzc2lvblNlcnZpY2UgfSBmcm9tICdAZWNwLWNhZi9jYWYtY29tbW9uJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIExvb2tVcEh0dHBTZXJ2aWNlIGltcGxlbWVudHMgSUxvb2t1cEh0dHBTZXJ2aWNle1xyXG5cclxuICAgIGh0dHBIZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKCkuc2V0KFwic2Vzc2lvbmlkXCIsIHRoaXMuY2FjaGUuZ2V0VXNlclNlc3Npb25JZCgpKTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsIHByaXZhdGUgY2FjaGU6IFNlc3Npb25TZXJ2aWNlKSB7XHJcbiAgICAgICAgdGhpcy5odHRwSGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycygpO1xyXG4gICAgICAgIHRoaXMuaHR0cEhlYWRlcnMuc2V0KFwic2Vzc2lvbmlkXCIsIHRoaXMuY2FjaGUuZ2V0VXNlclNlc3Npb25JZCgpKTtcclxuICAgIH0gXHJcbiAgICBcclxuICAgIGdldERhdGEodXJpOiBzdHJpbmcsIHBhcmFtcz86IGFueSk6IE9ic2VydmFibGU8TG9va3VwR3JpZFJlc3VsdD4ge1xyXG4gICAgICAgIGlmKHVyaS5pbmNsdWRlcygne2hlbHBJZH0nKSl7XHJcbiAgICAgICAgICAgIHJldHVybiBvZihudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHF1ZXJ5UGFyYW09SlNPTi5zdHJpbmdpZnkocGFyYW1zKTtcclxuICAgICAgICBsZXQgdXJsPWAke3VyaX0/cXVlcnlQYXJhbT0ke2VuY29kZVVSSUNvbXBvbmVudChxdWVyeVBhcmFtKX1gO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHVybCx7aGVhZGVyczp0aGlzLmh0dHBIZWFkZXJzfSk7XHJcbiAgICB9XHJcbn0iXX0=