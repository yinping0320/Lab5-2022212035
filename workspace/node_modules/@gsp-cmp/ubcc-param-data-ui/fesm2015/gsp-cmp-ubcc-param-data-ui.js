import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { ButtonsModule } from '@progress/kendo-angular-buttons';
import { FrameworkService, FrmEventBus, FuncsService, LoadingService } from '@gsp-sys/rtf-common';
import { InputGroupModule } from '@farris/ui-input-group';
import { LoadingModule } from '@farris/ui-loading';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { ComboListModule } from '@farris/ui-combo-list';
import { FarrisButtonModule } from '@farris/ui-button';
import { FarrisDatePickerModule } from '@farris/ui-datepicker';
import { FarrisSectionModule } from '@farris/ui-section';
import { NumberSpinnerModule } from '@farris/ui-number-spinner';
import { MessagerService, MessagerModule } from '@farris/ui-messager';
import { NotifyService, NotifyModule } from '@farris/ui-notify';
import { HttpClient, HttpHeaders, HttpClientModule } from '@angular/common/http';
import { SessionService, HttpService, CacheService } from '@ecp-caf/caf-common';
import { of } from 'rxjs';
import { GSPMetadataRTService, GSPMetadataRTServiceModule } from '@gsp-lcm/metadatart-selector';
import { ServerSideToken, LookupModule } from '@farris/ui-lookup';
import { BsModalService, ModalModule } from '@farris/ui-modal';
import { Component, Input, ViewEncapsulation, Injectable, EventEmitter, Output, ViewChild, NgModule, ComponentFactoryResolver, Injector, ViewContainerRef, defineInjectable, inject } from '@angular/core';
import { UbccParamTemplate, DataTypeExtensionConst, StructureTypeRefEnum, UbccParamTemplateSerializer, UbccParamTemplateAssignment, DataItem, UbccParamTemplateAssignmentSerializer } from '@gsp-cmp/ubcc-param-vo';
import { DataTypeConst, PrimitiveTypeKind } from '@ecp-caf/common-structure';
import { FarrisTooltipModule } from '@farris/ui-tooltip';
import { FarrisPanelModule } from '@farris/ui-panel';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ubcc-param-data-ui/ubcc-param-data-ui.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UbccParamDataUiComponent {
    constructor() {
        this.paramDataItems = [];
        this.canEdit = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.template = this.template || new UbccParamTemplate();
        this.template.params = this.template.params || [];
        this.template.groups = this.template.groups || [];
    }
    /**
     * @param {?} param
     * @return {?}
     */
    getControlType(param) {
        if (!param || !param.parameterType || !param.parameterTypeDesc) {
            return;
        }
        switch (param.parameterTypeDesc) {
            case 'string':
                return 'input';
            case 'bool':
                return 'checkbox';
            case 'double':
            case 'int':
                return 'number';
            case 'datetime':
                return 'date';
            case 'enum':
                return 'dropdownlist';
            case 'help':
                return 'lookup';
            default:
                return 'input';
        }
    }
    /**
     * @param {?} group
     * @return {?}
     */
    getParamItems(group) {
        return this.paramDataItems.filter((/**
         * @param {?} x
         * @return {?}
         */
        x => x.groupId === group.groupId));
    }
    /**
     * @param {?} group
     * @param {?} index
     * @return {?}
     */
    getIndex(group, index) {
        /** @type {?} */
        let currentGroupParams = this.getParamItems(group);
        /** @type {?} */
        let currentParam = this.paramDataItems.find((/**
         * @param {?} x
         * @return {?}
         */
        x => x.id === currentGroupParams[index].id));
        /** @type {?} */
        let realIndex = this.paramDataItems.findIndex((/**
         * @param {?} x
         * @return {?}
         */
        x => x.id === currentParam.id));
        return realIndex;
    }
    /**
     * @param {?} param
     * @return {?}
     */
    show(param) {
        return param.visible || false;
    }
    /**
     * @param {?} param
     * @return {?}
     */
    isCollection(param) {
        if (!param || !param.parameterType) {
            return false;
        }
        if (param.parameterType.getKind() === DataTypeConst.DEFAULT_COLLECTION) {
            return true;
        }
        else {
            return false;
        }
    }
}
UbccParamDataUiComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-ubcc-param-data-ui',
                template: "<farris-section [mainTitle]=\"'\u53C2\u6570\u4FE1\u606F'\" [enableMaximize]=\"false\">\r\n\r\n    <div *ngIf=\"!template.groupEnable\">\r\n        <div *ngFor=\"let parameter of paramDataItems;let i=index;\" style=\"margin-top: 10px;\">\r\n\r\n            <div *ngIf=\"show(paramDataItems[i])\">\r\n                <div class=\"col-12\" [ngSwitch]=\"getControlType(paramDataItems[i])\">\r\n\r\n                    <lib-dropdownlist-control *ngSwitchCase=\"'dropdownlist'\" [(canEdit)]=\"canEdit\" [(param)]=\"paramDataItems[i]\"\r\n                        [(template)]=\"template\"></lib-dropdownlist-control>\r\n\r\n                    <lib-lookup-control *ngSwitchCase=\"'lookup'\" [(canEdit)]=\"canEdit\" [(param)]=\"paramDataItems[i]\"></lib-lookup-control>\r\n\r\n                    <lib-number-control *ngSwitchCase=\"'number'\" [(canEdit)]=\"canEdit\" [(param)]=\"paramDataItems[i]\"></lib-number-control>\r\n\r\n                    <lib-date-control *ngSwitchCase=\"'date'\" [(canEdit)]=\"canEdit\" [(param)]=\"paramDataItems[i]\"></lib-date-control>\r\n\r\n                    <lib-checkbox-control *ngSwitchCase=\"'checkbox'\" [(canEdit)]=\"canEdit\" [(param)]=\"paramDataItems[i]\"></lib-checkbox-control>\r\n\r\n                    <lib-input-control *ngSwitchDefault [(canEdit)]=\"canEdit\" [(param)]=\"paramDataItems[i]\"></lib-input-control>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"template.groupEnable\" style=\"margin-top: 10px;\">\r\n\r\n        <farris-panel [defaultExpand]=\"true\">\r\n            <farris-panel-item class=\"border-0\" *ngFor=\"let group of template.groups;let groupIndex=index;\" [title]=\"group.groupName\" style=\"padding-bottom: 2px;\">\r\n                <ng-template #contentTempl>\r\n                    <div *ngFor=\"let parameter of getParamItems(template.groups[groupIndex]);let i=index;\" style=\"margin-top: 10px;\">\r\n\r\n                        <div *ngIf=\"show(paramDataItems[getIndex(template.groups[groupIndex],i)])\">\r\n                            <div class=\"col-12\" [ngSwitch]=\"getControlType(paramDataItems[getIndex(template.groups[groupIndex],i)])\">\r\n\r\n                                <lib-dropdownlist-control *ngSwitchCase=\"'dropdownlist'\" [(canEdit)]=\"canEdit\"\r\n                                    [(param)]=\"paramDataItems[getIndex(template.groups[groupIndex],i)]\" [(template)]=\"template\"></lib-dropdownlist-control>\r\n\r\n                                <lib-lookup-control *ngSwitchCase=\"'lookup'\" [(canEdit)]=\"canEdit\" [(param)]=\"paramDataItems[getIndex(template.groups[groupIndex],i)]\"></lib-lookup-control>\r\n\r\n                                <lib-number-control *ngSwitchCase=\"'number'\" [(canEdit)]=\"canEdit\" [(param)]=\"paramDataItems[getIndex(template.groups[groupIndex],i)]\"></lib-number-control>\r\n\r\n                                <lib-date-control *ngSwitchCase=\"'date'\" [(canEdit)]=\"canEdit\" [(param)]=\"paramDataItems[getIndex(template.groups[groupIndex],i)]\"></lib-date-control>\r\n\r\n                                <lib-checkbox-control *ngSwitchCase=\"'checkbox'\" [(canEdit)]=\"canEdit\" [(param)]=\"paramDataItems[getIndex(template.groups[groupIndex],i)]\"></lib-checkbox-control>\r\n\r\n                                <lib-input-control *ngSwitchDefault [(canEdit)]=\"canEdit\" [(param)]=\"paramDataItems[getIndex(template.groups[groupIndex],i)]\"></lib-input-control>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </ng-template>\r\n            </farris-panel-item>\r\n        </farris-panel>\r\n    </div>\r\n\r\n</farris-section>",
                encapsulation: ViewEncapsulation.None,
                styles: [":host{display:flex;flex-direction:column;flex:1}.farris-panel .card.f-state-selected .card-header,lib-ubcc-param-data-ui .accordion .card.f-state-selected .card-header{color:#262626!important;background-color:#f4f4f4!important;border-color:#e6e6e6}.farris-panel .card .card-header,lib-ubcc-param-data-ui .accordion .card .card-header{position:relative;border-width:0;background-color:#f4f4f4!important;color:rgba(0,0,0,.85);padding:.5265rem .875rem}.farris-panel .card .card-header .panel-item-title,lib-ubcc-param-data-ui .accordion .card .card-header .panel-item-title{font-size:15px!important;line-height:1.375rem}lib-ubcc-param-data-ui .farris-panel{border:0 solid rgba(0,0,0,.125)!important}.farris-panel .card.f-state-selected .card-header .f-icon,lib-ubcc-param-data-ui .accordion .card.f-state-selected .card-header .f-icon{color:#171616!important}.f-section-header,lib-ubcc-param-data-ui .f-section-extend{margin:0 0 .25rem}"]
            }] }
];
/** @nocollapse */
UbccParamDataUiComponent.ctorParameters = () => [];
UbccParamDataUiComponent.propDecorators = {
    template: [{ type: Input }],
    paramDataItems: [{ type: Input }],
    canEdit: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/http-service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const UBCC_PARAM_TEMPLATE_ROUTER = '/api/runtime/bcc/v1.0/param/template/definition';
/** @type {?} */
const UBCC_PARAM_TEMPLATE_GET_BY_ID = `${UBCC_PARAM_TEMPLATE_ROUTER}/{id}`;
/** @type {?} */
const UBCC_PARAM_DATA_ROUTER = '/api/runtime/bcc/v1.0/param/data';
/** @type {?} */
const UBCC_PARAM_DATA = UBCC_PARAM_DATA_ROUTER;
/** @type {?} */
const UBCC_PARAM_DATA_DIMENSION = `${UBCC_PARAM_DATA_ROUTER}/dimensionalData`;
/** @type {?} */
const UBCC_PARAM_DATA_GET_BY_ID = `${UBCC_PARAM_DATA_ROUTER}/{templateId}/{bizTypeId}`;
/** @type {?} */
const UBCC_DIMENSION_PARAM_DATA_GET_BY_ID = `${UBCC_PARAM_DATA_ROUTER}/{templateId}/{bizTypeId}/dimensions/paramdatas`;
/** @type {?} */
const UBCC_PARAM_HELP_DATA_ROUTER = `/api/runtime/bcc/v1.0/param/help/{helpId}/{dataIds}`;
class UbccParamDataManangerService {
    /**
     * @param {?} http
     * @param {?} cache
     */
    constructor(http, cache) {
        this.http = http;
        this.cache = cache;
        this.httpHeaders = new HttpHeaders();
        this.httpHeaders.set("sessionid", this.cache.getUserSessionId());
    }
    /**
     * @param {?} id
     * @return {?}
     */
    getParamTemplate(id) {
        /** @type {?} */
        let url = UBCC_PARAM_TEMPLATE_GET_BY_ID.replace('{id}', id);
        return this.http.get(url, { headers: this.httpHeaders });
    }
    /**
     * @param {?} templateId
     * @param {?} bizTypeId
     * @return {?}
     */
    getParamData(templateId, bizTypeId) {
        /** @type {?} */
        let url = UBCC_PARAM_DATA_GET_BY_ID.replace('{templateId}', templateId).replace('{bizTypeId}', bizTypeId);
        return this.http.get(url, { headers: this.httpHeaders });
    }
    /**
     * @param {?} templateId
     * @param {?} bizTypeId
     * @param {?} dimension1
     * @param {?} dimension2
     * @param {?} dimensionCount
     * @return {?}
     */
    getDimensionData(templateId, bizTypeId, dimension1, dimension2, dimensionCount) {
        /** @type {?} */
        let url = UBCC_DIMENSION_PARAM_DATA_GET_BY_ID.replace('{templateId}', templateId).replace('{bizTypeId}', bizTypeId);
        if (dimensionCount === 1) {
            url = `${url}?dimension1=${dimension1}&dimensionCount=${dimensionCount}`;
        }
        if (dimensionCount === 2) {
            url = `${url}?dimension1=${dimension1}&dimension2=${dimension2}&dimensionCount=${dimensionCount}`;
        }
        return this.http.get(url, { headers: this.httpHeaders });
    }
    /**
     * @param {?} templateId
     * @param {?} bizTypeId
     * @param {?} dimensionValues
     * @param {?} paramValues
     * @return {?}
     */
    saveDimensionAndParamData(templateId, bizTypeId, dimensionValues, paramValues) {
        /** @type {?} */
        let url = UBCC_PARAM_DATA_DIMENSION;
        /** @type {?} */
        let body = {
            templateId: templateId,
            bizTypeId: bizTypeId,
            dimensionValues: dimensionValues,
            paramValues: paramValues
        };
        return this.http.post(url, body, { headers: this.httpHeaders });
    }
    /**
     * @param {?} templateId
     * @param {?} bizTypeId
     * @param {?} paramValues
     * @return {?}
     */
    saveParamData(templateId, bizTypeId, paramValues) {
        /** @type {?} */
        let url = UBCC_PARAM_DATA;
        /** @type {?} */
        let body = {
            templateId: templateId,
            bizTypeId: bizTypeId,
            paramValues: paramValues
        };
        return this.http.post(url, body, { headers: this.httpHeaders });
    }
    /**
     * @param {?} helpId
     * @param {?} dataIds
     * @return {?}
     */
    getHelpData(helpId, dataIds) {
        /** @type {?} */
        let url = UBCC_PARAM_HELP_DATA_ROUTER.replace('{helpId}', helpId).replace('{dataIds}', dataIds.join(','));
        return this.http.get(url, { headers: this.httpHeaders });
    }
}
UbccParamDataManangerService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
UbccParamDataManangerService.ctorParameters = () => [
    { type: HttpClient },
    { type: SessionService }
];
/** @nocollapse */ UbccParamDataManangerService.ngInjectableDef = defineInjectable({ factory: function UbccParamDataManangerService_Factory() { return new UbccParamDataManangerService(inject(HttpClient), inject(SessionService)); }, token: UbccParamDataManangerService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/param-data-utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UbccParamDataUtils {
    /**
     * @param {?} messagerService
     * @param {?} notify
     */
    constructor(messagerService, notify) {
        this.messagerService = messagerService;
        this.notify = notify;
    }
    /**
     * @param {?} dataType
     * @return {?}
     */
    isHelpType(dataType) {
        if (!dataType) {
            return false;
        }
        if (this.isCollection(dataType)) {
            /** @type {?} */
            let elementType = this.getCollectionElementType(dataType);
            return this.isHelpTypeRef(elementType);
        }
        else {
            return this.isHelpTypeRef(dataType);
        }
    }
    /**
     * @param {?} dataType
     * @return {?}
     */
    isHelpTypeRef(dataType) {
        /** @type {?} */
        let kind = dataType.getKind();
        if (!kind) {
            return false;
        }
        if (kind === DataTypeExtensionConst.UBCC_STRUCTURE_TYPE_REF) {
            /** @type {?} */
            let refType = (/** @type {?} */ (dataType));
            if (refType.type === StructureTypeRefEnum.HELP) {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            return false;
        }
    }
    // private getHelpData(data:any,paramDataItem:any){
    //     if(!data.dataValue){
    //         return;
    //     }
    //     if (data.dataValueText) {
    //         paramDataItem.valueText = data.dataValueText;
    //     }
    //     else {
    //         let dataId = data.dataValue.split(',');
    //         let helpId=this.getHelpId(paramDataItem.parameterType);
    //         this.http.getHelpData(helpId, dataId).subscribe(
    //             (helpDataItems: Array<HelpDataItem>) => {
    //                 if (!helpDataItems) {
    //                     return;
    //                 }
    //                 let texts=[];
    //                 helpDataItems.map(helpDataItem => texts.push(helpDataItem.text));
    //                 paramDataItem.valueText=texts.join(',');
    //             }
    //         );
    //     }
    // }
    // private getHelpId(dataType:IDataType){
    //     if(this.isCollection(dataType)){
    //         let refType=this.getCollectionElementType(dataType) as StructureTypeRef;
    //         return refType&&refType.refId?refType.refId:null;
    //     }
    //     else{
    //         let refType=dataType as StructureTypeRef;
    //         return refType&&refType.refId?refType.refId:null;
    //     }
    // }
    /**
     * @param {?} dataType
     * @return {?}
     */
    getCollectionElementType(dataType) {
        /** @type {?} */
        let kind = dataType.getKind();
        switch (kind) {
            case DataTypeConst.DEFAULT_COLLECTION:
                /** @type {?} */
                let elementType = ((/** @type {?} */ (dataType))).elementType;
                return this.getCollectionElementType(elementType);
            default:
                return dataType;
        }
    }
    /**
     * @param {?} dataType
     * @return {?}
     */
    isCollection(dataType) {
        if (!dataType) {
            return false;
        }
        if (dataType.getKind() === DataTypeConst.DEFAULT_COLLECTION) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @param {?} btnRef
     * @return {?}
     */
    getModalConfig(btnRef) {
        return {
            title: '参数配置',
            width: 650,
            height: 560,
            resizable: true,
            showButtons: true,
            showMaxButton: false,
            enableScroll: false,
            buttons: btnRef
        };
    }
    /**
     * @param {?} message
     * @param {?} infoType
     * @param {?} title
     * @param {?} timeout
     * @return {?}
     */
    showInfo(message, infoType, title, timeout) {
        this.notify.config.position = 'top-center';
        if (infoType == 'success') {
            this.notify.success((/** @type {?} */ ({ title: title, msg: message, timeout: timeout })));
        }
        else if (infoType == 'info') {
            this.notify.info((/** @type {?} */ ({ title: title, msg: message, timeout: timeout })));
        }
        else if (infoType == 'warning') {
            this.notify.warning((/** @type {?} */ ({ title: title, msg: message, timeout: timeout })));
        }
        else if (infoType == 'error') {
            this.notify.error((/** @type {?} */ ({ title: title, msg: message, timeout: timeout })));
        }
    }
    /**
     * @return {?}
     */
    newGuid() {
        return (this.s4() + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + "-" + this.s4() + this.s4() + this.s4());
    }
    /**
     * @return {?}
     */
    s4() {
        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
    }
}
UbccParamDataUtils.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
UbccParamDataUtils.ctorParameters = () => [
    { type: MessagerService },
    { type: NotifyService }
];
/** @nocollapse */ UbccParamDataUtils.ngInjectableDef = defineInjectable({ factory: function UbccParamDataUtils_Factory() { return new UbccParamDataUtils(inject(MessagerService), inject(NotifyService)); }, token: UbccParamDataUtils, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ubcc-param-data-ui-dialog/ubcc-param-data-ui-dialog.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UbccParamDataUiDialogComponent {
    /**
     * @param {?} utils
     * @param {?} http
     */
    constructor(utils, http) {
        this.utils = utils;
        this.http = http;
        this.paramDataItems = [];
        this.confirmEmitter = new EventEmitter();
        this.closeEmitter = new EventEmitter();
        this.close = (/**
         * @return {?}
         */
        () => {
            if (this.dialog) {
                this.dialog.close();
            }
            this.closeEmitter.emit();
        });
    }
    /**
     * 输入数据为JSON对象
     * @param {?} data
     * @return {?}
     */
    set data(data) {
        this._data = data;
        this.loadParamData(this.templateId);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.template = this.template || new UbccParamTemplate();
    }
    /**
     * @private
     * @param {?} templateId
     * @return {?}
     */
    loadParamData(templateId) {
        if (!templateId) {
            return;
        }
        this.http.getParamTemplate(templateId).subscribe((/**
         * @param {?} vo
         * @return {?}
         */
        (vo) => {
            if (!vo.content) {
                return;
            }
            /** @type {?} */
            let serializer = new UbccParamTemplateSerializer();
            this.template = serializer.deserializer(JSON.parse(vo.content));
            this.getParamDataItemsStructure();
            this.convertJsonToParamData();
        }));
    }
    /**
     * @private
     * @return {?}
     */
    convertJsonToParamData() {
        if (!this._data || Object.keys(this._data).length <= 0) {
            return;
        }
        this.paramDataItems.map((/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            /** @type {?} */
            let key = Object.keys(this._data).find((/**
             * @param {?} x
             * @return {?}
             */
            x => x === item.code));
            if (!key || !this._data[key]) {
                return;
            }
            if (this.isCollection(item)) {
                //参数的值如果是数组，以逗号隔开
                item.value = this._data[key].join(',');
                if (!this.utils.isHelpType(item.parameterType)) {
                    return;
                }
                /** @type {?} */
                let helpId = ((/** @type {?} */ (this.utils.getCollectionElementType(item.parameterType)))).refId;
                this.http.getHelpData(helpId, this._data[key]).subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                (result) => {
                    if (!result || result.length <= 0) {
                        return;
                    }
                    /** @type {?} */
                    let values = [];
                    result.map((/**
                     * @param {?} resItem
                     * @return {?}
                     */
                    resItem => values.push(resItem.text)));
                    item.valueText = values.join(',');
                }));
            }
            else {
                item.value = this._data[key];
                if (item.parameterTypeDesc !== 'help') {
                    return;
                }
                /** @type {?} */
                let helpId = ((/** @type {?} */ (item.parameterType))).refId;
                this.http.getHelpData(helpId, [item.value]).subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                (result) => {
                    if (!result || result.length <= 0) {
                        return;
                    }
                    item.valueText = result[0].text;
                }));
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    getParamDataItemsStructure() {
        if (!this.template || !this.template.params) {
            return;
        }
        this.paramDataItems = [];
        this.template.params.map((/**
         * @param {?} x
         * @return {?}
         */
        x => this.paramDataItems.push(x)));
    }
    /**
     * @private
     * @return {?}
     */
    covertParamDataToJson() {
        if (!this.paramDataItems || this.paramDataItems.length <= 0) {
            return null;
        }
        /** @type {?} */
        let object = new Object();
        this.paramDataItems.map((/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            if (this.isCollection(item)) {
                object[item.code] = [];
                /** @type {?} */
                let itemValues = item.value.split(',');
                if (!itemValues || itemValues.length <= 0) {
                    return;
                }
                itemValues.map((/**
                 * @param {?} itemValue
                 * @return {?}
                 */
                itemValue => object[item.code].push(itemValue)));
                //帮助name赋值
                if (item.parameterTypeDesc === 'help') {
                    object[`${item.code}_name`] = [];
                    /** @type {?} */
                    let itemTextValues = item.valueText.split(',');
                    if (!itemTextValues || itemTextValues.length <= 0) {
                        return;
                    }
                    itemTextValues.map((/**
                     * @param {?} itemTextValue
                     * @return {?}
                     */
                    itemTextValue => object[`${item.code}_name`].push(itemTextValue)));
                }
            }
            else {
                object[item.code] = item.value;
                //帮助name赋值
                if (item.parameterTypeDesc === 'help') {
                    object[`${item.code}_name`] = item.valueText;
                }
            }
        }));
        return object;
    }
    /**
     * @return {?}
     */
    confirm() {
        /** @type {?} */
        let jsonData = this.covertParamDataToJson();
        this.confirmEmitter.emit(jsonData);
    }
    /**
     * @private
     * @param {?} param
     * @return {?}
     */
    isCollection(param) {
        if (!param || !param.parameterType) {
            return false;
        }
        if (param.parameterType.getKind() === DataTypeConst.DEFAULT_COLLECTION) {
            return true;
        }
        else {
            return false;
        }
    }
}
UbccParamDataUiDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-ubcc-param-data-ui-dialog',
                template: "<div class=\"d-flex\" style=\"position: absolute;top: 0;bottom: 0;left: 0;right: 0;padding: 0px 8px 0px 8px;\">\n  <lib-ubcc-param-data-ui class=\"f-utils-fill\" [(template)]=\"template\" [(paramDataItems)]=\"paramDataItems\"  style=\"overflow-y: auto;\"></lib-ubcc-param-data-ui>\n</div>\n\n<ng-template #btnRef>\n  <div style=\"width: 100%;line-height: 50px; text-align: center;min-width: 140px;\">\n    <button class=\"btn btn-primary\" (click)=confirm() style=\"float:right;margin-right: 5px\">\u786E\u5B9A</button>\n    <button class=\"btn btn-secondary\" (click)=close() style=\"float:right;margin-right: 5px\">\u5173\u95ED</button>\n  </div>\n</ng-template>",
                styles: [":host{display:flex;flex-direction:column;flex:1}"]
            }] }
];
/** @nocollapse */
UbccParamDataUiDialogComponent.ctorParameters = () => [
    { type: UbccParamDataUtils },
    { type: UbccParamDataManangerService }
];
UbccParamDataUiDialogComponent.propDecorators = {
    templateId: [{ type: Input }],
    data: [{ type: Input }],
    confirmEmitter: [{ type: Output }],
    closeEmitter: [{ type: Output }],
    btnRef: [{ type: ViewChild, args: ['btnRef',] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ubcc-param-dimension-ui-root/ubcc-param-dimension-ui-root.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UbccParamDimensionUiRootComponent {
    constructor() {
        this.dimensionItemDatas = [];
        this.paramDataItems = [];
        this.canEdit = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.template = this.template || new UbccParamTemplate();
    }
}
UbccParamDimensionUiRootComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-ubcc-param-dimension-ui-root',
                template: "\n<lib-ubcc-param-dimension-ui [(dimensionItemDatas)]=\"dimensionItemDatas\"></lib-ubcc-param-dimension-ui>\n<lib-ubcc-param-data-ui [canEdit]=\"canEdit\" [(template)]=\"template\" [(paramDataItems)]=\"paramDataItems\"></lib-ubcc-param-data-ui>",
                styles: [""]
            }] }
];
/** @nocollapse */
UbccParamDimensionUiRootComponent.ctorParameters = () => [];
UbccParamDimensionUiRootComponent.propDecorators = {
    template: [{ type: Input }],
    dimensionItemDatas: [{ type: Input }],
    paramDataItems: [{ type: Input }],
    canEdit: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/event-bus-service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UbccEventBusService {
    constructor() {
        this.ebs = new EventEmitter();
    }
}
UbccEventBusService.decorators = [
    { type: Injectable }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ubcc-param-data-ui-root.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UbccParamDataUiRootComponent {
    /**
     * @param {?} utils
     * @param {?} ebsService
     * @param {?} http
     * @param {?} resolver
     */
    constructor(utils, ebsService, http, resolver) {
        this.utils = utils;
        this.ebsService = ebsService;
        this.http = http;
        this.resolver = resolver;
        this._canEdit = true;
        this.dimensionItemDatas = [];
        this.paramDataItems = [];
        this.paramDataItemsClone = [];
        this.templateSerializer = new UbccParamTemplateSerializer();
        this.assignmentSerializer = new UbccParamTemplateAssignmentSerializer();
        this.ebsService.ebs.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        event => {
            this.loadDimensionDataFromRemote();
        }));
    }
    /**
     * @param {?} assignment
     * @return {?}
     */
    set assignment(assignment) {
        this._assignment = assignment;
        this.loadData();
    }
    /**
     * @param {?} canEdit
     * @return {?}
     */
    set canEdit(canEdit) {
        this._canEdit = canEdit;
        if (this.currentInstance) {
            this.currentInstance.canEdit = this._canEdit;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._assignment = this._assignment || new UbccParamTemplateAssignment();
        this.template = this.template || new UbccParamTemplate();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.paramDataPanel.clear();
    }
    /**
     * @private
     * @return {?}
     */
    loadData() {
        //参数,维度数据源初始化
        this.dimensionItemDatas = [];
        this.paramDataItems = [];
        this.paramDataItemsClone = [];
        if (!this._assignment || !this._assignment.templateId) {
            return;
        }
        this.http.getParamTemplate(this._assignment.templateId).subscribe((/**
         * @param {?} vo
         * @return {?}
         */
        (vo) => {
            if (!vo || !vo.content) {
                return;
            }
            /** @type {?} */
            let serializer = new UbccParamTemplateSerializer();
            this.template = serializer.deserializer(JSON.parse(vo.content));
            this.load();
        }), (/**
         * @param {?} err
         * @return {?}
         */
        err => {
            throw err;
        }));
    }
    /**
     * @private
     * @return {?}
     */
    load() {
        //参数结构初始化，参数值为空
        this.paramDataItemsInit();
        //根据维度创建对应的UI组件
        if (this._assignment.useDimension) {
            //维度结构初始化，维度数据为空
            this.dimensionDataItemsInit();
            //创建维度UI组件，此处不取数，只渲染界面，在选择维度数据后再加载数据
            this.createDimensionRootUiComponent();
        }
        else {
            this.http.getParamData(this._assignment.templateId, this._assignment.bizTypeId).subscribe((/**
             * @param {?} dataItems
             * @return {?}
             */
            (dataItems) => {
                this.getParamValues(dataItems);
            }), (/**
             * @param {?} err
             * @return {?}
             */
            err => {
                throw err;
            }));
            //创建参数UI组件
            this.createParamDataUiComponent();
        }
    }
    /**
     * @private
     * @param {?} dataItems
     * @return {?}
     */
    getParamValues(dataItems) {
        if (!dataItems || dataItems.length <= 0) {
            return;
        }
        this.paramDataItems.map((/**
         * @param {?} paramDataItem
         * @return {?}
         */
        (paramDataItem) => {
            /** @type {?} */
            let data = dataItems.find((/**
             * @param {?} item
             * @return {?}
             */
            item => item.dataCode === paramDataItem.code));
            if (data) {
                paramDataItem.value = data.dataValue;
                if (!this.utils.isHelpType(paramDataItem.parameterType)) {
                    return;
                }
                paramDataItem.valueText = data.dataValueText || '';
                // 从前端获取帮助数据
                // this.getHelpData(data,paramDataItem);
            }
        }));
        this.paramValuesClone(this.paramDataItemsClone, this.paramDataItems);
    }
    /**
     * @private
     * @param {?} target
     * @param {?} source
     * @return {?}
     */
    paramValuesClone(target, source) {
        if (source.length == 0 || target.length == 0 || target.length !== source.length) {
            return;
        }
        target.map((/**
         * @param {?} paramDataItemClone
         * @return {?}
         */
        paramDataItemClone => {
            /** @type {?} */
            let index = source.findIndex((/**
             * @param {?} x
             * @return {?}
             */
            x => x.code === paramDataItemClone.code));
            if (index !== (-1)) {
                paramDataItemClone.id = source[index].id;
                paramDataItemClone.value = source[index].value;
                paramDataItemClone.valueText = source[index].valueText;
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    loadDimensionDataFromRemote() {
        this.paramDataItemsInit();
        this.currentInstance.paramDataItems = this.paramDataItems;
        /** @type {?} */
        let dimensionItemValues = [];
        this.dimensionItemDatas.map((/**
         * @param {?} x
         * @return {?}
         */
        (x) => dimensionItemValues.push(x.value)));
        /** @type {?} */
        let count = dimensionItemValues.length;
        if (count <= 0) {
            return;
        }
        if (count === 1) {
            if (!dimensionItemValues[0]) {
                return;
            }
        }
        if (count === 2) {
            if (!dimensionItemValues[0] || !dimensionItemValues[1]) {
                return;
            }
        }
        /** @type {?} */
        let dimension1 = dimensionItemValues[0] ? dimensionItemValues[0] : null;
        /** @type {?} */
        let dimension2 = dimensionItemValues[1] ? dimensionItemValues[1] : null;
        this.http.getDimensionData(this._assignment.templateId, this._assignment.bizTypeId, dimension1, dimension2, count).subscribe((/**
         * @param {?} dataItems
         * @return {?}
         */
        (dataItems) => {
            this.getParamValues(dataItems);
        }));
    }
    /**
     * @private
     * @return {?}
     */
    paramDataItemsInit() {
        /** @type {?} */
        let template = this.templateSerializer.deserializer(this.templateSerializer.serialize(this.template));
        this.paramDataItems = [];
        if (template && template.params) {
            template.params.map((/**
             * @param {?} x
             * @return {?}
             */
            x => {
                if (this._assignment.useDimension) {
                    this.dimensionParamDefaultValueInit((/** @type {?} */ (x)));
                }
                else {
                    ((/** @type {?} */ (x))).value = x.defaultValue;
                }
                this.paramDataItems.push(x);
            }));
        }
        this.paramDataItemsCloneInit();
    }
    /**
     * @private
     * @param {?} paramData
     * @return {?}
     */
    dimensionParamDefaultValueInit(paramData) {
        /** @type {?} */
        let count = this.dimensionItemDatas.length;
        if (count <= 0) {
            return;
        }
        if (count === 1) {
            if (!this.dimensionItemDatas[0] || !this.dimensionItemDatas[0].value) {
                return;
            }
        }
        if (count === 2) {
            if (!this.dimensionItemDatas[0] || !this.dimensionItemDatas[1] || !this.dimensionItemDatas[0].value || !this.dimensionItemDatas[1].value) {
                return;
            }
        }
        paramData.value = paramData.defaultValue;
    }
    /**
     * @private
     * @return {?}
     */
    paramDataItemsCloneInit() {
        /** @type {?} */
        let template = this.templateSerializer.deserializer(this.templateSerializer.serialize(this.template));
        this.paramDataItemsClone = [];
        if (template && template.params) {
            template.params.map((/**
             * @param {?} x
             * @return {?}
             */
            x => {
                if (this._assignment.useDimension) {
                    this.dimensionParamDefaultValueInit((/** @type {?} */ (x)));
                }
                else {
                    ((/** @type {?} */ (x))).value = x.defaultValue;
                }
                this.paramDataItemsClone.push(x);
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    dimensionDataItemsInit() {
        /** @type {?} */
        let assignment = this.assignmentSerializer.deserialize(this.assignmentSerializer.serialize(this._assignment));
        if (assignment && assignment.dimensionInfo
            && assignment.dimensionInfo.definition
            && assignment.dimensionInfo.definition.dimensionItems) {
            this.dimensionItemDatas = [];
            assignment.dimensionInfo.definition.dimensionItems.forEach((/**
             * @param {?} dimensionData
             * @return {?}
             */
            dimensionData => {
                this.dimensionItemDatas.push((/** @type {?} */ (dimensionData)));
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    createParamDataUiComponent() {
        this.paramDataPanel.clear();
        /** @type {?} */
        const factory = this.resolver.resolveComponentFactory(UbccParamDataUiComponent);
        /** @type {?} */
        let cmpRef = this.paramDataPanel.createComponent(factory);
        cmpRef.instance.canEdit = this.canEdit;
        cmpRef.instance.template = this.template;
        cmpRef.instance.paramDataItems = this.paramDataItems;
        this.currentInstance = cmpRef.instance;
    }
    /**
     * @private
     * @return {?}
     */
    createDimensionRootUiComponent() {
        this.paramDataPanel.clear();
        /** @type {?} */
        const factory = this.resolver.resolveComponentFactory(UbccParamDimensionUiRootComponent);
        /** @type {?} */
        let cmpRef = this.paramDataPanel.createComponent(factory);
        cmpRef.instance.canEdit = this.canEdit;
        cmpRef.instance.dimensionItemDatas = this.dimensionItemDatas;
        cmpRef.instance.paramDataItems = this.paramDataItems;
        cmpRef.instance.template = this.template;
        this.currentInstance = cmpRef.instance;
    }
    /**
     * @return {?}
     */
    convertDimensionDataToDataVo() {
        if (!this.dimensionItemDatas) {
            return null;
        }
        /** @type {?} */
        let dimensionValues = new Array();
        this.dimensionItemDatas.map((/**
         * @param {?} x
         * @return {?}
         */
        x => {
            /** @type {?} */
            let dimensionValue = new DataItem();
            dimensionValue.dataCode = x.code;
            dimensionValue.dataValue = ((/** @type {?} */ (x))).value;
            dimensionValue.dataType = this.getDimensionValueType(x.dataType);
            dimensionValues.push(dimensionValue);
        }));
        return dimensionValues;
    }
    /**
     * @return {?}
     */
    convertParamDataToDataVo() {
        if (!this.paramDataItems) {
            return null;
        }
        /** @type {?} */
        let paramValues = new Array();
        this.paramDataItems.map((/**
         * @param {?} x
         * @return {?}
         */
        x => {
            /** @type {?} */
            let paramValue = new DataItem();
            paramValue.dataCode = x.code;
            paramValue.dataValue = ((/** @type {?} */ (x))).value;
            paramValue.dataType = this.getParamValueType(((/** @type {?} */ (x))).parameterType);
            paramValues.push(paramValue);
        }));
        this.paramValuesClone(this.paramDataItemsClone, this.paramDataItems);
        return paramValues;
    }
    /**
     * @private
     * @param {?} dataType
     * @return {?}
     */
    getDimensionValueType(dataType) {
        /** @type {?} */
        let kind = dataType.getKind();
        switch (kind) {
            case DataTypeConst.DEFAULT_PRIMITIVE:
                return `${DataTypeConst.DEFAULT_PRIMITIVE}.${((/** @type {?} */ (dataType))).primitiveTypeKind}`;
            case DataTypeConst.DEFAULT_ENUMERATION:
                return DataTypeConst.DEFAULT_ENUMERATION;
            case DataTypeExtensionConst.HELP_TYPE:
                return DataTypeExtensionConst.HELP_TYPE + `##${((/** @type {?} */ (dataType))).helpId}`;
            default:
                throw new Error(`业务参数不支持的参数类型${kind}`);
        }
    }
    /**
     * @private
     * @param {?} dataType
     * @return {?}
     */
    getParamValueType(dataType) {
        /** @type {?} */
        let kind = dataType.getKind();
        switch (kind) {
            case DataTypeConst.DEFAULT_COLLECTION:
                /** @type {?} */
                let elemetType = ((/** @type {?} */ (dataType))).elementType;
                return `${DataTypeConst.DEFAULT_COLLECTION}.` + this.getParamValueType(elemetType);
            case DataTypeConst.DEFAULT_PRIMITIVE:
                return `${DataTypeConst.DEFAULT_PRIMITIVE}.${PrimitiveTypeKind[((/** @type {?} */ (dataType))).primitiveTypeKind]}`;
            case DataTypeExtensionConst.UBCC_STRUCTURE_TYPE_REF:
                /** @type {?} */
                let refType = (/** @type {?} */ (dataType));
                return refType.type === StructureTypeRefEnum.HELP ? DataTypeExtensionConst.HELP_TYPE + `##${refType.refId}` : DataTypeConst.DEFAULT_ENUMERATION;
            default:
                throw new Error(`业务参数不支持的参数类型${kind}`);
        }
    }
    /**
     * @return {?}
     */
    cancel() {
        this.paramValuesClone(this.paramDataItems, this.paramDataItemsClone);
        this.currentInstance.paramDataItems = this.paramDataItems;
    }
}
UbccParamDataUiRootComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-ubcc-param-data-ui-root',
                template: "<div class=\"col-12\">\r\n    <ng-template #paramDataPanel></ng-template>\r\n    <!-- <lib-ubcc-param-data-ui *ngIf=\"show()=='paramUi'\"\r\n        [canEdit]=\"canEdit\" \r\n        [(template)]=\"template\" \r\n        [(paramDataItems)]=\"paramDataItems\">\r\n    </lib-ubcc-param-data-ui>\r\n    <lib-ubcc-param-dimension-ui-root  *ngIf=\"show()=='dimensionUi'\"\r\n        [canEdit]=\"canEdit\" \r\n        [(template)]=\"template\" \r\n        [(paramDataItems)]=\"paramDataItems\" \r\n        [(dimensionItemDatas)]=\"dimensionItemDatas\">\r\n    </lib-ubcc-param-dimension-ui-root> -->\r\n</div>",
                providers: [UbccEventBusService],
                styles: [":host{display:flex;flex-direction:column;flex:1}"]
            }] }
];
/** @nocollapse */
UbccParamDataUiRootComponent.ctorParameters = () => [
    { type: UbccParamDataUtils },
    { type: UbccEventBusService },
    { type: UbccParamDataManangerService },
    { type: ComponentFactoryResolver }
];
UbccParamDataUiRootComponent.propDecorators = {
    assignment: [{ type: Input }],
    canEdit: [{ type: Input }],
    paramDataPanel: [{ type: ViewChild, args: ['paramDataPanel', { read: ViewContainerRef },] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/lookup-http-service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LookUpHttpService {
    /**
     * @param {?} http
     * @param {?} cache
     */
    constructor(http, cache) {
        this.http = http;
        this.cache = cache;
        this.httpHeaders = new HttpHeaders().set("sessionid", this.cache.getUserSessionId());
        this.httpHeaders = new HttpHeaders();
        this.httpHeaders.set("sessionid", this.cache.getUserSessionId());
    }
    /**
     * @param {?} uri
     * @param {?=} params
     * @return {?}
     */
    getData(uri, params) {
        if (uri.includes('{helpId}')) {
            return of(null);
        }
        /** @type {?} */
        let queryParam = JSON.stringify(params);
        /** @type {?} */
        let url = `${uri}?queryParam=${encodeURIComponent(queryParam)}`;
        return this.http.get(url, { headers: this.httpHeaders });
    }
}
LookUpHttpService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
LookUpHttpService.ctorParameters = () => [
    { type: HttpClient },
    { type: SessionService }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/common/look-up-binding-fields.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LookUpBindingFields {
    constructor() {
        this.displayType = 'List';
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/dimension-control/dimension-lookup-control/dimension-lookup-control.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const BCC_HELP_URL = `/api/runtime/bcc/v1.0/param/help/{helpId}`;
class DimensionLookupControlComponent {
    /**
     * @param {?} metadataRTService
     * @param {?} ebsService
     */
    constructor(metadataRTService, ebsService) {
        this.metadataRTService = metadataRTService;
        this.ebsService = ebsService;
        this.isSingleSelect = true;
        this.isHelpInfoLoad = false;
        this.helpUrl = BCC_HELP_URL;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.dimensionItem = this.dimensionItem || {};
        this.bindingFields = this.bindingFields || new LookUpBindingFields();
        this.helpConfigInit();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.helpConfigInit();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    selectedHelpHandler($event) {
        if (!$event) {
            return;
        }
        this.dimensionItem.value = '';
        this.dimensionItem.value = $event[this.bindingFields.idField];
        this.ebsService.ebs.emit(this.dimensionItem);
    }
    /**
     * @private
     * @return {?}
     */
    helpConfigInit() {
        if (this.isHelpInfoLoad || !this.dimensionItem || !this.dimensionItem.dataType) {
            return;
        }
        /** @type {?} */
        let helpType = (/** @type {?} */ (this.dimensionItem.dataType));
        this.loadDataFromMetadata(helpType);
    }
    /**
     * @private
     * @param {?} helpType
     * @return {?}
     */
    loadDataFromMetadata(helpType) {
        if (!helpType.helpId) {
            return;
        }
        this.metadataRTService.GetMetadataRT(helpType.helpId).subscribe((/**
         * @param {?} metadataDto
         * @return {?}
         */
        (metadataDto) => {
            /** @type {?} */
            let helpMetadata = JSON.parse(metadataDto.content);
            this.setHelpInfo(helpMetadata);
            this.isHelpInfoLoad = true;
        }));
    }
    /**
     * @param {?} helpMetadata
     * @return {?}
     */
    setHelpInfo(helpMetadata) {
        this.helpUrl = BCC_HELP_URL.replace('{helpId}', helpMetadata.id);
        this.bindingFields.idField = helpMetadata.idField;
        this.bindingFields.textField = helpMetadata.textField;
        this.bindingFields.valueField = helpMetadata.valueField;
        this.bindingFields.displayType = helpMetadata.displayType;
    }
}
DimensionLookupControlComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-dimension-lookup-control',
                template: "<div class=\"farris-form-controls-inline farris-group-wrap col-12\">\n  <div class=\"form-group farris-form-group\">\n    <label class=\"col-form-label col-4\">\n      <span class=\"farris-label-text\" style=\"float:right\">{{dimensionItem.name}}</span>\n    </label>\n    <div class=\"farris-input-wrap col-6\">\n      <farris-lookup-grid [editable]=\"false\" (selectedData)=\"selectedHelpHandler($event)\" [uri]=\"helpUrl\" [idField]=\"bindingFields.idField\"\n        [textField]=\"bindingFields.textField\" [valueField]=\"bindingFields.valueField\" [enableClear]=\"false\" \n        [(ngModel)]=\"dimensionItem.valueText\" name=\"{{dimensionItem.code}}\"\n        [displayType]=\"bindingFields.displayType\" [pagination]=\"true\" [singleSelect]=\"isSingleSelect\" required>\n      </farris-lookup-grid>\n    </div>\n  </div>\n</div>",
                providers: [{ provide: ServerSideToken, useClass: LookUpHttpService }, GSPMetadataRTService],
                styles: [""]
            }] }
];
/** @nocollapse */
DimensionLookupControlComponent.ctorParameters = () => [
    { type: GSPMetadataRTService },
    { type: UbccEventBusService }
];
DimensionLookupControlComponent.propDecorators = {
    dimensionItem: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/dimension-control/dimension-dropdownlist-control/dimension-dropdownlist-control.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DimensionDropdownlistControlComponent {
    /**
     * @param {?} ebsService
     */
    constructor(ebsService) {
        this.ebsService = ebsService;
        this.valueChangeEmit = new EventEmitter();
        this.enumerationItems = [];
        this.isMultiSelect = false;
        this.isEnumInfoLoad = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.dimensionItem = this.dimensionItem || {};
        if (!this.isEnumInfoLoad) {
            this.enumConfigInit();
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!this.isEnumInfoLoad) {
            this.enumConfigInit();
        }
    }
    /**
     * @return {?}
     */
    enumConfigInit() {
        this.getEnumItems();
    }
    /**
     * @return {?}
     */
    getEnumItems() {
        if (!this.dimensionItem || !this.dimensionItem.dataType) {
            return;
        }
        /** @type {?} */
        let enumType = (/** @type {?} */ (this.dimensionItem.dataType));
        this.get(enumType);
    }
    /**
     * @param {?} enumType
     * @return {?}
     */
    get(enumType) {
        if (!enumType || !enumType.enumerationItems) {
            return;
        }
        enumType.enumerationItems.map((/**
         * @param {?} x
         * @return {?}
         */
        x => this.enumerationItems.push(x)));
        this.isEnumInfoLoad = true;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    valueChangeHandler($event) {
        this.dimensionItem.value = $event.value;
        this.ebsService.ebs.emit(this.dimensionItem);
    }
}
DimensionDropdownlistControlComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-dimension-dropdownlist-control',
                template: "<div class=\"farris-form-controls-inline farris-group-wrap col-12\">\n    <div class=\"form-group farris-form-group\">\n      <label class=\"col-form-label col-4\">\n        <span class=\"farris-label-text\" style=\"float:right\">{{dimensionItem.name}}</span>\n      </label>\n      <div class=\"farris-input-wrap col-6\">\n        <farris-combo-list [idField]=\"'code'\" [textField]=\"'description'\" [data]=\"enumerationItems\" [multiSelect]=\"isMultiSelect\"\n          (valueChange)=\"valueChangeHandler($event)\">\n        </farris-combo-list>\n      </div>\n    </div>\n  </div>",
                styles: [""]
            }] }
];
/** @nocollapse */
DimensionDropdownlistControlComponent.ctorParameters = () => [
    { type: UbccEventBusService }
];
DimensionDropdownlistControlComponent.propDecorators = {
    dimensionItem: [{ type: Input }],
    valueChangeEmit: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/dimension-control/dimension-input-control/dimension-input-control.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DimensionInputControlComponent {
    /**
     * @param {?} ebsService
     */
    constructor(ebsService) {
        this.ebsService = ebsService;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.dimensionItem = this.dimensionItem || {};
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    ngModelChangeHandler($event) {
        this.ebsService.ebs.emit(this.dimensionItem);
    }
}
DimensionInputControlComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-dimension-input-control',
                template: "<div class=\"farris-form-controls-inline farris-group-wrap col-12\">\n  <div class=\"form-group farris-form-group\">\n    <label class=\"col-form-label col-4\">\n      <span class=\"farris-label-text\" style=\"float:right\">{{dimensionItem.name}}</span>\n    </label>\n    <div class=\"farris-input-wrap col-6\">\n      <input type=\"text\" class=\"form-control\" placeholder=\"\u8BF7\u8F93\u5165\" autocomplete=\"off\" (ngModelChange)=\"ngModelChangeHandler($event)\"\n      [(ngModel)]=\"dimensionItem.value\" name=\"dimensionItem{{dimensionItem.code}}\">\n    </div>\n  </div>\n</div>",
                providers: [UbccEventBusService],
                styles: [""]
            }] }
];
/** @nocollapse */
DimensionInputControlComponent.ctorParameters = () => [
    { type: UbccEventBusService }
];
DimensionInputControlComponent.propDecorators = {
    dimensionItem: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/param-control/checkbox-control/checkbox-control.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CheckboxControlComponent {
    /**
     * @param {?} service
     */
    constructor(service) {
        this.service = service;
        this.canEdit = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.param = this.param || {};
        this.checkboxId = this.service.newGuid();
    }
    /**
     * @return {?}
     */
    getValue() {
        if (!this.param || !this.param.value) {
            return false;
        }
        /** @type {?} */
        let value = String(this.param.value).toLowerCase();
        return value === 'true' ? true : false;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    enable(value) {
        this.param.value = value;
    }
    /**
     * @return {?}
     */
    isReadonly() {
        if (!this.canEdit) {
            return true;
        }
        else {
            return !this.param || !this.param.readonly ? false : true;
        }
    }
    /**
     * @return {?}
     */
    show() {
        return !this.param || !this.param.description ? false : true;
    }
}
CheckboxControlComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-checkbox-control',
                template: "<div class=\"farris-form-controls-inline farris-group-wrap col-12\">\n  <div class=\"form-group farris-form-group\">\n    <label class=\"col-form-label col-4\">\n      <span class=\"farris-label-text\" style=\"float:right\">{{param.name}}</span>\n    </label>\n    <div class=\"farris-input-wrap col-6\">\n      <div class=\"custom-control custom-checkbox\">\n        <input [checked]=\"getValue()\" class=\"custom-control-input\" id=\"{{checkboxId}}Checkbox\" \n          type=\"checkbox\" (click)=\"enable($event.target.checked)\" [disabled]=\"isReadonly()\">\n        <label class=\"custom-control-label\" for=\"{{checkboxId}}Checkbox\"></label>\n      </div>\n    </div>\n    <span *ngIf=\"show()\" farrisTooltip [placement]=\"'right-top'\" [content]=\"param.description\" class=\"f-icon f-icon-info\"></span>\n  </div>\n</div>",
                styles: [""]
            }] }
];
/** @nocollapse */
CheckboxControlComponent.ctorParameters = () => [
    { type: UbccParamDataUtils }
];
CheckboxControlComponent.propDecorators = {
    param: [{ type: Input }],
    canEdit: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/param-control/input-control/input-control.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class InputControlComponent {
    constructor() {
        this.canEdit = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.param = this.param || {};
    }
    /**
     * @return {?}
     */
    isReadonly() {
        if (!this.canEdit) {
            return true;
        }
        else {
            return !this.param || !this.param.readonly ? false : true;
        }
    }
    /**
     * @return {?}
     */
    show() {
        return !this.param || !this.param.description ? false : true;
    }
}
InputControlComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-input-control',
                template: "<div class=\"farris-form-controls-inline farris-group-wrap col-12\">\n  <div class=\"form-group farris-form-group\">\n    <label class=\"col-form-label col-4\">\n      <span class=\"farris-label-text\" style=\"float:right\">{{param.name}}</span>\n    </label>\n    <div class=\"farris-input-wrap col-6\">\n      <input-group type=\"text\" placeholder=\"\u8BF7\u8F93\u5165\" [readonly]=\"isReadonly()\" autocomplete=\"off\" [(value)]=\"param.value\"></input-group>\n    </div>\n    <span *ngIf=\"show()\" farrisTooltip [placement]=\"'right-top'\" [content]=\"param.description\" class=\"f-icon f-icon-info\"></span>\n  </div>\n</div>",
                styles: [""]
            }] }
];
/** @nocollapse */
InputControlComponent.ctorParameters = () => [];
InputControlComponent.propDecorators = {
    param: [{ type: Input }],
    canEdit: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/param-control/date-control/date-control.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DateControlComponent {
    constructor() {
        this.canEdit = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.param = this.param || {};
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    dateTimeValueChange($event) {
        this.param.value = $event.jsDate;
    }
    /**
     * @return {?}
     */
    isReadonly() {
        if (!this.canEdit) {
            return true;
        }
        else {
            return !this.param || !this.param.readonly ? false : true;
        }
    }
    /**
     * @return {?}
     */
    show() {
        return !this.param || !this.param.description ? false : true;
    }
}
DateControlComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-date-control',
                template: "<div class=\"farris-form-controls-inline farris-group-wrap col-12\">\n  <div class=\"form-group farris-form-group\">\n    <label class=\"col-form-label col-4\">\n      <span class=\"farris-label-text\" style=\"float:right\">{{param.name}}</span>\n    </label>\n    <div class=\"farris-input-wrap col-6\">\n      <farris-datepicker [editable]=\"false\" [readonly]=\"isReadonly()\" [(ngModel)]=\"param.value\" name=\"{{param.code}}\" (valueChange)=\"dateTimeValueChange($event)\">\n      </farris-datepicker>\n    </div>\n    <span *ngIf=\"show()\" farrisTooltip [placement]=\"'right-top'\" [content]=\"param.description\" class=\"f-icon f-icon-info\"></span>\n  </div>\n</div>",
                styles: [""]
            }] }
];
/** @nocollapse */
DateControlComponent.ctorParameters = () => [];
DateControlComponent.propDecorators = {
    param: [{ type: Input }],
    canEdit: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/param-control/dropdownlist-control/dropdownlist-control.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DropdownlistControlComponent {
    constructor() {
        this.canEdit = true;
        this.enumerationItems = [];
        this.isMultiSelect = false;
        this.isEnumInfoLoad = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.param = this.param || {};
        this.template = this.template || new UbccParamTemplate();
        if (!this.isEnumInfoLoad) {
            this.enumConfigInit();
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!this.isEnumInfoLoad) {
            this.enumConfigInit();
        }
    }
    /**
     * @return {?}
     */
    enumConfigInit() {
        this.isMultiSelect = this.isCollection();
        this.getEnumItems();
    }
    /**
     * @return {?}
     */
    getEnumItems() {
        if (!this.param || !this.param.parameterType || !this.template.structuredTypes) {
            return;
        }
        if (this.param.parameterType.kind === DataTypeConst.DEFAULT_COLLECTION) {
            /** @type {?} */
            let elementType = this.getCollectionElementType(this.param.parameterType);
            this.get(elementType);
        }
        else if (this.param.parameterType.kind === DataTypeExtensionConst.UBCC_STRUCTURE_TYPE_REF) {
            /** @type {?} */
            let typeRef = (/** @type {?} */ (this.param.parameterType));
            this.get(typeRef);
        }
        else {
            throw new Error(`枚举不支持的参数类型${this.param.parameterType.kind}`);
        }
    }
    /**
     * @param {?} refType
     * @return {?}
     */
    get(refType) {
        /** @type {?} */
        let enumType = (/** @type {?} */ (this.template.structuredTypes.find((/**
         * @param {?} x
         * @return {?}
         */
        x => x.id === refType.refId))));
        if (!enumType || !enumType.enumerationItems) {
            return;
        }
        enumType.enumerationItems.map((/**
         * @param {?} x
         * @return {?}
         */
        x => this.enumerationItems.push(x)));
        this.isEnumInfoLoad = true;
    }
    /**
     * @param {?} dataType
     * @return {?}
     */
    getCollectionElementType(dataType) {
        /** @type {?} */
        let kind = dataType.getKind();
        switch (kind) {
            case DataTypeConst.DEFAULT_COLLECTION:
                /** @type {?} */
                let elementType = ((/** @type {?} */ (dataType))).elementType;
                return this.getCollectionElementType(elementType);
            default:
                return dataType;
        }
    }
    /**
     * @return {?}
     */
    isCollection() {
        if (!this.param || !this.param.parameterType) {
            return false;
        }
        if (this.param.parameterType.getKind() === DataTypeConst.DEFAULT_COLLECTION) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    valueChangeHandler($event) {
        this.param.value = $event.value;
    }
    /**
     * @return {?}
     */
    isReadonly() {
        if (!this.canEdit) {
            return true;
        }
        else {
            return !this.param || !this.param.readonly ? false : true;
        }
    }
    /**
     * @return {?}
     */
    show() {
        return !this.param || !this.param.description ? false : true;
    }
}
DropdownlistControlComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-dropdownlist-control',
                template: "<div class=\"farris-form-controls-inline farris-group-wrap col-12\">\n  <div class=\"form-group farris-form-group\">\n    <label class=\"col-form-label col-4\">\n      <span class=\"farris-label-text\" style=\"float:right\">{{param.name}}</span>\n    </label>\n    <div class=\"farris-input-wrap col-6\">\n      <farris-combo-list [idField]=\"'code'\" [textField]=\"'description'\" [data]=\"enumerationItems\" [multiSelect]=\"isMultiSelect\"\n        (valueChange)=\"valueChangeHandler($event)\" [readonly]=\"isReadonly()\" [(ngModel)]=\"param.value\" name=\"{{param.code}}\">\n      </farris-combo-list>\n    </div>\n    <span *ngIf=\"show()\" farrisTooltip [placement]=\"'right-top'\" [content]=\"param.description\" class=\"f-icon f-icon-info\"></span>\n  </div>\n</div>",
                styles: [""]
            }] }
];
/** @nocollapse */
DropdownlistControlComponent.ctorParameters = () => [];
DropdownlistControlComponent.propDecorators = {
    param: [{ type: Input }],
    template: [{ type: Input }],
    canEdit: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/param-control/lookup-control/lookup-control.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const BCC_HELP_URL$1 = `/api/runtime/bcc/v1.0/param/help/{helpId}`;
class LookupControlComponent {
    /**
     * @param {?} metadataRTService
     */
    constructor(metadataRTService) {
        this.metadataRTService = metadataRTService;
        this.canEdit = true;
        this.isSingleSelect = true;
        this.isHelpInfoLoad = false;
        this.helpUrl = BCC_HELP_URL$1;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.param = this.param || {};
        this.bindingFields = this.bindingFields || new LookUpBindingFields();
        this.helpConfigInit();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.helpConfigInit();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    selectedHelpHandler($event) {
        if (!$event) {
            return;
        }
        this.param.value = '';
        this.param.valueText = '';
        if (this.isCollection()) {
            if ($event.length <= 0) {
                return;
            }
            $event.map((/**
             * @param {?} selectItem
             * @param {?} index
             * @return {?}
             */
            (selectItem, index) => {
                this.param.value = this.param.value + (index > 0 ? `,${selectItem[this.bindingFields.idField]}` : selectItem[this.bindingFields.idField]);
                this.param.valueText = this.param.valueText + (index > 0 ? `,${selectItem[this.bindingFields.textField]}` : selectItem[this.bindingFields.textField]);
            }));
        }
        else {
            this.param.value = $event[this.bindingFields.idField];
            this.param.valueText = $event[this.bindingFields.textField];
        }
    }
    /**
     * @private
     * @return {?}
     */
    helpConfigInit() {
        if (this.isHelpInfoLoad || !this.param || !this.param.parameterType) {
            return;
        }
        if (this.param.parameterType.kind === DataTypeConst.DEFAULT_COLLECTION) {
            this.isSingleSelect = false;
            /** @type {?} */
            let elementType = (/** @type {?} */ (this.getCollectionElementType(this.param.parameterType)));
            this.loadDataFromMetadata(elementType);
        }
        else if (this.param.parameterType.kind === DataTypeExtensionConst.UBCC_STRUCTURE_TYPE_REF) {
            this.isSingleSelect = true;
            /** @type {?} */
            let typeRef = (/** @type {?} */ (this.param.parameterType));
            this.loadDataFromMetadata(typeRef);
        }
        else {
            throw new Error(`帮助不支持的参数类型${this.param.parameterType.kind}`);
        }
    }
    /**
     * @private
     * @param {?} refType
     * @return {?}
     */
    loadDataFromMetadata(refType) {
        if (!refType.refId) {
            return;
        }
        this.metadataRTService.GetMetadataRT(refType.refId).subscribe((/**
         * @param {?} metadataDto
         * @return {?}
         */
        (metadataDto) => {
            /** @type {?} */
            let helpMetadata = JSON.parse(metadataDto.content);
            this.setHelpInfo(helpMetadata);
            this.isHelpInfoLoad = true;
        }));
    }
    /**
     * @param {?} helpMetadata
     * @return {?}
     */
    setHelpInfo(helpMetadata) {
        this.helpUrl = BCC_HELP_URL$1.replace('{helpId}', helpMetadata.id);
        this.bindingFields.idField = helpMetadata.idField;
        this.bindingFields.textField = helpMetadata.textField;
        this.bindingFields.valueField = helpMetadata.valueField;
        this.bindingFields.displayType = helpMetadata.displayType;
    }
    /**
     * @private
     * @param {?} dataType
     * @return {?}
     */
    getCollectionElementType(dataType) {
        /** @type {?} */
        let kind = dataType.getKind();
        switch (kind) {
            case DataTypeConst.DEFAULT_COLLECTION:
                /** @type {?} */
                let elementType = ((/** @type {?} */ (dataType))).elementType;
                return this.getCollectionElementType(elementType);
            default:
                return dataType;
        }
    }
    /**
     * @return {?}
     */
    isCollection() {
        if (!this.param || !this.param.parameterType) {
            return false;
        }
        if (this.param.parameterType.getKind() === DataTypeConst.DEFAULT_COLLECTION) {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @return {?}
     */
    isReadonly() {
        if (!this.canEdit) {
            return true;
        }
        else {
            return !this.param || !this.param.readonly ? false : true;
        }
    }
    /**
     * @return {?}
     */
    show() {
        return !this.param || !this.param.description ? false : true;
    }
}
LookupControlComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-lookup-control',
                template: "<div class=\"farris-form-controls-inline farris-group-wrap col-12\">\n  <div class=\"form-group farris-form-group\">\n    <label class=\"col-form-label col-4\">\n      <span class=\"farris-label-text\" style=\"float:right\">{{param.name}}</span>\n    </label>\n    <div class=\"farris-input-wrap col-6\">\n      <farris-lookup-grid [editable]=\"false\" [readonly]=\"isReadonly()\" (selectedData)=\"selectedHelpHandler($event)\" [uri]=\"helpUrl\" [idField]=\"bindingFields.idField\"\n        [textField]=\"bindingFields.textField\" [valueField]=\"bindingFields.valueField\" [enableClear]=\"false\" [displayType]=\"bindingFields.displayType\"\n        [(ngModel)]=\"param.valueText\" name=\"{{param.code}}\" [pagination]=\"true\" [singleSelect]=\"isSingleSelect\">\n      </farris-lookup-grid>\n    </div>\n     <span *ngIf=\"show()\" farrisTooltip [placement]=\"'right-top'\" [content]=\"param.description\" class=\"f-icon f-icon-info\"></span>\n  </div>\n</div>",
                providers: [{ provide: ServerSideToken, useClass: LookUpHttpService }, GSPMetadataRTService],
                styles: [""]
            }] }
];
/** @nocollapse */
LookupControlComponent.ctorParameters = () => [
    { type: GSPMetadataRTService }
];
LookupControlComponent.propDecorators = {
    param: [{ type: Input }],
    template: [{ type: Input }],
    canEdit: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/controls/param-control/number-control/number-control.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NumberControlComponent {
    constructor() {
        this.canEdit = true;
        this.precision = 0;
        this.max = NaN;
        this.min = NaN;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.param = this.param || {};
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.param = this.param || {};
        if (this.param && this.param.constraint) {
            this.max = Number(this.param.constraint.max) || NaN;
            this.min = Number(this.param.constraint.min) || NaN;
            this.precision = Number(this.param.constraint.precision) || 0;
        }
    }
    /**
     * @return {?}
     */
    isReadonly() {
        if (!this.canEdit) {
            return true;
        }
        else {
            return !this.param || !this.param.readonly ? false : true;
        }
    }
    /**
     * @return {?}
     */
    getUnit() {
        if (!this.param || !this.param.constraint || !this.param.constraint.unit) {
            return '';
        }
        else {
            return `(单位:${this.param.constraint.unit})`;
        }
    }
    /**
     * @return {?}
     */
    show() {
        return !this.param || !this.param.description ? false : true;
    }
}
NumberControlComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-number-control',
                template: "<div class=\"farris-form-controls-inline farris-group-wrap col-12\">\n  <div class=\"form-group farris-form-group\">\n    <label class=\"col-form-label col-4\">\n      <span class=\"farris-label-text\" style=\"float:right\">{{param.name}}{{getUnit()}}</span>\n    </label>\n    <div class=\"farris-input-wrap col-6\">\n      <farris-number-spinner [editable]=\"true\" [max]=\"max\" [min]=\"min\" [precision]=\"precision\" [readonly]=\"isReadonly()\" [(ngModel)]=\"param.value\" name=\"{{param.code}}\"></farris-number-spinner>\n    </div>\n    <span *ngIf=\"show()\" farrisTooltip [placement]=\"'right-top'\" [content]=\"param.description\" class=\"f-icon f-icon-info\"></span>\n  </div>\n</div>",
                styles: [""]
            }] }
];
/** @nocollapse */
NumberControlComponent.ctorParameters = () => [];
NumberControlComponent.propDecorators = {
    param: [{ type: Input }],
    canEdit: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ubcc-param-data-ui.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UbccParamDataUiService {
    /**
     * @param {?} resolver
     * @param {?} injector
     * @param {?} util
     * @param {?} modalService
     */
    constructor(resolver, injector, util, modalService) {
        this.resolver = resolver;
        this.injector = injector;
        this.util = util;
        this.modalService = modalService;
    }
    /**
     * @param {?} templateId
     * @param {?} paramData
     * @return {?}
     */
    show(templateId, paramData) {
        return this.create(templateId, paramData);
    }
    /**
     * @private
     * @param {?} templateId
     * @param {?} data
     * @return {?}
     */
    create(templateId, data) {
        /** @type {?} */
        let fac = this.resolver.resolveComponentFactory(UbccParamDataUiDialogComponent);
        /** @type {?} */
        let cmpRef = fac.create(this.injector);
        /** @type {?} */
        let modalConfig = this.util.getModalConfig(cmpRef.instance.btnRef);
        /** @type {?} */
        let dialog = this.modalService.show(cmpRef, modalConfig);
        cmpRef.instance.dialog = dialog;
        cmpRef.instance.templateId = templateId;
        cmpRef.instance.data = data;
        return { confirmEvent: cmpRef.instance.confirmEmitter, closeEvent: cmpRef.instance.closeEmitter, close: cmpRef.instance.close };
    }
}
UbccParamDataUiService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
UbccParamDataUiService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: UbccParamDataUtils },
    { type: BsModalService }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ubcc-param-dimension-ui/ubcc-param-dimension-ui.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UbccParamDimensionUiComponent {
    constructor() {
        this.dimensionItemDatas = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} dimensionItem
     * @return {?}
     */
    getControlType(dimensionItem) {
        if (!dimensionItem || !dimensionItem.dataType || !dimensionItem.dataType.getKind()) {
            return;
        }
        /** @type {?} */
        let kind = dimensionItem.dataType.getKind();
        switch (kind) {
            case DataTypeConst.DEFAULT_PRIMITIVE:
                return 'input';
            case DataTypeConst.DEFAULT_ENUMERATION:
                return 'dropdownlist';
            case DataTypeExtensionConst.HELP_TYPE:
                return 'lookup';
            default:
                return 'input';
        }
    }
}
UbccParamDimensionUiComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-ubcc-param-dimension-ui',
                template: "<farris-section [mainTitle]=\"'\u7EF4\u5EA6\u4FE1\u606F'\" [enableMaximize]=\"false\">\n  <div *ngFor=\"let item of dimensionItemDatas;let i=index;\" style=\"margin-top: 10px;\">\n    <div class=\"col-12\" [ngSwitch]=\"getControlType(dimensionItemDatas[i])\">\n      <lib-dimension-dropdownlist-control *ngSwitchCase=\"'dropdownlist'\" [(dimensionItem)]=\"dimensionItemDatas[i]\"></lib-dimension-dropdownlist-control>\n      <lib-dimension-lookup-control *ngSwitchCase=\"'lookup'\" [(dimensionItem)]=\"dimensionItemDatas[i]\"></lib-dimension-lookup-control>\n      <lib-dimension-input-control *ngSwitchDefault [(dimensionItem)]=\"dimensionItemDatas[i]\"></lib-dimension-input-control>\n    </div>\n  </div>\n</farris-section>",
                encapsulation: ViewEncapsulation.None,
                styles: [":host{display:flex;flex-direction:column;flex:1}.f-section-header,lib-ubcc-param-dimension-ui .f-section-extend{margin:0 0 .25rem}"]
            }] }
];
/** @nocollapse */
UbccParamDimensionUiComponent.ctorParameters = () => [];
UbccParamDimensionUiComponent.propDecorators = {
    dimensionItemDatas: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ubcc-param-data-ui-root.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UbccParamDataUiRootModule {
}
UbccParamDataUiRootModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    UbccParamDataUiComponent,
                    InputControlComponent,
                    CheckboxControlComponent,
                    DateControlComponent,
                    DropdownlistControlComponent,
                    LookupControlComponent,
                    NumberControlComponent,
                    UbccParamDataUiDialogComponent,
                    UbccParamDataUiRootComponent,
                    DimensionLookupControlComponent,
                    DimensionDropdownlistControlComponent,
                    DimensionInputControlComponent,
                    UbccParamDimensionUiComponent,
                    UbccParamDimensionUiRootComponent
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    ReactiveFormsModule,
                    ButtonsModule,
                    InputGroupModule,
                    HttpClientModule,
                    LoadingModule.forRoot({
                        message: '请稍候...'
                    }),
                    NotifyModule.forRoot(),
                    ModalModule.forRoot(),
                    MessagerModule.forRoot(),
                    FarrisDialogModule,
                    LookupModule,
                    FarrisButtonModule,
                    FarrisDatePickerModule,
                    ComboListModule,
                    FarrisSectionModule,
                    NumberSpinnerModule,
                    FarrisTooltipModule,
                    FarrisPanelModule,
                    GSPMetadataRTServiceModule.forRoot(""),
                ],
                providers: [
                    FrameworkService,
                    HttpService,
                    SessionService,
                    CacheService,
                    FrmEventBus,
                    FuncsService,
                    LoadingService,
                    NotifyService,
                    UbccParamDataManangerService,
                    UbccParamDataUiService,
                    UbccParamDataUtils,
                    BsModalService
                ],
                entryComponents: [
                    UbccParamDataUiDialogComponent,
                    UbccParamDataUiComponent,
                    UbccParamDimensionUiComponent,
                    UbccParamDimensionUiRootComponent,
                    UbccParamDataUiRootComponent
                ],
                exports: [
                    UbccParamDataUiRootComponent,
                    UbccParamDataUiComponent,
                    UbccParamDataUiDialogComponent,
                    UbccParamDimensionUiComponent,
                    UbccParamDimensionUiRootComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/common/dialog-result.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DialogResult {
}

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: gsp-cmp-ubcc-param-data-ui.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { UbccParamDataUiComponent, UbccParamDataUiRootModule, UbccParamDataManangerService, UbccParamDataUiService, UbccParamDataUiRootComponent, UbccParamDimensionUiRootComponent, DialogResult, DimensionDropdownlistControlComponent as ɵl, DimensionInputControlComponent as ɵm, DimensionLookupControlComponent as ɵk, CheckboxControlComponent as ɵb, DateControlComponent as ɵd, DropdownlistControlComponent as ɵe, InputControlComponent as ɵa, LookupControlComponent as ɵf, NumberControlComponent as ɵh, UbccEventBusService as ɵj, LookUpHttpService as ɵg, UbccParamDataUiDialogComponent as ɵi, UbccParamDimensionUiComponent as ɵn, UbccParamDataUtils as ɵc };

//# sourceMappingURL=gsp-cmp-ubcc-param-data-ui.js.map