/**
 * @fileoverview added by tsickle
 * Generated from: lib/ubcc-param-data-ui-root.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, ViewContainerRef, ComponentFactoryResolver } from '@angular/core';
import { UbccParamTemplate, UbccParamTemplateAssignment, UbccParamTemplateSerializer, DataItem, DataTypeExtensionConst, StructureTypeRefEnum, UbccParamTemplateAssignmentSerializer } from '@gsp-cmp/ubcc-param-vo';
import { UbccParamDataManangerService } from './service/http-service';
import { UbccParamDataUiComponent } from './ubcc-param-data-ui/ubcc-param-data-ui.component';
import { UbccParamDimensionUiRootComponent } from './ubcc-param-dimension-ui-root/ubcc-param-dimension-ui-root.component';
import { DataTypeConst, PrimitiveTypeKind } from '@ecp-caf/common-structure';
import { UbccEventBusService } from './service/event-bus-service';
import { UbccParamDataUtils } from './utils/param-data-utils';
var UbccParamDataUiRootComponent = /** @class */ (function () {
    function UbccParamDataUiRootComponent(utils, ebsService, http, resolver) {
        var _this = this;
        this.utils = utils;
        this.ebsService = ebsService;
        this.http = http;
        this.resolver = resolver;
        this._canEdit = true;
        this.dimensionItemDatas = [];
        this.paramDataItems = [];
        this.paramDataItemsClone = [];
        this.templateSerializer = new UbccParamTemplateSerializer();
        this.assignmentSerializer = new UbccParamTemplateAssignmentSerializer();
        this.ebsService.ebs.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.loadDimensionDataFromRemote();
        }));
    }
    Object.defineProperty(UbccParamDataUiRootComponent.prototype, "assignment", {
        set: /**
         * @param {?} assignment
         * @return {?}
         */
        function (assignment) {
            this._assignment = assignment;
            this.loadData();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UbccParamDataUiRootComponent.prototype, "canEdit", {
        set: /**
         * @param {?} canEdit
         * @return {?}
         */
        function (canEdit) {
            this._canEdit = canEdit;
            if (this.currentInstance) {
                this.currentInstance.canEdit = this._canEdit;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    UbccParamDataUiRootComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this._assignment = this._assignment || new UbccParamTemplateAssignment();
        this.template = this.template || new UbccParamTemplate();
    };
    /**
     * @return {?}
     */
    UbccParamDataUiRootComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.paramDataPanel.clear();
    };
    /**
     * @private
     * @return {?}
     */
    UbccParamDataUiRootComponent.prototype.loadData = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        //参数,维度数据源初始化
        this.dimensionItemDatas = [];
        this.paramDataItems = [];
        this.paramDataItemsClone = [];
        if (!this._assignment || !this._assignment.templateId) {
            return;
        }
        this.http.getParamTemplate(this._assignment.templateId).subscribe((/**
         * @param {?} vo
         * @return {?}
         */
        function (vo) {
            if (!vo || !vo.content) {
                return;
            }
            /** @type {?} */
            var serializer = new UbccParamTemplateSerializer();
            _this.template = serializer.deserializer(JSON.parse(vo.content));
            _this.load();
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            throw err;
        }));
    };
    /**
     * @private
     * @return {?}
     */
    UbccParamDataUiRootComponent.prototype.load = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        //参数结构初始化，参数值为空
        this.paramDataItemsInit();
        //根据维度创建对应的UI组件
        if (this._assignment.useDimension) {
            //维度结构初始化，维度数据为空
            this.dimensionDataItemsInit();
            //创建维度UI组件，此处不取数，只渲染界面，在选择维度数据后再加载数据
            this.createDimensionRootUiComponent();
        }
        else {
            this.http.getParamData(this._assignment.templateId, this._assignment.bizTypeId).subscribe((/**
             * @param {?} dataItems
             * @return {?}
             */
            function (dataItems) {
                _this.getParamValues(dataItems);
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                throw err;
            }));
            //创建参数UI组件
            this.createParamDataUiComponent();
        }
    };
    /**
     * @private
     * @param {?} dataItems
     * @return {?}
     */
    UbccParamDataUiRootComponent.prototype.getParamValues = /**
     * @private
     * @param {?} dataItems
     * @return {?}
     */
    function (dataItems) {
        var _this = this;
        if (!dataItems || dataItems.length <= 0) {
            return;
        }
        this.paramDataItems.map((/**
         * @param {?} paramDataItem
         * @return {?}
         */
        function (paramDataItem) {
            /** @type {?} */
            var data = dataItems.find((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.dataCode === paramDataItem.code; }));
            if (data) {
                paramDataItem.value = data.dataValue;
                if (!_this.utils.isHelpType(paramDataItem.parameterType)) {
                    return;
                }
                paramDataItem.valueText = data.dataValueText || '';
                // 从前端获取帮助数据
                // this.getHelpData(data,paramDataItem);
            }
        }));
        this.paramValuesClone(this.paramDataItemsClone, this.paramDataItems);
    };
    /**
     * @private
     * @param {?} target
     * @param {?} source
     * @return {?}
     */
    UbccParamDataUiRootComponent.prototype.paramValuesClone = /**
     * @private
     * @param {?} target
     * @param {?} source
     * @return {?}
     */
    function (target, source) {
        if (source.length == 0 || target.length == 0 || target.length !== source.length) {
            return;
        }
        target.map((/**
         * @param {?} paramDataItemClone
         * @return {?}
         */
        function (paramDataItemClone) {
            /** @type {?} */
            var index = source.findIndex((/**
             * @param {?} x
             * @return {?}
             */
            function (x) { return x.code === paramDataItemClone.code; }));
            if (index !== (-1)) {
                paramDataItemClone.id = source[index].id;
                paramDataItemClone.value = source[index].value;
                paramDataItemClone.valueText = source[index].valueText;
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    UbccParamDataUiRootComponent.prototype.loadDimensionDataFromRemote = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.paramDataItemsInit();
        this.currentInstance.paramDataItems = this.paramDataItems;
        /** @type {?} */
        var dimensionItemValues = [];
        this.dimensionItemDatas.map((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return dimensionItemValues.push(x.value); }));
        /** @type {?} */
        var count = dimensionItemValues.length;
        if (count <= 0) {
            return;
        }
        if (count === 1) {
            if (!dimensionItemValues[0]) {
                return;
            }
        }
        if (count === 2) {
            if (!dimensionItemValues[0] || !dimensionItemValues[1]) {
                return;
            }
        }
        /** @type {?} */
        var dimension1 = dimensionItemValues[0] ? dimensionItemValues[0] : null;
        /** @type {?} */
        var dimension2 = dimensionItemValues[1] ? dimensionItemValues[1] : null;
        this.http.getDimensionData(this._assignment.templateId, this._assignment.bizTypeId, dimension1, dimension2, count).subscribe((/**
         * @param {?} dataItems
         * @return {?}
         */
        function (dataItems) {
            _this.getParamValues(dataItems);
        }));
    };
    /**
     * @private
     * @return {?}
     */
    UbccParamDataUiRootComponent.prototype.paramDataItemsInit = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var template = this.templateSerializer.deserializer(this.templateSerializer.serialize(this.template));
        this.paramDataItems = [];
        if (template && template.params) {
            template.params.map((/**
             * @param {?} x
             * @return {?}
             */
            function (x) {
                if (_this._assignment.useDimension) {
                    _this.dimensionParamDefaultValueInit((/** @type {?} */ (x)));
                }
                else {
                    ((/** @type {?} */ (x))).value = x.defaultValue;
                }
                _this.paramDataItems.push(x);
            }));
        }
        this.paramDataItemsCloneInit();
    };
    /**
     * @private
     * @param {?} paramData
     * @return {?}
     */
    UbccParamDataUiRootComponent.prototype.dimensionParamDefaultValueInit = /**
     * @private
     * @param {?} paramData
     * @return {?}
     */
    function (paramData) {
        /** @type {?} */
        var count = this.dimensionItemDatas.length;
        if (count <= 0) {
            return;
        }
        if (count === 1) {
            if (!this.dimensionItemDatas[0] || !this.dimensionItemDatas[0].value) {
                return;
            }
        }
        if (count === 2) {
            if (!this.dimensionItemDatas[0] || !this.dimensionItemDatas[1] || !this.dimensionItemDatas[0].value || !this.dimensionItemDatas[1].value) {
                return;
            }
        }
        paramData.value = paramData.defaultValue;
    };
    /**
     * @private
     * @return {?}
     */
    UbccParamDataUiRootComponent.prototype.paramDataItemsCloneInit = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var template = this.templateSerializer.deserializer(this.templateSerializer.serialize(this.template));
        this.paramDataItemsClone = [];
        if (template && template.params) {
            template.params.map((/**
             * @param {?} x
             * @return {?}
             */
            function (x) {
                if (_this._assignment.useDimension) {
                    _this.dimensionParamDefaultValueInit((/** @type {?} */ (x)));
                }
                else {
                    ((/** @type {?} */ (x))).value = x.defaultValue;
                }
                _this.paramDataItemsClone.push(x);
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    UbccParamDataUiRootComponent.prototype.dimensionDataItemsInit = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var assignment = this.assignmentSerializer.deserialize(this.assignmentSerializer.serialize(this._assignment));
        if (assignment && assignment.dimensionInfo
            && assignment.dimensionInfo.definition
            && assignment.dimensionInfo.definition.dimensionItems) {
            this.dimensionItemDatas = [];
            assignment.dimensionInfo.definition.dimensionItems.forEach((/**
             * @param {?} dimensionData
             * @return {?}
             */
            function (dimensionData) {
                _this.dimensionItemDatas.push((/** @type {?} */ (dimensionData)));
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    UbccParamDataUiRootComponent.prototype.createParamDataUiComponent = /**
     * @private
     * @return {?}
     */
    function () {
        this.paramDataPanel.clear();
        /** @type {?} */
        var factory = this.resolver.resolveComponentFactory(UbccParamDataUiComponent);
        /** @type {?} */
        var cmpRef = this.paramDataPanel.createComponent(factory);
        cmpRef.instance.canEdit = this.canEdit;
        cmpRef.instance.template = this.template;
        cmpRef.instance.paramDataItems = this.paramDataItems;
        this.currentInstance = cmpRef.instance;
    };
    /**
     * @private
     * @return {?}
     */
    UbccParamDataUiRootComponent.prototype.createDimensionRootUiComponent = /**
     * @private
     * @return {?}
     */
    function () {
        this.paramDataPanel.clear();
        /** @type {?} */
        var factory = this.resolver.resolveComponentFactory(UbccParamDimensionUiRootComponent);
        /** @type {?} */
        var cmpRef = this.paramDataPanel.createComponent(factory);
        cmpRef.instance.canEdit = this.canEdit;
        cmpRef.instance.dimensionItemDatas = this.dimensionItemDatas;
        cmpRef.instance.paramDataItems = this.paramDataItems;
        cmpRef.instance.template = this.template;
        this.currentInstance = cmpRef.instance;
    };
    /**
     * @return {?}
     */
    UbccParamDataUiRootComponent.prototype.convertDimensionDataToDataVo = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.dimensionItemDatas) {
            return null;
        }
        /** @type {?} */
        var dimensionValues = new Array();
        this.dimensionItemDatas.map((/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            /** @type {?} */
            var dimensionValue = new DataItem();
            dimensionValue.dataCode = x.code;
            dimensionValue.dataValue = ((/** @type {?} */ (x))).value;
            dimensionValue.dataType = _this.getDimensionValueType(x.dataType);
            dimensionValues.push(dimensionValue);
        }));
        return dimensionValues;
    };
    /**
     * @return {?}
     */
    UbccParamDataUiRootComponent.prototype.convertParamDataToDataVo = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.paramDataItems) {
            return null;
        }
        /** @type {?} */
        var paramValues = new Array();
        this.paramDataItems.map((/**
         * @param {?} x
         * @return {?}
         */
        function (x) {
            /** @type {?} */
            var paramValue = new DataItem();
            paramValue.dataCode = x.code;
            paramValue.dataValue = ((/** @type {?} */ (x))).value;
            paramValue.dataType = _this.getParamValueType(((/** @type {?} */ (x))).parameterType);
            paramValues.push(paramValue);
        }));
        this.paramValuesClone(this.paramDataItemsClone, this.paramDataItems);
        return paramValues;
    };
    /**
     * @private
     * @param {?} dataType
     * @return {?}
     */
    UbccParamDataUiRootComponent.prototype.getDimensionValueType = /**
     * @private
     * @param {?} dataType
     * @return {?}
     */
    function (dataType) {
        /** @type {?} */
        var kind = dataType.getKind();
        switch (kind) {
            case DataTypeConst.DEFAULT_PRIMITIVE:
                return DataTypeConst.DEFAULT_PRIMITIVE + "." + ((/** @type {?} */ (dataType))).primitiveTypeKind;
            case DataTypeConst.DEFAULT_ENUMERATION:
                return DataTypeConst.DEFAULT_ENUMERATION;
            case DataTypeExtensionConst.HELP_TYPE:
                return DataTypeExtensionConst.HELP_TYPE + ("##" + ((/** @type {?} */ (dataType))).helpId);
            default:
                throw new Error("\u4E1A\u52A1\u53C2\u6570\u4E0D\u652F\u6301\u7684\u53C2\u6570\u7C7B\u578B" + kind);
        }
    };
    /**
     * @private
     * @param {?} dataType
     * @return {?}
     */
    UbccParamDataUiRootComponent.prototype.getParamValueType = /**
     * @private
     * @param {?} dataType
     * @return {?}
     */
    function (dataType) {
        /** @type {?} */
        var kind = dataType.getKind();
        switch (kind) {
            case DataTypeConst.DEFAULT_COLLECTION:
                /** @type {?} */
                var elemetType = ((/** @type {?} */ (dataType))).elementType;
                return DataTypeConst.DEFAULT_COLLECTION + "." + this.getParamValueType(elemetType);
            case DataTypeConst.DEFAULT_PRIMITIVE:
                return DataTypeConst.DEFAULT_PRIMITIVE + "." + PrimitiveTypeKind[((/** @type {?} */ (dataType))).primitiveTypeKind];
            case DataTypeExtensionConst.UBCC_STRUCTURE_TYPE_REF:
                /** @type {?} */
                var refType = (/** @type {?} */ (dataType));
                return refType.type === StructureTypeRefEnum.HELP ? DataTypeExtensionConst.HELP_TYPE + ("##" + refType.refId) : DataTypeConst.DEFAULT_ENUMERATION;
            default:
                throw new Error("\u4E1A\u52A1\u53C2\u6570\u4E0D\u652F\u6301\u7684\u53C2\u6570\u7C7B\u578B" + kind);
        }
    };
    /**
     * @return {?}
     */
    UbccParamDataUiRootComponent.prototype.cancel = /**
     * @return {?}
     */
    function () {
        this.paramValuesClone(this.paramDataItems, this.paramDataItemsClone);
        this.currentInstance.paramDataItems = this.paramDataItems;
    };
    UbccParamDataUiRootComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-ubcc-param-data-ui-root',
                    template: "<div class=\"col-12\">\r\n    <ng-template #paramDataPanel></ng-template>\r\n    <!-- <lib-ubcc-param-data-ui *ngIf=\"show()=='paramUi'\"\r\n        [canEdit]=\"canEdit\" \r\n        [(template)]=\"template\" \r\n        [(paramDataItems)]=\"paramDataItems\">\r\n    </lib-ubcc-param-data-ui>\r\n    <lib-ubcc-param-dimension-ui-root  *ngIf=\"show()=='dimensionUi'\"\r\n        [canEdit]=\"canEdit\" \r\n        [(template)]=\"template\" \r\n        [(paramDataItems)]=\"paramDataItems\" \r\n        [(dimensionItemDatas)]=\"dimensionItemDatas\">\r\n    </lib-ubcc-param-dimension-ui-root> -->\r\n</div>",
                    providers: [UbccEventBusService],
                    styles: [":host{display:flex;flex-direction:column;flex:1}"]
                }] }
    ];
    /** @nocollapse */
    UbccParamDataUiRootComponent.ctorParameters = function () { return [
        { type: UbccParamDataUtils },
        { type: UbccEventBusService },
        { type: UbccParamDataManangerService },
        { type: ComponentFactoryResolver }
    ]; };
    UbccParamDataUiRootComponent.propDecorators = {
        assignment: [{ type: Input }],
        canEdit: [{ type: Input }],
        paramDataPanel: [{ type: ViewChild, args: ['paramDataPanel', { read: ViewContainerRef },] }]
    };
    return UbccParamDataUiRootComponent;
}());
export { UbccParamDataUiRootComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    UbccParamDataUiRootComponent.prototype._assignment;
    /** @type {?} */
    UbccParamDataUiRootComponent.prototype._canEdit;
    /** @type {?} */
    UbccParamDataUiRootComponent.prototype.template;
    /** @type {?} */
    UbccParamDataUiRootComponent.prototype.dimensionItemDatas;
    /** @type {?} */
    UbccParamDataUiRootComponent.prototype.paramDataItems;
    /** @type {?} */
    UbccParamDataUiRootComponent.prototype.paramDataItemsClone;
    /** @type {?} */
    UbccParamDataUiRootComponent.prototype.currentInstance;
    /** @type {?} */
    UbccParamDataUiRootComponent.prototype.templateSerializer;
    /** @type {?} */
    UbccParamDataUiRootComponent.prototype.assignmentSerializer;
    /** @type {?} */
    UbccParamDataUiRootComponent.prototype.paramDataPanel;
    /**
     * @type {?}
     * @private
     */
    UbccParamDataUiRootComponent.prototype.utils;
    /**
     * @type {?}
     * @private
     */
    UbccParamDataUiRootComponent.prototype.ebsService;
    /**
     * @type {?}
     * @private
     */
    UbccParamDataUiRootComponent.prototype.http;
    /**
     * @type {?}
     * @private
     */
    UbccParamDataUiRootComponent.prototype.resolver;
}
//# sourceMappingURL=data:application/json;base64,