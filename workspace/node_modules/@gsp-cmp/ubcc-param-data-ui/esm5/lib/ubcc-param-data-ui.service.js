/**
 * @fileoverview added by tsickle
 * Generated from: lib/ubcc-param-data-ui.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, ComponentFactoryResolver, Injector } from '@angular/core';
import { UbccParamDataUtils } from './utils/param-data-utils';
import { BsModalService } from '@farris/ui-modal';
import { UbccParamDataUiDialogComponent } from './ubcc-param-data-ui-dialog/ubcc-param-data-ui-dialog.component';
var UbccParamDataUiService = /** @class */ (function () {
    function UbccParamDataUiService(resolver, injector, util, modalService) {
        this.resolver = resolver;
        this.injector = injector;
        this.util = util;
        this.modalService = modalService;
    }
    /**
     * @param {?} templateId
     * @param {?} paramData
     * @return {?}
     */
    UbccParamDataUiService.prototype.show = /**
     * @param {?} templateId
     * @param {?} paramData
     * @return {?}
     */
    function (templateId, paramData) {
        return this.create(templateId, paramData);
    };
    /**
     * @private
     * @param {?} templateId
     * @param {?} data
     * @return {?}
     */
    UbccParamDataUiService.prototype.create = /**
     * @private
     * @param {?} templateId
     * @param {?} data
     * @return {?}
     */
    function (templateId, data) {
        /** @type {?} */
        var fac = this.resolver.resolveComponentFactory(UbccParamDataUiDialogComponent);
        /** @type {?} */
        var cmpRef = fac.create(this.injector);
        /** @type {?} */
        var modalConfig = this.util.getModalConfig(cmpRef.instance.btnRef);
        /** @type {?} */
        var dialog = this.modalService.show(cmpRef, modalConfig);
        cmpRef.instance.dialog = dialog;
        cmpRef.instance.templateId = templateId;
        cmpRef.instance.data = data;
        return { confirmEvent: cmpRef.instance.confirmEmitter, closeEvent: cmpRef.instance.closeEmitter, close: cmpRef.instance.close };
    };
    UbccParamDataUiService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    UbccParamDataUiService.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: UbccParamDataUtils },
        { type: BsModalService }
    ]; };
    return UbccParamDataUiService;
}());
export { UbccParamDataUiService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    UbccParamDataUiService.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    UbccParamDataUiService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    UbccParamDataUiService.prototype.util;
    /**
     * @type {?}
     * @private
     */
    UbccParamDataUiService.prototype.modalService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWJjYy1wYXJhbS1kYXRhLXVpLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLWNtcC91YmNjLXBhcmFtLWRhdGEtdWkvIiwic291cmNlcyI6WyJsaWIvdWJjYy1wYXJhbS1kYXRhLXVpLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLHdCQUF3QixFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbEQsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0saUVBQWlFLENBQUM7QUFHakg7SUFHSSxnQ0FDWSxRQUFrQyxFQUNsQyxRQUFrQixFQUNsQixJQUF3QixFQUN4QixZQUE0QjtRQUg1QixhQUFRLEdBQVIsUUFBUSxDQUEwQjtRQUNsQyxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLFNBQUksR0FBSixJQUFJLENBQW9CO1FBQ3hCLGlCQUFZLEdBQVosWUFBWSxDQUFnQjtJQUNwQyxDQUFDOzs7Ozs7SUFFTCxxQ0FBSTs7Ozs7SUFBSixVQUFLLFVBQWlCLEVBQUMsU0FBYTtRQUNoQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzdDLENBQUM7Ozs7Ozs7SUFFTyx1Q0FBTTs7Ozs7O0lBQWQsVUFBZSxVQUFpQixFQUFDLElBQVE7O1lBQ2pDLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLHVCQUF1QixDQUFDLDhCQUE4QixDQUFDOztZQUMzRSxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDOztZQUNsQyxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7O1lBQzlELE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDO1FBQ3hELE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNoQyxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsR0FBQyxVQUFVLENBQUM7UUFDdEMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUMsSUFBSSxDQUFDO1FBQzFCLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsVUFBVSxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBQyxDQUFDO0lBQ2xJLENBQUM7O2dCQXZCSixVQUFVOzs7O2dCQU5VLHdCQUF3QjtnQkFBRSxRQUFRO2dCQUM5QyxrQkFBa0I7Z0JBQ2xCLGNBQWM7O0lBNkJ2Qiw2QkFBQztDQUFBLEFBekJELElBeUJDO1NBeEJZLHNCQUFzQjs7Ozs7O0lBRzNCLDBDQUEwQzs7Ozs7SUFDMUMsMENBQTBCOzs7OztJQUMxQixzQ0FBZ0M7Ozs7O0lBQ2hDLDhDQUFvQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFViY2NQYXJhbURhdGFVdGlscyB9IGZyb20gJy4vdXRpbHMvcGFyYW0tZGF0YS11dGlscyc7XG5pbXBvcnQgeyBCc01vZGFsU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbW9kYWwnO1xuaW1wb3J0IHsgVWJjY1BhcmFtRGF0YVVpRGlhbG9nQ29tcG9uZW50IH0gZnJvbSAnLi91YmNjLXBhcmFtLWRhdGEtdWktZGlhbG9nL3ViY2MtcGFyYW0tZGF0YS11aS1kaWFsb2cuY29tcG9uZW50JztcbmltcG9ydCB7IERpYWxvZ1Jlc3VsdCB9IGZyb20gJy4vY29tbW9uL2RpYWxvZy1yZXN1bHQnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVWJjY1BhcmFtRGF0YVVpU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSByZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICAgICAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcixcbiAgICAgICAgcHJpdmF0ZSB1dGlsOiBVYmNjUGFyYW1EYXRhVXRpbHMsXG4gICAgICAgIHByaXZhdGUgbW9kYWxTZXJ2aWNlOiBCc01vZGFsU2VydmljZVxuICAgICkgeyB9XG5cbiAgICBzaG93KHRlbXBsYXRlSWQ6c3RyaW5nLHBhcmFtRGF0YTphbnkpOkRpYWxvZ1Jlc3VsdHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlKHRlbXBsYXRlSWQscGFyYW1EYXRhKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWF0ZSh0ZW1wbGF0ZUlkOnN0cmluZyxkYXRhOmFueSk6IERpYWxvZ1Jlc3VsdCB7XG4gICAgICAgIGxldCBmYWMgPSB0aGlzLnJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KFViY2NQYXJhbURhdGFVaURpYWxvZ0NvbXBvbmVudCk7XG4gICAgICAgIGxldCBjbXBSZWYgPSBmYWMuY3JlYXRlKHRoaXMuaW5qZWN0b3IpO1xuICAgICAgICBsZXQgbW9kYWxDb25maWcgPSB0aGlzLnV0aWwuZ2V0TW9kYWxDb25maWcoY21wUmVmLmluc3RhbmNlLmJ0blJlZik7XG4gICAgICAgIGxldCBkaWFsb2cgPSB0aGlzLm1vZGFsU2VydmljZS5zaG93KGNtcFJlZiwgbW9kYWxDb25maWcpO1xuICAgICAgICBjbXBSZWYuaW5zdGFuY2UuZGlhbG9nID0gZGlhbG9nO1xuICAgICAgICBjbXBSZWYuaW5zdGFuY2UudGVtcGxhdGVJZD10ZW1wbGF0ZUlkO1xuICAgICAgICBjbXBSZWYuaW5zdGFuY2UuZGF0YT1kYXRhO1xuICAgICAgICByZXR1cm4geyBjb25maXJtRXZlbnQ6IGNtcFJlZi5pbnN0YW5jZS5jb25maXJtRW1pdHRlciwgY2xvc2VFdmVudDogY21wUmVmLmluc3RhbmNlLmNsb3NlRW1pdHRlcixjbG9zZTogY21wUmVmLmluc3RhbmNlLmNsb3NlfTtcbiAgICB9XG5cbn1cbiJdfQ==