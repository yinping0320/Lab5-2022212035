/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/lookup-http-service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpHeaders, HttpClient } from '@angular/common/http';
import { SessionService } from '@ecp-caf/caf-common';
import { of } from 'rxjs';
var LookUpHttpService = /** @class */ (function () {
    function LookUpHttpService(http, cache) {
        this.http = http;
        this.cache = cache;
        this.httpHeaders = new HttpHeaders().set("sessionid", this.cache.getUserSessionId());
        this.httpHeaders = new HttpHeaders();
        this.httpHeaders.set("sessionid", this.cache.getUserSessionId());
    }
    /**
     * @param {?} uri
     * @param {?=} params
     * @return {?}
     */
    LookUpHttpService.prototype.getData = /**
     * @param {?} uri
     * @param {?=} params
     * @return {?}
     */
    function (uri, params) {
        if (uri.includes('{helpId}')) {
            return of(null);
        }
        /** @type {?} */
        var queryParam = JSON.stringify(params);
        /** @type {?} */
        var url = uri + "?queryParam=" + encodeURIComponent(queryParam);
        return this.http.get(url, { headers: this.httpHeaders });
    };
    LookUpHttpService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    LookUpHttpService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: SessionService }
    ]; };
    return LookUpHttpService;
}());
export { LookUpHttpService };
if (false) {
    /** @type {?} */
    LookUpHttpService.prototype.httpHeaders;
    /**
     * @type {?}
     * @private
     */
    LookUpHttpService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    LookUpHttpService.prototype.cache;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9va3VwLWh0dHAtc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3AtY21wL3ViY2MtcGFyYW0tZGF0YS11aS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlL2xvb2t1cC1odHRwLXNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDL0QsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3JELE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFdEM7SUFLSSwyQkFBb0IsSUFBZ0IsRUFBVSxLQUFxQjtRQUEvQyxTQUFJLEdBQUosSUFBSSxDQUFZO1FBQVUsVUFBSyxHQUFMLEtBQUssQ0FBZ0I7UUFGbkUsZ0JBQVcsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7UUFHNUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBQ3JDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQztJQUNyRSxDQUFDOzs7Ozs7SUFFRCxtQ0FBTzs7Ozs7SUFBUCxVQUFRLEdBQVcsRUFBRSxNQUFZO1FBQzdCLElBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsRUFBQztZQUN4QixPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNuQjs7WUFDRyxVQUFVLEdBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7O1lBQ2pDLEdBQUcsR0FBSSxHQUFHLG9CQUFlLGtCQUFrQixDQUFDLFVBQVUsQ0FBRztRQUM3RCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBQyxFQUFDLE9BQU8sRUFBQyxJQUFJLENBQUMsV0FBVyxFQUFDLENBQUMsQ0FBQztJQUN6RCxDQUFDOztnQkFqQkosVUFBVTs7OztnQkFKVyxVQUFVO2dCQUN2QixjQUFjOztJQXFCdkIsd0JBQUM7Q0FBQSxBQWxCRCxJQWtCQztTQWpCWSxpQkFBaUI7OztJQUUxQix3Q0FBZ0Y7Ozs7O0lBRXBFLGlDQUF3Qjs7Ozs7SUFBRSxrQ0FBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IElMb29rdXBIdHRwU2VydmljZSwgTG9va3VwR3JpZFJlc3VsdCB9IGZyb20gJ0BmYXJyaXMvdWktbG9va3VwJztcclxuaW1wb3J0IHsgSHR0cEhlYWRlcnMsIEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IFNlc3Npb25TZXJ2aWNlIH0gZnJvbSAnQGVjcC1jYWYvY2FmLWNvbW1vbic7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBMb29rVXBIdHRwU2VydmljZSBpbXBsZW1lbnRzIElMb29rdXBIdHRwU2VydmljZXtcclxuXHJcbiAgICBodHRwSGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycygpLnNldChcInNlc3Npb25pZFwiLCB0aGlzLmNhY2hlLmdldFVzZXJTZXNzaW9uSWQoKSk7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50LCBwcml2YXRlIGNhY2hlOiBTZXNzaW9uU2VydmljZSkge1xyXG4gICAgICAgIHRoaXMuaHR0cEhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoKTtcclxuICAgICAgICB0aGlzLmh0dHBIZWFkZXJzLnNldChcInNlc3Npb25pZFwiLCB0aGlzLmNhY2hlLmdldFVzZXJTZXNzaW9uSWQoKSk7XHJcbiAgICB9IFxyXG4gICAgXHJcbiAgICBnZXREYXRhKHVyaTogc3RyaW5nLCBwYXJhbXM/OiBhbnkpOiBPYnNlcnZhYmxlPExvb2t1cEdyaWRSZXN1bHQ+IHtcclxuICAgICAgICBpZih1cmkuaW5jbHVkZXMoJ3toZWxwSWR9Jykpe1xyXG4gICAgICAgICAgICByZXR1cm4gb2YobnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBxdWVyeVBhcmFtPUpTT04uc3RyaW5naWZ5KHBhcmFtcyk7XHJcbiAgICAgICAgbGV0IHVybD1gJHt1cml9P3F1ZXJ5UGFyYW09JHtlbmNvZGVVUklDb21wb25lbnQocXVlcnlQYXJhbSl9YDtcclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldCh1cmwse2hlYWRlcnM6dGhpcy5odHRwSGVhZGVyc30pO1xyXG4gICAgfVxyXG59Il19