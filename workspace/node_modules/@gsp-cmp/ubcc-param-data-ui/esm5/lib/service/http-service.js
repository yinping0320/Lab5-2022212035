/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/http-service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { SessionService } from '@ecp-caf/caf-common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@ecp-caf/caf-common";
/** @type {?} */
var UBCC_PARAM_TEMPLATE_ROUTER = '/api/runtime/bcc/v1.0/param/template/definition';
/** @type {?} */
var UBCC_PARAM_TEMPLATE_GET_BY_ID = UBCC_PARAM_TEMPLATE_ROUTER + "/{id}";
/** @type {?} */
var UBCC_PARAM_DATA_ROUTER = '/api/runtime/bcc/v1.0/param/data';
/** @type {?} */
var UBCC_PARAM_DATA = UBCC_PARAM_DATA_ROUTER;
/** @type {?} */
var UBCC_PARAM_DATA_DIMENSION = UBCC_PARAM_DATA_ROUTER + "/dimensionalData";
/** @type {?} */
var UBCC_PARAM_DATA_GET_BY_ID = UBCC_PARAM_DATA_ROUTER + "/{templateId}/{bizTypeId}";
/** @type {?} */
var UBCC_DIMENSION_PARAM_DATA_GET_BY_ID = UBCC_PARAM_DATA_ROUTER + "/{templateId}/{bizTypeId}/dimensions/paramdatas";
/** @type {?} */
var UBCC_PARAM_HELP_DATA_ROUTER = "/api/runtime/bcc/v1.0/param/help/{helpId}/{dataIds}";
var UbccParamDataManangerService = /** @class */ (function () {
    function UbccParamDataManangerService(http, cache) {
        this.http = http;
        this.cache = cache;
        this.httpHeaders = new HttpHeaders();
        this.httpHeaders.set("sessionid", this.cache.getUserSessionId());
    }
    /**
     * @param {?} id
     * @return {?}
     */
    UbccParamDataManangerService.prototype.getParamTemplate = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var url = UBCC_PARAM_TEMPLATE_GET_BY_ID.replace('{id}', id);
        return this.http.get(url, { headers: this.httpHeaders });
    };
    /**
     * @param {?} templateId
     * @param {?} bizTypeId
     * @return {?}
     */
    UbccParamDataManangerService.prototype.getParamData = /**
     * @param {?} templateId
     * @param {?} bizTypeId
     * @return {?}
     */
    function (templateId, bizTypeId) {
        /** @type {?} */
        var url = UBCC_PARAM_DATA_GET_BY_ID.replace('{templateId}', templateId).replace('{bizTypeId}', bizTypeId);
        return this.http.get(url, { headers: this.httpHeaders });
    };
    /**
     * @param {?} templateId
     * @param {?} bizTypeId
     * @param {?} dimension1
     * @param {?} dimension2
     * @param {?} dimensionCount
     * @return {?}
     */
    UbccParamDataManangerService.prototype.getDimensionData = /**
     * @param {?} templateId
     * @param {?} bizTypeId
     * @param {?} dimension1
     * @param {?} dimension2
     * @param {?} dimensionCount
     * @return {?}
     */
    function (templateId, bizTypeId, dimension1, dimension2, dimensionCount) {
        /** @type {?} */
        var url = UBCC_DIMENSION_PARAM_DATA_GET_BY_ID.replace('{templateId}', templateId).replace('{bizTypeId}', bizTypeId);
        if (dimensionCount === 1) {
            url = url + "?dimension1=" + dimension1 + "&dimensionCount=" + dimensionCount;
        }
        if (dimensionCount === 2) {
            url = url + "?dimension1=" + dimension1 + "&dimension2=" + dimension2 + "&dimensionCount=" + dimensionCount;
        }
        return this.http.get(url, { headers: this.httpHeaders });
    };
    /**
     * @param {?} templateId
     * @param {?} bizTypeId
     * @param {?} dimensionValues
     * @param {?} paramValues
     * @return {?}
     */
    UbccParamDataManangerService.prototype.saveDimensionAndParamData = /**
     * @param {?} templateId
     * @param {?} bizTypeId
     * @param {?} dimensionValues
     * @param {?} paramValues
     * @return {?}
     */
    function (templateId, bizTypeId, dimensionValues, paramValues) {
        /** @type {?} */
        var url = UBCC_PARAM_DATA_DIMENSION;
        /** @type {?} */
        var body = {
            templateId: templateId,
            bizTypeId: bizTypeId,
            dimensionValues: dimensionValues,
            paramValues: paramValues
        };
        return this.http.post(url, body, { headers: this.httpHeaders });
    };
    /**
     * @param {?} templateId
     * @param {?} bizTypeId
     * @param {?} paramValues
     * @return {?}
     */
    UbccParamDataManangerService.prototype.saveParamData = /**
     * @param {?} templateId
     * @param {?} bizTypeId
     * @param {?} paramValues
     * @return {?}
     */
    function (templateId, bizTypeId, paramValues) {
        /** @type {?} */
        var url = UBCC_PARAM_DATA;
        /** @type {?} */
        var body = {
            templateId: templateId,
            bizTypeId: bizTypeId,
            paramValues: paramValues
        };
        return this.http.post(url, body, { headers: this.httpHeaders });
    };
    /**
     * @param {?} helpId
     * @param {?} dataIds
     * @return {?}
     */
    UbccParamDataManangerService.prototype.getHelpData = /**
     * @param {?} helpId
     * @param {?} dataIds
     * @return {?}
     */
    function (helpId, dataIds) {
        /** @type {?} */
        var url = UBCC_PARAM_HELP_DATA_ROUTER.replace('{helpId}', helpId).replace('{dataIds}', dataIds.join(','));
        return this.http.get(url, { headers: this.httpHeaders });
    };
    UbccParamDataManangerService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    UbccParamDataManangerService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: SessionService }
    ]; };
    /** @nocollapse */ UbccParamDataManangerService.ngInjectableDef = i0.defineInjectable({ factory: function UbccParamDataManangerService_Factory() { return new UbccParamDataManangerService(i0.inject(i1.HttpClient), i0.inject(i2.SessionService)); }, token: UbccParamDataManangerService, providedIn: "root" });
    return UbccParamDataManangerService;
}());
export { UbccParamDataManangerService };
if (false) {
    /** @type {?} */
    UbccParamDataManangerService.prototype.httpHeaders;
    /**
     * @type {?}
     * @private
     */
    UbccParamDataManangerService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    UbccParamDataManangerService.prototype.cache;
}
//# sourceMappingURL=data:application/json;base64,