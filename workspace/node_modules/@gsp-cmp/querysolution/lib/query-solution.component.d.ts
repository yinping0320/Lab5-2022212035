import { OnInit, ComponentFactoryResolver, Injector, EventEmitter, OnChanges, SimpleChanges, ChangeDetectorRef, OnDestroy } from '@angular/core';
import { SaveAsDialogComponent } from './saveasdialog/saveasdialog.component';
import { SolutionManangerComponent } from './solutionmanager/solutionmanager.component';
import { ConvertorService, QueryCondition, QueryConditionComponent, QuerySolutionVo } from '@farris/component-querycondition';
import { NotifyService } from '@farris/ui-notify';
import { BsModalService } from '@farris/ui-modal';
import { HttpService } from './service/httpservice';
import { FieldConfigService } from './service/fieldconfig.service';
import { SolutionService } from '@farris/component-querycondition';
import { IQuerySolutionHandler } from './interface/IQuerySolutionHandler';
import { LocaleService } from '@farris/ui-locale';
import { DefaultConfigs } from './interface/DefaultConfigs';
import { EventManager } from '@angular/platform-browser';
import { BehaviorSubject, Subject } from 'rxjs';
export declare class QuerySolutionComponent implements OnInit, OnChanges, OnDestroy {
    private notify;
    private resolver;
    private injector;
    private modalService;
    private convertService;
    private solutionService;
    private httpService;
    private fieldConfigService;
    private localeService;
    _fieldConfigs: Array<QueryCondition>;
    _presetFieldConfigs: Array<QueryCondition>;
    _resetFieldConfigs: Array<any>;
    /**
     *  筛选方案默认值配置
     */
    defaultConfigs: DefaultConfigs;
    /**
     * 字段配置数据源，用于选择字段配置
     */
    fieldConfigs: Array<any>;
    /**
     * 高级模式需要原始fieldConfigs，需要将范围类控件改为单值控件
     */
    unformatFieldConfigs: Array<any>;
    /**
     * 系统预置查询方案名称
     */
    presetQuerySolutionName: string;
    resetFieldConfigs: Array<any>;
    /**
     * 预置查询字段
     */
    presetFieldConfigs: Array<any>;
    /**
     * 此值由设计器传入
     * 组件在设计时无法点击被禁用，true
     * 组件在运行时可以点击使用，false
     */
    isDisabled: boolean;
    /**
     * 表单ID，必选字段，表示查询方案所属的表单
     */
    formId: string;
    /**
     * sessionId
     */
    sessionId: string;
    /**
     * 查询条件列表
     */
    queryEmitter: EventEmitter<any>;
    /**
     * 查询方案cls
     */
    cls: string;
    /**
     * 查询方案数据源
     */
    querySolutionVos: Array<QuerySolutionVo>;
    querySolutionAdvancedVos: Array<QuerySolutionVo>;
    /**
     * 当前所选的方案，有可能不是方案
     */
    selectedSolution: QuerySolutionVo;
    /**
     * 是否折叠
     */
    isFold: boolean;
    /**
     * label和控件是否排成一行，默认是；false时排成上下两行
     */
    isControlInline: boolean;
    /**
     * 是否需要完整显示超过6个字符的标签，默认false
     */
    showCompleteLabel: boolean;
    /**
     * 是否启用加载后查询
    */
    enableInitQuery: boolean;
    /**
     * 默认方案
     */
    defaultQuerySolution: QuerySolutionVo;
    /**
     * 选择的控件展示列表
     */
    selectedFieldConditions: Array<QueryCondition>;
    /**
     * visible属性为true的过滤条件，是变量selectedFieldConditions的子级
     */
    private visibleSelectedConditions;
    sysQuerySolutionVo: QuerySolutionVo;
    showSaveButton: boolean;
    isSetDefaultValue: boolean;
    doneSetDefaultValue: boolean;
    doneInitQuery: boolean;
    private conditionVisibleState;
    destroy$: Subject<any>;
    private templateSimpleConditions;
    /**
     * 组件服务接口
    */
    solutionHandler: IQuerySolutionHandler;
    cdf: ChangeDetectorRef;
    /**
     * 条件概要
     */
    summaryConditions: any[];
    eventManager: EventManager;
    /**
     * 是否启用记录历史方式
     * 上次查询——不能删除、可以另存、不存在变更
     * 方案列表只有上次查询时，上次查询、系统默认都存在
     * 方案列表多个时，有上次查询，上次查询选中
     * 方案列表没有上次查询时，但是LocalStorage有,构造一个上次查询
     *
     */
    enableHistory: boolean;
    /**
     * 是否启动高级模式
     */
    openAdvancedMode: boolean;
    filterText: string;
    queryAfterValueChange: boolean;
    hideOrgselector: boolean;
    private historyRefer;
    farrisQueryCondition: QueryConditionComponent;
    manageDialog: SolutionManangerComponent;
    saveAsDialog: SaveAsDialogComponent;
    _self: any;
    private _idSer;
    private msgSer;
    constructor(notify: NotifyService, resolver: ComponentFactoryResolver, injector: Injector, modalService: BsModalService, convertService: ConvertorService, solutionService: SolutionService, httpService: HttpService, fieldConfigService: FieldConfigService, localeService: LocaleService);
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * 组件初始化
     */
    ngOnInit(): void;
    initSysQuerySolution(): void;
    /**
     * 加载系统预置方案
     */
    loadSysQuerySolution(): void;
    /**
     * 规范方案条件
     */
    private formatQuerySolutionVO;
    /**
     * 加载查询方案数据
     */
    loadQuerySolutions(): Promise<void>;
    setSolutionCache(querySolutionVos: any): void;
    setCurrentSolutionCache(value: any): void;
    loadQueryConditions(): void;
    getConditionVisibleState(): BehaviorSubject<any>;
    /**
     * 传递过来的是已经处理过的条件
     * @param simpleCondition
     */
    updateConditionVisibleState(simpleCondition: Array<any>): void;
    private updateFieldParams;
    saveAs(): void;
    /**
     * 获取默认标签
     * @param solution
     */
    getDefaultLabel(solution: QuerySolutionVo): {
        'visibility': string;
    };
    /**
     * 方案选择事件
     * @param solution 当前选中的方案
     */
    select(solution: QuerySolutionVo): void;
    selectAndQuery(solution: QuerySolutionVo): void;
    /**
     * 打开字段配置窗口
     */
    openFieldConfigDialog(): void;
    fieldConditionsChangeHander($event: any): void;
    fieldSolutionChangeHander($event: any): void;
    /**
     * 保存方案
     */
    save(): void;
    /**
     * 打开另存为对话框，点击保存按钮时也走该逻辑
     * @param title
     */
    openSaveAsDialog(title: string): void;
    newSaveAsSolutionVo: () => any;
    /**
     * 另存为确定事件处理
     * @param solution 新增的查询方案
     */
    saveAsConfrimHandler(_event: any): void;
    /**
     * 打开管理界面
     */
    openManangerDialog(): void;
    /**
     * 管理界面确定处理
     * @param _event
     * @param dialog
     */
    managerConfirmHandler(_event: any): void;
    /**
     * 执行筛选
     */
    query(): void;
    /**
     * 清空->条件全部重置为空
     */
    clear(): void;
    /**
     * 折叠按钮的清空
     */
    foldClearHandler(): void;
    /**
     * 箭头点击事件
     */
    arrowClick(): void;
    private whenFoldSetSummaryConditions;
    /**
     * 为系统预置方案或者自定义查询方案设置筛选条件默认值
     * @param configs 默认值设置
     * @param selectedSolution 当前选择的筛选方案
     */
    setQueryConditionValues(configs: DefaultConfigs, selectedSolution: QuerySolutionVo): void;
    /**
     * 加载筛选方案后自动查询
     * @param currentSolution 当前筛选方案
     */
    initAutoQuery(currentSolution: QuerySolutionVo): void;
    /**
     * 当前查询方案的筛选条件发生变化时，标记方案处于编辑状态
     * @param isChanged 方案是否处于编辑状态
     * @param solutionId 需要标记是否处于编辑状态的方案的id
     */
    markAsChanged(isChanged: boolean, solutionId: string): void;
    /**
     * 处理筛选按钮和清空按钮的响应式位置变更
     * @param $event farris-querycondition组件内部是否显示按钮
     */
    /**
     * 键盘监听函数，当按下回车键时相当于按下筛选按钮
     */
    private listenKeyBoard;
    handleKeyDown: (event: any) => void;
    /**
     * 自动初始化查询
     * 启用历史记录，并且启用了初始化查询，如果有条件，就进行查询
     */
    private initAutoQueryByLS;
    /**
     * 初始化
     */
    private initQuerySolution;
    /**
     * 初始化高级模式
     */
    private initAdvancedSolution;
    /**
     * 初始化来自LS的条件
     */
    private formatInitQuerySolution;
    /**
     * 保存之后更新历史
     */
    private changeQueryHistroy;
    /**
     * 处理iframe嵌套
     */
    private getTopWindow;
    /**
     * 设置key
     */
    private setLSKey;
    checkAuthority(e: any): void;
}
