/**
 * @fileoverview added by tsickle
 * Generated from: lib/summary-condition/summary-condition.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Injector } from '@angular/core';
import { QueryCondition, ControlType } from '@farris/component-querycondition';
import { DateTimeHelperService } from '@farris/ui-common/date';
import { NumberHelperService } from '@farris/ui-common/number';
import { LocaleService } from '@farris/ui-locale';
export class SummaryConditionComponent {
    /**
     * @param {?} dtHelper
     * @param {?} numberHelper
     * @param {?} injector
     */
    constructor(dtHelper, numberHelper, injector) {
        this.dtHelper = dtHelper;
        this.numberHelper = numberHelper;
        this.injector = injector;
        // 分隔符
        this._spliter = '';
        // 是否区间
        this._isRange = false;
        this.showTime = false;
        this.textField = 'name';
        this.valueField = 'value';
        // 从服务器端取值是格式化后的
        this.returnFormat = '';
        // 文本显示
        this.text = "";
        // 千分位符号
        this.thousand = ',';
        // 小数点处符号
        this.decimal = '.';
        // 货币符号及值展现形式
        this.expression = '%s%v';
        // formControl显示的文本
        /**
         * 国际化类型
         * \@Input() localizationType: string;
         */
        // 货币符号，默认是RMB
        this.currencySymbol = '￥';
        // 十进制前面填充的符号
        this.filledSymbol = '0';
        this.localeService = this.injector.get(LocaleService);
    }
    /**
     * @param {?} qCondition
     * @return {?}
     */
    set condition(qCondition) {
        this._condition = qCondition;
        this.formatCondition();
    }
    /**
     * @return {?}
     */
    get condition() {
        return this._condition;
    }
    ;
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    formatCondition() {
        /** @type {?} */
        let qCondition = this.condition;
        if (qCondition) {
            this._conditionType = qCondition.control.getControlType();
            /** @type {?} */
            let textValueObj;
            /** @type {?} */
            let textOriginalValue = qCondition.value.getOriginalValue();
            /** @type {?} */
            let startValue;
            /** @type {?} */
            let endValue;
            switch (this._conditionType) {
                case ControlType.Text:
                    //文本
                    textValueObj = (/** @type {?} */ (qCondition.value));
                    textOriginalValue = textValueObj.value && textValueObj.value.trim();
                    break;
                case ControlType.SingleNumber:
                    // 数值
                    this.numberOptions = { precision: qCondition.control['precision'], type: 'number' };
                    break;
                case ControlType.NumberRange:
                    // 数值区间
                    this._isRange = true;
                    this._spliter = '~';
                    this.numberOptions = { precision: qCondition.control['precision'], type: 'number' };
                    startValue = qCondition.value['startValue'] ? qCondition.value['startValue'] : '';
                    endValue = qCondition.value['endValue'] ? qCondition.value['endValue'] : '';
                    textOriginalValue = [startValue, endValue].join(this._spliter);
                    break;
                case ControlType.SingleDate:
                    //单个日期
                    this.returnFormat = qCondition.control && qCondition.control['returnFormat'] ? qCondition.control['returnFormat'] : "yyyy-MM-dd";
                    this.format = qCondition.control && qCondition.control['format'] ? qCondition.control['format'] : "yyyy-MM-dd";
                    break;
                case ControlType.DateRange:
                    //日期区间
                    this._isRange = true;
                    this._spliter = '~';
                    this.returnFormat = qCondition.control && qCondition.control['returnFormat'] ? qCondition.control['returnFormat'] : "yyyy-MM-dd";
                    this.format = qCondition.control && qCondition.control['format'] ? qCondition.control['format'] : "yyyy-MM-dd";
                    startValue = qCondition.value['startTime'] ? qCondition.value['startTime'] : '';
                    endValue = qCondition.value['endTime'] ? qCondition.value['endTime'] : '';
                    textOriginalValue = [startValue, endValue].join(this._spliter);
                    break;
                case ControlType.SingleYear:
                    // 只有年
                    this.returnFormat = qCondition.control && qCondition.control['returnFormat'] ? qCondition.control['returnFormat'] : "yyyy";
                    this.format = qCondition.control && qCondition.control['format'] ? qCondition.control['format'] : "yyyy";
                    break;
                case ControlType.SingleMonth:
                    // 只有月
                    this.returnFormat = qCondition.control && qCondition.control['returnFormat'] ? qCondition.control['returnFormat'] : "yyyy-MM";
                    this.format = qCondition.control && qCondition.control['format'] ? qCondition.control['format'] : "yyyy-MM";
                    break;
                case ControlType.MonthRange:
                    // 月范围
                    this._isRange = true;
                    this._spliter = '~';
                    this.returnFormat = qCondition.control && qCondition.control['returnFormat'] ? qCondition.control['returnFormat'] : "yyyy-MM";
                    this.format = qCondition.control && qCondition.control['format'] ? qCondition.control['format'] : "yyyy-MM";
                    startValue = qCondition.value['startTime'] ? qCondition.value['startTime'] : '';
                    endValue = qCondition.value['endTime'] ? qCondition.value['endTime'] : '';
                    break;
                case ControlType.SingleDateTime:
                    // 时间
                    this.showTime = true;
                    this.returnFormat = qCondition.control['returnFormat'] ? qCondition.control['returnFormat'] : this.returnFormat;
                    this.format = 'yyyy-MM-dd HH:mm:ss';
                    if (qCondition.control) {
                        if (qCondition.control['enableCustomFormat']) {
                            this.format = qCondition.control['format'] ? qCondition.control['format'] : this.returnFormat;
                        }
                        else {
                            this.format = qCondition.control && qCondition.control['format'] ? qCondition.control['format'] + ' HH:mm:ss' : this.returnFormat;
                        }
                    }
                    break;
                case ControlType.DateTimeRange:
                    // 时间区间
                    this.showTime = true;
                    this._isRange = true;
                    this._spliter = '~';
                    this.returnFormat = qCondition.control['returnFormat'] ? qCondition.control['returnFormat'] : this.returnFormat;
                    this.format = 'yyyy-MM-dd HH:mm:ss';
                    if (qCondition.control) {
                        if (qCondition.control['enableCustomFormat']) {
                            this.format = qCondition.control['format'] ? qCondition.control['format'] : this.returnFormat;
                        }
                        else {
                            this.format = qCondition.control && qCondition.control['format'] ? qCondition.control['format'] + ' HH:mm:ss' : this.returnFormat;
                        }
                    }
                    startValue = qCondition.value['startTime'] ? qCondition.value['startTime'] : '';
                    endValue = qCondition.value['endTime'] ? qCondition.value['endTime'] : '';
                    break;
                case ControlType.BoolCheck:
                    // 布尔值-单个值
                    /** @type {?} */
                    let checkValue = ((/** @type {?} */ (qCondition.value))).value;
                    textOriginalValue = checkValue.length > 0 ? checkValue['0'] : null;
                    break;
                case ControlType.DropDownList:
                    // 下拉
                    this._spliter = ',';
                    if (qCondition.control['uri'] && !qCondition.control['enumValues']) {
                        textOriginalValue = ((/** @type {?} */ (qCondition.value['value']))).map((/**
                         * @param {?} t
                         * @return {?}
                         */
                        t => t[this.valueField])).join(this._spliter);
                    }
                    break;
                case ControlType.Radio:
                    // 单选组
                    this._spliter = ',';
                    break;
                case ControlType.InputGroup:
                    // inputgroup
                    textValueObj = (/** @type {?} */ (qCondition.value));
                    textOriginalValue = textValueObj.textValue && textValueObj.textValue.trim();
                    break;
                case ControlType.SmartHelp:
                    // 帮助
                    textValueObj = (/** @type {?} */ (qCondition.value));
                    textOriginalValue = textValueObj.textValue && textValueObj.textValue.trim();
                    break;
                default:
                    textOriginalValue = qCondition.value.getOriginalValue();
            }
            this.text = this.formatValue(textOriginalValue);
        }
        else {
            this.text = '';
        }
    }
    /**
     * 处理多语言，待定
     * @param {?} value
     * @return {?}
     */
    formatLang(value) {
        return value && value[this.currentLanguage] ? value[this.currentLanguage] : '';
    }
    /**
     * C货币
     * D十进制
     * F浮点数
     * N数字，带千分位
     * P百分比
     * @param {?} value
     * @return {?}
     */
    getFormatNumberValue(value) {
        if (!this.format && !this.numberOptions) {
            return value.toString();
        }
        if (this.numberOptions && this.numberOptions.type && this.numberOptions.type == 'number') {
            if (this.numberOptions.formatter) {
                return this.numberOptions.formatter(value);
            }
            else {
                if (this.numberOptions.useThousands) {
                    // 设置了千分位
                    if (this.numberOptions.precision != undefined) {
                        this.format = 'n' + this.numberOptions.precision;
                    }
                    else {
                        this.format = 'n';
                    }
                }
                else {
                    // 没有设置千分位
                    if (this.numberOptions.precision != undefined) {
                        this.format = 'f' + this.numberOptions.precision;
                    }
                    else {
                        // 没有设置精度，没有设置千分位
                        return value.toString();
                    }
                }
            }
        }
        else {
            return value.toString();
        }
        /** @type {?} */
        const firstLetter = this.currencyToUpperCase(this.format.substring(0, 1));
        /** @type {?} */
        const precision = Number(this.format.substring(1));
        /** @type {?} */
        let config = {};
        /** @type {?} */
        let result;
        if (!/C|D|F|N|P/g.test(firstLetter)) {
            console.warn(`不支持format为 ${this.format} 类型的数字格式化`);
            return;
        }
        if (this.thousand) {
            Object.assign(config, { thousand: this.thousand });
        }
        if (this.decimal) {
            Object.assign(config, { decimal: this.decimal });
        }
        if (this.expression) {
            Object.assign(config, { format: this.expression });
        }
        switch (firstLetter) {
            case 'C':
                Object.assign(config, { prefix: this.currencySymbol, precision });
                result = this.numberHelper.formatMoney(value, config);
                break;
            case 'D':
                result = this.toDecimal(value, precision);
                break;
            case 'F':
                Object.assign(config, { prefix: '', thousand: '', precision });
                result = this.numberHelper.formatMoney(value, config);
                break;
            case 'N':
                Object.assign(config, { prefix: '', precision });
                result = this.numberHelper.formatMoney(value, config);
                break;
            case 'P':
                result = this.toPercent(value, precision);
                break;
        }
        return result;
    }
    /**
     * @param {?} value 转换成十进制的数字
     * @param {?} precision 十进制数字的长度
     * @return {?}
     */
    toDecimal(value, precision) {
        if (value.toString().indexOf('.') > -1) {
            console.warn('十进制转换仅限整型类型');
            return;
        }
        return (Array(precision).join(this.filledSymbol) + value).slice(-precision);
    }
    /**
     * @param {?} value 转换成百分数的数字
     * @param {?} precision
     * @return {?}
     */
    toPercent(value, precision) {
        return Number(value * 100).toFixed(Number(precision)) + '%';
    }
    /**
     * 将货币符号首字母转换成大写
     * @param {?} value
     * @return {?}
     */
    currencyToUpperCase(value) {
        return value.replace(/[a-z]+/g, (/**
         * @param {?} word
         * @return {?}
         */
        (word) => {
            return word.toUpperCase();
        }));
    }
    /**
     * 处理年，Y=>y, D=>d
     * @param {?} value
     * @return {?}
     */
    dateToUpperCase(value) {
        /** @type {?} */
        let newFormat;
        if (/Y/g.test(value) === true) {
            newFormat = value.replace(/Y/g, 'y');
        }
        else {
            newFormat = value;
        }
        if (/D/g.test(newFormat) === true) {
            newFormat = newFormat.replace(/D/g, 'd');
        }
        return newFormat;
    }
    /**
     * 枚举类型处理
     * @param {?} value
     * @return {?}
     */
    getFormatEnumValue(value) {
        if (value == undefined || value === null || value === '') {
            return '';
        }
        if (this.dataSource && this.dataSource.length) {
            // 可能存在多选枚举，作为分隔符  
            // let curVals = ('' + value).split(',');
            /** @type {?} */
            let curVals = ('' + value).split(this._spliter);
            /** @type {?} */
            let nameResult = [];
            for (let k = 0; k < curVals.length; k++) {
                /** @type {?} */
                let findObj = this.dataSource.find((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    return item[this.valueField] == curVals[k];
                }));
                if (findObj) {
                    nameResult.push(findObj[this.textField]);
                }
                else {
                    nameResult.push(curVals[k]);
                }
            }
            if (nameResult.length > 0) {
                // return nameResult.join(',');
                return nameResult.join(this._spliter);
            }
            return '';
        }
        else {
            return value;
        }
    }
    /**
     * boolean值处理
     * @param {?} value
     * @return {?}
     */
    getFormatCheckBoxValue(value) {
        if (value === true) {
            return this.localeService.getValue('text.yes');
        }
        else if (value === false || value == null || typeof value === 'undefined') {
            return this.localeService.getValue('text.no');
        }
        else {
            return value;
        }
    }
    /*
      * 日期格式化
      */
    /**
     * @param {?} value
     * @return {?}
     */
    dateformat(value) {
        /** @type {?} */
        let str;
        if (!this.format) {
            this.format = 'YYYY-MM-dd';
        }
        // 当前值是已经格式化后的日期字符串
        if (this.returnFormat && typeof value == 'string') {
            value = this.getDateFromFormatedString(value, this.returnFormat);
        }
        if (this.format === 'hh:mm:ss' || this.format === 'HH:mm:ss') {
            // 格式化时间  临时处理
            str = value;
        }
        else {
            // 格式化日期
            str = this.dtHelper.formatTo(value, this.dateToUpperCase(this.format));
        }
        return str;
    }
    /**
     * @private
     * @param {?} dateString
     * @param {?} format
     * @return {?}
     */
    getDateFromFormatedString(dateString, format) {
        /** @type {?} */
        var result = { year: 0, month: 0, day: 0, hour: 0, minite: 0, second: 0 };
        if (dateString) {
            format.replace(/y{4}|Y{4}|M+|d+|D+|h+|H+|m+|s+/g, (/**
             * @param {?} m
             * @param {?} a
             * @param {?} b
             * @param {?} c
             * @return {?}
             */
            function (m, a, b, c) {
                dateString.substring(a).replace(/\d+/, (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    if (d) {
                        c = parseInt(d.substr(0, m.length), 10);
                    }
                }));
                if (/y+/i.test(m) && !result.year)
                    result.year = c;
                if (/M+/.test(m) && !result.month)
                    result.month = c;
                if (/d+/i.test(m) && !result.day)
                    result.day = c;
                if (/h+/i.test(m) && !result.hour)
                    result.hour = c;
                if (/m+/.test(m) && !result.minite)
                    result.minite = c;
                if (/s+/.test(m) && !result.second)
                    result.second = c;
            }));
        }
        result.day = result.day ? result.day : 1;
        result.month = result.month ? result.month : 1;
        /** @type {?} */
        var resultDate = new Date(result.year + '/' + result.month + '/' + result.day + ' ' + result.hour + ':' + result.minite + ':' + result.second);
        return resultDate;
    }
    /**
     * @param {?} date
     * @param {?} fmt
     * @return {?}
     */
    function(date, fmt) {
        /** @type {?} */
        var o = {
            'M+': date.getMonth() + 1,
            //月份
            'd+': date.getDate(),
            //日
            'h+': date.getHours(),
            //小时
            'm+': date.getMinutes(),
            //分
            's+': date.getSeconds(),
            //秒
            'q+': Math.floor((date.getMonth() + 3) / 3),
            //季度
            'S': date.getMilliseconds() //毫秒
        };
        if (!fmt) {
            fmt = 'yyyy-MM-dd hh:mm:ss';
        }
        if (/(y+)/.test(fmt)) {
            fmt = fmt.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length));
        }
        for (var k in o) {
            if (new RegExp('(' + k + ')').test(fmt)) {
                fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (('00' + o[k]).substr(('' + o[k]).length)));
            }
        }
        return fmt;
    }
    /**
     * 格式化处理
     * @param {?} value
     * @return {?}
     */
    formatValue(value) {
        /** @type {?} */
        let str;
        if (this.currentLanguage) {
            return this.formatLang(value);
        }
        // 标记类型
        if (this._conditionType !== ControlType.BoolCheck && (value == null || typeof value === 'undefined')) {
            return '';
        }
        switch (this._conditionType) {
            case ControlType.Text:
                str = value;
                break;
            case ControlType.DateRange:
            case ControlType.MonthRange:
            case ControlType.DateTimeRange:
                /** @type {?} */
                const dateValues = value.split(this._spliter);
                /** @type {?} */
                let dataStr = [];
                if (dateValues && dateValues.length) {
                    dateValues.forEach((/**
                     * @param {?} date
                     * @return {?}
                     */
                    date => {
                        /** @type {?} */
                        let val = this.dateformat(date);
                        dataStr.push(val);
                    }));
                }
                str = dataStr.join(this._spliter);
                break;
            case ControlType.SingleDate:
                if (value && value.text) {
                    str = value.text;
                }
                else {
                    str = this.dateformat(value);
                }
                break;
            case ControlType.SingleDateTime:
            case ControlType.SingleMonth:
            case ControlType.SingleYear:
                str = this.dateformat(value);
                break;
            case ControlType.SingleNumber:
                // 数字
                str = this.getFormatNumberValue(value);
                break;
            case ControlType.NumberRange:
                // 数字 区间     
                /** @type {?} */
                const numberValues = value.split(this._spliter);
                /** @type {?} */
                let resultStr = [];
                if (numberValues && numberValues.length) {
                    numberValues.forEach((/**
                     * @param {?} date
                     * @return {?}
                     */
                    date => {
                        /** @type {?} */
                        let val = this.getFormatNumberValue(date);
                        resultStr.push(val);
                    }));
                }
                str = resultStr.join(this._spliter);
                break;
            case ControlType.Radio:
                // 单选组
                this.dataSource = ((/** @type {?} */ (this.condition.control))).enumValues;
                str = this.getFormatEnumValue(value);
                break;
            case ControlType.DropDownList:
                // 下拉
                this.dataSource = ((/** @type {?} */ (this.condition.control))).enumValues;
                str = this.getFormatEnumValue(value);
                break;
            case ControlType.BoolCheck:
                // 布尔
                //this.dataSource = (this.condition.control as CheckBoxControl).data;
                str = this.getFormatCheckBoxValue(value);
                break;
            //帮助的话兼容旧数据，部分值为help-text-value-null的转化为空字符串
            case ControlType.SmartHelp:
                str = value === 'help-text-value-null' ? '' : value;
                break;
            case ControlType.ComboLookUp:
                str = value === 'help-text-value-null' ? '' : value;
                break;
            default:
                str = value;
        }
        return str;
    }
}
SummaryConditionComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-summary-condition',
                template: "<span class=\"summary-condition--label\">{{condition.fieldName}}</span>:<span class=\"summary-condition--text\">{{text}}</span>",
                styles: [""]
            }] }
];
/** @nocollapse */
SummaryConditionComponent.ctorParameters = () => [
    { type: DateTimeHelperService },
    { type: NumberHelperService },
    { type: Injector }
];
SummaryConditionComponent.propDecorators = {
    condition: [{ type: Input }],
    filledSymbol: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    SummaryConditionComponent.prototype._condition;
    /**
     * @type {?}
     * @private
     */
    SummaryConditionComponent.prototype._conditionType;
    /**
     * @type {?}
     * @private
     */
    SummaryConditionComponent.prototype._spliter;
    /**
     * @type {?}
     * @private
     */
    SummaryConditionComponent.prototype._isRange;
    /**
     * @type {?}
     * @private
     */
    SummaryConditionComponent.prototype.showTime;
    /**
     * @type {?}
     * @private
     */
    SummaryConditionComponent.prototype.textField;
    /**
     * @type {?}
     * @private
     */
    SummaryConditionComponent.prototype.valueField;
    /**
     * @type {?}
     * @private
     */
    SummaryConditionComponent.prototype.returnFormat;
    /**
     * @type {?}
     * @private
     */
    SummaryConditionComponent.prototype.format;
    /**
     * @type {?}
     * @private
     */
    SummaryConditionComponent.prototype.dataSource;
    /** @type {?} */
    SummaryConditionComponent.prototype.text;
    /**
     * @type {?}
     * @private
     */
    SummaryConditionComponent.prototype.currentLanguage;
    /**
     * @type {?}
     * @private
     */
    SummaryConditionComponent.prototype.thousand;
    /**
     * @type {?}
     * @private
     */
    SummaryConditionComponent.prototype.decimal;
    /**
     * @type {?}
     * @private
     */
    SummaryConditionComponent.prototype.expression;
    /**
     * 国际化类型
     * \@Input() localizationType: string;
     * @type {?}
     */
    SummaryConditionComponent.prototype.currencySymbol;
    /** @type {?} */
    SummaryConditionComponent.prototype.filledSymbol;
    /**
     * @type {?}
     * @private
     */
    SummaryConditionComponent.prototype.numberOptions;
    /**
     * @type {?}
     * @private
     */
    SummaryConditionComponent.prototype.localeService;
    /**
     * @type {?}
     * @private
     */
    SummaryConditionComponent.prototype.dtHelper;
    /**
     * @type {?}
     * @private
     */
    SummaryConditionComponent.prototype.numberHelper;
    /**
     * @type {?}
     * @private
     */
    SummaryConditionComponent.prototype.injector;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,