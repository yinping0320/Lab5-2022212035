/**
 * @fileoverview added by tsickle
 * Generated from: lib/query-solution.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewEncapsulation, HostBinding, ComponentFactoryResolver, Injector, Input, Output, EventEmitter, ViewChild, InjectFlags, ElementRef, ChangeDetectorRef } from '@angular/core';
import { SaveAsDialogComponent } from './saveasdialog/saveasdialog.component';
import { SolutionManangerComponent } from './solutionmanager/solutionmanager.component';
import { Observable } from 'rxjs/Observable';
import { ConvertorService, QueryConditionComponent, QuerySolutionVo } from '@farris/component-querycondition';
import { NotifyService } from '@farris/ui-notify';
import { BsModalService } from '@farris/ui-modal';
import { HttpService } from './service/httpservice';
import { FieldConfigService } from './service/fieldconfig.service';
import { QuerySolutionVoConvertor, SolutionService } from '@farris/component-querycondition';
import { QUERYSOLUTION_HANDLER_TOKEN } from './interface/IQuerySolutionHandler';
import { LocaleService } from '@farris/ui-locale';
import { cloneDeep } from 'lodash-es';
import { SolutionCacheService } from './service/solution.cache.service';
import { EventManager } from '@angular/platform-browser';
import { IdService } from '@farris/ui-common';
import { BehaviorSubject, of, Subject } from 'rxjs';
import { switchMap, takeUntil, tap } from 'rxjs/operators';
import { EXTEND_QUERYSOLUTION_LOCALE } from './utils/extend-locale';
import { MessagerService } from '@farris/ui-messager';
export class QuerySolutionComponent {
    /**
     * @param {?} notify
     * @param {?} resolver
     * @param {?} injector
     * @param {?} modalService
     * @param {?} convertService
     * @param {?} solutionService
     * @param {?} httpService
     * @param {?} fieldConfigService
     * @param {?} localeService
     */
    constructor(notify, resolver, injector, modalService, convertService, solutionService, httpService, fieldConfigService, localeService) {
        this.notify = notify;
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.convertService = convertService;
        this.solutionService = solutionService;
        this.httpService = httpService;
        this.fieldConfigService = fieldConfigService;
        this.localeService = localeService;
        this._fieldConfigs = [];
        this._presetFieldConfigs = [];
        this._resetFieldConfigs = [];
        /**
         * 高级模式需要原始fieldConfigs，需要将范围类控件改为单值控件
         */
        this.unformatFieldConfigs = [];
        /**
         * 此值由设计器传入
         * 组件在设计时无法点击被禁用，true
         * 组件在运行时可以点击使用，false
         */
        this.isDisabled = false;
        /**
         * 查询条件列表
         */
        this.queryEmitter = new EventEmitter();
        /**
         * 查询方案cls
         */
        this.cls = 'query-solution';
        /**
         * 查询方案数据源
         */
        this.querySolutionVos = new Array();
        this.querySolutionAdvancedVos = new Array();
        /**
         * 当前所选的方案，有可能不是方案
         */
        this.selectedSolution = new QuerySolutionVo();
        /**
         * 是否折叠
         */
        this.isFold = false;
        /**
         * label和控件是否排成一行，默认是；false时排成上下两行
         */
        this.isControlInline = true;
        /**
         * 是否需要完整显示超过6个字符的标签，默认false
         */
        this.showCompleteLabel = false;
        /**
         * 是否启用加载后查询
         */
        this.enableInitQuery = false;
        /**
         * 选择的控件展示列表
         */
        this.selectedFieldConditions = new Array();
        /**
         * visible属性为true的过滤条件，是变量selectedFieldConditions的子级
         */
        this.visibleSelectedConditions = new Array();
        //方案是否赋默认值
        this.isSetDefaultValue = false;
        //方案是否已赋默认值
        this.doneSetDefaultValue = false;
        //是否已完成自动查询，默认值为true，当enableInitQuery输入值为true时，首次执行ngOnchanges()时将其设为false
        this.doneInitQuery = true;
        //字段显示隐藏动态状态
        this.conditionVisibleState = new BehaviorSubject([]);
        //表单关闭时停止监听BehaviorSubject相关
        this.destroy$ = new Subject();
        /**
         * 条件概要
         */
        this.summaryConditions = [];
        /**
         * 是否启用记录历史方式
         * 上次查询——不能删除、可以另存、不存在变更
         * 方案列表只有上次查询时，上次查询、系统默认都存在
         * 方案列表多个时，有上次查询，上次查询选中
         * 方案列表没有上次查询时，但是LocalStorage有,构造一个上次查询
         *
         */
        this.enableHistory = false;
        /**
         * 是否启动高级模式
         */
        this.openAdvancedMode = false;
        this.filterText = this.localeService.getValue("queryCondition.container.query");
        this.queryAfterValueChange = false;
        this.hideOrgselector = false;
        this.historyRefer = {
            schemeKey: '',
            // 历史记录scheme
            foundSchme: null,
            // 历史方案保存
            schemeKeyLS: '',
            //LocalStorage 历史记录标记
            initCondition: false //LocalStorage是否按照执行完查询
        };
        this.newSaveAsSolutionVo = (/**
         * @return {?}
         */
        () => {
            //当前选中的方案，再修改筛选条件后，其原来的筛选条件并没有变化，仅仅this.selectedFieldConditions有变化
            /** @type {?} */
            const solution = cloneDeep(this.selectedSolution);
            //新增的方案要清空查询方案编号
            solution.code = '';
            //是否系统属性必须设置为False
            solution.isSystem = false;
            //解决方案所属表单
            solution.belongId = this.formId;
            //新增方案Id需要Guid
            solution.id = this.solutionService.getGuid();
            //新增方案isDefault需要设置为false
            solution.isDefault = false;
            //新增方案的筛选条件，是当前选中的筛选条件
            solution.queryConditions = this.selectedFieldConditions;
            //设置类型要清空
            solution.type = "private";
            solution.isChanged = false;
            solution.extendId = 'query-scheme-1';
            solution.extendInfo = new Array();
            return solution;
        });
        this.handleKeyDown = (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            if (event.key == 'Enter') {
                //高级模式下数据格式的问题，输入状态中直接回车，输入框类型控件无法更新value，手动触发一下失去焦点，更新状态
                if (this.selectedSolution.mode === '2') {
                    /** @type {?} */
                    let activeEle = (/** @type {?} */ (document.activeElement));
                    activeEle.blur();
                    activeEle.focus();
                }
                this.query();
            }
        });
        this._idSer = new IdService();
        this.solutionHandler = this.injector.get(QUERYSOLUTION_HANDLER_TOKEN, null, InjectFlags.Optional);
        this.msgSer = this.injector.get(MessagerService);
        this._self = this.injector.get(ElementRef);
        this.cdf = this.injector.get(ChangeDetectorRef);
        this.eventManager = this.injector.get(EventManager);
        if (!this.localeService.langData['extendQuerySolution']) {
            this.localeService.setLocaleData(EXTEND_QUERYSOLUTION_LOCALE);
        }
    }
    /**
     * 字段配置数据源，用于选择字段配置
     * @param {?} fieldConfigJson
     * @return {?}
     */
    set fieldConfigs(fieldConfigJson) {
        this._fieldConfigs = this.solutionService.convertToQueryConditions(fieldConfigJson);
        this.unformatFieldConfigs = fieldConfigJson;
    }
    /**
     * @return {?}
     */
    get fieldConfigs() {
        return this._fieldConfigs;
    }
    /**
     * @param {?} resetFieldConfigJson
     * @return {?}
     */
    set resetFieldConfigs(resetFieldConfigJson) {
        if (!resetFieldConfigJson || !Array.isArray(resetFieldConfigJson) || resetFieldConfigJson.length == 0) {
            return;
        }
        // 规范数据
        /** @type {?} */
        let formatResetConfigJson = resetFieldConfigJson.map((/**
         * @param {?} tConfigItem
         * @return {?}
         */
        tConfigItem => {
            /** @type {?} */
            let findItem = this.fieldConfigs.find((/**
             * @param {?} presetItem
             * @return {?}
             */
            presetItem => presetItem['fieldCode'] == tConfigItem['labelCode']));
            if (findItem) {
                if (!tConfigItem.hasOwnProperty('control')) {
                    tConfigItem['control'] = {};
                }
                tConfigItem['control']['controltype'] = findItem.control.getControlType();
                return tConfigItem;
            }
        }));
        this._resetFieldConfigs = this.solutionService.convertToSimpleQueryConditions(formatResetConfigJson.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item)));
        if (this._resetFieldConfigs.length > 0) {
            this.updateConditionVisibleState(this._resetFieldConfigs);
        }
        // 更新已有配置
        this.solutionService.updateControl(this._presetFieldConfigs, this._resetFieldConfigs);
        this.solutionService.updateControl(this._fieldConfigs, this._resetFieldConfigs);
        this._fieldConfigs = this._fieldConfigs.slice();
        // 更新已有的方案
        this.sysQuerySolutionVo && this.solutionService.updateControl(this.sysQuerySolutionVo.queryConditions, this._resetFieldConfigs);
        // 更新历史记录
        this.historyRefer['foundSchme'] && this.solutionService.updateControl(this.historyRefer['foundSchme'].queryConditions, this._resetFieldConfigs);
        // 更新已选
        this.selectedSolution && this.solutionService.updateControl(this.selectedSolution.queryConditions, this._resetFieldConfigs);
    }
    /**
     * @return {?}
     */
    get resetFieldConfigs() {
        return this._resetFieldConfigs;
    }
    /**
     * 预置查询字段
     * @param {?} presetFieldConfigJson
     * @return {?}
     */
    set presetFieldConfigs(presetFieldConfigJson) {
        this._presetFieldConfigs = this.solutionService.convertToQueryConditions(presetFieldConfigJson);
    }
    /**
     * @return {?}
     */
    get presetFieldConfigs() {
        return this._presetFieldConfigs;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._self.nativeElement.removeEventListener("keydown", this.handleKeyDown);
        //this.removeCurrentSolutionCache();
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes['defaultConfigs']) {
            this.isSetDefaultValue = true;
            if (changes['defaultConfigs'].currentValue && !changes['defaultConfigs'].firstChange) { //设计时不会给defaultConfigs赋值
                this.setQueryConditionValues(changes['defaultConfigs'].currentValue, this.selectedSolution);
                this.initAutoQuery(this.selectedSolution);
            }
        }
        if (changes['enableInitQuery'] && changes['enableInitQuery'].firstChange && changes['enableInitQuery'].currentValue) {
            this.doneInitQuery = false;
        }
    }
    /**
     * 组件初始化
     * @return {?}
     */
    ngOnInit() {
        //只在运行时 获取sessionId，查询已存储方案
        this.initSysQuerySolution();
        if (!this.isDisabled) {
            this.sessionId = this.solutionHandler.getUserSessionId();
            // 缓存历史方案
            this.initAutoQueryByLS();
            // 加载方案列表
            this.loadQuerySolutions();
            //注册键盘监听事件
            this.listenKeyBoard();
            this.getConditionVisibleState().pipe(takeUntil(this.destroy$)).subscribe((/**
             * @param {?} simpleConditions
             * @return {?}
             */
            (simpleConditions) => {
                if (this.selectedFieldConditions.length > 0) {
                    this.updateFieldParams(simpleConditions);
                }
                else {
                    this.templateSimpleConditions = simpleConditions;
                }
                this.visibleSelectedConditions = this.selectedFieldConditions.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                (item) => { return !!item.visible; }));
                this.whenFoldSetSummaryConditions();
                !this.isDisabled && this.solutionHandler.setCurrentQueryConditions(cloneDeep(this.visibleSelectedConditions));
            }));
        }
        else {
            //设计时只加载系统预置方案
            this.loadSysQuerySolution();
        }
    }
    /**
     * @return {?}
     */
    initSysQuerySolution() {
        if (this.presetQuerySolutionName && this.presetQuerySolutionName != '') {
            this.sysQuerySolutionVo = new QuerySolutionVo();
            this.sysQuerySolutionVo.id = this.solutionService.getGuid();
            this.sysQuerySolutionVo.code = (this.presetQuerySolutionName != this.localeService.getValue("querySolution.container.sysPresetName")) ? this.presetQuerySolutionName : this.localeService.getValue("querySolution.container.defaultName");
            this.sysQuerySolutionVo.queryConditions = cloneDeep(this.presetFieldConfigs);
            this.sysQuerySolutionVo.belongId = this.formId;
            this.sysQuerySolutionVo.isSystem = true;
            this.sysQuerySolutionVo.mode = '1';
            // this.querySolutionVos.push(this.sysQuerySolutionVo);
        }
    }
    /**
     * 加载系统预置方案
     * @return {?}
     */
    loadSysQuerySolution() {
        this.querySolutionVos.push(this.sysQuerySolutionVo);
        this.selectedSolution = cloneDeep(this.sysQuerySolutionVo);
        this.loadQueryConditions();
    }
    /**
     * 规范方案条件
     * @private
     * @param {?} tConvertor
     * @param {?} element
     * @param {?=} fromJobject
     * @return {?}
     */
    formatQuerySolutionVO(tConvertor, element, fromJobject = false) {
        /** @type {?} */
        let querysolutionVO;
        /** @type {?} */
        let sourceData;
        /** @type {?} */
        let _fieldCodeArr = [];
        /** @type {?} */
        let _tQueryConditions;
        if (fromJobject) {
            querysolutionVO = tConvertor.initFromJobject(element);
        }
        else {
            querysolutionVO = element;
        }
        this.fieldConfigs.forEach((/**
         * @param {?} _item
         * @return {?}
         */
        _item => { _fieldCodeArr.push(_item.fieldCode); }));
        if (querysolutionVO && querysolutionVO.queryConditions && querysolutionVO.queryConditions.length > 0) {
            //若表单上删除了某个字段，但已保存的自定义方案中包含该字段时，在加载方案过程中将该字段剔除
            _tQueryConditions = querysolutionVO.queryConditions.filter((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                return _fieldCodeArr.indexOf(element.fieldCode) > -1;
            }));
            querysolutionVO.queryConditions = _tQueryConditions;
            //对自定义方案的国际化信息、帮助控件的帮助前及帮助后事件进行动态赋值
            querysolutionVO.queryConditions.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                sourceData = this.fieldConfigs.find((/**
                 * @param {?} _item
                 * @return {?}
                 */
                _item => _item.fieldCode == element.fieldCode));
                element.fieldName = sourceData.fieldName;
                element.placeHolder = sourceData.placeHolder;
                element.beginPlaceHolder = sourceData.hasOwnProperty('beginPlaceHolder') ? sourceData['beginPlaceHolder'] : '';
                element.endPlaceHolder = sourceData.hasOwnProperty('endPlaceHolder') ? sourceData['endPlaceHolder'] : '';
                if (sourceData.control.preEventCmd) {
                    ((/** @type {?} */ (element.control))).preEventCmd = sourceData.control.preEventCmd;
                }
                if (sourceData.control.postEventCmd) {
                    ((/** @type {?} */ (element.control))).postEventCmd = sourceData.control.postEventCmd;
                }
                if (sourceData.control.clear) {
                    ((/** @type {?} */ (element.control))).clear = sourceData.control.clear;
                }
                if (sourceData.control.click) {
                    ((/** @type {?} */ (element.control))).click = sourceData.control.click;
                }
                if (sourceData.control.beforeShow) {
                    ((/** @type {?} */ (element.control))).beforeShow = sourceData.control.beforeShow;
                }
                if (sourceData.control.beforeHide) {
                    ((/** @type {?} */ (element.control))).beforeHide = sourceData.control.beforeHide;
                }
                if (sourceData.control.dateChangedCmd) {
                    ((/** @type {?} */ (element.control))).dateChangedCmd = sourceData.control.dateChangedCmd;
                }
                if (sourceData.control.enumValues && sourceData.control.enumValues.length > 0) {
                    ((/** @type {?} */ (element.control))).enumValues = sourceData.control.enumValues;
                    ((/** @type {?} */ (element.control))).enumValues = sourceData.control.enumValues;
                }
                if (sourceData.control.data && sourceData.control.data.length > 0) {
                    ((/** @type {?} */ (element.control))).data = sourceData.control.data;
                }
            }));
            //在此处querycondition处理完毕，需要将querycondition内容填充至queryConditionsAdvanced
            if (querysolutionVO.queryConditionsAdvanced) {
                /** @type {?} */
                let _queryConditionsAdvanced = tConvertor.complicateTreeData(querysolutionVO.queryConditionsAdvanced, querysolutionVO.queryConditions);
                querysolutionVO.queryConditionsAdvanced = cloneDeep(_queryConditionsAdvanced);
            }
        }
        return querysolutionVO;
    }
    /**
     * 加载查询方案数据
     * @return {?}
     */
    loadQuerySolutions() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const self = this;
            this.httpService.query(this.formId, this.sessionId).subscribe((/**
             * @param {?} items
             * @return {?}
             */
            (items) => {
                /** @type {?} */
                const convertor = new QuerySolutionVoConvertor();
                /** @type {?} */
                let querysolutionVO;
                if (items && items.length > 0) {
                    //高级模式未开启状态下，过滤掉相关数据
                    if (!this.openAdvancedMode) {
                        items = items.filter((/**
                         * @param {?} val
                         * @return {?}
                         */
                        val => val.mode !== '2'));
                    }
                    items.forEach((/**
                     * @param {?} element
                     * @return {?}
                     */
                    element => {
                        querysolutionVO = this.formatQuerySolutionVO(convertor, element, true);
                        if (this.enableHistory && querysolutionVO['type'] == 'pre' && querysolutionVO.mode !== '2') {
                            // 如果返回列表内存在历史记录                        
                            querysolutionVO.code = this.localeService.getValue("querySolution.container.histroyName");
                            this.historyRefer['schemeKey'] = querysolutionVO.id;
                            this.historyRefer['foundSchme'] = cloneDeep(querysolutionVO);
                            this.historyRefer['initCondition'] = true;
                            //  this.defaultQuerySolution = cloneDeep(querysolutionVO);
                        }
                        else if (querysolutionVO['type'] != 'pre') {
                            //根据version 选择存入哪一个数据 1为标准，2为高级
                            if (querysolutionVO.mode === '2') {
                                this.querySolutionAdvancedVos.push(querysolutionVO);
                            }
                            else {
                                this.querySolutionVos.push(querysolutionVO);
                            }
                            if (querysolutionVO.isDefault) {
                                //如果有默认方案，则设置全局默认方案
                                this.defaultQuerySolution = cloneDeep(querysolutionVO);
                            }
                        }
                    }));
                    //self.setSolutionCache(this.querySolutionVos);
                }
                if (this.enableHistory && !this.historyRefer['initCondition']) {
                    //如果还没有设置条件
                    this.formatInitQuerySolution();
                }
                if (this.enableHistory && this.historyRefer['initCondition']) {
                    this.selectedSolution = cloneDeep(this.historyRefer['foundSchme']);
                    //只有缓存记录
                    this.querySolutionVos.splice(0, 0, this.historyRefer['foundSchme']);
                    //历史记录不支持高级模式
                    // if(this.historyRefer['foundSchme'].mode === '2' ) {
                    //     this.querySolutionAdvancedVos.splice(0, 0, this.historyRefer['foundSchme']);
                    // } else {
                    //     this.querySolutionVos.splice(0, 0, this.historyRefer['foundSchme']);
                    // }
                    if (this.querySolutionVos.length === 1) {
                        // 只有上次查询时
                        this.querySolutionVos.push(this.sysQuerySolutionVo);
                    }
                    if (this.querySolutionAdvancedVos.length === 0) {
                        // 只有上次查询时
                        this.querySolutionAdvancedVos.push(this.initAdvancedSolution());
                    }
                    //self.setSolutionCache(this.querySolutionVos);
                    this.loadQueryConditions();
                    // if(this.historyRefer['schemeKey'] !== ''){
                    //     //更新一次缓存
                    //     this.changeQueryHistroy(false);
                    // }                
                }
                else if (this.defaultQuerySolution || this.querySolutionVos.length || this.querySolutionAdvancedVos.length) {
                    //如果已查到有默认方案，或已有存储的方案
                    //不再加载系统配置的方案，首先加载默认方案，没有默认则加载第一个方案
                    if (this.defaultQuerySolution && this.defaultQuerySolution.id != '') {
                        this.selectedSolution = cloneDeep(this.defaultQuerySolution);
                    }
                    else {
                        /** @type {?} */
                        const publicSolution = [...this.querySolutionVos, ...this.querySolutionAdvancedVos].find((/**
                         * @param {?} item
                         * @return {?}
                         */
                        item => item.type == 'public'));
                        if (publicSolution) {
                            this.selectedSolution = publicSolution;
                        }
                        else {
                            /** @type {?} */
                            const orgSolution = [...this.querySolutionVos, ...this.querySolutionAdvancedVos].find((/**
                             * @param {?} item
                             * @return {?}
                             */
                            item => item.type == 'org'));
                            this.selectedSolution = !!orgSolution ? orgSolution : cloneDeep([...this.querySolutionVos, ...this.querySolutionAdvancedVos][0]);
                        }
                    }
                    if (this.querySolutionVos.length < 1) {
                        this.querySolutionVos.push(this.sysQuerySolutionVo);
                    }
                    if (this.querySolutionAdvancedVos.length < 1) {
                        this.querySolutionAdvancedVos.push(this.initAdvancedSolution());
                    }
                    this.loadQueryConditions();
                }
                else {
                    //如果没有任何已存储的方案，则加载系统配置方案
                    this.loadSysQuerySolution();
                    this.querySolutionAdvancedVos.push(this.initAdvancedSolution());
                }
                if (this.isSetDefaultValue && !this.historyRefer['initCondition']) {
                    this.setQueryConditionValues(this.defaultConfigs, this.selectedSolution);
                }
                this.initAutoQuery(this.selectedSolution);
            }), (/**
             * @param {?} e
             * @return {?}
             */
            e => {
                if (e && e.message) {
                    this.msgSer.show('error', e.message, { showHeader: false });
                }
            }));
        });
    }
    /**
     * @param {?} querySolutionVos
     * @return {?}
     */
    setSolutionCache(querySolutionVos) {
        if (!this.isDisabled && gspframeworkService && querySolutionVos && querySolutionVos.length) {
            // 获取当前功能菜单信息, 并以功能菜单ID为缓存key
            /** @type {?} */
            const option = gspframeworkService.rtf.session.getCommonVariable();
            SolutionCacheService.setSolutionCache(option.tabId, querySolutionVos);
            SolutionCacheService.solutionListChanged.next(true);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setCurrentSolutionCache(value) {
        if (!this.isDisabled && gspframeworkService && value) {
            // 获取当前功能菜单信息, 并以功能菜单ID为缓存key
            /** @type {?} */
            const option = gspframeworkService.rtf.session.getCommonVariable();
            if (option && option.tabId) {
                SolutionCacheService.setCurrentSolution(option.tabId, value);
            }
        }
    }
    /*
        removeCurrentSolutionCache() {
            if (!this.isDisabled && gspframeworkService) {
                // 获取当前功能菜单信息, 并以功能菜单ID为缓存key
                const option = gspframeworkService.rtf.session.getCommonVariable();
                if (option && option.tabId) {
                    SolutionCacheService.removeCurrentSolution(option.tabId);
                }
            }
        }
        */
    /**
     * @return {?}
     */
    loadQueryConditions() {
        //加载筛选条件
        this.selectedFieldConditions = new Array();
        if (this.selectedSolution && this.selectedSolution.queryConditions && this.selectedSolution.queryConditions.length > 0) {
            // this.selectedFieldConditions = this.selectedSolution.queryConditions as Array<QueryCondition>;
            this.selectedFieldConditions = this.selectedSolution.queryConditions;
            if (this.templateSimpleConditions && this.templateSimpleConditions.length > 0) {
                this.updateFieldParams(this.templateSimpleConditions);
                this.templateSimpleConditions = new Array();
            }
        }
        this.visibleSelectedConditions = this.selectedFieldConditions.filter((/**
         * @param {?} item
         * @return {?}
         */
        (item) => { return !!item.visible; }));
        // 如果方案的变更是在収折时
        this.whenFoldSetSummaryConditions();
        this.showSaveButton = this.selectedSolution.isSystem ? false : true;
        !this.isDisabled && this.solutionHandler.setCurrentQueryConditions(cloneDeep(this.visibleSelectedConditions));
        //this.setCurrentSolutionCache(this.selectedSolution);
    }
    /**
     * @return {?}
     */
    getConditionVisibleState() {
        return this.conditionVisibleState;
    }
    /**
     * 传递过来的是已经处理过的条件
     * @param {?} simpleCondition
     * @return {?}
     */
    updateConditionVisibleState(simpleCondition) {
        this.conditionVisibleState.next(simpleCondition);
    }
    // 监听resetFieldConfigs变化后，更新selectedFieldConditions，并同步至querycondition，可实现筛选条件动态显示隐藏
    /**
     * @private
     * @param {?} simpleConditions
     * @return {?}
     */
    updateFieldParams(simpleConditions) {
        if (!simpleConditions || !simpleConditions.length) {
            return;
        }
        /** @type {?} */
        const currentConditions = cloneDeep(this.selectedFieldConditions);
        /** @type {?} */
        const updatedConditions = currentConditions.map((/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            for (const simpleCondition of simpleConditions) {
                if (simpleCondition.hasOwnProperty('visible') && item.fieldCode == simpleCondition['fieldCode'] && item.visible !== simpleCondition['visible']) {
                    item.visible = simpleCondition['visible'];
                    item.value.clearValue();
                    this.markAsChanged(true, this.selectedSolution.id);
                }
            }
            return item;
        }));
        this.selectedFieldConditions = updatedConditions.slice();
    }
    /**
     * @return {?}
     */
    saveAs() {
        this.openSaveAsDialog(this.localeService.getValue("querySolution.saveAsDialog.title"));
    }
    /**
     * 获取默认标签
     * @param {?} solution
     * @return {?}
     */
    getDefaultLabel(solution) {
        if (!(this.defaultQuerySolution)) {
            return { 'visibility': 'hidden' };
        }
        else {
            if (solution.id == this.defaultQuerySolution.id) {
                // //不处理了
            }
            else {
                return { 'visibility': 'hidden' };
            }
        }
    }
    /**
     * 方案选择事件
     * @param {?} solution 当前选中的方案
     * @return {?}
     */
    select(solution) {
        this.selectedSolution = Object.assign(new QuerySolutionVo(), solution);
        if (solution.queryConditions && solution.queryConditions.length > 0) {
            this.selectedFieldConditions = this.selectedSolution.queryConditions;
        }
        else {
            this.selectedFieldConditions = new Array();
        }
        this.showSaveButton = this.selectedSolution.isSystem ? false : true;
        this.visibleSelectedConditions = this.selectedFieldConditions.filter((/**
         * @param {?} item
         * @return {?}
         */
        (item) => { return !!item.visible; }));
        !this.isDisabled && this.solutionHandler.setCurrentQueryConditions(cloneDeep(this.visibleSelectedConditions));
        //this.setCurrentSolutionCache(this.selectedSolution);
        // 如果方案的变更是在収折时
        this.whenFoldSetSummaryConditions();
    }
    /**
     * @param {?} solution
     * @return {?}
     */
    selectAndQuery(solution) {
        //高级模式不使用默认值
        if (solution.mode !== '2' && (this.defaultConfigs && this.defaultConfigs.isCurrent || (solution.isSystem && solution.type !== 'pre'))) {
            this.setQueryConditionValues(this.defaultConfigs, solution); //已包含select操作
        }
        else {
            if (solution.mode !== '2' && this.enableHistory && solution.type == 'pre') {
                /** @type {?} */
                let conditions = cloneDeep(this.historyRefer['foundSchme']['queryConditions']);
                if (conditions.length > 0) {
                    solution.queryConditions = conditions;
                }
            }
            this.select(solution);
        }
        this.query();
    }
    /**
     * 打开字段配置窗口
     * @return {?}
     */
    openFieldConfigDialog() {
        this.farrisQueryCondition.openFieldConfigDialog();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    fieldConditionsChangeHander($event) {
        /** @type {?} */
        let data = $event;
        if (this.selectedSolution.mode === '2') {
            this.selectedSolution.queryConditions = data;
            /** @type {?} */
            let target = this.querySolutionAdvancedVos.find((/**
             * @param {?} val
             * @return {?}
             */
            val => val.id === this.selectedSolution.id));
            if (target) {
                target.queryConditions = this.selectedSolution.queryConditions;
                target.queryConditionsAdvanced = this.selectedSolution.queryConditionsAdvanced;
            }
        }
        // this.selectedSolution.queryConditions = data;此时不改变当前选中的方案，等到保存时，直接调用this.selectedFieldConditions来保存。
        this.selectedFieldConditions = data;
        this.visibleSelectedConditions = this.selectedFieldConditions.filter((/**
         * @param {?} item
         * @return {?}
         */
        (item) => { return !!item.visible; }));
        if (!this.isDisabled) {
            this.solutionHandler.setCurrentQueryConditions(cloneDeep(this.visibleSelectedConditions));
            this.solutionHandler.setFilterConditions(this.visibleSelectedConditions);
            //this.setCurrentSolutionCache(this.selectedSolution);
        }
        if (this.queryAfterValueChange) {
            this.query();
        }
        this.markAsChanged(true, this.selectedSolution.id);
    }
    //高级模式新增，高级模式下不仅需要修改conditions，还需要修改solution的相关属性
    /**
     * @param {?} $event
     * @return {?}
     */
    fieldSolutionChangeHander($event) {
        /** @type {?} */
        let data = $event;
        this.selectedSolution = data;
    }
    /**
     * 保存方案
     * @return {?}
     */
    save() {
        if (!this.formId) {
            this.solutionService.showInfo(this.localeService.getValue("querySolution.container.pleaseInput"), 'error', '', 1500);
            return;
        }
        //id为空则表示没有预置方案，则此时保存方案相当于新增一个方案
        if (!this.selectedSolution.id) {
            this.openSaveAsDialog(this.localeService.getValue("querySolution.container.save"));
        }
        //直接保存
        else {
            /** @type {?} */
            const checkAuthority$ = this.httpService.getAuth('QuerySolution', this.sessionId);
            checkAuthority$.pipe(switchMap((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                if (!data['success'] && (this.selectedSolution.type == 'public' || this.selectedSolution.type == 'org')) {
                    this.solutionService.showInfo(this.localeService.getValue('extendQuerySolution.auth.updateError'), 'warning', '', 1500);
                    return of(false);
                }
                else {
                    this.selectedSolution.queryConditions = this.selectedFieldConditions;
                    /** @type {?} */
                    const save$ = this.httpService.update(this.selectedSolution, this.sessionId);
                    return save$.pipe(tap((/**
                     * @return {?}
                     */
                    () => {
                        if (this.selectedSolution.mode === '2') {
                            /** @type {?} */
                            let tempIndex = this.querySolutionAdvancedVos.findIndex((/**
                             * @param {?} x
                             * @return {?}
                             */
                            x => x.id == this.selectedSolution.id));
                            // this.selectedFieldConditions = this.selectedSolution.queryConditions;
                            this.querySolutionAdvancedVos.splice(tempIndex, 1, this.selectedSolution);
                        }
                        else {
                            /** @type {?} */
                            let tempIndex = this.querySolutionVos.findIndex((/**
                             * @param {?} x
                             * @return {?}
                             */
                            x => x.id == this.selectedSolution.id));
                            // this.selectedFieldConditions = this.selectedSolution.queryConditions;
                            this.querySolutionVos.splice(tempIndex, 1, this.selectedSolution);
                        }
                        this.markAsChanged(false, this.selectedSolution.id);
                        this.farrisQueryCondition.canClearRelatedFields = false;
                        this.solutionService.showInfo(this.localeService.getValue("querySolution.container.saveSuccess"), 'success', '', 1500);
                    }), (/**
                     * @param {?} error
                     * @return {?}
                     */
                    error => {
                        this.solutionService.showInfo(this.localeService.getValue("querySolution.container.saveFail"), 'error', '', 1500);
                        throw error;
                    })));
                }
            })), tap((/**
             * @return {?}
             */
            () => { }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                console.warn(this.localeService.getValue('extendQuerySolution.auth.apiError'));
            }))).subscribe();
        }
    }
    /**
     * 打开另存为对话框，点击保存按钮时也走该逻辑
     * @param {?} title
     * @return {?}
     */
    openSaveAsDialog(title) {
        if (!this.formId) {
            this.solutionService.showInfo(this.localeService.getValue("querySolution.container.pleaseInput"), 'error', '', 1500);
            return;
        }
        this.saveAsDialog.title = title;
        this.saveAsDialog.querySolution = this.newSaveAsSolutionVo();
        this.saveAsDialog.radioGroupValue = 'private';
        this.saveAsDialog.show();
    }
    /**
     * 另存为确定事件处理
     * @param {?} _event
     * @return {?}
     */
    saveAsConfrimHandler(_event) {
        /** @type {?} */
        const solution = _event['querySolution'];
        if (solution.queryConditions && solution.queryConditions.length) {
            solution.queryConditions.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                if (!!element.readonly) {
                    element.readonly = false;
                }
            }));
        }
        this.httpService.create(solution, this.sessionId).subscribe((/**
         * @return {?}
         */
        () => {
            //重新设置全局的默认方案
            if (solution.isDefault) { //被设置为默认方案
                this.defaultQuerySolution = solution;
                this.querySolutionVos = this.querySolutionVos.map((/**
                 * @param {?} vo
                 * @return {?}
                 */
                vo => {
                    vo.isDefault = false;
                    return vo;
                }));
                this.querySolutionAdvancedVos = this.querySolutionAdvancedVos.map((/**
                 * @param {?} vo
                 * @return {?}
                 */
                vo => {
                    vo.isDefault = false;
                    return vo;
                }));
            }
            //用户保存自己的筛选方案后，不再显示系统默认的方案，操作方案为高级模式时不影响标准
            if (this.querySolutionVos.length === 1 && this.querySolutionVos[0].isSystem && solution.mode === '1') {
                //用户没有配置自己的筛选方案时，或者用户只配置了一个筛选方案时，此数组都有一个方案；若此方案是系统默认方案，则应在另存为时删掉
                this.querySolutionVos = new Array();
            }
            else if (this.querySolutionVos.length === 2 && this.enableHistory) {
                /** @type {?} */
                let filterSolutionVos = new Array();
                filterSolutionVos = this.querySolutionVos.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    if (item.type == 'pre') {
                        return true;
                    }
                    return !item.isSystem;
                }));
                this.querySolutionVos = filterSolutionVos;
            }
            //高级模式同理
            if (this.querySolutionAdvancedVos.length === 1 && this.querySolutionAdvancedVos[0].isSystem && solution.mode === '2') {
                this.querySolutionAdvancedVos = new Array();
            }
            else if (this.querySolutionAdvancedVos.length === 2 && this.enableHistory) {
                /** @type {?} */
                let filterSolutionVos = new Array();
                filterSolutionVos = this.querySolutionAdvancedVos.filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    if (item.type == 'pre') {
                        return true;
                    }
                    return !item.isSystem;
                }));
                this.querySolutionAdvancedVos = filterSolutionVos;
            }
            solution.mode === '2' ? this.querySolutionAdvancedVos.push(solution) : this.querySolutionVos.push(solution);
            this.selectedSolution = solution;
            this.showSaveButton = this.selectedSolution.isSystem ? false : true;
            this.selectedFieldConditions = this.selectedSolution.queryConditions;
            this.visibleSelectedConditions = this.selectedFieldConditions.filter((/**
             * @param {?} item
             * @return {?}
             */
            (item) => { return !!item.visible; }));
            this.farrisQueryCondition.canClearRelatedFields = false;
            this.saveAsDialog.isDefault = false;
            this.solutionService.showInfo(this.localeService.getValue("querySolution.container.saveSuccess"), 'success', '', 1500);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.solutionService.showInfo(this.localeService.getValue("querySolution.container.saveFail"), 'error', '', 1500);
            throw error;
        }));
    }
    /**
     * 打开管理界面
     * @return {?}
     */
    openManangerDialog() {
        this.httpService.getAuth('QuerySolution', this.sessionId).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            this.manageDialog.authorityError = data['success'] ? false : true;
            this.manageDialog.show(cloneDeep([...this.querySolutionVos, ...this.querySolutionAdvancedVos]));
        }));
    }
    /**
     * 管理界面确定处理
     * @param {?} _event
     * @return {?}
     */
    managerConfirmHandler(_event) {
        /** @type {?} */
        let obj = _event;
        if (obj['validator'] == true) {
            //点击checkbox时，newDefaultQuerySolution被赋值； 全局默认方案被删除时，newDefaultQuerySolution变为null
            /** @type {?} */
            const defaultId = obj['newDefaultQuerySolution'] ? obj['newDefaultQuerySolution'].id : '';
            /** @type {?} */
            const belongId = this.formId;
            //若没有删除任何方案，deletedQuerySolutionVos会是一个空数组
            /** @type {?} */
            const deletedIds = obj['deletedQuerySolutionIds'];
            this.httpService.batchUpdate({ defaultId, belongId, deletedIds }, this.sessionId).subscribe((/**
             * @return {?}
             */
            () => {
                //把删除后的vo赋值给 this.querySolutionVos；如果没删除方案， this.querySolutionVos跟obj['splicedQuerySolutionVos']同值
                //默认方案的变化也记录在updatedQuerySolutionVos中
                this.querySolutionVos = obj['updatedQuerySolutionVos'].filter((/**
                 * @param {?} val
                 * @return {?}
                 */
                val => val.mode !== '2'));
                this.querySolutionAdvancedVos = obj['updatedQuerySolutionVos'].filter((/**
                 * @param {?} val
                 * @return {?}
                 */
                val => val.mode === '2'));
                if (!obj['currentDefaultQuerySolutionId']) { //如果传过来的当前默认方案id是空，代表所有默认方案都取消了
                    this.defaultQuerySolution = null;
                }
                //如果有默认方案先显示默认方案，如果没有默认方案则直接显示当前查询方案的第一个；如果没有任何查询方案则直接清空查询方案，则显示系统预置的默认方案
                if (defaultId) {
                    //已设置默认方案
                    this.select(obj['newDefaultQuerySolution']);
                    this.defaultQuerySolution = obj['newDefaultQuerySolution'];
                    if (this.querySolutionVos.length === 0 || (this.enableHistory && this.querySolutionVos.length === 1 && this.querySolutionVos[0].type == 'pre')) {
                        this.querySolutionVos.push(this.sysQuerySolutionVo);
                    }
                    if (!this.querySolutionAdvancedVos.length) {
                        this.querySolutionAdvancedVos.push(this.initAdvancedSolution());
                    }
                }
                else {
                    //未更改默认方案，判断当前选择的查询方案是否已被删除
                    if (deletedIds.includes(this.selectedSolution.id)) { //如果被删除
                        if (this.querySolutionVos.length > 0) {
                            if (this.enableHistory && this.querySolutionVos.length == 1 && this.querySolutionVos[0].type == 'pre') {
                                this.select(this.sysQuerySolutionVo);
                                this.querySolutionVos.push(this.sysQuerySolutionVo);
                            }
                            else {
                                /** @type {?} */
                                const publicSolution = this.querySolutionVos.find((/**
                                 * @param {?} item
                                 * @return {?}
                                 */
                                item => item.type == 'public'));
                                if (publicSolution) {
                                    this.select(publicSolution);
                                }
                                else {
                                    /** @type {?} */
                                    const orgSolution = this.querySolutionVos.find((/**
                                     * @param {?} item
                                     * @return {?}
                                     */
                                    item => item.type == 'org'));
                                    this.select(!!orgSolution ? orgSolution : cloneDeep(this.querySolutionVos[0]));
                                }
                            }
                        }
                        else {
                            this.select(this.sysQuerySolutionVo);
                            this.querySolutionVos.push(this.sysQuerySolutionVo);
                        }
                        //高级模式没有的话也需要增加默认
                        if (!this.querySolutionAdvancedVos.length) {
                            this.querySolutionAdvancedVos.push(this.initAdvancedSolution());
                        }
                    }
                    else {
                        //什么也没发生
                        //把所有的默认都取消了
                        if (this.querySolutionVos.length === 0 || (this.enableHistory && this.querySolutionVos.length === 1 && this.querySolutionVos[0].type == 'pre')) {
                            this.querySolutionVos.push(this.sysQuerySolutionVo);
                        }
                        if (!this.querySolutionAdvancedVos.length) {
                            this.querySolutionAdvancedVos.push(this.initAdvancedSolution());
                        }
                    }
                }
                this.solutionService.showInfo(this.localeService.getValue("querySolution.container.saveSuccess"), 'success', '', 1500);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                this.solutionService.showInfo(this.localeService.getValue("querySolution.container.saveFail"), 'error', '', 1500);
                return Observable.throw(error);
            }));
        }
        else {
            //校验失败
        }
    }
    /**
     * 执行筛选
     * @return {?}
     */
    query() {
        if (!this.isDisabled) {
            /** @type {?} */
            const errorArr = this.solutionService.isValid(this.visibleSelectedConditions);
            //高级模式下不用判断require，有自己的校验逻辑
            if (errorArr && errorArr.length && this.selectedSolution.mode !== '2') {
                /** @type {?} */
                const errorFields = errorArr.map((/**
                 * @param {?} error
                 * @return {?}
                 */
                error => error.field));
                this.solutionService.showInfo(this.localeService.getValue("querySolution.container.require").replace('{fields}', errorFields.join(', ')), 'warning', '', 2500);
            }
            else {
                //高级模式下必须所有条件都有值，否则会影响层级与关联关系
                /** @type {?} */
                let queryConditions = cloneDeep(this.visibleSelectedConditions);
                if (this.selectedSolution.mode === '2') {
                    queryConditions = cloneDeep(this.selectedFieldConditions);
                    /** @type {?} */
                    let emptyFlag = queryConditions.find((/**
                     * @param {?} val
                     * @return {?}
                     */
                    val => val.value.isEmpty()));
                    if (emptyFlag) {
                        this.notify.warning(this.localeService.getValue('advancedMode.auth.conditionEmptyError'));
                        return;
                    }
                }
                this.solutionHandler.setFilterConditions(queryConditions);
                this.queryEmitter.emit(queryConditions);
                // 更新历史记录
                this.changeQueryHistroy();
            }
        }
    }
    /**
     * 清空->条件全部重置为空
     * @return {?}
     */
    clear() {
        // this.isFold = !this.isFold;
        /** @type {?} */
        const isNotEmpty = this.visibleSelectedConditions.some((/**
         * @param {?} condition
         * @return {?}
         */
        condition => condition.value.isEmpty() == false));
        if (isNotEmpty) {
            /** @type {?} */
            const newList = cloneDeep(this.farrisQueryCondition.resetSelectedConditionValues(true));
            this.selectedFieldConditions = newList;
            this.selectedSolution.queryConditions = newList;
            this.visibleSelectedConditions = this.selectedFieldConditions.filter((/**
             * @param {?} item
             * @return {?}
             */
            (item) => { return !!item.visible; }));
            this.solutionHandler.setCurrentQueryConditions(cloneDeep(this.visibleSelectedConditions));
            this.solutionHandler.setFilterConditions(this.visibleSelectedConditions);
            this.markAsChanged(true, this.selectedSolution.id);
            this.query();
        }
    }
    /**
     * 折叠按钮的清空
     * @return {?}
     */
    foldClearHandler() {
        if (this.isFold) {
            // 如果点击的时候是収折的
            this.isFold = false;
            if (this.summaryConditions.length > 0) {
                this.summaryConditions = [];
                this.clear();
            }
        }
        else {
            // 如果点击的时候是展开的
            this.clear();
        }
    }
    /**
     * 箭头点击事件
     * @return {?}
     */
    arrowClick() {
        this.isFold = !this.isFold;
        this.whenFoldSetSummaryConditions();
        if (!this.isFold) {
            this.summaryConditions = [];
        }
    }
    /**
     * @private
     * @return {?}
     */
    whenFoldSetSummaryConditions() {
        if (this.isFold) {
            // 如果収折
            /** @type {?} */
            const isNotEmpty = this.visibleSelectedConditions.some((/**
             * @param {?} condition
             * @return {?}
             */
            condition => condition.value.isEmpty() == false));
            if (isNotEmpty) {
                this.summaryConditions = this.visibleSelectedConditions.filter((/**
                 * @param {?} condition
                 * @return {?}
                 */
                condition => condition.value.isEmpty() == false));
            }
            else {
                this.summaryConditions = [];
            }
        }
    }
    /**
     * 为系统预置方案或者自定义查询方案设置筛选条件默认值
     * @param {?} configs 默认值设置
     * @param {?} selectedSolution 当前选择的筛选方案
     * @return {?}
     */
    setQueryConditionValues(configs, selectedSolution) {
        /** @type {?} */
        let targetSolution;
        /** @type {?} */
        let targetSolutionWithValues;
        //高级模式下不支持默认值
        if (configs && Array.isArray(configs.fieldConfigs) && configs.fieldConfigs.length && selectedSolution.mode !== '2') {
            if (selectedSolution.hasOwnProperty('type') && selectedSolution['type'] == 'pre') {
                //如果是历史记录
                targetSolution = null;
                this.select(selectedSolution);
            }
            else {
                targetSolution = configs.isCurrent ? selectedSolution : (selectedSolution.isSystem ? selectedSolution : null);
            }
            if (targetSolution && targetSolution.queryConditions && targetSolution.queryConditions.length) {
                targetSolutionWithValues = cloneDeep(this.solutionService.setValues(targetSolution, configs.fieldConfigs, !!configs.readonly));
                this.doneSetDefaultValue = true;
                this.select(targetSolutionWithValues);
            }
            else {
                //不为自定义方案设置默认值时，标记下要为其赋默认值的意图，但未成功
                this.doneSetDefaultValue = true;
                //如果没有设置默认值，就把当前选中方案的条件的值传出
                this.solutionHandler.setCurrentQueryConditions(this.selectedSolution.queryConditions);
            }
        }
        else {
            this.select(selectedSolution);
        }
    }
    /**
     * 加载筛选方案后自动查询
     * @param {?} currentSolution 当前筛选方案
     * @return {?}
     */
    initAutoQuery(currentSolution) {
        if (this.enableInitQuery && this.doneInitQuery && this.enableHistory && currentSolution.mode !== '2') {
            // 已通过历史记录进行过查询
            return;
        }
        /** @type {?} */
        let enableQuery = true;
        if (currentSolution && currentSolution.queryConditions && currentSolution.queryConditions.length) {
            if (this.isSetDefaultValue && !this.doneSetDefaultValue) {
                enableQuery = false;
            }
        }
        else {
            enableQuery = false;
        }
        if (enableQuery && this.enableInitQuery) {
            // this.solutionHandler.setFilterConditions(this.selectedSolution.queryConditions); 执行query方法时，已经执行setFilterConditions
            //if(this._self.nativeElement.querySelector('.farris-panel .btn-group .btn-primary')){
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.query();
                this.doneInitQuery = true;
            }));
            //}
        }
    }
    /**
     * 当前查询方案的筛选条件发生变化时，标记方案处于编辑状态
     * @param {?} isChanged 方案是否处于编辑状态
     * @param {?} solutionId 需要标记是否处于编辑状态的方案的id
     * @return {?}
     */
    markAsChanged(isChanged, solutionId) {
        this.querySolutionVos.forEach((/**
         * @param {?} solution
         * @return {?}
         */
        solution => {
            if (solution.id == solutionId)
                solution.isChanged = isChanged;
        }));
        this.querySolutionAdvancedVos.forEach((/**
         * @param {?} solution
         * @return {?}
         */
        solution => {
            if (solution.id == solutionId)
                solution.isChanged = isChanged;
        }));
        this.selectedSolution.isChanged = isChanged;
        this.cdf.detectChanges();
    }
    /**
         * 处理筛选按钮和清空按钮的响应式位置变更
         * @param $event farris-querycondition组件内部是否显示按钮
         */
    // showButtonHandle($event: any) {
    //     if(!this.isDisabled){
    //         let data = $event;
    //         this.queryButtonOnRight = !data;
    //         if(this.enableInitQuery && !this.doneInitQuery) {
    //             this.initAutoQuery(this.selectedSolution);
    //         }
    //     }
    // }
    /**
     * 键盘监听函数，当按下回车键时相当于按下筛选按钮
     * @private
     * @return {?}
     */
    listenKeyBoard() {
        this._self.nativeElement.addEventListener("keydown", this.handleKeyDown);
    }
    /**
     * 自动初始化查询
     * 启用历史记录，并且启用了初始化查询，如果有条件，就进行查询
     * @private
     * @return {?}
     */
    initAutoQueryByLS() {
        // 启用历史
        if (this.enableHistory && !this.isDisabled) {
            // key
            this.setLSKey();
            // 初始化对象
            this.initQuerySolution();
            // 如果设置了初始查询
            if (this.enableInitQuery) {
                this.formatInitQuerySolution();
                if (this.historyRefer['foundSchme']['queryConditions'].length > 0) {
                    /** @type {?} */
                    const queryConditions = cloneDeep(this.historyRefer['foundSchme']['queryConditions']);
                    this.selectedFieldConditions = queryConditions;
                    this.visibleSelectedConditions = this.selectedFieldConditions.filter((/**
                     * @param {?} item
                     * @return {?}
                     */
                    (item) => { return !!item.visible; }));
                    /** @type {?} */
                    const visibleConditions = cloneDeep(this.visibleSelectedConditions);
                    // 设置查询条件
                    this.solutionHandler.setFilterConditions(visibleConditions);
                    // 抛出查询事件
                    this.queryEmitter.emit(visibleConditions);
                    // 标记
                    this.doneInitQuery = true;
                }
            }
        }
    }
    /**
     * 初始化
     * @private
     * @return {?}
     */
    initQuerySolution() {
        /** @type {?} */
        let querysolutionVO = new QuerySolutionVo();
        querysolutionVO.id = this.solutionService.getGuid();
        querysolutionVO.code = this.localeService.getValue("querySolution.container.histroyName");
        querysolutionVO.queryConditions = [];
        querysolutionVO.belongId = this.formId;
        querysolutionVO.isSystem = true;
        querysolutionVO.type = 'pre';
        querysolutionVO.mode = '1';
        querysolutionVO.queryConditionsAdvanced = { relation: 1, items: [], children: [], path: [1], groupid: 1 };
        this.historyRefer['foundSchme'] = querysolutionVO;
    }
    /**
     * 初始化高级模式
     * @private
     * @return {?}
     */
    initAdvancedSolution() {
        /** @type {?} */
        let querysolutionVO = new QuerySolutionVo();
        querysolutionVO.id = this.solutionService.getGuid();
        querysolutionVO.code = ((this.presetQuerySolutionName != this.localeService.getValue("querySolution.container.sysPresetName")) ? this.presetQuerySolutionName : this.localeService.getValue("querySolution.container.defaultName")) + this.localeService.getValue("advancedMode.text.sysAdvancedName");
        ;
        querysolutionVO.queryConditions = [];
        querysolutionVO.belongId = this.formId;
        querysolutionVO.isSystem = true;
        querysolutionVO.type = 'pre';
        querysolutionVO.mode = '2';
        querysolutionVO.queryConditionsAdvanced = { relation: 1, items: [], children: [], path: [1], groupid: 1 };
        return querysolutionVO;
    }
    /**
     * 初始化来自LS的条件
     * @private
     * @return {?}
     */
    formatInitQuerySolution() {
        /** @type {?} */
        let histroyCondition = this.httpService.getLS(this.historyRefer.schemeKeyLS);
        if (histroyCondition.length > 0) {
            /** @type {?} */
            let convertor = new QuerySolutionVoConvertor();
            this.historyRefer['foundSchme']['queryConditions'] = histroyCondition;
            // 规范化条件
            this.historyRefer['foundSchme'] = this.formatQuerySolutionVO(convertor, this.historyRefer['foundSchme']);
            // 更新配置
            this.solutionService.updateControl(this.historyRefer['foundSchme'], this.resetFieldConfigs);
            this.historyRefer.initCondition = true;
        }
    }
    /**
     * 保存之后更新历史
     * @private
     * @param {?=} updateAll
     * @return {?}
     */
    changeQueryHistroy(updateAll = true) {
        if (!this.enableHistory || this.selectedSolution.mode !== '1') {
            return;
        }
        /** @type {?} */
        let preIndex = this.querySolutionVos.findIndex((/**
         * @param {?} qsolutionVO
         * @return {?}
         */
        (qsolutionVO) => {
            return qsolutionVO['type'] == 'pre';
        }));
        // 执行查询之后，上次查询的修改就不认为是变更了
        if (preIndex > -1) {
            this.querySolutionVos[preIndex]['isChanged'] = false;
        }
        if (this.selectedSolution['type'] == 'pre') {
            this.selectedSolution['isChanged'] = false;
        }
        /** @type {?} */
        const queryConditions = cloneDeep(this.selectedFieldConditions);
        this.historyRefer['foundSchme'].queryConditions = queryConditions;
        // 更新缓存
        this.httpService.setLS(this.historyRefer.schemeKeyLS, this.historyRefer['foundSchme'].queryConditions);
        if (updateAll) {
            // 发起请求保存历史记录
            this.httpService.saveHistroy(this.historyRefer['foundSchme'], this.sessionId).subscribe((/**
             * @return {?}
             */
            () => {
            }));
        }
    }
    /**
     * 处理iframe嵌套
     * @private
     * @return {?}
     */
    getTopWindow() {
        /** @type {?} */
        let curWin = window.self;
        try {
            while (curWin.location.origin === curWin.parent.location.origin) {
                if (curWin !== curWin.parent && !((/** @type {?} */ (curWin))).isRTFTopWin) {
                    curWin = curWin.parent;
                }
                else {
                    break;
                }
            }
        }
        catch (e) { }
        return curWin;
    }
    /**
     * 设置key
     * @private
     * @return {?}
     */
    setLSKey() {
        // 获取window
        /** @type {?} */
        let curWindow = this.getTopWindow();
        /** @type {?} */
        let userCode = '';
        if (curWindow['gspframeworkService'] && curWindow['gspframeworkService'].hasOwnProperty('common')) {
            userCode = curWindow['gspframeworkService']['common'].userInfos.get().code;
        }
        this.historyRefer.schemeKeyLS = userCode ? 'Scheme' + this._idSer.encrypt(userCode + this.formId) : '';
    }
    // 判断当前用户是否有权限设置公共类型筛选方案
    /**
     * @param {?} e
     * @return {?}
     */
    checkAuthority(e) {
        if (e != 'private') {
            this.httpService.getAuth('QuerySolution', this.sessionId).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                if (data) {
                    if (!data['success']) {
                        this.solutionService.showInfo(this.localeService.getValue('extendQuerySolution.auth.createError'), 'warning', '', 1500);
                        this.saveAsDialog.authorityError = true;
                        this.saveAsDialog.radioGroupValue = this.saveAsDialog.pRadioGroupValue;
                    }
                    else {
                        if (e == 'org') {
                            /** @type {?} */
                            const orgData = data['authOrganizationData'];
                            if (Array.isArray(orgData) && orgData.length) {
                                this.saveAsDialog.dataPermissionIds = orgData;
                                if (orgData.toString() != '*' && !this.saveAsDialog.selectedOrgIds.length) {
                                    this.saveAsDialog.selectedOrgIds = this.saveAsDialog.dataPermissionIds;
                                }
                                this.saveAsDialog.noDataAuthority = false;
                                this.saveAsDialog.pRadioGroupValue = e;
                            }
                            else {
                                this.solutionService.showInfo(this.localeService.getValue('extendQuerySolution.auth.noDataAuthority'), 'warning', '', 1500);
                                this.saveAsDialog.noDataAuthority = true;
                                this.saveAsDialog.radioGroupValue = this.saveAsDialog.pRadioGroupValue;
                            }
                        }
                        else {
                            this.saveAsDialog.pRadioGroupValue = e;
                        }
                    }
                }
                else {
                    console.warn(this.localeService.getValue('extendQuerySolution.auth.apiError'));
                }
            }));
        }
        else {
            this.saveAsDialog.pRadioGroupValue = e;
            this.saveAsDialog.authorityError = false;
        }
    }
}
QuerySolutionComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-querysolution',
                template: "<div #querysolution class=\"farris-panel position-relative\" tabindex=\"1\" style=\"outline: none;\">\r\n    <div class=\"solution-header\">\r\n        <div class=\"btn-group mr-3\" fDropdown>\r\n            <div class=\"solution-header-title\" fDropdownToggle>               \r\n                <span style=\"max-width: 288px;overflow: hidden;text-overflow: ellipsis;white-space: nowrap\"\r\n                    title=\"{{selectedSolution.code}}\">{{selectedSolution.code}}</span>\r\n                <b class=\"header-title--change\" *ngIf=\"selectedSolution.isChanged\">*</b>\r\n                <span class=\"f-icon f-accordion-expand\"></span>\r\n            </div>\r\n            <div class=\"query-solution dropdown-menu solution-header-title-menu\" fDropdownMenu>\r\n                <div class=\"solution-header-title-menu-inner\">\r\n                    <div class=\"solution-header-title-menu-arrow\"></div>\r\n                    <span class=\"solution-header-managerList-type ml-2 mb-2\" *ngIf=\"openAdvancedMode\">{{'advancedMode.text.standardMode' | locale}}</span>\r\n                    <li class=\"dropdown-item solution-header-dropdown-item\"\r\n                        [ngClass]=\"{'solution-header-dropdown-item-active': solution.id === selectedSolution.id }\"\r\n                        (click)=\"selectAndQuery(solution)\" *ngFor=\"let solution of querySolutionVos\">\r\n                        <b *ngIf=\"solution.isChanged\"  class=\"menu-item--change\" >*</b>\r\n                        <span class=\"solution-header-dropdown-item-title\" [title]=\"solution.code\">{{solution.code}}</span>\r\n                        <span class=\"solution-header-dropdown-item-tip\"\r\n                            [ngStyle]=\"getDefaultLabel(solution)\">{{'querySolution.container.default' | locale}}</span>\r\n                        <span class=\"solution-header-dropdown-item-public\" *ngIf=\"solution.type == 'public'\">\r\n                            {{'extendQuerySolution.public.label' | locale}}</span>\r\n                        <span class=\"solution-header-dropdown-item-public\" *ngIf=\"solution.type == 'org'\">\r\n                            {{'extendQuerySolution.org.label' | locale}}</span>\r\n                    </li>\r\n                    <!-- <li class=\"dropdown-item solution-header-dropdown-item-btns\" style=\"background-color: white!important;cursor: default;\">\r\n                        <span class=\"dropdown-item-btn\" *ngIf=\"showSaveButton\"\r\n                            (click)=\"save()\">{{'queryCondition.container.save' | locale}}</span>\r\n                        <span class=\"dropdown-item-btn\"\r\n                            (click)=\"saveAs()\">{{'queryCondition.container.saveAs' | locale}}</span>\r\n                        <span class=\"dropdown-item-btn\"\r\n                            (click)=\"openManangerDialog()\">{{'querySolution.container.manage' | locale}}</span>\r\n                    </li> -->\r\n                    <ng-container *ngIf=\"openAdvancedMode\">\r\n                        <span class=\"solution-header-managerList-type ml-2 mb-2\">{{'advancedMode.text.advancedMode' | locale}}</span>\r\n                        <li class=\"dropdown-item solution-header-dropdown-item\"\r\n                            [ngClass]=\"{'solution-header-dropdown-item-active': solution.id === selectedSolution.id }\"\r\n                            (click)=\"selectAndQuery(solution)\" *ngFor=\"let solution of querySolutionAdvancedVos\">\r\n                            <b *ngIf=\"solution.isChanged\" class=\"menu-item--change\">*</b>\r\n                            <span class=\"solution-header-dropdown-item-title\" [title]=\"solution.code\">{{solution.code}}</span>\r\n                            <span class=\"solution-header-dropdown-item-tip\"\r\n                                [ngStyle]=\"getDefaultLabel(solution)\">{{'querySolution.container.default' | locale}}</span>\r\n                            <span class=\"solution-header-dropdown-item-public\" *ngIf=\"solution.type == 'public'\">\r\n                                {{'extendQuerySolution.public.label' | locale}}</span>\r\n                            <span class=\"solution-header-dropdown-item-public\" *ngIf=\"solution.type == 'org'\">\r\n                                {{'extendQuerySolution.org.label' | locale}}</span>\r\n                        </li>\r\n                    </ng-container>\r\n                    <li class=\"dropdown-item solution-header-dropdown-item-btns\" style=\"background-color: white!important;cursor: default;\">\r\n                        <span class=\"dropdown-item-btn\" *ngIf=\"showSaveButton\"\r\n                            (click)=\"save()\">{{'queryCondition.container.save' | locale}}</span>\r\n                        <span class=\"dropdown-item-btn\"\r\n                            (click)=\"saveAs()\">{{'queryCondition.container.saveAs' | locale}}</span>\r\n                        <span class=\"dropdown-item-btn\"\r\n                            (click)=\"openManangerDialog()\">{{'querySolution.container.manage' | locale}}</span>\r\n                    </li>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"summary-condition\" *ngIf=\"isFold && summaryConditions.length > 0\">\r\n            <lib-summary-list [conditions]=\"summaryConditions\"></lib-summary-list>\r\n        </div>\r\n        <div class=\"solution-action\">\r\n            <div class=\"btn-group\" *ngIf=\"!isFold\">\r\n                <button *ngIf=\"isFold==false\" (click)=\"query()\" type=\"button\"\r\n                    class=\"btn btn-primary \">{{filterText}}</button>\r\n            </div>\r\n            <div class=\"icon-group\">\r\n                <!--\u6E05\u7A7A\u6309\u94AE-->\r\n                <span *ngIf=\"(!isFold || summaryConditions.length > 0) && selectedSolution.mode !== '2'\" class=\"icon-group-remove\" (click)=\"foldClearHandler()\"\r\n                    title=\"{{'querySolution.container.clear' | locale}}\">\r\n                    <span class=\"f-icon f-icon-remove\"></span>\r\n                </span>                \r\n                <ng-container *ngIf=\"!isFold\">\r\n                    <span class=\"divide\"></span>\r\n                    <!--\u914D\u7F6E\u6309\u94AE-->\r\n                    <span *ngIf=\"selectedSolution.mode !== '2'\" class=\"icon-group-setup\" (click)=\"openFieldConfigDialog()\"\r\n                        title=\"{{'queryCondition.container.config' | locale}}\">\r\n                        <span class=\"f-icon f-icon-home-setup\"></span>\r\n                    </span>\r\n                    <!--\u5C55\u5F00\u6536\u8D77-->\r\n                    <span class=\"icon-group-packup\" (click)=\"arrowClick()\"\r\n                        title=\"{{'querySolution.container.arrowUp' | locale}}\">\r\n                        <span class=\"f-icon f-icon-packup\"></span>\r\n                    </span>\r\n                </ng-container>\r\n                <!--\u5C55\u5F00\u6536\u8D77-->\r\n                <span *ngIf=\"isFold\" class=\"icon-group-packup\" (click)=\"arrowClick()\"\r\n                    title=\"{{'querySolution.container.arrowDown' | locale}}\">\r\n                    <span class=\"f-icon f-icon-packup\" style=\"transform: rotate(180deg);\"></span>\r\n                </span>\r\n\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div>\r\n        <farris-querycondition [ngClass]=\"{'d-none':isFold}\" #farrisQueryCondition\r\n            [(selectedFieldConditions)]=\"selectedFieldConditions\" [fieldConfigs]=\"fieldConfigs\"\r\n            [isControlInline]=\"isControlInline\" [showCompleteLabel]=\"showCompleteLabel\"\r\n            [isDisabled]=\"isDisabled\" [resetFieldConfigs]=\"resetFieldConfigs\"\r\n            [unformatFieldConfigs]=\"unformatFieldConfigs\"\r\n            (fieldConditionsChange)=\"fieldConditionsChangeHander($event)\"\r\n            [selectSolution]=\"selectedSolution\">\r\n        </farris-querycondition>\r\n    </div>\r\n\r\n    <app-solutionmanager #manageDialog (confirmEmitter)=\"managerConfirmHandler($event)\"></app-solutionmanager>\r\n    <app-saveasdialog #saveAsDialog\r\n        (confirmEmitter)=\"saveAsConfrimHandler($event)\"\r\n        (getAuthority)=\"checkAuthority($event)\"\r\n        [hideOrgselector]=\"hideOrgselector\"></app-saveasdialog>\r\n    <div *ngIf=\"isDisabled\" style=\"position:absolute;top:0;bottom:0;left:0;right:0;z-index: 99;\"></div>\r\n</div>",
                encapsulation: ViewEncapsulation.None,
                providers: [HttpService, ConvertorService, FieldConfigService],
                styles: [".solution-action{float:right}.solution-action span{vertical-align:middle;margin:0 3px}.solution-action .divide{font-size:12px;padding:3px 0}.solution-header{height:30px;margin-bottom:5px;-webkit-box-pack:start;justify-content:flex-start}.solution-action .f-icon{cursor:pointer}.solution-action .icon-group{display:inline-block}.solution-header-title-text{overflow:initial!important}.query-solution .solution-header-dropdown-item .solution-header-dropdown-item-public{flex-shrink:0;height:1.125rem;min-width:2.5rem;padding:0 4px;line-height:1.125rem;font-size:.75rem;background:#2a87ff;color:#fff;border-radius:2px;text-align:center}.solution-header-managerList-type{font-weight:700}"]
            }] }
];
/** @nocollapse */
QuerySolutionComponent.ctorParameters = () => [
    { type: NotifyService },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: BsModalService },
    { type: ConvertorService },
    { type: SolutionService },
    { type: HttpService },
    { type: FieldConfigService },
    { type: LocaleService }
];
QuerySolutionComponent.propDecorators = {
    defaultConfigs: [{ type: Input }],
    fieldConfigs: [{ type: Input }],
    presetQuerySolutionName: [{ type: Input }],
    resetFieldConfigs: [{ type: Input }],
    presetFieldConfigs: [{ type: Input }],
    isDisabled: [{ type: Input }],
    formId: [{ type: Input }],
    queryEmitter: [{ type: Output }],
    cls: [{ type: HostBinding, args: ['class',] }],
    isFold: [{ type: Input }],
    isControlInline: [{ type: Input }],
    showCompleteLabel: [{ type: Input }],
    enableInitQuery: [{ type: Input }],
    enableHistory: [{ type: Input }],
    openAdvancedMode: [{ type: Input }],
    filterText: [{ type: Input }],
    queryAfterValueChange: [{ type: Input }],
    hideOrgselector: [{ type: Input }],
    farrisQueryCondition: [{ type: ViewChild, args: ['farrisQueryCondition',] }],
    manageDialog: [{ type: ViewChild, args: ['manageDialog',] }],
    saveAsDialog: [{ type: ViewChild, args: ['saveAsDialog',] }]
};
if (false) {
    /** @type {?} */
    QuerySolutionComponent.prototype._fieldConfigs;
    /** @type {?} */
    QuerySolutionComponent.prototype._presetFieldConfigs;
    /** @type {?} */
    QuerySolutionComponent.prototype._resetFieldConfigs;
    /**
     *  筛选方案默认值配置
     * @type {?}
     */
    QuerySolutionComponent.prototype.defaultConfigs;
    /**
     * 高级模式需要原始fieldConfigs，需要将范围类控件改为单值控件
     * @type {?}
     */
    QuerySolutionComponent.prototype.unformatFieldConfigs;
    /**
     * 系统预置查询方案名称
     * @type {?}
     */
    QuerySolutionComponent.prototype.presetQuerySolutionName;
    /**
     * 此值由设计器传入
     * 组件在设计时无法点击被禁用，true
     * 组件在运行时可以点击使用，false
     * @type {?}
     */
    QuerySolutionComponent.prototype.isDisabled;
    /**
     * 表单ID，必选字段，表示查询方案所属的表单
     * @type {?}
     */
    QuerySolutionComponent.prototype.formId;
    /**
     * sessionId
     * @type {?}
     */
    QuerySolutionComponent.prototype.sessionId;
    /**
     * 查询条件列表
     * @type {?}
     */
    QuerySolutionComponent.prototype.queryEmitter;
    /**
     * 查询方案cls
     * @type {?}
     */
    QuerySolutionComponent.prototype.cls;
    /**
     * 查询方案数据源
     * @type {?}
     */
    QuerySolutionComponent.prototype.querySolutionVos;
    /** @type {?} */
    QuerySolutionComponent.prototype.querySolutionAdvancedVos;
    /**
     * 当前所选的方案，有可能不是方案
     * @type {?}
     */
    QuerySolutionComponent.prototype.selectedSolution;
    /**
     * 是否折叠
     * @type {?}
     */
    QuerySolutionComponent.prototype.isFold;
    /**
     * label和控件是否排成一行，默认是；false时排成上下两行
     * @type {?}
     */
    QuerySolutionComponent.prototype.isControlInline;
    /**
     * 是否需要完整显示超过6个字符的标签，默认false
     * @type {?}
     */
    QuerySolutionComponent.prototype.showCompleteLabel;
    /**
     * 是否启用加载后查询
     * @type {?}
     */
    QuerySolutionComponent.prototype.enableInitQuery;
    /**
     * 默认方案
     * @type {?}
     */
    QuerySolutionComponent.prototype.defaultQuerySolution;
    /**
     * 选择的控件展示列表
     * @type {?}
     */
    QuerySolutionComponent.prototype.selectedFieldConditions;
    /**
     * visible属性为true的过滤条件，是变量selectedFieldConditions的子级
     * @type {?}
     * @private
     */
    QuerySolutionComponent.prototype.visibleSelectedConditions;
    /** @type {?} */
    QuerySolutionComponent.prototype.sysQuerySolutionVo;
    /** @type {?} */
    QuerySolutionComponent.prototype.showSaveButton;
    /** @type {?} */
    QuerySolutionComponent.prototype.isSetDefaultValue;
    /** @type {?} */
    QuerySolutionComponent.prototype.doneSetDefaultValue;
    /** @type {?} */
    QuerySolutionComponent.prototype.doneInitQuery;
    /**
     * @type {?}
     * @private
     */
    QuerySolutionComponent.prototype.conditionVisibleState;
    /** @type {?} */
    QuerySolutionComponent.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    QuerySolutionComponent.prototype.templateSimpleConditions;
    /**
     * 组件服务接口
     * @type {?}
     */
    QuerySolutionComponent.prototype.solutionHandler;
    /** @type {?} */
    QuerySolutionComponent.prototype.cdf;
    /**
     * 条件概要
     * @type {?}
     */
    QuerySolutionComponent.prototype.summaryConditions;
    /** @type {?} */
    QuerySolutionComponent.prototype.eventManager;
    /**
     * 是否启用记录历史方式
     * 上次查询——不能删除、可以另存、不存在变更
     * 方案列表只有上次查询时，上次查询、系统默认都存在
     * 方案列表多个时，有上次查询，上次查询选中
     * 方案列表没有上次查询时，但是LocalStorage有,构造一个上次查询
     *
     * @type {?}
     */
    QuerySolutionComponent.prototype.enableHistory;
    /**
     * 是否启动高级模式
     * @type {?}
     */
    QuerySolutionComponent.prototype.openAdvancedMode;
    /** @type {?} */
    QuerySolutionComponent.prototype.filterText;
    /** @type {?} */
    QuerySolutionComponent.prototype.queryAfterValueChange;
    /** @type {?} */
    QuerySolutionComponent.prototype.hideOrgselector;
    /**
     * @type {?}
     * @private
     */
    QuerySolutionComponent.prototype.historyRefer;
    /** @type {?} */
    QuerySolutionComponent.prototype.farrisQueryCondition;
    /** @type {?} */
    QuerySolutionComponent.prototype.manageDialog;
    /** @type {?} */
    QuerySolutionComponent.prototype.saveAsDialog;
    /** @type {?} */
    QuerySolutionComponent.prototype._self;
    /**
     * @type {?}
     * @private
     */
    QuerySolutionComponent.prototype._idSer;
    /**
     * @type {?}
     * @private
     */
    QuerySolutionComponent.prototype.msgSer;
    /** @type {?} */
    QuerySolutionComponent.prototype.newSaveAsSolutionVo;
    /** @type {?} */
    QuerySolutionComponent.prototype.handleKeyDown;
    /**
     * @type {?}
     * @private
     */
    QuerySolutionComponent.prototype.notify;
    /**
     * @type {?}
     * @private
     */
    QuerySolutionComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    QuerySolutionComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    QuerySolutionComponent.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    QuerySolutionComponent.prototype.convertService;
    /**
     * @type {?}
     * @private
     */
    QuerySolutionComponent.prototype.solutionService;
    /**
     * @type {?}
     * @private
     */
    QuerySolutionComponent.prototype.httpService;
    /**
     * @type {?}
     * @private
     */
    QuerySolutionComponent.prototype.fieldConfigService;
    /**
     * @type {?}
     * @private
     */
    QuerySolutionComponent.prototype.localeService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnktc29sdXRpb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1jbXAvcXVlcnlzb2x1dGlvbi8iLCJzb3VyY2VzIjpbImxpYi9xdWVyeS1zb2x1dGlvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUNILFNBQVMsRUFBVSxpQkFBaUIsRUFBRSxXQUFXLEVBQW9CLHdCQUF3QixFQUM3RixRQUFRLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQTRCLGlCQUFpQixFQUN6SCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUM5RSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUN4RixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDN0MsT0FBTyxFQUNVLGdCQUFnQixFQUFrQix1QkFBdUIsRUFBRSxlQUFlLEVBRTFGLE1BQU0sa0NBQWtDLENBQUM7QUFDMUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxjQUFjLEVBQWMsTUFBTSxrQkFBa0IsQ0FBQztBQUM5RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDcEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDbkUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLGVBQWUsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQzdGLE9BQU8sRUFBeUIsMkJBQTJCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUN2RyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN0QyxPQUFP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QUFXOzs7OztJQUNYLHdDQUEwQjs7Ozs7SUFDMUIsd0NBQW9COztJQXFnQnBCLHFEQXFCQzs7SUFtV0QsK0NBV0M7Ozs7O0lBdDRCVyx3Q0FBNkI7Ozs7O0lBQUUsMENBQTBDOzs7OztJQUFFLDBDQUEwQjs7Ozs7SUFDN0csOENBQW9DOzs7OztJQUFFLGdEQUF3Qzs7Ozs7SUFBRSxpREFBd0M7Ozs7O0lBQ3hILDZDQUFnQzs7Ozs7SUFBRSxvREFBOEM7Ozs7O0lBQUUsK0NBQW9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICAgIENvbXBvbmVudCwgT25Jbml0LCBWaWV3RW5jYXBzdWxhdGlvbiwgSG9zdEJpbmRpbmcsIENvbXBvbmVudEZhY3RvcnksIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcclxuICAgIEluamVjdG9yLCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIFZpZXdDaGlsZCwgSW5qZWN0RmxhZ3MsIEVsZW1lbnRSZWYsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcywgQ2hhbmdlRGV0ZWN0b3JSZWYsIE9uRGVzdHJveSwgT3B0aW9uYWxcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU2F2ZUFzRGlhbG9nQ29tcG9uZW50IH0gZnJvbSAnLi9zYXZlYXNkaWFsb2cvc2F2ZWFzZGlhbG9nLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFNvbHV0aW9uTWFuYW5nZXJDb21wb25lbnQgfSBmcm9tICcuL3NvbHV0aW9ubWFuYWdlci9zb2x1dGlvbm1hbmFnZXIuY29tcG9uZW50JztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMvT2JzZXJ2YWJsZSc7XHJcbmltcG9ydCB7XHJcbiAgICBGaWVsZENvbmZpZywgQ29udmVydG9yU2VydmljZSwgUXVlcnlDb25kaXRpb24sIFF1ZXJ5Q29uZGl0aW9uQ29tcG9uZW50LCBRdWVyeVNvbHV0aW9uVm8sXHJcbiAgICBTbWFydEhlbHBDb250b2wsIERyb3BEb3duTGlzdENvbnRyb2wsIENoZWNrQm94Q29udHJvbCwgUmFkaW9Db250cm9sLCBJbnB1dEdyb3VwQ29udHJvbCwgUXVlcnlTb2x1dGlvbkV4dGVuZFZvXHJcbn0gZnJvbSAnQGZhcnJpcy9jb21wb25lbnQtcXVlcnljb25kaXRpb24nO1xyXG5pbXBvcnQgeyBOb3RpZnlTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1ub3RpZnknO1xyXG5pbXBvcnQgeyBCc01vZGFsU2VydmljZSwgQnNNb2RhbFJlZiB9IGZyb20gJ0BmYXJyaXMvdWktbW9kYWwnO1xyXG5pbXBvcnQgeyBIdHRwU2VydmljZSB9IGZyb20gJy4vc2VydmljZS9odHRwc2VydmljZSc7XHJcbmltcG9ydCB7IEZpZWxkQ29uZmlnU2VydmljZSB9IGZyb20gJy4vc2VydmljZS9maWVsZGNvbmZpZy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgUXVlcnlTb2x1dGlvblZvQ29udmVydG9yLCBTb2x1dGlvblNlcnZpY2UgfSBmcm9tICdAZmFycmlzL2NvbXBvbmVudC1xdWVyeWNvbmRpdGlvbic7XHJcbmltcG9ydCB7IElRdWVyeVNvbHV0aW9uSGFuZGxlciwgUVVFUllTT0xVVElPTl9IQU5ETEVSX1RPS0VOIH0gZnJvbSAnLi9pbnRlcmZhY2UvSVF1ZXJ5U29sdXRpb25IYW5kbGVyJztcclxuaW1wb3J0IHsgTG9jYWxlU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbG9jYWxlJztcclxuaW1wb3J0IHsgY2xvbmVEZWVwIH0gZnJvbSAnbG9kYXNoLWVzJztcclxuaW1wb3J0IHsgU29sdXRpb25DYWNoZVNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2Uvc29sdXRpb24uY2FjaGUuc2VydmljZSc7XHJcbmltcG9ydCB7IERlZmF1bHRDb25maWdzIH0gZnJvbSAnLi9pbnRlcmZhY2UvRGVmYXVsdENvbmZpZ3MnO1xyXG5pbXBvcnQgeyBFdmVudE1hbmFnZXIgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcclxuaW1wb3J0IHsgSWRTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1jb21tb24nO1xyXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIG9mLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IHN3aXRjaE1hcCwgdGFrZVVudGlsLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IEVYVEVORF9RVUVSWVNPTFVUSU9OX0xPQ0FMRSB9IGZyb20gJy4vdXRpbHMvZXh0ZW5kLWxvY2FsZSc7XHJcbmltcG9ydCB7IE1lc3NhZ2VyU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbWVzc2FnZXInO1xyXG5cclxuZGVjbGFyZSB2YXIgZ3NwZnJhbWV3b3JrU2VydmljZTogYW55O1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2ZhcnJpcy1xdWVyeXNvbHV0aW9uJyxcclxuICAgIHRlbXBsYXRlVXJsOiAnLi9xdWVyeS1zb2x1dGlvbi5jb21wb25lbnQuaHRtbCcsXHJcbiAgICBzdHlsZVVybHM6IFsnLi9xdWVyeS1zb2x1dGlvbi5jb21wb25lbnQuY3NzJ10sXHJcbiAgICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxyXG4gICAgcHJvdmlkZXJzOiBbSHR0cFNlcnZpY2UsIENvbnZlcnRvclNlcnZpY2UsIEZpZWxkQ29uZmlnU2VydmljZV1cclxufSlcclxuZXhwb3J0IGNsYXNzIFF1ZXJ5U29sdXRpb25Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcclxuXHJcbiAgICBfZmllbGRDb25maWdzOiBBcnJheTxRdWVyeUNvbmRpdGlvbj4gPSBbXTtcclxuICAgIF9wcmVzZXRGaWVsZENvbmZpZ3M6IEFycmF5PFF1ZXJ5Q29uZGl0aW9uPiA9IFtdO1xyXG4gICAgX3Jlc2V0RmllbGRDb25maWdzOiBBcnJheTxhbnk+ID0gW107XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAg562b6YCJ5pa55qGI6buY6K6k5YC86YWN572uXHJcbiAgICAgKi9cclxuICAgIEBJbnB1dCgpXHJcbiAgICBkZWZhdWx0Q29uZmlnczogRGVmYXVsdENvbmZpZ3M7XHJcbiAgICAvKipcclxuICAgICAqIOWtl+autemFjee9ruaVsOaNrua6kO+8jOeUqOS6jumAieaLqeWtl+autemFjee9rlxyXG4gICAgICovXHJcbiAgICBASW5wdXQoKVxyXG4gICAgc2V0IGZpZWxkQ29uZmlncyhmaWVsZENvbmZpZ0pzb246IEFycmF5PGFueT4pIHtcclxuICAgICAgICB0aGlzLl9maWVsZENvbmZpZ3MgPSB0aGlzLnNvbHV0aW9uU2VydmljZS5jb252ZXJ0VG9RdWVyeUNvbmRpdGlvbnMoZmllbGRDb25maWdKc29uKTtcclxuICAgICAgICB0aGlzLnVuZm9ybWF0RmllbGRDb25maWdzID0gZmllbGRDb25maWdKc29uXHJcbiAgICB9XHJcbiAgICBnZXQgZmllbGRDb25maWdzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9maWVsZENvbmZpZ3M7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDpq5jnuqfmqKHlvI/pnIDopoHljp/lp4tmaWVsZENvbmZpZ3PvvIzpnIDopoHlsIbojIPlm7Tnsbvmjqfku7bmlLnkuLrljZXlgLzmjqfku7ZcclxuICAgICAqL1xyXG4gICAgdW5mb3JtYXRGaWVsZENvbmZpZ3M6IEFycmF5PGFueT4gPSBbXVxyXG4gICAgLyoqXHJcbiAgICAgKiDns7vnu5/pooTnva7mn6Xor6LmlrnmoYjlkI3np7BcclxuICAgICAqL1xyXG4gICAgQElucHV0KCkgcHJlc2V0UXVlcnlTb2x1dGlvbk5hbWU6IHN0cmluZztcclxuICAgIEBJbnB1dCgpIFxyXG4gICAgc2V0IHJlc2V0RmllbGRDb25maWdzKHJlc2V0RmllbGRDb25maWdKc29uOiBBcnJheTxhbnk+KSB7XHJcbiAgICAgICAgaWYoIXJlc2V0RmllbGRDb25maWdKc29uIHx8ICFBcnJheS5pc0FycmF5KHJlc2V0RmllbGRDb25maWdKc29uKSB8fCByZXNldEZpZWxkQ29uZmlnSnNvbi5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOinhOiMg+aVsOaNrlxyXG4gICAgICAgIGxldCBmb3JtYXRSZXNldENvbmZpZ0pzb246IEFycmF5PGFueT4gPSByZXNldEZpZWxkQ29uZmlnSnNvbi5tYXAodENvbmZpZ0l0ZW0gPT4ge1xyXG4gICAgICAgICAgICBsZXQgZmluZEl0ZW0gPSB0aGlzLmZpZWxkQ29uZmlncy5maW5kKHByZXNldEl0ZW0gPT4gcHJlc2V0SXRlbVsnZmllbGRDb2RlJ10gPT0gdENvbmZpZ0l0ZW1bJ2xhYmVsQ29kZSddKTtcclxuICAgICAgICAgICAgaWYoZmluZEl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIGlmKCF0Q29uZmlnSXRlbS5oYXNPd25Qcm9wZXJ0eSgnY29udHJvbCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdENvbmZpZ0l0ZW1bJ2NvbnRyb2wnXSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdENvbmZpZ0l0ZW1bJ2NvbnRyb2wnXVsnY29udHJvbHR5cGUnXSA9IGZpbmRJdGVtLmNvbnRyb2wuZ2V0Q29udHJvbFR5cGUoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0Q29uZmlnSXRlbTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuX3Jlc2V0RmllbGRDb25maWdzID0gdGhpcy5zb2x1dGlvblNlcnZpY2UuY29udmVydFRvU2ltcGxlUXVlcnlDb25kaXRpb25zKGZvcm1hdFJlc2V0Q29uZmlnSnNvbi5maWx0ZXIoaXRlbSA9PiBpdGVtKSk7XHJcblxyXG4gICAgICAgIGlmKHRoaXMuX3Jlc2V0RmllbGRDb25maWdzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVDb25kaXRpb25WaXNpYmxlU3RhdGUodGhpcy5fcmVzZXRGaWVsZENvbmZpZ3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyDmm7TmlrDlt7LmnInphY3nva5cclxuICAgICAgICB0aGlzLnNvbHV0aW9uU2VydmljZS51cGRhdGVDb250cm9sKHRoaXMuX3ByZXNldEZpZWxkQ29uZmlncywgdGhpcy5fcmVzZXRGaWVsZENvbmZpZ3MpO1xyXG4gICAgICAgIHRoaXMuc29sdXRpb25TZXJ2aWNlLnVwZGF0ZUNvbnRyb2wodGhpcy5fZmllbGRDb25maWdzLCB0aGlzLl9yZXNldEZpZWxkQ29uZmlncyk7XHJcbiAgICAgICAgdGhpcy5fZmllbGRDb25maWdzID0gdGhpcy5fZmllbGRDb25maWdzLnNsaWNlKCk7XHJcbiAgICAgICAgLy8g5pu05paw5bey5pyJ55qE5pa55qGIXHJcbiAgICAgICAgdGhpcy5zeXNRdWVyeVNvbHV0aW9uVm8gJiYgdGhpcy5zb2x1dGlvblNlcnZpY2UudXBkYXRlQ29udHJvbCh0aGlzLnN5c1F1ZXJ5U29sdXRpb25Wby5xdWVyeUNvbmRpdGlvbnMsIHRoaXMuX3Jlc2V0RmllbGRDb25maWdzKTtcclxuICAgICAgICAvLyDmm7TmlrDljoblj7LorrDlvZVcclxuICAgICAgICB0aGlzLmhpc3RvcnlSZWZlclsnZm91bmRTY2htZSddICYmIHRoaXMuc29sdXRpb25TZXJ2aWNlLnVwZGF0ZUNvbnRyb2wodGhpcy5oaXN0b3J5UmVmZXJbJ2ZvdW5kU2NobWUnXS5xdWVyeUNvbmRpdGlvbnMsIHRoaXMuX3Jlc2V0RmllbGRDb25maWdzKTtcclxuICAgICAgICAvLyDmm7TmlrDlt7LpgIlcclxuICAgICAgICB0aGlzLnNlbGVjdGVkU29sdXRpb24gJiYgdGhpcy5zb2x1dGlvblNlcnZpY2UudXBkYXRlQ29udHJvbCh0aGlzLnNlbGVjdGVkU29sdXRpb24ucXVlcnlDb25kaXRpb25zLCB0aGlzLl9yZXNldEZpZWxkQ29uZmlncyk7XHJcbiAgICB9XHJcbiAgICBnZXQgcmVzZXRGaWVsZENvbmZpZ3MoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc2V0RmllbGRDb25maWdzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDpooTnva7mn6Xor6LlrZfmrrVcclxuICAgICAqL1xyXG4gICAgQElucHV0KClcclxuICAgIHNldCBwcmVzZXRGaWVsZENvbmZpZ3MocHJlc2V0RmllbGRDb25maWdKc29uOiBBcnJheTxhbnk+KSB7XHJcbiAgICAgICAgdGhpcy5fcHJlc2V0RmllbGRDb25maWdzID0gdGhpcy5zb2x1dGlvblNlcnZpY2UuY29udmVydFRvUXVlcnlDb25kaXRpb25zKHByZXNldEZpZWxkQ29uZmlnSnNvbik7XHJcbiAgICB9XHJcbiAgICBnZXQgcHJlc2V0RmllbGRDb25maWdzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wcmVzZXRGaWVsZENvbmZpZ3M7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmraTlgLznlLHorr7orqHlmajkvKDlhaVcclxuICAgICAqIOe7hOS7tuWcqOiuvuiuoeaXtuaXoOazleeCueWHu+iiq+emgeeUqO+8jHRydWVcclxuICAgICAqIOe7hOS7tuWcqOi/kOihjOaXtuWPr+S7peeCueWHu+S9v+eUqO+8jGZhbHNlXHJcbiAgICAgKi9cclxuICAgIEBJbnB1dCgpIGlzRGlzYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIC8qKlxyXG4gICAgICog6KGo5Y2VSUTvvIzlv4XpgInlrZfmrrXvvIzooajnpLrmn6Xor6LmlrnmoYjmiYDlsZ7nmoTooajljZVcclxuICAgICAqL1xyXG4gICAgQElucHV0KCkgZm9ybUlkOiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBzZXNzaW9uSWRcclxuICAgICAqL1xyXG4gICAgc2Vzc2lvbklkOiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmn6Xor6LmnaHku7bliJfooahcclxuICAgICAqL1xyXG4gICAgQE91dHB1dCgpIHF1ZXJ5RW1pdHRlcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPEFycmF5PFF1ZXJ5Q29uZGl0aW9uPj4oKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOafpeivouaWueahiGNsc1xyXG4gICAgICovXHJcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzJykgY2xzID0gJ3F1ZXJ5LXNvbHV0aW9uJztcclxuXHJcbiAgICAvKipcclxuICAgICAqIOafpeivouaWueahiOaVsOaNrua6kFxyXG4gICAgICovXHJcbiAgICBxdWVyeVNvbHV0aW9uVm9zOiBBcnJheTxRdWVyeVNvbHV0aW9uVm8+ID0gbmV3IEFycmF5PFF1ZXJ5U29sdXRpb25Wbz4oKTtcclxuICAgIHF1ZXJ5U29sdXRpb25BZHZhbmNlZFZvczogQXJyYXk8UXVlcnlTb2x1dGlvblZvPiA9IG5ldyBBcnJheTxRdWVyeVNvbHV0aW9uVm8+KCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlvZPliY3miYDpgInnmoTmlrnmoYjvvIzmnInlj6/og73kuI3mmK/mlrnmoYhcclxuICAgICAqL1xyXG4gICAgc2VsZWN0ZWRTb2x1dGlvbjogUXVlcnlTb2x1dGlvblZvID0gbmV3IFF1ZXJ5U29sdXRpb25WbygpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5piv5ZCm5oqY5Y+gXHJcbiAgICAgKi9cclxuICAgIEBJbnB1dCgpIGlzRm9sZDogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogbGFiZWzlkozmjqfku7bmmK/lkKbmjpLmiJDkuIDooYzvvIzpu5jorqTmmK/vvJtmYWxzZeaXtuaOkuaIkOS4iuS4i+S4pOihjFxyXG4gICAgICovXHJcbiAgICBASW5wdXQoKSBpc0NvbnRyb2xJbmxpbmU6IGJvb2xlYW4gPSB0cnVlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5piv5ZCm6ZyA6KaB5a6M5pW05pi+56S66LaF6L+HNuS4quWtl+espueahOagh+etvu+8jOm7mOiupGZhbHNlXHJcbiAgICAgKi9cclxuICAgIEBJbnB1dCgpIHNob3dDb21wbGV0ZUxhYmVsOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmmK/lkKblkK/nlKjliqDovb3lkI7mn6Xor6JcclxuICAgICovXHJcbiAgICBASW5wdXQoKSBlbmFibGVJbml0UXVlcnk6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIC8qKlxyXG4gICAgICog6buY6K6k5pa55qGIXHJcbiAgICAgKi9cclxuICAgIGRlZmF1bHRRdWVyeVNvbHV0aW9uOiBRdWVyeVNvbHV0aW9uVm87XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDpgInmi6nnmoTmjqfku7blsZXnpLrliJfooahcclxuICAgICAqL1xyXG4gICAgc2VsZWN0ZWRGaWVsZENvbmRpdGlvbnM6IEFycmF5PFF1ZXJ5Q29uZGl0aW9uPiA9IG5ldyBBcnJheTxRdWVyeUNvbmRpdGlvbj4oKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIHZpc2libGXlsZ7mgKfkuLp0cnVl55qE6L+H5ruk5p2h5Lu277yM5piv5Y+Y6YePc2VsZWN0ZWRGaWVsZENvbmRpdGlvbnPnmoTlrZDnuqdcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSB2aXNpYmxlU2VsZWN0ZWRDb25kaXRpb25zOiBBcnJheTxRdWVyeUNvbmRpdGlvbj4gPSBuZXcgQXJyYXk8UXVlcnlDb25kaXRpb24+KCk7XHJcblxyXG4gICAgc3lzUXVlcnlTb2x1dGlvblZvOiBRdWVyeVNvbHV0aW9uVm87XHJcblxyXG4gICAgc2hvd1NhdmVCdXR0b246IGJvb2xlYW47XHJcblxyXG4gICAgLy/mlrnmoYjmmK/lkKbotYvpu5jorqTlgLxcclxuICAgIGlzU2V0RGVmYXVsdFZhbHVlOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgLy/mlrnmoYjmmK/lkKblt7LotYvpu5jorqTlgLxcclxuICAgIGRvbmVTZXREZWZhdWx0VmFsdWU6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICAvL+aYr+WQpuW3suWujOaIkOiHquWKqOafpeivou+8jOm7mOiupOWAvOS4unRydWXvvIzlvZNlbmFibGVJbml0UXVlcnnovpPlhaXlgLzkuLp0cnVl5pe277yM6aaW5qyh5omn6KGMbmdPbmNoYW5nZXMoKeaXtuWwhuWFtuiuvuS4umZhbHNlXHJcbiAgICBkb25lSW5pdFF1ZXJ5OiBib29sZWFuID0gdHJ1ZTtcclxuXHJcbiAgICAvL+Wtl+auteaYvuekuumakOiXj+WKqOaAgeeKtuaAgVxyXG4gICAgcHJpdmF0ZSBjb25kaXRpb25WaXNpYmxlU3RhdGU6IEJlaGF2aW9yU3ViamVjdDxhbnk+ID0gbmV3IEJlaGF2aW9yU3ViamVjdChbXSk7XHJcbiAgICAvL+ihqOWNleWFs+mXreaXtuWBnOatouebkeWQrEJlaGF2aW9yU3ViamVjdOebuOWFs1xyXG4gICAgZGVzdHJveSQ6IFN1YmplY3Q8YW55PiA9IG5ldyBTdWJqZWN0PGFueT4oKTtcclxuXHJcbiAgICBwcml2YXRlIHRlbXBsYXRlU2ltcGxlQ29uZGl0aW9uczogQXJyYXk8YW55PjtcclxuXHJcbiAgICAvL+etm+mAieaMiemSruaYr+WQpuWcqOeVjOmdouWPs+S+p1xyXG4gICAgLy9xdWVyeUJ1dHRvbk9uUmlnaHQ6IGJvb2xlYW4gPSB0cnVlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog57uE5Lu25pyN5Yqh5o6l5Y+jXHJcbiAgICAqL1xyXG4gICAgc29sdXRpb25IYW5kbGVyOiBJUXVlcnlTb2x1dGlvbkhhbmRsZXI7XHJcbiAgICBjZGY6IENoYW5nZURldGVjdG9yUmVmO1xyXG4gICAgLyoqXHJcbiAgICAgKiDmnaHku7bmpoLopoFcclxuICAgICAqL1xyXG4gICAgc3VtbWFyeUNvbmRpdGlvbnMgPSBbXVxyXG4gICAgZXZlbnRNYW5hZ2VyOiBFdmVudE1hbmFnZXI7XHJcbiAgICAvKipcclxuICAgICAqIOaYr+WQpuWQr+eUqOiusOW9leWOhuWPsuaWueW8j1xyXG4gICAgICog5LiK5qyh5p+l6K+i4oCU4oCU5LiN6IO95Yig6Zmk44CB5Y+v5Lul5Y+m5a2Y44CB5LiN5a2Y5Zyo5Y+Y5pu0XHJcbiAgICAgKiDmlrnmoYjliJfooajlj6rmnInkuIrmrKHmn6Xor6Lml7bvvIzkuIrmrKHmn6Xor6LjgIHns7vnu5/pu5jorqTpg73lrZjlnKhcclxuICAgICAqIOaWueahiOWIl+ihqOWkmuS4quaXtu+8jOacieS4iuasoeafpeivou+8jOS4iuasoeafpeivoumAieS4rVxyXG4gICAgICog5pa55qGI5YiX6KGo5rKh5pyJ5LiK5qyh5p+l6K+i5pe277yM5L2G5pivTG9jYWxTdG9yYWdl5pyJLOaehOmAoOS4gOS4quS4iuasoeafpeivolxyXG4gICAgICogXHJcbiAgICAgKi9cclxuICAgIEBJbnB1dCgpIGVuYWJsZUhpc3Rvcnk6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOaYr+WQpuWQr+WKqOmrmOe6p+aooeW8j1xyXG4gICAgICovXHJcbiAgICBASW5wdXQoKSBvcGVuQWR2YW5jZWRNb2RlOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBASW5wdXQoKSBmaWx0ZXJUZXh0OiBzdHJpbmcgPSB0aGlzLmxvY2FsZVNlcnZpY2UuZ2V0VmFsdWUoXCJxdWVyeUNvbmRpdGlvbi5jb250YWluZXIucXVlcnlcIik7XHJcbiAgICBASW5wdXQoKSBxdWVyeUFmdGVyVmFsdWVDaGFuZ2U6IGJvb2xlYW4gPSBmYWxzZVxyXG4gICAgQElucHV0KCkgaGlkZU9yZ3NlbGVjdG9yOiBib29sZWFuID0gZmFsc2VcclxuICAgIHByaXZhdGUgaGlzdG9yeVJlZmVyID0ge1xyXG4gICAgICAgIHNjaGVtZUtleTogJycsLy8g5Y6G5Y+y6K6w5b2Vc2NoZW1lXHJcbiAgICAgICAgZm91bmRTY2htZTogbnVsbCwvLyDljoblj7LmlrnmoYjkv53lrZhcclxuICAgICAgICBzY2hlbWVLZXlMUzogJycsLy9Mb2NhbFN0b3JhZ2Ug5Y6G5Y+y6K6w5b2V5qCH6K6wXHJcbiAgICAgICAgaW5pdENvbmRpdGlvbjogZmFsc2UvL0xvY2FsU3RvcmFnZeaYr+WQpuaMieeFp+aJp+ihjOWujOafpeivolxyXG4gICAgfVxyXG5cclxuICAgIEBWaWV3Q2hpbGQoJ2ZhcnJpc1F1ZXJ5Q29uZGl0aW9uJykgZmFycmlzUXVlcnlDb25kaXRpb246IFF1ZXJ5Q29uZGl0aW9uQ29tcG9uZW50O1xyXG4gICAgQFZpZXdDaGlsZCgnbWFuYWdlRGlhbG9nJykgbWFuYWdlRGlhbG9nOiBTb2x1dGlvbk1hbmFuZ2VyQ29tcG9uZW50O1xyXG4gICAgQFZpZXdDaGlsZCgnc2F2ZUFzRGlhbG9nJykgc2F2ZUFzRGlhbG9nOiBTYXZlQXNEaWFsb2dDb21wb25lbnQ7XHJcbiAgICBfc2VsZjogYW55O1xyXG4gICAgcHJpdmF0ZSBfaWRTZXI6IElkU2VydmljZTtcclxuICAgIHByaXZhdGUgbXNnU2VyOiBhbnk7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBub3RpZnk6IE5vdGlmeVNlcnZpY2UsIHByaXZhdGUgcmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsXHJcbiAgICAgICAgcHJpdmF0ZSBtb2RhbFNlcnZpY2U6IEJzTW9kYWxTZXJ2aWNlLCBwcml2YXRlIGNvbnZlcnRTZXJ2aWNlOiBDb252ZXJ0b3JTZXJ2aWNlLCBwcml2YXRlIHNvbHV0aW9uU2VydmljZTogU29sdXRpb25TZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgaHR0cFNlcnZpY2U6IEh0dHBTZXJ2aWNlLCBwcml2YXRlIGZpZWxkQ29uZmlnU2VydmljZTogRmllbGRDb25maWdTZXJ2aWNlLCBwcml2YXRlIGxvY2FsZVNlcnZpY2U6IExvY2FsZVNlcnZpY2UpIHtcclxuICAgICAgICB0aGlzLl9pZFNlciA9IG5ldyBJZFNlcnZpY2UoKTtcclxuICAgICAgICB0aGlzLnNvbHV0aW9uSGFuZGxlciA9IHRoaXMuaW5qZWN0b3IuZ2V0PElRdWVyeVNvbHV0aW9uSGFuZGxlcj4oUVVFUllTT0xVVElPTl9IQU5ETEVSX1RPS0VOLCBudWxsLCBJbmplY3RGbGFncy5PcHRpb25hbCk7XHJcbiAgICAgICAgdGhpcy5tc2dTZXIgPSB0aGlzLmluamVjdG9yLmdldChNZXNzYWdlclNlcnZpY2UpO1xyXG4gICAgICAgIHRoaXMuX3NlbGYgPSB0aGlzLmluamVjdG9yLmdldChFbGVtZW50UmVmKTtcclxuICAgICAgICB0aGlzLmNkZiA9IHRoaXMuaW5qZWN0b3IuZ2V0KENoYW5nZURldGVjdG9yUmVmKTtcclxuICAgICAgICB0aGlzLmV2ZW50TWFuYWdlciA9IHRoaXMuaW5qZWN0b3IuZ2V0KEV2ZW50TWFuYWdlcik7XHJcbiAgICAgICAgaWYoIXRoaXMubG9jYWxlU2VydmljZS5sYW5nRGF0YVsnZXh0ZW5kUXVlcnlTb2x1dGlvbiddKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9jYWxlU2VydmljZS5zZXRMb2NhbGVEYXRhKEVYVEVORF9RVUVSWVNPTFVUSU9OX0xPQ0FMRSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX3NlbGYubmF0aXZlRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLmhhbmRsZUtleURvd24pO1xyXG4gICAgICAgIC8vdGhpcy5yZW1vdmVDdXJyZW50U29sdXRpb25DYWNoZSgpO1xyXG4gICAgICAgIHRoaXMuZGVzdHJveSQubmV4dCgpO1xyXG4gICAgICAgIHRoaXMuZGVzdHJveSQuY29tcGxldGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKGNoYW5nZXNbJ2RlZmF1bHRDb25maWdzJ10pIHtcclxuICAgICAgICAgICAgdGhpcy5pc1NldERlZmF1bHRWYWx1ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzWydkZWZhdWx0Q29uZmlncyddLmN1cnJlbnRWYWx1ZSAmJiAhY2hhbmdlc1snZGVmYXVsdENvbmZpZ3MnXS5maXJzdENoYW5nZSkgey8v6K6+6K6h5pe25LiN5Lya57uZZGVmYXVsdENvbmZpZ3PotYvlgLxcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0UXVlcnlDb25kaXRpb25WYWx1ZXMoY2hhbmdlc1snZGVmYXVsdENvbmZpZ3MnXS5jdXJyZW50VmFsdWUsIHRoaXMuc2VsZWN0ZWRTb2x1dGlvbik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluaXRBdXRvUXVlcnkodGhpcy5zZWxlY3RlZFNvbHV0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2hhbmdlc1snZW5hYmxlSW5pdFF1ZXJ5J10gJiYgY2hhbmdlc1snZW5hYmxlSW5pdFF1ZXJ5J10uZmlyc3RDaGFuZ2UgJiYgY2hhbmdlc1snZW5hYmxlSW5pdFF1ZXJ5J10uY3VycmVudFZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZG9uZUluaXRRdWVyeSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOe7hOS7tuWIneWni+WMllxyXG4gICAgICovXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICAvL+WPquWcqOi/kOihjOaXtiDojrflj5ZzZXNzaW9uSWTvvIzmn6Xor6Llt7LlrZjlgqjmlrnmoYhcclxuICAgICAgICB0aGlzLmluaXRTeXNRdWVyeVNvbHV0aW9uKCk7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzRGlzYWJsZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXNzaW9uSWQgPSB0aGlzLnNvbHV0aW9uSGFuZGxlci5nZXRVc2VyU2Vzc2lvbklkKCk7XHJcbiAgICAgICAgICAgIC8vIOe8k+WtmOWOhuWPsuaWueahiFxyXG4gICAgICAgICAgICB0aGlzLmluaXRBdXRvUXVlcnlCeUxTKCk7XHJcbiAgICAgICAgICAgIC8vIOWKoOi9veaWueahiOWIl+ihqFxyXG4gICAgICAgICAgICB0aGlzLmxvYWRRdWVyeVNvbHV0aW9ucygpO1xyXG4gICAgICAgICAgICAvL+azqOWGjOmUruebmOebkeWQrOS6i+S7tlxyXG4gICAgICAgICAgICB0aGlzLmxpc3RlbktleUJvYXJkKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZ2V0Q29uZGl0aW9uVmlzaWJsZVN0YXRlKCkucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0cm95JCkpLnN1YnNjcmliZSgoc2ltcGxlQ29uZGl0aW9ucykgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5zZWxlY3RlZEZpZWxkQ29uZGl0aW9ucy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVGaWVsZFBhcmFtcyhzaW1wbGVDb25kaXRpb25zKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZVNpbXBsZUNvbmRpdGlvbnMgPSBzaW1wbGVDb25kaXRpb25zO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy52aXNpYmxlU2VsZWN0ZWRDb25kaXRpb25zID0gdGhpcy5zZWxlY3RlZEZpZWxkQ29uZGl0aW9ucy5maWx0ZXIoKGl0ZW06IFF1ZXJ5Q29uZGl0aW9uKSA9PiB7IHJldHVybiAhIWl0ZW0udmlzaWJsZSB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMud2hlbkZvbGRTZXRTdW1tYXJ5Q29uZGl0aW9ucygpO1xyXG4gICAgICAgICAgICAgICAgIXRoaXMuaXNEaXNhYmxlZCAmJiB0aGlzLnNvbHV0aW9uSGFuZGxlci5zZXRDdXJyZW50UXVlcnlDb25kaXRpb25zKGNsb25lRGVlcCh0aGlzLnZpc2libGVTZWxlY3RlZENvbmRpdGlvbnMpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy/orr7orqHml7blj6rliqDovb3ns7vnu5/pooTnva7mlrnmoYhcclxuICAgICAgICAgICAgdGhpcy5sb2FkU3lzUXVlcnlTb2x1dGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpbml0U3lzUXVlcnlTb2x1dGlvbigpIHtcclxuICAgICAgICBpZiAodGhpcy5wcmVzZXRRdWVyeVNvbHV0aW9uTmFtZSAmJiB0aGlzLnByZXNldFF1ZXJ5U29sdXRpb25OYW1lICE9ICcnKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3lzUXVlcnlTb2x1dGlvblZvID0gbmV3IFF1ZXJ5U29sdXRpb25WbygpO1xyXG4gICAgICAgICAgICB0aGlzLnN5c1F1ZXJ5U29sdXRpb25Wby5pZCA9IHRoaXMuc29sdXRpb25TZXJ2aWNlLmdldEd1aWQoKTtcclxuICAgICAgICAgICAgdGhpcy5zeXNRdWVyeVNvbHV0aW9uVm8uY29kZSA9ICh0aGlzLnByZXNldFF1ZXJ5U29sdXRpb25OYW1lICE9IHRoaXMubG9jYWxlU2VydmljZS5nZXRWYWx1ZShcInF1ZXJ5U29sdXRpb24uY29udGFpbmVyLnN5c1ByZXNldE5hbWVcIikpID8gdGhpcy5wcmVzZXRRdWVyeVNvbHV0aW9uTmFtZSA6IHRoaXMubG9jYWxlU2VydmljZS5nZXRWYWx1ZShcInF1ZXJ5U29sdXRpb24uY29udGFpbmVyLmRlZmF1bHROYW1lXCIpO1xyXG4gICAgICAgICAgICB0aGlzLnN5c1F1ZXJ5U29sdXRpb25Wby5xdWVyeUNvbmRpdGlvbnMgPSBjbG9uZURlZXAodGhpcy5wcmVzZXRGaWVsZENvbmZpZ3MpO1xyXG4gICAgICAgICAgICB0aGlzLnN5c1F1ZXJ5U29sdXRpb25Wby5iZWxvbmdJZCA9IHRoaXMuZm9ybUlkO1xyXG4gICAgICAgICAgICB0aGlzLnN5c1F1ZXJ5U29sdXRpb25Wby5pc1N5c3RlbSA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuc3lzUXVlcnlTb2x1dGlvblZvLm1vZGUgPSAnMSc7XHJcbiAgICAgICAgICAgIC8vIHRoaXMucXVlcnlTb2x1dGlvblZvcy5wdXNoKHRoaXMuc3lzUXVlcnlTb2x1dGlvblZvKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliqDovb3ns7vnu5/pooTnva7mlrnmoYhcclxuICAgICAqL1xyXG4gICAgbG9hZFN5c1F1ZXJ5U29sdXRpb24oKSB7XHJcbiAgICAgICAgdGhpcy5xdWVyeVNvbHV0aW9uVm9zLnB1c2godGhpcy5zeXNRdWVyeVNvbHV0aW9uVm8pO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRTb2x1dGlvbiA9IGNsb25lRGVlcCh0aGlzLnN5c1F1ZXJ5U29sdXRpb25Wbyk7XHJcbiAgICAgICAgdGhpcy5sb2FkUXVlcnlDb25kaXRpb25zKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDop4TojIPmlrnmoYjmnaHku7ZcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBmb3JtYXRRdWVyeVNvbHV0aW9uVk8odENvbnZlcnRvcjogUXVlcnlTb2x1dGlvblZvQ29udmVydG9yLCBlbGVtZW50LCBmcm9tSm9iamVjdCA9IGZhbHNlKTogUXVlcnlTb2x1dGlvblZvIHtcclxuICAgICAgICBsZXQgcXVlcnlzb2x1dGlvblZPOiBRdWVyeVNvbHV0aW9uVm87XHJcbiAgICAgICAgbGV0IHNvdXJjZURhdGE6IGFueTtcclxuICAgICAgICBsZXQgX2ZpZWxkQ29kZUFycjogQXJyYXk8c3RyaW5nPiA9IFtdO1xyXG4gICAgICAgIGxldCBfdFF1ZXJ5Q29uZGl0aW9uczogQXJyYXk8UXVlcnlDb25kaXRpb24+O1xyXG4gICAgICAgIGlmIChmcm9tSm9iamVjdCkge1xyXG4gICAgICAgICAgICBxdWVyeXNvbHV0aW9uVk8gPSB0Q29udmVydG9yLmluaXRGcm9tSm9iamVjdChlbGVtZW50KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBxdWVyeXNvbHV0aW9uVk8gPSBlbGVtZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmZpZWxkQ29uZmlncy5mb3JFYWNoKF9pdGVtID0+IHsgX2ZpZWxkQ29kZUFyci5wdXNoKF9pdGVtLmZpZWxkQ29kZSkgfSk7XHJcbiAgICAgICAgaWYgKHF1ZXJ5c29sdXRpb25WTyAmJiBxdWVyeXNvbHV0aW9uVk8ucXVlcnlDb25kaXRpb25zICYmIHF1ZXJ5c29sdXRpb25WTy5xdWVyeUNvbmRpdGlvbnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAvL+iLpeihqOWNleS4iuWIoOmZpOS6huafkOS4quWtl+aute+8jOS9huW3suS/neWtmOeahOiHquWumuS5ieaWueahiOS4reWMheWQq+ivpeWtl+auteaXtu+8jOWcqOWKoOi9veaWueahiOi/h+eoi+S4reWwhuivpeWtl+auteWJlOmZpFxyXG4gICAgICAgICAgICBfdFF1ZXJ5Q29uZGl0aW9ucyA9IHF1ZXJ5c29sdXRpb25WTy5xdWVyeUNvbmRpdGlvbnMuZmlsdGVyKGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX2ZpZWxkQ29kZUFyci5pbmRleE9mKGVsZW1lbnQuZmllbGRDb2RlKSA+IC0xO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcXVlcnlzb2x1dGlvblZPLnF1ZXJ5Q29uZGl0aW9ucyA9IF90UXVlcnlDb25kaXRpb25zO1xyXG5cclxuICAgICAgICAgICAgLy/lr7noh6rlrprkuYnmlrnmoYjnmoTlm73pmYXljJbkv6Hmga/jgIHluK7liqnmjqfku7bnmoTluK7liqnliY3lj4rluK7liqnlkI7kuovku7bov5vooYzliqjmgIHotYvlgLxcclxuICAgICAgICAgICAgcXVlcnlzb2x1dGlvblZPLnF1ZXJ5Q29uZGl0aW9ucy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgc291cmNlRGF0YSA9IHRoaXMuZmllbGRDb25maWdzLmZpbmQoX2l0ZW0gPT4gX2l0ZW0uZmllbGRDb2RlID09IGVsZW1lbnQuZmllbGRDb2RlKTtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuZmllbGROYW1lID0gc291cmNlRGF0YS5maWVsZE5hbWU7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LnBsYWNlSG9sZGVyID0gc291cmNlRGF0YS5wbGFjZUhvbGRlcjtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuYmVnaW5QbGFjZUhvbGRlciA9IHNvdXJjZURhdGEuaGFzT3duUHJvcGVydHkoJ2JlZ2luUGxhY2VIb2xkZXInKSA/IHNvdXJjZURhdGFbJ2JlZ2luUGxhY2VIb2xkZXInXSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5lbmRQbGFjZUhvbGRlciA9IHNvdXJjZURhdGEuaGFzT3duUHJvcGVydHkoJ2VuZFBsYWNlSG9sZGVyJykgPyBzb3VyY2VEYXRhWydlbmRQbGFjZUhvbGRlciddIDogJyc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmIChzb3VyY2VEYXRhLmNvbnRyb2wucHJlRXZlbnRDbWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAoZWxlbWVudC5jb250cm9sIGFzIFNtYXJ0SGVscENvbnRvbCkucHJlRXZlbnRDbWQgPSBzb3VyY2VEYXRhLmNvbnRyb2wucHJlRXZlbnRDbWQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoc291cmNlRGF0YS5jb250cm9sLnBvc3RFdmVudENtZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIChlbGVtZW50LmNvbnRyb2wgYXMgU21hcnRIZWxwQ29udG9sKS5wb3N0RXZlbnRDbWQgPSBzb3VyY2VEYXRhLmNvbnRyb2wucG9zdEV2ZW50Q21kO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHNvdXJjZURhdGEuY29udHJvbC5jbGVhcikge1xyXG4gICAgICAgICAgICAgICAgICAgIChlbGVtZW50LmNvbnRyb2wgYXMgU21hcnRIZWxwQ29udG9sKS5jbGVhciA9IHNvdXJjZURhdGEuY29udHJvbC5jbGVhcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChzb3VyY2VEYXRhLmNvbnRyb2wuY2xpY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAoZWxlbWVudC5jb250cm9sIGFzIElucHV0R3JvdXBDb250cm9sKS5jbGljayA9IHNvdXJjZURhdGEuY29udHJvbC5jbGljaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmKHNvdXJjZURhdGEuY29udHJvbC5iZWZvcmVTaG93KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgKGVsZW1lbnQuY29udHJvbCBhcyBEcm9wRG93bkxpc3RDb250cm9sKS5iZWZvcmVTaG93ID0gc291cmNlRGF0YS5jb250cm9sLmJlZm9yZVNob3c7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZihzb3VyY2VEYXRhLmNvbnRyb2wuYmVmb3JlSGlkZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIChlbGVtZW50LmNvbnRyb2wgYXMgRHJvcERvd25MaXN0Q29udHJvbCkuYmVmb3JlSGlkZSA9IHNvdXJjZURhdGEuY29udHJvbC5iZWZvcmVIaWRlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYoc291cmNlRGF0YS5jb250cm9sLmRhdGVDaGFuZ2VkQ21kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgKGVsZW1lbnQuY29udHJvbCBhcyBhbnkpLmRhdGVDaGFuZ2VkQ21kID0gc291cmNlRGF0YS5jb250cm9sLmRhdGVDaGFuZ2VkQ21kO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHNvdXJjZURhdGEuY29udHJvbC5lbnVtVmFsdWVzICYmIHNvdXJjZURhdGEuY29udHJvbC5lbnVtVmFsdWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAoZWxlbWVudC5jb250cm9sIGFzIERyb3BEb3duTGlzdENvbnRyb2wpLmVudW1WYWx1ZXMgPSBzb3VyY2VEYXRhLmNvbnRyb2wuZW51bVZhbHVlcztcclxuICAgICAgICAgICAgICAgICAgICAoZWxlbWVudC5jb250cm9sIGFzIFJhZGlvQ29udHJvbCkuZW51bVZhbHVlcyA9IHNvdXJjZURhdGEuY29udHJvbC5lbnVtVmFsdWVzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHNvdXJjZURhdGEuY29udHJvbC5kYXRhICYmIHNvdXJjZURhdGEuY29udHJvbC5kYXRhLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAoZWxlbWVudC5jb250cm9sIGFzIENoZWNrQm94Q29udHJvbCkuZGF0YSA9IHNvdXJjZURhdGEuY29udHJvbC5kYXRhO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy/lnKjmraTlpIRxdWVyeWNvbmRpdGlvbuWkhOeQhuWujOavle+8jOmcgOimgeWwhnF1ZXJ5Y29uZGl0aW9u5YaF5a655aGr5YWF6IezcXVlcnlDb25kaXRpb25zQWR2YW5jZWRcclxuICAgICAgICAgICAgaWYocXVlcnlzb2x1dGlvblZPLnF1ZXJ5Q29uZGl0aW9uc0FkdmFuY2VkKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgX3F1ZXJ5Q29uZGl0aW9uc0FkdmFuY2VkID0gdENvbnZlcnRvci5jb21wbGljYXRlVHJlZURhdGEocXVlcnlzb2x1dGlvblZPLnF1ZXJ5Q29uZGl0aW9uc0FkdmFuY2VkLCBxdWVyeXNvbHV0aW9uVk8ucXVlcnlDb25kaXRpb25zKVxyXG4gICAgICAgICAgICAgICAgcXVlcnlzb2x1dGlvblZPLnF1ZXJ5Q29uZGl0aW9uc0FkdmFuY2VkID0gY2xvbmVEZWVwKF9xdWVyeUNvbmRpdGlvbnNBZHZhbmNlZClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcXVlcnlzb2x1dGlvblZPO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Yqg6L295p+l6K+i5pa55qGI5pWw5o2uXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGxvYWRRdWVyeVNvbHV0aW9ucygpIHtcclxuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuICAgICAgICB0aGlzLmh0dHBTZXJ2aWNlLnF1ZXJ5KHRoaXMuZm9ybUlkLCB0aGlzLnNlc3Npb25JZCkuc3Vic2NyaWJlKChpdGVtczogQXJyYXk8YW55PikgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjb252ZXJ0b3IgPSBuZXcgUXVlcnlTb2x1dGlvblZvQ29udmVydG9yKCk7XHJcbiAgICAgICAgICAgIGxldCBxdWVyeXNvbHV0aW9uVk86IFF1ZXJ5U29sdXRpb25WbztcclxuICAgICAgICAgICAgaWYgKGl0ZW1zICYmIGl0ZW1zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIC8v6auY57qn5qih5byP5pyq5byA5ZCv54q25oCB5LiL77yM6L+H5ruk5o6J55u45YWz5pWw5o2uXHJcbiAgICAgICAgICAgICAgICBpZighdGhpcy5vcGVuQWR2YW5jZWRNb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMgPSBpdGVtcy5maWx0ZXIodmFsID0+IHZhbC5tb2RlICE9PSAnMicpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpdGVtcy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5c29sdXRpb25WTyA9IHRoaXMuZm9ybWF0UXVlcnlTb2x1dGlvblZPKGNvbnZlcnRvciwgZWxlbWVudCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZW5hYmxlSGlzdG9yeSAmJiBxdWVyeXNvbHV0aW9uVk9bJ3R5cGUnXSA9PSAncHJlJyAmJiBxdWVyeXNvbHV0aW9uVk8ubW9kZSAhPT0gJzInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOWmguaenOi/lOWbnuWIl+ihqOWGheWtmOWcqOWOhuWPsuiusOW9lSAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeXNvbHV0aW9uVk8uY29kZSA9IHRoaXMubG9jYWxlU2VydmljZS5nZXRWYWx1ZShcInF1ZXJ5U29sdXRpb24uY29udGFpbmVyLmhpc3Ryb3lOYW1lXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhpc3RvcnlSZWZlclsnc2NoZW1lS2V5J10gPSBxdWVyeXNvbHV0aW9uVk8uaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlzdG9yeVJlZmVyWydmb3VuZFNjaG1lJ10gPSBjbG9uZURlZXAocXVlcnlzb2x1dGlvblZPKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oaXN0b3J5UmVmZXJbJ2luaXRDb25kaXRpb24nXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICB0aGlzLmRlZmF1bHRRdWVyeVNvbHV0aW9uID0gY2xvbmVEZWVwKHF1ZXJ5c29sdXRpb25WTyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKHF1ZXJ5c29sdXRpb25WT1sndHlwZSddICE9ICdwcmUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8v5qC55o2udmVyc2lvbiDpgInmi6nlrZjlhaXlk6rkuIDkuKrmlbDmja4gMeS4uuagh+WHhu+8jDLkuLrpq5jnuqdcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYocXVlcnlzb2x1dGlvblZPLm1vZGUgPT09ICcyJyApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucXVlcnlTb2x1dGlvbkFkdmFuY2VkVm9zLnB1c2gocXVlcnlzb2x1dGlvblZPKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucXVlcnlTb2x1dGlvblZvcy5wdXNoKHF1ZXJ5c29sdXRpb25WTyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocXVlcnlzb2x1dGlvblZPLmlzRGVmYXVsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/lpoLmnpzmnInpu5jorqTmlrnmoYjvvIzliJnorr7nva7lhajlsYDpu5jorqTmlrnmoYhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVmYXVsdFF1ZXJ5U29sdXRpb24gPSBjbG9uZURlZXAocXVlcnlzb2x1dGlvblZPKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgLy9zZWxmLnNldFNvbHV0aW9uQ2FjaGUodGhpcy5xdWVyeVNvbHV0aW9uVm9zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5lbmFibGVIaXN0b3J5ICYmICF0aGlzLmhpc3RvcnlSZWZlclsnaW5pdENvbmRpdGlvbiddKSB7XHJcbiAgICAgICAgICAgICAgICAvL+WmguaenOi/mOayoeacieiuvue9ruadoeS7tlxyXG4gICAgICAgICAgICAgICAgdGhpcy5mb3JtYXRJbml0UXVlcnlTb2x1dGlvbigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmVuYWJsZUhpc3RvcnkgJiYgdGhpcy5oaXN0b3J5UmVmZXJbJ2luaXRDb25kaXRpb24nXSkge1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRTb2x1dGlvbiA9IGNsb25lRGVlcCh0aGlzLmhpc3RvcnlSZWZlclsnZm91bmRTY2htZSddKTtcclxuICAgICAgICAgICAgICAgIC8v5Y+q5pyJ57yT5a2Y6K6w5b2VXHJcbiAgICAgICAgICAgICAgICB0aGlzLnF1ZXJ5U29sdXRpb25Wb3Muc3BsaWNlKDAsIDAsIHRoaXMuaGlzdG9yeVJlZmVyWydmb3VuZFNjaG1lJ10pO1xyXG4gICAgICAgICAgICAgICAgLy/ljoblj7LorrDlvZXkuI3mlK/mjIHpq5jnuqfmqKHlvI9cclxuICAgICAgICAgICAgICAgIC8vIGlmKHRoaXMuaGlzdG9yeVJlZmVyWydmb3VuZFNjaG1lJ10ubW9kZSA9PT0gJzInICkge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgIHRoaXMucXVlcnlTb2x1dGlvbkFkdmFuY2VkVm9zLnNwbGljZSgwLCAwLCB0aGlzLmhpc3RvcnlSZWZlclsnZm91bmRTY2htZSddKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgIHRoaXMucXVlcnlTb2x1dGlvblZvcy5zcGxpY2UoMCwgMCwgdGhpcy5oaXN0b3J5UmVmZXJbJ2ZvdW5kU2NobWUnXSk7XHJcbiAgICAgICAgICAgICAgICAvLyB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucXVlcnlTb2x1dGlvblZvcy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyDlj6rmnInkuIrmrKHmn6Xor6Lml7ZcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnF1ZXJ5U29sdXRpb25Wb3MucHVzaCh0aGlzLnN5c1F1ZXJ5U29sdXRpb25Wbyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnF1ZXJ5U29sdXRpb25BZHZhbmNlZFZvcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyDlj6rmnInkuIrmrKHmn6Xor6Lml7ZcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnF1ZXJ5U29sdXRpb25BZHZhbmNlZFZvcy5wdXNoKHRoaXMuaW5pdEFkdmFuY2VkU29sdXRpb24oKSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vc2VsZi5zZXRTb2x1dGlvbkNhY2hlKHRoaXMucXVlcnlTb2x1dGlvblZvcyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRRdWVyeUNvbmRpdGlvbnMoKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gaWYodGhpcy5oaXN0b3J5UmVmZXJbJ3NjaGVtZUtleSddICE9PSAnJyl7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgLy/mm7TmlrDkuIDmrKHnvJPlrZhcclxuICAgICAgICAgICAgICAgIC8vICAgICB0aGlzLmNoYW5nZVF1ZXJ5SGlzdHJveShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAvLyB9ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZGVmYXVsdFF1ZXJ5U29sdXRpb24gfHwgdGhpcy5xdWVyeVNvbHV0aW9uVm9zLmxlbmd0aCB8fCB0aGlzLnF1ZXJ5U29sdXRpb25BZHZhbmNlZFZvcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIC8v5aaC5p6c5bey5p+l5Yiw5pyJ6buY6K6k5pa55qGI77yM5oiW5bey5pyJ5a2Y5YKo55qE5pa55qGIXHJcbiAgICAgICAgICAgICAgICAvL+S4jeWGjeWKoOi9veezu+e7n+mFjee9rueahOaWueahiO+8jOmmluWFiOWKoOi9vem7mOiupOaWueahiO+8jOayoeaciem7mOiupOWImeWKoOi9veesrOS4gOS4quaWueahiFxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGVmYXVsdFF1ZXJ5U29sdXRpb24gJiYgdGhpcy5kZWZhdWx0UXVlcnlTb2x1dGlvbi5pZCAhPSAnJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRTb2x1dGlvbiA9IGNsb25lRGVlcCh0aGlzLmRlZmF1bHRRdWVyeVNvbHV0aW9uKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHVibGljU29sdXRpb24gPSBbLi4udGhpcy5xdWVyeVNvbHV0aW9uVm9zLCAuLi50aGlzLnF1ZXJ5U29sdXRpb25BZHZhbmNlZFZvc10uZmluZChpdGVtID0+IGl0ZW0udHlwZSA9PSAncHVibGljJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYocHVibGljU29sdXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFNvbHV0aW9uID0gcHVibGljU29sdXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3JnU29sdXRpb24gPSBbLi4udGhpcy5xdWVyeVNvbHV0aW9uVm9zLCAuLi50aGlzLnF1ZXJ5U29sdXRpb25BZHZhbmNlZFZvc10uZmluZChpdGVtID0+IGl0ZW0udHlwZSA9PSAnb3JnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRTb2x1dGlvbiA9ICEhb3JnU29sdXRpb24gPyBvcmdTb2x1dGlvbiA6IGNsb25lRGVlcChbLi4udGhpcy5xdWVyeVNvbHV0aW9uVm9zLCAuLi50aGlzLnF1ZXJ5U29sdXRpb25BZHZhbmNlZFZvc11bMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnF1ZXJ5U29sdXRpb25Wb3MubGVuZ3RoIDwgMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucXVlcnlTb2x1dGlvblZvcy5wdXNoKHRoaXMuc3lzUXVlcnlTb2x1dGlvblZvKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucXVlcnlTb2x1dGlvbkFkdmFuY2VkVm9zLmxlbmd0aCA8IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnF1ZXJ5U29sdXRpb25BZHZhbmNlZFZvcy5wdXNoKHRoaXMuaW5pdEFkdmFuY2VkU29sdXRpb24oKSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMubG9hZFF1ZXJ5Q29uZGl0aW9ucygpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy/lpoLmnpzmsqHmnInku7vkvZXlt7LlrZjlgqjnmoTmlrnmoYjvvIzliJnliqDovb3ns7vnu5/phY3nva7mlrnmoYhcclxuICAgICAgICAgICAgICAgIHRoaXMubG9hZFN5c1F1ZXJ5U29sdXRpb24oKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucXVlcnlTb2x1dGlvbkFkdmFuY2VkVm9zLnB1c2godGhpcy5pbml0QWR2YW5jZWRTb2x1dGlvbigpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5pc1NldERlZmF1bHRWYWx1ZSAmJiAhdGhpcy5oaXN0b3J5UmVmZXJbJ2luaXRDb25kaXRpb24nXSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRRdWVyeUNvbmRpdGlvblZhbHVlcyh0aGlzLmRlZmF1bHRDb25maWdzLCB0aGlzLnNlbGVjdGVkU29sdXRpb24pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmluaXRBdXRvUXVlcnkodGhpcy5zZWxlY3RlZFNvbHV0aW9uKTtcclxuICAgICAgICB9LCBlID0+IHtcclxuICAgICAgICAgICAgaWYoZSAmJiBlLm1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubXNnU2VyLnNob3coJ2Vycm9yJywgZS5tZXNzYWdlLCB7c2hvd0hlYWRlcjogZmFsc2V9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0U29sdXRpb25DYWNoZShxdWVyeVNvbHV0aW9uVm9zOiBhbnkpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNEaXNhYmxlZCAmJiBnc3BmcmFtZXdvcmtTZXJ2aWNlICYmIHF1ZXJ5U29sdXRpb25Wb3MgJiYgcXVlcnlTb2x1dGlvblZvcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgLy8g6I635Y+W5b2T5YmN5Yqf6IO96I+c5Y2V5L+h5oGvLCDlubbku6Xlip/og73oj5zljZVJROS4uue8k+WtmGtleVxyXG4gICAgICAgICAgICBjb25zdCBvcHRpb24gPSBnc3BmcmFtZXdvcmtTZXJ2aWNlLnJ0Zi5zZXNzaW9uLmdldENvbW1vblZhcmlhYmxlKCk7XHJcbiAgICAgICAgICAgIFNvbHV0aW9uQ2FjaGVTZXJ2aWNlLnNldFNvbHV0aW9uQ2FjaGUob3B0aW9uLnRhYklkLCBxdWVyeVNvbHV0aW9uVm9zKTtcclxuICAgICAgICAgICAgU29sdXRpb25DYWNoZVNlcnZpY2Uuc29sdXRpb25MaXN0Q2hhbmdlZC5uZXh0KHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZXRDdXJyZW50U29sdXRpb25DYWNoZSh2YWx1ZTogYW55KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzRGlzYWJsZWQgJiYgZ3NwZnJhbWV3b3JrU2VydmljZSAmJiB2YWx1ZSkge1xyXG4gICAgICAgICAgICAvLyDojrflj5blvZPliY3lip/og73oj5zljZXkv6Hmga8sIOW5tuS7peWKn+iDveiPnOWNlUlE5Li657yT5a2Ya2V5XHJcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbiA9IGdzcGZyYW1ld29ya1NlcnZpY2UucnRmLnNlc3Npb24uZ2V0Q29tbW9uVmFyaWFibGUoKTtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbiAmJiBvcHRpb24udGFiSWQpIHtcclxuICAgICAgICAgICAgICAgIFNvbHV0aW9uQ2FjaGVTZXJ2aWNlLnNldEN1cnJlbnRTb2x1dGlvbihvcHRpb24udGFiSWQsIHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKlxyXG4gICAgcmVtb3ZlQ3VycmVudFNvbHV0aW9uQ2FjaGUoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzRGlzYWJsZWQgJiYgZ3NwZnJhbWV3b3JrU2VydmljZSkge1xyXG4gICAgICAgICAgICAvLyDojrflj5blvZPliY3lip/og73oj5zljZXkv6Hmga8sIOW5tuS7peWKn+iDveiPnOWNlUlE5Li657yT5a2Ya2V5XHJcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbiA9IGdzcGZyYW1ld29ya1NlcnZpY2UucnRmLnNlc3Npb24uZ2V0Q29tbW9uVmFyaWFibGUoKTtcclxuICAgICAgICAgICAgaWYgKG9wdGlvbiAmJiBvcHRpb24udGFiSWQpIHtcclxuICAgICAgICAgICAgICAgIFNvbHV0aW9uQ2FjaGVTZXJ2aWNlLnJlbW92ZUN1cnJlbnRTb2x1dGlvbihvcHRpb24udGFiSWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgKi9cclxuXHJcbiAgICBsb2FkUXVlcnlDb25kaXRpb25zKCkge1xyXG4gICAgICAgIC8v5Yqg6L29562b6YCJ5p2h5Lu2XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZEZpZWxkQ29uZGl0aW9ucyA9IG5ldyBBcnJheTxRdWVyeUNvbmRpdGlvbj4oKTtcclxuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZFNvbHV0aW9uICYmIHRoaXMuc2VsZWN0ZWRTb2x1dGlvbi5xdWVyeUNvbmRpdGlvbnMgJiYgdGhpcy5zZWxlY3RlZFNvbHV0aW9uLnF1ZXJ5Q29uZGl0aW9ucy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIC8vIHRoaXMuc2VsZWN0ZWRGaWVsZENvbmRpdGlvbnMgPSB0aGlzLnNlbGVjdGVkU29sdXRpb24ucXVlcnlDb25kaXRpb25zIGFzIEFycmF5PFF1ZXJ5Q29uZGl0aW9uPjtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEZpZWxkQ29uZGl0aW9ucyA9IHRoaXMuc2VsZWN0ZWRTb2x1dGlvbi5xdWVyeUNvbmRpdGlvbnM7XHJcbiAgICAgICAgICAgIGlmKHRoaXMudGVtcGxhdGVTaW1wbGVDb25kaXRpb25zICYmIHRoaXMudGVtcGxhdGVTaW1wbGVDb25kaXRpb25zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlRmllbGRQYXJhbXModGhpcy50ZW1wbGF0ZVNpbXBsZUNvbmRpdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZVNpbXBsZUNvbmRpdGlvbnMgPSBuZXcgQXJyYXk8YW55PigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudmlzaWJsZVNlbGVjdGVkQ29uZGl0aW9ucyA9IHRoaXMuc2VsZWN0ZWRGaWVsZENvbmRpdGlvbnMuZmlsdGVyKChpdGVtOiBRdWVyeUNvbmRpdGlvbikgPT4geyByZXR1cm4gISFpdGVtLnZpc2libGUgfSk7XHJcbiAgICAgICAgLy8g5aaC5p6c5pa55qGI55qE5Y+Y5pu05piv5Zyo5Y+O5oqY5pe2XHJcbiAgICAgICAgdGhpcy53aGVuRm9sZFNldFN1bW1hcnlDb25kaXRpb25zKCk7XHJcbiAgICAgICAgdGhpcy5zaG93U2F2ZUJ1dHRvbiA9IHRoaXMuc2VsZWN0ZWRTb2x1dGlvbi5pc1N5c3RlbSA/IGZhbHNlIDogdHJ1ZTtcclxuICAgICAgICAhdGhpcy5pc0Rpc2FibGVkICYmIHRoaXMuc29sdXRpb25IYW5kbGVyLnNldEN1cnJlbnRRdWVyeUNvbmRpdGlvbnMoY2xvbmVEZWVwKHRoaXMudmlzaWJsZVNlbGVjdGVkQ29uZGl0aW9ucykpO1xyXG4gICAgICAgIC8vdGhpcy5zZXRDdXJyZW50U29sdXRpb25DYWNoZSh0aGlzLnNlbGVjdGVkU29sdXRpb24pO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBnZXRDb25kaXRpb25WaXNpYmxlU3RhdGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZGl0aW9uVmlzaWJsZVN0YXRlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Lyg6YCS6L+H5p2l55qE5piv5bey57uP5aSE55CG6L+H55qE5p2h5Lu2XHJcbiAgICAgKiBAcGFyYW0gc2ltcGxlQ29uZGl0aW9uIFxyXG4gICAgICovXHJcbiAgICB1cGRhdGVDb25kaXRpb25WaXNpYmxlU3RhdGUoc2ltcGxlQ29uZGl0aW9uOiBBcnJheTxhbnk+KSB7XHJcbiAgICAgICAgdGhpcy5jb25kaXRpb25WaXNpYmxlU3RhdGUubmV4dChzaW1wbGVDb25kaXRpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOebkeWQrHJlc2V0RmllbGRDb25maWdz5Y+Y5YyW5ZCO77yM5pu05pawc2VsZWN0ZWRGaWVsZENvbmRpdGlvbnPvvIzlubblkIzmraXoh7NxdWVyeWNvbmRpdGlvbu+8jOWPr+WunueOsOetm+mAieadoeS7tuWKqOaAgeaYvuekuumakOiXj1xyXG4gICAgcHJpdmF0ZSB1cGRhdGVGaWVsZFBhcmFtcyhzaW1wbGVDb25kaXRpb25zOiBBcnJheTxhbnk+KSB7XHJcbiAgICAgICAgaWYoIXNpbXBsZUNvbmRpdGlvbnMgfHwgIXNpbXBsZUNvbmRpdGlvbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgY3VycmVudENvbmRpdGlvbnMgPSBjbG9uZURlZXAodGhpcy5zZWxlY3RlZEZpZWxkQ29uZGl0aW9ucyk7XHJcbiAgICAgICAgY29uc3QgdXBkYXRlZENvbmRpdGlvbnMgPSBjdXJyZW50Q29uZGl0aW9ucy5tYXAoKGl0ZW06IFF1ZXJ5Q29uZGl0aW9uKSA9PiB7XHJcbiAgICAgICAgICAgIGZvcihjb25zdCBzaW1wbGVDb25kaXRpb24gb2Ygc2ltcGxlQ29uZGl0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgaWYoc2ltcGxlQ29uZGl0aW9uLmhhc093blByb3BlcnR5KCd2aXNpYmxlJykgJiYgaXRlbS5maWVsZENvZGUgPT0gc2ltcGxlQ29uZGl0aW9uWydmaWVsZENvZGUnXSAmJiBpdGVtLnZpc2libGUgIT09IHNpbXBsZUNvbmRpdGlvblsndmlzaWJsZSddKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbS52aXNpYmxlID0gc2ltcGxlQ29uZGl0aW9uWyd2aXNpYmxlJ107XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbS52YWx1ZS5jbGVhclZhbHVlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXJrQXNDaGFuZ2VkKHRydWUsIHRoaXMuc2VsZWN0ZWRTb2x1dGlvbi5pZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGl0ZW07XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZEZpZWxkQ29uZGl0aW9ucyA9IHVwZGF0ZWRDb25kaXRpb25zLnNsaWNlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2F2ZUFzKCkge1xyXG4gICAgICAgIHRoaXMub3BlblNhdmVBc0RpYWxvZyh0aGlzLmxvY2FsZVNlcnZpY2UuZ2V0VmFsdWUoXCJxdWVyeVNvbHV0aW9uLnNhdmVBc0RpYWxvZy50aXRsZVwiKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bpu5jorqTmoIfnrb5cclxuICAgICAqIEBwYXJhbSBzb2x1dGlvblxyXG4gICAgICovXHJcbiAgICBnZXREZWZhdWx0TGFiZWwoc29sdXRpb246IFF1ZXJ5U29sdXRpb25Wbykge1xyXG4gICAgICAgIGlmICghKHRoaXMuZGVmYXVsdFF1ZXJ5U29sdXRpb24pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7ICd2aXNpYmlsaXR5JzogJ2hpZGRlbicgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHNvbHV0aW9uLmlkID09IHRoaXMuZGVmYXVsdFF1ZXJ5U29sdXRpb24uaWQpIHtcclxuICAgICAgICAgICAgICAgIC8vIC8v5LiN5aSE55CG5LqGXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyAndmlzaWJpbGl0eSc6ICdoaWRkZW4nIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaWueahiOmAieaLqeS6i+S7tlxyXG4gICAgICogQHBhcmFtIHNvbHV0aW9uIOW9k+WJjemAieS4reeahOaWueahiFxyXG4gICAgICovXHJcbiAgICBzZWxlY3Qoc29sdXRpb246IFF1ZXJ5U29sdXRpb25Wbykge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRTb2x1dGlvbiA9IE9iamVjdC5hc3NpZ24obmV3IFF1ZXJ5U29sdXRpb25WbygpLCBzb2x1dGlvbik7XHJcbiAgICAgICAgaWYgKHNvbHV0aW9uLnF1ZXJ5Q29uZGl0aW9ucyAmJiBzb2x1dGlvbi5xdWVyeUNvbmRpdGlvbnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkRmllbGRDb25kaXRpb25zID0gdGhpcy5zZWxlY3RlZFNvbHV0aW9uLnF1ZXJ5Q29uZGl0aW9ucztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRGaWVsZENvbmRpdGlvbnMgPSBuZXcgQXJyYXk8UXVlcnlDb25kaXRpb24+KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2hvd1NhdmVCdXR0b24gPSB0aGlzLnNlbGVjdGVkU29sdXRpb24uaXNTeXN0ZW0gPyBmYWxzZSA6IHRydWU7XHJcbiAgICAgICAgdGhpcy52aXNpYmxlU2VsZWN0ZWRDb25kaXRpb25zID0gdGhpcy5zZWxlY3RlZEZpZWxkQ29uZGl0aW9ucy5maWx0ZXIoKGl0ZW06IFF1ZXJ5Q29uZGl0aW9uKSA9PiB7IHJldHVybiAhIWl0ZW0udmlzaWJsZSB9KTtcclxuICAgICAgICAhdGhpcy5pc0Rpc2FibGVkICYmIHRoaXMuc29sdXRpb25IYW5kbGVyLnNldEN1cnJlbnRRdWVyeUNvbmRpdGlvbnMoY2xvbmVEZWVwKHRoaXMudmlzaWJsZVNlbGVjdGVkQ29uZGl0aW9ucykpO1xyXG4gICAgICAgIC8vdGhpcy5zZXRDdXJyZW50U29sdXRpb25DYWNoZSh0aGlzLnNlbGVjdGVkU29sdXRpb24pO1xyXG4gICAgICAgIC8vIOWmguaenOaWueahiOeahOWPmOabtOaYr+WcqOWPjuaKmOaXtlxyXG4gICAgICAgIHRoaXMud2hlbkZvbGRTZXRTdW1tYXJ5Q29uZGl0aW9ucygpO1xyXG4gICAgfVxyXG5cclxuICAgIHNlbGVjdEFuZFF1ZXJ5KHNvbHV0aW9uOiBRdWVyeVNvbHV0aW9uVm8pIHtcclxuICAgICAgICAvL+mrmOe6p+aooeW8j+S4jeS9v+eUqOm7mOiupOWAvFxyXG4gICAgICAgIGlmIChzb2x1dGlvbi5tb2RlICE9PSAnMicgJiYgKHRoaXMuZGVmYXVsdENvbmZpZ3MgJiYgdGhpcy5kZWZhdWx0Q29uZmlncy5pc0N1cnJlbnQgfHwgKHNvbHV0aW9uLmlzU3lzdGVtICYmIHNvbHV0aW9uLnR5cGUgIT09ICdwcmUnKSkpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRRdWVyeUNvbmRpdGlvblZhbHVlcyh0aGlzLmRlZmF1bHRDb25maWdzLCBzb2x1dGlvbik7Ly/lt7LljIXlkKtzZWxlY3Tmk43kvZxcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoc29sdXRpb24ubW9kZSAhPT0gJzInICYmIHRoaXMuZW5hYmxlSGlzdG9yeSAmJiBzb2x1dGlvbi50eXBlID09ICdwcmUnKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY29uZGl0aW9ucyA9IGNsb25lRGVlcCh0aGlzLmhpc3RvcnlSZWZlclsnZm91bmRTY2htZSddWydxdWVyeUNvbmRpdGlvbnMnXSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29uZGl0aW9ucy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc29sdXRpb24ucXVlcnlDb25kaXRpb25zID0gY29uZGl0aW9ucztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdChzb2x1dGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucXVlcnkoKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiDmiZPlvIDlrZfmrrXphY3nva7nqpflj6NcclxuICAgICAqL1xyXG4gICAgb3BlbkZpZWxkQ29uZmlnRGlhbG9nKCkge1xyXG4gICAgICAgIHRoaXMuZmFycmlzUXVlcnlDb25kaXRpb24ub3BlbkZpZWxkQ29uZmlnRGlhbG9nKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZmllbGRDb25kaXRpb25zQ2hhbmdlSGFuZGVyKCRldmVudDogYW55KSB7XHJcbiAgICAgICAgbGV0IGRhdGEgPSAkZXZlbnQ7XHJcbiAgICAgICAgaWYodGhpcy5zZWxlY3RlZFNvbHV0aW9uLm1vZGUgPT09ICcyJykge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkU29sdXRpb24ucXVlcnlDb25kaXRpb25zID0gZGF0YVxyXG4gICAgICAgICAgICBsZXQgdGFyZ2V0ID0gdGhpcy5xdWVyeVNvbHV0aW9uQWR2YW5jZWRWb3MuZmluZCh2YWwgPT4gdmFsLmlkID09PSB0aGlzLnNlbGVjdGVkU29sdXRpb24uaWQpXHJcbiAgICAgICAgICAgIGlmKHRhcmdldCApIHtcclxuICAgICAgICAgICAgICAgIHRhcmdldC5xdWVyeUNvbmRpdGlvbnMgPSB0aGlzLnNlbGVjdGVkU29sdXRpb24ucXVlcnlDb25kaXRpb25zXHJcbiAgICAgICAgICAgICAgICB0YXJnZXQucXVlcnlDb25kaXRpb25zQWR2YW5jZWQgPSB0aGlzLnNlbGVjdGVkU29sdXRpb24ucXVlcnlDb25kaXRpb25zQWR2YW5jZWRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB0aGlzLnNlbGVjdGVkU29sdXRpb24ucXVlcnlDb25kaXRpb25zID0gZGF0YTvmraTml7bkuI3mlLnlj5jlvZPliY3pgInkuK3nmoTmlrnmoYjvvIznrYnliLDkv53lrZjml7bvvIznm7TmjqXosIPnlKh0aGlzLnNlbGVjdGVkRmllbGRDb25kaXRpb25z5p2l5L+d5a2Y44CCXHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZEZpZWxkQ29uZGl0aW9ucyA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy52aXNpYmxlU2VsZWN0ZWRDb25kaXRpb25zID0gdGhpcy5zZWxlY3RlZEZpZWxkQ29uZGl0aW9ucy5maWx0ZXIoKGl0ZW06IFF1ZXJ5Q29uZGl0aW9uKSA9PiB7IHJldHVybiAhIWl0ZW0udmlzaWJsZSB9KTtcclxuICAgICAgICBpZiAoIXRoaXMuaXNEaXNhYmxlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnNvbHV0aW9uSGFuZGxlci5zZXRDdXJyZW50UXVlcnlDb25kaXRpb25zKGNsb25lRGVlcCh0aGlzLnZpc2libGVTZWxlY3RlZENvbmRpdGlvbnMpKTtcclxuICAgICAgICAgICAgdGhpcy5zb2x1dGlvbkhhbmRsZXIuc2V0RmlsdGVyQ29uZGl0aW9ucyh0aGlzLnZpc2libGVTZWxlY3RlZENvbmRpdGlvbnMpO1xyXG4gICAgICAgICAgICAvL3RoaXMuc2V0Q3VycmVudFNvbHV0aW9uQ2FjaGUodGhpcy5zZWxlY3RlZFNvbHV0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYodGhpcy5xdWVyeUFmdGVyVmFsdWVDaGFuZ2UpIHtcclxuICAgICAgICAgICAgdGhpcy5xdWVyeSgpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubWFya0FzQ2hhbmdlZCh0cnVlLCB0aGlzLnNlbGVjdGVkU29sdXRpb24uaWQpO1xyXG4gICAgfVxyXG4gICAgLy/pq5jnuqfmqKHlvI/mlrDlop7vvIzpq5jnuqfmqKHlvI/kuIvkuI3ku4XpnIDopoHkv67mlLljb25kaXRpb25z77yM6L+Y6ZyA6KaB5L+u5pS5c29sdXRpb27nmoTnm7jlhbPlsZ7mgKdcclxuICAgIGZpZWxkU29sdXRpb25DaGFuZ2VIYW5kZXIoJGV2ZW50OiBhbnkpIHtcclxuICAgICAgICBsZXQgZGF0YSA9ICRldmVudDtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkU29sdXRpb24gPSBkYXRhXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDkv53lrZjmlrnmoYhcclxuICAgICAqL1xyXG4gICAgc2F2ZSgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuZm9ybUlkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc29sdXRpb25TZXJ2aWNlLnNob3dJbmZvKHRoaXMubG9jYWxlU2VydmljZS5nZXRWYWx1ZShcInF1ZXJ5U29sdXRpb24uY29udGFpbmVyLnBsZWFzZUlucHV0XCIpLCAnZXJyb3InLCAnJywgMTUwMCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9pZOS4uuepuuWImeihqOekuuayoeaciemihOe9ruaWueahiO+8jOWImeatpOaXtuS/neWtmOaWueahiOebuOW9k+S6juaWsOWinuS4gOS4quaWueahiFxyXG4gICAgICAgIGlmICghdGhpcy5zZWxlY3RlZFNvbHV0aW9uLmlkKSB7XHJcbiAgICAgICAgICAgIHRoaXMub3BlblNhdmVBc0RpYWxvZyh0aGlzLmxvY2FsZVNlcnZpY2UuZ2V0VmFsdWUoXCJxdWVyeVNvbHV0aW9uLmNvbnRhaW5lci5zYXZlXCIpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy/nm7TmjqXkv53lrZhcclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgY2hlY2tBdXRob3JpdHkkID0gdGhpcy5odHRwU2VydmljZS5nZXRBdXRoKCdRdWVyeVNvbHV0aW9uJywgdGhpcy5zZXNzaW9uSWQpO1xyXG4gICAgICAgICAgICBjaGVja0F1dGhvcml0eSQucGlwZShcclxuICAgICAgICAgICAgICAgIHN3aXRjaE1hcChcclxuICAgICAgICAgICAgICAgICAgICAoZGF0YTogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFkYXRhWydzdWNjZXNzJ10gJiYgKHRoaXMuc2VsZWN0ZWRTb2x1dGlvbi50eXBlID09ICdwdWJsaWMnIHx8IHRoaXMuc2VsZWN0ZWRTb2x1dGlvbi50eXBlID09ICdvcmcnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zb2x1dGlvblNlcnZpY2Uuc2hvd0luZm8odGhpcy5sb2NhbGVTZXJ2aWNlLmdldFZhbHVlKCdleHRlbmRRdWVyeVNvbHV0aW9uLmF1dGgudXBkYXRlRXJyb3InKSwgJ3dhcm5pbmcnLCAnJywgMTUwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2YoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFNvbHV0aW9uLnF1ZXJ5Q29uZGl0aW9ucyA9IHRoaXMuc2VsZWN0ZWRGaWVsZENvbmRpdGlvbnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzYXZlJCA9IHRoaXMuaHR0cFNlcnZpY2UudXBkYXRlKHRoaXMuc2VsZWN0ZWRTb2x1dGlvbiwgdGhpcy5zZXNzaW9uSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNhdmUkLnBpcGUoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFwKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih0aGlzLnNlbGVjdGVkU29sdXRpb24ubW9kZSA9PT0gJzInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRlbXBJbmRleCA9IHRoaXMucXVlcnlTb2x1dGlvbkFkdmFuY2VkVm9zLmZpbmRJbmRleCh4ID0+IHguaWQgPT0gdGhpcy5zZWxlY3RlZFNvbHV0aW9uLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzLnNlbGVjdGVkRmllbGRDb25kaXRpb25zID0gdGhpcy5zZWxlY3RlZFNvbHV0aW9uLnF1ZXJ5Q29uZGl0aW9ucztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnF1ZXJ5U29sdXRpb25BZHZhbmNlZFZvcy5zcGxpY2UodGVtcEluZGV4LCAxLCB0aGlzLnNlbGVjdGVkU29sdXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGVtcEluZGV4ID0gdGhpcy5xdWVyeVNvbHV0aW9uVm9zLmZpbmRJbmRleCh4ID0+IHguaWQgPT0gdGhpcy5zZWxlY3RlZFNvbHV0aW9uLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzLnNlbGVjdGVkRmllbGRDb25kaXRpb25zID0gdGhpcy5zZWxlY3RlZFNvbHV0aW9uLnF1ZXJ5Q29uZGl0aW9ucztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnF1ZXJ5U29sdXRpb25Wb3Muc3BsaWNlKHRlbXBJbmRleCwgMSwgdGhpcy5zZWxlY3RlZFNvbHV0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXJrQXNDaGFuZ2VkKGZhbHNlLCB0aGlzLnNlbGVjdGVkU29sdXRpb24uaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mYXJyaXNRdWVyeUNvbmRpdGlvbi5jYW5DbGVhclJlbGF0ZWRGaWVsZHMgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc29sdXRpb25TZXJ2aWNlLnNob3dJbmZvKHRoaXMubG9jYWxlU2VydmljZS5nZXRWYWx1ZShcInF1ZXJ5U29sdXRpb24uY29udGFpbmVyLnNhdmVTdWNjZXNzXCIpLCAnc3VjY2VzcycsICcnLCAxNTAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zb2x1dGlvblNlcnZpY2Uuc2hvd0luZm8odGhpcy5sb2NhbGVTZXJ2aWNlLmdldFZhbHVlKFwicXVlcnlTb2x1dGlvbi5jb250YWluZXIuc2F2ZUZhaWxcIiksICdlcnJvcicsICcnLCAxNTAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICAgIHRhcChcclxuICAgICAgICAgICAgICAgICAgICAoKSA9PiB7IH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4odGhpcy5sb2NhbGVTZXJ2aWNlLmdldFZhbHVlKCdleHRlbmRRdWVyeVNvbHV0aW9uLmF1dGguYXBpRXJyb3InKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICApLnN1YnNjcmliZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaJk+W8gOWPpuWtmOS4uuWvueivneahhu+8jOeCueWHu+S/neWtmOaMiemSruaXtuS5n+i1sOivpemAu+i+kVxyXG4gICAgICogQHBhcmFtIHRpdGxlXHJcbiAgICAgKi9cclxuICAgIG9wZW5TYXZlQXNEaWFsb2codGl0bGU6IHN0cmluZykge1xyXG4gICAgICAgIGlmICghdGhpcy5mb3JtSWQpIHtcclxuICAgICAgICAgICAgdGhpcy5zb2x1dGlvblNlcnZpY2Uuc2hvd0luZm8odGhpcy5sb2NhbGVTZXJ2aWNlLmdldFZhbHVlKFwicXVlcnlTb2x1dGlvbi5jb250YWluZXIucGxlYXNlSW5wdXRcIiksICdlcnJvcicsICcnLCAxNTAwKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNhdmVBc0RpYWxvZy50aXRsZSA9IHRpdGxlO1xyXG4gICAgICAgIHRoaXMuc2F2ZUFzRGlhbG9nLnF1ZXJ5U29sdXRpb24gPSB0aGlzLm5ld1NhdmVBc1NvbHV0aW9uVm8oKTtcclxuICAgICAgICB0aGlzLnNhdmVBc0RpYWxvZy5yYWRpb0dyb3VwVmFsdWUgPSAncHJpdmF0ZSc7XHJcbiAgICAgICAgdGhpcy5zYXZlQXNEaWFsb2cuc2hvdygpO1xyXG4gICAgfVxyXG5cclxuICAgIG5ld1NhdmVBc1NvbHV0aW9uVm8gPSAoKSA9PiB7XHJcbiAgICAgICAgLy/lvZPliY3pgInkuK3nmoTmlrnmoYjvvIzlho3kv67mlLnnrZvpgInmnaHku7blkI7vvIzlhbbljp/mnaXnmoTnrZvpgInmnaHku7blubbmsqHmnInlj5jljJbvvIzku4Xku4V0aGlzLnNlbGVjdGVkRmllbGRDb25kaXRpb25z5pyJ5Y+Y5YyWXHJcbiAgICAgICAgY29uc3Qgc29sdXRpb24gPSBjbG9uZURlZXAodGhpcy5zZWxlY3RlZFNvbHV0aW9uKTtcclxuICAgICAgICAvL+aWsOWinueahOaWueahiOimgea4heepuuafpeivouaWueahiOe8luWPt1xyXG4gICAgICAgIHNvbHV0aW9uLmNvZGUgPSAnJztcclxuICAgICAgICAvL+aYr+WQpuezu+e7n+WxnuaAp+W/hemhu+iuvue9ruS4ukZhbHNlXHJcbiAgICAgICAgc29sdXRpb24uaXNTeXN0ZW0gPSBmYWxzZTtcclxuICAgICAgICAvL+ino+WGs+aWueahiOaJgOWxnuihqOWNlVxyXG4gICAgICAgIHNvbHV0aW9uLmJlbG9uZ0lkID0gdGhpcy5mb3JtSWQ7XHJcbiAgICAgICAgLy/mlrDlop7mlrnmoYhJZOmcgOimgUd1aWRcclxuICAgICAgICBzb2x1dGlvbi5pZCA9IHRoaXMuc29sdXRpb25TZXJ2aWNlLmdldEd1aWQoKTtcclxuICAgICAgICAvL+aWsOWinuaWueahiGlzRGVmYXVsdOmcgOimgeiuvue9ruS4umZhbHNlXHJcbiAgICAgICAgc29sdXRpb24uaXNEZWZhdWx0ID0gZmFsc2U7XHJcbiAgICAgICAgLy/mlrDlop7mlrnmoYjnmoTnrZvpgInmnaHku7bvvIzmmK/lvZPliY3pgInkuK3nmoTnrZvpgInmnaHku7ZcclxuICAgICAgICBzb2x1dGlvbi5xdWVyeUNvbmRpdGlvbnMgPSB0aGlzLnNlbGVjdGVkRmllbGRDb25kaXRpb25zO1xyXG4gICAgICAgIC8v6K6+572u57G75Z6L6KaB5riF56m6XHJcbiAgICAgICAgc29sdXRpb24udHlwZSA9IFwicHJpdmF0ZVwiO1xyXG4gICAgICAgIHNvbHV0aW9uLmlzQ2hhbmdlZCA9IGZhbHNlO1xyXG4gICAgICAgIHNvbHV0aW9uLmV4dGVuZElkID0gJ3F1ZXJ5LXNjaGVtZS0xJztcclxuICAgICAgICBzb2x1dGlvbi5leHRlbmRJbmZvID0gbmV3IEFycmF5PFF1ZXJ5U29sdXRpb25FeHRlbmRWbz4oKTtcclxuICAgICAgICByZXR1cm4gc29sdXRpb247XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlj6blrZjkuLrnoa7lrprkuovku7blpITnkIZcclxuICAgICAqIEBwYXJhbSBzb2x1dGlvbiDmlrDlop7nmoTmn6Xor6LmlrnmoYhcclxuICAgICAqL1xyXG4gICAgc2F2ZUFzQ29uZnJpbUhhbmRsZXIoX2V2ZW50OiBhbnkpIHtcclxuICAgICAgICBjb25zdCBzb2x1dGlvbjogUXVlcnlTb2x1dGlvblZvID0gX2V2ZW50WydxdWVyeVNvbHV0aW9uJ107XHJcbiAgICAgICAgaWYgKHNvbHV0aW9uLnF1ZXJ5Q29uZGl0aW9ucyAmJiBzb2x1dGlvbi5xdWVyeUNvbmRpdGlvbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHNvbHV0aW9uLnF1ZXJ5Q29uZGl0aW9ucy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCEhZWxlbWVudC5yZWFkb25seSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQucmVhZG9ubHkgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaHR0cFNlcnZpY2UuY3JlYXRlKHNvbHV0aW9uLCB0aGlzLnNlc3Npb25JZCkuc3Vic2NyaWJlKFxyXG4gICAgICAgICAgICAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvL+mHjeaWsOiuvue9ruWFqOWxgOeahOm7mOiupOaWueahiFxyXG4gICAgICAgICAgICAgICAgaWYgKHNvbHV0aW9uLmlzRGVmYXVsdCkgey8v6KKr6K6+572u5Li66buY6K6k5pa55qGIXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWZhdWx0UXVlcnlTb2x1dGlvbiA9IHNvbHV0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucXVlcnlTb2x1dGlvblZvcyA9IHRoaXMucXVlcnlTb2x1dGlvblZvcy5tYXAodm8gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2by5pc0RlZmF1bHQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZvO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucXVlcnlTb2x1dGlvbkFkdmFuY2VkVm9zID0gdGhpcy5xdWVyeVNvbHV0aW9uQWR2YW5jZWRWb3MubWFwKHZvID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm8uaXNEZWZhdWx0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2bztcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8v55So5oi35L+d5a2Y6Ieq5bex55qE562b6YCJ5pa55qGI5ZCO77yM5LiN5YaN5pi+56S657O757uf6buY6K6k55qE5pa55qGI77yM5pON5L2c5pa55qGI5Li66auY57qn5qih5byP5pe25LiN5b2x5ZON5qCH5YeGXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5xdWVyeVNvbHV0aW9uVm9zLmxlbmd0aCA9PT0gMSAmJiB0aGlzLnF1ZXJ5U29sdXRpb25Wb3NbMF0uaXNTeXN0ZW0gJiYgc29sdXRpb24ubW9kZSA9PT0gJzEnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy/nlKjmiLfmsqHmnInphY3nva7oh6rlt7HnmoTnrZvpgInmlrnmoYjml7bvvIzmiJbogIXnlKjmiLflj6rphY3nva7kuobkuIDkuKrnrZvpgInmlrnmoYjml7bvvIzmraTmlbDnu4Tpg73mnInkuIDkuKrmlrnmoYjvvJvoi6XmraTmlrnmoYjmmK/ns7vnu5/pu5jorqTmlrnmoYjvvIzliJnlupTlnKjlj6blrZjkuLrml7bliKDmjolcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnF1ZXJ5U29sdXRpb25Wb3MgPSBuZXcgQXJyYXk8UXVlcnlTb2x1dGlvblZvPigpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmKHRoaXMucXVlcnlTb2x1dGlvblZvcy5sZW5ndGggPT09IDIgJiYgdGhpcy5lbmFibGVIaXN0b3J5KSB7ICAgXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZpbHRlclNvbHV0aW9uVm9zID0gbmV3IEFycmF5PFF1ZXJ5U29sdXRpb25Wbz4oKTsgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlclNvbHV0aW9uVm9zID0gdGhpcy5xdWVyeVNvbHV0aW9uVm9zLmZpbHRlcihpdGVtID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoaXRlbS50eXBlID09ICdwcmUnKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhaXRlbS5pc1N5c3RlbVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5xdWVyeVNvbHV0aW9uVm9zID0gZmlsdGVyU29sdXRpb25Wb3M7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvL+mrmOe6p+aooeW8j+WQjOeQhlxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucXVlcnlTb2x1dGlvbkFkdmFuY2VkVm9zLmxlbmd0aCA9PT0gMSAmJiB0aGlzLnF1ZXJ5U29sdXRpb25BZHZhbmNlZFZvc1swXS5pc1N5c3RlbSAmJiBzb2x1dGlvbi5tb2RlID09PSAnMicpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnF1ZXJ5U29sdXRpb25BZHZhbmNlZFZvcyA9IG5ldyBBcnJheTxRdWVyeVNvbHV0aW9uVm8+KCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYodGhpcy5xdWVyeVNvbHV0aW9uQWR2YW5jZWRWb3MubGVuZ3RoID09PSAyICYmIHRoaXMuZW5hYmxlSGlzdG9yeSkgeyAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBmaWx0ZXJTb2x1dGlvblZvcyA9IG5ldyBBcnJheTxRdWVyeVNvbHV0aW9uVm8+KCk7ICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJTb2x1dGlvblZvcyA9IHRoaXMucXVlcnlTb2x1dGlvbkFkdmFuY2VkVm9zLmZpbHRlcihpdGVtID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoaXRlbS50eXBlID09ICdwcmUnKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhaXRlbS5pc1N5c3RlbVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5xdWVyeVNvbHV0aW9uQWR2YW5jZWRWb3MgPSBmaWx0ZXJTb2x1dGlvblZvcztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBzb2x1dGlvbi5tb2RlID09PSAnMicgPyB0aGlzLnF1ZXJ5U29sdXRpb25BZHZhbmNlZFZvcy5wdXNoKHNvbHV0aW9uKSA6IHRoaXMucXVlcnlTb2x1dGlvblZvcy5wdXNoKHNvbHV0aW9uKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRTb2x1dGlvbiA9IHNvbHV0aW9uO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaG93U2F2ZUJ1dHRvbiA9IHRoaXMuc2VsZWN0ZWRTb2x1dGlvbi5pc1N5c3RlbSA/IGZhbHNlIDogdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRGaWVsZENvbmRpdGlvbnMgPSB0aGlzLnNlbGVjdGVkU29sdXRpb24ucXVlcnlDb25kaXRpb25zO1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aXNpYmxlU2VsZWN0ZWRDb25kaXRpb25zID0gdGhpcy5zZWxlY3RlZEZpZWxkQ29uZGl0aW9ucy5maWx0ZXIoKGl0ZW06IFF1ZXJ5Q29uZGl0aW9uKSA9PiB7IHJldHVybiAhIWl0ZW0udmlzaWJsZSB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmFycmlzUXVlcnlDb25kaXRpb24uY2FuQ2xlYXJSZWxhdGVkRmllbGRzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNhdmVBc0RpYWxvZy5pc0RlZmF1bHQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc29sdXRpb25TZXJ2aWNlLnNob3dJbmZvKHRoaXMubG9jYWxlU2VydmljZS5nZXRWYWx1ZShcInF1ZXJ5U29sdXRpb24uY29udGFpbmVyLnNhdmVTdWNjZXNzXCIpLCAnc3VjY2VzcycsICcnLCAxNTAwKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zb2x1dGlvblNlcnZpY2Uuc2hvd0luZm8odGhpcy5sb2NhbGVTZXJ2aWNlLmdldFZhbHVlKFwicXVlcnlTb2x1dGlvbi5jb250YWluZXIuc2F2ZUZhaWxcIiksICdlcnJvcicsICcnLCAxNTAwKTtcclxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaJk+W8gOeuoeeQhueVjOmdolxyXG4gICAgICovXHJcbiAgICBvcGVuTWFuYW5nZXJEaWFsb2coKSB7XHJcbiAgICAgICAgdGhpcy5odHRwU2VydmljZS5nZXRBdXRoKCdRdWVyeVNvbHV0aW9uJywgdGhpcy5zZXNzaW9uSWQpLnN1YnNjcmliZShkYXRhID0+IHtcclxuICAgICAgICAgICAgdGhpcy5tYW5hZ2VEaWFsb2cuYXV0aG9yaXR5RXJyb3IgPSBkYXRhWydzdWNjZXNzJ10gPyBmYWxzZTogdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5tYW5hZ2VEaWFsb2cuc2hvdyhjbG9uZURlZXAoWy4uLnRoaXMucXVlcnlTb2x1dGlvblZvcywgLi4udGhpcy5xdWVyeVNvbHV0aW9uQWR2YW5jZWRWb3NdKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDnrqHnkIbnlYzpnaLnoa7lrprlpITnkIZcclxuICAgICAqIEBwYXJhbSBfZXZlbnRcclxuICAgICAqIEBwYXJhbSBkaWFsb2dcclxuICAgICAqL1xyXG4gICAgbWFuYWdlckNvbmZpcm1IYW5kbGVyKF9ldmVudDogYW55KSB7XHJcbiAgICAgICAgbGV0IG9iajogb2JqZWN0ID0gX2V2ZW50O1xyXG4gICAgICAgIGlmIChvYmpbJ3ZhbGlkYXRvciddID09IHRydWUpIHtcclxuICAgICAgICAgICAgLy/ngrnlh7tjaGVja2JveOaXtu+8jG5ld0RlZmF1bHRRdWVyeVNvbHV0aW9u6KKr6LWL5YC877ybIOWFqOWxgOm7mOiupOaWueahiOiiq+WIoOmZpOaXtu+8jG5ld0RlZmF1bHRRdWVyeVNvbHV0aW9u5Y+Y5Li6bnVsbFxyXG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0SWQgPSBvYmpbJ25ld0RlZmF1bHRRdWVyeVNvbHV0aW9uJ10gPyBvYmpbJ25ld0RlZmF1bHRRdWVyeVNvbHV0aW9uJ10uaWQgOiAnJztcclxuICAgICAgICAgICAgY29uc3QgYmVsb25nSWQgPSB0aGlzLmZvcm1JZDtcclxuICAgICAgICAgICAgLy/oi6XmsqHmnInliKDpmaTku7vkvZXmlrnmoYjvvIxkZWxldGVkUXVlcnlTb2x1dGlvblZvc+S8muaYr+S4gOS4quepuuaVsOe7hFxyXG4gICAgICAgICAgICBjb25zdCBkZWxldGVkSWRzID0gb2JqWydkZWxldGVkUXVlcnlTb2x1dGlvbklkcyddO1xyXG4gICAgICAgICAgICB0aGlzLmh0dHBTZXJ2aWNlLmJhdGNoVXBkYXRlKHsgZGVmYXVsdElkLCBiZWxvbmdJZCwgZGVsZXRlZElkcyB9LCB0aGlzLnNlc3Npb25JZCkuc3Vic2NyaWJlKFxyXG4gICAgICAgICAgICAgICAgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC8v5oqK5Yig6Zmk5ZCO55qEdm/otYvlgLznu5kgdGhpcy5xdWVyeVNvbHV0aW9uVm9z77yb5aaC5p6c5rKh5Yig6Zmk5pa55qGI77yMIHRoaXMucXVlcnlTb2x1dGlvblZvc+i3n29ialsnc3BsaWNlZFF1ZXJ5U29sdXRpb25Wb3MnXeWQjOWAvFxyXG4gICAgICAgICAgICAgICAgICAgIC8v6buY6K6k5pa55qGI55qE5Y+Y5YyW5Lmf6K6w5b2V5ZyodXBkYXRlZFF1ZXJ5U29sdXRpb25Wb3PkuK1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnF1ZXJ5U29sdXRpb25Wb3MgPSBvYmpbJ3VwZGF0ZWRRdWVyeVNvbHV0aW9uVm9zJ10uZmlsdGVyKHZhbCA9PiB2YWwubW9kZSAhPT0gJzInKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnF1ZXJ5U29sdXRpb25BZHZhbmNlZFZvcyA9IG9ialsndXBkYXRlZFF1ZXJ5U29sdXRpb25Wb3MnXS5maWx0ZXIodmFsID0+IHZhbC5tb2RlID09PSAnMicpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghb2JqWydjdXJyZW50RGVmYXVsdFF1ZXJ5U29sdXRpb25JZCddKSB7Ly/lpoLmnpzkvKDov4fmnaXnmoTlvZPliY3pu5jorqTmlrnmoYhpZOaYr+epuu+8jOS7o+ihqOaJgOaciem7mOiupOaWueahiOmDveWPlua2iOS6hlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlZmF1bHRRdWVyeVNvbHV0aW9uID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy/lpoLmnpzmnInpu5jorqTmlrnmoYjlhYjmmL7npLrpu5jorqTmlrnmoYjvvIzlpoLmnpzmsqHmnInpu5jorqTmlrnmoYjliJnnm7TmjqXmmL7npLrlvZPliY3mn6Xor6LmlrnmoYjnmoTnrKzkuIDkuKrvvJvlpoLmnpzmsqHmnInku7vkvZXmn6Xor6LmlrnmoYjliJnnm7TmjqXmuIXnqbrmn6Xor6LmlrnmoYjvvIzliJnmmL7npLrns7vnu5/pooTnva7nmoTpu5jorqTmlrnmoYhcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGVmYXVsdElkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8v5bey6K6+572u6buY6K6k5pa55qGIXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0KG9ialsnbmV3RGVmYXVsdFF1ZXJ5U29sdXRpb24nXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVmYXVsdFF1ZXJ5U29sdXRpb24gPSBvYmpbJ25ld0RlZmF1bHRRdWVyeVNvbHV0aW9uJ107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5xdWVyeVNvbHV0aW9uVm9zLmxlbmd0aCA9PT0gMCB8fCAodGhpcy5lbmFibGVIaXN0b3J5ICYmIHRoaXMucXVlcnlTb2x1dGlvblZvcy5sZW5ndGggPT09IDEgJiYgdGhpcy5xdWVyeVNvbHV0aW9uVm9zWzBdLnR5cGUgPT0gJ3ByZScpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnF1ZXJ5U29sdXRpb25Wb3MucHVzaCh0aGlzLnN5c1F1ZXJ5U29sdXRpb25Wbyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnF1ZXJ5U29sdXRpb25BZHZhbmNlZFZvcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucXVlcnlTb2x1dGlvbkFkdmFuY2VkVm9zLnB1c2godGhpcy5pbml0QWR2YW5jZWRTb2x1dGlvbigpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy/mnKrmm7TmlLnpu5jorqTmlrnmoYjvvIzliKTmlq3lvZPliY3pgInmi6nnmoTmn6Xor6LmlrnmoYjmmK/lkKblt7LooqvliKDpmaRcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlbGV0ZWRJZHMuaW5jbHVkZXModGhpcy5zZWxlY3RlZFNvbHV0aW9uLmlkKSkgey8v5aaC5p6c6KKr5Yig6ZmkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5xdWVyeVNvbHV0aW9uVm9zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih0aGlzLmVuYWJsZUhpc3RvcnkgJiYgdGhpcy5xdWVyeVNvbHV0aW9uVm9zLmxlbmd0aCA9PSAxICYmIHRoaXMucXVlcnlTb2x1dGlvblZvc1swXS50eXBlID09ICdwcmUnKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3QodGhpcy5zeXNRdWVyeVNvbHV0aW9uVm8pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnF1ZXJ5U29sdXRpb25Wb3MucHVzaCh0aGlzLnN5c1F1ZXJ5U29sdXRpb25Wbyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHVibGljU29sdXRpb24gPSB0aGlzLnF1ZXJ5U29sdXRpb25Wb3MuZmluZChpdGVtID0+IGl0ZW0udHlwZSA9PSAncHVibGljJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHB1YmxpY1NvbHV0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdChwdWJsaWNTb2x1dGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvcmdTb2x1dGlvbiA9IHRoaXMucXVlcnlTb2x1dGlvblZvcy5maW5kKGl0ZW0gPT4gaXRlbS50eXBlID09ICdvcmcnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0KCEhb3JnU29sdXRpb24gPyBvcmdTb2x1dGlvbiA6IGNsb25lRGVlcCh0aGlzLnF1ZXJ5U29sdXRpb25Wb3NbMF0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3QodGhpcy5zeXNRdWVyeVNvbHV0aW9uVm8pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnF1ZXJ5U29sdXRpb25Wb3MucHVzaCh0aGlzLnN5c1F1ZXJ5U29sdXRpb25Wbyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+mrmOe6p+aooeW8j+ayoeacieeahOivneS5n+mcgOimgeWinuWKoOm7mOiupFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIXRoaXMucXVlcnlTb2x1dGlvbkFkdmFuY2VkVm9zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucXVlcnlTb2x1dGlvbkFkdmFuY2VkVm9zLnB1c2godGhpcy5pbml0QWR2YW5jZWRTb2x1dGlvbigpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/ku4DkuYjkuZ/msqHlj5HnlJ9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5oqK5omA5pyJ55qE6buY6K6k6YO95Y+W5raI5LqGXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih0aGlzLnF1ZXJ5U29sdXRpb25Wb3MubGVuZ3RoID09PSAwIHx8ICh0aGlzLmVuYWJsZUhpc3RvcnkgJiYgdGhpcy5xdWVyeVNvbHV0aW9uVm9zLmxlbmd0aCA9PT0gMSAmJiB0aGlzLnF1ZXJ5U29sdXRpb25Wb3NbMF0udHlwZSA9PSAncHJlJykpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucXVlcnlTb2x1dGlvblZvcy5wdXNoKHRoaXMuc3lzUXVlcnlTb2x1dGlvblZvKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZighdGhpcy5xdWVyeVNvbHV0aW9uQWR2YW5jZWRWb3MubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5xdWVyeVNvbHV0aW9uQWR2YW5jZWRWb3MucHVzaCh0aGlzLmluaXRBZHZhbmNlZFNvbHV0aW9uKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zb2x1dGlvblNlcnZpY2Uuc2hvd0luZm8odGhpcy5sb2NhbGVTZXJ2aWNlLmdldFZhbHVlKFwicXVlcnlTb2x1dGlvbi5jb250YWluZXIuc2F2ZVN1Y2Nlc3NcIiksICdzdWNjZXNzJywgJycsIDE1MDApO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVycm9yID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNvbHV0aW9uU2VydmljZS5zaG93SW5mbyh0aGlzLmxvY2FsZVNlcnZpY2UuZ2V0VmFsdWUoXCJxdWVyeVNvbHV0aW9uLmNvbnRhaW5lci5zYXZlRmFpbFwiKSwgJ2Vycm9yJywgJycsIDE1MDApO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlLnRocm93KGVycm9yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8v5qCh6aqM5aSx6LSlXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5omn6KGM562b6YCJXHJcbiAgICAgKi9cclxuICAgIHF1ZXJ5KCkge1xyXG4gICAgICAgIGlmICghdGhpcy5pc0Rpc2FibGVkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVycm9yQXJyID0gdGhpcy5zb2x1dGlvblNlcnZpY2UuaXNWYWxpZCh0aGlzLnZpc2libGVTZWxlY3RlZENvbmRpdGlvbnMpO1xyXG4gICAgICAgICAgICAvL+mrmOe6p+aooeW8j+S4i+S4jeeUqOWIpOaWrXJlcXVpcmXvvIzmnInoh6rlt7HnmoTmoKHpqozpgLvovpFcclxuICAgICAgICAgICAgaWYgKGVycm9yQXJyICYmIGVycm9yQXJyLmxlbmd0aCAmJiB0aGlzLnNlbGVjdGVkU29sdXRpb24ubW9kZSAhPT0gJzInKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvckZpZWxkcyA9IGVycm9yQXJyLm1hcChlcnJvciA9PiBlcnJvci5maWVsZCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNvbHV0aW9uU2VydmljZS5zaG93SW5mbyh0aGlzLmxvY2FsZVNlcnZpY2UuZ2V0VmFsdWUoXCJxdWVyeVNvbHV0aW9uLmNvbnRhaW5lci5yZXF1aXJlXCIpLnJlcGxhY2UoJ3tmaWVsZHN9JywgZXJyb3JGaWVsZHMuam9pbignLCAnKSksICd3YXJuaW5nJywgJycsIDI1MDApO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy/pq5jnuqfmqKHlvI/kuIvlv4XpobvmiYDmnInmnaHku7bpg73mnInlgLzvvIzlkKbliJnkvJrlvbHlk43lsYLnuqfkuI7lhbPogZTlhbPns7tcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgbGV0IHF1ZXJ5Q29uZGl0aW9ucyA9IGNsb25lRGVlcCh0aGlzLnZpc2libGVTZWxlY3RlZENvbmRpdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5zZWxlY3RlZFNvbHV0aW9uLm1vZGUgPT09ICcyJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXJ5Q29uZGl0aW9ucyA9IGNsb25lRGVlcCh0aGlzLnNlbGVjdGVkRmllbGRDb25kaXRpb25zKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZW1wdHlGbGFnID0gcXVlcnlDb25kaXRpb25zLmZpbmQodmFsID0+IHZhbC52YWx1ZS5pc0VtcHR5KCkpXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIGVtcHR5RmxhZyApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RpZnkud2FybmluZyh0aGlzLmxvY2FsZVNlcnZpY2UuZ2V0VmFsdWUoJ2FkdmFuY2VkTW9kZS5hdXRoLmNvbmRpdGlvbkVtcHR5RXJyb3InKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zb2x1dGlvbkhhbmRsZXIuc2V0RmlsdGVyQ29uZGl0aW9ucyhxdWVyeUNvbmRpdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5xdWVyeUVtaXR0ZXIuZW1pdChxdWVyeUNvbmRpdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgLy8g5pu05paw5Y6G5Y+y6K6w5b2VXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZVF1ZXJ5SGlzdHJveSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5riF56m6LT7mnaHku7blhajpg6jph43nva7kuLrnqbpcclxuICAgICAqL1xyXG4gICAgY2xlYXIoKSB7XHJcbiAgICAgICAgLy8gdGhpcy5pc0ZvbGQgPSAhdGhpcy5pc0ZvbGQ7XHJcbiAgICAgICAgY29uc3QgaXNOb3RFbXB0eSA9IHRoaXMudmlzaWJsZVNlbGVjdGVkQ29uZGl0aW9ucy5zb21lKGNvbmRpdGlvbiA9PiBjb25kaXRpb24udmFsdWUuaXNFbXB0eSgpID09IGZhbHNlKTtcclxuICAgICAgICBpZiAoaXNOb3RFbXB0eSkge1xyXG4gICAgICAgICAgICBjb25zdCBuZXdMaXN0OiBBcnJheTxRdWVyeUNvbmRpdGlvbj4gPSBjbG9uZURlZXAodGhpcy5mYXJyaXNRdWVyeUNvbmRpdGlvbi5yZXNldFNlbGVjdGVkQ29uZGl0aW9uVmFsdWVzKHRydWUpKTtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEZpZWxkQ29uZGl0aW9ucyA9IG5ld0xpc3Q7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRTb2x1dGlvbi5xdWVyeUNvbmRpdGlvbnMgPSBuZXdMaXN0O1xyXG4gICAgICAgICAgICB0aGlzLnZpc2libGVTZWxlY3RlZENvbmRpdGlvbnMgPSB0aGlzLnNlbGVjdGVkRmllbGRDb25kaXRpb25zLmZpbHRlcigoaXRlbTogUXVlcnlDb25kaXRpb24pID0+IHsgcmV0dXJuICEhaXRlbS52aXNpYmxlIH0pO1xyXG4gICAgICAgICAgICB0aGlzLnNvbHV0aW9uSGFuZGxlci5zZXRDdXJyZW50UXVlcnlDb25kaXRpb25zKGNsb25lRGVlcCh0aGlzLnZpc2libGVTZWxlY3RlZENvbmRpdGlvbnMpKTtcclxuICAgICAgICAgICAgdGhpcy5zb2x1dGlvbkhhbmRsZXIuc2V0RmlsdGVyQ29uZGl0aW9ucyh0aGlzLnZpc2libGVTZWxlY3RlZENvbmRpdGlvbnMpO1xyXG4gICAgICAgICAgICB0aGlzLm1hcmtBc0NoYW5nZWQodHJ1ZSwgdGhpcy5zZWxlY3RlZFNvbHV0aW9uLmlkKTtcclxuICAgICAgICAgICAgdGhpcy5xdWVyeSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaKmOWPoOaMiemSrueahOa4heepulxyXG4gICAgICovXHJcbiAgICBmb2xkQ2xlYXJIYW5kbGVyKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzRm9sZCkge1xyXG4gICAgICAgICAgICAvLyDlpoLmnpzngrnlh7vnmoTml7blgJnmmK/lj47mipjnmoRcclxuICAgICAgICAgICAgdGhpcy5pc0ZvbGQgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc3VtbWFyeUNvbmRpdGlvbnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdW1tYXJ5Q29uZGl0aW9ucyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8g5aaC5p6c54K55Ye755qE5pe25YCZ5piv5bGV5byA55qEXHJcbiAgICAgICAgICAgIHRoaXMuY2xlYXIoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDnrq3lpLTngrnlh7vkuovku7ZcclxuICAgICAqL1xyXG4gICAgYXJyb3dDbGljaygpIHtcclxuICAgICAgICB0aGlzLmlzRm9sZCA9ICF0aGlzLmlzRm9sZDtcclxuICAgICAgICB0aGlzLndoZW5Gb2xkU2V0U3VtbWFyeUNvbmRpdGlvbnMoKTtcclxuICAgICAgICBpZiAoIXRoaXMuaXNGb2xkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3VtbWFyeUNvbmRpdGlvbnMgPSBbXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB3aGVuRm9sZFNldFN1bW1hcnlDb25kaXRpb25zKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzRm9sZCkge1xyXG4gICAgICAgICAgICAvLyDlpoLmnpzlj47miphcclxuICAgICAgICAgICAgY29uc3QgaXNOb3RFbXB0eSA9IHRoaXMudmlzaWJsZVNlbGVjdGVkQ29uZGl0aW9ucy5zb21lKGNvbmRpdGlvbiA9PiBjb25kaXRpb24udmFsdWUuaXNFbXB0eSgpID09IGZhbHNlKTtcclxuICAgICAgICAgICAgaWYgKGlzTm90RW1wdHkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3VtbWFyeUNvbmRpdGlvbnMgPSB0aGlzLnZpc2libGVTZWxlY3RlZENvbmRpdGlvbnMuZmlsdGVyKGNvbmRpdGlvbiA9PiBjb25kaXRpb24udmFsdWUuaXNFbXB0eSgpID09IGZhbHNlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3VtbWFyeUNvbmRpdGlvbnMgPSBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOS4uuezu+e7n+mihOe9ruaWueahiOaIluiAheiHquWumuS5ieafpeivouaWueahiOiuvue9ruetm+mAieadoeS7tum7mOiupOWAvFxyXG4gICAgICogQHBhcmFtIGNvbmZpZ3Mg6buY6K6k5YC86K6+572uXHJcbiAgICAgKiBAcGFyYW0gc2VsZWN0ZWRTb2x1dGlvbiDlvZPliY3pgInmi6nnmoTnrZvpgInmlrnmoYhcclxuICAgICAqL1xyXG4gICAgc2V0UXVlcnlDb25kaXRpb25WYWx1ZXMoY29uZmlnczogRGVmYXVsdENvbmZpZ3MsIHNlbGVjdGVkU29sdXRpb246IFF1ZXJ5U29sdXRpb25Wbyk6IHZvaWQge1xyXG4gICAgICAgIGxldCB0YXJnZXRTb2x1dGlvbjogUXVlcnlTb2x1dGlvblZvO1xyXG4gICAgICAgIGxldCB0YXJnZXRTb2x1dGlvbldpdGhWYWx1ZXM6IFF1ZXJ5U29sdXRpb25WbztcclxuICAgICAgICAvL+mrmOe6p+aooeW8j+S4i+S4jeaUr+aMgem7mOiupOWAvFxyXG4gICAgICAgIGlmIChjb25maWdzICYmIEFycmF5LmlzQXJyYXkoY29uZmlncy5maWVsZENvbmZpZ3MpICYmIGNvbmZpZ3MuZmllbGRDb25maWdzLmxlbmd0aCAmJiBzZWxlY3RlZFNvbHV0aW9uLm1vZGUgIT09ICcyJykge1xyXG4gICAgICAgICAgICBpZihzZWxlY3RlZFNvbHV0aW9uLmhhc093blByb3BlcnR5KCd0eXBlJykgJiYgc2VsZWN0ZWRTb2x1dGlvblsndHlwZSddID09ICdwcmUnKSB7XHJcbiAgICAgICAgICAgICAgICAvL+WmguaenOaYr+WOhuWPsuiusOW9lVxyXG4gICAgICAgICAgICAgICAgdGFyZ2V0U29sdXRpb24gPSBudWxsOyBcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0KHNlbGVjdGVkU29sdXRpb24pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0U29sdXRpb24gPSBjb25maWdzLmlzQ3VycmVudCA/IHNlbGVjdGVkU29sdXRpb24gOiAoc2VsZWN0ZWRTb2x1dGlvbi5pc1N5c3RlbSA/IHNlbGVjdGVkU29sdXRpb24gOiBudWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGFyZ2V0U29sdXRpb24gJiYgdGFyZ2V0U29sdXRpb24ucXVlcnlDb25kaXRpb25zICYmIHRhcmdldFNvbHV0aW9uLnF1ZXJ5Q29uZGl0aW9ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRhcmdldFNvbHV0aW9uV2l0aFZhbHVlcyA9IGNsb25lRGVlcCh0aGlzLnNvbHV0aW9uU2VydmljZS5zZXRWYWx1ZXModGFyZ2V0U29sdXRpb24sIGNvbmZpZ3MuZmllbGRDb25maWdzLCAhIWNvbmZpZ3MucmVhZG9ubHkpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZG9uZVNldERlZmF1bHRWYWx1ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdCh0YXJnZXRTb2x1dGlvbldpdGhWYWx1ZXMpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy/kuI3kuLroh6rlrprkuYnmlrnmoYjorr7nva7pu5jorqTlgLzml7bvvIzmoIforrDkuIvopoHkuLrlhbbotYvpu5jorqTlgLznmoTmhI/lm77vvIzkvYbmnKrmiJDlip9cclxuICAgICAgICAgICAgICAgIHRoaXMuZG9uZVNldERlZmF1bHRWYWx1ZSA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgLy/lpoLmnpzmsqHmnInorr7nva7pu5jorqTlgLzvvIzlsLHmiorlvZPliY3pgInkuK3mlrnmoYjnmoTmnaHku7bnmoTlgLzkvKDlh7pcclxuICAgICAgICAgICAgICAgIHRoaXMuc29sdXRpb25IYW5kbGVyLnNldEN1cnJlbnRRdWVyeUNvbmRpdGlvbnModGhpcy5zZWxlY3RlZFNvbHV0aW9uLnF1ZXJ5Q29uZGl0aW9ucyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdChzZWxlY3RlZFNvbHV0aW9uKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWKoOi9veetm+mAieaWueahiOWQjuiHquWKqOafpeivolxyXG4gICAgICogQHBhcmFtIGN1cnJlbnRTb2x1dGlvbiDlvZPliY3nrZvpgInmlrnmoYggXHJcbiAgICAgKi9cclxuICAgIGluaXRBdXRvUXVlcnkoY3VycmVudFNvbHV0aW9uOiBRdWVyeVNvbHV0aW9uVm8pOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5lbmFibGVJbml0UXVlcnkgJiYgdGhpcy5kb25lSW5pdFF1ZXJ5ICYmIHRoaXMuZW5hYmxlSGlzdG9yeSAmJiBjdXJyZW50U29sdXRpb24ubW9kZSAhPT0gJzInKSB7XHJcbiAgICAgICAgICAgIC8vIOW3sumAmui/h+WOhuWPsuiusOW9lei/m+ihjOi/h+afpeivolxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBlbmFibGVRdWVyeTogYm9vbGVhbiA9IHRydWU7XHJcbiAgICAgICAgaWYgKGN1cnJlbnRTb2x1dGlvbiAmJiBjdXJyZW50U29sdXRpb24ucXVlcnlDb25kaXRpb25zICYmIGN1cnJlbnRTb2x1dGlvbi5xdWVyeUNvbmRpdGlvbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzU2V0RGVmYXVsdFZhbHVlICYmICF0aGlzLmRvbmVTZXREZWZhdWx0VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGVuYWJsZVF1ZXJ5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBlbmFibGVRdWVyeSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGVuYWJsZVF1ZXJ5ICYmIHRoaXMuZW5hYmxlSW5pdFF1ZXJ5KSB7XHJcbiAgICAgICAgICAgIC8vIHRoaXMuc29sdXRpb25IYW5kbGVyLnNldEZpbHRlckNvbmRpdGlvbnModGhpcy5zZWxlY3RlZFNvbHV0aW9uLnF1ZXJ5Q29uZGl0aW9ucyk7IOaJp+ihjHF1ZXJ55pa55rOV5pe277yM5bey57uP5omn6KGMc2V0RmlsdGVyQ29uZGl0aW9uc1xyXG4gICAgICAgICAgICAvL2lmKHRoaXMuX3NlbGYubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZmFycmlzLXBhbmVsIC5idG4tZ3JvdXAgLmJ0bi1wcmltYXJ5Jykpe1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMucXVlcnkoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZG9uZUluaXRRdWVyeSA9IHRydWU7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvL31cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlvZPliY3mn6Xor6LmlrnmoYjnmoTnrZvpgInmnaHku7blj5HnlJ/lj5jljJbml7bvvIzmoIforrDmlrnmoYjlpITkuo7nvJbovpHnirbmgIFcclxuICAgICAqIEBwYXJhbSBpc0NoYW5nZWQg5pa55qGI5piv5ZCm5aSE5LqO57yW6L6R54q25oCBXHJcbiAgICAgKiBAcGFyYW0gc29sdXRpb25JZCDpnIDopoHmoIforrDmmK/lkKblpITkuo7nvJbovpHnirbmgIHnmoTmlrnmoYjnmoRpZFxyXG4gICAgICovXHJcbiAgICBtYXJrQXNDaGFuZ2VkKGlzQ2hhbmdlZDogYm9vbGVhbiwgc29sdXRpb25JZDogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5xdWVyeVNvbHV0aW9uVm9zLmZvckVhY2goc29sdXRpb24gPT4ge1xyXG4gICAgICAgICAgICBpZiAoc29sdXRpb24uaWQgPT0gc29sdXRpb25JZClcclxuICAgICAgICAgICAgICAgIHNvbHV0aW9uLmlzQ2hhbmdlZCA9IGlzQ2hhbmdlZDtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnF1ZXJ5U29sdXRpb25BZHZhbmNlZFZvcy5mb3JFYWNoKHNvbHV0aW9uID0+IHtcclxuICAgICAgICAgICAgaWYgKHNvbHV0aW9uLmlkID09IHNvbHV0aW9uSWQpXHJcbiAgICAgICAgICAgICAgICBzb2x1dGlvbi5pc0NoYW5nZWQgPSBpc0NoYW5nZWQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZFNvbHV0aW9uLmlzQ2hhbmdlZCA9IGlzQ2hhbmdlZDtcclxuICAgICAgICB0aGlzLmNkZi5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlpITnkIbnrZvpgInmjInpkq7lkozmuIXnqbrmjInpkq7nmoTlk43lupTlvI/kvY3nva7lj5jmm7RcclxuICAgICAqIEBwYXJhbSAkZXZlbnQgZmFycmlzLXF1ZXJ5Y29uZGl0aW9u57uE5Lu25YaF6YOo5piv5ZCm5pi+56S65oyJ6ZKuXHJcbiAgICAgKi9cclxuICAgIC8vIHNob3dCdXR0b25IYW5kbGUoJGV2ZW50OiBhbnkpIHtcclxuICAgIC8vICAgICBpZighdGhpcy5pc0Rpc2FibGVkKXtcclxuICAgIC8vICAgICAgICAgbGV0IGRhdGEgPSAkZXZlbnQ7XHJcbiAgICAvLyAgICAgICAgIHRoaXMucXVlcnlCdXR0b25PblJpZ2h0ID0gIWRhdGE7XHJcbiAgICAvLyAgICAgICAgIGlmKHRoaXMuZW5hYmxlSW5pdFF1ZXJ5ICYmICF0aGlzLmRvbmVJbml0UXVlcnkpIHtcclxuICAgIC8vICAgICAgICAgICAgIHRoaXMuaW5pdEF1dG9RdWVyeSh0aGlzLnNlbGVjdGVkU29sdXRpb24pO1xyXG4gICAgLy8gICAgICAgICB9XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6ZSu55uY55uR5ZCs5Ye95pWw77yM5b2T5oyJ5LiL5Zue6L2m6ZSu5pe255u45b2T5LqO5oyJ5LiL562b6YCJ5oyJ6ZKuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgbGlzdGVuS2V5Qm9hcmQoKSB7XHJcbiAgICAgICAgdGhpcy5fc2VsZi5uYXRpdmVFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuaGFuZGxlS2V5RG93bik7XHJcbiAgICB9XHJcblxyXG4gICAgaGFuZGxlS2V5RG93biA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIGlmIChldmVudC5rZXkgPT0gJ0VudGVyJykge1xyXG4gICAgICAgICAgICAvL+mrmOe6p+aooeW8j+S4i+aVsOaNruagvOW8j+eahOmXrumimO+8jOi+k+WFpeeKtuaAgeS4reebtOaOpeWbnui9pu+8jOi+k+WFpeahhuexu+Wei+aOp+S7tuaXoOazleabtOaWsHZhbHVl77yM5omL5Yqo6Kem5Y+R5LiA5LiL5aSx5Y6754Sm54K577yM5pu05paw54q25oCBXHJcbiAgICAgICAgICAgIGlmKHRoaXMuc2VsZWN0ZWRTb2x1dGlvbi5tb2RlID09PSAnMicpIHtcclxuICAgICAgICAgICAgICAgIGxldCBhY3RpdmVFbGUgID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBhcyBIVE1MRWxlbWVudFxyXG4gICAgICAgICAgICAgICAgYWN0aXZlRWxlLmJsdXIoKVxyXG4gICAgICAgICAgICAgICAgYWN0aXZlRWxlLmZvY3VzKClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnF1ZXJ5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICAgIFxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDoh6rliqjliJ3lp4vljJbmn6Xor6JcclxuICAgICAqIOWQr+eUqOWOhuWPsuiusOW9le+8jOW5tuS4lOWQr+eUqOS6huWIneWni+WMluafpeivou+8jOWmguaenOacieadoeS7tu+8jOWwsei/m+ihjOafpeivolxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGluaXRBdXRvUXVlcnlCeUxTKCkge1xyXG4gICAgICAgIC8vIOWQr+eUqOWOhuWPslxyXG4gICAgICAgIGlmICh0aGlzLmVuYWJsZUhpc3RvcnkgJiYgIXRoaXMuaXNEaXNhYmxlZCkge1xyXG4gICAgICAgICAgICAvLyBrZXlcclxuICAgICAgICAgICAgdGhpcy5zZXRMU0tleSgpO1xyXG4gICAgICAgICAgICAvLyDliJ3lp4vljJblr7nosaFcclxuICAgICAgICAgICAgdGhpcy5pbml0UXVlcnlTb2x1dGlvbigpO1xyXG4gICAgICAgICAgICAvLyDlpoLmnpzorr7nva7kuobliJ3lp4vmn6Xor6JcclxuICAgICAgICAgICAgaWYgKHRoaXMuZW5hYmxlSW5pdFF1ZXJ5KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvcm1hdEluaXRRdWVyeVNvbHV0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5oaXN0b3J5UmVmZXJbJ2ZvdW5kU2NobWUnXVsncXVlcnlDb25kaXRpb25zJ10ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHF1ZXJ5Q29uZGl0aW9ucyA9IGNsb25lRGVlcCh0aGlzLmhpc3RvcnlSZWZlclsnZm91bmRTY2htZSddWydxdWVyeUNvbmRpdGlvbnMnXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEZpZWxkQ29uZGl0aW9ucyA9IHF1ZXJ5Q29uZGl0aW9ucztcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpc2libGVTZWxlY3RlZENvbmRpdGlvbnMgPSB0aGlzLnNlbGVjdGVkRmllbGRDb25kaXRpb25zLmZpbHRlcigoaXRlbTogUXVlcnlDb25kaXRpb24pID0+IHsgcmV0dXJuICEhaXRlbS52aXNpYmxlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZpc2libGVDb25kaXRpb25zID0gY2xvbmVEZWVwKHRoaXMudmlzaWJsZVNlbGVjdGVkQ29uZGl0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g6K6+572u5p+l6K+i5p2h5Lu2XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zb2x1dGlvbkhhbmRsZXIuc2V0RmlsdGVyQ29uZGl0aW9ucyh2aXNpYmxlQ29uZGl0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g5oqb5Ye65p+l6K+i5LqL5Lu2XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5xdWVyeUVtaXR0ZXIuZW1pdCh2aXNpYmxlQ29uZGl0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g5qCH6K6wXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb25lSW5pdFF1ZXJ5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWIneWni+WMllxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGluaXRRdWVyeVNvbHV0aW9uKCkge1xyXG4gICAgICAgIGxldCBxdWVyeXNvbHV0aW9uVk8gPSBuZXcgUXVlcnlTb2x1dGlvblZvKCk7XHJcbiAgICAgICAgcXVlcnlzb2x1dGlvblZPLmlkID0gdGhpcy5zb2x1dGlvblNlcnZpY2UuZ2V0R3VpZCgpO1xyXG4gICAgICAgIHF1ZXJ5c29sdXRpb25WTy5jb2RlID0gdGhpcy5sb2NhbGVTZXJ2aWNlLmdldFZhbHVlKFwicXVlcnlTb2x1dGlvbi5jb250YWluZXIuaGlzdHJveU5hbWVcIik7XHJcbiAgICAgICAgcXVlcnlzb2x1dGlvblZPLnF1ZXJ5Q29uZGl0aW9ucyA9IFtdO1xyXG4gICAgICAgIHF1ZXJ5c29sdXRpb25WTy5iZWxvbmdJZCA9IHRoaXMuZm9ybUlkO1xyXG4gICAgICAgIHF1ZXJ5c29sdXRpb25WTy5pc1N5c3RlbSA9IHRydWU7XHJcbiAgICAgICAgcXVlcnlzb2x1dGlvblZPLnR5cGUgPSAncHJlJztcclxuICAgICAgICBxdWVyeXNvbHV0aW9uVk8ubW9kZSA9ICcxJztcclxuICAgICAgICBxdWVyeXNvbHV0aW9uVk8ucXVlcnlDb25kaXRpb25zQWR2YW5jZWQgPSB7cmVsYXRpb246MSwgaXRlbXM6W10sIGNoaWxkcmVuOiBbXSwgcGF0aDogWzFdLCBncm91cGlkOjF9XHJcbiAgICAgICAgdGhpcy5oaXN0b3J5UmVmZXJbJ2ZvdW5kU2NobWUnXSA9IHF1ZXJ5c29sdXRpb25WTztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog5Yid5aeL5YyW6auY57qn5qih5byPXHJcbiAgICAgKi9cclxuICAgICBwcml2YXRlIGluaXRBZHZhbmNlZFNvbHV0aW9uKCkge1xyXG4gICAgICAgIGxldCBxdWVyeXNvbHV0aW9uVk8gPSBuZXcgUXVlcnlTb2x1dGlvblZvKCk7XHJcbiAgICAgICAgcXVlcnlzb2x1dGlvblZPLmlkID0gdGhpcy5zb2x1dGlvblNlcnZpY2UuZ2V0R3VpZCgpO1xyXG4gICAgICAgIHF1ZXJ5c29sdXRpb25WTy5jb2RlID0gKCh0aGlzLnByZXNldFF1ZXJ5U29sdXRpb25OYW1lICE9IHRoaXMubG9jYWxlU2VydmljZS5nZXRWYWx1ZShcInF1ZXJ5U29sdXRpb24uY29udGFpbmVyLnN5c1ByZXNldE5hbWVcIikpID8gdGhpcy5wcmVzZXRRdWVyeVNvbHV0aW9uTmFtZSA6IHRoaXMubG9jYWxlU2VydmljZS5nZXRWYWx1ZShcInF1ZXJ5U29sdXRpb24uY29udGFpbmVyLmRlZmF1bHROYW1lXCIpKSArIHRoaXMubG9jYWxlU2VydmljZS5nZXRWYWx1ZShcImFkdmFuY2VkTW9kZS50ZXh0LnN5c0FkdmFuY2VkTmFtZVwiKTs7XHJcbiAgICAgICAgcXVlcnlzb2x1dGlvblZPLnF1ZXJ5Q29uZGl0aW9ucyA9IFtdO1xyXG4gICAgICAgIHF1ZXJ5c29sdXRpb25WTy5iZWxvbmdJZCA9IHRoaXMuZm9ybUlkO1xyXG4gICAgICAgIHF1ZXJ5c29sdXRpb25WTy5pc1N5c3RlbSA9IHRydWU7XHJcbiAgICAgICAgcXVlcnlzb2x1dGlvblZPLnR5cGUgPSAncHJlJztcclxuICAgICAgICBxdWVyeXNvbHV0aW9uVk8ubW9kZSA9ICcyJztcclxuICAgICAgICBxdWVyeXNvbHV0aW9uVk8ucXVlcnlDb25kaXRpb25zQWR2YW5jZWQgPSB7cmVsYXRpb246MSwgaXRlbXM6W10sIGNoaWxkcmVuOiBbXSwgcGF0aDogWzFdLCBncm91cGlkOjF9XHJcbiAgICAgICAgcmV0dXJuIHF1ZXJ5c29sdXRpb25WT1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Yid5aeL5YyW5p2l6IeqTFPnmoTmnaHku7ZcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBmb3JtYXRJbml0UXVlcnlTb2x1dGlvbigpIHtcclxuICAgICAgICBsZXQgaGlzdHJveUNvbmRpdGlvbiA9IHRoaXMuaHR0cFNlcnZpY2UuZ2V0TFModGhpcy5oaXN0b3J5UmVmZXIuc2NoZW1lS2V5TFMpO1xyXG4gICAgICAgIGlmIChoaXN0cm95Q29uZGl0aW9uLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgbGV0IGNvbnZlcnRvciA9IG5ldyBRdWVyeVNvbHV0aW9uVm9Db252ZXJ0b3IoKTtcclxuICAgICAgICAgICAgdGhpcy5oaXN0b3J5UmVmZXJbJ2ZvdW5kU2NobWUnXVsncXVlcnlDb25kaXRpb25zJ10gPSBoaXN0cm95Q29uZGl0aW9uO1xyXG4gICAgICAgICAgICAvLyDop4TojIPljJbmnaHku7ZcclxuICAgICAgICAgICAgdGhpcy5oaXN0b3J5UmVmZXJbJ2ZvdW5kU2NobWUnXSA9IHRoaXMuZm9ybWF0UXVlcnlTb2x1dGlvblZPKGNvbnZlcnRvciwgdGhpcy5oaXN0b3J5UmVmZXJbJ2ZvdW5kU2NobWUnXSk7XHJcbiAgICAgICAgICAgIC8vIOabtOaWsOmFjee9rlxyXG4gICAgICAgICAgICB0aGlzLnNvbHV0aW9uU2VydmljZS51cGRhdGVDb250cm9sKHRoaXMuaGlzdG9yeVJlZmVyWydmb3VuZFNjaG1lJ10sIHRoaXMucmVzZXRGaWVsZENvbmZpZ3MpO1xyXG4gICAgICAgICAgICB0aGlzLmhpc3RvcnlSZWZlci5pbml0Q29uZGl0aW9uID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDkv53lrZjkuYvlkI7mm7TmlrDljoblj7JcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjaGFuZ2VRdWVyeUhpc3Ryb3kodXBkYXRlQWxsID0gdHJ1ZSkge1xyXG4gICAgICAgIGlmICghdGhpcy5lbmFibGVIaXN0b3J5IHx8IHRoaXMuc2VsZWN0ZWRTb2x1dGlvbi5tb2RlICE9PSAnMScpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgcHJlSW5kZXggPSB0aGlzLnF1ZXJ5U29sdXRpb25Wb3MuZmluZEluZGV4KChxc29sdXRpb25WTykgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gcXNvbHV0aW9uVk9bJ3R5cGUnXSA9PSAncHJlJztcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyDmiafooYzmn6Xor6LkuYvlkI7vvIzkuIrmrKHmn6Xor6LnmoTkv67mlLnlsLHkuI3orqTkuLrmmK/lj5jmm7TkuoZcclxuICAgICAgICBpZiAocHJlSW5kZXggPiAtMSkge1xyXG4gICAgICAgICAgICB0aGlzLnF1ZXJ5U29sdXRpb25Wb3NbcHJlSW5kZXhdWydpc0NoYW5nZWQnXSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZFNvbHV0aW9uWyd0eXBlJ10gPT0gJ3ByZScpIHtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFNvbHV0aW9uWydpc0NoYW5nZWQnXSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBxdWVyeUNvbmRpdGlvbnMgPSBjbG9uZURlZXAodGhpcy5zZWxlY3RlZEZpZWxkQ29uZGl0aW9ucyk7XHJcblxyXG4gICAgICAgIHRoaXMuaGlzdG9yeVJlZmVyWydmb3VuZFNjaG1lJ10ucXVlcnlDb25kaXRpb25zID0gcXVlcnlDb25kaXRpb25zO1xyXG4gICAgICAgIC8vIOabtOaWsOe8k+WtmFxyXG4gICAgICAgIHRoaXMuaHR0cFNlcnZpY2Uuc2V0TFModGhpcy5oaXN0b3J5UmVmZXIuc2NoZW1lS2V5TFMsIHRoaXMuaGlzdG9yeVJlZmVyWydmb3VuZFNjaG1lJ10ucXVlcnlDb25kaXRpb25zKTtcclxuICAgICAgICBpZiAodXBkYXRlQWxsKSB7XHJcbiAgICAgICAgICAgIC8vIOWPkei1t+ivt+axguS/neWtmOWOhuWPsuiusOW9lVxyXG4gICAgICAgICAgICB0aGlzLmh0dHBTZXJ2aWNlLnNhdmVIaXN0cm95KHRoaXMuaGlzdG9yeVJlZmVyWydmb3VuZFNjaG1lJ10sIHRoaXMuc2Vzc2lvbklkKS5zdWJzY3JpYmUoKCkgPT4ge1xyXG5cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5aSE55CGaWZyYW1l5bWM5aWXXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2V0VG9wV2luZG93KCk6IFdpbmRvdyB7XHJcbiAgICAgICAgbGV0IGN1cldpbjogV2luZG93ID0gd2luZG93LnNlbGY7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgd2hpbGUgKGN1cldpbi5sb2NhdGlvbi5vcmlnaW4gPT09IGN1cldpbi5wYXJlbnQubG9jYXRpb24ub3JpZ2luKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VyV2luICE9PSBjdXJXaW4ucGFyZW50ICYmICEoY3VyV2luIGFzIGFueSkuaXNSVEZUb3BXaW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJXaW4gPSBjdXJXaW4ucGFyZW50O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgfVxyXG4gICAgICAgIHJldHVybiBjdXJXaW47XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDorr7nva5rZXlcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBzZXRMU0tleSgpIHtcclxuICAgICAgICAvLyDojrflj5Z3aW5kb3dcclxuICAgICAgICBsZXQgY3VyV2luZG93ID0gdGhpcy5nZXRUb3BXaW5kb3coKTtcclxuICAgICAgICBsZXQgdXNlckNvZGUgPSAnJztcclxuICAgICAgICBpZiAoY3VyV2luZG93Wydnc3BmcmFtZXdvcmtTZXJ2aWNlJ10gJiYgY3VyV2luZG93Wydnc3BmcmFtZXdvcmtTZXJ2aWNlJ10uaGFzT3duUHJvcGVydHkoJ2NvbW1vbicpKSB7XHJcbiAgICAgICAgICAgIHVzZXJDb2RlID0gY3VyV2luZG93Wydnc3BmcmFtZXdvcmtTZXJ2aWNlJ11bJ2NvbW1vbiddLnVzZXJJbmZvcy5nZXQoKS5jb2RlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhpc3RvcnlSZWZlci5zY2hlbWVLZXlMUyA9IHVzZXJDb2RlID8gJ1NjaGVtZScgKyB0aGlzLl9pZFNlci5lbmNyeXB0KHVzZXJDb2RlICsgdGhpcy5mb3JtSWQpIDogJyc7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5Yik5pat5b2T5YmN55So5oi35piv5ZCm5pyJ5p2D6ZmQ6K6+572u5YWs5YWx57G75Z6L562b6YCJ5pa55qGIXHJcbiAgICBjaGVja0F1dGhvcml0eShlOiBhbnkpIHtcclxuICAgICAgICBpZihlICE9ICdwcml2YXRlJykgeyBcclxuICAgICAgICAgICAgdGhpcy5odHRwU2VydmljZS5nZXRBdXRoKCdRdWVyeVNvbHV0aW9uJywgdGhpcy5zZXNzaW9uSWQpLnN1YnNjcmliZShkYXRhID0+IHtcclxuICAgICAgICAgICAgICAgIGlmKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZighZGF0YVsnc3VjY2VzcyddKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc29sdXRpb25TZXJ2aWNlLnNob3dJbmZvKHRoaXMubG9jYWxlU2VydmljZS5nZXRWYWx1ZSgnZXh0ZW5kUXVlcnlTb2x1dGlvbi5hdXRoLmNyZWF0ZUVycm9yJyksICd3YXJuaW5nJywgJycsIDE1MDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmVBc0RpYWxvZy5hdXRob3JpdHlFcnJvciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZUFzRGlhbG9nLnJhZGlvR3JvdXBWYWx1ZSA9IHRoaXMuc2F2ZUFzRGlhbG9nLnBSYWRpb0dyb3VwVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoZSA9PSAnb3JnJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3JnRGF0YSA9IGRhdGFbJ2F1dGhPcmdhbml6YXRpb25EYXRhJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvcmdEYXRhKSAmJiBvcmdEYXRhLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZUFzRGlhbG9nLmRhdGFQZXJtaXNzaW9uSWRzID0gb3JnRGF0YTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3JnRGF0YS50b1N0cmluZygpICE9ICcqJyAmJiAhdGhpcy5zYXZlQXNEaWFsb2cuc2VsZWN0ZWRPcmdJZHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZUFzRGlhbG9nLnNlbGVjdGVkT3JnSWRzID0gdGhpcy5zYXZlQXNEaWFsb2cuZGF0YVBlcm1pc3Npb25JZHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZUFzRGlhbG9nLm5vRGF0YUF1dGhvcml0eSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZUFzRGlhbG9nLnBSYWRpb0dyb3VwVmFsdWUgPSBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNvbHV0aW9uU2VydmljZS5zaG93SW5mbyh0aGlzLmxvY2FsZVNlcnZpY2UuZ2V0VmFsdWUoJ2V4dGVuZFF1ZXJ5U29sdXRpb24uYXV0aC5ub0RhdGFBdXRob3JpdHknKSwgJ3dhcm5pbmcnLCAnJywgMTUwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZlQXNEaWFsb2cubm9EYXRhQXV0aG9yaXR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmVBc0RpYWxvZy5yYWRpb0dyb3VwVmFsdWUgPSB0aGlzLnNhdmVBc0RpYWxvZy5wUmFkaW9Hcm91cFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZlQXNEaWFsb2cucFJhZGlvR3JvdXBWYWx1ZSA9IGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybih0aGlzLmxvY2FsZVNlcnZpY2UuZ2V0VmFsdWUoJ2V4dGVuZFF1ZXJ5U29sdXRpb24uYXV0aC5hcGlFcnJvcicpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5zYXZlQXNEaWFsb2cucFJhZGlvR3JvdXBWYWx1ZSA9IGU7XHJcbiAgICAgICAgICAgIHRoaXMuc2F2ZUFzRGlhbG9nLmF1dGhvcml0eUVycm9yID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbn1cclxuIl19