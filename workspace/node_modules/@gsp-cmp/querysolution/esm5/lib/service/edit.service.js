/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/edit.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/** @type {?} */
var itemIndex = (/**
 * @param {?} item
 * @param {?} data
 * @return {?}
 */
function (item, data) {
    for (var idx = 0; idx < data.length; idx++) {
        if (data[idx].id === item.id) {
            return idx;
        }
    }
    return -1;
});
var ɵ0 = itemIndex;
var EditService = /** @class */ (function () {
    function EditService() {
        this.createdItems = [];
        this.updatedItems = [];
    }
    /**
     * @param {?} item
     * @return {?}
     */
    EditService.prototype.update = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (!this.isNew(item)) {
            /** @type {?} */
            var index = itemIndex(item, this.updatedItems);
            if (index !== -1) {
                this.updatedItems.splice(index, 1, item);
            }
            else {
                this.updatedItems.push(item);
            }
        }
        else {
            /** @type {?} */
            var index = this.createdItems.indexOf(item);
            this.createdItems.splice(index, 1, item);
        }
    };
    /**
     * @param {?} item
     * @return {?}
     */
    EditService.prototype.isNew = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return !item.id;
    };
    /**
     * @param {?} target
     * @param {?} source
     * @return {?}
     */
    EditService.prototype.assignValues = /**
     * @param {?} target
     * @param {?} source
     * @return {?}
     */
    function (target, source) {
        Object.assign(target, source);
    };
    EditService.decorators = [
        { type: Injectable }
    ];
    return EditService;
}());
export { EditService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    EditService.prototype.createdItems;
    /**
     * @type {?}
     * @private
     */
    EditService.prototype.updatedItems;
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1jbXAvcXVlcnlzb2x1dGlvbi8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlL2VkaXQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0lBRXJDLFNBQVM7Ozs7O0FBQUcsVUFBQyxJQUFTLEVBQUUsSUFBVztJQUNyQyxLQUFLLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUN4QyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEtBQUssSUFBSSxDQUFDLEVBQUUsRUFBRTtZQUMxQixPQUFPLEdBQUcsQ0FBQztTQUNkO0tBQ0o7SUFFRCxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ2QsQ0FBQyxDQUFBOztBQUVEO0lBQUE7UUFFWSxpQkFBWSxHQUFVLEVBQUUsQ0FBQztRQUN6QixpQkFBWSxHQUFVLEVBQUUsQ0FBQztJQXdCckMsQ0FBQzs7Ozs7SUF0QlUsNEJBQU07Ozs7SUFBYixVQUFjLElBQVM7UUFDbkIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7O2dCQUNiLEtBQUssR0FBRyxTQUFTLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUM7WUFDaEQsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLEVBQUU7Z0JBQ2QsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQzthQUM1QztpQkFBTTtnQkFDSCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNoQztTQUNKO2FBQU07O2dCQUNHLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7WUFDN0MsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUM1QztJQUNMLENBQUM7Ozs7O0lBRU0sMkJBQUs7Ozs7SUFBWixVQUFhLElBQVM7UUFDbEIsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7SUFDcEIsQ0FBQzs7Ozs7O0lBRU0sa0NBQVk7Ozs7O0lBQW5CLFVBQW9CLE1BQVcsRUFBRSxNQUFXO1FBQ3hDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2xDLENBQUM7O2dCQXpCSixVQUFVOztJQTJCWCxrQkFBQztDQUFBLEFBM0JELElBMkJDO1NBMUJZLFdBQVc7Ozs7OztJQUNwQixtQ0FBaUM7Ozs7O0lBQ2pDLG1DQUFpQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmNvbnN0IGl0ZW1JbmRleCA9IChpdGVtOiBhbnksIGRhdGE6IGFueVtdKTogbnVtYmVyID0+IHtcclxuICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGRhdGEubGVuZ3RoOyBpZHgrKykge1xyXG4gICAgICAgIGlmIChkYXRhW2lkeF0uaWQgPT09IGl0ZW0uaWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlkeDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIC0xO1xyXG59O1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRWRpdFNlcnZpY2Uge1xyXG4gICAgcHJpdmF0ZSBjcmVhdGVkSXRlbXM6IGFueVtdID0gW107XHJcbiAgICBwcml2YXRlIHVwZGF0ZWRJdGVtczogYW55W10gPSBbXTtcclxuXHJcbiAgICBwdWJsaWMgdXBkYXRlKGl0ZW06IGFueSk6IHZvaWQge1xyXG4gICAgICAgIGlmICghdGhpcy5pc05ldyhpdGVtKSkge1xyXG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IGl0ZW1JbmRleChpdGVtLCB0aGlzLnVwZGF0ZWRJdGVtcyk7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlZEl0ZW1zLnNwbGljZShpbmRleCwgMSwgaXRlbSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZWRJdGVtcy5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmNyZWF0ZWRJdGVtcy5pbmRleE9mKGl0ZW0pO1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZWRJdGVtcy5zcGxpY2UoaW5kZXgsIDEsIGl0ZW0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNOZXcoaXRlbTogYW55KTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuICFpdGVtLmlkO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3NpZ25WYWx1ZXModGFyZ2V0OiBhbnksIHNvdXJjZTogYW55KTogdm9pZCB7XHJcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSk7XHJcbiAgICB9XHJcbiAgICBcclxufVxyXG4iXX0=