/**
 * @fileoverview added by tsickle
 * Generated from: lib/summary-list/summary-list.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, ElementRef, NgZone, HostBinding, ChangeDetectorRef } from '@angular/core';
import ResizeObserver from "resize-observer-polyfill";
var SummaryListComponent = /** @class */ (function () {
    function SummaryListComponent(ngZone, cd) {
        this.ngZone = ngZone;
        this.cd = cd;
        this.cls = true;
        this.conditions = new Array();
        this.enableTips = false;
        this.ro = null;
        this.widthFlag = 0;
    }
    /**
     * @return {?}
     */
    SummaryListComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.ro) {
            this.ro.unobserve(this.wrapperEl.nativeElement);
            this.ro = null;
        }
    };
    /**
     * @return {?}
     */
    SummaryListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.observerElement();
    };
    /**
     * @private
     * @return {?}
     */
    SummaryListComponent.prototype.observerElement = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.ro = new ResizeObserver((/**
             * @param {?} entries
             * @param {?} observer
             * @return {?}
             */
            function (entries, observer) {
                /** @type {?} */
                var tempWidth = entries[0].contentRect.width;
                // 宽度变化超过80开始计算
                if (Math.abs(tempWidth - _this.widthFlag) > 15) {
                    _this.widthFlag = tempWidth;
                    _this.changeTipsState();
                }
            }));
            _this.ro.observe(_this.wrapperEl.nativeElement);
        }));
    };
    /**
     * @private
     * @return {?}
     */
    SummaryListComponent.prototype.changeTipsState = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var tEnableTips = this.enableTips;
        if (this.wrapperEl.nativeElement.clientWidth + 2 < this.wrapperEl.nativeElement.scrollWidth) {
            tEnableTips = true;
        }
        else {
            tEnableTips = false;
        }
        if (tEnableTips !== this.enableTips) {
            this.enableTips = tEnableTips;
            this.cd.markForCheck();
            this.cd.detectChanges();
        }
    };
    SummaryListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-summary-list',
                    template: "<div class=\"summary-condition-wrapper\" #wrapper [farrisTooltip]=\"enableTips\" [placement]=\"'bottom'\" [content]=\"tpTemplate\" [tipCls]=\"'summary-list--tips'\" [tipWidth]=\"widthFlag+'px'\">\r\n    <ng-container *ngFor=\"let currentItem of conditions;let i = index;let lastIndex = last;\">\r\n        <lib-summary-condition class=\"summary-condition--item\" [condition]=\"currentItem\"></lib-summary-condition>\r\n        <span class=\"summary-condition--spliter\" [ngClass]=\"{'last-spliter': lastIndex}\"></span>\r\n    </ng-container>\r\n</div>\r\n<ng-template #tpTemplate>\r\n    <div class=\"summary-condition--tips\" *ngIf=\"enableTips\">\r\n        <ng-container *ngFor=\"let currentItem of conditions;let i = index;let lastIndex=last;\">\r\n            <lib-summary-condition class=\"summary-condition--item\" [condition]=\"currentItem\"></lib-summary-condition>\r\n            <span class=\"summary-condition--gutter\">;</span>\r\n        </ng-container>\r\n    </div>\r\n</ng-template>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    SummaryListComponent.ctorParameters = function () { return [
        { type: NgZone },
        { type: ChangeDetectorRef }
    ]; };
    SummaryListComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class.summary-list',] }],
        wrapperEl: [{ type: ViewChild, args: ['wrapper', { read: ElementRef },] }],
        conditions: [{ type: Input }],
        enableTips: [{ type: Input }]
    };
    return SummaryListComponent;
}());
export { SummaryListComponent };
if (false) {
    /** @type {?} */
    SummaryListComponent.prototype.cls;
    /** @type {?} */
    SummaryListComponent.prototype.wrapperEl;
    /** @type {?} */
    SummaryListComponent.prototype.conditions;
    /** @type {?} */
    SummaryListComponent.prototype.enableTips;
    /**
     * @type {?}
     * @private
     */
    SummaryListComponent.prototype.ro;
    /** @type {?} */
    SummaryListComponent.prototype.widthFlag;
    /**
     * @type {?}
     * @private
     */
    SummaryListComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    SummaryListComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VtbWFyeS1saXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3AtY21wL3F1ZXJ5c29sdXRpb24vIiwic291cmNlcyI6WyJsaWIvc3VtbWFyeS1saXN0L3N1bW1hcnktbGlzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRyxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBYSxXQUFXLEVBQWlCLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRW5KLE9BQU8sY0FBYyxNQUFNLDBCQUEwQixDQUFDO0FBQ3REO0lBaUJFLDhCQUFvQixNQUFjLEVBQVUsRUFBcUI7UUFBN0MsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUFVLE9BQUUsR0FBRixFQUFFLENBQW1CO1FBVjlCLFFBQUcsR0FBRyxJQUFJLENBQUM7UUFJckMsZUFBVSxHQUEwQixJQUFJLEtBQUssRUFBa0IsQ0FBQztRQUNoRSxlQUFVLEdBQUcsS0FBSyxDQUFDO1FBRXBCLE9BQUUsR0FBMEIsSUFBSSxDQUFDO1FBQ3pDLGNBQVMsR0FBRyxDQUFDLENBQUM7SUFJZCxDQUFDOzs7O0lBRUQsMENBQVc7OztJQUFYO1FBQ0UsSUFBSSxJQUFJLENBQUMsRUFBRSxFQUFFO1lBQ1gsSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUNoRCxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQztTQUNoQjtJQUNILENBQUM7Ozs7SUFFRCx1Q0FBUTs7O0lBQVI7UUFDRSxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDekIsQ0FBQzs7Ozs7SUFFTyw4Q0FBZTs7OztJQUF2QjtRQUFBLGlCQVlDO1FBWEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUI7OztRQUFDO1lBQzVCLEtBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxjQUFjOzs7OztZQUFDLFVBQUMsT0FBTyxFQUFFLFFBQVE7O29CQUN2QyxTQUFTLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxLQUFLO2dCQUM5QyxlQUFlO2dCQUNmLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsS0FBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtvQkFDN0MsS0FBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7b0JBQzNCLEtBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztpQkFDeEI7WUFDSCxDQUFDLEVBQUMsQ0FBQztZQUNILEtBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDaEQsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7OztJQUVPLDhDQUFlOzs7O0lBQXZCOztZQUNNLFdBQVcsR0FBRyxJQUFJLENBQUMsVUFBVTtRQUNqQyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLFdBQVcsR0FBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFO1lBQzFGLFdBQVcsR0FBRyxJQUFJLENBQUM7U0FDcEI7YUFBTTtZQUNMLFdBQVcsR0FBRyxLQUFLLENBQUM7U0FDckI7UUFDRCxJQUFHLFdBQVcsS0FBSyxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2xDLElBQUksQ0FBQyxVQUFVLEdBQUcsV0FBVyxDQUFDO1lBQzlCLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUM7WUFDdkIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQztTQUN6QjtJQUNILENBQUM7O2dCQTFERixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIsby9CQUE0Qzs7aUJBRTdDOzs7O2dCQVAwRCxNQUFNO2dCQUF5QyxpQkFBaUI7OztzQkFVeEgsV0FBVyxTQUFDLG9CQUFvQjs0QkFFaEMsU0FBUyxTQUFDLFNBQVMsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUU7NkJBRXpDLEtBQUs7NkJBQ0wsS0FBSzs7SUErQ1IsMkJBQUM7Q0FBQSxBQTNERCxJQTJEQztTQXREWSxvQkFBb0I7OztJQUUvQixtQ0FBOEM7O0lBRTlDLHlDQUFrRTs7SUFFbEUsMENBQXlFOztJQUN6RSwwQ0FBNEI7Ozs7O0lBRTVCLGtDQUF5Qzs7SUFDekMseUNBQWM7Ozs7O0lBRUYsc0NBQXNCOzs7OztJQUFFLGtDQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgIFZpZXdDaGlsZCwgRWxlbWVudFJlZiwgTmdab25lLCBPbkRlc3Ryb3ksIEhvc3RCaW5kaW5nLCBBZnRlclZpZXdJbml0LCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBRdWVyeUNvbmRpdGlvbn0gZnJvbSAnQGZhcnJpcy9jb21wb25lbnQtcXVlcnljb25kaXRpb24nO1xyXG5pbXBvcnQgUmVzaXplT2JzZXJ2ZXIgZnJvbSBcInJlc2l6ZS1vYnNlcnZlci1wb2x5ZmlsbFwiO1xyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2xpYi1zdW1tYXJ5LWxpc3QnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9zdW1tYXJ5LWxpc3QuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL3N1bW1hcnktbGlzdC5jb21wb25lbnQuY3NzJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIFN1bW1hcnlMaXN0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xyXG4gICAgXHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5zdW1tYXJ5LWxpc3QnKSBjbHMgPSB0cnVlO1xyXG4gIFxyXG4gIEBWaWV3Q2hpbGQoJ3dyYXBwZXInLCB7IHJlYWQ6IEVsZW1lbnRSZWYgfSkgd3JhcHBlckVsOiBFbGVtZW50UmVmO1xyXG5cclxuICBASW5wdXQoKSBjb25kaXRpb25zOiBBcnJheTxRdWVyeUNvbmRpdGlvbj4gPSBuZXcgQXJyYXk8UXVlcnlDb25kaXRpb24+KCk7XHJcbiAgQElucHV0KCkgZW5hYmxlVGlwcyA9IGZhbHNlO1xyXG4gIFxyXG4gIHByaXZhdGUgcm86IFJlc2l6ZU9ic2VydmVyIHwgbnVsbCA9IG51bGw7XHJcbiAgd2lkdGhGbGFnID0gMDtcclxuICBcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5nWm9uZTogTmdab25lLCBwcml2YXRlIGNkOiBDaGFuZ2VEZXRlY3RvclJlZikge1xyXG5cclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMucm8pIHtcclxuICAgICAgdGhpcy5yby51bm9ic2VydmUodGhpcy53cmFwcGVyRWwubmF0aXZlRWxlbWVudCk7XHJcbiAgICAgIHRoaXMucm8gPSBudWxsO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLm9ic2VydmVyRWxlbWVudCgpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBvYnNlcnZlckVsZW1lbnQoKSB7XHJcbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XHJcbiAgICAgIHRoaXMucm8gPSBuZXcgUmVzaXplT2JzZXJ2ZXIoKGVudHJpZXMsIG9ic2VydmVyKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdGVtcFdpZHRoID0gZW50cmllc1swXS5jb250ZW50UmVjdC53aWR0aDtcclxuICAgICAgICAvLyDlrr3luqblj5jljJbotoXov4c4MOW8gOWni+iuoeeul1xyXG4gICAgICAgIGlmIChNYXRoLmFicyh0ZW1wV2lkdGggLSB0aGlzLndpZHRoRmxhZykgPiAxNSkge1xyXG4gICAgICAgICAgdGhpcy53aWR0aEZsYWcgPSB0ZW1wV2lkdGg7XHJcbiAgICAgICAgICB0aGlzLmNoYW5nZVRpcHNTdGF0ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMucm8ub2JzZXJ2ZSh0aGlzLndyYXBwZXJFbC5uYXRpdmVFbGVtZW50KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjaGFuZ2VUaXBzU3RhdGUoKSB7XHJcbiAgICBsZXQgdEVuYWJsZVRpcHMgPSB0aGlzLmVuYWJsZVRpcHM7XHJcbiAgICBpZiAodGhpcy53cmFwcGVyRWwubmF0aXZlRWxlbWVudC5jbGllbnRXaWR0aCArMiA8IHRoaXMud3JhcHBlckVsLm5hdGl2ZUVsZW1lbnQuc2Nyb2xsV2lkdGgpIHtcclxuICAgICAgdEVuYWJsZVRpcHMgPSB0cnVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdEVuYWJsZVRpcHMgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmKHRFbmFibGVUaXBzICE9PSB0aGlzLmVuYWJsZVRpcHMpIHtcclxuICAgICAgdGhpcy5lbmFibGVUaXBzID0gdEVuYWJsZVRpcHM7XHJcbiAgICAgIHRoaXMuY2QubWFya0ZvckNoZWNrKCk7XHJcbiAgICAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=