{"version":3,"sources":["ng://@gsp-cmp/chgdr/lib/chgdr-data-viewer/chgdr-data.ts","ng://@gsp-cmp/chgdr/lib/service/i18n-service.ts","ng://@gsp-cmp/chgdr/lib/service/i18n/en.ts","ng://@gsp-cmp/chgdr/lib/service/i18n/zh-CHS.ts","ng://@gsp-cmp/chgdr/lib/service/i18n/zh-CHT.ts","ng://@gsp-cmp/chgdr/lib/chgdr-data-viewer/chgdr-data-builder.ts","ng://@gsp-cmp/chgdr/lib/util/guid.util.ts","ng://@gsp-cmp/chgdr/lib/chgdr-data-viewer/chgdr-tree-builder.ts","ng://@gsp-cmp/chgdr/lib/service/chgdr-metadata.service.ts","ng://@gsp-cmp/chgdr/lib/service/chgdr-config.service.ts","ng://@gsp-cmp/chgdr/lib/service/chgdr-config-handler.ts","ng://@gsp-cmp/chgdr/lib/service/chgdr-inner.service.ts","ng://@gsp-cmp/chgdr/lib/chgdr-data-viewer/chgdr-data-viewer.component.ts","ng://@gsp-cmp/chgdr/lib/model/operate-type.ts","node_modules/tslib/tslib.es6.js","ng://@gsp-cmp/chgdr/lib/util/map.util.ts","ng://@gsp-cmp/chgdr/lib/service/chgdr.service.ts","ng://@gsp-cmp/chgdr/lib/model/change-data-query-param.ts","ng://@gsp-cmp/chgdr/lib/model/change-data-query-result.ts","ng://@gsp-cmp/chgdr/lib/util/error.util.ts","ng://@gsp-cmp/chgdr/lib/util/time.util.ts","ng://@gsp-cmp/chgdr/lib/chgdr-list/chgdr-list.component.ts","ng://@gsp-cmp/chgdr/lib/chgdr-row-baseinfo-form/chgdr-row-baseinfo-form.component.ts","ng://@gsp-cmp/chgdr/lib/chgdr-row-grid/chgdr-row-grid.component.ts","ng://@gsp-cmp/chgdr/lib/chgdr-list-dialog-content/chgdr-list-dialog-content.component.ts","ng://@gsp-cmp/chgdr/lib/model/chgdr-ui-config.ts","ng://@gsp-cmp/chgdr/lib/service/chgdr-list-ui.service.ts","ng://@gsp-cmp/chgdr/lib/chgdr-header-datagrid/chgdr-header-datagrid.component.ts","ng://@gsp-cmp/chgdr/lib/chgdr.module.ts","ng://@gsp-cmp/chgdr/lib/model/change-data-header.ts","ng://@gsp-cmp/chgdr/lib/model/change-data-row.ts","ng://@gsp-cmp/chgdr/lib/model/chgdr-item-query-param.ts"],"sourcesContent":["import { OperateType } from '../model/operate-type';\r\n\r\n/** 基本信息 */\r\nexport class ChgdrData {\r\n    entityName: string;\r\n    userName: string;\r\n    operateType: OperateType;\r\n    reason: string;\r\n    dataId: string;\r\n    dataCode: Map<string, string>;\r\n    dataCodes: DataCodeField[];\r\n    changeTime: Date;\r\n    /** 本变更日志的根节点 */\r\n    entityNodes: ChgdrDataEntityNode[];\r\n}\r\n\r\n/** 发生变更的实体节点 */\r\nexport class ChgdrDataEntityNode {\r\n    entityCode: string;\r\n    entityName: string;\r\n    rows: ChgdrDataRowNode[];\r\n}\r\n\r\n/** 发生变更的行 */\r\nexport class ChgdrDataRowNode {\r\n    id: string;\r\n    entityCode: string;\r\n    entityName: string;\r\n    parentDataId: string;\r\n    dataId: string;\r\n    dataCode: Map<string, string>;\r\n    dataCodes: DataCodeField[];\r\n    operateType: OperateType;\r\n    changes: ChangeColumnItem[];\r\n    /** 发生变更的行的下级实体 */\r\n    entityNodes: ChgdrDataEntityNode[];\r\n}\r\n\r\nexport class ChangeColumnItem {\r\n    fieldLabel: string;\r\n    fieldName: string;\r\n    oldValue: string;\r\n    newValue: string;\r\n    /** 是否关联字段 */\r\n    hasAssociation: boolean;\r\n    /** 原始关联字段 */\r\n    originalColumnItem: ChangeColumnItem;\r\n    /** 是否关联带出字段 */\r\n    isAssociationRefField: boolean;\r\n    /** 关联带出字段所属的字段 */\r\n    belongFieldLabelId: string;\r\n    /** 如果当前字段为关联字段，则属性为当前字段的关联带出字段 */\r\n    children: ChangeColumnItem[] = [];\r\n}\r\n\r\nexport class DataCodeField {\r\n    fieldLabelId: string;\r\n    fieldName: string;\r\n    fieldValue: string;\r\n}","import { Pipe, PipeTransform, Injectable } from '@angular/core';\r\nimport { TranslateDefaultParser, TranslateParser, TranslateService } from '@ngx-translate/core';\r\nimport { LangDataEn } from './i18n/en';\r\nimport { LangDataZhChs } from './i18n/zh-CHS';\r\nimport { LangDataZhCht } from './i18n/zh-CHT';\r\n\r\nlet I18nServiceInstance: any;\r\n\r\nlet langResourceMap: Map<string, any> = new Map();\r\nlangResourceMap.set(\"en\", LangDataEn);\r\nlangResourceMap.set(\"zh-CHS\", LangDataZhChs);\r\nlangResourceMap.set(\"zh-CHT\", LangDataZhCht);\r\n\r\nlet currentLang: string = localStorage.getItem('languageCode');\r\nif (!currentLang) {\r\n  currentLang = \"zh-CHS\";\r\n  console.log(\"未找到设置的语言，默认使用\" + currentLang);\r\n}\r\n\r\nlet parser: TranslateParser = new TranslateDefaultParser();\r\n\r\nexport class I18nUtil {\r\n  public static instant(key: string, param?: any): string {\r\n    let statement = I18nUtil.getCurrentLangResource()[key];\r\n    if (statement === undefined || statement === null) {\r\n      return key;\r\n    }\r\n\r\n    let result = parser.interpolate(statement, param);\r\n    if (result === undefined || result === null) {\r\n      return key;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  private static getCurrentLangResource() {\r\n    return langResourceMap.get(currentLang) || {};\r\n  }\r\n\r\n  public static instantOrDefault(key: string, defaultText: string) {\r\n    let statement = I18nUtil.getCurrentLangResource()[key];\r\n    if (statement === undefined || statement === null) {\r\n      return defaultText;\r\n    }\r\n\r\n    let result = parser.interpolate(statement);\r\n    if (result === undefined || result === null) {\r\n      return defaultText;\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class I18nService {\r\n\r\n  constructor() {\r\n  }\r\n\r\n  public instant(key: string, param?: any): string {\r\n    return I18nUtil.instant(key, param);\r\n  }\r\n\r\n  private getCurrentLangResource() {\r\n    return langResourceMap.get(currentLang) || {};\r\n  }\r\n\r\n  public static staticInstant(key: string, defaultText: string) {\r\n    return I18nUtil.instantOrDefault(key, defaultText);\r\n  }\r\n}\r\n","export const LangDataEn = {\r\n  \"chgdr-list-dialog-title\": \"Change data records\",\r\n  \"base-info-section-title\": \"Base info\",\r\n  \"change-detail-section-title\": \"Change detail\",\r\n  \"empty-data-text\": \"Empty Data\",\r\n  \"get-business-code-config-error\": \"Get business code config error: {{errorMessage}}\",\r\n  \"user-name-column-title\": \"User\",\r\n  \"change-time-column-title\": \"Time\",\r\n  \"change-time-column-format\": \"yyyy-MM-dd HH:mm:ss\",\r\n  \"operation-type-title\": \"Type\",\r\n  \"tech-pk-column-title\": \"Tech PK\",\r\n  \"operation-column-title\": \"Operation\",\r\n  \"can-not-found-change-record-by-id\": \"Can not found change record 【{{headerId}}】\",\r\n  \"query-change-data-record-error\": \"Query change data record error: {{errorMessage}}\",\r\n  \"show-change-detail-btn\": \"Detail\",\r\n  \"change-detail-dialog-title\": \"Change detail\",\r\n  \"start-time-label\": \"Start\",\r\n  \"end-time-label\": \"End\",\r\n  \"query-btn\": \"Query\",\r\n  \"technology-primary-key-label\": \"Tech PK\",\r\n  \"change-user-label\": \"User\",\r\n  \"change-time-label\": \"Time\",\r\n  \"change-operate-type\": \"Type\",\r\n  \"field-name-column-title\": \"Field\",\r\n  \"value-column-title\": \"Value\",\r\n  \"old-value-column-title\": \"Old value\",\r\n  \"new-value-column-title\": \"New value\",\r\n  \"operate-type-name-ADD\": \"Add\",\r\n  \"operate-type-name-MODIFY\": \"Modify\",\r\n  \"operate-type-name-DELETE\": \"Delete\",\r\n  \"yes-text\": \"Yes\",\r\n  \"no-text\": \"No\",\r\n  \"business-code-text\": \"Business code\"\r\n}","export const LangDataZhChs = {\r\n  \"chgdr-list-dialog-title\": \"变更日志列表\",\r\n  \"base-info-section-title\": \"基本信息\",\r\n  \"change-detail-section-title\": \"变更详情\",\r\n  \"empty-data-text\": \"无数据\",\r\n  \"get-business-code-config-error\": \"获取业务编号配置失败：{{errorMessage}}\",\r\n  \"user-name-column-title\": \"用户\",\r\n  \"change-time-column-title\": \"时间\",\r\n  \"change-time-column-format\": \"yyyy年MM月dd日 HH:mm:ss\",\r\n  \"operation-type-title\": \"操作类型\",\r\n  \"tech-pk-column-title\": \"技术主键\",\r\n  \"operation-column-title\": \"操作\",\r\n  \"can-not-found-change-record-by-id\": \"未找到编号为【{{headerId}}】的变更日志\",\r\n  \"query-change-data-record-error\": \"查询业务变更日志出错：{{errorMessage}}\",\r\n  \"show-change-detail-btn\": \"变更详情\",\r\n  \"change-detail-dialog-title\": \"变更日志详情\",\r\n  \"start-time-label\": \"开始时间\",\r\n  \"end-time-label\": \"结束时间\",\r\n  \"query-btn\": \"查询\",\r\n  \"technology-primary-key-label\": \"技术主键\",\r\n  \"change-user-label\": \"变更人\",\r\n  \"change-time-label\": \"变更时间\",\r\n  \"change-operate-type\": \"变更方式\",\r\n  \"field-name-column-title\": \"字段名\",\r\n  \"value-column-title\": \"值\",\r\n  \"old-value-column-title\": \"原值\",\r\n  \"new-value-column-title\": \"变更值\",\r\n  \"operate-type-name-ADD\": \"新增\",\r\n  \"operate-type-name-MODIFY\": \"修改\",\r\n  \"operate-type-name-DELETE\": \"删除\",\r\n  \"yes-text\": \"是\",\r\n  \"no-text\": \"否\",\r\n  \"business-code-text\": \"业务编号\"\r\n}","export const LangDataZhCht = {\r\n  \"chgdr-list-dialog-title\": \"變更日志列表\",\r\n  \"base-info-section-title\": \"基本信息\",\r\n  \"change-detail-section-title\": \"變更詳情\",\r\n  \"empty-data-text\": \"無數據\",\r\n  \"get-business-code-config-error\": \"獲取業務編號配置失敗：{{errorMessage}}\",\r\n  \"user-name-column-title\": \"用戶\",\r\n  \"change-time-column-title\": \"時間\",\r\n  \"change-time-column-format\": \"yyyy年MM月dd日 HH:mm:ss\",\r\n  \"operation-type-title\": \"操作類型\",\r\n  \"tech-pk-column-title\": \"技術主鍵\",\r\n  \"operation-column-title\": \"操作\",\r\n  \"can-not-found-change-record-by-id\": \"未找到編號爲【{{headerId}}】的變更日志\",\r\n  \"query-change-data-record-error\": \"查詢業務變更日志出錯：{{errorMessage}}\",\r\n  \"show-change-detail-btn\": \"變更詳情\",\r\n  \"change-detail-dialog-title\": \"變更日志詳情\",\r\n  \"start-time-label\": \"開始時間\",\r\n  \"end-time-label\": \"結束時間\",\r\n  \"query-btn\": \"查詢\",\r\n  \"technology-primary-key-label\": \"技術主鍵\",\r\n  \"change-user-label\": \"變更人\",\r\n  \"change-time-label\": \"變更時間\",\r\n  \"change-operate-type\": \"變更方式\",\r\n  \"field-name-column-title\": \"字段名\",\r\n  \"value-column-title\": \"值\",\r\n  \"old-value-column-title\": \"原值\",\r\n  \"new-value-column-title\": \"變更值\",\r\n  \"operate-type-name-ADD\": \"新增\",\r\n  \"operate-type-name-MODIFY\": \"修改\",\r\n  \"operate-type-name-DELETE\": \"刪除\",\r\n  \"yes-text\": \"是\",\r\n  \"no-text\": \"否\",\r\n  \"business-code-text\": \"業務編號\"\r\n}","import { isToday, format } from 'date-fns';\r\nimport { GSPBusinessEntity } from '@gsp-bef/gsp-be-metadata';\r\nimport { IGSPCommonObject, IGSPCommonElement, GSPAssociation, GSPCommonElement, GSPElementDataType, GSPElementObjectType, GSPEnumValue } from '@gsp-bef/gsp-cm-metadata';\r\nimport { ChangeDataHeader } from '../model/change-data-header';\r\nimport { ChangeDataRow } from '../model/change-data-row';\r\nimport { MapUtil } from '../util/map.util';\r\nimport { ChgdrData, ChgdrDataRowNode, ChangeColumnItem, ChgdrDataEntityNode, DataCodeField } from './chgdr-data';\r\nimport { ChgdrConfigHandler } from '../service/chgdr-config-handler';\r\nimport { I18nUtil } from '../service/i18n-service';\r\n\r\nexport class ChgdrDataBuilder {\r\n    private handler: ChgdrConfigHandler;\r\n\r\n    buildChgdrData(data: ChangeDataHeader, handler: ChgdrConfigHandler): ChgdrData {\r\n        this.handler = handler;\r\n        //初始化变更日志基本信息\r\n        let chgdrData = new ChgdrData();\r\n        chgdrData.entityName = this.handler.getBeName();\r\n        chgdrData.operateType = data.operateType;\r\n        chgdrData.userName = data.userName;\r\n        chgdrData.dataId = data.dataId;\r\n        chgdrData.dataCode = data.dataCode;\r\n        chgdrData.dataCodes = this.buildDataCodes(data.dataCode, this.handler.getMainObjectCode());\r\n        chgdrData.reason = data.reason;\r\n        chgdrData.changeTime = data.changeTime;\r\n        chgdrData.entityNodes = [];\r\n\r\n        //分层组织变更日志行\r\n        let rowNodes: ChgdrDataRowNode[] = [];\r\n        !!data.rows && data.rows.forEach(row => {\r\n            if (!row) {\r\n                return;\r\n            }\r\n            let rowNode = new ChgdrDataRowNode();\r\n            rowNode.id = row.id;\r\n            rowNode.parentDataId = row.parentDataId;\r\n            rowNode.dataId = row.dataId;\r\n            rowNode.dataCode = row.dataCode;\r\n            rowNode.dataCodes = this.buildDataCodes(row.dataCode, row.entityCode);\r\n            rowNode.entityCode = row.entityCode;\r\n            rowNode.entityName = this.handler.getEntityNameOrDefault(row.entityCode);\r\n            rowNode.operateType = row.operateType;\r\n            rowNode.entityNodes = [];\r\n\r\n            //组织列的变更信息\r\n            let changeColumnKeys: string[] = this.extractChangeColumnKeys(row);\r\n            let columnValueChanges: ChangeColumnItem[] = [];\r\n            changeColumnKeys.forEach((key) => {\r\n                let column = new ChangeColumnItem();\r\n                column.fieldLabel = key;\r\n                column.fieldName = this.handler.getEntityFieldNameOrDefault(row.entityCode, key);\r\n                column.oldValue = this.handler.formatFieldValue(row.oldContent.get(key), row.entityCode, key);\r\n                column.newValue = this.handler.formatFieldValue(row.newContent.get(key), row.entityCode, key);\r\n\r\n                let ele: IGSPCommonElement = this.handler.getElement(row.entityCode, key);\r\n                if (ele) {\r\n                    //判断是否是关联字段\r\n                    column.hasAssociation = ele.ObjectType == \"Association\" && ele.IsUdt == false;\r\n                    column.isAssociationRefField = ele.IsRefElement;\r\n                    let parentElement = this.handler.getParentElement(row.entityCode, key);\r\n                    if (parentElement) {\r\n                        column.belongFieldLabelId = parentElement.LabelID;\r\n                    }\r\n                }\r\n\r\n                columnValueChanges.push(column);\r\n            })\r\n            //变更值排序\r\n            this.handler.sort(columnValueChanges, row.entityCode, (column) => column.fieldLabel);\r\n\r\n            //合并关联带出字段\r\n            let columnMap: Map<string, ChangeColumnItem> = new Map();\r\n            columnValueChanges.forEach((column) => {\r\n                columnMap.set(column.fieldLabel, column);\r\n            });\r\n            //1. 移除所有关联带出字段，并附加到其所属关联字段的children属性上\r\n            columnValueChanges = columnValueChanges.filter((column) => {\r\n                if (column.isAssociationRefField) {\r\n                    let parentColumn: ChangeColumnItem = columnMap.get(column.belongFieldLabelId);\r\n                    if (parentColumn) {\r\n                        //找到父级字段则添加为父\r\n                        parentColumn.children.push(column);\r\n                        return false;\r\n                    } else {\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    return true;\r\n                }\r\n            });\r\n            //2. 转换关联字段，将其子级的变更值拼接作为其变更值\r\n            columnValueChanges = columnValueChanges.map<ChangeColumnItem>(column => {\r\n                if (column.hasAssociation && column.children.length > 0) {\r\n                    //如果是关联字段，且存在关联带出字段\r\n                    let virtualColumn: ChangeColumnItem = Object.assign(new ChangeColumnItem(), column);\r\n                    virtualColumn.originalColumnItem = column;\r\n                    virtualColumn.oldValue = column.children.map(child => child.oldValue).join(\";\");\r\n                    virtualColumn.newValue = column.children.map(child => child.newValue).join(\";\");\r\n                    return virtualColumn;\r\n                } else {\r\n                    return column;\r\n                }\r\n            });\r\n\r\n            rowNode.changes = columnValueChanges;\r\n\r\n            rowNodes.push(rowNode);\r\n        });\r\n\r\n        /** dataId与变更行的Map */\r\n        let dataIdRowMap: Map<string, ChgdrDataRowNode> = new Map();\r\n        rowNodes.forEach(node => dataIdRowMap.set(node.dataId, node));\r\n\r\n        rowNodes.forEach(node => {\r\n            if (!node.parentDataId) {\r\n                //根节点\r\n                let entityNode = this.genChgdrDataEntityNode(node.entityCode, node.entityName);\r\n                entityNode.rows.push(node);\r\n                chgdrData.entityNodes.push(entityNode);\r\n                return;\r\n            }\r\n            let parentRowNode = dataIdRowMap.get(node.parentDataId);\r\n            if (!!parentRowNode) {\r\n                //上级节点存在的节点\r\n                let entityNode = parentRowNode.entityNodes.find(en => en.entityCode == node.entityCode);\r\n                if (!entityNode) {\r\n                    entityNode = this.genChgdrDataEntityNode(node.entityCode, node.entityName);\r\n                    parentRowNode.entityNodes.push(entityNode);\r\n                }\r\n                entityNode.rows.push(node);\r\n            } else {\r\n                //上级节点不存在的节点\r\n                //TODO 上级节点不存在的节点是否需要构造完整的上级结构？\r\n                let entityNode = this.genChgdrDataEntityNode(node.entityCode, node.entityName);\r\n                entityNode.rows.push(node);\r\n                chgdrData.entityNodes.push(entityNode);\r\n            }\r\n        })\r\n\r\n        return chgdrData;\r\n    }\r\n\r\n    private buildDataCodes(dataCode: Map<string, string>, entityCode: string): DataCodeField[] {\r\n        let dataCodes: DataCodeField[] = [];\r\n        dataCode && dataCode.forEach((value, key) => {\r\n            let dataCodeField: DataCodeField = new DataCodeField();\r\n            if (key == \"_$dataCode\") {\r\n                dataCodeField.fieldLabelId = \"dataCode\";\r\n                dataCodeField.fieldName = I18nUtil.instantOrDefault(\"business-code-text\", \"业务编号\");\r\n                dataCodeField.fieldValue = value;\r\n            } else {\r\n                dataCodeField.fieldLabelId = key;\r\n                dataCodeField.fieldName = this.handler.getEntityFieldNameOrDefault(entityCode, key);\r\n                dataCodeField.fieldValue = this.handler.formatFieldValue(value, entityCode, key);\r\n            }\r\n            dataCodes.push(dataCodeField);\r\n        })\r\n\r\n        //业务编号排序\r\n        this.handler.sort(dataCodes, entityCode, (dataCode) => dataCode.fieldLabelId);\r\n\r\n        return dataCodes;\r\n    }\r\n\r\n    /** 得到新旧内容中所有的key */\r\n    private extractChangeColumnKeys(row: ChangeDataRow): string[] {\r\n        let keysSet: Set<string> = new Set();\r\n        row.oldContent && row.oldContent.forEach((value, key) => keysSet.add(key));\r\n        row.newContent && row.newContent.forEach((value, key) => keysSet.add(key));\r\n        const keys: string[] = Array.from(keysSet.keys());\r\n        return keys;\r\n    }\r\n\r\n\r\n    private genChgdrDataEntityNode(entityCode: string, entityName: string): ChgdrDataEntityNode {\r\n        let node = new ChgdrDataEntityNode();\r\n        node.entityCode = entityCode;\r\n        node.entityName = entityName;\r\n        node.rows = [];\r\n        return node;\r\n    }\r\n\r\n}","export class Guid {\r\n  static newGuid() {\r\n    const initString = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';\r\n    const result = initString.replace(/[xy]/g, (c) => {\r\n      return this.convert(c);\r\n    });\r\n    return result;\r\n  }\r\n\r\n  private static convert(c) {\r\n    // tslint:disable-next-line:no-bitwise\r\n    const r = Math.random() * 16 | 0;\r\n    // tslint:disable-next-line:no-bitwise\r\n    const v = c === 'x' ? r : (r & 0x3 | 0x8);\r\n    return v.toString(16);\r\n  }\r\n}\r\n","import { Guid } from '../util/guid.util';\r\nimport { ChgdrData, ChgdrDataRowNode } from './chgdr-data';\r\n\r\n// 参考： Farris TreeTable的节点结构\r\n// export interface TreeNode {\r\n//     id?: string;\r\n//     data: any;\r\n//     /** 叶子节点图标 */\r\n//     icon?: any;\r\n//     /** 节点展开图标 */\r\n//     expandedIcon?: any;\r\n//     /** 节点折叠图标 */\r\n//     collapsedIcon?: any;\r\n//     /** 子节点 */\r\n//     children?: TreeNode[];\r\n//     /** 是否为叶子节点 */\r\n//     leaf?: boolean;\r\n//     /** 是否展开 */\r\n//     expanded?: boolean;\r\n//     type?: string;\r\n//     /** 父节点 */\r\n//     parent?: TreeNode;\r\n//     /** 是否允许选中 */\r\n//     selectable?: boolean;\r\n//  }\r\n\r\nexport class ChgdrTreeNode {\r\n    // 树配置中设置了idField的情况下，id会被自动赋值为data[idField]的值。所以在此设置必须设置为与data.id中相同。\r\n    /** 节点ID，用于内部处理，请勿使用 */\r\n    id: string;\r\n    /** 节点名称 */\r\n    name: string;\r\n\r\n    /** 父节点 */\r\n    parent: ChgdrTreeNode;\r\n    /** 子节点列表 */\r\n    children: ChgdrTreeNode[];\r\n\r\n    /** 是否展开 */\r\n    expanded: boolean;\r\n    /** 是否隐藏 */\r\n    hidden: boolean;\r\n\r\n    /** 展示树结构用的数据实体 */\r\n    data: any;\r\n    chgdrRow: ChgdrDataRowNode;\r\n    chgdrData: ChgdrData;\r\n    isRoot: boolean;\r\n}\r\n\r\nexport class ChgdrTreeBuilder {\r\n    private chgdrData: ChgdrData;\r\n\r\n    public build(chgdrData: ChgdrData): ChgdrTreeNode[] {\r\n        this.chgdrData = chgdrData;\r\n        if (chgdrData.entityNodes.length == 0) {\r\n            console.warn(\"无变更日志\");\r\n            return [];\r\n        }\r\n        let rootEntityNode = chgdrData.entityNodes[0];\r\n        let rootRows = rootEntityNode.rows;\r\n        if (rootRows.length == 0) {\r\n            console.warn(\"无根变更日志行\");\r\n            return [];\r\n        }\r\n        let rootRow = rootRows[0];\r\n\r\n        let node = this.rowToNode(rootRow);\r\n        node.isRoot = true;\r\n        node.expanded = true;\r\n\r\n        return [node];\r\n    }\r\n\r\n    private rowToNode(row: ChgdrDataRowNode): ChgdrTreeNode {\r\n        const node: ChgdrTreeNode = new ChgdrTreeNode();\r\n        node.id = Guid.newGuid();\r\n        node.name = this.buildTreeNodeName(row);\r\n        node.data = {\r\n            id: node.id,\r\n            name: node.name\r\n        };\r\n        node.chgdrRow = row;\r\n        node.chgdrData = this.chgdrData;\r\n        node.children = [];\r\n        row.entityNodes.forEach(entityNode => {\r\n            entityNode.rows.forEach(childRow => {\r\n                const childNode: ChgdrTreeNode = this.rowToNode(childRow);\r\n                childNode.parent = node;\r\n                node.children.push(childNode);\r\n            })\r\n        })\r\n        return node;\r\n    }\r\n\r\n    private buildTreeNodeName(row: ChgdrDataRowNode): string {\r\n        let dataCodeName;\r\n        if (row.dataCodes && row.dataCodes.length > 0) {\r\n            dataCodeName = row.dataCodes[0].fieldValue;\r\n        }\r\n        if (dataCodeName) {\r\n            return row.entityName + \"-\" + dataCodeName + \"【\" + row.operateType.name + \"】\";\r\n        } else {\r\n            return row.entityName + \"【\" + row.operateType.name + \"】\";\r\n        }\r\n    }\r\n}","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpService, SessionService } from '@ecp-caf/caf-common';\r\nimport { GSPBusinessEntity } from '@gsp-bef/gsp-be-metadata';\r\nimport { GSPMetadataRTService } from '@gsp-lcm/metadatart-selector';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { ChangeDataHeader } from '../model/change-data-header';\r\nimport { ChangeDataQueryParam } from '../model/change-data-query-param';\r\nimport { ChgLogConfigField } from '../model/chgdr-config-field';\r\nimport { OperateType } from '../model/operate-type';\r\nimport { MapUtil } from '../util/map.util';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ChgdrMetadataService {\r\n  private beMetadataCache: Map<string, GSPBusinessEntity> = new Map();\r\n\r\n  constructor(private http: HttpService,\r\n    private sessionService: SessionService,\r\n    private metadataService: GSPMetadataRTService,\r\n    private injector: Injector) { }\r\n\r\n    /** 获取BE元数据 */\r\n    public getGSPBusinessEntity(beId: string):Observable<GSPBusinessEntity>{\r\n      if(this.beMetadataCache.has(beId)){\r\n        let be = this.beMetadataCache.get(beId);\r\n        return of(be);\r\n      }else{\r\n        return this.metadataService.GetMetadataRT(beId).pipe(map(metadata => {\r\n          const be: GSPBusinessEntity = JSON.parse(metadata.content);\r\n          this.beMetadataCache.set(beId, be);\r\n          return be;\r\n        }));\r\n      }\r\n    }\r\n\r\n  // public getBeMetadataAndUdts(beId: string): Observable<any> {\r\n  //   this.metadataService.GetMetadataRT(beId).subscribe((metadata) => {\r\n  //     const be: GSPBusinessEntity = JSON.parse(metadata.content);\r\n  //     let udtids:string[] = this.getAllUdtIds(be.MainObject);\r\n  //     this.metadataService.\r\n  //   });\r\n  // }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpHeaders, HttpClient } from '@angular/common/http';\r\nimport { HttpService, SessionService } from '@ecp-caf/caf-common';\r\nimport { Observable, of } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { ChgLogConfigEntity } from '../model/chgdr-config-entity';\r\nimport { ChgLogConfigField } from '../model/chgdr-config-field';\r\nimport { ChgdrInnerService } from './chgdr-inner.service';\r\n\r\nconst CHGDR_CONFIG_ROUTER = '/api/runtime/bcc/v1.0/chgdr/config';\r\nconst CHGDR_CONFIG_GET_BY_BIZOBJID_AND_MODELID = `${CHGDR_CONFIG_ROUTER}/{bizObjId}/{modelId}`;\r\n\r\nconst ServerIP = '/';\r\nconst chgdrUrl = `${ServerIP}api/runtime/chgdr/v1.0`;\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ChgdrConfigService {\r\n\r\n    constructor(private http: HttpService,\r\n        private sessionService: SessionService,\r\n        private injector: Injector) {\r\n    }\r\n\r\n    /**\r\n     * 根据业务实体ID获取所有的配置信息\r\n     */\r\n    getBeChgdrConfig(beId: string): Observable<ChgLogConfigEntity[]> {\r\n        let queryUrl = `${chgdrUrl}/config?beId=${beId}`;\r\n        return (<Observable<ChgLogConfigEntity[]>><unknown>this.http.get(queryUrl)).pipe(tap(data => {\r\n            let configEntities: ChgLogConfigEntity[] = data || [];\r\n            configEntities.forEach(entity => {\r\n                //处理字段顺序号\r\n                let fields: Array<ChgLogConfigField> = entity.fields || [];\r\n                //赋予老数据默认顺序号\r\n                fields.forEach((field, index) => {\r\n                    if (field.showIndex === undefined || field.showIndex === null) {\r\n                        field.showIndex = index;\r\n                    }\r\n                });\r\n                //按照顺序号排序\r\n                entity.fields = fields.sort((a, b) => a.showIndex - b.showIndex);\r\n                //根据排序结果重置顺序号\r\n                fields.forEach((field, index) => {\r\n                    field.showIndex = index;\r\n                })\r\n            })\r\n        }));\r\n    }\r\n}","import { isToday, format } from 'date-fns';\r\nimport { GSPBusinessEntity } from '@gsp-bef/gsp-be-metadata';\r\nimport { IGSPCommonObject, IGSPCommonElement, GSPAssociation, GSPCommonElement, GSPElementDataType, GSPElementObjectType, GSPEnumValue } from '@gsp-bef/gsp-cm-metadata';\r\nimport { ChgLogConfigEntity } from '../model/chgdr-config-entity';\r\nimport { ChgLogConfigField } from '../model/chgdr-config-field';\r\nimport { I18nUtil } from './i18n-service';\r\n\r\nexport class ChgdrConfigHandler {\r\n    private be: GSPBusinessEntity;\r\n    private entityCodeMap: Map<string, IGSPCommonObject> = new Map();\r\n    private entityFieldMap: Map<string, IGSPCommonElement> = new Map();\r\n    private entityFieldShowOrderMap: Map<string, number> = new Map();\r\n    private entityFieldParentMap: Map<string, IGSPCommonElement> = new Map();\r\n\r\n    private entityConfigs: ChgLogConfigEntity[];\r\n    private entityFieldConfigMap: Map<string, ChgLogConfigField> = new Map();\r\n\r\n    public constructor(be: GSPBusinessEntity, entityConfigs: ChgLogConfigEntity[]) {\r\n        //初始化所有BE对象信息\r\n        this.be = be;\r\n        if (!!be) {\r\n            let mainObject = be.MainObject;\r\n            this.updateEntityMap(mainObject, this.entityCodeMap, this.entityFieldMap);\r\n        }\r\n\r\n        //初始化配置信息\r\n        this.entityConfigs = entityConfigs || [];\r\n        this.updateEntityConfigs();\r\n\r\n        //更新显示顺序\r\n        this.updateShowIndex();\r\n    }\r\n\r\n    /** 更新显示顺序号 */\r\n    private updateShowIndex() {\r\n        let entityFieldShowOrderMap: Map<string, number> = new Map();\r\n        //首先用BE字段顺序赋予初始顺序，避免配置中无顺序号造成显示错乱\r\n        this.entityFieldMap.forEach((value, key) => {\r\n            entityFieldShowOrderMap.set(key, entityFieldShowOrderMap.size);\r\n        });\r\n        //然后用配置顺序替代初始顺序\r\n        this.entityFieldConfigMap.forEach((value, key) => {\r\n            if (value.showIndex !== undefined && value.showIndex !== null) {\r\n                entityFieldShowOrderMap.set(key, value.showIndex);\r\n            }\r\n        })\r\n\r\n        this.entityFieldShowOrderMap = entityFieldShowOrderMap;\r\n    }\r\n\r\n    /** 更新配置信息的相关数据 */\r\n    private updateEntityConfigs() {\r\n        let fieldConfigMap: Map<string, ChgLogConfigField> = new Map();\r\n        this.entityConfigs.forEach(entityConfig => {\r\n            let tabCode = entityConfig.tabCode;\r\n            (entityConfig.fields || []).forEach(field => {\r\n                let fieldLabel = field.fieldLabelId;\r\n                let key = tabCode + \"#\" + fieldLabel;\r\n                fieldConfigMap.set(key, field);\r\n            })\r\n        });\r\n        this.entityFieldConfigMap = fieldConfigMap;\r\n    }\r\n\r\n    private updateEntityMap(entity: IGSPCommonObject, entityCodeMap: Map<string, IGSPCommonObject>, entityFieldMap: Map<string, IGSPCommonElement>) {\r\n        if (!entity) {\r\n            return;\r\n        }\r\n        entityCodeMap.set(entity.Code, entity);\r\n\r\n        //实体对象的字段信息\r\n        entity.ContainElements.forEach(ele => {\r\n            this.updateEntityFieldMap(entity, ele, null, entityFieldMap);\r\n        })\r\n\r\n        //处理子节点信息\r\n        let children: IGSPCommonObject[] = entity.ContainChildObjects;\r\n        if (!children || !children.length) {\r\n            return;\r\n        }\r\n\r\n        children.forEach(childEntity => {\r\n            this.updateEntityMap(childEntity, entityCodeMap, entityFieldMap);\r\n        })\r\n    }\r\n\r\n    /** 更新BE节点的指定字段信息，如果该字段是关联字段，同时更新其带出字段 */\r\n    private updateEntityFieldMap(entity: IGSPCommonObject, element: IGSPCommonElement, parentElement: IGSPCommonElement, entityFieldMap: Map<string, IGSPCommonElement>): void {\r\n        let key = entity.Code + \"#\" + element.LabelID;\r\n        entityFieldMap.set(key, element);\r\n        if (parentElement) {\r\n            this.entityFieldParentMap.set(key, parentElement);\r\n        }\r\n\r\n        const childAssociations: GSPAssociation[] = element.ChildAssociations;\r\n        if (!!childAssociations && childAssociations.length > 0) {\r\n            childAssociations.forEach(childAssociation => {\r\n                const refElementCollection: GSPCommonElement[] = childAssociation.RefElementCollection;\r\n                if (!!refElementCollection && refElementCollection.length > 0) {\r\n                    refElementCollection.forEach(rele => {\r\n                        this.updateEntityFieldMap(entity, rele, element, entityFieldMap);\r\n                    })\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    public sort(items: any[], entityCode: string, fieldLabelIdFunc: (item: any) => string) {\r\n        items.sort((a, b) => {\r\n            const aKey = entityCode + \"#\" + fieldLabelIdFunc(a);\r\n            const bKey = entityCode + \"#\" + fieldLabelIdFunc(b);\r\n            if (!this.entityFieldShowOrderMap.has(aKey) && !this.entityFieldShowOrderMap.has(bKey)) {\r\n                //如果双方均无顺序号，则按照自然排序\r\n                return aKey.localeCompare(bKey);\r\n            } else if (!this.entityFieldShowOrderMap.has(aKey)) {\r\n                //如果有一方无顺序号，则无顺序号的靠后\r\n                return -1;\r\n            } else if (!this.entityFieldShowOrderMap.has(bKey)) {\r\n                //如果有一方无顺序号，则无顺序号的靠后\r\n                return 1;\r\n            } else {\r\n                //如果两方都有顺序号，则按照顺序号排序\r\n                const aOrder = this.entityFieldShowOrderMap.get(aKey);\r\n                const bOrder = this.entityFieldShowOrderMap.get(bKey);\r\n                return aOrder - bOrder;\r\n            }\r\n        });\r\n    }\r\n\r\n    /** 格式化主对象节点中字段的值 */\r\n    public formatMainObjectFieldValue(originalValue: string, fieldLabelId: string) {\r\n        let entityCode = this.getMainObjectCode();\r\n        return this.formatFieldValue(originalValue, entityCode, fieldLabelId);\r\n    }\r\n\r\n    /** 格式化字段值 */\r\n    public formatFieldValue(originalValue: string, entityCode: string, fieldLabelId: string): string {\r\n        let element: IGSPCommonElement = this.getElement(entityCode, fieldLabelId);\r\n        if (!element) {\r\n            console.error(\"未找到业务实体【\" + this.be.ID + \"-\" + this.be.Name + \"】节点【\" + entityCode + \"】的字段【\" + fieldLabelId + \"】\");\r\n            return originalValue;\r\n        }\r\n        if (!element) {\r\n            return originalValue;\r\n        }\r\n\r\n        try {\r\n            //处理历史遗留的数字格式\r\n            if ((element.MDataType == GSPElementDataType.Decimal || element.MDataType == GSPElementDataType.Integer)\r\n                && originalValue && originalValue.toLowerCase().includes(\"e\")) {\r\n                //如果字段是数字类型，且是科学计数法格式\r\n                //转为十进制格式显示\r\n                let num = Number(originalValue);\r\n                if (isNaN(num)) {\r\n                    console.log(\"业务实体【\" + this.be.ID + \"-\" + this.be.Name + \"】节点【\" + entityCode + \"】的字段【\" + fieldLabelId + \"】的值不是有效的数字格式：\" + originalValue);\r\n                    return originalValue;\r\n                } else {\r\n                    let result = this.toNonExponential(num);\r\n                    return result;\r\n                }\r\n            }\r\n\r\n            //处理布尔值类型\r\n            if (element.MDataType == GSPElementDataType.Boolean) {\r\n                //注意：new Boolean(\"false\") == true\r\n                if (originalValue === null || originalValue === undefined || originalValue.length == 0) {\r\n                    return originalValue;\r\n                } else if (originalValue.toLowerCase() == \"false\") {\r\n                    return I18nUtil.instantOrDefault(\"no-text\", \"否\");\r\n                } else if (originalValue.toLowerCase() == \"true\") {\r\n                    return I18nUtil.instantOrDefault(\"yes-text\", \"是\");\r\n                } else {\r\n                    return originalValue;\r\n                }\r\n            }\r\n\r\n            //处理日期格式\r\n            if (element.MDataType == GSPElementDataType.Date) {\r\n                if (originalValue === null || originalValue === undefined || originalValue.length == 0) {\r\n                    //不包含值，直接返回原始值\r\n                    return originalValue;\r\n                } else {\r\n                    let date = new Date(originalValue);\r\n                    let str = format(date, \"yyyy-MM-dd\");\r\n                    return str;\r\n                }\r\n            }\r\n\r\n            //处理日期时间格式\r\n            if (element.MDataType == GSPElementDataType.DateTime) {\r\n                if (originalValue === null || originalValue === undefined || originalValue.length == 0) {\r\n                    //不包含值，直接返回原始值\r\n                    return originalValue;\r\n                } else {\r\n                    let date = new Date(originalValue);\r\n                    let str = format(date, \"yyyy-MM-dd HH:mm:ss\");\r\n                    return str;\r\n                }\r\n            }\r\n\r\n            //处理枚举格式\r\n            if (element.ObjectType == GSPElementObjectType.Enum) {\r\n                let enumValues: GSPEnumValue[] = element.ContainEnumValues || [];\r\n                let enumValue = enumValues.find(item => item.Value == originalValue);\r\n                if (enumValue) {\r\n                    return enumValue.Name;\r\n                } else if (originalValue === null || originalValue === undefined || originalValue.length == 0) {\r\n                    //如果找不到对应的枚举项，并且原始值为空，说明未赋值，不报错\r\n                    return originalValue;\r\n                } else {\r\n                    //打印异常\r\n                    console.log(\"业务实体【\" + this.be.ID + \"-\" + this.be.Name + \"】节点【\" + entityCode + \"】的字段【\" + fieldLabelId + \"】的值未找到匹配的枚举项：\" + originalValue);\r\n                    return originalValue;\r\n                }\r\n            }\r\n\r\n            return originalValue;\r\n        } catch (error) {\r\n            console.error(\"业务实体【\" + this.be.ID + \"-\" + this.be.Name + \"】节点【\" + entityCode + \"】的字段【\" + fieldLabelId + \"】的值【\" + originalValue + \"】格式化出错：\", error);\r\n            return originalValue;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /** JavaScript中科学计数法转化为数值字符串形式。\r\n     * 以下两种情况，JavaScript 会自动将数值转为科学计数法表示\r\n     * (1) 小于1且小数点后面带有6个0以上的浮点数值：\r\n     * (2) 整数位数字多于21位：\r\n     * 首先看看整数位数字多于21位的情况，其实这个一般不会碰到，整数位数字多于21位已经超出了 JavaScript 精确整数范围。\r\n     * 这个方法用于处理小数问题\r\n     * from：https://www.cnblogs.com/xianfengzhike/p/9939029.html */\r\n    private toNonExponential(num) {\r\n        var m = num.toExponential().match(/\\d(?:\\.(\\d*))?e([+-]\\d+)/);\r\n        return num.toFixed(Math.max(0, (m[1] || '').length - m[2]));\r\n    }\r\n\r\n    public getBeName(): string {\r\n        return this.be ? this.be.Name : null;\r\n    }\r\n\r\n    public getMainObjectCode(): string {\r\n        return this.be && this.be.MainObject ? this.be.MainObject.Code : null;\r\n    }\r\n\r\n    public getElement(entityCode: string, fieldLabelId: string): IGSPCommonElement {\r\n        let key = entityCode + \"#\" + fieldLabelId;\r\n        return this.entityFieldMap.get(key);\r\n    }\r\n\r\n    public getParentElement(entityCode: string, fieldLabelId: string): IGSPCommonElement {\r\n        let key = entityCode + \"#\" + fieldLabelId;\r\n        return this.entityFieldParentMap.get(key);\r\n    }\r\n\r\n    public getEntityNameOrDefault(entityCode: string) {\r\n        let entity = this.entityCodeMap.get(entityCode);\r\n        return !!entity ? entity.Name : entityCode;\r\n    }\r\n\r\n    public getEntityFieldNameOrDefault(entityCode: string, fieldLabelId: string) {\r\n        let key = entityCode + \"#\" + fieldLabelId;\r\n        let fieldConfig = this.entityFieldConfigMap.get(key);\r\n        if (fieldConfig && fieldConfig.fieldName && fieldConfig.fieldName != \"\") {\r\n            //优先返回配置的名称\r\n            return fieldConfig.fieldName;\r\n        }\r\n        //如果不存在配置名称，则返回BE字段名称\r\n        let ele = this.entityFieldMap.get(key);\r\n        return !!ele ? ele.Name : fieldLabelId;\r\n    }\r\n}","import { Injectable, Injector } from '@angular/core';\r\nimport { HttpService, SessionService } from '@ecp-caf/caf-common';\r\nimport { GSPBusinessEntity } from '@gsp-bef/gsp-be-metadata';\r\nimport { GSPMetadataRTService } from '@gsp-lcm/metadatart-selector';\r\nimport { forkJoin, Observable, of } from 'rxjs';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { ChangeDataHeader } from '../model/change-data-header';\r\nimport { ChangeDataQueryParam } from '../model/change-data-query-param';\r\nimport { ChgLogConfigEntity } from '../model/chgdr-config-entity';\r\nimport { ChgLogConfigField } from '../model/chgdr-config-field';\r\nimport { OperateType } from '../model/operate-type';\r\nimport { MapUtil } from '../util/map.util';\r\nimport { ChgdrConfigHandler } from './chgdr-config-handler';\r\nimport { ChgdrConfigService } from './chgdr-config.service';\r\nimport { ChgdrMetadataService } from './chgdr-metadata.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ChgdrInnerService {\r\n    private beMetadataCache: Map<string, ChgdrConfigHandler> = new Map();\r\n\r\n    constructor(private http: HttpService,\r\n        private sessionService: SessionService,\r\n        private metadataService: GSPMetadataRTService,\r\n        private chgdrMetadataService: ChgdrMetadataService,\r\n        private chgdrConfigService: ChgdrConfigService,\r\n        private injector: Injector\r\n    ) { }\r\n\r\n    /** 获取BE元数据 */\r\n    public getChgdrConfigHandler(beId: string): Observable<ChgdrConfigHandler> {\r\n        if (this.beMetadataCache.has(beId)) {\r\n            let be = this.beMetadataCache.get(beId);\r\n            return of(be);\r\n        } else {\r\n            let requests = [];\r\n            requests.push(this.chgdrMetadataService.getGSPBusinessEntity(beId));\r\n            requests.push(this.chgdrConfigService.getBeChgdrConfig(beId));\r\n\r\n            return forkJoin(requests).pipe(map(data => {\r\n                const be = data[0];\r\n                const entityConfigs: ChgLogConfigEntity[] = data[1] || [];\r\n                const handler = new ChgdrConfigHandler(be, entityConfigs);\r\n                this.beMetadataCache.set(beId, handler);\r\n                return handler;\r\n            }));\r\n        }\r\n    }\r\n}\r\n","import { Component, Injector, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { GSPMetadataRTService } from '@gsp-lcm/metadatart-selector';\r\nimport { GSPBusinessEntity } from '@gsp-bef/gsp-be-metadata';\r\nimport { ChangeDataHeader } from '../model/change-data-header';\r\nimport { ChangeColumnItem, ChgdrData, ChgdrDataEntityNode, ChgdrDataRowNode } from './chgdr-data';\r\nimport { GSPAssociation, GSPCommonElement, GSPCommonObject, IGSPCommonElement, IGSPCommonObject } from '@gsp-bef/gsp-cm-metadata';\r\nimport { ChangeDataRow } from '../model/change-data-row';\r\nimport { ChgdrDataBuilder } from './chgdr-data-builder';\r\nimport { ChgdrTreeBuilder, ChgdrTreeNode } from './chgdr-tree-builder';\r\nimport { TreeTableComponent } from '@farris/ui-treetable';\r\nimport { ChgdrMetadataService } from '../service/chgdr-metadata.service';\r\nimport { ChgdrConfigService } from '../service/chgdr-config.service';\r\nimport { forkJoin } from 'rxjs';\r\nimport { ChgLogConfigEntity } from '../model/chgdr-config-entity';\r\nimport { ChgdrInnerService } from '../service/chgdr-inner.service';\r\nimport { I18nUtil } from '../service/i18n-service';\r\n\r\n@Component({\r\n  selector: 'chgdr-data-viewer',\r\n  templateUrl: './chgdr-data-viewer.component.html',\r\n  styleUrls: ['./chgdr-data-viewer.component.css']\r\n})\r\nexport class ChgdrDataViewerComponent implements OnInit, OnChanges {\r\n  @Input()\r\n  data: ChangeDataHeader;\r\n  @Input() showDataId: boolean = false;\r\n  @ViewChild(\"treeTable\")\r\n  private treeTableComponent: TreeTableComponent\r\n\r\n  treeConfig: any = {\r\n    idField: 'id',\r\n    columns: [\r\n      { field: 'name', title: 'Name', width: 200 }\r\n    ],\r\n    /** 叶子节点图标 */\r\n    leafIcon: 'f-icon f-icon-page-title-type text-info mr-2',\r\n    /** 节点展开图标 */\r\n    expandIcon: 'f-icon f-icon-file-folder-open text-info mr-2',\r\n    /** 节点折叠图标 */\r\n    collapseIcon: 'f-icon f-icon-file-folder-close text-info mr-2',\r\n    showLevel: -1,\r\n    disabled: false,\r\n    init: false,\r\n    selectValues: []\r\n  };\r\n\r\n  chgdrData: ChgdrData;\r\n  treeData: ChgdrTreeNode[];\r\n  currentNode: ChgdrTreeNode;\r\n\r\n  constructor(private metadataService: GSPMetadataRTService,\r\n    private injector: Injector,\r\n    private chgdrMetadataService: ChgdrMetadataService,\r\n    private chgdrConfigService: ChgdrConfigService,\r\n    private chgdrInnerService: ChgdrInnerService) {\r\n    }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (!!this.data) {\r\n      let beId = this.data.entityId;\r\n      this.chgdrInnerService.getChgdrConfigHandler(beId).subscribe(handler=>{\r\n        this.chgdrData = new ChgdrDataBuilder().buildChgdrData(this.data, handler);\r\n        this.treeData = new ChgdrTreeBuilder().build(this.chgdrData);\r\n        if (this.treeTableComponent) {\r\n          //移除已选中项。\r\n          //避免更换数据源后，treeGrid找不到之前的选中数据，导致控制台告警\r\n          this.treeTableComponent.clearSelections();\r\n        }\r\n        setTimeout(() => {\r\n          this.treeTableComponent.selectNode(this.treeData[0].id);\r\n        }, 0);\r\n      })\r\n    }\r\n  }\r\n\r\n  public handleTreeSelection($event): void {\r\n    const node: ChgdrTreeNode = $event.node;\r\n    if (this.currentNode != null && this.currentNode.id == node.id) {\r\n      //如果选中相同节点，直接返回\r\n      return;\r\n    }\r\n    this.currentNode = node;\r\n  }\r\n\r\n  public get baseInfoSectionTitle(){\r\n    return I18nUtil.instant(\"base-info-section-title\")\r\n  }\r\n\r\n  public get changeDetailSectionTitle(){\r\n    return I18nUtil.instant(\"change-detail-section-title\");\r\n  }\r\n\r\n  public get  emptyDataText(){\r\n    return I18nUtil.instant(\"empty-data-text\");\r\n  }\r\n}\r\n","import { I18nUtil } from \"../service/i18n-service\";\r\n\r\nexport class OperateType {\r\n    /** 新增 */\r\n    static ADD: OperateType = new OperateType(0, \"ADD\", \"新增\");\r\n    /** 修改 */\r\n    static MODIFY: OperateType = new OperateType(1, \"MODIFY\", \"修改\");\r\n    /** 删除 */\r\n    static DELETE: OperateType = new OperateType(2, \"DELETE\", \"删除\");\r\n\r\n    private constructor(public ordinal: number, public code: string, private defaultName: string) {\r\n    }\r\n\r\n    public get name() {\r\n        return I18nUtil.instantOrDefault(\"operate-type-name-\" + this.code, this.defaultName);\r\n    }\r\n\r\n    public static values(): OperateType[] {\r\n        return [OperateType.ADD, OperateType.MODIFY, OperateType.DELETE];\r\n    }\r\n\r\n    public toJson() {\r\n        return this.code;\r\n    }\r\n\r\n    public static parse(obj: any): OperateType {\r\n        if (obj === undefined || obj === null) {\r\n            return null;\r\n        }\r\n        if (obj instanceof OperateType) {\r\n            return obj;\r\n        }\r\n        if (typeof obj === \"string\") {\r\n            return OperateType.values().find(ot => ot.code == obj);\r\n        }\r\n        if (typeof obj === \"number\") {\r\n            return OperateType.values().find(ot => ot.ordinal == obj);\r\n        }\r\n        if (!!obj.code) {\r\n            return OperateType.values().find(ot => ot.code == obj.code);\r\n        }\r\n        return null;\r\n    }\r\n}","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export class MapUtil {\r\n    /** 将Map转为Object，便于序列化。（因为JSON.stringfy(Map)返回的值总为{}） */\r\n    static convertMapToObject(map: Map<String, any>) {\r\n        if (!map) {\r\n            return null;\r\n        }\r\n        let obj = Object.create(null);\r\n        map.forEach((value, key: any) => {\r\n            obj[key] = value;\r\n        })\r\n        return obj;\r\n    }\r\n\r\n    /** 将Object转为Map，因为JSON.parse无法识别类型，反序列化后只能是Object类型 */\r\n    static convertObjectToMap(obj: any): Map<string, any> {\r\n        if (obj === undefined || obj === null) {\r\n            return null;\r\n        }\r\n\r\n        let strMap = new Map();\r\n        for (let k of Object.keys(obj)) {\r\n            strMap.set(k, obj[k]);\r\n        }\r\n        return strMap;\r\n    }\r\n}","import { Injectable, Injector } from '@angular/core';\nimport { HttpService, SessionService } from '@ecp-caf/caf-common';\nimport { Observable, of } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { ChangeDataCompHeader, ChangeDataHeader } from '../model/change-data-header';\nimport { ChangeDataQueryParam } from '../model/change-data-query-param';\nimport { ChangeDataQueryResult } from '../model/change-data-query-result';\nimport { ChangeDataRow } from '../model/change-data-row';\nimport { ChgLogConfigField } from '../model/chgdr-config-field';\nimport { ChgdrItemQueryParam } from '../model/chgdr-item-query-param';\nimport { OperateType } from '../model/operate-type';\nimport { MapUtil } from '../util/map.util';\n\nconst ServerIP = '/';\nconst chgdrUrl = `${ServerIP}api/runtime/chgdr/v1.0`;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChgdrService {\n  private rootDataCodeFieldsMap: Map<string, ChgLogConfigField[]> = new Map();\n\n  constructor(private http: HttpService,\n    private sessionService: SessionService,\n    private injector: Injector) { }\n\n  public queryChangeDataHeader(currentQueryParam: ChangeDataQueryParam): Observable<any> {\n    let obj: any = Object.assign({}, currentQueryParam);\n    if (currentQueryParam.dataCode) {\n      obj.dataCode = MapUtil.convertMapToObject(currentQueryParam.dataCode);\n    }\n\n    let json = JSON.stringify(obj);\n    let queryParam = encodeURIComponent(json);\n    let url = `${chgdrUrl}?queryParam=${queryParam}`;\n    return this.http.get(url).pipe(map(data => {\n      if (!data) {\n        return data;\n      }\n      let queryResult: ChangeDataQueryResult = <ChangeDataQueryResult><unknown>data;\n      queryResult && queryResult.headers && queryResult.headers.forEach(header => {\n        //TODO 待删，兼容老数据格式\n        if (typeof header.dataCode == \"string\") {\n          header.dataCode = JSON.parse(header.dataCode);\n        }\n\n        header.dataCode = MapUtil.convertObjectToMap(header.dataCode);\n        header.changeTime = this.toDate(header.changeTime);\n        header.operateType = OperateType.parse(header.operateType);\n      })\n      return queryResult;\n    }));\n  }\n\n  public getRootEntityDataCodeFields(beId: string): Observable<ChgLogConfigField[]> {\n    if (!beId) {\n      return of([]);\n    }\n    if (this.rootDataCodeFieldsMap.has(beId)) {\n      //直接从缓存中获取\n      return of(this.rootDataCodeFieldsMap.get(beId));\n    } else {\n      //获取结果并存入缓存\n      let url = `${chgdrUrl}/rootDataCodeFields?beId=${beId}`;\n      return (<Observable<ChgLogConfigField[]>><unknown>(this.http.get(url)))\n        .pipe(tap(data => this.rootDataCodeFieldsMap.set(beId, data)));\n    }\n  }\n\n  /** 将字符串或数字转为Date */\n  private toDate(date: any): Date {\n    if (typeof date == \"string\") {\n      return new Date(date);\n    } else if (typeof date == \"number\") {\n      return new Date(date);\n    } else {\n      return date;\n    }\n  }\n\n  /**\n   * 查询业务变更日志详细数据。\n   * @param id headerId\n   * @param changeTime 变更时间，和header.changeTime保持一致\n   */\n  public getChangeData(headerId: string, changeTime: Date): Observable<any>\n  public getChangeData(param: ChgdrItemQueryParam): Observable<any>\n  public getChangeData(idOrParam: ChgdrItemQueryParam | string, changeTime?: Date): Observable<any> {\n    if (idOrParam == null) {\n      throw new Error(\"id can not be null\");\n    }\n    if (idOrParam instanceof String || typeof idOrParam == \"string\") {\n      return this.getChangeDataById(<string>idOrParam, changeTime);\n    } else {\n      return this.getChangeDataByParam(idOrParam);\n    }\n  }\n\n  private getChangeDataById(id: string, changeTime: Date): Observable<any> {\n    let json = JSON.stringify(changeTime);\n    let queryParam = encodeURIComponent(json);\n    let url = `${chgdrUrl}/${id}?changeTime=${queryParam}`;\n    return this.http.get(url).pipe(map(data => {\n      return this.transChangeDataFromResponse(data);\n    }));\n  }\n\n  private getChangeDataByParam(param: ChgdrItemQueryParam): Observable<any> {\n    if (param == null) {\n      throw new Error(\"ChgdrItemQueryParam can not be null\");\n    }\n\n    let requestParam: any = {};\n    Object.assign(requestParam, param);\n    //将Map转为Object，否则无法正常序列化\n    requestParam.dataIds = MapUtil.convertMapToObject(param.dataIds);\n\n    let url = `${chgdrUrl}`;\n    return this.http.post(url, requestParam).pipe(map(data => {\n      return this.transChangeDataFromResponse(data);\n    }));\n  }\n\n  private transChangeDataFromResponse(data): ChangeDataCompHeader {\n    if (!data) {\n      return data;\n    }\n    let sh: ChangeDataCompHeader = <ChangeDataCompHeader><unknown>data;\n    //TODO 待删，兼容老数据格式\n    if (typeof sh.dataCode == \"string\") {\n      sh.dataCode = JSON.parse(sh.dataCode);\n    }\n    sh.dataCode = MapUtil.convertObjectToMap(sh.dataCode);\n    sh.changeTime = this.toDate(sh.changeTime);\n    sh.operateType = OperateType.parse(sh.operateType);\n    sh.rows = this.transChangeDataRowsFromResponse(sh.rows || []);\n    return sh;\n  }\n\n  private transChangeDataRowsFromResponse(rows: ChangeDataRow[]): ChangeDataRow[] {\n    if (!rows || rows.length == 0) {\n      return rows;\n    }\n\n    rows.forEach(row => {\n      if (!row) {\n        return;\n      }\n      row.operateType = OperateType.parse(row.operateType);\n      //TODO 待删，兼容老数据格式\n      if (typeof row.dataCode == \"string\") {\n        row.dataCode = JSON.parse(row.dataCode);\n      }\n      row.dataCode = MapUtil.convertObjectToMap(row.dataCode);\n      row.oldContent = <Map<string, string>>MapUtil.convertObjectToMap(row.oldContent) || new Map();\n      row.newContent = <Map<string, string>>MapUtil.convertObjectToMap(row.newContent) || new Map();\n    });\n\n    return rows;\n  }\n}\n","export class ChangeDataQueryParam {\r\n    /** 用户ID */\r\n    userId: string;\r\n    /** 实体ID */\r\n    entityId: string;\r\n    /** 数据主键 */\r\n    dataId: string;\r\n    /** 数据编号 */\r\n    dataCode: Map<string, string>;\r\n    /** 变更时间-起始 */\r\n    changeTimeStart: Date;\r\n    /** 变更时间-结束 */\r\n    changeTimeEnd: Date;\r\n    /** 每页数量 */\r\n    pageSize: number;\r\n    /** 页码，从1开始 */\r\n    pageIndex: number;\r\n}","import { ChangeDataHeader } from './change-data-header';\r\n\r\nexport class ChangeDataQueryResult {\r\n    /** 当前页面，从1开始 */\r\n    pageIndex: number;\r\n    /** 每页数量 */\r\n    pageSize: number;\r\n    /** 总条数 */\r\n    total: number;\r\n    /** 当前页数据 */\r\n    headers: ChangeDataHeader[];\r\n}","export class ErrorUtil {\r\n    static getErrorMessage(e: any) {\r\n        if (!e) {\r\n            return \"\";\r\n        } else if (!e.error) {\r\n            return \"\";\r\n        } else if (!e.error.Message) {\r\n            return \"\";\r\n        } else {\r\n            return e.error.Message;\r\n        }\r\n    }\r\n}","export class TimeUtil{\r\n    public static getStartTimeInDay(date:Date){\r\n        let d:Date = new Date(date);\r\n        d.setHours(0);\r\n        d.setMinutes(0);\r\n        d.setSeconds(0);\r\n        d.setMilliseconds(0);\r\n        return d;\r\n    }\r\n\r\n    public static getEndTimeInDay(date:Date){\r\n        let d:Date = new Date(date);\r\n        d.setHours(23);\r\n        d.setMinutes(59);\r\n        d.setSeconds(59);\r\n        d.setMilliseconds(999);\r\n        return d;\r\n    }\r\n}","import { Component, HostBinding, Injector, Input, OnChanges, OnInit, SimpleChanges, TemplateRef, ViewChild } from '@angular/core';\nimport { DialogComponent } from '@farris/ui-dialog';\nimport { MessagerService } from '@farris/ui-messager';\nimport { NotifyService } from '@farris/ui-notify';\nimport { ChgdrService } from '../service/chgdr.service';\nimport { ChangeDataHeader } from '../model/change-data-header';\nimport { ChangeDataQueryParam } from '../model/change-data-query-param';\nimport { ChangeDataQueryResult } from '../model/change-data-query-result';\nimport { OperateType } from '../model/operate-type';\nimport { ErrorUtil } from '../util/error.util';\nimport { TimeUtil } from '../util/time.util';\nimport { I18nUtil } from '../service/i18n-service';\nimport { BeforeShowChangeDetailEvent } from '../model/chgdr-ui-config';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'chgdr-list',\n  templateUrl: './chgdr-list.component.html',\n  styleUrls: ['./chgdr-list.component.css']\n})\nexport class ChgdrListComponent implements OnInit, OnChanges {\n  @HostBinding('class.f-utils-fill-flex-column') baseCls = true;\n\n  @Input()\n  /** 业务实体ID */\n  entityId: string;\n  @Input()\n  /** 数据ID */\n  dataId: string;\n  @Input()\n  /** 变更时间-起始 */\n  changeTimeStart: Date;\n  @Input()\n  /** 变更时间-结束 */\n  changeTimeEnd: Date;\n\n  @Input()\n  /** 打开详情前的回调 */\n  beforeShowChangeDetail: (event: BeforeShowChangeDetailEvent) => Observable<boolean>;\n\n  private currentQueryParam: ChangeDataQueryParam;\n  chgdrs: ChangeDataQueryResult;\n\n  constructor(private chgdrService: ChgdrService,\n    private messageService: MessagerService,\n    private notifyService: NotifyService,\n    private injector: Injector) {\n  }\n\n  ngOnInit() {\n    let chgdrs = new ChangeDataQueryResult();\n    chgdrs.total = 0;\n    chgdrs.pageSize = 20;\n    chgdrs.pageIndex = 1;\n    chgdrs.headers = [];\n    this.chgdrs = chgdrs;\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!this.changeTimeStart && !this.changeTimeEnd) {\n      //未录入变更时间范围，则查询最近一周的\n      this.changeTimeEnd = TimeUtil.getEndTimeInDay(new Date());\n      this.changeTimeStart = TimeUtil.getStartTimeInDay(new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000));\n    } else if (!this.changeTimeEnd) {\n      //如果未设置截至时间，则与开始时间相同\n      this.changeTimeEnd = TimeUtil.getEndTimeInDay(this.changeTimeStart);\n    } else if (!this.changeTimeStart) {\n      //如果未设置开始时间，则与截至时间相同\n      this.changeTimeStart = TimeUtil.getEndTimeInDay(this.changeTimeEnd);\n    }\n    if (!!this.entityId) {\n      let param = this.buildQueryParam();\n      this.doQuery(param);\n    }\n  }\n\n  public query() {\n    let param = this.buildQueryParam();\n    this.doQuery(param);\n  }\n\n  private buildQueryParam() {\n    let param = new ChangeDataQueryParam();\n    param.pageIndex = 1;\n    param.pageSize = 20;\n    param.entityId = this.entityId;\n    param.dataId = this.dataId;\n    param.changeTimeStart = this.changeTimeStart;\n    param.changeTimeEnd = this.changeTimeEnd;\n    return param;\n  }\n\n  private doQuery(param) {\n    this.chgdrService.queryChangeDataHeader(param).subscribe(data => {\n      this.currentQueryParam = param;\n      this.chgdrs = data;\n    }, error => {\n      console.error(\"查询业务变更日志出错\", error);\n      this.messageService.error(I18nUtil.instant(\"query-change-data-record-error\", { errorMessage: ErrorUtil.getErrorMessage(error) }));\n    });\n  }\n\n  onPageChanged($event) {\n    if (!$event) {\n      return;\n    }\n\n    if ($event.pageIndex) {\n      this.currentQueryParam.pageIndex = $event.pageIndex;\n    }\n    if ($event.pageSize) {\n      this.currentQueryParam.pageSize = $event.pageSize;\n    }\n    this.doQuery(this.currentQueryParam);\n  }\n\n  onPageSizeChanged($event) {\n    this.currentQueryParam.pageSize = $event;\n    this.doQuery(this.currentQueryParam);\n  }\n\n  public get startTimeLabel() {\n    return I18nUtil.instant(\"start-time-label\");\n  }\n\n  public get endTimeLabel() {\n    return I18nUtil.instant(\"end-time-label\");\n  }\n\n  public get queryBtn() {\n    return I18nUtil.instant(\"query-btn\");\n  }\n}\n","import { Component, Injector, Input, OnInit } from '@angular/core';\r\nimport { ChgdrTreeNode } from '../chgdr-data-viewer/chgdr-tree-builder';\r\nimport { I18nUtil } from '../service/i18n-service';\r\n\r\n@Component({\r\n  selector: 'lib-chgdr-row-baseinfo-form',\r\n  templateUrl: './chgdr-row-baseinfo-form.component.html',\r\n  styleUrls: ['./chgdr-row-baseinfo-form.component.css']\r\n})\r\nexport class ChgdrRowBaseinfoFormComponent implements OnInit {\r\n  @Input()\r\n  chgdrTreeNode: ChgdrTreeNode;\r\n  @Input() showDataId: boolean = false;\r\n\r\n  constructor(private injector: Injector) {\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  public get technologyPrimaryKeyLabel() {\r\n    return I18nUtil.instant(\"technology-primary-key-label\");\r\n  }\r\n  public get changeUserLabel() {\r\n    return I18nUtil.instant(\"change-user-label\");\r\n  }\r\n  public get changeTimeLabel() {\r\n    return I18nUtil.instant(\"change-time-label\");\r\n  }\r\n  public get changeOperateType() {\r\n    return I18nUtil.instant(\"change-operate-type\");\r\n  }\r\n}\r\n","import { Component, Injector, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { DatagridComponent } from '@farris/ui-datagrid';\r\nimport { ChangeColumnItem, ChgdrDataRowNode } from '../chgdr-data-viewer/chgdr-data';\r\nimport { ChgdrTreeNode } from '../chgdr-data-viewer/chgdr-tree-builder';\r\nimport { OperateType } from '../model/operate-type';\r\nimport { I18nUtil } from '../service/i18n-service';\r\n\r\n@Component({\r\n  selector: 'lib-chgdr-row-grid',\r\n  templateUrl: './chgdr-row-grid.component.html',\r\n  styleUrls: ['./chgdr-row-grid.component.css']\r\n})\r\nexport class ChgdrRowGridComponent implements OnInit, OnChanges {\r\n  @Input()\r\n  chgdrTreeNode: ChgdrTreeNode;\r\n  @ViewChild(\"chgdrRowGrid\")\r\n  dataGrid: DatagridComponent;\r\n\r\n  columns: any[];\r\n  data: ChangeColumnItem[];\r\n\r\n  constructor(private injector: Injector) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.columns = [\r\n      { field: 'fieldName', width: 130, title: this.fieldNameColumnTitle },\r\n      { field: 'oldValue', width: 130, title: this.oldValueColumnTitle, showTips: true },\r\n      { field: 'newValue', width: 130, title: this.newValueColumnTitle, showTips: true }\r\n    ];\r\n    let oldValueField = this.columns[1];\r\n    let newValueField = this.columns[2];\r\n\r\n    if (!!this.chgdrTreeNode) {\r\n      //根据初始的变更类型更改显示列的信息\r\n      //此处不能直接调用DataGrid组件的方法更改，因为此处尚未创建DataGrid\r\n      let type: OperateType = this.chgdrTreeNode.chgdrRow.operateType;\r\n      if (type == OperateType.ADD) {\r\n        oldValueField.visible = false;\r\n        newValueField.title = this.valueColumnTitle;\r\n      } else if (type == OperateType.DELETE) {\r\n        newValueField.visible = false;\r\n        oldValueField.title = this.valueColumnTitle;\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    //原来变更行类型\r\n    let oldType: OperateType;\r\n    if (!changes.chgdrTreeNode) {\r\n      oldType = null;\r\n    } else if (!changes.chgdrTreeNode.previousValue) {\r\n      oldType = null;\r\n    } else {\r\n      oldType = changes.chgdrTreeNode.previousValue.chgdrRow.operateType;\r\n    }\r\n\r\n    //现在变更行类型\r\n    let newType: OperateType;\r\n    if (!changes.chgdrTreeNode) {\r\n      newType = null;\r\n    } else if (!changes.chgdrTreeNode.currentValue) {\r\n      newType = null;\r\n    } else {\r\n      newType = changes.chgdrTreeNode.currentValue.chgdrRow.operateType;\r\n    }\r\n\r\n    if (oldType == newType || !this.dataGrid || !this.dataGrid.columns) {\r\n      //如果新老类型一致(或DataGrid尚未创建)，则不变动\r\n      //do nothing\r\n    } else if (newType == OperateType.ADD) {\r\n      this.dataGrid.showColumn(\"newValue\");\r\n      this.dataGrid.hideColumn(\"oldValue\");\r\n      this.dataGrid.setColumnTitle(\"newValue\", this.valueColumnTitle);\r\n    } else if (newType == OperateType.DELETE) {\r\n      this.dataGrid.showColumn(\"oldValue\");\r\n      this.dataGrid.hideColumn(\"newValue\");\r\n      this.dataGrid.setColumnTitle(\"oldValue\", this.valueColumnTitle);\r\n    } else {\r\n      this.dataGrid.showColumn(\"oldValue\");\r\n      this.dataGrid.showColumn(\"newValue\");\r\n      this.dataGrid.setColumnTitle(\"oldValue\", this.oldValueColumnTitle);\r\n      this.dataGrid.setColumnTitle(\"newValue\", this.newValueColumnTitle);\r\n    }\r\n\r\n    if (changes.chgdrTreeNode && changes.chgdrTreeNode.currentValue) {\r\n      this.data = changes.chgdrTreeNode.currentValue.chgdrRow.changes;\r\n    }\r\n  }\r\n\r\n  private get fieldNameColumnTitle() {\r\n    return I18nUtil.instant(\"field-name-column-title\");\r\n  }\r\n\r\n  private get valueColumnTitle() {\r\n    return I18nUtil.instant(\"value-column-title\");\r\n  }\r\n\r\n  private get oldValueColumnTitle() {\r\n    return I18nUtil.instant(\"old-value-column-title\");\r\n  }\r\n\r\n  private get newValueColumnTitle() {\r\n    return I18nUtil.instant(\"new-value-column-title\");\r\n  }\r\n\r\n}\r\n","import { Component, Injector, Input, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { BeforeShowChangeDetailEvent } from '../model/chgdr-ui-config';\n\n@Component({\n  selector: 'lib-chgdr-list-dialog-content',\n  templateUrl: './chgdr-list-dialog-content.component.html',\n  styleUrls: ['./chgdr-list-dialog-content.component.css']\n})\nexport class ChgdrListDialogContentComponent implements OnInit {\n  @Input()\n  /** 业务实体ID */\n  entityId: string;\n\n  @Input()\n  /** 数据ID */\n  dataId: string;\n\n  @Input()\n  /** 打开详情前的回调 */\n  beforeShowChangeDetail: (event: BeforeShowChangeDetailEvent) => Observable<boolean>;\n\n  constructor(private injector: Injector) { }\n\n  ngOnInit() {\n  }\n\n}\n","import { Observable } from \"rxjs\";\r\nimport { ChangeDataHeader } from \"./change-data-header\";\r\n\r\nexport class BeforeShowChangeDetailEvent {\r\n  /** 业务变更日志抬头信息 */\r\n  header: ChangeDataHeader;\r\n}\r\n\r\n/**\r\n * 对于业务变更日志对话框的设置\r\n */\r\nexport class ChgdrListDialogConfig {\r\n  /** 业务实体ID */\r\n  entityId: string;\r\n  /** 数据ID */\r\n  dataId: string;\r\n  /** 显示变更详情前的回调，返回false表示不使用内置界面显示变更详情。 */\r\n  beforeShowChangeDetail: (event: BeforeShowChangeDetailEvent) => Observable<boolean>\r\n}","import { Injectable, ComponentFactoryResolver, Injector } from '@angular/core';\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { BsModalService, ModalOptions } from '@farris/ui-modal';\r\nimport { of } from 'rxjs';\r\nimport { ChgdrListDialogContentComponent } from '../chgdr-list-dialog-content/chgdr-list-dialog-content.component';\r\nimport { ChgdrListDialogConfig } from '../model/chgdr-ui-config';\r\nimport { I18nUtil } from './i18n-service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ChgdrListUiService {\r\n\r\n    constructor(\r\n        private resolver: ComponentFactoryResolver,\r\n        private injector: Injector,\r\n        private modalService: BsModalService,\r\n        private messagerService: MessagerService\r\n    ) {\r\n    }\r\n\r\n    showDialog(entityId: string, dataId: string)\r\n    showDialog(config: ChgdrListDialogConfig)\r\n    showDialog(arg1: string | ChgdrListDialogConfig, dataId?: string) {\r\n        if (!arg1) {\r\n            console.error(\"创建业务变更日志列表组件失败，业务实体不能为空，请检查\", arg1, dataId);\r\n            throw new Error(\"创建业务变更日志列表组件失败，业务实体不能为空，请检查\");\r\n        }\r\n        if (arg1 instanceof String || typeof arg1 == \"string\") {\r\n            let config = new ChgdrListDialogConfig();\r\n            config.entityId = arg1.toString();\r\n            config.dataId = dataId;\r\n            this.create(config);\r\n        } else {\r\n            this.create(arg1);\r\n        }\r\n    }\r\n\r\n    private create(config: ChgdrListDialogConfig) {\r\n        if (config.entityId == null) {\r\n            console.error(\"创建业务变更日志列表组件失败，业务实体不能为空，请检查\", config);\r\n            throw new Error(\"创建业务变更日志列表组件失败，业务实体不能为空，请检查\");\r\n        }\r\n\r\n        let fac = this.resolver.resolveComponentFactory(ChgdrListDialogContentComponent);\r\n        let cmpRef = fac.create(this.injector);\r\n        let modalConfig: ModalOptions = {\r\n            title: I18nUtil.instant(\"chgdr-list-dialog-title\"),\r\n            width: 1000,\r\n            height: 550,\r\n            resizable: true,\r\n            showButtons: false,\r\n            showMaxButton: true,\r\n            beforeOpen: () => {\r\n                return of(true);\r\n            }\r\n        }\r\n\r\n        cmpRef.instance.entityId = config.entityId;\r\n        cmpRef.instance.dataId = config.dataId;\r\n        cmpRef.instance.beforeShowChangeDetail = config.beforeShowChangeDetail;\r\n        let dialog = this.modalService.show(cmpRef, modalConfig);\r\n    }\r\n\r\n}\r\n","import { ChangeDetectorRef, Component, EventEmitter, HostBinding, Injector, Input, OnInit, Output, SimpleChanges, TemplateRef, ViewChild } from '@angular/core';\r\nimport { DataColumn } from '@farris/ui-common/column';\r\nimport { DialogComponent } from '@farris/ui-dialog';\r\nimport { MessagerService } from '@farris/ui-messager';\r\nimport { NotifyService } from '@farris/ui-notify';\r\nimport { ChgdrService } from '../service/chgdr.service';\r\nimport { ChangeDataHeader } from '../model/change-data-header';\r\nimport { ChangeDataQueryResult } from '../model/change-data-query-result';\r\nimport { OperateType } from '../model/operate-type';\r\nimport { ErrorUtil } from '../util/error.util';\r\nimport { ChgLogConfigField } from '../model/chgdr-config-field';\r\nimport { tap } from 'rxjs/operators';\r\nimport { forkJoin, Observable, of } from 'rxjs';\r\nimport { MapUtil } from '../util/map.util';\r\nimport { ChgdrMetadataService } from '../service/chgdr-metadata.service';\r\nimport { GSPBusinessEntity } from '@gsp-bef/gsp-be-metadata';\r\nimport { GSPMetadataRTService } from '@gsp-lcm/metadatart-selector';\r\nimport { GSPCommonElement } from '@gsp-bef/gsp-cm-metadata';\r\nimport { ChgdrInnerService } from '../service/chgdr-inner.service';\r\nimport { ChgdrConfigHandler } from '../service/chgdr-config-handler';\r\nimport { I18nUtil } from '../service/i18n-service';\r\nimport { BeforeShowChangeDetailEvent } from '../model/chgdr-ui-config';\r\n\r\n@Component({\r\n  selector: 'lib-chgdr-header-datagrid',\r\n  templateUrl: './chgdr-header-datagrid.component.html',\r\n  styleUrls: ['./chgdr-header-datagrid.component.css']\r\n})\r\nexport class ChgdrHeaderDatagridComponent implements OnInit {\r\n  @HostBinding('class.f-utils-fill') baseCls = true;\r\n  @Input() chgdrs: ChangeDataQueryResult;\r\n  @Input() showDataId: boolean = true;\r\n\r\n  @Input()\r\n  /** 打开详情前的回调 */\r\n  beforeShowChangeDetail: (event: BeforeShowChangeDetailEvent) => Observable<boolean>;\r\n\r\n  headers: ChangeDataHeader[] = [];\r\n  dataCodeFields: ChgLogConfigField[] = [];\r\n  private chgdrConfigHandler: ChgdrConfigHandler;\r\n  @Output()\r\n  pageChanged: EventEmitter<number> = new EventEmitter();\r\n  @Output()\r\n  pageSizeChanged: EventEmitter<number> = new EventEmitter();\r\n\r\n  // 获取定义的单元格模板\r\n  @ViewChild('opCell') opCell: TemplateRef<any>;\r\n  @ViewChild(\"chgdrInfoDialog\")\r\n  chgdrInfoDialog: DialogComponent;\r\n\r\n  columns: any[];\r\n\r\n  currentChgdrData: ChangeDataHeader;\r\n  I18nUtil: I18nUtil;\r\n\r\n  constructor(private chgdrService: ChgdrService,\r\n    private messageService: MessagerService,\r\n    private notifyService: NotifyService,\r\n    private ref: ChangeDetectorRef,\r\n    private chgdrInnerService: ChgdrInnerService,\r\n    private injector: Injector) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.resetColumnAndData(null, []);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (!changes.chgdrs) {\r\n      //如果chgdrs没有更新，则直接返回\r\n      return;\r\n    }\r\n\r\n    let prevEntityId = this.getEntityId(changes.chgdrs.previousValue);\r\n    let curEntityId = this.getEntityId(changes.chgdrs.currentValue);\r\n    let requests = [\r\n      this.updateChgdrConfigHandler(curEntityId),\r\n      this.updateDataCodeFields(prevEntityId, curEntityId)\r\n    ]\r\n    forkJoin(requests).subscribe(data => {\r\n      let chgdrDatas: ChangeDataQueryResult = changes.chgdrs.currentValue;\r\n      if (!!chgdrDatas) {\r\n        this.formatHeaders(chgdrDatas.headers);\r\n      }\r\n\r\n      //如果业务实体变更，则重置列信息\r\n      if (curEntityId != null && curEntityId != prevEntityId) {\r\n        this.resetColumnAndData(curEntityId, chgdrDatas.headers);\r\n      } else {\r\n        this.headers = chgdrDatas.headers;\r\n      }\r\n    }, err => {\r\n      console.error(\"获取BE【\" + curEntityId + \"】的配置的业务变更日志的业务编号失败：\", err);\r\n      this.messageService.error(I18nUtil.instant(\"get-business-code-config-error\", { errorMessage: ErrorUtil.getErrorMessage(err) }));\r\n    });\r\n  }\r\n\r\n  /** 更新业务实体元数据 */\r\n  private updateChgdrConfigHandler(entityId: string) {\r\n    if (entityId) {\r\n      return this.chgdrInnerService.getChgdrConfigHandler(entityId).pipe(tap(data => this.chgdrConfigHandler = data));\r\n    } else {\r\n      return of(this.chgdrConfigHandler);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 更新dataCodeField数据\r\n   * @param prevEntityId 原BeId\r\n   * @param curEntityId 当前BeId\r\n   */\r\n  updateDataCodeFields(prevEntityId: string, curEntityId: string) {\r\n    if (curEntityId != null && curEntityId != prevEntityId) {\r\n      //只有发生变更时才更新\r\n      return this.chgdrService.getRootEntityDataCodeFields(curEntityId).pipe(tap(data => this.dataCodeFields = data || []));\r\n    } else {\r\n      //否则直接返回当前值\r\n      return of(this.dataCodeFields);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 格式化headers。主要是解析其中的dataCode，将其转为Object\r\n   * 使用dataCodeObj存放dataCode解析后的结果\r\n   * dataCodeObj属性在ChangeDataHeader中不存在，此处通过强制赋值使用，并且只限于该处使用。\r\n   */\r\n  private formatHeaders(headers: ChangeDataHeader[]) {\r\n    if (!headers) {\r\n      return;\r\n    }\r\n    headers.forEach(header => {\r\n      let dataCodeObj: any;\r\n      this.formatDataCodeMap(header.dataCode);\r\n      if (header.dataCode && header.dataCode.size == 1 && header.dataCode.has(\"_$dataCode\")) {\r\n        //兼容老数据\r\n        //老数据dataCode为自由文本\r\n        dataCodeObj = {};\r\n        if (this.dataCodeFields && this.dataCodeFields.length > 0) {\r\n          dataCodeObj[this.dataCodeFields[0].fieldLabelId] = header.dataCode.get(\"_$dataCode\");\r\n        }\r\n      } else {\r\n        dataCodeObj = MapUtil.convertMapToObject(header.dataCode);\r\n      }\r\n      (<any>header).dataCodeObj = dataCodeObj;\r\n    })\r\n  }\r\n\r\n  /** 格式化业务主键Map */\r\n  private formatDataCodeMap(dataCode: Map<string, string>): void {\r\n    if (!dataCode || !this.chgdrConfigHandler) {\r\n      return;\r\n    }\r\n    Array.from(dataCode.keys()).forEach(fieldLabelId => {\r\n      let value = dataCode.get(fieldLabelId);\r\n      let formatedValue = this.chgdrConfigHandler.formatMainObjectFieldValue(value, fieldLabelId);\r\n      dataCode.set(fieldLabelId, formatedValue);\r\n    })\r\n  }\r\n\r\n  private getEntityId(chgdrs: ChangeDataQueryResult): string {\r\n    if (!chgdrs || !chgdrs.headers || chgdrs.headers.length == 0) {\r\n      return null;\r\n    } else {\r\n      return chgdrs.headers[0].entityId;\r\n    }\r\n  }\r\n\r\n  private resetColumnAndData(entityId: string, headers: ChangeDataHeader[]) {\r\n    let columns: any[] = [\r\n      { field: 'userName', width: 130, title: I18nUtil.instant(\"user-name-column-title\") },\r\n      { field: 'changeTime', width: 130, title: I18nUtil.instant(\"change-time-column-title\"), formatter: { type: 'datetime', options: { format: I18nUtil.instant(\"change-time-column-format\") } } },\r\n      { field: 'operateType.name', width: 60, title: I18nUtil.instant(\"operation-type-title\") },\r\n      { field: 'dataId', width: 130, title: I18nUtil.instant(\"tech-pk-column-title\"), visible: this.showDataId }];\r\n    //{field: 'dataCode', width: 130, title: '业务编号'},\r\n    // {field: 'reason', width: 130, title: '变更原因'},\r\n    this.dataCodeFields.forEach((field) => {\r\n      let column: DataColumn = {\r\n        field: \"dataCodeObj.\" + field.fieldLabelId,\r\n        title: field.fieldName,\r\n        width: 130\r\n      };\r\n      columns.push(column);\r\n    })\r\n    let opColumn = { title: I18nUtil.instant(\"operation-column-title\"), width: 130, template: this.opCell, halign: 'center', align: 'center' };\r\n    columns.push(opColumn);\r\n\r\n    this.columns = columns;\r\n    this.headers = headers;\r\n  }\r\n\r\n  onPageChanged($event) {\r\n    this.pageChanged.emit($event);\r\n  }\r\n\r\n  onPageSizeChanged($event) {\r\n    this.pageSizeChanged.emit($event);\r\n  }\r\n\r\n  clickShowChangeDetail(ctx) {\r\n    let header: ChangeDataHeader = ctx.rowData;\r\n    if (!header) {\r\n      return;\r\n    }\r\n    if (!this.beforeShowChangeDetail) {\r\n      //如果没有打开详情前回调，则按照默认方式打开\r\n      this.showChangeDetail(header);\r\n    } else {\r\n      let event: BeforeShowChangeDetailEvent = new BeforeShowChangeDetailEvent();\r\n      event.header = header;\r\n      this.beforeShowChangeDetail(event).subscribe((isShow) => {\r\n        if (isShow) {\r\n          this.showChangeDetail(header);\r\n        }\r\n      }, (err) => {\r\n        console.error(\"执行业务变更详情打开前事件报错：\", err);\r\n        this.messageService.error(\"执行业务变更详情打开前事件报错：\" + ErrorUtil.getErrorMessage(err));\r\n      })\r\n    }\r\n  }\r\n\r\n  private showChangeDetail(header: ChangeDataHeader) {\r\n    this.chgdrService.getChangeData(header.id, header.changeTime).subscribe(data => {\r\n      if (!data) {\r\n        this.notifyService.error(I18nUtil.instant(\"can-not-found-change-record-by-id\", { headerId: header.id }));\r\n      } else {\r\n        this.currentChgdrData = data;\r\n        this.chgdrInfoDialog.show();\r\n      }\r\n    }, error => {\r\n      console.error(\"查询业务变更日志出错\", error);\r\n      this.messageService.error(I18nUtil.instant(\"query-change-data-record-error\", { errorMessage: ErrorUtil.getErrorMessage(error) }));\r\n    })\r\n  }\r\n\r\n  public get showChangeDetailBtn() {\r\n    return I18nUtil.instant(\"show-change-detail-btn\");\r\n  }\r\n\r\n  public get changeDetailDialogTitle() {\r\n    return I18nUtil.instant(\"change-detail-dialog-title\");\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule, registerLocaleData } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\nimport { SplitterModule } from \"@farris/ui-splitter\";\r\nimport { AngularDraggableModule } from '@farris/ui-draggable';\r\nimport { DatagridModule } from \"@farris/ui-datagrid\";\r\nimport { TreeTableModule } from '@farris/ui-treetable';\r\nimport { FarrisSectionModule } from \"@farris/ui-section\";\r\nimport { MessagerModule, MessagerService } from '@farris/ui-messager';\r\nimport { NotifyModule, NotifyService } from '@farris/ui-notify';\r\nimport { FarrisDialogModule } from '@farris/ui-dialog';\r\nimport { FarrisDatePickerModule } from '@farris/ui-datepicker';\r\n\r\nimport { HttpService, SessionService, CacheService } from '@ecp-caf/caf-common';\r\nimport { MetadataRTSelectModule, SelectMetadataRTComponent, GSPMetadataRTServiceModule } from '@gsp-lcm/metadatart-selector';\r\n\r\nimport { ChgdrDataViewerComponent } from './chgdr-data-viewer/chgdr-data-viewer.component';\r\n\r\nimport zh from '@angular/common/locales/zh';\r\nimport { ChgdrListComponent } from './chgdr-list/chgdr-list.component';\r\nimport { ChgdrRowBaseinfoFormComponent } from './chgdr-row-baseinfo-form/chgdr-row-baseinfo-form.component';\r\nimport { ChgdrRowGridComponent } from './chgdr-row-grid/chgdr-row-grid.component';\r\nimport { ChgdrListUiService } from './service/chgdr-list-ui.service';\r\nimport { ChgdrListDialogContentComponent } from './chgdr-list-dialog-content/chgdr-list-dialog-content.component';\r\nimport { ChgdrHeaderDatagridComponent } from './chgdr-header-datagrid/chgdr-header-datagrid.component';\r\nimport { ChgdrMetadataService } from './service/chgdr-metadata.service';\r\nimport { ChgdrConfigService } from './service/chgdr-config.service';\r\nimport { ChgdrInnerService } from './service/chgdr-inner.service';\r\nimport { ChgdrService } from './service/chgdr.service';\r\nimport { I18nService } from './service/i18n-service';\r\nregisterLocaleData(zh);\r\n\r\n@NgModule({\r\n  declarations: [ChgdrDataViewerComponent, ChgdrListComponent, ChgdrRowBaseinfoFormComponent, ChgdrRowGridComponent, ChgdrListDialogContentComponent, ChgdrHeaderDatagridComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    TranslateModule.forRoot(),\r\n    SplitterModule,\r\n    AngularDraggableModule,\r\n    DatagridModule,\r\n    TreeTableModule,\r\n    FarrisSectionModule,\r\n    MessagerModule.forRoot(),\r\n    NotifyModule,\r\n    FarrisDialogModule,\r\n    FarrisDatePickerModule,\r\n    MetadataRTSelectModule,\r\n    GSPMetadataRTServiceModule.forRoot('')\r\n  ],\r\n  providers: [\r\n    MessagerService,\r\n    NotifyService,\r\n    HttpService,\r\n    SessionService,\r\n    CacheService,\r\n    ChgdrListUiService,\r\n    ChgdrMetadataService,\r\n    ChgdrConfigService,\r\n    ChgdrInnerService,\r\n    ChgdrService,\r\n    I18nService\r\n  ],\r\n  entryComponents: [\r\n    ChgdrDataViewerComponent,\r\n    ChgdrListComponent,\r\n    ChgdrListDialogContentComponent\r\n  ],\r\n  exports: [ChgdrDataViewerComponent, ChgdrListComponent, ChgdrHeaderDatagridComponent]\r\n})\r\nexport class ChgdrModule { }\r\n","import { ChangeDataRow } from './change-data-row';\r\nimport { OperateType } from './operate-type';\r\n\r\nexport class ChangeDataHeader {\r\n    id: string;\r\n    /**\r\n     * 用户ID\r\n     */\r\n    userId: string;\r\n    /**\r\n     * 用户编号\r\n     */\r\n    userCode: string;\r\n    /**\r\n     * 用户名称\r\n     */\r\n    userName: string;\r\n    /**\r\n     * 实体ID\r\n     */\r\n    entityId: string;\r\n    /**\r\n     * 数据主键\r\n     */\r\n    dataId: string;\r\n    /**\r\n     * 数据编号\r\n     */\r\n    dataCode: Map<string, string>;\r\n    /**\r\n     * 变更时间\r\n     */\r\n    changeTime: Date;\r\n    /**\r\n     * 变更类型\r\n     */\r\n    operateType: OperateType;\r\n    /**\r\n     * 变更原因\r\n     */\r\n    reason: string;\r\n    /**\r\n     * 分组ID\r\n     */\r\n    groupId: string;\r\n\r\n    /**\r\n     * 变更行列表\r\n     */\r\n    rows: ChangeDataRow[];\r\n}\r\n\r\nexport class ChangeDataCompHeader extends ChangeDataHeader {\r\n    extEntityRows: Map<String, ChangeDataRow[]>;\r\n}","import { OperateType } from './operate-type';\r\n\r\nexport class ChangeDataRow {\r\n    id: string;\r\n    /**\r\n     * header内码\r\n     */\r\n    headerId: string;\r\n    /**\r\n     * 实体编号\r\n     */\r\n    entityCode: string;\r\n    /**\r\n     * 数据主键\r\n     */\r\n    dataId: string;\r\n    /**\r\n     * 数据编号\r\n     */\r\n    dataCode: Map<string, string>;\r\n    /**\r\n     * 操作类型\r\n     */\r\n    operateType: OperateType;\r\n    /**\r\n     * 旧内容\r\n     */\r\n    oldContent: Map<string, string>;\r\n    /**\r\n     * 新内容\r\n     */\r\n    newContent: Map<string, string>;\r\n    /**\r\n     * 父数据主键\r\n     */\r\n    parentDataId: string;\r\n}","/**\r\n * 业务变更日志详情数据查询参数\r\n */\r\nexport class ChgdrItemQueryParam {\r\n  /**\r\n   * 主业务实体变更Header id\r\n   */\r\n  public id: string;\r\n  /**\r\n   * 变更时间\r\n   */\r\n  public changeTime: Date;\r\n  /**\r\n   * 关联的其他业务实体业务变更日志列表。key为实体ID，value为对应实体的数据主键\r\n   */\r\n  public dataIds: Map<string, string[]>;\r\n}"],"names":["ChangeColumnItem","this","children","DataCodeField","langResourceMap","Map","set","chgdr-list-dialog-title","base-info-section-title","change-detail-section-title","empty-data-text","get-business-code-config-error","user-name-column-title","change-time-column-title","change-time-column-format","operation-type-title","tech-pk-column-title","operation-column-title","can-not-found-change-record-by-id","query-change-data-record-error","show-change-detail-btn","change-detail-dialog-title","start-time-label","end-time-label","query-btn","technology-primary-key-label","change-user-label","change-time-label","change-operate-type","field-name-column-title","value-column-title","old-value-column-title","new-value-column-title","operate-type-name-ADD","operate-type-name-MODIFY","operate-type-name-DELETE","yes-text","no-text","business-code-text","currentLang","localStorage","getItem","console","log","parser","TranslateDefaultParser","I18nUtil","instant","key","param","statement","getCurrentLangResource","undefined","result","interpolate","get","instantOrDefault","defaultText","I18nService","prototype","staticInstant","Injectable","args","providedIn","ChgdrDataBuilder","buildChgdrData","data","handler","_this","chgdrData","ChgdrData","entityName","getBeName","operateType","userName","dataId","dataCode","dataCodes","buildDataCodes","getMainObjectCode","reason","changeTime","entityNodes","rowNodes","rows","forEach","row","rowNode","changeColumnKeys","columnValueChanges","columnMap","ChgdrDataRowNode","id","parentDataId","entityCode","getEntityNameOrDefault","extractChangeColumnKeys","column","fieldLabel","fieldName","getEntityFieldNameOrDefault","oldValue","formatFieldValue","oldContent","newValue","newContent","ele","getElement","hasAssociation","ObjectType","IsUdt","isAssociationRefField","IsRefElement","parentElement","getParentElement","belongFieldLabelId","LabelID","push","sort","filter","parentColumn","map","length","virtualColumn","Object","assign","originalColumnItem","child","join","changes","dataIdRowMap","node","entityNode","genChgdrDataEntityNode","parentRowNode","find","en","value","dataCodeField","fieldLabelId","fieldValue","keysSet","Set","add","Array","from","keys","ChgdrDataEntityNode","Guid","newGuid","replace","c","convert","r","Math","random","toString","ChgdrTreeBuilder","build","warn","rootRows","rootRow","rowToNode","isRoot","expanded","ChgdrTreeNode","name","buildTreeNodeName","chgdrRow","childRow","childNode","parent","dataCodeName","ChgdrMetadataService","getGSPBusinessEntity","beId","beMetadataCache","has","be","of","metadataService","GetMetadataRT","pipe","metadata","JSON","parse","content","HttpService","SessionService","GSPMetadataRTService","Injector","http","sessionService","injector","ChgdrConfigService","getBeChgdrConfig","queryUrl","chgdrUrl","tap","entity","fields","field","index","showIndex","a","b","ChgdrConfigHandler","updateShowIndex","entityFieldShowOrderMap","entityFieldMap","size","entityFieldConfigMap","updateEntityConfigs","fieldConfigMap","entityConfigs","entityConfig","tabCode","updateEntityMap","entityCodeMap","Code","ContainElements","updateEntityFieldMap","ContainChildObjects","childEntity","element","entityFieldParentMap","childAssociations","ChildAssociations","childAssociation","refElementCollection","RefElementCollection","rele","items","fieldLabelIdFunc","aKey","bKey","localeCompare","formatMainObjectFieldValue","originalValue","error","ID","Name","MDataType","GSPElementDataType","Decimal","Integer","toLowerCase","includes","num","Number","isNaN","toNonExponential","Boolean","Date","date","format","DateTime","GSPElementObjectType","Enum","enumValue","ContainEnumValues","item","Value","m","toExponential","match","toFixed","max","MainObject","fieldConfig","mainObject","ChgdrInnerService","getChgdrConfigHandler","requests","chgdrMetadataService","chgdrConfigService","forkJoin","ChgdrDataViewerComponent","ngOnInit","ngOnChanges","entityId","chgdrInnerService","subscribe","treeData","treeTableComponent","clearSelections","setTimeout","selectNode","handleTreeSelection","$event","currentNode","defineProperty","Component","selector","template","Input","ViewChild","showDataId","treeConfig","idField","columns","title","width","leafIcon","expandIcon","collapseIcon","showLevel","disabled","init","selectValues","OperateType","code","defaultName","values","ADD","MODIFY","DELETE","toJson","obj","ot","ordinal","extendStatics","d","setPrototypeOf","__proto__","p","hasOwnProperty","MapUtil","convertMapToObject","create","convertObjectToMap","o","i","strMap","_b","Symbol","iterator","call","next","done","_c","k","ServerIP","ChgdrService","queryChangeDataHeader","currentQueryParam","json","stringify","queryParam","encodeURIComponent","url","queryResult","headers","header","toDate","getRootEntityDataCodeFields","rootDataCodeFieldsMap","getChangeData","idOrParam","Error","String","getChangeDataById","getChangeDataByParam","transChangeDataFromResponse","requestParam","dataIds","post","sh","transChangeDataRowsFromResponse","ChangeDataQueryParam","ChangeDataQueryResult","ErrorUtil","getErrorMessage","e","Message","TimeUtil","getStartTimeInDay","setHours","setMinutes","setSeconds","setMilliseconds","getEndTimeInDay","ChgdrListComponent","chgdrs","total","pageSize","pageIndex","changeTimeStart","changeTimeEnd","getTime","buildQueryParam","doQuery","query","chgdrService","messageService","errorMessage","onPageChanged","onPageSizeChanged","MessagerService","NotifyService","HostBinding","notifyService","baseCls","ChgdrRowBaseinfoFormComponent","ChgdrRowGridComponent","fieldNameColumnTitle","oldValueColumnTitle","showTips","newValueColumnTitle","type","oldValueField","newValueField","chgdrTreeNode","visible","valueColumnTitle","oldType","previousValue","newType","currentValue","dataGrid","showColumn","hideColumn","setColumnTitle","ChgdrListDialogContentComponent","BeforeShowChangeDetailEvent","ChgdrListUiService","showDialog","arg1","config","ChgdrListDialogConfig","cmpRef","resolver","resolveComponentFactory","modalConfig","height","resizable","showButtons","showMaxButton","beforeOpen","instance","beforeShowChangeDetail","modalService","show","ComponentFactoryResolver","BsModalService","messagerService","ChgdrHeaderDatagridComponent","resetColumnAndData","prevEntityId","curEntityId","getEntityId","updateChgdrConfigHandler","updateDataCodeFields","chgdrDatas","formatHeaders","err","chgdrConfigHandler","dataCodeFields","dataCodeObj","formatDataCodeMap","formatedValue","formatter","options","opColumn","opCell","halign","align","pageChanged","emit","pageSizeChanged","clickShowChangeDetail","ctx","rowData","event_1","isShow","showChangeDetail","currentChgdrData","chgdrInfoDialog","headerId","ChangeDetectorRef","Output","ref","EventEmitter","registerLocaleData","zh","NgModule","declarations","imports","CommonModule","FormsModule","TranslateModule","forRoot","SplitterModule","AngularDraggableModule","DatagridModule","TreeTableModule","FarrisSectionModule","MessagerModule","NotifyModule","FarrisDialogModule","FarrisDatePickerModule","MetadataRTSelectModule","GSPMetadataRTServiceModule","providers","CacheService","entryComponents","exports","ChgdrModule","tslib_1.__extends","ChangeDataHeader","__","ChangeDataCompHeader","constructor","ChangeDataRow"],"mappings":"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"}