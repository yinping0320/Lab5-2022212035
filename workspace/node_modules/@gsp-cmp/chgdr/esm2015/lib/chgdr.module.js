/**
 * @fileoverview added by tsickle
 * Generated from: lib/chgdr.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule, registerLocaleData } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { TranslateModule } from '@ngx-translate/core';
import { SplitterModule } from "@farris/ui-splitter";
import { AngularDraggableModule } from '@farris/ui-draggable';
import { DatagridModule } from "@farris/ui-datagrid";
import { TreeTableModule } from '@farris/ui-treetable';
import { FarrisSectionModule } from "@farris/ui-section";
import { MessagerModule, MessagerService } from '@farris/ui-messager';
import { NotifyModule, NotifyService } from '@farris/ui-notify';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { FarrisDatePickerModule } from '@farris/ui-datepicker';
import { HttpService, SessionService, CacheService } from '@ecp-caf/caf-common';
import { MetadataRTSelectModule, GSPMetadataRTServiceModule } from '@gsp-lcm/metadatart-selector';
import { ChgdrDataViewerComponent } from './chgdr-data-viewer/chgdr-data-viewer.component';
import zh from '@angular/common/locales/zh';
import { ChgdrListComponent } from './chgdr-list/chgdr-list.component';
import { ChgdrRowBaseinfoFormComponent } from './chgdr-row-baseinfo-form/chgdr-row-baseinfo-form.component';
import { ChgdrRowGridComponent } from './chgdr-row-grid/chgdr-row-grid.component';
import { ChgdrListUiService } from './service/chgdr-list-ui.service';
import { ChgdrListDialogContentComponent } from './chgdr-list-dialog-content/chgdr-list-dialog-content.component';
import { ChgdrHeaderDatagridComponent } from './chgdr-header-datagrid/chgdr-header-datagrid.component';
import { ChgdrMetadataService } from './service/chgdr-metadata.service';
import { ChgdrConfigService } from './service/chgdr-config.service';
import { ChgdrInnerService } from './service/chgdr-inner.service';
import { ChgdrService } from './service/chgdr.service';
import { I18nService } from './service/i18n-service';
registerLocaleData(zh);
export class ChgdrModule {
}
ChgdrModule.decorators = [
    { type: NgModule, args: [{
                declarations: [ChgdrDataViewerComponent, ChgdrListComponent, ChgdrRowBaseinfoFormComponent, ChgdrRowGridComponent, ChgdrListDialogContentComponent, ChgdrHeaderDatagridComponent],
                imports: [
                    CommonModule,
                    FormsModule,
                    TranslateModule.forRoot(),
                    SplitterModule,
                    AngularDraggableModule,
                    DatagridModule,
                    TreeTableModule,
                    FarrisSectionModule,
                    MessagerModule.forRoot(),
                    NotifyModule,
                    FarrisDialogModule,
                    FarrisDatePickerModule,
                    MetadataRTSelectModule,
                    GSPMetadataRTServiceModule.forRoot('')
                ],
                providers: [
                    MessagerService,
                    NotifyService,
                    HttpService,
                    SessionService,
                    CacheService,
                    ChgdrListUiService,
                    ChgdrMetadataService,
                    ChgdrConfigService,
                    ChgdrInnerService,
                    ChgdrService,
                    I18nService
                ],
                entryComponents: [
                    ChgdrDataViewerComponent,
                    ChgdrListComponent,
                    ChgdrListDialogContentComponent
                ],
                exports: [ChgdrDataViewerComponent, ChgdrListComponent, ChgdrHeaderDatagridComponent]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hnZHIubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1jbXAvY2hnZHIvIiwic291cmNlcyI6WyJsaWIvY2hnZHIubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLGtCQUFrQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFbkUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTdDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUV0RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDckQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN2RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsY0FBYyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDaEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdkQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFL0QsT0FBTyxFQUFFLFdBQVcsRUFBRSxjQUFjLEVBQUUsWUFBWSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDaEYsT0FBTyxFQUFFLHNCQUFzQixFQUE2QiwwQkFBMEIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRTdILE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGlEQUFpRCxDQUFDO0FBRTNGLE9BQU8sRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzVDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLDZEQUE2RCxDQUFDO0FBQzVHLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3JFLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLGlFQUFpRSxDQUFDO0FBQ2xILE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLHlEQUF5RCxDQUFDO0FBQ3ZHLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDckQsa0JBQWtCLENBQUMsRUFBRSxDQUFDLENBQUM7QUF3Q3ZCLE1BQU0sT0FBTyxXQUFXOzs7WUF0Q3ZCLFFBQVEsU0FBQztnQkFDUixZQUFZLEVBQUUsQ0FBQyx3QkFBd0IsRUFBRSxrQkFBa0IsRUFBRSw2QkFBNkIsRUFBRSxxQkFBcUIsRUFBRSwrQkFBK0IsRUFBRSw0QkFBNEIsQ0FBQztnQkFDakwsT0FBTyxFQUFFO29CQUNQLFlBQVk7b0JBQ1osV0FBVztvQkFDWCxlQUFlLENBQUMsT0FBTyxFQUFFO29CQUN6QixjQUFjO29CQUNkLHNCQUFzQjtvQkFDdEIsY0FBYztvQkFDZCxlQUFlO29CQUNmLG1CQUFtQjtvQkFDbkIsY0FBYyxDQUFDLE9BQU8sRUFBRTtvQkFDeEIsWUFBWTtvQkFDWixrQkFBa0I7b0JBQ2xCLHNCQUFzQjtvQkFDdEIsc0JBQXNCO29CQUN0QiwwQkFBMEIsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO2lCQUN2QztnQkFDRCxTQUFTLEVBQUU7b0JBQ1QsZUFBZTtvQkFDZixhQUFhO29CQUNiLFdBQVc7b0JBQ1gsY0FBYztvQkFDZCxZQUFZO29CQUNaLGtCQUFrQjtvQkFDbEIsb0JBQW9CO29CQUNwQixrQkFBa0I7b0JBQ2xCLGlCQUFpQjtvQkFDakIsWUFBWTtvQkFDWixXQUFXO2lCQUNaO2dCQUNELGVBQWUsRUFBRTtvQkFDZix3QkFBd0I7b0JBQ3hCLGtCQUFrQjtvQkFDbEIsK0JBQStCO2lCQUNoQztnQkFDRCxPQUFPLEVBQUUsQ0FBQyx3QkFBd0IsRUFBRSxrQkFBa0IsRUFBRSw0QkFBNEIsQ0FBQzthQUN0RiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbW1vbk1vZHVsZSwgcmVnaXN0ZXJMb2NhbGVEYXRhIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgSHR0cENsaWVudE1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcblxyXG5pbXBvcnQgeyBUcmFuc2xhdGVNb2R1bGUgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcclxuXHJcbmltcG9ydCB7IFNwbGl0dGVyTW9kdWxlIH0gZnJvbSBcIkBmYXJyaXMvdWktc3BsaXR0ZXJcIjtcclxuaW1wb3J0IHsgQW5ndWxhckRyYWdnYWJsZU1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktZHJhZ2dhYmxlJztcclxuaW1wb3J0IHsgRGF0YWdyaWRNb2R1bGUgfSBmcm9tIFwiQGZhcnJpcy91aS1kYXRhZ3JpZFwiO1xyXG5pbXBvcnQgeyBUcmVlVGFibGVNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLXRyZWV0YWJsZSc7XHJcbmltcG9ydCB7IEZhcnJpc1NlY3Rpb25Nb2R1bGUgfSBmcm9tIFwiQGZhcnJpcy91aS1zZWN0aW9uXCI7XHJcbmltcG9ydCB7IE1lc3NhZ2VyTW9kdWxlLCBNZXNzYWdlclNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLW1lc3NhZ2VyJztcclxuaW1wb3J0IHsgTm90aWZ5TW9kdWxlLCBOb3RpZnlTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1ub3RpZnknO1xyXG5pbXBvcnQgeyBGYXJyaXNEaWFsb2dNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWRpYWxvZyc7XHJcbmltcG9ydCB7IEZhcnJpc0RhdGVQaWNrZXJNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWRhdGVwaWNrZXInO1xyXG5cclxuaW1wb3J0IHsgSHR0cFNlcnZpY2UsIFNlc3Npb25TZXJ2aWNlLCBDYWNoZVNlcnZpY2UgfSBmcm9tICdAZWNwLWNhZi9jYWYtY29tbW9uJztcclxuaW1wb3J0IHsgTWV0YWRhdGFSVFNlbGVjdE1vZHVsZSwgU2VsZWN0TWV0YWRhdGFSVENvbXBvbmVudCwgR1NQTWV0YWRhdGFSVFNlcnZpY2VNb2R1bGUgfSBmcm9tICdAZ3NwLWxjbS9tZXRhZGF0YXJ0LXNlbGVjdG9yJztcclxuXHJcbmltcG9ydCB7IENoZ2RyRGF0YVZpZXdlckNvbXBvbmVudCB9IGZyb20gJy4vY2hnZHItZGF0YS12aWV3ZXIvY2hnZHItZGF0YS12aWV3ZXIuY29tcG9uZW50JztcclxuXHJcbmltcG9ydCB6aCBmcm9tICdAYW5ndWxhci9jb21tb24vbG9jYWxlcy96aCc7XHJcbmltcG9ydCB7IENoZ2RyTGlzdENvbXBvbmVudCB9IGZyb20gJy4vY2hnZHItbGlzdC9jaGdkci1saXN0LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IENoZ2RyUm93QmFzZWluZm9Gb3JtQ29tcG9uZW50IH0gZnJvbSAnLi9jaGdkci1yb3ctYmFzZWluZm8tZm9ybS9jaGdkci1yb3ctYmFzZWluZm8tZm9ybS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBDaGdkclJvd0dyaWRDb21wb25lbnQgfSBmcm9tICcuL2NoZ2RyLXJvdy1ncmlkL2NoZ2RyLXJvdy1ncmlkLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IENoZ2RyTGlzdFVpU2VydmljZSB9IGZyb20gJy4vc2VydmljZS9jaGdkci1saXN0LXVpLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBDaGdkckxpc3REaWFsb2dDb250ZW50Q29tcG9uZW50IH0gZnJvbSAnLi9jaGdkci1saXN0LWRpYWxvZy1jb250ZW50L2NoZ2RyLWxpc3QtZGlhbG9nLWNvbnRlbnQuY29tcG9uZW50JztcclxuaW1wb3J0IHsgQ2hnZHJIZWFkZXJEYXRhZ3JpZENvbXBvbmVudCB9IGZyb20gJy4vY2hnZHItaGVhZGVyLWRhdGFncmlkL2NoZ2RyLWhlYWRlci1kYXRhZ3JpZC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBDaGdkck1ldGFkYXRhU2VydmljZSB9IGZyb20gJy4vc2VydmljZS9jaGdkci1tZXRhZGF0YS5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ2hnZHJDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlL2NoZ2RyLWNvbmZpZy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ2hnZHJJbm5lclNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2UvY2hnZHItaW5uZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IENoZ2RyU2VydmljZSB9IGZyb20gJy4vc2VydmljZS9jaGdkci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgSTE4blNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2UvaTE4bi1zZXJ2aWNlJztcclxucmVnaXN0ZXJMb2NhbGVEYXRhKHpoKTtcclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbQ2hnZHJEYXRhVmlld2VyQ29tcG9uZW50LCBDaGdkckxpc3RDb21wb25lbnQsIENoZ2RyUm93QmFzZWluZm9Gb3JtQ29tcG9uZW50LCBDaGdkclJvd0dyaWRDb21wb25lbnQsIENoZ2RyTGlzdERpYWxvZ0NvbnRlbnRDb21wb25lbnQsIENoZ2RySGVhZGVyRGF0YWdyaWRDb21wb25lbnRdLFxyXG4gIGltcG9ydHM6IFtcclxuICAgIENvbW1vbk1vZHVsZSxcclxuICAgIEZvcm1zTW9kdWxlLFxyXG4gICAgVHJhbnNsYXRlTW9kdWxlLmZvclJvb3QoKSxcclxuICAgIFNwbGl0dGVyTW9kdWxlLFxyXG4gICAgQW5ndWxhckRyYWdnYWJsZU1vZHVsZSxcclxuICAgIERhdGFncmlkTW9kdWxlLFxyXG4gICAgVHJlZVRhYmxlTW9kdWxlLFxyXG4gICAgRmFycmlzU2VjdGlvbk1vZHVsZSxcclxuICAgIE1lc3NhZ2VyTW9kdWxlLmZvclJvb3QoKSxcclxuICAgIE5vdGlmeU1vZHVsZSxcclxuICAgIEZhcnJpc0RpYWxvZ01vZHVsZSxcclxuICAgIEZhcnJpc0RhdGVQaWNrZXJNb2R1bGUsXHJcbiAgICBNZXRhZGF0YVJUU2VsZWN0TW9kdWxlLFxyXG4gICAgR1NQTWV0YWRhdGFSVFNlcnZpY2VNb2R1bGUuZm9yUm9vdCgnJylcclxuICBdLFxyXG4gIHByb3ZpZGVyczogW1xyXG4gICAgTWVzc2FnZXJTZXJ2aWNlLFxyXG4gICAgTm90aWZ5U2VydmljZSxcclxuICAgIEh0dHBTZXJ2aWNlLFxyXG4gICAgU2Vzc2lvblNlcnZpY2UsXHJcbiAgICBDYWNoZVNlcnZpY2UsXHJcbiAgICBDaGdkckxpc3RVaVNlcnZpY2UsXHJcbiAgICBDaGdkck1ldGFkYXRhU2VydmljZSxcclxuICAgIENoZ2RyQ29uZmlnU2VydmljZSxcclxuICAgIENoZ2RySW5uZXJTZXJ2aWNlLFxyXG4gICAgQ2hnZHJTZXJ2aWNlLFxyXG4gICAgSTE4blNlcnZpY2VcclxuICBdLFxyXG4gIGVudHJ5Q29tcG9uZW50czogW1xyXG4gICAgQ2hnZHJEYXRhVmlld2VyQ29tcG9uZW50LFxyXG4gICAgQ2hnZHJMaXN0Q29tcG9uZW50LFxyXG4gICAgQ2hnZHJMaXN0RGlhbG9nQ29udGVudENvbXBvbmVudFxyXG4gIF0sXHJcbiAgZXhwb3J0czogW0NoZ2RyRGF0YVZpZXdlckNvbXBvbmVudCwgQ2hnZHJMaXN0Q29tcG9uZW50LCBDaGdkckhlYWRlckRhdGFncmlkQ29tcG9uZW50XVxyXG59KVxyXG5leHBvcnQgY2xhc3MgQ2hnZHJNb2R1bGUgeyB9XHJcbiJdfQ==