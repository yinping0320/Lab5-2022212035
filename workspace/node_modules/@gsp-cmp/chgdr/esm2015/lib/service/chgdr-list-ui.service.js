/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/chgdr-list-ui.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, ComponentFactoryResolver, Injector } from '@angular/core';
import { MessagerService } from '@farris/ui-messager';
import { BsModalService } from '@farris/ui-modal';
import { of } from 'rxjs';
import { ChgdrListDialogContentComponent } from '../chgdr-list-dialog-content/chgdr-list-dialog-content.component';
import { ChgdrListDialogConfig } from '../model/chgdr-ui-config';
import { I18nUtil } from './i18n-service';
import * as i0 from "@angular/core";
import * as i1 from "@farris/ui-modal";
import * as i2 from "@farris/ui-messager";
export class ChgdrListUiService {
    /**
     * @param {?} resolver
     * @param {?} injector
     * @param {?} modalService
     * @param {?} messagerService
     */
    constructor(resolver, injector, modalService, messagerService) {
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.messagerService = messagerService;
    }
    /**
     * @param {?} arg1
     * @param {?=} dataId
     * @return {?}
     */
    showDialog(arg1, dataId) {
        if (!arg1) {
            console.error("创建业务变更日志列表组件失败，业务实体不能为空，请检查", arg1, dataId);
            throw new Error("创建业务变更日志列表组件失败，业务实体不能为空，请检查");
        }
        if (arg1 instanceof String || typeof arg1 == "string") {
            /** @type {?} */
            let config = new ChgdrListDialogConfig();
            config.entityId = arg1.toString();
            config.dataId = dataId;
            this.create(config);
        }
        else {
            this.create(arg1);
        }
    }
    /**
     * @private
     * @param {?} config
     * @return {?}
     */
    create(config) {
        if (config.entityId == null) {
            console.error("创建业务变更日志列表组件失败，业务实体不能为空，请检查", config);
            throw new Error("创建业务变更日志列表组件失败，业务实体不能为空，请检查");
        }
        /** @type {?} */
        let fac = this.resolver.resolveComponentFactory(ChgdrListDialogContentComponent);
        /** @type {?} */
        let cmpRef = fac.create(this.injector);
        /** @type {?} */
        let modalConfig = {
            title: I18nUtil.instant("chgdr-list-dialog-title"),
            width: 1000,
            height: 550,
            resizable: true,
            showButtons: false,
            showMaxButton: true,
            beforeOpen: (/**
             * @return {?}
             */
            () => {
                return of(true);
            })
        };
        cmpRef.instance.entityId = config.entityId;
        cmpRef.instance.dataId = config.dataId;
        cmpRef.instance.beforeShowChangeDetail = config.beforeShowChangeDetail;
        /** @type {?} */
        let dialog = this.modalService.show(cmpRef, modalConfig);
    }
}
ChgdrListUiService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
ChgdrListUiService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: BsModalService },
    { type: MessagerService }
];
/** @nocollapse */ ChgdrListUiService.ngInjectableDef = i0.defineInjectable({ factory: function ChgdrListUiService_Factory() { return new ChgdrListUiService(i0.inject(i0.ComponentFactoryResolver), i0.inject(i0.INJECTOR), i0.inject(i1.BsModalService), i0.inject(i2.MessagerService)); }, token: ChgdrListUiService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    ChgdrListUiService.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    ChgdrListUiService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ChgdrListUiService.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    ChgdrListUiService.prototype.messagerService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hnZHItbGlzdC11aS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1jbXAvY2hnZHIvIiwic291cmNlcyI6WyJsaWIvc2VydmljZS9jaGdkci1saXN0LXVpLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLHdCQUF3QixFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGNBQWMsRUFBZ0IsTUFBTSxrQkFBa0IsQ0FBQztBQUNoRSxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzFCLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLGtFQUFrRSxDQUFDO0FBQ25ILE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQUcxQyxNQUFNLE9BQU8sa0JBQWtCOzs7Ozs7O0lBRTNCLFlBQ1ksUUFBa0MsRUFDbEMsUUFBa0IsRUFDbEIsWUFBNEIsRUFDNUIsZUFBZ0M7UUFIaEMsYUFBUSxHQUFSLFFBQVEsQ0FBMEI7UUFDbEMsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNsQixpQkFBWSxHQUFaLFlBQVksQ0FBZ0I7UUFDNUIsb0JBQWUsR0FBZixlQUFlLENBQWlCO0lBRTVDLENBQUM7Ozs7OztJQUlELFVBQVUsQ0FBQyxJQUFvQyxFQUFFLE1BQWU7UUFDNUQsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNQLE9BQU8sQ0FBQyxLQUFLLENBQUMsNkJBQTZCLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQzNELE1BQU0sSUFBSSxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztTQUNsRDtRQUNELElBQUksSUFBSSxZQUFZLE1BQU0sSUFBSSxPQUFPLElBQUksSUFBSSxRQUFRLEVBQUU7O2dCQUMvQyxNQUFNLEdBQUcsSUFBSSxxQkFBcUIsRUFBRTtZQUN4QyxNQUFNLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNsQyxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztZQUN2QixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDSCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3JCO0lBQ0wsQ0FBQzs7Ozs7O0lBRU8sTUFBTSxDQUFDLE1BQTZCO1FBQ3hDLElBQUksTUFBTSxDQUFDLFFBQVEsSUFBSSxJQUFJLEVBQUU7WUFDekIsT0FBTyxDQUFDLEtBQUssQ0FBQyw2QkFBNkIsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNyRCxNQUFNLElBQUksS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7U0FDbEQ7O1lBRUcsR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQUMsK0JBQStCLENBQUM7O1lBQzVFLE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7O1lBQ2xDLFdBQVcsR0FBaUI7WUFDNUIsS0FBSyxFQUFFLFFBQVEsQ0FBQyxPQUFPLENBQUMseUJBQXlCLENBQUM7WUFDbEQsS0FBSyxFQUFFLElBQUk7WUFDWCxNQUFNLEVBQUUsR0FBRztZQUNYLFNBQVMsRUFBRSxJQUFJO1lBQ2YsV0FBVyxFQUFFLEtBQUs7WUFDbEIsYUFBYSxFQUFFLElBQUk7WUFDbkIsVUFBVTs7O1lBQUUsR0FBRyxFQUFFO2dCQUNiLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3BCLENBQUMsQ0FBQTtTQUNKO1FBRUQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUMzQyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ3ZDLE1BQU0sQ0FBQyxRQUFRLENBQUMsc0JBQXNCLEdBQUcsTUFBTSxDQUFDLHNCQUFzQixDQUFDOztZQUNuRSxNQUFNLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQztJQUM1RCxDQUFDOzs7WUFwREosVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7OztZQVJiLHdCQUF3QjtZQUFFLFFBQVE7WUFFOUMsY0FBYztZQURkLGVBQWU7Ozs7Ozs7O0lBV2hCLHNDQUEwQzs7Ozs7SUFDMUMsc0NBQTBCOzs7OztJQUMxQiwwQ0FBb0M7Ozs7O0lBQ3BDLDZDQUF3QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTWVzc2FnZXJTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1tZXNzYWdlcic7XHJcbmltcG9ydCB7IEJzTW9kYWxTZXJ2aWNlLCBNb2RhbE9wdGlvbnMgfSBmcm9tICdAZmFycmlzL3VpLW1vZGFsJztcclxuaW1wb3J0IHsgb2YgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgQ2hnZHJMaXN0RGlhbG9nQ29udGVudENvbXBvbmVudCB9IGZyb20gJy4uL2NoZ2RyLWxpc3QtZGlhbG9nLWNvbnRlbnQvY2hnZHItbGlzdC1kaWFsb2ctY29udGVudC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBDaGdkckxpc3REaWFsb2dDb25maWcgfSBmcm9tICcuLi9tb2RlbC9jaGdkci11aS1jb25maWcnO1xyXG5pbXBvcnQgeyBJMThuVXRpbCB9IGZyb20gJy4vaTE4bi1zZXJ2aWNlJztcclxuXHJcbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXHJcbmV4cG9ydCBjbGFzcyBDaGdkckxpc3RVaVNlcnZpY2Uge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgcmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcclxuICAgICAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcixcclxuICAgICAgICBwcml2YXRlIG1vZGFsU2VydmljZTogQnNNb2RhbFNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBtZXNzYWdlclNlcnZpY2U6IE1lc3NhZ2VyU2VydmljZVxyXG4gICAgKSB7XHJcbiAgICB9XHJcblxyXG4gICAgc2hvd0RpYWxvZyhlbnRpdHlJZDogc3RyaW5nLCBkYXRhSWQ6IHN0cmluZylcclxuICAgIHNob3dEaWFsb2coY29uZmlnOiBDaGdkckxpc3REaWFsb2dDb25maWcpXHJcbiAgICBzaG93RGlhbG9nKGFyZzE6IHN0cmluZyB8IENoZ2RyTGlzdERpYWxvZ0NvbmZpZywgZGF0YUlkPzogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKCFhcmcxKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCLliJvlu7rkuJrliqHlj5jmm7Tml6Xlv5fliJfooajnu4Tku7blpLHotKXvvIzkuJrliqHlrp7kvZPkuI3og73kuLrnqbrvvIzor7fmo4Dmn6VcIiwgYXJnMSwgZGF0YUlkKTtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwi5Yib5bu65Lia5Yqh5Y+Y5pu05pel5b+X5YiX6KGo57uE5Lu25aSx6LSl77yM5Lia5Yqh5a6e5L2T5LiN6IO95Li656m677yM6K+35qOA5p+lXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJnMSBpbnN0YW5jZW9mIFN0cmluZyB8fCB0eXBlb2YgYXJnMSA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIGxldCBjb25maWcgPSBuZXcgQ2hnZHJMaXN0RGlhbG9nQ29uZmlnKCk7XHJcbiAgICAgICAgICAgIGNvbmZpZy5lbnRpdHlJZCA9IGFyZzEudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgY29uZmlnLmRhdGFJZCA9IGRhdGFJZDtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGUoY29uZmlnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZShhcmcxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjcmVhdGUoY29uZmlnOiBDaGdkckxpc3REaWFsb2dDb25maWcpIHtcclxuICAgICAgICBpZiAoY29uZmlnLmVudGl0eUlkID09IG51bGwpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIuWIm+W7uuS4muWKoeWPmOabtOaXpeW/l+WIl+ihqOe7hOS7tuWksei0pe+8jOS4muWKoeWunuS9k+S4jeiDveS4uuepuu+8jOivt+ajgOafpVwiLCBjb25maWcpO1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCLliJvlu7rkuJrliqHlj5jmm7Tml6Xlv5fliJfooajnu4Tku7blpLHotKXvvIzkuJrliqHlrp7kvZPkuI3og73kuLrnqbrvvIzor7fmo4Dmn6VcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgZmFjID0gdGhpcy5yZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShDaGdkckxpc3REaWFsb2dDb250ZW50Q29tcG9uZW50KTtcclxuICAgICAgICBsZXQgY21wUmVmID0gZmFjLmNyZWF0ZSh0aGlzLmluamVjdG9yKTtcclxuICAgICAgICBsZXQgbW9kYWxDb25maWc6IE1vZGFsT3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgdGl0bGU6IEkxOG5VdGlsLmluc3RhbnQoXCJjaGdkci1saXN0LWRpYWxvZy10aXRsZVwiKSxcclxuICAgICAgICAgICAgd2lkdGg6IDEwMDAsXHJcbiAgICAgICAgICAgIGhlaWdodDogNTUwLFxyXG4gICAgICAgICAgICByZXNpemFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIHNob3dCdXR0b25zOiBmYWxzZSxcclxuICAgICAgICAgICAgc2hvd01heEJ1dHRvbjogdHJ1ZSxcclxuICAgICAgICAgICAgYmVmb3JlT3BlbjogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9mKHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbXBSZWYuaW5zdGFuY2UuZW50aXR5SWQgPSBjb25maWcuZW50aXR5SWQ7XHJcbiAgICAgICAgY21wUmVmLmluc3RhbmNlLmRhdGFJZCA9IGNvbmZpZy5kYXRhSWQ7XHJcbiAgICAgICAgY21wUmVmLmluc3RhbmNlLmJlZm9yZVNob3dDaGFuZ2VEZXRhaWwgPSBjb25maWcuYmVmb3JlU2hvd0NoYW5nZURldGFpbDtcclxuICAgICAgICBsZXQgZGlhbG9nID0gdGhpcy5tb2RhbFNlcnZpY2Uuc2hvdyhjbXBSZWYsIG1vZGFsQ29uZmlnKTtcclxuICAgIH1cclxuXHJcbn1cclxuIl19