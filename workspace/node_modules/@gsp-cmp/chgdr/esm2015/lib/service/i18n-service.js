/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/i18n-service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { TranslateDefaultParser } from '@ngx-translate/core';
import { LangDataEn } from './i18n/en';
import { LangDataZhChs } from './i18n/zh-CHS';
import { LangDataZhCht } from './i18n/zh-CHT';
import * as i0 from "@angular/core";
/** @type {?} */
let I18nServiceInstance;
/** @type {?} */
let langResourceMap = new Map();
langResourceMap.set("en", LangDataEn);
langResourceMap.set("zh-CHS", LangDataZhChs);
langResourceMap.set("zh-CHT", LangDataZhCht);
/** @type {?} */
let currentLang = localStorage.getItem('languageCode');
if (!currentLang) {
    currentLang = "zh-CHS";
    console.log("未找到设置的语言，默认使用" + currentLang);
}
/** @type {?} */
let parser = new TranslateDefaultParser();
export class I18nUtil {
    /**
     * @param {?} key
     * @param {?=} param
     * @return {?}
     */
    static instant(key, param) {
        /** @type {?} */
        let statement = I18nUtil.getCurrentLangResource()[key];
        if (statement === undefined || statement === null) {
            return key;
        }
        /** @type {?} */
        let result = parser.interpolate(statement, param);
        if (result === undefined || result === null) {
            return key;
        }
        return result;
    }
    /**
     * @private
     * @return {?}
     */
    static getCurrentLangResource() {
        return langResourceMap.get(currentLang) || {};
    }
    /**
     * @param {?} key
     * @param {?} defaultText
     * @return {?}
     */
    static instantOrDefault(key, defaultText) {
        /** @type {?} */
        let statement = I18nUtil.getCurrentLangResource()[key];
        if (statement === undefined || statement === null) {
            return defaultText;
        }
        /** @type {?} */
        let result = parser.interpolate(statement);
        if (result === undefined || result === null) {
            return defaultText;
        }
        return result;
    }
}
export class I18nService {
    constructor() {
    }
    /**
     * @param {?} key
     * @param {?=} param
     * @return {?}
     */
    instant(key, param) {
        return I18nUtil.instant(key, param);
    }
    /**
     * @private
     * @return {?}
     */
    getCurrentLangResource() {
        return langResourceMap.get(currentLang) || {};
    }
    /**
     * @param {?} key
     * @param {?} defaultText
     * @return {?}
     */
    static staticInstant(key, defaultText) {
        return I18nUtil.instantOrDefault(key, defaultText);
    }
}
I18nService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
I18nService.ctorParameters = () => [];
/** @nocollapse */ I18nService.ngInjectableDef = i0.defineInjectable({ factory: function I18nService_Factory() { return new I18nService(); }, token: I18nService, providedIn: "root" });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaTE4bi1zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1jbXAvY2hnZHIvIiwic291cmNlcyI6WyJsaWIvc2VydmljZS9pMThuLXNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQXVCLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNoRSxPQUFPLEVBQUUsc0JBQXNCLEVBQXFDLE1BQU0scUJBQXFCLENBQUM7QUFDaEcsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN2QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxlQUFlLENBQUM7OztJQUUxQyxtQkFBd0I7O0lBRXhCLGVBQWUsR0FBcUIsSUFBSSxHQUFHLEVBQUU7QUFDakQsZUFBZSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDdEMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQUM7QUFDN0MsZUFBZSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQUM7O0lBRXpDLFdBQVcsR0FBVyxZQUFZLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQztBQUM5RCxJQUFJLENBQUMsV0FBVyxFQUFFO0lBQ2hCLFdBQVcsR0FBRyxRQUFRLENBQUM7SUFDdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEdBQUcsV0FBVyxDQUFDLENBQUM7Q0FDNUM7O0lBRUcsTUFBTSxHQUFvQixJQUFJLHNCQUFzQixFQUFFO0FBRTFELE1BQU0sT0FBTyxRQUFROzs7Ozs7SUFDWixNQUFNLENBQUMsT0FBTyxDQUFDLEdBQVcsRUFBRSxLQUFXOztZQUN4QyxTQUFTLEdBQUcsUUFBUSxDQUFDLHNCQUFzQixFQUFFLENBQUMsR0FBRyxDQUFDO1FBQ3RELElBQUksU0FBUyxLQUFLLFNBQVMsSUFBSSxTQUFTLEtBQUssSUFBSSxFQUFFO1lBQ2pELE9BQU8sR0FBRyxDQUFDO1NBQ1o7O1lBRUcsTUFBTSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQztRQUNqRCxJQUFJLE1BQU0sS0FBSyxTQUFTLElBQUksTUFBTSxLQUFLLElBQUksRUFBRTtZQUMzQyxPQUFPLEdBQUcsQ0FBQztTQUNaO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQzs7Ozs7SUFFTyxNQUFNLENBQUMsc0JBQXNCO1FBQ25DLE9BQU8sZUFBZSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDaEQsQ0FBQzs7Ozs7O0lBRU0sTUFBTSxDQUFDLGdCQUFnQixDQUFDLEdBQVcsRUFBRSxXQUFtQjs7WUFDekQsU0FBUyxHQUFHLFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLEdBQUcsQ0FBQztRQUN0RCxJQUFJLFNBQVMsS0FBSyxTQUFTLElBQUksU0FBUyxLQUFLLElBQUksRUFBRTtZQUNqRCxPQUFPLFdBQVcsQ0FBQztTQUNwQjs7WUFFRyxNQUFNLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUM7UUFDMUMsSUFBSSxNQUFNLEtBQUssU0FBUyxJQUFJLE1BQU0sS0FBSyxJQUFJLEVBQUU7WUFDM0MsT0FBTyxXQUFXLENBQUM7U0FDcEI7UUFFRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0NBQ0Y7QUFHRCxNQUFNLE9BQU8sV0FBVztJQUV0QjtJQUNBLENBQUM7Ozs7OztJQUVNLE9BQU8sQ0FBQyxHQUFXLEVBQUUsS0FBVztRQUNyQyxPQUFPLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3RDLENBQUM7Ozs7O0lBRU8sc0JBQXNCO1FBQzVCLE9BQU8sZUFBZSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDaEQsQ0FBQzs7Ozs7O0lBRU0sTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFXLEVBQUUsV0FBbUI7UUFDMUQsT0FBTyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ3JELENBQUM7OztZQWhCRixVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBUcmFuc2xhdGVEZWZhdWx0UGFyc2VyLCBUcmFuc2xhdGVQYXJzZXIsIFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJztcclxuaW1wb3J0IHsgTGFuZ0RhdGFFbiB9IGZyb20gJy4vaTE4bi9lbic7XHJcbmltcG9ydCB7IExhbmdEYXRhWmhDaHMgfSBmcm9tICcuL2kxOG4vemgtQ0hTJztcclxuaW1wb3J0IHsgTGFuZ0RhdGFaaENodCB9IGZyb20gJy4vaTE4bi96aC1DSFQnO1xyXG5cclxubGV0IEkxOG5TZXJ2aWNlSW5zdGFuY2U6IGFueTtcclxuXHJcbmxldCBsYW5nUmVzb3VyY2VNYXA6IE1hcDxzdHJpbmcsIGFueT4gPSBuZXcgTWFwKCk7XHJcbmxhbmdSZXNvdXJjZU1hcC5zZXQoXCJlblwiLCBMYW5nRGF0YUVuKTtcclxubGFuZ1Jlc291cmNlTWFwLnNldChcInpoLUNIU1wiLCBMYW5nRGF0YVpoQ2hzKTtcclxubGFuZ1Jlc291cmNlTWFwLnNldChcInpoLUNIVFwiLCBMYW5nRGF0YVpoQ2h0KTtcclxuXHJcbmxldCBjdXJyZW50TGFuZzogc3RyaW5nID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2xhbmd1YWdlQ29kZScpO1xyXG5pZiAoIWN1cnJlbnRMYW5nKSB7XHJcbiAgY3VycmVudExhbmcgPSBcInpoLUNIU1wiO1xyXG4gIGNvbnNvbGUubG9nKFwi5pyq5om+5Yiw6K6+572u55qE6K+t6KiA77yM6buY6K6k5L2/55SoXCIgKyBjdXJyZW50TGFuZyk7XHJcbn1cclxuXHJcbmxldCBwYXJzZXI6IFRyYW5zbGF0ZVBhcnNlciA9IG5ldyBUcmFuc2xhdGVEZWZhdWx0UGFyc2VyKCk7XHJcblxyXG5leHBvcnQgY2xhc3MgSTE4blV0aWwge1xyXG4gIHB1YmxpYyBzdGF0aWMgaW5zdGFudChrZXk6IHN0cmluZywgcGFyYW0/OiBhbnkpOiBzdHJpbmcge1xyXG4gICAgbGV0IHN0YXRlbWVudCA9IEkxOG5VdGlsLmdldEN1cnJlbnRMYW5nUmVzb3VyY2UoKVtrZXldO1xyXG4gICAgaWYgKHN0YXRlbWVudCA9PT0gdW5kZWZpbmVkIHx8IHN0YXRlbWVudCA9PT0gbnVsbCkge1xyXG4gICAgICByZXR1cm4ga2V5O1xyXG4gICAgfVxyXG5cclxuICAgIGxldCByZXN1bHQgPSBwYXJzZXIuaW50ZXJwb2xhdGUoc3RhdGVtZW50LCBwYXJhbSk7XHJcbiAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQgfHwgcmVzdWx0ID09PSBudWxsKSB7XHJcbiAgICAgIHJldHVybiBrZXk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3RhdGljIGdldEN1cnJlbnRMYW5nUmVzb3VyY2UoKSB7XHJcbiAgICByZXR1cm4gbGFuZ1Jlc291cmNlTWFwLmdldChjdXJyZW50TGFuZykgfHwge307XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGluc3RhbnRPckRlZmF1bHQoa2V5OiBzdHJpbmcsIGRlZmF1bHRUZXh0OiBzdHJpbmcpIHtcclxuICAgIGxldCBzdGF0ZW1lbnQgPSBJMThuVXRpbC5nZXRDdXJyZW50TGFuZ1Jlc291cmNlKClba2V5XTtcclxuICAgIGlmIChzdGF0ZW1lbnQgPT09IHVuZGVmaW5lZCB8fCBzdGF0ZW1lbnQgPT09IG51bGwpIHtcclxuICAgICAgcmV0dXJuIGRlZmF1bHRUZXh0O1xyXG4gICAgfVxyXG5cclxuICAgIGxldCByZXN1bHQgPSBwYXJzZXIuaW50ZXJwb2xhdGUoc3RhdGVtZW50KTtcclxuICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCB8fCByZXN1bHQgPT09IG51bGwpIHtcclxuICAgICAgcmV0dXJuIGRlZmF1bHRUZXh0O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG59XHJcblxyXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxyXG5leHBvcnQgY2xhc3MgSTE4blNlcnZpY2Uge1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBpbnN0YW50KGtleTogc3RyaW5nLCBwYXJhbT86IGFueSk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gSTE4blV0aWwuaW5zdGFudChrZXksIHBhcmFtKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0Q3VycmVudExhbmdSZXNvdXJjZSgpIHtcclxuICAgIHJldHVybiBsYW5nUmVzb3VyY2VNYXAuZ2V0KGN1cnJlbnRMYW5nKSB8fCB7fTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgc3RhdGljSW5zdGFudChrZXk6IHN0cmluZywgZGVmYXVsdFRleHQ6IHN0cmluZykge1xyXG4gICAgcmV0dXJuIEkxOG5VdGlsLmluc3RhbnRPckRlZmF1bHQoa2V5LCBkZWZhdWx0VGV4dCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==