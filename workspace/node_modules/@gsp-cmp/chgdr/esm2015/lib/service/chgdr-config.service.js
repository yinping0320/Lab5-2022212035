/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/chgdr-config.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector } from '@angular/core';
import { HttpService, SessionService } from '@ecp-caf/caf-common';
import { tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@ecp-caf/caf-common";
/** @type {?} */
const CHGDR_CONFIG_ROUTER = '/api/runtime/bcc/v1.0/chgdr/config';
/** @type {?} */
const CHGDR_CONFIG_GET_BY_BIZOBJID_AND_MODELID = `${CHGDR_CONFIG_ROUTER}/{bizObjId}/{modelId}`;
/** @type {?} */
const ServerIP = '/';
/** @type {?} */
const chgdrUrl = `${ServerIP}api/runtime/chgdr/v1.0`;
export class ChgdrConfigService {
    /**
     * @param {?} http
     * @param {?} sessionService
     * @param {?} injector
     */
    constructor(http, sessionService, injector) {
        this.http = http;
        this.sessionService = sessionService;
        this.injector = injector;
    }
    /**
     * 根据业务实体ID获取所有的配置信息
     * @param {?} beId
     * @return {?}
     */
    getBeChgdrConfig(beId) {
        /** @type {?} */
        let queryUrl = `${chgdrUrl}/config?beId=${beId}`;
        return ((/** @type {?} */ ((/** @type {?} */ (this.http.get(queryUrl)))))).pipe(tap((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            /** @type {?} */
            let configEntities = data || [];
            configEntities.forEach((/**
             * @param {?} entity
             * @return {?}
             */
            entity => {
                //处理字段顺序号
                /** @type {?} */
                let fields = entity.fields || [];
                //赋予老数据默认顺序号
                fields.forEach((/**
                 * @param {?} field
                 * @param {?} index
                 * @return {?}
                 */
                (field, index) => {
                    if (field.showIndex === undefined || field.showIndex === null) {
                        field.showIndex = index;
                    }
                }));
                //按照顺序号排序
                entity.fields = fields.sort((/**
                 * @param {?} a
                 * @param {?} b
                 * @return {?}
                 */
                (a, b) => a.showIndex - b.showIndex));
                //根据排序结果重置顺序号
                fields.forEach((/**
                 * @param {?} field
                 * @param {?} index
                 * @return {?}
                 */
                (field, index) => {
                    field.showIndex = index;
                }));
            }));
        })));
    }
}
ChgdrConfigService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
ChgdrConfigService.ctorParameters = () => [
    { type: HttpService },
    { type: SessionService },
    { type: Injector }
];
/** @nocollapse */ ChgdrConfigService.ngInjectableDef = i0.defineInjectable({ factory: function ChgdrConfigService_Factory() { return new ChgdrConfigService(i0.inject(i1.HttpService), i0.inject(i1.SessionService), i0.inject(i0.INJECTOR)); }, token: ChgdrConfigService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    ChgdrConfigService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    ChgdrConfigService.prototype.sessionService;
    /**
     * @type {?}
     * @private
     */
    ChgdrConfigService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hnZHItY29uZmlnLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLWNtcC9jaGdkci8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlL2NoZ2RyLWNvbmZpZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFckQsT0FBTyxFQUFFLFdBQVcsRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVsRSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7TUFLL0IsbUJBQW1CLEdBQUcsb0NBQW9DOztNQUMxRCx3Q0FBd0MsR0FBRyxHQUFHLG1CQUFtQix1QkFBdUI7O01BRXhGLFFBQVEsR0FBRyxHQUFHOztNQUNkLFFBQVEsR0FBRyxHQUFHLFFBQVEsd0JBQXdCO0FBR3BELE1BQU0sT0FBTyxrQkFBa0I7Ozs7OztJQUUzQixZQUFvQixJQUFpQixFQUN6QixjQUE4QixFQUM5QixRQUFrQjtRQUZWLFNBQUksR0FBSixJQUFJLENBQWE7UUFDekIsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQzlCLGFBQVEsR0FBUixRQUFRLENBQVU7SUFDOUIsQ0FBQzs7Ozs7O0lBS0QsZ0JBQWdCLENBQUMsSUFBWTs7WUFDckIsUUFBUSxHQUFHLEdBQUcsUUFBUSxnQkFBZ0IsSUFBSSxFQUFFO1FBQ2hELE9BQU8sQ0FBQyxtQkFBa0MsbUJBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUEsRUFBQSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUc7Ozs7UUFBQyxJQUFJLENBQUMsRUFBRTs7Z0JBQ3BGLGNBQWMsR0FBeUIsSUFBSSxJQUFJLEVBQUU7WUFDckQsY0FBYyxDQUFDLE9BQU87Ozs7WUFBQyxNQUFNLENBQUMsRUFBRTs7O29CQUV4QixNQUFNLEdBQTZCLE1BQU0sQ0FBQyxNQUFNLElBQUksRUFBRTtnQkFDMUQsWUFBWTtnQkFDWixNQUFNLENBQUMsT0FBTzs7Ozs7Z0JBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUU7b0JBQzVCLElBQUksS0FBSyxDQUFDLFNBQVMsS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLFNBQVMsS0FBSyxJQUFJLEVBQUU7d0JBQzNELEtBQUssQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO3FCQUMzQjtnQkFDTCxDQUFDLEVBQUMsQ0FBQztnQkFDSCxTQUFTO2dCQUNULE1BQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUk7Ozs7O2dCQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxFQUFDLENBQUM7Z0JBQ2pFLGFBQWE7Z0JBQ2IsTUFBTSxDQUFDLE9BQU87Ozs7O2dCQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFO29CQUM1QixLQUFLLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztnQkFDNUIsQ0FBQyxFQUFDLENBQUE7WUFDTixDQUFDLEVBQUMsQ0FBQTtRQUNOLENBQUMsRUFBQyxDQUFDLENBQUM7SUFDUixDQUFDOzs7WUFoQ0osVUFBVSxTQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRTs7OztZQWJ6QixXQUFXO1lBQUUsY0FBYztZQUZmLFFBQVE7Ozs7Ozs7O0lBa0JiLGtDQUF5Qjs7Ozs7SUFDakMsNENBQXNDOzs7OztJQUN0QyxzQ0FBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwSGVhZGVycywgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgSHR0cFNlcnZpY2UsIFNlc3Npb25TZXJ2aWNlIH0gZnJvbSAnQGVjcC1jYWYvY2FmLWNvbW1vbic7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgQ2hnTG9nQ29uZmlnRW50aXR5IH0gZnJvbSAnLi4vbW9kZWwvY2hnZHItY29uZmlnLWVudGl0eSc7XHJcbmltcG9ydCB7IENoZ0xvZ0NvbmZpZ0ZpZWxkIH0gZnJvbSAnLi4vbW9kZWwvY2hnZHItY29uZmlnLWZpZWxkJztcclxuaW1wb3J0IHsgQ2hnZHJJbm5lclNlcnZpY2UgfSBmcm9tICcuL2NoZ2RyLWlubmVyLnNlcnZpY2UnO1xyXG5cclxuY29uc3QgQ0hHRFJfQ09ORklHX1JPVVRFUiA9ICcvYXBpL3J1bnRpbWUvYmNjL3YxLjAvY2hnZHIvY29uZmlnJztcclxuY29uc3QgQ0hHRFJfQ09ORklHX0dFVF9CWV9CSVpPQkpJRF9BTkRfTU9ERUxJRCA9IGAke0NIR0RSX0NPTkZJR19ST1VURVJ9L3tiaXpPYmpJZH0ve21vZGVsSWR9YDtcclxuXHJcbmNvbnN0IFNlcnZlcklQID0gJy8nO1xyXG5jb25zdCBjaGdkclVybCA9IGAke1NlcnZlcklQfWFwaS9ydW50aW1lL2NoZ2RyL3YxLjBgO1xyXG5cclxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcclxuZXhwb3J0IGNsYXNzIENoZ2RyQ29uZmlnU2VydmljZSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIHNlc3Npb25TZXJ2aWNlOiBTZXNzaW9uU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3Rvcikge1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5qC55o2u5Lia5Yqh5a6e5L2TSUTojrflj5bmiYDmnInnmoTphY3nva7kv6Hmga9cclxuICAgICAqL1xyXG4gICAgZ2V0QmVDaGdkckNvbmZpZyhiZUlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPENoZ0xvZ0NvbmZpZ0VudGl0eVtdPiB7XHJcbiAgICAgICAgbGV0IHF1ZXJ5VXJsID0gYCR7Y2hnZHJVcmx9L2NvbmZpZz9iZUlkPSR7YmVJZH1gO1xyXG4gICAgICAgIHJldHVybiAoPE9ic2VydmFibGU8Q2hnTG9nQ29uZmlnRW50aXR5W10+Pjx1bmtub3duPnRoaXMuaHR0cC5nZXQocXVlcnlVcmwpKS5waXBlKHRhcChkYXRhID0+IHtcclxuICAgICAgICAgICAgbGV0IGNvbmZpZ0VudGl0aWVzOiBDaGdMb2dDb25maWdFbnRpdHlbXSA9IGRhdGEgfHwgW107XHJcbiAgICAgICAgICAgIGNvbmZpZ0VudGl0aWVzLmZvckVhY2goZW50aXR5ID0+IHtcclxuICAgICAgICAgICAgICAgIC8v5aSE55CG5a2X5q616aG65bqP5Y+3XHJcbiAgICAgICAgICAgICAgICBsZXQgZmllbGRzOiBBcnJheTxDaGdMb2dDb25maWdGaWVsZD4gPSBlbnRpdHkuZmllbGRzIHx8IFtdO1xyXG4gICAgICAgICAgICAgICAgLy/otYvkuojogIHmlbDmja7pu5jorqTpobrluo/lj7dcclxuICAgICAgICAgICAgICAgIGZpZWxkcy5mb3JFYWNoKChmaWVsZCwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGQuc2hvd0luZGV4ID09PSB1bmRlZmluZWQgfHwgZmllbGQuc2hvd0luZGV4ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkLnNob3dJbmRleCA9IGluZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgLy/mjInnhafpobrluo/lj7fmjpLluo9cclxuICAgICAgICAgICAgICAgIGVudGl0eS5maWVsZHMgPSBmaWVsZHMuc29ydCgoYSwgYikgPT4gYS5zaG93SW5kZXggLSBiLnNob3dJbmRleCk7XHJcbiAgICAgICAgICAgICAgICAvL+agueaNruaOkuW6j+e7k+aenOmHjee9rumhuuW6j+WPt1xyXG4gICAgICAgICAgICAgICAgZmllbGRzLmZvckVhY2goKGZpZWxkLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpZWxkLnNob3dJbmRleCA9IGluZGV4O1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbn0iXX0=