/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/chgdr-inner.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector } from '@angular/core';
import { HttpService, SessionService } from '@ecp-caf/caf-common';
import { GSPMetadataRTService } from '@gsp-lcm/metadatart-selector';
import { forkJoin, of } from 'rxjs';
import { map } from 'rxjs/operators';
import { ChgdrConfigHandler } from './chgdr-config-handler';
import { ChgdrConfigService } from './chgdr-config.service';
import { ChgdrMetadataService } from './chgdr-metadata.service';
import * as i0 from "@angular/core";
import * as i1 from "@ecp-caf/caf-common";
import * as i2 from "@gsp-lcm/metadatart-selector";
import * as i3 from "./chgdr-metadata.service";
import * as i4 from "./chgdr-config.service";
export class ChgdrInnerService {
    /**
     * @param {?} http
     * @param {?} sessionService
     * @param {?} metadataService
     * @param {?} chgdrMetadataService
     * @param {?} chgdrConfigService
     * @param {?} injector
     */
    constructor(http, sessionService, metadataService, chgdrMetadataService, chgdrConfigService, injector) {
        this.http = http;
        this.sessionService = sessionService;
        this.metadataService = metadataService;
        this.chgdrMetadataService = chgdrMetadataService;
        this.chgdrConfigService = chgdrConfigService;
        this.injector = injector;
        this.beMetadataCache = new Map();
    }
    /**
     * 获取BE元数据
     * @param {?} beId
     * @return {?}
     */
    getChgdrConfigHandler(beId) {
        if (this.beMetadataCache.has(beId)) {
            /** @type {?} */
            let be = this.beMetadataCache.get(beId);
            return of(be);
        }
        else {
            /** @type {?} */
            let requests = [];
            requests.push(this.chgdrMetadataService.getGSPBusinessEntity(beId));
            requests.push(this.chgdrConfigService.getBeChgdrConfig(beId));
            return forkJoin(requests).pipe(map((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                /** @type {?} */
                const be = data[0];
                /** @type {?} */
                const entityConfigs = data[1] || [];
                /** @type {?} */
                const handler = new ChgdrConfigHandler(be, entityConfigs);
                this.beMetadataCache.set(beId, handler);
                return handler;
            })));
        }
    }
}
ChgdrInnerService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
ChgdrInnerService.ctorParameters = () => [
    { type: HttpService },
    { type: SessionService },
    { type: GSPMetadataRTService },
    { type: ChgdrMetadataService },
    { type: ChgdrConfigService },
    { type: Injector }
];
/** @nocollapse */ ChgdrInnerService.ngInjectableDef = i0.defineInjectable({ factory: function ChgdrInnerService_Factory() { return new ChgdrInnerService(i0.inject(i1.HttpService), i0.inject(i1.SessionService), i0.inject(i2.GSPMetadataRTService), i0.inject(i3.ChgdrMetadataService), i0.inject(i4.ChgdrConfigService), i0.inject(i0.INJECTOR)); }, token: ChgdrInnerService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    ChgdrInnerService.prototype.beMetadataCache;
    /**
     * @type {?}
     * @private
     */
    ChgdrInnerService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    ChgdrInnerService.prototype.sessionService;
    /**
     * @type {?}
     * @private
     */
    ChgdrInnerService.prototype.metadataService;
    /**
     * @type {?}
     * @private
     */
    ChgdrInnerService.prototype.chgdrMetadataService;
    /**
     * @type {?}
     * @private
     */
    ChgdrInnerService.prototype.chgdrConfigService;
    /**
     * @type {?}
     * @private
     */
    ChgdrInnerService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hnZHItaW5uZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3AtY21wL2NoZ2RyLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2UvY2hnZHItaW5uZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxXQUFXLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFbEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDcEUsT0FBTyxFQUFFLFFBQVEsRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDaEQsT0FBTyxFQUFFLEdBQUcsRUFBTyxNQUFNLGdCQUFnQixDQUFDO0FBTzFDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDOzs7Ozs7QUFHaEUsTUFBTSxPQUFPLGlCQUFpQjs7Ozs7Ozs7O0lBRzFCLFlBQW9CLElBQWlCLEVBQ3pCLGNBQThCLEVBQzlCLGVBQXFDLEVBQ3JDLG9CQUEwQyxFQUMxQyxrQkFBc0MsRUFDdEMsUUFBa0I7UUFMVixTQUFJLEdBQUosSUFBSSxDQUFhO1FBQ3pCLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQUM5QixvQkFBZSxHQUFmLGVBQWUsQ0FBc0I7UUFDckMseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFzQjtRQUMxQyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO1FBQ3RDLGFBQVEsR0FBUixRQUFRLENBQVU7UUFQdEIsb0JBQWUsR0FBb0MsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQVFqRSxDQUFDOzs7Ozs7SUFHRSxxQkFBcUIsQ0FBQyxJQUFZO1FBQ3JDLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7O2dCQUM1QixFQUFFLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO1lBQ3ZDLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ2pCO2FBQU07O2dCQUNDLFFBQVEsR0FBRyxFQUFFO1lBQ2pCLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDcEUsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUU5RCxPQUFPLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRzs7OztZQUFDLElBQUksQ0FBQyxFQUFFOztzQkFDaEMsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7O3NCQUNaLGFBQWEsR0FBeUIsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUU7O3NCQUNuRCxPQUFPLEdBQUcsSUFBSSxrQkFBa0IsQ0FBQyxFQUFFLEVBQUUsYUFBYSxDQUFDO2dCQUN6RCxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7Z0JBQ3hDLE9BQU8sT0FBTyxDQUFDO1lBQ25CLENBQUMsRUFBQyxDQUFDLENBQUM7U0FDUDtJQUNMLENBQUM7OztZQTlCSixVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzs7O1lBZnpCLFdBQVc7WUFBRSxjQUFjO1lBRTNCLG9CQUFvQjtZQVdwQixvQkFBb0I7WUFEcEIsa0JBQWtCO1lBYk4sUUFBUTs7Ozs7Ozs7SUFrQnpCLDRDQUFxRTs7Ozs7SUFFekQsaUNBQXlCOzs7OztJQUNqQywyQ0FBc0M7Ozs7O0lBQ3RDLDRDQUE2Qzs7Ozs7SUFDN0MsaURBQWtEOzs7OztJQUNsRCwrQ0FBOEM7Ozs7O0lBQzlDLHFDQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEh0dHBTZXJ2aWNlLCBTZXNzaW9uU2VydmljZSB9IGZyb20gJ0BlY3AtY2FmL2NhZi1jb21tb24nO1xyXG5pbXBvcnQgeyBHU1BCdXNpbmVzc0VudGl0eSB9IGZyb20gJ0Bnc3AtYmVmL2dzcC1iZS1tZXRhZGF0YSc7XHJcbmltcG9ydCB7IEdTUE1ldGFkYXRhUlRTZXJ2aWNlIH0gZnJvbSAnQGdzcC1sY20vbWV0YWRhdGFydC1zZWxlY3Rvcic7XHJcbmltcG9ydCB7IGZvcmtKb2luLCBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtYXAsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgQ2hhbmdlRGF0YUhlYWRlciB9IGZyb20gJy4uL21vZGVsL2NoYW5nZS1kYXRhLWhlYWRlcic7XHJcbmltcG9ydCB7IENoYW5nZURhdGFRdWVyeVBhcmFtIH0gZnJvbSAnLi4vbW9kZWwvY2hhbmdlLWRhdGEtcXVlcnktcGFyYW0nO1xyXG5pbXBvcnQgeyBDaGdMb2dDb25maWdFbnRpdHkgfSBmcm9tICcuLi9tb2RlbC9jaGdkci1jb25maWctZW50aXR5JztcclxuaW1wb3J0IHsgQ2hnTG9nQ29uZmlnRmllbGQgfSBmcm9tICcuLi9tb2RlbC9jaGdkci1jb25maWctZmllbGQnO1xyXG5pbXBvcnQgeyBPcGVyYXRlVHlwZSB9IGZyb20gJy4uL21vZGVsL29wZXJhdGUtdHlwZSc7XHJcbmltcG9ydCB7IE1hcFV0aWwgfSBmcm9tICcuLi91dGlsL21hcC51dGlsJztcclxuaW1wb3J0IHsgQ2hnZHJDb25maWdIYW5kbGVyIH0gZnJvbSAnLi9jaGdkci1jb25maWctaGFuZGxlcic7XHJcbmltcG9ydCB7IENoZ2RyQ29uZmlnU2VydmljZSB9IGZyb20gJy4vY2hnZHItY29uZmlnLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBDaGdkck1ldGFkYXRhU2VydmljZSB9IGZyb20gJy4vY2hnZHItbWV0YWRhdGEuc2VydmljZSc7XHJcblxyXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxyXG5leHBvcnQgY2xhc3MgQ2hnZHJJbm5lclNlcnZpY2Uge1xyXG4gICAgcHJpdmF0ZSBiZU1ldGFkYXRhQ2FjaGU6IE1hcDxzdHJpbmcsIENoZ2RyQ29uZmlnSGFuZGxlcj4gPSBuZXcgTWFwKCk7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIHNlc3Npb25TZXJ2aWNlOiBTZXNzaW9uU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIG1ldGFkYXRhU2VydmljZTogR1NQTWV0YWRhdGFSVFNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBjaGdkck1ldGFkYXRhU2VydmljZTogQ2hnZHJNZXRhZGF0YVNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBjaGdkckNvbmZpZ1NlcnZpY2U6IENoZ2RyQ29uZmlnU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvclxyXG4gICAgKSB7IH1cclxuXHJcbiAgICAvKiog6I635Y+WQkXlhYPmlbDmja4gKi9cclxuICAgIHB1YmxpYyBnZXRDaGdkckNvbmZpZ0hhbmRsZXIoYmVJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxDaGdkckNvbmZpZ0hhbmRsZXI+IHtcclxuICAgICAgICBpZiAodGhpcy5iZU1ldGFkYXRhQ2FjaGUuaGFzKGJlSWQpKSB7XHJcbiAgICAgICAgICAgIGxldCBiZSA9IHRoaXMuYmVNZXRhZGF0YUNhY2hlLmdldChiZUlkKTtcclxuICAgICAgICAgICAgcmV0dXJuIG9mKGJlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsZXQgcmVxdWVzdHMgPSBbXTtcclxuICAgICAgICAgICAgcmVxdWVzdHMucHVzaCh0aGlzLmNoZ2RyTWV0YWRhdGFTZXJ2aWNlLmdldEdTUEJ1c2luZXNzRW50aXR5KGJlSWQpKTtcclxuICAgICAgICAgICAgcmVxdWVzdHMucHVzaCh0aGlzLmNoZ2RyQ29uZmlnU2VydmljZS5nZXRCZUNoZ2RyQ29uZmlnKGJlSWQpKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBmb3JrSm9pbihyZXF1ZXN0cykucGlwZShtYXAoZGF0YSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBiZSA9IGRhdGFbMF07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlbnRpdHlDb25maWdzOiBDaGdMb2dDb25maWdFbnRpdHlbXSA9IGRhdGFbMV0gfHwgW107XHJcbiAgICAgICAgICAgICAgICBjb25zdCBoYW5kbGVyID0gbmV3IENoZ2RyQ29uZmlnSGFuZGxlcihiZSwgZW50aXR5Q29uZmlncyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJlTWV0YWRhdGFDYWNoZS5zZXQoYmVJZCwgaGFuZGxlcik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlcjtcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=