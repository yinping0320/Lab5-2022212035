/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/chgdr.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector } from '@angular/core';
import { HttpService, SessionService } from '@ecp-caf/caf-common';
import { of } from 'rxjs';
import { map, tap } from 'rxjs/operators';
import { OperateType } from '../model/operate-type';
import { MapUtil } from '../util/map.util';
import * as i0 from "@angular/core";
import * as i1 from "@ecp-caf/caf-common";
/** @type {?} */
const ServerIP = '/';
/** @type {?} */
const chgdrUrl = `${ServerIP}api/runtime/chgdr/v1.0`;
export class ChgdrService {
    /**
     * @param {?} http
     * @param {?} sessionService
     * @param {?} injector
     */
    constructor(http, sessionService, injector) {
        this.http = http;
        this.sessionService = sessionService;
        this.injector = injector;
        this.rootDataCodeFieldsMap = new Map();
    }
    /**
     * @param {?} currentQueryParam
     * @return {?}
     */
    queryChangeDataHeader(currentQueryParam) {
        /** @type {?} */
        let obj = Object.assign({}, currentQueryParam);
        if (currentQueryParam.dataCode) {
            obj.dataCode = MapUtil.convertMapToObject(currentQueryParam.dataCode);
        }
        /** @type {?} */
        let json = JSON.stringify(obj);
        /** @type {?} */
        let queryParam = encodeURIComponent(json);
        /** @type {?} */
        let url = `${chgdrUrl}?queryParam=${queryParam}`;
        return this.http.get(url).pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            if (!data) {
                return data;
            }
            /** @type {?} */
            let queryResult = (/** @type {?} */ ((/** @type {?} */ (data))));
            queryResult && queryResult.headers && queryResult.headers.forEach((/**
             * @param {?} header
             * @return {?}
             */
            header => {
                //TODO 待删，兼容老数据格式
                if (typeof header.dataCode == "string") {
                    header.dataCode = JSON.parse(header.dataCode);
                }
                header.dataCode = MapUtil.convertObjectToMap(header.dataCode);
                header.changeTime = this.toDate(header.changeTime);
                header.operateType = OperateType.parse(header.operateType);
            }));
            return queryResult;
        })));
    }
    /**
     * @param {?} beId
     * @return {?}
     */
    getRootEntityDataCodeFields(beId) {
        if (!beId) {
            return of([]);
        }
        if (this.rootDataCodeFieldsMap.has(beId)) {
            //直接从缓存中获取
            return of(this.rootDataCodeFieldsMap.get(beId));
        }
        else {
            //获取结果并存入缓存
            /** @type {?} */
            let url = `${chgdrUrl}/rootDataCodeFields?beId=${beId}`;
            return ((/** @type {?} */ ((/** @type {?} */ ((this.http.get(url)))))))
                .pipe(tap((/**
             * @param {?} data
             * @return {?}
             */
            data => this.rootDataCodeFieldsMap.set(beId, data))));
        }
    }
    /**
     * 将字符串或数字转为Date
     * @private
     * @param {?} date
     * @return {?}
     */
    toDate(date) {
        if (typeof date == "string") {
            return new Date(date);
        }
        else if (typeof date == "number") {
            return new Date(date);
        }
        else {
            return date;
        }
    }
    /**
     * @param {?} idOrParam
     * @param {?=} changeTime
     * @return {?}
     */
    getChangeData(idOrParam, changeTime) {
        if (idOrParam == null) {
            throw new Error("id can not be null");
        }
        if (idOrParam instanceof String || typeof idOrParam == "string") {
            return this.getChangeDataById((/** @type {?} */ (idOrParam)), changeTime);
        }
        else {
            return this.getChangeDataByParam(idOrParam);
        }
    }
    /**
     * @private
     * @param {?} id
     * @param {?} changeTime
     * @return {?}
     */
    getChangeDataById(id, changeTime) {
        /** @type {?} */
        let json = JSON.stringify(changeTime);
        /** @type {?} */
        let queryParam = encodeURIComponent(json);
        /** @type {?} */
        let url = `${chgdrUrl}/${id}?changeTime=${queryParam}`;
        return this.http.get(url).pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            return this.transChangeDataFromResponse(data);
        })));
    }
    /**
     * @private
     * @param {?} param
     * @return {?}
     */
    getChangeDataByParam(param) {
        if (param == null) {
            throw new Error("ChgdrItemQueryParam can not be null");
        }
        /** @type {?} */
        let requestParam = {};
        Object.assign(requestParam, param);
        //将Map转为Object，否则无法正常序列化
        requestParam.dataIds = MapUtil.convertMapToObject(param.dataIds);
        /** @type {?} */
        let url = `${chgdrUrl}`;
        return this.http.post(url, requestParam).pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            return this.transChangeDataFromResponse(data);
        })));
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    transChangeDataFromResponse(data) {
        if (!data) {
            return data;
        }
        /** @type {?} */
        let sh = (/** @type {?} */ ((/** @type {?} */ (data))));
        //TODO 待删，兼容老数据格式
        if (typeof sh.dataCode == "string") {
            sh.dataCode = JSON.parse(sh.dataCode);
        }
        sh.dataCode = MapUtil.convertObjectToMap(sh.dataCode);
        sh.changeTime = this.toDate(sh.changeTime);
        sh.operateType = OperateType.parse(sh.operateType);
        sh.rows = this.transChangeDataRowsFromResponse(sh.rows || []);
        return sh;
    }
    /**
     * @private
     * @param {?} rows
     * @return {?}
     */
    transChangeDataRowsFromResponse(rows) {
        if (!rows || rows.length == 0) {
            return rows;
        }
        rows.forEach((/**
         * @param {?} row
         * @return {?}
         */
        row => {
            if (!row) {
                return;
            }
            row.operateType = OperateType.parse(row.operateType);
            //TODO 待删，兼容老数据格式
            if (typeof row.dataCode == "string") {
                row.dataCode = JSON.parse(row.dataCode);
            }
            row.dataCode = MapUtil.convertObjectToMap(row.dataCode);
            row.oldContent = (/** @type {?} */ (MapUtil.convertObjectToMap(row.oldContent))) || new Map();
            row.newContent = (/** @type {?} */ (MapUtil.convertObjectToMap(row.newContent))) || new Map();
        }));
        return rows;
    }
}
ChgdrService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ChgdrService.ctorParameters = () => [
    { type: HttpService },
    { type: SessionService },
    { type: Injector }
];
/** @nocollapse */ ChgdrService.ngInjectableDef = i0.defineInjectable({ factory: function ChgdrService_Factory() { return new ChgdrService(i0.inject(i1.HttpService), i0.inject(i1.SessionService), i0.inject(i0.INJECTOR)); }, token: ChgdrService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    ChgdrService.prototype.rootDataCodeFieldsMap;
    /**
     * @type {?}
     * @private
     */
    ChgdrService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    ChgdrService.prototype.sessionService;
    /**
     * @type {?}
     * @private
     */
    ChgdrService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,