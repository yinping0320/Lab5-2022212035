/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/chgdr-config-handler.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { format } from 'date-fns';
import { GSPElementDataType, GSPElementObjectType } from '@gsp-bef/gsp-cm-metadata';
import { I18nUtil } from './i18n-service';
export class ChgdrConfigHandler {
    /**
     * @param {?} be
     * @param {?} entityConfigs
     */
    constructor(be, entityConfigs) {
        this.entityCodeMap = new Map();
        this.entityFieldMap = new Map();
        this.entityFieldShowOrderMap = new Map();
        this.entityFieldParentMap = new Map();
        this.entityFieldConfigMap = new Map();
        //初始化所有BE对象信息
        this.be = be;
        if (!!be) {
            /** @type {?} */
            let mainObject = be.MainObject;
            this.updateEntityMap(mainObject, this.entityCodeMap, this.entityFieldMap);
        }
        //初始化配置信息
        this.entityConfigs = entityConfigs || [];
        this.updateEntityConfigs();
        //更新显示顺序
        this.updateShowIndex();
    }
    /**
     * 更新显示顺序号
     * @private
     * @return {?}
     */
    updateShowIndex() {
        /** @type {?} */
        let entityFieldShowOrderMap = new Map();
        //首先用BE字段顺序赋予初始顺序，避免配置中无顺序号造成显示错乱
        this.entityFieldMap.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        (value, key) => {
            entityFieldShowOrderMap.set(key, entityFieldShowOrderMap.size);
        }));
        //然后用配置顺序替代初始顺序
        this.entityFieldConfigMap.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        (value, key) => {
            if (value.showIndex !== undefined && value.showIndex !== null) {
                entityFieldShowOrderMap.set(key, value.showIndex);
            }
        }));
        this.entityFieldShowOrderMap = entityFieldShowOrderMap;
    }
    /**
     * 更新配置信息的相关数据
     * @private
     * @return {?}
     */
    updateEntityConfigs() {
        /** @type {?} */
        let fieldConfigMap = new Map();
        this.entityConfigs.forEach((/**
         * @param {?} entityConfig
         * @return {?}
         */
        entityConfig => {
            /** @type {?} */
            let tabCode = entityConfig.tabCode;
            (entityConfig.fields || []).forEach((/**
             * @param {?} field
             * @return {?}
             */
            field => {
                /** @type {?} */
                let fieldLabel = field.fieldLabelId;
                /** @type {?} */
                let key = tabCode + "#" + fieldLabel;
                fieldConfigMap.set(key, field);
            }));
        }));
        this.entityFieldConfigMap = fieldConfigMap;
    }
    /**
     * @private
     * @param {?} entity
     * @param {?} entityCodeMap
     * @param {?} entityFieldMap
     * @return {?}
     */
    updateEntityMap(entity, entityCodeMap, entityFieldMap) {
        if (!entity) {
            return;
        }
        entityCodeMap.set(entity.Code, entity);
        //实体对象的字段信息
        entity.ContainElements.forEach((/**
         * @param {?} ele
         * @return {?}
         */
        ele => {
            this.updateEntityFieldMap(entity, ele, null, entityFieldMap);
        }));
        //处理子节点信息
        /** @type {?} */
        let children = entity.ContainChildObjects;
        if (!children || !children.length) {
            return;
        }
        children.forEach((/**
         * @param {?} childEntity
         * @return {?}
         */
        childEntity => {
            this.updateEntityMap(childEntity, entityCodeMap, entityFieldMap);
        }));
    }
    /**
     * 更新BE节点的指定字段信息，如果该字段是关联字段，同时更新其带出字段
     * @private
     * @param {?} entity
     * @param {?} element
     * @param {?} parentElement
     * @param {?} entityFieldMap
     * @return {?}
     */
    updateEntityFieldMap(entity, element, parentElement, entityFieldMap) {
        /** @type {?} */
        let key = entity.Code + "#" + element.LabelID;
        entityFieldMap.set(key, element);
        if (parentElement) {
            this.entityFieldParentMap.set(key, parentElement);
        }
        /** @type {?} */
        const childAssociations = element.ChildAssociations;
        if (!!childAssociations && childAssociations.length > 0) {
            childAssociations.forEach((/**
             * @param {?} childAssociation
             * @return {?}
             */
            childAssociation => {
                /** @type {?} */
                const refElementCollection = childAssociation.RefElementCollection;
                if (!!refElementCollection && refElementCollection.length > 0) {
                    refElementCollection.forEach((/**
                     * @param {?} rele
                     * @return {?}
                     */
                    rele => {
                        this.updateEntityFieldMap(entity, rele, element, entityFieldMap);
                    }));
                }
            }));
        }
    }
    /**
     * @param {?} items
     * @param {?} entityCode
     * @param {?} fieldLabelIdFunc
     * @return {?}
     */
    sort(items, entityCode, fieldLabelIdFunc) {
        items.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            /** @type {?} */
            const aKey = entityCode + "#" + fieldLabelIdFunc(a);
            /** @type {?} */
            const bKey = entityCode + "#" + fieldLabelIdFunc(b);
            if (!this.entityFieldShowOrderMap.has(aKey) && !this.entityFieldShowOrderMap.has(bKey)) {
                //如果双方均无顺序号，则按照自然排序
                return aKey.localeCompare(bKey);
            }
            else if (!this.entityFieldShowOrderMap.has(aKey)) {
                //如果有一方无顺序号，则无顺序号的靠后
                return -1;
            }
            else if (!this.entityFieldShowOrderMap.has(bKey)) {
                //如果有一方无顺序号，则无顺序号的靠后
                return 1;
            }
            else {
                //如果两方都有顺序号，则按照顺序号排序
                /** @type {?} */
                const aOrder = this.entityFieldShowOrderMap.get(aKey);
                /** @type {?} */
                const bOrder = this.entityFieldShowOrderMap.get(bKey);
                return aOrder - bOrder;
            }
        }));
    }
    /**
     * 格式化主对象节点中字段的值
     * @param {?} originalValue
     * @param {?} fieldLabelId
     * @return {?}
     */
    formatMainObjectFieldValue(originalValue, fieldLabelId) {
        /** @type {?} */
        let entityCode = this.getMainObjectCode();
        return this.formatFieldValue(originalValue, entityCode, fieldLabelId);
    }
    /**
     * 格式化字段值
     * @param {?} originalValue
     * @param {?} entityCode
     * @param {?} fieldLabelId
     * @return {?}
     */
    formatFieldValue(originalValue, entityCode, fieldLabelId) {
        /** @type {?} */
        let element = this.getElement(entityCode, fieldLabelId);
        if (!element) {
            console.error("未找到业务实体【" + this.be.ID + "-" + this.be.Name + "】节点【" + entityCode + "】的字段【" + fieldLabelId + "】");
            return originalValue;
        }
        if (!element) {
            return originalValue;
        }
        try {
            //处理历史遗留的数字格式
            if ((element.MDataType == GSPElementDataType.Decimal || element.MDataType == GSPElementDataType.Integer)
                && originalValue && originalValue.toLowerCase().includes("e")) {
                //如果字段是数字类型，且是科学计数法格式
                //转为十进制格式显示
                /** @type {?} */
                let num = Number(originalValue);
                if (isNaN(num)) {
                    console.log("业务实体【" + this.be.ID + "-" + this.be.Name + "】节点【" + entityCode + "】的字段【" + fieldLabelId + "】的值不是有效的数字格式：" + originalValue);
                    return originalValue;
                }
                else {
                    /** @type {?} */
                    let result = this.toNonExponential(num);
                    return result;
                }
            }
            //处理布尔值类型
            if (element.MDataType == GSPElementDataType.Boolean) {
                //注意：new Boolean("false") == true
                if (originalValue === null || originalValue === undefined || originalValue.length == 0) {
                    return originalValue;
                }
                else if (originalValue.toLowerCase() == "false") {
                    return I18nUtil.instantOrDefault("no-text", "否");
                }
                else if (originalValue.toLowerCase() == "true") {
                    return I18nUtil.instantOrDefault("yes-text", "是");
                }
                else {
                    return originalValue;
                }
            }
            //处理日期格式
            if (element.MDataType == GSPElementDataType.Date) {
                if (originalValue === null || originalValue === undefined || originalValue.length == 0) {
                    //不包含值，直接返回原始值
                    return originalValue;
                }
                else {
                    /** @type {?} */
                    let date = new Date(originalValue);
                    /** @type {?} */
                    let str = format(date, "yyyy-MM-dd");
                    return str;
                }
            }
            //处理日期时间格式
            if (element.MDataType == GSPElementDataType.DateTime) {
                if (originalValue === null || originalValue === undefined || originalValue.length == 0) {
                    //不包含值，直接返回原始值
                    return originalValue;
                }
                else {
                    /** @type {?} */
                    let date = new Date(originalValue);
                    /** @type {?} */
                    let str = format(date, "yyyy-MM-dd HH:mm:ss");
                    return str;
                }
            }
            //处理枚举格式
            if (element.ObjectType == GSPElementObjectType.Enum) {
                /** @type {?} */
                let enumValues = element.ContainEnumValues || [];
                /** @type {?} */
                let enumValue = enumValues.find((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item.Value == originalValue));
                if (enumValue) {
                    return enumValue.Name;
                }
                else if (originalValue === null || originalValue === undefined || originalValue.length == 0) {
                    //如果找不到对应的枚举项，并且原始值为空，说明未赋值，不报错
                    return originalValue;
                }
                else {
                    //打印异常
                    console.log("业务实体【" + this.be.ID + "-" + this.be.Name + "】节点【" + entityCode + "】的字段【" + fieldLabelId + "】的值未找到匹配的枚举项：" + originalValue);
                    return originalValue;
                }
            }
            return originalValue;
        }
        catch (error) {
            console.error("业务实体【" + this.be.ID + "-" + this.be.Name + "】节点【" + entityCode + "】的字段【" + fieldLabelId + "】的值【" + originalValue + "】格式化出错：", error);
            return originalValue;
        }
    }
    /**
     * JavaScript中科学计数法转化为数值字符串形式。
     * 以下两种情况，JavaScript 会自动将数值转为科学计数法表示
     * (1) 小于1且小数点后面带有6个0以上的浮点数值：
     * (2) 整数位数字多于21位：
     * 首先看看整数位数字多于21位的情况，其实这个一般不会碰到，整数位数字多于21位已经超出了 JavaScript 精确整数范围。
     * 这个方法用于处理小数问题
     * from：https://www.cnblogs.com/xianfengzhike/p/9939029.html
     * @private
     * @param {?} num
     * @return {?}
     */
    toNonExponential(num) {
        /** @type {?} */
        var m = num.toExponential().match(/\d(?:\.(\d*))?e([+-]\d+)/);
        return num.toFixed(Math.max(0, (m[1] || '').length - m[2]));
    }
    /**
     * @return {?}
     */
    getBeName() {
        return this.be ? this.be.Name : null;
    }
    /**
     * @return {?}
     */
    getMainObjectCode() {
        return this.be && this.be.MainObject ? this.be.MainObject.Code : null;
    }
    /**
     * @param {?} entityCode
     * @param {?} fieldLabelId
     * @return {?}
     */
    getElement(entityCode, fieldLabelId) {
        /** @type {?} */
        let key = entityCode + "#" + fieldLabelId;
        return this.entityFieldMap.get(key);
    }
    /**
     * @param {?} entityCode
     * @param {?} fieldLabelId
     * @return {?}
     */
    getParentElement(entityCode, fieldLabelId) {
        /** @type {?} */
        let key = entityCode + "#" + fieldLabelId;
        return this.entityFieldParentMap.get(key);
    }
    /**
     * @param {?} entityCode
     * @return {?}
     */
    getEntityNameOrDefault(entityCode) {
        /** @type {?} */
        let entity = this.entityCodeMap.get(entityCode);
        return !!entity ? entity.Name : entityCode;
    }
    /**
     * @param {?} entityCode
     * @param {?} fieldLabelId
     * @return {?}
     */
    getEntityFieldNameOrDefault(entityCode, fieldLabelId) {
        /** @type {?} */
        let key = entityCode + "#" + fieldLabelId;
        /** @type {?} */
        let fieldConfig = this.entityFieldConfigMap.get(key);
        if (fieldConfig && fieldConfig.fieldName && fieldConfig.fieldName != "") {
            //优先返回配置的名称
            return fieldConfig.fieldName;
        }
        //如果不存在配置名称，则返回BE字段名称
        /** @type {?} */
        let ele = this.entityFieldMap.get(key);
        return !!ele ? ele.Name : fieldLabelId;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    ChgdrConfigHandler.prototype.be;
    /**
     * @type {?}
     * @private
     */
    ChgdrConfigHandler.prototype.entityCodeMap;
    /**
     * @type {?}
     * @private
     */
    ChgdrConfigHandler.prototype.entityFieldMap;
    /**
     * @type {?}
     * @private
     */
    ChgdrConfigHandler.prototype.entityFieldShowOrderMap;
    /**
     * @type {?}
     * @private
     */
    ChgdrConfigHandler.prototype.entityFieldParentMap;
    /**
     * @type {?}
     * @private
     */
    ChgdrConfigHandler.prototype.entityConfigs;
    /**
     * @type {?}
     * @private
     */
    ChgdrConfigHandler.prototype.entityFieldConfigMap;
}
//# sourceMappingURL=data:application/json;base64,