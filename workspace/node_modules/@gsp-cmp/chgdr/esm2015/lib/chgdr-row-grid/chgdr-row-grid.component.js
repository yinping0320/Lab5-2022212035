/**
 * @fileoverview added by tsickle
 * Generated from: lib/chgdr-row-grid/chgdr-row-grid.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Injector, Input, ViewChild } from '@angular/core';
import { DatagridComponent } from '@farris/ui-datagrid';
import { ChgdrTreeNode } from '../chgdr-data-viewer/chgdr-tree-builder';
import { OperateType } from '../model/operate-type';
import { I18nUtil } from '../service/i18n-service';
export class ChgdrRowGridComponent {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.columns = [
            { field: 'fieldName', width: 130, title: this.fieldNameColumnTitle },
            { field: 'oldValue', width: 130, title: this.oldValueColumnTitle, showTips: true },
            { field: 'newValue', width: 130, title: this.newValueColumnTitle, showTips: true }
        ];
        /** @type {?} */
        let oldValueField = this.columns[1];
        /** @type {?} */
        let newValueField = this.columns[2];
        if (!!this.chgdrTreeNode) {
            //根据初始的变更类型更改显示列的信息
            //此处不能直接调用DataGrid组件的方法更改，因为此处尚未创建DataGrid
            /** @type {?} */
            let type = this.chgdrTreeNode.chgdrRow.operateType;
            if (type == OperateType.ADD) {
                oldValueField.visible = false;
                newValueField.title = this.valueColumnTitle;
            }
            else if (type == OperateType.DELETE) {
                newValueField.visible = false;
                oldValueField.title = this.valueColumnTitle;
            }
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        //原来变更行类型
        /** @type {?} */
        let oldType;
        if (!changes.chgdrTreeNode) {
            oldType = null;
        }
        else if (!changes.chgdrTreeNode.previousValue) {
            oldType = null;
        }
        else {
            oldType = changes.chgdrTreeNode.previousValue.chgdrRow.operateType;
        }
        //现在变更行类型
        /** @type {?} */
        let newType;
        if (!changes.chgdrTreeNode) {
            newType = null;
        }
        else if (!changes.chgdrTreeNode.currentValue) {
            newType = null;
        }
        else {
            newType = changes.chgdrTreeNode.currentValue.chgdrRow.operateType;
        }
        if (oldType == newType || !this.dataGrid || !this.dataGrid.columns) {
            //如果新老类型一致(或DataGrid尚未创建)，则不变动
            //do nothing
        }
        else if (newType == OperateType.ADD) {
            this.dataGrid.showColumn("newValue");
            this.dataGrid.hideColumn("oldValue");
            this.dataGrid.setColumnTitle("newValue", this.valueColumnTitle);
        }
        else if (newType == OperateType.DELETE) {
            this.dataGrid.showColumn("oldValue");
            this.dataGrid.hideColumn("newValue");
            this.dataGrid.setColumnTitle("oldValue", this.valueColumnTitle);
        }
        else {
            this.dataGrid.showColumn("oldValue");
            this.dataGrid.showColumn("newValue");
            this.dataGrid.setColumnTitle("oldValue", this.oldValueColumnTitle);
            this.dataGrid.setColumnTitle("newValue", this.newValueColumnTitle);
        }
        if (changes.chgdrTreeNode && changes.chgdrTreeNode.currentValue) {
            this.data = changes.chgdrTreeNode.currentValue.chgdrRow.changes;
        }
    }
    /**
     * @private
     * @return {?}
     */
    get fieldNameColumnTitle() {
        return I18nUtil.instant("field-name-column-title");
    }
    /**
     * @private
     * @return {?}
     */
    get valueColumnTitle() {
        return I18nUtil.instant("value-column-title");
    }
    /**
     * @private
     * @return {?}
     */
    get oldValueColumnTitle() {
        return I18nUtil.instant("old-value-column-title");
    }
    /**
     * @private
     * @return {?}
     */
    get newValueColumnTitle() {
        return I18nUtil.instant("new-value-column-title");
    }
}
ChgdrRowGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-chgdr-row-grid',
                template: "<farris-datagrid \r\n   #chgdrRowGrid \r\n   idField=\"fieldLabel\" \r\n   [columns]=\"columns\" \r\n   [data]=\"data\" \r\n   [fit]=\"true\"\r\n   [fitColumns]=\"true\"\r\n   [pagination]=\"false\" \r\n>",
                styles: [""]
            }] }
];
/** @nocollapse */
ChgdrRowGridComponent.ctorParameters = () => [
    { type: Injector }
];
ChgdrRowGridComponent.propDecorators = {
    chgdrTreeNode: [{ type: Input }],
    dataGrid: [{ type: ViewChild, args: ["chgdrRowGrid",] }]
};
if (false) {
    /** @type {?} */
    ChgdrRowGridComponent.prototype.chgdrTreeNode;
    /** @type {?} */
    ChgdrRowGridComponent.prototype.dataGrid;
    /** @type {?} */
    ChgdrRowGridComponent.prototype.columns;
    /** @type {?} */
    ChgdrRowGridComponent.prototype.data;
    /**
     * @type {?}
     * @private
     */
    ChgdrRowGridComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,