/**
 * @fileoverview added by tsickle
 * Generated from: lib/chgdr-data-viewer/chgdr-data-builder.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChgdrData, ChgdrDataRowNode, ChangeColumnItem, ChgdrDataEntityNode, DataCodeField } from './chgdr-data';
import { I18nUtil } from '../service/i18n-service';
export class ChgdrDataBuilder {
    /**
     * @param {?} data
     * @param {?} handler
     * @return {?}
     */
    buildChgdrData(data, handler) {
        this.handler = handler;
        //初始化变更日志基本信息
        /** @type {?} */
        let chgdrData = new ChgdrData();
        chgdrData.entityName = this.handler.getBeName();
        chgdrData.operateType = data.operateType;
        chgdrData.userName = data.userName;
        chgdrData.dataId = data.dataId;
        chgdrData.dataCode = data.dataCode;
        chgdrData.dataCodes = this.buildDataCodes(data.dataCode, this.handler.getMainObjectCode());
        chgdrData.reason = data.reason;
        chgdrData.changeTime = data.changeTime;
        chgdrData.entityNodes = [];
        //分层组织变更日志行
        /** @type {?} */
        let rowNodes = [];
        !!data.rows && data.rows.forEach((/**
         * @param {?} row
         * @return {?}
         */
        row => {
            if (!row) {
                return;
            }
            /** @type {?} */
            let rowNode = new ChgdrDataRowNode();
            rowNode.id = row.id;
            rowNode.parentDataId = row.parentDataId;
            rowNode.dataId = row.dataId;
            rowNode.dataCode = row.dataCode;
            rowNode.dataCodes = this.buildDataCodes(row.dataCode, row.entityCode);
            rowNode.entityCode = row.entityCode;
            rowNode.entityName = this.handler.getEntityNameOrDefault(row.entityCode);
            rowNode.operateType = row.operateType;
            rowNode.entityNodes = [];
            //组织列的变更信息
            /** @type {?} */
            let changeColumnKeys = this.extractChangeColumnKeys(row);
            /** @type {?} */
            let columnValueChanges = [];
            changeColumnKeys.forEach((/**
             * @param {?} key
             * @return {?}
             */
            (key) => {
                /** @type {?} */
                let column = new ChangeColumnItem();
                column.fieldLabel = key;
                column.fieldName = this.handler.getEntityFieldNameOrDefault(row.entityCode, key);
                column.oldValue = this.handler.formatFieldValue(row.oldContent.get(key), row.entityCode, key);
                column.newValue = this.handler.formatFieldValue(row.newContent.get(key), row.entityCode, key);
                /** @type {?} */
                let ele = this.handler.getElement(row.entityCode, key);
                if (ele) {
                    //判断是否是关联字段
                    column.hasAssociation = ele.ObjectType == "Association" && ele.IsUdt == false;
                    column.isAssociationRefField = ele.IsRefElement;
                    /** @type {?} */
                    let parentElement = this.handler.getParentElement(row.entityCode, key);
                    if (parentElement) {
                        column.belongFieldLabelId = parentElement.LabelID;
                    }
                }
                columnValueChanges.push(column);
            }));
            //变更值排序
            this.handler.sort(columnValueChanges, row.entityCode, (/**
             * @param {?} column
             * @return {?}
             */
            (column) => column.fieldLabel));
            //合并关联带出字段
            /** @type {?} */
            let columnMap = new Map();
            columnValueChanges.forEach((/**
             * @param {?} column
             * @return {?}
             */
            (column) => {
                columnMap.set(column.fieldLabel, column);
            }));
            //1. 移除所有关联带出字段，并附加到其所属关联字段的children属性上
            columnValueChanges = columnValueChanges.filter((/**
             * @param {?} column
             * @return {?}
             */
            (column) => {
                if (column.isAssociationRefField) {
                    /** @type {?} */
                    let parentColumn = columnMap.get(column.belongFieldLabelId);
                    if (parentColumn) {
                        //找到父级字段则添加为父
                        parentColumn.children.push(column);
                        return false;
                    }
                    else {
                        return true;
                    }
                }
                else {
                    return true;
                }
            }));
            //2. 转换关联字段，将其子级的变更值拼接作为其变更值
            columnValueChanges = columnValueChanges.map((/**
             * @param {?} column
             * @return {?}
             */
            column => {
                if (column.hasAssociation && column.children.length > 0) {
                    //如果是关联字段，且存在关联带出字段
                    /** @type {?} */
                    let virtualColumn = Object.assign(new ChangeColumnItem(), column);
                    virtualColumn.originalColumnItem = column;
                    virtualColumn.oldValue = column.children.map((/**
                     * @param {?} child
                     * @return {?}
                     */
                    child => child.oldValue)).join(";");
                    virtualColumn.newValue = column.children.map((/**
                     * @param {?} child
                     * @return {?}
                     */
                    child => child.newValue)).join(";");
                    return virtualColumn;
                }
                else {
                    return column;
                }
            }));
            rowNode.changes = columnValueChanges;
            rowNodes.push(rowNode);
        }));
        /**
         * dataId与变更行的Map
         * @type {?}
         */
        let dataIdRowMap = new Map();
        rowNodes.forEach((/**
         * @param {?} node
         * @return {?}
         */
        node => dataIdRowMap.set(node.dataId, node)));
        rowNodes.forEach((/**
         * @param {?} node
         * @return {?}
         */
        node => {
            if (!node.parentDataId) {
                //根节点
                /** @type {?} */
                let entityNode = this.genChgdrDataEntityNode(node.entityCode, node.entityName);
                entityNode.rows.push(node);
                chgdrData.entityNodes.push(entityNode);
                return;
            }
            /** @type {?} */
            let parentRowNode = dataIdRowMap.get(node.parentDataId);
            if (!!parentRowNode) {
                //上级节点存在的节点
                /** @type {?} */
                let entityNode = parentRowNode.entityNodes.find((/**
                 * @param {?} en
                 * @return {?}
                 */
                en => en.entityCode == node.entityCode));
                if (!entityNode) {
                    entityNode = this.genChgdrDataEntityNode(node.entityCode, node.entityName);
                    parentRowNode.entityNodes.push(entityNode);
                }
                entityNode.rows.push(node);
            }
            else {
                //上级节点不存在的节点
                //TODO 上级节点不存在的节点是否需要构造完整的上级结构？
                /** @type {?} */
                let entityNode = this.genChgdrDataEntityNode(node.entityCode, node.entityName);
                entityNode.rows.push(node);
                chgdrData.entityNodes.push(entityNode);
            }
        }));
        return chgdrData;
    }
    /**
     * @private
     * @param {?} dataCode
     * @param {?} entityCode
     * @return {?}
     */
    buildDataCodes(dataCode, entityCode) {
        /** @type {?} */
        let dataCodes = [];
        dataCode && dataCode.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        (value, key) => {
            /** @type {?} */
            let dataCodeField = new DataCodeField();
            if (key == "_$dataCode") {
                dataCodeField.fieldLabelId = "dataCode";
                dataCodeField.fieldName = I18nUtil.instantOrDefault("business-code-text", "业务编号");
                dataCodeField.fieldValue = value;
            }
            else {
                dataCodeField.fieldLabelId = key;
                dataCodeField.fieldName = this.handler.getEntityFieldNameOrDefault(entityCode, key);
                dataCodeField.fieldValue = this.handler.formatFieldValue(value, entityCode, key);
            }
            dataCodes.push(dataCodeField);
        }));
        //业务编号排序
        this.handler.sort(dataCodes, entityCode, (/**
         * @param {?} dataCode
         * @return {?}
         */
        (dataCode) => dataCode.fieldLabelId));
        return dataCodes;
    }
    /**
     * 得到新旧内容中所有的key
     * @private
     * @param {?} row
     * @return {?}
     */
    extractChangeColumnKeys(row) {
        /** @type {?} */
        let keysSet = new Set();
        row.oldContent && row.oldContent.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        (value, key) => keysSet.add(key)));
        row.newContent && row.newContent.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        (value, key) => keysSet.add(key)));
        /** @type {?} */
        const keys = Array.from(keysSet.keys());
        return keys;
    }
    /**
     * @private
     * @param {?} entityCode
     * @param {?} entityName
     * @return {?}
     */
    genChgdrDataEntityNode(entityCode, entityName) {
        /** @type {?} */
        let node = new ChgdrDataEntityNode();
        node.entityCode = entityCode;
        node.entityName = entityName;
        node.rows = [];
        return node;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    ChgdrDataBuilder.prototype.handler;
}
//# sourceMappingURL=data:application/json;base64,