/**
 * @fileoverview added by tsickle
 * Generated from: lib/chgdr-data-viewer/chgdr-tree-builder.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Guid } from '../util/guid.util';
// 参考： Farris TreeTable的节点结构
// export interface TreeNode {
//     id?: string;
//     data: any;
//     /** 叶子节点图标 */
//     icon?: any;
//     /** 节点展开图标 */
//     expandedIcon?: any;
//     /** 节点折叠图标 */
//     collapsedIcon?: any;
//     /** 子节点 */
//     children?: TreeNode[];
//     /** 是否为叶子节点 */
//     leaf?: boolean;
//     /** 是否展开 */
//     expanded?: boolean;
//     type?: string;
//     /** 父节点 */
//     parent?: TreeNode;
//     /** 是否允许选中 */
//     selectable?: boolean;
//  }
export class ChgdrTreeNode {
}
if (false) {
    /**
     * 节点ID，用于内部处理，请勿使用
     * @type {?}
     */
    ChgdrTreeNode.prototype.id;
    /**
     * 节点名称
     * @type {?}
     */
    ChgdrTreeNode.prototype.name;
    /**
     * 父节点
     * @type {?}
     */
    ChgdrTreeNode.prototype.parent;
    /**
     * 子节点列表
     * @type {?}
     */
    ChgdrTreeNode.prototype.children;
    /**
     * 是否展开
     * @type {?}
     */
    ChgdrTreeNode.prototype.expanded;
    /**
     * 是否隐藏
     * @type {?}
     */
    ChgdrTreeNode.prototype.hidden;
    /**
     * 展示树结构用的数据实体
     * @type {?}
     */
    ChgdrTreeNode.prototype.data;
    /** @type {?} */
    ChgdrTreeNode.prototype.chgdrRow;
    /** @type {?} */
    ChgdrTreeNode.prototype.chgdrData;
    /** @type {?} */
    ChgdrTreeNode.prototype.isRoot;
}
export class ChgdrTreeBuilder {
    /**
     * @param {?} chgdrData
     * @return {?}
     */
    build(chgdrData) {
        this.chgdrData = chgdrData;
        if (chgdrData.entityNodes.length == 0) {
            console.warn("无变更日志");
            return [];
        }
        /** @type {?} */
        let rootEntityNode = chgdrData.entityNodes[0];
        /** @type {?} */
        let rootRows = rootEntityNode.rows;
        if (rootRows.length == 0) {
            console.warn("无根变更日志行");
            return [];
        }
        /** @type {?} */
        let rootRow = rootRows[0];
        /** @type {?} */
        let node = this.rowToNode(rootRow);
        node.isRoot = true;
        node.expanded = true;
        return [node];
    }
    /**
     * @private
     * @param {?} row
     * @return {?}
     */
    rowToNode(row) {
        /** @type {?} */
        const node = new ChgdrTreeNode();
        node.id = Guid.newGuid();
        node.name = this.buildTreeNodeName(row);
        node.data = {
            id: node.id,
            name: node.name
        };
        node.chgdrRow = row;
        node.chgdrData = this.chgdrData;
        node.children = [];
        row.entityNodes.forEach((/**
         * @param {?} entityNode
         * @return {?}
         */
        entityNode => {
            entityNode.rows.forEach((/**
             * @param {?} childRow
             * @return {?}
             */
            childRow => {
                /** @type {?} */
                const childNode = this.rowToNode(childRow);
                childNode.parent = node;
                node.children.push(childNode);
            }));
        }));
        return node;
    }
    /**
     * @private
     * @param {?} row
     * @return {?}
     */
    buildTreeNodeName(row) {
        /** @type {?} */
        let dataCodeName;
        if (row.dataCodes && row.dataCodes.length > 0) {
            dataCodeName = row.dataCodes[0].fieldValue;
        }
        if (dataCodeName) {
            return row.entityName + "-" + dataCodeName + "【" + row.operateType.name + "】";
        }
        else {
            return row.entityName + "【" + row.operateType.name + "】";
        }
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    ChgdrTreeBuilder.prototype.chgdrData;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hnZHItdHJlZS1idWlsZGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1jbXAvY2hnZHIvIiwic291cmNlcyI6WyJsaWIvY2hnZHItZGF0YS12aWV3ZXIvY2hnZHItdHJlZS1idWlsZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLG1CQUFtQixDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTBCekMsTUFBTSxPQUFPLGFBQWE7Q0FzQnpCOzs7Ozs7SUFuQkcsMkJBQVc7Ozs7O0lBRVgsNkJBQWE7Ozs7O0lBR2IsK0JBQXNCOzs7OztJQUV0QixpQ0FBMEI7Ozs7O0lBRzFCLGlDQUFrQjs7Ozs7SUFFbEIsK0JBQWdCOzs7OztJQUdoQiw2QkFBVTs7SUFDVixpQ0FBMkI7O0lBQzNCLGtDQUFxQjs7SUFDckIsK0JBQWdCOztBQUdwQixNQUFNLE9BQU8sZ0JBQWdCOzs7OztJQUdsQixLQUFLLENBQUMsU0FBb0I7UUFDN0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxTQUFTLENBQUMsV0FBVyxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7WUFDbkMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN0QixPQUFPLEVBQUUsQ0FBQztTQUNiOztZQUNHLGNBQWMsR0FBRyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQzs7WUFDekMsUUFBUSxHQUFHLGNBQWMsQ0FBQyxJQUFJO1FBQ2xDLElBQUksUUFBUSxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7WUFDdEIsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN4QixPQUFPLEVBQUUsQ0FBQztTQUNiOztZQUNHLE9BQU8sR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDOztZQUVyQixJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7UUFDbEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFFckIsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xCLENBQUM7Ozs7OztJQUVPLFNBQVMsQ0FBQyxHQUFxQjs7Y0FDN0IsSUFBSSxHQUFrQixJQUFJLGFBQWEsRUFBRTtRQUMvQyxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN4QyxJQUFJLENBQUMsSUFBSSxHQUFHO1lBQ1IsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFO1lBQ1gsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1NBQ2xCLENBQUM7UUFDRixJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQztRQUNwQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDaEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDbkIsR0FBRyxDQUFDLFdBQVcsQ0FBQyxPQUFPOzs7O1FBQUMsVUFBVSxDQUFDLEVBQUU7WUFDakMsVUFBVSxDQUFDLElBQUksQ0FBQyxPQUFPOzs7O1lBQUMsUUFBUSxDQUFDLEVBQUU7O3NCQUN6QixTQUFTLEdBQWtCLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDO2dCQUN6RCxTQUFTLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztnQkFDeEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDbEMsQ0FBQyxFQUFDLENBQUE7UUFDTixDQUFDLEVBQUMsQ0FBQTtRQUNGLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7Ozs7OztJQUVPLGlCQUFpQixDQUFDLEdBQXFCOztZQUN2QyxZQUFZO1FBQ2hCLElBQUksR0FBRyxDQUFDLFNBQVMsSUFBSSxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDM0MsWUFBWSxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDO1NBQzlDO1FBQ0QsSUFBSSxZQUFZLEVBQUU7WUFDZCxPQUFPLEdBQUcsQ0FBQyxVQUFVLEdBQUcsR0FBRyxHQUFHLFlBQVksR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO1NBQ2pGO2FBQU07WUFDSCxPQUFPLEdBQUcsQ0FBQyxVQUFVLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztTQUM1RDtJQUNMLENBQUM7Q0FDSjs7Ozs7O0lBdkRHLHFDQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEd1aWQgfSBmcm9tICcuLi91dGlsL2d1aWQudXRpbCc7XHJcbmltcG9ydCB7IENoZ2RyRGF0YSwgQ2hnZHJEYXRhUm93Tm9kZSB9IGZyb20gJy4vY2hnZHItZGF0YSc7XHJcblxyXG4vLyDlj4LogIPvvJogRmFycmlzIFRyZWVUYWJsZeeahOiKgueCuee7k+aehFxyXG4vLyBleHBvcnQgaW50ZXJmYWNlIFRyZWVOb2RlIHtcclxuLy8gICAgIGlkPzogc3RyaW5nO1xyXG4vLyAgICAgZGF0YTogYW55O1xyXG4vLyAgICAgLyoqIOWPtuWtkOiKgueCueWbvuaghyAqL1xyXG4vLyAgICAgaWNvbj86IGFueTtcclxuLy8gICAgIC8qKiDoioLngrnlsZXlvIDlm77moIcgKi9cclxuLy8gICAgIGV4cGFuZGVkSWNvbj86IGFueTtcclxuLy8gICAgIC8qKiDoioLngrnmipjlj6Dlm77moIcgKi9cclxuLy8gICAgIGNvbGxhcHNlZEljb24/OiBhbnk7XHJcbi8vICAgICAvKiog5a2Q6IqC54K5ICovXHJcbi8vICAgICBjaGlsZHJlbj86IFRyZWVOb2RlW107XHJcbi8vICAgICAvKiog5piv5ZCm5Li65Y+25a2Q6IqC54K5ICovXHJcbi8vICAgICBsZWFmPzogYm9vbGVhbjtcclxuLy8gICAgIC8qKiDmmK/lkKblsZXlvIAgKi9cclxuLy8gICAgIGV4cGFuZGVkPzogYm9vbGVhbjtcclxuLy8gICAgIHR5cGU/OiBzdHJpbmc7XHJcbi8vICAgICAvKiog54i26IqC54K5ICovXHJcbi8vICAgICBwYXJlbnQ/OiBUcmVlTm9kZTtcclxuLy8gICAgIC8qKiDmmK/lkKblhYHorrjpgInkuK0gKi9cclxuLy8gICAgIHNlbGVjdGFibGU/OiBib29sZWFuO1xyXG4vLyAgfVxyXG5cclxuZXhwb3J0IGNsYXNzIENoZ2RyVHJlZU5vZGUge1xyXG4gICAgLy8g5qCR6YWN572u5Lit6K6+572u5LqGaWRGaWVsZOeahOaDheWGteS4i++8jGlk5Lya6KKr6Ieq5Yqo6LWL5YC85Li6ZGF0YVtpZEZpZWxkXeeahOWAvOOAguaJgOS7peWcqOatpOiuvue9ruW/hemhu+iuvue9ruS4uuS4jmRhdGEuaWTkuK3nm7jlkIzjgIJcclxuICAgIC8qKiDoioLngrlJRO+8jOeUqOS6juWGhemDqOWkhOeQhu+8jOivt+WLv+S9v+eUqCAqL1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIC8qKiDoioLngrnlkI3np7AgKi9cclxuICAgIG5hbWU6IHN0cmluZztcclxuXHJcbiAgICAvKiog54i26IqC54K5ICovXHJcbiAgICBwYXJlbnQ6IENoZ2RyVHJlZU5vZGU7XHJcbiAgICAvKiog5a2Q6IqC54K55YiX6KGoICovXHJcbiAgICBjaGlsZHJlbjogQ2hnZHJUcmVlTm9kZVtdO1xyXG5cclxuICAgIC8qKiDmmK/lkKblsZXlvIAgKi9cclxuICAgIGV4cGFuZGVkOiBib29sZWFuO1xyXG4gICAgLyoqIOaYr+WQpumakOiXjyAqL1xyXG4gICAgaGlkZGVuOiBib29sZWFuO1xyXG5cclxuICAgIC8qKiDlsZXnpLrmoJHnu5PmnoTnlKjnmoTmlbDmja7lrp7kvZMgKi9cclxuICAgIGRhdGE6IGFueTtcclxuICAgIGNoZ2RyUm93OiBDaGdkckRhdGFSb3dOb2RlO1xyXG4gICAgY2hnZHJEYXRhOiBDaGdkckRhdGE7XHJcbiAgICBpc1Jvb3Q6IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDaGdkclRyZWVCdWlsZGVyIHtcclxuICAgIHByaXZhdGUgY2hnZHJEYXRhOiBDaGdkckRhdGE7XHJcblxyXG4gICAgcHVibGljIGJ1aWxkKGNoZ2RyRGF0YTogQ2hnZHJEYXRhKTogQ2hnZHJUcmVlTm9kZVtdIHtcclxuICAgICAgICB0aGlzLmNoZ2RyRGF0YSA9IGNoZ2RyRGF0YTtcclxuICAgICAgICBpZiAoY2hnZHJEYXRhLmVudGl0eU5vZGVzLmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIuaXoOWPmOabtOaXpeW/l1wiKTtcclxuICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgcm9vdEVudGl0eU5vZGUgPSBjaGdkckRhdGEuZW50aXR5Tm9kZXNbMF07XHJcbiAgICAgICAgbGV0IHJvb3RSb3dzID0gcm9vdEVudGl0eU5vZGUucm93cztcclxuICAgICAgICBpZiAocm9vdFJvd3MubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKFwi5peg5qC55Y+Y5pu05pel5b+X6KGMXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCByb290Um93ID0gcm9vdFJvd3NbMF07XHJcblxyXG4gICAgICAgIGxldCBub2RlID0gdGhpcy5yb3dUb05vZGUocm9vdFJvdyk7XHJcbiAgICAgICAgbm9kZS5pc1Jvb3QgPSB0cnVlO1xyXG4gICAgICAgIG5vZGUuZXhwYW5kZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICByZXR1cm4gW25vZGVdO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcm93VG9Ob2RlKHJvdzogQ2hnZHJEYXRhUm93Tm9kZSk6IENoZ2RyVHJlZU5vZGUge1xyXG4gICAgICAgIGNvbnN0IG5vZGU6IENoZ2RyVHJlZU5vZGUgPSBuZXcgQ2hnZHJUcmVlTm9kZSgpO1xyXG4gICAgICAgIG5vZGUuaWQgPSBHdWlkLm5ld0d1aWQoKTtcclxuICAgICAgICBub2RlLm5hbWUgPSB0aGlzLmJ1aWxkVHJlZU5vZGVOYW1lKHJvdyk7XHJcbiAgICAgICAgbm9kZS5kYXRhID0ge1xyXG4gICAgICAgICAgICBpZDogbm9kZS5pZCxcclxuICAgICAgICAgICAgbmFtZTogbm9kZS5uYW1lXHJcbiAgICAgICAgfTtcclxuICAgICAgICBub2RlLmNoZ2RyUm93ID0gcm93O1xyXG4gICAgICAgIG5vZGUuY2hnZHJEYXRhID0gdGhpcy5jaGdkckRhdGE7XHJcbiAgICAgICAgbm9kZS5jaGlsZHJlbiA9IFtdO1xyXG4gICAgICAgIHJvdy5lbnRpdHlOb2Rlcy5mb3JFYWNoKGVudGl0eU5vZGUgPT4ge1xyXG4gICAgICAgICAgICBlbnRpdHlOb2RlLnJvd3MuZm9yRWFjaChjaGlsZFJvdyA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaGlsZE5vZGU6IENoZ2RyVHJlZU5vZGUgPSB0aGlzLnJvd1RvTm9kZShjaGlsZFJvdyk7XHJcbiAgICAgICAgICAgICAgICBjaGlsZE5vZGUucGFyZW50ID0gbm9kZTtcclxuICAgICAgICAgICAgICAgIG5vZGUuY2hpbGRyZW4ucHVzaChjaGlsZE5vZGUpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgcmV0dXJuIG5vZGU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBidWlsZFRyZWVOb2RlTmFtZShyb3c6IENoZ2RyRGF0YVJvd05vZGUpOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCBkYXRhQ29kZU5hbWU7XHJcbiAgICAgICAgaWYgKHJvdy5kYXRhQ29kZXMgJiYgcm93LmRhdGFDb2Rlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGRhdGFDb2RlTmFtZSA9IHJvdy5kYXRhQ29kZXNbMF0uZmllbGRWYWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRhdGFDb2RlTmFtZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcm93LmVudGl0eU5hbWUgKyBcIi1cIiArIGRhdGFDb2RlTmFtZSArIFwi44CQXCIgKyByb3cub3BlcmF0ZVR5cGUubmFtZSArIFwi44CRXCI7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJvdy5lbnRpdHlOYW1lICsgXCLjgJBcIiArIHJvdy5vcGVyYXRlVHlwZS5uYW1lICsgXCLjgJFcIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0=