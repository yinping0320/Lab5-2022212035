import { ChangeDetectorRef, EventEmitter, Injector, OnInit, SimpleChanges, TemplateRef } from '@angular/core';
import { DialogComponent } from '@farris/ui-dialog';
import { MessagerService } from '@farris/ui-messager';
import { NotifyService } from '@farris/ui-notify';
import { ChgdrService } from '../service/chgdr.service';
import { ChangeDataHeader } from '../model/change-data-header';
import { ChangeDataQueryResult } from '../model/change-data-query-result';
import { ChgLogConfigField } from '../model/chgdr-config-field';
import { Observable } from 'rxjs';
import { ChgdrInnerService } from '../service/chgdr-inner.service';
import { I18nUtil } from '../service/i18n-service';
import { BeforeShowChangeDetailEvent } from '../model/chgdr-ui-config';
export declare class ChgdrHeaderDatagridComponent implements OnInit {
    private chgdrService;
    private messageService;
    private notifyService;
    private ref;
    private chgdrInnerService;
    private injector;
    baseCls: boolean;
    chgdrs: ChangeDataQueryResult;
    showDataId: boolean;
    /** 打开详情前的回调 */
    beforeShowChangeDetail: (event: BeforeShowChangeDetailEvent) => Observable<boolean>;
    headers: ChangeDataHeader[];
    dataCodeFields: ChgLogConfigField[];
    private chgdrConfigHandler;
    pageChanged: EventEmitter<number>;
    pageSizeChanged: EventEmitter<number>;
    opCell: TemplateRef<any>;
    chgdrInfoDialog: DialogComponent;
    columns: any[];
    currentChgdrData: ChangeDataHeader;
    I18nUtil: I18nUtil;
    constructor(chgdrService: ChgdrService, messageService: MessagerService, notifyService: NotifyService, ref: ChangeDetectorRef, chgdrInnerService: ChgdrInnerService, injector: Injector);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /** 更新业务实体元数据 */
    private updateChgdrConfigHandler;
    /**
     * 更新dataCodeField数据
     * @param prevEntityId 原BeId
     * @param curEntityId 当前BeId
     */
    updateDataCodeFields(prevEntityId: string, curEntityId: string): Observable<ChgLogConfigField[]>;
    /**
     * 格式化headers。主要是解析其中的dataCode，将其转为Object
     * 使用dataCodeObj存放dataCode解析后的结果
     * dataCodeObj属性在ChangeDataHeader中不存在，此处通过强制赋值使用，并且只限于该处使用。
     */
    private formatHeaders;
    /** 格式化业务主键Map */
    private formatDataCodeMap;
    private getEntityId;
    private resetColumnAndData;
    onPageChanged($event: any): void;
    onPageSizeChanged($event: any): void;
    clickShowChangeDetail(ctx: any): void;
    private showChangeDetail;
    readonly showChangeDetailBtn: string;
    readonly changeDetailDialogTitle: string;
}
