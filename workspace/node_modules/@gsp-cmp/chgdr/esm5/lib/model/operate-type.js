/**
 * @fileoverview added by tsickle
 * Generated from: lib/model/operate-type.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { I18nUtil } from "../service/i18n-service";
var OperateType = /** @class */ (function () {
    function OperateType(ordinal, code, defaultName) {
        this.ordinal = ordinal;
        this.code = code;
        this.defaultName = defaultName;
    }
    Object.defineProperty(OperateType.prototype, "name", {
        get: /**
         * @return {?}
         */
        function () {
            return I18nUtil.instantOrDefault("operate-type-name-" + this.code, this.defaultName);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    OperateType.values = /**
     * @return {?}
     */
    function () {
        return [OperateType.ADD, OperateType.MODIFY, OperateType.DELETE];
    };
    /**
     * @return {?}
     */
    OperateType.prototype.toJson = /**
     * @return {?}
     */
    function () {
        return this.code;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    OperateType.parse = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        if (obj === undefined || obj === null) {
            return null;
        }
        if (obj instanceof OperateType) {
            return obj;
        }
        if (typeof obj === "string") {
            return OperateType.values().find((/**
             * @param {?} ot
             * @return {?}
             */
            function (ot) { return ot.code == obj; }));
        }
        if (typeof obj === "number") {
            return OperateType.values().find((/**
             * @param {?} ot
             * @return {?}
             */
            function (ot) { return ot.ordinal == obj; }));
        }
        if (!!obj.code) {
            return OperateType.values().find((/**
             * @param {?} ot
             * @return {?}
             */
            function (ot) { return ot.code == obj.code; }));
        }
        return null;
    };
    /**
     * 新增
     */
    OperateType.ADD = new OperateType(0, "ADD", "新增");
    /**
     * 修改
     */
    OperateType.MODIFY = new OperateType(1, "MODIFY", "修改");
    /**
     * 删除
     */
    OperateType.DELETE = new OperateType(2, "DELETE", "删除");
    return OperateType;
}());
export { OperateType };
if (false) {
    /**
     * 新增
     * @type {?}
     */
    OperateType.ADD;
    /**
     * 修改
     * @type {?}
     */
    OperateType.MODIFY;
    /**
     * 删除
     * @type {?}
     */
    OperateType.DELETE;
    /** @type {?} */
    OperateType.prototype.ordinal;
    /** @type {?} */
    OperateType.prototype.code;
    /**
     * @type {?}
     * @private
     */
    OperateType.prototype.defaultName;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlcmF0ZS10eXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1jbXAvY2hnZHIvIiwic291cmNlcyI6WyJsaWIvbW9kZWwvb3BlcmF0ZS10eXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRW5EO0lBUUkscUJBQTJCLE9BQWUsRUFBUyxJQUFZLEVBQVUsV0FBbUI7UUFBakUsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUFTLFNBQUksR0FBSixJQUFJLENBQVE7UUFBVSxnQkFBVyxHQUFYLFdBQVcsQ0FBUTtJQUM1RixDQUFDO0lBRUQsc0JBQVcsNkJBQUk7Ozs7UUFBZjtZQUNJLE9BQU8sUUFBUSxDQUFDLGdCQUFnQixDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3pGLENBQUM7OztPQUFBOzs7O0lBRWEsa0JBQU07OztJQUFwQjtRQUNJLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLFdBQVcsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3JFLENBQUM7Ozs7SUFFTSw0QkFBTTs7O0lBQWI7UUFDSSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDckIsQ0FBQzs7Ozs7SUFFYSxpQkFBSzs7OztJQUFuQixVQUFvQixHQUFRO1FBQ3hCLElBQUksR0FBRyxLQUFLLFNBQVMsSUFBSSxHQUFHLEtBQUssSUFBSSxFQUFFO1lBQ25DLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFDRCxJQUFJLEdBQUcsWUFBWSxXQUFXLEVBQUU7WUFDNUIsT0FBTyxHQUFHLENBQUM7U0FDZDtRQUNELElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO1lBQ3pCLE9BQU8sV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUk7Ozs7WUFBQyxVQUFBLEVBQUUsSUFBSSxPQUFBLEVBQUUsQ0FBQyxJQUFJLElBQUksR0FBRyxFQUFkLENBQWMsRUFBQyxDQUFDO1NBQzFEO1FBQ0QsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLEVBQUU7WUFDekIsT0FBTyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSTs7OztZQUFDLFVBQUEsRUFBRSxJQUFJLE9BQUEsRUFBRSxDQUFDLE9BQU8sSUFBSSxHQUFHLEVBQWpCLENBQWlCLEVBQUMsQ0FBQztTQUM3RDtRQUNELElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUU7WUFDWixPQUFPLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJOzs7O1lBQUMsVUFBQSxFQUFFLElBQUksT0FBQSxFQUFFLENBQUMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxJQUFJLEVBQW5CLENBQW1CLEVBQUMsQ0FBQztTQUMvRDtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7Ozs7SUF0Q00sZUFBRyxHQUFnQixJQUFJLFdBQVcsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDOzs7O0lBRW5ELGtCQUFNLEdBQWdCLElBQUksV0FBVyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7Ozs7SUFFekQsa0JBQU0sR0FBZ0IsSUFBSSxXQUFXLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztJQW1DcEUsa0JBQUM7Q0FBQSxBQXpDRCxJQXlDQztTQXpDWSxXQUFXOzs7Ozs7SUFFcEIsZ0JBQTBEOzs7OztJQUUxRCxtQkFBZ0U7Ozs7O0lBRWhFLG1CQUFnRTs7SUFFNUMsOEJBQXNCOztJQUFFLDJCQUFtQjs7Ozs7SUFBRSxrQ0FBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJMThuVXRpbCB9IGZyb20gXCIuLi9zZXJ2aWNlL2kxOG4tc2VydmljZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIE9wZXJhdGVUeXBlIHtcclxuICAgIC8qKiDmlrDlop4gKi9cclxuICAgIHN0YXRpYyBBREQ6IE9wZXJhdGVUeXBlID0gbmV3IE9wZXJhdGVUeXBlKDAsIFwiQUREXCIsIFwi5paw5aKeXCIpO1xyXG4gICAgLyoqIOS/ruaUuSAqL1xyXG4gICAgc3RhdGljIE1PRElGWTogT3BlcmF0ZVR5cGUgPSBuZXcgT3BlcmF0ZVR5cGUoMSwgXCJNT0RJRllcIiwgXCLkv67mlLlcIik7XHJcbiAgICAvKiog5Yig6ZmkICovXHJcbiAgICBzdGF0aWMgREVMRVRFOiBPcGVyYXRlVHlwZSA9IG5ldyBPcGVyYXRlVHlwZSgyLCBcIkRFTEVURVwiLCBcIuWIoOmZpFwiKTtcclxuXHJcbiAgICBwcml2YXRlIGNvbnN0cnVjdG9yKHB1YmxpYyBvcmRpbmFsOiBudW1iZXIsIHB1YmxpYyBjb2RlOiBzdHJpbmcsIHByaXZhdGUgZGVmYXVsdE5hbWU6IHN0cmluZykge1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgbmFtZSgpIHtcclxuICAgICAgICByZXR1cm4gSTE4blV0aWwuaW5zdGFudE9yRGVmYXVsdChcIm9wZXJhdGUtdHlwZS1uYW1lLVwiICsgdGhpcy5jb2RlLCB0aGlzLmRlZmF1bHROYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIHZhbHVlcygpOiBPcGVyYXRlVHlwZVtdIHtcclxuICAgICAgICByZXR1cm4gW09wZXJhdGVUeXBlLkFERCwgT3BlcmF0ZVR5cGUuTU9ESUZZLCBPcGVyYXRlVHlwZS5ERUxFVEVdO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB0b0pzb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29kZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIHBhcnNlKG9iajogYW55KTogT3BlcmF0ZVR5cGUge1xyXG4gICAgICAgIGlmIChvYmogPT09IHVuZGVmaW5lZCB8fCBvYmogPT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvYmogaW5zdGFuY2VvZiBPcGVyYXRlVHlwZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIG9iaiA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gT3BlcmF0ZVR5cGUudmFsdWVzKCkuZmluZChvdCA9PiBvdC5jb2RlID09IG9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2Ygb2JqID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBPcGVyYXRlVHlwZS52YWx1ZXMoKS5maW5kKG90ID0+IG90Lm9yZGluYWwgPT0gb2JqKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCEhb2JqLmNvZGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE9wZXJhdGVUeXBlLnZhbHVlcygpLmZpbmQob3QgPT4gb3QuY29kZSA9PSBvYmouY29kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG59Il19