/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/i18n-service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { TranslateDefaultParser } from '@ngx-translate/core';
import { LangDataEn } from './i18n/en';
import { LangDataZhChs } from './i18n/zh-CHS';
import { LangDataZhCht } from './i18n/zh-CHT';
import * as i0 from "@angular/core";
/** @type {?} */
var I18nServiceInstance;
/** @type {?} */
var langResourceMap = new Map();
langResourceMap.set("en", LangDataEn);
langResourceMap.set("zh-CHS", LangDataZhChs);
langResourceMap.set("zh-CHT", LangDataZhCht);
/** @type {?} */
var currentLang = localStorage.getItem('languageCode');
if (!currentLang) {
    currentLang = "zh-CHS";
    console.log("未找到设置的语言，默认使用" + currentLang);
}
/** @type {?} */
var parser = new TranslateDefaultParser();
var I18nUtil = /** @class */ (function () {
    function I18nUtil() {
    }
    /**
     * @param {?} key
     * @param {?=} param
     * @return {?}
     */
    I18nUtil.instant = /**
     * @param {?} key
     * @param {?=} param
     * @return {?}
     */
    function (key, param) {
        /** @type {?} */
        var statement = I18nUtil.getCurrentLangResource()[key];
        if (statement === undefined || statement === null) {
            return key;
        }
        /** @type {?} */
        var result = parser.interpolate(statement, param);
        if (result === undefined || result === null) {
            return key;
        }
        return result;
    };
    /**
     * @private
     * @return {?}
     */
    I18nUtil.getCurrentLangResource = /**
     * @private
     * @return {?}
     */
    function () {
        return langResourceMap.get(currentLang) || {};
    };
    /**
     * @param {?} key
     * @param {?} defaultText
     * @return {?}
     */
    I18nUtil.instantOrDefault = /**
     * @param {?} key
     * @param {?} defaultText
     * @return {?}
     */
    function (key, defaultText) {
        /** @type {?} */
        var statement = I18nUtil.getCurrentLangResource()[key];
        if (statement === undefined || statement === null) {
            return defaultText;
        }
        /** @type {?} */
        var result = parser.interpolate(statement);
        if (result === undefined || result === null) {
            return defaultText;
        }
        return result;
    };
    return I18nUtil;
}());
export { I18nUtil };
var I18nService = /** @class */ (function () {
    function I18nService() {
    }
    /**
     * @param {?} key
     * @param {?=} param
     * @return {?}
     */
    I18nService.prototype.instant = /**
     * @param {?} key
     * @param {?=} param
     * @return {?}
     */
    function (key, param) {
        return I18nUtil.instant(key, param);
    };
    /**
     * @private
     * @return {?}
     */
    I18nService.prototype.getCurrentLangResource = /**
     * @private
     * @return {?}
     */
    function () {
        return langResourceMap.get(currentLang) || {};
    };
    /**
     * @param {?} key
     * @param {?} defaultText
     * @return {?}
     */
    I18nService.staticInstant = /**
     * @param {?} key
     * @param {?} defaultText
     * @return {?}
     */
    function (key, defaultText) {
        return I18nUtil.instantOrDefault(key, defaultText);
    };
    I18nService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    I18nService.ctorParameters = function () { return []; };
    /** @nocollapse */ I18nService.ngInjectableDef = i0.defineInjectable({ factory: function I18nService_Factory() { return new I18nService(); }, token: I18nService, providedIn: "root" });
    return I18nService;
}());
export { I18nService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaTE4bi1zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1jbXAvY2hnZHIvIiwic291cmNlcyI6WyJsaWIvc2VydmljZS9pMThuLXNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQXVCLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNoRSxPQUFPLEVBQUUsc0JBQXNCLEVBQXFDLE1BQU0scUJBQXFCLENBQUM7QUFDaEcsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN2QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxlQUFlLENBQUM7OztJQUUxQyxtQkFBd0I7O0lBRXhCLGVBQWUsR0FBcUIsSUFBSSxHQUFHLEVBQUU7QUFDakQsZUFBZSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDdEMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQUM7QUFDN0MsZUFBZSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQUM7O0lBRXpDLFdBQVcsR0FBVyxZQUFZLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQztBQUM5RCxJQUFJLENBQUMsV0FBVyxFQUFFO0lBQ2hCLFdBQVcsR0FBRyxRQUFRLENBQUM7SUFDdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEdBQUcsV0FBVyxDQUFDLENBQUM7Q0FDNUM7O0lBRUcsTUFBTSxHQUFvQixJQUFJLHNCQUFzQixFQUFFO0FBRTFEO0lBQUE7SUFnQ0EsQ0FBQzs7Ozs7O0lBL0JlLGdCQUFPOzs7OztJQUFyQixVQUFzQixHQUFXLEVBQUUsS0FBVzs7WUFDeEMsU0FBUyxHQUFHLFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLEdBQUcsQ0FBQztRQUN0RCxJQUFJLFNBQVMsS0FBSyxTQUFTLElBQUksU0FBUyxLQUFLLElBQUksRUFBRTtZQUNqRCxPQUFPLEdBQUcsQ0FBQztTQUNaOztZQUVHLE1BQU0sR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUM7UUFDakQsSUFBSSxNQUFNLEtBQUssU0FBUyxJQUFJLE1BQU0sS0FBSyxJQUFJLEVBQUU7WUFDM0MsT0FBTyxHQUFHLENBQUM7U0FDWjtRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7Ozs7O0lBRWMsK0JBQXNCOzs7O0lBQXJDO1FBQ0UsT0FBTyxlQUFlLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNoRCxDQUFDOzs7Ozs7SUFFYSx5QkFBZ0I7Ozs7O0lBQTlCLFVBQStCLEdBQVcsRUFBRSxXQUFtQjs7WUFDekQsU0FBUyxHQUFHLFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLEdBQUcsQ0FBQztRQUN0RCxJQUFJLFNBQVMsS0FBSyxTQUFTLElBQUksU0FBUyxLQUFLLElBQUksRUFBRTtZQUNqRCxPQUFPLFdBQVcsQ0FBQztTQUNwQjs7WUFFRyxNQUFNLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUM7UUFDMUMsSUFBSSxNQUFNLEtBQUssU0FBUyxJQUFJLE1BQU0sS0FBSyxJQUFJLEVBQUU7WUFDM0MsT0FBTyxXQUFXLENBQUM7U0FDcEI7UUFFRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBQ0gsZUFBQztBQUFELENBQUMsQUFoQ0QsSUFnQ0M7O0FBRUQ7SUFHRTtJQUNBLENBQUM7Ozs7OztJQUVNLDZCQUFPOzs7OztJQUFkLFVBQWUsR0FBVyxFQUFFLEtBQVc7UUFDckMsT0FBTyxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN0QyxDQUFDOzs7OztJQUVPLDRDQUFzQjs7OztJQUE5QjtRQUNFLE9BQU8sZUFBZSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDaEQsQ0FBQzs7Ozs7O0lBRWEseUJBQWE7Ozs7O0lBQTNCLFVBQTRCLEdBQVcsRUFBRSxXQUFtQjtRQUMxRCxPQUFPLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDckQsQ0FBQzs7Z0JBaEJGLFVBQVUsU0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7Ozs7O3NCQXZEbEM7Q0F3RUMsQUFqQkQsSUFpQkM7U0FoQlksV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0sIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgVHJhbnNsYXRlRGVmYXVsdFBhcnNlciwgVHJhbnNsYXRlUGFyc2VyLCBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XHJcbmltcG9ydCB7IExhbmdEYXRhRW4gfSBmcm9tICcuL2kxOG4vZW4nO1xyXG5pbXBvcnQgeyBMYW5nRGF0YVpoQ2hzIH0gZnJvbSAnLi9pMThuL3poLUNIUyc7XHJcbmltcG9ydCB7IExhbmdEYXRhWmhDaHQgfSBmcm9tICcuL2kxOG4vemgtQ0hUJztcclxuXHJcbmxldCBJMThuU2VydmljZUluc3RhbmNlOiBhbnk7XHJcblxyXG5sZXQgbGFuZ1Jlc291cmNlTWFwOiBNYXA8c3RyaW5nLCBhbnk+ID0gbmV3IE1hcCgpO1xyXG5sYW5nUmVzb3VyY2VNYXAuc2V0KFwiZW5cIiwgTGFuZ0RhdGFFbik7XHJcbmxhbmdSZXNvdXJjZU1hcC5zZXQoXCJ6aC1DSFNcIiwgTGFuZ0RhdGFaaENocyk7XHJcbmxhbmdSZXNvdXJjZU1hcC5zZXQoXCJ6aC1DSFRcIiwgTGFuZ0RhdGFaaENodCk7XHJcblxyXG5sZXQgY3VycmVudExhbmc6IHN0cmluZyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdsYW5ndWFnZUNvZGUnKTtcclxuaWYgKCFjdXJyZW50TGFuZykge1xyXG4gIGN1cnJlbnRMYW5nID0gXCJ6aC1DSFNcIjtcclxuICBjb25zb2xlLmxvZyhcIuacquaJvuWIsOiuvue9rueahOivreiogO+8jOm7mOiupOS9v+eUqFwiICsgY3VycmVudExhbmcpO1xyXG59XHJcblxyXG5sZXQgcGFyc2VyOiBUcmFuc2xhdGVQYXJzZXIgPSBuZXcgVHJhbnNsYXRlRGVmYXVsdFBhcnNlcigpO1xyXG5cclxuZXhwb3J0IGNsYXNzIEkxOG5VdGlsIHtcclxuICBwdWJsaWMgc3RhdGljIGluc3RhbnQoa2V5OiBzdHJpbmcsIHBhcmFtPzogYW55KTogc3RyaW5nIHtcclxuICAgIGxldCBzdGF0ZW1lbnQgPSBJMThuVXRpbC5nZXRDdXJyZW50TGFuZ1Jlc291cmNlKClba2V5XTtcclxuICAgIGlmIChzdGF0ZW1lbnQgPT09IHVuZGVmaW5lZCB8fCBzdGF0ZW1lbnQgPT09IG51bGwpIHtcclxuICAgICAgcmV0dXJuIGtleTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgcmVzdWx0ID0gcGFyc2VyLmludGVycG9sYXRlKHN0YXRlbWVudCwgcGFyYW0pO1xyXG4gICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkIHx8IHJlc3VsdCA9PT0gbnVsbCkge1xyXG4gICAgICByZXR1cm4ga2V5O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyBnZXRDdXJyZW50TGFuZ1Jlc291cmNlKCkge1xyXG4gICAgcmV0dXJuIGxhbmdSZXNvdXJjZU1hcC5nZXQoY3VycmVudExhbmcpIHx8IHt9O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBpbnN0YW50T3JEZWZhdWx0KGtleTogc3RyaW5nLCBkZWZhdWx0VGV4dDogc3RyaW5nKSB7XHJcbiAgICBsZXQgc3RhdGVtZW50ID0gSTE4blV0aWwuZ2V0Q3VycmVudExhbmdSZXNvdXJjZSgpW2tleV07XHJcbiAgICBpZiAoc3RhdGVtZW50ID09PSB1bmRlZmluZWQgfHwgc3RhdGVtZW50ID09PSBudWxsKSB7XHJcbiAgICAgIHJldHVybiBkZWZhdWx0VGV4dDtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgcmVzdWx0ID0gcGFyc2VyLmludGVycG9sYXRlKHN0YXRlbWVudCk7XHJcbiAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQgfHwgcmVzdWx0ID09PSBudWxsKSB7XHJcbiAgICAgIHJldHVybiBkZWZhdWx0VGV4dDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxufVxyXG5cclxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcclxuZXhwb3J0IGNsYXNzIEkxOG5TZXJ2aWNlIHtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgaW5zdGFudChrZXk6IHN0cmluZywgcGFyYW0/OiBhbnkpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIEkxOG5VdGlsLmluc3RhbnQoa2V5LCBwYXJhbSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldEN1cnJlbnRMYW5nUmVzb3VyY2UoKSB7XHJcbiAgICByZXR1cm4gbGFuZ1Jlc291cmNlTWFwLmdldChjdXJyZW50TGFuZykgfHwge307XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIHN0YXRpY0luc3RhbnQoa2V5OiBzdHJpbmcsIGRlZmF1bHRUZXh0OiBzdHJpbmcpIHtcclxuICAgIHJldHVybiBJMThuVXRpbC5pbnN0YW50T3JEZWZhdWx0KGtleSwgZGVmYXVsdFRleHQpO1xyXG4gIH1cclxufVxyXG4iXX0=