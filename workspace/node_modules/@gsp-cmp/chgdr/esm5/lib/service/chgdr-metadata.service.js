/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/chgdr-metadata.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector } from '@angular/core';
import { HttpService, SessionService } from '@ecp-caf/caf-common';
import { GSPMetadataRTService } from '@gsp-lcm/metadatart-selector';
import { of } from 'rxjs';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@ecp-caf/caf-common";
import * as i2 from "@gsp-lcm/metadatart-selector";
var ChgdrMetadataService = /** @class */ (function () {
    function ChgdrMetadataService(http, sessionService, metadataService, injector) {
        this.http = http;
        this.sessionService = sessionService;
        this.metadataService = metadataService;
        this.injector = injector;
        this.beMetadataCache = new Map();
    }
    /** 获取BE元数据 */
    /**
     * 获取BE元数据
     * @param {?} beId
     * @return {?}
     */
    ChgdrMetadataService.prototype.getGSPBusinessEntity = /**
     * 获取BE元数据
     * @param {?} beId
     * @return {?}
     */
    function (beId) {
        var _this = this;
        if (this.beMetadataCache.has(beId)) {
            /** @type {?} */
            var be = this.beMetadataCache.get(beId);
            return of(be);
        }
        else {
            return this.metadataService.GetMetadataRT(beId).pipe(map((/**
             * @param {?} metadata
             * @return {?}
             */
            function (metadata) {
                /** @type {?} */
                var be = JSON.parse(metadata.content);
                _this.beMetadataCache.set(beId, be);
                return be;
            })));
        }
    };
    ChgdrMetadataService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    ChgdrMetadataService.ctorParameters = function () { return [
        { type: HttpService },
        { type: SessionService },
        { type: GSPMetadataRTService },
        { type: Injector }
    ]; };
    /** @nocollapse */ ChgdrMetadataService.ngInjectableDef = i0.defineInjectable({ factory: function ChgdrMetadataService_Factory() { return new ChgdrMetadataService(i0.inject(i1.HttpService), i0.inject(i1.SessionService), i0.inject(i2.GSPMetadataRTService), i0.inject(i0.INJECTOR)); }, token: ChgdrMetadataService, providedIn: "root" });
    return ChgdrMetadataService;
}());
export { ChgdrMetadataService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ChgdrMetadataService.prototype.beMetadataCache;
    /**
     * @type {?}
     * @private
     */
    ChgdrMetadataService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    ChgdrMetadataService.prototype.sessionService;
    /**
     * @type {?}
     * @private
     */
    ChgdrMetadataService.prototype.metadataService;
    /**
     * @type {?}
     * @private
     */
    ChgdrMetadataService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hnZHItbWV0YWRhdGEuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3AtY21wL2NoZ2RyLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2UvY2hnZHItbWV0YWRhdGEuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxXQUFXLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFbEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDcEUsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsR0FBRyxFQUFPLE1BQU0sZ0JBQWdCLENBQUM7Ozs7QUFPMUM7SUFJRSw4QkFBb0IsSUFBaUIsRUFDM0IsY0FBOEIsRUFDOUIsZUFBcUMsRUFDckMsUUFBa0I7UUFIUixTQUFJLEdBQUosSUFBSSxDQUFhO1FBQzNCLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQUM5QixvQkFBZSxHQUFmLGVBQWUsQ0FBc0I7UUFDckMsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUxwQixvQkFBZSxHQUFtQyxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBS3BDLENBQUM7SUFFL0IsY0FBYzs7Ozs7O0lBQ1AsbURBQW9COzs7OztJQUEzQixVQUE0QixJQUFZO1FBQXhDLGlCQVdDO1FBVkMsSUFBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBQzs7Z0JBQzVCLEVBQUUsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUM7WUFDdkMsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDZjthQUFJO1lBQ0gsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRzs7OztZQUFDLFVBQUEsUUFBUTs7b0JBQ3pELEVBQUUsR0FBc0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO2dCQUMxRCxLQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQ25DLE9BQU8sRUFBRSxDQUFDO1lBQ1osQ0FBQyxFQUFDLENBQUMsQ0FBQztTQUNMO0lBQ0gsQ0FBQzs7Z0JBckJKLFVBQVUsU0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7Ozs7Z0JBWHpCLFdBQVc7Z0JBQUUsY0FBYztnQkFFM0Isb0JBQW9CO2dCQUhSLFFBQVE7OzsrQkFBN0I7Q0EwQ0MsQUE5QkQsSUE4QkM7U0E3Qlksb0JBQW9COzs7Ozs7SUFDL0IsK0NBQW9FOzs7OztJQUV4RCxvQ0FBeUI7Ozs7O0lBQ25DLDhDQUFzQzs7Ozs7SUFDdEMsK0NBQTZDOzs7OztJQUM3Qyx3Q0FBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwU2VydmljZSwgU2Vzc2lvblNlcnZpY2UgfSBmcm9tICdAZWNwLWNhZi9jYWYtY29tbW9uJztcclxuaW1wb3J0IHsgR1NQQnVzaW5lc3NFbnRpdHkgfSBmcm9tICdAZ3NwLWJlZi9nc3AtYmUtbWV0YWRhdGEnO1xyXG5pbXBvcnQgeyBHU1BNZXRhZGF0YVJUU2VydmljZSB9IGZyb20gJ0Bnc3AtbGNtL21ldGFkYXRhcnQtc2VsZWN0b3InO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtYXAsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgQ2hhbmdlRGF0YUhlYWRlciB9IGZyb20gJy4uL21vZGVsL2NoYW5nZS1kYXRhLWhlYWRlcic7XHJcbmltcG9ydCB7IENoYW5nZURhdGFRdWVyeVBhcmFtIH0gZnJvbSAnLi4vbW9kZWwvY2hhbmdlLWRhdGEtcXVlcnktcGFyYW0nO1xyXG5pbXBvcnQgeyBDaGdMb2dDb25maWdGaWVsZCB9IGZyb20gJy4uL21vZGVsL2NoZ2RyLWNvbmZpZy1maWVsZCc7XHJcbmltcG9ydCB7IE9wZXJhdGVUeXBlIH0gZnJvbSAnLi4vbW9kZWwvb3BlcmF0ZS10eXBlJztcclxuaW1wb3J0IHsgTWFwVXRpbCB9IGZyb20gJy4uL3V0aWwvbWFwLnV0aWwnO1xyXG5cclxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcclxuZXhwb3J0IGNsYXNzIENoZ2RyTWV0YWRhdGFTZXJ2aWNlIHtcclxuICBwcml2YXRlIGJlTWV0YWRhdGFDYWNoZTogTWFwPHN0cmluZywgR1NQQnVzaW5lc3NFbnRpdHk+ID0gbmV3IE1hcCgpO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBzZXNzaW9uU2VydmljZTogU2Vzc2lvblNlcnZpY2UsXHJcbiAgICBwcml2YXRlIG1ldGFkYXRhU2VydmljZTogR1NQTWV0YWRhdGFSVFNlcnZpY2UsXHJcbiAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcikgeyB9XHJcblxyXG4gICAgLyoqIOiOt+WPlkJF5YWD5pWw5o2uICovXHJcbiAgICBwdWJsaWMgZ2V0R1NQQnVzaW5lc3NFbnRpdHkoYmVJZDogc3RyaW5nKTpPYnNlcnZhYmxlPEdTUEJ1c2luZXNzRW50aXR5PntcclxuICAgICAgaWYodGhpcy5iZU1ldGFkYXRhQ2FjaGUuaGFzKGJlSWQpKXtcclxuICAgICAgICBsZXQgYmUgPSB0aGlzLmJlTWV0YWRhdGFDYWNoZS5nZXQoYmVJZCk7XHJcbiAgICAgICAgcmV0dXJuIG9mKGJlKTtcclxuICAgICAgfWVsc2V7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubWV0YWRhdGFTZXJ2aWNlLkdldE1ldGFkYXRhUlQoYmVJZCkucGlwZShtYXAobWV0YWRhdGEgPT4ge1xyXG4gICAgICAgICAgY29uc3QgYmU6IEdTUEJ1c2luZXNzRW50aXR5ID0gSlNPTi5wYXJzZShtZXRhZGF0YS5jb250ZW50KTtcclxuICAgICAgICAgIHRoaXMuYmVNZXRhZGF0YUNhY2hlLnNldChiZUlkLCBiZSk7XHJcbiAgICAgICAgICByZXR1cm4gYmU7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gIC8vIHB1YmxpYyBnZXRCZU1ldGFkYXRhQW5kVWR0cyhiZUlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gIC8vICAgdGhpcy5tZXRhZGF0YVNlcnZpY2UuR2V0TWV0YWRhdGFSVChiZUlkKS5zdWJzY3JpYmUoKG1ldGFkYXRhKSA9PiB7XHJcbiAgLy8gICAgIGNvbnN0IGJlOiBHU1BCdXNpbmVzc0VudGl0eSA9IEpTT04ucGFyc2UobWV0YWRhdGEuY29udGVudCk7XHJcbiAgLy8gICAgIGxldCB1ZHRpZHM6c3RyaW5nW10gPSB0aGlzLmdldEFsbFVkdElkcyhiZS5NYWluT2JqZWN0KTtcclxuICAvLyAgICAgdGhpcy5tZXRhZGF0YVNlcnZpY2UuXHJcbiAgLy8gICB9KTtcclxuICAvLyB9XHJcbn1cclxuIl19