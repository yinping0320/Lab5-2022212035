/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/chgdr-list-ui.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, ComponentFactoryResolver, Injector } from '@angular/core';
import { MessagerService } from '@farris/ui-messager';
import { BsModalService } from '@farris/ui-modal';
import { of } from 'rxjs';
import { ChgdrListDialogContentComponent } from '../chgdr-list-dialog-content/chgdr-list-dialog-content.component';
import { ChgdrListDialogConfig } from '../model/chgdr-ui-config';
import { I18nUtil } from './i18n-service';
import * as i0 from "@angular/core";
import * as i1 from "@farris/ui-modal";
import * as i2 from "@farris/ui-messager";
var ChgdrListUiService = /** @class */ (function () {
    function ChgdrListUiService(resolver, injector, modalService, messagerService) {
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.messagerService = messagerService;
    }
    /**
     * @param {?} arg1
     * @param {?=} dataId
     * @return {?}
     */
    ChgdrListUiService.prototype.showDialog = /**
     * @param {?} arg1
     * @param {?=} dataId
     * @return {?}
     */
    function (arg1, dataId) {
        if (!arg1) {
            console.error("创建业务变更日志列表组件失败，业务实体不能为空，请检查", arg1, dataId);
            throw new Error("创建业务变更日志列表组件失败，业务实体不能为空，请检查");
        }
        if (arg1 instanceof String || typeof arg1 == "string") {
            /** @type {?} */
            var config = new ChgdrListDialogConfig();
            config.entityId = arg1.toString();
            config.dataId = dataId;
            this.create(config);
        }
        else {
            this.create(arg1);
        }
    };
    /**
     * @private
     * @param {?} config
     * @return {?}
     */
    ChgdrListUiService.prototype.create = /**
     * @private
     * @param {?} config
     * @return {?}
     */
    function (config) {
        if (config.entityId == null) {
            console.error("创建业务变更日志列表组件失败，业务实体不能为空，请检查", config);
            throw new Error("创建业务变更日志列表组件失败，业务实体不能为空，请检查");
        }
        /** @type {?} */
        var fac = this.resolver.resolveComponentFactory(ChgdrListDialogContentComponent);
        /** @type {?} */
        var cmpRef = fac.create(this.injector);
        /** @type {?} */
        var modalConfig = {
            title: I18nUtil.instant("chgdr-list-dialog-title"),
            width: 1000,
            height: 550,
            resizable: true,
            showButtons: false,
            showMaxButton: true,
            beforeOpen: (/**
             * @return {?}
             */
            function () {
                return of(true);
            })
        };
        cmpRef.instance.entityId = config.entityId;
        cmpRef.instance.dataId = config.dataId;
        cmpRef.instance.beforeShowChangeDetail = config.beforeShowChangeDetail;
        /** @type {?} */
        var dialog = this.modalService.show(cmpRef, modalConfig);
    };
    ChgdrListUiService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    ChgdrListUiService.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: BsModalService },
        { type: MessagerService }
    ]; };
    /** @nocollapse */ ChgdrListUiService.ngInjectableDef = i0.defineInjectable({ factory: function ChgdrListUiService_Factory() { return new ChgdrListUiService(i0.inject(i0.ComponentFactoryResolver), i0.inject(i0.INJECTOR), i0.inject(i1.BsModalService), i0.inject(i2.MessagerService)); }, token: ChgdrListUiService, providedIn: "root" });
    return ChgdrListUiService;
}());
export { ChgdrListUiService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ChgdrListUiService.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    ChgdrListUiService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ChgdrListUiService.prototype.modalService;
    /**
     * @type {?}
     * @private
     */
    ChgdrListUiService.prototype.messagerService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hnZHItbGlzdC11aS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1jbXAvY2hnZHIvIiwic291cmNlcyI6WyJsaWIvc2VydmljZS9jaGdkci1saXN0LXVpLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLHdCQUF3QixFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGNBQWMsRUFBZ0IsTUFBTSxrQkFBa0IsQ0FBQztBQUNoRSxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzFCLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLGtFQUFrRSxDQUFDO0FBQ25ILE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQUUxQztJQUdJLDRCQUNZLFFBQWtDLEVBQ2xDLFFBQWtCLEVBQ2xCLFlBQTRCLEVBQzVCLGVBQWdDO1FBSGhDLGFBQVEsR0FBUixRQUFRLENBQTBCO1FBQ2xDLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbEIsaUJBQVksR0FBWixZQUFZLENBQWdCO1FBQzVCLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtJQUU1QyxDQUFDOzs7Ozs7SUFJRCx1Q0FBVTs7Ozs7SUFBVixVQUFXLElBQW9DLEVBQUUsTUFBZTtRQUM1RCxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1AsT0FBTyxDQUFDLEtBQUssQ0FBQyw2QkFBNkIsRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDM0QsTUFBTSxJQUFJLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1NBQ2xEO1FBQ0QsSUFBSSxJQUFJLFlBQVksTUFBTSxJQUFJLE9BQU8sSUFBSSxJQUFJLFFBQVEsRUFBRTs7Z0JBQy9DLE1BQU0sR0FBRyxJQUFJLHFCQUFxQixFQUFFO1lBQ3hDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ2xDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkI7YUFBTTtZQUNILElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDckI7SUFDTCxDQUFDOzs7Ozs7SUFFTyxtQ0FBTTs7Ozs7SUFBZCxVQUFlLE1BQTZCO1FBQ3hDLElBQUksTUFBTSxDQUFDLFFBQVEsSUFBSSxJQUFJLEVBQUU7WUFDekIsT0FBTyxDQUFDLEtBQUssQ0FBQyw2QkFBNkIsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNyRCxNQUFNLElBQUksS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7U0FDbEQ7O1lBRUcsR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQUMsK0JBQStCLENBQUM7O1lBQzVFLE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7O1lBQ2xDLFdBQVcsR0FBaUI7WUFDNUIsS0FBSyxFQUFFLFFBQVEsQ0FBQyxPQUFPLENBQUMseUJBQXlCLENBQUM7WUFDbEQsS0FBSyxFQUFFLElBQUk7WUFDWCxNQUFNLEVBQUUsR0FBRztZQUNYLFNBQVMsRUFBRSxJQUFJO1lBQ2YsV0FBVyxFQUFFLEtBQUs7WUFDbEIsYUFBYSxFQUFFLElBQUk7WUFDbkIsVUFBVTs7O1lBQUU7Z0JBQ1IsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDcEIsQ0FBQyxDQUFBO1NBQ0o7UUFFRCxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQzNDLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDdkMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxzQkFBc0IsR0FBRyxNQUFNLENBQUMsc0JBQXNCLENBQUM7O1lBQ25FLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDO0lBQzVELENBQUM7O2dCQXBESixVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzs7O2dCQVJiLHdCQUF3QjtnQkFBRSxRQUFRO2dCQUU5QyxjQUFjO2dCQURkLGVBQWU7Ozs2QkFEeEI7Q0E4REMsQUF0REQsSUFzREM7U0FyRFksa0JBQWtCOzs7Ozs7SUFHdkIsc0NBQTBDOzs7OztJQUMxQyxzQ0FBMEI7Ozs7O0lBQzFCLDBDQUFvQzs7Ozs7SUFDcEMsNkNBQXdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBNZXNzYWdlclNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLW1lc3NhZ2VyJztcclxuaW1wb3J0IHsgQnNNb2RhbFNlcnZpY2UsIE1vZGFsT3B0aW9ucyB9IGZyb20gJ0BmYXJyaXMvdWktbW9kYWwnO1xyXG5pbXBvcnQgeyBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBDaGdkckxpc3REaWFsb2dDb250ZW50Q29tcG9uZW50IH0gZnJvbSAnLi4vY2hnZHItbGlzdC1kaWFsb2ctY29udGVudC9jaGdkci1saXN0LWRpYWxvZy1jb250ZW50LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IENoZ2RyTGlzdERpYWxvZ0NvbmZpZyB9IGZyb20gJy4uL21vZGVsL2NoZ2RyLXVpLWNvbmZpZyc7XHJcbmltcG9ydCB7IEkxOG5VdGlsIH0gZnJvbSAnLi9pMThuLXNlcnZpY2UnO1xyXG5cclxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcclxuZXhwb3J0IGNsYXNzIENoZ2RyTGlzdFVpU2VydmljZSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSByZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxyXG4gICAgICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxyXG4gICAgICAgIHByaXZhdGUgbW9kYWxTZXJ2aWNlOiBCc01vZGFsU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIG1lc3NhZ2VyU2VydmljZTogTWVzc2FnZXJTZXJ2aWNlXHJcbiAgICApIHtcclxuICAgIH1cclxuXHJcbiAgICBzaG93RGlhbG9nKGVudGl0eUlkOiBzdHJpbmcsIGRhdGFJZDogc3RyaW5nKVxyXG4gICAgc2hvd0RpYWxvZyhjb25maWc6IENoZ2RyTGlzdERpYWxvZ0NvbmZpZylcclxuICAgIHNob3dEaWFsb2coYXJnMTogc3RyaW5nIHwgQ2hnZHJMaXN0RGlhbG9nQ29uZmlnLCBkYXRhSWQ/OiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAoIWFyZzEpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIuWIm+W7uuS4muWKoeWPmOabtOaXpeW/l+WIl+ihqOe7hOS7tuWksei0pe+8jOS4muWKoeWunuS9k+S4jeiDveS4uuepuu+8jOivt+ajgOafpVwiLCBhcmcxLCBkYXRhSWQpO1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCLliJvlu7rkuJrliqHlj5jmm7Tml6Xlv5fliJfooajnu4Tku7blpLHotKXvvIzkuJrliqHlrp7kvZPkuI3og73kuLrnqbrvvIzor7fmo4Dmn6VcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcmcxIGluc3RhbmNlb2YgU3RyaW5nIHx8IHR5cGVvZiBhcmcxID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgbGV0IGNvbmZpZyA9IG5ldyBDaGdkckxpc3REaWFsb2dDb25maWcoKTtcclxuICAgICAgICAgICAgY29uZmlnLmVudGl0eUlkID0gYXJnMS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICBjb25maWcuZGF0YUlkID0gZGF0YUlkO1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZShjb25maWcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlKGFyZzEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNyZWF0ZShjb25maWc6IENoZ2RyTGlzdERpYWxvZ0NvbmZpZykge1xyXG4gICAgICAgIGlmIChjb25maWcuZW50aXR5SWQgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwi5Yib5bu65Lia5Yqh5Y+Y5pu05pel5b+X5YiX6KGo57uE5Lu25aSx6LSl77yM5Lia5Yqh5a6e5L2T5LiN6IO95Li656m677yM6K+35qOA5p+lXCIsIGNvbmZpZyk7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIuWIm+W7uuS4muWKoeWPmOabtOaXpeW/l+WIl+ihqOe7hOS7tuWksei0pe+8jOS4muWKoeWunuS9k+S4jeiDveS4uuepuu+8jOivt+ajgOafpVwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBmYWMgPSB0aGlzLnJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KENoZ2RyTGlzdERpYWxvZ0NvbnRlbnRDb21wb25lbnQpO1xyXG4gICAgICAgIGxldCBjbXBSZWYgPSBmYWMuY3JlYXRlKHRoaXMuaW5qZWN0b3IpO1xyXG4gICAgICAgIGxldCBtb2RhbENvbmZpZzogTW9kYWxPcHRpb25zID0ge1xyXG4gICAgICAgICAgICB0aXRsZTogSTE4blV0aWwuaW5zdGFudChcImNoZ2RyLWxpc3QtZGlhbG9nLXRpdGxlXCIpLFxyXG4gICAgICAgICAgICB3aWR0aDogMTAwMCxcclxuICAgICAgICAgICAgaGVpZ2h0OiA1NTAsXHJcbiAgICAgICAgICAgIHJlc2l6YWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgc2hvd0J1dHRvbnM6IGZhbHNlLFxyXG4gICAgICAgICAgICBzaG93TWF4QnV0dG9uOiB0cnVlLFxyXG4gICAgICAgICAgICBiZWZvcmVPcGVuOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb2YodHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNtcFJlZi5pbnN0YW5jZS5lbnRpdHlJZCA9IGNvbmZpZy5lbnRpdHlJZDtcclxuICAgICAgICBjbXBSZWYuaW5zdGFuY2UuZGF0YUlkID0gY29uZmlnLmRhdGFJZDtcclxuICAgICAgICBjbXBSZWYuaW5zdGFuY2UuYmVmb3JlU2hvd0NoYW5nZURldGFpbCA9IGNvbmZpZy5iZWZvcmVTaG93Q2hhbmdlRGV0YWlsO1xyXG4gICAgICAgIGxldCBkaWFsb2cgPSB0aGlzLm1vZGFsU2VydmljZS5zaG93KGNtcFJlZiwgbW9kYWxDb25maWcpO1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=