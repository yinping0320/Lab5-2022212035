/**
 * @fileoverview added by tsickle
 * Generated from: lib/chgdr-header-datagrid/chgdr-header-datagrid.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, EventEmitter, HostBinding, Injector, Input, Output, TemplateRef, ViewChild } from '@angular/core';
import { DialogComponent } from '@farris/ui-dialog';
import { MessagerService } from '@farris/ui-messager';
import { NotifyService } from '@farris/ui-notify';
import { ChgdrService } from '../service/chgdr.service';
import { ChangeDataQueryResult } from '../model/change-data-query-result';
import { ErrorUtil } from '../util/error.util';
import { tap } from 'rxjs/operators';
import { forkJoin, of } from 'rxjs';
import { MapUtil } from '../util/map.util';
import { ChgdrInnerService } from '../service/chgdr-inner.service';
import { I18nUtil } from '../service/i18n-service';
import { BeforeShowChangeDetailEvent } from '../model/chgdr-ui-config';
var ChgdrHeaderDatagridComponent = /** @class */ (function () {
    function ChgdrHeaderDatagridComponent(chgdrService, messageService, notifyService, ref, chgdrInnerService, injector) {
        this.chgdrService = chgdrService;
        this.messageService = messageService;
        this.notifyService = notifyService;
        this.ref = ref;
        this.chgdrInnerService = chgdrInnerService;
        this.injector = injector;
        this.baseCls = true;
        this.showDataId = true;
        this.headers = [];
        this.dataCodeFields = [];
        this.pageChanged = new EventEmitter();
        this.pageSizeChanged = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ChgdrHeaderDatagridComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.resetColumnAndData(null, []);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ChgdrHeaderDatagridComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (!changes.chgdrs) {
            //如果chgdrs没有更新，则直接返回
            return;
        }
        /** @type {?} */
        var prevEntityId = this.getEntityId(changes.chgdrs.previousValue);
        /** @type {?} */
        var curEntityId = this.getEntityId(changes.chgdrs.currentValue);
        /** @type {?} */
        var requests = [
            this.updateChgdrConfigHandler(curEntityId),
            this.updateDataCodeFields(prevEntityId, curEntityId)
        ];
        forkJoin(requests).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            /** @type {?} */
            var chgdrDatas = changes.chgdrs.currentValue;
            if (!!chgdrDatas) {
                _this.formatHeaders(chgdrDatas.headers);
            }
            //如果业务实体变更，则重置列信息
            if (curEntityId != null && curEntityId != prevEntityId) {
                _this.resetColumnAndData(curEntityId, chgdrDatas.headers);
            }
            else {
                _this.headers = chgdrDatas.headers;
            }
        }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            console.error("获取BE【" + curEntityId + "】的配置的业务变更日志的业务编号失败：", err);
            _this.messageService.error(I18nUtil.instant("get-business-code-config-error", { errorMessage: ErrorUtil.getErrorMessage(err) }));
        }));
    };
    /** 更新业务实体元数据 */
    /**
     * 更新业务实体元数据
     * @private
     * @param {?} entityId
     * @return {?}
     */
    ChgdrHeaderDatagridComponent.prototype.updateChgdrConfigHandler = /**
     * 更新业务实体元数据
     * @private
     * @param {?} entityId
     * @return {?}
     */
    function (entityId) {
        var _this = this;
        if (entityId) {
            return this.chgdrInnerService.getChgdrConfigHandler(entityId).pipe(tap((/**
             * @param {?} data
             * @return {?}
             */
            function (data) { return _this.chgdrConfigHandler = data; })));
        }
        else {
            return of(this.chgdrConfigHandler);
        }
    };
    /**
     * 更新dataCodeField数据
     * @param prevEntityId 原BeId
     * @param curEntityId 当前BeId
     */
    /**
     * 更新dataCodeField数据
     * @param {?} prevEntityId 原BeId
     * @param {?} curEntityId 当前BeId
     * @return {?}
     */
    ChgdrHeaderDatagridComponent.prototype.updateDataCodeFields = /**
     * 更新dataCodeField数据
     * @param {?} prevEntityId 原BeId
     * @param {?} curEntityId 当前BeId
     * @return {?}
     */
    function (prevEntityId, curEntityId) {
        var _this = this;
        if (curEntityId != null && curEntityId != prevEntityId) {
            //只有发生变更时才更新
            return this.chgdrService.getRootEntityDataCodeFields(curEntityId).pipe(tap((/**
             * @param {?} data
             * @return {?}
             */
            function (data) { return _this.dataCodeFields = data || []; })));
        }
        else {
            //否则直接返回当前值
            return of(this.dataCodeFields);
        }
    };
    /**
     * 格式化headers。主要是解析其中的dataCode，将其转为Object
     * 使用dataCodeObj存放dataCode解析后的结果
     * dataCodeObj属性在ChangeDataHeader中不存在，此处通过强制赋值使用，并且只限于该处使用。
     */
    /**
     * 格式化headers。主要是解析其中的dataCode，将其转为Object
     * 使用dataCodeObj存放dataCode解析后的结果
     * dataCodeObj属性在ChangeDataHeader中不存在，此处通过强制赋值使用，并且只限于该处使用。
     * @private
     * @param {?} headers
     * @return {?}
     */
    ChgdrHeaderDatagridComponent.prototype.formatHeaders = /**
     * 格式化headers。主要是解析其中的dataCode，将其转为Object
     * 使用dataCodeObj存放dataCode解析后的结果
     * dataCodeObj属性在ChangeDataHeader中不存在，此处通过强制赋值使用，并且只限于该处使用。
     * @private
     * @param {?} headers
     * @return {?}
     */
    function (headers) {
        var _this = this;
        if (!headers) {
            return;
        }
        headers.forEach((/**
         * @param {?} header
         * @return {?}
         */
        function (header) {
            /** @type {?} */
            var dataCodeObj;
            _this.formatDataCodeMap(header.dataCode);
            if (header.dataCode && header.dataCode.size == 1 && header.dataCode.has("_$dataCode")) {
                //兼容老数据
                //老数据dataCode为自由文本
                dataCodeObj = {};
                if (_this.dataCodeFields && _this.dataCodeFields.length > 0) {
                    dataCodeObj[_this.dataCodeFields[0].fieldLabelId] = header.dataCode.get("_$dataCode");
                }
            }
            else {
                dataCodeObj = MapUtil.convertMapToObject(header.dataCode);
            }
            ((/** @type {?} */ (header))).dataCodeObj = dataCodeObj;
        }));
    };
    /** 格式化业务主键Map */
    /**
     * 格式化业务主键Map
     * @private
     * @param {?} dataCode
     * @return {?}
     */
    ChgdrHeaderDatagridComponent.prototype.formatDataCodeMap = /**
     * 格式化业务主键Map
     * @private
     * @param {?} dataCode
     * @return {?}
     */
    function (dataCode) {
        var _this = this;
        if (!dataCode || !this.chgdrConfigHandler) {
            return;
        }
        Array.from(dataCode.keys()).forEach((/**
         * @param {?} fieldLabelId
         * @return {?}
         */
        function (fieldLabelId) {
            /** @type {?} */
            var value = dataCode.get(fieldLabelId);
            /** @type {?} */
            var formatedValue = _this.chgdrConfigHandler.formatMainObjectFieldValue(value, fieldLabelId);
            dataCode.set(fieldLabelId, formatedValue);
        }));
    };
    /**
     * @private
     * @param {?} chgdrs
     * @return {?}
     */
    ChgdrHeaderDatagridComponent.prototype.getEntityId = /**
     * @private
     * @param {?} chgdrs
     * @return {?}
     */
    function (chgdrs) {
        if (!chgdrs || !chgdrs.headers || chgdrs.headers.length == 0) {
            return null;
        }
        else {
            return chgdrs.headers[0].entityId;
        }
    };
    /**
     * @private
     * @param {?} entityId
     * @param {?} headers
     * @return {?}
     */
    ChgdrHeaderDatagridComponent.prototype.resetColumnAndData = /**
     * @private
     * @param {?} entityId
     * @param {?} headers
     * @return {?}
     */
    function (entityId, headers) {
        /** @type {?} */
        var columns = [
            { field: 'userName', width: 130, title: I18nUtil.instant("user-name-column-title") },
            { field: 'changeTime', width: 130, title: I18nUtil.instant("change-time-column-title"), formatter: { type: 'datetime', options: { format: I18nUtil.instant("change-time-column-format") } } },
            { field: 'operateType.name', width: 60, title: I18nUtil.instant("operation-type-title") },
            { field: 'dataId', width: 130, title: I18nUtil.instant("tech-pk-column-title"), visible: this.showDataId }
        ];
        //{field: 'dataCode', width: 130, title: '业务编号'},
        // {field: 'reason', width: 130, title: '变更原因'},
        this.dataCodeFields.forEach((/**
         * @param {?} field
         * @return {?}
         */
        function (field) {
            /** @type {?} */
            var column = {
                field: "dataCodeObj." + field.fieldLabelId,
                title: field.fieldName,
                width: 130
            };
            columns.push(column);
        }));
        /** @type {?} */
        var opColumn = { title: I18nUtil.instant("operation-column-title"), width: 130, template: this.opCell, halign: 'center', align: 'center' };
        columns.push(opColumn);
        this.columns = columns;
        this.headers = headers;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ChgdrHeaderDatagridComponent.prototype.onPageChanged = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.pageChanged.emit($event);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ChgdrHeaderDatagridComponent.prototype.onPageSizeChanged = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.pageSizeChanged.emit($event);
    };
    /**
     * @param {?} ctx
     * @return {?}
     */
    ChgdrHeaderDatagridComponent.prototype.clickShowChangeDetail = /**
     * @param {?} ctx
     * @return {?}
     */
    function (ctx) {
        var _this = this;
        /** @type {?} */
        var header = ctx.rowData;
        if (!header) {
            return;
        }
        if (!this.beforeShowChangeDetail) {
            //如果没有打开详情前回调，则按照默认方式打开
            this.showChangeDetail(header);
        }
        else {
            /** @type {?} */
            var event_1 = new BeforeShowChangeDetailEvent();
            event_1.header = header;
            this.beforeShowChangeDetail(event_1).subscribe((/**
             * @param {?} isShow
             * @return {?}
             */
            function (isShow) {
                if (isShow) {
                    _this.showChangeDetail(header);
                }
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                console.error("执行业务变更详情打开前事件报错：", err);
                _this.messageService.error("执行业务变更详情打开前事件报错：" + ErrorUtil.getErrorMessage(err));
            }));
        }
    };
    /**
     * @private
     * @param {?} header
     * @return {?}
     */
    ChgdrHeaderDatagridComponent.prototype.showChangeDetail = /**
     * @private
     * @param {?} header
     * @return {?}
     */
    function (header) {
        var _this = this;
        this.chgdrService.getChangeData(header.id, header.changeTime).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (!data) {
                _this.notifyService.error(I18nUtil.instant("can-not-found-change-record-by-id", { headerId: header.id }));
            }
            else {
                _this.currentChgdrData = data;
                _this.chgdrInfoDialog.show();
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            console.error("查询业务变更日志出错", error);
            _this.messageService.error(I18nUtil.instant("query-change-data-record-error", { errorMessage: ErrorUtil.getErrorMessage(error) }));
        }));
    };
    Object.defineProperty(ChgdrHeaderDatagridComponent.prototype, "showChangeDetailBtn", {
        get: /**
         * @return {?}
         */
        function () {
            return I18nUtil.instant("show-change-detail-btn");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChgdrHeaderDatagridComponent.prototype, "changeDetailDialogTitle", {
        get: /**
         * @return {?}
         */
        function () {
            return I18nUtil.instant("change-detail-dialog-title");
        },
        enumerable: true,
        configurable: true
    });
    ChgdrHeaderDatagridComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-chgdr-header-datagrid',
                    template: "<farris-datagrid #chgdrGrid idField=\"id\" [columns]=\"columns\" [data]=\"headers\"\n  showLineNumber=\"true\" [fit]=\"true\" [fitColumns]=\"true\" \n  [pagination]=\"true\" [pageSize]=\"20\" [showPageList]=\"false\" [pageIndex]=\"chgdrs.pageIndex\" [total]=\"chgdrs.total\"\n  (pageChanged)=\"onPageChanged($event)\" (pageSizeChanged)=\"onPageSizeChanged($event)\"\n>\n</farris-datagrid>\n<ng-template #opCell let-ctx>\n  <a href=\"javascript: void(0);\" (click)=\"clickShowChangeDetail(ctx)\">{{showChangeDetailBtn}}</a>\n</ng-template>\n\n<!-- \u67E5\u770B\u53D8\u66F4\u65E5\u5FD7\u7684\u5F39\u7A97 -->\n<farris-dialog #chgdrInfoDialog\n  [title]=\"changeDetailDialogTitle\"\n  [width]=\"1100\"\n  [height]=\"600\"\n  [showMaxButton]=\"true\"\n  [resizable]=\"true\"\n  [showButtons]=\"false\"\n>\n  <chgdr-data-viewer [data]=\"currentChgdrData\"></chgdr-data-viewer>\n</farris-dialog>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    ChgdrHeaderDatagridComponent.ctorParameters = function () { return [
        { type: ChgdrService },
        { type: MessagerService },
        { type: NotifyService },
        { type: ChangeDetectorRef },
        { type: ChgdrInnerService },
        { type: Injector }
    ]; };
    ChgdrHeaderDatagridComponent.propDecorators = {
        baseCls: [{ type: HostBinding, args: ['class.f-utils-fill',] }],
        chgdrs: [{ type: Input }],
        showDataId: [{ type: Input }],
        beforeShowChangeDetail: [{ type: Input }],
        pageChanged: [{ type: Output }],
        pageSizeChanged: [{ type: Output }],
        opCell: [{ type: ViewChild, args: ['opCell',] }],
        chgdrInfoDialog: [{ type: ViewChild, args: ["chgdrInfoDialog",] }]
    };
    return ChgdrHeaderDatagridComponent;
}());
export { ChgdrHeaderDatagridComponent };
if (false) {
    /** @type {?} */
    ChgdrHeaderDatagridComponent.prototype.baseCls;
    /** @type {?} */
    ChgdrHeaderDatagridComponent.prototype.chgdrs;
    /** @type {?} */
    ChgdrHeaderDatagridComponent.prototype.showDataId;
    /** @type {?} */
    ChgdrHeaderDatagridComponent.prototype.beforeShowChangeDetail;
    /** @type {?} */
    ChgdrHeaderDatagridComponent.prototype.headers;
    /** @type {?} */
    ChgdrHeaderDatagridComponent.prototype.dataCodeFields;
    /**
     * @type {?}
     * @private
     */
    ChgdrHeaderDatagridComponent.prototype.chgdrConfigHandler;
    /** @type {?} */
    ChgdrHeaderDatagridComponent.prototype.pageChanged;
    /** @type {?} */
    ChgdrHeaderDatagridComponent.prototype.pageSizeChanged;
    /** @type {?} */
    ChgdrHeaderDatagridComponent.prototype.opCell;
    /** @type {?} */
    ChgdrHeaderDatagridComponent.prototype.chgdrInfoDialog;
    /** @type {?} */
    ChgdrHeaderDatagridComponent.prototype.columns;
    /** @type {?} */
    ChgdrHeaderDatagridComponent.prototype.currentChgdrData;
    /** @type {?} */
    ChgdrHeaderDatagridComponent.prototype.I18nUtil;
    /**
     * @type {?}
     * @private
     */
    ChgdrHeaderDatagridComponent.prototype.chgdrService;
    /**
     * @type {?}
     * @private
     */
    ChgdrHeaderDatagridComponent.prototype.messageService;
    /**
     * @type {?}
     * @private
     */
    ChgdrHeaderDatagridComponent.prototype.notifyService;
    /**
     * @type {?}
     * @private
     */
    ChgdrHeaderDatagridComponent.prototype.ref;
    /**
     * @type {?}
     * @private
     */
    ChgdrHeaderDatagridComponent.prototype.chgdrInnerService;
    /**
     * @type {?}
     * @private
     */
    ChgdrHeaderDatagridComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hnZHItaGVhZGVyLWRhdGFncmlkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3AtY21wL2NoZ2RyLyIsInNvdXJjZXMiOlsibGliL2NoZ2RyLWhlYWRlci1kYXRhZ3JpZC9jaGdkci1oZWFkZXItZGF0YWdyaWQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFpQixXQUFXLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWhLLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUV4RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUUxRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFL0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFBRSxRQUFRLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2hELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUszQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUVuRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDbkQsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFdkU7SUFnQ0Usc0NBQW9CLFlBQTBCLEVBQ3BDLGNBQStCLEVBQy9CLGFBQTRCLEVB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LFFBQVEsQ0FBQyxPQUFPLENBQUMsNEJBQTRCLENBQUMsQ0FBQztRQUN4RCxDQUFDOzs7T0FBQTs7Z0JBek5GLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsMkJBQTJCO29CQUNyQyxvNEJBQXFEOztpQkFFdEQ7Ozs7Z0JBdEJRLFlBQVk7Z0JBRlosZUFBZTtnQkFDZixhQUFhO2dCQUpiLGlCQUFpQjtnQkFrQmpCLGlCQUFpQjtnQkFsQndDLFFBQVE7OzswQkE2QnZFLFdBQVcsU0FBQyxvQkFBb0I7eUJBQ2hDLEtBQUs7NkJBQ0wsS0FBSzt5Q0FFTCxLQUFLOzhCQU9MLE1BQU07a0NBRU4sTUFBTTt5QkFJTixTQUFTLFNBQUMsUUFBUTtrQ0FDbEIsU0FBUyxTQUFDLGlCQUFpQjs7SUFrTTlCLG1DQUFDO0NBQUEsQUExTkQsSUEwTkM7U0FyTlksNEJBQTRCOzs7SUFDdkMsK0NBQWtEOztJQUNsRCw4Q0FBdUM7O0lBQ3ZDLGtEQUFvQzs7SUFFcEMsOERBRW9GOztJQUVwRiwrQ0FBaUM7O0lBQ2pDLHNEQUF5Qzs7Ozs7SUFDekMsMERBQStDOztJQUMvQyxtREFDdUQ7O0lBQ3ZELHVEQUMyRDs7SUFHM0QsOENBQThDOztJQUM5Qyx1REFDaUM7O0lBRWpDLCtDQUFlOztJQUVmLHdEQUFtQzs7SUFDbkMsZ0RBQW1COzs7OztJQUVQLG9EQUFrQzs7Ozs7SUFDNUMsc0RBQXVDOzs7OztJQUN2QyxxREFBb0M7Ozs7O0lBQ3BDLDJDQUE4Qjs7Ozs7SUFDOUIseURBQTRDOzs7OztJQUM1QyxnREFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIEhvc3RCaW5kaW5nLCBJbmplY3RvciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0LCBTaW1wbGVDaGFuZ2VzLCBUZW1wbGF0ZVJlZiwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERhdGFDb2x1bW4gfSBmcm9tICdAZmFycmlzL3VpLWNvbW1vbi9jb2x1bW4nO1xyXG5pbXBvcnQgeyBEaWFsb2dDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLWRpYWxvZyc7XHJcbmltcG9ydCB7IE1lc3NhZ2VyU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbWVzc2FnZXInO1xyXG5pbXBvcnQgeyBOb3RpZnlTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1ub3RpZnknO1xyXG5pbXBvcnQgeyBDaGdkclNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlL2NoZ2RyLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBDaGFuZ2VEYXRhSGVhZGVyIH0gZnJvbSAnLi4vbW9kZWwvY2hhbmdlLWRhdGEtaGVhZGVyJztcclxuaW1wb3J0IHsgQ2hhbmdlRGF0YVF1ZXJ5UmVzdWx0IH0gZnJvbSAnLi4vbW9kZWwvY2hhbmdlLWRhdGEtcXVlcnktcmVzdWx0JztcclxuaW1wb3J0IHsgT3BlcmF0ZVR5cGUgfSBmcm9tICcuLi9tb2RlbC9vcGVyYXRlLXR5cGUnO1xyXG5pbXBvcnQgeyBFcnJvclV0aWwgfSBmcm9tICcuLi91dGlsL2Vycm9yLnV0aWwnO1xyXG5pbXBvcnQgeyBDaGdMb2dDb25maWdGaWVsZCB9IGZyb20gJy4uL21vZGVsL2NoZ2RyLWNvbmZpZy1maWVsZCc7XHJcbmltcG9ydCB7IHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgZm9ya0pvaW4sIE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IE1hcFV0aWwgfSBmcm9tICcuLi91dGlsL21hcC51dGlsJztcclxuaW1wb3J0IHsgQ2hnZHJNZXRhZGF0YVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlL2NoZ2RyLW1ldGFkYXRhLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBHU1BCdXNpbmVzc0VudGl0eSB9IGZyb20gJ0Bnc3AtYmVmL2dzcC1iZS1tZXRhZGF0YSc7XHJcbmltcG9ydCB7IEdTUE1ldGFkYXRhUlRTZXJ2aWNlIH0gZnJvbSAnQGdzcC1sY20vbWV0YWRhdGFydC1zZWxlY3Rvcic7XHJcbmltcG9ydCB7IEdTUENvbW1vbkVsZW1lbnQgfSBmcm9tICdAZ3NwLWJlZi9nc3AtY20tbWV0YWRhdGEnO1xyXG5pbXBvcnQgeyBDaGdkcklubmVyU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2UvY2hnZHItaW5uZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IENoZ2RyQ29uZmlnSGFuZGxlciB9IGZyb20gJy4uL3NlcnZpY2UvY2hnZHItY29uZmlnLWhhbmRsZXInO1xyXG5pbXBvcnQgeyBJMThuVXRpbCB9IGZyb20gJy4uL3NlcnZpY2UvaTE4bi1zZXJ2aWNlJztcclxuaW1wb3J0IHsgQmVmb3JlU2hvd0NoYW5nZURldGFpbEV2ZW50IH0gZnJvbSAnLi4vbW9kZWwvY2hnZHItdWktY29uZmlnJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnbGliLWNoZ2RyLWhlYWRlci1kYXRhZ3JpZCcsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL2NoZ2RyLWhlYWRlci1kYXRhZ3JpZC5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJy4vY2hnZHItaGVhZGVyLWRhdGFncmlkLmNvbXBvbmVudC5jc3MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgQ2hnZHJIZWFkZXJEYXRhZ3JpZENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5mLXV0aWxzLWZpbGwnKSBiYXNlQ2xzID0gdHJ1ZTtcclxuICBASW5wdXQoKSBjaGdkcnM6IENoYW5nZURhdGFRdWVyeVJlc3VsdDtcclxuICBASW5wdXQoKSBzaG93RGF0YUlkOiBib29sZWFuID0gdHJ1ZTtcclxuXHJcbiAgQElucHV0KClcclxuICAvKiog5omT5byA6K+m5oOF5YmN55qE5Zue6LCDICovXHJcbiAgYmVmb3JlU2hvd0NoYW5nZURldGFpbDogKGV2ZW50OiBCZWZvcmVTaG93Q2hhbmdlRGV0YWlsRXZlbnQpID0+IE9ic2VydmFibGU8Ym9vbGVhbj47XHJcblxyXG4gIGhlYWRlcnM6IENoYW5nZURhdGFIZWFkZXJbXSA9IFtdO1xyXG4gIGRhdGFDb2RlRmllbGRzOiBDaGdMb2dDb25maWdGaWVsZFtdID0gW107XHJcbiAgcHJpdmF0ZSBjaGdkckNvbmZpZ0hhbmRsZXI6IENoZ2RyQ29uZmlnSGFuZGxlcjtcclxuICBAT3V0cHV0KClcclxuICBwYWdlQ2hhbmdlZDogRXZlbnRFbWl0dGVyPG51bWJlcj4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgQE91dHB1dCgpXHJcbiAgcGFnZVNpemVDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8bnVtYmVyPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgLy8g6I635Y+W5a6a5LmJ55qE5Y2V5YWD5qC85qih5p2/XHJcbiAgQFZpZXdDaGlsZCgnb3BDZWxsJykgb3BDZWxsOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gIEBWaWV3Q2hpbGQoXCJjaGdkckluZm9EaWFsb2dcIilcclxuICBjaGdkckluZm9EaWFsb2c6IERpYWxvZ0NvbXBvbmVudDtcclxuXHJcbiAgY29sdW1uczogYW55W107XHJcblxyXG4gIGN1cnJlbnRDaGdkckRhdGE6IENoYW5nZURhdGFIZWFkZXI7XHJcbiAgSTE4blV0aWw6IEkxOG5VdGlsO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNoZ2RyU2VydmljZTogQ2hnZHJTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBtZXNzYWdlU2VydmljZTogTWVzc2FnZXJTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBub3RpZnlTZXJ2aWNlOiBOb3RpZnlTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSByZWY6IENoYW5nZURldGVjdG9yUmVmLFxyXG4gICAgcHJpdmF0ZSBjaGdkcklubmVyU2VydmljZTogQ2hnZHJJbm5lclNlcnZpY2UsXHJcbiAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3Rvcikge1xyXG4gIH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgICB0aGlzLnJlc2V0Q29sdW1uQW5kRGF0YShudWxsLCBbXSk7XHJcbiAgfVxyXG5cclxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XHJcbiAgICBpZiAoIWNoYW5nZXMuY2hnZHJzKSB7XHJcbiAgICAgIC8v5aaC5p6cY2hnZHJz5rKh5pyJ5pu05paw77yM5YiZ55u05o6l6L+U5ZueXHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgcHJldkVudGl0eUlkID0gdGhpcy5nZXRFbnRpdHlJZChjaGFuZ2VzLmNoZ2Rycy5wcmV2aW91c1ZhbHVlKTtcclxuICAgIGxldCBjdXJFbnRpdHlJZCA9IHRoaXMuZ2V0RW50aXR5SWQoY2hhbmdlcy5jaGdkcnMuY3VycmVudFZhbHVlKTtcclxuICAgIGxldCByZXF1ZXN0cyA9IFtcclxuICAgICAgdGhpcy51cGRhdGVDaGdkckNvbmZpZ0hhbmRsZXIoY3VyRW50aXR5SWQpLFxyXG4gICAgICB0aGlzLnVwZGF0ZURhdGFDb2RlRmllbGRzKHByZXZFbnRpdHlJZCwgY3VyRW50aXR5SWQpXHJcbiAgICBdXHJcbiAgICBmb3JrSm9pbihyZXF1ZXN0cykuc3Vic2NyaWJlKGRhdGEgPT4ge1xyXG4gICAgICBsZXQgY2hnZHJEYXRhczogQ2hhbmdlRGF0YVF1ZXJ5UmVzdWx0ID0gY2hhbmdlcy5jaGdkcnMuY3VycmVudFZhbHVlO1xyXG4gICAgICBpZiAoISFjaGdkckRhdGFzKSB7XHJcbiAgICAgICAgdGhpcy5mb3JtYXRIZWFkZXJzKGNoZ2RyRGF0YXMuaGVhZGVycyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8v5aaC5p6c5Lia5Yqh5a6e5L2T5Y+Y5pu077yM5YiZ6YeN572u5YiX5L+h5oGvXHJcbiAgICAgIGlmIChjdXJFbnRpdHlJZCAhPSBudWxsICYmIGN1ckVudGl0eUlkICE9IHByZXZFbnRpdHlJZCkge1xyXG4gICAgICAgIHRoaXMucmVzZXRDb2x1bW5BbmREYXRhKGN1ckVudGl0eUlkLCBjaGdkckRhdGFzLmhlYWRlcnMpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuaGVhZGVycyA9IGNoZ2RyRGF0YXMuaGVhZGVycztcclxuICAgICAgfVxyXG4gICAgfSwgZXJyID0+IHtcclxuICAgICAgY29uc29sZS5lcnJvcihcIuiOt+WPlkJF44CQXCIgKyBjdXJFbnRpdHlJZCArIFwi44CR55qE6YWN572u55qE5Lia5Yqh5Y+Y5pu05pel5b+X55qE5Lia5Yqh57yW5Y+35aSx6LSl77yaXCIsIGVycik7XHJcbiAgICAgIHRoaXMubWVzc2FnZVNlcnZpY2UuZXJyb3IoSTE4blV0aWwuaW5zdGFudChcImdldC1idXNpbmVzcy1jb2RlLWNvbmZpZy1lcnJvclwiLCB7IGVycm9yTWVzc2FnZTogRXJyb3JVdGlsLmdldEVycm9yTWVzc2FnZShlcnIpIH0pKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqIOabtOaWsOS4muWKoeWunuS9k+WFg+aVsOaNriAqL1xyXG4gIHByaXZhdGUgdXBkYXRlQ2hnZHJDb25maWdIYW5kbGVyKGVudGl0eUlkOiBzdHJpbmcpIHtcclxuICAgIGlmIChlbnRpdHlJZCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5jaGdkcklubmVyU2VydmljZS5nZXRDaGdkckNvbmZpZ0hhbmRsZXIoZW50aXR5SWQpLnBpcGUodGFwKGRhdGEgPT4gdGhpcy5jaGdkckNvbmZpZ0hhbmRsZXIgPSBkYXRhKSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gb2YodGhpcy5jaGdkckNvbmZpZ0hhbmRsZXIpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5pu05pawZGF0YUNvZGVGaWVsZOaVsOaNrlxyXG4gICAqIEBwYXJhbSBwcmV2RW50aXR5SWQg5Y6fQmVJZFxyXG4gICAqIEBwYXJhbSBjdXJFbnRpdHlJZCDlvZPliY1CZUlkXHJcbiAgICovXHJcbiAgdXBkYXRlRGF0YUNvZGVGaWVsZHMocHJldkVudGl0eUlkOiBzdHJpbmcsIGN1ckVudGl0eUlkOiBzdHJpbmcpIHtcclxuICAgIGlmIChjdXJFbnRpdHlJZCAhPSBudWxsICYmIGN1ckVudGl0eUlkICE9IHByZXZFbnRpdHlJZCkge1xyXG4gICAgICAvL+WPquacieWPkeeUn+WPmOabtOaXtuaJjeabtOaWsFxyXG4gICAgICByZXR1cm4gdGhpcy5jaGdkclNlcnZpY2UuZ2V0Um9vdEVudGl0eURhdGFDb2RlRmllbGRzKGN1ckVudGl0eUlkKS5waXBlKHRhcChkYXRhID0+IHRoaXMuZGF0YUNvZGVGaWVsZHMgPSBkYXRhIHx8IFtdKSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvL+WQpuWImeebtOaOpei/lOWbnuW9k+WJjeWAvFxyXG4gICAgICByZXR1cm4gb2YodGhpcy5kYXRhQ29kZUZpZWxkcyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmoLzlvI/ljJZoZWFkZXJz44CC5Li76KaB5piv6Kej5p6Q5YW25Lit55qEZGF0YUNvZGXvvIzlsIblhbbovazkuLpPYmplY3RcclxuICAgKiDkvb/nlKhkYXRhQ29kZU9iauWtmOaUvmRhdGFDb2Rl6Kej5p6Q5ZCO55qE57uT5p6cXHJcbiAgICogZGF0YUNvZGVPYmrlsZ7mgKflnKhDaGFuZ2VEYXRhSGVhZGVy5Lit5LiN5a2Y5Zyo77yM5q2k5aSE6YCa6L+H5by65Yi26LWL5YC85L2/55So77yM5bm25LiU5Y+q6ZmQ5LqO6K+l5aSE5L2/55So44CCXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBmb3JtYXRIZWFkZXJzKGhlYWRlcnM6IENoYW5nZURhdGFIZWFkZXJbXSkge1xyXG4gICAgaWYgKCFoZWFkZXJzKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGhlYWRlcnMuZm9yRWFjaChoZWFkZXIgPT4ge1xyXG4gICAgICBsZXQgZGF0YUNvZGVPYmo6IGFueTtcclxuICAgICAgdGhpcy5mb3JtYXREYXRhQ29kZU1hcChoZWFkZXIuZGF0YUNvZGUpO1xyXG4gICAgICBpZiAoaGVhZGVyLmRhdGFDb2RlICYmIGhlYWRlci5kYXRhQ29kZS5zaXplID09IDEgJiYgaGVhZGVyLmRhdGFDb2RlLmhhcyhcIl8kZGF0YUNvZGVcIikpIHtcclxuICAgICAgICAvL+WFvOWuueiAgeaVsOaNrlxyXG4gICAgICAgIC8v6ICB5pWw5o2uZGF0YUNvZGXkuLroh6rnlLHmlofmnKxcclxuICAgICAgICBkYXRhQ29kZU9iaiA9IHt9O1xyXG4gICAgICAgIGlmICh0aGlzLmRhdGFDb2RlRmllbGRzICYmIHRoaXMuZGF0YUNvZGVGaWVsZHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgZGF0YUNvZGVPYmpbdGhpcy5kYXRhQ29kZUZpZWxkc1swXS5maWVsZExhYmVsSWRdID0gaGVhZGVyLmRhdGFDb2RlLmdldChcIl8kZGF0YUNvZGVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGRhdGFDb2RlT2JqID0gTWFwVXRpbC5jb252ZXJ0TWFwVG9PYmplY3QoaGVhZGVyLmRhdGFDb2RlKTtcclxuICAgICAgfVxyXG4gICAgICAoPGFueT5oZWFkZXIpLmRhdGFDb2RlT2JqID0gZGF0YUNvZGVPYmo7XHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgLyoqIOagvOW8j+WMluS4muWKoeS4u+mUrk1hcCAqL1xyXG4gIHByaXZhdGUgZm9ybWF0RGF0YUNvZGVNYXAoZGF0YUNvZGU6IE1hcDxzdHJpbmcsIHN0cmluZz4pOiB2b2lkIHtcclxuICAgIGlmICghZGF0YUNvZGUgfHwgIXRoaXMuY2hnZHJDb25maWdIYW5kbGVyKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIEFycmF5LmZyb20oZGF0YUNvZGUua2V5cygpKS5mb3JFYWNoKGZpZWxkTGFiZWxJZCA9PiB7XHJcbiAgICAgIGxldCB2YWx1ZSA9IGRhdGFDb2RlLmdldChmaWVsZExhYmVsSWQpO1xyXG4gICAgICBsZXQgZm9ybWF0ZWRWYWx1ZSA9IHRoaXMuY2hnZHJDb25maWdIYW5kbGVyLmZvcm1hdE1haW5PYmplY3RGaWVsZFZhbHVlKHZhbHVlLCBmaWVsZExhYmVsSWQpO1xyXG4gICAgICBkYXRhQ29kZS5zZXQoZmllbGRMYWJlbElkLCBmb3JtYXRlZFZhbHVlKTtcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldEVudGl0eUlkKGNoZ2RyczogQ2hhbmdlRGF0YVF1ZXJ5UmVzdWx0KTogc3RyaW5nIHtcclxuICAgIGlmICghY2hnZHJzIHx8ICFjaGdkcnMuaGVhZGVycyB8fCBjaGdkcnMuaGVhZGVycy5sZW5ndGggPT0gMCkge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiBjaGdkcnMuaGVhZGVyc1swXS5lbnRpdHlJZDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgcmVzZXRDb2x1bW5BbmREYXRhKGVudGl0eUlkOiBzdHJpbmcsIGhlYWRlcnM6IENoYW5nZURhdGFIZWFkZXJbXSkge1xyXG4gICAgbGV0IGNvbHVtbnM6IGFueVtdID0gW1xyXG4gICAgICB7IGZpZWxkOiAndXNlck5hbWUnLCB3aWR0aDogMTMwLCB0aXRsZTogSTE4blV0aWwuaW5zdGFudChcInVzZXItbmFtZS1jb2x1bW4tdGl0bGVcIikgfSxcclxuICAgICAgeyBmaWVsZDogJ2NoYW5nZVRpbWUnLCB3aWR0aDogMTMwLCB0aXRsZTogSTE4blV0aWwuaW5zdGFudChcImNoYW5nZS10aW1lLWNvbHVtbi10aXRsZVwiKSwgZm9ybWF0dGVyOiB7IHR5cGU6ICdkYXRldGltZScsIG9wdGlvbnM6IHsgZm9ybWF0OiBJMThuVXRpbC5pbnN0YW50KFwiY2hhbmdlLXRpbWUtY29sdW1uLWZvcm1hdFwiKSB9IH0gfSxcclxuICAgICAgeyBmaWVsZDogJ29wZXJhdGVUeXBlLm5hbWUnLCB3aWR0aDogNjAsIHRpdGxlOiBJMThuVXRpbC5pbnN0YW50KFwib3BlcmF0aW9uLXR5cGUtdGl0bGVcIikgfSxcclxuICAgICAgeyBmaWVsZDogJ2RhdGFJZCcsIHdpZHRoOiAxMzAsIHRpdGxlOiBJMThuVXRpbC5pbnN0YW50KFwidGVjaC1way1jb2x1bW4tdGl0bGVcIiksIHZpc2libGU6IHRoaXMuc2hvd0RhdGFJZCB9XTtcclxuICAgIC8ve2ZpZWxkOiAnZGF0YUNvZGUnLCB3aWR0aDogMTMwLCB0aXRsZTogJ+S4muWKoee8luWPtyd9LFxyXG4gICAgLy8ge2ZpZWxkOiAncmVhc29uJywgd2lkdGg6IDEzMCwgdGl0bGU6ICflj5jmm7Tljp/lm6AnfSxcclxuICAgIHRoaXMuZGF0YUNvZGVGaWVsZHMuZm9yRWFjaCgoZmllbGQpID0+IHtcclxuICAgICAgbGV0IGNvbHVtbjogRGF0YUNvbHVtbiA9IHtcclxuICAgICAgICBmaWVsZDogXCJkYXRhQ29kZU9iai5cIiArIGZpZWxkLmZpZWxkTGFiZWxJZCxcclxuICAgICAgICB0aXRsZTogZmllbGQuZmllbGROYW1lLFxyXG4gICAgICAgIHdpZHRoOiAxMzBcclxuICAgICAgfTtcclxuICAgICAgY29sdW1ucy5wdXNoKGNvbHVtbik7XHJcbiAgICB9KVxyXG4gICAgbGV0IG9wQ29sdW1uID0geyB0aXRsZTogSTE4blV0aWwuaW5zdGFudChcIm9wZXJhdGlvbi1jb2x1bW4tdGl0bGVcIiksIHdpZHRoOiAxMzAsIHRlbXBsYXRlOiB0aGlzLm9wQ2VsbCwgaGFsaWduOiAnY2VudGVyJywgYWxpZ246ICdjZW50ZXInIH07XHJcbiAgICBjb2x1bW5zLnB1c2gob3BDb2x1bW4pO1xyXG5cclxuICAgIHRoaXMuY29sdW1ucyA9IGNvbHVtbnM7XHJcbiAgICB0aGlzLmhlYWRlcnMgPSBoZWFkZXJzO1xyXG4gIH1cclxuXHJcbiAgb25QYWdlQ2hhbmdlZCgkZXZlbnQpIHtcclxuICAgIHRoaXMucGFnZUNoYW5nZWQuZW1pdCgkZXZlbnQpO1xyXG4gIH1cclxuXHJcbiAgb25QYWdlU2l6ZUNoYW5nZWQoJGV2ZW50KSB7XHJcbiAgICB0aGlzLnBhZ2VTaXplQ2hhbmdlZC5lbWl0KCRldmVudCk7XHJcbiAgfVxyXG5cclxuICBjbGlja1Nob3dDaGFuZ2VEZXRhaWwoY3R4KSB7XHJcbiAgICBsZXQgaGVhZGVyOiBDaGFuZ2VEYXRhSGVhZGVyID0gY3R4LnJvd0RhdGE7XHJcbiAgICBpZiAoIWhlYWRlcikge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoIXRoaXMuYmVmb3JlU2hvd0NoYW5nZURldGFpbCkge1xyXG4gICAgICAvL+WmguaenOayoeacieaJk+W8gOivpuaDheWJjeWbnuiwg++8jOWImeaMieeFp+m7mOiupOaWueW8j+aJk+W8gFxyXG4gICAgICB0aGlzLnNob3dDaGFuZ2VEZXRhaWwoaGVhZGVyKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGxldCBldmVudDogQmVmb3JlU2hvd0NoYW5nZURldGFpbEV2ZW50ID0gbmV3IEJlZm9yZVNob3dDaGFuZ2VEZXRhaWxFdmVudCgpO1xyXG4gICAgICBldmVudC5oZWFkZXIgPSBoZWFkZXI7XHJcbiAgICAgIHRoaXMuYmVmb3JlU2hvd0NoYW5nZURldGFpbChldmVudCkuc3Vic2NyaWJlKChpc1Nob3cpID0+IHtcclxuICAgICAgICBpZiAoaXNTaG93KSB7XHJcbiAgICAgICAgICB0aGlzLnNob3dDaGFuZ2VEZXRhaWwoaGVhZGVyKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sIChlcnIpID0+IHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFwi5omn6KGM5Lia5Yqh5Y+Y5pu06K+m5oOF5omT5byA5YmN5LqL5Lu25oql6ZSZ77yaXCIsIGVycik7XHJcbiAgICAgICAgdGhpcy5tZXNzYWdlU2VydmljZS5lcnJvcihcIuaJp+ihjOS4muWKoeWPmOabtOivpuaDheaJk+W8gOWJjeS6i+S7tuaKpemUme+8mlwiICsgRXJyb3JVdGlsLmdldEVycm9yTWVzc2FnZShlcnIpKTtcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgc2hvd0NoYW5nZURldGFpbChoZWFkZXI6IENoYW5nZURhdGFIZWFkZXIpIHtcclxuICAgIHRoaXMuY2hnZHJTZXJ2aWNlLmdldENoYW5nZURhdGEoaGVhZGVyLmlkLCBoZWFkZXIuY2hhbmdlVGltZSkuc3Vic2NyaWJlKGRhdGEgPT4ge1xyXG4gICAgICBpZiAoIWRhdGEpIHtcclxuICAgICAgICB0aGlzLm5vdGlmeVNlcnZpY2UuZXJyb3IoSTE4blV0aWwuaW5zdGFudChcImNhbi1ub3QtZm91bmQtY2hhbmdlLXJlY29yZC1ieS1pZFwiLCB7IGhlYWRlcklkOiBoZWFkZXIuaWQgfSkpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuY3VycmVudENoZ2RyRGF0YSA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy5jaGdkckluZm9EaWFsb2cuc2hvdygpO1xyXG4gICAgICB9XHJcbiAgICB9LCBlcnJvciA9PiB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCLmn6Xor6LkuJrliqHlj5jmm7Tml6Xlv5flh7rplJlcIiwgZXJyb3IpO1xyXG4gICAgICB0aGlzLm1lc3NhZ2VTZXJ2aWNlLmVycm9yKEkxOG5VdGlsLmluc3RhbnQoXCJxdWVyeS1jaGFuZ2UtZGF0YS1yZWNvcmQtZXJyb3JcIiwgeyBlcnJvck1lc3NhZ2U6IEVycm9yVXRpbC5nZXRFcnJvck1lc3NhZ2UoZXJyb3IpIH0pKTtcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IHNob3dDaGFuZ2VEZXRhaWxCdG4oKSB7XHJcbiAgICByZXR1cm4gSTE4blV0aWwuaW5zdGFudChcInNob3ctY2hhbmdlLWRldGFpbC1idG5cIik7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGNoYW5nZURldGFpbERpYWxvZ1RpdGxlKCkge1xyXG4gICAgcmV0dXJuIEkxOG5VdGlsLmluc3RhbnQoXCJjaGFuZ2UtZGV0YWlsLWRpYWxvZy10aXRsZVwiKTtcclxuICB9XHJcbn1cclxuIl19