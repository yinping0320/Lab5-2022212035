import { CommonModule, registerLocaleData } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { SplitterModule } from '@farris/ui-splitter';
import { AngularDraggableModule } from '@farris/ui-draggable';
import { FarrisSectionModule } from '@farris/ui-section';
import { FarrisDatePickerModule } from '@farris/ui-datepicker';
import { TranslateDefaultParser, TranslateModule } from '@ngx-translate/core';
import { TreeTableModule } from '@farris/ui-treetable';
import { GSPMetadataRTService, MetadataRTSelectModule, GSPMetadataRTServiceModule } from '@gsp-lcm/metadatart-selector';
import { format } from 'date-fns';
import { GSPElementDataType, GSPElementObjectType } from '@gsp-bef/gsp-cm-metadata';
import zh from '@angular/common/locales/zh';
import { HttpService, SessionService, CacheService } from '@ecp-caf/caf-common';
import { DatagridModule } from '@farris/ui-datagrid';
import { BsModalService } from '@farris/ui-modal';
import { Injectable, Component, Injector, Input, ViewChild, NgModule, ComponentFactoryResolver, ChangeDetectorRef, EventEmitter, HostBinding, Output, defineInjectable, inject, INJECTOR } from '@angular/core';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { MessagerService, MessagerModule } from '@farris/ui-messager';
import { NotifyService, NotifyModule } from '@farris/ui-notify';
import { map, tap } from 'rxjs/operators';
import { of, forkJoin } from 'rxjs';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/model/change-data-header.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ChangeDataHeader {
}
class ChangeDataCompHeader extends ChangeDataHeader {
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/chgdr-data-viewer/chgdr-data.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 基本信息
 */
class ChgdrData {
}
/**
 * 发生变更的实体节点
 */
class ChgdrDataEntityNode {
}
/**
 * 发生变更的行
 */
class ChgdrDataRowNode {
}
class ChangeColumnItem {
    constructor() {
        /**
         * 如果当前字段为关联字段，则属性为当前字段的关联带出字段
         */
        this.children = [];
    }
}
class DataCodeField {
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/i18n/en.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const LangDataEn = {
    "chgdr-list-dialog-title": "Change data records",
    "base-info-section-title": "Base info",
    "change-detail-section-title": "Change detail",
    "empty-data-text": "Empty Data",
    "get-business-code-config-error": "Get business code config error: {{errorMessage}}",
    "user-name-column-title": "User",
    "change-time-column-title": "Time",
    "change-time-column-format": "yyyy-MM-dd HH:mm:ss",
    "operation-type-title": "Type",
    "tech-pk-column-title": "Tech PK",
    "operation-column-title": "Operation",
    "can-not-found-change-record-by-id": "Can not found change record 【{{headerId}}】",
    "query-change-data-record-error": "Query change data record error: {{errorMessage}}",
    "show-change-detail-btn": "Detail",
    "change-detail-dialog-title": "Change detail",
    "start-time-label": "Start",
    "end-time-label": "End",
    "query-btn": "Query",
    "technology-primary-key-label": "Tech PK",
    "change-user-label": "User",
    "change-time-label": "Time",
    "change-operate-type": "Type",
    "field-name-column-title": "Field",
    "value-column-title": "Value",
    "old-value-column-title": "Old value",
    "new-value-column-title": "New value",
    "operate-type-name-ADD": "Add",
    "operate-type-name-MODIFY": "Modify",
    "operate-type-name-DELETE": "Delete",
    "yes-text": "Yes",
    "no-text": "No",
    "business-code-text": "Business code"
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/i18n/zh-CHS.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const LangDataZhChs = {
    "chgdr-list-dialog-title": "变更日志列表",
    "base-info-section-title": "基本信息",
    "change-detail-section-title": "变更详情",
    "empty-data-text": "无数据",
    "get-business-code-config-error": "获取业务编号配置失败：{{errorMessage}}",
    "user-name-column-title": "用户",
    "change-time-column-title": "时间",
    "change-time-column-format": "yyyy年MM月dd日 HH:mm:ss",
    "operation-type-title": "操作类型",
    "tech-pk-column-title": "技术主键",
    "operation-column-title": "操作",
    "can-not-found-change-record-by-id": "未找到编号为【{{headerId}}】的变更日志",
    "query-change-data-record-error": "查询业务变更日志出错：{{errorMessage}}",
    "show-change-detail-btn": "变更详情",
    "change-detail-dialog-title": "变更日志详情",
    "start-time-label": "开始时间",
    "end-time-label": "结束时间",
    "query-btn": "查询",
    "technology-primary-key-label": "技术主键",
    "change-user-label": "变更人",
    "change-time-label": "变更时间",
    "change-operate-type": "变更方式",
    "field-name-column-title": "字段名",
    "value-column-title": "值",
    "old-value-column-title": "原值",
    "new-value-column-title": "变更值",
    "operate-type-name-ADD": "新增",
    "operate-type-name-MODIFY": "修改",
    "operate-type-name-DELETE": "删除",
    "yes-text": "是",
    "no-text": "否",
    "business-code-text": "业务编号"
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/i18n/zh-CHT.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const LangDataZhCht = {
    "chgdr-list-dialog-title": "變更日志列表",
    "base-info-section-title": "基本信息",
    "change-detail-section-title": "變更詳情",
    "empty-data-text": "無數據",
    "get-business-code-config-error": "獲取業務編號配置失敗：{{errorMessage}}",
    "user-name-column-title": "用戶",
    "change-time-column-title": "時間",
    "change-time-column-format": "yyyy年MM月dd日 HH:mm:ss",
    "operation-type-title": "操作類型",
    "tech-pk-column-title": "技術主鍵",
    "operation-column-title": "操作",
    "can-not-found-change-record-by-id": "未找到編號爲【{{headerId}}】的變更日志",
    "query-change-data-record-error": "查詢業務變更日志出錯：{{errorMessage}}",
    "show-change-detail-btn": "變更詳情",
    "change-detail-dialog-title": "變更日志詳情",
    "start-time-label": "開始時間",
    "end-time-label": "結束時間",
    "query-btn": "查詢",
    "technology-primary-key-label": "技術主鍵",
    "change-user-label": "變更人",
    "change-time-label": "變更時間",
    "change-operate-type": "變更方式",
    "field-name-column-title": "字段名",
    "value-column-title": "值",
    "old-value-column-title": "原值",
    "new-value-column-title": "變更值",
    "operate-type-name-ADD": "新增",
    "operate-type-name-MODIFY": "修改",
    "operate-type-name-DELETE": "刪除",
    "yes-text": "是",
    "no-text": "否",
    "business-code-text": "業務編號"
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/i18n-service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
let langResourceMap = new Map();
langResourceMap.set("en", LangDataEn);
langResourceMap.set("zh-CHS", LangDataZhChs);
langResourceMap.set("zh-CHT", LangDataZhCht);
/** @type {?} */
let currentLang = localStorage.getItem('languageCode');
if (!currentLang) {
    currentLang = "zh-CHS";
    console.log("未找到设置的语言，默认使用" + currentLang);
}
/** @type {?} */
let parser = new TranslateDefaultParser();
class I18nUtil {
    /**
     * @param {?} key
     * @param {?=} param
     * @return {?}
     */
    static instant(key, param) {
        /** @type {?} */
        let statement = I18nUtil.getCurrentLangResource()[key];
        if (statement === undefined || statement === null) {
            return key;
        }
        /** @type {?} */
        let result = parser.interpolate(statement, param);
        if (result === undefined || result === null) {
            return key;
        }
        return result;
    }
    /**
     * @private
     * @return {?}
     */
    static getCurrentLangResource() {
        return langResourceMap.get(currentLang) || {};
    }
    /**
     * @param {?} key
     * @param {?} defaultText
     * @return {?}
     */
    static instantOrDefault(key, defaultText) {
        /** @type {?} */
        let statement = I18nUtil.getCurrentLangResource()[key];
        if (statement === undefined || statement === null) {
            return defaultText;
        }
        /** @type {?} */
        let result = parser.interpolate(statement);
        if (result === undefined || result === null) {
            return defaultText;
        }
        return result;
    }
}
class I18nService {
    constructor() {
    }
    /**
     * @param {?} key
     * @param {?=} param
     * @return {?}
     */
    instant(key, param) {
        return I18nUtil.instant(key, param);
    }
    /**
     * @private
     * @return {?}
     */
    getCurrentLangResource() {
        return langResourceMap.get(currentLang) || {};
    }
    /**
     * @param {?} key
     * @param {?} defaultText
     * @return {?}
     */
    static staticInstant(key, defaultText) {
        return I18nUtil.instantOrDefault(key, defaultText);
    }
}
I18nService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
I18nService.ctorParameters = () => [];
/** @nocollapse */ I18nService.ngInjectableDef = defineInjectable({ factory: function I18nService_Factory() { return new I18nService(); }, token: I18nService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * Generated from: lib/chgdr-data-viewer/chgdr-data-builder.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ChgdrDataBuilder {
    /**
     * @param {?} data
     * @param {?} handler
     * @return {?}
     */
    buildChgdrData(data, handler) {
        this.handler = handler;
        //初始化变更日志基本信息
        /** @type {?} */
        let chgdrData = new ChgdrData();
        chgdrData.entityName = this.handler.getBeName();
        chgdrData.operateType = data.operateType;
        chgdrData.userName = data.userName;
        chgdrData.dataId = data.dataId;
        chgdrData.dataCode = data.dataCode;
        chgdrData.dataCodes = this.buildDataCodes(data.dataCode, this.handler.getMainObjectCode());
        chgdrData.reason = data.reason;
        chgdrData.changeTime = data.changeTime;
        chgdrData.entityNodes = [];
        //分层组织变更日志行
        /** @type {?} */
        let rowNodes = [];
        !!data.rows && data.rows.forEach((/**
         * @param {?} row
         * @return {?}
         */
        row => {
            if (!row) {
                return;
            }
            /** @type {?} */
            let rowNode = new ChgdrDataRowNode();
            rowNode.id = row.id;
            rowNode.parentDataId = row.parentDataId;
            rowNode.dataId = row.dataId;
            rowNode.dataCode = row.dataCode;
            rowNode.dataCodes = this.buildDataCodes(row.dataCode, row.entityCode);
            rowNode.entityCode = row.entityCode;
            rowNode.entityName = this.handler.getEntityNameOrDefault(row.entityCode);
            rowNode.operateType = row.operateType;
            rowNode.entityNodes = [];
            //组织列的变更信息
            /** @type {?} */
            let changeColumnKeys = this.extractChangeColumnKeys(row);
            /** @type {?} */
            let columnValueChanges = [];
            changeColumnKeys.forEach((/**
             * @param {?} key
             * @return {?}
             */
            (key) => {
                /** @type {?} */
                let column = new ChangeColumnItem();
                column.fieldLabel = key;
                column.fieldName = this.handler.getEntityFieldNameOrDefault(row.entityCode, key);
                column.oldValue = this.handler.formatFieldValue(row.oldContent.get(key), row.entityCode, key);
                column.newValue = this.handler.formatFieldValue(row.newContent.get(key), row.entityCode, key);
                /** @type {?} */
                let ele = this.handler.getElement(row.entityCode, key);
                if (ele) {
                    //判断是否是关联字段
                    column.hasAssociation = ele.ObjectType == "Association" && ele.IsUdt == false;
                    column.isAssociationRefField = ele.IsRefElement;
                    /** @type {?} */
                    let parentElement = this.handler.getParentElement(row.entityCode, key);
                    if (parentElement) {
                        column.belongFieldLabelId = parentElement.LabelID;
                    }
                }
                columnValueChanges.push(column);
            }));
            //变更值排序
            this.handler.sort(columnValueChanges, row.entityCode, (/**
             * @param {?} column
             * @return {?}
             */
            (column) => column.fieldLabel));
            //合并关联带出字段
            /** @type {?} */
            let columnMap = new Map();
            columnValueChanges.forEach((/**
             * @param {?} column
             * @return {?}
             */
            (column) => {
                columnMap.set(column.fieldLabel, column);
            }));
            //1. 移除所有关联带出字段，并附加到其所属关联字段的children属性上
            columnValueChanges = columnValueChanges.filter((/**
             * @param {?} column
             * @return {?}
             */
            (column) => {
                if (column.isAssociationRefField) {
                    /** @type {?} */
                    let parentColumn = columnMap.get(column.belongFieldLabelId);
                    if (parentColumn) {
                        //找到父级字段则添加为父
                        parentColumn.children.push(column);
                        return false;
                    }
                    else {
                        return true;
                    }
                }
                else {
                    return true;
                }
            }));
            //2. 转换关联字段，将其子级的变更值拼接作为其变更值
            columnValueChanges = columnValueChanges.map((/**
             * @param {?} column
             * @return {?}
             */
            column => {
                if (column.hasAssociation && column.children.length > 0) {
                    //如果是关联字段，且存在关联带出字段
                    /** @type {?} */
                    let virtualColumn = Object.assign(new ChangeColumnItem(), column);
                    virtualColumn.originalColumnItem = column;
                    virtualColumn.oldValue = column.children.map((/**
                     * @param {?} child
                     * @return {?}
                     */
                    child => child.oldValue)).join(";");
                    virtualColumn.newValue = column.children.map((/**
                     * @param {?} child
                     * @return {?}
                     */
                    child => child.newValue)).join(";");
                    return virtualColumn;
                }
                else {
                    return column;
                }
            }));
            rowNode.changes = columnValueChanges;
            rowNodes.push(rowNode);
        }));
        /**
         * dataId与变更行的Map
         * @type {?}
         */
        let dataIdRowMap = new Map();
        rowNodes.forEach((/**
         * @param {?} node
         * @return {?}
         */
        node => dataIdRowMap.set(node.dataId, node)));
        rowNodes.forEach((/**
         * @param {?} node
         * @return {?}
         */
        node => {
            if (!node.parentDataId) {
                //根节点
                /** @type {?} */
                let entityNode = this.genChgdrDataEntityNode(node.entityCode, node.entityName);
                entityNode.rows.push(node);
                chgdrData.entityNodes.push(entityNode);
                return;
            }
            /** @type {?} */
            let parentRowNode = dataIdRowMap.get(node.parentDataId);
            if (!!parentRowNode) {
                //上级节点存在的节点
                /** @type {?} */
                let entityNode = parentRowNode.entityNodes.find((/**
                 * @param {?} en
                 * @return {?}
                 */
                en => en.entityCode == node.entityCode));
                if (!entityNode) {
                    entityNode = this.genChgdrDataEntityNode(node.entityCode, node.entityName);
                    parentRowNode.entityNodes.push(entityNode);
                }
                entityNode.rows.push(node);
            }
            else {
                //上级节点不存在的节点
                //TODO 上级节点不存在的节点是否需要构造完整的上级结构？
                /** @type {?} */
                let entityNode = this.genChgdrDataEntityNode(node.entityCode, node.entityName);
                entityNode.rows.push(node);
                chgdrData.entityNodes.push(entityNode);
            }
        }));
        return chgdrData;
    }
    /**
     * @private
     * @param {?} dataCode
     * @param {?} entityCode
     * @return {?}
     */
    buildDataCodes(dataCode, entityCode) {
        /** @type {?} */
        let dataCodes = [];
        dataCode && dataCode.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        (value, key) => {
            /** @type {?} */
            let dataCodeField = new DataCodeField();
            if (key == "_$dataCode") {
                dataCodeField.fieldLabelId = "dataCode";
                dataCodeField.fieldName = I18nUtil.instantOrDefault("business-code-text", "业务编号");
                dataCodeField.fieldValue = value;
            }
            else {
                dataCodeField.fieldLabelId = key;
                dataCodeField.fieldName = this.handler.getEntityFieldNameOrDefault(entityCode, key);
                dataCodeField.fieldValue = this.handler.formatFieldValue(value, entityCode, key);
            }
            dataCodes.push(dataCodeField);
        }));
        //业务编号排序
        this.handler.sort(dataCodes, entityCode, (/**
         * @param {?} dataCode
         * @return {?}
         */
        (dataCode) => dataCode.fieldLabelId));
        return dataCodes;
    }
    /**
     * 得到新旧内容中所有的key
     * @private
     * @param {?} row
     * @return {?}
     */
    extractChangeColumnKeys(row) {
        /** @type {?} */
        let keysSet = new Set();
        row.oldContent && row.oldContent.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        (value, key) => keysSet.add(key)));
        row.newContent && row.newContent.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        (value, key) => keysSet.add(key)));
        /** @type {?} */
        const keys = Array.from(keysSet.keys());
        return keys;
    }
    /**
     * @private
     * @param {?} entityCode
     * @param {?} entityName
     * @return {?}
     */
    genChgdrDataEntityNode(entityCode, entityName) {
        /** @type {?} */
        let node = new ChgdrDataEntityNode();
        node.entityCode = entityCode;
        node.entityName = entityName;
        node.rows = [];
        return node;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/util/guid.util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Guid {
    /**
     * @return {?}
     */
    static newGuid() {
        /** @type {?} */
        const initString = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
        /** @type {?} */
        const result = initString.replace(/[xy]/g, (/**
         * @param {?} c
         * @return {?}
         */
        (c) => {
            return this.convert(c);
        }));
        return result;
    }
    /**
     * @private
     * @param {?} c
     * @return {?}
     */
    static convert(c) {
        // tslint:disable-next-line:no-bitwise
        /** @type {?} */
        const r = Math.random() * 16 | 0;
        // tslint:disable-next-line:no-bitwise
        /** @type {?} */
        const v = c === 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/chgdr-data-viewer/chgdr-tree-builder.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// 参考： Farris TreeTable的节点结构
// export interface TreeNode {
//     id?: string;
//     data: any;
//     /** 叶子节点图标 */
//     icon?: any;
//     /** 节点展开图标 */
//     expandedIcon?: any;
//     /** 节点折叠图标 */
//     collapsedIcon?: any;
//     /** 子节点 */
//     children?: TreeNode[];
//     /** 是否为叶子节点 */
//     leaf?: boolean;
//     /** 是否展开 */
//     expanded?: boolean;
//     type?: string;
//     /** 父节点 */
//     parent?: TreeNode;
//     /** 是否允许选中 */
//     selectable?: boolean;
//  }
class ChgdrTreeNode {
}
class ChgdrTreeBuilder {
    /**
     * @param {?} chgdrData
     * @return {?}
     */
    build(chgdrData) {
        this.chgdrData = chgdrData;
        if (chgdrData.entityNodes.length == 0) {
            console.warn("无变更日志");
            return [];
        }
        /** @type {?} */
        let rootEntityNode = chgdrData.entityNodes[0];
        /** @type {?} */
        let rootRows = rootEntityNode.rows;
        if (rootRows.length == 0) {
            console.warn("无根变更日志行");
            return [];
        }
        /** @type {?} */
        let rootRow = rootRows[0];
        /** @type {?} */
        let node = this.rowToNode(rootRow);
        node.isRoot = true;
        node.expanded = true;
        return [node];
    }
    /**
     * @private
     * @param {?} row
     * @return {?}
     */
    rowToNode(row) {
        /** @type {?} */
        const node = new ChgdrTreeNode();
        node.id = Guid.newGuid();
        node.name = this.buildTreeNodeName(row);
        node.data = {
            id: node.id,
            name: node.name
        };
        node.chgdrRow = row;
        node.chgdrData = this.chgdrData;
        node.children = [];
        row.entityNodes.forEach((/**
         * @param {?} entityNode
         * @return {?}
         */
        entityNode => {
            entityNode.rows.forEach((/**
             * @param {?} childRow
             * @return {?}
             */
            childRow => {
                /** @type {?} */
                const childNode = this.rowToNode(childRow);
                childNode.parent = node;
                node.children.push(childNode);
            }));
        }));
        return node;
    }
    /**
     * @private
     * @param {?} row
     * @return {?}
     */
    buildTreeNodeName(row) {
        /** @type {?} */
        let dataCodeName;
        if (row.dataCodes && row.dataCodes.length > 0) {
            dataCodeName = row.dataCodes[0].fieldValue;
        }
        if (dataCodeName) {
            return row.entityName + "-" + dataCodeName + "【" + row.operateType.name + "】";
        }
        else {
            return row.entityName + "【" + row.operateType.name + "】";
        }
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/chgdr-metadata.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ChgdrMetadataService {
    /**
     * @param {?} http
     * @param {?} sessionService
     * @param {?} metadataService
     * @param {?} injector
     */
    constructor(http, sessionService, metadataService, injector) {
        this.http = http;
        this.sessionService = sessionService;
        this.metadataService = metadataService;
        this.injector = injector;
        this.beMetadataCache = new Map();
    }
    /**
     * 获取BE元数据
     * @param {?} beId
     * @return {?}
     */
    getGSPBusinessEntity(beId) {
        if (this.beMetadataCache.has(beId)) {
            /** @type {?} */
            let be = this.beMetadataCache.get(beId);
            return of(be);
        }
        else {
            return this.metadataService.GetMetadataRT(beId).pipe(map((/**
             * @param {?} metadata
             * @return {?}
             */
            metadata => {
                /** @type {?} */
                const be = JSON.parse(metadata.content);
                this.beMetadataCache.set(beId, be);
                return be;
            })));
        }
    }
}
ChgdrMetadataService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
ChgdrMetadataService.ctorParameters = () => [
    { type: HttpService },
    { type: SessionService },
    { type: GSPMetadataRTService },
    { type: Injector }
];
/** @nocollapse */ ChgdrMetadataService.ngInjectableDef = defineInjectable({ factory: function ChgdrMetadataService_Factory() { return new ChgdrMetadataService(inject(HttpService), inject(SessionService), inject(GSPMetadataRTService), inject(INJECTOR)); }, token: ChgdrMetadataService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/chgdr-config.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const ServerIP = '/';
/** @type {?} */
const chgdrUrl = `${ServerIP}api/runtime/chgdr/v1.0`;
class ChgdrConfigService {
    /**
     * @param {?} http
     * @param {?} sessionService
     * @param {?} injector
     */
    constructor(http, sessionService, injector) {
        this.http = http;
        this.sessionService = sessionService;
        this.injector = injector;
    }
    /**
     * 根据业务实体ID获取所有的配置信息
     * @param {?} beId
     * @return {?}
     */
    getBeChgdrConfig(beId) {
        /** @type {?} */
        let queryUrl = `${chgdrUrl}/config?beId=${beId}`;
        return ((/** @type {?} */ ((/** @type {?} */ (this.http.get(queryUrl)))))).pipe(tap((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            /** @type {?} */
            let configEntities = data || [];
            configEntities.forEach((/**
             * @param {?} entity
             * @return {?}
             */
            entity => {
                //处理字段顺序号
                /** @type {?} */
                let fields = entity.fields || [];
                //赋予老数据默认顺序号
                fields.forEach((/**
                 * @param {?} field
                 * @param {?} index
                 * @return {?}
                 */
                (field, index) => {
                    if (field.showIndex === undefined || field.showIndex === null) {
                        field.showIndex = index;
                    }
                }));
                //按照顺序号排序
                entity.fields = fields.sort((/**
                 * @param {?} a
                 * @param {?} b
                 * @return {?}
                 */
                (a, b) => a.showIndex - b.showIndex));
                //根据排序结果重置顺序号
                fields.forEach((/**
                 * @param {?} field
                 * @param {?} index
                 * @return {?}
                 */
                (field, index) => {
                    field.showIndex = index;
                }));
            }));
        })));
    }
}
ChgdrConfigService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
ChgdrConfigService.ctorParameters = () => [
    { type: HttpService },
    { type: SessionService },
    { type: Injector }
];
/** @nocollapse */ ChgdrConfigService.ngInjectableDef = defineInjectable({ factory: function ChgdrConfigService_Factory() { return new ChgdrConfigService(inject(HttpService), inject(SessionService), inject(INJECTOR)); }, token: ChgdrConfigService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/chgdr-config-handler.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ChgdrConfigHandler {
    /**
     * @param {?} be
     * @param {?} entityConfigs
     */
    constructor(be, entityConfigs) {
        this.entityCodeMap = new Map();
        this.entityFieldMap = new Map();
        this.entityFieldShowOrderMap = new Map();
        this.entityFieldParentMap = new Map();
        this.entityFieldConfigMap = new Map();
        //初始化所有BE对象信息
        this.be = be;
        if (!!be) {
            /** @type {?} */
            let mainObject = be.MainObject;
            this.updateEntityMap(mainObject, this.entityCodeMap, this.entityFieldMap);
        }
        //初始化配置信息
        this.entityConfigs = entityConfigs || [];
        this.updateEntityConfigs();
        //更新显示顺序
        this.updateShowIndex();
    }
    /**
     * 更新显示顺序号
     * @private
     * @return {?}
     */
    updateShowIndex() {
        /** @type {?} */
        let entityFieldShowOrderMap = new Map();
        //首先用BE字段顺序赋予初始顺序，避免配置中无顺序号造成显示错乱
        this.entityFieldMap.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        (value, key) => {
            entityFieldShowOrderMap.set(key, entityFieldShowOrderMap.size);
        }));
        //然后用配置顺序替代初始顺序
        this.entityFieldConfigMap.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        (value, key) => {
            if (value.showIndex !== undefined && value.showIndex !== null) {
                entityFieldShowOrderMap.set(key, value.showIndex);
            }
        }));
        this.entityFieldShowOrderMap = entityFieldShowOrderMap;
    }
    /**
     * 更新配置信息的相关数据
     * @private
     * @return {?}
     */
    updateEntityConfigs() {
        /** @type {?} */
        let fieldConfigMap = new Map();
        this.entityConfigs.forEach((/**
         * @param {?} entityConfig
         * @return {?}
         */
        entityConfig => {
            /** @type {?} */
            let tabCode = entityConfig.tabCode;
            (entityConfig.fields || []).forEach((/**
             * @param {?} field
             * @return {?}
             */
            field => {
                /** @type {?} */
                let fieldLabel = field.fieldLabelId;
                /** @type {?} */
                let key = tabCode + "#" + fieldLabel;
                fieldConfigMap.set(key, field);
            }));
        }));
        this.entityFieldConfigMap = fieldConfigMap;
    }
    /**
     * @private
     * @param {?} entity
     * @param {?} entityCodeMap
     * @param {?} entityFieldMap
     * @return {?}
     */
    updateEntityMap(entity, entityCodeMap, entityFieldMap) {
        if (!entity) {
            return;
        }
        entityCodeMap.set(entity.Code, entity);
        //实体对象的字段信息
        entity.ContainElements.forEach((/**
         * @param {?} ele
         * @return {?}
         */
        ele => {
            this.updateEntityFieldMap(entity, ele, null, entityFieldMap);
        }));
        //处理子节点信息
        /** @type {?} */
        let children = entity.ContainChildObjects;
        if (!children || !children.length) {
            return;
        }
        children.forEach((/**
         * @param {?} childEntity
         * @return {?}
         */
        childEntity => {
            this.updateEntityMap(childEntity, entityCodeMap, entityFieldMap);
        }));
    }
    /**
     * 更新BE节点的指定字段信息，如果该字段是关联字段，同时更新其带出字段
     * @private
     * @param {?} entity
     * @param {?} element
     * @param {?} parentElement
     * @param {?} entityFieldMap
     * @return {?}
     */
    updateEntityFieldMap(entity, element, parentElement, entityFieldMap) {
        /** @type {?} */
        let key = entity.Code + "#" + element.LabelID;
        entityFieldMap.set(key, element);
        if (parentElement) {
            this.entityFieldParentMap.set(key, parentElement);
        }
        /** @type {?} */
        const childAssociations = element.ChildAssociations;
        if (!!childAssociations && childAssociations.length > 0) {
            childAssociations.forEach((/**
             * @param {?} childAssociation
             * @return {?}
             */
            childAssociation => {
                /** @type {?} */
                const refElementCollection = childAssociation.RefElementCollection;
                if (!!refElementCollection && refElementCollection.length > 0) {
                    refElementCollection.forEach((/**
                     * @param {?} rele
                     * @return {?}
                     */
                    rele => {
                        this.updateEntityFieldMap(entity, rele, element, entityFieldMap);
                    }));
                }
            }));
        }
    }
    /**
     * @param {?} items
     * @param {?} entityCode
     * @param {?} fieldLabelIdFunc
     * @return {?}
     */
    sort(items, entityCode, fieldLabelIdFunc) {
        items.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            /** @type {?} */
            const aKey = entityCode + "#" + fieldLabelIdFunc(a);
            /** @type {?} */
            const bKey = entityCode + "#" + fieldLabelIdFunc(b);
            if (!this.entityFieldShowOrderMap.has(aKey) && !this.entityFieldShowOrderMap.has(bKey)) {
                //如果双方均无顺序号，则按照自然排序
                return aKey.localeCompare(bKey);
            }
            else if (!this.entityFieldShowOrderMap.has(aKey)) {
                //如果有一方无顺序号，则无顺序号的靠后
                return -1;
            }
            else if (!this.entityFieldShowOrderMap.has(bKey)) {
                //如果有一方无顺序号，则无顺序号的靠后
                return 1;
            }
            else {
                //如果两方都有顺序号，则按照顺序号排序
                /** @type {?} */
                const aOrder = this.entityFieldShowOrderMap.get(aKey);
                /** @type {?} */
                const bOrder = this.entityFieldShowOrderMap.get(bKey);
                return aOrder - bOrder;
            }
        }));
    }
    /**
     * 格式化主对象节点中字段的值
     * @param {?} originalValue
     * @param {?} fieldLabelId
     * @return {?}
     */
    formatMainObjectFieldValue(originalValue, fieldLabelId) {
        /** @type {?} */
        let entityCode = this.getMainObjectCode();
        return this.formatFieldValue(originalValue, entityCode, fieldLabelId);
    }
    /**
     * 格式化字段值
     * @param {?} originalValue
     * @param {?} entityCode
     * @param {?} fieldLabelId
     * @return {?}
     */
    formatFieldValue(originalValue, entityCode, fieldLabelId) {
        /** @type {?} */
        let element = this.getElement(entityCode, fieldLabelId);
        if (!element) {
            console.error("未找到业务实体【" + this.be.ID + "-" + this.be.Name + "】节点【" + entityCode + "】的字段【" + fieldLabelId + "】");
            return originalValue;
        }
        if (!element) {
            return originalValue;
        }
        try {
            //处理历史遗留的数字格式
            if ((element.MDataType == GSPElementDataType.Decimal || element.MDataType == GSPElementDataType.Integer)
                && originalValue && originalValue.toLowerCase().includes("e")) {
                //如果字段是数字类型，且是科学计数法格式
                //转为十进制格式显示
                /** @type {?} */
                let num = Number(originalValue);
                if (isNaN(num)) {
                    console.log("业务实体【" + this.be.ID + "-" + this.be.Name + "】节点【" + entityCode + "】的字段【" + fieldLabelId + "】的值不是有效的数字格式：" + originalValue);
                    return originalValue;
                }
                else {
                    /** @type {?} */
                    let result = this.toNonExponential(num);
                    return result;
                }
            }
            //处理布尔值类型
            if (element.MDataType == GSPElementDataType.Boolean) {
                //注意：new Boolean("false") == true
                if (originalValue === null || originalValue === undefined || originalValue.length == 0) {
                    return originalValue;
                }
                else if (originalValue.toLowerCase() == "false") {
                    return I18nUtil.instantOrDefault("no-text", "否");
                }
                else if (originalValue.toLowerCase() == "true") {
                    return I18nUtil.instantOrDefault("yes-text", "是");
                }
                else {
                    return originalValue;
                }
            }
            //处理日期格式
            if (element.MDataType == GSPElementDataType.Date) {
                if (originalValue === null || originalValue === undefined || originalValue.length == 0) {
                    //不包含值，直接返回原始值
                    return originalValue;
                }
                else {
                    /** @type {?} */
                    let date = new Date(originalValue);
                    /** @type {?} */
                    let str = format(date, "yyyy-MM-dd");
                    return str;
                }
            }
            //处理日期时间格式
            if (element.MDataType == GSPElementDataType.DateTime) {
                if (originalValue === null || originalValue === undefined || originalValue.length == 0) {
                    //不包含值，直接返回原始值
                    return originalValue;
                }
                else {
                    /** @type {?} */
                    let date = new Date(originalValue);
                    /** @type {?} */
                    let str = format(date, "yyyy-MM-dd HH:mm:ss");
                    return str;
                }
            }
            //处理枚举格式
            if (element.ObjectType == GSPElementObjectType.Enum) {
                /** @type {?} */
                let enumValues = element.ContainEnumValues || [];
                /** @type {?} */
                let enumValue = enumValues.find((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item.Value == originalValue));
                if (enumValue) {
                    return enumValue.Name;
                }
                else if (originalValue === null || originalValue === undefined || originalValue.length == 0) {
                    //如果找不到对应的枚举项，并且原始值为空，说明未赋值，不报错
                    return originalValue;
                }
                else {
                    //打印异常
                    console.log("业务实体【" + this.be.ID + "-" + this.be.Name + "】节点【" + entityCode + "】的字段【" + fieldLabelId + "】的值未找到匹配的枚举项：" + originalValue);
                    return originalValue;
                }
            }
            return originalValue;
        }
        catch (error) {
            console.error("业务实体【" + this.be.ID + "-" + this.be.Name + "】节点【" + entityCode + "】的字段【" + fieldLabelId + "】的值【" + originalValue + "】格式化出错：", error);
            return originalValue;
        }
    }
    /**
     * JavaScript中科学计数法转化为数值字符串形式。
     * 以下两种情况，JavaScript 会自动将数值转为科学计数法表示
     * (1) 小于1且小数点后面带有6个0以上的浮点数值：
     * (2) 整数位数字多于21位：
     * 首先看看整数位数字多于21位的情况，其实这个一般不会碰到，整数位数字多于21位已经超出了 JavaScript 精确整数范围。
     * 这个方法用于处理小数问题
     * from：https://www.cnblogs.com/xianfengzhike/p/9939029.html
     * @private
     * @param {?} num
     * @return {?}
     */
    toNonExponential(num) {
        /** @type {?} */
        var m = num.toExponential().match(/\d(?:\.(\d*))?e([+-]\d+)/);
        return num.toFixed(Math.max(0, (m[1] || '').length - m[2]));
    }
    /**
     * @return {?}
     */
    getBeName() {
        return this.be ? this.be.Name : null;
    }
    /**
     * @return {?}
     */
    getMainObjectCode() {
        return this.be && this.be.MainObject ? this.be.MainObject.Code : null;
    }
    /**
     * @param {?} entityCode
     * @param {?} fieldLabelId
     * @return {?}
     */
    getElement(entityCode, fieldLabelId) {
        /** @type {?} */
        let key = entityCode + "#" + fieldLabelId;
        return this.entityFieldMap.get(key);
    }
    /**
     * @param {?} entityCode
     * @param {?} fieldLabelId
     * @return {?}
     */
    getParentElement(entityCode, fieldLabelId) {
        /** @type {?} */
        let key = entityCode + "#" + fieldLabelId;
        return this.entityFieldParentMap.get(key);
    }
    /**
     * @param {?} entityCode
     * @return {?}
     */
    getEntityNameOrDefault(entityCode) {
        /** @type {?} */
        let entity = this.entityCodeMap.get(entityCode);
        return !!entity ? entity.Name : entityCode;
    }
    /**
     * @param {?} entityCode
     * @param {?} fieldLabelId
     * @return {?}
     */
    getEntityFieldNameOrDefault(entityCode, fieldLabelId) {
        /** @type {?} */
        let key = entityCode + "#" + fieldLabelId;
        /** @type {?} */
        let fieldConfig = this.entityFieldConfigMap.get(key);
        if (fieldConfig && fieldConfig.fieldName && fieldConfig.fieldName != "") {
            //优先返回配置的名称
            return fieldConfig.fieldName;
        }
        //如果不存在配置名称，则返回BE字段名称
        /** @type {?} */
        let ele = this.entityFieldMap.get(key);
        return !!ele ? ele.Name : fieldLabelId;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/chgdr-inner.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ChgdrInnerService {
    /**
     * @param {?} http
     * @param {?} sessionService
     * @param {?} metadataService
     * @param {?} chgdrMetadataService
     * @param {?} chgdrConfigService
     * @param {?} injector
     */
    constructor(http, sessionService, metadataService, chgdrMetadataService, chgdrConfigService, injector) {
        this.http = http;
        this.sessionService = sessionService;
        this.metadataService = metadataService;
        this.chgdrMetadataService = chgdrMetadataService;
        this.chgdrConfigService = chgdrConfigService;
        this.injector = injector;
        this.beMetadataCache = new Map();
    }
    /**
     * 获取BE元数据
     * @param {?} beId
     * @return {?}
     */
    getChgdrConfigHandler(beId) {
        if (this.beMetadataCache.has(beId)) {
            /** @type {?} */
            let be = this.beMetadataCache.get(beId);
            return of(be);
        }
        else {
            /** @type {?} */
            let requests = [];
            requests.push(this.chgdrMetadataService.getGSPBusinessEntity(beId));
            requests.push(this.chgdrConfigService.getBeChgdrConfig(beId));
            return forkJoin(requests).pipe(map((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                /** @type {?} */
                const be = data[0];
                /** @type {?} */
                const entityConfigs = data[1] || [];
                /** @type {?} */
                const handler = new ChgdrConfigHandler(be, entityConfigs);
                this.beMetadataCache.set(beId, handler);
                return handler;
            })));
        }
    }
}
ChgdrInnerService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
ChgdrInnerService.ctorParameters = () => [
    { type: HttpService },
    { type: SessionService },
    { type: GSPMetadataRTService },
    { type: ChgdrMetadataService },
    { type: ChgdrConfigService },
    { type: Injector }
];
/** @nocollapse */ ChgdrInnerService.ngInjectableDef = defineInjectable({ factory: function ChgdrInnerService_Factory() { return new ChgdrInnerService(inject(HttpService), inject(SessionService), inject(GSPMetadataRTService), inject(ChgdrMetadataService), inject(ChgdrConfigService), inject(INJECTOR)); }, token: ChgdrInnerService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * Generated from: lib/chgdr-data-viewer/chgdr-data-viewer.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ChgdrDataViewerComponent {
    /**
     * @param {?} metadataService
     * @param {?} injector
     * @param {?} chgdrMetadataService
     * @param {?} chgdrConfigService
     * @param {?} chgdrInnerService
     */
    constructor(metadataService, injector, chgdrMetadataService, chgdrConfigService, chgdrInnerService) {
        this.metadataService = metadataService;
        this.injector = injector;
        this.chgdrMetadataService = chgdrMetadataService;
        this.chgdrConfigService = chgdrConfigService;
        this.chgdrInnerService = chgdrInnerService;
        this.showDataId = false;
        this.treeConfig = {
            idField: 'id',
            columns: [
                { field: 'name', title: 'Name', width: 200 }
            ],
            /**
             * 叶子节点图标
             */
            leafIcon: 'f-icon f-icon-page-title-type text-info mr-2',
            /**
             * 节点展开图标
             */
            expandIcon: 'f-icon f-icon-file-folder-open text-info mr-2',
            /**
             * 节点折叠图标
             */
            collapseIcon: 'f-icon f-icon-file-folder-close text-info mr-2',
            showLevel: -1,
            disabled: false,
            init: false,
            selectValues: []
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!!this.data) {
            /** @type {?} */
            let beId = this.data.entityId;
            this.chgdrInnerService.getChgdrConfigHandler(beId).subscribe((/**
             * @param {?} handler
             * @return {?}
             */
            handler => {
                this.chgdrData = new ChgdrDataBuilder().buildChgdrData(this.data, handler);
                this.treeData = new ChgdrTreeBuilder().build(this.chgdrData);
                if (this.treeTableComponent) {
                    //移除已选中项。
                    //避免更换数据源后，treeGrid找不到之前的选中数据，导致控制台告警
                    this.treeTableComponent.clearSelections();
                }
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.treeTableComponent.selectNode(this.treeData[0].id);
                }), 0);
            }));
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    handleTreeSelection($event) {
        /** @type {?} */
        const node = $event.node;
        if (this.currentNode != null && this.currentNode.id == node.id) {
            //如果选中相同节点，直接返回
            return;
        }
        this.currentNode = node;
    }
    /**
     * @return {?}
     */
    get baseInfoSectionTitle() {
        return I18nUtil.instant("base-info-section-title");
    }
    /**
     * @return {?}
     */
    get changeDetailSectionTitle() {
        return I18nUtil.instant("change-detail-section-title");
    }
    /**
     * @return {?}
     */
    get emptyDataText() {
        return I18nUtil.instant("empty-data-text");
    }
}
ChgdrDataViewerComponent.decorators = [
    { type: Component, args: [{
                selector: 'chgdr-data-viewer',
                template: "<farris-splitter *ngIf=\"!!chgdrData\" class=\"row flex-fill farris-split-section\" style=\"margin: 0px;\">\r\n  <farris-splitter-pane [ngResizable]=true [rzMinWidth]=\"250\" [rzHandles]=\"'e'\" style=\"padding:0.3rem 0 0.3rem 0.3rem;\"\r\n    class=\"d-flex flex-column farris-lsection f-col-w4\">\r\n    <farris-treetable #treeTable class=\"f-utils-fill\" style=\"overflow-y: auto;\" [columns]=\"treeConfig.columns\" [showBorder]=\"false\" [showHeader]=\"false\"\r\n      [data]=\"treeData\" [idField]=\"treeConfig.idField\" [singleSelect]=\"true\" [showCheckbox]=\"false\"\r\n      [showIcon]=\"true\" [disabled]=\"treeConfig.disabled\" [checkOnSelect]=\"true\"\r\n      (nodeSelected)=\"handleTreeSelection($event)\" [leafIcon]=\"treeConfig.leafIcon\"\r\n      [expandIcon]=\"treeConfig.expandIcon\" [collapseIcon]=\"treeConfig.collapseIcon\"\r\n      [selectValues]=\"treeConfig.selectValues\">\r\n    </farris-treetable>\r\n  </farris-splitter-pane>\r\n  <farris-splitter-pane class=\"farris-rsection farris-overflow-y-auto f-utils-fill-flex-column\" style=\"padding:0 0 0 0.3rem\">\r\n    <farris-section [mainTitle]=\"baseInfoSectionTitle\" [enableMaximize]=\"false\" [enableAccordion]=\"'default'\">\r\n      <lib-chgdr-row-baseinfo-form [chgdrTreeNode]=\"currentNode\" [showDataId]=\"showDataId\"></lib-chgdr-row-baseinfo-form>\r\n    </farris-section>\r\n    <farris-section [mainTitle]=\"changeDetailSectionTitle\" [enableMaximize]=\"false\" [fill]=\"true\" class=\"pt-0\">\r\n      <lib-chgdr-row-grid *ngIf=\"!!currentNode && currentNode.chgdrRow.changes.length>0\" [chgdrTreeNode]=\"currentNode\" class=\"f-utils-fill\"></lib-chgdr-row-grid>\r\n      <div class=\"f-datagrid-norecords\" *ngIf=\"!currentNode || currentNode.chgdrRow.changes.length==0\" style=\"height: 250px;\">\r\n        <div class=\"f-datagrid-norecords-content\" style=\"width: 100%;\">\r\n            {{emptyDataText}}\r\n        </div>\r\n      </div>\r\n    </farris-section>\r\n  </farris-splitter-pane>\r\n</farris-splitter>",
                styles: [":host{display:flex;height:100%}"]
            }] }
];
/** @nocollapse */
ChgdrDataViewerComponent.ctorParameters = () => [
    { type: GSPMetadataRTService },
    { type: Injector },
    { type: ChgdrMetadataService },
    { type: ChgdrConfigService },
    { type: ChgdrInnerService }
];
ChgdrDataViewerComponent.propDecorators = {
    data: [{ type: Input }],
    showDataId: [{ type: Input }],
    treeTableComponent: [{ type: ViewChild, args: ["treeTable",] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/model/operate-type.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class OperateType {
    /**
     * @private
     * @param {?} ordinal
     * @param {?} code
     * @param {?} defaultName
     */
    constructor(ordinal, code, defaultName) {
        this.ordinal = ordinal;
        this.code = code;
        this.defaultName = defaultName;
    }
    /**
     * @return {?}
     */
    get name() {
        return I18nUtil.instantOrDefault("operate-type-name-" + this.code, this.defaultName);
    }
    /**
     * @return {?}
     */
    static values() {
        return [OperateType.ADD, OperateType.MODIFY, OperateType.DELETE];
    }
    /**
     * @return {?}
     */
    toJson() {
        return this.code;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    static parse(obj) {
        if (obj === undefined || obj === null) {
            return null;
        }
        if (obj instanceof OperateType) {
            return obj;
        }
        if (typeof obj === "string") {
            return OperateType.values().find((/**
             * @param {?} ot
             * @return {?}
             */
            ot => ot.code == obj));
        }
        if (typeof obj === "number") {
            return OperateType.values().find((/**
             * @param {?} ot
             * @return {?}
             */
            ot => ot.ordinal == obj));
        }
        if (!!obj.code) {
            return OperateType.values().find((/**
             * @param {?} ot
             * @return {?}
             */
            ot => ot.code == obj.code));
        }
        return null;
    }
}
/**
 * 新增
 */
OperateType.ADD = new OperateType(0, "ADD", "新增");
/**
 * 修改
 */
OperateType.MODIFY = new OperateType(1, "MODIFY", "修改");
/**
 * 删除
 */
OperateType.DELETE = new OperateType(2, "DELETE", "删除");

/**
 * @fileoverview added by tsickle
 * Generated from: lib/util/map.util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MapUtil {
    /**
     * 将Map转为Object，便于序列化。（因为JSON.stringfy(Map)返回的值总为{}）
     * @param {?} map
     * @return {?}
     */
    static convertMapToObject(map$$1) {
        if (!map$$1) {
            return null;
        }
        /** @type {?} */
        let obj = Object.create(null);
        map$$1.forEach((/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        (value, key) => {
            obj[key] = value;
        }));
        return obj;
    }
    /**
     * 将Object转为Map，因为JSON.parse无法识别类型，反序列化后只能是Object类型
     * @param {?} obj
     * @return {?}
     */
    static convertObjectToMap(obj) {
        if (obj === undefined || obj === null) {
            return null;
        }
        /** @type {?} */
        let strMap = new Map();
        for (let k of Object.keys(obj)) {
            strMap.set(k, obj[k]);
        }
        return strMap;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/chgdr.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const ServerIP$1 = '/';
/** @type {?} */
const chgdrUrl$1 = `${ServerIP$1}api/runtime/chgdr/v1.0`;
class ChgdrService {
    /**
     * @param {?} http
     * @param {?} sessionService
     * @param {?} injector
     */
    constructor(http, sessionService, injector) {
        this.http = http;
        this.sessionService = sessionService;
        this.injector = injector;
        this.rootDataCodeFieldsMap = new Map();
    }
    /**
     * @param {?} currentQueryParam
     * @return {?}
     */
    queryChangeDataHeader(currentQueryParam) {
        /** @type {?} */
        let obj = Object.assign({}, currentQueryParam);
        if (currentQueryParam.dataCode) {
            obj.dataCode = MapUtil.convertMapToObject(currentQueryParam.dataCode);
        }
        /** @type {?} */
        let json = JSON.stringify(obj);
        /** @type {?} */
        let queryParam = encodeURIComponent(json);
        /** @type {?} */
        let url = `${chgdrUrl$1}?queryParam=${queryParam}`;
        return this.http.get(url).pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            if (!data) {
                return data;
            }
            /** @type {?} */
            let queryResult = (/** @type {?} */ ((/** @type {?} */ (data))));
            queryResult && queryResult.headers && queryResult.headers.forEach((/**
             * @param {?} header
             * @return {?}
             */
            header => {
                //TODO 待删，兼容老数据格式
                if (typeof header.dataCode == "string") {
                    header.dataCode = JSON.parse(header.dataCode);
                }
                header.dataCode = MapUtil.convertObjectToMap(header.dataCode);
                header.changeTime = this.toDate(header.changeTime);
                header.operateType = OperateType.parse(header.operateType);
            }));
            return queryResult;
        })));
    }
    /**
     * @param {?} beId
     * @return {?}
     */
    getRootEntityDataCodeFields(beId) {
        if (!beId) {
            return of([]);
        }
        if (this.rootDataCodeFieldsMap.has(beId)) {
            //直接从缓存中获取
            return of(this.rootDataCodeFieldsMap.get(beId));
        }
        else {
            //获取结果并存入缓存
            /** @type {?} */
            let url = `${chgdrUrl$1}/rootDataCodeFields?beId=${beId}`;
            return ((/** @type {?} */ ((/** @type {?} */ ((this.http.get(url)))))))
                .pipe(tap((/**
             * @param {?} data
             * @return {?}
             */
            data => this.rootDataCodeFieldsMap.set(beId, data))));
        }
    }
    /**
     * 将字符串或数字转为Date
     * @private
     * @param {?} date
     * @return {?}
     */
    toDate(date) {
        if (typeof date == "string") {
            return new Date(date);
        }
        else if (typeof date == "number") {
            return new Date(date);
        }
        else {
            return date;
        }
    }
    /**
     * @param {?} idOrParam
     * @param {?=} changeTime
     * @return {?}
     */
    getChangeData(idOrParam, changeTime) {
        if (idOrParam == null) {
            throw new Error("id can not be null");
        }
        if (idOrParam instanceof String || typeof idOrParam == "string") {
            return this.getChangeDataById((/** @type {?} */ (idOrParam)), changeTime);
        }
        else {
            return this.getChangeDataByParam(idOrParam);
        }
    }
    /**
     * @private
     * @param {?} id
     * @param {?} changeTime
     * @return {?}
     */
    getChangeDataById(id, changeTime) {
        /** @type {?} */
        let json = JSON.stringify(changeTime);
        /** @type {?} */
        let queryParam = encodeURIComponent(json);
        /** @type {?} */
        let url = `${chgdrUrl$1}/${id}?changeTime=${queryParam}`;
        return this.http.get(url).pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            return this.transChangeDataFromResponse(data);
        })));
    }
    /**
     * @private
     * @param {?} param
     * @return {?}
     */
    getChangeDataByParam(param) {
        if (param == null) {
            throw new Error("ChgdrItemQueryParam can not be null");
        }
        /** @type {?} */
        let requestParam = {};
        Object.assign(requestParam, param);
        //将Map转为Object，否则无法正常序列化
        requestParam.dataIds = MapUtil.convertMapToObject(param.dataIds);
        /** @type {?} */
        let url = `${chgdrUrl$1}`;
        return this.http.post(url, requestParam).pipe(map((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            return this.transChangeDataFromResponse(data);
        })));
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    transChangeDataFromResponse(data) {
        if (!data) {
            return data;
        }
        /** @type {?} */
        let sh = (/** @type {?} */ ((/** @type {?} */ (data))));
        //TODO 待删，兼容老数据格式
        if (typeof sh.dataCode == "string") {
            sh.dataCode = JSON.parse(sh.dataCode);
        }
        sh.dataCode = MapUtil.convertObjectToMap(sh.dataCode);
        sh.changeTime = this.toDate(sh.changeTime);
        sh.operateType = OperateType.parse(sh.operateType);
        sh.rows = this.transChangeDataRowsFromResponse(sh.rows || []);
        return sh;
    }
    /**
     * @private
     * @param {?} rows
     * @return {?}
     */
    transChangeDataRowsFromResponse(rows) {
        if (!rows || rows.length == 0) {
            return rows;
        }
        rows.forEach((/**
         * @param {?} row
         * @return {?}
         */
        row => {
            if (!row) {
                return;
            }
            row.operateType = OperateType.parse(row.operateType);
            //TODO 待删，兼容老数据格式
            if (typeof row.dataCode == "string") {
                row.dataCode = JSON.parse(row.dataCode);
            }
            row.dataCode = MapUtil.convertObjectToMap(row.dataCode);
            row.oldContent = (/** @type {?} */ (MapUtil.convertObjectToMap(row.oldContent))) || new Map();
            row.newContent = (/** @type {?} */ (MapUtil.convertObjectToMap(row.newContent))) || new Map();
        }));
        return rows;
    }
}
ChgdrService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ChgdrService.ctorParameters = () => [
    { type: HttpService },
    { type: SessionService },
    { type: Injector }
];
/** @nocollapse */ ChgdrService.ngInjectableDef = defineInjectable({ factory: function ChgdrService_Factory() { return new ChgdrService(inject(HttpService), inject(SessionService), inject(INJECTOR)); }, token: ChgdrService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * Generated from: lib/model/change-data-query-param.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ChangeDataQueryParam {
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/model/change-data-query-result.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ChangeDataQueryResult {
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/util/error.util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ErrorUtil {
    /**
     * @param {?} e
     * @return {?}
     */
    static getErrorMessage(e) {
        if (!e) {
            return "";
        }
        else if (!e.error) {
            return "";
        }
        else if (!e.error.Message) {
            return "";
        }
        else {
            return e.error.Message;
        }
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/util/time.util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TimeUtil {
    /**
     * @param {?} date
     * @return {?}
     */
    static getStartTimeInDay(date) {
        /** @type {?} */
        let d = new Date(date);
        d.setHours(0);
        d.setMinutes(0);
        d.setSeconds(0);
        d.setMilliseconds(0);
        return d;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    static getEndTimeInDay(date) {
        /** @type {?} */
        let d = new Date(date);
        d.setHours(23);
        d.setMinutes(59);
        d.setSeconds(59);
        d.setMilliseconds(999);
        return d;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/chgdr-list/chgdr-list.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ChgdrListComponent {
    /**
     * @param {?} chgdrService
     * @param {?} messageService
     * @param {?} notifyService
     * @param {?} injector
     */
    constructor(chgdrService, messageService, notifyService, injector) {
        this.chgdrService = chgdrService;
        this.messageService = messageService;
        this.notifyService = notifyService;
        this.injector = injector;
        this.baseCls = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        let chgdrs = new ChangeDataQueryResult();
        chgdrs.total = 0;
        chgdrs.pageSize = 20;
        chgdrs.pageIndex = 1;
        chgdrs.headers = [];
        this.chgdrs = chgdrs;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!this.changeTimeStart && !this.changeTimeEnd) {
            //未录入变更时间范围，则查询最近一周的
            this.changeTimeEnd = TimeUtil.getEndTimeInDay(new Date());
            this.changeTimeStart = TimeUtil.getStartTimeInDay(new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000));
        }
        else if (!this.changeTimeEnd) {
            //如果未设置截至时间，则与开始时间相同
            this.changeTimeEnd = TimeUtil.getEndTimeInDay(this.changeTimeStart);
        }
        else if (!this.changeTimeStart) {
            //如果未设置开始时间，则与截至时间相同
            this.changeTimeStart = TimeUtil.getEndTimeInDay(this.changeTimeEnd);
        }
        if (!!this.entityId) {
            /** @type {?} */
            let param = this.buildQueryParam();
            this.doQuery(param);
        }
    }
    /**
     * @return {?}
     */
    query() {
        /** @type {?} */
        let param = this.buildQueryParam();
        this.doQuery(param);
    }
    /**
     * @private
     * @return {?}
     */
    buildQueryParam() {
        /** @type {?} */
        let param = new ChangeDataQueryParam();
        param.pageIndex = 1;
        param.pageSize = 20;
        param.entityId = this.entityId;
        param.dataId = this.dataId;
        param.changeTimeStart = this.changeTimeStart;
        param.changeTimeEnd = this.changeTimeEnd;
        return param;
    }
    /**
     * @private
     * @param {?} param
     * @return {?}
     */
    doQuery(param) {
        this.chgdrService.queryChangeDataHeader(param).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            this.currentQueryParam = param;
            this.chgdrs = data;
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            console.error("查询业务变更日志出错", error);
            this.messageService.error(I18nUtil.instant("query-change-data-record-error", { errorMessage: ErrorUtil.getErrorMessage(error) }));
        }));
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onPageChanged($event) {
        if (!$event) {
            return;
        }
        if ($event.pageIndex) {
            this.currentQueryParam.pageIndex = $event.pageIndex;
        }
        if ($event.pageSize) {
            this.currentQueryParam.pageSize = $event.pageSize;
        }
        this.doQuery(this.currentQueryParam);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onPageSizeChanged($event) {
        this.currentQueryParam.pageSize = $event;
        this.doQuery(this.currentQueryParam);
    }
    /**
     * @return {?}
     */
    get startTimeLabel() {
        return I18nUtil.instant("start-time-label");
    }
    /**
     * @return {?}
     */
    get endTimeLabel() {
        return I18nUtil.instant("end-time-label");
    }
    /**
     * @return {?}
     */
    get queryBtn() {
        return I18nUtil.instant("query-btn");
    }
}
ChgdrListComponent.decorators = [
    { type: Component, args: [{
                selector: 'chgdr-list',
                template: "<div class=\"farris-form farris-form-controls-inline\" style=\"background: #fff;\">\n  <form class=\"f-section-formgroup\" style=\"padding-top: 10px;\">\n    <div class=\"f-section-formgroup-inputs\">\n      <div class=\"col-12 row\">\n        <div class=\"farris-group-wrap col-5\">\n          <div class=\"form-group farris-form-group\">\n            <label class=\"col-form-label\">\n              <span class=\"farris-label-info text-danger\">*</span><span class=\"farris-label-text\">{{startTimeLabel}}</span>\n            </label>\n            <div class=\"farris-input-wrap\">\n              <farris-datepicker [(ngModel)]=\"changeTimeStart\" name=\"changeTimeStart\"></farris-datepicker>\n            </div>\n          </div>\n        </div>\n        <div class=\"farris-group-wrap col-5\">\n          <div class=\"form-group farris-form-group\">\n            <label class=\"col-form-label\">\n              <span class=\"farris-label-info text-danger\">*</span><span class=\"farris-label-text\">{{endTimeLabel}}</span>\n            </label>\n            <div class=\"farris-input-wrap\">\n              <farris-datepicker [(ngModel)]=\"changeTimeEnd\" name=\"changeTimeEnd\"></farris-datepicker>\n            </div>\n          </div>\n        </div>\n        <div class=\"farris-group-wrap col-2\">\n          <div class=\"form-group farris-form-group\">\n            <label class=\"col-form-label\">\n              <button class=\"btn btn-primary mr-2\" (click)=\"query()\">{{queryBtn}}</button>\n            </label>\n            <div class=\"farris-input-wrap\">\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </form>\n</div>\n\n<lib-chgdr-header-datagrid\n  [chgdrs]=\"chgdrs\" \n  (pageChanged)=\"onPageChanged($event)\" \n  (pageSizeChanged)=\"onPageSizeChanged($event)\"\n  [showDataId]=\"false\"\n  [beforeShowChangeDetail]=\"beforeShowChangeDetail\"\n></lib-chgdr-header-datagrid>\n\n<!-- <div class=\"f-utils-fill\">\n  <farris-datagrid #chgdrGrid idField=\"id\" [columns]=\"columns\" [data]=\"chgdrs.headers\"\n  showLineNumber=\"true\" [fit]=\"true\" [fitColumns]=\"true\" \n  [pagination]=\"true\" [pageSize]=\"20\" [showPageList]=\"false\" [pageIndex]=\"chgdrs.pageIndex\" [total]=\"chgdrs.total\"\n  (pageChanged)=\"onPageChanged($event)\" (pageSizeChanged)=\"onPageSizeChanged($event)\"\n  >\n  </farris-datagrid>\n  <ng-template #opCell let-ctx>\n    <a href=\"javascript: void(0);\" (click)=\"showChangeDetail(ctx)\">\u53D8\u66F4\u8BE6\u60C5</a>\n  </ng-template>\n</div> -->\n\n<!-- \u67E5\u770B\u53D8\u66F4\u65E5\u5FD7\u7684\u5F39\u7A97 -->\n<!-- <farris-dialog #chgdrInfoDialog\n  title=\"\u53D8\u66F4\u65E5\u5FD7\u8BE6\u60C5\"\n  [width]=\"1100\"\n  [height]=\"600\"\n  [showMaxButton]=\"true\"\n  [resizable]=\"true\"\n  [showButtons]=\"false\"\n>\n  <chgdr-data-viewer [data]=\"currentChgdrData\"></chgdr-data-viewer>\n</farris-dialog> -->",
                styles: [""]
            }] }
];
/** @nocollapse */
ChgdrListComponent.ctorParameters = () => [
    { type: ChgdrService },
    { type: MessagerService },
    { type: NotifyService },
    { type: Injector }
];
ChgdrListComponent.propDecorators = {
    baseCls: [{ type: HostBinding, args: ['class.f-utils-fill-flex-column',] }],
    entityId: [{ type: Input }],
    dataId: [{ type: Input }],
    changeTimeStart: [{ type: Input }],
    changeTimeEnd: [{ type: Input }],
    beforeShowChangeDetail: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/chgdr-row-baseinfo-form/chgdr-row-baseinfo-form.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ChgdrRowBaseinfoFormComponent {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        this.showDataId = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    get technologyPrimaryKeyLabel() {
        return I18nUtil.instant("technology-primary-key-label");
    }
    /**
     * @return {?}
     */
    get changeUserLabel() {
        return I18nUtil.instant("change-user-label");
    }
    /**
     * @return {?}
     */
    get changeTimeLabel() {
        return I18nUtil.instant("change-time-label");
    }
    /**
     * @return {?}
     */
    get changeOperateType() {
        return I18nUtil.instant("change-operate-type");
    }
}
ChgdrRowBaseinfoFormComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-chgdr-row-baseinfo-form',
                template: "<div *ngIf=\"!!chgdrTreeNode\" class=\"farris-form farris-form-controls-inline\">\r\n  <form class=\"f-section-formgroup\">\r\n    <div class=\"f-section-formgroup-inputs\">\r\n      <div class=\"col-12 row\">\r\n\r\n        <div class=\"farris-group-wrap col-6\" *ngIf=\"showDataId\">\r\n          <div class=\"form-group farris-form-group\">\r\n            <label class=\"col-form-label\">\r\n              <span class=\"farris-label-text\">{{technologyPrimaryKeyLabel}}</span>\r\n            </label>\r\n            <div class=\"farris-input-wrap\">\r\n              <input type=\"text\" class=\"form-control\" [ngModel]=\"chgdrTreeNode.chgdrRow.dataId\" name=\"dataId\"\r\n                [readonly]=\"true\">\r\n              <div class=\"farris-feedback valid-feedback\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"farris-group-wrap col-6\" *ngFor=\"let field of chgdrTreeNode.chgdrRow.dataCodes\">\r\n          <div class=\"form-group farris-form-group\">\r\n            <label class=\"col-form-label\">\r\n              <span class=\"farris-label-text\">{{field.fieldName}}</span>\r\n            </label>\r\n            <div class=\"farris-input-wrap\">\r\n              <input type=\"text\" class=\"form-control\" [ngModel]=\"field.fieldValue\" name=\"dataCode-{{field.fieldName}}\"\r\n                [readonly]=\"true\">\r\n              <div class=\"farris-feedback valid-feedback\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div *ngIf=\"chgdrTreeNode.isRoot\" class=\"farris-group-wrap col-6\">\r\n          <div class=\"form-group farris-form-group\">\r\n            <label class=\"col-form-label\">\r\n              <span class=\"farris-label-text\">{{changeUserLabel}}</span>\r\n            </label>\r\n            <div class=\"farris-input-wrap\">\r\n              <input type=\"text\" class=\"form-control\" [ngModel]=\"chgdrTreeNode.chgdrData.userName\" name=\"userName\"\r\n                [readonly]=\"true\">\r\n              <div class=\"farris-feedback valid-feedback\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div *ngIf=\"chgdrTreeNode.isRoot\" class=\"farris-group-wrap col-6\">\r\n          <div class=\"form-group farris-form-group\">\r\n            <label class=\"col-form-label\">\r\n              <span class=\"farris-label-text\">{{changeTimeLabel}}</span>\r\n            </label>\r\n            <div class=\"farris-input-wrap\">\r\n              <input type=\"text\" class=\"form-control\" value=\"{{chgdrTreeNode.chgdrData.changeTime | date:'yyyy-MM-dd HH:mm:ss'}}\" name=\"changeTime\"\r\n                [readonly]=\"true\">\r\n              <div class=\"farris-feedback valid-feedback\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"farris-group-wrap col-6\">\r\n          <div class=\"form-group farris-form-group\">\r\n            <label class=\"col-form-label\">\r\n              <span class=\"farris-label-text\">{{changeOperateType}}</span>\r\n            </label>\r\n            <div class=\"farris-input-wrap\">\r\n              <input type=\"text\" class=\"form-control\" [ngModel]=\"chgdrTreeNode.chgdrRow.operateType.name\" name=\"operateType\"\r\n              [readonly]=\"true\">\r\n              <div class=\"farris-feedback valid-feedback\"></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>",
                styles: [""]
            }] }
];
/** @nocollapse */
ChgdrRowBaseinfoFormComponent.ctorParameters = () => [
    { type: Injector }
];
ChgdrRowBaseinfoFormComponent.propDecorators = {
    chgdrTreeNode: [{ type: Input }],
    showDataId: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/chgdr-row-grid/chgdr-row-grid.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ChgdrRowGridComponent {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.columns = [
            { field: 'fieldName', width: 130, title: this.fieldNameColumnTitle },
            { field: 'oldValue', width: 130, title: this.oldValueColumnTitle, showTips: true },
            { field: 'newValue', width: 130, title: this.newValueColumnTitle, showTips: true }
        ];
        /** @type {?} */
        let oldValueField = this.columns[1];
        /** @type {?} */
        let newValueField = this.columns[2];
        if (!!this.chgdrTreeNode) {
            //根据初始的变更类型更改显示列的信息
            //此处不能直接调用DataGrid组件的方法更改，因为此处尚未创建DataGrid
            /** @type {?} */
            let type = this.chgdrTreeNode.chgdrRow.operateType;
            if (type == OperateType.ADD) {
                oldValueField.visible = false;
                newValueField.title = this.valueColumnTitle;
            }
            else if (type == OperateType.DELETE) {
                newValueField.visible = false;
                oldValueField.title = this.valueColumnTitle;
            }
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        //原来变更行类型
        /** @type {?} */
        let oldType;
        if (!changes.chgdrTreeNode) {
            oldType = null;
        }
        else if (!changes.chgdrTreeNode.previousValue) {
            oldType = null;
        }
        else {
            oldType = changes.chgdrTreeNode.previousValue.chgdrRow.operateType;
        }
        //现在变更行类型
        /** @type {?} */
        let newType;
        if (!changes.chgdrTreeNode) {
            newType = null;
        }
        else if (!changes.chgdrTreeNode.currentValue) {
            newType = null;
        }
        else {
            newType = changes.chgdrTreeNode.currentValue.chgdrRow.operateType;
        }
        if (oldType == newType || !this.dataGrid || !this.dataGrid.columns) ;
        else if (newType == OperateType.ADD) {
            this.dataGrid.showColumn("newValue");
            this.dataGrid.hideColumn("oldValue");
            this.dataGrid.setColumnTitle("newValue", this.valueColumnTitle);
        }
        else if (newType == OperateType.DELETE) {
            this.dataGrid.showColumn("oldValue");
            this.dataGrid.hideColumn("newValue");
            this.dataGrid.setColumnTitle("oldValue", this.valueColumnTitle);
        }
        else {
            this.dataGrid.showColumn("oldValue");
            this.dataGrid.showColumn("newValue");
            this.dataGrid.setColumnTitle("oldValue", this.oldValueColumnTitle);
            this.dataGrid.setColumnTitle("newValue", this.newValueColumnTitle);
        }
        if (changes.chgdrTreeNode && changes.chgdrTreeNode.currentValue) {
            this.data = changes.chgdrTreeNode.currentValue.chgdrRow.changes;
        }
    }
    /**
     * @private
     * @return {?}
     */
    get fieldNameColumnTitle() {
        return I18nUtil.instant("field-name-column-title");
    }
    /**
     * @private
     * @return {?}
     */
    get valueColumnTitle() {
        return I18nUtil.instant("value-column-title");
    }
    /**
     * @private
     * @return {?}
     */
    get oldValueColumnTitle() {
        return I18nUtil.instant("old-value-column-title");
    }
    /**
     * @private
     * @return {?}
     */
    get newValueColumnTitle() {
        return I18nUtil.instant("new-value-column-title");
    }
}
ChgdrRowGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-chgdr-row-grid',
                template: "<farris-datagrid \r\n   #chgdrRowGrid \r\n   idField=\"fieldLabel\" \r\n   [columns]=\"columns\" \r\n   [data]=\"data\" \r\n   [fit]=\"true\"\r\n   [fitColumns]=\"true\"\r\n   [pagination]=\"false\" \r\n>",
                styles: [""]
            }] }
];
/** @nocollapse */
ChgdrRowGridComponent.ctorParameters = () => [
    { type: Injector }
];
ChgdrRowGridComponent.propDecorators = {
    chgdrTreeNode: [{ type: Input }],
    dataGrid: [{ type: ViewChild, args: ["chgdrRowGrid",] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/chgdr-list-dialog-content/chgdr-list-dialog-content.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ChgdrListDialogContentComponent {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
ChgdrListDialogContentComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-chgdr-list-dialog-content',
                template: "<chgdr-list [entityId]=\"entityId\" [dataId]=\"dataId\" style=\"padding: 0.75rem 0.875rem;height:100%\" [beforeShowChangeDetail]=\"beforeShowChangeDetail\"></chgdr-list>",
                styles: [""]
            }] }
];
/** @nocollapse */
ChgdrListDialogContentComponent.ctorParameters = () => [
    { type: Injector }
];
ChgdrListDialogContentComponent.propDecorators = {
    entityId: [{ type: Input }],
    dataId: [{ type: Input }],
    beforeShowChangeDetail: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/model/chgdr-ui-config.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BeforeShowChangeDetailEvent {
}
/**
 * 对于业务变更日志对话框的设置
 */
class ChgdrListDialogConfig {
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/chgdr-list-ui.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ChgdrListUiService {
    /**
     * @param {?} resolver
     * @param {?} injector
     * @param {?} modalService
     * @param {?} messagerService
     */
    constructor(resolver, injector, modalService, messagerService) {
        this.resolver = resolver;
        this.injector = injector;
        this.modalService = modalService;
        this.messagerService = messagerService;
    }
    /**
     * @param {?} arg1
     * @param {?=} dataId
     * @return {?}
     */
    showDialog(arg1, dataId) {
        if (!arg1) {
            console.error("创建业务变更日志列表组件失败，业务实体不能为空，请检查", arg1, dataId);
            throw new Error("创建业务变更日志列表组件失败，业务实体不能为空，请检查");
        }
        if (arg1 instanceof String || typeof arg1 == "string") {
            /** @type {?} */
            let config = new ChgdrListDialogConfig();
            config.entityId = arg1.toString();
            config.dataId = dataId;
            this.create(config);
        }
        else {
            this.create(arg1);
        }
    }
    /**
     * @private
     * @param {?} config
     * @return {?}
     */
    create(config) {
        if (config.entityId == null) {
            console.error("创建业务变更日志列表组件失败，业务实体不能为空，请检查", config);
            throw new Error("创建业务变更日志列表组件失败，业务实体不能为空，请检查");
        }
        /** @type {?} */
        let fac = this.resolver.resolveComponentFactory(ChgdrListDialogContentComponent);
        /** @type {?} */
        let cmpRef = fac.create(this.injector);
        /** @type {?} */
        let modalConfig = {
            title: I18nUtil.instant("chgdr-list-dialog-title"),
            width: 1000,
            height: 550,
            resizable: true,
            showButtons: false,
            showMaxButton: true,
            beforeOpen: (/**
             * @return {?}
             */
            () => {
                return of(true);
            })
        };
        cmpRef.instance.entityId = config.entityId;
        cmpRef.instance.dataId = config.dataId;
        cmpRef.instance.beforeShowChangeDetail = config.beforeShowChangeDetail;
        /** @type {?} */
        let dialog = this.modalService.show(cmpRef, modalConfig);
    }
}
ChgdrListUiService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
ChgdrListUiService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: BsModalService },
    { type: MessagerService }
];
/** @nocollapse */ ChgdrListUiService.ngInjectableDef = defineInjectable({ factory: function ChgdrListUiService_Factory() { return new ChgdrListUiService(inject(ComponentFactoryResolver), inject(INJECTOR), inject(BsModalService), inject(MessagerService)); }, token: ChgdrListUiService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * Generated from: lib/chgdr-header-datagrid/chgdr-header-datagrid.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ChgdrHeaderDatagridComponent {
    /**
     * @param {?} chgdrService
     * @param {?} messageService
     * @param {?} notifyService
     * @param {?} ref
     * @param {?} chgdrInnerService
     * @param {?} injector
     */
    constructor(chgdrService, messageService, notifyService, ref, chgdrInnerService, injector) {
        this.chgdrService = chgdrService;
        this.messageService = messageService;
        this.notifyService = notifyService;
        this.ref = ref;
        this.chgdrInnerService = chgdrInnerService;
        this.injector = injector;
        this.baseCls = true;
        this.showDataId = true;
        this.headers = [];
        this.dataCodeFields = [];
        this.pageChanged = new EventEmitter();
        this.pageSizeChanged = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.resetColumnAndData(null, []);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!changes.chgdrs) {
            //如果chgdrs没有更新，则直接返回
            return;
        }
        /** @type {?} */
        let prevEntityId = this.getEntityId(changes.chgdrs.previousValue);
        /** @type {?} */
        let curEntityId = this.getEntityId(changes.chgdrs.currentValue);
        /** @type {?} */
        let requests = [
            this.updateChgdrConfigHandler(curEntityId),
            this.updateDataCodeFields(prevEntityId, curEntityId)
        ];
        forkJoin(requests).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            /** @type {?} */
            let chgdrDatas = changes.chgdrs.currentValue;
            if (!!chgdrDatas) {
                this.formatHeaders(chgdrDatas.headers);
            }
            //如果业务实体变更，则重置列信息
            if (curEntityId != null && curEntityId != prevEntityId) {
                this.resetColumnAndData(curEntityId, chgdrDatas.headers);
            }
            else {
                this.headers = chgdrDatas.headers;
            }
        }), (/**
         * @param {?} err
         * @return {?}
         */
        err => {
            console.error("获取BE【" + curEntityId + "】的配置的业务变更日志的业务编号失败：", err);
            this.messageService.error(I18nUtil.instant("get-business-code-config-error", { errorMessage: ErrorUtil.getErrorMessage(err) }));
        }));
    }
    /**
     * 更新业务实体元数据
     * @private
     * @param {?} entityId
     * @return {?}
     */
    updateChgdrConfigHandler(entityId) {
        if (entityId) {
            return this.chgdrInnerService.getChgdrConfigHandler(entityId).pipe(tap((/**
             * @param {?} data
             * @return {?}
             */
            data => this.chgdrConfigHandler = data)));
        }
        else {
            return of(this.chgdrConfigHandler);
        }
    }
    /**
     * 更新dataCodeField数据
     * @param {?} prevEntityId 原BeId
     * @param {?} curEntityId 当前BeId
     * @return {?}
     */
    updateDataCodeFields(prevEntityId, curEntityId) {
        if (curEntityId != null && curEntityId != prevEntityId) {
            //只有发生变更时才更新
            return this.chgdrService.getRootEntityDataCodeFields(curEntityId).pipe(tap((/**
             * @param {?} data
             * @return {?}
             */
            data => this.dataCodeFields = data || [])));
        }
        else {
            //否则直接返回当前值
            return of(this.dataCodeFields);
        }
    }
    /**
     * 格式化headers。主要是解析其中的dataCode，将其转为Object
     * 使用dataCodeObj存放dataCode解析后的结果
     * dataCodeObj属性在ChangeDataHeader中不存在，此处通过强制赋值使用，并且只限于该处使用。
     * @private
     * @param {?} headers
     * @return {?}
     */
    formatHeaders(headers) {
        if (!headers) {
            return;
        }
        headers.forEach((/**
         * @param {?} header
         * @return {?}
         */
        header => {
            /** @type {?} */
            let dataCodeObj;
            this.formatDataCodeMap(header.dataCode);
            if (header.dataCode && header.dataCode.size == 1 && header.dataCode.has("_$dataCode")) {
                //兼容老数据
                //老数据dataCode为自由文本
                dataCodeObj = {};
                if (this.dataCodeFields && this.dataCodeFields.length > 0) {
                    dataCodeObj[this.dataCodeFields[0].fieldLabelId] = header.dataCode.get("_$dataCode");
                }
            }
            else {
                dataCodeObj = MapUtil.convertMapToObject(header.dataCode);
            }
            ((/** @type {?} */ (header))).dataCodeObj = dataCodeObj;
        }));
    }
    /**
     * 格式化业务主键Map
     * @private
     * @param {?} dataCode
     * @return {?}
     */
    formatDataCodeMap(dataCode) {
        if (!dataCode || !this.chgdrConfigHandler) {
            return;
        }
        Array.from(dataCode.keys()).forEach((/**
         * @param {?} fieldLabelId
         * @return {?}
         */
        fieldLabelId => {
            /** @type {?} */
            let value = dataCode.get(fieldLabelId);
            /** @type {?} */
            let formatedValue = this.chgdrConfigHandler.formatMainObjectFieldValue(value, fieldLabelId);
            dataCode.set(fieldLabelId, formatedValue);
        }));
    }
    /**
     * @private
     * @param {?} chgdrs
     * @return {?}
     */
    getEntityId(chgdrs) {
        if (!chgdrs || !chgdrs.headers || chgdrs.headers.length == 0) {
            return null;
        }
        else {
            return chgdrs.headers[0].entityId;
        }
    }
    /**
     * @private
     * @param {?} entityId
     * @param {?} headers
     * @return {?}
     */
    resetColumnAndData(entityId, headers) {
        /** @type {?} */
        let columns = [
            { field: 'userName', width: 130, title: I18nUtil.instant("user-name-column-title") },
            { field: 'changeTime', width: 130, title: I18nUtil.instant("change-time-column-title"), formatter: { type: 'datetime', options: { format: I18nUtil.instant("change-time-column-format") } } },
            { field: 'operateType.name', width: 60, title: I18nUtil.instant("operation-type-title") },
            { field: 'dataId', width: 130, title: I18nUtil.instant("tech-pk-column-title"), visible: this.showDataId }
        ];
        //{field: 'dataCode', width: 130, title: '业务编号'},
        // {field: 'reason', width: 130, title: '变更原因'},
        this.dataCodeFields.forEach((/**
         * @param {?} field
         * @return {?}
         */
        (field) => {
            /** @type {?} */
            let column = {
                field: "dataCodeObj." + field.fieldLabelId,
                title: field.fieldName,
                width: 130
            };
            columns.push(column);
        }));
        /** @type {?} */
        let opColumn = { title: I18nUtil.instant("operation-column-title"), width: 130, template: this.opCell, halign: 'center', align: 'center' };
        columns.push(opColumn);
        this.columns = columns;
        this.headers = headers;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onPageChanged($event) {
        this.pageChanged.emit($event);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onPageSizeChanged($event) {
        this.pageSizeChanged.emit($event);
    }
    /**
     * @param {?} ctx
     * @return {?}
     */
    clickShowChangeDetail(ctx) {
        /** @type {?} */
        let header = ctx.rowData;
        if (!header) {
            return;
        }
        if (!this.beforeShowChangeDetail) {
            //如果没有打开详情前回调，则按照默认方式打开
            this.showChangeDetail(header);
        }
        else {
            /** @type {?} */
            let event = new BeforeShowChangeDetailEvent();
            event.header = header;
            this.beforeShowChangeDetail(event).subscribe((/**
             * @param {?} isShow
             * @return {?}
             */
            (isShow) => {
                if (isShow) {
                    this.showChangeDetail(header);
                }
            }), (/**
             * @param {?} err
             * @return {?}
             */
            (err) => {
                console.error("执行业务变更详情打开前事件报错：", err);
                this.messageService.error("执行业务变更详情打开前事件报错：" + ErrorUtil.getErrorMessage(err));
            }));
        }
    }
    /**
     * @private
     * @param {?} header
     * @return {?}
     */
    showChangeDetail(header) {
        this.chgdrService.getChangeData(header.id, header.changeTime).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            if (!data) {
                this.notifyService.error(I18nUtil.instant("can-not-found-change-record-by-id", { headerId: header.id }));
            }
            else {
                this.currentChgdrData = data;
                this.chgdrInfoDialog.show();
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            console.error("查询业务变更日志出错", error);
            this.messageService.error(I18nUtil.instant("query-change-data-record-error", { errorMessage: ErrorUtil.getErrorMessage(error) }));
        }));
    }
    /**
     * @return {?}
     */
    get showChangeDetailBtn() {
        return I18nUtil.instant("show-change-detail-btn");
    }
    /**
     * @return {?}
     */
    get changeDetailDialogTitle() {
        return I18nUtil.instant("change-detail-dialog-title");
    }
}
ChgdrHeaderDatagridComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-chgdr-header-datagrid',
                template: "<farris-datagrid #chgdrGrid idField=\"id\" [columns]=\"columns\" [data]=\"headers\"\n  showLineNumber=\"true\" [fit]=\"true\" [fitColumns]=\"true\" \n  [pagination]=\"true\" [pageSize]=\"20\" [showPageList]=\"false\" [pageIndex]=\"chgdrs.pageIndex\" [total]=\"chgdrs.total\"\n  (pageChanged)=\"onPageChanged($event)\" (pageSizeChanged)=\"onPageSizeChanged($event)\"\n>\n</farris-datagrid>\n<ng-template #opCell let-ctx>\n  <a href=\"javascript: void(0);\" (click)=\"clickShowChangeDetail(ctx)\">{{showChangeDetailBtn}}</a>\n</ng-template>\n\n<!-- \u67E5\u770B\u53D8\u66F4\u65E5\u5FD7\u7684\u5F39\u7A97 -->\n<farris-dialog #chgdrInfoDialog\n  [title]=\"changeDetailDialogTitle\"\n  [width]=\"1100\"\n  [height]=\"600\"\n  [showMaxButton]=\"true\"\n  [resizable]=\"true\"\n  [showButtons]=\"false\"\n>\n  <chgdr-data-viewer [data]=\"currentChgdrData\"></chgdr-data-viewer>\n</farris-dialog>",
                styles: [""]
            }] }
];
/** @nocollapse */
ChgdrHeaderDatagridComponent.ctorParameters = () => [
    { type: ChgdrService },
    { type: MessagerService },
    { type: NotifyService },
    { type: ChangeDetectorRef },
    { type: ChgdrInnerService },
    { type: Injector }
];
ChgdrHeaderDatagridComponent.propDecorators = {
    baseCls: [{ type: HostBinding, args: ['class.f-utils-fill',] }],
    chgdrs: [{ type: Input }],
    showDataId: [{ type: Input }],
    beforeShowChangeDetail: [{ type: Input }],
    pageChanged: [{ type: Output }],
    pageSizeChanged: [{ type: Output }],
    opCell: [{ type: ViewChild, args: ['opCell',] }],
    chgdrInfoDialog: [{ type: ViewChild, args: ["chgdrInfoDialog",] }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/chgdr.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
registerLocaleData(zh);
class ChgdrModule {
}
ChgdrModule.decorators = [
    { type: NgModule, args: [{
                declarations: [ChgdrDataViewerComponent, ChgdrListComponent, ChgdrRowBaseinfoFormComponent, ChgdrRowGridComponent, ChgdrListDialogContentComponent, ChgdrHeaderDatagridComponent],
                imports: [
                    CommonModule,
                    FormsModule,
                    TranslateModule.forRoot(),
                    SplitterModule,
                    AngularDraggableModule,
                    DatagridModule,
                    TreeTableModule,
                    FarrisSectionModule,
                    MessagerModule.forRoot(),
                    NotifyModule,
                    FarrisDialogModule,
                    FarrisDatePickerModule,
                    MetadataRTSelectModule,
                    GSPMetadataRTServiceModule.forRoot('')
                ],
                providers: [
                    MessagerService,
                    NotifyService,
                    HttpService,
                    SessionService,
                    CacheService,
                    ChgdrListUiService,
                    ChgdrMetadataService,
                    ChgdrConfigService,
                    ChgdrInnerService,
                    ChgdrService,
                    I18nService
                ],
                entryComponents: [
                    ChgdrDataViewerComponent,
                    ChgdrListComponent,
                    ChgdrListDialogContentComponent
                ],
                exports: [ChgdrDataViewerComponent, ChgdrListComponent, ChgdrHeaderDatagridComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/model/change-data-row.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ChangeDataRow {
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/model/chgdr-item-query-param.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 业务变更日志详情数据查询参数
 */
class ChgdrItemQueryParam {
}

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: gsp-cmp-chgdr.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { ChgdrModule, ChgdrService, ChgdrDataViewerComponent, ChgdrHeaderDatagridComponent, ChgdrListComponent, ChangeDataHeader, ChangeDataCompHeader, ChangeDataRow, OperateType, ChangeDataQueryParam, ChangeDataQueryResult, BeforeShowChangeDetailEvent, ChgdrListDialogConfig, ChgdrItemQueryParam, ChgdrListUiService, ChgdrListDialogContentComponent as ɵf, ChgdrRowBaseinfoFormComponent as ɵd, ChgdrRowGridComponent as ɵe, ChgdrConfigService as ɵb, ChgdrInnerService as ɵc, ChgdrMetadataService as ɵa, I18nService as ɵh, I18nUtil as ɵg };

//# sourceMappingURL=gsp-cmp-chgdr.js.map