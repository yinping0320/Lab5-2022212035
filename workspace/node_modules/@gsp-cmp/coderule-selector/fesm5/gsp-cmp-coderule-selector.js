import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { TreeViewModule } from '@progress/kendo-angular-treeview';
import { GridModule } from '@progress/kendo-angular-grid';
import { HttpHeaders, HttpClient } from '@angular/common/http';
import { Injectable, Component, Input, Output, EventEmitter, ComponentFactoryResolver, Injector, NgModule } from '@angular/core';
import { process } from '@progress/kendo-data-query';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/code-rule-select.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CodeRuleSelectService = /** @class */ (function () {
    function CodeRuleSelectService(http) {
        this.http = http;
        this.QUERY_URL = "/api/runtime/bcc/v1.0/code-rule-data";
        this.metadatas = [];
    }
    /**
     * @param {?} metadata
     * @return {?}
     */
    CodeRuleSelectService.prototype.addMetadataRT = /**
     * @param {?} metadata
     * @return {?}
     */
    function (metadata) {
        this.metadatas.push(metadata);
    };
    /**
     * @return {?}
     */
    CodeRuleSelectService.prototype.clearData = /**
     * @return {?}
     */
    function () {
        this.metadatas = [];
        this.codeRule = null;
    };
    // 根据类型获取Cloud Server下所有的元数据
    // 根据类型获取Cloud Server下所有的元数据
    /**
     * @return {?}
     */
    CodeRuleSelectService.prototype.getCodeRuleList = 
    // 根据类型获取Cloud Server下所有的元数据
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var headers = new HttpHeaders();
        headers.append("sessionId", this.sessionId);
        return this.http.get(this.QUERY_URL + "?serviceUnit=" + this.serviceUnit, { headers: headers });
    };
    CodeRuleSelectService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CodeRuleSelectService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return CodeRuleSelectService;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/model/code-rule-invoke-info.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CodeRuleInvokeInfo = /** @class */ (function () {
    function CodeRuleInvokeInfo() {
    }
    return CodeRuleInvokeInfo;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/select-code-rule/select-code-rule.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SelectCodeRuleComponent = /** @class */ (function () {
    function SelectCodeRuleComponent(codeRuleSvc, resolver, injector) {
        this.codeRuleSvc = codeRuleSvc;
        this.resolver = resolver;
        this.injector = injector;
        this.codeRuleSelected = new EventEmitter();
        this.selectorClosed = new EventEmitter();
    }
    Object.defineProperty(SelectCodeRuleComponent.prototype, "serviceUnit", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.codeRuleSvc.serviceUnit = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectCodeRuleComponent.prototype, "sessionId", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.codeRuleSvc.sessionId = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    SelectCodeRuleComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
    };
    /**
     * 点击确认，确认编号规则
     */
    /**
     * 点击确认，确认编号规则
     * @return {?}
     */
    SelectCodeRuleComponent.prototype.confirmCodeRule = /**
     * 点击确认，确认编号规则
     * @return {?}
     */
    function () {
        /** @type {?} */
        var codeRuleInfo = this.codeRuleSvc.codeRule;
        if (!codeRuleInfo) {
            alert("当前未选中任何数据！");
            return;
        }
        /** @type {?} */
        var invokeInfo = new CodeRuleInvokeInfo();
        invokeInfo.id = codeRuleInfo.id;
        invokeInfo.code = codeRuleInfo.code;
        invokeInfo.name = codeRuleInfo.name;
        invokeInfo.serviceUnit = codeRuleInfo.serviceUnit;
        invokeInfo.byMetadata = codeRuleInfo.origin == "元数据" ? true : false;
        this.codeRuleSelected.emit(invokeInfo);
        this.closeSelector();
        // 清空缓存
        this.codeRuleSvc.clearData();
    };
    /**
     * 点击取消，关闭选择器
     */
    /**
     * 点击取消，关闭选择器
     * @return {?}
     */
    SelectCodeRuleComponent.prototype.closeSelector = /**
     * 点击取消，关闭选择器
     * @return {?}
     */
    function () {
        this.selectorClosed.emit();
    };
    SelectCodeRuleComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'app-select-metadatart',
                    template: "<div class=\"modal-body\">\r\n    <div class=\"templateBlock\">\r\n        <app-coderule-list ></app-coderule-list>\r\n    </div>\r\n</div>\r\n<div class=\"modal-footer\">\r\n    <button type=\"button\" class=\"btn btn-default btn-primary\" (click)=\"confirmCodeRule()\">\u786E\u5B9A</button>\r\n    <button type=\"button\" class=\"btn btn-default\" (click)=\"closeSelector()\">\u53D6\u6D88</button>\r\n</div>",
                    styles: [".templateBlock{display:flex}.infoBlock{width:100%;min-width:400px}.infoBlock label{width:50px}"]
                }] }
    ];
    /** @nocollapse */
    SelectCodeRuleComponent.ctorParameters = function () { return [
        { type: CodeRuleSelectService },
        { type: ComponentFactoryResolver },
        { type: Injector }
    ]; };
    SelectCodeRuleComponent.propDecorators = {
        serviceUnit: [{ type: Input }],
        sessionId: [{ type: Input }],
        selectorClosed: [{ type: Output }],
        codeRuleSelected: [{ type: Output }]
    };
    return SelectCodeRuleComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/model/code-rule-base-info.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CodeRuleBaseInfo = /** @class */ (function () {
    function CodeRuleBaseInfo() {
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    CodeRuleBaseInfo.prototype.init = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        this.id = obj["id"];
        this.code = obj["code"];
        this.name = obj["name"];
        this.serviceUnit = obj["serviceUnit"];
        this.origin = obj["origin"];
    };
    return CodeRuleBaseInfo;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/code-rule-list/code-rule-list.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CodeRuleListComponent = /** @class */ (function () {
    function CodeRuleListComponent(codeRuleSvc) {
        this.codeRuleSvc = codeRuleSvc;
        this.data = new Array();
        // tslint:disable-next-line:member-ordering
        this.state = {
            skip: 0,
            take: 9999,
            // Initial filter descriptor
            filter: {
                logic: 'and',
                filters: []
            }
        };
        // tslint:disable-next-line:member-ordering
        this.selectableSetting = { mode: 'single', checkboxOnly: false };
    }
    /**
     * @return {?}
     */
    CodeRuleListComponent.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.data = [];
    };
    /**
     * @param {?} state
     * @return {?}
     */
    CodeRuleListComponent.prototype.dataStateChange = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        this.state = state;
        this.gridData = process(this.data, this.state);
    };
    /**
     * @return {?}
     */
    CodeRuleListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.codeRuleSvc.getCodeRuleList().subscribe((/**
         * @param {?} datas
         * @return {?}
         */
        function (datas) {
            if (datas && datas.length > 0) {
                datas.forEach((/**
                 * @param {?} obj
                 * @return {?}
                 */
                function (obj) {
                    /** @type {?} */
                    var baseInfo = new CodeRuleBaseInfo();
                    baseInfo.init(obj);
                    _this.data.push(baseInfo);
                }));
                _this.gridData = process(_this.data, _this.state);
            }
        }));
    };
    // 选中编号规则后的事件处理
    // 选中编号规则后的事件处理
    /**
     * @param {?} event
     * @return {?}
     */
    CodeRuleListComponent.prototype.onSelectionChange = 
    // 选中编号规则后的事件处理
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.selectedRows.length > 0) {
            this.codeRuleSvc.codeRule = null;
            this.codeRuleSvc.codeRule = event.selectedRows[0].dataItem;
        }
    };
    CodeRuleListComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'app-coderule-list',
                    template: "<div class=\"templateInfo\">\r\n  <div class=\"templateSelector\">\r\n    <kendo-grid [data]=\"gridData\" [height]=\"449\" [selectable]=\"selectableSetting\"\r\n      (selectionChange)=onSelectionChange($event) [pageSize]=\"state.take\" [skip]=\"state.skip\" [sort]=\"state.sort\"\r\n      [filter]=\"state.filter\" [sortable]=\"true\" [pageable]=\"false\" [filterable]=\"true\" [resizable]=\"true\"\r\n      (dataStateChange)=dataStateChange($event)>\r\n      <kendo-grid-column field=\"code\" title=\"\u7F16\u53F7\" width=\"210\">\r\n      </kendo-grid-column>\r\n      <kendo-grid-column field=\"name\" title=\"\u540D\u79F0\" width=\"200\">\r\n      </kendo-grid-column>\r\n      <kendo-grid-column field=\"serviceUnit\" title=\"\u670D\u52A1\u5355\u5143\" width=\"200\">\r\n      </kendo-grid-column>\r\n    </kendo-grid>\r\n  </div>\r\n</div>",
                    styles: [".templateSelector{width:100%;height:450px;border:.5px solid #ddd}.templateDescription{width:200px;height:450px;border:.5px solid #ddd}.templateInfo{display:flex}"]
                }] }
    ];
    /** @nocollapse */
    CodeRuleListComponent.ctorParameters = function () { return [
        { type: CodeRuleSelectService }
    ]; };
    return CodeRuleListComponent;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/code-rule-select.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CodeRuleSelectModule = /** @class */ (function () {
    function CodeRuleSelectModule() {
    }
    CodeRuleSelectModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        TreeViewModule,
                        GridModule,
                    ],
                    exports: [
                        SelectCodeRuleComponent
                    ],
                    providers: [CodeRuleSelectService],
                    // 服务提供者
                    declarations: [SelectCodeRuleComponent, CodeRuleListComponent],
                    entryComponents: [SelectCodeRuleComponent]
                },] }
    ];
    /** @nocollapse */
    CodeRuleSelectModule.ctorParameters = function () { return []; };
    return CodeRuleSelectModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: gsp-cmp-coderule-selector.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { CodeRuleSelectModule, SelectCodeRuleComponent, CodeRuleInvokeInfo, CodeRuleSelectService, CodeRuleListComponent as ɵa };

//# sourceMappingURL=gsp-cmp-coderule-selector.js.map