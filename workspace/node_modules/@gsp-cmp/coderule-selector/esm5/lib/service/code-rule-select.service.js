/**
 * @fileoverview added by tsickle
 * Generated from: lib/service/code-rule-select.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpHeaders, HttpClient } from '@angular/common/http';
var CodeRuleSelectService = /** @class */ (function () {
    function CodeRuleSelectService(http) {
        this.http = http;
        this.QUERY_URL = "/api/runtime/bcc/v1.0/code-rule-data";
        this.metadatas = [];
    }
    /**
     * @param {?} metadata
     * @return {?}
     */
    CodeRuleSelectService.prototype.addMetadataRT = /**
     * @param {?} metadata
     * @return {?}
     */
    function (metadata) {
        this.metadatas.push(metadata);
    };
    /**
     * @return {?}
     */
    CodeRuleSelectService.prototype.clearData = /**
     * @return {?}
     */
    function () {
        this.metadatas = [];
        this.codeRule = null;
    };
    // 根据类型获取Cloud Server下所有的元数据
    // 根据类型获取Cloud Server下所有的元数据
    /**
     * @return {?}
     */
    CodeRuleSelectService.prototype.getCodeRuleList = 
    // 根据类型获取Cloud Server下所有的元数据
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var headers = new HttpHeaders();
        headers.append("sessionId", this.sessionId);
        return this.http.get(this.QUERY_URL + "?serviceUnit=" + this.serviceUnit, { headers: headers });
    };
    CodeRuleSelectService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CodeRuleSelectService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return CodeRuleSelectService;
}());
export { CodeRuleSelectService };
if (false) {
    /** @type {?} */
    CodeRuleSelectService.prototype.serviceUnit;
    /** @type {?} */
    CodeRuleSelectService.prototype.sessionId;
    /**
     * @type {?}
     * @private
     */
    CodeRuleSelectService.prototype.QUERY_URL;
    /** @type {?} */
    CodeRuleSelectService.prototype.codeRule;
    /** @type {?} */
    CodeRuleSelectService.prototype.metadatas;
    /**
     * @type {?}
     * @private
     */
    CodeRuleSelectService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZS1ydWxlLXNlbGVjdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1jbXAvY29kZXJ1bGUtc2VsZWN0b3IvIiwic291cmNlcyI6WyJsaWIvc2VydmljZS9jb2RlLXJ1bGUtc2VsZWN0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFHL0Q7SUFHRSwrQkFBb0IsSUFBZ0I7UUFBaEIsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUs1QixjQUFTLEdBQVcsc0NBQXNDLENBQUE7UUFJbEUsY0FBUyxHQUFHLEVBQUUsQ0FBQztJQVJmLENBQUM7Ozs7O0lBVUQsNkNBQWE7Ozs7SUFBYixVQUFjLFFBQVE7UUFDcEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDaEMsQ0FBQzs7OztJQUVELHlDQUFTOzs7SUFBVDtRQUNFLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCw0QkFBNEI7Ozs7O0lBQzVCLCtDQUFlOzs7OztJQUFmOztZQUNNLE9BQU8sR0FBZSxJQUFJLFdBQVcsRUFBRTtRQUMzQyxPQUFPLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDNUMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBSSxJQUFJLENBQUMsU0FBUyxxQkFBZ0IsSUFBSSxDQUFDLFdBQWEsRUFBRSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBQ2xHLENBQUM7O2dCQTVCRixVQUFVOzs7O2dCQUhXLFVBQVU7O0lBbUNoQyw0QkFBQztDQUFBLEFBaENELElBZ0NDO1NBL0JZLHFCQUFxQjs7O0lBS2hDLDRDQUEyQjs7SUFDM0IsMENBQXlCOzs7OztJQUN6QiwwQ0FBa0U7O0lBRWxFLHlDQUEyQjs7SUFFM0IsMENBQWU7Ozs7O0lBVEgscUNBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcy9PYnNlcnZhYmxlJztcclxuaW1wb3J0IHsgSHR0cEhlYWRlcnMsIEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IENvZGVSdWxlQmFzZUluZm8gfSBmcm9tICcuLi9tb2RlbC9jb2RlLXJ1bGUtYmFzZS1pbmZvJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIENvZGVSdWxlU2VsZWN0U2VydmljZSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkge1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHNlcnZpY2VVbml0OiBzdHJpbmc7XHJcbiAgcHVibGljIHNlc3Npb25JZDogc3RyaW5nO1xyXG4gIHByaXZhdGUgUVVFUllfVVJMOiBzdHJpbmcgPSBcIi9hcGkvcnVudGltZS9iY2MvdjEuMC9jb2RlLXJ1bGUtZGF0YVwiXHJcblxyXG4gIGNvZGVSdWxlOiBDb2RlUnVsZUJhc2VJbmZvO1xyXG5cclxuICBtZXRhZGF0YXMgPSBbXTtcclxuXHJcbiAgYWRkTWV0YWRhdGFSVChtZXRhZGF0YSkge1xyXG4gICAgdGhpcy5tZXRhZGF0YXMucHVzaChtZXRhZGF0YSk7XHJcbiAgfVxyXG5cclxuICBjbGVhckRhdGEoKSB7XHJcbiAgICB0aGlzLm1ldGFkYXRhcyA9IFtdO1xyXG4gICAgdGhpcy5jb2RlUnVsZSA9IG51bGw7XHJcbiAgfVxyXG5cclxuICAvLyDmoLnmja7nsbvlnovojrflj5ZDbG91ZCBTZXJ2ZXLkuIvmiYDmnInnmoTlhYPmlbDmja5cclxuICBnZXRDb2RlUnVsZUxpc3QoKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGxldCBoZWFkZXJzOkh0dHBIZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKCk7XHJcbiAgICBoZWFkZXJzLmFwcGVuZChcInNlc3Npb25JZFwiLCB0aGlzLnNlc3Npb25JZCk7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldChgJHt0aGlzLlFVRVJZX1VSTH0/c2VydmljZVVuaXQ9JHt0aGlzLnNlcnZpY2VVbml0fWAsIHsgaGVhZGVyczogaGVhZGVycyB9KTtcclxuICB9XHJcblxyXG5cclxuXHJcbn1cclxuIl19