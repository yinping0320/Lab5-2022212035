/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/select-code-rule/select-code-rule.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable-next-line:max-line-length
import { Component, Input, Output, EventEmitter, ComponentFactoryResolver, Injector } from '@angular/core';
import { CodeRuleSelectService } from '../../service/code-rule-select.service';
import { CodeRuleInvokeInfo } from '../../model/code-rule-invoke-info';
var SelectCodeRuleComponent = /** @class */ (function () {
    function SelectCodeRuleComponent(codeRuleSvc, resolver, injector) {
        this.codeRuleSvc = codeRuleSvc;
        this.resolver = resolver;
        this.injector = injector;
        this.codeRuleSelected = new EventEmitter();
        this.selectorClosed = new EventEmitter();
    }
    Object.defineProperty(SelectCodeRuleComponent.prototype, "serviceUnit", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.codeRuleSvc.serviceUnit = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectCodeRuleComponent.prototype, "sessionId", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.codeRuleSvc.sessionId = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    SelectCodeRuleComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
    };
    /**
     * 点击确认，确认编号规则
     */
    /**
     * 点击确认，确认编号规则
     * @return {?}
     */
    SelectCodeRuleComponent.prototype.confirmCodeRule = /**
     * 点击确认，确认编号规则
     * @return {?}
     */
    function () {
        /** @type {?} */
        var codeRuleInfo = this.codeRuleSvc.codeRule;
        if (!codeRuleInfo) {
            alert("当前未选中任何数据！");
            return;
        }
        /** @type {?} */
        var invokeInfo = new CodeRuleInvokeInfo();
        invokeInfo.id = codeRuleInfo.id;
        invokeInfo.code = codeRuleInfo.code;
        invokeInfo.name = codeRuleInfo.name;
        invokeInfo.serviceUnit = codeRuleInfo.serviceUnit;
        invokeInfo.byMetadata = codeRuleInfo.origin == "元数据" ? true : false;
        this.codeRuleSelected.emit(invokeInfo);
        this.closeSelector();
        // 清空缓存
        this.codeRuleSvc.clearData();
    };
    /**
     * 点击取消，关闭选择器
     */
    /**
     * 点击取消，关闭选择器
     * @return {?}
     */
    SelectCodeRuleComponent.prototype.closeSelector = /**
     * 点击取消，关闭选择器
     * @return {?}
     */
    function () {
        this.selectorClosed.emit();
    };
    SelectCodeRuleComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'app-select-metadatart',
                    template: "<div class=\"modal-body\">\r\n    <div class=\"templateBlock\">\r\n        <app-coderule-list ></app-coderule-list>\r\n    </div>\r\n</div>\r\n<div class=\"modal-footer\">\r\n    <button type=\"button\" class=\"btn btn-default btn-primary\" (click)=\"confirmCodeRule()\">\u786E\u5B9A</button>\r\n    <button type=\"button\" class=\"btn btn-default\" (click)=\"closeSelector()\">\u53D6\u6D88</button>\r\n</div>",
                    styles: [".templateBlock{display:flex}.infoBlock{width:100%;min-width:400px}.infoBlock label{width:50px}"]
                }] }
    ];
    /** @nocollapse */
    SelectCodeRuleComponent.ctorParameters = function () { return [
        { type: CodeRuleSelectService },
        { type: ComponentFactoryResolver },
        { type: Injector }
    ]; };
    SelectCodeRuleComponent.propDecorators = {
        serviceUnit: [{ type: Input }],
        sessionId: [{ type: Input }],
        selectorClosed: [{ type: Output }],
        codeRuleSelected: [{ type: Output }]
    };
    return SelectCodeRuleComponent;
}());
export { SelectCodeRuleComponent };
if (false) {
    /** @type {?} */
    SelectCodeRuleComponent.prototype.selectorClosed;
    /** @type {?} */
    SelectCodeRuleComponent.prototype.codeRuleSelected;
    /**
     * @type {?}
     * @private
     */
    SelectCodeRuleComponent.prototype.codeRuleSvc;
    /**
     * @type {?}
     * @private
     */
    SelectCodeRuleComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    SelectCodeRuleComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LWNvZGUtcnVsZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLWNtcC9jb2RlcnVsZS1zZWxlY3Rvci8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3NlbGVjdC1jb2RlLXJ1bGUvc2VsZWN0LWNvZGUtcnVsZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBYSxLQUFLLEVBQWEsTUFBTSxFQUFFLFlBQVksRUFBaUIsd0JBQXdCLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hKLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQy9FLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBRXZFO0lBZ0JFLGlDQUFvQixXQUFrQyxFQUM1QyxRQUFrQyxFQUFVLFFBQWtCO1FBRHBELGdCQUFXLEdBQVgsV0FBVyxDQUF1QjtRQUM1QyxhQUFRLEdBQVIsUUFBUSxDQUEwQjtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVU7UUFIOUQscUJBQWdCLEdBQUcsSUFBSSxZQUFZLEVBQXNCLENBQUM7UUFJbEUsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO0lBQ2hELENBQUM7SUFaRCxzQkFBYSxnREFBVzs7Ozs7UUFBeEIsVUFBeUIsS0FBYTtZQUNwQyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7UUFDdkMsQ0FBQzs7O09BQUE7SUFDRCxzQkFBYSw4Q0FBUzs7Ozs7UUFBdEIsVUFBdUIsS0FBYTtZQUNsQyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDckMsQ0FBQzs7O09BQUE7Ozs7O0lBU0QsNkNBQVc7Ozs7SUFBWCxVQUFZLE9BQXNCO0lBRWxDLENBQUM7SUFFRDs7T0FFRzs7Ozs7SUFDSCxpREFBZTs7OztJQUFmOztZQUNRLFlBQVksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVE7UUFDOUMsSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNqQixLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDcEIsT0FBTztTQUNSOztZQUNLLFVBQVUsR0FBdUIsSUFBSSxrQkFBa0IsRUFBRTtRQUMvRCxVQUFVLENBQUMsRUFBRSxHQUFHLFlBQVksQ0FBQyxFQUFFLENBQUM7UUFDaEMsVUFBVSxDQUFDLElBQUksR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDO1FBQ3BDLFVBQVUsQ0FBQyxJQUFJLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQztRQUNwQyxVQUFVLENBQUMsV0FBVyxHQUFHLFlBQVksQ0FBQyxXQUFXLENBQUM7UUFDbEQsVUFBVSxDQUFDLFVBQVUsR0FBRyxZQUFZLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDcEUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDckIsT0FBTztRQUNQLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDL0IsQ0FBQztJQUVEOztPQUVHOzs7OztJQUNILCtDQUFhOzs7O0lBQWI7UUFDRSxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzdCLENBQUM7O2dCQW5ERixTQUFTLFNBQUM7O29CQUVULFFBQVEsRUFBRSx1QkFBdUI7b0JBQ2pDLHFhQUFnRDs7aUJBRWpEOzs7O2dCQVJRLHFCQUFxQjtnQkFEd0Qsd0JBQXdCO2dCQUFFLFFBQVE7Ozs4QkFXckgsS0FBSzs0QkFHTCxLQUFLO2lDQUdMLE1BQU07bUNBQ04sTUFBTTs7SUF1Q1QsOEJBQUM7Q0FBQSxBQXJERCxJQXFEQztTQS9DWSx1QkFBdUI7OztJQU9sQyxpREFBNEM7O0lBQzVDLG1EQUFvRTs7Ozs7SUFFeEQsOENBQTBDOzs7OztJQUNwRCwyQ0FBMEM7Ozs7O0lBQUUsMkNBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1saW5lLWxlbmd0aFxyXG5pbXBvcnQgeyBDb21wb25lbnQsIFZpZXdDaGlsZCwgSW5wdXQsIE9uQ2hhbmdlcywgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIFNpbXBsZUNoYW5nZXMsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29kZVJ1bGVTZWxlY3RTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZS9jb2RlLXJ1bGUtc2VsZWN0LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBDb2RlUnVsZUludm9rZUluZm8gfSBmcm9tICcuLi8uLi9tb2RlbC9jb2RlLXJ1bGUtaW52b2tlLWluZm8nO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmNvbXBvbmVudC1zZWxlY3RvclxyXG4gIHNlbGVjdG9yOiAnYXBwLXNlbGVjdC1tZXRhZGF0YXJ0JyxcclxuICB0ZW1wbGF0ZVVybDogJy4vc2VsZWN0LWNvZGUtcnVsZS5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJy4vc2VsZWN0LWNvZGUtcnVsZS5jb21wb25lbnQuY3NzJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIFNlbGVjdENvZGVSdWxlQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcclxuICBASW5wdXQoKSBzZXQgc2VydmljZVVuaXQodmFsdWU6IHN0cmluZykge1xyXG4gICAgdGhpcy5jb2RlUnVsZVN2Yy5zZXJ2aWNlVW5pdCA9IHZhbHVlO1xyXG4gIH1cclxuICBASW5wdXQoKSBzZXQgc2Vzc2lvbklkKHZhbHVlOiBzdHJpbmcpIHtcclxuICAgIHRoaXMuY29kZVJ1bGVTdmMuc2Vzc2lvbklkID0gdmFsdWU7XHJcbiAgfVxyXG4gIEBPdXRwdXQoKSBzZWxlY3RvckNsb3NlZDogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgQE91dHB1dCgpIGNvZGVSdWxlU2VsZWN0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyPENvZGVSdWxlSW52b2tlSW5mbz4oKTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjb2RlUnVsZVN2YzogQ29kZVJ1bGVTZWxlY3RTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSByZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBwcml2YXRlIGluamVjdG9yOiBJbmplY3Rvcikge1xyXG4gICAgdGhpcy5zZWxlY3RvckNsb3NlZCA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG4gIH1cclxuXHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG5cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOeCueWHu+ehruiupO+8jOehruiupOe8luWPt+inhOWImVxyXG4gICAqL1xyXG4gIGNvbmZpcm1Db2RlUnVsZSgpIHtcclxuICAgIGNvbnN0IGNvZGVSdWxlSW5mbyA9IHRoaXMuY29kZVJ1bGVTdmMuY29kZVJ1bGU7XHJcbiAgICBpZiAoIWNvZGVSdWxlSW5mbykge1xyXG4gICAgICBhbGVydChcIuW9k+WJjeacqumAieS4reS7u+S9leaVsOaNru+8gVwiKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgaW52b2tlSW5mbzogQ29kZVJ1bGVJbnZva2VJbmZvID0gbmV3IENvZGVSdWxlSW52b2tlSW5mbygpO1xyXG4gICAgaW52b2tlSW5mby5pZCA9IGNvZGVSdWxlSW5mby5pZDtcclxuICAgIGludm9rZUluZm8uY29kZSA9IGNvZGVSdWxlSW5mby5jb2RlO1xyXG4gICAgaW52b2tlSW5mby5uYW1lID0gY29kZVJ1bGVJbmZvLm5hbWU7XHJcbiAgICBpbnZva2VJbmZvLnNlcnZpY2VVbml0ID0gY29kZVJ1bGVJbmZvLnNlcnZpY2VVbml0O1xyXG4gICAgaW52b2tlSW5mby5ieU1ldGFkYXRhID0gY29kZVJ1bGVJbmZvLm9yaWdpbiA9PSBcIuWFg+aVsOaNrlwiID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgdGhpcy5jb2RlUnVsZVNlbGVjdGVkLmVtaXQoaW52b2tlSW5mbyk7XHJcbiAgICB0aGlzLmNsb3NlU2VsZWN0b3IoKTtcclxuICAgIC8vIOa4heepuue8k+WtmFxyXG4gICAgdGhpcy5jb2RlUnVsZVN2Yy5jbGVhckRhdGEoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOeCueWHu+WPlua2iO+8jOWFs+mXremAieaLqeWZqFxyXG4gICAqL1xyXG4gIGNsb3NlU2VsZWN0b3IoKTogdm9pZCB7XHJcbiAgICB0aGlzLnNlbGVjdG9yQ2xvc2VkLmVtaXQoKTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==