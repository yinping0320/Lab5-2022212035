/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/select-code-rule/select-code-rule.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable-next-line:max-line-length
import { Component, Input, Output, EventEmitter, ComponentFactoryResolver, Injector } from '@angular/core';
import { CodeRuleSelectService } from '../../service/code-rule-select.service';
import { CodeRuleInvokeInfo } from '../../model/code-rule-invoke-info';
export class SelectCodeRuleComponent {
    /**
     * @param {?} codeRuleSvc
     * @param {?} resolver
     * @param {?} injector
     */
    constructor(codeRuleSvc, resolver, injector) {
        this.codeRuleSvc = codeRuleSvc;
        this.resolver = resolver;
        this.injector = injector;
        this.codeRuleSelected = new EventEmitter();
        this.selectorClosed = new EventEmitter();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set serviceUnit(value) {
        this.codeRuleSvc.serviceUnit = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set sessionId(value) {
        this.codeRuleSvc.sessionId = value;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     * 点击确认，确认编号规则
     * @return {?}
     */
    confirmCodeRule() {
        /** @type {?} */
        const codeRuleInfo = this.codeRuleSvc.codeRule;
        if (!codeRuleInfo) {
            alert("当前未选中任何数据！");
            return;
        }
        /** @type {?} */
        const invokeInfo = new CodeRuleInvokeInfo();
        invokeInfo.id = codeRuleInfo.id;
        invokeInfo.code = codeRuleInfo.code;
        invokeInfo.name = codeRuleInfo.name;
        invokeInfo.serviceUnit = codeRuleInfo.serviceUnit;
        invokeInfo.byMetadata = codeRuleInfo.origin == "元数据" ? true : false;
        this.codeRuleSelected.emit(invokeInfo);
        this.closeSelector();
        // 清空缓存
        this.codeRuleSvc.clearData();
    }
    /**
     * 点击取消，关闭选择器
     * @return {?}
     */
    closeSelector() {
        this.selectorClosed.emit();
    }
}
SelectCodeRuleComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'app-select-metadatart',
                template: "<div class=\"modal-body\">\r\n    <div class=\"templateBlock\">\r\n        <app-coderule-list ></app-coderule-list>\r\n    </div>\r\n</div>\r\n<div class=\"modal-footer\">\r\n    <button type=\"button\" class=\"btn btn-default btn-primary\" (click)=\"confirmCodeRule()\">\u786E\u5B9A</button>\r\n    <button type=\"button\" class=\"btn btn-default\" (click)=\"closeSelector()\">\u53D6\u6D88</button>\r\n</div>",
                styles: [".templateBlock{display:flex}.infoBlock{width:100%;min-width:400px}.infoBlock label{width:50px}"]
            }] }
];
/** @nocollapse */
SelectCodeRuleComponent.ctorParameters = () => [
    { type: CodeRuleSelectService },
    { type: ComponentFactoryResolver },
    { type: Injector }
];
SelectCodeRuleComponent.propDecorators = {
    serviceUnit: [{ type: Input }],
    sessionId: [{ type: Input }],
    selectorClosed: [{ type: Output }],
    codeRuleSelected: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    SelectCodeRuleComponent.prototype.selectorClosed;
    /** @type {?} */
    SelectCodeRuleComponent.prototype.codeRuleSelected;
    /**
     * @type {?}
     * @private
     */
    SelectCodeRuleComponent.prototype.codeRuleSvc;
    /**
     * @type {?}
     * @private
     */
    SelectCodeRuleComponent.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    SelectCodeRuleComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LWNvZGUtcnVsZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZ3NwLWNtcC9jb2RlcnVsZS1zZWxlY3Rvci8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3NlbGVjdC1jb2RlLXJ1bGUvc2VsZWN0LWNvZGUtcnVsZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBYSxLQUFLLEVBQWEsTUFBTSxFQUFFLFlBQVksRUFBaUIsd0JBQXdCLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hKLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQy9FLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBUXZFLE1BQU0sT0FBTyx1QkFBdUI7Ozs7OztJQVVsQyxZQUFvQixXQUFrQyxFQUM1QyxRQUFrQyxFQUFVLFFBQWtCO1FBRHBELGdCQUFXLEdBQVgsV0FBVyxDQUF1QjtRQUM1QyxhQUFRLEdBQVIsUUFBUSxDQUEwQjtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVU7UUFIOUQscUJBQWdCLEdBQUcsSUFBSSxZQUFZLEVBQXNCLENBQUM7UUFJbEUsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO0lBQ2hELENBQUM7Ozs7O0lBWkQsSUFBYSxXQUFXLENBQUMsS0FBYTtRQUNwQyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7SUFDdkMsQ0FBQzs7Ozs7SUFDRCxJQUFhLFNBQVMsQ0FBQyxLQUFhO1FBQ2xDLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztJQUNyQyxDQUFDOzs7OztJQVNELFdBQVcsQ0FBQyxPQUFzQjtJQUVsQyxDQUFDOzs7OztJQUtELGVBQWU7O2NBQ1AsWUFBWSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUTtRQUM5QyxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ2pCLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUNwQixPQUFPO1NBQ1I7O2NBQ0ssVUFBVSxHQUF1QixJQUFJLGtCQUFrQixFQUFFO1FBQy9ELFVBQVUsQ0FBQyxFQUFFLEdBQUcsWUFBWSxDQUFDLEVBQUUsQ0FBQztRQUNoQyxVQUFVLENBQUMsSUFBSSxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUM7UUFDcEMsVUFBVSxDQUFDLElBQUksR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDO1FBQ3BDLFVBQVUsQ0FBQyxXQUFXLEdBQUcsWUFBWSxDQUFDLFdBQVcsQ0FBQztRQUNsRCxVQUFVLENBQUMsVUFBVSxHQUFHLFlBQVksQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUNwRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNyQixPQUFPO1FBQ1AsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUMvQixDQUFDOzs7OztJQUtELGFBQWE7UUFDWCxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzdCLENBQUM7OztZQW5ERixTQUFTLFNBQUM7O2dCQUVULFFBQVEsRUFBRSx1QkFBdUI7Z0JBQ2pDLHFhQUFnRDs7YUFFakQ7Ozs7WUFSUSxxQkFBcUI7WUFEd0Qsd0JBQXdCO1lBQUUsUUFBUTs7OzBCQVdySCxLQUFLO3dCQUdMLEtBQUs7NkJBR0wsTUFBTTsrQkFDTixNQUFNOzs7O0lBRFAsaURBQTRDOztJQUM1QyxtREFBb0U7Ozs7O0lBRXhELDhDQUEwQzs7Ozs7SUFDcEQsMkNBQTBDOzs7OztJQUFFLDJDQUEwQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTptYXgtbGluZS1sZW5ndGhcclxuaW1wb3J0IHsgQ29tcG9uZW50LCBWaWV3Q2hpbGQsIElucHV0LCBPbkNoYW5nZXMsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBTaW1wbGVDaGFuZ2VzLCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvZGVSdWxlU2VsZWN0U2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2UvY29kZS1ydWxlLXNlbGVjdC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ29kZVJ1bGVJbnZva2VJbmZvIH0gZnJvbSAnLi4vLi4vbW9kZWwvY29kZS1ydWxlLWludm9rZS1pbmZvJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpjb21wb25lbnQtc2VsZWN0b3JcclxuICBzZWxlY3RvcjogJ2FwcC1zZWxlY3QtbWV0YWRhdGFydCcsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL3NlbGVjdC1jb2RlLXJ1bGUuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL3NlbGVjdC1jb2RlLXJ1bGUuY29tcG9uZW50LmNzcyddXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTZWxlY3RDb2RlUnVsZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XHJcbiAgQElucHV0KCkgc2V0IHNlcnZpY2VVbml0KHZhbHVlOiBzdHJpbmcpIHtcclxuICAgIHRoaXMuY29kZVJ1bGVTdmMuc2VydmljZVVuaXQgPSB2YWx1ZTtcclxuICB9XHJcbiAgQElucHV0KCkgc2V0IHNlc3Npb25JZCh2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICB0aGlzLmNvZGVSdWxlU3ZjLnNlc3Npb25JZCA9IHZhbHVlO1xyXG4gIH1cclxuICBAT3V0cHV0KCkgc2VsZWN0b3JDbG9zZWQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gIEBPdXRwdXQoKSBjb2RlUnVsZVNlbGVjdGVkID0gbmV3IEV2ZW50RW1pdHRlcjxDb2RlUnVsZUludm9rZUluZm8+KCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY29kZVJ1bGVTdmM6IENvZGVSdWxlU2VsZWN0U2VydmljZSxcclxuICAgIHByaXZhdGUgcmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IpIHtcclxuICAgIHRoaXMuc2VsZWN0b3JDbG9zZWQgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICB9XHJcblxyXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDngrnlh7vnoa7orqTvvIznoa7orqTnvJblj7fop4TliJlcclxuICAgKi9cclxuICBjb25maXJtQ29kZVJ1bGUoKSB7XHJcbiAgICBjb25zdCBjb2RlUnVsZUluZm8gPSB0aGlzLmNvZGVSdWxlU3ZjLmNvZGVSdWxlO1xyXG4gICAgaWYgKCFjb2RlUnVsZUluZm8pIHtcclxuICAgICAgYWxlcnQoXCLlvZPliY3mnKrpgInkuK3ku7vkvZXmlbDmja7vvIFcIik7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IGludm9rZUluZm86IENvZGVSdWxlSW52b2tlSW5mbyA9IG5ldyBDb2RlUnVsZUludm9rZUluZm8oKTtcclxuICAgIGludm9rZUluZm8uaWQgPSBjb2RlUnVsZUluZm8uaWQ7XHJcbiAgICBpbnZva2VJbmZvLmNvZGUgPSBjb2RlUnVsZUluZm8uY29kZTtcclxuICAgIGludm9rZUluZm8ubmFtZSA9IGNvZGVSdWxlSW5mby5uYW1lO1xyXG4gICAgaW52b2tlSW5mby5zZXJ2aWNlVW5pdCA9IGNvZGVSdWxlSW5mby5zZXJ2aWNlVW5pdDtcclxuICAgIGludm9rZUluZm8uYnlNZXRhZGF0YSA9IGNvZGVSdWxlSW5mby5vcmlnaW4gPT0gXCLlhYPmlbDmja5cIiA/IHRydWUgOiBmYWxzZTtcclxuICAgIHRoaXMuY29kZVJ1bGVTZWxlY3RlZC5lbWl0KGludm9rZUluZm8pO1xyXG4gICAgdGhpcy5jbG9zZVNlbGVjdG9yKCk7XHJcbiAgICAvLyDmuIXnqbrnvJPlrZhcclxuICAgIHRoaXMuY29kZVJ1bGVTdmMuY2xlYXJEYXRhKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDngrnlh7vlj5bmtojvvIzlhbPpl63pgInmi6nlmahcclxuICAgKi9cclxuICBjbG9zZVNlbGVjdG9yKCk6IHZvaWQge1xyXG4gICAgdGhpcy5zZWxlY3RvckNsb3NlZC5lbWl0KCk7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=