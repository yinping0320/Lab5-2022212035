'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var path = _interopDefault(require('path'));
var fs = _interopDefault(require('fs-extra'));
var chalk = _interopDefault(require('chalk'));
var isObject = _interopDefault(require('is-plain-object'));

function processArrayOfTargets(targets, outputFolder) {
  return targets.map(target => ({
    from: target,
    to: path.join(outputFolder, path.basename(target))
  }));
}

function processObjectOfTargets(targets) {
  return Object.entries(targets).reduce((processedTargets, [from, to]) => Array.isArray(to) ? [...processedTargets, ...to.map(target => ({
    from,
    to: target
  }))] : [...processedTargets, {
    from,
    to
  }], []);
}

function copy(options = {}) {
  const {
    hook = 'buildEnd',
    outputFolder,
    targets = [],
    verbose = false,
    warnOnNonExist = false,
    ...rest
  } = options;
  return {
    name: 'copy',

    async [hook]() {
      let processedTargets = [];

      if (Array.isArray(targets) && targets.length) {
        if (!outputFolder) {
          this.error('\'outputFolder\' is not set. It is required if \'targets\' is an array');
        }

        processedTargets = processArrayOfTargets(targets, outputFolder);
      }

      if (isObject(targets) && Object.entries(targets).length) {
        processedTargets = processObjectOfTargets(targets);
      }

      if (processedTargets.length) {
        if (verbose) {
          console.log('Copied files and folders:');
        }

        for (const {
          from,
          to
        } of processedTargets) {
          try {
            await fs.copy(from, to, rest);

            if (verbose) {
              console.log(chalk.green(`${from} -> ${to}`));
            }
          } catch (e) {
            if (e.code === 'ENOENT') {
              if (verbose) {
                console.log(chalk.red(`${from} -> ${to} (no such file or folder: ${e.path})`));
              }

              if (warnOnNonExist) {
                this.warn(e);
              }
            } else {
              this.error(e);
            }
          }
        }
      }
    }

  };
}

module.exports = copy;
