/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector, ComponentFactoryResolver } from "@angular/core";
import { BsModalService } from '@farris/ui-modal';
import { AifPushSelectCreationRuleComponent } from '../aif-push-select-creation-rule/aif-push-select-creation-rule.component';
/**
 * 供外部调用的推式选择生单规则服务类接口
 */
export class AifPushSelectCreationRuleService {
    /**
     * @param {?} injector
     * @param {?} cfr
     * @param {?} modalService
     */
    constructor(injector, cfr, modalService) {
        this.injector = injector;
        this.cfr = cfr;
        this.modalService = modalService;
        /**
         * 内置模态框配置
         */
        this.innerModalOptions = {
            title: '生单规则选择',
            width: 650,
            height: 415,
            buttons: null,
            showButtons: false,
        };
    }
    /**
     * 显示选择生单规则模态框，点击确定按钮时返回选中的生单规则
     * @param {?} args 查询生单规则所需参数
     * @param {?=} modalOptions 模态框配置,可为空
     * @return {?}
     */
    showCrRuleSelectModal(args, modalOptions) {
        /** @type {?} */
        const cmpF = this.cfr.resolveComponentFactory(AifPushSelectCreationRuleComponent);
        /** @type {?} */
        const cmpR = cmpF.create(this.injector);
        cmpR.instance.getCreationRule(args);
        cmpR.instance.bsModalRef = this.modalService.show(cmpR, this.isNullOrUndefined(modalOptions) ? this.innerModalOptions : modalOptions);
        return cmpR.instance.subject.asObservable();
    }
    /**
     * @private
     * @param {?} arg
     * @return {?}
     */
    isNullOrUndefined(arg) {
        return arg == null;
    }
}
AifPushSelectCreationRuleService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AifPushSelectCreationRuleService.ctorParameters = () => [
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: BsModalService }
];
if (false) {
    /**
     * 内置模态框配置
     * @type {?}
     * @private
     */
    AifPushSelectCreationRuleService.prototype.innerModalOptions;
    /**
     * @type {?}
     * @private
     */
    AifPushSelectCreationRuleService.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    AifPushSelectCreationRuleService.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    AifPushSelectCreationRuleService.prototype.modalService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWlmLXB1c2gtc2VsZWN0LWNyZWF0aW9uLXJ1bGUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bnc3AtYWlmL3J1bnRpbWUtYXBpLyIsInNvdXJjZXMiOlsibGliL2FpZi1wdXNoLXNlbGVjdC1jcmVhdGlvbi1ydWxlL3NlcnZpY2UvYWlmLXB1c2gtc2VsZWN0LWNyZWF0aW9uLXJ1bGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFL0UsT0FBTyxFQUFFLGNBQWMsRUFBZ0IsTUFBTSxrQkFBa0IsQ0FBQztBQUNoRSxPQUFPLEVBQUUsa0NBQWtDLEVBQUUsTUFBTSwwRUFBMEUsQ0FBQzs7OztBQVE5SCxNQUFNLE9BQU8sZ0NBQWdDOzs7Ozs7SUFZekMsWUFBb0IsUUFBa0IsRUFBVSxHQUE2QixFQUFVLFlBQTRCO1FBQS9GLGFBQVEsR0FBUixRQUFRLENBQVU7UUFBVSxRQUFHLEdBQUgsR0FBRyxDQUEwQjtRQUFVLGlCQUFZLEdBQVosWUFBWSxDQUFnQjs7OztRQVJsRyxzQkFBaUIsR0FBaUI7WUFDL0MsS0FBSyxFQUFFLFFBQVE7WUFDZixLQUFLLEVBQUUsR0FBRztZQUNWLE1BQU0sRUFBRSxHQUFHO1lBQ1gsT0FBTyxFQUFFLElBQUk7WUFDYixXQUFXLEVBQUUsS0FBSztTQUNyQixDQUFDO0lBSUYsQ0FBQzs7Ozs7OztJQU9NLHFCQUFxQixDQUFDLElBQXlCLEVBQUUsWUFBMkI7O2NBQ3pFLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLGtDQUFrQyxDQUFDOztjQUMzRSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXBDLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFdEksT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNoRCxDQUFDOzs7Ozs7SUFFTyxpQkFBaUIsQ0FBQyxHQUFRO1FBQzlCLE9BQU8sR0FBRyxJQUFJLElBQUksQ0FBQztJQUN2QixDQUFDOzs7WUFsQ0osVUFBVTs7OztZQVZVLFFBQVE7WUFBRSx3QkFBd0I7WUFFOUMsY0FBYzs7Ozs7Ozs7SUFhbkIsNkRBTUU7Ozs7O0lBRVUsb0RBQTBCOzs7OztJQUFFLCtDQUFxQzs7Ozs7SUFBRSx3REFBb0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3RvciwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyBCc01vZGFsU2VydmljZSwgTW9kYWxPcHRpb25zIH0gZnJvbSAnQGZhcnJpcy91aS1tb2RhbCc7XHJcbmltcG9ydCB7IEFpZlB1c2hTZWxlY3RDcmVhdGlvblJ1bGVDb21wb25lbnQgfSBmcm9tICcuLi9haWYtcHVzaC1zZWxlY3QtY3JlYXRpb24tcnVsZS9haWYtcHVzaC1zZWxlY3QtY3JlYXRpb24tcnVsZS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBBaWZDcmVhdGlvblJ1bGVFbnRpdHkgfSBmcm9tICdAZ3NwLWFpZi9jb21tb24tYXBpJztcclxuaW1wb3J0IHsgR2V0Q3JlYXRpb25SdWxlQXJncyB9IGZyb20gJy4uLy4uL2VudGl0eS9nZXQtY3JlYXRpb24tcnVsZS1hcmdzJztcclxuXHJcbi8qKlxyXG4gKiDkvpvlpJbpg6josIPnlKjnmoTmjqjlvI/pgInmi6nnlJ/ljZXop4TliJnmnI3liqHnsbvmjqXlj6NcclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEFpZlB1c2hTZWxlY3RDcmVhdGlvblJ1bGVTZXJ2aWNlIHtcclxuICAgIC8qKlxyXG4gICAgICog5YaF572u5qih5oCB5qGG6YWN572uXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgaW5uZXJNb2RhbE9wdGlvbnM6IE1vZGFsT3B0aW9ucyA9IHtcclxuICAgICAgICB0aXRsZTogJ+eUn+WNleinhOWImemAieaLqScsXHJcbiAgICAgICAgd2lkdGg6IDY1MCxcclxuICAgICAgICBoZWlnaHQ6IDQxNSxcclxuICAgICAgICBidXR0b25zOiBudWxsLFxyXG4gICAgICAgIHNob3dCdXR0b25zOiBmYWxzZSxcclxuICAgIH07XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsIHByaXZhdGUgY2ZyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIHByaXZhdGUgbW9kYWxTZXJ2aWNlOiBCc01vZGFsU2VydmljZSkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaYvuekuumAieaLqeeUn+WNleinhOWImeaooeaAgeahhu+8jOeCueWHu+ehruWumuaMiemSruaXtui/lOWbnumAieS4reeahOeUn+WNleinhOWImVxyXG4gICAgICogQHBhcmFtIGFyZ3Mg5p+l6K+i55Sf5Y2V6KeE5YiZ5omA6ZyA5Y+C5pWwXHJcbiAgICAgKiBAcGFyYW0gbW9kYWxPcHRpb25zIOaooeaAgeahhumFjee9rizlj6/kuLrnqbpcclxuICAgICAqL1xyXG4gICAgcHVibGljIHNob3dDclJ1bGVTZWxlY3RNb2RhbChhcmdzOiBHZXRDcmVhdGlvblJ1bGVBcmdzLCBtb2RhbE9wdGlvbnM/OiBNb2RhbE9wdGlvbnMpOiBPYnNlcnZhYmxlPEFpZkNyZWF0aW9uUnVsZUVudGl0eT4ge1xyXG4gICAgICAgIGNvbnN0IGNtcEYgPSB0aGlzLmNmci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShBaWZQdXNoU2VsZWN0Q3JlYXRpb25SdWxlQ29tcG9uZW50KTtcclxuICAgICAgICBjb25zdCBjbXBSID0gY21wRi5jcmVhdGUodGhpcy5pbmplY3Rvcik7XHJcbiAgICAgICAgY21wUi5pbnN0YW5jZS5nZXRDcmVhdGlvblJ1bGUoYXJncyk7XHJcblxyXG4gICAgICAgIGNtcFIuaW5zdGFuY2UuYnNNb2RhbFJlZiA9IHRoaXMubW9kYWxTZXJ2aWNlLnNob3coY21wUiwgdGhpcy5pc051bGxPclVuZGVmaW5lZChtb2RhbE9wdGlvbnMpID8gdGhpcy5pbm5lck1vZGFsT3B0aW9ucyA6IG1vZGFsT3B0aW9ucyk7XHJcblxyXG4gICAgICAgIHJldHVybiBjbXBSLmluc3RhbmNlLnN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpc051bGxPclVuZGVmaW5lZChhcmc6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBhcmcgPT0gbnVsbDtcclxuICAgIH1cclxufSJdfQ==