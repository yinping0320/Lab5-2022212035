/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from "@angular/core";
import { AifPullSelectCreationRuleInternalService } from "./service/aif-pull-select-creation-rule.internal.service";
import { CommonModule } from "@angular/common";
import { HttpClientModule } from "@angular/common/http";
import { ButtonsModule } from "@progress/kendo-angular-buttons";
import { DropDownsModule } from "@progress/kendo-angular-dropdowns";
import { SplitterModule } from "@progress/kendo-angular-layout";
import { AifPullSelectCreationRuleComponent } from "./aif-pull-select-creation-rule/aif-pull-select-creation-rule.component";
import { HttpService } from "@ecp-caf/caf-common";
import { FormsModule, ReactiveFormsModule } from "@angular/forms";
import { ModalModule, BsModalService } from '@farris/ui-modal';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { AifPullSelectCreationRuleService } from './service/aif-pull-select-creation-rule.service';
import { AifPullSelectCreationRuleModuleConfig } from '../entity/aif-pull-select-creation-rule-module-config';
const ɵ0 = {};
export class AifPullSelectCreationRuleModule {
    /**
     * @param {?=} config
     * @return {?}
     */
    static forRoot(config) {
        return {
            "ngModule": AifPullSelectCreationRuleModule,
            "providers": [
                { provide: AifPullSelectCreationRuleModuleConfig, useValue: config || {} }
            ]
        };
    }
}
AifPullSelectCreationRuleModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    ReactiveFormsModule,
                    HttpClientModule,
                    ButtonsModule,
                    DropDownsModule,
                    SplitterModule,
                    ModalModule,
                    FarrisDialogModule,
                ],
                providers: [
                    HttpService,
                    BsModalService,
                    { provide: AifPullSelectCreationRuleModuleConfig, useValue: ɵ0 },
                    AifPullSelectCreationRuleInternalService,
                    AifPullSelectCreationRuleService
                ],
                declarations: [
                    AifPullSelectCreationRuleComponent
                ],
                bootstrap: [
                    AifPullSelectCreationRuleComponent
                ],
                entryComponents: [
                    AifPullSelectCreationRuleComponent
                ],
                exports: []
            },] }
];
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWlmLXB1bGwtc2VsZWN0LWNyZWF0aW9uLXJ1bGUubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGdzcC1haWYvcnVudGltZS1hcGkvIiwic291cmNlcyI6WyJsaWIvYWlmLXB1bGwtc2VsZWN0LWNyZWF0aW9uLXJ1bGUvYWlmLXB1bGwtc2VsZWN0LWNyZWF0aW9uLXJ1bGUubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFpQyxNQUFNLGVBQWUsQ0FBQztBQUN4RSxPQUFPLEVBQUUsd0NBQXdDLEVBQUUsTUFBTSwwREFBMEQsQ0FBQztBQUNwSCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNwRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDaEUsT0FBTyxFQUFFLGtDQUFrQyxFQUFFLE1BQU0seUVBQXlFLENBQUM7QUFDN0gsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxXQUFXLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNsRSxPQUFPLEVBQUUsV0FBVyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLGlEQUFpRCxDQUFDO0FBQ25HLE9BQU8sRUFBRSxxQ0FBcUMsRUFBRSxNQUFNLHVEQUF1RCxDQUFDO1dBaUIxQyxFQUFFO0FBaUJ0RSxNQUFNLE9BQU8sK0JBQStCOzs7OztJQUNqQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQThDO1FBRWhFLE9BQU87WUFDSCxVQUFVLEVBQUUsK0JBQStCO1lBQzNDLFdBQVcsRUFBRTtnQkFDVCxFQUFFLE9BQU8sRUFBRSxxQ0FBcUMsRUFBRSxRQUFRLEVBQUUsTUFBTSxJQUFJLEVBQUUsRUFBRTthQUM3RTtTQUNKLENBQUM7SUFDTixDQUFDOzs7WUF6Q0osUUFBUSxTQUFDO2dCQUNOLE9BQU8sRUFBRTtvQkFDTCxZQUFZO29CQUNaLFdBQVc7b0JBQ1gsbUJBQW1CO29CQUNuQixnQkFBZ0I7b0JBQ2hCLGFBQWE7b0JBQ2IsZUFBZTtvQkFDZixjQUFjO29CQUNkLFdBQVc7b0JBQ1gsa0JBQWtCO2lCQUNyQjtnQkFDRCxTQUFTLEVBQUU7b0JBQ1AsV0FBVztvQkFDWCxjQUFjO29CQUNkLEVBQUUsT0FBTyxFQUFFLHFDQUFxQyxFQUFFLFFBQVEsSUFBSSxFQUFFO29CQUNoRSx3Q0FBd0M7b0JBQ3hDLGdDQUFnQztpQkFDbkM7Z0JBQ0QsWUFBWSxFQUFFO29CQUNWLGtDQUFrQztpQkFDckM7Z0JBQ0QsU0FBUyxFQUFFO29CQUNQLGtDQUFrQztpQkFDckM7Z0JBQ0QsZUFBZSxFQUFFO29CQUNiLGtDQUFrQztpQkFDckM7Z0JBQ0QsT0FBTyxFQUFFLEVBRVI7YUFDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBQcm92aWRlciB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IEFpZlB1bGxTZWxlY3RDcmVhdGlvblJ1bGVJbnRlcm5hbFNlcnZpY2UgfSBmcm9tIFwiLi9zZXJ2aWNlL2FpZi1wdWxsLXNlbGVjdC1jcmVhdGlvbi1ydWxlLmludGVybmFsLnNlcnZpY2VcIjtcclxuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vblwiO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50TW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vbi9odHRwXCI7XHJcbmltcG9ydCB7IEJ1dHRvbnNNb2R1bGUgfSBmcm9tIFwiQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItYnV0dG9uc1wiO1xyXG5pbXBvcnQgeyBEcm9wRG93bnNNb2R1bGUgfSBmcm9tIFwiQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItZHJvcGRvd25zXCI7XHJcbmltcG9ydCB7IFNwbGl0dGVyTW9kdWxlIH0gZnJvbSBcIkBwcm9ncmVzcy9rZW5kby1hbmd1bGFyLWxheW91dFwiO1xyXG5pbXBvcnQgeyBBaWZQdWxsU2VsZWN0Q3JlYXRpb25SdWxlQ29tcG9uZW50IH0gZnJvbSBcIi4vYWlmLXB1bGwtc2VsZWN0LWNyZWF0aW9uLXJ1bGUvYWlmLXB1bGwtc2VsZWN0LWNyZWF0aW9uLXJ1bGUuY29tcG9uZW50XCI7XHJcbmltcG9ydCB7IEh0dHBTZXJ2aWNlIH0gZnJvbSBcIkBlY3AtY2FmL2NhZi1jb21tb25cIjtcclxuaW1wb3J0IHsgRm9ybXNNb2R1bGUsIFJlYWN0aXZlRm9ybXNNb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcclxuaW1wb3J0IHsgTW9kYWxNb2R1bGUsIEJzTW9kYWxTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1tb2RhbCc7XHJcbmltcG9ydCB7IEZhcnJpc0RpYWxvZ01vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktZGlhbG9nJztcclxuaW1wb3J0IHsgQWlmUHVsbFNlbGVjdENyZWF0aW9uUnVsZVNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2UvYWlmLXB1bGwtc2VsZWN0LWNyZWF0aW9uLXJ1bGUuc2VydmljZSc7XHJcbmltcG9ydCB7IEFpZlB1bGxTZWxlY3RDcmVhdGlvblJ1bGVNb2R1bGVDb25maWcgfSBmcm9tICcuLi9lbnRpdHkvYWlmLXB1bGwtc2VsZWN0LWNyZWF0aW9uLXJ1bGUtbW9kdWxlLWNvbmZpZyc7XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gICAgaW1wb3J0czogW1xyXG4gICAgICAgIENvbW1vbk1vZHVsZSxcclxuICAgICAgICBGb3Jtc01vZHVsZSxcclxuICAgICAgICBSZWFjdGl2ZUZvcm1zTW9kdWxlLFxyXG4gICAgICAgIEh0dHBDbGllbnRNb2R1bGUsXHJcbiAgICAgICAgQnV0dG9uc01vZHVsZSxcclxuICAgICAgICBEcm9wRG93bnNNb2R1bGUsXHJcbiAgICAgICAgU3BsaXR0ZXJNb2R1bGUsXHJcbiAgICAgICAgTW9kYWxNb2R1bGUsXHJcbiAgICAgICAgRmFycmlzRGlhbG9nTW9kdWxlLFxyXG4gICAgXSxcclxuICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgIEh0dHBTZXJ2aWNlLFxyXG4gICAgICAgIEJzTW9kYWxTZXJ2aWNlLFxyXG4gICAgICAgIHsgcHJvdmlkZTogQWlmUHVsbFNlbGVjdENyZWF0aW9uUnVsZU1vZHVsZUNvbmZpZywgdXNlVmFsdWU6IHt9IH0sXHJcbiAgICAgICAgQWlmUHVsbFNlbGVjdENyZWF0aW9uUnVsZUludGVybmFsU2VydmljZSxcclxuICAgICAgICBBaWZQdWxsU2VsZWN0Q3JlYXRpb25SdWxlU2VydmljZVxyXG4gICAgXSxcclxuICAgIGRlY2xhcmF0aW9uczogW1xyXG4gICAgICAgIEFpZlB1bGxTZWxlY3RDcmVhdGlvblJ1bGVDb21wb25lbnRcclxuICAgIF0sXHJcbiAgICBib290c3RyYXA6IFtcclxuICAgICAgICBBaWZQdWxsU2VsZWN0Q3JlYXRpb25SdWxlQ29tcG9uZW50XHJcbiAgICBdLFxyXG4gICAgZW50cnlDb21wb25lbnRzOiBbXHJcbiAgICAgICAgQWlmUHVsbFNlbGVjdENyZWF0aW9uUnVsZUNvbXBvbmVudFxyXG4gICAgXSxcclxuICAgIGV4cG9ydHM6IFtcclxuXHJcbiAgICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBBaWZQdWxsU2VsZWN0Q3JlYXRpb25SdWxlTW9kdWxlIHtcclxuICAgIHB1YmxpYyBzdGF0aWMgZm9yUm9vdChjb25maWc/OiBBaWZQdWxsU2VsZWN0Q3JlYXRpb25SdWxlTW9kdWxlQ29uZmlnKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIFwibmdNb2R1bGVcIjogQWlmUHVsbFNlbGVjdENyZWF0aW9uUnVsZU1vZHVsZSxcclxuICAgICAgICAgICAgXCJwcm92aWRlcnNcIjogW1xyXG4gICAgICAgICAgICAgICAgeyBwcm92aWRlOiBBaWZQdWxsU2VsZWN0Q3JlYXRpb25SdWxlTW9kdWxlQ29uZmlnLCB1c2VWYWx1ZTogY29uZmlnIHx8IHt9IH1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn0iXX0=