import { Directive, HostBinding, HostListener, Input, NgModule } from '@angular/core';

const isDocumentAvailable = () => {
    return typeof document !== 'undefined' && !!document.body;
};
/**
 * Represents the [Kendo UI Label directive for Angular]({% slug overview_label %}).
 * The Label associates a focusable Angular component or an HTML element
 * with a `label` tag by using the `[for]` property binding.
 *
 * To associate a component by using the `label` element, either:
 * * Set the `[for]` property binding to a
 * [template reference variable]({{ site.data.urls.angular['templatesyntax'] }}#template-reference-variables--var-), or
 * * Set the `[for]` property binding to an `id` HTML string value.
 *
 * @example
 * ```ts
 * _@Component({
 * selector: 'my-app',
 * template: `
 *  <div class="row example-wrapper" style="min-height: 450px;">
 *    <div class="col-xs-12 col-md-6 example-col">
 *      <label [for]="datepicker">DatePicker: </label>
 *      <kendo-datepicker #datepicker></kendo-datepicker>
 *    </div>
 *
 *    <div class="col-xs-12 col-md-6 example-col">
 *      <label [for]="'input'">Input: </label>
 *      <input id="input" />
 *    </div>
 *  </div>
 * `
 * })
 * class AppComponent { }
 * ```
 */
class LabelDirective {
    get labelFor() {
        if (typeof this.for === 'string') {
            return this.for;
        }
        if (!isDocumentAvailable()) {
            return null;
        }
        const component = this.getFocusableComponent() || {};
        return component.focusableId || component.id || null;
    }
    /**
     * @hidden
     */
    handleClick() {
        const component = this.getFocusableComponent();
        if (!component) {
            return;
        }
        if (component.focusComponent) {
            component.focusComponent();
        }
        if (component.focus) {
            component.focus();
        }
    }
    getFocusableComponent() {
        const target = this.for;
        if (target) {
            const focusableComponent = target;
            const hasFocus = focusableComponent.focus !== undefined;
            const hasFocusComponent = focusableComponent.focusComponent !== undefined;
            if (hasFocus || hasFocusComponent) {
                return target;
            }
            if (isDocumentAvailable() && typeof target === 'string') {
                return document.querySelector(`[id='${target}']`);
            }
        }
        return null;
    }
}
LabelDirective.decorators = [
    { type: Directive, args: [{
                selector: 'label[for]' //tslint:disable-line:directive-selector
            },] },
];
/** @nocollapse */
LabelDirective.ctorParameters = () => [];
LabelDirective.propDecorators = {
    'for': [{ type: Input },],
    'labelFor': [{ type: HostBinding, args: ['attr.for',] },],
    'handleClick': [{ type: HostListener, args: ['click',] },],
};

const COMPONENT_DIRECTIVES = [LabelDirective];
/**
 * The exported package module.
 *
 * The package exports:
 * - `LabelDirective`&mdash;The Label directive class.
 *
 * @example
 *
 * ```ts-no-run
 * // Import the Label module
 * import { LabelModule } from '@progress/kendo-angular-label';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare app component
 *     imports:      [BrowserModule, LabelModule], // import Label module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * // Compile and launch the module
 * platformBrowserDynamic().bootstrapModule(AppModule);
 *
 * ```
 */
class LabelModule {
}
LabelModule.decorators = [
    { type: NgModule, args: [{
                declarations: [COMPONENT_DIRECTIVES],
                exports: [COMPONENT_DIRECTIVES]
            },] },
];
/** @nocollapse */
LabelModule.ctorParameters = () => [];

/**
 * Generated bundle index. Do not edit.
 */

export { LabelDirective, LabelModule };
