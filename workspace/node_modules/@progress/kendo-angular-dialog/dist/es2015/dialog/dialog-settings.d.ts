import { ComponentRef, TemplateRef, ViewContainerRef } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { DialogComponent } from './dialog.component';
/**
 * The settings for the Dialog actions when the Dialog is opened through `DialogService`
 * ([see example]({% slug api_dialog_dialogservice %}#toc-open)).
 */
export declare class DialogAction {
    /**
     * The text of the action button.
     */
    text: string;
    /**
     * Determines if the action button is styled as a primary button.
     */
    primary?: boolean;
}
/**
 * Indicates that the **Close** button is clicked. Used when the results from
 * the Dialogs that are opened through `DialogService` are filtered
 * ([see example]({% slug api_dialog_dialogservice %}#toc-open)).
 */
export declare class DialogCloseResult {
}
/**
 * Specifies the possible result types of the Dialog. Instances of
 * [`DialogCloseResult`]({% slug api_dialog_dialogcloseresult %})
 * indicate that the **Close** button of the Dialog was clicked
 * ([see example]({% slug api_dialog_dialogservice %}#toc-open).
 * Otherwise, the value is the configuration of the action button that was clicked.
 */
export declare type DialogResult = DialogCloseResult | DialogAction;
/**
 * The settings that can be used when the Dialog is opened through `DialogService`.
 * ([see example]({% slug api_dialog_dialogservice %}#toc-open)).
 */
export declare class DialogSettings {
    /**
     * Sets the title of the Dialog. If `title` is omitted,
     * the Dialog will not render a **Close** button.
     */
    title?: string;
    /**
     * Defines the content of the Dialog.
     * ([see example]({% slug service_dialog %}#toc-using-components)).
     */
    content?: string | TemplateRef<any> | Function;
    /**
     * Specifies the width of the Dialog.
     */
    width?: number;
    /**
     * Specifies the minimum width of the Dialog.
     */
    minWidth?: number;
    /**
     * Specifies the height of the Dialog.
     */
    height?: number;
    /**
     * Defines the container in which the Dialog will be inserted.
     * Specifying this option changes the place in the page hierarchy where the Dialog will be inserted.
     * The styling of the component will remain the same.
     */
    appendTo?: ViewContainerRef;
    /**
     * Sets the action buttons of the Dialog.
     */
    actions?: DialogAction[] | any[] | TemplateRef<any>;
    /**
     * Sets the focused element query selector.
     */
    autoFocusedElement?: string;
}
/**
 * Holds references to the object instance and published events of the Dialog.
 * Controls the Dialogs that were opened through the `DialogService`
 * ([see example]({% slug api_dialog_dialogservice %}#toc-open)).
 */
export declare class DialogRef {
    /**
     * Emits events when the Dialog is closed either through the **Close** button of the title bar or through the action buttons.
     * If the **Close** button of the title bar is clicked, `DialogResult` is a `DialogCloseResult` instance.
     * If the Dialog is closed through the action buttons, `DialogResult` contains the object that was passed when the Dialog was opened.
     */
    result: Observable<DialogResult>;
    /**
     * A reference to the Dialog instance.
     */
    dialog: ComponentRef<DialogComponent>;
    /**
     * A reference to the child component of the Dialog.
     * Available when the Dialog is opened with [component content]({% slug service_dialog %}#toc-using-components).
     */
    content: ComponentRef<any>;
    /**
     * Allows you to close the Dialog through code.
     */
    close: Function;
}
