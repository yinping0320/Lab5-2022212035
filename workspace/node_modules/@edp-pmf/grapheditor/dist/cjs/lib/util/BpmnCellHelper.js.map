{"version":3,"file":"BpmnCellHelper.js","sourceRoot":"","sources":["../../../../src/lib/util/BpmnCellHelper.ts"],"names":[],"mappings":";;;AACA,4DAA2D;AAC3D,8CAA6C;AAE7C,kDAAoD;AAEpD;;GAEG;AACH;IAAA;IAyCA,CAAC;IAtCG;;;;OAIG;IACW,uBAAQ,GAAtB,UAAuB,SAAiB,EAAE,IAAgF;QACtH,cAAc,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;IAC3C,CAAC;IAED;;;OAGG;IACW,qBAAM,GAApB,UAAqB,SAAiB;QAClC,OAAO,cAAc,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IAC3C,CAAC;IAED;;;;;;;OAOG;IACW,uBAAQ,GAAtB,UAAuB,SAAiB,EAAE,KAAW,EAAE,QAA+B,EAAE,KAAc;QAClG,IAAM,IAAI,GAAG,cAAc,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAC7C,IAAI,IAAI,EAAE;YACN,IAAM,IAAI,GAAG,IAAI,IAAI,CAAC,KAAK,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;YAC9C,IAAI,IAAI,YAAY,mBAAQ,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,0BAAa,CAAC,OAAO,CAAC,EAAE;gBAClG,IAAI,CAAC,KAAK,GAAG,WAAS,IAAI,CAAC,OAAO,CAAC,0BAAa,CAAC,OAAO,CAAC,MAAG,CAAC;aAChE;YACD,OAAO,IAAI,CAAC;SACf;aAAM;YACH,IAAM,IAAI,GAAG,IAAI,iCAAe,CAAC,KAAK,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;YACzD,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;SAC9B;IACL,CAAC;IAvCa,oBAAK,GAAwG,EAAE,CAAC;IAwClI,qBAAC;CAAA,AAzCD,IAyCC;AAzCY,wCAAc","sourcesContent":["import { Cell } from \"../model/Cell\";\r\nimport { DefaultNodeCell } from \"../model/DefaultNodeCell\";\r\nimport { NodeCell } from \"../model/NodeCell\";\r\nimport { MxGraphNS } from \"@edp-pmf/mxgraph-ts\";\r\nimport { FlowNodeState } from \"@edp-pmf/bpmn-model\";\r\n\r\n/**\r\n * 元素生成器工具\r\n */\r\nexport class BpmnCellHelper {\r\n    public static ctors: { [clrTypeId: string]: new (value?: any, geometry?: MxGraphNS.mxGeometry, style?: string) => Cell } = {};\r\n\r\n    /**\r\n     * 注册构造器\r\n     * @param clrTypeId 类型ID\r\n     * @param ctor 构造方法\r\n     */\r\n    public static register(clrTypeId: string, ctor: new (value?: any, geometry?: MxGraphNS.mxGeometry, style?: string) => Cell) {\r\n        BpmnCellHelper.ctors[clrTypeId] = ctor;\r\n    }\r\n\r\n    /**\r\n     * 删除构造器\r\n     * @param clrTypeId 类型ID\r\n     */\r\n    public static remove(clrTypeId: string) {\r\n        delete BpmnCellHelper.ctors[clrTypeId];\r\n    }\r\n\r\n    /**\r\n     * 生成元素\r\n     * @param clrTypeId \r\n     * @param value \r\n     * @param geometry \r\n     * @param style \r\n     * @returns \r\n     */\r\n    public static generate(clrTypeId: string, value?: any, geometry?: MxGraphNS.mxGeometry, style?: string): Cell {\r\n        const ctor = BpmnCellHelper.ctors[clrTypeId];\r\n        if (ctor) {\r\n            const cell = new ctor(value, geometry, style);\r\n            if (cell instanceof NodeCell && style == null && cell.imgUrls && cell.imgUrls[FlowNodeState.Default]) {\r\n                cell.style = `image=${cell.imgUrls[FlowNodeState.Default]};`;\r\n            }\r\n            return cell;\r\n        } else {\r\n            const cell = new DefaultNodeCell(value, geometry, style);\r\n            cell.clrTypeId = clrTypeId;\r\n        }\r\n    }\r\n}"]}