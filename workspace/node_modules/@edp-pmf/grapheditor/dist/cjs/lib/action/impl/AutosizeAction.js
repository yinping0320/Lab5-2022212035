"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutosizeAction = void 0;
var tslib_1 = require("tslib");
var KeyCodes_1 = require("../../util/KeyCodes");
var PmfEvents_1 = require("../../util/PmfEvents");
var Action_1 = require("../Action");
var ActionKeys_1 = require("../ActionKeys");
var AutosizeAction = /** @class */ (function (_super) {
    tslib_1.__extends(AutosizeAction, _super);
    function AutosizeAction(editorUi) {
        var _this = _super.call(this, ActionKeys_1.ActionKeys.pmf_autosize, editorUi, false) || this;
        _this.shortcutControlKey = true;
        _this.shortcutShiftKey = true;
        _this.shortcutKeyCode = KeyCodes_1.KeyCodes.Y;
        _this.editorUi.addListener(PmfEvents_1.PmfEvents.SelectionModelChanged, function () {
            _this.setEnabled(_this.isVertexSelected(_this.editorUi.graph));
        });
        return _this;
    }
    AutosizeAction.prototype.execute = function (evt) {
        var graph = this.editorUi.graph;
        var cells = graph.getSelectionCells();
        if (cells != null) {
            graph.getModel().beginUpdate();
            try {
                for (var i = 0; i < cells.length; i++) {
                    var cell = cells[i];
                    if (graph.getModel().getChildCount(cell)) {
                        graph.updateGroupBounds([cell], 20);
                    }
                    else {
                        var state = graph.view.getState(cell);
                        var geo = graph.getCellGeometry(cell);
                        if (graph.getModel().isVertex(cell) && state != null && state.text != null &&
                            geo != null && graph.isWrapping(cell)) {
                            geo = geo.clone();
                            geo.height = state.text.boundingBox.height / graph.view.scale;
                            graph.getModel().setGeometry(cell, geo);
                        }
                        else {
                            graph.updateCellSize(cell);
                        }
                    }
                }
            }
            finally {
                graph.getModel().endUpdate();
            }
        }
    };
    AutosizeAction.prototype.isVertexSelected = function (graph) {
        var vertexSelected = false;
        var cells = graph.getSelectionCells();
        if (cells != null) {
            for (var i = 0; i < cells.length; i++) {
                var cell = cells[i];
                if (graph.getModel().isVertex(cell)) {
                    vertexSelected = true;
                }
                if (vertexSelected) {
                    break;
                }
            }
        }
        return vertexSelected;
    };
    return AutosizeAction;
}(Action_1.Action));
exports.AutosizeAction = AutosizeAction;
//# sourceMappingURL=AutosizeAction.js.map