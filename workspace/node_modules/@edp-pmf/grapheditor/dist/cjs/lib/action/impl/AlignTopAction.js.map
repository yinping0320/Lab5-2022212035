{"version":3,"file":"AlignTopAction.js","sourceRoot":"","sources":["../../../../../src/lib/action/impl/AlignTopAction.ts"],"names":[],"mappings":";;;;AAAA,kDAAkD;AAGlD,kDAAiD;AACjD,oCAAmC;AACnC,4CAA2C;AAE3C;IAAoC,0CAAM;IACtC,wBAAY,QAAmB;QAA/B,YACI,kBAAM,uBAAU,CAAC,YAAY,EAAE,QAAQ,EAAE,KAAK,CAAC,SASlD;QAPG,KAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,qBAAS,CAAC,aAAa,EAAE;YAC/C,KAAI,CAAC,UAAU,CAAC,KAAI,CAAC,oBAAoB,CAAC,KAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;QAEH,KAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,qBAAS,CAAC,qBAAqB,EAAE;YACvD,KAAI,CAAC,UAAU,CAAC,KAAI,CAAC,oBAAoB,CAAC,KAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;;IACP,CAAC;IAED,gCAAO,GAAP,UAAQ,GAAkC;QACtC,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;QAChC,KAAK,CAAC,UAAU,CAAC,wBAAW,CAAC,SAAS,CAAC,CAAC;IAC5C,CAAC;IAED,6CAAoB,GAApB,UAAqB,KAAY;QAC7B,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC;IACnG,CAAC;IAED,mCAAU,GAAV,UAAW,KAAY;QACnB,IAAI,QAAQ,GAAG,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,gBAAgB,EAAE,CAAC,CAAC;QAClF,OAAO,QAAQ,CAAC;IACpB,CAAC;IAED,yCAAgB,GAAhB,UAAiB,KAAY;QACzB,IAAI,cAAc,GAAG,KAAK,CAAC;QAE3B,IAAI,KAAK,GAAG,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAEtC,IAAI,KAAK,IAAI,IAAI,EAAE;YACf,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACnC,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBAEpB,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;oBACjC,cAAc,GAAG,IAAI,CAAC;iBACzB;gBAED,IAAI,cAAc,EAAE;oBAChB,MAAM;iBACT;aACJ;SACJ;QAED,OAAO,cAAc,CAAC;IAC1B,CAAC;IACL,qBAAC;AAAD,CAAC,AAhDD,CAAoC,eAAM,GAgDzC;AAhDY,wCAAc","sourcesContent":["import { mxConstants } from \"@edp-pmf/mxgraph-ts\";\r\nimport { IEditorUi } from \"../../ui/IEditorUi\";\r\nimport { Graph } from \"../../ui/Graph\";\r\nimport { PmfEvents } from \"../../util/PmfEvents\";\r\nimport { Action } from \"../Action\";\r\nimport { ActionKeys } from \"../ActionKeys\";\r\n\r\nexport class AlignTopAction extends Action {\r\n    constructor(editorUi: IEditorUi) {\r\n        super(ActionKeys.pmf_topAlign, editorUi, false);\r\n\r\n        this.editorUi.addListener(PmfEvents.LockedChanged, () => {\r\n            this.setEnabled(this.isAlignActionEnabled(this.editorUi.graph));\r\n        });\r\n\r\n        this.editorUi.addListener(PmfEvents.SelectionModelChanged, () => {\r\n            this.setEnabled(this.isAlignActionEnabled(this.editorUi.graph));\r\n        });\r\n    }\r\n\r\n    execute(evt?: PointerEvent | KeyboardEvent): void {\r\n        let graph = this.editorUi.graph;\r\n        graph.alignCells(mxConstants.ALIGN_TOP);\r\n    }\r\n\r\n    isAlignActionEnabled(graph: Graph): boolean {\r\n        return this.isUnlocked(graph) && this.isVertexSelected(graph) && graph.getSelectionCount() > 1;\r\n    }\r\n\r\n    isUnlocked(graph: Graph): boolean {\r\n        let unlocked = graph.isEnabled() && !graph.isCellLocked(graph.getDefaultParent());\r\n        return unlocked;\r\n    }\r\n\r\n    isVertexSelected(graph: Graph): boolean {\r\n        let vertexSelected = false;\r\n\r\n        let cells = graph.getSelectionCells();\r\n\r\n        if (cells != null) {\r\n            for (let i = 0; i < cells.length; i++) {\r\n                let cell = cells[i];\r\n\r\n                if (graph.getModel().isVertex(cell)) {\r\n                    vertexSelected = true;\r\n                }\r\n\r\n                if (vertexSelected) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return vertexSelected;\r\n    }\r\n}"]}