"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Actions = void 0;
var AboutAction_1 = require("./impl/AboutAction");
var AlignBottomAction_1 = require("./impl/AlignBottomAction");
var AlignCenterAction_1 = require("./impl/AlignCenterAction");
var AlignLeftAction_1 = require("./impl/AlignLeftAction");
var AlignMiddleAction_1 = require("./impl/AlignMiddleAction");
var AlignRightAction_1 = require("./impl/AlignRightAction");
var AlignTopAction_1 = require("./impl/AlignTopAction");
var AutosizeAction_1 = require("./impl/AutosizeAction");
var ClearWaypointsAction_1 = require("./impl/ClearWaypointsAction");
var CopyAction_1 = require("./impl/CopyAction");
var CutAction_1 = require("./impl/CutAction");
var DeleteAction_1 = require("./impl/DeleteAction");
var DistributeHorizontalAction_1 = require("./impl/DistributeHorizontalAction");
var DistributeVerticalAction_1 = require("./impl/DistributeVerticalAction");
var DuplicateAction_1 = require("./impl/DuplicateAction");
var FitWindowAction_1 = require("./impl/FitWindowAction");
var FormatPanelAction_1 = require("./impl/FormatPanelAction");
var HelpAction_1 = require("./impl/HelpAction");
var LockUnlockAction_1 = require("./impl/LockUnlockAction");
var OutlineAction_1 = require("./impl/OutlineAction");
var PasteAction_1 = require("./impl/PasteAction");
var RedoAction_1 = require("./impl/RedoAction");
var ResetViewAction_1 = require("./impl/ResetViewAction");
var SelectAllAction_1 = require("./impl/SelectAllAction");
var SelectEdgesAction_1 = require("./impl/SelectEdgesAction");
var SelectNoneAction_1 = require("./impl/SelectNoneAction");
var SelectVerticesAction_1 = require("./impl/SelectVerticesAction");
var ToBackAction_1 = require("./impl/ToBackAction");
var ToFrontAction_1 = require("./impl/ToFrontAction");
var UndoAction_1 = require("./impl/UndoAction");
var ViewGridAction_1 = require("./impl/ViewGridAction");
var View_100_Action_1 = require("./impl/View_100_Action");
var View_125_Action_1 = require("./impl/View_125_Action");
var View_150_Action_1 = require("./impl/View_150_Action");
var View_200_Action_1 = require("./impl/View_200_Action");
var View_25_Action_1 = require("./impl/View_25_Action");
var View_300_Action_1 = require("./impl/View_300_Action");
var View_400_Action_1 = require("./impl/View_400_Action");
var View_50_Action_1 = require("./impl/View_50_Action");
var View_75_Action_1 = require("./impl/View_75_Action");
var ZoomInAction_1 = require("./impl/ZoomInAction");
var ZoomOutAction_1 = require("./impl/ZoomOutAction");
/**
 * 动作列表类
 */
var Actions = /** @class */ (function () {
    function Actions(editorUi) {
        this.editorUi = editorUi;
        this.actionDic = {};
        this.init();
    }
    /**
     * 添加动作
     * @param action
     */
    Actions.prototype.addAction = function (action) {
        this.actionDic[action.key] = action;
        if (action.shortcutKeyCode != null) {
            this.addShortcut(action.key, action.shortcutKeyCode, action.shortcutControlKey, action.shortcutShiftKey, action.shortcutAltKey);
        }
    };
    /**
     * 添加动作
     */
    Actions.prototype.addActions = function () {
        var _this = this;
        var actions = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            actions[_i] = arguments[_i];
        }
        actions && actions.forEach(function (action) {
            _this.addAction(action);
        });
    };
    /**
     * 根据key查找动作
     * @param key
     * @returns
     */
    Actions.prototype.getAction = function (key) {
        return this.actionDic[key];
    };
    /**
     * 删除动作
     * @param key
     * @returns
     */
    Actions.prototype.removeAction = function (key) {
        var action = this.getAction(key);
        if (action) {
            delete this.actionDic[key];
        }
        return action;
    };
    /**
     * 添加快捷键
     * @param actionKey
     * @param keyCode
     * @param control
     * @param shift
     * @param alt
     * @returns
     */
    Actions.prototype.addShortcut = function (actionKey, keyCode, control, shift, alt) {
        var action = this.getAction(actionKey);
        if (action == null) {
            return;
        }
        var funct = function (evt) {
            if (action.isEnabled()) {
                action.execute(evt);
            }
        };
        this.editorUi.keyHandler && this.editorUi.keyHandler.bindAction(funct, keyCode, control, shift, alt);
    };
    /**
     * 初始化
     */
    Actions.prototype.init = function () {
        //Edit
        this.addActions(new UndoAction_1.UndoAction(this.editorUi), new RedoAction_1.RedoAction(this.editorUi), new CutAction_1.CutAction(this.editorUi), new CopyAction_1.CopyAction(this.editorUi), new PasteAction_1.PasteAction(this.editorUi), new DeleteAction_1.DeleteAction(this.editorUi), new DuplicateAction_1.DuplicateAction(this.editorUi), new SelectVerticesAction_1.SelectVerticesAction(this.editorUi), new SelectEdgesAction_1.SelectEdgesAction(this.editorUi), new SelectAllAction_1.SelectAllAction(this.editorUi), new SelectNoneAction_1.SelectNoneAction(this.editorUi), new LockUnlockAction_1.LockUnlockAction(this.editorUi));
        //View
        this.addActions(new FormatPanelAction_1.FormatPanelAction(this.editorUi), new OutlineAction_1.OutlineAction(this.editorUi), new ZoomInAction_1.ZoomInAction(this.editorUi), new ZoomOutAction_1.ZoomOutAction(this.editorUi), new ResetViewAction_1.ResetViewAction(this.editorUi), new View_25_Action_1.View_25_Action(this.editorUi), new View_50_Action_1.View_50_Action(this.editorUi), new View_75_Action_1.View_75_Action(this.editorUi), new View_100_Action_1.View_100_Action(this.editorUi), new View_125_Action_1.View_125_Action(this.editorUi), new View_150_Action_1.View_150_Action(this.editorUi), new View_200_Action_1.View_200_Action(this.editorUi), new View_300_Action_1.View_300_Action(this.editorUi), new View_400_Action_1.View_400_Action(this.editorUi), new FitWindowAction_1.FitWindowAction(this.editorUi), new ViewGridAction_1.ViewGridAction(this.editorUi));
        //Arrange
        this.addActions(new ToFrontAction_1.ToFrontAction(this.editorUi), new ToBackAction_1.ToBackAction(this.editorUi), new AlignLeftAction_1.AlignLeftAction(this.editorUi), new AlignCenterAction_1.AlignCenterAction(this.editorUi), new AlignRightAction_1.AlignRightAction(this.editorUi), new AlignTopAction_1.AlignTopAction(this.editorUi), new AlignMiddleAction_1.AlignMiddleAction(this.editorUi), new AlignBottomAction_1.AlignBottomAction(this.editorUi), new DistributeHorizontalAction_1.DistributeHorizontalAction(this.editorUi), new DistributeVerticalAction_1.DistributeVerticalAction(this.editorUi), new ClearWaypointsAction_1.ClearWaypointsAction(this.editorUi), new AutosizeAction_1.AutosizeAction(this.editorUi));
        //Help
        this.addActions(new HelpAction_1.HelpAction(this.editorUi), new AboutAction_1.AboutAction(this.editorUi));
    };
    Actions.prototype.isUnlocked = function (graph) {
        var unlocked = graph.isEnabled() && !graph.isCellLocked(graph.getDefaultParent());
        return unlocked;
    };
    Actions.prototype.isVertexSelected = function (graph) {
        var vertexSelected = false;
        var cells = graph.getSelectionCells();
        if (cells != null) {
            for (var i = 0; i < cells.length; i++) {
                var cell = cells[i];
                if (graph.getModel().isVertex(cell)) {
                    vertexSelected = true;
                }
                if (vertexSelected) {
                    break;
                }
            }
        }
        return vertexSelected;
    };
    Actions.prototype.isEdgeSelected = function (graph) {
        var edgeSelected = false;
        var cells = graph.getSelectionCells();
        if (cells != null) {
            for (var i = 0; i < cells.length; i++) {
                var cell = cells[i];
                if (graph.getModel().isEdge(cell)) {
                    edgeSelected = true;
                }
                if (edgeSelected) {
                    break;
                }
            }
        }
        return edgeSelected;
    };
    Actions.prototype.isAlignActionEnabled = function (graph) {
        return this.isUnlocked(graph) && this.isVertexSelected(graph) && graph.getSelectionCount() > 1;
    };
    return Actions;
}());
exports.Actions = Actions;
//# sourceMappingURL=Actions.js.map