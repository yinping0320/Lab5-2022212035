{"version":3,"file":"DuplicateAction.js","sourceRoot":"","sources":["../../../../../src/lib/action/impl/DuplicateAction.ts"],"names":[],"mappings":";;;;AAEA,gDAA+C;AAC/C,kDAAiD;AACjD,oCAAmC;AACnC,4CAA2C;AAE3C;IAAqC,2CAAM;IACvC,yBAAY,QAAmB;QAA/B,YACI,kBAAM,uBAAU,CAAC,aAAa,EAAE,QAAQ,EAAE,KAAK,CAAC,SAUnD;QARG,KAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAC/B,KAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAC9B,KAAI,CAAC,eAAe,GAAG,mBAAQ,CAAC,CAAC,CAAC;QAElC,KAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,qBAAS,CAAC,qBAAqB,EAAE;YACvD,IAAI,QAAQ,GAAG,CAAC,KAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,gBAAgB,EAAE,CAAC;YACvD,KAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;;IACP,CAAC;IAED,iCAAO,GAAP,UAAQ,GAAkC;QACtC,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;QAEhC,IAAI,KAAK,GAAuB,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAC1D,IAAI,MAAM,GAAG,IAAI,CAAC;QAElB,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QAE3C,IAAI,KAAK,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;QAC7B,IAAI,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC;QACvB,IAAI,MAAM,GAAuB,EAAE,CAAC;QAEpC,KAAK,CAAC,WAAW,EAAE,CAAC;QACpB,IAAI;YACA,IAAI,MAAM,GAAuB,KAAK,CAAC,UAAU,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAEhE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACnC,IAAI,QAAM,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBACvC,IAAI,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,QAAM,CAAC,CAAC,CAAC,CAAC,CAAC;gBACjE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAEnB,IAAI,MAAM,EAAE;oBACR,KAAK,CAAC,GAAG,CAAC,QAAM,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;iBAChC;qBACI;oBACD,4DAA4D;oBAC5D,IAAI,KAAK,GAAG,QAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;oBACtC,KAAK,CAAC,GAAG,CAAC,QAAM,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;iBAC3C;aACJ;SACJ;gBACO;YACJ,KAAK,CAAC,SAAS,EAAE,CAAC;SACrB;QAED,KAAK,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;IACL,sBAAC;AAAD,CAAC,AAnDD,CAAqC,eAAM,GAmD1C;AAnDY,0CAAe","sourcesContent":["import { MxGraphNS } from \"@edp-pmf/mxgraph-ts\";\r\nimport { IEditorUi } from \"../../ui/IEditorUi\";\r\nimport { KeyCodes } from \"../../util/KeyCodes\";\r\nimport { PmfEvents } from \"../../util/PmfEvents\";\r\nimport { Action } from \"../Action\";\r\nimport { ActionKeys } from \"../ActionKeys\";\r\n\r\nexport class DuplicateAction extends Action {\r\n    constructor(editorUi: IEditorUi) {\r\n        super(ActionKeys.pmf_duplicate, editorUi, false);\r\n\r\n        this.shortcutControlKey = true;\r\n        this.shortcutShiftKey = false;\r\n        this.shortcutKeyCode = KeyCodes.D;\r\n\r\n        this.editorUi.addListener(PmfEvents.SelectionModelChanged, () => {\r\n            let selected = !this.editorUi.graph.isSelectionEmpty();\r\n            this.setEnabled(selected);\r\n        });\r\n    }\r\n\r\n    execute(evt?: PointerEvent | KeyboardEvent): void {\r\n        let graph = this.editorUi.graph;\r\n\r\n        let cells: MxGraphNS.mxCell[] = graph.getSelectionCells();\r\n        let append = true;\r\n\r\n        cells = graph.model.getTopmostCells(cells);\r\n\r\n        let model = graph.getModel();\r\n        let s = graph.gridSize;\r\n        let select: MxGraphNS.mxCell[] = [];\r\n\r\n        model.beginUpdate();\r\n        try {\r\n            let clones: MxGraphNS.mxCell[] = graph.cloneCells(cells, false);\r\n\r\n            for (let i = 0; i < cells.length; i++) {\r\n                let parent = model.getParent(cells[i]);\r\n                let child = graph.moveCells([clones[i]], s, s, false, parent)[0];\r\n                select.push(child);\r\n\r\n                if (append) {\r\n                    model.add(parent, clones[i]);\r\n                }\r\n                else {\r\n                    // Maintains child index by inserting after cloned in parent\r\n                    let index = parent.getIndex(cells[i]);\r\n                    model.add(parent, clones[i], index + 1);\r\n                }\r\n            }\r\n        }\r\n        finally {\r\n            model.endUpdate();\r\n        }\r\n\r\n        graph.setSelectionCells(select);\r\n    }\r\n}"]}