{"version":3,"file":"AutosizeAction.js","sourceRoot":"","sources":["../../../../../src/lib/action/impl/AutosizeAction.ts"],"names":[],"mappings":"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","sourcesContent":["import { IEditorUi } from \"../../ui/IEditorUi\";\r\nimport { Graph } from \"../../ui/Graph\";\r\nimport { KeyCodes } from \"../../util/KeyCodes\";\r\nimport { PmfEvents } from \"../../util/PmfEvents\";\r\nimport { Action } from \"../Action\";\r\nimport { ActionKeys } from \"../ActionKeys\";\r\n\r\nexport class AutosizeAction extends Action {\r\n    constructor(editorUi: IEditorUi) {\r\n        super(ActionKeys.pmf_autosize, editorUi, false);\r\n\r\n        this.shortcutControlKey = true;\r\n        this.shortcutShiftKey = true;\r\n        this.shortcutKeyCode = KeyCodes.Y;\r\n\r\n        this.editorUi.addListener(PmfEvents.SelectionModelChanged, () => {\r\n            this.setEnabled(this.isVertexSelected(this.editorUi.graph));\r\n        });\r\n    }\r\n\r\n    execute(evt?: PointerEvent | KeyboardEvent): void {\r\n        let graph = this.editorUi.graph;\r\n        let cells = graph.getSelectionCells();\r\n\r\n        if (cells != null) {\r\n            graph.getModel().beginUpdate();\r\n            try {\r\n                for (let i = 0; i < cells.length; i++) {\r\n                    let cell = cells[i];\r\n\r\n                    if (graph.getModel().getChildCount(cell)) {\r\n                        graph.updateGroupBounds([cell], 20);\r\n                    }\r\n                    else {\r\n                        let state = graph.view.getState(cell);\r\n                        let geo = graph.getCellGeometry(cell);\r\n\r\n                        if (graph.getModel().isVertex(cell) && state != null && state.text != null &&\r\n                            geo != null && graph.isWrapping(cell)) {\r\n                            geo = geo.clone();\r\n                            geo.height = state.text.boundingBox.height / graph.view.scale;\r\n                            graph.getModel().setGeometry(cell, geo);\r\n                        }\r\n                        else {\r\n                            graph.updateCellSize(cell);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            finally {\r\n                graph.getModel().endUpdate();\r\n            }\r\n        }\r\n    }\r\n\r\n    isVertexSelected(graph: Graph): boolean {\r\n        let vertexSelected = false;\r\n\r\n        let cells = graph.getSelectionCells();\r\n\r\n        if (cells != null) {\r\n            for (let i = 0; i < cells.length; i++) {\r\n                let cell = cells[i];\r\n\r\n                if (graph.getModel().isVertex(cell)) {\r\n                    vertexSelected = true;\r\n                }\r\n\r\n                if (vertexSelected) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return vertexSelected;\r\n    }\r\n}"]}