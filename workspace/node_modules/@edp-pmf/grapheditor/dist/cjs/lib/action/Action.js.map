{"version":3,"file":"Action.js","sourceRoot":"","sources":["../../../../src/lib/action/Action.ts"],"names":[],"mappings":";;;;AAAA,kDAAwF;AAExF,+CAA8C;AAC9C,mDAAmD;AAEnD;;GAEG;AACH;IAA4B,kCAAa;IAmCrC,gBAAY,GAAW,EAAE,QAAmB,EAAE,OAAiB;QAA/D,YACI,iBAAO,SAKV;QA/BD;;WAEG;QACH,aAAO,GAAY,IAAI,CAAC;QACxB;;WAEG;QACH,kBAAY,GAAY,KAAK,CAAC;QAqB1B,KAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,KAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,KAAI,CAAC,OAAO,GAAG,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;;IACtD,CAAC;IAED;;OAEG;IACH,0BAAS,GAAT;QACI,OAAO,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;IAED;;OAEG;IACH,+BAAc,GAAd;QACI,OAAO,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;IAED;;OAEG;IACH,2BAAU,GAAV;QACI,OAAO,KAAK,CAAC;IACjB,CAAC;IAED;;OAEG;IACH,2BAAU,GAAV,UAAW,KAAc;QACrB,IAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC;QAC5B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,MAAM,IAAI,KAAK,EAAE;YACjB,IAAI,CAAC,SAAS,CAAC,IAAI,0BAAa,CAAC,qBAAS,CAAC,YAAY,CAAC,CAAC,CAAC;SAC7D;IACL,CAAC;IAED;;OAEG;IACH,4BAAW,GAAX;QACI,IAAI,IAAI,CAAC,eAAe,IAAI,IAAI;YAC5B,OAAO,IAAI,CAAC;QAEhB,IAAI,QAAQ,GAAG,0BAAY,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAElD,IAAI,IAAI,CAAC,cAAc,EAAE;YACrB,QAAQ,GAAG,MAAM,GAAG,QAAQ,CAAC;SAChC;QAED,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACvB,QAAQ,GAAG,QAAQ,GAAG,QAAQ,CAAC;SAClC;QAED,IAAI,IAAI,CAAC,kBAAkB,EAAE;YACzB,QAAQ,GAAG,MAAM,CAAC,OAAO,GAAG,GAAG,GAAG,QAAQ,CAAC;SAC9C;QAED,OAAO,QAAQ,CAAC;IACpB,CAAC;IAED;;OAEG;IACH,gCAAe,GAAf,UAAgB,KAAc;QAC1B,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;IAC9B,CAAC;IAED;;OAEG;IACH,wBAAO,GAAP,UAAQ,GAAkC;IAE1C,CAAC;IA9GM,cAAO,GAAW,CAAC,qBAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC;IA+GhE,aAAC;CAAA,AAhHD,CAA4B,0BAAa,GAgHxC;AAhHY,wBAAM","sourcesContent":["import { mxClient, mxEventObject, mxEventSource, MxGraphNS } from \"@edp-pmf/mxgraph-ts\";\r\nimport { IEditorUi } from \"../ui/IEditorUi\";\r\nimport { PmfEvents } from \"../util/PmfEvents\";\r\nimport { KEYBOARD_MAP } from \"../util/KeyboardMap\";\r\n\r\n/**\r\n * 动作类\r\n */\r\nexport class Action extends mxEventSource {\r\n    static ctrlKey: string = (mxClient.IS_MAC) ? 'Cmd' : 'Ctrl';\r\n    /**\r\n     * 动作标识\r\n     */\r\n    key: string;\r\n    /**\r\n     * \r\n     */\r\n    editorUi: IEditorUi;\r\n    /**\r\n     * 是否启用\r\n     */\r\n    enabled: boolean = true;\r\n    /**\r\n     * 是否是切换动作\r\n     */\r\n    toggleAction: boolean = false;\r\n    /**\r\n     * 按键码\r\n     */\r\n    shortcutKeyCode: number;\r\n    /**\r\n     * 是否按下Control或Cmd\r\n     */\r\n    shortcutControlKey: boolean;\r\n    /**\r\n     * 是否按下Shift\r\n     */\r\n    shortcutShiftKey: boolean;\r\n    /**\r\n     * 是否按下Alt\r\n     */\r\n    shortcutAltKey: boolean;\r\n\r\n    constructor(key: string, editorUi: IEditorUi, enabled?: boolean) {\r\n        super();\r\n\r\n        this.key = key;\r\n        this.editorUi = editorUi;\r\n        this.enabled = (enabled != null) ? enabled : true;\r\n    }\r\n\r\n    /**\r\n     * 获取启用状态\r\n     */\r\n    isEnabled(): boolean {\r\n        return this.enabled;\r\n    }\r\n\r\n    /**\r\n     * 获取是否为切换动作\r\n     */\r\n    isToggleAction(): boolean {\r\n        return this.toggleAction;\r\n    }\r\n\r\n    /**\r\n     * 是否被选中\r\n     */\r\n    isSelected(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 设置启用状态，状态修改时发射状态变更事件\r\n     */\r\n    setEnabled(value: boolean) {\r\n        const origin = this.enabled;\r\n        this.enabled = value;\r\n        if (origin != value) {\r\n            this.fireEvent(new mxEventObject(PmfEvents.StateChanged));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取快捷键文本\r\n     */\r\n    getShortcut(): string {\r\n        if (this.shortcutKeyCode == null)\r\n            return null;\r\n\r\n        let shortcut = KEYBOARD_MAP[this.shortcutKeyCode];\r\n\r\n        if (this.shortcutAltKey) {\r\n            shortcut = \"Alt+\" + shortcut;\r\n        }\r\n\r\n        if (this.shortcutShiftKey) {\r\n            shortcut = \"Shift+\" + shortcut;\r\n        }\r\n\r\n        if (this.shortcutControlKey) {\r\n            shortcut = Action.ctrlKey + \"+\" + shortcut;\r\n        }\r\n\r\n        return shortcut;\r\n    }\r\n\r\n    /**\r\n     * 设置是否为切换动作\r\n     */\r\n    setToggleAction(value: boolean): void {\r\n        this.toggleAction = value;\r\n    }\r\n\r\n    /**\r\n     * 执行动作 \r\n     */\r\n    execute(evt?: PointerEvent | KeyboardEvent): void {\r\n\r\n    }\r\n}"]}