{"version":3,"file":"ClearWaypointsAction.js","sourceRoot":"","sources":["../../../../../src/lib/action/impl/ClearWaypointsAction.ts"],"names":[],"mappings":";;;;AACA,gDAA+C;AAC/C,kDAAiD;AACjD,oCAAmC;AACnC,4CAA2C;AAE3C;IAA0C,gDAAM;IAC5C,8BAAY,QAAmB;QAA/B,YACI,kBAAM,uBAAU,CAAC,kBAAkB,EAAE,QAAQ,EAAE,KAAK,CAAC,SAWxD;QATG,KAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;QAChC,KAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAC7B,KAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC3B,KAAI,CAAC,eAAe,GAAG,mBAAQ,CAAC,CAAC,CAAC;QAElC,KAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,qBAAS,CAAC,qBAAqB,EAAE;YACvD,IAAI,QAAQ,GAAG,CAAC,KAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,gBAAgB,EAAE,CAAC;YACvD,KAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;;IACP,CAAC;IAED,sCAAO,GAAP,UAAQ,GAAkC;QACtC,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;QAChC,IAAI,KAAK,GAAG,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAEtC,IAAI,KAAK,IAAI,IAAI,EAAE;YACf,KAAK,GAAG,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YAEjC,KAAK,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC;YAC/B,IAAI;gBACA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACnC,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBAEpB,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;wBAC/B,IAAI,GAAG,GAAG,KAAK,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;wBAEtC,IAAI,GAAG,IAAI,IAAI,EAAE;4BACb,GAAG,GAAG,GAAG,CAAC,KAAK,EAAE,CAAC;4BAClB,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC;4BAClB,KAAK,CAAC,QAAQ,EAAE,CAAC,WAAW,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;yBAC3C;qBACJ;iBACJ;aACJ;oBACO;gBACJ,KAAK,CAAC,QAAQ,EAAE,CAAC,SAAS,EAAE,CAAC;aAChC;SACJ;IACL,CAAC;IACL,2BAAC;AAAD,CAAC,AA3CD,CAA0C,eAAM,GA2C/C;AA3CY,oDAAoB","sourcesContent":["import { IEditorUi } from \"../../ui/IEditorUi\";\r\nimport { KeyCodes } from \"../../util/KeyCodes\";\r\nimport { PmfEvents } from \"../../util/PmfEvents\";\r\nimport { Action } from \"../Action\";\r\nimport { ActionKeys } from \"../ActionKeys\";\r\n\r\nexport class ClearWaypointsAction extends Action {\r\n    constructor(editorUi: IEditorUi) {\r\n        super(ActionKeys.pmf_clearWaypoints, editorUi, false);\r\n\r\n        this.shortcutControlKey = false;\r\n        this.shortcutShiftKey = true;\r\n        this.shortcutAltKey = true;\r\n        this.shortcutKeyCode = KeyCodes.C;\r\n\r\n        this.editorUi.addListener(PmfEvents.SelectionModelChanged, () => {\r\n            let selected = !this.editorUi.graph.isSelectionEmpty();\r\n            this.setEnabled(selected);\r\n        });\r\n    }\r\n\r\n    execute(evt?: PointerEvent | KeyboardEvent): void {\r\n        let graph = this.editorUi.graph;\r\n        let cells = graph.getSelectionCells();\r\n\r\n        if (cells != null) {\r\n            cells = graph.addAllEdges(cells);\r\n\r\n            graph.getModel().beginUpdate();\r\n            try {\r\n                for (let i = 0; i < cells.length; i++) {\r\n                    let cell = cells[i];\r\n\r\n                    if (graph.getModel().isEdge(cell)) {\r\n                        let geo = graph.getCellGeometry(cell);\r\n\r\n                        if (geo != null) {\r\n                            geo = geo.clone();\r\n                            geo.points = null;\r\n                            graph.getModel().setGeometry(cell, geo);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            finally {\r\n                graph.getModel().endUpdate();\r\n            }\r\n        }\r\n    }\r\n}"]}