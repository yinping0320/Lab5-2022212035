"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SequenceFlowEdge = void 0;
var tslib_1 = require("tslib");
var bpmn_model_1 = require("@edp-pmf/bpmn-model");
var mxgraph_ts_1 = require("@edp-pmf/mxgraph-ts");
var EdgeCell_1 = require("../EdgeCell");
var farris_property_config_1 = require("../farris-property-config");
/**
 * 事件流连线
 */
var SequenceFlowEdge = /** @class */ (function (_super) {
    tslib_1.__extends(SequenceFlowEdge, _super);
    function SequenceFlowEdge(value, geometry, style) {
        var _a;
        var _this = _super.call(this, value, geometry, style) || this;
        _this.clrTypeId = SequenceFlowEdge.CLR_TYPE_ID;
        _this.name = "事件流";
        _this.nameLanguage = {
            "zh-CHS": "事件流",
            "zh-CHT": "事件流",
            "en": "SequenceFlow",
        };
        _this.strokeColors = (_a = {},
            _a[bpmn_model_1.SequenceFlowState.Default] = "#6482b9",
            _a);
        return _this;
    }
    SequenceFlowEdge.prototype.getFarrisPropConfig = function () {
        var propWithData = _super.prototype.getFarrisPropConfig.call(this);
        var propertyData = propWithData.propertyData;
        var sourceNode = this.flowElement.Model.DefaultProcess.GetFlowElement(this.flowElement.SourceRef);
        var conditionConfig = new farris_property_config_1.ElementPropertyConfig();
        propWithData.propertyConfig.push(conditionConfig);
        conditionConfig.categoryId = 'condition';
        conditionConfig.categoryName = mxgraph_ts_1.mxResources.get('ConditionOption');
        conditionConfig.tabId = 'basic';
        conditionConfig.tabName = mxgraph_ts_1.mxResources.get('basic');
        conditionConfig.properties = [
        // { propertyID: "ConditionExpression", propertyName: mxResources.get('ConditionExpression'), propertyType: 'modal' }
        ];
        // 源节点为排他网关、包容网关和Activity时
        if (sourceNode instanceof bpmn_model_1.Activity || sourceNode instanceof bpmn_model_1.ExclusiveGateway || sourceNode instanceof bpmn_model_1.InclusiveGateway) {
            conditionConfig.properties.push({ propertyID: "Default", propertyName: mxgraph_ts_1.mxResources.get('Default Transform'), propertyType: 'select' });
            var act = sourceNode;
            if (act.Default === this.flowElement.Id) {
                propertyData.Default = true;
            }
            else {
                propertyData.Default = false;
            }
        }
        return propWithData;
    };
    SequenceFlowEdge.prototype.updateProps = function (obj) {
        var sequenceFlow = this.flowElement;
        var propertyId = obj.propertyID;
        switch (propertyId) {
            case "Default":
                this.modifyDefaultSequenceFlow(sequenceFlow, obj.propertyValue);
                break;
            default:
                _super.prototype.updateProps.call(this, obj);
                break;
        }
    };
    /**
     * 更新默认分支(当前适用：排他网关+活动节点)
     * @param seqFlow
     * @param val
     */
    SequenceFlowEdge.prototype.modifyDefaultSequenceFlow = function (seqFlow, val) {
        // 获取流转线源节点
        var sourceNode = seqFlow.Model.DefaultProcess.GetFlowElement(seqFlow.SourceRef);
        // 以下活动支持缺省转移线
        if (sourceNode instanceof bpmn_model_1.Activity || sourceNode instanceof bpmn_model_1.ExclusiveGateway || sourceNode instanceof bpmn_model_1.InclusiveGateway) {
            if (val === true) {
                sourceNode.Default = seqFlow.Id;
            }
            else if (val === false) {
                // 源节点的默认分支===流转分支ID
                if (sourceNode.Default === seqFlow.Id) {
                    sourceNode.Default = null;
                }
            }
        }
    };
    SequenceFlowEdge.CLR_TYPE_ID = "bpmn.SequenceFlow";
    return SequenceFlowEdge;
}(EdgeCell_1.EdgeCell));
exports.SequenceFlowEdge = SequenceFlowEdge;
//# sourceMappingURL=SequenceFlowEdge.js.map