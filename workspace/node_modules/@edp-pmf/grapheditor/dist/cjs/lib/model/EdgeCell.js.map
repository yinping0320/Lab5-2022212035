{"version":3,"file":"EdgeCell.js","sourceRoot":"","sources":["../../../../src/lib/model/EdgeCell.ts"],"names":[],"mappings":"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","sourcesContent":["import { Bounds, BPMNEdge, BPMNLabel, BpmnModel, BpmnModelHelper, SequenceFlowState, FlowNode, Point, RectangularLine, RectangularLineType, SequenceFlow, SequenceFlowLineType, ExclusiveGateway, Activity } from \"@edp-pmf/bpmn-model\";\r\nimport { MxGraphNS } from \"@edp-pmf/mxgraph-ts\";\r\nimport { Cell } from \"./Cell\";\r\nimport { NodeCell } from \"./NodeCell\";\r\n\r\n/**\r\n * 边元素\r\n */\r\nexport abstract class EdgeCell extends Cell {\r\n    edge: boolean = true;\r\n    vertex: boolean = false;\r\n\r\n    source: NodeCell;\r\n    target: NodeCell;\r\n\r\n    flowElement: SequenceFlow;\r\n    diagramElement: BPMNEdge;\r\n\r\n    /**\r\n     * 不同状态下的连线颜色\r\n     */\r\n    abstract strokeColors: {\r\n        /**\r\n         * 默认\r\n         */\r\n        [SequenceFlowState.Default]: string;\r\n        [state: string]: string;\r\n    };\r\n\r\n    /**\r\n     * 与BpmnModel脱钩，删除起点和终点元素的Outgoings Incomings，从Process和Diagram删除元素\r\n     * @returns \r\n     */\r\n    unbindBpmnModel() {\r\n        if (this.flowElement == null) {\r\n            return;\r\n        }\r\n        //删除Outgoings Incomings\r\n        const seqFlow = this.flowElement;\r\n        const srcFlowNode = this.source && this.source.flowElement;\r\n        const tarFlowNode = this.target && this.target.flowElement;\r\n\r\n        if (srcFlowNode != null) {\r\n            srcFlowNode.Outgoings = srcFlowNode.Outgoings ? srcFlowNode.Outgoings.filter(it => {\r\n                return it != seqFlow.Id;\r\n            }) : [];\r\n\r\n            // 如果删除的分支为默认分支，需清理源节点的default属性\r\n            if (srcFlowNode instanceof ExclusiveGateway && srcFlowNode.Default === seqFlow.Id) {\r\n                srcFlowNode.Default = null;\r\n            }\r\n            if (srcFlowNode instanceof Activity && srcFlowNode.Default === seqFlow.Id) {\r\n                srcFlowNode.Default = null;\r\n            }\r\n        }\r\n\r\n        if (tarFlowNode != null) {\r\n            tarFlowNode.Incomings = tarFlowNode.Incomings ? tarFlowNode.Incomings.filter(it => {\r\n                return it != seqFlow.Id;\r\n            }) : [];\r\n        }\r\n\r\n        return super.unbindBpmnModel();\r\n    }\r\n\r\n    createFlowElement(flowElt?: SequenceFlow): SequenceFlow {\r\n        const bpmnModel = this.editorUi.graph.bpmnModel;\r\n        let seqFlow: SequenceFlow = null;\r\n        if (flowElt) {\r\n            seqFlow = flowElt.clone() as SequenceFlow;\r\n        } else {\r\n            const tmpSeqFlow = BpmnModelHelper.GetElementType(this.clrTypeId) as SequenceFlow;\r\n            tmpSeqFlow.Model = bpmnModel;\r\n\r\n            seqFlow = tmpSeqFlow.NewInstance() as SequenceFlow;\r\n        }\r\n\r\n        const srcFlowNode = this.source && this.source.flowElement;\r\n        const tarFlowNode = this.target && this.target.flowElement;\r\n\r\n        seqFlow.SourceRef = srcFlowNode && srcFlowNode.Id;\r\n        seqFlow.TargetRef = tarFlowNode && tarFlowNode.Id;\r\n        seqFlow.Id = seqFlow.SourceRef + '_' + seqFlow.TargetRef;\r\n        seqFlow.Name = '';\r\n\r\n        if (srcFlowNode && !this.existOutging(bpmnModel, srcFlowNode, tarFlowNode)) {\r\n            srcFlowNode.Outgoings.push(seqFlow.Id);\r\n        }\r\n        if (tarFlowNode && !this.existIncoming(bpmnModel, tarFlowNode, srcFlowNode)) {\r\n            tarFlowNode.Incomings.push(seqFlow.Id);\r\n        }\r\n\r\n        return seqFlow;\r\n    }\r\n\r\n    createDiagramElement(diagElt?: BPMNEdge): BPMNEdge {\r\n        const bpmnModel = this.editorUi.graph.bpmnModel;\r\n        const srcDiagElt = this.source && this.source.diagramElement;\r\n        const tarDiagElt = this.target && this.target.diagramElement;\r\n\r\n        let edge = new BPMNEdge(bpmnModel);\r\n        edge.SourceShapeElementId = srcDiagElt && srcDiagElt.Id;\r\n        edge.TargetShapeElementId = tarDiagElt && tarDiagElt.Id;\r\n\r\n        edge.LineType = SequenceFlowLineType.RectangularLineType;\r\n        const rectangularLine = new RectangularLine(bpmnModel);\r\n        rectangularLine.LineType = RectangularLineType.H2V;\r\n        edge.RectangularLine = rectangularLine;\r\n\r\n        return edge;\r\n    }\r\n\r\n    /**\r\n     * flowNode1是否存在指向flowNode2的连线\r\n     */\r\n    existOutging(bpmnModel: BpmnModel, flowNode1: FlowNode, flowNode2: FlowNode): boolean {\r\n        let exist = false;\r\n        for (let seqFlowId of flowNode1.Outgoings) {\r\n            const seq = bpmnModel.DefaultProcess.GetFlowElement(seqFlowId) as SequenceFlow;\r\n            if (seq.TargetRef == flowNode2.Id) {\r\n                exist = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return exist;\r\n    }\r\n\r\n    /**\r\n     * flowNode1是否存在来自于flowNode2的连线\r\n     */\r\n    existIncoming(bpmnModel: BpmnModel, flowNode1: FlowNode, flowNode2: FlowNode): boolean {\r\n        let exist = false;\r\n        for (let seqFlowId of flowNode1.Incomings) {\r\n            const seq = bpmnModel.DefaultProcess.GetFlowElement(seqFlowId) as SequenceFlow;\r\n            if (seq.SourceRef == flowNode2.Id) {\r\n                exist = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return exist;\r\n    }\r\n\r\n    /**\r\n     * 设置路径点\r\n     * @param waypoints \r\n     */\r\n    setPoints(waypoints: MxGraphNS.mxPoint[]) {\r\n        const bpmnPts: Point[] = [];\r\n        waypoints && waypoints.forEach(mxPt => {\r\n            const bpmnPt = new Point(this.diagramElement.Model);\r\n            bpmnPt.X = mxPt.x;\r\n            bpmnPt.Y = mxPt.y;\r\n            bpmnPts.push(bpmnPt);\r\n        });\r\n        if (this.diagramElement) {\r\n            this.diagramElement.Points = bpmnPts;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置标签坐标\r\n     * @param mxRect \r\n     */\r\n    setBpmnLabel(mxRect: MxGraphNS.mxRectangle) {\r\n        if (this.diagramElement == null) {\r\n            return;\r\n        }\r\n        const edge = this.diagramElement;\r\n        const bpmnModel = this.diagramElement.Model;\r\n\r\n        if (mxRect == null) {\r\n            edge.BpmnLabel = null;\r\n            return;\r\n        }\r\n\r\n        const bpmnLabel = new BPMNLabel(bpmnModel);\r\n        const bounds = new Bounds(bpmnModel);\r\n        bounds.X = mxRect.x;\r\n        bounds.Y = mxRect.y;\r\n        bounds.Width = mxRect.width;\r\n        bounds.Height = mxRect.height;\r\n        bpmnLabel.Bounds = bounds;\r\n        bpmnLabel.LabelStyle = 'testLabelStyle';\r\n        edge.BpmnLabel = bpmnLabel;\r\n    }\r\n}"]}