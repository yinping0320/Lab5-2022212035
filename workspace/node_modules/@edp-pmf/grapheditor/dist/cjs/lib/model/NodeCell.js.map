{"version":3,"file":"NodeCell.js","sourceRoot":"","sources":["../../../../src/lib/model/NodeCell.ts"],"names":[],"mappings":";;;;AAAA,kDAAkG;AAClG,+BAA8B;AAG9B;;GAEG;AACH;IAAuC,oCAAI;IAA3C;QAAA,qEA4DC;QA3DG,UAAI,GAAY,KAAK,CAAC;QACtB,YAAM,GAAY,IAAI,CAAC;;IA0D3B,CAAC;IAxCG,kCAAe,GAAf;QACI,OAAO,iBAAM,eAAe,WAAE,CAAC;IACnC,CAAC;IAED,oCAAiB,GAAjB,UAAkB,OAAkB;QAChC,IAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC;QAChD,IAAI,QAAQ,GAAa,IAAI,CAAC;QAC9B,IAAI,OAAO,EAAE;YACT,QAAQ,GAAG,OAAO,CAAC,KAAK,EAAc,CAAC;YACvC,QAAQ,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;YAC7B,QAAQ,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,yBACrC,OAAO,CAAC,YAAY,CAC1B,CAAC;SACL;aAAM;YACH,IAAM,WAAW,GAAG,4BAAe,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,CAAa,CAAC;YAC/E,WAAW,CAAC,KAAK,GAAG,SAAS,CAAC;YAC9B,QAAQ,GAAG,WAAW,CAAC,WAAW,EAAc,CAAC;YACjD,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YAC1B,QAAQ,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,yBAClC,IAAI,CAAC,YAAY,CACvB,CAAC;SACL;QAED,OAAO,QAAQ,CAAC;IACpB,CAAC;IAED,uCAAoB,GAApB,UAAqB,OAAmB;QACpC,IAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC;QAChD,IAAM,KAAK,GAAG,IAAI,sBAAS,CAAC,SAAS,CAAC,CAAC;QAEvC,IAAM,MAAM,GAAG,IAAI,mBAAM,CAAC,SAAS,CAAC,CAAC;QACrC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC3B,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC3B,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;QACnC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;QAErC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;QAEtB,OAAO,KAAK,CAAC;IACjB,CAAC;IACL,eAAC;AAAD,CAAC,AA5DD,CAAuC,WAAI,GA4D1C;AA5DqB,4BAAQ","sourcesContent":["import { Bounds, BpmnModelHelper, BPMNShape, FlowNodeState, FlowNode } from \"@edp-pmf/bpmn-model\";\r\nimport { Cell } from \"./Cell\";\r\nimport { EdgeCell } from \"./EdgeCell\";\r\n\r\n/**\r\n * 节点元素\r\n */\r\nexport abstract class NodeCell extends Cell {\r\n    edge: boolean = false;\r\n    vertex: boolean = true;\r\n\r\n    flowElement: FlowNode;\r\n    diagramElement: BPMNShape;\r\n\r\n    edges: EdgeCell[];\r\n\r\n    /**\r\n     * 不同状态下的节点图片\r\n     */\r\n    abstract imgUrls: {\r\n        /**\r\n         * 默认\r\n         */\r\n        [FlowNodeState.Default]: string;\r\n        [state: string]: string;\r\n    };\r\n\r\n    unbindBpmnModel() {\r\n        return super.unbindBpmnModel();\r\n    }\r\n\r\n    createFlowElement(flowElt?: FlowNode): FlowNode {\r\n        const bpmnModel = this.editorUi.graph.bpmnModel;\r\n        let flowNode: FlowNode = null;\r\n        if (flowElt) {\r\n            flowNode = flowElt.clone() as FlowNode;\r\n            flowNode.Name = flowElt.Name;\r\n            flowNode.NameLanguage = flowElt.NameLanguage && {\r\n                ...flowElt.NameLanguage\r\n            };\r\n        } else {\r\n            const tmpFlowNode = BpmnModelHelper.GetElementType(this.clrTypeId) as FlowNode;\r\n            tmpFlowNode.Model = bpmnModel;\r\n            flowNode = tmpFlowNode.NewInstance() as FlowNode;\r\n            flowNode.Name = this.name;\r\n            flowNode.NameLanguage = this.nameLanguage && {\r\n                ...this.nameLanguage\r\n            };\r\n        }\r\n\r\n        return flowNode;\r\n    }\r\n\r\n    createDiagramElement(diagElt?: BPMNShape): BPMNShape {\r\n        const bpmnModel = this.editorUi.graph.bpmnModel;\r\n        const shape = new BPMNShape(bpmnModel);\r\n\r\n        const bounds = new Bounds(bpmnModel);\r\n        bounds.X = this.geometry.x;\r\n        bounds.Y = this.geometry.y;\r\n        bounds.Width = this.geometry.width;\r\n        bounds.Height = this.geometry.height;\r\n\r\n        shape.Bounds = bounds;\r\n\r\n        return shape;\r\n    }\r\n}"]}