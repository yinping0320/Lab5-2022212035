"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyHandler = void 0;
var tslib_1 = require("tslib");
var mxgraph_ts_1 = require("@edp-pmf/mxgraph-ts");
/**
 * 按键处理器
 */
var KeyHandler = /** @class */ (function (_super) {
    tslib_1.__extends(KeyHandler, _super);
    function KeyHandler(graph) {
        var _this = _super.call(this, graph) || this;
        _this.altKeys = {};
        _this.ctrlAltKeys = {};
        _this.shiftAltKeys = {};
        _this.ctrlShiftAltKeys = {};
        return _this;
    }
    /**
     * 判断Ctrl或Cmd是否按下
     * @param evt
     * @returns
     */
    KeyHandler.prototype.isControlDown = function (evt) {
        return mxgraph_ts_1.mxEvent.isControlDown(evt) || (mxgraph_ts_1.mxClient.IS_MAC && evt.metaKey);
    };
    /**
     * 获取事件处理器
     * @param evt
     * @returns
     */
    KeyHandler.prototype.getFunction = function (evt) {
        if (evt != null && mxgraph_ts_1.mxEvent.isAltDown(evt)) {
            if (this.isControlDown(evt)) {
                if (mxgraph_ts_1.mxEvent.isShiftDown(evt)) {
                    return this.ctrlShiftAltKeys[evt.keyCode];
                }
                else {
                    return this.ctrlAltKeys[evt.keyCode];
                }
            }
            else {
                if (mxgraph_ts_1.mxEvent.isShiftDown(evt)) {
                    return this.shiftAltKeys[evt.keyCode];
                }
                else {
                    return this.altKeys[evt.keyCode];
                }
            }
        }
        else {
            return _super.prototype.getFunction.call(this, evt);
        }
    };
    /**
     * 绑定动作
     * @param funct
     * @param keyCode
     * @param control
     * @param shift
     * @param alt
     */
    KeyHandler.prototype.bindAction = function (funct, keyCode, control, shift, alt) {
        if (control === void 0) { control = false; }
        if (shift === void 0) { shift = false; }
        if (alt === void 0) { alt = false; }
        if (control) {
            if (shift) {
                if (alt) {
                    this.bindCtrlShiftAltKey(keyCode, funct);
                }
                else {
                    this.bindControlShiftKey(keyCode, funct);
                }
            }
            else {
                if (alt) {
                    this.bindCtrlAltKey(keyCode, funct);
                }
                else {
                    this.bindControlKey(keyCode, funct);
                }
            }
        }
        else {
            if (shift) {
                if (alt) {
                    this.bindShiftAltKey(keyCode, funct);
                }
                else {
                    this.bindShiftKey(keyCode, funct);
                }
            }
            else {
                this.bindKey(keyCode, funct);
            }
        }
    };
    /**
     * 绑定Alt+按键
     * @param code
     * @param funct
     */
    KeyHandler.prototype.bindAltKey = function (code, funct) {
        this.altKeys[code] = funct;
    };
    /**
     * 绑定Ctrl+Alt+按键
     * @param code
     * @param funct
     */
    KeyHandler.prototype.bindCtrlAltKey = function (code, funct) {
        this.ctrlAltKeys[code] = funct;
    };
    /**
     * 绑定Shift+Alt+按键
     * @param code
     * @param funct
     */
    KeyHandler.prototype.bindShiftAltKey = function (code, funct) {
        this.shiftAltKeys[code] = funct;
    };
    /**
     * 绑定Ctrl+Shift+Alt按键+
     * @param code
     * @param funct
     */
    KeyHandler.prototype.bindCtrlShiftAltKey = function (code, funct) {
        this.ctrlShiftAltKeys[code] = funct;
    };
    return KeyHandler;
}(mxgraph_ts_1.mxKeyHandler));
exports.KeyHandler = KeyHandler;
//# sourceMappingURL=KeyHandler.js.map