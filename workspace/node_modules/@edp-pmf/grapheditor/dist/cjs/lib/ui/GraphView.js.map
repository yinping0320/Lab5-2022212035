{"version":3,"file":"GraphView.js","sourceRoot":"","sources":["../../../../src/lib/ui/GraphView.ts"],"names":[],"mappings":"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","sourcesContent":["import { mxClient, mxConstants, mxGraphView, mxRectangle, mxUtils } from \"@edp-pmf/mxgraph-ts\";\r\nimport { Base64 } from \"../util/Base64\";\r\nimport { Constant } from \"../util/Constant\";\r\nimport { Graph } from \"./Graph\";\r\n\r\n/**\r\n * 画布视图类，可通过mxCellState获取元素的绝对坐标等信息\r\n */\r\nexport class GraphView extends mxGraphView {\r\n    graph: Graph;\r\n    /**\r\n     * 中心点x坐标\r\n     */\r\n    x0: number;\r\n    /**\r\n     * 中心点y坐标\r\n     */\r\n    y0: number;\r\n\r\n    /**\r\n     * 网格图片\r\n     */\r\n    gridImage = Constant.IMAGE_PATH + '/grid.gif';\r\n    /**\r\n     * 网格颜色\r\n     */\r\n    gridColor = '#e0e0e0';\r\n    /**\r\n     * 网格间隔\r\n     */\r\n    gridSteps = 4;\r\n    /**\r\n     * 网格大小\r\n     */\r\n    minGridSize = 4;\r\n\r\n    constructor(graph: Graph) {\r\n        super(graph);\r\n    }\r\n\r\n    /**\r\n     * 画布网格背景\r\n     */\r\n    validateBackgroundPage() {\r\n        super.validateBackgroundPage();\r\n        const graph = this.graph;\r\n\r\n        if (graph.container != null) {\r\n            this.validateBackgroundStyles();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 画布网格背景\r\n     */\r\n    validateBackgroundStyles() {\r\n        // Updates the CSS of the background to draw the grid\r\n        const graph = this.graph;\r\n        const color = (graph.background == null || graph.background == mxConstants.NONE) ? Graph.defaultPageBackgroundColor : graph.background;\r\n        const gridColor = (color != null && this.gridColor != color.toLowerCase()) ? this.gridColor : '#ffffff';\r\n        let image = 'none';\r\n        let position = '';\r\n\r\n        if (graph.isGridEnabled()) {\r\n            let phase = 10;\r\n\r\n            if (mxClient.IS_SVG) {\r\n                // Generates the SVG required for drawing the dynamic grid\r\n                image = unescape(encodeURIComponent(this.createSvgGrid(gridColor)));\r\n                image = (window.btoa) ? btoa(image) : Base64.encode(image, true);\r\n                image = 'url(' + 'data:image/svg+xml;base64,' + image + ')'\r\n                phase = graph.gridSize * this.scale * this.gridSteps;\r\n            }\r\n            else {\r\n                // Fallback to grid wallpaper with fixed size\r\n                image = 'url(' + this.gridImage + ')';\r\n            }\r\n\r\n            let x0 = 0;\r\n            let y0 = 0;\r\n\r\n            if (graph.view.backgroundPageShape != null) {\r\n                const bds = this.getBackgroundPageBounds();\r\n\r\n                x0 = 1 + bds.x;\r\n                y0 = 1 + bds.y;\r\n            }\r\n\r\n            // Computes the offset to maintain origin for grid\r\n            position = -Math.round(phase - mxUtils.mod(this.translate.x * this.scale - x0, phase)) + 'px ' +\r\n                -Math.round(phase - mxUtils.mod(this.translate.y * this.scale - y0, phase)) + 'px';\r\n        }\r\n\r\n        let canvas = graph.view.canvas;\r\n\r\n        if (canvas.ownerSVGElement != null) {\r\n            canvas = canvas.ownerSVGElement;\r\n        }\r\n\r\n        if (graph.view.backgroundPageShape != null) {\r\n            graph.view.backgroundPageShape.node.style.backgroundPosition = position;\r\n            graph.view.backgroundPageShape.node.style.backgroundImage = image;\r\n            graph.view.backgroundPageShape.node.style.backgroundColor = color;\r\n            graph.container.className = 'geDiagramContainer geDiagramBackdrop';\r\n            canvas.style.backgroundImage = 'none';\r\n            canvas.style.backgroundColor = '';\r\n        }\r\n        else {\r\n            graph.container.className = 'geDiagramContainer';\r\n            canvas.style.backgroundPosition = position;\r\n            canvas.style.backgroundColor = color;\r\n            canvas.style.backgroundImage = image;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 画布网格背景\r\n     */\r\n    createSvgGrid(color: string) {\r\n        // Returns the SVG required for painting the background grid.\r\n        let tmp = this.graph.gridSize * this.scale;\r\n\r\n        while (tmp < this.minGridSize) {\r\n            tmp *= 2;\r\n        }\r\n\r\n        const tmp2 = this.gridSteps * tmp;\r\n\r\n        // Small grid lines\r\n        const d = [];\r\n\r\n        for (let i = 1; i < this.gridSteps; i++) {\r\n            const tmp3 = i * tmp;\r\n            d.push('M 0 ' + tmp3 + ' L ' + tmp2 + ' ' + tmp3 + ' M ' + tmp3 + ' 0 L ' + tmp3 + ' ' + tmp2);\r\n        }\r\n\r\n        // KNOWN: Rounding errors for certain scales (eg. 144%, 121% in Chrome, FF and Safari). Workaround\r\n        // in Chrome is to use 100% for the svg size, but this results in blurred grid for large diagrams.\r\n        const size = tmp2;\r\n        const svg = '<svg width=\"' + size + '\" height=\"' + size + '\" xmlns=\"' + mxConstants.NS_SVG + '\">' +\r\n            '<defs><pattern id=\"grid\" width=\"' + tmp2 + '\" height=\"' + tmp2 + '\" patternUnits=\"userSpaceOnUse\">' +\r\n            '<path d=\"' + d.join(' ') + '\" fill=\"none\" stroke=\"' + color + '\" opacity=\"0.2\" stroke-width=\"1\"/>' +\r\n            '<path d=\"M ' + tmp2 + ' 0 L 0 0 0 ' + tmp2 + '\" fill=\"none\" stroke=\"' + color + '\" stroke-width=\"1\"/>' +\r\n            '</pattern></defs><rect width=\"100%\" height=\"100%\" fill=\"url(#grid)\"/></svg>';\r\n\r\n        return svg;\r\n    }\r\n}"]}