import { BPMNEdge, BpmnModel, BPMNShape, DiagramElement, FlowElement, SequenceFlow, FlowNode } from "@edp-pmf/bpmn-model";
import { mxGraph, MxGraphNS } from "@edp-pmf/mxgraph-ts";
import { Cell } from "../model/Cell";
import { EdgeCell } from "../model/EdgeCell";
import { NodeCell } from "../model/NodeCell";
import { IEditorUi } from "./IEditorUi";
import { GraphView } from "./GraphView";
import { ProcessCell } from "../model/ProcessCell";
/**
 * 画布
 */
export declare class Graph extends mxGraph {
    /**
     * 默认页面背景色
     */
    static defaultPageBackgroundColor: string;
    /**
     * 默认页面边框色
     */
    static defaultPageBorderColor: string;
    editorUi: IEditorUi;
    /**
     * 主题
     */
    themes: Element;
    /**
     * 布局管理器
     */
    layoutManager: MxGraphNS.mxLayoutManager;
    view: GraphView;
    /**
     * 背景色
     */
    background: string;
    /**
     * Bpmn模型
     */
    bpmnModel: BpmnModel;
    /**
     * 流程元素实例
     */
    processCell: ProcessCell;
    /**
     * BPMN模型是否加载完成
     * todo：借用此属性来作为坐标修改事件是否真正触发的依据感觉仍然存在问题，待进一步优化
     */
    bpmnModelLoaded: boolean;
    /**
     * 自动平移
     */
    autoTranslate: boolean;
    /**
     * 可滚动区域大小
     */
    scrollTileSize: MxGraphNS.mxRectangle;
    /**
     * 获取页面边距
     */
    getPagePadding: () => MxGraphNS.mxPoint;
    /**
     * 获取可滚动区域大小
     */
    getScrollTileSize: () => MxGraphNS.mxRectangle;
    /**
     * 获取页面大小
     */
    getPageSize: () => MxGraphNS.mxRectangle;
    /**
     * 获取页面布局
     */
    getPageLayout: () => MxGraphNS.mxRectangle;
    constructor(editorUi: IEditorUi, container?: HTMLDivElement, model?: MxGraphNS.mxGraphModel, renderHint?: MxGraphNS.renderingHint, stylesheet?: MxGraphNS.mxStylesheet, themes?: Element);
    /**
     * 设置默认样式
     */
    setDefaultStyles(): void;
    /**
     * 加载样式
     */
    loadStylesheet(): void;
    /**
     * 选中cell变化后事件处理
     * @param cells
     */
    bpmnCellsSelectionChanged(cells: Cell[], sender: MxGraphNS.mxEventSource, eventObject: MxGraphNS.mxEventObject): void;
    /**
     * 删除cell后同时从bpmnmodel中删除
     * @param cells
     */
    bpmnCellsRemoved(cells: Cell[], sender: MxGraphNS.mxEventSource, eventObject: MxGraphNS.mxEventObject): void;
    /**
     * 连接两个节点后为edge绑定bpmn相关属性
     * @param edge
     */
    bpmnCellsConnected(edge: EdgeCell, sender: MxGraphNS.mxEventSource, eventObject: MxGraphNS.mxEventObject): void;
    /**
     * 连线端点改变后同步修改Bpmn相关属性
     * @param source true表示来源端点改变，false表示目标端点改变
     */
    bpmnEdgeTerminalChanged(edge: EdgeCell, terminal: NodeCell, source: boolean, previous: NodeCell, sender: MxGraphNS.mxEventSource, eventObject: MxGraphNS.mxEventObject, change: MxGraphNS.mxTerminalChange): void;
    /**
     * cell几何信息改变后同步修改Bpmn相关属性
     * @param cell
     */
    bpmnCellGeometryChanged(cell: Cell, sender: MxGraphNS.mxEventSource, eventObject: MxGraphNS.mxEventObject, change: MxGraphNS.mxGeometryChange): void;
    /**
     * cell名称修改后同步修改Bpmn相关属性
     * @param cell
     * @param sender
     * @param evt
     */
    bpmnCellNameChanged(cell: Cell, sender: MxGraphNS.mxEventSource, evt: MxGraphNS.mxEventObject): void;
    /**
     * 设置默认BPMN模型与流程元素实例
     */
    setDefaultBpmnModel(): void;
    /**
     * 创建BpmnModel
     */
    createBpmnModel(): BpmnModel;
    /**
     * 加载BpmnModel并画图
     */
    loadBpmnModel(json: string): void;
    /**
     * 创建流程元素实例
     * @param bpmnModel
     * @returns
     */
    createProcessCell(bpmnModel: BpmnModel): ProcessCell;
    /**
     * 根据BpmnModel画图
     */
    drawBpmnGraph(bpmnModel: BpmnModel): void;
    /**
     * 画节点
     */
    drawNodeCells(flowDict: {
        [key: string]: FlowElement;
    }, nodeDict: {
        [BpmnElementId: string]: DiagramElement;
    }): void;
    /**
     * 画单个节点
     */
    drawNodeCell(flowElt: FlowNode, diagElt: BPMNShape): void;
    /**
     * 画连线
     */
    drawEdgeCells(flowDict: {
        [key: string]: FlowElement;
    }, edgeDict: {
        [BpmnElementId: string]: DiagramElement;
    }): void;
    /**
     * 画单个连线
     */
    drawEdgeCell(flowElt: SequenceFlow, diagElt: BPMNEdge): void;
    /**
     * 构建FlowElement字典，{ [flowEltId: string]: FlowElement }
     */
    buildFlowDict(bpmnModel: BpmnModel): {
        [key: string]: FlowElement;
    };
    /**
     * 构建DiagramElement字典，{ [flowEltId: string]: DiagramElement }
     */
    buildFlowDiagDict(bpmnModel: BpmnModel): {
        nodeDict: {
            [BpmnElementId: string]: DiagramElement;
        };
        edgeDict: {
            [BpmnElementId: string]: DiagramElement;
        };
    };
    /**
     * cell绑定bpmn相关信息
     */
    bindBpmnElements(cells: MxGraphNS.mxCell[], formFormats?: any[]): void;
    /**
     * 根据flowElementId获取cell
     */
    getCellByFlowElementId(flowEltId: string, parent?: MxGraphNS.mxCell): Cell;
    /**
     * 更新连线状态
     * @param cell
     */
    updateEdgeState(cell: EdgeCell): void;
    /**
     * 更新路径点
     * @param cell
     */
    updateEdgeWaypoints(cell: EdgeCell): void;
    /**
     * 更新连线标签
     */
    updateEdgeLabel(cell: EdgeCell): void;
    /**
     * 创建无限大画布
     */
    createInfiniteCanvas(): void;
    /**
     * 创建多连接点，重写getAllConnectionConstraints方法
     */
    setMultiConstraints(): void;
    /**
     * 分布排列节点
     * @param horizontal true: 横向分布，false：纵向分布
     * @param cells
     * @returns
     */
    distributeCells(horizontal: boolean, cells?: MxGraphNS.mxCell[]): MxGraphNS.mxCell[];
    /**
     * 重写创建GraphView方法
     * @override
     */
    createGraphView(): GraphView;
    /**
     * 重写连线处理器创建方法，默认创建SequenceFlowEdge
     * @override
     */
    createConnectionHandler(): MxGraphNS.mxConnectionHandler;
    /**
     * 设置元素显示标签内容
     * @override
     */
    getLabel(cell: MxGraphNS.mxCell): string;
    /**
     * 设置网格状态
     * @override
     * @param value
     */
    setGridEnabled(value: boolean): void;
    /**
     * 判断是否是泳道
     * @override
     * @param cell
     * @returns
     */
    isSwimlane(cell: MxGraphNS.mxCell): boolean;
    /**
     * 判断是否为旧版本BPMNEdge
     *
     * 旧版本连线Points数组中[0]和[1]分别表示起点和终点，因取值错误，[0]和[1]坐标均为(0,0)，以此为依据判断是否为旧版本的连线
     * 新版本从起点到终点按顺序记录每一个点坐标
     * @param bpmnEdge
     * @returns
     */
    isOldBpmnEdge(bpmnEdge: BPMNEdge): boolean;
}
