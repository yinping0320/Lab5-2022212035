import { __extends } from "tslib";
import { Bounds, BPMNEdge, BPMNLabel, BpmnModelHelper, SequenceFlowState, Point, RectangularLine, RectangularLineType, SequenceFlowLineType, ExclusiveGateway, Activity } from "@edp-pmf/bpmn-model";
import { Cell } from "./Cell";
/**
 * 边元素
 */
var EdgeCell = /** @class */ (function (_super) {
    __extends(EdgeCell, _super);
    function EdgeCell() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.edge = true;
        _this.vertex = false;
        return _this;
    }
    /**
     * 与BpmnModel脱钩，删除起点和终点元素的Outgoings Incomings，从Process和Diagram删除元素
     * @returns
     */
    EdgeCell.prototype.unbindBpmnModel = function () {
        if (this.flowElement == null) {
            return;
        }
        //删除Outgoings Incomings
        var seqFlow = this.flowElement;
        var srcFlowNode = this.source && this.source.flowElement;
        var tarFlowNode = this.target && this.target.flowElement;
        if (srcFlowNode != null) {
            srcFlowNode.Outgoings = srcFlowNode.Outgoings ? srcFlowNode.Outgoings.filter(function (it) {
                return it != seqFlow.Id;
            }) : [];
            // 如果删除的分支为默认分支，需清理源节点的default属性
            if (srcFlowNode instanceof ExclusiveGateway && srcFlowNode.Default === seqFlow.Id) {
                srcFlowNode.Default = null;
            }
            if (srcFlowNode instanceof Activity && srcFlowNode.Default === seqFlow.Id) {
                srcFlowNode.Default = null;
            }
        }
        if (tarFlowNode != null) {
            tarFlowNode.Incomings = tarFlowNode.Incomings ? tarFlowNode.Incomings.filter(function (it) {
                return it != seqFlow.Id;
            }) : [];
        }
        return _super.prototype.unbindBpmnModel.call(this);
    };
    EdgeCell.prototype.createFlowElement = function (flowElt) {
        var bpmnModel = this.editorUi.graph.bpmnModel;
        var seqFlow = null;
        if (flowElt) {
            seqFlow = flowElt.clone();
        }
        else {
            var tmpSeqFlow = BpmnModelHelper.GetElementType(this.clrTypeId);
            tmpSeqFlow.Model = bpmnModel;
            seqFlow = tmpSeqFlow.NewInstance();
        }
        var srcFlowNode = this.source && this.source.flowElement;
        var tarFlowNode = this.target && this.target.flowElement;
        seqFlow.SourceRef = srcFlowNode && srcFlowNode.Id;
        seqFlow.TargetRef = tarFlowNode && tarFlowNode.Id;
        seqFlow.Id = seqFlow.SourceRef + '_' + seqFlow.TargetRef;
        seqFlow.Name = '';
        if (srcFlowNode && !this.existOutging(bpmnModel, srcFlowNode, tarFlowNode)) {
            srcFlowNode.Outgoings.push(seqFlow.Id);
        }
        if (tarFlowNode && !this.existIncoming(bpmnModel, tarFlowNode, srcFlowNode)) {
            tarFlowNode.Incomings.push(seqFlow.Id);
        }
        return seqFlow;
    };
    EdgeCell.prototype.createDiagramElement = function (diagElt) {
        var bpmnModel = this.editorUi.graph.bpmnModel;
        var srcDiagElt = this.source && this.source.diagramElement;
        var tarDiagElt = this.target && this.target.diagramElement;
        var edge = new BPMNEdge(bpmnModel);
        edge.SourceShapeElementId = srcDiagElt && srcDiagElt.Id;
        edge.TargetShapeElementId = tarDiagElt && tarDiagElt.Id;
        edge.LineType = SequenceFlowLineType.RectangularLineType;
        var rectangularLine = new RectangularLine(bpmnModel);
        rectangularLine.LineType = RectangularLineType.H2V;
        edge.RectangularLine = rectangularLine;
        return edge;
    };
    /**
     * flowNode1是否存在指向flowNode2的连线
     */
    EdgeCell.prototype.existOutging = function (bpmnModel, flowNode1, flowNode2) {
        var exist = false;
        for (var _i = 0, _a = flowNode1.Outgoings; _i < _a.length; _i++) {
            var seqFlowId = _a[_i];
            var seq = bpmnModel.DefaultProcess.GetFlowElement(seqFlowId);
            if (seq.TargetRef == flowNode2.Id) {
                exist = true;
                break;
            }
        }
        return exist;
    };
    /**
     * flowNode1是否存在来自于flowNode2的连线
     */
    EdgeCell.prototype.existIncoming = function (bpmnModel, flowNode1, flowNode2) {
        var exist = false;
        for (var _i = 0, _a = flowNode1.Incomings; _i < _a.length; _i++) {
            var seqFlowId = _a[_i];
            var seq = bpmnModel.DefaultProcess.GetFlowElement(seqFlowId);
            if (seq.SourceRef == flowNode2.Id) {
                exist = true;
                break;
            }
        }
        return exist;
    };
    /**
     * 设置路径点
     * @param waypoints
     */
    EdgeCell.prototype.setPoints = function (waypoints) {
        var _this = this;
        var bpmnPts = [];
        waypoints && waypoints.forEach(function (mxPt) {
            var bpmnPt = new Point(_this.diagramElement.Model);
            bpmnPt.X = mxPt.x;
            bpmnPt.Y = mxPt.y;
            bpmnPts.push(bpmnPt);
        });
        if (this.diagramElement) {
            this.diagramElement.Points = bpmnPts;
        }
    };
    /**
     * 设置标签坐标
     * @param mxRect
     */
    EdgeCell.prototype.setBpmnLabel = function (mxRect) {
        if (this.diagramElement == null) {
            return;
        }
        var edge = this.diagramElement;
        var bpmnModel = this.diagramElement.Model;
        if (mxRect == null) {
            edge.BpmnLabel = null;
            return;
        }
        var bpmnLabel = new BPMNLabel(bpmnModel);
        var bounds = new Bounds(bpmnModel);
        bounds.X = mxRect.x;
        bounds.Y = mxRect.y;
        bounds.Width = mxRect.width;
        bounds.Height = mxRect.height;
        bpmnLabel.Bounds = bounds;
        bpmnLabel.LabelStyle = 'testLabelStyle';
        edge.BpmnLabel = bpmnLabel;
    };
    return EdgeCell;
}(Cell));
export { EdgeCell };
//# sourceMappingURL=EdgeCell.js.map