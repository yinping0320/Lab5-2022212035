import { __extends } from "tslib";
import { BpmnModelHelper } from "@edp-pmf/bpmn-model";
import { mxCell, mxEventObject, mxResources } from "@edp-pmf/mxgraph-ts";
import { PmfEvents } from "../util/PmfEvents";
import { ElementPropertyConfig } from "./farris-property-config/ElementPropertyConfig";
import { FarrisPropConfigWithData } from "./farris-property-config/FarrisPropConfigWithData";
/**
 * 画布元素类，分为边和节点两种
 */
var Cell = /** @class */ (function (_super) {
    __extends(Cell, _super);
    function Cell(value, geometry, style) {
        return _super.call(this, value, geometry, style) || this;
    }
    /**
     * 实例化FlowElement与DiagramElement，并绑定至BpmnModel
     * @param bpmnModel
     */
    Cell.prototype.bindBpmnModel = function (flowElt, diagElt) {
        var bpmnModel = this.editorUi.graph.bpmnModel;
        this.flowElement = this.createFlowElement(flowElt);
        this.diagramElement = this.createDiagramElement(diagElt);
        // diagElt与flowElt绑定
        this.diagramElement.BpmnElementId = this.flowElement.Id;
        // 添加到BpmnModel
        bpmnModel.DefaultProcess.AddFlowElement(this.flowElement);
        bpmnModel.DefaultDiagram.BpmnPlane.AddDiagramElement(this.diagramElement);
    };
    /**
     * 与BpmnModel脱钩，从Process和Diagram删除元素
     * @param bpmnModel
     */
    Cell.prototype.unbindBpmnModel = function () {
        if (this.flowElement == null) {
            return;
        }
        this.flowElement.Model.DefaultProcess.RemoveFlowElement(this.flowElement.Id);
        this.flowElement.Model.DefaultDiagram.BpmnPlane.RemoveDiagramElement(this.diagramElement.Id);
    };
    Cell.prototype.clone = function () {
        // 为保证clone方法顺利执行，临时删除editorUi与bpmn属性
        var tmpFlowElt = this.flowElement;
        var tmpDiagElt = this.diagramElement;
        var tmpEditorUi = this.editorUi;
        delete this.flowElement;
        delete this.diagramElement;
        delete this.editorUi;
        var clone = _super.prototype.clone.call(this);
        // 恢复bpmn属性
        this.flowElement = tmpFlowElt;
        this.diagramElement = tmpDiagElt;
        this.editorUi = tmpEditorUi;
        // 克隆bpmn属性
        if (tmpFlowElt) {
            var b = this.cloneFlowElement(tmpFlowElt);
            clone.flowElement = b;
        }
        if (tmpDiagElt) {
            var d = this.cloneDiagramElement(tmpDiagElt);
            d.BpmnElementId = clone.flowElement.Id;
            clone.diagramElement = d;
        }
        if (tmpEditorUi) {
            clone.editorUi = tmpEditorUi;
        }
        return clone;
    };
    /**
     * 克隆FlowElement
     * @param flowElt
     * @returns
     */
    Cell.prototype.cloneFlowElement = function (flowElt) {
        var b = flowElt.clone();
        return b;
    };
    /**
     * 克隆DiagramElement
     * @param diagElt
     * @returns
     */
    Cell.prototype.cloneDiagramElement = function (diagElt) {
        var d = diagElt.NewInstance();
        d.LoadFromJsonObject(diagElt.ConvertToJsonObject());
        d.Id = BpmnModelHelper.GenerateElementId();
        return d;
    };
    /**
     * 获取属性配置
     */
    Cell.prototype.getPropConfig = function () {
        return {};
    };
    /**
     * 获取属性配置（Farris属性框专用）
     */
    Cell.prototype.getFarrisPropConfig = function () {
        var _a;
        var configWithData = new FarrisPropConfigWithData();
        var propertyConfig = new ElementPropertyConfig();
        configWithData.propertyConfig.push(propertyConfig);
        propertyConfig.categoryId = 'general';
        propertyConfig.categoryName = mxResources.get("Basic Info") || '基本信息';
        propertyConfig.tabId = 'basic';
        propertyConfig.tabName = mxResources.get("Basic Property") || '基础属性';
        propertyConfig.properties = [
            { propertyID: 'Name', propertyName: mxResources.get("Property Name") || '名称', propertyType: 'string', visible: !this.editorUi.multiLangEnabled },
            { propertyID: "NameLanguage", propertyName: mxResources.get("Property Name") || '名称', propertyType: 'multiLanguage', visible: this.editorUi.multiLangEnabled },
            { propertyID: 'Id', propertyName: mxResources.get("Property Id") || '标识', propertyType: 'string', readonly: true }
        ];
        configWithData.propertyData = {
            Id: this.flowElement.Id,
            Name: this.flowElement.Name,
            ClrTypeId: this.flowElement.ClrTypeID,
            ClrTypeID: this.flowElement.ClrTypeID,
            // 没有NameLanguage时把Name作为中文简体值
            NameLanguage: this.flowElement.NameLanguage || (_a = {},
                _a[this.editorUi.langCode || "zh-CHS"] = this.flowElement.Name,
                _a)
        };
        return configWithData;
    };
    /**
     * 更新属性
     */
    Cell.prototype.updateProps = function (obj) {
        this.flowElement[obj.propertyID] = obj.propertyValue;
        if (obj.propertyID == "NameLanguage") {
            this.flowElement.Name = this.flowElement.NameLanguage && this.flowElement.NameLanguage['zh-CHS'] || "";
        }
        if (obj.propertyID == "NameLanguage" || obj.propertyID == "Name") {
            this.editorUi.fireEvent(new mxEventObject(PmfEvents.NameChanged, "cell", this));
        }
    };
    return Cell;
}(mxCell));
export { Cell };
//# sourceMappingURL=Cell.js.map