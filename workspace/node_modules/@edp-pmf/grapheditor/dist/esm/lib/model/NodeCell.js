import { __assign, __extends } from "tslib";
import { Bounds, BpmnModelHelper, BPMNShape, FlowNodeState } from "@edp-pmf/bpmn-model";
import { Cell } from "./Cell";
/**
 * 节点元素
 */
var NodeCell = /** @class */ (function (_super) {
    __extends(NodeCell, _super);
    function NodeCell() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.edge = false;
        _this.vertex = true;
        return _this;
    }
    NodeCell.prototype.unbindBpmnModel = function () {
        return _super.prototype.unbindBpmnModel.call(this);
    };
    NodeCell.prototype.createFlowElement = function (flowElt) {
        var bpmnModel = this.editorUi.graph.bpmnModel;
        var flowNode = null;
        if (flowElt) {
            flowNode = flowElt.clone();
            flowNode.Name = flowElt.Name;
            flowNode.NameLanguage = flowElt.NameLanguage && __assign({}, flowElt.NameLanguage);
        }
        else {
            var tmpFlowNode = BpmnModelHelper.GetElementType(this.clrTypeId);
            tmpFlowNode.Model = bpmnModel;
            flowNode = tmpFlowNode.NewInstance();
            flowNode.Name = this.name;
            flowNode.NameLanguage = this.nameLanguage && __assign({}, this.nameLanguage);
        }
        return flowNode;
    };
    NodeCell.prototype.createDiagramElement = function (diagElt) {
        var bpmnModel = this.editorUi.graph.bpmnModel;
        var shape = new BPMNShape(bpmnModel);
        var bounds = new Bounds(bpmnModel);
        bounds.X = this.geometry.x;
        bounds.Y = this.geometry.y;
        bounds.Width = this.geometry.width;
        bounds.Height = this.geometry.height;
        shape.Bounds = bounds;
        return shape;
    };
    return NodeCell;
}(Cell));
export { NodeCell };
//# sourceMappingURL=NodeCell.js.map