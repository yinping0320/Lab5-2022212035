import { __extends } from "tslib";
import { Actions } from "../action/Actions";
import { mxEventSource, mxClient, mxPoint, mxPopupMenu, mxEvent, mxEventObject, mxResources, mxUtils, mxConstants, mxGuide, mxPolyline, mxRubberband, mxClipboard } from "@edp-pmf/mxgraph-ts";
import { DefaultToolbarItems } from "../toolbar/DefaultToolbarItems";
import { DefaultToolbox } from "../toolbox/DefaultToolBox";
import { PmfEvents } from "../util/PmfEvents";
import { Footer } from "./Footer";
import { Format } from "./Format";
import { Graph } from "./Graph";
import { KeyHandler } from "./KeyHandler";
import { Menubar } from "./Menubar";
import { Sidebar } from "./Sidebar";
import { Toolbar } from "./Toolbar";
import { MxGraphInnerClass } from "../util/MxGraphInnerClass";
/**
 * 设计器统一入口，持有各部分组件实例，可触发以及响应事件
 */
var EditorUi = /** @class */ (function (_super) {
    __extends(EditorUi, _super);
    /**
     * 构造方法
     * @param container 容器dom，没有则去body
     * @param eventSource 事件源
     * @param importLinks 是否引入内置样式文件，默认为true
     */
    function EditorUi(container, eventSource, importLinks) {
        if (importLinks === void 0) { importLinks = true; }
        var _this = _super.call(this, eventSource) || this;
        /**
         * 菜单栏高度
         */
        _this.menubarHeight = 30;
        /**
         * 工具栏高度
         */
        _this.toolbarHeight = 34;
        /**
         * 属性框宽度
         */
        _this.formatWidth = 240;
        /**
         * 底部栏高度
         */
        _this.footerHeight = 28;
        /**
         * 分割条位置
         */
        _this.sidebarSplitPosition = (screen.width <= 640) ? 118 : 243;
        /**
         * 分割条宽度
         */
        _this.sidebarSplitSize = (mxClient.IS_TOUCH || mxClient.IS_POINTER) ? 12 : 8;
        /**
         * 画布最小宽度
         */
        _this.diagramMinWidth = 50;
        /**
         * 侧边栏底部栏高度
         */
        _this.sidebarFooterHeight = 34;
        /**
         * 0偏移量
         */
        _this.zeroOffset = new mxPoint(0, 0);
        /**
         * 是否显示菜单栏
         */
        _this.showMenubar = false;
        /**
         * 是否显示工具栏
         */
        _this.showToolbar = false;
        /**
         * 是否显示侧边栏
         */
        _this.showSidebar = true;
        /**
         * 是否显示属性框
         */
        _this.showFormat = false;
        /**
         * 是否显示底部栏
         */
        _this.showFooter = false;
        /**
         * 组件销毁方法列表
         */
        _this.destroyFunctions = [];
        /**
         * 是否启用多语
         */
        _this.multiLangEnabled = false;
        /**
         * 当前语言，尝试从igix运行框架取当前语言，没有则取zh-CHS
         */
        _this.langCode = window.gspframeworkService && window.gspframeworkService.rtf && window.gspframeworkService.rtf.language && window.gspframeworkService.rtf.language.getLanguageCode && window.gspframeworkService.rtf.language.getLanguageCode() || localStorage.getItem('languageCode') || 'zh-CHS';
        _this.container = container || document.body;
        importLinks && _this.importStyles();
        return _this;
    }
    /**
     * 引入内置样式文件
     */
    EditorUi.prototype.importStyles = function () {
        var link1 = document.createElement("link");
        link1.rel = "stylesheet";
        link1.href = (window.mxiGIXBasePath ? window.mxiGIXBasePath : "") + "/platform/runtime/common/web/@edp-pmf/grapheditor/styles/grapheditor.css?v=" + new Date().getTime();
        document.head.appendChild(link1);
        var link2 = document.createElement("link");
        link2.rel = "stylesheet";
        link2.href = (window.mxiGIXBasePath ? window.mxiGIXBasePath : "") + "/platform/runtime/common/web/@edp-pmf/grapheditor/styles/pmf.css?v=" + new Date().getTime();
        document.head.appendChild(link2);
    };
    /**
     * 修改属性
     * @param obj 至少要包含属性标识propertyID，属性值propertyValue和元素标识Id三个属性，元素标识Id可以为空，为空表示修改的是流程属性
     */
    EditorUi.prototype.updateProperty = function (obj) {
        var cell = this.graph.getCellByFlowElementId(obj.Id);
        if (cell) {
            cell.updateProps(obj);
        }
        else {
            this.graph.processCell.updateProps(obj);
        }
    };
    /**
     * 获取属性配置
     * @param cells
     * @returns
     */
    EditorUi.prototype.getFarrisPropConfig = function (cells) {
        if (cells && cells.length > 0 && cells[0] != null) {
            var cell = cells[0];
            return this.getCellFarrisPropConfig(cell);
        }
        else {
            return this.getProcessFarrisPropConfig();
        }
    };
    /**
     * 获取流程属性配置
     */
    EditorUi.prototype.getProcessFarrisPropConfig = function () {
        return this.graph.processCell.getFarrisPropConfig();
    };
    /**
     * 获取节点属性配置
     * @param cell
     * @returns
     */
    EditorUi.prototype.getCellFarrisPropConfig = function (cell) {
        return cell.getFarrisPropConfig();
    };
    /**
     * 显示EditorUI
     */
    EditorUi.prototype.show = function () {
        var _this = this;
        this.createDivs();
        this.refresh(false);
        this.graph = this.createGraph();
        this.keyHandler = this.createKeyHandler(this.graph);
        this.actions = this.createActions();
        this.toolbarItems = this.createToolbarItems();
        if (this.showMenubar) {
            this.menubar = this.createMenubar();
        }
        if (this.showToolbar) {
            this.toolbar = this.createToolbar();
        }
        if (this.showSidebar) {
            this.sidebar = this.createSidebar();
        }
        if (this.showFormat) {
            this.format = this.createFormat();
        }
        if (this.showFooter) {
            this.footer = this.createFooter();
        }
        this.resetToolbar(this.toolbarItems);
        this.resetToolbox();
        // 禁用右键快捷菜单
        mxEvent.disableContextMenu(this.container);
        // 点击非当前菜单位置时关闭菜单
        this.gestureHandler = function (evt) {
            if (_this.currentMenu != null && mxEvent.getSource(evt) != _this.currentMenu.div) {
                _this.hideCurrentMenu();
            }
        };
        mxEvent.addGestureListeners(document, this.gestureHandler);
        this.resizeHandler = function () {
            window.setTimeout(function () {
                if (_this.graph != null) {
                    _this.refresh();
                }
            }, 0);
        };
        mxEvent.addListener(window, 'resize', this.resizeHandler);
        this.addListener(PmfEvents.ResetGraphView, function () {
            _this.resetScrollbars();
        });
        this.fireEvent(new mxEventObject(PmfEvents.ResetGraphView));
        this.addBpmnListeners();
    };
    /**
     * 刷新
     * @param sizeDidChange
     */
    EditorUi.prototype.refresh = function (sizeDidChange) {
        if (sizeDidChange === void 0) { sizeDidChange = true; }
        var quirks = mxClient.IS_QUIRKS;
        var w = this.container.clientWidth;
        var h = this.container.clientHeight;
        if (this.container == document.body) {
            w = document.body.clientWidth || document.documentElement.clientWidth;
            h = (quirks) ? document.body.clientHeight || document.documentElement.clientHeight : document.documentElement.clientHeight;
        }
        // Workaround for bug on iOS see
        // http://stackoverflow.com/questions/19012135/ios-7-ipad-safari-landscape-innerheight-outerheight-layout-issue
        // FIXME: Fix if footer visible
        var off = 0;
        if (mxClient.IS_IOS && !window.navigator.standalone) {
            if (window.innerHeight != document.documentElement.clientHeight) {
                off = document.documentElement.clientHeight - window.innerHeight;
                window.scrollTo(0, 0);
            }
        }
        var menubarContainerHeight = this.showMenubar ? this.menubarHeight : 0;
        var toolbarContainerHeight = this.showToolbar ? this.toolbarHeight : 0;
        var formatContainerWidth = this.showFooter ? this.formatWidth : 0;
        var footerContainerHeight = this.showFooter ? this.footerHeight : 0;
        var tmp = 0;
        this.menubarContainer.style.height = menubarContainerHeight + 'px';
        tmp += menubarContainerHeight;
        this.toolbarContainer.style.top = menubarContainerHeight + 'px';
        this.toolbarContainer.style.height = toolbarContainerHeight + 'px';
        tmp += toolbarContainerHeight;
        if (tmp > 0 && !mxClient.IS_QUIRKS) {
            tmp += 1;
        }
        var effectSidebarSplitPosition = Math.max(0, Math.min(this.sidebarSplitPosition, w - this.sidebarSplitSize - 20));
        if (this.showSidebar) {
            this.sidebarContainer.style.top = tmp + 'px';
            this.sidebarContainer.style.width = effectSidebarSplitPosition + 'px';
            this.sidebarSplit.style.top = this.sidebarContainer.style.top;
            this.sidebarSplit.style.bottom = (footerContainerHeight + off) + 'px';
            this.sidebarSplit.style.left = effectSidebarSplitPosition + 'px';
        }
        this.diagramContainer.style.left = (this.sidebarSplit.parentNode != null) && this.showSidebar ? (effectSidebarSplitPosition + this.sidebarSplitSize) + 'px' : '0px';
        this.diagramContainer.style.top = tmp + 'px';
        this.formatContainer.style.top = tmp + 'px';
        this.formatContainer.style.width = formatContainerWidth + 'px';
        this.footerContainer.style.height = footerContainerHeight + "px";
        if (quirks) {
            this.menubarContainer.style.width = w + 'px';
            this.toolbarContainer.style.width = this.menubarContainer.style.width;
            var sidebarHeight = Math.max(0, h - footerContainerHeight - menubarContainerHeight - this.toolbarHeight);
            this.sidebarContainer.style.height = sidebarHeight + 'px';
            this.formatContainer.style.height = sidebarHeight + 'px';
            this.diagramContainer.style.width = (this.sidebarSplit.parentNode != null) ? Math.max(0, w - effectSidebarSplitPosition - this.sidebarSplitSize - formatContainerWidth) + 'px' : w + 'px';
            this.footerContainer.style.width = this.menubarContainer.style.width;
            var diagramHeight = Math.max(0, h - footerContainerHeight - menubarContainerHeight - this.toolbarHeight);
            this.diagramContainer.style.height = diagramHeight + 'px';
            this.sidebarSplit.style.height = diagramHeight + 'px';
        }
        else {
            if (footerContainerHeight > 0) {
                this.footerContainer.style.bottom = off + 'px';
            }
            this.diagramContainer.style.right = formatContainerWidth + 'px';
            this.sidebarContainer.style.bottom = (footerContainerHeight + off) + 'px';
            this.formatContainer.style.bottom = (footerContainerHeight + off) + 'px';
            this.diagramContainer.style.bottom = (footerContainerHeight + off) + 'px';
        }
        if (sizeDidChange && this.graph != null) {
            this.graph.sizeDidChange();
            this.fireEvent(new mxEventObject(PmfEvents.ResizeGraphView));
        }
    };
    /**
     * 创建各容器div
     */
    EditorUi.prototype.createDivs = function () {
        var _this = this;
        this.menubarContainer = this.createDiv('geMenubarContainer');
        this.menubarContainer.style.top = '0px';
        this.menubarContainer.style.left = '0px';
        this.menubarContainer.style.right = '0px';
        this.container.appendChild(this.menubarContainer);
        this.toolbarContainer = this.createDiv('geToolbarContainer');
        this.toolbarContainer.style.left = '0px';
        this.toolbarContainer.style.right = '0px';
        this.container.appendChild(this.toolbarContainer);
        this.sidebarContainer = this.createDiv('geSidebarContainer');
        this.sidebarContainer.style.left = '0px';
        this.container.appendChild(this.sidebarContainer);
        this.sidebarSplit = this.createDiv('geHsplit');
        this.sidebarSplit.setAttribute('title', mxResources.get('collapseExpand'));
        this.sidebarSplit.style.width = this.sidebarSplitSize + 'px';
        this.addSplitHandler(this.sidebarSplit, true, 0, function (value) {
            _this.sidebarSplitOnChange(value);
        });
        this.container.appendChild(this.sidebarSplit);
        this.diagramContainer = this.createDiv('geDiagramContainer');
        this.diagramContainer.style.right = (this.showFormat ? this.formatWidth : 0) + 'px';
        this.diagramContainer.style.overflow = "auto";
        this.container.appendChild(this.diagramContainer);
        this.formatContainer = this.createDiv('geSidebarContainer');
        this.formatContainer.style.right = '0px';
        this.formatContainer.style.zIndex = '1';
        this.formatContainer.style.backgroundColor = 'whiteSmoke';
        this.formatContainer.style.overflowX = 'hidden';
        this.formatContainer.style.overflowY = 'auto';
        this.formatContainer.style.fontSize = '12px';
        this.container.appendChild(this.formatContainer);
        this.footerContainer = this.createDiv('geFooterContainer');
        this.footerContainer.style.left = '0px';
        this.footerContainer.style.right = '0px';
        this.footerContainer.style.bottom = '0px';
        this.footerContainer.style.zIndex = (mxPopupMenu.prototype.zIndex - 2).toString();
        this.container.appendChild(this.footerContainer);
    };
    /**
     * 创建带指定样式类的div
     * @param classname
     * @returns
     */
    EditorUi.prototype.createDiv = function (classname) {
        var elt = document.createElement('div');
        elt.className = classname;
        return elt;
    };
    /**
     * 添加分割条处理器
     * @param elt
     * @param horizontal
     * @param dx
     * @param onChange
     */
    EditorUi.prototype.addSplitHandler = function (elt, horizontal, dx, onChange) {
        var _this = this;
        onChange = mxUtils.bind(this, onChange);
        var start;
        var initial;
        var ignoreClick = true;
        var last;
        // Disables built-in pan and zoom in IE10 and later
        if (mxClient.IS_POINTER) {
            elt.style.touchAction = 'none';
        }
        var getValue = function () {
            var result = parseInt(((horizontal) ? elt.style.left : elt.style.bottom));
            if (!horizontal) {
                result = result + dx - _this.footerHeight;
            }
            return result;
        };
        var clickHandler = function (evt) {
            if (!ignoreClick) {
                var next = (last != null) ? last - dx : 0;
                last = getValue();
                onChange(next);
                mxEvent.consume(evt);
            }
        };
        var startHandler = function (evt) {
            start = new mxPoint(mxEvent.getClientX(evt), mxEvent.getClientY(evt));
            initial = getValue();
            ignoreClick = false;
            mxEvent.consume(evt);
        };
        var moveHandler = function (evt) {
            if (start != null) {
                var pt = new mxPoint(mxEvent.getClientX(evt), mxEvent.getClientY(evt));
                onChange(Math.max(0, (initial == null ? 0 : initial) + ((horizontal) ? (pt.x - start.x) : (start.y - pt.y)) - dx));
                mxEvent.consume(evt);
                if (initial != getValue()) {
                    ignoreClick = true;
                    last = null;
                }
            }
        };
        var dropHandler = function (evt) {
            moveHandler(evt);
            initial = null;
            start = null;
        };
        mxEvent.addListener(elt, 'click', clickHandler);
        mxEvent.addGestureListeners(elt, startHandler, null, null);
        mxEvent.addGestureListeners(document, null, moveHandler, dropHandler);
    };
    /**
     * 分割条移动后刷新界面
     * @param value
     */
    EditorUi.prototype.sidebarSplitOnChange = function (value) {
        // 分割条不可超过画布最小宽度
        if (this.container.clientWidth - value <= this.formatWidth + this.sidebarSplitSize + this.diagramMinWidth) {
            return;
        }
        this.sidebarSplitPosition = value;
        this.refresh();
    };
    /**
     * 获取画布容器偏移量
     * @returns
     */
    EditorUi.prototype.getDiagramContainerOffset = function () {
        return this.zeroOffset;
    };
    /**
     * 创建画布
     * @returns
     */
    EditorUi.prototype.createGraph = function () {
        this.beforeCreateGraph();
        var graph = this.createGraphInstance();
        this.afterCreateGraph(graph);
        return graph;
    };
    /**
     * 创建画布前
     */
    EditorUi.prototype.beforeCreateGraph = function () {
        mxConstants.DEFAULT_VALID_COLOR = '#FFFFFF';
        mxConstants.VALID_COLOR = '#00CD66';
        // 引导线颜色
        mxConstants.GUIDE_COLOR = '#0088cf';
        // 选中高亮框宽度
        mxConstants.HIGHLIGHT_STROKEWIDTH = 1;
        //设置节点选中线框宽度
        mxConstants.VERTEX_SELECTION_STROKEWIDTH = 1;
        mxConstants.VERTEX_SELECTION_COLOR = '#0000CD';
        mxConstants.VERTEX_SELECTION_DASHED = true;
        mxGuide.prototype.createGuideShape = function (horizontal) {
            var guide = new mxPolyline([], mxConstants.GUIDE_COLOR, mxConstants.GUIDE_STROKEWIDTH);
            return guide;
        };
    };
    /**
     * 创建画布实例
     */
    EditorUi.prototype.createGraphInstance = function () {
        var graph = new Graph(this, this.diagramContainer);
        return graph;
    };
    /**
     * 创建画布后
     * @param graph
     */
    EditorUi.prototype.afterCreateGraph = function (graph) {
        var _this = this;
        new mxRubberband(graph);
        graph.setDropEnabled(true);
        graph.setConnectable(true);
        // 设置画布容器dom可以获得焦点
        graph.container.setAttribute('tabindex', '0');
        //选中元素变更后出发EditorUI选中模型变更事件，修改action状态
        graph.getSelectionModel().addListener(mxEvent.CHANGE, function (sender, evt) {
            _this.fireEvent(new mxEventObject(PmfEvents.SelectionModelChanged));
        });
        // 保证鼠标按下时焦点一直是画布容器
        var graphFireMouseEvent = graph.fireMouseEvent;
        graph.fireMouseEvent = function (evtName, me, sender) {
            if (evtName == mxEvent.MOUSE_DOWN) {
                graph.container.focus();
            }
            graphFireMouseEvent.apply(graph, [evtName, me, sender]);
        };
        // 创建无限大画布
        graph.createInfiniteCanvas();
        // 方法重写完成后，需重新调用一次sizeDidChange()才可生效
        graph.sizeDidChange();
        // 重写复制方法
        mxClipboard.copy = function (graph, cells) {
            cells = cells || graph.getSelectionCells();
            // 仅复制节点
            cells = cells.filter(function (cell) { return cell.vertex; });
            var result = graph.getExportableCells(graph.model.getTopmostCells(cells));
            mxClipboard.insertCount = 1;
            mxClipboard.setCells(graph.cloneCells(result));
            return result;
        };
        // 重写粘贴方法
        mxClipboard.paste = function (graph) {
            var cells = null;
            if (!mxClipboard.isEmpty()) {
                cells = graph.getImportableCells(mxClipboard.getCells());
                // 仅粘贴节点
                cells = cells.filter(function (cell) { return cell.vertex; });
                var delta_1 = mxClipboard.insertCount * mxClipboard.STEPSIZE;
                var parent_1 = graph.getDefaultParent();
                graph.clearSelection();
                var select_1 = [];
                graph.model.beginUpdate();
                try {
                    cells.forEach(function (cell) {
                        // const clone = graph.moveCells([cell], delta, delta, false, parent)[0] as NodeCell;
                        var clone = graph.importCells([cell], delta_1, delta_1, parent_1)[0];
                        clone.bindBpmnModel(clone.flowElement, clone.diagramElement);
                        select_1.push(clone);
                    });
                    // Increments the counter and selects the inserted cells
                    mxClipboard.insertCount++;
                }
                finally {
                    graph.model.endUpdate();
                }
                graph.setSelectionCells(select_1);
            }
            return cells;
        };
    };
    /**
     * 创建动作列表
     * @returns
     */
    EditorUi.prototype.createActions = function () {
        var actions = new Actions(this);
        return actions;
    };
    /**
     * 创建工具栏项列表
     * @returns
     */
    EditorUi.prototype.createToolbarItems = function () {
        var toolbarItems = new DefaultToolbarItems();
        return toolbarItems;
    };
    /**
     * 创建键盘事件处理器
     * @param graph
     * @returns
     */
    EditorUi.prototype.createKeyHandler = function (graph) {
        var keyHandler = new KeyHandler(graph);
        return keyHandler;
    };
    /**
     * 创建菜单栏
     * @returns
     */
    EditorUi.prototype.createMenubar = function () {
        var menubar = new Menubar(this, this.menubarContainer);
        return menubar;
    };
    /**
     * 创建工具栏
     * @returns
     */
    EditorUi.prototype.createToolbar = function () {
        var toolbar = new Toolbar(this, this.toolbarContainer);
        return toolbar;
    };
    /**
     * 创建侧边栏
     * @returns
     */
    EditorUi.prototype.createSidebar = function () {
        var sidebar = new Sidebar(this, this.sidebarContainer);
        return sidebar;
    };
    /**
     * 创建内置属性框
     * @returns
     */
    EditorUi.prototype.createFormat = function () {
        var format = new Format(this, this.formatContainer);
        return format;
    };
    /**
     * 创建底部栏
     * @returns
     */
    EditorUi.prototype.createFooter = function () {
        var footer = new Footer(this, this.footerContainer);
        return footer;
    };
    /**
     * 重置工具条
     */
    EditorUi.prototype.resetToolbar = function (toolbarItems) {
        this.toolbar && this.toolbar.reset(toolbarItems);
    };
    /**
     * 重置工具箱
     */
    EditorUi.prototype.resetToolbox = function () {
        this.toolbox = this.createToolbox();
        this.sidebar && this.sidebar.reset(this.toolbox);
    };
    /**
     * 创建工具箱
     * @returns
     */
    EditorUi.prototype.createToolbox = function () {
        var toolbox = new DefaultToolbox();
        return toolbox;
    };
    /**
     * 加载BpmnModel
     * @param json
     */
    EditorUi.prototype.loadBpmnModel = function (json) {
        this.graph && this.graph.loadBpmnModel(json);
    };
    /**
     * 重置滚动条
     */
    EditorUi.prototype.resetScrollbars = function () {
        var graph = this.graph;
        var bounds = graph.getGraphBounds();
        var width = bounds.width;
        var height = bounds.height;
        if (graph.getScrollTileSize) {
            width = Math.max(bounds.width, graph.getScrollTileSize().width * graph.view.scale);
            height = Math.max(bounds.height, graph.getScrollTileSize().height * graph.view.scale);
        }
        graph.container.scrollTop = Math.floor(Math.max(0, bounds.y - Math.max(20, (graph.container.clientHeight - height) / 4)));
        graph.container.scrollLeft = Math.floor(Math.max(0, bounds.x - Math.max(0, (graph.container.clientWidth - width) / 2)));
    };
    /**
     * 设置当前菜单
     * @param menu
     * @param elt
     */
    EditorUi.prototype.setCurrentMenu = function (menu, elt) {
        this.currentMenuElt = elt;
        this.currentMenu = menu;
    };
    /**
     * 重置当前菜单
     */
    EditorUi.prototype.resetCurrentMenu = function () {
        this.currentMenuElt = null;
        this.currentMenu = null;
    };
    /**
     * 隐藏当前菜单
     */
    EditorUi.prototype.hideCurrentMenu = function () {
        if (this.currentMenu != null) {
            this.currentMenu.hideMenu();
            this.resetCurrentMenu();
        }
    };
    /**
     * 添加模型相关监听器
     */
    EditorUi.prototype.addBpmnListeners = function () {
        var _this = this;
        // 元素修改事件处理
        this.graph.getModel().addListener(mxEvent.CHANGE, function (sender, evt) {
            // 画图完成后才会为graph的bpmnModel赋值，此后才真正监听change事件
            if (_this.graph.bpmnModel == null) {
                return;
            }
            var changes = evt.getProperty("changes");
            var edit = evt.getProperty("edit");
            //消息发送开关，发送出一次消息后关闭
            var flag = true;
            changes && changes.forEach(function (chg) {
                // 根据change实例的构造函数名判断具体属于哪种类型
                if (chg.constructor.name == MxGraphInnerClass.mxTerminalChange) {
                    var change = chg;
                    var edge = change.cell;
                    var terminal = change.terminal;
                    var source = change.source;
                    var previous = change.previous;
                    _this.graph.bpmnEdgeTerminalChanged(edge, terminal, source, previous, sender, evt, change);
                    if (flag && edge != null) {
                        _this.fireEvent(new mxEventObject(PmfEvents.ShowProperty, "cells", [edge]));
                        flag = false;
                    }
                    _this.graph.setSelectionCells([edge]);
                }
                else if (chg.constructor.name == MxGraphInnerClass.mxGeometryChange) {
                    var change = chg;
                    var cell = change.cell;
                    _this.graph.bpmnCellGeometryChanged(cell, sender, evt, change);
                    if (flag && cell != null) {
                        _this.fireEvent(new mxEventObject(PmfEvents.ShowProperty, "cells", [cell]));
                        flag = false;
                    }
                }
            });
        });
        // 元素删除事件处理
        this.graph.addListener(mxEvent.CELLS_REMOVED, function (sender, evt) {
            var cells = evt.getProperty("cells");
            _this.graph.bpmnCellsRemoved(cells, sender, evt);
        });
        // 修改选中元素事件处理
        this.graph.getSelectionModel().addListener(mxEvent.CHANGE, function (sender, evt) {
            var cells = _this.graph.getSelectionCells();
            _this.graph.bpmnCellsSelectionChanged(cells, sender, evt);
        });
        // 添加连线事件
        this.graph.connectionHandler.addListener(mxEvent.CONNECT, function (sender, evt) {
            var edge = evt.getProperty("cell");
            _this.graph.bpmnCellsConnected(edge, sender, evt);
        });
        // 活动名称修改事件
        this.addListener(PmfEvents.NameChanged, function (sender, evt) {
            var cell = evt.getProperty("cell");
            _this.graph.bpmnCellNameChanged(cell, sender, evt);
        });
    };
    /**
     * 销毁
     */
    EditorUi.prototype.destroy = function () {
        if (this.graph != null) {
            this.graph.destroy();
        }
        if (this.toolbar != null) {
            this.toolbar.destroy();
            this.toolbar = null;
        }
        if (this.sidebar != null) {
            this.sidebar.destroy();
            this.sidebar = null;
        }
        if (this.keyHandler != null) {
            this.keyHandler.destroy();
            this.keyHandler = null;
        }
        if (this.gestureHandler != null) {
            mxEvent.removeGestureListeners(document, this.gestureHandler);
            this.gestureHandler = null;
        }
        if (this.resizeHandler != null) {
            mxEvent.removeListener(window, 'resize', this.resizeHandler);
            this.resizeHandler = null;
        }
        if (this.deleteKeyHandler != null) {
            mxEvent.removeListener(document, 'keydown', this.deleteKeyHandler);
            this.deleteKeyHandler = null;
        }
        if (this.destroyFunctions != null) {
            for (var i = 0; i < this.destroyFunctions.length; i++) {
                this.destroyFunctions[i]();
            }
            this.destroyFunctions = null;
        }
        var c = [
            this.menubarContainer,
            this.toolbarContainer,
            this.sidebarContainer,
            this.formatContainer,
            this.diagramContainer,
            this.footerContainer,
            this.sidebarSplit,
        ];
        for (var i = 0; i < c.length; i++) {
            if (c[i] != null && c[i].parentNode != null) {
                c[i].parentNode.removeChild(c[i]);
            }
        }
    };
    return EditorUi;
}(mxEventSource));
export { EditorUi };
//# sourceMappingURL=EditorUi.js.map