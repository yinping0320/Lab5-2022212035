import { ActionKeys } from "../action/ActionKeys";
import { mxWindow, mxResources, mxEvent, mxOutline, mxUtils, mxConstants } from "@edp-pmf/mxgraph-ts";
import { PmfEvents } from "../util/PmfEvents";
/**
 * mxgraph弹窗类
 */
var OutlineWindow = /** @class */ (function () {
    function OutlineWindow(editorUi, x, y, w, h) {
        var _this = this;
        var graph = editorUi.graph;
        var div = document.createElement('div');
        div.style.position = 'absolute';
        div.style.width = '100%';
        div.style.height = '100%';
        div.style.border = '1px solid whiteSmoke';
        div.style.overflow = 'hidden';
        this.window = new mxWindow(mxResources.get('outline'), div, x, y, w, h, true, true);
        this.window.destroyOnClose = false;
        this.window.setMaximizable(false);
        this.window.setResizable(true);
        this.window.setClosable(true);
        this.window.setVisible(true);
        this.window.setLocation = function (x, y) {
            var iw = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
            var ih = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
            x = Math.max(0, Math.min(x, iw - _this.window.table.clientWidth));
            y = Math.max(0, Math.min(y, ih - _this.window.table.clientHeight - 48));
            if (_this.window.getX() != x || _this.window.getY() != y) {
                mxWindow.prototype.setLocation.apply(_this.window, [x, y]);
            }
        };
        mxEvent.addListener(window, 'resize', function () {
            var x = _this.window.getX();
            var y = _this.window.getY();
            _this.window.setLocation(x, y);
        });
        var outline = new mxOutline(editorUi.graph);
        outline.border = 20;
        mxEvent.addListener(window, 'resize', function () {
            outline.update();
        });
        editorUi.addListener('pageFormatChanged', function () {
            outline.update();
        });
        editorUi.addListener(PmfEvents.ResizeGraphView, function () {
            outline.update();
        });
        this.window.addListener(mxEvent.RESIZE, function () {
            outline.update(false);
            outline.outline.sizeDidChange();
        });
        this.window.addListener(mxEvent.SHOW, function () {
            outline.suspended = false;
            outline.outline.refresh();
            outline.update();
        });
        this.window.addListener(mxEvent.HIDE, function () {
            outline.suspended = true;
        });
        this.window.addListener(mxEvent.NORMALIZE, function () {
            outline.suspended = false;
            outline.update();
        });
        this.window.addListener(mxEvent.MINIMIZE, function () {
            outline.suspended = true;
        });
        var outlineCreateGraph = outline.createGraph;
        outline.createGraph = function (container) {
            var g = outlineCreateGraph.apply(outline, [container]);
            g.gridEnabled = false;
            g.pageScale = graph.pageScale;
            g.pageFormat = graph.pageFormat;
            g.background = graph.background;
            g.pageVisible = graph.pageVisible;
            var current = mxUtils.getCurrentStyle(graph.container);
            div.style.backgroundColor = current.backgroundColor;
            return g;
        };
        var update = function () {
            outline.outline.pageScale = graph.pageScale;
            outline.outline.pageFormat = graph.pageFormat;
            outline.outline.pageVisible = graph.pageVisible;
            outline.outline.background = graph.background;
            var current = mxUtils.getCurrentStyle(graph.container);
            div.style.backgroundColor = current.backgroundColor;
            if (graph.view.backgroundPageShape != null && outline.outline.view.backgroundPageShape != null) {
                outline.outline.view.backgroundPageShape.fill = graph.view.backgroundPageShape.fill;
            }
            outline.outline.refresh();
        };
        outline.init(div);
        editorUi.addListener('resetGraphView', update);
        editorUi.addListener('pageFormatChanged', update);
        editorUi.addListener('backgroundColorChanged', update);
        editorUi.addListener('backgroundImageChanged', update);
        editorUi.addListener('pageViewChanged', function () {
            update();
            outline.update(true);
        });
        if (outline.outline.dialect == mxConstants.DIALECT_SVG) {
            var zoomInAction_1 = editorUi.actions.getAction(ActionKeys.pmf_zoomIn);
            var zoomOutAction_1 = editorUi.actions.getAction(ActionKeys.pmf_zoomOut);
            mxEvent.addMouseWheelListener(function (evt, up) {
                var outlineWheel = false;
                var source = mxEvent.getSource(evt);
                while (source != null) {
                    if (source == outline.outline.view.canvas.ownerSVGElement) {
                        outlineWheel = true;
                        break;
                    }
                    source = source.parentNode;
                }
                if (outlineWheel) {
                    if (up) {
                        zoomInAction_1.execute();
                    }
                    else {
                        zoomOutAction_1.execute();
                    }
                    mxEvent.consume(evt);
                }
            });
        }
    }
    return OutlineWindow;
}());
export { OutlineWindow };
//# sourceMappingURL=OutlineWindow.js.map