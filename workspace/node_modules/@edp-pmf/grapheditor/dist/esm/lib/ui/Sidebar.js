import { mxClient, mxConstants, mxEvent, mxEventObject, mxGeometry, mxGraph, mxPoint, mxPopupMenu, mxRectangle, mxResources, mxUtils } from "@edp-pmf/mxgraph-ts";
import { BpmnCellHelper } from "../util/BpmnCellHelper";
import { Constant } from "../util/Constant";
import { PmfEvents } from "../util/PmfEvents";
/**
 * 侧边栏
 */
var Sidebar = /** @class */ (function () {
    function Sidebar(editorUi, container) {
        /**
         * 缩略图宽度
         */
        this.thumbWidth = 36;
        /**
         * 缩略图高度
         */
        this.thumbHeight = 36;
        /**
         * 缩略图内边距
         */
        this.thumbPadding = (document.documentMode >= 5) ? 0 : 1;
        /**
         * 缩略图边框宽度
         */
        this.thumbBorder = 2;
        /**
         * 工具箱分组标题字体大小
         */
        this.sidebarTitleSize = 12;
        /**
         * 显示分组标题
         */
        this.sidebarTitles = true;
        /**
         * 显示提示信息
         */
        this.tooltipTitles = true;
        /**
         * 启用提示信息
         */
        this.enableTooltips = true;
        /**
         * 显示提示信息
         */
        this.showTooltips = true;
        /**
         * 提示信息图片
         */
        this.tooltipImageSrc = Constant.IMAGE_PATH + '/tooltip.png';
        /**
         * 提示信息显示延迟
         */
        this.tooltipDelay = 300;
        /**
         * 提示信息边框宽度
         */
        this.tooltipBorder = 16;
        /**
         * 提示信息最大宽度
         */
        this.maxTooltipWidth = 400;
        /**
         * 提示信息最大高度
         */
        this.maxTooltipHeight = 400;
        /**
         * 分组折叠图片
         */
        this.collapsedImage = Constant.IMAGE_PATH + '/collapsed.gif';
        /**
         * 分组展开图片
         */
        this.expandedImage = Constant.IMAGE_PATH + '/expanded.gif';
        /**
         * 拖拽至画布后元素高度
         */
        this.defaultImageHeight = 36;
        /**
         * 拖拽至画布后元素宽度
         */
        this.defaultImageWidth = 36;
        /**
         * 拖拽预览边框样式
         */
        this.dragPreviewBorder = '1px dashed black';
        /**
         * 工具箱分组Map
         */
        this.palettes = {};
        this.editorUi = editorUi;
        this.container = container;
        this.graph = this.createTemporaryGraph(this.editorUi.graph.getStylesheet());
        this.graph.cellRenderer.antiAlias = false;
        this.graph.foldingEnabled = false;
        // Workaround for blank output in IE11-
        if (!mxClient.IS_IE && !mxClient.IS_IE11) {
            this.graph.container.style.display = 'none';
        }
    }
    /**
     * 创建临时画布
     * @param stylesheet
     * @returns
     */
    Sidebar.prototype.createTemporaryGraph = function (stylesheet) {
        var graph = new mxGraph(document.createElement('div'), null, null, stylesheet);
        graph.resetViewOnRootChange = false;
        graph.setConnectable(false);
        graph.gridEnabled = false;
        graph.autoScroll = false;
        graph.setTooltips(false);
        graph.setEnabled(false);
        // Container must be in the DOM for correct HTML rendering
        graph.container.style.visibility = 'hidden';
        graph.container.style.position = 'absolute';
        graph.container.style.overflow = 'hidden';
        graph.container.style.height = '1px';
        graph.container.style.width = '1px';
        return graph;
    };
    /**
     * 重置工具箱
     * @param toolbox
     */
    Sidebar.prototype.reset = function (toolbox) {
        var _this = this;
        // 内置工具箱分组
        toolbox && toolbox.groups && toolbox.groups.forEach(function (g) {
            var factories = [];
            g.items && g.items.forEach(function (it) {
                var cell = BpmnCellHelper.generate(it.clrTypeId, undefined, new mxGeometry(0, 0, _this.defaultImageWidth, _this.defaultImageHeight));
                if (cell.edge) {
                    cell.geometry.setTerminalPoint(new mxPoint(0, _this.defaultImageHeight), true);
                    cell.geometry.setTerminalPoint(new mxPoint(_this.defaultImageWidth, 0), false);
                    cell.geometry.relative = true;
                }
                // 先取多语名称，取不到再取默认名称
                factories.push(_this.createItemFactory([cell], (cell.nameLanguage && cell.nameLanguage[_this.editorUi.langCode]) || cell.name, _this.defaultImageWidth, _this.defaultImageHeight));
            });
            _this.addPaletteFunctions(g.name, g.name, true, factories);
        });
    };
    /**
     * 添加带创建元素工厂方法的工具箱显示项分组
     * @param id
     * @param title
     * @param expanded
     * @param factories
     */
    Sidebar.prototype.addPaletteFunctions = function (id, title, expanded, factories) {
        var onInit = function (content) {
            for (var i = 0; i < factories.length; i++) {
                content.appendChild(factories[i]());
            }
        };
        this.addPalette(id, title, expanded, onInit);
    };
    /**
     * 添加工具箱显示项分组
     * @param id
     * @param title
     * @param expanded
     * @param onInit
     */
    Sidebar.prototype.addPalette = function (id, title, expanded, onInit) {
        var elt = this.createPaletteTitle(title);
        this.container.appendChild(elt);
        var div = document.createElement('div');
        div.className = 'geSidebar';
        // Disables built-in pan and zoom in IE10 and later
        if (mxClient.IS_POINTER) {
            div.style.touchAction = 'none';
        }
        if (expanded) {
            onInit(div);
            onInit = null;
        }
        else {
            div.style.display = 'none';
        }
        this.addFoldingHandler(elt, div, onInit);
        var outer = document.createElement('div');
        outer.appendChild(div);
        this.container.appendChild(outer);
        // Keeps references to the DOM nodes
        if (id != null) {
            this.palettes[id] = [elt, outer];
        }
    };
    /**
     * 创建工具箱显示项分组标题栏
     * @param label
     * @returns
     */
    Sidebar.prototype.createPaletteTitle = function (label) {
        var elt = document.createElement('a');
        elt.setAttribute('href', 'javascript:void(0);');
        elt.setAttribute('title', mxResources.get('sidebarTooltip'));
        elt.className = 'geTitle';
        mxUtils.write(elt, label);
        return elt;
    };
    /**
     * 添加工具箱显示项分组标题栏折叠处理器
     * @param title
     * @param content
     * @param onInit
     */
    Sidebar.prototype.addFoldingHandler = function (title, content, onInit) {
        var that = this;
        var initialized = false;
        // Avoids mixed content warning in IE6-8
        if (!mxClient.IS_IE || document.documentMode >= 8) {
            title.style.backgroundImage = (content.style.display == 'none') ?
                'url(\'' + this.collapsedImage + '\')' : 'url(\'' + this.expandedImage + '\')';
        }
        title.style.backgroundRepeat = 'no-repeat';
        title.style.backgroundPosition = '0% 50%';
        mxEvent.addListener(title, 'click', function (evt) {
            if (content.style.display == 'none') {
                if (!initialized) {
                    initialized = true;
                    if (onInit != null) {
                        // Wait cursor does not show up on Mac
                        title.style.cursor = 'wait';
                        var prev_1 = title.innerHTML;
                        title.innerHTML = mxResources.get('loading') + '...';
                        window.setTimeout(function () {
                            var fo = mxClient.NO_FO;
                            mxClient.NO_FO = Constant.ORIGINAL_NO_FO;
                            onInit(content);
                            mxClient.NO_FO = fo;
                            content.style.display = 'block';
                            title.style.cursor = '';
                            title.innerHTML = prev_1;
                        }, 0);
                    }
                    else {
                        content.style.display = 'block';
                    }
                }
                else {
                    content.style.display = 'block';
                }
                title.style.backgroundImage = 'url(\'' + that.expandedImage + '\')';
            }
            else {
                title.style.backgroundImage = 'url(\'' + that.collapsedImage + '\')';
                content.style.display = 'none';
            }
            mxEvent.consume(evt);
        });
    };
    /**
     * 创建工具箱显示项的工厂方法
     * @param cells
     * @param title
     * @param width
     * @param height
     * @param showLabel
     * @param showTitle
     * @param allowCellsInserted
     * @returns
     */
    Sidebar.prototype.createItemFactory = function (cells, title, width, height, showLabel, showTitle, allowCellsInserted) {
        var _this = this;
        if (showLabel === void 0) { showLabel = true; }
        if (showTitle === void 0) { showTitle = true; }
        if (allowCellsInserted === void 0) { allowCellsInserted = true; }
        var func = function () {
            return _this.createItem(cells, title, showLabel, showTitle, width, height, allowCellsInserted);
        };
        return func;
    };
    /**
     * 创建工具箱显示项
     * @param cells
     * @param title
     * @param showLabel
     * @param showTitle
     * @param width
     * @param height
     * @param allowCellsInserted
     * @returns
     */
    Sidebar.prototype.createItem = function (cells, title, showLabel, showTitle, width, height, allowCellsInserted) {
        var _this = this;
        var elt = document.createElement('a');
        elt.setAttribute('href', 'javascript:void(0);');
        elt.className = 'geItem';
        elt.style.overflow = 'hidden';
        var border = (mxClient.IS_QUIRKS) ? 8 + 2 * this.thumbPadding : 2 * this.thumbBorder;
        elt.style.width = 70 + 'px';
        elt.style.height = 70 + 'px';
        // elt.style.padding = this.thumbPadding + 'px';
        if (mxClient.IS_IE6) {
            elt.style.border = 'none';
        }
        // Blocks default click action
        mxEvent.addListener(elt, 'click', function (evt) {
            mxEvent.consume(evt);
        });
        this.createThumb(cells, this.thumbWidth, this.thumbHeight, elt, title, showLabel, showTitle, width, height);
        var bounds = new mxRectangle(0, 0, width, height);
        if (cells.length > 0) {
            var dropHandler = this.createDropHandler(cells, false, allowCellsInserted, bounds);
            var dragPreview = this.createDragPreview(width, height);
            var ds = this.createDragSource(elt, dropHandler, dragPreview, cells, bounds);
        }
        // Shows a tooltip with the rendered cell
        if (!mxClient.IS_IOS) {
            mxEvent.addGestureListeners(elt, null, function (evt) {
                if (mxEvent.isMouseEvent(evt)) {
                    _this.showTooltip(elt, cells, bounds.width, bounds.height, title, showLabel);
                }
            });
            mxEvent.addListener(elt, (mxClient.IS_POINTER) ? 'pointerdown' : 'mousedown', function () {
                _this.hideTooltip();
                _this.showTooltips = false;
            });
            mxEvent.addListener(elt, (mxClient.IS_POINTER) ? 'pointerup' : 'mouseup', function () {
                _this.showTooltips = true;
            });
            mxEvent.addListener(elt, (mxClient.IS_POINTER) ? 'pointerleave' : 'mouseleave', function (evt) {
                _this.hideTooltip();
                _this.showTooltips = true;
            });
        }
        return elt;
    };
    /**
     * 创建显示项缩略图
     * @param cells
     * @param width
     * @param height
     * @param parent
     * @param title
     * @param showLabel
     * @param showTitle
     * @param realWidth
     * @param realHeight
     */
    Sidebar.prototype.createThumb = function (cells, width, height, parent, title, showLabel, showTitle, realWidth, realHeight) {
        this.graph.labelsVisible = (showLabel == null || showLabel);
        var fo = mxClient.NO_FO;
        mxClient.NO_FO = Constant.ORIGINAL_NO_FO;
        this.graph.view.scaleAndTranslate(1, 0, 0);
        this.graph.addCells(cells);
        var bounds = this.graph.getGraphBounds();
        var s = Math.floor(Math.min((width - 2 * this.thumbBorder) / bounds.width, (height - 2 * this.thumbBorder) / bounds.height) * 100) / 100;
        this.graph.view.scaleAndTranslate(s, Math.floor((width - bounds.width * s) / 2 / s - bounds.x), Math.floor((height - bounds.height * s) / 2 / s - bounds.y));
        var node = null;
        // For supporting HTML labels in IE9 standards mode the container is cloned instead
        if (this.graph.dialect == mxConstants.DIALECT_SVG && !mxClient.NO_FO) {
            node = this.graph.view.getCanvas().ownerSVGElement.cloneNode(true);
        }
        // LATER: Check if deep clone can be used for quirks if container in DOM
        else {
            node = this.graph.container.cloneNode(false);
            node.innerHTML = this.graph.container.innerHTML;
        }
        this.graph.getModel().clear();
        mxClient.NO_FO = fo;
        // Catch-all event handling
        if (mxClient.IS_IE6) {
            parent.style.backgroundImage = 'url(' + Constant.TRANSPARENT_IMAGE + ')';
        }
        node.style.position = 'relative';
        node.style.overflow = 'hidden';
        node.style.cursor = 'move';
        node.style.left = this.thumbBorder + 'px';
        node.style.top = this.thumbBorder + 'px';
        node.style.width = width + 'px';
        node.style.height = height + 'px';
        node.style.visibility = '';
        node.style.minWidth = '';
        node.style.minHeight = '';
        node.style.display = 'block';
        node.style.margin = '0 auto';
        node.style.paddingTop = '4px';
        parent.appendChild(node);
        // Adds title for sidebar entries
        if (this.sidebarTitles && title != null && showTitle != false) {
            var border = (mxClient.IS_QUIRKS) ? 2 * this.thumbPadding + 2 : 0;
            // parent.style.height = (this.thumbHeight + border + this.sidebarTitleSize + 20) + 'px';
            // parent.style.width = (this.thumbWidth + border + 8) + 'px';
            var div = document.createElement('div');
            div.style.fontSize = mxClient.IS_FF ? (this.sidebarTitleSize + 2) + 'px' : this.sidebarTitleSize + 'px';
            div.style.color = '#303030';
            div.style.textAlign = 'center';
            div.style.whiteSpace = 'nowrap';
            if (mxClient.IS_IE) {
                div.style.height = (this.sidebarTitleSize + 12) + 'px';
            }
            div.style.paddingTop = '5px';
            mxUtils.write(div, title);
            parent.appendChild(div);
        }
        //return bounds;
    };
    /**
     * 显示提示信息
     * @param elt
     * @param cells
     * @param w
     * @param h
     * @param title
     * @param showLabel
     */
    Sidebar.prototype.showTooltip = function (elt, cells, w, h, title, showLabel) {
        var _this = this;
        if (this.enableTooltips && this.showTooltips) {
            if (this.currentElt != elt) {
                if (this.thread != null) {
                    window.clearTimeout(this.thread);
                    this.thread = null;
                }
                var show = function () {
                    // Lazy creation of the DOM nodes and graph instance
                    if (_this.tooltip == null) {
                        _this.tooltip = document.createElement('div');
                        _this.tooltip.className = 'geSidebarTooltip';
                        _this.tooltip.style.zIndex = (mxPopupMenu.prototype.zIndex - 1).toString();
                        document.body.appendChild(_this.tooltip);
                        _this.graph2 = new mxGraph(_this.tooltip, null, null, _this.editorUi.graph.getStylesheet());
                        _this.graph2.resetViewOnRootChange = false;
                        _this.graph2.foldingEnabled = false;
                        _this.graph2.gridEnabled = false;
                        _this.graph2.autoScroll = false;
                        _this.graph2.setTooltips(false);
                        _this.graph2.setConnectable(false);
                        _this.graph2.setEnabled(false);
                        if (!mxClient.IS_SVG) {
                            _this.graph2.view.canvas.style.position = 'relative';
                        }
                        _this.tooltipImage = mxUtils.createImage(_this.tooltipImageSrc);
                        _this.tooltipImage.className = 'geSidebarTooltipImage';
                        _this.tooltipImage.style.zIndex = (mxPopupMenu.prototype.zIndex - 1).toString();
                        _this.tooltipImage.style.position = 'absolute';
                        _this.tooltipImage.style.width = '14px';
                        _this.tooltipImage.style.height = '27px';
                        document.body.appendChild(_this.tooltipImage);
                    }
                    _this.graph2.model.clear();
                    _this.graph2.view.setTranslate(_this.tooltipBorder, _this.tooltipBorder);
                    if (w > _this.maxTooltipWidth || h > _this.maxTooltipHeight) {
                        _this.graph2.view.scale = Math.round(Math.min(_this.maxTooltipWidth / w, _this.maxTooltipHeight / h) * 100) / 100;
                    }
                    else {
                        _this.graph2.view.scale = 1;
                    }
                    _this.tooltip.style.display = 'block';
                    _this.graph2.labelsVisible = (showLabel == null || showLabel);
                    var fo = mxClient.NO_FO;
                    mxClient.NO_FO = Constant.ORIGINAL_NO_FO;
                    _this.graph2.addCells(cells);
                    mxClient.NO_FO = fo;
                    var bounds = _this.graph2.getGraphBounds();
                    var width = bounds.width + 2 * _this.tooltipBorder + 4;
                    var height = bounds.height + 2 * _this.tooltipBorder;
                    if (mxClient.IS_QUIRKS) {
                        height += 4;
                        _this.tooltip.style.overflow = 'hidden';
                    }
                    else {
                        _this.tooltip.style.overflow = 'visible';
                    }
                    _this.tooltipImage.style.visibility = 'visible';
                    _this.tooltip.style.width = width + 'px';
                    // Adds title for entry
                    if (_this.tooltipTitles && title != null && title.length > 0) {
                        if (_this.tooltipTitle == null) {
                            _this.tooltipTitle = document.createElement('div');
                            _this.tooltipTitle.style.borderTop = '1px solid gray';
                            _this.tooltipTitle.style.textAlign = 'center';
                            _this.tooltipTitle.style.width = '100%';
                            // Oversize titles are cut-off currently. Should make tooltip wider later.
                            _this.tooltipTitle.style.overflow = 'hidden';
                            if (mxClient.IS_SVG) {
                                _this.tooltipTitle.style.paddingTop = '6px';
                            }
                            else {
                                _this.tooltipTitle.style.position = 'absolute';
                                _this.tooltipTitle.style.paddingTop = '6px';
                            }
                            _this.tooltip.appendChild(_this.tooltipTitle);
                        }
                        else {
                            _this.tooltipTitle.innerHTML = '';
                        }
                        _this.tooltipTitle.style.display = '';
                        mxUtils.write(_this.tooltipTitle, title);
                        var ddy = _this.tooltipTitle.offsetHeight + 10;
                        height += ddy;
                        if (mxClient.IS_SVG) {
                            _this.tooltipTitle.style.marginTop = (2 - ddy) + 'px';
                        }
                        else {
                            height -= 6;
                            _this.tooltipTitle.style.top = (height - ddy) + 'px';
                        }
                    }
                    else if (_this.tooltipTitle != null && _this.tooltipTitle.parentNode != null) {
                        _this.tooltipTitle.style.display = 'none';
                    }
                    _this.tooltip.style.height = height + 'px';
                    var x0 = -Math.round(bounds.x - _this.tooltipBorder);
                    var y0 = -Math.round(bounds.y - _this.tooltipBorder);
                    var b = document.body;
                    var d = document.documentElement;
                    var off = new mxPoint(0, 0);
                    var bottom = Math.max(b.clientHeight || 0, d.clientHeight);
                    var left = _this.container.clientWidth + _this.editorUi.sidebarSplitSize + 3 + _this.editorUi.container.offsetLeft + off.x;
                    var top = Math.min(bottom - height - 20 /*status bar*/, Math.max(0, (_this.editorUi.container.offsetTop +
                        _this.container.offsetTop + elt.offsetTop - _this.container.scrollTop - height / 2 + 16))) + off.y;
                    if (mxClient.IS_SVG) {
                        if (x0 != 0 || y0 != 0) {
                            _this.graph2.view.canvas.setAttribute('transform', 'translate(' + x0 + ',' + y0 + ')');
                        }
                        else {
                            _this.graph2.view.canvas.removeAttribute('transform');
                        }
                    }
                    else {
                        _this.graph2.view.drawPane.style.left = x0 + 'px';
                        _this.graph2.view.drawPane.style.top = y0 + 'px';
                    }
                    // Workaround for ignored position CSS style in IE9
                    // (changes to relative without the following line)
                    _this.tooltip.style.position = 'absolute';
                    _this.tooltip.style.left = left + 'px';
                    _this.tooltip.style.top = top + 'px';
                    _this.tooltipImage.style.left = (left - 13) + 'px';
                    _this.tooltipImage.style.top = (top + height / 2 - 13) + 'px';
                };
                if (this.tooltip != null && this.tooltip.style.display != 'none') {
                    show();
                }
                else {
                    this.thread = window.setTimeout(show, this.tooltipDelay);
                }
                this.currentElt = elt;
            }
        }
    };
    /**
     * 隐藏提示信息
     */
    Sidebar.prototype.hideTooltip = function () {
        if (this.thread != null) {
            window.clearTimeout(this.thread);
            this.thread = null;
        }
        if (this.tooltip != null) {
            this.tooltip.style.display = 'none';
            this.tooltipImage.style.visibility = 'hidden';
            this.currentElt = null;
        }
    };
    /**
     * 创建可拖动对象
     * @param elt
     * @param dropHandler
     * @param preview
     * @param cells
     * @param bounds
     * @returns
     */
    Sidebar.prototype.createDragSource = function (elt, dropHandler, preview, cells, bounds) {
        var dragSource = mxUtils.makeDraggable(elt, this.editorUi.graph, function (graph, evt, target, x, y) {
            dropHandler(graph, evt, target, x, y);
        }, preview, 0, 0, null, true, true);
        // 拖拽时支持对标画布节点
        dragSource.isGuidesEnabled = function () { return true; };
        return dragSource;
    };
    /**
     * 创建拖拽对象落地后处理器
     * @param cells
     * @param allowSplit
     * @param allowCellsInserted
     * @param bounds
     * @returns
     */
    Sidebar.prototype.createDropHandler = function (cells, allowSplit, allowCellsInserted, bounds) {
        var _this = this;
        if (allowCellsInserted === void 0) { allowCellsInserted = true; }
        var handler = function (graph, evt, target, x, y, force) {
            var elt = (force) ? null : ((mxEvent.isTouchEvent(evt) || mxEvent.isPenEvent(evt)) ?
                document.elementFromPoint(mxEvent.getClientX(evt), mxEvent.getClientY(evt)) :
                mxEvent.getSource(evt));
            while (elt != null && elt != _this.container) {
                elt = elt.parentNode;
            }
            if (elt == null && graph.isEnabled()) {
                cells = graph.getImportableCells(cells);
                if (cells.length > 0) {
                    graph.stopEditing();
                    // Holding alt while mouse is released ignores drop target
                    var validDropTarget = (target != null && !mxEvent.isAltDown(evt)) ?
                        graph.isValidDropTarget(target, cells, evt) : false;
                    var select = null;
                    if (target != null && !validDropTarget) {
                        target = null;
                    }
                    if (!graph.isCellLocked(target || graph.getDefaultParent())) {
                        graph.model.beginUpdate();
                        try {
                            x = Math.round(x);
                            y = Math.round(y);
                            // Splits the target edge or inserts into target group
                            if (allowSplit && graph.isSplitTarget(target, cells, evt)) {
                                var s = graph.view.scale;
                                var tr = graph.view.translate;
                                var tx = (x + tr.x) * s;
                                var ty = (y + tr.y) * s;
                                var clones = graph.cloneCells(cells);
                                graph.splitEdge(target, clones, null, x - bounds.width / 2, y - bounds.height / 2, tx, ty);
                                select = clones;
                            }
                            else if (cells.length > 0) {
                                select = graph.importCells(cells, x, y, target);
                            }
                            // Executes parent layout hooks for position/order
                            if (graph.layoutManager != null) {
                                var layout = graph.layoutManager.getLayout(target);
                                if (layout != null) {
                                    var s = graph.view.scale;
                                    var tr = graph.view.translate;
                                    var tx = (x + tr.x) * s;
                                    var ty = (y + tr.y) * s;
                                    for (var i = 0; i < select.length; i++) {
                                        layout.moveCell(select[i], tx, ty);
                                    }
                                }
                            }
                            // 绑定BPMN相关属性
                            graph.bindBpmnElements(select);
                            if (allowCellsInserted && (evt == null || !mxEvent.isShiftDown(evt))) {
                                graph.fireEvent(new mxEventObject(PmfEvents.CellsInserted, 'cells', select));
                            }
                        }
                        finally {
                            graph.model.endUpdate();
                        }
                        if (select != null && select.length > 0) {
                            graph.scrollCellToVisible(select[0]);
                            graph.setSelectionCells(select);
                        }
                    }
                }
                mxEvent.consume(evt);
            }
        };
        return handler;
    };
    /**
     * 创建拖拽源预览
     * @param width
     * @param height
     * @returns
     */
    Sidebar.prototype.createDragPreview = function (width, height) {
        var elt = document.createElement('div');
        elt.style.border = this.dragPreviewBorder;
        elt.style.width = width + 'px';
        elt.style.height = height + 'px';
        return elt;
    };
    /**
     * 销毁
     */
    Sidebar.prototype.destroy = function () {
        if (this.graph != null) {
            if (this.graph.container != null && this.graph.container.parentNode != null) {
                this.graph.container.parentNode.removeChild(this.graph.container);
            }
            this.graph.destroy();
            this.graph = null;
        }
    };
    return Sidebar;
}());
export { Sidebar };
//# sourceMappingURL=Sidebar.js.map