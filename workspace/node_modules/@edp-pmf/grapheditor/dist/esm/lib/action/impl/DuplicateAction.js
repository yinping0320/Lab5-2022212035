import { __extends } from "tslib";
import { KeyCodes } from "../../util/KeyCodes";
import { PmfEvents } from "../../util/PmfEvents";
import { Action } from "../Action";
import { ActionKeys } from "../ActionKeys";
var DuplicateAction = /** @class */ (function (_super) {
    __extends(DuplicateAction, _super);
    function DuplicateAction(editorUi) {
        var _this = _super.call(this, ActionKeys.pmf_duplicate, editorUi, false) || this;
        _this.shortcutControlKey = true;
        _this.shortcutShiftKey = false;
        _this.shortcutKeyCode = KeyCodes.D;
        _this.editorUi.addListener(PmfEvents.SelectionModelChanged, function () {
            var selected = !_this.editorUi.graph.isSelectionEmpty();
            _this.setEnabled(selected);
        });
        return _this;
    }
    DuplicateAction.prototype.execute = function (evt) {
        var graph = this.editorUi.graph;
        var cells = graph.getSelectionCells();
        var append = true;
        cells = graph.model.getTopmostCells(cells);
        var model = graph.getModel();
        var s = graph.gridSize;
        var select = [];
        model.beginUpdate();
        try {
            var clones = graph.cloneCells(cells, false);
            for (var i = 0; i < cells.length; i++) {
                var parent_1 = model.getParent(cells[i]);
                var child = graph.moveCells([clones[i]], s, s, false, parent_1)[0];
                select.push(child);
                if (append) {
                    model.add(parent_1, clones[i]);
                }
                else {
                    // Maintains child index by inserting after cloned in parent
                    var index = parent_1.getIndex(cells[i]);
                    model.add(parent_1, clones[i], index + 1);
                }
            }
        }
        finally {
            model.endUpdate();
        }
        graph.setSelectionCells(select);
    };
    return DuplicateAction;
}(Action));
export { DuplicateAction };
//# sourceMappingURL=DuplicateAction.js.map