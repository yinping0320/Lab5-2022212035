import { __extends } from "tslib";
import { KeyCodes } from "../../util/KeyCodes";
import { PmfEvents } from "../../util/PmfEvents";
import { Action } from "../Action";
import { ActionKeys } from "../ActionKeys";
var DeleteAction = /** @class */ (function (_super) {
    __extends(DeleteAction, _super);
    function DeleteAction(editorUi) {
        var _this = _super.call(this, ActionKeys.pmf_delete, editorUi, true) || this;
        _this.shortcutControlKey = false;
        _this.shortcutShiftKey = false;
        _this.shortcutKeyCode = KeyCodes.Del;
        _this.editorUi.addListener(PmfEvents.SelectionModelChanged, function () {
            var selected = !_this.editorUi.graph.isSelectionEmpty();
            _this.setEnabled(selected);
        });
        return _this;
    }
    DeleteAction.prototype.execute = function (evt) {
        var includeEdges = true;
        var graph = this.editorUi.graph;
        graph.escape();
        var cells = graph.getDeletableCells(graph.getSelectionCells());
        if (cells != null && cells.length > 0) {
            var parents = graph.model.getParents(cells);
            graph.removeCells(cells, includeEdges);
            // Selects parents for easier editing of groups
            if (parents != null) {
                var select = [];
                for (var i = 0; i < parents.length; i++) {
                    if (graph.model.contains(parents[i]) && (graph.model.isVertex(parents[i]) || graph.model.isEdge(parents[i]))) {
                        select.push(parents[i]);
                    }
                }
                graph.setSelectionCells(select);
            }
        }
    };
    return DeleteAction;
}(Action));
export { DeleteAction };
//# sourceMappingURL=DeleteAction.js.map