import { __extends } from "tslib";
import { PmfEvents } from "../../util/PmfEvents";
import { Action } from "../Action";
import { ActionKeys } from "../ActionKeys";
var DistributeHorizontalAction = /** @class */ (function (_super) {
    __extends(DistributeHorizontalAction, _super);
    function DistributeHorizontalAction(editorUi) {
        var _this = _super.call(this, ActionKeys.pmf_horizontal, editorUi, false) || this;
        _this.editorUi.addListener(PmfEvents.LockedChanged, function () {
            _this.setEnabled(_this.isAlignActionEnabled(_this.editorUi.graph));
        });
        _this.editorUi.addListener(PmfEvents.SelectionModelChanged, function () {
            _this.setEnabled(_this.isAlignActionEnabled(_this.editorUi.graph));
        });
        return _this;
    }
    DistributeHorizontalAction.prototype.execute = function (evt) {
        var graph = this.editorUi.graph;
        graph.distributeCells(true);
    };
    DistributeHorizontalAction.prototype.isAlignActionEnabled = function (graph) {
        return this.isUnlocked(graph) && this.isVertexSelected(graph) && graph.getSelectionCount() > 1;
    };
    DistributeHorizontalAction.prototype.isUnlocked = function (graph) {
        var unlocked = graph.isEnabled() && !graph.isCellLocked(graph.getDefaultParent());
        return unlocked;
    };
    DistributeHorizontalAction.prototype.isVertexSelected = function (graph) {
        var vertexSelected = false;
        var cells = graph.getSelectionCells();
        if (cells != null) {
            for (var i = 0; i < cells.length; i++) {
                var cell = cells[i];
                if (graph.getModel().isVertex(cell)) {
                    vertexSelected = true;
                }
                if (vertexSelected) {
                    break;
                }
            }
        }
        return vertexSelected;
    };
    return DistributeHorizontalAction;
}(Action));
export { DistributeHorizontalAction };
//# sourceMappingURL=DistributeHorizontalAction.js.map