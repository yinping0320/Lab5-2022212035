import { AboutAction } from "./impl/AboutAction";
import { AlignBottomAction } from "./impl/AlignBottomAction";
import { AlignCenterAction } from "./impl/AlignCenterAction";
import { AlignLeftAction } from "./impl/AlignLeftAction";
import { AlignMiddleAction } from "./impl/AlignMiddleAction";
import { AlignRightAction } from "./impl/AlignRightAction";
import { AlignTopAction } from "./impl/AlignTopAction";
import { AutosizeAction } from "./impl/AutosizeAction";
import { ClearWaypointsAction } from "./impl/ClearWaypointsAction";
import { CopyAction } from "./impl/CopyAction";
import { CutAction } from "./impl/CutAction";
import { DeleteAction } from "./impl/DeleteAction";
import { DistributeHorizontalAction } from "./impl/DistributeHorizontalAction";
import { DistributeVerticalAction } from "./impl/DistributeVerticalAction";
import { DuplicateAction } from "./impl/DuplicateAction";
import { FitWindowAction } from "./impl/FitWindowAction";
import { FormatPanelAction } from "./impl/FormatPanelAction";
import { HelpAction } from "./impl/HelpAction";
import { LockUnlockAction } from "./impl/LockUnlockAction";
import { OutlineAction } from "./impl/OutlineAction";
import { PasteAction } from "./impl/PasteAction";
import { RedoAction } from "./impl/RedoAction";
import { ResetViewAction } from "./impl/ResetViewAction";
import { SelectAllAction } from "./impl/SelectAllAction";
import { SelectEdgesAction } from "./impl/SelectEdgesAction";
import { SelectNoneAction } from "./impl/SelectNoneAction";
import { SelectVerticesAction } from "./impl/SelectVerticesAction";
import { ToBackAction } from "./impl/ToBackAction";
import { ToFrontAction } from "./impl/ToFrontAction";
import { UndoAction } from "./impl/UndoAction";
import { ViewGridAction } from "./impl/ViewGridAction";
import { View_100_Action } from "./impl/View_100_Action";
import { View_125_Action } from "./impl/View_125_Action";
import { View_150_Action } from "./impl/View_150_Action";
import { View_200_Action } from "./impl/View_200_Action";
import { View_25_Action } from "./impl/View_25_Action";
import { View_300_Action } from "./impl/View_300_Action";
import { View_400_Action } from "./impl/View_400_Action";
import { View_50_Action } from "./impl/View_50_Action";
import { View_75_Action } from "./impl/View_75_Action";
import { ZoomInAction } from "./impl/ZoomInAction";
import { ZoomOutAction } from "./impl/ZoomOutAction";
/**
 * 动作列表类
 */
var Actions = /** @class */ (function () {
    function Actions(editorUi) {
        this.editorUi = editorUi;
        this.actionDic = {};
        this.init();
    }
    /**
     * 添加动作
     * @param action
     */
    Actions.prototype.addAction = function (action) {
        this.actionDic[action.key] = action;
        if (action.shortcutKeyCode != null) {
            this.addShortcut(action.key, action.shortcutKeyCode, action.shortcutControlKey, action.shortcutShiftKey, action.shortcutAltKey);
        }
    };
    /**
     * 添加动作
     */
    Actions.prototype.addActions = function () {
        var _this = this;
        var actions = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            actions[_i] = arguments[_i];
        }
        actions && actions.forEach(function (action) {
            _this.addAction(action);
        });
    };
    /**
     * 根据key查找动作
     * @param key
     * @returns
     */
    Actions.prototype.getAction = function (key) {
        return this.actionDic[key];
    };
    /**
     * 删除动作
     * @param key
     * @returns
     */
    Actions.prototype.removeAction = function (key) {
        var action = this.getAction(key);
        if (action) {
            delete this.actionDic[key];
        }
        return action;
    };
    /**
     * 添加快捷键
     * @param actionKey
     * @param keyCode
     * @param control
     * @param shift
     * @param alt
     * @returns
     */
    Actions.prototype.addShortcut = function (actionKey, keyCode, control, shift, alt) {
        var action = this.getAction(actionKey);
        if (action == null) {
            return;
        }
        var funct = function (evt) {
            if (action.isEnabled()) {
                action.execute(evt);
            }
        };
        this.editorUi.keyHandler && this.editorUi.keyHandler.bindAction(funct, keyCode, control, shift, alt);
    };
    /**
     * 初始化
     */
    Actions.prototype.init = function () {
        //Edit
        this.addActions(new UndoAction(this.editorUi), new RedoAction(this.editorUi), new CutAction(this.editorUi), new CopyAction(this.editorUi), new PasteAction(this.editorUi), new DeleteAction(this.editorUi), new DuplicateAction(this.editorUi), new SelectVerticesAction(this.editorUi), new SelectEdgesAction(this.editorUi), new SelectAllAction(this.editorUi), new SelectNoneAction(this.editorUi), new LockUnlockAction(this.editorUi));
        //View
        this.addActions(new FormatPanelAction(this.editorUi), new OutlineAction(this.editorUi), new ZoomInAction(this.editorUi), new ZoomOutAction(this.editorUi), new ResetViewAction(this.editorUi), new View_25_Action(this.editorUi), new View_50_Action(this.editorUi), new View_75_Action(this.editorUi), new View_100_Action(this.editorUi), new View_125_Action(this.editorUi), new View_150_Action(this.editorUi), new View_200_Action(this.editorUi), new View_300_Action(this.editorUi), new View_400_Action(this.editorUi), new FitWindowAction(this.editorUi), new ViewGridAction(this.editorUi));
        //Arrange
        this.addActions(new ToFrontAction(this.editorUi), new ToBackAction(this.editorUi), new AlignLeftAction(this.editorUi), new AlignCenterAction(this.editorUi), new AlignRightAction(this.editorUi), new AlignTopAction(this.editorUi), new AlignMiddleAction(this.editorUi), new AlignBottomAction(this.editorUi), new DistributeHorizontalAction(this.editorUi), new DistributeVerticalAction(this.editorUi), new ClearWaypointsAction(this.editorUi), new AutosizeAction(this.editorUi));
        //Help
        this.addActions(new HelpAction(this.editorUi), new AboutAction(this.editorUi));
    };
    Actions.prototype.isUnlocked = function (graph) {
        var unlocked = graph.isEnabled() && !graph.isCellLocked(graph.getDefaultParent());
        return unlocked;
    };
    Actions.prototype.isVertexSelected = function (graph) {
        var vertexSelected = false;
        var cells = graph.getSelectionCells();
        if (cells != null) {
            for (var i = 0; i < cells.length; i++) {
                var cell = cells[i];
                if (graph.getModel().isVertex(cell)) {
                    vertexSelected = true;
                }
                if (vertexSelected) {
                    break;
                }
            }
        }
        return vertexSelected;
    };
    Actions.prototype.isEdgeSelected = function (graph) {
        var edgeSelected = false;
        var cells = graph.getSelectionCells();
        if (cells != null) {
            for (var i = 0; i < cells.length; i++) {
                var cell = cells[i];
                if (graph.getModel().isEdge(cell)) {
                    edgeSelected = true;
                }
                if (edgeSelected) {
                    break;
                }
            }
        }
        return edgeSelected;
    };
    Actions.prototype.isAlignActionEnabled = function (graph) {
        return this.isUnlocked(graph) && this.isVertexSelected(graph) && graph.getSelectionCount() > 1;
    };
    return Actions;
}());
export { Actions };
//# sourceMappingURL=Actions.js.map