{"version":3,"file":"LockUnlockAction.js","sourceRoot":"","sources":["../../../../../src/lib/action/impl/LockUnlockAction.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,WAAW,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AAEjE,OAAO,EAAE,QAAQ,EAAE,MAAM,qBAAqB,CAAC;AAC/C,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAC;AACjD,OAAO,EAAE,MAAM,EAAE,MAAM,WAAW,CAAC;AACnC,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C;IAAsC,oCAAM;IACxC,0BAAY,QAAmB;QAA/B,YACI,kBAAM,UAAU,CAAC,cAAc,EAAE,QAAQ,EAAE,KAAK,CAAC,SAUpD;QARG,KAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAC/B,KAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;QAC9B,KAAI,CAAC,eAAe,GAAG,QAAQ,CAAC,CAAC,CAAC;QAElC,KAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,qBAAqB,EAAE;YACvD,IAAI,QAAQ,GAAG,CAAC,KAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,gBAAgB,EAAE,CAAC;YACvD,KAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;;IACP,CAAC;IAED,kCAAO,GAAP,UAAQ,GAAkC;QACtC,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;QAEhC,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE,EAAE;YAC3B,KAAK,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC;YAC/B,IAAI;gBACA,IAAI,YAAY,GAAG,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACzE,KAAK,CAAC,gBAAgB,CAAC,WAAW,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;gBAChE,KAAK,CAAC,gBAAgB,CAAC,WAAW,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;gBAClE,KAAK,CAAC,gBAAgB,CAAC,WAAW,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;gBAClE,KAAK,CAAC,gBAAgB,CAAC,WAAW,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;gBAClE,KAAK,CAAC,gBAAgB,CAAC,WAAW,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC;gBACjE,KAAK,CAAC,gBAAgB,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;aACvD;oBACO;gBACJ,KAAK,CAAC,QAAQ,EAAE,CAAC,SAAS,EAAE,CAAC;gBAC7B,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,aAAa,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC;aACvE;SACJ;IACL,CAAC;IACL,uBAAC;AAAD,CAAC,AAlCD,CAAsC,MAAM,GAkC3C","sourcesContent":["import { mxConstants, mxEventObject } from \"@edp-pmf/mxgraph-ts\";\r\nimport { IEditorUi } from \"../../ui/IEditorUi\";\r\nimport { KeyCodes } from \"../../util/KeyCodes\";\r\nimport { PmfEvents } from \"../../util/PmfEvents\";\r\nimport { Action } from \"../Action\";\r\nimport { ActionKeys } from \"../ActionKeys\";\r\n\r\nexport class LockUnlockAction extends Action {\r\n    constructor(editorUi: IEditorUi) {\r\n        super(ActionKeys.pmf_lockUnlock, editorUi, false);\r\n\r\n        this.shortcutControlKey = true;\r\n        this.shortcutShiftKey = false;\r\n        this.shortcutKeyCode = KeyCodes.L;\r\n\r\n        this.editorUi.addListener(PmfEvents.SelectionModelChanged, () => {\r\n            let selected = !this.editorUi.graph.isSelectionEmpty();\r\n            this.setEnabled(selected);\r\n        });\r\n    }\r\n\r\n    execute(evt?: PointerEvent | KeyboardEvent): void {\r\n        let graph = this.editorUi.graph;\r\n\r\n        if (!graph.isSelectionEmpty()) {\r\n            graph.getModel().beginUpdate();\r\n            try {\r\n                let defaultValue = graph.isCellMovable(graph.getSelectionCell()) ? 1 : 0;\r\n                graph.toggleCellStyles(mxConstants.STYLE_MOVABLE, defaultValue);\r\n                graph.toggleCellStyles(mxConstants.STYLE_RESIZABLE, defaultValue);\r\n                graph.toggleCellStyles(mxConstants.STYLE_ROTATABLE, defaultValue);\r\n                graph.toggleCellStyles(mxConstants.STYLE_DELETABLE, defaultValue);\r\n                graph.toggleCellStyles(mxConstants.STYLE_EDITABLE, defaultValue);\r\n                graph.toggleCellStyles('connectable', defaultValue);\r\n            }\r\n            finally {\r\n                graph.getModel().endUpdate();\r\n                this.editorUi.fireEvent(new mxEventObject(PmfEvents.LockedChanged));\r\n            }\r\n        }\r\n    }\r\n}"]}