import { __extends } from "tslib";
import { KeyCodes } from "../../util/KeyCodes";
import { PmfEvents } from "../../util/PmfEvents";
import { Action } from "../Action";
import { ActionKeys } from "../ActionKeys";
var ClearWaypointsAction = /** @class */ (function (_super) {
    __extends(ClearWaypointsAction, _super);
    function ClearWaypointsAction(editorUi) {
        var _this = _super.call(this, ActionKeys.pmf_clearWaypoints, editorUi, false) || this;
        _this.shortcutControlKey = false;
        _this.shortcutShiftKey = true;
        _this.shortcutAltKey = true;
        _this.shortcutKeyCode = KeyCodes.C;
        _this.editorUi.addListener(PmfEvents.SelectionModelChanged, function () {
            var selected = !_this.editorUi.graph.isSelectionEmpty();
            _this.setEnabled(selected);
        });
        return _this;
    }
    ClearWaypointsAction.prototype.execute = function (evt) {
        var graph = this.editorUi.graph;
        var cells = graph.getSelectionCells();
        if (cells != null) {
            cells = graph.addAllEdges(cells);
            graph.getModel().beginUpdate();
            try {
                for (var i = 0; i < cells.length; i++) {
                    var cell = cells[i];
                    if (graph.getModel().isEdge(cell)) {
                        var geo = graph.getCellGeometry(cell);
                        if (geo != null) {
                            geo = geo.clone();
                            geo.points = null;
                            graph.getModel().setGeometry(cell, geo);
                        }
                    }
                }
            }
            finally {
                graph.getModel().endUpdate();
            }
        }
    };
    return ClearWaypointsAction;
}(Action));
export { ClearWaypointsAction };
//# sourceMappingURL=ClearWaypointsAction.js.map