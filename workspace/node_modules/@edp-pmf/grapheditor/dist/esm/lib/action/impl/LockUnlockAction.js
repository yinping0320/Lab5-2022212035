import { __extends } from "tslib";
import { mxConstants, mxEventObject } from "@edp-pmf/mxgraph-ts";
import { KeyCodes } from "../../util/KeyCodes";
import { PmfEvents } from "../../util/PmfEvents";
import { Action } from "../Action";
import { ActionKeys } from "../ActionKeys";
var LockUnlockAction = /** @class */ (function (_super) {
    __extends(LockUnlockAction, _super);
    function LockUnlockAction(editorUi) {
        var _this = _super.call(this, ActionKeys.pmf_lockUnlock, editorUi, false) || this;
        _this.shortcutControlKey = true;
        _this.shortcutShiftKey = false;
        _this.shortcutKeyCode = KeyCodes.L;
        _this.editorUi.addListener(PmfEvents.SelectionModelChanged, function () {
            var selected = !_this.editorUi.graph.isSelectionEmpty();
            _this.setEnabled(selected);
        });
        return _this;
    }
    LockUnlockAction.prototype.execute = function (evt) {
        var graph = this.editorUi.graph;
        if (!graph.isSelectionEmpty()) {
            graph.getModel().beginUpdate();
            try {
                var defaultValue = graph.isCellMovable(graph.getSelectionCell()) ? 1 : 0;
                graph.toggleCellStyles(mxConstants.STYLE_MOVABLE, defaultValue);
                graph.toggleCellStyles(mxConstants.STYLE_RESIZABLE, defaultValue);
                graph.toggleCellStyles(mxConstants.STYLE_ROTATABLE, defaultValue);
                graph.toggleCellStyles(mxConstants.STYLE_DELETABLE, defaultValue);
                graph.toggleCellStyles(mxConstants.STYLE_EDITABLE, defaultValue);
                graph.toggleCellStyles('connectable', defaultValue);
            }
            finally {
                graph.getModel().endUpdate();
                this.editorUi.fireEvent(new mxEventObject(PmfEvents.LockedChanged));
            }
        }
    };
    return LockUnlockAction;
}(Action));
export { LockUnlockAction };
//# sourceMappingURL=LockUnlockAction.js.map